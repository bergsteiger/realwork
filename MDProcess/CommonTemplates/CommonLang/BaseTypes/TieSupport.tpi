////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/CommonTemplates/CommonLang/BaseTypes/TieSupport.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAUtilityPack::Class>> MDProcess$Templates::CommonTemplates::CommonLang::BaseTypes::TieSupport
//
// вспомогательные функции для генерации tie
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// генерация методов поддержки работы со счетчиком ссылок, для TIE-обёртки контэйнера
f _tie_container_refcount_base_h
//#UC START# *4729ADE70232*
		virtual unsigned long __stdcall query_interface (
			const ::Core::ComIID& iid
			, void*& object
		);
	
		virtual unsigned long __stdcall addref () const;
	
	public:
		virtual unsigned long __stdcall release () const;
	
	// For ObjectPool's objects initialization and destruction
	public:
		void init ();
	
		void done ();
	
	private:
		%SN_tie ();
	
		typedef ::Core::PoolObjectManager\<%SN_tie\>::PoolObjectManagerSingleton MyPool;
		typedef ::Core::PoolObjectManager\<%SN_tie\> Pool;
		friend class ::Core::PoolObjectManager\<%SN_tie\>;
	
	public:
		static const ::Core::ComIID s_com_iid;
		
		static void make_cpp (const %SN_tie* obj, %SN*& ret_);
	
		static void make_tie (%SN* obj, %SN_tie*& ret_);
		
		static void make_tie (const %SN& obj, %SN_tie*& ret_);
	
		static void make_tie (const %SN& obj, %SN_tie*& ret_, const Core::TIEBase* owner);
		
		static void new_tie (%SN* obj, %SN_tie*& ret_);
	
		%SN* m_impl;
		bool m_orphan;

f _tie_container_refcount_base_cpp
	%f_tie_registrator_cpp(%S)
	
	unsigned long __stdcall %SN_tie::query_interface (
		const ::Core::ComIID& iid
		, void*& object
	) {
		if (iid == s_com_iid) {
			this-\>addref();
			object = this;
			return 0x00000000UL;
		} else {
			return 0x80004002UL;
		}
	}
	
	unsigned long __stdcall %SN_tie::addref () const {
		return ++m_counter;
	}
	
	unsigned long __stdcall %SN_tie::release () const {
		long const counter = --m_counter;

		if (counter == 0) {
			MyPool::instance()-\>release_obj(const_cast\<%SN_tie* const\>(this));
		}
		return counter;
	}
	
	void %SN_tie::init () {
		m_counter = 1;
		m_orphan = true;
	}
	
	void %SN_tie::done () {
/			GDS_ASSERT_MSG (0, ("Данный TIE-алгритм (удаление tie-вектора)не тестировался!!!"));
		if (m_orphan && m_impl) {
			delete m_impl;
		}
		m_impl = NULL;
		
		m_tie_owner.release ();
	}
	
	%SN_tie::%SN_tie () : m_impl(NULL), m_orphan(true) {
	}
	
	void %SN_tie::make_cpp (const %SN_tie* obj, %SN*& ret_) {
		if (!obj) {
			ret_ = 0;
		} else {
			ret_ = obj-\>m_impl;
		}
	}
	
	void %SN_tie::new_tie (%SN* obj, %SN_tie*& ret_) {
		Core::Aptr\<%SN\> obj_aptr (obj);
		if (obj_aptr.is_nil ()) {
			ret_ = NULL;
		} else {
			if (ret_) {
				ret_-\>release();
			}
			ret_ = MyPool::instance()-\>new_obj();
			ret_-\>m_impl = obj_aptr.forget ();
		}
	}
	
	void %SN_tie::make_tie (%SN* obj, %SN_tie*& ret_) {
		Core::Aptr\<%SN\> obj_aptr (obj);
		if (obj_aptr.is_nil () || obj_aptr-\>empty ()) {
			ret_ = NULL;
		} else {
			if (ret_) {
				ret_-\>release();
			}
			ret_ = MyPool::instance()-\>new_obj();
			ret_-\>m_impl = obj_aptr.forget ();
		}
	}
		
	void %SN_tie::make_tie (const %SN& obj, %SN_tie*& ret_) {
		if (ret_) {
			ret_-\>release();
		}
		if (obj.empty () == false) {
			ret_ = MyPool::instance()-\>new_obj();
			ret_-\>m_impl = new %SN (obj);
		} else {
			ret_ = NULL;
		}
	}
	
	void %SN_tie::make_tie (const %SN& obj, %SN_tie*& ret_, const Core::TIEBase* owner) {
/			GDS_ASSERT_MSG (0, ("Данный TIE-алгритм (tie-трансформация вектора c кеш-хозяином) не тестировался!!!"));
		GDS_ASSERT(owner);
		if (ret_) {
			ret_-\>release();
		}
		
		if (obj.empty () == false) {
			ret_ = MyPool::instance()-\>new_obj();
			ret_-\>m_impl = const_cast\<%SN*\>(&obj);
			owner-\>addref ();
			ret_-\>m_tie_owner = owner;
			if (owner) {
				ret_-\>m_orphan = false;
			}
		} else {
			ret_ = NULL;
		}
	}
	

f _tie_registrator_cpp
	const ::Core::ComIID %SN_tie::s_com_iid = {[{"%S{native definition}"="DLL outside"}{%f_comiid(%S)}
		%U[{_NATIVE_IID}
		#error "enter valid ComIID"
		]
	]};[{%SS=Interface|%SS=Facet}
	
	%SN_tie::IidRegistrator %SN_tie::s_iid_registrator;]
//#UC END# *4729ADE70232*

// генерация методов поддержки работы со счетчиком ссылок, для TIE-обёртки
f _tie_object_refcount_base_cpp
//#UC START# *4729ADF60196*
	%f_tie_registrator_cpp(%S)
	
	%SN_tie::%SN_tie () : m_impl(NULL) {
	}
	
	unsigned long __stdcall %SN_tie::query_interface (
		const ::Core::ComIID& iid
		, void*& object
	) {
		if (iid == s_com_iid) {
			this-\>addref();
			object = this;
			return 0x00000000UL;
		} else {
			return ::Core::IidMapManagerSgl::instance()-\>tie_query_interface (iid, m_impl, object);
		}
	}

	unsigned long __stdcall %SN_tie::addref () const {
		return ++m_counter;
	}
	
	unsigned long __stdcall %SN_tie::release () const {
		long const counter = --m_counter;

		if (counter == 0) {
			MyPool::instance()-\>release_obj(const_cast\<%SN_tie* const\>(this));
		}
		return counter;
	}
	
	void %SN_tie::init () {
			m_counter = 1;
		}
	
	void %SN_tie::done () {
		m_impl-\>release();
		m_impl = NULL;
		
		m_tie_owner.release ();
	}
	
	void* %SN_tie::cast (::Core::IObject* obj) {
		%SN* ret = dynamic_cast\<%SN*\>(obj);
		if (ret) {
			ret-\>addref();
		}
		I%SN_tie* ret_ = NULL;
		%SN_tie::make_tie (ret, ret_);
		return ret_;
	}
	
	void %SN_tie::make_cpp (const I%SN_tie* obj, %SN*& ret_, bool interface_addref) {
		[{"%S{native definition}"!="DLL outside"}{%U[{_NATIVE_DEFINITION_IMPL}
		]}if (!obj) {
			ret_ = 0;
		} else {
			ret_ = [{"%S{native definition}"!="DLL outside"}{dynamic_cast\<const %SN_tie*\> (obj)-\>m_impl}dynamic_cast\<%SN*\> (obj-\>get_impl ())];
			if (interface_addref) {
				ret_-\>addref();
			}
		}]
	}
	
	void %SN_tie::make_tie (const %SN* obj, I%SN_tie*& ret_, bool interface_addref) {
		if (!obj) {
			ret_ = NULL;
		} else {
			if (ret_) {
				ret_-\>release();
			}
			%SN_tie* ret = MyPool::instance()-\>new_obj();
			ret-\>m_impl = const_cast\<%SN*\>(obj);
			if (interface_addref) {
				ret-\>m_impl-\>addref();
			}
			ret_ = ret;
		}
	}
	
	void %SN_tie::make_tie (const %SN& obj, I%SN_tie*& ret_, const Core::TIEBase* owner) {
		if (ret_) {
			ret_-\>release();
		}
		%SN_tie* ret = MyPool::instance()-\>new_obj();
		ret-\>m_impl = const_cast\<%SN*\>(&obj);
	
		ret-\>m_impl-\>addref();
		owner-\>addref ();
		ret-\>m_tie_owner = owner;
		
		ret_ = ret;
	}
	[{"%S{native definition}"!="DLL outside"}
	::Core::IObject* %SN_tie::get_impl () const {
		return m_impl;
	}]
//#UC END# *4729ADF60196*

// генерация методов поддержки работы со счетчиком ссылок, для TIE-обёртки
f _tie_object_refcount_base_h
//#UC START# *4729AE01005D*
		virtual unsigned long __stdcall query_interface (
			const ::Core::ComIID& iid
			, void*& object
		);
	
		virtual unsigned long __stdcall addref () const;
	
	public:
		virtual unsigned long __stdcall release () const;
	[{"%S{native definition}"!="DLL outside"}
		virtual ::Core::IObject* get_impl () const;]
	
	// For ObjectPool's objects initialization and destruction
	public:
		void init ();
	
		void done ();
	
	private:
		%SN_tie ();
	
		typedef ::Core::PoolObjectManager\<%SN_tie\>::PoolObjectManagerSingleton MyPool;
		typedef ::Core::PoolObjectManager\<%SN_tie\> Pool;
		friend class ::Core::PoolObjectManager\<%SN_tie\>;
		typedef ::Core::IidMapRegistrator\<%SN_tie\> IidRegistrator;
		static IidRegistrator s_iid_registrator;
		
	public:
		static const ::Core::ComIID s_com_iid;
		
		static void* cast (::Core::IObject* obj);
	
		static void make_cpp (const I%SN_tie* obj, %SN*& ret_, bool interface_addref = false);
	
		static void make_tie (const %SN* obj, I%SN_tie*& ret_, bool interface_addref = false);
		
		static void make_tie (const %SN& obj, I%SN_tie*& ret_, const Core::TIEBase* owner);
	
		%SN* m_impl;
//#UC END# *4729AE01005D*

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
