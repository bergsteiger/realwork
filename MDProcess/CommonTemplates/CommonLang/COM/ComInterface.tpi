////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/CommonTemplates/CommonLang/COM/ComInterface.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$Templates::CommonTemplates::CommonLang::COM::ComInterface
//
// COM-интерфейс
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

: ComInterface::Class
? COM-интерфейс
< *::Class,*::Category

= WikiImplClass::Class
= COM::MDAGenerator

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры стереотипа
Y code_com_interface.gif
L code_com_interface
// Параметры визуализации
$ C 215,215,255
$ f 10,10,255

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Пользовательские свойства

p ThreadingModel=Apartment|Free|Both ? определяет потоковую модель. Возможные значения: "Both" - указывает на то, что класс может выполняться как в МТА, так и в STA, "Free" - указывает, что класс может выполняться только в МТА, "Apartment" - указывает, что класс может выполняться только в STA. Отсутствие ThreadingModel означает, что класс может выполняться только в главном STA. Главный STA определяется как первый STA, который должен быть инициализирован в процессе

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Трансформаторы стереотипа

// возвращает базовый клосс для потоковой модели в заивисмости от установленного свойства:
// CComSingleThreadModel, CComMultiThreadModel
%t _thread_model
//#UC START# *470F75AA01B5for470F75220177*
c                                       {}
r "%S{ThreadingModel}"="Apartment":     {ATL::CComSingleThreadModel}
r "%S{ThreadingModel}"="Free":	        {ATL::CComMultiThreadModel}
r "%S{ThreadingModel}"="Both":	        {ATL::CComMultiThreadModel}
//#UC END# *470F75AA01B5for470F75220177*

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

%f _st_space_key
	MDP

%f _wiki_up_print
	%S#[inherited][{"%S{ThreadingModel}"!="%S{!ThreadingModel}"}%f_up_prefix(%S) *ThreadingModel* = *%S{ThreadingModel}* - определяет потоковую модель. Возможные значения: "Both" - указывает на то, что класс может выполняться как в МТА, так и в STA, "Free" - указывает, что класс может выполняться только в МТА, "Apartment" - указывает, что класс может выполняться только в STA. Отсутствие ThreadingModel означает, что класс может выполняться только в главном STA. Главный STA определяется как первый STA, который должен быть инициализирован в процессе
	]


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
%t _constraint
//#UC START# *4704C0E30186for470F75220177*
c                              {}
r {<{}{%P{Full MDP}=true}{C}>!=0&<{}{%a#f_IsUseCase()=true}{C}>=0}:	{%SS не используется ни одним прецедентом}
//#UC END# *4704C0E30186for470F75220177*

// реализация абстрактного стереотипа COM::MDAGenerator
// генератор ODL-файла спецификации COM-интерфейса (.odl)
+ odl
//#UC START# *47032097038Afor470F75220177*
	#\[
	#	object
	#	, uuid (%SG)
	#	, dual
	#	, helpstring("%SN Interface")
	#	, pointer_default(unique)
	#\]
	#interface %SN : [{}{IDispatch}<{, }%f_type(%G)>] {
	%U[
	]
	#};	
	#\[
	#	uuid (%f_str_conv("%SG","%8s-%4s-%4s-%2s%2s-%2s%2s%2s%2s%2s%2s","%8s-%4s-%4s-%2s%2s-%2s%2s%2s%2s%2s")99)
	#	, helpstring ("Co%SN Class")
	#\]
	#coclass Co%SN {
	#	\[default\] interface %SN;
	#};\n
//#UC END# *47032097038Afor470F75220177*

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Вложенные стереотипы

: ComInterface::Class::property::Attribute
? атрибут
= AbstractFacet::Class::property::Attribute

// Функции стереотипа
%f _st_space_key
	MDP


: ComInterface::Class::readonly::Attribute
? Атрибут только для чтения
? для данного атрибута будет сгенерирован только метод получения его значения. Если тип атрибута интерфейс - то он будет возвращаться как константный.
= AbstractFacet::Class::readonly::Attribute

// Параметры стереотипа
e g
/ - возможность использовать исключения
Y code_attr.gif
L code_attr

// Функции стереотипа
%f _st_space_key
	MDP


: ComInterface::Class::writeonly::Attribute
? Атрибут только для записи
? для данного атрибута будут сгенерирован только метод установки его значения.
= AbstractFacet::Class::writeonly::Attribute

// Параметры стереотипа
e s
/ - возможность использовать исключения

// Функции стереотипа
%f _st_space_key
	MDP


: ComInterface::Class::Operation
? Константный метод интерфейса
? По умолчанию все методы константные. Для того что бы разрешить методу изменять свой объект, необходимо присвуоить ему стереотип <<chg>>. Если используется константный интерфейс, то на нем могут быть вызванны только константные методы.
= AbstractFacet::Class::Operation

// Параметры стереотипа
v +
/ - типы видимости
e g
/ - возможность использовать исключения
a a
/ - тип абстракции
Y code_const_method.gif
L code_const_method
T 
/ - может не иметь "цели" (типа/результата)
m t
/ - может быть реализован/иметь перекрытую реализацию
A const|cached|const,cached
/ - стереотипы "цели" (типа/результата)

// Функции стереотипа
%f _st_space_key
	MDP


// Вложенные стереотипы
: ComInterface::Class::Operation::Parameter
? параметр операции
= AbstractFacet::Class::Operation::Parameter

// Функции стереотипа
%f _st_space_key
	MDP



: ComInterface::Class::friend::ClassDependency
? Друг
? Определяет что интерфейс (источник) использует указанный объект (цель) как друг. Т.е. ЦЕЛЬ открывает свои свои скрытые данные и методы ИСТОЧНИКУ.
? ВНИМАНИЕ!!! ИМЕННО ИСТОЧНИК БУДЕТ ДРУГОМ ЦЕЛИ А НЕ НАООБОРОТ!
= AbstractFacet::Class::friend::ClassDependency

// Параметры стереотипа
Y code_dep_friend.gif
L code_dep_friend

// Функции стереотипа
%f _st_space_key
	MDP


: ComInterface::Class::chg::Operation
? Неконстантный метод
? Метод который может изменять состояние своего объекта
= AbstractFacet::Class::chg::Operation

// Параметры стереотипа
Y code_method.gif
L code_method

// Функции стереотипа
%f _st_space_key
	MDP



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

