////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/CommonTemplates/CommonLang/Containers/Array.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$Templates::CommonTemplates::CommonLang::Containers::Array
//
// Массив
// ---
// Определяет простой массив, размер масива задаётся в рантайме и не может изменяться. Тип данных
// определяется атрибутом без стереотипа. Возможно указание специфического аллокатора - атрибут с
// соответствующим стереотипом. Может
// работать в 3-х режимах:
// 1. Просто работает с внешней переданной памятью, не удаляя её при разрушении объекта
// 2. Захватывает переданную внешнюю память и удаляет её при выходе (удаление выполняется спомощью
// аллокатора)
// 3. Объект сам создает массив заданного размера (выделение памяти выполняется с помощью
// аллокатора) и удаляет его при разрушении
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

: Array::Class
? Массив
? Определяет простой массив, размер масива задаётся в рантайме и не может изменяться. Тип данных определяется атрибутом без стереотипа. Возможно указание специфического аллокатора - атрибут с соответствующим стереотипом. Может
? работать в 3-х режимах:
? 1. Просто работает с внешней переданной памятью, не удаляя её при разрушении объекта
? 2. Захватывает переданную внешнюю память и удаляет её при выходе (удаление выполняется спомощью аллокатора)
? 3. Объект сам создает массив заданного размера (выделение памяти выполняется с помощью аллокатора) и удаляет его при разрушении
= Vector::Class

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

%f _st_space_key
	MDP


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// перекрытие базового стереотипа BaseContainer::Class
// сгенерить определение контэйнера для C++
%f _dump_container_def_h
//#UC START# *49015EE401E1for4A0D1146004D*
	%f_dump_container_fwds_h(%S)\
	%f_docs(%S)\
	#typedef Core::Array \< %f_data_dump(%S)<{}{"%CS"="allocator"}, %f_type(%C%T)> \> %SN;
//#UC END# *49015EE401E1for4A0D1146004D*


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

