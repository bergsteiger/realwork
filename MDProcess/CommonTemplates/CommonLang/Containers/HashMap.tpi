////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/CommonTemplates/CommonLang/Containers/HashMap.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$Templates::CommonTemplates::CommonLang::Containers::HashMap
//
// Хеш-карта
// ---
// Индексный контейнер с заданным ключем. Индекс построен на ХЕШ-таблице.
// Абстракция уровня реализации. Тип данных определяется атрибутом без стереотипа. Тип ключа
// определяется ключем связи со этим атрибутом.
// Дополнительно могут быть указанны тип аллокатора данных, тип функтора-сравнения и тип хеш-
// функции, как атрибуты со стереотипами <<allocator>>, <<compare>> и <<hasher>> соотвественно.
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

: HashMap::Class*
? Хеш-карта
? Индексный контейнер с заданным ключем. Индекс построен на ХЕШ-таблице.
? Абстракция уровня реализации. Тип данных определяется атрибутом без стереотипа. Тип ключа определяется ключем связи со этим атрибутом.
? Дополнительно могут быть указанны тип аллокатора данных, тип функтора-сравнения и тип хеш-функции, как атрибуты со стереотипами <<allocator>>, <<compare>> и <<hasher>> соотвественно.
= Map::Class

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

%f _st_space_key
	MDP


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// перекрытие базового стереотипа BaseContainer::Class
// сгенерить определение контэйнера для C++
%f _dump_container_def_h
//#UC START# *49015EE401E1for470F067B0138*
	%f_dump_container_fwds_h(%S)\
	%f_docs(%S)\
/	#typedef std::hash_map \< %f_key_dump(%S), %f_data_dump(%S)%f_hasher_dump(%S)%f_equalto_dump(%S)<{}{"%CS"="allocator"}, %f_type(%C%T)> \> %SN;
	%f_set_var(TYPEDEF,"#typedef std::hash_map \<%f_key_dump(%S)\n#\t, %f_data_dump(%S)[\n#\t, %f_hasher_dump(%S)][\n#\t, %f_equalto_dump(%S)][\n#\t, %f_allocator_dump(%S)]\> %SN;")\
	%f_str_replace(%f_str_replace(%{TYPEDEF}N,\>\>,\> \>),\>\>,\> \>)
//#UC END# *49015EE401E1for470F067B0138*

// перекрытие базового стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
%t _constraint
//#UC START# *4704C0E30186for470F067B0138*
c                           {}
r "<{}{"%CS"=""}{C}>"!="1": {%SS must provide one Data type (by unstereotyped link)}
r "<{}{"%CS"="hasher"}{C}>"!="1"&"<{}{"%CS"="hasher"}{C}>"!="0": {%SS can provide only one Hasher type (by \<\<compare\>\> link)}
r "<{}{"%CS"=""&"%C%Cx"="true"}{C}>"!="1": {%SS must provide one Key type (by subkey in Data type link)}
r "<{}{"%CS"="allocator"}{C}>"!="1"&"<{}{"%CS"="allocator"}{C}>"!="0": {%SS can provide only one Allocator type (by \<\<allocator\>\> link)}
r "<{}{"%CS"=""&"%C%Cl"="agr"&%f_is_foreign_target(%C)=true}{%CC}>"!="0"&"<{}{"%CS"="hasher"}{C}>"="0": {%SS with agrigaited foreign Key type must provide Hasher type %CN %C%CN %C%C%TN}
//#UC END# *4704C0E30186for470F067B0138*

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Вложенные стереотипы

: HashMap::Class::hasher::Attribute
? Функтор ХЭШ функции контейнера
// Параметры стереотипа
Y code_hasher.gif
L code_hasher
T 
/ - может не иметь "цели" (типа/результата)

// Функции стереотипа
%f _st_space_key
	MDP



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

