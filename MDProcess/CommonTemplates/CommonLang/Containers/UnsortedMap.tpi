////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/CommonTemplates/CommonLang/Containers/UnsortedMap.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$Templates::CommonTemplates::CommonLang::Containers::UnsortedMap
//
// Карта без сортировки
// ---
// Несортированный индексный контейнер с заданным ключем.
// Абстракция уровня реализации. Тип данных определяется атрибутом без стереотипа. Тип ключа
// определяется ключем связи со этим атрибутом.
// В отличии от сортированного индексного контейнера, использует умолчательный оператор сравнения,
// гарантирующий только уникальность, но не порядок.
// Дополнительно может быть указанн тип аллокатора данных, как атрибут со стереотипом <<allocator>>.
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

: UnsortedMap::Class
? Карта без сортировки
? Несортированный индексный контейнер с заданным ключем.
? Абстракция уровня реализации. Тип данных определяется атрибутом без стереотипа. Тип ключа определяется ключем связи со этим атрибутом.
? В отличии от сортированного индексного контейнера, использует умолчательный оператор сравнения, гарантирующий только уникальность, но не порядок.
? Дополнительно может быть указанн тип аллокатора данных, как атрибут со стереотипом <<allocator>>.
= HashMap::Class

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры стереотипа
Y code_unsorted_map.gif
L code_unsorted_map

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

%f _st_space_key
	MDP


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// перекрытие базового стереотипа BaseContainer::Class
// сгенерить определение контэйнера для C++
%f _dump_container_def_h
//#UC START# *49015EE401E1for470F050F01B5*
	%f_dump_container_fwds_h(%S)\
	%f_docs(%S)\
/	#typedef Core::UnsortedMap \< %f_key_dump(%S), %f_data_dump(%S)<{}{"%CS"="allocator"}, %f_type(%C%T)> \> %SN;
	%f_set_var(TYPEDEF,"#typedef boost::unordered_map \<%f_key_dump(%S)\n#\t, %f_data_dump(%S)[\n#\t, %f_hasher_dump(%S)][\n#\t, %f_equalto_dump(%S)][\n#\t, %f_allocator_dump(%S)]\> %SN;")\
	%f_str_replace(%f_str_replace(%{TYPEDEF}N,\>\>,\> \>),\>\>,\> \>)

//#UC END# *49015EE401E1for470F050F01B5*

// перекрытие базового стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
%t _constraint
//#UC START# *4704C0E30186for470F050F01B5*
c                           {}
r "<{}{"%CS"=""}{C}>"!="1": {%SS must provide one Data type (by unstereotyped link)}
r "<{}{"%CS"=""&"%C%Cx"="true"}{C}>"!="1": {%SS must provide one Key type (by subkey in Data type link)}
r "<{}{"%CS"="allocator"}{C}>"!="1"&"<{}{"%CS"="allocator"}{C}>"!="0": {%SS can provide only one Allocator type (by \<\<allocator\>\> link)}
r {%S{force usage}=false&%ax=false}: {%SS ни кем не используется}
//#UC END# *4704C0E30186for470F050F01B5*


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

