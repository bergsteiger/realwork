////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/CommonTemplates/CommonLang/InterfaceTypes/Constants.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$Templates::CommonTemplates::CommonLang::InterfaceTypes::Constants
//
// Определение констант
// ---
// Класс с этим стекреотипом служит виртуальным контейнером для констант. Т.е. сам класс не
// определяет никаких артефактов генерации, однако его атрибуты как раз определяют константы.
// Для задания констант внесите в класс атрибуты (не связи) нужного типа и определитие их значение.
// Например: "MY_CONST : long = 123"
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

: Constants::Class
? Определение констант
? Класс с этим стекреотипом служит виртуальным контейнером для констант. Т.е. сам класс не определяет никаких артефактов генерации, однако его атрибуты как раз определяют константы.
? Для задания констант внесите в класс атрибуты (не связи) нужного типа и определитие их значение. Например: "MY_CONST : long = 123"
> ConstantArray::Class

= InterfaceGeneratorWithJava::MDAGenerator
= Генерация JavaScript::MDAGenerator

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры стереотипа
v +#-
/ - типы видимости
Y code_constants.gif
L code_constants
// Параметры визуализации
$ C 245,245,245
$ l 100,100,100
$ f 100,100,100

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Пользовательские свойства

p spell names:b=false ? 

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

%f _st_space_key
	MDP

%f _wiki_up_print
	%S#[inherited][{"%S{spell names}"!="%S{!spell names}"}%f_up_prefix(%S) *spell names* = *%S{spell names}*
	]

%f _WikiGParam
// возвращаемый результат: a-string
//#UC START# *4E09A34F0037for470F16EE0242*
	%PU
//#UC END# *4E09A34F0037for470F16EE0242*

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
%f _DoSpell
//#UC START# *4B2A19E3038Bfor470F16EE0242*
	%S%[inherited]\
	[{%S{spell names}=true}\
	%P%f_add_class(%SU_Names,ConstantArray,%SNNames,Names_Inst)\
	%{Names_Inst}%f_set_visibility_type(%SV)\
	%{Names_Inst}%f_set_documentation(Имена для %SN)\
//	%{Names_Inst}%f_set_abstraction_type(final)\
	%{Names_Inst}%f_set_up(ifdef,%S{ifdef})\
	%{Names_Inst}%f_set_up(ifndef,%S{ifndef})\
	[{"%{string}N"=""}%f_find_element(3DBFFE240068,string)]\
	%{Names_Inst}%f_make_accessable(%{string}U)\
	%f_addG(%{Names_Inst},%{string})\
	<{}{}{%C}\
	%{Names_Inst}%f_add_attribute(%CU_Name,,\
	%CN = '%CN',\
	Attr_Inst)\
	%{Attr_Inst}%f_set_documentation(Имя для %CN)\
	>\
	]
//#UC END# *4B2A19E3038Bfor470F16EE0242*

// реализация абстрактного стереотипа C++ интерфейсы и реализация::MDAGenerator
// генератор файлов реализации C++ (.cpp)
+ cpp
//#UC START# *47022CB8034Bfor470F16EE0242*
	[{"%PC"!="Category"&%P#f_IsUtilityPack()!=true}%f_docs(%S)\
	[%S%f_open_ifdef()
	]<{\n}{%CC=Attribute}%f_shift_scope(true)const %f_const_type(%C)%f_shift_scope(false) %f_function_scope(%P)%CN = %f_init(%C);[ // %f_str_replace(%CD,\n,%f_space(%C))]>][
	%S%f_close_ifdef()]<
	%CX>
//#UC END# *47022CB8034Bfor470F16EE0242*

// реализация абстрактного стереотипа C++ интерфейсы и реализация::MDAGenerator
// генератор заголовочных файлов C++ (.h)
+ h
//#UC START# *47022C88029Ffor470F16EE0242*
	%f_docs(%S)\
	[#%S%f_open_ifdef()
	]<{\n}{%CC=Attribute}{%C}#static const %f_const_type(%C) [%S{children prefix}_]%CN[{%PC=Category|%P#f_IsUtilityPack()=true} = [{"%C%TN"="string"|"%C%TN"="wstring"}{%f_init(%C)[ %C{suffix expr}]}"%CI"]];[ // %f_str_replace(%CD,\n,%f_space(%C))]>[%f_shift_intend(-1)
//	<{\n}{%CC=Attribute}{%C}#static const %f_type(%C%T) %CN[{%PC=Category|%P#f_IsUtilityPack()=true} = [{"%C%TN"="string"|"%C%TN"="wstring"}{%f_init(%C)}"%CI"]];[ // %CD]>[%f_shift_intend(-1)
	<%CX>%f_shift_intend(1)][
	#%S%f_close_ifdef()]

f _const_type
	%f_set_var(TYPE,"")\
	[{%f_type(%T)!=void}{[{%S{forced type}!=none}{%f_set_var(TYPE,"long")%f_type(%{TYPE})}%f_set_var(TYPE,"%S{forced type}")%f_type(%{TYPE})]}%f_type(%T)]
//#UC END# *47022C88029Ffor470F16EE0242*

// реализация абстрактного стереотипа CORBA IDL::MDAGenerator
// генератор idl спецификаций (.idl)
+ idl
//#UC START# *47022BBE0261for470F16EE0242*
P
	%f_docs(%S)\
	<{\n}%CX>
//#UC END# *47022BBE0261for470F16EE0242*

// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Реализация на Delphi(.pas)
+ impl.pas
R  
//#UC START# *470F15B800CBfor470F16EE0242*
R  
	[{%SV!=PublicAccess}[%f_with_gen_id(intf.pas,%SX)\n]]
//#UC END# *470F15B800CBfor470F16EE0242*

// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Родные Delphi интерфейсы (.pas)
+ intf.pas
R  
//#UC START# *470F1571031Cfor470F16EE0242*
R  
	[{%f_exists_in_list(GENERATED_INTF,"%f_pas_TypeName(%S)")!=true}\
	%f_add_to_list(GENERATED_INTF,"%f_pas_TypeName(%S)")\
	<{}{%f_pas_IsSameUnit(%S,%C%T)=true}%C%TX>\
	%f_set_var(CONST_IFDEF,"%f_dump_open_ifdef_str(%S)")\
	[\n%S%f_open_ifdef()]\
	%f_pas_OpenConst(%S)\
	# { [{"%SD"!=""&"%SD"!="undefined"}{%SN}%SD] }
	#<{\n#}%CX>\
	[\n%S%f_close_ifdef()]\

	[{"%{CONST_IFDEF}N"!=""}\
	%f_set_var(WAS_CONST,"0")\
	%f_set_var(CONST_IFDEF,"")\
	]\
	]
//#UC END# *470F1571031Cfor470F16EE0242*

// реализация абстрактного стереотипа Java::MDAGenerator
// генератор классов, интерфейсов на java (.java)
+ java
//#UC START# *470321950119for470F16EE0242*
O [{"%PO"=""&%f_is_server_type(%S)=false}%SN.java]
	%f_output_constraint(%S)\
	[{%f_is_server_type(%S)=false}[{"%PO"=""}\
	%f_header(%S)
	package %f_dump_java_package(%S);
	
	#%t_visibility(%S,"%XU")class %SN {
	]%f_docs(%S)\
	<{\n}{%CC=Attribute}{%C}#[{"%PO"=""}	]%t_visibility(%S,"%XU")static final %f_const_type(%C) %CN[ = %f_init(%C)];[ // %f_str_replace(%CD,\n,%f_space(%C))]>[%f_shift_intend(-1)
	<%CX>%f_shift_intend(1)][{"%PO"=""}
	#} // %SN]][{%f_is_server_type(%S)=false}\
	[{"%PO"=""}
	%f_footer(%S)
	]]
//#UC END# *470321950119for470F16EE0242*

// реализация абстрактного стереотипа Дельфи-DLL Адаптер::MDAGenerator
// Delphi интерфейсы для адаптера (.pas)
+ pas
//#UC START# *470F152700FAfor470F16EE0242*
	[%f_pas_OpenConst(%S)\n]\
	# { [{"%SD"!=""&"%SD"!="undefined"}{%SN}%f_Doc(%S)] }
	<{\n}#\t%CN = [{"%f_type(%C%T)"!=""&"%f_type(%C%T)"!="PAnsiChar"}{%f_init(%C)}%f_type(%C%T)(%f_init(%C))];\
	[\n# \{ %f_Doc(%C) \}]\
	>
//#UC END# *470F152700FAfor470F16EE0242*

// реализация абстрактного стереотипа Документация::MDAGenerator
// Генерация модели в MDKnow
+ wiki
//#UC START# *46E6D4BB0339for470F16EE0242*
G %S%f_WikiGParam()
//#UC END# *46E6D4BB0339for470F16EE0242*

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Вложенные стереотипы

: Constants::Class::Attribute
? константа
= CORBA IDL::MDAGenerator
= Delphi интерфейсы и реализация::MDAGenerator

// Параметры стереотипа
Y code_attr.gif
L code_attr
T 
/ - может не иметь "цели" (типа/результата)
l al
/ - возможные типы связи атрибута

// Пользовательские свойства
p AutoInc:b=false ? Определяет что значение константы будет генеироваться автоматический как инкрементальный счетчик, увеличивающийся на единицу при каждой генерации
p forced type=none|long|unsigned long|string ? принудительный тип константы - используется для генерации нетипизированных констант в С++
p is define:b=false ? Опредлеяет, что константа является дефайном (используется в Дельфи)
p suffix expr:s ? Выражение, приписываемое справа к значению константы.  --- Чтобы можно было задавать константы вида A = B + 1.

// Генераторы
// Генерация модели в MDKnow
+ wiki
//#UC START# *46E6D4BB0339for470F17590109*
//#UC END# *46E6D4BB0339for470F17590109*

// генератор idl спецификаций (.idl)
+ idl
//#UC START# *47022BBE0261for470F17590109*
	%f_docs(%S)\
	#const %f_const_type(%S) %SN = [{"%S{AutoInc}"="true"}{%f_init(%S)}%SA];
//#UC END# *47022BBE0261for470F17590109*

// генератор заголовочных файлов C++ (.h)
+ h
//#UC START# *47022C88029Ffor470F17590109*
//#UC END# *47022C88029Ffor470F17590109*

// генератор файлов реализации C++ (.cpp)
+ cpp
//#UC START# *47022CB8034Bfor470F17590109*
//#UC END# *47022CB8034Bfor470F17590109*

// генератор классов, интерфейсов на java (.java)
+ java
//#UC START# *470321950119for470F17590109*
//#UC END# *470321950119for470F17590109*

// Delphi интерфейсы для адаптера (.pas)
+ pas
//#UC START# *470F152700FAfor470F17590109*
//#UC END# *470F152700FAfor470F17590109*

// Родные Delphi интерфейсы (.pas)
+ intf.pas
R  
//#UC START# *470F1571031Cfor470F17590109*
	[%S%f_open_ifdef()\n#]\
	%S%f_pas_Prefix()%f_N(%S)\

	[{%S{is define}!=true}\
	[ : %f_pas_TypeName(%S%T)]\
	]\

	[ = \
	%S%f_OutValue()\
	]\

	;\
	[\n#\{ %f_Doc(%S) \}]\
	[\n#%S%f_close_ifdef()]
//#UC END# *470F1571031Cfor470F17590109*

// Реализация на Delphi(.pas)
+ impl.pas
R  
//#UC START# *470F15B800CBfor470F17590109*
//#UC END# *470F15B800CBfor470F17590109*

// Функции стереотипа
%f _st_space_key
	MDP

%f _wiki_up_print
	%S#[inherited][{"%S{AutoInc}"!="%S{!AutoInc}"}%f_up_prefix(%S) *AutoInc* = *%S{AutoInc}* - Определяет что значение константы будет генеироваться автоматический как инкрементальный счетчик, увеличивающийся на единицу при каждой генерации
	][{"%S{is define}"!="%S{!is define}"}%f_up_prefix(%S) *is define* = *%S{is define}* - Опредлеяет, что константа является дефайном (используется в Дельфи)
	][{"%S{suffix expr}"!="%S{!suffix expr}"}%f_up_prefix(%S) *suffix expr* = *%S{suffix expr}* - Выражение, приписываемое справа к значению константы.  --- Чтобы можно было задавать константы вида A = B + 1.
	][{"%S{forced type}"!="%S{!forced type}"}%f_up_prefix(%S) *forced type* = *%S{forced type}* - принудительный тип константы - используется для генерации нетипизированных констант в С++
	]


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
%t _constraint
//#UC START# *4704C0E30186for470F17590109*
c                                                                         {}
r {<{}{%PS=ServerLibrary}{C}>!=0&%f_to_lower(%P%PN)=%f_to_lower(%SN)}:    {имя %SS, используемого в качестве серверного типа, не должно совпадать с именем родителя}
/r {%TS=UMLPrimitive&%TN=void&%S{forced type}=none}:                      {Для нетипизированной константы должно быть задано свойство "forced type"}
r {"%SI"=""&%PS=Constants}:                                               {Не задано значение константы}
//#UC END# *4704C0E30186for470F17590109*

: Constants::Class::injects::ClassDependency
? Внедрение зависимости
= Delphi интерфейсы и реализация::MDAGenerator

// Генераторы
// Генерация модели в MDKnow
+ wiki
//#UC START# *46E6D4BB0339for55BF20350026*
//#UC END# *46E6D4BB0339for55BF20350026*

// генератор idl спецификаций (.idl)
+ idl
//#UC START# *47022BBE0261for55BF20350026*
//#UC END# *47022BBE0261for55BF20350026*

// генератор заголовочных файлов C++ (.h)
+ h
//#UC START# *47022C88029Ffor55BF20350026*
//#UC END# *47022C88029Ffor55BF20350026*

// генератор файлов реализации C++ (.cpp)
+ cpp
//#UC START# *47022CB8034Bfor55BF20350026*
//#UC END# *47022CB8034Bfor55BF20350026*

// генератор классов, интерфейсов на java (.java)
+ java
//#UC START# *470321950119for55BF20350026*
//#UC END# *470321950119for55BF20350026*

// Delphi интерфейсы для адаптера (.pas)
+ pas
//#UC START# *470F152700FAfor55BF20350026*
//#UC END# *470F152700FAfor55BF20350026*

// Родные Delphi интерфейсы (.pas)
+ intf.pas
R  
//#UC START# *470F1571031Cfor55BF20350026*
//#UC END# *470F1571031Cfor55BF20350026*

// Реализация на Delphi(.pas)
+ impl.pas
R  
//#UC START# *470F15B800CBfor55BF20350026*
//#UC END# *470F15B800CBfor55BF20350026*

// Функции стереотипа
%f _st_space_key
	MDP


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
%t _constraint
//#UC START# *4704C0E30186for55BF20350026*
c          {}
r {""=""}: {}
//#UC END# *4704C0E30186for55BF20350026*

// реализация абстрактного стереотипа Документация::MDAGenerator
// выводит описание элемента (операция, атрибут) в wiki
%f _wiki_child_kind
//#UC START# *4705CBD6003Efor55BF20350026*
//#UC END# *4705CBD6003Efor55BF20350026*

// реализация абстрактного стереотипа Документация::MDAGenerator
// вывод описание авто-генерируемых методов в wiki
%f _wiki_up_add_gen
//#UC START# *470484D50138for55BF20350026*
//#UC END# *470484D50138for55BF20350026*


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

