////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/CommonTemplates/CommonLang/InterfaceTypes/Typedef.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$Templates::CommonTemplates::CommonLang::InterfaceTypes::Typedef
//
// Тип
// ---
// Декларация типа определяет производный тип как копию исходного. Исходный задаются как базовый
// класс (связь наследования).
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

: Typedef::Class
? Тип
? Декларация типа определяет производный тип как копию исходного. Исходный задаются как базовый класс (связь наследования).
> Iterator::Class
> Const Iterator::Class

= InterfaceGenerator::MDAGenerator
= Генерация JavaScript::MDAGenerator

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры стереотипа
v +#-
/ - типы видимости
Y code_typedef.gif
L code_typedef
// Параметры визуализации
$ C 240,230,210
$ l 100,75,35
$ f 100,75,35

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Пользовательские свойства

p force usage:b=false ? явно определяет, что элемент будет кем-то использован (нужно для проверки)
p is default ancestor:b=false ? является ли предком по-умолчанию
p newRTTI:b=false ? генерировать ли новые данные для RTTI
p isPointer:b=false ? Является ли TypeDef указателем на тип, а не самим типом (для переноса существующего кода).
p isClassRef:b=false ? Определяет, что тип является ссылкой на класс.
p register in scripts:tribool=undefined ? 

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

%f _st_space_key
	MDP

%f _wiki_up_print
	%S#[inherited][{"%S{force usage}"!="%S{!force usage}"}%f_up_prefix(%S) *force usage* = *%S{force usage}* - явно определяет, что элемент будет кем-то использован (нужно для проверки)
	][{"%S{is default ancestor}"!="%S{!is default ancestor}"}%f_up_prefix(%S) *is default ancestor* = *%S{is default ancestor}* - является ли предком по-умолчанию
	][{"%S{newRTTI}"!="%S{!newRTTI}"}%f_up_prefix(%S) *newRTTI* = *%S{newRTTI}* - генерировать ли новые данные для RTTI
	][{"%S{isPointer}"!="%S{!isPointer}"}%f_up_prefix(%S) *isPointer* = *%S{isPointer}* - Является ли TypeDef указателем на тип, а не самим типом (для переноса существующего кода).
	][{"%S{isClassRef}"!="%S{!isClassRef}"}%f_up_prefix(%S) *isClassRef* = *%S{isClassRef}* - Определяет, что тип является ссылкой на класс.
	][{"%S{register in scripts}"!="%S{!register in scripts}"}%f_up_prefix(%S) *register in scripts* = *%S{register in scripts}*
	]


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
%t _constraint
//#UC START# *4704C0E30186for470F144E000F*
c                              {}
r {<{}{}{%GC}>!=1}: {%SS должен наследоваться от одного типа}
r {<{}{%PS=ServerLibrary}{C}>!=0&%f_to_lower(%PN)=%f_to_lower(%SN)}:                                                            {имя %SS, используемого в качестве серверного типа, не должно совпадать с именем родителя}
r {%Cx=true&%t_is_container(%G)=false&%f_check_if_type(%G,"a-string")=false&%f_check_if_type(%G,"a-wstring")=false}:            {%SS может определять итераторы, только если является контэйнером (в том числе и a-string/a-wstring)}
r {%M{force usage}=false&%S{force usage}=false&%S{is default ancestor}=false&%ax=false}:                                        {%SS ни кем не используется}

//#UC END# *4704C0E30186for470F144E000F*

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Добавляет файлы необходимые элементу с точки зрения метамодели
%f _pas_ImplUses
//#UC START# *4948EB2601FAfor470F144E000F*
	%S%[inherited]\
	<{}{%aC=Dependency&%aS=injects}{Sg}\
	%f_pas_PutToUses(%a%P)\
	>
//#UC END# *4948EB2601FAfor470F144E000F*

// реализация абстрактного стереотипа C++ интерфейсы и реализация::MDAGenerator
// генератор заголовочных файлов C++ (.h)
+ h
//#UC START# *47022C88029Ffor470F144E000F*
	%f_docs(%S)\
	[#%S%f_open_ifdef()
	]#typedef %f_type(%G) %SN;[{%GN=string}
	#typedef const char* %SN_const;
	][{%t_interface(%G)=true}
	#typedef %G<%NN::>%GN_var %SN_var;
	#typedef %G<%NN::>%GN_cvar %SN_cvar;][
	#%S%f_close_ifdef()]


+ dll.h
	[{%f_need_tie(%G)=true}[#%S%f_open_ifdef()
	]#typedef %f_type(%G) I%SN_tie;
	#typedef %f_str_replace(%f_type(%G),I%GN_tie,%GN_tie) %SN_tie;[
	#%S%f_close_ifdef()]]
//#UC END# *47022C88029Ffor470F144E000F*

// реализация абстрактного стереотипа CORBA IDL::MDAGenerator
// генератор idl спецификаций (.idl)
+ idl
//#UC START# *47022BBE0261for470F144E000F*
	%f_docs(%S)\
	#typedef %G<%NN::>%GN %SN;
//#UC END# *47022BBE0261for470F144E000F*

// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Реализация на Delphi(.pas)
+ impl.pas
R  
//#UC START# *470F15B800CBfor470F144E000F*
	[{%SV!=PublicAccess}[%f_with_gen_id(intf.pas,%SX)\n]]
//#UC END# *470F15B800CBfor470F144E000F*

// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Родные Delphi интерфейсы (.pas)
+ intf.pas
R  
//#UC START# *470F1571031Cfor470F144E000F*
F [%SX\n]
	[{%SN!=IUnknown&%SN!=BOOL&%SN!=Boolean&%SN!=Integer&%SN!=Pointer&%SN!=Cardinal}\
	[{%f_exists_in_list(GENERATED_INTF,S)!=true}\
	[{%f_exists_in_list(FORWARDED_INTF,S)!=true}\
	%f_add_to_list(GENERATED_INTF,S)\
	%f_add_to_list(FORWARDED_INTF,S)\
	%f_pas_OpenType(%S)\
	[#%S%f_open_ifdef()\n]\
	[{%t_interface(%G)=true}\
	[{%f_pas_IsSameUnit(%S,%G)=true}\
	%GF\
	]\
	]\
	#%f_pas_TypeName(%S) = \
	[{%S{newRTTI}=true}type ]\
	[{%S{isPointer}=true}^]\
	[{%S{isClassRef}=true}class of ]\
	[{%S{isPointer}!=true}[%f_pas_AncestorPrefix(%S).]]\
	%f_pas_TypeName(%G);\
	[\n# \{* %SD \}]\
	[\n#%S%f_close_ifdef()]\
	]\
//	{%f_exists_in_list(FORWARDED_INTF,S)!=true}
	]\
//	{%f_exists_in_list(GENERATED_INTF,S)!=true}
	]
//	[{%SN!=IUnknown&%SN!=BOOL&%SN!=Boolean&%SN!=Integer&%SN!=Pointer&%SN!=Cardinal}
//#UC END# *470F1571031Cfor470F144E000F*

// реализация абстрактного стереотипа Дельфи-DLL Адаптер::MDAGenerator
// Delphi интерфейсы для адаптера (.pas)
+ pas
//#UC START# *470F152700FAfor470F144E000F*
F [{%t_interface(%S)=true}%S%f_interface_typedef_dump()]
	[{%t_interface(%S)!=true}[%f_pas_OpenType(%S)\n]\
	%f_docs(%S)\
	#P%SN = ^T%SN;
	#T%SN = %f_type(%G);]

%f _interface_typedef_dump
	[%f_pas_OpenType(%S)\n]\
	%f_docs(%S)\
	#%f_type(%S) = %f_type(%G);
	#
	#
//#UC END# *470F152700FAfor470F144E000F*

// реализация абстрактного стереотипа Документация::MDAGenerator
// Генерация модели в MDKnow
+ wiki
//#UC START# *46E6D4BB0339for470F144E000F*
G %PU
//#UC END# *46E6D4BB0339for470F144E000F*


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

