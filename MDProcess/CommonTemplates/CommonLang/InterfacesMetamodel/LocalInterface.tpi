////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/CommonTemplates/CommonLang/InterfacesMetamodel/LocalInterface.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$Templates::CommonTemplates::CommonLang::InterfacesMetamodel::LocalInterface
//
// Локальный интерфейс
// ---
// определяет локальный интерфейс на уровне реализации, нужен для того что бы доопределить
// существующие конкретные интерфейсы, задав на них недостающие методы или фабрики, которые не
// будут видны клиенту библиотеки, но смогут использоваться внутри конкретного пакета реализации.
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

: LocalInterface::Class
? Локальный интерфейс 
? определяет локальный интерфейс на уровне реализации, нужен для того что бы доопределить существующие конкретные интерфейсы, задав на них недостающие методы или фабрики, которые не будут видны клиенту библиотеки, но смогут использоваться внутри конкретного пакета реализации.
= Interface::Class

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

%f _st_space_key
	MDP


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// перекрытие базового стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
%t _constraint
//#UC START# *4704C0E30186for47A2D6A00142*
c                                                                                                                                       {}
r {<{}{%f_is_interface(%R)=false}{%RC}>!=0}:                                                                                            {%SS может реализовывать только интерфейсы}
r {%Sa!=abstract&%f_has_factory_methods(%S)=false&<{}{%f_is_interface(%R)=true&%f_has_factory_methods(%R)=false}{%RC}>!=0}:             {%SS реализующий интерфейс без фабрик должен сам определять фабрики}
r {<{}{%LS!=Servant}{%LC}>!=0}:                                                                                                         {%SS могут реализовывать только серванты}
r {%f_number_cmp("<{}{}{%RC}>","1","\>")=1}:                                                                                            {%SS может реализовывать только один Интерфейс}
r {%f_is_one_root_int(%S)!=true}:                                                                                                       {%SS can't recursively realize different Interfaces}
r {%Sa=abstract&<{}{%SS=%GS&%Ga!=abstract}{%GC}>!=0}:                                                                                   {Абстрактный %SS не может наследоваться от не абстрактных %SS}
r {%Sa!=abstract&<{}{%lS=Servant&%la!=abstract}{%lC}>=0}:                                                                               {Неабстрактный %SS должен быть реализован хотя бы одним неабстрактным сервантом}
r {%Sa=abstract&[{<{}{%SS=%ZS&%Za!=abstract}{%ZC}>=0&<{}{%LS=Servant&%La=abstract}{%LC}>=0}{true}false]=false}:                         {Абстрактный %SS должен быть специализирован неабстрактным %SS или быть реализован абстрактным сервантом}
r {""=""}:                                                                                                                              {%S%t_common_interface_constraint()}

f _is_one_root_int
	%f_clear_list(ROOTS)\
	<%f_fill_roots(%r)>\
	%f_unique_list(ROOTS)\
	[{%f_number_cmp("%f_roots_count(%S)","1","\>")=1}{true}false]

f _roots_count
	%f_set_var(COUNT,"0")<{}{%f_is_empty(ROOTS)=false}{W}%f_pop_first_to_var(ROOTS,TEMP)[{"%{TEMP}U"!=""}%f_set_var(COUNT,"%f_evaluate(1+%{COUNT}N)")]>\
	%{COUNT}N

f _fill_roots
	[{<{}{%f_is_interface(%G)=true}{%GC}>=0&<{}{%f_is_interface(%R)=true}{%RC}>=0&%f_is_interface(%S)=true&%f_exists_in_list(ROOTS,S)=false}\
	%f_add_to_list(ROOTS,S)]

%f _use_bad_cast
	[{"<{}{}{%g}%g<{}{%f_is_factory(%C)=true&%f_is_it_cached(%C)=true}.>>"!=""|"<{}{}{%r}%r<{}{%f_is_factory(%C)=true&%f_is_it_cached(%C)=true}.>>"!=""}{false}true]
//#UC END# *4704C0E30186for47A2D6A00142*

// реализация абстрактного стереотипа C++ интерфейсы и реализация::MDAGenerator
// генератор inline файлов реализации C++ (.i.h)
+ i.h
//#UC START# *47022CCF00EAfor47A2D6A00142*
//#UC END# *47022CCF00EAfor47A2D6A00142*

// реализация абстрактного стереотипа CORBA IDL::MDAGenerator
// генератор idl спецификаций (.idl)
+ idl
//#UC START# *47022BBE0261for47A2D6A00142*
//#UC END# *47022BBE0261for47A2D6A00142*

// реализация абстрактного стереотипа CORBA IDL::MDAGenerator
// генератор idl спецификаций для AMI (.idl)
+ idl_ami
//#UC START# *47022C0F01E4for47A2D6A00142*
//#UC END# *47022C0F01E4for47A2D6A00142*

// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Генератор файлов форм (.dfm)
+ dfm
R  
//#UC START# *49F5795900ECfor47A2D6A00142*
//#UC END# *49F5795900ECfor47A2D6A00142*

// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Вторая интерфейсная секция стереотипа. Например реализация свойств класса.
+ intf2.pas
R  
//#UC START# *477398E501C0for47A2D6A00142*
//#UC END# *477398E501C0for47A2D6A00142*

// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Ресурсы (.rc)
+ rc.pas
R  
//#UC START# *55B8D28B0157for47A2D6A00142*
//#UC END# *55B8D28B0157for47A2D6A00142*

// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Скрипты в ресурсах (.rc.script)
+ rc.script.pas
R  
//#UC START# *55B8D2F80145for47A2D6A00142*
//#UC END# *55B8D2F80145for47A2D6A00142*

// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Компилятор ресурса (.res.cmd)
+ res.cmd.pas
R  
//#UC START# *55B8DD9C0301for47A2D6A00142*
//#UC END# *55B8DD9C0301for47A2D6A00142*


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

