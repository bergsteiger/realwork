////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/CommonTemplates/CommonLang/Library/LibExecutor.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$Templates::CommonTemplates::CommonLang::Library::LibExecutor
//
// Исполнитель
// ---
// Точка входа в программу (библиотеку). Может быть созданно несколько executor'ов - все будут
// запущенны асинхронно. Может иметь методы и атрибуты.
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

: LibExecutor::Class
? Исполнитель
? Точка входа в программу (библиотеку). Может быть созданно несколько executor'ов - все будут запущенны асинхронно. Может иметь методы и атрибуты.
< *::Class,*::Category

= WikiImplClass::Class
= C++ интерфейсы и реализация::MDAGenerator
= Java::MDAGenerator

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры стереотипа
Y code_lib_executer.gif
L code_lib_executer
D
/ - запрещена форвард-декларация
// Параметры визуализации
$ C 195,245,195
$ l 10,195,10
$ f 10,195,10
d 1
/ - может иметь унаследованную реализацию
W true
/ - может быть параметризован

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Пользовательские свойства

p type=server\stand alone|client|both ? тип executor'а определяет на какой стороне (для КС) будет выполнен
p need UC:b=false ? явно включает генерацию дополнительных секций Юзер-Кода

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

%f _st_space_key
	MDP

%f _wiki_up_print
	%S#[inherited][{"%S{type}"!="%S{!type}"}%f_up_prefix(%S) *type* = *%S{type}* - тип executor'а определяет на какой стороне (для КС) будет выполнен
	][{"%S{need UC}"!="%S{!need UC}"}%f_up_prefix(%S) *need UC* = *%S{need UC}* - явно включает генерацию дополнительных секций Юзер-Кода
	]

// Метод необходим для поддержки генерации через обую функцию, возвращает
// true
%f _additional_condition
//#UC START# *49B8FB7C00FCfor470483F102AF*
	true
//#UC END# *49B8FB7C00FCfor470483F102AF*

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа C++ интерфейсы и реализация::MDAGenerator
// генератор файлов реализации C++ (.cpp)
+ cpp
//#UC START# *47022CB8034Bfor470483F102AF*
O %SN.cpp
P
	%f_output_constraint(%S)\
	%f_header(%S)
	%f_set_var(SELF,S)%f_set_var(SERV,S)
	%f_std_inc(%S)
	\#include "ace/Signal.h"
	\#include %f_dump_include_path(%f_with_gen_id(h,%SL),%S)
	<{}{}{%W}[\#include %f_dump_include_path(%f_with_gen_id(h,%WL),%W)
	]><{}{}{%W}[\#include %f_dump_include_path(%f_with_gen_id(fctr.h,%WL),%W)
	]>[// by \<\<uses\>\> dependencies
	<{}{"%AS"="uses"&"%AC"="Dependency"&"[{%A%PU=%SU|"%A%Po"=""}true]"="true"}[\#include %f_dump_include_path(%f_with_gen_id(fctr.h,%A%TW),%A%T)
	][\#include %f_dump_include_path(%f_with_gen_id(h,%A%TW),%A%T)
	]>]
	[{%S{need UC}=true}%U[{_CUSTOM_INCLUDES}
	]
	][
	%S%f_open_ifdef()]%SP[{%S{need UC}=true}
	%U[{_CUSTOM_BODY}
	]
	][
	//////////////////////////////////////////////////////////////////////////////////////////
	// nested implementation<{}{"%CC"="Class"}[
	%CX
	]>][
	//////////////////////////////////////////////////////////////////////////////////////////
	// static member methods
	<{}{"%CS"="static"}
	%CX
	>
	]
	//////////////////////////////////////////////////////////////////////////////////////////
	// main execute method
	
	void %SN::execute_ () {
		try {
			
			ACE_Sig_Action ((ACE_SignalHandler)%SN::handle_control, SIGTERM);
			ACE_Sig_Action ((ACE_SignalHandler)%SN::handle_control, SIGINT);
			ACE_Sig_Action ((ACE_SignalHandler)%SN::handle_control, SIGQUIT);
		
			%U[
			LOG_D (("Hello world, this is %SN!"));
			]	
			ExecutorBase::execute_ ();
			return;
		} CATCH_AND_LOG ("in execute")
		
		this-\>set_current_status(Core::Root::ES_ERROR);
	}
	
	void %SN::finalize () {
		%U[{_FINI}
		]
	}
	[
	//////////////////////////////////////////////////////////////////////////////////////////
	// self implementation<{}{"%CC"="Operation"&"%Ca"!="true"&"%CS"!="static"&"%CS"!="ctor"|"%CC"="Attribute"&"%CS"="cached"}{Sn}
	
	%CX>]
	void %SN::handle_control (int sig) {
		%U[{_HANDLE_CONTROl}
		//TODO: write your code for handle Ctrl-C
/		%SN::get ().set_current_status (Core::Root::ES_EXIT_REQUESTED);
		]
	}
	%f_dump_cpp_derrived_impl_cpp(%S)
	%Sp
	%f_footer(%S)
//#UC END# *47022CB8034Bfor470483F102AF*

// реализация абстрактного стереотипа C++ интерфейсы и реализация::MDAGenerator
// генератор заголовочных файлов C++ (.h)
+ h
//#UC START# *47022C88029Ffor470483F102AF*
O %SN.h
	%f_output_constraint(%S)\
	%f_h_header(%S)
	%f_std_inc(%S)
	\#include [{%PS!=ServerLibrary}{"shared/CoreSrv/impl/Root_i/CorbaExecutorBase.h"}"shared/Core/impl/Root_i/ExecutorBase.h"]
	%f_set_var(SELF,S)%f_set_var(SERV,S)[%f_includes_by_contents(%S)
	]<\#include %f_dump_include_path(%wL,%w)
	>[{%S{need UC}=true}
	%U[{_CUSTOM_INCLUDES}
	]
	][
	%S%f_open_ifdef()]%SP
	%f_docs(%S)
	class %SN :[{}{ virtual public [{%PS!=ServerLibrary}{CoreSrv::Root_i::Corba}Core::Root_i::]ExecutorBase }
		<{\n	, }virtual public %f_type(%R)>[{"%Rx"="true"}\n\t, ]<{\n	, }virtual public %f_type(%G)>
	]{
		SET_OBJECT_COUNTER (%SN)		
	[
	//////////////////////////////////////////////////////////////////////////////////////////
	// nested declarations
	protected:
	<{}{"%CC"="Class"}
	%CX
	>][
	//////////////////////////////////////////////////////////////////////////////////////////
	// static member methods
	private:
		REFCOUNT_SINGLETON(%SN)
	
	public:
		static %SN& get () {
			return Singleton::instance();
		}		
	
	[protected:<{}{"%CS"="static"&"%CV"!="PrivateAccess"}{Sn}
	%CX
	>
	][private:<{}{"%CS"="static"&"%CV"="PrivateAccess"}{Sn}
	%CX
	>
	]]
	private:
		static void handle_control (int sig);
		
		void execute_ ();	
		
		void finalize ();
	[
	//////////////////////////////////////////////////////////////////////////////////////////
	// self methods
	[protected:
	<{}{"%CC"="Operation"&"%CS"!="static"&"%CS"!="ctor"&"%CV"!="PrivateAccess"}{Sn}
	%CX
	>
	][private:
	<{}{"%CC"="Operation"&"%CS"!="static"&"%CS"!="ctor"&"%CV"="PrivateAccess"}{Sn}
	%CX
	>
	]][//////////////////////////////////////////////////////////////////////////////////////////
	// self data
	private:<{}{"%CC"="Attribute"}{Sn}
	%CX
	>][%f_dump_cpp_derrived_impl_h(%S)
	]
	[{%S{need UC}=true}%U[
	]
	]}; // class %SN
	
	%Sp
	%f_h_footer(%S)
//#UC END# *47022C88029Ffor470483F102AF*

// реализация абстрактного стереотипа Java::MDAGenerator
// генератор классов, интерфейсов на java (.java)
+ java
//#UC START# *470321950119for470483F102AF*
O %SN.java
P
	%f_output_constraint(%S)\
	%f_header(%S)
	%f_set_var(SELF,S)%f_set_var(SERV,S)
	package %f_dump_java_package(%S);
	
	%f_dump_std_java_imports(%S)
	
	[{%S{need UC}=true}%U[{_CUSTOM_INCLUDES}
	]
	]public class %SN
		extends [{%PS!=ServerLibrary}{ru.garant.shared.CoreSrv.Root_i.Corba}ru.garant.shared.Core.Root_i].ExecutorBase]
	[	implements <{\n	, }%f_type(%R)>
	]{
	[
	//////////////////////////////////////////////////////////////////////////////////////////
	// nested declarations
	<{}{"%CC"="Class"}
	%CX
	>][
	//////////////////////////////////////////////////////////////////////////////////////////
	// static member methods
		static class Singleton {
			private static %SN INSTANCE = null;
	
			public static %SN instance () {
				if (INSTANCE == null) {
					INSTANCE = new %SN ();
				}
				return INSTANCE;
			}
		}
	
		static ru.garant.shared.Core.Root.Executor get () {
			return Singleton.instance();
		}
	
	[<{}{"%CS"="static"}
	%CX
	>
	]]
		protected void executeImpl () {
			try {
				%U[
				System.out.println ("Hello world, this is %SN!");
				]
				super.executeImpl ();
			} catch (java.lang.Throwable ex) {
				this.setCurrentStatus (ru.garant.shared.Core.Root.ExecutorStatus.ES_ERROR);
				Logs.LOG_SEX(ex);
			}
		}
	
		protected void finalize () {
			%U[{_FINI}
			]
		}
	[
	//////////////////////////////////////////////////////////////////////////////////////////
	// self methods
	[<{}{"%CC"="Operation"&"%CS"!="static"&"%CS"!="ctor"}
	%CX
	>
	]][//////////////////////////////////////////////////////////////////////////////////////////
	// self data
	<{}{"%CC"="Attribute"}
	%CX
	>][%f_dump_java_derrived_impl(%S)
	]
	[{%S{need UC}=true}%U[
	]
	]}; // class %SN
	%f_footer(%S)
//#UC END# *470321950119for470483F102AF*

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Вложенные стереотипы

: LibExecutor::Class::Attribute
? атрибут
= ClassBase::Class::Attribute

// Функции стереотипа
%f _st_space_key
	MDP


: LibExecutor::Class::Operation
? метод
= ClassBase::Class::Operation

// Функции стереотипа
%f _st_space_key
	MDP


// Вложенные стереотипы
: LibExecutor::Class::Operation::Parameter
? Параметр операции
= ClassBase::Class::Operation::Parameter

// Параметры стереотипа
Y code_param.gif
L code_param

// Генераторы
// Генерация модели в MDKnow
+ wiki
//#UC START# *46E6D4BB0339for4716DDBB03D8*
= ClassBase::Class::Operation::Parameter;wiki
//#UC END# *46E6D4BB0339for4716DDBB03D8*

// Родные Delphi интерфейсы (.pas)
+ intf.pas
R  
//#UC START# *470F1571031Cfor4716DDBB03D8*
//#UC END# *470F1571031Cfor4716DDBB03D8*

// Реализация на Delphi(.pas)
+ impl.pas
R  
//#UC START# *470F15B800CBfor4716DDBB03D8*
//#UC END# *470F15B800CBfor4716DDBB03D8*

// Функции стереотипа
%f _st_space_key
	MDP


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
%t _constraint
//#UC START# *4704C0E30186for4716DDBB03D8*
c          {}
r {""=""}: {}
//#UC END# *4704C0E30186for4716DDBB03D8*

// реализация абстрактного стереотипа Документация::MDAGenerator
// выводит описание элемента (операция, атрибут) в wiki
%f _wiki_child_kind
//#UC START# *4705CBD6003Efor4716DDBB03D8*
//#UC END# *4705CBD6003Efor4716DDBB03D8*

// реализация абстрактного стереотипа Документация::MDAGenerator
// вывод описание авто-генерируемых методов в wiki
%f _wiki_up_add_gen
//#UC START# *470484D50138for4716DDBB03D8*
//#UC END# *470484D50138for4716DDBB03D8*


: LibExecutor::Class::uses::ClassDependency
? Использование
= UsesContainer::Class::uses::ClassDependency

// Функции стереотипа
%f _st_space_key
	MDP



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

