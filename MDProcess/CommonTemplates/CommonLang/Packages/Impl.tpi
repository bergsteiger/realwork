////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/CommonTemplates/CommonLang/Packages/Impl.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDACategory::Class>> MDProcess$Templates::CommonTemplates::CommonLang::Packages::Impl
//
// Пакет реализации
// ---
// Содержит реализацию интерфесных пакетов. Может зависить от других пакетов реализации своей
// компоненты. Данный пакет предназначен в основном для размещения сервантов, реализующих
// интерфейсы и вспомогательных элементов, также используемых для реализации интерфейсов.
// Определяет неймспейс.
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

: Impl::Category
? Пакет реализации
? Содержит реализацию интерфесных пакетов. Может зависить от других пакетов реализации своей компоненты. Данный пакет предназначен в основном для размещения сервантов, реализующих интерфейсы и вспомогательных элементов, также используемых для реализации интерфейсов. Определяет неймспейс.
> CustomFactory::Class
> Servant::Class
> ComServant::Class
> LocalInterface::Class

= AbstractImplBase::Category
= CORBA IDL::MDAGenerator
= C++ Фабрики::MDAGenerator

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры стереотипа
Y code_impl.gif
L code_impl
D
/ - запрещена форвард-декларация
// Параметры визуализации
$ C 195,245,195
$ l 10,195,10
$ f 10,195,10

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Пользовательские свойства

p is namespace:b=true ? определяет является ли пакет реализации неймспейсом
p need UC:b=false ? явно включает генерацию дополнительных секций Юзер-Кода

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

%f _st_space_key
	MDP

%f _wiki_up_print
	%S%[AbstractImplBase::Category]f_wiki_up_print()[{"%S{is namespace}"!="%S{!is namespace}"}%f_up_prefix(%S) *is namespace* = *%S{is namespace}* - определяет является ли пакет реализации неймспейсом
	][{"%S{need UC}"!="%S{!need UC}"}%f_up_prefix(%S) *need UC* = *%S{need UC}* - явно включает генерацию дополнительных секций Юзер-Кода
	]

// нужно ли генерить idl
%f _need_idl
//#UC START# *47049344007Dfor4704917C01F4*
	[{<{}{%f_servant_or_simpleclass(%C)=true&%f_realize_more_than_one_facet(%C)=true}{C}>!=0}{false}true]
//#UC END# *47049344007Dfor4704917C01F4*

// геенрация idl-модуля
%f _idl_subsystem
//#UC START# *4716EBD9030Dfor4704917C01F4*
	[{"%XU"="idl"}
	
	\#ifndef __<{_}{"%PM"="Interfaces::Category"}%f_to_upper(%PN)>_%f_to_upper(%SN)_IDL__
	\#define __<{_}{"%PM"="Interfaces::Category"}%f_to_upper(%PN)>_%f_to_upper(%SN)_IDL__
	[%f_idl_pre_include(%S)
	
	][{%SN!=RootSrv}\#include "shared/CoreSrv/RootSrv/RootSrv.idl"
	][{"%f_need_ami(%S)"="true"}{<\n\#include %f_dump_include_path(%IL,%I)>}\#include %f_dump_include_path(%f_with_gen_id(idl_ami,%SL),%S)
	]
	[\#pragma prefix "%f_idl_prefix(%S)"
	
	]%SP[{%S{is namespace}=true}
	#module %SN {]<{\n}{%C<{}{%RS=ServerFacet|%RS=ServerInterface}{C}>!=0&%C<{}{%RS=ServerFacet|%RS=ServerInterface}{C}>!=1}{%C}[
	[{"%f_print_in_ami_file(%C)"="false"}{\n#\t%CF // AMI forwarded}%CX]]>
	[{%S{is namespace}=true}#};
	]%Sp
	][{"%XU"="idl_ami"}
	
	\#ifndef __AMI_<{_}{"%PM"="Interfaces::Category"}%f_to_upper(%PN)>_%f_to_upper(%SN)_IDL__
	\#define __AMI_<{_}{"%PM"="Interfaces::Category"}%f_to_upper(%PN)>_%f_to_upper(%SN)_IDL__
	
	[%f_idl_pre_include(%S)
	]
	[<\n\#include %f_dump_include_path(%f_with_gen_id(idl,%IL),%I)>
	]
	[\#pragma prefix "%f_idl_prefix(%S)"
	
	]%SP[{%S{is namespace}=true}
	#module %SN {]<{\n}{"%f_print_in_ami_file(%C)"="true"&%C<{}{%RS=ServerFacet|%RS=ServerInterface}{C}>!=0&%C<{}{%RS=ServerFacet|%RS=ServerInterface}{C}>!=1}
	%C<{}{%f_use_ami(%n)=false&%f_kind_of(n,ServerFacet::Class)=true}[%f_with_gen_id(idl,#%nF)
	]>%f_with_gen_id(idl,%CX)>
	[{%S{is namespace}=true}#};
	]%Sp
	]
	
	\#endif
//#UC END# *4716EBD9030Dfor4704917C01F4*

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// перекрытие базового стереотипа WikiPackageImpl::Category
// Определяет, что пакет должен генериться в документации в секцию "Пакеты реализации и
// вспомогательные пакеты"
%f _wiki_impl_or_support_package
//#UC START# *485784EC028Cfor4704917C01F4*
	true
//#UC END# *485784EC028Cfor4704917C01F4*

// реализация абстрактного стереотипа C++ Фабрики::MDAGenerator
// генератор файлов реализации для фабрик интерфейсов (.cpp)
+ fctr.cpp
//#UC START# *4705C54B01F4for4704917C01F4*
C /impl/%SN
O [{<{}{%CS=LocalInterface&%f_has_factory_methods(%C)=true}{%CC}>!=0}%SNFactories.cpp]
P
S [{"%S{is namespace}"="true"}namespace %SN {\n]
s [{"%S{is namespace}"="true"}} // namespace %SN\n]
	%f_output_constraint(%S)\
	[{<{}{%CS=LocalInterface&%f_has_factory_methods(%C)=true}{%CC}>!=0|<{}{%AS=FactoryMemory}{%AC}>!=0}{<%CX>}[{"%f_need_factory_files(%S)"="true"}\
	%f_header(%S)
	%f_std_inc(%S)
	\#include %f_dump_include_path(%f_with_gen_id(fctr.h,%SL),%S)
	[{%f_need_lexical_cast_pack(%S)=true}\#include "boost/lexical_cast.hpp"
	][
	//includes by FactoryMemories \<\<uses\>\>
	<{}{%AS=FactoryMemory&%A<{}{%CS=common key}{%CC}>!=0}%A<{}{%CS=uses&%CC=Dependency}\#include %f_dump_include_path(%f_with_gen_id(h,%C%TW),%C%T)
	>>][
	%S%f_open_ifdef()]
	%SP[{"%S{is namespace}"="true"}namespace %SN {
	]<%CX>[{"%S{is namespace}"="true"}} // namespace %SN
	]%Sp
	%f_footer(%S)
	]]
//#UC END# *4705C54B01F4for4704917C01F4*

// реализация абстрактного стереотипа C++ Фабрики::MDAGenerator
// генератор заголовочных файлов для фабрик интерфейсов (.h)
+ fctr.h
//#UC START# *4705C5490109for4704917C01F4*
C /impl/%SN
O [{<{}{%CS=LocalInterface&%f_has_factory_methods(%C)=true}{%CC}>!=0|<{}{%AS=FactoryMemory}{%AC}>!=0}%SNFactories.h]
P
S [{"%S{is namespace}"="true"}namespace %SN {\n]
s [{"%S{is namespace}"="true"}} // namespace %SN\n]
	%f_output_constraint(%S)\
	[{<{}{%CS=LocalInterface&%f_has_factory_methods(%C)=true}{%CC}>!=0|<{}{%AS=FactoryMemory}{%AC}>!=0}{<%CX>}[{"%f_need_factory_files(%S)"="true"|<{}{%AS=FactoryMemory}{%AC}>!=0}\
	%f_h_header(%S)
	%f_std_inc(%S)
	\#include \<map\>
	\#include \<string\>
	\#include "ace/Singleton.h"[
	\#include %f_dump_include_path(%f_with_gen_id(h,%SL),%S)][<{}{%f_set_var(DEP,D)"%S<{}{%CS=LocalInterface}%C<{}{%R%PU=%{DEP}U}.>>"!=""}[
	\#include %f_dump_include_path(%DL,%D)]>][
	%S%f_open_ifdef()]
	
	%SP[{"%S{is namespace}"="true"}namespace %SN {
	]<[%CX
	
	]>[{"%S{is namespace}"="true"}} // namespace %SN
	]%Sp
	%f_h_footer(%S)
	]]
//#UC END# *4705C5490109for4704917C01F4*

// реализация абстрактного стереотипа C++ интерфейсы и реализация::MDAGenerator
// генератор inline файлов реализации C++ (.i.h)
+ i.h
//#UC START# *47022CCF00EAfor4704917C01F4*
C /impl/%SN
S [{"%S{is namespace}"="true"}namespace %SN {\n]
s [{"%S{is namespace}"="true"}} // namespace %SN\n]
P
O [{%f_need_inline_file(%S)=true}%SN.i.h]
	%f_output_constraint(%S)\
	[{%f_need_inline_file(%S)=true}{<%CX>}\
	%f_header(%S)
	%f_set_var(SELF,S)<{}{%CM=UtilityPack::Class::uses::ClassDependency}{}[\#include %f_dump_include_path(%f_with_gen_id(h,%C%TL),%C%T)
	]>[<{}{"%f_with_gen_id(h,%CO)"=""}
	%C<{}{"%CS"="uses"&"%CC"="Dependency"}[\#include %f_dump_include_path(%f_with_gen_id(h,%C%TW),%C%T)
	]>>][{%S{need UC}=true}%U[{_CUSTOM_INCLUDES}
	]
	][
	%S%f_open_ifdef()]
	%SP[{"%S{is namespace}"="true"}namespace %SN {
	][{%S{need UC}=true}
	%U[
	]
	]<%CX>
	[{"%S{is namespace}"="true"}
	} // namespace %SN]
	%Sp
	%f_footer(%S)
	]
//#UC END# *47022CCF00EAfor4704917C01F4*

// реализация абстрактного стереотипа CORBA IDL::MDAGenerator
// генератор idl спецификаций (.idl)
+ idl
//#UC START# *47022BBE0261for4704917C01F4*
C /impl/%SN
O [{%S%f_need_idl()=true}%SN.idl]
S [{"%S{is namespace}"="true"}#module %SN {]
s [{"%S{is namespace}"="true"}#};]
	%f_output_constraint(%S)\
	[{%S%f_need_idl()=true}\
	%f_header(%S)
	%S%f_idl_subsystem(%S)
	%f_footer(%S)
	]
//#UC END# *47022BBE0261for4704917C01F4*

// реализация абстрактного стереотипа CORBA IDL::MDAGenerator
// генератор idl спецификаций для AMI (.idl)
+ idl_ami
//#UC START# *47022C0F01E4for4704917C01F4*
S [{"%S{is namespace}"="true"}#module %SN {]
s [{"%S{is namespace}"="true"}#};]
C /%SN
O [{"%f_need_ami(%S)"="true"&%S%f_need_idl()=true}%SN_ami.idl]
	%f_output_constraint(%S)\
	[{"%f_need_ami(%S)"="true"&%S%f_need_idl()=true}
	%f_header(%S)
	%S%f_idl_subsystem(%S)
	%f_footer(%S)
	]
	
//#UC END# *47022C0F01E4for4704917C01F4*

// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Реализация на Delphi(.pas)
+ impl.pas
R  
//#UC START# *470F15B800CBfor4704917C01F4*
//#UC END# *470F15B800CBfor4704917C01F4*

// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Родные Delphi интерфейсы (.pas)
+ intf.pas
R  
//#UC START# *470F1571031Cfor4704917C01F4*
C %S%f_pas_UnitPath()
R  
	<{}{%C#f_UseNewGenRec()!=true}%CX>
//#UC END# *470F1571031Cfor4704917C01F4*

// реализация абстрактного стереотипа Java::MDAGenerator
// генератор реализации фабрик интерфейсов на java (.java)
+ fctr.java
//#UC START# *470321C1038Afor4704917C01F4*
C [{%S{is namespace}=true}/%SN]
/C /%SN
P
	<%CX>
//#UC END# *470321C1038Afor4704917C01F4*

// реализация абстрактного стереотипа Java::MDAGenerator
// генератор классов, интерфейсов на java (.java)
+ java
//#UC START# *470321950119for4704917C01F4*
= fctr.java
//#UC END# *470321950119for4704917C01F4*


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

