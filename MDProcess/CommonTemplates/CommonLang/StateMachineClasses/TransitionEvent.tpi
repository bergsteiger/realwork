////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/CommonTemplates/CommonLang/StateMachineClasses/TransitionEvent.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$Templates::CommonTemplates::CommonLang::StateMachineClasses::TransitionEvent
//
// Событие
// ---
// Соответствует элементу-событию, определенному на диаграмме состояний, соответствие определяется
// по совпадению имен. Абстрактное событие может не соответствовать событию на диаграмме состояний
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

: TransitionEvent::Class
? Событие
? Соответствует элементу-событию, определенному на диаграмме состояний, соответствие определяется по совпадению имен. Абстрактное событие может не соответствовать событию на диаграмме состояний
= SimpleClass::Class

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры стереотипа
Y code_sm_event.gif
L code_sm_event
// Параметры визуализации
$ C 221,253,221
$ l 56,222,65
$ f 56,222,65

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Пользовательские свойства

p is base:b=false ? Определяет, что данный элемент будет базовым для всех элементов - событий в конкретной машине состояний

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

%f _st_space_key
	MDP

%f _wiki_up_print
	%S#[inherited][{"%S{is base}"!="%S{!is base}"}%f_up_prefix(%S) *is base* = *%S{is base}* - Определяет, что данный элемент будет базовым для всех элементов - событий в конкретной машине состояний
	]


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// перекрытие базового стереотипа AbstractClass::Class
// генерация списка базовых классов и реализуемых интерфейсов
%f _java_base_class_decl
//#UC START# *47173062030Dfor470F3D32029F*
/	%P%f_find_specific_base_event()\
	%f_find_specific_base_event(%P,%S,"BASE_EVENT")\
	[{%X{lid}=java}{[{%X{lid}=cpp} : [{"%{BASE_EVENT}U"!=""&%{BASE_EVENT}U!=%SU}{FSM::BaseEvent}%f_type(%{BASE_EVENT})]]}\
	[{}{[{"%{BASE_EVENT}U"!=""&%{BASE_EVENT}U!=%SU}{ implements ru.garant.shared.FSM.BaseEvent} extends %f_type(%{BASE_EVENT})]}%f_java_base(%S)]]
//#UC END# *47173062030Dfor470F3D32029F*

// перекрытие базового стереотипа AbstractClass::Class
// генерация специфичсекого содержимого
%f _servant_content_java
//#UC START# *47173078008Cfor470F3D32029F*
	[{%Sa!=abstract}\n\
	#	public %SN () {
	#		%U[{_CTOR_%f_to_upper(%SN)}
	#		]
	#	}
	][{"%{BASE_EVENT}U"=""|%f_is_base_event(%{BASE_EVENT})=true&%S{is base}=false}
	#	public int getUid () {
	#		return %SN.class.hashCode();
	#	}
	]
//#UC END# *47173078008Cfor470F3D32029F*

// перекрытие базового стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
%t _constraint
//#UC START# *4704C0E30186for470F3D32029F*
c            {}
r {""=""}:   {}
//#UC END# *4704C0E30186for470F3D32029F*

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Исключенные вложенные стереотипы
~ TransitionEvent::Class::impurity value::Attribute
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

