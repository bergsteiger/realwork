////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/CommonTemplates/CommonLang/Target/ComTarget.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDACategory::Class>> MDProcess$Templates::CommonTemplates::CommonLang::Target::ComTarget
//
// COM DLL
// ---
// Длл для интеграции с внешним COM-приложением
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

: ComTarget::Category
? COM DLL
? Длл для интеграции с внешним COM-приложением
= AbstractTarget::Category
= COM::MDAGenerator
= C++ Фабрики::MDAGenerator

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры стереотипа
Y code_com_target.gif
L code_com_target
D
/ - запрещена форвард-декларация
// Параметры визуализации
$ C 195,245,195
$ l 80,245,80
$ f 80,245,90

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Пользовательские свойства

p need UC:b=false ? явно включает генерацию дополнительных секций Юзер-Кода

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

%f _st_space_key
	MDP

%f _wiki_up_print
	%S%[AbstractTarget::Category]f_wiki_up_print()[{"%S{need UC}"!="%S{!need UC}"}%f_up_prefix(%S) *need UC* = *%S{need UC}* - явно включает генерацию дополнительных секций Юзер-Кода
	][{"%S{ifdef}"!="%S{!ifdef}"}%f_up_prefix(%S) *ifdef* = *%S{ifdef}* - Oпределяет условный признак компиляции, который должен быть определён. Для указания нескольких флагов условной компиляций нужно указать их через запятую.
	][{"%S{ifndef}"!="%S{!ifndef}"}%f_up_prefix(%S) *ifndef* = *%S{ifndef}* - Oпределяет условный признак компиляции, который не должен быть определён. Для указания нескольких флагов условной компиляций нужно указать их через запятую.
	]


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
%t _constraint
//#UC START# *4704C0E30186for47046A7002FD*
c                                          {}
r {<{}{%aS!=InstallerTarget}{CSp}>!=0}:    {%SS can't be used as target of dependence}
r {"%f_com_constraint(%S)"="false"}:       {%SS can't depend on packages wich contains more than 1 ComInterfaces::Category together.}
r {"%f_check_duplicate_params(%S,"LIB")"!=""}:     {Duplicate Attribute in diffrent Setting container:%f_check_duplicate_params(%S,"LIB")}
r {"%f_check_duplicate_params(%S,"TARGET")"!=""}:     {Duplicate Attribute in diffrent Setting container in one Target:%f_check_duplicate_params(%S,"TARGET")}
r {"%f_check_non_overload_member(%S)"!=""}:           {Non overided members found:%f_check_non_overload_member(%S)}
//#UC END# *4704C0E30186for47046A7002FD*

// реализация абстрактного стереотипа C++ Фабрики::MDAGenerator
// генератор файлов реализации для фабрик интерфейсов (.cpp)
+ fctr.cpp
//#UC START# *4705C54B01F4for47046A7002FD*
P
S [{"%S{is namespace}"="true"}namespace %SN {\n]
s [{"%S{is namespace}"="true"}} // namespace %SN\n]
C /%SN
	<%CX>
//#UC END# *4705C54B01F4for47046A7002FD*

// реализация абстрактного стереотипа C++ Фабрики::MDAGenerator
// генератор заголовочных файлов для фабрик интерфейсов (.h)
+ fctr.h
//#UC START# *4705C5490109for47046A7002FD*
= fctr.cpp
//#UC END# *4705C5490109for47046A7002FD*

// реализация абстрактного стереотипа C++ интерфейсы и реализация::MDAGenerator
// генератор файлов реализации C++ (.cpp)
+ cpp
//#UC START# *47022CB8034Bfor47046A7002FD*
P
S [{"%S{is namespace}"="true"}namespace %SN {\n]
s [{"%S{is namespace}"="true"}} // namespace %SN\n]
C /%SN
O %SN.cpp
	%f_output_constraint(%S)\
	%f_header(%S)
	\#include "shared/Core/sys/start_stop.h"
	\#include "shared/Core/fix/win_afx.h"
	\#include "shared/Core/GDS/MemoryWatcher.h"
	\#include "shared/Core/GDS/ObjectWatcher.h"
	[{"%f_use_mem_pool(%S)"="true"}\#include "shared/Core/mng/PoolMemoryManager.h"
	][{"%f_use_obj_pool(%S)"="true"}\#include "shared/Core/mng/PoolObjectManager.h"
	]\#include [{%f_use_server(%S)=true}{"shared/Core/impl/Root_i/StdLibHomeManager_factory.h"}"shared/CoreSrv/impl/Root_i/CorbaLibHomeManager_factory.h"]
	\#include "shared/Core/impl/ParamsImpl/ParamManagerImpl_factory.h"
	[%f_inc_all_dep(%S)
	][{%f_use_event_service(%S)}\#include "orbsvcs/orbsvcs/Event/EC_Default_Factory.h"
	\#include "orbsvcs/Event/EC_Dispatching_Task.h"
	
	\#if !defined (ACE_WIN32) || (defined (ACE_WIN32) && defined (ACE_AS_STATIC_LIBS))
	ACE_STATIC_SVC_REQUIRE (TAO_EC_Default_Factory);
	ACE_STATIC_SVC_REQUIRE (TAO_EC_Simple_Queue_Full_Action);
	\#endif
	]
	/////////////////////ComServant includes//////////////////////
	<%d<{}{%AM=ComServant::Class}\#include %f_dump_include_path(%f_with_gen_id(h,%AL),%A)
	>>

	%U[{_CUSTOM_INC}
	][
	%S%f_open_ifdef()]
	
	ATL::CComModule _Module;
	
	BEGIN_OBJECT_MAP(ObjectMap)
	
		<%d<{}{%AM=ComServant::Class}OBJECT_ENTRY(CLSID_Co%A%RN, %A<%NN::>%AN)
		>>
	END_OBJECT_MAP()
	
	class %SNApp: public CWinApp {
	public:
		virtual BOOL InitInstance();
		
		virtual int ExitInstance();
		
		DECLARE_MESSAGE_MAP()
	};
	
	BEGIN_MESSAGE_MAP(%SNApp, CWinApp)
	END_MESSAGE_MAP()
	
	%SNApp theApp;
	
	class ComThreadInit: public virtual Core::Root::ThreadInitializer, public virtual Core::RefCountObjectBase {
		// Вызывается при создании потока
		void thread_init () {
			::CoInitialize (0);
		}
	
		// вызывается при завершении потока
		void thread_finalize () {
			::CoUninitialize ();
		}
	};
	
	Core::Mutex COMDllInintializator::s_init_mutex;
	unsigned long COMDllInintializator::s_count = 0;
	
	void COMDllInintializator::init () {
		GUARD (s_init_mutex);
		if (s_count++ != 0) {
			return;
		}
		
		Core::Root::LibHomeManager& lhm = Core::Root::LibHomeManagerFactory::get();
		Core::Var\<ComThreadInit\> cti = new ComThreadInit ();
		lhm.registrate_thread_initializer (cti.in());
	
	[	{
	%f_reg_all_dep(%S)	}
	
	]	try {
			lhm.execute ();
		} catch (Core::Root::HomeManagerInitError&) {
			LOG_W (("Server uninitialized - working in standalone mode"));
		} CATCH_LOG_AND_DO ("while HomeManager processed", return;)
	}
		
	void COMDllInintializator::done () {
		GUARD (s_init_mutex);
		if (--s_count != 0) {
			return;
		}
		Core::Root::LibHomeManager& lhm = Core::Root::LibHomeManagerFactory::get();
		lhm.finalize ();
	}
	
	BOOL %SNApp::InitInstance() {
		Core::init ();
		<{}{%de=false}%d<{}{%AM=ComInterfaces::Category}_Module.Init(ObjectMap, m_hInstance, &LIBID_%ANLib);
		>>
		{
			[{%f_use_server(%S)=true}{Core::Root_i::Std}CoreSrv::Root_i::Corba]LibHomeManager_factory_var f = new [{%f_use_server(%S)=true}{Core::Root_i::Std}CoreSrv::Root_i::Corba]LibHomeManager_factory ();
			f-\>registrate_me(0);
		}
		{
			Core::ParamsImpl::ParamManagerImpl_factory_var f = new Core::ParamsImpl::ParamManagerImpl_factory ();
			f-\>registrate_me(0);
		}
		try {
			Core::ParamManagerInitData init = {"%SN", "Core::RegistryHelper::KEY_LOCAL_MACHINE\\\\Software\\\\Garant\\\\%PN\\\\%SN"};
			Core::ParamManagerFactory::get ().init (Core::ParamConvert::make_arg_list (0, 0), init);
		} CATCH_AND_LOG ("while init ParamManager executed")
		return CWinApp::InitInstance();
	}
	
	int %SNApp::ExitInstance() {
		_Module.Term();
		Core::fini ();
		return CWinApp::ExitInstance();
	}
	
	// Used to determine whether the DLL can be unloaded by OLE
	STDAPI DllCanUnloadNow () {
	    AFX_MANAGE_STATE (AfxGetStaticModuleState ());
	    return (AfxDllCanUnloadNow () == S_OK && _Module.GetLockCount () == 0) ? S_OK : S_FALSE;
	}
	
	// Returns a class factory to create an object of the requested type
	STDAPI DllGetClassObject (REFCLSID rclsid, REFIID riid, LPVOID* ppv) {
	    AFX_MANAGE_STATE (AfxGetStaticModuleState ());
	    return _Module.GetClassObject (rclsid, riid, ppv);
	}
	
	// DllRegisterServer - Adds entries to the system registry
	STDAPI DllRegisterServer () {
	    AFX_MANAGE_STATE (AfxGetStaticModuleState ());
	    return _Module.RegisterServer (TRUE);
	}
	
	// DllUnregisterServer - Removes entries from the system registry
	STDAPI DllUnregisterServer () {
	    AFX_MANAGE_STATE (AfxGetStaticModuleState ());
	    return _Module.UnregisterServer (TRUE);
	}<{}{"%CM"!="Settings::Class"}{%C}%CX>
	%f_footer(%S)
//#UC END# *47022CB8034Bfor47046A7002FD*

// реализация абстрактного стереотипа C++ интерфейсы и реализация::MDAGenerator
// генератор заголовочных файлов C++ (.h)
+ h
//#UC START# *47022C88029Ffor47046A7002FD*
P
S [{"%S{is namespace}"="true"}namespace %SN {\n]
s [{"%S{is namespace}"="true"}} // namespace %SN\n]
C /%SN
O %SN.h
	%f_output_constraint(%S)\
	%f_h_header(%S)
	\#include "shared/Core/sys/std_inc.h"
	\#include "shared/Core/fix/win_afx.h"
	\#include "Resource.h"[
	%S%f_open_ifdef()]

	extern ATL::CComModule _Module;	
	
	static const char* DLL_VERSION = "%P{major version}.%P{minor version}.%P{fix version}";
	
	static const long DLL_BUILD_NUM = %PA;<%CX>
	
	class COMDllInintializator {
	public:
		static void init ();
		static void done ();
	
	private:
		static Core::Mutex s_init_mutex;
		static unsigned long s_count;
	};
	%f_h_footer(%S)
//#UC END# *47022C88029Ffor47046A7002FD*

// реализация абстрактного стереотипа C++ интерфейсы и реализация::MDAGenerator
// генератор inline файлов реализации C++ (.i.h)
+ i.h
//#UC START# *47022CCF00EAfor47046A7002FD*
= fctr.cpp
//#UC END# *47022CCF00EAfor47046A7002FD*

// реализация абстрактного стереотипа COM::MDAGenerator
// генерация файла экспорта определений для COM DLL (.def)
+ com.def
//#UC START# *470320C1030Dfor47046A7002FD*
P
O %SN.def
	%f_output_constraint(%S)\
	LIBRARY "%SN.dll"
	
	EXPORTS
		DllCanUnloadNow     PRIVATE
		DllGetClassObject   PRIVATE
		DllRegisterServer   PRIVATE
		DllUnregisterServer PRIVATE<%CX>
//#UC END# *470320C1030Dfor47046A7002FD*

// реализация абстрактного стереотипа COM::MDAGenerator
// генерация файла опрделений для регистрации COM DLL (.rgs)
+ com.rgs
//#UC START# *470320E002CEfor47046A7002FD*
P
C /%SN
	<%CX>

//#UC END# *470320E002CEfor47046A7002FD*

// реализация абстрактного стереотипа COM::MDAGenerator
// генератор ODL-файла спецификации COM-интерфейса (.odl)
+ odl
//#UC START# *47032097038Afor47046A7002FD*
= fctr.cpp
//#UC END# *47032097038Afor47046A7002FD*

// реализация абстрактного стереотипа Проектные файлы C++::MDAGenerator
// mpc/mwc файлы проектов (mpc/mwc)
+ mpc
//#UC START# *47031E41002Efor47046A7002FD*
P
O T_%SN.mpc
X X:/support/bin/mwc_comp.bat %Po
/X W:/shared/support/mpc/scripts/mpc_comp.bat %SR%Sd T_%SN dll
	%f_output_constraint(%S)\
	%f_header(%S)
	project (T_%SN) : project_generic_core[{%f_use_server(%S)=true}_corba], project_subsystem_windows[{%f_mpc_need_antrl_proj(%S)=true}, project_antlr] {
		sharedname = %SN
		
		includes += %f_root_relative_path(%S)
		
		after += Core
		libs  += Core
		[{%f_use_server(%S)=true}after += CoreSrv_cs
		libs  += CoreSrv_cs
		after += CoreSrv
		libs  += CoreSrv][
	
	%f_mpc_all_dep(%S)]
	
		%U[{_CUSTOM_DEPENDENSES}
		]
	
		Header_Files {
			Std_Headers {
				./../%SN/Resource.h
			[	%f_normolized_path(h,S)
			]<{}{"%CC"!="Category"}{Sn}[	%f_normolized_path(h,C)
			][	%f_normolized_path(fctr.h,C)
			]>}
		<{}{"%CC"="Category"}{Sn}
			%CN {
			[	%f_normolized_path(h,C)
			][	%f_normolized_path(fctr.h,C)
			]%C<{}{}{%ASn}[	%f_normolized_path(h,A)
			][	%f_normolized_path(fctr.h,A)
			]>[{%S{need UC}=true}%U[{_%CN_Manual_Headers}
			]
			]}
		>[{%S{need UC}=true}
			Rest_Headers {
			%U[{_Rest_Manual_Headers}
			]
			}]
		}			
	
		Source_Files {
			AAAFix {
				w:/shared/Core/fix/__ace_inc.cpp
			}
			
			Std_Sources {
			[	%f_normolized_path(cpp,S)
			]<{}{"%CC"!="Category"}{Sn}[	%f_normolized_path(cpp,C)
			][%f_normolized_path(fctr.cpp,C)
			]>}
		<{}{%CC=Category&%CS!=Requirements}{Sn}
			%CN {
			[	%f_normolized_path(cpp,C)
			][	%f_normolized_path(fctr.cpp,C)
			]%C<{}{}{%ASn}[	%f_normolized_path(cpp,A)
			][	%f_normolized_path(fctr.cpp,A)
			]>[{%S{need UC}=true}%U[{_%CN_Manual_Sources}
			]
			]}
		>			
		}
		
		Resource_Files {
			Std_Resources {
			[	%f_normolized_path(com.def,S)
			]}
			
			%f_normolized_path(vi.rc,S)
			%f_normolized_path(vi.rch,S)
			
			<{}{%dS!=Requirements}%d<{}{"%f_normolized_path(com.rgs,C)"!=""}{%CSn}[%CN {
			[	%f_normolized_path(com.rgs,C)
			]}
			
			]>>[{%f_contain_views(%S)=true}./../%SN/%SN.rc
			./../%SN/%SN.rc2
			]<{}{%dS!=Requirements}%d<{}{%AM=Resource::Class}
			[%f_normolized_path(rc,A)
			]>>%U[{CUSTOM_RESOURCE}
			]
		}
	}
	%f_footer(%S)
	]
//#UC END# *47031E41002Efor47046A7002FD*


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

