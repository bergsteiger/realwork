////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/CommonTemplates/Testing/Elements/ClassInner.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAGenerator::Class>> MDProcess$Templates::CommonTemplates::Testing::Elements::ClassInner
//
// Генератор внутренних элементов класса (методов или свойств)
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

: ClassInner::MDAGenerator*
? Генератор внутренних элементов класса (методов или свойств)
= Delphi интерфейсы и реализация::MDAGenerator

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

%f _st_space_key
	MDP

// Выводит регистрацию в TestComplete
%f _pas_RegisterInTC
//#UC START# *499AD180009Ffor499ACEDD01EF*
	[{%S%f_IsWriteOnlyProp()!=true}\
	tc%1NPublicInfo._RegisterMethod(%f_pas_TypeName(%P%G), tc%1NOpenAppClasses.mtGet, '%SN', TypeInfo(%f_pas_TypeName(%T)),\
	 \[<{, }TypeInfo(%f_pas_TypeName(%C%T))>\], \[<{, }'%CN'>\], %f_pas_FullMethodName(%S,%P,"","get")_Pub%1N);\
	]\
	[{%S%f_IsReadOnlyProp()!=true}\
	[{%S%f_IsWriteOnlyProp()!=true}\n ]\
	tc%1NPublicInfo._RegisterMethod(%f_pas_TypeName(%P%G), tc%1NOpenAppClasses.mtPut, '%SN', nil, \[\], \[\], %f_pas_FullMethodName(%S,%P,"","set")_Pub%1N);\
	]
//#UC END# *499AD180009Ffor499ACEDD01EF*

// Параметры вызова
%f _pas_CallParams
//#UC START# *499BD90A0000for499ACEDD01EF*
	%f_set_var(CHILDREN_COUNT,"<{}{}{C%C}>")\
	[{%{CHILDREN_COUNT}N!=0}\
	<{, }\
	%t_pas_FromVariant(%C%T)\
	(Args^\[%f_evaluate(%{CHILDREN_COUNT}N-%Cn)\])>]
//#UC END# *499BD90A0000for499ACEDD01EF*

// Генерируем "ворота" для вызова из TC
%f _pas_CallTCGates
// параметры: TCNum: long = %1
//#UC START# *499C111002ACfor499ACEDD01EF*
	[{%S%f_IsWriteOnlyProp()!=true}\
	%f_pas_OpenMethodImplementation(%S,%P,"","get")\
	procedure %f_pas_FullMethodName(%S,%P,"","get")_Pub%1N(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
	begin
	 Assert(Instance is %f_pas_TypeName(%P%G));
	 try
	  Value := %t_pas_ToVariant(%T,%1)(\
	%f_pas_FullMethodName(%S,%P,"","get")(%P%f_EffectiveType()(Instance)\
	[, %S%f_pas_CallParams()])\
	);
	 except
	  // - гасим исключения
	  Value := Unassigned;
	 end;//try..except
	end;]\
	[{%S%f_IsReadOnlyProp()!=true}\
	%f_pas_OpenMethodImplementation(%S,%P,"","set")\
	procedure %f_pas_FullMethodName(%S,%P,"","set")_Pub%1N(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
	begin
	 Assert(Instance is %f_pas_TypeName(%P%G));
	 try
	  %f_pas_FullMethodName(%S,%P,"","set")(%P%f_EffectiveType()(Instance), %t_pas_FromVariant(%T)(Args^\[0\]));
	 except
	  // - гасим исключения
	 end;//try..except
	end;]
//#UC END# *499C111002ACfor499ACEDD01EF*

// Генерируем "ворота" для вызова из TC
%f _pas_OutTCGates
//#UC START# *4BC43D89028Dfor499ACEDD01EF*
	%S%f_pas_CallTCGates("5")\
	%S%f_pas_CallTCGates("6")
//#UC END# *4BC43D89028Dfor499ACEDD01EF*

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
%t _constraint
//#UC START# *4704C0E30186for499ACEDD01EF*
c          {}
r {""=""}: {}
//#UC END# *4704C0E30186for499ACEDD01EF*

// реализация абстрактного стереотипа Документация::MDAGenerator
// выводит описание элемента (операция, атрибут) в wiki
%f _wiki_child_kind
//#UC START# *4705CBD6003Efor499ACEDD01EF*
//#UC END# *4705CBD6003Efor499ACEDD01EF*

// реализация абстрактного стереотипа Документация::MDAGenerator
// вывод описание авто-генерируемых методов в wiki
%f _wiki_up_add_gen
//#UC START# *470484D50138for499ACEDD01EF*
//#UC END# *470484D50138for499ACEDD01EF*

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Выводит реализацию тела метода
%f _pas_MethodBodyImplementation
//#UC START# *499A7D7E028Afor499ACEDD01EF*
	 with Self do
	 begin
	%S%[inherited]
	 end;//with Self
//#UC END# *499A7D7E028Afor499ACEDD01EF*

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Разделитель имени метода
%f _pas_MethodOwnerDelim
//#UC START# *4999789602FFfor499ACEDD01EF*
	_
//#UC END# *4999789602FFfor499ACEDD01EF*

// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Реализация на Delphi(.pas)
+ impl.pas
R  
//#UC START# *470F15B800CBfor499ACEDD01EF*
R  
	%S%f_pas_MethodImplementation()
//#UC END# *470F15B800CBfor499ACEDD01EF*

// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Родные Delphi интерфейсы (.pas)
+ intf.pas
R  
//#UC START# *470F1571031Cfor499ACEDD01EF*
//#UC END# *470F1571031Cfor499ACEDD01EF*

// реализация абстрактного стереотипа Документация::MDAGenerator
// Генерация модели в MDKnow
+ wiki
//#UC START# *46E6D4BB0339for499ACEDD01EF*
//#UC END# *46E6D4BB0339for499ACEDD01EF*

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Вторая интерфейсная секция стереотипа. Например реализация свойств класса.
+ intf2.pas
R  
//#UC START# *477398E501C0for499ACEDD01EF*
	%S%f_pas_RegisterInTC("5")
//#UC END# *477398E501C0for499ACEDD01EF*

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// 3-я секция интерфейса. Например поле для свойства.
+ intf3.pas
R  
//#UC START# *4774D2A20372for499ACEDD01EF*
	%S%f_pas_RegisterInTC("6")
//#UC END# *4774D2A20372for499ACEDD01EF*


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

