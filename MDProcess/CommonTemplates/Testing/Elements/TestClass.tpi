////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/CommonTemplates/Testing/Elements/TestClass.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$Templates::CommonTemplates::Testing::Elements::TestClass
//
// Тестовый класс
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

: TestClass::Class
? Тестовый класс
> SimpleClass::Class

= WikiImplClass::Class
= Delphi интерфейсы и реализация::MDAGenerator

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры стереотипа
v +-
/ - типы видимости
a f
/ - тип абстракции
Y code_test_class.gif
L code_test_class
// Параметры визуализации
$ C 238,255,191
$ l 9,138,80
$ f 9,138,80

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Пользовательские свойства

p is friend:b=false ? Определяет, что данный тестовый класс является "другом" к описываемому классу реализации

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

%f _st_space_key
	MDP

%f _wiki_up_print
	%S#[inherited][{"%S{is friend}"!="%S{!is friend}"}%f_up_prefix(%S) *is friend* = *%S{is friend}* - Определяет, что данный тестовый класс является "другом" к описываемому классу реализации
	]

// Эффективный тип элемента с учётом "is friend"
%f _EffectiveType
//#UC START# *49A575360335for499972740320*
	%f_pas_TypeName(%G)[{%S{is friend}=true}Friend]
//#UC END# *49A575360335for499972740320*

// Генерируем "ворота" для вызова из TC
%f _pas_OutTCGates
//#UC START# *4BC43DB603A9for499972740320*
	<%C#f_pas_OutTCGates()>
//#UC END# *4BC43DB603A9for499972740320*

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
%t _constraint
//#UC START# *4704C0E30186for499972740320*
c          {}
r {""=""}: {}
//#UC END# *4704C0E30186for499972740320*

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Определяет, что элемент производит файл (Unit)
%f _IsUnitFileProducer
//#UC START# *4947EC0F0380for499972740320*
	true
//#UC END# *4947EC0F0380for499972740320*

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Добавляет файлы необходимые элементу с точки зрения метамодели
%f _pas_ImplUses
//#UC START# *4948EB2601FAfor499972740320*
	%S%[inherited]\
	%f_pas_PutToUses("Variants")\
	%f_pas_PutToUses("ActiveX")\
	%f_pas_PutToUses("tc5OpenAppClasses")\
	%f_pas_PutToUses("tc5PublicInfo")\
	%f_pas_PutToUses("tc6OpenAppClasses")\
	%f_pas_PutToUses("tc6PublicInfo")
//#UC END# *4948EB2601FAfor499972740320*

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Выводит секции инициализации
%f _pas_OutIni
//#UC START# *4B3886890063for499972740320*
	%S%[inherited]\
	\n  _RegisterPublicInformation5;
	  _RegisterPublicInformation6;
//#UC END# *4B3886890063for499972740320*

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Имя типа
%f _pas_TypeName
//#UC START# *4947F8AD02A1for499972740320*
	%f_N(%S)
//#UC END# *4947F8AD02A1for499972740320*

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Имя модуля в котором содержится элемент
%f _pas_UnitName
//#UC START# *4948065C01DFfor499972740320*
	%f_cut_prefix(%f_N(%S),T)_p
//#UC END# *4948065C01DFfor499972740320*

// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Реализация на Delphi(.pas)
+ impl.pas
R  
//#UC START# *470F15B800CBfor499972740320*
	[{%S{is friend}=true}%f_pas_OpenType(%S)\
	 %S%f_EffectiveType() = class(%f_pas_TypeName(%G))
	 end;//%S%f_EffectiveType()\n]\
	<{}{"%CO"=""}%CX>
//#UC END# *470F15B800CBfor499972740320*

// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Родные Delphi интерфейсы (.pas)
+ intf.pas
R  
//#UC START# *470F1571031Cfor499972740320*
O [{%S{finished}!=true}NOT_FINISHED_]%f_pas_UnitFileName(%S)
R  
P
	%f_pas_OpenUnitInterface(%S)\
	%f_pas_OpenUnitImplementation(%S)\
	%f_pas_Uses(%S)\
	%f_pas_UsesInImpl(%S)\
	%f_pas_CloseUses(%S)\
	%f_with_gen_id(impl.pas,%SX)\
	%S%f_pas_OutTCGates()\
	[%f_with_gen_id(intf2.pas,%SX)\
	%f_with_gen_id(intf3.pas,%SX)\
	]\
	%f_pas_CloseUnit(%S)\
	<{}{"%CO"!=""}%CX>
//#UC END# *470F1571031Cfor499972740320*

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Вторая интерфейсная секция стереотипа. Например реализация свойств класса.
+ intf2.pas
R  
//#UC START# *477398E501C0for499972740320*
	[\n\nprocedure _RegisterPublicInformation5;
	begin
	[ <{\n }{}%CX>]
	end;]
//#UC END# *477398E501C0for499972740320*

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// 3-я секция интерфейса. Например поле для свойства.
+ intf3.pas
R  
//#UC START# *4774D2A20372for499972740320*
	[\n\nprocedure _RegisterPublicInformation6;
	begin
	[ <{\n }{}%CX>]
	end;]
//#UC END# *4774D2A20372for499972740320*

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Вложенные стереотипы

: TestClass::Class::property::Attribute
? Свойство
= ClassInner::MDAGenerator

// Параметры стереотипа
v +
/ - типы видимости
a f
/ - тип абстракции
Y code_property.gif
L code_property
l l
/ - возможные типы связи атрибута

// Функции стереотипа
%f _st_space_key
	MDP


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Определяет, что это свойство.
%f _IsProp
//#UC START# *493D2D510282for4999824C0371*
	true
//#UC END# *493D2D510282for4999824C0371*

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// документация отсутствует
%f _pas_AttrIndexes
//#UC START# *49998CA903A8for4999824C0371*
	Self: %P%f_EffectiveType()\
	[; %S%[inherited]]
//#UC END# *49998CA903A8for4999824C0371*

// перекрытие базового стереотипа Документация::MDAGenerator
// выводит описание элемента (операция, атрибут) в wiki
%f _wiki_child_kind
//#UC START# *4705CBD6003Efor4999824C0371*
	attr
//#UC END# *4705CBD6003Efor4999824C0371*

// Вложенные стереотипы
: TestClass::Class::property::Attribute::Attribute
? Ключ свойства
= Delphi интерфейсы и реализация::MDAGenerator

// Параметры стереотипа
Y code_attr_key.gif
L code_attr_key
l l
/ - возможные типы связи атрибута

// Функции стереотипа
%f _st_space_key
	MDP



: TestClass::Class::readonly::Attribute
? Readonly-свойство
= TestClass::Class::property::Attribute

// Параметры стереотипа
Y code_readonly_attr.gif
L code_readonly_attr

// Функции стереотипа
%f _st_space_key
	MDP


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Определяет, что элемент это readonly-свойство
%f _IsReadOnlyProp
//#UC START# *4948F9190291for499982880154*
	true
//#UC END# *4948F9190291for499982880154*

// Вложенные стереотипы
: TestClass::Class::readonly::Attribute::Attribute
= TestClass::Class::property::Attribute::Attribute

// Генераторы
// Генерация модели в MDKnow
+ wiki
//#UC START# *46E6D4BB0339for499AA86B0322*
//#UC END# *46E6D4BB0339for499AA86B0322*

// Родные Delphi интерфейсы (.pas)
+ intf.pas
R  
//#UC START# *470F1571031Cfor499AA86B0322*
//#UC END# *470F1571031Cfor499AA86B0322*

// Реализация на Delphi(.pas)
+ impl.pas
R  
//#UC START# *470F15B800CBfor499AA86B0322*
//#UC END# *470F15B800CBfor499AA86B0322*

// Функции стереотипа
%f _st_space_key
	MDP


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
%t _constraint
//#UC START# *4704C0E30186for499AA86B0322*
c          {}
r {""=""}: {}
//#UC END# *4704C0E30186for499AA86B0322*

// реализация абстрактного стереотипа Документация::MDAGenerator
// выводит описание элемента (операция, атрибут) в wiki
%f _wiki_child_kind
//#UC START# *4705CBD6003Efor499AA86B0322*
//#UC END# *4705CBD6003Efor499AA86B0322*

// реализация абстрактного стереотипа Документация::MDAGenerator
// вывод описание авто-генерируемых методов в wiki
%f _wiki_up_add_gen
//#UC START# *470484D50138for499AA86B0322*
//#UC END# *470484D50138for499AA86B0322*


: TestClass::Class::writeonly::Attribute
? Writeonly-свойство
= TestClass::Class::property::Attribute

// Параметры стереотипа
Y code_writeonly_attr.gif
L code_writeonly_attr

// Функции стереотипа
%f _st_space_key
	MDP


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Определяет, что элемент это writeonly-свойство
%f _IsWriteOnlyProp
//#UC START# *4948F93D038Afor499982B000C6*
	true
//#UC END# *4948F93D038Afor499982B000C6*

// Вложенные стереотипы
: TestClass::Class::writeonly::Attribute::Attribute
= TestClass::Class::property::Attribute::Attribute

// Генераторы
// Генерация модели в MDKnow
+ wiki
//#UC START# *46E6D4BB0339for499AA881023B*
//#UC END# *46E6D4BB0339for499AA881023B*

// Родные Delphi интерфейсы (.pas)
+ intf.pas
R  
//#UC START# *470F1571031Cfor499AA881023B*
//#UC END# *470F1571031Cfor499AA881023B*

// Реализация на Delphi(.pas)
+ impl.pas
R  
//#UC START# *470F15B800CBfor499AA881023B*
//#UC END# *470F15B800CBfor499AA881023B*

// Функции стереотипа
%f _st_space_key
	MDP


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
%t _constraint
//#UC START# *4704C0E30186for499AA881023B*
c          {}
r {""=""}: {}
//#UC END# *4704C0E30186for499AA881023B*

// реализация абстрактного стереотипа Документация::MDAGenerator
// выводит описание элемента (операция, атрибут) в wiki
%f _wiki_child_kind
//#UC START# *4705CBD6003Efor499AA881023B*
//#UC END# *4705CBD6003Efor499AA881023B*

// реализация абстрактного стереотипа Документация::MDAGenerator
// вывод описание авто-генерируемых методов в wiki
%f _wiki_up_add_gen
//#UC START# *470484D50138for499AA881023B*
//#UC END# *470484D50138for499AA881023B*


: TestClass::Class::uses::ClassDependency
? использование объекта
= Delphi интерфейсы и реализация::MDAGenerator

// Параметры стереотипа
Y code_dep_uses.gif
L code_dep_uses

// Генераторы
// Родные Delphi интерфейсы (.pas)
+ intf.pas
R  
//#UC START# *470F1571031Cfor49998E19015C*
//#UC END# *470F1571031Cfor49998E19015C*

// Реализация на Delphi(.pas)
+ impl.pas
R  
//#UC START# *470F15B800CBfor49998E19015C*
//#UC END# *470F15B800CBfor49998E19015C*

// Генерация модели в MDKnow
+ wiki
//#UC START# *46E6D4BB0339for49998E19015C*
//#UC END# *46E6D4BB0339for49998E19015C*

// Функции стереотипа
%f _st_space_key
	MDP


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
%t _constraint
//#UC START# *4704C0E30186for49998E19015C*
c          {}
r {""=""}: {}
//#UC END# *4704C0E30186for49998E19015C*

// реализация абстрактного стереотипа Документация::MDAGenerator
// выводит описание элемента (операция, атрибут) в wiki
%f _wiki_child_kind
//#UC START# *4705CBD6003Efor49998E19015C*
	uses
//#UC END# *4705CBD6003Efor49998E19015C*

// реализация абстрактного стереотипа Документация::MDAGenerator
// вывод описание авто-генерируемых методов в wiki
%f _wiki_up_add_gen
//#UC START# *470484D50138for49998E19015C*
//#UC END# *470484D50138for49998E19015C*

: TestClass::Class::Operation
? Метод
= ClassInner::MDAGenerator

// Параметры стереотипа
v +
/ - типы видимости
a f
/ - тип абстракции
Y code_method.gif
L code_method
T 
/ - может не иметь "цели" (типа/результата)

// Функции стереотипа
%f _st_space_key
	MDP


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// перекрытие базового стереотипа ClassInner::MDAGenerator
// Генерируем "ворота" для вызова из TC
%f _pas_CallTCGates
// параметры: TCNum: long = %1
//#UC START# *499C111002ACfor499AD56602D7*
	%f_pas_OpenMethodImplementation(%S,%P)\
	procedure %f_pas_FullMethodName(%S,%P)_Pub%1N(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
	begin
	 Assert(Instance is %f_pas_TypeName(%P%G));
	 try
	  [{"%f_pas_TypeName(%T)"!=""}Value := ]%t_pas_ToVariant(%T,%1)(\
	%f_pas_FullMethodName(%S,%P)(%P%f_EffectiveType()(Instance)\
	[, %S%f_pas_CallParams()])\
	);
	 except
	  // - гасим исключения\
	[{"%f_pas_TypeName(%T)"!=""}\n  Value := Unassigned;]
	 end;//try..except
	end;
//#UC END# *499C111002ACfor499AD56602D7*

// перекрытие базового стереотипа ClassInner::MDAGenerator
// Выводит регистрацию в TestComplete
%f _pas_RegisterInTC
//#UC START# *499AD180009Ffor499AD56602D7*
	tc%1NPublicInfo._RegisterMethod(%f_pas_TypeName(%P%G), tc%1NOpenAppClasses.mtInvoke, '%SN', [{"%f_pas_TypeName(%T)"!=""}{nil}TypeInfo(%f_pas_TypeName(%T))],\
	 \[<{, }TypeInfo(%f_pas_TypeName(%C%T))>\], \[<{, }'%CN'>\], %f_pas_FullMethodName(%S,%P)_Pub%1N);
//#UC END# *499AD180009Ffor499AD56602D7*

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Параметры операции
%f _pas_Params
// параметры: Modification: void = %1
//#UC START# *494BDCF3030Efor499AD56602D7*
	Self: %P%f_EffectiveType()\
	[; %S%[inherited]]
//#UC END# *494BDCF3030Efor499AD56602D7*

// перекрытие базового стереотипа Документация::MDAGenerator
// выводит описание элемента (операция, атрибут) в wiki
%f _wiki_child_kind
//#UC START# *4705CBD6003Efor499AD56602D7*
	method
//#UC END# *4705CBD6003Efor499AD56602D7*


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

