////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/DDT/Metamodel/Elements/DataEnum.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess::DDT::Metamodel::Elements::DataEnum
//
// Перечисление
// ---
// Значения перечисления определяются именами его атрибутов (без указания типа)
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

: DataEnum::Class
? Перечисление
? Значения перечисления определяются именами его атрибутов (без указания типа)
< *::Class,*::Category

= Enum::Class
= DDGenerator::MDAGenerator

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Пользовательские свойства

p separator:s ? определяет разделитель в списках

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

%f _st_space_key
	MDP

%f _wiki_up_print
	%S%[Enum::Class]f_wiki_up_print()[{"%S{separator}"!="%S{!separator}"}%f_up_prefix(%S) *separator* = *%S{separator}* - определяет разделитель в списках
	]


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа Грамматика::MDAGenerator
// Генератор грамматики для ANTLR (целевой язык c++)
+ g.cpp
//#UC START# *4863819D0383for48A12DF5020A*
	%f_data_enum_parser_rule_cpp(%S)

f _data_enum_parser_rule_cpp
	%f_parser_rule_name(%S) returns \[%f_with_gen_id(h,%f_type(%S)) %f_to_omg(%SN)_ret\]
	:	<{\n\t| }%f_data_enum_attr_rule_cpp(%C)>
	;
//#UC END# *4863819D0383for48A12DF5020A*

// реализация абстрактного стереотипа Грамматика::MDAGenerator
// Генератор грамматики для ANTLR (целевой язык java)
+ g.java
//#UC START# *48632D7803AEfor48A12DF5020A*
	%f_parser_rule_name(%S) returns \[%f_with_gen_id(java,%f_type(%S)) %f_to_java(%f_to_omg(%SN)_ret)\]
	:	<{\n\t| }%CX>
	;
//#UC END# *48632D7803AEfor48A12DF5020A*

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Вложенные стереотипы

: DataEnum::Class::Attribute
? пока нет документации
= Enum::Class::Attribute
= Грамматика::MDAGenerator

// Пользовательские свойства
p description:s ? строка идентифицирующая данное значние перечисления в конкретном формате данных

// Генераторы
// Генератор грамматики для ANTLR (целевой язык java)
+ g.java
//#UC START# *48632D7803AEfor48A1398A00F9*
	"[{}{%SN}%S{description}]" {%f_to_java(%f_to_omg(%SN)_ret) = [%f_with_gen_id(java,%f_type(%P)).]%SN;}
//#UC END# *48632D7803AEfor48A1398A00F9*

// Генератор грамматики для ANTLR (целевой язык c++)
+ g.cpp
//#UC START# *4863819D0383for48A1398A00F9*
	%f_data_enum_attr_rule_cpp(%S)

f _data_enum_attr_rule_cpp
	"[{}{%SN}%S{description}]" {%f_to_omg(%PN)_ret = [%f_with_gen_id(h,%P<%NN::>)]%SN;}
//#UC END# *4863819D0383for48A1398A00F9*

// Функции стереотипа
%f _st_space_key
	MDP

%f _wiki_up_print
	%S#[inherited][{"%S{description}"!="%S{!description}"}%f_up_prefix(%S) *description* = *%S{description}* - строка идентифицирующая данное значние перечисления в конкретном формате данных
	]



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

