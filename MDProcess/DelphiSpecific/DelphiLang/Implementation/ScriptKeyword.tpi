////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/DelphiSpecific/DelphiLang/Implementation/ScriptKeyword.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$ForDelphi::DelphiSpecific::DelphiLang::Implementation::ScriptKeyword
//
// Слово скрипта
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

: ScriptKeyword::Class
? Слово скрипта
> ScriptKeyword::Class

= SimpleClass::Class

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры стереотипа
v +-
/ - типы видимости
a fra
/ - тип абстракции
// Параметры визуализации
$ C 230,230,250

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Пользовательские свойства

p NameForScript:s ? 
p is immediate:tribool=undefined ? Определяет - является ли слово исполняемым во время компиляции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

%f _st_space_key
	SHD

%f _wiki_up_print
	%S#[inherited][{"%S{NameForScript}"!="%S{!NameForScript}"}%f_up_prefix(%S) *NameForScript* = *%S{NameForScript}*
	][{"%S{is immediate}"!="%S{!is immediate}"}%f_up_prefix(%S) *is immediate* = *%S{is immediate}* - Определяет - является ли слово исполняемым во время компиляции
	]


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
%f _DoSpell
//#UC START# *4B2A19E3038Bfor4F2C0D86003E*
	%S%[inherited]\

	[{%Gx!=true}\
	[{"%{TtfwRegisterableWord}N"=""}%f_find_element(53EDC0E701BC,TtfwRegisterableWord)]\
	%S%f_make_accessable(%{TtfwRegisterableWord}U)\
	%f_addG(%S,%{TtfwRegisterableWord})\
	]\

	[{%S%f_IsMixIn()!=true}\
	[{%Sa!=abstract}\
	[{"%{TtfwRegisterableWord.GetWordNameForRegister}N"=""}%f_find_element(4DB0614603C8,TtfwRegisterableWord.GetWordNameForRegister)]\
	%S%f_add_override(%{TtfwRegisterableWord.GetWordNameForRegister}U)\
	%{TtfwRegisterableWord.GetWordNameForRegister}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{TtfwRegisterableWord.GetWordNameForRegister},%S)_var,\
	 {-}\
	)\
	%{TtfwRegisterableWord.GetWordNameForRegister}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{TtfwRegisterableWord.GetWordNameForRegister},%S)_impl,\
	 Result := \
	[{"%S{NameForScript}"=""}{\
	'%S{NameForScript}'\
	}\
	'[%P#f_pas_ElementPrefixBase():]%f_str_replace(%f_N(%S),_,:)'\
	]\
	;\
	)\
	%f_SpellRegisterInEngine(%S)\
	]\
	]\

	[{"%S{is immediate}"!="undefined"&"%S{is immediate}"!=""}\
	[{"%{TtfwWord.IsImmediate}N"=""}%f_find_element(4DB6D7F70155,TtfwWord.IsImmediate)]\
	%S%f_add_override(4DB6D7F70155)\
	%{TtfwWord.IsImmediate}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{TtfwWord.IsImmediate},%S)_var,\
	 {-}\
	)\
	%{TtfwWord.IsImmediate}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{TtfwWord.IsImmediate},%S)_impl,\
	 Result := %S{is immediate};\
	)\
	]
//#UC END# *4B2A19E3038Bfor4F2C0D86003E*

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Является ли примесью
%f _IsMixIn
//#UC START# *4947E5D40127for4F2C0D86003E*
	false
//	[{%Sa=abstract}{false}true]
//#UC END# *4947E5D40127for4F2C0D86003E*

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Нужно ли документацию к слову скрипта, которое представляет элемента
%f _NeedsKeywordDocumentation
// возвращаемый результат: boolean
//#UC START# *4F30B869036Efor4F2C0D86003E*
	[{%Sa=abstract}{\
	[{%S%f_IsMixIn()=true}{\
	true\
	}\
	false\
	]\
	}\
	false\
	]
//#UC END# *4F30B869036Efor4F2C0D86003E*

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
%f _ScriptKeywordDocumentationName
// возвращаемый результат: a-string
//#UC START# *4F30B8E60385for4F2C0D86003E*
	[%P#f_pas_ElementPrefixBase()_]%f_N(%S)
//#UC END# *4F30B8E60385for4F2C0D86003E*

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Выводит спец-метку класса
%f _pas_OutClassMark
//#UC START# *494B74D7016Bfor4F2C0D86003E*
	scriptword
//#UC END# *494B74D7016Bfor4F2C0D86003E*

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Имя типа
%f _pas_TypeName
//#UC START# *4947F8AD02A1for4F2C0D86003E*
	[{%S%f_IsMixIn()=true}{\
	Tkw[_%P#f_pas_ElementPrefixBase()]\
	[{%S{NotStripUnderline}=true}{\
	%f_to_borland(%f_cut_prefix(%f_cut_prefix(%f_N(%S),Tkw),_))\
	}\
	%f_cut_prefix(%f_N(%S),Tkw)\
	]\
	}\
	[{%f_substr_from_begin(%SN,3)=tfw}{\
	_kw[_%P#f_pas_ElementPrefixBase()]%f_to_borland(%f_cut_prefix(%f_N(%S),kw))_\
	}\
	_tfw[_%P#f_pas_ElementPrefixBase()]%f_to_borland(%f_cut_prefix(%f_N(%S),tfw))_\
	]\
	]
//#UC END# *4947F8AD02A1for4F2C0D86003E*

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Имя модуля в котором содержится элемент
%f _pas_UnitName
//#UC START# *4948065C01DFfor4F2C0D86003E*
	[{%S%f_IsMixIn()=true}{\
	[{%SV!=PrivateAccess|%P#f_IsUnitFileProducer()!=true}{\
//	[{%SV!=PrivateAccess}{\
	}\
	kw[_%P#f_pas_ElementPrefixBase()]\
	[{%S{NotStripUnderline}=true}{\
	%f_to_borland(%f_cut_prefix(%f_cut_prefix(%f_N(%S),Tkw),_))\
	}\
	%f_cut_prefix(%f_N(%S),Tkw)\
	]\
	]\
	}\
	[{%f_substr_from_begin(%SN,3)=tfw}{\
	kw[_%P#f_pas_ElementPrefixBase()]%f_to_borland(%f_cut_prefix(%f_N(%S),kw)).imp\
	}\
	tfw[_%P#f_pas_ElementPrefixBase()]%f_to_borland(%f_cut_prefix(%f_N(%S),tfw)).imp\
	]\
	]
//#UC END# *4948065C01DFfor4F2C0D86003E*


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

