////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/DelphiSpecific/DelphiLang/Implementation/Service.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$ForDelphi::DelphiSpecific::DelphiLang::Implementation::Service
//
// Сервис
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

: Service::Class
? Сервис
> serviceiterator::Class

= ServicePrim::Class

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры стереотипа
a f
/ - тип абстракции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Пользовательские свойства

p auto translate to alien:tribool=undefined ? 

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

%f _st_space_key
	SHD

%f _wiki_up_print
	%S#[inherited][{"%S{auto translate to alien}"!="%S{!auto translate to alien}"}%f_up_prefix(%S) *auto translate to alien* = *%S{auto translate to alien}*
	]

%f _CheckMixin
//#UC START# *5502CBF50065for5502BABC0193*
	[{"%S%{Mixin}N"=""}\
	<{}{%C#f_IsPureMixIn()=true&"%CN"="M%f_cut_prefix(%f_pas_TypeName(%S),T)"}\
	%S%f_set_var(Mixin,C)\
	>\
	]
//#UC END# *5502CBF50065for5502BABC0193*

%f _CheckFacet
//#UC START# *5502CC07027Efor5502BABC0193*
	[{"%S%{Facet}N"=""}\
	<{}{%t_interface(%C)=true&"%CN"="I%f_cut_prefix(%f_pas_TypeName(%S),T)"}\
	%S%f_set_var(Facet,C)\
	>\
	]

%f _CheckOrMakeFacet
	%S%f_CheckMixin()\
	%S%f_CheckFacet()\

	[{"%S%{Mixin}N"=""}\
	[{%S#f_UseNewGenRec()!=true|"<{}{%C#f_IsFactoryOnModule()=true}{C}>"!="0"}\
	%S%f_add_class(%SU_Mixin,PureMixIn,M%f_cut_prefix(%f_pas_TypeName(%S),T),Mixin_Inst)\
	%{Mixin_Inst}%f_set_documentation(Контракт сервиса %SN)\
	%S%f_set_var(Mixin,{Mixin_Inst})\
	]\
	]\

	[{%S#f_UseNewGenRec()!=true}\
	[{"%S%{Facet}N"=""}\
	%S%f_add_class(%SU_Facet,Facet,I%f_cut_prefix(%f_pas_TypeName(%S),T),Facet_Inst)\
	%{Facet_Inst}%f_set_documentation(Интерфейс сервиса %SN)\
	%S%f_set_var(Facet,{Facet_Inst})\
	]\
	]
//#UC END# *5502CC07027Efor5502BABC0193*

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// перекрытие базового стереотипа ServicePrim::Class
%f _BeforeClassSpell
//#UC START# *5502C6A200F5for5502BABC0193*
	%S%f_CheckOrMakeFacet()\

	[{"%S%{Mixin}N"!=""}\
	%f_clear_list(RESPS)\

	<{}{%CS=responsibility&%CC=Operation}\
	%f_add_to_list(RESPS,C)\
	>\

	%{RESPS}<{}{}{%C}\
	%f_set_var(OP_NAME,"%CN")\
	[{"%1%{Mixin}<{}{%CN=%{OP_NAME}N}{C}>"="0"}\
	%1%{Mixin}%f_add_operation(%1%{Mixin}U_%CU_Resp,,%CN (%C<{, }%CS %CN : %C%TU>): %C%TU,Op_Instance)\
	%{Op_Instance}%f_set_documentation(%CD)\
	%{Op_Instance}%f_set_visibility_type(PublicAccess)\
	%{Op_Instance}%f_set_abstraction_type(abstract)\
	%{Op_Instance}%f_set_up(ifdef,%C{ifdef})\
	%{Op_Instance}%f_set_up(ifndef,%C{ifndef})\
	%{Op_Instance}%f_set_up(OriginalStereotype,%CS)\
	%{Op_Instance}%f_set_var(Speller,C)\
	]\
	>\

	%f_clear_list(RESPS)\

	<{}{%C#f_IsServiceIterator()=true}\
	%f_add_to_list(RESPS,C)\
	>\

	%{RESPS}<{}{}{%C}\
	%f_set_var(OP_NAME,"%CN")\
	[{"%1%{Mixin}<{}{%CNF=%{OP_NAME}N}{C}>"="0"}\
	%C%f_copy_element(%1%{Mixin}U_%CU_Resp,%1%{Mixin}U,facetiterator,%CNF,true,Op_Instance)\
//	%1%{Mixin}%f_add_operation(%1%{Mixin}U_%CU_Resp,,%CN (%C<{, }%CS %CN : %C%TU>): %C%TU,Op_Instance)\
	%{Op_Instance}%f_set_documentation(%CD)\
	%{Op_Instance}%f_set_visibility_type(PublicAccess)\
	%{Op_Instance}%f_set_abstraction_type(abstract)\
	%{Op_Instance}%f_set_up(ifdef,%C{ifdef})\
	%{Op_Instance}%f_set_up(ifndef,%C{ifndef})\
	%{Op_Instance}%f_set_up(needs index,%C{needs index})\
	%{Op_Instance}%f_set_up(needs result,%C{needs result})\
	%{Op_Instance}%f_set_up(OriginalStereotype,%CS)\
	%{Op_Instance}%f_set_var(Speller,C)\
	]\
	>\

	%f_clear_list(RESPS)\

	<{}{%C#f_IsFactoryOnModule()=true}\
	%f_add_to_list(RESPS,C)\
	>\

	%{RESPS}<{}{}{%C}\
	%C%f_copy_element(%1%{Mixin}U_%CU_Resp,%1%{Mixin}U,facetmethod,%CN$%CU,true,Op_Instance)\
	%{Op_Instance}%f_set_documentation(%CD)\
	%{Op_Instance}%f_set_visibility_type(PublicAccess)\
	%{Op_Instance}%f_set_abstraction_type(abstract)\
	%{Op_Instance}%f_set_up(OriginalStereotype,%CS)\
	%{Op_Instance}%f_set_var(Speller,C)\
	>\

	%f_clear_list(RESPS)\
	]\


	[{%S#f_UseNewGenRec()!=true}\
	[{"%S%{Mixin}N"!=""}\
	%f_addR(%S%{Facet},%S%{Mixin})\
	%f_addR(%S,%S%{Mixin})\
	]\
	%S%f_add_attribute(%SU_%S%{Facet}U_Alien,writeonly,Alien : %S%{Facet}U,Attr_Inst)\

	%{Attr_Inst}%f_set_link_type(ref)\
	%{Attr_Inst}%f_set_up(pm,true)\
	%{Attr_Inst}%f_set_up(needs field,true)\
	%{Attr_Inst}%f_set_visibility_type(PublicAccess)\
	%{Attr_Inst}%f_set_abstraction_type(final)\
	%{Attr_Inst}%f_set_documentation(Внешняя реализация сервиса %S%{Facet}N)\

	%{Attr_Inst}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{Attr_Inst},%S)set_var,\
	 {-}\
	)\

	%{Attr_Inst}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{Attr_Inst},%S)set_impl,\
	 Assert((f_Alien = nil) OR (aValue = nil));
	 f_Alien := aValue;\
	)\

	%f_DoSpellField(%{Attr_Inst})\
	]\

//	%f_warning(%SN need cleanup: %S%f_NeedCleanupFields())\

	%S%[inherited]
//#UC END# *5502C6A200F5for5502BABC0193*

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Вложенные стереотипы

: Service::Class::responsibility::Operation
? Ответственность
= ClassBase::Class::Operation

// Параметры стереотипа
v +
/ - типы видимости
a f
/ - тип абстракции
T 
/ - может не иметь "цели" (типа/результата)
m f
/ - не может быть реализован/иметь перекрытую реализацию

// Генераторы
// Генерация модели в MDKnow
+ wiki
//#UC START# *46E6D4BB0339for5502BBDB02C9*
//#UC END# *46E6D4BB0339for5502BBDB02C9*

// генератор реализации фабрик интерфейсов на java (.java)
+ fctr.java
//#UC START# *470321C1038Afor5502BBDB02C9*
//#UC END# *470321C1038Afor5502BBDB02C9*

// Родные Delphi интерфейсы (.pas)
+ intf.pas
R  
//#UC START# *470F1571031Cfor5502BBDB02C9*
//#UC END# *470F1571031Cfor5502BBDB02C9*

// Реализация на Delphi(.pas)
+ impl.pas
R  
//#UC START# *470F15B800CBfor5502BBDB02C9*
//#UC END# *470F15B800CBfor5502BBDB02C9*

// Функции стереотипа
%f _st_space_key
	SHD


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа Документация::MDAGenerator
// вывод описание авто-генерируемых методов в wiki
%f _wiki_up_add_gen
//#UC START# *470484D50138for5502BBDB02C9*
//#UC END# *470484D50138for5502BBDB02C9*

: Service::Class::implements::ClassDependency
= ServicePrim::Class::implements::ClassDependency

// Пользовательские свойства
p auto implements:tribool=undefined ? 

// Функции стереотипа
%f _st_space_key
	SHD

%f _wiki_up_print
	%S#[inherited][{"%S{auto implements}"!="%S{!auto implements}"}%f_up_prefix(%S) *auto implements* = *%S{auto implements}*
	]



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

