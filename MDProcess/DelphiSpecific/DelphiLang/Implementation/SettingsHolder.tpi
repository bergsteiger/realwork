////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/DelphiSpecific/DelphiLang/Implementation/SettingsHolder.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$ForDelphi::DelphiSpecific::DelphiLang::Implementation::SettingsHolder
//
// Класс работающий с настройками
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

: SettingsHolder::Class
? Класс работающий с настройками
= SimpleClass::Class

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

%f _st_space_key
	SHD


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
%f _DoSpell
//#UC START# *4B2A19E3038Bfor522EE3210288*
	%S%[inherited]\
	%S%f_add_class(%SU_Sing,SimpleClass,T%SNSettingsListener,Sing_Inst)\

	%{Sing_Inst}%f_set_visibility_type(PrivateAccess)\
	%{Sing_Inst}%f_set_up(singleton,true)\

	[{"%{Tl3ProtoObject}N"=""}%f_find_element(49E7754802A9,Tl3ProtoObject)]\
	%{Sing_Inst}%f_make_accessable(%{Tl3ProtoObject}U)\
	%f_addG(%{Sing_Inst},%{Tl3ProtoObject})\

	[{"%{afwSettingChanged}N"=""}%f_find_element(afwSettingChanged,afwSettingChanged)]\
	%{Sing_Inst}%f_make_accessable(%{afwSettingChanged}U)\
	%f_addR(%{Sing_Inst},%{afwSettingChanged})\

	[{"%{SysUtils}N"=""}%f_find_element(47877EB202FB,SysUtils)]\
	%{Sing_Inst}%f_make_accessable(%{SysUtils}U)\
	%f_addCDep(%{Sing_Inst},%{SysUtils})\

	%{Sing_Inst}%f_set_documentation(Экземпляр %SN%f_comma(%S) который подписывается к настройкам)\

	%{Sing_Inst}%f_add_class(%{Sing_Inst}U_CheckSubscribe,method,CheckSubscribe,Op_Inst)\

	%{Op_Inst}%f_set_documentation(Метод для проверки того факта%f_comma(%S) что %{Sing_Inst}N подписан на изменения необходимых настроек)\
	%{Op_Inst}%f_set_abstraction_type(final)\
	%{Op_Inst}%f_set_up(is static,true)\

	%{Op_Inst}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{Op_Inst},%{Sing_Inst})_var,\
	 {-}\
	)\
	%{Op_Inst}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{Op_Inst},%{Sing_Inst})_impl,\
	 if (g_%{Sing_Inst}N = nil) then
	  if (afw.Application \<\> nil) then
	   if (afw.Application.Settings \<\> nil) then
	    %{Sing_Inst}N.Instance;\
	)

//	%f_warning(got1)\
//	%f_warning(%f_is_empty(%SU_SETTINGS_KEYS))\

//	%S%{SETTINGS_KEYS}<%f_warning(%CN)>\

	[{%f_is_empty(%SU_SETTINGS_KEYS)=false}\

	%f_clear_list(TEMP_LIST)\

	<{}{%f_is_empty(%SU_SETTINGS_KEYS)=false}{W}%f_pop_first_to_var(%SU_SETTINGS_KEYS,KEY)\
//	%f_warning(%{KEY}N)\
	%f_add_to_list(TEMP_LIST,"%{KEY}N")\
	>\

	%{Sing_Inst}%f_add_operation(%{Sing_Inst}U_IsSettingAffectsUs,,\
	IsSettingAffectsUs (aSettingId: TafwSettingId): boolean,Op_Inst\
	)\

	%{Op_Inst}%f_set_abstraction_type(final)\
	%{Op_Inst}%f_set_documentation(Метод для проверки того факта%f_comma(%S) что %{Sing_Inst}N касается изменение указанной настройки)\
	%{Op_Inst}%f_set_visibility_type(PrivateAccess)\

	%{Op_Inst}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{Op_Inst},%{Sing_Inst})_var,\
	 {-}\
	)\
	%{Op_Inst}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{Op_Inst},%{Sing_Inst})_impl,\
	 Result := <{ OR\n  }{%f_is_empty(TEMP_LIST)=false}{W}%f_pop_first_to_var(TEMP_LIST,KEY)\
//	%f_warning(%{KEY}N)\
	ANSISameText(aSettingId, %{KEY}N)>\
	;\
	)\

	[{"%{_afwSettingChanged_.DoSettingChanged}N"=""}%f_find_element(47EA863A035C,_afwSettingChanged_.DoSettingChanged)]\
	%{Sing_Inst}%f_add_override(%{_afwSettingChanged_.DoSettingChanged}U)\

	%{_afwSettingChanged_.DoSettingChanged}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{_afwSettingChanged_.DoSettingChanged},%{Sing_Inst})_impl,\
	 Result := inherited DoSettingChanged(aSettingId);
	 if IsSettingAffectsUs(aSettingId) then
	 begin
	  Result := true;
	  %f_with_gen_id(intf.pas,%U[{SettingChanged}
	  !!! Needs to be implemented !!!
	  ])
	 end;//IsSettingAffectsUs(aSettingId)\
	)\

	]\

	%f_clear_list(%SU_SETTINGS_KEYS)\
	
//#UC END# *4B2A19E3038Bfor522EE3210288*

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Имя типа
%f _pas_TypeName
//#UC START# *4947F8AD02A1for522EE3210288*
	SH%f_N(%S)
//#UC END# *4947F8AD02A1for522EE3210288*

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Имя модуля в котором содержится элемент
%f _pas_UnitName
//#UC START# *4948065C01DFfor522EE3210288*
	%f_N(%S)_SH
//#UC END# *4948065C01DFfor522EE3210288*


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

