////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/DelphiSpecific/DelphiLang/Interface/Message.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$ForDelphi::DelphiSpecific::DelphiLang::Interface::Message
//
// Сообщение пользователю
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

: Message::Class
? Сообщение пользователю
> Choices::Class

= WikiImplClass::Class
= MessagePrim::Class

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры стереотипа
Y code_gui_message.gif
L code_gui_message
// Параметры визуализации
$ C 238,142,234
$ l 128,0,128
$ f 128,0,128

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Пользовательские свойства

p DlgType=Warning|Error|Information|Confirmation|Custom ? 
p CheckCaption:s ? Настраиваемая надпись для чекбокса
p SettingsCaption:s ? Заголовок сообщения для диалога настроек
p LongHint:s ? Подсказка сообщения для диалога настроек
p NeedCheck:b=false ? Нужен ли Checkbox о запоминании выбора

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

%f _st_space_key
	SHD

%f _wiki_up_print
	%S#[inherited][{"%S{DlgType}"!="%S{!DlgType}"}%f_up_prefix(%S) *DlgType* = *%S{DlgType}*
	][{"%S{CheckCaption}"!="%S{!CheckCaption}"}%f_up_prefix(%S) *CheckCaption* = *%S{CheckCaption}* - Настраиваемая надпись для чекбокса
	][{"%S{SettingsCaption}"!="%S{!SettingsCaption}"}%f_up_prefix(%S) *SettingsCaption* = *%S{SettingsCaption}* - Заголовок сообщения для диалога настроек
	][{"%S{LongHint}"!="%S{!LongHint}"}%f_up_prefix(%S) *LongHint* = *%S{LongHint}* - Подсказка сообщения для диалога настроек
	][{"%S{NeedCheck}"!="%S{!NeedCheck}"}%f_up_prefix(%S) *NeedCheck* = *%S{NeedCheck}* - Нужен ли Checkbox о запоминании выбора
	]


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
%f _DoSpell
//#UC START# *4B2A19E3038Bfor4E01DC9002B0*
	%S%[inherited]\

	[{"%S{CheckCaption}"!=""}\
	%P%f_add_attribute(%SU_CheckCaption,,\
	%f_N(%S)_CheckCaption = '%S{CheckCaption}',\
	Attr_Inst)\
	]\

	[{"%S{SettingsCaption}"!=""}\
	%P%f_add_attribute(%SU_SettingsCaption,,\
	%f_N(%S)_SettingsCaption = '%S{SettingsCaption}',\
	Attr_Inst)\
	]\

	[{"%S{LongHint}"!=""}\
	%P%f_add_attribute(%SU_LongHint,,\
	%f_N(%S)_LongHint = '%S{LongHint}',\
	Attr_Inst)\
	]

//#UC END# *4B2A19E3038Bfor4E01DC9002B0*

// перекрытие базового стереотипа WikiImplClass::Class
%f _WikiImplClassGParam
// возвращаемый результат: a-string
//#UC START# *4E09A6E0018Dfor4E01DC9002B0*
	%SU
//#UC END# *4E09A6E0018Dfor4E01DC9002B0*

// перекрытие базового стереотипа LocalConst::Class::Attribute
// Добавляет дополнительный код инициализации константы
%f _AdditionalInitCode
// параметры: aConstName: a-string = %1
// возвращаемый результат: a-string
//#UC START# *4E09C0BD002Afor4E01DC9002B0*
	%S%[inherited]\
	<{}{%C#f_IsChoices()=true}{%C}\
	%C<{}{}{%C}\
	\n %2N.AddChoice(str_%C%f_pas_Prefix()%C#f_AdditionalPrefix()%f_N(%C));\
	>\
	>\
	<{}{%C#f_IsCustomChoice()=true}{%C}\
	\n %1N.AddCustomChoice(str_%C%T%f_pas_Prefix()%C%T#f_AdditionalPrefix()%f_N(%C%T));\
	>\
	<{}{%C#f_IsDefaultChoice()=true}{%C}\
	\n %1N.AddDefaultChoice(str_%C%T%f_pas_Prefix()%C%T#f_AdditionalPrefix()%f_N(%C%T));\
	>\
	\n %1N.SetDlgType(mt%S{DlgType});\
	[{"%S{NeedCheck}"!="%S{!NeedCheck}"}\n %1N.SetNeedCheck(%S{NeedCheck});]\
	[{"%S{CheckCaption}"!=""}\n %1N.SetCheckCaption(str_%f_N(%S)_CheckCaption);]\
	[{"%S{SettingsCaption}"!=""}\n %1N.SetSettingsCaption(str_%f_N(%S)_SettingsCaption);]\
	[{"%S{LongHint}"!=""}\n %1N.SetLongHint(str_%f_N(%S)_LongHint);]
//#UC END# *4E09C0BD002Afor4E01DC9002B0*

// перекрытие базового стереотипа LocalConst::Class::Attribute
%f _CanUseDocAsValue
// возвращаемый результат: boolean
//#UC START# *4E09CB3D02F1for4E01DC9002B0*
	true
//#UC END# *4E09CB3D02F1for4E01DC9002B0*

// перекрытие базового стереотипа LocalConst::Class::Attribute
%f _IsMessage
// возвращаемый результат: boolean
//#UC START# *4E01C9BC0377for4E01DC9002B0*
	true
//#UC END# *4E01C9BC0377for4E01DC9002B0*

// перекрытие базового стереотипа Документация::MDAGenerator
// вывод описание авто-генерируемых методов в wiki
%f _wiki_up_add_gen
//#UC START# *470484D50138for4E01DC9002B0*
//#UC END# *470484D50138for4E01DC9002B0*

// перекрытие базового стереотипа ModelBuilding::MDAGenerator
// генератор построения виртуальных элементов модели - запускается до генерации конкретных
// артефактов
+ spell
//#UC START# *4A41A13D03D5for4E01DC9002B0*
	<%CX>\
	%S%f_DoSpell()
//#UC END# *4A41A13D03D5for4E01DC9002B0*

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Вложенные стереотипы

: Message::Class::CustomChoice::Attribute
? Выбор для "настраиваемой кнопки"
? Т.е. вместо него подставляется значение vcm_mrCustomButton
= Delphi интерфейсы и реализация::MDAGenerator

// Генераторы
// Генерация модели в MDKnow
+ wiki
//#UC START# *46E6D4BB0339for4E09D0A100CC*
//#UC END# *46E6D4BB0339for4E09D0A100CC*

// Родные Delphi интерфейсы (.pas)
+ intf.pas
R  
//#UC START# *470F1571031Cfor4E09D0A100CC*
//#UC END# *470F1571031Cfor4E09D0A100CC*

// Реализация на Delphi(.pas)
+ impl.pas
R  
//#UC START# *470F15B800CBfor4E09D0A100CC*
//#UC END# *470F15B800CBfor4E09D0A100CC*

// Вторая интерфейсная секция стереотипа. Например реализация свойств класса.
+ intf2.pas
R  
//#UC START# *477398E501C0for4E09D0A100CC*
//#UC END# *477398E501C0for4E09D0A100CC*

// 3-я секция интерфейса. Например поле для свойства.
+ intf3.pas
R  
//#UC START# *4774D2A20372for4E09D0A100CC*
//#UC END# *4774D2A20372for4E09D0A100CC*

// Генератор файлов форм (.dfm)
+ dfm
R  
//#UC START# *49F5795900ECfor4E09D0A100CC*
//#UC END# *49F5795900ECfor4E09D0A100CC*

// Ресурсы (.rc)
+ rc.pas
R  
//#UC START# *55B8D28B0157for4E09D0A100CC*
//#UC END# *55B8D28B0157for4E09D0A100CC*

// Скрипты в ресурсах (.rc.script)
+ rc.script.pas
R  
//#UC START# *55B8D2F80145for4E09D0A100CC*
//#UC END# *55B8D2F80145for4E09D0A100CC*

// Компилятор ресурса (.res.cmd)
+ res.cmd.pas
R  
//#UC START# *55B8DD9C0301for4E09D0A100CC*
//#UC END# *55B8DD9C0301for4E09D0A100CC*

// Функции стереотипа
%f _st_space_key
	SHD

%f _IsCustomChoice
// возвращаемый результат: boolean
//#UC START# *4E09D17501C5for4E09D0A100CC*
	true
//#UC END# *4E09D17501C5for4E09D0A100CC*

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
%t _constraint
//#UC START# *4704C0E30186for4E09D0A100CC*
c          {}
r {""=""}: {}
//#UC END# *4704C0E30186for4E09D0A100CC*

// реализация абстрактного стереотипа Документация::MDAGenerator
// выводит описание элемента (операция, атрибут) в wiki
%f _wiki_child_kind
//#UC START# *4705CBD6003Efor4E09D0A100CC*
	attr
//#UC END# *4705CBD6003Efor4E09D0A100CC*

// реализация абстрактного стереотипа Документация::MDAGenerator
// вывод описание авто-генерируемых методов в wiki
%f _wiki_up_add_gen
//#UC START# *470484D50138for4E09D0A100CC*
//#UC END# *470484D50138for4E09D0A100CC*

: Message::Class::DefaultChoice::Attribute
? Выбор по-умолчанию
? Выбор, который выбирается при закрытии диалога крестиком
= Delphi интерфейсы и реализация::MDAGenerator

// Генераторы
// Генерация модели в MDKnow
+ wiki
//#UC START# *46E6D4BB0339for4E09D1030281*
//#UC END# *46E6D4BB0339for4E09D1030281*

// Родные Delphi интерфейсы (.pas)
+ intf.pas
R  
//#UC START# *470F1571031Cfor4E09D1030281*
//#UC END# *470F1571031Cfor4E09D1030281*

// Реализация на Delphi(.pas)
+ impl.pas
R  
//#UC START# *470F15B800CBfor4E09D1030281*
//#UC END# *470F15B800CBfor4E09D1030281*

// Вторая интерфейсная секция стереотипа. Например реализация свойств класса.
+ intf2.pas
R  
//#UC START# *477398E501C0for4E09D1030281*
//#UC END# *477398E501C0for4E09D1030281*

// 3-я секция интерфейса. Например поле для свойства.
+ intf3.pas
R  
//#UC START# *4774D2A20372for4E09D1030281*
//#UC END# *4774D2A20372for4E09D1030281*

// Генератор файлов форм (.dfm)
+ dfm
R  
//#UC START# *49F5795900ECfor4E09D1030281*
//#UC END# *49F5795900ECfor4E09D1030281*

// Ресурсы (.rc)
+ rc.pas
R  
//#UC START# *55B8D28B0157for4E09D1030281*
//#UC END# *55B8D28B0157for4E09D1030281*

// Скрипты в ресурсах (.rc.script)
+ rc.script.pas
R  
//#UC START# *55B8D2F80145for4E09D1030281*
//#UC END# *55B8D2F80145for4E09D1030281*

// Компилятор ресурса (.res.cmd)
+ res.cmd.pas
R  
//#UC START# *55B8DD9C0301for4E09D1030281*
//#UC END# *55B8DD9C0301for4E09D1030281*

// Функции стереотипа
%f _st_space_key
	SHD

%f _IsDefaultChoice
// возвращаемый результат: boolean
//#UC START# *4E09D190018Afor4E09D1030281*
	true
//#UC END# *4E09D190018Afor4E09D1030281*

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
%t _constraint
//#UC START# *4704C0E30186for4E09D1030281*
c          {}
r {""=""}: {}
//#UC END# *4704C0E30186for4E09D1030281*

// реализация абстрактного стереотипа Документация::MDAGenerator
// выводит описание элемента (операция, атрибут) в wiki
%f _wiki_child_kind
//#UC START# *4705CBD6003Efor4E09D1030281*
	attr
//#UC END# *4705CBD6003Efor4E09D1030281*

// реализация абстрактного стереотипа Документация::MDAGenerator
// вывод описание авто-генерируемых методов в wiki
%f _wiki_up_add_gen
//#UC START# *470484D50138for4E09D1030281*
//#UC END# *470484D50138for4E09D1030281*


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

