////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/DelphiSpecific/DelphiLang/Redefinitions/UseCaseSetting.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$ForDelphi::DelphiSpecific::DelphiLang::Redefinitions::UseCaseSetting
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

: UseCaseSetting::Class (redefinition)
= Delphi интерфейсы и реализация::MDAGenerator

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

%f _st_space_key
	SHD


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// перекрытие базового стереотипа UseCase::Class
%f _DoSpell
//#UC START# *4E302A8B026Cfor4E30ECBB004D*
	%S%[inherited]\

//	%f_set_var(THIS_SET,S)\

	<{}{%LS=VCMUseCaseRealization}\
	%L<{}{%GS=VCMFormsPack}\
	%1%f_SpellToMod(%G,%G%P,%S)\
	>\
	>\

	<{}{%LS=SettingsHolder}\
	%S%f_SpellToMod(%L,%L%P,%L)\
	>\
	

//	<{}{%LS=VCMUseCaseRealization}\
//	%f_set_var(UCMOD,L)\
//	%L<{}{%GS=VCMFormsPack}\
//	%f_set_var(THIS_MOD,G)\
//	%f_set_var(THIS_PAR,G%P)\

//	[{%{THIS_SET}%{HasNestedSettings}N=true}\

//	%f_clear_list(CHILDREN_TO_SPELL)\

//	%{THIS_SET}<{}{%CS=UseCaseSettingValue&"%C{CodeName}"!=""}%C<{}{%CS=UseCaseSetting&"%C{CodeName}"!=""}\

//	%f_warning(child candidate to spell: %CN:%CS:%CU)\

//	%f_set_var(REALIZE_COUNT,"%C<{}{%LU=%{UCMOD}U}{%LC}>")\

//	%f_warning(realize count %{REALIZE_COUNT}N)\

//	[{%{REALIZE_COUNT}N=0}\

//	%f_warning(child to spell: %CN:%CS:%CU)\
//	%f_add_to_list(CHILDREN_TO_SPELL,C)\
//	]\

//	>\
//	>\

//	%{CHILDREN_TO_SPELL}<{}{}{%C}\
//	%C%f_SpellToMod(%{THIS_MOD},%{THIS_PAR})\
//	>\

//	%f_clear_list(CHILDREN_TO_SPELL)\

//	]\
//	>\
//	>

%f _SpellToMod
	%{SELF}%f_set_var(HasNestedSettings,"false")\

	[{"%S{CodeName}"!=""&%Cx=true}\
	%f_set_var(SELF,S)\
	%{SELF}%f_set_var(VALUES_COUNT,"%{SELF}<{}{%CS=UseCaseSettingValue&"%C{CodeName}"!=""}{C}>")\
	[{%{SELF}%{VALUES_COUNT}N!=0}\

	[{%{SELF}%{VALUES_COUNT}N=2}{\
	%{SELF}%f_set_var(IsBool,"false")\
	}\
	%{SELF}%f_set_var(IsBool,"true")\
	]\

	%{SELF}<{}{%CS=UseCaseSettingValue&"%C{CodeName}"!=""}%C<{}{%CS=UseCaseSetting&"%C{CodeName}"!=""}%{SELF}%f_set_var(HasNestedSettings,"true")>>\

	[{"%{BOOLEAN}N"=""}%f_find_element(46A603BB0391,BOOLEAN)]\
	[{"%{Integer}N"=""}%f_find_element(46A606AC03B2,Integer)]\
	[{"%{TddComboBoxConfigItem}N"=""}%f_find_element(TddComboBoxConfigItem,TddComboBoxConfigItem)]\
	[{"%{TddAppConfiguration}N"=""}%f_find_element(TddAppConfiguration,TddAppConfiguration)]\
	[{"%{TddBaseConfigItem}N"=""}%f_find_element(TddBaseConfigItem,TddBaseConfigItem)]\
	[{"%{TddConfigValue}N"=""}%f_find_element(TddConfigValue,TddConfigValue)]\
	[{"%{l3FillChar}N"=""}%f_find_element(l3FillChar,l3FillChar)]\
	[{"%{Tafw}N"=""}%f_find_element(Tafw,Tafw)]\

	%f_set_var(SELF,S)\

	%f_set_var(MOD,1)\
	%f_set_var(PAR,2)\

	%{PAR}%f_add_class(%{SELF}U_%{MOD}U_Res,UtilityPack,%f_N(%{MOD})%{SELF}{CodeName}SettingRes,Pack_Inst)\
//	%f_warning(made %{Pack_Inst}N:%{Pack_Inst}S)\

	[{%{SELF}%{IsBool}N=true}{\
	%{Pack_Inst}%f_add_class(%{Pack_Inst}U_Enum,Enum,%{SELF}{CodeName}Enum,Enum_Inst)\
	%{Enum_Inst}%f_set_documentation(Ключи для настройки "%{SELF}N")\

	%{SELF}<{}{%CS=UseCaseSettingValue&"%C{CodeName}"!=""}\
	%{Enum_Inst}%f_add_attribute(%{SELF}U_%{MOD}U_%CU_SettingValue_Key,,\
	KEY_%{SELF}{CodeName}_%C{CodeName},\
	Attr_Inst)\
	%{Attr_Inst}%f_set_documentation(%CN)\

	>\
	}\
	]\

	[{%{MOD}S=SettingsHolder}{\
	%f_set_var(METHOD,"FactoryMethod")\
	%f_set_var(METHODN,"%f_N(%{MOD})")\
	}\
	%f_set_var(METHOD,"method")\
	%f_set_var(METHODN,"")\
//	%f_clear_list(%{MOD}U_SETTINGS_KEYS)\
	]\

	[{%{SELF}%{HasNestedSettings}N=true}{\
	%{MOD}%f_add_class(%{SELF}U_%{MOD}U_FM,%{METHOD}N,%{METHODN}N%{SELF}{CodeName}Setting,FM_Inst)\
	%{FM_Inst}%f_set_visibility_type(PublicAccess)\
	%{FM_Inst}%f_set_abstraction_type(final)\
	%{FM_Inst}%f_set_documentation(Метод для получения значения настройки "%{SELF}N")\

	%{FM_Inst}%f_make_accessable(%{SELF}U)\
	%f_addR(%{FM_Inst},%{SELF})\

	%{FM_Inst}%f_make_accessable(%{Tafw}U)\
	%f_addCDep(%{FM_Inst},%{Tafw})\
	%{FM_Inst}%f_set_up(NO_FACTORY_BRACKECTS,true)\
	%{FM_Inst}%f_set_up(is static,true)\
	%{FM_Inst}%f_add_operation(%{FM_Inst}U_DoIt,,DoIt (): \
	[{%{SELF}%{IsBool}N=true}{\
	%{Integer}U}\
	%{BOOLEAN}U\
	]\
	,Op_Instance)\
	%{Op_Instance}%f_set_documentation(%{FM_Inst}D)\
	%{FM_Inst}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{FM_Inst},%{MOD})_var,\
	 {-}\
	)\
	%{FM_Inst}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{FM_Inst},%{MOD})_impl,\
	 if (afw.Settings = nil) then
	  Result := dv_%f_N(%{MOD})_%{SELF}{CodeName}
	 else
	  Result := afw.Settings.\
	[{%{SELF}%{IsBool}N=true}{\
	LoadInteger\
	}\
	LoadBoolean\
	]\
	(pi_%f_N(%{MOD})_%{SELF}{CodeName}, dv_%f_N(%{MOD})_%{SELF}{CodeName});\
	)\

	[{%{MOD}S=SettingsHolder}\
	%f_add_to_list(%{MOD}U_SETTINGS_KEYS,"pi_%f_N(%{MOD})_%{SELF}{CodeName}")\
//	%{MOD}%{SETTINGS_KEYS}%f_add_to_list("pi_%f_N(%{MOD})_%{SELF}{CodeName}")\
//	%f_warning(got)\
	]\

	%{MOD}%f_add_class(%{SELF}U_%{MOD}U_FM_W,%{METHOD}N,Write%{METHODN}N%{SELF}{CodeName}Setting,FM_Inst_W)\
	%{FM_Inst_W}%f_set_visibility_type(PublicAccess)\
	%{FM_Inst_W}%f_set_abstraction_type(final)\
	%{FM_Inst_W}%f_set_documentation(Метод для записи значения настройки "%{SELF}N")\

	%{FM_Inst_W}%f_make_accessable(%{SELF}U)\
	%f_addR(%{FM_Inst_W},%{SELF})\

	%{FM_Inst_W}%f_make_accessable(%{Tafw}U)\
	%f_addCDep(%{FM_Inst_W},%{Tafw})\
	%{FM_Inst_W}%f_set_up(NO_FACTORY_BRACKECTS,true)\
	%{FM_Inst_W}%f_set_up(is static,true)\
	%{FM_Inst_W}%f_add_operation(%{FM_Inst_W}U_DoIt,,DoIt (aValue : \
	[{%{SELF}%{IsBool}N=true}{\
	%{Integer}U}\
	%{BOOLEAN}U\
	]\
	),Op_Instance)\
	%{Op_Instance}%f_set_documentation(%{FM_Inst_W}D)\
	%{FM_Inst_W}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{FM_Inst_W},%{MOD})_var,\
	 {-}\
	)\
	%{FM_Inst_W}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{FM_Inst_W},%{MOD})_impl,\
	 if (afw.Settings \<\> nil) then
	  afw.Settings.\
	[{%{SELF}%{IsBool}N=true}{\
	SaveInteger\
	}\
	SaveBoolean\
	]\
	(pi_%f_N(%{MOD})_%{SELF}{CodeName}, aValue);\
	)\
	}\

	%f_set_var(FIRST,"true")\
	%{SELF}<{}{%CS=UseCaseSettingValue&"%C{CodeName}"!=""}\
	%{MOD}%f_add_class(%{SELF}U_%{MOD}U_%CU_FM,%{METHOD}N,%{METHODN}N%{SELF}{CodeName}%C{CodeName}Setting,FM_Inst)\
	%{FM_Inst}%f_set_visibility_type(PublicAccess)\
	%{FM_Inst}%f_set_abstraction_type(final)\
	%{FM_Inst}%f_set_documentation(Метод для получения значения настройки "%{SELF}N"."%CN")\

	%{FM_Inst}%f_make_accessable(%{SELF}U)\
	%f_addR(%{FM_Inst},%{SELF})\

	%{FM_Inst}%f_make_accessable(%{Tafw}U)\
	%f_addCDep(%{FM_Inst},%{Tafw})\
	%{FM_Inst}%f_set_up(NO_FACTORY_BRACKECTS,true)\
	%{FM_Inst}%f_set_up(is static,true)\
	%{FM_Inst}%f_add_operation(%{FM_Inst}U_DoIt,,DoIt (): \
	%{BOOLEAN}U\
	,Op_Instance)\
	%{Op_Instance}%f_set_documentation(%{FM_Inst}D)\
	%{FM_Inst}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{FM_Inst},%{MOD})_var,\
	 {-}\
	)\
	%{FM_Inst}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{FM_Inst},%{MOD})_impl,\
	 if (afw.Settings = nil) then
	  Result := [{%{FIRST}N=true}{false}true]
	 else
	  Result := afw.Settings.\
	LoadBoolean\
	(pi_%f_N(%{MOD})_%{SELF}{CodeName}_%C{CodeName}, [{%{FIRST}N=true}{false}true]);\
	)\

	[{%{MOD}S=SettingsHolder}\
	%f_add_to_list(%{MOD}U_SETTINGS_KEYS,"pi_%f_N(%{MOD})_%{SELF}{CodeName}_%C{CodeName}")\
//	%f_warning(got)\
	]\

	%f_set_var(FIRST,"false")\
	>\

	]\

	%f_addCDep(%{MOD},%{Pack_Inst})\
	%{Pack_Inst}%f_set_documentation(Ресурсы для настройки "%{SELF}N")\
	%{Pack_Inst}%f_make_accessable(%{SELF}U)\
	%f_addR(%{Pack_Inst},%{SELF})\

	%{Pack_Inst}%f_add_class(%{Pack_Inst}U_Key,Constants,%{SELF}{CodeName}Key,Const_Inst)\
	%{Const_Inst}%f_add_attribute(%{Const_Inst}U_Key,,\
	pi_%f_N(%{MOD})_%{SELF}{CodeName} = '%{MOD}D/%{SELF}N',\
	Attr_Inst)\
	%{Attr_Inst}%f_set_documentation(Идентификатор настройки "%{SELF}N")\

	[{%{SELF}%{HasNestedSettings}N=true}\
	%{SELF}<{}{%CS=UseCaseSettingValue&"%C{CodeName}"!=""}\
	%{Const_Inst}%f_add_attribute(%{Const_Inst}U_%CU_Key,,\
	pi_%f_N(%{MOD})_%{SELF}{CodeName}_%C{CodeName} = '%{MOD}D/%{SELF}N/%CN',\
	Attr_Inst)\
	%{Attr_Inst}%f_set_documentation(Идентификатор настройки "%{SELF}N"."%CN")\
	>\
	]\

	[{%{SELF}%{HasNestedSettings}N!=true}\
	%{Const_Inst}%f_add_attribute(%{Const_Inst}U_DefaultValue,,\
	dv_%f_N(%{MOD})_%{SELF}{CodeName} = \
	[{%{SELF}%{IsBool}N=true}{\
	0\
	}\
	false\
	]\
	,\
	Attr_Inst)\
	%{Attr_Inst}%f_set_documentation(Значение по-умолчанию настройки "%{SELF}N")\
	]\

	%{Pack_Inst}%f_add_class(%{Pack_Inst}U_Name,LocalConst,%{SELF}{CodeName}Name,Local_Inst)\
	%{Local_Inst}%f_set_documentation(Имя настройки "%{SELF}N")\
	%{Local_Inst}%f_set_visibility_type(PublicAccess)\
	%{Local_Inst}%f_add_attribute(%{SELF}U_%{MOD}U_%SU_SettingName,,\
	%{SELF}{CodeName} = '%{SELF}N',\
	Attr_Inst)\
	%{Attr_Inst}%f_set_documentation(%{SELF}N)\

	%{Pack_Inst}%f_add_class(%{Pack_Inst}U_Values,LocalConst,%{SELF}{CodeName}Values,Local_Inst)\
	%{Local_Inst}%f_set_documentation(Значения для настройки "%{SELF}N")\
	%{Local_Inst}%f_set_visibility_type(PublicAccess)\

	[{%{SELF}%{HasNestedSettings}N!=true}\
	[{%{SELF}%{IsBool}N=true}{\
	%f_addG(%{Local_Inst},%{Enum_Inst})\
	}\
	%f_addG(%{Local_Inst},%{BOOLEAN})\
	]\

	%{Local_Inst}%f_set_up(Need mapping support,true)\
	%{Local_Inst}%f_set_up(Need map interface,true)\
	]\

	%{Local_Inst}%f_set_up(elements prefix,%{SELF}{CodeName})\

	%{SELF}<{}{%CS=UseCaseSettingValue&"%C{CodeName}"!=""}\
	%{Local_Inst}%f_add_attribute(%{SELF}U_%{MOD}U_%CU_SettingValue,,\
	%C{CodeName} = '%CN',\
	Attr_Inst)\
	%{Attr_Inst}%f_set_documentation(%CN)\
	>\

	[{%{SELF}%{HasNestedSettings}N!=true}\
	%f_set_var(Hack,"false")\
	[{%{PAR}N=StyleTable}\
	%f_set_var(Hack,"true")\
	%f_set_var(PAR,{TddComboBoxConfigItem}%P%P)\
	]\
	%{PAR}%f_add_class(%{SELF}U_%{MOD}U_AppConfig,SimpleClass,Tst%f_N(%{MOD})%{SELF}{CodeName}Item,Class_Inst)\
	%{Class_Inst}%f_set_documentation(Визуализатор для настройки "%{SELF}N")\
	%{Class_Inst}%f_make_accessable(%{SELF}U)\
	%f_addR(%{Class_Inst},%{SELF})\
	%{Class_Inst}%f_make_accessable(%{Pack_Inst}U)\
	%f_addCDep(%{Class_Inst},%{Pack_Inst})\

	%{Class_Inst}%f_make_accessable(%{TddComboBoxConfigItem}U)\
	%{Class_Inst}%f_make_accessable(%{l3FillChar}U)\
	%{Class_Inst}%f_make_accessable(%{TddConfigValue}U)\
	%f_addG(%{Class_Inst},%{TddComboBoxConfigItem})\
	%f_addCDep(%{Class_Inst},%{l3FillChar})\
	%f_addCDep(%{Class_Inst},%{TddConfigValue})\
	%{Class_Inst}%f_add_operation(%{Class_Inst}U_Create,ctor,Create (aMasterItem : %{TddBaseConfigItem}U = nil),Op_Instance)\
	%{Op_Instance}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{Op_Instance},%{Class_Inst})_var,\
	var
	 l_Value : TddConfigValue;\
	)\
	%{Op_Instance}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{Op_Instance},%{Class_Inst})_impl,\
	 l3FillChar(l_Value, SizeOf(l_Value));
	 l_Value.Kind := \
	[{%{SELF}%{IsBool}N=true}{\
	dd_vkInteger\
	}\
	dd_vkBoolean\
	]\
	;
	 [{%{SELF}%{IsBool}N=true}{\
	l_Value.AsInteger\
	}\
	l_Value.AsBoolean\
	]\
	 := dv_%f_N(%{MOD})_%{SELF}{CodeName};
	 inherited Create(pi_%f_N(%{MOD})_%{SELF}{CodeName},
	  str_%{SELF}{CodeName}.AsStr,
	  l_Value, T%{SELF}{CodeName}ValuesMapImpl.Make, aMasterItem);\
	)\

	[{%{Hack}N!=true}\
	%f_addCDep(%{MOD},%{Class_Inst})\
	]\
	]\

	]\
	]\

	[{%S%{HasNestedSettings}N=true}\

	%f_clear_list(CHILDREN_TO_SPELL)\

	<{}{%CS=UseCaseSettingValue&"%C{CodeName}"!=""}%C<{}{%CS=UseCaseSetting&"%C{CodeName}"!=""}\

//	%f_warning(child candidate to spell: %CN:%CS:%CU)\

	%f_set_var(THIS_UCMOD,3)\

	%f_set_var(REALIZE_COUNT,"%C<{}{%LU=%{THIS_UCMOD}U}{%LC}>")\

//	%f_warning(realize count %{REALIZE_COUNT}N)\

	[{%{REALIZE_COUNT}N=0}\

//	%f_warning(child to spell: %CN:%CS:%CU)\
	%f_add_to_list(CHILDREN_TO_SPELL,C)\
	]\

	>\
	>\

	%f_set_var(THIS_MOD,1)\
	%f_set_var(THIS_PAR,2)\
	%f_set_var(THIS_UCMOD,3)\

	%{CHILDREN_TO_SPELL}<{}{}{%C}\
	%C%f_SpellToMod(%{THIS_MOD},%{THIS_PAR},%{THIS_UCMOD})\
	>\

	%f_clear_list(CHILDREN_TO_SPELL)\

	]
//#UC END# *4E302A8B026Cfor4E30ECBB004D*


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

