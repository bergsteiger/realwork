////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/EVDTemplates/Data Definition/Delphi Specific/Range.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$ForDelphi::EVDTemplates::Data Definition::Delphi Specific::Range
//
// Диапазон
// ---
// Декларация типа определяет производный тип как диапазон в исходном. Исходный задаётся как
// базовый класс (связь наследования). Границы диапазона задаются атрибутами.
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

: Range::Class
? Диапазон
? Декларация типа определяет производный тип как диапазон в исходном. Исходный задаётся как базовый класс (связь наследования). Границы диапазона задаются атрибутами.
= Constants::Class
= Delphi интерфейсы и реализация::MDAGenerator

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры стереотипа
v +#-
/ - типы видимости
Y code_range.gif
L code_range
// Параметры визуализации
$ C 240,230,210
$ l 100,75,35
$ f 100,75,35

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Пользовательские свойства

p force usage:b=false ? явно определяет, что элемент будет кем-то использован (нужно для проверки)

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

%f _st_space_key
	SHD

%f _wiki_up_print
	%S%[Constants::Class]f_wiki_up_print()[{"%S{force usage}"!="%S{!force usage}"}%f_up_prefix(%S) *force usage* = *%S{force usage}* - явно определяет, что элемент будет кем-то использован (нужно для проверки)
	]


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
%t _constraint
//#UC START# *4704C0E30186for4721B0380203*
c                               {}
r {<{}{}{%GC}>!=1}:             {%SS должен наследоваться точно от одного типа}
r {%f_is_used(%S)=false}:       {%SS ни кем не используется}
//#UC END# *4704C0E30186for4721B0380203*

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
%f _DoSpell
//#UC START# *4B2A19E3038Bfor4721B0380203*
	%S%[Constants::Class]f_DoSpell()
//#UC END# *4B2A19E3038Bfor4721B0380203*

// перекрытие базового стереотипа C++ интерфейсы и реализация::MDAGenerator
// генератор файлов реализации C++ (.cpp)
+ cpp
//#UC START# *47022CB8034Bfor4721B0380203*
//#UC END# *47022CB8034Bfor4721B0380203*

// перекрытие базового стереотипа C++ интерфейсы и реализация::MDAGenerator
// генератор заголовочных файлов C++ (.h)
+ h
//#UC START# *47022C88029Ffor4721B0380203*
//#UC END# *47022C88029Ffor4721B0380203*

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Родные Delphi интерфейсы (.pas)
+ intf.pas
R  
//#UC START# *470F1571031Cfor4721B0380203*
R  
	[{%f_exists_in_list(GENERATED_INTF,"%f_pas_TypeName(%S)")!=true}\
	%f_add_to_list(GENERATED_INTF,"%f_pas_TypeName(%S)")\
	%f_pas_OpenType(%S)\
	#\

	%f_pas_TypeName(%S) = \
	[{<{}{}{%CC}>=1}{\
	<{..}{}{%C}[{%S{elements prefix}!=\<none\>}%G#f_pas_ElementPrefix()]\
	%C%VN\
	>\
	}\
	%CN..%CN\
	];\

	[\n# \{* %SD \}]]
//#UC END# *470F1571031Cfor4721B0380203*


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

