////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/EVDTemplates/Data Definition/Elements/TagTable.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$ForDelphi::EVDTemplates::Data Definition::Elements::TagTable
//
// EVD-схема
// ---
// Таблица описания тегов. Может содержать атомы или теги, которые связываются друг с другом
// отношениями наследования, реализации или связи.
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

: TagTable::Class
? EVD-схема
? Таблица описания тегов. Может содержать атомы или теги, которые связываются друг с другом отношениями наследования, реализации или связи.
> Tag::Class
> Atom::Class
> TagOverride::Class
> Enum::Class

= WikiImplClass::Class
= AttrValueSpeller::Class
= Delphi интерфейсы и реализация::MDAGenerator

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры стереотипа
Y code_evd_tag_table.gif
L code_evd_tag_table
// Параметры визуализации
$ C 127,255,212
$ L 0,0,0
$ l 127,255,212
$ F 0,0,0
$ f 127,255,212

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Пользовательские свойства

p author:s ? 
p started:s ? 
p need UC:b=false ? 

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

%f _st_space_key
	SHD

%f _wiki_up_print
	%S#[inherited][{"%S{author}"!="%S{!author}"}%f_up_prefix(%S) *author* = *%S{author}*
	][{"%S{started}"!="%S{!started}"}%f_up_prefix(%S) *started* = *%S{started}*
	][{"%S{need UC}"!="%S{!need UC}"}%f_up_prefix(%S) *need UC* = *%S{need UC}*
	]


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
%t _constraint
//#UC START# *4704C0E30186for484926640110*
c	{}
r {""=""}: {}
//#UC END# *4704C0E30186for484926640110*

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Добавляет файлы необходимые элементу с точки зрения метамодели
%f _pas_ImplUses
//#UC START# *4948EB2601FAfor484926640110*
	%S%[inherited]\
	%f_pas_PutToUses("SysUtils")\
	%f_pas_PutToUses("TypInfo")\
	%f_pas_PutToUses("k2Const")\
	%f_pas_PutToUses("k2Tags")\
	%f_pas_PutToUses("k2BaseStruct")\
	%f_pas_PutToUses("l3Types")\
	%f_pas_PutToUses("l3String")\
	%f_pas_PutToUses("l3Variant")\
//	%f_pas_PutToUses("k2Facade")\
	<%C<{}{%LS=Wrapper}%f_pas_PutImplToUses(%L)>>\
	<%C<{}{%L#f_IsInterfaceFactory()=true}%f_pas_PutImplToUses(%L)>>\
	<%C<{}{%LS=TagImplementator}%f_pas_PutImplToUses(%L%G)\
	%f_pas_UsesInImpl(%L)>>\
	<{}{%w#f_evd_IsSchemaElement()=true}%f_pas_PutToUses(%w)>\
	%f_pas_PutToUses("k2List")\
	%f_pas_PutToUses("k2NonOptimizeContext")\
	<{}{%aC=Dependency&%aS=injects}{Sg}\
	%f_pas_PutToUses(%a%P)\
	>
//	<{}{%C#f_evd_IsSchemaElement()=true}%f_pas_Uses(%C)>
//#UC END# *4948EB2601FAfor484926640110*

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Выводит дополнительные модули необходимые элементу в интерфейсной секции
%f _pas_IntfUses
//#UC START# *4948F2EE0334for484926640110*
	%S%[inherited]\
	%f_pas_PutToUses("l3Variant")\
	%f_pas_PutToUses("k2Base")\
	%f_pas_PutToUses("l3Interfaces")\
	%f_pas_PutToUses("k2Interfaces")\
//	<{}{%C#f_evd_IsSchemaElement()=true}%f_pas_Uses(%C)>
	<{}{%C#f_evd_IsSchemaElement()=true}%C%f_pas_IntfUses()>
//#UC END# *4948F2EE0334for484926640110*

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Выводит секции инициализации
%f _pas_OutIni
//#UC START# *4B3886890063for484926640110*
	%S%[inherited]\
	[\n%S%f_open_ifdef()]\
	\n %f_pas_TypeName(%S).SetAsDefault;\
	[\n%S%f_close_ifdef()\n]
//#UC END# *4B3886890063for484926640110*

// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Реализация на Delphi(.pas)
+ impl.pas
R  
//#UC START# *470F15B800CBfor484926640110*
R  
	[<%C#f_evd_OutElementImplementation()>]\
	%f_pas_OpenMethodImplementation("Create",%S)\
	constructor %f_pas_TypeName(%S).Create;
	%f_clear_list(LOCAL_VARS)\
	[var
	%f_out_vars(%S)\
	]\
	%f_clear_list(LOCAL_VARS)\
	begin
	 inherited;\
	[\n %S%f_open_ifdef()]\
	[{%S{need UC}=true}\n%f_with_gen_id(intf.pas,%U[{ttimpl}\n])]
	%f_shift_intend(-3)\
	[<{\n}%CX\
	>\n]\
	%f_shift_intend(+3)\
	[ <{\n }{%C#f_evd_IsSchemaElement()=true}t_%CN.Recalc;>\n]\
	[{%S{need UC}=true}%f_with_gen_id(intf.pas,%U[{ttimpl1}\n])\n]\
	[ %S%f_close_ifdef()\n]\
	end;
	[{%Cx=true}
	// определяем стандартные методы схемы
//	%f_pas_OpenMethodImplementation("pm_GetTypeByHandle",%S)\
//	function %f_pas_TypeName(%S).pm_GetTypeByHandle(H: Integer): Tk2Type;
//	begin
//	[{}{\
//	 Result := inherited pm_GetTypeByHandle(H);\
//	}\
//	 Case H of
//	  <{\n  }{%CS!=TagOverride&%CC!=Dependency&%C#f_evd_HasPersistentID()=true}\
//	[{%C#f_evd_HasPersistentID()=true}{k2_id%f_N(%C)}k2_id%f_N(%C) \{%C{ID}\}]:
//	   Result := t_%CN;>
//	  else
//	  begin
//	%f_set_var(WAS_OUT,"false")\
//	   \
//	[<{}{%CS!=TagOverride&%CC!=Dependency}\

//	[{%C#f_evd_HasPersistentID()!=true}\
//	[{%{WAS_OUT}N!=false}\
//	\n   else\n   \
//	]\
//	%f_set_var(WAS_OUT,"true")\
//	if (t_%CN \<\> nil) AND (t_%CN.StringID = H) then
//	    Result := t_%CN\
//	]\

//	[%C<{}{%C#f_NeedsOwnType()=true}\
//	[\n   %C%f_open_ifdef()]\
//	[{%{WAS_OUT}N!=false}\
//	\n   else\n   \
//	]\
//	%f_set_var(WAS_OUT,"true")\
//	if (t_%C%f_NewTypeName() \<\> nil) AND (t_%C%f_NewTypeName().StringID = H) then
//	    Result := t_%C%f_NewTypeName()\
//	[\n   %C%f_close_ifdef()]\
//	>\
//	   else
//	   \
//	]\
//	>\
//	 \
//	]\

//	[{%{WAS_OUT}N!=false}\
//	\n   else\n    \
//	]\
//	%f_set_var(WAS_OUT,"true")\

//	Result := inherited pm_GetTypeByHandle(H);
//	  end;//else
//	 end;//Case H]
//	end;\
	%f_pas_OpenMethodImplementation("Cleanup",%S)\
	procedure %f_pas_TypeName(%S).Cleanup;
	begin
	[ <{\n }{%CS!=TagOverride&%CC!=Dependency&%C#f_evd_IsSchemaElement()=true}\
	t_%CN.InterfaceFactory := nil;\
//	\n t_%CN.ToolFactory := nil;\
	[\n %C<{\n }{%C#f_NeedsOwnType()=true}\
	[%C%f_open_ifdef()\n ]\
	t_%C%f_NewTypeName().InterfaceFactory := nil;\
	[\n %C%f_close_ifdef()]\
	>\
	]>\n]\
	[ <{\n }{%CS!=TagOverride&%CC!=Dependency&%C#f_evd_IsSchemaElement()=true}FreeAndNil(t_%CN);\
	[\n %C<{\n }{%C#f_NeedsOwnType()=true}\
	[%C%f_open_ifdef()\n ]\
	FreeAndNil(t_%C%f_NewTypeName());\
	[\n %C%f_close_ifdef()]\
	>]>\n]\
	 inherited;
	end;
	]

f _out_vars
	<{}{}{%C}\

	[{%CS=TagChild}\
	[{%f_exists_in_list(LOCAL_VARS,"%C%P%PN_%C%PN_%CN")!=true}\
	%f_add_to_list(LOCAL_VARS,"%C%P%PN_%C%PN_%CN")\
	 l_%C%P%PN_%C%PN_%CN : Tl3Variant;
	]\
	]\

	%f_out_vars(%C)\
	>
//#UC END# *470F15B800CBfor484926640110*

// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Родные Delphi интерфейсы (.pas)
+ intf.pas
R  
//#UC START# *470F1571031Cfor484926640110*
O [{"%f_pas_UnitFileName(%S)"!=""}[{%S{finished}!=true}NOT_FINISHED_]%f_pas_UnitFileName(%S)]
R  
F !!%SN\n\n
	[{"%SO"!=""}\
	[{%S#f_IsMixIn()!=true}{\
	\{$IfNDef %f_pas_UnitName(%S)\}
	[ \{* %SD \}\n]\
	\{$Define %f_pas_UnitName(%S)\}\
	}\
	%f_pas_OpenUnitInterface(%S)\
	%f_pas_Uses(%S)\
	%f_pas_CloseUses(%S)\
	]\
	]\
	\

	[\n%S%f_open_ifdef()\n]\

	<{}{"%CO"=""}%CX>\
	%f_shift_intend(-3)\
	[%f_with_gen_id(intf2.pas,<{\n}%CX>)\n]\
	%f_shift_intend(+3)\
	%f_pas_OpenType(%S)\
	#%f_pas_TypeName(%S) = class([{}{Tk2TypeTable}%f_pas_TypeName(%G)])
	[#public
	#// типы, определённые в данной схеме:
	%f_shift_intend(-2)\
	%f_with_gen_id(intf3.pas,<{\n}%CX>)\n\
	%f_shift_intend(+2)\
	]\
	[{%Cx=true}\
	#protected
	#// определяем стандартные методы схемы
//	#  function  pm_GetTypeByHandle(H: Integer): Tk2Type; override;
	#  procedure Cleanup; override;
	]\
	#public
	#  constructor Create; override;
	#end;//%f_pas_TypeName(%S)\
	[{%S{need UC}=true}\n\n%U[{ttintf}\n]]

	[\n%S%f_close_ifdef()\n]\

	%f_pas_OpenUnitImplementation(%S)\
	%f_pas_UsesInImpl(%S)\
	%f_pas_CloseUses(%S)\
	]\
	
	[\n%S%f_open_ifdef()\n]\

	[{%S{need UC}=true}%U[{tt}\n]\n\n]\
	%f_with_gen_id(impl.pas,%SX)\

	[\n%S%f_close_ifdef()\n]\

	%f_pas_CloseUnit(%S)\
	<{}{"%CO"!=""}%CX>\
	]]
//#UC END# *470F1571031Cfor484926640110*

// перекрытие базового стереотипа ModelBuilding::MDAGenerator
// генератор построения виртуальных элементов модели - запускается до генерации конкретных
// артефактов
+ spell
//#UC START# *4A41A13D03D5for484926640110*
	%f_set_var(TAG_TABLE_CONSTANTS_PACK,"")\
	%f_set_var(TAG_TABLE_CONSTANTS,"")\
	%S%f_SpellAttrValue(%S)\
	[{"%{TAG_TABLE_CONSTANTS_PACK}N"!=""}\
	%f_addCDep(%S,%{TAG_TABLE_CONSTANTS_PACK})\
	]\
	<%CX>\
	%S%f_DoSpell()
//#UC END# *4A41A13D03D5for484926640110*

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Вложенные стереотипы

: TagTable::Class::uses::ClassDependency
? Использование других элементов кода
= Delphi интерфейсы и реализация::MDAGenerator

// Параметры стереотипа
Y code_dep_uses.gif
L code_dep_uses

// Генераторы
// Родные Delphi интерфейсы (.pas)
+ intf.pas
R  
//#UC START# *470F1571031Cfor49AE663102AD*
//#UC END# *470F1571031Cfor49AE663102AD*

// Реализация на Delphi(.pas)
+ impl.pas
R  
//#UC START# *470F15B800CBfor49AE663102AD*
//#UC END# *470F15B800CBfor49AE663102AD*

// Генерация модели в MDKnow
+ wiki
//#UC START# *46E6D4BB0339for49AE663102AD*
//#UC END# *46E6D4BB0339for49AE663102AD*

// Функции стереотипа
%f _st_space_key
	SHD


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
%t _constraint
//#UC START# *4704C0E30186for49AE663102AD*
c          {}
r {""=""}: {}
//#UC END# *4704C0E30186for49AE663102AD*

// реализация абстрактного стереотипа Документация::MDAGenerator
// выводит описание элемента (операция, атрибут) в wiki
%f _wiki_child_kind
//#UC START# *4705CBD6003Efor49AE663102AD*
//#UC END# *4705CBD6003Efor49AE663102AD*

// реализация абстрактного стереотипа Документация::MDAGenerator
// вывод описание авто-генерируемых методов в wiki
%f _wiki_up_add_gen
//#UC START# *470484D50138for49AE663102AD*
	uses
//#UC END# *470484D50138for49AE663102AD*


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

