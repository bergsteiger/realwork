////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/EVDTemplates/Data Definition/Elements/TagValue.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$ForDelphi::EVDTemplates::Data Definition::Elements::TagValue
//
// Предопределённое значение тега
// ---
// Экземпляр [Tag].
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

: TagValue::Class
? Предопределённое значение тега
? Экземпляр [Tag].
> TagChild::Class
> InnerTag::Class

= WikiImplClass::Class
= AttrValueSpeller::Class
= Delphi интерфейсы и реализация::MDAGenerator

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры стереотипа
a r
/ - тип абстракции
Y code_evd_tag_value.gif
L code_evd_tag_value
// Параметры визуализации
$ C 152,251,152
$ L 0,0,0
$ l 50,205,50
$ F 0,0,0
$ f 50,205,50

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

%f _st_space_key
	SHD


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
%t _constraint
//#UC START# *4704C0E30186for485FB3190099*
c	{}
r {""=""}: {}
//#UC END# *4704C0E30186for485FB3190099*

// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Реализация на Delphi(.pas)
+ impl.pas
R  
//#UC START# *470F15B800CBfor485FB3190099*
R  
	[#// %SD\n]\
	# with MakeTag.AsObject do
	# begin
	[{%Gx=true}#  IntW\[k2_attrStyle, Tk2NonOptimizeContext.Instance\] := \
	%G<{}{%CN=Handle}\
	[{%C%V%TS!=UMLPrimitive}%S#f_pas_Prefix()]\
	%C%VN>;\n]\
	[# <{\n# }{%CC!=Class}%CX>\n]\
	%f_shift_intend(+1)\
	[<{\n}{%CC=Class}%CX>\n]\
	%f_shift_intend(-1)\
	#  AddValue(Box);
	# end;//with MakeTag.AsObject
//#UC END# *470F15B800CBfor485FB3190099*

// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Родные Delphi интерфейсы (.pas)
+ intf.pas
R  
//#UC START# *470F1571031Cfor485FB3190099*
	[%S%f_open_ifdef()\n]\
	%f_pas_OpenConst(%S)\
	<{}{%CN=Handle} %S#f_pas_Prefix()%SN = \
	[{%C%V%TS=Constants}%f_pas_Unit(%C%V%T).%C%V%T%f_pas_ElementPrefix()]\
	%C%VN;
	  { %SD } >\
	[\n%S%f_close_ifdef()\n]
//#UC END# *470F1571031Cfor485FB3190099*

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Вложенные стереотипы

: TagValue::Class::Attribute
? Атрибут
= AttrValueSpeller::Class
= Delphi интерфейсы и реализация::MDAGenerator

// Параметры стереотипа
a r
/ - тип абстракции
Y code_attr.gif
L code_attr
T 
/ - может не иметь "цели" (типа/результата)
l a
/ - возможные типы связи атрибута

// Генераторы
// Родные Delphi интерфейсы (.pas)
+ intf.pas
R  
//#UC START# *470F1571031Cfor485FB4850287*
//#UC END# *470F1571031Cfor485FB4850287*

// Реализация на Delphi(.pas)
+ impl.pas
R  
//#UC START# *470F15B800CBfor485FB4850287*
	[ %S%f_open_ifdef()\n#]\
	 \
	[{%f_substr_from_begin(%VN,1)='}{\
	[{%VN=false|%VN=true}{\
	IntW\
	}\
	BoolW\
	]\
	}\
	StrW\
	]\
	\[k2_attr%f_N(%S), Tk2NonOptimizeContext.Instance\] := \

	[{%TS=TagValue}{\
	[{%VN=@}{\
	[{%V%TS=Enum|%V%TS=Constants}{\
	[{%f_substr_from_begin(%VN,1)='}{\
	%VN\
	}\
	str_%f_get_AttrConstName(%S).AsStr\
	]\
	}\
	Ord(%V%T%f_pas_ElementPrefix()%VN)\
	]\
	}\
	k2_TransparentValue\
	]\
	}\
	%T#f_pas_Prefix()%TN\
	]\
	;\

	[\n# %S%f_close_ifdef()]
//#UC END# *470F15B800CBfor485FB4850287*

// Генерация модели в MDKnow
+ wiki
//#UC START# *46E6D4BB0339for485FB4850287*
//#UC END# *46E6D4BB0339for485FB4850287*

// Функции стереотипа
%f _st_space_key
	SHD


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
%t _constraint
//#UC START# *4704C0E30186for485FB4850287*
c	{}
r {""=""}: {}
//#UC END# *4704C0E30186for485FB4850287*

// реализация абстрактного стереотипа Документация::MDAGenerator
// выводит описание элемента (операция, атрибут) в wiki
%f _wiki_child_kind
//#UC START# *4705CBD6003Efor485FB4850287*
	attr
//#UC END# *4705CBD6003Efor485FB4850287*

// реализация абстрактного стереотипа Документация::MDAGenerator
// вывод описание авто-генерируемых методов в wiki
%f _wiki_up_add_gen
//#UC START# *470484D50138for485FB4850287*
//#UC END# *470484D50138for485FB4850287*

// перекрытие базового стереотипа AttrValueSpeller::Class
%f _SpellAttrValue
//#UC START# *4F9002060002for485FB4850287*
	%S%[inherited]\
	[{%f_substr_from_begin(%VN,1)='}\
	%f_get_TagTable(%S,%1)\
	%{TAG_TABLE_CONSTANTS}%f_add_attribute(%SU_LocalValue,,\
	%f_get_AttrConstName(%S) = %VN,\
	Attr_Inst)\
	%{Attr_Inst}%f_set_documentation(Локализуемое значения атрибута %f_get_AttrConstName(%S))\

	%{Attr_Inst}%f_set_up(ifdef,%S{ifdef})\
	%{Attr_Inst}%f_set_up(ifndef,%S{ifndef})\
	]

f _get_TagTable
	[{"%{TAG_TABLE_CONSTANTS_PACK}N"=""}\
	%1%P%f_add_class(%1U_AttrValues_Pack,UtilityPack,%1N_AttrValues,TAG_TABLE_CONSTANTS_PACK)\
	%{TAG_TABLE_CONSTANTS_PACK}%f_set_documentation(Локализуемые значения атрибутов значений тегов таблицы тегов %1N)\
	%{TAG_TABLE_CONSTANTS_PACK}%f_add_class(%1U_AttrValues,LocalConst,AttrValues,TAG_TABLE_CONSTANTS)\
	%{TAG_TABLE_CONSTANTS}%f_set_documentation(Локализуемые значения атрибутов значений тегов)\
	%{TAG_TABLE_CONSTANTS}%f_set_visibility_type(PublicAccess)\
	%{TAG_TABLE_CONSTANTS}%f_set_up(ifdef,%1{ifdef})\
	%{TAG_TABLE_CONSTANTS}%f_set_up(ifndef,%1{ifndef})\
	]

f _get_AttrConstName
@ %SU
	<{_}{%PC!=Category&%PS!=TagTable}{%Pr}%f_N(%P)>\
	_%f_str_replace(%SN,$,_D_)_Value
//#UC END# *4F9002060002for485FB4850287*


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

