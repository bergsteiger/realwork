////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/CommonTemplates/CommonLang/Containers/Array.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$Templates::CommonTemplates::CommonLang::Containers::Array
//
// Массив
// ---
// Определяет простой массив, размер масива задаётся в рантайме и не может изменяться. Тип данных
// определяется атрибутом без стереотипа. Возможно указание специфического аллокатора - атрибут с
// соответствующим стереотипом. Может
// работать в 3-х режимах:
// 1. Просто работает с внешней переданной памятью, не удаляя её при разрушении объекта
// 2. Захватывает переданную внешнюю память и удаляет её при выходе (удаление выполняется спомощью
// аллокатора)
// 3. Объект сам создает массив заданного размера (выделение памяти выполняется с помощью
// аллокатора) и удаляет его при разрушении
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//: Array::Class
implementation @ <<Array>>
//? Массив
//? Определяет простой массив, размер масива задаётся в рантайме и не может изменяться. Тип данных определяется атрибутом без стереотипа. Возможно указание специфического аллокатора - атрибут с соответствующим стереотипом. Может
//? работать в 3-х режимах:
//? 1. Просто работает с внешней переданной памятью, не удаляя её при разрушении объекта
//? 2. Захватывает переданную внешнюю память и удаляет её при выходе (удаление выполняется спомощью аллокатора)
//? 3. Объект сам создает массив заданного размера (выделение памяти выполняется с помощью аллокатора) и удаляет его при разрушении
//= Vector::Class

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

//%f _st_space_key
: st_space_key OBJECT IN %S
//	MDP
 'MDP'


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// перекрытие базового стереотипа BaseContainer::Class
// сгенерить определение контэйнера для C++
//%f _dump_container_def_h
; // st_space_key

: dump_container_def_h OBJECT IN %S
//#UC START# *49015EE401E1for4A0D1146004D*
//	%f_dump_container_fwds_h(%S)\
 [%f] dump_container_fwds_h %( %S )% 
//	%f_docs(%S)\
 [%f] docs %( %S )% 
//	#typedef Core::Array \< %f_data_dump(%S)<{}{"%CS"="allocator"}, %f_type(%C%T)> \> %SN;
 out_indent 'typedef Core::Array < '
 [%f] data_dump %( %S )% 
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if ( ( %C |S ) %== 'allocator' ) then
  begin
   ', '
   [%f] type %( %C ->T  )% 
   ++! l_Counter
  end // if
 end // for C
 ' > '
 %S |N ';'
//#UC END# *49015EE401E1for4A0D1146004D*
; // dump_container_def_h



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

end. // <<Array>>

