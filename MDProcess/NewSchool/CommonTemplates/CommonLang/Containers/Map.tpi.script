////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/CommonTemplates/CommonLang/Containers/Map.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$Templates::CommonTemplates::CommonLang::Containers::Map
//
// Карта
// ---
// Сортированный индексный контейнер с заданным ключем
// Абстракция уровня реализации. Тип данных определяется атрибутом без стереотипа. Тип ключа
// определяется ключем связи со этим атрибутом.
// Дополнительно могут быть указанны тип аллокатора данных и тип функтора-сравнения, как атрибуты
// со стереотипами <<allocator>> и <<compare>> соотвественно
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//: Map::Class
implementation @ <<Map>>
//? Карта
//? Сортированный индексный контейнер с заданным ключем
//? Абстракция уровня реализации. Тип данных определяется атрибутом без стереотипа. Тип ключа определяется ключем связи со этим атрибутом.
//? Дополнительно могут быть указанны тип аллокатора данных и тип функтора-сравнения, как атрибуты со стереотипами <<allocator>> и <<compare>> соотвественно
//= BaseMap::Class
//= Генерация JavaScript::MDAGenerator

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

//%f _st_space_key
: st_space_key OBJECT IN %S
//	MDP
 'MDP'


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// перекрытие базового стереотипа BaseContainer::Class
// сгенерить определение контэйнера для C++
//%f _dump_container_def_h
; // st_space_key

: dump_container_def_h OBJECT IN %S
//#UC START# *49015EE401E1for470F05F10399*
//	%f_dump_container_fwds_h(%S)\
 [%f] dump_container_fwds_h %( %S )% 
//	%f_docs(%S)\
 [%f] docs %( %S )% 
//	#typedef std::map \< %f_key_dump(%S), %f_data_dump(%S)%f_comp_dump(%S)<{}{"%CS"="allocator"}, %f_type(%C%T)> \> %SN;
 out_indent 'typedef std::map < '
 [%f] key_dump %( %S )% ', '
 [%f] data_dump %( %S )% [%f] comp_dump %( %S )% 
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if ( ( %C |S ) %== 'allocator' ) then
  begin
   ', '
   [%f] type %( %C ->T  )% 
   ++! l_Counter
  end // if
 end // for C
 ' > '
 %S |N ';'
//#UC END# *49015EE401E1for470F05F10399*
; // dump_container_def_h


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Вложенные стереотипы

//: Map::Class::compare::Attribute
end. // <<Map>>

implementation @ :: <<Map>> <<compare>> ;
//? Функтор сравнения элементов контейнера
// Параметры стереотипа
//Y code_comparator.gif
//L code_comparator
//l l
// - возможные типы связи атрибута

// Функции стереотипа
//%f _st_space_key
: st_space_key OBJECT IN %S
//	MDP
 'MDP'



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

; // st_space_key

end. // :: <<Map>> <<compare>> ;

