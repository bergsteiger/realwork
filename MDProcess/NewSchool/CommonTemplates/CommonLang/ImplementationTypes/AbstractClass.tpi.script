////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/CommonTemplates/CommonLang/ImplementationTypes/AbstractClass.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$Templates::CommonTemplates::CommonLang::ImplementationTypes::AbstractClass
//
// Абстрактный базовый стереотип для SimpleClass и UtilityClass определяет общие свойства, функции
// и трансформаторы.
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//: AbstractClass::Class
implementation @ <<AbstractClass>>
//? Абстрактный базовый стереотип для SimpleClass и UtilityClass определяет общие свойства, функции и трансформаторы.
//= AbstractImplInclude::Class
//= WikiImplClass::Class
//= ClassBaseGenerator::MDAGenerator

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры стереотипа
//W true
// - может быть параметризован

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Пользовательские свойства

//p need UC:b=false ? явно включает генерацию дополнительных секций Юзер-Кода
//p non virtual base:b=false ? включает генерацию НЕ виртуального наследования
//p debug log:b=false ? включает генерацию вывода в лог обращений ко всем методам серванта

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

//%f _st_space_key
: st_space_key OBJECT IN %S
//	MDP
 'MDP'

//%f _wiki_up_print
; // st_space_key

: wiki_up_print OBJECT IN %S
//	%S#[inherited][{"%S{need UC}"!="%S{!need UC}"}%f_up_prefix(%S) *need UC* = *%S{need UC}* - явно включает генерацию дополнительных секций Юзер-Кода
 ?inherited
 if ( ( %S get_up ( 'need UC' ) ) %!= ( %S get_up_def ( 'need UC' ) ) ) then
 begin
  [%f] up_prefix %( %S )% ' *need UC* = *'
  %S get_up ( 'need UC' ) '* - явно включает генерацию дополнительных секций Юзер-Кода'
//	][{"%S{non virtual base}"!="%S{!non virtual base}"}%f_up_prefix(%S) *non virtual base* = *%S{non virtual base}* - включает генерацию НЕ виртуального наследования
 end // if
 if ( ( %S get_up ( 'non virtual base' ) ) %!= ( %S get_up_def ( 'non virtual base' ) ) ) then
 begin
  [%f] up_prefix %( %S )% ' *non virtual base* = *'
  %S get_up ( 'non virtual base' ) '* - включает генерацию НЕ виртуального наследования'
//	][{"%S{debug log}"!="%S{!debug log}"}%f_up_prefix(%S) *debug log* = *%S{debug log}* - включает генерацию вывода в лог обращений ко всем методам серванта
 end // if
 if ( ( %S get_up ( 'debug log' ) ) %!= ( %S get_up_def ( 'debug log' ) ) ) then
 begin
  [%f] up_prefix %( %S )% ' *debug log* = *'
  %S get_up ( 'debug log' ) '* - включает генерацию вывода в лог обращений ко всем методам серванта'
//	]
 end // if

// определение специфических данных стереотипа
//%f _auto_self_data_h
; // wiki_up_print

: auto_self_data_h OBJECT IN %S
//#UC START# *471728BC0232for4717284C01C5*
//#UC END# *471728BC0232for4717284C01C5*
; // auto_self_data_h


// реализация специфических методов стереотипа
//%f _auto_self_methods_cpp
: auto_self_methods_cpp OBJECT IN %S
//#UC START# *471728BE01B5for4717284C01C5*
//#UC END# *471728BE01B5for4717284C01C5*
; // auto_self_methods_cpp


// определение специфических методов стереотипа
//%f _auto_self_methods_h
: auto_self_methods_h OBJECT IN %S
//#UC START# *471728C000FAfor4717284C01C5*
//#UC END# *471728C000FAfor4717284C01C5*
; // auto_self_methods_h


// выводит список наследования
//%f _base_class_decl
: base_class_decl OBJECT IN %S
//#UC START# *471728C103A9for4717284C01C5*
//#UC END# *471728C103A9for4717284C01C5*
; // base_class_decl


// реализация контсуктора и деструктора
//%f _ctor_n_dctor_cpp
: ctor_n_dctor_cpp OBJECT IN %S
//#UC START# *471728C301D4for4717284C01C5*
//#UC END# *471728C301D4for4717284C01C5*
; // ctor_n_dctor_cpp


// выводит определение конструктора и деструктора
//%f _ctor_n_dctor_h
: ctor_n_dctor_h OBJECT IN %S
//#UC START# *471728C5005Dfor4717284C01C5*
//#UC END# *471728C5005Dfor4717284C01C5*
; // ctor_n_dctor_h


// выводит forward-определение
//%f _self_forward
: self_forward OBJECT IN %S
//#UC START# *471728C60280for4717284C01C5*
//#UC END# *471728C60280for4717284C01C5*
; // self_forward


// выводит специфические include
//%f _specific_include
: specific_include OBJECT IN %S
//#UC START# *471728C803B9for4717284C01C5*
//#UC END# *471728C803B9for4717284C01C5*
; // specific_include


// генерация списка базовых классов и реализуемых интерфейсов
//%f _java_base_class_decl
: java_base_class_decl OBJECT IN %S
//#UC START# *47173062030Dfor4717284C01C5*
//	%f_java_base(%S)
 [%f] java_base %( %S )% 
//#UC END# *47173062030Dfor4717284C01C5*
; // java_base_class_decl


// генерация блока импорта серванта
//%f _java_servant_import_self
: java_servant_import_self OBJECT IN %S
//#UC START# *4717306F0157for4717284C01C5*
//#UC END# *4717306F0157for4717284C01C5*
; // java_servant_import_self


// генерация специфичсекого содержимого
//%f _servant_content_java
: servant_content_java OBJECT IN %S
//#UC START# *47173078008Cfor4717284C01C5*
//#UC END# *47173078008Cfor4717284C01C5*
; // servant_content_java


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// перекрытие базового стереотипа Документация::MDAGenerator
// выводит описание элемента (операция, атрибут) в wiki
//%f _wiki_child_kind
: wiki_child_kind OBJECT IN %S
//#UC START# *4705CBD6003Efor4717284C01C5*
//#UC END# *4705CBD6003Efor4717284C01C5*
; // wiki_child_kind


// перекрытие базового стереотипа Документация::MDAGenerator
// вывод описание авто-генерируемых методов в wiki
//%f _wiki_up_add_gen
: wiki_up_add_gen OBJECT IN %S
//#UC START# *470484D50138for4717284C01C5*
//#UC END# *470484D50138for4717284C01C5*
; // wiki_up_add_gen


// реализация абстрактного стереотипа C++ интерфейсы и реализация::MDAGenerator
// генератор файлов реализации C++ (.cpp)
//+ cpp
<<generator>> cpp OBJECT IN %S
//#UC START# *47022CB8034Bfor4717284C01C5*
//P
//S class %SN;
//O [{%f_need_cpp_file_for_servant(%S)=true}<{}{%t_nested_scope_def(%P)=true}{r}%PN_>%SN.cpp]
//	%f_output_constraint(%S)\
 [%f] output_constraint %( %S )% 
//	[{%f_need_cpp_file_for_servant(%S)=true}\
 if ( ( [%f] need_cpp_file_for_servant %( %S )% ) %==  true ) then
 begin
//	%f_header(%S)
  [%f] header %( %S )% 
//	
  #13#10

//	%f_simple_class_impl_body(%S)
  [%f] simple_class_impl_body %( %S )% 
//	%f_footer(%S)
  [%f] footer %( %S )% 
//	]
 end // if
//#UC END# *47022CB8034Bfor4717284C01C5*
; // cpp


// реализация абстрактного стереотипа C++ интерфейсы и реализация::MDAGenerator
// генератор заголовочных файлов C++ (.h)
//+ h
<<generator>> h OBJECT IN %S
//#UC START# *47022C88029Ffor4717284C01C5*
//F [{"%SK"="ParameterizedClass"}[template \<<{, }{%CC=Parameter}%f_dump_template_param_h(%C)>\> ]]class %SN;
//S class %SN;
//O [{%t_nested_scope_def(%P)=false}%SN.h]
//	%f_output_constraint(%S)\
 [%f] output_constraint %( %S )% 
//	%f_set_var(SELF,S)%f_set_var(SERV,S)[{%t_nested_scope_def(%P)=false}{[#%S%f_open_ifdef()
 [%f] set_var %( 'SELF' %, 'S' )% [%f] set_var %( 'SERV' %, 'S' )% if ( ( [%t] nested_scope_def %( %P )% ) %==  false ) then
 begin
//	%f_h_header(%S)
  [%f] h_header %( %S )% 
//	%f_std_inc(%S)%f_set_var(SERV,S)
  [%f] std_inc %( %S )% [%f] set_var %( 'SERV' %, 'S' )% 
//	%f_includes_by_contents(%S)%f_include_factory_by_uses(%S)<\#include %f_dump_include_path(%wL,%w)
  [%f] includes_by_contents %( %S )% [%f] include_factory_by_uses %( %S )% 
  INTEGER VAR l_Counter l_Counter := 0
  for %S%w
  begin
   OBJECT IN %w
   if true then
   begin
    '#include '
    [%f] dump_include_path %( %w |L %, %w )% 
//	>%S%f_specific_include()[{%S{need UC}=true}

    ++! l_Counter
   end // if
  end // for w
  %S %f specific_include %( )% if ( ( %S get_up ( 'need UC' ) ) %==  true ) then
  begin
   #13#10

//	%U[{_CUSTOM_INCLUDES}
   %Usersection (
    '_CUSTOM_INCLUDES' 
   )
   (
    #13#10

//	]

   ) // Usersection
 //	][
  end // if
  if NOT-EMPTY
  begin
   #13#10

//	%S%f_open_ifdef()][
   %S %f open_ifdef %( )% 
  end // if
  NOP
  if NOT-EMPTY
  begin
   #13#10

//	// forward decls for defined friends
   '// forward decls for defined friends'
//	<{}{"%aS"="friend"&"%aC"="Dependency"}{Sp}%a%PP\t%a%PF
   INTEGER VAR l_Counter l_Counter := 0
   for %S%ap
   begin
    OBJECT IN %a
    if ( ( %a |S ) %== 'friend' AND 
     ( ( %a |C ) %== 'Dependency'  ) ) then
    begin
     %a ->P |P  #9
     %a ->P |F  
//	%a%Pp
     %a ->P |p  
//	>]

     ++! l_Counter
    end // if
   end // for a
  end // if
  NOP
//	%SP
  %S |P 
//	]<%WF
 end // if
 else
 begin
  if NOT-EMPTY
  begin
   out_indent %S %f open_ifdef %( )% 
//	]}\
  end // if
  NOP
 end // else
 INTEGER VAR l_Counter l_Counter := 0
 for %S%W
 begin
  OBJECT IN %W
  if true then
  begin
   %W |F 
//	>[%f_dump_cpp_functors_h_fd(%S)

   ++! l_Counter
  end // if
 end // for W
 if NOT-EMPTY
 begin
  [%f] dump_cpp_functors_h_fd %( %S )% 
//	]%f_docs(%S)\
 end // if
 NOP
 [%f] docs %( %S )% 
//	%S%f_self_forward()\
 %S %f self_forward %( )% 
//	[{"%SK"="ParameterizedClass"}#template \<<{, }{"%CC"="Parameter"}%CX>\>%f_set_var(INST,S)
 if ( ( %S |K ) %== 'ParameterizedClass' ) then
 begin
  out_indent 'template <'
  INTEGER VAR l_Counter l_Counter := 0
  for %S%C
  begin
   OBJECT IN %C
   if ( ( %C |C ) %== 'Parameter' ) then
   begin
    if ( l_Counter >0 ) then ( ', ' )
    %C |X 
    ++! l_Counter
   end // if
  end // for C
  '>'
  [%f] set_var %( 'INST' %, 'S' )% 
//	]#class %SN %S%f_base_class_decl(){
 end // if
 out_indent 'class '
 %S |N ' '
 %S %f base_class_decl %( )% '{'
//	[{%Sa!=abstract&%S{need objcounter}!=false}#	SET_OBJECT_COUNTER (%SN)
 if ( ( %S |a ) %!= 'abstract' AND 
   ( ( %S get_up ( 'need objcounter' ) ) %!=  false  ) ) then
 begin
  out_indent '	SET_OBJECT_COUNTER ('
  %S |N ')'
//	][<{}{"%aC"="Dependency"&"%aS"="friend"}{Sp}#	friend class %f_type(%a%P); // defined friend
 end // if
 if NOT-EMPTY
 begin
  INTEGER VAR l_Counter l_Counter := 0
  for %S%ap
  begin
   OBJECT IN %a
   if ( ( %a |C ) %== 'Dependency' AND 
    ( ( %a |S ) %== 'friend'  ) ) then
   begin
    out_indent '	friend class '
    [%f] type %( %a ->P  )% '; // defined friend'
//	>][%P<{}{"%CU"!="%{SELF}U"&"%C{local supervisor}"="true"}#	friend class %f_type(%C);// local supervisor

    ++! l_Counter
   end // if
  end // for a
 end // if
 NOP
 if NOT-EMPTY
 begin
  %P
  bind ( 
   OBJECT VAR %S
   INTEGER VAR l_Counter l_Counter := 0
   for %S%C
   begin
    OBJECT IN %C
    if ( ( %C |U ) %!= ( ( get_global_var ( 'SELF' ) |U ) ) AND 
     ( ( %C get_up ( 'local supervisor' ) ) %== true  ) ) then
    begin
     out_indent '	friend class '
     [%f] type %( %C )% ';// local supervisor'
//	>][{"%S{singleton}"="true"}

     ++! l_Counter
    end // if
   end // for C

  ) // bind
  end // if
 NOP
 if ( ( %S get_up ( 'singleton' ) ) %== true ) then
 begin
  #13#10

//	#	// singleton declaration
  out_indent '	// singleton declaration'
//	#	typedef ACE_Singleton \<%SN, ACE_SYNCH_RECURSIVE_MUTEX\> Singleton;
  out_indent '	typedef ACE_Singleton <'
  %S |N ', ACE_SYNCH_RECURSIVE_MUTEX> Singleton;'
//	#	friend class ACE_Singleton \<%SN, ACE_SYNCH_RECURSIVE_MUTEX\>;
  out_indent '	friend class ACE_Singleton <'
  %S |N ', ACE_SYNCH_RECURSIVE_MUTEX>;'
//	#public:
  out_indent 'public:'
//	#	static %SN* instance () {
  out_indent '	static '
  %S |N '* instance () {'
//	#		return Singleton::instance();
  out_indent '		return Singleton::instance();'
//	#	}
  out_indent '	}'
//	][[{"<{}{"%CC"="Class"&%CS!=TemplateFunctions}{C}>"!="0"}
 end // if
 if NOT-EMPTY
 begin
  if ( 
   INTEGER VAR l_Counter l_Counter := 0
   for %S%C
   begin
    OBJECT IN %C
    if ( ( %C |C ) %== 'Class' AND 
     ( ( %C |S ) %!= 'TemplateFunctions'  ) ) then
    begin

     ++! l_Counter
    end // if
   end // for C
   l_Counter
   %!= 0 ) then
  begin
   #13#10

//	#//////////////////////////////////////////////////////////////////////////////////////////
   out_indent '//////////////////////////////////////////////////////////////////////////////////////////'
//	#// nested declarations[{"<{}{"%CC"="Class"&%CS!=TemplateFunctions}{C}>"!="0"}
   out_indent '// nested declarations'
   if ( 
    INTEGER VAR l_Counter l_Counter := 0
    for %S%C
    begin
     OBJECT IN %C
     if ( ( %C |C ) %== 'Class' AND 
      ( ( %C |S ) %!= 'TemplateFunctions'  ) ) then
     begin

      ++! l_Counter
     end // if
    end // for C
    l_Counter
    %!= 0 ) then
   begin
    #13#10

//	%f_visibility_spec(%C)%f_set_var(PREV_C,C)]
    [%f] visibility_spec %( %C )% [%f] set_var %( 'PREV_C' %, 'C' )% 
   end // if
//	<{}{"%CC"="Class"&%CS!=TemplateFunctions}\
   INTEGER VAR l_Counter l_Counter := 0
   for %S%C
   begin
    OBJECT IN %C
    if ( ( %C |C ) %== 'Class' AND 
     ( ( %C |S ) %!= 'TemplateFunctions'  ) ) then
    begin
//	[{%f_visibility_spec(%C)!=%f_visibility_spec(%{PREV_C})}#%f_visibility_spec(%C)\n]%CX%f_set_var(PREV_C,C)
     if ( ( [%f] visibility_spec %( %C )% ) %!= ( [%f] visibility_spec %( ( get_global_var ( 'PREV_C' ) ) )% ) ) then
     begin
      out_indent [%f] visibility_spec %( %C )% #13#10 
     end // if
     %C |X [%f] set_var %( 'PREV_C' %, 'C' )% 
//	
     #13#10

//	>]]%f_set_var(SELF,S)%f_set_var(SERV,S)[#//////////////////////////////////////////////////////////////////////////////////////////

     ++! l_Counter
    end // if
   end // for C
  end // if
 end // if
 NOP
 [%f] set_var %( 'SELF' %, 'S' )% [%f] set_var %( 'SERV' %, 'S' )% if NOT-EMPTY
 begin
  out_indent '//////////////////////////////////////////////////////////////////////////////////////////'
//	#// static member methods and data
  out_indent '// static member methods and data'
//	[#public:<{}{%CC=Operation&"%CS"="static"&"%CV"="PublicAccess"}{Sn}[
  if NOT-EMPTY
  begin
   out_indent 'public:'
   INTEGER VAR l_Counter l_Counter := 0
   for %S%Cn
   begin
    OBJECT IN %C
    if ( ( %C |C ) %== 'Operation' AND 
     ( ( %C |S ) %== 'static'  ) AND 
     ( ( %C |V ) %== 'PublicAccess'  ) ) then
    begin
     if NOT-EMPTY
     begin
      #13#10

//	%CX
      %C |X 
//	]>
     end // if
     NOP

     ++! l_Counter
    end // if
   end // for C
//	][#protected:<{}{%CC=Operation&"%CS"="static"&"%CV"="ProtectedAccess"}{Sn}[
  end // if
  NOP
  if NOT-EMPTY
  begin
   out_indent 'protected:'
   INTEGER VAR l_Counter l_Counter := 0
   for %S%Cn
   begin
    OBJECT IN %C
    if ( ( %C |C ) %== 'Operation' AND 
     ( ( %C |S ) %== 'static'  ) AND 
     ( ( %C |V ) %== 'ProtectedAccess'  ) ) then
    begin
     if NOT-EMPTY
     begin
      #13#10

//	%CX
      %C |X 
//	]>
     end // if
     NOP

     ++! l_Counter
    end // if
   end // for C
//	][#private:<{}{%CC=Operation&"%CS"="static"&"%CV"="PrivateAccess"}{Sn}[
  end // if
  NOP
  if NOT-EMPTY
  begin
   out_indent 'private:'
   INTEGER VAR l_Counter l_Counter := 0
   for %S%Cn
   begin
    OBJECT IN %C
    if ( ( %C |C ) %== 'Operation' AND 
     ( ( %C |S ) %== 'static'  ) AND 
     ( ( %C |V ) %== 'PrivateAccess'  ) ) then
    begin
     if NOT-EMPTY
     begin
      #13#10

//	%CX
      %C |X 
//	]><{}{%CC=Attribute&[{%CS=static|%t_is_static_accessor(%C)=true}{false}true]=true}{Sn}[
     end // if
     NOP

     ++! l_Counter
    end // if
   end // for C
   INTEGER VAR l_Counter l_Counter := 0
   for %S%Cn
   begin
    OBJECT IN %C
    if ( ( %C |C ) %== 'Attribute' AND 
     ( if ( ( %C |S ) %== 'static' OR 
      ( ( [%t] is_static_accessor %( %C )% ) %==  true  ) ) then
    begin
      true 
    end // if
    else
    begin
      false 
    end // else
    %==  true  ) ) then
    begin
     if NOT-EMPTY
     begin
      #13#10

//	%CX
      %C |X 
//	]>
     end // if
     NOP

     ++! l_Counter
    end // if
   end // for C
//	]][%f_static_data_accessor(%S)
  end // if
  NOP
 end // if
 NOP
 if NOT-EMPTY
 begin
  [%f] static_data_accessor %( %S )% 
//	]%S%f_ctor_n_dctor_h()\
 end // if
 NOP
 %S %f ctor_n_dctor_h %( )% 
//	[#//////////////////////////////////////////////////////////////////////////////////////////
 if NOT-EMPTY
 begin
  out_indent '//////////////////////////////////////////////////////////////////////////////////////////'
//	#// self methods
  out_indent '// self methods'
//	[%S%f_auto_self_methods_h()
  if NOT-EMPTY
  begin
   %S %f auto_self_methods_h %( )% 
//	][#public:<{}{"%CC"="Operation"&"%Ca"!="abstract"&"%CS"!="static"&"%CS"!="ctor"&"%CV"="PublicAccess"}{Sn}
  end // if
  NOP
  if NOT-EMPTY
  begin
   out_indent 'public:'
   INTEGER VAR l_Counter l_Counter := 0
   for %S%Cn
   begin
    OBJECT IN %C
    if ( ( %C |C ) %== 'Operation' AND 
     ( ( %C |a ) %!= 'abstract'  ) AND 
     ( ( %C |S ) %!= 'static'  ) AND 
     ( ( %C |S ) %!= 'ctor'  ) AND 
     ( ( %C |V ) %== 'PublicAccess'  ) ) then
    begin
     #13#10

//	%CX
     %C |X 
//	>

     ++! l_Counter
    end // if
   end // for C
//	][#protected:<{}{"%CC"="Operation"&"%Ca"!="abstract"&"%CS"!="static"&"%CS"!="ctor"&"%CV"="ProtectedAccess"}{Sn}
  end // if
  NOP
  if NOT-EMPTY
  begin
   out_indent 'protected:'
   INTEGER VAR l_Counter l_Counter := 0
   for %S%Cn
   begin
    OBJECT IN %C
    if ( ( %C |C ) %== 'Operation' AND 
     ( ( %C |a ) %!= 'abstract'  ) AND 
     ( ( %C |S ) %!= 'static'  ) AND 
     ( ( %C |S ) %!= 'ctor'  ) AND 
     ( ( %C |V ) %== 'ProtectedAccess'  ) ) then
    begin
     #13#10

//	%CX
     %C |X 
//	>

     ++! l_Counter
    end // if
   end // for C
//	][#private:<{}{"%CC"="Operation"&"%Ca"!="abstract"&"%CS"!="static"&"%CS"!="ctor"&"%CV"="PrivateAccess"}{Sn}
  end // if
  NOP
  if NOT-EMPTY
  begin
   out_indent 'private:'
   INTEGER VAR l_Counter l_Counter := 0
   for %S%Cn
   begin
    OBJECT IN %C
    if ( ( %C |C ) %== 'Operation' AND 
     ( ( %C |a ) %!= 'abstract'  ) AND 
     ( ( %C |S ) %!= 'static'  ) AND 
     ( ( %C |S ) %!= 'ctor'  ) AND 
     ( ( %C |V ) %== 'PrivateAccess'  ) ) then
    begin
     #13#10

//	%CX
     %C |X 
//	>

     ++! l_Counter
    end // if
   end // for C
//	]][
  end // if
  NOP
 end // if
 NOP
 if NOT-EMPTY
 begin
  #13#10

//	#//////////////////////////////////////////////////////////////////////////////////////////
  out_indent '//////////////////////////////////////////////////////////////////////////////////////////'
//	#// abstarct methods
  out_indent '// abstarct methods'
//	[#public:<{}{"%CC"="Operation"&"%Ca"="abstract"&"%CS"!="static"&"%CS"!="ctor"&"%CV"="PublicAccess"}{Sn}
  if NOT-EMPTY
  begin
   out_indent 'public:'
   INTEGER VAR l_Counter l_Counter := 0
   for %S%Cn
   begin
    OBJECT IN %C
    if ( ( %C |C ) %== 'Operation' AND 
     ( ( %C |a ) %== 'abstract'  ) AND 
     ( ( %C |S ) %!= 'static'  ) AND 
     ( ( %C |S ) %!= 'ctor'  ) AND 
     ( ( %C |V ) %== 'PublicAccess'  ) ) then
    begin
     #13#10

//	%CX
     %C |X 
//	>

     ++! l_Counter
    end // if
   end // for C
//	][#protected:<{}{"%CC"="Operation"&"%Ca"="abstract"&"%CS"!="static"&"%CS"!="ctor"&"%CV"="ProtectedAccess"}{Sn}
  end // if
  NOP
  if NOT-EMPTY
  begin
   out_indent 'protected:'
   INTEGER VAR l_Counter l_Counter := 0
   for %S%Cn
   begin
    OBJECT IN %C
    if ( ( %C |C ) %== 'Operation' AND 
     ( ( %C |a ) %== 'abstract'  ) AND 
     ( ( %C |S ) %!= 'static'  ) AND 
     ( ( %C |S ) %!= 'ctor'  ) AND 
     ( ( %C |V ) %== 'ProtectedAccess'  ) ) then
    begin
     #13#10

//	%CX
     %C |X 
//	>

     ++! l_Counter
    end // if
   end // for C
//	][#private:<{}{"%CC"="Operation"&"%Ca"="abstract"&"%CS"!="static"&"%CS"!="ctor"&"%CV"="PrivateAccess"}{Sn}
  end // if
  NOP
  if NOT-EMPTY
  begin
   out_indent 'private:'
   INTEGER VAR l_Counter l_Counter := 0
   for %S%Cn
   begin
    OBJECT IN %C
    if ( ( %C |C ) %== 'Operation' AND 
     ( ( %C |a ) %== 'abstract'  ) AND 
     ( ( %C |S ) %!= 'static'  ) AND 
     ( ( %C |S ) %!= 'ctor'  ) AND 
     ( ( %C |V ) %== 'PrivateAccess'  ) ) then
    begin
     #13#10

//	%CX
     %C |X 
//	>

     ++! l_Counter
    end // if
   end // for C
//	]][
  end // if
  NOP
 end // if
 NOP
 if NOT-EMPTY
 begin
  #13#10

//	#//////////////////////////////////////////////////////////////////////////////////////////
  out_indent '//////////////////////////////////////////////////////////////////////////////////////////'
//	#// template methods
  out_indent '// template methods'
//	<{}{%CM=TemplateFunctions::Class}%CX
  INTEGER VAR l_Counter l_Counter := 0
  for %S%C
  begin
   OBJECT IN %C
   if ( ( %C |M ) %== 'TemplateFunctions::Class' ) then
   begin
    %C |X 
//	>

    ++! l_Counter
   end // if
  end // for C
//	]%f_dump_cpp_functors_h(%S)[#//////////////////////////////////////////////////////////////////////////////////////////
 end // if
 NOP
 [%f] dump_cpp_functors_h %( %S )% if NOT-EMPTY
 begin
  out_indent '//////////////////////////////////////////////////////////////////////////////////////////'
//	#// self data
  out_indent '// self data'
//	#private:[
  out_indent 'private:'
  if NOT-EMPTY
  begin
   #13#10

//	%S%f_auto_self_data_h()
   %S %f auto_self_data_h %( )% 
//	]<{}{"%CC"="Attribute"&"%CS"!="static"&%t_is_static_accessor(%C)!=true}{Sn}[
  end // if
  NOP
  INTEGER VAR l_Counter l_Counter := 0
  for %S%Cn
  begin
   OBJECT IN %C
   if ( ( %C |C ) %== 'Attribute' AND 
    ( ( %C |S ) %!= 'static'  ) AND 
    ( ( [%t] is_static_accessor %( %C )% ) %!=  true  ) ) then
   begin
    if NOT-EMPTY
    begin
     #13#10

//	%CX
     %C |X 
//	]>][#//////////////////////////////////////////////////////////////////////////////////////////
    end // if
    NOP

    ++! l_Counter
   end // if
  end // for C
 end // if
 NOP
 if NOT-EMPTY
 begin
  out_indent '//////////////////////////////////////////////////////////////////////////////////////////'
//	#// oneway methods impl
  out_indent '// oneway methods impl'
//	#private:<{}{"%CC"="Operation"&"%CS"="oneway"|"%CS"="oneway,chg"}{Sn}
  out_indent 'private:'
  INTEGER VAR l_Counter l_Counter := 0
  for %S%Cn
  begin
   OBJECT IN %C
   if ( ( %C |C ) %== 'Operation' AND 
    ( ( %C |S ) %== 'oneway'  ) OR 
    ( ( %C |S ) %== 'oneway,chg'  ) ) then
   begin
    #13#10

//	%f_servant_cpp_oneway_operation_thr_h(%C)
    [%f] servant_cpp_oneway_operation_thr_h %( %C )% 
//	>

    ++! l_Counter
   end // if
  end // for C
//	#protected:<{}{"%CC"="Operation"&"%CS"="oneway"|"%CS"="oneway,chg"}{Sn}
  out_indent 'protected:'
  INTEGER VAR l_Counter l_Counter := 0
  for %S%Cn
  begin
   OBJECT IN %C
   if ( ( %C |C ) %== 'Operation' AND 
    ( ( %C |S ) %== 'oneway'  ) OR 
    ( ( %C |S ) %== 'oneway,chg'  ) ) then
   begin
    #13#10

//	%f_servant_cpp_oneway_operation_impl_h(%C)
    [%f] servant_cpp_oneway_operation_impl_h %( %C )% 
//	>

    ++! l_Counter
   end // if
  end // for C
//	]%f_self_data_accessor(%S)\
 end // if
 NOP
 [%f] self_data_accessor %( %S )% 
//	[%f_dump_cpp_derrived_impl_h(%S)
 if NOT-EMPTY
 begin
  [%f] dump_cpp_derrived_impl_h %( %S )% 
//	][{%S{need UC}=true}
 end // if
 NOP
 if ( ( %S get_up ( 'need UC' ) ) %==  true ) then
 begin
  #13#10

//	#%U[
  out_indent %Usersection (

  )
  (
   #13#10

//	#]
   out_indent 
  ) // Usersection
 //	]#}; // class %SN[{%t_nested_scope_def(%P)=false}{[
 end // if
 out_indent '}; // class '
 %S |N if ( ( [%t] nested_scope_def %( %P )% ) %==  false ) then
 begin
  #13#10

//	
  #13#10

//	%Sp[
  %S |p if NOT-EMPTY
  begin
   #13#10

//	\#include %f_dump_include_path(%f_with_gen_id(i.h,%SL),%S)]
   '#include '
   [%f] dump_include_path %( [%f] with_gen_id %( 'i.h' %, %S |L )% %, %S )% 
  end // if
  NOP
//	%f_h_footer(%S)
  [%f] h_footer %( %S )% 
//	]
 end // if
 else
 begin
  if NOT-EMPTY
  begin
   #13#10

//	#%S%f_close_ifdef()]}
   out_indent %S %f close_ifdef %( )% 
  end // if
  NOP
 end // else
//P false
//#UC END# *47022C88029Ffor4717284C01C5*
; // h


// реализация абстрактного стереотипа C++ интерфейсы и реализация::MDAGenerator
// генератор inline файлов реализации C++ (.i.h)
//+ i.h
<<generator>> i.h OBJECT IN %S
//#UC START# *47022CCF00EAfor4717284C01C5*
//P
//S class %SN;
//O [{%f_need_inline_file(%S)=true}%SN.i.h]
//	%f_output_constraint(%S)\
 [%f] output_constraint %( %S )% 
//	[{%f_need_inline_file(%S)=true}\
 if ( ( [%f] need_inline_file %( %S )% ) %==  true ) then
 begin
//	%f_header(%S)
  [%f] header %( %S )% 
//	
  #13#10

//	%f_simple_class_impl_body(%S)
  [%f] simple_class_impl_body %( %S )% 
//	%f_footer(%S)
  [%f] footer %( %S )% 
//	]
 end // if
//#UC END# *47022CCF00EAfor4717284C01C5*
; // i.h


// реализация абстрактного стереотипа Java::MDAGenerator
// генератор реализации фабрик интерфейсов на java (.java)
//+ fctr.java
<<generator>> fctr.java OBJECT IN %S
//#UC START# *470321C1038Afor4717284C01C5*
//#UC END# *470321C1038Afor4717284C01C5*
; // fctr.java


// реализация абстрактного стереотипа Java::MDAGenerator
// генератор классов, интерфейсов на java (.java)
//+ java
<<generator>> java OBJECT IN %S
//#UC START# *470321950119for4717284C01C5*
//O [{%t_nested_scope_def(%P)=false&%f_is_server_type(%S)=false|%SM=State::Class}%SN.java]
//	%f_output_constraint(%S)\
 [%f] output_constraint %( %S )% 
//	[{%f_is_server_type(%S)=false}%f_set_var(SELF,S)%f_set_var(SERV,S)[{%t_nested_scope_def(%P)=false|%SM=State::Class}\
 if ( ( [%f] is_server_type %( %S )% ) %==  false ) then
 begin
  [%f] set_var %( 'SELF' %, 'S' )% [%f] set_var %( 'SERV' %, 'S' )% if ( ( [%t] nested_scope_def %( %P )% ) %==  false OR 
    ( ( %S |M ) %== 'State::Class'  ) ) then
  begin
//	%f_header(%S)
   [%f] header %( %S )% 
//	%f_set_var(SELF,S)%f_set_var(SERVANT,S)package %f_dump_java_package_ex(%S);
   [%f] set_var %( 'SELF' %, 'S' )% [%f] set_var %( 'SERVANT' %, 'S' )% 'package '
   [%f] dump_java_package_ex %( %S )% ';'
//	
   #13#10

//	%f_dump_std_java_imports(%S)
   [%f] dump_std_java_imports %( %S )% 
//	[%f_java_dump_import_block(%S)
   if NOT-EMPTY
   begin
    [%f] java_dump_import_block %( %S )% 
//	]%f_includes_by_contents_java(%S)[%S%f_java_servant_import_self(%S)
   end // if
   NOP
   [%f] includes_by_contents_java %( %S )% if NOT-EMPTY
   begin
    %S %f java_servant_import_self %( %S )% 
//	]
   end // if
   NOP
//	%U[{_CUSTOM_IMPORT}
   %Usersection (
    '_CUSTOM_IMPORT' 
   )
   (
    #13#10

//	]

   ) // Usersection
 //	
   #13#10

//	%U[{_CUSTOM_CLASS_DEFINITION}
   %Usersection (
    '_CUSTOM_CLASS_DEFINITION' 
   )
   (
    #13#10

//	]

   ) // Usersection
 //	]#%t_visibility(%S,"%XU")[{%t_nested_scope_def(%P)=false&%f_is_server_type(%S)=false|%SM=State::Class}{static }]%t_abstract_type(%S)class %SN%S%f_java_base_class_decl(%S) {
  end // if
  out_indent [%t] visibility %( %S %, %X |U )% if ( ( [%t] nested_scope_def %( %P )% ) %==  false AND 
    ( ( [%f] is_server_type %( %S )% ) %==  false  ) OR 
    ( ( %S |M ) %== 'State::Class'  ) ) then
  begin
  end // if
  else
  begin
   'static ' 
  end // else
  [%t] abstract_type %( %S )% 'class '
  %S |N %S %f java_base_class_decl %( %S )% ' {'
//	[
  if NOT-EMPTY
  begin
   #13#10

//	//////////////////////////////////////////////////////////////////////////////////////////
   '//////////////////////////////////////////////////////////////////////////////////////////'
//	// nested declarations
   '// nested declarations'
//	<{}{"%CC"="Class"&%CS!=TemplateFunctions}[
   INTEGER VAR l_Counter l_Counter := 0
   for %S%C
   begin
    OBJECT IN %C
    if ( ( %C |C ) %== 'Class' AND 
     ( ( %C |S ) %!= 'TemplateFunctions'  ) ) then
    begin
     if NOT-EMPTY
     begin
      #13#10

//	%CX
      %C |X 
//	]>]%f_set_var(SELF,S)%f_set_var(SERV,S)%f_set_var(SERVANT,S)[#	// static member methods and data
     end // if
     NOP

     ++! l_Counter
    end // if
   end // for C
  end // if
  NOP
  [%f] set_var %( 'SELF' %, 'S' )% [%f] set_var %( 'SERV' %, 'S' )% [%f] set_var %( 'SERVANT' %, 'S' )% if NOT-EMPTY
  begin
   out_indent '	// static member methods and data'
//	[<{}{%CC=Operation&"%CS"="static"&"%CV"="PublicAccess"}{Sn}[
   if NOT-EMPTY
   begin
    INTEGER VAR l_Counter l_Counter := 0
    for %S%Cn
    begin
     OBJECT IN %C
     if ( ( %C |C ) %== 'Operation' AND 
      ( ( %C |S ) %== 'static'  ) AND 
      ( ( %C |V ) %== 'PublicAccess'  ) ) then
     begin
      if NOT-EMPTY
      begin
       #13#10

//	%CX
       %C |X 
//	]>][<{}{%CC=Operation&"%CS"="static"&"%CV"="ProtectedAccess"}{Sn}[
      end // if
      NOP

      ++! l_Counter
     end // if
    end // for C
   end // if
   NOP
   if NOT-EMPTY
   begin
    INTEGER VAR l_Counter l_Counter := 0
    for %S%Cn
    begin
     OBJECT IN %C
     if ( ( %C |C ) %== 'Operation' AND 
      ( ( %C |S ) %== 'static'  ) AND 
      ( ( %C |V ) %== 'ProtectedAccess'  ) ) then
     begin
      if NOT-EMPTY
      begin
       #13#10

//	%CX
       %C |X 
//	]>][<{}{%CC=Operation&"%CS"="static"&"%CV"="PrivateAccess"}{Sn}[
      end // if
      NOP

      ++! l_Counter
     end // if
    end // for C
   end // if
   NOP
   if NOT-EMPTY
   begin
    INTEGER VAR l_Counter l_Counter := 0
    for %S%Cn
    begin
     OBJECT IN %C
     if ( ( %C |C ) %== 'Operation' AND 
      ( ( %C |S ) %== 'static'  ) AND 
      ( ( %C |V ) %== 'PrivateAccess'  ) ) then
     begin
      if NOT-EMPTY
      begin
       #13#10

//	%CX
       %C |X 
//	]>][<{}{%CC=Attribute&[{%CS=static|%t_is_static_accessor(%C)=true}{false}true]=true}{Sn}[
      end // if
      NOP

      ++! l_Counter
     end // if
    end // for C
   end // if
   NOP
   if NOT-EMPTY
   begin
    INTEGER VAR l_Counter l_Counter := 0
    for %S%Cn
    begin
     OBJECT IN %C
     if ( ( %C |C ) %== 'Attribute' AND 
      ( if ( ( %C |S ) %== 'static' OR 
       ( ( [%t] is_static_accessor %( %C )% ) %==  true  ) ) then
     begin
       true 
     end // if
     else
     begin
       false 
     end // else
     %==  true  ) ) then
     begin
      if NOT-EMPTY
      begin
       #13#10

//	%CX
       %C |X 
//	]>]]%f_static_data_accessor(%S)[#	//////////////////////////////////////////////////////////////////////////////////////////
      end // if
      NOP

      ++! l_Counter
     end // if
    end // for C
   end // if
   NOP
  end // if
  NOP
  [%f] static_data_accessor %( %S )% if NOT-EMPTY
  begin
   out_indent '	//////////////////////////////////////////////////////////////////////////////////////////'
//	#	// constructors
   out_indent '	// constructors'
//	[{%f_count_ctor(%S)!=0}{[{%f_need_empty_ctor(%S)=true}%f_dump_empty_ctor_java(%S)\n]}
   if ( ( [%f] count_ctor %( %S )% ) %!= 0 ) then
   begin
    #13#10

//	<{}{"%CC"="Operation"&"%CS"="ctor"}{Sn}%CX
    INTEGER VAR l_Counter l_Counter := 0
    for %S%Cn
    begin
     OBJECT IN %C
     if ( ( %C |C ) %== 'Operation' AND 
      ( ( %C |S ) %== 'ctor'  ) ) then
     begin
      %C |X 
//	
      #13#10

//	>][#	%f_dump_cpp_servant_derrived_constr_java(%S)]

      ++! l_Counter
     end // if
    end // for C
   end // if
   else
   begin
    if ( ( [%f] need_empty_ctor %( %S )% ) %==  true ) then
    begin
     [%f] dump_empty_ctor_java %( %S )% #13#10 
    end // if
   end // else
   if NOT-EMPTY
   begin
    out_indent '	'
    [%f] dump_cpp_servant_derrived_constr_java %( %S )% 
   end // if
   NOP
//	][#	//////////////////////////////////////////////////////////////////////////////////////////
  end // if
  NOP
  if NOT-EMPTY
  begin
   out_indent '	//////////////////////////////////////////////////////////////////////////////////////////'
//	#	// self data
   out_indent '	// self data'
//	<{\n\n}{"%CC"="Attribute"&%CS!=static&%t_is_static_accessor(%C)!=true&%f_can_dump_attr(%C%T)=true}%CX>
   INTEGER VAR l_Counter l_Counter := 0
   for %S%C
   begin
    OBJECT IN %C
    if ( ( %C |C ) %== 'Attribute' AND 
     ( ( %C |S ) %!= 'static'  ) AND 
     ( ( [%t] is_static_accessor %( %C )% ) %!=  true  ) AND 
     ( ( [%f] can_dump_attr %( %C ->T  )% ) %==  true  ) ) then
    begin
     if ( l_Counter >0 ) then ( #13#10#13#10 )
     %C |X 
     ++! l_Counter
    end // if
   end // for C
//	]%f_self_data_accessor(%S)[#	//////////////////////////////////////////////////////////////////////////////////////////
  end // if
  NOP
  [%f] self_data_accessor %( %S )% if NOT-EMPTY
  begin
   out_indent '	//////////////////////////////////////////////////////////////////////////////////////////'
//	#	// self methods
   out_indent '	// self methods'
//	<{}{"%CC"="Operation"&"%CS"!="factory"&"%CS"!="static"&"%CS"!="ctor"}{Sp}
   INTEGER VAR l_Counter l_Counter := 0
   for %S%Cp
   begin
    OBJECT IN %C
    if ( ( %C |C ) %== 'Operation' AND 
     ( ( %C |S ) %!= 'factory'  ) AND 
     ( ( %C |S ) %!= 'static'  ) AND 
     ( ( %C |S ) %!= 'ctor'  ) ) then
    begin
     #13#10

//	%CX
     %C |X 
//	>][%f_dump_java_derrived_impl(%S)

     ++! l_Counter
    end // if
   end // for C
  end // if
  NOP
  if NOT-EMPTY
  begin
   [%f] dump_java_derrived_impl %( %S )% 
//	][#	%S%f_servant_content_java(%S)
  end // if
  NOP
  if NOT-EMPTY
  begin
   out_indent '	'
   %S %f servant_content_java %( %S )% 
//	]%f_shift_intend(1)%f_dump_servant_sm_java(%S)%f_shift_intend(-1)\
  end // if
  NOP
  [%f] shift_intend %( 1 )% [%f] dump_servant_sm_java %( %S )% [%f] shift_intend %( -1 )% 
//	#	%U[{_CUSTOM_METHODS_AND_DATA}
  out_indent '	'
  %Usersection (
   '_CUSTOM_METHODS_AND_DATA' 
  )
  (
   #13#10

//	#	]
   out_indent '	' 
  ) // Usersection
 //	
  #13#10

//	#} // class %SN][{%f_is_server_type(%S)=false}\
  out_indent '} // class '
  %S |N 
 end // if
 if ( ( [%f] is_server_type %( %S )% ) %==  false ) then
 begin
//	[{%t_nested_scope_def(%P)=false}
  if ( ( [%t] nested_scope_def %( %P )% ) %==  false ) then
  begin
   #13#10

//	%f_footer(%S)
   [%f] footer %( %S )% 
//	]]
  end // if
 end // if
//#UC END# *470321950119for4717284C01C5*
; // java



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

end. // <<AbstractClass>>

