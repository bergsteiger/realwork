////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/CommonTemplates/CommonLang/ImplementationTypes/UtilityClass.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$Templates::CommonTemplates::CommonLang::ImplementationTypes::UtilityClass
//
// Утилитный класс
// ---
// Набор статических методов. По сути класс не имеющий состояния.
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//: UtilityClass::Class
implementation @ <<UtilityClass>>
//? Утилитный класс
//? Набор статических методов. По сути класс не имеющий состояния.
//= AbstractClass::Class
//= Генерация JavaScript::MDAGenerator

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры стереотипа
//v +#-
// - типы видимости
//Y code_utility_class.gif
//L code_utility_class
// Параметры визуализации
//$ C 255,215,215
//$ l 255,10,10
//$ f 255,10,10

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

//%f _st_space_key
: st_space_key OBJECT IN %S
//	MDP
 'MDP'

// Метод для определения дополнительных условий генерации определения методов на серванте.
// Перекрывается в серванте сущности
//%f _additional_condition
; // st_space_key

: additional_condition OBJECT IN %S
//#UC START# *49B8FE48031Afor471352960232*
//	true
 true
//#UC END# *49B8FE48031Afor471352960232*
; // additional_condition


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
//%t _constraint
<<transformator>> constraint OBJECT IN %S
//#UC START# *4704C0E30186for471352960232*
//c                              {}
//r {"%Rx"="true"}: {%SS cant realize any other class or interfaces}
//r {"<{}{"%GM"!="UtilityClass::Class"}{C%G}>"!="0"}: {%SS can generalize only other %SS}
//r {"%S{singleton}"="true"}: {%SS can't have any instances (cant't be Singleton)}
//r {"%Sa"="inline"&"%Gx"="true"}: {inline Class can't have base class}
//r {"%Sa"="inline"&"%Zx"="true"}: {inline Class can't be used as base class}
//r {%ax=false&<{}{%P{Full MDP}=true}{C}>!=0&<{}{%a#f_IsUseCase()=true}{C}>=0}: {%SS ни кем (включая прецеденты) не используется}
//#UC END# *4704C0E30186for471352960232*
; // constraint


// перекрытие базового стереотипа AbstractClass::Class
// выводит список наследования
//%f _base_class_decl
: base_class_decl OBJECT IN %S
//#UC START# *471728C103A9for471352960232*
//	[:
 if NOT-EMPTY
 begin
  ':'
//		<{\n#	, }[{%S{non virtual base}!=true}virtual ]public %f_type(%R)>[{"%Rx"="true"}\n\t, ]<{\n	, }[{%S{non virtual base}!=true}virtual ]public %f_type(%G)>
  '	'
  INTEGER VAR l_Counter l_Counter := 0
  for %S%R
  begin
   OBJECT IN %R
   if true then
   begin
    if ( l_Counter >0 ) then ( #13#10
    out_indent '	, ' )
    if ( ( %S get_up ( 'non virtual base' ) ) %!=  true ) then
    begin
     'virtual ' 
    end // if
    'public '
    [%f] type %( %R )% 
    ++! l_Counter
   end // if
  end // for R
  if ( ( %R |x ) %== true ) then
  begin
   #13#10#9', ' 
  end // if
  INTEGER VAR l_Counter l_Counter := 0
  for %S%G
  begin
   OBJECT IN %G
   if true then
   begin
    if ( l_Counter >0 ) then ( #13#10'	, ' )
    if ( ( %S get_up ( 'non virtual base' ) ) %!=  true ) then
    begin
     'virtual ' 
    end // if
    'public '
    [%f] type %( %G )% 
    ++! l_Counter
   end // if
  end // for G
//	]
 end // if
 NOP
//#UC END# *471728C103A9for471352960232*
; // base_class_decl


// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Реализация на Delphi(.pas)
//+ impl.pas
<<generator>> impl.pas OBJECT IN %S
//R  
//#UC START# *470F15B800CBfor471352960232*
//#UC END# *470F15B800CBfor471352960232*
; // impl.pas


// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Родные Delphi интерфейсы (.pas)
//+ intf.pas
<<generator>> intf.pas OBJECT IN %S
//R  
//#UC START# *470F1571031Cfor471352960232*
//#UC END# *470F1571031Cfor471352960232*
; // intf.pas


// реализация абстрактного стереотипа Генерация JavaScript::MDAGenerator
// генератор JavaScript
//+ js
<<generator>> js OBJECT IN %S
//#UC START# *477395290327for471352960232*
//#UC END# *477395290327for471352960232*
; // js


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Вложенные стереотипы

//: UtilityClass::Class::Attribute
end. // <<UtilityClass>>

implementation @ :: <<UtilityClass>> <<Attribute>> ;
//? Статический атрибут
//= ClassBase::Class::static::Attribute

// Параметры стереотипа
//v -+#
// - типы видимости
//A const|ref|const,ref
// - стереотипы "цели" (типа/результата)
//l arl
// - возможные типы связи атрибута

// Функции стереотипа
//%f _st_space_key
: st_space_key OBJECT IN %S
//	MDP
 'MDP'


//: UtilityClass::Class::Operation
; // st_space_key

end. // :: <<UtilityClass>> <<Attribute>> ;

implementation @ :: <<UtilityClass>> <<Operation>> ;
//? Операция
//= ClassBase::Class::static::Operation

// Функции стереотипа
//%f _st_space_key
: st_space_key OBJECT IN %S
//	MDP
 'MDP'


// Вложенные стереотипы
//: UtilityClass::Class::Operation::Parameter
; // st_space_key

end. // :: <<UtilityClass>> <<Operation>> ;

implementation @ :: <<UtilityClass>> <<Operation>> ;
//? параметр
//= ClassBase::Class::Operation::Parameter

// Параметры стереотипа
//Y code_param.gif
//L code_param

// Функции стереотипа
//%f _st_space_key
: st_space_key OBJECT IN %S
//	MDP
 'MDP'



//: UtilityClass::Class::Parameter
; // st_space_key

end. // :: <<UtilityClass>> <<Operation>> ;

implementation @ :: <<UtilityClass>> <<Parameter>> ;
//? Шаблонный параметр
//= ClassBase::Class::Parameter

// Параметры стереотипа
//Y code_param.gif
//L code_param

// Функции стереотипа
//%f _st_space_key
: st_space_key OBJECT IN %S
//	MDP
 'MDP'


//: UtilityClass::Class::uses::ClassDependency
; // st_space_key

end. // :: <<UtilityClass>> <<Parameter>> ;

implementation @ :: <<UtilityClass>> <<uses>> ;
//? Использование
//? Определяет что реализация утилитного набора (источник) использует указанный объект (цель) каким-либо образом. НА основе данной связи будет сгенерированы пути включения файлов используемого объекта.
//= UsesContainer::Class::uses::ClassDependency

// Параметры стереотипа
//Y code_dep_uses.gif
//L code_dep_uses

// Генераторы
// Генерация модели в MDKnow
//+ wiki
<<generator>> wiki OBJECT IN %S
//#UC START# *46E6D4BB0339for478328E60019*
//#UC END# *46E6D4BB0339for478328E60019*
; // wiki


// генератор заголовочных файлов C++ (.h)
//+ h
<<generator>> h OBJECT IN %S
//#UC START# *47022C88029Ffor478328E60019*
//#UC END# *47022C88029Ffor478328E60019*
; // h


// генератор файлов реализации C++ (.cpp)
//+ cpp
<<generator>> cpp OBJECT IN %S
//#UC START# *47022CB8034Bfor478328E60019*
//#UC END# *47022CB8034Bfor478328E60019*
; // cpp


// генератор inline файлов реализации C++ (.i.h)
//+ i.h
<<generator>> i.h OBJECT IN %S
//#UC START# *47022CCF00EAfor478328E60019*
//#UC END# *47022CCF00EAfor478328E60019*
; // i.h


// генератор классов, интерфейсов на java (.java)
//+ java
<<generator>> java OBJECT IN %S
//#UC START# *470321950119for478328E60019*
//#UC END# *470321950119for478328E60019*
; // java


// генератор реализации фабрик интерфейсов на java (.java)
//+ fctr.java
<<generator>> fctr.java OBJECT IN %S
//#UC START# *470321C1038Afor478328E60019*
//#UC END# *470321C1038Afor478328E60019*
; // fctr.java


// Родные Delphi интерфейсы (.pas)
//+ intf.pas
<<generator>> intf.pas OBJECT IN %S
//R  
//#UC START# *470F1571031Cfor478328E60019*
//#UC END# *470F1571031Cfor478328E60019*
; // intf.pas


// Реализация на Delphi(.pas)
//+ impl.pas
<<generator>> impl.pas OBJECT IN %S
//R  
//#UC START# *470F15B800CBfor478328E60019*
//#UC END# *470F15B800CBfor478328E60019*
; // impl.pas


// Функции стереотипа
//%f _st_space_key
: st_space_key OBJECT IN %S
//	MDP
 'MDP'


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
//%t _constraint
; // st_space_key

<<transformator>> constraint OBJECT IN %S
//#UC START# *4704C0E30186for478328E60019*
//c	{}
//r {""=""}: {}
//#UC END# *4704C0E30186for478328E60019*
; // constraint


// реализация абстрактного стереотипа Документация::MDAGenerator
// вывод описание авто-генерируемых методов в wiki
//%f _wiki_up_add_gen
: wiki_up_add_gen OBJECT IN %S
//#UC START# *470484D50138for478328E60019*
//#UC END# *470484D50138for478328E60019*
; // wiki_up_add_gen


//: UtilityClass::Class::friend::ClassDependency
end. // :: <<UtilityClass>> <<uses>> ;

implementation @ :: <<UtilityClass>> <<friend>> ;
//? Зависимость
//? Определяет что интерфейсная часть утилитного набора (источник) зависит от указанного объект (цель) каким-либо образом. НА основе данной связи будет сгенерированы пути включения файлов используемого объекта.
//= ClassBase::Class::friend::ClassDependency

// Генераторы
// Генерация модели в MDKnow
//+ wiki
<<generator>> wiki OBJECT IN %S
//#UC START# *46E6D4BB0339for478328E8015D*
//#UC END# *46E6D4BB0339for478328E8015D*
; // wiki


// генератор заголовочных файлов C++ (.h)
//+ h
<<generator>> h OBJECT IN %S
//#UC START# *47022C88029Ffor478328E8015D*
//#UC END# *47022C88029Ffor478328E8015D*
; // h


// генератор файлов реализации C++ (.cpp)
//+ cpp
<<generator>> cpp OBJECT IN %S
//#UC START# *47022CB8034Bfor478328E8015D*
//#UC END# *47022CB8034Bfor478328E8015D*
; // cpp


// генератор inline файлов реализации C++ (.i.h)
//+ i.h
<<generator>> i.h OBJECT IN %S
//#UC START# *47022CCF00EAfor478328E8015D*
//#UC END# *47022CCF00EAfor478328E8015D*
; // i.h


// генератор классов, интерфейсов на java (.java)
//+ java
<<generator>> java OBJECT IN %S
//#UC START# *470321950119for478328E8015D*
//#UC END# *470321950119for478328E8015D*
; // java


// генератор реализации фабрик интерфейсов на java (.java)
//+ fctr.java
<<generator>> fctr.java OBJECT IN %S
//#UC START# *470321C1038Afor478328E8015D*
//#UC END# *470321C1038Afor478328E8015D*
; // fctr.java


// Родные Delphi интерфейсы (.pas)
//+ intf.pas
<<generator>> intf.pas OBJECT IN %S
//R  
//#UC START# *470F1571031Cfor478328E8015D*
//#UC END# *470F1571031Cfor478328E8015D*
; // intf.pas


// Реализация на Delphi(.pas)
//+ impl.pas
<<generator>> impl.pas OBJECT IN %S
//R  
//#UC START# *470F15B800CBfor478328E8015D*
//#UC END# *470F15B800CBfor478328E8015D*
; // impl.pas


// Функции стереотипа
//%f _st_space_key
: st_space_key OBJECT IN %S
//	MDP
 'MDP'


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
//%t _constraint
; // st_space_key

<<transformator>> constraint OBJECT IN %S
//#UC START# *4704C0E30186for478328E8015D*
//c	{}
//r {""=""}: {}
//#UC END# *4704C0E30186for478328E8015D*
; // constraint


// реализация абстрактного стереотипа Документация::MDAGenerator
// вывод описание авто-генерируемых методов в wiki
//%f _wiki_up_add_gen
: wiki_up_add_gen OBJECT IN %S
//#UC START# *470484D50138for478328E8015D*
//#UC END# *470484D50138for478328E8015D*
; // wiki_up_add_gen



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

end. // :: <<UtilityClass>> <<friend>> ;

