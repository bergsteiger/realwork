////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/CommonTemplates/CommonLang/InterfacesMetamodel/Interface.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$Templates::CommonTemplates::CommonLang::InterfacesMetamodel::Interface
//
// Интерфейс
// ---
// Определяет простой интерфейс, с поддержкой фреймворка фабрик.
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//: Interface::Class
implementation @ <<Interface>>
//? Интерфейс
//? Определяет простой интерфейс, с поддержкой фреймворка фабрик.
//> FactoryMemory::Class

//= AbstractFacet::Class
//= AbstractInterface::Class

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры стереотипа
//a raf
// - тип абстракции
//Y code_interface.gif
//L code_interface
// Параметры визуализации
//$ C 215,215,255
//$ l 10,10,255
//$ f 10,10,255

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Пользовательские свойства

//p author:s ? автор
//p debug log:b=false ? включает генерацию вывода в лог обращений ко всем методам реализации интерфейса
//p need UC:b=false ? явно включает генерацию дополнительных секций Юзер-Кода
//p TODO:s ? напоминалка что-то сделать
//p single impl:b=false ? Устанавливает ограничение на возможное количество реализаций интерфейса, Если значение = true, то реализация может быть только одна

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

//%f _st_space_key
: st_space_key OBJECT IN %S
//	MDP
 'MDP'

//%f _wiki_up_print
; // st_space_key

: wiki_up_print OBJECT IN %S
//	%S%[AbstractFacet::Class]f_wiki_up_print()[{"%S{author}"!="%S{!author}"}%f_up_prefix(%S) *author* = *%S{author}* - автор
 call-inherited:: 'AbstractFacet' wiki_up_print %( )%
 if ( ( %S get_up ( 'author' ) ) %!= ( %S get_up_def ( 'author' ) ) ) then
 begin
  [%f] up_prefix %( %S )% ' *author* = *'
  %S get_up ( 'author' ) '* - автор'
//	][{"%S{debug log}"!="%S{!debug log}"}%f_up_prefix(%S) *debug log* = *%S{debug log}* - включает генерацию вывода в лог обращений ко всем методам реализации интерфейса
 end // if
 if ( ( %S get_up ( 'debug log' ) ) %!= ( %S get_up_def ( 'debug log' ) ) ) then
 begin
  [%f] up_prefix %( %S )% ' *debug log* = *'
  %S get_up ( 'debug log' ) '* - включает генерацию вывода в лог обращений ко всем методам реализации интерфейса'
//	][{"%S{need UC}"!="%S{!need UC}"}%f_up_prefix(%S) *need UC* = *%S{need UC}* - явно включает генерацию дополнительных секций Юзер-Кода
 end // if
 if ( ( %S get_up ( 'need UC' ) ) %!= ( %S get_up_def ( 'need UC' ) ) ) then
 begin
  [%f] up_prefix %( %S )% ' *need UC* = *'
  %S get_up ( 'need UC' ) '* - явно включает генерацию дополнительных секций Юзер-Кода'
//	][{"%S{TODO}"!="%S{!TODO}"}%f_up_prefix(%S) *TODO* = *%S{TODO}* - напоминалка что-то сделать
 end // if
 if ( ( %S get_up ( 'TODO' ) ) %!= ( %S get_up_def ( 'TODO' ) ) ) then
 begin
  [%f] up_prefix %( %S )% ' *TODO* = *'
  %S get_up ( 'TODO' ) '* - напоминалка что-то сделать'
//	][{"%S{single impl}"!="%S{!single impl}"}%f_up_prefix(%S) *single impl* = *%S{single impl}* - Устанавливает ограничение на возможное количество реализаций интерфейса, Если значение = true, то реализация может быть только одна
 end // if
 if ( ( %S get_up ( 'single impl' ) ) %!= ( %S get_up_def ( 'single impl' ) ) ) then
 begin
  [%f] up_prefix %( %S )% ' *single impl* = *'
  %S get_up ( 'single impl' ) '* - Устанавливает ограничение на возможное количество реализаций интерфейса, Если значение = true, то реализация может быть только одна'
//	]
 end // if


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Определяет, что элемент может реализовываться классом
//%f _ClassImplementable
; // wiki_up_print

: ClassImplementable OBJECT IN %S
//#UC START# *49551CA202CFfor470F512D003E*
//	true
 true
//#UC END# *49551CA202CFfor470F512D003E*
; // ClassImplementable


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Определяет, что элемент является интерфейсом
//%f _IsInterface
: IsInterface OBJECT IN %S
//#UC START# *49809333028Cfor470F512D003E*
//	true
 true
//#UC END# *49809333028Cfor470F512D003E*
; // IsInterface


// перекрытие базового стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
//%t _constraint
<<transformator>> constraint OBJECT IN %S
//#UC START# *4704C0E30186for470F512D003E*
//c                                                                               {}
//r {<{}{"%RN"!="state machine"&"%RM"!="UMLPrimitive::Class"&%t_check_type(%R,"Facet::Class")=false&%t_check_type(%R,"ServerFacet::Class")=false&%t_check_type(%R,"StateMachine::Class")=false&%t_check_type(%R,"%SM")=false}{%RC}>!=0}:                           {%SS can realize only Facet, ServerFacet or StateMachine}
//r {%Rx=true&<{}{}{%RC}>!=1}:                                                                                                                                                                                                                                     {%SS can't realize more than one elem}
//r {%Sa!=abstract&<{}{%P{Full MDP}=true}{C}>!=0&<{}{%a#f_IsUseCase()=true}{C}>=0}:                                                                                                                                                                                          {%SS не используется ни в одном прецеденте}
//r {%Sa!=abstract&<{}{"%RN"="state machine"&"%RM"="UMLPrimitive::Class"}{%RC}>!=0}:                                                                                                                                                                               {Только абстрактный интерфейс может реализовывать примитив "state machine"}
//r {"%f_check_local_int(%S)"!=""}:                                                                                                                                                                                                                                {В одном пакете реализации на один конкретный интерфейс может существовать только один локальный интерфейс доопределяющий его}
//r {%Sa=abstract&<{}{%SM=%ZM}{C}>=0&<{}{%SM=%LM}{C}>=0&<{}{%PN=shared&%PS=Project}{%P}>=0}:                                                                                                                                                                       {Абстрактный %SS должен иметь наследников}
//r {""=""}:                                                                                                                                                                                                                                                       {%S%t_common_interface_constraint()}

//общие констрэйнты для Interface и LocalInterface
//%t _common_interface_constraint
; // constraint

<<transformator>> common_interface_constraint OBJECT IN %S
//c                                                                                                                                           {}
//r {<{}{%t_check_type(%G,"Facet::Class")=false&%t_check_type(%G,"ServerFacet::Class")=false&%t_check_type(%G,"%SM")=false}{%GC}>!=0}:        {%SS может наследоваться только от других %SS, или от Facet, или от ServerFacet}
//r {<{}{%f_is_factory(%C)&%C%TS=FactoryMemory&%f_is_it_cached(%C)=false}{%CC}>!=0}:                                                          {Только кэшированные фабрики могут использовать общий кэш}
//r {%Sa!=abstract&<{}{"%RN"="state machine"&"%RM"="UMLPrimitive::Class"}{%RC}>!=0}:                                                          {Только абстрактный %SS может реализовывать примитив "state machine"}
//r {<{}{%aS=friend&%aC=Dependency&%a%PS!=%SS}{%aC}>!=0}:                                                                                     {%SS может быть другом только %SS}
//r {<{}{%CV!=PublicAccess}{%CC}>!=0&<{}{%aS=friend&%aC=Dependency}{%aC}>=0}:                                                                 {%SS определяющий не публичные методы/фабрики должен иметь хотя бы одного "друга"}
//r {<{}{%CC=Operation&%CS=multi factory}{%CC}>!=0&%f_factory_switch_count(%S)=0}:                                                            {%SS определяющий мульти-фабрику должен определять селектор !%f_factory_switch_count(%S)!}
//r {%f_number_cmp("%f_factory_switch_count(%S)","1","\>")=1}:                                                                                {%SS может определять только один селектор}
//r {%f_has_factory_methods(%S)=false&%Sa!=abstract&<{}{%LS=LocalInterface}{%LC}>=0}:                                                         {Неабстрактный %SS должен определять хотя бы одну фабрику}
//r {%S{single impl}=true&%Lx=true&<{}{}{%LC}>!=1}:                                                                                           {На данный интерфейс установленно ограничение количества возможных реализаций = 1}

//f _factory_switch_count
; // common_interface_constraint

end. // <<Interface>>

: factory_switch_count OBJECT IN %S
//	%f_evaluate([{}{0}%f_factory_switch_count_self(%S)]+[{}{0}<{+}{%SS=%gS&%ga=abstract}%f_factory_switch_count_self(%g)>])
 [%f] evaluate %( if NOT-EMPTY
 begin
  [%f] factory_switch_count_self %( %S )% 
 end // if
 NOP
 else
 begin
  0 
 end // else
 '+'
 if NOT-EMPTY
 begin
  INTEGER VAR l_Counter l_Counter := 0
  for %S%g
  begin
   OBJECT IN %g
   if ( ( %S |S ) %== ( %g |S ) AND 
    ( ( %g |a ) %== 'abstract'  ) ) then
   begin
    if ( l_Counter >0 ) then ( '+' )
    [%f] factory_switch_count_self %( %g )% 
    ++! l_Counter
   end // if
  end // for g
 end // if
 NOP
 else
 begin
  0 
 end // else
)% 
//f _factory_switch_count_self
; // factory_switch_count

: factory_switch_count_self OBJECT IN %S
//	<{}{%CC=Attribute&%CS=factory switch}{%CC}>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if ( ( %C |C ) %== 'Attribute' AND 
   ( ( %C |S ) %== 'factory switch'  ) ) then
  begin

   ++! l_Counter
  end // if
 end // for C
 l_Counter

//f _check_local_int
; // factory_switch_count_self

: check_local_int OBJECT IN %S
//	%f_clear_list(LOCAL_INT_PACKS)\
 [%f] clear_list %( 'LOCAL_INT_PACKS' )% 
//	[<{, }{%LS=LocalInterface}[%L[{%f_exists_in_list(LOCAL_INT_PACKS,P)=true}{%f_add_to_list(LOCAL_INT_PACKS,P)}%SN]]>]
 if NOT-EMPTY
 begin
  INTEGER VAR l_Counter l_Counter := 0
  for %S%L
  begin
   OBJECT IN %L
   if ( ( %L |S ) %== 'LocalInterface' ) then
   begin
    if ( l_Counter >0 ) then ( ', ' )
    if NOT-EMPTY
    begin
     %L
     bind ( 
      OBJECT VAR %S
      if ( ( [%f] exists_in_list %( 'LOCAL_INT_PACKS' %, 'P' )% ) %==  true ) then
      begin
       %S |N 
      end // if
      else
      begin
       [%f] add_to_list %( 'LOCAL_INT_PACKS' %, 'P' )% 
      end // else

     ) // bind
     end // if
    NOP

    ++! l_Counter
   end // if
  end // for L
 end // if
 NOP

//проверяет на уникальность имена кэшированных фабрик
//f _check_unique_factory_name
; // check_local_int

: check_unique_factory_name OBJECT IN %S
//	[{"%f_check_unique_factory_name_i(%S)"!=""}{true}false]
 if ( ( [%f] check_unique_factory_name_i %( %S )% ) %!= '' ) then
 begin
   false 
 end // if
 else
 begin
   true 
 end // else

//f _check_unique_factory_name_i
; // check_unique_factory_name

: check_unique_factory_name_i OBJECT IN %S
//	%f_clear_list(CACHED_LIST)\
 [%f] clear_list %( 'CACHED_LIST' )% 
//	<{}{%f_is_factory(%C)&%f_is_it_cached(%C)=true}[{%f_exists_in_list(CACHED_LIST,"%CN")=false}{%CN, }%f_add_to_list(CACHED_LIST,"%CN")]>%f_clear_list(CACHED_LIST)
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if ( ( [%f] is_factory %( %C )% ) AND 
   ( ( [%f] is_it_cached %( %C )% ) %==  true  ) ) then
  begin
   if ( ( [%f] exists_in_list %( 'CACHED_LIST' %, %C |N )% ) %==  false ) then
   begin
    [%f] add_to_list %( 'CACHED_LIST' %, %C |N )% 
   end // if
   else
   begin
    %C |N ', ' 
   end // else

   ++! l_Counter
  end // if
 end // for C
 [%f] clear_list %( 'CACHED_LIST' )% 

//f _can_realize_sm_primitive
; // check_unique_factory_name_i

: can_realize_sm_primitive OBJECT IN %S
//	[{%Sa=abstract&"%RN"!="state machine"&"%1M"!="UMLPrimitive::Class"}{false}true]
 if ( ( %S |a ) %== 'abstract' AND 
   ( ( %R |N ) %!= 'state machine'  ) AND 
   ( ( %1 |M ) %!= 'UMLPrimitive::Class'  ) ) then
 begin
   true 
 end // if
 else
 begin
   false 
 end // else
//#UC END# *4704C0E30186for470F512D003E*
; // can_realize_sm_primitive


// перекрытие базового стереотипа C++ Фабрики::MDAGenerator
// генератор файлов реализации для фабрик интерфейсов (.cpp)
//+ fctr.cpp
implementation @ <<Interface>>
<<generator>> fctr.cpp OBJECT IN %S
//#UC START# *4705C54B01F4for470F512D003E*
//= AbstractInterface::Class;fctr.cpp
%call-other-gen ( 'AbstractInterface' 'fctr.cpp' )
//#UC END# *4705C54B01F4for470F512D003E*
; // fctr.cpp


// перекрытие базового стереотипа C++ Фабрики::MDAGenerator
// генератор заголовочных файлов для фабрик интерфейсов (.h)
//+ fctr.h
<<generator>> fctr.h OBJECT IN %S
//#UC START# *4705C5490109for470F512D003E*
//= AbstractInterface::Class;fctr.h
%call-other-gen ( 'AbstractInterface' 'fctr.h' )
//#UC END# *4705C5490109for470F512D003E*
; // fctr.h


// перекрытие базового стереотипа C++ интерфейсы и реализация::MDAGenerator
// генератор файлов реализации C++ (.cpp)
//+ cpp
<<generator>> cpp OBJECT IN %S
//#UC START# *47022CB8034Bfor470F512D003E*
//F class %SN;
//	%f_interface_implementation(%S)
 [%f] interface_implementation %( %S )% 

//f _dump_factory_impl_cpp
; // cpp

end. // <<Interface>>

: dump_factory_impl_cpp OBJECT IN %S
//	<{}{"%f_is_factory(%C)"="true"}{%C}
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if ( ( [%f] is_factory %( %C )% ) %== true ) then
  begin
   #13#10

//	%CX
   %C |X 
//	><{}{"%ga"="abstract"}%g<{}{"%f_is_factory(%C)"="true"}{%C}

   ++! l_Counter
  end // if
 end // for C
 INTEGER VAR l_Counter l_Counter := 0
 for %S%g
 begin
  OBJECT IN %g
  if ( ( %g |a ) %== 'abstract' ) then
  begin
   %g
   bind ( 
    OBJECT VAR %S
    INTEGER VAR l_Counter l_Counter := 0
    for %S%C
    begin
     OBJECT IN %C
     if ( ( [%f] is_factory %( %C )% ) %== true ) then
     begin
      #13#10

//	%t_dump_derived_abstract_factory_cpp(%C)
      [%t] dump_derived_abstract_factory_cpp %( %C )% 
//	>>

      ++! l_Counter
     end // if
    end // for C

   ) // bind
 
   ++! l_Counter
  end // if
 end // for g


//t _dump_derived_abstract_factory_cpp
; // dump_factory_impl_cpp

<<transformator>> dump_derived_abstract_factory_cpp OBJECT IN %S
//c                            {}
//r "%SS"="factory":           {%{INT}%f_dump_factory_operation_cpp(%S)}
//r "%SS"="multi factory":     {%{INT}%f_dump_multi_factory_operation_cpp(%S)}
//r "%SS"="remover":           {%f_dump_remover_operation_cpp(%S)}
//r ""="":                     {}

//f _dump_inherited_factory_cpp
; // dump_derived_abstract_factory_cpp

: dump_inherited_factory_cpp OBJECT IN %S
//	[<{}{%f_is_interface(%R)=true}%f_set_var(FACTORY_PARENT,R)%R<{}{"%f_is_factory(%C)"="true"}{%C}
 if NOT-EMPTY
 begin
  INTEGER VAR l_Counter l_Counter := 0
  for %S%R
  begin
   OBJECT IN %R
   if ( ( [%f] is_interface %( %R )% ) %==  true ) then
   begin
    [%f] set_var %( 'FACTORY_PARENT' %, 'R' )% %R
    bind ( 
     OBJECT VAR %S
     INTEGER VAR l_Counter l_Counter := 0
     for %S%C
     begin
      OBJECT IN %C
      if ( ( [%f] is_factory %( %C )% ) %== true ) then
      begin
       #13#10

//	%t_dump_derived_factory_cpp(%C)
       [%t] dump_derived_factory_cpp %( %C )% 
//	>%R<{}{"%ga"="abstract"}%g<{}{"%f_is_factory(%C)"="true"}{%C}

       ++! l_Counter
      end // if
     end // for C

    ) // bind
     %R
    bind ( 
     OBJECT VAR %S
     INTEGER VAR l_Counter l_Counter := 0
     for %S%g
     begin
      OBJECT IN %g
      if ( ( %g |a ) %== 'abstract' ) then
      begin
       %g
       bind ( 
        OBJECT VAR %S
        INTEGER VAR l_Counter l_Counter := 0
        for %S%C
        begin
         OBJECT IN %C
         if ( ( [%f] is_factory %( %C )% ) %== true ) then
         begin
          #13#10

//	%t_dump_derived_factory_cpp(%C)
          [%t] dump_derived_factory_cpp %( %C )% 
//	>>>]%f_set_var(SERV,"")

          ++! l_Counter
         end // if
        end // for C

       ) // bind
 
       ++! l_Counter
      end // if
     end // for g

    ) // bind
 
    ++! l_Counter
   end // if
  end // for R
 end // if
 NOP
 [%f] set_var %( 'SERV' %, '' )% 

//t _dump_derived_factory_cpp
; // dump_inherited_factory_cpp

<<transformator>> dump_derived_factory_cpp OBJECT IN %S
//c                            {}
//r "%SS"="factory":           {%f_dump_derived_factory_operation_cpp(%S)}
//r "%SS"="multi factory":     {%f_dump_derived_multi_factory_operation_cpp(%S)}
//r "%SS"="remover":           {%f_dump_derived_remover_operation_cpp(%S)}
//r ""="":                     {}

//f _fctr_mng_fctr_cpp_impl
; // dump_derived_factory_cpp

: fctr_mng_fctr_cpp_impl OBJECT IN %S
//	%t_ret(%{INT},"[{%{INT}S!=ServerInterface}%f_factory_target_strereotype(%S,"%1N")]") %{INT}NFactoryManager::%SN%2N (<{, }%f_arg_full_decl(%C)>) [{%f_realize_srv_interface(%S)=false|%S#f_is_exported()=false}{throw (CORBA::SystemException, CoreSrv::NoActiveFactory[{%f_need_conversion_exception(%S)=true}, Core::Root::ImpossibleConversion]<, %f_type(%E)>)}/*throw (Core::Root::NoActiveFactory[{%f_need_conversion_exception(%S)=true}, Core::Root::ImpossibleConversion]<, %f_type(%E)>)*/] \
 [%t] ret %( ( get_global_var ( 'INT' ) ) %, if ( ( ( get_global_var ( 'INT' ) |S ) ) %!= 'ServerInterface' ) then
 begin
  [%f] factory_target_strereotype %( %S %, %1 |N )% 
 end // if
)%  ' '
 ( get_global_var ( 'INT' ) |N ) 'FactoryManager::'
 %S |N %2 |N ' ('
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   if ( l_Counter >0 ) then ( ', ' )
   [%f] arg_full_decl %( %C )% 
   ++! l_Counter
  end // if
 end // for C
 ') '
 if ( ( [%f] realize_srv_interface %( %S )% ) %==  false OR 
   ( ( %S %?f is_exported %( )% ) %==  false  ) ) then
 begin
  '/*throw (Core::Root::NoActiveFactory'
  if ( ( [%f] need_conversion_exception %( %S )% ) %==  true ) then
  begin
   ', Core::Root::ImpossibleConversion' 
  end // if
  INTEGER VAR l_Counter l_Counter := 0
  for %S%E
  begin
   OBJECT IN %E
   if true then
   begin
    ', '
    [%f] type %( %E )% 
    ++! l_Counter
   end // if
  end // for E
  ')*/' 
 end // if
 else
 begin
  'throw (CORBA::SystemException, CoreSrv::NoActiveFactory'
  if ( ( [%f] need_conversion_exception %( %S )% ) %==  true ) then
  begin
   ', Core::Root::ImpossibleConversion' 
  end // if
  INTEGER VAR l_Counter l_Counter := 0
  for %S%E
  begin
   OBJECT IN %E
   if true then
   begin
    ', '
    [%f] type %( %E )% 
    ++! l_Counter
   end // if
  end // for E
  ')' 
 end // else
 ' '
//	{[{%f_is_it_cached(%S)=false}
 '{'
 if ( ( [%f] is_it_cached %( %S )% ) %==  false ) then
 begin
  #13#10

//		if (m_single_active_factory.is_nil()) {
  '	if (m_single_active_factory.is_nil()) {'
//			throw Core::Root::NoActiveFactory ("%P%P%PN::%P%PN::%PNFactory");
  '		throw Core::Root::NoActiveFactory ("'
  %P ->P ->P |N   '::'
  %P ->P |N  '::'
  %P |N 'Factory");'
//		}
  '	}'
//		%t_ret(%{INT},"[{%{INT}S!=ServerInterface}%Ss]") ret_ = m_single_active_factory-\>%SN (<{, }%CN>[{%f_is_ro_fctr_exists(%S)=true}[{%Cx=true}, ][{%1N=read-only}{false}true]]);
  '	'
  [%t] ret %( ( get_global_var ( 'INT' ) ) %, if ( ( ( get_global_var ( 'INT' ) |S ) ) %!= 'ServerInterface' ) then
  begin
   %S |s 
  end // if
)%   ' ret_ = m_single_active_factory->'
  %S |N ' ('
  INTEGER VAR l_Counter l_Counter := 0
  for %S%C
  begin
   OBJECT IN %C
   if true then
   begin
    if ( l_Counter >0 ) then ( ', ' )
    %C |N 
    ++! l_Counter
   end // if
  end // for C
  if ( ( [%f] is_ro_fctr_exists %( %S )% ) %==  true ) then
  begin
   if ( ( %C |x ) %==  true ) then
   begin
    ', ' 
   end // if
   if ( ( %1 |N ) %== 'read-only' ) then
   begin
     true 
   end // if
   else
   begin
     false 
   end // else
  end // if
  ');'
//		GDS_ASSERT_MSG (ret_ != 0, ("%P%P%PN::%P%PN::%PNFactory impl can't return zerro"));
  '	GDS_ASSERT_MSG (ret_ != 0, ("'
  %P ->P ->P |N   '::'
  %P ->P |N  '::'
  %P |N 'Factory impl can''t return zerro"));'
//		[{%{INT}S=ServerInterface&%1N=read-only}{return [{%1N=read-only}{ret_}new %{INT}NConstWrapper (ret_)];}%{INT}NConstWrapper_var wrapper = new %{INT}NConstWrapper (ret_);
  '	'
  if ( ( ( get_global_var ( 'INT' ) |S ) ) %== 'ServerInterface' AND 
    ( ( %1 |N ) %== 'read-only'  ) ) then
  begin
   ( get_global_var ( 'INT' ) |N ) 'ConstWrapper_var wrapper = new '
   ( get_global_var ( 'INT' ) |N ) 'ConstWrapper (ret_);'
//		return wrapper-\>_this ();]
   '	return wrapper->_this ();' 
  end // if
  else
  begin
   'return '
   if ( ( %1 |N ) %== 'read-only' ) then
   begin
    'new '
    ( get_global_var ( 'INT' ) |N ) 'ConstWrapper (ret_)' 
   end // if
   else
   begin
    'ret_' 
   end // else
   ';' 
  end // else
//	][{%TS!=FactoryMemory}[{%f_is_it_cached(%S)=true}[{%Cx=true}
 end // if
 if ( ( %T |S ) %!= 'FactoryMemory' ) then
 begin
  if ( ( [%f] is_it_cached %( %S )% ) %==  true ) then
  begin
   if ( ( %C |x ) %==  true ) then
   begin
    #13#10

//		GUARD(m_mutex_for_%SN);
    '	GUARD(m_mutex_for_'
    %S |N ');'
//		CachedObjectsFor%f_to_borland(%SN)::iterator f = m_cached_objects_for_%SN.find (ObjectCreationIdFor%f_to_borland(%SN)(<{, }{"%CS"!="nokey"}%CN>));
    '	CachedObjectsFor'
    [%f] to_borland %( %S |N )% '::iterator f = m_cached_objects_for_'
    %S |N '.find (ObjectCreationIdFor'
    [%f] to_borland %( %S |N )% '('
    INTEGER VAR l_Counter l_Counter := 0
    for %S%C
    begin
     OBJECT IN %C
     if ( ( %C |S ) %!= 'nokey' ) then
     begin
      if ( l_Counter >0 ) then ( ', ' )
      %C |N 
      ++! l_Counter
     end // if
    end // for C
    '));'
//		if (f == m_cached_objects_for_%SN.end()[{%S{const_type}=combo|%S{const_type}=read-only} || f-\>second[.%f_cache_postfix(%S,"%1N")][{%Ss!=synchro}.ptr()] == 0]) {
    '	if (f == m_cached_objects_for_'
    %S |N '.end()'
    if ( ( %S get_up ( 'const_type' ) ) %== 'combo' OR 
      ( ( %S get_up ( 'const_type' ) ) %== 'read-only'  ) ) then
    begin
     ' || f->second'
     if NOT-EMPTY
     begin
      '.'
      [%f] cache_postfix %( %S %, %1 |N )% 
     end // if
     NOP
     if ( ( %S |s ) %!= 'synchro' ) then
     begin
      '.ptr()' 
     end // if
     ' == 0' 
    end // if
    ') {'
//		[{%S{const_type}=combo&%1N=read-only|%S{const_type}=read-only}{	if (m_single_active_factory.is_nil()) {
    '	'
    if ( ( %S get_up ( 'const_type' ) ) %== 'combo' AND 
      ( ( %1 |N ) %== 'read-only'  ) OR 
      ( ( %S get_up ( 'const_type' ) ) %== 'read-only'  ) ) then
    begin
     #13#10

//			f = m_cached_objects_for_%SN.insert (
     '		f = m_cached_objects_for_'
     %S |N '.insert ('
//				CachedObjectsFor%f_to_borland(%SN)::value_type(
     '			CachedObjectsFor'
     [%f] to_borland %( %S |N )% '::value_type('
//					ObjectCreationIdFor%f_to_borland(%SN)(<{, }{"%CS"!="nokey"}%CN>)
     '				ObjectCreationIdFor'
     [%f] to_borland %( %S |N )% '('
     INTEGER VAR l_Counter l_Counter := 0
     for %S%C
     begin
      OBJECT IN %C
      if ( ( %C |S ) %!= 'nokey' ) then
      begin
       if ( l_Counter >0 ) then ( ', ' )
       %C |N 
       ++! l_Counter
      end // if
     end // for C
     ')'
//					, m_single_active_factory-\>%SN (<{, }%CN>[{%f_is_ro_fctr_exists(%S)=true}[{%Cx=true}, ][{%1N=read-only}{false}true]])
     '				, m_single_active_factory->'
     %S |N ' ('
     INTEGER VAR l_Counter l_Counter := 0
     for %S%C
     begin
      OBJECT IN %C
      if true then
      begin
       if ( l_Counter >0 ) then ( ', ' )
       %C |N 
       ++! l_Counter
      end // if
     end // for C
     if ( ( [%f] is_ro_fctr_exists %( %S )% ) %==  true ) then
     begin
      if ( ( %C |x ) %==  true ) then
      begin
       ', ' 
      end // if
      if ( ( %1 |N ) %== 'read-only' ) then
      begin
        true 
      end // if
      else
      begin
        false 
      end // else
     end // if
     ')'

//					,[{%S{const_type}!=read-write}{ m_single_active_factory-\>%SN (<{, }%CN>[{%f_is_ro_fctr_exists(%S)=true}, [{%1N=read-only}{false}true]])} ComboData[{%Ss=synchro}{Var}Ptr] (m_single_active_factory-\>%SN (<{, }%CN>))]
//				)
     '			)'
//			).first;
     '		).first;'
//			m_cached_objects_index_for_%SN.insert (
     '		m_cached_objects_index_for_'
     %S |N '.insert ('
//				CachedObjectsIndexFor%f_to_borland(%SN)::value_type (
     '			CachedObjectsIndexFor'
     [%f] to_borland %( %S |N )% '::value_type ('
//					f-\>second[.%t_cache_postfix(%S,"read-write")][{%f_is_server_type(%{INT})=true}{[{%Ss!=synchro}.in()]}-\>_hash (std::numeric_limits\<CORBA::ULong\>::max ())]
     '				f->second'
     if NOT-EMPTY
     begin
      '.'
      [%t] cache_postfix %( %S %, 'read-write' )% 
     end // if
     NOP
     if ( ( [%f] is_server_type %( ( get_global_var ( 'INT' ) ) )% ) %==  true ) then
     begin
      '->_hash (std::numeric_limits<CORBA::ULong>::max ())' 
     end // if
     else
     begin
      if ( ( %S |s ) %!= 'synchro' ) then
      begin
       '.in()' 
      end // if
     end // else
//					, f
     '				, f'
//				)
     '			)'
//			);[{%Ss=synchro}
     '		);'
     if ( ( %S |s ) %== 'synchro' ) then
     begin
      #13#10

//			return f-\>second[.%f_cache_postfix(%S,"%1N")];]
      '		return f->second'
      if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, %1 |N )% 
      end // if
      NOP
      ';' 
     end // if
//		}	if (f == m_cached_objects_for_%SN.end()) {
     '	}	if (f == m_cached_objects_for_'
     %S |N '.end()) {'
//				if (m_single_active_factory.is_nil()) {
     '			if (m_single_active_factory.is_nil()) {'
//					throw Core::Root::NoActiveFactory ("%P%P%PN::%P%PN::%PNFactory");
     '				throw Core::Root::NoActiveFactory ("'
     %P ->P ->P |N   '::'
     %P ->P |N  '::'
     %P |N 'Factory");'
//				}
     '			}'
//				f = m_cached_objects_for_%SN.insert (
     '			f = m_cached_objects_for_'
     %S |N '.insert ('
//					CachedObjectsFor%f_to_borland(%SN)::value_type(
     '				CachedObjectsFor'
     [%f] to_borland %( %S |N )% '::value_type('
//						ObjectCreationIdFor%f_to_borland(%SN)(<{, }{"%CS"!="nokey"}%CN>)
     '					ObjectCreationIdFor'
     [%f] to_borland %( %S |N )% '('
     INTEGER VAR l_Counter l_Counter := 0
     for %S%C
     begin
      OBJECT IN %C
      if ( ( %C |S ) %!= 'nokey' ) then
      begin
       if ( l_Counter >0 ) then ( ', ' )
       %C |N 
       ++! l_Counter
      end // if
     end // for C
     ')'
//						, ComboData[{%Ss=synchro}{Var}Ptr] (m_single_active_factory-\>%SN (<{, }%CN>[{%f_is_ro_fctr_exists(%S)=true}[{%Cx=true}, ][{%1N=read-only}{false}true]]))
     '					, ComboData'
     if ( ( %S |s ) %== 'synchro' ) then
     begin
      'Ptr' 
     end // if
     else
     begin
      'Var' 
     end // else
     ' (m_single_active_factory->'
     %S |N ' ('
     INTEGER VAR l_Counter l_Counter := 0
     for %S%C
     begin
      OBJECT IN %C
      if true then
      begin
       if ( l_Counter >0 ) then ( ', ' )
       %C |N 
       ++! l_Counter
      end // if
     end // for C
     if ( ( [%f] is_ro_fctr_exists %( %S )% ) %==  true ) then
     begin
      if ( ( %C |x ) %==  true ) then
      begin
       ', ' 
      end // if
      if ( ( %1 |N ) %== 'read-only' ) then
      begin
        true 
      end // if
      else
      begin
        false 
      end // else
     end // if
     '))'
//					)
     '				)'
//				).first;
     '			).first;'
//				m_cached_objects_index_for_%SN.insert (
     '			m_cached_objects_index_for_'
     %S |N '.insert ('
//					CachedObjectsIndexFor%f_to_borland(%SN)::value_type (
     '				CachedObjectsIndexFor'
     [%f] to_borland %( %S |N )% '::value_type ('
//						f-\>second[.%t_cache_postfix(%S,"read-write")][{%f_is_server_type(%{INT})=true}{[{%Ss!=synchro}.in()]}-\>_hash (std::numeric_limits\<CORBA::ULong\>::max ())]
     '					f->second'
     if NOT-EMPTY
     begin
      '.'
      [%t] cache_postfix %( %S %, 'read-write' )% 
     end // if
     NOP
     if ( ( [%f] is_server_type %( ( get_global_var ( 'INT' ) ) )% ) %==  true ) then
     begin
      '->_hash (std::numeric_limits<CORBA::ULong>::max ())' 
     end // if
     else
     begin
      if ( ( %S |s ) %!= 'synchro' ) then
      begin
       '.in()' 
      end // if
     end // else
//						, f
     '					, f'
//					)
     '				)'
//				);
     '			);'
//				[{%{INT}S=ServerInterface}{f-\>second[.%f_cache_postfix(%S,"read-only")] = new %{INT}NConstWrapper (f-\>second[.%t_cache_postfix(%S,"read-write")][{%Ss!=synchro}.in ()]);}%{INT}NConstWrapper_var wrapper = new %{INT}NConstWrapper (f-\>second[.%t_cache_postfix(%S,"read-write")][{%Ss!=synchro}.in ()]);
     '			'
     if ( ( ( get_global_var ( 'INT' ) |S ) ) %== 'ServerInterface' ) then
     begin
      ( get_global_var ( 'INT' ) |N ) 'ConstWrapper_var wrapper = new '
      ( get_global_var ( 'INT' ) |N ) 'ConstWrapper (f->second'
      if NOT-EMPTY
      begin
       '.'
       [%t] cache_postfix %( %S %, 'read-write' )% 
      end // if
      NOP
      if ( ( %S |s ) %!= 'synchro' ) then
      begin
       '.in ()' 
      end // if
      ');'
//				f-\>second[.%f_cache_postfix(%S,"read-only")] = wrapper-\>_this ();]
      '			f->second'
      if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-only' )% 
      end // if
      NOP
      ' = wrapper->_this ();' 
     end // if
     else
     begin
      'f->second'
      if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-only' )% 
      end // if
      NOP
      ' = new '
      ( get_global_var ( 'INT' ) |N ) 'ConstWrapper (f->second'
      if NOT-EMPTY
      begin
       '.'
       [%t] cache_postfix %( %S %, 'read-write' )% 
      end // if
      NOP
      if ( ( %S |s ) %!= 'synchro' ) then
      begin
       '.in ()' 
      end // if
      ');' 
     end // else
//				f-\>second.is_ro_first = true;[{%Ss=synchro}
     '			f->second.is_ro_first = true;'
     if ( ( %S |s ) %== 'synchro' ) then
     begin
      #13#10

//				GDS_ASSERT_MSG (f-\>second[.%f_cache_postfix(%S,"read-only")][{%Ss!=synchro}.in ()] != 0, ("%P%P%PN::%P%PN::%PNFactory impl can't return zerro"));
      '			GDS_ASSERT_MSG (f->second'
      if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-only' )% 
      end // if
      NOP
      if ( ( %S |s ) %!= 'synchro' ) then
      begin
       '.in ()' 
      end // if
      ' != 0, ("'
      %P ->P ->P |N   '::'
      %P ->P |N  '::'
      %P |N 'Factory impl can''t return zerro"));'
//				return f-\>second[.%f_cache_postfix(%S,"read-only")];]
      '			return f->second'
      if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-only' )% 
      end // if
      NOP
      ';' 
     end // if
//			} else if (f-\>second[.%f_cache_postfix(%S,"read-only")][{%Ss!=synchro}.ptr ()] == 0) {
     '		} else if (f->second'
     if NOT-EMPTY
     begin
      '.'
      [%f] cache_postfix %( %S %, 'read-only' )% 
     end // if
     NOP
     if ( ( %S |s ) %!= 'synchro' ) then
     begin
      '.ptr ()' 
     end // if
     ' == 0) {'
//				[{%{INT}S=ServerInterface&%S#f_is_export()=true}{f-\>second[.%f_cache_postfix(%S,"read-only")] = new %{INT}NConstWrapper (
     '			'
     if ( ( ( get_global_var ( 'INT' ) |S ) ) %== 'ServerInterface' AND 
       ( ( %S %?f is_export %( )% ) %==  true  ) ) then
     begin
      ( get_global_var ( 'INT' ) |N ) 'ConstWrapper_var wrapper = new '
      ( get_global_var ( 'INT' ) |N ) 'ConstWrapper ('
//					%{INT}N::_duplicate (f-\>second[.%t_cache_postfix(%S,"read-write")][{%Ss!=synchro}.in ()])
      '				'
      ( get_global_var ( 'INT' ) |N ) '::_duplicate (f->second'
      if NOT-EMPTY
      begin
       '.'
       [%t] cache_postfix %( %S %, 'read-write' )% 
      end // if
      NOP
      if ( ( %S |s ) %!= 'synchro' ) then
      begin
       '.in ()' 
      end // if
      ')'
//				);
      '			);'
//				f-\>second[.%f_cache_postfix(%S,"read-only")] = wrapper-\>_this ();][{%Ss=synchro}
      '			f->second'
      if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-only' )% 
      end // if
      NOP
      ' = wrapper->_this ();' 
     end // if
     else
     begin
      'f->second'
      if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-only' )% 
      end // if
      NOP
      ' = new '
      ( get_global_var ( 'INT' ) |N ) 'ConstWrapper ('
//					%{INT}N::_duplicate (f-\>second[.%t_cache_postfix(%S,"read-write")][{%Ss!=synchro}.in ()])
      '				'
      ( get_global_var ( 'INT' ) |N ) '::_duplicate (f->second'
      if NOT-EMPTY
      begin
       '.'
       [%t] cache_postfix %( %S %, 'read-write' )% 
      end // if
      NOP
      if ( ( %S |s ) %!= 'synchro' ) then
      begin
       '.in ()' 
      end // if
      ')'
//				);}%{INT}NConstWrapper_var wrapper = new %{INT}NConstWrapper (
      '			);' 
     end // else
     if ( ( %S |s ) %== 'synchro' ) then
     begin
      #13#10

//				GDS_ASSERT_MSG (f-\>second[.%f_cache_postfix(%S,"read-only")][{%Ss!=synchro}.in ()] != 0, ("%P%P%PN::%P%PN::%PNFactory impl can't return zerro"));
      '			GDS_ASSERT_MSG (f->second'
      if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-only' )% 
      end // if
      NOP
      if ( ( %S |s ) %!= 'synchro' ) then
      begin
       '.in ()' 
      end // if
      ' != 0, ("'
      %P ->P ->P |N   '::'
      %P ->P |N  '::'
      %P |N 'Factory impl can''t return zerro"));'
//				return f-\>second[.%f_cache_postfix(%S,"read-only")];]
      '			return f->second'
      if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-only' )% 
      end // if
      NOP
      ';' 
     end // if
//			}]
     '		}' 
    end // if
    else
    begin
     '	if (m_single_active_factory.is_nil()) {'
//				throw Core::Root::NoActiveFactory ("%P%P%PN::%P%PN::%PNFactory");
     '			throw Core::Root::NoActiveFactory ("'
     %P ->P ->P |N   '::'
     %P ->P |N  '::'
     %P |N 'Factory");'
//			}
     '		' 
    end // else
//		}[{%f_is_ro_fctr_exists(%S)=true&%1N=read-write} else if (
    '	}'
    if ( ( [%f] is_ro_fctr_exists %( %S )% ) %==  true AND 
      ( ( %1 |N ) %== 'read-write'  ) ) then
    begin
     ' else if ('
//			f != m_cached_objects_for_%SN.end()
     '		f != m_cached_objects_for_'
     %S |N '.end()'
//			&& f-\>second[.%f_cache_postfix(%S,"read-only")][{%Ss!=synchro}.ptr ()] != 0
     '		&& f->second'
     if NOT-EMPTY
     begin
      '.'
      [%f] cache_postfix %( %S %, 'read-only' )% 
     end // if
     NOP
     if ( ( %S |s ) %!= 'synchro' ) then
     begin
      '.ptr ()' 
     end // if
     ' != 0'
//			&& f-\>second.is_ro_first == true
     '		&& f->second.is_ro_first == true'
//		) {
     '	) {'
//			f-\>second[.%f_cache_postfix(%S,"read-only")]-\>upgrade_rw ();
     '		f->second'
     if NOT-EMPTY
     begin
      '.'
      [%f] cache_postfix %( %S %, 'read-only' )% 
     end // if
     NOP
     '->upgrade_rw ();'
//			f-\>second.is_ro_first = false;
     '		f->second.is_ro_first = false;'
//		}]
     '	}' 
    end // if
//		GDS_ASSERT_MSG (f-\>second[.%f_cache_postfix(%S,"%1N")][{%Ss!=synchro}.in ()] != 0, ("%P%P%PN::%P%PN::%PNFactory impl can't return zerro"));
    '	GDS_ASSERT_MSG (f->second'
    if NOT-EMPTY
    begin
     '.'
     [%f] cache_postfix %( %S %, %1 |N )% 
    end // if
    NOP
    if ( ( %S |s ) %!= 'synchro' ) then
    begin
     '.in ()' 
    end // if
    ' != 0, ("'
    %P ->P ->P |N   '::'
    %P ->P |N  '::'
    %P |N 'Factory impl can''t return zerro"));'
//		return [{[{%{INT}S!=ServerInterface}{[{%S#f_is_export()=true}{true}false]}true]=true&%Ss!=synchro}{%{INT}N::_duplicate(f-\>second[.%f_cache_postfix(%S,"%1N")][{%Ss!=synchro}.in ()])}*f-\>second[.%f_cache_postfix(%S,"%1N")]];
    '	return '
    if ( if ( ( ( get_global_var ( 'INT' ) |S ) ) %!= 'ServerInterface' ) then
     begin
       true 
     end // if
     else
     begin
      if ( ( %S %?f is_export %( )% ) %==  true ) then
      begin
        false 
      end // if
      else
      begin
        true 
      end // else
     end // else
     %==  true AND 
      ( ( %S |s ) %!= 'synchro'  ) ) then
    begin
     '*f->second'
     if NOT-EMPTY
     begin
      '.'
      [%f] cache_postfix %( %S %, %1 |N )% 
     end // if
     NOP
    end // if
    else
    begin
     ( get_global_var ( 'INT' ) |N ) '::_duplicate(f->second'
     if NOT-EMPTY
     begin
      '.'
      [%f] cache_postfix %( %S %, %1 |N )% 
     end // if
     NOP
     if ( ( %S |s ) %!= 'synchro' ) then
     begin
      '.in ()' 
     end // if
     ')' 
    end // else
    ';'
//	][{%Cx=false}
   end // if
   if ( ( %C |x ) %==  false ) then
   begin
    #13#10

//		if (m_cached_object_for_%SN[.%f_cache_postfix(%S,"%1N")][{%Ss!=synchro}.ptr()] == 0) {
    '	if (m_cached_object_for_'
    %S |N if NOT-EMPTY
    begin
     '.'
     [%f] cache_postfix %( %S %, %1 |N )% 
    end // if
    NOP
    if ( ( %S |s ) %!= 'synchro' ) then
    begin
     '.ptr()' 
    end // if
    ' == 0) {'
//			GUARD(m_mutex_for_%SN);
    '		GUARD(m_mutex_for_'
    %S |N ');'
//			if (m_cached_object_for_%SN[.%f_cache_postfix(%S,"%1N")][{%Ss!=synchro}.ptr()] == 0) {
    '		if (m_cached_object_for_'
    %S |N if NOT-EMPTY
    begin
     '.'
     [%f] cache_postfix %( %S %, %1 |N )% 
    end // if
    NOP
    if ( ( %S |s ) %!= 'synchro' ) then
    begin
     '.ptr()' 
    end // if
    ' == 0) {'
//			[{%S{const_type}=combo&%1N=read-only|%S{const_type}=read-only}{	if (m_single_active_factory.is_nil()) {
    '		'
    if ( ( %S get_up ( 'const_type' ) ) %== 'combo' AND 
      ( ( %1 |N ) %== 'read-only'  ) OR 
      ( ( %S get_up ( 'const_type' ) ) %== 'read-only'  ) ) then
    begin
     #13#10

//				m_cached_object_for_%SN[.%t_cache_postfix(%S,"read-write")] = m_single_active_factory-\>%SN (<{, }%CN>[{%f_is_ro_fctr_exists(%S)=true}[{%Cx=true}, ][{%1N=read-only}{false}true]]);
     '			m_cached_object_for_'
     %S |N if NOT-EMPTY
     begin
      '.'
      [%t] cache_postfix %( %S %, 'read-write' )% 
     end // if
     NOP
     ' = m_single_active_factory->'
     %S |N ' ('
     INTEGER VAR l_Counter l_Counter := 0
     for %S%C
     begin
      OBJECT IN %C
      if true then
      begin
       if ( l_Counter >0 ) then ( ', ' )
       %C |N 
       ++! l_Counter
      end // if
     end // for C
     if ( ( [%f] is_ro_fctr_exists %( %S )% ) %==  true ) then
     begin
      if ( ( %C |x ) %==  true ) then
      begin
       ', ' 
      end // if
      if ( ( %1 |N ) %== 'read-only' ) then
      begin
        true 
      end // if
      else
      begin
        false 
      end // else
     end // if
     ');'
//			}	if (m_cached_object_for_%SN[.%t_cache_postfix(%S,"read-write")][{%Ss!=synchro}.ptr()] == 0) {
     '		}	if (m_cached_object_for_'
     %S |N if NOT-EMPTY
     begin
      '.'
      [%t] cache_postfix %( %S %, 'read-write' )% 
     end // if
     NOP
     if ( ( %S |s ) %!= 'synchro' ) then
     begin
      '.ptr()' 
     end // if
     ' == 0) {'
//					if (m_single_active_factory.is_nil()) {
     '				if (m_single_active_factory.is_nil()) {'
//						throw Core::Root::NoActiveFactory ("%P%P%PN::%P%PN::%PNFactory");
     '					throw Core::Root::NoActiveFactory ("'
     %P ->P ->P |N   '::'
     %P ->P |N  '::'
     %P |N 'Factory");'
//					}
     '				}'
//					m_cached_object_for_%SN[.%t_cache_postfix(%S,"read-write")] = m_single_active_factory-\>%SN (<{, }%CN>[{%f_is_ro_fctr_exists(%S)=true}[{%Cx=true}, ][{%1N=read-only}{false}true]]);
     '				m_cached_object_for_'
     %S |N if NOT-EMPTY
     begin
      '.'
      [%t] cache_postfix %( %S %, 'read-write' )% 
     end // if
     NOP
     ' = m_single_active_factory->'
     %S |N ' ('
     INTEGER VAR l_Counter l_Counter := 0
     for %S%C
     begin
      OBJECT IN %C
      if true then
      begin
       if ( l_Counter >0 ) then ( ', ' )
       %C |N 
       ++! l_Counter
      end // if
     end // for C
     if ( ( [%f] is_ro_fctr_exists %( %S )% ) %==  true ) then
     begin
      if ( ( %C |x ) %==  true ) then
      begin
       ', ' 
      end // if
      if ( ( %1 |N ) %== 'read-only' ) then
      begin
        true 
      end // if
      else
      begin
        false 
      end // else
     end // if
     ');'
//					[{%{INT}S=ServerInterface&%S#f_is_export()=true}{m_cached_object_for_%SN[.%f_cache_postfix(%S,"read-only")] = new %{INT}NConstWrapper (
     '				'
     if ( ( ( get_global_var ( 'INT' ) |S ) ) %== 'ServerInterface' AND 
       ( ( %S %?f is_export %( )% ) %==  true  ) ) then
     begin
      ( get_global_var ( 'INT' ) |N ) 'ConstWrapper_var wrapper = new '
      ( get_global_var ( 'INT' ) |N ) 'ConstWrapper ('
//						m_cached_object_for_%SN[.%t_cache_postfix(%S,"read-write")][{%Ss!=synchro}.in()]
      '					m_cached_object_for_'
      %S |N if NOT-EMPTY
      begin
       '.'
       [%t] cache_postfix %( %S %, 'read-write' )% 
      end // if
      NOP
      if ( ( %S |s ) %!= 'synchro' ) then
      begin
       '.in()' 
      end // if
//					);
      '				);'
//					m_cached_object_for_%SN[.%f_cache_postfix(%S,"read-only")] = wrapper-\>_this ();][{%f_is_ro_fctr_exists(%S)=true}
      '				m_cached_object_for_'
      %S |N if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-only' )% 
      end // if
      NOP
      ' = wrapper->_this ();' 
     end // if
     else
     begin
      'm_cached_object_for_'
      %S |N if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-only' )% 
      end // if
      NOP
      ' = new '
      ( get_global_var ( 'INT' ) |N ) 'ConstWrapper ('
//						m_cached_object_for_%SN[.%t_cache_postfix(%S,"read-write")][{%Ss!=synchro}.in()]
      '					m_cached_object_for_'
      %S |N if NOT-EMPTY
      begin
       '.'
       [%t] cache_postfix %( %S %, 'read-write' )% 
      end // if
      NOP
      if ( ( %S |s ) %!= 'synchro' ) then
      begin
       '.in()' 
      end // if
//					);}%{INT}NConstWrapper_var wrapper = new %{INT}NConstWrapper (
      '				);' 
     end // else
     if ( ( [%f] is_ro_fctr_exists %( %S )% ) %==  true ) then
     begin
      #13#10

//					m_cached_object_for_%SN.is_ro_first = true;]
      '				m_cached_object_for_'
      %S |N '.is_ro_first = true;' 
     end // if
//				} else {
     '			} else {'
//					[{%{INT}S=ServerInterface&%S#f_is_export()=true}{m_cached_object_for_%SN[.%f_cache_postfix(%S,"read-only")] = new %{INT}NConstWrapper (
     '				'
     if ( ( ( get_global_var ( 'INT' ) |S ) ) %== 'ServerInterface' AND 
       ( ( %S %?f is_export %( )% ) %==  true  ) ) then
     begin
      ( get_global_var ( 'INT' ) |N ) 'ConstWrapper_var wrapper = new '
      ( get_global_var ( 'INT' ) |N ) 'ConstWrapper ('
//						%{INT}N::_duplicate (m_cached_object_for_%SN[.%t_cache_postfix(%S,"read-write")][{%Ss!=synchro}.in()])
      '					'
      ( get_global_var ( 'INT' ) |N ) '::_duplicate (m_cached_object_for_'
      %S |N if NOT-EMPTY
      begin
       '.'
       [%t] cache_postfix %( %S %, 'read-write' )% 
      end // if
      NOP
      if ( ( %S |s ) %!= 'synchro' ) then
      begin
       '.in()' 
      end // if
      ')'
//					);
      '				);'
//					m_cached_object_for_%SN[.%f_cache_postfix(%S,"read-only")] = wrapper-\>_this ();]
      '				m_cached_object_for_'
      %S |N if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-only' )% 
      end // if
      NOP
      ' = wrapper->_this ();' 
     end // if
     else
     begin
      'm_cached_object_for_'
      %S |N if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-only' )% 
      end // if
      NOP
      ' = new '
      ( get_global_var ( 'INT' ) |N ) 'ConstWrapper ('
//						%{INT}N::_duplicate (m_cached_object_for_%SN[.%t_cache_postfix(%S,"read-write")][{%Ss!=synchro}.in()])
      '					'
      ( get_global_var ( 'INT' ) |N ) '::_duplicate (m_cached_object_for_'
      %S |N if NOT-EMPTY
      begin
       '.'
       [%t] cache_postfix %( %S %, 'read-write' )% 
      end // if
      NOP
      if ( ( %S |s ) %!= 'synchro' ) then
      begin
       '.in()' 
      end // if
      ')'
//					);}%{INT}NConstWrapper_var wrapper = new %{INT}NConstWrapper (
      '				);' 
     end // else
//				}
     '			}'
//			]
     '		' 
    end // if
    else
    begin
     '	if (m_single_active_factory.is_nil()) {'
//					throw Core::Root::NoActiveFactory ("%P%P%PN::%P%PN::%PNFactory");
     '				throw Core::Root::NoActiveFactory ("'
     %P ->P ->P |N   '::'
     %P ->P |N  '::'
     %P |N 'Factory");'
//				}
     '			' 
    end // else
//				GDS_ASSERT_MSG (m_cached_object_for_%SN[.%f_cache_postfix(%S,"%1N")][{%Ss!=synchro}.ptr()] != 0, ("%P%P%PN::%P%PN::%PNFactory impl can't return zerro"));[{%Ss=synchro}
    '			GDS_ASSERT_MSG (m_cached_object_for_'
    %S |N if NOT-EMPTY
    begin
     '.'
     [%f] cache_postfix %( %S %, %1 |N )% 
    end // if
    NOP
    if ( ( %S |s ) %!= 'synchro' ) then
    begin
     '.ptr()' 
    end // if
    ' != 0, ("'
    %P ->P ->P |N   '::'
    %P ->P |N  '::'
    %P |N 'Factory impl can''t return zerro"));'
    if ( ( %S |s ) %== 'synchro' ) then
    begin
     #13#10

//				return m_cached_object_for_%SN[.%f_cache_postfix(%S,"%1N")];]
     '			return m_cached_object_for_'
     %S |N if NOT-EMPTY
     begin
      '.'
      [%f] cache_postfix %( %S %, %1 |N )% 
     end // if
     NOP
     ';' 
    end // if
//			}
    '		}'
//		}[{%f_is_ro_fctr_exists(%S)=true&%1N=read-write}
    '	}'
    if ( ( [%f] is_ro_fctr_exists %( %S )% ) %==  true AND 
      ( ( %1 |N ) %== 'read-write'  ) ) then
    begin
     #13#10

//		if (
     '	if ('
//			m_cached_object_for_%SN[.%f_cache_postfix(%S,"read-only")][{%Ss!=synchro}.ptr()] != 0
     '		m_cached_object_for_'
     %S |N if NOT-EMPTY
     begin
      '.'
      [%f] cache_postfix %( %S %, 'read-only' )% 
     end // if
     NOP
     if ( ( %S |s ) %!= 'synchro' ) then
     begin
      '.ptr()' 
     end // if
     ' != 0'
//			&& m_cached_object_for_%SN.is_ro_first == true
     '		&& m_cached_object_for_'
     %S |N '.is_ro_first == true'
//		) {
     '	) {'
//			m_cached_object_for_%SN[.%f_cache_postfix(%S,"read-only")]-\>upgrade_rw ();
     '		m_cached_object_for_'
     %S |N if NOT-EMPTY
     begin
      '.'
      [%f] cache_postfix %( %S %, 'read-only' )% 
     end // if
     NOP
     '->upgrade_rw ();'
//			m_cached_object_for_%SN.is_ro_first = false;
     '		m_cached_object_for_'
     %S |N '.is_ro_first = false;'
//		}]
     '	}' 
    end // if
//		return [{[{%{INT}S!=ServerInterface}{[{%S#f_is_export()!=true}{false}true]}true]=true&%Ss!=synchro}{%{INT}N::_duplicate(m_cached_object_for_%SN[.%f_cache_postfix(%S,"%1N")][{%Ss!=synchro}.in ()])}*m_cached_object_for_%SN[.%f_cache_postfix(%S,"%1N")]];
    '	return '
    if ( if ( ( ( get_global_var ( 'INT' ) |S ) ) %!= 'ServerInterface' ) then
     begin
       true 
     end // if
     else
     begin
      if ( ( %S %?f is_export %( )% ) %!=  true ) then
      begin
        true 
      end // if
      else
      begin
        false 
      end // else
     end // else
     %==  true AND 
      ( ( %S |s ) %!= 'synchro'  ) ) then
    begin
     '*m_cached_object_for_'
     %S |N if NOT-EMPTY
     begin
      '.'
      [%f] cache_postfix %( %S %, %1 |N )% 
     end // if
     NOP
    end // if
    else
    begin
     ( get_global_var ( 'INT' ) |N ) '::_duplicate(m_cached_object_for_'
     %S |N if NOT-EMPTY
     begin
      '.'
      [%f] cache_postfix %( %S %, %1 |N )% 
     end // if
     NOP
     if ( ( %S |s ) %!= 'synchro' ) then
     begin
      '.in ()' 
     end // if
     ')' 
    end // else
    ';'
//	]]][{%TS=FactoryMemory}
   end // if
  end // if
 end // if
 if ( ( %T |S ) %== 'FactoryMemory' ) then
 begin
  #13#10

//	%f_fctr_mng_mem_cpp(%S,"%1N")
  [%f] fctr_mng_mem_cpp %( %S %, %1 |N )% 
//	]}
 end // if
 '}'
//#UC END# *47022CB8034Bfor470F512D003E*
; // fctr_mng_fctr_cpp_impl


// перекрытие базового стереотипа C++ интерфейсы и реализация::MDAGenerator
// генератор заголовочных файлов C++ (.h)
//+ h
implementation @ <<Interface>>
<<generator>> h OBJECT IN %S
//#UC START# *47022C88029Ffor470F512D003E*
//F class %SN;
//	%f_interface_declaration(%S)
 [%f] interface_declaration %( %S )% 

//f _dump_interface_friend
; // h

end. // <<Interface>>

: dump_interface_friend OBJECT IN %S
//	[<{}{"%aM"="Interface::Class::friend::ClassDependency"}{Sp}[%f_get_all_consumer_list(%a%P)%a%P<{}{%f_is_empty(CONSUMER_LIST)=false}{W}%f_pop_first_to_var(CONSUMER_LIST,TEMP)[{%{TEMP}S=Servant}#	friend class %f_type(%{TEMP});
 if NOT-EMPTY
 begin
  INTEGER VAR l_Counter l_Counter := 0
  for %S%ap
  begin
   OBJECT IN %a
   if ( ( %a |M ) %== 'Interface::Class::friend::ClassDependency' ) then
   begin
    if NOT-EMPTY
    begin
     [%f] get_all_consumer_list %( %a ->P  )% %a ->P
     bind ( 
      OBJECT VAR %S
      INTEGER VAR l_Counter l_Counter := 0
      while true
      begin
       if ( ( [%f] is_empty %( 'CONSUMER_LIST' )% ) %==  false ) then
       begin
        [%f] pop_first_to_var %( 'CONSUMER_LIST' %, 'TEMP' )% if ( ( ( get_global_var ( 'TEMP' ) |S ) ) %== 'Servant' ) then
        begin
         out_indent '	friend class '
         [%f] type %( ( get_global_var ( 'TEMP' ) ) )% ';'
//	]>]>][{<{}{%CV!=PublicAccess&[{%CC=Operation|%CC=Attribute}{false}true]=true}{%CC}>!=0}%f_get_all_consumer_list(%S)%f_set_var(INT,S)<{}{%f_is_empty(CONSUMER_LIST)=false}{W}%f_pop_first_to_var(CONSUMER_LIST,TEMP)[{%{TEMP}S=LocalInterface&%{TEMP}a!=abstract&[{%f_need_const_wrapper(%{TEMP})=true|%f_need_const_wrapper(%{INT})=true}{false}true]=true}#	friend class %f_type(%{TEMP})ConstWrapper;
        end // if

        ++! l_Counter
       end // if
       else
        break
      end // while

     ) // bind
      end // if
    NOP

    ++! l_Counter
   end // if
  end // for a
 end // if
 NOP
 if ( 
  INTEGER VAR l_Counter l_Counter := 0
  for %S%C
  begin
   OBJECT IN %C
   if ( ( %C |V ) %!= 'PublicAccess' AND 
    ( if ( ( %C |C ) %== 'Operation' OR 
     ( ( %C |C ) %== 'Attribute'  ) ) then
   begin
     true 
   end // if
   else
   begin
     false 
   end // else
   %==  true  ) ) then
   begin

    ++! l_Counter
   end // if
  end // for C
  l_Counter
  %!= 0 ) then
 begin
  [%f] get_all_consumer_list %( %S )% [%f] set_var %( 'INT' %, 'S' )% 
  INTEGER VAR l_Counter l_Counter := 0
  while true
  begin
   if ( ( [%f] is_empty %( 'CONSUMER_LIST' )% ) %==  false ) then
   begin
    [%f] pop_first_to_var %( 'CONSUMER_LIST' %, 'TEMP' )% if ( ( ( get_global_var ( 'TEMP' ) |S ) ) %== 'LocalInterface' AND 
      ( ( ( get_global_var ( 'TEMP' ) |a ) ) %!= 'abstract'  ) AND 
      ( if ( ( [%f] need_const_wrapper %( ( get_global_var ( 'TEMP' ) ) )% ) %==  true OR 
       ( ( [%f] need_const_wrapper %( ( get_global_var ( 'INT' ) ) )% ) %==  true  ) ) then
     begin
       true 
     end // if
     else
     begin
       false 
     end // else
     %==  true  ) ) then
    begin
     out_indent '	friend class '
     [%f] type %( ( get_global_var ( 'TEMP' ) ) )% 'ConstWrapper;'
//	]>][{%f_need_const_wrapper(%S)=true&%f_has_factory_methods(%S)=true}#	friend class %f_type(%S)ConstWrapper;
    end // if

    ++! l_Counter
   end // if
   else
    break
  end // while
 end // if
 if ( ( [%f] need_const_wrapper %( %S )% ) %==  true AND 
   ( ( [%f] has_factory_methods %( %S )% ) %==  true  ) ) then
 begin
  out_indent '	friend class '
  [%f] type %( %S )% 'ConstWrapper;'
//	]
 end // if
//#UC END# *47022C88029Ffor470F512D003E*
; // dump_interface_friend


// перекрытие базового стереотипа Java::MDAGenerator
// генератор реализации фабрик интерфейсов на java (.java)
//+ fctr.java
implementation @ <<Interface>>
<<generator>> fctr.java OBJECT IN %S
//#UC START# *470321C1038Afor470F512D003E*
//= AbstractInterface::Class;fctr.java
%call-other-gen ( 'AbstractInterface' 'fctr.java' )
//#UC END# *470321C1038Afor470F512D003E*
; // fctr.java


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Вложенные стереотипы

//: Interface::Class::factory_op::Operation*
end. // <<Interface>>

implementation @ :: <<Interface>> <<factory_op>> ;
//? базовый стереотип для фабричных методов
//= AbstractInterface::Class::factory::Operation

// Функции стереотипа
//%f _st_space_key
: st_space_key OBJECT IN %S
//	MDP
 'MDP'


//: Interface::Class::factory::Operation
; // st_space_key

end. // :: <<Interface>> <<factory_op>> ;

implementation @ :: <<Interface>> <<factory>> ;
//? Фабрика (одиночная)
//? Будет создан абстрактный интерфейс фабрики, который будут реализовывать конкретные фабрики (по одной на каждый сервант), создающие соответствующие серванты.
//? Конкретные фабрики мугут инициализироваться своими специфичными параметрами. Созданные конкретные фабрики будут регистрироваться в менеджере фабрик.
//? Последний осуществляет выбор нужной "активной" фабрики при получении запроса на создание экземпляра объекта.
//? Для ОДИНОЧНОЙ фабрики - активной может быть только ОДНА такая фабрика - кто последний зарегистрировался тот и активен. Если указан тип фабричного метода, то это означает что данная фабрика будет использовать общую "память". Если фабрика, использующая "общую память", не содержит ни одного параметра-ключа, то считается что это т.н. "создающая" фабрика, т.е. фабрика, которая создает новый объект, и он при создании самостоятельно должен получить идентифицирующий его ключ.
//= Interface::Class::factory_op::Operation

// Параметры стереотипа
//v +#
// - типы видимости
//Y code_factory.gif
//L code_factory
//m f
// - не может быть реализован/иметь перекрытую реализацию
//A const|cached|const,cached|synchro
// - стереотипы "цели" (типа/результата)

// Пользовательские свойства
//p const_type=read-write|read-only|combo ? Тип константности фабрики: read-write - в этом случае возвращается объект с полными правами. read-only - в этом случае возвращается объект только для чтения, т.е без возможности вызвать изменяющие его операции. combo (комбинированая) - в этом случае реально будет сгенерированно две фабрики, read-write и read-only, но как-бы с "общей памятью", т.е. повторный вызов каждой из них вернет один и тот же объект, но с разными правами.
//p force use const arg:b=false ? Если установлен флаг "force const arg", то все параметры в фабрики передаются как "in", в противном случае параметры передаются с указанными спецификаторами. Если установлен для фабрики флаг "force const arg" и фабрика емеет две версии RW и RO, то для серванта реализующего соответствующий интерфейс генериться 2 конструктора.

// Генераторы
// генератор файлов реализации C++ (.cpp)
//+ cpp
<<generator>> cpp OBJECT IN %S
//#UC START# *47022CB8034Bfor470F576D0203*
//	%P%f_dump_factory_operation_cpp(%S)
 %P %f dump_factory_operation_cpp %( %S )% 

//f _dump_derived_factory_operation_cpp
; // cpp

end. // :: <<Interface>> <<factory>> ;

: dump_derived_factory_operation_cpp OBJECT IN %S
//	[{%S{const_type}=combo}{%f_dump_derived_factory_operation_cpp_impl(%S)}%f_dump_derived_factory_operation_cpp_impl(%S,"read-write")
 if ( ( %S get_up ( 'const_type' ) ) %== 'combo' ) then
 begin
  [%f] dump_derived_factory_operation_cpp_impl %( %S %, 'read-write' )% 
//	
  #13#10

//	%f_dump_derived_factory_operation_cpp_impl(%S,"read-only","_ro")]
  [%f] dump_derived_factory_operation_cpp_impl %( %S %, 'read-only"' %, '_ro' )% 
 end // if
 else
 begin
  [%f] dump_derived_factory_operation_cpp_impl %( %S )% 
 end // else

//f _dump_derived_factory_operation_cpp_impl
; // dump_derived_factory_operation_cpp

: dump_derived_factory_operation_cpp_impl OBJECT IN %S
//	%f_set_var(OPERATION_CPP,"%t_ret(%{INT},"%f_factory_target_strereotype(%S,"%1N")") %{SERV}NFactory::%SN%2N (%S%f_factory_params("%1N")) /*throw (Core::Root::NoActiveFactory, Core::Root::FactoryManagerWasDestroyed[{%f_need_conversion_exception(%S)=true}, Core::Root::ImpossibleConversion]<, %f_type(%E)>)*/ {")%f_set_var(OP_LEN,"%f_string_length("%{OPERATION_CPP}N")")\
 [%f] set_var %( 'OPERATION_CPP' %, [%t] ret %( ( get_global_var ( 'INT' ) ) %, [%f] factory_target_strereotype %( %S %, %1 |N )% )% ' '
 ( get_global_var ( 'SERV' ) |N ) 'Factory::'
 %S |N %2 |N ' ('
 %S %f factory_params %( %1 |N )% ') /*throw (Core::Root::NoActiveFactory' %, ' Core::Root::FactoryManagerWasDestroyed'
 if ( ( [%f] need_conversion_exception %( %S )% ) %==  true ) then
 begin
  ', Core::Root::ImpossibleConversion' 
 end // if
 INTEGER VAR l_Counter l_Counter := 0
 for %S%E
 begin
  OBJECT IN %E
  if true then
  begin
   ', '
   [%f] type %( %E )% 
   ++! l_Counter
  end // if
 end // for E
 ')*/ {' )% [%f] set_var %( 'OP_LEN' %, [%f] string_length %( ( get_global_var ( 'OPERATION_CPP' ) |N ) )% )% 
//	%f_set_var(NEED_WRAP,"%f_number_cmp("%{OP_LEN}N","120","\>")")\
 [%f] set_var %( 'NEED_WRAP' %, [%f] number_cmp %( ( get_global_var ( 'OP_LEN' ) |N ) %, 120 %, '>' )% )% 
//	[{%f_true(%{NEED_WRAP})=true&%Cx=true}{%{OPERATION_CPP}N}%t_ret(%{INT},"%f_factory_target_strereotype(%S,"%1N")") %{SERV}NFactory::%SN%2N (\n\t<{\n\t, }%f_arg_full_decl(%C)>\n) /*throw (Core::Root::NoActiveFactory, Core::Root::FactoryManagerWasDestroyed[{%f_need_conversion_exception(%S)=true}, Core::Root::ImpossibleConversion]<, %f_type(%E)>)*/ {]
 if ( ( [%f] true %( ( get_global_var ( 'NEED_WRAP' ) ) )% ) %==  true AND 
   ( ( %C |x ) %==  true  ) ) then
 begin
  [%t] ret %( ( get_global_var ( 'INT' ) ) %, [%f] factory_target_strereotype %( %S %, %1 |N )% )% ' '
  ( get_global_var ( 'SERV' ) |N ) 'Factory::'
  %S |N %2 |N ' ('#13#10#9
  INTEGER VAR l_Counter l_Counter := 0
  for %S%C
  begin
   OBJECT IN %C
   if true then
   begin
    if ( l_Counter >0 ) then ( #13#10#9', ' )
    [%f] arg_full_decl %( %C )% 
    ++! l_Counter
   end // if
  end // for C
  #13#10') /*throw (Core::Root::NoActiveFactory, Core::Root::FactoryManagerWasDestroyed'
  if ( ( [%f] need_conversion_exception %( %S )% ) %==  true ) then
  begin
   ', Core::Root::ImpossibleConversion' 
  end // if
  INTEGER VAR l_Counter l_Counter := 0
  for %S%E
  begin
   OBJECT IN %E
   if true then
   begin
    ', '
    [%f] type %( %E )% 
    ++! l_Counter
   end // if
  end // for E
  ')*/ {' 
 end // if
 else
 begin
  ( get_global_var ( 'OPERATION_CPP' ) |N ) 
 end // else
//	%f_dump_derived_factory_return_impl(%S)
 [%f] dump_derived_factory_return_impl %( %S )% 
//	}
 '}'

//f _dump_derived_factory_return_impl
; // dump_derived_factory_operation_cpp_impl

: dump_derived_factory_return_impl OBJECT IN %S
//	[{%{INT}S=LocalInterface&%{FACTORY_PARENT}S=ServerInterface}{\
 if ( ( ( get_global_var ( 'INT' ) |S ) ) %== 'LocalInterface' AND 
   ( ( ( get_global_var ( 'FACTORY_PARENT' ) |S ) ) %== 'ServerInterface'  ) ) then
 begin
//	[{%f_is_it_cached(%S)=true}{\
  if ( ( [%f] is_it_cached %( %S )% ) %==  true ) then
  begin
   #13#10

//			
   '		'
//			return ret;}	try {
   '		return ret;}	try {'
//			PortableServer::ServantBase_var serv = LibHomeFactory::get().get_orb_facet().get_root_poa().reference_to_servant (
   '		PortableServer::ServantBase_var serv = LibHomeFactory::get().get_orb_facet().get_root_poa().reference_to_servant ('
//				&%f_type(%{FACTORY_PARENT})Factory::%SN%2N (<{, }%CN>)
   '			&'
   [%f] type %( ( get_global_var ( 'FACTORY_PARENT' ) ) )% 'Factory::'
   %S |N %2 |N ' ('
   INTEGER VAR l_Counter l_Counter := 0
   for %S%C
   begin
    OBJECT IN %C
    if true then
    begin
     if ( l_Counter >0 ) then ( ', ' )
     %C |N 
     ++! l_Counter
    end // if
   end // for C
   ')'
//			);
   '		);'
//			return dynamic_cast\<%t_ret(%{INT},"%f_factory_target_strereotype(%S,"%1N")")\> (*serv.in ());
   '		return dynamic_cast<'
   [%t] ret %( ( get_global_var ( 'INT' ) ) %, [%f] factory_target_strereotype %( %S %, %1 |N )% )% '> (*serv.in ());'
//		} catch (std::bad_cast&) {
   '	} catch (std::bad_cast&) {'
//			throw Core::Root::NoActiveFactory (%{INT}["%P%PN::%PN::%SNFactory"]);
   '		throw Core::Root::NoActiveFactory ('
   ( get_global_var ( 'INT' ) ) 
   bind ( 
    OBJECT VAR %S
    if NOT-EMPTY
    begin
     %P ->P |N  '::'
     %P |N '::'
     %S |N 'Factory' 
    end // if
    NOP

   ) // bind
   ');'
//		}]]
   '	}' 
  end // if
  else
  begin
//			PortableServer::ServantBase_var serv = LibHomeFactory::get().get_orb_facet().get_root_poa().reference_to_servant (
   '		PortableServer::ServantBase_var serv = LibHomeFactory::get().get_orb_facet().get_root_poa().reference_to_servant ('
//				%f_type(%{FACTORY_PARENT})Factory::%SN%2N (<{, }%CN>)
   '			'
   [%f] type %( ( get_global_var ( 'FACTORY_PARENT' ) ) )% 'Factory::'
   %S |N %2 |N ' ('
   INTEGER VAR l_Counter l_Counter := 0
   for %S%C
   begin
    OBJECT IN %C
    if true then
    begin
     if ( l_Counter >0 ) then ( ', ' )
     %C |N 
     ++! l_Counter
    end // if
   end // for C
   ')'
//			);
   '		);'
//			%t_ret(%{INT},"%f_factory_target_strereotype(%S,"%1N")") ret = dynamic_cast\<%t_ret(%{INT},"%f_factory_target_strereotype(%S,"%1N")")\> (serv.in ());
   '		'
   [%t] ret %( ( get_global_var ( 'INT' ) ) %, [%f] factory_target_strereotype %( %S %, %1 |N )% )% ' ret = dynamic_cast<'
   [%t] ret %( ( get_global_var ( 'INT' ) ) %, [%f] factory_target_strereotype %( %S %, %1 |N )% )% '> (serv.in ());'
//			
   '		'
//			if (ret == 0) {
   '		if (ret == 0) {'
//				throw Core::Root::NoActiveFactory (%{INT}["%P%PN::%PN::%SNFactory"]);
   '			throw Core::Root::NoActiveFactory ('
   ( get_global_var ( 'INT' ) ) 
   bind ( 
    OBJECT VAR %S
    if NOT-EMPTY
    begin
     %P ->P |N  '::'
     %P |N '::'
     %S |N 'Factory' 
    end // if
    NOP

   ) // bind
   ');'
//			}
   '		' 
  end // else
 end // if
 else
 begin
//	[{%{INT}U!=%{FACTORY_PARENT}U}{	return %f_type(%{FACTORY_PARENT})Factory::%SN%2N (<{, }%CN>);}\
  if ( ( ( get_global_var ( 'INT' ) |U ) ) %!= ( ( get_global_var ( 'FACTORY_PARENT' ) |U ) ) ) then
  begin
//	%f_set_var(__RET__,"%t_ret(%{INT},"%f_factory_target_strereotype(%S,"%1N")")")\
   [%f] set_var %( '__RET__' %, [%t] ret %( ( get_global_var ( 'INT' ) ) %, [%f] factory_target_strereotype %( %S %, %1 |N )% )% )% 
//	[{%f_substr_from_end(%{__RET__}N,1)=%f_logic_and(%S)}{	%{__RET__}N ret = dynamic_cast\<%{__RET__}N\> (%f_type(%{FACTORY_PARENT})Factory::%SN%2N (<{, }%CN>));
   if ( ( [%f] substr_from_end %( ( get_global_var ( '__RET__' ) |N ) %, 1 )% ) %== ( [%f] logic_and %( %S )% ) ) then
   begin
    #13#10

//		return ret;}\
    '	return ret;}'
//		try {
    '	try {'
//			return dynamic_cast\<%{__RET__}N\> (%f_type(%{FACTORY_PARENT})Factory::%SN%2N (<{, }%CN>));
    '		return dynamic_cast<'
    ( get_global_var ( '__RET__' ) |N ) '> ('
    [%f] type %( ( get_global_var ( 'FACTORY_PARENT' ) ) )% 'Factory::'
    %S |N %2 |N ' ('
    INTEGER VAR l_Counter l_Counter := 0
    for %S%C
    begin
     OBJECT IN %C
     if true then
     begin
      if ( l_Counter >0 ) then ( ', ' )
      %C |N 
      ++! l_Counter
     end // if
    end // for C
    '));'
//		} catch (std::bad_cast&) {
    '	} catch (std::bad_cast&) {'
//			throw Core::Root::NoActiveFactory (%{INT}["%P%PN::%PN::%SNFactory"]);
    '		throw Core::Root::NoActiveFactory ('
    ( get_global_var ( 'INT' ) ) 
    bind ( 
     OBJECT VAR %S
     if NOT-EMPTY
     begin
      %P ->P |N  '::'
      %P |N '::'
      %S |N 'Factory' 
     end // if
     NOP

    ) // bind
    ');'
//		}
    '	}'
//	]]}\
   end // if
   else
   begin
    '	'
    ( get_global_var ( '__RET__' ) |N ) ' ret = dynamic_cast<'
    ( get_global_var ( '__RET__' ) |N ) '> ('
    [%f] type %( ( get_global_var ( 'FACTORY_PARENT' ) ) )% 'Factory::'
    %S |N %2 |N ' ('
    INTEGER VAR l_Counter l_Counter := 0
    for %S%C
    begin
     OBJECT IN %C
     if true then
     begin
      if ( l_Counter >0 ) then ( ', ' )
      %C |N 
      ++! l_Counter
     end // if
    end // for C
    '));'
//		if (ret == 0) {
    '	if (ret == 0) {'
//			throw Core::Root::NoActiveFactory (%{INT}["%P%PN::%PN::%SNFactory"]);
    '		throw Core::Root::NoActiveFactory ('
    ( get_global_var ( 'INT' ) ) 
    bind ( 
     OBJECT VAR %S
     if NOT-EMPTY
     begin
      %P ->P |N  '::'
      %P |N '::'
      %S |N 'Factory' 
     end // if
     NOP

    ) // bind
    ');'
//		}
    '	' 
   end // else
  end // if
  else
  begin
   '	return '
   [%f] type %( ( get_global_var ( 'FACTORY_PARENT' ) ) )% 'Factory::'
   %S |N %2 |N ' ('
   INTEGER VAR l_Counter l_Counter := 0
   for %S%C
   begin
    OBJECT IN %C
    if true then
    begin
     if ( l_Counter >0 ) then ( ', ' )
     %C |N 
     ++! l_Counter
    end // if
   end // for C
   ');' 
  end // else
 end // else
//#UC END# *47022CB8034Bfor470F576D0203*
; // dump_derived_factory_return_impl


// генератор заголовочных файлов C++ (.h)
//+ h
implementation @ :: <<Interface>> <<factory>> ;
<<generator>> h OBJECT IN %S
//#UC START# *47022C88029Ffor470F576D0203*
//	%P%f_dump_factory_operation_h(%S)
 %P %f dump_factory_operation_h %( %S )% 

//f _factory_target_strereotype
; // h

end. // :: <<Interface>> <<factory>> ;

: factory_target_strereotype OBJECT IN %S
//	%t_factory_target_strereotype(%S,"%S{const_type}","%1N")
 [%t] factory_target_strereotype %( %S %, %S get_up ( 'const_type' ) %, %1 |N )% 

//t _factory_target_strereotype
; // factory_target_strereotype

<<transformator>> factory_target_strereotype OBJECT IN %S
//c                     {}    {read-write}  {read-only}     {combo}
//r {%Ss=cached}:       {}    {%Ss}         {const,%Ss}     {%t_factory_target_strereotype(%S,"%2N")}
//r {"%Ss"=""}:         {}    {%Ss}         {const}         {%t_factory_target_strereotype(%S,"%2N")}
//r {syncro}:           {}    {%Ss}         {const}         {%t_factory_target_strereotype(%S,"%2N")}
//#UC END# *47022C88029Ffor470F576D0203*
; // factory_target_strereotype


// генератор классов, интерфейсов на java (.java)
//+ java
implementation @ :: <<Interface>> <<factory>> ;
<<generator>> java OBJECT IN %S
//#UC START# *470321950119for470F576D0203*
//	%f_docs(%S)\
 [%f] docs %( %S )% 
//	%S%f_dump_factory_operation()[{%S%f_is_cached()=true&%Cx=true}
 %S %f dump_factory_operation %( )% if ( ( %S %f is_cached %( )% ) %==  true AND 
   ( ( %C |x ) %==  true  ) ) then
 begin
  #13#10

//	
  #13#10

//	#public static java.util.Collection\<[{%TS=FactoryMemory&%T%f_use_for_synchro_factory()=true|%Ss=synchro}{%t_ret(%{INT})}java.lang.ref.WeakReference\<%t_ret(%{INT})\> ]\> %f_to_java(get_cached_objects_for_%SN) () {
  out_indent 'public static java.util.Collection<'
  if ( ( %T |S ) %== 'FactoryMemory' AND 
    ( ( %T %f use_for_synchro_factory %( )% ) %==  true  ) OR 
    ( ( %S |s ) %== 'synchro'  ) ) then
  begin
   'java.lang.ref.WeakReference<'
   [%t] ret %( ( get_global_var ( 'INT' ) ) )% '> ' 
  end // if
  else
  begin
   [%t] ret %( ( get_global_var ( 'INT' ) ) )% 
  end // else
  '> '
  [%f] to_java %( 'get_cached_objects_for_'
  %S |N )% ' () {'
//	#	[{%{FACTORY_PARENT}U!=%{INT}U}{return %f_type(%{FACTORY_PARENT})FactoryManager.%{FACTORY_PARENT}%f_fctr_mng_get_instance_name() ().%f_to_java(get_cached_objects_for_%SN) ();}java.util.Collection\<[{%TS=FactoryMemory&%T%f_use_for_synchro_factory()=true|%Ss=synchro}{%t_ret(%{INT})}java.lang.ref.WeakReference\<%t_ret(%{INT})\> ]\> res = new java.util.ArrayList\<[{%TS=FactoryMemory&%T%f_use_for_synchro_factory()=true|%Ss=synchro}{%t_ret(%{INT})}java.lang.ref.WeakReference\<%t_ret(%{INT})\> ]\> ();
  out_indent '	'
  if ( ( ( get_global_var ( 'FACTORY_PARENT' ) |U ) ) %!= ( ( get_global_var ( 'INT' ) |U ) ) ) then
  begin
   'java.util.Collection<'
   if ( ( %T |S ) %== 'FactoryMemory' AND 
     ( ( %T %f use_for_synchro_factory %( )% ) %==  true  ) OR 
     ( ( %S |s ) %== 'synchro'  ) ) then
   begin
    'java.lang.ref.WeakReference<'
    [%t] ret %( ( get_global_var ( 'INT' ) ) )% '> ' 
   end // if
   else
   begin
    [%t] ret %( ( get_global_var ( 'INT' ) ) )% 
   end // else
   '> res = new java.util.ArrayList<'
   if ( ( %T |S ) %== 'FactoryMemory' AND 
     ( ( %T %f use_for_synchro_factory %( )% ) %==  true  ) OR 
     ( ( %S |s ) %== 'synchro'  ) ) then
   begin
    'java.lang.ref.WeakReference<'
    [%t] ret %( ( get_global_var ( 'INT' ) ) )% '> ' 
   end // if
   else
   begin
    [%t] ret %( ( get_global_var ( 'INT' ) ) )% 
   end // else
   '> ();'
//	#	for ([{%TS=FactoryMemory&%T%f_use_for_synchro_factory()=true|%Ss=synchro}{%t_ret(%{FACTORY_PARENT})}java.lang.ref.WeakReference\<%t_ret(%{FACTORY_PARENT})\> ] item: %f_type(%{FACTORY_PARENT})FactoryManager.getInstance%{FACTORY_PARENT}U ().%f_to_java(get_cached_objects_for_%SN) ()) {
   out_indent '	for ('
   if ( ( %T |S ) %== 'FactoryMemory' AND 
     ( ( %T %f use_for_synchro_factory %( )% ) %==  true  ) OR 
     ( ( %S |s ) %== 'synchro'  ) ) then
   begin
    'java.lang.ref.WeakReference<'
    [%t] ret %( ( get_global_var ( 'FACTORY_PARENT' ) ) )% '> ' 
   end // if
   else
   begin
    [%t] ret %( ( get_global_var ( 'FACTORY_PARENT' ) ) )% 
   end // else
   ' item: '
   [%f] type %( ( get_global_var ( 'FACTORY_PARENT' ) ) )% 'FactoryManager.getInstance'
   ( get_global_var ( 'FACTORY_PARENT' ) |U ) ' ().'
   [%f] to_java %( 'get_cached_objects_for_'
   %S |N )% ' ()) {'
//	#		%f_type(%{FACTORY_PARENT}) obj = item[{%TS=FactoryMemory&%T%f_use_for_synchro_factory()=true|%Ss=synchro}.get ()];
   out_indent '		'
   [%f] type %( ( get_global_var ( 'FACTORY_PARENT' ) ) )% ' obj = item'
   if ( ( %T |S ) %== 'FactoryMemory' AND 
     ( ( %T %f use_for_synchro_factory %( )% ) %==  true  ) OR 
     ( ( %S |s ) %== 'synchro'  ) ) then
   begin
    '.get ()' 
   end // if
   ';'
//	#		if (obj != null && (obj instanceof %f_type(%{INT}))) {
   out_indent '		if (obj != null && (obj instanceof '
   [%f] type %( ( get_global_var ( 'INT' ) ) )% ')) {'
//	#			[{%TS=FactoryMemory&%T%f_use_for_synchro_factory()=true|%Ss=synchro}{res.add ((%f_type(%{INT}))obj);}res.add (
   out_indent '			'
   if ( ( %T |S ) %== 'FactoryMemory' AND 
     ( ( %T %f use_for_synchro_factory %( )% ) %==  true  ) OR 
     ( ( %S |s ) %== 'synchro'  ) ) then
   begin
    'res.add ('
//	#				new java.lang.ref.WeakReference\<%f_type(%{INT})\> (
    out_indent '				new java.lang.ref.WeakReference<'
    [%f] type %( ( get_global_var ( 'INT' ) ) )% '> ('
//	#					(%f_type(%{INT}))obj
    out_indent '					('
    [%f] type %( ( get_global_var ( 'INT' ) ) )% ')obj'
//	#				)
    out_indent '				)'
//	#			);]
    out_indent '			);' 
   end // if
   else
   begin
    'res.add (('
    [%f] type %( ( get_global_var ( 'INT' ) ) )% ')obj);' 
   end // else
//	#		}
   out_indent '		}'
//	#	}
   out_indent '	}'
//	#	return res;]
   out_indent '	return res;' 
  end // if
  else
  begin
   'return '
   [%f] type %( ( get_global_var ( 'FACTORY_PARENT' ) ) )% 'FactoryManager.'
   ( get_global_var ( 'FACTORY_PARENT' ) %f fctr_mng_get_instance_name %( )% ) ' ().'
   [%f] to_java %( 'get_cached_objects_for_'
   %S |N )% ' ();' 
  end // else
//	#}]
  out_indent '}' 
 end // if

//%f _abstract_factory_operation_java
; // java

: abstract_factory_operation_java OBJECT IN %S
//	%f_set_var(SELF_FCTR_PARAMS,"%S%f_factory_params("%1N")")\
 [%f] set_var %( 'SELF_FCTR_PARAMS' %, %S %f factory_params %( %1 |N )% )% 
//	%f_set_var(FCTR_MEM_PARAM,"[{%TS=FactoryMemory&<{}{%CS!=nokey}{%CC}>=0}%t_arg(%T,"inout") memKey]")\
 [%f] set_var %( 'FCTR_MEM_PARAM' %, if ( ( %T |S ) %== 'FactoryMemory' AND 
   ( 
  INTEGER VAR l_Counter l_Counter := 0
  for %S%C
  begin
   OBJECT IN %C
   if ( ( %C |S ) %!= 'nokey' ) then
   begin

    ++! l_Counter
   end // if
  end // for C
  l_Counter
  %== 0  ) ) then
 begin
  [%t] arg %( %T %, 'inout' )% ' memKey' 
 end // if
)% //	%f_set_var(RO_PARAM,"[{%S{const_type}=combo}boolean roMode]")\
 [%f] set_var %( 'RO_PARAM' %, if ( ( %S get_up ( 'const_type' ) ) %== 'combo' ) then
 begin
  'boolean roMode' 
 end // if
)% //	%f_set_var(FCTR_ALL_PARAMS,"%f_merge_string(", ","%{SELF_FCTR_PARAMS}N","%{FCTR_MEM_PARAM}N","%{RO_PARAM}N")")\
 [%f] set_var %( 'FCTR_ALL_PARAMS' %, [%f] merge_string %( %, ' "' %, ( get_global_var ( 'SELF_FCTR_PARAMS' ) |N ) %, ( get_global_var ( 'FCTR_MEM_PARAM' ) |N ) %, ( get_global_var ( 'RO_PARAM' ) |N ) )% )% 
//			public %t_ret(%{INT}) %f_to_java(%SN)%2N (%{FCTR_ALL_PARAMS}N)[ throws <{, }%f_type(%E)>];
 '		public '
 [%t] ret %( ( get_global_var ( 'INT' ) ) )% ' '
 [%f] to_java %( %S |N )% %2 |N ' ('
 ( get_global_var ( 'FCTR_ALL_PARAMS' ) |N ) ')'
 if NOT-EMPTY
 begin
  ' throws '
  INTEGER VAR l_Counter l_Counter := 0
  for %S%E
  begin
   OBJECT IN %E
   if true then
   begin
    if ( l_Counter >0 ) then ( ', ' )
    [%f] type %( %E )% 
    ++! l_Counter
   end // if
  end // for E
 end // if
 NOP
 ';'

//#UC END# *470321950119for470F576D0203*
; // abstract_factory_operation_java


// Функции стереотипа
//%f _st_space_key
: st_space_key OBJECT IN %S
//	MDP
 'MDP'

//%f _wiki_up_print
; // st_space_key

: wiki_up_print OBJECT IN %S
//	%S#[inherited][{"%S{const_type}"!="%S{!const_type}"}%f_up_prefix(%S) *const_type* = *%S{const_type}* - Тип константности фабрики: read-write - в этом случае возвращается объект с полными правами. read-only - в этом случае возвращается объект только для чтения, т.е без возможности вызвать изменяющие его операции. combo (комбинированая) - в этом случае реально будет сгенерированно две фабрики, read-write и read-only, но как-бы с "общей памятью", т.е. повторный вызов каждой из них вернет один и тот же объект, но с разными правами.
 ?inherited
 if ( ( %S get_up ( 'const_type' ) ) %!= ( %S get_up_def ( 'const_type' ) ) ) then
 begin
  [%f] up_prefix %( %S )% ' *const_type* = *'
  %S get_up ( 'const_type' ) '* - Тип константности фабрики: read-write - в этом случае возвращается объект с полными правами. read-only - в этом случае возвращается объект только для чтения, т.е без возможности вызвать изменяющие его операции. combo (комбинированая) - в этом случае реально будет сгенерированно две фабрики, read-write и read-only, но как-бы с "общей памятью", т.е. повторный вызов каждой из них вернет один и тот же объект, но с разными правами.'
//	][{"%S{force use const arg}"!="%S{!force use const arg}"}%f_up_prefix(%S) *force use const arg* = *%S{force use const arg}* - Если установлен флаг "force const arg", то все параметры в фабрики передаются как "in", в противном случае параметры передаются с указанными спецификаторами. Если установлен для фабрики флаг "force const arg" и фабрика емеет две версии RW и RO, то для серванта реализующего соответствующий интерфейс генериться 2 конструктора.
 end // if
 if ( ( %S get_up ( 'force use const arg' ) ) %!= ( %S get_up_def ( 'force use const arg' ) ) ) then
 begin
  [%f] up_prefix %( %S )% ' *force use const arg* = *'
  %S get_up ( 'force use const arg' ) '* - Если установлен флаг "force const arg", то все параметры в фабрики передаются как "in", в противном случае параметры передаются с указанными спецификаторами. Если установлен для фабрики флаг "force const arg" и фабрика емеет две версии RW и RO, то для серванта реализующего соответствующий интерфейс генериться 2 конструктора.'
//	]
 end // if

// дампит код реализации фабричного метода ("создающего") для менеджера фабрик в случае
// использования общей памяти
//%f _fctr_mng_factory_mem_create_impl
; // wiki_up_print

: fctr_mng_factory_mem_create_impl OBJECT IN %S
//#UC START# *4757C7C4005Afor470F576D0203*
//	#		if (singleActiveFactory_ == null) {
 out_indent '		if (singleActiveFactory_ == null) {'
//	#			throw new [{%f_is_server_type(%{INT})=true}ru.garant.shared.CoreSrv.]NoActiveFactory ("%{INT}%P%PN.%PN.%SNFactory");
 out_indent '			throw new '
 if ( ( [%f] is_server_type %( ( get_global_var ( 'INT' ) ) )% ) %==  true ) then
 begin
  'ru.garant.shared.CoreSrv.' 
 end // if
 'NoActiveFactory ("'
 ( get_global_var ( 'INT' )  ->P ->P |N  ) '.'
 %P |N '.'
 %S |N 'Factory");'
//	#		}
 out_indent '		}'
//	#		[{%2N!=read-only}{%t_ret(%{INT}) obj}res] = singleActiveFactory_.%f_to_java(%SN) (<%f_to_java(%CN), >memKey);[{%T%f_use_for_multi_factory()=true}
 out_indent '		'
 if ( ( %2 |N ) %!= 'read-only' ) then
 begin
  'res' 
 end // if
 else
 begin
  [%t] ret %( ( get_global_var ( 'INT' ) ) )% ' obj' 
 end // else
 ' = singleActiveFactory_.'
 [%f] to_java %( %S |N )% ' ('
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   [%f] to_java %( %C |N )% ', ' 
   ++! l_Counter
  end // if
 end // for C
 'memKey);'
 if ( ( %T %f use_for_multi_factory %( )% ) %==  true ) then
 begin
  #13#10

//	#		memKey.keyArg_ = singleActiveFactory_.key ();]
  out_indent '		memKey.keyArg_ = singleActiveFactory_.key ();' 
 end // if
//	#		assert(%f_to_java(%TNMap)_.get (memKey) != null);
 out_indent '		assert('
 [%f] to_java %( %T |N 'Map' )% '_.get (memKey) != null);'
//	[{%f_is_ro_fctr_exists(%S)=false}{%f_create_new_combo_data(%S,"%2N")}
 if ( ( [%f] is_ro_fctr_exists %( %S )% ) %==  false ) then
 begin
  #13#10

//	#		%f_to_java(%TNMap)_.put (memKey, [{%T%f_use_for_synchro_factory()=true}{res}new java.lang.ref.WeakReference\<%t_ret(%{INT})\> (res)]);
  out_indent '		'
  [%f] to_java %( %T |N 'Map' )% '_.put (memKey, '
  if ( ( %T %f use_for_synchro_factory %( )% ) %==  true ) then
  begin
   'new java.lang.ref.WeakReference<'
   [%t] ret %( ( get_global_var ( 'INT' ) ) )% '> (res)' 
  end // if
  else
  begin
   'res' 
  end // else
  ');'
//	#		%f_to_java(%TNIndexMap)_.put ([{%f_is_server_type(%{INT})=true}{[{%T%f_use_for_synchro_factory()=true}{res}res.hashCode ()]}res._hash (Integer.MAX_VALUE)], memKey);]
  out_indent '		'
  [%f] to_java %( %T |N 'IndexMap' )% '_.put ('
  if ( ( [%f] is_server_type %( ( get_global_var ( 'INT' ) ) )% ) %==  true ) then
  begin
   'res._hash (Integer.MAX_VALUE)' 
  end // if
  else
  begin
   if ( ( %T %f use_for_synchro_factory %( )% ) %==  true ) then
   begin
    'res.hashCode ()' 
   end // if
   else
   begin
    'res' 
   end // else
  end // else
  ', memKey);' 
 end // if
 else
 begin
  [%f] create_new_combo_data %( %S %, %2 |N )% 
 end // else

//f _create_new_combo_data
; // fctr_mng_factory_mem_create_impl

end. // :: <<Interface>> <<factory>> ;

: create_new_combo_data OBJECT IN %S
//	#		[{%T%f_use_for_multi_factory()=true}{%t_fctr_manager_cache_value(%{INT},"var",%S) data = new %t_fctr_manager_cache_value(%{INT},"var",%S) (
 out_indent '		'
 if ( ( %T %f use_for_multi_factory %( )% ) %==  true ) then
 begin
  [%t] fctr_manager_cache_value %( ( get_global_var ( 'INT' ) ) %, 'type"' %, %S )% ' data = new '
  [%t] fctr_manager_cache_value %( ( get_global_var ( 'INT' ) ) %, 'type"' %, %S )% ' ('
//	#			new java.lang.ref.WeakReference\<%f_type(%{INT})\> ([{%1N!=read-only}{obj}res])
  out_indent '			new java.lang.ref.WeakReference<'
  [%f] type %( ( get_global_var ( 'INT' ) ) )% '> ('
  if ( ( %1 |N ) %!= 'read-only' ) then
  begin
   'res' 
  end // if
  else
  begin
   'obj' 
  end // else
  ')'
//	#		);[{%1N=read-only}
  out_indent '		);'
  if ( ( %1 |N ) %== 'read-only' ) then
  begin
   #13#10

//	#		res = new %{INT}NConstWrapper (data[.%f_cache_postfix(%S,"read-write")].get ());
   out_indent '		res = new '
   ( get_global_var ( 'INT' ) |N ) 'ConstWrapper (data'
   if NOT-EMPTY
   begin
    '.'
    [%f] cache_postfix %( %S %, 'read-write' )% 
   end // if
   NOP
   '.get ());'
//	#		data[.%f_cache_postfix(%S,"read-only")] = new java.lang.ref.WeakReference\<%{INT}NConstWrapper\> (res);
   out_indent '		data'
   if NOT-EMPTY
   begin
    '.'
    [%f] cache_postfix %( %S %, 'read-only' )% 
   end // if
   NOP
   ' = new java.lang.ref.WeakReference<'
   ( get_global_var ( 'INT' ) |N ) 'ConstWrapper> (res);'
//	#		data.isRoFirst = true;]]
   out_indent '		data.isRoFirst = true;' 
  end // if
 end // if
 else
 begin
  [%t] fctr_manager_cache_value %( ( get_global_var ( 'INT' ) ) %, 'var"' %, %S )% ' data = new '
  [%t] fctr_manager_cache_value %( ( get_global_var ( 'INT' ) ) %, 'var"' %, %S )% ' ('
//	#			[{%1N!=read-only}{obj}res]
  out_indent '			'
  if ( ( %1 |N ) %!= 'read-only' ) then
  begin
   'res' 
  end // if
  else
  begin
   'obj' 
  end // else
//	#		);[{%1N=read-only}
  out_indent '		);'
  if ( ( %1 |N ) %== 'read-only' ) then
  begin
   #13#10

//	#		data[.%f_cache_postfix(%S,"read-only")] = new %{INT}NConstWrapper (data[.%f_cache_postfix(%S,"read-write")]);
   out_indent '		data'
   if NOT-EMPTY
   begin
    '.'
    [%f] cache_postfix %( %S %, 'read-only' )% 
   end // if
   NOP
   ' = new '
   ( get_global_var ( 'INT' ) |N ) 'ConstWrapper (data'
   if NOT-EMPTY
   begin
    '.'
    [%f] cache_postfix %( %S %, 'read-write' )% 
   end // if
   NOP
   ');'
//	#		data.isRoFirst = true;]}%t_fctr_manager_cache_value(%{INT},"type",%S) data = new %t_fctr_manager_cache_value(%{INT},"type",%S) (
   out_indent '		data.isRoFirst = true;' 
  end // if
 end // else
//	#		%f_to_java(%TNMap)_.put (memKey, data);
 out_indent '		'
 [%f] to_java %( %T |N 'Map' )% '_.put (memKey, data);'
//	#		%f_to_java(%TNIndexMap)_.put ([{%f_is_server_type(%{INT})=true}{data[.%f_cache_postfix(%S,"read-write")][{%T%f_use_for_synchro_factory()=true}.hashCode ()]}data[.%f_cache_postfix(%S,"read-write")][{%T%f_use_for_synchro_factory()=true}.get ()]._hash (Integer.MAX_VALUE)], memKey);
 out_indent '		'
 [%f] to_java %( %T |N 'IndexMap' )% '_.put ('
 if ( ( [%f] is_server_type %( ( get_global_var ( 'INT' ) ) )% ) %==  true ) then
 begin
  'data'
  if NOT-EMPTY
  begin
   '.'
   [%f] cache_postfix %( %S %, 'read-write' )% 
  end // if
  NOP
  if ( ( %T %f use_for_synchro_factory %( )% ) %==  true ) then
  begin
   '.get ()' 
  end // if
  '._hash (Integer.MAX_VALUE)' 
 end // if
 else
 begin
  'data'
  if NOT-EMPTY
  begin
   '.'
   [%f] cache_postfix %( %S %, 'read-write' )% 
  end // if
  NOP
  if ( ( %T %f use_for_synchro_factory %( )% ) %==  true ) then
  begin
   '.hashCode ()' 
  end // if
 end // else
 ', memKey);'
//#UC END# *4757C7C4005Afor470F576D0203*
; // create_new_combo_data


// дампит код реализации фабричного метода (не "создающего") для менеджера фабрик в случае
// использования общей памяти
//%f _fctr_mng_factory_mem_java_impl
implementation @ :: <<Interface>> <<factory>> ;
: fctr_mng_factory_mem_java_impl OBJECT IN %S
//#UC START# *4757C6DA0040for470F576D0203*
//	#			[{%2N=read-only}{if (singleActiveFactory_ == null) {
 out_indent '			'
 if ( ( %2 |N ) %== 'read-only' ) then
 begin
  #13#10

//	#			res = [{%T%f_use_for_synchro_factory()=false&%f_is_ro_fctr_exists(%S)=true}{singleActiveFactory_.%f_to_java(%SN) (<{, }%f_to_java(%CN)>);}new %t_fctr_manager_cache_value(%{INT},"var",%S) (
  out_indent '			res = '
  if ( ( %T %f use_for_synchro_factory %( )% ) %==  false AND 
    ( ( [%f] is_ro_fctr_exists %( %S )% ) %==  true  ) ) then
  begin
   'new '
   [%t] fctr_manager_cache_value %( ( get_global_var ( 'INT' ) ) %, 'var"' %, %S )% ' ('
//	#				singleActiveFactory_.%f_to_java(%SN) (<{, }%f_to_java(%CN)>)
   out_indent '				singleActiveFactory_.'
   [%f] to_java %( %S |N )% ' ('
   INTEGER VAR l_Counter l_Counter := 0
   for %S%C
   begin
    OBJECT IN %C
    if true then
    begin
     if ( l_Counter >0 ) then ( ', ' )
     [%f] to_java %( %C |N )% 
     ++! l_Counter
    end // if
   end // for C
   ')'
//	#			);][{%T%f_use_for_synchro_factory()=true}{
   out_indent '			);' 
  end // if
  else
  begin
   'singleActiveFactory_.'
   [%f] to_java %( %S |N )% ' ('
   INTEGER VAR l_Counter l_Counter := 0
   for %S%C
   begin
    OBJECT IN %C
    if true then
    begin
     if ( l_Counter >0 ) then ( ', ' )
     [%f] to_java %( %C |N )% 
     ++! l_Counter
    end // if
   end // for C
   ');' 
  end // else
  if ( ( %T %f use_for_synchro_factory %( )% ) %==  true ) then
  begin
   #13#10

//	#			ref = [{%f_is_ro_fctr_exists(%S)=true}{new java.lang.ref.WeakReference\<%t_ret(%{INT})\> (res);}new %t_fctr_manager_cache_value(%{INT},"type",%S) (
   out_indent '			ref = '
   if ( ( [%f] is_ro_fctr_exists %( %S )% ) %==  true ) then
   begin
    'new '
    [%t] fctr_manager_cache_value %( ( get_global_var ( 'INT' ) ) %, 'type"' %, %S )% ' ('
//	#				new java.lang.ref.WeakReference\<%t_ret(%{INT})\> (res)
    out_indent '				new java.lang.ref.WeakReference<'
    [%t] ret %( ( get_global_var ( 'INT' ) ) )% '> (res)'
//	#			);]
    out_indent '			);' 
   end // if
   else
   begin
    'new java.lang.ref.WeakReference<'
    [%t] ret %( ( get_global_var ( 'INT' ) ) )% '> (res);' 
   end // else
//	#			%f_to_java(%TNMap)_.put (memKey, ref);
   out_indent '			'
   [%f] to_java %( %T |N 'Map' )% '_.put (memKey, ref);'
//	#			%f_to_java(%TNIndexMap)_.put ([{%f_is_server_type(%{INT})=true}{res.hashCode ()}ref[.%f_cache_postfix(%S,"read-write")].get ()._hash (Integer.MAX_VALUE)], memKey);\
   out_indent '			'
   [%f] to_java %( %T |N 'IndexMap' )% '_.put ('
   if ( ( [%f] is_server_type %( ( get_global_var ( 'INT' ) ) )% ) %==  true ) then
   begin
    'ref'
    if NOT-EMPTY
    begin
     '.'
     [%f] cache_postfix %( %S %, 'read-write' )% 
    end // if
    NOP
    '.get ()._hash (Integer.MAX_VALUE)' 
   end // if
   else
   begin
    'res.hashCode ()' 
   end // else
   ', memKey);'
//	]}[{%T%f_use_for_synchro_factory()=true}{if (res != null && res[.%f_cache_postfix(%S,"read-write")] != null) {
  end // if
  else
  begin
   #13#10

//	#			%f_to_java(%TNMap)_.put (memKey, res);
   out_indent '			'
   [%f] to_java %( %T |N 'Map' )% '_.put (memKey, res);'
//	#			%f_to_java(%TNIndexMap)_.put ([{%f_is_server_type(%{INT})=true}{res[.%f_cache_postfix(%S,"read-write")]}res[.%f_cache_postfix(%S,"read-write")]._hash (Integer.MAX_VALUE)], memKey);}
   out_indent '			'
   [%f] to_java %( %T |N 'IndexMap' )% '_.put ('
   if ( ( [%f] is_server_type %( ( get_global_var ( 'INT' ) ) )% ) %==  true ) then
   begin
    'res'
    if NOT-EMPTY
    begin
     '.'
     [%f] cache_postfix %( %S %, 'read-write' )% 
    end // if
    NOP
    '._hash (Integer.MAX_VALUE)' 
   end // if
   else
   begin
    'res'
    if NOT-EMPTY
    begin
     '.'
     [%f] cache_postfix %( %S %, 'read-write' )% 
    end // if
    NOP
   end // else
   ', memKey);' 
  end // else
  '}'
  if ( ( %T %f use_for_synchro_factory %( )% ) %==  true ) then
  begin
   ' else {'
//	#				if (singleActiveFactory_ == null) {
   out_indent '				if (singleActiveFactory_ == null) {'
//	#					throw new [{%f_is_server_type(%{INT})=true}ru.garant.shared.CoreSrv.]NoActiveFactory ("%{INT}%P%PN.%PN.%SNFactory");
   out_indent '					throw new '
   if ( ( [%f] is_server_type %( ( get_global_var ( 'INT' ) ) )% ) %==  true ) then
   begin
    'ru.garant.shared.CoreSrv.' 
   end // if
   'NoActiveFactory ("'
   ( get_global_var ( 'INT' )  ->P ->P |N  ) '.'
   %P |N '.'
   %S |N 'Factory");'
//	#				}
   out_indent '				}'
//	#				res = new %t_fctr_manager_cache_value(%{INT},"var",%S) (singleActiveFactory_.%f_to_java(%SN) (<{, }%f_to_java(%CN)>));
   out_indent '				res = new '
   [%t] fctr_manager_cache_value %( ( get_global_var ( 'INT' ) ) %, 'var"' %, %S )% ' (singleActiveFactory_.'
   [%f] to_java %( %S |N )% ' ('
   INTEGER VAR l_Counter l_Counter := 0
   for %S%C
   begin
    OBJECT IN %C
    if true then
    begin
     if ( l_Counter >0 ) then ( ', ' )
     [%f] to_java %( %C |N )% 
     ++! l_Counter
    end // if
   end // for C
   '));'
//	#				res[.%f_cache_postfix(%S,"read-only")] = new %{INT}NConstWrapper (res[.%f_cache_postfix(%S,"read-write")]);
   out_indent '				res'
   if NOT-EMPTY
   begin
    '.'
    [%f] cache_postfix %( %S %, 'read-only' )% 
   end // if
   NOP
   ' = new '
   ( get_global_var ( 'INT' ) |N ) 'ConstWrapper (res'
   if NOT-EMPTY
   begin
    '.'
    [%f] cache_postfix %( %S %, 'read-write' )% 
   end // if
   NOP
   ');'
//	#				res.isRoFirst = true;
   out_indent '				res.isRoFirst = true;'
//	#				%f_to_java(%TNMap)_.put (memKey, res);
   out_indent '				'
   [%f] to_java %( %T |N 'Map' )% '_.put (memKey, res);'
//	#				%f_to_java(%TNIndexMap)_.put ([{%f_is_server_type(%{INT})=true}{res[.%f_cache_postfix(%S,"read-write")]}res[.%f_cache_postfix(%S,"read-write")].get ()._hash (Integer.MAX_VALUE)], memKey);
   out_indent '				'
   [%f] to_java %( %T |N 'IndexMap' )% '_.put ('
   if ( ( [%f] is_server_type %( ( get_global_var ( 'INT' ) ) )% ) %==  true ) then
   begin
    'res'
    if NOT-EMPTY
    begin
     '.'
     [%f] cache_postfix %( %S %, 'read-write' )% 
    end // if
    NOP
    '.get ()._hash (Integer.MAX_VALUE)' 
   end // if
   else
   begin
    'res'
    if NOT-EMPTY
    begin
     '.'
     [%f] cache_postfix %( %S %, 'read-write' )% 
    end // if
    NOP
   end // else
   ', memKey);'
//	#			}\
   out_indent '			}'
//	}if (ref != null && ref[.%f_cache_postfix(%S,"read-write")] != null && ref[.%f_cache_postfix(%S,"read-write")].get () != null) {
   '}if (ref != null && ref'
   if NOT-EMPTY
   begin
    '.'
    [%f] cache_postfix %( %S %, 'read-write' )% 
   end // if
   NOP
   ' != null && ref'
   if NOT-EMPTY
   begin
    '.'
    [%f] cache_postfix %( %S %, 'read-write' )% 
   end // if
   NOP
   '.get () != null) {'
//	#				res = new %{INT}NConstWrapper (ref[.%f_cache_postfix(%S,"read-write")].get ());
   out_indent '				res = new '
   ( get_global_var ( 'INT' ) |N ) 'ConstWrapper (ref'
   if NOT-EMPTY
   begin
    '.'
    [%f] cache_postfix %( %S %, 'read-write' )% 
   end // if
   NOP
   '.get ());'
//	#				ref[.%f_cache_postfix(%S,"read-only")] = new java.lang.ref.WeakReference\<%{INT}NConstWrapper\> (res);
   out_indent '				ref'
   if NOT-EMPTY
   begin
    '.'
    [%f] cache_postfix %( %S %, 'read-only' )% 
   end // if
   NOP
   ' = new java.lang.ref.WeakReference<'
   ( get_global_var ( 'INT' ) |N ) 'ConstWrapper> (res);'
//	#			} else {
   out_indent '			} else {'
//	#				if (singleActiveFactory_ == null) {
   out_indent '				if (singleActiveFactory_ == null) {'
//	#					throw new [{%f_is_server_type(%{INT})=true}ru.garant.shared.CoreSrv.]NoActiveFactory ("%{INT}%P%PN.%PN.%SNFactory");
   out_indent '					throw new '
   if ( ( [%f] is_server_type %( ( get_global_var ( 'INT' ) ) )% ) %==  true ) then
   begin
    'ru.garant.shared.CoreSrv.' 
   end // if
   'NoActiveFactory ("'
   ( get_global_var ( 'INT' )  ->P ->P |N  ) '.'
   %P |N '.'
   %S |N 'Factory");'
//	#				}
   out_indent '				}'
//	#				%t_ret(%{INT}) obj = singleActiveFactory_.%f_to_java(%SN) (<{, }%f_to_java(%CN)>);
   out_indent '				'
   [%t] ret %( ( get_global_var ( 'INT' ) ) )% ' obj = singleActiveFactory_.'
   [%f] to_java %( %S |N )% ' ('
   INTEGER VAR l_Counter l_Counter := 0
   for %S%C
   begin
    OBJECT IN %C
    if true then
    begin
     if ( l_Counter >0 ) then ( ', ' )
     [%f] to_java %( %C |N )% 
     ++! l_Counter
    end // if
   end // for C
   ');'
//	#				ref = new %t_fctr_manager_cache_value(%{INT},"type",%S) (
   out_indent '				ref = new '
   [%t] fctr_manager_cache_value %( ( get_global_var ( 'INT' ) ) %, 'type"' %, %S )% ' ('
//	#					new java.lang.ref.WeakReference\<%f_type(%{INT})\> (obj)
   out_indent '					new java.lang.ref.WeakReference<'
   [%f] type %( ( get_global_var ( 'INT' ) ) )% '> (obj)'
//	#				);
   out_indent '				);'
//	#				res = new %{INT}NConstWrapper (ref[.%f_cache_postfix(%S,"read-write")].get ());
   out_indent '				res = new '
   ( get_global_var ( 'INT' ) |N ) 'ConstWrapper (ref'
   if NOT-EMPTY
   begin
    '.'
    [%f] cache_postfix %( %S %, 'read-write' )% 
   end // if
   NOP
   '.get ());'
//	#				ref[.%f_cache_postfix(%S,"read-only")] = new java.lang.ref.WeakReference\<%{INT}NConstWrapper\> (res);
   out_indent '				ref'
   if NOT-EMPTY
   begin
    '.'
    [%f] cache_postfix %( %S %, 'read-only' )% 
   end // if
   NOP
   ' = new java.lang.ref.WeakReference<'
   ( get_global_var ( 'INT' ) |N ) 'ConstWrapper> (res);'
//	#				ref.isRoFirst = true;
   out_indent '				ref.isRoFirst = true;'
//	#				%f_to_java(%TNMap)_.put (memKey, ref);
   out_indent '				'
   [%f] to_java %( %T |N 'Map' )% '_.put (memKey, ref);'
//	#				%f_to_java(%TNIndexMap)_.put ([{%f_is_server_type(%{INT})=true}{ref[.%f_cache_postfix(%S,"read-write")].get ().hashCode ()}obj._hash (Integer.MAX_VALUE)], memKey);
   out_indent '				'
   [%f] to_java %( %T |N 'IndexMap' )% '_.put ('
   if ( ( [%f] is_server_type %( ( get_global_var ( 'INT' ) ) )% ) %==  true ) then
   begin
    'obj._hash (Integer.MAX_VALUE)' 
   end // if
   else
   begin
    'ref'
    if NOT-EMPTY
    begin
     '.'
     [%f] cache_postfix %( %S %, 'read-write' )% 
    end // if
    NOP
    '.get ().hashCode ()' 
   end // else
   ', memKey);'
//	#			}]]
   out_indent '			}' 
  end // if
  else
  begin
   'if (res != null && res'
   if NOT-EMPTY
   begin
    '.'
    [%f] cache_postfix %( %S %, 'read-write' )% 
   end // if
   NOP
   ' != null) {'
//	#				res[.%f_cache_postfix(%S,"read-only")] = new %{INT}NConstWrapper (res[.%f_cache_postfix(%S,"read-write")]);
   out_indent '				res'
   if NOT-EMPTY
   begin
    '.'
    [%f] cache_postfix %( %S %, 'read-only' )% 
   end // if
   NOP
   ' = new '
   ( get_global_var ( 'INT' ) |N ) 'ConstWrapper (res'
   if NOT-EMPTY
   begin
    '.'
    [%f] cache_postfix %( %S %, 'read-write' )% 
   end // if
   NOP
   ');'
//	#			} else {
   out_indent '			' 
  end // else
 end // if
 else
 begin
  'if (singleActiveFactory_ == null) {'
//	#				throw new [{%f_is_server_type(%{INT})=true}ru.garant.shared.CoreSrv.]NoActiveFactory ("%{INT}%P%PN.%PN.%SNFactory");
  out_indent '				throw new '
  if ( ( [%f] is_server_type %( ( get_global_var ( 'INT' ) ) )% ) %==  true ) then
  begin
   'ru.garant.shared.CoreSrv.' 
  end // if
  'NoActiveFactory ("'
  ( get_global_var ( 'INT' )  ->P ->P |N  ) '.'
  %P |N '.'
  %S |N 'Factory");'
//	#			}
  out_indent '			' 
 end // else
//#UC END# *4757C6DA0040for470F576D0203*
; // fctr_mng_factory_mem_java_impl


// дампит код дополнительной  инициализации ключа общей памяти (инициализирует ключ фабрики
// серванта)
//%f _init_factory_mem_key_java_impl
: init_factory_mem_key_java_impl OBJECT IN %S
//#UC START# *4757C67E03A1for470F576D0203*
//	[{%T%f_use_for_multi_factory()=true}\
 if ( ( %T %f use_for_multi_factory %( )% ) %==  true ) then
 begin
//	#		if (singleActiveFactory_ != null) {
  out_indent '		if (singleActiveFactory_ != null) {'
//	#			memKey.keyArg_ = singleActiveFactory_.key ();
  out_indent '			memKey.keyArg_ = singleActiveFactory_.key ();'
//	#		} else {
  out_indent '		} else {'
//	#			throw new [{%f_is_server_type(%{INT})=true}ru.garant.shared.CoreSrv.]NoActiveFactory ("%{INT}%P%PN.%PN.%SNFactory");
  out_indent '			throw new '
  if ( ( [%f] is_server_type %( ( get_global_var ( 'INT' ) ) )% ) %==  true ) then
  begin
   'ru.garant.shared.CoreSrv.' 
  end // if
  'NoActiveFactory ("'
  ( get_global_var ( 'INT' )  ->P ->P |N  ) '.'
  %P |N '.'
  %S |N 'Factory");'
//	#		}]
  out_indent '		}' 
 end // if
//#UC END# *4757C67E03A1for470F576D0203*
; // init_factory_mem_key_java_impl


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа AbstractInterface::Class::factory::Operation
//%f _is_factory
: is_factory OBJECT IN %S
//#UC START# *4B794201038Afor470F576D0203*
//	true
 true
//#UC END# *4B794201038Afor470F576D0203*
; // is_factory


// реализация абстрактного стереотипа Interface::Class::factory_op::Operation
// генерация  метода на интерфейсе абстрактной фабрики
//%f _abstract_factory_operation
: abstract_factory_operation OBJECT IN %S
//#UC START# *4B793F8302B9for470F576D0203*
//	[{%XU=fctr.java}%f_set_var(SELF_FCTR_PARAMS,"%S%f_factory_params("%1N")")\
 if ( ( %X |U ) %== 'fctr.java' ) then
 begin
  [%f] set_var %( 'SELF_FCTR_PARAMS' %, %S %f factory_params %( %1 |N )% )% 
//	%f_set_var(FCTR_MEM_PARAM,"[{%TS=FactoryMemory&<{}{%CS!=nokey}{%CC}>=0}%t_arg(%T,"inout") memKey]")\
  [%f] set_var %( 'FCTR_MEM_PARAM' %, if ( ( %T |S ) %== 'FactoryMemory' AND 
    ( 
   INTEGER VAR l_Counter l_Counter := 0
   for %S%C
   begin
    OBJECT IN %C
    if ( ( %C |S ) %!= 'nokey' ) then
    begin

     ++! l_Counter
    end // if
   end // for C
   l_Counter
   %== 0  ) ) then
  begin
   [%t] arg %( %T %, 'inout' )% ' memKey' 
  end // if
)% //	%f_set_var(RO_PARAM,"[{%S{const_type}=combo}boolean roMode]")\
  [%f] set_var %( 'RO_PARAM' %, if ( ( %S get_up ( 'const_type' ) ) %== 'combo' ) then
  begin
   'boolean roMode' 
  end // if
)% //	%f_set_var(FCTR_ALL_PARAMS,"%f_merge_string(", ","%{SELF_FCTR_PARAMS}N","%{FCTR_MEM_PARAM}N","%{RO_PARAM}N")")\
  [%f] set_var %( 'FCTR_ALL_PARAMS' %, [%f] merge_string %( %, ' "' %, ( get_global_var ( 'SELF_FCTR_PARAMS' ) |N ) %, ( get_global_var ( 'FCTR_MEM_PARAM' ) |N ) %, ( get_global_var ( 'RO_PARAM' ) |N ) )% )% 
//			public %t_ret(%{INT}) %f_to_java(%SN)%2N (%{FCTR_ALL_PARAMS}N)[ throws <{, }%f_type(%E)>];]
  '		public '
  [%t] ret %( ( get_global_var ( 'INT' ) ) )% ' '
  [%f] to_java %( %S |N )% %2 |N ' ('
  ( get_global_var ( 'FCTR_ALL_PARAMS' ) |N ) ')'
  if NOT-EMPTY
  begin
   ' throws '
   INTEGER VAR l_Counter l_Counter := 0
   for %S%E
   begin
    OBJECT IN %E
    if true then
    begin
     if ( l_Counter >0 ) then ( ', ' )
     [%f] type %( %E )% 
     ++! l_Counter
    end // if
   end // for E
  end // if
  NOP
  ';' 
 end // if
//#UC END# *4B793F8302B9for470F576D0203*
; // abstract_factory_operation


// реализация абстрактного стереотипа Interface::Class::factory_op::Operation
// генерация статического метода на фабрике инетрфейса
//%f _dump_factory_operation
: dump_factory_operation OBJECT IN %S
//#UC START# *4B793FC10112for470F576D0203*
//	[{%S{const_type}=combo}{%S%f_dump_factory_operation_impl()}%S%f_dump_factory_operation_impl("read-write")
 if ( ( %S get_up ( 'const_type' ) ) %== 'combo' ) then
 begin
  %S %f dump_factory_operation_impl %( 'read-write' )% 
//	
  #13#10

//	%S%f_dump_factory_operation_impl("read-only","Ro")]
  %S %f dump_factory_operation_impl %( 'read-only"' %, 'Ro' )% 
 end // if
 else
 begin
  %S %f dump_factory_operation_impl %( )% 
 end // else

//%f _dump_factory_operation_impl
; // dump_factory_operation

: dump_factory_operation_impl OBJECT IN %S
//	[{%XU=java}[{%S%f_is_cached()=true}#// Фабрика возвращает кэшированный экземпляр!
 if ( ( %X |U ) %== 'java' ) then
 begin
  if ( ( %S %f is_cached %( )% ) %==  true ) then
  begin
   out_indent '// Фабрика возвращает кэшированный экземпляр!'
//	]#%t_visibility(%S,"%XU")static %t_ret(%{INT},"%Ss") %f_to_java(%SN)%2N (%S%f_factory_params("%1N")) throws NoActiveFactory[{%f_need_conversion_exception(%S)=true}, ru.garant.shared.Core.Root.ImpossibleConversion]<, %f_type(%E)> {
  end // if
  out_indent [%t] visibility %( %S %, %X |U )% 'static '
  [%t] ret %( ( get_global_var ( 'INT' ) ) %, %S |s )% ' '
  [%f] to_java %( %S |N )% %2 |N ' ('
  %S %f factory_params %( %1 |N )% ') throws NoActiveFactory'
  if ( ( [%f] need_conversion_exception %( %S )% ) %==  true ) then
  begin
   ', ru.garant.shared.Core.Root.ImpossibleConversion' 
  end // if
  INTEGER VAR l_Counter l_Counter := 0
  for %S%E
  begin
   OBJECT IN %E
   if true then
   begin
    ', '
    [%f] type %( %E )% 
    ++! l_Counter
   end // if
  end // for E
  ' {'
//	[{%{INT}U!=%{FACTORY_PARENT}U}{#	return %f_type(%{FACTORY_PARENT})FactoryManager.%{FACTORY_PARENT}%f_fctr_mng_get_instance_name() ().%f_to_java(%SN)%2N (<{, }%f_to_java(%CN)>);}\
  if ( ( ( get_global_var ( 'INT' ) |U ) ) %!= ( ( get_global_var ( 'FACTORY_PARENT' ) |U ) ) ) then
  begin
//	#	%f_type(%{FACTORY_PARENT}) ret = %f_type(%{FACTORY_PARENT})FactoryManager.%{FACTORY_PARENT}%f_fctr_mng_get_instance_name() ().%f_to_java(%SN)%2N (<{, }%f_to_java(%CN)>);
   out_indent '	'
   [%f] type %( ( get_global_var ( 'FACTORY_PARENT' ) ) )% ' ret = '
   [%f] type %( ( get_global_var ( 'FACTORY_PARENT' ) ) )% 'FactoryManager.'
   ( get_global_var ( 'FACTORY_PARENT' ) %f fctr_mng_get_instance_name %( )% ) ' ().'
   [%f] to_java %( %S |N )% %2 |N ' ('
   INTEGER VAR l_Counter l_Counter := 0
   for %S%C
   begin
    OBJECT IN %C
    if true then
    begin
     if ( l_Counter >0 ) then ( ', ' )
     [%f] to_java %( %C |N )% 
     ++! l_Counter
    end // if
   end // for C
   ');'
//	#	if (ret instanceof %f_type(%{INT})) {
   out_indent '	if (ret instanceof '
   [%f] type %( ( get_global_var ( 'INT' ) ) )% ') {'
//	#		return (%f_type(%{INT})) ret;
   out_indent '		return ('
   [%f] type %( ( get_global_var ( 'INT' ) ) )% ') ret;'
//	#	} else {
   out_indent '	} else {'
//	#		throw new NoActiveFactory (%{INT}["%P%PN::%PN::%SNFactory"]);
   out_indent '		throw new NoActiveFactory ('
   ( get_global_var ( 'INT' ) ) 
   bind ( 
    OBJECT VAR %S
    if NOT-EMPTY
    begin
     %P ->P |N  '::'
     %P |N '::'
     %S |N 'Factory' 
    end // if
    NOP

   ) // bind
   ');'
//	#	}]
   out_indent '	}' 
  end // if
  else
  begin
   out_indent '	return '
   [%f] type %( ( get_global_var ( 'FACTORY_PARENT' ) ) )% 'FactoryManager.'
   ( get_global_var ( 'FACTORY_PARENT' ) %f fctr_mng_get_instance_name %( )% ) ' ().'
   [%f] to_java %( %S |N )% %2 |N ' ('
   INTEGER VAR l_Counter l_Counter := 0
   for %S%C
   begin
    OBJECT IN %C
    if true then
    begin
     if ( l_Counter >0 ) then ( ', ' )
     [%f] to_java %( %C |N )% 
     ++! l_Counter
    end // if
   end // for C
   ');' 
  end // else
//	#}]
  out_indent '}' 
 end // if
//#UC END# *4B793FC10112for470F576D0203*
; // dump_factory_operation_impl


// реализация абстрактного стереотипа Interface::Class::factory_op::Operation
// дампит реализацию конкретной read-write или read-only фабрики для менеджера фабрик, в качестве
// дополнительного параметра передается read-write или read-only в зависимости от того, какую
// фабрику нужно сдампить
//%f _factory_mng_factory_impl_java
: factory_mng_factory_impl_java OBJECT IN %S
//#UC START# *4B793D3F0059for470F576D0203*
//	%f_set_var(SELF_FCTR_PARAMS,"%S%f_factory_params("%2N")")\
 [%f] set_var %( 'SELF_FCTR_PARAMS' %, %S %f factory_params %( %2 |N )% )% 
//	%f_set_var(FCTR_MEM_PARAM,"[{%TS=FactoryMemory&<{}{%CS!=nokey}{%CC}>=0}%t_arg(%T,"inout") memKey]")\
 [%f] set_var %( 'FCTR_MEM_PARAM' %, if ( ( %T |S ) %== 'FactoryMemory' AND 
   ( 
  INTEGER VAR l_Counter l_Counter := 0
  for %S%C
  begin
   OBJECT IN %C
   if ( ( %C |S ) %!= 'nokey' ) then
   begin

    ++! l_Counter
   end // if
  end // for C
  l_Counter
  %== 0  ) ) then
 begin
  [%t] arg %( %T %, 'inout' )% ' memKey' 
 end // if
)% //	%f_set_var(RO_PARAM,"[{%S{const_type}=combo}boolean roMode]")\
 [%f] set_var %( 'RO_PARAM' %, if ( ( %S get_up ( 'const_type' ) ) %== 'combo' ) then
 begin
  'boolean roMode' 
 end // if
)% //	%f_set_var(FCTR_ALL_PARAMS,"%f_merge_string(", ","%{SELF_FCTR_PARAMS}N","%{FCTR_MEM_PARAM}N","%{RO_PARAM}N")")\
 [%f] set_var %( 'FCTR_ALL_PARAMS' %, [%f] merge_string %( %, ' "' %, ( get_global_var ( 'SELF_FCTR_PARAMS' ) |N ) %, ( get_global_var ( 'FCTR_MEM_PARAM' ) |N ) %, ( get_global_var ( 'RO_PARAM' ) |N ) )% )% 
//		public %t_ret(%{INT},"[{%{INT}S!=ServerInterface}%Ss]")[{%{INT}S!=ServerInterface&%2N=read-only}ConstWrapper] [{%{INT}S!=ServerInterface}{%SN%3N}%f_to_java(%SN%3N)] (%{SELF_FCTR_PARAMS}N) throws [{%f_is_server_type(%S)=true}ru.garant.shared.CoreSrv.]NoActiveFactory[{%f_need_conversion_exception(%S)=true}, ru.garant.shared.Core.Root.ImpossibleConversion]%S<, %f_type(%E)> {[{%f_is_it_cached(%S)=false}
 '	public '
 [%t] ret %( ( get_global_var ( 'INT' ) ) %, if ( ( ( get_global_var ( 'INT' ) |S ) ) %!= 'ServerInterface' ) then
 begin
  %S |s 
 end // if
)%  if ( ( ( get_global_var ( 'INT' ) |S ) ) %!= 'ServerInterface' AND 
   ( ( %2 |N ) %== 'read-only'  ) ) then
 begin
  'ConstWrapper' 
 end // if
 ' '
 if ( ( ( get_global_var ( 'INT' ) |S ) ) %!= 'ServerInterface' ) then
 begin
  [%f] to_java %( %S |N %3 |N )% 
 end // if
 else
 begin
  %S |N %3 |N 
 end // else
 ' ('
 ( get_global_var ( 'SELF_FCTR_PARAMS' ) |N ) ') throws '
 if ( ( [%f] is_server_type %( %S )% ) %==  true ) then
 begin
  'ru.garant.shared.CoreSrv.' 
 end // if
 'NoActiveFactory'
 if ( ( [%f] need_conversion_exception %( %S )% ) %==  true ) then
 begin
  ', ru.garant.shared.Core.Root.ImpossibleConversion' 
 end // if
 %S
 bind ( 
  OBJECT VAR %S
  INTEGER VAR l_Counter l_Counter := 0
  for %S%E
  begin
   OBJECT IN %E
   if true then
   begin
    ', '
    [%f] type %( %E )% 
    ++! l_Counter
   end // if
  end // for E

 ) // bind
  ' {'
 if ( ( [%f] is_it_cached %( %S )% ) %==  false ) then
 begin
  #13#10

//			if (singleActiveFactory_ == null) {
  '		if (singleActiveFactory_ == null) {'
//				throw new [{%f_is_server_type(%{INT})=true}ru.garant.shared.CoreSrv.]NoActiveFactory ("%{INT}%P%PN.%{INT}%PN.%{INT}NFactory");
  '			throw new '
  if ( ( [%f] is_server_type %( ( get_global_var ( 'INT' ) ) )% ) %==  true ) then
  begin
   'ru.garant.shared.CoreSrv.' 
  end // if
  'NoActiveFactory ("'
  ( get_global_var ( 'INT' )  ->P ->P |N  ) '.'
  ( get_global_var ( 'INT' )  ->P |N ) '.'
  ( get_global_var ( 'INT' ) |N ) 'Factory");'
//			}
  '		}'
//			[{%f_is_server_type(%{INT})=true&%2N=read-only}{return [{%2N=read-only}{singleActiveFactory_.%f_to_java(%SN) (<{, }%f_to_java(%CN)>[{%S{const_type}=combo}[{%Cx=true}, ]false])}new %{INT}NConstWrapper (
  '		'
  if ( ( [%f] is_server_type %( ( get_global_var ( 'INT' ) ) )% ) %==  true AND 
    ( ( %2 |N ) %== 'read-only'  ) ) then
  begin
   'try {'
//				org.omg.CORBA.Object obj = %f_dump_java_package(%{INT}%P).LibHomeFactory.get().getOrbFacet().getRootPoa().servant_to_reference(
   '			org.omg.CORBA.Object obj = '
   [%f] dump_java_package %( ( get_global_var ( 'INT' )  ->P ) )% '.LibHomeFactory.get().getOrbFacet().getRootPoa().servant_to_reference('
//					new %{INT}NConstWrapper (
   '				new '
   ( get_global_var ( 'INT' ) |N ) 'ConstWrapper ('
//						singleActiveFactory_.%f_to_java(%SN) (<{, }%f_to_java(%CN)>[{%S{const_type}=combo}[{%Cx=true}, ]true])
   '					singleActiveFactory_.'
   [%f] to_java %( %S |N )% ' ('
   INTEGER VAR l_Counter l_Counter := 0
   for %S%C
   begin
    OBJECT IN %C
    if true then
    begin
     if ( l_Counter >0 ) then ( ', ' )
     [%f] to_java %( %C |N )% 
     ++! l_Counter
    end // if
   end // for C
   if ( ( %S get_up ( 'const_type' ) ) %== 'combo' ) then
   begin
    if ( ( %C |x ) %==  true ) then
    begin
     ', ' 
    end // if
     true 
   end // if
   ')'
//					)
   '				)'
//				);
   '			);'
//				return %f_type(%{INT})Helper.narrow (obj);
   '			return '
   [%f] type %( ( get_global_var ( 'INT' ) ) )% 'Helper.narrow (obj);'
//	[<{}{}{%E}\
   if NOT-EMPTY
   begin
    INTEGER VAR l_Counter l_Counter := 0
    for %S%E
    begin
     OBJECT IN %E
     if true then
     begin
//			} catch (%f_type(%E) ex) {
      '		} catch ('
      [%f] type %( %E )% ' ex) {'
//				Logs.LOG_SEX(ex);
      '			Logs.LOG_SEX(ex);'
//				throw ex;
      '			throw ex;'
//	>]\

      ++! l_Counter
     end // if
    end // for E
   end // if
   NOP
//			} catch (Exception ex) {
   '		} catch (Exception ex) {'
//				Logs.LOG_SEX(ex);
   '			Logs.LOG_SEX(ex);'
//				throw new org.omg.CORBA.portable.UnknownException (ex);
   '			throw new org.omg.CORBA.portable.UnknownException (ex);'
//			}]
   '		}' 
  end // if
  else
  begin
   'return '
   if ( ( %2 |N ) %== 'read-only' ) then
   begin
    'new '
    ( get_global_var ( 'INT' ) |N ) 'ConstWrapper ('
//				singleActiveFactory_.%f_to_java(%SN) (<{, }%f_to_java(%CN)>[{%S{const_type}=combo}[{%Cx=true}, ]true])
    '			singleActiveFactory_.'
    [%f] to_java %( %S |N )% ' ('
    INTEGER VAR l_Counter l_Counter := 0
    for %S%C
    begin
     OBJECT IN %C
     if true then
     begin
      if ( l_Counter >0 ) then ( ', ' )
      [%f] to_java %( %C |N )% 
      ++! l_Counter
     end // if
    end // for C
    if ( ( %S get_up ( 'const_type' ) ) %== 'combo' ) then
    begin
     if ( ( %C |x ) %==  true ) then
     begin
      ', ' 
     end // if
      true 
    end // if
    ')'
//			)];}try {
    '		)' 
   end // if
   else
   begin
    'singleActiveFactory_.'
    [%f] to_java %( %S |N )% ' ('
    INTEGER VAR l_Counter l_Counter := 0
    for %S%C
    begin
     OBJECT IN %C
     if true then
     begin
      if ( l_Counter >0 ) then ( ', ' )
      [%f] to_java %( %C |N )% 
      ++! l_Counter
     end // if
    end // for C
    if ( ( %S get_up ( 'const_type' ) ) %== 'combo' ) then
    begin
     if ( ( %C |x ) %==  true ) then
     begin
      ', ' 
     end // if
      false 
    end // if
    ')' 
   end // else
   ';' 
  end // else
//	][{%f_is_it_cached(%S)=true}[{%TS!=FactoryMemory}{\n%f_fctr_mng_mem_java(%S,"%2N")}[{%Cx=true}
 end // if
 if ( ( [%f] is_it_cached %( %S )% ) %==  true ) then
 begin
  if ( ( %T |S ) %!= 'FactoryMemory' ) then
  begin
   if ( ( %C |x ) %==  true ) then
   begin
    #13#10

//			synchronized (cachedObjectsFor%f_to_borland(%SN)) {
    '		synchronized (cachedObjectsFor'
    [%f] to_borland %( %S |N )% ') {'
//				ObjectCreationIdFor%f_to_borland(%SN) key = new ObjectCreationIdFor%f_to_borland(%SN)(<{, }{"%CS"!="nokey"}%f_to_java(%CN)>);
    '			ObjectCreationIdFor'
    [%f] to_borland %( %S |N )% ' key = new ObjectCreationIdFor'
    [%f] to_borland %( %S |N )% '('
    INTEGER VAR l_Counter l_Counter := 0
    for %S%C
    begin
     OBJECT IN %C
     if ( ( %C |S ) %!= 'nokey' ) then
     begin
      if ( l_Counter >0 ) then ( ', ' )
      [%f] to_java %( %C |N )% 
      ++! l_Counter
     end // if
    end // for C
    ');'
//				[{%Ss=synchro}{%t_fctr_manager_cache_value(%{INT},"var",%S)}%t_ret(%{INT})[{%2N=read-only}ConstWrapper]] ret = [{%Ss=synchro}{cachedObjectsFor%f_to_borland(%SN).get (key);}null;
    '			'
    if ( ( %S |s ) %== 'synchro' ) then
    begin
     [%t] ret %( ( get_global_var ( 'INT' ) ) )% if ( ( %2 |N ) %== 'read-only' ) then
     begin
      'ConstWrapper' 
     end // if
    end // if
    else
    begin
     [%t] fctr_manager_cache_value %( ( get_global_var ( 'INT' ) ) %, 'var"' %, %S )% 
    end // else
    ' ret = '
    if ( ( %S |s ) %== 'synchro' ) then
    begin
     'null;'
//				%t_fctr_manager_cache_value(%{INT},"type",%S) ref = cachedObjectsFor%f_to_borland(%SN).get (key);
     '			'
     [%t] fctr_manager_cache_value %( ( get_global_var ( 'INT' ) ) %, 'type"' %, %S )% ' ref = cachedObjectsFor'
     [%f] to_borland %( %S |N )% '.get (key);'
//				if (ref != null) {
     '			if (ref != null) {'
//					ret = ref[.%f_cache_postfix(%S,"%2N")].get ();
     '				ret = ref'
     if NOT-EMPTY
     begin
      '.'
      [%f] cache_postfix %( %S %, %2 |N )% 
     end // if
     NOP
     '.get ();'
//				}]
     '			}' 
    end // if
    else
    begin
     'cachedObjectsFor'
     [%f] to_borland %( %S |N )% '.get (key);' 
    end // else
//				if (ret == null[{%f_is_ro_fctr_exists(%S)=true&%Ss!=synchro} || ret[.%f_cache_postfix(%S,"%2N")] == null]) {
    '			if (ret == null'
    if ( ( [%f] is_ro_fctr_exists %( %S )% ) %==  true AND 
      ( ( %S |s ) %!= 'synchro'  ) ) then
    begin
     ' || ret'
     if NOT-EMPTY
     begin
      '.'
      [%f] cache_postfix %( %S %, %2 |N )% 
     end // if
     NOP
     ' == null' 
    end // if
    ') {'
//				[{%2N=read-only}{	if (singleActiveFactory_ == null) {
    '			'
    if ( ( %2 |N ) %== 'read-only' ) then
    begin
     #13#10

//					ret = [{%Ss!=synchro&%f_is_ro_fctr_exists(%S)=true}{singleActiveFactory_.%f_to_java(%SN) (<{, }%f_to_java(%CN)>)[{%S{const_type}=combo}[{%Cx=true}, ]false]}new %t_fctr_manager_cache_value(%{INT},"var",%S) (
     '				ret = '
     if ( ( %S |s ) %!= 'synchro' AND 
       ( ( [%f] is_ro_fctr_exists %( %S )% ) %==  true  ) ) then
     begin
      'new '
      [%t] fctr_manager_cache_value %( ( get_global_var ( 'INT' ) ) %, 'var"' %, %S )% ' ('
//						singleActiveFactory_.%f_to_java(%SN) (<{, }%f_to_java(%CN)>[{%S{const_type}=combo}[{%Cx=true}, ]false])
      '					singleActiveFactory_.'
      [%f] to_java %( %S |N )% ' ('
      INTEGER VAR l_Counter l_Counter := 0
      for %S%C
      begin
       OBJECT IN %C
       if true then
       begin
        if ( l_Counter >0 ) then ( ', ' )
        [%f] to_java %( %C |N )% 
        ++! l_Counter
       end // if
      end // for C
      if ( ( %S get_up ( 'const_type' ) ) %== 'combo' ) then
      begin
       if ( ( %C |x ) %==  true ) then
       begin
        ', ' 
       end // if
        false 
      end // if
      ')'
//					)];[{%Ss=synchro}
      '				)' 
     end // if
     else
     begin
      'singleActiveFactory_.'
      [%f] to_java %( %S |N )% ' ('
      INTEGER VAR l_Counter l_Counter := 0
      for %S%C
      begin
       OBJECT IN %C
       if true then
       begin
        if ( l_Counter >0 ) then ( ', ' )
        [%f] to_java %( %C |N )% 
        ++! l_Counter
       end // if
      end // for C
      ')'
      if ( ( %S get_up ( 'const_type' ) ) %== 'combo' ) then
      begin
       if ( ( %C |x ) %==  true ) then
       begin
        ', ' 
       end // if
        false 
      end // if
     end // else
     ';'
     if ( ( %S |s ) %== 'synchro' ) then
     begin
      #13#10

//					ref = [{%f_is_ro_fctr_exists(%S)=true}{new java.lang.ref.WeakReference\<%t_ret(%{INT})\> (ret)}new %t_fctr_manager_cache_value(%{INT},"type",%S) (
      '				ref = '
      if ( ( [%f] is_ro_fctr_exists %( %S )% ) %==  true ) then
      begin
       'new '
       [%t] fctr_manager_cache_value %( ( get_global_var ( 'INT' ) ) %, 'type"' %, %S )% ' ('
//						new java.lang.ref.WeakReference\<%t_ret(%{INT})\> (ret)
       '					new java.lang.ref.WeakReference<'
       [%t] ret %( ( get_global_var ( 'INT' ) ) )% '> (ret)'
//					);]]
       '				);' 
      end // if
      else
      begin
       'new java.lang.ref.WeakReference<'
       [%t] ret %( ( get_global_var ( 'INT' ) ) )% '> (ret)' 
      end // else
     end // if
//					cachedObjectsFor%f_to_borland(%SN).put (key, [{%Ss=synchro}{ret}ref]);
     '				cachedObjectsFor'
     [%f] to_borland %( %S |N )% '.put (key, '
     if ( ( %S |s ) %== 'synchro' ) then
     begin
      'ref' 
     end // if
     else
     begin
      'ret' 
     end // else
     ');'
//					cachedObjectsIndexFor%f_to_borland(%SN).put ([{%f_is_server_type(%{INT})=false}{ret[{%Ss!=synchro}[.%f_cache_postfix(%S,"read-write")]]._hash (Integer.MAX_VALUE)}[{%Ss=synchro}{ret}ref][.%f_cache_postfix(%S,"read-write")]], key);
     '				cachedObjectsIndexFor'
     [%f] to_borland %( %S |N )% '.put ('
     if ( ( [%f] is_server_type %( ( get_global_var ( 'INT' ) ) )% ) %==  false ) then
     begin
      if ( ( %S |s ) %== 'synchro' ) then
      begin
       'ref' 
      end // if
      else
      begin
       'ret' 
      end // else
      if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-write' )% 
      end // if
      NOP
     end // if
     else
     begin
      'ret'
      if ( ( %S |s ) %!= 'synchro' ) then
      begin
       if NOT-EMPTY
       begin
        '.'
        [%f] cache_postfix %( %S %, 'read-write' )% 
       end // if
       NOP
      end // if
      '._hash (Integer.MAX_VALUE)' 
     end // else
     ', key);'
//				}	if ([{%Ss=synchro}{ret != null && ret[.%f_cache_postfix(%S,"read-write")] != null}ref != null && ref[.%f_cache_postfix(%S,"read-write")] != null && ref[.%f_cache_postfix(%S,"read-write")].get () != null]) {
     '			}	if ('
     if ( ( %S |s ) %== 'synchro' ) then
     begin
      'ref != null && ref'
      if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-write' )% 
      end // if
      NOP
      ' != null && ref'
      if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-write' )% 
      end // if
      NOP
      '.get () != null' 
     end // if
     else
     begin
      'ret != null && ret'
      if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-write' )% 
      end // if
      NOP
      ' != null' 
     end // else
     ') {'
//						[{%{INT}S=ServerInterface}{[{%Ss=synchro}{ret[.%f_cache_postfix(%S,"read-only")] = new %{INT}NConstWrapper (ret[.%f_cache_postfix(%S,"read-write")])}ret = new %{INT}NConstWrapper (ref[.%f_cache_postfix(%S,"read-write")].get ());
     '					'
     if ( ( ( get_global_var ( 'INT' ) |S ) ) %== 'ServerInterface' ) then
     begin
      ( get_global_var ( 'INT' ) |N ) 'ConstWrapper wrapper '
      if ( ( %S |s ) %== 'synchro' ) then
      begin
       'ret = new '
       ( get_global_var ( 'INT' ) |N ) 'ConstWrapper (ref'
       if NOT-EMPTY
       begin
        '.'
        [%f] cache_postfix %( %S %, 'read-write' )% 
       end // if
       NOP
       '.get ());'
//						= new java.lang.ref.WeakReference\<%{INT}NConstWrapper\> (
       '					= new java.lang.ref.WeakReference<'
       ( get_global_var ( 'INT' ) |N ) 'ConstWrapper> ('
//							ret
       '						ret'
//						)];
       '					)' 
      end // if
      else
      begin
       '= new '
       ( get_global_var ( 'INT' ) |N ) 'ConstWrapper (ret'
       if NOT-EMPTY
       begin
        '.'
        [%f] cache_postfix %( %S %, 'read-write' )% 
       end // if
       NOP
       ')' 
      end // else
      ';'
//						try {
      '					try {'
//							org.omg.CORBA.Object refObj = %f_dump_java_package(%{INT}%P).LibHomeFactory.get().getOrbFacet().getRootPoa().servant_to_reference(wrapper);
      '						org.omg.CORBA.Object refObj = '
      [%f] dump_java_package %( ( get_global_var ( 'INT' )  ->P ) )% '.LibHomeFactory.get().getOrbFacet().getRootPoa().servant_to_reference(wrapper);'
//							[{%Ss=synchro}{ret[.%f_cache_postfix(%S,"read-only")]}ref[.%f_cache_postfix(%S,"read-only")]] = %f_type(%{INT})Helper.narrow (refObj);
      '						'
      if ( ( %S |s ) %== 'synchro' ) then
      begin
       'ref'
       if NOT-EMPTY
       begin
        '.'
        [%f] cache_postfix %( %S %, 'read-only' )% 
       end // if
       NOP
      end // if
      else
      begin
       'ret'
       if NOT-EMPTY
       begin
        '.'
        [%f] cache_postfix %( %S %, 'read-only' )% 
       end // if
       NOP
      end // else
      ' = '
      [%f] type %( ( get_global_var ( 'INT' ) ) )% 'Helper.narrow (refObj);'
//	[<{}{}{%E}\
      if NOT-EMPTY
      begin
       INTEGER VAR l_Counter l_Counter := 0
       for %S%E
       begin
        OBJECT IN %E
        if true then
        begin
//						} catch (%f_type(%E) ex) {
         '					} catch ('
         [%f] type %( %E )% ' ex) {'
//							Logs.LOG_SEX(ex);
         '						Logs.LOG_SEX(ex);'
//							throw ex;
         '						throw ex;'
//	>]\

         ++! l_Counter
        end // if
       end // for E
      end // if
      NOP
//						} catch (Exception ex) {
      '					} catch (Exception ex) {'
//							Logs.LOG_SEX(ex);
      '						Logs.LOG_SEX(ex);'
//							throw new org.omg.CORBA.portable.UnknownException (ex);
      '						throw new org.omg.CORBA.portable.UnknownException (ex);'
//						}]
      '					}' 
     end // if
     else
     begin
      if ( ( %S |s ) %== 'synchro' ) then
      begin
       'ret = new '
       ( get_global_var ( 'INT' ) |N ) 'ConstWrapper (ref'
       if NOT-EMPTY
       begin
        '.'
        [%f] cache_postfix %( %S %, 'read-write' )% 
       end // if
       NOP
       '.get ());'
//						ref[.%f_cache_postfix(%S,"read-only")] = new java.lang.ref.WeakReference\<%{INT}NConstWrapper\> (
       '					ref'
       if NOT-EMPTY
       begin
        '.'
        [%f] cache_postfix %( %S %, 'read-only' )% 
       end // if
       NOP
       ' = new java.lang.ref.WeakReference<'
       ( get_global_var ( 'INT' ) |N ) 'ConstWrapper> ('
//							ret
       '						ret'
//						)];}%{INT}NConstWrapper wrapper [{%Ss=synchro}{= new %{INT}NConstWrapper (ret[.%f_cache_postfix(%S,"read-write")])}ret = new %{INT}NConstWrapper (ref[.%f_cache_postfix(%S,"read-write")].get ());
       '					)' 
      end // if
      else
      begin
       'ret'
       if NOT-EMPTY
       begin
        '.'
        [%f] cache_postfix %( %S %, 'read-only' )% 
       end // if
       NOP
       ' = new '
       ( get_global_var ( 'INT' ) |N ) 'ConstWrapper (ret'
       if NOT-EMPTY
       begin
        '.'
        [%f] cache_postfix %( %S %, 'read-write' )% 
       end // if
       NOP
       ')' 
      end // else
      ';' 
     end // else
//					} else {
     '				} else {'
//						if (singleActiveFactory_ == null) {
     '					if (singleActiveFactory_ == null) {'
//							throw new [{%f_is_server_type(%{INT})=true}ru.garant.shared.CoreSrv.]NoActiveFactory ("%{INT}%P%PN.%{INT}%PN.%{INT}NFactory");
     '						throw new '
     if ( ( [%f] is_server_type %( ( get_global_var ( 'INT' ) ) )% ) %==  true ) then
     begin
      'ru.garant.shared.CoreSrv.' 
     end // if
     'NoActiveFactory ("'
     ( get_global_var ( 'INT' )  ->P ->P |N  ) '.'
     ( get_global_var ( 'INT' )  ->P |N ) '.'
     ( get_global_var ( 'INT' ) |N ) 'Factory");'
//						}
     '					}'
//						[{%Ss!=synchro}{%t_ret(%{INT}) obj}ret] = [{%Ss!=synchro&%f_is_ro_fctr_exists(%S)=true}{singleActiveFactory_.%f_to_java(%SN) (<{, }%f_to_java(%CN)>)[{%S{const_type}=combo}[{%Cx=true}, ]true]}new %t_fctr_manager_cache_value(%{INT},"var",%S) (
     '					'
     if ( ( %S |s ) %!= 'synchro' ) then
     begin
      'ret' 
     end // if
     else
     begin
      [%t] ret %( ( get_global_var ( 'INT' ) ) )% ' obj' 
     end // else
     ' = '
     if ( ( %S |s ) %!= 'synchro' AND 
       ( ( [%f] is_ro_fctr_exists %( %S )% ) %==  true  ) ) then
     begin
      'new '
      [%t] fctr_manager_cache_value %( ( get_global_var ( 'INT' ) ) %, 'var"' %, %S )% ' ('
//							singleActiveFactory_.%f_to_java(%SN) (<{, }%f_to_java(%CN)>[{%S{const_type}=combo}[{%Cx=true}, ]true])
      '						singleActiveFactory_.'
      [%f] to_java %( %S |N )% ' ('
      INTEGER VAR l_Counter l_Counter := 0
      for %S%C
      begin
       OBJECT IN %C
       if true then
       begin
        if ( l_Counter >0 ) then ( ', ' )
        [%f] to_java %( %C |N )% 
        ++! l_Counter
       end // if
      end // for C
      if ( ( %S get_up ( 'const_type' ) ) %== 'combo' ) then
      begin
       if ( ( %C |x ) %==  true ) then
       begin
        ', ' 
       end // if
        true 
      end // if
      ')'
//						)];[{%Ss=synchro}{
      '					)' 
     end // if
     else
     begin
      'singleActiveFactory_.'
      [%f] to_java %( %S |N )% ' ('
      INTEGER VAR l_Counter l_Counter := 0
      for %S%C
      begin
       OBJECT IN %C
       if true then
       begin
        if ( l_Counter >0 ) then ( ', ' )
        [%f] to_java %( %C |N )% 
        ++! l_Counter
       end // if
      end // for C
      ')'
      if ( ( %S get_up ( 'const_type' ) ) %== 'combo' ) then
      begin
       if ( ( %C |x ) %==  true ) then
       begin
        ', ' 
       end // if
        true 
      end // if
     end // else
     ';'
     if ( ( %S |s ) %== 'synchro' ) then
     begin
      #13#10

//						ref = new %t_fctr_manager_cache_value(%{INT},"type",%S) (
      '					ref = new '
      [%t] fctr_manager_cache_value %( ( get_global_var ( 'INT' ) ) %, 'type"' %, %S )% ' ('
//							new java.lang.ref.WeakReference\<%f_type(%{INT})\> ([{%Ss!=synchro}{obj}ret])
      '						new java.lang.ref.WeakReference<'
      [%f] type %( ( get_global_var ( 'INT' ) ) )% '> ('
      if ( ( %S |s ) %!= 'synchro' ) then
      begin
       'ret' 
      end // if
      else
      begin
       'obj' 
      end // else
      ')'
//						);
      '					);'
//						ret = new %{INT}NConstWrapper (ref[.%f_cache_postfix(%S,"read-write")].get ());
      '					ret = new '
      ( get_global_var ( 'INT' ) |N ) 'ConstWrapper (ref'
      if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-write' )% 
      end // if
      NOP
      '.get ());'
//						ref[.%f_cache_postfix(%S,"read-only")] = new java.lang.ref.WeakReference\<%{INT}NConstWrapper\> (
      '					ref'
      if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-only' )% 
      end // if
      NOP
      ' = new java.lang.ref.WeakReference<'
      ( get_global_var ( 'INT' ) |N ) 'ConstWrapper> ('
//							ret
      '						ret'
//						);
      '					);'
//						ref.isRoFirst = true;]
      '					ref.isRoFirst = true;' 
     end // if
     else
     begin
      #13#10

//						[{%{INT}S=ServerInterface}{ret[.%f_cache_postfix(%S,"read-only")] = new %{INT}NConstWrapper (ret[.%f_cache_postfix(%S,"read-write")]);}%{INT}NConstWrapper wrapper = new %{INT}NConstWrapper (ret[.%f_cache_postfix(%S,"read-write")]);
      '					'
      if ( ( ( get_global_var ( 'INT' ) |S ) ) %== 'ServerInterface' ) then
      begin
       ( get_global_var ( 'INT' ) |N ) 'ConstWrapper wrapper = new '
       ( get_global_var ( 'INT' ) |N ) 'ConstWrapper (ret'
       if NOT-EMPTY
       begin
        '.'
        [%f] cache_postfix %( %S %, 'read-write' )% 
       end // if
       NOP
       ');'
//						try {
       '					try {'
//							org.omg.CORBA.Object refObj = %f_dump_java_package(%{INT}%P).LibHomeFactory.get().getOrbFacet().getRootPoa().servant_to_reference(wrapper);
       '						org.omg.CORBA.Object refObj = '
       [%f] dump_java_package %( ( get_global_var ( 'INT' )  ->P ) )% '.LibHomeFactory.get().getOrbFacet().getRootPoa().servant_to_reference(wrapper);'
//							ret[.%f_cache_postfix(%S,"read-only")] = %f_type(%{INT})Helper.narrow (refObj);
       '						ret'
       if NOT-EMPTY
       begin
        '.'
        [%f] cache_postfix %( %S %, 'read-only' )% 
       end // if
       NOP
       ' = '
       [%f] type %( ( get_global_var ( 'INT' ) ) )% 'Helper.narrow (refObj);'
//	[<{}{}{%E}\
       if NOT-EMPTY
       begin
        INTEGER VAR l_Counter l_Counter := 0
        for %S%E
        begin
         OBJECT IN %E
         if true then
         begin
//						} catch (%f_type(%E) ex) {
          '					} catch ('
          [%f] type %( %E )% ' ex) {'
//							Logs.LOG_SEX(ex);
          '						Logs.LOG_SEX(ex);'
//							throw ex;
          '						throw ex;'
//	>]\

          ++! l_Counter
         end // if
        end // for E
       end // if
       NOP
//						} catch (Exception ex) {
       '					} catch (Exception ex) {'
//							Logs.LOG_SEX(ex);
       '						Logs.LOG_SEX(ex);'
//							throw new org.omg.CORBA.portable.UnknownException (ex);
       '						throw new org.omg.CORBA.portable.UnknownException (ex);'
//						}]
       '					}' 
      end // if
      else
      begin
       'ret'
       if NOT-EMPTY
       begin
        '.'
        [%f] cache_postfix %( %S %, 'read-only' )% 
       end // if
       NOP
       ' = new '
       ( get_global_var ( 'INT' ) |N ) 'ConstWrapper (ret'
       if NOT-EMPTY
       begin
        '.'
        [%f] cache_postfix %( %S %, 'read-write' )% 
       end // if
       NOP
       ');' 
      end // else
//						ret.isRoFirst = true;}
      '					ret.isRoFirst = true;' 
     end // else
//						cachedObjectsFor%f_to_borland(%SN).put (key, [{%Ss=synchro}{ret}ref]);
     '					cachedObjectsFor'
     [%f] to_borland %( %S |N )% '.put (key, '
     if ( ( %S |s ) %== 'synchro' ) then
     begin
      'ref' 
     end // if
     else
     begin
      'ret' 
     end // else
     ');'
//						cachedObjectsIndexFor%f_to_borland(%SN).put ([{%f_is_server_type(%{INT})=false}{[{%Ss!=synchro}{obj}ret[.%f_cache_postfix(%S,"read-write")]]._hash (Integer.MAX_VALUE)}[{%Ss=synchro}{ret}ref][.%f_cache_postfix(%S,"read-write")][{%Ss=synchro}.hashCode ()]], key);
     '					cachedObjectsIndexFor'
     [%f] to_borland %( %S |N )% '.put ('
     if ( ( [%f] is_server_type %( ( get_global_var ( 'INT' ) ) )% ) %==  false ) then
     begin
      if ( ( %S |s ) %== 'synchro' ) then
      begin
       'ref' 
      end // if
      else
      begin
       'ret' 
      end // else
      if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-write' )% 
      end // if
      NOP
      if ( ( %S |s ) %== 'synchro' ) then
      begin
       '.hashCode ()' 
      end // if
     end // if
     else
     begin
      if ( ( %S |s ) %!= 'synchro' ) then
      begin
       'ret'
       if NOT-EMPTY
       begin
        '.'
        [%f] cache_postfix %( %S %, 'read-write' )% 
       end // if
       NOP
      end // if
      else
      begin
       'obj' 
      end // else
      '._hash (Integer.MAX_VALUE)' 
     end // else
     ', key);'
//					}]
     '				}' 
    end // if
    else
    begin
     '	if (singleActiveFactory_ == null) {'
//						throw new [{%f_is_server_type(%{INT})=true}ru.garant.shared.CoreSrv.]NoActiveFactory ("%{INT}%P%PN.%{INT}%PN.%{INT}NFactory");
     '					throw new '
     if ( ( [%f] is_server_type %( ( get_global_var ( 'INT' ) ) )% ) %==  true ) then
     begin
      'ru.garant.shared.CoreSrv.' 
     end // if
     'NoActiveFactory ("'
     ( get_global_var ( 'INT' )  ->P ->P |N  ) '.'
     ( get_global_var ( 'INT' )  ->P |N ) '.'
     ( get_global_var ( 'INT' ) |N ) 'Factory");'
//					}
     '				' 
    end // else
//				}[{%f_is_ro_fctr_exists(%S)=true&%2N=read-write} else if (
    '			}'
    if ( ( [%f] is_ro_fctr_exists %( %S )% ) %==  true AND 
      ( ( %2 |N ) %== 'read-write'  ) ) then
    begin
     ' else if ('
//					[{%Ss=synchro}{ret[.%f_cache_postfix(%S,"read-only")] != null
     '				'
     if ( ( %S |s ) %== 'synchro' ) then
     begin
      'ref != null'
//					&& ref[.%f_cache_postfix(%S,"read-only")] != null
      '				&& ref'
      if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-only' )% 
      end // if
      NOP
      ' != null'
//					&& ref[.%f_cache_postfix(%S,"read-only")].get () != null
      '				&& ref'
      if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-only' )% 
      end // if
      NOP
      '.get () != null'
//					&& ref.isRoFirst == true]
      '				&& ref.isRoFirst == true' 
     end // if
     else
     begin
      'ret'
      if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-only' )% 
      end // if
      NOP
      ' != null'
//					&& ret.isRoFirst == true}ref != null
      '				&& ret.isRoFirst == true' 
     end // else
//				) {
     '			) {'
//					[{%Ss=synchro}{ret[.%f_cache_postfix(%S,"read-only")].upgrade_rw ();
     '				'
     if ( ( %S |s ) %== 'synchro' ) then
     begin
      'ref'
      if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-only' )% 
      end // if
      NOP
      '.get ().upgrade_rw ();'
//					ref.isRoFirst = false;]
      '				ref.isRoFirst = false;' 
     end // if
     else
     begin
      'ret'
      if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-only' )% 
      end // if
      NOP
      '.upgrade_rw ();'
//					ret.isRoFirst = false;}ref[.%f_cache_postfix(%S,"read-only")].get ().upgrade_rw ();
      '				ret.isRoFirst = false;' 
     end // else
//				}]
     '			}' 
    end // if

//				[{%f_is_server_type(%{INT})=true&%2N=read-only&%Ss!=synchro}{return ret[{%Ss!=synchro}[.%f_cache_postfix(%S,"%2N")]];}try {

//					org.omg.CORBA.Object obj = %f_dump_java_package(%{INT}%P).LibHomeFactory.get().getOrbFacet().getRootPoa().servant_to_reference(ret[{%Ss!=synchro}[.%f_cache_postfix(%S,"%2N")]]);

//					return %f_type(%{INT})Helper.narrow (obj);

//				} catch (Exception ex) {

//					Logs.LOG_SEX (ex);

//				}

//				return null;]
//				return ret[{%Ss!=synchro}[.%f_cache_postfix(%S,"%2N")]];
    '			return ret'
    if ( ( %S |s ) %!= 'synchro' ) then
    begin
     if NOT-EMPTY
     begin
      '.'
      [%f] cache_postfix %( %S %, %2 |N )% 
     end // if
     NOP
    end // if
    ';'
//			}
    '		}'
//	][{%Cx=false}[{%Ss=synchro}
   end // if
   if ( ( %C |x ) %==  false ) then
   begin
    if ( ( %S |s ) %== 'synchro' ) then
    begin
     #13#10

//			%t_ret(%{INT})[{%2N=read-only}ConstWrapper] ret = null;]
     '		'
     [%t] ret %( ( get_global_var ( 'INT' ) ) )% if ( ( %2 |N ) %== 'read-only' ) then
     begin
      'ConstWrapper' 
     end // if
     ' ret = null;' 
    end // if
//			if (cachedObjectFor%f_to_borland(%SN) == null[{%f_is_ro_fctr_exists(%S)=false}{ || cachedObjectFor%f_to_borland(%SN)[.%f_cache_postfix(%S,"%2N")] == null[{%Ss=synchro} || cachedObjectFor%f_to_borland(%SN)[.%f_cache_postfix(%S,"%2N")].get () == null]}[{%Ss=synchro} || cachedObjectFor%f_to_borland(%SN).get () == null]]) {
    '		if (cachedObjectFor'
    [%f] to_borland %( %S |N )% ' == null'
    if ( ( [%f] is_ro_fctr_exists %( %S )% ) %==  false ) then
    begin
     if ( ( %S |s ) %== 'synchro' ) then
     begin
      ' || cachedObjectFor'
      [%f] to_borland %( %S |N )% '.get () == null' 
     end // if
    end // if
    else
    begin
     ' || cachedObjectFor'
     [%f] to_borland %( %S |N )% if NOT-EMPTY
     begin
      '.'
      [%f] cache_postfix %( %S %, %2 |N )% 
     end // if
     NOP
     ' == null'
     if ( ( %S |s ) %== 'synchro' ) then
     begin
      ' || cachedObjectFor'
      [%f] to_borland %( %S |N )% if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, %2 |N )% 
      end // if
      NOP
      '.get () == null' 
     end // if
    end // else
    ') {'
//				synchronized (sMutexFor%f_to_borland(%SN)) {
    '			synchronized (sMutexFor'
    [%f] to_borland %( %S |N )% ') {'
//					if (cachedObjectFor%f_to_borland(%SN) == null[{%f_is_ro_fctr_exists(%S)=false}{ || cachedObjectFor%f_to_borland(%SN)[.%f_cache_postfix(%S,"%2N")] == null[{%Ss=synchro} || cachedObjectFor%f_to_borland(%SN)[.%f_cache_postfix(%S,"%2N")].get () == null]}[{%Ss=synchro} || cachedObjectFor%f_to_borland(%SN).get () == null]]) {
    '				if (cachedObjectFor'
    [%f] to_borland %( %S |N )% ' == null'
    if ( ( [%f] is_ro_fctr_exists %( %S )% ) %==  false ) then
    begin
     if ( ( %S |s ) %== 'synchro' ) then
     begin
      ' || cachedObjectFor'
      [%f] to_borland %( %S |N )% '.get () == null' 
     end // if
    end // if
    else
    begin
     ' || cachedObjectFor'
     [%f] to_borland %( %S |N )% if NOT-EMPTY
     begin
      '.'
      [%f] cache_postfix %( %S %, %2 |N )% 
     end // if
     NOP
     ' == null'
     if ( ( %S |s ) %== 'synchro' ) then
     begin
      ' || cachedObjectFor'
      [%f] to_borland %( %S |N )% if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, %2 |N )% 
      end // if
      NOP
      '.get () == null' 
     end // if
    end // else
    ') {'
//					[{%2N=read-only}{	if (singleActiveFactory_ == null) {
    '				'
    if ( ( %2 |N ) %== 'read-only' ) then
    begin
     #13#10

//						[{%Ss=synchro}{cachedObjectFor%f_to_borland(%SN)}ret] = [{%f_is_ro_fctr_exists(%S)=true&%Ss!=synchro}{singleActiveFactory_.%f_to_java(%SN) (<{, }%f_to_java(%CN)>);}new %t_fctr_manager_cache_value(%{INT},"var",%S) (
     '					'
     if ( ( %S |s ) %== 'synchro' ) then
     begin
      'ret' 
     end // if
     else
     begin
      'cachedObjectFor'
      [%f] to_borland %( %S |N )% 
     end // else
     ' = '
     if ( ( [%f] is_ro_fctr_exists %( %S )% ) %==  true AND 
       ( ( %S |s ) %!= 'synchro'  ) ) then
     begin
      'new '
      [%t] fctr_manager_cache_value %( ( get_global_var ( 'INT' ) ) %, 'var"' %, %S )% ' ('
//							singleActiveFactory_.%f_to_java(%SN) (<{, }%f_to_java(%CN)>)
      '						singleActiveFactory_.'
      [%f] to_java %( %S |N )% ' ('
      INTEGER VAR l_Counter l_Counter := 0
      for %S%C
      begin
       OBJECT IN %C
       if true then
       begin
        if ( l_Counter >0 ) then ( ', ' )
        [%f] to_java %( %C |N )% 
        ++! l_Counter
       end // if
      end // for C
      ')'
//						);][{%f_is_server_type(%{INT})=true}
      '					);' 
     end // if
     else
     begin
      'singleActiveFactory_.'
      [%f] to_java %( %S |N )% ' ('
      INTEGER VAR l_Counter l_Counter := 0
      for %S%C
      begin
       OBJECT IN %C
       if true then
       begin
        if ( l_Counter >0 ) then ( ', ' )
        [%f] to_java %( %C |N )% 
        ++! l_Counter
       end // if
      end // for C
      ');' 
     end // else
     if ( ( [%f] is_server_type %( ( get_global_var ( 'INT' ) ) )% ) %==  true ) then
     begin
      #13#10

//						cachedObjectHashFor%f_to_borland(%SN)_ = new Integer ([{%Ss=synchro}{cachedObjectFor%f_to_borland(%SN)[.%f_cache_postfix(%S,"read-write")]}ret]._hash (Integer.MAX_VALUE));][{%Ss=synchro}
      '					cachedObjectHashFor'
      [%f] to_borland %( %S |N )% '_ = new Integer ('
      if ( ( %S |s ) %== 'synchro' ) then
      begin
       'ret' 
      end // if
      else
      begin
       'cachedObjectFor'
       [%f] to_borland %( %S |N )% if NOT-EMPTY
       begin
        '.'
        [%f] cache_postfix %( %S %, 'read-write' )% 
       end // if
       NOP
      end // else
      '._hash (Integer.MAX_VALUE));' 
     end // if
     if ( ( %S |s ) %== 'synchro' ) then
     begin
      #13#10

//						cachedObjectFor%f_to_borland(%SN) = [{%f_is_ro_fctr_exists(%S)=true}{new java.lang.ref.WeakReference\<%t_ret(%{INT})\> (ret)}new %t_fctr_manager_cache_value(%{INT},"type",%S) (
      '					cachedObjectFor'
      [%f] to_borland %( %S |N )% ' = '
      if ( ( [%f] is_ro_fctr_exists %( %S )% ) %==  true ) then
      begin
       'new '
       [%t] fctr_manager_cache_value %( ( get_global_var ( 'INT' ) ) %, 'type"' %, %S )% ' ('
//							new java.lang.ref.WeakReference\<%t_ret(%{INT})\> (ret)
       '						new java.lang.ref.WeakReference<'
       [%t] ret %( ( get_global_var ( 'INT' ) ) )% '> (ret)'
//						)];]
       '					)' 
      end // if
      else
      begin
       'new java.lang.ref.WeakReference<'
       [%t] ret %( ( get_global_var ( 'INT' ) ) )% '> (ret)' 
      end // else
      ';' 
     end // if
//					}	if (cachedObjectFor%f_to_borland(%SN) != null && cachedObjectFor%f_to_borland(%SN)[.%f_cache_postfix(%S,"read-write")] != null[{%Ss=synchro} && cachedObjectFor%f_to_borland(%SN)[.%f_cache_postfix(%S,"read-write")].get () != null]) {
     '				}	if (cachedObjectFor'
     [%f] to_borland %( %S |N )% ' != null && cachedObjectFor'
     [%f] to_borland %( %S |N )% if NOT-EMPTY
     begin
      '.'
      [%f] cache_postfix %( %S %, 'read-write' )% 
     end // if
     NOP
     ' != null'
     if ( ( %S |s ) %== 'synchro' ) then
     begin
      ' && cachedObjectFor'
      [%f] to_borland %( %S |N )% if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-write' )% 
      end // if
      NOP
      '.get () != null' 
     end // if
     ') {'
//							[{%{INT}S=ServerInterface}{[{%Ss=synchro}{cachedObjectFor%f_to_borland(%SN)[.%f_cache_postfix(%S,"read-only")] = new %{INT}NConstWrapper (cachedObjectFor%f_to_borland(%SN)[.%f_cache_postfix(%S,"read-write")]);}ret = new %{INT}NConstWrapper(cachedObjectFor%f_to_borland(%SN)[.%f_cache_postfix(%S,"read-write")].get ());
     '						'
     if ( ( ( get_global_var ( 'INT' ) |S ) ) %== 'ServerInterface' ) then
     begin
      ( get_global_var ( 'INT' ) |N ) 'ConstWrapper wrapper = new '
      ( get_global_var ( 'INT' ) |N ) 'ConstWrapper (cachedObjectFor'
      [%f] to_borland %( %S |N )% if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-write' )% 
      end // if
      NOP
      ');'
//							try {
      '						try {'
//								org.omg.CORBA.Object refObj = %f_dump_java_package(%{INT}%P).LibHomeFactory.get().getOrbFacet().getRootPoa().servant_to_reference(wrapper);
      '							org.omg.CORBA.Object refObj = '
      [%f] dump_java_package %( ( get_global_var ( 'INT' )  ->P ) )% '.LibHomeFactory.get().getOrbFacet().getRootPoa().servant_to_reference(wrapper);'
//								cachedObjectFor%f_to_borland(%SN)[.%f_cache_postfix(%S,"read-only")] = %f_type(%{INT})Helper.narrow (refObj);
      '							cachedObjectFor'
      [%f] to_borland %( %S |N )% if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-only' )% 
      end // if
      NOP
      ' = '
      [%f] type %( ( get_global_var ( 'INT' ) ) )% 'Helper.narrow (refObj);'
//	[<{}{}{%E}\
      if NOT-EMPTY
      begin
       INTEGER VAR l_Counter l_Counter := 0
       for %S%E
       begin
        OBJECT IN %E
        if true then
        begin
//							} catch (%f_type(%E) ex) {
         '						} catch ('
         [%f] type %( %E )% ' ex) {'
//								Logs.LOG_SEX(ex);
         '							Logs.LOG_SEX(ex);'
//								throw ex;
         '							throw ex;'
//	>]\

         ++! l_Counter
        end // if
       end // for E
      end // if
      NOP
//							} catch (Exception ex) {
      '						} catch (Exception ex) {'
//								Logs.LOG_SEX(ex);
      '							Logs.LOG_SEX(ex);'
//								throw new org.omg.CORBA.portable.UnknownException (ex);
      '							throw new org.omg.CORBA.portable.UnknownException (ex);'
//							}]
      '						}' 
     end // if
     else
     begin
      if ( ( %S |s ) %== 'synchro' ) then
      begin
       'ret = new '
       ( get_global_var ( 'INT' ) |N ) 'ConstWrapper(cachedObjectFor'
       [%f] to_borland %( %S |N )% if NOT-EMPTY
       begin
        '.'
        [%f] cache_postfix %( %S %, 'read-write' )% 
       end // if
       NOP
       '.get ());'
//							cachedObjectFor%f_to_borland(%SN)[.%f_cache_postfix(%S,"read-only")] = new java.lang.ref.WeakReference\<%{INT}NConstWrapper\> (
       '						cachedObjectFor'
       [%f] to_borland %( %S |N )% if NOT-EMPTY
       begin
        '.'
        [%f] cache_postfix %( %S %, 'read-only' )% 
       end // if
       NOP
       ' = new java.lang.ref.WeakReference<'
       ( get_global_var ( 'INT' ) |N ) 'ConstWrapper> ('
//								ret
       '							ret'
//							);]}%{INT}NConstWrapper wrapper = new %{INT}NConstWrapper (cachedObjectFor%f_to_borland(%SN)[.%f_cache_postfix(%S,"read-write")]);
       '						);' 
      end // if
      else
      begin
       'cachedObjectFor'
       [%f] to_borland %( %S |N )% if NOT-EMPTY
       begin
        '.'
        [%f] cache_postfix %( %S %, 'read-only' )% 
       end // if
       NOP
       ' = new '
       ( get_global_var ( 'INT' ) |N ) 'ConstWrapper (cachedObjectFor'
       [%f] to_borland %( %S |N )% if NOT-EMPTY
       begin
        '.'
        [%f] cache_postfix %( %S %, 'read-write' )% 
       end // if
       NOP
       ');' 
      end // else
     end // else
//						} else {
     '					} else {'
//							if (singleActiveFactory_ == null) {
     '						if (singleActiveFactory_ == null) {'
//								throw new [{%f_is_server_type(%{INT})=true}ru.garant.shared.CoreSrv.]NoActiveFactory ("%{INT}%P%PN.%{INT}%PN.%{INT}NFactory");
     '							throw new '
     if ( ( [%f] is_server_type %( ( get_global_var ( 'INT' ) ) )% ) %==  true ) then
     begin
      'ru.garant.shared.CoreSrv.' 
     end // if
     'NoActiveFactory ("'
     ( get_global_var ( 'INT' )  ->P ->P |N  ) '.'
     ( get_global_var ( 'INT' )  ->P |N ) '.'
     ( get_global_var ( 'INT' ) |N ) 'Factory");'
//							}
     '						}'
//							[{%Ss=synchro}{cachedObjectFor%f_to_borland(%SN)}%t_ret(%{INT}) obj] = [{%f_is_ro_fctr_exists(%S)=true&%Ss!=synchro}{singleActiveFactory_.%f_to_java(%SN) (<{, }%f_to_java(%CN)>[{%S{const_type}=combo}[{%Cx=true}, ]true]);}new %t_fctr_manager_cache_value(%{INT},"var",%S) (
     '						'
     if ( ( %S |s ) %== 'synchro' ) then
     begin
      [%t] ret %( ( get_global_var ( 'INT' ) ) )% ' obj' 
     end // if
     else
     begin
      'cachedObjectFor'
      [%f] to_borland %( %S |N )% 
     end // else
     ' = '
     if ( ( [%f] is_ro_fctr_exists %( %S )% ) %==  true AND 
       ( ( %S |s ) %!= 'synchro'  ) ) then
     begin
      'new '
      [%t] fctr_manager_cache_value %( ( get_global_var ( 'INT' ) ) %, 'var"' %, %S )% ' ('
//								singleActiveFactory_.%f_to_java(%SN) (<{, }%f_to_java(%CN)>[{%S{const_type}=combo}[{%Cx=true}, ]true])
      '							singleActiveFactory_.'
      [%f] to_java %( %S |N )% ' ('
      INTEGER VAR l_Counter l_Counter := 0
      for %S%C
      begin
       OBJECT IN %C
       if true then
       begin
        if ( l_Counter >0 ) then ( ', ' )
        [%f] to_java %( %C |N )% 
        ++! l_Counter
       end // if
      end // for C
      if ( ( %S get_up ( 'const_type' ) ) %== 'combo' ) then
      begin
       if ( ( %C |x ) %==  true ) then
       begin
        ', ' 
       end // if
        true 
      end // if
      ')'
//							);][{%f_is_server_type(%{INT})=true}[{%Ss!=synchro}
      '						);' 
     end // if
     else
     begin
      'singleActiveFactory_.'
      [%f] to_java %( %S |N )% ' ('
      INTEGER VAR l_Counter l_Counter := 0
      for %S%C
      begin
       OBJECT IN %C
       if true then
       begin
        if ( l_Counter >0 ) then ( ', ' )
        [%f] to_java %( %C |N )% 
        ++! l_Counter
       end // if
      end // for C
      if ( ( %S get_up ( 'const_type' ) ) %== 'combo' ) then
      begin
       if ( ( %C |x ) %==  true ) then
       begin
        ', ' 
       end // if
        true 
      end // if
      ');' 
     end // else
     if ( ( [%f] is_server_type %( ( get_global_var ( 'INT' ) ) )% ) %==  true ) then
     begin
      if ( ( %S |s ) %!= 'synchro' ) then
      begin
       #13#10

//							%{INT}NConstWrapper wrapper = new %{INT}NConstWrapper (cachedObjectFor%f_to_borland(%SN)[.%f_cache_postfix(%S,"read-write")]);
       '						'
       ( get_global_var ( 'INT' ) |N ) 'ConstWrapper wrapper = new '
       ( get_global_var ( 'INT' ) |N ) 'ConstWrapper (cachedObjectFor'
       [%f] to_borland %( %S |N )% if NOT-EMPTY
       begin
        '.'
        [%f] cache_postfix %( %S %, 'read-write' )% 
       end // if
       NOP
       ');'
//							try {
       '						try {'
//								org.omg.CORBA.Object refObj = %f_dump_java_package(%{INT}%P).LibHomeFactory.get().getOrbFacet().getRootPoa().servant_to_reference(wrapper);
       '							org.omg.CORBA.Object refObj = '
       [%f] dump_java_package %( ( get_global_var ( 'INT' )  ->P ) )% '.LibHomeFactory.get().getOrbFacet().getRootPoa().servant_to_reference(wrapper);'
//								cachedObjectFor%f_to_borland(%SN)[.%f_cache_postfix(%S,"%2N")] = %f_type(%{INT})Helper.narrow (refObj);
       '							cachedObjectFor'
       [%f] to_borland %( %S |N )% if NOT-EMPTY
       begin
        '.'
        [%f] cache_postfix %( %S %, %2 |N )% 
       end // if
       NOP
       ' = '
       [%f] type %( ( get_global_var ( 'INT' ) ) )% 'Helper.narrow (refObj);'
//	[<{}{}{%E}\
       if NOT-EMPTY
       begin
        INTEGER VAR l_Counter l_Counter := 0
        for %S%E
        begin
         OBJECT IN %E
         if true then
         begin
//							} catch (%f_type(%E) ex) {
          '						} catch ('
          [%f] type %( %E )% ' ex) {'
//								Logs.LOG_SEX(ex);
          '							Logs.LOG_SEX(ex);'
//								throw ex;
          '							throw ex;'
//	>]\

          ++! l_Counter
         end // if
        end // for E
       end // if
       NOP
//							} catch (Exception ex) {
       '						} catch (Exception ex) {'
//								Logs.LOG_SEX(ex);
       '							Logs.LOG_SEX(ex);'
//								throw new org.omg.CORBA.portable.UnknownException (ex);
       '							throw new org.omg.CORBA.portable.UnknownException (ex);'
//							}]
       '						}' 
      end // if
//							cachedObjectHashFor%f_to_borland(%SN)_ = new Integer ([{%Ss=synchro}{cachedObjectFor%f_to_borland(%SN)[.%f_cache_postfix(%S,"read-write")]}obj]._hash (Integer.MAX_VALUE));][{%Ss=synchro}
      '						cachedObjectHashFor'
      [%f] to_borland %( %S |N )% '_ = new Integer ('
      if ( ( %S |s ) %== 'synchro' ) then
      begin
       'obj' 
      end // if
      else
      begin
       'cachedObjectFor'
       [%f] to_borland %( %S |N )% if NOT-EMPTY
       begin
        '.'
        [%f] cache_postfix %( %S %, 'read-write' )% 
       end // if
       NOP
      end // else
      '._hash (Integer.MAX_VALUE));' 
     end // if
     if ( ( %S |s ) %== 'synchro' ) then
     begin
      #13#10

//							cachedObjectFor%f_to_borland(%SN) = [{%f_is_ro_fctr_exists(%S)=true}{new java.lang.ref.WeakReference\<%t_ret(%{INT})\> (ret)}new %t_fctr_manager_cache_value(%{INT},"type",%S) (
      '						cachedObjectFor'
      [%f] to_borland %( %S |N )% ' = '
      if ( ( [%f] is_ro_fctr_exists %( %S )% ) %==  true ) then
      begin
       'new '
       [%t] fctr_manager_cache_value %( ( get_global_var ( 'INT' ) ) %, 'type"' %, %S )% ' ('
//								new java.lang.ref.WeakReference\<%t_ret(%{INT})\> (obj)
       '							new java.lang.ref.WeakReference<'
       [%t] ret %( ( get_global_var ( 'INT' ) ) )% '> (obj)'
//							)];
       '						)' 
      end // if
      else
      begin
       'new java.lang.ref.WeakReference<'
       [%t] ret %( ( get_global_var ( 'INT' ) ) )% '> (ret)' 
      end // else
      ';'
//							ret = new %{INT}NConstWrapper (cachedObjectFor%f_to_borland(%SN)[.%f_cache_postfix(%S,"read-write")].get ());
      '						ret = new '
      ( get_global_var ( 'INT' ) |N ) 'ConstWrapper (cachedObjectFor'
      [%f] to_borland %( %S |N )% if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-write' )% 
      end // if
      NOP
      '.get ());'
//							cachedObjectFor%f_to_borland(%SN)[.%f_cache_postfix(%S,"read-only")] = new [{%Ss=synchro}{%{INT}NConstWrapper (cachedObjectFor%f_to_borland(%SN)[.%f_cache_postfix(%S,"read-write")])}java.lang.ref.WeakReference\<%{INT}NConstWrapper\> (
      '						cachedObjectFor'
      [%f] to_borland %( %S |N )% if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-only' )% 
      end // if
      NOP
      ' = new '
      if ( ( %S |s ) %== 'synchro' ) then
      begin
       'java.lang.ref.WeakReference<'
       ( get_global_var ( 'INT' ) |N ) 'ConstWrapper> ('
//								ret
       '							ret'
//							)];]
       '						)' 
      end // if
      else
      begin
       ( get_global_var ( 'INT' ) |N ) 'ConstWrapper (cachedObjectFor'
       [%f] to_borland %( %S |N )% if NOT-EMPTY
       begin
        '.'
        [%f] cache_postfix %( %S %, 'read-write' )% 
       end // if
       NOP
       ')' 
      end // else
      ';' 
     end // if
//							cachedObjectFor%f_to_borland(%SN).isRoFirst = true;
     '						cachedObjectFor'
     [%f] to_borland %( %S |N )% '.isRoFirst = true;'
//						}
     '					}'
//					]}
     '				' 
    end // if
    else
    begin
     '	if (singleActiveFactory_ == null) {'
//							throw new [{%f_is_server_type(%{INT})=true}ru.garant.shared.CoreSrv.]NoActiveFactory ("%{INT}%P%PN.%{INT}%PN.%{INT}NFactory");
     '						throw new '
     if ( ( [%f] is_server_type %( ( get_global_var ( 'INT' ) ) )% ) %==  true ) then
     begin
      'ru.garant.shared.CoreSrv.' 
     end // if
     'NoActiveFactory ("'
     ( get_global_var ( 'INT' )  ->P ->P |N  ) '.'
     ( get_global_var ( 'INT' )  ->P |N ) '.'
     ( get_global_var ( 'INT' ) |N ) 'Factory");'
//						}
     '					' 
    end // else
    '}'
//				}
    '			}'
//			}[{%f_is_ro_fctr_exists(%S)=true&%2N=read-write}
    '		}'
    if ( ( [%f] is_ro_fctr_exists %( %S )% ) %==  true AND 
      ( ( %2 |N ) %== 'read-write'  ) ) then
    begin
     #13#10

//			if (
     '		if ('
//				cachedObjectFor%f_to_borland(%SN) != null
     '			cachedObjectFor'
     [%f] to_borland %( %S |N )% ' != null'
//				&& cachedObjectFor%f_to_borland(%SN)[.%f_cache_postfix(%S,"read-only")] != null[{%Ss=synchro}
     '			&& cachedObjectFor'
     [%f] to_borland %( %S |N )% if NOT-EMPTY
     begin
      '.'
      [%f] cache_postfix %( %S %, 'read-only' )% 
     end // if
     NOP
     ' != null'
     if ( ( %S |s ) %== 'synchro' ) then
     begin
      #13#10

//				&& cachedObjectFor%f_to_borland(%SN)[.%f_cache_postfix(%S,"read-only")].get () != null]
      '			&& cachedObjectFor'
      [%f] to_borland %( %S |N )% if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-only' )% 
      end // if
      NOP
      '.get () != null' 
     end // if
//				&& cachedObjectFor%f_to_borland(%SN).isRoFirst == true
     '			&& cachedObjectFor'
     [%f] to_borland %( %S |N )% '.isRoFirst == true'
//			) {
     '		) {'
//				cachedObjectFor%f_to_borland(%SN)[.%f_cache_postfix(%S,"read-only")][{%Ss=synchro}.get ()].upgrade_rw ();
     '			cachedObjectFor'
     [%f] to_borland %( %S |N )% if NOT-EMPTY
     begin
      '.'
      [%f] cache_postfix %( %S %, 'read-only' )% 
     end // if
     NOP
     if ( ( %S |s ) %== 'synchro' ) then
     begin
      '.get ()' 
     end // if
     '.upgrade_rw ();'
//				cachedObjectFor%f_to_borland(%SN).isRoFirst = false;
     '			cachedObjectFor'
     [%f] to_borland %( %S |N )% '.isRoFirst = false;'
//			}]
     '		}' 
    end // if
//			return [{%Ss=synchro}{cachedObjectFor%f_to_borland(%SN)[.%f_cache_postfix(%S,"%2N")]}ret];
    '		return '
    if ( ( %S |s ) %== 'synchro' ) then
    begin
     'ret' 
    end // if
    else
    begin
     'cachedObjectFor'
     [%f] to_borland %( %S |N )% if NOT-EMPTY
     begin
      '.'
      [%f] cache_postfix %( %S %, %2 |N )% 
     end // if
     NOP
    end // else
    ';'
//	]]]	}
   end // if
  end // if
  else
  begin
   #13#10
   [%f] fctr_mng_mem_java %( %S %, %2 |N )% 
  end // else
 end // if
 '	}'
//#UC END# *4B793D3F0059for470F576D0203*
; // factory_mng_factory_impl_java


// реализация абстрактного стереотипа Interface::Class::factory_op::Operation
// дампит реализацию фабрики для менеджера фабрик, осуществляет выбор дапить только read-only или
// read-write, или обе фабрики
//%f _fctr_mng_factory_java
: fctr_mng_factory_java OBJECT IN %S
//#UC START# *4B793D420398for470F576D0203*
//	[{%S{const_type}=combo}{%S%f_factory_mng_factory_impl_java(%S,"%S{const_type}")}%S%f_factory_mng_factory_impl_java(%S,"read-write")
 if ( ( %S get_up ( 'const_type' ) ) %== 'combo' ) then
 begin
  %S %f factory_mng_factory_impl_java %( %S %, 'read-write' )% 
//	
  #13#10

//	%S%f_factory_mng_factory_impl_java(%S,"read-only","_ro")][{%S%f_is_cached()=true&[{%SS=factory&%Cx=false}{true}false]=true}
  %S %f factory_mng_factory_impl_java %( %S %, 'read-only"' %, '_ro' )% 
 end // if
 else
 begin
  %S %f factory_mng_factory_impl_java %( %S %, %S get_up ( 'const_type' ) )% 
 end // else
 if ( ( %S %f is_cached %( )% ) %==  true AND 
   ( if ( ( %S |S ) %== 'factory' AND 
    ( ( %C |x ) %==  false  ) ) then
  begin
    false 
  end // if
  else
  begin
    true 
  end // else
  %==  true  ) ) then
 begin
  #13#10

//	
  #13#10

//		public java.util.Collection\<[{%TS=FactoryMemory&%T%f_use_for_synchro_factory()=true|%Ss=synchro}{%t_ret(%{INT})}java.lang.ref.WeakReference\<%t_ret(%{INT})\> ]\> %f_to_java(get_cached_objects_for_%SN) () {
  '	public java.util.Collection<'
  if ( ( %T |S ) %== 'FactoryMemory' AND 
    ( ( %T %f use_for_synchro_factory %( )% ) %==  true  ) OR 
    ( ( %S |s ) %== 'synchro'  ) ) then
  begin
   'java.lang.ref.WeakReference<'
   [%t] ret %( ( get_global_var ( 'INT' ) ) )% '> ' 
  end // if
  else
  begin
   [%t] ret %( ( get_global_var ( 'INT' ) ) )% 
  end // else
  '> '
  [%f] to_java %( 'get_cached_objects_for_'
  %S |N )% ' () {'
//			synchronized ([{%TS!=FactoryMemory}{%f_to_java(%TNMap)_}cachedObjectsFor%f_to_borland(%SN)]) {
  '		synchronized ('
  if ( ( %T |S ) %!= 'FactoryMemory' ) then
  begin
   'cachedObjectsFor'
   [%f] to_borland %( %S |N )% 
  end // if
  else
  begin
   [%f] to_java %( %T |N 'Map' )% '_' 
  end // else
  ') {'
//				[{%S{const_type}=read-only|%S{const_type}=combo}{return java.util.Collections.unmodifiableCollection (new java.util.HashSet\<%t_ret(%{INT})\> ([{%TS!=FactoryMemory}{%f_to_java(%TNMap)_}cachedObjectsFor%f_to_borland(%SN)].values ()));}java.util.Collection\<[{%TS=FactoryMemory&%T%f_use_for_synchro_factory()=true|%Ss=synchro}{%t_fctr_manager_cache_value(%{INT},"var","")}%t_fctr_manager_cache_value(%{INT},"type","")]\> values = [{%TS!=FactoryMemory}{%f_to_java(%TNMap)_}cachedObjectsFor%f_to_borland(%SN)].values ();
  '			'
  if ( ( %S get_up ( 'const_type' ) ) %== 'read-only' OR 
    ( ( %S get_up ( 'const_type' ) ) %== 'combo'  ) ) then
  begin
   'java.util.Collection<'
   if ( ( %T |S ) %== 'FactoryMemory' AND 
     ( ( %T %f use_for_synchro_factory %( )% ) %==  true  ) OR 
     ( ( %S |s ) %== 'synchro'  ) ) then
   begin
    [%t] fctr_manager_cache_value %( ( get_global_var ( 'INT' ) ) %, 'type"' %, '' )% 
   end // if
   else
   begin
    [%t] fctr_manager_cache_value %( ( get_global_var ( 'INT' ) ) %, 'var"' %, '' )% 
   end // else
   '> values = '
   if ( ( %T |S ) %!= 'FactoryMemory' ) then
   begin
    'cachedObjectsFor'
    [%f] to_borland %( %S |N )% 
   end // if
   else
   begin
    [%f] to_java %( %T |N 'Map' )% '_' 
   end // else
   '.values ();'
//				java.util.ArrayList\<[{%TS=FactoryMemory&%T%f_use_for_synchro_factory()=true|%Ss=synchro}{%t_ret(%{INT})}java.lang.ref.WeakReference\<%t_ret(%{INT})\> ]\> res =
   '			java.util.ArrayList<'
   if ( ( %T |S ) %== 'FactoryMemory' AND 
     ( ( %T %f use_for_synchro_factory %( )% ) %==  true  ) OR 
     ( ( %S |s ) %== 'synchro'  ) ) then
   begin
    'java.lang.ref.WeakReference<'
    [%t] ret %( ( get_global_var ( 'INT' ) ) )% '> ' 
   end // if
   else
   begin
    [%t] ret %( ( get_global_var ( 'INT' ) ) )% 
   end // else
   '> res ='
//					new java.util.ArrayList\<[{%TS=FactoryMemory&%T%f_use_for_synchro_factory()=true|%Ss=synchro}{%t_ret(%{INT})}java.lang.ref.WeakReference\<%t_ret(%{INT})\> ]\> ();
   '				new java.util.ArrayList<'
   if ( ( %T |S ) %== 'FactoryMemory' AND 
     ( ( %T %f use_for_synchro_factory %( )% ) %==  true  ) OR 
     ( ( %S |s ) %== 'synchro'  ) ) then
   begin
    'java.lang.ref.WeakReference<'
    [%t] ret %( ( get_global_var ( 'INT' ) ) )% '> ' 
   end // if
   else
   begin
    [%t] ret %( ( get_global_var ( 'INT' ) ) )% 
   end // else
   '> ();'
//				for ([{%TS=FactoryMemory&%T%f_use_for_synchro_factory()=true|%Ss=synchro}{%t_fctr_manager_cache_value(%{INT},"var","")}%t_fctr_manager_cache_value(%{INT},"type","")] value: values) {
   '			for ('
   if ( ( %T |S ) %== 'FactoryMemory' AND 
     ( ( %T %f use_for_synchro_factory %( )% ) %==  true  ) OR 
     ( ( %S |s ) %== 'synchro'  ) ) then
   begin
    [%t] fctr_manager_cache_value %( ( get_global_var ( 'INT' ) ) %, 'type"' %, '' )% 
   end // if
   else
   begin
    [%t] fctr_manager_cache_value %( ( get_global_var ( 'INT' ) ) %, 'var"' %, '' )% 
   end // else
   ' value: values) {'
//					res.add (value.rwData_);
   '				res.add (value.rwData_);'
//				}
   '			}'
//				return java.util.Collections.unmodifiableCollection (res);]
   '			return java.util.Collections.unmodifiableCollection (res);' 
  end // if
  else
  begin
   'return java.util.Collections.unmodifiableCollection (new java.util.HashSet<'
   [%t] ret %( ( get_global_var ( 'INT' ) ) )% '> ('
   if ( ( %T |S ) %!= 'FactoryMemory' ) then
   begin
    'cachedObjectsFor'
    [%f] to_borland %( %S |N )% 
   end // if
   else
   begin
    [%f] to_java %( %T |N 'Map' )% '_' 
   end // else
   '.values ()));' 
  end // else
//			}
  '		}'
//		}]
  '	}' 
 end // if
//#UC END# *4B793D420398for470F576D0203*
; // fctr_mng_factory_java


// реализация абстрактного стереотипа Interface::Class::factory_op::Operation
// генерация для серванта
//%f _for_servant
: for_servant OBJECT IN %S
//#UC START# *4B7BABC802B8for470F576D0203*
//#UC END# *4B7BABC802B8for470F576D0203*
; // for_servant


// реализация абстрактного стереотипа Interface::Class::factory_op::Operation
// генерация реализации для фабрики серванта
//%f _for_servant_factory
: for_servant_factory OBJECT IN %S
//#UC START# *4B7BAB9E0209for470F576D0203*
//#UC END# *4B7BAB9E0209for470F576D0203*
; // for_servant_factory


// Вложенные стереотипы
//: Interface::Class::factory::Operation::Parameter
end. // :: <<Interface>> <<factory>> ;

implementation @ :: <<Interface>> <<factory>> Parameter ;
//? параметр фабричного метода
//= AbstractFacet::Class::Operation::Parameter

// Функции стереотипа
//%f _st_space_key
: st_space_key OBJECT IN %S
//	MDP
 'MDP'



//: Interface::Class::remover::Operation
; // st_space_key

end. // :: <<Interface>> <<factory>> Parameter ;

implementation @ :: <<Interface>> <<remover>> ;
//? Уничтожитель
//? Метод обратный фабричному, т.е. метод приводящий к разрушению (временному или постоянному) созданного фабрикой объекта.
//= AbstractFacet::Class::Operation

// Параметры стереотипа
//v +-
// - типы видимости
//Y code_remover.gif
//L code_remover
//m f
// - не может быть реализован/иметь перекрытую реализацию
//A
// - стереотипы "цели" (типа/результата)

// Генераторы
// генератор файлов реализации C++ (.cpp)
//+ cpp
<<generator>> cpp OBJECT IN %S
//#UC START# *47022CB8034Bfor470F5814038A*
//	%f_dump_remover_operation_cpp(%S)

//f _dump_remover_operation_cpp
; // cpp

end. // :: <<Interface>> <<remover>> ;

: dump_remover_operation_cpp OBJECT IN %S
//	%f_set_var(OPERATION_CPP,"void %{INT}NFactory::%SN (%t_arg(%{INT},"inout") obj_<, %CX>) /*throw (Core::Root::ForeignObject, Core::Root::FactoryManagerWasDestroyed<, %f_type(%E)>)*/ {")%f_set_var(OP_LEN,"%f_string_length("%{OPERATION_CPP}N")")\
 [%f] set_var %( 'OPERATION_CPP' %, 'void '
 ( get_global_var ( 'INT' ) |N ) 'Factory::'
 %S |N ' ('
 [%t] arg %( ( get_global_var ( 'INT' ) ) %, 'inout' )% ' obj_'
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   ', '
   %C |X 
   ++! l_Counter
  end // if
 end // for C
 ') /*throw (Core::Root::ForeignObject' %, ' Core::Root::FactoryManagerWasDestroyed'
 INTEGER VAR l_Counter l_Counter := 0
 for %S%E
 begin
  OBJECT IN %E
  if true then
  begin
   ', '
   [%f] type %( %E )% 
   ++! l_Counter
  end // if
 end // for E
 ')*/ {' )% [%f] set_var %( 'OP_LEN' %, [%f] string_length %( ( get_global_var ( 'OPERATION_CPP' ) |N ) )% )% 
//	%f_set_var(NEED_WRAP,"%f_number_cmp("%{OP_LEN}N","120","\>")")\
 [%f] set_var %( 'NEED_WRAP' %, [%f] number_cmp %( ( get_global_var ( 'OP_LEN' ) |N ) %, 120 %, '>' )% )% 
//	[{%f_true(%{NEED_WRAP})=true&%Cx=true}{%{OPERATION_CPP}N}void %{INT}NFactory::%SN (\n\t%t_arg(%{INT},"inout") obj_<\n\t, %CX>\n) /*throw (Core::Root::ForeignObject, Core::Root::FactoryManagerWasDestroyed<, %f_type(%E)>)*/ {]
 if ( ( [%f] true %( ( get_global_var ( 'NEED_WRAP' ) ) )% ) %==  true AND 
   ( ( %C |x ) %==  true  ) ) then
 begin
  'void '
  ( get_global_var ( 'INT' ) |N ) 'Factory::'
  %S |N ' ('#13#10#9
  [%t] arg %( ( get_global_var ( 'INT' ) ) %, 'inout' )% ' obj_'
  INTEGER VAR l_Counter l_Counter := 0
  for %S%C
  begin
   OBJECT IN %C
   if true then
   begin
    #13#10#9', '
    %C |X 
    ++! l_Counter
   end // if
  end // for C
  #13#10') /*throw (Core::Root::ForeignObject, Core::Root::FactoryManagerWasDestroyed'
  INTEGER VAR l_Counter l_Counter := 0
  for %S%E
  begin
   OBJECT IN %E
   if true then
   begin
    ', '
    [%f] type %( %E )% 
    ++! l_Counter
   end // if
  end // for E
  ')*/ {' 
 end // if
 else
 begin
  ( get_global_var ( 'OPERATION_CPP' ) |N ) 
 end // else
//		return %{INT}NFactoryManager::Singleton::instance ()-\>%SN (obj_<, %CN>);
 '	return '
 ( get_global_var ( 'INT' ) |N ) 'FactoryManager::Singleton::instance ()->'
 %S |N ' (obj_'
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   ', '
   %C |N 
   ++! l_Counter
  end // if
 end // for C
 ');'
//	}
 '}'

//f _dump_derived_remover_operation_cpp
; // dump_remover_operation_cpp

: dump_derived_remover_operation_cpp OBJECT IN %S
//	%f_set_var(OPERATION_CPP,"void %{SERV}NFactory::%SN (%t_arg(%{INT},"inout") obj_<, %CX>) /*throw (Core::Root::ForeignObject, Core::Root::FactoryManagerWasDestroyed<, %f_type(%E)>)*/ {")%f_set_var(OP_LEN,"%f_string_length("%{OPERATION_CPP}N")")\
 [%f] set_var %( 'OPERATION_CPP' %, 'void '
 ( get_global_var ( 'SERV' ) |N ) 'Factory::'
 %S |N ' ('
 [%t] arg %( ( get_global_var ( 'INT' ) ) %, 'inout' )% ' obj_'
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   ', '
   %C |X 
   ++! l_Counter
  end // if
 end // for C
 ') /*throw (Core::Root::ForeignObject' %, ' Core::Root::FactoryManagerWasDestroyed'
 INTEGER VAR l_Counter l_Counter := 0
 for %S%E
 begin
  OBJECT IN %E
  if true then
  begin
   ', '
   [%f] type %( %E )% 
   ++! l_Counter
  end // if
 end // for E
 ')*/ {' )% [%f] set_var %( 'OP_LEN' %, [%f] string_length %( ( get_global_var ( 'OPERATION_CPP' ) |N ) )% )% 
//	%f_set_var(NEED_WRAP,"%f_number_cmp("%{OP_LEN}N","120","\>")")\
 [%f] set_var %( 'NEED_WRAP' %, [%f] number_cmp %( ( get_global_var ( 'OP_LEN' ) |N ) %, 120 %, '>' )% )% 
//	[{%f_true(%{NEED_WRAP})=true&%Cx=true}{%{OPERATION_CPP}N}void %{INT}NFactory::%SN (\n\t%t_arg(%{INT},"inout") obj_<\n\t, %CX>\n) /*throw (Core::Root::ForeignObject, Core::Root::FactoryManagerWasDestroyed<, %f_type(%E)>)*/ {]
 if ( ( [%f] true %( ( get_global_var ( 'NEED_WRAP' ) ) )% ) %==  true AND 
   ( ( %C |x ) %==  true  ) ) then
 begin
  'void '
  ( get_global_var ( 'INT' ) |N ) 'Factory::'
  %S |N ' ('#13#10#9
  [%t] arg %( ( get_global_var ( 'INT' ) ) %, 'inout' )% ' obj_'
  INTEGER VAR l_Counter l_Counter := 0
  for %S%C
  begin
   OBJECT IN %C
   if true then
   begin
    #13#10#9', '
    %C |X 
    ++! l_Counter
   end // if
  end // for C
  #13#10') /*throw (Core::Root::ForeignObject, Core::Root::FactoryManagerWasDestroyed'
  INTEGER VAR l_Counter l_Counter := 0
  for %S%E
  begin
   OBJECT IN %E
   if true then
   begin
    ', '
    [%f] type %( %E )% 
    ++! l_Counter
   end // if
  end // for E
  ')*/ {' 
 end // if
 else
 begin
  ( get_global_var ( 'OPERATION_CPP' ) |N ) 
 end // else
//		return %f_type(%{INT})Factory::%SN (obj_<, %CN>);
 '	return '
 [%f] type %( ( get_global_var ( 'INT' ) ) )% 'Factory::'
 %S |N ' (obj_'
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   ', '
   %C |N 
   ++! l_Counter
  end // if
 end // for C
 ');'
//	}
 '}'
//#UC END# *47022CB8034Bfor470F5814038A*
; // dump_derived_remover_operation_cpp


// генератор заголовочных файлов C++ (.h)
//+ h
implementation @ :: <<Interface>> <<remover>> ;
<<generator>> h OBJECT IN %S
//#UC START# *47022C88029Ffor470F5814038A*
//	%f_dump_remover_operation_h(%S)
 [%f] dump_remover_operation_h %( %S )% 

//f _dump_remover_operation_h
; // h

end. // :: <<Interface>> <<remover>> ;

: dump_remover_operation_h OBJECT IN %S
//	%f_docs(%S)\
 [%f] docs %( %S )% 
//	%f_set_var(OPERATION_H,"#virtual void %SN (<{, }%CX>) = 0")%f_set_var(OP_LEN,"%f_string_length("%{OPERATION_H}N")")\
 [%f] set_var %( 'OPERATION_H' %, out_indent 'virtual void '
 %S |N ' ('
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   if ( l_Counter >0 ) then ( ', ' )
   %C |X 
   ++! l_Counter
  end // if
 end // for C
 ') = 0' )% [%f] set_var %( 'OP_LEN' %, [%f] string_length %( ( get_global_var ( 'OPERATION_H' ) |N ) )% )% 
//	%f_set_var(NEED_WRAP,"%f_number_cmp("%{OP_LEN}N","120","\>")")\
 [%f] set_var %( 'NEED_WRAP' %, [%f] number_cmp %( ( get_global_var ( 'OP_LEN' ) |N ) %, 120 %, '>' )% )% 
//	[{%f_true(%{NEED_WRAP})=true&%Cx=true}{%{OPERATION_H}N\n#	/*throw (Core::Root::ForeignObject, Core::Root::FactoryManagerWasDestroyed<, %f_type(%E)>)*/;}\
 if ( ( [%f] true %( ( get_global_var ( 'NEED_WRAP' ) ) )% ) %==  true AND 
   ( ( %C |x ) %==  true  ) ) then
 begin
//	#virtual void %SN (<{\n\t\t, }%CX>\n\t) = 0/*throw (Core::Root::ForeignObject, Core::Root::FactoryManagerWasDestroyed<, %f_type(%E)>)*/;]
  out_indent 'virtual void '
  %S |N ' ('
  INTEGER VAR l_Counter l_Counter := 0
  for %S%C
  begin
   OBJECT IN %C
   if true then
   begin
    if ( l_Counter >0 ) then ( #13#10#9#9', ' )
    %C |X 
    ++! l_Counter
   end // if
  end // for C
  #13#10#9') = 0/*throw (Core::Root::ForeignObject, Core::Root::FactoryManagerWasDestroyed'
  INTEGER VAR l_Counter l_Counter := 0
  for %S%E
  begin
   OBJECT IN %E
   if true then
   begin
    ', '
    [%f] type %( %E )% 
    ++! l_Counter
   end // if
  end // for E
  ')*/;' 
 end // if
 else
 begin
  ( get_global_var ( 'OPERATION_H' ) |N ) #13#10
  out_indent '	/*throw (Core::Root::ForeignObject, Core::Root::FactoryManagerWasDestroyed'
  INTEGER VAR l_Counter l_Counter := 0
  for %S%E
  begin
   OBJECT IN %E
   if true then
   begin
    ', '
    [%f] type %( %E )% 
    ++! l_Counter
   end // if
  end // for E
  ')*/;' 
 end // else

//#UC END# *47022C88029Ffor470F5814038A*
; // dump_remover_operation_h


// генератор классов, интерфейсов на java (.java)
//+ java
implementation @ :: <<Interface>> <<remover>> ;
<<generator>> java OBJECT IN %S
//#UC START# *470321950119for470F5814038A*
//	%f_docs(%S)\
 [%f] docs %( %S )% 
//	#public [{%f_realize_srv_interface(%{INT})=false}{int}void] %SN (<{, }%CX>)[{%f_realize_srv_interface(%{INT})=true}{[throws <{, }%f_type(%E)>]} throws ru.garant.shared.CoreSrv.ForeignObject<, %f_type(%E)>];
 out_indent 'public '
 if ( ( [%f] realize_srv_interface %( ( get_global_var ( 'INT' ) ) )% ) %==  false ) then
 begin
  'void' 
 end // if
 else
 begin
  'int' 
 end // else
 ' '
 %S |N ' ('
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   if ( l_Counter >0 ) then ( ', ' )
   %C |X 
   ++! l_Counter
  end // if
 end // for C
 ')'
 if ( ( [%f] realize_srv_interface %( ( get_global_var ( 'INT' ) ) )% ) %==  true ) then
 begin
  ' throws ru.garant.shared.CoreSrv.ForeignObject'
  INTEGER VAR l_Counter l_Counter := 0
  for %S%E
  begin
   OBJECT IN %E
   if true then
   begin
    ', '
    [%f] type %( %E )% 
    ++! l_Counter
   end // if
  end // for E
 end // if
 else
 begin
  if NOT-EMPTY
  begin
   'throws '
   INTEGER VAR l_Counter l_Counter := 0
   for %S%E
   begin
    OBJECT IN %E
    if true then
    begin
     if ( l_Counter >0 ) then ( ', ' )
     [%f] type %( %E )% 
     ++! l_Counter
    end // if
   end // for E
  end // if
  NOP
 end // else
 ';'
//#UC END# *470321950119for470F5814038A*
; // java


// Функции стереотипа
//%f _st_space_key
: st_space_key OBJECT IN %S
//	MDP
 'MDP'


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// перекрытие базового стереотипа Документация::MDAGenerator
// выводит описание элемента (операция, атрибут) в wiki
//%f _wiki_child_kind
; // st_space_key

: wiki_child_kind OBJECT IN %S
//#UC START# *4705CBD6003Efor470F5814038A*
//	mng
 'mng'
//#UC END# *4705CBD6003Efor470F5814038A*
; // wiki_child_kind


// Вложенные стереотипы
//: Interface::Class::remover::Operation::Parameter
end. // :: <<Interface>> <<remover>> ;

implementation @ :: <<Interface>> <<remover>> Parameter ;
//? параметр
//= AbstractFacet::Class::Operation::Parameter

// Генераторы
// Генерация модели в MDKnow
//+ wiki
<<generator>> wiki OBJECT IN %S
//#UC START# *46E6D4BB0339for470F643503B9*
//#UC END# *46E6D4BB0339for470F643503B9*
; // wiki


// генератор idl спецификаций (.idl)
//+ idl
<<generator>> idl OBJECT IN %S
//#UC START# *47022BBE0261for470F643503B9*
//#UC END# *47022BBE0261for470F643503B9*
; // idl


// генератор idl спецификаций для AMI (.idl)
//+ idl_ami
<<generator>> idl_ami OBJECT IN %S
//#UC START# *47022C0F01E4for470F643503B9*
//#UC END# *47022C0F01E4for470F643503B9*
; // idl_ami


// генератор inline файлов реализации C++ (.i.h)
//+ i.h
<<generator>> i.h OBJECT IN %S
//#UC START# *47022CCF00EAfor470F643503B9*
//#UC END# *47022CCF00EAfor470F643503B9*
; // i.h


// С++ TIE-обвязка для DLL (_tie.h)
//+ dll.h
<<generator>> dll.h OBJECT IN %S
//#UC START# *47032EC4032Cfor470F643503B9*
//#UC END# *47032EC4032Cfor470F643503B9*
; // dll.h


// С++ TIE-обвязка для DLL (_tie.cpp)
//+ dll.cpp
<<generator>> dll.cpp OBJECT IN %S
//#UC START# *47032ED002DEfor470F643503B9*
//#UC END# *47032ED002DEfor470F643503B9*
; // dll.cpp


// Родные Delphi интерфейсы (.pas)
//+ intf.pas
<<generator>> intf.pas OBJECT IN %S
//R  
//#UC START# *470F1571031Cfor470F643503B9*
//#UC END# *470F1571031Cfor470F643503B9*
; // intf.pas


// Реализация на Delphi(.pas)
//+ impl.pas
<<generator>> impl.pas OBJECT IN %S
//R  
//#UC START# *470F15B800CBfor470F643503B9*
//#UC END# *470F15B800CBfor470F643503B9*
; // impl.pas


// Вторая интерфейсная секция стереотипа. Например реализация свойств класса.
//+ intf2.pas
<<generator>> intf2.pas OBJECT IN %S
//R  
//#UC START# *477398E501C0for470F643503B9*
//#UC END# *477398E501C0for470F643503B9*
; // intf2.pas


// Ресурсы (.rc)
//+ rc.pas
<<generator>> rc.pas OBJECT IN %S
//R  
//#UC START# *55B8D28B0157for470F643503B9*
//#UC END# *55B8D28B0157for470F643503B9*
; // rc.pas


// Скрипты в ресурсах (.rc.script)
//+ rc.script.pas
<<generator>> rc.script.pas OBJECT IN %S
//R  
//#UC START# *55B8D2F80145for470F643503B9*
//#UC END# *55B8D2F80145for470F643503B9*
; // rc.script.pas


// Компилятор ресурса (.res.cmd)
//+ res.cmd.pas
<<generator>> res.cmd.pas OBJECT IN %S
//R  
//#UC START# *55B8DD9C0301for470F643503B9*
//#UC END# *55B8DD9C0301for470F643503B9*
; // res.cmd.pas


// Функции стереотипа
//%f _st_space_key
: st_space_key OBJECT IN %S
//	MDP
 'MDP'


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
//%t _constraint
; // st_space_key

<<transformator>> constraint OBJECT IN %S
//#UC START# *4704C0E30186for470F643503B9*
//c	{}
//r {""=""}: {}
//#UC END# *4704C0E30186for470F643503B9*
; // constraint


// реализация абстрактного стереотипа Документация::MDAGenerator
// выводит описание элемента (операция, атрибут) в wiki
//%f _wiki_child_kind
: wiki_child_kind OBJECT IN %S
//#UC START# *4705CBD6003Efor470F643503B9*
//#UC END# *4705CBD6003Efor470F643503B9*
; // wiki_child_kind


// реализация абстрактного стереотипа Документация::MDAGenerator
// вывод описание авто-генерируемых методов в wiki
//%f _wiki_up_add_gen
: wiki_up_add_gen OBJECT IN %S
//#UC START# *470484D50138for470F643503B9*
//#UC END# *470484D50138for470F643503B9*
; // wiki_up_add_gen



//: Interface::Class::factory switch::Attribute
end. // :: <<Interface>> <<remover>> Parameter ;

implementation @ :: <<Interface>> <<"factory switch">> ;
//? Селектор мультифабрики
//? Определяет тип селектора и допустимые значения, в качестве селектора могут выступать все простые типы и перечисления (Enum).
//= InterfaceGeneratorWithJava::MDAGenerator

// Параметры стереотипа
//v +
// - типы видимости
//Y code_factory_switch.gif
//L code_factory_switch
//l a
// - возможные типы связи атрибута

// Генераторы
// генератор заголовочных файлов C++ (.h)
//+ h
<<generator>> h OBJECT IN %S
//#UC START# *47022C88029Ffor47B13201031D*
//#UC END# *47022C88029Ffor47B13201031D*
; // h


// генератор файлов реализации C++ (.cpp)
//+ cpp
<<generator>> cpp OBJECT IN %S
//#UC START# *47022CB8034Bfor47B13201031D*
//#UC END# *47022CB8034Bfor47B13201031D*
; // cpp


// генератор реализации фабрик интерфейсов на java (.java)
//+ fctr.java
<<generator>> fctr.java OBJECT IN %S
//#UC START# *470321C1038Afor47B13201031D*
//#UC END# *470321C1038Afor47B13201031D*
; // fctr.java


// генератор заголовочных файлов для фабрик интерфейсов (.h)
//+ fctr.h
<<generator>> fctr.h OBJECT IN %S
//#UC START# *4705C5490109for47B13201031D*
//#UC END# *4705C5490109for47B13201031D*
; // fctr.h


// генератор файлов реализации для фабрик интерфейсов (.cpp)
//+ fctr.cpp
<<generator>> fctr.cpp OBJECT IN %S
//#UC START# *4705C54B01F4for47B13201031D*
//#UC END# *4705C54B01F4for47B13201031D*
; // fctr.cpp


// Функции стереотипа
//%f _st_space_key
: st_space_key OBJECT IN %S
//	MDP
 'MDP'


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
//%t _constraint
; // st_space_key

<<transformator>> constraint OBJECT IN %S
//#UC START# *4704C0E30186for47B13201031D*
//c                                    {}
//r {"%t_can_use_for_switch(%T)"="false"}:         {В качестве селектора могут выступать только простые типы и перечисления}
//#UC END# *4704C0E30186for47B13201031D*
; // constraint


// реализация абстрактного стереотипа Документация::MDAGenerator
// выводит описание элемента (операция, атрибут) в wiki
//%f _wiki_child_kind
: wiki_child_kind OBJECT IN %S
//#UC START# *4705CBD6003Efor47B13201031D*
//	property
 'property'
//#UC END# *4705CBD6003Efor47B13201031D*
; // wiki_child_kind


//: Interface::Class::multi factory::Operation
end. // :: <<Interface>> <<"factory switch">> ;

implementation @ :: <<Interface>> <<"multi factory">> ;
//? Фабрика (множественная)
//? Будет создан абстрактный интерфейс фабрики, который будут реализовывать конкретные фабрики (по одной на каждый сервант), создающие соответствующие серванты.
//? Конкретные фабрики мугут инициализироваться своими специфичными параметрами. Созданные конкретные фабрики будут регистрироваться в менеджере фабрик.
//? Последний осуществляет выбор нужной "активной" фабрики при получении запроса на создание экземпляра объекта.
//? Для МНОЖЕСТВЕННОЙ фабрики - активными являются ВСЕ зарегистрированные фабрики, выбор конкретной осущестьвляеться по ключу - дополнительному параметру. Если указан тип фабричного метода, то это означает что данная фабрика будет использовать общую "память". Если фабрика, использующая "общую память", не содержит ни одного параметра-ключа, то считается что это т.н. "создающая" фабрика, т.е. фабрика, которая создает новый объект, и он при создании самостоятельно должен получить идентифицирующий его ключ.
//= Interface::Class::factory::Operation

// Пользовательские свойства
//p transparent multy:b=false ? определяет, что выбор конкретной реализации будет реализован пользователем

// Генераторы
// генератор заголовочных файлов C++ (.h)
//+ h
<<generator>> h OBJECT IN %S
//#UC START# *47022C88029Ffor470F57A80119*
//	%P%f_dump_multi_factory_operation_h(%S)
 %P %f dump_multi_factory_operation_h %( %S )% 

//f _dump_multi_factory_operation_h_impl
; // h

end. // :: <<Interface>> <<"multi factory">> ;

: dump_multi_factory_operation_h_impl OBJECT IN %S
//	%S%f_dump_exceptions_client_fctr("EX_CLIENT_LIST")\
 %S %f dump_exceptions_client_fctr %( 'EX_CLIENT_LIST' )% 
//	[{%S{transparent multy}=false|"%S{transparent multy}"=""}%f_set_var(OPERATION_H,"#static %t_ret(%{INT},"%f_factory_target_strereotype(%S,"%1N")") %SN%2N ([%S%f_factory_params("%1N"), ]%{INT}%f_dump_switch_arg_type() key)")%f_set_var(OP_LEN,"%f_string_length("%{OPERATION_H}N")")\
 if ( ( %S get_up ( 'transparent multy' ) ) %==  false OR 
   ( ( %S get_up ( 'transparent multy' ) ) %== ''  ) ) then
 begin
  [%f] set_var %( 'OPERATION_H' %, out_indent 'static '
  [%t] ret %( ( get_global_var ( 'INT' ) ) %, [%f] factory_target_strereotype %( %S %, %1 |N )% )% ' '
  %S |N %2 |N ' ('
  if NOT-EMPTY
  begin
   %S %f factory_params %( %1 |N )% ', ' 
  end // if
  NOP
  ( get_global_var ( 'INT' ) %f dump_switch_arg_type %( )% ) ' key)' )% [%f] set_var %( 'OP_LEN' %, [%f] string_length %( ( get_global_var ( 'OPERATION_H' ) |N ) )% )% 
//	%f_set_var(NEED_WRAP,"%f_number_cmp("%{OP_LEN}N","120","\>")")\
  [%f] set_var %( 'NEED_WRAP' %, [%f] number_cmp %( ( get_global_var ( 'OP_LEN' ) |N ) %, 120 %, '>' )% )% 
//	[{%f_true(%{NEED_WRAP})=true&%Cx=true}{%{OPERATION_H}N%S%f_dump_formated_exception_client_list("EX_CLIENT_LIST",", ","NEW_LINE");}#static %t_ret(%{INT},"%f_factory_target_strereotype(%S,"%1N")") %SN%2N ([%S%f_factory_params("%1N","\n#\t","\n#"), ]%{INT}%f_dump_switch_arg_type() key\n\t)%S%f_dump_formated_exception_client_list("EX_CLIENT_LIST",", ");]][{%S{transparent multy}=true}\
  if ( ( [%f] true %( ( get_global_var ( 'NEED_WRAP' ) ) )% ) %==  true AND 
    ( ( %C |x ) %==  true  ) ) then
  begin
   out_indent 'static '
   [%t] ret %( ( get_global_var ( 'INT' ) ) %, [%f] factory_target_strereotype %( %S %, %1 |N )% )% ' '
   %S |N %2 |N ' ('
   if NOT-EMPTY
   begin
    %S %f factory_params %( %1 |N %, #13#10
    out_indent #9'"' %, #13#10
    out_indent )% ', ' 
   end // if
   NOP
   ( get_global_var ( 'INT' ) %f dump_switch_arg_type %( )% ) ' key'#13#10#9')'
   %S %f dump_formated_exception_client_list %( 'EX_CLIENT_LIST"' %, %, ' ' )% ';' 
  end // if
  else
  begin
   ( get_global_var ( 'OPERATION_H' ) |N ) %S %f dump_formated_exception_client_list %( 'EX_CLIENT_LIST"' %, %, ' "' %, 'NEW_LINE' )% ';' 
  end // else
 end // if
 if ( ( %S get_up ( 'transparent multy' ) ) %==  true ) then
 begin
//	%f_set_var(OPERATION_H,"#static %t_ret(%{INT},"%f_factory_target_strereotype(%S,"%1N")") %SN%2N (%S%f_factory_params("%1N"))")%f_set_var(OP_LEN,"%f_string_length("%{OPERATION_H}N")")\
  [%f] set_var %( 'OPERATION_H' %, out_indent 'static '
  [%t] ret %( ( get_global_var ( 'INT' ) ) %, [%f] factory_target_strereotype %( %S %, %1 |N )% )% ' '
  %S |N %2 |N ' ('
  %S %f factory_params %( %1 |N )% ')' )% [%f] set_var %( 'OP_LEN' %, [%f] string_length %( ( get_global_var ( 'OPERATION_H' ) |N ) )% )% 
//	%f_set_var(NEED_WRAP,"%f_number_cmp("%{OP_LEN}N","120","\>")")\
  [%f] set_var %( 'NEED_WRAP' %, [%f] number_cmp %( ( get_global_var ( 'OP_LEN' ) |N ) %, 120 %, '>' )% )% 
//	[{%f_true(%{NEED_WRAP})=true&%Cx=true}{%{OPERATION_H}N%S%f_dump_formated_exception_client_list("EX_CLIENT_LIST",", ","NEW_LINE");}#static %t_ret(%{INT},"%f_factory_target_strereotype(%S,"%1N")") %SN%2N (\n\t\t%S%f_factory_params("%1N","\n#\t","\n#")\n\t)%S%f_dump_formated_exception_client_list("EX_CLIENT_LIST",", ");]]
  if ( ( [%f] true %( ( get_global_var ( 'NEED_WRAP' ) ) )% ) %==  true AND 
    ( ( %C |x ) %==  true  ) ) then
  begin
   out_indent 'static '
   [%t] ret %( ( get_global_var ( 'INT' ) ) %, [%f] factory_target_strereotype %( %S %, %1 |N )% )% ' '
   %S |N %2 |N ' ('#13#10#9#9
   %S %f factory_params %( %1 |N %, #13#10
   out_indent #9'"' %, #13#10
   out_indent )% #13#10#9')'
   %S %f dump_formated_exception_client_list %( 'EX_CLIENT_LIST"' %, %, ' ' )% ';' 
  end // if
  else
  begin
   ( get_global_var ( 'OPERATION_H' ) |N ) %S %f dump_formated_exception_client_list %( 'EX_CLIENT_LIST"' %, %, ' "' %, 'NEW_LINE' )% ';' 
  end // else
 end // if

//#UC END# *47022C88029Ffor470F57A80119*
; // dump_multi_factory_operation_h_impl


// генератор файлов реализации C++ (.cpp)
//+ cpp
implementation @ :: <<Interface>> <<"multi factory">> ;
<<generator>> cpp OBJECT IN %S
//#UC START# *47022CB8034Bfor470F57A80119*
//	%P%f_dump_multi_factory_operation_cpp(%S)
 %P %f dump_multi_factory_operation_cpp %( %S )% 

//f _dump_multi_factory_operation_cpp_impl
; // cpp

end. // :: <<Interface>> <<"multi factory">> ;

: dump_multi_factory_operation_cpp_impl OBJECT IN %S
//	%S%f_dump_exceptions_client_fctr("EX_CLIENT_LIST")\
 %S %f dump_exceptions_client_fctr %( 'EX_CLIENT_LIST' )% 
//	[{%S{transparent multy}=false|"%S{transparent multy}"=""}%f_set_var(OPERATION_CPP,"%t_ret(%{INT},"%f_factory_target_strereotype(%S,"%1N")") %{INT}NFactory::%SN%2N (%S%f_factory_params("%1N")%{INT}%f_dump_switch_arg_type() key)%S%f_dump_formated_exception_client_list_cpp("EX_CLIENT_LIST",", ") {")%f_set_var(OP_LEN,"%f_string_length("%{OPERATION_CPP}N")")\
 if ( ( %S get_up ( 'transparent multy' ) ) %==  false OR 
   ( ( %S get_up ( 'transparent multy' ) ) %== ''  ) ) then
 begin
  [%f] set_var %( 'OPERATION_CPP' %, [%t] ret %( ( get_global_var ( 'INT' ) ) %, [%f] factory_target_strereotype %( %S %, %1 |N )% )% ' '
  ( get_global_var ( 'INT' ) |N ) 'Factory::'
  %S |N %2 |N ' ('
  %S %f factory_params %( %1 |N )% ( get_global_var ( 'INT' ) %f dump_switch_arg_type %( )% ) ' key)'
  %S %f dump_formated_exception_client_list_cpp %( 'EX_CLIENT_LIST"' %, %, ' ' )% ' {' )% [%f] set_var %( 'OP_LEN' %, [%f] string_length %( ( get_global_var ( 'OPERATION_CPP' ) |N ) )% )% 
//	%f_set_var(NEED_WRAP,"%f_number_cmp("%{OP_LEN}N","120","\>")")\
  [%f] set_var %( 'NEED_WRAP' %, [%f] number_cmp %( ( get_global_var ( 'OP_LEN' ) |N ) %, 120 %, '>' )% )% 
//	[{%f_true(%{NEED_WRAP})=true&%Cx=true}{%{OPERATION_CPP}N}%t_ret(%{INT},"%f_factory_target_strereotype(%S,"%1N")") %{INT}NFactory::%SN%2N ([%S%f_factory_params("%1N","\n\t","\n\t"), ]%{INT}%f_dump_switch_arg_type() key\n)%S%f_dump_formated_exception_client_list_cpp("EX_CLIENT_LIST",", ","NEW_LINE") {]
  if ( ( [%f] true %( ( get_global_var ( 'NEED_WRAP' ) ) )% ) %==  true AND 
    ( ( %C |x ) %==  true  ) ) then
  begin
   [%t] ret %( ( get_global_var ( 'INT' ) ) %, [%f] factory_target_strereotype %( %S %, %1 |N )% )% ' '
   ( get_global_var ( 'INT' ) |N ) 'Factory::'
   %S |N %2 |N ' ('
   if NOT-EMPTY
   begin
    %S %f factory_params %( %1 |N %, #13#10#9'"' %, #13#10#9 )% ', ' 
   end // if
   NOP
   ( get_global_var ( 'INT' ) %f dump_switch_arg_type %( )% ) ' key'#13#10')'
   %S %f dump_formated_exception_client_list_cpp %( 'EX_CLIENT_LIST"' %, %, ' "' %, 'NEW_LINE' )% ' {' 
  end // if
  else
  begin
   ( get_global_var ( 'OPERATION_CPP' ) |N ) 
  end // else
//		return %{INT}NFactoryManager::Singleton::instance ()-\>%SN%2N (<{}{%CS!=cache}%CN, >key);
  '	return '
  ( get_global_var ( 'INT' ) |N ) 'FactoryManager::Singleton::instance ()->'
  %S |N %2 |N ' ('
  INTEGER VAR l_Counter l_Counter := 0
  for %S%C
  begin
   OBJECT IN %C
   if ( ( %C |S ) %!= 'cache' ) then
   begin
    %C |N ', ' 
    ++! l_Counter
   end // if
  end // for C
  'key);'
//	}][{%S{transparent multy}=true}\
  '}' 
 end // if
 if ( ( %S get_up ( 'transparent multy' ) ) %==  true ) then
 begin
//	%f_set_var(OPERATION_CPP,"%t_ret(%{INT},"%f_factory_target_strereotype(%S,"%1N")") %{INT}NFactory::%SN%2N (%S%f_factory_params("%1N"))%S%f_dump_formated_exception_client_list_cpp("EX_CLIENT_LIST",", ") {")%f_set_var(OP_LEN,"%f_string_length("%{OPERATION_CPP}N")")\
  [%f] set_var %( 'OPERATION_CPP' %, [%t] ret %( ( get_global_var ( 'INT' ) ) %, [%f] factory_target_strereotype %( %S %, %1 |N )% )% ' '
  ( get_global_var ( 'INT' ) |N ) 'Factory::'
  %S |N %2 |N ' ('
  %S %f factory_params %( %1 |N )% ')'
  %S %f dump_formated_exception_client_list_cpp %( 'EX_CLIENT_LIST"' %, %, ' ' )% ' {' )% [%f] set_var %( 'OP_LEN' %, [%f] string_length %( ( get_global_var ( 'OPERATION_CPP' ) |N ) )% )% 
//	%f_set_var(NEED_WRAP,"%f_number_cmp("%{OP_LEN}N","120","\>")")\
  [%f] set_var %( 'NEED_WRAP' %, [%f] number_cmp %( ( get_global_var ( 'OP_LEN' ) |N ) %, 120 %, '>' )% )% 
//	[{%f_true(%{NEED_WRAP})=true&%Cx=true}{%{OPERATION_CPP}N}%t_ret(%{INT},"%f_factory_target_strereotype(%S,"%1N")") %{INT}NFactory::%SN%2N (%S%f_factory_params("%1N","\n\t","\n"))%S%f_dump_formated_exception_client_list_cpp("EX_CLIENT_LIST",", ","NEW_LINE") {]
  if ( ( [%f] true %( ( get_global_var ( 'NEED_WRAP' ) ) )% ) %==  true AND 
    ( ( %C |x ) %==  true  ) ) then
  begin
   [%t] ret %( ( get_global_var ( 'INT' ) ) %, [%f] factory_target_strereotype %( %S %, %1 |N )% )% ' '
   ( get_global_var ( 'INT' ) |N ) 'Factory::'
   %S |N %2 |N ' ('
   %S %f factory_params %( %1 |N %, #13#10#9'"' %, #13#10 )% ')'
   %S %f dump_formated_exception_client_list_cpp %( 'EX_CLIENT_LIST"' %, %, ' "' %, 'NEW_LINE' )% ' {' 
  end // if
  else
  begin
   ( get_global_var ( 'OPERATION_CPP' ) |N ) 
  end // else
//		return %{INT}NFactoryManager::Singleton::instance ()-\>%SN%2N (<{, }{%CS!=cache}%CN>);
  '	return '
  ( get_global_var ( 'INT' ) |N ) 'FactoryManager::Singleton::instance ()->'
  %S |N %2 |N ' ('
  INTEGER VAR l_Counter l_Counter := 0
  for %S%C
  begin
   OBJECT IN %C
   if ( ( %C |S ) %!= 'cache' ) then
   begin
    if ( l_Counter >0 ) then ( ', ' )
    %C |N 
    ++! l_Counter
   end // if
  end // for C
  ');'
//	}]
  '}' 
 end // if

//f _dump_derived_multi_factory_operation_cpp
; // dump_multi_factory_operation_cpp_impl

: dump_derived_multi_factory_operation_cpp OBJECT IN %S
//	[{%S{const_type}=combo}{%f_dump_derived_multi_factory_operation_cpp_impl(%S)}%f_dump_derived_multi_factory_operation_cpp_impl(%S,"read-write")
 if ( ( %S get_up ( 'const_type' ) ) %== 'combo' ) then
 begin
  [%f] dump_derived_multi_factory_operation_cpp_impl %( %S %, 'read-write' )% 
//	
  #13#10

//	%f_dump_derived_multi_factory_operation_cpp_impl(%S,"read-only","_ro")]
  [%f] dump_derived_multi_factory_operation_cpp_impl %( %S %, 'read-only"' %, '_ro' )% 
 end // if
 else
 begin
  [%f] dump_derived_multi_factory_operation_cpp_impl %( %S )% 
 end // else

//f _dump_derived_multi_factory_operation_cpp_impl
; // dump_derived_multi_factory_operation_cpp

: dump_derived_multi_factory_operation_cpp_impl OBJECT IN %S
//	[{%S{transparent multy}=false|"%S{transparent multy}"=""}%f_set_var(OPERATION_CPP,"%t_ret(%{INT},"%f_factory_target_strereotype(%S,"%1N")") %{SERV}NFactory::%SN%2N (<%CX, >%{INT}%f_dump_switch_arg_type() key) /*throw (Core::Root::UnknownFactoryKey, Core::Root::FactoryManagerWasDestroyed[{%f_need_conversion_exception(%S)=true}, Core::Root::ImpossibleConversion]<, %f_type(%E)>)*/ {")%f_set_var(OP_LEN,"%f_string_length("%{OPERATION_CPP}N")")\
 if ( ( %S get_up ( 'transparent multy' ) ) %==  false OR 
   ( ( %S get_up ( 'transparent multy' ) ) %== ''  ) ) then
 begin
  [%f] set_var %( 'OPERATION_CPP' %, [%t] ret %( ( get_global_var ( 'INT' ) ) %, [%f] factory_target_strereotype %( %S %, %1 |N )% )% ' '
  ( get_global_var ( 'SERV' ) |N ) 'Factory::'
  %S |N %2 |N ' ('
  INTEGER VAR l_Counter l_Counter := 0
  for %S%C
  begin
   OBJECT IN %C
   if true then
   begin
    %C |X ', ' 
    ++! l_Counter
   end // if
  end // for C
  ( get_global_var ( 'INT' ) %f dump_switch_arg_type %( )% ) ' key) /*throw (Core::Root::UnknownFactoryKey' %, ' Core::Root::FactoryManagerWasDestroyed'
  if ( ( [%f] need_conversion_exception %( %S )% ) %==  true ) then
  begin
   ', Core::Root::ImpossibleConversion' 
  end // if
  INTEGER VAR l_Counter l_Counter := 0
  for %S%E
  begin
   OBJECT IN %E
   if true then
   begin
    ', '
    [%f] type %( %E )% 
    ++! l_Counter
   end // if
  end // for E
  ')*/ {' )% [%f] set_var %( 'OP_LEN' %, [%f] string_length %( ( get_global_var ( 'OPERATION_CPP' ) |N ) )% )% 
//	%f_set_var(NEED_WRAP,"%f_number_cmp("%{OP_LEN}N","120","\>")")\
  [%f] set_var %( 'NEED_WRAP' %, [%f] number_cmp %( ( get_global_var ( 'OP_LEN' ) |N ) %, 120 %, '>' )% )% 
//	[{%f_true(%{NEED_WRAP})=true&%Cx=true}{%{OPERATION_CPP}N}%t_ret(%{INT},"%f_factory_target_strereotype(%S,"%1N")") %{SERV}NFactory::%SN%2N (\n\t<%CX\n\t, >%{INT}%f_dump_switch_arg_type() key\n) /*throw (Core::Root::UnknownFactoryKey, Core::Root::FactoryManagerWasDestroyed[{%f_need_conversion_exception(%S)=true}, Core::Root::ImpossibleConversion]<, %f_type(%E)>)*/ {]
  if ( ( [%f] true %( ( get_global_var ( 'NEED_WRAP' ) ) )% ) %==  true AND 
    ( ( %C |x ) %==  true  ) ) then
  begin
   [%t] ret %( ( get_global_var ( 'INT' ) ) %, [%f] factory_target_strereotype %( %S %, %1 |N )% )% ' '
   ( get_global_var ( 'SERV' ) |N ) 'Factory::'
   %S |N %2 |N ' ('#13#10#9
   INTEGER VAR l_Counter l_Counter := 0
   for %S%C
   begin
    OBJECT IN %C
    if true then
    begin
     %C |X #13#10#9', ' 
     ++! l_Counter
    end // if
   end // for C
   ( get_global_var ( 'INT' ) %f dump_switch_arg_type %( )% ) ' key'#13#10') /*throw (Core::Root::UnknownFactoryKey, Core::Root::FactoryManagerWasDestroyed'
   if ( ( [%f] need_conversion_exception %( %S )% ) %==  true ) then
   begin
    ', Core::Root::ImpossibleConversion' 
   end // if
   INTEGER VAR l_Counter l_Counter := 0
   for %S%E
   begin
    OBJECT IN %E
    if true then
    begin
     ', '
     [%f] type %( %E )% 
     ++! l_Counter
    end // if
   end // for E
   ')*/ {' 
  end // if
  else
  begin
   ( get_global_var ( 'OPERATION_CPP' ) |N ) 
  end // else
//	%f_dump_derived_multi_fctr_return_impl(%S)
  [%f] dump_derived_multi_fctr_return_impl %( %S )% 
//	}][{%S{transparent multy}=true}\
  '}' 
 end // if
 if ( ( %S get_up ( 'transparent multy' ) ) %==  true ) then
 begin
//	%f_set_var(OPERATION_CPP,"%t_ret(%{INT},"%f_factory_target_strereotype(%S,"%1N")") %{SERV}NFactory::%SN%2N (<{, }%CX>) /*throw (Core::Root::NoActiveFactory, Core::Root::FactoryManagerWasDestroyed[{%f_need_conversion_exception(%S)=true}, Core::Root::ImpossibleConversion]<, %f_type(%E)>)*/ {")%f_set_var(OP_LEN,"%f_string_length("%{OPERATION_CPP}N")")\
  [%f] set_var %( 'OPERATION_CPP' %, [%t] ret %( ( get_global_var ( 'INT' ) ) %, [%f] factory_target_strereotype %( %S %, %1 |N )% )% ' '
  ( get_global_var ( 'SERV' ) |N ) 'Factory::'
  %S |N %2 |N ' ('
  INTEGER VAR l_Counter l_Counter := 0
  for %S%C
  begin
   OBJECT IN %C
   if true then
   begin
    if ( l_Counter >0 ) then ( ', ' )
    %C |X 
    ++! l_Counter
   end // if
  end // for C
  ') /*throw (Core::Root::NoActiveFactory' %, ' Core::Root::FactoryManagerWasDestroyed'
  if ( ( [%f] need_conversion_exception %( %S )% ) %==  true ) then
  begin
   ', Core::Root::ImpossibleConversion' 
  end // if
  INTEGER VAR l_Counter l_Counter := 0
  for %S%E
  begin
   OBJECT IN %E
   if true then
   begin
    ', '
    [%f] type %( %E )% 
    ++! l_Counter
   end // if
  end // for E
  ')*/ {' )% [%f] set_var %( 'OP_LEN' %, [%f] string_length %( ( get_global_var ( 'OPERATION_CPP' ) |N ) )% )% 
//	%f_set_var(NEED_WRAP,"%f_number_cmp("%{OP_LEN}N","120","\>")")\
  [%f] set_var %( 'NEED_WRAP' %, [%f] number_cmp %( ( get_global_var ( 'OP_LEN' ) |N ) %, 120 %, '>' )% )% 
//	[{%f_true(%{NEED_WRAP})=true&%Cx=true}{%{OPERATION_CPP}N}%t_ret(%{INT},"%f_factory_target_strereotype(%S,"%1N")") %{SERV}NFactory::%SN%2N (\n\t<{\n\t, }%CX>\n) /*throw (Core::Root::NoActiveFactory, Core::Root::FactoryManagerWasDestroyed[{%f_need_conversion_exception(%S)=true}, Core::Root::ImpossibleConversion]<, %f_type(%E)>)*/ {]
  if ( ( [%f] true %( ( get_global_var ( 'NEED_WRAP' ) ) )% ) %==  true AND 
    ( ( %C |x ) %==  true  ) ) then
  begin
   [%t] ret %( ( get_global_var ( 'INT' ) ) %, [%f] factory_target_strereotype %( %S %, %1 |N )% )% ' '
   ( get_global_var ( 'SERV' ) |N ) 'Factory::'
   %S |N %2 |N ' ('#13#10#9
   INTEGER VAR l_Counter l_Counter := 0
   for %S%C
   begin
    OBJECT IN %C
    if true then
    begin
     if ( l_Counter >0 ) then ( #13#10#9', ' )
     %C |X 
     ++! l_Counter
    end // if
   end // for C
   #13#10') /*throw (Core::Root::NoActiveFactory, Core::Root::FactoryManagerWasDestroyed'
   if ( ( [%f] need_conversion_exception %( %S )% ) %==  true ) then
   begin
    ', Core::Root::ImpossibleConversion' 
   end // if
   INTEGER VAR l_Counter l_Counter := 0
   for %S%E
   begin
    OBJECT IN %E
    if true then
    begin
     ', '
     [%f] type %( %E )% 
     ++! l_Counter
    end // if
   end // for E
   ')*/ {' 
  end // if
  else
  begin
   ( get_global_var ( 'OPERATION_CPP' ) |N ) 
  end // else
//	%f_dump_derived_multi_fctr_return_impl(%S)
  [%f] dump_derived_multi_fctr_return_impl %( %S )% 
//	}]
  '}' 
 end // if

//f _dump_derived_multi_fctr_return_impl
; // dump_derived_multi_factory_operation_cpp_impl

: dump_derived_multi_fctr_return_impl OBJECT IN %S
//	[{%{INT}S=LocalInterface&%{FACTORY_PARENT}S=ServerInterface}{\
 if ( ( ( get_global_var ( 'INT' ) |S ) ) %== 'LocalInterface' AND 
   ( ( ( get_global_var ( 'FACTORY_PARENT' ) |S ) ) %== 'ServerInterface'  ) ) then
 begin
//	[{%f_is_it_cached(%S)=true}{\
  if ( ( [%f] is_it_cached %( %S )% ) %==  true ) then
  begin
   #13#10

//			return ret;}	try {
   '		return ret;}	try {'
//			PortableServer::ServantBase_var serv = LibHomeFactory::get().get_orb_facet().get_root_poa().reference_to_servant (
   '		PortableServer::ServantBase_var serv = LibHomeFactory::get().get_orb_facet().get_root_poa().reference_to_servant ('
//				&%f_type(%{FACTORY_PARENT})Factory::%SN%2N ([{%S{transparent multy}!=true}{<{, }%CN>}<%CN, >key])
   '			&'
   [%f] type %( ( get_global_var ( 'FACTORY_PARENT' ) ) )% 'Factory::'
   %S |N %2 |N ' ('
   if ( ( %S get_up ( 'transparent multy' ) ) %!=  true ) then
   begin
    INTEGER VAR l_Counter l_Counter := 0
    for %S%C
    begin
     OBJECT IN %C
     if true then
     begin
      %C |N ', ' 
      ++! l_Counter
     end // if
    end // for C
    'key' 
   end // if
   else
   begin
    INTEGER VAR l_Counter l_Counter := 0
    for %S%C
    begin
     OBJECT IN %C
     if true then
     begin
      if ( l_Counter >0 ) then ( ', ' )
      %C |N 
      ++! l_Counter
     end // if
    end // for C
   end // else
   ')'
//			);
   '		);'
//			return dynamic_cast\<%t_ret(%{INT},"%f_factory_target_strereotype(%S,"%1N")")\> (*serv.in ());
   '		return dynamic_cast<'
   [%t] ret %( ( get_global_var ( 'INT' ) ) %, [%f] factory_target_strereotype %( %S %, %1 |N )% )% '> (*serv.in ());'
//		} catch (std::bad_cast&) {
   '	} catch (std::bad_cast&) {'
//			throw Core::Root::NoActiveFactory (%{INT}["%P%PN::%PN::%SNFactory"]);
   '		throw Core::Root::NoActiveFactory ('
   ( get_global_var ( 'INT' ) ) 
   bind ( 
    OBJECT VAR %S
    if NOT-EMPTY
    begin
     %P ->P |N  '::'
     %P |N '::'
     %S |N 'Factory' 
    end // if
    NOP

   ) // bind
   ');'
//		}]]
   '	}' 
  end // if
  else
  begin
//			PortableServer::ServantBase_var serv = LibHomeFactory::get().get_orb_facet().get_root_poa().reference_to_servant (
   '		PortableServer::ServantBase_var serv = LibHomeFactory::get().get_orb_facet().get_root_poa().reference_to_servant ('
//				%f_type(%{FACTORY_PARENT})Factory::%SN%2N ([{%S{transparent multy}!=true}{<{, }%CN>}<%CN, >key])
   '			'
   [%f] type %( ( get_global_var ( 'FACTORY_PARENT' ) ) )% 'Factory::'
   %S |N %2 |N ' ('
   if ( ( %S get_up ( 'transparent multy' ) ) %!=  true ) then
   begin
    INTEGER VAR l_Counter l_Counter := 0
    for %S%C
    begin
     OBJECT IN %C
     if true then
     begin
      %C |N ', ' 
      ++! l_Counter
     end // if
    end // for C
    'key' 
   end // if
   else
   begin
    INTEGER VAR l_Counter l_Counter := 0
    for %S%C
    begin
     OBJECT IN %C
     if true then
     begin
      if ( l_Counter >0 ) then ( ', ' )
      %C |N 
      ++! l_Counter
     end // if
    end // for C
   end // else
   ')'
//			);
   '		);'
//			%t_ret(%{INT},"%f_factory_target_strereotype(%S,"%1N")") ret = dynamic_cast\<%t_ret(%{INT},"%f_factory_target_strereotype(%S,"%1N")")\> (serv.in ());
   '		'
   [%t] ret %( ( get_global_var ( 'INT' ) ) %, [%f] factory_target_strereotype %( %S %, %1 |N )% )% ' ret = dynamic_cast<'
   [%t] ret %( ( get_global_var ( 'INT' ) ) %, [%f] factory_target_strereotype %( %S %, %1 |N )% )% '> (serv.in ());'
//			if (ret == 0) {
   '		if (ret == 0) {'
//				throw Core::Root::NoActiveFactory (%{INT}["%P%PN::%PN::%SNFactory"]);
   '			throw Core::Root::NoActiveFactory ('
   ( get_global_var ( 'INT' ) ) 
   bind ( 
    OBJECT VAR %S
    if NOT-EMPTY
    begin
     %P ->P |N  '::'
     %P |N '::'
     %S |N 'Factory' 
    end // if
    NOP

   ) // bind
   ');'
//			}
   '		' 
  end // else
 end // if
 else
 begin
//	[{%{INT}U!=%{FACTORY_PARENT}U}{	return %f_type(%{FACTORY_PARENT})Factory::%SN%2N ([{%S{transparent multy}!=true}{<{, }%CN>}<%CN, >key]);}\
  if ( ( ( get_global_var ( 'INT' ) |U ) ) %!= ( ( get_global_var ( 'FACTORY_PARENT' ) |U ) ) ) then
  begin
//	%f_set_var(__RET__,"%t_ret(%{INT},"%f_factory_target_strereotype(%S,"%1N")")")\
   [%f] set_var %( '__RET__' %, [%t] ret %( ( get_global_var ( 'INT' ) ) %, [%f] factory_target_strereotype %( %S %, %1 |N )% )% )% 
//	[{%f_substr_from_end(%{__RET__}N,1)=%f_logic_and(%S)}{	%{__RET__}N ret = dynamic_cast\<%{__RET__}N\> (%f_type(%{FACTORY_PARENT})Factory::%SN%2N ([{%S{transparent multy}!=true}{<{, }%CN>}<%CN, >key]));
   if ( ( [%f] substr_from_end %( ( get_global_var ( '__RET__' ) |N ) %, 1 )% ) %== ( [%f] logic_and %( %S )% ) ) then
   begin
    #13#10

//		return ret;}\
    '	return ret;}'
//		try {
    '	try {'
//			return dynamic_cast\<%{__RET__}N\> (%f_type(%{FACTORY_PARENT})Factory::%SN%2N ([{%S{transparent multy}!=true}{<{, }%CN>}<%CN, >key]));
    '		return dynamic_cast<'
    ( get_global_var ( '__RET__' ) |N ) '> ('
    [%f] type %( ( get_global_var ( 'FACTORY_PARENT' ) ) )% 'Factory::'
    %S |N %2 |N ' ('
    if ( ( %S get_up ( 'transparent multy' ) ) %!=  true ) then
    begin
     INTEGER VAR l_Counter l_Counter := 0
     for %S%C
     begin
      OBJECT IN %C
      if true then
      begin
       %C |N ', ' 
       ++! l_Counter
      end // if
     end // for C
     'key' 
    end // if
    else
    begin
     INTEGER VAR l_Counter l_Counter := 0
     for %S%C
     begin
      OBJECT IN %C
      if true then
      begin
       if ( l_Counter >0 ) then ( ', ' )
       %C |N 
       ++! l_Counter
      end // if
     end // for C
    end // else
    '));'
//		} catch (std::bad_cast&) {
    '	} catch (std::bad_cast&) {'
//			throw Core::Root::NoActiveFactory (%{INT}["%P%PN::%PN::%SNFactory"]);
    '		throw Core::Root::NoActiveFactory ('
    ( get_global_var ( 'INT' ) ) 
    bind ( 
     OBJECT VAR %S
     if NOT-EMPTY
     begin
      %P ->P |N  '::'
      %P |N '::'
      %S |N 'Factory' 
     end // if
     NOP

    ) // bind
    ');'
//		}
    '	}'
//	]]}\
   end // if
   else
   begin
    '	'
    ( get_global_var ( '__RET__' ) |N ) ' ret = dynamic_cast<'
    ( get_global_var ( '__RET__' ) |N ) '> ('
    [%f] type %( ( get_global_var ( 'FACTORY_PARENT' ) ) )% 'Factory::'
    %S |N %2 |N ' ('
    if ( ( %S get_up ( 'transparent multy' ) ) %!=  true ) then
    begin
     INTEGER VAR l_Counter l_Counter := 0
     for %S%C
     begin
      OBJECT IN %C
      if true then
      begin
       %C |N ', ' 
       ++! l_Counter
      end // if
     end // for C
     'key' 
    end // if
    else
    begin
     INTEGER VAR l_Counter l_Counter := 0
     for %S%C
     begin
      OBJECT IN %C
      if true then
      begin
       if ( l_Counter >0 ) then ( ', ' )
       %C |N 
       ++! l_Counter
      end // if
     end // for C
    end // else
    '));'
//		if (ret == 0) {
    '	if (ret == 0) {'
//			throw Core::Root::NoActiveFactory (%{INT}["%P%PN::%PN::%SNFactory"]);
    '		throw Core::Root::NoActiveFactory ('
    ( get_global_var ( 'INT' ) ) 
    bind ( 
     OBJECT VAR %S
     if NOT-EMPTY
     begin
      %P ->P |N  '::'
      %P |N '::'
      %S |N 'Factory' 
     end // if
     NOP

    ) // bind
    ');'
//		}
    '	' 
   end // else
  end // if
  else
  begin
   '	return '
   [%f] type %( ( get_global_var ( 'FACTORY_PARENT' ) ) )% 'Factory::'
   %S |N %2 |N ' ('
   if ( ( %S get_up ( 'transparent multy' ) ) %!=  true ) then
   begin
    INTEGER VAR l_Counter l_Counter := 0
    for %S%C
    begin
     OBJECT IN %C
     if true then
     begin
      %C |N ', ' 
      ++! l_Counter
     end // if
    end // for C
    'key' 
   end // if
   else
   begin
    INTEGER VAR l_Counter l_Counter := 0
    for %S%C
    begin
     OBJECT IN %C
     if true then
     begin
      if ( l_Counter >0 ) then ( ', ' )
      %C |N 
      ++! l_Counter
     end // if
    end // for C
   end // else
   ');' 
  end // else
 end // else
//#UC END# *47022CB8034Bfor470F57A80119*
; // dump_derived_multi_fctr_return_impl


// генератор классов, интерфейсов на java (.java)
//+ java
implementation @ :: <<Interface>> <<"multi factory">> ;
<<generator>> java OBJECT IN %S
//#UC START# *470321950119for470F57A80119*
//	%f_docs(%S)\
 [%f] docs %( %S )% 
//	[{%S%f_is_cached()=true}#// Фабрика возвращает кэшированный экземпляр!
 if ( ( %S %f is_cached %( )% ) %==  true ) then
 begin
  out_indent '// Фабрика возвращает кэшированный экземпляр!'
//	][{%S{transparent multy}=false|"%S{transparent multy}"=""}\
 end // if
 if ( ( %S get_up ( 'transparent multy' ) ) %==  false OR 
   ( ( %S get_up ( 'transparent multy' ) ) %== ''  ) ) then
 begin

//%S{transparent multy}=false
//	#%t_visibility(%S,"%XU")static %t_ret(%{INT},"%Ss") %f_to_java(%SN) (<%f_arg_full_decl(%C), >%{INT}%f_dump_switch_type() key) throws UnknownFactoryKey[{%{INT}U!=%{FACTORY_PARENT}U}, NoActiveFactory][{%f_need_conversion_exception(%S)=true}, ru.garant.shared.Core.Root.ImpossibleConversion]<, %f_type(%E)> {
  out_indent [%t] visibility %( %S %, %X |U )% 'static '
  [%t] ret %( ( get_global_var ( 'INT' ) ) %, %S |s )% ' '
  [%f] to_java %( %S |N )% ' ('
  INTEGER VAR l_Counter l_Counter := 0
  for %S%C
  begin
   OBJECT IN %C
   if true then
   begin
    [%f] arg_full_decl %( %C )% ', ' 
    ++! l_Counter
   end // if
  end // for C
  ( get_global_var ( 'INT' ) %f dump_switch_type %( )% ) ' key) throws UnknownFactoryKey'
  if ( ( ( get_global_var ( 'INT' ) |U ) ) %!= ( ( get_global_var ( 'FACTORY_PARENT' ) |U ) ) ) then
  begin
   ', NoActiveFactory' 
  end // if
  if ( ( [%f] need_conversion_exception %( %S )% ) %==  true ) then
  begin
   ', ru.garant.shared.Core.Root.ImpossibleConversion' 
  end // if
  INTEGER VAR l_Counter l_Counter := 0
  for %S%E
  begin
   OBJECT IN %E
   if true then
   begin
    ', '
    [%f] type %( %E )% 
    ++! l_Counter
   end // if
  end // for E
  ' {'
//	[{%{INT}U!=%{FACTORY_PARENT}U}{#	return %f_type(%{FACTORY_PARENT})FactoryManager.%{FACTORY_PARENT}%f_fctr_mng_get_instance_name() ().%f_to_java(%SN) (<%f_to_java(%CN), >key);}\
  if ( ( ( get_global_var ( 'INT' ) |U ) ) %!= ( ( get_global_var ( 'FACTORY_PARENT' ) |U ) ) ) then
  begin
//	#	%f_type(%{FACTORY_PARENT}) ret = %f_type(%{FACTORY_PARENT})FactoryManager.%{FACTORY_PARENT}%f_fctr_mng_get_instance_name() ().%f_to_java(%SN) (<%f_to_java(%CN), >key);
   out_indent '	'
   [%f] type %( ( get_global_var ( 'FACTORY_PARENT' ) ) )% ' ret = '
   [%f] type %( ( get_global_var ( 'FACTORY_PARENT' ) ) )% 'FactoryManager.'
   ( get_global_var ( 'FACTORY_PARENT' ) %f fctr_mng_get_instance_name %( )% ) ' ().'
   [%f] to_java %( %S |N )% ' ('
   INTEGER VAR l_Counter l_Counter := 0
   for %S%C
   begin
    OBJECT IN %C
    if true then
    begin
     [%f] to_java %( %C |N )% ', ' 
     ++! l_Counter
    end // if
   end // for C
   'key);'
//	#	if (ret instanceof %f_type(%{INT})) {
   out_indent '	if (ret instanceof '
   [%f] type %( ( get_global_var ( 'INT' ) ) )% ') {'
//	#		return (%f_type(%{INT})) ret;
   out_indent '		return ('
   [%f] type %( ( get_global_var ( 'INT' ) ) )% ') ret;'
//	#	} else {
   out_indent '	} else {'
//	#		throw new NoActiveFactory (%{INT}["%P%PN::%PN::%SNFactory"]);
   out_indent '		throw new NoActiveFactory ('
   ( get_global_var ( 'INT' ) ) 
   bind ( 
    OBJECT VAR %S
    if NOT-EMPTY
    begin
     %P ->P |N  '::'
     %P |N '::'
     %S |N 'Factory' 
    end // if
    NOP

   ) // bind
   ');'
//	#	}]
   out_indent '	}' 
  end // if
  else
  begin
   out_indent '	return '
   [%f] type %( ( get_global_var ( 'FACTORY_PARENT' ) ) )% 'FactoryManager.'
   ( get_global_var ( 'FACTORY_PARENT' ) %f fctr_mng_get_instance_name %( )% ) ' ().'
   [%f] to_java %( %S |N )% ' ('
   INTEGER VAR l_Counter l_Counter := 0
   for %S%C
   begin
    OBJECT IN %C
    if true then
    begin
     [%f] to_java %( %C |N )% ', ' 
     ++! l_Counter
    end // if
   end // for C
   'key);' 
  end // else
//	#}][{%S{transparent multy}=true}\
  out_indent '}' 
 end // if
 if ( ( %S get_up ( 'transparent multy' ) ) %==  true ) then
 begin

//%S{transparent multy}=true
//	#%t_visibility(%S,"%XU")static %t_ret(%{INT},"%Ss") %f_to_java(%SN) (<{, }%f_arg_full_decl(%C)>) throws NoActiveFactory[{%f_need_conversion_exception(%S)=true}, ru.garant.shared.Core.Root.ImpossibleConversion]<, %f_type(%E)> {
  out_indent [%t] visibility %( %S %, %X |U )% 'static '
  [%t] ret %( ( get_global_var ( 'INT' ) ) %, %S |s )% ' '
  [%f] to_java %( %S |N )% ' ('
  INTEGER VAR l_Counter l_Counter := 0
  for %S%C
  begin
   OBJECT IN %C
   if true then
   begin
    if ( l_Counter >0 ) then ( ', ' )
    [%f] arg_full_decl %( %C )% 
    ++! l_Counter
   end // if
  end // for C
  ') throws NoActiveFactory'
  if ( ( [%f] need_conversion_exception %( %S )% ) %==  true ) then
  begin
   ', ru.garant.shared.Core.Root.ImpossibleConversion' 
  end // if
  INTEGER VAR l_Counter l_Counter := 0
  for %S%E
  begin
   OBJECT IN %E
   if true then
   begin
    ', '
    [%f] type %( %E )% 
    ++! l_Counter
   end // if
  end // for E
  ' {'
//	[{%{INT}U!=%{FACTORY_PARENT}U}{#	return %f_type(%{FACTORY_PARENT})FactoryManager.%{FACTORY_PARENT}%f_fctr_mng_get_instance_name() ().%f_to_java(%SN) (<{, }%f_to_java(%CN)>);}\
  if ( ( ( get_global_var ( 'INT' ) |U ) ) %!= ( ( get_global_var ( 'FACTORY_PARENT' ) |U ) ) ) then
  begin
//	#	%f_type(%{FACTORY_PARENT}) ret = %f_type(%{FACTORY_PARENT})FactoryManager.%{FACTORY_PARENT}%f_fctr_mng_get_instance_name() ().%f_to_java(%SN) (<{, }%f_to_java(%CN)>);
   out_indent '	'
   [%f] type %( ( get_global_var ( 'FACTORY_PARENT' ) ) )% ' ret = '
   [%f] type %( ( get_global_var ( 'FACTORY_PARENT' ) ) )% 'FactoryManager.'
   ( get_global_var ( 'FACTORY_PARENT' ) %f fctr_mng_get_instance_name %( )% ) ' ().'
   [%f] to_java %( %S |N )% ' ('
   INTEGER VAR l_Counter l_Counter := 0
   for %S%C
   begin
    OBJECT IN %C
    if true then
    begin
     if ( l_Counter >0 ) then ( ', ' )
     [%f] to_java %( %C |N )% 
     ++! l_Counter
    end // if
   end // for C
   ');'
//	#	if (ret instanceof %f_type(%{INT})) {
   out_indent '	if (ret instanceof '
   [%f] type %( ( get_global_var ( 'INT' ) ) )% ') {'
//	#		return (%f_type(%{INT})) ret;
   out_indent '		return ('
   [%f] type %( ( get_global_var ( 'INT' ) ) )% ') ret;'
//	#	} else {
   out_indent '	} else {'
//	#		throw new NoActiveFactory (%{INT}["%P%PN::%PN::%SNFactory"]);
   out_indent '		throw new NoActiveFactory ('
   ( get_global_var ( 'INT' ) ) 
   bind ( 
    OBJECT VAR %S
    if NOT-EMPTY
    begin
     %P ->P |N  '::'
     %P |N '::'
     %S |N 'Factory' 
    end // if
    NOP

   ) // bind
   ');'
//	#	}]
   out_indent '	}' 
  end // if
  else
  begin
   out_indent '	return '
   [%f] type %( ( get_global_var ( 'FACTORY_PARENT' ) ) )% 'FactoryManager.'
   ( get_global_var ( 'FACTORY_PARENT' ) %f fctr_mng_get_instance_name %( )% ) ' ().'
   [%f] to_java %( %S |N )% ' ('
   INTEGER VAR l_Counter l_Counter := 0
   for %S%C
   begin
    OBJECT IN %C
    if true then
    begin
     if ( l_Counter >0 ) then ( ', ' )
     [%f] to_java %( %C |N )% 
     ++! l_Counter
    end // if
   end // for C
   ');' 
  end // else
//	#}][{%S%f_is_cached()=true&%Cx=true}
  out_indent '}' 
 end // if
 if ( ( %S %f is_cached %( )% ) %==  true AND 
   ( ( %C |x ) %==  true  ) ) then
 begin
  #13#10

//	
  #13#10

//	#public static java.util.Collection\<[{%TS=FactoryMemory&%T%f_use_for_synchro_factory()=true|%Ss=synchro}{%t_ret(%{INT})}java.lang.ref.WeakReference\<%t_ret(%{INT})\> ]\> %f_to_java(get_cached_objects_for_%SN) () {
  out_indent 'public static java.util.Collection<'
  if ( ( %T |S ) %== 'FactoryMemory' AND 
    ( ( %T %f use_for_synchro_factory %( )% ) %==  true  ) OR 
    ( ( %S |s ) %== 'synchro'  ) ) then
  begin
   'java.lang.ref.WeakReference<'
   [%t] ret %( ( get_global_var ( 'INT' ) ) )% '> ' 
  end // if
  else
  begin
   [%t] ret %( ( get_global_var ( 'INT' ) ) )% 
  end // else
  '> '
  [%f] to_java %( 'get_cached_objects_for_'
  %S |N )% ' () {'
//	#	[{%{FACTORY_PARENT}U!=%{INT}U}{return %f_type(%{FACTORY_PARENT})FactoryManager.%{FACTORY_PARENT}%f_fctr_mng_get_instance_name() ().%f_to_java(get_cached_objects_for_%SN) ();}java.util.Collection\<[{%TS=FactoryMemory&%T%f_use_for_synchro_factory()=true|%Ss=synchro}{%t_ret(%{INT})}java.lang.ref.WeakReference\<%t_ret(%{INT})\> ]\> res = new java.util.ArrayList\<[{%TS=FactoryMemory&%T%f_use_for_synchro_factory()=true|%Ss=synchro}{%t_ret(%{INT})}java.lang.ref.WeakReference\<%t_ret(%{INT})\> ]\>();
  out_indent '	'
  if ( ( ( get_global_var ( 'FACTORY_PARENT' ) |U ) ) %!= ( ( get_global_var ( 'INT' ) |U ) ) ) then
  begin
   'java.util.Collection<'
   if ( ( %T |S ) %== 'FactoryMemory' AND 
     ( ( %T %f use_for_synchro_factory %( )% ) %==  true  ) OR 
     ( ( %S |s ) %== 'synchro'  ) ) then
   begin
    'java.lang.ref.WeakReference<'
    [%t] ret %( ( get_global_var ( 'INT' ) ) )% '> ' 
   end // if
   else
   begin
    [%t] ret %( ( get_global_var ( 'INT' ) ) )% 
   end // else
   '> res = new java.util.ArrayList<'
   if ( ( %T |S ) %== 'FactoryMemory' AND 
     ( ( %T %f use_for_synchro_factory %( )% ) %==  true  ) OR 
     ( ( %S |s ) %== 'synchro'  ) ) then
   begin
    'java.lang.ref.WeakReference<'
    [%t] ret %( ( get_global_var ( 'INT' ) ) )% '> ' 
   end // if
   else
   begin
    [%t] ret %( ( get_global_var ( 'INT' ) ) )% 
   end // else
   '>();'
//	#	for ([{%TS=FactoryMemory&%T%f_use_for_synchro_factory()=true|%Ss=synchro}{%t_ret(%{FACTORY_PARENT})}java.lang.ref.WeakReference\<%t_ret(%{FACTORY_PARENT})\> ] item: %f_type(%{FACTORY_PARENT})FactoryManager.getInstance%{FACTORY_PARENT}U ().%f_to_java(get_cached_objects_for_%SN) ()) {
   out_indent '	for ('
   if ( ( %T |S ) %== 'FactoryMemory' AND 
     ( ( %T %f use_for_synchro_factory %( )% ) %==  true  ) OR 
     ( ( %S |s ) %== 'synchro'  ) ) then
   begin
    'java.lang.ref.WeakReference<'
    [%t] ret %( ( get_global_var ( 'FACTORY_PARENT' ) ) )% '> ' 
   end // if
   else
   begin
    [%t] ret %( ( get_global_var ( 'FACTORY_PARENT' ) ) )% 
   end // else
   ' item: '
   [%f] type %( ( get_global_var ( 'FACTORY_PARENT' ) ) )% 'FactoryManager.getInstance'
   ( get_global_var ( 'FACTORY_PARENT' ) |U ) ' ().'
   [%f] to_java %( 'get_cached_objects_for_'
   %S |N )% ' ()) {'
//	#		%f_type(%{FACTORY_PARENT}) obj = item[{%TS=FactoryMemory&%T%f_use_for_synchro_factory()=true|%Ss=synchro}.get ()];
   out_indent '		'
   [%f] type %( ( get_global_var ( 'FACTORY_PARENT' ) ) )% ' obj = item'
   if ( ( %T |S ) %== 'FactoryMemory' AND 
     ( ( %T %f use_for_synchro_factory %( )% ) %==  true  ) OR 
     ( ( %S |s ) %== 'synchro'  ) ) then
   begin
    '.get ()' 
   end // if
   ';'
//	#		if (obj != null && (obj instanceof %f_type(%{INT}))) {
   out_indent '		if (obj != null && (obj instanceof '
   [%f] type %( ( get_global_var ( 'INT' ) ) )% ')) {'
//	#			[{%TS=FactoryMemory&%T%f_use_for_synchro_factory()=true|%Ss=synchro}{res.add ((%f_type(%{INT}))obj);}res.add (
   out_indent '			'
   if ( ( %T |S ) %== 'FactoryMemory' AND 
     ( ( %T %f use_for_synchro_factory %( )% ) %==  true  ) OR 
     ( ( %S |s ) %== 'synchro'  ) ) then
   begin
    'res.add ('
//	#				new java.lang.ref.WeakReference\<%f_type(%{INT})\> (
    out_indent '				new java.lang.ref.WeakReference<'
    [%f] type %( ( get_global_var ( 'INT' ) ) )% '> ('
//	#					(%f_type(%{INT}))obj
    out_indent '					('
    [%f] type %( ( get_global_var ( 'INT' ) ) )% ')obj'
//	#				)
    out_indent '				)'
//	#			);]
    out_indent '			);' 
   end // if
   else
   begin
    'res.add (('
    [%f] type %( ( get_global_var ( 'INT' ) ) )% ')obj);' 
   end // else
//	#		}
   out_indent '		}'
//	#	}
   out_indent '	}'
//	#	return res;]
   out_indent '	return res;' 
  end // if
  else
  begin
   'return '
   [%f] type %( ( get_global_var ( 'FACTORY_PARENT' ) ) )% 'FactoryManager.'
   ( get_global_var ( 'FACTORY_PARENT' ) %f fctr_mng_get_instance_name %( )% ) ' ().'
   [%f] to_java %( 'get_cached_objects_for_'
   %S |N )% ' ();' 
  end // else
//	#}]
  out_indent '}' 
 end // if
//#UC END# *470321950119for470F57A80119*
; // java


// Функции стереотипа
//%f _st_space_key
: st_space_key OBJECT IN %S
//	MDP
 'MDP'

//%f _wiki_up_print
; // st_space_key

: wiki_up_print OBJECT IN %S
//	%S#[inherited][{"%S{transparent multy}"!="%S{!transparent multy}"}%f_up_prefix(%S) *transparent multy* = *%S{transparent multy}* - определяет, что выбор конкретной реализации будет реализован пользователем
 ?inherited
 if ( ( %S get_up ( 'transparent multy' ) ) %!= ( %S get_up_def ( 'transparent multy' ) ) ) then
 begin
  [%f] up_prefix %( %S )% ' *transparent multy* = *'
  %S get_up ( 'transparent multy' ) '* - определяет, что выбор конкретной реализации будет реализован пользователем'
//	]
 end // if


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// перекрытие базового стереотипа Interface::Class::factory::Operation
// дампит код реализации фабричного метода ("создающего") для менеджера фабрик в случае
// использования общей памяти
//%f _fctr_mng_factory_mem_create_impl
; // wiki_up_print

: fctr_mng_factory_mem_create_impl OBJECT IN %S
//#UC START# *4757C7C4005Afor470F57A80119*
//	%S%f_init_factory_mem_key_java_impl()
 %S %f init_factory_mem_key_java_impl %( )% 
//	#		FactoryData fctData = factoriesMap_.get (key);
 out_indent '		FactoryData fctData = factoriesMap_.get (key);'
//	#		if (fctData == null) {
 out_indent '		if (fctData == null) {'
//	#			[{%S{transparent multy}=false|"%S{transparent multy}"=""}{throw new [{%f_is_server_type(%{INT})=true}ru.garant.shared.CoreSrv.]NoActiveFactory ("%{INT}%P%PN.%PN.%SNFactory");}throw new UnknownFactoryKey ("%P%P%PN::%P%PN::%PNFactory"[{%{INT}S!=ServerInterface}, key.toString ()]);]
 out_indent '			'
 if ( ( %S get_up ( 'transparent multy' ) ) %==  false OR 
   ( ( %S get_up ( 'transparent multy' ) ) %== ''  ) ) then
 begin
  'throw new UnknownFactoryKey ("'
  %P ->P ->P |N   '::'
  %P ->P |N  '::'
  %P |N 'Factory"'
  if ( ( ( get_global_var ( 'INT' ) |S ) ) %!= 'ServerInterface' ) then
  begin
   ', key.toString ()' 
  end // if
  ');' 
 end // if
 else
 begin
  'throw new '
  if ( ( [%f] is_server_type %( ( get_global_var ( 'INT' ) ) )% ) %==  true ) then
  begin
   'ru.garant.shared.CoreSrv.' 
  end // if
  'NoActiveFactory ("'
  ( get_global_var ( 'INT' )  ->P ->P |N  ) '.'
  %P |N '.'
  %S |N 'Factory");' 
 end // else
//	#		}
 out_indent '		}'
//	#		[{%2N!=read-only}{%t_ret(%{INT}) obj}res] = fctData.factory_.%f_to_java(%SN) (<%f_to_java(%CN), >memKey);
 out_indent '		'
 if ( ( %2 |N ) %!= 'read-only' ) then
 begin
  'res' 
 end // if
 else
 begin
  [%t] ret %( ( get_global_var ( 'INT' ) ) )% ' obj' 
 end // else
 ' = fctData.factory_.'
 [%f] to_java %( %S |N )% ' ('
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   [%f] to_java %( %C |N )% ', ' 
   ++! l_Counter
  end // if
 end // for C
 'memKey);'
//	#		assert(%f_to_java(%TNMap)_.get (memKey) != null);
 out_indent '		assert('
 [%f] to_java %( %T |N 'Map' )% '_.get (memKey) != null);'
//	[{%f_is_ro_fctr_exists(%S)=false}{%f_create_new_combo_data(%S,"%2N")}
 if ( ( [%f] is_ro_fctr_exists %( %S )% ) %==  false ) then
 begin
  #13#10

//	#		%f_to_java(%TNMap)_.put (memKey, [{%T%f_use_for_synchro_factory()=true}{res}new java.lang.ref.WeakReference\<%t_ret(%{INT})\> (res)]);
  out_indent '		'
  [%f] to_java %( %T |N 'Map' )% '_.put (memKey, '
  if ( ( %T %f use_for_synchro_factory %( )% ) %==  true ) then
  begin
   'new java.lang.ref.WeakReference<'
   [%t] ret %( ( get_global_var ( 'INT' ) ) )% '> (res)' 
  end // if
  else
  begin
   'res' 
  end // else
  ');'
//	#		%f_to_java(%TNIndexMap)_.put ([{%f_is_server_type(%{INT})=true}{[{%T%f_use_for_synchro_factory()=true}{res}res.hashCode ()]}res._hash (Integer.MAX_VALUE)], memKey);]
  out_indent '		'
  [%f] to_java %( %T |N 'IndexMap' )% '_.put ('
  if ( ( [%f] is_server_type %( ( get_global_var ( 'INT' ) ) )% ) %==  true ) then
  begin
   'res._hash (Integer.MAX_VALUE)' 
  end // if
  else
  begin
   if ( ( %T %f use_for_synchro_factory %( )% ) %==  true ) then
   begin
    'res.hashCode ()' 
   end // if
   else
   begin
    'res' 
   end // else
  end // else
  ', memKey);' 
 end // if
 else
 begin
  [%f] create_new_combo_data %( %S %, %2 |N )% 
 end // else
//#UC END# *4757C7C4005Afor470F57A80119*
; // fctr_mng_factory_mem_create_impl


// перекрытие базового стереотипа Interface::Class::factory::Operation
// дампит код реализации фабричного метода (не "создающего") для менеджера фабрик в случае
// использования общей памяти
//%f _fctr_mng_factory_mem_java_impl
: fctr_mng_factory_mem_java_impl OBJECT IN %S
//#UC START# *4757C6DA0040for470F57A80119*
//	[{%f_is_ro_fctr_exists(%S)=true&%2N=read-only}{#			FactoryData fctData = factoriesMap_.get (key);
 if ( ( [%f] is_ro_fctr_exists %( %S )% ) %==  true AND 
   ( ( %2 |N ) %== 'read-only'  ) ) then
 begin
  #13#10

//	#			res = [{%T%f_use_for_synchro_factory()=false&%f_is_ro_fctr_exists(%S)=true}{fctData.factory_.%f_to_java(%SN) (<{, }%f_to_java(%CN)>);} new %t_fctr_manager_cache_value(%{INT},"var",%S) (
  out_indent '			res = '
  if ( ( %T %f use_for_synchro_factory %( )% ) %==  false AND 
    ( ( [%f] is_ro_fctr_exists %( %S )% ) %==  true  ) ) then
  begin
   ' new '
   [%t] fctr_manager_cache_value %( ( get_global_var ( 'INT' ) ) %, 'var"' %, %S )% ' ('
//	#				fctData.factory_.%f_to_java(%SN) (<{, }%f_to_java(%CN)>)
   out_indent '				fctData.factory_.'
   [%f] to_java %( %S |N )% ' ('
   INTEGER VAR l_Counter l_Counter := 0
   for %S%C
   begin
    OBJECT IN %C
    if true then
    begin
     if ( l_Counter >0 ) then ( ', ' )
     [%f] to_java %( %C |N )% 
     ++! l_Counter
    end // if
   end // for C
   ')'
//	#			);][{%T%f_use_for_synchro_factory()=true}
   out_indent '			);' 
  end // if
  else
  begin
   'fctData.factory_.'
   [%f] to_java %( %S |N )% ' ('
   INTEGER VAR l_Counter l_Counter := 0
   for %S%C
   begin
    OBJECT IN %C
    if true then
    begin
     if ( l_Counter >0 ) then ( ', ' )
     [%f] to_java %( %C |N )% 
     ++! l_Counter
    end // if
   end // for C
   ');' 
  end // else
  if ( ( %T %f use_for_synchro_factory %( )% ) %==  true ) then
  begin
   #13#10

//	#			ref = [{%f_is_ro_fctr_exists(%S)=true}{new java.lang.ref.WeakReference\<%t_ret(%{INT})\> (res);}new %t_fctr_manager_cache_value(%{INT},"type","") (
   out_indent '			ref = '
   if ( ( [%f] is_ro_fctr_exists %( %S )% ) %==  true ) then
   begin
    'new '
    [%t] fctr_manager_cache_value %( ( get_global_var ( 'INT' ) ) %, 'type"' %, '' )% ' ('
//	#				new java.lang.ref.WeakReference\<%t_ret(%{INT})\> (res)
    out_indent '				new java.lang.ref.WeakReference<'
    [%t] ret %( ( get_global_var ( 'INT' ) ) )% '> (res)'
//	#			);]]
    out_indent '			);' 
   end // if
   else
   begin
    'new java.lang.ref.WeakReference<'
    [%t] ret %( ( get_global_var ( 'INT' ) ) )% '> (res);' 
   end // else
  end // if
//	#			%f_to_java(%TNMap)_.put (memKey, [{%T%f_use_for_synchro_factory()=true}{res}ref]);
  out_indent '			'
  [%f] to_java %( %T |N 'Map' )% '_.put (memKey, '
  if ( ( %T %f use_for_synchro_factory %( )% ) %==  true ) then
  begin
   'ref' 
  end // if
  else
  begin
   'res' 
  end // else
  ');'
//	#			%f_to_java(%TNIndexMap)_.put ([{%f_is_server_type(%{INT})=true}{res[{%T%f_use_for_synchro_factory()=true}{[.%f_cache_postfix(%S,"read-write")]}.hashCode ()]}res._hash (Integer.MAX_VALUE)], memKey);\
  out_indent '			'
  [%f] to_java %( %T |N 'IndexMap' )% '_.put ('
  if ( ( [%f] is_server_type %( ( get_global_var ( 'INT' ) ) )% ) %==  true ) then
  begin
   'res._hash (Integer.MAX_VALUE)' 
  end // if
  else
  begin
   'res'
   if ( ( %T %f use_for_synchro_factory %( )% ) %==  true ) then
   begin
    '.hashCode ()' 
   end // if
   else
   begin
    if NOT-EMPTY
    begin
     '.'
     [%f] cache_postfix %( %S %, 'read-write' )% 
    end // if
    NOP
   end // else
  end // else
  ', memKey);'
//	}\
  '}'
//	#			[{%T%f_use_for_synchro_factory()=true}{if (res == null) {
  out_indent '			'
  if ( ( %T %f use_for_synchro_factory %( )% ) %==  true ) then
  begin
   #13#10

//	#				res = new %t_fctr_manager_cache_value(%{INT},"var",%S) (
   out_indent '				res = new '
   [%t] fctr_manager_cache_value %( ( get_global_var ( 'INT' ) ) %, 'var"' %, %S )% ' ('
//	#					fctData.factory_.%f_to_java(%SN) (<{, }%f_to_java(%CN)>)
   out_indent '					fctData.factory_.'
   [%f] to_java %( %S |N )% ' ('
   INTEGER VAR l_Counter l_Counter := 0
   for %S%C
   begin
    OBJECT IN %C
    if true then
    begin
     if ( l_Counter >0 ) then ( ', ' )
     [%f] to_java %( %C |N )% 
     ++! l_Counter
    end // if
   end // for C
   ')'
//	#				);
   out_indent '				);'
//	#				res[.%f_cache_postfix(%S,"read-only")] = new %{INT}NConstWrapper (res[.%f_cache_postfix(%S,"read-write")]);
   out_indent '				res'
   if NOT-EMPTY
   begin
    '.'
    [%f] cache_postfix %( %S %, 'read-only' )% 
   end // if
   NOP
   ' = new '
   ( get_global_var ( 'INT' ) |N ) 'ConstWrapper (res'
   if NOT-EMPTY
   begin
    '.'
    [%f] cache_postfix %( %S %, 'read-write' )% 
   end // if
   NOP
   ');'
//	#				res.isRoFirst = true;
   out_indent '				res.isRoFirst = true;'
//	#				%f_to_java(%TNMap)_.put (memKey, res);
   out_indent '				'
   [%f] to_java %( %T |N 'Map' )% '_.put (memKey, res);'
//	#				%f_to_java(%TNIndexMap)_.put ([{%f_is_server_type(%{INT})=true}{res[.%f_cache_postfix(%S,"read-write")]}res[.%f_cache_postfix(%S,"read-write")]._hash (Integer.MAX_VALUE)], memKey);
   out_indent '				'
   [%f] to_java %( %T |N 'IndexMap' )% '_.put ('
   if ( ( [%f] is_server_type %( ( get_global_var ( 'INT' ) ) )% ) %==  true ) then
   begin
    'res'
    if NOT-EMPTY
    begin
     '.'
     [%f] cache_postfix %( %S %, 'read-write' )% 
    end // if
    NOP
    '._hash (Integer.MAX_VALUE)' 
   end // if
   else
   begin
    'res'
    if NOT-EMPTY
    begin
     '.'
     [%f] cache_postfix %( %S %, 'read-write' )% 
    end // if
    NOP
   end // else
   ', memKey);'
//	#			} else if (res[.%f_cache_postfix(%S,"read-only")] == null) {
   out_indent '			} else if (res'
   if NOT-EMPTY
   begin
    '.'
    [%f] cache_postfix %( %S %, 'read-only' )% 
   end // if
   NOP
   ' == null) {'
//	#				res[.%f_cache_postfix(%S,"read-only")] = new %{INT}NConstWrapper (res[.%f_cache_postfix(%S,"read-write")]);
   out_indent '				res'
   if NOT-EMPTY
   begin
    '.'
    [%f] cache_postfix %( %S %, 'read-only' )% 
   end // if
   NOP
   ' = new '
   ( get_global_var ( 'INT' ) |N ) 'ConstWrapper (res'
   if NOT-EMPTY
   begin
    '.'
    [%f] cache_postfix %( %S %, 'read-write' )% 
   end // if
   NOP
   ');'
//	#			}\
   out_indent '			}'
//	}if (ref != null && ref[.%f_cache_postfix(%S,"read-write")] != null && ref[.%f_cache_postfix(%S,"read-write")].get () != null) {
   '}if (ref != null && ref'
   if NOT-EMPTY
   begin
    '.'
    [%f] cache_postfix %( %S %, 'read-write' )% 
   end // if
   NOP
   ' != null && ref'
   if NOT-EMPTY
   begin
    '.'
    [%f] cache_postfix %( %S %, 'read-write' )% 
   end // if
   NOP
   '.get () != null) {'
//	#				res = new %{INT}NConstWrapper (ref[.%f_cache_postfix(%S,"read-write")].get ());
   out_indent '				res = new '
   ( get_global_var ( 'INT' ) |N ) 'ConstWrapper (ref'
   if NOT-EMPTY
   begin
    '.'
    [%f] cache_postfix %( %S %, 'read-write' )% 
   end // if
   NOP
   '.get ());'
//	#				ref[.%f_cache_postfix(%S,"read-only")] = new java.lang.ref.WeakReference\<%{INT}NConstWrapper\> (res);
   out_indent '				ref'
   if NOT-EMPTY
   begin
    '.'
    [%f] cache_postfix %( %S %, 'read-only' )% 
   end // if
   NOP
   ' = new java.lang.ref.WeakReference<'
   ( get_global_var ( 'INT' ) |N ) 'ConstWrapper> (res);'
//	#			} else {
   out_indent '			} else {'
//	#				FactoryData fctData = factoriesMap_.get (key);
   out_indent '				FactoryData fctData = factoriesMap_.get (key);'
//	#				if (fctData == null) {
   out_indent '				if (fctData == null) {'
//	#					[{%S{transparent multy}=false|"%S{transparent multy}"=""}{throw new [{%f_is_server_type(%{INT})=true}ru.garant.shared.CoreSrv.]NoActiveFactory ("%{INT}%P%PN.%PN.%SNFactory");}throw new UnknownFactoryKey ("%P%P%PN::%P%PN::%PNFactory"[{%{INT}S!=ServerInterface}, key.toString ()]);]
   out_indent '					'
   if ( ( %S get_up ( 'transparent multy' ) ) %==  false OR 
     ( ( %S get_up ( 'transparent multy' ) ) %== ''  ) ) then
   begin
    'throw new UnknownFactoryKey ("'
    %P ->P ->P |N   '::'
    %P ->P |N  '::'
    %P |N 'Factory"'
    if ( ( ( get_global_var ( 'INT' ) |S ) ) %!= 'ServerInterface' ) then
    begin
     ', key.toString ()' 
    end // if
    ');' 
   end // if
   else
   begin
    'throw new '
    if ( ( [%f] is_server_type %( ( get_global_var ( 'INT' ) ) )% ) %==  true ) then
    begin
     'ru.garant.shared.CoreSrv.' 
    end // if
    'NoActiveFactory ("'
    ( get_global_var ( 'INT' )  ->P ->P |N  ) '.'
    %P |N '.'
    %S |N 'Factory");' 
   end // else
//	#				}
   out_indent '				}'
//	#				%t_ret(%{INT}) obj = fctData.factory_.%f_to_java(%SN) (<{, }%f_to_java(%CN)>);
   out_indent '				'
   [%t] ret %( ( get_global_var ( 'INT' ) ) )% ' obj = fctData.factory_.'
   [%f] to_java %( %S |N )% ' ('
   INTEGER VAR l_Counter l_Counter := 0
   for %S%C
   begin
    OBJECT IN %C
    if true then
    begin
     if ( l_Counter >0 ) then ( ', ' )
     [%f] to_java %( %C |N )% 
     ++! l_Counter
    end // if
   end // for C
   ');'
//	#				ref = new %t_fctr_manager_cache_value(%{INT},"type",%S) (
   out_indent '				ref = new '
   [%t] fctr_manager_cache_value %( ( get_global_var ( 'INT' ) ) %, 'type"' %, %S )% ' ('
//	#					new java.lang.ref.WeakReference\<%f_type(%{INT})\> (obj)
   out_indent '					new java.lang.ref.WeakReference<'
   [%f] type %( ( get_global_var ( 'INT' ) ) )% '> (obj)'
//	#				);
   out_indent '				);'
//	#				res = new %{INT}NConstWrapper (ref[.%f_cache_postfix(%S,"read-write")].get ());
   out_indent '				res = new '
   ( get_global_var ( 'INT' ) |N ) 'ConstWrapper (ref'
   if NOT-EMPTY
   begin
    '.'
    [%f] cache_postfix %( %S %, 'read-write' )% 
   end // if
   NOP
   '.get ());'
//	#				ref[.%f_cache_postfix(%S,"read-only")] = new java.lang.ref.WeakReference\<%{INT}NConstWrapper\> (res);
   out_indent '				ref'
   if NOT-EMPTY
   begin
    '.'
    [%f] cache_postfix %( %S %, 'read-only' )% 
   end // if
   NOP
   ' = new java.lang.ref.WeakReference<'
   ( get_global_var ( 'INT' ) |N ) 'ConstWrapper> (res);'
//	#				ref.isRoFirst = true;
   out_indent '				ref.isRoFirst = true;'
//	#				%f_to_java(%TNMap)_.put (memKey, ref);
   out_indent '				'
   [%f] to_java %( %T |N 'Map' )% '_.put (memKey, ref);'
//	#				%f_to_java(%TNIndexMap)_.put ([{%f_is_server_type(%{INT})=true}{res.hashCode ()}ref[.%f_cache_postfix(%S,"read-write")]._hash (Integer.MAX_VALUE)], memKey);
   out_indent '				'
   [%f] to_java %( %T |N 'IndexMap' )% '_.put ('
   if ( ( [%f] is_server_type %( ( get_global_var ( 'INT' ) ) )% ) %==  true ) then
   begin
    'ref'
    if NOT-EMPTY
    begin
     '.'
     [%f] cache_postfix %( %S %, 'read-write' )% 
    end // if
    NOP
    '._hash (Integer.MAX_VALUE)' 
   end // if
   else
   begin
    'res.hashCode ()' 
   end // else
   ', memKey);'
//	#			}]]
   out_indent '			}' 
  end // if
  else
  begin
   'if (res == null) {'
//	#				FactoryData fctData = factoriesMap_.get (key);
   out_indent '				FactoryData fctData = factoriesMap_.get (key);'
//	#				if (fctData == null) {
   out_indent '				if (fctData == null) {'
//	#					[{%S{transparent multy}=false|"%S{transparent multy}"=""}{throw new [{%f_is_server_type(%{INT})=true}ru.garant.shared.CoreSrv.]NoActiveFactory ("%{INT}%P%PN.%PN.%SNFactory");}throw new UnknownFactoryKey ("%P%P%PN::%P%PN::%PNFactory"[{%{INT}S!=ServerInterface}, key.toString ()]);]
   out_indent '					'
   if ( ( %S get_up ( 'transparent multy' ) ) %==  false OR 
     ( ( %S get_up ( 'transparent multy' ) ) %== ''  ) ) then
   begin
    'throw new UnknownFactoryKey ("'
    %P ->P ->P |N   '::'
    %P ->P |N  '::'
    %P |N 'Factory"'
    if ( ( ( get_global_var ( 'INT' ) |S ) ) %!= 'ServerInterface' ) then
    begin
     ', key.toString ()' 
    end // if
    ');' 
   end // if
   else
   begin
    'throw new '
    if ( ( [%f] is_server_type %( ( get_global_var ( 'INT' ) ) )% ) %==  true ) then
    begin
     'ru.garant.shared.CoreSrv.' 
    end // if
    'NoActiveFactory ("'
    ( get_global_var ( 'INT' )  ->P ->P |N  ) '.'
    %P |N '.'
    %S |N 'Factory");' 
   end // else
//	#				}
   out_indent '				' 
  end // else
 end // if
 else
 begin
  out_indent '			FactoryData fctData = factoriesMap_.get (key);'
//	#			if (fctData == null) {
  out_indent '			if (fctData == null) {'
//	#				[{%S{transparent multy}=false|"%S{transparent multy}"=""}{throw new [{%f_is_server_type(%{INT})=true}ru.garant.shared.CoreSrv.]NoActiveFactory ("%{INT}%P%PN.%PN.%SNFactory");}throw new UnknownFactoryKey ("%P%P%PN::%P%PN::%PNFactory"[{%{INT}S!=ServerInterface}, key.toString ()]);]
  out_indent '				'
  if ( ( %S get_up ( 'transparent multy' ) ) %==  false OR 
    ( ( %S get_up ( 'transparent multy' ) ) %== ''  ) ) then
  begin
   'throw new UnknownFactoryKey ("'
   %P ->P ->P |N   '::'
   %P ->P |N  '::'
   %P |N 'Factory"'
   if ( ( ( get_global_var ( 'INT' ) |S ) ) %!= 'ServerInterface' ) then
   begin
    ', key.toString ()' 
   end // if
   ');' 
  end // if
  else
  begin
   'throw new '
   if ( ( [%f] is_server_type %( ( get_global_var ( 'INT' ) ) )% ) %==  true ) then
   begin
    'ru.garant.shared.CoreSrv.' 
   end // if
   'NoActiveFactory ("'
   ( get_global_var ( 'INT' )  ->P ->P |N  ) '.'
   %P |N '.'
   %S |N 'Factory");' 
  end // else
//	#			}
  out_indent '			' 
 end // else
//#UC END# *4757C6DA0040for470F57A80119*
; // fctr_mng_factory_mem_java_impl


// перекрытие базового стереотипа Interface::Class::factory::Operation
// дампит код дополнительной  инициализации ключа общей памяти (инициализирует ключ фабрики
// серванта)
//%f _init_factory_mem_key_java_impl
: init_factory_mem_key_java_impl OBJECT IN %S
//#UC START# *4757C67E03A1for470F57A80119*
//	[{%S{transparent multy}=true}#		%U[{_CUSTOM_SELECT_FACTORY_KEY}
 if ( ( %S get_up ( 'transparent multy' ) ) %==  true ) then
 begin
  out_indent '		'
  %Usersection (
   '_CUSTOM_SELECT_FACTORY_KEY' 
  )
  (
   #13#10

//	#		%S%f_dump_switch_key key;
   out_indent '		'
   %S %f dump_switch_key key; %( #13#10

//	#		throw new ru.garant.shared.Core.Root.MDAGenNotImplemented ();
   out_indent '		throw new ru.garant.shared.Core.Root.MDAGenNotImplemented (' )% ';'
//	#		]
   out_indent '		' 
  ) // Usersection
 //	]#		memKey.keyArg_ = key;
 end // if
 out_indent '		memKey.keyArg_ = key;'
//#UC END# *4757C67E03A1for470F57A80119*
; // init_factory_mem_key_java_impl


// перекрытие базового стереотипа Interface::Class::factory_op::Operation
// дампит реализацию конкретной read-write или read-only фабрики для менеджера фабрик, в качестве
// дополнительного параметра передается read-write или read-only в зависимости от того, какую
// фабрику нужно сдампить
//%f _factory_mng_factory_impl_java
: factory_mng_factory_impl_java OBJECT IN %S
//#UC START# *4B793D3F0059for470F57A80119*
//	[{%S{transparent multy}=false|"%S{transparent multy}"=""}\
 if ( ( %S get_up ( 'transparent multy' ) ) %==  false OR 
   ( ( %S get_up ( 'transparent multy' ) ) %== ''  ) ) then
 begin

//{%S{transparent multy}=false}
//	#public %t_ret(%{INT},"[{%{INT}S!=ServerInterface}%Ss]")[{%{INT}S!=ServerInterface&%2N=read-only}ConstWrapper] [{%{INT}S!=ServerInterface}{%SN%3N}%f_to_java(%SN%3N)] (%S<%f_arg_full_decl(%C), >%{INT}%f_dump_switch_type() key) throws UnknownFactoryKey[{%f_need_conversion_exception(%S)=true}, ru.garant.shared.Core.Root.ImpossibleConversion]%S<, %f_type(%E)> {[{%f_is_it_cached(%S)=false}
  out_indent 'public '
  [%t] ret %( ( get_global_var ( 'INT' ) ) %, if ( ( ( get_global_var ( 'INT' ) |S ) ) %!= 'ServerInterface' ) then
  begin
   %S |s 
  end // if
)%   if ( ( ( get_global_var ( 'INT' ) |S ) ) %!= 'ServerInterface' AND 
    ( ( %2 |N ) %== 'read-only'  ) ) then
  begin
   'ConstWrapper' 
  end // if
  ' '
  if ( ( ( get_global_var ( 'INT' ) |S ) ) %!= 'ServerInterface' ) then
  begin
   [%f] to_java %( %S |N %3 |N )% 
  end // if
  else
  begin
   %S |N %3 |N 
  end // else
  ' ('
  %S
  bind ( 
   OBJECT VAR %S
   INTEGER VAR l_Counter l_Counter := 0
   for %S%C
   begin
    OBJECT IN %C
    if true then
    begin
     [%f] arg_full_decl %( %C )% ', ' 
     ++! l_Counter
    end // if
   end // for C

  ) // bind
   ( get_global_var ( 'INT' ) %f dump_switch_type %( )% ) ' key) throws UnknownFactoryKey'
  if ( ( [%f] need_conversion_exception %( %S )% ) %==  true ) then
  begin
   ', ru.garant.shared.Core.Root.ImpossibleConversion' 
  end // if
  %S
  bind ( 
   OBJECT VAR %S
   INTEGER VAR l_Counter l_Counter := 0
   for %S%E
   begin
    OBJECT IN %E
    if true then
    begin
     ', '
     [%f] type %( %E )% 
     ++! l_Counter
    end // if
   end // for E

  ) // bind
   ' {'
  if ( ( [%f] is_it_cached %( %S )% ) %==  false ) then
  begin
   #13#10

//	#	FactoryData factoryData = factoriesMap_.get(key);
   out_indent '	FactoryData factoryData = factoriesMap_.get(key);'
//	#	%{INT}NAbstractFactory factory = factoryData != null ? factoryData.factory_ : null;
   out_indent '	'
   ( get_global_var ( 'INT' ) |N ) 'AbstractFactory factory = factoryData != null ? factoryData.factory_ : null;'
//	#	if (null == factory) {
   out_indent '	if (null == factory) {'
//	#		throw new UnknownFactoryKey (
   out_indent '		throw new UnknownFactoryKey ('
//	#			"%f_dump_java_package(%{INT}).%{INT}NFactory"[{%{INT}S!=ServerInterface}
   out_indent '			"'
   [%f] dump_java_package %( ( get_global_var ( 'INT' ) ) )% '.'
   ( get_global_var ( 'INT' ) |N ) 'Factory"'
   if ( ( ( get_global_var ( 'INT' ) |S ) ) %!= 'ServerInterface' ) then
   begin
    #13#10

//	#			, key.toString ()]
    out_indent '			, key.toString ()' 
   end // if
//	#		);
   out_indent '		);'
//	#	}
   out_indent '	}'
//	#	[{%{INT}S=ServerInterface&%2N=read-only}{return [{%2N=read-only}{factory.%f_to_java(%SN) (%S<{, }%f_to_java(%CN)>)}new %{INT}NConstWrapper (factory.%f_to_java(%SN) (%S<{, }%f_to_java(%CN)>))];}try {
   out_indent '	'
   if ( ( ( get_global_var ( 'INT' ) |S ) ) %== 'ServerInterface' AND 
     ( ( %2 |N ) %== 'read-only'  ) ) then
   begin
    'try {'
//	#		org.omg.CORBA.Object obj = %f_dump_java_package(%{INT}%P).LibHomeFactory.get().getOrbFacet().getRootPoa().servant_to_reference(
    out_indent '		org.omg.CORBA.Object obj = '
    [%f] dump_java_package %( ( get_global_var ( 'INT' )  ->P ) )% '.LibHomeFactory.get().getOrbFacet().getRootPoa().servant_to_reference('
//	#			new %{INT}NConstWrapper (factory.%f_to_java(%SN) (%S<{, }%f_to_java(%CN)>))
    out_indent '			new '
    ( get_global_var ( 'INT' ) |N ) 'ConstWrapper (factory.'
    [%f] to_java %( %S |N )% ' ('
    %S
    bind ( 
     OBJECT VAR %S
     INTEGER VAR l_Counter l_Counter := 0
     for %S%C
     begin
      OBJECT IN %C
      if true then
      begin
       if ( l_Counter >0 ) then ( ', ' )
       [%f] to_java %( %C |N )% 
       ++! l_Counter
      end // if
     end // for C

    ) // bind
     '))'
//	#		);
    out_indent '		);'
//	#		return %f_type(%{INT})Helper.narrow (obj);
    out_indent '		return '
    [%f] type %( ( get_global_var ( 'INT' ) ) )% 'Helper.narrow (obj);'
//	[<{}{}{%E}\
    if NOT-EMPTY
    begin
     INTEGER VAR l_Counter l_Counter := 0
     for %S%E
     begin
      OBJECT IN %E
      if true then
      begin
//	#	} catch (%f_type(%E) ex) {
       out_indent '	} catch ('
       [%f] type %( %E )% ' ex) {'
//	#		Logs.LOG_SEX(ex);
       out_indent '		Logs.LOG_SEX(ex);'
//	#		throw ex;
       out_indent '		throw ex;'
//	>]\

       ++! l_Counter
      end // if
     end // for E
    end // if
    NOP
//	#	} catch (Exception ex) {
    out_indent '	} catch (Exception ex) {'
//	#		Logs.LOG_SEX(ex);
    out_indent '		Logs.LOG_SEX(ex);'
//	#		throw new org.omg.CORBA.portable.UnknownException (ex);
    out_indent '		throw new org.omg.CORBA.portable.UnknownException (ex);'
//	#	}
    out_indent '	}'
//	#	assert (false);
    out_indent '	assert (false);'
//	#	return null;]
    out_indent '	return null;' 
   end // if
   else
   begin
    'return '
    if ( ( %2 |N ) %== 'read-only' ) then
    begin
     'new '
     ( get_global_var ( 'INT' ) |N ) 'ConstWrapper (factory.'
     [%f] to_java %( %S |N )% ' ('
     %S
     bind ( 
      OBJECT VAR %S
      INTEGER VAR l_Counter l_Counter := 0
      for %S%C
      begin
       OBJECT IN %C
       if true then
       begin
        if ( l_Counter >0 ) then ( ', ' )
        [%f] to_java %( %C |N )% 
        ++! l_Counter
       end // if
      end // for C

     ) // bind
      '))' 
    end // if
    else
    begin
     'factory.'
     [%f] to_java %( %S |N )% ' ('
     %S
     bind ( 
      OBJECT VAR %S
      INTEGER VAR l_Counter l_Counter := 0
      for %S%C
      begin
       OBJECT IN %C
       if true then
       begin
        if ( l_Counter >0 ) then ( ', ' )
        [%f] to_java %( %C |N )% 
        ++! l_Counter
       end // if
      end // for C

     ) // bind
      ')' 
    end // else
    ';' 
   end // else
//	][{%f_is_it_cached(%S)=true}[{%TS!=FactoryMemory}{\n%f_fctr_mng_mem_java(%S,"%2N")}
  end // if
  if ( ( [%f] is_it_cached %( %S )% ) %==  true ) then
  begin
   if ( ( %T |S ) %!= 'FactoryMemory' ) then
   begin
    #13#10

//	#	synchronized (cachedObjectsFor%f_to_borland(%SN)) {
    out_indent '	synchronized (cachedObjectsFor'
    [%f] to_borland %( %S |N )% ') {'
//	#		ObjectCreationIdFor%f_to_borland(%SN) mapKey = new ObjectCreationIdFor%f_to_borland(%SN)(%S<{}{{"%CS"!="nokey"}}%f_to_java(%CN), >key);
    out_indent '		ObjectCreationIdFor'
    [%f] to_borland %( %S |N )% ' mapKey = new ObjectCreationIdFor'
    [%f] to_borland %( %S |N )% '('
    %S
    bind ( 
     OBJECT VAR %S
     INTEGER VAR l_Counter l_Counter := 0
     for %S%C
     begin
      OBJECT IN %C
      if ( '{"( '
      %C |S ) %!= 'nokey' ) then
      begin
       '}'
       [%f] to_java %( %C |N )% ', ' 
       ++! l_Counter
      end // if
     end // for C

    ) // bind
     'key);'
//	#		[{%Ss=synchro}{%t_fctr_manager_cache_value(%{INT},"var",%S)}%f_type(%{INT})[{%2N=read-only}ConstWrapper]] ret = [{%Ss=synchro}{cachedObjectsFor%f_to_borland(%SN).get (mapKey);}null;
    out_indent '		'
    if ( ( %S |s ) %== 'synchro' ) then
    begin
     [%f] type %( ( get_global_var ( 'INT' ) ) )% if ( ( %2 |N ) %== 'read-only' ) then
     begin
      'ConstWrapper' 
     end // if
    end // if
    else
    begin
     [%t] fctr_manager_cache_value %( ( get_global_var ( 'INT' ) ) %, 'var"' %, %S )% 
    end // else
    ' ret = '
    if ( ( %S |s ) %== 'synchro' ) then
    begin
     'null;'
//	#		%t_fctr_manager_cache_value(%{INT},"type",%S) ref = cachedObjectsFor%f_to_borland(%SN).get (mapKey);
     out_indent '		'
     [%t] fctr_manager_cache_value %( ( get_global_var ( 'INT' ) ) %, 'type"' %, %S )% ' ref = cachedObjectsFor'
     [%f] to_borland %( %S |N )% '.get (mapKey);'
//	#		if (ref != null) {
     out_indent '		if (ref != null) {'
//	#			ret = ref[.%f_cache_postfix(%S,"%2N")].get ();
     out_indent '			ret = ref'
     if NOT-EMPTY
     begin
      '.'
      [%f] cache_postfix %( %S %, %2 |N )% 
     end // if
     NOP
     '.get ();'
//	#		}]
     out_indent '		}' 
    end // if
    else
    begin
     'cachedObjectsFor'
     [%f] to_borland %( %S |N )% '.get (mapKey);' 
    end // else
//	#		if (ret == null[{%Ss!=synchro&%f_is_ro_fctr_exists(%S)=true} || ret[.%f_cache_postfix(%S,"%2N")] == null]) {
    out_indent '		if (ret == null'
    if ( ( %S |s ) %!= 'synchro' AND 
      ( ( [%f] is_ro_fctr_exists %( %S )% ) %==  true  ) ) then
    begin
     ' || ret'
     if NOT-EMPTY
     begin
      '.'
      [%f] cache_postfix %( %S %, %2 |N )% 
     end // if
     NOP
     ' == null' 
    end // if
    ') {'
//	[{%2N=read-only}{\
    if ( ( %2 |N ) %== 'read-only' ) then
    begin
     #13#10

//	#			ret = [{%f_is_ro_fctr_exists(%S)=true&%Ss!=synchro}{factory.%f_to_java(%SN) (%S<{, }%CN>)}new %t_fctr_manager_cache_value(%{INT},"var",%S) (
     out_indent '			ret = '
     if ( ( [%f] is_ro_fctr_exists %( %S )% ) %==  true AND 
       ( ( %S |s ) %!= 'synchro'  ) ) then
     begin
      'new '
      [%t] fctr_manager_cache_value %( ( get_global_var ( 'INT' ) ) %, 'var"' %, %S )% ' ('
//	#				factory.%f_to_java(%SN) (%S<{, }%CN>)
      out_indent '				factory.'
      [%f] to_java %( %S |N )% ' ('
      %S
      bind ( 
       OBJECT VAR %S
       INTEGER VAR l_Counter l_Counter := 0
       for %S%C
       begin
        OBJECT IN %C
        if true then
        begin
         if ( l_Counter >0 ) then ( ', ' )
         %C |N 
         ++! l_Counter
        end // if
       end // for C

      ) // bind
       ')'
//	#			)];[{%Ss=synchro}
      out_indent '			)' 
     end // if
     else
     begin
      'factory.'
      [%f] to_java %( %S |N )% ' ('
      %S
      bind ( 
       OBJECT VAR %S
       INTEGER VAR l_Counter l_Counter := 0
       for %S%C
       begin
        OBJECT IN %C
        if true then
        begin
         if ( l_Counter >0 ) then ( ', ' )
         %C |N 
         ++! l_Counter
        end // if
       end // for C

      ) // bind
       ')' 
     end // else
     ';'
     if ( ( %S |s ) %== 'synchro' ) then
     begin
      #13#10

//	#			ref = [{%f_is_ro_fctr_exists(%S)=true}{new java.lang.ref.WeakReference\<%t_ret(%{INT})\> (ret)}new %t_fctr_manager_cache_value(%{INT},"type",%S) (
      out_indent '			ref = '
      if ( ( [%f] is_ro_fctr_exists %( %S )% ) %==  true ) then
      begin
       'new '
       [%t] fctr_manager_cache_value %( ( get_global_var ( 'INT' ) ) %, 'type"' %, %S )% ' ('
//	#				new java.lang.ref.WeakReference\<%t_ret(%{INT})\> (ret)
       out_indent '				new java.lang.ref.WeakReference<'
       [%t] ret %( ( get_global_var ( 'INT' ) ) )% '> (ret)'
//	#			);]]
       out_indent '			);' 
      end // if
      else
      begin
       'new java.lang.ref.WeakReference<'
       [%t] ret %( ( get_global_var ( 'INT' ) ) )% '> (ret)' 
      end // else
     end // if
//	#			cachedObjectsFor%f_to_borland(%SN).put (mapKey, [{%Ss=synchro}{ret}ref]);
     out_indent '			cachedObjectsFor'
     [%f] to_borland %( %S |N )% '.put (mapKey, '
     if ( ( %S |s ) %== 'synchro' ) then
     begin
      'ref' 
     end // if
     else
     begin
      'ret' 
     end // else
     ');'
//	#			cachedObjectsIndexFor%f_to_borland(%SN).put ([{%f_is_server_type(%{INT})=true}{[{%Ss=synchro}{ret}ref][.%f_cache_postfix(%S,"read-write")][{%Ss=synchro}.hashCode ()]}ret[{%Ss!=synchro}[.%f_cache_postfix(%S,"read-write")]]._hash (Integer.MAX_VALUE)], mapKey);\
     out_indent '			cachedObjectsIndexFor'
     [%f] to_borland %( %S |N )% '.put ('
     if ( ( [%f] is_server_type %( ( get_global_var ( 'INT' ) ) )% ) %==  true ) then
     begin
      'ret'
      if ( ( %S |s ) %!= 'synchro' ) then
      begin
       if NOT-EMPTY
       begin
        '.'
        [%f] cache_postfix %( %S %, 'read-write' )% 
       end // if
       NOP
      end // if
      '._hash (Integer.MAX_VALUE)' 
     end // if
     else
     begin
      if ( ( %S |s ) %== 'synchro' ) then
      begin
       'ref' 
      end // if
      else
      begin
       'ret' 
      end // else
      if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-write' )% 
      end // if
      NOP
      if ( ( %S |s ) %== 'synchro' ) then
      begin
       '.hashCode ()' 
      end // if
     end // else
     ', mapKey);'
//	}[{%Ss=synchro}{\
     '}'
     if ( ( %S |s ) %== 'synchro' ) then
     begin
      #13#10

//	#				ret = new %t_fctr_manager_cache_value(%{INT},"var",%S) (
      out_indent '				ret = new '
      [%t] fctr_manager_cache_value %( ( get_global_var ( 'INT' ) ) %, 'var"' %, %S )% ' ('
//	#					factory.%f_to_java(%SN) (%S<{, }%CN>)
      out_indent '					factory.'
      [%f] to_java %( %S |N )% ' ('
      %S
      bind ( 
       OBJECT VAR %S
       INTEGER VAR l_Counter l_Counter := 0
       for %S%C
       begin
        OBJECT IN %C
        if true then
        begin
         if ( l_Counter >0 ) then ( ', ' )
         %C |N 
         ++! l_Counter
        end // if
       end // for C

      ) // bind
       ')'
//	#				);
      out_indent '				);'
//	#				[{%{INT}S=ServerInterface}{ret[.%f_cache_postfix(%S,"read-only")] = new %{INT}NConstWrapper (ret[.%f_cache_postfix(%S,"read-write")]);}try {
      out_indent '				'
      if ( ( ( get_global_var ( 'INT' ) |S ) ) %== 'ServerInterface' ) then
      begin
       'try {'
//	#					org.omg.CORBA.Object obj = %f_dump_java_package(%{INT}%P).LibHomeFactory.get().getOrbFacet().getRootPoa().servant_to_reference(
       out_indent '					org.omg.CORBA.Object obj = '
       [%f] dump_java_package %( ( get_global_var ( 'INT' )  ->P ) )% '.LibHomeFactory.get().getOrbFacet().getRootPoa().servant_to_reference('
//	#						new %{INT}NConstWrapper (ret[.%f_cache_postfix(%S,"read-write")])
       out_indent '						new '
       ( get_global_var ( 'INT' ) |N ) 'ConstWrapper (ret'
       if NOT-EMPTY
       begin
        '.'
        [%f] cache_postfix %( %S %, 'read-write' )% 
       end // if
       NOP
       ')'
//	#					);
       out_indent '					);'
//	#					ret[.%f_cache_postfix(%S,"read-only")] = %f_type(%{INT})Helper.narrow (obj);
       out_indent '					ret'
       if NOT-EMPTY
       begin
        '.'
        [%f] cache_postfix %( %S %, 'read-only' )% 
       end // if
       NOP
       ' = '
       [%f] type %( ( get_global_var ( 'INT' ) ) )% 'Helper.narrow (obj);'
//	[<{}{}{%E}\
       if NOT-EMPTY
       begin
        INTEGER VAR l_Counter l_Counter := 0
        for %S%E
        begin
         OBJECT IN %E
         if true then
         begin
//	#				} catch (%f_type(%E) ex) {
          out_indent '				} catch ('
          [%f] type %( %E )% ' ex) {'
//	#					Logs.LOG_SEX(ex);
          out_indent '					Logs.LOG_SEX(ex);'
//	#					throw ex;
          out_indent '					throw ex;'
//	>]\

          ++! l_Counter
         end // if
        end // for E
       end // if
       NOP
//	#				} catch (Exception ex) {
       out_indent '				} catch (Exception ex) {'
//	#					Logs.LOG_SEX(ex);
       out_indent '					Logs.LOG_SEX(ex);'
//	#					throw new org.omg.CORBA.portable.UnknownException (ex);
       out_indent '					throw new org.omg.CORBA.portable.UnknownException (ex);'
//	#				}]
       out_indent '				}' 
      end // if
      else
      begin
       'ret'
       if NOT-EMPTY
       begin
        '.'
        [%f] cache_postfix %( %S %, 'read-only' )% 
       end // if
       NOP
       ' = new '
       ( get_global_var ( 'INT' ) |N ) 'ConstWrapper (ret'
       if NOT-EMPTY
       begin
        '.'
        [%f] cache_postfix %( %S %, 'read-write' )% 
       end // if
       NOP
       ');' 
      end // else
//	#				ret.isRoFirst = true;
      out_indent '				ret.isRoFirst = true;'
//	#				cachedObjectsFor%f_to_borland(%SN).put (mapKey, [{%Ss=synchro}{ret}ref]);
      out_indent '				cachedObjectsFor'
      [%f] to_borland %( %S |N )% '.put (mapKey, '
      if ( ( %S |s ) %== 'synchro' ) then
      begin
       'ref' 
      end // if
      else
      begin
       'ret' 
      end // else
      ');'
//	#				cachedObjectsIndexFor%f_to_borland(%SN).put ([{%f_is_server_type(%{INT})=true}{[{%Ss=synchro}{ret}ref][.%f_cache_postfix(%S,"read-write")][{%Ss=synchro}.hashCode ()]}ret[{%Ss!=synchro}[.%f_cache_postfix(%S,"read-write")]]._hash (Integer.MAX_VALUE)], mapKey);
      out_indent '				cachedObjectsIndexFor'
      [%f] to_borland %( %S |N )% '.put ('
      if ( ( [%f] is_server_type %( ( get_global_var ( 'INT' ) ) )% ) %==  true ) then
      begin
       'ret'
       if ( ( %S |s ) %!= 'synchro' ) then
       begin
        if NOT-EMPTY
        begin
         '.'
         [%f] cache_postfix %( %S %, 'read-write' )% 
        end // if
        NOP
       end // if
       '._hash (Integer.MAX_VALUE)' 
      end // if
      else
      begin
       if ( ( %S |s ) %== 'synchro' ) then
       begin
        'ref' 
       end // if
       else
       begin
        'ret' 
       end // else
       if NOT-EMPTY
       begin
        '.'
        [%f] cache_postfix %( %S %, 'read-write' )% 
       end // if
       NOP
       if ( ( %S |s ) %== 'synchro' ) then
       begin
        '.hashCode ()' 
       end // if
      end // else
      ', mapKey);'
//	#			} else if (ret[.%f_cache_postfix(%S,"read-only")] == null) {
      out_indent '			} else if (ret'
      if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-only' )% 
      end // if
      NOP
      ' == null) {'
//	#				[{%{INT}S=ServerInterface}{ret[.%f_cache_postfix(%S,"read-only")] = new %{INT}NConstWrapper (ret[.%f_cache_postfix(%S,"read-write")]);}try {
      out_indent '				'
      if ( ( ( get_global_var ( 'INT' ) |S ) ) %== 'ServerInterface' ) then
      begin
       'try {'
//	#					org.omg.CORBA.Object obj = %f_dump_java_package(%{INT}%P).LibHomeFactory.get().getOrbFacet().getRootPoa().servant_to_reference(
       out_indent '					org.omg.CORBA.Object obj = '
       [%f] dump_java_package %( ( get_global_var ( 'INT' )  ->P ) )% '.LibHomeFactory.get().getOrbFacet().getRootPoa().servant_to_reference('
//	#						new %{INT}NConstWrapper (ret[.%f_cache_postfix(%S,"read-write")])
       out_indent '						new '
       ( get_global_var ( 'INT' ) |N ) 'ConstWrapper (ret'
       if NOT-EMPTY
       begin
        '.'
        [%f] cache_postfix %( %S %, 'read-write' )% 
       end // if
       NOP
       ')'
//	#					);
       out_indent '					);'
//	#					ret[.%f_cache_postfix(%S,"read-only")] = %f_type(%{INT})Helper.narrow (obj);
       out_indent '					ret'
       if NOT-EMPTY
       begin
        '.'
        [%f] cache_postfix %( %S %, 'read-only' )% 
       end // if
       NOP
       ' = '
       [%f] type %( ( get_global_var ( 'INT' ) ) )% 'Helper.narrow (obj);'
//	[<{}{}{%E}\
       if NOT-EMPTY
       begin
        INTEGER VAR l_Counter l_Counter := 0
        for %S%E
        begin
         OBJECT IN %E
         if true then
         begin
//	#				} catch (%f_type(%E) ex) {
          out_indent '				} catch ('
          [%f] type %( %E )% ' ex) {'
//	#					Logs.LOG_SEX(ex);
          out_indent '					Logs.LOG_SEX(ex);'
//	#					throw ex;
          out_indent '					throw ex;'
//	>]\

          ++! l_Counter
         end // if
        end // for E
       end // if
       NOP
//	#				} catch (Exception ex) {
       out_indent '				} catch (Exception ex) {'
//	#					Logs.LOG_SEX(ex);
       out_indent '					Logs.LOG_SEX(ex);'
//	#					throw new org.omg.CORBA.portable.UnknownException (ex);
       out_indent '					throw new org.omg.CORBA.portable.UnknownException (ex);'
//	#				}]
       out_indent '				}' 
      end // if
      else
      begin
       'ret'
       if NOT-EMPTY
       begin
        '.'
        [%f] cache_postfix %( %S %, 'read-only' )% 
       end // if
       NOP
       ' = new '
       ( get_global_var ( 'INT' ) |N ) 'ConstWrapper (ret'
       if NOT-EMPTY
       begin
        '.'
        [%f] cache_postfix %( %S %, 'read-write' )% 
       end // if
       NOP
       ');' 
      end // else
//	#			}\
      out_indent '			}'
//	}\
      '}'
//	#			if (ref != null && ref[.%f_cache_postfix(%S,"read-write")] != null && ref[.%f_cache_postfix(%S,"read-write")].get () != null) {
      out_indent '			if (ref != null && ref'
      if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-write' )% 
      end // if
      NOP
      ' != null && ref'
      if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-write' )% 
      end // if
      NOP
      '.get () != null) {'
//	#				ret = new %{INT}NConstWrapper (ref[.%f_cache_postfix(%S,"read-write")].get ());
      out_indent '				ret = new '
      ( get_global_var ( 'INT' ) |N ) 'ConstWrapper (ref'
      if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-write' )% 
      end // if
      NOP
      '.get ());'
//	#				ref[.%f_cache_postfix(%S,"read-only")] = new java.lang.ref.WeakReference\<%{INT}NConstWrapper\> (
      out_indent '				ref'
      if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-only' )% 
      end // if
      NOP
      ' = new java.lang.ref.WeakReference<'
      ( get_global_var ( 'INT' ) |N ) 'ConstWrapper> ('
//	#					ret
      out_indent '					ret'
//	#				);
      out_indent '				);'
//	#			} else {
      out_indent '			} else {'
//	#				FactoryData factoryData = factoriesMap_.get(key);
      out_indent '				FactoryData factoryData = factoriesMap_.get(key);'
//	#				%{INT}NAbstractFactory factory = factoryData != null ? factoryData.factory_ : null;
      out_indent '				'
      ( get_global_var ( 'INT' ) |N ) 'AbstractFactory factory = factoryData != null ? factoryData.factory_ : null;'
//	#				if (null == factory) {
      out_indent '				if (null == factory) {'
//	#					throw new UnknownFactoryKey (
      out_indent '					throw new UnknownFactoryKey ('
//	#						"%f_dump_java_package(%{INT}).%{INT}NFactory"[{%{INT}S!=ServerInterface}
      out_indent '						"'
      [%f] dump_java_package %( ( get_global_var ( 'INT' ) ) )% '.'
      ( get_global_var ( 'INT' ) |N ) 'Factory"'
      if ( ( ( get_global_var ( 'INT' ) |S ) ) %!= 'ServerInterface' ) then
      begin
       #13#10

//	#						, key.toString ()]
       out_indent '						, key.toString ()' 
      end // if
//	#					);
      out_indent '					);'
//	#				}
      out_indent '				}'
//	#				%t_ret(%{INT}) obj = factory.%f_to_java(%SN) (%S<{, }%CN>);
      out_indent '				'
      [%t] ret %( ( get_global_var ( 'INT' ) ) )% ' obj = factory.'
      [%f] to_java %( %S |N )% ' ('
      %S
      bind ( 
       OBJECT VAR %S
       INTEGER VAR l_Counter l_Counter := 0
       for %S%C
       begin
        OBJECT IN %C
        if true then
        begin
         if ( l_Counter >0 ) then ( ', ' )
         %C |N 
         ++! l_Counter
        end // if
       end // for C

      ) // bind
       ');'
//	#				ref = new %t_fctr_manager_cache_value(%{INT},"type",%S) (
      out_indent '				ref = new '
      [%t] fctr_manager_cache_value %( ( get_global_var ( 'INT' ) ) %, 'type"' %, %S )% ' ('
//	#					new java.lang.ref.WeakReference\<%f_type(%{INT})\> (obj)
      out_indent '					new java.lang.ref.WeakReference<'
      [%f] type %( ( get_global_var ( 'INT' ) ) )% '> (obj)'
//	#				);
      out_indent '				);'
//	#				ret = new %{INT}NConstWrapper (ref[.%f_cache_postfix(%S,"read-write")].get ());
      out_indent '				ret = new '
      ( get_global_var ( 'INT' ) |N ) 'ConstWrapper (ref'
      if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-write' )% 
      end // if
      NOP
      '.get ());'
//	#				ref[.%f_cache_postfix(%S,"read-only")] = new java.lang.ref.WeakReference\<%{INT}NConstWrapper\> (
      out_indent '				ref'
      if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-only' )% 
      end // if
      NOP
      ' = new java.lang.ref.WeakReference<'
      ( get_global_var ( 'INT' ) |N ) 'ConstWrapper> ('
//	#					ret
      out_indent '					ret'
//	#				);
      out_indent '				);'
//	#				ref.isRoFirst = true;
      out_indent '				ref.isRoFirst = true;'
//	#				cachedObjectsFor%f_to_borland(%SN).put (mapKey, [{%Ss=synchro}{ret}ref]);
      out_indent '				cachedObjectsFor'
      [%f] to_borland %( %S |N )% '.put (mapKey, '
      if ( ( %S |s ) %== 'synchro' ) then
      begin
       'ref' 
      end // if
      else
      begin
       'ret' 
      end // else
      ');'
//	#				cachedObjectsIndexFor%f_to_borland(%SN).put ([{%f_is_server_type(%{INT})=true}{[{%Ss=synchro}{ret}ref][.%f_cache_postfix(%S,"read-write")][{%Ss=synchro}.hashCode ()]}obj._hash (Integer.MAX_VALUE)], mapKey);
      out_indent '				cachedObjectsIndexFor'
      [%f] to_borland %( %S |N )% '.put ('
      if ( ( [%f] is_server_type %( ( get_global_var ( 'INT' ) ) )% ) %==  true ) then
      begin
       'obj._hash (Integer.MAX_VALUE)' 
      end // if
      else
      begin
       if ( ( %S |s ) %== 'synchro' ) then
       begin
        'ref' 
       end // if
       else
       begin
        'ret' 
       end // else
       if NOT-EMPTY
       begin
        '.'
        [%f] cache_postfix %( %S %, 'read-write' )% 
       end // if
       NOP
       if ( ( %S |s ) %== 'synchro' ) then
       begin
        '.hashCode ()' 
       end // if
      end // else
      ', mapKey);'
//	#			}]]
      out_indent '			}' 
     end // if
     else
     begin
//	#			if (ret == null) {
      out_indent '			if (ret == null) {'
//	#				FactoryData factoryData = factoriesMap_.get(key);
      out_indent '				FactoryData factoryData = factoriesMap_.get(key);'
//	#				%{INT}NAbstractFactory factory = factoryData != null ? factoryData.factory_ : null;
      out_indent '				'
      ( get_global_var ( 'INT' ) |N ) 'AbstractFactory factory = factoryData != null ? factoryData.factory_ : null;'
//	#				if (null == factory) {
      out_indent '				if (null == factory) {'
//	#					throw new UnknownFactoryKey (
      out_indent '					throw new UnknownFactoryKey ('
//	#						"%f_dump_java_package(%{INT}).%{INT}NFactory"[{%{INT}S!=ServerInterface}
      out_indent '						"'
      [%f] dump_java_package %( ( get_global_var ( 'INT' ) ) )% '.'
      ( get_global_var ( 'INT' ) |N ) 'Factory"'
      if ( ( ( get_global_var ( 'INT' ) |S ) ) %!= 'ServerInterface' ) then
      begin
       #13#10

//	#						, key.toString ()]
       out_indent '						, key.toString ()' 
      end // if
//	#					);
      out_indent '					);'
//	#				}
      out_indent '				' 
     end // else
    end // if
    else
    begin
//	#			FactoryData factoryData = factoriesMap_.get(key);
     out_indent '			FactoryData factoryData = factoriesMap_.get(key);'
//	#			%{INT}NAbstractFactory factory = factoryData != null ? factoryData.factory_ : null;
     out_indent '			'
     ( get_global_var ( 'INT' ) |N ) 'AbstractFactory factory = factoryData != null ? factoryData.factory_ : null;'
//	#			if (null == factory) {
     out_indent '			if (null == factory) {'
//	#				throw new UnknownFactoryKey (
     out_indent '				throw new UnknownFactoryKey ('
//	#					"%f_dump_java_package(%{INT}).%{INT}NFactory"[{%{INT}S!=ServerInterface}
     out_indent '					"'
     [%f] dump_java_package %( ( get_global_var ( 'INT' ) ) )% '.'
     ( get_global_var ( 'INT' ) |N ) 'Factory"'
     if ( ( ( get_global_var ( 'INT' ) |S ) ) %!= 'ServerInterface' ) then
     begin
      #13#10

//	#					, key.toString ()]
      out_indent '					, key.toString ()' 
     end // if
//	#				);
     out_indent '				);'
//	#			}
     out_indent '			' 
    end // else
//	#		}[{%2N=read-write&%f_is_ro_fctr_exists(%S)=true} else if (
    out_indent '		}'
    if ( ( %2 |N ) %== 'read-write' AND 
      ( ( [%f] is_ro_fctr_exists %( %S )% ) %==  true  ) ) then
    begin
     ' else if ('
//	#			[{%Ss=synchro}{ret != null
     out_indent '			'
     if ( ( %S |s ) %== 'synchro' ) then
     begin
      'ref != null'
//	#			&& ref[.%f_cache_postfix(%S,"read-only")] != null
      out_indent '			&& ref'
      if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-only' )% 
      end // if
      NOP
      ' != null'
//	#			&& ref[.%f_cache_postfix(%S,"read-only")].get () != null
      out_indent '			&& ref'
      if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-only' )% 
      end // if
      NOP
      '.get () != null'
//	#			&& ref.isRoFirst == true]
      out_indent '			&& ref.isRoFirst == true' 
     end // if
     else
     begin
      'ret != null'
//	#			&& ret[.%f_cache_postfix(%S,"read-only")] != null
      out_indent '			&& ret'
      if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-only' )% 
      end // if
      NOP
      ' != null'
//	#			&& ret.isRoFirst == true}ref != null
      out_indent '			&& ret.isRoFirst == true' 
     end // else
//	#		) {
     out_indent '		) {'
//	#			[{%Ss=synchro}{ret[.%f_cache_postfix(%S,"read-only")].upgrade_rw ();
     out_indent '			'
     if ( ( %S |s ) %== 'synchro' ) then
     begin
      'ref'
      if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-only' )% 
      end // if
      NOP
      '.get ().upgrade_rw ();'
//	#			ref.isRoFirst = false;]
      out_indent '			ref.isRoFirst = false;' 
     end // if
     else
     begin
      'ret'
      if NOT-EMPTY
      begin
       '.'
       [%f] cache_postfix %( %S %, 'read-only' )% 
      end // if
      NOP
      '.upgrade_rw ();'
//	#			ret.isRoFirst = false;}ref[.%f_cache_postfix(%S,"read-only")].get ().upgrade_rw ();
      out_indent '			ret.isRoFirst = false;' 
     end // else
//	#		}]
     out_indent '		}' 
    end // if
//	#		return ret[{%Ss!=synchro}[.%f_cache_postfix(%S,"%2N")]];
    out_indent '		return ret'
    if ( ( %S |s ) %!= 'synchro' ) then
    begin
     if NOT-EMPTY
     begin
      '.'
      [%f] cache_postfix %( %S %, %2 |N )% 
     end // if
     NOP
    end // if
    ';'
//	#	}
    out_indent '	}'
//	]]#}][{%S{transparent multy}=true}\
   end // if
   else
   begin
    #13#10
    [%f] fctr_mng_mem_java %( %S %, %2 |N )% 
   end // else
  end // if
  out_indent '}' 
 end // if
 if ( ( %S get_up ( 'transparent multy' ) ) %==  true ) then
 begin

//{%S{transparent multy}=true}\
//	#public %t_ret(%{INT},"[{%{INT}S!=ServerInterface}%Ss]")[{%2N=read-only}ConstWrapper] %f_to_java(%SN) (%S<{, }%f_arg_full_decl(%C)>) throws NoActiveFactory[{%f_need_conversion_exception(%S)=true}, ru.garant.shared.Core.Root.ImpossibleConversion]%S<, %f_type(%E)> {[{%f_is_it_cached(%S)=false}
  out_indent 'public '
  [%t] ret %( ( get_global_var ( 'INT' ) ) %, if ( ( ( get_global_var ( 'INT' ) |S ) ) %!= 'ServerInterface' ) then
  begin
   %S |s 
  end // if
)%   if ( ( %2 |N ) %== 'read-only' ) then
  begin
   'ConstWrapper' 
  end // if
  ' '
  [%f] to_java %( %S |N )% ' ('
  %S
  bind ( 
   OBJECT VAR %S
   INTEGER VAR l_Counter l_Counter := 0
   for %S%C
   begin
    OBJECT IN %C
    if true then
    begin
     if ( l_Counter >0 ) then ( ', ' )
     [%f] arg_full_decl %( %C )% 
     ++! l_Counter
    end // if
   end // for C

  ) // bind
   ') throws NoActiveFactory'
  if ( ( [%f] need_conversion_exception %( %S )% ) %==  true ) then
  begin
   ', ru.garant.shared.Core.Root.ImpossibleConversion' 
  end // if
  %S
  bind ( 
   OBJECT VAR %S
   INTEGER VAR l_Counter l_Counter := 0
   for %S%E
   begin
    OBJECT IN %E
    if true then
    begin
     ', '
     [%f] type %( %E )% 
     ++! l_Counter
    end // if
   end // for E

  ) // bind
   ' {'
  if ( ( [%f] is_it_cached %( %S )% ) %==  false ) then
  begin
   #13#10

//	#	%{INT}NAbstractFactory factory = null;
   out_indent '	'
   ( get_global_var ( 'INT' ) |N ) 'AbstractFactory factory = null;'
//	#	%U[{_CUSTOM_SELECT_FACTORY}
   out_indent '	'
   %Usersection (
    '_CUSTOM_SELECT_FACTORY' 
   )
   (
    #13#10

//	#	]
    out_indent '	' 
   ) // Usersection
 //	#	if (null == factory) {
   out_indent '	if (null == factory) {'
//	#		throw new NoActiveFactory ("%f_dump_java_package(%{INT}).%{INT}NFactory");
   out_indent '		throw new NoActiveFactory ("'
   [%f] dump_java_package %( ( get_global_var ( 'INT' ) ) )% '.'
   ( get_global_var ( 'INT' ) |N ) 'Factory");'
//	#	}
   out_indent '	}'
//	#	return factory.%f_to_java(%SN) (%S<{, }%f_to_java(%CN)>);
   out_indent '	return factory.'
   [%f] to_java %( %S |N )% ' ('
   %S
   bind ( 
    OBJECT VAR %S
    INTEGER VAR l_Counter l_Counter := 0
    for %S%C
    begin
     OBJECT IN %C
     if true then
     begin
      if ( l_Counter >0 ) then ( ', ' )
      [%f] to_java %( %C |N )% 
      ++! l_Counter
     end // if
    end // for C

   ) // bind
    ');'
//	][{%f_is_it_cached(%S)=true}[{%TS!=FactoryMemory}{\n%f_fctr_mng_mem_java(%S,"%2N")}
  end // if
  if ( ( [%f] is_it_cached %( %S )% ) %==  true ) then
  begin
   if ( ( %T |S ) %!= 'FactoryMemory' ) then
   begin
    #13#10

//	#	synchronized (cachedObjectsFor%f_to_borland(%SN)) {
    out_indent '	synchronized (cachedObjectsFor'
    [%f] to_borland %( %S |N )% ') {'
//	#		ObjectCreationIdFor%f_to_borland(%SN) mapKey = new ObjectCreationIdFor%f_to_borland(%SN)(%S<{, }{{"%CS"!="nokey"}}%f_to_java(%CN)>);
    out_indent '		ObjectCreationIdFor'
    [%f] to_borland %( %S |N )% ' mapKey = new ObjectCreationIdFor'
    [%f] to_borland %( %S |N )% '('
    %S
    bind ( 
     OBJECT VAR %S
     INTEGER VAR l_Counter l_Counter := 0
     for %S%C
     begin
      OBJECT IN %C
      if ( '{"( '
      %C |S ) %!= 'nokey' ) then
      begin
       if ( l_Counter >0 ) then ( ', ' )
       '}'
       [%f] to_java %( %C |N )% 
       ++! l_Counter
      end // if
     end // for C

    ) // bind
     ');'
//	#		%t_ret(%{INT}) ret = [{%Ss=synchro}{cachedObjectsFor%f_to_borland(%SN).get (mapKey);}null;
    out_indent '		'
    [%t] ret %( ( get_global_var ( 'INT' ) ) )% ' ret = '
    if ( ( %S |s ) %== 'synchro' ) then
    begin
     'null;'
//	#		java.lang.ref.WeakReference\<%t_ret(%{INT})\> ref = cachedObjectsFor%f_to_borland(%SN).get (mapKey);
     out_indent '		java.lang.ref.WeakReference<'
     [%t] ret %( ( get_global_var ( 'INT' ) ) )% '> ref = cachedObjectsFor'
     [%f] to_borland %( %S |N )% '.get (mapKey);'
//	#		if (ref != null) {
     out_indent '		if (ref != null) {'
//	#			ret = ref.get ();
     out_indent '			ret = ref.get ();'
//	#		}]
     out_indent '		}' 
    end // if
    else
    begin
     'cachedObjectsFor'
     [%f] to_borland %( %S |N )% '.get (mapKey);' 
    end // else
//	#		if (ret == null) {
    out_indent '		if (ret == null) {'
//	#			%{INT}NAbstractFactory factory =null;
    out_indent '			'
    ( get_global_var ( 'INT' ) |N ) 'AbstractFactory factory =null;'
//	#			%U[{_CUSTOM_SELECT_FACTORY}
    out_indent '			'
    %Usersection (
     '_CUSTOM_SELECT_FACTORY' 
    )
    (
     #13#10

//	#			]
     out_indent '			' 
    ) // Usersection
 //	#			if (null == factory) {
    out_indent '			if (null == factory) {'
//	#				throw new NoActiveFactory ("%f_dump_java_package(%{INT}).%{INT}NFactory");
    out_indent '				throw new NoActiveFactory ("'
    [%f] dump_java_package %( ( get_global_var ( 'INT' ) ) )% '.'
    ( get_global_var ( 'INT' ) |N ) 'Factory");'
//	#			}
    out_indent '			}'
//	#			ret = factory.%f_to_java(%SN) (%S<{, }%f_to_java(%CN)>);[{%Ss=synchro}
    out_indent '			ret = factory.'
    [%f] to_java %( %S |N )% ' ('
    %S
    bind ( 
     OBJECT VAR %S
     INTEGER VAR l_Counter l_Counter := 0
     for %S%C
     begin
      OBJECT IN %C
      if true then
      begin
       if ( l_Counter >0 ) then ( ', ' )
       [%f] to_java %( %C |N )% 
       ++! l_Counter
      end // if
     end // for C

    ) // bind
     ');'
    if ( ( %S |s ) %== 'synchro' ) then
    begin
     #13#10

//	#			ref = new java.lang.ref.WeakReference\<%t_ret(%{INT})\> (ret);]
     out_indent '			ref = new java.lang.ref.WeakReference<'
     [%t] ret %( ( get_global_var ( 'INT' ) ) )% '> (ret);' 
    end // if
//	#			cachedObjectsFor%f_to_borland(%SN).put (mapKey, [{%Ss=synchro}{ret}ref]);
    out_indent '			cachedObjectsFor'
    [%f] to_borland %( %S |N )% '.put (mapKey, '
    if ( ( %S |s ) %== 'synchro' ) then
    begin
     'ref' 
    end // if
    else
    begin
     'ret' 
    end // else
    ');'
//	#			cachedObjectsIndexFor%f_to_borland(%SN).put ([{%f_is_server_type(%{INT})=true}{[{%Ss=synchro}{ret}ref][{%Ss=synchro}.hashCode ()]}ret[.%f_cache_postfix(%S,"read-write")]._hash (Integer.MAX_VALUE)], mapKey);
    out_indent '			cachedObjectsIndexFor'
    [%f] to_borland %( %S |N )% '.put ('
    if ( ( [%f] is_server_type %( ( get_global_var ( 'INT' ) ) )% ) %==  true ) then
    begin
     'ret'
     if NOT-EMPTY
     begin
      '.'
      [%f] cache_postfix %( %S %, 'read-write' )% 
     end // if
     NOP
     '._hash (Integer.MAX_VALUE)' 
    end // if
    else
    begin
     if ( ( %S |s ) %== 'synchro' ) then
     begin
      'ref' 
     end // if
     else
     begin
      'ret' 
     end // else
     if ( ( %S |s ) %== 'synchro' ) then
     begin
      '.hashCode ()' 
     end // if
    end // else
    ', mapKey);'
//	#		}
    out_indent '		}'
//	#		return ret;
    out_indent '		return ret;'
//	#	}
    out_indent '	}'
//	]]#}]
   end // if
   else
   begin
    #13#10
    [%f] fctr_mng_mem_java %( %S %, %2 |N )% 
   end // else
  end // if
  out_indent '}' 
 end // if
//#UC END# *4B793D3F0059for470F57A80119*
; // factory_mng_factory_impl_java


// Вложенные стереотипы
//: Interface::Class::multi factory::Operation::Parameter
end. // :: <<Interface>> <<"multi factory">> ;

implementation @ :: <<Interface>> <<"multi factory">> Parameter ;
//? парметр
//= AbstractFacet::Class::Operation::Parameter

// Генераторы
// Генерация модели в MDKnow
//+ wiki
<<generator>> wiki OBJECT IN %S
//#UC START# *46E6D4BB0339for470F640801B5*
//#UC END# *46E6D4BB0339for470F640801B5*
; // wiki


// генератор idl спецификаций (.idl)
//+ idl
<<generator>> idl OBJECT IN %S
//#UC START# *47022BBE0261for470F640801B5*
//#UC END# *47022BBE0261for470F640801B5*
; // idl


// генератор idl спецификаций для AMI (.idl)
//+ idl_ami
<<generator>> idl_ami OBJECT IN %S
//#UC START# *47022C0F01E4for470F640801B5*
//#UC END# *47022C0F01E4for470F640801B5*
; // idl_ami


// генератор inline файлов реализации C++ (.i.h)
//+ i.h
<<generator>> i.h OBJECT IN %S
//#UC START# *47022CCF00EAfor470F640801B5*
//#UC END# *47022CCF00EAfor470F640801B5*
; // i.h


// С++ TIE-обвязка для DLL (_tie.h)
//+ dll.h
<<generator>> dll.h OBJECT IN %S
//#UC START# *47032EC4032Cfor470F640801B5*
//#UC END# *47032EC4032Cfor470F640801B5*
; // dll.h


// С++ TIE-обвязка для DLL (_tie.cpp)
//+ dll.cpp
<<generator>> dll.cpp OBJECT IN %S
//#UC START# *47032ED002DEfor470F640801B5*
//#UC END# *47032ED002DEfor470F640801B5*
; // dll.cpp


// Родные Delphi интерфейсы (.pas)
//+ intf.pas
<<generator>> intf.pas OBJECT IN %S
//R  
//#UC START# *470F1571031Cfor470F640801B5*
//#UC END# *470F1571031Cfor470F640801B5*
; // intf.pas


// Реализация на Delphi(.pas)
//+ impl.pas
<<generator>> impl.pas OBJECT IN %S
//R  
//#UC START# *470F15B800CBfor470F640801B5*
//#UC END# *470F15B800CBfor470F640801B5*
; // impl.pas


// Вторая интерфейсная секция стереотипа. Например реализация свойств класса.
//+ intf2.pas
<<generator>> intf2.pas OBJECT IN %S
//R  
//#UC START# *477398E501C0for470F640801B5*
//#UC END# *477398E501C0for470F640801B5*
; // intf2.pas


// Ресурсы (.rc)
//+ rc.pas
<<generator>> rc.pas OBJECT IN %S
//R  
//#UC START# *55B8D28B0157for470F640801B5*
//#UC END# *55B8D28B0157for470F640801B5*
; // rc.pas


// Скрипты в ресурсах (.rc.script)
//+ rc.script.pas
<<generator>> rc.script.pas OBJECT IN %S
//R  
//#UC START# *55B8D2F80145for470F640801B5*
//#UC END# *55B8D2F80145for470F640801B5*
; // rc.script.pas


// Компилятор ресурса (.res.cmd)
//+ res.cmd.pas
<<generator>> res.cmd.pas OBJECT IN %S
//R  
//#UC START# *55B8DD9C0301for470F640801B5*
//#UC END# *55B8DD9C0301for470F640801B5*
; // res.cmd.pas


// Функции стереотипа
//%f _st_space_key
: st_space_key OBJECT IN %S
//	MDP
 'MDP'


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
//%t _constraint
; // st_space_key

<<transformator>> constraint OBJECT IN %S
//#UC START# *4704C0E30186for470F640801B5*
//c                                                           {}
//r {""=""}:                                                  {}
//#UC END# *4704C0E30186for470F640801B5*
; // constraint


// реализация абстрактного стереотипа Документация::MDAGenerator
// выводит описание элемента (операция, атрибут) в wiki
//%f _wiki_child_kind
: wiki_child_kind OBJECT IN %S
//#UC START# *4705CBD6003Efor470F640801B5*
//	mng
 'mng'
//#UC END# *4705CBD6003Efor470F640801B5*
; // wiki_child_kind


// реализация абстрактного стереотипа Документация::MDAGenerator
// вывод описание авто-генерируемых методов в wiki
//%f _wiki_up_add_gen
: wiki_up_add_gen OBJECT IN %S
//#UC START# *470484D50138for470F640801B5*
//#UC END# *470484D50138for470F640801B5*
; // wiki_up_add_gen



//: Interface::Class::finder::Operation
end. // :: <<Interface>> <<"multi factory">> Parameter ;

implementation @ :: <<Interface>> <<finder>> ;
//? Finder
//? Стереотип операции возвращающей экземпляр сущности (или список экземпляров) по заданным параметрам. Аналог стереотипа \<\<factory\>\>, но реализация логики создания конкретного экземпляра дана на откуп программисту
//= Interface::Class::factory_op::Operation

// Пользовательские свойства
//p multiplicity=0..1|0..* ? множественность - определяет возвращает ли finder один экземпляр (или 0, если ничего не найдено) или список экземпляров

// Генераторы
// генератор классов, интерфейсов на java (.java)
//+ java
<<generator>> java OBJECT IN %S
//#UC START# *470321950119for4B793D9001F1*
//	%f_docs(%S)\
 [%f] docs %( %S )% 
//	%S%f_dump_factory_operation()
 %S %f dump_factory_operation %( )% 
//#UC END# *470321950119for4B793D9001F1*
; // java


// Функции стереотипа
//%f _st_space_key
: st_space_key OBJECT IN %S
//	MDP
 'MDP'

//%f _wiki_up_print
; // st_space_key

: wiki_up_print OBJECT IN %S
//	%S#[inherited][{"%S{multiplicity}"!="%S{!multiplicity}"}%f_up_prefix(%S) *multiplicity* = *%S{multiplicity}* - множественность - определяет возвращает ли finder один экземпляр (или 0, если ничего не найдено) или список экземпляров
 ?inherited
 if ( ( %S get_up ( 'multiplicity' ) ) %!= ( %S get_up_def ( 'multiplicity' ) ) ) then
 begin
  [%f] up_prefix %( %S )% ' *multiplicity* = *'
  %S get_up ( 'multiplicity' ) '* - множественность - определяет возвращает ли finder один экземпляр (или 0, если ничего не найдено) или список экземпляров'
//	]
 end // if

// генерит параметры файндера, добавляя ключ мультифкабрики, если нужно
//%f _factory_params_with_key_if_needed
; // wiki_up_print

: factory_params_with_key_if_needed OBJECT IN %S
//#UC START# *4B7BAB460184for4B793D9001F1*
//	[{%1%f_has_multi_factory()=true}{%S%f_factory_params("%1N")}%1%f_dump_switch_type() key[, %S%f_factory_params("%1N")]]
 if ( ( %1 %f has_multi_factory %( )% ) %==  true ) then
 begin
  %1 %f dump_switch_type %( )% ' key'
  if NOT-EMPTY
  begin
   ', '
   %S %f factory_params %( %1 |N )% 
  end // if
  NOP
 end // if
 else
 begin
  %S %f factory_params %( %1 |N )% 
 end // else
//#UC END# *4B7BAB460184for4B793D9001F1*
; // factory_params_with_key_if_needed


// генерит возвращаемый тип файндера
//%f _ret
: ret OBJECT IN %S
//#UC START# *4B7BA27C0223for4B793D9001F1*
//	[{%S{multiplicity}=0..1}{java.util.List\<[{%1x=false}{%t_ret(%1,"%Ss")}%t_ret(%{INT},"%Ss")]\>}%t_ret(%{INT},"%Ss")]
 if ( ( %S get_up ( 'multiplicity' ) ) %== 0 '..1' ) then
 begin
  [%t] ret %( ( get_global_var ( 'INT' ) ) %, %S |s )% 
 end // if
 else
 begin
  'java.util.List<'
  if ( ( %1 |x ) %==  false ) then
  begin
   [%t] ret %( ( get_global_var ( 'INT' ) ) %, %S |s )% 
  end // if
  else
  begin
   [%t] ret %( %1 %, %S |s )% 
  end // else
  '>' 
 end // else

//%f _ret_for_servant
; // ret

: ret_for_servant OBJECT IN %S
//	[{%S{multiplicity}=0..1}{\
 if ( ( %S get_up ( 'multiplicity' ) ) %== 0 '..1' ) then
 begin
  [%t] ret %( ( get_global_var ( 'INT' ) ) %, %S |s )% 
 end // if
 else
 begin
//	[{%1a!=abstract}{\<T extends %t_ret(%{INT},"%Ss")\> java.util.List\<T\>}java.util.List\<%t_ret(%{INT},"%Ss")\>]\
  if ( ( %1 |a ) %!= 'abstract' ) then
  begin
   'java.util.List<'
   [%t] ret %( ( get_global_var ( 'INT' ) ) %, %S |s )% '>' 
  end // if
  else
  begin
   '<T extends '
   [%t] ret %( ( get_global_var ( 'INT' ) ) %, %S |s )% '> java.util.List<T>' 
  end // else
//	}%t_ret(%{INT},"%Ss")]
 end // else

//%f _ret_empty
; // ret_for_servant

: ret_empty OBJECT IN %S
//	[{%S{multiplicity}=0..1}{new java.util.ArrayList\<[{%1x=false}{%t_ret(%1,"%Ss")}%t_ret(%{INT},"%Ss")]\> ()}%f_error("_ret_empty: Невозможно создать экземпляр интерфейса")]
 if ( ( %S get_up ( 'multiplicity' ) ) %== 0 '..1' ) then
 begin
  [%f] error %( '_ret_empty: Невозможно создать экземпляр интерфейса' )% 
 end // if
 else
 begin
  'new java.util.ArrayList<'
  if ( ( %1 |x ) %==  false ) then
  begin
   [%t] ret %( ( get_global_var ( 'INT' ) ) %, %S |s )% 
  end // if
  else
  begin
   [%t] ret %( %1 %, %S |s )% 
  end // else
  '> ()' 
 end // else
//#UC END# *4B7BA27C0223for4B793D9001F1*
; // ret_empty


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа AbstractInterface::Class::factory::Operation
//%f _is_factory
: is_factory OBJECT IN %S
//#UC START# *4B794201038Afor4B793D9001F1*
//	true
 true
//#UC END# *4B794201038Afor4B793D9001F1*
; // is_factory


// реализация абстрактного стереотипа Interface::Class::factory_op::Operation
// генерация  метода на интерфейсе абстрактной фабрики
//%f _abstract_factory_operation
: abstract_factory_operation OBJECT IN %S
//#UC START# *4B793F8302B9for4B793D9001F1*
//	[{%XU=fctr.java}		public %S%f_ret() %f_to_java(%SN) (%S%f_factory_params("%1N"))[ throws <{, }%f_type(%E)>];]
 if ( ( %X |U ) %== 'fctr.java' ) then
 begin
  '		public '
  %S %f ret %( )% ' '
  [%f] to_java %( %S |N )% ' ('
  %S %f factory_params %( %1 |N )% ')'
  if NOT-EMPTY
  begin
   ' throws '
   INTEGER VAR l_Counter l_Counter := 0
   for %S%E
   begin
    OBJECT IN %E
    if true then
    begin
     if ( l_Counter >0 ) then ( ', ' )
     [%f] type %( %E )% 
     ++! l_Counter
    end // if
   end // for E
  end // if
  NOP
  ';' 
 end // if
//#UC END# *4B793F8302B9for4B793D9001F1*
; // abstract_factory_operation


// реализация абстрактного стереотипа Interface::Class::factory_op::Operation
// генерация статического метода на фабрике инетрфейса
//%f _dump_factory_operation
: dump_factory_operation OBJECT IN %S
//#UC START# *4B793FC10112for4B793D9001F1*
//	[{%XU=java}#%t_visibility(%S,"%XU")static %S%f_ret() %f_to_java(%SN) (%S%f_factory_params_with_key_if_needed(%{INT}))[ throws <{, }%f_type(%E)>] {
 if ( ( %X |U ) %== 'java' ) then
 begin
  out_indent [%t] visibility %( %S %, %X |U )% 'static '
  %S %f ret %( )% ' '
  [%f] to_java %( %S |N )% ' ('
  %S %f factory_params_with_key_if_needed %( ( get_global_var ( 'INT' ) ) )% ')'
  if NOT-EMPTY
  begin
   ' throws '
   INTEGER VAR l_Counter l_Counter := 0
   for %S%E
   begin
    OBJECT IN %E
    if true then
    begin
     if ( l_Counter >0 ) then ( ', ' )
     [%f] type %( %E )% 
     ++! l_Counter
    end // if
   end // for E
  end // if
  NOP
  ' {'
//	[{%{INT}U!=%{FACTORY_PARENT}U}{#	return %f_type(%{FACTORY_PARENT})FactoryManager.%{FACTORY_PARENT}%f_fctr_mng_get_instance_name() ().%f_to_java(%SN) ([{%{INT}%f_has_multi_factory()=true}{<{, }%f_to_java(%CN)>}key<, %f_to_java(%CN)>]);}\
  if ( ( ( get_global_var ( 'INT' ) |U ) ) %!= ( ( get_global_var ( 'FACTORY_PARENT' ) |U ) ) ) then
  begin
//	[{%S{multiplicity}=0..1}{\
   if ( ( %S get_up ( 'multiplicity' ) ) %== 0 '..1' ) then
   begin
    #13#10

//	#	}
    out_indent '	}'
//	#	
    out_indent '	'
//	#	return ret;}#	%f_type(%{FACTORY_PARENT}) ret = %f_type(%{FACTORY_PARENT})FactoryManager.%{FACTORY_PARENT}%f_fctr_mng_get_instance_name() ().%f_to_java(%SN) ([{%{INT}%f_has_multi_factory()=true}{<{, }%f_to_java(%CN)>}key<, %f_to_java(%CN)>]);
    out_indent '	return ret;}'
    out_indent '	'
    [%f] type %( ( get_global_var ( 'FACTORY_PARENT' ) ) )% ' ret = '
    [%f] type %( ( get_global_var ( 'FACTORY_PARENT' ) ) )% 'FactoryManager.'
    ( get_global_var ( 'FACTORY_PARENT' ) %f fctr_mng_get_instance_name %( )% ) ' ().'
    [%f] to_java %( %S |N )% ' ('
    if ( ( ( get_global_var ( 'INT' ) %f has_multi_factory %( )% ) ) %==  true ) then
    begin
     'key'
     INTEGER VAR l_Counter l_Counter := 0
     for %S%C
     begin
      OBJECT IN %C
      if true then
      begin
       ', '
       [%f] to_java %( %C |N )% 
       ++! l_Counter
      end // if
     end // for C
    end // if
    else
    begin
     INTEGER VAR l_Counter l_Counter := 0
     for %S%C
     begin
      OBJECT IN %C
      if true then
      begin
       if ( l_Counter >0 ) then ( ', ' )
       [%f] to_java %( %C |N )% 
       ++! l_Counter
      end // if
     end // for C
    end // else
    ');'
//	#	if (ret instanceof %f_type(%{INT})) {
    out_indent '	if (ret instanceof '
    [%f] type %( ( get_global_var ( 'INT' ) ) )% ') {'
//	#		return (%f_type(%{INT})) ret;
    out_indent '		return ('
    [%f] type %( ( get_global_var ( 'INT' ) ) )% ') ret;'
//	#	} else {
    out_indent '	} else {'
//	#		return null;
    out_indent '		return null;'
//	#	}]]
    out_indent '	}' 
   end // if
   else
   begin
//	#	%S%f_ret() ret = %S%f_ret_empty();
    out_indent '	'
    %S %f ret %( )% ' ret = '
    %S %f ret_empty %( )% ';'
//	#	for (%f_type(%{FACTORY_PARENT}) item: %f_type(%{FACTORY_PARENT})FactoryManager.%{FACTORY_PARENT}%f_fctr_mng_get_instance_name() ().%f_to_java(%SN) ([{%{INT}%f_has_multi_factory()=true}{<{, }%f_to_java(%CN)>}key<, %f_to_java(%CN)>])) {
    out_indent '	for ('
    [%f] type %( ( get_global_var ( 'FACTORY_PARENT' ) ) )% ' item: '
    [%f] type %( ( get_global_var ( 'FACTORY_PARENT' ) ) )% 'FactoryManager.'
    ( get_global_var ( 'FACTORY_PARENT' ) %f fctr_mng_get_instance_name %( )% ) ' ().'
    [%f] to_java %( %S |N )% ' ('
    if ( ( ( get_global_var ( 'INT' ) %f has_multi_factory %( )% ) ) %==  true ) then
    begin
     'key'
     INTEGER VAR l_Counter l_Counter := 0
     for %S%C
     begin
      OBJECT IN %C
      if true then
      begin
       ', '
       [%f] to_java %( %C |N )% 
       ++! l_Counter
      end // if
     end // for C
    end // if
    else
    begin
     INTEGER VAR l_Counter l_Counter := 0
     for %S%C
     begin
      OBJECT IN %C
      if true then
      begin
       if ( l_Counter >0 ) then ( ', ' )
       [%f] to_java %( %C |N )% 
       ++! l_Counter
      end // if
     end // for C
    end // else
    ')) {'
//	#		if (item instanceof %f_type(%{INT})) {
    out_indent '		if (item instanceof '
    [%f] type %( ( get_global_var ( 'INT' ) ) )% ') {'
//	#			ret.add ((%f_type(%{INT})) item);
    out_indent '			ret.add (('
    [%f] type %( ( get_global_var ( 'INT' ) ) )% ') item);'
//	#		}
    out_indent '		' 
   end // else
  end // if
  else
  begin
   out_indent '	return '
   [%f] type %( ( get_global_var ( 'FACTORY_PARENT' ) ) )% 'FactoryManager.'
   ( get_global_var ( 'FACTORY_PARENT' ) %f fctr_mng_get_instance_name %( )% ) ' ().'
   [%f] to_java %( %S |N )% ' ('
   if ( ( ( get_global_var ( 'INT' ) %f has_multi_factory %( )% ) ) %==  true ) then
   begin
    'key'
    INTEGER VAR l_Counter l_Counter := 0
    for %S%C
    begin
     OBJECT IN %C
     if true then
     begin
      ', '
      [%f] to_java %( %C |N )% 
      ++! l_Counter
     end // if
    end // for C
   end // if
   else
   begin
    INTEGER VAR l_Counter l_Counter := 0
    for %S%C
    begin
     OBJECT IN %C
     if true then
     begin
      if ( l_Counter >0 ) then ( ', ' )
      [%f] to_java %( %C |N )% 
      ++! l_Counter
     end // if
    end // for C
   end // else
   ');' 
  end // else
//	#}]
  out_indent '}' 
 end // if
//#UC END# *4B793FC10112for4B793D9001F1*
; // dump_factory_operation


// реализация абстрактного стереотипа Interface::Class::factory_op::Operation
// дампит реализацию конкретной read-write или read-only фабрики для менеджера фабрик, в качестве
// дополнительного параметра передается read-write или read-only в зависимости от того, какую
// фабрику нужно сдампить
//%f _factory_mng_factory_impl_java
: factory_mng_factory_impl_java OBJECT IN %S
//#UC START# *4B793D3F0059for4B793D9001F1*
//#UC END# *4B793D3F0059for4B793D9001F1*
; // factory_mng_factory_impl_java


// реализация абстрактного стереотипа Interface::Class::factory_op::Operation
// дампит реализацию фабрики для менеджера фабрик, осуществляет выбор дапить только read-only или
// read-write, или обе фабрики
//%f _fctr_mng_factory_java
: fctr_mng_factory_java OBJECT IN %S
//#UC START# *4B793D420398for4B793D9001F1*
//	[{%XU=fctr.java}#public %S%f_ret() %f_to_java(%SN) (%S%f_factory_params_with_key_if_needed(%{INT}))[throws <{, }%f_type(%E)>] {
 if ( ( %X |U ) %== 'fctr.java' ) then
 begin
  out_indent 'public '
  %S %f ret %( )% ' '
  [%f] to_java %( %S |N )% ' ('
  %S %f factory_params_with_key_if_needed %( ( get_global_var ( 'INT' ) ) )% ')'
  if NOT-EMPTY
  begin
   'throws '
   INTEGER VAR l_Counter l_Counter := 0
   for %S%E
   begin
    OBJECT IN %E
    if true then
    begin
     if ( l_Counter >0 ) then ( ', ' )
     [%f] type %( %E )% 
     ++! l_Counter
    end // if
   end // for E
  end // if
  NOP
  ' {'
//	[{%{INT}%f_has_multi_factory()=true}{#	if (singleActiveFactory_ == null) {
  if ( ( ( get_global_var ( 'INT' ) %f has_multi_factory %( )% ) ) %==  true ) then
  begin
   #13#10

//	#	return singleActiveFactory_.%f_to_java(%SN) (<{, }%f_to_java(%CN)>);}\
   out_indent '	return singleActiveFactory_.'
   [%f] to_java %( %S |N )% ' ('
   INTEGER VAR l_Counter l_Counter := 0
   for %S%C
   begin
    OBJECT IN %C
    if true then
    begin
     if ( l_Counter >0 ) then ( ', ' )
     [%f] to_java %( %C |N )% 
     ++! l_Counter
    end // if
   end // for C
   ');}'
//	#	FactoryData factoryData = factoriesMap_.get (key);
   out_indent '	FactoryData factoryData = factoriesMap_.get (key);'
//	#	if (factoryData == null || factoryData.factory_ == null) {
   out_indent '	if (factoryData == null || factoryData.factory_ == null) {'
//	#		return null;
   out_indent '		return null;'
//	#	}
   out_indent '	}'
//	#	return factoryData.factory_.%f_to_java(%SN) (<{, }%f_to_java(%CN)>);]
   out_indent '	return factoryData.factory_.'
   [%f] to_java %( %S |N )% ' ('
   INTEGER VAR l_Counter l_Counter := 0
   for %S%C
   begin
    OBJECT IN %C
    if true then
    begin
     if ( l_Counter >0 ) then ( ', ' )
     [%f] to_java %( %C |N )% 
     ++! l_Counter
    end // if
   end // for C
   ');' 
  end // if
  else
  begin
   out_indent '	if (singleActiveFactory_ == null) {'
//	#		return null;
   out_indent '		return null;'
//	#	}
   out_indent '	' 
  end // else
//	#}]
  out_indent '}' 
 end // if
//#UC END# *4B793D420398for4B793D9001F1*
; // fctr_mng_factory_java


// реализация абстрактного стереотипа Interface::Class::factory_op::Operation
// генерация для серванта
//%f _for_servant
: for_servant OBJECT IN %S
//#UC START# *4B7BABC802B8for4B793D9001F1*
//	[{%XU=java}#static %S%f_ret_for_servant(%1) %f_to_java(%SN) (%S%f_factory_params())[ throws <{, }%f_type(%E)>] {
 if ( ( %X |U ) %== 'java' ) then
 begin
  out_indent 'static '
  %S %f ret_for_servant %( %1 )% ' '
  [%f] to_java %( %S |N )% ' ('
  %S %f factory_params %( )% ')'
  if NOT-EMPTY
  begin
   ' throws '
   INTEGER VAR l_Counter l_Counter := 0
   for %S%E
   begin
    OBJECT IN %E
    if true then
    begin
     if ( l_Counter >0 ) then ( ', ' )
     [%f] type %( %E )% 
     ++! l_Counter
    end // if
   end // for E
  end // if
  NOP
  ' {'
//	#	%U[{_FOR_%1U}
  out_indent '	'
  %Usersection (
   '_FOR_'
   %1 |U 
  )
  (
   #13#10

//	#	throw new ru.garant.shared.Core.Root.MDAGenNotImplemented ();
   out_indent '	throw new ru.garant.shared.Core.Root.MDAGenNotImplemented ();'
//	#	]
   out_indent '	' 
  ) // Usersection
 //	#}]
  out_indent '}' 
 end // if
//#UC END# *4B7BABC802B8for4B793D9001F1*
; // for_servant


// реализация абстрактного стереотипа Interface::Class::factory_op::Operation
// генерация реализации для фабрики серванта
//%f _for_servant_factory
: for_servant_factory OBJECT IN %S
//#UC START# *4B7BAB9E0209for4B793D9001F1*
// %1 - Сервант
//	[{%XU=fctr.java}#public %S%f_ret() %f_to_java(%SN) (%S%f_factory_params())[ throws <{, }%f_type(%E)>] {
 if ( ( %X |U ) %== 'fctr.java' ) then
 begin
  out_indent 'public '
  %S %f ret %( )% ' '
  [%f] to_java %( %S |N )% ' ('
  %S %f factory_params %( )% ')'
  if NOT-EMPTY
  begin
   ' throws '
   INTEGER VAR l_Counter l_Counter := 0
   for %S%E
   begin
    OBJECT IN %E
    if true then
    begin
     if ( l_Counter >0 ) then ( ', ' )
     [%f] type %( %E )% 
     ++! l_Counter
    end // if
   end // for E
  end // if
  NOP
  ' {'
//	#	return %f_type(%1).%f_to_java(%SN) (<{, }%f_to_java(%CN)>);
  out_indent '	return '
  [%f] type %( %1 )% '.'
  [%f] to_java %( %S |N )% ' ('
  INTEGER VAR l_Counter l_Counter := 0
  for %S%C
  begin
   OBJECT IN %C
   if true then
   begin
    if ( l_Counter >0 ) then ( ', ' )
    [%f] to_java %( %C |N )% 
    ++! l_Counter
   end // if
  end // for C
  ');'
//	#}]
  out_indent '}' 
 end // if
//#UC END# *4B7BAB9E0209for4B793D9001F1*
; // for_servant_factory


// перекрытие базового стереотипа AbstractInterface::Class::factory::Operation
// возвращает true, если фабрика кэшированная (в том числе если это синхро-фабрика), иначе - false
//%f _is_cached
: is_cached OBJECT IN %S
//#UC START# *4A93E7EC0223for4B793D9001F1*
//	false
 false
//#UC END# *4A93E7EC0223for4B793D9001F1*
; // is_cached


// перекрытие базового стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
//%t _constraint
<<transformator>> constraint OBJECT IN %S
//#UC START# *4704C0E30186for4B793D9001F1*
//c                          {}
//r {"%TN"!="void"}:         {%SM не может определять тип результата: %TN}
//#UC END# *4704C0E30186for4B793D9001F1*
; // constraint


// Вложенные стереотипы
//: Interface::Class::finder::Operation::Parameter
end. // :: <<Interface>> <<finder>> ;

implementation @ :: <<Interface>> <<finder>> Parameter ;
//? параметр фабричного метода
//= AbstractFacet::Class::Operation::Parameter

// Функции стереотипа
//%f _st_space_key
: st_space_key OBJECT IN %S
//	MDP
 'MDP'




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

; // st_space_key

end. // :: <<Interface>> <<finder>> Parameter ;

