////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/CommonTemplates/CommonLang/Packages/Support.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAUtilityPack::Class>> MDProcess$Templates::CommonTemplates::CommonLang::Packages::Support
//
// вспомоагтельные функции для генерации
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// выводит форвард декларацию класса, с учетом нэймспэйсов
//f _in_scope_name
: in_scope_name OBJECT IN %S
//#UC START# *47173A8B000F*
//	%SP\tclass %SN%1N;
 %S |P #9'class '
 %S |N %1 |N ';'
//	%Sp
 %S |p 
//#UC END# *47173A8B000F*
; // in_scope_name


// нужно ли AMI
//f _need_ami
: need_ami OBJECT IN %S
//#UC START# *47173A970119*
//	[{"<{}{"%f_use_ami(%C)"="true"}{C%C}>"="0"}{true}false]
 if ( 
  INTEGER VAR l_Counter l_Counter := 0
  for %S%C
  begin
   OBJECT IN %C
   if ( ( [%f] use_ami %( %C )% ) %== true ) then
   begin

    ++! l_Counter
   end // if
  end // for C
  l_Counter
  %== 0 ) then
 begin
   false 
 end // if
 else
 begin
   true 
 end // else
//#UC END# *47173A970119*
; // need_ami


// возвращает true, если нужены дополнительные файлы для генерации фрейморвка фабрик
//f _need_factory_files
: need_factory_files OBJECT IN %S
//#UC START# *47173AA10222*
//	[{"<{}{"%f_has_factory_methods(%C)"="true"|%CM=ServerEvent::Class}{%CC}>"="0"}{true}false]
 if ( 
  INTEGER VAR l_Counter l_Counter := 0
  for %S%C
  begin
   OBJECT IN %C
   if ( ( [%f] has_factory_methods %( %C )% ) %== true OR 
    ( ( %C |M ) %== 'ServerEvent::Class'  ) ) then
   begin

    ++! l_Counter
   end // if
  end // for C
  l_Counter
  %== 0 ) then
 begin
   false 
 end // if
 else
 begin
   true 
 end // else
//#UC END# *47173AA10222*
; // need_factory_files


// нужны ли дополнительные файлы для генерации описания TIE-обёрток
//f _need_tie_files
: need_tie_files OBJECT IN %S
//#UC START# *47173AB10186*
//	[{"<{}{%CM=Interface::Class|%CM=Struct::Class|%CM=Vector::Class|%CM=Set::Class}{%CC}>"="0"}{true}false]
 if ( 
  INTEGER VAR l_Counter l_Counter := 0
  for %S%C
  begin
   OBJECT IN %C
   if ( ( %C |M ) %== 'Interface::Class' OR 
    ( ( %C |M ) %== 'Struct::Class'  ) OR 
    ( ( %C |M ) %== 'Vector::Class'  ) OR 
    ( ( %C |M ) %== 'Set::Class'  ) ) then
   begin

    ++! l_Counter
   end // if
  end // for C
  l_Counter
  %== 0 ) then
 begin
   false 
 end // if
 else
 begin
   true 
 end // else
//#UC END# *47173AB10186*
; // need_tie_files


// нужно ли генерить в AMI
//f _print_in_ami_file
: print_in_ami_file OBJECT IN %S
//#UC START# *47173ABC0177*
//	[{"%f_use_ami(%S)"="true"|"%f_used_in_ami(%S)"="true"}{false}true]
 if ( ( [%f] use_ami %( %S )% ) %== true OR 
   ( ( [%f] used_in_ami %( %S )% ) %== true  ) ) then
 begin
   true 
 end // if
 else
 begin
   false 
 end // else
//#UC END# *47173ABC0177*
; // print_in_ami_file


// использует ли AMI
//f _use_ami
: use_ami OBJECT IN %S
//#UC START# *47173AC40222*
//	[{"%S{Use AMI}"="true"}{[{"<{}{"%f_use_ami(%Z)"="true"}{C%Z}>"="0"}{true}false]}true]
//	[{"%S{Use AMI}"="true"}{[{"<{}{%f_use_ami(%Z)=true}{C%Z}>"="0"}{true}false]}true]
 if ( ( %S get_up ( 'Use AMI' ) ) %== true ) then
 begin
   true 
 end // if
 else
 begin
  if ( 
   INTEGER VAR l_Counter l_Counter := 0
   for %S%Z
   begin
    OBJECT IN %Z
    if ( ( [%f] use_ami %( %Z )% ) %==  true ) then
    begin

     ++! l_Counter
    end // if
   end // for Z
   l_Counter
   %== 0 ) then
  begin
    false 
  end // if
  else
  begin
    true 
  end // else
 end // else
//#UC END# *47173AC40222*
; // use_ami


// используется ли в AMI
//f _used_in_ami
: used_in_ami OBJECT IN %S
//#UC START# *47173ACB0242*
//	[{"<{}{"%f_use_ami(%b)"="true"}{C%b}>"="0"}{true}false]
//	false
 false
//#UC END# *47173ACB0242*
; // used_in_ami


// использует ли заданный элемент детьми пакета
//f _use_in_pack_child
: use_in_pack_child OBJECT IN %S
//#UC START# *47173B27007D*
//	%f_set_var(TYPE,S)[{"%{PACK}<%C<{}{%wU=%{TYPE}U}.>>"!=""|<{}{%CS=Class&%f_use_in_pack_child(%C)=true}{C}>!=0}{false}true]
 [%f] set_var %( 'TYPE' %, 'S' )% if ( ( ( get_global_var ( 'PACK' ) ) 
  bind ( 
   OBJECT VAR %S
   INTEGER VAR l_Counter l_Counter := 0
   for %S%C
   begin
    OBJECT IN %C
    if true then
    begin
     %C
     bind ( 
      OBJECT VAR %S
      INTEGER VAR l_Counter l_Counter := 0
      for %S%w
      begin
       OBJECT IN %w
       if ( ( %w |U ) %== ( ( get_global_var ( 'TYPE' ) |U ) ) ) then
       begin
        '.' 
        ++! l_Counter
       end // if
      end // for w

     ) // bind
 
     ++! l_Counter
    end // if
   end // for C

  ) // bind
)   %!= '' OR 
   ( 
  INTEGER VAR l_Counter l_Counter := 0
  for %S%C
  begin
   OBJECT IN %C
   if ( ( %C |S ) %== 'Class' AND 
    ( ( [%f] use_in_pack_child %( %C )% ) %==  true  ) ) then
   begin

    ++! l_Counter
   end // if
  end // for C
  l_Counter
  %!= 0  ) ) then
 begin
   true 
 end // if
 else
 begin
   false 
 end // else
//#UC END# *47173B27007D*
; // use_in_pack_child


// генерит код модуля idl
//f _idl_subsystem
: idl_subsystem OBJECT IN %S
//#UC START# *47173E11031C*
//	[{"%XU"="idl"}
 if ( ( %X |U ) %== 'idl' ) then
 begin
  #13#10

//	
  #13#10

//	\#ifndef __<{_}{"%PM"="Interfaces::Category"}%f_to_upper(%PN)>_%f_to_upper(%SN)_IDL__
  '#ifndef __'
  INTEGER VAR l_Counter l_Counter := 0
  for %S%P
  begin
   OBJECT IN %P
   if ( ( %P |M ) %== 'Interfaces::Category' ) then
   begin
    if ( l_Counter >0 ) then ( '_' )
    [%f] to_upper %( %P |N )% 
    ++! l_Counter
   end // if
  end // for P
  '_'
  [%f] to_upper %( %S |N )% '_IDL__'
//	\#define __<{_}{"%PM"="Interfaces::Category"}%f_to_upper(%PN)>_%f_to_upper(%SN)_IDL__
  '#define __'
  INTEGER VAR l_Counter l_Counter := 0
  for %S%P
  begin
   OBJECT IN %P
   if ( ( %P |M ) %== 'Interfaces::Category' ) then
   begin
    if ( l_Counter >0 ) then ( '_' )
    [%f] to_upper %( %P |N )% 
    ++! l_Counter
   end // if
  end // for P
  '_'
  [%f] to_upper %( %S |N )% '_IDL__'
//	[%f_idl_pre_include(%S)
  if NOT-EMPTY
  begin
   [%f] idl_pre_include %( %S )% 
//	
   #13#10

//	][{%SN!=RootSrv}\#include "shared/CoreSrv/RootSrv/RootSrv.idl"
  end // if
  NOP
  if ( ( %S |N ) %!= 'RootSrv' ) then
  begin
   '#include "shared/CoreSrv/RootSrv/RootSrv.idl"'
//	][{"%f_need_ami(%S)"="true"}{<\n\#include %f_dump_include_path(%IL,%I)>}\#include %f_dump_include_path(%f_with_gen_id(idl_ami,%SL),%S)
  end // if
  if ( ( [%f] need_ami %( %S )% ) %== true ) then
  begin
   '#include '
   [%f] dump_include_path %( [%f] with_gen_id %( 'idl_ami' %, %S |L )% %, %S )% 
//	]
  end // if
  else
  begin
   INTEGER VAR l_Counter l_Counter := 0
   for %S%I
   begin
    OBJECT IN %I
    if true then
    begin
     #13#10'#include '
     [%f] dump_include_path %( %I |L %, %I )% 
     ++! l_Counter
    end // if
   end // for I
  end // else
//	[\#pragma prefix "%f_idl_prefix(%S)"
  if NOT-EMPTY
  begin
   '#pragma prefix "'
   [%f] idl_prefix %( %S )% 
//	
   #13#10

//	]%SP[{%S{is namespace}=true}
  end // if
  NOP
  %S |P if ( ( %S get_up ( 'is namespace' ) ) %==  true ) then
  begin
   #13#10

//	#module %SN {]<{\n}{}{%C}[
   out_indent 'module '
   %S |N ' {' 
  end // if
  INTEGER VAR l_Counter l_Counter := 0
  for %S%C
  begin
   OBJECT IN %C
   if true then
   begin
    if ( l_Counter >0 ) then ( #13#10 )
    if NOT-EMPTY
    begin
     #13#10

//	[{"%f_print_in_ami_file(%C)"="false"}{\n#\t%CF // AMI forwarded}%CX]]>
     if ( ( [%f] print_in_ami_file %( %C )% ) %== false ) then
     begin
      %C |X 
     end // if
     else
     begin
      #13#10
      out_indent #9
      %C |F ' // AMI forwarded' 
     end // else
    end // if
    NOP

    ++! l_Counter
   end // if
  end // for C
//	[{%S{is namespace}=true}#};
  if ( ( %S get_up ( 'is namespace' ) ) %==  true ) then
  begin
   out_indent '};'
//	]%Sp
  end // if
  %S |p 
//	][{"%XU"="idl_ami"}
 end // if
 if ( ( %X |U ) %== 'idl_ami' ) then
 begin
  #13#10

//	
  #13#10

//	\#ifndef __AMI_<{_}{"%PM"="Interfaces::Category"}%f_to_upper(%PN)>_%f_to_upper(%SN)_IDL__
  '#ifndef __AMI_'
  INTEGER VAR l_Counter l_Counter := 0
  for %S%P
  begin
   OBJECT IN %P
   if ( ( %P |M ) %== 'Interfaces::Category' ) then
   begin
    if ( l_Counter >0 ) then ( '_' )
    [%f] to_upper %( %P |N )% 
    ++! l_Counter
   end // if
  end // for P
  '_'
  [%f] to_upper %( %S |N )% '_IDL__'
//	\#define __AMI_<{_}{"%PM"="Interfaces::Category"}%f_to_upper(%PN)>_%f_to_upper(%SN)_IDL__
  '#define __AMI_'
  INTEGER VAR l_Counter l_Counter := 0
  for %S%P
  begin
   OBJECT IN %P
   if ( ( %P |M ) %== 'Interfaces::Category' ) then
   begin
    if ( l_Counter >0 ) then ( '_' )
    [%f] to_upper %( %P |N )% 
    ++! l_Counter
   end // if
  end // for P
  '_'
  [%f] to_upper %( %S |N )% '_IDL__'
//	
  #13#10

//	[%f_idl_pre_include(%S)
  if NOT-EMPTY
  begin
   [%f] idl_pre_include %( %S )% 
//	]
  end // if
  NOP
//	[<\n\#include %f_dump_include_path(%f_with_gen_id(idl,%IL),%I)>
  if NOT-EMPTY
  begin
   INTEGER VAR l_Counter l_Counter := 0
   for %S%I
   begin
    OBJECT IN %I
    if true then
    begin
     #13#10'#include '
     [%f] dump_include_path %( [%f] with_gen_id %( 'idl' %, %I |L )% %, %I )% 
     ++! l_Counter
    end // if
   end // for I
//	]
  end // if
  NOP
//	[\#pragma prefix "%f_idl_prefix(%S)"
  if NOT-EMPTY
  begin
   '#pragma prefix "'
   [%f] idl_prefix %( %S )% 
//	
   #13#10

//	]%SP[{%S{is namespace}=true}
  end // if
  NOP
  %S |P if ( ( %S get_up ( 'is namespace' ) ) %==  true ) then
  begin
   #13#10

//	#module %SN {]<{\n}{"%f_print_in_ami_file(%C)"="true"}
   out_indent 'module '
   %S |N ' {' 
  end // if
  INTEGER VAR l_Counter l_Counter := 0
  for %S%C
  begin
   OBJECT IN %C
   if ( ( [%f] print_in_ami_file %( %C )% ) %== true ) then
   begin
    if ( l_Counter >0 ) then ( #13#10 )
    #13#10

//	%C<{}{%f_use_ami(%n)=false&%f_kind_of(n,ServerFacet::Class)=true}[%f_with_gen_id(idl,#%nF)
    %C
    bind ( 
     OBJECT VAR %S
     INTEGER VAR l_Counter l_Counter := 0
     for %S%n
     begin
      OBJECT IN %n
      if ( ( [%f] use_ami %( %n )% ) %==  false AND 
       ( ( [%f] kind_of %( 'n' %, 'ServerFacet::Class' )% ) %==  true  ) ) then
      begin
       if NOT-EMPTY
       begin
        [%f] with_gen_id %( 'idl' %, out_indent %n |F )% 
//	]>%f_with_gen_id(idl,%CX)>
       end // if
       NOP

       ++! l_Counter
      end // if
     end // for n

    ) // bind
     [%f] with_gen_id %( 'idl' %, %C |X )% 
    ++! l_Counter
   end // if
  end // for C
//	[{%S{is namespace}=true}#};
  if ( ( %S get_up ( 'is namespace' ) ) %==  true ) then
  begin
   out_indent '};'
//	]%Sp
  end // if
  %S |p 
//	]
 end // if
//	
//	\#endif
 '#endif'
//#UC END# *47173E11031C*
; // idl_subsystem


// нужно ли генерить cpp
//f _srv_need_cpp_files
: srv_need_cpp_files OBJECT IN %S
//#UC START# *47173E1901E4*
//	[{<{}{%AS=ServerInterface|%AS=ServerFacet}{C}>!=0}{false}true]
 if ( 
  INTEGER VAR l_Counter l_Counter := 0
  for %S%A
  begin
   OBJECT IN %A
   if ( ( %A |S ) %== 'ServerInterface' OR 
    ( ( %A |S ) %== 'ServerFacet'  ) ) then
   begin

    ++! l_Counter
   end // if
  end // for A
  l_Counter
  %!= 0 ) then
 begin
   true 
 end // if
 else
 begin
   false 
 end // else
//#UC END# *47173E1901E4*
; // srv_need_cpp_files


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
