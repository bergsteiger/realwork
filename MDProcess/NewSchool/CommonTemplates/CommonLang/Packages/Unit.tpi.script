////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/CommonTemplates/CommonLang/Packages/Unit.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDACategory::Class>> MDProcess$Templates::CommonTemplates::CommonLang::Packages::Unit
//
// Логическая часть библиотеки
// ---
// Объединяет связанные классы и утилиты, выполненные не на основе концепции интерфейсов. Т.е. это
// интерфейсные типы совмещенные с реализацией.
// Может определять или не определять неймспейс. Типы определенные в Unit не могут использоваться в
// интерфейсах.
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//: Unit::Category
implementation @ <<Unit>>
//? Логическая часть библиотеки
//? Объединяет связанные классы и утилиты, выполненные не на основе концепции интерфейсов. Т.е. это интерфейсные типы совмещенные с реализацией. 
//? Может определять или не определять неймспейс. Типы определенные в Unit не могут использоваться в интерфейсах.
//= AbstractUnitBase::Category

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры стереотипа
//v +#-
// - типы видимости
//Y code_unit.gif
//L code_unit
//D
// - запрещена форвард-декларация
// Параметры визуализации
//$ C 255,215,215
//$ l 200,80,80
//$ f 240,50,50

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Пользовательские свойства

//p is namespace:b=false ? определяет является ли модуль неймспейсом
//p defines:s ? определяет файл с условиями компиляции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

//%f _st_space_key
: st_space_key OBJECT IN %S
//	MDP
 'MDP'

//%f _wiki_up_print
; // st_space_key

: wiki_up_print OBJECT IN %S
//	%S#[inherited][{"%S{is namespace}"!="%S{!is namespace}"}%f_up_prefix(%S) *is namespace* = *%S{is namespace}* - определяет является ли модуль неймспейсом
 ?inherited
 if ( ( %S get_up ( 'is namespace' ) ) %!= ( %S get_up_def ( 'is namespace' ) ) ) then
 begin
  [%f] up_prefix %( %S )% ' *is namespace* = *'
  %S get_up ( 'is namespace' ) '* - определяет является ли модуль неймспейсом'
//	][{"%S{defines}"!="%S{!defines}"}%f_up_prefix(%S) *defines* = *%S{defines}* - определяет файл с условиями компиляции
 end // if
 if ( ( %S get_up ( 'defines' ) ) %!= ( %S get_up_def ( 'defines' ) ) ) then
 begin
  [%f] up_prefix %( %S )% ' *defines* = *'
  %S get_up ( 'defines' ) '* - определяет файл с условиями компиляции'
//	]
 end // if

// Выводит файл собственно для модуля
//%f _pas_OutUnitFile
; // wiki_up_print

: pas_OutUnitFile OBJECT IN %S
//#UC START# *4A71CF9A0044for47048FBD0213*
//#UC END# *4A71CF9A0044for47048FBD0213*
; // pas_OutUnitFile


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
//%f _IsUnit
: IsUnit OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4F30E88502A5for47048FBD0213*
//	true
 true
//#UC END# *4F30E88502A5for47048FBD0213*
; // IsUnit


// перекрытие базового стереотипа WikiPackageImpl::Category
// Определяет, что пакет должен генериться в документации в секцию "Утилитные пакеты"
//%f _wiki_utility_package
: wiki_utility_package OBJECT IN %S
//#UC START# *485785D603C1for47048FBD0213*
//	true
 true
//#UC END# *485785D603C1for47048FBD0213*
; // wiki_utility_package


// перекрытие базового стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
//%t _constraint
<<transformator>> constraint OBJECT IN %S
//#UC START# *4704C0E30186for47048FBD0213*
//c	{}
//r {""=""}: {}
//#UC END# *4704C0E30186for47048FBD0213*
; // constraint


// реализация абстрактного стереотипа C++ интерфейсы и реализация::MDAGenerator
// генератор файлов реализации C++ (.cpp)
//+ cpp
<<generator>> cpp OBJECT IN %S
//#UC START# *47022CB8034Bfor47048FBD0213*
//P
//C /%SN
//S [{"%S{is namespace}"="true"}namespace %SN {\n]
//s [{"%S{is namespace}"="true"}} // namespace %SN\n]
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C
//#UC END# *47022CB8034Bfor47048FBD0213*
; // cpp


// реализация абстрактного стереотипа C++ интерфейсы и реализация::MDAGenerator
// генератор заголовочных файлов C++ (.h)
//+ h
<<generator>> h OBJECT IN %S
//#UC START# *47022C88029Ffor47048FBD0213*
//= cpp
%call-other-gen ( 'cpp' )
//#UC END# *47022C88029Ffor47048FBD0213*
; // h


// реализация абстрактного стереотипа C++ интерфейсы и реализация::MDAGenerator
// генератор inline файлов реализации C++ (.i.h)
//+ i.h
<<generator>> i.h OBJECT IN %S
//#UC START# *47022CCF00EAfor47048FBD0213*
//= cpp
%call-other-gen ( 'cpp' )
//#UC END# *47022CCF00EAfor47048FBD0213*
; // i.h


// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Реализация на Delphi(.pas)
//+ impl.pas
<<generator>> impl.pas OBJECT IN %S
//R  
//#UC START# *470F15B800CBfor47048FBD0213*
//#UC END# *470F15B800CBfor47048FBD0213*
; // impl.pas


// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Родные Delphi интерфейсы (.pas)
//+ intf.pas
<<generator>> intf.pas OBJECT IN %S
//R  
//#UC START# *470F1571031Cfor47048FBD0213*
//O [{"%f_pas_UnitFileName(%S)"!=""}[{%S{finished}!=true}NOT_FINISHED_]%f_pas_UnitFileName(%S)]
//C %S%f_pas_UnitPath()
//R  
//	[{"%SO"!=""}%S%f_pas_OutUnitFile()]\
 if ( ( %S |O ) %!= '' ) then
 begin
  %S %f pas_OutUnitFile %( )% 
 end // if
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C
//#UC END# *470F1571031Cfor47048FBD0213*
; // intf.pas


// реализация абстрактного стереотипа Java::MDAGenerator
// генератор классов, интерфейсов на java (.java)
//+ java
<<generator>> java OBJECT IN %S
//#UC START# *470321950119for47048FBD0213*
//C [{%S{is namespace}=true}/%SN]
//C /%SN
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C
//#UC END# *470321950119for47048FBD0213*
; // java


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Генератор файлов форм (.dfm)
//+ dfm
<<generator>> dfm OBJECT IN %S
//R  
//#UC START# *49F5795900ECfor47048FBD0213*
//P
//C %S%f_pas_UnitPath()
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C
//#UC END# *49F5795900ECfor47048FBD0213*
; // dfm


// перекрытие базового стереотипа ModelBuilding::MDAGenerator
// генератор построения виртуальных элементов модели - запускается до генерации конкретных
// артефактов
//+ spell
<<generator>> spell OBJECT IN %S
//#UC START# *4A41A13D03D5for47048FBD0213*
//	<%CX>\
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C
//	%S%f_DoSpell()
 %S %f DoSpell %( )% 
//#UC END# *4A41A13D03D5for47048FBD0213*
; // spell



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

end. // <<Unit>>

