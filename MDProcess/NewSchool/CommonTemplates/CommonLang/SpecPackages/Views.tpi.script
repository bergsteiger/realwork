////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/CommonTemplates/CommonLang/SpecPackages/Views.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDACategory::Class>> MDProcess$Templates::CommonTemplates::CommonLang::SpecPackages::Views
//
// GUI пакет
// ---
// Содержит описание компонент GUI интерфейса
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//: Views::Category
implementation @ <<Views>>
//? GUI пакет
//? Содержит описание компонент GUI интерфейса
//> Resource::Class
//> GuiControl::Class
//> Dialog::Class
//> PropertyPage::Class
//> PropertySheet::Class

//= AbstractImplBase::Category
//= C++ интерфейсы и реализация::MDAGenerator
//= Проектные файлы C++::MDAGenerator

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры стереотипа
//v +
// - типы видимости
//Y code_views.gif
//L code_views
//D
// - запрещена форвард-декларация
// Параметры визуализации
//$ C 255,185,235
//$ l 240,10,200
//$ f 240,10,200

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Пользовательские свойства

//p is namespace:b=false ? определяет является ли модуль неймспейсом
//p need UC:s ? явно включает генерацию дополнительных секций Юзер-Кода

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

//%f _st_space_key
: st_space_key OBJECT IN %S
//	MDP
 'MDP'

//%f _wiki_up_print
; // st_space_key

: wiki_up_print OBJECT IN %S
//	%S%[AbstractImplBase::Category]f_wiki_up_print()[{"%S{is namespace}"!="%S{!is namespace}"}%f_up_prefix(%S) *is namespace* = *%S{is namespace}* - определяет является ли модуль неймспейсом
 call-inherited:: 'AbstractImplBase' wiki_up_print %( )%
 if ( ( %S get_up ( 'is namespace' ) ) %!= ( %S get_up_def ( 'is namespace' ) ) ) then
 begin
  [%f] up_prefix %( %S )% ' *is namespace* = *'
  %S get_up ( 'is namespace' ) '* - определяет является ли модуль неймспейсом'
//	][{"%S{need UC}"!="%S{!need UC}"}%f_up_prefix(%S) *need UC* = *%S{need UC}* - явно включает генерацию дополнительных секций Юзер-Кода
 end // if
 if ( ( %S get_up ( 'need UC' ) ) %!= ( %S get_up_def ( 'need UC' ) ) ) then
 begin
  [%f] up_prefix %( %S )% ' *need UC* = *'
  %S get_up ( 'need UC' ) '* - явно включает генерацию дополнительных секций Юзер-Кода'
//	]
 end // if


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// перекрытие базового стереотипа WikiPackageImpl::Category
// Определяет, что пакет должен генериться в документации в секцию "Утилитные пакеты"
//%f _wiki_utility_package
; // wiki_up_print

: wiki_utility_package OBJECT IN %S
//#UC START# *485785D603C1for47048F1701F4*
//	true
 true
//#UC END# *485785D603C1for47048F1701F4*
; // wiki_utility_package


// перекрытие базового стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
//%t _constraint
<<transformator>> constraint OBJECT IN %S
//#UC START# *4704C0E30186for47048F1701F4*
//c	{}
//r {""=""}: {}
//#UC END# *4704C0E30186for47048F1701F4*
; // constraint


// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Реализация на Delphi(.pas)
//+ impl.pas
<<generator>> impl.pas OBJECT IN %S
//R  
//#UC START# *470F15B800CBfor47048F1701F4*
//#UC END# *470F15B800CBfor47048F1701F4*
; // impl.pas


// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Родные Delphi интерфейсы (.pas)
//+ intf.pas
<<generator>> intf.pas OBJECT IN %S
//R  
//#UC START# *470F1571031Cfor47048F1701F4*
//C %S%f_pas_UnitPath()
//R  
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C
//#UC END# *470F1571031Cfor47048F1701F4*
; // intf.pas


// реализация абстрактного стереотипа Проектные файлы C++::MDAGenerator
// Файлы ресурсов (rc)
//+ rc
<<generator>> rc OBJECT IN %S
//#UC START# *471442BE033Cfor47048F1701F4*
//P
//C /%SN
//S [{"%S{is namespace}"="true"}namespace %SN {\n]
//s [{"%S{is namespace}"="true"}} // namespace %SN\n]
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C
//#UC END# *471442BE033Cfor47048F1701F4*
; // rc


// перекрытие базового стереотипа C++ интерфейсы и реализация::MDAGenerator
// генератор файлов реализации C++ (.cpp)
//+ cpp
<<generator>> cpp OBJECT IN %S
//#UC START# *47022CB8034Bfor47048F1701F4*
//= AbstractImplBase::Category;cpp
%call-other-gen ( 'AbstractImplBase' 'cpp' )
//P
//C /%SN
//#UC END# *47022CB8034Bfor47048F1701F4*
; // cpp


// перекрытие базового стереотипа C++ интерфейсы и реализация::MDAGenerator
// генератор заголовочных файлов C++ (.h)
//+ h
<<generator>> h OBJECT IN %S
//#UC START# *47022C88029Ffor47048F1701F4*
//= AbstractImplBase::Category;h
%call-other-gen ( 'AbstractImplBase' 'h' )
//P
//C /%SN
//#UC END# *47022C88029Ffor47048F1701F4*
; // h


// перекрытие базового стереотипа ModelBuilding::MDAGenerator
// генератор построения виртуальных элементов модели - запускается до генерации конкретных
// артефактов
//+ spell
<<generator>> spell OBJECT IN %S
//#UC START# *4A41A13D03D5for47048F1701F4*
//	<%CX>\
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C
//	%S%f_DoSpell()
 %S %f DoSpell %( )% 
//#UC END# *4A41A13D03D5for47048F1701F4*
; // spell



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

end. // <<Views>>

