////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/CommonTemplates/Testing/Elements/TestCase.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$Templates::CommonTemplates::Testing::Elements::TestCase
//
// Тестовый сценарий
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//: TestCase::Class
implementation @ <<TestCase>>
//? Тестовый сценарий
//> Test::Class
//> method::Class

//= SimpleClass::Class

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры стереотипа
//Y code_test_case.gif
//L code_test_case
// Параметры визуализации
//$ C 255,192,203
//$ l 50,205,50
//$ f 255,104,32

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

//%f _st_space_key
: st_space_key OBJECT IN %S
//	MDP
 'MDP'


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
//%f _DoSpell
; // st_space_key

: DoSpell OBJECT IN %S
//#UC START# *4B2A19E3038Bfor4B2A19080274*
//	%S%[inherited]\
 inherited

//	[{"%SD"=""}\
 if ( ( %S |D ) %== '' ) then
 begin


//	%f_set_var(POS,"%f_string_find(%SN,_)")\
  [%f] set_var %( 'POS' %, [%f] string_find %( %S |N %, '_' )% )% 
//	%f_set_var(NAME,"[{%{POS}N!=-1}{%SN}%f_substr_from_begin(%SN,%{POS}N)]")\
  [%f] set_var %( 'NAME' %, if ( ( ( get_global_var ( 'POS' ) |N ) ) %!= -1 ) then
  begin
   [%f] substr_from_begin %( %S |N %, ( get_global_var ( 'POS' ) |N ) )% 
  end // if
  else
  begin
   %S |N 
  end // else
)% 

//	[{%f_substr_from_begin(%{NAME}N,1)=K}{\
  if ( ( [%f] substr_from_begin %( ( get_global_var ( 'NAME' ) |N ) %, 1 )% ) %== 'K' ) then
  begin
//	[{%f_consist_of(%f_cut_prefix(%{NAME}N,K),1234567890)=true}\
   if ( ( [%f] consist_of %( [%f] cut_prefix %( ( get_global_var ( 'NAME' ) |N ) %, 'K' )% %, '1234567890' )% ) %==  true ) then
   begin
//	%S%f_set_documentation(\{RequestLink:%f_cut_prefix(%{NAME}N,K)\})\
    %S %f set_documentation %( '{RequestLink:'
    [%f] cut_prefix %( ( get_global_var ( 'NAME' ) |N ) %, 'K' )% '}' )% 
//	]\
   end // if
//	]\
  end // if
  else
  begin
//	[{%f_substr_from_begin(%{NAME}N,1)=TK}\
   if ( ( [%f] substr_from_begin %( ( get_global_var ( 'NAME' ) |N ) %, 1 )% ) %== 'TK' ) then
   begin
//	[{%f_consist_of(%f_cut_prefix(%{NAME}N,TK),1234567890)=true}\
    if ( ( [%f] consist_of %( [%f] cut_prefix %( ( get_global_var ( 'NAME' ) |N ) %, 'TK' )% %, '1234567890' )% ) %==  true ) then
    begin
//	%S%f_set_documentation(\{RequestLink:%f_cut_prefix(%{NAME}N,TK)\})\
     %S %f set_documentation %( '{RequestLink:'
     [%f] cut_prefix %( ( get_global_var ( 'NAME' ) |N ) %, 'TK' )% '}' )% 
//	]\
    end // if
//	]\
   end // if
//	}\
  end // else
//	]\
 end // if

//	[{%S#f_IsMixIn()!=true|%Sa!=abstract}\
 if ( ( %S %?f IsMixIn %( )% ) %!=  true OR 
   ( ( %S |a ) %!= 'abstract'  ) ) then
 begin
//	[{%Gx!=true|<{}{%G#f_IsMixIn()!=true}{C}>=0}\
  if ( ( %G |x ) %!=  true OR 
    ( 
   INTEGER VAR l_Counter l_Counter := 0
   for %S%G
   begin
    OBJECT IN %G
    if ( ( %G %?f IsMixIn %( )% ) %!=  true ) then
    begin

     ++! l_Counter
    end // if
   end // for G
   l_Counter
   %== 0  ) ) then
  begin
//	[{%P%P%PS=VCMTestProject}{\
   if ( ( %P ->P ->P |S   ) %== 'VCMTestProject' ) then
   begin
//	[{"%{TvcmInsiderTest}N"=""}%f_find_element(4DAECE5D0060,TvcmInsiderTest)]\
    if ( ( ( get_global_var ( 'TvcmInsiderTest' ) |N ) ) %== '' ) then
    begin
     [%f] find_element %( '4DAECE5D0060' %, 'TvcmInsiderTest' )% 
    end // if
//	%S%f_make_accessable(%{TvcmInsiderTest}U)\
    %S %f make_accessable %( ( get_global_var ( 'TvcmInsiderTest' ) |U ) )% 
//	%f_addG(%S,%{TvcmInsiderTest})\
    [%f] addG %( %S %, ( get_global_var ( 'TvcmInsiderTest' ) ) )% 
//	]\
   end // if
   else
   begin
//	[{<{}{%CS=uses&%C%T#f_IsVCMForm()=true}{C}>=0}{\
    if ( 
     INTEGER VAR l_Counter l_Counter := 0
     for %S%C
     begin
      OBJECT IN %C
      if ( ( %C |S ) %== 'uses' AND 
       ( ( %C ->T %?f IsVCMForm %( )%  ) %==  true  ) ) then
      begin

       ++! l_Counter
      end // if
     end // for C
     l_Counter
     %== 0 ) then
    begin
//	[{%f_IsSandBox(%S)!=true}{\
     if ( ( [%f] IsSandBox %( %S )% ) %!=  true ) then
     begin
//	[{"%{TBaseTest}N"=""}%f_find_element(TBaseTest,TBaseTest)]\
      if ( ( ( get_global_var ( 'TBaseTest' ) |N ) ) %== '' ) then
      begin
       [%f] find_element %( 'TBaseTest' %, 'TBaseTest' )% 
      end // if
//	%S%f_make_accessable(%{TBaseTest}U)\
      %S %f make_accessable %( ( get_global_var ( 'TBaseTest' ) |U ) )% 
//	%f_addG(%S,%{TBaseTest})\
      [%f] addG %( %S %, ( get_global_var ( 'TBaseTest' ) ) )% 
//	]\
     end // if
     else
     begin
//	[{"%{TTestCase}N"=""}%f_find_element(TTestCase,TTestCase)]\
      if ( ( ( get_global_var ( 'TTestCase' ) |N ) ) %== '' ) then
      begin
       [%f] find_element %( 'TTestCase' %, 'TTestCase' )% 
      end // if
//	%S%f_make_accessable(%{TTestCase}U)\
      %S %f make_accessable %( ( get_global_var ( 'TTestCase' ) |U ) )% 
//	%f_addG(%S,%{TTestCase})\
      [%f] addG %( %S %, ( get_global_var ( 'TTestCase' ) ) )% 
//	}\
     end // else
//	]\
    end // if
    else
    begin
//	[{"%{TVCMBaseTest}N"=""}%f_find_element(TVCMBaseTest,TVCMBaseTest)]\
     if ( ( ( get_global_var ( 'TVCMBaseTest' ) |N ) ) %== '' ) then
     begin
      [%f] find_element %( 'TVCMBaseTest' %, 'TVCMBaseTest' )% 
     end // if
//	%S%f_make_accessable(%{TVCMBaseTest}U)\
     %S %f make_accessable %( ( get_global_var ( 'TVCMBaseTest' ) |U ) )% 
//	%f_addG(%S,%{TVCMBaseTest})\
     [%f] addG %( %S %, ( get_global_var ( 'TVCMBaseTest' ) ) )% 
//	}\
    end // else
//	}\
   end // else
//	]\
  end // if
//	]
 end // if
//#UC END# *4B2A19E3038Bfor4B2A19080274*
; // DoSpell


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Выводит секции инициализации
//%f _pas_OutIni
: pas_OutIni OBJECT IN %S
//#UC START# *4B3886890063for4B2A19080274*
//	%S%[inherited]\
 inherited
//	[{%Sa!=abstract&%S#f_IsMixIn()!=true}\
 if ( ( %S |a ) %!= 'abstract' AND 
   ( ( %S %?f IsMixIn %( )% ) %!=  true  ) ) then
 begin
//	\n TestFramework.RegisterTest(%f_pas_TypeName(%S).Suite);\
  #13#10' TestFramework.RegisterTest('
  [%f] pas_TypeName %( %S )% '.Suite);'
//	]
 end // if
//#UC END# *4B3886890063for4B2A19080274*
; // pas_OutIni


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Имя типа
//%f _pas_TypeName
: pas_TypeName OBJECT IN %S
//#UC START# *4947F8AD02A1for4B2A19080274*
//	[{%S#f_IsMixIn()!=true}{\
 if ( ( %S %?f IsMixIn %( )% ) %!=  true ) then
 begin
//	T%f_cut_prefix(%SN,T)\
  'T'
  [%f] cut_prefix %( %S |N %, 'T' )% 
//	]
 end // if
 else
 begin
//	%S%[inherited]\
  inherited
//	}\
 end // else
//#UC END# *4947F8AD02A1for4B2A19080274*
; // pas_TypeName



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

end. // <<TestCase>>

