////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/CoreTemplates/Integrated/Root/Project.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDACategory::Class>> MDProcess$CoreTemplates::CoreTemplates::Integrated::Root::Project
//
// Проект
// ---
// Рутовый элемент модели. Определяет основные проекты. Одна модель может определять несколько
// проектов, определяя связи между ними.
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//: Project::Category
implementation @ <<Project>>
//? Проект
//? Рутовый элемент модели. Определяет основные проекты. Одна модель может определять несколько проектов, определяя связи между ними.
//> Requirements::Category

//= Документация::MDAGenerator

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры стереотипа
//Y code_project.gif
//L code_project
// Параметры визуализации
//$ C 195,245,195
//$ l 80,245,90
//$ f 80,245,90
//M
// - может быть основным элементом модели

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Пользовательские свойства

//p Full MDP:b=true ? поддержка полного контроля используемости определяемого MDP
//p full constraint:b=true ? Включает полный контроль за правильностью использования элементов (например при включенной опции серванты не могут нигде использоваться, кроме своих вложенных типов)
//p is namespace:b=false ? определяет является ли проект неймспейсом
//p root path suffix:s ? определяет префикс пути вставляемый между рутовой дирректорией и всем компонентам входящими в проект
//p space key:s ? идентификатор родительского спейса для генерации в MDKnow
//p space name:s ? Название родительского спейса - при генерации будет выставленно в заданное (т.е. изменено при необходимости)

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

//%f _st_space_key
: st_space_key OBJECT IN %S
//	MDP
 'MDP'

//%f _wiki_up_print
; // st_space_key

: wiki_up_print OBJECT IN %S
//	[{"%S{Full MDP}"!="%S{!Full MDP}"}%f_up_prefix(%S) *Full MDP* = *%S{Full MDP}* - поддержка полного контроля используемости определяемого MDP
 if ( ( %S get_up ( 'Full MDP' ) ) %!= ( %S get_up_def ( 'Full MDP' ) ) ) then
 begin
  [%f] up_prefix %( %S )% ' *Full MDP* = *'
  %S get_up ( 'Full MDP' ) '* - поддержка полного контроля используемости определяемого MDP'
//	][{"%S{full constraint}"!="%S{!full constraint}"}%f_up_prefix(%S) *full constraint* = *%S{full constraint}* - Включает полный контроль за правильностью использования элементов (например при включенной опции серванты не могут нигде использоваться, кроме своих вложенных типов)
 end // if
 if ( ( %S get_up ( 'full constraint' ) ) %!= ( %S get_up_def ( 'full constraint' ) ) ) then
 begin
  [%f] up_prefix %( %S )% ' *full constraint* = *'
  %S get_up ( 'full constraint' ) '* - Включает полный контроль за правильностью использования элементов (например при включенной опции серванты не могут нигде использоваться, кроме своих вложенных типов)'
//	][{"%S{is namespace}"!="%S{!is namespace}"}%f_up_prefix(%S) *is namespace* = *%S{is namespace}* - определяет является ли проект неймспейсом
 end // if
 if ( ( %S get_up ( 'is namespace' ) ) %!= ( %S get_up_def ( 'is namespace' ) ) ) then
 begin
  [%f] up_prefix %( %S )% ' *is namespace* = *'
  %S get_up ( 'is namespace' ) '* - определяет является ли проект неймспейсом'
//	][{"%S{root path suffix}"!="%S{!root path suffix}"}%f_up_prefix(%S) *root path suffix* = *%S{root path suffix}* - определяет префикс пути вставляемый между рутовой дирректорией и всем компонентам входящими в проект
 end // if
 if ( ( %S get_up ( 'root path suffix' ) ) %!= ( %S get_up_def ( 'root path suffix' ) ) ) then
 begin
  [%f] up_prefix %( %S )% ' *root path suffix* = *'
  %S get_up ( 'root path suffix' ) '* - определяет префикс пути вставляемый между рутовой дирректорией и всем компонентам входящими в проект'
//	][{"%S{space key}"!="%S{!space key}"}%f_up_prefix(%S) *space key* = *%S{space key}* - идентификатор родительского спейса для генерации в MDKnow
 end // if
 if ( ( %S get_up ( 'space key' ) ) %!= ( %S get_up_def ( 'space key' ) ) ) then
 begin
  [%f] up_prefix %( %S )% ' *space key* = *'
  %S get_up ( 'space key' ) '* - идентификатор родительского спейса для генерации в MDKnow'
//	][{"%S{space name}"!="%S{!space name}"}%f_up_prefix(%S) *space name* = *%S{space name}* - Название родительского спейса - при генерации будет выставленно в заданное (т.е. изменено при необходимости)
 end // if
 if ( ( %S get_up ( 'space name' ) ) %!= ( %S get_up_def ( 'space name' ) ) ) then
 begin
  [%f] up_prefix %( %S )% ' *space name* = *'
  %S get_up ( 'space name' ) '* - Название родительского спейса - при генерации будет выставленно в заданное (т.е. изменено при необходимости)'
//	]
 end // if

//%f _wiki_ProjectPageName
; // wiki_up_print

: wiki_ProjectPageName OBJECT IN %S
// возвращаемый результат: a-string
//#UC START# *4E7C7B0B0192for49F99EB100B2*
//	[{%SN=Nemesis|%f_substr_from_begin(%SN,2)=F1}{\
 if ( ( %S |N ) %== 'Nemesis' OR 
   ( ( [%f] substr_from_begin %( %S |N %, 2 )% ) %== 'F1'  ) ) then
 begin
//	[{%SN=F1}{\
  if ( ( %S |N ) %== 'F1' ) then
  begin
//	%f_str_replace(%SN,$, )\
   [%f] str_replace %( %S |N %, '$' %, ' ' )% 
//	]\
  end // if
  else
  begin
//	%f_str_replace(%f_cut_prefix(%SN,F1 ),$, )\
   [%f] str_replace %( [%f] cut_prefix %( %S |N %, 'F1 ' )% %, '$' %, ' ' )% 
//	}\
  end // else
//	]
 end // if
 else
 begin
//	[{%f_substr_from_begin(%SN,13)=Shared Delphi}{\
  if ( ( [%f] substr_from_begin %( %S |N %, 13 )% ) %== 'Shared Delphi' ) then
  begin
//	[{%SN=Shared Delphi}{\
   if ( ( %S |N ) %== 'Shared Delphi' ) then
   begin
//	%f_str_replace(%SN,$, )\
    [%f] str_replace %( %S |N %, '$' %, ' ' )% 
//	]\
   end // if
   else
   begin
//	%f_str_replace(%f_cut_prefix(%SN,Shared Delphi ),$, )\
    [%f] str_replace %( [%f] cut_prefix %( %S |N %, 'Shared Delphi ' )% %, '$' %, ' ' )% 
//	}\
   end // else
//	]\
  end // if
  else
  begin
//	Модель проекта "%f_str_replace(%SN,$, )"\
   'Модель проекта "'
   [%f] str_replace %( %S |N %, '$' %, ' ' )% 
//	}\
  end // else
//	}\
 end // else
//#UC END# *4E7C7B0B0192for49F99EB100B2*
; // wiki_ProjectPageName


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
//%t _constraint
<<transformator>> constraint OBJECT IN %S
//#UC START# *4704C0E30186for49F99EB100B2*
//c          {}
//r {""=""}: {}
//#UC END# *4704C0E30186for49F99EB100B2*
; // constraint


// реализация абстрактного стереотипа Документация::MDAGenerator
// выводит описание элемента (операция, атрибут) в wiki
//%f _wiki_child_kind
: wiki_child_kind OBJECT IN %S
//#UC START# *4705CBD6003Efor49F99EB100B2*
//#UC END# *4705CBD6003Efor49F99EB100B2*
; // wiki_child_kind


// реализация абстрактного стереотипа Документация::MDAGenerator
// вывод описание авто-генерируемых методов в wiki
//%f _wiki_up_add_gen
: wiki_up_add_gen OBJECT IN %S
//#UC START# *470484D50138for49F99EB100B2*
//#UC END# *470484D50138for49F99EB100B2*
; // wiki_up_add_gen


// реализация абстрактного стереотипа Документация::MDAGenerator
// Генерация модели в MDKnow
//+ wiki
<<generator>> wiki OBJECT IN %S
//#UC START# *46E6D4BB0339for49F99EB100B2*
//C conf:/[{"%S{space name}"!=""}{%SN}%S{space name}],key:%S{space key},guid:%SU/Home/%S%f_wiki_ProjectPageName():%SU
//O %S%f_wiki_ProjectPageName()
//	%f_wiki_header(%S)
 [%f] wiki_header %( %S )% 
//	[h2. Модель[
 if NOT-EMPTY
 begin
  'h2. Модель'
  if NOT-EMPTY
  begin
   #13#10

//	
   #13#10

//	{info}Используемые другие проекты:
   '{info}Используемые другие проекты:'
//	<{}{%D#f_IsProject()=true}* \
   INTEGER VAR l_Counter l_Counter := 0
   for %S%D
   begin
    OBJECT IN %D
    if ( ( %D %?f IsProject %( )% ) %==  true ) then
    begin
     '* '
//	[{"%D{space key}"!=""}{\
     if ( ( %D get_up ( 'space key' ) ) %!= '' ) then
     begin
      '['
//	[{"%D{space name}"!=""}{\
      if ( ( %D get_up ( 'space name' ) ) %!= '' ) then
      begin
//	%D{space name}\
       %D get_up ( 'space name' ) 
//	]\
      end // if
      else
      begin
//	%DN\
       %D |N 
//	}\
      end // else
//	|%D{space key}:Home\
      '|'
      %D get_up ( 'space key' ) ':Home'
//	\]\
      ']'
//	] %f_k_link(%D)
     end // if
     else
     begin


//	[{"%D{space name}"!=""}{\
      if ( ( %D get_up ( 'space name' ) ) %!= '' ) then
      begin
//	%D{space name}\
       %D get_up ( 'space name' ) 
//	]\
      end // if
      else
      begin
//	%DN\
       %D |N 
//	}\
      end // else


//	}\[\
     end // else
     ' '
     [%f] k_link %( %D )% 
//	>\

     ++! l_Counter
    end // if
   end // for D
//	{info}]\
   '{info}' 
  end // if
  NOP


//	[
  if NOT-EMPTY
  begin
   #13#10

//	
   #13#10

//	{note}Дополнительные свойства:
   '{note}Дополнительные свойства:'
//	%S#f_wiki_up_print(){note}][{%mx=true&%Cx=true}
   %S %?f wiki_up_print %( )% '{note}' 
  end // if
  NOP
  if ( ( %m |x ) %==  true AND 
    ( ( %C |x ) %==  true  ) ) then
  begin
   #13#10

//	
   #13#10

//	<{----\n}_[{%mN!=Main}{Основная}%mN] диаграмма проекта:_
   INTEGER VAR l_Counter l_Counter := 0
   for %S%m
   begin
    OBJECT IN %m
    if true then
    begin
     if ( l_Counter >0 ) then ( '----'#13#10 )
     '_'
     if ( ( %m |N ) %!= 'Main' ) then
     begin
      %m |N 
     end // if
     else
     begin
      'Основная' 
     end // else
     ' диаграмма проекта:_'
//	%f_dump_diagram(m){ShowDiagram:%mU.jpg}
     [%f] dump_diagram %( 'm' )% '{ShowDiagram:'
     %m |U '.jpg}'
//	>]][

     ++! l_Counter
    end // if
   end // for m
  end // if
 end // if
 NOP
 if NOT-EMPTY
 begin
  #13#10

//	
  #13#10

//	h2. Состав проекта[
  'h2. Состав проекта'
  if NOT-EMPTY
  begin
   #13#10

//	
   #13#10

//	_Требования:_<{}{%CS=Requirements}
   '_Требования:_'
   INTEGER VAR l_Counter l_Counter := 0
   for %S%C
   begin
    OBJECT IN %C
    if ( ( %C |S ) %== 'Requirements' ) then
    begin
     #13#10

//	\# *%f_k_link(%C)*
     '# *'
     [%f] k_link %( %C )% '*'
//	_%C?_[, %f_str_replace(%CD,\n\n,\n\\\\)]>][
     '_'
     %C |? '_'
     if NOT-EMPTY
     begin
      ', '
      [%f] str_replace %( %C |D %, #13#10#13#10 %, #13#10'\\' )% 
     end // if
     NOP

     ++! l_Counter
    end // if
   end // for C
  end // if
  NOP
  if NOT-EMPTY
  begin
   #13#10

//	
   #13#10

//	_Модули:_<{}{%CS!=Requirements&%CS!=MDATemplates&%t_target_ex(%C)=false}
   '_Модули:_'
   INTEGER VAR l_Counter l_Counter := 0
   for %S%C
   begin
    OBJECT IN %C
    if ( ( %C |S ) %!= 'Requirements' AND 
     ( ( %C |S ) %!= 'MDATemplates'  ) AND 
     ( ( [%t] target_ex %( %C )% ) %==  false  ) ) then
    begin
     #13#10

//	\# *%f_k_link(%C)*
     '# *'
     [%f] k_link %( %C )% '*'
//	_%C?_[, %f_str_replace(%CD,\n\n,\n\\\\)]>][
     '_'
     %C |? '_'
     if NOT-EMPTY
     begin
      ', '
      [%f] str_replace %( %C |D %, #13#10#13#10 %, #13#10'\\' )% 
     end // if
     NOP

     ++! l_Counter
    end // if
   end // for C
  end // if
  NOP
  if NOT-EMPTY
  begin
   #13#10

//	
   #13#10

//	_Компилируемые цели и инсталляторы:_<{}{%t_target_ex(%C)=true}
   '_Компилируемые цели и инсталляторы:_'
   INTEGER VAR l_Counter l_Counter := 0
   for %S%C
   begin
    OBJECT IN %C
    if ( ( [%t] target_ex %( %C )% ) %==  true ) then
    begin
     #13#10

//	\# *%f_k_link(%C)*
     '# *'
     [%f] k_link %( %C )% '*'
//	_%C?_[, %f_str_replace(%CD,\n\n,\n\\\\)]>][
     '_'
     %C |? '_'
     if NOT-EMPTY
     begin
      ', '
      [%f] str_replace %( %C |D %, #13#10#13#10 %, #13#10'\\' )% 
     end // if
     NOP

     ++! l_Counter
    end // if
   end // for C
  end // if
  NOP
  if NOT-EMPTY
  begin
   #13#10

//	
   #13#10

//	_Модель шаблонов:_<{}{%CS=MDATemplates}
   '_Модель шаблонов:_'
   INTEGER VAR l_Counter l_Counter := 0
   for %S%C
   begin
    OBJECT IN %C
    if ( ( %C |S ) %== 'MDATemplates' ) then
    begin
     #13#10

//	\# *%f_k_link(%C)*
     '# *'
     [%f] k_link %( %C )% '*'
//	_%C?_[, %f_str_replace(%CD,\n\n,\n\\\\)]>]]<%CX>
     '_'
     %C |? '_'
     if NOT-EMPTY
     begin
      ', '
      [%f] str_replace %( %C |D %, #13#10#13#10 %, #13#10'\\' )% 
     end // if
     NOP

     ++! l_Counter
    end // if
   end // for C
  end // if
  NOP
 end // if
 NOP
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C
//	%f_wiki_footer(%S)
 [%f] wiki_footer %( %S )% 
//#UC END# *46E6D4BB0339for49F99EB100B2*
; // wiki



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

end. // <<Project>>

