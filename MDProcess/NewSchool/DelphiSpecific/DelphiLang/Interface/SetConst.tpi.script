////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/DelphiSpecific/DelphiLang/Interface/SetConst.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$ForDelphi::DelphiSpecific::DelphiLang::Interface::SetConst
//
// Константа из множества
// ---
// Определяет константное множество. Тип множества задаются как базовый класс (связь наследования).
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//: SetConst::Class
implementation @ <<SetConst>>
//? Константа из множества
//? Определяет константное множество. Тип множества задаются как базовый класс (связь наследования).
//= Constants::Class
//= Delphi интерфейсы и реализация::MDAGenerator

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры стереотипа
//v +#-
// - типы видимости
//Y code_set_const.gif
//L code_set_const
// Параметры визуализации
//$ C 245,245,245
//$ l 100,100,100
//$ f 100,100,100

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Пользовательские свойства

//p force usage:b=false ? явно определяет, что элемент будет кем-то использован (нужно для проверки)

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

//%f _st_space_key
: st_space_key OBJECT IN %S
//	SHD
 'SHD'

//%f _wiki_up_print
; // st_space_key

: wiki_up_print OBJECT IN %S
//	%S%[Constants::Class]f_wiki_up_print()[{"%S{force usage}"!="%S{!force usage}"}%f_up_prefix(%S) *force usage* = *%S{force usage}* - явно определяет, что элемент будет кем-то использован (нужно для проверки)
 call-inherited:: 'Constants' wiki_up_print %( )%
 if ( ( %S get_up ( 'force usage' ) ) %!= ( %S get_up_def ( 'force usage' ) ) ) then
 begin
  [%f] up_prefix %( %S )% ' *force usage* = *'
  %S get_up ( 'force usage' ) '* - явно определяет, что элемент будет кем-то использован (нужно для проверки)'
//	]
 end // if


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
//%t _constraint
; // wiki_up_print

<<transformator>> constraint OBJECT IN %S
//#UC START# *4704C0E30186for4721B14D00AB*
//c                               {}
//r {<{}{}{%GC}>!=1}:             {%SS должен наследоваться точно от одного типа}
//r {%f_is_used(%S)=false}:       {%SS ни кем не используется}
//#UC END# *4704C0E30186for4721B14D00AB*
; // constraint


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
//%f _DoSpell
: DoSpell OBJECT IN %S
//#UC START# *4B2A19E3038Bfor4721B14D00AB*
//	%S%[Constants::Class]f_DoSpell()
 call-inherited:: 'Constants' DoSpell %( )%
//#UC END# *4B2A19E3038Bfor4721B14D00AB*
; // DoSpell


// перекрытие базового стереотипа C++ интерфейсы и реализация::MDAGenerator
// генератор файлов реализации C++ (.cpp)
//+ cpp
<<generator>> cpp OBJECT IN %S
//#UC START# *47022CB8034Bfor4721B14D00AB*
//#UC END# *47022CB8034Bfor4721B14D00AB*
; // cpp


// перекрытие базового стереотипа C++ интерфейсы и реализация::MDAGenerator
// генератор заголовочных файлов C++ (.h)
//+ h
<<generator>> h OBJECT IN %S
//#UC START# *47022C88029Ffor4721B14D00AB*
//#UC END# *47022C88029Ffor4721B14D00AB*
; // h


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Родные Delphi интерфейсы (.pas)
//+ intf.pas
<<generator>> intf.pas OBJECT IN %S
//R  
//#UC START# *470F1571031Cfor4721B14D00AB*
//R  
//	%f_pas_OpenConst(%S)\
 [%f] pas_OpenConst %( %S )% 
//	#%SN = [{%GS=SetConst&%Cx=true}%GN + ][{}{%t_pas_SetConst(%G)}[\[<{, }{}{%C}%G#f_pas_ElementPrefix()%C%VN>\]]];\
 out_indent %S |N ' = '
 if ( ( %G |S ) %== 'SetConst' AND 
   ( ( %C |x ) %==  true  ) ) then
 begin
  %G |N ' + ' 
 end // if
 if NOT-EMPTY
 begin
  if NOT-EMPTY
  begin
   '['
   INTEGER VAR l_Counter l_Counter := 0
   for %S%C
   begin
    OBJECT IN %C
    if true then
    begin
     if ( l_Counter >0 ) then ( ', ' )
     %G %?f pas_ElementPrefix %( )% %C ->V |N  
     ++! l_Counter
    end // if
   end // for C
   ']' 
  end // if
  NOP
 end // if
 NOP
 else
 begin
  [%t] pas_SetConst %( %G )% 
 end // else
 ';'
//	[\n# \{* %SD \}]
 if NOT-EMPTY
 begin
  #13#10
  out_indent ' {* '
  %S |D ' }' 
 end // if
 NOP
//#UC END# *470F1571031Cfor4721B14D00AB*
; // intf.pas



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

end. // <<SetConst>>

