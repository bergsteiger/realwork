//MDA GENERATOR TEMPLATE FILE

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/F1Specific/F1Specific.tpl"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDATemplates::Category>> MDProcess$ForF1::F1Specific
//
// Модель шаблонов, содержит описания стереотипов специфичные для проекта F1
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Generator definitions:
//group "All" {

//	group "C++ интерфейсы и реализация" {
//		generator "cpp" {
//			Description: генератор файлов реализации C++ (.cpp)
//			lid: cpp
//		}
//		generator "h" {
//			Description: генератор заголовочных файлов C++ (.h)
//			lid: cpp
//			ifdef_suffix: H
//		}
//		generator "i.h" {
//			Description: генератор inline файлов реализации C++ (.i.h)
//			lid: cpp
//		}
//		group "Проектные файлы C++" {
//			generator "mpc" {
//				Description: mpc/mwc файлы проектов (mpc/mwc)
//			}
//			generator "mpc2" {
//				Description: дополнительные файлы проектов (mpc)
//			}
//			generator "rc" {
//				Description: Файлы ресурсов (rc)
//			}
//			generator "s.ini" {
//				Description: файл настроек (.ini)
//			}
//			generator "s.reg" {
//				Description: настройки реестра (.reg)
//			}
//			generator "vi.rc" {
//				Description: информация о версии (.rc)
//			}
//			generator "vi.rch" {
//				Description: информация о версии (.rch)
//			}
//		}
//		group "C++ Фабрики" {
//			generator "fctr.cpp" {
//				Description: генератор файлов реализации для фабрик интерфейсов (.cpp)
//				lid: cpp
//			}
//			generator "fctr.h" {
//				Description: генератор заголовочных файлов для фабрик интерфейсов (.h)
//				lid: cpp
//				ifdef_suffix: FCTR_H
//			}
//		}
//	}

//	group "COM" {
//		generator "com.def" {
//			Description: генерация файла экспорта определений для COM DLL (.def)
//		}
//		generator "com.rgs" {
//			Description: генерация файла опрделений для регистрации COM DLL (.rgs)
//		}
//		generator "odl" {
//			Description: генератор ODL-файла спецификации COM-интерфейса (.odl)
//			lid: cpp
//		}
//	}

//	group "CORBA IDL" {
//		generator "idl" {
//			Description: генератор idl спецификаций (.idl)
//			lid: idl
//		}
//		generator "idl_ami" {
//			Description: генератор idl спецификаций для AMI (.idl)
//			lid: idl
//		}
//	}

//	group "Delphi интерфейсы и реализация" {
//		generator "dfm" {
//			Description: Генератор файлов форм (.dfm)
//		}
//		generator "impl.pas" {
//			Description: Реализация на Delphi(.pas)
//			lid: delphi
//		}
//		generator "intf.pas" {
//			Description: Родные Delphi интерфейсы (.pas)
//			lid: delphi
//		}
//		generator "intf2.pas" {
//			Description: Вторая интерфейсная секция стереотипа. Например реализация свойств класса.
//			lid: delphi
//		}
//		generator "intf3.pas" {
//			Description: 3-я секция интерфейса. Например поле для свойства.
//			lid: delphi
//		}
//		generator "pas.script" {
//			Description: 
//			lid: script
//		}
//		generator "pas.script.runner" {
//			Description: 
//			lid: script
//		}
//		generator "rc.pas" {
//			Description: Ресурсы (.rc)
//			lid: delphi
//		}
//		generator "rc.script.pas" {
//			Description: Скрипты в ресурсах (.rc.script)
//			lid: delphi
//		}
//		generator "res.cmd.pas" {
//			Description: Компилятор ресурса (.res.cmd)
//			lid: delphi
//		}
//		group "Delphi ST" {
//			generator "pascal" {
//				Description: 
//				lid: delphi
//			}
//		}
//	}

//	group "Java" {
//		generator "fctr.java" {
//			Description: генератор реализации фабрик интерфейсов на java (.java)
//			lid: java
//		}
//		generator "java" {
//			Description: генератор классов, интерфейсов на java (.java)
//			lid: java
//		}
//		group "Проектные файлы Java" {
//			generator "Makejar.launch" {
//				Description: Генерация файлов для конфигурации и запуска сборки
//				lid: xml
//			}
//			generator "build.xml" {
//				Description: генерация файлов для сборки в Ecllipse
//				lid: xml
//			}
//			generator "output.classpath" {
//				Description: генерация файла с описанием путей поиска библиотек (CLASSPATH для java)
//				lid: xml
//			}
//			generator "output.project" {
//				Description: генерация файлов проекта для Ecllipse
//				lid: xml
//			}
//			generator "output.xml" {
//				Description: генератор файлов с описанием плагинов для Confluence
//				lid: xml
//			}
//		}
//	}

//	group "Генерация для Web" {
//		group "Генерация Velocity" {
//			generator "vm" {
//				Description: генератор VM
//			}
//		}
//		group "Генерация JavaScript" {
//			generator "js" {
//				Description: генератор JavaScript
//			}
//		}
//	}

//	group "Дельфи-DLL Адаптер" {
//		generator "dll.cpp" {
//			Description: С++ TIE-обвязка для DLL (_tie.cpp)
//			lid: dll_cpp
//		}
//		generator "dll.h" {
//			Description: С++ TIE-обвязка для DLL (_tie.h)
//			lid: dll_cpp
//			ifdef_suffix: TIE_H
//		}
//		generator "pas" {
//			Description: Delphi интерфейсы для адаптера (.pas)
//			lid: delphi
//		}
//	}

//	group "Дельфи-DLL Адаптер проектные файлы" {
//		generator "mpc.dll" {
//			Description: MPC для TIE-обвязки (.mpc)
//		}
//	}

//	group "Скрипт для сборки" {
//		generator "ant.bat" {
//			Description: Пускачь для скрипта (.bat)
//		}
//		generator "ant.xml" {
//			Description: Скрипт для Ant'а (.xml)
//		}
//	}

//	group "Мета-MDA" {
//		generator "mda" {
//			Description: Генерация мета-шаблонов
//		}
//		generator "mda.inc" {
//			Description: Генерация списка включения мета-шаблонов (mda.inc)
//		}
//		generator "tpi.script" {
//			Description: 
//			lid: script
//		}
//	}

//	group "ModelBuilding" {
//		generator "spell" {
//			Description: генератор построения виртуальных элементов модели - запускается до генерации конкретных артефактов
//		}
//	}

//	group "Документация" {
//		generator "wiki" {
//			Description: Генерация модели в MDKnow
//		}
//		group "ModelSerialize" {
//			generator "forth_structure" {
//				Description: генератор структуры модели в описание на языке FORTH
//				lid: forth
//			}
//		}
//	}


//Stereotype definitions:

//////////////////////////////////////////////////////////////////////////////////
// default

//: default
implementation @ <<default>>

//////////////////////////////////////////////////////////////////////////////////
// default Category (Using for generation LogicalView)

//: default::Category
end. // <<default>>

implementation @ <<default>>
//> Domain::Category
//> UMLModule::Category
//> Project::Category
//> VCMDomain::Category
//> VCMUseCases::Category
//> VCMProject::Category
//> VCMTestProject::Category
//> LibraryGroup::Category
//> ProjectGroup::Category


//+ fctr.cpp
<<generator>> fctr.cpp OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ fctr.h
; // fctr.cpp

<<generator>> fctr.h OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ cpp
; // fctr.h

<<generator>> cpp OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ h
; // cpp

<<generator>> h OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ i.h
; // h

<<generator>> i.h OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ com.def
; // i.h

<<generator>> com.def OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ com.rgs
; // com.def

<<generator>> com.rgs OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ odl
; // com.rgs

<<generator>> odl OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ idl
; // odl

<<generator>> idl OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ idl_ami
; // idl

<<generator>> idl_ami OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ dfm
; // idl_ami

<<generator>> dfm OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ impl.pas
; // dfm

<<generator>> impl.pas OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ intf.pas
; // impl.pas

<<generator>> intf.pas OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ intf2.pas
; // intf.pas

<<generator>> intf2.pas OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ intf3.pas
; // intf2.pas

<<generator>> intf3.pas OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ pas.script
; // intf3.pas

<<generator>> pas.script OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ pas.script.runner
; // pas.script

<<generator>> pas.script.runner OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ rc.pas
; // pas.script.runner

<<generator>> rc.pas OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ rc.script.pas
; // rc.pas

<<generator>> rc.script.pas OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ res.cmd.pas
; // rc.script.pas

<<generator>> res.cmd.pas OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ fctr.java
; // res.cmd.pas

<<generator>> fctr.java OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ java
; // fctr.java

<<generator>> java OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ js
; // java

<<generator>> js OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ vm
; // js

<<generator>> vm OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ dll.cpp
; // vm

<<generator>> dll.cpp OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ dll.h
; // dll.cpp

<<generator>> dll.h OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ pas
; // dll.h

<<generator>> pas OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ mpc.dll
; // pas

<<generator>> mpc.dll OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ mpc
; // mpc.dll

<<generator>> mpc OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ mpc2
; // mpc

<<generator>> mpc2 OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ rc
; // mpc2

<<generator>> rc OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ s.ini
; // rc

<<generator>> s.ini OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ s.reg
; // s.ini

<<generator>> s.reg OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ vi.rc
; // s.reg

<<generator>> vi.rc OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ vi.rch
; // vi.rc

<<generator>> vi.rch OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ Makejar.launch
; // vi.rch

<<generator>> Makejar.launch OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ build.xml
; // Makejar.launch

<<generator>> build.xml OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ output.classpath
; // build.xml

<<generator>> output.classpath OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ output.project
; // output.classpath

<<generator>> output.project OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ output.xml
; // output.project

<<generator>> output.xml OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ ant.bat
; // output.xml

<<generator>> ant.bat OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ ant.xml
; // ant.bat

<<generator>> ant.xml OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ mda
; // ant.xml

<<generator>> mda OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ mda.inc
; // mda

<<generator>> mda.inc OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ tpi.script
; // mda.inc

<<generator>> tpi.script OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ spell
; // tpi.script

<<generator>> spell OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ forth_structure
; // spell

<<generator>> forth_structure OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ wiki
; // forth_structure

<<generator>> wiki OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C

//+ pascal
; // wiki

<<generator>> pascal OBJECT IN %S
//P
//	<%CX>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%C
 begin
  OBJECT IN %C
  if true then
  begin
   %C |X 
   ++! l_Counter
  end // if
 end // for C


//# ./F1Specific.inc.tpi
; // pascal

end. // <<default>>

USES
 'G:\NewSchool\F1Specific\F1Specific.inc.tpi.script'
;

//f _all_generators
: all_generators OBJECT IN %S
//	[%f_clear_list(ALL_GENERATORS_ID)
 if NOT-EMPTY
 begin
  [%f] clear_list %( 'ALL_GENERATORS_ID' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"Makejar.launch")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'Makejar.launch' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"ant.bat")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'ant.bat' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"ant.xml")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'ant.xml' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"build.xml")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'build.xml' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"com.def")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'com.def' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"com.rgs")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'com.rgs' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"cpp")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'cpp' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"dfm")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'dfm' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"dll.cpp")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'dll.cpp' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"dll.h")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'dll.h' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"fctr.cpp")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'fctr.cpp' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"fctr.h")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'fctr.h' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"fctr.java")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'fctr.java' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"forth_structure")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'forth_structure' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"h")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'h' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"i.h")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'i.h' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"idl")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'idl' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"idl_ami")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'idl_ami' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"impl.pas")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'impl.pas' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"intf.pas")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'intf.pas' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"intf2.pas")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'intf2.pas' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"intf3.pas")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'intf3.pas' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"java")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'java' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"js")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'js' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"mda")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'mda' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"mda.inc")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'mda.inc' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"mpc")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'mpc' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"mpc.dll")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'mpc.dll' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"mpc2")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'mpc2' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"odl")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'odl' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"output.classpath")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'output.classpath' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"output.project")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'output.project' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"output.xml")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'output.xml' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"pas")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'pas' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"pas.script")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'pas.script' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"pas.script.runner")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'pas.script.runner' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"pascal")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'pascal' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"rc")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'rc' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"rc.pas")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'rc.pas' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"rc.script.pas")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'rc.script.pas' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"res.cmd.pas")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'res.cmd.pas' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"s.ini")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 's.ini' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"s.reg")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 's.reg' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"spell")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'spell' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"tpi.script")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'tpi.script' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"vi.rc")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'vi.rc' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"vi.rch")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'vi.rch' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"vm")
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'vm' )% 
//	%f_add_to_list(ALL_GENERATORS_ID,"wiki")]
  [%f] add_to_list %( 'ALL_GENERATORS_ID' %, 'wiki' )% 
 end // if
 NOP

//Reports definitions:
//group "All" {

//# ./../CoreTemplates/Integrated/Root/Design.tpi
; // all_generators

USES
 'G:\NewSchool\CoreTemplates\Integrated\Root\Design.tpi.script'
;
//}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
