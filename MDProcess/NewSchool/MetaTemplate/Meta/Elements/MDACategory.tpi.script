////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/MetaTemplate/Meta/Elements/MDACategory.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$Templates::MetaTemplate::Meta::Elements::MDACategory
//
// Элемент папка
// ---
// Формулирует стереотип категории (папки)
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//: MDACategory::Class
implementation @ <<MDACategory>>
//? Элемент папка
//? Формулирует стереотип категории (папки)
//< *::Class,*::Category

//= MDAMainStereotype::Class

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры стереотипа
//Y code_mda_category.gif
//L code_mda_category
// Параметры визуализации
//$ C 255,223,255
//$ l 230,80,230
//$ f 230,80,230

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Пользовательские свойства

//p can be main:b=false ? признак может ли элемент быть основным элементом модели
//p can set visibility level:b=false ? Можно ли для папки устанавливать глубину видимости детей

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

//%f _st_space_key
: st_space_key OBJECT IN %S
//	MDP
 'MDP'

//%f _wiki_up_print
; // st_space_key

: wiki_up_print OBJECT IN %S
//	%S#[inherited][{"%S{can be main}"!="%S{!can be main}"}%f_up_prefix(%S) *can be main* = *%S{can be main}* - признак может ли элемент быть основным элементом модели
 ?inherited
 if ( ( %S get_up ( 'can be main' ) ) %!= ( %S get_up_def ( 'can be main' ) ) ) then
 begin
  [%f] up_prefix %( %S )% ' *can be main* = *'
  %S get_up ( 'can be main' ) '* - признак может ли элемент быть основным элементом модели'
//	][{"%S{can set visibility level}"!="%S{!can set visibility level}"}%f_up_prefix(%S) *can set visibility level* = *%S{can set visibility level}* - Можно ли для папки устанавливать глубину видимости детей
 end // if
 if ( ( %S get_up ( 'can set visibility level' ) ) %!= ( %S get_up_def ( 'can set visibility level' ) ) ) then
 begin
  [%f] up_prefix %( %S )% ' *can set visibility level* = *'
  %S get_up ( 'can set visibility level' ) '* - Можно ли для папки устанавливать глубину видимости детей'
//	]
 end // if


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// перекрытие базового стереотипа MDAGenerator::Class
// выводит определение всех UP
//%f _define_up
; // wiki_up_print

: define_up OBJECT IN %S
//#UC START# *46E7BDF301F1for46E1538400EA*
//	%S%[MDAMainStereotype::Class]f_define_up()\
 call-inherited:: 'MDAMainStereotype' define_up %( )%
//	[{%S{can be main}=true}M\n/ - может быть основным элементом модели
 if ( ( %S get_up ( 'can be main' ) ) %==  true ) then
 begin
  'M'#13#10'/ - может быть основным элементом модели'
//	][{%S{can set visibility}=true}V\n/ - можно устанавливать глубину видимости дочерних элементов
 end // if
 if ( ( %S get_up ( 'can set visibility' ) ) %==  true ) then
 begin
  'V'#13#10'/ - можно устанавливать глубину видимости дочерних элементов'
//	]
 end // if
//#UC END# *46E7BDF301F1for46E1538400EA*
; // define_up


// перекрытие базового стереотипа MDAGenerator::Class
// возвращает имя (идентификатор) класса стереотипа
//%f _st_class_name
: st_class_name OBJECT IN %S
//#UC START# *46E7AE5B00A8for46E1538400EA*
//	Category
 'Category'
//#UC END# *46E7AE5B00A8for46E1538400EA*
; // st_class_name


// перекрытие базового стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
//%t _constraint
<<transformator>> constraint OBJECT IN %S
//#UC START# *4704C0E30186for46E1538400EA*
//c {}
//r {<{}{%GN=%SN}{C}>!=0}: {Одноименные стереотипы могут только перекрываться (связь реализации), но не наследываться}
//r {%f_check_personal_label(%S)=false}:                                       {Не задан параметр personal label}
//r {%f_check_personal_visualization(%S)=false}:                                {Не заданы параметры визуализации (visualization f-font color, visualization bg color, visualization f-line color)}
//r {<{}{%R%f_need_st_define()=true&%R%f_st_name()!=%S%f_st_name()}{C}>!=0}:   {%S%f_st_name() can realize only other defined %S%f_st_name()}
//#UC END# *4704C0E30186for46E1538400EA*
; // constraint



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

end. // <<MDACategory>>

