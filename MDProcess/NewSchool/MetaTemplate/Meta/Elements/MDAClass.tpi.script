////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/MetaTemplate/Meta/Elements/MDAClass.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$Templates::MetaTemplate::Meta::Elements::MDAClass
//
// Элемент-класс
// ---
// Формулирует стереотип класса.
// Ключевой стереотип при создании мета-моделей шаблонов. Как можно видеть сама модель мета-
// шаблонов практически полностью построена за счет данного стереотипа. Т.к. именно он определяет
// основной строительный элемент - сущность класса-шаблона. Описывая при этом сам себя (что видно
// из равенства названий самого класса и его стереотипа).
// 
// Наследует все свойства своих базовых классов (прежде всего MDAGeneartor)
// 
// Вложенные классы определяют допустимые подстереотипы и генерируют их описание.
// 
// Абстрактность определяет возможность иметь экземпляры т.е. быть использованным на модели.
// 
// Атрибуты-пользовательские свойства определяют все основные команды-свойства стереотипов
// (определенные языком шаблона)
// 
// Большая часть мета-шаблона генерации определена в базовом классе MDAGenerator.
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//: MDAClass::Class
implementation @ <<MDAClass>>
//? Элемент-класс
//? Формулирует стереотип класса. 
//? Ключевой стереотип при создании мета-моделей шаблонов. Как можно видеть сама модель мета-шаблонов практически полностью построена за счет данного стереотипа. Т.к. именно он определяет основной строительный элемент - сущность класса-шаблона. Описывая при этом сам себя (что видно из равенства названий самого класса и его стереотипа).
//? 
//? Наследует все свойства своих базовых классов (прежде всего MDAGeneartor)
//? 
//? Вложенные классы определяют допустимые подстереотипы и генерируют их описание.
//? 
//? Абстрактность определяет возможность иметь экземпляры т.е. быть использованным на модели.
//? 
//? Атрибуты-пользовательские свойства определяют все основные команды-свойства стереотипов (определенные языком шаблона)
//? 
//? Большая часть мета-шаблона генерации определена в базовом классе MDAGenerator.
//> MDAOperation::Class
//> MDAAttribute::Class
//> MDADependency::Class
//> MDAStateMachine::Class
//> MDAParameter::Class

//= MDAMainStereotype::Class

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры стереотипа
//Y code_mda_class.gif
//L code_mda_class

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Пользовательские свойства

//p has derived impl:b=false ? признак элемента указывающий на то что данный элемент может иметь унаследованную реализацию
//p exception:b=false ? элемент может/не может быть использован, как исключение. В диалогах установки исключений, элементы с данным стереотипом будут доступны для выбора. Если не задано ни true ни false - по умолчанию принимается true.
//p can be parametrized:tribool=undefined ? Указывает что элемент может/не может быть параметризован.
//p forward weight:s=0 ? вес форвард декларации - из двух элементов форвард декларирован будет тот, у которого больший вес
//p implementable:tribool=undefined ? признак элемента указывающий на то что данный элемент будет реализован в своем контейнере и может быть «перекрыт» в контейнере-наследнике

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

//%f _st_space_key
: st_space_key OBJECT IN %S
//	MDP
 'MDP'

//%f _wiki_up_print
; // st_space_key

: wiki_up_print OBJECT IN %S
//	%S#[inherited][{"%S{has derived impl}"!="%S{!has derived impl}"}%f_up_prefix(%S) *has derived impl* = *%S{has derived impl}* - признак элемента указывающий на то что данный элемент может иметь унаследованную реализацию
 ?inherited
 if ( ( %S get_up ( 'has derived impl' ) ) %!= ( %S get_up_def ( 'has derived impl' ) ) ) then
 begin
  [%f] up_prefix %( %S )% ' *has derived impl* = *'
  %S get_up ( 'has derived impl' ) '* - признак элемента указывающий на то что данный элемент может иметь унаследованную реализацию'
//	][{"%S{exception}"!="%S{!exception}"}%f_up_prefix(%S) *exception* = *%S{exception}* - элемент может/не может быть использован, как исключение. В диалогах установки исключений, элементы с данным стереотипом будут доступны для выбора. Если не задано ни true ни false - по умолчанию принимается true.
 end // if
 if ( ( %S get_up ( 'exception' ) ) %!= ( %S get_up_def ( 'exception' ) ) ) then
 begin
  [%f] up_prefix %( %S )% ' *exception* = *'
  %S get_up ( 'exception' ) '* - элемент может/не может быть использован, как исключение. В диалогах установки исключений, элементы с данным стереотипом будут доступны для выбора. Если не задано ни true ни false - по умолчанию принимается true.'
//	][{"%S{can be parametrized}"!="%S{!can be parametrized}"}%f_up_prefix(%S) *can be parametrized* = *%S{can be parametrized}* - Указывает что элемент может/не может быть параметризован.
 end // if
 if ( ( %S get_up ( 'can be parametrized' ) ) %!= ( %S get_up_def ( 'can be parametrized' ) ) ) then
 begin
  [%f] up_prefix %( %S )% ' *can be parametrized* = *'
  %S get_up ( 'can be parametrized' ) '* - Указывает что элемент может/не может быть параметризован.'
//	][{"%S{forward weight}"!="%S{!forward weight}"}%f_up_prefix(%S) *forward weight* = *%S{forward weight}* - вес форвард декларации - из двух элементов форвард декларирован будет тот, у которого больший вес
 end // if
 if ( ( %S get_up ( 'forward weight' ) ) %!= ( %S get_up_def ( 'forward weight' ) ) ) then
 begin
  [%f] up_prefix %( %S )% ' *forward weight* = *'
  %S get_up ( 'forward weight' ) '* - вес форвард декларации - из двух элементов форвард декларирован будет тот, у которого больший вес'
//	][{"%S{implementable}"!="%S{!implementable}"}%f_up_prefix(%S) *implementable* = *%S{implementable}* - признак элемента указывающий на то что данный элемент будет реализован в своем контейнере и может быть «перекрыт» в контейнере-наследнике
 end // if
 if ( ( %S get_up ( 'implementable' ) ) %!= ( %S get_up_def ( 'implementable' ) ) ) then
 begin
  [%f] up_prefix %( %S )% ' *implementable* = *'
  %S get_up ( 'implementable' ) '* - признак элемента указывающий на то что данный элемент будет реализован в своем контейнере и может быть «перекрыт» в контейнере-наследнике'
//	]
 end // if


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// перекрытие базового стереотипа MDAGenerator::Class
// выводит определение всех UP
//%f _define_up
; // wiki_up_print

: define_up OBJECT IN %S
//#UC START# *46E7BDF301F1for46E1537802AF*
//	%S%[MDAMainStereotype::Class]f_define_up()\
 call-inherited:: 'MDAMainStereotype' define_up %( )%
//	[{%S{has derived impl}=true}d 1\n/ - может иметь унаследованную реализацию
 if ( ( %S get_up ( 'has derived impl' ) ) %==  true ) then
 begin
  'd 1'#13#10'/ - может иметь унаследованную реализацию'
//	][{%S{exception}=true}E\n/ - является исключением
 end // if
 if ( ( %S get_up ( 'exception' ) ) %==  true ) then
 begin
  'E'#13#10'/ - является исключением'
//	][{%S{can be parametrized}=true}W true\n/ - может быть параметризован
 end // if
 if ( ( %S get_up ( 'can be parametrized' ) ) %==  true ) then
 begin
  'W true'#13#10'/ - может быть параметризован'
//	][{%S{can be parametrized}=false}W false\n/ - не может быть параметризован
 end // if
 if ( ( %S get_up ( 'can be parametrized' ) ) %==  false ) then
 begin
  'W false'#13#10'/ - не может быть параметризован'
//	][{%S{forward weight}!=%S{!forward weight}}B %S{forward weight}\n/ - вес форвард декларации
 end // if
 if ( ( %S get_up ( 'forward weight' ) ) %!= ( %S get_up_def ( 'forward weight' ) ) ) then
 begin
  'B '
  %S get_up ( 'forward weight' ) #13#10'/ - вес форвард декларации'
//	][{%S{implementable}=true}m t\n/ - может быть реализован/иметь перекрытую реализацию
 end // if
 if ( ( %S get_up ( 'implementable' ) ) %==  true ) then
 begin
  'm t'#13#10'/ - может быть реализован/иметь перекрытую реализацию'
//	][{%S{implementable}=false}m f\n/ - не может быть реализован/иметь перекрытую реализацию
 end // if
 if ( ( %S get_up ( 'implementable' ) ) %==  false ) then
 begin
  'm f'#13#10'/ - не может быть реализован/иметь перекрытую реализацию'
//	]
 end // if
//#UC END# *46E7BDF301F1for46E1537802AF*
; // define_up


// перекрытие базового стереотипа MDAGenerator::Class
// возвращает имя (идентификатор) класса стереотипа
//%f _st_class_name
: st_class_name OBJECT IN %S
//#UC START# *46E7AE5B00A8for46E1537802AF*
//	Class
 'Class'
//#UC END# *46E7AE5B00A8for46E1537802AF*
; // st_class_name


// перекрытие базового стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
//%t _constraint
<<transformator>> constraint OBJECT IN %S
//#UC START# *4704C0E30186for46E1537802AF*
//c {}
//r {<{}{%GN=%SN}{C}>!=0}: {Одноименные стереотипы могут только перекрываться (связь реализации), но не наследываться}
//r {%f_check_personal_label(%S)=false}:                                       {Не задан параметр personal label}
//r {%f_check_personal_visualization(%S)=false}:                                {Не заданы параметры визуализации (visualization f-font color, visualization bg color, visualization f-line color)}
//r {<{}{%R%f_need_st_define()=true&%R%f_st_name()!=%S%f_st_name()}{C}>!=0}:   {%S%f_st_name() can realize only other defined %S%f_st_name()}
//#UC END# *4704C0E30186for46E1537802AF*
; // constraint



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

end. // <<MDAClass>>

