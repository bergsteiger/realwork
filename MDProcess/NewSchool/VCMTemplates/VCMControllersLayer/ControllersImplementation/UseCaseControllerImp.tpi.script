////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/VCMTemplates/VCMControllersLayer/ControllersImplementation/UseCaseControllerImp.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$ForDelphi::VCMTemplates::VCMControllersLayer::ControllersImplementation::UseCaseControllerImp
//
// Реализация контроллера логики прецедента
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//: UseCaseControllerImp::Class
implementation @ <<UseCaseControllerImp>>
//? Реализация контроллера логики прецедента
//= SimpleClass::Class

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры стереотипа
//Y code_vcm_usecase_controller_i.gif
//L code_vcm_usecase_controller_i
// Параметры визуализации
//$ C 121,253,190
//$ l 5,200,150
//$ f 5,200,150

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

//%f _st_space_key
: st_space_key OBJECT IN %S
//	SHD
 'SHD'


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
//%f _DoSpell
; // st_space_key

: DoSpell OBJECT IN %S
//#UC START# *4B2A19E3038Bfor492EC704029E*
//	<{}{%R#f_IsUseCaseController()=true}\
 INTEGER VAR l_Counter l_Counter := 0
 for %S%R
 begin
  OBJECT IN %R
  if ( ( %R %?f IsUseCaseController %( )% ) %==  true ) then
  begin
//	%f_set_var(IMPLEMENTED,R)\
   [%f] set_var %( 'IMPLEMENTED' %, 'R' )% 
//	%R%P<{}{%C{isSynchroEnum}=true&"%C%{SDS_CASTER}N"="%{IMPLEMENTED}U"}\
   %R ->P
   bind ( 
    OBJECT VAR %S
    INTEGER VAR l_Counter l_Counter := 0
    for %S%C
    begin
     OBJECT IN %C
     if ( ( %C get_up ( 'isSynchroEnum' ) ) %==  true AND 
      ( ( %C ( get_object_var ( 'SDS_CASTER' ) |N )  ) %== ( ( get_global_var ( 'IMPLEMENTED' ) |U ) )  ) ) then
     begin
//	%1%f_add_operation(%1U_%CU_ChangeSynchroForm,,ChangeSynchroForm (aSynchroForm : %CU),Op_Inst)\
      %1 %f add_operation %( %1 |U '_'
      %C |U '_ChangeSynchroForm' %, '' %, 'ChangeSynchroForm (aSynchroForm : '
      %C |U ')' %, 'Op_Inst' )% 
//	%{Op_Inst}%f_set_visibility_type(ProtectedAccess)\
      ( get_global_var ( 'Op_Inst' ) %f set_visibility_type %( 'ProtectedAccess' )% ) 
//	%{Op_Inst}%f_set_abstraction_type(final)\
      ( get_global_var ( 'Op_Inst' ) %f set_abstraction_type %( 'final' )% ) 
//	%{Op_Inst}%f_set_documentation(Переключает форму синхронного просмотра)\
      ( get_global_var ( 'Op_Inst' ) %f set_documentation %( 'Переключает форму синхронного просмотра' )% ) 
//	>\

      ++! l_Counter
     end // if
    end // for C

   ) // bind
  //	>\

   ++! l_Counter
  end // if
 end // for R

//	[{%Sa!=abstract&"%f_SetType(%S)"!=""}\
 if ( ( %S |a ) %!= 'abstract' AND 
   ( ( [%f] SetType %( %S )% ) %!= ''  ) ) then
 begin


//	%S%f_add_attribute(%SU_SetType,impurity value,\
  %S %f add_attribute %( %S |U '_SetType' %, 'impurity value' %, 
//	SetType : %f_SetType(%S),\
  'SetType : '
  [%f] SetType %( %S )% %, 
//	Attr_Inst)\
  'Attr_Inst' )% 
//	%{Attr_Inst}%f_set_link_type(lnk)\
  ( get_global_var ( 'Attr_Inst' ) %f set_link_type %( 'lnk' )% ) 
//	%{Attr_Inst}%f_set_visibility_type(PrivateAccess)\
  ( get_global_var ( 'Attr_Inst' ) %f set_visibility_type %( 'PrivateAccess' )% ) 
//	%{Attr_Inst}%f_set_documentation(Реальный интерфейс контроллера прецедента для %SN)\
  ( get_global_var ( 'Attr_Inst' ) %f set_documentation %( 'Реальный интерфейс контроллера прецедента для '
  %S |N )% ) 
//	]\
 end // if

//	[{%S%f_HasAnyVCMArea()=true}\
 if ( ( %S %f HasAnyVCMArea %( )% ) %==  true ) then
 begin


//	[{"%{_vcmFormSetDataSource_.ClearAreas}N"=""}%f_find_element(4938F7E702B7,_vcmFormSetDataSource_.ClearAreas)]\
  if ( ( ( get_global_var ( '_vcmFormSetDataSource_.ClearAreas' ) |N ) ) %== '' ) then
  begin
   [%f] find_element %( '4938F7E702B7' %, '_vcmFormSetDataSource_.ClearAreas' )% 
  end // if
//	%S%f_add_override(%{_vcmFormSetDataSource_.ClearAreas}U)\
  %S %f add_override %( ( get_global_var ( '_vcmFormSetDataSource_.ClearAreas' ) |U ) )% 
//	%{_vcmFormSetDataSource_.ClearAreas}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{_vcmFormSetDataSource_.ClearAreas},%S)_var,\
  ( get_global_var ( '_vcmFormSetDataSource_.ClearAreas' ) %f set_uc_content %( 'intf.pas' %, '_'
  [%f] pas_MethodOwnerID %( ( get_global_var ( '_vcmFormSetDataSource_.ClearAreas' ) ) %, %S )% '_var' %, 
//	 {-}\
  ' {-}'
//	)\
)% ) //	%{_vcmFormSetDataSource_.ClearAreas}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{_vcmFormSetDataSource_.ClearAreas},%S)_impl,\
  ( get_global_var ( '_vcmFormSetDataSource_.ClearAreas' ) %f set_uc_content %( 'intf.pas' %, '_'
  [%f] pas_MethodOwnerID %( ( get_global_var ( '_vcmFormSetDataSource_.ClearAreas' ) ) %, %S )% '_impl' %, 
//	[ <{\n }{%o#f_IsVCMArea()=true}\
  if NOT-EMPTY
  begin
   ' '
   INTEGER VAR l_Counter l_Counter := 0
   for %S%o
   begin
    OBJECT IN %o
    if ( ( %o %?f IsVCMArea %( )% ) %==  true ) then
    begin
     if ( l_Counter >0 ) then ( #13#10' ' )
//	[{%o#f_IsVCMAreaLink()=true}{\
     if ( ( %o %?f IsVCMAreaLink %( )% ) %==  true ) then
     begin
//	if (f_%oN \<\> nil) then f_%oN].Referred := nil;>]\
      'if (f_'
      %o |N ' <> nil) then f_'
      %o |N 
     end // if
     else
     begin
//	%o%f_pas_MethodName("arearef")\
      %o %f pas_MethodName %( 'arearef' )% 
//	}\
     end // else
     '.Referred := nil;' 
     ++! l_Counter
    end // if
   end // for o
  end // if
  NOP
//	
  #13#10

//	 inherited;\
  ' inherited;'
//	)\
)% ) 

//	]\
 end // if

//	%S%[inherited]
 inherited

//f _SetType
; // DoSpell

end. // <<UseCaseControllerImp>>

: SetType OBJECT IN %S
//@ %SU
//	[{"%f_SetTypePrim(%S)"!=""}{\
 if ( ( [%f] SetTypePrim %( %S )% ) %!= '' ) then
 begin
//	%f_SetTypePrim(%S)\
  [%f] SetTypePrim %( %S )% 
//	]
 end // if
 else
 begin
//	%f_set_var(l_Got,"false")\
  [%f] set_var %( 'l_Got' %, false )% 
//	<{}{%GS=UseCaseControllerImp}\
  INTEGER VAR l_Counter l_Counter := 0
  for %S%G
  begin
   OBJECT IN %G
   if ( ( %G |S ) %== 'UseCaseControllerImp' ) then
   begin
//	%G<{}{%R#f_IsUseCaseController()=true}\
    %G
    bind ( 
     OBJECT VAR %S
     INTEGER VAR l_Counter l_Counter := 0
     for %S%R
     begin
      OBJECT IN %R
      if ( ( %R %?f IsUseCaseController %( )% ) %==  true ) then
      begin
//	[{%{l_Got}N!=true}\
       if ( ( ( get_global_var ( 'l_Got' ) |N ) ) %!=  true ) then
       begin
//	%RU\
        %R |U 
//	%f_set_var(l_Got,"true")\
        [%f] set_var %( 'l_Got' %, true )% 
//	]\
       end // if
//	>>\

       ++! l_Counter
      end // if
     end // for R

    ) // bind
 
    ++! l_Counter
   end // if
  end // for G
//	}\
 end // else

//f _SetTypePrim
; // SetType

: SetTypePrim OBJECT IN %S
//@ %SU
//	<{}{%R#f_IsUseCaseController()=true}%RU>
 INTEGER VAR l_Counter l_Counter := 0
 for %S%R
 begin
  OBJECT IN %R
  if ( ( %R %?f IsUseCaseController %( )% ) %==  true ) then
  begin
   %R |U 
   ++! l_Counter
  end // if
 end // for R
//#UC END# *4B2A19E3038Bfor492EC704029E*
; // SetTypePrim


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Является ли примесью
//%f _IsMixIn
implementation @ <<UseCaseControllerImp>>
: IsMixIn OBJECT IN %S
//#UC START# *4947E5D40127for492EC704029E*
//	[{%Sa=abstract}{false}true]
 if ( ( %S |a ) %== 'abstract' ) then
 begin
   true 
 end // if
 else
 begin
   false 
 end // else
//#UC END# *4947E5D40127for492EC704029E*
; // IsMixIn


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Является ли простым классом реализации
//%f _IsSimpleClass
: IsSimpleClass OBJECT IN %S
//#UC START# *4947E4DA0227for492EC704029E*
//	[{%Sa=abstract}{true}false]
 if ( ( %S |a ) %== 'abstract' ) then
 begin
   false 
 end // if
 else
 begin
   true 
 end // else
//#UC END# *4947E4DA0227for492EC704029E*
; // IsSimpleClass


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Добавляет файлы необходимые элементу с точки зрения метамодели
//%f _pas_ImplUses
: pas_ImplUses OBJECT IN %S
//#UC START# *4948EB2601FAfor492EC704029E*
//	%S%[inherited]\
 inherited
//	[{%S%f_HasAnyVCMAreaLink()=true}%f_pas_PutToUses("vcmFormDataSourceRef")]
 if ( ( %S %f HasAnyVCMAreaLink %( )% ) %==  true ) then
 begin
  [%f] pas_PutToUses %( 'vcmFormDataSourceRef' )% 
 end // if
//#UC END# *4948EB2601FAfor492EC704029E*
; // pas_ImplUses


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Выводит дополнительные модули необходимые элементу в интерфейсной секции
//%f _pas_IntfUses
: pas_IntfUses OBJECT IN %S
//#UC START# *4948F2EE0334for492EC704029E*
//	%S%[inherited]\
 inherited
//	[{%S%f_HasAnyVCMArea()=true}%f_pas_PutToUses("vcmControllers")]
 if ( ( %S %f HasAnyVCMArea %( )% ) %==  true ) then
 begin
  [%f] pas_PutToUses %( 'vcmControllers' )% 
 end // if
//#UC END# *4948F2EE0334for492EC704029E*
; // pas_IntfUses


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Выводит спец-метку класса
//%f _pas_OutClassMark
: pas_OutClassMark OBJECT IN %S
//#UC START# *494B74D7016Bfor492EC704029E*
//	ucc
 'ucc'
//#UC END# *494B74D7016Bfor492EC704029E*
; // pas_OutClassMark


// перекрытие базового стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
//%t _constraint
<<transformator>> constraint OBJECT IN %S
//#UC START# *4704C0E30186for492EC704029E*
//c	{}
//r {""=""}: {}
//#UC END# *4704C0E30186for492EC704029E*
; // constraint



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

end. // <<UseCaseControllerImp>>

