////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/VCMTemplates/VCMViewImplementationLayer/FormsPack/ModuleMethod.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$ForDelphi::VCMTemplates::VCMViewImplementationLayer::FormsPack::ModuleMethod
//
// Метод модуля
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//: ModuleMethod::Class
implementation @ <<ModuleMethod>>
//? Метод модуля
//= method::Class
//= ModuleOperationPrim::Class

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Основная ветка наследования
//! ModuleOperationPrim::Class

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

//%f _st_space_key
: st_space_key OBJECT IN %S
//	SHD
 'SHD'

//%f _wiki_up_print
; // st_space_key

: wiki_up_print OBJECT IN %S
//	%S%[ModuleOperationPrim::Class]f_wiki_up_print()[{"%S{is static}"!="%S{!is static}"}%f_up_prefix(%S) *is static* = *%S{is static}* - Определяет, что метод принадлежит мета-классу
 call-inherited:: 'ModuleOperationPrim' wiki_up_print %( )%
 if ( ( %S get_up ( 'is static' ) ) %!= ( %S get_up_def ( 'is static' ) ) ) then
 begin
  [%f] up_prefix %( %S )% ' *is static* = *'
  %S get_up ( 'is static' ) '* - Определяет, что метод принадлежит мета-классу'
//	][{"%S{force overload}"!="%S{!force overload}"}%f_up_prefix(%S) *force overload* = *%S{force overload}* - Определяет, что метод перегружен
 end // if
 if ( ( %S get_up ( 'force overload' ) ) %!= ( %S get_up_def ( 'force overload' ) ) ) then
 begin
  [%f] up_prefix %( %S )% ' *force overload* = *'
  %S get_up ( 'force overload' ) '* - Определяет, что метод перегружен'
//	]
 end // if


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
//%f _DoSpell
; // wiki_up_print

: DoSpell OBJECT IN %S
//#UC START# *4B2A19E3038Bfor4A9D2BC80274*
//	%S%[method::Class]\
 call-inherited:: 'method' SAME_NAME %( )%
//	%S%f_SpellWordForModuleOperation()
 %S %f SpellWordForModuleOperation %( )% 
//#UC END# *4B2A19E3038Bfor4A9D2BC80274*
; // DoSpell


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Определяет, что элемент является "внутренностью" класса, атрибутом или операцией
//%f _IsClassInner
: IsClassInner OBJECT IN %S
//#UC START# *49CB3EE70382for4A9D2BC80274*
//	true
 true
//#UC END# *49CB3EE70382for4A9D2BC80274*
; // IsClassInner


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
//%f _IsMethod
: IsMethod OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4B2A29440092for4A9D2BC80274*
//	true
 true
//#UC END# *4B2A29440092for4A9D2BC80274*
; // IsMethod


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
//%f _pas_CallingConventionsDirective
: pas_CallingConventionsDirective OBJECT IN %S
// возвращаемый результат: a-string
//#UC START# *4CBD7CFE025Bfor4A9D2BC80274*
//	%S%[method::Class]
 call-inherited:: 'method' SAME_NAME %( )%
//#UC END# *4CBD7CFE025Bfor4A9D2BC80274*
; // pas_CallingConventionsDirective


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Выводит секцию определений метода
//%f _pas_MethodDeclarations
: pas_MethodDeclarations OBJECT IN %S
//#UC START# *49CB54AA033Afor4A9D2BC80274*
//	%S%[method::Class]
 call-inherited:: 'method' SAME_NAME %( )%
//#UC END# *49CB54AA033Afor4A9D2BC80274*
; // pas_MethodDeclarations


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// выводит реализацию метода
// 
// RealizeType = o|r|f
//%f _pas_MethodImplementation
: pas_MethodImplementation OBJECT IN %S
// параметры: Implementator: void = %1, RealizeType: void = %2, Modification: void = %3, aOverrider: MDAClass = %4
//#UC START# *494BEC7C03E5for4A9D2BC80274*
//	%S%[ModuleOperationPrim::Class]f_pas_MethodImplementation(%1,%2,%3)
 call-inherited:: 'ModuleOperationPrim' pas_MethodImplementation %( %1 %, %2 %, %3 )%
//#UC END# *494BEC7C03E5for4A9D2BC80274*
; // pas_MethodImplementation


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// выводит интерфейс метода
// 
// RealizeType = o|r|f
//%f _pas_MethodInterface
: pas_MethodInterface OBJECT IN %S
// параметры: Implementator: void = %1, RealizeType: void = %2, Modification: void = %3, aOverrider: MDAClass = %4
//#UC START# *494BEC6A038Afor4A9D2BC80274*
//	%S%[ModuleOperationPrim::Class]f_pas_MethodInterface(%1,%2,%3)
 call-inherited:: 'ModuleOperationPrim' pas_MethodInterface %( %1 %, %2 %, %3 )%
//#UC END# *494BEC6A038Afor4A9D2BC80274*
; // pas_MethodInterface


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Выводит имя владельца метода
//%f _pas_MethodOwnerName
: pas_MethodOwnerName OBJECT IN %S
//#UC START# *49CB3C99034Bfor4A9D2BC80274*
//	%S%[method::Class]
 call-inherited:: 'method' SAME_NAME %( )%
//#UC END# *49CB3C99034Bfor4A9D2BC80274*
; // pas_MethodOwnerName



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

end. // <<ModuleMethod>>

