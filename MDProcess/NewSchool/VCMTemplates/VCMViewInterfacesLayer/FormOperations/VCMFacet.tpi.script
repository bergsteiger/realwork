////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/VCMTemplates/VCMViewInterfacesLayer/FormOperations/VCMFacet.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$ForDelphi::VCMTemplates::VCMViewInterfacesLayer::FormOperations::VCMFacet
//
// VCM "Facet"
// ---
// Набор операций, который надо заменить на Facet
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//: VCMFacet::Class
implementation @ <<VCMFacet>>
//? VCM "Facet"
//? Набор операций, который надо заменить на Facet
//= VCMOperations::Class

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры стереотипа
// Параметры визуализации
//$ C 64,171,236
//$ l 48,5,192
//$ f 48,5,192

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

//%f _st_space_key
: st_space_key OBJECT IN %S
//	SHD
 'SHD'


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Вложенные стереотипы

//: VCMFacet::Class::InternalOperation::Operation
; // st_space_key

end. // <<VCMFacet>>

implementation @ :: <<VCMFacet>> <<InternalOperation>> ;
//? Внутренняя операция
//= VCMOperationPrim::Class

// Параметры стереотипа
//T 
// - может не иметь "цели" (типа/результата)

// Пользовательские свойства
//p Needs Broadcast:b=false ? Нужен ли метод Broadcast
//p is query:b=true ? Определает, что операция является запросом к агрегации о возможности сделать что-то

// Функции стереотипа
//%f _st_space_key
: st_space_key OBJECT IN %S
//	SHD
 'SHD'

//%f _wiki_up_print
; // st_space_key

: wiki_up_print OBJECT IN %S
//	%S#[inherited][{"%S{is query}"!="%S{!is query}"}%f_up_prefix(%S) *is query* = *%S{is query}* - Определает, что операция является запросом к агрегации о возможности сделать что-то
 ?inherited
 if ( ( %S get_up ( 'is query' ) ) %!= ( %S get_up_def ( 'is query' ) ) ) then
 begin
  [%f] up_prefix %( %S )% ' *is query* = *'
  %S get_up ( 'is query' ) '* - Определает, что операция является запросом к агрегации о возможности сделать что-то'
//	][{"%S{Needs Broadcast}"!="%S{!Needs Broadcast}"}%f_up_prefix(%S) *Needs Broadcast* = *%S{Needs Broadcast}* - Нужен ли метод Broadcast
 end // if
 if ( ( %S get_up ( 'Needs Broadcast' ) ) %!= ( %S get_up_def ( 'Needs Broadcast' ) ) ) then
 begin
  [%f] up_prefix %( %S )% ' *Needs Broadcast* = *'
  %S get_up ( 'Needs Broadcast' ) '* - Нужен ли метод Broadcast'
//	]
 end // if


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Добавляет файлы необходимые элементу с точки зрения метамодели
//%f _pas_ImplUses
; // wiki_up_print

: pas_ImplUses OBJECT IN %S
//#UC START# *4948EB2601FAfor4A9801640116*
//	%S%[inherited]\
 inherited
//	%f_pas_PutToUses("l3Base")\
 [%f] pas_PutToUses %( 'l3Base' )% 
//	%f_pas_PutToUses("vcmBase")\
 [%f] pas_PutToUses %( 'vcmBase' )% 
//	%f_pas_PutToUses("StdRes")
 [%f] pas_PutToUses %( 'StdRes' )% 
//#UC END# *4948EB2601FAfor4A9801640116*
; // pas_ImplUses


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Выводит дополнительные модули необходимые элементу в интерфейсной секции
//%f _pas_IntfUses
: pas_IntfUses OBJECT IN %S
//#UC START# *4948F2EE0334for4A9801640116*
//	%S%[inherited]
 inherited
//#UC END# *4948F2EE0334for4A9801640116*
; // pas_IntfUses


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Выводит тело метода
// 
// Modification = get|set|area|areareaf|o|r|f
//%f _pas_MethodBodyPrim
: pas_MethodBodyPrim OBJECT IN %S
// параметры: Implementator: void = %1, Modification: void = %2, RealizeType: a-string = %3, aOverrider: MDAClass = %4
//#UC START# *494BB3A201A2for4A9801640116*
//	[{%2N=callgate}{\
 if ( ( %2 |N ) %== 'callgate' ) then
 begin
//	\nbegin
  #13#10'begin'
//	[{%Cx=true|%TN!=void} with (aParams.Data As I%f_N(%P)_%f_N(%S)_Params) do\n ]\
  if ( ( %C |x ) %==  true OR 
    ( ( %T |N ) %!= 'void'  ) ) then
  begin
   ' with (aParams.Data As I'
   [%f] N %( %P )% '_'
   [%f] N %( %S )% '_Params) do'#13#10' ' 
  end // if
//	 [{%TN!=void}ResultValue := ]%S%f_pas_MethodName("exec")[(<{, }%f_cut_prefix(%f_N(%C),a)>)];
  ' '
  if ( ( %T |N ) %!= 'void' ) then
  begin
   'ResultValue := ' 
  end // if
  %S %f pas_MethodName %( 'exec' )% if NOT-EMPTY
  begin
   '('
   INTEGER VAR l_Counter l_Counter := 0
   for %S%C
   begin
    OBJECT IN %C
    if true then
    begin
     if ( l_Counter >0 ) then ( ', ' )
     [%f] cut_prefix %( [%f] N %( %C )% %, 'a' )% 
     ++! l_Counter
    end // if
   end // for C
   ')' 
  end // if
  NOP
  ';'
//	end;\
  'end;'
//	]
 end // if
 else
 begin
//	%S%[inherited]f_pas_MethodBodyPrim(%1,%2)\
  call-inherited pas_MethodBodyPrim %( %1 %, %2 )%
//	}\
 end // else
//#UC END# *494BB3A201A2for4A9801640116*
; // pas_MethodBodyPrim


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// выводит реализацию метода
// 
// RealizeType = o|r|f
//%f _pas_MethodImplementation
: pas_MethodImplementation OBJECT IN %S
// параметры: Implementator: void = %1, RealizeType: void = %2, Modification: void = %3, aOverrider: MDAClass = %4
//#UC START# *494BEC7C03E5for4A9801640116*
//	%S%[inherited]f_pas_MethodImplementation(%1,%2,%3)\
 call-inherited pas_MethodImplementation %( %1 %, %2 %, %3 )%
//	[{%2N!=o}\
 if ( ( %2 |N ) %!= 'o' ) then
 begin
//	%S%f_pas_DoMethodImplementation(%1,%2,"callgate")\
  %S %f pas_DoMethodImplementation %( %1 %, %2 %, 'callgate' )% 
//	]
 end // if
//#UC END# *494BEC7C03E5for4A9801640116*
; // pas_MethodImplementation


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// выводит интерфейс метода
// 
// RealizeType = o|r|f
//%f _pas_MethodInterface
: pas_MethodInterface OBJECT IN %S
// параметры: Implementator: void = %1, RealizeType: void = %2, Modification: void = %3, aOverrider: MDAClass = %4
//#UC START# *494BEC6A038Afor4A9801640116*
//	%S%[inherited]f_pas_MethodInterface(%1,%2,%3)\
 call-inherited pas_MethodInterface %( %1 %, %2 %, %3 )%
//	[{%2N!=o}\
 if ( ( %2 |N ) %!= 'o' ) then
 begin
//	\n%S%f_pas_DoMethodInterface(%1,%2,"callgate")\
  #13#10
  %S %f pas_DoMethodInterface %( %1 %, %2 %, 'callgate' )% 
//	]
 end // if
//#UC END# *494BEC6A038Afor4A9801640116*
; // pas_MethodInterface


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Выводит имя метода
//%f _pas_MethodName
: pas_MethodName OBJECT IN %S
// параметры: Modification: a-string = %1
//#UC START# *494BD6C80075for4A9801640116*
//	%S%[inherited]f_pas_MethodName(%1)
 call-inherited pas_MethodName %( %1 )%
//#UC END# *494BD6C80075for4A9801640116*
; // pas_MethodName


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Параметры операции
//%f _pas_Params
: pas_Params OBJECT IN %S
// параметры: Modification: void = %1
//#UC START# *494BDCF3030Efor4A9801640116*
//	[{%1N=callgate}{\
 if ( ( %1 |N ) %== 'callgate' ) then
 begin
//	const aParams: IvcmExecuteParams\
  'const aParams: IvcmExecuteParams'
//	]
 end // if
 else
 begin
//	[{%1N=exec}{\
  if ( ( %1 |N ) %== 'exec' ) then
  begin
//	%S%[inherited]f_pas_Params("")\
   call-inherited pas_Params %( '' )%
//	]\
  end // if
  else
  begin
//	%S%[inherited]f_pas_Params(%1)\
   call-inherited pas_Params %( %1 )%
//	}\
  end // else
//	}\
 end // else
//#UC END# *494BDCF3030Efor4A9801640116*
; // pas_Params


// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Имя типа результата функции
//%f _pas_ResultTypeName
: pas_ResultTypeName OBJECT IN %S
// параметры: Modification: void = %1
//#UC START# *494BDD190361for4A9801640116*
//	[{%1N=exec}{\
 if ( ( %1 |N ) %== 'exec' ) then
 begin
//	%S%[inherited]f_pas_ResultTypeName("")\
  call-inherited pas_ResultTypeName %( '' )%
//	]
 end // if
 else
 begin
//	%S%[inherited]f_pas_ResultTypeName(%1)\
  call-inherited pas_ResultTypeName %( %1 )%
//	}\
 end // else
//#UC END# *494BDD190361for4A9801640116*
; // pas_ResultTypeName


// перекрытие базового стереотипа VCMOperationPrim::Class
//%f _IsInternalVCMOperation
: IsInternalVCMOperation OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4A96B425021Afor4A9801640116*
//	true
 true
//#UC END# *4A96B425021Afor4A9801640116*
; // IsInternalVCMOperation


// перекрытие базового стереотипа VCMOperationPrim::Class
// Нужен ли код операции
//%f _NeedsOpCode
: NeedsOpCode OBJECT IN %S
// возвращаемый результат: boolean
//#UC START# *4C80E64501B5for4A9801640116*
//	true
 true
//#UC END# *4C80E64501B5for4A9801640116*
; // NeedsOpCode


// Вложенные стереотипы
//: VCMFacet::Class::InternalOperation::Operation::Parameter
end. // :: <<VCMFacet>> <<InternalOperation>> ;

implementation @ :: <<VCMFacet>> <<InternalOperation>> Parameter ;
//= Ifdef::MDAGenerator
//= Delphi интерфейсы и реализация::MDAGenerator

// Параметры стереотипа
//Y code_param.gif
//L code_param

// Функции стереотипа
//%f _st_space_key
: st_space_key OBJECT IN %S
//	SHD
 'SHD'

//%f _wiki_up_print
; // st_space_key

: wiki_up_print OBJECT IN %S
//	%S%[Delphi интерфейсы и реализация::MDAGenerator]f_wiki_up_print()
 call-inherited:: 'Delphi интерфейсы и реализация' wiki_up_print %( )%




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

; // wiki_up_print

end. // :: <<VCMFacet>> <<InternalOperation>> Parameter ;

