////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/VCMTemplates/VCMViewImplementationLayer/VCMForms/UserType.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$ForDelphi::VCMTemplates::VCMViewImplementationLayer::VCMForms::UserType
//
// Пользовательский тип формы
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

: UserType::Class
? Пользовательский тип формы
> Constants::Class
> SimpleClass::Class
> ScriptKeyword::Class
> LocalConst::Class

= UsesContainer::Class
= UserTypeIDHolder::Class
= CanCloseHolder::Class
= Delphi интерфейсы и реализация::MDAGenerator
= WikiImplClass::Class

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры стереотипа
v +
/ - типы видимости
a f
/ - тип абстракции
Y code_vcm_usertype.gif
L code_vcm_usertype
// Параметры визуализации
$ C 152,251,152
$ l 0,147,0
$ f 0,147,0

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Пользовательские свойства

p VisibleToUser:b=true ? Видим пользователю
p ImageIndex:s=-1 ? 
p SettingsCaption:s ? 
p Weight:s=-1 ? 
p NeedOnQueryMaximized:b=false ? Нужен ли обработчик OnQueryMaximized
p NeedOnQueryOpen:b=false ? Нужен ли обработчик OnQueryOpen
p NeedOnQueryClose:b=false ? Нужен ли обработчик OnQueryClose
p CanHaveToolbars:tribool=undefined ? 

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

%f _st_space_key
	SHD

%f _wiki_up_print
	%S%[Delphi интерфейсы и реализация::MDAGenerator]f_wiki_up_print()[{"%S{VisibleToUser}"!="%S{!VisibleToUser}"}%f_up_prefix(%S) *VisibleToUser* = *%S{VisibleToUser}* - Видим пользователю
	][{"%S{ImageIndex}"!="%S{!ImageIndex}"}%f_up_prefix(%S) *ImageIndex* = *%S{ImageIndex}*
	][{"%S{SettingsCaption}"!="%S{!SettingsCaption}"}%f_up_prefix(%S) *SettingsCaption* = *%S{SettingsCaption}*
	][{"%S{Weight}"!="%S{!Weight}"}%f_up_prefix(%S) *Weight* = *%S{Weight}*
	][{"%S{NeedOnQueryMaximized}"!="%S{!NeedOnQueryMaximized}"}%f_up_prefix(%S) *NeedOnQueryMaximized* = *%S{NeedOnQueryMaximized}* - Нужен ли обработчик OnQueryMaximized
	][{"%S{NeedOnQueryOpen}"!="%S{!NeedOnQueryOpen}"}%f_up_prefix(%S) *NeedOnQueryOpen* = *%S{NeedOnQueryOpen}* - Нужен ли обработчик OnQueryOpen
	][{"%S{NeedOnQueryClose}"!="%S{!NeedOnQueryClose}"}%f_up_prefix(%S) *NeedOnQueryClose* = *%S{NeedOnQueryClose}* - Нужен ли обработчик OnQueryClose
	][{"%S{CanClose}"!="%S{!CanClose}"}%f_up_prefix(%S) *CanClose* = *%S{CanClose}* - Можно ли закрывать формы данного типа
	][{"%S{CanHaveToolbars}"!="%S{!CanHaveToolbars}"}%f_up_prefix(%S) *CanHaveToolbars* = *%S{CanHaveToolbars}*
	]

// Является ли UserType'ом
%f _IsUserType
// возвращаемый результат: boolean
//#UC START# *4B0421B502D4for4B0402290215*
	true
//#UC END# *4B0421B502D4for4B0402290215*

%f _PutToMakeControls
//#UC START# *4B0423CE01F3for4B0402290215*
	\n with AddUsertype(%SNName,
	  str_%SNCaption,
	  [{"%S{SettingsCaption}"!=""}{str_%SNCaption}str_%SNSettingsCaption],
	  %S{VisibleToUser},
	  %S{ImageIndex},
	  %S{Weight},
	  [{}{''}<{}{%CN=UseToolbarOfUserTypeName}%C%TNName>],
	  [{%S{NeedOnQueryMaximized}=true}{nil}%f_to_borland(%SNQueryMaximized)],
	  [{%S{NeedOnQueryOpen}=true}{nil}%f_to_borland(%SNQueryOpen)],
	  [{%S{NeedOnQueryClose}=true}{nil}%f_to_borland(%SNQueryClose)],
	  \
	[{%S{CanClose}=undefined}{\
	[{%S{CanClose}=true}{\
	vcm_ccDisable\
	}\
	vcm_ccEnable\
	]\
	}\
	vcm_ccNone\
	]\
	) do
	 begin
	[{%S{CanHaveToolbars}=false}  CanHaveToolbars := false;\n]\
	 end;//with AddUsertype(%SNName
//#UC END# *4B0423CE01F3for4B0402290215*

%f _NeedPutToMakeControls
// возвращаемый результат: boolean
//#UC START# *4B0423E502D2for4B0402290215*
	true
//#UC END# *4B0423E502D2for4B0402290215*

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа UserTypeIDHolder::Class
// Идентификатор пользовательского типа
%f _UserTypeID
// возвращаемый результат: long
//#UC START# *4BD70B950302for4B0402290215*
@ %SU
//	[{%Gx=true}{0}%f_evaluate(%G%f_UserTypeID()+1)]
	%f_N(%S)
//#UC END# *4BD70B950302for4B0402290215*

// реализация абстрактного стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
%t _constraint
//#UC START# *4704C0E30186for4B0402290215*
c          {}
r {""=""}: {}
//#UC END# *4704C0E30186for4B0402290215*

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Определяет, что элемент производит файл (Unit)
%f _IsUnitFileProducer
//#UC START# *4947EC0F0380for4B0402290215*
	true
//#UC END# *4947EC0F0380for4B0402290215*

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Имя модуля в котором содержится элемент
%f _pas_UnitName
//#UC START# *4948065C01DFfor4B0402290215*
	%PN_%SN_UserType
//#UC END# *4948065C01DFfor4B0402290215*

// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Реализация на Delphi(.pas)
+ impl.pas
R  
//#UC START# *470F15B800CBfor4B0402290215*
	<{}{%CV!=PublicAccess&%CC=Class}%CX>\
	[{<{}{%CV!=PublicAccess&%CS!=ini&%CS!=fini&%CC=Operation}{+}%CX>!=0}\
	<{}{%CV!=PublicAccess&%CS!=ini&%CS!=fini&%CC=Operation}{+}\
	%f_pas_MethodSigImplementation(%C,%S) forward;>\
	]\
	<{}{%CV!=PublicAccess&%CS!=ini&%CS!=fini&%CC!=Class}%CX>\
	<{}{%CV=PublicAccess}%CX>\
//	<{}{%CS=ini}%CX>\
//	<{}{%CS=fini}%CX>
	
//#UC END# *470F15B800CBfor4B0402290215*

// реализация абстрактного стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Родные Delphi интерфейсы (.pas)
+ intf.pas
R  
//#UC START# *470F1571031Cfor4B0402290215*
O [{%S{finished}!=true}NOT_FINISHED_]%f_pas_UnitFileName(%S)
P
	[{"%SO"!=""}\
	%S%f_pas_OutLikeUtilityPack()\
	]
//#UC END# *470F1571031Cfor4B0402290215*

// перекрытие базового стереотипа ModelBuilding::MDAGenerator
// генератор построения виртуальных элементов модели - запускается до генерации конкретных
// артефактов
+ spell
//#UC START# *4A41A13D03D5for4B0402290215*
	[{%S{NeedOnQueryMaximized}=true}\
	%P%f_add_operation(%SU_QueryMaximized,,%SNQueryMaximized (aSender : 4807745602C8),Op_Instance)\
	%{Op_Instance}%f_set_documentation(Обработчик события %SN.OnQueryMaximized)\
	[{%P#f_IsMixIn()!=true}{\
	%{Op_Instance}%f_set_abstraction_type(abstract)\
	}\
	%{Op_Instance}%f_set_abstraction_type(final)\
	]\
	%{Op_Instance}%f_set_visibility_type(ProtectedAccess)\
	]\
	[{%S{NeedOnQueryOpen}=true}\
	%P%f_add_operation(%SU_QueryOpen,,%SNQueryOpen (aSender : 4807745602C8),Op_Instance)\
	%{Op_Instance}%f_set_documentation(Обработчик события %SN.OnQueryOpen)\
	[{%P#f_IsMixIn()!=true}{\
	%{Op_Instance}%f_set_abstraction_type(abstract)\
	}\
	%{Op_Instance}%f_set_abstraction_type(final)\
	]\
	%{Op_Instance}%f_set_visibility_type(ProtectedAccess)\
	]\
	[{%S{NeedOnQueryClose}=true}\
	%P%f_add_operation(%SU_QueryClose,,%SNQueryClose (aSender : 4807745602C8),Op_Instance)\
	%{Op_Instance}%f_set_documentation(Обработчик события %SN.OnQueryClose)\
	[{%P#f_IsMixIn()!=true}{\
	%{Op_Instance}%f_set_abstraction_type(abstract)\
	}\
	%{Op_Instance}%f_set_abstraction_type(final)\
	]\
	%{Op_Instance}%f_set_visibility_type(ProtectedAccess)\
	]
//#UC END# *4A41A13D03D5for4B0402290215*

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Вложенные стереотипы

: UserType::Class::link::Attribute
= Документация::MDAGenerator
= Delphi интерфейсы и реализация::MDAGenerator

// Параметры стереотипа
v #
/ - типы видимости
a f
/ - тип абстракции
Y code_property.gif
L code_property
l l
/ - возможные типы связи атрибута

// Генераторы
// Родные Delphi интерфейсы (.pas)
+ intf.pas
R  
//#UC START# *470F1571031Cfor4B040B8B0071*
//#UC END# *470F1571031Cfor4B040B8B0071*

// Реализация на Delphi(.pas)
+ impl.pas
R  
//#UC START# *470F15B800CBfor4B040B8B0071*
//#UC END# *470F15B800CBfor4B040B8B0071*

// Генерация модели в MDKnow
+ wiki
//#UC START# *46E6D4BB0339for4B040B8B0071*
//#UC END# *46E6D4BB0339for4B040B8B0071*

// Функции стереотипа
%f _st_space_key
	SHD


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// реализация абстрактного стереотипа Документация::MDAGenerator
// проверка ограничений накладываемых на элемент
%t _constraint
//#UC START# *4704C0E30186for4B040B8B0071*
c          {}
r {""=""}: {}
//#UC END# *4704C0E30186for4B040B8B0071*

// реализация абстрактного стереотипа Документация::MDAGenerator
// выводит описание элемента (операция, атрибут) в wiki
%f _wiki_child_kind
//#UC START# *4705CBD6003Efor4B040B8B0071*
	attr
//#UC END# *4705CBD6003Efor4B040B8B0071*

// реализация абстрактного стереотипа Документация::MDAGenerator
// вывод описание авто-генерируемых методов в wiki
%f _wiki_up_add_gen
//#UC START# *470484D50138for4B040B8B0071*
//#UC END# *470484D50138for4B040B8B0071*


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

