////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/MDProcess/VCMTemplates/VCMViewInterfacesLayer/FormOperations/VCMFacet.tpi"
// Генерация мета-шаблонов
// Generated from UML model, root element: <<MDAClass::Class>> MDProcess$ForDelphi::VCMTemplates::VCMViewInterfacesLayer::FormOperations::VCMFacet
//
// VCM "Facet"
// ---
// Набор операций, который надо заменить на Facet
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

: VCMFacet::Class
? VCM "Facet"
? Набор операций, который надо заменить на Facet
= VCMOperations::Class

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Параметры стереотипа
// Параметры визуализации
$ C 64,171,236
$ l 48,5,192
$ f 48,5,192

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Функции стереотипа

%f _st_space_key
	SHD


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Вложенные стереотипы

: VCMFacet::Class::InternalOperation::Operation
? Внутренняя операция
= VCMOperationPrim::Class

// Параметры стереотипа
T 
/ - может не иметь "цели" (типа/результата)

// Пользовательские свойства
p Needs Broadcast:b=false ? Нужен ли метод Broadcast
p is query:b=true ? Определает, что операция является запросом к агрегации о возможности сделать что-то

// Функции стереотипа
%f _st_space_key
	SHD

%f _wiki_up_print
	%S#[inherited][{"%S{is query}"!="%S{!is query}"}%f_up_prefix(%S) *is query* = *%S{is query}* - Определает, что операция является запросом к агрегации о возможности сделать что-то
	][{"%S{Needs Broadcast}"!="%S{!Needs Broadcast}"}%f_up_prefix(%S) *Needs Broadcast* = *%S{Needs Broadcast}* - Нужен ли метод Broadcast
	]


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Унаследованная реализация

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Добавляет файлы необходимые элементу с точки зрения метамодели
%f _pas_ImplUses
//#UC START# *4948EB2601FAfor4A9801640116*
	%S%[inherited]\
	%f_pas_PutToUses("l3Base")\
	%f_pas_PutToUses("vcmBase")\
	%f_pas_PutToUses("StdRes")
//#UC END# *4948EB2601FAfor4A9801640116*

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Выводит дополнительные модули необходимые элементу в интерфейсной секции
%f _pas_IntfUses
//#UC START# *4948F2EE0334for4A9801640116*
	%S%[inherited]
//#UC END# *4948F2EE0334for4A9801640116*

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Выводит тело метода
// 
// Modification = get|set|area|areareaf|o|r|f
%f _pas_MethodBodyPrim
// параметры: Implementator: void = %1, Modification: void = %2, RealizeType: a-string = %3, aOverrider: MDAClass = %4
//#UC START# *494BB3A201A2for4A9801640116*
	[{%2N=callgate}{\
	%S%[inherited]f_pas_MethodBodyPrim(%1,%2)\
	}\
	\nbegin
	[{%Cx=true|%TN!=void} with (aParams.Data As I%f_N(%P)_%f_N(%S)_Params) do\n ]\
	 [{%TN!=void}ResultValue := ]%S%f_pas_MethodName("exec")[(<{, }%f_cut_prefix(%f_N(%C),a)>)];
	end;\
	]
//#UC END# *494BB3A201A2for4A9801640116*

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// выводит реализацию метода
// 
// RealizeType = o|r|f
%f _pas_MethodImplementation
// параметры: Implementator: void = %1, RealizeType: void = %2, Modification: void = %3, aOverrider: MDAClass = %4
//#UC START# *494BEC7C03E5for4A9801640116*
	%S%[inherited]f_pas_MethodImplementation(%1,%2,%3)\
	[{%2N!=o}\
	%S%f_pas_DoMethodImplementation(%1,%2,"callgate")\
	]
//#UC END# *494BEC7C03E5for4A9801640116*

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// выводит интерфейс метода
// 
// RealizeType = o|r|f
%f _pas_MethodInterface
// параметры: Implementator: void = %1, RealizeType: void = %2, Modification: void = %3, aOverrider: MDAClass = %4
//#UC START# *494BEC6A038Afor4A9801640116*
	%S%[inherited]f_pas_MethodInterface(%1,%2,%3)\
	[{%2N!=o}\
	\n%S%f_pas_DoMethodInterface(%1,%2,"callgate")\
	]
//#UC END# *494BEC6A038Afor4A9801640116*

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Выводит имя метода
%f _pas_MethodName
// параметры: Modification: a-string = %1
//#UC START# *494BD6C80075for4A9801640116*
	%S%[inherited]f_pas_MethodName(%1)
//#UC END# *494BD6C80075for4A9801640116*

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Параметры операции
%f _pas_Params
// параметры: Modification: void = %1
//#UC START# *494BDCF3030Efor4A9801640116*
	[{%1N=callgate}{\
	[{%1N=exec}{\
	%S%[inherited]f_pas_Params(%1)\
	}\
	%S%[inherited]f_pas_Params("")\
	]\
	}\
	const aParams: IvcmExecuteParams\
	]
//#UC END# *494BDCF3030Efor4A9801640116*

// перекрытие базового стереотипа Delphi интерфейсы и реализация::MDAGenerator
// Имя типа результата функции
%f _pas_ResultTypeName
// параметры: Modification: void = %1
//#UC START# *494BDD190361for4A9801640116*
	[{%1N=exec}{\
	%S%[inherited]f_pas_ResultTypeName(%1)\
	}\
	%S%[inherited]f_pas_ResultTypeName("")\
	]
//#UC END# *494BDD190361for4A9801640116*

// перекрытие базового стереотипа VCMOperationPrim::Class
%f _IsInternalVCMOperation
// возвращаемый результат: boolean
//#UC START# *4A96B425021Afor4A9801640116*
	true
//#UC END# *4A96B425021Afor4A9801640116*

// перекрытие базового стереотипа VCMOperationPrim::Class
// Нужен ли код операции
%f _NeedsOpCode
// возвращаемый результат: boolean
//#UC START# *4C80E64501B5for4A9801640116*
	true
//#UC END# *4C80E64501B5for4A9801640116*

// перекрытие базового стереотипа VCMOperationPrim::Class
%f _Spell
//#UC START# *4AE58E3801A3for4A9801640116*
	%S%[inherited]\
	[{%Cx=true|%TN!=void}\

	%P%P%f_add_class(%SU_Params_Facet,Facet,I%f_N(%P)_%f_N(%S)_Params,Params_Facet_Instance)\
	%{Params_Facet_Instance}%f_set_documentation(Параметры для операции %f_N(%P).%f_N(%S))\
	%{Params_Facet_Instance}%f_set_up(ifndef,[{}{%P{ifndef}}%S{ifndef}])\

	[{%Cx=true}\
	<{}{}{%C}\
	%{Params_Facet_Instance}%f_add_attribute(%CU_Param,\
	[{%CS=in}{\
	[{%CS=out}{\
	property}\
//	writeonly\
	property\
	]}\
	readonly\
	],\
	%f_cut_prefix(%f_N(%C),a):%C%TU,Param_Instance)\
	>\
	]\

	[{%TN!=void}%{Params_Facet_Instance}%f_add_attribute(%{Params_Facet_Instance}U_Result,\
	property,ResultValue:%TU,Param_Instance)]\

	%P%P%f_add_class(%SU_Params_Class,SimpleClass,T%f_N(%P)_%f_N(%S)_Params,Params_Class_Instance)\
	%{Params_Class_Instance}%f_set_visibility_type(PrivateAccess)\
	%{Params_Class_Instance}%f_set_documentation(Реализация %{Params_Facet_Instance}N)\
	%{Params_Class_Instance}%f_set_up(ifndef,[{}{%P{ifndef}}%S{ifndef}])\
	[{"%{Tl3CProtoObject}N"=""}%f_find_element(Tl3CProtoObject,Tl3CProtoObject)]\
	%P%P%f_make_accessable(%{Tl3CProtoObject}%PU)\
	%f_addCDep(%P%P,%{Tl3CProtoObject})\
	%f_addG(%{Params_Class_Instance},%{Tl3CProtoObject})\
	%f_addR(%{Params_Class_Instance},%{Params_Facet_Instance})\

	[{%Cx=true}\
	<{}{}{%C}\
	%{Params_Class_Instance}%f_add_attribute(%CU_ParamField,\
	,\
	f_%f_cut_prefix(%f_N(%C),a):%C%TU,Param_Instance)\
	%{Param_Instance}%f_set_visibility_type(PrivateAccess)\
	%{Param_Instance}%f_set_link_type(ref)\
	>\
	]\

	[{%TN!=void}%{Params_Class_Instance}%f_add_attribute(%{Params_Class_Instance}U_Result,\
	,f_ResultValue:%TU,Param_Instance)\
	%{Param_Instance}%f_set_visibility_type(PrivateAccess)\
	%{Param_Instance}%f_set_link_type(ref)\
	]\
	%{Params_Class_Instance}%f_add_operation(%{Params_Class_Instance}U_Create,ctor,Create (<{, }%CN:%C%TU>),Op_Instance)\
	%{Op_Instance}%f_set_documentation(Конструктор %{Params_Class_Instance}N)\
	%{Op_Instance}%f_set_abstraction_type(final)\
	%{Op_Instance}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{Op_Instance},%{Params_Class_Instance})_var, {-})\
	%{Op_Instance}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{Op_Instance},%{Params_Class_Instance})_impl, inherited Create;\
	<\n f_%f_cut_prefix(%f_N(%C),a) := %f_N(%C);>)\
	%{Params_Class_Instance}%f_add_operation(%{Params_Class_Instance}U_Make,factory,Make (<{, }%CN:%C%TU>),Op_Instance)\
	%{Op_Instance}%f_set_documentation(Фабрика %{Params_Class_Instance}N)\
	%{Params_Facet_Instance}<{}{}{%C}\
	%C%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%C,%{Params_Class_Instance})get_var, {-})\
	%C%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%C,%{Params_Class_Instance})set_var, {-})\
	%C%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%C,%{Params_Class_Instance})get_impl, Result := f_%f_cut_prefix(%f_N(%C),a);)\
	%C%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%C,%{Params_Class_Instance})set_impl, f_%f_cut_prefix(%f_N(%C),a) := aValue;)\
	>\
	]

	[{"%{IvcmEntity}N"=""}%f_find_element(IvcmEntity,IvcmEntity)]\
	%P%P%f_make_accessable(%{IvcmEntity}%PU)\
	%f_addCDep(%P%P,%{IvcmEntity})\
	[{"%{IvcmEntityForm}N"=""}%f_find_element(4914746C019E,IvcmEntityForm)]\
	%P%P%f_make_accessable(%{IvcmEntityForm}%PU)\
	%f_addCDep(%P%P,%{IvcmEntityForm})\
	[{"%{IvcmAggregate}N"=""}%f_find_element(IvcmAggregate,IvcmAggregate)]\
	%P%P%f_make_accessable(%{IvcmAggregate}%PU)\
	%f_addCDep(%P%P,%{IvcmAggregate})\
	[{"%{IvcmContainer}N"=""}%f_find_element(IvcmContainer,IvcmContainer)]\
	%P%P%f_make_accessable(%{IvcmContainer}%PU)\
	%f_addCDep(%P%P,%{IvcmContainer})\

	%P%P%f_add_class(%SU_Op_Class,SimpleClass,Op_%f_N(%P)_%f_N(%S),Op_Class_Instance)\
	%{Op_Class_Instance}%f_set_documentation(Класс для вызова операции %f_N(%P).%f_N(%S))\
	%{Op_Class_Instance}%f_set_up(ifndef,[{}{%P{ifndef}}%S{ifndef}])\

	%{Op_Class_Instance}%f_add_operation(%{Op_Class_Instance}U_Call_Ent,static,Call (in aTarget:%{IvcmEntity}U<, %CN:%C%TU[ = %C%VN]>)\
	: [{%TN!=void}{boolean}%TU]\
	,Op_Instance)\
	%{Op_Instance}%f_set_documentation(Вызов операции %f_N(%P).%f_N(%S) у сущности)\
	%{Op_Instance}%f_set_abstraction_type(final)\
	%{Op_Instance}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{Op_Instance},%{Op_Class_Instance})_var,var\n l_Params : IvcmExecuteParams;)\
	%{Op_Instance}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{Op_Instance},%{Op_Class_Instance})_impl,\
	 l3FillChar(Result, SizeOf(Result));
	 if (aTarget \<\> nil) then
	 begin
	  l_Params := [{%Cx=true|%TN!=void}{vcmParams}TvcmExecuteParams.MakeForInternal(%f_pas_TypeName(%{Params_Class_Instance}).Make[(<{,}%f_N(%C)>)])];
	  aTarget.Operation(TdmStdRes.opcode_%f_N(%P)_%f_N(%S), l_Params);
	  with l_Params do
	  begin
	   if Done then
	   begin
	    [{%TN!=void}{\
	Result := true}\
	Result := %f_pas_TypeName(%{Params_Facet_Instance})(Data).ResultValue\
	];
	   end;//Done
	  end;//with l_Params
	 end;//aTarget \<\> nil)

	%{Op_Class_Instance}%f_add_operation(%{Op_Class_Instance}U_Call_Agg,static,Call (in aTarget:%{IvcmAggregate}U<, %CN:%C%TU[ = %C%VN]>)\
	: [{%TN!=void}{boolean}%TU]\
	,Op_Instance)\
	%{Op_Instance}%f_set_documentation(Вызов операции %f_N(%P).%f_N(%S) у агрегации)\
	%{Op_Instance}%f_set_abstraction_type(final)\
	%{Op_Instance}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{Op_Instance},%{Op_Class_Instance})_var,var\n l_Params : IvcmExecuteParams;)\
	%{Op_Instance}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{Op_Instance},%{Op_Class_Instance})_impl,\
	 l3FillChar(Result, SizeOf(Result));
	 if (aTarget \<\> nil) then
	 begin
	  l_Params := [{%Cx=true|%TN!=void}{vcmParams}TvcmExecuteParams.MakeForInternal(%f_pas_TypeName(%{Params_Class_Instance}).Make[(<{,}%f_N(%C)>)])];
	  aTarget.Operation(TdmStdRes.opcode_%f_N(%P)_%f_N(%S), l_Params);
	  with l_Params do
	  begin
	   if Done then
	   begin
	    [{%TN!=void}{\
	Result := true}\
	Result := %f_pas_TypeName(%{Params_Facet_Instance})(Data).ResultValue\
	];
	   end;//Done
	  end;//with l_Params
	 end;//aTarget \<\> nil)

	%{Op_Class_Instance}%f_add_operation(%{Op_Class_Instance}U_Call_EF,static,Call (in aTarget:%{IvcmEntityForm}U<, %CN:%C%TU[ = %C%VN]>)\
	: [{%TN!=void}{boolean}%TU]\
	,Op_Instance)\
	%{Op_Instance}%f_set_documentation(Вызов операции %f_N(%P).%f_N(%S) у формы)\
	%{Op_Instance}%f_set_abstraction_type(final)\
	%{Op_Instance}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{Op_Instance},%{Op_Class_Instance})_var, {-})\
	%{Op_Instance}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{Op_Instance},%{Op_Class_Instance})_impl,\
	 l3FillChar(Result, SizeOf(Result));
	 if (aTarget \<\> nil) then
	  Result := Call(aTarget.Entity<, %CN>);)

	%{Op_Class_Instance}%f_add_operation(%{Op_Class_Instance}U_Call_Cont,static,Call (in aTarget:%{IvcmContainer}U<, %CN:%C%TU[ = %C%VN]>)\
	: [{%TN!=void}{boolean}%TU]\
	,Op_Instance)\
	%{Op_Instance}%f_set_documentation(Вызов операции %f_N(%P).%f_N(%S) у контейнера)\
	%{Op_Instance}%f_set_abstraction_type(final)\
	%{Op_Instance}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{Op_Instance},%{Op_Class_Instance})_var, {-})\
	%{Op_Instance}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{Op_Instance},%{Op_Class_Instance})_impl,\
	 l3FillChar(Result, SizeOf(Result));
	 if (aTarget \<\> nil) then
	  Result := Call(aTarget.AsForm<, %CN>);)

	[{%TN=void&%S{Needs Broadcast}=true}\
	%{Op_Class_Instance}%f_add_operation(%{Op_Class_Instance}U_Broadcast,static,Broadcast (<{, }%CN:%C%TU[ = %C%VN]>)\
	: void\
//	[{%TN!=void}{boolean}%TU]\
	,Op_Instance)\
	%{Op_Instance}%f_set_documentation(Вызов операции %f_N(%P).%f_N(%S) у всех зарегистрированных сущностей)\
	%{Op_Instance}%f_set_abstraction_type(final)\
	%{Op_Instance}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{Op_Instance},%{Op_Class_Instance})_var,var\n l_Params : IvcmExecuteParams;)\
	%{Op_Instance}%f_set_uc_content(intf.pas,_%f_pas_MethodOwnerID(%{Op_Instance},%{Op_Class_Instance})_impl,\
//	 l3FillChar(Result, SizeOf(Result));
	 if (vcmDispatcher \<\> nil) then
	 begin
	  l_Params := [{%Cx=true|%TN!=void}{vcmParams}TvcmExecuteParams.MakeForInternal(%f_pas_TypeName(%{Params_Class_Instance}).Make[(<{,}%f_N(%C)>)])];
	  vcmDispatcher.EntityOperationBroadcast(TdmStdRes.opcode_%f_N(%P)_%f_N(%S), l_Params);
//	  with l_Params do
//	  begin
//	   if Done then
//	   begin
//	    [{%TN!=void}{\
//	Result := true}\
//	Result := %f_pas_TypeName(%{Params_Facet_Instance})(Data).ResultValue\
//	];
//	   end;//Done
//	  end;//with l_Params
	 end;//vcmDispatcher \<\> nil)\
	]
//#UC END# *4AE58E3801A3for4A9801640116*

// Вложенные стереотипы
: VCMFacet::Class::InternalOperation::Operation::Parameter
= Ifdef::MDAGenerator
= Delphi интерфейсы и реализация::MDAGenerator

// Параметры стереотипа
Y code_param.gif
L code_param

// Функции стереотипа
%f _st_space_key
	SHD

%f _wiki_up_print
	%S%[Delphi интерфейсы и реализация::MDAGenerator]f_wiki_up_print()




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

