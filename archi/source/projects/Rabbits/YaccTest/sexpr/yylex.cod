
(* lexical analyzer template (TP Lex V3.0), V1.0 3-2-91 AG *)

(* global definitions: *)
%%

function yylex(aLex: Tl3Lex; var yylval : YYSType) : Integer;

procedure yyaction ( yyruleno : Integer );
  (* local definitions: *)
%%
begin
  (* actions: *)
 with aLex do 
  case yyruleno of
%%
  end;
end(*yyaction*);

(* DFA table: *)
%%

var yyn : Integer;

begin
 with aLex do begin

  repeat

   (* initialize: *)

   yynew;

   repeat

    (* mark positions and matches: *)

    for yyn := yykl[yystate] to     yykh[yystate] do yymark(yyk[yyn]);
    for yyn := yymh[yystate] downto yyml[yystate] do yymatch(yym[yyn]);

    if yytl[yystate]>yyth[yystate] then break; (* dead state *)

    (* get next character: *)

    yyscan;

    (* determine action: *)

    yyn := yytl[yystate];
    while (yyn<=yyth[yystate]) and not (yyactchar in yyt[yyn].cc) do inc(yyn);
    if yyn>yyth[yystate] then break;
      (* no transition on yyactchar in this state *)

    (* switch to new state: *)

    yystate := yyt[yyn].s;

   until false;

   repeat
   (* execute action: *)

   if yyfind(yyrule) then
     begin
       yyaction(yyrule);
       if yyreject then continue;
     end
   else if not yydefault and yywrap then
     begin
       yyclear;
       return(0);
     end;
    break;
   until false;
   
  until yydone;

  yylex := yyretval;

 end;//with aLex
 
end(*yylex*);

