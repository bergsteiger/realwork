<?xml encoding = "ISO-8859-1"?>

<!--
	uses:
		none
-->

<scriptdef
	name = "ru.garant.extensions.scriptdefs.buildCppTarget"
	language = "javascript"
>
	<attribute name = "cpp.target"/>
	<attribute name = "cpp.target.project.path"/>
	<attribute name = "cpp.target.default.config"/>
	<attribute name = "cpp.target.release.config"/>
	<attribute name = "cpp.target.root.dir"/>

	<![CDATA[
		{
			importClass (
				Packages.java.io.File
			);

			importPackage (
				Packages.org.apache.tools.ant
			);

			importPackage (
				Packages.org.apache.tools.ant.types
			);
		} {
			var a_cppTarget = (
				attributes.get ("cpp.target")
			);

			var a_cppTargetProjectPath = (
				attributes.get ("cpp.target.project.path")
			);

			if (a_cppTargetProjectPath != null) {
				var l_cppTargetProjectPathFile = new File (a_cppTargetProjectPath);
				var l_cppTargetProjectPathPath = l_cppTargetProjectPathFile.getPath ();

				a_cppTargetProjectPath = l_cppTargetProjectPathPath;
			}

			var a_cppTargetDefaultConfig = (
				attributes.get ("cpp.target.default.config")
			);

			var a_cppTargetReleaseConfig = (
				attributes.get ("cpp.target.release.config")
			);

			var a_cppTargetRootDir = (
				attributes.get ("cpp.target.root.dir")
			);

			if (a_cppTargetRootDir != null) {
				var l_cppTargetRootDirFile = new File (a_cppTargetRootDir);
				var l_cppTargetRootDirPath = l_cppTargetRootDirFile.getPath ();

				a_cppTargetRootDir = l_cppTargetRootDirPath;
			}

			var l_cppTargetActiveConfig = (project.getProperty ("enable-cppFinalBuild") != null) ? (a_cppTargetReleaseConfig) : (a_cppTargetDefaultConfig);

			var l_cppTargetFile = new File (a_cppTargetRootDir, a_cppTargetProjectPath);
			var l_cppTargetPath = l_cppTargetFile.getPath ();

			project.log (
				(
					"\t"
					+ "Build solution `"+ l_cppTargetPath+ "`"
					+ " using target `"+ a_cppTarget+ "`"
					+ " ["+ l_cppTargetActiveConfig+ "]"
				)
				, project.MSG_INFO
			);

			var l_cppBuildMaxCyclesCount = project.getProperty ("ru.garant.extensions.properties.cppBuildMaxCyclesCount");

			var l_cppBuildOutput = "";
			var l_cppBuildResult = "0";

			var l_cppBreakCycle = false;

			for (
					var l_cppBuildCycleIndex = 0
					; ((!l_cppBreakCycle) && (l_cppBuildCycleIndex < l_cppBuildMaxCyclesCount))
					; ++l_cppBuildCycleIndex
			) {
				if (l_cppBuildCycleIndex != 0) {
					project.createTask ("sleep").doSleep (1000); // one second

					project.log (
						(
							"\t"
							+ "Build solution is not stable and will be repeated again (lasterror = "+ l_cppBuildResult+ ")"
						)
						, project.MSG_WARN
					);
				}

				{
					var l_execTask = project.createTask ("exec"); {
						l_execTask.setDir (new File (a_cppTargetRootDir));
						l_execTask.setExecutable ("buildconsole.exe");
						l_execTask.setFailIfExecutionFails (true);
						l_execTask.setFailonerror (false);
						l_execTask.setLogError (true);

						l_execTask.setProject (project.createSubProject ());

						l_execTask.setOutputproperty ("cppBuildOutput");
						l_execTask.setResultProperty ("cppBuildResult");

						var l_cppTarget = a_cppTarget;

						var l_execTaskArg = l_execTask.createArg (); {
							l_execTaskArg.setLine (
								"\""+ l_cppTargetPath+ "\""
								+ " /cfg=\""+ l_cppTargetActiveConfig+ "\""
								+ " /prj=\""+ l_cppTarget+ "\""
								+ " /nologo"
								+ " /browseinfo=off"
							);
						}

						l_execTask.reconfigure ();
					}

					l_execTask.execute ();

					l_cppBuildOutput = l_execTask.getProject ().getProperty ("cppBuildOutput");
					l_cppBuildResult = l_execTask.getProject ().getProperty ("cppBuildResult");
				}

				if (!l_cppBuildOutput.isEmpty ()) {
					project.log (
						"\n"
						+ l_cppBuildOutput
					);
				}

				l_cppBreakCycle = (l_cppBuildResult.compareToIgnoreCase ("1") != 0);
			}

			if (l_cppBuildResult.compareToIgnoreCase ("0") != 0) {
				var l_failTask = project.createTask ("fail"); {
					l_failTask.setMessage (
						"\t"
						+ "Too many cpp build operation cycles (count = "
						+ l_cppBuildCycleIndex
						+ ") or build is not complete (lasterror = "
                        + l_cppBuildResult
                        + ")"
					);

					l_failTask.reconfigure ();
				}

				l_failTask.execute ();
			}
		}
	]]>
</scriptdef>
