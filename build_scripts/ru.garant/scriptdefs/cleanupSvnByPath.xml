<?xml encoding = "ISO-8859-1"?>

<!--
	uses:
		none
-->

<scriptdef
	name = "ru.garant.extensions.scriptdefs.cleanupSvnByPath"
	language = "javascript"
>
	<attribute name = "svn.dir"/>

	<![CDATA[
		{
			importClass (
				Packages.java.io.BufferedReader
			);

			importClass (
				Packages.java.io.File
			);

			importClass (
				Packages.java.io.FileReader
			);

			importPackage (
				Packages.org.apache.tools.ant
			);

			importPackage (
				Packages.org.apache.tools.ant.types
			);
		} {
			var a_svnDirectory = (
				attributes.get ("svn.dir")
			);

			if (a_svnDirectory != null) {
				var l_svnDirectoryFile = new File (a_svnDirectory);
				var l_svnDirectoryPath = l_svnDirectoryFile.getPath ();

				a_svnDirectory = l_svnDirectoryPath;
			}

			{
				var l_execTask = project.createTask ("exec"); {
					l_execTask.setDir (new File (a_svnDirectory));
					l_execTask.setExecutable ("svn.exe");
					l_execTask.setFailIfExecutionFails (true);
					l_execTask.setFailonerror (true);
					l_execTask.setLogError (true);
					l_execTask.setOutput (new File ("nul"));

					var l_execTaskArg = l_execTask.createArg (); {
						l_execTaskArg.setLine (
							"revert"
							+ " --recursive"
							+ " --quiet"
							+ " ."
						);
					}

					l_execTask.reconfigure ();
				}

				l_execTask.execute ();
			}

			var l_svnOutputFile = File.createTempFile ("svn", ".log"); {
				l_svnOutputFile.deleteOnExit ();
			}

			{
				var l_execTask = project.createTask ("exec"); {
					l_execTask.setDir (new File (a_svnDirectory));
					l_execTask.setExecutable ("svn.exe");
					l_execTask.setFailIfExecutionFails (true);
					l_execTask.setFailonerror (true);
					l_execTask.setLogError (true);
					l_execTask.setOutput (l_svnOutputFile);

					var l_execTaskArg = l_execTask.createArg (); {
						l_execTaskArg.setLine (
							"status"
							+ " --non-interactive"
							+ " ."
						);
					}

					l_execTask.reconfigure ();
				}

				l_execTask.execute ();
			}

			if (l_svnOutputFile.length () != 0) {
				var l_svnOutputReader = new BufferedReader (new FileReader (new File (l_svnOutputFile))); {
					var l_svnLine = null;

					while (
						(l_svnLine = l_svnOutputReader.readLine ()) != null
					) {
						var l_svnLineStrings = l_svnLine.split (" ", 2);

						if ((l_svnLineStrings.length == 2) && (l_svnLineStrings [0] == "?")) {
							var l_deleteTask = project.createTask ("delete"); {
								var l_unknown = new File (a_svnDirectory, l_svnLineStrings [1].trim ());

								if (l_unknown.isFile ()) {
									l_deleteTask.setFile (l_unknown);
								} else {
									if (l_unknown.isDirectory ()) {
										l_deleteTask.setDir (l_unknown);
									} else {
										var l_failTask = project.createTask ("fail"); {
											l_failTask.setMessage ("Unknown dir/file type for `"+ l_unknown.getPath ()+ "` path");

											l_failTask.reconfigure ();
										}

										l_failTask.execute ();
									}
								}

								l_deleteTask.reconfigure ();
							}

							l_deleteTask.execute ();
						} else {
							if (
								(
									l_svnLineStrings.length == 2
								) && (
									(
										l_svnLineStrings [0] == "A"
									) || (
										l_svnLineStrings [0] == "C"
									) || (
										l_svnLineStrings [0] == "D"
									) || (
										l_svnLineStrings [0] == "I"
									) || (
										l_svnLineStrings [0] == "M"
									) || (
										l_svnLineStrings [0] == "R"
									) || (
										l_svnLineStrings [0] == "X"
									) || (
										l_svnLineStrings [0] == "!"
									) || (
										l_svnLineStrings [0] == "~"
									)
								)
							) {
								project.log (
									(
										"\t\t"
										+ l_svnLine
									)
									, project.MSG_INFO
								);
							} else {
								project.log (
									(
										"\t"
										+ "Cannot split svn line: `"+ l_svnLine+ "`"
									)
									, project.MSG_INFO
								);
							}
						}
					}
				}

				l_svnOutputReader.close ();
			}
		}
	]]>
</scriptdef>
