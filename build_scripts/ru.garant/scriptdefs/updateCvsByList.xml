<?xml encoding = "ISO-8859-1"?>

<!--
	uses:
		ru.garant.extensions.properties.cvsRoot
		ru.garant.extensions.properties.cvsUpdateMaxCyclesCount

		ru.garant.extensions.scriptdefs.cleanupCvsByOutput
-->

<scriptdef
	name = "ru.garant.extensions.scriptdefs.updateCvsByList"
	language = "javascript"
>
	<attribute name = "cvs.dirset.list"/>
	<attribute name = "cvs.root.dir"/>
	<attribute name = "cvs.root"/>

	<![CDATA[
		{
			importClass (
				Packages.java.io.File
			);

			importPackage (
				Packages.org.apache.tools.ant
			);

			importPackage (
				Packages.org.apache.tools.ant.types
			);
		} {
			var a_cvsDirsetList = (
				attributes.get ("cvs.dirset.list")
			);

			var a_cvsRootDir = (
				attributes.get ("cvs.root.dir")
			);

			if (a_cvsRootDir != null) {
				var l_cvsRootDirFile = new File (a_cvsRootDir);
				var l_cvsRootDirPath = l_cvsRootDirFile.getPath ();

				a_cvsRootDir = l_cvsRootDirPath;
			}

			var a_cvsRoot = (
				attributes.get ("cvs.root")
			);

			if ((a_cvsRoot == null) || (a_cvsRoot.isEmpty ())) {
				a_cvsRoot = project.getProperty ("ru.garant.extensions.properties.cvsRoot");
			}

			var l_cvsDirset = project.createDataType ("dirset"); {
				l_cvsDirset.setDir (new File (a_cvsRootDir));
				l_cvsDirset.setIncludes (a_cvsDirsetList);
			}

			var l_cvsDirsetDirectoryScaner = l_cvsDirset.getDirectoryScanner (project);
			var l_cvsDirsetIncludedDirectories = l_cvsDirsetDirectoryScaner.getIncludedDirectories ();

			var l_cvsUpdateMaxCyclesCount = project.getProperty ("ru.garant.extensions.properties.cvsUpdateMaxCyclesCount");

			var l_cvsBreakCycle = false;

			for (
				var l_cvsUpdateCycleIndex = 0
				; (!l_cvsBreakCycle)
				; ++l_cvsUpdateCycleIndex
			) {
				if (l_cvsUpdateCycleIndex >= l_cvsUpdateMaxCyclesCount) {
					var l_failTask = project.createTask ("fail"); {
						l_failTask.setMessage ("Too many cvs update operation cycles (count = "+ l_cvsUpdateCycleIndex+ ")");

						l_failTask.reconfigure ();
					}

					l_failTask.execute ();
				} else {
					if (l_cvsUpdateCycleIndex != 0) {
						project.log (
							(
								"\t"
								+ "Update is not stable and will be repeated again"
							)
							, project.MSG_WARN
						);
					}
				}

				l_cvsBreakCycle = true;

				for (
					var l_cvsDirsetIncludedDirectoriesIndex = 0
					; (l_cvsDirsetIncludedDirectoriesIndex < l_cvsDirsetIncludedDirectories.length)
					; ++l_cvsDirsetIncludedDirectoriesIndex
				) {
					var l_cvsDirectory = l_cvsDirsetDirectoryScaner.getBasedir ()+ l_cvsDirsetIncludedDirectories [l_cvsDirsetIncludedDirectoriesIndex];

					project.log (
						(
							"\t"
							+ "Update cvs catalog `"+ l_cvsDirectory+ "`"
						)
						, project.MSG_INFO
					);

					var l_cvsOutputFile = File.createTempFile ("cvs", ".log"); {
						l_cvsOutputFile.deleteOnExit ();
					}

					var l_cvsTask = project.createTask ("cvs"); {
						l_cvsTask.setCommand (
							"-f"
							+ " update"
							+ " -P"
							+ " -d"
						);
						l_cvsTask.setCompression (true);
						l_cvsTask.setCompressionLevel (9);
						l_cvsTask.setCvsRoot (a_cvsRoot);
						l_cvsTask.setDest (new File (l_cvsDirectory));
						l_cvsTask.setFailOnError (true);
						l_cvsTask.setOutput (l_cvsOutputFile);
						l_cvsTask.setQuiet (true);

						l_cvsTask.reconfigure ();
					}

					l_cvsTask.execute ();

					if (l_cvsOutputFile.length () != 0) {
						l_cvsBreakCycle = false;

						var l_cleanupCvsByOutputTask = project.createTask ("ru.garant.extensions.scriptdefs.cleanupCvsByOutput"); {
							var l_runtimeConfigurableWrapper = l_cleanupCvsByOutputTask.getRuntimeConfigurableWrapper (); {
								var l_cvsDir = l_cvsDirectory;
								var l_cvsOutputFile = l_cvsOutputFile.getPath ();

								l_runtimeConfigurableWrapper.setAttribute ("cvs.dir", l_cvsDir);
								l_runtimeConfigurableWrapper.setAttribute ("cvs.output.file", l_cvsOutputFile);
							}

							l_cleanupCvsByOutputTask.reconfigure ();
						}

						l_cleanupCvsByOutputTask.execute ();
					}
				}
			}
		}
	]]>
</scriptdef>
