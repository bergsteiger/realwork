<?xml version = "1.0" encoding = "ISO-8859-1"?>

<!DOCTYPE ru.garant.extensions SYSTEM "../../ru.garant/extensions.dtd">

<project
	name = "scriptset.mini4"
	basedir = "."
	default = "default"
>

	<!--
		apache `ant` script [http://ant.apache.org]

		required third party jars {
			bsf.jar:               [http://jakarta.apache.org/bsf]
			commons-logging-*.jar: [http://jakarta.apache.org/commons/logging]

			js.jar:                [http://www.mozilla.org/rhino]
		}
	-->

<!-- external uses { -->
	<!-- properties { -->
		&ru.garant.extensions.properties.cppBuildMaxCyclesCount;

		&ru.garant.extensions.properties.cvsRoot;
		&ru.garant.extensions.properties.cvsUpdateMaxCyclesCount;

		&ru.garant.extensions.properties.externalMountPath;
		&ru.garant.extensions.properties.externalMountRoot;

		&ru.garant.extensions.properties.moleboxTargetMaxCyclesCount;

		&ru.garant.extensions.properties.signDescription;
		&ru.garant.extensions.properties.signDescriptionURL;
		&ru.garant.extensions.properties.signSHA1;
		&ru.garant.extensions.properties.signTargetMaxCyclesCount;
		&ru.garant.extensions.properties.signTimestampServer;

		&ru.garant.extensions.properties.wixLibRoot;

		&ru.garant.extensions.properties.workRootDir;
	<!-- } properties -->

	<!-- scriptdefs { -->
		&ru.garant.extensions.scriptdefs.buildCppTarget;
		&ru.garant.extensions.scriptdefs.buildPasTarget;

		&ru.garant.extensions.scriptdefs.buildWixTarget;

		&ru.garant.extensions.scriptdefs.cleanupAllFiles;

		&ru.garant.extensions.scriptdefs.cleanupCppBuilds;
		&ru.garant.extensions.scriptdefs.cleanupPasBuilds;

		&ru.garant.extensions.scriptdefs.cleanupCvsByOutput;

		&ru.garant.extensions.scriptdefs.copyDirToDir;

		&ru.garant.extensions.scriptdefs.copyFile;
		&ru.garant.extensions.scriptdefs.copyFileToDir;

		&ru.garant.extensions.scriptdefs.copyCppTarget;

		&ru.garant.extensions.scriptdefs.createFile;
		&ru.garant.extensions.scriptdefs.removeFile;

		&ru.garant.extensions.scriptdefs.replaceStringInFile;

		&ru.garant.extensions.scriptdefs.manifestTarget;

		&ru.garant.extensions.scriptdefs.moleboxTarget;

		&ru.garant.extensions.scriptdefs.mountResource;
		&ru.garant.extensions.scriptdefs.unmountResource;

		&ru.garant.extensions.scriptdefs.setCvsTagByList;
		&ru.garant.extensions.scriptdefs.updateCvsByList;

		&ru.garant.extensions.scriptdefs.signTarget;
	<!-- } scriptdefs -->
<!-- } external uses -->

<!-- properties { -->
	<property
		name = "properties.buildOutputMountPath"
		value = "\\10.14.3.205\garant-nemesis"
	/>

	<property
		name = "properties.buildOutputMountRoot"
		value = "N:"
	/>

	<property
		name = "properties.buildOutputMountRoot.deploymentCatalog"
		value = "${properties.buildOutputMountRoot}/deployment"
	/>

	<property
		name = "properties.buildRoot"
		value = "${ru.garant.extensions.properties.workRootDir}/build"
	/>

	<property
		name = "properties.buildSuccessName"
		value = "!success"
	/>

	<property
		name = "properties.buildSuccessFile"
		value = "${properties.buildOutputMountRoot.deploymentCatalog}/!daily/${properties.buildSuccessName}"
	/>

	<property
		name = "properties.cppTargetDefaultConfig32"
		value = "Release|Win32"
	/>

	<property
		name = "properties.cppTargetDefaultConfig64"
		value = "Release|x64"
	/>

	<property
		name = "properties.cppTargetDefaultFolder"
		value = "bin/Release_Static"
	/>

	<property
		name = "properties.cppTargetReleaseConfig32"
		value = "Final|Win32"
	/>

	<property
		name = "properties.cppTargetReleaseConfig64"
		value = "Final|x64"
	/>

	<property
		name = "properties.cppTargetReleaseFolder"
		value = "bin/Final_Static"
	/>

	<property
		name = "properties.cppTargetRootDir"
		value = "${ru.garant.extensions.properties.workRootDir}"
	/>

	<property
		name = "properties.cvsDirsetListForTagging"
		value = "build_scripts,mini4,shared"
	/>

	<property
		name = "properties.cvsDirsetListForUpdate"
		value = "mini4,shared"
	/>

	<property
		name = "properties.cvsRootDir"
		value = "${ru.garant.extensions.properties.workRootDir}"
	/>

	<property
		name = "properties.cvsTagName"
		value = "!cvs_tag"
	/>

	<property
		name = "properties.cvsTagFile"
		value = "${properties.buildOutputMountRoot.deploymentCatalog}/!daily/${properties.cvsTagName}"
	/>

	<property
		name = "properties.externalMountPath"
		value = "${ru.garant.extensions.properties.externalMountPath}"
	/>

	<property
		name = "properties.externalMountPathRevision"
		value = "msvc090only-current"
	/>

	<property
		name = "properties.externalMountPath.win64"
		value = "${properties.externalMountPath}/${properties.externalMountPathRevision}/win64"
	/>

	<property
		name = "properties.externalMountPath.winNT"
		value = "${properties.externalMountPath}/${properties.externalMountPathRevision}/winNT+stlport"
	/>

	<property
		name = "properties.externalMountPath.winXX-shared"
		value = "${properties.externalMountPath}/${properties.externalMountPathRevision}/winXX-shared"
	/>

	<property
		name = "properties.externalMountRoot"
		value = "${ru.garant.extensions.properties.externalMountRoot}"
	/>

	<property
		name = "properties.buildOutputMountRoot.currentCatalog"
		value = "${properties.buildOutputMountRoot}/.current"
	/>

	<property
		name = "properties.pasTargetConfigsPath"
		value = "${basedir}/delphi.configs-${properties.delphi.suffix}"
	/>

	<property
		name = "properties.pasTargetRootDir"
		value = "${ru.garant.extensions.properties.workRootDir}"
	/>

	<property
		name = "properties.wixTargetRootDir"
		value = "${ru.garant.extensions.properties.workRootDir}"
	/>
<!-- } properties -->

<!-- conditions { -->
	<condition property = "disable-buildCppTargets.win64">
		<isset property = "disable-buildCppTargets"/>
	</condition>

	<condition property = "disable-buildCppTargets.winNT">
		<isset property = "disable-buildCppTargets"/>
	</condition>

	<condition property = "disable-buildPasTargets.winXX-console">
		<isset property = "disable-buildPasTargets"/>
	</condition>

	<condition property = "disable-buildPasTargets.winXX+console">
		<isset property = "disable-buildPasTargets"/>
	</condition>

	<condition property = "disable-copyCppPresetsToDeploymentCatalog">
		<isset property = "disable-buildCppTargets"/>
	</condition>

	<condition property = "disable-copyCppTargetsToCurrentCatalog">
		<isset property = "disable-buildCppTargets"/>
	</condition>

	<condition property = "disable-copyCppTargetsToDeploymentCatalog.win64">
		<isset property = "disable-buildCppTargets.win64"/>
	</condition>

	<condition property = "disable-copyCppTargetsToDeploymentCatalog.win64">
		<isset property = "disable-copyCppTargetsToDeploymentCatalog"/>
	</condition>

	<condition property = "disable-copyCppTargetsToDeploymentCatalog.winNT">
		<isset property = "disable-buildCppTargets.winNT"/>
	</condition>

	<condition property = "disable-copyCppTargetsToDeploymentCatalog.winNT">
		<isset property = "disable-copyCppTargetsToDeploymentCatalog"/>
	</condition>

	<condition property = "disable-copyPasPresetsToDeploymentCatalog">
		<isset property = "disable-buildPasTargets"/>
	</condition>

	<condition property = "disable-copyPasTargetsToCurrentCatalog">
		<isset property = "disable-buildPasTargets"/>
	</condition>

	<condition property = "disable-copyPasTargetsToDeploymentCatalog.winXX-console">
		<isset property = "disable-buildPasTargets.winXX-console"/>
	</condition>

	<condition property = "disable-copyPasTargetsToDeploymentCatalog.winXX-console">
		<isset property = "disable-copyPasTargetsToDeploymentCatalog"/>
	</condition>

	<condition property = "disable-copyPasTargetsToDeploymentCatalog.winXX+console">
		<isset property = "disable-buildPasTargets.winXX+console"/>
	</condition>

	<condition property = "disable-copyPasTargetsToDeploymentCatalog.winXX+console">
		<isset property = "disable-copyPasTargetsToDeploymentCatalog"/>
	</condition>

	<condition property = "disable-copyWixTargetsToDeploymentCatalog">
		<isset property = "disable-buildWixTargets"/>
	</condition>

	<condition property = "disable-copyWixTargets">
		<isset property = "disable-buildWixTargets"/>
	</condition>
<!-- } conditions -->

<!-- targets { -->
	<target
		name = "buildCppTargets"
		depends = "buildCppTargets.win64,buildCppTargets.winNT"
		unless = "disable-buildCppTargets"
	>

<!--
		// do nothing
-->

		<echo
			message = "TARGET PASSED"
		/>
	</target> <!-- // buildCppTargets -->

	<target
		name = "buildCppTargets.win64"
		depends = "updateCvs,copyCppPresetsToDeploymentCatalog"
		unless = "disable-buildCppTargets.win64"
	>
		<ru.garant.extensions.scriptdefs.cleanupCppBuilds
		/>

		<ru.garant.extensions.scriptdefs.mountResource
			mount.root = "${properties.externalMountRoot}"
			mount.path = "${properties.externalMountPath.win64}"
		/>

<!--
		// do nothing
-->

		<ru.garant.extensions.scriptdefs.unmountResource
			mount.root = "${properties.externalMountRoot}"
		/>

		<echo
			message = "TARGET PASSED"
		/>
	</target> <!-- // buildCppTargets.win64 -->

	<target
		name = "buildCppTargets.winNT"
		depends = "updateCvs,copyCppPresetsToDeploymentCatalog"
		unless = "disable-buildCppTargets.winNT"
	>
		<ru.garant.extensions.scriptdefs.cleanupCppBuilds
		/>

		<ru.garant.extensions.scriptdefs.mountResource
			mount.root = "${properties.externalMountRoot}"
			mount.path = "${properties.externalMountPath.winNT}"
		/>

<!-- -->
		<ru.garant.extensions.scriptdefs.buildCppTarget
			cpp.target = "T_miniclient"
			cpp.target.project.path = "mini4/projects/mini4.sln"

			cpp.target.default.config = "${properties.cppTargetDefaultConfig32}"
			cpp.target.release.config = "${properties.cppTargetReleaseConfig32}"

			cpp.target.root.dir = "${properties.cppTargetRootDir}"
		/>

		<ru.garant.extensions.scriptdefs.buildCppTarget
			cpp.target = "T_miniserver"
			cpp.target.project.path = "mini4/projects/mini4.sln"

			cpp.target.default.config = "${properties.cppTargetDefaultConfig32}"
			cpp.target.release.config = "${properties.cppTargetReleaseConfig32}"

			cpp.target.root.dir = "${properties.cppTargetRootDir}"
		/>
<!-- -->

		<ru.garant.extensions.scriptdefs.unmountResource
			mount.root = "${properties.externalMountRoot}"
		/>

		<echo
			message = "TARGET PASSED"
		/>
	</target> <!-- // buildCppTargets.winNT -->

	<target
		name = "buildPasTargets"
		depends = "buildPasTargets.winXX-console,buildPasTargets.winXX+console"
		unless = "disable-buildPasTargets"
	>

<!--
		// do nothing
-->

		<echo
			message = "TARGET PASSED"
		/>
	</target> <!-- // buildPasTargets -->

	<target
		name = "buildPasTargets.winXX-console"
		depends = "updateCvs,copyPasPresetsToDeploymentCatalog"
		unless = "disable-buildPasTargets.winXX-console"
	>
		<ru.garant.extensions.scriptdefs.cleanupPasBuilds
		/>

<!--
		// do nothing
-->

		<echo
			message = "TARGET PASSED"
		/>
	</target> <!-- // buildPasTargets.winXX-console -->

	<target
		name = "buildPasTargets.winXX+console"
		depends = "updateCvs,copyPasPresetsToDeploymentCatalog"
		unless = "disable-buildPasTargets.winXX+console"
	>
		<ru.garant.extensions.scriptdefs.cleanupPasBuilds
		/>

<!--
		// do nothing
-->

		<echo
			message = "TARGET PASSED"
		/>
	</target> <!-- // buildPasTargets.winXX+console -->

	<target
		name = "buildWixTargets"
		depends = "signCppTargets,signPasTargets,createVersionInfo"
		unless = "disable-buildWixTargets"
	>
		<ru.garant.extensions.scriptdefs.mountResource
			mount.root = "${properties.externalMountRoot}"
			mount.path = "${properties.externalMountPath.winXX-shared}"
		/>

		<ru.garant.extensions.scriptdefs.mountResource
			mount.root = "${properties.buildOutputMountRoot}"
			mount.path = "${properties.buildOutputMountPath}"
		/>

		<ru.garant.extensions.scriptdefs.buildWixTarget
			wix.target.codepage = "1251"
			wix.target.language = "ru-ru"
			wix.target.project.name = "iv-garantSetupRus"
			wix.target.root.dir = "${properties.wixTargetRootDir}/mini4/deployment"
		/>

		<ru.garant.extensions.scriptdefs.unmountResource
			mount.root = "${properties.buildOutputMountRoot}"
		/>

		<ru.garant.extensions.scriptdefs.unmountResource
			mount.root = "${properties.externalMountRoot}"
		/>

		<echo
			message = "TARGET PASSED"
		/>
	</target> <!-- // buildWixTargets -->

	<target
		name = "createSuccessFile"
        depends = "copyCppPresetsToDeploymentCatalog,copyCppTargetsToCurrentCatalog,copyPasPresetsToDeploymentCatalog,copyPasTargetsToCurrentCatalog"
	>
		<ru.garant.extensions.scriptdefs.mountResource
			mount.root = "${properties.buildOutputMountRoot}"
			mount.path = "${properties.buildOutputMountPath}"
		/>

<!-- -->
		<ru.garant.extensions.scriptdefs.createFile
			file.name = "${properties.buildSuccessFile}"
		/>
<!-- -->

		<ru.garant.extensions.scriptdefs.unmountResource
			mount.root = "${properties.buildOutputMountRoot}"
		/>

		<echo
			message = "TARGET PASSED"
		/>
	</target> <!-- // createSuccessFile -->

	<target
		name = "copyCppPresetsToDeploymentCatalog"
		depends = "updateCvs"
		unless = "disable-copyCppPresetsToDeploymentCatalog"
	>
		<ru.garant.extensions.scriptdefs.mountResource
			mount.root = "${properties.buildOutputMountRoot}"
			mount.path = "${properties.buildOutputMountPath}"
		/>

<!-- -->
		<ru.garant.extensions.scriptdefs.copyFile
			file = "${properties.cvsRootDir}/mini4/deployment/ini/iv-garant-client.ini"
			to.file = "${properties.buildOutputMountRoot.deploymentCatalog}/!daily/mini4/IV-Client/iv-garant-client.ini"
		/>

		<ru.garant.extensions.scriptdefs.copyFile
			file = "${properties.cvsRootDir}/mini4/deployment/ini/iv-garant-server.ini"
			to.file = "${properties.buildOutputMountRoot.deploymentCatalog}/!daily/mini4/IV-Server/iv-garant-server.ini"
		/>
<!-- -->

		<ru.garant.extensions.scriptdefs.unmountResource
			mount.root = "${properties.buildOutputMountRoot}"
		/>

		<echo
			message = "TARGET PASSED"
		/>
	</target> <!-- // copyCppPresetsToDeploymentCatalog -->

	<target
		name = "copyCppTargetsToCurrentCatalog"
		depends = "copyCppPresetsToDeploymentCatalog,setCvsTag"
		unless = "disable-copyCppTargetsToCurrentCatalog"
	>
		<ru.garant.extensions.scriptdefs.mountResource
			mount.root = "${properties.buildOutputMountRoot}"
			mount.path = "${properties.buildOutputMountPath}"
		/>

<!--
		// do nothing
-->

		<ru.garant.extensions.scriptdefs.unmountResource
			mount.root = "${properties.buildOutputMountRoot}"
		/>

		<echo
			message = "TARGET PASSED"
		/>
	</target> <!-- // copyCppTargetsToCurrentCatalog -->

	<target
		name = "copyCppTargetsToDeploymentCatalog"
		depends = "copyCppTargetsToDeploymentCatalog.win64,copyCppTargetsToDeploymentCatalog.winNT"
		unless = "disable-copyCppTargetsToDeploymentCatalog"
	>

<!--
		// do nothing
-->

		<echo
			message = "TARGET PASSED"
		/>
	</target> <!-- // copyCppTargetsToDeploymentCatalog -->

	<target
		name = "copyCppTargetsToDeploymentCatalog.win64"
		depends = "buildCppTargets.win64"
		unless = "disable-copyCppTargetsToDeploymentCatalog.win64"
	>
		<ru.garant.extensions.scriptdefs.mountResource
			mount.root = "${properties.buildOutputMountRoot}"
			mount.path = "${properties.buildOutputMountPath}"
		/>

<!--
		// do nothing
-->

		<ru.garant.extensions.scriptdefs.unmountResource
			mount.root = "${properties.buildOutputMountRoot}"
		/>

		<ru.garant.extensions.scriptdefs.cleanupCppBuilds
		/>

		<echo
			message = "TARGET PASSED"
		/>
	</target> <!-- // copyCppTargetsToDeploymentCatalog.win64 -->

	<target
		name = "copyCppTargetsToDeploymentCatalog.winNT"
		depends = "buildCppTargets.winNT"
		unless = "disable-copyCppTargetsToDeploymentCatalog.winNT"
	>
		<ru.garant.extensions.scriptdefs.mountResource
			mount.root = "${properties.buildOutputMountRoot}"
			mount.path = "${properties.buildOutputMountPath}"
		/>

<!-- -->
		<ru.garant.extensions.scriptdefs.copyCppTarget
			cpp.target.default.file = "${properties.buildRoot}/${properties.cppTargetDefaultFolder}/mini-client.exe"
			cpp.target.release.file = "${properties.buildRoot}/${properties.cppTargetReleaseFolder}/mini-client.exe"

			cpp.target.to.file = "${properties.buildOutputMountRoot.deploymentCatalog}/!daily/mini4/IV-Client/iv-garant-client.exe"
		/>

		<ru.garant.extensions.scriptdefs.copyCppTarget
			cpp.target.default.file = "${properties.buildRoot}/${properties.cppTargetDefaultFolder}/mini-server.exe"
			cpp.target.release.file = "${properties.buildRoot}/${properties.cppTargetReleaseFolder}/mini-server.exe"

			cpp.target.to.file = "${properties.buildOutputMountRoot.deploymentCatalog}/!daily/mini4/IV-Server/iv-garant-server.exe"
		/>
<!-- -->

		<ru.garant.extensions.scriptdefs.unmountResource
			mount.root = "${properties.buildOutputMountRoot}"
		/>

		<ru.garant.extensions.scriptdefs.cleanupCppBuilds
		/>

		<echo
			message = "TARGET PASSED"
		/>
	</target> <!-- // copyCppTargetsToDeploymentCatalog.winNT -->

	<target
		name = "copyPasPresetsToDeploymentCatalog"
		depends = "updateCvs"
		unless = "disable-copyPasPresetsToDeploymentCatalog"
	>
		<ru.garant.extensions.scriptdefs.mountResource
			mount.root = "${properties.buildOutputMountRoot}"
			mount.path = "${properties.buildOutputMountPath}"
		/>

<!--
		// do nothing
-->

		<ru.garant.extensions.scriptdefs.unmountResource
			mount.root = "${properties.buildOutputMountRoot}"
		/>

		<echo
			message = "TARGET PASSED"
		/>
	</target> <!-- // copyPasPresetsToDeploymentCatalog -->

	<target
		name = "copyPasTargetsToCurrentCatalog"
		depends = "copyPasPresetsToDeploymentCatalog,setCvsTag"
		unless = "disable-copyPasTargetsToCurrentCatalog"
	>
		<ru.garant.extensions.scriptdefs.mountResource
			mount.root = "${properties.buildOutputMountRoot}"
			mount.path = "${properties.buildOutputMountPath}"
		/>

<!--
		// do nothing
-->

		<ru.garant.extensions.scriptdefs.unmountResource
			mount.root = "${properties.buildOutputMountRoot}"
		/>

		<echo
			message = "TARGET PASSED"
		/>
	</target> <!-- // copyPasTargetsToCurrentCatalog -->

	<target
		name = "copyPasTargetsToDeploymentCatalog"
		depends = "copyPasTargetsToDeploymentCatalog.winXX-console,copyPasTargetsToDeploymentCatalog.winXX+console"
		unless = "disable-copyPasTargetsToDeploymentCatalog"
	>

<!--
		// do nothing
-->

		<echo
			message = "TARGET PASSED"
		/>
	</target> <!-- // copyPasTargetsToDeploymentCatalog -->

	<target
		name = "copyPasTargetsToDeploymentCatalog.winXX-console"
		depends = "buildPasTargets.winXX-console"
		unless = "disable-copyPasTargetsToDeploymentCatalog.winXX-console"
	>
		<ru.garant.extensions.scriptdefs.mountResource
			mount.root = "${properties.buildOutputMountRoot}"
			mount.path = "${properties.buildOutputMountPath}"
		/>

<!--
		// do nothing
-->

		<ru.garant.extensions.scriptdefs.unmountResource
			mount.root = "${properties.buildOutputMountRoot}"
		/>

		<ru.garant.extensions.scriptdefs.cleanupPasBuilds
		/>

		<echo
			message = "TARGET PASSED"
		/>
	</target> <!-- // copyPasTargetsToDeploymentCatalog.winXX-console -->

	<target
		name = "copyPasTargetsToDeploymentCatalog.winXX+console"
		depends = "buildPasTargets.winXX+console"
		unless = "disable-copyPasTargetsToDeploymentCatalog.winXX+console"
	>
		<ru.garant.extensions.scriptdefs.mountResource
			mount.root = "${properties.buildOutputMountRoot}"
			mount.path = "${properties.buildOutputMountPath}"
		/>

<!--
		// do nothing
-->

		<ru.garant.extensions.scriptdefs.unmountResource
			mount.root = "${properties.buildOutputMountRoot}"
		/>

		<ru.garant.extensions.scriptdefs.cleanupPasBuilds
		/>

		<echo
			message = "TARGET PASSED"
		/>
	</target> <!-- // copyPasTargetsToDeploymentCatalog.winXX+console -->

	<target
		name = "copyWixTargets"
		depends = "manifestWixTargets"
		unless = "disable-copyWixTargets"
	>
		<ru.garant.extensions.scriptdefs.mountResource
			mount.root = "${properties.buildOutputMountRoot}"
			mount.path = "${properties.buildOutputMountPath}"
		/>

<!-- -->
		<ru.garant.extensions.scriptdefs.copyFile
			file = "${properties.buildOutputMountRoot.deploymentCatalog}/!daily/mini4-setup/iv-garantSetupRus_ru-ru.exe"
			to.file = "${properties.buildOutputMountRoot.deploymentCatalog}/!daily-installer/iv-garantSetupRus_ru-ru.exe"
		/>
<!-- -->

		<ru.garant.extensions.scriptdefs.unmountResource
			mount.root = "${properties.buildOutputMountRoot}"
		/>

		<echo
			message = "TARGET PASSED"
		/>
	</target> <!-- // copyWixTargets -->

	<target
		name = "copyWixTargetsToDeploymentCatalog"
		depends = "buildWixTargets"
		unless = "disable-copyWixTargetsToDeploymentCatalog"
	>
		<ru.garant.extensions.scriptdefs.mountResource
			mount.root = "${properties.buildOutputMountRoot}"
			mount.path = "${properties.buildOutputMountPath}"
		/>

		<ru.garant.extensions.scriptdefs.copyFile
			file = "${properties.wixTargetRootDir}/mini4/deployment/iv-garantSetupRus_ru-ru.msi"
			to.file = "${properties.buildOutputMountRoot.deploymentCatalog}/!daily-installer/iv-garantSetupRus_ru-ru.msi"
		/>

		<ru.garant.extensions.scriptdefs.copyFile
			file = "${properties.wixTargetRootDir}/mini4/deployment/iv-garantSharedSetupUni.cab"
			to.file = "${properties.buildOutputMountRoot.deploymentCatalog}/!daily-installer/iv-garantSharedSetupUni.cab"
		/>

		<ru.garant.extensions.scriptdefs.unmountResource
			mount.root = "${properties.buildOutputMountRoot}"
		/>

		<echo
			message = "TARGET PASSED"
		/>
	</target> <!-- // copyWixTargetsToDeploymentCatalog -->

	<target
		name = "createVersionInfo"
		unless = "disable-createVersionInfo"
	>
		<ru.garant.extensions.scriptdefs.mountResource
			mount.root = "${properties.buildOutputMountRoot}"
			mount.path = "${properties.buildOutputMountPath}"
		/>

<!-- -->
		<ru.garant.extensions.scriptdefs.createFile
			file.name = "${properties.buildOutputMountRoot.deploymentCatalog}/!daily/mini4/version.txt"
			file.data = "${ru.garant.extensions.properties.full.version}"
		/>
<!-- -->

		<ru.garant.extensions.scriptdefs.unmountResource
			mount.root = "${properties.buildOutputMountRoot}"
		/>

		<echo
			message = "TARGET PASSED"
		/>
	</target> <!-- // createVersionInfo -->

	<target
		name = "default"
		depends = "removeSuccessFile,createSuccessFile"
	>

<!--
		// do nothing
-->

		<echo
			message = "TARGET PASSED"
		/>
	</target> <!-- // default -->

	<target
		name = "manifestCppTargets"
		depends = "copyCppTargetsToDeploymentCatalog"
		unless = "disable-manifestCppTargets"
	>
		<ru.garant.extensions.scriptdefs.mountResource
			mount.root = "${properties.buildOutputMountRoot}"
			mount.path = "${properties.buildOutputMountPath}"
		/>

<!-- -->
		<ru.garant.extensions.scriptdefs.manifestTarget
			manifest.target = "iv-garant-client.exe"

			manifest.target.root.dir = "${properties.buildOutputMountRoot.deploymentCatalog}/!daily/mini4/IV-Client"
		/>

		<ru.garant.extensions.scriptdefs.manifestTarget
			manifest.target = "iv-garant-server.exe"

			manifest.target.root.dir = "${properties.buildOutputMountRoot.deploymentCatalog}/!daily/mini4/IV-Server"
		/>
<!-- -->

		<ru.garant.extensions.scriptdefs.unmountResource
			mount.root = "${properties.buildOutputMountRoot}"
		/>

		<echo
			message = "TARGET PASSED"
		/>
	</target> <!-- // manifestCppTargets -->

	<target
		name = "manifestPasTargets"
		depends = "copyPasTargetsToDeploymentCatalog"
		unless = "disable-manifestPasTargets"
	>
		<ru.garant.extensions.scriptdefs.mountResource
			mount.root = "${properties.buildOutputMountRoot}"
			mount.path = "${properties.buildOutputMountPath}"
		/>

<!--
		// do nothing
-->

		<ru.garant.extensions.scriptdefs.unmountResource
			mount.root = "${properties.buildOutputMountRoot}"
		/>

		<echo
			message = "TARGET PASSED"
		/>
	</target> <!-- // manifestPasTargets -->

	<target
		name = "manifestWixTargets"
		depends = "copyWixTargetsToDeploymentCatalog"
		unless = "disable-manifestWixTargets"
	>
		<ru.garant.extensions.scriptdefs.mountResource
			mount.root = "${properties.buildOutputMountRoot}"
			mount.path = "${properties.buildOutputMountPath}"
		/>

<!-- -->
		<ru.garant.extensions.scriptdefs.manifestTarget
			manifest.target = "iv-garantSetupRus_ru-ru.exe"

			manifest.target.root.dir = "${properties.buildOutputMountRoot.deploymentCatalog}/!daily/mini4-setup"
		/>
<!-- -->

		<ru.garant.extensions.scriptdefs.unmountResource
			mount.root = "${properties.buildOutputMountRoot}"
		/>

		<echo
			message = "TARGET PASSED"
		/>
	</target> <!-- // manifestWixTargets -->

	<target
		name = "removeSuccessFile"
	>
		<ru.garant.extensions.scriptdefs.mountResource
			mount.root = "${properties.buildOutputMountRoot}"
			mount.path = "${properties.buildOutputMountPath}"
		/>

<!-- -->
		<ru.garant.extensions.scriptdefs.removeFile
			file.name = "${properties.buildSuccessFile}"
		/>
<!-- -->

		<ru.garant.extensions.scriptdefs.unmountResource
			mount.root = "${properties.buildOutputMountRoot}"
		/>

		<echo
			message = "TARGET PASSED"
		/>
	</target> <!-- // removeSuccessFile -->

	<target
		name = "setCvsTag"
		depends = "signWixTargets"
		unless = "disable-setCvsTag"
	>
		<ru.garant.extensions.scriptdefs.mountResource
			mount.root = "${properties.buildOutputMountRoot}"
			mount.path = "${properties.buildOutputMountPath}"
		/>

<!-- -->
		<ru.garant.extensions.scriptdefs.setCvsTagByList
			cvs.dirset.list = "${properties.cvsDirsetListForTagging}"
			cvs.root.dir = "${properties.cvsRootDir}"

			cvs.tag.file = "${properties.cvsTagFile}"
		/>
<!-- -->

		<ru.garant.extensions.scriptdefs.unmountResource
			mount.root = "${properties.buildOutputMountRoot}"
		/>

		<echo
			message = "TARGET PASSED"
		/>
	</target> <!-- // setCvsTag -->

	<target
		name = "signCppTargets"
		depends = "manifestCppTargets"
		unless = "disable-signCppTargets"
	>
		<ru.garant.extensions.scriptdefs.mountResource
			mount.root = "${properties.buildOutputMountRoot}"
			mount.path = "${properties.buildOutputMountPath}"
		/>

<!-- -->
		<ru.garant.extensions.scriptdefs.signTarget
			sign.target = "iv-garant-client.exe"

			sign.target.root.dir = "${properties.buildOutputMountRoot.deploymentCatalog}/!daily/mini4/IV-Client"
		/>

		<ru.garant.extensions.scriptdefs.signTarget
			sign.target = "iv-garant-server.exe"

			sign.target.root.dir = "${properties.buildOutputMountRoot.deploymentCatalog}/!daily/mini4/IV-Server"
		/>
<!-- -->

		<ru.garant.extensions.scriptdefs.unmountResource
			mount.root = "${properties.buildOutputMountRoot}"
		/>

		<echo
			message = "TARGET PASSED"
		/>
	</target> <!-- // signCppTargets -->

	<target
		name = "signPasTargets"
		depends = "manifestPasTargets"
		unless = "disable-signPasTargets"
	>
		<ru.garant.extensions.scriptdefs.mountResource
			mount.root = "${properties.buildOutputMountRoot}"
			mount.path = "${properties.buildOutputMountPath}"
		/>

<!--
		// do nothing
-->

		<ru.garant.extensions.scriptdefs.unmountResource
			mount.root = "${properties.buildOutputMountRoot}"
		/>

		<echo
			message = "TARGET PASSED"
		/>
	</target> <!-- // signPasTargets -->

	<target
		name = "signWixTargets"
		depends = "copyWixTargets"
		unless = "disable-signWixTargets"
	>
		<ru.garant.extensions.scriptdefs.mountResource
			mount.root = "${properties.buildOutputMountRoot}"
			mount.path = "${properties.buildOutputMountPath}"
		/>

		<ru.garant.extensions.scriptdefs.signTarget
			sign.target = "iv-garantSetupRus_ru-ru.exe"

			sign.target.root.dir = "${properties.buildOutputMountRoot.deploymentCatalog}/!daily-installer"
		/>

		<ru.garant.extensions.scriptdefs.signTarget
			sign.target = "iv-garantSetupRus_ru-ru.msi"

			sign.target.root.dir = "${properties.buildOutputMountRoot.deploymentCatalog}/!daily-installer"
		/>

		<ru.garant.extensions.scriptdefs.signTarget
			sign.target = "iv-garantSharedSetupUni.cab"

			sign.target.root.dir = "${properties.buildOutputMountRoot.deploymentCatalog}/!daily-installer"
		/>

		<ru.garant.extensions.scriptdefs.unmountResource
			mount.root = "${properties.buildOutputMountRoot}"
		/>

		<echo
			message = "TARGET PASSED"
		/>
	</target> <!-- // signWixTargets -->

	<target
		name = "updateCvs"
		depends = "removeSuccessFile"
		unless = "disable-updateCvs"
	>

<!-- -->
		<ru.garant.extensions.scriptdefs.updateCvsByList
			cvs.dirset.list = "${properties.cvsDirsetListForUpdate}"
			cvs.root.dir = "${properties.cvsRootDir}"
		/>
<!-- -->

		<echo
			message = "TARGET PASSED"
		/>
	</target> <!-- // updateCvs -->
<!-- } targets -->

</project> <!-- // scriptset.mini4 -->
