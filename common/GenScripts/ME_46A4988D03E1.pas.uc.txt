//#UC START# *46A4988D03E1_ext:ParentFileName
w:\common\components\rtl\Garant\L3\l3Interfaces.pas
//#UC END# *46A4988D03E1_ext:ParentFileName
//#UC START# *46A4988D03E1ci*
  Tl3ConvertPointProc = function (const Pt: TPoint): TPoint of object;
    {* Тип процедур для конвертации точек. }

//#UC END# *46A4988D03E1ci*
//#UC START# *46A4988D03E1impl*
// start object Tl3_SPoint

procedure Tl3_SPoint.Init(aX, aY: Integer);
  {-инициализирует точку}
begin
 P.X := aX;
 P.Y := aY;
end;

procedure Tl3_SPoint.Inc(const Pt: Tl3_SPoint);
  {-прибавляет Pt к Self}
begin
 System.Inc(P.X, Pt.P.X);
 System.Inc(P.Y, Pt.P.Y);
end;

procedure Tl3_SPoint.Dec(const Pt: Tl3_SPoint);
  {-отнимает Pt от Self}
begin
 System.Dec(P.X, Pt.P.X);
 System.Dec(P.Y, Pt.P.Y);
end;

function Tl3_SPoint.Add(const Pt: Tl3_SPoint): Tl3_SPoint;
  {-складывает Self с P и возвращает полученное значение}
begin
 if (P.X = High(P.X)) then
  Result.P.X := P.X
 else
  Result.P.X := P.X + Pt.P.X;
 if (P.Y = High(P.Y)) then
  Result.P.Y := P.Y
 else
  Result.P.Y := P.Y + Pt.P.Y;
end;

function Tl3_SPoint.Sub(const Pt: Tl3_SPoint): Tl3_SPoint;
  {-вычитает P из Self и возвращает полученное значение}
begin
 Result.P.X := P.X - Pt.P.X;
 Result.P.Y := P.Y - Pt.P.Y;
end;

function Tl3_SPoint.EQ(const Pt: Tl3_SPoint): Boolean;
  {-проверяет равенство двух точек}
begin
 Result := (P.X = Pt.P.X) AND (P.Y = Pt.P.Y);
end;

function Tl3_SPoint.Neg: Tl3_SPoint;
  {-возвращает точку отраженную через начало координат}
begin
 Result.P.X := -P.X;
 Result.P.Y := -P.Y;
end;

function Tl3_SPoint.GetCursorPos: Boolean;
  {-инициализирует точку значением начала координат курсора мыши}
var
 WP : TPoint;
begin
 Windows.GetCursorPos(WP);
 Self := Tl3_SPoint_C(WP.X, WP.Y);
 Result := true;
end;

function Tl3_SPoint.Zoom(Z: Integer): Tl3_SPoint;
  {-увеличивает координаты вектора на Z % и возвращает Result}
begin
 Result.Init(evZoom(Z, P.X), evZoom(Z, P.Y));
end;

function Tl3_SPoint.Dezoom(Z: Integer): Tl3_SPoint;
  {-уменьшает координаты вектора на Z % и возвращает Result}
begin
 Result.Init(evDezoom(Z, P.X), evDezoom(Z, P.Y));
end;

procedure Tl3_SPoint.MakeZoom(Z: Integer);
  {-увеличивает координаты вектора на Z %}
begin
 P.X := evZoom(Z, P.X);
 P.Y := evZoom(Z, P.Y);
end;

procedure Tl3_SPoint.MakeDezoom(Z: Integer);
  {-уменьшает координаты вектора на Z %}
begin
 P.X := evDezoom(Z, P.X);
 P.Y := evDezoom(Z, P.Y);
end;

function Tl3_SPoint.Convert(CP: Tl3ConvertPointProc): Tl3_SPoint;
  {-конвертирует точку процедурой CP}
begin
 with CP(TPoint(Self)) do
  Self := Tl3_SPoint_C(X, Y);
 Result := Self;
end;

function Tl3_SPoint.Length: Single;
begin
 Result := Sqrt(X*X + Y*Y);
end;
//#UC END# *46A4988D03E1impl*
//#UC START# *46A4988D03E1publ*
    public
    // public methods
      procedure Init(aX, aY: Integer);
        {* - инициализирует точку. }
      procedure Inc(const Pt: Tl3_SPoint);
        {* - прибавляет Pt к Self. }
      procedure Dec(const Pt: Tl3_SPoint);
        {* - отнимает Pt от Self. }
      function  Add(const Pt: Tl3_SPoint): Tl3_SPoint;
        {* - складывает Self с P и возвращает полученное значение. }
      function  Sub(const Pt: Tl3_SPoint): Tl3_SPoint;
        {* - вычитает P из Self и возвращает полученное значение. }
      function EQ(const Pt: Tl3_SPoint): Boolean;
        {* - проверяет равенство двух точек. }
      function  Neg: Tl3_SPoint;
        {* - возвращает точку отраженную через начало координат. }
      function  GetCursorPos: Boolean;
        {* - инициализирует точку значением начала координат курсора мыши. }
      function  Zoom(Z: Integer): Tl3_SPoint;
        {* - увеличивает координаты вектора на Z % и возвращает Result. }
      function  Dezoom(Z: Integer): Tl3_SPoint;
        {* - уменьшает координаты вектора на Z % и возвращает Result. }
      procedure MakeZoom(Z: Integer);
        {* - увеличивает координаты вектора на Z %. }
      procedure MakeDezoom(Z: Integer);
        {* - уменьшает координаты вектора на Z %. }
      function  Convert(CP: Tl3ConvertPointProc): Tl3_SPoint;
        {* - конвертирует точку процедурой CP. }
      function Length: Single;  
//#UC END# *46A4988D03E1publ*
//#UC START# *537B842903A3_46A4988D03E1_impl*
 Result.X := anX;
 Result.Y := anY;
//#UC END# *537B842903A3_46A4988D03E1_impl*
//#UC START# *537B842903A3_46A4988D03E1_var*
//#UC END# *537B842903A3_46A4988D03E1_var*
