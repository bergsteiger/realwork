//#UC START# *46A5FCF900E0_478E1E9E01CE_impl*
 Result := DoDisplayNameToValue(aDisplayName);
//#UC END# *46A5FCF900E0_478E1E9E01CE_impl*
//#UC START# *46A5FCF900E0_478E1E9E01CE_var*
//#UC END# *46A5FCF900E0_478E1E9E01CE_var*
//#UC START# *46A5FD1B000D_478E1E9E01CE_impl*
 Result := DoValueToDisplayName(aValue);
//#UC END# *46A5FD1B000D_478E1E9E01CE_impl*
//#UC START# *46A5FD1B000D_478E1E9E01CE_var*
//#UC END# *46A5FD1B000D_478E1E9E01CE_var*
//#UC START# *478CFFBA017D_478E1DFA01DF_impl*
 inherited;
 for l_Index := Low(f_Values) To High(f_Values) Do
  aList.Add(l3CStr(f_values[l_Index]));
//#UC END# *478CFFBA017D_478E1DFA01DF_impl*
//#UC START# *478CFFBA017D_478E1DFA01DF_var*
var
 l_Index: Integer;
//#UC END# *478CFFBA017D_478E1DFA01DF_var*
//#UC START# *478CFFBA017D_478E1E3A0182_impl*
 inherited;
 for l_Index := Low(f_Values) To High(f_Values) Do
  aList.Add(f_values[l_Index]);
//#UC END# *478CFFBA017D_478E1E3A0182_impl*
//#UC START# *478CFFBA017D_478E1E3A0182_var*
var
 l_Index: Integer;
//#UC END# *478CFFBA017D_478E1E3A0182_var*
//#UC START# *478CFFCE02DE_478E1DFA01DF_impl*
 Result := Length(f_Values);
//#UC END# *478CFFCE02DE_478E1DFA01DF_impl*
//#UC START# *478CFFCE02DE_478E1DFA01DF_var*
//#UC END# *478CFFCE02DE_478E1DFA01DF_var*
//#UC START# *478CFFCE02DE_478E1E3A0182_impl*
 Result := Length(f_Values);
//#UC END# *478CFFCE02DE_478E1E3A0182_impl*
//#UC START# *478CFFCE02DE_478E1E3A0182_var*
//#UC END# *478CFFCE02DE_478E1E3A0182_var*
//#UC START# *478E1D94023E_ext:FileName
w:\common\components\rtl\Garant\L3\l3TypedIntegerValueMap.pas
//#UC END# *478E1D94023E_ext:FileName
//#UC START# *478E1D94023Eimpl_uses*
//#UC END# *478E1D94023Eimpl_uses*
//#UC START# *478E20F70032_478E1E9E01CE_impl*
 inherited Create(aID);
 Assert(Assigned(aTypeInfo),Format('Typed map %s - Unspecified typeinfo',[rMapID.rName]));
 Assert(aTypeInfo^.Kind in [tkInteger, tkChar, tkEnumeration, tkWChar],Format('Typed map %s - Unsupported type',[rMapID.rName]));
 f_TypeData := GetTypeData(aTypeInfo);
 Assert(Assigned(f_TypeData),Format('Typed map %s - Can''t find type data',[rMapID.rName]));
//#UC END# *478E20F70032_478E1E9E01CE_impl*
//#UC START# *478E20F70032_478E1E9E01CE_var*
//#UC END# *478E20F70032_478E1E9E01CE_var*
//#UC START# *478E212D0257_478E1DFA01DF_impl*
 inherited Create(aID, aTypeInfo);
 Assert(Length(aValues)=(f_TypeData.MaxValue-f_TypeData.MinValue+1),Format('Typed map %s - Mismatch map size',[rMapID.rName]));
 SetLength(f_Values, f_TypeData.MaxValue-f_TypeData.MinValue+1);
 for l_Index := Low(aValues) to High(aValues) do
  f_Values[l_Index-Low(aValues)+Low(f_Values)] := aValues[l_Index];
 Assert(Length(aValues)=(f_TypeData.MaxValue-f_TypeData.MinValue+1),Format('Typed map %s - Mismatch map size',[rMapID.rName]));
//#UC END# *478E212D0257_478E1DFA01DF_impl*
//#UC START# *478E212D0257_478E1DFA01DF_var*
var
 l_Index: Integer;
//#UC END# *478E212D0257_478E1DFA01DF_var*
//#UC START# *478E21AD021D_478E1E3A0182_impl*
 inherited Create(aID, aTypeInfo);
 Assert(Length(aValues)=(f_TypeData.MaxValue-f_TypeData.MinValue+1),Format('Typed map %s - Mismatch map size',[rMapID.rName]));
 SetLength(f_Values, f_TypeData.MaxValue-f_TypeData.MinValue+1);
 for l_Index := Low(aValues) to High(aValues) do
  f_Values[l_Index-Low(aValues)+Low(f_Values)] := aValues[l_Index];
 Assert(Length(aValues)=(f_TypeData.MaxValue-f_TypeData.MinValue+1),Format('Typed map %s - Mismatch map size',[rMapID.rName]));
//#UC END# *478E21AD021D_478E1E3A0182_impl*
//#UC START# *478E21AD021D_478E1E3A0182_var*
var
 l_Index: Integer;
//#UC END# *478E21AD021D_478E1E3A0182_var*
//#UC START# *478E235D0041_478E1DFA01DF_impl*
 for l_Index := Low(f_Values) to High(f_Values) do
  if l3Same(aDisplayName, l3CStr(f_Values[l_Index])) then
  begin
   Result := l_Index + f_TypeData.MinValue - Low(f_Values);
   exit;
  end;//l3Same(aDisplayName, 
 raise El3ValueMapValueNotFound.CreateFmt('Display name %s not found in Map %d',[l3Str(aDisplayName),rMapID.rID]);
//#UC END# *478E235D0041_478E1DFA01DF_impl*
//#UC START# *478E235D0041_478E1DFA01DF_var*
var
 l_Index: Integer;
//#UC END# *478E235D0041_478E1DFA01DF_var*
//#UC START# *478E235D0041_478E1E3A0182_impl*
 for l_Index := Low(f_Values) to High(f_Values) do
  if l3Same(aDisplayName, f_Values[l_Index]) then
  begin
   Result := l_Index + f_TypeData.MinValue - Low(f_Values);
   exit;
  end;//l3Same(aDisplayName, 
 raise El3ValueMapValueNotFound.CreateFmt('Display name %s not found in Map %d',[l3Str(aDisplayName), rMapID.rID]);
//#UC END# *478E235D0041_478E1E3A0182_impl*
//#UC START# *478E235D0041_478E1E3A0182_var*
var
 l_Index: Integer;
//#UC END# *478E235D0041_478E1E3A0182_var*
//#UC START# *478E237001B3_478E1DFA01DF_impl*
 if (aValue<f_TypeData.MinValue) or (aValue>f_TypeData.MaxValue) then
  raise El3ValueMapValueNotFound.CreateFmt('Value %d not found in Map %s',[aValue,rMapID.rName]);
 Result := l3CStr(f_Values[aValue - f_TypeData.MinValue + Low(f_Values)]);
//#UC END# *478E237001B3_478E1DFA01DF_impl*
//#UC START# *478E237001B3_478E1DFA01DF_var*
//#UC END# *478E237001B3_478E1DFA01DF_var*
//#UC START# *478E237001B3_478E1E3A0182_impl*
 if (aValue<f_TypeData.MinValue) or (aValue>f_TypeData.MaxValue) then
  raise El3ValueMapValueNotFound.CreateFmt('Value %d not found in Map %s',[aValue,rMapID.rName]);
 Result := l3CStr(f_Values[aValue - f_TypeData.MinValue + Low(f_Values)]);
//#UC END# *478E237001B3_478E1E3A0182_impl*
//#UC START# *478E237001B3_478E1E3A0182_var*
//#UC END# *478E237001B3_478E1E3A0182_var*
//#UC START# *479731C50290_478E1DFA01DF_impl*
 f_Values := nil;
 inherited;
//#UC END# *479731C50290_478E1DFA01DF_impl*
//#UC START# *479731C50290_478E1DFA01DF_var*
//#UC END# *479731C50290_478E1DFA01DF_var*
//#UC START# *479731C50290_478E1E3A0182_impl*
 f_Values := nil;
 inherited;
//#UC END# *479731C50290_478E1E3A0182_impl*
//#UC START# *479731C50290_478E1E3A0182_var*
//#UC END# *479731C50290_478E1E3A0182_var*
