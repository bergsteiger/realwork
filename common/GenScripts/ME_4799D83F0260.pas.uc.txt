//#UC START# *46A465CD021A_4799D40F0004_impl*
 Result := (Get_PrinterIndex >= 0);
//#UC END# *46A465CD021A_4799D40F0004_impl*
//#UC START# *46A465CD021A_4799D40F0004_var*
//#UC END# *46A465CD021A_4799D40F0004_var*
//#UC START# *46A4692C01C1_4799D40F0004get_impl*
 if f_NoPrinter or (Printers.Count = 0) then
  Result := -1   //^^^^^^^^^^^^^^^^^^^^ - http://mdp.garant.ru/pages/viewpage.action?pageId=316114187
 else
  try
   Result := PrinterIndex;
  except
   on EPrinter do
    lp_OnError
   else
    raise;
  end;//try..except
//#UC END# *46A4692C01C1_4799D40F0004get_impl*
//#UC START# *46A4692C01C1_4799D40F0004get_var*
 procedure lp_OnError;
 begin
  Result := -1;
  f_NoPrinter := true;
 end;
//#UC END# *46A4692C01C1_4799D40F0004get_var*
//#UC START# *46A4692C01C1_4799D40F0004set_impl*
 l_Index := Get_PrinterIndex;
 if (l_Index <> aValue) then
 begin
  // http://mdp.garant.ru/pages/viewpage.action?pageId=611828637
  l_Copies := Self.Copies;
  l_Title := Self.Get_Title;
  l_FileName := Self.Get_FileName;
  l_Collate := Self.Get_Collate;
  PrinterIndex := aValue;
  with THackPrinterDevice(Printers.Objects[PrinterIndex{aValue}]) do
   SetPrinter(PChar(Device), PChar(Driver), PChar(Port), 0);
  Self.Copies := l_Copies;
  Il3Printer(Self).Title := l_Title;
  Il3Printer(Self).FileName := l_FileName;
  Il3Printer(Self).Collate := l_Collate;
 end//l_Index <> aValue
 else
  PrinterIndex := aValue;
//#UC END# *46A4692C01C1_4799D40F0004set_impl*
//#UC START# *46A4692C01C1_4799D40F0004set_var*
var
 l_Index : Integer;
 l_Copies : Integer;
 l_Title : Il3CString;
 l_FileName : AnsiString;
 l_Collate : Boolean;
//#UC END# *46A4692C01C1_4799D40F0004set_var*
//#UC START# *46A4696D021E_4799D40F0004get_impl*
 Result := l3CStr(Title);
//#UC END# *46A4696D021E_4799D40F0004get_impl*
//#UC START# *46A4696D021E_4799D40F0004get_var*
//#UC END# *46A4696D021E_4799D40F0004get_var*
//#UC START# *46A4696D021E_4799D40F0004set_impl*
 l_Value := aValue;
 l_Len := l3Len(l_Value);
 if (l_Len > cMaxValueLen) then
  l3Delete(l_Value, cMaxValueLen, l_Len - cMaxValueLen);
 Title := l3Str(l_Value);
 //http://mdp.garant.ru/pages/viewpage.action?pageId=623935085
//#UC END# *46A4696D021E_4799D40F0004set_impl*
//#UC START# *46A4696D021E_4799D40F0004set_var*
const
 cMaxValueLen = 255;
var
 l_Value: Il3CString;
 l_Len: Integer;
//#UC END# *46A4696D021E_4799D40F0004set_var*
//#UC START# *46A469970084_4799D40F0004get_impl*
 {$IfDef DesignTimeLibrary}
 Result := '';
 {$Else  DesignTimeLibrary}
 {$IfDef l3HackedVCL}
 Result := Output;
 {$Else  l3HackedVCL}
 Result := '';
 {$EndIf l3HackedVCL}
 {$EndIf DesignTimeLibrary}
//#UC END# *46A469970084_4799D40F0004get_impl*
//#UC START# *46A469970084_4799D40F0004get_var*
//#UC END# *46A469970084_4799D40F0004get_var*
//#UC START# *46A469970084_4799D40F0004set_impl*
 {$IfNDef DesignTimeLibrary}
 {$IfDef l3HackedVCL}
 Output := aValue;
 {$Else  l3HackedVCL}
 if (aValue <> '') then
  assert(false);
 {$EndIf l3HackedVCL}
 {$EndIf  DesignTimeLibrary}
//#UC END# *46A469970084_4799D40F0004set_impl*
//#UC START# *46A469970084_4799D40F0004set_var*
//#UC END# *46A469970084_4799D40F0004set_var*
//#UC START# *46A46A95001B_4799D40F0004get_impl*
 if f_NoPrinter then
  Result := l3PrnIC.DC
 else
  try
   Result := Handle;
  except
   on EPrinter do
    lp_OnError;
   on EOSError do
    if Printers.Count = 0 then
     lp_OnError
    else
     raise;
  end;//try..except
//#UC END# *46A46A95001B_4799D40F0004get_impl*
//#UC START# *46A46A95001B_4799D40F0004get_var*
 procedure lp_OnError;
 begin
  Result := l3PrnIC.DC;
  f_NoPrinter := true;
 end;
//#UC END# *46A46A95001B_4799D40F0004get_var*
//#UC START# *46A46ACA00CC_4799D40F0004get_impl*
 if not HasPrinter then
  // - нету принтеров
  Result := (l3PrnIC As Il3Canvas).Canvas
 else
  Result := Canvas;
//#UC END# *46A46ACA00CC_4799D40F0004get_impl*
//#UC START# *46A46ACA00CC_4799D40F0004get_var*
//#UC END# *46A46ACA00CC_4799D40F0004get_var*
//#UC START# *46A46AF00379_4799D40F0004get_impl*
 Result := Printers;
//#UC END# *46A46AF00379_4799D40F0004get_impl*
//#UC START# *46A46AF00379_4799D40F0004get_var*
//#UC END# *46A46AF00379_4799D40F0004get_var*
//#UC START# *46A46B9E02CF_4799D40F0004get_impl*
 if f_NoPrinter then
  Result := l3_poPortrait
 else
  try
   if (Orientation = poLandscape) then
    Result := l3_poLandscape
   else
    Result := l3_poPortrait;
  except
   on EPrinter do
    lp_OnError;
   on EOSError do
    if Printers.Count = 0 then
     lp_OnError
    else
     raise;
  end;//try..except
//#UC END# *46A46B9E02CF_4799D40F0004get_impl*
//#UC START# *46A46B9E02CF_4799D40F0004get_var*
 procedure lp_OnError;
 begin
  Result := l3_poPortrait;
  f_NoPrinter := true;
 end;
//#UC END# *46A46B9E02CF_4799D40F0004get_var*
//#UC START# *46A46B9E02CF_4799D40F0004set_impl*
 if (Get_Orientation <> aValue) then
 begin
  if Printing then
  begin
   with THackPrinter(Self) do
   begin
    Windows.EndPage(DC);
    if (aValue = l3_poPortrait) then
     DevMode^.dmOrientation := DMORIENT_PORTRAIT
    else
     DevMode^.dmOrientation := DMORIENT_LANDSCAPE;
    if (Windows.ResetDC(DC, DevMode^) = 0) then
    begin
     // - не получилось изменить параметры устройства
     if not Aborted then
      Windows.EndDoc(DC);
     FPrinting := False;
     FAborted := False;
     FPageNumber := 0;
     try
      if (aValue = l3_poPortrait) then
       Orientation := poPortrait
      else
       Orientation := poLandscape;
     except
      on EPrinter do
       f_NoPrinter := True;
      on EOSError do
       if Printers.Count = 0 then
        f_NoPrinter := True
       else
        raise;
     end;
     BeginDoc;
    end//Windows.ResetDC(DC, DevMode^) = 0
    else
    begin
     Windows.StartPage(DC);
     Canvas.Refresh;
    end;//Windows.ResetDC..
   end;//with THackPrinter(Self)
  end//Printing
  else
  try
   if (aValue = l3_poLandscape) then
    Orientation := poLandscape
   else
    Orientation := poPortrait;
  except
   on EPrinter do
    f_NoPrinter := True;
   on EOSError do
    if Printers.Count = 0 then
     f_NoPrinter := True
    else
     raise;
  end;
 end;//Orientation <> aValue
//#UC END# *46A46B9E02CF_4799D40F0004set_impl*
//#UC START# *46A46B9E02CF_4799D40F0004set_var*
//#UC END# *46A46B9E02CF_4799D40F0004set_var*
//#UC START# *46A46C000399_4799D40F0004get_impl*
 Result := Printing;
//#UC END# *46A46C000399_4799D40F0004get_impl*
//#UC START# *46A46C000399_4799D40F0004get_var*
//#UC END# *46A46C000399_4799D40F0004get_var*
//#UC START# *46A46C1B00DA_4799D40F0004get_impl*
 if f_NoPrinter then
  Result := LP2DP(l3PointY(def_inchPaperHeight)).Y
 else
  try
   Result := PageHeight;
  except
   on EPrinter do
    lp_OnError;
   on EOSError do
    if Printers.Count = 0 then
     lp_OnError
    else
     raise;
  end;//try..except
//#UC END# *46A46C1B00DA_4799D40F0004get_impl*
//#UC START# *46A46C1B00DA_4799D40F0004get_var*
 procedure lp_OnError;
 begin
  Result := LP2DP(l3PointY(def_inchPaperHeight)).Y;
  f_NoPrinter := true;
 end;
//#UC END# *46A46C1B00DA_4799D40F0004get_var*
//#UC START# *46A46C2D00C2_4799D40F0004get_impl*
 if f_NoPrinter then
  Result := LP2DP(l3PointX(def_inchPaperWidth)).X
 else
  try
   Result := PageWidth;
  except
   on EPrinter do
    lp_OnError;
   on EOSError do
    if Printers.Count = 0 then
     lp_OnError
    else
     raise;
  end;//try..except
//#UC END# *46A46C2D00C2_4799D40F0004get_impl*
//#UC START# *46A46C2D00C2_4799D40F0004get_var*
 procedure lp_OnError;
 begin
  Result := LP2DP(l3PointX(def_inchPaperWidth)).X;
  f_NoPrinter := true;
 end;
//#UC END# *46A46C2D00C2_4799D40F0004get_var*
//#UC START# *46A46C410049_4799D40F0004get_impl*
 Result := Copies;
//#UC END# *46A46C410049_4799D40F0004get_impl*
//#UC START# *46A46C410049_4799D40F0004get_var*
//#UC END# *46A46C410049_4799D40F0004get_var*
//#UC START# *46A46C410049_4799D40F0004set_impl*
 Copies := aValue;
//#UC END# *46A46C410049_4799D40F0004set_impl*
//#UC START# *46A46C410049_4799D40F0004set_var*
//#UC END# *46A46C410049_4799D40F0004set_var*
//#UC START# *479731C50290_4799D40F0004_impl*
 f_NoPrinter := false;
 inherited;
//#UC END# *479731C50290_4799D40F0004_impl*
//#UC START# *479731C50290_4799D40F0004_var*
//#UC END# *479731C50290_4799D40F0004_var*
//#UC START# *4799B438008C_4799D40F0004get_impl*
 if f_NoPrinter then
 begin
  Result.X := def_inchPaperWidth;
  Result.Y := def_inchPaperHeight;
 end
 else
  try
   Result := DP2LP(l3SPoint(GetDeviceCaps(Handle, PHYSICALWIDTH), GetDeviceCaps(Handle, PHYSICALHEIGHT)));
  except
   on EPrinter do
    lp_OnError;
   on EOSError do
    if Printers.Count = 0 then
     lp_OnError
    else
     raise;
  end;//try..except
//#UC END# *4799B438008C_4799D40F0004get_impl*
//#UC START# *4799B438008C_4799D40F0004get_var*
 procedure lp_OnError;
 begin
  Result.X := def_inchPaperWidth;
  Result.Y := def_inchPaperHeight;
  f_NoPrinter := true;
 end;
//#UC END# *4799B438008C_4799D40F0004get_var*
//#UC START# *4799D83F0260_ext:FileName
w:\common\components\rtl\Garant\L3\l3Printer.pas
//#UC END# *4799D83F0260_ext:FileName
//#UC START# *4799D83F0260impl_uses*
//#UC END# *4799D83F0260impl_uses*
//#UC START# *49BAA08901A2_4799D40F0004_impl*
 Result.X := l3MulDiv(P.X, GetDeviceCaps(Handle, LOGPIXELSX), l3Inch);
 Result.Y := l3MulDiv(P.Y, GetDeviceCaps(Handle, LOGPIXELSY), l3Inch);
//#UC END# *49BAA08901A2_4799D40F0004_impl*
//#UC START# *49BAA08901A2_4799D40F0004_var*
//#UC END# *49BAA08901A2_4799D40F0004_var*
//#UC START# *49BAA09D01C8_4799D40F0004_impl*
 Result.X := l3MulDiv(P.X, l3Inch, GetDeviceCaps(Handle, LOGPIXELSX));
 Result.Y := l3MulDiv(P.Y, l3Inch, GetDeviceCaps(Handle, LOGPIXELSY));
//#UC END# *49BAA09D01C8_4799D40F0004_impl*
//#UC START# *49BAA09D01C8_4799D40F0004_var*
//#UC END# *49BAA09D01C8_4799D40F0004_var*
//#UC START# *49BAA14602EC_4799D40F0004_impl*
  Result := nil;
  l_PrinterIndex := Self.PrinterIndex; // Если что-то с принтером, то лучше упадем уже здесь...
  Result := Make;
  Result.PrinterIndex := l_PrinterIndex;
  Result.Copies := Self.Copies;
  Result.Title := Self.Get_Title;
  Result.FileName := Self.Get_FileName;
  Result.Collate := Self.Get_Collate;

  // Копируем настройки принтера:
  Self.GetPrinter(l_Device, l_Driver, l_Port, l_hDeviceMode);
  Result.SetPrinter(l_Device, l_Driver, l_Port, CopyData(l_Device, l_hDeviceMode));
  //Result.SetPrinter(l_Device, l_Driver, l_Port, 0);
  // - http://mdp.garant.ru/pages/viewpage.action?pageId=249069717
//#UC END# *49BAA14602EC_4799D40F0004_impl*
//#UC START# *49BAA14602EC_4799D40F0004_var*

 function CopyData(aDevice: PChar; Handle: THandle): THandle;
 var
   Src, Dest: PDeviceMode;
   Size: Integer;
   l_Same : Boolean;
 begin
   if (Handle <> 0) then
   begin
     Size := GlobalSize(Handle);
     Result := GlobalAlloc(GHND, Size);
     if (Result <> 0) then
     begin
      try
        Src := GlobalLock(Handle);
        Dest := GlobalLock(Result);
        if (Src <> nil) and (Dest <> nil) then
        begin
         l3Move(Src^, Dest^, Size);
         l_Same := true;
         // http://mdp.garant.ru/pages/viewpage.action?pageId=611828637
         // - т.к. там почему-то лежит обрезанное имя
         //l_Same := StrComp(aDevice, Dest^.dmDeviceName) = 0;
         //l3Move(aDevice^, Dest^.dmDeviceName, StrLen(aDevice) + 1);
        end;//Src <> nil
      finally
        GlobalUnlock(Handle);
        GlobalUnlock(Result);
      end;//try..finally
      if not l_Same then
      // - http://mdp.garant.ru/pages/viewpage.action?pageId=249069717
      // - http://mdp.garant.ru/pages/viewpage.action?pageId=611828637
      begin
       GlobalFree(Result);
       Result := 0;
      end;//not l_Same
     end;//Result <> 0
   end//Handle <> 0
   else
    Result := 0;
 end;

var
 l_PrinterIndex : Integer;
 l_Device,
 l_Driver,
 l_Port        : Array[0..255] of Char;
 l_hDeviceMode : THandle;
//#UC END# *49BAA14602EC_4799D40F0004_var*
//#UC START# *4C2D834D0019_4799D40F0004get_impl*
 with THackPrinter(Self) do
 begin
  PrinterIndex;
  if DeviceMode = 0 then
   raise EPrinter.Create(SInvalidPrinterOp);
  Result := Get_CanCollate and (DevMode^.dmCollate = DMCOLLATE_TRUE);
 end;
//#UC END# *4C2D834D0019_4799D40F0004get_impl*
//#UC START# *4C2D834D0019_4799D40F0004get_var*
//#UC END# *4C2D834D0019_4799D40F0004get_var*
//#UC START# *4C2D834D0019_4799D40F0004set_impl*
 if Get_CanCollate then
  with THackPrinter(Self) do
  begin
   PrinterIndex;
   if DeviceMode = 0 then
    raise EPrinter.Create(SInvalidPrinterOp);
   DevMode^.dmCollate := cMap[aValue];
  end;
//#UC END# *4C2D834D0019_4799D40F0004set_impl*
//#UC START# *4C2D834D0019_4799D40F0004set_var*
const
 cMap: array [Boolean] of Integer = (DMCOLLATE_FALSE, DMCOLLATE_TRUE);
//#UC END# *4C2D834D0019_4799D40F0004set_var*
//#UC START# *4C2D837000AB_4799D40F0004get_impl*
 Result := pcCollation in Capabilities;
//#UC END# *4C2D837000AB_4799D40F0004get_impl*
//#UC START# *4C2D837000AB_4799D40F0004get_var*
//#UC END# *4C2D837000AB_4799D40F0004get_var*
//#UC START# *4F36910C00F8_4799D40F0004_impl*
 inherited Refresh;
//#UC END# *4F36910C00F8_4799D40F0004_impl*
//#UC START# *4F36910C00F8_4799D40F0004_var*
//#UC END# *4F36910C00F8_4799D40F0004_var*
