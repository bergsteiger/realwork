//#UC START# *46825CAA0125_48724DAD02E0get_impl*
 Result := f_Root;
//#UC END# *46825CAA0125_48724DAD02E0get_impl*
//#UC START# *46825CAA0125_48724DAD02E0get_var*
//#UC END# *46825CAA0125_48724DAD02E0get_var*
//#UC START# *46825CAA0125_48724DAD02E0set_impl*
 if not l3IEQ(f_Root, aValue) then
 begin
  l_OldRoot := f_Root;
  try
   //DropCountView;
   f_Root := aValue;
   CursorTop;
   RootChanged(l_OldRoot, aValue);
  finally
   l_OldRoot := nil;
  end;//try..finally
 end;//not l3IEQ(f_Root, aValue)
//#UC END# *46825CAA0125_48724DAD02E0set_impl*
//#UC START# *46825CAA0125_48724DAD02E0set_var*
var
 l_OldRoot : Il3SimpleRootNode;
//#UC END# *46825CAA0125_48724DAD02E0set_var*
//#UC START# *4772448C01D2_48724DAD02E0_impl*
 // - пока ничего не делаем
//#UC END# *4772448C01D2_48724DAD02E0_impl*
//#UC START# *4772448C01D2_48724DAD02E0_var*
//#UC END# *4772448C01D2_48724DAD02E0_var*
//#UC START# *4772449B00A1_48724DAD02E0_impl*
 Result := DoGetIndex(aNode, aSubRootNode);
//#UC END# *4772449B00A1_48724DAD02E0_impl*
//#UC START# *4772449B00A1_48724DAD02E0_var*
//#UC END# *4772449B00A1_48724DAD02E0_var*
//#UC START# *477244BA0074_48724DAD02E0_impl*
 if (aNode = nil) then
  Result := 0
 else
 begin
  Result := aNode.GetLevelFor(f_Root);
// Сейчас не нужно, т.к. в дереве корректируется  
//  if not ShowRoot then
//   Dec(Result);
 end;
//#UC END# *477244BA0074_48724DAD02E0_impl*
//#UC START# *477244BA0074_48724DAD02E0_var*
//#UC END# *477244BA0074_48724DAD02E0_var*
//#UC START# *477244CE02AE_48724DAD02E0_impl*
 Assert(false);
//#UC END# *477244CE02AE_48724DAD02E0_impl*
//#UC START# *477244CE02AE_48724DAD02E0_var*
//#UC END# *477244CE02AE_48724DAD02E0_var*
//#UC START# *477244DD0292_48724DAD02E0_impl*
 Assert(false);
//#UC END# *477244DD0292_48724DAD02E0_impl*
//#UC START# *477244DD0292_48724DAD02E0_var*
//#UC END# *477244DD0292_48724DAD02E0_var*
//#UC START# *47724512002D_48724DAD02E0_impl*
 Result := DoChangeExpand(aNode, aMode, aForceMode);
//#UC END# *47724512002D_48724DAD02E0_impl*
//#UC START# *47724512002D_48724DAD02E0_var*
//#UC END# *47724512002D_48724DAD02E0_var*
//#UC START# *4772452E002D_48724DAD02E0_impl*
 Assert(false);
//#UC END# *4772452E002D_48724DAD02E0_impl*
//#UC START# *4772452E002D_48724DAD02E0_var*
//#UC END# *4772452E002D_48724DAD02E0_var*
//#UC START# *477245520298_48724DAD02E0_impl*
 Assert(false);
//#UC END# *477245520298_48724DAD02E0_impl*
//#UC START# *477245520298_48724DAD02E0_var*
//#UC END# *477245520298_48724DAD02E0_var*
//#UC START# *4772457D032A_48724DAD02E0_impl*
 Result := DoCountViewItemsInSubDir(aNode);
//#UC END# *4772457D032A_48724DAD02E0_impl*
//#UC START# *4772457D032A_48724DAD02E0_var*
//#UC END# *4772457D032A_48724DAD02E0_var*
//#UC START# *477245A20228_48724DAD02E0_impl*
 Result := (f_Root <> nil) AND (aNode <> nil) AND f_Root.IsSame(aNode);
//#UC END# *477245A20228_48724DAD02E0_impl*
//#UC START# *477245A20228_48724DAD02E0_var*
//#UC END# *477245A20228_48724DAD02E0_var*
//#UC START# *477245B301DE_48724DAD02E0_impl*
 Result := DoIsExpanded(aNode);
//#UC END# *477245B301DE_48724DAD02E0_impl*
//#UC START# *477245B301DE_48724DAD02E0_var*
//#UC END# *477245B301DE_48724DAD02E0_var*
//#UC START# *477245C40171_48724DAD02E0_impl*
 if (aNode = nil) then
  Result := true
 else
  Result := aNode.IsFirst; 
//#UC END# *477245C40171_48724DAD02E0_impl*
//#UC START# *477245C40171_48724DAD02E0_var*
//#UC END# *477245C40171_48724DAD02E0_var*
//#UC START# *477245D9031B_48724DAD02E0_impl*
 if (aNode = nil) then
  Result := true
 else
  Result := aNode.IsLast;
//#UC END# *477245D9031B_48724DAD02E0_impl*
//#UC START# *477245D9031B_48724DAD02E0_var*
//#UC END# *477245D9031B_48724DAD02E0_var*
//#UC START# *477245F301AE_48724DAD02E0_impl*
 if (aNode = nil) then
  Result := false
 else
  Result := aNode.HasChild; 
//#UC END# *477245F301AE_48724DAD02E0_impl*
//#UC START# *477245F301AE_48724DAD02E0_var*
//#UC END# *477245F301AE_48724DAD02E0_var*
//#UC START# *477246040221_48724DAD02E0_impl*
 with f_Root do
  if IsSame(aNode) then
   Result := 0
  else
  begin
   Result := 1;
   lCNode := aNode.Parent;
   if (lCNode = nil) then
    Result := 0
   else
   begin
    while not IsSame(lCNode) do
    begin
     Result := Result shl 1;
     If not IsLastVis(lCNode) then l3SetBit(Result, 0);

     lCNode := lCNode.Parent;
     If lCNode = nil then Exit;
    end;
   end;//lCNode = nil
  end;//IsSame(aNode)
//#UC END# *477246040221_48724DAD02E0_impl*
//#UC START# *477246040221_48724DAD02E0_var*
var
 lCNode  : Il3SimpleNode;
//#UC END# *477246040221_48724DAD02E0_var*
//#UC START# *4772461601C6_48724DAD02E0_impl*
 Result := false; // - мы типа и не спали
//#UC END# *4772461601C6_48724DAD02E0_impl*
//#UC START# *4772461601C6_48724DAD02E0_var*
//#UC END# *4772461601C6_48724DAD02E0_var*
//#UC START# *477246270133_48724DAD02E0_impl*
 Result := false; // !STUB!
//#UC END# *477246270133_48724DAD02E0_impl*
//#UC START# *477246270133_48724DAD02E0_var*
//#UC END# *477246270133_48724DAD02E0_var*
//#UC START# *477246440037_48724DAD02E0_impl*
 Result := nil; // !STUB!
//#UC END# *477246440037_48724DAD02E0_impl*
//#UC START# *477246440037_48724DAD02E0_var*
//#UC END# *477246440037_48724DAD02E0_var*
//#UC START# *4772465F0276_48724DAD02E0_impl*
 Result := nil; // !STUB!
//#UC END# *4772465F0276_48724DAD02E0_impl*
//#UC START# *4772465F0276_48724DAD02E0_var*
//#UC END# *4772465F0276_48724DAD02E0_var*
//#UC START# *477246860169_48724DAD02E0_impl*
 Result := DoMakeNodeVisible(aNode);
//#UC END# *477246860169_48724DAD02E0_impl*
//#UC START# *477246860169_48724DAD02E0_var*
//#UC END# *477246860169_48724DAD02E0_var*
//#UC START# *477246A40174_48724DAD02E0_impl*
 Result := nil; // !STUB!
//#UC END# *477246A40174_48724DAD02E0_impl*
//#UC START# *477246A40174_48724DAD02E0_var*
//#UC END# *477246A40174_48724DAD02E0_var*
//#UC START# *477246C70141_48724DAD02E0_impl*
 try
  if aSubRootNode = nil then
   l_RootNode := f_Root
  else
   l_RootNode := l_RootNode;
  Result := l_RootNode.Child;
  while (Result <> nil) do
  begin
   l_Stop := Action(Result);
   if l_Stop AND l3TestMask(IterMode, imCheckResult) then
    break;
   Result := Result.Next;  
  end;//while (Result <> nil)
 finally
  l3FreeFA(Tl3FreeAction(Action));
 end;//try..finally
//#UC END# *477246C70141_48724DAD02E0_impl*
//#UC START# *477246C70141_48724DAD02E0_var*
var
 l_RootNode : Il3SimpleNode;
 l_Stop     : Boolean;
//#UC END# *477246C70141_48724DAD02E0_var*
//#UC START# *477246E802B1_48724DAD02E0_impl*
 Result := false;
//#UC END# *477246E802B1_48724DAD02E0_impl*
//#UC START# *477246E802B1_48724DAD02E0_var*
//#UC END# *477246E802B1_48724DAD02E0_var*
//#UC START# *477246F7039B_48724DAD02E0_impl*
 if (NotifiedObjList <> nil) then
  for l_Index := NotifiedObjList.Hi downto 0 do
   try
    l_Item := IUnknown(f_NotifiedObjList[l_Index]);
    if Supports(l_Item, Il3ChangeRecipient, l_Intf) AND
       (l_Item = l_Intf) then
     try
      l_Intf.Changing;
     finally
      l_Intf := nil;
     end;//try..finaly
   except
    on E: Exception do
     l3System.Exception2Log(E);
   end;
//#UC END# *477246F7039B_48724DAD02E0_impl*
//#UC START# *477246F7039B_48724DAD02E0_var*
var
 l_Index : Integer;
 l_Intf  : Il3ChangeRecipient;
 l_Item  : IUnknown;
//#UC END# *477246F7039B_48724DAD02E0_var*
//#UC START# *4772470100BC_48724DAD02E0_impl*
 l_Expt := false;
 try
  if (NotifiedObjList <> nil) then
   for l_Index := NotifiedObjList.Hi downto 0 do
    try
     l_Item := IUnknown(f_NotifiedObjList[l_Index]);
     if Supports(l_Item, Il3ChangeRecipient, l_Intf) AND
        (l_Item = l_Intf) then
      try
       l_Intf.Changed;
      finally
       l_Intf := nil;
      end;//try..finaly
    except
     on EDoChangedAlreadyDone do
      l_Expt := True;
     on E: Exception do
      l3System.Exception2Log(E);
       // Гасим все прочие исключения.
    end;
 finally
  if l_Expt then
   raise EDoChangedAlreadyDone.Create('');
 end;
//#UC END# *4772470100BC_48724DAD02E0_impl*
//#UC START# *4772470100BC_48724DAD02E0_var*
var
 l_Index : Integer;
 l_Intf  : Il3ChangeRecipient;
 l_Item  : IUnknown;
 l_Expt  : Boolean;
//#UC END# *4772470100BC_48724DAD02E0_var*
//#UC START# *477248FE005A_48724DAD02E0get_impl*
 Result := f_ShowRoot; 
//#UC END# *477248FE005A_48724DAD02E0get_impl*
//#UC START# *477248FE005A_48724DAD02E0get_var*
//#UC END# *477248FE005A_48724DAD02E0get_var*
//#UC START# *477248FE005A_48724DAD02E0set_impl*
 DoSetShowRoot(aValue);
//#UC END# *477248FE005A_48724DAD02E0set_impl*
//#UC START# *477248FE005A_48724DAD02E0set_var*
//#UC END# *477248FE005A_48724DAD02E0set_var*
//#UC START# *4772490E02F7_48724DAD02E0get_impl*
 Result := DoGet_CountView;
//#UC END# *4772490E02F7_48724DAD02E0get_impl*
//#UC START# *4772490E02F7_48724DAD02E0get_var*
//#UC END# *4772490E02F7_48724DAD02E0get_var*
//#UC START# *4772491C01C5_48724DAD02E0get_impl*
 Result := 0;
//#UC END# *4772491C01C5_48724DAD02E0get_impl*
//#UC START# *4772491C01C5_48724DAD02E0get_var*
//#UC END# *4772491C01C5_48724DAD02E0get_var*
//#UC START# *4772495902EE_48724DAD02E0get_impl*
 Result := DoGet_Flags(anIndex);
//#UC END# *4772495902EE_48724DAD02E0get_impl*
//#UC START# *4772495902EE_48724DAD02E0get_var*
//#UC END# *4772495902EE_48724DAD02E0get_var*
//#UC START# *477249AB0057_48724DAD02E0get_impl*
 Result := false;
 Assert(false);
//#UC END# *477249AB0057_48724DAD02E0get_impl*
//#UC START# *477249AB0057_48724DAD02E0get_var*
//#UC END# *477249AB0057_48724DAD02E0get_var*
//#UC START# *477249AB0057_48724DAD02E0set_impl*
 Assert(false);
//#UC END# *477249AB0057_48724DAD02E0set_impl*
//#UC START# *477249AB0057_48724DAD02E0set_var*
//#UC END# *477249AB0057_48724DAD02E0set_var*
//#UC START# *477249EB02D9_48724DAD02E0get_impl*
 Result := DoGet_Nodes(anIndex);
//#UC END# *477249EB02D9_48724DAD02E0get_impl*
//#UC START# *477249EB02D9_48724DAD02E0get_var*
//#UC END# *477249EB02D9_48724DAD02E0get_var*
//#UC START# *479731C50290_48724DAD02E0_impl*
 f_Root := nil;
 inherited;
//#UC END# *479731C50290_48724DAD02E0_impl*
//#UC START# *479731C50290_48724DAD02E0_var*
//#UC END# *479731C50290_48724DAD02E0_var*
//#UC START# *47A86EA80292_48724DAD02E0_impl*
 Result := nil;
//#UC END# *47A86EA80292_48724DAD02E0_impl*
//#UC START# *47A86EA80292_48724DAD02E0_var*
//#UC END# *47A86EA80292_48724DAD02E0_var*
//#UC START# *47BAD3080349_48724DAD02E0_impl*
 Result := false;
//#UC END# *47BAD3080349_48724DAD02E0_impl*
//#UC START# *47BAD3080349_48724DAD02E0_var*
//#UC END# *47BAD3080349_48724DAD02E0_var*
//#UC START# *47BAD32501E2_48724DAD02E0_impl*
 Result := false;
//#UC END# *47BAD32501E2_48724DAD02E0_impl*
//#UC START# *47BAD32501E2_48724DAD02E0_var*
//#UC END# *47BAD32501E2_48724DAD02E0_var*
//#UC START# *48724DAD02E0_ext:FileName
w:\common\components\rtl\Garant\L3\l3SimpleTree.pas
//#UC END# *48724DAD02E0_ext:FileName
//#UC START# *48724DAD02E0ci*
//#UC END# *48724DAD02E0ci*
//#UC START# *48724DAD02E0cit*
//#UC END# *48724DAD02E0cit*
//#UC START# *48724DAD02E0impl*

function Tl3SimpleTree.DoGet_Nodes(anIndex: Integer): Il3SimpleNode;
begin//DoGet_Nodes
 if f_ShowRoot then
 begin
  if (anIndex = 0) then
  begin
   Result := f_Root;
   Exit
  end//anIndex = 0
  else
   Dec(anIndex);
 end;//f_ShowRoot
 Result := f_Root.Child;
 while (anIndex > 0) AND (Result <> nil) do
 begin
  Result := Result.Next;
  Dec(anIndex);
 end;//while (anIndex > 0)
end;//DoGet_Nodes

function Tl3SimpleTree.DoGet_CountView: Integer;
begin//DoGet_CountView
 if (f_Root = nil) then
  Result := 0
 else
 begin
  Result := f_Root.ThisChildrenCount;
  if f_ShowRoot then
   Inc(Result);
 end;//f_Root = nil
end;//DoGet_CountView

function Tl3SimpleTree.DoGet_Flags(anIndex: Integer): Integer;
begin//DoGet_Flags
 Result := 0;
 Assert(false);
end;//DoGet_Flags

function Tl3SimpleTree.DoChangeExpand(const aNode: Il3SimpleNode;
 aMode: Tl3SetBitType;
 aForceMode: Boolean): Boolean;
begin//DoChangeExpand
 Assert(false);
 Result := false;
end;//DoChangeExpand

function Tl3SimpleTree.DoIsExpanded(const aNode: Il3SimpleNode): Boolean;
begin
 Result := true;
end;

function Tl3SimpleTree.DoCountViewItemsInSubDir(const aNode: Il3SimpleNode): Integer;
begin
 Assert(false);
 Result := 0;
end;

function Tl3SimpleTree.DoGetIndex(const aNode: Il3SimpleNode;
 const aSubRootNode: Il3SimpleNode): Integer;
var
 l_Root : Il3SimpleNode;
begin
 if (aNode = nil) then
  Result := -1
 else
 begin
  if (aSubRootNode = nil) then
   l_Root := f_Root
  else
   l_Root := aSubRootNode;
  if aNode.IsSame(l_Root) then
   Result := 0
  else
   Result := aNode.IndexInParent + 1;
  if not f_ShowRoot then
   Dec(Result);
 end;//aNode = nil
end;

procedure Tl3SimpleTree.DoSetShowRoot(aValue: Boolean);
begin
 f_ShowRoot := aValue;
 CursorTop;
end;

function Tl3SimpleTree.DoMakeNodeVisible(const aNode: Il3SimpleNode): Integer;
begin
 Result := GetIndex(aNode);
end;

//#UC END# *48724DAD02E0impl*
//#UC START# *48724DAD02E0impl_uses*
//#UC END# *48724DAD02E0impl_uses*
//#UC START# *48724DAD02E0intf_uses*
//#UC END# *48724DAD02E0intf_uses*
//#UC START# *48724DAD02E0publ*
  protected
   function DoGet_Nodes(anIndex: Integer): Il3SimpleNode; virtual;
   function DoGet_CountView: Integer; virtual;
   function DoGet_Flags(anIndex: Integer): Integer; virtual;
   function DoChangeExpand(const aNode: Il3SimpleNode;
    aMode: Tl3SetBitType;
    aForceMode: Boolean): Boolean; virtual;
   function DoIsExpanded(const aNode: Il3SimpleNode): Boolean; virtual;
   function DoCountViewItemsInSubDir(const aNode: Il3SimpleNode): Integer; virtual;
   function DoGetIndex(const aNode: Il3SimpleNode;
    const aSubRootNode: Il3SimpleNode): Integer; virtual;
   procedure DoSetShowRoot(aValue: Boolean); virtual;
   function DoMakeNodeVisible(const aNode: Il3SimpleNode): Integer; virtual; 
//#UC END# *48724DAD02E0publ*
//#UC START# *48724FD5009D_48724DAD02E0_impl*
 inherited Create;
 f_Root := aRoot;
//#UC END# *48724FD5009D_48724DAD02E0_impl*
//#UC START# *48724FD5009D_48724DAD02E0_var*
//#UC END# *48724FD5009D_48724DAD02E0_var*
//#UC START# *487252020055_48724DAD02E0_impl*
 if HasNotified then
  for l_Index := 0 to Pred(NotifiedObjList.Count) do
  begin
   l_Item := IUnknown(NotifiedObjList.Items[l_Index]);
   if Supports(l_Item, Il3RootSpy, l_Spy) and (l_Item = l_Spy) then
    l_Spy.RootChanged(aOld, aNew);
  end;//if (NotifiedObjList <> nil)
//#UC END# *487252020055_48724DAD02E0_impl*
//#UC START# *487252020055_48724DAD02E0_var*
var
 l_Index : Integer;
 l_Spy   : Il3RootSpy;
 l_Item  : IUnknown;
//#UC END# *487252020055_48724DAD02E0_var*
