//#UC START# *068F6EC47A8A_497DDB2B001B_impl*
 LftRespondentQueryMaximized(aSender);
//#UC END# *068F6EC47A8A_497DDB2B001B_impl*
//#UC START# *068F6EC47A8A_497DDB2B001B_var*
//#UC END# *068F6EC47A8A_497DDB2B001B_var*
//#UC START# *0984ADDC3D53_497DDB2B001B_impl*
 LftRespondentQueryOpen(aSender);
//#UC END# *0984ADDC3D53_497DDB2B001B_impl*
//#UC START# *0984ADDC3D53_497DDB2B001B_var*
//#UC END# *0984ADDC3D53_497DDB2B001B_var*
//#UC START# *10133243E89D_497DDB2B001B_impl*
 LftRespondentQueryOpen(aSender);
//#UC END# *10133243E89D_497DDB2B001B_impl*
//#UC START# *10133243E89D_497DDB2B001B_var*
//#UC END# *10133243E89D_497DDB2B001B_var*
//#UC START# *1095984F87C1_497DDB2B001B_impl*
 LftRespondentQueryOpen(aSender);
//#UC END# *1095984F87C1_497DDB2B001B_impl*
//#UC START# *1095984F87C1_497DDB2B001B_var*
//#UC END# *1095984F87C1_497DDB2B001B_var*
//#UC START# *3D942CB394A8_497DDB2B001B_impl*
 LftRespondentQueryOpen(aSender);
//#UC END# *3D942CB394A8_497DDB2B001B_impl*
//#UC START# *3D942CB394A8_497DDB2B001B_var*
//#UC END# *3D942CB394A8_497DDB2B001B_var*
//#UC START# *3E3ACC41CC2A_497DDB2B001B_impl*
 LftRespondentQueryMaximized(aSender);
//#UC END# *3E3ACC41CC2A_497DDB2B001B_impl*
//#UC START# *3E3ACC41CC2A_497DDB2B001B_var*
//#UC END# *3E3ACC41CC2A_497DDB2B001B_var*
//#UC START# *47A0AD3A01F7_5677B9280204_impl*
 Result := inherited QueryInterface(IID, Obj);
//#UC END# *47A0AD3A01F7_5677B9280204_impl*
//#UC START# *47A0AD3A01F7_5677B9280204_var*
//#UC END# *47A0AD3A01F7_5677B9280204_var*
//#UC START# *47EA4E9002C6_497DDB2B001B_impl*
 inherited;
 if not IsAcceptable(True) then
 begin 
  if vcmDispatcher.History.CanBack then
   vcmDispatcher.History.Back(True);
 end;
//#UC END# *47EA4E9002C6_497DDB2B001B_impl*
//#UC START# *47EA4E9002C6_497DDB2B001B_var*
//#UC END# *47EA4E9002C6_497DDB2B001B_var*
//#UC START# *47EA4E9002C6_5677B9280204_impl*
 f_Options := [];
 f_TreeStructState := nil;
//#UC END# *47EA4E9002C6_5677B9280204_impl*
//#UC START# *47EA4E9002C6_5677B9280204_var*
//#UC END# *47EA4E9002C6_5677B9280204_var*
//#UC START# *4951284902BD_497DDB2B001Bexec_impl*
 aParams.CallControl;
//#UC END# *4951284902BD_497DDB2B001Bexec_impl*
//#UC START# *4951284902BD_497DDB2B001Bexec_var*
//#UC END# *4951284902BD_497DDB2B001Bexec_var*
//#UC START# *4951284902BD_497DDB2B001Btest_impl*
 if (aParams.Control = tvList) then
 begin
  SelectionOpsTest(aParams);
  //nsDisableOperationInTrialMode(aParams);
 end//aParams.Control = tvList
 else
  if not aParams.CallControl then
   aParams.Op.Flag[vcm_ofEnabled] := False;
//#UC END# *4951284902BD_497DDB2B001Btest_impl*
//#UC START# *4951284902BD_497DDB2B001Btest_var*
//#UC END# *4951284902BD_497DDB2B001Btest_var*
//#UC START# *49512B5D0009_497DDB2B001Bexec_impl*
 TBaseSearchService.Instance.OpenBaseSearch(ns_bsokLocal, nil);
//#UC END# *49512B5D0009_497DDB2B001Bexec_impl*
//#UC START# *49512B5D0009_497DDB2B001Bexec_var*
//#UC END# *49512B5D0009_497DDB2B001Bexec_var*
//#UC START# *49512B5D0009_497DDB2B001Btest_impl*
 ListOpsTest(aParams);
 if (BaseSearchSupportQuery <> nil) and
    not BaseSearchSupportQuery.CanRunBaseSearch then
 begin
  aParams.Op.Flag[vcm_ofEnabled] := False;
  aParams.Op.Flag[vcm_ofVisible] := False;
 end;//BaseSearchSupportQuery <> nil
//#UC END# *49512B5D0009_497DDB2B001Btest_impl*
//#UC START# *49512B5D0009_497DDB2B001Btest_var*
//#UC END# *49512B5D0009_497DDB2B001Btest_var*
//#UC START# *49513239027A_497DDB2B001Bget_impl*
 Result := f_SearchArea;
//#UC END# *49513239027A_497DDB2B001Bget_impl*
//#UC START# *49513239027A_497DDB2B001Bget_var*
//#UC END# *49513239027A_497DDB2B001Bget_var*
//#UC START# *49513239027A_497DDB2B001Bset_impl*
 f_SearchArea := aValue;
//#UC END# *49513239027A_497DDB2B001Bset_impl*
//#UC START# *49513239027A_497DDB2B001Bset_var*
//#UC END# *49513239027A_497DDB2B001Bset_var*
//#UC START# *4951325E03B6_497DDB2B001B_impl*
 Result := ns_bskList;
//#UC END# *4951325E03B6_497DDB2B001B_impl*
//#UC START# *4951325E03B6_497DDB2B001B_var*
//#UC END# *4951325E03B6_497DDB2B001B_var*
//#UC START# *4951329202AB_497DDB2B001B_impl*
 Result := False;
//#UC END# *4951329202AB_497DDB2B001B_impl*
//#UC START# *4951329202AB_497DDB2B001B_var*
//#UC END# *4951329202AB_497DDB2B001B_var*
//#UC START# *495132A703DF_497DDB2B001B_impl*
 Result := True;
//#UC END# *495132A703DF_497DDB2B001B_impl*
//#UC START# *495132A703DF_497DDB2B001B_var*
//#UC END# *495132A703DF_497DDB2B001B_var*
//#UC START# *495132B70156_497DDB2B001B_impl*
 Result := False;
//#UC END# *495132B70156_497DDB2B001B_impl*
//#UC START# *495132B70156_497DDB2B001B_var*
//#UC END# *495132B70156_497DDB2B001B_var*
//#UC START# *495132C20005_497DDB2B001B_impl*
// Do nothing
//#UC END# *495132C20005_497DDB2B001B_impl*
//#UC START# *495132C20005_497DDB2B001B_var*
//#UC END# *495132C20005_497DDB2B001B_var*
//#UC START# *495132CE010F_497DDB2B001B_impl*
 Result := True;
//#UC END# *495132CE010F_497DDB2B001B_impl*
//#UC START# *495132CE010F_497DDB2B001B_var*
//#UC END# *495132CE010F_497DDB2B001B_var*
//#UC START# *496B4C41023E_497DDB2B001B_impl*
 Result := False;
//#UC END# *496B4C41023E_497DDB2B001B_impl*
//#UC START# *496B4C41023E_497DDB2B001B_var*
//#UC END# *496B4C41023E_497DDB2B001B_var*
//#UC START# *496B4C500246_497DDB2B001B_impl*
 Result := True;
//#UC END# *496B4C500246_497DDB2B001B_impl*
//#UC START# *496B4C500246_497DDB2B001B_var*
//#UC END# *496B4C500246_497DDB2B001B_var*
//#UC START# *496B4CA000B6_497DDB2B001B_impl*
 Result := True;
//#UC END# *496B4CA000B6_497DDB2B001B_impl*
//#UC START# *496B4CA000B6_497DDB2B001B_var*
//#UC END# *496B4CA000B6_497DDB2B001B_var*
//#UC START# *496B4CD9005F_497DDB2B001B_impl*
 Result := False;
//#UC END# *496B4CD9005F_497DDB2B001B_impl*
//#UC START# *496B4CD9005F_497DDB2B001B_var*
//#UC END# *496B4CD9005F_497DDB2B001B_var*
//#UC START# *496B4CE30132_497DDB2B001B_impl*
 Result := False;
//#UC END# *496B4CE30132_497DDB2B001B_impl*
//#UC START# *496B4CE30132_497DDB2B001B_var*
//#UC END# *496B4CE30132_497DDB2B001B_var*
//#UC START# *496B4CED0306_497DDB2B001B_impl*
 Result := False;
//#UC END# *496B4CED0306_497DDB2B001B_impl*
//#UC START# *496B4CED0306_497DDB2B001B_var*
//#UC END# *496B4CED0306_497DDB2B001B_var*
//#UC START# *496B517202C5_497DDB2B001B_impl*
 if (f_SearchWindowVisible <> aNewVisible) then
 begin
  f_SearchWindowVisible := aNewVisible;
  tvList.Invalidate;
  //tvList.Perform(msg_vtUpdateScroll, 0, 0);
  //CheckExSearchPanelVisibility;
 end;//f_SearchWindowVisible <> aNewVisible
//#UC END# *496B517202C5_497DDB2B001B_impl*
//#UC START# *496B517202C5_497DDB2B001B_var*
//#UC END# *496B517202C5_497DDB2B001B_var*
//#UC START# *497469C90140_497DDB2B001B_impl*
 inherited;
 f_AllowCallCurrentChangedOnTest := True;
 if Assigned(aNew) then
 begin
  l_BS := TnsBaseSearchService.Instance.GetBaseSearcher(As_IvcmEntityForm);
  if Assigned(l_BS) and Assigned(l_BS.WindowData) then
   f_SearchContext := l_BS.WindowData.Context;
  CheckExSearchPanelVisibility;
 end;
 tvList.SelfDrawNodes := Assigned(dsDocumentList) and dsDocumentList.IsSnippet;
 if tvList.HandleAllocated then
  PostMessage(tvList.Handle, msg_vtInvalidateNCArea, 0, 0);
//#UC END# *497469C90140_497DDB2B001B_impl*
//#UC START# *497469C90140_497DDB2B001B_var*
var
 l_BS: InsBaseSearcher;
//#UC END# *497469C90140_497DDB2B001B_var*
//#UC START# *497DDB2B001B_ext:FileName
w:\garant6x\implementation\Garant\GbaNemesis\View\List\Forms\PrimList_Form.pas
//#UC END# *497DDB2B001B_ext:FileName
//#UC START# *497DDB2B001Bimpl_uses*
 , Base_Operations_F1Services_Contracts
//#UC END# *497DDB2B001Bimpl_uses*
//#UC START# *497F16AC015A_497DDB2B001B_impl*
 if (CurUserType <> nil) and
    (UserType in [lftSimilarDocuments]) then
  TnsViewSameDocumentsEvent.Log(lp_Document, lp_DocumentCount);
//#UC END# *497F16AC015A_497DDB2B001B_impl*
//#UC START# *497F16AC015A_497DDB2B001B_var*

 function lp_Document: IDocument;
 begin
  if (sdsBaseDocument <> nil) then
   Result := sdsBaseDocument.DocInfo.Doc
  else
   Result := nil
 end;//lp_Document

 function lp_DocumentCount: Cardinal;
 begin
  if (dsList <> nil) then
   Result := Cardinal(bsDocCount(dsList.List))
  else
   Result := 0;
 end;//lp_DocumentCount

//#UC END# *497F16AC015A_497DDB2B001B_var*
//#UC START# *49805EED0054_497DDB2B001B_impl*
 DefDataAdapter.TimeMachine.SwitchOff
//#UC END# *49805EED0054_497DDB2B001B_impl*
//#UC START# *49805EED0054_497DDB2B001B_var*
//#UC END# *49805EED0054_497DDB2B001B_var*
//#UC START# *49805EFF013C_497DDB2B001B_impl*
 Assert(False);
//#UC END# *49805EFF013C_497DDB2B001B_impl*
//#UC START# *49805EFF013C_497DDB2B001B_var*
//#UC END# *49805EFF013C_497DDB2B001B_var*
//#UC START# *49805F0D0221_497DDB2B001B_impl*
 Assert(False);
//#UC END# *49805F0D0221_497DDB2B001B_impl*
//#UC START# *49805F0D0221_497DDB2B001B_var*
//#UC END# *49805F0D0221_497DDB2B001B_var*
//#UC START# *49805F190314_497DDB2B001Bget_impl*
 Result := [ns_offtmStayInCurrentRedaction, ns_offtmChangeDate];
  // - в списке доступно только выключение машины времени.
//#UC END# *49805F190314_497DDB2B001Bget_impl*
//#UC START# *49805F190314_497DDB2B001Bget_var*
//#UC END# *49805F190314_497DDB2B001Bget_var*
//#UC START# *49806ED503D5_497DDB2B001B_impl*
 l_Current := tvList.Current;
 l_TopIndex := tvList.TopIndex;
 theState := nil;
 l_InnerState := nil;
 l_TreeStructState := nil;
 Result := inherited DoSaveState(l_InnerState, aStateType, aForClone);
 if aForClone and tvList.IsTreeAssign then
 begin
  if Supports(tvList.TreeStruct, InsTreeStructStateProvider, l_TreeStructStateProvider) then
   l_TreeStructState := l_TreeStructStateProvider.MakeState;
   
  if Supports(cfList, IvcmState, l_cfStateMaker) then
   if l_cfStateMaker.SaveState(l_cfState, vcm_stContent) then
    theState := TPrimListFormState.Make(l_InnerState, l_cfState, l_TreeStructState,
      tvList.TopIndex, tvList.Current,
      [lfoContextFilterState, lfoTopItemIndex, lfoCurrentIndex,
      lfoTreeStructState, lfoInner], f_WasFiltered);
      
  if (theState = nil) then
   theState := TPrimListFormState.Make(l_InnerState, nil, nil, 0, 0, [lfoInner], f_WasFiltered);
 end
 else
  theState := TPrimListFormState.Make(l_InnerState, nil, nil, l_TopIndex,
   l_Current, [lfoInner, lfoTopItemIndex, lfoCurrentIndex], f_WasFiltered);
//#UC END# *49806ED503D5_497DDB2B001B_impl*
//#UC START# *49806ED503D5_497DDB2B001B_var*
var
 l_Current: Integer;
 l_TopIndex: Integer;
 l_InnerState: IvcmBase;
 l_cfState: IUnknown;
 l_cfStateMaker: IvcmState;
 l_TreeStructStateProvider: InsTreeStructStateProvider;
 l_TreeStructState: InsTreeStructState;
//#UC END# *49806ED503D5_497DDB2B001B_var*
//#UC START# *49807428008C_497DDB2B001B_impl*
 if (UserType = lftDrugList) and (aStateType = vcm_stContent) then
 begin
  if Supports(aState, IPrimListFormState, l_State) then
  begin
   l_InnerState := l_State.InnerState;
   if (l_State.ContextFilterState <> nil) then
   begin
    if Supports(cfList, IvcmState, l_StateReceiver) then
    begin
     // Всё ниженаписанное выглядит ужасно, но проблема в том, что
     // в TnscContextFilter написано много какого-то странного кода,
     // трогать который страшно
     // http://mdp.garant.ru/pages/viewpage.action?pageId=609593354

     tvList.TreeStruct;
     // - Иначе TreeStruct получится при отрисовке и контекстный фильтр зачем-то
     // затрёт свой контекст
     if (lfoContextFilterState in l_State.Options) then
     begin
      cfList.BeginAssignState;
      l_StateReceiver.LoadState(l_State.ContextFilterState, aStateType);
      l_WasActive := cfList.Active;
      cfList.Active := False;
      // - если будет Active - контекст почему-то будет считаться неверным
      // и его покрасят в красный цвет
      cfList.EndAssignState;
      cfList.Active := l_WasActive;
     end;
    end;
    Result := True;
   end
   else
    Result := inherited DoLoadState(l_InnerState, aStateType, aClone);
  end
  else
   Assert(False)
 end
 else
 begin
  l_InnerState := aState;
  if (not (aClone and (UserType in [lftUserCR1, lftUserCR2]) and (not IsActiveInParent))) then
   if Supports(aState, IPrimListFormState, l_State) then
   begin
    l_TreeStruct := tvList.TreeStruct;
    try
     Result := inherited DoLoadState(l_InnerState, aStateType, aClone);
     l_InnerState := l_State.InnerState;
     if (lfoCurrentIndex in l_State.Options) then
      tvList.Current := l_State.CurrentIndex;
     if (lfoTreeStructState in l_State.Options) then
      if Supports(l_TreeStruct, InsTreeStructStateConsumer, l_TreeStructStateConsumer) then
       l_TreeStructStateConsumer.AssignState(l_State.TreeStructState);
     if (lfoTopItemIndex in l_State.Options) then
      tvList.TopIndex := l_State.TopItemIndex;
     f_WasFiltered := l_State.WasFiltered;
     Exit;
    finally
     l_TreeStruct := nil;
    end;
   end;
  Result := inherited DoLoadState(l_InnerState, aStateType, aClone);
 end;
//#UC END# *49807428008C_497DDB2B001B_impl*
//#UC START# *49807428008C_497DDB2B001B_var*
var
 l_TreeStruct: Il3SimpleTree;
 l_StateReceiver: IvcmState;
 l_State: IPrimListFormState;
 l_TreeStructState: InsTreeStructState;
 l_TreeStructStateConsumer: InsTreeStructStateConsumer;
 l_InnerState: IvcmBase;
 l_WasActive: Boolean;
//#UC END# *49807428008C_497DDB2B001B_var*
//#UC START# *49885D540232_497DDB2B001Bexec_impl*
 // Сохраняем в папки весь список если нажали на кнопку или вызвали по
 // ShortCut-у или выполняем операцию выбранную в контекстном меню кнопки
 SaveToFolders(IfThen(aParams.ItemIndex <= 0,
                      IfThen(tvList.TreeView.Tree.SelectedCount > 1,
                             g_SaveToFoldersSelected,
                             g_SaveToFolders),
                      aParams.ItemIndex));
//#UC END# *49885D540232_497DDB2B001Bexec_impl*
//#UC START# *49885D540232_497DDB2B001Bexec_var*
//#UC END# *49885D540232_497DDB2B001Bexec_var*
//#UC START# *49885D540232_497DDB2B001Btest_impl*
 aParams.Op.Flag[vcm_ofEnabled] := not IsListEmpty;
 if aParams.Op.Flag[vcm_ofEnabled] then
 begin
  aParams.Op.Flag[vcm_ofEnabled] := True;
  with aParams.Op.SubItems do
  begin
   Clear;
   ResetSaveToFolderOperations;
   if (dsList <> nil) and dsList.IsSaved then
    g_OverrideList := Succ(Add(vcmCStr(str_ListSaveOverride)));
   if (dsList <> nil) and dsList.IsSaved or HasSelected then
    g_SaveToFolders := Succ(Add(vcmCStr(str_ListSaveAs)));
   if HasSelected then
    g_SaveToFoldersSelected := Succ(Add(vcmCStr(str_ListSaveSelectedDocuments)));
   // Действие по умолчанию Сохранить в мои документы
   if Count = 0 then
    g_SaveToFolders := 0;
  end;//with aParams.Op.SubItems do
 end;//if aParams.Op.Flag[vcm_ofEnabled] then
//#UC END# *49885D540232_497DDB2B001Btest_impl*
//#UC START# *49885D540232_497DDB2B001Btest_var*
//#UC END# *49885D540232_497DDB2B001Btest_var*
//#UC START# *49885D59018D_497DDB2B001Bexec_impl*
 // Выбор закладок
 TFoldersService.Instance.SelectOpen(Self.As_IvcmEntityForm,
                      MakeFilterInfo(ffList),
                      str_ListOpen);
//#UC END# *49885D59018D_497DDB2B001Bexec_impl*
//#UC START# *49885D59018D_497DDB2B001Bexec_var*
//#UC END# *49885D59018D_497DDB2B001Bexec_var*
//#UC START# *49885D59018D_497DDB2B001Btest_impl*
 // - ничего не делаем
//#UC END# *49885D59018D_497DDB2B001Btest_impl*
//#UC START# *49885D59018D_497DDB2B001Btest_var*
//#UC END# *49885D59018D_497DDB2B001Btest_var*
//#UC START# *498863B203D0_497DDB2B001Bexec_impl*
 AddSelectedToControl(True);
//#UC END# *498863B203D0_497DDB2B001Bexec_impl*
//#UC START# *498863B203D0_497DDB2B001Bexec_var*
//#UC END# *498863B203D0_497DDB2B001Bexec_var*
//#UC START# *498863B203D0_497DDB2B001Bgetstate_impl*
 if HasCurrent and OnlyOneSelected and Assigned(dsDocumentList) and dsDocumentList.IsUnderControl then
  State := st_user_Document_AddToControl_RemoveFromControl
 else
  State := vcm_DefaultOperationState;
//#UC END# *498863B203D0_497DDB2B001Bgetstate_impl*
//#UC START# *498863B203D0_497DDB2B001Bgetstate_var*
//#UC END# *498863B203D0_497DDB2B001Bgetstate_var*
//#UC START# *498863B203D0_497DDB2B001Btest_impl*
 if HasCurrent and f_AllowCallCurrentChangedOnTest then
  CallCurrentChanged;
 aParams.Op.Flag[vcm_ofEnabled] := HasCurrent
                               and Assigned(dsDocumentList)
                               and not dsDocumentList.IsListEmpty
                               and dsDocumentList.CanAddToControl;
//#UC END# *498863B203D0_497DDB2B001Btest_impl*
//#UC START# *498863B203D0_497DDB2B001Btest_var*
//#UC END# *498863B203D0_497DDB2B001Btest_var*
//#UC START# *498891640253_497DDB2B001Bexec_impl*
 Op_SynchroView_BecomeActive.Call(Aggregate, ssfAttribute);
//#UC END# *498891640253_497DDB2B001Bexec_impl*
//#UC START# *498891640253_497DDB2B001Bexec_var*
//#UC END# *498891640253_497DDB2B001Bexec_var*
//#UC START# *498891640253_497DDB2B001Btest_impl*
 with tvList.TreeView do
  aParams.Op.Flag[vcm_ofEnabled] := afw.Application.IsInternal and
                                    NoMoreThanOneSelected and
                                    HasCurrent and
                                    Assigned(dsList) and
                                    dsList.HasAttributes;
//#UC END# *498891640253_497DDB2B001Btest_impl*
//#UC START# *498891640253_497DDB2B001Btest_var*
//#UC END# *498891640253_497DDB2B001Btest_var*
//#UC START# *49895A2102E8_497DDB2B001Bexec_impl*
 Result := true;
 if Supports(aNode, INode, l_FolderNode) then
 try
  try
   l_FolderNode.Open(l_Object);
   try
    Supports(l_Object, IDynList, l_List);
    try
     if not lp_OpenList then
      lp_ApplyLogicOperation;
    finally
     l_List := nil;
    end;//try..finally
   finally
    l_Object := nil;
   end;//try..finally
  except
   on ECanNotFindData do
   begin
    nsSayAdapterObjectMissing(Self, l_FolderNode);
    Result := false;
   end;//on ECanNotFindData do
  end;//try..except
 finally
  l_FolderNode := nil;
 end;//try..finally
//#UC END# *49895A2102E8_497DDB2B001Bexec_impl*
//#UC START# *49895A2102E8_497DDB2B001Bexec_var*

var
 l_List   : IDynList;

 function lp_OpenList: Boolean;
 begin
  Result := (anOp = LLO_NONE);
  if Result then
  begin
    Assert(Assigned(l_List));
    nsOpenList(l_List, NativeMainForm);
  end//Result
 end;

 procedure lp_ApplyLogicOperation;
 begin
  if Assigned(dsList) then
   try
    // Неверный тип списка:
    if dsList.List.GetContentType <> l_List.GetContentType then
    begin
     Say(inf_UncompatibleObjectType);
     Loadable_Load_Execute := false;
     Exit;
    end;//if dsList.List.GetContentType <> l_List.GetContentType then
    // Выполним логическую операцию
    if dsList.ApplyLogicOperation(l_List, anOp) then
    begin
     if dsList.AllDocumentFiltered then
      ShowEditorOrList(nil)
     // Обновим дерево:
     else
      with tvList do
      begin
       Changing;
       try
        TreeStruct := dsList.SimpleTree;
       finally
        Changed;
       end;//try..finally
      end;//with tvList do
    end;//dsList.ApplyLogicOperation
   except
    on EEmptyResult do
    begin
     Say(war_EmptyList);
     Loadable_Load_Execute := false;
    end;//on EEmptyResult do
   end//except
  else
   Assert(false, 'Непонятно, что хотели от этой операции');
 end;

var
 l_FolderNode : INode;
 l_Object : IUnknown;
//#UC END# *49895A2102E8_497DDB2B001Bexec_var*
//#UC START# *498993C801DC_497DDB2B001Bexec_impl*
 Op_SynchroView_BecomeActive.Call(Aggregate, ssfRelated);
//#UC END# *498993C801DC_497DDB2B001Bexec_impl*
//#UC START# *498993C801DC_497DDB2B001Bexec_var*
//#UC END# *498993C801DC_497DDB2B001Bexec_var*
//#UC START# *498993C801DC_497DDB2B001Btest_impl*
 with tvList.TreeView do
  aParams.Op.Flag[vcm_ofEnabled] := NoMoreThanOneSelected and HasCurrent and
   Assigned(dsDocumentList) and dsDocumentList.HasRelatedDoc;
//#UC END# *498993C801DC_497DDB2B001Btest_impl*
//#UC START# *498993C801DC_497DDB2B001Btest_var*
//#UC END# *498993C801DC_497DDB2B001Btest_var*
//#UC START# *49EDFCA2006D_497DDB2B001Bexec_impl*
 aParams.CallControl;
//#UC END# *49EDFCA2006D_497DDB2B001Bexec_impl*
//#UC START# *49EDFCA2006D_497DDB2B001Bexec_var*
//#UC END# *49EDFCA2006D_497DDB2B001Bexec_var*
//#UC START# *49EDFCA2006D_497DDB2B001Btest_impl*
 if aParams.Control = tvList then
  aParams.Op.Flag[vcm_ofEnabled] := false
 else
 if not aParams.CallControl then
  aParams.Op.Flag[vcm_ofEnabled] := false;
//#UC END# *49EDFCA2006D_497DDB2B001Btest_impl*
//#UC START# *49EDFCA2006D_497DDB2B001Btest_var*
//#UC END# *49EDFCA2006D_497DDB2B001Btest_var*
//#UC START# *49EDFCB100BC_497DDB2B001Bexec_impl*
 aParams.CallControl;
//#UC END# *49EDFCB100BC_497DDB2B001Bexec_impl*
//#UC START# *49EDFCB100BC_497DDB2B001Bexec_var*
//#UC END# *49EDFCB100BC_497DDB2B001Bexec_var*
//#UC START# *49EDFCB100BC_497DDB2B001Btest_impl*
 if aParams.Control = tvList then
  aParams.Op.Flag[vcm_ofEnabled] := false
 else
 if not aParams.CallControl then
  aParams.Op.Flag[vcm_ofEnabled] := false;
//#UC END# *49EDFCB100BC_497DDB2B001Btest_impl*
//#UC START# *49EDFCB100BC_497DDB2B001Btest_var*
//#UC END# *49EDFCB100BC_497DDB2B001Btest_var*
//#UC START# *49EE01BC022E_497DDB2B001Bexec_impl*
 if (aParams.Control = tvList) then
 begin
  with tvList, tvList.TreeView do
  begin
   TreeStruct.Changing;
   try
    vlbDeselectAllItems;
    Tree.SetFlagMask(CurrentNode, nfSelected, ee_sbSelect);
   finally
    TreeStruct.Changed{Ex(l3_NotChangeCountView)};
   end;//try..finally
  end;//with tvList, tvList.TreeView
  StatusParamsShow;
 end//aParams.Control = tvList
 else
  aParams.CallControl;
//#UC END# *49EE01BC022E_497DDB2B001Bexec_impl*
//#UC START# *49EE01BC022E_497DDB2B001Bexec_var*
//#UC END# *49EE01BC022E_497DDB2B001Bexec_var*
//#UC START# *49EE01BC022E_497DDB2B001Btest_impl*
 if aParams.Control = tvList then
  aParams.Op.Flag[vcm_ofEnabled] := tvList.TreeView.Tree.SelectedCount > 1
 else
  if not aParams.CallControl then
   aParams.Op.Flag[vcm_ofEnabled] := False;
//#UC END# *49EE01BC022E_497DDB2B001Btest_impl*
//#UC START# *49EE01BC022E_497DDB2B001Btest_var*
//#UC END# *49EE01BC022E_497DDB2B001Btest_var*
//#UC START# *49FEA325027E_497DDB2B001B_impl*
 Result := False;
//#UC END# *49FEA325027E_497DDB2B001B_impl*
//#UC START# *49FEA325027E_497DDB2B001B_var*
//#UC END# *49FEA325027E_497DDB2B001B_var*
//#UC START# *49FEB37C02FB_497DDB2B001B_impl*
 Result := False;
//#UC END# *49FEB37C02FB_497DDB2B001B_impl*
//#UC START# *49FEB37C02FB_497DDB2B001B_var*
//#UC END# *49FEB37C02FB_497DDB2B001B_var*
//#UC START# *49FEB3960023_497DDB2B001B_impl*
 Result := False;
//#UC END# *49FEB3960023_497DDB2B001B_impl*
//#UC START# *49FEB3960023_497DDB2B001B_var*
//#UC END# *49FEB3960023_497DDB2B001B_var*
//#UC START# *49FFD8230333_497DDB2B001B_impl*
 Result := nil;
//#UC END# *49FFD8230333_497DDB2B001B_impl*
//#UC START# *49FFD8230333_497DDB2B001B_var*
//#UC END# *49FFD8230333_497DDB2B001B_var*
//#UC START# *4A485B710126_497DDB2B001B_impl*
 IafwStyleTableSpy(ExSearchLabel).StyleTableChanged;

 with ExSearchLabel do
 begin
  Left := ExSearchPanel.ClientWidth - 15 - Width;
  ExSearchPanel.Height := Height + 5;
 end;
//#UC END# *4A485B710126_497DDB2B001B_impl*
//#UC START# *4A485B710126_497DDB2B001B_var*
//#UC END# *4A485B710126_497DDB2B001B_var*
//#UC START# *4A8E5CEC021F_497DDB2B001B_impl*
 Result := (UserType = lftNone);
//#UC END# *4A8E5CEC021F_497DDB2B001B_impl*
//#UC START# *4A8E5CEC021F_497DDB2B001B_var*
//#UC END# *4A8E5CEC021F_497DDB2B001B_var*
//#UC START# *4A8E5E4702C6_497DDB2B001B_impl*
 with aList do
 begin
  (*
  Add(TnscStatusBarOperationDef.MakeS(opcode_Selection_Analize, True));
  *)
  // http://mdp.garant.ru/pages/viewpage.action?pageId=274825697&focusedCommentId=276540205#comment-276540205
 end;//with aList
//#UC END# *4A8E5E4702C6_497DDB2B001B_impl*
//#UC START# *4A8E5E4702C6_497DDB2B001B_var*
//#UC END# *4A8E5E4702C6_497DDB2B001B_var*
//#UC START# *4A8E8F2E0195_497DDB2B001B_impl*
 inherited;
 ActiveControl := tvList;
 tvList.NonTrackScroll := true;
 tvList.StyleId := ev_saTxtNormalANSI;
 with ListPanel do
 begin
  Left := 0;
  Top := 0;
  Width := 399;
  Height := 493;
  Align := alClient;
  BevelOuter := bvNone;
  TabOrder := 0;
 end;//with ListPanel
 with cfList do
 begin
  Left := 0;
  Top := 0;
  Width := 399;
  Height := 35;
  ImageIndex := 77;
  ContextFilterTarget := tvList;
  OnChange := cfListChange;
  OnWrongContext := cfListWrongContext;
 end;
 with tvList do
 begin
  Left := 0;
  Top := 35;
  Width := 399;
  Height := 458;
  OnCountChanged := tvListCountChanged;
  OnAfterFirstPaint := tvListAfterFirstPaint;
  OnCurrentIndexChanged := tvListCurrentIndexChanged;
  Align := alClient;
  BorderStyle := bsNone;
  TabOrder := 0;
  MultiSelect := True;
  MultiStrokeItem := True;
  ActionElementMode := l3_amSecondSingleClick;
  NeedStatus := True;
  OnGetItemIconHint := tvListGetItemIconHint;
  OnMakeTreeSource := tvListMakeTreeSource;
  OnGetItemImage := tvListGetItemImage;
  OnActionElement := tvListActionElement;
  OnCurrentChanged := tvListCurrentChanged;
  OnTreeChanged := tvListTreeChanged;
  OnRootChanged := tvListRootChanged;
  OnSelectCountChanged := tvListSelectCountChanged;
  OnFormatStatusInfo := tvListFormatStatusInfo;
  OnNewCharPressed := tvListNewCharPressed;
  OnCheckFocusedInPaint := tvListCheckFocusedInPaint;
  OnGetNodeType := TvListGetNodeType;
  DragAndDropSupported := True;
  FooterCaption := str_ListFooterCaption.AsStr;
  OnFooterClick := tvListFooterClick;
  SettingId := 'stidListTree';
  InterRowMultiplier := 2;             
  OpenChipColor := $ADADAD; //414849886 
  OpenChipBorderColor := $ADADAD;
 end;
 with ExSearchPanel do
 begin
  Align := alTop;
  Color := clWhite;
  BorderStyle := bsNone;
  BevelOuter := bvNone;
 end;
 with ExSearchLabel do
 begin
  AutoWidth := True;
  Anchors := [akTop, akRight];
  Cursor := crHandPoint;
  Top := 0;
  Left := ExSearchPanel.ClientWidth - 15 - Width;
  OnClick := ExSearchLabelClick;
  ExSearchPanel.Height := Height + 5;
 end;
 StyleTableChanged;
//#UC END# *4A8E8F2E0195_497DDB2B001B_impl*
//#UC START# *4A8E8F2E0195_497DDB2B001B_var*
//#UC END# *4A8E8F2E0195_497DDB2B001B_var*
//#UC START# *4AA4E63900F9_497DDB2B001B_impl*
 Result := f_SearchArea = ns_saEveryWere;
//#UC END# *4AA4E63900F9_497DDB2B001B_impl*
//#UC START# *4AA4E63900F9_497DDB2B001B_var*
//#UC END# *4AA4E63900F9_497DDB2B001B_var*
//#UC START# *4AA4E64E0395_497DDB2B001B_impl*
 Result := 0;
//#UC END# *4AA4E64E0395_497DDB2B001B_impl*
//#UC START# *4AA4E64E0395_497DDB2B001B_var*
//#UC END# *4AA4E64E0395_497DDB2B001B_var*
//#UC START# *4ACA17770179_497DDB2B001B_impl*
 Result := UserType in [lftDrugList,
                        lftDrugInternationalNameSynonyms,
                        lftProducedDrugs,
                        lftProducedDrugsSynchroForm];
//#UC END# *4ACA17770179_497DDB2B001B_impl*
//#UC START# *4ACA17770179_497DDB2B001B_var*
//#UC END# *4ACA17770179_497DDB2B001B_var*
//#UC START# *4ACA195801CB_497DDB2B001Bget_impl*
 Result.rContainer := nil;
 Result.rZone := vcm_ztAny;
//#UC END# *4ACA195801CB_497DDB2B001Bget_impl*
//#UC START# *4ACA195801CB_497DDB2B001Bget_var*
//#UC END# *4ACA195801CB_497DDB2B001Bget_var*
//#UC START# *4AD608860210_497DDB2B001Bget_impl*
 Result := Self;
//#UC END# *4AD608860210_497DDB2B001Bget_impl*
//#UC START# *4AD608860210_497DDB2B001Bget_var*
//#UC END# *4AD608860210_497DDB2B001Bget_var*
//#UC START# *4AD6EAA3034A_497DDB2B001Bget_impl*
 Result := Self;
//#UC END# *4AD6EAA3034A_497DDB2B001Bget_impl*
//#UC START# *4AD6EAA3034A_497DDB2B001Bget_var*
//#UC END# *4AD6EAA3034A_497DDB2B001Bget_var*
//#UC START# *4AE19D392515_497DDB2B001B_impl*
 LftRespondentQueryOpen(aSender);
//#UC END# *4AE19D392515_497DDB2B001B_impl*
//#UC START# *4AE19D392515_497DDB2B001B_var*
//#UC END# *4AE19D392515_497DDB2B001B_var*
//#UC START# *4AEF0BF70306_497DDB2B001Bexec_impl*
 Result := ApplyFilter(aFilter, true)
//#UC END# *4AEF0BF70306_497DDB2B001Bexec_impl*
//#UC START# *4AEF0BF70306_497DDB2B001Bexec_var*
//#UC END# *4AEF0BF70306_497DDB2B001Bexec_var*
//#UC START# *4AEF0D1A01C3_497DDB2B001Bexec_impl*
 Result := (dsList <> nil) AND ApplyFilter(aFilter, false)
//#UC END# *4AEF0D1A01C3_497DDB2B001Bexec_impl*
//#UC START# *4AEF0D1A01C3_497DDB2B001Bexec_var*
//#UC END# *4AEF0D1A01C3_497DDB2B001Bexec_var*
//#UC START# *4AEF28330397_497DDB2B001Bexec_impl*
 if not Assigned(dsList) then
  Result := nil
 else
 if not IsListEmpty then
  Result := TdeList.Make(dsList.List)
 else
  Result := nil;
//#UC END# *4AEF28330397_497DDB2B001Bexec_impl*
//#UC START# *4AEF28330397_497DDB2B001Bexec_var*
//#UC END# *4AEF28330397_497DDB2B001Bexec_var*
//#UC START# *4AF80DB80383_497DDB2B001Bexec_impl*
 if dsList <> nil then
 begin
  l_AllDocumentFiltered := dsList.AllDocumentFiltered;
  if dsList.ClearFilters then
  begin
   // Если все документы были отфильтрованны, то нужно показать дерево:
   if l_AllDocumentFiltered then
    ShowEditorOrList(nil);
   tvList.TreeStruct := nil;
   tvList.TreeStruct;   //mdp.garant.ru/pages/viewpage.action?pageId=627386747
  end;//if dsList.ClearFilters then
 end;//if dsList <> nil then
//#UC END# *4AF80DB80383_497DDB2B001Bexec_impl*
//#UC START# *4AF80DB80383_497DDB2B001Bexec_var*
var
 l_AllDocumentFiltered: Boolean;
//#UC END# *4AF80DB80383_497DDB2B001Bexec_var*
//#UC START# *4AF810230307_497DDB2B001Bexec_impl*
 Result := true;
 if Assigned(dsList) and dsList.RefreshFilters then
  tvList.TreeStruct := nil
 else
  Result := false;
//#UC END# *4AF810230307_497DDB2B001Bexec_impl*
//#UC START# *4AF810230307_497DDB2B001Bexec_var*
//#UC END# *4AF810230307_497DDB2B001Bexec_var*
//#UC START# *4AF83BEB0393_497DDB2B001Bexec_impl*
 defDataAdapter.TimeMachine.SwitchOff;
//#UC END# *4AF83BEB0393_497DDB2B001Bexec_impl*
//#UC START# *4AF83BEB0393_497DDB2B001Bexec_var*
//#UC END# *4AF83BEB0393_497DDB2B001Bexec_var*
//#UC START# *4AF83BEB0393_497DDB2B001Btest_impl*
 with aParams do
 begin
  Op.Flag[vcm_ofEnabled] := Assigned(dsDocumentList) and dsDocumentList.IsTimeMachineEnable and
   defDataAdapter.TimeMachine.IsOn;
  if Op.Flag[vcm_ofEnabled] then
   Op.Flag[vcm_ofChecked] := defDataAdapter.TimeMachine.IsOn;
 end;//with aParams do
//#UC END# *4AF83BEB0393_497DDB2B001Btest_impl*
//#UC START# *4AF83BEB0393_497DDB2B001Btest_var*
//#UC END# *4AF83BEB0393_497DDB2B001Btest_var*
//#UC START# *4AF846E90103_497DDB2B001B_impl*
 Result := (tvList.TreeView.Current >= 0);
//#UC END# *4AF846E90103_497DDB2B001B_impl*
//#UC START# *4AF846E90103_497DDB2B001B_var*
//#UC END# *4AF846E90103_497DDB2B001B_var*
//#UC START# *4AF84789038B_497DDB2B001Bexec_impl*
 if HasCurrent then
  with tvList, TreeView do
   vlbMakeItemVisible(Current);
//#UC END# *4AF84789038B_497DDB2B001Bexec_impl*
//#UC START# *4AF84789038B_497DDB2B001Bexec_var*
//#UC END# *4AF84789038B_497DDB2B001Bexec_var*
//#UC START# *4B0A69100289_497DDB2B001B_impl*
 ForceUpdateClassForHistory;
 lp_RegisterEvent;
  // - запишем событие.
 TvcmModulesFactories.OpenDocument(aDoc, aCont);
  // - откроем документ.
 if aNeedReturnFocus then
  if tvList.CanFocus then
   tvList.SetFocus;
//#UC END# *4B0A69100289_497DDB2B001B_impl*
//#UC START# *4B0A69100289_497DDB2B001B_var*

 function lp_IndexInParent: Integer;
 var
  l_Root : Il3SimpleNode;
  l_Node : Il3SimpleNode;
  l_Temp : Il3SimpleNode;
 begin
  l_Node := tvList.GetCurrentNode;
  try
   if Assigned(l_Node) and
     Supports(tvList.TreeStruct.RootNode, Il3SimpleNode, l_Root) then
    while Assigned(l_Node) and not l_Root.IsSame(l_Node.Parent) do
    begin
     l_Temp := l_Node.Parent;
     l_Node := l_Temp;
    end;
   if Assigned(l_Node) then
    Result := Succ(l_Node.IndexInParent)
   else
   begin
    Result := 0;
    Assert(False);
   end;//Assigned(l_Node)
  finally
   l_Node := nil;
  end;//try..finally
 end;//lp_IndexInParent

 procedure lp_MakeCurrentInfo(var aRelevance, aNumber, aSubBlock, aPara: Integer);
 var
  l_ListEntry: IListEntryInfo;
 begin//lp_MakeCurrentInfo
  l_ListEntry := bsListEntryInfo(tvList.GetCurrentNode);
  if l_ListEntry <> nil then
  try
   aRelevance := l_ListEntry.GetRelevance;
   aNumber := lp_IndexInParent;
   aSubBlock := -1;
   aPara := -1;
   case l_ListEntry.GetType of
    PT_SUB: aSubBlock := l_ListEntry.GetPosition;
    PT_PARA: aPara := l_ListEntry.GetPosition;
   end;                                       
  finally
   l_ListEntry := nil;
  end;//try..finally
 end;//lp_MakeCurrentInfo

 procedure lp_RegisterEvent;
 var
  l_Relevance: Integer;
  l_Number: Integer;
  l_SubBlock,
  l_Para: Integer;
 begin//lp_RegisterEvent
  if not (aDoc.Doc.GetDocType in [DT_AUTO_REFERAT]) then
  begin
   lp_MakeCurrentInfo(l_Relevance, l_Number, l_SubBlock, l_Para);
    // - информация о текущем.
   TnscDocumentHistory.Instance.AddDocument(aDoc.Doc.GetInternalId);
   if aDoc.Doc.GetDocType in [DT_DOCUMENT,
                              DT_FLASH,
                              DT_ACTUAL_ANALYTICS,
                              DT_ACTUAL_ANALYTICS_CONTENTS] then
    TnsOpenDocumentFromListEvent.Log(aDoc.Doc, l_Number, l_Relevance, l_SubBlock, l_Para);
  end;
 end;//lp_RegisterEvent

//#UC END# *4B0A69100289_497DDB2B001B_var*
//#UC START# *4B0A86E800FF_4B0A86AD0232_impl*
 l_Data := MakeParamsList;
 l_Data.AddObject(aList);
 GetLogger.AddEvent(LE_DELETE_FROM_LIST, l_Data);
//#UC END# *4B0A86E800FF_4B0A86AD0232_impl*
//#UC START# *4B0A86E800FF_4B0A86AD0232_var*
var
 l_Data: InsLogEventData;
//#UC END# *4B0A86E800FF_4B0A86AD0232_var*
//#UC START# *4B0A871E038F_497DDB2B001B_impl*
  if (dsList <> nil) and not IsListEmpty and
   Ask(qr_DeleteListSelected) then
  begin
   dsList.DeleteNodes;
   TnsDeleteFromListEvent.Log(dsList.List);
  end;
//#UC END# *4B0A871E038F_497DDB2B001B_impl*
//#UC START# *4B0A871E038F_497DDB2B001B_var*
//#UC END# *4B0A871E038F_497DDB2B001B_var*
//#UC START# *4B0CF288004C_4B0CF2510084_impl*
 l_Data := MakeParamsList;
 l_Data.AddObject(aDoc);
 l_Data.AddULong(aCount);
 GetLogger.AddEvent(LE_VIEW_SAME_DOCUMENTS, l_Data);
//#UC END# *4B0CF288004C_4B0CF2510084_impl*
//#UC START# *4B0CF288004C_4B0CF2510084_var*
var
 l_Data: InsLogEventData;
//#UC END# *4B0CF288004C_4B0CF2510084_var*
//#UC START# *4B261EC80086_497DDB2B001Bexec_impl*
 TvcmModulesFactories.OpenTurnOffTimeMachine(InsTurnOffTimeMachine(Self));
//#UC END# *4B261EC80086_497DDB2B001Bexec_impl*
//#UC START# *4B261EC80086_497DDB2B001Bexec_var*
//#UC END# *4B261EC80086_497DDB2B001Bexec_var*
//#UC START# *4B261EC80086_497DDB2B001Bgetstate_impl*
 if not defDataAdapter.TimeMachine.IsOn then
  State := st_user_TimeMachine_TimeMachineOnOffNew_MachineOn
 else
  State := st_user_TimeMachine_TimeMachineOnOffNew_MachineOff;
//#UC END# *4B261EC80086_497DDB2B001Bgetstate_impl*
//#UC START# *4B261EC80086_497DDB2B001Bgetstate_var*
//#UC END# *4B261EC80086_497DDB2B001Bgetstate_var*
//#UC START# *4B261EC80086_497DDB2B001Btest_impl*
 aParams.Op.Flag[vcm_ofEnabled] := Assigned(dsList) and
  dsList.IsTimeMachineEnable and DefDataAdapter.TimeMachine.IsOn;
//#UC END# *4B261EC80086_497DDB2B001Btest_impl*
//#UC START# *4B261EC80086_497DDB2B001Btest_var*
//#UC END# *4B261EC80086_497DDB2B001Btest_var*
//#UC START# *4B263ADE02E0_497DDB2B001B_impl*
 Result := False;
//#UC END# *4B263ADE02E0_497DDB2B001B_impl*
//#UC START# *4B263ADE02E0_497DDB2B001B_var*
//#UC END# *4B263ADE02E0_497DDB2B001B_var*
//#UC START# *4B556F56016B_497DDB2B001Bexec_impl*
 DoSwitchToFullList;
//#UC END# *4B556F56016B_497DDB2B001Bexec_impl*
//#UC START# *4B556F56016B_497DDB2B001Bexec_var*
//#UC END# *4B556F56016B_497DDB2B001Bexec_var*
//#UC START# *4B556F56016B_497DDB2B001Btest_impl*
 aParams.Op.Flag[vcm_ofEnabled] := CanSwithToFullList;
 aParams.Op.Flag[vcm_ofVisible] := CanSwithToFullList;
//#UC END# *4B556F56016B_497DDB2B001Btest_impl*
//#UC START# *4B556F56016B_497DDB2B001Btest_var*
//#UC END# *4B556F56016B_497DDB2B001Btest_var*
//#UC START# *4B557A1C00D1_497DDB2B001B_impl*
 op_Filters_DeselectAll.Call(Aggregate);
 op_Filterable_ClearAll.Call(Self.As_IvcmEntityForm);
//#UC END# *4B557A1C00D1_497DDB2B001B_impl*
//#UC START# *4B557A1C00D1_497DDB2B001B_var*
//#UC END# *4B557A1C00D1_497DDB2B001B_var*
//#UC START# *4B557C640258_497DDB2B001B_impl*
 if Assigned(dsDocumentList) and dsDocumentList.IsShortList then
  TvcmModulesFactories.OpenList{WithReplace}(dsDocumentList.MakeFullList, NativeMainForm);
//#UC END# *4B557C640258_497DDB2B001B_impl*
//#UC START# *4B557C640258_497DDB2B001B_var*
//#UC END# *4B557C640258_497DDB2B001B_var*
//#UC START# *4B5580C902B0_497DDB2B001B_impl*
 aParams.Op.Flag[vcm_ofEnabled] := Assigned(dsList) and
  not IsListEmpty and HasCurrent;
//#UC END# *4B5580C902B0_497DDB2B001B_impl*
//#UC START# *4B5580C902B0_497DDB2B001B_var*
//#UC END# *4B5580C902B0_497DDB2B001B_var*
//#UC START# *4C341EE90370_497DDB2B001B_impl*
 Result := tvList.TreeView.Tree.SelectedCount > 0;
//#UC END# *4C341EE90370_497DDB2B001B_impl*
//#UC START# *4C341EE90370_497DDB2B001B_var*
//#UC END# *4C341EE90370_497DDB2B001B_var*
//#UC START# *4C3440AB00A0_497DDB2B001B_impl*
 if aParams.Control = tvList then
  aParams.Op.Flag[vcm_ofEnabled] := not IsListEmpty and HasSelected
 else
  if not aParams.CallControl then
   aParams.Op.Flag[vcm_ofEnabled] := False;
//#UC END# *4C3440AB00A0_497DDB2B001B_impl*
//#UC START# *4C3440AB00A0_497DDB2B001B_var*
//#UC END# *4C3440AB00A0_497DDB2B001B_var*
//#UC START# *4C344155021B_497DDB2B001B_impl*
 Dispatcher.UpdateStatus;
//#UC END# *4C344155021B_497DDB2B001B_impl*
//#UC START# *4C344155021B_497DDB2B001B_var*
//#UC END# *4C344155021B_497DDB2B001B_var*
//#UC START# *4C3716AC02AC_497DDB2B001Bexec_impl*
 op_ListInfo_BecomeActive.Call(Aggregate);
//#UC END# *4C3716AC02AC_497DDB2B001Bexec_impl*
//#UC START# *4C3716AC02AC_497DDB2B001Bexec_var*
//#UC END# *4C3716AC02AC_497DDB2B001Bexec_var*
//#UC START# *4C3716AC02AC_497DDB2B001Btest_impl*
// aParams.Op.Flag[vcm_ofVisible] := (aParams.Control <> tvList);
 aParams.Op.Flag[vcm_ofEnabled] := (dsList <> nil) and
  not IsListEmpty and (dsList.IsMain);
//#UC END# *4C3716AC02AC_497DDB2B001Btest_impl*
//#UC START# *4C3716AC02AC_497DDB2B001Btest_var*
//#UC END# *4C3716AC02AC_497DDB2B001Btest_var*
//#UC START# *4C3716C50005_497DDB2B001Bexec_impl*
 if Assigned(dsDocumentList) then
  with dsDocumentList do
  begin
   CheckValidSortTypes(dsDocumentList.ValidSortTypes);
   l_SortType := TbsSortType(f_SortTypeMap.DisplayNameToValue(aParams.SelectedString));
   if (l_SortType <> SortType) then
    with tvList do
    begin
     l_NewTree := ChangeSortType(TreeStruct,
                                 GetCurrentNode,
                                 l_SortType);
     if Assigned(l_NewTree) then
      ReplaceTreeStructForceAsSame(l_NewTree);
     // Сделаем текущий видимым
     tvList.MakeItemVisible(Current);
    end;//with tvList do
  end;//with dsDocumentList do
//#UC END# *4C3716C50005_497DDB2B001Bexec_impl*
//#UC START# *4C3716C50005_497DDB2B001Bexec_var*
var
 l_SortType : TbsSortType;
 l_NewTree  : Il3SimpleTree;
//#UC END# *4C3716C50005_497DDB2B001Bexec_var*
//#UC START# *4C3716C50005_497DDB2B001Btest_impl*
// aParams.Op.Flag[vcm_ofVisible] := (aParams.Control <> tvList);
 // http://mdp.garant.ru/pages/viewpage.action?pageId=476813620
 if (tvList.TreeView.Current < 0) or ((dsDocumentList = nil) or
  (dsDocumentList.IsListEmpty)) or
   ((aParams.Control = nil) {or (aParams.Control = tvList)}) then
   aParams.Op.Flag[vcm_ofEnabled] := False
 else
 begin
  if Assigned(dsDocumentList) then
  begin
   aParams.Op.Flag[vcm_ofEnabled] := True;
   l_Res := CheckValidSortTypes(dsDocumentList.ValidSortTypes);
   l_Strings := aParams.Op.SubItems;
   try
    if (l_Strings <> nil) and
       (l_Res or (l_Strings.Count = 0) or (l_Strings.Count <> f_SortTypeMap.MapSize)) and
       Supports(f_SortTypeMap, InsStringsSource, l_StringSource) then
    try
     l_StringSource.FillStrings(l_Strings);
    finally
     l_StringSource := nil;
    end;//try..finally
   finally
    l_Strings := nil;
   end;//try..finally
   aParams.Op.SelectedString := f_SortTypeMap.ValueToDisplayName(Ord(dsDocumentList.SortType));
  end;//if Assigned(dsDocumentList) then
 end;//if tvList.TreeView.Current < 0 then
//#UC END# *4C3716C50005_497DDB2B001Btest_impl*
//#UC START# *4C3716C50005_497DDB2B001Btest_var*
var
 l_Strings: IvcmStrings;
 l_StringSource: InsStringsSource;
 l_Res: Boolean;
//#UC END# *4C3716C50005_497DDB2B001Btest_var*
//#UC START# *4C3716D1012E_497DDB2B001Bexec_impl*
 if Assigned(dsDocumentList) then
  with tvList do
  begin
   l_newTree := dsDocumentList.ChangeSortOrder(TreeStruct, GetCurrentNode);
   if Assigned(l_NewTree) then
   begin
    Changing;
    try
     TreeStruct := l_NewTree;
    finally
     Changed;
    end;//try..finally
   end; //if Assigned(l_NewTree) then
  end; //with tvList do
//#UC END# *4C3716D1012E_497DDB2B001Bexec_impl*
//#UC START# *4C3716D1012E_497DDB2B001Bexec_var*
var
 l_newTree : Il3SimpleTree;
//#UC END# *4C3716D1012E_497DDB2B001Bexec_var*
//#UC START# *4C3716D1012E_497DDB2B001Bgetstate_impl*
 if HasCurrent and Assigned(dsDocumentList) then
  if dsDocumentList.SortOrder = SO_ASCENDING then
   State := st_user_List_SortDirection_Ascending
  else
   State := st_user_List_SortDirection_Descending
 else
  State := vcm_DefaultOperationState;
//#UC END# *4C3716D1012E_497DDB2B001Bgetstate_impl*
//#UC START# *4C3716D1012E_497DDB2B001Bgetstate_var*
//#UC END# *4C3716D1012E_497DDB2B001Bgetstate_var*
//#UC START# *4C3716D1012E_497DDB2B001Btest_impl*
 //http://mdp.garant.ru/pages/viewpage.action?pageId=476813620
 aParams.Op.Flag[vcm_ofEnabled] := (HasCurrent and Assigned(dsDocumentList)) and
  (not dsDocumentList.IsListEmpty) and (aParams.Control <> nil) {and (aParams.Control <> tvList)};
//#UC END# *4C3716D1012E_497DDB2B001Btest_impl*
//#UC START# *4C3716D1012E_497DDB2B001Btest_var*
//#UC END# *4C3716D1012E_497DDB2B001Btest_var*
//#UC START# *4C3716E20109_497DDB2B001Bexec_impl*
 if (dsList.ListType = bs_ltDocument) then
  TBaseSearchService.Instance.OpenBaseSearch(ns_bsokSpecify, nil)
 else
  TvcmModulesFactories.InpharmSearch(nil, dsList.List, nil);
//#UC END# *4C3716E20109_497DDB2B001Bexec_impl*
//#UC START# *4C3716E20109_497DDB2B001Bexec_var*
//#UC END# *4C3716E20109_497DDB2B001Bexec_var*
//#UC START# *4C3716E20109_497DDB2B001Btest_impl*
 ListOpsTest(aParams);
 if (aParams.Control = nil) {OR (tvList = aParams.Control)} then
  aParams.Op.Flag[vcm_ofEnabled] := False;
//#UC END# *4C3716E20109_497DDB2B001Btest_impl*
//#UC START# *4C3716E20109_497DDB2B001Btest_var*
//#UC END# *4C3716E20109_497DDB2B001Btest_var*
//#UC START# *4C3716EF02DF_497DDB2B001Bexec_impl*
 if Assigned(dsList) then
 begin
  l_SaveDialog := TvtSaveDialog.Create(Self);
  try
   with l_SaveDialog do
   begin
    Options := Options + [ofOverwritePrompt, ofPathMustExist];
    Filter := vcmConstString(str_XMLFileFilter);
    DefaultExt := vcmConstString(str_XMLFileExtension);
    FileName := ChangeFileExt(l3PStr(nsMyDocumentFolder(dsList.ListName, '.' + DefaultExt)), '');
    if Execute then
    try
     dsList.SaveToFile(l3PCharLen(FileName), (aParams.ItemIndex = 2));
    except
     on ECannotSave do
      Say(err_ListSaveToFileError);
    end;{try..except}
   end;//with l_SaveDialog do
  finally
   FreeAndNil(l_SaveDialog);
  end;{try..finally}
 end;//if Assigned(dsDocumentList) then
//#UC END# *4C3716EF02DF_497DDB2B001Bexec_impl*
//#UC START# *4C3716EF02DF_497DDB2B001Bexec_var*
var
 l_SaveDialog : TvtSaveDialog;
//#UC END# *4C3716EF02DF_497DDB2B001Bexec_var*
//#UC START# *4C3716EF02DF_497DDB2B001Btest_impl*
 with aParams.Op.SubItems do
  if Count = 0 then
  begin
   Add(vcmCStr(str_WholeListCaption));
   Add(vcmCStr(str_SelectedDocumentsCaption));
  end;//if Count = 0 then
 aParams.Op.Flag[vcm_ofEnabled] := (not IsListEmpty and defDataAdapter.
  ListXMLExportEnabled);
//#UC END# *4C3716EF02DF_497DDB2B001Btest_impl*
//#UC START# *4C3716EF02DF_497DDB2B001Btest_var*
//#UC END# *4C3716EF02DF_497DDB2B001Btest_var*
//#UC START# *4C3740FA02D7_497DDB2B001Bexec_impl*
 if Supports(aParams.CurrentNode, Il3Node, l_Node) then
  try
   if not op_Filter_ActivateNode.Call(Aggregate, l_Node) then
   begin
    if Supports(l_Node, IFilterFromQuery, l_Filter) then
    try
     ApplyFilter(l_Filter, not IsFilterActive(l_Filter));
    finally
     l_Filter := nil;
    end;//try..finally
   end;//not op_Filter_ActivateNode.Call(Aggregate, l_Node As IeeNode)
  finally
   l_Node := nil;
  end;//try..finally
//#UC END# *4C3740FA02D7_497DDB2B001Bexec_impl*
//#UC START# *4C3740FA02D7_497DDB2B001Bexec_var*
var
 l_Node: Il3Node;
 l_Filter: IFilterFromQuery;
//#UC END# *4C3740FA02D7_497DDB2B001Bexec_var*
//#UC START# *4C3740FA02D7_497DDB2B001Btest_impl*
 with aParams do
 begin
  Op.Flag[vcm_ofEnabled] := Assigned(dsList) and (dsList.IsMain);
  if Op.Flag[vcm_ofEnabled] then
   lp_MakeTree;
 end;//with aParams do
//#UC END# *4C3740FA02D7_497DDB2B001Btest_impl*
//#UC START# *4C3740FA02D7_497DDB2B001Btest_var*

 procedure lp_MakeTree;
 var
  l_List : IvcmNodes;
  l_Node : Il3SimpleNode;
 begin
  l_List := aParams.Op.SubNodes;
  if (l_List <> nil) then
  begin
   l_List.ShowRoot := false;
   //if (l_List.Count = 0) then
   l_List.Clear;
   begin
    l_Node := TnsFiltersContainer.Instance.Filters[dsList.ListType].Tree.RootNode;
    if (l_Node <> nil) then
     l_List.Add(l_Node);
   end;//if (l_List <> nil) then
  end;//if (l_List <> nil) and
 end;//lp_MakeTree

//#UC END# *4C3740FA02D7_497DDB2B001Btest_var*
//#UC START# *4C37434901A0_497DDB2B001B_impl*
 if Assigned(dsList) then
  Result := dsList.IsActiveFilter(aFilter)
 else
  Result := False;
//#UC END# *4C37434901A0_497DDB2B001B_impl*
//#UC START# *4C37434901A0_497DDB2B001B_var*
//#UC END# *4C37434901A0_497DDB2B001B_var*
//#UC START# *4C3A96BD0239_497DDB2B001Bexec_impl*
 TvcmModulesFactories.PublishSourceSearch(nil, dsList.List);
//#UC END# *4C3A96BD0239_497DDB2B001Bexec_impl*
//#UC START# *4C3A96BD0239_497DDB2B001Bexec_var*
//#UC END# *4C3A96BD0239_497DDB2B001Bexec_var*
//#UC START# *4C3A96BD0239_497DDB2B001Btest_impl*
 aParams.Op.Flag[vcm_ofEnabled] := defDataAdapter.IsExists_PublishSourceTag and
  Assigned(dsDocumentList) and not dsDocumentList.IsListEmpty and HasCurrent;
//#UC END# *4C3A96BD0239_497DDB2B001Btest_impl*
//#UC START# *4C3A96BD0239_497DDB2B001Btest_var*
//#UC END# *4C3A96BD0239_497DDB2B001Btest_var*
//#UC START# *4C3A971300DA_497DDB2B001Bexec_impl*
 OpenCurrentList(NativeMainForm);
//#UC END# *4C3A971300DA_497DDB2B001Bexec_impl*
//#UC START# *4C3A971300DA_497DDB2B001Bexec_var*
//#UC END# *4C3A971300DA_497DDB2B001Bexec_var*
//#UC START# *4C3A971300DA_497DDB2B001Btest_impl*
 if IsListEmpty then
  aParams.Op.Flag[vcm_ofEnabled] := False
 else
  aParams.Op.Flag[vcm_ofEnabled] := True;
//#UC END# *4C3A971300DA_497DDB2B001Btest_impl*
//#UC START# *4C3A971300DA_497DDB2B001Btest_var*
//#UC END# *4C3A971300DA_497DDB2B001Btest_var*
//#UC START# *4C3A97210318_497DDB2B001Bexec_impl*
 TvcmModulesFactories.InpharmSearch(nil, dsList.List, nil);
//#UC END# *4C3A97210318_497DDB2B001Bexec_impl*
//#UC START# *4C3A97210318_497DDB2B001Bexec_var*
//#UC END# *4C3A97210318_497DDB2B001Bexec_var*
//#UC START# *4C3A97210318_497DDB2B001Btest_impl*
 // - ничего не делаем
//#UC END# *4C3A97210318_497DDB2B001Btest_impl*
//#UC START# *4C3A97210318_497DDB2B001Btest_var*
//#UC END# *4C3A97210318_497DDB2B001Btest_var*
//#UC START# *4C3A9EA80160_497DDB2B001B_impl*
 if Assigned(dsList) then
 begin
  l_List := dsList.NewList;
  if l_List <> nil then
  try
   TvcmModulesFactories.OpenList(l_List, aContainer);
  finally
   l_List := nil;
  end;{try..finally}
 end;//if Assigned(dsDocumentList) then
//#UC END# *4C3A9EA80160_497DDB2B001B_impl*
//#UC START# *4C3A9EA80160_497DDB2B001B_var*
var
 l_List: IdeList;
//#UC END# *4C3A9EA80160_497DDB2B001B_var*
//#UC START# *4C3AA77E00A3_497DDB2B001Bexec_impl*
 Op_SynchroView_BecomeActive.Call(Aggregate, ssfAnnotation);
//#UC END# *4C3AA77E00A3_497DDB2B001Bexec_impl*
//#UC START# *4C3AA77E00A3_497DDB2B001Bexec_var*
//#UC END# *4C3AA77E00A3_497DDB2B001Bexec_var*
//#UC START# *4C3AA77E00A3_497DDB2B001Btest_impl*
 aParams.Op.Flag[vcm_ofEnabled] := NoMoreThanOneSelected and HasCurrent and
  (dsDocumentList <> nil) and (dsDocumentList.HasAnnotation);
//#UC END# *4C3AA77E00A3_497DDB2B001Btest_impl*
//#UC START# *4C3AA77E00A3_497DDB2B001Btest_var*
//#UC END# *4C3AA77E00A3_497DDB2B001Btest_var*
//#UC START# *4C3AA78E024D_497DDB2B001Bexec_impl*
 op_SynchroView_BecomeActive.Call(Aggregate, ssfSimilarDocuments);
//#UC END# *4C3AA78E024D_497DDB2B001Bexec_impl*
//#UC START# *4C3AA78E024D_497DDB2B001Bexec_var*
//#UC END# *4C3AA78E024D_497DDB2B001Bexec_var*
//#UC START# *4C3AA78E024D_497DDB2B001Btest_impl*
 aParams.Op.Flag[vcm_ofEnabled] := NoMoreThanOneSelected and HasCurrent and
  (dsDocumentList <> nil) and (dsDocumentList.HasSimilarDocuments);
//#UC END# *4C3AA78E024D_497DDB2B001Btest_impl*
//#UC START# *4C3AA78E024D_497DDB2B001Btest_var*
//#UC END# *4C3AA78E024D_497DDB2B001Btest_var*
//#UC START# *4C3AA8E0004C_497DDB2B001Bget_impl*
 Result := tvList.TreeView.Tree.SelectedCount <= 1;
//#UC END# *4C3AA8E0004C_497DDB2B001Bget_impl*
//#UC START# *4C3AA8E0004C_497DDB2B001Bget_var*
//#UC END# *4C3AA8E0004C_497DDB2B001Bget_var*
//#UC START# *4C3AA94D0041_497DDB2B001Bexec_impl*
 if Supports(aParams.CurrentNode, Il3Node, l_Node) and Assigned(dsDocumentList) then
 begin
  if Dispatcher.InOp and not Dispatcher.InOp(true) then
   l_Locker := WarningLocker
  else
   l_Locker := nil;
  if Assigned(l_Locker) then
   l_Locker.LockWarning;
  try
   dsDocumentList.ChangeCRType(l_Node);
  finally
   if Assigned(l_Locker) then
    l_Locker.UnLockWarning;
  end;//try..finally
 end;//Supports(aParams.CurrentNode, Il3Node, l_Node) and Assigned(dsDocumentList)
//#UC END# *4C3AA94D0041_497DDB2B001Bexec_impl*
//#UC START# *4C3AA94D0041_497DDB2B001Bexec_var*
var
 l_Node   : Il3Node;
 l_Locker : InsWarningLocker;
//#UC END# *4C3AA94D0041_497DDB2B001Bexec_var*
//#UC START# *4C3AA94D0041_497DDB2B001Btest_impl*
 if Assigned(dsDocumentList) then
 begin
  with aParams do
  begin
   l_List := Op.SubNodes;
   if (l_List <> nil) then
   begin
    with l_List do
    begin
     ShowRoot := false;
     if f_NeedDropCRList or ((l_List.count = 0) and Assigned(dsDocumentList.CRTypeNode)) then
     begin
      Clear;
      f_NeedDropCRList := false;
      if Assigned(dsDocumentList.CRTypeRoot) then
        Add(dsDocumentList.CRTypeRoot);
     end;//if f_NeedDropCRList then
     if Assigned(dsDocumentList.CRTypeNode) then
     begin
      Current := dsDocumentList.CRTypeNode;
      Op.SelectedString := nsCStr(dsDocumentList.CRTypeNode.Text);
     end
     else
      Op.Flag[vcm_ofEnabled] := False;
    end;//with l_List do
   end;//l_List <> nil
  end;//with aParams
 end;//if Assigned(dsDocumentList) then
//#UC END# *4C3AA94D0041_497DDB2B001Btest_impl*
//#UC START# *4C3AA94D0041_497DDB2B001Btest_var*
var
 l_List : IvcmNodes;
//#UC END# *4C3AA94D0041_497DDB2B001Btest_var*
//#UC START# *4C3AACCF01DC_497DDB2B001B_impl*
 l_Count := tvList.TreeView.Tree.SelectedCount;
 if Assigned(dsDocumentList) and
    (l_Count >= 1) then
 begin
  if (l_Count = 1) then
  begin
   if not dsDocumentList.IsUnderControl then
   begin
    dsDocumentList.AddToControl;
    Say(inf_SetDocToControl);
   end
   else //not dsDocumentList.IsUnderControl
    if Ask(qr_RemoveDocumentFromControl) then
     dsDocumentList.DelFromControl;
  end
  else // Выделено несколько элементов
   if Supports(tvList.TreeStruct, Il3ExpandedSimpleTree, l_Tree) then
   begin
    l_Tree.FlagIterateF(l3L2SNA(@SetControlled), FM_SELECTION);
    Say(inf_SetDocsToControl);
   end;
 end;
//#UC END# *4C3AACCF01DC_497DDB2B001B_impl*
//#UC START# *4C3AACCF01DC_497DDB2B001B_var*
var
 l_Tree: Il3ExpandedSimpleTree;

 function SetControlled(const aNode: Il3SimpleNode): Boolean;
 var
  l_Node: INodeBase;
  l_Document: IDocument;
  l_Controllable: IControllable;
 begin
  if Supports(aNode, INodeBase, l_Node) then
  try
   l_Document := GetAsDocument(l_Node);
   if Assigned(l_Document) and TvcmModulesFactories.IsCurEditionActual(l_Document) and
      Supports(l_Document, IControllable, l_Controllable) then
   try
    if not l_Controllable.GetControlled then
     TvcmModulesFactories.AddToControl(l_Controllable);
   finally
    l_Controllable := nil;
   end;
  finally
   l_Node := nil;
  end;
  Result := False;
 end;//SetControlled

var
 l_Count: Integer;
//#UC END# *4C3AACCF01DC_497DDB2B001B_var*
//#UC START# *4C3AAE7C00D0_497DDB2B001Bget_impl*
 Result := tvList.TreeView.Tree.SelectedCount = 1;
//#UC END# *4C3AAE7C00D0_497DDB2B001Bget_impl*
//#UC START# *4C3AAE7C00D0_497DDB2B001Bget_var*
//#UC END# *4C3AAE7C00D0_497DDB2B001Bget_var*
//#UC START# *4C3AB1450150_497DDB2B001B_impl*
 Result := nil;
 try
  aNode.GetEntity(l_BaseEntity);
  try
   if Supports(l_BaseEntity, IListEntryInfo, l_ListEntry) then
    try
     l_ListEntry.GetDoc(Result);
    finally
     l_ListEntry := nil;
    end;//try..finally
  finally
   l_BaseEntity := nil;
  end;//try..finally
 except
  on E: Exception do
   l3System.Exception2Log(E);
 end;//try..except
//#UC END# *4C3AB1450150_497DDB2B001B_impl*
//#UC START# *4C3AB1450150_497DDB2B001B_var*
var
 l_BaseEntity: IEntityBase;
 l_ListEntry: IListEntryInfo;
//#UC END# *4C3AB1450150_497DDB2B001B_var*
//#UC START# *4C3C77CC012A_497DDB2B001Bexec_impl*
 Assert(false);
//#UC END# *4C3C77CC012A_497DDB2B001Bexec_impl*
//#UC START# *4C3C77CC012A_497DDB2B001Bexec_var*
//#UC END# *4C3C77CC012A_497DDB2B001Bexec_var*
//#UC START# *4C3C77CC012A_497DDB2B001Btest_impl*
 aParams.Op.Flag[vcm_ofEnabled] := False;
//#UC END# *4C3C77CC012A_497DDB2B001Btest_impl*
//#UC START# *4C3C77CC012A_497DDB2B001Btest_var*
//#UC END# *4C3C77CC012A_497DDB2B001Btest_var*
//#UC START# *4C46BD3E00FD_497DDB2B001B_impl*
 ListOpsTest(aParams);
 nsDisableOperationInTrialMode(aParams);
//#UC END# *4C46BD3E00FD_497DDB2B001B_impl*
//#UC START# *4C46BD3E00FD_497DDB2B001B_var*
//#UC END# *4C46BD3E00FD_497DDB2B001B_var*
//#UC START# *4C46BDD50220_497DDB2B001B_impl*
 Result := nil;
 if Assigned(dsList) then
 begin
  with dsList do
   l_Super := MakeSuperPreview(bsListPrintOnlyFirstLevel(ListType), WithTexts);
  if (l_Super <> nil) and (l_Super.DocumentTitles <> nil) and (l_Super.DocumentTitles.Document <> nil) and
   Supports(tvList.TreeView.CurrentNode, Il3SimpleNode, l_Node) then
   l_Super.DocumentTitles.Document.SetCurrentPagePara(dsList.NodeId(l_Node));
  Result := l_Super;
 end;//if Assigned(dsDocumentList) then
//#UC END# *4C46BDD50220_497DDB2B001B_impl*
//#UC START# *4C46BDD50220_497DDB2B001B_var*
//#UC END# *4C46BDD50220_497DDB2B001B_var*
//#UC START# *4C46BEFD00CB_497DDB2B001B_impl*
 if Assigned(dsList) and not dsList.IsListEmpty then
  try
   l_Stream := nil;
   with dmStdRes do begin
    if afw.Application.IsInternal then
     SaveDialog.DialogKind := ns_sdkListInternal
    else
     SaveDialog.DialogKind := ns_sdkList;

    if InitialSaveTitles then
     SaveDialog.SaveListTarget := ns_sdlkTitles
    else
     SaveDialog.SaveListTarget := ns_sdlkContents;
    SaveDialog.MergeChecked := False;
    SaveDialog.SelectedOnlyEnabled := tvList.TreeView.Tree.SelectedCount >= MinSelectedCount;
    SaveDialog.SelectedOnlyChecked := SaveDialog.SelectedOnlyEnabled;
    //l_PathName := dsList.ListName;
    l_Output := TnsGetGenOutputStruct_Create(dsList.ListName);
    if SaveDialog.SelectedOnlyChecked then
    begin
     if InitialSaveTitles then
      l_Output.rName := l3Fmt(vcmCStr(str_SaveSelectedListPrefix),[l_Output.rName])
     else
      l_Output.rName := l3Fmt(vcmCStr(str_ExportSelectedListPrefix),[l_Output.rName]);
    end;//if SaveDialog.SelectedOnlyChecked then
    SaveDialog.FileName := l3Str(nsPrepareFileName(l_Output.rName));
    SaveDialog.OnCanClose := SaveDialogCanClose;
    try
     if TnsSaveDialogExecutor.Instance.Call(SaveDialog) then
     begin
      if (SaveDialog.SaveListTarget = ns_sdlkTitles) and
         (SaveDialog.SelectedFileFormat = ns_ffXML) and
         defDataAdapter.ListXMLExportEnabled then
      begin
       dsList.SaveToFile(l3PCharLen(SaveDialog.FileName), SaveDialog.SelectedOnlyChecked);
       Exit;
      end;
      TnsListExportToFileEvent.Log(dsList.List, ApproxExportCount(SaveDialog.SelectedOnlyChecked),
        SaveDialog.SelectedOnlyChecked, SaveDialog.SaveListTarget);
      case SaveDialog.SaveListTarget of
       ns_sdlkTitles,
       ns_sdlkIdentifiers:
        begin
         l_Visualizer := bsMakeSaveVisualizer(vcmCStr(str_SaveListVisualizer));
         try
          l_Stream := dsList.ListAsText(CalcSaveListKind(SaveDialog.SaveListTarget = ns_sdlkTitles),
            SaveDialog.SelectedOnlyChecked);
          try
           //http://mdp.garant.ru/pages/viewpage.action?pageId=484813563
           Finalize(l_Output);
           l_Output := TnsGetGenOutputStruct_Create(nsCStr(SaveDialog.FileName));
           if not nsEvdStreamSaveAs(l_Stream,
                                    l_Output,
                                    SaveDialog.SelectedFileFormat,
                                    False) then
           begin
            l_Visualizer := nil;
            Say(err_CannotSave, [l_Output.rName]);
           end;
          finally
            l_Stream := nil;
          end;
         finally
          l_Visualizer := nil;
         end;
        end;
       ns_sdlkContents:
        begin
         afw.ProcessMessages;
         try
          l_Saved := True;
          l_Visualizer := bsMakeSaveVisualizer(vcmCStr(str_SaveDocumentsVisualizer));
          try
           if SaveDialog.MergeChecked then
            l_Saved := dsList.MergeDocuments(bsListPrintOnlyFirstLevel(dsList.ListType),
             SaveDialog.SelectedOnlyChecked, nsCStr(SaveDialog.FileName),
             SaveDialog.SelectedFileFormat, afw.Application.IsInternal)
           else
            l_Saved := dsList.ExportDocuments(bsListPrintOnlyFirstLevel(dsList.ListType),
             SaveDialog.SelectedOnlyChecked, nsCStr(ExtractFilePath(SaveDialog.FileName)),
             SaveDialog.SelectedFileFormat);
          finally
           l_Visualizer := nil;
          end;
           if not l_Saved then
          begin
           if SaveDialog.MergeChecked then
            DeleteFile(SaveDialog.FileName);
            Say(inf_ExportForThisDocumentsImpossible)
          end;
         except
          on ECannotSave do
           Say(err_ListSaveToFileError);
         end{try..except}
        end;
      end;
     end;
    finally
     SaveDialog.OnCanClose := nil;
     Dispatcher.UpdateStatus;
    end;
   end;
  except
   on E: Exception do
    l3System.Exception2Log(E);
  end;
//#UC END# *4C46BEFD00CB_497DDB2B001B_impl*
//#UC START# *4C46BEFD00CB_497DDB2B001B_var*
var
 l_Stream     : IStream;
 l_Visualizer : IafwLongProcessVisualizer;
 l_Output: TnsGetGenOutputStruct;
 l_Saved: Boolean;
//#UC END# *4C46BEFD00CB_497DDB2B001B_var*
//#UC START# *4C46C3D50130_497DDB2B001B_impl*
 with Sender as TnsSaveDIalog do
 begin
  if (SaveListTarget = ns_sdlkContents) and (ApproxExportCount(SelectedOnlyChecked) > c_MaxDocumentInListLimit) then
   if not afw.Application.IsInternal or not afw.Settings.LoadBoolean(pi_List_ExportWORestrictions, dv_List_ExportWORestrictions) then
   begin
    CanClose := False;
    Say(war_TryToExportTooManyDocs, [c_MaxDocumentInListLimit]);
   end;
  if (SaveListTarget = ns_sdlkTitles) and (ApproxExportCount(SelectedOnlyChecked) > c_MaxTotalDocumentInListLimit) then
   if not afw.Application.IsInternal or not afw.Settings.LoadBoolean(pi_List_ExportWORestrictions, dv_List_ExportWORestrictions) then
   begin
    CanClose := False;
    Say(war_TryToExportTooManyTotalDocs, [c_MaxTotalDocumentInListLimit]);
   end;
 end; 
//#UC END# *4C46C3D50130_497DDB2B001B_impl*
//#UC START# *4C46C3D50130_497DDB2B001B_var*
//#UC END# *4C46C3D50130_497DDB2B001B_var*
//#UC START# *4C46C40703A2_497DDB2B001B_impl*
 if aUseSelection then
  Result := tvList.TreeView.Tree.SelectedCount
 else
  Result := tvList.TreeView.Tree.Root.ThisChildrenCount;
//#UC END# *4C46C40703A2_497DDB2B001B_impl*
//#UC START# *4C46C40703A2_497DDB2B001B_var*
//#UC END# *4C46C40703A2_497DDB2B001B_var*
//#UC START# *4C46C42C019B_497DDB2B001B_impl*
 if aTitles then
 begin
  if bsListPrintOnlyFirstLevel(dsList.ListType) then
   Result := bs_slkTitlesFirstLevel
  else
   Result := bs_slkTitlesFullTree
 end
 else
  Result := bs_slkTitlesTopicNumbers
//#UC END# *4C46C42C019B_497DDB2B001B_impl*
//#UC START# *4C46C42C019B_497DDB2B001B_var*
//#UC END# *4C46C42C019B_497DDB2B001B_var*
//#UC START# *4C46C48700C2_4C46C47002CA_impl*
 l_Data := MakeParamsList;
 l_Data.AddObject(aList);
 l_Data.AddULong(aCount);
 l_Data.AddULong(c_SelectionMap[aSelection]);
 l_Data.AddULong(c_TypeMap[aTarget]);
 GetLogger.AddEvent(LE_LIST_EXPORT_TO_FILE, l_Data);
//#UC END# *4C46C48700C2_4C46C47002CA_impl*
//#UC START# *4C46C48700C2_4C46C47002CA_var*
var
 l_Data: InsLogEventData;
const
 c_TypeMap: array [TnsSaveDialogListTarget] of Integer = (0, 1, 2);
//#UC END# *4C46C48700C2_4C46C47002CA_var*
//#UC START# *4C46CA7A0020_497DDB2B001B_impl*
 aParams.Op.Flag[vcm_ofEnabled] := Assigned(dsList) and
  (Printer.Printers.Count > 0) and not dsList.IsListEmpty and
  HasCurrent;
//#UC END# *4C46CA7A0020_497DDB2B001B_impl*
//#UC START# *4C46CA7A0020_497DDB2B001B_var*
//#UC END# *4C46CA7A0020_497DDB2B001B_var*
//#UC START# *4C46CAC40062_4C46CAB8035D_impl*
 l_Data := MakeParamsList;
 l_Data.AddObject(aList);
 l_Data.AddULong(aCount);
 l_Data.AddULong(c_SelectionMap[aSelection]);
 GetLogger.AddEvent(LE_LIST_PRINT_PREVIEW, l_Data);
//#UC END# *4C46CAC40062_4C46CAB8035D_impl*
//#UC START# *4C46CAC40062_4C46CAB8035D_var*
var
 l_Data: InsLogEventData;
//#UC END# *4C46CAC40062_4C46CAB8035D_var*
//#UC START# *4C46CBBD0211_497DDB2B001B_impl*
 Result := nil;
 if Assigned(dsList) then
 try
  Result := dsList.ListName;
  if aHasSelection then
   Result := vcmFmt(str_SaveSelectedListPrefix, [Result]);
 except
  on E: Exception do
   l3System.Exception2Log(E);
 end;//try..except
//#UC END# *4C46CBBD0211_497DDB2B001B_impl*
//#UC START# *4C46CBBD0211_497DDB2B001B_var*
//#UC END# *4C46CBBD0211_497DDB2B001B_var*
//#UC START# *4C46CC6D02D6_4C46CC5C0104_impl*
 l_Data := MakeParamsList;
 l_Data.AddObject(aList);
 l_Data.AddULong(aCount);
 l_Data.AddULong(c_SelectionMap[aSelection]);
 GetLogger.AddEvent(LE_LIST_EXPORT_TO_WORD, l_Data);
//#UC END# *4C46CC6D02D6_4C46CC5C0104_impl*
//#UC START# *4C46CC6D02D6_4C46CC5C0104_var*
var
 l_Data: InsLogEventData;
//#UC END# *4C46CC6D02D6_4C46CC5C0104_var*
//#UC START# *4C46CD590073_4C46CD36024B_impl*
 l_Data := MakeParamsList;
 l_Data.AddObject(aList);
 l_Data.AddULong(aCount);
 l_Data.AddULong(c_SelectionMap[aSelection]);
 GetLogger.AddEvent(LE_SEND_LIST_BY_EMAIL, l_Data);
//#UC END# *4C46CD590073_4C46CD36024B_impl*
//#UC START# *4C46CD590073_4C46CD36024B_var*
var
 l_Data: InsLogEventData;
//#UC END# *4C46CD590073_4C46CD36024B_var*
//#UC START# *4C46E7160275_497DDB2B001Bexec_impl*
 OpenInNewWindow;
//#UC END# *4C46E7160275_497DDB2B001Bexec_impl*
//#UC START# *4C46E7160275_497DDB2B001Bexec_var*
//#UC END# *4C46E7160275_497DDB2B001Bexec_var*
//#UC START# *4C46E91E0188_497DDB2B001B_impl*
 // http://mdp.garant.ru/pages/viewpage.action?pageId=414849606
 l_Container := nsNewWindow(NativeMainForm);
 if (l_Container <> nil) then
 try
  OpenCurrentList(l_Container);
 finally
  l_Container := nil;
 end;
//#UC END# *4C46E91E0188_497DDB2B001B_impl*
//#UC START# *4C46E91E0188_497DDB2B001B_var*
var
 l_Container: IvcmContainer;
//#UC END# *4C46E91E0188_497DDB2B001B_var*
//#UC START# *4C46EB11016B_497DDB2B001Bexec_impl*
 if Assigned(dsList) then
 begin
  l_Data := dsList.OpenListFromSelectedNodes;
  if Assigned(l_Data) then
  try
   l_Cont := nsOpenNewWindowTabbed(NativeMainForm);
   // http://mdp.garant.ru/pages/viewpage.action?pageId=414849606
   if (l_Cont <> nil) then
   try
    TvcmModulesFactories.OpenList(l_Data, l_Cont);
   finally
    l_Cont := nil;
   end;//try..finally
  finally
   l_Data := nil;
  end;{try..finally}
 end;//if Assigned(dsDocumentList) then
//#UC END# *4C46EB11016B_497DDB2B001Bexec_impl*
//#UC START# *4C46EB11016B_497DDB2B001Bexec_var*
var
 l_Data   : IdeList;
 l_Cont : IvcmContainer;
//#UC END# *4C46EB11016B_497DDB2B001Bexec_var*
//#UC START# *4C46EB11016B_497DDB2B001Btest_impl*
 SelectionOpsTest(aParams);
//#UC END# *4C46EB11016B_497DDB2B001Btest_impl*
//#UC START# *4C46EB11016B_497DDB2B001Btest_var*
//#UC END# *4C46EB11016B_497DDB2B001Btest_var*
//#UC START# *4C5289B102E0_497DDB2B001B_impl*
 Result := (sdsBaseDocument <> nil) AND (sdsBaseDocument.DocInfo <> nil) AND
           (sdsBaseDocument.DocInfo.Doc <> nil) AND
           (sdsBaseDocument.DocInfo.Doc.GetDocType = DT_FLASH);
 aParams.Op.Flag[vcm_ofEnabled] := not Result;
//#UC END# *4C5289B102E0_497DDB2B001B_impl*
//#UC START# *4C5289B102E0_497DDB2B001B_var*
//#UC END# *4C5289B102E0_497DDB2B001B_var*
//#UC START# *4C5289E9034B_497DDB2B001B_impl*
 DocumentOpsTest(aParams);
 nsDisableOperationInTrialMode(aParams);
//#UC END# *4C5289E9034B_497DDB2B001B_impl*
//#UC START# *4C5289E9034B_497DDB2B001B_var*
//#UC END# *4C5289E9034B_497DDB2B001B_var*
//#UC START# *4C528A1900DC_497DDB2B001B_impl*
 with tvList.TreeView do
  aParams.Op.Flag[vcm_ofEnabled] := lp_IsValidDocument and
   NoMoreThanOneSelected and HasCurrent;
//#UC END# *4C528A1900DC_497DDB2B001B_impl*
//#UC START# *4C528A1900DC_497DDB2B001B_var*

  function lp_IsValidDocument: Boolean;
  begin
   // Для докуменов вводится ограничение на выполняемые операции, для препаратов
   // ограничений на выполенние операции нет:
   if dsDocumentList <> nil then
    Result := dsDocumentList.IsDocument
   else
    Result := dsList <> nil;
  end;//lp_IsValidDocument

//#UC END# *4C528A1900DC_497DDB2B001B_var*
//#UC START# *4C52AA040095_497DDB2B001Bexec_impl*
 ClearFilters;
//#UC END# *4C52AA040095_497DDB2B001Bexec_impl*
//#UC START# *4C52AA040095_497DDB2B001Bexec_var*
//#UC END# *4C52AA040095_497DDB2B001Bexec_var*
//#UC START# *4C52E8030278_497DDB2B001B_impl*
 if (dsList <> nil) then
  dsList.CurrentChanged(tvList.GetCurrentNode);
//#UC END# *4C52E8030278_497DDB2B001B_impl*
//#UC START# *4C52E8030278_497DDB2B001B_var*
//#UC END# *4C52E8030278_497DDB2B001B_var*
//#UC START# *4C8103FB02FD_497DDB2B001Bexec_impl*
 if Assigned(dsDocumentList) then
  TvcmModulesFactories.MakeListAnalizer(dsDocumentList.MakeAnalizeTree);
//#UC END# *4C8103FB02FD_497DDB2B001Bexec_impl*
//#UC START# *4C8103FB02FD_497DDB2B001Bexec_var*
//#UC END# *4C8103FB02FD_497DDB2B001Bexec_var*
//#UC START# *4C8103FB02FD_497DDB2B001Btest_impl*
 aParams.Op.Flag[vcm_ofEnabled] := not IsListEmpty and
  {(tvList.TreeView.Tree.SelectedCount = 1) and}
  // http://mdp.garant.ru/pages/viewpage.action?pageId=253662765&focusedCommentId=253663972#comment-253663972
  Assigned(dsDocumentList) and dsDocumentList.CanAnalize;
//#UC END# *4C8103FB02FD_497DDB2B001Btest_impl*
//#UC START# *4C8103FB02FD_497DDB2B001Btest_var*
//#UC END# *4C8103FB02FD_497DDB2B001Btest_var*
//#UC START# *4C810A2702D9_497DDB2B001Bexec_impl*
 TvcmModulesFactories.AttributeSearch(nil, dsList.List, nil);
//#UC END# *4C810A2702D9_497DDB2B001Bexec_impl*
//#UC START# *4C810A2702D9_497DDB2B001Bexec_var*
//#UC END# *4C810A2702D9_497DDB2B001Bexec_var*
//#UC START# *4C810A2702D9_497DDB2B001Btest_impl*
 ListOpsTest(aParams);
//#UC END# *4C810A2702D9_497DDB2B001Btest_impl*
//#UC START# *4C810A2702D9_497DDB2B001Btest_var*
//#UC END# *4C810A2702D9_497DDB2B001Btest_var*
//#UC START# *4C81191003E5_497DDB2B001Bexec_impl*
 if (ucpFilters = nil) then
  TFiltersService.Instance.OldSchoolFiltersOpen(Aggregate, nil, Self)
 else
  TFiltersService.Instance.FiltersOpen(ucpFilters);
//#UC END# *4C81191003E5_497DDB2B001Bexec_impl*
//#UC START# *4C81191003E5_497DDB2B001Bexec_var*
//#UC END# *4C81191003E5_497DDB2B001Bexec_var*
//#UC START# *4C81191003E5_497DDB2B001Btest_impl*
 // Do nothing
//#UC END# *4C81191003E5_497DDB2B001Btest_impl*
//#UC START# *4C81191003E5_497DDB2B001Btest_var*
//#UC END# *4C81191003E5_497DDB2B001Btest_var*
//#UC START# *4CDD19B503B1_497DDB2B001Bget_impl*
 if (sdsBaseDocument = nil) then
  Result := 0
 else
  try
   if (sdsBaseDocument.DocInfo = nil) OR
      (sdsBaseDocument.DocInfo.Doc = nil) then
    Result := 0
   else
    Result := sdsBaseDocument.DocInfo.Doc.GetInternalId + c_InternalDocShift;
  except
   on ECanNotFindData do
    Result := 0;
  end;//try..except
//#UC END# *4CDD19B503B1_497DDB2B001Bget_impl*
//#UC START# *4CDD19B503B1_497DDB2B001Bget_var*
//#UC END# *4CDD19B503B1_497DDB2B001Bget_var*
//#UC START# *4CDD1A02013D_497DDB2B001Bget_impl*
 if (sdsBaseDocument = nil) then
  Result := nil
 else
  Result := sdsBaseDocument.DocInfo.DocName;
//#UC END# *4CDD1A02013D_497DDB2B001Bget_impl*
//#UC START# *4CDD1A02013D_497DDB2B001Bget_var*
//#UC END# *4CDD1A02013D_497DDB2B001Bget_var*
//#UC START# *4DBA95ED03B7_497DDB2B001Bexec_impl*
 ClearFilters;
//#UC END# *4DBA95ED03B7_497DDB2B001Bexec_impl*
//#UC START# *4DBA95ED03B7_497DDB2B001Bexec_var*
//#UC END# *4DBA95ED03B7_497DDB2B001Bexec_var*
//#UC START# *4F1D607E0027_497DDB2B001Bget_impl*
 Result := true;
//#UC END# *4F1D607E0027_497DDB2B001Bget_impl*
//#UC START# *4F1D607E0027_497DDB2B001Bget_var*
//#UC END# *4F1D607E0027_497DDB2B001Bget_var*
//#UC START# *4F7EEE6D030A_497DDB2B001B_impl*
 if Supports(tvList.TreeStruct, Il3FilterableTree, l_Tree) then
 try
  l_Node := tvList.GetCurrentNode;
  try
   l_Filtered := l_Tree.MakeFiltered(l_Tree.
                                     CloneFilters.
                                     SetContext(cfList.ActiveContext),
                                     l_Node,
                                     l_NewNodeIndex,
                                     True,
                                     cfList.NeedRefilterTree);
   if Assigned(l_Filtered) and (l_Filtered.CountView > 0) then
   begin
    tvList.TreeStruct := l_Filtered;
    if l_Node <> nil then
     tvList.GotoOnNode(l_Node);
   end;
  finally
   l_Node := nil;
  end;
 finally
  l_Tree := nil;
 end;
//#UC END# *4F7EEE6D030A_497DDB2B001B_impl*
//#UC START# *4F7EEE6D030A_497DDB2B001B_var*
var
 l_Tree: Il3FilterableTree;
 l_Filtered: Il3SimpleTree;
 l_Node: Il3SimpleNode;
 l_NewNodeIndex: Integer;
//#UC END# *4F7EEE6D030A_497DDB2B001B_var*
//#UC START# *4F7EEEA2013D_497DDB2B001B_impl*
 nsBeepWrongContext;
//#UC END# *4F7EEEA2013D_497DDB2B001B_impl*
//#UC START# *4F7EEEA2013D_497DDB2B001B_var*
//#UC END# *4F7EEEA2013D_497DDB2B001B_var*
//#UC START# *4F7EEEF800E8_497DDB2B001B_impl*
 // Все элементы были удалены нужно показать сообщение:
 ShowEditorOrList(nil);
 Dispatcher.UpdateStatus;
// if Assigned(dsList) then
//  dsList.CurrentChanged(tvList.GetCurrentNode, False);
 CallCurrentChanged;
//#UC END# *4F7EEEF800E8_497DDB2B001B_impl*
//#UC START# *4F7EEEF800E8_497DDB2B001B_var*
//#UC END# *4F7EEEF800E8_497DDB2B001B_var*
//#UC START# *4F7EEF230221_497DDB2B001B_impl*
 {$IfDef vcmUseProfilers}
 if UserType = lftNone then
  ProfilersManager.ListAfterSearch.Finish;
 {$EndIf vcmUseProfilers}
//#UC END# *4F7EEF230221_497DDB2B001B_impl*
//#UC START# *4F7EEF230221_497DDB2B001B_var*
//#UC END# *4F7EEF230221_497DDB2B001B_var*
//#UC START# *4F7EEF450143_497DDB2B001B_impl*
 Dispatcher.UpdateStatus;
//#UC END# *4F7EEF450143_497DDB2B001B_impl*
//#UC START# *4F7EEF450143_497DDB2B001B_var*
//#UC END# *4F7EEF450143_497DDB2B001B_var*
//#UC START# *4F7EEF8500A8_497DDB2B001B_impl*
 Result := nil;
 if Assigned(dsList) then
 begin
  l_NT := dsList.ListNodeType(tvList.GetNode(Index));
  case l_NT of
   lntAAC: Result := vcmCStr(str_lntAAC);
   lntBlock: Result := vcmCStr(str_lntBlock);
   lntDocActive: Result := vcmCStr(str_lntDocActive);
   lntDocPreActive: Result := vcmCStr(str_lntDocPreActive);
   lntDocAbolished: Result := vcmCStr(str_lntDocAbolished);
   lntRedaction: Result := vcmCStr(str_lntRedaction);
   lntRedactions: Result := vcmCStr(str_lntRedactions);
   lntDrugAnnuled: Result := vcmCStr(str_lntDrugAnnuled);
   lntDrugNarcotic: Result := vcmCStr(str_lntDrugNarcotic);
   lntDrugNoAnnuledNoNarcoric: Result := vcmCStr(str_lntDrugNoAnnuledNoNarcoric);
   lntFormAnnuled: Result := vcmCStr(str_lntFormAnnuled);
   lntFormRussianImportant: Result := vcmCStr(str_lntFormRussianImportant);
   lntFormNoRussianImportant: Result := vcmCStr(str_lntFormNoRussianImportant);
   lntFormRussianNoImportant: Result := vcmCStr(str_lntFormRussianNoImportant);
   lntFormNoRussianNoImportant: Result := vcmCStr(str_lntFormNoRussianNoImportant);
  else
   Result := vcmCStr(str_Empty);
  end;
 end;
//#UC END# *4F7EEF8500A8_497DDB2B001B_impl*
//#UC START# *4F7EEF8500A8_497DDB2B001B_var*
var
 l_NT: TbsListNodeType;
//#UC END# *4F7EEF8500A8_497DDB2B001B_var*
//#UC START# *4F7EEFB001FD_497DDB2B001B_impl*
 if (dsSimpleTree <> nil) then
 begin
  theTree := dsSimpleTree.SimpleTree;
  if (theTree <> nil) then
  begin
   if Supports(theTree.RootNode, INodeBase, l_Node) then
    l_Node.SetAllFlag(FM_SELECTION, False);
   if (dsDocumentList <> nil) and dsDocumentList.IsSnippet then
    theTree.ExpandSubDir(nil, True, 0);
  end;//theTree <> nil
 end//dsSimpleTree <> nil
 else
  theTree := nil;
//#UC END# *4F7EEFB001FD_497DDB2B001B_impl*
//#UC START# *4F7EEFB001FD_497DDB2B001B_var*
var
 l_Node: INodeBase;
//#UC END# *4F7EEFB001FD_497DDB2B001B_var*
//#UC START# *4F7EEFD601CE_497DDB2B001B_impl*
 if Assigned(dsList) then
  Result := cListNodeTypeImageIndex[dsList.ListNodeType(tvList.GetNode(Index))]
 else
  Result := -1;
//#UC END# *4F7EEFD601CE_497DDB2B001B_impl*
//#UC START# *4F7EEFD601CE_497DDB2B001B_var*
const
 cListNodeTypeImageIndex : array [TbsListNodeType] of Integer = (
  InfoIcon, // lntUnknown,
  SubIcon, // lntBlock
  DocIcon, // lntDocActive
  DocIcon + PreActiveOffset, // lntDocPreActive
  DocIcon + NoActiveOffset, // lntDocAbolished
  ExObjIcon, // lntExternalObject
  WWWIcon, // lntExternalLink
  RedactionIcon, // lntRedaction
  RedactionFolder, // lntRedactions
  DrugAnnuled, // lntDrugAnnuled,
  DrugNarcotic, // lntDrugNarcotic,
  DrugNoAnnuledNoNarcoric, // lntDrugNoAnnuledNoNarcoric,
  FormAnnuled, // lntFormAnnuled,
  FormRussianImportant, // lntFormRussianImportant,
  FormNoRussianImportant, // lntFormNoRussianImportant,
  FormRussianNoImportant, // lntFormRussianNoImportant,
  FormNoRussianNoImportant, // lntFormNoRussianNoImportant
  DocIcon,
  AACDocumentIcon
 );
//#UC END# *4F7EEFD601CE_497DDB2B001B_var*
//#UC START# *4F7EF0130083_497DDB2B001B_impl*
 if dsList <> nil then
 begin
  // Установить теекущий необходимо после удаления элементов из дерева.
  // Ситуация такая:
  // - удаляем элементы из дерева;
  // - обязательно обнуляем документ в бизнес объекте, потому, что если держать
  //   текущий и спросить INodeBase.IsSame, адаптеру будет плохо;
  // - событие CurrentChanged дереву не пришло, это возможно в случае если
  //   удалили все кроме текущего, см. описание (CQ: 20409);
  // - поэтому текущий устанавливаем здесь:
  //dsList.CurrentChanged(tvList.GetCurrentNode, False);
  CallCurrentChanged;
  if dsList.OpenDocument(l_DataInfo) then
  try
   Dispatcher.LockCursor;
   try
    l_OpenKind := nsDocumentsFromListOpenKind;
    l_Cont := nsOpenNewWindowTabbed(NativeMainForm, l_OpenKind);
    if (l_Cont = nil) then
     Exit;
    InitNewContainerBaseSearch(l_Cont, l_OpenKind);
    // - http://mdp.garant.ru/pages/viewpage.action?pageId=566792807
    OpenDocument(l_DataInfo, l_Cont, (l_OpenKind = vcm_okInNewTab));
   finally
    Dispatcher.UnlockCursor;
   end;//try..finally
  finally
   l_DataInfo := nil;
  end;//try..finally
 end;//if Assigned(dsDocumentList) then
//#UC END# *4F7EF0130083_497DDB2B001B_impl*
//#UC START# *4F7EF0130083_497DDB2B001B_var*
var
 l_DataInfo: IdeDocInfo;
 l_Cont : IvcmContainer;
 l_OpenKind: TvcmMainFormOpenKind;
//#UC END# *4F7EF0130083_497DDB2B001B_var*
//#UC START# *4F7EF03501DF_497DDB2B001B_impl*
 if (dsList <> nil) then
  dsList.CurrentChanged(tvList.GetCurrentNode);
//#UC END# *4F7EF03501DF_497DDB2B001B_impl*
//#UC START# *4F7EF03501DF_497DDB2B001B_var*
//#UC END# *4F7EF03501DF_497DDB2B001B_var*
//#UC START# *4F7EF07001DF_497DDB2B001B_impl*
 ShowEditorOrList(aNewTree);
//#UC END# *4F7EF07001DF_497DDB2B001B_impl*
//#UC START# *4F7EF07001DF_497DDB2B001B_var*
//#UC END# *4F7EF07001DF_497DDB2B001B_var*
//#UC START# *4F7EF09F0325_497DDB2B001B_impl*
 UpdateFooter;
//#UC END# *4F7EF09F0325_497DDB2B001B_impl*
//#UC START# *4F7EF09F0325_497DDB2B001B_var*
//#UC END# *4F7EF09F0325_497DDB2B001B_var*
//#UC START# *4F7EF0DC0246_497DDB2B001B_impl*
 Dispatcher.UpdateStatus;
//#UC END# *4F7EF0DC0246_497DDB2B001B_impl*
//#UC START# *4F7EF0DC0246_497DDB2B001B_var*
//#UC END# *4F7EF0DC0246_497DDB2B001B_var*
//#UC START# *4F7EF12300F6_497DDB2B001B_impl*
 if Assigned(dsDocumentList) then
 begin
  // Для списков отсортированных по релевантности, для внутренней версии,
  // показываем релевантность текущего элемента (CQ: OIT5-23059):
  if afw.Application.IsInternal and (dsDocumentList.SortType = ST_RELEVANCE) then
   Info := vcmFmt(str_ListStatusInfoWithRelevance, [aCurrent, aCount, aSelected, dsDocumentList.CurrentRelevance]);

  if dsDocumentList.IsShortList then
  begin
   l_Count := dsDocumentList.FullListCount;
   l_Count := l_Count - l_Count mod c_Count;
   if l_Count > 0
    then Info := l3LTrim(l3Cat([Info, vcmFmt(str_ApproxShortListCount, [l_Count])]))
    else Info := l3LTrim(l3Cat([Info, vcmFmt(str_ApproxShortListCountEx, [c_Count])]));
  end;
 end;
//#UC END# *4F7EF12300F6_497DDB2B001B_impl*
//#UC START# *4F7EF12300F6_497DDB2B001B_var*
var
 l_Count: Integer;
const
 c_Count = 100;
//#UC END# *4F7EF12300F6_497DDB2B001B_var*
//#UC START# *4F7EF16A0086_497DDB2B001B_impl*
 if HasContextFiltration then
  cfList.PressChar(aChar);
//#UC END# *4F7EF16A0086_497DDB2B001B_impl*
//#UC START# *4F7EF16A0086_497DDB2B001B_var*
//#UC END# *4F7EF16A0086_497DDB2B001B_var*
//#UC START# *4F7EF18C027D_497DDB2B001B_impl*
 if not aFocused then
  aFocused := f_SearchWindowVisible;
//#UC END# *4F7EF18C027D_497DDB2B001B_impl*
//#UC START# *4F7EF18C027D_497DDB2B001B_var*
//#UC END# *4F7EF18C027D_497DDB2B001B_var*
//#UC START# *4F7EF1C1030D_497DDB2B001B_impl*
 DoSwitchToFullList;
//#UC END# *4F7EF1C1030D_497DDB2B001B_impl*
//#UC START# *4F7EF1C1030D_497DDB2B001B_var*
//#UC END# *4F7EF1C1030D_497DDB2B001B_var*
//#UC START# *4F7EF6430383_497DDB2B001B_impl*
 tvList.FooterVisible := Assigned(dsDocumentList) and dsDocumentList.IsShortList;
 CanSwithToFullList := tvList.FooterVisible;
 Dispatcher.UpdateStatus;
//#UC END# *4F7EF6430383_497DDB2B001B_impl*
//#UC START# *4F7EF6430383_497DDB2B001B_var*
//#UC END# *4F7EF6430383_497DDB2B001B_var*
//#UC START# *4F7EFAA2026F_497DDB2B001B_impl*
 Result := UserType = lftDrugList;
//#UC END# *4F7EFAA2026F_497DDB2B001B_impl*
//#UC START# *4F7EFAA2026F_497DDB2B001B_var*
//#UC END# *4F7EFAA2026F_497DDB2B001B_var*
//#UC START# *4F99403A00A5_497DDB2B001Bexec_impl*
 if (dsList <> nil) then
  Result := dsList.ListType
 else
  Result := bs_ltNone;
//#UC END# *4F99403A00A5_497DDB2B001Bexec_impl*
//#UC START# *4F99403A00A5_497DDB2B001Bexec_var*
//#UC END# *4F99403A00A5_497DDB2B001Bexec_var*
//#UC START# *4FE83BFC039C_497DDB2B001Bexec_impl*
 Result := dsList;
//#UC END# *4FE83BFC039C_497DDB2B001Bexec_impl*
//#UC START# *4FE83BFC039C_497DDB2B001Bexec_var*
//#UC END# *4FE83BFC039C_497DDB2B001Bexec_var*
//#UC START# *51DC1AA10279_497DDB2B001B_impl*
 Assert(Assigned(dsList));
 Result := dsList.ListNodeType(tvList.GetNode(anIndex));
//#UC END# *51DC1AA10279_497DDB2B001B_impl*
//#UC START# *51DC1AA10279_497DDB2B001B_var*
//#UC END# *51DC1AA10279_497DDB2B001B_var*
//#UC START# *536B8B1C39F1_497DDB2B001B_impl*
 LftRespondentQueryMaximized(aSender);
//#UC END# *536B8B1C39F1_497DDB2B001B_impl*
//#UC START# *536B8B1C39F1_497DDB2B001B_var*
//#UC END# *536B8B1C39F1_497DDB2B001B_var*
//#UC START# *53DB376C0239_497DDB2B001Bexec_impl*
 if Assigned(dsDocumentList) then
  TvcmModulesFactories.MakeListAnalizer(dsDocumentList.MakeAnalizeTree);
//#UC END# *53DB376C0239_497DDB2B001Bexec_impl*
//#UC START# *53DB376C0239_497DDB2B001Bexec_var*
//#UC END# *53DB376C0239_497DDB2B001Bexec_var*
//#UC START# *53DB376C0239_497DDB2B001Btest_impl*
 aParams.Op.Flag[vcm_ofEnabled] := not IsListEmpty and
  {(tvList.TreeView.Tree.SelectedCount = 1) and}
  // http://mdp.garant.ru/pages/viewpage.action?pageId=253662765&focusedCommentId=253663972#comment-253663972
  Assigned(dsDocumentList) and dsDocumentList.CanAnalize and (aParams.Control = tvList);
//#UC END# *53DB376C0239_497DDB2B001Btest_impl*
//#UC START# *53DB376C0239_497DDB2B001Btest_var*
//#UC END# *53DB376C0239_497DDB2B001Btest_var*
//#UC START# *53EB17EF0306_497DDB2B001B_impl*
 Result := NoMoreThanOneSelected AND (not IsListEmpty);
//#UC END# *53EB17EF0306_497DDB2B001B_impl*
//#UC START# *53EB17EF0306_497DDB2B001B_var*
//#UC END# *53EB17EF0306_497DDB2B001B_var*
//#UC START# *53FF40030272_497DDB2B001Bexec_impl*
 List_Analize_Execute(aParams);
//#UC END# *53FF40030272_497DDB2B001Bexec_impl*
//#UC START# *53FF40030272_497DDB2B001Bexec_var*
//#UC END# *53FF40030272_497DDB2B001Bexec_var*
//#UC START# *53FF40030272_497DDB2B001Btest_impl*
 List_Analize_Test(aParams);
//#UC END# *53FF40030272_497DDB2B001Btest_impl*
//#UC START# *53FF40030272_497DDB2B001Btest_var*
//#UC END# *53FF40030272_497DDB2B001Btest_var*
//#UC START# *543E272E0005_497DDB2B001B_impl*
 Assert(aContainer <> nil);
 if (UserType = lftNone) and
    (aOpenKind in [vcm_okInNewWindow, vcm_okInNewTab]) and
    (dsDocumentList <> nil) and
    (dsDocumentList.OpenFrom in [lofBaseSearch, lofBaseSearchEx, lofAttributeSearch]) then
  aContainer.InitFromPrevContainer(NativeMainForm, False);
 // - http://mdp.garant.ru/pages/viewpage.action?pageId=566792807,
 // http://mdp.garant.ru/pages/viewpage.action?pageId=567573990
//#UC END# *543E272E0005_497DDB2B001B_impl*
//#UC START# *543E272E0005_497DDB2B001B_var*
//#UC END# *543E272E0005_497DDB2B001B_var*
//#UC START# *54464C55009D_497DDB2B001B_impl*
 inherited;
 DirtyHackForScrollbar;
//#UC END# *54464C55009D_497DDB2B001B_impl*
//#UC START# *54464C55009D_497DDB2B001B_var*
//#UC END# *54464C55009D_497DDB2B001B_var*
//#UC START# *54464CC601D1_497DDB2B001B_impl*
 if Assigned(tvList) then
  if tvList.HandleAllocated then
   if f_NeedDirtyHackForScrollbar then
   begin
    SetWindowPos(tvList.Handle, 0, 0, 0, 0, 0, SWP_NOSIZE or SWP_NOMOVE or
     SWP_NOZORDER or SWP_NOACTIVATE or SWP_FRAMECHANGED);
    f_NeedDirtyHackForScrollbar := False;
   end;
//#UC END# *54464CC601D1_497DDB2B001B_impl*
//#UC START# *54464CC601D1_497DDB2B001B_var*
//#UC END# *54464CC601D1_497DDB2B001B_var*
//#UC START# *545B93FE00D1_497DDB2B001Bexec_impl*
 List_Sort_Execute(aParams);
//#UC END# *545B93FE00D1_497DDB2B001Bexec_impl*
//#UC START# *545B93FE00D1_497DDB2B001Bexec_var*
//#UC END# *545B93FE00D1_497DDB2B001Bexec_var*
//#UC START# *545B93FE00D1_497DDB2B001Btest_impl*
 List_Sort_Test(aParams);
 if (aParams.Control = tvList) then
   aParams.Op.Flag[vcm_ofEnabled] := False;
//#UC END# *545B93FE00D1_497DDB2B001Btest_impl*
//#UC START# *545B93FE00D1_497DDB2B001Btest_var*
//#UC END# *545B93FE00D1_497DDB2B001Btest_var*
//#UC START# *545B9440035C_497DDB2B001Bexec_impl*
 List_SortDirection_Execute(aParams);
//#UC END# *545B9440035C_497DDB2B001Bexec_impl*
//#UC START# *545B9440035C_497DDB2B001Bexec_var*
//#UC END# *545B9440035C_497DDB2B001Bexec_var*
//#UC START# *545B9440035C_497DDB2B001Bgetstate_impl*
 if HasCurrent and Assigned(dsDocumentList) then
  if dsDocumentList.SortOrder = SO_ASCENDING then
   State := st_user_List_SortDirectionForReminders_Ascending
  else
   State := st_user_List_SortDirectionForReminders_Descending
 else
  State := vcm_DefaultOperationState;
//#UC END# *545B9440035C_497DDB2B001Bgetstate_impl*
//#UC START# *545B9440035C_497DDB2B001Bgetstate_var*
//#UC END# *545B9440035C_497DDB2B001Bgetstate_var*
//#UC START# *545B9440035C_497DDB2B001Btest_impl*
 List_SortDirection_Test(aParams);
 if (aParams.Control = tvList) then
   aParams.Op.Flag[vcm_ofEnabled] := False;
//#UC END# *545B9440035C_497DDB2B001Btest_impl*
//#UC START# *545B9440035C_497DDB2B001Btest_var*
//#UC END# *545B9440035C_497DDB2B001Btest_var*
//#UC START# *545B954A035E_497DDB2B001Bexec_impl*
 List_SpecifyList_Execute(aParams);
//#UC END# *545B954A035E_497DDB2B001Bexec_impl*
//#UC START# *545B954A035E_497DDB2B001Bexec_var*
//#UC END# *545B954A035E_497DDB2B001Bexec_var*
//#UC START# *545B954A035E_497DDB2B001Btest_impl*
 List_SpecifyList_Test(aParams);
 if (aParams.Control = tvList) then
   aParams.Op.Flag[vcm_ofEnabled] := False;
//#UC END# *545B954A035E_497DDB2B001Btest_impl*
//#UC START# *545B954A035E_497DDB2B001Btest_var*
//#UC END# *545B954A035E_497DDB2B001Btest_var*
//#UC START# *5487A60000CE_497DDB2B001B_impl*
 LftRespondentQueryClose(aSender);
//#UC END# *5487A60000CE_497DDB2B001B_impl*
//#UC START# *5487A60000CE_497DDB2B001B_var*
//#UC END# *5487A60000CE_497DDB2B001B_var*
//#UC START# *55127A5401DE_497DDB2B001B_impl*
 case UserType of
  lftDrugList: Result := dsList.IsDataAvailable;
 else
  Result := True;
 end;
//#UC END# *55127A5401DE_497DDB2B001B_impl*
//#UC START# *55127A5401DE_497DDB2B001B_var*
//#UC END# *55127A5401DE_497DDB2B001B_var*
//#UC START# *5527D24201E7_497DDB2B001B_impl*
 if Assigned(dsList) then
 begin
  f_AllowCallCurrentChangedOnTest := False;
  dsList.CurrentChanged(tvList.GetCurrentNode, False);
 end;
//#UC END# *5527D24201E7_497DDB2B001B_impl*
//#UC START# *5527D24201E7_497DDB2B001B_var*
//#UC END# *5527D24201E7_497DDB2B001B_var*
//#UC START# *561641EE03D8_497DDB2B001B_impl*
 Result := False;
//#UC END# *561641EE03D8_497DDB2B001B_impl*
//#UC START# *561641EE03D8_497DDB2B001B_var*
//#UC END# *561641EE03D8_497DDB2B001B_var*
//#UC START# *561CB1350027_497DDB2B001B_impl*
 Result := False;
//#UC END# *561CB1350027_497DDB2B001B_impl*
//#UC START# *561CB1350027_497DDB2B001B_var*
//#UC END# *561CB1350027_497DDB2B001B_var*
//#UC START# *5677BA0B01C2_5677B9280204get_impl*
 Result := f_InnerState;
//#UC END# *5677BA0B01C2_5677B9280204get_impl*
//#UC START# *5677BA0B01C2_5677B9280204get_var*
//#UC END# *5677BA0B01C2_5677B9280204get_var*
//#UC START# *5677BA5B0133_5677B9280204get_impl*
 Result := f_ContextFilterState;
//#UC END# *5677BA5B0133_5677B9280204get_impl*
//#UC START# *5677BA5B0133_5677B9280204get_var*
//#UC END# *5677BA5B0133_5677B9280204get_var*
//#UC START# *5677BAD7012E_5677B9280204_impl*
 inherited Create;
 f_InnerState := aInnerState;
 f_ContextFilterState := aContextFilterState;
 f_TreeStructState := aTreeStructState;
 f_TopItemIndex := aTopItemIndex;
 f_CurrentIndex := aCurrentIndex;
 f_Options := aOptions;
 f_WasFiltered := aWasFiltered;
//#UC END# *5677BAD7012E_5677B9280204_impl*
//#UC START# *5677BAD7012E_5677B9280204_var*
//#UC END# *5677BAD7012E_5677B9280204_var*
//#UC START# *56A8ADEE0129_5677B9280204get_impl*
 Result := f_TreeStructState; 
//#UC END# *56A8ADEE0129_5677B9280204get_impl*
//#UC START# *56A8ADEE0129_5677B9280204get_var*
//#UC END# *56A8ADEE0129_5677B9280204get_var*
//#UC START# *56A9C9980259_5677B9280204get_impl*
 Result := f_TopItemIndex;
//#UC END# *56A9C9980259_5677B9280204get_impl*
//#UC START# *56A9C9980259_5677B9280204get_var*
//#UC END# *56A9C9980259_5677B9280204get_var*
//#UC START# *56A9DE4C03A0_5677B9280204get_impl*
 Result := f_Options;
//#UC END# *56A9DE4C03A0_5677B9280204get_impl*
//#UC START# *56A9DE4C03A0_5677B9280204get_var*
//#UC END# *56A9DE4C03A0_5677B9280204get_var*
//#UC START# *56E152870083_5677B9280204get_impl*
 Result := f_CurrentIndex;
//#UC END# *56E152870083_5677B9280204get_impl*
//#UC START# *56E152870083_5677B9280204get_var*
//#UC END# *56E152870083_5677B9280204get_var*
//#UC START# *56F3F0580255_497DDB2B001B_impl*
 Assert(Assigned(f_SearchContext));
 defDataAdapter.NativeAdapter.MakeDecisionsArchiveSupport.GetSearchServerUrl(nsIStr(f_SearchContext), l_Url);

 // Открываем по стандартному алгоритму; только во внешнем браузере
 // http://mdp.garant.ru/pages/viewpage.action?pageId=620851813
 nsDoShellExecute(nsCStr(l_Url), True, nil);
//#UC END# *56F3F0580255_497DDB2B001B_impl*
//#UC START# *56F3F0580255_497DDB2B001B_var*
var
 l_Url: IString;
//#UC END# *56F3F0580255_497DDB2B001B_var*
//#UC START# *56F412F403C7_497DDB2B001B_impl*
 l_BS := TnsBaseSearchService.Instance.GetBaseSearcher(As_IvcmEntityForm);

 if Assigned(dsList) and dsList.IsFiltered then
  f_WasFiltered := True;
 ExSearchPanel.Visible := not f_WasFiltered
                      and Assigned(l_BS)
                      and Assigned(l_BS.SearchWindow)
                      and l_BS.SearchWindow.Visible
                      and Assigned(dsDocumentList)
                      and (dsDocumentList.OpenFrom = lofBaseSearch)
                      and not dsDocumentList.IsChanged
                      and defDataAdapter.NativeAdapter.MakeDecisionsArchiveSupport.SearchServerAvailable;
//#UC END# *56F412F403C7_497DDB2B001B_impl*
//#UC START# *56F412F403C7_497DDB2B001B_var*
var
 l_BS: InsBaseSearcher;
//#UC END# *56F412F403C7_497DDB2B001B_var*
//#UC START# *5750305000AF_5677B9280204get_impl*
 Result := f_WasFiltered;
//#UC END# *5750305000AF_5677B9280204get_impl*
//#UC START# *5750305000AF_5677B9280204get_var*
//#UC END# *5750305000AF_5677B9280204get_var*
//#UC START# *5B815CDD8F87_497DDB2B001B_impl*
 LftRespondentQueryClose(aSender);
//#UC END# *5B815CDD8F87_497DDB2B001B_impl*
//#UC START# *5B815CDD8F87_497DDB2B001B_var*
//#UC END# *5B815CDD8F87_497DDB2B001B_var*
//#UC START# *5E40E10FD4BD_497DDB2B001B_impl*
 LftRespondentQueryOpen(aSender);
//#UC END# *5E40E10FD4BD_497DDB2B001B_impl*
//#UC START# *5E40E10FD4BD_497DDB2B001B_var*
//#UC END# *5E40E10FD4BD_497DDB2B001B_var*
//#UC START# *631A220E9075_497DDB2B001B_impl*
 QueryMaximized;
//#UC END# *631A220E9075_497DDB2B001B_impl*
//#UC START# *631A220E9075_497DDB2B001B_var*
//#UC END# *631A220E9075_497DDB2B001B_var*
//#UC START# *63544B6D4A1B_497DDB2B001B_impl*
 LftRespondentQueryOpen(aSender);
//#UC END# *63544B6D4A1B_497DDB2B001B_impl*
//#UC START# *63544B6D4A1B_497DDB2B001B_var*
//#UC END# *63544B6D4A1B_497DDB2B001B_var*
//#UC START# *66C365C924D6_497DDB2B001B_impl*
 LftRespondentQueryMaximized(aSender);
//#UC END# *66C365C924D6_497DDB2B001B_impl*
//#UC START# *66C365C924D6_497DDB2B001B_var*
//#UC END# *66C365C924D6_497DDB2B001B_var*
//#UC START# *6784C69651CE_497DDB2B001B_impl*
 if UserType in [lftUserCR1,
                 lftUserCR2,
                 lftSimilarDocuments,
                 lftProducedDrugs,
                 lftDrugInternationalNameSynonyms] then
  op_Switcher_SetFirstPageActive.Call(Container)
 else
  SafeClose;
//#UC END# *6784C69651CE_497DDB2B001B_impl*
//#UC START# *6784C69651CE_497DDB2B001B_var*
//#UC END# *6784C69651CE_497DDB2B001B_var*
//#UC START# *68123CAC609E_497DDB2B001B_impl*
 LftRespondentQueryMaximized(aSender);
//#UC END# *68123CAC609E_497DDB2B001B_impl*
//#UC START# *68123CAC609E_497DDB2B001B_var*
//#UC END# *68123CAC609E_497DDB2B001B_var*
//#UC START# *7662726E4743_497DDB2B001B_impl*
 LftRespondentQueryMaximized(aSender);
//#UC END# *7662726E4743_497DDB2B001B_impl*
//#UC START# *7662726E4743_497DDB2B001B_var*
//#UC END# *7662726E4743_497DDB2B001B_var*
//#UC START# *7984D701603A_497DDB2B001B_impl*
 LftRespondentQueryOpen(aSender);
//#UC END# *7984D701603A_497DDB2B001B_impl*
//#UC START# *7984D701603A_497DDB2B001B_var*
//#UC END# *7984D701603A_497DDB2B001B_var*
//#UC START# *79CA491C075A_497DDB2B001B_impl*
 LftRespondentQueryMaximized(aSender);
//#UC END# *79CA491C075A_497DDB2B001B_impl*
//#UC START# *79CA491C075A_497DDB2B001B_var*
//#UC END# *79CA491C075A_497DDB2B001B_var*
//#UC START# *79E93ABBEBFC_497DDB2B001B_impl*
 LftRespondentQueryMaximized(aSender);
//#UC END# *79E93ABBEBFC_497DDB2B001B_impl*
//#UC START# *79E93ABBEBFC_497DDB2B001B_var*
//#UC END# *79E93ABBEBFC_497DDB2B001B_var*
//#UC START# *7C26AE9268E7_497DDB2B001B_impl*
 LftRespondentQueryClose(aSender);
//#UC END# *7C26AE9268E7_497DDB2B001B_impl*
//#UC START# *7C26AE9268E7_497DDB2B001B_var*
//#UC END# *7C26AE9268E7_497DDB2B001B_var*
//#UC START# *7CA1B2391F94_497DDB2B001B_impl*
 LftRespondentQueryClose(aSender);
//#UC END# *7CA1B2391F94_497DDB2B001B_impl*
//#UC START# *7CA1B2391F94_497DDB2B001B_var*
//#UC END# *7CA1B2391F94_497DDB2B001B_var*
//#UC START# *7D78C9A85314_497DDB2B001B_impl*
 LftRespondentQueryOpen(aSender);
//#UC END# *7D78C9A85314_497DDB2B001B_impl*
//#UC START# *7D78C9A85314_497DDB2B001B_var*
//#UC END# *7D78C9A85314_497DDB2B001B_var*
//#UC START# *8829BBB9E33F_497DDB2B001B_impl*
 LftRespondentQueryOpen(aSender);
//#UC END# *8829BBB9E33F_497DDB2B001B_impl*
//#UC START# *8829BBB9E33F_497DDB2B001B_var*
//#UC END# *8829BBB9E33F_497DDB2B001B_var*
//#UC START# *89247CD8E38D_497DDB2B001B_impl*
 op_Switcher_SetFirstPageActive.Call(Container);
//#UC END# *89247CD8E38D_497DDB2B001B_impl*
//#UC START# *89247CD8E38D_497DDB2B001B_var*
//#UC END# *89247CD8E38D_497DDB2B001B_var*
//#UC START# *910DF1C1598C_497DDB2B001B_impl*
 LftRespondentQueryMaximized(aSender);
//#UC END# *910DF1C1598C_497DDB2B001B_impl*
//#UC START# *910DF1C1598C_497DDB2B001B_var*
//#UC END# *910DF1C1598C_497DDB2B001B_var*
//#UC START# *9144562E25FB_497DDB2B001B_impl*
 LftRespondentQueryClose(aSender);
//#UC END# *9144562E25FB_497DDB2B001B_impl*
//#UC START# *9144562E25FB_497DDB2B001B_var*
//#UC END# *9144562E25FB_497DDB2B001B_var*
//#UC START# *9CAFD9A7C3BD_497DDB2B001B_impl*
 LftRespondentQueryMaximized(aSender);
//#UC END# *9CAFD9A7C3BD_497DDB2B001B_impl*
//#UC START# *9CAFD9A7C3BD_497DDB2B001B_var*
//#UC END# *9CAFD9A7C3BD_497DDB2B001B_var*
//#UC START# *9FBF6C4D3127_497DDB2B001B_impl*
 QueryOpen;
//#UC END# *9FBF6C4D3127_497DDB2B001B_impl*
//#UC START# *9FBF6C4D3127_497DDB2B001B_var*
//#UC END# *9FBF6C4D3127_497DDB2B001B_var*
//#UC START# *AC1A36740EA8_497DDB2B001B_impl*
 LftRespondentQueryMaximized(aSender);
//#UC END# *AC1A36740EA8_497DDB2B001B_impl*
//#UC START# *AC1A36740EA8_497DDB2B001B_var*
//#UC END# *AC1A36740EA8_497DDB2B001B_var*
//#UC START# *B3625EBE1EED_497DDB2B001B_impl*
 LftRespondentQueryOpen(aSender);
//#UC END# *B3625EBE1EED_497DDB2B001B_impl*
//#UC START# *B3625EBE1EED_497DDB2B001B_var*
//#UC END# *B3625EBE1EED_497DDB2B001B_var*
//#UC START# *B74FCF7BEB24_497DDB2B001B_impl*
 LftRespondentQueryOpen(aSender);
//#UC END# *B74FCF7BEB24_497DDB2B001B_impl*
//#UC START# *B74FCF7BEB24_497DDB2B001B_var*
//#UC END# *B74FCF7BEB24_497DDB2B001B_var*
//#UC START# *B8F5E8ADF26A_497DDB2B001B_impl*
 LftRespondentQueryMaximized(aSender);
//#UC END# *B8F5E8ADF26A_497DDB2B001B_impl*
//#UC START# *B8F5E8ADF26A_497DDB2B001B_var*
//#UC END# *B8F5E8ADF26A_497DDB2B001B_var*
//#UC START# *BAF9A43F64B1_497DDB2B001B_impl*
 LftRespondentQueryClose(aSender);
//#UC END# *BAF9A43F64B1_497DDB2B001B_impl*
//#UC START# *BAF9A43F64B1_497DDB2B001B_var*
//#UC END# *BAF9A43F64B1_497DDB2B001B_var*
//#UC START# *BC1EF73BE90E_497DDB2B001B_impl*
 LftRespondentQueryMaximized(aSender);
//#UC END# *BC1EF73BE90E_497DDB2B001B_impl*
//#UC START# *BC1EF73BE90E_497DDB2B001B_var*
//#UC END# *BC1EF73BE90E_497DDB2B001B_var*
//#UC START# *C576738B9A98_497DDB2B001B_impl*
 LftRespondentQueryOpen(aSender);
//#UC END# *C576738B9A98_497DDB2B001B_impl*
//#UC START# *C576738B9A98_497DDB2B001B_var*
//#UC END# *C576738B9A98_497DDB2B001B_var*
//#UC START# *D22B2108D1D7_497DDB2B001B_impl*
 LftRespondentQueryMaximized(aSender);
//#UC END# *D22B2108D1D7_497DDB2B001B_impl*
//#UC START# *D22B2108D1D7_497DDB2B001B_var*
//#UC END# *D22B2108D1D7_497DDB2B001B_var*
//#UC START# *D51A85B5EA94_497DDB2B001B_impl*
 LftRespondentQueryOpen(aSender);
//#UC END# *D51A85B5EA94_497DDB2B001B_impl*
//#UC START# *D51A85B5EA94_497DDB2B001B_var*
//#UC END# *D51A85B5EA94_497DDB2B001B_var*
//#UC START# *D7AA4578D2D1_497DDB2B001B_impl*
 LftRespondentQueryOpen(aSender);
//#UC END# *D7AA4578D2D1_497DDB2B001B_impl*
//#UC START# *D7AA4578D2D1_497DDB2B001B_var*
//#UC END# *D7AA4578D2D1_497DDB2B001B_var*
//#UC START# *DD3CF6B9A1FE_497DDB2B001B_impl*
 LftRespondentQueryOpen(aSender);
//#UC END# *DD3CF6B9A1FE_497DDB2B001B_impl*
//#UC START# *DD3CF6B9A1FE_497DDB2B001B_var*
//#UC END# *DD3CF6B9A1FE_497DDB2B001B_var*
//#UC START# *DF8DF3016AAE_497DDB2B001B_impl*
 LftRespondentQueryMaximized(aSender);
//#UC END# *DF8DF3016AAE_497DDB2B001B_impl*
//#UC START# *DF8DF3016AAE_497DDB2B001B_var*
//#UC END# *DF8DF3016AAE_497DDB2B001B_var*
//#UC START# *E15AA3CCAAFD_497DDB2B001B_impl*
 LftRespondentQueryClose(aSender);
//#UC END# *E15AA3CCAAFD_497DDB2B001B_impl*
//#UC START# *E15AA3CCAAFD_497DDB2B001B_var*
//#UC END# *E15AA3CCAAFD_497DDB2B001B_var*
//#UC START# *E163385C2B4E_497DDB2B001B_impl*
 LftRespondentQueryOpen(aSender);
//#UC END# *E163385C2B4E_497DDB2B001B_impl*
//#UC START# *E163385C2B4E_497DDB2B001B_var*
//#UC END# *E163385C2B4E_497DDB2B001B_var*
//#UC START# *F57A05E9D1E3_497DDB2B001B_impl*
 LftRespondentQueryMaximized(aSender);
//#UC END# *F57A05E9D1E3_497DDB2B001B_impl*
//#UC START# *F57A05E9D1E3_497DDB2B001B_var*
//#UC END# *F57A05E9D1E3_497DDB2B001B_var*
//#UC START# *F8F8E6852550_497DDB2B001B_impl*
 LftRespondentQueryMaximized(aSender);
//#UC END# *F8F8E6852550_497DDB2B001B_impl*
//#UC START# *F8F8E6852550_497DDB2B001B_var*
//#UC END# *F8F8E6852550_497DDB2B001B_var*
//#UC START# *FA04A3642350_497DDB2B001B_impl*
 LftRespondentQueryMaximized(aSender);
//#UC END# *FA04A3642350_497DDB2B001B_impl*
//#UC START# *FA04A3642350_497DDB2B001B_var*
//#UC END# *FA04A3642350_497DDB2B001B_var*
//#UC START# *FEE09FA84BC5_497DDB2B001B_impl*
 LftCorrespondentQueryOpen(aSender);
//#UC END# *FEE09FA84BC5_497DDB2B001B_impl*
//#UC START# *FEE09FA84BC5_497DDB2B001B_var*
//#UC END# *FEE09FA84BC5_497DDB2B001B_var*
