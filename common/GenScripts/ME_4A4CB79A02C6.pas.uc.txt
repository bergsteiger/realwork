//#UC START# *4728A3180093_56AB66AA01C0_impl*
 Result := f_TabOffset;
//#UC END# *4728A3180093_56AB66AA01C0_impl*
//#UC START# *4728A3180093_56AB66AA01C0_var*
//#UC END# *4728A3180093_56AB66AA01C0_var*
//#UC START# *4728A4830294_56AB66AA01C0_impl*
 Result := f_TabStops;
//#UC END# *4728A4830294_56AB66AA01C0_impl*
//#UC START# *4728A4830294_56AB66AA01C0_var*
//#UC END# *4728A4830294_56AB66AA01C0_var*
//#UC START# *4728BE6A0392_4A4CB79A02C6get_impl*
 if Printing then
  Result := f_PageNumber
 else
  Result := -1;
//#UC END# *4728BE6A0392_4A4CB79A02C6get_impl*
//#UC START# *4728BE6A0392_4A4CB79A02C6get_var*
//#UC END# *4728BE6A0392_4A4CB79A02C6get_var*
//#UC START# *4728BE830080_4A4CB79A02C6get_impl*
 if Printing then
  Result := f_PageWidthNumber
 else
  Result := 0;
//#UC END# *4728BE830080_4A4CB79A02C6get_impl*
//#UC START# *4728BE830080_4A4CB79A02C6get_var*
//#UC END# *4728BE830080_4A4CB79A02C6get_var*
//#UC START# *479731C50290_4A4CB79A02C6_impl*
 f_Printer := nil;
 FreeAndNil(f_ClipRects);
 FreeAndNil(f_LineSpacingStack);
 inherited;
//#UC END# *479731C50290_4A4CB79A02C6_impl*
//#UC START# *479731C50290_4A4CB79A02C6_var*
//#UC END# *479731C50290_4A4CB79A02C6_var*
//#UC START# *479731C50290_56AB66AA01C0_impl*
 f_TabStops := nil;
 inherited;
//#UC END# *479731C50290_56AB66AA01C0_impl*
//#UC START# *479731C50290_56AB66AA01C0_var*
//#UC END# *479731C50290_56AB66AA01C0_var*
//#UC START# *47A042E100E2_4A4CB79A02C6_impl*
 inherited;
 f_Margins := l3Rect(0, 0, 0, def_inchPaperBottom);
 f_DeviceCaps.rIsAssigned := false;
 f_LineSpacing := def_LineSpacing;
//#UC END# *47A042E100E2_4A4CB79A02C6_impl*
//#UC START# *47A042E100E2_4A4CB79A02C6_var*
//#UC END# *47A042E100E2_4A4CB79A02C6_var*
//#UC START# *47DFCAAF0249_4A4CB79A02C6_impl*
 Windows.ExtTextOut(DC, R.Left, R.Top, eto_Opaque, @R, nil, 0, nil);
//#UC END# *47DFCAAF0249_4A4CB79A02C6_impl*
//#UC START# *47DFCAAF0249_4A4CB79A02C6_var*
//#UC END# *47DFCAAF0249_4A4CB79A02C6_var*
//#UC START# *47DFCAEE0007_4A4CB79A02C6_impl*
 if Invert then
 begin
  Inc(f_Fore);
  try
   FillRect(R);
  finally
   Dec(f_Fore);
  end;//try..
 end//Invert
 else
  FillRect(R);
//#UC END# *47DFCAEE0007_4A4CB79A02C6_impl*
//#UC START# *47DFCAEE0007_4A4CB79A02C6_var*
//#UC END# *47DFCAEE0007_4A4CB79A02C6_var*
//#UC START# *487CFE91037C_4A4CB79A02C6_impl*
 Inc(f_CheckingColors);
 try
  if (f_CheckingColors = 1) then
  begin
   if Printing then
   begin
    l_BC := BackColor;
    if Invert then
    begin
     VCLFont.Color := TextColor;
     Brush.Color := l_BC;
    end//Invert
    else
    begin
     VCLFont.Color := clWhite;
     Brush.Color := clWhite;
    end;//Invert
   end//Printing
   else
   begin
    l_BC := BackColor;
    if Invert then
    begin
     if NotFocused then
     begin
      l_Fore := TextColor;
      l_Back := clBtnFace
     end//NotFocused
     else
     begin
      l_Fore := InvertColor(TextColor);
      l_Back := clHighlight;
     end;//NotFocused
     if (f_Fore > 0) then
      l_Back := InvertColor(l_BC)
     else
      if f_DarkFore > 0 then
       l_Back := clHighlightText;
     //{$IfDef Nemesis}
     CheckColorsYIQ(l_Fore, l_Back);
     //{$Else Nemesis}
     //evGraph.CheckColors(l_Fore, l_Back);
     //{$EndIf Nemesis}
    end//Invert
    else
    begin
     l_Fore := TextColor;
     l_Back := l_BC;
    end;//Invert
    VCLFont.Color := l_Fore;
    Brush.Color := l_Back;
   end;//Printing
  end;//f_CheckingColors = 1
 finally
  Dec(f_CheckingColors);
 end;//try..finally
//#UC END# *487CFE91037C_4A4CB79A02C6_impl*
//#UC START# *487CFE91037C_4A4CB79A02C6_var*
var
 l_Back: TColor;
 l_Fore: TColor;
 l_BC: TColor;
//#UC END# *487CFE91037C_4A4CB79A02C6_var*
//#UC START# *487D000802A4_4A4CB79A02C6get_impl*
 //Result := Self;
 Supports(Self, Il3Font, Result);
//#UC END# *487D000802A4_4A4CB79A02C6get_impl*
//#UC START# *487D000802A4_4A4CB79A02C6get_var*
//#UC END# *487D000802A4_4A4CB79A02C6get_var*
//#UC START# *487D0BDA03C6_4A4CB79A02C6get_impl*
 Result := VCLFont.Color;
//#UC END# *487D0BDA03C6_4A4CB79A02C6get_impl*
//#UC START# *487D0BDA03C6_4A4CB79A02C6get_var*
//#UC END# *487D0BDA03C6_4A4CB79A02C6get_var*
//#UC START# *4A4CBCD002EA_4A4CB79A02C6_impl*
 if Printing AND (f_Printer <> nil) AND not f_Printer.HasPrinter then
  Result := DP2LP(PointX(DeviceCaps(PHYSICALWIDTH))).X
 else
  Result := DP2LP(PointX(DeviceCaps(HORZRES))).X;
//#UC END# *4A4CBCD002EA_4A4CB79A02C6_impl*
//#UC START# *4A4CBCD002EA_4A4CB79A02C6_var*
//#UC END# *4A4CBCD002EA_4A4CB79A02C6_var*
//#UC START# *4A4CBCDD0244_4A4CB79A02C6_impl*
 if Printing AND (f_Printer <> nil) AND not f_Printer.HasPrinter then
  Result := DP2LP(PointY(DeviceCaps(PHYSICALHEIGHT))).Y
 else
  Result := DP2LP(PointY(DeviceCaps(VERTRES))).Y;
//#UC END# *4A4CBCDD0244_4A4CB79A02C6_impl*
//#UC START# *4A4CBCDD0244_4A4CB79A02C6_var*
//#UC END# *4A4CBCDD0244_4A4CB79A02C6_var*
//#UC START# *4A4CBD130121_4A4CB79A02C6_impl*
 if Printing then
 begin
  l_Ofs := DP2LP(l3SPoint(DeviceCaps(PHYSICALOFFSETX),
                          DeviceCaps(PHYSICALOFFSETY)));
  l_Ofs.X := Max(l_Ofs.X, f_Margins.Left);
  l_Ofs.Y := Max(l_Ofs.Y, f_Margins.Top);
  l_OfsB := DP2LP(l3SPoint(DeviceCaps(PHYSICALWIDTH) - DeviceCaps(HORZRES),
                                  DeviceCaps(PHYSICALHEIGHT) - DeviceCaps(VERTRES))).Sub(l_Ofs);
  l_OfsB.X := Max(l_OfsB.X, f_Margins.Right);
  Result := l3Rect(l_Ofs, l_OfsB);
 end//Printing
 else
  Result := l3Rect(0, 0, 0, 0);
//#UC END# *4A4CBD130121_4A4CB79A02C6_impl*
//#UC START# *4A4CBD130121_4A4CB79A02C6_var*
var
 l_Ofs  : Tl3Point;
 l_OfsB : Tl3Point;
//#UC END# *4A4CBD130121_4A4CB79A02C6_var*
//#UC START# *4A4CBF0003DF_4A4CB79A02C6get_impl*
 Result := GetPrinting;
//#UC END# *4A4CBF0003DF_4A4CB79A02C6get_impl*
//#UC START# *4A4CBF0003DF_4A4CB79A02C6get_var*
//#UC END# *4A4CBF0003DF_4A4CB79A02C6get_var*
//#UC START# *4A4CBF0003DF_4A4CB79A02C6set_impl*
 if aValue then
 begin
  Include(f_Flags, ev_dfPrinting);
  Exclude(f_Flags, ev_dfDrawSpecial);
  OnDrawSub := nil;
 end//aValue 
 else
  Exclude(f_Flags, ev_dfPrinting);
//#UC END# *4A4CBF0003DF_4A4CB79A02C6set_impl*
//#UC START# *4A4CBF0003DF_4A4CB79A02C6set_var*
//#UC END# *4A4CBF0003DF_4A4CB79A02C6set_var*
//#UC START# *4A4CC10D01A1_4A4CB79A02C6get_impl*
 Result := DoGetDrawEnabled AND Assigned(f_OnDrawSub);
//#UC END# *4A4CC10D01A1_4A4CB79A02C6get_impl*
//#UC START# *4A4CC10D01A1_4A4CB79A02C6get_var*
//#UC END# *4A4CC10D01A1_4A4CB79A02C6get_var*
//#UC START# *4A4CC1410062_4A4CB79A02C6_impl*
 if CanDrawSubs then
  f_OnDrawSub(aSubTarget, AsIl3Canvas, R, LayerHandle, aSub);
//#UC END# *4A4CC1410062_4A4CB79A02C6_impl*
//#UC START# *4A4CC1410062_4A4CB79A02C6_var*
//#UC END# *4A4CC1410062_4A4CB79A02C6_var*
//#UC START# *4A4CC195011E_4A4CB79A02C6_impl*
 Result := (ev_dfDrawRegion In f_Flags);
//#UC END# *4A4CC195011E_4A4CB79A02C6_impl*
//#UC START# *4A4CC195011E_4A4CB79A02C6_var*
//#UC END# *4A4CC195011E_4A4CB79A02C6_var*
//#UC START# *4A4CC95D0147_4A4CB79A02C6get_impl*
 Result := f_PixelsPerInchX;
 if (Result = 0) then 
 begin
  f_PixelsPerInchX := DeviceCaps(LOGPIXELSX);
  Result := f_PixelsPerInchX;
 end;
//#UC END# *4A4CC95D0147_4A4CB79A02C6get_impl*
//#UC START# *4A4CC95D0147_4A4CB79A02C6get_var*
//#UC END# *4A4CC95D0147_4A4CB79A02C6get_var*
//#UC START# *4A4CC9830334_4A4CB79A02C6get_impl*
 Result := f_PixelsPerInchY;
 if (Result = 0) then
 begin
  f_PixelsPerInchY := DeviceCaps(LOGPIXELSY);
  Result := f_PixelsPerInchY;
 end;//Result = 0
//#UC END# *4A4CC9830334_4A4CB79A02C6get_impl*
//#UC START# *4A4CC9830334_4A4CB79A02C6get_var*
//#UC END# *4A4CC9830334_4A4CB79A02C6get_var*
//#UC START# *4A4CCCE900E8_4A4CB79A02C6_impl*
 Result := (ev_dfPrinting in f_Flags);
//#UC END# *4A4CCCE900E8_4A4CB79A02C6_impl*
//#UC START# *4A4CCCE900E8_4A4CB79A02C6_var*
//#UC END# *4A4CCCE900E8_4A4CB79A02C6_var*
//#UC START# *4A4CCE400004_4A4CB79A02C6_impl*
 f_PixelsPerInchX := DeviceCaps(LOGPIXELSX);
 f_PixelsPerInchY := DeviceCaps(LOGPIXELSY);
 {-обновляем разрешение}
//#UC END# *4A4CCE400004_4A4CB79A02C6_impl*
//#UC START# *4A4CCE400004_4A4CB79A02C6_var*
//#UC END# *4A4CCE400004_4A4CB79A02C6_var*
//#UC START# *4A4CD82A0310_4A4CB79A02C6get_impl*
 Result := DoGetPageSetupWidth;
//#UC END# *4A4CD82A0310_4A4CB79A02C6get_impl*
//#UC START# *4A4CD82A0310_4A4CB79A02C6get_var*
//#UC END# *4A4CD82A0310_4A4CB79A02C6get_var*
//#UC START# *4A4CD82E025B_4A4CB79A02C6get_impl*
 Result := DoGetPageSetupHeight;
//#UC END# *4A4CD82E025B_4A4CB79A02C6get_impl*
//#UC START# *4A4CD82E025B_4A4CB79A02C6get_var*
//#UC END# *4A4CD82E025B_4A4CB79A02C6get_var*
//#UC START# *4A4CD8320146_4A4CB79A02C6get_impl*
 Result := DoGetPaperWidth;
//#UC END# *4A4CD8320146_4A4CB79A02C6get_impl*
//#UC START# *4A4CD8320146_4A4CB79A02C6get_var*
//#UC END# *4A4CD8320146_4A4CB79A02C6get_var*
//#UC START# *4A4CD8350157_4A4CB79A02C6get_impl*
 Result := DP2LP(PointY(DeviceCaps(PHYSICALHEIGHT))).Y;
//#UC END# *4A4CD8350157_4A4CB79A02C6get_impl*
//#UC START# *4A4CD8350157_4A4CB79A02C6get_var*
//#UC END# *4A4CD8350157_4A4CB79A02C6get_var*
//#UC START# *4A4CD83F0022_4A4CB79A02C6get_impl*
 l_Ofs := DP2LP(l3SPoint(DeviceCaps(PHYSICALOFFSETX),
                         DeviceCaps(PHYSICALOFFSETY)));
 Result := f_Margins;
 Result.Left := Max(l_Ofs.X, Result.Left);
 Result.Top := Max(l_Ofs.Y, Result.Top);
 l_Ofs := DP2LP(l3SPoint(DeviceCaps(PHYSICALWIDTH) - DeviceCaps(HORZRES),
                         DeviceCaps(PHYSICALHEIGHT) - DeviceCaps(VERTRES))).Sub(l_Ofs);
 Result.Right := Max(l_Ofs.X, Result.Right);
//#UC END# *4A4CD83F0022_4A4CB79A02C6get_impl*
//#UC START# *4A4CD83F0022_4A4CB79A02C6get_var*
var
 l_Ofs : Tl3Point;
//#UC END# *4A4CD83F0022_4A4CB79A02C6get_var*
//#UC START# *4A4CD83F0022_4A4CB79A02C6set_impl*
 f_Margins := aValue;
//#UC END# *4A4CD83F0022_4A4CB79A02C6set_impl*
//#UC START# *4A4CD83F0022_4A4CB79A02C6set_var*
//#UC END# *4A4CD83F0022_4A4CB79A02C6set_var*
//#UC START# *4A4CE0990013_4A4CB79A02C6_impl*
 if (aP.X = MaxInt) then
  Result.X := aP.X
 else
  Result.X := l3MulDiv(aP.X, l3Inch, PixelsPerInchX);
 if (aP.Y = MaxInt) then
  Result.Y := aP.Y
 else
  Result.Y := l3MulDiv(aP.Y, l3Inch, PixelsPerInchY);
//#UC END# *4A4CE0990013_4A4CB79A02C6_impl*
//#UC START# *4A4CE0990013_4A4CB79A02C6_var*
//#UC END# *4A4CE0990013_4A4CB79A02C6_var*
//#UC START# *4CB32CEA01FE_4A4CB79A02C6get_impl*
 Result := GetIsPagesCounter;
//#UC END# *4CB32CEA01FE_4A4CB79A02C6get_impl*
//#UC START# *4CB32CEA01FE_4A4CB79A02C6get_var*
//#UC END# *4CB32CEA01FE_4A4CB79A02C6get_var*
//#UC START# *4CB32D4C030E_4A4CB79A02C6_impl*
 Result := false;
//#UC END# *4CB32D4C030E_4A4CB79A02C6_impl*
//#UC START# *4CB32D4C030E_4A4CB79A02C6_var*
//#UC END# *4CB32D4C030E_4A4CB79A02C6_var*
//#UC START# *4CC68B5D00CA_4A4CB79A02C6get_impl*
 if Printing then
  Result := f_OverallPageNumber
 else
  Result := -1;
//#UC END# *4CC68B5D00CA_4A4CB79A02C6get_impl*
//#UC START# *4CC68B5D00CA_4A4CB79A02C6get_var*
//#UC END# *4CC68B5D00CA_4A4CB79A02C6get_var*
//#UC START# *4D1B61130223_4A4CB79A02C6_impl*
 Result := DP2LP(PointX(DeviceCaps(PHYSICALWIDTH))).X;
//#UC END# *4D1B61130223_4A4CB79A02C6_impl*
//#UC START# *4D1B61130223_4A4CB79A02C6_var*
//#UC END# *4D1B61130223_4A4CB79A02C6_var*
//#UC START# *4E007CC302AE_4A4CB79A02C6get_impl*
 Result := f_InitialDCOffset;
//#UC END# *4E007CC302AE_4A4CB79A02C6get_impl*
//#UC START# *4E007CC302AE_4A4CB79A02C6get_var*
//#UC END# *4E007CC302AE_4A4CB79A02C6get_var*
//#UC START# *4E26F481005B_4A4CB79A02C6_impl*
 if (f_ClipRects = nil) then
  f_ClipRects := Tl3RectList.Create;
 Result := GetGlobalClipRectWithZoom;
 f_ClipRects.Add(Result);
 Result := Result.AddPt(WindowOrg);
//#UC END# *4E26F481005B_4A4CB79A02C6_impl*
//#UC START# *4E26F481005B_4A4CB79A02C6_var*
//#UC END# *4E26F481005B_4A4CB79A02C6_var*
//#UC START# *4E26F4920228_4A4CB79A02C6_impl*
 ClipRect := f_ClipRects.Last.AddPt(WindowOrg);
 f_ClipRects.Delete(f_ClipRects.Hi);
//#UC END# *4E26F4920228_4A4CB79A02C6_impl*
//#UC START# *4E26F4920228_4A4CB79A02C6_var*
var
 l_ClipRect: Tl3Rect;
//#UC END# *4E26F4920228_4A4CB79A02C6_var*
//#UC START# *4E27061B0140_4A4CB79A02C6set_impl*
 l_R := aValue.Clone;
 l_R.Offset(SWindowOrg.Neg);
 SelectClipRgn(DC, l_R.Rgn);
 f_ClipRectInited := false;
//#UC END# *4E27061B0140_4A4CB79A02C6set_impl*
//#UC START# *4E27061B0140_4A4CB79A02C6set_var*
var
 l_R : Il3Region;
//#UC END# *4E27061B0140_4A4CB79A02C6set_var*
//#UC START# *4E2706890370_4A4CB79A02C6get_impl*
 CheckDrawing;
 Result := HDC(f_DC);
//#UC END# *4E2706890370_4A4CB79A02C6get_impl*
//#UC START# *4E2706890370_4A4CB79A02C6get_var*
//#UC END# *4E2706890370_4A4CB79A02C6get_var*
//#UC START# *4E57A9F10230_4A4CB79A02C6get_impl*
 Result := f_LineSpacing;
//#UC END# *4E57A9F10230_4A4CB79A02C6get_impl*
//#UC START# *4E57A9F10230_4A4CB79A02C6get_var*
//#UC END# *4E57A9F10230_4A4CB79A02C6get_var*
//#UC START# *4E57A9F10230_4A4CB79A02C6set_impl*
 if (aValue <= 0) OR (aValue >= Pred(High(Integer))) then
  Exit; 
 f_LineSpacing := aValue;
//#UC END# *4E57A9F10230_4A4CB79A02C6set_impl*
//#UC START# *4E57A9F10230_4A4CB79A02C6set_var*
//#UC END# *4E57A9F10230_4A4CB79A02C6set_var*
//#UC START# *4E6894860139_4A4CB79A02C6_impl*
 if (f_LineSpacingStack = nil) then
  f_LineSpacingStack := Tl3LongintList.Create;
 f_LineSpacingStack.Add(f_LineSpacing); 
//#UC END# *4E6894860139_4A4CB79A02C6_impl*
//#UC START# *4E6894860139_4A4CB79A02C6_var*
//#UC END# *4E6894860139_4A4CB79A02C6_var*
//#UC START# *4E68949A0121_4A4CB79A02C6_impl*
 Assert(f_LineSpacingStack <> nil);
 Set_LineSpacing(f_LineSpacingStack.Last);
 f_LineSpacingStack.Delete(f_LineSpacingStack.Hi);
//#UC END# *4E68949A0121_4A4CB79A02C6_impl*
//#UC START# *4E68949A0121_4A4CB79A02C6_var*
//#UC END# *4E68949A0121_4A4CB79A02C6_var*
//#UC START# *4E98521202B5_4A4CB79A02C6_impl*
 Result := GlobalClipRect;
//#UC END# *4E98521202B5_4A4CB79A02C6_impl*
//#UC START# *4E98521202B5_4A4CB79A02C6_var*
//#UC END# *4E98521202B5_4A4CB79A02C6_var*
//#UC START# *4F2AC2020377_4A4CB79A02C6get_impl*
 Result := f_InitialDCOffsetStored;
//#UC END# *4F2AC2020377_4A4CB79A02C6get_impl*
//#UC START# *4F2AC2020377_4A4CB79A02C6get_var*
//#UC END# *4F2AC2020377_4A4CB79A02C6get_var*
//#UC START# *4FAE533E035C_4A4CB79A02C6_impl*
 Result := 0;
//#UC END# *4FAE533E035C_4A4CB79A02C6_impl*
//#UC START# *4FAE533E035C_4A4CB79A02C6_var*
//#UC END# *4FAE533E035C_4A4CB79A02C6_var*
//#UC START# *56AB67BC0111_56AB66AA01C0_impl*
 inherited Create;
 f_TabOffset := aTabOffset;
 if (aTabStops = nil) then
  f_TabStops := nil
 else
  f_TabStops := aTabStops.Clone;
//#UC END# *56AB67BC0111_56AB66AA01C0_impl*
//#UC START# *56AB67BC0111_56AB66AA01C0_var*
//#UC END# *56AB67BC0111_56AB66AA01C0_var*
//#UC START# *56ACD2F50038_4A4CB79A02C6get_impl*
 Result := f_BackColor;
//#UC END# *56ACD2F50038_4A4CB79A02C6get_impl*
//#UC START# *56ACD2F50038_4A4CB79A02C6get_var*
//#UC END# *56ACD2F50038_4A4CB79A02C6get_var*
//#UC START# *56ACD2F50038_4A4CB79A02C6set_impl*
 if (f_BackColor <> aValue) and (aValue <> clDefault) then
 begin
  f_BackColor := aValue;
  if DrawEnabled and Drawing then
   CheckColors;
 end;//f_BackColor <> Value
//#UC END# *56ACD2F50038_4A4CB79A02C6set_impl*
//#UC START# *56ACD2F50038_4A4CB79A02C6set_var*
//#UC END# *56ACD2F50038_4A4CB79A02C6set_var*
//#UC START# *56ACD37202DE_4A4CB79A02C6get_impl*
 Result := DoGetDrawEnabled;
//#UC END# *56ACD37202DE_4A4CB79A02C6get_impl*
//#UC START# *56ACD37202DE_4A4CB79A02C6get_var*
//#UC END# *56ACD37202DE_4A4CB79A02C6get_var*
//#UC START# *56ACD37202DE_4A4CB79A02C6set_impl*
 if aValue then
  Flags := Flags + [ev_dfDrawRegion]
 else
  Flags := Flags - [ev_dfDrawRegion];
//#UC END# *56ACD37202DE_4A4CB79A02C6set_impl*
//#UC START# *56ACD37202DE_4A4CB79A02C6set_var*
//#UC END# *56ACD37202DE_4A4CB79A02C6set_var*
//#UC START# *56ACD3C302A5_4A4CB79A02C6get_impl*
 Result := (f_Drawing > 0);
//#UC END# *56ACD3C302A5_4A4CB79A02C6get_impl*
//#UC START# *56ACD3C302A5_4A4CB79A02C6get_var*
//#UC END# *56ACD3C302A5_4A4CB79A02C6get_var*
//#UC START# *56ACD3DD0360_4A4CB79A02C6_impl*
 Inc(f_Drawing);
 Result := f_Drawing;
//#UC END# *56ACD3DD0360_4A4CB79A02C6_impl*
//#UC START# *56ACD3DD0360_4A4CB79A02C6_var*
//#UC END# *56ACD3DD0360_4A4CB79A02C6_var*
//#UC START# *56ACD3F700FB_4A4CB79A02C6_impl*
 Dec(f_Drawing);
 Result := f_Drawing;
//#UC END# *56ACD3F700FB_4A4CB79A02C6_impl*
//#UC START# *56ACD3F700FB_4A4CB79A02C6_var*
//#UC END# *56ACD3F700FB_4A4CB79A02C6_var*
//#UC START# *56ACDB3A0069_4A4CB79A02C6get_impl*
 Result := (f_Invert > 0);
//#UC END# *56ACDB3A0069_4A4CB79A02C6get_impl*
//#UC START# *56ACDB3A0069_4A4CB79A02C6get_var*
//#UC END# *56ACDB3A0069_4A4CB79A02C6get_var*
//#UC START# *56ACDB8F020C_4A4CB79A02C6_impl*
 Inc(f_Invert);
 if DrawEnabled and Drawing then 
  CheckColors;
//#UC END# *56ACDB8F020C_4A4CB79A02C6_impl*
//#UC START# *56ACDB8F020C_4A4CB79A02C6_var*
//#UC END# *56ACDB8F020C_4A4CB79A02C6_var*
//#UC START# *56ACDB9903C9_4A4CB79A02C6_impl*
 Dec(f_Invert);
 if DrawEnabled and Drawing then 
  CheckColors;
//#UC END# *56ACDB9903C9_4A4CB79A02C6_impl*
//#UC START# *56ACDB9903C9_4A4CB79A02C6_var*
//#UC END# *56ACDB9903C9_4A4CB79A02C6_var*
//#UC START# *56AD08DA011D_4A4CB79A02C6get_impl*
 Result := Canvas.Font;
//#UC END# *56AD08DA011D_4A4CB79A02C6get_impl*
//#UC START# *56AD08DA011D_4A4CB79A02C6get_var*
//#UC END# *56AD08DA011D_4A4CB79A02C6get_var*
//#UC START# *56AD08DA011D_4A4CB79A02C6set_impl*
 Canvas.Font := aValue;
//#UC END# *56AD08DA011D_4A4CB79A02C6set_impl*
//#UC START# *56AD08DA011D_4A4CB79A02C6set_var*
//#UC END# *56AD08DA011D_4A4CB79A02C6set_var*
//#UC START# *56AD09460121_4A4CB79A02C6get_impl*
 Result := f_TextColor;
//#UC END# *56AD09460121_4A4CB79A02C6get_impl*
//#UC START# *56AD09460121_4A4CB79A02C6get_var*
//#UC END# *56AD09460121_4A4CB79A02C6get_var*
//#UC START# *56AD09460121_4A4CB79A02C6set_impl*
 if (f_TextColor = aValue) then
 begin
  if DrawEnabled and Drawing then
   CheckColors;
 end//f_TextColor = Value
 else
 if (aValue <> clDefault) then
 begin
  f_TextColor := aValue;
  if DrawEnabled and Drawing then
   CheckColors;
 end;//f_TextColor <> Value
//#UC END# *56AD09460121_4A4CB79A02C6set_impl*
//#UC START# *56AD09460121_4A4CB79A02C6set_var*
//#UC END# *56AD09460121_4A4CB79A02C6set_var*
//#UC START# *56AD0ACC0034_4A4CB79A02C6get_impl*
 Result := Canvas.Brush;
//#UC END# *56AD0ACC0034_4A4CB79A02C6get_impl*
//#UC START# *56AD0ACC0034_4A4CB79A02C6get_var*
//#UC END# *56AD0ACC0034_4A4CB79A02C6get_var*
//#UC START# *56AD0ACC0034_4A4CB79A02C6set_impl*
 Canvas.Brush := aValue;
//#UC END# *56AD0ACC0034_4A4CB79A02C6set_impl*
//#UC START# *56AD0ACC0034_4A4CB79A02C6set_var*
//#UC END# *56AD0ACC0034_4A4CB79A02C6set_var*
//#UC START# *56AF1B540191_4A4CB79A02C6_impl*
 Inc(f_DarkFore);
//#UC END# *56AF1B540191_4A4CB79A02C6_impl*
//#UC START# *56AF1B540191_4A4CB79A02C6_var*
//#UC END# *56AF1B540191_4A4CB79A02C6_var*
//#UC START# *56AF1B6900DF_4A4CB79A02C6_impl*
 Dec(f_DarkFore);
//#UC END# *56AF1B6900DF_4A4CB79A02C6_impl*
//#UC START# *56AF1B6900DF_4A4CB79A02C6_var*
//#UC END# *56AF1B6900DF_4A4CB79A02C6_var*
//#UC START# *56AF1E2902D2_4A4CB79A02C6_impl*
 Result := not IsVirtual and DrawEnabled and CheckDrawing;
//#UC END# *56AF1E2902D2_4A4CB79A02C6_impl*
//#UC START# *56AF1E2902D2_4A4CB79A02C6_var*
//#UC END# *56AF1E2902D2_4A4CB79A02C6_var*
//#UC START# *56AF1E650037_4A4CB79A02C6_impl*
 Result := False;
//#UC END# *56AF1E650037_4A4CB79A02C6_impl*
//#UC START# *56AF1E650037_4A4CB79A02C6_var*
//#UC END# *56AF1E650037_4A4CB79A02C6_var*
//#UC START# *56AF1E9702A0_4A4CB79A02C6_impl*
 Inc(f_CheckingDrawing);
 try
  l_OldDC := f_DC;
  Result := Drawing or (f_DCFlag in [ev_dcfLinked, ev_dcfCreated]) or Printing;
  if Result and (f_CheckingDrawing <= 1) then
  begin
   Lock;
   try
    l_Owner := Owner;
    CN := Canvas;
    case f_DCFlag of
     ev_dcfCanvas:
      if (CN Is TMetaFileCanvas) then
      begin
       f_DC := CN.Handle;
      end//CN Is TMetaFileCanvas
      else
      if (f_Printer <> nil) and not f_Printer.Printing then
      begin
       f_DC := f_Printer.DC;
       SelectObject(f_DC, VCLFont.Handle);
       {-обновляем шрифт принудительно}
      end//f_Printer <> nil..
      else
      if (l_Owner Is TMetaFile) and (f_DC = 0) then
      begin
       CN := TMetaFileCanvas.Create(TMetaFile(l_Owner), 0);
       SetCanvas(CN, False);
       f_DC := CN.Handle;
      end//l_Owner Is TMetaFile
      else
       f_DC := CN.Handle;
     ev_dcfGot:
     begin
      if (f_DC = 0) then
       f_DC := GetAlienDC;
      CN.Handle := f_DC;
      f_DC := CN.Handle;
      {-обновляем шрифт, перо, кисть etc}
     end;//ev_dcfGot
     ev_dcfCreated,
     ev_dcfLinked:
     begin
      if (CN <> nil) and (f_DC <> 0) then
       CN.Handle := f_DC;
      if (CN <> nil) then
       f_DC := CN.Handle;
      {-обновляем шрифт, перо, кисть etc}
     end;//ev_dcfCreated..}
    end;//case f_DCFlag
    if (l_OldDC <> f_DC) then
    begin
     UpdatePixelsPerInch;
     {-обновляем разрешение}
     VCLFont.PixelsPerInch := PixelsPerInchY; {-выставляем разрешение шрифту}
    end;//l_OldDC <> f_DC
    if (Zoom <> 100) then
    begin
     SetMapMode(f_DC, MM_ISOTROPIC);
     SetWindowExtEx(f_DC, 100, 100, nil);
     SetViewPortExtEx(f_DC, Abs(Zoom), Abs(Zoom), nil);
    end;//Zoom <> 100
   finally
    Unlock;
   end;//try..finally
  end;//Result
 finally
  Dec(f_CheckingDrawing);
 end;//try..finally
//#UC END# *56AF1E9702A0_4A4CB79A02C6_impl*
//#UC START# *56AF1E9702A0_4A4CB79A02C6_var*
var
 CN: TCanvas;
 l_OldDC: hDC;
 l_Owner: TObject;
//#UC END# *56AF1E9702A0_4A4CB79A02C6_var*
//#UC START# *56AF20160331_4A4CB79A02C6get_impl*
 Result := f_DCFlag;
//#UC END# *56AF20160331_4A4CB79A02C6get_impl*
//#UC START# *56AF20160331_4A4CB79A02C6get_var*
//#UC END# *56AF20160331_4A4CB79A02C6get_var*
//#UC START# *56AF20BB0209_4A4CB79A02C6get_impl*
 if (f_Canvas = nil) then
 begin
  if (f_Printer <> nil) and not IsPreview then
   Canvas := f_Printer.Canvas
  else
   SetCanvas(TCanvas.Create, False);
 end;//f_Canvas = nil
 Result := f_Canvas;
 if (f_Printer <> nil) and f_Printer.Printing and (Result <> f_Printer.Canvas) then
 begin
  if (Result <> nil) then
   try
    Result.Handle;
   except
    on EInvalidOperation do
     Result := f_Printer.Canvas;
     // так хитро, чтобы починить http://mdp.garant.ru/pages/viewpage.action?pageId=112722934, но не сломать http://mdp.garant.ru/pages/viewpage.action?pageId=109085576
     // видимо по уму надо использовать полиморфизм в TafwCanvasEx
   end;//try..except
 end;//f_Printer <> nil..
//#UC END# *56AF20BB0209_4A4CB79A02C6get_impl*
//#UC START# *56AF20BB0209_4A4CB79A02C6get_var*
//#UC END# *56AF20BB0209_4A4CB79A02C6get_var*
//#UC START# *56AF20BB0209_4A4CB79A02C6set_impl*
 SetCanvas(aValue, True);
//#UC END# *56AF20BB0209_4A4CB79A02C6set_impl*
//#UC START# *56AF20BB0209_4A4CB79A02C6set_var*
//#UC END# *56AF20BB0209_4A4CB79A02C6set_var*
//#UC START# *56AF2372026A_4A4CB79A02C6_impl*

//#UC END# *56AF2372026A_4A4CB79A02C6_impl*
//#UC START# *56AF2372026A_4A4CB79A02C6_var*
//#UC END# *56AF2372026A_4A4CB79A02C6_var*
//#UC START# *56AF237B031E_4A4CB79A02C6_impl*

//#UC END# *56AF237B031E_4A4CB79A02C6_impl*
//#UC START# *56AF237B031E_4A4CB79A02C6_var*
//#UC END# *56AF237B031E_4A4CB79A02C6_var*
//#UC START# *56AF3CC4020E_4A4CB79A02C6_impl*
 f_Owner := anOwner;
 if (anOwner is Graphics.TBitmap) then
  Canvas := Graphics.TBitmap(anOwner).Canvas;
 Create;
//#UC END# *56AF3CC4020E_4A4CB79A02C6_impl*
//#UC START# *56AF3CC4020E_4A4CB79A02C6_var*
//#UC END# *56AF3CC4020E_4A4CB79A02C6_var*
//#UC START# *56AF4E2C005D_4A4CB79A02C6get_impl*
 Result := f_Zoom;
//#UC END# *56AF4E2C005D_4A4CB79A02C6get_impl*
//#UC START# *56AF4E2C005D_4A4CB79A02C6get_var*
//#UC END# *56AF4E2C005D_4A4CB79A02C6get_var*
//#UC START# *56AF4E2C005D_4A4CB79A02C6set_impl*
 f_Zoom := aValue;
//#UC END# *56AF4E2C005D_4A4CB79A02C6set_impl*
//#UC START# *56AF4E2C005D_4A4CB79A02C6set_var*
//#UC END# *56AF4E2C005D_4A4CB79A02C6set_var*
//#UC START# *56B08EB80255_4A4CB79A02C6_impl*
 if (aPrinter <> nil) then
  f_Printer := aPrinter.Clone
 else
  f_Printer := nil;
 Printing := (f_Printer <> nil);
 Create;
//#UC END# *56B08EB80255_4A4CB79A02C6_impl*
//#UC START# *56B08EB80255_4A4CB79A02C6_var*
//#UC END# *56B08EB80255_4A4CB79A02C6_var*
//#UC START# *56B09CE001DA_4A4CB79A02C6get_impl*
 Result := Canvas.Pen;
//#UC END# *56B09CE001DA_4A4CB79A02C6get_impl*
//#UC START# *56B09CE001DA_4A4CB79A02C6get_var*
//#UC END# *56B09CE001DA_4A4CB79A02C6get_var*
//#UC START# *56B09CE001DA_4A4CB79A02C6set_impl*
 Canvas.Pen := aValue;
//#UC END# *56B09CE001DA_4A4CB79A02C6set_impl*
//#UC START# *56B09CE001DA_4A4CB79A02C6set_var*
//#UC END# *56B09CE001DA_4A4CB79A02C6set_var*
//#UC START# *56B09EF400CB_4A4CB79A02C6get_impl*
 Result := (ev_dfDrawCursor in Flags);
//#UC END# *56B09EF400CB_4A4CB79A02C6get_impl*
//#UC START# *56B09EF400CB_4A4CB79A02C6get_var*
//#UC END# *56B09EF400CB_4A4CB79A02C6get_var*
//#UC START# *56B09EF400CB_4A4CB79A02C6set_impl*
 if aValue then
  Flags := Flags + [ev_dfDrawCursor]
 else
  Flags := Flags - [ev_dfDrawCursor];
//#UC END# *56B09EF400CB_4A4CB79A02C6set_impl*
//#UC START# *56B09EF400CB_4A4CB79A02C6set_var*
//#UC END# *56B09EF400CB_4A4CB79A02C6set_var*
//#UC START# *56B09F1B0198_4A4CB79A02C6get_impl*
 Result := not Printing or (ev_dfPrinted in Flags);
//#UC END# *56B09F1B0198_4A4CB79A02C6get_impl*
//#UC START# *56B09F1B0198_4A4CB79A02C6get_var*
//#UC END# *56B09F1B0198_4A4CB79A02C6get_var*
//#UC START# *56B09F1B0198_4A4CB79A02C6set_impl*
 if aValue then
  Flags := Flags + [ev_dfPrinted]
 else
  Flags := Flags - [ev_dfPrinted];
//#UC END# *56B09F1B0198_4A4CB79A02C6set_impl*
//#UC START# *56B09F1B0198_4A4CB79A02C6set_var*
//#UC END# *56B09F1B0198_4A4CB79A02C6set_var*
//#UC START# *56B0ADCF0192_4A4CB79A02C6get_impl*
 Result := (ev_dfDrawSpecial in Flags);
 Assert(not Result or not Printing, 'http://mdp.garant.ru/pages/viewpage.action?pageId=174295160&focusedCommentId=266409368#comment-266409368');
//#UC END# *56B0ADCF0192_4A4CB79A02C6get_impl*
//#UC START# *56B0ADCF0192_4A4CB79A02C6get_var*
//#UC END# *56B0ADCF0192_4A4CB79A02C6get_var*
//#UC START# *56B0ADCF0192_4A4CB79A02C6set_impl*
 if (DrawSpecial <> aValue) then
 begin
  if aValue and not Printing then
   Flags := Flags + [ev_dfDrawSpecial]
  else
   Flags := Flags - [ev_dfDrawSpecial];
  if Assigned(f_OnDrawSpecialChange) then
   f_OnDrawSpecialChange(Self);
  if Supports(Owner, Il3CaretOwner, l_WindowFlags) then
  try
   l_WindowFlags.RedrawCaret;
  finally
   l_WindowFlags := nil;
  end;//try..finally
  Invalidate;
 end;//DrawSpecial <> Value
//#UC END# *56B0ADCF0192_4A4CB79A02C6set_impl*
//#UC START# *56B0ADCF0192_4A4CB79A02C6set_var*
var
 l_WindowFlags: Il3CaretOwner;
//#UC END# *56B0ADCF0192_4A4CB79A02C6set_var*
//#UC START# *56B0AE550267_4A4CB79A02C6_impl*
 if (f_Canvas <> aValue) then
 begin
  if (f_Canvas <> nil) and f_AlienCanvas then
  begin
   if (f_Canvas.Font <> nil) then
    f_Canvas.Font.OnChange := f_OldFontChange;
   if (f_Canvas.Brush <> nil) then
    f_Canvas.Brush.OnChange := f_OldBrushChange;
  end;//f_Canvas <> nil
  if anAlien then
   FreeDC
  else
  if (f_DCFlag = ev_dcfCanvas) then
  begin
   f_DC := 0;
   FireDCSetToNull;
  end;//f_DCFlag = ev_dcfCanvas
  if not f_AlienCanvas then
   FreeAndNil(f_Canvas);
  f_Canvas := aValue;
  f_AlienCanvas := anAlien;
  if (f_Canvas = nil) then
  begin
   f_OldBrushChange := nil;
   f_OldFontChange := nil;
  end//f_Canvas = nil
  else
  begin
   if Assigned(f_Canvas.Font.OnChange) then
   begin
    l_E := f_Canvas.Font.OnChange;
    Assert(l_M.Data <> Self);
   end;//Assigned(f_Canvas.Font.OnChange)
   f_OldBrushChange := f_Canvas.Brush.OnChange;
   f_OldFontChange := f_Canvas.Font.OnChange;
   f_Canvas.Brush.OnChange := BrushChanged;
   f_Canvas.Font.OnChange := FontChanged;
  end;//f_Canvas = nil
 end//f_Canvas <> Value
 else
 if (f_AlienCanvas <> anAlien) then
  f_AlienCanvas := anAlien;
//#UC END# *56B0AE550267_4A4CB79A02C6_impl*
//#UC START# *56B0AE550267_4A4CB79A02C6_var*
var
 l_E: TNotifyEvent;
 l_M: TMethod absolute l_E;
//#UC END# *56B0AE550267_4A4CB79A02C6_var*
//#UC START# *56B0AED5005B_4A4CB79A02C6_impl*
 if Assigned(f_OldBrushChange) then
  f_OldBrushChange(Sender);
 if (f_CheckingColors <= 0) then
  BackColor := Brush.Color;
//#UC END# *56B0AED5005B_4A4CB79A02C6_impl*
//#UC START# *56B0AED5005B_4A4CB79A02C6_var*
//#UC END# *56B0AED5005B_4A4CB79A02C6_var*
//#UC START# *56B0AEF1020C_4A4CB79A02C6_impl*
 if Assigned(f_OldFontChange) then
 begin
  l_E := f_OldFontChange;
  Assert(l_M.Data <> Self);
  l_E(Sender);
 end;//Assigned(f_OldFontChange) 
 f_TextMetricsValid := False;
 f_AverageCharHeight := 0;
 f_AverageCharWidth := 0;
 f_pxAverageCharWidth := 0;
 if (Win32Platform = VER_PLATFORM_WIN32_WINDOWS) then
  f_SuffixedFont := ANSIEndsText(fs_Cyr, VCLFont.Name)
 else
 if (Win32Platform = VER_PLATFORM_WIN32_NT) then
 begin
  if (Win32MajorVersion = 5) then
  begin
   if (Win32MinorVersion = 0) then
    f_SuffixedFont := False
   else
    f_SuffixedFont := True;
  end//Win32MajorVersion = 5
  else
  if (Win32MajorVersion > 5) then
   f_SuffixedFont := True
  else
   f_SuffixedFont := ANSIEndsText(fs_Cyr, VCLFont.Name);
 end//Win32Platform = VER_PLATFORM_WIN32_NT
 else
 begin
  Assert(False);
  f_SuffixedFont := ANSIEndsText(fs_Cyr, VCLFont.Name);
 end;//Win32Platform = VER_PLATFORM_WIN32_NT
 if (f_CheckingColors <= 0) then
 begin
  Inc(f_CheckingColors);
  try
   TextColor := VCLFont.Color;
  finally
   Dec(f_CheckingColors);
  end;//try..finally
 end;//
 CheckDrawing;
//#UC END# *56B0AEF1020C_4A4CB79A02C6_impl*
//#UC START# *56B0AEF1020C_4A4CB79A02C6_var*
var
 l_E: TNotifyEvent;
 l_M: TMethod absolute l_E;
//#UC END# *56B0AEF1020C_4A4CB79A02C6_var*
//#UC START# *56B0B2430282_4A4CB79A02C6_impl*
 if (f_DC <> 0) then
 begin
  case f_DCFlag of
   ev_dcfCanvas: 
    if (Owner is TMetaFile) then
     Canvas := nil;
   ev_dcfGot: 
   begin
    if (f_Canvas <> nil) then
     f_Canvas.Handle := 0;
    FreeAlienDC(f_DC); 
   end;//ev_dcfGot
   ev_dcfCreated:
   begin
    if (f_Canvas <> nil) then
     f_Canvas.Handle := 0;
    DeleteDC(f_DC);
    f_DCFlag := ev_dcfCanvas;
   end;//ev_dcfCreated
   else
    f_DCFlag := ev_dcfCanvas;
  end;//case f_DCFlag
  f_DC := 0;
 end;//f_DC <> 0
//#UC END# *56B0B2430282_4A4CB79A02C6_impl*
//#UC START# *56B0B2430282_4A4CB79A02C6_var*
//#UC END# *56B0B2430282_4A4CB79A02C6_var*
//#UC START# *56B0B2610026_4A4CB79A02C6_impl*
//#UC END# *56B0B2610026_4A4CB79A02C6_impl*
//#UC START# *56B0B2610026_4A4CB79A02C6_var*
//#UC END# *56B0B2610026_4A4CB79A02C6_var*
//#UC START# *56B0B54F03CC_4A4CB79A02C6_impl*
//#UC END# *56B0B54F03CC_4A4CB79A02C6_impl*
//#UC START# *56B0B54F03CC_4A4CB79A02C6_var*
//#UC END# *56B0B54F03CC_4A4CB79A02C6_var*
//#UC START# *56B0B9790320_4A4CB79A02C6_impl*
 Result := False;
//#UC END# *56B0B9790320_4A4CB79A02C6_impl*
//#UC START# *56B0B9790320_4A4CB79A02C6_var*
//#UC END# *56B0B9790320_4A4CB79A02C6_var*
//#UC START# *56B0BB0501B9_4A4CB79A02C6_impl*
 
//#UC END# *56B0BB0501B9_4A4CB79A02C6_impl*
//#UC START# *56B0BB0501B9_4A4CB79A02C6_var*
//#UC END# *56B0BB0501B9_4A4CB79A02C6_var*
