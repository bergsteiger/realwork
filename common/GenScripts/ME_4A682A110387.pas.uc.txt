//#UC START# *479731C50290_4A682A110387_impl*
 FreeAndNil(f_ChatList);
 FreeAndNil(f_Unreaded);
 FreeAndNil(f_HistoryList);
 FreeAndNil(f_ContactLists);
 inherited Cleanup;
//#UC END# *479731C50290_4A682A110387_impl*
//#UC START# *479731C50290_4A682A110387_var*
//#UC END# *479731C50290_4A682A110387_var*
//#UC START# *47A042E100E2_4A682A110387_impl*
 inherited InitFields;
 f_ChatList := TnsChatWindowList.MakeSorted;
 f_Unreaded := TnsUserIDList.MakeSorted;
 f_HistoryList := TnsChatHistoryList.MakeSorted;
 f_ContactLists := TnsContactListNotifiers.MakeSorted;
//#UC END# *47A042E100E2_4A682A110387_impl*
//#UC START# *47A042E100E2_4A682A110387_var*
//#UC END# *47A042E100E2_4A682A110387_var*
//#UC START# *4A66DF0603DC_4A682A110387get_impl*
 Result := defDataAdapter.ChatManager.IsEmbedChatEnabled;
//#UC END# *4A66DF0603DC_4A682A110387get_impl*
//#UC START# *4A66DF0603DC_4A682A110387get_var*
//#UC END# *4A66DF0603DC_4A682A110387get_var*
//#UC START# *4A66DF2101AE_4A682A110387_impl*
 if Get_ChatSupported then
  Result := TnsChatTreeStruct.Make(ForAdd)
 else
  Result := nil;
//#UC END# *4A66DF2101AE_4A682A110387_impl*
//#UC START# *4A66DF2101AE_4A682A110387_var*
//#UC END# *4A66DF2101AE_4A682A110387_var*
//#UC START# *4A66DF2D03BC_4A682A110387_impl*
 if Assigned(aNode) then
 begin
  l_UID := GetUserID(aNode);
  l_Window := f_ChatList.FindChatWindow(l_UID);
  if Assigned(l_Window) then
   l_Window.ActivateChatWindow
  else
   DoOpenChatWindow(l_UID);
 end;
//#UC END# *4A66DF2D03BC_4A682A110387_impl*
//#UC START# *4A66DF2D03BC_4A682A110387_var*
var
 l_Window: IbsChatWindow;
 l_UID: TbsUserID;
//#UC END# *4A66DF2D03BC_4A682A110387_var*
//#UC START# *4A66DF3E0086_4A682A110387_impl*
 if Supports(aNode, INodeBase, l_Node) then
 begin
  l_Type := l_Node.GetType;
  if (l_Type and PNT_LOGGED_FLAG) <> 0 then
   Result := ctActive
  else
   Result := ctInActive;
 end
 else
  Result := ctActive;
//#UC END# *4A66DF3E0086_4A682A110387_impl*
//#UC START# *4A66DF3E0086_4A682A110387_var*
var
 l_Node: INodeBase;
 l_Type: TNodeType;
//#UC END# *4A66DF3E0086_4A682A110387_var*
//#UC START# *4A66DF64023C_4A682A110387_impl*
 l_Memory := Tl3MemoryStream.Make;
 try
  OleCheck(aMessage.Seek(0, STREAM_SEEK_END, l_Fake));
  OleCheck(aMessage.Seek(0, STREAM_SEEK_CUR, l_Size));
  OleCheck(aMessage.Seek(0, STREAM_SEEK_SET, l_Fake));
  OleCheck(aMessage.CopyTo(l_Memory, l_Size, l_Fake, l_Fake2));
  OleCheck(aMessage.Seek(0, STREAM_SEEK_SET, l_Fake));
  Result := TnsChatMessage.Make(MakeTitle(defDataAdapter.CurrentUserID, Now), l_Memory);
 finally
  FreeAndNil(l_Memory);
 end;
 try
  defDataAdapter.MessagesManager.SendMessage(aMessage, Recip);
 except
  on EUnknownUser do
   raise EnsUnknownChatUser.Create('');
 end;
//#UC END# *4A66DF64023C_4A682A110387_impl*
//#UC START# *4A66DF64023C_4A682A110387_var*
var
 l_Memory: Tl3MemoryStream;
 l_Size: Int64;
 l_Fake: Int64;
 l_Fake2: Int64;
//#UC END# *4A66DF64023C_4A682A110387_var*
//#UC START# *4A66DF74032C_4A682A110387_impl*
 l_Inst := TnsChatMessages.Create;
 try
  try
   if MinCount = -1 then
    defDataAdapter.MessagesManager.GetUnreadedMessages(anUID, l_Messages)
   else
    defDataAdapter.MessagesManager.GetHistoryForUser(MinCount, True, anUID, l_Messages);
  except
   on EUnknownUser do
   begin
    Result := nil;
    Exit;
   end;
  end;
  if Assigned(l_Messages) then
   for l_IDX := 0 to l_Messages.Count - 1 do
   begin
    l_Messages.pm_GetItem(l_IDX, l_Message);
    with l_Message.rTime do
     l_Date := EncodeDate(rDate.rYear, rDate.rMonth, rDate.rDay) +
      EncodeTime(rTime.rHour, rTime.rMin, rTime.rSec, 0);
    if l_Message.rMy then
     l_UID := defDataAdapter.CurrentUserID
    else
     l_UID := anUID;
    l_Inst.Add(TnsChatMessage.Make(MakeTitle(l_UID, l_Date), l_Message.rText));
   end;
  Result := l_Inst;
 finally
  FreeAndNil(l_Inst);
 end;
//#UC END# *4A66DF74032C_4A682A110387_impl*
//#UC START# *4A66DF74032C_4A682A110387_var*
var
 l_Inst: TnsChatMessages;
 l_Messages: IMessages;
 l_Message: TMessage;
 l_IDX: Integer;
 l_UID: TbsUserID;
 l_Date: System.TDateTime;
//#UC END# *4A66DF74032C_4A682A110387_var*
//#UC START# *4A66DF820028_4A682A110387_impl*
 if Get_ChatSupported and not f_Processing then
 begin
  f_Processing := True;
  l_Notiffier := TnsChatNotifier.Create;
  try
   defDataAdapter.ChatManager.RegisterListenerForNotify(l_Notiffier);
  finally
   FreeAndNil(l_Notiffier); 
  end;
 end;
//#UC END# *4A66DF820028_4A682A110387_impl*
//#UC START# *4A66DF820028_4A682A110387_var*
var
 l_Notiffier: TnsChatNotifier;
//#UC END# *4A66DF820028_4A682A110387_var*
//#UC START# *4A66DF8F036E_4A682A110387_impl*
 l_Window := f_ChatList.FindChatWindow(anUID);
 if Assigned(l_Window) then
  l_Window.NewMessagesReceived
 else
 begin
  if afw.Settings.LoadBoolean(pi_NotifyNewChatMesages, dv_NotifyNewChatMesages) then
   f_Unreaded.Add(anUID)
  else
   DoOpenChatWindow(anUID);
 end;
//#UC END# *4A66DF8F036E_4A682A110387_impl*
//#UC START# *4A66DF8F036E_4A682A110387_var*
var
 l_Window: IbsChatWindow;
//#UC END# *4A66DF8F036E_4A682A110387_var*
//#UC START# *4A682A110387_ext:FileName
w:\garant6x\implementation\Garant\GbaNemesis\Chat\bsChatDispatcherPrim.pas
//#UC END# *4A682A110387_ext:FileName
//#UC START# *4A682A110387impl_uses*
//#UC END# *4A682A110387impl_uses*
//#UC START# *4A682A8303CA_4A682A110387_impl*
 try
  defDataAdapter.ChatManager.GetUserInfo(anUID, l_UserInfo);
  l_Name := vcmFmt(nsCStr('%s (%s)'), [nsCStr(l_UserInfo.rName), nsCStr(l_UserInfo.rLogin)]);
 except
  on EUnknownUser do
  begin
   l_Name := nil;
   // http://mdp.garant.ru/pages/viewpage.action?pageId=305957894
   ClearHistory(anUID); // пользователя нет, его история не нужна
  end;
 end;
 TChatService.Instance.OpenChatWindow(anUID, l_Name);
 f_Unreaded.Remove(anUID);
//#UC END# *4A682A8303CA_4A682A110387_impl*
//#UC START# *4A682A8303CA_4A682A110387_var*
var
 l_UserInfo: TUserInfo;
 l_Name: Il3CString;
//#UC END# *4A682A8303CA_4A682A110387_var*
//#UC START# *4A685BF20264_4A682A110387_impl*
 defDataAdapter.ChatManager.GetUserInfo(anUID, l_UserInfo);
 l_Name := vcmFmt(str_ChatTitle, [c_StyleMap[defDataAdapter.CurrentUserID = anUID], nsCStr(l_UserInfo.rName),
  nsCStr(l_UserInfo.rLogin), nsCStr(FormatDateTime('hh:nn, dd/mm/yyyy', aDate))]);
 Result := Tl3StringStream.Make(l3PCharLen(l_Name));
//#UC END# *4A685BF20264_4A682A110387_impl*
//#UC START# *4A685BF20264_4A682A110387_var*
var
 l_UserInfo: TUserInfo;
 l_Name: Il3CString;
const
 c_StyleMap: array [Boolean] of Integer = (ev_saChatHeaderRecipient, ev_saChatHeaderSender);
//#UC END# *4A685BF20264_4A682A110387_var*
//#UC START# *4A69981E0203_4A682A110387_impl*
 defDataAdapter.ChatManager.AddUser(GetUserID(aNode));
//#UC END# *4A69981E0203_4A682A110387_impl*
//#UC START# *4A69981E0203_4A682A110387_var*
//#UC END# *4A69981E0203_4A682A110387_var*
//#UC START# *4A6998430245_4A682A110387_impl*
 defDataAdapter.ChatManager.DeleteUser(GetUserID(aNode));
//#UC END# *4A6998430245_4A682A110387_impl*
//#UC START# *4A6998430245_4A682A110387_var*
//#UC END# *4A6998430245_4A682A110387_var*
//#UC START# *4A69985B00A8_4A682A110387_impl*
 TChatService.Instance.OpenAddUserDialog;
//#UC END# *4A69985B00A8_4A682A110387_impl*
//#UC START# *4A69985B00A8_4A682A110387_var*
//#UC END# *4A69985B00A8_4A682A110387_var*
//#UC START# *4A69A53F0275_4A682A110387_impl*
 if Supports(aNode, IProfileNode, l_Node) then
  Result := l_Node.GetUid
 else
  Result := cBadUID;
//#UC END# *4A69A53F0275_4A682A110387_impl*
//#UC START# *4A69A53F0275_4A682A110387_var*
var
 l_Node: IProfileNode;
//#UC END# *4A69A53F0275_4A682A110387_var*
//#UC START# *4A6D7187013A_4A682A110387_impl*
 f_ChatList.Add(aWindow);
 TnsChatWindowOpensCountEvent.Instance.Log;
//#UC END# *4A6D7187013A_4A682A110387_impl*
//#UC START# *4A6D7187013A_4A682A110387_var*
//#UC END# *4A6D7187013A_4A682A110387_var*
//#UC START# *4A6D71A600F9_4A682A110387_impl*
 f_ChatList.Remove(aWindow);
//#UC END# *4A6D71A600F9_4A682A110387_impl*
//#UC START# *4A6D71A600F9_4A682A110387_var*
//#UC END# *4A6D71A600F9_4A682A110387_var*
//#UC START# *4A6D94A501CE_4A682A110387get_impl*
 Result := f_Unreaded.Count > 0;
//#UC END# *4A6D94A501CE_4A682A110387get_impl*
//#UC START# *4A6D94A501CE_4A682A110387get_var*
//#UC END# *4A6D94A501CE_4A682A110387get_var*
//#UC START# *4A6D988D034B_4A682A110387_impl*
 for l_IDX := f_Unreaded.Count - 1 downto 0 do
  DoOpenChatWindow(f_Unreaded.Items[l_IDX]);
//#UC END# *4A6D988D034B_4A682A110387_impl*
//#UC START# *4A6D988D034B_4A682A110387_var*
var
 l_IDX: Integer;
//#UC END# *4A6D988D034B_4A682A110387_var*
//#UC START# *4A6EAC57017D_4A682A110387_impl*
 if Assigned(aNode) then
 begin
  l_UID := GetUserID(aNode);
  l_Window := f_HistoryList.FindChatWindow(l_UID);
  if Assigned(l_Window) then
   l_Window.ActivateChatWindow
  else
   OpenChatHistoryByID(l_UID);
 end;
//#UC END# *4A6EAC57017D_4A682A110387_impl*
//#UC START# *4A6EAC57017D_4A682A110387_var*
var
 l_Window: IbsChatHistoryWindow;
 l_UID: TbsUserID;
//#UC END# *4A6EAC57017D_4A682A110387_var*
//#UC START# *4A6EAC6C0043_4A682A110387_impl*
 f_HistoryList.Add(aWindow);
//#UC END# *4A6EAC6C0043_4A682A110387_impl*
//#UC START# *4A6EAC6C0043_4A682A110387_var*
//#UC END# *4A6EAC6C0043_4A682A110387_var*
//#UC START# *4A6EAC80032F_4A682A110387_impl*
 f_HistoryList.Remove(aWindow);
//#UC END# *4A6EAC80032F_4A682A110387_impl*
//#UC START# *4A6EAC80032F_4A682A110387_var*
//#UC END# *4A6EAC80032F_4A682A110387_var*
//#UC START# *4A6EBE8E030F_4A682A110387_impl*
 l_Window := f_HistoryList.FindChatWindow(anUID);
 if Assigned(l_Window) then
 begin
  l_Window.ActivateChatWindow;
  Exit;
 end;
 try
  defDataAdapter.ChatManager.GetUserInfo(anUID, l_UserInfo);
  l_Name := vcmFmt(nsCStr('%s (%s)'), [nsCStr(l_UserInfo.rName), nsCStr(l_UserInfo.rLogin)]);
 except
  on EUnknownUser do
   l_Name := nil;
 end;
 TChatService.Instance.OpenHistoryWindow(anUID, l_Name);
 f_Unreaded.Remove(anUID);
//#UC END# *4A6EBE8E030F_4A682A110387_impl*
//#UC START# *4A6EBE8E030F_4A682A110387_var*
var
 l_UserInfo: TUserInfo;
 l_Name: Il3CString;
 l_Window: IbsChatHistoryWindow;
//#UC END# *4A6EBE8E030F_4A682A110387_var*
//#UC START# *4A6FFBF30190_4A682A110387_impl*
 defDataAdapter.MessagesManager.CleanHistory(anUID);
 l_Window := f_ChatList.FindChatWindow(anUID);
 if Assigned(l_Window) then
  l_Window.HistoryCleaned;
//#UC END# *4A6FFBF30190_4A682A110387_impl*
//#UC START# *4A6FFBF30190_4A682A110387_var*
var
 l_Window: IbsChatWindow;
//#UC END# *4A6FFBF30190_4A682A110387_var*
//#UC START# *4A728A25029E_4A682A110387_impl*
 for l_IDX := 0 to f_ContactLists.Count - 1 do
  f_ContactLists.Items[l_IDX].NotifyContactListChanged;
//#UC END# *4A728A25029E_4A682A110387_impl*
//#UC START# *4A728A25029E_4A682A110387_var*
var
 l_IDX: Integer;
//#UC END# *4A728A25029E_4A682A110387_var*
//#UC START# *4A728A620307_4A682A110387_impl*
 f_ContactLists.Add(aList);
//#UC END# *4A728A620307_4A682A110387_impl*
//#UC START# *4A728A620307_4A682A110387_var*
//#UC END# *4A728A620307_4A682A110387_var*
//#UC START# *4A728A7D031A_4A682A110387_impl*
 f_ContactLists.Remove(aList);
//#UC END# *4A728A7D031A_4A682A110387_impl*
//#UC START# *4A728A7D031A_4A682A110387_var*
//#UC END# *4A728A7D031A_4A682A110387_var*
//#UC START# *4B13A26203DB_4B13BC920384_impl*
 Result := LE_CHAT_WINDOW_OPENS_COUNT;
//#UC END# *4B13A26203DB_4B13BC920384_impl*
//#UC START# *4B13A26203DB_4B13BC920384_var*
//#UC END# *4B13A26203DB_4B13BC920384_var*
