//#UC START# *4AA4D6C7036F_ext:FileName
w:\garant6x\implementation\Garant\GbaNemesis\View\List\NOT_FINISHED_fsList.pas
//#UC END# *4AA4D6C7036F_ext:FileName
//#UC START# *4AA4D6C7036Fimpl_uses*
//#UC END# *4AA4D6C7036Fimpl_uses*
//#UC START# *52973E60005E_4AA4D6C7036F_impl*
 Result := TfstList;
//#UC END# *52973E60005E_4AA4D6C7036F_impl*
//#UC START# *52973E60005E_4AA4D6C7036F_var*
//#UC END# *52973E60005E_4AA4D6C7036F_var*
//#UC START# *52EA619F02FA_4AA4D6C7036F_impl*
 inherited;
 // Для инициализации флажков на сборке нужен реальный SDS, его SetData и
 // сам FormSet, т.к. эта инициализация вызывается перед Refresh, при уже
 // существующей сборке. Получить SDS и его SetData нужно как-то цивилизованнее
 if Supports(aParams.DataSource, IsdsList, l_SDS) then
 try
  if Supports(aParams.DataSource.DataForSave, IdList, l_SetData) then
  try
   if Supports(aParams.FormSet, IfstList, l_FormSet) then
   try
     if not afw.Settings.LoadBoolean(pi_Document_Sheets_Translation,
      dv_Document_Sheets_Translation) then
     l_SetData.dsTranslationRef.Clear;
     // Первый пользовательский список КР:
     lp_InitUserCRList(ulFirst);
     // Второй список КР:
     lp_InitUserCRList(ulSecond);
     // Если в качестве пользовательского СР выбраны "Все документы", то открывается
     // обычный СКР, который можно типизировать:
     l_FormSet.RespondentsNeedMakeDS := lpCRNeedMake(l_SDS.DsRespondentsRef, crtRespondents,
      l_FormSet.RespondentsNeedMakeDS);
     l_FormSet.CorrespondentsNeedMakeDS := lpCRNeedMake(l_SDS.DsCorrespondentsRef, crtCorrespondents,
      l_FormSet.CorrespondentsNeedMakeDS);
     l_FormSet.FiltersNeedMakeDS := CheckNeedMakeFilters(l_FormSet.FiltersNeedMakeDS);

    l_FormSet.RelatedDocNeedMakeDS := lp_CheckRelatedDocNeedMakeDS;

    l_FormSet.AttributesNeedMakeDS := lp_CheckAttributesNeedMakeDS;

   finally
    l_FormSet := nil;
   end;
  finally
   l_SetData := nil;
  end;
 finally
  l_SDS := nil;
 end;
//#UC END# *52EA619F02FA_4AA4D6C7036F_impl*
//#UC START# *52EA619F02FA_4AA4D6C7036F_var*
var
 l_FormSet: IfstList;
 l_SetData: IdList;
 l_SDS: IsdsList;
 
 function lp_IsOrdinalCRSelected(aCRType: TlstCRType;
   out aId: TnsUserCRListId): Boolean;
 var
  I: TnsUserCRListId;
 begin
  for I := Low(TnsUserCRListId) to High(TnsUserCRListId) do
  begin
   with l_SetData.UserCRListInfo[I] do
    Result := (ListType = aCRType) and not bsIsCRNodeAreNotAllDocuments(Node);
   if Result then
   begin
    aId := I;
    Break;
   end;//if Result then
  end;//for I := Low(TnsUserCRListId) to
 end;//lp_IsOrdinalCRSelected

  function lpCRNeedMake(const aDSRef : IvcmFormDataSourceRef;
                        const aType  : TlstCRType;
                        const aNeedMake: TvcmNeedMakeDS): TvcmNeedMakeDS;
  var
   l_List             : TnsUserCRListId;
   l_IsFullCRSelected : Boolean;
  begin
   Result := aNeedMake;
   with aDSRef do
   begin
    l_IsFullCRSelected := lp_IsOrdinalCRSelected(aType, l_List);
    // Отметим, что вместо пользовательской вкладки показывается полный СКР:
    if l_IsFullCRSelected then
     l_SetData.UserCRListInfo[l_List].wKindOfList := bs_ulFullCR;
    // Откроем нормальную СКР вместо пользовательской
    if (aNeedMake = vcm_nmNo) and l_IsFullCRSelected then
    begin
     Result := {StateIfNeedShowFullCRList}vcm_nmYes;
     // Закроем пользовательскую вкладку
     case l_List of
      ulFirst:
       begin
        l_SetData.dsUserCR1Ref.Referred := nil;
        Result := vcm_nmYes;
       end;
      ulSecond:
       begin
        l_SetData.dsUserCR2Ref.Referred := nil;
        Result := vcm_nmYes;
       end;
     end;//case l_List of
    end//if (NeedMake = vcm_nmNo) ...
    else
     // Закроем форму СКР потому, что она была открыта по причине установки
     // пользовательской вкладки в настройках с типом "Все документы", а теперь
     // пользователь установил другой тип
     if (aNeedMake = {StateIfNeedShowFullCRList}vcm_nmYes) and not l_IsFullCRSelected then
     begin
      aDSRef.Referred := nil;
      Result := vcm_nmNo;
     end;
   end;//with aDSRef do
  end;//lpCRNeedMake

  procedure lp_InitUserCRList(const aValue: TnsUserCRListId);
  var
   l_Temp: IbsUserCRListInfoModify;

   function lp_IsUserCRListChanged: Boolean;
   begin
    l_Temp.Assign(l_SetData.UserCRListInfo[aValue]);
     // - скопируем, чтобы позднее сравнить изменились ли параметры
     //   пользовательской вкладки:
    with l_SetData.UserCRListInfo[aValue] do
    begin
     wListType := bsUserCRList(aValue);
     wNode := bsUserCRNode(aValue);
     wHas := l_SDS.IsTypedCRSelected(aValue) and (ListType <> crtNone) and
      l_SDS.HasTypedCRinBigBase(aValue);
     wKindOfList := bs_ulUserCR;
    end;//with SetData.UserCRListInfo[ulSecond] do
    Result := not l_Temp.IsSame(l_SetData.UserCRListInfo[aValue]);
     // - проверим изменились ли данные;
   end;//lp_ReadSettings

   procedure lp_UpdateDSUserCRList;
   begin
    // Инициируем переполучение бизнес объекта для вкладки:
    with l_SetData do
     case aValue of
      ulFirst:
       begin
        dsUserCR1Ref.Referred := nil;
        l_FormSet.UserCR1NeedMakeDS := vcm_nmNo;
       end;
      ulSecond:
       begin
        dsUserCR2Ref.Referred := nil;
        l_FormSet.UserCR2NeedMakeDS := vcm_nmNo;
       end;
      else
       Assert(False);
     end;//case aValue of
   end;//lp_UpdateDSUserCRList

  begin
   l_Temp := TbsUserCRListInfo.Make;
   try
    // Проверим изменились ли параметры:
    if lp_IsUserCRListChanged then
     // Инициируем переполучение бизнес объктов:
     lp_UpdateDSUserCRList;
   finally
    l_Temp := nil;
   end;//try..finally
  end;//lp_InitUserCRList

const
 cNeedMakeDSArr: array[Boolean] of TvcmNeedMakeDS = (vcm_nmNo, vcm_nmYes);

  function lp_CheckRelatedDocNeedMakeDS: TvcmNeedMakeDS;
  begin
   Result := cNeedMakeDSArr[l_SDS.IsRelatedDocActive];
   // - http://mdp.garant.ru/pages/viewpage.action?pageId=565006651
  end;

  function lp_CheckAttributesNeedMakeDS: TvcmNeedMakeDS;
  begin
   Result := cNeedMakeDSArr[l_SDS.IsAttributesActive];
  end;

//#UC END# *52EA619F02FA_4AA4D6C7036F_var*
