//#UC START# *479731C50290_4AA68CA10101_impl*
 inherited;
 RubricatorList.TreeStruct := nil;
//#UC END# *479731C50290_4AA68CA10101_impl*
//#UC START# *479731C50290_4AA68CA10101_var*
//#UC END# *479731C50290_4AA68CA10101_var*
//#UC START# *47A042E100E2_4AA68CA10101_impl*
 inherited;
 f_SetCurrentLock := 0;

 OnSaveState := VcmEntityFormSaveState;
 OnLoadState := VcmEntityFormLoadState;
//#UC END# *47A042E100E2_4AA68CA10101_impl*
//#UC START# *47A042E100E2_4AA68CA10101_var*
//#UC END# *47A042E100E2_4AA68CA10101_var*
//#UC START# *4A8E8F2E0195_4AA68CA10101_impl*
 inherited;
 ActiveControl := RubricatorList;

 with RubricatorList do
 begin
  Align := alClient;
  BorderStyle := bsNone;
  TabOrder := 1;
  ShowHeader := False;
  PickedList := False;
  MultiSelect := False;
  MultiStrokeItem := True;
  ActionElementMode := l3_amSingleClick;
  ViewOptions := [voShowInterRowSpace, voShowIcons, voShowExpandable, voShowLines];
  UseStyleTable := True;
  StyleId := ev_saInterface;
  AllowWithoutCurrent := False;
  FooterVisible := False;
  FooterStyleID := ev_saHyperLink;
  FooterActiveStyleID := ev_saActiveHyperlink;
  SettingId := 'stidRubricatorList';
  Images := nsRubricatorRes.RubricatorItemsImageList;

  OnGetItemImage := RubricatorListGetItemImage;
  OnActionElement := RubricatorListActionElement;
  OnTreeChanged := RubricatorListTreeChanged;
 end;
 with TopPanel do
 begin
  Align := alTop;
  Height := 41;
  BevelOuter := bvNone;
  Color := clWindow;
  TabOrder := 0;
  Visible := False;
 end;
 with PaintBox do
 begin
  Width := 25;
  Align := alLeft;
  OnPaint := PaintBoxPaint;
 end;
 with NewDocLabel do
 begin
  Align := alClient;
  TabOrder := 0;
  TextSource := ExampleTextSource;
  IsStaticText := True;
  ScrollStyle := ssNone;
  OnGetHotSpotInfo := NewDocLabelGetHotSpotInfo;
  OnJumpTo := NewDocLabelJumpTo;
  OnBreakingPara := NewDocLabelBreakingPara;
 end;
 with DelimiterPanel do
 begin
  Height := 12;
  Align := alTop;
  //Top := 0; // в самый верХ
  TopPanel.Top := 100; // сдвигаем под DelimiterPanel
  BevelOuter := bvNone;
  Color := clWindow;
  TabOrder := 2;
 end;
 with ExampleTextSource do
  OnMakeDocumentContainer := ExampleTextSourceMakeDocumentContainer;
//#UC END# *4A8E8F2E0195_4AA68CA10101_impl*
//#UC START# *4A8E8F2E0195_4AA68CA10101_var*
//#UC END# *4A8E8F2E0195_4AA68CA10101_var*
//#UC START# *4AA68CA10101impl_uses*
 , l3ControlsTypes
//#UC END# *4AA68CA10101impl_uses*
//#UC START# *4AA7805301DC_4AA68CA10101exec_impl*
 if (aNode <> nil) then
  InternalSetRoot(aNode, aRootToKeep, aMenuSectionItemToKeep)
 else
 begin
  CCaption := nil;
  RubricatorList.TreeStruct.RootNode := nil;
 end;//aNode <> nil
//#UC END# *4AA7805301DC_4AA68CA10101exec_impl*
//#UC START# *4AA7805301DC_4AA68CA10101exec_var*
//#UC END# *4AA7805301DC_4AA68CA10101exec_var*
//#UC START# *4AA7806601AE_4AA68CA10101exec_impl*
 if (aNode <> nil) then
  InternalInitRoot(aNode, aRootToKeep, aMenuSectionItemToKeep)
 else
 begin
  CCaption := nil;
  RubricatorList.TreeStruct.RootNode := nil;
 end;//aNode <> nil
//#UC END# *4AA7806601AE_4AA68CA10101exec_impl*
//#UC START# *4AA7806601AE_4AA68CA10101exec_var*
//#UC END# *4AA7806601AE_4AA68CA10101exec_var*
//#UC START# *4AA7809901AE_4AA68CA10101exec_impl*
 Op_Navigator_SetCurrent.Call(Aggregate, RubricatorList.TreeStruct.RootNode);
//#UC END# *4AA7809901AE_4AA68CA10101exec_impl*
//#UC START# *4AA7809901AE_4AA68CA10101exec_var*
//#UC END# *4AA7809901AE_4AA68CA10101exec_var*
//#UC START# *4AA781EA039B_4AA68CA10101_impl*
 Inc(f_SetCurrentLock);
 try
  with RubricatorList.TreeStruct do
  begin
   if Supports(aNode, INodeBase, l_Node) and
      not aNode.IsSame(RootNode) then
   begin
    RubricatorList.TreeStruct := TnsRubricatorList.Make(l_Node, aRootToKeep, aMenuSectionItemToKeep);
    CCaption := l3CStr(RubricatorList.TreeStruct.RootNode);
    UpdateTopPanel(TNavigatorMenuItemType(l_Node.GetType));
    Op_Navigator_SetCurrent.Call(Aggregate, aNode);
   end;//Supports(aNode, INodeBase, l_Node)
  end;
 finally
  Dec(f_SetCurrentLock);
 end;//try..finally
//#UC END# *4AA781EA039B_4AA68CA10101_impl*
//#UC START# *4AA781EA039B_4AA68CA10101_var*
//#UC END# *4AA781EA039B_4AA68CA10101_var*
//#UC START# *4AA7824B03DF_4AA68CA10101_impl*
 with RubricatorList.TreeStruct do
  if not aNode.IsSame(RootNode) then
   Dispatcher.History.SaveState(Self.As_IvcmEntityForm); //Запись в историю
 InternalInitRoot(aNode, aRootToKeep, aMenuSectionItemToKeep);
//#UC END# *4AA7824B03DF_4AA68CA10101_impl*
//#UC START# *4AA7824B03DF_4AA68CA10101_var*
//#UC END# *4AA7824B03DF_4AA68CA10101_var*
//#UC START# *4AA78D1501FF_4AA78D4B020Bget_impl*
 Result := f_NewDocLabelVisible;
//#UC END# *4AA78D1501FF_4AA78D4B020Bget_impl*
//#UC START# *4AA78D1501FF_4AA78D4B020Bget_var*
//#UC END# *4AA78D1501FF_4AA78D4B020Bget_var*
//#UC START# *4AA78D2C012A_4AA78D4B020Bget_impl*
 Result := f_LinkType;
//#UC END# *4AA78D2C012A_4AA78D4B020Bget_impl*
//#UC START# *4AA78D2C012A_4AA78D4B020Bget_var*
//#UC END# *4AA78D2C012A_4AA78D4B020Bget_var*
//#UC START# *4AA78D81011E_4AA78D4B020B_impl*
 inherited Create;
 f_NewDocLabelVisible := aNewDocLabelVisible;
 f_LinkType := aLinkType;
//#UC END# *4AA78D81011E_4AA78D4B020B_impl*
//#UC START# *4AA78D81011E_4AA78D4B020B_var*
//#UC END# *4AA78D81011E_4AA78D4B020B_var*
//#UC START# *4B02CFA303DA_4AA68CA10101exec_impl*
 if RubricatorList.IsTreeAssign then
  Result := RubricatorList.TreeStruct.RootNode
 else
  Result := nil;
//#UC END# *4B02CFA303DA_4AA68CA10101exec_impl*
//#UC START# *4B02CFA303DA_4AA68CA10101exec_var*
//#UC END# *4B02CFA303DA_4AA68CA10101exec_var*
//#UC START# *4C4433150077_4AA68CA10101exec_impl*
 RubricExecute;
//#UC END# *4C4433150077_4AA68CA10101exec_impl*
//#UC START# *4C4433150077_4AA68CA10101exec_var*
//#UC END# *4C4433150077_4AA68CA10101exec_var*
//#UC START# *525D4BD701CF_4AA68CA10101_impl*
 if (RubricatorList.GetNode(Index) <> nil) then
  RubricExecute;
//#UC END# *525D4BD701CF_4AA68CA10101_impl*
//#UC START# *525D4BD701CF_4AA68CA10101_var*
//#UC END# *525D4BD701CF_4AA68CA10101_var*
//#UC START# *525D4BE202AC_4AA68CA10101_impl*
 if Supports(RubricatorList.GetNode(Index), INodeBase, l_AdapterNode) then
 try
  Result := GetRubricatorImageIndex(l_AdapterNode);
 finally
  l_AdapterNode := nil;
 end
 else
  Result := -1;
//#UC END# *525D4BE202AC_4AA68CA10101_impl*
//#UC START# *525D4BE202AC_4AA68CA10101_var*
var
 l_AdapterNode : INodeBase;
//#UC END# *525D4BE202AC_4AA68CA10101_var*
//#UC START# *525D4CF902DC_4AA68CA10101_impl*
 if (f_SetCurrentLock = 0) then
  if (aNewTree <> nil) then
   Self.Rubricator_Synchronize_Execute;
//#UC END# *525D4CF902DC_4AA68CA10101_impl*
//#UC START# *525D4CF902DC_4AA68CA10101_var*
//#UC END# *525D4CF902DC_4AA68CA10101_var*
//#UC START# *525D4D05018C_4AA68CA10101_impl*
 Result := True;
 CallGarant;
//#UC END# *525D4D05018C_4AA68CA10101_impl*
//#UC START# *525D4D05018C_4AA68CA10101_var*
//#UC END# *525D4D05018C_4AA68CA10101_var*
//#UC START# *525D4D190205_4AA68CA10101_impl*
 aMade.ReadFrom(Tl3StringStream.Make(l3PCharLen(vcmCStr(str_NewDocsEVD))));
//#UC END# *525D4D190205_4AA68CA10101_impl*
//#UC START# *525D4D190205_4AA68CA10101_var*
//#UC END# *525D4D190205_4AA68CA10101_var*
//#UC START# *525D4D28010E_4AA68CA10101_impl*
 CallGarant;
 aHandled := True;
//#UC END# *525D4D28010E_4AA68CA10101_impl*
//#UC START# *525D4D28010E_4AA68CA10101_var*
//#UC END# *525D4D28010E_4AA68CA10101_var*
//#UC START# *525D4D3402A7_4AA68CA10101_impl*
 with PaintBox.Canvas do
 begin
  l_IndentX := (PaintBox.Width - 16) div 2;
  l_IndentY := (TopPanel.Height - 16) div 2;
  dmStdRes.SmallImageList.Draw(PaintBox.Canvas, l_IndentX, l_IndentY, cInternetTips);
 end;
//#UC END# *525D4D3402A7_4AA68CA10101_impl*
//#UC START# *525D4D3402A7_4AA68CA10101_var*
var
 l_IndentX: Integer;
 l_IndentY: Integer;
//#UC END# *525D4D3402A7_4AA68CA10101_var*
//#UC START# *525D4D3F0361_4AA68CA10101_impl*
 if Supports(aHotSpot, IevHyperlink) then
  theInfo.rCursor := ev_csExternalHand
 else
  theInfo.rCursor := ev_csArrow;
//#UC END# *525D4D3F0361_4AA68CA10101_impl*
//#UC START# *525D4D3F0361_4AA68CA10101_var*
//#UC END# *525D4D3F0361_4AA68CA10101_var*
//#UC START# *525D4D500351_4AA68CA10101_impl*
 case f_LinkType of
  NM_NEW_DOCS:
   if afw.Application.LocaleInfo.Language = afw_lngEnglish then
    nsDoShellExecute(nsCStr(ciitEnglishGarant))
   else
    nsDoShellExecute(nsCStr(ciitHotDocs));
  NM_MONITORINGS:
   if afw.Application.LocaleInfo.Language = afw_lngEnglish then
    nsDoShellExecute(nsCStr(ciitEnglishGarant))
   else
    nsDoShellExecute(nsCStr(ciitHotDocs));
 end;
//#UC END# *525D4D500351_4AA68CA10101_impl*
//#UC START# *525D4D500351_4AA68CA10101_var*
//#UC END# *525D4D500351_4AA68CA10101_var*
//#UC START# *525D4DC500E2_4AA68CA10101_impl*
 l_l3Node := RubricatorList.GetCurrentNode;
 if (l_l3Node = nil) or
    (Aggregate = nil) then
  Exit;
 if Supports(l_l3Node, INodeBase, l_Node) then
 try
  if TNavigatorMenuItemType(l_Node.GetType) = NM_DOCUMENT then
   lp_Document
  else
  if not l_Node.HasChildren then
   lp_List
  else
  begin
   if not Supports(RubricatorList.TreeStruct, InsRubricatorTree,  l_RubricatorTree) then
    Assert(false);
   InternalSetRoot(l_l3Node, l_RubricatorTree.RootToKeep, l_RubricatorTree.MenuSectionItemToKeep);
  end;//not l_Node.HasChildren
 finally
  l_Node := nil;
 end;//try..finally
//#UC END# *525D4DC500E2_4AA68CA10101_impl*
//#UC START# *525D4DC500E2_4AA68CA10101_var*
var
 l_l3Node: Il3SimpleNode;
 l_Node: INodeBase;

 procedure lp_List;
 var
  l_DynList: IDynList;
  l_EntityBase: IEntityBase;
 begin
  try
   l_Node.GetEntity(l_EntityBase);
  except
   on ENoEntity do
   begin
    defDataAdapter.ShowMessageWithDealerInfo(war_EmtryListEntity);
    exit;
   end;
  end;{try..except}
  if Supports(l_EntityBase, IDynList, l_DynList) then
  try
   nsOpenList(l_DynList, NativeMainForm, wdAlwaysOpen, True, lofRubricator);
   // Синхронизация с элементом в Навигаторе
   Op_Navigator_SetCurrent.Call(Aggregate, l_l3Node);
  finally
   l_DynList := nil;
  end;//if Supports(l_EntityBase, IDynList, l_DynList) then
 end;//lp_List

 procedure lp_Document;
 var
  l_Document: IDocument;
  l_EntityBase: IEntityBase;
 begin
  try
   l_Node.GetEntity(l_EntityBase);
  except
   on ENoEntity do
    exit;
  end;{try..except}
  if Supports(l_EntityBase, IDocument, l_Document) then
  try
   TvcmModulesFactories.OpenDocument(TdeDocInfo.Make(l_Document), nil);
   op_Navigator_SetCurrent.Call(Aggregate, l_l3Node);
  finally
   l_Document := nil;
  end;//if Supports(l_EntityBase, IDocument, l_Document) then
 end;//lp_Document

var
 l_RubricatorTree: InsRubricatorTree;
//#UC END# *525D4DC500E2_4AA68CA10101_var*
//#UC START# *525D4DF700DE_4AA68CA10101_impl*
 f_LinkType := aNodeType;
 TopPanel.Visible := aNodeType in [NM_NEW_DOCS, NM_MONITORINGS];
 DelimiterPanel.Visible := not TopPanel.Visible;
 if NewDocLabel.Document.Para[0].AsObject.QT(IevCommonControl, l_Para, NewDocLabel.Processor) then
  l_Para.Collapsed := aNodeType = NM_MONITORINGS;
//#UC END# *525D4DF700DE_4AA68CA10101_impl*
//#UC START# *525D4DF700DE_4AA68CA10101_var*
var
 l_Para: IevCommonControl;
//#UC END# *525D4DF700DE_4AA68CA10101_var*
//#UC START# *525E7A2D0076_4AA68CA10101_impl*
 if aStateType = vcm_stContent then
 begin
  aState := TnsRubricatorState.Make(TopPanel.Visible, f_LinkType).As_IvcmBase;
  Saved := True;
 end;
//#UC END# *525E7A2D0076_4AA68CA10101_impl*
//#UC START# *525E7A2D0076_4AA68CA10101_var*
//#UC END# *525E7A2D0076_4AA68CA10101_var*
//#UC START# *525E7A6300A6_4AA68CA10101_impl*
 if (aStateType = vcm_stContent) and Supports(aState, InsRubricatorState, l_State) then
 begin
  TopPanel.Visible := l_State.NewDocLabelVisible;
  DelimiterPanel.Visible := not TopPanel.Visible;
  f_LinkType := l_State.LinkType;
  Loaded := True;
 end;
//#UC END# *525E7A6300A6_4AA68CA10101_impl*
//#UC START# *525E7A6300A6_4AA68CA10101_var*
var
 l_State: InsRubricatorState;
//#UC END# *525E7A6300A6_4AA68CA10101_var*
//#UC START# *543E3AA801D0_4AA68CA10101_impl*
 Result := nsTabIconIndex(titRubricator);
//#UC END# *543E3AA801D0_4AA68CA10101_impl*
//#UC START# *543E3AA801D0_4AA68CA10101_var*
//#UC END# *543E3AA801D0_4AA68CA10101_var*
