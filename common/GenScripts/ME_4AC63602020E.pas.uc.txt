//#UC START# *49803F5503AA_4AC63602020E_impl*
 inherited;
 Position := poScreenCenter;
//#UC END# *49803F5503AA_4AC63602020E_impl*
//#UC START# *49803F5503AA_4AC63602020E_var*
//#UC END# *49803F5503AA_4AC63602020E_var*
//#UC START# *4A8E8F2E0195_4AC63602020E_impl*
 inherited;

 BorderIcons := [biSystemMenu];
 BorderStyle := bsDialog;
 ClientHeight := 56;
 ClientWidth := 279;

 with Label1 do
 begin
  Left := 8;
  Top := 11;
  AutoSize := False;
  Width := 110;
  Height := 16;
 end;
 with edNumber do
 begin
  Left := 120;
  Top := 8;
  Width := 153;
  Height := 21;
  TabOrder := 0;
 end;
 with cbInternal do
 begin
  Left := 8;
  Top := 34;
  Width := 265;
  Height := 17;
  TabOrder := 1;
 end;
//#UC END# *4A8E8F2E0195_4AC63602020E_impl*
//#UC START# *4A8E8F2E0195_4AC63602020E_var*
//#UC END# *4A8E8F2E0195_4AC63602020E_var*
//#UC START# *4AC63602020E_ext:FileName
w:\garant6x\implementation\Garant\GbaNemesis\View\PrimDocNumberQuery_Form.pas
//#UC END# *4AC63602020E_ext:FileName
//#UC START# *4AC63602020Eimpl_uses*
//#UC END# *4AC63602020Eimpl_uses*
//#UC START# *4C863FCD0121_4AC63602020E_impl*
 Result := false;
 nsParseDocumentNumber(edNumber.Text, l_DocId, l_PosId, l_PosType, l_Wrong);
 if l_Wrong then
 begin
  Say(msg_WrongDocumentNumber);
  edNumber.SetFocus;
  Exit;
 end;//l_Wrong
 SaveHistory(l_DocId, l_History);
 // Передаем результат в вызывающую операцию
 if (f_Results <> nil) then
 begin
  f_Results.Done := true;
  f_Results.DocID := l_DocId;
  f_Results.PosID := l_PosID;
  f_Results.PosType := l_PosType;
  f_Results.Internal := cbInternal.Checked;
  f_Results.History := nsCStr(l_History);
 end;//f_Results <> nil
 Result := true;
//#UC END# *4C863FCD0121_4AC63602020E_impl*
//#UC START# *4C863FCD0121_4AC63602020E_var*
var
 l_DocId   : Integer;
 l_PosId   : Integer;
 l_PosType : TDocumentPositionType;
 l_Wrong   : Boolean;
 l_History : String;
//#UC END# *4C863FCD0121_4AC63602020E_var*
//#UC START# *51B9E1A00192_4AC63602020E_impl*
 if not l3IsNil(aHistory) then
 begin
  l3FormatStringToRec(l3Str(aHistory), l_DocNumberHistory, c_HistoryFormat);
  for I := 0 to c_HistoryCapacity - 1 do
   if (l_DocNumberHistory[I] <> 0) then
    edNumber.Items.Add(IntToStr(l_DocNumberHistory[I]));
 end;//aHistory <> ''
//#UC END# *51B9E1A00192_4AC63602020E_impl*
//#UC START# *51B9E1A00192_4AC63602020E_var*
var
 l_DocNumberHistory: packed array [0..c_HistoryCapacity-1] of Longint;
 I: LongInt;
//#UC END# *51B9E1A00192_4AC63602020E_var*
//#UC START# *51B9E27000CD_4AC63602020E_impl*
   if (aData.PosID <> 0) then
   begin
    case aData.PosType of
     dptSub:  edNumber.Text := nsCStr(IntToStr(aData.DocID) + cPosDelimiter + IntToStr(aData.PosID));
     dptPara: edNumber.Text := nsCStr(IntToStr(aData.DocID) + cPosDelimiter + cParaPrefix + IntToStr(aData.PosID));
     dptNone,
     dptMarker,
     dptBookmark,
     dptMark,
     dptDocumentPlace: edNumber.Text := nsCStr(IntToStr(aData.DocID));
    end;
   end
   else
    edNumber.Text := nsCStr(IntToStr(aData.DocID));
   cbInternal.Checked := aData.Internal;
   LoadHistory(aData.History);
   f_Results := aData;
//#UC END# *51B9E27000CD_4AC63602020E_impl*
//#UC START# *51B9E2AC030D_4AC63602020E_impl*
 l3FillChar(l_DocNumberHistory, SizeOf(l_DocNumberHistory));
 l_ArrayPos := 0;

 l_DocNumberHistory[l_ArrayPos] := aLastNumber;
 inc(l_ArrayPos);

 for I := 0 to edNumber.Items.Count - 1 do
  if l_ArrayPos < c_HistoryCapacity then
  begin
   l_tmpNum := StrToInt(edNumber.Items[I].AsString);
   if l_tmpNum <> aLastNumber then
   begin
    l_DocNumberHistory[l_ArrayPos] := l_tmpNum;
    inc(l_ArrayPos);
   end;
  end;

 aHistory := l3RecToFormatString(l_DocNumberHistory, c_HistoryFormat);
//#UC END# *51B9E2AC030D_4AC63602020E_impl*
//#UC START# *51B9E2AC030D_4AC63602020E_var*
var
 l_DocNumberHistory: packed array [0..c_HistoryCapacity-1] of Longint;
 l_tmpNum,
 l_ArrayPos,
 I: LongInt;
//#UC END# *51B9E2AC030D_4AC63602020E_var*
