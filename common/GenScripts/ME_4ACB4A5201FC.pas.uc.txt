//#UC START# *47D1602000C6_4ACB4A5201FC_impl*
 inherited;
 for lBpp := Low(TvtPILBpp) to High(TvtPILBpp) do
 begin
  f_Glyph[lBpp] := TIEBitmap.Create;
  with f_Glyph[lBpp] do
  begin
   PixelFormat := ie24RGB;
   CreateAlphaChannel;
   Location := ieFile;
   MinFileSize := 51200;
   Width := 1;
   Height := 1;
  end;
 end;
 f_OldWidth := 16;
 f_OldHeight := 16;
 Width := 16;
 Height := 16;
 f_CurBpp := bpp24;
 f_Count := 0;
 f_Rebuilding := false;
 HandleNeeded;
 if g_PILList = nil then
  g_PILList := Tl3ObjectList.Make;
 g_PILList.Add(Self);
//#UC END# *47D1602000C6_4ACB4A5201FC_impl*
//#UC START# *47D1602000C6_4ACB4A5201FC_var*
var
 lBpp: TvtPILBpp;
//#UC END# *47D1602000C6_4ACB4A5201FC_var*
//#UC START# *48077504027E_4ACB4A5201FC_impl*
 for lBpp := Low(TvtPILBpp) to High(TvtPILBpp) do
  l3Free(f_Glyph[lBpp]);
 l3Free(f_DrawCache);
 g_PILList.Remove(Self);
 if g_PILList.Count = 0 then
  l3Free(g_PILList);
 l3Free(f_AlphaDrawCache);
 inherited Destroy;
//#UC END# *48077504027E_4ACB4A5201FC_impl*
//#UC START# *48077504027E_4ACB4A5201FC_var*
var
 lBpp: TvtPILBpp;
//#UC END# *48077504027E_4ACB4A5201FC_var*
//#UC START# *4ACB4A5201FC_ext:ParentFileName
w:\common\components\gui\Garant\VT\vtPngImgList.pas
//#UC END# *4ACB4A5201FC_ext:ParentFileName
//#UC START# *4ACB4A5201FCci*
//#UC END# *4ACB4A5201FCci*
//#UC START# *4ACB4A5201FCcit*
//#UC END# *4ACB4A5201FCcit*
//#UC START# *4ACB4A5201FCimpl*
{$ifndef DesignTimeLibrary}
{$IfNDef XE}
function TvtNonFixedPngImageListPrim.GetCount: Integer;
begin
 Result := f_Count;
end;
{$endif}
{$endif}
//#UC END# *4ACB4A5201FCimpl*
//#UC START# *4ACB4A5201FCpubl*
  {$IFDEF DesignTimeLibrary}
  procedure RebuildForDesignTime;
  {$ENDIF}
   {$ifndef DesignTimeLibrary}
   {$IfNDef XE}
  protected
   function GetCount: Integer; override;
   {$EndIf}
   {$endif}
//#UC END# *4ACB4A5201FCpubl*
//#UC START# *4F950C6D03BE_4ACB4A5201FC_impl*
 if (Index < 0) or (Index > Count-1) then
  Exit;
 DrawGlyphSpecified(Index, Canvas, f_CurBpp, X, Y, Enabled, HalfTransparent);
//#UC END# *4F950C6D03BE_4ACB4A5201FC_impl*
//#UC START# *4F950C6D03BE_4ACB4A5201FC_var*
//#UC END# *4F950C6D03BE_4ACB4A5201FC_var*
//#UC START# *4FD089B50350_4ACB4A5201FCset_impl*
 if f_CurBpp <> aValue then
 begin
  f_CurBpp := aValue;
  Change;
 end;
//#UC END# *4FD089B50350_4ACB4A5201FCset_impl*
//#UC START# *4FD089B50350_4ACB4A5201FCset_var*
//#UC END# *4FD089B50350_4ACB4A5201FCset_var*
//#UC START# *4FD08DA20340_4ACB4A5201FC_impl*
 f_Count := f_Glyph[bpp24].Width div Width;
//#UC END# *4FD08DA20340_4ACB4A5201FC_impl*
//#UC START# *4FD08DA20340_4ACB4A5201FC_var*
//#UC END# *4FD08DA20340_4ACB4A5201FC_var*
//#UC START# *4FD08DBD02AD_4ACB4A5201FC_impl*
 for lBpp := Low(TvtPILBpp) to High(TvtPILBpp) do
  if aCount = 0
   then f_Glyph[lBpp].Resize(1, 1, 0, 0, iehLeft, ievTop)
   else f_Glyph[lBpp].Resize(aCount * Width, Height, 0, 0, iehLeft, ievTop);
//#UC END# *4FD08DBD02AD_4ACB4A5201FC_impl*
//#UC START# *4FD08DBD02AD_4ACB4A5201FC_var*
var
 lBpp: TvtPILBpp;
//#UC END# *4FD08DBD02AD_4ACB4A5201FC_var*
//#UC START# *4FD08E070341_4ACB4A5201FC_impl*
 Result := (aBpp = bpp24) and (@g_AlphaBlendFunc <> nil) and Assigned(f_Glyph[bpp24]);
 if Result then
 begin
  if not Assigned(f_AlphaDrawCache) then
  begin
   f_AlphaDrawCache := Tl3Bitmap.Create;
   with f_AlphaDrawCache do
   begin
    Width  := f_Glyph[bpp24].Width;
    Height := f_Glyph[bpp24].Height*2;
    PixelFormat := pf32bit;
   end;
   f_NeedPrepareAlphaDrawCache := True;
  end;
  if f_NeedPrepareAlphaDrawCache then
  begin
   PrepareAlphaBitmap(f_Glyph[bpp24], f_AlphaDrawCache);
   f_NeedPrepareAlphaDrawCache := False;
  end;
 end;
//#UC END# *4FD08E070341_4ACB4A5201FC_impl*
//#UC START# *4FD08E070341_4ACB4A5201FC_var*
//#UC END# *4FD08E070341_4ACB4A5201FC_var*
//#UC START# *4FD08E3902B2_4ACB4A5201FC_impl*
 f_NeedPrepareAlphaDrawCache := True;
//#UC END# *4FD08E3902B2_4ACB4A5201FC_impl*
//#UC START# *4FD08E3902B2_4ACB4A5201FC_var*
//#UC END# *4FD08E3902B2_4ACB4A5201FC_var*
//#UC START# *4FD08E4F0057_4ACB4A5201FC_impl*
 l3Free(f_AlphaDrawCache);
 l3Free(f_DrawCache);
//#UC END# *4FD08E4F0057_4ACB4A5201FC_impl*
//#UC START# *4FD08E4F0057_4ACB4A5201FC_var*
//#UC END# *4FD08E4F0057_4ACB4A5201FC_var*
//#UC START# *4FD08E8503DC_4ACB4A5201FC_impl*
 inherited;
 if ((Width <> f_OldWidth) or (Height <> f_OldHeight)) and (f_Glyph[bpp24] <> nil) then
 begin
  f_Count := 0;
  ResizeAll(0);
  f_OldWidth := Width;
  f_OldHeight := Height;
 end;
 ClearAlphaDrawCache;
//#UC END# *4FD08E8503DC_4ACB4A5201FC_impl*
//#UC START# *4FD08E8503DC_4ACB4A5201FC_var*
//#UC END# *4FD08E8503DC_4ACB4A5201FC_var*
//#UC START# *4FD08EF002D0_4ACB4A5201FC_impl*
 inherited DefineProperties(Filer);
 Filer.DefineBinaryProperty('PNGData', ReadData, WriteData, DoWrite);
//#UC END# *4FD08EF002D0_4ACB4A5201FC_impl*
//#UC START# *4FD08EF002D0_4ACB4A5201FC_var*
  function DoWrite: Boolean;
  begin
    {if Filer.Ancestor <> nil then
      Result := not (Filer.Ancestor is TCustomImageList) or
        not Equal(TCustomImageList(Filer.Ancestor))
    else}
      Result := Count > 0;
  end;
//#UC END# *4FD08EF002D0_4ACB4A5201FC_var*
//#UC START# *4FD08F7F01AD_4ACB4A5201FC_impl*
 IO := TImageEnIO.Create(nil);
 try
  for lBpp := Low(TvtPILBpp) to High(TvtPILBpp) do
  begin
   IO.AttachedIEBitmap := f_Glyph[lBpp];
   IO.LoadFromStreamPNG(Stream);
  end;
 finally
  IO.Free;
 end;
 CalcCount;
 {$IFDEF DesignTimeLibrary}
 RebuildForDesignTime;
 {$ENDIF}
//#UC END# *4FD08F7F01AD_4ACB4A5201FC_impl*
//#UC START# *4FD08F7F01AD_4ACB4A5201FC_var*
var
 lBpp: TvtPILBpp;
 IO: TImageEnIO;
//#UC END# *4FD08F7F01AD_4ACB4A5201FC_var*
//#UC START# *4FD08FA7008C_4ACB4A5201FC_impl*
 IO := TImageEnIO.Create(nil);
 try
  for lBpp := Low(TvtPILBpp) to High(TvtPILBpp) do
  begin
   IO.AttachedIEBitmap := f_Glyph[lBpp];
   IO.SaveToStreamPNG(Stream);
  end;
 finally
  IO.Free;
 end;
//#UC END# *4FD08FA7008C_4ACB4A5201FC_impl*
//#UC START# *4FD08FA7008C_4ACB4A5201FC_var*
var
 lBpp: TvtPILBpp;
 IO: TImageEnIO;
//#UC END# *4FD08FA7008C_4ACB4A5201FC_var*
//#UC START# *4FD092040227_4ACB4A5201FC_impl*
 {$IFDEF DesignTimeLibrary}
 inherited Clear;
 {$ENDIF}
 inherited;
//#UC END# *4FD092040227_4ACB4A5201FC_impl*
//#UC START# *4FD092040227_4ACB4A5201FC_var*
//#UC END# *4FD092040227_4ACB4A5201FC_var*
//#UC START# *4FD092660354_4ACB4A5201FC_impl*
 Inc(f_Count);
 ResizeAll(f_Count);
 Result := f_Count;
 Change;
//#UC END# *4FD092660354_4ACB4A5201FC_impl*
//#UC START# *4FD092660354_4ACB4A5201FC_var*
//#UC END# *4FD092660354_4ACB4A5201FC_var*
//#UC START# *4FD09329032F_4ACB4A5201FC_impl*
 if (aIndex < 0) or (aIndex > Count-1) then
  Exit;
 if aIndex < (Count-1) then
 begin
  // переносим картинки влево
  for lBpp := Low(TvtPILBpp) to High(TvtPILBpp) do
  begin
   lFrom := (aIndex+1)*Width;
   lTo := aIndex*Width;
   lHowMuch := (Count-aIndex-1)*Width;
   f_Glyph[lBpp].CopyRectTo(f_Glyph[lBpp], lFrom, 0, lTo, 0,
      lHowMuch, Height);
   f_Glyph[lBpp].AlphaChannel.CopyRectTo(f_Glyph[lBpp].AlphaChannel,
      lFrom, 0, lTo, 0, lHowMuch, Height);
  end;
 end;
 Dec(f_Count);
 ResizeAll(f_Count);
 Change;
//#UC END# *4FD09329032F_4ACB4A5201FC_impl*
//#UC START# *4FD09329032F_4ACB4A5201FC_var*
var
 lHowMuch: Integer;
 lTo: Integer;
 lFrom: Integer;
 lBpp: TvtPILBpp;
//#UC END# *4FD09329032F_4ACB4A5201FC_var*
//#UC START# *4FD093CB025F_4ACB4A5201FC_impl*
 if (Index < 0) or (Index > Count-1) then
  Exit;
 DrawGlyphSpecified(Index, Canvas, f_CurBpp, X, Y, Enabled);
//#UC END# *4FD093CB025F_4ACB4A5201FC_impl*
//#UC START# *4FD093CB025F_4ACB4A5201FC_var*
//#UC END# *4FD093CB025F_4ACB4A5201FC_var*
//#UC START# *4FD0944D0202_4ACB4A5201FC_impl*
 Result.X := Width;
 Result.Y := Height;
//#UC END# *4FD0944D0202_4ACB4A5201FC_impl*
//#UC START# *4FD0944D0202_4ACB4A5201FC_var*
//#UC END# *4FD0944D0202_4ACB4A5201FC_var*
//#UC START# *4FD0947D03BE_4ACB4A5201FC_impl*
 if (Index < 0) or (Index > Count-1) then
  Exit;
 lShiftX := (Image.Width - Width) div 2;
 lShiftY := (Image.Height - Height) div 2;

 Image.CopyRectTo(f_Glyph[Bpp], lShiftX, lShiftY, Index*Width, 0, Width, Height);
 Image.AlphaChannel.CopyRectTo(f_Glyph[Bpp].AlphaChannel, lShiftX, lShiftY, Index*Width, 0, Width, Height);
 f_Glyph[Bpp].AlphaChannel.SyncFull;
 ClearAlphaDrawCache;
//#UC END# *4FD0947D03BE_4ACB4A5201FC_impl*
//#UC START# *4FD0947D03BE_4ACB4A5201FC_var*
var
 lShiftY: Integer;
 lShiftX: Integer;
//#UC END# *4FD0947D03BE_4ACB4A5201FC_var*
//#UC START# *4FD094A5039B_4ACB4A5201FC_impl*
 if (Index < 0) or (Index > Count-1) then
  Exit;

 Image.Width := Width;
 Image.Height := Height;

 f_Glyph[Bpp].CopyRectTo(Image, Index*Width, 0, 0, 0, Width, Height);
 f_Glyph[Bpp].AlphaChannel.CopyRectTo(Image.AlphaChannel, Index*Width, 0, 0, 0, Width, Height);
 Image.AlphaChannel.SyncFull;
//#UC END# *4FD094A5039B_4ACB4A5201FC_impl*
//#UC START# *4FD094A5039B_4ACB4A5201FC_var*
//#UC END# *4FD094A5039B_4ACB4A5201FC_var*
//#UC START# *4FD094BC00C9_4ACB4A5201FC_impl*
 f_Count := 0;
 ResizeAll(0);
 Change; 
//#UC END# *4FD094BC00C9_4ACB4A5201FC_impl*
//#UC START# *4FD094BC00C9_4ACB4A5201FC_var*
//#UC END# *4FD094BC00C9_4ACB4A5201FC_var*
//#UC START# *4FD094DB01A3_4ACB4A5201FC_impl*
 DrawGlyphSpecified(Index, Canvas.Canvas, Bpp, Y, Y, Enabled);
//#UC END# *4FD094DB01A3_4ACB4A5201FC_impl*
//#UC START# *4FD094DB01A3_4ACB4A5201FC_var*
//#UC END# *4FD094DB01A3_4ACB4A5201FC_var*
//#UC START# *4FD095010268_4ACB4A5201FC_impl*
 if (Index < 0) or (Index > Count-1) then
  Exit;
 l_Painted := CanAlphaDraw(Bpp);
 if l_Painted then
 begin
  if Enabled then
   l_CacheTop := 0
  else
   l_CacheTop := Height;
  g_BlendOp.SourceConstantAlpha := CalcTransparenctColor(cFullAlpha, HalfTransparent);
  l_Painted := AlphaBlend(Canvas.Handle, X, Y, Width, Height, f_AlphaDrawCache.Canvas.Handle,
                          Index * Width, l_CacheTop, Width, Height, g_BlendOp);
  g_BlendOp.SourceConstantAlpha := cFullAlpha;
 end;
 if not l_Painted then
 begin
  if f_DrawCache = nil then
  begin
   f_DrawCache := Tl3Bitmap.Create;
   with f_DrawCache do
   begin
    Width := Self.Width;
    Height := Self.Height;
    PixelFormat := pf24bit;
    Dormant;
   end;
  end;
  if f_DrawCache.Width <> Width then
   f_DrawCache.Width := Width;
  if f_DrawCache.Height <> Height then
   f_DrawCache.Height := Height;

  with f_DrawCache.Canvas do
  begin
   Brush.Style := bsSolid;
   Brush.Color := clWindow;
   Pen.Style := psClear;
   Rectangle(ClipRect);
  end;
  StretchBlt(f_DrawCache.Canvas.Handle, 0, 0, Width, Height, Canvas.Handle, X, Y,
     Width, Height, SRCCOPY);
  if Enabled then
  begin
   lAlpha := CalcTransparenctColor(cFullAlpha, HalfTransparent);
   lROP := ielNormal;
  end
  else
  begin
   lAlpha := CalcTransparenctColor(cDisabledAlpha, HalfTransparent);
   lROP := ielGreyDown;
  end; {if..}
  f_Glyph[Bpp].RenderToTBitmap(f_DrawCache, 0, 0, Width, Height,
    Index*Width, 0, Width, Height, True, rfNone, True, lAlpha, lROP);
  Canvas.Draw(X, Y, f_DrawCache);
 end;
//#UC END# *4FD095010268_4ACB4A5201FC_impl*
//#UC START# *4FD095010268_4ACB4A5201FC_var*
var
 lAlpha: Byte;
 lROP: TIERenderOperation;
 l_CacheTop: Integer;
 l_Painted: Boolean;
//#UC END# *4FD095010268_4ACB4A5201FC_var*
//#UC START# *4FD095D20217_4ACB4A5201FC_impl*
 Result := True;
//#UC END# *4FD095D20217_4ACB4A5201FC_impl*
//#UC START# *4FD095D20217_4ACB4A5201FC_var*
//#UC END# *4FD095D20217_4ACB4A5201FC_var*
//#UC START# *4FD0969703D3_4ACB4A5201FC_impl*
 if (aIndex < 0) or (aIndex > Count-1) then
  Exit;
 l_Src := f_Glyph[aBpp];
 l_Img := TIEBitmap.Create;
 try
  l_Img.PixelFormat := l_Src.PixelFormat;
  l_Img.Width := Width + 2; // добавляем "рамочку"
  l_Img.Height := Height + 2;
  l_Img.FillRect(0, 0, Width + 2, Height + 2, $FF00FF);
  l_Img.CreateAlphaChannel;
  l_Img.AlphaChannel.FillRect(0, 0, Width + 2, Height + 2, 0);
  l_Src.CopyRectTo(l_Img, aIndex*Width, 0, 1, 1, Width, Height);
  l_Src.AlphaChannel.CopyRectTo(l_Img.AlphaChannel, aIndex*Width, 0, 1, 1, Width, Height);
  l_Img.AlphaChannel.SyncFull;
  l_IO := TImageEnIO.Create(nil);
  try
   l_IO.AttachedIEBitmap := l_Img;
   l_IO.SaveToFilePNG(aFileName);
  finally
   l3Free(l_IO);
  end;
 finally
  l_Img.Free;
 end;
//#UC END# *4FD0969703D3_4ACB4A5201FC_impl*
//#UC START# *4FD0969703D3_4ACB4A5201FC_var*
var
 l_Img: TIEBitmap;
 l_Src: TIEBitmap;
 l_IO : TImageEnIO;
//#UC END# *4FD0969703D3_4ACB4A5201FC_var*
//#UC START# *4FD0A70C03C5_4ACB4A5201FC_impl*
 lBMP := TIEBitmap.Create;
 try
  lBMP.Height := Width;
  lBMP.Width := Height;
  lBMP.PixelFormat := ie24RGB;
  lBMP.CreateAlphaChannel;
  for lBpp := Low(TvtPILBpp) to High(TvtPILBpp) do
  begin
   f_Glyph[lBpp].CopyRectTo(lBMP, Index1*Width, 0, 0, 0, Width, Height);
   f_Glyph[lBpp].AlphaChannel.CopyRectTo(lBMP.AlphaChannel, Index1*Width, 0, 0, 0, Width, Height);
   f_Glyph[lBpp].CopyRectTo(f_Glyph[lBpp], Index2*Width, 0, Index1*Width, 0, Width, Height);
   f_Glyph[lBpp].AlphaChannel.CopyRectTo(f_Glyph[lBpp].AlphaChannel, Index2*Width, 0, Index1*Width, 0, Width, Height);
   lBMP.CopyRectTo(f_Glyph[lBpp], 0, 0, Index2*Width, 0, Width, Height);
   lBMP.AlphaChannel.CopyRectTo(f_Glyph[lBpp].AlphaChannel, 0, 0, Index2*Width, 0, Width, Height);
  end;
 finally
  lBMP.Free;
 end;
 Change;
//#UC END# *4FD0A70C03C5_4ACB4A5201FC_impl*
//#UC START# *4FD0A70C03C5_4ACB4A5201FC_var*
var
 lBpp: TvtPILBpp;
 lBMP: TIEBitmap;
//#UC END# *4FD0A70C03C5_4ACB4A5201FC_var*
//#UC START# *5025442B0365_4ACB4A5201FC_impl*
 Result.X := Width;
 Result.Y := Height;
//#UC END# *5025442B0365_4ACB4A5201FC_impl*
//#UC START# *5025442B0365_4ACB4A5201FC_var*
//#UC END# *5025442B0365_4ACB4A5201FC_var*
//#UC START# *53282D3E0350_4ACB4A5201FC_impl*
 Assert(Assigned(aStream));
 if (aIndex < 0) or (aIndex > Count - 1) then
  Exit;
 l_Src := f_Glyph[aBpp];
 l_Img := TIEBitmap.Create;
 try
  l_Img.PixelFormat := l_Src.PixelFormat;
  l_Img.Width := Width;
  l_Img.Height := Height;
  l_Img.FillRect(0, 0, Width, Height, $FF00FF);
  l_Img.CreateAlphaChannel;
  l_Img.AlphaChannel.FillRect(0, 0, Width, Height, 0);
  l_Src.CopyRectTo(l_Img, aIndex * Width, 0, 0, 0, Width, Height);
  l_Src.AlphaChannel.CopyRectTo(l_Img.AlphaChannel, aIndex * Width, 0, 0, 0, Width, Height);
  l_Img.AlphaChannel.SyncFull;
  l_IO := TImageEnIO.Create(nil);
  try
   l_IO.AttachedIEBitmap := l_Img;
   l_IO.SaveToStreamPNG(aStream);
  finally
   l3Free(l_IO);
  end;
 finally
  l_Img.Free;
 end;
//#UC END# *53282D3E0350_4ACB4A5201FC_impl*
//#UC START# *53282D3E0350_4ACB4A5201FC_var*
var
 l_Img: TIEBitmap;
 l_Src: TIEBitmap;
 l_IO: TImageEnIO;
//#UC END# *53282D3E0350_4ACB4A5201FC_var*
