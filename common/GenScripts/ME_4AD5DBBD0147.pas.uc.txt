//#UC START# *479731C50290_4AD5DBBD0147_impl*
 FreeAndNil(f_Messages);
 FreeAndNil(f_Modules);
{$IfNDef DesignTimeLibrary}
 vcmFree(f_FormActivateManager);
{$EndIf DesignTimeLibrary}
 g_MenuManager := nil;
 FreeAndNil(f_AppForms);
// FreeAndNil(f_FormSetFactories);
 FreeAndNil(f_MenuItemClickListeners);
 inherited;
 FreeAndNil(f_Strings);
//#UC END# *479731C50290_4AD5DBBD0147_impl*
//#UC START# *479731C50290_4AD5DBBD0147_var*
//#UC END# *479731C50290_4AD5DBBD0147_var*
//#UC START# *47D1602000C6_4AD5DBBD0147_impl*
 if (g_MenuManager <> nil) then
  raise Exception.Create('MenuManager в приложении может быть только один');
 inherited;
 f_SaveFormZones := vcm_SaveFormZones;
 f_HistoryZones := vcm_HistoryZones;
 g_MenuManager := Self as TvcmBaseMenuManager;
 f_Modules := GetModulesCollectionClass.Create(Self);
 f_AppForms := TvcmFormsCollection.Create(Self);
 f_Strings := TvcmStringCollection.Create(Self);
 f_Messages := TvcmMessagesCollection.Create(Self);
 {$IfNDef DesignTimeLibrary}
 f_FormActivateManager := TvcmFormActivateManager.Create;
 {$EndIf DesignTimeLibrary}
 l_Controller := GetDefController;
 if Assigned(l_Controller) then
  with l_Controller.EntryCommands do
  begin
   ExtTableName := c_vcmTableName;
   StopExtTableName := c_vcmStopTableName;
   OnExtCommand := DoShortCutCommand;
   CreateCommandTable(c_vcmStopTableName, true);
  end;//with l_Controller.EntryCommands
 f_ToolbarPopup := TvcmPopupMenuPrim.Create(Self);
//#UC END# *47D1602000C6_4AD5DBBD0147_impl*
//#UC START# *47D1602000C6_4AD5DBBD0147_var*
var
 l_Controller : TOvcController;
//#UC END# *47D1602000C6_4AD5DBBD0147_var*
//#UC START# *484516C00214_4AD5DBBD0147_impl*
 inherited;
 {$IfDef DesignTimeLibrary}
 (* Выставим сообщениям сортировку, потому, что она для RunTime-а отключена, в
    целях ускорения загрузки *)
 f_Messages.Sorted := True;
 f_Strings.Sorted := true;
 RegisterEntities;
 {$Else  DesignTimeLibrary}
 {$EndIf DesignTimeLibrary}
 ConstStringsToMenuManager;
 l_Controller := GetDefController;
 if Assigned(l_Controller) then
  if Assigned(f_OnInitCommands) then
   f_OnInitCommands(Self, l_Controller.EntryCommands);
 {$IfNDef DesignTimeLibrary}
 //RegisterKeywords;
 // - http://mdp.garant.ru/pages/viewpage.action?pageId=290266465
 afw.Application.ApplyActiveLanguage(Self);
 {$EndIf  DesignTimeLibrary}
//#UC END# *484516C00214_4AD5DBBD0147_impl*
//#UC START# *484516C00214_4AD5DBBD0147_var*
var
 l_Controller : TOvcController;
//#UC END# *484516C00214_4AD5DBBD0147_var*
//#UC START# *4AD5DBBD0147_ext:ParentFileName
w:\common\components\gui\Garant\VCM\implementation\Visual\vcmBaseMenuManager.pas
//#UC END# *4AD5DBBD0147_ext:ParentFileName
//#UC START# *4BB9C06901AE_4AD5DBBD0147_impl*
 if anAlien <> '' then
  for l_Type := Low(l_Type) to High(l_Type) do
  begin
   if ANSIStartsText(cTypes[l_Type], aName) then
   begin
    l_Diff := Length(cTypes[l_Type]) + 1;
    l_Name := Copy(aName, l_Diff + 1, Length(aName) - l_Diff);
    l_Diff := Pos(c_vcmContentSep, l_Name);
    l_SubName := Copy(l_Name, l_Diff + 1, Length(l_Name) - l_Diff);
    l_Name := Copy(l_Name, 1, l_Diff - 1);
    l_Diff := Pos(c_vcmContentSep, l_SubName);
    if (l_Diff > 0) then
    begin
     l_Diff := Length(l_SubName) - Pos(c_vcmContentSep, ReverseString(l_SubName)) + 1;
     l_Prop := Copy(l_SubName, l_Diff + 1, Length(l_SubName) - l_Diff);
     l_SubName := Copy(l_SubName, 1, l_Diff - 1);
    end//l_Diff > 0
    else
    begin
     l_Prop := l_SubName;
     l_SubName := '';
    end;//l_Diff > 0
    DefineObjectProp(l_Type, l_Name, l_SubName, l_Prop, anAlien);
    Exit;
   end;//ANSIStartsText(cTypes[l_Type], aName)
  end;//for l_Type
//#UC END# *4BB9C06901AE_4AD5DBBD0147_impl*
//#UC START# *4BB9C06901AE_4AD5DBBD0147_var*
const
 cTypes : array [TvcmObject] of AnsiString =
  (c_vcmModule, c_vcmEntity,
   c_vcmOperation, c_vcmModuleOperation,
   c_vcmControl,
   c_vcmMessage,
   c_vcmForm,
   c_vcmMenuItem,
   c_vcmUserType,
   c_vcmState,
   c_vcmString,
   c_vcmFormSetFactory);
var
 l_Type : TvcmObject;
 l_Name : AnsiString;
 l_Diff : Integer;
 l_Prop : AnsiString;
 l_SubName : AnsiString;
//#UC END# *4BB9C06901AE_4AD5DBBD0147_var*
//#UC START# *4F884378016A_4AD5DBBD0147_impl*
 inherited Notification(AComponent, Operation);
 if Operation = opRemove then
  if AComponent = SmallImages then
   SmallImages := nil
  else
   if AComponent = LargeImages then
    LargeImages := nil;
//#UC END# *4F884378016A_4AD5DBBD0147_impl*
//#UC START# *4F884378016A_4AD5DBBD0147_var*
//#UC END# *4F884378016A_4AD5DBBD0147_var*
//#UC START# *4FD092040227_4AD5DBBD0147_impl*
{$IfDef DesignTimeLibrary}
 WriteRes;
{$EndIf DesignTimeLibrary}
 inherited;
//#UC END# *4FD092040227_4AD5DBBD0147_impl*
//#UC START# *4FD092040227_4AD5DBBD0147_var*
//#UC END# *4FD092040227_4AD5DBBD0147_var*
//#UC START# *52A1ED12039D_4AD5DBBD0147_impl*
 Result := TvcmRepEntitiesCollection;
//#UC END# *52A1ED12039D_4AD5DBBD0147_impl*
//#UC START# *52A1ED12039D_4AD5DBBD0147_var*
//#UC END# *52A1ED12039D_4AD5DBBD0147_var*
//#UC START# *52A1FA92012A_4AD5DBBD0147_impl*
 if (Entities <> nil) and (Entities.Count > 0) then
 begin
  l_SE := SourceEditor;
  if (l_SE <> nil) then
  begin
   if (l_SE.EditViewCount > 0) then
   begin
    l_V := l_SE.EditViews[0];
    if (l_V <> nil) then
    begin
     l_EP := l_V.Position;
     l_EB := l_V.Block;
     if (l_EP <> nil) and (l_EB <> nil) then
     begin
      l_StartRow := 0;
      l_EP.Move(1, 1);
      while true do
      begin
       l_EB.BeginBlock;
       l_EP.MoveEOL;
       l_EB.EndBlock;
       if AnsiContainsText(l_EB.Text, cVCMStart) then
       begin
        l_StartRow := l_EP.Row;
       end//cVCMStart
       else
       if AnsiStartsText(cImplementation, TrimLeft(l_EB.Text)) then
       begin
        l_EndRow := l_EP.Row;
        if (l_StartRow <> 0) then
        begin
         l_EP.Move(l_StartRow, 1);
         l_EB.BeginBlock;
         l_EP.Move(l_EndRow, 1);
         l_EB.EndBlock;
         l_EB.Delete;
         l_EP.Move(l_StartRow, 1);
         l_EB.BeginBlock;
         l_EP.MoveEOL;
         l_EB.EndBlock;
         l_EP.Move(l_StartRow -1 , 1);
         l_EP.MoveEOL;
        end//l_StartRow <> 0
        else
        begin
         l_EP.Move(l_EP.Row - 1, 1);
        end;
        l_EP.InsertFile(MakeFile);
        l_SE.Show;
        break;
       end;//cImplementation
       if (l_EP.Row >= l_EP.LastRow) then
        break
       else
       if not l_EP.Move(l_EP.Row + 1, 1) then
        break;
      end;
     end;//l_EP <> nil
    end;//l_V <> nil
   end;//l_SE.EditViewCount > 0
  end;//l_SE <> nil
 end;//Entities <> nil
//#UC END# *52A1FA92012A_4AD5DBBD0147_impl*
//#UC START# *52A1FA92012A_4AD5DBBD0147_var*
const
 c_En = 'en';
 c_Mo = 'mo';
 c_Mo1 = 'mo_';
 c_Op = 'op';
 c_Fs = 'fs';
 c_Fs1 = 'fs_';
 c_ST = 'st';

 function CutPrefix(const aPrefix : AnsiString;
                    const aValue : AnsiString;
                    out   theResult : AnsiString) : Boolean;
 begin
  if AnsiStartsText(aPrefix, aValue) then
   theResult := Copy(aValue, Length(aPrefix) + 1, Length(aValue) - Length(aPrefix))
  else
   theResult := aValue;
  Result := aValue <> theResult;
 end;

 function CEN(const aEN : AnsiString) : AnsiString;
 begin
  CutPrefix(c_En, aEN, Result);
 end;

 function CMo(const aEN: AnsiString): AnsiString;
 begin
  if not CutPrefix(c_Mo1, aEN, Result) then
   CutPrefix(c_Mo, aEN, Result);
 end;

 function COP(const aOP: AnsiString): AnsiString;
 begin
  CutPrefix(c_Op, aOP, Result);
 end;

 function CFS(const aFsf : AnsiString) : AnsiString;
 begin
  if not CutPrefix(c_Fs1, aFsf, Result) then
   CutPrefix(c_Fs, aFsf, Result);
 end;

 function CST(const aSt: AnsiString): AnsiString;
 begin
  CutPrefix(c_St, aSt, Result);
 end;

const
  cVCMStart = 'const // start VCM generated section';
  cImplementation = 'implementation';

var
 l_SE : IOTASourceEditor;

 function MakeFile: TFileName;
 var
  l_F : TFileStream;

  procedure WriteLn(const aText: AnsiString = '');
  const
    cEOL = #13#10;
  begin
   if (aText <> '') then
    l_F.Write(aText[1], Length(aText));
   l_F.Write(cEOL[1], Length(cEOL));
  end;

 const
   cVCMEnd = '// end VCM generated section';

 var
  l_EIndex : Integer;
  l_OIndex : Integer;
  l_SIndex : Integer;
  l_Index : Integer;
  l_En : TvcmRepEntitiesCollectionItem;
  l_EnN : AnsiString;
  l_Op : TvcmRepOperationsCollectionItem;
  l_OpN : AnsiString;
  //l_State : TvcmBaseOperationState;
  l_StateN : AnsiString;
  l_Form : TvcmFormsCollectionItem;
  l_Message : TvcmMessagesCollectionItem;
  l_Str : TvcmBaseCollectionItem;
  l_Pref : AnsiString;
 begin
  Result := ChangeFileExt(l_SE.FileName, '.vcm.tmp');
  l_F := TFileStream.Create(Result, fmCreate);
  try
   WriteLn;
   WriteLn(cVCMStart);
   //WriteLn('{$WriteableConst On}');

(*   for l_EIndex := 0 to Pred(Entities.Count) do
   begin
    l_En := TvcmRepEntitiesCollectionItem(Entities.Items[l_EIndex]);
    l_EnN := CEN(l_En.Name);
    if (l_En.Operations <> nil) then
    begin
     for l_OIndex := 0 to Pred(l_En.Operations.Count) do
     begin
      l_Op := TvcmRepOperationsCollectionItem(l_En.Operations.Items[l_OIndex]);
      l_OpN := COP(l_Op.Name);
      if (l_Op.OperationType in vcm_HiddenOperations) then
       continue
       //WriteLn(Format('  xxCxx_op_%s_%s : TvcmOPID = (rEnID : %d; rOpID : %d);', [l_EnN, l_OpN, Succ(l_EIndex), Succ(l_OIndex)]))
      else
       WriteLn(Format('  xxCxx_op_user_%s_%s : TvcmOPID = (rEnID : %d; rOpID : %d);', [l_EnN, l_OpN, Succ(l_EIndex), Succ(l_OIndex)]));
      WriteLn(Format('   // %s -> %s', [l_En.Caption, l_Op.Caption]));
     end;//for l_OIndex
    end;//l_En.Operations <> nil
   end;//for l_EIndex*)

(*   for l_EIndex := 0 to Pred(Modules.Count) do
   begin
    l_En := TvcmRepEntitiesCollectionItem(Modules.Items[l_EIndex]);
    l_EnN := CMo(l_En.Name);
    if (l_En.Operations <> nil) then
    begin
     for l_OIndex := 0 to Pred(l_En.Operations.Count) do
     begin
      l_Op := TvcmRepOperationsCollectionItem(l_En.Operations.Items[l_OIndex]);
      l_OpN := COP(l_Op.Name);
      if (l_Op.OperationType in vcm_HiddenOperations) then
       WriteLn(Format('  mop_%s_%s : TvcmMOPID = (rMoID : %d; rOpID : %d);', [l_EnN, l_OpN, Succ(l_EIndex), Succ(l_OIndex)]))
      else
       WriteLn(Format('  mop_user_%s_%s : TvcmMOPID = (rMoID : %d; rOpID : %d);', [l_EnN, l_OpN, Succ(l_EIndex), Succ(l_OIndex)]));
      WriteLn(Format('   // %s -> %s', [l_En.Caption, l_Op.Caption]));
     end;//for l_OIndex
    end;//l_En.Operations <> nil
   end;//for l_EIndex*)

(*   for l_EIndex := 0 to Pred(Entities.Count) do
   begin
    l_En := TvcmRepEntitiesCollectionItem(Entities.Items[l_EIndex]);
    l_EnN := CEN(l_En.Name);
    if (l_En.Operations <> nil) then
    begin
     for l_OIndex := 0 to Pred(l_En.Operations.Count) do
     begin
      l_Op := TvcmRepOperationsCollectionItem(l_En.Operations.Items[l_OIndex]);
      l_OpN := COP(l_Op.Name);
      for l_SIndex := 0 to Pred(l_Op.States.Count) do
      begin
       l_State := TvcmBaseOperationState(l_Op.States.Items[l_SIndex]);
       l_StateN := CST(l_State.Name);
       if l_StateN = '' then
        l_StateN := IntToStr(l_SIndex);
       if (l_Op.OperationType in vcm_HiddenOperations) then
        WriteLn(Format('  st_%s_%s_%s : TvcmOperationStateIndex = (_rID : %d);', [l_EnN, l_OpN, l_StateN, l_SIndex]))
       else
        WriteLn(Format('  st_user_%s_%s_%s : TvcmOperationStateIndex = (_rID : %d);', [l_EnN, l_OpN, l_StateN, l_SIndex]));
       WriteLn(Format('   // %s -> %s <-> %s', [l_En.Caption, l_Op.Caption, l_State.Caption]));
      end;//for l_SIndex
     end;//for l_OIndex
    end;//l_En.Operations <> nil
   end;//for l_EIndex

   for l_EIndex := 0 to Pred(Modules.Count) do
   begin
    l_En := TvcmRepEntitiesCollectionItem(Modules.Items[l_EIndex]);
    l_EnN := CMo(l_En.Name);
    if (l_En.Operations <> nil) then
    begin
     for l_OIndex := 0 to Pred(l_En.Operations.Count) do
     begin
      l_Op := TvcmRepOperationsCollectionItem(l_En.Operations.Items[l_OIndex]);
      l_OpN := COP(l_Op.Name);
      for l_SIndex := 0 to Pred(l_Op.States.Count) do
      begin
       l_State := TvcmBaseOperationState(l_Op.States.Items[l_SIndex]);
       l_StateN := CST(l_State.Name);
       if l_StateN = '' then
        l_StateN := IntToStr(l_SIndex);
       if (l_Op.OperationType in vcm_HiddenOperations) then
        WriteLn(Format('  mst_%s_%s_%s : TvcmOperationStateIndex = (_rID : %d)', [l_EnN, l_OpN, l_StateN, l_SIndex]))
       else
        WriteLn(Format('  mst_user_%s_%s_%s : TvcmOperationStateIndex = (_rID : %d)', [l_EnN, l_OpN, l_StateN, l_SIndex]));
       WriteLn(Format('   // %s -> %s <-> %s', [l_En.Caption, l_Op.Caption, l_State.Caption]));
      end;//for l_SIndex
     end;//for l_OIndex
    end;//l_En.Operations <> nil
   end;//for l_EIndex*)

   if (AppForms <> nil) and (AppForms.Count > 0) then
   begin
(*    WriteLn('const // - идентификаторы форм');
    for l_EIndex := 0 to Pred(AppForms.Count) do
    begin
     l_Form := AppForms.Items[l_EIndex];
     WriteLn(Format('  fm_%s : TvcmFormID = (rName : ''%s''; _rID: %d);', [l_Form.Name, l_Form.Name, Succ(l_EIndex)]));
     WriteLn(Format('   // %s', [l_Form.Caption]));
    end;//for l_EIndex*)
    
(*   if false then
    for l_EIndex := 0 to Pred(AppForms.Count) do
    // - генерируем пользовательские типы
    begin
     l_Form := AppForms.Items[l_EIndex];
     if (l_Form.UserTypes <> nil) then
      with TvcmRepUserTypesCollection(l_Form.UserTypes) do
       if (Count > 1{0}) and not DeprecatedGenerateFromStdRes then
       begin
        WriteLn(Format('type // Пользовательские типы формы "%s"', [l_Form.Caption]));
        WriteLn(Format('  T%sUT = (', [l_Form.Name]));
        for l_OIndex := 0 to Pred(Count) do
        begin
         with Items[l_OIndex] do
          if (l_OIndex = Pred(Count)) then
           WriteLn(Format('           %s  // %s', [Name, Caption]))
          else
           WriteLn(Format('           %s, // %s', [Name, Caption]));
        end;//for l_OIndex
        WriteLn(Format('  ); //T%sUT', [l_Form.Name]));
       end;//Count > 0
    end;//for l_EIndex*)
   end;//AppForms <> nil

(*   if Assigned(f_FormSetFactories) and (f_FormSetFactories.Count > 0) then
   // генерируем идентификаторы сборок
   begin
    WriteLn('const // - идентификаторы сборок');
    for l_EIndex := 0 to Pred(f_FormSetFactories.Count) do
     with f_FormSetFactories.Items[l_EIndex] do
     begin
      WriteLn(Format('  %s%s : _TvcmFormSetID = (rName : ''%s'');',
       [c_Fs1, CFS(FactoryId.rName), FactoryId.rName]));
      WriteLn(Format('   // Сборка форм "%s"', [Caption]));
     end;
   end;//Assigned(f_FormSetFactories)*)

   if (Messages <> nil) and (Messages.Count > 0) then
   begin
    //WriteLn('const // - идентификаторы сообщений');
    for l_EIndex := 0 to Pred(Messages.Count) do
    begin
     l_Message := TvcmMessagesCollectionItem(Messages.Items[l_EIndex]);
     Case l_Message.DlgType of
      mtWarning:
       l_Pref := 'war';
      mtInformation:
       l_Pref := 'inf';
      mtError:
       l_Pref := 'err';
      mtCustom :
       l_Pref := 'msg';
      mtConfirmation :
       l_Pref := 'qr';
      else
       l_Pref := 'msg';
     end;//Case l_Message.DlgType
     WriteLn(Format('  %s_%s : TvcmMessageID = (rM : %d);', [l_Pref, l_Message.Name, l_EIndex]));
     WriteLn(Format('   // "%s"', [AnsiReplaceStr(
                                   AnsiReplaceStr(
                                                  l_Message.Caption,
                                                  #13, ' '),
                                                  #10, ' ')]));
    end;//for l_EIndex
   end;//Messages <> nil

   if (Strings <> nil) and (Strings.Count > 0) then
   begin
    WriteLn('const // - идентификаторы строковых констант');
    for l_EIndex := 0 to Pred(Strings.Count) do
    begin
     l_Str := Strings.Items[l_EIndex];
     WriteLn(Format('  str_%s : TvcmStringID = (rS : %d);', [l_Str.Name, l_EIndex]));
     WriteLn(Copy(Format('   // "%s"', [AnsiReplaceStr(
                                   AnsiReplaceStr(
                                                  l_Str.Caption,
                                                  #13, ' '),
                                                       #10, ' ')]),
                  1,
                  1020));
    end;//for l_EIndex
   end;//Strings <> nil

   WriteLn(cVCMEnd);
  finally
   FreeAndNil(l_F);
  end;//try..finally
 end;
 
var
 l_V : IOTAEditView;
 l_EB : IOTAEditBlock;
 l_StartRow : Integer;
 l_EndRow : Integer;
 l_EP : IOTAEditPosition;
//#UC END# *52A1FA92012A_4AD5DBBD0147_var*
//#UC START# *52A1FAC302BD_4AD5DBBD0147_impl*
 l_MS := vcmGetTAModules;
 if (l_MS <> nil) then
 begin
  for l_MIndex := 0 to Pred(l_MS.ModuleCount) do
  begin
   l_M := l_MS.Modules[l_MIndex];
   for l_EIndex := 0 to Pred(l_M.ModuleFileCount) do
   begin
    l_E := l_M.ModuleFileEditors[l_EIndex];
    if Supports(l_E, IOTAFormEditor, l_FE) then
     try
      l_C := l_FE.FindComponent('ENTITIES');
      if Supports(l_C, IOTAComponent, l_NC) then
       try
        l_RC := l_NC.GetComponent;
        if (l_RC is TvcmCustomEntities) then
         TvcmCustomEntities(l_RC).RegisterInRep;
       finally
        l_NC := nil;
       end;//try..finally
      l_C := l_FE.FindComponent('MODULEDEF');
      if Supports(l_C, IOTAComponent, l_NC) then
       try
        l_RC := l_NC.GetComponent;
        if (l_RC is TvcmCustomModuleDef) then
         TvcmCustomModuleDef(l_RC).RegisterInRep;
       finally
        l_NC := nil;
       end;//try..finally
     finally
      l_FE := nil;
     end;//try..finally
   end;//for l_EIndex
  end;//for l_MIndex
 end;//l_MS <> nil
//#UC END# *52A1FAC302BD_4AD5DBBD0147_impl*
//#UC START# *52A1FAC302BD_4AD5DBBD0147_var*
var
 l_MS : IOTAModuleServices;
 l_M : IOTAModule;
 l_E : IOTAEditor;
 l_FE : IOTAFormEditor;
 l_C : IOTAComponent;
 l_NC : INTAComponent;
 l_RC : TComponent;
 l_MIndex : Integer;
 l_EIndex : Integer;
//#UC END# *52A1FAC302BD_4AD5DBBD0147_var*
//#UC START# *52A1FAE000ED_4AD5DBBD0147_impl*
 Result := false;
{$IfNDef DesignTimeLibrary}
 l_CustomForm := Screen.ActiveForm;
 if (l_CustomForm <> nil) then
  if not (l_CustomForm is TvcmEntityForm) and
     (fsModal in l_CustomForm.FormState) then
   Exit;  
 if (vcmDispatcher <> nil) and g_ShortcutProcessingEnabled then
 begin
  with vcmCommandInfo(aCommand) do
   if rIsModule then
   begin
    if l3BQueryInterface(vcmDispatcher.ActiveEntity, IvcmEntityForm, l_EntityForm) then
     try
      if not l_EntityForm.IsModalForm then
      begin
       l_MOp.rMoID := TvcmControlID(rItemID);
       l_MOp.rOpID := TvcmControlID(rOperationID);
       // Вызов операции
       Result := vcmDispatcher.ModuleOperation(l_MOp);
       if Result then
        // Нотификация о вызове горячей клавиши
        OperationExecuteNotify(vcm_octShortCut,
                               TvcmBaseOperationsCollectionItem(
                     TvcmModulesCollectionItem(
                      f_Modules.FindItemByID(l_MOp.rMoID)).
                       Operations.FindItemByID(l_MOp.rOpID)).OperationDef);
      end;//not l_EntityForm.IsModalForm
     finally
      l_EntityForm := nil;
     end;//try..finally
   end//rIsModule
   else
   begin
    l_Op.rEnID := TvcmControlID(rItemID);
    l_Op.rOpID := TvcmControlID(rOperationID);
    // Вызов операции
    Result := vcmDispatcher.EntityOperation(l_Op, vcmParams);
    if Result then
     // Нотификация о вызове горячей клавиши
     OperationExecuteNotify(vcm_octShortCut,
                            TvcmBaseOperationsCollectionItem(
                TvcmBaseEntitiesCollectionItem(
                 Entities.FindItemByID(l_Op.rEnID)).
                  Operations.FindItemByID(l_Op.rOpID)).OperationDef);
   end;//rIsModule
 end;//vcmDispatcher <> nil
{$EndIf  DesignTimeLibrary}
//#UC END# *52A1FAE000ED_4AD5DBBD0147_impl*
//#UC START# *52A1FAE000ED_4AD5DBBD0147_var*
var
 l_Params : IvcmParams;
 l_EntityForm : IvcmEntityForm;
 l_Op : TvcmOPID;
 l_MOp : TvcmMOPID;
 l_CustomForm : TCustomForm;
//#UC END# *52A1FAE000ED_4AD5DBBD0147_var*
//#UC START# *52A1FB7300B9_4AD5DBBD0147_impl*
 Result := TvcmModulesCollection;
//#UC END# *52A1FB7300B9_4AD5DBBD0147_impl*
//#UC START# *52A1FB7300B9_4AD5DBBD0147_var*
//#UC END# *52A1FB7300B9_4AD5DBBD0147_var*
//#UC START# *52A1FB9A0265_4AD5DBBD0147_impl*
 if Assigned(f_OnOperationExecuteNotify) then
  f_OnOperationExecuteNotify(aType, anOperation);
//#UC END# *52A1FB9A0265_4AD5DBBD0147_impl*
//#UC START# *52A1FB9A0265_4AD5DBBD0147_var*
//#UC END# *52A1FB9A0265_4AD5DBBD0147_var*
//#UC START# *52A1FBE502A6_4AD5DBBD0147_impl*
{$IfNDef DesignTimeLibrary}
{$IFNDEF Archi}
 if not f_KeywordsRegistered then
 begin
  f_KeywordsRegistered := true;
  for l_I := 0 to Pred(Entities.Count) do
  begin
   l_En := Entities.Items[l_I] as TvcmBaseEntitiesCollectionItem;
   for l_J := 0 to Pred(l_En.Operations.Count) do
   begin
    //TkwEntityOperation.Register(l_En, l_En.Operations.Items[l_J] as TvcmBaseOperationsCollectionItem);
    TvcmOperationsManager.Instance.Register(l_En, l_En.Operations.Items[l_J] as TvcmBaseOperationsCollectionItem);
   end;
  end;//for l_I
 end;//not f_KeywordsRegistered
{$ENDIF Archi}
{$EndIf DesignTimeLibrary}
//#UC END# *52A1FBE502A6_4AD5DBBD0147_impl*
//#UC START# *52A1FBE502A6_4AD5DBBD0147_var*
var
 l_I : Integer;
 l_J : Integer;
 l_En : TvcmBaseEntitiesCollectionItem;
//#UC END# *52A1FBE502A6_4AD5DBBD0147_var*
//#UC START# *52A1FC0C0333_4AD5DBBD0147_impl*
//#UC END# *52A1FC0C0333_4AD5DBBD0147_impl*
//#UC START# *52A1FC0C0333_4AD5DBBD0147_var*
//#UC END# *52A1FC0C0333_4AD5DBBD0147_var*
//#UC START# *52A1FC3D0231_4AD5DBBD0147_impl*
 RegisterKeywords;
//#UC END# *52A1FC3D0231_4AD5DBBD0147_impl*
//#UC START# *52A1FC3D0231_4AD5DBBD0147_var*
//#UC END# *52A1FC3D0231_4AD5DBBD0147_var*
//#UC START# *52A1FC5500AC_4AD5DBBD0147_impl*
//#UC END# *52A1FC5500AC_4AD5DBBD0147_impl*
//#UC START# *52A1FC5500AC_4AD5DBBD0147_var*
//#UC END# *52A1FC5500AC_4AD5DBBD0147_var*
//#UC START# *52A1FC79004A_4AD5DBBD0147_impl*
//#UC END# *52A1FC79004A_4AD5DBBD0147_impl*
//#UC START# *52A1FC79004A_4AD5DBBD0147_var*
//#UC END# *52A1FC79004A_4AD5DBBD0147_var*
//#UC START# *52A1FCA20227_4AD5DBBD0147_impl*
 Result := nil;
//#UC END# *52A1FCA20227_4AD5DBBD0147_impl*
//#UC START# *52A1FCA20227_4AD5DBBD0147_var*
//#UC END# *52A1FCA20227_4AD5DBBD0147_var*
//#UC START# *52A1FCB70149_4AD5DBBD0147_impl*
 if (anID < 0) then
  l_CEn := Modules as TvcmRepEntitiesCollection
 else
 if (anID > 0) then
  l_CEn := Entities as TvcmRepEntitiesCollection
 else
 begin
  l_CEn := nil;
  Assert(False);
 end;//anID > 0
 {$IfDef DesignTimeLibrary}
 Result := l_CEn.FindItemByID(Abs(anID)) as TvcmRepEntitiesCollectionItem;
 {$Else  DesignTimeLibrary}
 Result := l_CEn.Items[Abs(anID) - 1] as TvcmRepEntitiesCollectionItem;
 {$EndIf DesignTimeLibrary}
//#UC END# *52A1FCB70149_4AD5DBBD0147_impl*
//#UC START# *52A1FCB70149_4AD5DBBD0147_var*
var
 l_CEn : TvcmRepEntitiesCollection;
//#UC END# *52A1FCB70149_4AD5DBBD0147_var*
//#UC START# *52A1FCDB0027_4AD5DBBD0147_impl*
 if aModule then
  l_CEn := Modules as TvcmRepEntitiesCollection
 else
  l_CEn := Entities as TvcmRepEntitiesCollection;
 Result := l_CEn.FindItemByName(aName) as TvcmRepEntitiesCollectionItem;
 {$If Defined(nsTest) and not Defined(InsiderTest)}
 if (Result = nil) then
 begin
  Result := TvcmRepEntitiesCollectionItem(l_CEn.Add);
  Result.Name := aName;
 end;//Result = nil
 {$IfEnd}
//#UC END# *52A1FCDB0027_4AD5DBBD0147_impl*
//#UC START# *52A1FCDB0027_4AD5DBBD0147_var*
var
 l_CEn : TvcmRepEntitiesCollection;
//#UC END# *52A1FCDB0027_4AD5DBBD0147_var*
//#UC START# *52A1FD0300F5_4AD5DBBD0147_impl*
 if (Entities <> nil) and (Modules <> nil) and
    (aControl <> nil) and (anOp <> nil) and
    (anUFHolder <> nil) and (anOpHolder <> nil) and
    (aControl.Name <> '') and (anOp.Name <> '') then
 begin
  if Supports(aControl, IvcmEntityDef, l_En) then
   try
    l_CEn := Entities as TvcmRepEntitiesCollection;
   finally
    l_En := nil;
   end//try..finally
  else
  if Supports(aControl, IvcmModuleDef, l_Mo) then
   try
    l_CEn := Modules as TvcmRepEntitiesCollection;
   finally
    l_Mo := nil;
   end//try..finally
  else
   l_CEn := nil;
  if (l_CEn <> nil) then
  begin
    {$IfDef DesignTimeLibrary}
    if (aControl.ID = 0) then
     l_IEn := l_CEn.FindItemByName(aControl.Name) as TvcmRepEntitiesCollectionItem
    else 
     l_IEn := l_CEn.FindItemByID(aControl.ID) as TvcmRepEntitiesCollectionItem;
    {$Else  DesignTimeLibrary}
    l_IEn := l_CEn.Items[aControl.ID - 1] as TvcmRepEntitiesCollectionItem;
    {$EndIf DesignTimeLibrary}
    if (l_IEn = nil) then
    begin
     l_IEn := TvcmRepEntitiesCollectionItem(l_CEn.Add);
     l_IEn.Name := aControl.Name;
     l_IEn.Caption := vcmStr(aControl.Caption);
    end;//l_IEn = nil
    if (anUFHolder is TvcmEntitiesCollectionItem) then
     l_IEn.AddHolder(anUFHolder as TvcmEntitiesCollectionItem);
    {$IfDef DesignTimeLibrary}
    l_IOp := l_IEn.Operations.FindItemByID(anOp.ID) as TvcmRepOperationsCollectionItem;
    {$Else  DesignTimeLibrary}
    l_IOp := l_IEn.Operations.Items[anOp.ID - 1] as TvcmRepOperationsCollectionItem;
    {$EndIf DesignTimeLibrary}
    if (l_IOp = nil) then
    begin
     l_IOp := TvcmRepOperationsCollectionItem(l_IEn.Operations.Add);
     with l_IOp do
     begin
      Name := anOp.Name;
      Caption := vcmStr(anOp.Caption);
      GroupID := anOp.GroupID;
      OperationType := anOp.OperationType;
      Hint := vcmStr(anOp.Hint);
      LongHint := vcmStr(anOp.LongHint);
      ShortCut := anOp.ShortCut;
      ImageIndex := anOp.ImageIndex;
      //AutoLock := anOp.AutoLock;
      ExcludeUserTypes := anOp.ExcludeUserTypes;
      //OnTest := anOp.OnTest;
      //OnExecute := anOp.OnExecute;
      //OnContextTest := anOp.OnContextTest;
      //OnContextExecute := anOp.OnContextExecute;
      Options := anOp.Options;
     end;//with l_IOp
    end;//l_IOp = nil
    Assert(anOpHolder is TvcmOperationsCollectionItem);
    l_IOp.AddHolder(anOpHolder as TvcmOperationsCollectionItem);
    if (anUFHolder is TPersistent) then
    begin
     l_Form := afw.GetParentForm(TPersistent(anUFHolder));
     if (l_Form is TvcmEntityForm) then
      {$IfDef DesignTimeLibrary}
      AppForms.AddForm(TvcmEntityForm(l_Form));
      {$Else  DesignTimeLibrary}
      AppForms.AddForm(RvcmEntityForm(TvcmEntityForm(l_Form).ClassType));
      {$EndIf DesignTimeLibrary}
    end;//anUFHolder is TPersistent
    {$IfDef DesignTimeLibrary}
    l_M := Module;
    if (l_M <> nil) then
     l_M.MarkModified;
    {$EndIf DesignTimeLibrary} 
  end;//l_CEn <> nil
 end;//aControl <> nil
//#UC END# *52A1FD0300F5_4AD5DBBD0147_impl*
//#UC START# *52A1FD0300F5_4AD5DBBD0147_var*
var
 l_Mo : IvcmModuleDef;
 l_En : IvcmEntityDef;
 l_CEn : TvcmRepEntitiesCollection;
 l_IEn : TvcmRepEntitiesCollectionItem;
 l_IOp : TvcmRepOperationsCollectionItem;
 {$IfDef DesignTimeLibrary}
 l_M : IOTAModule;
 {$EndIf DesignTimeLibrary}
 l_Form : TCustomForm;
//#UC END# *52A1FD0300F5_4AD5DBBD0147_var*
//#UC START# *52A1FD28019A_4AD5DBBD0147_impl*
{$IfNDef DesignTimeLibrary}
 f_FormActivateManager.AddForm(aForm);
{$EndIf DesignTimeLibrary}
//#UC END# *52A1FD28019A_4AD5DBBD0147_impl*
//#UC START# *52A1FD28019A_4AD5DBBD0147_var*
//#UC END# *52A1FD28019A_4AD5DBBD0147_var*
//#UC START# *52A1FD3B0252_4AD5DBBD0147_impl*
{$IfNDef DesignTimeLibrary}
 f_FormActivateManager.RemoveForm(aForm);
{$EndIf DesignTimeLibrary}
{$IfDef DesignTimeLibrary}
 if (AppForms <> nil) then
 begin
  if (aForm <> nil) then
   AppForms.RemoveForm(aForm.VCLWinControl as TvcmEntityForm);
 end;//AppForms <> nil
{$EndIf DesignTimeLibrary}
//#UC END# *52A1FD3B0252_4AD5DBBD0147_impl*
//#UC START# *52A1FD3B0252_4AD5DBBD0147_var*
//#UC END# *52A1FD3B0252_4AD5DBBD0147_var*
//#UC START# *52A1FD4C002A_4AD5DBBD0147_impl*
//#UC END# *52A1FD4C002A_4AD5DBBD0147_impl*
//#UC START# *52A1FD4C002A_4AD5DBBD0147_var*
//#UC END# *52A1FD4C002A_4AD5DBBD0147_var*
//#UC START# *52A1FD5E02DC_4AD5DBBD0147_impl*
 with vcmDispatcher do
  with FormDispatcher do
  begin
   for l_Index := 0 to MainFormsCount-1 do
   begin
    if Supports(MainForm[l_Index], IvcmEntityForm, l_Form) then
     ReloadToolbars(l_Form);
   end;

   for l_Index := 0 to EntitiesCount-1 do
   begin
    if Supports(Entity[l_Index], IvcmEntityForm, l_Form) then
     ReloadToolbars(l_Form);
   end;//for l_Index

   for l_Index := 0 to MainFormsCount-1 do
   begin
    if Supports(MainForm[l_Index], IvcmEntityForm, l_Form) then
     if (l_Form.VCLWinControl is TvcmEntityForm) then
      PostBuild(l_Form.VCLWinControl as TvcmEntityForm);
   end;//for l_Index

   for l_Index := 0 to EntitiesCount-1 do
   begin
    if Supports(Entity[l_Index], IvcmEntityForm, l_Form) then
     if (l_Form.VCLWinControl is TvcmEntityForm) then
      PostBuild(l_Form.VCLWinControl as TvcmEntityForm);
   end;//for l_Index
  end;//with FormDispatcher
//#UC END# *52A1FD5E02DC_4AD5DBBD0147_impl*
//#UC START# *52A1FD5E02DC_4AD5DBBD0147_var*
var
 l_Index: Integer;
 l_Form: IvcmEntityForm;
//#UC END# *52A1FD5E02DC_4AD5DBBD0147_var*
//#UC START# *52A1FD7301A8_4AD5DBBD0147_impl*
//#UC END# *52A1FD7301A8_4AD5DBBD0147_impl*
//#UC START# *52A1FD7301A8_4AD5DBBD0147_var*
//#UC END# *52A1FD7301A8_4AD5DBBD0147_var*
//#UC START# *52A1FD960246_4AD5DBBD0147_impl*
 {$IfDef vcmUseSettings}
 l_ShortCut := 0;
 l_List := TShortCutList.Create;
 try

  for l_Index := 0 to g_MenuManager.Entities.Count - 1 do
   with g_MenuManager.Entities.Items[l_Index] as TvcmBaseEntitiesCollectionItem do
   begin
    l_Name := Name;
    for l_OpIndex := 0 to Operations.Count - 1 do
     with Operations.Items[l_OpIndex] as TvcmBaseOperationsCollectionItem do
     begin
      l_OpName := Name;
      if g_FirstShortCutLoad then
       StoreDesignTimeShortcuts;
      if aResetToDefault then
       vcmCleanShortcut(l_Name, l_OpName);
      if vcmLoadShortcut(l_Name, l_OpName, l_Shortcut, l_SecShort) then
       l_List.Text := vcmStr(l_SecShort)
      else
      begin
       l_Shortcut := SaveShortcut;
       l_List.Text := SaveSecondaryShortcuts;
      end;//vcmLoadShortcut..
      l_FreeShortcuts(TShortcut(l_ShortCut), l_List);
      ReplaceShortcuts(TShortcut(l_ShortCut), l_List);
     end;//with Operations.Items[l_OpIndex] as TvcmBaseOperationsCollectionItem
   end;//with g_MenuManager.Entities.Items[l_Index] as TvcmBaseEntitiesCollectionItem

  for l_Index := 0 to g_MenuManager.Modules.Count - 1 do
   with g_MenuManager.Modules.Items[l_Index] as TvcmModulesCollectionItem do
   begin
    l_Name := Name;
    for l_OpIndex := 0 to Operations.Count - 1 do
     with Operations.Items[l_OpIndex] as TvcmBaseOperationsCollectionItem do
     begin
      l_OpName := Name;
      if g_FirstShortCutLoad then
       StoreDesignTimeShortcuts;
      if aResetToDefault then
       vcmCleanShortcut(l_Name, l_OpName);
      if vcmLoadShortCut(l_Name, l_OpName, l_Shortcut, l_SecShort) then
       l_List.Text := vcmStr(l_SecShort)
      else
      begin
       l_Shortcut := SaveShortcut;
       l_List.Text := SaveSecondaryShortcuts;
      end;//vcmLoadShortCut..
      l_FreeShortcuts(TShortcut(l_ShortCut), l_List);
      ReplaceShortcuts(TShortcut(l_ShortCut), l_List);
     end;//with Operations.Items[l_OpIndex] as TvcmBaseOperationsCollectionItem
   end;//g_MenuManager.Modules.Items[l_Index] as TvcmModulesCollectionItem

 finally
  l_List.Free;
  g_FirstShortCutLoad := False;
 end;
 {$EndIf vcmUseSettings}
//#UC END# *52A1FD960246_4AD5DBBD0147_impl*
//#UC START# *52A1FD960246_4AD5DBBD0147_var*
var
 l_Index : Integer;
 l_OpIndex : Integer;
 l_Name : AnsiString;
 l_OpName : AnsiString;
 l_Shortcut : Cardinal;
 l_SecShort : Il3CString;
 l_List : TShortCutList;

 procedure l_FreeShortcut(aShortCut: TShortCut);
 var
  i : Integer;
  l_Key : Word;
  l_Shift : TShiftState;
  l_ByteShift : Byte;
  l_CommandID : Word;
  l_Controller : TOvcController;
 begin//l_FreeShortcut
  l_CommandID := 0;
  if aShortCut <> 0 then
  begin
   ShortCutToKey(aShortCut, l_Key, l_Shift);
   l_ByteShift := vcmByteShift(l_Shift);
   l_CommandID := 0;
   l_Controller := GetDefController;
   if Assigned(l_Controller) then
    with l_Controller.EntryCommands do
     if GetCommandTableIndex(c_vcmTableName) >= 0 then
      with l_Controller.EntryCommands.GetCommandTable(c_vcmTableName) do
       for i := 0 to Count - 1 do
        with Commands[i] do
         if (Key1 = l_Key) and (SS1 = l_ByteShift) then
         begin
          l_CommandID := Cmd;
          Break;
         end;//(Key1 = l_Key) and (SS1 = l_ByteShift)
  end;
  if (l_CommandID <> 0) then
   with vcmCommandInfo(l_CommandID) do
    if rIsModule then
     with g_MenuManager.GetOperationableObjectByID(-rItemID) as TvcmModulesCollectionItem do
      with Operations.FindItemByID(rOperationID) as TvcmRepOperationsCollectionItem do
       RemoveShortCut(aShortCut)
    else
     with g_MenuManager.GetOperationableObjectByID(rItemID) as TvcmBaseEntitiesCollectionItem do
      with Operations.FindItemByID(rOperationID) as TvcmRepOperationsCollectionItem do
       RemoveShortCut(aShortCut);
 end;//l_FreeShortcut

 procedure l_FreeShortcuts(aShortCut: TShortCut; aSecondaryShortCuts: TShortCutList);
 var
  i : Integer;
 begin//l_FreeShortcuts
  l_FreeShortcut(aShortCut);
  if Assigned(aSecondaryShortCuts) then
   for i := 0 to aSecondaryShortCuts.Count - 1 do
    l_FreeShortcut(aSecondaryShortCuts.ShortCuts[i]);
 end;//l_FreeShortcuts
//#UC END# *52A1FD960246_4AD5DBBD0147_var*
//#UC START# *52A1FDAE0139_4AD5DBBD0147_impl*
 Result := False;
//#UC END# *52A1FDAE0139_4AD5DBBD0147_impl*
//#UC START# *52A1FDAE0139_4AD5DBBD0147_var*
//#UC END# *52A1FDAE0139_4AD5DBBD0147_var*
//#UC START# *52A1FDC20289_4AD5DBBD0147_impl*
{$IfNDef DesignTimeLibrary}
 f_FormActivateManager.AddModule(aModule);
{$EndIf DesignTimeLibrary}
//#UC END# *52A1FDC20289_4AD5DBBD0147_impl*
//#UC START# *52A1FDC20289_4AD5DBBD0147_var*
//#UC END# *52A1FDC20289_4AD5DBBD0147_var*
//#UC START# *52A1FDD7006C_4AD5DBBD0147_impl*
//#UC END# *52A1FDD7006C_4AD5DBBD0147_impl*
//#UC START# *52A1FDD7006C_4AD5DBBD0147_var*
//#UC END# *52A1FDD7006C_4AD5DBBD0147_var*
//#UC START# *52A1FE020318_4AD5DBBD0147_impl*
//#UC END# *52A1FE020318_4AD5DBBD0147_impl*
//#UC START# *52A1FE020318_4AD5DBBD0147_var*
//#UC END# *52A1FE020318_4AD5DBBD0147_var*
//#UC START# *52A1FE1602AA_4AD5DBBD0147_impl*
//#UC END# *52A1FE1602AA_4AD5DBBD0147_impl*
//#UC START# *52A1FE1602AA_4AD5DBBD0147_var*
//#UC END# *52A1FE1602AA_4AD5DBBD0147_var*
//#UC START# *52A1FE2E0059_4AD5DBBD0147_impl*
 Result := False;
//#UC END# *52A1FE2E0059_4AD5DBBD0147_impl*
//#UC START# *52A1FE2E0059_4AD5DBBD0147_var*
//#UC END# *52A1FE2E0059_4AD5DBBD0147_var*
//#UC START# *52A1FE4B0329_4AD5DBBD0147_impl*
//#UC END# *52A1FE4B0329_4AD5DBBD0147_impl*
//#UC START# *52A1FE4B0329_4AD5DBBD0147_var*
//#UC END# *52A1FE4B0329_4AD5DBBD0147_var*
//#UC START# *52A1FE58028C_4AD5DBBD0147_impl*
//#UC END# *52A1FE58028C_4AD5DBBD0147_impl*
//#UC START# *52A1FE58028C_4AD5DBBD0147_var*
//#UC END# *52A1FE58028C_4AD5DBBD0147_var*
//#UC START# *52A1FE730278_4AD5DBBD0147_impl*
 Result := False;
//#UC END# *52A1FE730278_4AD5DBBD0147_impl*
//#UC START# *52A1FE730278_4AD5DBBD0147_var*
//#UC END# *52A1FE730278_4AD5DBBD0147_var*
//#UC START# *52A1FEC30321_4AD5DBBD0147_impl*
 NeedFreeForm := False;                 
 Result := nil;
 if aFormClass.InheritsFrom(TvcmMainForm) then
  Result := (g_Dispatcher.FormDispatcher.MainForm[0].VCLWinControl as TvcmEntityForm)
 else
  with g_Dispatcher do
   for l_Index := 0 to Pred(EntitiesCount) do
    with Entity[l_Index].AsForm do
     if (aUserType = vcm_utAny) or (UserType = aUserType) and
        VCLWinControl.InheritsFrom(aFormClass) then
     begin
      Result := VCLWinControl as TvcmEntityForm;
      break;
     end;//UserType = l_UserType.ID..

 if (Result = nil) then
 begin
  if (aUserType = vcm_utAny) then
   aUserType := 0;
  Result := RvcmEntityForm(aFormClass).Make(vcmMakeParams,
                                            vcm_ztForToolbarsInfo,
                                            aUserType).VCLWinControl as TvcmEntityForm;
  NeedFreeForm := true;
 end;//l_Form = nil
//#UC END# *52A1FEC30321_4AD5DBBD0147_impl*
//#UC START# *52A1FEC30321_4AD5DBBD0147_var*
var
 l_Index : Integer;
//#UC END# *52A1FEC30321_4AD5DBBD0147_var*
//#UC START# *52A1FF0902CE_4AD5DBBD0147_impl*
 Result := nil;
 l_Item := nil;
 Case anObject of
  vcm_objModule :
   Result := Modules.FindItemByName(anObjectName);
  vcm_objEntity :
   Result := Entities.FindItemByName(anObjectName);
  vcm_objEntityOperation :
   l_Item := Entities.FindItemByName(anObjectName) as TvcmBaseEntitiesCollectionItem;
  vcm_objModuleOperation :
   l_Item := Modules.FindItemByName(anObjectName) as TvcmBaseEntitiesCollectionItem;
  vcm_objControl:
  begin
   if ForceCreate then
    l_Form := AppForms.CheckItemByName(anObjectName) as TvcmFormsCollectionItem
   else
    l_Form := AppForms.FindItemByName(anObjectName) as TvcmFormsCollectionItem;
   if (l_Form <> nil) then
   begin
    if ForceCreate then
     Result := l_Form.Components.CheckItemByName(aSubName)
    else 
     Result := l_Form.Components.FindItemByName(aSubName);
   end;//l_Form <> nil
  end;//vcm_objControl
  vcm_objMessage :
   Result := Messages.FindItemByName(anObjectName);
  vcm_objForm :
   Result := AppForms.FindItemByName(anObjectName) as TvcmFormsCollectionItem;
  vcm_objFormSetFactory :
  begin
   Result := nil;
   Assert(false);
//   Result := FormSetFactories.FindItemByName(anObjectName) as TvcmFormSetFactoriesCollectionItem;
  end;//vcm_objFormSetFactory
  vcm_objUserType :
  begin
   Result := nil;
(*   l_Form := AppForms.FindItemByName(anObjectName) as TvcmFormsCollectionItem;
   if (l_Form <> nil) then
    Result := l_Form.UserTypes.FindItemByName(aSubName);*)
  end;//vcm_objUserType
  vcm_ObjOperationState :
  begin
   {$IfDef vcmNeedL3}
   Result := ObjectByType(vcm_objEntityOperation, anObjectName, ev_psPrefix(aSubName, c_vcmContentSep));
   if (Result <> nil) then
    Result := (Result as TvcmBaseOperationsCollectionItem).States.FindItemByName(ev_psSuffix(aSubName, c_vcmContentSep));
   {$Else   vcmNeedL3}
   Assert(false);
   {$EndIf  vcmNeedL3}
  end;//vcm_ObjOperationState
  vcm_ObjStrings: Result := Strings.FindItemByName(anObjectName);
 end;//Case anObject
 if (Result = nil) and (l_Item <> nil) then
  Result := l_Item.Operations.FindItemByName(aSubName);
//#UC END# *52A1FF0902CE_4AD5DBBD0147_impl*
//#UC START# *52A1FF0902CE_4AD5DBBD0147_var*
var
 l_Item : TvcmBaseEntitiesCollectionItem;
 l_Form : TvcmFormsCollectionItem;
//#UC END# *52A1FF0902CE_4AD5DBBD0147_var*
//#UC START# *52A1FF9A0004_4AD5DBBD0147_impl*
 l_Object := ObjectByType(anObject, anObjectName, aSubName, true);
 if (l_Object <> nil) then
  if (GetPropInfo(l_Object, aProp) <> nil) then
   SetStrProp(l_Object, aProp, aValue);
//#UC END# *52A1FF9A0004_4AD5DBBD0147_impl*
//#UC START# *52A1FF9A0004_4AD5DBBD0147_var*
var
 l_Object : TObject;
//#UC END# *52A1FF9A0004_4AD5DBBD0147_var*
//#UC START# *52A2005103CF_4AD5DBBD0147_impl*
 Case anOp.rKind of
  vcm_okModule :
   if (anOp.rMID.rMoID > 0) then
    Result := g_Dispatcher.GetModuleByID(anOp.rMID.rMoID).GetOperationByID(anOp.rMID.rOpID)
   else
    Result := nil; 
  vcm_okEntity :
   with TvcmBaseEntitiesCollectionItem(Entities.FindItemByID(anOp.rID.rEnID)) do
    Result := TvcmBaseOperationsCollectionItem(Operations.FindItemByID(anOp.rID.rOpID)).OperationDef;
  else
   Result := nil;
 end;//Case anOp.rKind
//#UC END# *52A2005103CF_4AD5DBBD0147_impl*
//#UC START# *52A2005103CF_4AD5DBBD0147_var*
//#UC END# *52A2005103CF_4AD5DBBD0147_var*
//#UC START# *52A20071016B_4AD5DBBD0147_impl*
 Case anOp.rKind of
  vcm_okModule :
   with g_Dispatcher.GetModuleByID(anOp.rMID.rMoID) do
    Result := TvcmModuleAction.Make(ModuleDef, GetOperationByID(anOp.rMID.rOpID));
  vcm_okEntity :
   with TvcmBaseEntitiesCollectionItem(Entities.FindItemByID(anOp.rID.rEnID)) do
    Result := TvcmEntityAction.Make(EntityDef, TvcmBaseOperationsCollectionItem(Operations.FindItemByID(anOp.rID.rOpID)).OperationDef);
  else
   Result := aDefaultAction;
 end;//Case anOp.rKind
//#UC END# *52A20071016B_4AD5DBBD0147_impl*
//#UC START# *52A20071016B_4AD5DBBD0147_var*
//#UC END# *52A20071016B_4AD5DBBD0147_var*
//#UC START# *52A2008D00DA_4AD5DBBD0147_impl*
 Result := false;
//#UC END# *52A2008D00DA_4AD5DBBD0147_impl*
//#UC START# *52A2008D00DA_4AD5DBBD0147_var*
//#UC END# *52A2008D00DA_4AD5DBBD0147_var*
//#UC START# *52A200A001C8_4AD5DBBD0147_impl*
//#UC END# *52A200A001C8_4AD5DBBD0147_impl*
//#UC START# *52A200A001C8_4AD5DBBD0147_var*
//#UC END# *52A200A001C8_4AD5DBBD0147_var*
//#UC START# *52A200C203A4_4AD5DBBD0147_impl*
//#UC END# *52A200C203A4_4AD5DBBD0147_impl*
//#UC START# *52A200C203A4_4AD5DBBD0147_var*
//#UC END# *52A200C203A4_4AD5DBBD0147_var*
//#UC START# *52A6F87B015A_4AD5DBBD0147set_impl*
 f_Strings.Assign(aValue);
//#UC END# *52A6F87B015A_4AD5DBBD0147set_impl*
//#UC START# *52A6F87B015A_4AD5DBBD0147set_var*
//#UC END# *52A6F87B015A_4AD5DBBD0147set_var*
//#UC START# *52A6F8EB0138_4AD5DBBD0147get_impl*
 if (Owner = nil) then
  Result := ''
 else 
 begin
  l_TI := GetTypeData(Owner.ClassInfo);
  Result := l_TI.UnitName;
 end;//Owner <> nil
//#UC END# *52A6F8EB0138_4AD5DBBD0147get_impl*
//#UC START# *52A6F8EB0138_4AD5DBBD0147get_var*
var
 l_TI : PTypeData;
//#UC END# *52A6F8EB0138_4AD5DBBD0147get_var*
//#UC START# *52A6F909022C_4AD5DBBD0147get_impl*
 Result := f_Modules;
//#UC END# *52A6F909022C_4AD5DBBD0147get_impl*
//#UC START# *52A6F909022C_4AD5DBBD0147get_var*
//#UC END# *52A6F909022C_4AD5DBBD0147get_var*
//#UC START# *52A6F909022C_4AD5DBBD0147set_impl*
 f_Modules.Assign(aValue);
//#UC END# *52A6F909022C_4AD5DBBD0147set_impl*
//#UC START# *52A6F909022C_4AD5DBBD0147set_var*
//#UC END# *52A6F909022C_4AD5DBBD0147set_var*
//#UC START# *52A6F92B0035_4AD5DBBD0147set_impl*
 f_AppForms.Assign(aValue);
//#UC END# *52A6F92B0035_4AD5DBBD0147set_impl*
//#UC START# *52A6F92B0035_4AD5DBBD0147set_var*
//#UC END# *52A6F92B0035_4AD5DBBD0147set_var*
//#UC START# *52A6F9410290_4AD5DBBD0147set_impl*
 f_Messages.Assign(aValue);
//#UC END# *52A6F9410290_4AD5DBBD0147set_impl*
//#UC START# *52A6F9410290_4AD5DBBD0147set_var*
//#UC END# *52A6F9410290_4AD5DBBD0147set_var*
//#UC START# *52A6F96303A9_4AD5DBBD0147set_impl*
 if f_SmallImages <> nil then
  f_SmallImages.RemoveFreeNotification(Self);
 f_SmallImages := aValue;
 if f_SmallImages <> nil then
  f_SmallImages.FreeNotification(Self);
//#UC END# *52A6F96303A9_4AD5DBBD0147set_impl*
//#UC START# *52A6F96303A9_4AD5DBBD0147set_var*
//#UC END# *52A6F96303A9_4AD5DBBD0147set_var*
//#UC START# *52A6F97B01E6_4AD5DBBD0147set_impl*
 if f_LargeImages <> nil then
  f_LargeImages.RemoveFreeNotification(Self);
 f_LargeImages := aValue;
 if f_LargeImages <> nil then
  f_LargeImages.FreeNotification(Self);
//#UC END# *52A6F97B01E6_4AD5DBBD0147set_impl*
//#UC START# *52A6F97B01E6_4AD5DBBD0147set_var*
//#UC END# *52A6F97B01E6_4AD5DBBD0147set_var*
//#UC START# *52A6F9FB00AD_4AD5DBBD0147get_impl*
 Result := nil;
// Result := f_Modules;
//#UC END# *52A6F9FB00AD_4AD5DBBD0147get_impl*
//#UC START# *52A6F9FB00AD_4AD5DBBD0147get_var*
//#UC END# *52A6F9FB00AD_4AD5DBBD0147get_var*
//#UC START# *52A6FA110112_4AD5DBBD0147get_impl*
 l_MS := vcmGetTAModules;
 if (l_MS <> nil) then
  try
   l_M := l_MS.CurrentModule;
   if (l_M <> nil) then
   begin
    Result := l_M.CurrentEditor;
   end;//l_M <> nil
  finally
   l_MS := nil;
  end;//try..finally
//#UC END# *52A6FA110112_4AD5DBBD0147get_impl*
//#UC START# *52A6FA110112_4AD5DBBD0147get_var*
var
 l_MS : IOTAModuleServices;
 l_M : IOTAModule;
//#UC END# *52A6FA110112_4AD5DBBD0147get_var*
//#UC START# *52A6FA2F011A_4AD5DBBD0147get_impl*
 Result := nil;
 l_M := Module;
 if (l_M <> nil) then
 begin
  for l_Index := 0 to Pred(l_M.ModuleFileCount) do
   if Supports(l_M.ModuleFileEditors[l_Index], IOTASourceEditor, Result) then
    Exit;
 end;//l_M <> nil
//#UC END# *52A6FA2F011A_4AD5DBBD0147get_impl*
//#UC START# *52A6FA2F011A_4AD5DBBD0147get_var*
var
 l_M : IOTAModule;
 l_Index : Integer;
//#UC END# *52A6FA2F011A_4AD5DBBD0147get_var*
//#UC START# *53E9DC69036C_4AD5DBBD0147_impl*
 Assert(MenuItemClickListeners.IndexOf(aListener) = -1);
 MenuItemClickListeners.Add(aListener);
//#UC END# *53E9DC69036C_4AD5DBBD0147_impl*
//#UC START# *53E9DC69036C_4AD5DBBD0147_var*
//#UC END# *53E9DC69036C_4AD5DBBD0147_var*
//#UC START# *53E9DC960383_4AD5DBBD0147_impl*
 Assert(MenuItemClickListeners.IndexOf(aListener) <> -1);
 MenuItemClickListeners.Remove(aListener);
//#UC END# *53E9DC960383_4AD5DBBD0147_impl*
//#UC START# *53E9DC960383_4AD5DBBD0147_var*
//#UC END# *53E9DC960383_4AD5DBBD0147_var*
//#UC START# *53E9DE6F0274_4AD5DBBD0147get_impl*
 if (f_MenuItemClickListeners = nil) then
  f_MenuItemClickListeners := TvcmMenuItemClickListenerList.Create;
 Result := f_MenuItemClickListeners;
//#UC END# *53E9DE6F0274_4AD5DBBD0147get_impl*
//#UC START# *53E9DE6F0274_4AD5DBBD0147get_var*
//#UC END# *53E9DE6F0274_4AD5DBBD0147get_var*
//#UC START# *53E9E9BC021D_4AD5DBBD0147_impl*
 NotifyMenuItemClickListeners(aMenuItem);
//#UC END# *53E9E9BC021D_4AD5DBBD0147_impl*
//#UC START# *53E9E9BC021D_4AD5DBBD0147_var*
//#UC END# *53E9E9BC021D_4AD5DBBD0147_var*
//#UC START# *53E9E9EC013B_4AD5DBBD0147_impl*
 MenuItemClickListeners.IterateAllF(l3L2IA(@lp_DoNotifyListeners));
//#UC END# *53E9E9EC013B_4AD5DBBD0147_impl*
//#UC START# *53E9E9EC013B_4AD5DBBD0147_var*

 function lp_DoNotifyListeners(anItem: PvcmMenuItemClickListener;
                               anIndex: Integer): Boolean;
 var
  l_Listener: IvcmMenuItemClickListener;
 begin
  l_Listener := anItem^;
  Assert(l_Listener <> nil);
  try
   l_Listener.NotifyMenuItemClicked(aMenuItem);
  finally
   l_Listener := nil;
  end;
  Result := True;
 end;//lp_DoNotifyListeners

//#UC END# *53E9E9EC013B_4AD5DBBD0147_var*
