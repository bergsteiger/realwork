//#UC START# *46827CAF03CD_4ADDE17D0077get_impl*
 Result := pm_GetHandle;
//#UC END# *46827CAF03CD_4ADDE17D0077get_impl*
//#UC START# *46827CAF03CD_4ADDE17D0077get_var*
//#UC END# *46827CAF03CD_4ADDE17D0077get_var*
//#UC START# *46827CAF03CD_4ADDE17D0077set_impl*
 pm_SetHandle(aValue);
//#UC END# *46827CAF03CD_4ADDE17D0077set_impl*
//#UC START# *46827CAF03CD_4ADDE17D0077set_var*
//#UC END# *46827CAF03CD_4ADDE17D0077set_var*
//#UC START# *477244190062_4ADDE17D0077_impl*
(*
  ntInsert           {* - вставка элемента. }
  ntMoveBegin        {* - началось движение элемента. }
  ntMoveEnd          {* - закончилось движение элемента. }
  //ntChildInsert      {* - вставлен дочерний элемент. }
  //ntCountChange      {* - изменилось количество элементов. }
*)
 try
  if (aNode <> nil) and l3IEQ(ParentNode, aNode.Parent) then //проверка что оба из одного листа
   case aOperation of
    ntChildClear:   // удалили все
     ListItem := -1;

    ntDelete:        // удалили элемент.
    begin
     lAnotherNode := (aNode as Il3NodeWrap).GetSelf as Tl3ListItemNode;
     lListIndex := lAnotherNode.ListItem;

     if (lListIndex >= 0) and (lListIndex < ListItem) then
      ListItem := ListItem - 1
     else
     if lListIndex = ListItem then
      ListItem := -1; //указывал на удаленный элемент
    end;

      (*
      ntInsert           {* - вставка элемента. }
      ntMoveBegin        {* - началось движение элемента. }
      ntMoveEnd          {* - закончилось движение элемента. }
      //ntChildInsert    {* - вставлен дочерний элемент. }
      //ntCountChange    {* - изменилось количество элементов. }
      *)

   end; // case Operation
 except
  on E: Exception do
   l3System.Exception2Log(E);
 end;
//#UC END# *477244190062_4ADDE17D0077_impl*
//#UC START# *477244190062_4ADDE17D0077_var*
var
 lListIndex : Integer;
 lAnotherNode : Tl3ListItemNode;
//#UC END# *477244190062_4ADDE17D0077_var*
//#UC START# *479731C50290_4ADDE17D0077_impl*
 ListNode := nil;
 inherited;
//#UC END# *479731C50290_4ADDE17D0077_impl*
//#UC START# *479731C50290_4ADDE17D0077_var*
//#UC END# *479731C50290_4ADDE17D0077_var*
//#UC START# *479F2AFB0397_4ADDE17D0077_impl*
 f_ListNode.UnsubscribeChild(Self);
 inherited;
//#UC END# *479F2AFB0397_4ADDE17D0077_impl*
//#UC START# *479F2AFB0397_4ADDE17D0077_var*
//#UC END# *479F2AFB0397_4ADDE17D0077_var*
//#UC START# *47A869BB02DE_4ADDE17D0077_impl*
 Result := f_ListNode.Strings[f_ListItem];
//#UC END# *47A869BB02DE_4ADDE17D0077_impl*
//#UC START# *47A869BB02DE_4ADDE17D0077_var*
//#UC END# *47A869BB02DE_4ADDE17D0077_var*
//#UC START# *47A869D10074_4ADDE17D0077_impl*
 f_ListNode.Strings[f_ListItem] := Value;
//#UC END# *47A869D10074_4ADDE17D0077_impl*
//#UC START# *47A869D10074_4ADDE17D0077_var*
//#UC END# *47A869D10074_4ADDE17D0077_var*
//#UC START# *47BC3BFD017F_4ADDE17D0077get_impl*
 Result := Get_Handle;
//#UC END# *47BC3BFD017F_4ADDE17D0077get_impl*
//#UC START# *47BC3BFD017F_4ADDE17D0077get_var*
//#UC END# *47BC3BFD017F_4ADDE17D0077get_var*
//#UC START# *47BC3BFD017F_4ADDE17D0077set_impl*
 Set_Handle(aValue);
//#UC END# *47BC3BFD017F_4ADDE17D0077set_impl*
//#UC START# *47BC3BFD017F_4ADDE17D0077set_var*
//#UC END# *47BC3BFD017F_4ADDE17D0077set_var*
//#UC START# *4ADDE17D0077_ext:ParentFileName
w:\common\components\rtl\Garant\L3\l3NodesModelPart.pas
//#UC END# *4ADDE17D0077_ext:ParentFileName
//#UC START# *54C78756019B_4ADDE17D0077get_impl*
 Result := f_ListNode.ItemFlag[f_ListItem];
//#UC END# *54C78756019B_4ADDE17D0077get_impl*
//#UC START# *54C78756019B_4ADDE17D0077get_var*
//#UC END# *54C78756019B_4ADDE17D0077get_var*
//#UC START# *54C78756019B_4ADDE17D0077set_impl*
 f_ListNode.ItemFlag[f_ListItem] := aValue;
//#UC END# *54C78756019B_4ADDE17D0077set_impl*
//#UC START# *54C78756019B_4ADDE17D0077set_var*
//#UC END# *54C78756019B_4ADDE17D0077set_var*
//#UC START# *54C78D9201B9_4ADDE17D0077_impl*
 try
{$IfOpt D+}
  Result := False;
  lIntfObj := Tl3ListItemNode((aNode as Il3NodeWrap).GetSelf);
  if not (lIntfObj is Tl3ListItemNode) then
   Exit;
{$else}
  lIntfObj := (aNode as Il3NodeWrap).GetSelf as Tl3ListItemNode;
{$endif}

  Result := Self = lIntfObj;
  if Result then
   Exit;
  Result := (f_ListNode = lIntfObj.f_ListNode) and (f_ListItem = lIntfObj.f_ListItem);
 except
  on E: Exception do
  begin
   Result := False;
   l3System.Exception2Log(E);
  end;
 end;
//#UC END# *54C78D9201B9_4ADDE17D0077_impl*
//#UC START# *54C78D9201B9_4ADDE17D0077_var*
var
 lIntfObj : Tl3ListItemNode;
//#UC END# *54C78D9201B9_4ADDE17D0077_var*
//#UC START# *54C78E1002BE_4ADDE17D0077_impl*
 Result := f_ListNode;
//#UC END# *54C78E1002BE_4ADDE17D0077_impl*
//#UC START# *54C78E1002BE_4ADDE17D0077_var*
//#UC END# *54C78E1002BE_4ADDE17D0077_var*
//#UC START# *54C78E2702B3_4ADDE17D0077_impl*
 Result := nil;
//#UC END# *54C78E2702B3_4ADDE17D0077_impl*
//#UC START# *54C78E2702B3_4ADDE17D0077_var*
//#UC END# *54C78E2702B3_4ADDE17D0077_var*
//#UC START# *54C78E370213_4ADDE17D0077_impl*
 if IsLast then
  lNextIndex := 0
 else
  lNextIndex := Succ(f_ListItem);
 Result := f_ListNode.GetChildByNumber(lNextIndex);
//#UC END# *54C78E370213_4ADDE17D0077_impl*
//#UC START# *54C78E370213_4ADDE17D0077_var*
var
 lNextIndex : Integer;
//#UC END# *54C78E370213_4ADDE17D0077_var*
//#UC START# *54C78E440118_4ADDE17D0077_impl*
 if IsFirst then
  lPrevIndex := Pred(f_ListNode.AllChildrenCount)
 else
  lPrevIndex := Pred(f_ListItem);
 Result := f_ListNode.GetChildByNumber(lPrevIndex);
//#UC END# *54C78E440118_4ADDE17D0077_impl*
//#UC START# *54C78E440118_4ADDE17D0077_var*
var
 lPrevIndex : Integer;
//#UC END# *54C78E440118_4ADDE17D0077_var*
//#UC START# *54C78EA30198_4ADDE17D0077_impl*
 Result := 1;
 if (ParentNode <> nil) then
  Inc(Result, ParentNode.GetLevelFor(aNode));
//#UC END# *54C78EA30198_4ADDE17D0077_impl*
//#UC START# *54C78EA30198_4ADDE17D0077_var*
//#UC END# *54C78EA30198_4ADDE17D0077_var*
//#UC START# *54C78F15023E_4ADDE17D0077get_impl*
 Result := f_ListNode.ItemFlag[f_ListItem] and anIndex > 0;
//#UC END# *54C78F15023E_4ADDE17D0077get_impl*
//#UC START# *54C78F15023E_4ADDE17D0077get_var*
//#UC END# *54C78F15023E_4ADDE17D0077get_var*
//#UC START# *54C78F15023E_4ADDE17D0077set_impl*
 l_Flags := f_ListNode.ItemFlag[f_ListItem];
 if aValue then
  l_Flags := l_Flags or anIndex
 else
  l_Flags := l_Flags and not anIndex;

 f_ListNode.ItemFlag[f_ListItem] := l_Flags;
//#UC END# *54C78F15023E_4ADDE17D0077set_impl*
//#UC START# *54C78F15023E_4ADDE17D0077set_var*
var
 l_Flags: Integer;
//#UC END# *54C78F15023E_4ADDE17D0077set_var*
//#UC START# *54C78F5702CE_4ADDE17D0077_impl*
 Result := f_ListItem = 0;
//#UC END# *54C78F5702CE_4ADDE17D0077_impl*
//#UC START# *54C78F5702CE_4ADDE17D0077_var*
//#UC END# *54C78F5702CE_4ADDE17D0077_var*
//#UC START# *54C78F8902C6_4ADDE17D0077_impl*
 Result := f_ListItem = Pred(f_ListNode.AllChildrenCount);
//#UC END# *54C78F8902C6_4ADDE17D0077_impl*
//#UC START# *54C78F8902C6_4ADDE17D0077_var*
//#UC END# *54C78F8902C6_4ADDE17D0077_var*
//#UC START# *54C7905B00BA_4ADDE17D0077_impl*
 Result := ListItem = -1;
//#UC END# *54C7905B00BA_4ADDE17D0077_impl*
//#UC START# *54C7905B00BA_4ADDE17D0077_var*
//#UC END# *54C7905B00BA_4ADDE17D0077_var*
//#UC START# *54C79185029B_4ADDE17D0077_impl*
 f_ListNode.DeleteChildItem(f_ListItem, Self);
//#UC END# *54C79185029B_4ADDE17D0077_impl*
//#UC START# *54C79185029B_4ADDE17D0077_var*
//#UC END# *54C79185029B_4ADDE17D0077_var*
//#UC START# *54C8E1F30128_4ADDE17D0077_impl*
 Result := f_ListItem;
//#UC END# *54C8E1F30128_4ADDE17D0077_impl*
//#UC START# *54C8E1F30128_4ADDE17D0077_var*
//#UC END# *54C8E1F30128_4ADDE17D0077_var*
//#UC START# *54C8E45103D9_4ADDE17D0077_impl*
 Result := ListNode.MoveChildItem(Self, aDirection);
//#UC END# *54C8E45103D9_4ADDE17D0077_impl*
//#UC START# *54C8E45103D9_4ADDE17D0077_var*
//#UC END# *54C8E45103D9_4ADDE17D0077_var*
//#UC START# *54C8E5AF00F8_4ADDE17D0077_impl*
 if l3TestMask(IterMode, imParentNeed) then
 begin
  lCurNode := Self;
{$IfDef SkipIterByExcept}
  try
   ActionResult := Action(lCurNode);
  except
   on E: ESkipIterateChilds do
   begin
    ActionResult := False;
    l3SetMask(IterMode, imNoChilds);
   end;
   else raise;
  end;
{$Else}
  ActionResult := Action(lCurNode);
  if Byte(ActionResult) = 2 then
  begin
   ActionResult := False;
   if l3TestMask(IterMode, imCheckResult) then
    l3SetMask(IterMode, imNoChilds);
  end;
{$EndIf}

  if (IterMode and imCheckResult > 0) and ActionResult then
  begin
   Result := lCurNode;
   Exit;
  end;
 end;
//#UC END# *54C8E5AF00F8_4ADDE17D0077_impl*
//#UC START# *54C8E5AF00F8_4ADDE17D0077_var*
var
 lCurNode : Il3Node;
 ActionResult : Boolean;
//#UC END# *54C8E5AF00F8_4ADDE17D0077_var*
//#UC START# *54CBC0C80360_4ADDE17D0077set_impl*
 f_ListNode := aValue;
//#UC END# *54CBC0C80360_4ADDE17D0077set_impl*
//#UC START# *54CBC0C80360_4ADDE17D0077set_var*
//#UC END# *54CBC0C80360_4ADDE17D0077set_var*
//#UC START# *54CBC1EF0289_4ADDE17D0077get_impl*
 Result := f_ListNode.ItemParam[f_ListItem];
//#UC END# *54CBC1EF0289_4ADDE17D0077get_impl*
//#UC START# *54CBC1EF0289_4ADDE17D0077get_var*
//#UC END# *54CBC1EF0289_4ADDE17D0077get_var*
//#UC START# *54CBC1EF0289_4ADDE17D0077set_impl*
 Changing;
 try
  f_ListNode.ItemParam[f_ListItem] := aValue;
  Notify(ntDataChange, Self);
 finally
  Changed;
 end;
//#UC END# *54CBC1EF0289_4ADDE17D0077set_impl*
//#UC START# *54CBC1EF0289_4ADDE17D0077set_var*
//#UC END# *54CBC1EF0289_4ADDE17D0077set_var*
