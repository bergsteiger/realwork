//#UC START# *4B2F40FD0088_4B2F40E70101_impl*
 !!! Needs to be implemented !!!
//#UC END# *4B2F40FD0088_4B2F40E70101_impl*
//#UC START# *4B2F40FD0088_4B2F40E70101_var*
//#UC END# *4B2F40FD0088_4B2F40E70101_var*
//#UC START# *4B30EEA10210_4B2F40E70101_impl*
 !!! Needs to be implemented !!!
//#UC END# *4B30EEA10210_4B2F40E70101_impl*
//#UC START# *4B30EEA10210_4B2F40E70101_var*
//#UC END# *4B30EEA10210_4B2F40E70101_var*
//#UC START# *4C07996901BE_4B2F40E70101_impl*
 !!! Needs to be implemented !!!
//#UC END# *4C07996901BE_4B2F40E70101_impl*
//#UC START# *4C07996901BE_4B2F40E70101_var*
//#UC END# *4C07996901BE_4B2F40E70101_var*
//#UC START# *4C446D7903B7_4B2F40E70101_impl*
 !!! Needs to be implemented !!!
//#UC END# *4C446D7903B7_4B2F40E70101_impl*
//#UC START# *4C446D7903B7_4B2F40E70101_var*
//#UC END# *4C446D7903B7_4B2F40E70101_var*
//#UC START# *4C937013031D_4B2F40E70101_impl*
 Result := '';
//#UC END# *4C937013031D_4B2F40E70101_impl*
//#UC START# *4C937013031D_4B2F40E70101_var*
//#UC END# *4C937013031D_4B2F40E70101_var*
//#UC START# *4C988C1B0246_4B2F40E70101_impl*
 Result := false;
//#UC END# *4C988C1B0246_4B2F40E70101_impl*
//#UC START# *4C988C1B0246_4B2F40E70101_var*
//#UC END# *4C988C1B0246_4B2F40E70101_var*
//#UC START# *4DAED6F60146_4B2F40E70101_impl*
 Result := '';
//#UC END# *4DAED6F60146_4B2F40E70101_impl*
//#UC START# *4DAED6F60146_4B2F40E70101_var*
//#UC END# *4DAED6F60146_4B2F40E70101_var*
//#UC START# *4DC28F0500F3_4DC24566022C_impl*
 DoAddTest(aTest);
//#UC END# *4DC28F0500F3_4DC24566022C_impl*
//#UC START# *4DC28F0500F3_4DC24566022C_var*
//#UC END# *4DC28F0500F3_4DC24566022C_var*
//#UC START# *4DC28F1301D6_4DC24566022C_impl*
 Assert(Assigned(aTest));
 if FSuffix = '' then
  FSuffix := aTest.GetSuffixName;
 FTests.Add(aTest);
//#UC END# *4DC28F1301D6_4DC24566022C_impl*
//#UC START# *4DC28F1301D6_4DC24566022C_var*
//#UC END# *4DC28F1301D6_4DC24566022C_var*
//#UC START# *4DC38C96018E_4DC24566022C_impl*
 { call on the method enumerator to get the names of the test
   cases in the testClass }
 l_MethodEnumerator := nil;
 try
  l_MethodEnumerator := TMethodEnumerator.Create(aTestClass);
  { make sure we add each test case  to the list of tests }
  for l_MethodIter := 0 to l_MethodEnumerator.MethodCount - 1 do
  begin
   l_NameOfMethod := l_MethodEnumerator.NameOfMethod[l_MethodIter];
   Self.AddTest(aTestClass.Create(l_NameOfMethod) as ITest);
  end; //  for l_MethodIter := 0 to l_MethodEnumerator.Methodcount - 1 do
 finally
  l_MethodEnumerator.Free;
 end;
//#UC END# *4DC38C96018E_4DC24566022C_impl*
//#UC START# *4DC38C96018E_4DC24566022C_var*
var
 l_MethodIter       : Integer;
 l_NameOfMethod     : string;
 l_MethodEnumerator : TMethodEnumerator;
//#UC END# *4DC38C96018E_4DC24566022C_var*
//#UC START# *4DC395670274_4B2A0DDE028B_impl*
 Result := False;
//#UC END# *4DC395670274_4B2A0DDE028B_impl*
//#UC START# *4DC395670274_4B2A0DDE028B_var*
//#UC END# *4DC395670274_4B2A0DDE028B_var*
//#UC START# *4DC399CA00BC_4B2A0DDE028B_impl*
 !!! Needs to be implemented !!!
//#UC END# *4DC399CA00BC_4B2A0DDE028B_impl*
//#UC START# *4DC399CA00BC_4B2A0DDE028B_var*
//#UC END# *4DC399CA00BC_4B2A0DDE028B_var*
//#UC START# *4DCCCFF001A4_4B2F40E70101_impl*
 Result := DoHasScriptChildren;
//#UC END# *4DCCCFF001A4_4B2F40E70101_impl*
//#UC START# *4DCCCFF001A4_4B2F40E70101_var*
//#UC END# *4DCCCFF001A4_4B2F40E70101_var*
//#UC START# *4DCCD004030E_4B2F40E70101_impl*
 Result := False;
//#UC END# *4DCCD004030E_4B2F40E70101_impl*
//#UC START# *4DCCD004030E_4B2F40E70101_var*
//#UC END# *4DCCD004030E_4B2F40E70101_var*
//#UC START# *4DDE1A9201A4_4B2F4252038D_impl*
 Result := FStop;
//#UC END# *4DDE1A9201A4_4B2F4252038D_impl*
//#UC START# *4DDE1A9201A4_4B2F4252038D_var*
//#UC END# *4DDE1A9201A4_4B2F4252038D_var*
//#UC START# *4DDE1E8702D3_4B2F40E70101_impl*
 !!! Needs to be implemented !!!
//#UC END# *4DDE1E8702D3_4B2F40E70101_impl*
//#UC START# *4DDE1E8702D3_4B2F40E70101_var*
//#UC END# *4DDE1E8702D3_4B2F40E70101_var*
//#UC START# *4DDE29F101B1_4B2A0DDE028B_impl*
 Assert(Assigned(FMethod), 'Method "' + FTestName + '" not found');
 FExpectedException := nil;
 try
  try
{$IFDEF CLR}
   aTestResult.FMethodPtr := nil;
{$ELSE}
   CheckMethodIsNotEmpty(TMethod(FMethod).Code);
   aTestResult.FMethodPtr := TMethod(FMethod).Code;
{$ENDIF}
   FCheckCalled := False;
   f_TestResult := aTestResult;
   try
    Invoke(FMethod);
   finally
    f_TestResult := nil;
   end;
   if FFailsOnNoChecksExecuted and (not FCheckCalled) then
    Fail('No checks executed in TestCase', aTestResult.FMethodPtr);
   StopExpectingException;
  except
   on E: ETestFailure  do
   begin
    raise;
   end;
   on E: Exception  do
   begin
    if not Assigned(FExpectedException) then
     raise
    else
     if not E.ClassType.InheritsFrom(fExpectedException) then
      FailNotEquals(fExpectedException.ClassName, E.ClassName, 'unexpected exception', ExceptAddr);
   end
  end;
 finally
  FExpectedException := nil;
 end;
//#UC END# *4DDE29F101B1_4B2A0DDE028B_impl*
//#UC START# *4DDE29F101B1_4B2A0DDE028B_var*
//#UC END# *4DDE29F101B1_4B2A0DDE028B_var*
//#UC START# *4DDE29F101B1_4DC24566022C_impl*
 Assert(Assigned(aTestResult));
 Assert(Assigned(FTests));

 aTestResult.StartSuite(Self);
 for i := 0 to FTests.Count - 1 do
 begin
  if aTestResult.ShouldStop then Break;
  l_Test := FTests[i] as ITest;
  l_Test.RunWithFixture(aTestResult);
 end; // for i := 0 to FTests.Count - 1 do
 aTestResult.EndSuite(Self);
//#UC END# *4DDE29F101B1_4DC24566022C_impl*
//#UC START# *4DDE29F101B1_4DC24566022C_var*
var
 i      : Integer;
 l_Test : ITest;
//#UC END# *4DDE29F101B1_4DC24566022C_var*
//#UC START# *4DDE2A3D0314_4B2A0DDE028B_impl*
 Result := f_TestResult.ShouldStop;
//#UC END# *4DDE2A3D0314_4B2A0DDE028B_impl*
//#UC START# *4DDE2A3D0314_4B2A0DDE028B_var*
//#UC END# *4DDE2A3D0314_4B2A0DDE028B_var*
//#UC START# *4EA553E901DB_4B2A0DDE028B_impl*
 !!! Needs to be implemented !!!
//#UC END# *4EA553E901DB_4B2A0DDE028B_impl*
//#UC START# *4EA553E901DB_4B2A0DDE028B_var*
//#UC END# *4EA553E901DB_4B2A0DDE028B_var*
//#UC START# *4EA66E6C038E_4B2A0DCE03A9_impl*
 !!! Needs to be implemented !!!
//#UC END# *4EA66E6C038E_4B2A0DCE03A9_impl*
//#UC START# *4EA66E6C038E_4B2A0DCE03A9_var*
//#UC END# *4EA66E6C038E_4B2A0DCE03A9_var*
//#UC START# *4EA6790E0142_4B2A0DDE028B_impl*
 !!! Needs to be implemented !!!
//#UC END# *4EA6790E0142_4B2A0DDE028B_impl*
//#UC START# *4EA6790E0142_4B2A0DDE028B_var*
//#UC END# *4EA6790E0142_4B2A0DDE028B_var*
//#UC START# *4F9A4FBF00C0_4B2F40E70101_impl*
 !!! Needs to be implemented !!!
//#UC END# *4F9A4FBF00C0_4B2F40E70101_impl*
//#UC START# *4F9A4FBF00C0_4B2F40E70101_var*
//#UC END# *4F9A4FBF00C0_4B2F40E70101_var*
//#UC START# *4F9A4FD70148_4B2A0DDE028B_impl*
 !!! Needs to be implemented !!!
//#UC END# *4F9A4FD70148_4B2A0DDE028B_impl*
//#UC START# *4F9A4FD70148_4B2A0DDE028B_var*
//#UC END# *4F9A4FD70148_4B2A0DDE028B_var*
//#UC START# *4F9A4FD70148_4DC24566022C_impl*
 !!! Needs to be implemented !!!
//#UC END# *4F9A4FD70148_4DC24566022C_impl*
//#UC START# *4F9A4FD70148_4DC24566022C_var*
//#UC END# *4F9A4FD70148_4DC24566022C_var*
//#UC START# *5040A3B80283_4DC24566022C_impl*
 !!! Needs to be implemented !!!
//#UC END# *5040A3B80283_4DC24566022C_impl*
//#UC START# *5040A3B80283_4DC24566022C_var*
//#UC END# *5040A3B80283_4DC24566022C_var*
//#UC START# *5040A3CE0118_4DC24566022C_impl*
 !!! Needs to be implemented !!!
//#UC END# *5040A3CE0118_4DC24566022C_impl*
//#UC START# *5040A3CE0118_4DC24566022C_var*
//#UC END# *5040A3CE0118_4DC24566022C_var*
//#UC START# *51B1DD5F0080_4B2F40E70101_impl*
 !!! Needs to be implemented !!!
//#UC END# *51B1DD5F0080_4B2F40E70101_impl*
//#UC START# *51B1DD5F0080_4B2F40E70101_var*
//#UC END# *51B1DD5F0080_4B2F40E70101_var*
//#UC START# *51B1DD8E0018_4B2A0DDE028B_impl*
 !!! Needs to be implemented !!!
//#UC END# *51B1DD8E0018_4B2A0DDE028B_impl*
//#UC START# *51B1DD8E0018_4B2A0DDE028B_var*
//#UC END# *51B1DD8E0018_4B2A0DDE028B_var*
//#UC START# *51B1DD8E0018_4DC24566022C_impl*
 !!! Needs to be implemented !!!
//#UC END# *51B1DD8E0018_4DC24566022C_impl*
//#UC START# *51B1DD8E0018_4DC24566022C_var*
//#UC END# *51B1DD8E0018_4DC24566022C_var*
