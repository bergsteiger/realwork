//#UC START# *479731C50290_4B5430390380_impl*
 f_Info := nil;
 inherited Cleanup;
//#UC END# *479731C50290_4B5430390380_impl*
//#UC START# *479731C50290_4B5430390380_var*
//#UC END# *479731C50290_4B5430390380_var*
//#UC START# *4A8E8F2E0195_4B5430390380_impl*
 if (ZoneType <> vcm_ztForToolbarsInfo) then
 begin
  defDataAdapter.NativeAdapter.MakeUserManager.GetSelfProfile(l_Profile);
  f_Info := TnsUserProperty.Make(l_Profile);
 end; 
 inherited;

 with pnMainData do
 begin
  Align := alClient;
  BevelOuter := bvNone;
  TabOrder := 0;
 end;
  with UserNameLabel do
  begin
   AutoSize := False;
   Left := 0;
   Top := 84;
   Width := 207;
   Height := 17;
   Alignment := taRightJustify;
   BiDiMode := bdLeftToRight;
  end;
  with PasswordLabel do
  begin
   AutoSize := False;
   Left := 0;
   Top := 36;
   Width := 207;
   Height := 17;
   Alignment := taRightJustify;
   BiDiMode := bdLeftToRight;
  end;
  with LoginLabel do
  begin
   AutoSize := False;
   Left := 0;
   Top := 12;
   Width := 207;
   Height := 17;
   Alignment := taRightJustify;
   BiDiMode := bdLeftToRight;
  end;
  with InfoLabel do
  begin
   Left := 222;
   Top := 131;
   Width := 235;
   Height := 16;
  end;
  with EMailLabel do
  begin
   AutoSize := False;
   Left := 0;
   Top := 108;
   Width := 207;
   Height := 17;
   Alignment := taRightJustify;
   BiDiMode := bdLeftToRight;
  end;
  with ConfirmPasswordLabel do
  begin
   AutoSize := False;
   Left := 0;
   Top := 60;
   Width := 207;
   Height := 17;
   Alignment := taRightJustify;
   BiDiMode := bdLeftToRight;
  end;
  with vtAsteriskLabelLogin do
  begin
   Left := 207;
   Top := 12;
   Width := 9;
   Height := 16;
   Alignment := taRightJustify;
   BiDiMode := bdLeftToRight;
  end;
  with vtAsteriskLabelFIO do
  begin
   Left := 207;
   Top := 84;
   Width := 9;
   Height := 16;
   Alignment := taRightJustify;
   BiDiMode := bdLeftToRight;
  end;
  with edLogin do
  begin
    Left := 222;
    Top := 10;
    Width := 249;
    Height := 21;
    Hint := str_PrimSelfInfo_edLoginHint.AsStr;
    TabOrder := 0;
    MaxLength := 31;
  end;
  with edPassword do
  begin
   Left := 222;
   Top := 34;
   Width := 249;
   Height := 21;
   Hint := str_PrimSelfInfo_edPasswordHint.AsStr;
   OnChange := edPasswordChange;
   TabOrder := 1;
   MaxLength := 255;
   PasswordChar := '*';
  end;
  with edConfirm do
  begin
   Left := 222;
   Top := 58;
   Width := 249;
   Height := 21;
   Hint := str_PrimSelfInfo_edConfirmHint.AsStr;
   OnChange := edConfirmChange;
   TabOrder := 2;
   MaxLength := 255;
   PasswordChar := '*';
  end;
  with edUserName do
  begin
   Left := 222;
   Top := 82;
   Width := 249;
   Height := 21;
   Hint := str_PrimSelfInfo_edUserNameHint.AsStr;
   OnChange := edUserNameChange;
   TabOrder := 3;
  end;
  with edEmail do
  begin
   Left := 222;
   Top := 106;
   Width := 249;
   Height := 21;
   Hint := str_PrimSelfInfo_edEmailHint.AsStr;
   OnChange := edUserNameChange;
   TabOrder := 4;
  end;
 with BottomPanel do
 begin
  Left := 0;
  Top := 155;
  Width := 476;
  Height := 33;
  Align := alBottom;
  BevelOuter := bvNone;
  TabOrder := 1;
 end;
  with RegisterButton do
  begin
   Left := 364;
   Top := 0;
   Width := 105;
   Height := 25;
   DrawDefaultFrame := False;
   Default := True;
   //ModalResult := mrOk;
   NumGlyphs := 1;
   Enabled := False;
   TabOrder := 0;
   OnClick := RegisterButtonClick;
   DockOrientation := doNoOrient;
  end;
  with HelpPanel do
  begin
   Left := 9;
   Top := 7;
   Width := 85;
   Height := 19;
   BevelOuter := bvNone;
   TabOrder := 1;
  end;
   with HelpPaintBox do
   begin
    Left := 0;
    Top := 0;
    Width := 16;
    Height := 19;
    OnPaint := HelpPaintBoxPaint;
   end;
   with HelpLabel do
   begin
    Left := 20;
    Top := 0;
    Width := 56;
    Height := 19;
    Cursor := crHandPoint;
    TabOrder := 0;
    Font.Color := clBlue;
    HighlightColor := clBlue;
    Hyperlink := True;
    OnClick := HelpLabelClick;
   end;
//#UC END# *4A8E8F2E0195_4B5430390380_impl*
//#UC START# *4A8E8F2E0195_4B5430390380_var*
var
 l_Profile: IUserProfile;
//#UC END# *4A8E8F2E0195_4B5430390380_var*
//#UC START# *5261516401F6_4B5430390380_impl*
 f_PasswordChanged := True;
 CheckFields;
//#UC END# *5261516401F6_4B5430390380_impl*
//#UC START# *5261516401F6_4B5430390380_var*
//#UC END# *5261516401F6_4B5430390380_var*
//#UC START# *5261516C030F_4B5430390380_impl*
 CheckFields;
//#UC END# *5261516C030F_4B5430390380_impl*
//#UC START# *5261516C030F_4B5430390380_var*
//#UC END# *5261516C030F_4B5430390380_var*
//#UC START# *5261517401D4_4B5430390380_impl*
 CheckFields;
//#UC END# *5261517401D4_4B5430390380_impl*
//#UC START# *5261517401D4_4B5430390380_var*
//#UC END# *5261517401D4_4B5430390380_var*
//#UC START# *5261517B03B9_4B5430390380_impl*
 Save;
//#UC END# *5261517B03B9_4B5430390380_impl*
//#UC START# *5261517B03B9_4B5430390380_var*
//#UC END# *5261517B03B9_4B5430390380_var*
//#UC START# *5261518F02B3_4B5430390380_impl*
 Application.HelpSystem.ShowHelp('ut_SelfInfo', '');
//#UC END# *5261518F02B3_4B5430390380_impl*
//#UC START# *5261518F02B3_4B5430390380_var*
//#UC END# *5261518F02B3_4B5430390380_var*
//#UC START# *526151A2028E_4B5430390380_impl*
 with Sender as TPaintBox do
  nsSearchRes.ImageList16x16.Draw(Canvas, width - c_SmallSizeIcon, (Height - c_SmallSizeIcon) div 2, c_srchHelp);
//#UC END# *526151A2028E_4B5430390380_impl*
//#UC START# *526151A2028E_4B5430390380_var*
//#UC END# *526151A2028E_4B5430390380_var*
//#UC START# *5261520B011E_4B5430390380_impl*
 Info.IsChanged := True;

 l_Result := True;
 // Подсветим красным
 edLogin.TextValid := nsLoginVerify.Verify(edLogin.Text);
 edPassword.TextValid := nsPasswordVerify.Verify(edPassword.Text);
 edEmail.TextValid := nsEmailVerify.Verify(edEmail.Text);
 edConfirm.TextValid := nsPasswordVerify.Verify(edConfirm.Text) and l3Same(edConfirm.Text, edPassword.Text);
 // Логин
 if l3IsNil(edLogin.Text) then
  l_Result := False
 else
 // ФИО пользователя
 if l3IsNil(edUserName.Text) then
  l_Result := False;

 RegisterButton.Enabled := l_Result;
//#UC END# *5261520B011E_4B5430390380_impl*
//#UC START# *5261520B011E_4B5430390380_var*
var
 l_Result : Boolean;
//#UC END# *5261520B011E_4B5430390380_var*
//#UC START# *5261521202EE_4B5430390380_impl*
 f_PasswordChanged := False;

 if Info = nil then
  Exit;
  
 edLogin.TextValid := True;
 edPassword.TextValid := True;
 edEmail.TextValid := True;
 edConfirm.TextValid := True;
 if Info.HasPassword then
 begin
  edPassword.Text := nsCStr(cHasPassword);
  edConfirm.Text := nsCStr(cHasPassword);
 end
 else
 begin
  edPassword.Text := nil;
  edConfirm.Text := nil;
 end;

 edLogin.Text := Info.Login;
 edLogin.Enabled := False;
 edUserName.Text := Info.Name;
 edEmail.Text := Info.Mail;
//#UC END# *5261521202EE_4B5430390380_impl*
//#UC START# *5261521202EE_4B5430390380_var*
//#UC END# *5261521202EE_4B5430390380_var*
//#UC START# *5261521D0133_4B5430390380_impl*
 if not l3Same(edPassword.Text, edConfirm.Text) then
 begin
  lpClearPassword;
  vcmAsk(err_PasswordAndConfirmNotSame);
  Exit;
 end
 else
 if not nsPasswordVerify.Verify(edPassword.Text) then
 begin
  lpClearPassword;
  vcmAsk(err_PasswordHasErrorSimbols);
  Exit;
 end
 else
 // Поле ФИО
 if l3IsNil(edUserName.Text) then
 begin
  lpSetFocus(edUserName);
  vcmAsk(err_SurnameNotDefined);
  Exit;
 end
 else
 // Email
 if not l3IsNil(edEmail.Text) and not nsEmailVerify.Verify(edEmail.Text) then
 begin
  lpSetFocus(edEmail);
  vcmAsk(err_EmailNotValid);
  Exit;
 end;

 if l3Same(edPassword.Text, cHasPassword) then
 try
  Info.SaveUserInfo(l3PCharLen(edUserName.Text),
                    l3PCharLen(edEmail.Text),
                    cc_EmptyStr)
 except
  on ENoMoreProfiles do
   Say(err_UsersLicenceViolation);
  on ENoMorePrivilegedProfiles do
   Say(err_PrivilegedUsersLicenceViolation);
 end
 else
 try
  Info.SaveUserInfo(l3PCharLen(edUserName.Text),
                    l3PCharLen(edEmail.Text),
                    l3PCharLen(edPassword.Text),
                    f_PasswordChanged);
  if f_PasswordChanged then
   defDataAdapter.RegistryPassword := l3Str(edPassword.Text);
 except
  on ENoMoreProfiles do
   Say(err_UsersLicenceViolation);
  on ENoMorePrivilegedProfiles do
   Say(err_PrivilegedUsersLicenceViolation);
 end;
 ModalResult := mrOk;
//#UC END# *5261521D0133_4B5430390380_impl*
//#UC START# *5261521D0133_4B5430390380_var*
  procedure lpSetFocus(aEdit : TnscComboBox);
  begin
   with aEdit do
   begin
    SelectAll;
    SetFocus;
   end;
  end;

  procedure lpClearPassword;
  begin
   edPassword.Text := nil;
   edConfirm.Text  := nil;
   lpSetFocus(edPassword);
  end;
//#UC END# *5261521D0133_4B5430390380_var*
//#UC START# *526152250198_4B5430390380_impl*
 if (Message.CharCode = VK_ESCAPE) and (fsModal in FormState) then
 begin
  ModalResult := mrCancel;
  Message.Result := 1;
 end else
  inherited;
//#UC END# *526152250198_4B5430390380_impl*
//#UC START# *526152250198_4B5430390380_var*
//#UC END# *526152250198_4B5430390380_var*
//#UC START# *529332B40230_4B5430390380_impl*
 inherited;
 BorderIcons := [biSystemMenu];
 BorderStyle := bsSingle;
 ClientHeight := 188;
 ClientWidth := 476;
 Position := poScreenCenter;
 ActiveControl := edPassword;
 InitUserFields;
//#UC END# *529332B40230_4B5430390380_impl*
//#UC START# *529332B40230_4B5430390380_var*
//#UC END# *529332B40230_4B5430390380_var*
