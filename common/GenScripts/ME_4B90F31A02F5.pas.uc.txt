//#UC START# *47A6FEE600FC_4B90F31A02F5_impl*
  Result := true;
//#UC END# *47A6FEE600FC_4B90F31A02F5_impl*
//#UC START# *47A6FEE600FC_4B90F31A02F5_var*
//#UC END# *47A6FEE600FC_4B90F31A02F5_var*
//#UC START# *4B90F31A02F5_ext:FileName
w:\quality\test\garant6x\AdapterTest\SearchHelpers\atSearchHelperBase.pas
//#UC END# *4B90F31A02F5_ext:FileName
//#UC START# *4B910130021C_4B90F31A02F5_impl*
  inherited Create;
  //
  Assert(aSearch <> nil, 'aSearch <> nil');
  f_Search := aSearch;
//#UC END# *4B910130021C_4B90F31A02F5_impl*
//#UC START# *4B910130021C_4B90F31A02F5_var*
//#UC END# *4B910130021C_4B90F31A02F5_var*
//#UC START# *4B91013A0057_4B90F31A02F5_impl*
  // предполагается, что запрос корректно сформирован
  // выполняем запрос
  with TatQueryExecutor.Create(f_Query.Query) do
  try
    l_SearchResult := Execute;
  finally
    Free;
  end;
  // проверяем, что что-то нашли
  Result :=
    (l_SearchResult <> nil)
    AND (l_SearchResult.GetResultType = SRT_DOCUMENT_LIST)
    AND (l_SearchResult.GetDocumentCount > 0);
  if Result then
  begin
    if NOT Supports(l_SearchResult, ISearchDynList, theList) then
      Raise Exception.Create('l_SearchResult не поддерживает интерфейс ISearchDynList!');
    //
    f_Query.Query.Clone(l_QueryForJournal);
    TatUserJournalHelper.AddQuery(l_QueryForJournal);
  end;
//#UC END# *4B91013A0057_4B90F31A02F5_impl*
//#UC START# *4B91013A0057_4B90F31A02F5_var*
  var
    l_SearchResult : ISearchEntity;
    l_QueryForJournal : IQuery;
//#UC END# *4B91013A0057_4B90F31A02F5_var*
//#UC START# *5000565C019C_4B90F31A02F5_impl*
  FreeAndNil(f_Query);
  f_Search := nil;
  //
  inherited;
//#UC END# *5000565C019C_4B90F31A02F5_impl*
//#UC START# *5000565C019C_4B90F31A02F5_var*
//#UC END# *5000565C019C_4B90F31A02F5_var*
