//#UC START# *4B2F40FD0088_4DAECE5D0060_impl*
 f_DontRaiseIfEtalonCreated := False;
 FreeAndNil(f_Output);
 inherited;
//#UC END# *4B2F40FD0088_4DAECE5D0060_impl*
//#UC START# *4B2F40FD0088_4DAECE5D0060_var*
//#UC END# *4B2F40FD0088_4DAECE5D0060_var*
//#UC START# *4B30EEA10210_4DAECE5D0060_impl*
 f_DontRaiseIfEtalonCreated := False;
//#UC END# *4B30EEA10210_4DAECE5D0060_impl*
//#UC START# *4B30EEA10210_4DAECE5D0060_var*
//#UC END# *4B30EEA10210_4DAECE5D0060_var*
//#UC START# *4CA45DAA01BA_4DAECE5D0060_impl*
 Result := Tl3EtalonsService.Instance.EtalonNeedsComputerName;
//#UC END# *4CA45DAA01BA_4DAECE5D0060_impl*
//#UC START# *4CA45DAA01BA_4DAECE5D0060_var*
//#UC END# *4CA45DAA01BA_4DAECE5D0060_var*
//#UC START# *4CA5DAD4014C_4DAECE5D0060_impl*
 Result := not f_DontRaiseIfEtalonCreated;
//#UC END# *4CA5DAD4014C_4DAECE5D0060_impl*
//#UC START# *4CA5DAD4014C_4DAECE5D0060_var*
//#UC END# *4CA5DAD4014C_4DAECE5D0060_var*
//#UC START# *4DAF1A280116_4DAECE5D0060_impl*
 inherited Check(aCondition, aMessage);
//#UC END# *4DAF1A280116_4DAECE5D0060_impl*
//#UC START# *4DAF1A280116_4DAECE5D0060_var*
//#UC END# *4DAF1A280116_4DAECE5D0060_var*
//#UC START# *4DB03121022B_4DAECE5D0060_impl*
 if ANSIStartsText('@\', aFileName) then
  Result := FileFromCurrent('Common\' + Copy(aFileName, 3, Length(aFileName)-2))
 else 
 if (ExtractFilePath(aFileName) <> '') then
  Result := aFileName
 else
  Result := FileFromCurrent('Scripts\' + aFileName);
//#UC END# *4DB03121022B_4DAECE5D0060_impl*
//#UC START# *4DB03121022B_4DAECE5D0060_var*
//#UC END# *4DB03121022B_4DAECE5D0060_var*
//#UC START# *4DB0333103BF_4DAECE5D0060_impl*
 ScriptFromFile(GetScriptName);
//#UC END# *4DB0333103BF_4DAECE5D0060_impl*
//#UC START# *4DB0333103BF_4DAECE5D0060_var*
//#UC END# *4DB0333103BF_4DAECE5D0060_var*
//#UC START# *4DB173AA005A_4DAECE5D0060_impl*
 //ToLog(l3Str(aStr));
 if not l3IsANSI(aStr.SCodePage) then
 begin
  l_S := Tl3_String.Make(aStr);
  try
   l_S.CodePage := CP_ANSI;
   Print(l_S.AsWStr);
   Exit;
  finally
   FreeAndNil(l_S);
  end;//try..finally
 end;//not l3IsANSI(aStr.SCodePage)
 if (f_Output = nil) then
 begin
  f_Output := FilerForOutput;
  f_Output.Open;
 end;//f_Output = nil
 f_Output.WriteLn(aStr);
//#UC END# *4DB173AA005A_4DAECE5D0060_impl*
//#UC START# *4DB173AA005A_4DAECE5D0060_var*
var
 l_S : Tl3_String;
//#UC END# *4DB173AA005A_4DAECE5D0060_var*
//#UC START# *4DB1785F011A_4DAECE5D0060_impl*
 Print(l3PCharLen(aStr));
//#UC END# *4DB1785F011A_4DAECE5D0060_impl*
//#UC START# *4DB1785F011A_4DAECE5D0060_var*
//#UC END# *4DB1785F011A_4DAECE5D0060_var*
//#UC START# *4DC263E8038F_4DAECE5D0060_impl*
 Result := ClassName + '.script';
//#UC END# *4DC263E8038F_4DAECE5D0060_impl*
//#UC START# *4DC263E8038F_4DAECE5D0060_var*
//#UC END# *4DC263E8038F_4DAECE5D0060_var*
//#UC START# *4DC2E1040098_4DAECE5D0060_impl*
 if ANSIStartsText('@\', aFile) then
  Result := FileFromCurrent('Common\' + Copy(aFile, 3, Length(aFile)-2))
 else 
 if (ExtractFileDrive(aFile) <> '') OR
    AnsiStartsText('axiom:', aFile) then
 begin
  Result := aFile;
  if (Length(Result) > 2) then
   if (Result[2] = ':') then
    l3MakeLowerCase(@Result[1], 1);
 end//ExtractFileDrive(aFile) <> ''
 else
  Result := FileFromCurrent('Dictionary\' + aFile);
//#UC END# *4DC2E1040098_4DAECE5D0060_impl*
//#UC START# *4DC2E1040098_4DAECE5D0060_var*
//#UC END# *4DC2E1040098_4DAECE5D0060_var*
//#UC START# *4DC2E1470046_4DAECE5D0060_impl*
 Result := DoResolveIncludedFilePath(aFile);
//#UC END# *4DC2E1470046_4DAECE5D0060_impl*
//#UC START# *4DC2E1470046_4DAECE5D0060_var*
//#UC END# *4DC2E1470046_4DAECE5D0060_var*
//#UC START# *4DCA421B0227_4DAECE5D0060_impl*
 if (f_Output <> nil) then
 begin
  try
   f_Output.Close;
   if not aWasException AND not CompileOnly then
    CheckOutputWithInput(ChangeFileExt(
                          ExtractFileName(f_Output.Identifier),
                          EtalonSuffix) + '.prn',
                         #0,
                         '',
                         IsWritingToK
                         // - не надо падать при различии в эталонах, идём дальше
                         );
  finally
   FreeAndNil(f_Output);
  end;//try..finally
 end//f_Output <> nil
 else
 if not aWasException AND not CompileOnly then
 begin
  l_FileName := ChangeFileExt(FileForOutput, EtalonSuffix) + '.prn';
  l_Exists := FileExists(l_FileName);
  if not IsWritingToK then
  begin
   if l_Exists then
   begin
    if DeleteFile(l_FileName) then
     Assert(false,
            Format('Файл %s не должен существовать. Он был стёрт',
                   [l_FileName]))
    else
     Assert(false,
            Format('Не удалось стереть файл %s',
                   [l_FileName]));
   end;//l_Exists
   l_CVSPath := g_CVSPath + '\' + TBaseTest.TestSetFolderName + '\';
   if DirectoryExists(l_CVSPath) then
   begin
    l_FileName := l_CVSPath + ExtractFileName(l_FileName);
    l_Exists := FileExists(l_FileName);
    if l_Exists then
    begin
     if DeleteFile(l_FileName) then
      Assert(false,
             Format('Файл %s не должен существовать. Он был стёрт',
                    [l_FileName]))
     else
      Assert(false,
             Format('Не удалось стереть файл %s',
                    [l_FileName]));
    end;//l_Exists
   end;//DirectoryExists(l_CVSPath)
  end//not IsWritingToK
  else
  if not IsGK then
  // - это чтобы облегчить поиск ошибки про удаление эталонов у Владимира Селянкина
   Assert(not l_Exists,
          Format('Файл %s не должен существовать',
                 [l_FileName]));
 end;//f_Output <> nil
//#UC END# *4DCA421B0227_4DAECE5D0060_impl*
//#UC START# *4DCA421B0227_4DAECE5D0060_var*
var
 l_FileName : String;
 l_Exists   : Boolean;
 l_CVSPath  : String;
//#UC END# *4DCA421B0227_4DAECE5D0060_var*
//#UC START# *4DCA915C0120_4DAECE5D0060_impl*
 Result := DoResolveOutputFilePath(aFile);
//#UC END# *4DCA915C0120_4DAECE5D0060_impl*
//#UC START# *4DCA915C0120_4DAECE5D0060_var*
//#UC END# *4DCA915C0120_4DAECE5D0060_var*
//#UC START# *4DCA92D403C9_4DAECE5D0060_impl*
 if (ExtractFilePath(aFile) <> '') then
  Result := aFile
 else
  Result := OutputPath + aFile;
//#UC END# *4DCA92D403C9_4DAECE5D0060_impl*
//#UC START# *4DCA92D403C9_4DAECE5D0060_var*
//#UC END# *4DCA92D403C9_4DAECE5D0060_var*
//#UC START# *4DECF57B02D2_4DAECE5D0060_impl*
 Result := DoResolveInputFilePath(aFile);
//#UC END# *4DECF57B02D2_4DAECE5D0060_impl*
//#UC START# *4DECF57B02D2_4DAECE5D0060_var*
//#UC END# *4DECF57B02D2_4DAECE5D0060_var*
//#UC START# *4DECF5A5003B_4DAECE5D0060_impl*
 Result := FileFromCurrent(aFile);
//#UC END# *4DECF5A5003B_4DAECE5D0060_impl*
//#UC START# *4DECF5A5003B_4DAECE5D0060_var*
//#UC END# *4DECF5A5003B_4DAECE5D0060_var*
//#UC START# *4F0D7AC900FA_4DAECE5D0060_impl*
 l_N := ExtractFileName(aLogName);
 l_Counter := (Pos('.C_', l_N) > 0);
 if l_Counter then
  l_Extra := ''
 else
  l_Extra := ChangeFileExt(l_N, '.png');
 try
  CheckOutputWithInput(FileFromCurrent(ChangeFileExt(l_N, EtalonSuffix + '.shapes')),
                       aOutputName,
                       #0,
                       EtalonNeedsComputerName,
                       EtalonCanHaveDiff,
                       l_Extra,
                       not l_Counter);
 except
  on ETestFailure do
  begin
   {$IFDEF InsiderTest}
   if TkwPrintDataSaver.Instance.IsWaitingPrint then
    TkwPrintDataSaver.Instance.GetPanel.Done;
   {$ENDIF InsiderTest}
   raise;
  end;
 end;
//#UC END# *4F0D7AC900FA_4DAECE5D0060_impl*
//#UC START# *4F0D7AC900FA_4DAECE5D0060_var*
var
 l_N : String;
 l_Extra : String;
 l_Counter : Boolean;
//#UC END# *4F0D7AC900FA_4DAECE5D0060_var*
//#UC START# *4F0D8B740186_4DAECE5D0060_impl*
 Result := inherited ShouldStop;
//#UC END# *4F0D8B740186_4DAECE5D0060_impl*
//#UC START# *4F0D8B740186_4DAECE5D0060_var*
//#UC END# *4F0D8B740186_4DAECE5D0060_var*
//#UC START# *4F0D8C360085_4DAECE5D0060_impl*
 inherited CheckTimeout(aNow, aTimeout);
//#UC END# *4F0D8C360085_4DAECE5D0060_impl*
//#UC START# *4F0D8C360085_4DAECE5D0060_var*
//#UC END# *4F0D8C360085_4DAECE5D0060_var*
//#UC START# *4F0D8C5A01A2_4DAECE5D0060_impl*
 Result := inherited StartTimer;
//#UC END# *4F0D8C5A01A2_4DAECE5D0060_impl*
//#UC START# *4F0D8C5A01A2_4DAECE5D0060_var*
//#UC END# *4F0D8C5A01A2_4DAECE5D0060_var*
//#UC START# *4F0D8CB0015D_4DAECE5D0060_impl*
 Result := inherited StopTimer(aSt, aSubName, aNeedTimeToLog);
//#UC END# *4F0D8CB0015D_4DAECE5D0060_impl*
//#UC START# *4F0D8CB0015D_4DAECE5D0060_var*
//#UC END# *4F0D8CB0015D_4DAECE5D0060_var*
//#UC START# *4F0D91AA0080_4DAECE5D0060_impl*
 Result := inherited KPage;
//#UC END# *4F0D91AA0080_4DAECE5D0060_impl*
//#UC START# *4F0D91AA0080_4DAECE5D0060_var*
//#UC END# *4F0D91AA0080_4DAECE5D0060_var*
//#UC START# *4F0DA2A7024A_4DAECE5D0060_impl*
 inherited ToLog(aSt);
//#UC END# *4F0DA2A7024A_4DAECE5D0060_impl*
//#UC START# *4F0DA2A7024A_4DAECE5D0060_var*
//#UC END# *4F0DA2A7024A_4DAECE5D0060_var*
//#UC START# *4F5F28EB0242_4DAECE5D0060_impl*
 Result := true;
//#UC END# *4F5F28EB0242_4DAECE5D0060_impl*
//#UC START# *4F5F28EB0242_4DAECE5D0060_var*
//#UC END# *4F5F28EB0242_4DAECE5D0060_var*
//#UC START# *4F72CEFE016D_4DAECE5D0060_impl*
 Result := IsWritingToK;
//#UC END# *4F72CEFE016D_4DAECE5D0060_impl*
//#UC START# *4F72CEFE016D_4DAECE5D0060_var*
//#UC END# *4F72CEFE016D_4DAECE5D0060_var*
//#UC START# *4F72CF27029A_4DAECE5D0060_impl*
 Result := IsFakeCVS;
//#UC END# *4F72CF27029A_4DAECE5D0060_impl*
//#UC START# *4F72CF27029A_4DAECE5D0060_var*
//#UC END# *4F72CF27029A_4DAECE5D0060_var*
//#UC START# *4F72CF78027D_4DAECE5D0060_impl*
 Result := g_CVSPath;
//#UC END# *4F72CF78027D_4DAECE5D0060_impl*
//#UC START# *4F72CF78027D_4DAECE5D0060_var*
//#UC END# *4F72CF78027D_4DAECE5D0060_var*
//#UC START# *4F851D7B0399_4DAECE5D0060_impl*
 f_DontRaiseIfEtalonCreated := True; 
//#UC END# *4F851D7B0399_4DAECE5D0060_impl*
//#UC START# *4F851D7B0399_4DAECE5D0060_var*
//#UC END# *4F851D7B0399_4DAECE5D0060_var*
//#UC START# *511BC7C60063_4DAECE5D0060_impl*
 inherited TimeToLog(aTime, aSt, aSubName, true);
//#UC END# *511BC7C60063_4DAECE5D0060_impl*
//#UC START# *511BC7C60063_4DAECE5D0060_var*
//#UC END# *511BC7C60063_4DAECE5D0060_var*
//#UC START# *513866B10237_4DAECE5D0060_impl*
 Result := TestSetFolderName;
//#UC END# *513866B10237_4DAECE5D0060_impl*
//#UC START# *513866B10237_4DAECE5D0060_var*
//#UC END# *513866B10237_4DAECE5D0060_var*
//#UC START# *5138790002FF_4DAECE5D0060_impl*
 Result := EtalonSuffix;
//#UC END# *5138790002FF_4DAECE5D0060_impl*
//#UC START# *5138790002FF_4DAECE5D0060_var*
//#UC END# *5138790002FF_4DAECE5D0060_var*
//#UC START# *51AF49E5001B_4DAECE5D0060_impl*
 Result := Tl3EtalonsService.Instance.EtalonNeedsXE;
//#UC END# *51AF49E5001B_4DAECE5D0060_impl*
//#UC START# *51AF49E5001B_4DAECE5D0060_var*
//#UC END# *51AF49E5001B_4DAECE5D0060_var*
//#UC START# *51AF4A1C036E_4DAECE5D0060_impl*
 Result := Tl3EtalonsService.Instance.EtalonNeedsOSName;
//#UC END# *51AF4A1C036E_4DAECE5D0060_impl*
//#UC START# *51AF4A1C036E_4DAECE5D0060_var*
//#UC END# *51AF4A1C036E_4DAECE5D0060_var*
//#UC START# *51B0AF8E0378_4DAECE5D0060_impl*
 Result := Tl3EtalonsService.Instance.EtalonNeeds64;
//#UC END# *51B0AF8E0378_4DAECE5D0060_impl*
//#UC START# *51B0AF8E0378_4DAECE5D0060_var*
//#UC END# *51B0AF8E0378_4DAECE5D0060_var*
//#UC START# *52EBC5BB0300_4DAECE5D0060_impl*
 Result := g_CompileOnly;
//#UC END# *52EBC5BB0300_4DAECE5D0060_impl*
//#UC START# *52EBC5BB0300_4DAECE5D0060_var*
//#UC END# *52EBC5BB0300_4DAECE5D0060_var*
