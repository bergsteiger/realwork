//#UC START# *4DC24566022C_ext:ParentFileName
w:\common\components\rtl\external\DUnit\src\NOT_FINISHED_TestFrameWork.pas
//#UC END# *4DC24566022C_ext:ParentFileName
//#UC START# *4DC28F0500F3_4DC24566022C_impl*
 DoAddTest(aTest);
//#UC END# *4DC28F0500F3_4DC24566022C_impl*
//#UC START# *4DC28F0500F3_4DC24566022C_var*
//#UC END# *4DC28F0500F3_4DC24566022C_var*
//#UC START# *4DC28F1301D6_4DC24566022C_impl*
 Assert(Assigned(aTest));
 if FSuffix = '' then
  FSuffix := aTest.GetSuffixName;
 FTests.Add(aTest);
//#UC END# *4DC28F1301D6_4DC24566022C_impl*
//#UC START# *4DC28F1301D6_4DC24566022C_var*
//#UC END# *4DC28F1301D6_4DC24566022C_var*
//#UC START# *4DC38C96018E_4DC24566022C_impl*
 { call on the method enumerator to get the names of the test
   cases in the testClass }
 l_MethodEnumerator := nil;
 try
  l_MethodEnumerator := TMethodEnumerator.Create(aTestClass);
  { make sure we add each test case  to the list of tests }
  for l_MethodIter := 0 to l_MethodEnumerator.MethodCount - 1 do
  begin
   l_NameOfMethod := l_MethodEnumerator.NameOfMethod[l_MethodIter];
   Self.AddTest(aTestClass.Create(l_NameOfMethod) as ITest);
  end; //  for l_MethodIter := 0 to l_MethodEnumerator.Methodcount - 1 do
 finally
  l_MethodEnumerator.Free;
 end;
//#UC END# *4DC38C96018E_4DC24566022C_impl*
//#UC START# *4DC38C96018E_4DC24566022C_var*
var
 l_MethodIter       : Integer;
 l_NameOfMethod     : string;
 l_MethodEnumerator : TMethodEnumerator;
//#UC END# *4DC38C96018E_4DC24566022C_var*
//#UC START# *4DDE29F101B1_4DC24566022C_impl*
 Assert(Assigned(aTestResult));
 Assert(Assigned(FTests));

 aTestResult.StartSuite(Self);
 for i := 0 to FTests.Count - 1 do
 begin
  if aTestResult.ShouldStop then Break;
  l_Test := FTests[i] as ITest;
  l_Test.RunWithFixture(aTestResult);
 end; // for i := 0 to FTests.Count - 1 do
 aTestResult.EndSuite(Self);
//#UC END# *4DDE29F101B1_4DC24566022C_impl*
//#UC START# *4DDE29F101B1_4DC24566022C_var*
var
 i      : Integer;
 l_Test : ITest;
//#UC END# *4DDE29F101B1_4DC24566022C_var*
//#UC START# *4F9A4FD70148_4DC24566022C_impl*
 !!! Needs to be implemented !!!
//#UC END# *4F9A4FD70148_4DC24566022C_impl*
//#UC START# *4F9A4FD70148_4DC24566022C_var*
//#UC END# *4F9A4FD70148_4DC24566022C_var*
//#UC START# *5040A3B80283_4DC24566022C_impl*
 !!! Needs to be implemented !!!
//#UC END# *5040A3B80283_4DC24566022C_impl*
//#UC START# *5040A3B80283_4DC24566022C_var*
//#UC END# *5040A3B80283_4DC24566022C_var*
//#UC START# *5040A3CE0118_4DC24566022C_impl*
 !!! Needs to be implemented !!!
//#UC END# *5040A3CE0118_4DC24566022C_impl*
//#UC START# *5040A3CE0118_4DC24566022C_var*
//#UC END# *5040A3CE0118_4DC24566022C_var*
//#UC START# *51B1DD8E0018_4DC24566022C_impl*
 !!! Needs to be implemented !!!
//#UC END# *51B1DD8E0018_4DC24566022C_impl*
//#UC START# *51B1DD8E0018_4DC24566022C_var*
//#UC END# *51B1DD8E0018_4DC24566022C_var*
