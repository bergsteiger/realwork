//#UC START# *478CF34E02CE_4E302F24003F_impl*
 if Source is TddVisualConfigItem then
 begin
  inherited;
  Hint := TddVisualConfigItem(Source).Hint;
  Labeled := TddVisualConfigItem(Source).Labeled;
  LabelTop := TddVisualConfigItem(Source).LabelTop;
 end
 else
  inherited;
//#UC END# *478CF34E02CE_4E302F24003F_impl*
//#UC START# *478CF34E02CE_4E302F24003F_var*
//#UC END# *478CF34E02CE_4E302F24003F_var*
//#UC START# *479731C50290_4E302F24003F_impl*
 try
  FreeAndNil(f_Slaves);
  ClearControl;
  inherited;
 finally
  f_Control := nil;
 end;//try..finally
//#UC END# *479731C50290_4E302F24003F_impl*
//#UC START# *479731C50290_4E302F24003F_var*
//#UC END# *479731C50290_4E302F24003F_var*
//#UC START# *4E302F24003F_ext:ParentFileName
w:\common\components\rtl\Garant\dd\ddAppConfigTypes.pas
//#UC END# *4E302F24003F_ext:ParentFileName
//#UC START# *52171D0D031D_4E302F24003F_impl*
 if Control <> nil then
  Control.Enabled := Enabled;
 if f_Label <> nil then
 begin
  f_Label.Enabled := Enabled;
  f_Label.Refresh;
 end;
 ChangeSlaveStatus(Enabled);
//#UC END# *52171D0D031D_4E302F24003F_impl*
//#UC START# *52171D0D031D_4E302F24003F_var*
//#UC END# *52171D0D031D_4E302F24003F_var*
//#UC START# *5217205002F2_4E302F24003Fget_impl*
 Result := inherited pm_GetChanged;
//#UC END# *5217205002F2_4E302F24003Fget_impl*
//#UC START# *5217205002F2_4E302F24003Fget_var*
//#UC END# *5217205002F2_4E302F24003Fget_var*
//#UC START# *5217205002F2_4E302F24003Fset_impl*
 (* ! ! ! ! Починить
 if not IsLocked and aValue and (Control <> nil) then
  begin
   Lock;
   try
    l3Move(f_Value, l_Value, SizeOf(TddConfigValue));
    GetValueFromControl;
    for I := 0 to f_NotifyList.Hi do
     TddBaseConfigItem(f_NotifyList.Items[I]).ProcessNotify(Value);
    l3Move(l_Value, f_Value, SizeOf(TddConfigValue));
   finally
    UnLock;
   end;
  end; // not IsLocked and aValue and (Control <> nil)
 *)
 inherited;
//#UC END# *5217205002F2_4E302F24003Fset_impl*
//#UC START# *5217205002F2_4E302F24003Fset_var*
var
 l_Value: TddConfigValue;
 I: Integer;
//#UC END# *5217205002F2_4E302F24003Fset_var*
//#UC START# *521725130281_4E302F24003Fget_impl*
 Result := inherited pm_GetValue; 
//#UC END# *521725130281_4E302F24003Fget_impl*
//#UC START# *521725130281_4E302F24003Fget_var*
//#UC END# *521725130281_4E302F24003Fget_var*
//#UC START# *521725130281_4E302F24003Fset_impl*
 if Control <> nil then
  Lock; // Иначе затирается выставленное значение
 try
  inherited;
 finally
  if Control <> nil then
   Unlock;
 end;
 if not IsLocked and (Control <> nil) then
  SetValueToControl(False);
//#UC END# *521725130281_4E302F24003Fset_impl*
//#UC START# *521725130281_4E302F24003Fset_var*
//#UC END# *521725130281_4E302F24003Fset_var*
//#UC START# *5217273F000F_4E302F24003F_impl*
 inherited Create(aAlias, aCaption, aDefaultValue, aMasterItem);
 f_LabelTop := True;
 MasterItem := aMasterItem;
 f_Control := nil;
 f_Label := nil;
 f_Locked := 0;
 Labeled := True;
 Visible := True;
//#UC END# *5217273F000F_4E302F24003F_impl*
//#UC START# *5217273F000F_4E302F24003F_var*
//#UC END# *5217273F000F_4E302F24003F_var*
//#UC START# *5217600501C4_4E302F24003Fget_impl*
 Result := f_Labeled;
//#UC END# *5217600501C4_4E302F24003Fget_impl*
//#UC START# *5217600501C4_4E302F24003Fget_var*
//#UC END# *5217600501C4_4E302F24003Fget_var*
//#UC START# *5217602C020A_4E302F24003Fget_impl*
 Result := f_LabelTop;
//#UC END# *5217602C020A_4E302F24003Fget_impl*
//#UC START# *5217602C020A_4E302F24003Fget_var*
//#UC END# *5217602C020A_4E302F24003Fget_var*
//#UC START# *5217602C020A_4E302F24003Fset_impl*
 if Pos('|', Caption) = 0 then
  f_LabelTop := aValue
 else
  f_LabelTop := False;
//#UC END# *5217602C020A_4E302F24003Fset_impl*
//#UC START# *5217602C020A_4E302F24003Fset_var*
//#UC END# *5217602C020A_4E302F24003Fset_var*
//#UC START# *521760660110_4E302F24003Fget_impl*
 Result := LabelHeight(aParent) + ControlHeight(aParent);
 if LabelTop then
  Inc(Result, c_ConfigItemTop);
//#UC END# *521760660110_4E302F24003Fget_impl*
//#UC START# *521760660110_4E302F24003Fget_var*
//#UC END# *521760660110_4E302F24003Fget_var*
//#UC START# *521760A4009E_4E302F24003F_impl*
 if (theLabel <> nil) then
 begin
  if theControl is TWinControl then
   theLabel.FocusControl := theControl as TWinControl;
  if not LabelTop then
   theLabel.Top := theControl.Top + c_ConfigItemTop;// (theControl.Height - theLabel.Height) div 2;
 end;
//#UC END# *521760A4009E_4E302F24003F_impl*
//#UC START# *521760A4009E_4E302F24003F_var*
//#UC END# *521760A4009E_4E302F24003F_var*
//#UC START# *521760C60369_4E302F24003F_impl*
 if theControl <> nil then
 begin
  theControl.Tag := AbsoluteIndex;
  theControl.Hint := Hint;
  AdjustLabel(theControl, theLabel);
 end; // theControl <> nil
//#UC END# *521760C60369_4E302F24003F_impl*
//#UC START# *521760C60369_4E302F24003F_var*
//#UC END# *521760C60369_4E302F24003F_var*
//#UC START# *5217612C01B6_4E302F24003F_impl*
 //
//#UC END# *5217612C01B6_4E302F24003F_impl*
//#UC START# *5217612C01B6_4E302F24003F_var*
//#UC END# *5217612C01B6_4E302F24003F_var*
//#UC START# *521761980131_4E302F24003F_impl*
  for I := 0 to Pred(f_Slaves.Count) do
   TddVisualConfigItem(f_Slaves.Items[I]).Enabled := aEnabled;
//#UC END# *521761980131_4E302F24003F_impl*
//#UC START# *521761980131_4E302F24003F_var*
var
 I: Integer;
//#UC END# *521761980131_4E302F24003F_var*
//#UC START# *5217620D0151_4E302F24003F_impl*
 SplitCaption(aCaption, l_Prefix, l_Suffix);
 if ((l_Prefix <> '') and (aLabelType in [dd_cilMain, dd_cilRequired])) or
    ((aLabelType = dd_cilAdditional) and (l_Suffix <> '')) then
 begin
  Result := TvtLabel.Create(aParent);
  aParent.InsertControl(Result);
  if aLabelType = dd_cilAdditional then
  begin
   aTop := f_Label.Top;
   if Control <> nil then
    aLeft := Control.Width + Control.Left + c_ConfigItemLeft;
  end
  else
  if aLabelType = dd_cilRequired then
   Result.Font.Name := ddRequiredFont;
  Result.Left := aLeft;
  Result.Top := aTop;
  if (aLabelType = dd_cilAdditional) then
  begin
   Result.CCaption := l3CStr(l_Suffix);
   if (Result.Width + Result.Left) > aParent.Width then
   begin
    Control.Width := Control.Width-Result.Width-c_ConfigItemLeft;
    Result.Left := Control.Width + Control.Left + c_ConfigItemLeft;
   end;
   AdjustLabel(Control, Result);
  end
  else
   Result.CCaption := l3CStr(l_Prefix);
  if aLabelType = dd_cilRequired then
   Result.Top := Result.Top + c_ConfigItemTop;
  Result.Tag := AbsoluteIndex;
  if f_Hint <> '' then
  begin
   Result.Hint := f_Hint;
   Result.ShowHint := True;
  end;
  if LabelTop and (aLabelType = dd_cilMain) then
   Inc(aTop, Result.Height + c_ConfigItemTop)
  else
  if aLabelType = dd_cilRequired then
   Inc(aLeft, Result.Width)
  else
   Inc(aLeft, Result.Width + c_ConfigItemLeft);
 end
 else
  Result := nil;
 case aLabelType of
  dd_cilMain: f_Label := Result;
  dd_cilRequired: f_RequiredLabel := Result;
 end;
//#UC END# *5217620D0151_4E302F24003F_impl*
//#UC START# *5217620D0151_4E302F24003F_var*
var
 l_Prefix,
 l_Suffix: AnsiString;
//#UC END# *5217620D0151_4E302F24003F_var*
//#UC START# *5217627A02E8_4E302F24003F_impl*
 l_Form := GetForm(aParent);
 l_Form.Canvas.Font := l_Form.Font;
 Result := l_Form.Canvas;
//#UC END# *5217627A02E8_4E302F24003F_impl*
//#UC START# *5217627A02E8_4E302F24003F_var*
var
 l_Form: TCustomForm;
//#UC END# *5217627A02E8_4E302F24003F_var*
//#UC START# *521B04400217_4E302F24003F_impl*
 if not (aParent is TCustomForm) then
 begin
  l_Parent := aParent.Parent;
  while (l_Parent <> nil) and not (l_Parent is TCustomForm) do
   l_Parent := l_Parent.Parent;
  Result := l_Parent as TCustomForm;
 end
 else
  Result := aParent as TCustomForm;
//#UC END# *521B04400217_4E302F24003F_impl*
//#UC START# *521B04400217_4E302F24003F_var*
var
  l_Parent: TControl;
//#UC END# *521B04400217_4E302F24003F_var*
//#UC START# *521B048C0198_4E302F24003F_impl*
 l_Pos := Pos('|', aCaption);
 if l_Pos > 0 then
 begin
  aPrefix := Copy(aCaption, 1, Pred(l_Pos));
  aSuffix := Copy(aCaption, Succ(l_Pos), Length(aCaption));
  if LabelTop then
  begin
   aPrefix := aPrefix + ', ' + aSuffix;
   aSuffix := '';
  end;
 end
 else
 begin
  aPrefix := aCaption;
  aSuffix := '';
 end;
//#UC END# *521B048C0198_4E302F24003F_impl*
//#UC START# *521B048C0198_4E302F24003F_var*
var
 l_Pos: Integer;
//#UC END# *521B048C0198_4E302F24003F_var*
//#UC START# *521B04BC01C6_4E302F24003F_impl*
 Result := Self = anItem;
//#UC END# *521B04BC01C6_4E302F24003F_impl*
//#UC START# *521B04BC01C6_4E302F24003F_var*
//#UC END# *521B04BC01C6_4E302F24003F_var*
//#UC START# *521B05280392_4E302F24003F_impl*
 f_Control := nil;
 f_Label := nil;
 f_FirstLabel := nil; // NEW ! ! !
//#UC END# *521B05280392_4E302F24003F_impl*
//#UC START# *521B05280392_4E302F24003F_var*
//#UC END# *521B05280392_4E302F24003F_var*
//#UC START# *521B0563000D_4E302F24003F_impl*
 l_Label := nil;
 BeforeConstruct(aLeft, aMaxLeft, aTop, aParent);
 if Labeled then
 begin
  l_Label := Createlabel(aParent, Caption, aLeft, aTop, dd_cilMain);
  if (l_Label <> nil) and not LabelTop then
  begin
   if (aMaxLeft = 0) then
    aLeft := l_Label.Width + l_Label.Left + c_ConfigItemLeft
   else
    aLeft := aMaxLeft;
  end; // not LabelTop
 end;
 if MayBeRequired then
  if IsRequired then
   CreateLabel(aParent, ddRequiredSign, aLeft, aTop, dd_cilRequired).Font.Color := clRed
  else
   Inc(aLeft, RequiredSignWidth(aParent));
 f_Control := ConstructControl(aLeft, aMaxLeft, aTop, aParent);
 {.$IFDEF Nemesis}
 if Labeled then
  Createlabel(aParent, Caption, aLeft, aTop, dd_cilAdditional);
 {.$ENDIF}
 AfterConstruct(aLeft, aMaxLeft, aTop, f_Control, l_Label);
 DoEnabled;
 if Control <> nil then
  AdjustReadOnly(Control);
 Result := Control;
//#UC END# *521B0563000D_4E302F24003F_impl*
//#UC START# *521B0563000D_4E302F24003F_var*
var
 l_Label: TvtLabel;
 l_Caption: AnsiString;
//#UC END# *521B0563000D_4E302F24003F_var*
//#UC START# *521B05BF02BE_4E302F24003F_impl*
 if (Caption = '') or not LabelTop then
  Result := 0
 else
 begin
  l_Label := TvtLabel.Create(nil);
  try
   l_Label.Parent := aParent;
   l_Label.CCaption := l3CStr(Caption);
   Result := l_Label.Height;
  finally
   FreeAndNil(l_Label);
  end;
 end;
//#UC END# *521B05BF02BE_4E302F24003F_impl*
//#UC START# *521B05BF02BE_4E302F24003F_var*
var
 l_Label: TvtLabel;
//#UC END# *521B05BF02BE_4E302F24003F_var*
//#UC START# *521B05DF00FC_4E302F24003F_impl*
 SplitCaption(Caption, l_P, l_S);
 if l_P = '' then
  Result := 0
 else
 begin
  l_Label := TvtLabel.Create(nil);
  try
   l_Label.Parent := aParent;
   l_Label.CCaption := l3CStr(l_P + IfThen(MayBeRequired,' '{Поле для звездочки}, ''));
   Result := l_Label.Width + c_ConfigItemLeft;
  finally
   FreeAndNil(l_Label);
  end;
 end;
//#UC END# *521B05DF00FC_4E302F24003F_impl*
//#UC START# *521B05DF00FC_4E302F24003F_var*
var
 l_Label: TvtLabel;
 l_P, l_S: AnsiString;
//#UC END# *521B05DF00FC_4E302F24003F_var*
//#UC START# *521B061A0387_4E302F24003F_impl*
 Result := 0;
//#UC END# *521B061A0387_4E302F24003F_impl*
//#UC START# *521B061A0387_4E302F24003F_var*
//#UC END# *521B061A0387_4E302F24003F_var*
//#UC START# *552BA9B9039B_4E302F24003F_impl*
 if Assigned(f_Control) then
  AdjustReadOnly(f_Control);
//#UC END# *552BA9B9039B_4E302F24003F_impl*
//#UC START# *552BA9B9039B_4E302F24003F_var*
//#UC END# *552BA9B9039B_4E302F24003F_var*
//#UC START# *552BB745031E_4E302F24003F_impl*
// DoNothing
//#UC END# *552BB745031E_4E302F24003F_impl*
//#UC START# *552BB745031E_4E302F24003F_var*
//#UC END# *552BB745031E_4E302F24003F_var*
