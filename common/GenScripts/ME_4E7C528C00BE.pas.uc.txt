//#UC START# *4E7C52D400DA_4E7C528C00BE_impl*
 Result := nil;
 if (aStatus > 0) then
 begin
  if (l3BitCount(aStatus) = 1) then
  begin
   Case aStatus of
    CS_DELETED:
     Result := l3Cat([str_csDocument.AsCStr, l3CStr(#32), str_csDeleted.AsCStr]);
    CS_ACTIVE:
     Result := l3Cat([str_csDocument.AsCStr, l3CStr(#32), str_csActive.AsCStr]);
    CS_CHANGED:
     Result := l3Cat([str_csDocument.AsCStr, l3CStr(#32), str_csChanged.AsCStr]);
    CS_ABOLISHED:
     Result := l3Cat([str_csDocument.AsCStr, l3CStr(#32), str_csAbolished.AsCStr]);
    CS_REGISTERED:
     Result := l3Cat([str_csDocument.AsCStr, l3CStr(#32), str_csRegistered.AsCStr]);
    CS_NOT_REGISTERED:
     Result := l3Cat([str_csDocumentu.AsCStr, l3CStr(#32), str_csNotRegistered.AsCStr]);
    else
     Assert(false);
   end;//Case aStatus
  end//l3BitCount(aStatus) = 1
  else
  begin
   if (aStatus and CS_NOT_REGISTERED = CS_NOT_REGISTERED) then
   begin
    AddSeparator;
    Result := l3Cat([Result, str_csNotRegistered.AsCStr])
   end;//aStatus and CS_NOT_REGISTERED = CS_NOT_REGISTERED)
   if (aStatus and CS_REGISTERED = CS_REGISTERED) then
   begin
    AddSeparator;
    Result := l3Cat([Result, str_csRegistered.AsCStr])
   end;//aStatus and CS_REGISTERED = CS_REGISTERED
   if (aStatus and CS_ACTIVE = CS_ACTIVE) then
   begin
    AddSeparator;
    Result := l3Cat([Result, str_csActive.AsCStr]);
   end;//aStatus and CS_ACTIVE = CS_ACTIVE
   if (aStatus and CS_CHANGED = CS_CHANGED) then
   begin
    AddSeparator;
    Result := l3Cat([Result, str_csChanged.AsCStr]);
   end;//aStatus and CS_CHANGED = CS_CHANGED
   if (aStatus and CS_ABOLISHED = CS_ABOLISHED) then
   begin
    AddSeparator;
    Result := l3Cat([Result, str_csAbolished.AsCStr])
   end;//aStatus and CS_ABOLISHED = CS_ABOLISHED
   if (aStatus and CS_DELETED = CS_DELETED) then
   begin
    AddSeparator;
    Result := l3Cat([Result, str_csDeleted.AsCStr]);
   end;//aStatus and CS_ACTIVE = CS_ACTIVE
   l3MakeUpperCase(Result.AsWStr.S, 1);
   if aNeedPrefix then
    Result := l3Cat([str_csDocumentEvents.AsCStr, l3CStr(#13#10), Result]);
  end;//l3BitCount(aStatus) = 1
 end;//if aStatus > 0 then
//#UC END# *4E7C52D400DA_4E7C528C00BE_impl*
//#UC START# *4E7C52D400DA_4E7C528C00BE_var*

 procedure AddSeparator;
 begin
  if not l3IsNil(Result) then
   Result := l3Cat(Result, ', ');
(*   Result := l3Cat(Result, ','#10);*)
 end;

//#UC END# *4E7C52D400DA_4E7C528C00BE_var*
//#UC START# *4E7C531601A3_4E7C528C00BE_impl*
 if (aUC <> nil) AND aUC.HasControlStatus then
 begin
  l_Status := aUC.ControlStatus;
  if (l_Status > 0) then
  begin
   if (l_Status and CS_DELETED = CS_DELETED) then
    Result := vcmFmt(str_csDeletedStatusChanged,
                    [bsControlStatusHint(l_Status, false)])
   else
    Result := vcmFmt(str_csStatusChanged,
                    [bsControlStatusHint(l_Status, false)]);
  end//l_Status > 0
  else
   Result := nil;
 end//aUC.HasControlStatus
 else
  Result := nil;
//#UC END# *4E7C531601A3_4E7C528C00BE_impl*
//#UC START# *4E7C531601A3_4E7C528C00BE_var*
var
 l_Status : Integer;
//#UC END# *4E7C531601A3_4E7C528C00BE_var*
