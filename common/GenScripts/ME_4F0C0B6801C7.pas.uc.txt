//#UC START# *4F79CEDF005A_4F0C0B870141_impl*
 if ((aMouseMessage = WM_LBUTTONDOWN) or (aMouseMessage = WM_NCLBUTTONDOWN) or
     (aMouseMessage = WM_RBUTTONDOWN) or (aMouseMessage = WM_NCRBUTTONDOWN) or
     (aMouseMessage = WM_RBUTTONUP) or (aMouseMessage = WM_NCRBUTTONUP)) and
    f_PrevMRecurse then
  Exit;

 try
  f_PrevMRecurse := True;
  try
   if (aMouseMessage = WM_LBUTTONDOWN) or (aMouseMessage = WM_NCLBUTTONDOWN) then
    if GetKeyState(VK_MENU) < 0 then
    begin
     DestCtrl := FindDragTarget(aHookStruct.Pt, False);
     try
      If (DestCtrl <> nil) then Self.DoDrop(DestCtrl);
     except
      theResult.Result := 0;
     end;
     Exit;
    end;

   if (aMouseMessage = WM_RBUTTONDOWN) or (aMouseMessage = WM_NCRBUTTONDOWN) then
    if GetKeyState(VK_MENU) < 0 then
    begin
     f_NeedStop := True;
     theResult.Result := 1;
     theResult.Handled := True;
     Exit;
    end;

   if (aMouseMessage = WM_RBUTTONUP) or (aMouseMessage = WM_NCRBUTTONUP) then
   begin
    if f_NeedStop then
    begin
     f_NeedStop := False;
     if GetKeyState(VK_MENU) < 0 then
     begin
      Self.Stop(False);
      //PMouseHookStruct(LParam)^.hwnd := 0;
      theResult.Result := 1;
      theResult.Handled := True;
      Exit;
     end;
    end;
   end;
  finally
   f_PrevMRecurse := False;
  end;
 except
  on E: Exception do
   l3System.Exception2Log(E);
 end;
//#UC END# *4F79CEDF005A_4F0C0B870141_impl*
//#UC START# *4F79CEDF005A_4F0C0B870141_var*
var
 DestCtrl: TControl;
//#UC END# *4F79CEDF005A_4F0C0B870141_var*
//#UC START# *4F79CF3400BB_4F0C0B870141_impl*
 if (Msg.message = WM_SETCURSOR) and (SmallInt(Msg.lParam) = HTCLIENT) then
 try
  Windows.SetCursor(DCursor);
  Msg.message := WM_NULL;
  theResult.Result := 1;
  theResult.Handled := True;
 except
  on E: Exception do
   l3System.Exception2Log(E);
 end;
//#UC END# *4F79CF3400BB_4F0C0B870141_impl*
//#UC START# *4F79CF3400BB_4F0C0B870141_var*
//#UC END# *4F79CF3400BB_4F0C0B870141_var*
//#UC START# *4F79CF9200A0_4F0C0B870141_impl*
 if (Msg.message = WM_SETCURSOR) and (SmallInt(Msg.lParam) = HTCLIENT) then
 try
  Windows.SetCursor(DCursor);
 except
  on E: Exception do
   l3System.Exception2Log(E);
 end;
//#UC END# *4F79CF9200A0_4F0C0B870141_impl*
//#UC START# *4F79CF9200A0_4F0C0B870141_var*
//#UC END# *4F79CF9200A0_4F0C0B870141_var*
//#UC START# *552FD2B903C5_4F0C0B870141set_impl*
 f_DragDataType := aValue;
 lCursor := 0;
 if Assigned(f_OnGetCursorByType) then
 begin
  lCursor := f_OnGetCursorByType(f_DragDataType);
  if lCursor > 0 then
   f_DCursor := lCursor;
 end;
 if lCursor = 0 then
  f_DCursor := Screen.Cursors[crDefault];
//#UC END# *552FD2B903C5_4F0C0B870141set_impl*
//#UC START# *552FD2B903C5_4F0C0B870141set_var*
var
 lCursor: HCURSOR;
//#UC END# *552FD2B903C5_4F0C0B870141set_var*
//#UC START# *552FD48A0290_4F0C0B870141set_impl*
 CheckInProgress;
 Stop(False);
 f_DragData := aValue;
//#UC END# *552FD48A0290_4F0C0B870141set_impl*
//#UC START# *552FD48A0290_4F0C0B870141set_var*
//#UC END# *552FD48A0290_4F0C0B870141set_var*
//#UC START# *552FDEE30376_4F0C0B870141_impl*
 if Win32Platform = VER_PLATFORM_WIN32_NT
  then Tl3ListenersManager.AddWndProcRetListener(Self)
  else Tl3ListenersManager.AddWndProcListener(Self);   
 Tl3ListenersManager.AddMouseListener(Self);
//#UC END# *552FDEE30376_4F0C0B870141_impl*
//#UC START# *552FDEE30376_4F0C0B870141_var*
//#UC END# *552FDEE30376_4F0C0B870141_var*
//#UC START# *552FDEFB010E_4F0C0B870141_impl*
 Tl3ListenersManager.RemoveWndProcRetListener(Self);
 Tl3ListenersManager.RemoveWndProcListener(Self);
 Tl3ListenersManager.RemoveMouseListener(Self);
//#UC END# *552FDEFB010E_4F0C0B870141_impl*
//#UC START# *552FDEFB010E_4F0C0B870141_var*
//#UC END# *552FDEFB010E_4F0C0B870141_var*
//#UC START# *552FDF3003B5_4F0C0B870141_impl*
 Result := False;
 lShiftMode := GetKeyState(VK_SHIFT) < 0;

 if f_DragState = dsActive then
 try
  Windows.SetCursor(Screen.Cursors[crHourGlass]);
  if aDestControl <> nil then
  begin
   try
    Result := aDestControl.Perform(wm_DropAccept, DragDataType, Integer(Self)) <> 0;
   except
    Result := False;
   end;
   if not Result then
   begin
    lParentForm := GetParentForm(aDestControl);

    if lParentForm <> nil then
    try
     Result := lParentForm.Perform(wm_DropAccept, DragDataType, Integer(aDestControl)) > 0;
    except
     Result := False;
    end;
   end;
  end
  else
   Result := True;
  if Result and (f_SourceControl <> nil) then
  begin
   Pause;
   Result := f_SourceControl.Perform(wm_DropAccepted, DragDataType, Integer(Self)) >= 0;
  end;

  if Result and not lShiftMode then
   Stop(True);

 finally
  Restore; // if was paused
  Windows.SetCursor(DCursor);
 end;
//#UC END# *552FDF3003B5_4F0C0B870141_impl*
//#UC START# *552FDF3003B5_4F0C0B870141_var*
var
 lParentForm: TCustomForm;
 lShiftMode: Boolean;
//#UC END# *552FDF3003B5_4F0C0B870141_var*
//#UC START# *552FDF5D03B3_4F0C0B870141_impl*
 RunDragData(SrcControl);
 while f_DragState in cnActiveState do
  afw.ProcessMessages;
 Result := f_DragSuccess;
//#UC END# *552FDF5D03B3_4F0C0B870141_impl*
//#UC START# *552FDF5D03B3_4F0C0B870141_var*
//#UC END# *552FDF5D03B3_4F0C0B870141_var*
//#UC START# *552FDF8E01C9_4F0C0B870141_impl*
 f_PrevMRecurse := False;
 f_PrevWRecurse := False;
 f_NeedStop := False;

 CheckInProgress;
 f_SourceControl := SrcControl;
 InitListeners;
 Windows.SetCursor(DCursor);
 f_DragSuccess := False;
 f_DragState := dsActive;
//#UC END# *552FDF8E01C9_4F0C0B870141_impl*
//#UC START# *552FDF8E01C9_4F0C0B870141_var*
//#UC END# *552FDF8E01C9_4F0C0B870141_var*
//#UC START# *552FDFF10077_4F0C0B870141_impl*
 if f_DragState in cnActiveState then
 begin
  f_DragState := dsPassive;
  f_DragSuccess := aSuccess;
  RemoveListeners;
  //SetCaptureControl(nil); //fix problem with csCaptureMouse
  DragDataType := 0;
  //Windows.SetCursor(Screen.Cursors[crDefault]);
  if Assigned(f_OnDragStop) then
   f_OnDragStop(Self);
 end;
//#UC END# *552FDFF10077_4F0C0B870141_impl*
//#UC START# *552FDFF10077_4F0C0B870141_var*
//#UC END# *552FDFF10077_4F0C0B870141_var*
//#UC START# *552FE00B02AA_4F0C0B870141_impl*
 if f_DragState = dsActive then
 begin
  f_DragState := dsPaused;
  RemoveListeners;
 end;
//#UC END# *552FE00B02AA_4F0C0B870141_impl*
//#UC START# *552FE00B02AA_4F0C0B870141_var*
//#UC END# *552FE00B02AA_4F0C0B870141_var*
//#UC START# *552FE0130188_4F0C0B870141_impl*
 if f_DragState = dsPaused then
 begin
  f_DragState := dsActive;
  InitListeners;
 end;
//#UC END# *552FE0130188_4F0C0B870141_impl*
//#UC START# *552FE0130188_4F0C0B870141_var*
//#UC END# *552FE0130188_4F0C0B870141_var*
//#UC START# *552FE01A0138_4F0C0B870141_impl*
 if f_DragState in cnActiveState then
  raise EDragInProcess.Create;
//#UC END# *552FE01A0138_4F0C0B870141_impl*
//#UC START# *552FE01A0138_4F0C0B870141_var*
//#UC END# *552FE01A0138_4F0C0B870141_var*
//#UC START# *5530C7180149_552FCE4601AC_impl*
 inherited Create('Предыдущая операция переноса не завершена!');
//#UC END# *5530C7180149_552FCE4601AC_impl*
//#UC START# *5530C7180149_552FCE4601AC_var*
//#UC END# *5530C7180149_552FCE4601AC_var*
