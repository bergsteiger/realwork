//#UC START# *479731C50290_4F2198430108_impl*
 FreeAndNil(f_WordToRun);
 FreeAndNil(f_LeftWordRefs);
 inherited;
//#UC END# *479731C50290_4F2198430108_impl*
//#UC START# *479731C50290_4F2198430108_var*
//#UC END# *479731C50290_4F2198430108_var*
//#UC START# *4DAEEDE10285_4F2198430108_impl*
 if ReturnsRef(aCtx) then
  GetRef(aCtx).DoIt(aCtx)
 else
  DoCode(aCtx);
//#UC END# *4DAEEDE10285_4F2198430108_impl*
//#UC START# *4DAEEDE10285_4F2198430108_var*
//#UC END# *4DAEEDE10285_4F2198430108_var*
//#UC START# *4DB6D7F70155_4F2198430108_impl*
 Result := f_WordToRun.ResultTypeInfo[aCtx].Has(tfw_wmImmediate);
//#UC END# *4DB6D7F70155_4F2198430108_impl*
//#UC START# *4DB6D7F70155_4F2198430108_var*
//#UC END# *4DB6D7F70155_4F2198430108_var*
//#UC START# *4F219F4E03CB_4F2198430108set_impl*
 aValue.SetRefTo(f_WordToRun);
//#UC END# *4F219F4E03CB_4F2198430108set_impl*
//#UC START# *4F219F4E03CB_4F2198430108set_var*
//#UC END# *4F219F4E03CB_4F2198430108set_var*
//#UC START# *4F3FF6C20122_4F2198430108_impl*
 if WordToRun.ResultTypeInfo[aCtx].Has(tfw_wmCaller) then
  aCtx.rEngine.PushObj(Caller);
 PushWordToWork(aCtx);
//#UC END# *4F3FF6C20122_4F2198430108_impl*
//#UC START# *4F3FF6C20122_4F2198430108_var*
//#UC END# *4F3FF6C20122_4F2198430108_var*
//#UC START# *4F414A1A0247_4F2198430108_impl*
 if (f_LeftWordRefs <> nil) then
  for l_Index := 0 to Pred(f_LeftWordRefs.Count) do
   aCtx.rEngine.PushObj(f_LeftWordRefs.Items[l_Index]);

 l_RightParamsCount := WordToRun.RightParamsCount(aCtx);
 if (l_RightParamsCount = 1) then
  aCtx.rEngine.PushObj(WordToWork)
 else
 begin
  for l_Index := 0 to Pred(l_RightParamsCount) do
   aCtx.rEngine.PushObj((WordToWork As TkwRuntimeWordWithCode).Code[l_Index]);
 end;//l_RightParamsCount = 1
//#UC END# *4F414A1A0247_4F2198430108_impl*
//#UC START# *4F414A1A0247_4F2198430108_var*
var
 l_RightParamsCount : Integer;
 l_Index : Integer;
//#UC END# *4F414A1A0247_4F2198430108_var*
//#UC START# *52CFC11603C8_4F2198430108get_impl*
 Result := f_WordToRun.ResultTypeInfo[aCtx];
(* if ReturnsRef(aCtx) then
  Result := inherited pm_GetResultTypeInfo(aCtx)
 else
  Result := f_WordToRun.ResultTypeInfo[aCtx];*)
//#UC END# *52CFC11603C8_4F2198430108get_impl*
//#UC START# *52CFC11603C8_4F2198430108get_var*
//#UC END# *52CFC11603C8_4F2198430108get_var*
//#UC START# *52D00B00031A_4F2198430108_impl*
 if ReturnsRef(aCtx) then
  GetRef(aCtx).SetValuePrim(aValue, aCtx)
 else
  RunnerAssert(false, 'ѕока невозможно присвоить значение оператору', aCtx);
//#UC END# *52D00B00031A_4F2198430108_impl*
//#UC START# *52D00B00031A_4F2198430108_var*
//#UC END# *52D00B00031A_4F2198430108_var*
//#UC START# *53E4914101D2_4F2198430108_impl*
 Result := WordToRun.LeftWordRefParamsCount(aCtx);
//#UC END# *53E4914101D2_4F2198430108_impl*
//#UC START# *53E4914101D2_4F2198430108_var*
//#UC END# *53E4914101D2_4F2198430108_var*
//#UC START# *53E49B2F01E4_4F2198430108_impl*
 if (f_LeftWordRefs = nil) then
  f_LeftWordRefs := TtfwWordRefList.Create;
 f_LeftWordRefs.Insert(0, aValue);
//#UC END# *53E49B2F01E4_4F2198430108_impl*
//#UC START# *53E49B2F01E4_4F2198430108_var*
//#UC END# *53E49B2F01E4_4F2198430108_var*
//#UC START# *53E4A3C100AB_4F2198430108_impl*
 CompilerAssert(f_LeftWordRefs <> nil, 'Ќету значений дл€ левых параметров по ссылке', aCtx);
 CompilerAssert((anIndex >= 0) AND (anIndex < f_LeftWordRefs.Count), 'Ќету значени€ дл€ левого параметра по ссылке, дл€ индекса ' + IntToStr(anIndex), aCtx);
 Result := f_LeftWordRefs.Items[anIndex];
//#UC END# *53E4A3C100AB_4F2198430108_impl*
//#UC START# *53E4A3C100AB_4F2198430108_var*
//#UC END# *53E4A3C100AB_4F2198430108_var*
//#UC START# *53E4A96A0085_4F2198430108_impl*
 if (f_LeftWordRefs = nil) then
  Result := 0
 else
  Result := f_LeftWordRefs.Count; 
//#UC END# *53E4A96A0085_4F2198430108_impl*
//#UC START# *53E4A96A0085_4F2198430108_var*
//#UC END# *53E4A96A0085_4F2198430108_var*
//#UC START# *558C303A01A1_4F2198430108_impl*
 PushState(aCtx);
 // - кладЄм параметры справа и слева на стек
 WordToRun.DoIt(aCtx);
 // - выполн€ем собственно определЄнное слово
//#UC END# *558C303A01A1_4F2198430108_impl*
//#UC START# *558C303A01A1_4F2198430108_var*
//#UC END# *558C303A01A1_4F2198430108_var*
//#UC START# *558C30D10043_4F2198430108_impl*
 Result := f_WordToRun.ResultTypeInfo[aCtx].Has(tfw_wmLeftWordRef);
//#UC END# *558C30D10043_4F2198430108_impl*
//#UC START# *558C30D10043_4F2198430108_var*
//#UC END# *558C30D10043_4F2198430108_var*
//#UC START# *558D2BCA0324_4F2198430108_impl*
 if ReturnsRef(aCtx) then
 begin
  DoCode(aCtx);
  Result := aCtx.rEngine.PopObj As TtfwWord;
  Result := Result.GetRef(aCtx);
 end//ReturnsRef(aCtx)
 else
 begin
  Result := Self;
  //RunnerError('ќператор должен возвращать ссылку', aCtx);
 end;//ReturnsRef(aCtx)
//#UC END# *558D2BCA0324_4F2198430108_impl*
//#UC START# *558D2BCA0324_4F2198430108_var*
//#UC END# *558D2BCA0324_4F2198430108_var*
//#UC START# *56096688024A_4F2198430108_impl*
 if ReturnsRef(aCtx) then
  GetRef(aCtx).SetValue(aValue, aCtx)
 else
  RunnerAssert(false, 'ѕока невозможно присвоить значение оператору', aCtx);
//#UC END# *56096688024A_4F2198430108_impl*
//#UC START# *56096688024A_4F2198430108_var*
//#UC END# *56096688024A_4F2198430108_var*
