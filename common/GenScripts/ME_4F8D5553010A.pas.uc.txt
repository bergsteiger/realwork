//#UC START# *47D1602000C6_4F8D5553010A_impl*
 inherited Create(AOwner);
 f_FourDigitYear := FourDigitYear;
 I := Screen.PixelsPerInch;
 {$IFDEF TodayPadPresent}
 Height := Round(1.875*I);
 {$ELSE}
 Height := Round(1.6145833333333333333333333333333*I);
 {$ENDIF}
 {$IFDEF TodayPadPresent}
 Width := Max(Round(2.0104166666666666666666666666667*I), CalcTodayPadWidth + 2*cBevelWidth);
 {$ELSE}
 Width := Round(2.0104166666666666666666666666667*I);
 {$ENDIF}
 Color := clBtnFace;
 FontSetDefault(Font);
 Font.Charset := RUSSIAN_CHARSET; // чтоб на NT-ях правильно все рисовалось
 ShowHint := True;

 ControlStyle := ControlStyle + [csReplicatable];

 BevelInner := bvNone;
 BevelOuter := bvRaised;
 BevelWidth := cBevelWidth;

 f_TitlePanel := TvtPanel.Create(Self);
 with f_TitlePanel do
 begin
  Parent := Self;
  Align := alTop;
  Width := Self.Width - 4;
  Height := 23;
  BevelOuter := bvNone;
  ParentColor := True;
  OnDblClick := TopPanelDblClick;
  ControlStyle := ControlStyle + [csReplicatable];
 end;

 {$IFDEF TodayPadPresent}
 MakeTodayPad;
 {$ENDIF}

 f_MonthMenu := TPopupMenu.Create(Self);
 with f_MonthMenu do
 begin
  Font.Charset := RUSSIAN_CHARSET;
  for I := 1 to 12 do
  begin
   MItem := TMenuItem.Create(Self);
   MItem.Caption := vtMonthsCaptions(I).AsStr;
   MItem.OnClick := MonthMenuSelect;
   MItem.RadioItem := True;
   Items.Add(MItem);
  end;
 end;

 f_YearMenu := TPopupMenu.Create(Self);

 f_MonthLabel := TSpeedButton.Create(Self);
 AdjustTitleButtonFont(f_MonthLabel);
 f_TitlePanel.InsertControl(f_MonthLabel);
 with f_MonthLabel do
 begin
  Left := 40;
  Top := 2;
  Width := Round((f_TitlePanel.Width - BtnSide * 4)/3*2) ;
  Height := 20;
  Flat := True;
  Alignment := taRightJustify;
  Anchors := [akLeft,akRight,akTop];
  Caption := vtMonthsCaptions(9).AsStr;
  OnClick := MonthClick;
  Font.Charset := RUSSIAN_CHARSET;
 end;

 f_YearLabel := TSpeedButton.Create(Self);
 AdjustTitleButtonFont(f_YearLabel);
 with f_YearLabel do
 begin
  Parent := f_TitlePanel;
  Left := f_MonthLabel.Left + f_MonthLabel.Width;
  Top := 2;
  Alignment := taLeftJustify;
  Anchors := [akLeft,akRight,akTop];
  Height := 20;
  Width := f_TitlePanel.Width - Left - BtnSide * 2;
  Flat := True;
  OnClick := YearClick;
  Font.Charset := RUSSIAN_CHARSET;
 end;

 f_Calendar := TvtCalendarPanel.Create(Self);
 with f_Calendar do
 begin
  Parent := Self;
  Align := alClient;
  BevelInner := bvLowered;
  BevelOuter := bvNone;
  BorderStyle := bsNone;
  OnChange := CalendarChange;
  OnMouseUp := CalendarMouseUp;
 end;

 with TTimerSpeedButton.Create(Self) do
 begin
  Parent := f_TitlePanel;
  SetBounds(1, 1, BtnSide, BtnSide);
  Glyph.Handle := LoadBitmapA(hInstance, SBtnGlyphs[0]);
  OnClick := PrevYearBtnClick;
  Hint := str_vtStrPrevYear.AsStr;
  Flat:=True;
  TimeBtnState := [tbAllowTimer];
 end;

 with TTimerSpeedButton.Create(Self) do
 begin
  Parent := f_TitlePanel;
  SetBounds(BtnSide + 1, 1, BtnSide, BtnSide);
  Glyph.Handle := LoadBitmapA(hInstance, SBtnGlyphs[1]);
  OnClick := PrevMonthBtnClick;
  Hint := str_vtStrPrevMonth.AsStr;
  Flat := True;
  TimeBtnState := [tbAllowTimer];
 end;

 with TTimerSpeedButton.Create(Self) do
 begin
  Parent := f_TitlePanel;
  SetBounds(f_TitlePanel.Width - 2 * BtnSide - 2 , 1, BtnSide, BtnSide);
  Glyph.Handle := LoadBitmapA(hInstance, SBtnGlyphs[2]);
  OnClick := NextMonthBtnClick;
  Hint := str_vtStrNextMonth.AsStr;
  Flat := True;
  TimeBtnState := [tbAllowTimer];
 end;

 with TTimerSpeedButton.Create(Self) do
 begin
  Parent := f_TitlePanel;
  SetBounds(f_TitlePanel.Width - BtnSide - 2, 1, BtnSide, BtnSide);
  Glyph.Handle := LoadBitmapA(hInstance, SBtnGlyphs[3]);
  OnClick := NextYearBtnClick;
  Hint := str_vtStrNextYear.AsStr;
  Flat := True;
  TimeBtnState := [tbAllowTimer];
 end;
 CalendarChange(Self);

{$IfDef Delphi7}
 ParentBackground := False;
{$EndIf}
//#UC END# *47D1602000C6_4F8D5553010A_impl*
//#UC START# *47D1602000C6_4F8D5553010A_var*
const
  BtnSide = 21;
  cBevelWidth = 2;
var
 I: Integer;
 MItem: TMenuItem;
//#UC END# *47D1602000C6_4F8D5553010A_var*
//#UC START# *48C7925A02E5_4F8D5553010A_impl*
 inherited CreateParams(Params);
 with Params do
 begin
  ExStyle := WS_EX_TOOLWINDOW;
  WindowClass.Style := CS_SAVEBITS;
  ControlStyle := ControlStyle + [csNoDesignVisible];
 end;
//#UC END# *48C7925A02E5_4F8D5553010A_impl*
//#UC START# *48C7925A02E5_4F8D5553010A_var*
//#UC END# *48C7925A02E5_4F8D5553010A_var*
//#UC START# *4F8D5553010A_ext:ParentFileName
w:\common\components\gui\Garant\VT\vtDateEdit.pas
//#UC END# *4F8D5553010A_ext:ParentFileName
//#UC START# *554CABC100AC_4F8D5553010A_impl*
 inherited KeyDown(Key, Shift);
 if (f_Calendar <> nil) then
  TvtCalendarPanelFriend(f_Calendar).KeyDown(Key, Shift);
//#UC END# *554CABC100AC_4F8D5553010A_impl*
//#UC START# *554CABC100AC_4F8D5553010A_var*
//#UC END# *554CABC100AC_4F8D5553010A_var*
//#UC START# *5562DAFA03CB_4F8D5553010Aget_impl*
 if f_Calendar <> nil
  then Result := f_Calendar.Date
  else Result := NullDate;
//#UC END# *5562DAFA03CB_4F8D5553010Aget_impl*
//#UC START# *5562DAFA03CB_4F8D5553010Aget_var*
//#UC END# *5562DAFA03CB_4F8D5553010Aget_var*
//#UC START# *5562DAFA03CB_4F8D5553010Aset_impl*
 if (f_Calendar <> nil) then
 try
  f_Calendar.Date := aValue;
 except
  f_Calendar.Date := Now;
 end;
//#UC END# *5562DAFA03CB_4F8D5553010Aset_impl*
//#UC START# *5562DAFA03CB_4F8D5553010Aset_var*
//#UC END# *5562DAFA03CB_4F8D5553010Aset_var*
//#UC START# *5562DBEF006B_4F8D5553010A_impl*
 f_MenuOpen := False;
 if (Button = mbLeft) and (Shift = []) then
  begin
   if TvtCalendarPanelFriend(f_Calendar).GetDayFromPoint(Point(X,Y)) > 0 then
    if Owner is TWinControl then
     PostMessage(TWinControl(Owner).Handle, WM_vt_CALLCLOSEUP, 1, 0)
  end;
//#UC END# *5562DBEF006B_4F8D5553010A_impl*
//#UC START# *5562DBEF006B_4F8D5553010A_var*
//#UC END# *5562DBEF006B_4F8D5553010A_var*
//#UC START# *5562DC2B00A8_4F8D5553010A_impl*
 f_Calendar.PrevMonth;
//#UC END# *5562DC2B00A8_4F8D5553010A_impl*
//#UC START# *5562DC2B00A8_4F8D5553010A_var*
//#UC END# *5562DC2B00A8_4F8D5553010A_var*
//#UC START# *5562DC4401F9_4F8D5553010A_impl*
 f_Calendar.NextMonth;
//#UC END# *5562DC4401F9_4F8D5553010A_impl*
//#UC START# *5562DC4401F9_4F8D5553010A_var*
//#UC END# *5562DC4401F9_4F8D5553010A_var*
//#UC START# *5562DC4E02D2_4F8D5553010A_impl*
 f_Calendar.PrevYear;
//#UC END# *5562DC4E02D2_4F8D5553010A_impl*
//#UC START# *5562DC4E02D2_4F8D5553010A_var*
//#UC END# *5562DC4E02D2_4F8D5553010A_var*
//#UC START# *5562DC56029A_4F8D5553010A_impl*
 f_Calendar.NextYear;
//#UC END# *5562DC56029A_4F8D5553010A_impl*
//#UC START# *5562DC56029A_4F8D5553010A_var*
//#UC END# *5562DC56029A_4F8D5553010A_var*
//#UC START# *5562DC5D03D9_4F8D5553010A_impl*
 DecodeDate(f_Calendar.Date, Year, Month, Day);
 f_MonthLabel.Caption := vtMonthsCaptions(Month).AsStr;
 f_YearLabel.Caption := FormatDateTime('YYYY', f_Calendar.Date);
//#UC END# *5562DC5D03D9_4F8D5553010A_impl*
//#UC START# *5562DC5D03D9_4F8D5553010A_var*
var
 Year, Month, Day: Word;
//#UC END# *5562DC5D03D9_4F8D5553010A_var*
//#UC START# *5562DC65011C_4F8D5553010A_impl*
 f_Calendar.Date := Trunc(Now);
//#UC END# *5562DC65011C_4F8D5553010A_impl*
//#UC START# *5562DC65011C_4F8D5553010A_var*
//#UC END# *5562DC65011C_4F8D5553010A_var*
//#UC START# *5562DC710040_4F8D5553010A_impl*
 lPos.X := f_MonthLabel.Left;
 lPos.Y := f_MonthLabel.Top + f_MonthLabel.Height;
 lPos := f_TitlePanel.ClientToScreen(lPos);
 f_MonthMenu.Items[MonthOf(pm_GetDate)-1].Checked := True;
 f_MenuOpen := True;
 f_MonthMenu.Popup(lPos.X, lPos.Y);
 f_MenuOpen := False;
//#UC END# *5562DC710040_4F8D5553010A_impl*
//#UC START# *5562DC710040_4F8D5553010A_var*
var
 lPos: TPoint;
//#UC END# *5562DC710040_4F8D5553010A_var*
//#UC START# *5562DC9B004D_4F8D5553010A_impl*
 lMonth := f_MonthMenu.Items.IndexOf(TMenuItem(Sender)) + 1;
 DecodeDate(pm_GetDate, Y, M, D);
 if not IsValidDate(Y, lMonth, D)
  then TmpDate := EndOfTheMonth(EncodeDate(Y, lMonth, 1))
  else TmpDate := EncodeDate(Y, lMonth, D);
 pm_SetDate(TmpDate);
 f_MenuOpen := False;
//#UC END# *5562DC9B004D_4F8D5553010A_impl*
//#UC START# *5562DC9B004D_4F8D5553010A_var*
var
 lMonth: Integer;
 Y, M, D: Word;
 TmpDate: TDateTime;
//#UC END# *5562DC9B004D_4F8D5553010A_var*
//#UC START# *5562DCA501FA_4F8D5553010A_impl*
 f_YearMenu.Items.Clear;
 Y := YearOf(pm_GetDate);
 B := Y - 8;
 E := B + 16;
 f_YearMenu.Items.AutoHotkeys := maManual;
 for I:= B to E do
 begin
  MI := TMenuItem.Create(Self);
  MI.AutoHotkeys := maManual;
  MI.Caption := IntToStr(I);
  MI.OnClick := YearMenuSelect;
  if I = Y then // пометим текущий год
  begin
   MI.RadioItem := True;
   MI.Checked := True;
  end;
  f_YearMenu.Items.Add(MI);
 end;
 lPos.X := f_YearLabel.Left;
 lPos.Y := f_YearLabel.Top;// - GetSystemMetrics(SM_CYMENU)*7;
 lPos := f_TitlePanel.ClientToScreen(lPos);
 if ((lPos.Y + GetSystemMetrics(SM_CYMENU) * 9) < Screen.Height) and
    ((lPos.Y - GetSystemMetrics(SM_CYMENU) * 9) > 0) then
  lPos.Y := lPos.Y - GetSystemMetrics(SM_CYMENU) * 8;
 f_MenuOpen := True;
 f_YearMenu.Popup(lPos.X, lPos.Y);
 f_MenuOpen := False;
//#UC END# *5562DCA501FA_4F8D5553010A_impl*
//#UC START# *5562DCA501FA_4F8D5553010A_var*
var
 lPos: TPoint;
 I, B, E, Y: Integer;
 MI: TMenuItem;
//#UC END# *5562DCA501FA_4F8D5553010A_var*
//#UC START# *5562DCAD03A9_4F8D5553010A_impl*
 lIndex := f_YearMenu.Items.IndexOf(TMenuItem(Sender));
 YearS := f_YearMenu.Items[lIndex].Caption;
 try
  pm_SetDate(RecodeYear(pm_GetDate, StrToInt(YearS)));
 except
  // http://mdp.garant.ru/pages/viewpage.action?pageId=330697003
  on EConvertError do
  begin
   pm_SetDate(RecodeYear(pm_GetDate - 1, StrToInt(YearS)));
  end;
  on Exception do
   raise;
 end;
 f_MenuOpen := False;
//#UC END# *5562DCAD03A9_4F8D5553010A_impl*
//#UC START# *5562DCAD03A9_4F8D5553010A_var*
var
 lIndex: Integer;
 YearS: AnsiString;
//#UC END# *5562DCAD03A9_4F8D5553010A_var*
//#UC START# *5562DCBF022F_4F8D5553010A_impl*
 PostMessage(TWinControl(Owner).Handle, WM_vt_CALLCLOSEUP, 0, 0);
//#UC END# *5562DCBF022F_4F8D5553010A_impl*
//#UC START# *5562DCBF022F_4F8D5553010A_var*
//#UC END# *5562DCBF022F_4F8D5553010A_var*
//#UC START# *5562DCCD00E0_4F8D5553010A_impl*
 f_Calendar.Date := Trunc(Now);
 PostMessage(TWinControl(Owner).Handle, WM_vt_CALLCLOSEUP, 1, 0);
//#UC END# *5562DCCD00E0_4F8D5553010A_impl*
//#UC START# *5562DCCD00E0_4F8D5553010A_var*
//#UC END# *5562DCCD00E0_4F8D5553010A_var*
//#UC START# *5562DDAF0285_4F8D5553010A_impl*
 Result := 0;
//#UC END# *5562DDAF0285_4F8D5553010A_impl*
//#UC START# *5562DDAF0285_4F8D5553010A_var*
//#UC END# *5562DDAF0285_4F8D5553010A_var*
//#UC START# *5562DE3A02DF_4F8D5553010A_impl*
 lPanel := TvtPanel.Create(Self);
 with lPanel do
 begin
  Parent := Self;
  Height := 25;
  BevelOuter := bvNone;
  Align := alBottom;
 end;

 with TvtLabel.Create(Self) do
 begin
  Parent := lPanel;
  Left := 3;
  Top := 5;
  Font.Style := [fsBold];
  CCaption := l3Fmt(str_vtTodayLongLabel.AsCStr, [FormatDateTime('DD.MM.YYYY', Now)]);
  OnClick := ClickToday;
  ShowHint := True;
  Hint := str_vtTodayHint.AsStr;
 end;

 with TSpeedButton.Create(Self) do
 begin
  Parent := lPanel;
  SetBounds(lPanel.Width-3-19, 3, 19,19);
  Anchors := [akRight, akTop];
  vtStdResources.Images.GetBitmap(17, Glyph);
  Flat := True;
  OnClick := CancelClick;
  ShowHint := True;
  Hint := str_vtCancel.AsStr;
 end;
//#UC END# *5562DE3A02DF_4F8D5553010A_impl*
//#UC START# *5562DE3A02DF_4F8D5553010A_var*
var
 lPanel: TvtPanel;
//#UC END# *5562DE3A02DF_4F8D5553010A_var*
//#UC START# *5562DE4D0243_4F8D5553010A_impl*
// Do nothing;
//#UC END# *5562DE4D0243_4F8D5553010A_impl*
//#UC START# *5562DE4D0243_4F8D5553010A_var*
//#UC END# *5562DE4D0243_4F8D5553010A_var*
//#UC START# *556486A5039E_4F8D5553010A_impl*
 KeyDown(Key, Shift);
//#UC END# *556486A5039E_4F8D5553010A_impl*
//#UC START# *556486A5039E_4F8D5553010A_var*
//#UC END# *556486A5039E_4F8D5553010A_var*
