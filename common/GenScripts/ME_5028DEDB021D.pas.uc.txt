//#UC START# *479731C50290_5028DEDB021D_impl*
 vcmFree(f_ImageList);
 inherited;
//#UC END# *479731C50290_5028DEDB021D_impl*
//#UC START# *479731C50290_5028DEDB021D_var*
//#UC END# *479731C50290_5028DEDB021D_var*
//#UC START# *47D1602000C6_5028DEDB021D_impl*
 inherited Create(AOwner);
 BevelOuter := bvNone;
 Width := 0;
 Height := 0;
 f_pnlDock := TPanel.Create(Self);
 with f_pnlDock do
 begin
  Parent := Self;
  Align := alClient;
  BevelOuter := bvNone;
 end;
//#UC END# *47D1602000C6_5028DEDB021D_impl*
//#UC START# *47D1602000C6_5028DEDB021D_var*
//#UC END# *47D1602000C6_5028DEDB021D_var*
//#UC START# *4F88469E0021_5028DEDB021D_impl*
 inherited;
//#UC END# *4F88469E0021_5028DEDB021D_impl*
//#UC START# *4F88469E0021_5028DEDB021D_var*
//#UC END# *4F88469E0021_5028DEDB021D_var*
//#UC START# *5028DEDB021D_ext:ParentFileName
w:\common\components\gui\Garant\VCM\implementation\Visual\vcmToolbar.pas
//#UC END# *5028DEDB021D_ext:ParentFileName
//#UC START# *5028E3DB0203_5028DEDB021D_impl*
 Result := nil;
 l_ImageIndex := -1;
 if not CheckLink(aLink) then
 begin
  if (f_BtnMaximized <> nil) then
   f_BtnMaximized.Visible := false;
  Exit;
 end;//not CheckLink(aLink)
 Assert(Assigned(g_MenuManager));
 if g_MenuManager is TvcmCustomMenuManager then
  l_ImageIndex := TvcmCustomMenuManager(g_MenuManager).BtnOpenNewWindowImageIndex;
 if not Assigned(f_BtnMaximized) then
  f_BtnMaximized := CreateBtn(l_ImageIndex, aLink, 'BtnMaximized')
 else
  f_BtnMaximized.Link := aLink;
 Result := f_BtnMaximized;
//#UC END# *5028E3DB0203_5028DEDB021D_impl*
//#UC START# *5028E3DB0203_5028DEDB021D_var*
var
 l_ImageIndex: Integer;
//#UC END# *5028E3DB0203_5028DEDB021D_var*
//#UC START# *5028E403004C_5028DEDB021D_impl*
 Result := nil;
 l_ImageIndex := -1;
 if not CheckLink(aLink) OR not aLink.CanHaveOwnCloseButtonInNavigator then
 begin
  if (f_BtnClose <> nil) then
   f_BtnClose.Visible := false;
  Exit;
 end;//not CheckLink(aLink)
 Assert(Assigned(g_MenuManager));
 if g_MenuManager is TvcmCustomMenuManager then
  l_ImageIndex := TvcmCustomMenuManager(g_MenuManager).BtnCloseImageIndex;
 if not Assigned(f_BtnClose) then
  f_BtnClose := CreateBtn(l_ImageIndex, aLink, 'BtnClose')
 else
  f_BtnClose.Link := aLink;
 Result := f_BtnClose;
//#UC END# *5028E403004C_5028DEDB021D_impl*
//#UC START# *5028E403004C_5028DEDB021D_var*
var
 l_ImageIndex: Integer;
//#UC END# *5028E403004C_5028DEDB021D_var*
//#UC START# *5028E41E0384_5028DEDB021D_impl*
 Result := nil;
 l_ImageIndex := -1;
 if not CheckLink(aLink) then
 begin
  if (f_BtnOpen <> nil) then
   f_BtnOpen.Visible := false;
  Exit;
 end;//not CheckLink(aLink)
 Assert(Assigned(g_MenuManager));
 if g_MenuManager is TvcmCustomMenuManager then
  l_ImageIndex := TvcmCustomMenuManager(g_MenuManager).BtnOpenImageIndex;
 if not Assigned(f_BtnOpen) then
  f_BtnOpen := CreateBtn(l_ImageIndex, aLink, 'BtnOpen')
 else
  f_BtnOpen.Link := aLink;
 Result := f_BtnOpen;
//#UC END# *5028E41E0384_5028DEDB021D_impl*
//#UC START# *5028E41E0384_5028DEDB021D_var*
var
 l_ImageIndex: Integer;
//#UC END# *5028E41E0384_5028DEDB021D_var*
//#UC START# *5028E4BD038B_5028DEDB021D_impl*
 Result := (aLink <> nil) and (aLink.Form <> nil) and Assigned(aLink.Handler);
//#UC END# *5028E4BD038B_5028DEDB021D_impl*
//#UC START# *5028E4BD038B_5028DEDB021D_var*
//#UC END# *5028E4BD038B_5028DEDB021D_var*
//#UC START# *5028E4DB0207_5028DEDB021D_impl*
 // создадим toolbar для кнопок
 if not Assigned(f_ToolBar) then
  CreateToolBar;
 // создадим кнопку
 Result := TvcmDockPanelButton.Make(f_ToolBar, aLink, Self, aName);
 with Result do
 begin
  Name := aName;
  Parent := f_ToolBar;
  ImageIndex := aImageIndex;
  Assert(Assigned(g_MenuManager));
  if g_MenuManager is TvcmCustomMenuManager then
   Images := TvcmCustomMenuManager(g_MenuManager).DockButtonsImageList;
 end;//with Result
 // размер toolbar-а
 f_ToolBar.ButtonWidth := Result.Width;
 UpdateToolbarSize;
//#UC END# *5028E4DB0207_5028DEDB021D_impl*
//#UC START# *5028E4DB0207_5028DEDB021D_var*
//#UC END# *5028E4DB0207_5028DEDB021D_var*
//#UC START# *5028E4FB030F_5028DEDB021D_impl*
 { В TvcmDockDef может не быть ни одного toolbar-а, но если есть f_ToolBar, то
   не даём устанавливать высоту меньше f_ToolBar.ButtonHeight }
 if ToolbarDock <> nil then
 begin
  if (ToolbarDock.Position = dpTop) or (ToolbarDock.Position = dpBottom) then
  begin
   if Assigned(f_ToolBar) and (AHeight < f_ToolBar.ButtonHeight) then
    AHeight := f_ToolBar.ButtonHeight + 4;
   { Размеры основной панели }
   Self.Height := AHeight + Self.BorderWidth * 2;
   { Toolbar с кнопками }
   if Assigned(f_Toolbar) then
    f_Toolbar.Height := f_pnlToolbar.Height;
  end
  else
  begin
   if Assigned(f_ToolBar) and (AWidth < f_ToolBar.ButtonWidth) then
    AWidth := f_ToolBar.ButtonWidth + 4;
   { Размеры основной панели }
   Self.Width := AWidth + Self.BorderWidth * 2;
   { Toolbar с кнопками }
   if Assigned(f_Toolbar) then
    f_Toolbar.Width := f_pnlToolbar.Width;
  end;
 end;//if ToolbarDock <> nil then
//#UC END# *5028E4FB030F_5028DEDB021D_impl*
//#UC START# *5028E4FB030F_5028DEDB021D_var*
//#UC END# *5028E4FB030F_5028DEDB021D_var*
//#UC START# *5028E59700E9_5028DEDB021D_impl*
 if not Assigned(f_pnlToolbar) then
 begin
  f_pnlToolbar := TvcmToolbarDockPanel.Make(Self, TvcmDockDef(f_ToolbarDock));
  with f_pnlToolbar do
  begin
   Parent := Self;
   BevelOuter := bvNone;
   Align := alRight;
   BorderStyle := bsNone;
  {$IfDef Nemesis}
   Color := cGarant2011BackColor;
  {$EndIf}
  end;
 end;
 if not Assigned(f_ToolBar) then
 begin
  f_ToolBar := TToolBar.Create(Self);
  with f_ToolBar do
  begin
   Parent := f_pnlToolbar;
   Wrapable := False;
   AutoSize := True;
   Flat := True;
   EdgeInner := TEdgeStyle(esNone);
   EdgeOuter := TEdgeStyle(esNone);
   ShowHint := True;
  end;
 end;
//#UC END# *5028E59700E9_5028DEDB021D_impl*
//#UC START# *5028E59700E9_5028DEDB021D_var*
//#UC END# *5028E59700E9_5028DEDB021D_var*
//#UC START# *5028E59F005F_5028DEDB021D_impl*
 with f_Toolbar do
 begin
  l_ButtonWidth := 0;
  for l_Index := Pred(f_Toolbar.ControlCount) downto 0 do
   with Controls[l_Index] do
    if Visible then
    begin
     Left := l_ButtonWidth;
     Inc(l_ButtonWidth, ButtonWidth);
    end;
  l_AddWidth := 0;
  (* Левая граница *)
  if ebLeft in EdgeBorders then
   l_AddWidth := l_AddWidth + 1;
  (* Правая граница *)
  if ebRight in EdgeBorders then
   l_AddWidth := l_AddWidth + 1;
  (* У левой и у правой кнопки граница на 1 пиксель больше *)
  if ButtonCount > 1 then
   l_AddWidth := 2;
  f_pnlToolbar.Width := l_ButtonWidth + l_AddWidth;
 end;
//#UC END# *5028E59F005F_5028DEDB021D_impl*
//#UC START# *5028E59F005F_5028DEDB021D_var*
var
 l_AddWidth: Integer;
 l_ButtonWidth: Integer;
 l_Index: Integer;
//#UC END# *5028E59F005F_5028DEDB021D_var*
//#UC START# *5028E66702B0_5028DEDB021D_impl*
 CopyRect(l_Rect, Rect);
 if Assigned(ToolbarDock) then
  case ToolbarDock.Position of
   dpTop: Dec(Rect.Bottom);
   dpBottom: Inc(Rect.Top);
   dpLeft: Dec(Rect.Right);
   dpRight: Inc(Rect.Left);
  end;
 inherited AlignControls(AControl, Rect);
 CopyRect(Rect, l_Rect);
//#UC END# *5028E66702B0_5028DEDB021D_impl*
//#UC START# *5028E66702B0_5028DEDB021D_var*
 // http: //mdp.garant.ru/pages/viewpage.action?pageId=319489610&focusedCommentId=326767566#comment-326767566
var
 l_Rect: TRect;
//#UC END# *5028E66702B0_5028DEDB021D_var*
//#UC START# *5028E6C80331_5028DEDB021D_impl*
 l_OldWidth := Width;
 l_OldHeight := Height;
 inherited;
 if Parent is TForm then
  case (Parent as TForm).BorderStyle of
   bsDialog,
   bsSingle:
    case Align of
     alTop,
     alBottom:
       if Height <> (*l_OldHeight*) f_PrevHeight then
       begin
        // При размере шрифтов в 125% l_OldHeight бывает равен Height
        // (http://mdp.garant.ru/pages/viewpage.action?pageId=446825181)
        (*Parent.Height := Parent.Height + (l_OldHeight - Height);*)
        Parent.Height := Parent.Height - (f_PrevHeight - Height);
        f_PrevHeight := Height;
       end;
     alLeft,
     alRight:
      if Width <> (*l_OldWidth*) f_PrevWidth then
      begin
       // http://mdp.garant.ru/pages/viewpage.action?pageId=446825181
       (*Parent.Width := Parent.Width + (l_OldWidth - Width);*)
       Parent.Width := Parent.Width - (f_PrevWidth - Width);
       f_PrevWidth := Width;
      end;
    end;
  end;
//#UC END# *5028E6C80331_5028DEDB021D_impl*
//#UC START# *5028E6C80331_5028DEDB021D_var*
var
 l_OldWidth,
 l_OldHeight: Integer;
//#UC END# *5028E6C80331_5028DEDB021D_var*
//#UC START# *5028E6ED005E_5028DEDB021D_impl*
 Message.Result := 1;//не прочищаем фон
 if Assigned(ToolbarDock) then
 begin
  lR := ClientRect;
  with Canvas do
  begin
   Pen.Color := clBtnShadow;
   case ToolbarDock.Position of
    dpTop: 
     begin
      MoveTo(lR.Left, Pred(lR.Bottom));
      LineTo(lR.Right, Pred(lR.Bottom));
     end;
    dpBottom: 
     begin
      MoveTo(lR.Left, lR.Top);
      LineTo(lR.Right, lR.Top);
     end;
    dpRight: 
     begin
      MoveTo(lR.Left, lR.Top);
      LineTo(lR.Left, lR.Bottom);
     end;
    dpLeft: 
     begin
      MoveTo(Pred(lR.Right), lR.Top);
      LineTo(Pred(lR.Right), lR.Bottom);
     end;
   end;// case
  end;// with Canvas
 end;// if Assigned
//#UC END# *5028E6ED005E_5028DEDB021D_impl*
//#UC START# *5028E6ED005E_5028DEDB021D_var*
var
 lR: TRect;
//#UC END# *5028E6ED005E_5028DEDB021D_var*
//#UC START# *52A991CE0016_5028DEDB021Dset_impl*
 f_Toolbar := aValue;
 f_Toolbar.Parent := f_pnlToolbar;
//#UC END# *52A991CE0016_5028DEDB021Dset_impl*
//#UC START# *52A991CE0016_5028DEDB021Dset_var*
//#UC END# *52A991CE0016_5028DEDB021Dset_var*
//#UC START# *52A99201025B_5028DEDB021Dset_impl*
 f_ToolbarDock := aValue;
 f_ToolbarDock.Parent := f_pnlDock;
//#UC END# *52A99201025B_5028DEDB021Dset_impl*
//#UC START# *52A99201025B_5028DEDB021Dset_var*
//#UC END# *52A99201025B_5028DEDB021Dset_var*
