//#UC START# *47D1602000C6_50FD1AE5027A_impl*
  inherited Create(AOwner);
  ControlStyle := [csAcceptsControls, csCaptureMouse, csClickEvents,
    csSetCaption, csOpaque, csDoubleClicks, csReplicatable];
  { When themes are on in an application default to making
    TCustomPanel's paint with their ParentBackground }
  {$IfDef Delphi7}
  if ThemeServices.ThemesEnabled then
    ControlStyle := ControlStyle + [csParentBackground] - [csOpaque];
  {$EndIf Delphi7}
  Width := 185;
  Height := 41;
  f_Alignment := taCenter;
  BevelOuter := bvRaised;
  BevelWidth := 1;
  BorderStyle := bsNone;
  Color := cDefBack;
  f_FullRepaint := True;
  UseDockManager := True;
//#UC END# *47D1602000C6_50FD1AE5027A_impl*
//#UC START# *47D1602000C6_50FD1AE5027A_var*
//#UC END# *47D1602000C6_50FD1AE5027A_var*
//#UC START# *48C6C044025E_50FD1AE5027A_impl*
 l_Rect := GetClientRect;
 DrawFrame(CN, l_Rect);
 with CN do
 begin
  with Canvas do
  begin
   {$IfDef Delphi7}
   if not ParentBackground or not ThemeServices.ThemesEnabled then
   {$EndIf Delphi7}
   begin
    Brush.Color := Color;
    FillRect(l_Rect);
   end;//not ParentBackground..
   Brush.Style := bsClear;
   BackColor := Color;
   Font := Self.Font;
   l_FontHeight := TextHeight('W');
   with l_Rect do
   begin
    Top := ((Bottom + Top) - l_FontHeight) div 2;
    if Top < 0 then Top := 0;
    Bottom := Top + l_FontHeight;
   end;//with l_Rect
   {$IfDef Delphi7}
   if ParentBackground then
    SetBkMode(Handle, Windows.TRANSPARENT)
   else
   begin
    SetBkColor(Handle, ColorToRGB(BackColor));
    SetBkMode(Handle, Windows.OPAQUE);
   end;//ParentBackground
   {$EndIf Delphi7}
   DrawText(l3PCharLen(CCaption), l_Rect,
            DrawTextBiDiModeFlags((DT_EXPANDTABS or DT_VCENTER) or
                                   Alignments[f_Alignment]));
  end;//with Canvas
 end;//with CN
 l_Rect := GetClientRect;
 DrawFrame(CN, l_Rect);
//#UC END# *48C6C044025E_50FD1AE5027A_impl*
//#UC START# *48C6C044025E_50FD1AE5027A_var*
var
  l_Rect: TRect;
  l_FontHeight: Integer;
const
  Alignments: array[TAlignment] of Word = (DT_LEFT, DT_RIGHT, DT_CENTER);
//#UC END# *48C6C044025E_50FD1AE5027A_var*
//#UC START# *48C7925A02E5_50FD1AE5027A_impl*
 inherited CreateParams(Params);
 with Params do
  WindowClass.Style := WindowClass.Style or CS_HREDRAW or CS_VREDRAW;
//#UC END# *48C7925A02E5_50FD1AE5027A_impl*
//#UC START# *48C7925A02E5_50FD1AE5027A_var*
//#UC END# *48C7925A02E5_50FD1AE5027A_var*
//#UC START# *5028E66702B0_50FD1AE5027A_impl*
  BevelSize := BorderWidth;
  if BevelOuter <> bvNone then Inc(BevelSize, BevelWidth);
  if BevelInner <> bvNone then Inc(BevelSize, BevelWidth);
  InflateRect(Rect, -BevelSize, -BevelSize);
  inherited AlignControls(AControl, Rect);
//#UC END# *5028E66702B0_50FD1AE5027A_impl*
//#UC START# *5028E66702B0_50FD1AE5027A_var*
var
  BevelSize: Integer;
//#UC END# *5028E66702B0_50FD1AE5027A_var*
//#UC START# *50FD1AE5027A_ext:ParentFileName
w:\common\components\gui\Garant\VT\vtPanel.pas
//#UC END# *50FD1AE5027A_ext:ParentFileName
//#UC START# *50FD1AE5027Aci*
//#UC END# *50FD1AE5027Aci*
//#UC START# *50FD1AE5027Acit*
//#UC END# *50FD1AE5027Acit*
//#UC START# *50FD1AE5027Aimpl*
//#UC END# *50FD1AE5027Aimpl*
//#UC START# *50FD1AE5027Apubl*
 public
   {$IfDef Delphi7}
   property ParentBackground stored f_ParentBackgroundSet;
   {$EndIf Delphi7}
 protected
   property Color default cDefBack;
   property ParentColor default False;
   property BevelInner default bvNone;
   property BevelOuter default bvRaised;
   property Alignment default taCenter;
   property BevelWidth default 1;
   property BorderWidth default 0;
   property FullRepaint default True;
//#UC END# *50FD1AE5027Apubl*
//#UC START# *50FD31EE009B_50FD1AE5027A_impl*
 {$IfDef Delphi7}
  { TCustomPanel needs to not have csOpaque when painting
    with the ParentBackground in Themed applications }
  if Value then
    ControlStyle := ControlStyle - [csOpaque]
  else
    ControlStyle := ControlStyle + [csOpaque];
  f_ParentBackgroundSet := True;
 {$EndIf Delphi7}
  inherited;
//#UC END# *50FD31EE009B_50FD1AE5027A_impl*
//#UC START# *50FD31EE009B_50FD1AE5027A_var*
//#UC END# *50FD31EE009B_50FD1AE5027A_var*
//#UC START# *50FD3279019E_50FD1AE5027A_impl*
 if Assigned(f_OnResize) then
  f_OnResize(Self);
//#UC END# *50FD3279019E_50FD1AE5027A_impl*
//#UC START# *50FD3279019E_50FD1AE5027A_var*
//#UC END# *50FD3279019E_50FD1AE5027A_var*
//#UC START# *50FD336F020B_50FD1AE5027A_impl*
 Canvas := CN.Canvas;
 if BevelOuter <> bvNone then
 begin
   AdjustColors(BevelOuter, TopColor, BottomColor);
   Frame3D(Canvas, Rect, TopColor, BottomColor, BevelWidth);
 end;
 Frame3D(Canvas, Rect, Color, Color, BorderWidth);
 if BevelInner <> bvNone then
 begin
   AdjustColors(BevelInner, TopColor, BottomColor);
   Frame3D(Canvas, Rect, TopColor, BottomColor, BevelWidth);
 end;
//#UC END# *50FD336F020B_50FD1AE5027A_impl*
//#UC START# *50FD336F020B_50FD1AE5027A_var*
var
 TopColor,
 BottomColor: TColor;
 Canvas: TCanvas;
//#UC END# *50FD336F020B_50FD1AE5027A_var*
//#UC START# *50FD355100B9_50FD1AE5027A_impl*
 Invalidate;
//#UC END# *50FD355100B9_50FD1AE5027A_impl*
//#UC START# *50FD355100B9_50FD1AE5027A_var*
//#UC END# *50FD355100B9_50FD1AE5027A_var*
//#UC START# *50FD356F0225_50FD1AE5027A_impl*
 inherited;
 {$IfNDef Delphi7}
 if not (csLoading in ComponentState) then Resize;
 {$EndIf  Delphi7}
 if false
    // http://mdp.garant.ru/pages/viewpage.action?pageId=266410926
    {l3NeedsHackFor64System}
    then
 // http://mdp.garant.ru/pages/viewpage.action?pageId=228692580
 begin
  if not f_In64Hack then
   try
    f_In64Hack := true;
    if (ControlCount = 1) then
    begin
     l_C := Controls[0];
     if (l_C Is TWinControl) then
(*      if (l_C.Align = alClient) then
      begin
       if (l_C.Width <> ClientWidth) then
        SetWindowPos(TWinControl(l_C).Handle, 0,
                     0, 0, ClientWidth, ClientHeight,
                     SWP_FRAMECHANGED + SWP_NOZORDER + SWP_NOACTIVATE)
       else
        SetWindowPos(TWinControl(l_C).Handle, 0,
                     0, 0, ClientWidth - 2, ClientHeight,
                     SWP_FRAMECHANGED + SWP_NOZORDER + SWP_NOACTIVATE);
       TWinControl(l_C).Realign;
      end//l_C.Align = alClient
      else*)
      if (l_C.Align = alNone) then
      begin
       if (l_C Is TCustomForm) then
       begin
        if (Self.Align = alClient) then
        begin
         if (Parent <> nil) then
         begin
          if (Self.Width <> Parent.ClientWidth) then
           SetWindowPos(Self.Handle, 0,
                        0, 0, Parent.ClientWidth, Parent.ClientHeight,
                        SWP_FRAMECHANGED + SWP_NOZORDER + SWP_NOACTIVATE)
          else
           SetWindowPos(Self.Handle, 0,
                        0, 0, Parent.ClientWidth - 2, Parent.ClientHeight,
                        SWP_FRAMECHANGED + SWP_NOZORDER + SWP_NOACTIVATE);
(*          if (TWinControl(l_C).ControlCount = 1) then
          begin
           l_C := TWinControl(l_C).Controls[0];
           if (l_C.Align = alClient) then
            if (l_C Is TWinControl) then
            begin
             if (l_C.Width <> Self.ClientWidth) then
              SetWindowPos(TWinControl(l_C).Handle, 0,
                           0, 0, Self.ClientWidth, Self.ClientHeight,
                           SWP_FRAMECHANGED + SWP_NOZORDER + SWP_NOACTIVATE)
             else
              SetWindowPos(TWinControl(l_C).Handle, 0,
                           0, 0, Self.ClientWidth - 2, Self.ClientHeight,
                           SWP_FRAMECHANGED + SWP_NOZORDER + SWP_NOACTIVATE);
            end;//l_C Is TWinControl
          end;//TWinControl(l_C).ControlCount = 1*)
          //TWinControl(l_C).Realign;
          // - это надо раскомментировать, чтобы скроллеры хоть как-то зажили
          Self.Realign;
         end;//Parent <> nil
        end;//Self.Align = alClient
       end;//l_C Is TCustomForm
       //l_C.Invalidate;
      end;//l_C.Align = alNone
    end;//ControlCount = 1
   finally
    f_In64Hack := false;
   end;//try..finally
 end;//l3NeedsHackFor64System
//#UC END# *50FD356F0225_50FD1AE5027A_impl*
//#UC START# *50FD356F0225_50FD1AE5027A_var*
var
 l_C: TControl;
//#UC END# *50FD356F0225_50FD1AE5027A_var*
//#UC START# *50FD3584018B_50FD1AE5027A_impl*
  if FullRepaint or l3IsNil(CCaption) then
    Invalidate
  else
  begin
    BevelPixels := BorderWidth;
    if BevelInner <> bvNone then Inc(BevelPixels, BevelWidth);
    if BevelOuter <> bvNone then Inc(BevelPixels, BevelWidth);
    if BevelPixels > 0 then
    begin
      Rect.Right := Width;
      Rect.Bottom := Height;
      if Message.WindowPos^.cx <> Rect.Right then
      begin
        Rect.Top := 0;
        Rect.Left := Rect.Right - BevelPixels - 1;
        Windows.InvalidateRect(Handle, @Rect, True);
      end;
      if Message.WindowPos^.cy <> Rect.Bottom then
      begin
        Rect.Left := 0;
        Rect.Top := Rect.Bottom - BevelPixels - 1;
        Windows.InvalidateRect(Handle, @Rect, True);
      end;
    end;
  end;
  inherited;
  {$If not defined(DesignTimeLibrary)}
  if f_FixW2kWMSize and afw.NeedFixWMSIZE(Self) then
   Resize;
  {$IfEnd} 
//#UC END# *50FD3584018B_50FD1AE5027A_impl*
//#UC START# *50FD3584018B_50FD1AE5027A_var*
var
  BevelPixels: Integer;
  Rect: TRect;
//#UC END# *50FD3584018B_50FD1AE5027A_var*
//#UC START# *50FD3594029E_50FD1AE5027A_impl*
 Message.Result := Integer(True);
//#UC END# *50FD3594029E_50FD1AE5027A_impl*
//#UC START# *50FD3594029E_50FD1AE5027A_var*
//#UC END# *50FD3594029E_50FD1AE5027A_var*
