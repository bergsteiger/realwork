//#UC START# *479731C50290_51D277ED01E9_impl*
 inherited;
 FreeAndNil(f_FontName);
//#UC END# *479731C50290_51D277ED01E9_impl*
//#UC START# *479731C50290_51D277ED01E9_var*
//#UC END# *479731C50290_51D277ED01E9_var*
//#UC START# *51D277ED01E9_ext:ParentFileName
w:\common\components\rtl\Garant\dd\dd_rtfFields.pas
//#UC END# *51D277ED01E9_ext:ParentFileName
//#UC START# *51D27A48038E_51D277ED01E9_impl*
 f_Instruction := '';
 f_ValueType := dd_vtEmpty;
 f_CheckFont := dd_cfNone;
 f_FieldType := dd_fieldUnknown;
 FreeAndNil(f_FontName);
 f_RepeatSymbol := False;
 inherited;
//#UC END# *51D27A48038E_51D277ED01E9_impl*
//#UC START# *51D27A48038E_51D277ED01E9_var*
//#UC END# *51D27A48038E_51D277ED01E9_var*
//#UC START# *51D27B1A00FA_51D277ED01E9_impl*
 case f_FieldType of
  dd_fieldHyperlink: if f_CustomRTFReader.ReadURL then
                      f_ValueType := dd_vtFull
                     else
                      f_ValueType := dd_vtEmpty;
  dd_fieldHyperlinkMailTo: f_ValueType := dd_vtFull;
  dd_fieldSymbol:
   begin
    if (f_ValueType = dd_vtFull) then
    begin
     if (f_CheckFont = dd_cfApply) or (f_CheckFont = dd_cfWaitName) then
      f_Char := AnsiChar(StrToIntDef(f_Instruction, 32))
     else
      if f_CheckFont = dd_cfTry2Convert then
       lp_Try2ConvertSymbolChar;
    end // if (f_ValueType = dd_vtFull) then
    else
     f_ValueType := dd_vtEmpty;
   end;
  else
   f_ValueType := dd_vtEmpty;
 end; // case aFieldType of
//#UC END# *51D27B1A00FA_51D277ED01E9_impl*
//#UC START# *51D27B1A00FA_51D277ED01E9_var*

 procedure lp_Try2ConvertSymbolChar;
 const
  cnLargeDashInSymbol = 45;
 var
  l_CharID     : Byte;
  l_FormulaType: TddFormulaRepresent;
 begin
  l_CharID := StrToIntDef(f_Instruction, 32);
  l_FormulaType := carCharID2FormualRepresent[AnsiChar(l_CharID)];
  if l_FormulaType = dd_frUnknown then
   f_ValueType := dd_vtEmpty
  else
   if l_FormulaType = dd_frCharID then
    if l_CharID = cnLargeDashInSymbol then
     f_Char := cc_LargeDash
    else
     f_Char := AnsiChar(l_CharID)
   else
   begin
    f_Char := AnsiChar(l_CharID);
    f_ValueType := dd_vtFormula;
   end; // if l_FormulaType <> dd_frUnknown then
 end; // lp_Try2ConvertSymbolChar

//#UC END# *51D27B1A00FA_51D277ED01E9_var*
//#UC START# *51D27B9A01B2_51D277ED01E9get_impl*
 Result := f_FieldType;
//#UC END# *51D27B9A01B2_51D277ED01E9get_impl*
//#UC START# *51D27B9A01B2_51D277ED01E9get_var*

{
'CREATEDATE' | 'DATE' | 'EDITTIME' | 'PRINTDATE' | 'SAVEDATE' | 'TIME'
'COMPARE' | 'DOCVARIABLE' | 'GOTOBUTTON' | 'IF' | 'MACROBUTTON' | 'PRINT'
'AUTHOR' | 'COMMENTS' | 'DOCPROPERTY' | 'FILENAME' | 'FILESIZE' | 'INFO' | 'KEYWORDS' | 'LASTSAVEDBY' | 'NUMCHARS' | 'NUMPAGES' | 'NUMWORDS' | 'SUBJECT' | 'TEMPLATE' | 'TITLE'
'FORMTEXT' | 'FORMCHECKBOX' | 'FORMDROPDOWN'
('=' <formula>) | 'ADVANCE' | 'EQ' | 'SYMBOL'
'INDEX' | 'RD' | 'TA' | 'TC' | 'TOA' | 'TOC' | 'XE'
'AUTOTEXT' | 'AUTOTEXTLIST' | 'HYPERLINK' | 'INCLUDEPICTURE' | 'INCLUDETEXT' | 'LINK' | 'NOTEREF' | 'PAGEREF' | 'QUOTE' | 'REF' | 'STYLEREF'
'ADDRESSBLOCK' | 'ASK' | 'COMPARE' | 'DATABASE' | 'FILLIN' | 'GREETINGLINE' | 'IF' | 'MERGEFIELD' | 'MERGEREC' | 'MERGESEQ' | 'NEXT' | 'NEXTIF' | 'SET' | 'SKIPIF'
'AUTONUM' | 'AUTONUMLGL' | 'AUTONUMOUT' | 'BARCODE' | 'LISTNUM' | 'PAGE' | 'REVNUM' | 'SECTION' | 'SECTIONPAGES' | 'SEQ'
'USERADDRESS' | 'USERINITIALS' | 'USERNAME'
}
//#UC END# *51D27B9A01B2_51D277ED01E9get_var*
//#UC START# *51D27C0402E9_51D277ED01E9_impl*
 if f_FieldType = dd_fieldSymbol then
 begin
  if (f_CheckFont = dd_cfWaitName) and (aText = cc_DoubleQuote) then
  begin
   if f_FontName = nil then
    f_FontName := Tl3String.Create
   else
    if l3Compare(caFieldStrArray[dd_fieldSymbol], f_FontName.AsWStr, l3_siCaseUnsensitive) = 0 then
     f_CheckFont := dd_cfTry2Convert
    else
     f_CheckFont := dd_cfApply;
  end; // if (f_CheckFont = dd_cfWaitName) and (aText = cc_DoubleQuote) then
  if (aText in cc_Digits) then
  begin
   if f_ValueType < dd_vtFull then
    f_Instruction := f_Instruction + aText;
   if f_ValueType = dd_vtEmpty then
    f_ValueType := dd_vtAddData
  end // if (aText in cc_Digits) then
  else
   if f_ValueType = dd_vtAddData then
    f_ValueType := dd_vtFull
 end // if f_FieldType = dd_fieldSymbol then   
 else
  if (f_FieldType in [dd_fieldHyperlink, dd_fieldHyperlinkMailTo]) then
  begin
   if not DoAddAnsiChar(aText) then
    if not (aText in [cc_HardSpace, cc_DoubleQuote, cc_Colon]) then
     f_Instruction := f_Instruction + aText;
  end // if (f_FieldType in [dd_fieldHyperlink, dd_fieldHyperlinkMailTo]) then
  else
   f_Instruction := f_Instruction + aText;
//#UC END# *51D27C0402E9_51D277ED01E9_impl*
//#UC START# *51D27C0402E9_51D277ED01E9_var*
//#UC END# *51D27C0402E9_51D277ED01E9_var*
//#UC START# *51D27C3302EC_51D277ED01E9_impl*
 if not CheckFieldType(aText) then
  if f_FieldType = dd_fieldSymbol then
  begin
   if (f_CheckFont = dd_cfNone) and (l3Compare(csFontNameInField, aText.AsWStr, l3_siCaseUnsensitive) = 0) then
    f_CheckFont := dd_cfWaitName
   else
    if (f_CheckFont = dd_cfWaitName) and (f_FontName <> nil) then
     f_FontName.Append(aText.AsWStr);
  end // if f_FieldType = dd_fieldSymbol then
  else
   if not ((aText.Len = 1) and DoAddAnsiChar(aText.Ch[0])) then
    f_Instruction := f_Instruction + aText.AsString;
//#UC END# *51D27C3302EC_51D277ED01E9_impl*
//#UC START# *51D27C3302EC_51D277ED01E9_var*
//#UC END# *51D27C3302EC_51D277ED01E9_var*
//#UC START# *51E8CFEF027A_51D277ED01E9_impl*
 inherited; 
 if (Symbol = symbolRepeateText) then
  if (f_FieldType = dd_fieldHyperlink) and f_CustomRTFReader.ReadURL then
   f_RepeatSymbol := True
  else
  if (f_FieldType = dd_fieldHyperlinkMailTo) then
  begin
   f_FieldType := dd_fieldHyperlink;
   f_Instruction := '';
  end; // if Symbol = symbolRepeateText then
//#UC END# *51E8CFEF027A_51D277ED01E9_impl*
//#UC START# *51E8CFEF027A_51D277ED01E9_var*
//#UC END# *51E8CFEF027A_51D277ED01E9_var*
//#UC START# *5461BEC2017D_51D277ED01E9_impl*

//#UC END# *5461BEC2017D_51D277ED01E9_impl*
//#UC START# *5461BEC2017D_51D277ED01E9_var*
//#UC END# *5461BEC2017D_51D277ED01E9_var*
//#UC START# *54E1F08400F9_51D277ED01E9_impl*
 WriteText(aText, aState);
 f_ValueType := dd_vtEmpty;
 f_CheckFont := dd_cfNone;
 f_FieldType := dd_fieldUnknown;
//#UC END# *54E1F08400F9_51D277ED01E9_impl*
//#UC START# *54E1F08400F9_51D277ED01E9_var*
//#UC END# *54E1F08400F9_51D277ED01E9_var*
//#UC START# *550A97780325_51D277ED01E9_impl*
 Result := f_FieldType = dd_fieldUnknown;
 if Result then
 begin
  Result := False;
  for i := Low(TddFieldType) to High(TddFieldType) do
   if l3Compare(caFieldStrArray[i], aText.AsWStr, l3_siCaseUnsensitive) = 0 then
   begin
    f_RepeatSymbol := False;
    f_FieldType := i;
    Result := True;
    Break;
   end; // if l3Compare(caFieldStrArray[i], aText, l3_siCaseUnsensitive) = 0 then
 end // if not Result then
 else
  if f_FieldType = dd_fieldHyperlink then
   if l3Compare(caFieldStrArray[dd_fieldHyperlinkMailTo], aText.AsWStr, l3_siCaseUnsensitive) = 0 then
   begin
    f_FieldType := dd_fieldHyperlinkMailTo;
    Result := True;
   end; // if l3Compare(caFieldStrArray[dd_fieldHyperlinkMailTo], aText.AsWStr, l3_siCaseUnsensitive) = 0 then
//#UC END# *550A97780325_51D277ED01E9_impl*
//#UC START# *550A97780325_51D277ED01E9_var*
var
 i: TddFieldType;
//#UC END# *550A97780325_51D277ED01E9_var*
//#UC START# *56AA042E0205_51D277ED01E9_impl*
 Result := False;
 if not f_CustomRTFReader.ReadURL then Exit;
 if f_FieldType = dd_fieldHyperlink then
  if f_RepeatSymbol and (aText = 'l') then
  begin
   f_Instruction := f_Instruction + cc_Number;
   f_RepeatSymbol := False;
   Result := True;
  end // if f_RepeatSymbol and (aText = 'l') then
  else
   if aText = cc_Colon then
   begin
    f_Instruction := f_Instruction + aText;
    Result := True;
   end; // if aText = cc_Colon then
//#UC END# *56AA042E0205_51D277ED01E9_impl*
//#UC START# *56AA042E0205_51D277ED01E9_var*
//#UC END# *56AA042E0205_51D277ED01E9_var*
