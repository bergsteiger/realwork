//#UC START# *478CF34E02CE_5216255500D5_impl*
 if Source is TMapValues then
  with TMapValues(Source) do
  begin
   Self.f_List.Assign(f_List);
   Self.f_MapKind := f_MapKind;
  end;
//#UC END# *478CF34E02CE_5216255500D5_impl*
//#UC START# *478CF34E02CE_5216255500D5_var*
//#UC END# *478CF34E02CE_5216255500D5_var*
//#UC START# *479731C50290_5216255500D5_impl*
 Clear;
 FreeAndNil(f_List);
 inherited;
//#UC END# *479731C50290_5216255500D5_impl*
//#UC START# *479731C50290_5216255500D5_var*
//#UC END# *479731C50290_5216255500D5_var*
//#UC START# *5216255500D5_ext:ParentFileName
w:\common\components\rtl\Garant\dd\ddAppConfigTypes.pas
//#UC END# *5216255500D5_ext:ParentFileName
//#UC START# *52162709029F_5216255500D5get_impl*
 Assert(f_List <> nil);
 Result := f_List.Count;
//#UC END# *52162709029F_5216255500D5get_impl*
//#UC START# *52162709029F_5216255500D5get_var*
//#UC END# *52162709029F_5216255500D5get_var*
//#UC START# *5216272A0158_5216255500D5_impl*
 Result := -1;
 for l_Index := 0 to Pred(f_List.Count) do
  if l3Same(aCaption, Items[l_Index].Caption) then
  begin            
   Result := l_Index;
   Break;
  end;//l3Same(aCaption, 
//#UC END# *5216272A0158_5216255500D5_impl*
//#UC START# *5216272A0158_5216255500D5_var*
var
  l_Index: Integer;
//#UC END# *5216272A0158_5216255500D5_var*
//#UC START# *521627490388_5216255500D5_impl*
 CheckValueType(aValue.Kind);
 Result := -1;
 for l_Index := 0 to Pred(f_List.Count) do
  if lp_ItemsIsEqual(Items[l_Index].Value, aValue) then
  begin
   Result := l_Index;
   Break;
  end;
//#UC END# *521627490388_5216255500D5_impl*
//#UC START# *521627490388_5216255500D5_var*
 function lp_ItemsIsEqual(aValue1 : TddConfigValue; aValue2 : TddConfigValue): Boolean;
 begin
  case f_MapKind of
   dd_vkString  : Result := aValue1.AsString = aValue2.AsString;
   dd_vkInteger : Result := aValue1.AsInteger = aValue2.AsInteger;
   dd_vkBoolean : Result := aValue1.AsBoolean = aValue2.AsBoolean;
   dd_vkDateTime: Result := aValue1.AsDateTime = aValue2.AsDateTime;
   dd_vkObject  : Result := aValue1.AsObject = aValue2.AsObject;
  else
   Result := False;
   Assert(False);
  end;
 end;
var
 l_Index: Integer;
//#UC END# *521627490388_5216255500D5_var*
//#UC START# *521627800086_5216255500D5_impl*
 f_List.Clear;
//#UC END# *521627800086_5216255500D5_impl*
//#UC START# *521627800086_5216255500D5_var*
//#UC END# *521627800086_5216255500D5_var*
//#UC START# *5216279203D3_5216255500D5_impl*
 CheckValueType(aValue.Kind);
 l_MapValue := TMapValue.Create;
 try
  l_MapValue.Caption := aCaption;
  l_MapValue.Value := aValue;
  f_List.Add(l_MapValue);
 finally
  FreeAndNil(l_MapValue);
 end;
//#UC END# *5216279203D3_5216255500D5_impl*
//#UC START# *5216279203D3_5216255500D5_var*
var
 l_MapValue: TMapValue;
//#UC END# *5216279203D3_5216255500D5_var*
//#UC START# *521627BB0336_5216255500D5_impl*
 inherited Create;
 f_MapKind := aKind;
 f_List := Tl3ProtoPersistentRefList.Create;
//#UC END# *521627BB0336_5216255500D5_impl*
//#UC START# *521627BB0336_5216255500D5_var*
//#UC END# *521627BB0336_5216255500D5_var*
//#UC START# *5216295D00DB_5216255500D5get_impl*
 Result := TMapValue(f_List.Items[aIndex]);
//#UC END# *5216295D00DB_5216255500D5get_impl*
//#UC START# *5216295D00DB_5216255500D5get_var*
//#UC END# *5216295D00DB_5216255500D5get_var*
//#UC START# *5216295D00DB_5216255500D5set_impl*
 TMapValue(f_List.Items[aIndex]).Assign(aValue);
//#UC END# *5216295D00DB_5216255500D5set_impl*
//#UC START# *5216295D00DB_5216255500D5set_var*
//#UC END# *5216295D00DB_5216255500D5set_var*
//#UC START# *521634D401C2_5216255500D5_impl*
 if aKind <> f_MapKind then
  raise EddConfigError.Create('Несовпадение типа map-value');
//#UC END# *521634D401C2_5216255500D5_impl*
//#UC START# *521634D401C2_5216255500D5_var*
//#UC END# *521634D401C2_5216255500D5_var*
