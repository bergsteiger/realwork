//#UC START# *479731C50290_52BACEF001CB_impl*
 f_CloseDisabled := False;
 f_ReactivateDisabled := False;
 inherited;
//#UC END# *479731C50290_52BACEF001CB_impl*
//#UC START# *479731C50290_52BACEF001CB_var*
//#UC END# *479731C50290_52BACEF001CB_var*
//#UC START# *48C7925A02E5_52BACEF001CB_impl*
 inherited CreateParams(Params);
 with Params do
 begin
  if (Parent = nil) and (ParentWindow = 0) then
  begin
   Style := Style or WS_POPUP;
   ExStyle := ExStyle and not WS_EX_APPWINDOW or WS_EX_TOOLWINDOW;
  end;
  Style := Style and not WS_CAPTION;
  case f_State of
   fwsNormal:
    Style := Style or WS_THICKFRAME;
   fwsMinimized:
    Style := Style and not WS_THICKFRAME;
  end;//case f_State
 end;//with Params
//#UC END# *48C7925A02E5_52BACEF001CB_impl*
//#UC START# *48C7925A02E5_52BACEF001CB_var*
//#UC END# *48C7925A02E5_52BACEF001CB_var*
//#UC START# *4980403E021E_52BACEF001CB_impl*
 Result := inherited CloseQuery;
 if Result then
  f_FloatID := 0;
 l_Index := 0;
 lPC := f_Navigator.PageControl;
 while Result and (l_Index <= Pred(lPC.PageCount)) do
 begin
  if (lPC.Pages[l_Index].ControlCount > 0) and
   (lPC.Pages[l_Index].Controls[0] is TCustomForm) then
   Result := TCustomForm(lPC.Pages[l_Index].Controls[0]).CloseQuery;
  Inc(l_Index);
 end;//while Result and (l_Index <= Pred(lPC.PageCount))
//#UC END# *4980403E021E_52BACEF001CB_impl*
//#UC START# *4980403E021E_52BACEF001CB_var*
var
 l_Index : Integer;
 lPC    : TnpPageControl;
//#UC END# *4980403E021E_52BACEF001CB_var*
//#UC START# *4E79FED900C6_52BACEF001CB_impl*
 Assert(FormStyle = fsStayOnTop);
 f_CloseDisabled := True;
//#UC END# *4E79FED900C6_52BACEF001CB_impl*
//#UC START# *4E79FED900C6_52BACEF001CB_var*
//#UC END# *4E79FED900C6_52BACEF001CB_var*
//#UC START# *4E7A0D9401F6_52BACEF001CB_impl*
 Assert(FormStyle = fsStayOnTop);
 f_ReactivateDisabled := True;
//#UC END# *4E7A0D9401F6_52BACEF001CB_impl*
//#UC START# *4E7A0D9401F6_52BACEF001CB_var*
//#UC END# *4E7A0D9401F6_52BACEF001CB_var*
//#UC START# *4F9007B20376_52BACEF001CB_impl*
 inherited CreateNew(AOwner);
 Caption := 'ѕлавающий навигатор';
 BorderIcons := [];
 FormStyle := fsStayOnTop;
 OnClose := FormClose;
 OnResize := FormOnResize;
 f_FloatID := 0;
 f_State := fwsNormal;
 f_Navigator := GetNavigatorClass.Create(Self);
 f_Navigator.Parent := Self;
 f_Navigator.f_FloatNavigator := Self;
 f_Navigator.Float := True;
 f_Navigator.Align := alClient;
 with f_Navigator.PageControl do
 begin
  Visible := True;
  //Assert(not Assigned(OnTabSheetClick));
  // - закомментировал, т.к. падало при отдочивании оглавлени€
  OnTabSheetClick := Self.OnTabSheetClick;
  // http://mdp.garant.ru/pages/viewpage.action?pageId=344754050&focusedCommentId=346751217&#comment-346751217
  Assert(not Assigned(OnDockDrop));
  OnDockDrop := Self.OnDockDrop;
  // http://mdp.garant.ru/pages/viewpage.action?pageId=344754050&focusedCommentId=346750985#comment-346750985
  Align := alClient;
 end;//with f_Navigator.PageControl
 with f_Navigator.f_Header do
 begin
  Visible := True;
  OnHide := OnCloseWindow;
  OnAutoHide := OnChangeState;
 end;//with f_Navigator.Header
 f_Navigator.DockSite := False;
 {$IfDef Nemesis}
 DefaultMonitor := dmDesktop;
 // - http://mdp.garant.ru/pages/viewpage.action?pageId=569239659
 {$EndIf Nemesis}
//#UC END# *4F9007B20376_52BACEF001CB_impl*
//#UC START# *4F9007B20376_52BACEF001CB_var*
//#UC END# *4F9007B20376_52BACEF001CB_var*
//#UC START# *52BACEF001CB_ext:ParentFileName
w:\common\components\gui\Garant\VT\vtNavigator.pas
//#UC END# *52BACEF001CB_ext:ParentFileName
//#UC START# *52BD71C101CD_52BACEF001CBset_impl*
 if aValue = f_State then
  Exit;
 f_State := aValue;
 // текущий стиль окна
 lFlag := GetWindowLong(Handle, GWL_STYLE);
 case f_State of
  // свернЄм навигатор
  fwsMinimized:
  begin
   Self.Height := lfnMinimizedSize;
   lFlag := lFlag xor WS_THICKFRAME;
  end;//fwsMinimized
  // развернЄм навигатор
  fwsNormal:
  begin
   // если плавающий был создан минимизированным, то используем высоту навигатора
   // на форме дл€ его разворачивани€
   if f_SizeNormal <= lfnMinimizedSize then
    f_SizeNormal := f_Navigator.NavigatorOnForm.Height;
   Height := f_SizeNormal;
   lFlag := lFlag  or WS_THICKFRAME;
  end;//fwsNormal
 end;//case f_State
 // изменим стиль окна
 SetWindowLong(Handle, GWL_STYLE, lFlag);
 // перерисуем
 Perform(CM_BORDERCHANGED, 0, 0);
 f_Navigator.f_Header.UpdateAutoHideImage;
 {$IfDef Nemesis}
 // нужно обновить информацию о состо€нии плавающей формы
 with Navigator.PageControl do
  for l_Index := 0 to Pred(PageCount) do
   if (Pages[l_Index].ControlCount > 0) and
    (Pages[l_Index].Controls[0] is TvcmForm) then
    TvcmForm(Pages[l_Index].Controls[0]).FloatWindowState :=
     IfThen((f_State = fwsMinimized), cFloatMinimized);
 {$EndIf Nemesis}
//#UC END# *52BD71C101CD_52BACEF001CBset_impl*
//#UC START# *52BD71C101CD_52BACEF001CBset_var*
var
 lFlag : Integer;
{$IfDef Nemesis}
 l_Index : Integer;
{$EndIf Nemesis}

 function lfnMinimizedSize : Integer;
 begin//lfnMinimizedSize
  with f_Navigator do
   Result := f_Header.Height + PageControl.MaxTabHeight;
 end;//lfnMinimizedSize
//#UC END# *52BD71C101CD_52BACEF001CBset_var*
//#UC START# *52BD728700B7_52BACEF001CB_impl*
 inherited;
 case f_State of
  fwsNormal:
   with Message.CalcSize_Params.rgrc[0] do
    Dec(Bottom, GetSystemMetrics(SM_CYHSCROLL));
  fwsMinimized:
   InflateRect(Message.CalcSize_Params.rgrc[0], -GetSystemMetrics(SM_CXBORDER), -GetSystemMetrics(SM_CYBORDER));
 end;//case f_State
//#UC END# *52BD728700B7_52BACEF001CB_impl*
//#UC START# *52BD728700B7_52BACEF001CB_var*
//#UC END# *52BD728700B7_52BACEF001CB_var*
//#UC START# *52BD729D02CC_52BACEF001CB_impl*
 l_DC := GetWindowDC(Handle);
 try
  case f_State of
   fwsNormal:
   begin
    // –исуем рамку
    inherited;
    // Ќарисуем скроллер
    with Canvas.Brush do
    begin
     Color := clBtnFace;
     Style := bsSolid;
    end;//with Canvas.Brush
    l_R := GetGripperRect;
    // мы вычислили всЄ честно, DrawFrameControl почему то отрисовывает рамку
    // на один пиксел меньше, поэтому увеличим
    InflateRect(l_R, 1, 1);
    // рисуем
    DrawFrameControl(l_DC, l_R, DFC_SCROLL, DFCS_SCROLLSIZEGRIP);
   end;//fwsNormal
   fwsMinimized:
   begin
    Windows.GetWindowRect(Handle, l_R);
    OffsetRect(l_R, -l_R.Left, -l_R.Top);
    DrawEdge(l_DC, l_R, EDGE_RAISED, BF_RECT or BF_FLAT);
   end;//fwsMinimized
  end;//case f_State
 finally
  ReleaseDC(Handle, l_DC);
 end;//try..finally
//#UC END# *52BD729D02CC_52BACEF001CB_impl*
//#UC START# *52BD729D02CC_52BACEF001CB_var*
var
 l_DC : HDC;
 l_R  : TRect;
//#UC END# *52BD729D02CC_52BACEF001CB_var*
//#UC START# *52BD72BD00B9_52BACEF001CB_impl*
 inherited;
 if CheckGripperCursor then
  Message.Result := HTBOTTOMRIGHT;
//#UC END# *52BD72BD00B9_52BACEF001CB_impl*
//#UC START# *52BD72BD00B9_52BACEF001CB_var*
//#UC END# *52BD72BD00B9_52BACEF001CB_var*
//#UC START# *52BD72DE0167_52BACEF001CB_impl*
 Message.Result := 1;
//#UC END# *52BD72DE0167_52BACEF001CB_impl*
//#UC START# *52BD72DE0167_52BACEF001CB_var*
//#UC END# *52BD72DE0167_52BACEF001CB_var*
//#UC START# *52BD73E2039B_52BACEF001CB_impl*
 // положение в пределах Desctop
 GetWindowRect(Handle, Result);
 // размеры навигатора
 OffsetRect(Result, -Result.Left, -Result.Top);
 // уменьшим чтобы не заслон€ть рамку
 InflateRect(Result, -GetSystemMetrics(SM_CXSIZEFRAME), -GetSystemMetrics(SM_CYSIZEFRAME));
 // область отрисовки gripper
 Result.Top := Result.Bottom - GetGripperHeight;
//#UC END# *52BD73E2039B_52BACEF001CB_impl*
//#UC START# *52BD73E2039B_52BACEF001CB_var*
//#UC END# *52BD73E2039B_52BACEF001CB_var*
//#UC START# *52BD73F900BF_52BACEF001CB_impl*
 Result := GetSystemMetrics(SM_CYHSCROLL);
//#UC END# *52BD73F900BF_52BACEF001CB_impl*
//#UC START# *52BD73F900BF_52BACEF001CB_var*
//#UC END# *52BD73F900BF_52BACEF001CB_var*
//#UC START# *52BD740F023F_52BACEF001CB_impl*
 Result := False;
 // навигатор в свернутом состо€нии, гриппер у него отсутствием
 if (f_State = fwsMinimized) then
  Exit;
 // получим позицию окна
 GetWindowRect(Handle, l_Rect);
 // вычислим положение gripper-а на экране
 l_Rect.Left := l_Rect.Right - GetGripperHeight;
 l_Rect.Top := l_Rect.Bottom - GetGripperHeight;
 // 
 if PtInRect(l_Rect, Mouse.CursorPos) then
  Result := True;
//#UC END# *52BD740F023F_52BACEF001CB_impl*
//#UC START# *52BD740F023F_52BACEF001CB_var*
var
 l_Rect : TRect;
//#UC END# *52BD740F023F_52BACEF001CB_var*
//#UC START# *52BD742402DA_52BACEF001CB_impl*
 if Assigned(f_Navigator) and Assigned(f_Navigator.PageControl) then
  with f_Navigator.PageControl do
   for l_Index := 0 to Pred(PageCount) do
    if (Pages[l_Index].ControlCount > 0) and
       (Pages[l_Index].Controls[0] is TvcmForm) then
     with TvcmForm(Pages[l_Index].Controls[0]) do
     begin
      l_R := Self.BoundsRect;
      with l_R do
       Bottom := Top + Self.f_SizeNormal;
      FloatWindowBounds := l_R;
     end;//TvcmForm(Pages[l_Index].Controls[0])
//#UC END# *52BD742402DA_52BACEF001CB_impl*
//#UC START# *52BD742402DA_52BACEF001CB_var*
var
 l_Index : Integer;
 l_R : TRect;
//#UC END# *52BD742402DA_52BACEF001CB_var*
//#UC START# *52BD745C0104_52BACEF001CB_impl*
 if f_State = High(TnpFloatWindowState) then
  State := Low(TnpFloatWindowState)
 else
  State := Succ(f_State);
//#UC END# *52BD745C0104_52BACEF001CB_impl*
//#UC START# *52BD745C0104_52BACEF001CB_var*
//#UC END# *52BD745C0104_52BACEF001CB_var*
//#UC START# *52BD74650377_52BACEF001CB_impl*
 (* ѕристыкуем компоненты к навигаторам на форме *)
 with f_Navigator.PageControl do
  while PageCount > 0 do
   if Pages[0].ControlCount > 0 then
    TnpControlsList.Instance.DockOnForm(Pages[0].Controls[0]);
//#UC END# *52BD74650377_52BACEF001CB_impl*
//#UC START# *52BD74650377_52BACEF001CB_var*
//#UC END# *52BD74650377_52BACEF001CB_var*
//#UC START# *52BD74710051_52BACEF001CB_impl*
 if (f_State = fwsNormal) then
  f_SizeNormal := Self.Height;
 {$IfDef Nemesis}
 UpdateFloatWindowsBounds;
 {$EndIf Nemesis}
//#UC END# *52BD74710051_52BACEF001CB_impl*
//#UC START# *52BD74710051_52BACEF001CB_var*
//#UC END# *52BD74710051_52BACEF001CB_var*
//#UC START# *52BD748B0337_52BACEF001CB_impl*
 if f_CloseDisabled then
  Action := caHide
 else
  Action := caFree;
//#UC END# *52BD748B0337_52BACEF001CB_impl*
//#UC START# *52BD748B0337_52BACEF001CB_var*
//#UC END# *52BD748B0337_52BACEF001CB_var*
//#UC START# *52BD74BD0029_52BACEF001CB_impl*
 // развернЄм окно, если свернуто
 State := fwsNormal;
 // начнем перетаскивание
 f_Navigator.OnTabSheetClick(Sender, Page);
//#UC END# *52BD74BD0029_52BACEF001CB_impl*
//#UC START# *52BD74BD0029_52BACEF001CB_var*
//#UC END# *52BD74BD0029_52BACEF001CB_var*
//#UC START# *52BD74D2028D_52BACEF001CB_impl*
 {$IfDef Nemesis}
 if Source.Control is TvcmForm then
  TvcmForm(Source.Control).FloatID := f_FloatID;
 {$EndIf Nemesis}
//#UC END# *52BD74D2028D_52BACEF001CB_impl*
//#UC START# *52BD74D2028D_52BACEF001CB_var*
//#UC END# *52BD74D2028D_52BACEF001CB_var*
//#UC START# *52BD752A00D3_52BACEF001CB_impl*
 Result := TvtNavigator;
//#UC END# *52BD752A00D3_52BACEF001CB_impl*
//#UC START# *52BD752A00D3_52BACEF001CB_var*
//#UC END# *52BD752A00D3_52BACEF001CB_var*
