//#UC START# *47612ACF0081_532031160122_impl*
 if (Self = nil) then
  Result := nil
 else
  Result := GetAsBox;  
//#UC END# *47612ACF0081_532031160122_impl*
//#UC START# *47612ACF0081_532031160122_var*
//#UC END# *47612ACF0081_532031160122_var*
//#UC START# *47612CD10380_532031160122_impl*
 Assert(false, 'CheckSort должен быть перекрыт в ' + ClassName);
//#UC END# *47612CD10380_532031160122_impl*
//#UC START# *47612CD10380_532031160122_var*
//#UC END# *47612CD10380_532031160122_var*
//#UC START# *47612DD0012B_532031160122_impl*
 Result := false;
 Assert(false, 'AssignTag должен быть перекрыт в ' + ClassName);
//#UC END# *47612DD0012B_532031160122_impl*
//#UC START# *47612DD0012B_532031160122_var*
//#UC END# *47612DD0012B_532031160122_var*
//#UC START# *47612DF00301_532031160122_impl*
 Result := nil;
 Assert(false, 'CloneTag должен быть перекрыт в ' + ClassName);
//#UC END# *47612DF00301_532031160122_impl*
//#UC START# *47612DF00301_532031160122_var*
//#UC END# *47612DF00301_532031160122_var*
//#UC START# *47612E530082_532031160122_impl*
 Assert(false, 'AssignCloneParams должен быть перекрыт в ' + ClassName);
//#UC END# *47612E530082_532031160122_impl*
//#UC START# *47612E530082_532031160122_var*
//#UC END# *47612E530082_532031160122_var*
//#UC START# *4761324203B8_532031160122_impl*
 Assert(false, 'Write должен быть перекрыт в ' + ClassName);
//#UC END# *4761324203B8_532031160122_impl*
//#UC START# *4761324203B8_532031160122_var*
//#UC END# *4761324203B8_532031160122_var*
//#UC START# *476133660285_532031160122get_impl*
 if (Self = nil) then
  Result := nil
 else 
 if not GetAttr(anIndex, Result) then
  Result := nil;
//#UC END# *476133660285_532031160122get_impl*
//#UC START# *476133660285_532031160122get_var*
//#UC END# *476133660285_532031160122get_var*
//#UC START# *4761365402FF_532031160122get_impl*
 if GetAttr(anIndex, l_Value) AND not l_Value.IsNull then
  Result := l_Value.AsBool
 else
  Result := false;
//#UC END# *4761365402FF_532031160122get_impl*
//#UC START# *4761365402FF_532031160122get_var*
var
 l_Value : Tl3Variant;
//#UC END# *4761365402FF_532031160122get_var*
//#UC START# *4761365402FF_532031160122set_impl*
 BoolW[anIndex, nil] := aValue;
//#UC END# *4761365402FF_532031160122set_impl*
//#UC START# *4761365402FF_532031160122set_var*
//#UC END# *4761365402FF_532031160122set_var*
//#UC START# *4761368701AB_532031160122get_impl*
 if GetAttr(anIndex, l_Value) AND not l_Value.IsNull then
  Result := l_Value.AsLong
 else
  Result := 0;
//#UC END# *4761368701AB_532031160122get_impl*
//#UC START# *4761368701AB_532031160122get_var*
var
 l_Value : Tl3Variant;
//#UC END# *4761368701AB_532031160122get_var*
//#UC START# *4761368701AB_532031160122set_impl*
 IntW[anIndex, nil] := aValue;
//#UC END# *4761368701AB_532031160122set_impl*
//#UC START# *4761368701AB_532031160122set_var*
//#UC END# *4761368701AB_532031160122set_var*
//#UC START# *4761370F0048_532031160122get_impl*
 if GetAttr(anIndex, l_Value) then
  Result := l_Value.AsString
 else
  Result := '';
//#UC END# *4761370F0048_532031160122get_impl*
//#UC START# *4761370F0048_532031160122get_var*
var
 l_Value : Tl3Variant;
//#UC END# *4761370F0048_532031160122get_var*
//#UC START# *4761370F0048_532031160122set_impl*
 StrW[anIndex, nil] := aValue;
//#UC END# *4761370F0048_532031160122set_impl*
//#UC START# *4761370F0048_532031160122set_var*
//#UC END# *4761370F0048_532031160122set_var*
//#UC START# *47613B8303CC_532031160122get_impl*
 if (Self = nil) then
  Result := nil
 else
  Result := pm_GetChildPrim(anIndex);
//#UC END# *47613B8303CC_532031160122get_impl*
//#UC START# *47613B8303CC_532031160122get_var*
//#UC END# *47613B8303CC_532031160122get_var*
//#UC START# *47613C0F02F4_532031160122set_impl*
 SetBoolAttr(anIndex, aContext, aValue);
//#UC END# *47613C0F02F4_532031160122set_impl*
//#UC START# *47613C0F02F4_532031160122set_var*
//#UC END# *47613C0F02F4_532031160122set_var*
//#UC START# *47613C6A001F_532031160122set_impl*
 SetIntAttr(anIndex, aContext, aValue);
//#UC END# *47613C6A001F_532031160122set_impl*
//#UC START# *47613C6A001F_532031160122set_var*
//#UC END# *47613C6A001F_532031160122set_var*
//#UC START# *47613D4E02B3_532031160122set_impl*
 if (aValue = '') then
  pm_SetAttrW(anIndex, aContext, nil)
 else
  PCharLenW[anIndex, aContext] := l3PCharLen(aValue);
//#UC END# *47613D4E02B3_532031160122set_impl*
//#UC START# *47613D4E02B3_532031160122set_var*
//#UC END# *47613D4E02B3_532031160122set_var*
//#UC START# *47613DB001A3_532031160122get_impl*
 if GetAttr(anIndex, l_Value) then
  Tl3WString(Result) := l_Value.AsWStr
 else
  l3AssignNil(Result);
//#UC END# *47613DB001A3_532031160122get_impl*
//#UC START# *47613DB001A3_532031160122get_var*
var
 l_Value : Tl3Variant;
//#UC END# *47613DB001A3_532031160122get_var*
//#UC START# *47613DB001A3_532031160122set_impl*
 PCharLenW[anIndex, nil] := aValue;
//#UC END# *47613DB001A3_532031160122set_impl*
//#UC START# *47613DB001A3_532031160122set_var*
//#UC END# *47613DB001A3_532031160122set_var*
//#UC START# *47613E120125_532031160122set_impl*
 SetWStrAttr(anIndex, aContext, aValue);
//#UC END# *47613E120125_532031160122set_impl*
//#UC START# *47613E120125_532031160122set_var*
//#UC END# *47613E120125_532031160122set_var*
//#UC START# *479731C50290_535FD0BB03C3_impl*
 FreeAndNil(f_Tag);
 inherited;
//#UC END# *479731C50290_535FD0BB03C3_impl*
//#UC START# *479731C50290_535FD0BB03C3_var*
//#UC END# *479731C50290_535FD0BB03C3_var*
//#UC START# *47A0AD3A01F7_535FD0BB03C3_impl*
 Result := inherited QueryInterface(IID, Obj);
 if not Succeeded(Result) then
  if f_Tag.QI(IID, Obj) then
   Result := S_Ok;
//#UC END# *47A0AD3A01F7_535FD0BB03C3_impl*
//#UC START# *47A0AD3A01F7_535FD0BB03C3_var*
//#UC END# *47A0AD3A01F7_535FD0BB03C3_var*
//#UC START# *47A6FEE600FC_535FD0BB03C3_impl*
 Result := true;
//#UC END# *47A6FEE600FC_535FD0BB03C3_impl*
//#UC START# *47A6FEE600FC_535FD0BB03C3_var*
//#UC END# *47A6FEE600FC_535FD0BB03C3_var*
//#UC START# *47A869930282_47A8693601A1get_impl*
 if (Self = nil) then
  Result := ''
 else
  Result := GetAsString;
//#UC END# *47A869930282_47A8693601A1get_impl*
//#UC START# *47A869930282_47A8693601A1get_var*
//#UC END# *47A869930282_47A8693601A1get_var*
//#UC START# *47A869930282_47A8693601A1set_impl*
 if (Self <> nil) then
 begin
  if (aValue = '') then
   Clear
  else
   AsWStr := l3PCharLen(aValue, AsWStr.SCodePage);
 end;//Self <> nil
//#UC END# *47A869930282_47A8693601A1set_impl*
//#UC START# *47A869930282_47A8693601A1set_var*
//#UC END# *47A869930282_47A8693601A1set_var*
//#UC START# *47A869A600BF_47A8693601A1get_impl*
 if (Self = nil) then
  l3AssignNil(Result)
 else
  Result := GetAsPCharLen;
//#UC END# *47A869A600BF_47A8693601A1get_impl*
//#UC START# *47A869A600BF_47A8693601A1get_var*
//#UC END# *47A869A600BF_47A8693601A1get_var*
//#UC START# *47A869A600BF_47A8693601A1set_impl*
 if (Self <> nil) then
  DoSetAsPCharLen(Tl3PCharLen(aValue));
//#UC END# *47A869A600BF_47A8693601A1set_impl*
//#UC START# *47A869A600BF_47A8693601A1set_var*
//#UC END# *47A869A600BF_47A8693601A1set_var*
//#UC START# *47A869BB02DE_47A8693601A1_impl*
 l3AssignNil(Result);
//#UC END# *47A869BB02DE_47A8693601A1_impl*
//#UC START# *47A869BB02DE_47A8693601A1_var*
//#UC END# *47A869BB02DE_47A8693601A1_var*
//#UC START# *47A869BB02DE_53319F9C002F_impl*
 l3AssignNil(Result);
 Assert(false, 'Невозможно преобразовать ' + ClassName + ' к Tl3WString');
//#UC END# *47A869BB02DE_53319F9C002F_impl*
//#UC START# *47A869BB02DE_53319F9C002F_var*
//#UC END# *47A869BB02DE_53319F9C002F_var*
//#UC START# *47A869D10074_47A8693601A1_impl*
 Assert(false);
//#UC END# *47A869D10074_47A8693601A1_impl*
//#UC START# *47A869D10074_47A8693601A1_var*
//#UC END# *47A869D10074_47A8693601A1_var*
//#UC START# *47BC02A50131_47A8693601A1_impl*
 // - ничего не делаем
//#UC END# *47BC02A50131_47A8693601A1_impl*
//#UC START# *47BC02A50131_47A8693601A1_var*
//#UC END# *47BC02A50131_47A8693601A1_var*
//#UC START# *47BC3BFD017F_47A8693601A1get_impl*
 Result := 0;
//#UC END# *47BC3BFD017F_47A8693601A1get_impl*
//#UC START# *47BC3BFD017F_47A8693601A1get_var*
//#UC END# *47BC3BFD017F_47A8693601A1get_var*
//#UC START# *47BC3BFD017F_47A8693601A1set_impl*
//#UC END# *47BC3BFD017F_47A8693601A1set_impl*
//#UC START# *47BC3BFD017F_47A8693601A1set_var*
//#UC END# *47BC3BFD017F_47A8693601A1set_var*
//#UC START# *47BC3C950296_47A8693601A1_impl*
 StringID := aStr.StringID;
 AsWStr := aStr.AsWStr;
 LinkedObject := aStr.LinkedObject;
//#UC END# *47BC3C950296_47A8693601A1_impl*
//#UC START# *47BC3C950296_47A8693601A1_var*
//#UC END# *47BC3C950296_47A8693601A1_var*
//#UC START# *47BC3CCE00A6_47A8693601A1get_impl*
 Result := nil;
//#UC END# *47BC3CCE00A6_47A8693601A1get_impl*
//#UC START# *47BC3CCE00A6_47A8693601A1get_var*
//#UC END# *47BC3CCE00A6_47A8693601A1get_var*
//#UC START# *47BC3CCE00A6_47A8693601A1set_impl*
//#UC END# *47BC3CCE00A6_47A8693601A1set_impl*
//#UC START# *47BC3CCE00A6_47A8693601A1set_var*
//#UC END# *47BC3CCE00A6_47A8693601A1set_var*
//#UC START# *47BC3FC40111_47A8693601A1_impl*
 Result := Rl3PrimString(ClassType).Create;
 Tl3PrimString(Result).AssignString(Self);
//#UC END# *47BC3FC40111_47A8693601A1_impl*
//#UC START# *47BC3FC40111_47A8693601A1_var*
type
  Rl3PrimString = class of Tl3PrimString;
//#UC END# *47BC3FC40111_47A8693601A1_var*
//#UC START# *48CF96D80241_532031160122_impl*
 Result := -1;
 Assert(false, 'DoIterateChildrenF должен быть перекрыт в ' + ClassName);
//#UC END# *48CF96D80241_532031160122_impl*
//#UC START# *48CF96D80241_532031160122_var*
//#UC END# *48CF96D80241_532031160122_var*
//#UC START# *49A545D501F6_532031160122_impl*
 // - ничего не делаем
//#UC END# *49A545D501F6_532031160122_impl*
//#UC START# *49A545D501F6_532031160122_var*
//#UC END# *49A545D501F6_532031160122_var*
//#UC START# *4A42149A01FE_532031160122get_impl*
 if (Self = nil) then
  Result := ''
 else
  Result := GetAsString;
//#UC END# *4A42149A01FE_532031160122get_impl*
//#UC START# *4A42149A01FE_532031160122get_var*
//#UC END# *4A42149A01FE_532031160122get_var*
//#UC START# *4A4216790331_532031160122get_impl*
 if (Self = nil) then
  l3AssignNil(Result)
 else
  Result := GetAsPCharLen;
//#UC END# *4A4216790331_532031160122get_impl*
//#UC START# *4A4216790331_532031160122get_var*
//#UC END# *4A4216790331_532031160122get_var*
//#UC START# *4A42195A0244_532031160122_impl*
 Result := (AsLong <> 0);
//#UC END# *4A42195A0244_532031160122_impl*
//#UC START# *4A42195A0244_532031160122_var*
//#UC END# *4A42195A0244_532031160122_var*
//#UC START# *4A42196201B8_532031160122_impl*
 if (Self = nil) then
 begin
  // - затычка для http://mdp.garant.ru/pages/viewpage.action?pageId=560734656&focusedCommentId=560996809#comment-560996809
  Result := 0;
  l3System.Msg2Log('затычка для http://mdp.garant.ru/pages/viewpage.action?pageId=560734656&focusedCommentId=560996809#comment-560996809');
 end
 else 
  Result := GetAsLong;
//#UC END# *4A42196201B8_532031160122_impl*
//#UC START# *4A42196201B8_532031160122_var*
//#UC END# *4A42196201B8_532031160122_var*
//#UC START# *4A42196C01CE_532031160122_impl*
 if (Self = nil) then
  Result := nil
 else
  Result := Self; 
//#UC END# *4A42196C01CE_532031160122_impl*
//#UC START# *4A42196C01CE_532031160122_var*
//#UC END# *4A42196C01CE_532031160122_var*
//#UC START# *4A42196C01CE_5347F19F0007_impl*
 Result := nil;
//#UC END# *4A42196C01CE_5347F19F0007_impl*
//#UC START# *4A42196C01CE_5347F19F0007_var*
//#UC END# *4A42196C01CE_5347F19F0007_var*
//#UC START# *4A42196C01CE_535FD0BB03C3_impl*
 Result := f_Tag;
//#UC END# *4A42196C01CE_535FD0BB03C3_impl*
//#UC START# *4A42196C01CE_535FD0BB03C3_var*
//#UC END# *4A42196C01CE_535FD0BB03C3_var*
//#UC START# *4A421BE201A9_53319F9C002F_impl*
 if (Self = nil) then
  Result := true
 else
  Result := GetIsOrd;
//#UC END# *4A421BE201A9_53319F9C002F_impl*
//#UC START# *4A421BE201A9_53319F9C002F_var*
//#UC END# *4A421BE201A9_53319F9C002F_var*
//#UC START# *4A421BED00FF_53319F9C002F_impl*
 if (Self = nil) then
  Result := (anID = nil)
 else
  Result := GetIsKindOfPrim(anID);
//#UC END# *4A421BED00FF_53319F9C002F_impl*
//#UC START# *4A421BED00FF_53319F9C002F_var*
//#UC END# *4A421BED00FF_53319F9C002F_var*
//#UC START# *4A421BF200BF_53319F9C002F_impl*
 Result := false;
 for l_Index := Low(anIDs) to High(anIDs) do
  if IsKindOf(anIDs[l_Index]) then
  begin
   Result := true;
   break;
  end;//IsKindOf(ID[l_Index])
//#UC END# *4A421BF200BF_53319F9C002F_impl*
//#UC START# *4A421BF200BF_53319F9C002F_var*
var
 l_Index : Integer;
//#UC END# *4A421BF200BF_53319F9C002F_var*
//#UC START# *4A421C12034A_53319F9C002F_impl*
 Result := IsKindOf(anAtomTypeID);
 if Result then
  for l_Index := Low(Exclude) to High(Exclude) do
   if IsKindOf(Exclude[l_Index]) then
   begin
    Result := false;
    break;
   end;//IsKindOf(ID[l_Index])
//#UC END# *4A421C12034A_53319F9C002F_impl*
//#UC START# *4A421C12034A_53319F9C002F_var*
var
 l_Index : Integer;
//#UC END# *4A421C12034A_53319F9C002F_var*
//#UC START# *4A422C1D00FE_532031160122_impl*
 Result := DoAddChild(aChild, aContext);
//#UC END# *4A422C1D00FE_532031160122_impl*
//#UC START# *4A422C1D00FE_532031160122_var*
//#UC END# *4A422C1D00FE_532031160122_var*
//#UC START# *4A42356B0022_532031160122get_impl*
 if (Self = nil) then
  Result := 0
 else
  Result := pm_GetChildrenCount;
//#UC END# *4A42356B0022_532031160122get_impl*
//#UC START# *4A42356B0022_532031160122get_var*
//#UC END# *4A42356B0022_532031160122get_var*
//#UC START# *4A42358A00C2_532031160122_impl*
 Assert(false, 'InsertChildTag должен быть перекрыт в ' + ClassName);
//#UC END# *4A42358A00C2_532031160122_impl*
//#UC START# *4A42358A00C2_532031160122_var*
//#UC END# *4A42358A00C2_532031160122_var*
//#UC START# *4A4235B70288_532031160122_impl*
 Result := -1;
 Assert(false, 'IndexOfChild должен быть перекрыт в ' + ClassName);
//#UC END# *4A4235B70288_532031160122_impl*
//#UC START# *4A4235B70288_532031160122_var*
//#UC END# *4A4235B70288_532031160122_var*
//#UC START# *4A42374B0371_532031160122_impl*
 Result := nil;
 Assert(false, 'FindChild должен быть перекрыт в ' + ClassName);
//#UC END# *4A42374B0371_532031160122_impl*
//#UC START# *4A42374B0371_532031160122_var*
//#UC END# *4A42374B0371_532031160122_var*
//#UC START# *4A42378D0030_532031160122_impl*
 Assert(false, 'DeleteChildren должен быть перекрыт в ' + ClassName);
//#UC END# *4A42378D0030_532031160122_impl*
//#UC START# *4A42378D0030_532031160122_var*
//#UC END# *4A42378D0030_532031160122_var*
//#UC START# *4A423C670156_532031160122_impl*
 if (Self = nil) then
  Self.SetRefTo(aRef)
 else
  Self.DoSetRef(aRef);
//#UC END# *4A423C670156_532031160122_impl*
//#UC START# *4A423C670156_532031160122_var*
//#UC END# *4A423C670156_532031160122_var*
//#UC START# *4A423EC900C2_532031160122_impl*
 theChild := Child[anIndex].AsRef;
 if (anOp <> nil) AND not anOp.InUndo AND not anOp.InIOProcess then
  anOp.Processor.CheckDelete(Self, theChild.AsObject, anIndex);
 Result := DeleteChildPrim(anIndex, theChild.AsObject, anOp);
//#UC END# *4A423EC900C2_532031160122_impl*
//#UC START# *4A423EC900C2_532031160122_var*
//#UC END# *4A423EC900C2_532031160122_var*
//#UC START# *4A423ECE03A6_532031160122_impl*
 l_Index := IndexOfChild(aChild);
 if (l_Index >= 0) then
  Result := DeleteChild(l_Index, Context)
 else
  Result := false; 
//#UC END# *4A423ECE03A6_532031160122_impl*
//#UC START# *4A423ECE03A6_532031160122_var*
var
 l_Index : Integer;
//#UC END# *4A423ECE03A6_532031160122_var*
//#UC START# *4A423F0002E2_532031160122_impl*
 l_Child := nil;
 Result := DeleteChild(anIndex, anOp, l_Child);
 l_Child := nil;
//#UC END# *4A423F0002E2_532031160122_impl*
//#UC START# *4A423F0002E2_532031160122_var*
var
 l_Child : Il3TagRef;
//#UC END# *4A423F0002E2_532031160122_var*
//#UC START# *4A42489800D0_532031160122_impl*
 if (Self <> nil) then
  DoDoLoad;
//#UC END# *4A42489800D0_532031160122_impl*
//#UC START# *4A42489800D0_532031160122_var*
//#UC END# *4A42489800D0_532031160122_var*
//#UC START# *4A4248A501C8_532031160122_impl*
 if (Self <> nil) then
  DoForceStore;
//#UC END# *4A4248A501C8_532031160122_impl*
//#UC START# *4A4248A501C8_532031160122_var*
//#UC END# *4A4248A501C8_532031160122_var*
//#UC START# *4A4248C902F1_532031160122_impl*
 if (Self = nil) then
  Result := false
 else
  Result := DoMarkModified; 
//#UC END# *4A4248C902F1_532031160122_impl*
//#UC START# *4A4248C902F1_532031160122_var*
//#UC END# *4A4248C902F1_532031160122_var*
//#UC START# *4A4DE1FE035C_5331A06F028A_impl*
 Result := false;
//#UC END# *4A4DE1FE035C_5331A06F028A_impl*
//#UC START# *4A4DE1FE035C_5331A06F028A_var*
//#UC END# *4A4DE1FE035C_5331A06F028A_var*
//#UC START# *4A4DE21A0276_5331A06F028A_impl*
 Result := (Self <> nil) AND GetIsProp;
//#UC END# *4A4DE21A0276_5331A06F028A_impl*
//#UC START# *4A4DE21A0276_5331A06F028A_var*
//#UC END# *4A4DE21A0276_5331A06F028A_var*
//#UC START# *4A4DE23F0106_5331A06F028A_impl*
 Result := (Self = nil);
//#UC END# *4A4DE23F0106_5331A06F028A_impl*
//#UC START# *4A4DE23F0106_5331A06F028A_var*
//#UC END# *4A4DE23F0106_5331A06F028A_var*
//#UC START# *4A51E39F033B_5331A06F028A_impl*
 Result := (Self = aType);
//#UC END# *4A51E39F033B_5331A06F028A_impl*
//#UC START# *4A51E39F033B_5331A06F028A_var*
//#UC END# *4A51E39F033B_5331A06F028A_var*
//#UC START# *4A54E03B009A_47A8693601A1_impl*
 Result := l3IsNil(AsWStr);
//#UC END# *4A54E03B009A_47A8693601A1_impl*
//#UC START# *4A54E03B009A_47A8693601A1_var*
//#UC END# *4A54E03B009A_47A8693601A1_var*
//#UC START# *4A6039AA0172_532031160122set_impl*
 if (Self <> nil) then
  pm_SetChildrenCapacity(aValue);
//#UC END# *4A6039AA0172_532031160122set_impl*
//#UC START# *4A6039AA0172_532031160122set_var*
//#UC END# *4A6039AA0172_532031160122set_var*
//#UC START# *4A6475C4026D_532031160122get_impl*
 if (Self = nil) then
  Result := nil
 else
  Result := TagOwner;
//#UC END# *4A6475C4026D_532031160122get_impl*
//#UC START# *4A6475C4026D_532031160122get_var*
//#UC END# *4A6475C4026D_532031160122get_var*
//#UC START# *4A6475C4026D_532031160122set_impl*
 if (Self <> nil) then
  TagOwner := aValue;
//#UC END# *4A6475C4026D_532031160122set_impl*
//#UC START# *4A6475C4026D_532031160122set_var*
//#UC END# *4A6475C4026D_532031160122set_var*
//#UC START# *4BB21F9D022F_532031160122_impl*
 Result := DoIterateChildrenF(anAction, aLo, aHi, aLoadedOnly);
//#UC END# *4BB21F9D022F_532031160122_impl*
//#UC START# *4BB21F9D022F_532031160122_var*
//#UC END# *4BB21F9D022F_532031160122_var*
//#UC START# *4BBF49EB0260_532031160122_impl*
 Result := DoIterateChildrenBack(anAction, aHi, aLo, aLoadedOnly);
//#UC END# *4BBF49EB0260_532031160122_impl*
//#UC START# *4BBF49EB0260_532031160122_var*
//#UC END# *4BBF49EB0260_532031160122_var*
//#UC START# *4BC31A730293_532031160122_impl*
 DoIterateProperties(anAction, anAll);
//#UC END# *4BC31A730293_532031160122_impl*
//#UC START# *4BC31A730293_532031160122_var*
//#UC END# *4BC31A730293_532031160122_var*
//#UC START# *4BC71B0A028C_532031160122_impl*
 if GetAttr(anIndex, l_Value) AND not l_Value.IsNull then
  Result := l_Value.AsLong
 else
  Result := aDefault;
//#UC END# *4BC71B0A028C_532031160122_impl*
//#UC START# *4BC71B0A028C_532031160122_var*
var
 l_Value : Tl3Variant;
//#UC END# *4BC71B0A028C_532031160122_var*
//#UC START# *4BC8415802B6_532031160122_impl*
 Result := -1;
 Assert(false, 'CompareWithInt должен быть перекрыт в ' + ClassName);
//#UC END# *4BC8415802B6_532031160122_impl*
//#UC START# *4BC8415802B6_532031160122_var*
//#UC END# *4BC8415802B6_532031160122_var*
//#UC START# *4BC8415E021A_532031160122_impl*
 Result := -1;
 Assert(false, 'CompareWithTag должен быть перекрыт в ' + ClassName);
//#UC END# *4BC8415E021A_532031160122_impl*
//#UC START# *4BC8415E021A_532031160122_var*
//#UC END# *4BC8415E021A_532031160122_var*
//#UC START# *4BC843A5011F_532031160122_impl*
 Result := CheckAttr(Path, nil, false, theIndex);
//#UC END# *4BC843A5011F_532031160122_impl*
//#UC START# *4BC843A5011F_532031160122_var*
//#UC END# *4BC843A5011F_532031160122_var*
//#UC START# *4BC843C40240_532031160122_impl*
 Result := nil;
 Assert(false, 'ROwnAtom должен быть перекрыт в ' + ClassName);
//#UC END# *4BC843C40240_532031160122_impl*
//#UC START# *4BC843C40240_532031160122_var*
//#UC END# *4BC843C40240_532031160122_var*
//#UC START# *4BC843C80301_532031160122_impl*
 Result := DoCAtom(anIndex, aContext, anAtomType);
 Assert(Result.TagType <> nil);
//#UC END# *4BC843C80301_532031160122_impl*
//#UC START# *4BC843C80301_532031160122_var*
//#UC END# *4BC843C80301_532031160122_var*
//#UC START# *4BC843CE00EF_532031160122_impl*
 Result := CheckAttr(aPath, aContext, true, theIndex);
//#UC END# *4BC843CE00EF_532031160122_impl*
//#UC START# *4BC843CE00EF_532031160122_var*
//#UC END# *4BC843CE00EF_532031160122_var*
//#UC START# *4BC8441500B7_532031160122_impl*
 if (Self = nil) then
  Result := false
 else
  Result := DoGetHasSubAtom(anIndex); 
//#UC END# *4BC8441500B7_532031160122_impl*
//#UC START# *4BC8441500B7_532031160122_var*
//#UC END# *4BC8441500B7_532031160122_var*
//#UC START# *4BC8446D010E_532031160122_impl*
 if (Self = nil) then
  Result := true
 else
  Result := GetIsNull;
//#UC END# *4BC8446D010E_532031160122_impl*
//#UC START# *4BC8446D010E_532031160122_var*
//#UC END# *4BC8446D010E_532031160122_var*
//#UC START# *4BC8447200B0_532031160122_impl*
 Result := not IsNull AND not IsTransparent;
//#UC END# *4BC8447200B0_532031160122_impl*
//#UC START# *4BC8447200B0_532031160122_var*
//#UC END# *4BC8447200B0_532031160122_var*
//#UC START# *4BC8447501CB_532031160122_impl*
 if (Self = nil) then
  Result := false
 else
  Result := GetIsTransparent;  
//#UC END# *4BC8447501CB_532031160122_impl*
//#UC START# *4BC8447501CB_532031160122_var*
//#UC END# *4BC8447501CB_532031160122_var*
//#UC START# *4BC8447A0046_532031160122_impl*
 if (Self = nil) then
  Result := false
 else
  Result := GetIsStream(theStream); 
//#UC END# *4BC8447A0046_532031160122_impl*
//#UC START# *4BC8447A0046_532031160122_var*
//#UC END# *4BC8447A0046_532031160122_var*
//#UC START# *4BC84CA1035B_532031160122_impl*
 if (Self = nil) then
  Result := false
 else
  Result := DoQT(IID, Obj, aProcessor); 
//#UC END# *4BC84CA1035B_532031160122_impl*
//#UC START# *4BC84CA1035B_532031160122_var*
//#UC END# *4BC84CA1035B_532031160122_var*
//#UC START# *4BC84CEE0329_532031160122_impl*
 if (Self = nil) then
  Result := false
 else
  Result := Self.GetInterface(IID, Obj);
//#UC END# *4BC84CEE0329_532031160122_impl*
//#UC START# *4BC84CEE0329_532031160122_var*
//#UC END# *4BC84CEE0329_532031160122_var*
//#UC START# *4BC84CF702F5_532031160122_impl*
 Result := GetInterface(IID, Obj);
//#UC END# *4BC84CF702F5_532031160122_impl*
//#UC START# *4BC84CF702F5_532031160122_var*
//#UC END# *4BC84CF702F5_532031160122_var*
//#UC START# *4C6CE735026E_532031160122_impl*
 Result := false;
 Assert(false, 'DeleteChildPrim должен быть перекрыт в ' + ClassName);
//#UC END# *4C6CE735026E_532031160122_impl*
//#UC START# *4C6CE735026E_532031160122_var*
//#UC END# *4C6CE735026E_532031160122_var*
//#UC START# *4C6D1C29031F_532031160122_impl*
 Assert(false, 'DoMarkModified должен быть перекрыт в ' + ClassName);
 Result := false;
//#UC END# *4C6D1C29031F_532031160122_impl*
//#UC START# *4C6D1C29031F_532031160122_var*
//#UC END# *4C6D1C29031F_532031160122_var*
//#UC START# *4CEFA0BA0233_532031160122_impl*
 Assert(false, 'Не переопределён метод DoDoLoad в ' + ClassName);
//#UC END# *4CEFA0BA0233_532031160122_impl*
//#UC START# *4CEFA0BA0233_532031160122_var*
//#UC END# *4CEFA0BA0233_532031160122_var*
//#UC START# *4E2EA8B10353_532031160122get_impl*
 Result := GetInt64A(aTagID);
//#UC END# *4E2EA8B10353_532031160122get_impl*
//#UC START# *4E2EA8B10353_532031160122get_var*
//#UC END# *4E2EA8B10353_532031160122get_var*
//#UC START# *4E2EA8B10353_532031160122set_impl*
 Set_Int64W(aTagID, nil, aValue);
//#UC END# *4E2EA8B10353_532031160122set_impl*
//#UC START# *4E2EA8B10353_532031160122set_var*
//#UC END# *4E2EA8B10353_532031160122set_var*
//#UC START# *4E2EA93E029A_532031160122set_impl*
 SetInt64A(aTagID, aContext, aValue);
//#UC END# *4E2EA93E029A_532031160122set_impl*
//#UC START# *4E2EA93E029A_532031160122set_var*
//#UC END# *4E2EA93E029A_532031160122set_var*
//#UC START# *5081632303E6_532031160122_impl*
 Result := -1;
 Assert(false, 'Не переопределён метод DoIterateChildrenBack в ' + ClassName);
//#UC END# *5081632303E6_532031160122_impl*
//#UC START# *5081632303E6_532031160122_var*
//#UC END# *5081632303E6_532031160122_var*
//#UC START# *530B20AC019A_532031160122_impl*
 Result := false;
//#UC END# *530B20AC019A_532031160122_impl*
//#UC START# *530B20AC019A_532031160122_var*
//#UC END# *530B20AC019A_532031160122_var*
//#UC START# *532031160122ci*
//#UC END# *532031160122ci*
//#UC START# *532031160122cit*
//#UC END# *532031160122cit*
//#UC START# *532031160122impl*
//#UC END# *532031160122impl*
//#UC START# *532031160122publ*
 public
   property Child[anIndex: Integer]: Tl3Variant
     read pm_GetChild;
   property AsWStr: Tl3WString
     read pm_GetAsWStr;
   property AsString: AnsiString
     read pm_GetAsString;
   property AttrW[anIndex  : Integer;
                  const aContext : Il3OpPack]: Tl3Variant
     write pm_SetAttrW;
     {-}
   property BoolA[anIndex  : Integer]: Boolean
     read pm_GetBoolA
     write pm_SetBoolA;
     {* - изменить значение. }
   property BoolW[anIndex  : Integer;
                  const aContext : Il3OpPack]: Boolean
     write pm_SetBoolW;
     {* - изменить значение. }
  property IntW[anIndex  : Integer;
                const aContext : Il3OpPack]: Integer
    write pm_SetIntW;
    {* - изменить значение. }
  property IntA[anIndex: Integer]: Integer
    read pm_GetIntA
    write pm_SetIntA;
    {* - изменить значение. }
  property PCharLenA[anIndex: Integer]: Tl3PCharLen
    read pm_GetPCharLenA
    write pm_SetPCharLenA;
    {-}
  property PCharLenW[anIndex  : Integer;
                     const aContext : Il3OpPack]: Tl3WString
    write pm_SetPCharLenW;
    {-}
  property StrA[anIndex: Integer]: AnsiString
    read pm_GetStrA
    write pm_SetStrA;
    {-}
  property StrW[anIndex  : Integer;
                const aContext : Il3OpPack]: AnsiString
    write pm_SetStrW;
    {-}
  property Owner: Tl3Variant
    read Get_Owner
    write Set_Owner;
  property Attr[anIndex: Integer]: Tl3Variant
    read pm_GetAttr;
    {-}
  property Int64A[aTagID: Integer]: Int64
    read Get_Int64A
    write Set_Int64A;
  property Int64W[aTagID: Integer; const aContext: Il3OpPack]: Int64
    write Set_Int64W;
  property DateTimeA[aTagID: Integer]: TDateTime
    read Get_DateTimeA
    write Set_DateTimeA;
  property DateTimeW[aTagID: Integer; const aContext: Il3OpPack]: TDateTime
    write Set_DateTimeW;
//#UC END# *532031160122publ*
//#UC START# *5321B9DF011A_532031160122_impl*
 Assert(false, 'Не переопределён метод DoForceStore в ' + ClassName);
//#UC END# *5321B9DF011A_532031160122_impl*
//#UC START# *5321B9DF011A_532031160122_var*
//#UC END# *5321B9DF011A_532031160122_var*
//#UC START# *5326D7B603A3_532031160122_impl*
 Assert(false, 'Невозможно преобразовать ' + ClassName + ' к Integer');
 Result := 0;
//#UC END# *5326D7B603A3_532031160122_impl*
//#UC START# *5326D7B603A3_532031160122_var*
//#UC END# *5326D7B603A3_532031160122_var*
//#UC START# *5327E77D0084_532031160122_impl*
 Result := false;
//#UC END# *5327E77D0084_532031160122_impl*
//#UC START# *5327E77D0084_532031160122_var*
//#UC END# *5327E77D0084_532031160122_var*
//#UC START# *5327E7AA01F1_532031160122_impl*
 Result := false;
//#UC END# *5327E7AA01F1_532031160122_impl*
//#UC START# *5327E7AA01F1_532031160122_var*
//#UC END# *5327E7AA01F1_532031160122_var*
//#UC START# *5329CD1A020E_47A8693601A1_impl*
 l_S := GetAsPCharLen;
 if (l_S.SCodePage = CP_Unicode) then
  Result := l3PCharLen2String(l_S, CP_ANSI)
 else
  Result := l3PCharLen2String(l_S, l_S.SCodePage);
//#UC END# *5329CD1A020E_47A8693601A1_impl*
//#UC START# *5329CD1A020E_47A8693601A1_var*
var
 l_S : Tl3WString;
//#UC END# *5329CD1A020E_47A8693601A1_var*
//#UC START# *5329CD1A020E_53319F9C002F_impl*
 Result := '';
 Assert(false, 'Невозможно преобразовать ' + ClassName + ' к AnsiString');
//#UC END# *5329CD1A020E_53319F9C002F_impl*
//#UC START# *5329CD1A020E_53319F9C002F_var*
//#UC END# *5329CD1A020E_53319F9C002F_var*
//#UC START# *5329CD1A020E_5331A06F028A_impl*
 l_S := GetAsPCharLen;
 if (l_S.SCodePage = CP_Unicode) then
  Result := l3PCharLen2String(l_S, CP_ANSI)
 else
  Result := l3PCharLen2String(l_S, l_S.SCodePage);
//#UC END# *5329CD1A020E_5331A06F028A_impl*
//#UC START# *5329CD1A020E_5331A06F028A_var*
var
 l_S : Tl3WString;
//#UC END# *5329CD1A020E_5331A06F028A_var*
//#UC START# *532AD5480329_532031160122_impl*
 Result := false;
//#UC END# *532AD5480329_532031160122_impl*
//#UC START# *532AD5480329_532031160122_var*
//#UC END# *532AD5480329_532031160122_var*
//#UC START# *532AE8F2009A_53319F9C002F_impl*
 Result := false;
 Assert(false, 'Невозможно вычислить IsOrd для ' + ClassName);
//#UC END# *532AE8F2009A_53319F9C002F_impl*
//#UC START# *532AE8F2009A_53319F9C002F_var*
//#UC END# *532AE8F2009A_53319F9C002F_var*
//#UC START# *532C4B8E00CC_532031160122_impl*
 if (Self = nil) then
  Result := (anOther = nil) OR anOther.IsNull
 else
 if (Self = anOther) then
  Result := true
 else
 begin
  if Self.IsNull then
   Result := (anOther = nil) OR anOther.IsNull
  else
  if not TagType.IsSame(anOther.TagType) then
   Result := false
  else
  begin
   if Self.IsTransparent then
    Result := anOther.IsTransparent
   else
   if TagType.IsOrd then
    Result := (Self.AsLong = anOther.AsLong)
   else
    Result := (Self.Box = anOther.Box);
  end;//not TagType.IsSame(aTag.TagType)
 end;//Self = anOther
//#UC END# *532C4B8E00CC_532031160122_impl*
//#UC START# *532C4B8E00CC_532031160122_var*
//#UC END# *532C4B8E00CC_532031160122_var*
//#UC START# *532C4D4102D8_532031160122_impl*
 Result := false;
//#UC END# *532C4D4102D8_532031160122_impl*
//#UC START# *532C4D4102D8_532031160122_var*
//#UC END# *532C4D4102D8_532031160122_var*
//#UC START# *532FFF230250_532031160122_impl*
 Result := Self;
//#UC END# *532FFF230250_532031160122_impl*
//#UC START# *532FFF230250_532031160122_var*
//#UC END# *532FFF230250_532031160122_var*
//#UC START# *533069050153_532031160122_impl*
 Self.SetRefTo(theRef);
//#UC END# *533069050153_532031160122_impl*
//#UC START# *533069050153_532031160122_var*
//#UC END# *533069050153_532031160122_var*
//#UC START# *533121900355_532031160122_impl*
 if (Self = nil) then
  Result := nil
 else
  Result := GetTagType; 
//#UC END# *533121900355_532031160122_impl*
//#UC START# *533121900355_532031160122_var*
//#UC END# *533121900355_532031160122_var*
//#UC START# *533121AF0203_532031160122_impl*
 Result := nil;
 Assert(false, 'Невозможно получить тип для ' + ClassName);
//#UC END# *533121AF0203_532031160122_impl*
//#UC START# *533121AF0203_532031160122_var*
//#UC END# *533121AF0203_532031160122_var*
//#UC START# *533129DC037C_532031160122_impl*
 Result := TagType.IsKindOf(aType);
//#UC END# *533129DC037C_532031160122_impl*
//#UC START# *533129DC037C_532031160122_var*
//#UC END# *533129DC037C_532031160122_var*
//#UC START# *533129DC037C_53319F9C002F_impl*
 Result := false;
 Assert(false, 'Не перекрыт GetIsKindOfPrim для ' + ClassName);
//#UC END# *533129DC037C_53319F9C002F_impl*
//#UC START# *533129DC037C_53319F9C002F_var*
//#UC END# *533129DC037C_53319F9C002F_var*
//#UC START# *53317D14019D_ext:FileName
w:\common\components\rtl\Garant\L3\l3Variant.pas
//#UC END# *53317D14019D_ext:FileName
//#UC START# *53317D14019Dimpl_uses*
//#UC END# *53317D14019Dimpl_uses*
//#UC START# *533195830003_532031160122set_impl*
 SetAttr(anIndex, aContext, aValue);
//#UC END# *533195830003_532031160122set_impl*
//#UC START# *533195830003_532031160122set_var*
//#UC END# *533195830003_532031160122set_var*
//#UC START# *5331961F0280_532031160122_impl*
 Assert(false, 'Невозможно присвоить атрибут в ' + ClassName);
//#UC END# *5331961F0280_532031160122_impl*
//#UC START# *5331961F0280_532031160122_var*
//#UC END# *5331961F0280_532031160122_var*
//#UC START# *53319C270138_532031160122_impl*
 Result := false;
 theValue := nil;
 Assert(false, 'Невозможно получить атрибут в ' + ClassName);
//#UC END# *53319C270138_532031160122_impl*
//#UC START# *53319C270138_532031160122_var*
//#UC END# *53319C270138_532031160122_var*
//#UC START# *53319F9C002Fci*
 //Tl3VariantDef = class;
//#UC END# *53319F9C002Fci*
//#UC START# *53319F9C002Fcit*
//#UC END# *53319F9C002Fcit*
//#UC START# *53319F9C002Fimpl*
//#UC END# *53319F9C002Fimpl*
//#UC START# *53319F9C002Fpubl*
//#UC END# *53319F9C002Fpubl*
//#UC START# *5331A12D0103_5331A06F028Aset_impl*
 Assert(false, 'Невозможно присвоить идентификатор в ' + ClassName)
//#UC END# *5331A12D0103_5331A06F028Aset_impl*
//#UC START# *5331A12D0103_5331A06F028Aset_var*
//#UC END# *5331A12D0103_5331A06F028Aset_var*
//#UC START# *5331A15E00B3_5331A06F028Aget_impl*
 if (Self = nil) then
  Result := ''
 else
  Result := GetAsString;
//#UC END# *5331A15E00B3_5331A06F028Aget_impl*
//#UC START# *5331A15E00B3_5331A06F028Aget_var*
//#UC END# *5331A15E00B3_5331A06F028Aget_var*
//#UC START# *5331A8F1002E_5331A06F028Aget_impl*
 if (Self = nil) then
  l3AssignNil(Result)
 else
  Result := GetAsPCharLen;
//#UC END# *5331A8F1002E_5331A06F028Aget_impl*
//#UC START# *5331A8F1002E_5331A06F028Aget_var*
//#UC END# *5331A8F1002E_5331A06F028Aget_var*
//#UC START# *5331B00B02DD_532031160122_impl*
 Assert(false, 'Невозможно присвоить атрибут в ' + ClassName);
//#UC END# *5331B00B02DD_532031160122_impl*
//#UC START# *5331B00B02DD_532031160122_var*
//#UC END# *5331B00B02DD_532031160122_var*
//#UC START# *5332CD8801A6_532031160122_impl*
 Assert(false, 'Невозможно присвоить атрибут в ' + ClassName);
//#UC END# *5332CD8801A6_532031160122_impl*
//#UC START# *5332CD8801A6_532031160122_var*
//#UC END# *5332CD8801A6_532031160122_var*
//#UC START# *5332FB8403B6_532031160122_impl*
 Assert(false, 'Невозможно присвоить атрибут в ' + ClassName);
//#UC END# *5332FB8403B6_532031160122_impl*
//#UC START# *5332FB8403B6_532031160122_var*
//#UC END# *5332FB8403B6_532031160122_var*
//#UC START# *533413FC02FC_532031160122get_impl*
 Result := Self.TagType;
//#UC END# *533413FC02FC_532031160122get_impl*
//#UC START# *533413FC02FC_532031160122get_var*
//#UC END# *533413FC02FC_532031160122get_var*
//#UC START# *53343980014A_532031160122get_impl*
 Result := nil;
//#UC END# *53343980014A_532031160122get_impl*
//#UC START# *53343980014A_532031160122get_var*
//#UC END# *53343980014A_532031160122get_var*
//#UC START# *53343980014A_532031160122set_impl*
 Assert(false, 'pm_SetTagOwner должен быть перекрыт в ' + ClassName);
//#UC END# *53343980014A_532031160122set_impl*
//#UC START# *53343980014A_532031160122set_var*
//#UC END# *53343980014A_532031160122set_var*
//#UC START# *5335815D03DC_532031160122get_impl*
 Result := 0;
 Assert(false, 'pm_GetChildrenCount должен быть перекрыт в ' + ClassName);
//#UC END# *5335815D03DC_532031160122get_impl*
//#UC START# *5335815D03DC_532031160122get_var*
//#UC END# *5335815D03DC_532031160122get_var*
//#UC START# *533581770377_532031160122set_impl*
 Assert(false, 'pm_SetChildrenCapacity должен быть перекрыт в ' + ClassName);
//#UC END# *533581770377_532031160122set_impl*
//#UC START# *533581770377_532031160122set_var*
//#UC END# *533581770377_532031160122set_var*
//#UC START# *53358545012C_532031160122get_impl*
 Result := nil;
 Assert(false, 'pm_GetChildPrim должен быть перекрыт в ' + ClassName);
//#UC END# *53358545012C_532031160122get_impl*
//#UC START# *53358545012C_532031160122get_var*
//#UC END# *53358545012C_532031160122get_var*
//#UC START# *533D587B0359_532031160122_impl*
 Result := -1;
 Assert(false, 'Не переопределён метод DoAddChild в ' + ClassName);
//#UC END# *533D587B0359_532031160122_impl*
//#UC START# *533D587B0359_532031160122_var*
//#UC END# *533D587B0359_532031160122_var*
//#UC START# *533D6FD80051_532031160122_impl*
 Result := nil;
 Assert(false, 'Не переопределён метод CheckAttr в ' + ClassName);
//#UC END# *533D6FD80051_532031160122_impl*
//#UC START# *533D6FD80051_532031160122_var*
//#UC END# *533D6FD80051_532031160122_var*
//#UC START# *533D791300DA_532031160122_impl*
 Result := nil;
 Assert(false, 'Не переопределён метод DoCAtom в ' + ClassName);
//#UC END# *533D791300DA_532031160122_impl*
//#UC START# *533D791300DA_532031160122_var*
//#UC END# *533D791300DA_532031160122_var*
//#UC START# *5342A452039F_53317D14019D_impl*
 Result := SysUtils.Supports(anObject, aGUID, theObj);
 Assert(Result OR (anObject = nil) OR anObject.GetInterface(IUnknown, l_Unknown));
 if not Result then
  Result := anObject.QI(aGUID, theObj);
//#UC END# *5342A452039F_53317D14019D_impl*
//#UC START# *5342A452039F_53317D14019D_var*
var
 l_Unknown : IUnknown;
//#UC END# *5342A452039F_53317D14019D_var*
//#UC START# *5342ACBB023A_53319F9C002F_impl*
 if (Self = nil) then
  Result := false
 else
 if Succeeded(Self.QueryInterface(aGUID, theObj)) then
  Result := true
 else
  Result := false;
//#UC END# *5342ACBB023A_53319F9C002F_impl*
//#UC START# *5342ACBB023A_53319F9C002F_var*
//#UC END# *5342ACBB023A_53319F9C002F_var*
//#UC START# *5346C0B5023A_532031160122_impl*
 if (Self = nil) then
  Result := Tl3NullTag.Instance
 else
  Result := GetAsRef;
//#UC END# *5346C0B5023A_532031160122_impl*
//#UC START# *5346C0B5023A_532031160122_var*
//#UC END# *5346C0B5023A_532031160122_var*
//#UC START# *53568FCA01E8_532031160122_impl*
 //Result := AsTag;
 Result := Tl3TagRef.Make(Self);
//#UC END# *53568FCA01E8_532031160122_impl*
//#UC START# *53568FCA01E8_532031160122_var*
//#UC END# *53568FCA01E8_532031160122_var*
//#UC START# *535690980333_5331A06F028A_impl*
 Assert(Self <> nil);
 Result := DoDoMakeTag(aRef);
//#UC END# *535690980333_5331A06F028A_impl*
//#UC START# *535690980333_5331A06F028A_var*
//#UC END# *535690980333_5331A06F028A_var*
//#UC START# *5356910A0042_5331A06F028A_impl*
 Result := nil;
 Assert(false, 'Не переопределён метод DoDoMakeTag в ' + ClassName);
//#UC END# *5356910A0042_5331A06F028A_impl*
//#UC START# *5356910A0042_5331A06F028A_var*
//#UC END# *5356910A0042_5331A06F028A_var*
//#UC START# *535FD1080328_535FD0BB03C3_impl*
 Assert(aTag <> nil);
 inherited Create;
 aTag.SetRefTo(f_Tag);
//#UC END# *535FD1080328_535FD0BB03C3_impl*
//#UC START# *535FD1080328_535FD0BB03C3_var*
//#UC END# *535FD1080328_535FD0BB03C3_var*
//#UC START# *5360CE4B026A_532031160122_impl*
 Result := 0;
 Assert(false, 'Не переопределён метод GetInt64A в ' + ClassName);
//#UC END# *5360CE4B026A_532031160122_impl*
//#UC START# *5360CE4B026A_532031160122_var*
//#UC END# *5360CE4B026A_532031160122_var*
//#UC START# *5360CE910025_532031160122_impl*
 Assert(false, 'Не переопределён метод SetInt64A в ' + ClassName);
//#UC END# *5360CE910025_532031160122_impl*
//#UC START# *5360CE910025_532031160122_var*
//#UC END# *5360CE910025_532031160122_var*
//#UC START# *53B444D80378_532031160122get_impl*
 Result := 0;
 l_V := Self.Int64A[aTagID];
 l3Move(l_V, Result, SizeOf(Result));
(* Int64(l_DT) := Self.Int64A[aTagID];
 Result := StDateTimeRecToDateTime(l_DT);*)
//#UC END# *53B444D80378_532031160122get_impl*
//#UC START# *53B444D80378_532031160122get_var*
(*var
 l_DT : TStDateTimeRec;*)
var
 l_V : Int64;
//#UC END# *53B444D80378_532031160122get_var*
//#UC START# *53B444D80378_532031160122set_impl*
 Self.DateTimeW[aTagID, nil] := aValue;
//#UC END# *53B444D80378_532031160122set_impl*
//#UC START# *53B444D80378_532031160122set_var*
//#UC END# *53B444D80378_532031160122set_var*
//#UC START# *53B52B130172_532031160122set_impl*
 l_V := 0;
 l3Move(aValue, l_V, SizeOf(aValue));
 Self.Int64W[aTagID, aContext] := l_V;
(* l_DT := DateTimeToStDateTimeRec(aValue);
 Self.Int64A[aTagID] := Int64(l_DT);*)
//#UC END# *53B52B130172_532031160122set_impl*
//#UC START# *53B52B130172_532031160122set_var*
(*var
 l_DT : TStDateTimeRec;*)
var
 l_V : Int64;
//#UC END# *53B52B130172_532031160122set_var*
