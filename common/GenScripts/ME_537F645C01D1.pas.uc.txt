//#UC START# *479731C50290_537F645C01D1_impl*
 FreeAndNil(f_Synchronizer);
 FreeAndNil(f_List);
 inherited;
//#UC END# *479731C50290_537F645C01D1_impl*
//#UC START# *479731C50290_537F645C01D1_var*
//#UC END# *479731C50290_537F645C01D1_var*
//#UC START# *53959A720000_537F645C01D1_impl*
 inherited;
 f_List := TCsProcWithIdList.Create;
 f_Synchronizer := TMultiReadExclusiveWriteSynchronizer.Create;
//#UC END# *53959A720000_537F645C01D1_impl*
//#UC START# *53959A720000_537F645C01D1_var*
//#UC END# *53959A720000_537F645C01D1_var*
//#UC START# *53959ABC03D4_537F645C01D1_impl*
 Result := nil;
 for I := 0 to f_List.Count - 1 do
  if (f_List[I].QueryId = aQueryId) then
  begin
   Result := f_List[I];
   Break;
  end;//f_List[I].QueryId = aQueryId
//#UC END# *53959ABC03D4_537F645C01D1_impl*
//#UC START# *53959ABC03D4_537F645C01D1_var*
var
 I: Integer;
//#UC END# *53959ABC03D4_537F645C01D1_var*
//#UC START# *53959B1400E0_537F645C01D1_impl*
 f_Synchronizer.BeginRead;
 try
  l_ProcWithId := ListItemBy(aQueryId);
  if l_ProcWithId <> nil then
   Result := l_ProcWithId.Proc
  else
   Result := nil;
 finally
  f_Synchronizer.EndRead;
 end;//try..finally
//#UC END# *53959B1400E0_537F645C01D1_impl*
//#UC START# *53959B1400E0_537F645C01D1_var*
var
 l_ProcWithId: TCsProcWithId;
//#UC END# *53959B1400E0_537F645C01D1_var*
