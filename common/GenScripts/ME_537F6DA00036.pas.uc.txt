//#UC START# *537F6E030167_537F6DA00036_impl*
 inherited Create;
 if aLowNum <= aHiNum then
 begin
  LowNum := aLowNum;
  HiNum  := aHiNum;
 end
 else
 begin
  LowNum := aHiNum;
  HiNum  := aLowNum;
 end;
//#UC END# *537F6E030167_537F6DA00036_impl*
//#UC START# *537F6E030167_537F6DA00036_var*
//#UC END# *537F6E030167_537F6DA00036_var*
//#UC START# *537F6E2A0377_537F6DA00036_impl*
 Result := (Self.HiNum  >= aRange.LowNum) and
           (Self.LowNum <= aRange.HiNum);
//#UC END# *537F6E2A0377_537F6DA00036_impl*
//#UC START# *537F6E2A0377_537F6DA00036_var*
//#UC END# *537F6E2A0377_537F6DA00036_var*
//#UC START# *537F6E4E0207_537F6DA00036_impl*
 if not HasIntersectionWith(aRange) then
  raise Exception.Create('Попытка объединения непересекающихся диапазонов.');

 Self.LowNum := Min(Self.LowNum, aRange.LowNum);
 Self.HiNum  := Max(Self.HiNum,  aRange.HiNum);
//#UC END# *537F6E4E0207_537F6DA00036_impl*
//#UC START# *537F6E4E0207_537F6DA00036_var*
//#UC END# *537F6E4E0207_537F6DA00036_var*
//#UC START# *537F6ED601AE_537F6DA00036_impl*
 Result := HiNum - LowNum + 1;
//#UC END# *537F6ED601AE_537F6DA00036_impl*
//#UC START# *537F6ED601AE_537F6DA00036_var*
//#UC END# *537F6ED601AE_537F6DA00036_var*
