//#UC START# *53BA902B00C5_53BA8FB5015D_impl*
 l_File := FilerForOutput;
 try
  l_File.Open;
  try
   for l_TT := Low(TcsTaskType) to High(TcsTaskType) do
   begin
    l_File.WriteLn(GetEnumName(TypeInfo(TcsTaskType), Ord(l_TT)));
    l_Class := TddTaskClassManager.Instance.GetClass(l_TT, l_Description);
    if (l_Class = nil) then
     l_File.WriteLn('NotRegistered')
    else
    begin
     l_File.WriteLn(l_Class.ClassName);
     l_File.WriteLn(RddTaskItemFriend(l_Class).GetTaggedDataType.AsString);
     l_File.WriteLn(l_Description);
    end;//l_Class = nil
    l_File.WriteLn('-----------');
   end;//for l_TT
  finally
   l_File.Close;
  end;//try..finally
 finally
  FreeAndNil(l_File);
 end;//try..finally
 CheckWithEtalon(FileForOutput, #0);
//#UC END# *53BA902B00C5_53BA8FB5015D_impl*
//#UC START# *53BA902B00C5_53BA8FB5015D_var*
var
 l_TT : TcsTaskType;
 l_File : Tl3CustomFiler;
 l_Class : TddTaskClass;
 l_Description : AnsiString;
//#UC END# *53BA902B00C5_53BA8FB5015D_var*
