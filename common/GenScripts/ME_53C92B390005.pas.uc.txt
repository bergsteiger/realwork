//#UC START# *479731C50290_53C92B390005_impl*
 FreeAndNil(f_Thread);
 FreeAndNil(f_ActiveTask);
 f_Manager := nil;
 FreeAndNil(f_FinishNotifierList);
 inherited Cleanup;
//#UC END# *479731C50290_53C92B390005_impl*
//#UC START# *479731C50290_53C92B390005_var*
//#UC END# *479731C50290_53C92B390005_var*
//#UC START# *53C92B390005_ext:ParentFileName
w:\archi\source\projects\PipeInAuto\Tasks\alcuAsyncSubmitter.pas
//#UC END# *53C92B390005_ext:ParentFileName
//#UC START# *53CCF726039A_53C92B390005_impl*
 inherited Create;
 f_UserID := aUserID;
 Assert(Assigned(aManager));
 f_Manager := aManager;
 f_Manager.GetUserAccountByID(f_UserID, l_UserName, l_Password);
 f_Thread := TalcuWorkThreadContainer.Create(Manager.ServerHostName, Manager.ServerPort,
   l_UserName, l_Password);
 f_FinishNotifierList := TalcuAsyncTaskFinishedNotifierList.Make;
 f_Active := True;
//#UC END# *53CCF726039A_53C92B390005_impl*
//#UC START# *53CCF726039A_53C92B390005_var*
var
  l_UserName: AnsiString;
  l_Password: AnsiString;
//#UC END# *53CCF726039A_53C92B390005_var*
//#UC START# *53CCF77201EF_53C92B390005_impl*
 l3InterlockedIncrement(f_SubmitGuard);
 try
  Result := (f_SubmitGuard = 1) and Active and Assigned(aTask) and (f_ActiveTask = nil) and not f_Manager.IsUserLogined(f_UserID);
  if Result then
  begin
   if (aTask.Status = cs_tsAsyncRun) then
     Exit;
   if Manager.EnterTaskExecution(aTask) then
   begin
     aTask.SetRefTo(f_ActiveTask);
     {$If not defined(Nemesis)}
     f_ActiveTask.RegisterAbortProcessor(Self);
     {$IfEnd not defined(Nemesis)}
     f_ActiveTask.RequestAsyncRun;
     f_TaskFileName := ChangeFileExt(l3GetTempFileName('alcuAssistant'), '.tsk');
     l_Stream := Tl3FileStream.Create(f_TaskFileName, l3_fmCreateReadWrite);
     try
      ActiveTask.SaveToEvd(l_Stream, nil{True});
     finally
      FreeAndNil(l_Stream);
     end;
     ActiveTask.RequestAsyncRun;
     f_Thread.SubmitTask(f_TaskFileName);
   end
   else
     Result := False;
  end;//Result
 finally
  l3InterlockedDecrement(f_SubmitGuard);
 end;
//#UC END# *53CCF77201EF_53C92B390005_impl*
//#UC START# *53CCF77201EF_53C92B390005_var*
var
  l_Stream: TStream;
  l_ExportDir: String;
//#UC END# *53CCF77201EF_53C92B390005_var*
//#UC START# *53CDF9B0012E_53C92B390005_impl*
  if (f_CheckExecutionGuard = 0) and (f_SubmitGuard = 0) and Assigned(f_ActiveTask) and (f_ActiveTask.Status in [cs_tsAsyncRun, cs_tsFrozen, cs_tsFrozenRun, cs_tsDeleted, cs_tsAborting]) then
  begin
   l3InterlockedIncrement(f_CheckExecutionGuard);
   try
    if f_Thread.Suspended and (f_CheckExecutionGuard = 1) then
    begin
      case f_Thread.ExitCode of
        cs_arsSuccess: f_ActiveTask.RunSuccessfullyFinished(aServices);
        cs_arsAborted: f_ActiveTask.AsyncErrorIfRunning('Операция прервана');
        cs_arsUtilityNotFound: f_ActiveTask.AsyncErrorIfRunning('Не удалось запустить утилиту');
        cs_arsTaskUnregistered: f_ActiveTask.AsyncErrorIfRunning('Задача не заргестрирована для асинхронного выполнения');
      else
      begin
        if f_ActiveTask.IgnoreStrangeExitCode and ((f_Thread.ExitCode < 0) or (f_Thread.ExitCode > 100)) then
        begin
         f_ActiveTask.RunSuccessfullyFinished(aServices);
         l3System.Msg2Log('Ошибка. Exit code = %d. См. лог alcuAsyncExecutor.', [f_Thread.ExitCode]);
        end
        else
         f_ActiveTask.AsyncErrorIfRunning(Format('Ошибка. Exit code = %d. %s. См. лог alcuAsyncExecutor.', [f_Thread.ExitCode, f_ActiveTask.TaskID]));
      end;
      end;
      {$If not defined(Nemesis)}
      f_ActiveTask.UnRegisterAbortProcessor(Self);
      {$IfEnd not defined(Nemesis)}
      Manager.LeaveTaskExecution(ActiveTask);
      NotifySubscribers;
      f_ActiveTask.RunEnded(aServices);
      FreeAndNil(f_ActiveTask);
      DeleteFile(f_TaskFileName);
    end;
   finally
    l3InterlockedDecrement(f_CheckExecutionGuard);
   end;
  end;
//#UC END# *53CDF9B0012E_53C92B390005_impl*
//#UC START# *53CDF9B0012E_53C92B390005_var*
//#UC END# *53CDF9B0012E_53C92B390005_var*
//#UC START# *53CF5E600196_53C92B390005_impl*
  Manager.SendAbortNotification(f_UserID);
//#UC END# *53CF5E600196_53C92B390005_impl*
//#UC START# *53CF5E600196_53C92B390005_var*
//#UC END# *53CF5E600196_53C92B390005_var*
//#UC START# *53D0E880001E_53C92B390005_impl*
 f_FinishNotifierList.Add(aNotifier);
//#UC END# *53D0E880001E_53C92B390005_impl*
//#UC START# *53D0E880001E_53C92B390005_var*
//#UC END# *53D0E880001E_53C92B390005_var*
//#UC START# *53D0E88D0368_53C92B390005_impl*
 f_FinishNotifierList.Remove(aNotifier);
//#UC END# *53D0E88D0368_53C92B390005_impl*
//#UC START# *53D0E88D0368_53C92B390005_var*
//#UC END# *53D0E88D0368_53C92B390005_var*
//#UC START# *53D0E89C0113_53C92B390005_impl*
 if Assigned(f_ActiveTask) then
   f_FinishNotifierList.IterateAllF(l3L2IA(@DoIt))
//#UC END# *53D0E89C0113_53C92B390005_impl*
//#UC START# *53D0E89C0113_53C92B390005_var*

 function DoIt(aNotifier: PalcuAsyncTaskFinishedNotifier; Index: Long): Bool;
 begin
   aNotifier.TaskFinished(f_ActiveTask);
   Result := True;
 end;

//#UC END# *53D0E89C0113_53C92B390005_var*
//#UC START# *5404732A00CC_53C92B390005_impl*
 Result := FileExists(TalcuWorkThreadContainer.AssistantFileName);
//#UC END# *5404732A00CC_53C92B390005_impl*
//#UC START# *5404732A00CC_53C92B390005_var*
//#UC END# *5404732A00CC_53C92B390005_var*
//#UC START# *573EC2C80226_53C92B390005_impl*
 if CountAbortingTask then
  Result := Assigned(f_ActiveTask) and (ActiveTask.Status in (cSet + [cs_tsAborting]))
 else
  Result := Assigned(f_ActiveTask) and (ActiveTask.Status in cSet)
//#UC END# *573EC2C80226_53C92B390005_impl*
//#UC START# *573EC2C80226_53C92B390005_var*
const
 cSet = [cs_tsAsyncRun, cs_tsFrozenRun, cs_tsDeleted];
//#UC END# *573EC2C80226_53C92B390005_var*
