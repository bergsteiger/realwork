//#UC START# *479731C50290_544A09EE005F_impl*
 StopProcessing(True);

 FreeAndNil(f_SendThread);
 FreeAndNil(f_SendQueue);

 FreeAndNil(f_ReceiveThread);
 FreeAndNil(f_ProcessThread);
 FreeAndNil(f_ReceiveQueue);

 IOHandlers[ncs_skSend] := nil;
 IOHandlers[ncs_skReceive] := nil;
 FreeAndNil(f_ReplyWaiter);
 inherited;
//#UC END# *479731C50290_544A09EE005F_impl*
//#UC START# *479731C50290_544A09EE005F_var*
//#UC END# *479731C50290_544A09EE005F_var*
//#UC START# *47A042E100E2_544A09EE005F_impl*
 inherited;
 f_ReplyWaiter := TncsReplyWaiter.Create;

 f_SendQueue := TncsMessageQueue.Create;
 f_SendThread := TncsSendThread.Create(f_SendQueue);

 f_ReceiveQueue := TncsMessageQueue.Create;
 f_ReceiveThread := TncsReceiveThread.Create(f_ReceiveQueue);
 f_ProcessThread := TncsProcessThread.Create(f_ReceiveQueue, Self, f_ReplyWaiter);
//#UC END# *47A042E100E2_544A09EE005F_impl*
//#UC START# *47A042E100E2_544A09EE005F_var*
//#UC END# *47A042E100E2_544A09EE005F_var*
//#UC START# *545225640060_544A09EE005Fget_impl*
 Result := f_IOHandlers[SocketKind];
//#UC END# *545225640060_544A09EE005Fget_impl*
//#UC START# *545225640060_544A09EE005Fget_var*
//#UC END# *545225640060_544A09EE005Fget_var*
//#UC START# *545225640060_544A09EE005Fset_impl*
 aValue.SetRefTo(f_IOHandlers[SocketKind]);
//#UC END# *545225640060_544A09EE005Fset_impl*
//#UC START# *545225640060_544A09EE005Fset_var*
//#UC END# *545225640060_544A09EE005Fset_var*
//#UC START# *54533B010030_544A09EE005F_impl*
 f_Connected := aValue;
//#UC END# *54533B010030_544A09EE005F_impl*
//#UC START# *54533B010030_544A09EE005F_var*
//#UC END# *54533B010030_544A09EE005F_var*
//#UC START# *5459C7E00125_544A09EE005F_impl*
 Lock;
 try
  Assert(IOHandlers[HandShakeKind] <> nil);

  SetConnected(True);

  IOHandlers[HandShakeKind].WriteBufferOpen(-1);
  HandShake;

  Assert(SendThread.Suspended);
  Assert(ReceiveThread.Suspended);

  SendQueue.Processing := True;
  ReceiveQueue.Processing := True;
  SendThread.IOHandler := IOHandlers[ncs_skSend];
  SendThread.Suspended := False;
  ReceiveThread.IOHandler := IOHandlers[ncs_skReceive];
  ReceiveThread.Suspended := False;
  ProcessThread.Suspended := False;
  TransportStarted;
 finally
  Unlock;
 end;
//#UC END# *5459C7E00125_544A09EE005F_impl*
//#UC START# *5459C7E00125_544A09EE005F_var*
//#UC END# *5459C7E00125_544A09EE005F_var*
//#UC START# *5459C803038D_544A09EE005F_impl*
 Lock;
 Try
  SendQueue.Processing := False;
  ReceiveQueue.Processing := False;
  f_ReplyWaiter.Clear;

  if WaitForThreads then
  begin
   ReceiveThread.WaitFor;
   SendThread.WaitFor;
   ProcessThread.WaitFor;
  end;

  if Assigned(IOHandlers[ncs_skSend]) then
  begin
   IOHandlers[ncs_skSend].WriteBufferClose;
   IOHandlers[ncs_skSend].InputBufferClear;
  end;

  if Assigned(IOHandlers[ncs_skReceive]) then
  begin
   IOHandlers[ncs_skReceive].WriteBufferClose;
   IOHandlers[ncs_skReceive].InputBufferClear;
  end;

  SetConnected(False);
  IOHandlers[ncs_skSend] := nil;
  IOHandlers[ncs_skReceive] := nil;
 finally
  Unlock;
 end;
//#UC END# *5459C803038D_544A09EE005F_impl*
//#UC START# *5459C803038D_544A09EE005F_var*
//#UC END# *5459C803038D_544A09EE005F_var*
//#UC START# *5464B4E900DA_544A09EE005F_impl*
 if aMessage.Kind = ncs_mkMessage then
  f_ReplyWaiter.SubmitMessage(aMessage);
 f_SendQueue.Push(aMessage);
//#UC END# *5464B4E900DA_544A09EE005F_impl*
//#UC START# *5464B4E900DA_544A09EE005F_var*
//#UC END# *5464B4E900DA_544A09EE005F_var*
//#UC START# *5464B52F02D5_544A09EE005F_impl*
 Result := f_ReplyWaiter.WaitForReply(aMessage, theReply, aTimeOut);
//#UC END# *5464B52F02D5_544A09EE005F_impl*
//#UC START# *5464B52F02D5_544A09EE005F_var*
//#UC END# *5464B52F02D5_544A09EE005F_var*
//#UC START# *5465AB2B00CA_544A09EE005Fget_impl*
 Result := f_Connected;
//#UC END# *5465AB2B00CA_544A09EE005Fget_impl*
//#UC START# *5465AB2B00CA_544A09EE005Fget_var*
//#UC END# *5465AB2B00CA_544A09EE005Fget_var*
//#UC START# *546608F101DE_544A09EE005Fget_impl*
 Result := f_ClientID;
//#UC END# *546608F101DE_544A09EE005Fget_impl*
//#UC START# *546608F101DE_544A09EE005Fget_var*
//#UC END# *546608F101DE_544A09EE005Fget_var*
//#UC START# *546608F101DE_544A09EE005Fset_impl*
 f_ClientID := aValue;
//#UC END# *546608F101DE_544A09EE005Fset_impl*
//#UC START# *546608F101DE_544A09EE005Fset_var*
//#UC END# *546608F101DE_544A09EE005Fset_var*
//#UC START# *5486B96A0025_544A09EE005Fget_impl*
 Result := f_Connected and f_SendQueue.Processing and f_ReceiveQueue.Processing;
 if Result and Assigned(f_SendThread.IOHandler) then
  Result := f_SendThread.IOHandler.Connected;
//#UC END# *5486B96A0025_544A09EE005Fget_impl*
//#UC START# *5486B96A0025_544A09EE005Fget_var*
//#UC END# *5486B96A0025_544A09EE005Fget_var*
//#UC START# *548FEF4F002E_544A09EE005Fget_impl*
 Result := IntSessionID;
//#UC END# *548FEF4F002E_544A09EE005Fget_impl*
//#UC START# *548FEF4F002E_544A09EE005Fget_var*
//#UC END# *548FEF4F002E_544A09EE005Fget_var*
//#UC START# *5492C5F703AA_544A09EE005F_impl*
 // Do nothing
//#UC END# *5492C5F703AA_544A09EE005F_impl*
//#UC START# *5492C5F703AA_544A09EE005F_var*
//#UC END# *5492C5F703AA_544A09EE005F_var*
