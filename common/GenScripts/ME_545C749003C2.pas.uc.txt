//#UC START# *479731C50290_545C749003C2_impl*
 f_Listener := nil;
 f_Transporter := nil;
 inherited;
//#UC END# *479731C50290_545C749003C2_impl*
//#UC START# *479731C50290_545C749003C2_var*
//#UC END# *479731C50290_545C749003C2_var*
//#UC START# *47A042E100E2_545C749003C2_impl*
 inherited;
{$IFDEF csSynchroTransport}
 f_Transporter := TncsSynchroCompatibilityClientTransporter.Make(qtalcuExportResultProcessing);
{$ELSE csSynchroTransport}
 f_Transporter := TncsCompatibilityClientTransporter.Make(qtalcuExportResultProcessing);
{$ENDIF csSynchroTransport}
 ncsFileTransferReg.ncsClientRegister;
//#UC END# *47A042E100E2_545C749003C2_impl*
//#UC START# *47A042E100E2_545C749003C2_var*
//#UC END# *47A042E100E2_545C749003C2_var*
//#UC START# *4911B69E037D_545C749003C2_impl*
 l_Watch.Reset;

 g_SaveMessage.ReSet;
 g_LoadMessage.ReSet;
 g_SendMessage.ReSet;
 g_ReveiveMessage.ReSet;
 g_WaitFile.ReSet;
 g_ReceivePartFile.ReSet;
 g_SaveControl.ReSet;
 g_WriteFile.ReSet;


 l_Watch.Start;
 try
  try
   l3System.Msg2Log('Начало проверки результатов экспорта');
   l_OldValue := f_RequestCounter;
   f_Transporter.Connect(ServerHost, ServerPort, l3CreateStringGUID);
   try
    if not f_Transporter.Connected then
    begin
     l3InterlockedExchange(f_RequestCounter, 0);
     l3System.Msg2Log('Обрыв связи на старте доставки');
     Exit;
    end;
    // Собственно общаемся
    l_TaskListReply := nil;
    try
     l_Reply := nil;
     l_TaskListMsg := TncsGetReadyToDeliveryTasks.Create;
     try
      l_TaskListMsg.UserID := ClientID;
      f_Transporter.Send(l_TaskListMsg);
      if f_Transporter.WaitForReply(l_TaskListMsg, l_Reply) then
      begin
       l_TaskListReply := l_Reply as TncsGetReadyToDeliveryTasksReply;
       for l_IDX := 0 to l_TaskListReply.TasksIDList.Count - 1 do
       begin
        if not f_Transporter.Processing then
         Exit;
        if not ReceiveTaskResult(l_TaskListReply.TasksIDList[l_IDX]) then
         Exit;
       end;
       l3InterlockedExchangeAdd(f_RequestCounter, -l_OldValue);
      end;
     finally
      FreeAndNil(l_TaskListMsg);
     end;
    finally
     FreeAndNil(l_TaskListReply);
    end;
   finally
    f_Transporter.Disconnect;
   end;
   l3System.Msg2Log('Проверка результатов экспорта успешно завершена');
  except
   on E: Exception do
   begin
    l3InterlockedExchange(f_RequestCounter, 0);
    l3System.Msg2Log('Проверка результатов экспорта завершилась с ошибкой');
    l3System.Exception2Log(E);
    raise;
   end;
  end;
 finally
  l_Watch.Stop;
 end;
 l3System.Msg2Log('Затраченное время %s ms', [FormatFloat('0,###.000', l_Watch.Time * 1000)]);

{$IFDEF ncsProfile}
 l3System.Msg2Log('SAVE MESSAGE = %s', [FormatFloat('0,###.000', g_SaveMessage.Time * 1000)]);
 l3System.Msg2Log('SEND MESSAGE = %s', [FormatFloat('0,###.000', g_SendMessage.Time * 1000)]);
 l3System.Msg2Log('LOAD MESSAGE = %s', [FormatFloat('0,###.000', g_LoadMessage.Time * 1000)]);
 l3System.Msg2Log('RECEIVE MESSAGE = %s', [FormatFloat('0,###.000', g_ReveiveMessage.Time * 1000)]);
 l3System.Msg2Log('WAIT FILE = %s', [FormatFloat('0,###.000', g_WaitFile.Time * 1000)]);
 l3System.Msg2Log('RECEIVE FILE = %s', [FormatFloat('0,###.000', g_ReceivePartFile.Time * 1000)]);
 l3System.Msg2Log('WRITE FILE = %s', [FormatFloat('0,###.000', g_WriteFile.Time * 1000)]);
 l3System.Msg2Log('WRITE CONTROL = %s', [FormatFloat('0,###.000', g_SaveControl.Time * 1000)]);
 l3System.Msg2Log('TOTAL = %s', [FormatFloat('0,###.000', l_Watch.Time * 1000)]);
{$ENDIF ncsProfile}
//#UC END# *4911B69E037D_545C749003C2_impl*
//#UC START# *4911B69E037D_545C749003C2_var*
var
 l_OldValue: Integer;
 l_TaskListMsg: TncsGetReadyToDeliveryTasks;
 l_Reply: TncsMessage;
 l_TaskListReply: TncsGetReadyToDeliveryTasksReply;
 l_IDX: Integer;
 l_Watch: Tl3StopWatch;
//#UC END# *4911B69E037D_545C749003C2_var*
//#UC START# *545C749003C2_ext:FileName
w:\archi\source\projects\Archi\Processing\arResultDeliverer.pas
//#UC END# *545C749003C2_ext:FileName
//#UC START# *545C74C40316_545C749003C2get_impl*
 Result := f_Transporter.ClientID;
//#UC END# *545C74C40316_545C749003C2get_impl*
//#UC START# *545C74C40316_545C749003C2get_var*
//#UC END# *545C74C40316_545C749003C2get_var*
//#UC START# *545C74C40316_545C749003C2set_impl*
 f_Transporter.ClientID := aValue;
//#UC END# *545C74C40316_545C749003C2set_impl*
//#UC START# *545C74C40316_545C749003C2set_var*
//#UC END# *545C74C40316_545C749003C2set_var*
//#UC START# *545C84E90055_545C749003C2_impl*
 if not Suspended then
 begin
  f_Transporter.Disconnect(True);
  Terminate;
 end; 
//#UC END# *545C84E90055_545C749003C2_impl*
//#UC START# *545C84E90055_545C749003C2_var*
//#UC END# *545C84E90055_545C749003C2_var*
//#UC START# *545C88760010_545C749003C2_impl*
 l3InterlockedIncrement(f_RequestCounter);
 PostThreadMessage(MainThreadID, WM_NULL, 0, 0);
//#UC END# *545C88760010_545C749003C2_impl*
//#UC START# *545C88760010_545C749003C2_var*
//#UC END# *545C88760010_545C749003C2_var*
//#UC START# *545C888301CF_545C749003C2_impl*
 Result := HasReadyToDeliveryData and Suspended;
//#UC END# *545C888301CF_545C749003C2_impl*
//#UC START# *545C888301CF_545C749003C2_var*
//#UC END# *545C888301CF_545C749003C2_var*
//#UC START# *5465FDD1009D_545C749003C2_impl*
 Result := False;
 Listener.CheckTaskExistance(aTaskID);
 l_ResultMsg := TncsDeliveryResult.Create;
 try
  l_ResultMsg.TaskID := aTaskID;

  l_Deliverer := TarOneTaskDeliverer.Create(f_Transporter, aTaskID);
  try
   l_TryCount := 0;
   repeat
    l_ResultMsg.ResultKind := l_Deliverer.Execute;
    inc(l_TryCount);
    if (l_ResultMsg.ResultKind = ncs_rkRetry) and (l_TryCount < cMaxTryCount) then
    begin
     l3System.Msg2Log('Не удается записать доставку, попытка номер %d', [l_TryCount + 1]);
     Sleep(cTryDelay);
    end;
   until (l_ResultMsg.ResultKind <> ncs_rkRetry) or (l_TryCount = cMaxTryCount);
   case l_ResultMsg.ResultKind of
    ncs_rkOk:
     begin
      Listener.RequestSendMessage(Format('Результаты экспорта помещены в папку %s', [l_Deliverer.TargetFolder]));
      Result := True;
     end;
    ncs_rkFail:
     begin
      if f_Transporter.Processing then
       Listener.RequestSendMessage(Format('Не удалось доставить результаты экспорта в папку %s', [l_Deliverer.TargetFolder]));
      Result := False;
     end;
    ncs_rkRetry:
     begin
      l_Folder := l_Deliverer.TargetFolder;
      if Listener.RequestNewFolder(l_Folder) then
      begin
       l_Message := TncsCorrectFolder.Create;
       try
        l_Message.TaskID := aTaskID;
        l_Message.NewFolder := l_Folder;
        f_Transporter.Send(l_Message);
       finally
        FreeAndNil(l_Message);
       end;
       Listener.ChangeResultFolder(aTaskID, l_Folder);
       RequestDelivery;
      end
      else
      begin
       l_ResultMsg.ResultKind := ncs_rkFail;
       Listener.RequestSendMessage(Format('Не удалось доставить результаты экспорта в папку %s', [l_Deliverer.TargetFolder]));
      end;
      Result := True;
     end;
    ncs_rkEmpty:
     begin
      Listener.RequestSendMessage('Результаты экспорта не найдены. Все экспортируемые документы оказались пустыми');
      Result := True;
     end;
    else
     Assert(False);
   end;
   if f_Transporter.Processing then
    f_Transporter.Send(l_ResultMsg);
  finally
   FreeAndNil(l_Deliverer);
  end;
 finally
  FreeAndNil(l_ResultMsg);
 end;
//#UC END# *5465FDD1009D_545C749003C2_impl*
//#UC START# *5465FDD1009D_545C749003C2_var*
var
 l_Deliverer: TarOneTaskDeliverer;
 l_Folder: AnsiString;
 l_Message: TncsCorrectFolder;
 l_ResultMsg: TncsDeliveryResult;
 l_TryCount: Integer;

const
 cMaxTryCount = 10;
 cTryDelay = 1000;
//#UC END# *5465FDD1009D_545C749003C2_var*
//#UC START# *546AF1220010_545C749003C2_impl*
 inherited Create;
 f_Listener := Pointer(aWeakListener);
//#UC END# *546AF1220010_545C749003C2_impl*
//#UC START# *546AF1220010_545C749003C2_var*
//#UC END# *546AF1220010_545C749003C2_var*
//#UC START# *549AA07C02A4_545C749003C2get_impl*
 Result := IarResultDelivererListner(f_Listener);
//#UC END# *549AA07C02A4_545C749003C2get_impl*
//#UC START# *549AA07C02A4_545C749003C2get_var*
//#UC END# *549AA07C02A4_545C749003C2get_var*
//#UC START# *549BB1B501D5_545C749003C2_impl*
 Result := (f_RequestCounter > 0);
//#UC END# *549BB1B501D5_545C749003C2_impl*
//#UC START# *549BB1B501D5_545C749003C2_var*
//#UC END# *549BB1B501D5_545C749003C2_var*
