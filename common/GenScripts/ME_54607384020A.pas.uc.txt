//#UC START# *479731C50290_54607384020A_impl*
 Unregister(f_DisconnectExecutor);
 FreeAndNil(f_DisconnectExecutor);
 Assert(f_List.Count = 0);
 FreeAndNil(f_List);
 inherited;
//#UC END# *479731C50290_54607384020A_impl*
//#UC START# *479731C50290_54607384020A_var*
//#UC END# *479731C50290_54607384020A_var*
//#UC START# *47A042E100E2_54607384020A_impl*
 inherited;
 f_List := TncsExecutorFactoryList.Create;
 f_DisconnectExecutor := TncsDisconnectExecutor.Create;
 Register(f_DisconnectExecutor);
//#UC END# *47A042E100E2_54607384020A_impl*
//#UC START# *47A042E100E2_54607384020A_var*
//#UC END# *47A042E100E2_54607384020A_var*
//#UC START# *54607384020A_ext:FileName
w:\common\components\rtl\Garant\cs\ncsMessageExecutorFactory.pas
//#UC END# *54607384020A_ext:FileName
//#UC START# *54607DDC0159_5464A0E40234_impl*
 l3System.Msg2Log('Не найден обработчик для ncsMessage (%s)!!', [aContext.rMessage.TaggedData.TagType.AsString]);
 if aContext.rMessage.Kind = ncs_mkMessage then
 begin
  l_Reply := TncsInvalidMessage.Create;
  try
   l_Reply.Kind := ncs_mkReply;
   l_Reply.MessageID := aContext.rMessage.MessageID;
   aContext.rTransporter.Send(l_Reply);
  finally
   FreeANdNil(l_Reply);
  end;
 end;
//#UC END# *54607DDC0159_5464A0E40234_impl*
//#UC START# *54607DDC0159_5464A0E40234_var*
var
 l_Reply: TncsInvalidMessage;
//#UC END# *54607DDC0159_5464A0E40234_var*
//#UC START# *54607DDC0159_547C1FB30097_impl*
 l_Reply := TncsDisconnectReply.Create(aContext.rMessage);
 try
  aContext.rTransporter.Send(l_Reply);
 finally
  FreeAndNil(l_Reply);
 end;
//#UC END# *54607DDC0159_547C1FB30097_impl*
//#UC START# *54607DDC0159_547C1FB30097_var*
var
 l_Reply: TncsDisconnectReply;
//#UC END# *54607DDC0159_547C1FB30097_var*
//#UC START# *546082B801F3_547C1FB30097_impl*
 if aMessage is TncsDisconnect then
  Result := Self
 else
  Result := nil;
//#UC END# *546082B801F3_547C1FB30097_impl*
//#UC START# *546082B801F3_547C1FB30097_var*
//#UC END# *546082B801F3_547C1FB30097_var*
//#UC START# *5460830D0295_54607384020A_impl*
 f_List.Add(aFactory);
//#UC END# *5460830D0295_54607384020A_impl*
//#UC START# *5460830D0295_54607384020A_var*
//#UC END# *5460830D0295_54607384020A_var*
//#UC START# *5460832C0080_54607384020A_impl*
 f_List.Remove(aFactory);
//#UC END# *5460832C0080_54607384020A_impl*
//#UC START# *5460832C0080_54607384020A_var*
//#UC END# *5460832C0080_54607384020A_var*
//#UC START# *5460AEC800B8_54607384020A_impl*
 Result := nil;
 if not (aMessage is TncsInvalidMessage) then
  f_List.IterateAllF(l3L2IA(@DoIt));
 if Result = nil then
  Result := TncsInvalidExecutor.Make
//#UC END# *5460AEC800B8_54607384020A_impl*
//#UC START# *5460AEC800B8_54607384020A_var*
 function DoIt(aFactory: PIncsMessageExecutorFactory; Index: Long): Bool;
 var
  l_Executor: IncsExecutor;
 begin
  l_Executor := aFactory^.MakeExecutor(aMessage);
  if Assigned(l_Executor) then
  begin
   MakeExecutor := l_Executor;
   Result := False;
  end
  else
   Result := True;
 end;
//#UC END# *5460AEC800B8_54607384020A_var*
//#UC START# *5464A4DE0181_5464A0E40234_impl*
 inherited Create;
//#UC END# *5464A4DE0181_5464A0E40234_impl*
//#UC START# *5464A4DE0181_5464A0E40234_var*
//#UC END# *5464A4DE0181_5464A0E40234_var*
