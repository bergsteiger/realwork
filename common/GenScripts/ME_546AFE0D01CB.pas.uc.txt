//#UC START# *479731C50290_546AFE0D01CB_impl*
 f_Transporter := nil;
 FreeAndNil(f_Reply);
 FreeAndNil(f_Progressor);
 inherited;
//#UC END# *479731C50290_546AFE0D01CB_impl*
//#UC START# *479731C50290_546AFE0D01CB_var*
//#UC END# *479731C50290_546AFE0D01CB_var*
//#UC START# *546AFE0D01CB_ext:FileName
w:\archi\source\projects\Archi\Processing\arOneTaskDeliverer.pas
//#UC END# *546AFE0D01CB_ext:FileName
//#UC START# *546AFE0D01CBimpl_uses*
//#UC END# *546AFE0D01CBimpl_uses*
//#UC START# *546AFE51021F_546AFE0D01CB_impl*
 Result := ncs_rkFail;
 l_TaskDesc := TncsGetTaskDescription.Create;
 try
  l_TaskDesc.TaskID := f_TaskID;
  f_Transporter.Send(l_TaskDesc);
  l_Reply := nil;
  try
   if f_Transporter.WaitForReply(l_TaskDesc, l_Reply) then
   begin
    if not f_Transporter.Processing then
    begin
     l3System.Msg2Log('Обшика доставки - обрыв связи');
     Exit;
    end;
    l_Reply.SetRefTo(f_Reply);
    l_Deliverer := TncsFileListDeliverer.Create(f_Transporter, f_Progressor, f_TaskID, f_Reply.LocalFolder);
    try
     try
      try
       Result := cMap[l_Deliverer.Execute(f_Reply.FileDesc)];
      except
       on E: Exception do
       begin
        l3System.Exception2Log(E);
        raise;
       end;
      end;
     except
      on EOSError do
       Result := ncs_rkRetry;
      on EInOutError do
       Result := ncs_rkRetry;
      on EncsEmptyResults do
       Result := ncs_rkEmpty;
     end;
    finally
     FreeAndNil(l_Deliverer);
    end;
   end;
  finally
   FreeAndNil(l_Reply)
  end;
 finally
  FreeAndNil(l_TaskDesc);
 end;
//#UC END# *546AFE51021F_546AFE0D01CB_impl*
//#UC START# *546AFE51021F_546AFE0D01CB_var*
var
 l_TaskDesc: TncsGetTaskDescription;
 l_Reply: TncsMessage;
 l_Deliverer: TncsFileListDeliverer;
const
 cMap: array [Boolean] of TncsResultKind = (ncs_rkFail, ncs_rkOk);
//#UC END# *546AFE51021F_546AFE0D01CB_var*
//#UC START# *546AFEAB00E6_546AFE0D01CBget_impl*
 if Assigned(f_Reply) then
  Result := f_Reply.LocalFolder
 else
  Result := '';
//#UC END# *546AFEAB00E6_546AFE0D01CBget_impl*
//#UC START# *546AFEAB00E6_546AFE0D01CBget_var*
//#UC END# *546AFEAB00E6_546AFE0D01CBget_var*
//#UC START# *546AFEF1001C_546AFE0D01CB_impl*
 inherited Create;
 f_Transporter := aTransporter;
 f_TaskID := aTaskID;
 f_Progressor := TddProgressObject.Create;
 f_Progressor.AllowProgressDecrement := True;
 f_Progressor.OnUpdate := ProgressUpdate;
//#UC END# *546AFEF1001C_546AFE0D01CB_impl*
//#UC START# *546AFEF1001C_546AFE0D01CB_var*
//#UC END# *546AFEF1001C_546AFE0D01CB_var*
//#UC START# *5474528D0320_546AFE0D01CB_impl*
 SetProgress(f_Progressor.TotalPercent, f_Progressor.Caption);
//#UC END# *5474528D0320_546AFE0D01CB_impl*
//#UC START# *5474528D0320_546AFE0D01CB_var*
//#UC END# *5474528D0320_546AFE0D01CB_var*
//#UC START# *547452F8012B_546AFE0D01CB_impl*
 if (f_ProgressPercent <> aNewPercent) or (f_ProgressDescription <> aNewDescription) then
 begin
  f_ProgressPercent := aNewPercent;
  f_ProgressDescription := aNewDescription;
  l_Message := TncsTaskProgress.Create;
  try
   l_Message.TaskID := f_TaskID;
   l_Message.Percent := f_ProgressPercent;
   l_Message.Description := f_ProgressDescription;
   if f_Transporter.Processing then
    f_Transporter.Send(l_Message)
   else
    l3System.Msg2Log('ALERT - SetProgress on disconected result delivery');
  finally
   FreeAndNil(l_Message);
  end;
 end;
//#UC END# *547452F8012B_546AFE0D01CB_impl*
//#UC START# *547452F8012B_546AFE0D01CB_var*
var
 l_Message: TncsTaskProgress;
//#UC END# *547452F8012B_546AFE0D01CB_var*
