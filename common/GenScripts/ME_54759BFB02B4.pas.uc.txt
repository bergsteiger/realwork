//#UC START# *54607DDC0159_54759BFB02B4_impl*
 l_Watch.Reset;
 Supports(aContext.rTransporter, IncsTrafficCounter, l_Counter);
 try
  l_Message := aContext.rMessage as TncsGetFilePart;
  l_Reply := TncsGetFilePartReply.Create(l_Message);
  try
   l_Reply.IsSuccess := False;
   l_Watch.Start;
   try
    if not TaskList.ForOneByIDF(L2AlcuTasksIteratorForOneByIDFAction(@DoProcess), l_Message.TaskID) then
     l3System.Msg2Log('Задача с идентификатором %s не найдена (запрос файла)', [l_Message.TaskID]);
   finally
    l_Watch.Stop;
    if Assigned(l_Counter) then
     l_Counter.AddWatch(l_Watch);
   end;
   aContext.rTransporter.Send(l_Reply);
  finally
   FreeAndNil(l_Reply);
  end;
 finally
  l_Counter := nil;
 end;
//#UC END# *54607DDC0159_54759BFB02B4_impl*
//#UC START# *54607DDC0159_54759BFB02B4_var*
var
 l_Message: TncsGetFilePart;
 l_Reply: TncsGetFilePartReply;
 l_Counter: IncsTrafficCounter;
 l_Watch: Tl3StopWatch;

 function DoProcess(anItem: TddProcessTask): Boolean;
 var
  l_Stream: TStream;
  l_FileName: AnsiString;
  l_ToCopyCount: Int64;
  l_PushMessage: TncsPushFilePart;
 begin
  g_ReceivePartFile.Start;
  try
   Result := False;
   l_FileName := IncludeTrailingPathDelimiter(anItem.DeliverySourceFolder) + l_Message.FileName;
   if FileExists(l_FileName) then
   begin
    l_Stream := Tl3FileStream.Create(l_FileName, l3_fmRead);
    try
     if l_Stream.Size < (l_Message.Offset + l_Message.PartSize) then
     begin
      l3System.Msg2Log('Обшика доставки - запросили файл за его границами');
      Exit;
     end;
     if l_Message.PartSize < 0 then
     begin
      l3System.Msg2Log('Обшика доставки - запросили нулевой пакет данных');
      Exit;
     end;
     l_Stream.Seek(l_Message.Offset, soBeginning);
     l_ToCopyCount := l_Stream.Size - l_Message.Offset;
     while l_ToCopyCount > 0 do
     begin
      if not aContext.rTransporter.Processing then
      begin
       l3System.Msg2Log('Обшика доставки - обрыв связи');
       Exit;
      end;
      l_PushMessage := TncsPushFilePart.Create;
      try
       l_PushMessage.TaskID := l_Message.TaskID;
       l_PushMessage.FileName := l_Message.FileName;
       l_PushMessage.Offset := l_Stream.Position;
       l_PushMessage.PartSize := Min(l_Message.PartSize, l_ToCopyCount);
       if Assigned(l_Counter) then
        l_Counter.DoProgress(l_PushMessage.PartSize);
       g_WriteFile.Start;
       try
        l_PushMessage.Data.CopyFrom(l_Stream, l_PushMessage.PartSize);
       finally
        g_WriteFile.Stop;
       end;
       aContext.rTransporter.Send(l_PushMessage);
       Dec(l_ToCopyCount, l_PushMessage.PartSize);
      finally
       FreeAndNil(l_PushMessage);
      end;
     end;
     l_Reply.IsSuccess := True;
    finally
     FreeAndNil(l_Stream);
    end;
   end;
  finally
   g_ReceivePartFile.Stop;
  end;
 end;

//#UC END# *54607DDC0159_54759BFB02B4_var*
//#UC START# *54759BFB02B4_ext:FileName
w:\archi\source\projects\PipeInAuto\Tasks\alcuGetFilePartExecutor.pas
//#UC END# *54759BFB02B4_ext:FileName
//#UC START# *54759BFB02B4impl_uses*
//#UC END# *54759BFB02B4impl_uses*
