//#UC START# *479731C50290_547DC47400EC_impl*
 l3Free(f_Subs);
 SubDescriptors := nil;
 inherited;
//#UC END# *479731C50290_547DC47400EC_impl*
//#UC START# *479731C50290_547DC47400EC_var*
//#UC END# *479731C50290_547DC47400EC_var*
//#UC START# *47C6B01A0301_547DC47400EC_impl*
 if not f_Subs.Empty then
  for I := 0 to Pred(f_Subs.Count) do
   f_Subs.Items[I].Clear;
 Invalidate;
//#UC END# *47C6B01A0301_547DC47400EC_impl*
//#UC START# *47C6B01A0301_547DC47400EC_var*
var
 I: Integer;
//#UC END# *47C6B01A0301_547DC47400EC_var*
//#UC START# *47C6B0750334_547DC47400EC_impl*
 DeleteSub(aSub.LayerID, aSub.ID);
 Invalidate;
//#UC END# *47C6B0750334_547DC47400EC_impl*
//#UC START# *47C6B0750334_547DC47400EC_var*
//#UC END# *47C6B0750334_547DC47400EC_var*
//#UC START# *47D1602000C6_547DC47400EC_impl*
 inherited;
 ControlStyle := ControlStyle - [csSetCaption, csAcceptsControls,csCaptureMouse];
 Orientation := ev_orVertical;
 f_Zoom := def_Zoom;
 f_Subs := TevSubPanelSubCollection.Create(Self);
 Width := DefSubPanelWidth;
//#UC END# *47D1602000C6_547DC47400EC_impl*
//#UC START# *47D1602000C6_547DC47400EC_var*
//#UC END# *47D1602000C6_547DC47400EC_var*
//#UC START# *48C6C044025E_547DC47400EC_impl*
 with CN do
  FillRect(ClipRect);
 DrawSubs(CN);
 {$IfNDef Nemesis}
 lRect := GetClientRect;
 DrawFrame(CN, lRect);
 {$EndIf  Nemesis}
//#UC END# *48C6C044025E_547DC47400EC_impl*
//#UC START# *48C6C044025E_547DC47400EC_var*
{$IfNDef Nemesis}
var
 lRect: TRect;
{$EndIf  Nemesis}
//#UC END# *48C6C044025E_547DC47400EC_var*
//#UC START# *4A2627980257_547DC47400EC_impl*
 if f_Subs.FindData(aSub.LayerID, I) then
 begin
  SL := f_Subs.Items[I];
  if SL.FindData(aSub.ID, I) then
  begin
   Sub := SL.Items[I];
   CN := Canvas;
   CN.BeginPaint;
   try
    CN.DrawEnabled := True;
    l_Flags := aSub.Flags;
    for J := 0 to 7 do
    begin
     if l3TestBit(l_Flags, J) then
      AddSub(CN, Sub.R, -(aSub.LayerID * 10 + J), (Sub as TevSubPanelSub).RealSub)
     else
      DeleteSubPrim(-(aSub.LayerID * 10 + J), aSub.ID);
    end;//for J
   finally
    CN.EndPaint;
   end;//try..finally
  end;//SL <> nil
 end;//f_Subs.Find
//#UC END# *4A2627980257_547DC47400EC_impl*
//#UC START# *4A2627980257_547DC47400EC_var*
var
 SL: TevSubPanelSubArray;
 I, J: Integer;
 Sub: TevSubPanelSub;
 CN: Il3Canvas;
 l_Flags: Integer;
//#UC END# *4A2627980257_547DC47400EC_var*
//#UC START# *547CA1860092_547DC47400ECget_impl*
 Result := f_Zoom;
//#UC END# *547CA1860092_547DC47400ECget_impl*
//#UC START# *547CA1860092_547DC47400ECget_var*
//#UC END# *547CA1860092_547DC47400ECget_var*
//#UC START# *547CA1860092_547DC47400ECset_impl*
 if (Zoom <> aValue) then
 begin
  f_Zoom := aValue;
  ClearSubs;
 end;
//#UC END# *547CA1860092_547DC47400ECset_impl*
//#UC START# *547CA1860092_547DC47400ECset_var*
//#UC END# *547CA1860092_547DC47400ECset_var*
//#UC START# *547CA1CA0126_547DC47400EC_impl*
 {$IFNDEF DesignTimeLibrary}
 if aSub.Exists {and aSub.IsVisibleOnSubPanel} then
 begin
  CN := Canvas;
  CN.BeginPaint;
  try
   CN.DrawEnabled := True;
   l_Rect.InitRect(ClientRect);
   {$IfNDef Nemesis}
   l_Rect.Inflate1(-Succ(BevelWidth));
   {$EndIf  Nemesis}
   with l_Rect do
    IntersectClipRect(CN.DC, Left, Top, Right, Bottom);
   AddSub(CN, aR, aSub.LayerID, aSub);
   F := aSub.Flags;
   l_SubIsVisible := aSub.IsVisibleOnSubPanel;
   if (F <> 0) then
    for I := 0 to 7 do
     if l3TestBit(F, I) then
      if (I = 0) or l_SubIsVisible then // 0 - колонка с номером блока/саба. ѕоказываем всегда. 476366422
       AddSub(CN, aR, -(aSub.LayerID*10+I), aSub);
  finally
   CN.EndPaint;
  end;//try..finanlly
 end;//aSub.IsValid
 {$ENDIF DesignTimeLibrary}
//#UC END# *547CA1CA0126_547DC47400EC_impl*
//#UC START# *547CA1CA0126_547DC47400EC_var*
var
 F: Integer;
 I: Byte;
 CN: Il3Canvas;
 l_Rect: Tl3SRect;
 l_SubIsVisible: Boolean;
//#UC END# *547CA1CA0126_547DC47400EC_var*
//#UC START# *547CB4C800EA_547DC47400EC_impl*
 ClearSubs;
//#UC END# *547CB4C800EA_547DC47400EC_impl*
//#UC START# *547CB4C800EA_547DC47400EC_var*
//#UC END# *547CB4C800EA_547DC47400EC_var*
//#UC START# *547CC36E00D5_547DC47400EC_impl*
 iD  := evPixelZoom(Zoom, iD);
 D := nev.CrtIC.LP2DP(l3PointX(iD)).X;
 CR.InitRect(ClientRect);
 {$IfNDef Nemesis}
 CR.Inflate1(-Succ(BevelWidth));
 {$EndIf  Nemesis}
 S := True;
 P := Point0;
 iP := evPoint0;
 case Orientation of
  ev_orHorizontal:
   if (Abs(D) < (CR.R.Right - CR.R.Left)) then
   begin
    P.X := D;
    iP.X := iD;
   end
   else
    S := False;
  ev_orVertical:
   if (Abs(D) < (CR.R.Bottom - CR.R.Top)) then
   begin
    P.Y := D;
    iP.Y := iD;
   end
   else
    S := False;
 end;//case Orientation
 if S then
  ScrollSubs
 else
  ClearSubs;
//#UC END# *547CC36E00D5_547DC47400EC_impl*
//#UC START# *547CC36E00D5_547DC47400EC_var*
var
 P: Tl3SPoint;
 CR: Tl3SRect;
 iP: Tl3Point;

 procedure ScrollSubs;

  function ScrollSubLayer(SA: PevSubPanelSubArray; Index: Integer): Boolean; 
  var
   I: Integer;
  begin{ScrollSubLayer}
   I := 0;
   while (I < SA^.Count) do
    if ScrollSub(SA^.Items[I], iP) then
     Inc(I)
    else
     SA^.Delete(I);
   Result := True;
  end;{ScrollSubLayer}

 begin{ScrollSubs}
  if (P.X <> 0) or (P.Y <> 0) then
  begin
   Windows.ScrollWindow(Handle, P.X, P.Y, @CR, @CR);
   f_Subs.IterateAllF(l3L2IA(@ScrollSubLayer));
   Update;
  end;{(P.X <> 0)..}
 end;{ScrollSubs}

var
 D: TevPixel;
 S: Boolean;
//#UC END# *547CC36E00D5_547DC47400EC_var*
//#UC START# *547DC47400EC_ext:ParentFileName
w:\common\components\gui\Garant\Everest\evSubPanel.pas
//#UC END# *547DC47400EC_ext:ParentFileName
//#UC START# *547DC93D03A0_547DC47400EC_impl*
 if not (csDesigning in ComponentState) then
 begin
  with Msg do
   SPS := SubOnPoint(l3SPoint(XPos, YPos), st);
  if (SPS <> nil) then
   DoOnClickSub(st, SPS.Handle, afw_ckDouble)
  else
   inherited;
 end
 else
  inherited;
//#UC END# *547DC93D03A0_547DC47400EC_impl*
//#UC START# *547DC93D03A0_547DC47400EC_var*
var
 st: Tl3Handle;
 SPS: TevSubPanelSub;
//#UC END# *547DC93D03A0_547DC47400EC_var*
//#UC START# *547DC9530096_547DC47400EC_impl*
 if not (csDesigning in ComponentState) then
 begin
  with Msg do
   SPS := SubOnPoint(l3SPoint(XPos, YPos), st);
  if (SPS <> nil) then
   DoOnClickSub(st, SPS.Handle, afw_ckSingle)
  else
   inherited;
 end
 else
  inherited;
//#UC END# *547DC9530096_547DC47400EC_impl*
//#UC START# *547DC9530096_547DC47400EC_var*
var
 st: Tl3Handle;
 SPS: TevSubPanelSub;
//#UC END# *547DC9530096_547DC47400EC_var*
//#UC START# *547DC96F0327_547DC47400EC_impl*
 if not (csDesigning in ComponentState) then
 begin
  with Msg do
   Pt := l3SPoint(XPos, YPos);
  CPt := Pt;
  Pt.Convert(ClientToScreen);
  SPS := SubOnPoint(CPt, st);
  if (SPS <> nil) then
   DoOnMenuSub(Pt, nev.CrtIC.LR2DR(SPS.DrawRect), st, SPS.Handle)
  else
   inherited
 end
 else
  inherited;
//#UC END# *547DC96F0327_547DC47400EC_impl*
//#UC START# *547DC96F0327_547DC47400EC_var*
var
 Pt: Tl3SPoint;
 CPt: Tl3SPoint;
 st: Tl3Handle;
 SPS: TevSubPanelSub;
//#UC END# *547DC96F0327_547DC47400EC_var*
//#UC START# *547DC97D01D5_547DC47400EC_impl*
 if not (csDesigning in ComponentState) then
 begin
  with Msg do
   Pt := l3SPoint(XPos, YPos);
  CPt := Pt;
  CPt.Convert(ScreenToClient);
  SPS := SubOnPoint(CPt, st);
  if (SPS <> nil) then
  begin
   if (SPS <> f_HintSub) then
   begin
    f_HintSub := SPS;
    DoOnMouseOverSub(Pt, nev.CrtIC.LR2DR(SPS.DrawRect), SPS.RealSub, st);
   end;//SPS <> f_HintSub..
  end//SPS <> nil
  else
  begin
   f_HintSub := nil;
   CancelHint;
  end;//SPS <> nil
 end;
 inherited;
//#UC END# *547DC97D01D5_547DC47400EC_impl*
//#UC START# *547DC97D01D5_547DC47400EC_var*
var
 Pt: Tl3SPoint;
 CPt: Tl3SPoint;
 st: Tl3Handle;
 SPS: TevSubPanelSub;
//#UC END# *547DC97D01D5_547DC47400EC_var*
//#UC START# *547DC9910354_547DC47400EC_impl*
 if not (csDesigning in ComponentState) and
  (Msg.HitTest = HTCLIENT) then 
 begin
  {get the mouse position in client coordinates}
  Pt.GetCursorPos;
  Pt.Convert(ScreenToClient);
  if (SubOnPoint(Pt, st) = nil) then
   inherited
  else
  begin
   l_SubDescriptor := SubDescriptors[st];
   if (l_SubDescriptor = nil) then
    l_Cursor := crDefault
   else
    l_Cursor := l_SubDescriptor.Cursor;
   if (l_Cursor = crDefault) then
    l_Cursor := SubDescriptors.Cursor;
   if (l_Cursor = crDefault) then
    inherited
   else
    SetCursor(Screen.Cursors[l_Cursor]);
  end;//SubOnPoint  
 end//not (csDesigning in ComponentState)
 else
  inherited;
//#UC END# *547DC9910354_547DC47400EC_impl*
//#UC START# *547DC9910354_547DC47400EC_var*
var
 Pt: Tl3SPoint;
 st: Tl3Handle;
 l_SubDescriptor: TevSubDescriptor;
 l_Cursor: TCursor;
//#UC END# *547DC9910354_547DC47400EC_var*
//#UC START# *547DC9DE0050_547DC47400EC_impl*
 if Assigned(f_OnClickSub) then
  OnClickSub(Self, SubType, SubHandle, aKind);
//#UC END# *547DC9DE0050_547DC47400EC_impl*
//#UC START# *547DC9DE0050_547DC47400EC_var*
//#UC END# *547DC9DE0050_547DC47400EC_var*
//#UC START# *547DCA13008B_547DC47400EC_impl*
 if Assigned(f_OnMenuSub) then
  OnMenuSub(Self, Pt, R, SubType, SubHandle);
//#UC END# *547DCA13008B_547DC47400EC_impl*
//#UC START# *547DCA13008B_547DC47400EC_var*
//#UC END# *547DCA13008B_547DC47400EC_var*
//#UC START# *547DCA6C01A9_547DC47400EC_impl*
 if Assigned(f_OnMouseOverSub) then
  Result := OnMouseOverSub(Self, Pt, R, aSub, aLayer)
 else 
 begin
  Hint := IntToStr(aSub.ID) + '|' + l3PCharLen2String(aSub.Name);
  if (Hint = '') then
   CancelHint
  else
   ActivateHint;
  Result := True;
 end;
//#UC END# *547DCA6C01A9_547DC47400EC_impl*
//#UC START# *547DCA6C01A9_547DC47400EC_var*
//#UC END# *547DCA6C01A9_547DC47400EC_var*
//#UC START# *547DCAF1011A_547DC47400EC_impl*
 with aCanvas do
 begin
  Font := aSubDescr.Font;
  l_R := aSub.R;
  Ofs := DP2LP(PointX(aSubDescr.Offset)).X;
  Inc(l_R.R.Left, Ofs);
  Inc(l_R.R.Right, Ofs);
  H := aSub.Handle;
  SDT := aSubDescr.DrawType;
  case SDT of
   ev_sdtNumber, ev_sdtChar, ev_sdtCharNumber:
   begin
    Str := '?';
    case SDT of
     ev_sdtNumber: Str := IntToStr(H);
     ev_sdtCharNumber :
     begin
      H := aSubDescr.NumberOffset;
      if (H >= Low(Byte)) and (H <= High(Byte)) then
       Str := Char(H);
     end;//ev_sdtCharNumber
     ev_sdtChar:
     begin
      Inc(H, aSubDescr.NumberOffset);
      if (H >= Low(Byte)) and (H <= High(Byte)) then
       Str := Char(H);
     end;//ev_sdtChar
    end;//case SDT
    l_R.R.BottomRight := l_R.TopLeft.Add(StringOut(l_R.TopLeft, l3PCharLen(Str)));
   end;//ev_sdtNumber, ev_sdtChar..
   ev_sdtBitmap:
   begin
    l_Images := aSubDescr.Images;
    if (l_Images = nil) then
     l_Images := SubDescriptors.Images;
    if (l_Images <> nil) then
    begin
     with aSubDescr do
     begin
      l_BmpIndex := BitmapIndex;
      if (f_BlockBitmapIndex >= 0) then
      begin
       if Supports(aSub.RealSub, IevDocumentPart, l_Block) then
        try
         l_BmpIndex := f_BlockBitmapIndex;
         if aSubDescr = f_SubDescriptors.SubsLayer then
          f_SubDescriptors.DefineBitmapIndex(l_Block, l_BmpIndex);
        finally
         l_Block := nil;
        end;//try..finally
      end;// f_BlockBitmapIndex >= 0
      if (f_DocumentBitmapIndex >= 0) then
      begin
       if Supports(aSub.RealSub, IevDocument) then
        try
         l_BmpIndex := f_DocumentBitmapIndex;
        finally
         l_Block := nil;
        end;//try..finally
      end;// f_DocumentBitmapIndex >= 0
      if Assigned(f_OnGetBitmapIndex) then
       f_OnGetBitmapIndex(Self, Handle, H, l_BmpIndex, l_Images);
     end;//with aSubDescr
     if (l_BmpIndex >= 0) and (l_Images <> nil) then
     begin
      with l_Images do
      begin
       if aRealPaint then
        with LP2DP(l_R.TopLeft) do
         Draw(Canvas, P.X, P.Y, l_BmpIndex);
       l_R.R.BottomRight := l_R.TopLeft.Add(DP2LP(l3SPoint(Width, Height)));
      end;//with l_Images
     end;//l_BmpIndex >= 0
    end;//l_Images <> nil
   end;//ev_sdtBitmap
   ev_sdtOwnerDraw:
    Self.DoDrawSub(Self, aCanvas, l_R, aSubDescr.Handle, aSub);
  end;//case SDT
  aSub.DrawRect := l_R;
  if not aRealPaint then
   evInvalidateRect(Handle, l_R);
 end;//with aCanvas..
//#UC END# *547DCAF1011A_547DC47400EC_impl*
//#UC START# *547DCAF1011A_547DC47400EC_var*
var
 SDT: TevSubDrawType;
 l_BmpIndex: TImageIndex;
 l_R: Tl3Rect;
 H: Tl3Handle;
 Str: String;
 Ofs: TevPixel;
 l_Block: IevDocumentPart;
 l_Images: TCustomImageList;
//#UC END# *547DCAF1011A_547DC47400EC_var*
//#UC START# *547DCB0901C7_547DC47400EC_impl*
 CR.InitRect(ClientRect);
 case Orientation of
  ev_orHorizontal:
  begin
   with nev.CrtIC do
   begin
    Lock;
    try
     with R do
     begin
      Top := DP2LP(PointY(CR.Top)).Y;
      Bottom := DP2LP(PointY(CR.Bottom)).Y;
      Left := evPixelZoom(Zoom, Left);
      Right := evPixelZoom(Zoom, Right);
      {$IfNDef Nemesis}
      Inflate(DP2LP(PointY(-Succ(BevelWidth))));
      {$EndIf  Nemesis}
     end;//with R
    finally
     Unlock;
    end;//try..finally
   end;//with nev.CrtIC
  end;//ev_orHorizontal
  ev_orVertical:
  begin
   with nev.CrtIC do
   begin
    Lock;
    try
     with R do
     begin
      Left := DP2LP(PointX(CR.Left)).X;
      Right := DP2LP(PointX(CR.Right)).X;
      Top := evPixelZoom(Zoom, Top);
      Bottom := evPixelZoom(Zoom, Bottom);
      {$IfNDef Nemesis}
      Inflate(DP2LP(PointX(-Succ(BevelWidth))));
      {$EndIf  Nemesis}
     end;//with R
    finally
     Unlock;
    end;//try..finally
   end;//with nev.CrtIC
  end;//ev_orVertical
 end;//case Orientation..
//#UC END# *547DCB0901C7_547DC47400EC_impl*
//#UC START# *547DCB0901C7_547DC47400EC_var*
var
 CR: Tl3SRect;
//#UC END# *547DCB0901C7_547DC47400EC_var*
//#UC START# *547DCB1D0037_547DC47400EC_impl*
 CR := Canvas.ClipRect;
 f_Subs.IterateAllF(l3L2IA(@DrawSubLayer));
//#UC END# *547DCB1D0037_547DC47400EC_impl*
//#UC START# *547DCB1D0037_547DC47400EC_var*
var
 CR: Tl3Rect;

 function DrawSubLayer(SA: PevSubPanelSubArray; Index: Integer): Boolean;
 var
  SD: TevSubDescriptor;

  function DrawSub(Sub: PevSubPanelSub; Index: Integer): Boolean; 
  begin
   if CR.IntersectsWith(Sub^.R) then
    Self.DrawSub(Canvas, SD, Sub^, True);
   Result := True;
  end;

 begin{DrawSubLayer}
  SD := SubDescriptors[SA^.Handle];
  if (SD <> nil) and SD.Visible then
   SA^.IterateAllF(l3L2IA(@DrawSub));
  Result := True;
 end;{DrawSubLayer}
//#UC END# *547DCB1D0037_547DC47400EC_var*
//#UC START# *547DCB3903BF_547DC47400EC_impl*
 Result := True;
 l_R := SPS.R;
 l_R.OffsetPt(P);
 with nev.CrtIC.LR2DR(l_R) do
 begin
  if ((R.Left < 0) and (R.Right < 0)) or
     ((R.Left > Width) and (R.Right > Width)) or
     ((R.Top < 0) and (R.Bottom < 0)) or
     ((R.Top > Height) and (R.Bottom > Height)) then
   Result := False
  else
   SPS.R := l_R;
 end;//with pR^
 l_R := SPS.DrawRect;
 l_R.OffsetPt(P);
 with nev.CrtIC.LR2DR(l_R) do
 begin
  if ((R.Left < 0) and (R.Right < 0)) or
     ((R.Left > Width) and (R.Right > Width)) or
     ((R.Top < 0) and (R.Bottom < 0)) or
     ((R.Top > Height) and (R.Bottom > Height)) then
   Result := False
  else
   SPS.DrawRect := l_R;
 end;//with pR^
//#UC END# *547DCB3903BF_547DC47400EC_impl*
//#UC START# *547DCB3903BF_547DC47400EC_var*
var
 l_R: Tl3Rect;
//#UC END# *547DCB3903BF_547DC47400EC_var*
//#UC START# *547DCC0002F9_547DC47400EC_impl*
 if aSub.Exists then
 begin
  SD := SubDescriptors[aSubType];
  if (SD <> nil) then
  begin
   l_aR := aR;
   MakeSubRect(l_aR);
   if f_Subs.FindData(aSubType, I) then
   begin
    SL := f_Subs.Items[I];
    if SL.FindData(aSub.ID, I) then
     SPS := SL.Items[I]
    else
     SPS := nil;
   end//f_Subs.Find(aSubType, I)
   else
    SPS := nil; 
   l3FillChar(OldDR, SizeOf(OldDR), 0);
   if (SPS <> nil) then
   begin
    OldR := SPS.R;
    OldDR := SPS.DrawRect;
    if not OldR.EQ(l_aR) then
     SPS := nil;
   end;
   if (SPS = nil) then
   begin
    SPS := TevSubPanelSub.Create(aSub);
    try
     SPS.R := l_aR;
     f_Subs.CheckLayer(aSubType).Add(SPS);
     evInvalidateRect(Handle, OldDR);
     SD := SubDescriptors[aSubType];
     if (SD <> nil) and SD.Visible then
      DrawSub(CN, SD, SPS, False);
    finally
     l3Free(SPS);
    end;//try..finally
   end;//SPS = nil
  end;//SD <> nil
 end;//aSub.Exists
//#UC END# *547DCC0002F9_547DC47400EC_impl*
//#UC START# *547DCC0002F9_547DC47400EC_var*
var
 SPS: TevSubPanelSub;
 OldR: Tl3Rect;
 OldDR: Tl3Rect;
 SD: TevSubDescriptor;
 SL: TevSubPanelSubArray;
 I: Integer;
 l_aR: Tl3Rect;
//#UC END# *547DCC0002F9_547DC47400EC_var*
//#UC START# *547DCC2401CC_547DC47400EC_impl*
 if f_Subs.FindData(aSubType, I) then
 begin
  SL := f_Subs.Items[I];
  if SL.FindData(aSubHandle, I) then
  begin
   if HandleAllocated then
    evInvalidateRect(Handle, SL.Items[I].R);
   SL.Delete(I);
   Result := True;
  end//SL.Find(aSubHandle, I)
  else
   Result := False;
 end//f_Subs.Find(aSubType, I)
 else
  Result := False;
//#UC END# *547DCC2401CC_547DC47400EC_impl*
//#UC START# *547DCC2401CC_547DC47400EC_var*
var
 SL: TevSubPanelSubArray;
 I: Integer;
//#UC END# *547DCC2401CC_547DC47400EC_var*
//#UC START# *547DCC9501A5_547DC47400EC_impl*
 Result := nil;
 f_Subs.IterateAllF(l3L2IA(@LayerOnPoint));
//#UC END# *547DCC9501A5_547DC47400EC_impl*
//#UC START# *547DCC9501A5_547DC47400EC_var*
var
 Res: TevSubPanelSub absolute Result;

 function LayerOnPoint(SL: PevSubPanelSubArray; Index: Integer): Boolean;
 var
  Cont: Boolean absolute Result;

  function _SubOnPoint(Sub: PevSubPanelSub; Index: Integer): Boolean;
  begin{_SubOnPoint}
   if nev.CrtIC.LR2DR(Sub^.DrawRect).ContainsPt(Pt) then
   begin
    st := SL^.Handle;
    Res := Sub^;
    Result := False;
   end
   else
    Result := True;
   Cont := Result;
  end;{_SubOnPoint}
 begin{LayerOnPoint}
  Cont := True;
  SL^.IterateAllF(l3L2IA(@_SubOnPoint));
 end;{LayerOnPoint}
//#UC END# *547DCC9501A5_547DC47400EC_var*
//#UC START# *547DCCB901E2_547DC47400EC_impl*
 Result := False;
 l_Sub := SubOnPoint(l3SPoint(aX, aY), l_LayerID);
 if (l_Sub <> nil) then
 begin
  Result := True;
  if (l_LayerID < 0) then
  begin
   l_LayerID := -l_LayerID;
   theFlag := Succ(l_LayerID mod 10);
   l_LayerID := l_LayerID div 10;
  end
  else
   theFlag := 0;
  theSub := l_Sub.RealSub;
 end;//l_Sub <> nil
//#UC END# *547DCCB901E2_547DC47400EC_impl*
//#UC START# *547DCCB901E2_547DC47400EC_var*
var
 l_Sub: TevSubPanelSub;
 l_LayerID: Tl3Handle;
//#UC END# *547DCCB901E2_547DC47400EC_var*
//#UC START# *547DCCFF02B3_547DC47400EC_impl*
 Result := CheckSubOnPoint(aX, aY, theSub, l_Flag);
//#UC END# *547DCCFF02B3_547DC47400EC_impl*
//#UC START# *547DCCFF02B3_547DC47400EC_var*
var
 l_Flag: Integer;
//#UC END# *547DCCFF02B3_547DC47400EC_var*
//#UC START# *547DCD45005F_547DC47400EC_impl*
 if DeleteSubPrim(aSubType, aSubHandle) then
  for I := 0 to 7 do
   DeleteSubPrim(-(aSubType*10+I), aSubHandle);
//#UC END# *547DCD45005F_547DC47400EC_impl*
//#UC START# *547DCD45005F_547DC47400EC_var*
var
 I: Integer;
//#UC END# *547DCD45005F_547DC47400EC_var*
//#UC START# *547DCD6D028D_547DC47400EC_impl*
 Result := f_Subs;
//#UC END# *547DCD6D028D_547DC47400EC_impl*
//#UC START# *547DCD6D028D_547DC47400EC_var*
//#UC END# *547DCD6D028D_547DC47400EC_var*
//#UC START# *54806C0F00C7_547DC47400ECget_impl*
 Result := f_SubDescriptors;
//#UC END# *54806C0F00C7_547DC47400ECget_impl*
//#UC START# *54806C0F00C7_547DC47400ECget_var*
//#UC END# *54806C0F00C7_547DC47400ECget_var*
//#UC START# *54806C0F00C7_547DC47400ECset_impl*
 if (f_SubDescriptors <> aValue) then
 begin
  if (f_SubDescriptors <> nil) then
   f_SubDescriptors.UnlinkControl(Self);
  l3Set(f_SubDescriptors, aValue);
  if (f_SubDescriptors <> nil) then
   f_SubDescriptors.LinkControl(Self);
 end;//f_SubDescriptors <> Value
//#UC END# *54806C0F00C7_547DC47400ECset_impl*
//#UC START# *54806C0F00C7_547DC47400ECset_var*
//#UC END# *54806C0F00C7_547DC47400ECset_var*
//#UC START# *54806C0F00C7Stored_547DC47400EC_impl*
 Result := (f_SubDescriptors <> nil) and (f_SubDescriptors.Owner <> nil);
//#UC END# *54806C0F00C7Stored_547DC47400EC_impl*
//#UC START# *54806C0F00C7Stored_547DC47400EC_var*
//#UC END# *54806C0F00C7Stored_547DC47400EC_var*
