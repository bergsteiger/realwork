//#UC START# *479731C50290_549BC58B0346_impl*
 DeallocateHWnd(f_Wnd);
 FreeAndNil(f_Data);
 inherited;
//#UC END# *479731C50290_549BC58B0346_impl*
//#UC START# *479731C50290_549BC58B0346_var*
//#UC END# *479731C50290_549BC58B0346_var*
//#UC START# *479731C50290_549BDA9C0160_impl*
 FreeAndNil(f_Task);
 FreeAndNil(f_Event);
 inherited;
//#UC END# *479731C50290_549BDA9C0160_impl*
//#UC START# *479731C50290_549BDA9C0160_var*
//#UC END# *479731C50290_549BDA9C0160_var*
//#UC START# *47A042E100E2_549BC58B0346_impl*
 inherited;
 Assert(MainThreadID = GetCurrentThreadID, 'Перед использованием нужно вызывать init в главном потоке!');
 f_Data := Tl3AsynkTaskList.Make;
 f_Wnd := AllocateHWnd(WndProc);
 f_MsgID := RegisterWindowMessage(PChar(l3CreateStringGUID));
//#UC END# *47A042E100E2_549BC58B0346_impl*
//#UC START# *47A042E100E2_549BC58B0346_var*
//#UC END# *47A042E100E2_549BC58B0346_var*
//#UC START# *549BC58B0346_ext:FileName
w:\common\components\rtl\Garant\L3\l3ExecuteInMainThread.pas
//#UC END# *549BC58B0346_ext:FileName
//#UC START# *549BC5F800ED_549BC58B0346_impl*
 if MainThreadID = GetCurrentThreadID then
  aTask.Exec
 else
 begin
  Lock;
  try
   f_Data.Add(aTask);
  finally
   Unlock;
  end;
  PostMessage(f_Wnd, f_MsgID, 0, 0);
 end;
//#UC END# *549BC5F800ED_549BC58B0346_impl*
//#UC START# *549BC5F800ED_549BC58B0346_var*
//#UC END# *549BC5F800ED_549BC58B0346_var*
//#UC START# *549BC61B009B_549BC58B0346_impl*
 if MainThreadID = GetCurrentThreadID then
  aTask.Exec
 else
 begin
  l_Task := Tl3SynTask.Create(aTask);
  try
   Lock;
   try
    f_Data.Add(l_Task);
   finally
    Unlock;
   end;
   PostMessage(f_Wnd, f_MsgID, 0, 0);
   l_Task.WaitForExec;
  finally
   FreeAndNil(l_Task);
  end;
 end;
//#UC END# *549BC61B009B_549BC58B0346_impl*
//#UC START# *549BC61B009B_549BC58B0346_var*
var
 l_Task: Tl3SynTask;
//#UC END# *549BC61B009B_549BC58B0346_var*
//#UC START# *549BC64F01DE_549BDA9C0160_impl*
 f_Task.Exec;
 f_Event.SetEvent;
//#UC END# *549BC64F01DE_549BDA9C0160_impl*
//#UC START# *549BC64F01DE_549BDA9C0160_var*
//#UC END# *549BC64F01DE_549BDA9C0160_var*
//#UC START# *549BD08302D8_549BC58B0346_impl*
 with Message do
  if msg = f_MsgID then
  begin
   l_NeedResend := False;
   l_Task := nil;
   try
    Lock;
    try
     if f_Data.Count > 0 then
     begin
      f_Data[0].SetRefTo(l_Task);
      f_Data.Delete(0);
      l_NeedResend := f_Data.Count > 0;
     end
     else
      l_Task := nil;
    finally
     Unlock;
    end;
    if Assigned(l_Task) then
    begin
     l_Task.Exec;
     if l_NeedResend then
      PostMessage(f_Wnd, f_MsgID, 0, 0);
    end;
   finally
    FreeAndNil(l_Task);
   end;
  end
  else
   DefWindowProc(f_Wnd, msg, wParam, lParam);
//#UC END# *549BD08302D8_549BC58B0346_impl*
//#UC START# *549BD08302D8_549BC58B0346_var*
var
 l_Task: Tl3AsyncTask;
 l_NeedResend: Boolean;
//#UC END# *549BD08302D8_549BC58B0346_var*
//#UC START# *549BDAC601E8_549BDA9C0160_impl*
 inherited Create;
 aTask.SetRefTo(f_Task);
 f_Event := TEvent.Create(nil, True, False, l3CreateStringGUID);
//#UC END# *549BDAC601E8_549BDA9C0160_impl*
//#UC START# *549BDAC601E8_549BDA9C0160_var*
//#UC END# *549BDAC601E8_549BDA9C0160_var*
//#UC START# *549BDB15036E_549BDA9C0160_impl*
 f_Event.WaitFor(INFINITE);
//#UC END# *549BDB15036E_549BDA9C0160_impl*
//#UC START# *549BDB15036E_549BDA9C0160_var*
//#UC END# *549BDB15036E_549BDA9C0160_var*
//#UC START# *549BE5C2006F_549BC58B0346_impl*
// Do nothing - simple to allocate HWND
//#UC END# *549BE5C2006F_549BC58B0346_impl*
//#UC START# *549BE5C2006F_549BC58B0346_var*
//#UC END# *549BE5C2006F_549BC58B0346_var*
