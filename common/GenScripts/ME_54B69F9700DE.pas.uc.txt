//#UC START# *54B69F9700DE_ext:FileName
w:\common\components\rtl\Garant\L3\l3BaseBoxMemoryManager.pas
//#UC END# *54B69F9700DE_ext:FileName
//#UC START# *54B69F9700DEimpl_uses*
//#UC END# *54B69F9700DEimpl_uses*
//#UC START# *54B69FF202FB_54B69F9700DE_impl*
 ClearFreed;
 inherited;
//#UC END# *54B69FF202FB_54B69F9700DE_impl*
//#UC START# *54B69FF202FB_54B69F9700DE_var*
//#UC END# *54B69FF202FB_54B69F9700DE_var*
//#UC START# *54B6A1AA02CE_54B69F9700DE_impl*
 inherited Create(aBlockSize);
//#UC END# *54B6A1AA02CE_54B69F9700DE_impl*
//#UC START# *54B6A1AA02CE_54B69F9700DE_var*
//#UC END# *54B6A1AA02CE_54B69F9700DE_var*
//#UC START# *54B6A1D30099_54B69F9700DE_impl*
 if (aPt = nil) then
  Result := 0
 else
  Result := GetPSz(PAnsiChar(aPt) - SizeSize);
//#UC END# *54B6A1D30099_54B69F9700DE_impl*
//#UC START# *54B6A1D30099_54B69F9700DE_var*
//#UC END# *54B6A1D30099_54B69F9700DE_var*
//#UC START# *54B6A20201D7_54B69F9700DE_impl*
 if (aSize = 0) then
  Pointer(P) := nil
 else
 begin
  l_Index := Size2Index(aSize);
  Assert(IsValidIndex(l_Index), 'Запрошен  неверный размер куска памяти Tl3BaseBoxMemoryManager.DoGetMem');
  if HasFreed AND IsValidIndex(l_Index) then
  begin
   Pointer(P) := GetFreed(l_Index);
   if (Pointer(P) <> nil) then
   begin
    // - удалось взять освобожденный кусок
    Inc(f_AllocCount);
    // - увеличиваем число взятых кусков
    SetFreed(l_Index, PPointer(P)^);
    // - указываем на другой освобожденный
    Exit;
    // - выходим, т.к уже все выделили
   end
   else
    l_Sz := AlignSize(aSize);
    // - надо выровнять размер куска
  end
  else
   l_Sz := aSize; 
  Inc(l_Sz, SizeSize);
  // - резервируем место под размер
  inherited DoGetMem(P, l_Sz);
  SetPSz(PAnsiChar(P), l_Sz - SizeSize);
  Inc(PAnsiChar(P), SizeSize);
  // - сдвигаем на размер размера куска 
 end;//l_Sz = 0
//#UC END# *54B6A20201D7_54B69F9700DE_impl*
//#UC START# *54B6A20201D7_54B69F9700DE_var*
var
 l_Index : Integer;
 l_Sz    : Cardinal;
//#UC END# *54B6A20201D7_54B69F9700DE_var*
//#UC START# *54B6A22902AB_54B69F9700DE_impl*
 if (Pointer(P) = nil) then
  Exit;
 l_Sz := GetSize(Pointer(P));
 if (l_Sz > 0) then
 begin
  // - если действительно что-то освобождаем
  l_Index := Size2Index(l_Sz);
  // - вычисляем индекс в массиве уже освобожденных
  if IsValidIndex(l_Index) then
  begin
   // - надо положить этот кусок в массив освобожденных
   InitFreed;
   PPointer(P)^ := GetFreed(l_Index);
   SetFreed(l_Index, Pointer(P));
  end
  else
  begin
   Inc(f_Lost);
   Assert(false, 'Коробка создана неправильно Tl3BaseBoxMemoryManager.DoFreeMem');
  end;//IsValidIndex(l_Index)
 end;//l_Sz > 0
 Dec(PAnsiChar(P), SizeSize);
 // - сдвигаем на размер размера куска
 inherited DoFreeMem(P);
//#UC END# *54B6A22902AB_54B69F9700DE_impl*
//#UC START# *54B6A22902AB_54B69F9700DE_var*
var
 l_Sz    : Integer;
 l_Index : Integer;
//#UC END# *54B6A22902AB_54B69F9700DE_var*
//#UC START# *54B6A25901A2_54B69F9700DE_impl*
 Self.Lock;
 try
  l_OldSz := GetSize(Pointer(P));
  l_NewSz := AlignSize(aNewSize);
  if (l_OldSz <> l_NewSz) then
  begin
   l_OldPt := Pointer(P);
   GetMem(l_NewPt, l_NewSz);
   Pointer(P) := l_NewPt;
   if (l_OldPt <> nil) then
    System.Move(l_OldPt^, l_NewPt^, Min(l_OldSz, l_NewSz));
    //l3Move(l_OldPt^, l_NewPt^, Min(l_OldSz, l_NewSz));
   FreeMem(l_OldPt);
  end;//l_OldSz <> l_NewSz
 finally
  Self.Unlock;
 end;//try..finally
//#UC END# *54B6A25901A2_54B69F9700DE_impl*
//#UC START# *54B6A25901A2_54B69F9700DE_var*
var
 l_OldSz : Integer;
 l_NewSz : Integer;
 l_OldPt : Pointer;
 l_NewPt : Pointer;
//#UC END# *54B6A25901A2_54B69F9700DE_var*
