//#UC START# *3410F441967F_551C4D2300E5_impl*
 try
  anAction(aComponent);
  if aComponent is TvgVisualObject then
  begin
   l_VO := TvgVisualObject(aComponent);
   l_C := l_VO.Scene.GetSceneControl;
   while Assigned(l_VO.Parent) and (l_VO.Parent is TvgVisualObject) do
   begin
    l_VO := TvgVisualObject(l_VO.Parent);
    anAction(l_VO);
   end;
  end else
  if aComponent is TControl then
   l_C := TControl(aComponent)
  else
   l_C := nil;

  if Assigned(l_C) then
   while Assigned(l_C.Parent) do
   begin
    l_C := l_C.Parent;
    anAction(l_C);
   end;
 finally
  l3FreeLocalStub(Hack);
 end;
//#UC END# *3410F441967F_551C4D2300E5_impl*
//#UC START# *3410F441967F_551C4D2300E5_var*
var
 Hack : Pointer absolute anAction;
 l_VO: TvgVisualObject;
 l_O: TvgObject;
 l_C: TControl;
//#UC END# *3410F441967F_551C4D2300E5_var*
//#UC START# *77F02E022F3C_551ABD0E013B_impl*
 aBindedControl := FindDragTarget(aPoint, True);
 if Assigned(aBindedControl) and (aBindedControl is TvgCustomScene) then
  with TvgCustomScene(aBindedControl) do
  begin
   l_CPos := ScreenToClient(aPoint);
   aComponent := ObjectByPoint(l_CPos.X, l_CPos.Y);
  end else
   aComponent := nil;
//#UC END# *77F02E022F3C_551ABD0E013B_impl*
//#UC START# *77F02E022F3C_551ABD0E013B_var*
var
 l_CPos: TPoint;
//#UC END# *77F02E022F3C_551ABD0E013B_var*
//#UC START# *BB0BB5CAA29B_5522D81901CB_impl*
 if aComponent is TvgVisualObject then
 begin
  VO := TvgVisualObject(aComponent);
  TL := VO.Scene.LocalToScreen(VO.LocalToAbsolute(vgPoint(0, 0)));
  BR := VO.Scene.LocalToScreen(VO.LocalToAbsolute(vgPoint(VO.Width, VO.Height)));
  Result := Rect(Trunc(TL.X), Trunc(TL.Y), Trunc(BR.X), Trunc(BR.Y));
 end else
  Result := c_EmptyRect;
//#UC END# *BB0BB5CAA29B_5522D81901CB_impl*
//#UC START# *BB0BB5CAA29B_5522D81901CB_var*
var
 VO: TvgVisualObject;
 TL, BR: TvgPoint;
const
 c_EmptyRect: TRect = (Left: 0; Top: 0; Right: 0; Bottom: 0);
//#UC END# *BB0BB5CAA29B_5522D81901CB_var*
//#UC START# *D4A861440DBF_551BCE070003_impl*
 if aShortInfo then
 begin
  if Assigned(anObject) and (anObject is TvgVisualObject) then
  begin
   l_VO := TvgVisualObject(anObject);
   lp_AddInfo(Result, 'name', l_VO.Name, True);
   if l_VO is TvgTextControl then
    lp_AddInfo(Result, 'text', TvgTextControl(l_VO).Text);
   lp_AddInfo(Result, 'class', l_VO.ClassName);
   if Assigned(l_VO.Owner) then
    lp_AddInfo(Result, 'Owner', lp_FormatLinkToObject(l_VO.Owner), True);
   if Assigned(l_VO.Parent) then
    lp_AddInfo(Result, 'Parent', lp_FormatLinkToObject(l_VO.Parent), True);
  end;
 end
 else
  Result := L3FormatRTTIInfo(anObject, True, anObjectPropFound, Tl3HugeMessageDlgWithWikiHelper.Instance.CanUseWiki);
//#UC END# *D4A861440DBF_551BCE070003_impl*
//#UC START# *D4A861440DBF_551BCE070003_var*
 procedure lp_AddInfo(var theInfo: AnsiString;
  const aCaption: AnsiString;
  const aValue: AnsiString;
  aNewLine: Boolean = False);
 begin
  if Length(aValue) > 0 then
  begin
   if Length(theInfo) > 0 then
    if aNewLine
     then theInfo := theInfo + #13#10
     else theInfo := theInfo + ', ';
   theInfo := theInfo + aCaption + ':' + aValue;
  end;
 end;

 function lp_FormatLinkToObject(anObject: TObject): AnsiString;
 begin
  Result := '$' + IntToHex(Integer(anObject), 8);
  if Assigned(anObjectPropFound) then
   anObjectPropFound(anObject, Result)
  else
   Result := Tl3HugeMessageDlgWithWikiHelper.Instance.FormatLink(Result, IntToStr(Integer(anObject)));
 end;
 
var
 l_VO: TvgVisualObject;
//#UC END# *D4A861440DBF_551BCE070003_var*
//#UC START# *FC96CEF34C46_55226D5F0212_impl*
 Result := GetCaptureControl;
 if Result is TvgCustomScene then
  Result := TvgCustomScene(Result).Captured;
 if not Assigned(Result) then
  if GetAsyncKeyState(VK_LBUTTON) < 0 then
  begin
   l_C := FindDragTarget(Mouse.CursorPos, True);
   if Assigned(l_C) and (l_C is TvgCustomScene) then
    with TvgCustomScene(l_C) do
     Result := ObjectByPoint(MousePos.X, MousePos.Y);
  end;
//#UC END# *FC96CEF34C46_55226D5F0212_impl*
//#UC START# *FC96CEF34C46_55226D5F0212_var*
var
 l_C: TControl;
//#UC END# *FC96CEF34C46_55226D5F0212_var*
