//#UC START# *479731C50290_5600FA2301B9_impl*
 FreeAndNil(f_Tables);
 f_WhereCondition := nil;
 FreeAndNil(f_SelectFields);
 FreeAndNil(f_Params);
 f_DataConverter := nil;
 inherited;
//#UC END# *479731C50290_5600FA2301B9_impl*
//#UC START# *479731C50290_5600FA2301B9_var*
//#UC END# *479731C50290_5600FA2301B9_var*
//#UC START# *49BFC98902FF_5600FA2301B9_impl*
 UnPrepareTables;
 inherited;
//#UC END# *49BFC98902FF_5600FA2301B9_impl*
//#UC START# *49BFC98902FF_5600FA2301B9_var*
//#UC END# *49BFC98902FF_5600FA2301B9_var*
//#UC START# *5549C42400DA_5600FA2301B9_impl*
 Result := MakeResultSet(Unidirectional);
//#UC END# *5549C42400DA_5600FA2301B9_impl*
//#UC START# *5549C42400DA_5600FA2301B9_var*
//#UC END# *5549C42400DA_5600FA2301B9_var*
//#UC START# *5551BB340256_5600FA2301B9_impl*
 if not f_Prepared then
 begin
  Assert(f_Tables.Count = 1);
  Assert(f_SelectFields.Count > 0);
  for l_IDX := 0 to f_SelectFields.Count - 1 do
   if Supports(f_SelectFields[l_IDX], IdaFieldFromTable, l_Field) then
    Assert(l_Field.Field.Table = f_Tables[0].Table);
  if Supports(f_WhereCondition, IdaFieldFromTable, l_Field) then
   Assert(l_Field.Field.Table = f_Tables[0].Table);
  if Supports(f_WhereCondition, IdaParamDescription, l_ParamDescription) then
   AddParam(l_ParamDescription);
  PrepareTables;
  f_Prepared := True;
 end;
//#UC END# *5551BB340256_5600FA2301B9_impl*
//#UC START# *5551BB340256_5600FA2301B9_var*
var
 l_Field: IdaFieldFromTable;
 l_ParamDescription: IdaParamDescription;
 l_IDX: Integer;
//#UC END# *5551BB340256_5600FA2301B9_var*
//#UC START# *5551BEA500AE_5600FA2301B9get_impl*
 if f_Params.FindData(aName, l_IDX) then
  Result := f_Params[l_IDX]
 else
  Result := nil;
//#UC END# *5551BEA500AE_5600FA2301B9get_impl*
//#UC START# *5551BEA500AE_5600FA2301B9get_var*
var
 l_IDX: Integer;
//#UC END# *5551BEA500AE_5600FA2301B9get_var*
//#UC START# *5551DC42038C_5600FA2301B9_impl*
 f_SelectFields.Add(aField);
 UnPrepare;
//#UC END# *5551DC42038C_5600FA2301B9_impl*
//#UC START# *5551DC42038C_5600FA2301B9_var*
//#UC END# *5551DC42038C_5600FA2301B9_var*
//#UC START# *5553039D016A_5600FA2301B9_impl*
 f_Tables.Add(aTable);
 UnPrepare;
//#UC END# *5553039D016A_5600FA2301B9_impl*
//#UC START# *5553039D016A_5600FA2301B9_var*
//#UC END# *5553039D016A_5600FA2301B9_var*
//#UC START# *555334DD023B_5600FA2301B9_impl*
 if f_Prepared then
 begin
  UnPrepareTables;
  f_Params.Clear;
// !!! Needs to be implemented !!!
  f_Prepared := False;
 end;
//#UC END# *555334DD023B_5600FA2301B9_impl*
//#UC START# *555334DD023B_5600FA2301B9_var*
//#UC END# *555334DD023B_5600FA2301B9_var*
//#UC START# *55FFDEC4037F_5600FA2301B9_impl*
 l_Param := Get_Param(aParamDesc.Name);
 if Assigned(l_Param) then
 begin
  if not l_Param.IsSameType(aParamDesc) then
   raise EdaError.CreateFmt('Ќе совпадают типы данных дл€ параметра %s', [aParamDesc.Name]);
 end
 else
  f_Params.Add(TdaParam.Make(f_DataConverter, aParamDesc));
//#UC END# *55FFDEC4037F_5600FA2301B9_impl*
//#UC START# *55FFDEC4037F_5600FA2301B9_var*
var
 l_Param: IdaParam;
//#UC END# *55FFDEC4037F_5600FA2301B9_var*
//#UC START# *5600FAC103DE_5600FA2301B9set_impl*
 f_WhereCondition := aValue;
 UnPrepare;
//#UC END# *5600FAC103DE_5600FA2301B9set_impl*
//#UC START# *5600FAC103DE_5600FA2301B9set_var*
//#UC END# *5600FAC103DE_5600FA2301B9set_var*
//#UC START# *5600FB3903DE_5600FA2301B9_impl*
 inherited Create;
 f_Tables := TdaFromTableList.Make;
 AddFromTable(MakeFromTable(aTable, anAlias));
 f_SelectFields := TdaSelectFieldList.Make;
 f_Params := MakeParamList;
 f_DataConverter := aDataConverter;
//#UC END# *5600FB3903DE_5600FA2301B9_impl*
//#UC START# *5600FB3903DE_5600FA2301B9_var*
//#UC END# *5600FB3903DE_5600FA2301B9_var*
//#UC START# *56010A7801F2_5600FA2301B9_impl*
 Result := nil;
//#UC END# *56010A7801F2_5600FA2301B9_impl*
//#UC START# *56010A7801F2_5600FA2301B9_var*
//#UC END# *56010A7801F2_5600FA2301B9_var*
//#UC START# *56010AB70258_5600FA2301B9_impl*
 Assert(f_SelectFields.Count > 0);
 for l_IDX := 0 to f_SelectFields.Count - 1 do
  if Supports(f_SelectFields[l_IDX], IdaFieldFromTable, l_Field) then
   Assert(l_Field.Field.Table = f_Table.Table);
 if Assigned(f_WhereCondition) then
  f_WhereCondition.IterateF(L2DaConditionIteratorIterateAction(@lp_ProcessCondition));
 for l_IDX := 0 to f_OrderBy.Count - 1 do
  Assert(f_SelectFields.IndexOf(f_OrderBy[l_IDX].SelectField) <> -1);
 PrepareTable;
//#UC END# *56010AB70258_5600FA2301B9_impl*
//#UC START# *56010AB70258_5600FA2301B9_var*
var
 l_Field: IdaFieldFromTable;
 l_ParamDescription: IdaParamDescription;
 l_IDX: Integer;
 l_Dummy: Integer;

 function lp_ProcessCondition(const anItem: IdaCondition): Boolean;
 var
  l_Field: IdaFieldFromTable;
  l_ParamDescription: IdaParamDescription;
 begin
  Result := True;
  if Supports(anItem, IdaFieldFromTable, l_Field) then
   Assert(l_Field.Field.Table = f_Table.Table);
  if Supports(anItem, IdaParamDescription, l_ParamDescription) then
   AddParam(l_ParamDescription);
 end;
//#UC END# *56010AB70258_5600FA2301B9_var*
//#UC START# *56010ACB00F0_5600FA2301B9_impl*
 UnprepareTable;
//#UC END# *56010ACB00F0_5600FA2301B9_impl*
//#UC START# *56010ACB00F0_5600FA2301B9_var*
//#UC END# *56010ACB00F0_5600FA2301B9_var*
//#UC START# *56050F3E0081_5600FA2301B9_impl*
 Assert(SelectFields.Count > 0);
 Result := 'select ';
 for l_IDX := 0 to SelectFields.Count - 1 do
 begin
  if l_IDX > 0 then
   Result := Result + ', '#13#10+'       ';
  Result := Result + SelectFields[l_IDX].BuildSQLValue;
 end;
//#UC END# *56050F3E0081_5600FA2301B9_impl*
//#UC START# *56050F3E0081_5600FA2301B9_var*
var
 l_IDX: Integer;
 l_Count: Integer;
//#UC END# *56050F3E0081_5600FA2301B9_var*
//#UC START# *56050F450363_5600FA2301B9_impl*
 Result := '  from '#13#10'       ' + Table.BuildSQLValue;
//#UC END# *56050F450363_5600FA2301B9_impl*
//#UC START# *56050F450363_5600FA2301B9_var*
//#UC END# *56050F450363_5600FA2301B9_var*
//#UC START# *56050F510228_5600FA2301B9_impl*
 if WhereCondition <> nil then
  Result := #13#10'   where ' + WhereCondition.BuildSQLValue(aHelper)
 else
  Result := '';
//#UC END# *56050F510228_5600FA2301B9_impl*
//#UC START# *56050F510228_5600FA2301B9_var*
//#UC END# *56050F510228_5600FA2301B9_var*
//#UC START# *560B861302E9_5600FA2301B9_impl*
 Result := TdaParamList.Make;
//#UC END# *560B861302E9_5600FA2301B9_impl*
//#UC START# *560B861302E9_5600FA2301B9_var*
//#UC END# *560B861302E9_5600FA2301B9_var*
//#UC START# *563B18FB0212_5600FA2301B9get_impl*
 Result := f_WhereCondition;
//#UC END# *563B18FB0212_5600FA2301B9get_impl*
//#UC START# *563B18FB0212_5600FA2301B9get_var*
//#UC END# *563B18FB0212_5600FA2301B9get_var*
//#UC START# *563B18FB0212_5600FA2301B9set_impl*
 WhereCondition := aValue;
//#UC END# *563B18FB0212_5600FA2301B9set_impl*
//#UC START# *563B18FB0212_5600FA2301B9set_var*
//#UC END# *563B18FB0212_5600FA2301B9set_var*
//#UC START# *5666B5E20108_5600FA2301B9get_impl*
 Result := f_Table;
//#UC END# *5666B5E20108_5600FA2301B9get_impl*
//#UC START# *5666B5E20108_5600FA2301B9get_var*
//#UC END# *5666B5E20108_5600FA2301B9get_var*
//#UC START# *566A850001E5_5600FA2301B9_impl*
 Result := Format('%s'#13#10+'  %s%s%s', [BuildSelectClause, BuildFromClause, BuildWhereClause(aHelper), BuildOrderByClause]);
//#UC END# *566A850001E5_5600FA2301B9_impl*
//#UC START# *566A850001E5_5600FA2301B9_var*
//#UC END# *566A850001E5_5600FA2301B9_var*
//#UC START# *567D12D00384_5600FA2301B9_impl*
 f_OrderBy.Add(aSortField);
//#UC END# *567D12D00384_5600FA2301B9_impl*
//#UC START# *567D12D00384_5600FA2301B9_var*
//#UC END# *567D12D00384_5600FA2301B9_var*
//#UC START# *5680E19E003D_5600FA2301B9_impl*
 if OrderBy.Count > 0 then
 begin
  Result := #13#10' order by ';
  for l_IDX := 0 to OrderBy.Count - 1 do
   if l_IDX <> 0 then
    Result := Result + ', ';
   Result := Format('%s %d %s', [Result, IntToStr(SelectFields.IndexOf(OrderBy[l_IDX].SelectField) + 1), cMap[OrderBy[l_IDX].SortOrder]]);
 end
 else
  Result := '';
//#UC END# *5680E19E003D_5600FA2301B9_impl*
//#UC START# *5680E19E003D_5600FA2301B9_var*
var
 l_IDX: Integer;
const
 cMap: array [TdaSortOrder] of AnsiString = ('ASC', 'DESC');
//#UC END# *5680E19E003D_5600FA2301B9_var*
