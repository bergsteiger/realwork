//#UC START# *479731C50290_5629FC88034B_impl*
 FreeAndNil(f_ArchiUsers);
 FreeAndNil(f_UserStatusChangedSubscriberList);
 FreeAndNil(f_AllUsers);
 FreeAndNil(f_AllGroups);
 f_PasswordQuery := nil;
 f_UserFlagsQuery := nil;
 f_Factory := nil;
 inherited;
//#UC END# *479731C50290_5629FC88034B_impl*
//#UC START# *479731C50290_5629FC88034B_var*
//#UC END# *479731C50290_5629FC88034B_var*
//#UC START# *5628D14D0151_5629FC88034B_impl*
 theUserID := 0;
 Result := da_leUserParamsWrong;
 if (AnsiLowerCase(aLogin) = c_SupervisorUserName) and not RequireAdminRights then
  Exit;
 f_PasswordQuery.Param['p_ShortName'].AsString := aLogin;
 l_ResultSet := f_PasswordQuery.OpenResultSet;
 try
  if l_ResultSet.IsEmpty then
    Exit;
  if (l_ResultSet.Field['Password'].AsString <> '') and (not AnsiSameText(l_ResultSet.Field['Password'].AsString, aPassword)) then
    Exit;
  theUserID := l_ResultSet.Field['User_ID'].AsLargeInt;
  f_UserFlagsQuery.Param['p_UserID'].AsLargeInt := theUserID;
 finally
  l_ResultSet := nil;
 end;

 if theUserID <> usSupervisor then
 begin
  l_ResultSet := f_UserFlagsQuery.OpenResultSet;
  try
   l_Flags := l_ResultSet.Field['Active'].AsByte;
   if (l_Flags and usActive) <> usActive then
    Exit;
   if RequireAdminRights and ((l_Flags and usAdmin) <> usAdmin) then
   begin
    Result := da_leInsufficientRights;
    Exit;
   end;
   Result := da_leOk;

  finally
   l_ResultSet := nil;
  end;
 end
 else
  Result := da_leOk;
//#UC END# *5628D14D0151_5629FC88034B_impl*
//#UC START# *5628D14D0151_5629FC88034B_var*
var
 l_ResultSet: IdaResultSet;
 l_Flags: Byte;
//#UC END# *5628D14D0151_5629FC88034B_var*
//#UC START# *562A074E0321_5629FC88034B_impl*
 inherited Create;
 f_Factory := aFactory;

 f_ArchiUsers := TdaArchiUserList.Create;
 f_UserStatusChangedSubscriberList := TdaUserStatusChangedSubscriberList.Make;

 f_PasswordQuery := f_Factory.MakeTabledQuery(TdaScheme.Instance.Table(da_mtPassword));
 f_PasswordQuery.AddSelectField(f_Factory.MakeSelectField('', TdaScheme.Instance.Table(da_mtPassword)['Password']));
 f_PasswordQuery.AddSelectField(f_Factory.MakeSelectField('', TdaScheme.Instance.Table(da_mtPassword)['User_ID']));
 f_PasswordQuery.WhereCondition := f_Factory.MakeParamsCondition('', TdaScheme.Instance.Table(da_mtPassword)['ShortName'], da_copEqual, 'p_ShortName');
 f_PasswordQuery.Prepare;

 f_UserFlagsQuery := f_Factory.MakeTabledQuery(TdaScheme.Instance.Table(da_mtUsers));
 f_UserFlagsQuery.AddSelectField(f_Factory.MakeSelectField('', TdaScheme.Instance.Table(da_mtUsers)['Active']));
 f_UserFlagsQuery.WhereCondition := f_Factory.MakeParamsCondition('', TdaScheme.Instance.Table(da_mtUsers)['ID'], da_copEqual, 'p_UserID');
 f_UserFlagsQuery.Prepare;
//#UC END# *562A074E0321_5629FC88034B_impl*
//#UC START# *562A074E0321_5629FC88034B_var*
//#UC END# *562A074E0321_5629FC88034B_var*
//#UC START# *56EA993D0218_5629FC88034B_impl*
 Result := (anUserID = usSupervisor);
 if not Result then
 begin
  f_UserFlagsQuery.Param['p_UserID'].AsLargeInt := anUserID;
  l_ResultSet := f_UserFlagsQuery.OpenResultSet;
  try
   Result := not l_ResultSet.IsEmpty and ((l_ResultSet.Field['Active'].AsByte and usAdmin) = usAdmin);
  finally
   l_ResultSet := nil;
  end;
 end;
//#UC END# *56EA993D0218_5629FC88034B_impl*
//#UC START# *56EA993D0218_5629FC88034B_var*
var
 l_ResultSet: IdaResultSet;
//#UC END# *56EA993D0218_5629FC88034B_var*
//#UC START# *5715DEF20209_5629FC88034Bget_impl*
 if f_AllUsers = nil then
 begin
  f_AllUsers := Tl3StringDataList.Create;
  FillAllUsers(f_AllUsers);
  SortUsersInList(f_AllUsers);
 end;
 Result:=f_AllUsers;
//#UC END# *5715DEF20209_5629FC88034Bget_impl*
//#UC START# *5715DEF20209_5629FC88034Bget_var*
//#UC END# *5715DEF20209_5629FC88034Bget_var*
//#UC START# *5715DF0D03C2_5629FC88034Bget_impl*
 if f_AllGroups = nil then
 begin
  f_AllGroups := Tl3StringDataList.Create;
  FillAllGroups(f_AllGroups);
 end;
 Result := f_AllGroups;
//#UC END# *5715DF0D03C2_5629FC88034Bget_impl*
//#UC START# *5715DF0D03C2_5629FC88034Bget_var*
//#UC END# *5715DF0D03C2_5629FC88034Bget_var*
//#UC START# *5715E71600DD_5629FC88034B_impl*
 l_Query := f_Factory.MakeTabledQuery(TdaScheme.Instance.Table(da_mtUsers));
 try
  l_Query.AddSelectField(f_Factory.MakeSelectField('', TdaScheme.Instance.Table(da_mtUsers)['id']));
  l_Query.AddSelectField(f_Factory.MakeSelectField('', TdaScheme.Instance.Table(da_mtUsers)['user_name']));
  l_Query.Prepare;
  l_ResultSet := l_Query.OpenResultSet;
  try
   FillListByResultSet(aList, l_ResultSet, 'id', 4, 'user_name');
  finally
   l_ResultSet := nil;
  end;
 finally
  l_Query := nil;
 end;
//#UC END# *5715E71600DD_5629FC88034B_impl*
//#UC START# *5715E71600DD_5629FC88034B_var*
var
 l_Query: IdaTabledQuery;
 l_ResultSet: IdaResultSet;
//#UC END# *5715E71600DD_5629FC88034B_var*
//#UC START# *5715E74402CA_5629FC88034B_impl*
 l_Query := f_Factory.MakeTabledQuery(TdaScheme.Instance.Table(da_mtGroups));
 try
  l_Query.AddSelectField(f_Factory.MakeSelectField('', TdaScheme.Instance.Table(da_mtGroups)['id']));
  l_Query.AddSelectField(f_Factory.MakeSelectField('', TdaScheme.Instance.Table(da_mtGroups)['group_name']));
  l_Query.Prepare;
  l_ResultSet := l_Query.OpenResultSet;
  try
   FillListByResultSet(aList, l_ResultSet, 'id', 2, 'group_name');
  finally
   l_ResultSet := nil;
  end;
 finally
  l_Query := nil;
 end;
//#UC END# *5715E74402CA_5629FC88034B_impl*
//#UC START# *5715E74402CA_5629FC88034B_var*
var
 l_Query: IdaTabledQuery;
 l_ResultSet: IdaResultSet;
//#UC END# *5715E74402CA_5629FC88034B_var*
//#UC START# *5715E767013D_5629FC88034B_impl*
 theUserID := 0;
 Result := da_leUserParamsWrong;
 if (AnsiLowerCase(aLogin) = c_SupervisorUserName) and not RequireAdminRights then
  Exit;
 f_PasswordQuery.Param['p_ShortName'].AsString := aLogin;
 l_ResultSet := f_PasswordQuery.OpenResultSet;
 try
  if l_ResultSet.IsEmpty then
    Exit;
  if (l_ResultSet.Field['Password'].AsString <> '') and (not AnsiSameText(l_ResultSet.Field['Password'].AsString, aPassword)) then
    Exit;
  theUserID := l_ResultSet.Field['User_ID'].AsLargeInt;
  f_UserFlagsQuery.Param['p_UserID'].AsLargeInt := theUserID;
 finally
  l_ResultSet := nil;
 end;

 if theUserID <> usSupervisor then
 begin
  l_ResultSet := f_UserFlagsQuery.OpenResultSet;
  try
   l_Flags := l_ResultSet.Field['Active'].AsByte;
   if (l_Flags and usActive) <> usActive then
    Exit;
   if RequireAdminRights and ((l_Flags and usAdmin) <> usAdmin) then
   begin
    Result := da_leInsufficientRights;
    Exit;
   end;
   Result := da_leOk;

  finally
   l_ResultSet := nil;
  end;
 end
 else
  Result := da_leOk;
//#UC END# *5715E767013D_5629FC88034B_impl*
//#UC START# *5715E767013D_5629FC88034B_var*
var
 l_ResultSet: IdaResultSet;
 l_Flags: Byte;
//#UC END# *5715E767013D_5629FC88034B_var*
//#UC START# *5715E78F013E_5629FC88034B_impl*
 Result := (anUserID = usSupervisor);
 if not Result then
 begin
  f_UserFlagsQuery.Param['p_UserID'].AsLargeInt := anUserID;
  l_ResultSet := f_UserFlagsQuery.OpenResultSet;
  try
   Result := not l_ResultSet.IsEmpty and ((l_ResultSet.Field['Active'].AsByte and usAdmin) = usAdmin);
  finally
   l_ResultSet := nil;
  end;
 end;
//#UC END# *5715E78F013E_5629FC88034B_impl*
//#UC START# *5715E78F013E_5629FC88034B_var*
var
 l_ResultSet: IdaResultSet;
//#UC END# *5715E78F013E_5629FC88034B_var*
//#UC START# *5715ED0002E0_5629FC88034B_impl*
 aList.SortF(l3LocalStub(@l_CompareUsers));
//#UC END# *5715ED0002E0_5629FC88034B_impl*
//#UC START# *5715ED0002E0_5629FC88034B_var*

 function l_CompareUsers(I, J: Integer): Integer;
 var
  l_Reg1, l_Reg2: TdaRegionID;
  l_Name1, l_Name2: AnsiString;
 begin
  // сначала сравниваем регионы
  l_Reg1 := GetUserRegion(TdaUserID(aList.DataInt[I]));
  l_Reg2 := GetUserRegion(TdaUserID(aList.DataInt[J]));
  if l_Reg1 <> l_Reg2 then
  begin
   // если регион наш, родной, то он должен быть наверху, однозначно!
   if l_Reg1 = GlobalDataProvider.RegionID then
   begin
    Result := -1;
    Exit;
   end
   else
    if l_Reg2 = GlobalDataProvider.RegionID then
    begin
     Result := 1;
     Exit;
    end
  end;
  // По региону не вышел наверх. Сортируем по имени (к которому название региона уже приклеено)
  l_Name1 := aList.PasStr[I];
  l_Name2 := aList.PasStr[J];
  if l_Name1 < l_Name2 then
   Result := -1
  else
   if l_Name1 > l_Name2 then
    Result := 1
   else
    Result := 0;
 end;

//#UC END# *5715ED0002E0_5629FC88034B_var*
//#UC START# *57172C740069_5629FC88034B_impl*
 aList.Changing;
 try
  aList.Clear;
  aList.DataSize := aDataSize;
  aList.NeedAllocStr := True;
  while not aResultSet.EOF do
  begin
   l_ID := aResultSet.Field[anIDFieldName].AsLargeInt;
   Tl3StringDataList(aList).AddStr(aResultSet.Field[aNameFieldName].AsString, @l_ID);
   aResultSet.Next;
  end;
 finally
  aList.Changed;
 end;
//#UC END# *57172C740069_5629FC88034B_impl*
//#UC START# *57172C740069_5629FC88034B_var*
var
 l_ID: TdaUserID;
//#UC END# *57172C740069_5629FC88034B_var*
//#UC START# *5718B5CF0399_5629FC88034B_impl*
 UserNameQuery.Param['p_UserID'].AsLargeInt := anUserID;
 l_ResultSet := UserNameQuery.OpenResultSet;
 try
  Result := l_ResultSet.Field['user_name'].AsString;
 finally
  l_ResultSet := nil;
 end;
//#UC END# *5718B5CF0399_5629FC88034B_impl*
//#UC START# *5718B5CF0399_5629FC88034B_var*
var
 l_ResultSet: IdaResultSet;
//#UC END# *5718B5CF0399_5629FC88034B_var*
//#UC START# *5718C16B036E_5629FC88034B_impl*
 if f_UserNameQuery = nil then
 begin
  f_UserNameQuery := f_Factory.MakeTabledQuery(TdaScheme.Instance.Table(da_mtUsers));
  f_UserNameQuery.AddSelectField(f_Factory.MakeSelectField('', TdaScheme.Instance.Table(da_mtUsers)['user_name']));
  f_UserNameQuery.WhereCondition := f_Factory.MakeParamsCondition('', TdaScheme.Instance.Table(da_mtUsers)['ID'], da_copEqual, 'p_UserID');
  f_UserNameQuery.Prepare;
 end;
 Result := f_UserNameQuery;
//#UC END# *5718C16B036E_5629FC88034B_impl*
//#UC START# *5718C16B036E_5629FC88034B_var*
//#UC END# *5718C16B036E_5629FC88034B_var*
//#UC START# *571DCFB50217_5629FC88034B_impl*
 l_Query := f_Factory.MakeTabledQuery(TdaScheme.Instance.Table(da_mtGroups));
 try
  l_Query.AddSelectField(f_Factory.MakeSelectField('', TdaScheme.Instance.Table(da_mtGroups)['import_priority']));
  l_Query.AddSelectField(f_Factory.MakeSelectField('', TdaScheme.Instance.Table(da_mtGroups)['export_priority']));
  l_Query.WhereCondition := f_Factory.MakeParamsCondition('', TdaScheme.Instance.Table(da_mtGroups)['ID'], da_copEqual, 'p_GroupID');
  l_Query.Prepare;
  l_Query.Param['p_GroupID'].AsLargeInt := aGroupId;
  l_ResultSet := l_Query.OpenResultSet;
  try
   Result := not l_ResultSet.IsEmpty;
   if Result then
   begin
    aImportPriority := TdaPriority(l_ResultSet.Field['import_priority'].AsInteger);
    aExportPriority := TdaPriority(l_ResultSet.Field['export_priority'].AsInteger);
   end;
  finally
   l_ResultSet := nil;
  end;
 finally
  l_Query := nil;
 end;
//#UC END# *571DCFB50217_5629FC88034B_impl*
//#UC START# *571DCFB50217_5629FC88034B_var*
var
 l_Query: IdaTabledQuery;
 l_ResultSet: IdaResultSet;
//#UC END# *571DCFB50217_5629FC88034B_var*
//#UC START# *5721F5E60367_5629FC88034B_impl*
 if f_AllUsers <> nil then
  SortUsersInList(f_AllUsers);
//#UC END# *5721F5E60367_5629FC88034B_impl*
//#UC START# *5721F5E60367_5629FC88034B_var*
//#UC END# *5721F5E60367_5629FC88034B_var*
//#UC START# *5729C59E00D5_5629FC88034Bget_impl*
 if f_ArchiUsers.Count = 0 then
  MakeFullArchiUsersList;
 Result := f_ArchiUsers.Count;
//#UC END# *5729C59E00D5_5629FC88034Bget_impl*
//#UC START# *5729C59E00D5_5629FC88034Bget_var*
//#UC END# *5729C59E00D5_5629FC88034Bget_var*
//#UC START# *5729DD530330_5629FC88034B_impl*
 f_ArchiUsers.IterateAllF(l3L2IA(@DoIt));
//#UC END# *5729DD530330_5629FC88034B_impl*
//#UC START# *5729DD530330_5629FC88034B_var*

 type
  PIdaArchiUser = ^IdaArchiUser;

 function DoIt(aData : PIdaArchiUser; anIndex : Integer) : Boolean;
 begin
  Result := anAction(aData^);
 end;

//#UC END# *5729DD530330_5629FC88034B_var*
//#UC START# *57347AFF018E_5629FC88034B_impl*
 Assert(False);
//!! !!! Needs to be implemented !!!
//#UC END# *57347AFF018E_5629FC88034B_impl*
//#UC START# *57347AFF018E_5629FC88034B_var*
//#UC END# *57347AFF018E_5629FC88034B_var*
//#UC START# *57358B940211_5629FC88034B_impl*
 Result := nil;
 if f_ArchiUsers.Count = 0 then
  MakeFullArchiUsersList;

 for i := 0 to f_ArchiUsers.Hi do
 begin
  l_AU := f_ArchiUsers.Items[i];
  if l_AU.ID = aID then
  begin
   Result := l_AU;
   break;
  end;
 end
//#UC END# *57358B940211_5629FC88034B_impl*
//#UC START# *57358B940211_5629FC88034B_var*
var
 i: Integer;
 l_AU: IdaArchiUser;
//#UC END# *57358B940211_5629FC88034B_var*
//#UC START# *57358BCB0360_5629FC88034B_impl*
 Result := nil;
 if f_ArchiUsers.Count = 0 then
  MakeFullArchiUsersList;

 for i := 0 to f_ArchiUsers.Hi do
 begin
  l_AU := f_ArchiUsers.Items[i];
  if CompareText(l_AU.LoginName, aLogin) = 0 then
  begin
   Result := l_AU;
   break;
  end;
 end
//#UC END# *57358BCB0360_5629FC88034B_impl*
//#UC START# *57358BCB0360_5629FC88034B_var*
var
 i: Integer;
 l_AU: IdaArchiUser;
//#UC END# *57358BCB0360_5629FC88034B_var*
//#UC START# *5735AE4D0017_5629FC88034B_impl*
 MakeFullArchiUsersList;
(*
 if not aIsGroup then
 begin
  GetUserInfo(aUserID, l_Username, l_LoginName, l_AFlag);

  l_AU:= xxxUserByID(aUserID);
  if l_AU = nil then
  begin
   l_AU:= IdaArchiUser.Make(CalcUserPriorities);
   try
    l_AU.ID:= aUserID;
    l_AU.UserName:= l_UserName;
    l_AU.LoginName:= l_LoginName;
    l_AU.Active := Boolean(l_AFlag);

   finally
    l3Free(l_AU);
   end;
  end;
 end;
*)
//#UC END# *5735AE4D0017_5629FC88034B_impl*
//#UC START# *5735AE4D0017_5629FC88034B_var*
//#UC END# *5735AE4D0017_5629FC88034B_var*
//#UC START# *5735AE7F0071_5629FC88034B_impl*
 Assert(False);
//!! !!! Needs to be implemented !!!
//#UC END# *5735AE7F0071_5629FC88034B_impl*
//#UC START# *5735AE7F0071_5629FC88034B_var*
//#UC END# *5735AE7F0071_5629FC88034B_var*
//#UC START# *5735AECA0121_5629FC88034B_impl*
 lUser := UserByID(anID);
 if lUser <> nil then
  l_Name := lUser.UserName;
 if l_Name = '' then
  l_Name := 'Пользователь #'+ IntToStr(anID);

 Result := ConcatRegionAndUserNames(GetRegionStringFromUserID(anID), l_Name);
//#UC END# *5735AECA0121_5629FC88034B_impl*
//#UC START# *5735AECA0121_5629FC88034B_var*
var
 l_Name  : AnsiString;
 l_Flags : Byte;
 lUser : IdaArchiUser;
//#UC END# *5735AECA0121_5629FC88034B_var*
//#UC START# *5739732402E4_5629FC88034B_impl*
 UserNameQuery.Param['p_UserID'].AsLargeInt := anID;
 l_ResultSet := UserNameQuery.OpenResultSet;
 try
  Result := not l_ResultSet.IsEmpty;
 finally
  l_ResultSet := nil;
 end;
//#UC END# *5739732402E4_5629FC88034B_impl*
//#UC START# *5739732402E4_5629FC88034B_var*
var
 l_ResultSet: IdaResultSet;
//#UC END# *5739732402E4_5629FC88034B_var*
//#UC START# *5739832A00A2_5629FC88034B_impl*
 if f_UserStatusChangedSubscriberList.IndexOf(aSubscriber) = -1 then
  f_UserStatusChangedSubscriberList.Add(aSubscriber);
//#UC END# *5739832A00A2_5629FC88034B_impl*
//#UC START# *5739832A00A2_5629FC88034B_var*
//#UC END# *5739832A00A2_5629FC88034B_var*
//#UC START# *5739834700B2_5629FC88034B_impl*
 f_UserStatusChangedSubscriberList.Remove(aSubscriber);
//#UC END# *5739834700B2_5629FC88034B_impl*
//#UC START# *5739834700B2_5629FC88034B_var*
//#UC END# *5739834700B2_5629FC88034B_var*
//#UC START# *5739835200CF_5629FC88034B_impl*
 f_UserStatusChangedSubscriberList.IterateAllF(l3L2IA(@DoIt));
//#UC END# *5739835200CF_5629FC88034B_impl*
//#UC START# *5739835200CF_5629FC88034B_var*

 type
  PIdaUserStatusChangedSubscriber = ^IdaUserStatusChangedSubscriber;

 function DoIt(aData : PIdaUserStatusChangedSubscriber; anIndex : Integer) : Boolean;
 begin
  aData^.UserStatusChanged(anUserID, anActive);
  Result := True;
 end;

//#UC END# *5739835200CF_5629FC88034B_var*
