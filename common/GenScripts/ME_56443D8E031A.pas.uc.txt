//#UC START# *479731C50290_56443E71039A_impl*
 f_Filters := nil;
 inherited;
//#UC END# *479731C50290_56443E71039A_impl*
//#UC START# *479731C50290_56443E71039A_var*
//#UC END# *479731C50290_56443E71039A_var*
//#UC START# *56443DDB0195_56443E71039A_impl*
 f_CurrentIndex := -1;
//#UC END# *56443DDB0195_56443E71039A_impl*
//#UC START# *56443DDB0195_56443E71039A_var*
//#UC END# *56443DDB0195_56443E71039A_var*
//#UC START# *56443DE2025A_56443E71039A_impl*
 Result := (f_Filters <> nil) and (f_CurrentIndex < Pred(f_Filters.Count));
 if Result then
  Inc(f_CurrentIndex);
//#UC END# *56443DE2025A_56443E71039A_impl*
//#UC START# *56443DE2025A_56443E71039A_var*
//#UC END# *56443DE2025A_56443E71039A_var*
//#UC START# *56443E470148_56443E71039Aget_impl*
 Result := nil;
 if (f_Filters <> nil) then
  f_Filters.pm_GetItem(f_CurrentIndex, Result);
//#UC END# *56443E470148_56443E71039Aget_impl*
//#UC START# *56443E470148_56443E71039Aget_var*
//#UC END# *56443E470148_56443E71039Aget_var*
//#UC START# *56443E9B03A4_56443E71039A_impl*
 inherited Create;
 f_Filters := aFilters;
 Reset;
//#UC END# *56443E9B03A4_56443E71039A_impl*
//#UC START# *56443E9B03A4_56443E71039A_var*
//#UC END# *56443E9B03A4_56443E71039A_var*
//#UC START# *56444038035E_56443E71039A_impl*
 Create(CatFilters(aFirstFilters, aSecondFilters));
//#UC END# *56444038035E_56443E71039A_impl*
//#UC START# *56444038035E_56443E71039A_var*
//#UC END# *56444038035E_56443E71039A_var*
//#UC START# *564441680148_56443D8E031A_impl*
 Result := False;
 l_Enum := TnsFiltersEnumerator.Make(aFilters);
 try
  while l_Enum.MoveNext do
   if (l_Enum.Current.IsSame(aFilter)) then
   begin
    Result := True;
    Exit;
   end;
 finally
  l_Enum := nil;
 end;
//#UC END# *564441680148_56443D8E031A_impl*
//#UC START# *564441680148_56443D8E031A_var*
var
 l_Enum: InsFiltersEnumerator;
//#UC END# *564441680148_56443D8E031A_var*
//#UC START# *5644419601AD_56443D8E031A_impl*
 Result := DefDataAdapter.NativeAdapter.MakeFiltersFromQuery;
 lp_AddFilters(aFirstFilterList);
 lp_AddFilters(aSecondFilterList);
//#UC END# *5644419601AD_56443D8E031A_impl*
//#UC START# *5644419601AD_56443D8E031A_var*

 procedure lp_AddFilters(const aFilters: IFiltersFromQuery);
 var
  l_Enum: InsFiltersEnumerator;
 begin
  l_Enum := TnsFiltersEnumerator.Make(aFilters);
  try
   while l_Enum.MoveNext do
    Result.Add(l_Enum.Current);
  finally
   l_Enum := nil;
  end;
 end;//lp_AddFilters

//#UC END# *5644419601AD_56443D8E031A_var*
//#UC START# *5644424602DA_56443D8E031A_impl*
 l_Index := 0;
 while l_Index < aFilters.Count do
 begin
  aFilters.pm_GetItem(l_Index, l_Filter);
  if l_Filter.IsSame(aFilterToRemove) then
   aFilters.Delete(l_Index)
  else
   Inc(l_Index);
 end;//while l_Index < f_ActiveFilters.Count
//#UC END# *5644424602DA_56443D8E031A_impl*
//#UC START# *5644424602DA_56443D8E031A_var*
var
 l_Index: Integer;
 l_Filter: IFilterFromQuery;
//#UC END# *5644424602DA_56443D8E031A_var*
