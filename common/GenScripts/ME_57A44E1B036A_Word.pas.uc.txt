//#UC START# *57A44E1B036A_57A44E1B036A_Word_impl*
  Result := False;
  l_CommandLine := CommandLine;
  if (InputFile <> '') then
   hInputFile := CreateFile(PAnsiChar(InputFile), GENERIC_READ, FILE_SHARE_READ,
     CreateInheritable(SecAtrrs), OPEN_EXISTING, FILE_ATTRIBUTE_TEMPORARY, 0)
  else
   hInputFile := 0;
  if hInputFile <> INVALID_HANDLE_VALUE then
  begin
    hOutputFile := CreateFile(PAnsiChar(OutPutFile), GENERIC_READ or GENERIC_WRITE,
      FILE_SHARE_READ or FILE_SHARE_WRITE, CreateInheritable(SecAtrrs), OPEN_EXISTING,
      FILE_ATTRIBUTE_TEMPORARY, 0);
    if (hOutputFile = INVALID_HANDLE_VALUE) then
     hOutputFile := CreateFile(PAnsiChar(OutPutFile), GENERIC_READ or GENERIC_WRITE,
       FILE_SHARE_READ or FILE_SHARE_WRITE, CreateInheritable(SecAtrrs), CREATE_ALWAYS,
       FILE_ATTRIBUTE_TEMPORARY, 0)
    else
    begin
     FileSeek(Integer(hOutputFile), 0, FILE_END	);
    end;//hOutputFile = INVALID_HANDLE_VALUE
    if hOutputFile <> INVALID_HANDLE_VALUE then
    begin
      ResetMemory(StartupInfo, SizeOf(StartupInfo));
      ResetMemory(ProcessInfo, SizeOf(ProcessInfo));
      StartupInfo.cb := SizeOf(StartupInfo);
      StartupInfo.dwFlags := STARTF_USESHOWWINDOW or STARTF_USESTDHANDLES;
      StartupInfo.wShowWindow := SW_HIDE;
      StartupInfo.hStdOutput := hOutputFile;
      StartupInfo.hStdInput := hInputFile;
      UniqueString(l_CommandLine);//in the Unicode version the parameter lpCommandLine needs to be writable
      Result := CreateProcess(nil, PAnsiChar(l_CommandLine), nil, nil, True,
        CREATE_NEW_CONSOLE or NORMAL_PRIORITY_CLASS, nil, nil, StartupInfo,
        ProcessInfo);
      if Result then
      begin
        WaitForSingleObject(ProcessInfo.hProcess, INFINITE);
        CloseHandle(ProcessInfo.hProcess);
        CloseHandle(ProcessInfo.hThread);
      end;
      CloseHandle(hOutputFile);
    end;
    CloseHandle(hInputFile);
  end;
//#UC END# *57A44E1B036A_57A44E1B036A_Word_impl*
//#UC START# *57A44E1B036A_57A44E1B036A_Word_var*

 function CreateInheritable(out Sa: TSecurityAttributes): PSecurityAttributes;
 begin
   Sa.nLength := SizeOf(Sa);
   Sa.lpSecurityDescriptor := nil;
   Sa.bInheritHandle := True;
   if IsWinNT then
     Result := @Sa
   else
     Result := nil;
 end;

 procedure ResetMemory(out P; Size: Longint);
 begin
   if Size > 0 then
   begin
     Byte(P) := 0;
     l3FillChar(P, Size, 0);
   end;
 end;

var
  StartupInfo: TStartupInfo;
  ProcessInfo: TProcessInformation;
  SecAtrrs: TSecurityAttributes;
  hInputFile, hOutputFile: THandle;
  l_CommandLine: AnsiString;
//#UC END# *57A44E1B036A_57A44E1B036A_Word_var*
//#UC START# *57A44E1B036A_Word_ext:ParentFileName
w:\common\components\rtl\Garant\ScriptEngine\SysUtilsPack.pas
//#UC END# *57A44E1B036A_Word_ext:ParentFileName
