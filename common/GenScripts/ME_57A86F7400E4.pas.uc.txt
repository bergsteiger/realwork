//#UC START# *57A86F7400E4_ext:FileName
w:\garant6x\implementation\Garant\GbaNemesis\ExternalObjects\nsShellService.pas
//#UC END# *57A86F7400E4_ext:FileName
//#UC START# *57A86F7400E4impl_uses*
 , Windows
 , ShellAPI
 , afwFacade
 , nsTypes
//#UC END# *57A86F7400E4impl_uses*
//#UC START# *57A86FA30073_57A86F7400E4_impl*
 !!! Needs to be implemented !!!
//#UC END# *57A86FA30073_57A86F7400E4_impl*
//#UC START# *57A86FA30073_57A86F7400E4_var*
//#UC END# *57A86FA30073_57A86F7400E4_var*
//#UC START# *57A870780035_57A86F7400E4_impl*
 l3FillChar(l_ShellExecuteInfo, SizeOf(l_ShellExecuteInfo), 0);
 //http://mdp.garant.ru/pages/viewpage.action?pageId=431371899
 afw.BeginOp;
 try
  with l_ShellExecuteInfo do
  begin
   cbSize := SizeOf(l_ShellExecuteInfo);
   lpFile := PAnsiChar(nsAStr(aFile).S);
   if aSetReadOnlyToFile then
   begin
    l_Handle := Windows.FindFirstFileA(lpFile, l_FindData);
    if l_Handle <> INVALID_HANDLE_VALUE then
    begin
     Windows.FindClose(l_Handle);
     SetFileAttributesA(lpFile, GetFileAttributesA(lpFile) or faReadOnly);
    end;//l_Handle <> INVALID_HANDLE_VALUE
   end;//aSetReadOnlyToFile
   nShow := SW_SHOWNORMAL;
  end;//with l_ShellExecuteInfo
  Result := ShellExecuteExA(@l_ShellExecuteInfo);
 finally
  afw.EndOp;
 end;//try..finally
//#UC END# *57A870780035_57A86F7400E4_impl*
//#UC START# *57A870780035_57A86F7400E4_var*
var
 l_ShellExecuteInfo: {$IfDef XE}TShellExecuteInfoA{$Else}TShellExecuteInfo{$EndIf};
 l_Handle: THandle;
 l_FindData: {$IfDef XE}TWin32FindDataA{$Else}TWin32FindData{$EndIf};
//#UC END# *57A870780035_57A86F7400E4_var*
//#UC START# *F7FE987044FC_57A86F7400E4_impl*
 if (f_Alien <> nil) then
  Result := f_Alien.ShellExecute(aFile, aSetReadOnlyToFile)
 else
  Result := Self.CallShellExecute(aFile, aSetReadOnlyToFile); 
//#UC END# *F7FE987044FC_57A86F7400E4_impl*
//#UC START# *F7FE987044FC_57A86F7400E4_var*
//#UC END# *F7FE987044FC_57A86F7400E4_var*
