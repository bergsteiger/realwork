//#UC START# *479731C50290_57C3FAF20200_impl*
 FreeAndNil(f_Message);
 FreeAndNil(f_Reply);
 inherited;
//#UC END# *479731C50290_57C3FAF20200_impl*
//#UC START# *479731C50290_57C3FAF20200_var*
//#UC END# *479731C50290_57C3FAF20200_var*
//#UC START# *53A2EEE90097_57C3FAF20200_impl*
 l_Counter.Reset;
 l_Counter.Start;
 try
  try
   l_Gen := nil;
   try
    TevdNativeWriter.SetTo(l_Gen);
    l_WriteFiler := MakeFilerForMessage(f_Reply.Data);
    try
     (l_Gen as TevdNativeWriter).Filer := l_WriteFiler;
     (l_Gen as TevdNativeWriter).Binary := True;
    finally
     FreeAndNil(l_WriteFiler);
    end;

    if f_Message.FoundSelector.Count = 0 then
     l_FoundSelector := nil
    else
     l_FoundSelector := Tm4Addresses.Make;
    try
     for l_IDX := 0 to f_Message.FoundSelector.Count - 1 do
     begin
      f_Message.FoundSelector.GetValue(l_IDX, l_Address.rPara, l_Address.rWord, l_Address.rDocument);
      l_FoundSelector.Add(l_Address);
     end;

     l_ReadFiler := nil;
     BuildDocLoadPipe(f_Message.DocFamily, f_Message.DocID, f_Message.IsObjTopic, Tk2TypeTable.GetInstance.TypeByName[f_Message.DocumentType],
      f_Message.DocPart, f_Message.Level, f_Message.WithAttr, f_Message.DocPartSel, l_FoundSelector, l_Gen, l_ReadFiler);
    finally
     FreeAndNil(l_FoundSelector);
    end;
    try
     TevdNativeReader.SetTo(l_Gen);
     TevdNativeReader(l_Gen).Filer := l_ReadFiler;
     TevdNativeReader(l_Gen).Execute;
    finally
     FreeAndNil(l_ReadFiler);
    end;
   finally
    FreeAndNil(l_Gen);
   end;
   f_Reply.ErrorMessage := '';
   f_Reply.IsSuccess := True;
  except
   on E: Exception do
   begin
    f_Reply.ErrorMessage := E.Message;
    f_Reply.IsSuccess := False;
    l3System.Exception2Log(E);
   end;
  end;
 finally
  l_Counter.Stop;
  SignalReady;
  l3System.Msg2Log('Remote read document - %s', [FormatFloat('#,##0 ms', l_Counter.Time * 1000)], l3_msgLevel10);
 end;
//#UC END# *53A2EEE90097_57C3FAF20200_impl*
//#UC START# *53A2EEE90097_57C3FAF20200_var*
var
 l_Gen: Tk2TagGenerator;
 l_ReadFiler : Tl3CustomFiler;
 l_WriteFiler : Tl3CustomFiler;
 l_FoundSelector: Tm4Addresses;
 l_IDX: Integer;
 l_Address: Tm3DocumentAddress;
 l_Counter: Tl3StopWatch;
//#UC END# *53A2EEE90097_57C3FAF20200_var*
//#UC START# *57C3FAF20200_ext:FileName
w:\archi\source\projects\PipeInAuto\Tasks\alcuDownloadDocRequest.pas
//#UC END# *57C3FAF20200_ext:FileName
//#UC START# *57C3FAF20200impl_uses*
//#UC END# *57C3FAF20200impl_uses*
//#UC START# *57C3FB090381_57C3FAF20200set_impl*
 aValue.SetRefTo(f_Message);
//#UC END# *57C3FB090381_57C3FAF20200set_impl*
//#UC START# *57C3FB090381_57C3FAF20200set_var*
//#UC END# *57C3FB090381_57C3FAF20200set_var*
//#UC START# *57C3FB2E0376_57C3FAF20200set_impl*
 aValue.SetRefTo(f_Reply);
//#UC END# *57C3FB2E0376_57C3FAF20200set_impl*
//#UC START# *57C3FB2E0376_57C3FAF20200set_var*
//#UC END# *57C3FB2E0376_57C3FAF20200set_var*
//#UC START# *57C4135700F7_57C3FAF20200_impl*
 f_Reply.ErrorMessage := 'Операция прервана';
 SignalReady;
//#UC END# *57C4135700F7_57C3FAF20200_impl*
//#UC START# *57C4135700F7_57C3FAF20200_var*
//#UC END# *57C4135700F7_57C3FAF20200_var*
