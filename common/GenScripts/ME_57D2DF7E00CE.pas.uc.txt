//#UC START# *479731C50290_57D2DF7E00CE_impl*
 inherited;
 FreeAndNil(f_DrawingPanel);
//#UC END# *479731C50290_57D2DF7E00CE_impl*
//#UC START# *479731C50290_57D2DF7E00CE_var*
//#UC END# *479731C50290_57D2DF7E00CE_var*
//#UC START# *57D2B82102BD_57D2DF7E00CE_impl*
 inherited;
 f_UseCase.Activate;
//#UC END# *57D2B82102BD_57D2DF7E00CE_impl*
//#UC START# *57D2B82102BD_57D2DF7E00CE_var*
//#UC END# *57D2B82102BD_57D2DF7E00CE_var*
//#UC START# *57D2DF7E00CE_ext:FileName
w:\common\components\gui\Garant\msm\msmDrawingUseCaseView.pas
//#UC END# *57D2DF7E00CE_ext:FileName
//#UC START# *57D2DF7E00CEci*
//#UC END# *57D2DF7E00CEci*
//#UC START# *57D2DF7E00CEcit*
//#UC END# *57D2DF7E00CEcit*
//#UC START# *57D2DF7E00CEimpl*
//#UC END# *57D2DF7E00CEimpl*
//#UC START# *57D2DF7E00CEimpl_uses*
 , SysUtils
 , msmOpenInNewWindow
 , msmShowInNavigator
 , msmUpToParent
 , msmOperationsSeparator
 , msmListAndTreeInterfaces
 , msmListAndTreeViewUtils
 , msmCurrentElementShowAsListBinding
 , msmListOpener
 , msmListModel
 , msmListViewController
 , msmElementViews
 , msmDrawingViewController
 , msmTreeViewController
 , msmMultiPanelViewParent
 , msmParentedViewController
 , msmModelElement
//#UC END# *57D2DF7E00CEimpl_uses*
//#UC START# *57D2DF7E00CEintf_uses*
//#UC END# *57D2DF7E00CEintf_uses*
//#UC START# *57D2DF7E00CEpubl*
//#UC END# *57D2DF7E00CEpubl*
//#UC START# *57D2DFA70064_57D2DF7E00CE_impl*
 inherited Create;
 f_UseCase := aUseCase;
(* f_UseCase.AddController(
  TmsmMainFormController.Make(Self, aUseCase.Caption)
 );*)

 l_DrawingPanel := TmsmProportionalPanel.Create(nil);
 //l_DrawingPanel := TmsmPanel.Create(nil);
 f_DrawingPanel := l_DrawingPanel;
 l_DrawingZone := TmsmMultiPanelViewParent.Make(l_DrawingPanel);

 AddController(
  TmsmParentedViewController.Make(f_DrawingPanel, aUseCase.Drawing, aMainZone)
  //TmsmParentedViewControllerWithOwnership.Make(f_DrawingPanel, aUseCase.Drawing, aMainZone)
  // - с Ownership - не сложилось, ибо контролы удаляются не в том порядке
 );

 AddController(
  AddDiagramOperations
  (
   TmsmDrawingViewController.Make(aUseCase.Drawing, l_DrawingZone)
   , aUseCase.Drawing
  )
 );

 AddController(
  AddMainListOperations
  (
   DisableActionElementEvent
   (
    TmsmListViewController.Make(aUseCase.Drawing, l_DrawingZone)
   )
   , aUseCase.Drawing
  )
 );

 AddController(
  AddMainListOperations
  (
   DisableActionElementEvent
   (
    TmsmListViewController.Make(aUseCase.MainList, aMainZone)
   )
   , aUseCase.MainList
  )
 );

 if (aLeftZone <> nil) then
  AddController(
   AddListLikeOperations
   (
    TmsmTreeViewController.Make(aUseCase.Navigator, aLeftZone)
    , aUseCase.Navigator
   )
  );

 if (aChildZone <> nil) then
 begin
  l_ListContext := TmsmListViewtInitContext_C;
  AddChildViews(['Depends', 'Inherits', 'Implements', 'Inner', 'Children', 'Constants', 'Attributes', 'Operations', 'Implemented', 'Overridden', 'Dependencies'],
                aChildZone,
                l_ListContext
                );
  AddChildView(TmsmListModel.MakeList(TmsmModelElementView_C('UpList', 'UpText')),
               aChildZone,
               l_ListContext);
  l_ListContext.rMultiStrokeItem := true;
  AddChildView(TmsmListModel.MakeList(TmsmModelElementView_C('SelfList', 'DocumentationNotEmpty')),
               aChildZone,
               l_ListContext);
 end;//aChildZone <> nil

 if (aFloatingZone <> nil) then
 begin
  AddController(
   AddNavigatorOperations(
    TmsmTreeViewController.Make(aUseCase.FloatingNavigator, aFloatingZone),
    aUseCase.FloatingNavigator
   )
  );
  l_AllWords := TmsmLoadedWordsListModel.Make;
  AddController(
   AddReadonlyListOperations(
    DisableActionElementEvent
    (
     TmsmListViewController.Make(l_AllWords, aFloatingZone)
    )
    , l_AllWords
   )
  );
  Bind(TmsmListOpener.Make(l_AllWords, aUseCase.MainList));

  if (f_FoundElementsModel = nil) then
   f_FoundElementsModel := TmsmSomeModelElementsListModel.Make(nil, 'Found');
  AddController(
   AddReadonlyListOperations(
    DisableActionElementEvent
    (
     TmsmListViewController.Make(f_FoundElementsModel, aFloatingZone)
    )
    , f_FoundElementsModel
   )
  );
  Bind(TmsmListOpener.Make(f_FoundElementsModel, aUseCase.MainList));

 end;//aFloatingZone <> nil
//#UC END# *57D2DFA70064_57D2DF7E00CE_impl*
//#UC START# *57D2DFA70064_57D2DF7E00CE_var*

 function AddNavigatorOperations(const aController: ImsmController; const aModel: ImsmListLikeModel): ImsmController;
 begin//AddNavigatorOperations
  aController.AddOperation(TmsmOpenInNewWindow.Make('Open in new window', aModel));
  aController.AddOperation(TmsmOperationsSeparator.Make);
  aController.AddOperation(TmsmGenerateElement.Make('Generate element', aModel));
  aController.AddOperation(TmsmOperationsSeparator.Make);
  aController.AddOperation(TmsmSaveChangedElements.Make('Save changed', aModel));
  aController.AddOperation(TmsmOperationsSeparator.Make);
  aController.AddOperation(TmsmCopySelection.Make('Copy', aModel));
  aController.AddOperation(TmsmPaste.Make('Paste', aModel));
  Result := aController;
 end;//AddNavigatorOperations

 function AddReadonlyListOperations(const aController: ImsmController; const aModel: ImsmListLikeModel): ImsmController;
 begin//
  AddNavigatorOperations(aController, aModel);
  aController.AddOperation(TmsmOperationsSeparator.Make);
  aController.AddOperation(TmsmShowInNavigator.Make('Show in navigator', aModel, aUseCase.FloatingNavigator));
  Result := aController;
 end;//AddReadonlyListOperations

 function AddListLikeOperations(const aController: ImsmController; const aModel: ImsmListLikeModel): ImsmController;
 begin//AddListLikeOperations
  Assert(aUseCase.FloatingNavigator <> nil);
  AddNavigatorOperations(aController, aModel);
  aController.AddOperation(TmsmOperationsSeparator.Make);
  aController.AddOperation(TmsmShowInNavigator.Make('Show in navigator', aModel, aUseCase.FloatingNavigator));
  Result := aController;
 end;//AddListLikeOperations

 function AddListOperations(const aController: ImsmController; const aModel: ImsmListModel): ImsmController;
 begin//AddListOperations
  AddListLikeOperations(aController, aModel);
  Result := aController;
 end;//AddListOperations

 function AddMainListOperations(const aController: ImsmController; const aModel: ImsmListModel): ImsmController;
 begin//AddMainListOperations
  aController.AddOperation(TmsmUpToParent.Make('Up to parent', aModel));
  aController.AddOperation(TmsmOperationsSeparator.Make);
  AddListOperations(aController, aModel);
  Result := aController;
 end;//AddMainListOperations

 function AddDiagramOperations(const aController: ImsmController; const aModel: ImsmDrawingModel): ImsmController;
 begin//AddDiagramOperations
  aController.AddOperation(TmsmUpToParent.Make('Parent diagram', aModel));
  aController.AddOperation(TmsmOperationsSeparator.Make);
  AddListOperations(aController, aModel);
  Result := aController;
 end;//AddDiagramOperations

 function DisableActionElementEvent(const aController: ImsmController): ImsmController;
 begin//DisableActionElementEvent
  aController.DisableEvent(ActionElementEvent.Instance);
  Result := aController;
 end;//DisableActionElementEvent

 procedure AddChildView(const aChildModel: ImsmListModel; const aParent: ImsmViewParent; const aContext: TmsmListViewtInitContext);
 begin//AddChildView
  Bind(TmsmCurrentElementShowAsListBinding.Make(aUseCase.MainList, aChildModel));
  Bind(TmsmCurrentElementShowAsListBinding.Make(aUseCase.Drawing, aChildModel));
  Bind(TmsmListOpener.Make(aChildModel, aUseCase.MainList));

  AddController(
   AddListOperations
   (
    DisableActionElementEvent
    (
     TmsmListViewController.Make(aChildModel, aParent, aContext)
    )
    , aChildModel
   )
  );
 end;//AddChildView

 procedure AddChildViews(const aNames: array of String; const aParent: ImsmViewParent; const aContext: TmsmListViewtInitContext);
 var
  l_Index : Integer;
 begin//AddChildViews
  for l_Index := Low(aNames) to High(aNames) do
   AddChildView(TmsmListModel.MakeList(TmsmModelElementView_C(aNames[l_Index])), aParent, aContext);
 end;//AddChildViews
 
var
 l_ListContext : TmsmListViewtInitContext;
 l_DrawingZone : ImsmViewParent;
 l_DrawingPanel : TmsmViewParentControl;
 l_AllWords : ImsmListModel;
//#UC END# *57D2DFA70064_57D2DF7E00CE_var*
//#UC START# *57E455C800E0_57D2DF7E00CE_impl*
 f_UseCase.FloatingNavigator.CurrentElement := TmsmModelElement.MakeFromWord(TmsmWordsManaging.FindWord(aName));
 if (f_FoundElementsModel <> nil) then
  TmsmWordsManaging.FindWords(aName)
//#UC END# *57E455C800E0_57D2DF7E00CE_impl*
//#UC START# *57E455C800E0_57D2DF7E00CE_var*
//#UC END# *57E455C800E0_57D2DF7E00CE_var*
//#UC START# *57E557F2038A_57D2DF7E00CEget_impl*
 !!! Needs to be implemented !!!
//#UC END# *57E557F2038A_57D2DF7E00CEget_impl*
//#UC START# *57E557F2038A_57D2DF7E00CEget_var*
//#UC END# *57E557F2038A_57D2DF7E00CEget_var*
