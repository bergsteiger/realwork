//#UC START# *479731C50290_5811BB7F013F_impl*
 FreeAndNil(f_TasksList);
 f_Finisher := nil;
 inherited;
//#UC END# *479731C50290_5811BB7F013F_impl*
//#UC START# *479731C50290_5811BB7F013F_var*
//#UC END# *479731C50290_5811BB7F013F_var*
//#UC START# *5811BB7F013F_ext:FileName
w:\archi\source\projects\PipeInAuto\Tasks\alcuServerFilesDeliverer.pas
//#UC END# *5811BB7F013F_ext:FileName
//#UC START# *5811BB7F013Fimpl_uses*
//#UC END# *5811BB7F013Fimpl_uses*
//#UC START# *5811F1350098_5811BB7F013F_impl*
 aList.Clear;
 f_TasksList.ForEachF(L2AlcuTasksIteratorForEachFAction(@DoIt));
//#UC END# *5811F1350098_5811BB7F013F_impl*
//#UC START# *5811F1350098_5811BB7F013F_var*

 function DoIt(anItem: TddProcessTask): Boolean;
 begin
  Result := true;
  if (anItem.Status = cs_tsReadyToDelivery) and (anItem.UserID = DataPipe.ClientID) then
   aList.Add(anItem.TaskID);
 end;

//#UC END# *5811F1350098_5811BB7F013F_var*
//#UC START# *5811FA310130_5811BB7F013F_impl*
 inherited Create(aPipe);
 aTasksList.SetRefTo(f_TasksList);
 f_Finisher := aFinisher;
//#UC END# *5811FA310130_5811BB7F013F_impl*
//#UC START# *5811FA310130_5811BB7F013F_var*
//#UC END# *5811FA310130_5811BB7F013F_var*
//#UC START# *58133D420395_5811BB7F013F_impl*
 if not f_TasksList.ForOneByIDF(L2AlcuTasksIteratorForOneByIDFAction(@DoProcess), aTaskID) then
  l3System.Msg2Log('Задача с идентификатором %s не найдена (результат передачи)', [aTaskID]);
 Assert(False);
//!! !!!  
// l3System.Msg2Log('Результат передачи %s - %s', [aTaskID, GetEnumName(TypeInfo(TncsResultKind), Ord(aResult))]);
 l3System.Msg2Log('Передача результатов завершена');
//#UC END# *58133D420395_5811BB7F013F_impl*
//#UC START# *58133D420395_5811BB7F013F_var*

 function DoProcess(anItem: TddProcessTask): Boolean;
 begin
  Result := False;
  if aResult = ncs_rkFail then
   anItem.Error('Доставка завершилась ошибкой');
  if aResult <> ncs_rkRetry then
   f_Finisher.TaskDone(anItem)
  else
   anItem.RequestDelivery;
 end;

//#UC END# *58133D420395_5811BB7F013F_var*
//#UC START# *58133D520215_5811BB7F013F_impl*
 if not f_TasksList.ForOneByIDF(L2AlcuTasksIteratorForOneByIDFAction(@DoProcess), aTaskID) then
  l3System.Msg2Log('Задача с идентификатором ' + aTaskID + ' не найдена');
 l3System.Msg2Log('Скорректирован каталог доставки');
//#UC END# *58133D520215_5811BB7F013F_impl*
//#UC START# *58133D520215_5811BB7F013F_var*

 function DoProcess(anItem: TddProcessTask): Boolean;
 var
  l_Task: TcsExport;
 begin
  Result := False;
  l_Task := anItem as TcsExport;
  l_Task.ExportDirectory := aNewFolder;
  l_Task.Description := l_Task.DefaultDescription;
 end;

//#UC END# *58133D520215_5811BB7F013F_var*
