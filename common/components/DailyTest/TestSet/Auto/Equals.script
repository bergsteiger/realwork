/*{BOOLEAN operator =
  IN aLeft
  ^ IN aRight
 %SUMMARY ' 
  оПЮБНЯРНПНММХИ, Ю МЕ НАПЮРМШИ ОНКЭЯЙХИ ==
  реоепэ я акщйдфейнл х люяяхбюлх!

  оПХЛЕПШ:
   1 пюбмн 1  . - True
   [ 10 20 ] пюбмн ( 10 20 ) . - True
   [ 10 20 ] пюбмн ( [ 10 20 ] ) . - True
   [ 10 ] пюбмн ( [ 10 ] ) . - True
   [ 10 ] пюбмн ( 10 ) . - True
   [ 10 ] пюбмн ( 20 ) . - False
 ' ;  
                    
 if ( aLeft IsArray ! ) then
 begin
  INTEGER VAR l_StackLevel
  StackLevel >>> l_StackLevel
  aRight DO 
  if ( StackLevel l_StackLevel GREATER ) then
  begin 
   aLeft ?== >>> Result
   l_StackLevel ReduceStackLevel
  end // StackLevel l_StackLevel GREATER
  else
  begin
   false >>> Result
  end 
 end // aLeft IsArray !
 else
 begin
  ARRAY VAR l_Right
  l_Right := [ aRight DO ]
  TRY
    if
     (
      ( l_Right IsArray ) х
      ( l_Right Array:Count 1 == ) х
      ( 0 l_Right [i] IsArray )
     )
    then
    (
     Result := ( aLeft 0 l_Right [i] ArraysAreEqual )
    )
    else
    (
     Result := ( aLeft l_Right ArraysAreEqual )
    )
  FINALLY
   l_Right := [ ]
  END
 end // aLeft IsArray !
; // =

WordAlias пюбмн =}*/

USES
 Testing.ms.dict
;

Test&Dump EqualsTest

3 3 == .
true false == .
'ЯРПНЙЮ1' 'ЯРПНЙЮ2' == .

'-----' .

1 пюбмн 1 .
[ 10 20 ] пюбмн ( 10 20 ) .
[ 10 20 ] пюбмн ( [ 10 20 ] ) .
[ 10 ] пюбмн ( [ 10 ] ) .
[ 10 ] пюбмн ( 10 ) .
[ 10 ] пюбмн ( 20 ) .

'a' пюбмн 'a' .
'a' пюбмн 'b' .
[ 'a' 'b' ] пюбмн ( 'a' 'b' ) .
[ 'a' 'b' ] пюбмн ( 'a' 'a' ) .

[ 'a' 'b' ] пюбмн ( [ 'a' 'b' ] ) .

[ 'a' 'b' ] пюбмн [ 'a' 'b' ] .
[ 'a' 'b' ] пюбмн [ 'a' 'a' ] .

[ 'a' 'b' ] пюбмн [ 'a' 'b' 'c' ] .

1 пюбмн ( 1 ) .
1 пюбмн ( 1 2 ) .
1 пюбмн [ 1 ] .
1 пюбмн [ 1 2 ] .
1 пюбмн ( ) .
1 пюбмн [ ] .

[ ] пюбмн [ ] .
[ ] пюбмн ( ) .

'-----' .

1 <> 1 .
[ 10 20 ] <> ( 10 20 ) .
[ 10 20 ] <> ( [ 10 20 ] ) .
[ 10 ] <> ( [ 10 ] ) .
[ 10 ] <> ( 10 ) .
[ 10 ] <> ( 20 ) .

'a' <> 'a' .
'a' <> 'b' .
[ 'a' 'b' ] <> ( 'a' 'b' ) .
[ 'a' 'b' ] <> ( 'a' 'a' ) .

[ 'a' 'b' ] <> ( [ 'a' 'b' ] ) .

[ 'a' 'b' ] <> [ 'a' 'b' ] .
[ 'a' 'b' ] <> [ 'a' 'a' ] .

[ 'a' 'b' ] <> [ 'a' 'b' 'c' ] .

1 <> ( 1 ) .
1 <> ( 1 2 ) .
1 <> [ 1 ] .
1 <> [ 1 2 ] .
1 <> ( ) .
1 <> [ ] .

[ ] <> [ ] .
[ ] <> ( ) .

'-----' .

1 = 1   1 <> 1 != .
[ 10 20 ] = ( 10 20 )  [ 10 20 ] <> ( 10 20 ) != .
[ 10 20 ] = ( [ 10 20 ] )   [ 10 20 ] <> ( [ 10 20 ] ) != .
[ 10 ] = ( [ 10 ] )   [ 10 ] <> ( [ 10 ] ) != .
[ 10 ] = ( 10 )   [ 10 ] <> ( 10 ) != .
[ 10 ] = ( 20 )   [ 10 ] <> ( 20 ) != .

'a' = 'a'   'a' <> 'a' != .
'a' = 'b'   'a' <> 'b' != .
[ 'a' 'b' ] = ( 'a' 'b' )   [ 'a' 'b' ] <> ( 'a' 'b' ) != .
[ 'a' 'b' ] = ( 'a' 'a' )   [ 'a' 'b' ] <> ( 'a' 'a' ) != .

[ 'a' 'b' ] = ( [ 'a' 'b' ] )   [ 'a' 'b' ] <> ( [ 'a' 'b' ] ) != .

[ 'a' 'b' ] = [ 'a' 'b' ]   [ 'a' 'b' ] <> [ 'a' 'b' ] != .
[ 'a' 'b' ] = [ 'a' 'a' ]   [ 'a' 'b' ] <> [ 'a' 'a' ] != .

[ 'a' 'b' ] = [ 'a' 'b' 'c' ]   [ 'a' 'b' ] <> [ 'a' 'b' 'c' ] != .

1 = ( 1 )   1 <> ( 1 ) != .
1 = ( 1 2 )   1 <> ( 1 2 ) != .
1 = [ 1 ]   1 <> [ 1 ] != .
1 = [ 1 2 ]   1 <> [ 1 2 ] != .
1 = ( )   1 <> ( ) != .
1 = [ ]   1 <> [ ] != .

[ ] = [ ]   [ ] <> [ ] != .
[ ] = ( )   [ ] <> ( ) != .

'-----' .

; // EqualsTest

EqualsTest