WordAlias Print .

BOOLEAN FUNCTION array:Has 
  IN aValue 
  ARRAY IN anArray
  
 false >>> Result

 anArray ==> ( IN anItem
  if ( anItem aValue == )
   ( 
     true >>> Result
     BREAK-ITERATOR
   )
 )
; // array:Has

STRING FUNCTION ?(+)
 STRING IN aPrefix
 ^ IN aSuffix
 %SUMMARY 'Если aPrefix не пустой, то возвращает сумму aPrefix и aSuffix, иначе возвращает пустую строку' ;
 '' >>> Result
 if ( aPrefix <> '' ) then
  ( aPrefix aSuffix DO Cat >>> Result )
; // ?(+)

STRING FUNCTION IndentStr
 INTEGER IN anIndent
 anIndent ' ' char:Dupe >>> Result
; // IndentStr

WordAlias .Stereotype %ST

ARRAY FUNCTION .Stereotype.Words
  TtfwWord IN Self
 ( Self LIST .Stereotype ) >>> Result
; // .Stereotype.Words

USES
 axiom:Dictionary
;

FORWARD pop:KeyWord:Print

PROCEDURE pop:Dictionary:Print
 STRING IN anIndent
 TtfwDictionary IN aDictionary
 
 if ( aDictionary IsNil ! ) then
 begin
  aDictionary pop:Dictionary:KeyWordsIterator ==> ( 
    TtfwKeyWord IN aKeyWord 
    anIndent ' ' Cat aKeyWord pop:KeyWord:Print
  )
 end // ( aDictionary IsNil ! )
; // pop:Dictionary:Print

PROCEDURE pop:Word:Print
  STRING IN anIndent
  STRING IN aName
  TtfwWord IN aWord 
  
 if ( aWord pop:Word:Name '%SUM' == ) then
 begin
  INTEGER VAR l_SL
  StackLevel >>> l_SL
  aWord DO
  if ( StackLevel > l_SL ) then
  begin
   [ anIndent 'Documentation:' ] strings:Cat Print
   while ( StackLevel > l_SL )
   begin
    IN aValue
    [ anIndent ' ' Cat aValue ToPrintable ] strings:Cat Print
   end
  end
 end // ( aWord pop:Word:Name '%SUM' == )
 else
 begin
  [ anIndent
   [ 
    aWord pop:Word:Directives 
    aWord .Stereotype.Words .reverted> .map> pop:Word:Name ' :: ' strings:CatSep ?(+) ' : '
    aName 
   ] ' ' strings:CatSep 
  ] strings:Cat Print
   
  TtfwWord VAR l_Redefines 
  aWord pop:Word:Redefines >>> l_Redefines
  if ( l_Redefines IsNil ! ) then
  begin
   [ anIndent '==> Redefines' ] strings:Cat Print
   TRY
    anIndent ' ' Cat aWord pop:Word:Name l_Redefines @SELF DO
   FINALLY
    [ anIndent '<== Redefines' ] strings:Cat Print
   END
  end
   
  TtfwDictionary VAR l_InnerDictionary
  aWord pop:Word:InnerDictionary >>> l_InnerDictionary
  
  if ( l_InnerDictionary IsNil ! ) then
  begin
   anIndent l_InnerDictionary pop:Dictionary:Print
   
   [ anIndent '; // ' aName ] strings:Cat Print
  end // ( l_InnerDictionary IsNil ! )
 end // ( aWord pop:Word:Name '%SUM' == )
; // pop:Word:Print

PROCEDURE pop:KeyWord:Print
  STRING IN anIndent
  TtfwKeyWord IN aKeyWord 
 
 TtfwWord VAR l_Word
 aKeyWord pop:KeyWord:Word >>> l_Word
 
 if ( l_Word IsNil ! ) then
  if ( l_Word pop:Word:IsForHelp ) then
   if ( l_Word Ctx:DisabledForHelp array:Has ! ) then
   begin
    anIndent aKeyWord pop:KeyWord:Name l_Word pop:Word:Print  
   end // ( l_Word Ctx:DisabledForHelp array:Has ! )
; // pop:KeyWord:Print

PROCEDURE pop:DictionaryEx:Print
  STRING IN anIndent
  TtfwDictionaryEx IN aDictionary
  
 if ( aDictionary IsNil ! ) then
 begin  
  [ 'Dictionary: ' aDictionary pop:DictionaryEx:FileName ] strings:Cat Print
  
  BOOLEAN VAR l_NeedHeader
  
  true >>> l_NeedHeader
  aDictionary pop:DictionaryEx:UsedDictionaries ==> ( 
    TtfwDictionaryEx IN aDictionary
   if ( l_NeedHeader ) then
   (
    ' Uses: ' Print
    false >>> l_NeedHeader
   )
   [ '  ' aDictionary pop:DictionaryEx:FileName ] strings:Cat Print 
  )
  if ( l_NeedHeader ! ) then
   ( ' ;' Print )
  
  true >>> l_NeedHeader
  aDictionary pop:DictionaryEx:ExportedDictionaries ==> ( 
    TtfwDictionaryEx IN aDictionary
   if ( l_NeedHeader ) then
   (
    ' Exports: ' Print
    false >>> l_NeedHeader
   )
   [ '  ' aDictionary pop:DictionaryEx:FileName ] strings:Cat Print 
  )
  if ( l_NeedHeader ! ) then
   ( ' ;' Print )
  
  aDictionary pop:Dictionary:KeyWordsIterator ==> ( 
    TtfwKeyWord IN aKeyWord 
   if ( aKeyWord pop:KeyWord:Dictionary aDictionary == ) then 
    ( anIndent aKeyWord pop:KeyWord:Print )
  )
 end // ( aDictionary IsNil ! )
 
; // pop:DictionaryEx:Print

USES
 axiom:MainDictionary
;

PROCEDURE Ctx:PrintDictionaries

 ARRAY VAR l_InitedDictionaries
 Ctx:InitedDictionaries >>> l_InitedDictionaries
 
 Ctx:StandardDictionaries 
  .filter> ( l_InitedDictionaries array:Has ! ) 
   ==> ( TtfwDictionaryEx IN anItem '' anItem pop:DictionaryEx:Print )
 l_InitedDictionaries ==> ( TtfwDictionaryEx IN anItem '' anItem pop:DictionaryEx:Print )
 
 TtfwWord VAR l_CompiledCode
 
 Ctx:MainDictionary pop:MainDictionary:CompiledCode >>> l_CompiledCode
 if ( l_CompiledCode IsNil ! ) then
  ( '' 'Main' l_CompiledCode pop:Word:Print )
 
; // Ctx:PrintDictionaries

WordAlias help Ctx:PrintDictionaries

//Ctx:PrintDictionaries

EtalonNeedsXE
help