// ElementsRTTI.ms.dict

USES
 Documentation.ms.dict
 EngineTypes.ms.dict
 axiom_push.ms.dict
 macro.ms.dict
 core.ms.dict
 NoStrangeSymbols.ms.dict
 params.ms.dict
 NoCapsLock.ms.dict
 arrays.ms.dict
 WordsRTTI.ms.dict
;

ENGINE_WORD TYPE ModelElement
 %REMARK 'Элемент модели'
ENGINE_WORD TYPE STEREOTYPE
 %REMARK 'Стереотип элемента модели'

MACRO elem_func
 Literal IN aName
 %SUMMARY 'Функция на элементе модели' ;
 aName .Name this.method.addr nil 'ModelElement' do_word_func
; // elem_func

MACRO elem_func_v
 Literal IN aStereoName
 Literal IN aName
 %SUMMARY 'Виртуальная функция на элементе модели' ;
  %TODO 'Вообще говоря это потом надо скрестить с elem_func анализируя VIRTUAL, ABSTRACT и OVERRIDE'
 aName .Name this.method.addr nil 'ModelElement' do_word_func
; // elem_func_v

PROCEDURE do_elem_proc
 STRING IN aName
 ENGINE_WORD IN aSelf
 ENGINE_WORD IN aModifier
 %SUMMARY 'Реализация elem_proc и elem_generator' ;
 Ctx:ClearTypeInfo
 axiom:PushSymbol VOID
 aName aSelf aModifier 'ModelElement' do_word_func
; // do_elem_proc

MACRO elem_proc
 Literal IN aName
 %SUMMARY 'Процедура на элементе модели' ;
 aName .Name this.method.addr nil do_elem_proc
; // elem_proc

MACRO elem_generator
 Literal IN aName
 %SUMMARY 'Генератор содержимого элемента' ;
 aName .Name this.method.addr nil do_elem_proc
; // elem_generator

MACRO elem_ref_proc
 Literal IN aName
 %SUMMARY 'Процедура на элементе модели, который передаётся по ссылке' ;
 aName .Name this.method.addr Addr LVALUE_MOD do_elem_proc
; // elem_ref_proc

BOOLEAN elem_func IsSummary
 %SUMMARY 'Определяет тот факт, что Self является документацией к элементу' ;

 Result := ( ( Self .Name ) = '%SUM' )
; // IsSummary

BOOLEAN elem_func IsModelElement
 %SUMMARY 'Определяет тот факт, что Self является "элементом модели"' ;

 Result := (
  ( '<<' Self .Stereotype .Name StartsStr )
  AND
  ( '>>' Self .Stereotype .Name EndsStr )
 )
; // IsModelElement

MACRO elem_iterator
 [ 'ARRAY elem_func' ] Ctx:Parser:PushArray
 @SELF Ctx:SetWordProducerForCompiledClass
; // elem_iterator

elem_iterator Implemented
 %SUMMARY 'Возвращает итератор элементов которые реализует наш элемент' ;
 Result := ( Self .Implemented.Words .filter> .IsModelElement )
; // Implemented

elem_iterator Inherited
 %SUMMARY 'Возвращает итератор элементов от которого наследуется наш элемент' ;
 Result := ( Self .Inherited.Words .filter> .IsModelElement )
; // Inherited

elem_iterator Children
 %SUMMARY 'Возвращает итератор детей Self в "терминах определённой модели"' ;
 Result := ( Self MembersIterator .filter> .IsModelElement )
; // Children

elem_iterator Parents
 %SUMMARY 'Возвращает итератор родителей Self в "терминах определённой модели"' ;
 Result := ( Self .Parent.Words .filter> .IsModelElement )
; // Parents

elem_iterator Stereotypes
 Result := ( Self .Stereotype.Words .filter> .IsModelElement )
; // Stereotypes

BOOLEAN elem_func IsStereotypeOf
 STEREOTYPE LINK RIGHT IN aStereo
 %SUMMARY 'Определяет, что элемент является указанным стереотипом или его потомком' ;
 Result := ( Self .Stereotype .Name = ( aStereo .Name ) ) 
; // IsStereotypeOf

EXPORTS
 WordsRTTI.ms.dict