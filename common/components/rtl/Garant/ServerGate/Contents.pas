// ***************************************************************************
//                                                                            
// Generated by the MTDORB IDL-to-Pascal Translator (1.0.1b1), 27.06.2011 16:45
//                                                                            
// Copyright (c) 2002 - 2004                                                  
// Millennium Group.                                                          
// Samara, Russia                                                             
//                                                                            
// All Rights Reserved                                                        
//                                                                            
// ***************************************************************************
// Compiled with parameters: " -ishura shura/Contents.idl" 
//                                                                            
unit Contents;

interface

uses
  Classes, orb_int, orb, req_int, code_int, env_int, stdstat, std_seq,imr, imr_int, 
  orbtypes, exceptions, except_int, Contents_int, RootSrv_int, RootSrv, poa_int, poa;

type

  TServerGate_Contents_PageNotFound_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

  {** IDL:garant.ru/ServerGate/Contents/PageNotFound:1.0 } 
  TServerGate_Contents_PageNotFound = class(UserException,IServerGate_Contents_PageNotFound)
  protected
    procedure throw; override;
    function clone(): IORBException; override;
    function repoid(): RepositoryID; override;
    procedure encode(const enc: IEncoder); override;
    procedure encode_any(const a: IAny); override;
  public
    constructor Create(ex: TServerGate_Contents_PageNotFound); overload;
    constructor Create(); overload;
  end;

  TServerGate_Contents_CantCreatePage_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

  {** IDL:garant.ru/ServerGate/Contents/CantCreatePage:1.0 } 
  TServerGate_Contents_CantCreatePage = class(UserException,IServerGate_Contents_CantCreatePage)
  protected
    procedure throw; override;
    function clone(): IORBException; override;
    function repoid(): RepositoryID; override;
    procedure encode(const enc: IEncoder); override;
    procedure encode_any(const a: IAny); override;
  public
    constructor Create(ex: TServerGate_Contents_CantCreatePage); overload;
    constructor Create(); overload;
  end;

  TServerGate_Contents_PermissionException_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

  {** IDL:garant.ru/ServerGate/Contents/PermissionException:1.0 } 
  TServerGate_Contents_PermissionException = class(UserException,IServerGate_Contents_PermissionException)
  protected
    procedure throw; override;
    function clone(): IORBException; override;
    function repoid(): RepositoryID; override;
    procedure encode(const enc: IEncoder); override;
    procedure encode_any(const a: IAny); override;
  public
    constructor Create(ex: TServerGate_Contents_PermissionException); overload;
    constructor Create(); overload;
  end;

  TServerGate_Contents_MetadataEntity_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

  ServerGate_Contents_MetadataEntity_seq = Array of TServerGate_Contents_MetadataEntity;
  PServerGate_Contents_MetadataEntity_seq = ^ServerGate_Contents_MetadataEntity_seq;

  TServerGate_Contents_MetadataEntity_seq_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

  {** IDL:garant.ru/ServerGate/Contents/KPage:1.0 } 
  TServerGate_Contents_KPage = class(TORBObject,IServerGate_Contents_KPage)
  protected
    function get_name: AnsiString; virtual; abstract;
    function get_id: TServerGate_Contents_PageId; virtual; abstract;
    procedure _free; virtual; abstract;
    function get_metadata(const name: AnsiString): AnsiString; virtual; abstract;
    procedure set_metadata(const name: AnsiString; const value: AnsiString); virtual; abstract;
    procedure append_wiki_text(const text: AnsiString); virtual; abstract;
    function get_wiki_text: AnsiString; virtual; abstract;
    function get_labels: AnsiString; virtual; abstract;
    procedure set_labels(const labels: AnsiString); virtual; abstract;
    procedure set_wiki_text(const wiki: AnsiString); virtual; abstract;
    procedure set_name(const name: AnsiString); virtual; abstract;
    procedure add_metadata(const metas: TServerGate_Contents_MetadataEntityList); virtual; abstract;
    procedure add_attachment(const name: AnsiString; const byte_stream: TServerGate_Contents_ByteBuffer; const content_type: AnsiString); virtual; abstract;
    procedure simulate_viewpage_action(const current_user_password: AnsiString); virtual; abstract;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    class function _narrow(const obj : IORBObject): IServerGate_Contents_KPage;
    class function narrow_helper2(const obj: IORBObject): Boolean;
  end;

  {** stub for interface IDL:garant.ru/ServerGate/Contents/KPage:1.0} 
  TServerGate_Contents_KPage_stub = class(TServerGate_Contents_KPage)
  protected
    function get_name: AnsiString; override;
    function get_id: TServerGate_Contents_PageId; override;
    procedure _free; override;
    function get_metadata(const name: AnsiString): AnsiString; override;
    procedure set_metadata(const name: AnsiString; const value: AnsiString); override;
    procedure append_wiki_text(const text: AnsiString); override;
    function get_wiki_text: AnsiString; override;
    function get_labels: AnsiString; override;
    procedure set_labels(const labels: AnsiString); override;
    procedure set_wiki_text(const wiki: AnsiString); override;
    procedure set_name(const name: AnsiString); override;
    procedure add_metadata(const metas: TServerGate_Contents_MetadataEntityList); override;
    procedure add_attachment(const name: AnsiString; const byte_stream: TServerGate_Contents_ByteBuffer; const content_type: AnsiString); override;
    procedure simulate_viewpage_action(const current_user_password: AnsiString); override;
  end;

  {** POA stub for interface IDL:garant.ru/ServerGate/Contents/KPage:1.0} 
  TServerGate_Contents_KPage_stub_clp = class(TPOAStub,IPOAStub,IServerGate_Contents_KPage)
  protected
    function get_name: AnsiString; virtual;
    function get_id: TServerGate_Contents_PageId; virtual;
    procedure _free; virtual;
    function get_metadata(const name: AnsiString): AnsiString; virtual;
    procedure set_metadata(const name: AnsiString; const value: AnsiString); virtual;
    procedure append_wiki_text(const text: AnsiString); virtual;
    function get_wiki_text: AnsiString; virtual;
    function get_labels: AnsiString; virtual;
    procedure set_labels(const labels: AnsiString); virtual;
    procedure set_wiki_text(const wiki: AnsiString); virtual;
    procedure set_name(const name: AnsiString); virtual;
    procedure add_metadata(const metas: TServerGate_Contents_MetadataEntityList); virtual;
    procedure add_attachment(const name: AnsiString; const byte_stream: TServerGate_Contents_ByteBuffer; const content_type: AnsiString); virtual;
    procedure simulate_viewpage_action(const current_user_password: AnsiString); virtual;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  end;

  {** servant for interface IDL:garant.ru/ServerGate/Contents/KPage:1.0} 
  TServerGate_Contents_KPage_serv = class(TPOAStaticImplementation,IPOAStaticImplementation,IServant,IServerGate_Contents_KPage)
  protected
    function get_name: AnsiString; virtual; abstract;
    function get_id: TServerGate_Contents_PageId; virtual; abstract;
    procedure _free; virtual; abstract;
    function get_metadata(const name: AnsiString): AnsiString; virtual; abstract;
    procedure set_metadata(const name: AnsiString; const value: AnsiString); virtual; abstract;
    procedure append_wiki_text(const text: AnsiString); virtual; abstract;
    function get_wiki_text: AnsiString; virtual; abstract;
    function get_labels: AnsiString; virtual; abstract;
    procedure set_labels(const labels: AnsiString); virtual; abstract;
    procedure set_wiki_text(const wiki: AnsiString); virtual; abstract;
    procedure set_name(const name: AnsiString); virtual; abstract;
    procedure add_metadata(const metas: TServerGate_Contents_MetadataEntityList); virtual; abstract;
    procedure add_attachment(const name: AnsiString; const byte_stream: TServerGate_Contents_ByteBuffer; const content_type: AnsiString); virtual; abstract;
    procedure simulate_viewpage_action(const current_user_password: AnsiString); virtual; abstract;
    function _primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID; override;
    function _make_stub(const poa: IPOA; const obj : IORBObject): IORBObject; override;
    function _is_a(const repoid: RepositoryID): Boolean; override;
    procedure invoke(const serv: IStaticServerRequest); override;
    function _dispatch(const req: IStaticServerRequest): Boolean;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    function _this(): IServerGate_Contents_KPage;
    class function _narrow(const srv : IServant): IServerGate_Contents_KPage;
  end;

  TServerGate_Contents_KPage_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

  {** IDL:garant.ru/ServerGate/Contents/KPageFactoryManagerSrv:1.0 } 
  TServerGate_Contents_KPageFactoryManagerSrv = class(TORBObject,IServerGate_Contents_KPageFactoryManagerSrv)
  protected
    function _create(const name: AnsiString; const parent: IServerGate_Contents_KPage): IServerGate_Contents_KPage; virtual; abstract;
    function get(const page_id: TServerGate_Contents_PageId): IServerGate_Contents_KPage; virtual; abstract;
    function get_by_name_and_space(const name: AnsiString; const spacekey: AnsiString): IServerGate_Contents_KPage; virtual; abstract;
    function get_by_model_element_guid(const guid: AnsiString): IServerGate_Contents_KPage; virtual; abstract;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    class function _narrow(const obj : IORBObject): IServerGate_Contents_KPageFactoryManagerSrv;
    class function narrow_helper2(const obj: IORBObject): Boolean;
  end;

  {** stub for interface IDL:garant.ru/ServerGate/Contents/KPageFactoryManagerSrv:1.0} 
  TServerGate_Contents_KPageFactoryManagerSrv_stub = class(TServerGate_Contents_KPageFactoryManagerSrv)
  protected
    function _create(const name: AnsiString; const parent: IServerGate_Contents_KPage): IServerGate_Contents_KPage; override;
    function get(const page_id: TServerGate_Contents_PageId): IServerGate_Contents_KPage; override;
    function get_by_name_and_space(const name: AnsiString; const spacekey: AnsiString): IServerGate_Contents_KPage; override;
    function get_by_model_element_guid(const guid: AnsiString): IServerGate_Contents_KPage; override;
  end;

  {** POA stub for interface IDL:garant.ru/ServerGate/Contents/KPageFactoryManagerSrv:1.0} 
  TServerGate_Contents_KPageFactoryManagerSrv_stub_clp = class(TPOAStub,IPOAStub,IServerGate_Contents_KPageFactoryManagerSrv)
  protected
    function _create(const name: AnsiString; const parent: IServerGate_Contents_KPage): IServerGate_Contents_KPage; virtual;
    function get(const page_id: TServerGate_Contents_PageId): IServerGate_Contents_KPage; virtual;
    function get_by_name_and_space(const name: AnsiString; const spacekey: AnsiString): IServerGate_Contents_KPage; virtual;
    function get_by_model_element_guid(const guid: AnsiString): IServerGate_Contents_KPage; virtual;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  end;

  {** servant for interface IDL:garant.ru/ServerGate/Contents/KPageFactoryManagerSrv:1.0} 
  TServerGate_Contents_KPageFactoryManagerSrv_serv = class(TPOAStaticImplementation,IPOAStaticImplementation,IServant,IServerGate_Contents_KPageFactoryManagerSrv)
  protected
    function _create(const name: AnsiString; const parent: IServerGate_Contents_KPage): IServerGate_Contents_KPage; virtual; abstract;
    function get(const page_id: TServerGate_Contents_PageId): IServerGate_Contents_KPage; virtual; abstract;
    function get_by_name_and_space(const name: AnsiString; const spacekey: AnsiString): IServerGate_Contents_KPage; virtual; abstract;
    function get_by_model_element_guid(const guid: AnsiString): IServerGate_Contents_KPage; virtual; abstract;
    function _primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID; override;
    function _make_stub(const poa: IPOA; const obj : IORBObject): IORBObject; override;
    function _is_a(const repoid: RepositoryID): Boolean; override;
    procedure invoke(const serv: IStaticServerRequest); override;
    function _dispatch(const req: IStaticServerRequest): Boolean;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    function _this(): IServerGate_Contents_KPageFactoryManagerSrv;
    class function _narrow(const srv : IServant): IServerGate_Contents_KPageFactoryManagerSrv;
  end;

  TServerGate_Contents_KPageFactoryManagerSrv_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

  TServerGate_Contents_RequestImportance_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

  TServerGate_Contents_RequestType_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

  TServerGate_Contents_PageIsNotRequest_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

  {** IDL:garant.ru/ServerGate/Contents/PageIsNotRequest:1.0 } 
  TServerGate_Contents_PageIsNotRequest = class(UserException,IServerGate_Contents_PageIsNotRequest)
  protected
    procedure throw; override;
    function clone(): IORBException; override;
    function repoid(): RepositoryID; override;
    procedure encode(const enc: IEncoder); override;
    procedure encode_any(const a: IAny); override;
  public
    constructor Create(ex: TServerGate_Contents_PageIsNotRequest); overload;
    constructor Create(); overload;
  end;

  TServerGate_Contents_CantChangeState_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

  {** IDL:garant.ru/ServerGate/Contents/CantChangeState:1.0 } 
  TServerGate_Contents_CantChangeState = class(UserException,IServerGate_Contents_CantChangeState)
  protected
    procedure throw; override;
    function clone(): IORBException; override;
    function repoid(): RepositoryID; override;
    procedure encode(const enc: IEncoder); override;
    procedure encode_any(const a: IAny); override;
  public
    constructor Create(ex: TServerGate_Contents_CantChangeState); overload;
    constructor Create(); overload;
  end;

  {** IDL:garant.ru/ServerGate/Contents/Request:1.0 } 
  TServerGate_Contents_Request = class(TServerGate_Contents_KPage,IServerGate_Contents_Request)
  protected
    function get_state: AnsiString; virtual; abstract;
    procedure post_event(const event: AnsiString); virtual; abstract;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    class function _narrow(const obj : IORBObject): IServerGate_Contents_Request;
    class function narrow_helper2(const obj: IORBObject): Boolean;
  end;

  {** stub for interface IDL:garant.ru/ServerGate/Contents/Request:1.0} 
  TServerGate_Contents_Request_stub = class(TServerGate_Contents_Request)
  protected
    function get_name: AnsiString; override;
    function get_id: TServerGate_Contents_PageId; override;
    procedure _free; override;
    function get_metadata(const name: AnsiString): AnsiString; override;
    procedure set_metadata(const name: AnsiString; const value: AnsiString); override;
    procedure append_wiki_text(const text: AnsiString); override;
    function get_wiki_text: AnsiString; override;
    function get_labels: AnsiString; override;
    procedure set_labels(const labels: AnsiString); override;
    procedure set_wiki_text(const wiki: AnsiString); override;
    procedure set_name(const name: AnsiString); override;
    procedure add_metadata(const metas: TServerGate_Contents_MetadataEntityList); override;
    procedure add_attachment(const name: AnsiString; const byte_stream: TServerGate_Contents_ByteBuffer; const content_type: AnsiString); override;
    procedure simulate_viewpage_action(const current_user_password: AnsiString); override;
    function get_state: AnsiString; override;
    procedure post_event(const event: AnsiString); override;
  end;

  {** POA stub for interface IDL:garant.ru/ServerGate/Contents/Request:1.0} 
  TServerGate_Contents_Request_stub_clp = class(TServerGate_Contents_KPage_stub_clp,IServerGate_Contents_Request)
  protected
    function get_state: AnsiString; virtual;
    procedure post_event(const event: AnsiString); virtual;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  end;

  {** servant for interface IDL:garant.ru/ServerGate/Contents/Request:1.0} 
  TServerGate_Contents_Request_serv = class(TServerGate_Contents_KPage_serv,IServerGate_Contents_Request)
  protected
    function get_state: AnsiString; virtual; abstract;
    procedure post_event(const event: AnsiString); virtual; abstract;
    function _primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID; override;
    function _make_stub(const poa: IPOA; const obj : IORBObject): IORBObject; override;
    function _is_a(const repoid: RepositoryID): Boolean; override;
    procedure invoke(const serv: IStaticServerRequest); override;
    function _dispatch(const req: IStaticServerRequest): Boolean;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    function _this(): IServerGate_Contents_Request;
    class function _narrow(const srv : IServant): IServerGate_Contents_Request;
  end;

  TServerGate_Contents_Request_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

  {** IDL:garant.ru/ServerGate/Contents/RequestFactoryManagerSrv:1.0 } 
  TServerGate_Contents_RequestFactoryManagerSrv = class(TORBObject,IServerGate_Contents_RequestFactoryManagerSrv)
  protected
    function get_by_name_and_space(const name: AnsiString; const spacekey: AnsiString): IServerGate_Contents_Request; virtual; abstract;
    function get(const page_id: TServerGate_Contents_PageId): IServerGate_Contents_Request; virtual; abstract;
    function _create(const _type: TServerGate_Contents_RequestType; const importance: TServerGate_Contents_RequestImportance; const name: AnsiString; const parent: IServerGate_Contents_KPage): IServerGate_Contents_Request; virtual; abstract;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    class function _narrow(const obj : IORBObject): IServerGate_Contents_RequestFactoryManagerSrv;
    class function narrow_helper2(const obj: IORBObject): Boolean;
  end;

  {** stub for interface IDL:garant.ru/ServerGate/Contents/RequestFactoryManagerSrv:1.0} 
  TServerGate_Contents_RequestFactoryManagerSrv_stub = class(TServerGate_Contents_RequestFactoryManagerSrv)
  protected
    function get_by_name_and_space(const name: AnsiString; const spacekey: AnsiString): IServerGate_Contents_Request; override;
    function get(const page_id: TServerGate_Contents_PageId): IServerGate_Contents_Request; override;
    function _create(const _type: TServerGate_Contents_RequestType; const importance: TServerGate_Contents_RequestImportance; const name: AnsiString; const parent: IServerGate_Contents_KPage): IServerGate_Contents_Request; override;
  end;

  {** POA stub for interface IDL:garant.ru/ServerGate/Contents/RequestFactoryManagerSrv:1.0} 
  TServerGate_Contents_RequestFactoryManagerSrv_stub_clp = class(TPOAStub,IPOAStub,IServerGate_Contents_RequestFactoryManagerSrv)
  protected
    function get_by_name_and_space(const name: AnsiString; const spacekey: AnsiString): IServerGate_Contents_Request; virtual;
    function get(const page_id: TServerGate_Contents_PageId): IServerGate_Contents_Request; virtual;
    function _create(const _type: TServerGate_Contents_RequestType; const importance: TServerGate_Contents_RequestImportance; const name: AnsiString; const parent: IServerGate_Contents_KPage): IServerGate_Contents_Request; virtual;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  end;

  {** servant for interface IDL:garant.ru/ServerGate/Contents/RequestFactoryManagerSrv:1.0} 
  TServerGate_Contents_RequestFactoryManagerSrv_serv = class(TPOAStaticImplementation,IPOAStaticImplementation,IServant,IServerGate_Contents_RequestFactoryManagerSrv)
  protected
    function get_by_name_and_space(const name: AnsiString; const spacekey: AnsiString): IServerGate_Contents_Request; virtual; abstract;
    function get(const page_id: TServerGate_Contents_PageId): IServerGate_Contents_Request; virtual; abstract;
    function _create(const _type: TServerGate_Contents_RequestType; const importance: TServerGate_Contents_RequestImportance; const name: AnsiString; const parent: IServerGate_Contents_KPage): IServerGate_Contents_Request; virtual; abstract;
    function _primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID; override;
    function _make_stub(const poa: IPOA; const obj : IORBObject): IORBObject; override;
    function _is_a(const repoid: RepositoryID): Boolean; override;
    procedure invoke(const serv: IStaticServerRequest); override;
    function _dispatch(const req: IStaticServerRequest): Boolean;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    function _this(): IServerGate_Contents_RequestFactoryManagerSrv;
    class function _narrow(const srv : IServant): IServerGate_Contents_RequestFactoryManagerSrv;
  end;

  TServerGate_Contents_RequestFactoryManagerSrv_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

var
  ServerGate_Contents_PageNotFound_marshaller : IStaticTypeInfo;
  ServerGate_Contents_CantCreatePage_marshaller : IStaticTypeInfo;
  ServerGate_Contents_PermissionException_marshaller : IStaticTypeInfo;
  ServerGate_Contents_MetadataEntity_marshaller : IStaticTypeInfo;
  ServerGate_Contents_MetadataEntity_seq_marshaller : IStaticTypeInfo;
  ServerGate_Contents_KPage_marshaller : IStaticTypeInfo;
  ServerGate_Contents_KPageFactoryManagerSrv_marshaller : IStaticTypeInfo;
  ServerGate_Contents_RequestImportance_marshaller : IStaticTypeInfo;
  ServerGate_Contents_RequestType_marshaller : IStaticTypeInfo;
  ServerGate_Contents_PageIsNotRequest_marshaller : IStaticTypeInfo;
  ServerGate_Contents_CantChangeState_marshaller : IStaticTypeInfo;
  ServerGate_Contents_Request_marshaller : IStaticTypeInfo;
  ServerGate_Contents_RequestFactoryManagerSrv_marshaller : IStaticTypeInfo;
  _tc_ServerGate_Contents_PageNotFound : ITypeCodeConst;
  _tc_ServerGate_Contents_CantCreatePage : ITypeCodeConst;
  _tc_ServerGate_Contents_PermissionException : ITypeCodeConst;
  _tc_ServerGate_Contents_MetadataEntity : ITypeCodeConst;
  _tc_ServerGate_Contents_MetadataEntity_seq : ITypeCodeConst;
  _tc_ServerGate_Contents_KPage : ITypeCodeConst;
  _tc_ServerGate_Contents_KPageFactoryManagerSrv : ITypeCodeConst;
  _tc_ServerGate_Contents_RequestImportance : ITypeCodeConst;
  _tc_ServerGate_Contents_RequestType : ITypeCodeConst;
  _tc_ServerGate_Contents_PageIsNotRequest : ITypeCodeConst;
  _tc_ServerGate_Contents_CantChangeState : ITypeCodeConst;
  _tc_ServerGate_Contents_Request : ITypeCodeConst;
  _tc_ServerGate_Contents_RequestFactoryManagerSrv : ITypeCodeConst;

implementation

uses
  SysUtils, any, tcode, static, throw;

//***********************************************************
// TServerGate_Contents_PageNotFound_marshaller
//***********************************************************
function TServerGate_Contents_PageNotFound_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  repoid: RepositoryId;
begin
  result := false;
  if not dec.except_begin(repoid) then exit;
  if not dec.except_end then exit;
  result := true;
end;

procedure TServerGate_Contents_PageNotFound_marshaller.marshal(enc: IEncoder;const addr : Pointer);
begin
  enc.except_begin('IDL:garant.ru/ServerGate/Contents/PageNotFound:1.0');
  enc.except_end;
end;

procedure TServerGate_Contents_PageNotFound_marshaller._free(var addr: Pointer);
begin
  IServerGate_Contents_PageNotFound(addr^) := nil;
end;

procedure TServerGate_Contents_PageNotFound_marshaller._create(var addr: Pointer);
begin
  IServerGate_Contents_PageNotFound(addr^) := TServerGate_Contents_PageNotFound.Create();
end;

procedure TServerGate_Contents_PageNotFound_marshaller._assign(dst, src: Pointer);
begin
  IServerGate_Contents_PageNotFound(dst^) := IServerGate_Contents_PageNotFound(src^);
end;

function TServerGate_Contents_PageNotFound_marshaller.typecode: ITypeCode;
begin
  result := _tc_ServerGate_Contents_PageNotFound.typecode;
end;

//***********************************************************
// TServerGate_Contents_PageNotFound
//***********************************************************
constructor TServerGate_Contents_PageNotFound.Create(ex: TServerGate_Contents_PageNotFound);
begin
  inherited Create();
end;

procedure TServerGate_Contents_PageNotFound.throw;
begin
  raise TServerGate_Contents_PageNotFound.Create(self);
end;

function TServerGate_Contents_PageNotFound.clone(): IORBException;
begin
  result := TServerGate_Contents_PageNotFound.Create(self);
end;

procedure TServerGate_Contents_PageNotFound.encode(const enc: IEncoder);
var
  int : IServerGate_Contents_PageNotFound;
begin
  int := self;
  ServerGate_Contents_PageNotFound_marshaller.marshal(enc,@int);
end;

procedure TServerGate_Contents_PageNotFound.encode_any(const a: IAny);
var
  stat: IStaticAny;
begin
  stat := StaticAny(ServerGate_Contents_PageNotFound_marshaller, Self);
  a.from_static_any(stat);
end;

constructor TServerGate_Contents_PageNotFound.Create();
begin
  inherited Create();
end;

function TServerGate_Contents_PageNotFound.repoid(): RepositoryID;
begin
  result := 'IDL:garant.ru/ServerGate/Contents/PageNotFound:1.0';
end;

//***********************************************************
// TServerGate_Contents_CantCreatePage_marshaller
//***********************************************************
function TServerGate_Contents_CantCreatePage_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  repoid: RepositoryId;
begin
  result := false;
  if not dec.except_begin(repoid) then exit;
  if not dec.except_end then exit;
  result := true;
end;

procedure TServerGate_Contents_CantCreatePage_marshaller.marshal(enc: IEncoder;const addr : Pointer);
begin
  enc.except_begin('IDL:garant.ru/ServerGate/Contents/CantCreatePage:1.0');
  enc.except_end;
end;

procedure TServerGate_Contents_CantCreatePage_marshaller._free(var addr: Pointer);
begin
  IServerGate_Contents_CantCreatePage(addr^) := nil;
end;

procedure TServerGate_Contents_CantCreatePage_marshaller._create(var addr: Pointer);
begin
  IServerGate_Contents_CantCreatePage(addr^) := TServerGate_Contents_CantCreatePage.Create();
end;

procedure TServerGate_Contents_CantCreatePage_marshaller._assign(dst, src: Pointer);
begin
  IServerGate_Contents_CantCreatePage(dst^) := IServerGate_Contents_CantCreatePage(src^);
end;

function TServerGate_Contents_CantCreatePage_marshaller.typecode: ITypeCode;
begin
  result := _tc_ServerGate_Contents_CantCreatePage.typecode;
end;

//***********************************************************
// TServerGate_Contents_CantCreatePage
//***********************************************************
constructor TServerGate_Contents_CantCreatePage.Create(ex: TServerGate_Contents_CantCreatePage);
begin
  inherited Create();
end;

procedure TServerGate_Contents_CantCreatePage.throw;
begin
  raise TServerGate_Contents_CantCreatePage.Create(self);
end;

function TServerGate_Contents_CantCreatePage.clone(): IORBException;
begin
  result := TServerGate_Contents_CantCreatePage.Create(self);
end;

procedure TServerGate_Contents_CantCreatePage.encode(const enc: IEncoder);
var
  int : IServerGate_Contents_CantCreatePage;
begin
  int := self;
  ServerGate_Contents_CantCreatePage_marshaller.marshal(enc,@int);
end;

procedure TServerGate_Contents_CantCreatePage.encode_any(const a: IAny);
var
  stat: IStaticAny;
begin
  stat := StaticAny(ServerGate_Contents_CantCreatePage_marshaller, Self);
  a.from_static_any(stat);
end;

constructor TServerGate_Contents_CantCreatePage.Create();
begin
  inherited Create();
end;

function TServerGate_Contents_CantCreatePage.repoid(): RepositoryID;
begin
  result := 'IDL:garant.ru/ServerGate/Contents/CantCreatePage:1.0';
end;

//***********************************************************
// TServerGate_Contents_PermissionException_marshaller
//***********************************************************
function TServerGate_Contents_PermissionException_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  repoid: RepositoryId;
begin
  result := false;
  if not dec.except_begin(repoid) then exit;
  if not dec.except_end then exit;
  result := true;
end;

procedure TServerGate_Contents_PermissionException_marshaller.marshal(enc: IEncoder;const addr : Pointer);
begin
  enc.except_begin('IDL:garant.ru/ServerGate/Contents/PermissionException:1.0');
  enc.except_end;
end;

procedure TServerGate_Contents_PermissionException_marshaller._free(var addr: Pointer);
begin
  IServerGate_Contents_PermissionException(addr^) := nil;
end;

procedure TServerGate_Contents_PermissionException_marshaller._create(var addr: Pointer);
begin
  IServerGate_Contents_PermissionException(addr^) := TServerGate_Contents_PermissionException.Create();
end;

procedure TServerGate_Contents_PermissionException_marshaller._assign(dst, src: Pointer);
begin
  IServerGate_Contents_PermissionException(dst^) := IServerGate_Contents_PermissionException(src^);
end;

function TServerGate_Contents_PermissionException_marshaller.typecode: ITypeCode;
begin
  result := _tc_ServerGate_Contents_PermissionException.typecode;
end;

//***********************************************************
// TServerGate_Contents_PermissionException
//***********************************************************
constructor TServerGate_Contents_PermissionException.Create(ex: TServerGate_Contents_PermissionException);
begin
  inherited Create();
end;

procedure TServerGate_Contents_PermissionException.throw;
begin
  raise TServerGate_Contents_PermissionException.Create(self);
end;

function TServerGate_Contents_PermissionException.clone(): IORBException;
begin
  result := TServerGate_Contents_PermissionException.Create(self);
end;

procedure TServerGate_Contents_PermissionException.encode(const enc: IEncoder);
var
  int : IServerGate_Contents_PermissionException;
begin
  int := self;
  ServerGate_Contents_PermissionException_marshaller.marshal(enc,@int);
end;

procedure TServerGate_Contents_PermissionException.encode_any(const a: IAny);
var
  stat: IStaticAny;
begin
  stat := StaticAny(ServerGate_Contents_PermissionException_marshaller, Self);
  a.from_static_any(stat);
end;

constructor TServerGate_Contents_PermissionException.Create();
begin
  inherited Create();
end;

function TServerGate_Contents_PermissionException.repoid(): RepositoryID;
begin
  result := 'IDL:garant.ru/ServerGate/Contents/PermissionException:1.0';
end;

//***********************************************************
// TServerGate_Contents_MetadataEntity_marshaller
//***********************************************************
function TServerGate_Contents_MetadataEntity_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  struct: Contents_int.TServerGate_Contents_MetadataEntity;
begin
  result := false;
  if not stat_string.demarshal(dec,@struct.key) then exit;
  if not stat_string.demarshal(dec,@struct.value) then exit;
  Contents_int.TServerGate_Contents_MetadataEntity(addr^) := struct;
  result := true;
end;

procedure TServerGate_Contents_MetadataEntity_marshaller.marshal(enc: IEncoder;const addr : Pointer);
var
  struct: Contents_int.TServerGate_Contents_MetadataEntity;
begin
  struct := Contents_int.TServerGate_Contents_MetadataEntity(addr^);
  stat_string.marshal(enc,@struct.key);
  stat_string.marshal(enc,@struct.value);
end;

procedure TServerGate_Contents_MetadataEntity_marshaller._free(var addr: Pointer);
begin
{$HINTS OFF}
  System.Finalize(Contents_int.TServerGate_Contents_MetadataEntity(addr^));
{$HINTS ON}
  FreeMem(addr);
end;

procedure TServerGate_Contents_MetadataEntity_marshaller._create(var addr: Pointer);
begin
  addr := AllocMem(sizeOf(Contents_int.TServerGate_Contents_MetadataEntity));
{$HINTS OFF}
  System.Initialize(Contents_int.TServerGate_Contents_MetadataEntity(addr^));
{$HINTS ON}
end;

procedure TServerGate_Contents_MetadataEntity_marshaller._assign(dst, src: Pointer);
begin
  Contents_int.TServerGate_Contents_MetadataEntity(dst^) := Contents_int.TServerGate_Contents_MetadataEntity(src^);
end;

function TServerGate_Contents_MetadataEntity_marshaller.typecode: ITypeCode;
begin
  result := _tc_ServerGate_Contents_MetadataEntity.typecode;
end;

//***********************************************************
// TServerGate_Contents_MetadataEntity_seq_marshaller
//***********************************************************

function TServerGate_Contents_MetadataEntity_seq_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  len: _ulong;
  i: integer;
  val: TServerGate_Contents_MetadataEntity;
begin
  result := false;
  if not dec.seq_begin(len) then exit;
  SetLength(ServerGate_Contents_MetadataEntity_seq(addr^),len);
  if len <> 0 then
    for i := 0 to Pred(len) do
      begin
        if not ServerGate_Contents_MetadataEntity_marshaller.demarshal(dec,@val) then exit;
        ServerGate_Contents_MetadataEntity_seq(addr^)[i] := val; 
      end;
  if not dec.seq_end() then exit;
  result := true;
end;

procedure TServerGate_Contents_MetadataEntity_seq_marshaller.marshal(enc: IEncoder;const addr : Pointer);
var
  len: _ulong;
  i: integer;
begin
  len := Length(ServerGate_Contents_MetadataEntity_seq(addr^));
  enc.seq_begin(len);
  if len <> 0 then
    for i := 0 to Pred(len) do
      ServerGate_Contents_MetadataEntity_marshaller.marshal(enc,@ServerGate_Contents_MetadataEntity_seq(addr^)[i]);
  enc.seq_end;
end;

procedure TServerGate_Contents_MetadataEntity_seq_marshaller._free(var addr: Pointer);
begin
  setLength(ServerGate_Contents_MetadataEntity_seq(addr^),0);
  freemem(addr);
end;

procedure TServerGate_Contents_MetadataEntity_seq_marshaller._create(var addr: Pointer);
begin
  addr := allocmem(sizeOf(_ulong));
end;

procedure TServerGate_Contents_MetadataEntity_seq_marshaller._assign(dst, src: Pointer);
begin
  _ulong(dst^) := _ulong(src^);
end;

function TServerGate_Contents_MetadataEntity_seq_marshaller.typecode: ITypeCode;
begin
  result := _tc_ServerGate_Contents_MetadataEntity_seq.typecode;
end;

//***********************************************************
// TServerGate_Contents_KPage
//***********************************************************
function TServerGate_Contents_KPage.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:garant.ru/ServerGate/Contents/KPage:1.0' then
    begin
      result := Pointer(self as IServerGate_Contents_KPage);
      exit;
    end;
end;

class function TServerGate_Contents_KPage._narrow(const obj : IORBObject): IServerGate_Contents_KPage;
var
  p: Pointer;
  stub: TServerGate_Contents_KPage_stub;
begin
  result := nil;
  if obj = nil then exit;
  p := obj.narrow_helper('IDL:garant.ru/ServerGate/Contents/KPage:1.0');
  if p <> nil then
    result := IServerGate_Contents_KPage(p)
  else
    begin
      if narrow_helper2(obj) or obj._is_a_remote('IDL:garant.ru/ServerGate/Contents/KPage:1.0') then
        begin
          stub := TServerGate_Contents_KPage_stub.Create();
          stub.assign(obj);
          result := stub;
        end;
    end;
end;

class function TServerGate_Contents_KPage.narrow_helper2(const obj: IORBObject): Boolean;
begin
  result := obj._repoid = 'IDL:garant.ru/ServerGate/Contents/KPage:1.0'
end;

//***********************************************************
// TServerGate_Contents_KPage_stub
//***********************************************************
function TServerGate_Contents_KPage_stub.get_name: AnsiString;
var
  req: IStaticRequest;
  _result: IStaticAny;
begin
  _result := StaticAny(stat_string, @result);
  req := StaticRequest(self,'get_name');
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

function TServerGate_Contents_KPage_stub.get_id: TServerGate_Contents_PageId;
var
  req: IStaticRequest;
  _result: IStaticAny;
begin
  _result := StaticAny(stat_longlong, @result);
  req := StaticRequest(self,'get_id');
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

procedure TServerGate_Contents_KPage_stub._free;
var
  req: IStaticRequest;
begin
  req := StaticRequest(self,'free');
  req.set_exceptions_tc([_tc_CoreSrv_ForeignObject.typecode]);
  req.invoke;
  dorb_static_throw(req,[CoreSrv_ForeignObject_marshaller, 'IDL:garant.ru/CoreSrv/ForeignObject:1.0']);
end;

function TServerGate_Contents_KPage_stub.get_metadata(const name: AnsiString): AnsiString;
var
  req: IStaticRequest;
  _name: IStaticAny;
  _result: IStaticAny;
begin
  _name := StaticAny(stat_string,@name);
  _result := StaticAny(stat_string, @result);
  req := StaticRequest(self,'get_metadata');
  req.add_in_arg(_name);
  req.set_result(_result);
  req.set_exceptions_tc([_tc_ServerGate_Contents_PermissionException.typecode]);
  req.invoke;
  dorb_static_throw(req,[ServerGate_Contents_PermissionException_marshaller, 'IDL:garant.ru/ServerGate/Contents/PermissionException:1.0']);
end;

procedure TServerGate_Contents_KPage_stub.set_metadata(const name: AnsiString; const value: AnsiString);
var
  req: IStaticRequest;
  _name: IStaticAny;
  _value: IStaticAny;
begin
  _name := StaticAny(stat_string,@name);
  _value := StaticAny(stat_string,@value);
  req := StaticRequest(self,'set_metadata');
  req.add_in_arg(_name);
  req.add_in_arg(_value);
  req.set_exceptions_tc([_tc_ServerGate_Contents_PermissionException.typecode]);
  req.invoke;
  dorb_static_throw(req,[ServerGate_Contents_PermissionException_marshaller, 'IDL:garant.ru/ServerGate/Contents/PermissionException:1.0']);
end;

procedure TServerGate_Contents_KPage_stub.append_wiki_text(const text: AnsiString);
var
  req: IStaticRequest;
  _text: IStaticAny;
begin
  _text := StaticAny(stat_string,@text);
  req := StaticRequest(self,'append_wiki_text');
  req.add_in_arg(_text);
  req.set_exceptions_tc([_tc_ServerGate_Contents_PermissionException.typecode]);
  req.invoke;
  dorb_static_throw(req,[ServerGate_Contents_PermissionException_marshaller, 'IDL:garant.ru/ServerGate/Contents/PermissionException:1.0']);
end;

function TServerGate_Contents_KPage_stub.get_wiki_text: AnsiString;
var
  req: IStaticRequest;
  _result: IStaticAny;
begin
  _result := StaticAny(stat_string, @result);
  req := StaticRequest(self,'get_wiki_text');
  req.set_result(_result);
  req.set_exceptions_tc([_tc_ServerGate_Contents_PermissionException.typecode]);
  req.invoke;
  dorb_static_throw(req,[ServerGate_Contents_PermissionException_marshaller, 'IDL:garant.ru/ServerGate/Contents/PermissionException:1.0']);
end;

function TServerGate_Contents_KPage_stub.get_labels: AnsiString;
var
  req: IStaticRequest;
  _result: IStaticAny;
begin
  _result := StaticAny(stat_string, @result);
  req := StaticRequest(self,'get_labels');
  req.set_result(_result);
  req.set_exceptions_tc([_tc_ServerGate_Contents_PermissionException.typecode]);
  req.invoke;
  dorb_static_throw(req,[ServerGate_Contents_PermissionException_marshaller, 'IDL:garant.ru/ServerGate/Contents/PermissionException:1.0']);
end;

procedure TServerGate_Contents_KPage_stub.set_labels(const labels: AnsiString);
var
  req: IStaticRequest;
  _labels: IStaticAny;
begin
  _labels := StaticAny(stat_string,@labels);
  req := StaticRequest(self,'set_labels');
  req.add_in_arg(_labels);
  req.set_exceptions_tc([_tc_ServerGate_Contents_PermissionException.typecode]);
  req.invoke;
  dorb_static_throw(req,[ServerGate_Contents_PermissionException_marshaller, 'IDL:garant.ru/ServerGate/Contents/PermissionException:1.0']);
end;

procedure TServerGate_Contents_KPage_stub.set_wiki_text(const wiki: AnsiString);
var
  req: IStaticRequest;
  _wiki: IStaticAny;
begin
  _wiki := StaticAny(stat_string,@wiki);
  req := StaticRequest(self,'set_wiki_text');
  req.add_in_arg(_wiki);
  req.set_exceptions_tc([_tc_ServerGate_Contents_PermissionException.typecode]);
  req.invoke;
  dorb_static_throw(req,[ServerGate_Contents_PermissionException_marshaller, 'IDL:garant.ru/ServerGate/Contents/PermissionException:1.0']);
end;

procedure TServerGate_Contents_KPage_stub.set_name(const name: AnsiString);
var
  req: IStaticRequest;
  _name: IStaticAny;
begin
  _name := StaticAny(stat_string,@name);
  req := StaticRequest(self,'set_name');
  req.add_in_arg(_name);
  req.set_exceptions_tc([_tc_ServerGate_Contents_PermissionException.typecode]);
  req.invoke;
  dorb_static_throw(req,[ServerGate_Contents_PermissionException_marshaller, 'IDL:garant.ru/ServerGate/Contents/PermissionException:1.0']);
end;

procedure TServerGate_Contents_KPage_stub.add_metadata(const metas: TServerGate_Contents_MetadataEntityList);
var
  req: IStaticRequest;
  _metas: IStaticAny;
begin
  _metas := StaticAny(ServerGate_Contents_MetadataEntity_seq_marshaller,@metas);
  req := StaticRequest(self,'add_metadata');
  req.add_in_arg(_metas);
  req.set_exceptions_tc([_tc_ServerGate_Contents_PermissionException.typecode]);
  req.invoke;
  dorb_static_throw(req,[ServerGate_Contents_PermissionException_marshaller, 'IDL:garant.ru/ServerGate/Contents/PermissionException:1.0']);
end;

procedure TServerGate_Contents_KPage_stub.add_attachment(const name: AnsiString; const byte_stream: TServerGate_Contents_ByteBuffer; const content_type: AnsiString);
var
  req: IStaticRequest;
  _name: IStaticAny;
  _byte_stream: IStaticAny;
  _content_type: IStaticAny;
begin
  _name := StaticAny(stat_string,@name);
  _byte_stream := StaticAny(stat_seq_octet,@byte_stream);
  _content_type := StaticAny(stat_string,@content_type);
  req := StaticRequest(self,'add_attachment');
  req.add_in_arg(_name);
  req.add_in_arg(_byte_stream);
  req.add_in_arg(_content_type);
  req.set_exceptions_tc([_tc_ServerGate_Contents_PermissionException.typecode]);
  req.invoke;
  dorb_static_throw(req,[ServerGate_Contents_PermissionException_marshaller, 'IDL:garant.ru/ServerGate/Contents/PermissionException:1.0']);
end;

procedure TServerGate_Contents_KPage_stub.simulate_viewpage_action(const current_user_password: AnsiString);
var
  req: IStaticRequest;
  _current_user_password: IStaticAny;
begin
  _current_user_password := StaticAny(stat_string,@current_user_password);
  req := StaticRequest(self,'simulate_viewpage_action');
  req.add_in_arg(_current_user_password);
  req.invoke;
  dorb_static_throw(req);
end;

//***********************************************************
// TServerGate_Contents_KPage_stub_clp
//***********************************************************
function TServerGate_Contents_KPage_stub_clp.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:garant.ru/ServerGate/Contents/KPage:1.0' then
    begin
      result := Pointer(self as IServerGate_Contents_KPage);
      exit;
  end;
end;

function TServerGate_Contents_KPage_stub_clp.get_name: AnsiString;
var
  _srv: IServant;
  srv: IServerGate_Contents_KPage;
begin
  result := '';
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TServerGate_Contents_KPage_serv._narrow(_srv);
      if srv <> nil then
        result := srv.get_name
    end;
  _postinvoke();
end;

function TServerGate_Contents_KPage_stub_clp.get_id: TServerGate_Contents_PageId;
var
  _srv: IServant;
  srv: IServerGate_Contents_KPage;
begin
  result := 0;
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TServerGate_Contents_KPage_serv._narrow(_srv);
      if srv <> nil then
        result := srv.get_id
    end;
  _postinvoke();
end;

procedure TServerGate_Contents_KPage_stub_clp._free;
var
  _srv: IServant;
  srv: IServerGate_Contents_KPage;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TServerGate_Contents_KPage_serv._narrow(_srv);
      if srv <> nil then
        srv._free
    end;
  _postinvoke();
end;

function TServerGate_Contents_KPage_stub_clp.get_metadata(const name: AnsiString): AnsiString;
var
  _srv: IServant;
  srv: IServerGate_Contents_KPage;
begin
  result := '';
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TServerGate_Contents_KPage_serv._narrow(_srv);
      if srv <> nil then
        result := srv.get_metadata(name)
    end;
  _postinvoke();
end;

procedure TServerGate_Contents_KPage_stub_clp.set_metadata(const name: AnsiString; const value: AnsiString);
var
  _srv: IServant;
  srv: IServerGate_Contents_KPage;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TServerGate_Contents_KPage_serv._narrow(_srv);
      if srv <> nil then
        srv.set_metadata(name, value)
    end;
  _postinvoke();
end;

procedure TServerGate_Contents_KPage_stub_clp.append_wiki_text(const text: AnsiString);
var
  _srv: IServant;
  srv: IServerGate_Contents_KPage;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TServerGate_Contents_KPage_serv._narrow(_srv);
      if srv <> nil then
        srv.append_wiki_text(text)
    end;
  _postinvoke();
end;

function TServerGate_Contents_KPage_stub_clp.get_wiki_text: AnsiString;
var
  _srv: IServant;
  srv: IServerGate_Contents_KPage;
begin
  result := '';
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TServerGate_Contents_KPage_serv._narrow(_srv);
      if srv <> nil then
        result := srv.get_wiki_text
    end;
  _postinvoke();
end;

function TServerGate_Contents_KPage_stub_clp.get_labels: AnsiString;
var
  _srv: IServant;
  srv: IServerGate_Contents_KPage;
begin
  result := '';
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TServerGate_Contents_KPage_serv._narrow(_srv);
      if srv <> nil then
        result := srv.get_labels
    end;
  _postinvoke();
end;

procedure TServerGate_Contents_KPage_stub_clp.set_labels(const labels: AnsiString);
var
  _srv: IServant;
  srv: IServerGate_Contents_KPage;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TServerGate_Contents_KPage_serv._narrow(_srv);
      if srv <> nil then
        srv.set_labels(labels)
    end;
  _postinvoke();
end;

procedure TServerGate_Contents_KPage_stub_clp.set_wiki_text(const wiki: AnsiString);
var
  _srv: IServant;
  srv: IServerGate_Contents_KPage;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TServerGate_Contents_KPage_serv._narrow(_srv);
      if srv <> nil then
        srv.set_wiki_text(wiki)
    end;
  _postinvoke();
end;

procedure TServerGate_Contents_KPage_stub_clp.set_name(const name: AnsiString);
var
  _srv: IServant;
  srv: IServerGate_Contents_KPage;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TServerGate_Contents_KPage_serv._narrow(_srv);
      if srv <> nil then
        srv.set_name(name)
    end;
  _postinvoke();
end;

procedure TServerGate_Contents_KPage_stub_clp.add_metadata(const metas: TServerGate_Contents_MetadataEntityList);
var
  _srv: IServant;
  srv: IServerGate_Contents_KPage;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TServerGate_Contents_KPage_serv._narrow(_srv);
      if srv <> nil then
        srv.add_metadata(metas)
    end;
  _postinvoke();
end;

procedure TServerGate_Contents_KPage_stub_clp.add_attachment(const name: AnsiString; const byte_stream: TServerGate_Contents_ByteBuffer; const content_type: AnsiString);
var
  _srv: IServant;
  srv: IServerGate_Contents_KPage;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TServerGate_Contents_KPage_serv._narrow(_srv);
      if srv <> nil then
        srv.add_attachment(name, byte_stream, content_type)
    end;
  _postinvoke();
end;

procedure TServerGate_Contents_KPage_stub_clp.simulate_viewpage_action(const current_user_password: AnsiString);
var
  _srv: IServant;
  srv: IServerGate_Contents_KPage;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TServerGate_Contents_KPage_serv._narrow(_srv);
      if srv <> nil then
        srv.simulate_viewpage_action(current_user_password)
    end;
  _postinvoke();
end;

//***********************************************************
// TServerGate_Contents_KPage_serv
//***********************************************************
function TServerGate_Contents_KPage_serv._this(): IServerGate_Contents_KPage;
var
  obj: IORBObject;
begin
  obj := this();
  result := TServerGate_Contents_KPage._narrow(obj);
end;

function TServerGate_Contents_KPage_serv._is_a(const repoid: RepositoryID): Boolean;
begin
  result := repoid = 'IDL:garant.ru/ServerGate/Contents/KPage:1.0';
end;

function TServerGate_Contents_KPage_serv._primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID;
begin
  result := 'IDL:garant.ru/ServerGate/Contents/KPage:1.0';
end;

function TServerGate_Contents_KPage_serv._make_stub(const poa: IPOA; const obj : IORBObject): IORBObject;
begin
  result := TServerGate_Contents_KPage_stub_clp.Create(poa,obj);
end;

procedure TServerGate_Contents_KPage_serv.invoke(const serv: IStaticServerRequest);
begin
  if not _dispatch(serv) then
    begin
      serv.set_exception(BAD_OPERATION.Create(0, COMPLETED_NO) as IORBException);
      serv.write_results();
    end;
end;

function TServerGate_Contents_KPage_serv.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:garant.ru/ServerGate/Contents/KPage:1.0' then
    begin
      result := Pointer(IServerGate_Contents_KPage(self));
      exit;
    end;
end;

class function TServerGate_Contents_KPage_serv._narrow(const srv : IServant): IServerGate_Contents_KPage;
var
  p: Pointer;
begin
  result := nil;
  if srv = nil then exit;
  p := srv.narrow_helper('IDL:garant.ru/ServerGate/Contents/KPage:1.0');
  if p <> nil then
    result := IServerGate_Contents_KPage(p)
end;

function TServerGate_Contents_KPage_serv._dispatch(const req: IStaticServerRequest): Boolean;
var
  get_name_result: AnsiString;
  get_id_result: TServerGate_Contents_PageId;
  get_metadata_result: AnsiString;
  get_metadata_name: AnsiString;
  set_metadata_name: AnsiString;
  set_metadata_value: AnsiString;
  append_wiki_text_text: AnsiString;
  get_wiki_text_result: AnsiString;
  get_labels_result: AnsiString;
  set_labels_labels: AnsiString;
  set_wiki_text_wiki: AnsiString;
  set_name_name: AnsiString;
  add_metadata_metas: TServerGate_Contents_MetadataEntityList;
  add_attachment_name: AnsiString;
  add_attachment_byte_stream: TServerGate_Contents_ByteBuffer;
  add_attachment_content_type: AnsiString;
  simulate_viewpage_action_current_user_password: AnsiString;
begin
  result := true;
  if req.op_name = 'get_name' then
    begin
      req.set_result(StaticAny(stat_string,@get_name_result) as IStaticAny);
      if not req.read_args() then  exit;
      get_name_result := get_name;
      req.write_results();
      exit;
    end
  else if req.op_name = 'get_id' then
    begin
      req.set_result(StaticAny(stat_longlong,@get_id_result) as IStaticAny);
      if not req.read_args() then  exit;
      get_id_result := get_id;
      req.write_results();
      exit;
    end
  else if req.op_name = 'free' then
    begin
      if not req.read_args() then  exit;
      req.set_exceptions_tc([_tc_CoreSrv_ForeignObject.typecode]);
      try
        _free;
      except
        on ForeignObject: TCoreSrv_ForeignObject do
          req.set_exception(TCoreSrv_ForeignObject.Create(ForeignObject) as IORBException);
      end;
      req.write_results();
      exit;
    end
  else if req.op_name = 'get_metadata' then
    begin
      req.add_in_arg(StaticAny(stat_string,@get_metadata_name) as IStaticAny);
      req.set_result(StaticAny(stat_string,@get_metadata_result) as IStaticAny);
      if not req.read_args() then  exit;
      req.set_exceptions_tc([_tc_ServerGate_Contents_PermissionException.typecode]);
      try
        get_metadata_result := get_metadata(get_metadata_name);
      except
        on PermissionException: TServerGate_Contents_PermissionException do
          req.set_exception(TServerGate_Contents_PermissionException.Create(PermissionException) as IORBException);
      end;
      req.write_results();
      exit;
    end
  else if req.op_name = 'set_metadata' then
    begin
      req.add_in_arg(StaticAny(stat_string,@set_metadata_name) as IStaticAny);
      req.add_in_arg(StaticAny(stat_string,@set_metadata_value) as IStaticAny);
      if not req.read_args() then  exit;
      req.set_exceptions_tc([_tc_ServerGate_Contents_PermissionException.typecode]);
      try
        set_metadata(set_metadata_name, set_metadata_value);
      except
        on PermissionException: TServerGate_Contents_PermissionException do
          req.set_exception(TServerGate_Contents_PermissionException.Create(PermissionException) as IORBException);
      end;
      req.write_results();
      exit;
    end
  else if req.op_name = 'append_wiki_text' then
    begin
      req.add_in_arg(StaticAny(stat_string,@append_wiki_text_text) as IStaticAny);
      if not req.read_args() then  exit;
      req.set_exceptions_tc([_tc_ServerGate_Contents_PermissionException.typecode]);
      try
        append_wiki_text(append_wiki_text_text);
      except
        on PermissionException: TServerGate_Contents_PermissionException do
          req.set_exception(TServerGate_Contents_PermissionException.Create(PermissionException) as IORBException);
      end;
      req.write_results();
      exit;
    end
  else if req.op_name = 'get_wiki_text' then
    begin
      req.set_result(StaticAny(stat_string,@get_wiki_text_result) as IStaticAny);
      if not req.read_args() then  exit;
      req.set_exceptions_tc([_tc_ServerGate_Contents_PermissionException.typecode]);
      try
        get_wiki_text_result := get_wiki_text;
      except
        on PermissionException: TServerGate_Contents_PermissionException do
          req.set_exception(TServerGate_Contents_PermissionException.Create(PermissionException) as IORBException);
      end;
      req.write_results();
      exit;
    end
  else if req.op_name = 'get_labels' then
    begin
      req.set_result(StaticAny(stat_string,@get_labels_result) as IStaticAny);
      if not req.read_args() then  exit;
      req.set_exceptions_tc([_tc_ServerGate_Contents_PermissionException.typecode]);
      try
        get_labels_result := get_labels;
      except
        on PermissionException: TServerGate_Contents_PermissionException do
          req.set_exception(TServerGate_Contents_PermissionException.Create(PermissionException) as IORBException);
      end;
      req.write_results();
      exit;
    end
  else if req.op_name = 'set_labels' then
    begin
      req.add_in_arg(StaticAny(stat_string,@set_labels_labels) as IStaticAny);
      if not req.read_args() then  exit;
      req.set_exceptions_tc([_tc_ServerGate_Contents_PermissionException.typecode]);
      try
        set_labels(set_labels_labels);
      except
        on PermissionException: TServerGate_Contents_PermissionException do
          req.set_exception(TServerGate_Contents_PermissionException.Create(PermissionException) as IORBException);
      end;
      req.write_results();
      exit;
    end
  else if req.op_name = 'set_wiki_text' then
    begin
      req.add_in_arg(StaticAny(stat_string,@set_wiki_text_wiki) as IStaticAny);
      if not req.read_args() then  exit;
      req.set_exceptions_tc([_tc_ServerGate_Contents_PermissionException.typecode]);
      try
        set_wiki_text(set_wiki_text_wiki);
      except
        on PermissionException: TServerGate_Contents_PermissionException do
          req.set_exception(TServerGate_Contents_PermissionException.Create(PermissionException) as IORBException);
      end;
      req.write_results();
      exit;
    end
  else if req.op_name = 'set_name' then
    begin
      req.add_in_arg(StaticAny(stat_string,@set_name_name) as IStaticAny);
      if not req.read_args() then  exit;
      req.set_exceptions_tc([_tc_ServerGate_Contents_PermissionException.typecode]);
      try
        set_name(set_name_name);
      except
        on PermissionException: TServerGate_Contents_PermissionException do
          req.set_exception(TServerGate_Contents_PermissionException.Create(PermissionException) as IORBException);
      end;
      req.write_results();
      exit;
    end
  else if req.op_name = 'add_metadata' then
    begin
      req.add_in_arg(StaticAny(ServerGate_Contents_MetadataEntity_seq_marshaller,@add_metadata_metas) as IStaticAny);
      if not req.read_args() then  exit;
      req.set_exceptions_tc([_tc_ServerGate_Contents_PermissionException.typecode]);
      try
        add_metadata(add_metadata_metas);
      except
        on PermissionException: TServerGate_Contents_PermissionException do
          req.set_exception(TServerGate_Contents_PermissionException.Create(PermissionException) as IORBException);
      end;
      req.write_results();
      exit;
    end
  else if req.op_name = 'add_attachment' then
    begin
      req.add_in_arg(StaticAny(stat_string,@add_attachment_name) as IStaticAny);
      req.add_in_arg(StaticAny(stat_seq_octet,@add_attachment_byte_stream) as IStaticAny);
      req.add_in_arg(StaticAny(stat_string,@add_attachment_content_type) as IStaticAny);
      if not req.read_args() then  exit;
      req.set_exceptions_tc([_tc_ServerGate_Contents_PermissionException.typecode]);
      try
        add_attachment(add_attachment_name, add_attachment_byte_stream, add_attachment_content_type);
      except
        on PermissionException: TServerGate_Contents_PermissionException do
          req.set_exception(TServerGate_Contents_PermissionException.Create(PermissionException) as IORBException);
      end;
      req.write_results();
      exit;
    end
  else if req.op_name = 'simulate_viewpage_action' then
    begin
      req.add_in_arg(StaticAny(stat_string,@simulate_viewpage_action_current_user_password) as IStaticAny);
      if not req.read_args() then  exit;
      simulate_viewpage_action(simulate_viewpage_action_current_user_password);
      req.write_results();
      exit;
    end;
  result := false;
end;

//***********************************************************
// TServerGate_Contents_KPage_marshaller
//***********************************************************
function TServerGate_Contents_KPage_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  obj: IORBObject;
begin
  result := false;
  if not stat_Object.demarshal(dec,@obj) then exit;
  IServerGate_Contents_KPage(addr^) := TServerGate_Contents_KPage._narrow(obj);
  result := (obj = nil) or (Pointer(addr^) <> nil);
end;

procedure TServerGate_Contents_KPage_marshaller.marshal(enc: IEncoder;const addr : Pointer);
var
  obj: IORBObject;
begin
  obj := IServerGate_Contents_KPage(addr^) as IORBObject;
  stat_Object.marshal(enc,@Pointer(obj));
end;

procedure TServerGate_Contents_KPage_marshaller._free(var addr: Pointer);
begin
  IServerGate_Contents_KPage(addr^) := nil;
end;

procedure TServerGate_Contents_KPage_marshaller._create(var addr: Pointer);
begin
  IServerGate_Contents_KPage(addr^) := TServerGate_Contents_KPage_stub.Create();
end;

procedure TServerGate_Contents_KPage_marshaller._assign(dst, src: Pointer);
begin
  IServerGate_Contents_KPage(dst^) := IServerGate_Contents_KPage(src^);
end;

function TServerGate_Contents_KPage_marshaller.typecode: ITypeCode;
begin
  result := _tc_ServerGate_Contents_KPage.typecode;
end;

//***********************************************************
// TServerGate_Contents_KPageFactoryManagerSrv
//***********************************************************
function TServerGate_Contents_KPageFactoryManagerSrv.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:garant.ru/ServerGate/Contents/KPageFactoryManagerSrv:1.0' then
    begin
      result := Pointer(self as IServerGate_Contents_KPageFactoryManagerSrv);
      exit;
    end;
end;

class function TServerGate_Contents_KPageFactoryManagerSrv._narrow(const obj : IORBObject): IServerGate_Contents_KPageFactoryManagerSrv;
var
  p: Pointer;
  stub: TServerGate_Contents_KPageFactoryManagerSrv_stub;
begin
  result := nil;
  if obj = nil then exit;
  p := obj.narrow_helper('IDL:garant.ru/ServerGate/Contents/KPageFactoryManagerSrv:1.0');
  if p <> nil then
    result := IServerGate_Contents_KPageFactoryManagerSrv(p)
  else
    begin
      if narrow_helper2(obj) or obj._is_a_remote('IDL:garant.ru/ServerGate/Contents/KPageFactoryManagerSrv:1.0') then
        begin
          stub := TServerGate_Contents_KPageFactoryManagerSrv_stub.Create();
          stub.assign(obj);
          result := stub;
        end;
    end;
end;

class function TServerGate_Contents_KPageFactoryManagerSrv.narrow_helper2(const obj: IORBObject): Boolean;
begin
  result := obj._repoid = 'IDL:garant.ru/ServerGate/Contents/KPageFactoryManagerSrv:1.0'
end;

//***********************************************************
// TServerGate_Contents_KPageFactoryManagerSrv_stub
//***********************************************************
function TServerGate_Contents_KPageFactoryManagerSrv_stub._create(const name: AnsiString; const parent: IServerGate_Contents_KPage): IServerGate_Contents_KPage;
var
  req: IStaticRequest;
  _name: IStaticAny;
  _parent: IStaticAny;
  _result: IStaticAny;
begin
  _name := StaticAny(stat_string,@name);
  _parent := StaticAny(ServerGate_Contents_KPage_marshaller,@parent);
  _result := StaticAny(ServerGate_Contents_KPage_marshaller, @result);
  req := StaticRequest(self,'create');
  req.add_in_arg(_name);
  req.add_in_arg(_parent);
  req.set_result(_result);
  req.set_exceptions_tc([_tc_CoreSrv_NoActiveFactory.typecode, _tc_ServerGate_Contents_CantCreatePage.typecode, _tc_ServerGate_Contents_PermissionException.typecode]);
  req.invoke;
  dorb_static_throw(req,[CoreSrv_NoActiveFactory_marshaller, 'IDL:garant.ru/CoreSrv/NoActiveFactory:1.0', ServerGate_Contents_CantCreatePage_marshaller, 'IDL:garant.ru/ServerGate/Contents/CantCreatePage:1.0', ServerGate_Contents_PermissionException_marshaller, 'IDL:garant.ru/ServerGate/Contents/PermissionException:1.0']);
end;

function TServerGate_Contents_KPageFactoryManagerSrv_stub.get(const page_id: TServerGate_Contents_PageId): IServerGate_Contents_KPage;
var
  req: IStaticRequest;
  _page_id: IStaticAny;
  _result: IStaticAny;
begin
  _page_id := StaticAny(stat_longlong,@page_id);
  _result := StaticAny(ServerGate_Contents_KPage_marshaller, @result);
  req := StaticRequest(self,'get');
  req.add_in_arg(_page_id);
  req.set_result(_result);
  req.set_exceptions_tc([_tc_CoreSrv_NoActiveFactory.typecode, _tc_ServerGate_Contents_PageNotFound.typecode]);
  req.invoke;
  dorb_static_throw(req,[CoreSrv_NoActiveFactory_marshaller, 'IDL:garant.ru/CoreSrv/NoActiveFactory:1.0', ServerGate_Contents_PageNotFound_marshaller, 'IDL:garant.ru/ServerGate/Contents/PageNotFound:1.0']);
end;

function TServerGate_Contents_KPageFactoryManagerSrv_stub.get_by_name_and_space(const name: AnsiString; const spacekey: AnsiString): IServerGate_Contents_KPage;
var
  req: IStaticRequest;
  _name: IStaticAny;
  _spacekey: IStaticAny;
  _result: IStaticAny;
begin
  _name := StaticAny(stat_string,@name);
  _spacekey := StaticAny(stat_string,@spacekey);
  _result := StaticAny(ServerGate_Contents_KPage_marshaller, @result);
  req := StaticRequest(self,'get_by_name_and_space');
  req.add_in_arg(_name);
  req.add_in_arg(_spacekey);
  req.set_result(_result);
  req.set_exceptions_tc([_tc_CoreSrv_NoActiveFactory.typecode, _tc_ServerGate_Contents_PageNotFound.typecode]);
  req.invoke;
  dorb_static_throw(req,[CoreSrv_NoActiveFactory_marshaller, 'IDL:garant.ru/CoreSrv/NoActiveFactory:1.0', ServerGate_Contents_PageNotFound_marshaller, 'IDL:garant.ru/ServerGate/Contents/PageNotFound:1.0']);
end;

function TServerGate_Contents_KPageFactoryManagerSrv_stub.get_by_model_element_guid(const guid: AnsiString): IServerGate_Contents_KPage;
var
  req: IStaticRequest;
  _guid: IStaticAny;
  _result: IStaticAny;
begin
  _guid := StaticAny(stat_string,@guid);
  _result := StaticAny(ServerGate_Contents_KPage_marshaller, @result);
  req := StaticRequest(self,'get_by_model_element_guid');
  req.add_in_arg(_guid);
  req.set_result(_result);
  req.set_exceptions_tc([_tc_CoreSrv_NoActiveFactory.typecode, _tc_ServerGate_Contents_PageNotFound.typecode]);
  req.invoke;
  dorb_static_throw(req,[CoreSrv_NoActiveFactory_marshaller, 'IDL:garant.ru/CoreSrv/NoActiveFactory:1.0', ServerGate_Contents_PageNotFound_marshaller, 'IDL:garant.ru/ServerGate/Contents/PageNotFound:1.0']);
end;

//***********************************************************
// TServerGate_Contents_KPageFactoryManagerSrv_stub_clp
//***********************************************************
function TServerGate_Contents_KPageFactoryManagerSrv_stub_clp.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:garant.ru/ServerGate/Contents/KPageFactoryManagerSrv:1.0' then
    begin
      result := Pointer(self as IServerGate_Contents_KPageFactoryManagerSrv);
      exit;
  end;
end;

function TServerGate_Contents_KPageFactoryManagerSrv_stub_clp._create(const name: AnsiString; const parent: IServerGate_Contents_KPage): IServerGate_Contents_KPage;
var
  _srv: IServant;
  srv: IServerGate_Contents_KPageFactoryManagerSrv;
begin
  result := nil;
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TServerGate_Contents_KPageFactoryManagerSrv_serv._narrow(_srv);
      if srv <> nil then
        result := srv._create(name, parent)
    end;
  _postinvoke();
end;

function TServerGate_Contents_KPageFactoryManagerSrv_stub_clp.get(const page_id: TServerGate_Contents_PageId): IServerGate_Contents_KPage;
var
  _srv: IServant;
  srv: IServerGate_Contents_KPageFactoryManagerSrv;
begin
  result := nil;
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TServerGate_Contents_KPageFactoryManagerSrv_serv._narrow(_srv);
      if srv <> nil then
        result := srv.get(page_id)
    end;
  _postinvoke();
end;

function TServerGate_Contents_KPageFactoryManagerSrv_stub_clp.get_by_name_and_space(const name: AnsiString; const spacekey: AnsiString): IServerGate_Contents_KPage;
var
  _srv: IServant;
  srv: IServerGate_Contents_KPageFactoryManagerSrv;
begin
  result := nil;
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TServerGate_Contents_KPageFactoryManagerSrv_serv._narrow(_srv);
      if srv <> nil then
        result := srv.get_by_name_and_space(name, spacekey)
    end;
  _postinvoke();
end;

function TServerGate_Contents_KPageFactoryManagerSrv_stub_clp.get_by_model_element_guid(const guid: AnsiString): IServerGate_Contents_KPage;
var
  _srv: IServant;
  srv: IServerGate_Contents_KPageFactoryManagerSrv;
begin
  result := nil;
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TServerGate_Contents_KPageFactoryManagerSrv_serv._narrow(_srv);
      if srv <> nil then
        result := srv.get_by_model_element_guid(guid)
    end;
  _postinvoke();
end;

//***********************************************************
// TServerGate_Contents_KPageFactoryManagerSrv_serv
//***********************************************************
function TServerGate_Contents_KPageFactoryManagerSrv_serv._this(): IServerGate_Contents_KPageFactoryManagerSrv;
var
  obj: IORBObject;
begin
  obj := this();
  result := TServerGate_Contents_KPageFactoryManagerSrv._narrow(obj);
end;

function TServerGate_Contents_KPageFactoryManagerSrv_serv._is_a(const repoid: RepositoryID): Boolean;
begin
  result := repoid = 'IDL:garant.ru/ServerGate/Contents/KPageFactoryManagerSrv:1.0';
end;

function TServerGate_Contents_KPageFactoryManagerSrv_serv._primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID;
begin
  result := 'IDL:garant.ru/ServerGate/Contents/KPageFactoryManagerSrv:1.0';
end;

function TServerGate_Contents_KPageFactoryManagerSrv_serv._make_stub(const poa: IPOA; const obj : IORBObject): IORBObject;
begin
  result := TServerGate_Contents_KPageFactoryManagerSrv_stub_clp.Create(poa,obj);
end;

procedure TServerGate_Contents_KPageFactoryManagerSrv_serv.invoke(const serv: IStaticServerRequest);
begin
  if not _dispatch(serv) then
    begin
      serv.set_exception(BAD_OPERATION.Create(0, COMPLETED_NO) as IORBException);
      serv.write_results();
    end;
end;

function TServerGate_Contents_KPageFactoryManagerSrv_serv.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:garant.ru/ServerGate/Contents/KPageFactoryManagerSrv:1.0' then
    begin
      result := Pointer(IServerGate_Contents_KPageFactoryManagerSrv(self));
      exit;
    end;
end;

class function TServerGate_Contents_KPageFactoryManagerSrv_serv._narrow(const srv : IServant): IServerGate_Contents_KPageFactoryManagerSrv;
var
  p: Pointer;
begin
  result := nil;
  if srv = nil then exit;
  p := srv.narrow_helper('IDL:garant.ru/ServerGate/Contents/KPageFactoryManagerSrv:1.0');
  if p <> nil then
    result := IServerGate_Contents_KPageFactoryManagerSrv(p)
end;

function TServerGate_Contents_KPageFactoryManagerSrv_serv._dispatch(const req: IStaticServerRequest): Boolean;
var
  _create_result: IServerGate_Contents_KPage;
  _create_name: AnsiString;
  _create_parent: IServerGate_Contents_KPage;
  get_result: IServerGate_Contents_KPage;
  get_page_id: TServerGate_Contents_PageId;
  get_by_name_and_space_result: IServerGate_Contents_KPage;
  get_by_name_and_space_name: AnsiString;
  get_by_name_and_space_spacekey: AnsiString;
  get_by_model_element_guid_result: IServerGate_Contents_KPage;
  get_by_model_element_guid_guid: AnsiString;
begin
  result := true;
  if req.op_name = 'create' then
    begin
      req.add_in_arg(StaticAny(stat_string,@_create_name) as IStaticAny);
      req.add_in_arg(StaticAny(ServerGate_Contents_KPage_marshaller,@_create_parent) as IStaticAny);
      req.set_result(StaticAny(ServerGate_Contents_KPage_marshaller,@_create_result) as IStaticAny);
      if not req.read_args() then  exit;
      req.set_exceptions_tc([_tc_CoreSrv_NoActiveFactory.typecode, _tc_ServerGate_Contents_CantCreatePage.typecode, _tc_ServerGate_Contents_PermissionException.typecode]);
      try
        _create_result := _create(_create_name, _create_parent);
      except
        on NoActiveFactory: TCoreSrv_NoActiveFactory do
          req.set_exception(TCoreSrv_NoActiveFactory.Create(NoActiveFactory) as IORBException);
        on CantCreatePage: TServerGate_Contents_CantCreatePage do
          req.set_exception(TServerGate_Contents_CantCreatePage.Create(CantCreatePage) as IORBException);
        on PermissionException: TServerGate_Contents_PermissionException do
          req.set_exception(TServerGate_Contents_PermissionException.Create(PermissionException) as IORBException);
      end;
      req.write_results();
      exit;
    end
  else if req.op_name = 'get' then
    begin
      req.add_in_arg(StaticAny(stat_longlong,@get_page_id) as IStaticAny);
      req.set_result(StaticAny(ServerGate_Contents_KPage_marshaller,@get_result) as IStaticAny);
      if not req.read_args() then  exit;
      req.set_exceptions_tc([_tc_CoreSrv_NoActiveFactory.typecode, _tc_ServerGate_Contents_PageNotFound.typecode]);
      try
        get_result := get(get_page_id);
      except
        on NoActiveFactory: TCoreSrv_NoActiveFactory do
          req.set_exception(TCoreSrv_NoActiveFactory.Create(NoActiveFactory) as IORBException);
        on PageNotFound: TServerGate_Contents_PageNotFound do
          req.set_exception(TServerGate_Contents_PageNotFound.Create(PageNotFound) as IORBException);
      end;
      req.write_results();
      exit;
    end
  else if req.op_name = 'get_by_name_and_space' then
    begin
      req.add_in_arg(StaticAny(stat_string,@get_by_name_and_space_name) as IStaticAny);
      req.add_in_arg(StaticAny(stat_string,@get_by_name_and_space_spacekey) as IStaticAny);
      req.set_result(StaticAny(ServerGate_Contents_KPage_marshaller,@get_by_name_and_space_result) as IStaticAny);
      if not req.read_args() then  exit;
      req.set_exceptions_tc([_tc_CoreSrv_NoActiveFactory.typecode, _tc_ServerGate_Contents_PageNotFound.typecode]);
      try
        get_by_name_and_space_result := get_by_name_and_space(get_by_name_and_space_name, get_by_name_and_space_spacekey);
      except
        on NoActiveFactory: TCoreSrv_NoActiveFactory do
          req.set_exception(TCoreSrv_NoActiveFactory.Create(NoActiveFactory) as IORBException);
        on PageNotFound: TServerGate_Contents_PageNotFound do
          req.set_exception(TServerGate_Contents_PageNotFound.Create(PageNotFound) as IORBException);
      end;
      req.write_results();
      exit;
    end
  else if req.op_name = 'get_by_model_element_guid' then
    begin
      req.add_in_arg(StaticAny(stat_string,@get_by_model_element_guid_guid) as IStaticAny);
      req.set_result(StaticAny(ServerGate_Contents_KPage_marshaller,@get_by_model_element_guid_result) as IStaticAny);
      if not req.read_args() then  exit;
      req.set_exceptions_tc([_tc_CoreSrv_NoActiveFactory.typecode, _tc_ServerGate_Contents_PageNotFound.typecode]);
      try
        get_by_model_element_guid_result := get_by_model_element_guid(get_by_model_element_guid_guid);
      except
        on NoActiveFactory: TCoreSrv_NoActiveFactory do
          req.set_exception(TCoreSrv_NoActiveFactory.Create(NoActiveFactory) as IORBException);
        on PageNotFound: TServerGate_Contents_PageNotFound do
          req.set_exception(TServerGate_Contents_PageNotFound.Create(PageNotFound) as IORBException);
      end;
      req.write_results();
      exit;
    end;
  result := false;
end;

//***********************************************************
// TServerGate_Contents_KPageFactoryManagerSrv_marshaller
//***********************************************************
function TServerGate_Contents_KPageFactoryManagerSrv_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  obj: IORBObject;
begin
  result := false;
  if not stat_Object.demarshal(dec,@obj) then exit;
  IServerGate_Contents_KPageFactoryManagerSrv(addr^) := TServerGate_Contents_KPageFactoryManagerSrv._narrow(obj);
  result := (obj = nil) or (Pointer(addr^) <> nil);
end;

procedure TServerGate_Contents_KPageFactoryManagerSrv_marshaller.marshal(enc: IEncoder;const addr : Pointer);
var
  obj: IORBObject;
begin
  obj := IServerGate_Contents_KPageFactoryManagerSrv(addr^) as IORBObject;
  stat_Object.marshal(enc,@Pointer(obj));
end;

procedure TServerGate_Contents_KPageFactoryManagerSrv_marshaller._free(var addr: Pointer);
begin
  IServerGate_Contents_KPageFactoryManagerSrv(addr^) := nil;
end;

procedure TServerGate_Contents_KPageFactoryManagerSrv_marshaller._create(var addr: Pointer);
begin
  IServerGate_Contents_KPageFactoryManagerSrv(addr^) := TServerGate_Contents_KPageFactoryManagerSrv_stub.Create();
end;

procedure TServerGate_Contents_KPageFactoryManagerSrv_marshaller._assign(dst, src: Pointer);
begin
  IServerGate_Contents_KPageFactoryManagerSrv(dst^) := IServerGate_Contents_KPageFactoryManagerSrv(src^);
end;

function TServerGate_Contents_KPageFactoryManagerSrv_marshaller.typecode: ITypeCode;
begin
  result := _tc_ServerGate_Contents_KPageFactoryManagerSrv.typecode;
end;

//***********************************************************
// TServerGate_Contents_RequestImportance_marshaller
//***********************************************************
function TServerGate_Contents_RequestImportance_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
begin
  result := dec.get_ulong(_ulong(addr^));
end;

procedure TServerGate_Contents_RequestImportance_marshaller.marshal(enc: IEncoder;const addr : Pointer);
begin
  enc.put_ulong(_ulong(addr^));
end;

procedure TServerGate_Contents_RequestImportance_marshaller._free(var addr: Pointer);
begin
  freemem(addr);
end;

procedure TServerGate_Contents_RequestImportance_marshaller._create(var addr: Pointer);
begin
  addr := allocmem(sizeOf(_ulong));
end;

procedure TServerGate_Contents_RequestImportance_marshaller._assign(dst, src: Pointer);
begin
  TServerGate_Contents_RequestImportance(dst^) := TServerGate_Contents_RequestImportance(src^);
end;

function TServerGate_Contents_RequestImportance_marshaller.typecode: ITypeCode;
begin
  result := _tc_ServerGate_Contents_RequestImportance.typecode;
end;

//***********************************************************
// TServerGate_Contents_RequestType_marshaller
//***********************************************************
function TServerGate_Contents_RequestType_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
begin
  result := dec.get_ulong(_ulong(addr^));
end;

procedure TServerGate_Contents_RequestType_marshaller.marshal(enc: IEncoder;const addr : Pointer);
begin
  enc.put_ulong(_ulong(addr^));
end;

procedure TServerGate_Contents_RequestType_marshaller._free(var addr: Pointer);
begin
  freemem(addr);
end;

procedure TServerGate_Contents_RequestType_marshaller._create(var addr: Pointer);
begin
  addr := allocmem(sizeOf(_ulong));
end;

procedure TServerGate_Contents_RequestType_marshaller._assign(dst, src: Pointer);
begin
  TServerGate_Contents_RequestType(dst^) := TServerGate_Contents_RequestType(src^);
end;

function TServerGate_Contents_RequestType_marshaller.typecode: ITypeCode;
begin
  result := _tc_ServerGate_Contents_RequestType.typecode;
end;

//***********************************************************
// TServerGate_Contents_PageIsNotRequest_marshaller
//***********************************************************
function TServerGate_Contents_PageIsNotRequest_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  repoid: RepositoryId;
begin
  result := false;
  if not dec.except_begin(repoid) then exit;
  if not dec.except_end then exit;
  result := true;
end;

procedure TServerGate_Contents_PageIsNotRequest_marshaller.marshal(enc: IEncoder;const addr : Pointer);
begin
  enc.except_begin('IDL:garant.ru/ServerGate/Contents/PageIsNotRequest:1.0');
  enc.except_end;
end;

procedure TServerGate_Contents_PageIsNotRequest_marshaller._free(var addr: Pointer);
begin
  IServerGate_Contents_PageIsNotRequest(addr^) := nil;
end;

procedure TServerGate_Contents_PageIsNotRequest_marshaller._create(var addr: Pointer);
begin
  IServerGate_Contents_PageIsNotRequest(addr^) := TServerGate_Contents_PageIsNotRequest.Create();
end;

procedure TServerGate_Contents_PageIsNotRequest_marshaller._assign(dst, src: Pointer);
begin
  IServerGate_Contents_PageIsNotRequest(dst^) := IServerGate_Contents_PageIsNotRequest(src^);
end;

function TServerGate_Contents_PageIsNotRequest_marshaller.typecode: ITypeCode;
begin
  result := _tc_ServerGate_Contents_PageIsNotRequest.typecode;
end;

//***********************************************************
// TServerGate_Contents_PageIsNotRequest
//***********************************************************
constructor TServerGate_Contents_PageIsNotRequest.Create(ex: TServerGate_Contents_PageIsNotRequest);
begin
  inherited Create();
end;

procedure TServerGate_Contents_PageIsNotRequest.throw;
begin
  raise TServerGate_Contents_PageIsNotRequest.Create(self);
end;

function TServerGate_Contents_PageIsNotRequest.clone(): IORBException;
begin
  result := TServerGate_Contents_PageIsNotRequest.Create(self);
end;

procedure TServerGate_Contents_PageIsNotRequest.encode(const enc: IEncoder);
var
  int : IServerGate_Contents_PageIsNotRequest;
begin
  int := self;
  ServerGate_Contents_PageIsNotRequest_marshaller.marshal(enc,@int);
end;

procedure TServerGate_Contents_PageIsNotRequest.encode_any(const a: IAny);
var
  stat: IStaticAny;
begin
  stat := StaticAny(ServerGate_Contents_PageIsNotRequest_marshaller, Self);
  a.from_static_any(stat);
end;

constructor TServerGate_Contents_PageIsNotRequest.Create();
begin
  inherited Create();
end;

function TServerGate_Contents_PageIsNotRequest.repoid(): RepositoryID;
begin
  result := 'IDL:garant.ru/ServerGate/Contents/PageIsNotRequest:1.0';
end;

//***********************************************************
// TServerGate_Contents_CantChangeState_marshaller
//***********************************************************
function TServerGate_Contents_CantChangeState_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  repoid: RepositoryId;
begin
  result := false;
  if not dec.except_begin(repoid) then exit;
  if not dec.except_end then exit;
  result := true;
end;

procedure TServerGate_Contents_CantChangeState_marshaller.marshal(enc: IEncoder;const addr : Pointer);
begin
  enc.except_begin('IDL:garant.ru/ServerGate/Contents/CantChangeState:1.0');
  enc.except_end;
end;

procedure TServerGate_Contents_CantChangeState_marshaller._free(var addr: Pointer);
begin
  IServerGate_Contents_CantChangeState(addr^) := nil;
end;

procedure TServerGate_Contents_CantChangeState_marshaller._create(var addr: Pointer);
begin
  IServerGate_Contents_CantChangeState(addr^) := TServerGate_Contents_CantChangeState.Create();
end;

procedure TServerGate_Contents_CantChangeState_marshaller._assign(dst, src: Pointer);
begin
  IServerGate_Contents_CantChangeState(dst^) := IServerGate_Contents_CantChangeState(src^);
end;

function TServerGate_Contents_CantChangeState_marshaller.typecode: ITypeCode;
begin
  result := _tc_ServerGate_Contents_CantChangeState.typecode;
end;

//***********************************************************
// TServerGate_Contents_CantChangeState
//***********************************************************
constructor TServerGate_Contents_CantChangeState.Create(ex: TServerGate_Contents_CantChangeState);
begin
  inherited Create();
end;

procedure TServerGate_Contents_CantChangeState.throw;
begin
  raise TServerGate_Contents_CantChangeState.Create(self);
end;

function TServerGate_Contents_CantChangeState.clone(): IORBException;
begin
  result := TServerGate_Contents_CantChangeState.Create(self);
end;

procedure TServerGate_Contents_CantChangeState.encode(const enc: IEncoder);
var
  int : IServerGate_Contents_CantChangeState;
begin
  int := self;
  ServerGate_Contents_CantChangeState_marshaller.marshal(enc,@int);
end;

procedure TServerGate_Contents_CantChangeState.encode_any(const a: IAny);
var
  stat: IStaticAny;
begin
  stat := StaticAny(ServerGate_Contents_CantChangeState_marshaller, Self);
  a.from_static_any(stat);
end;

constructor TServerGate_Contents_CantChangeState.Create();
begin
  inherited Create();
end;

function TServerGate_Contents_CantChangeState.repoid(): RepositoryID;
begin
  result := 'IDL:garant.ru/ServerGate/Contents/CantChangeState:1.0';
end;

//***********************************************************
// TServerGate_Contents_Request
//***********************************************************
function TServerGate_Contents_Request.narrow_helper(const str: RepositoryID): Pointer;
begin
  if str = 'IDL:garant.ru/ServerGate/Contents/Request:1.0' then
    begin
      result := Pointer(self as IServerGate_Contents_Request);
      exit;
    end;
  result := inherited narrow_helper(str);
end;

class function TServerGate_Contents_Request._narrow(const obj : IORBObject): IServerGate_Contents_Request;
var
  p: Pointer;
  stub: TServerGate_Contents_Request_stub;
begin
  result := nil;
  if obj = nil then exit;
  p := obj.narrow_helper('IDL:garant.ru/ServerGate/Contents/Request:1.0');
  if p <> nil then
    result := IServerGate_Contents_Request(p)
  else
    begin
      if narrow_helper2(obj) or obj._is_a_remote('IDL:garant.ru/ServerGate/Contents/Request:1.0') then
        begin
          stub := TServerGate_Contents_Request_stub.Create();
          stub.assign(obj);
          result := stub;
        end;
    end;
end;

class function TServerGate_Contents_Request.narrow_helper2(const obj: IORBObject): Boolean;
begin
  result := obj._repoid = 'IDL:garant.ru/ServerGate/Contents/Request:1.0'
end;

//***********************************************************
// TServerGate_Contents_Request_stub
//***********************************************************
function TServerGate_Contents_Request_stub.get_name: AnsiString;
var
  req: IStaticRequest;
  _result: IStaticAny;
begin
  _result := StaticAny(stat_string, @result);
  req := StaticRequest(self,'get_name');
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

function TServerGate_Contents_Request_stub.get_id: TServerGate_Contents_PageId;
var
  req: IStaticRequest;
  _result: IStaticAny;
begin
  _result := StaticAny(stat_longlong, @result);
  req := StaticRequest(self,'get_id');
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

procedure TServerGate_Contents_Request_stub._free;
var
  req: IStaticRequest;
begin
  req := StaticRequest(self,'free');
  req.set_exceptions_tc([_tc_CoreSrv_ForeignObject.typecode]);
  req.invoke;
  dorb_static_throw(req,[CoreSrv_ForeignObject_marshaller, 'IDL:garant.ru/CoreSrv/ForeignObject:1.0']);
end;

function TServerGate_Contents_Request_stub.get_metadata(const name: AnsiString): AnsiString;
var
  req: IStaticRequest;
  _name: IStaticAny;
  _result: IStaticAny;
begin
  _name := StaticAny(stat_string,@name);
  _result := StaticAny(stat_string, @result);
  req := StaticRequest(self,'get_metadata');
  req.add_in_arg(_name);
  req.set_result(_result);
  req.set_exceptions_tc([_tc_ServerGate_Contents_PermissionException.typecode]);
  req.invoke;
  dorb_static_throw(req,[ServerGate_Contents_PermissionException_marshaller, 'IDL:garant.ru/ServerGate/Contents/PermissionException:1.0']);
end;

procedure TServerGate_Contents_Request_stub.set_metadata(const name: AnsiString; const value: AnsiString);
var
  req: IStaticRequest;
  _name: IStaticAny;
  _value: IStaticAny;
begin
  _name := StaticAny(stat_string,@name);
  _value := StaticAny(stat_string,@value);
  req := StaticRequest(self,'set_metadata');
  req.add_in_arg(_name);
  req.add_in_arg(_value);
  req.set_exceptions_tc([_tc_ServerGate_Contents_PermissionException.typecode]);
  req.invoke;
  dorb_static_throw(req,[ServerGate_Contents_PermissionException_marshaller, 'IDL:garant.ru/ServerGate/Contents/PermissionException:1.0']);
end;

procedure TServerGate_Contents_Request_stub.append_wiki_text(const text: AnsiString);
var
  req: IStaticRequest;
  _text: IStaticAny;
begin
  _text := StaticAny(stat_string,@text);
  req := StaticRequest(self,'append_wiki_text');
  req.add_in_arg(_text);
  req.set_exceptions_tc([_tc_ServerGate_Contents_PermissionException.typecode]);
  req.invoke;
  dorb_static_throw(req,[ServerGate_Contents_PermissionException_marshaller, 'IDL:garant.ru/ServerGate/Contents/PermissionException:1.0']);
end;

function TServerGate_Contents_Request_stub.get_wiki_text: AnsiString;
var
  req: IStaticRequest;
  _result: IStaticAny;
begin
  _result := StaticAny(stat_string, @result);
  req := StaticRequest(self,'get_wiki_text');
  req.set_result(_result);
  req.set_exceptions_tc([_tc_ServerGate_Contents_PermissionException.typecode]);
  req.invoke;
  dorb_static_throw(req,[ServerGate_Contents_PermissionException_marshaller, 'IDL:garant.ru/ServerGate/Contents/PermissionException:1.0']);
end;

function TServerGate_Contents_Request_stub.get_labels: AnsiString;
var
  req: IStaticRequest;
  _result: IStaticAny;
begin
  _result := StaticAny(stat_string, @result);
  req := StaticRequest(self,'get_labels');
  req.set_result(_result);
  req.set_exceptions_tc([_tc_ServerGate_Contents_PermissionException.typecode]);
  req.invoke;
  dorb_static_throw(req,[ServerGate_Contents_PermissionException_marshaller, 'IDL:garant.ru/ServerGate/Contents/PermissionException:1.0']);
end;

procedure TServerGate_Contents_Request_stub.set_labels(const labels: AnsiString);
var
  req: IStaticRequest;
  _labels: IStaticAny;
begin
  _labels := StaticAny(stat_string,@labels);
  req := StaticRequest(self,'set_labels');
  req.add_in_arg(_labels);
  req.set_exceptions_tc([_tc_ServerGate_Contents_PermissionException.typecode]);
  req.invoke;
  dorb_static_throw(req,[ServerGate_Contents_PermissionException_marshaller, 'IDL:garant.ru/ServerGate/Contents/PermissionException:1.0']);
end;

procedure TServerGate_Contents_Request_stub.set_wiki_text(const wiki: AnsiString);
var
  req: IStaticRequest;
  _wiki: IStaticAny;
begin
  _wiki := StaticAny(stat_string,@wiki);
  req := StaticRequest(self,'set_wiki_text');
  req.add_in_arg(_wiki);
  req.set_exceptions_tc([_tc_ServerGate_Contents_PermissionException.typecode]);
  req.invoke;
  dorb_static_throw(req,[ServerGate_Contents_PermissionException_marshaller, 'IDL:garant.ru/ServerGate/Contents/PermissionException:1.0']);
end;

procedure TServerGate_Contents_Request_stub.set_name(const name: AnsiString);
var
  req: IStaticRequest;
  _name: IStaticAny;
begin
  _name := StaticAny(stat_string,@name);
  req := StaticRequest(self,'set_name');
  req.add_in_arg(_name);
  req.set_exceptions_tc([_tc_ServerGate_Contents_PermissionException.typecode]);
  req.invoke;
  dorb_static_throw(req,[ServerGate_Contents_PermissionException_marshaller, 'IDL:garant.ru/ServerGate/Contents/PermissionException:1.0']);
end;

procedure TServerGate_Contents_Request_stub.add_metadata(const metas: TServerGate_Contents_MetadataEntityList);
var
  req: IStaticRequest;
  _metas: IStaticAny;
begin
  _metas := StaticAny(ServerGate_Contents_MetadataEntity_seq_marshaller,@metas);
  req := StaticRequest(self,'add_metadata');
  req.add_in_arg(_metas);
  req.set_exceptions_tc([_tc_ServerGate_Contents_PermissionException.typecode]);
  req.invoke;
  dorb_static_throw(req,[ServerGate_Contents_PermissionException_marshaller, 'IDL:garant.ru/ServerGate/Contents/PermissionException:1.0']);
end;

procedure TServerGate_Contents_Request_stub.add_attachment(const name: AnsiString; const byte_stream: TServerGate_Contents_ByteBuffer; const content_type: AnsiString);
var
  req: IStaticRequest;
  _name: IStaticAny;
  _byte_stream: IStaticAny;
  _content_type: IStaticAny;
begin
  _name := StaticAny(stat_string,@name);
  _byte_stream := StaticAny(stat_seq_octet,@byte_stream);
  _content_type := StaticAny(stat_string,@content_type);
  req := StaticRequest(self,'add_attachment');
  req.add_in_arg(_name);
  req.add_in_arg(_byte_stream);
  req.add_in_arg(_content_type);
  req.set_exceptions_tc([_tc_ServerGate_Contents_PermissionException.typecode]);
  req.invoke;
  dorb_static_throw(req,[ServerGate_Contents_PermissionException_marshaller, 'IDL:garant.ru/ServerGate/Contents/PermissionException:1.0']);
end;

procedure TServerGate_Contents_Request_stub.simulate_viewpage_action(const current_user_password: AnsiString);
var
  req: IStaticRequest;
  _current_user_password: IStaticAny;
begin
  _current_user_password := StaticAny(stat_string,@current_user_password);
  req := StaticRequest(self,'simulate_viewpage_action');
  req.add_in_arg(_current_user_password);
  req.invoke;
  dorb_static_throw(req);
end;

function TServerGate_Contents_Request_stub.get_state: AnsiString;
var
  req: IStaticRequest;
  _result: IStaticAny;
begin
  _result := StaticAny(stat_string, @result);
  req := StaticRequest(self,'get_state');
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

procedure TServerGate_Contents_Request_stub.post_event(const event: AnsiString);
var
  req: IStaticRequest;
  _event: IStaticAny;
begin
  _event := StaticAny(stat_string,@event);
  req := StaticRequest(self,'post_event');
  req.add_in_arg(_event);
  req.set_exceptions_tc([_tc_ServerGate_Contents_CantChangeState.typecode]);
  req.invoke;
  dorb_static_throw(req,[ServerGate_Contents_CantChangeState_marshaller, 'IDL:garant.ru/ServerGate/Contents/CantChangeState:1.0']);
end;

//***********************************************************
// TServerGate_Contents_Request_stub_clp
//***********************************************************
function TServerGate_Contents_Request_stub_clp.narrow_helper(const str: RepositoryID): Pointer;
begin
  if str = 'IDL:garant.ru/ServerGate/Contents/Request:1.0' then
    begin
      result := Pointer(self as IServerGate_Contents_Request);
      exit;
    end;
  result := inherited narrow_helper(str);
end;

function TServerGate_Contents_Request_stub_clp.get_state: AnsiString;
var
  _srv: IServant;
  srv: IServerGate_Contents_Request;
begin
  result := '';
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TServerGate_Contents_Request_serv._narrow(_srv);
      if srv <> nil then
        result := srv.get_state
    end;
  _postinvoke();
end;

procedure TServerGate_Contents_Request_stub_clp.post_event(const event: AnsiString);
var
  _srv: IServant;
  srv: IServerGate_Contents_Request;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TServerGate_Contents_Request_serv._narrow(_srv);
      if srv <> nil then
        srv.post_event(event)
    end;
  _postinvoke();
end;

//***********************************************************
// TServerGate_Contents_Request_serv
//***********************************************************
function TServerGate_Contents_Request_serv._this(): IServerGate_Contents_Request;
var
  obj: IORBObject;
begin
  obj := this();
  result := TServerGate_Contents_Request._narrow(obj);
end;

function TServerGate_Contents_Request_serv._is_a(const repoid: RepositoryID): Boolean;
begin
  result := repoid = 'IDL:garant.ru/ServerGate/Contents/Request:1.0';
  if not result then
    result := inherited _is_a(repoid);
end;

function TServerGate_Contents_Request_serv._primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID;
begin
  result := 'IDL:garant.ru/ServerGate/Contents/Request:1.0';
end;

function TServerGate_Contents_Request_serv._make_stub(const poa: IPOA; const obj : IORBObject): IORBObject;
begin
  result := TServerGate_Contents_Request_stub_clp.Create(poa,obj);
end;

procedure TServerGate_Contents_Request_serv.invoke(const serv: IStaticServerRequest);
begin
  if not _dispatch(serv) then
    begin
      serv.set_exception(BAD_OPERATION.Create(0, COMPLETED_NO) as IORBException);
      serv.write_results();
    end;
end;

function TServerGate_Contents_Request_serv.narrow_helper(const str: RepositoryID): Pointer;
begin
  if str = 'IDL:garant.ru/ServerGate/Contents/Request:1.0' then
    begin
      result := Pointer(IServerGate_Contents_Request(self));
      exit;
    end;
  result := inherited narrow_helper(str);
end;

class function TServerGate_Contents_Request_serv._narrow(const srv : IServant): IServerGate_Contents_Request;
var
  p: Pointer;
begin
  result := nil;
  if srv = nil then exit;
  p := srv.narrow_helper('IDL:garant.ru/ServerGate/Contents/Request:1.0');
  if p <> nil then
    result := IServerGate_Contents_Request(p)
end;

function TServerGate_Contents_Request_serv._dispatch(const req: IStaticServerRequest): Boolean;
var
  get_state_result: AnsiString;
  post_event_event: AnsiString;
begin
  result := true;
  if req.op_name = 'get_state' then
    begin
      req.set_result(StaticAny(stat_string,@get_state_result) as IStaticAny);
      if not req.read_args() then  exit;
      get_state_result := get_state;
      req.write_results();
      exit;
    end
  else if req.op_name = 'post_event' then
    begin
      req.add_in_arg(StaticAny(stat_string,@post_event_event) as IStaticAny);
      if not req.read_args() then  exit;
      req.set_exceptions_tc([_tc_ServerGate_Contents_CantChangeState.typecode]);
      try
        post_event(post_event_event);
      except
        on CantChangeState: TServerGate_Contents_CantChangeState do
          req.set_exception(TServerGate_Contents_CantChangeState.Create(CantChangeState) as IORBException);
      end;
      req.write_results();
      exit;
    end;
  if not inherited _dispatch(req) then
    result := false;
end;

//***********************************************************
// TServerGate_Contents_Request_marshaller
//***********************************************************
function TServerGate_Contents_Request_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  obj: IORBObject;
begin
  result := false;
  if not stat_Object.demarshal(dec,@obj) then exit;
  IServerGate_Contents_Request(addr^) := TServerGate_Contents_Request._narrow(obj);
  result := (obj = nil) or (Pointer(addr^) <> nil);
end;

procedure TServerGate_Contents_Request_marshaller.marshal(enc: IEncoder;const addr : Pointer);
var
  obj: IORBObject;
begin
  obj := IServerGate_Contents_Request(addr^) as IORBObject;
  stat_Object.marshal(enc,@Pointer(obj));
end;

procedure TServerGate_Contents_Request_marshaller._free(var addr: Pointer);
begin
  IServerGate_Contents_Request(addr^) := nil;
end;

procedure TServerGate_Contents_Request_marshaller._create(var addr: Pointer);
begin
  IServerGate_Contents_Request(addr^) := TServerGate_Contents_Request_stub.Create();
end;

procedure TServerGate_Contents_Request_marshaller._assign(dst, src: Pointer);
begin
  IServerGate_Contents_Request(dst^) := IServerGate_Contents_Request(src^);
end;

function TServerGate_Contents_Request_marshaller.typecode: ITypeCode;
begin
  result := _tc_ServerGate_Contents_Request.typecode;
end;

//***********************************************************
// TServerGate_Contents_RequestFactoryManagerSrv
//***********************************************************
function TServerGate_Contents_RequestFactoryManagerSrv.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:garant.ru/ServerGate/Contents/RequestFactoryManagerSrv:1.0' then
    begin
      result := Pointer(self as IServerGate_Contents_RequestFactoryManagerSrv);
      exit;
    end;
end;

class function TServerGate_Contents_RequestFactoryManagerSrv._narrow(const obj : IORBObject): IServerGate_Contents_RequestFactoryManagerSrv;
var
  p: Pointer;
  stub: TServerGate_Contents_RequestFactoryManagerSrv_stub;
begin
  result := nil;
  if obj = nil then exit;
  p := obj.narrow_helper('IDL:garant.ru/ServerGate/Contents/RequestFactoryManagerSrv:1.0');
  if p <> nil then
    result := IServerGate_Contents_RequestFactoryManagerSrv(p)
  else
    begin
      if narrow_helper2(obj) or obj._is_a_remote('IDL:garant.ru/ServerGate/Contents/RequestFactoryManagerSrv:1.0') then
        begin
          stub := TServerGate_Contents_RequestFactoryManagerSrv_stub.Create();
          stub.assign(obj);
          result := stub;
        end;
    end;
end;

class function TServerGate_Contents_RequestFactoryManagerSrv.narrow_helper2(const obj: IORBObject): Boolean;
begin
  result := obj._repoid = 'IDL:garant.ru/ServerGate/Contents/RequestFactoryManagerSrv:1.0'
end;

//***********************************************************
// TServerGate_Contents_RequestFactoryManagerSrv_stub
//***********************************************************
function TServerGate_Contents_RequestFactoryManagerSrv_stub.get_by_name_and_space(const name: AnsiString; const spacekey: AnsiString): IServerGate_Contents_Request;
var
  req: IStaticRequest;
  _name: IStaticAny;
  _spacekey: IStaticAny;
  _result: IStaticAny;
begin
  _name := StaticAny(stat_string,@name);
  _spacekey := StaticAny(stat_string,@spacekey);
  _result := StaticAny(ServerGate_Contents_Request_marshaller, @result);
  req := StaticRequest(self,'get_by_name_and_space');
  req.add_in_arg(_name);
  req.add_in_arg(_spacekey);
  req.set_result(_result);
  req.set_exceptions_tc([_tc_CoreSrv_NoActiveFactory.typecode, _tc_ServerGate_Contents_PageNotFound.typecode, _tc_ServerGate_Contents_PermissionException.typecode, _tc_ServerGate_Contents_PageIsNotRequest.typecode]);
  req.invoke;
  dorb_static_throw(req,[CoreSrv_NoActiveFactory_marshaller, 'IDL:garant.ru/CoreSrv/NoActiveFactory:1.0', ServerGate_Contents_PageNotFound_marshaller, 'IDL:garant.ru/ServerGate/Contents/PageNotFound:1.0', ServerGate_Contents_PermissionException_marshaller, 'IDL:garant.ru/ServerGate/Contents/PermissionException:1.0', ServerGate_Contents_PageIsNotRequest_marshaller, 'IDL:garant.ru/ServerGate/Contents/PageIsNotRequest:1.0']);
end;

function TServerGate_Contents_RequestFactoryManagerSrv_stub.get(const page_id: TServerGate_Contents_PageId): IServerGate_Contents_Request;
var
  req: IStaticRequest;
  _page_id: IStaticAny;
  _result: IStaticAny;
begin
  _page_id := StaticAny(stat_longlong,@page_id);
  _result := StaticAny(ServerGate_Contents_Request_marshaller, @result);
  req := StaticRequest(self,'get');
  req.add_in_arg(_page_id);
  req.set_result(_result);
  req.set_exceptions_tc([_tc_CoreSrv_NoActiveFactory.typecode, _tc_ServerGate_Contents_PageNotFound.typecode, _tc_ServerGate_Contents_PermissionException.typecode, _tc_ServerGate_Contents_PageIsNotRequest.typecode]);
  req.invoke;
  dorb_static_throw(req,[CoreSrv_NoActiveFactory_marshaller, 'IDL:garant.ru/CoreSrv/NoActiveFactory:1.0', ServerGate_Contents_PageNotFound_marshaller, 'IDL:garant.ru/ServerGate/Contents/PageNotFound:1.0', ServerGate_Contents_PermissionException_marshaller, 'IDL:garant.ru/ServerGate/Contents/PermissionException:1.0', ServerGate_Contents_PageIsNotRequest_marshaller, 'IDL:garant.ru/ServerGate/Contents/PageIsNotRequest:1.0']);
end;

function TServerGate_Contents_RequestFactoryManagerSrv_stub._create(const _type: TServerGate_Contents_RequestType; const importance: TServerGate_Contents_RequestImportance; const name: AnsiString; const parent: IServerGate_Contents_KPage): IServerGate_Contents_Request;
var
  req: IStaticRequest;
  __type: IStaticAny;
  _importance: IStaticAny;
  _name: IStaticAny;
  _parent: IStaticAny;
  _result: IStaticAny;
begin
  __type := StaticAny(ServerGate_Contents_RequestType_marshaller,@_type);
  _importance := StaticAny(ServerGate_Contents_RequestImportance_marshaller,@importance);
  _name := StaticAny(stat_string,@name);
  _parent := StaticAny(ServerGate_Contents_KPage_marshaller,@parent);
  _result := StaticAny(ServerGate_Contents_Request_marshaller, @result);
  req := StaticRequest(self,'create');
  req.add_in_arg(__type);
  req.add_in_arg(_importance);
  req.add_in_arg(_name);
  req.add_in_arg(_parent);
  req.set_result(_result);
  req.set_exceptions_tc([_tc_CoreSrv_NoActiveFactory.typecode, _tc_ServerGate_Contents_CantCreatePage.typecode, _tc_ServerGate_Contents_PermissionException.typecode]);
  req.invoke;
  dorb_static_throw(req,[CoreSrv_NoActiveFactory_marshaller, 'IDL:garant.ru/CoreSrv/NoActiveFactory:1.0', ServerGate_Contents_CantCreatePage_marshaller, 'IDL:garant.ru/ServerGate/Contents/CantCreatePage:1.0', ServerGate_Contents_PermissionException_marshaller, 'IDL:garant.ru/ServerGate/Contents/PermissionException:1.0']);
end;

//***********************************************************
// TServerGate_Contents_RequestFactoryManagerSrv_stub_clp
//***********************************************************
function TServerGate_Contents_RequestFactoryManagerSrv_stub_clp.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:garant.ru/ServerGate/Contents/RequestFactoryManagerSrv:1.0' then
    begin
      result := Pointer(self as IServerGate_Contents_RequestFactoryManagerSrv);
      exit;
  end;
end;

function TServerGate_Contents_RequestFactoryManagerSrv_stub_clp.get_by_name_and_space(const name: AnsiString; const spacekey: AnsiString): IServerGate_Contents_Request;
var
  _srv: IServant;
  srv: IServerGate_Contents_RequestFactoryManagerSrv;
begin
  result := nil;
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TServerGate_Contents_RequestFactoryManagerSrv_serv._narrow(_srv);
      if srv <> nil then
        result := srv.get_by_name_and_space(name, spacekey)
    end;
  _postinvoke();
end;

function TServerGate_Contents_RequestFactoryManagerSrv_stub_clp.get(const page_id: TServerGate_Contents_PageId): IServerGate_Contents_Request;
var
  _srv: IServant;
  srv: IServerGate_Contents_RequestFactoryManagerSrv;
begin
  result := nil;
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TServerGate_Contents_RequestFactoryManagerSrv_serv._narrow(_srv);
      if srv <> nil then
        result := srv.get(page_id)
    end;
  _postinvoke();
end;

function TServerGate_Contents_RequestFactoryManagerSrv_stub_clp._create(const _type: TServerGate_Contents_RequestType; const importance: TServerGate_Contents_RequestImportance; const name: AnsiString; const parent: IServerGate_Contents_KPage): IServerGate_Contents_Request;
var
  _srv: IServant;
  srv: IServerGate_Contents_RequestFactoryManagerSrv;
begin
  result := nil;
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TServerGate_Contents_RequestFactoryManagerSrv_serv._narrow(_srv);
      if srv <> nil then
        result := srv._create(_type, importance, name, parent)
    end;
  _postinvoke();
end;

//***********************************************************
// TServerGate_Contents_RequestFactoryManagerSrv_serv
//***********************************************************
function TServerGate_Contents_RequestFactoryManagerSrv_serv._this(): IServerGate_Contents_RequestFactoryManagerSrv;
var
  obj: IORBObject;
begin
  obj := this();
  result := TServerGate_Contents_RequestFactoryManagerSrv._narrow(obj);
end;

function TServerGate_Contents_RequestFactoryManagerSrv_serv._is_a(const repoid: RepositoryID): Boolean;
begin
  result := repoid = 'IDL:garant.ru/ServerGate/Contents/RequestFactoryManagerSrv:1.0';
end;

function TServerGate_Contents_RequestFactoryManagerSrv_serv._primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID;
begin
  result := 'IDL:garant.ru/ServerGate/Contents/RequestFactoryManagerSrv:1.0';
end;

function TServerGate_Contents_RequestFactoryManagerSrv_serv._make_stub(const poa: IPOA; const obj : IORBObject): IORBObject;
begin
  result := TServerGate_Contents_RequestFactoryManagerSrv_stub_clp.Create(poa,obj);
end;

procedure TServerGate_Contents_RequestFactoryManagerSrv_serv.invoke(const serv: IStaticServerRequest);
begin
  if not _dispatch(serv) then
    begin
      serv.set_exception(BAD_OPERATION.Create(0, COMPLETED_NO) as IORBException);
      serv.write_results();
    end;
end;

function TServerGate_Contents_RequestFactoryManagerSrv_serv.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:garant.ru/ServerGate/Contents/RequestFactoryManagerSrv:1.0' then
    begin
      result := Pointer(IServerGate_Contents_RequestFactoryManagerSrv(self));
      exit;
    end;
end;

class function TServerGate_Contents_RequestFactoryManagerSrv_serv._narrow(const srv : IServant): IServerGate_Contents_RequestFactoryManagerSrv;
var
  p: Pointer;
begin
  result := nil;
  if srv = nil then exit;
  p := srv.narrow_helper('IDL:garant.ru/ServerGate/Contents/RequestFactoryManagerSrv:1.0');
  if p <> nil then
    result := IServerGate_Contents_RequestFactoryManagerSrv(p)
end;

function TServerGate_Contents_RequestFactoryManagerSrv_serv._dispatch(const req: IStaticServerRequest): Boolean;
var
  get_by_name_and_space_result: IServerGate_Contents_Request;
  get_by_name_and_space_name: AnsiString;
  get_by_name_and_space_spacekey: AnsiString;
  get_result: IServerGate_Contents_Request;
  get_page_id: TServerGate_Contents_PageId;
  _create_result: IServerGate_Contents_Request;
  _create_type: TServerGate_Contents_RequestType;
  _create_importance: TServerGate_Contents_RequestImportance;
  _create_name: AnsiString;
  _create_parent: IServerGate_Contents_KPage;
begin
  result := true;
  if req.op_name = 'get_by_name_and_space' then
    begin
      req.add_in_arg(StaticAny(stat_string,@get_by_name_and_space_name) as IStaticAny);
      req.add_in_arg(StaticAny(stat_string,@get_by_name_and_space_spacekey) as IStaticAny);
      req.set_result(StaticAny(ServerGate_Contents_Request_marshaller,@get_by_name_and_space_result) as IStaticAny);
      if not req.read_args() then  exit;
      req.set_exceptions_tc([_tc_CoreSrv_NoActiveFactory.typecode, _tc_ServerGate_Contents_PageNotFound.typecode, _tc_ServerGate_Contents_PermissionException.typecode, _tc_ServerGate_Contents_PageIsNotRequest.typecode]);
      try
        get_by_name_and_space_result := get_by_name_and_space(get_by_name_and_space_name, get_by_name_and_space_spacekey);
      except
        on NoActiveFactory: TCoreSrv_NoActiveFactory do
          req.set_exception(TCoreSrv_NoActiveFactory.Create(NoActiveFactory) as IORBException);
        on PageNotFound: TServerGate_Contents_PageNotFound do
          req.set_exception(TServerGate_Contents_PageNotFound.Create(PageNotFound) as IORBException);
        on PermissionException: TServerGate_Contents_PermissionException do
          req.set_exception(TServerGate_Contents_PermissionException.Create(PermissionException) as IORBException);
        on PageIsNotRequest: TServerGate_Contents_PageIsNotRequest do
          req.set_exception(TServerGate_Contents_PageIsNotRequest.Create(PageIsNotRequest) as IORBException);
      end;
      req.write_results();
      exit;
    end
  else if req.op_name = 'get' then
    begin
      req.add_in_arg(StaticAny(stat_longlong,@get_page_id) as IStaticAny);
      req.set_result(StaticAny(ServerGate_Contents_Request_marshaller,@get_result) as IStaticAny);
      if not req.read_args() then  exit;
      req.set_exceptions_tc([_tc_CoreSrv_NoActiveFactory.typecode, _tc_ServerGate_Contents_PageNotFound.typecode, _tc_ServerGate_Contents_PermissionException.typecode, _tc_ServerGate_Contents_PageIsNotRequest.typecode]);
      try
        get_result := get(get_page_id);
      except
        on NoActiveFactory: TCoreSrv_NoActiveFactory do
          req.set_exception(TCoreSrv_NoActiveFactory.Create(NoActiveFactory) as IORBException);
        on PageNotFound: TServerGate_Contents_PageNotFound do
          req.set_exception(TServerGate_Contents_PageNotFound.Create(PageNotFound) as IORBException);
        on PermissionException: TServerGate_Contents_PermissionException do
          req.set_exception(TServerGate_Contents_PermissionException.Create(PermissionException) as IORBException);
        on PageIsNotRequest: TServerGate_Contents_PageIsNotRequest do
          req.set_exception(TServerGate_Contents_PageIsNotRequest.Create(PageIsNotRequest) as IORBException);
      end;
      req.write_results();
      exit;
    end
  else if req.op_name = 'create' then
    begin
      req.add_in_arg(StaticAny(ServerGate_Contents_RequestType_marshaller,@_create_type) as IStaticAny);
      req.add_in_arg(StaticAny(ServerGate_Contents_RequestImportance_marshaller,@_create_importance) as IStaticAny);
      req.add_in_arg(StaticAny(stat_string,@_create_name) as IStaticAny);
      req.add_in_arg(StaticAny(ServerGate_Contents_KPage_marshaller,@_create_parent) as IStaticAny);
      req.set_result(StaticAny(ServerGate_Contents_Request_marshaller,@_create_result) as IStaticAny);
      if not req.read_args() then  exit;
      req.set_exceptions_tc([_tc_CoreSrv_NoActiveFactory.typecode, _tc_ServerGate_Contents_CantCreatePage.typecode, _tc_ServerGate_Contents_PermissionException.typecode]);
      try
        _create_result := _create(_create_type, _create_importance, _create_name, _create_parent);
      except
        on NoActiveFactory: TCoreSrv_NoActiveFactory do
          req.set_exception(TCoreSrv_NoActiveFactory.Create(NoActiveFactory) as IORBException);
        on CantCreatePage: TServerGate_Contents_CantCreatePage do
          req.set_exception(TServerGate_Contents_CantCreatePage.Create(CantCreatePage) as IORBException);
        on PermissionException: TServerGate_Contents_PermissionException do
          req.set_exception(TServerGate_Contents_PermissionException.Create(PermissionException) as IORBException);
      end;
      req.write_results();
      exit;
    end;
  result := false;
end;

//***********************************************************
// TServerGate_Contents_RequestFactoryManagerSrv_marshaller
//***********************************************************
function TServerGate_Contents_RequestFactoryManagerSrv_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  obj: IORBObject;
begin
  result := false;
  if not stat_Object.demarshal(dec,@obj) then exit;
  IServerGate_Contents_RequestFactoryManagerSrv(addr^) := TServerGate_Contents_RequestFactoryManagerSrv._narrow(obj);
  result := (obj = nil) or (Pointer(addr^) <> nil);
end;

procedure TServerGate_Contents_RequestFactoryManagerSrv_marshaller.marshal(enc: IEncoder;const addr : Pointer);
var
  obj: IORBObject;
begin
  obj := IServerGate_Contents_RequestFactoryManagerSrv(addr^) as IORBObject;
  stat_Object.marshal(enc,@Pointer(obj));
end;

procedure TServerGate_Contents_RequestFactoryManagerSrv_marshaller._free(var addr: Pointer);
begin
  IServerGate_Contents_RequestFactoryManagerSrv(addr^) := nil;
end;

procedure TServerGate_Contents_RequestFactoryManagerSrv_marshaller._create(var addr: Pointer);
begin
  IServerGate_Contents_RequestFactoryManagerSrv(addr^) := TServerGate_Contents_RequestFactoryManagerSrv_stub.Create();
end;

procedure TServerGate_Contents_RequestFactoryManagerSrv_marshaller._assign(dst, src: Pointer);
begin
  IServerGate_Contents_RequestFactoryManagerSrv(dst^) := IServerGate_Contents_RequestFactoryManagerSrv(src^);
end;

function TServerGate_Contents_RequestFactoryManagerSrv_marshaller.typecode: ITypeCode;
begin
  result := _tc_ServerGate_Contents_RequestFactoryManagerSrv.typecode;
end;

initialization
{!touched!}{$IfDef LogInit} WriteLn('W:\common\components\rtl\Garant\ServerGate\Contents.pas initialization enter'); {$EndIf}
  ServerGate_Contents_PageNotFound_marshaller := TServerGate_Contents_PageNotFound_marshaller.Create();
  ServerGate_Contents_CantCreatePage_marshaller := TServerGate_Contents_CantCreatePage_marshaller.Create();
  ServerGate_Contents_PermissionException_marshaller := TServerGate_Contents_PermissionException_marshaller.Create();
  ServerGate_Contents_MetadataEntity_marshaller := TServerGate_Contents_MetadataEntity_marshaller.Create();
  ServerGate_Contents_MetadataEntity_seq_marshaller := TServerGate_Contents_MetadataEntity_seq_marshaller.Create();
  ServerGate_Contents_KPage_marshaller := TServerGate_Contents_KPage_marshaller.Create();
  ServerGate_Contents_KPageFactoryManagerSrv_marshaller := TServerGate_Contents_KPageFactoryManagerSrv_marshaller.Create();
  ServerGate_Contents_RequestImportance_marshaller := TServerGate_Contents_RequestImportance_marshaller.Create();
  ServerGate_Contents_RequestType_marshaller := TServerGate_Contents_RequestType_marshaller.Create();
  ServerGate_Contents_PageIsNotRequest_marshaller := TServerGate_Contents_PageIsNotRequest_marshaller.Create();
  ServerGate_Contents_CantChangeState_marshaller := TServerGate_Contents_CantChangeState_marshaller.Create();
  ServerGate_Contents_Request_marshaller := TServerGate_Contents_Request_marshaller.Create();
  ServerGate_Contents_RequestFactoryManagerSrv_marshaller := TServerGate_Contents_RequestFactoryManagerSrv_marshaller.Create();
  _tc_ServerGate_Contents_PageNotFound := CreateTypeCodeConst('010000001600000054000000010000003300000049444c3a676172616e742e72752f536572766572476174652f436f6e74656e74732f50'+
    '6167654e6f74466f756e643a312e3000000d000000506167654e6f74466f756e640000000000000000');
  _tc_ServerGate_Contents_CantCreatePage := CreateTypeCodeConst('010000001600000058000000010000003500000049444c3a676172616e742e72752f536572766572476174652f436f6e74656e74732f43'+
    '616e74437265617465506167653a312e30000000000f00000043616e7443726561746550616765000000000000');
  _tc_ServerGate_Contents_PermissionException := CreateTypeCodeConst('010000001600000060000000010000003a00000049444c3a676172616e742e72752f536572766572476174652f436f6e74656e74732f50'+
    '65726d697373696f6e457863657074696f6e3a312e30000000140000005065726d697373696f6e457863657074696f6e0000000000');
  _tc_ServerGate_Contents_MetadataEntity := CreateTypeCodeConst('010000000f0000007c000000010000003500000049444c3a676172616e742e72752f536572766572476174652f436f6e74656e74732f4d'+
    '65746164617461456e746974793a312e30000000000f0000004d65746164617461456e74697479000002000000040000006b6579001200'+
    '0000000000000600000076616c75650000001200000000000000');
  _tc_ServerGate_Contents_MetadataEntity_seq := CreateTypeCodeConst('01000000130000008c000000010000000f0000007c000000010000003500000049444c3a676172616e742e72752f536572766572476174'+
    '652f436f6e74656e74732f4d65746164617461456e746974793a312e30000000000f0000004d65746164617461456e7469747900000200'+
    '0000040000006b65790012000000000000000600000076616c7565000000120000000000000000000000');
  _tc_ServerGate_Contents_KPage := CreateTypeCodeConst('010000000e0000003e000000010000002c00000049444c3a676172616e742e72752f536572766572476174652f436f6e74656e74732f4b'+
    '506167653a312e3000060000004b5061676500');
  _tc_ServerGate_Contents_KPageFactoryManagerSrv := CreateTypeCodeConst('010000000e00000063000000010000003d00000049444c3a676172616e742e72752f536572766572476174652f436f6e74656e74732f4b'+
    '50616765466163746f72794d616e616765725372763a312e3000000000170000004b50616765466163746f72794d616e6167657253727600');
  _tc_ServerGate_Contents_RequestImportance := CreateTypeCodeConst('01000000110000008f000000010000003800000049444c3a676172616e742e72752f536572766572476174652f436f6e74656e74732f52'+
    '657175657374496d706f7274616e63653a312e30001200000052657175657374496d706f7274616e636500000004000000090000004352'+
    '49544943414c00000000060000004d414a4f52000000070000004e4f524d414c0000070000004d494e494f5200');
  _tc_ServerGate_Contents_RequestType := CreateTypeCodeConst('010000001100000062000000010000003200000049444c3a676172616e742e72752f536572766572476174652f436f6e74656e74732f52'+
    '657175657374547970653a312e300000000c000000526571756573745479706500010000000e000000496e7465726e616c4572726f7200');
  _tc_ServerGate_Contents_PageIsNotRequest := CreateTypeCodeConst('01000000160000005c000000010000003700000049444c3a676172616e742e72752f536572766572476174652f436f6e74656e74732f50'+
    '61676549734e6f74526571756573743a312e300000110000005061676549734e6f74526571756573740000000000000000');
  _tc_ServerGate_Contents_CantChangeState := CreateTypeCodeConst('010000001600000058000000010000003600000049444c3a676172616e742e72752f536572766572476174652f436f6e74656e74732f43'+
    '616e744368616e676553746174653a312e300000001000000043616e744368616e676553746174650000000000');
  _tc_ServerGate_Contents_Request := CreateTypeCodeConst('010000000e00000044000000010000002e00000049444c3a676172616e742e72752f536572766572476174652f436f6e74656e74732f52'+
    '6571756573743a312e30000000080000005265717565737400');
  _tc_ServerGate_Contents_RequestFactoryManagerSrv := CreateTypeCodeConst('010000000e00000065000000010000003f00000049444c3a676172616e742e72752f536572766572476174652f436f6e74656e74732f52'+
    '657175657374466163746f72794d616e616765725372763a312e3000001900000052657175657374466163746f72794d616e6167657253727600');
{!touched!}{$IfDef LogInit} WriteLn('W:\common\components\rtl\Garant\ServerGate\Contents.pas initialization leave'); {$EndIf}
end.
