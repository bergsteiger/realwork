
(* lexical analyzer template (TP Lex V3.0), V1.0 3-2-91 AG *)

(* global definitions: *)

  (* Lexical analyzer for the sample Yacc program in Expr.y. *)

const stOperator = 2;



function yylex(aLex: Tl3Lex; var yylval : YYSType) : Integer;

procedure yyaction ( yyruleno : Integer );
  (* local definitions: *)

begin
  (* actions: *)
 with aLex do 
  case yyruleno of
  1:
                               begin
                                  yylval.yyInteger := m4InSentence;
                                  return(Distance);
                               end;
  2:
                               begin
                                  yylval.yyInteger := m4InPara;
                                  return(Distance);
                               end;
  3:
                               begin
                                  yylval.yyInteger := m4InDocument;
                                  return(Distance);
                               end;
  4:
                                 begin
                                  yylval.yyInteger := StrToInt(yyText);
                                  return(Distance);
                                 end;
  5:
                                 begin
                                  start(0);
                                 end;
  6:
                                 begin
                                  start(0);
                                  yylval.yyShortString := yyText;
                                  return(RusWord);
                                 end;
  7:
                                 begin
                                  start(0);
                                  yylval.yyShortString := yyText;
                                  return(Number);
                                 end;
  8:
                                 begin
                                  start(0);
                                  yylval.yyShortString := yyText;
                                  return(Mixed);
                                 end;
  9:
                                 begin
                                  start(0);
                                  yylval.yyShortString := yyText;
                                  return(MaskRusWord);
                                 end;
  10:
                                 begin
                                  start(0);
                                  yylval.yyShortString := yyText;
                                  return(MaskMixed);
                                 end;
  11:
                                 begin
                                  start(stOperator);
                                  return(_AND_);
                                 end;
  12:
                                 begin
                                  start(stOperator);
                                  return(_Follow_);
                                 end;
  13:
                                 begin
                                  start(0);
                                  return(_AND_);
                                 end;
  14,
  15:
                                 begin
                                  start(0);
                                  return(_OR_);
                                 end;
  16,
  17:
                                 begin
                                  start(0);
                                  return(_NOT_);
                                 end;
  18,
  19,
  20:
                                 begin
                                  start(0);
                                  return(_Follow_);
                                 end;
  21,
  22:
                                 begin
                                  start(0);
                                  returnc(yytext[1]);
                                 end;
  end;
end(*yyaction*);

(* DFA table: *)

type YYTRec = record
                cc : set of Char;
                s  : Integer;
              end;

const

yynmarks   = 102;
yynmatches = 99;
yyntrans   = 183;
yynstates  = 56;

yyk : array [1..yynmarks] of Integer = (
  { 0: }
  19,
  { 1: }
  19,
  { 2: }
  5,
  19,
  { 3: }
  5,
  19,
  { 4: }
  6,
  8,
  9,
  10,
  21,
  { 5: }
  7,
  8,
  10,
  21,
  { 6: }
  8,
  10,
  21,
  { 7: }
  9,
  10,
  21,
  { 8: }
  19,
  21,
  { 9: }
  11,
  21,
  { 10: }
  12,
  21,
  { 11: }
  15,
  21,
  { 12: }
  17,
  21,
  { 13: }
  18,
  22,
  { 14: }
  20,
  21,
  { 15: }
  21,
  { 16: }
  1,
  8,
  10,
  21,
  { 17: }
  2,
  8,
  10,
  21,
  { 18: }
  3,
  8,
  10,
  21,
  { 19: }
  4,
  7,
  8,
  10,
  21,
  { 20: }
  5,
  19,
  21,
  { 21: }
  1,
  6,
  8,
  9,
  10,
  21,
  { 22: }
  2,
  6,
  8,
  9,
  10,
  21,
  { 23: }
  3,
  6,
  8,
  9,
  10,
  21,
  { 24: }
  6,
  8,
  9,
  10,
  { 25: }
  8,
  10,
  { 26: }
  9,
  10,
  { 27: }
  7,
  8,
  10,
  { 28: }
  10,
  { 29: }
  19,
  { 30: }
  11,
  { 31: }
  12,
  { 32: }
  { 33: }
  15,
  { 34: }
  { 35: }
  17,
  { 36: }
  18,
  { 37: }
  20,
  { 38: }
  { 39: }
  { 40: }
  { 41: }
  { 42: }
  { 43: }
  { 44: }
  4,
  7,
  8,
  10,
  { 45: }
  { 46: }
  5,
  19,
  { 47: }
  13,
  { 48: }
  { 49: }
  { 50: }
  { 51: }
  { 52: }
  14,
  { 53: }
  { 54: }
  { 55: }
  16
);

yym : array [1..yynmatches] of Integer = (
{ 0: }
  19,
{ 1: }
  19,
{ 2: }
  5,
  19,
{ 3: }
  5,
  19,
{ 4: }
  6,
  8,
  9,
  10,
  21,
{ 5: }
  7,
  8,
  10,
  21,
{ 6: }
  8,
  10,
  21,
{ 7: }
  9,
  10,
  21,
{ 8: }
  19,
  21,
{ 9: }
  11,
  21,
{ 10: }
  12,
  21,
{ 11: }
  15,
  21,
{ 12: }
  17,
  21,
{ 13: }
  22,
{ 14: }
  20,
  21,
{ 15: }
  21,
{ 16: }
  8,
  10,
  21,
{ 17: }
  8,
  10,
  21,
{ 18: }
  8,
  10,
  21,
{ 19: }
  7,
  8,
  10,
  21,
{ 20: }
  5,
  19,
  21,
{ 21: }
  6,
  8,
  9,
  10,
  21,
{ 22: }
  6,
  8,
  9,
  10,
  21,
{ 23: }
  6,
  8,
  9,
  10,
  21,
{ 24: }
  6,
  8,
  9,
  10,
{ 25: }
  8,
  10,
{ 26: }
  9,
  10,
{ 27: }
  7,
  8,
  10,
{ 28: }
  10,
{ 29: }
  19,
{ 30: }
  11,
{ 31: }
  12,
{ 32: }
{ 33: }
  15,
{ 34: }
{ 35: }
  17,
{ 36: }
{ 37: }
  20,
{ 38: }
  18,
{ 39: }
  18,
{ 40: }
  18,
{ 41: }
  1,
{ 42: }
  2,
{ 43: }
  3,
{ 44: }
  7,
  8,
  10,
{ 45: }
  4,
{ 46: }
  5,
  19,
{ 47: }
  13,
{ 48: }
{ 49: }
{ 50: }
{ 51: }
{ 52: }
  14,
{ 53: }
{ 54: }
{ 55: }
  16
);

yyt : array [1..yyntrans] of YYTrec = (
{ 0: }
  ( cc: [ #1..#9,#11..#31,'!'..'%',''''..')','+',';'..'>',
            '[',']'..'`','{','}',#127,#242..#255 ]; s: 15),
  ( cc: [ #10 ]; s: 13),
  ( cc: [ ' ' ]; s: 8),
  ( cc: [ '&' ]; s: 9),
  ( cc: [ '*','?' ]; s: 7),
  ( cc: [ ','..'/','@','\' ]; s: 14),
  ( cc: [ '0'..'9' ]; s: 5),
  ( cc: [ ':' ]; s: 10),
  ( cc: [ 'A'..'Z','a'..'z' ]; s: 6),
  ( cc: [ '|' ]; s: 11),
  ( cc: [ '~' ]; s: 12),
  ( cc: [ #128..#241 ]; s: 4),
{ 1: }
  ( cc: [ #1..#9,#11..#31,'!'..'%',''''..')','+',';'..'>',
            '[',']'..'`','{','}',#127,#242..#255 ]; s: 15),
  ( cc: [ #10 ]; s: 13),
  ( cc: [ ' ' ]; s: 8),
  ( cc: [ '&' ]; s: 9),
  ( cc: [ '*','?' ]; s: 7),
  ( cc: [ ','..'/','@','\' ]; s: 14),
  ( cc: [ '0'..'9' ]; s: 5),
  ( cc: [ ':' ]; s: 10),
  ( cc: [ 'A'..'Z','a'..'z' ]; s: 6),
  ( cc: [ '|' ]; s: 11),
  ( cc: [ '~' ]; s: 12),
  ( cc: [ #128..#241 ]; s: 4),
{ 2: }
  ( cc: [ #1..#9,#11..#31,'!'..'%',''''..')','+',';'..'>',
            '[',']'..'`','{','}',#127,#242..#255 ]; s: 15),
  ( cc: [ #10 ]; s: 13),
  ( cc: [ ' ' ]; s: 20),
  ( cc: [ '&' ]; s: 9),
  ( cc: [ '*','?' ]; s: 7),
  ( cc: [ ','..'/','@','\' ]; s: 14),
  ( cc: [ '0'..'9' ]; s: 19),
  ( cc: [ ':' ]; s: 10),
  ( cc: [ 'A','a' ]; s: 17),
  ( cc: [ 'B','C','E'..'R','T'..'Z','b','c','e'..'r',
            't'..'z' ]; s: 6),
  ( cc: [ 'D','d' ]; s: 18),
  ( cc: [ 'S','s' ]; s: 16),
  ( cc: [ '|' ]; s: 11),
  ( cc: [ '~' ]; s: 12),
  ( cc: [ #128,#160 ]; s: 22),
  ( cc: [ #129..#131,#133..#142,#144..#159,#161..#163,
            #165..#174,#176..#241 ]; s: 4),
  ( cc: [ #132,#164 ]; s: 23),
  ( cc: [ #143,#175 ]; s: 21),
{ 3: }
  ( cc: [ #1..#9,#11..#31,'!'..'%',''''..')','+',';'..'>',
            '[',']'..'`','{','}',#127,#242..#255 ]; s: 15),
  ( cc: [ #10 ]; s: 13),
  ( cc: [ ' ' ]; s: 20),
  ( cc: [ '&' ]; s: 9),
  ( cc: [ '*','?' ]; s: 7),
  ( cc: [ ','..'/','@','\' ]; s: 14),
  ( cc: [ '0'..'9' ]; s: 19),
  ( cc: [ ':' ]; s: 10),
  ( cc: [ 'A','a' ]; s: 17),
  ( cc: [ 'B','C','E'..'R','T'..'Z','b','c','e'..'r',
            't'..'z' ]; s: 6),
  ( cc: [ 'D','d' ]; s: 18),
  ( cc: [ 'S','s' ]; s: 16),
  ( cc: [ '|' ]; s: 11),
  ( cc: [ '~' ]; s: 12),
  ( cc: [ #128,#160 ]; s: 22),
  ( cc: [ #129..#131,#133..#142,#144..#159,#161..#163,
            #165..#174,#176..#241 ]; s: 4),
  ( cc: [ #132,#164 ]; s: 23),
  ( cc: [ #143,#175 ]; s: 21),
{ 4: }
  ( cc: [ '*','?' ]; s: 26),
  ( cc: [ '0'..'9','A'..'Z','a'..'z' ]; s: 25),
  ( cc: [ #128..#241 ]; s: 24),
{ 5: }
  ( cc: [ '*','?' ]; s: 28),
  ( cc: [ '0'..'9' ]; s: 27),
  ( cc: [ 'A'..'Z','a'..'z',#128..#241 ]; s: 25),
{ 6: }
  ( cc: [ '*','?' ]; s: 28),
  ( cc: [ '0'..'9','A'..'Z','a'..'z',#128..#241 ]; s: 25),
{ 7: }
  ( cc: [ '*','?',#128..#241 ]; s: 26),
  ( cc: [ '0'..'9','A'..'Z','a'..'z' ]; s: 28),
{ 8: }
  ( cc: [ #10 ]; s: 36),
  ( cc: [ ' ' ]; s: 29),
  ( cc: [ '&' ]; s: 30),
  ( cc: [ ','..'/','@','\' ]; s: 37),
  ( cc: [ ':' ]; s: 31),
  ( cc: [ '|' ]; s: 33),
  ( cc: [ '~' ]; s: 35),
  ( cc: [ #136,#168 ]; s: 32),
  ( cc: [ #141,#173 ]; s: 34),
{ 9: }
{ 10: }
  ( cc: [ ' ' ]; s: 31),
{ 11: }
  ( cc: [ ' ' ]; s: 33),
{ 12: }
  ( cc: [ ' ' ]; s: 35),
{ 13: }
  ( cc: [ #10,' ' ]; s: 36),
  ( cc: [ '*','?' ]; s: 40),
  ( cc: [ '0'..'9' ]; s: 39),
  ( cc: [ #128..#241 ]; s: 38),
{ 14: }
  ( cc: [ ' ' ]; s: 37),
{ 15: }
{ 16: }
  ( cc: [ ' ' ]; s: 41),
  ( cc: [ '*','?' ]; s: 28),
  ( cc: [ '0'..'9','A'..'Z','a'..'z',#128..#241 ]; s: 25),
{ 17: }
  ( cc: [ ' ' ]; s: 42),
  ( cc: [ '*','?' ]; s: 28),
  ( cc: [ '0'..'9','A'..'Z','a'..'z',#128..#241 ]; s: 25),
{ 18: }
  ( cc: [ ' ' ]; s: 43),
  ( cc: [ '*','?' ]; s: 28),
  ( cc: [ '0'..'9','A'..'Z','a'..'z',#128..#241 ]; s: 25),
{ 19: }
  ( cc: [ ' ' ]; s: 45),
  ( cc: [ '*','?' ]; s: 28),
  ( cc: [ '0'..'9' ]; s: 44),
  ( cc: [ 'A'..'Z','a'..'z',#128..#241 ]; s: 25),
{ 20: }
  ( cc: [ #10 ]; s: 36),
  ( cc: [ ' ' ]; s: 46),
  ( cc: [ '&' ]; s: 30),
  ( cc: [ ','..'/','@','\' ]; s: 37),
  ( cc: [ ':' ]; s: 31),
  ( cc: [ '|' ]; s: 33),
  ( cc: [ '~' ]; s: 35),
  ( cc: [ #136,#168 ]; s: 32),
  ( cc: [ #141,#173 ]; s: 34),
{ 21: }
  ( cc: [ ' ' ]; s: 41),
  ( cc: [ '*','?' ]; s: 26),
  ( cc: [ '0'..'9','A'..'Z','a'..'z' ]; s: 25),
  ( cc: [ #128..#241 ]; s: 24),
{ 22: }
  ( cc: [ ' ' ]; s: 42),
  ( cc: [ '*','?' ]; s: 26),
  ( cc: [ '0'..'9','A'..'Z','a'..'z' ]; s: 25),
  ( cc: [ #128..#241 ]; s: 24),
{ 23: }
  ( cc: [ ' ' ]; s: 43),
  ( cc: [ '*','?' ]; s: 26),
  ( cc: [ '0'..'9','A'..'Z','a'..'z' ]; s: 25),
  ( cc: [ #128..#241 ]; s: 24),
{ 24: }
  ( cc: [ '*','?' ]; s: 26),
  ( cc: [ '0'..'9','A'..'Z','a'..'z' ]; s: 25),
  ( cc: [ #128..#241 ]; s: 24),
{ 25: }
  ( cc: [ '*','?' ]; s: 28),
  ( cc: [ '0'..'9','A'..'Z','a'..'z',#128..#241 ]; s: 25),
{ 26: }
  ( cc: [ '*','?',#128..#241 ]; s: 26),
  ( cc: [ '0'..'9','A'..'Z','a'..'z' ]; s: 28),
{ 27: }
  ( cc: [ '*','?' ]; s: 28),
  ( cc: [ '0'..'9' ]; s: 27),
  ( cc: [ 'A'..'Z','a'..'z',#128..#241 ]; s: 25),
{ 28: }
  ( cc: [ '*','0'..'9','?','A'..'Z','a'..'z',#128..#241 ]; s: 28),
{ 29: }
  ( cc: [ #10 ]; s: 36),
  ( cc: [ ' ' ]; s: 29),
  ( cc: [ '&' ]; s: 30),
  ( cc: [ ','..'/','@','\' ]; s: 37),
  ( cc: [ ':' ]; s: 31),
  ( cc: [ '|' ]; s: 33),
  ( cc: [ '~' ]; s: 35),
  ( cc: [ #136,#168 ]; s: 32),
  ( cc: [ #141,#173 ]; s: 34),
{ 30: }
{ 31: }
  ( cc: [ ' ' ]; s: 31),
{ 32: }
  ( cc: [ ' ' ]; s: 47),
  ( cc: [ #139,#171 ]; s: 48),
{ 33: }
  ( cc: [ ' ' ]; s: 33),
{ 34: }
  ( cc: [ #142,#174 ]; s: 49),
{ 35: }
  ( cc: [ ' ' ]; s: 35),
{ 36: }
  ( cc: [ #10,' ' ]; s: 36),
  ( cc: [ '*','?' ]; s: 40),
  ( cc: [ '0'..'9' ]; s: 39),
  ( cc: [ #128..#241 ]; s: 38),
{ 37: }
  ( cc: [ ' ' ]; s: 37),
{ 38: }
  ( cc: [ '*','?' ]; s: 40),
  ( cc: [ #128..#241 ]; s: 38),
{ 39: }
  ( cc: [ '0'..'9' ]; s: 39),
{ 40: }
  ( cc: [ '*','?',#128..#241 ]; s: 40),
{ 41: }
  ( cc: [ ' ' ]; s: 41),
{ 42: }
  ( cc: [ ' ' ]; s: 42),
{ 43: }
  ( cc: [ ' ' ]; s: 43),
{ 44: }
  ( cc: [ ' ' ]; s: 45),
  ( cc: [ '*','?' ]; s: 28),
  ( cc: [ '0'..'9' ]; s: 44),
  ( cc: [ 'A'..'Z','a'..'z',#128..#241 ]; s: 25),
{ 45: }
  ( cc: [ ' ' ]; s: 45),
{ 46: }
  ( cc: [ #10 ]; s: 36),
  ( cc: [ ' ' ]; s: 46),
  ( cc: [ '&' ]; s: 30),
  ( cc: [ ','..'/','@','\' ]; s: 37),
  ( cc: [ ':' ]; s: 31),
  ( cc: [ '|' ]; s: 33),
  ( cc: [ '~' ]; s: 35),
  ( cc: [ #136,#168 ]; s: 32),
  ( cc: [ #141,#173 ]; s: 34),
{ 47: }
  ( cc: [ ' ' ]; s: 47),
{ 48: }
  ( cc: [ #136,#168 ]; s: 50),
{ 49: }
  ( cc: [ ' ' ]; s: 51),
{ 50: }
  ( cc: [ ' ' ]; s: 52),
{ 51: }
  ( cc: [ ' ' ]; s: 51),
  ( cc: [ #141,#173 ]; s: 53),
{ 52: }
  ( cc: [ ' ' ]; s: 52),
{ 53: }
  ( cc: [ #133,#165 ]; s: 54),
{ 54: }
  ( cc: [ ' ' ]; s: 55),
{ 55: }
  ( cc: [ ' ' ]; s: 55)
);

yykl : array [0..yynstates-1] of Integer = (
{ 0: } 1,
{ 1: } 2,
{ 2: } 3,
{ 3: } 5,
{ 4: } 7,
{ 5: } 12,
{ 6: } 16,
{ 7: } 19,
{ 8: } 22,
{ 9: } 24,
{ 10: } 26,
{ 11: } 28,
{ 12: } 30,
{ 13: } 32,
{ 14: } 34,
{ 15: } 36,
{ 16: } 37,
{ 17: } 41,
{ 18: } 45,
{ 19: } 49,
{ 20: } 54,
{ 21: } 57,
{ 22: } 63,
{ 23: } 69,
{ 24: } 75,
{ 25: } 79,
{ 26: } 81,
{ 27: } 83,
{ 28: } 86,
{ 29: } 87,
{ 30: } 88,
{ 31: } 89,
{ 32: } 90,
{ 33: } 90,
{ 34: } 91,
{ 35: } 91,
{ 36: } 92,
{ 37: } 93,
{ 38: } 94,
{ 39: } 94,
{ 40: } 94,
{ 41: } 94,
{ 42: } 94,
{ 43: } 94,
{ 44: } 94,
{ 45: } 98,
{ 46: } 98,
{ 47: } 100,
{ 48: } 101,
{ 49: } 101,
{ 50: } 101,
{ 51: } 101,
{ 52: } 101,
{ 53: } 102,
{ 54: } 102,
{ 55: } 102
);

yykh : array [0..yynstates-1] of Integer = (
{ 0: } 1,
{ 1: } 2,
{ 2: } 4,
{ 3: } 6,
{ 4: } 11,
{ 5: } 15,
{ 6: } 18,
{ 7: } 21,
{ 8: } 23,
{ 9: } 25,
{ 10: } 27,
{ 11: } 29,
{ 12: } 31,
{ 13: } 33,
{ 14: } 35,
{ 15: } 36,
{ 16: } 40,
{ 17: } 44,
{ 18: } 48,
{ 19: } 53,
{ 20: } 56,
{ 21: } 62,
{ 22: } 68,
{ 23: } 74,
{ 24: } 78,
{ 25: } 80,
{ 26: } 82,
{ 27: } 85,
{ 28: } 86,
{ 29: } 87,
{ 30: } 88,
{ 31: } 89,
{ 32: } 89,
{ 33: } 90,
{ 34: } 90,
{ 35: } 91,
{ 36: } 92,
{ 37: } 93,
{ 38: } 93,
{ 39: } 93,
{ 40: } 93,
{ 41: } 93,
{ 42: } 93,
{ 43: } 93,
{ 44: } 97,
{ 45: } 97,
{ 46: } 99,
{ 47: } 100,
{ 48: } 100,
{ 49: } 100,
{ 50: } 100,
{ 51: } 100,
{ 52: } 101,
{ 53: } 101,
{ 54: } 101,
{ 55: } 102
);

yyml : array [0..yynstates-1] of Integer = (
{ 0: } 1,
{ 1: } 2,
{ 2: } 3,
{ 3: } 5,
{ 4: } 7,
{ 5: } 12,
{ 6: } 16,
{ 7: } 19,
{ 8: } 22,
{ 9: } 24,
{ 10: } 26,
{ 11: } 28,
{ 12: } 30,
{ 13: } 32,
{ 14: } 33,
{ 15: } 35,
{ 16: } 36,
{ 17: } 39,
{ 18: } 42,
{ 19: } 45,
{ 20: } 49,
{ 21: } 52,
{ 22: } 57,
{ 23: } 62,
{ 24: } 67,
{ 25: } 71,
{ 26: } 73,
{ 27: } 75,
{ 28: } 78,
{ 29: } 79,
{ 30: } 80,
{ 31: } 81,
{ 32: } 82,
{ 33: } 82,
{ 34: } 83,
{ 35: } 83,
{ 36: } 84,
{ 37: } 84,
{ 38: } 85,
{ 39: } 86,
{ 40: } 87,
{ 41: } 88,
{ 42: } 89,
{ 43: } 90,
{ 44: } 91,
{ 45: } 94,
{ 46: } 95,
{ 47: } 97,
{ 48: } 98,
{ 49: } 98,
{ 50: } 98,
{ 51: } 98,
{ 52: } 98,
{ 53: } 99,
{ 54: } 99,
{ 55: } 99
);

yymh : array [0..yynstates-1] of Integer = (
{ 0: } 1,
{ 1: } 2,
{ 2: } 4,
{ 3: } 6,
{ 4: } 11,
{ 5: } 15,
{ 6: } 18,
{ 7: } 21,
{ 8: } 23,
{ 9: } 25,
{ 10: } 27,
{ 11: } 29,
{ 12: } 31,
{ 13: } 32,
{ 14: } 34,
{ 15: } 35,
{ 16: } 38,
{ 17: } 41,
{ 18: } 44,
{ 19: } 48,
{ 20: } 51,
{ 21: } 56,
{ 22: } 61,
{ 23: } 66,
{ 24: } 70,
{ 25: } 72,
{ 26: } 74,
{ 27: } 77,
{ 28: } 78,
{ 29: } 79,
{ 30: } 80,
{ 31: } 81,
{ 32: } 81,
{ 33: } 82,
{ 34: } 82,
{ 35: } 83,
{ 36: } 83,
{ 37: } 84,
{ 38: } 85,
{ 39: } 86,
{ 40: } 87,
{ 41: } 88,
{ 42: } 89,
{ 43: } 90,
{ 44: } 93,
{ 45: } 94,
{ 46: } 96,
{ 47: } 97,
{ 48: } 97,
{ 49: } 97,
{ 50: } 97,
{ 51: } 97,
{ 52: } 98,
{ 53: } 98,
{ 54: } 98,
{ 55: } 99
);

yytl : array [0..yynstates-1] of Integer = (
{ 0: } 1,
{ 1: } 13,
{ 2: } 25,
{ 3: } 43,
{ 4: } 61,
{ 5: } 64,
{ 6: } 67,
{ 7: } 69,
{ 8: } 71,
{ 9: } 80,
{ 10: } 80,
{ 11: } 81,
{ 12: } 82,
{ 13: } 83,
{ 14: } 87,
{ 15: } 88,
{ 16: } 88,
{ 17: } 91,
{ 18: } 94,
{ 19: } 97,
{ 20: } 101,
{ 21: } 110,
{ 22: } 114,
{ 23: } 118,
{ 24: } 122,
{ 25: } 125,
{ 26: } 127,
{ 27: } 129,
{ 28: } 132,
{ 29: } 133,
{ 30: } 142,
{ 31: } 142,
{ 32: } 143,
{ 33: } 145,
{ 34: } 146,
{ 35: } 147,
{ 36: } 148,
{ 37: } 152,
{ 38: } 153,
{ 39: } 155,
{ 40: } 156,
{ 41: } 157,
{ 42: } 158,
{ 43: } 159,
{ 44: } 160,
{ 45: } 164,
{ 46: } 165,
{ 47: } 174,
{ 48: } 175,
{ 49: } 176,
{ 50: } 177,
{ 51: } 178,
{ 52: } 180,
{ 53: } 181,
{ 54: } 182,
{ 55: } 183
);

yyth : array [0..yynstates-1] of Integer = (
{ 0: } 12,
{ 1: } 24,
{ 2: } 42,
{ 3: } 60,
{ 4: } 63,
{ 5: } 66,
{ 6: } 68,
{ 7: } 70,
{ 8: } 79,
{ 9: } 79,
{ 10: } 80,
{ 11: } 81,
{ 12: } 82,
{ 13: } 86,
{ 14: } 87,
{ 15: } 87,
{ 16: } 90,
{ 17: } 93,
{ 18: } 96,
{ 19: } 100,
{ 20: } 109,
{ 21: } 113,
{ 22: } 117,
{ 23: } 121,
{ 24: } 124,
{ 25: } 126,
{ 26: } 128,
{ 27: } 131,
{ 28: } 132,
{ 29: } 141,
{ 30: } 141,
{ 31: } 142,
{ 32: } 144,
{ 33: } 145,
{ 34: } 146,
{ 35: } 147,
{ 36: } 151,
{ 37: } 152,
{ 38: } 154,
{ 39: } 155,
{ 40: } 156,
{ 41: } 157,
{ 42: } 158,
{ 43: } 159,
{ 44: } 163,
{ 45: } 164,
{ 46: } 173,
{ 47: } 174,
{ 48: } 175,
{ 49: } 176,
{ 50: } 177,
{ 51: } 179,
{ 52: } 180,
{ 53: } 181,
{ 54: } 182,
{ 55: } 183
);


var yyn : Integer;

begin
 with aLex do begin

  repeat

   (* initialize: *)

   yynew;

   repeat

    (* mark positions and matches: *)

    for yyn := yykl[yystate] to     yykh[yystate] do yymark(yyk[yyn]);
    for yyn := yymh[yystate] downto yyml[yystate] do yymatch(yym[yyn]);

    if yytl[yystate]>yyth[yystate] then break; (* dead state *)

    (* get next character: *)

    yyscan;

    (* determine action: *)

    yyn := yytl[yystate];
    while (yyn<=yyth[yystate]) and not (yyactchar in yyt[yyn].cc) do inc(yyn);
    if yyn>yyth[yystate] then break;
      (* no transition on yyactchar in this state *)

    (* switch to new state: *)

    yystate := yyt[yyn].s;

   until false;

   repeat
   (* execute action: *)

   if yyfind(yyrule) then
     begin
       yyaction(yyrule);
       if yyreject then continue;
     end
   else if not yydefault and yywrap then
     begin
       yyclear;
       return(0);
     end;
    break;
   until false;
   
  until yydone;

  yylex := yyretval;

 end;//with aLex
 
end(*yylex*);

