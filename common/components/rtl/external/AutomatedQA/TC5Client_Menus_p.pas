////////////////////////////////////////////////////////////////////////////////
//
//  AutomatedQA Corp
//  Import unit generated by PRegister program
//
//  Source file: C:\Program Files\Borland\Delphi7\Source\Vcl\Menus.pas
//
////////////////////////////////////////////////////////////////////////////////

unit TC5Client_Menus_p;

interface

uses
  Controls,
  Windows,
  SysUtils,
  Classes,
  Contnrs,
  Messages,
  Graphics,
  ImgList,
  ActnList,
  Menus,
  ActiveX,
  tc5OpenAppClasses,
  tc5PublicInfo;

implementation

function __coerce_TMenuAutoFlag(const Arg: TVariantArg): TMenuAutoFlag;
begin
  Result := TMenuAutoFlag(OleVariant(Arg));
end;

function __coerce_TBiDiMode(const Arg: TVariantArg): TBiDiMode;
begin
  Result := TBiDiMode(OleVariant(Arg));
end;

function __coerce_TCustomImageList(const Arg: TVariantArg): TCustomImageList;
begin
  Result := VarToObject(OleVariant(Arg)) as TCustomImageList;
end;

function __coerce_TMainMenu(const Arg: TVariantArg): TMainMenu;
begin
  Result := VarToObject(OleVariant(Arg)) as TMainMenu;
end;

function __coerce_HMENU(const Arg: TVariantArg): HMENU;
begin
  Result := HMENU(OleVariant(Arg));
end;

function __coerce_HWND(const Arg: TVariantArg): HWND;
begin
  Result := HWND(OleVariant(Arg));
end;

function __coerce_TFindItemKind(const Arg: TVariantArg): TFindItemKind;
begin
  Result := TFindItemKind(OleVariant(Arg));
end;

function __coerce_TBasicAction(const Arg: TVariantArg): TBasicAction;
begin
  Result := VarToObject(OleVariant(Arg)) as TBasicAction;
end;

function __coerce_TMenuItemAutoFlag(const Arg: TVariantArg): TMenuItemAutoFlag;
begin
  Result := TMenuItemAutoFlag(OleVariant(Arg));
end;

function __coerce_TBitmap(const Arg: TVariantArg): TBitmap;
begin
  Result := VarToObject(OleVariant(Arg)) as TBitmap;
end;

function __coerce_TMenuBreak(const Arg: TVariantArg): TMenuBreak;
begin
  Result := TMenuBreak(OleVariant(Arg));
end;

function __coerce_THelpContext(const Arg: TVariantArg): THelpContext;
begin
  Result := THelpContext(OleVariant(Arg));
end;

function __coerce_TImageIndex(const Arg: TVariantArg): TImageIndex;
begin
  Result := TImageIndex(OleVariant(Arg));
end;

function __coerce_TShortCut(const Arg: TVariantArg): TShortCut;
begin
  Result := TShortCut(OleVariant(Arg));
end;

function __coerce_TMenuItem(const Arg: TVariantArg): TMenuItem;
begin
  Result := VarToObject(OleVariant(Arg)) as TMenuItem;
end;

function __coerce_TPopupMenu(const Arg: TVariantArg): TPopupMenu;
begin
  Result := VarToObject(OleVariant(Arg)) as TPopupMenu;
end;

function __coerce_TComponent(const Arg: TVariantArg): TComponent;
begin
  Result := VarToObject(OleVariant(Arg)) as TComponent;
end;

function __coerce_TPopupAlignment(const Arg: TVariantArg): TPopupAlignment;
begin
  Result := TPopupAlignment(OleVariant(Arg));
end;

function __coerce_TMenuAnimation(const Arg: TVariantArg): TMenuAnimation;
begin
  VarToSet(TypeInfo(TMenuAnimation), OleVariant(Arg), Result, SizeOf(Result));
end;

function __coerce_TTrackButton(const Arg: TVariantArg): TTrackButton;
begin
  Result := TTrackButton(OleVariant(Arg));
end;


procedure __Get_TMainMenu_AutoHotkeys_TMenuAutoFlag(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMainMenu);
  Value := TMainMenu(Instance).AutoHotkeys;
end;

procedure __Put_TMainMenu_AutoHotkeys_TMenuAutoFlag(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMainMenu);
  TMainMenu(Instance).AutoHotkeys := __coerce_TMenuAutoFlag(Args^[0]);
end;

procedure __Get_TMainMenu_AutoLineReduction_TMenuAutoFlag(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMainMenu);
  Value := TMainMenu(Instance).AutoLineReduction;
end;

procedure __Put_TMainMenu_AutoLineReduction_TMenuAutoFlag(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMainMenu);
  TMainMenu(Instance).AutoLineReduction := __coerce_TMenuAutoFlag(Args^[0]);
end;

procedure __Get_TMainMenu_AutoMerge_Bool(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMainMenu);
  Value := TMainMenu(Instance).AutoMerge;
end;

procedure __Put_TMainMenu_AutoMerge_Bool(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMainMenu);
  TMainMenu(Instance).AutoMerge := __coerce_Boolean(Args^[0]);
end;

procedure __Get_TMainMenu_BiDiMode_TBiDiMode(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMainMenu);
  Value := TMainMenu(Instance).BiDiMode;
end;

procedure __Put_TMainMenu_BiDiMode_TBiDiMode(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMainMenu);
  TMainMenu(Instance).BiDiMode := __coerce_TBiDiMode(Args^[0]);
end;

procedure __Get_TMainMenu_Images_TCustomImageList(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMainMenu);
  Value := VarFromObject(TMainMenu(Instance).Images);
end;

procedure __Put_TMainMenu_Images_TCustomImageList(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMainMenu);
  TMainMenu(Instance).Images := __coerce_TCustomImageList(Args^[0]);
end;

procedure __Get_TMainMenu_OwnerDraw_Bool(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMainMenu);
  Value := TMainMenu(Instance).OwnerDraw;
end;

procedure __Put_TMainMenu_OwnerDraw_Bool(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMainMenu);
  TMainMenu(Instance).OwnerDraw := __coerce_Boolean(Args^[0]);
end;

procedure __Get_TMainMenu_ParentBiDiMode_Bool(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMainMenu);
  Value := TMainMenu(Instance).ParentBiDiMode;
end;

procedure __Put_TMainMenu_ParentBiDiMode_Bool(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMainMenu);
  TMainMenu(Instance).ParentBiDiMode := __coerce_Boolean(Args^[0]);
end;

procedure __Invoke_TMainMenu_Merge_TMainMenu(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMainMenu);
  TMainMenu(Instance).Merge(__coerce_TMainMenu(Args^[0]));
end;

procedure __Invoke_TMainMenu_Unmerge_TMainMenu(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMainMenu);
  TMainMenu(Instance).Unmerge(__coerce_TMainMenu(Args^[0]));
end;

procedure __Invoke_TMainMenu_SetOle2MenuHandle_HMENU(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMainMenu);
  TMainMenu(Instance).SetOle2MenuHandle(__coerce_HMENU(Args^[0]));
end;

procedure __Get_TMenu_Images_TCustomImageList(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenu);
  Value := VarFromObject(TMenu(Instance).Images);
end;

procedure __Put_TMenu_Images_TCustomImageList(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenu);
  TMenu(Instance).Images := __coerce_TCustomImageList(Args^[0]);
end;

procedure __Get_TMenu_AutoHotkeys_TMenuAutoFlag(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenu);
  Value := TMenu(Instance).AutoHotkeys;
end;

procedure __Put_TMenu_AutoHotkeys_TMenuAutoFlag(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenu);
  TMenu(Instance).AutoHotkeys := __coerce_TMenuAutoFlag(Args^[0]);
end;

procedure __Get_TMenu_AutoLineReduction_TMenuAutoFlag(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenu);
  Value := TMenu(Instance).AutoLineReduction;
end;

procedure __Put_TMenu_AutoLineReduction_TMenuAutoFlag(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenu);
  TMenu(Instance).AutoLineReduction := __coerce_TMenuAutoFlag(Args^[0]);
end;

procedure __Get_TMenu_BiDiMode_TBiDiMode(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenu);
  Value := TMenu(Instance).BiDiMode;
end;

procedure __Put_TMenu_BiDiMode_TBiDiMode(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenu);
  TMenu(Instance).BiDiMode := __coerce_TBiDiMode(Args^[0]);
end;

procedure __Get_TMenu_Handle_HMENU(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenu);
  Value := TMenu(Instance).Handle;
end;

procedure __Get_TMenu_OwnerDraw_Bool(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenu);
  Value := TMenu(Instance).OwnerDraw;
end;

procedure __Put_TMenu_OwnerDraw_Bool(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenu);
  TMenu(Instance).OwnerDraw := __coerce_Boolean(Args^[0]);
end;

procedure __Get_TMenu_ParentBiDiMode_Bool(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenu);
  Value := TMenu(Instance).ParentBiDiMode;
end;

procedure __Put_TMenu_ParentBiDiMode_Bool(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenu);
  TMenu(Instance).ParentBiDiMode := __coerce_Boolean(Args^[0]);
end;

procedure __Get_TMenu_WindowHandle_HWND(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenu);
  Value := TMenu(Instance).WindowHandle;
end;

procedure __Put_TMenu_WindowHandle_HWND(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenu);
  TMenu(Instance).WindowHandle := __coerce_HWND(Args^[0]);
end;

procedure __Get_TMenu_Items_TMenuItem(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenu);
  Value := VarFromObject(TMenu(Instance).Items);
end;

procedure __Invoke_TMenu_DispatchCommand_BoolUI2(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenu);
  Value := TMenu(Instance).DispatchCommand(__coerce_Word(Args^[0]));
end;

procedure __Invoke_TMenu_DispatchPopup_BoolHMENU(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenu);
  Value := TMenu(Instance).DispatchPopup(__coerce_HMENU(Args^[0]));
end;

procedure __Invoke_TMenu_FindItem_TMenuItemI4TFindItemKind(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenu);
  Value := VarFromObject(TMenu(Instance).FindItem(__coerce_Integer(Args^[1]), __coerce_TFindItemKind(Args^[0])));
end;

procedure __Invoke_TMenu_GetHelpContext_THelpContextI4Bool(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenu);
  Value := TMenu(Instance).GetHelpContext(__coerce_Integer(Args^[1]), __coerce_Boolean(Args^[0]));
end;

procedure __Invoke_TMenu_IsRightToLeft_Bool(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenu);
  Value := TMenu(Instance).IsRightToLeft();
end;

procedure __Invoke_TMenu_ParentBiDiModeChanged_Bool(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenu);
  TMenu(Instance).ParentBiDiModeChanged();
end;

procedure __Invoke_TMenu_ParentBiDiModeChanged_BoolObj(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenu);
  TMenu(Instance).ParentBiDiModeChanged(__coerce_TObject(Args^[0]));
end;

procedure __Get_TMenuItem_Command_UI2(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  Value := TMenuItem(Instance).Command;
end;

procedure __Get_TMenuItem_Handle_HMENU(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  Value := TMenuItem(Instance).Handle;
end;

procedure __Get_TMenuItem_Count_I4(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  Value := TMenuItem(Instance).Count;
end;

procedure __Get_TMenuItem_Items_TMenuItemI4(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  Value := VarFromObject(TMenuItem(Instance).Items[__coerce_Integer(Args^[0])]);
end;

procedure __Get_TMenuItem_MenuIndex_I4(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  Value := TMenuItem(Instance).MenuIndex;
end;

procedure __Put_TMenuItem_MenuIndex_I4(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  TMenuItem(Instance).MenuIndex := __coerce_Integer(Args^[0]);
end;

procedure __Get_TMenuItem_Parent_TMenuItem(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  Value := VarFromObject(TMenuItem(Instance).Parent);
end;

procedure __Get_TMenuItem_Action_TBasicAction(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  Value := VarFromObject(TMenuItem(Instance).Action);
end;

procedure __Put_TMenuItem_Action_TBasicAction(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  TMenuItem(Instance).Action := __coerce_TBasicAction(Args^[0]);
end;

procedure __Get_TMenuItem_AutoCheck_Bool(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  Value := TMenuItem(Instance).AutoCheck;
end;

procedure __Put_TMenuItem_AutoCheck_Bool(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  TMenuItem(Instance).AutoCheck := __coerce_Boolean(Args^[0]);
end;

procedure __Get_TMenuItem_AutoHotkeys_TMenuItemAutoFlag(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  Value := TMenuItem(Instance).AutoHotkeys;
end;

procedure __Put_TMenuItem_AutoHotkeys_TMenuItemAutoFlag(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  TMenuItem(Instance).AutoHotkeys := __coerce_TMenuItemAutoFlag(Args^[0]);
end;

procedure __Get_TMenuItem_AutoLineReduction_TMenuItemAutoFlag(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  Value := TMenuItem(Instance).AutoLineReduction;
end;

procedure __Put_TMenuItem_AutoLineReduction_TMenuItemAutoFlag(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  TMenuItem(Instance).AutoLineReduction := __coerce_TMenuItemAutoFlag(Args^[0]);
end;

procedure __Get_TMenuItem_Bitmap_TBitmap(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  Value := VarFromObject(TMenuItem(Instance).Bitmap);
end;

procedure __Put_TMenuItem_Bitmap_TBitmap(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  TMenuItem(Instance).Bitmap := __coerce_TBitmap(Args^[0]);
end;

procedure __Get_TMenuItem_Break_TMenuBreak(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  Value := TMenuItem(Instance).Break;
end;

procedure __Put_TMenuItem_Break_TMenuBreak(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  TMenuItem(Instance).Break := __coerce_TMenuBreak(Args^[0]);
end;

procedure __Get_TMenuItem_Caption_Str(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  Value := TMenuItem(Instance).Caption;
end;

procedure __Put_TMenuItem_Caption_Str(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  TMenuItem(Instance).Caption := __coerce_string(Args^[0]);
end;

procedure __Get_TMenuItem_Checked_Bool(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  Value := TMenuItem(Instance).Checked;
end;

procedure __Put_TMenuItem_Checked_Bool(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  TMenuItem(Instance).Checked := __coerce_Boolean(Args^[0]);
end;

procedure __Get_TMenuItem_SubMenuImages_TCustomImageList(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  Value := VarFromObject(TMenuItem(Instance).SubMenuImages);
end;

procedure __Put_TMenuItem_SubMenuImages_TCustomImageList(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  TMenuItem(Instance).SubMenuImages := __coerce_TCustomImageList(Args^[0]);
end;

procedure __Get_TMenuItem_Default_Bool(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  Value := TMenuItem(Instance).Default;
end;

procedure __Put_TMenuItem_Default_Bool(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  TMenuItem(Instance).Default := __coerce_Boolean(Args^[0]);
end;

procedure __Get_TMenuItem_Enabled_Bool(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  Value := TMenuItem(Instance).Enabled;
end;

procedure __Put_TMenuItem_Enabled_Bool(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  TMenuItem(Instance).Enabled := __coerce_Boolean(Args^[0]);
end;

procedure __Get_TMenuItem_GroupIndex_UI1(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  Value := TMenuItem(Instance).GroupIndex;
end;

procedure __Put_TMenuItem_GroupIndex_UI1(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  TMenuItem(Instance).GroupIndex := __coerce_Byte(Args^[0]);
end;

procedure __Get_TMenuItem_HelpContext_THelpContext(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  Value := TMenuItem(Instance).HelpContext;
end;

procedure __Put_TMenuItem_HelpContext_THelpContext(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  TMenuItem(Instance).HelpContext := __coerce_THelpContext(Args^[0]);
end;

procedure __Get_TMenuItem_Hint_Str(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  Value := TMenuItem(Instance).Hint;
end;

procedure __Put_TMenuItem_Hint_Str(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  TMenuItem(Instance).Hint := __coerce_string(Args^[0]);
end;

procedure __Get_TMenuItem_ImageIndex_TImageIndex(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  Value := TMenuItem(Instance).ImageIndex;
end;

procedure __Put_TMenuItem_ImageIndex_TImageIndex(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  TMenuItem(Instance).ImageIndex := __coerce_TImageIndex(Args^[0]);
end;

procedure __Get_TMenuItem_RadioItem_Bool(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  Value := TMenuItem(Instance).RadioItem;
end;

procedure __Put_TMenuItem_RadioItem_Bool(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  TMenuItem(Instance).RadioItem := __coerce_Boolean(Args^[0]);
end;

procedure __Get_TMenuItem_ShortCut_TShortCut(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  Value := TMenuItem(Instance).ShortCut;
end;

procedure __Put_TMenuItem_ShortCut_TShortCut(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  TMenuItem(Instance).ShortCut := __coerce_TShortCut(Args^[0]);
end;

procedure __Get_TMenuItem_Visible_Bool(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  Value := TMenuItem(Instance).Visible;
end;

procedure __Put_TMenuItem_Visible_Bool(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  TMenuItem(Instance).Visible := __coerce_Boolean(Args^[0]);
end;

procedure __Invoke_TMenuItem_InitiateAction(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  TMenuItem(Instance).InitiateAction();
end;

procedure __Invoke_TMenuItem_Insert_I4TMenuItem(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  TMenuItem(Instance).Insert(__coerce_Integer(Args^[1]), __coerce_TMenuItem(Args^[0]));
end;

procedure __Invoke_TMenuItem_Delete_I4(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  TMenuItem(Instance).Delete(__coerce_Integer(Args^[0]));
end;

procedure __Invoke_TMenuItem_Clear(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  TMenuItem(Instance).Clear();
end;

procedure __Invoke_TMenuItem_Click(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  TMenuItem(Instance).Click();
end;

procedure __Invoke_TMenuItem_Find_TMenuItemStr(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  Value := VarFromObject(TMenuItem(Instance).Find(__coerce_string(Args^[0])));
end;

procedure __Invoke_TMenuItem_IndexOf_I4TMenuItem(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  Value := TMenuItem(Instance).IndexOf(__coerce_TMenuItem(Args^[0]));
end;

procedure __Invoke_TMenuItem_IsLine_Bool(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  Value := TMenuItem(Instance).IsLine();
end;

procedure __Invoke_TMenuItem_GetImageList_TCustomImageList(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  Value := VarFromObject(TMenuItem(Instance).GetImageList());
end;

procedure __Invoke_TMenuItem_GetParentMenu_TMenu(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  Value := VarFromObject(TMenuItem(Instance).GetParentMenu());
end;

procedure __Invoke_TMenuItem_NewTopLine_I4(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  Value := TMenuItem(Instance).NewTopLine();
end;

procedure __Invoke_TMenuItem_NewBottomLine_I4(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  Value := TMenuItem(Instance).NewBottomLine();
end;

procedure __Invoke_TMenuItem_InsertNewLineBefore_I4TMenuItem(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  Value := TMenuItem(Instance).InsertNewLineBefore(__coerce_TMenuItem(Args^[0]));
end;

procedure __Invoke_TMenuItem_InsertNewLineAfter_I4TMenuItem(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  Value := TMenuItem(Instance).InsertNewLineAfter(__coerce_TMenuItem(Args^[0]));
end;

procedure __Invoke_TMenuItem_Add_I4TMenuItem(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  TMenuItem(Instance).Add(__coerce_TMenuItem(Args^[0]));
end;

procedure __Invoke_TMenuItem_Remove_I4TMenuItem(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  TMenuItem(Instance).Remove(__coerce_TMenuItem(Args^[0]));
end;

procedure __Invoke_TMenuItem_RethinkHotkeys_Bool(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  Value := TMenuItem(Instance).RethinkHotkeys();
end;

procedure __Invoke_TMenuItem_RethinkLines_Bool(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItem);
  Value := TMenuItem(Instance).RethinkLines();
end;

procedure __Invoke_TMenuItemStack_ClearItem_TMenuItem(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TMenuItemStack);
  TMenuItemStack(Instance).ClearItem(__coerce_TMenuItem(Args^[0]));
end;

procedure __Get_TPopupList_Window_HWND(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TPopupList);
  Value := TPopupList(Instance).Window;
end;

procedure __Invoke_TPopupList_Add_TPopupMenu(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TPopupList);
  TPopupList(Instance).Add(__coerce_TPopupMenu(Args^[0]));
end;

procedure __Invoke_TPopupList_Remove_TPopupMenu(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TPopupList);
  TPopupList(Instance).Remove(__coerce_TPopupMenu(Args^[0]));
end;

procedure __Get_TPopupMenu_PopupComponent_TComponent(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TPopupMenu);
  Value := VarFromObject(TPopupMenu(Instance).PopupComponent);
end;

procedure __Put_TPopupMenu_PopupComponent_TComponent(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TPopupMenu);
  TPopupMenu(Instance).PopupComponent := __coerce_TComponent(Args^[0]);
end;

procedure __Get_TPopupMenu_Alignment_TPopupAlignment(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TPopupMenu);
  Value := TPopupMenu(Instance).Alignment;
end;

procedure __Put_TPopupMenu_Alignment_TPopupAlignment(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TPopupMenu);
  TPopupMenu(Instance).Alignment := __coerce_TPopupAlignment(Args^[0]);
end;

procedure __Get_TPopupMenu_AutoHotkeys_TMenuAutoFlag(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TPopupMenu);
  Value := TPopupMenu(Instance).AutoHotkeys;
end;

procedure __Put_TPopupMenu_AutoHotkeys_TMenuAutoFlag(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TPopupMenu);
  TPopupMenu(Instance).AutoHotkeys := __coerce_TMenuAutoFlag(Args^[0]);
end;

procedure __Get_TPopupMenu_AutoLineReduction_TMenuAutoFlag(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TPopupMenu);
  Value := TPopupMenu(Instance).AutoLineReduction;
end;

procedure __Put_TPopupMenu_AutoLineReduction_TMenuAutoFlag(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TPopupMenu);
  TPopupMenu(Instance).AutoLineReduction := __coerce_TMenuAutoFlag(Args^[0]);
end;

procedure __Get_TPopupMenu_AutoPopup_Bool(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TPopupMenu);
  Value := TPopupMenu(Instance).AutoPopup;
end;

procedure __Put_TPopupMenu_AutoPopup_Bool(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TPopupMenu);
  TPopupMenu(Instance).AutoPopup := __coerce_Boolean(Args^[0]);
end;

procedure __Get_TPopupMenu_BiDiMode_TBiDiMode(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TPopupMenu);
  Value := TPopupMenu(Instance).BiDiMode;
end;

procedure __Put_TPopupMenu_BiDiMode_TBiDiMode(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TPopupMenu);
  TPopupMenu(Instance).BiDiMode := __coerce_TBiDiMode(Args^[0]);
end;

procedure __Get_TPopupMenu_HelpContext_THelpContext(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TPopupMenu);
  Value := TPopupMenu(Instance).HelpContext;
end;

procedure __Put_TPopupMenu_HelpContext_THelpContext(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TPopupMenu);
  TPopupMenu(Instance).HelpContext := __coerce_THelpContext(Args^[0]);
end;

procedure __Get_TPopupMenu_Images_TCustomImageList(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TPopupMenu);
  Value := VarFromObject(TPopupMenu(Instance).Images);
end;

procedure __Put_TPopupMenu_Images_TCustomImageList(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TPopupMenu);
  TPopupMenu(Instance).Images := __coerce_TCustomImageList(Args^[0]);
end;

procedure __Get_TPopupMenu_MenuAnimation_TMenuAnimation(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
var
  Tmp: TMenuAnimation;
begin
  Assert(Instance is TPopupMenu);
  Tmp := TPopupMenu(Instance).MenuAnimation;
  Value := VarFromSet(TypeInfo(TMenuAnimation), tmp, sizeof(tmp));
end;

procedure __Put_TPopupMenu_MenuAnimation_TMenuAnimation(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TPopupMenu);
  TPopupMenu(Instance).MenuAnimation := __coerce_TMenuAnimation(Args^[0]);
end;

procedure __Get_TPopupMenu_OwnerDraw_Bool(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TPopupMenu);
  Value := TPopupMenu(Instance).OwnerDraw;
end;

procedure __Put_TPopupMenu_OwnerDraw_Bool(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TPopupMenu);
  TPopupMenu(Instance).OwnerDraw := __coerce_Boolean(Args^[0]);
end;

procedure __Get_TPopupMenu_ParentBiDiMode_Bool(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TPopupMenu);
  Value := TPopupMenu(Instance).ParentBiDiMode;
end;

procedure __Put_TPopupMenu_ParentBiDiMode_Bool(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TPopupMenu);
  TPopupMenu(Instance).ParentBiDiMode := __coerce_Boolean(Args^[0]);
end;

procedure __Get_TPopupMenu_TrackButton_TTrackButton(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TPopupMenu);
  Value := TPopupMenu(Instance).TrackButton;
end;

procedure __Put_TPopupMenu_TrackButton_TTrackButton(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TPopupMenu);
  TPopupMenu(Instance).TrackButton := __coerce_TTrackButton(Args^[0]);
end;

procedure __Invoke_TPopupMenu_Popup_I4I4(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TPopupMenu);
  TPopupMenu(Instance).Popup(__coerce_Integer(Args^[1]), __coerce_Integer(Args^[0]));
end;


//QC
type
  TControlFriend = class(TControl);
procedure __Get_PopupMenu_TPopupMenu(Instance: TObject; Args: PVariantArgList; out Value: OleVariant; Cookie: Cardinal); stdcall;
begin
  Assert(Instance is TControl);
  Value := VarFromObject(TControlFriend(Instance).PopupMenu);
end;


procedure _RegisterPublicInformation;
begin
  _RegisterMethod(TControl, mtGet, 'QCPopupMenu', TypeInfo(TPopupMenu), [], [], __Get_PopupMenu_TPopupMenu);

  _RegisterMethod(TMainMenu, mtGet, 'AutoHotkeys', TypeInfo(TMenuAutoFlag), [], [], __Get_TMainMenu_AutoHotkeys_TMenuAutoFlag);
  _RegisterMethod(TMainMenu, mtPut, 'AutoHotkeys', nil, [], [], __Put_TMainMenu_AutoHotkeys_TMenuAutoFlag);
  _RegisterMethod(TMainMenu, mtGet, 'AutoLineReduction', TypeInfo(TMenuAutoFlag), [], [], __Get_TMainMenu_AutoLineReduction_TMenuAutoFlag);
  _RegisterMethod(TMainMenu, mtPut, 'AutoLineReduction', nil, [], [], __Put_TMainMenu_AutoLineReduction_TMenuAutoFlag);
  _RegisterMethod(TMainMenu, mtGet, 'AutoMerge', TypeInfo(Boolean), [], [], __Get_TMainMenu_AutoMerge_Bool);
  _RegisterMethod(TMainMenu, mtPut, 'AutoMerge', nil, [], [], __Put_TMainMenu_AutoMerge_Bool);
  _RegisterMethod(TMainMenu, mtGet, 'BiDiMode', TypeInfo(TBiDiMode), [], [], __Get_TMainMenu_BiDiMode_TBiDiMode);
  _RegisterMethod(TMainMenu, mtPut, 'BiDiMode', nil, [], [], __Put_TMainMenu_BiDiMode_TBiDiMode);
  _RegisterMethod(TMainMenu, mtGet, 'Images', TypeInfo(TCustomImageList), [], [], __Get_TMainMenu_Images_TCustomImageList);
  _RegisterMethod(TMainMenu, mtPut, 'Images', nil, [], [], __Put_TMainMenu_Images_TCustomImageList);
  _RegisterMethod(TMainMenu, mtGet, 'OwnerDraw', TypeInfo(Boolean), [], [], __Get_TMainMenu_OwnerDraw_Bool);
  _RegisterMethod(TMainMenu, mtPut, 'OwnerDraw', nil, [], [], __Put_TMainMenu_OwnerDraw_Bool);
  _RegisterMethod(TMainMenu, mtGet, 'ParentBiDiMode', TypeInfo(Boolean), [], [], __Get_TMainMenu_ParentBiDiMode_Bool);
  _RegisterMethod(TMainMenu, mtPut, 'ParentBiDiMode', nil, [], [], __Put_TMainMenu_ParentBiDiMode_Bool);
  _RegisterMethod(TMainMenu, mtInvoke, 'Merge', nil, [TypeInfo(TMainMenu)], ['Menu'], __Invoke_TMainMenu_Merge_TMainMenu);
  _RegisterMethod(TMainMenu, mtInvoke, 'Unmerge', nil, [TypeInfo(TMainMenu)], ['Menu'], __Invoke_TMainMenu_Unmerge_TMainMenu);
  _RegisterMethod(TMainMenu, mtInvoke, 'SetOle2MenuHandle', nil, [TypeInfo(HMENU)], ['Handle'], __Invoke_TMainMenu_SetOle2MenuHandle_HMENU);
  _RegisterMethod(TMenu, mtGet, 'Images', TypeInfo(TCustomImageList), [], [], __Get_TMenu_Images_TCustomImageList);
  _RegisterMethod(TMenu, mtPut, 'Images', nil, [], [], __Put_TMenu_Images_TCustomImageList);
  _RegisterMethod(TMenu, mtGet, 'AutoHotkeys', TypeInfo(TMenuAutoFlag), [], [], __Get_TMenu_AutoHotkeys_TMenuAutoFlag);
  _RegisterMethod(TMenu, mtPut, 'AutoHotkeys', nil, [], [], __Put_TMenu_AutoHotkeys_TMenuAutoFlag);
  _RegisterMethod(TMenu, mtGet, 'AutoLineReduction', TypeInfo(TMenuAutoFlag), [], [], __Get_TMenu_AutoLineReduction_TMenuAutoFlag);
  _RegisterMethod(TMenu, mtPut, 'AutoLineReduction', nil, [], [], __Put_TMenu_AutoLineReduction_TMenuAutoFlag);
  _RegisterMethod(TMenu, mtGet, 'BiDiMode', TypeInfo(TBiDiMode), [], [], __Get_TMenu_BiDiMode_TBiDiMode);
  _RegisterMethod(TMenu, mtPut, 'BiDiMode', nil, [], [], __Put_TMenu_BiDiMode_TBiDiMode);
  _RegisterMethod(TMenu, mtGet, 'Handle', TypeInfo(HMENU), [], [], __Get_TMenu_Handle_HMENU);
  _RegisterMethod(TMenu, mtGet, 'OwnerDraw', TypeInfo(Boolean), [], [], __Get_TMenu_OwnerDraw_Bool);
  _RegisterMethod(TMenu, mtPut, 'OwnerDraw', nil, [], [], __Put_TMenu_OwnerDraw_Bool);
  _RegisterMethod(TMenu, mtGet, 'ParentBiDiMode', TypeInfo(Boolean), [], [], __Get_TMenu_ParentBiDiMode_Bool);
  _RegisterMethod(TMenu, mtPut, 'ParentBiDiMode', nil, [], [], __Put_TMenu_ParentBiDiMode_Bool);
  _RegisterMethod(TMenu, mtGet, 'WindowHandle', TypeInfo(HWND), [], [], __Get_TMenu_WindowHandle_HWND);
  _RegisterMethod(TMenu, mtPut, 'WindowHandle', nil, [], [], __Put_TMenu_WindowHandle_HWND);
  _RegisterMethod(TMenu, mtGet, 'Items', TypeInfo(TMenuItem), [], [], __Get_TMenu_Items_TMenuItem);
  _RegisterMethod(TMenu, mtInvoke, 'DispatchCommand', TypeInfo(Boolean), [TypeInfo(Word)], ['ACommand'], __Invoke_TMenu_DispatchCommand_BoolUI2);
  _RegisterMethod(TMenu, mtInvoke, 'DispatchPopup', TypeInfo(Boolean), [TypeInfo(HMENU)], ['AHandle'], __Invoke_TMenu_DispatchPopup_BoolHMENU);
  _RegisterMethod(TMenu, mtInvoke, 'FindItem', TypeInfo(TMenuItem), [TypeInfo(Integer), TypeInfo(TFindItemKind)], ['Value', 'Kind'], __Invoke_TMenu_FindItem_TMenuItemI4TFindItemKind);
  _RegisterMethod(TMenu, mtInvoke, 'GetHelpContext', TypeInfo(THelpContext), [TypeInfo(Integer), TypeInfo(Boolean)], ['Value', 'ByCommand'], __Invoke_TMenu_GetHelpContext_THelpContextI4Bool);
  _RegisterMethod(TMenu, mtInvoke, 'IsRightToLeft', TypeInfo(Boolean), [], [], __Invoke_TMenu_IsRightToLeft_Bool);
  _RegisterMethod(TMenu, mtInvoke, 'ParentBiDiModeChanged', nil, [], [], __Invoke_TMenu_ParentBiDiModeChanged_Bool);
  _RegisterMethod(TMenu, mtInvoke, 'ParentBiDiModeChanged', nil, [TypeInfo(TObject)], ['AControl'], __Invoke_TMenu_ParentBiDiModeChanged_BoolObj);
  _RegisterMethod(TMenuItem, mtGet, 'Command', TypeInfo(Word), [], [], __Get_TMenuItem_Command_UI2);
  _RegisterMethod(TMenuItem, mtGet, 'Handle', TypeInfo(HMENU), [], [], __Get_TMenuItem_Handle_HMENU);
  _RegisterMethod(TMenuItem, mtGet, 'Count', TypeInfo(Integer), [], [], __Get_TMenuItem_Count_I4);
  _RegisterMethod(TMenuItem, mtGet, 'Items', TypeInfo(TMenuItem), [TypeInfo(Integer)], ['Index'], __Get_TMenuItem_Items_TMenuItemI4);
  _RegisterMethod(TMenuItem, mtGet, 'MenuIndex', TypeInfo(Integer), [], [], __Get_TMenuItem_MenuIndex_I4);
  _RegisterMethod(TMenuItem, mtPut, 'MenuIndex', nil, [], [], __Put_TMenuItem_MenuIndex_I4);
  _RegisterMethod(TMenuItem, mtGet, 'Parent', TypeInfo(TMenuItem), [], [], __Get_TMenuItem_Parent_TMenuItem);
  _RegisterMethod(TMenuItem, mtGet, 'Action', TypeInfo(TBasicAction), [], [], __Get_TMenuItem_Action_TBasicAction);
  _RegisterMethod(TMenuItem, mtPut, 'Action', nil, [], [], __Put_TMenuItem_Action_TBasicAction);
  _RegisterMethod(TMenuItem, mtGet, 'AutoCheck', TypeInfo(Boolean), [], [], __Get_TMenuItem_AutoCheck_Bool);
  _RegisterMethod(TMenuItem, mtPut, 'AutoCheck', nil, [], [], __Put_TMenuItem_AutoCheck_Bool);
  _RegisterMethod(TMenuItem, mtGet, 'AutoHotkeys', TypeInfo(TMenuItemAutoFlag), [], [], __Get_TMenuItem_AutoHotkeys_TMenuItemAutoFlag);
  _RegisterMethod(TMenuItem, mtPut, 'AutoHotkeys', nil, [], [], __Put_TMenuItem_AutoHotkeys_TMenuItemAutoFlag);
  _RegisterMethod(TMenuItem, mtGet, 'AutoLineReduction', TypeInfo(TMenuItemAutoFlag), [], [], __Get_TMenuItem_AutoLineReduction_TMenuItemAutoFlag);
  _RegisterMethod(TMenuItem, mtPut, 'AutoLineReduction', nil, [], [], __Put_TMenuItem_AutoLineReduction_TMenuItemAutoFlag);
  _RegisterMethod(TMenuItem, mtGet, 'Bitmap', TypeInfo(TBitmap), [], [], __Get_TMenuItem_Bitmap_TBitmap);
  _RegisterMethod(TMenuItem, mtPut, 'Bitmap', nil, [], [], __Put_TMenuItem_Bitmap_TBitmap);
  _RegisterMethod(TMenuItem, mtGet, 'Break', TypeInfo(TMenuBreak), [], [], __Get_TMenuItem_Break_TMenuBreak);
  _RegisterMethod(TMenuItem, mtPut, 'Break', nil, [], [], __Put_TMenuItem_Break_TMenuBreak);
  _RegisterMethod(TMenuItem, mtGet, 'Caption', TypeInfo(string), [], [], __Get_TMenuItem_Caption_Str);
  _RegisterMethod(TMenuItem, mtPut, 'Caption', nil, [], [], __Put_TMenuItem_Caption_Str);
  _RegisterMethod(TMenuItem, mtGet, 'Checked', TypeInfo(Boolean), [], [], __Get_TMenuItem_Checked_Bool);
  _RegisterMethod(TMenuItem, mtPut, 'Checked', nil, [], [], __Put_TMenuItem_Checked_Bool);
  _RegisterMethod(TMenuItem, mtGet, 'SubMenuImages', TypeInfo(TCustomImageList), [], [], __Get_TMenuItem_SubMenuImages_TCustomImageList);
  _RegisterMethod(TMenuItem, mtPut, 'SubMenuImages', nil, [], [], __Put_TMenuItem_SubMenuImages_TCustomImageList);
  _RegisterMethod(TMenuItem, mtGet, 'Default', TypeInfo(Boolean), [], [], __Get_TMenuItem_Default_Bool);
  _RegisterMethod(TMenuItem, mtPut, 'Default', nil, [], [], __Put_TMenuItem_Default_Bool);
  _RegisterMethod(TMenuItem, mtGet, 'Enabled', TypeInfo(Boolean), [], [], __Get_TMenuItem_Enabled_Bool);
  _RegisterMethod(TMenuItem, mtPut, 'Enabled', nil, [], [], __Put_TMenuItem_Enabled_Bool);
  _RegisterMethod(TMenuItem, mtGet, 'GroupIndex', TypeInfo(Byte), [], [], __Get_TMenuItem_GroupIndex_UI1);
  _RegisterMethod(TMenuItem, mtPut, 'GroupIndex', nil, [], [], __Put_TMenuItem_GroupIndex_UI1);
  _RegisterMethod(TMenuItem, mtGet, 'HelpContext', TypeInfo(THelpContext), [], [], __Get_TMenuItem_HelpContext_THelpContext);
  _RegisterMethod(TMenuItem, mtPut, 'HelpContext', nil, [], [], __Put_TMenuItem_HelpContext_THelpContext);
  _RegisterMethod(TMenuItem, mtGet, 'Hint', TypeInfo(string), [], [], __Get_TMenuItem_Hint_Str);
  _RegisterMethod(TMenuItem, mtPut, 'Hint', nil, [], [], __Put_TMenuItem_Hint_Str);
  _RegisterMethod(TMenuItem, mtGet, 'ImageIndex', TypeInfo(TImageIndex), [], [], __Get_TMenuItem_ImageIndex_TImageIndex);
  _RegisterMethod(TMenuItem, mtPut, 'ImageIndex', nil, [], [], __Put_TMenuItem_ImageIndex_TImageIndex);
  _RegisterMethod(TMenuItem, mtGet, 'RadioItem', TypeInfo(Boolean), [], [], __Get_TMenuItem_RadioItem_Bool);
  _RegisterMethod(TMenuItem, mtPut, 'RadioItem', nil, [], [], __Put_TMenuItem_RadioItem_Bool);
  _RegisterMethod(TMenuItem, mtGet, 'ShortCut', TypeInfo(TShortCut), [], [], __Get_TMenuItem_ShortCut_TShortCut);
  _RegisterMethod(TMenuItem, mtPut, 'ShortCut', nil, [], [], __Put_TMenuItem_ShortCut_TShortCut);
  _RegisterMethod(TMenuItem, mtGet, 'Visible', TypeInfo(Boolean), [], [], __Get_TMenuItem_Visible_Bool);
  _RegisterMethod(TMenuItem, mtPut, 'Visible', nil, [], [], __Put_TMenuItem_Visible_Bool);
  _RegisterMethod(TMenuItem, mtInvoke, 'InitiateAction', nil, [], [], __Invoke_TMenuItem_InitiateAction);
  _RegisterMethod(TMenuItem, mtInvoke, 'Insert', nil, [TypeInfo(Integer), TypeInfo(TMenuItem)], ['Index', 'Item'], __Invoke_TMenuItem_Insert_I4TMenuItem);
  _RegisterMethod(TMenuItem, mtInvoke, 'Delete', nil, [TypeInfo(Integer)], ['Index'], __Invoke_TMenuItem_Delete_I4);
  _RegisterMethod(TMenuItem, mtInvoke, 'Clear', nil, [], [], __Invoke_TMenuItem_Clear);
  _RegisterMethod(TMenuItem, mtInvoke, 'Click', nil, [], [], __Invoke_TMenuItem_Click);
  _RegisterMethod(TMenuItem, mtInvoke, 'Find', TypeInfo(TMenuItem), [TypeInfo(string)], ['ACaption'], __Invoke_TMenuItem_Find_TMenuItemStr);
  _RegisterMethod(TMenuItem, mtInvoke, 'IndexOf', TypeInfo(Integer), [TypeInfo(TMenuItem)], ['Item'], __Invoke_TMenuItem_IndexOf_I4TMenuItem);
  _RegisterMethod(TMenuItem, mtInvoke, 'IsLine', TypeInfo(Boolean), [], [], __Invoke_TMenuItem_IsLine_Bool);
  _RegisterMethod(TMenuItem, mtInvoke, 'GetImageList', TypeInfo(TCustomImageList), [], [], __Invoke_TMenuItem_GetImageList_TCustomImageList);
  _RegisterMethod(TMenuItem, mtInvoke, 'GetParentMenu', TypeInfo(TMenu), [], [], __Invoke_TMenuItem_GetParentMenu_TMenu);
  _RegisterMethod(TMenuItem, mtInvoke, 'NewTopLine', TypeInfo(Integer), [], [], __Invoke_TMenuItem_NewTopLine_I4);
  _RegisterMethod(TMenuItem, mtInvoke, 'NewBottomLine', TypeInfo(Integer), [], [], __Invoke_TMenuItem_NewBottomLine_I4);
  _RegisterMethod(TMenuItem, mtInvoke, 'InsertNewLineBefore', TypeInfo(Integer), [TypeInfo(TMenuItem)], ['AItem'], __Invoke_TMenuItem_InsertNewLineBefore_I4TMenuItem);
  _RegisterMethod(TMenuItem, mtInvoke, 'InsertNewLineAfter', TypeInfo(Integer), [TypeInfo(TMenuItem)], ['AItem'], __Invoke_TMenuItem_InsertNewLineAfter_I4TMenuItem);
  _RegisterMethod(TMenuItem, mtInvoke, 'Add', nil, [TypeInfo(TMenuItem)], ['Item'], __Invoke_TMenuItem_Add_I4TMenuItem);
  _RegisterMethod(TMenuItem, mtInvoke, 'Remove', nil, [TypeInfo(TMenuItem)], ['Item'], __Invoke_TMenuItem_Remove_I4TMenuItem);
  _RegisterMethod(TMenuItem, mtInvoke, 'RethinkHotkeys', TypeInfo(Boolean), [], [], __Invoke_TMenuItem_RethinkHotkeys_Bool);
  _RegisterMethod(TMenuItem, mtInvoke, 'RethinkLines', TypeInfo(Boolean), [], [], __Invoke_TMenuItem_RethinkLines_Bool);
  _RegisterMethod(TMenuItemStack, mtInvoke, 'ClearItem', nil, [TypeInfo(TMenuItem)], ['AItem'], __Invoke_TMenuItemStack_ClearItem_TMenuItem);
  _RegisterMethod(TPopupList, mtGet, 'Window', TypeInfo(HWND), [], [], __Get_TPopupList_Window_HWND);
  _RegisterMethod(TPopupList, mtInvoke, 'Add', nil, [TypeInfo(TPopupMenu)], ['Popup'], __Invoke_TPopupList_Add_TPopupMenu);
  _RegisterMethod(TPopupList, mtInvoke, 'Remove', nil, [TypeInfo(TPopupMenu)], ['Popup'], __Invoke_TPopupList_Remove_TPopupMenu);
  _RegisterMethod(TPopupMenu, mtGet, 'PopupComponent', TypeInfo(TComponent), [], [], __Get_TPopupMenu_PopupComponent_TComponent);
  _RegisterMethod(TPopupMenu, mtPut, 'PopupComponent', nil, [], [], __Put_TPopupMenu_PopupComponent_TComponent);
  _RegisterMethod(TPopupMenu, mtGet, 'Alignment', TypeInfo(TPopupAlignment), [], [], __Get_TPopupMenu_Alignment_TPopupAlignment);
  _RegisterMethod(TPopupMenu, mtPut, 'Alignment', nil, [], [], __Put_TPopupMenu_Alignment_TPopupAlignment);
  _RegisterMethod(TPopupMenu, mtGet, 'AutoHotkeys', TypeInfo(TMenuAutoFlag), [], [], __Get_TPopupMenu_AutoHotkeys_TMenuAutoFlag);
  _RegisterMethod(TPopupMenu, mtPut, 'AutoHotkeys', nil, [], [], __Put_TPopupMenu_AutoHotkeys_TMenuAutoFlag);
  _RegisterMethod(TPopupMenu, mtGet, 'AutoLineReduction', TypeInfo(TMenuAutoFlag), [], [], __Get_TPopupMenu_AutoLineReduction_TMenuAutoFlag);
  _RegisterMethod(TPopupMenu, mtPut, 'AutoLineReduction', nil, [], [], __Put_TPopupMenu_AutoLineReduction_TMenuAutoFlag);
  _RegisterMethod(TPopupMenu, mtGet, 'AutoPopup', TypeInfo(Boolean), [], [], __Get_TPopupMenu_AutoPopup_Bool);
  _RegisterMethod(TPopupMenu, mtPut, 'AutoPopup', nil, [], [], __Put_TPopupMenu_AutoPopup_Bool);
  _RegisterMethod(TPopupMenu, mtGet, 'BiDiMode', TypeInfo(TBiDiMode), [], [], __Get_TPopupMenu_BiDiMode_TBiDiMode);
  _RegisterMethod(TPopupMenu, mtPut, 'BiDiMode', nil, [], [], __Put_TPopupMenu_BiDiMode_TBiDiMode);
  _RegisterMethod(TPopupMenu, mtGet, 'HelpContext', TypeInfo(THelpContext), [], [], __Get_TPopupMenu_HelpContext_THelpContext);
  _RegisterMethod(TPopupMenu, mtPut, 'HelpContext', nil, [], [], __Put_TPopupMenu_HelpContext_THelpContext);
  _RegisterMethod(TPopupMenu, mtGet, 'Images', TypeInfo(TCustomImageList), [], [], __Get_TPopupMenu_Images_TCustomImageList);
  _RegisterMethod(TPopupMenu, mtPut, 'Images', nil, [], [], __Put_TPopupMenu_Images_TCustomImageList);
  _RegisterMethod(TPopupMenu, mtGet, 'MenuAnimation', TypeInfo(TMenuAnimation), [], [], __Get_TPopupMenu_MenuAnimation_TMenuAnimation);
  _RegisterMethod(TPopupMenu, mtPut, 'MenuAnimation', nil, [], [], __Put_TPopupMenu_MenuAnimation_TMenuAnimation);
  _RegisterMethod(TPopupMenu, mtGet, 'OwnerDraw', TypeInfo(Boolean), [], [], __Get_TPopupMenu_OwnerDraw_Bool);
  _RegisterMethod(TPopupMenu, mtPut, 'OwnerDraw', nil, [], [], __Put_TPopupMenu_OwnerDraw_Bool);
  _RegisterMethod(TPopupMenu, mtGet, 'ParentBiDiMode', TypeInfo(Boolean), [], [], __Get_TPopupMenu_ParentBiDiMode_Bool);
  _RegisterMethod(TPopupMenu, mtPut, 'ParentBiDiMode', nil, [], [], __Put_TPopupMenu_ParentBiDiMode_Bool);
  _RegisterMethod(TPopupMenu, mtGet, 'TrackButton', TypeInfo(TTrackButton), [], [], __Get_TPopupMenu_TrackButton_TTrackButton);
  _RegisterMethod(TPopupMenu, mtPut, 'TrackButton', nil, [], [], __Put_TPopupMenu_TrackButton_TTrackButton);
  _RegisterMethod(TPopupMenu, mtInvoke, 'Popup', nil, [TypeInfo(Integer), TypeInfo(Integer)], ['X', 'Y'], __Invoke_TPopupMenu_Popup_I4I4);
end;

initialization
  _RegisterPublicInformation;

end.
