{*******************************************************}
{                                                       }
{           CodeGear Delphi Runtime Library             }
{                                                       }
{ Delphi-Objective-C Bridge                             }
{ Interfaces for Cocoa framework OpenGL                 }
{                                                       }
{ Copyright (c) 1999-2008, Apple, Inc.                  }
{ All rights reserved.                                  }
{                                                       }
{ Translator: Embarcadero Technologies, Inc.            }
{ Copyright(c) 2010-2013 Embarcadero Technologies, Inc. }
{                                                       }
{*******************************************************}

unit Macapi.OpenGL;

interface

uses
  Macapi.ObjCRuntime,
  Macapi.ObjectiveC,
  Macapi.CocoaTypes,
//  Macapi.ApplicationServices,
//  Macapi.IOKit,
  Macapi.CoreFoundation,
//  Macapi.IOSurface,
  Macapi.CoreServices;


const
  CGL_VERSION_1_0 = 1;
  CGL_VERSION_1_1 = 1;
  CGL_VERSION_1_2 = 1;
  GLU_AUTO_LOAD_MATRIX = 100200;
  GLU_BEGIN = 100100;
  GLU_CCW = 100121;
  GLU_CULLING = 100201;
  GLU_CW = 100120;
  GLU_DISPLAY_MODE = 100204;
  GLU_DOMAIN_DISTANCE = 100217;
  GLU_EDGE_FLAG = 100104;
  GLU_END = 100102;
  GLU_ERROR = 100103;
  GLU_EXTENSIONS = 100801;
  GLU_EXTERIOR = 100123;
  GLU_EXT_nurbs_tessellator = 1;
  GLU_EXT_object_space_tess = 1;
  GLU_FALSE = 0;
  GLU_FILL = 100012;
  GLU_FLAT = 100001;
  GLU_INCOMPATIBLE_GL_VERSION = 100903;
  GLU_INSIDE = 100021;
  GLU_INTERIOR = 100122;
  GLU_INVALID_ENUM = 100900;
  GLU_INVALID_OPERATION = 100904;
  GLU_INVALID_VALUE = 100901;
  GLU_LINE = 100011;
  GLU_MAP1_TRIM_2 = 100210;
  GLU_MAP1_TRIM_3 = 100211;
  GLU_NONE = 100002;
  GLU_NURBS_BEGIN = 100164;
  GLU_NURBS_BEGIN_DATA = 100170;
  GLU_NURBS_BEGIN_DATA_EXT = 100170;
  GLU_NURBS_BEGIN_EXT = 100164;
  GLU_NURBS_COLOR = 100167;
  GLU_NURBS_COLOR_DATA = 100173;
  GLU_NURBS_COLOR_DATA_EXT = 100173;
  GLU_NURBS_COLOR_EXT = 100167;
  GLU_NURBS_END = 100169;
  GLU_NURBS_END_DATA = 100175;
  GLU_NURBS_END_DATA_EXT = 100175;
  GLU_NURBS_END_EXT = 100169;
  GLU_NURBS_ERROR = 100103;
  GLU_NURBS_ERROR1 = 100251;
  GLU_NURBS_ERROR10 = 100260;
  GLU_NURBS_ERROR11 = 100261;
  GLU_NURBS_ERROR12 = 100262;
  GLU_NURBS_ERROR13 = 100263;
  GLU_NURBS_ERROR14 = 100264;
  GLU_NURBS_ERROR15 = 100265;
  GLU_NURBS_ERROR16 = 100266;
  GLU_NURBS_ERROR17 = 100267;
  GLU_NURBS_ERROR18 = 100268;
  GLU_NURBS_ERROR19 = 100269;
  GLU_NURBS_ERROR2 = 100252;
  GLU_NURBS_ERROR20 = 100270;
  GLU_NURBS_ERROR21 = 100271;
  GLU_NURBS_ERROR22 = 100272;
  GLU_NURBS_ERROR23 = 100273;
  GLU_NURBS_ERROR24 = 100274;
  GLU_NURBS_ERROR25 = 100275;
  GLU_NURBS_ERROR26 = 100276;
  GLU_NURBS_ERROR27 = 100277;
  GLU_NURBS_ERROR28 = 100278;
  GLU_NURBS_ERROR29 = 100279;
  GLU_NURBS_ERROR3 = 100253;
  GLU_NURBS_ERROR30 = 100280;
  GLU_NURBS_ERROR31 = 100281;
  GLU_NURBS_ERROR32 = 100282;
  GLU_NURBS_ERROR33 = 100283;
  GLU_NURBS_ERROR34 = 100284;
  GLU_NURBS_ERROR35 = 100285;
  GLU_NURBS_ERROR36 = 100286;
  GLU_NURBS_ERROR37 = 100287;
  GLU_NURBS_ERROR4 = 100254;
  GLU_NURBS_ERROR5 = 100255;
  GLU_NURBS_ERROR6 = 100256;
  GLU_NURBS_ERROR7 = 100257;
  GLU_NURBS_ERROR8 = 100258;
  GLU_NURBS_ERROR9 = 100259;
  GLU_NURBS_MODE = 100160;
  GLU_NURBS_MODE_EXT = 100160;
  GLU_NURBS_NORMAL = 100166;
  GLU_NURBS_NORMAL_DATA = 100172;
  GLU_NURBS_NORMAL_DATA_EXT = 100172;
  GLU_NURBS_NORMAL_EXT = 100166;
  GLU_NURBS_RENDERER = 100162;
  GLU_NURBS_RENDERER_EXT = 100162;
  GLU_NURBS_TESSELLATOR = 100161;
  GLU_NURBS_TESSELLATOR_EXT = 100161;
  GLU_NURBS_TEXTURE_COORD = 100168;
  GLU_NURBS_TEXTURE_COORD_DATA = 100174;
  GLU_NURBS_TEX_COORD_DATA_EXT = 100174;
  GLU_NURBS_TEX_COORD_EXT = 100168;
  GLU_NURBS_VERTEX = 100165;
  GLU_NURBS_VERTEX_DATA = 100171;
  GLU_NURBS_VERTEX_DATA_EXT = 100171;
  GLU_NURBS_VERTEX_EXT = 100165;
  GLU_OBJECT_PARAMETRIC_ERROR = 100208;
  GLU_OBJECT_PARAMETRIC_ERROR_EXT = 100208;
  GLU_OBJECT_PATH_LENGTH = 100209;
  GLU_OBJECT_PATH_LENGTH_EXT = 100209;
  GLU_OUTLINE_PATCH = 100241;
  GLU_OUTLINE_POLYGON = 100240;
  GLU_OUTSIDE = 100020;
  GLU_OUT_OF_MEMORY = 100902;
  GLU_PARAMETRIC_ERROR = 100216;
  GLU_PARAMETRIC_TOLERANCE = 100202;
  GLU_PATH_LENGTH = 100215;
  GLU_POINT = 100010;
  GLU_SAMPLING_METHOD = 100205;
  GLU_SAMPLING_TOLERANCE = 100203;
  GLU_SILHOUETTE = 100013;
  GLU_SMOOTH = 100000;
  GLU_TESS_BEGIN = 100100;
  GLU_TESS_BEGIN_DATA = 100106;
  GLU_TESS_BOUNDARY_ONLY = 100141;
  GLU_TESS_COMBINE = 100105;
  GLU_TESS_COMBINE_DATA = 100111;
  GLU_TESS_COORD_TOO_LARGE = 100155;
  GLU_TESS_EDGE_FLAG = 100104;
  GLU_TESS_EDGE_FLAG_DATA = 100110;
  GLU_TESS_END = 100102;
  GLU_TESS_END_DATA = 100108;
  GLU_TESS_ERROR = 100103;
  GLU_TESS_ERROR1 = 100151;
  GLU_TESS_ERROR2 = 100152;
  GLU_TESS_ERROR3 = 100153;
  GLU_TESS_ERROR4 = 100154;
  GLU_TESS_ERROR5 = 100155;
  GLU_TESS_ERROR6 = 100156;
  GLU_TESS_ERROR7 = 100157;
  GLU_TESS_ERROR8 = 100158;
  GLU_TESS_ERROR_DATA = 100109;
  GLU_TESS_MAX_COORD = 9.9999999999999998e+149;
  GLU_TESS_MISSING_BEGIN_CONTOUR = 100152;
  GLU_TESS_MISSING_BEGIN_POLYGON = 100151;
  GLU_TESS_MISSING_END_CONTOUR = 100154;
  GLU_TESS_MISSING_END_POLYGON = 100153;
  GLU_TESS_NEED_COMBINE_CALLBACK = 100156;
  GLU_TESS_TOLERANCE = 100142;
  GLU_TESS_VERTEX = 100101;
  GLU_TESS_VERTEX_DATA = 100107;
  GLU_TESS_WINDING_ABS_GEQ_TWO = 100134;
  GLU_TESS_WINDING_NEGATIVE = 100133;
  GLU_TESS_WINDING_NONZERO = 100131;
  GLU_TESS_WINDING_ODD = 100130;
  GLU_TESS_WINDING_POSITIVE = 100132;
  GLU_TESS_WINDING_RULE = 100140;
  GLU_TRUE = 1;
  GLU_UNKNOWN = 100124;
  GLU_U_STEP = 100206;
  GLU_VERSION = 100800;
  GLU_VERSION_1_1 = 1;
  GLU_VERSION_1_2 = 1;
  GLU_VERSION_1_3 = 1;
  GLU_VERTEX = 100101;
  GLU_V_STEP = 100207;
  GL_2D = 1536;
  GL_2_BYTES = 5127;
  GL_3D = 1537;
  GL_3D_COLOR = 1538;
  GL_3D_COLOR_TEXTURE = 1539;
  GL_3_BYTES = 5128;
  GL_4D_COLOR_TEXTURE = 1540;
  GL_4_BYTES = 5129;
  GL_ABGR_EXT = 32768;
  GL_ACCUM = 256;
  GL_ACCUM_ALPHA_BITS = 3419;
  GL_ACCUM_BLUE_BITS = 3418;
  GL_ACCUM_BUFFER_BIT = 512;
  GL_ACCUM_CLEAR_VALUE = 2944;
  GL_ACCUM_GREEN_BITS = 3417;
  GL_ACCUM_RED_BITS = 3416;
  GL_ACTIVE_ATTRIBUTES = 35721;
  GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 35722;
  GL_ACTIVE_STENCIL_FACE_EXT = 35089;
  GL_ACTIVE_TEXTURE = 34016;
  GL_ACTIVE_TEXTURE_ARB = 34016;
  GL_ACTIVE_UNIFORMS = 35718;
  GL_ACTIVE_UNIFORM_BLOCKS = 35382;
  GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 35381;
  GL_ACTIVE_UNIFORM_MAX_LENGTH = 35719;
  GL_ACTIVE_VERTEX_UNITS_ARB = 34469;
  GL_ADD = 260;
  GL_ADD_SIGNED = 34164;
  GL_ADD_SIGNED_ARB = 34164;
  GL_ALIASED_LINE_WIDTH_RANGE = 33902;
  GL_ALIASED_POINT_SIZE_RANGE = 33901;
  GL_ALL_ATTRIB_BITS = 1048575;
  GL_ALPHA = 6406;
  GL_ALPHA12 = 32829;
  GL_ALPHA16 = 32830;
  GL_ALPHA16F_ARB = 34844;
  GL_ALPHA16I_EXT = 36234;
  GL_ALPHA16UI_EXT = 36216;
  GL_ALPHA32F_ARB = 34838;
  GL_ALPHA32I_EXT = 36228;
  GL_ALPHA32UI_EXT = 36210;
  GL_ALPHA4 = 32827;
  GL_ALPHA8 = 32828;
  GL_ALPHA8I_EXT = 36240;
  GL_ALPHA8UI_EXT = 36222;
  GL_ALPHA_BIAS = 3357;
  GL_ALPHA_BITS = 3413;
  GL_ALPHA_BLEND_EQUATION_ATI = 34877;
  GL_ALPHA_FLOAT16_APPLE = 34844;
  GL_ALPHA_FLOAT16_ATI = 34844;
  GL_ALPHA_FLOAT32_APPLE = 34838;
  GL_ALPHA_FLOAT32_ATI = 34838;
  GL_ALPHA_INTEGER_EXT = 36247;
  GL_ALPHA_SCALE = 3356;
  GL_ALPHA_TEST = 3008;
  GL_ALPHA_TEST_FUNC = 3009;
  GL_ALPHA_TEST_REF = 3010;
  GL_ALWAYS = 519;
  GL_AMBIENT = 4608;
  GL_AMBIENT_AND_DIFFUSE = 5634;
  GL_AND = 5377;
  GL_AND_INVERTED = 5380;
  GL_AND_REVERSE = 5378;
  GL_APPLE_aux_depth_stencil = 1;
  GL_APPLE_client_storage = 1;
  GL_APPLE_element_array = 1;
  GL_APPLE_fence = 1;
  GL_APPLE_float_pixels = 1;
  GL_APPLE_flush_buffer_range = 1;
  GL_APPLE_flush_render = 1;
  GL_APPLE_object_purgeable = 1;
  GL_APPLE_packed_pixels = 1;
  GL_APPLE_pixel_buffer = 1;
  GL_APPLE_rgb_422 = 1;
  GL_APPLE_row_bytes = 1;
  GL_APPLE_specular_vector = 1;
  GL_APPLE_texture_range = 1;
  GL_APPLE_transform_hint = 1;
  GL_APPLE_vertex_array_object = 1;
  GL_APPLE_vertex_array_range = 1;
  GL_APPLE_vertex_program_evaluators = 1;
  GL_APPLE_ycbcr_422 = 1;
  GL_ARB_color_buffer_float = 1;
  GL_ARB_depth_buffer_float = 1;
  GL_ARB_depth_texture = 1;
  GL_ARB_draw_buffers = 1;
  GL_ARB_fragment_program = 1;
  GL_ARB_fragment_program_shadow = 1;
  GL_ARB_fragment_shader = 1;
  GL_ARB_framebuffer_object = 1;
  GL_ARB_half_float_pixel = 1;
  GL_ARB_half_float_vertex = 1;
  GL_ARB_imaging = 1;
  GL_ARB_instanced_arrays = 1;
  GL_ARB_multisample = 1;
  GL_ARB_multitexture = 1;
  GL_ARB_occlusion_query = 1;
  GL_ARB_pixel_buffer_object = 1;
  GL_ARB_point_parameters = 1;
  GL_ARB_point_sprite = 1;
  GL_ARB_shader_objects = 1;
  GL_ARB_shader_texture_lod = 1;
  GL_ARB_shading_language_100 = 1;
  GL_ARB_shadow = 1;
  GL_ARB_shadow_ambient = 1;
  GL_ARB_texture_border_clamp = 1;
  GL_ARB_texture_compression = 1;
  GL_ARB_texture_compression_rgtc = 1;
  GL_ARB_texture_cube_map = 1;
  GL_ARB_texture_env_add = 1;
  GL_ARB_texture_env_combine = 1;
  GL_ARB_texture_env_crossbar = 1;
  GL_ARB_texture_env_dot3 = 1;
  GL_ARB_texture_float = 1;
  GL_ARB_texture_mirrored_repeat = 1;
  GL_ARB_texture_non_power_of_two = 1;
  GL_ARB_texture_rectangle = 1;
  GL_ARB_texture_rg = 1;
  GL_ARB_transpose_matrix = 1;
  GL_ARB_uniform_buffer_object = 1;
  GL_ARB_vertex_blend = 1;
  GL_ARB_vertex_buffer_object = 1;
  GL_ARB_vertex_program = 1;
  GL_ARB_vertex_shader = 1;
  GL_ARB_window_pos = 1;
  GL_ARRAY_BUFFER = 34962;
  GL_ARRAY_BUFFER_ARB = 34962;
  GL_ARRAY_BUFFER_BINDING = 34964;
  GL_ARRAY_BUFFER_BINDING_ARB = 34964;
  GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = 33193;
  GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = 33192;
  GL_ATIX_pn_triangles = 1;
  GL_ATI_blend_equation_separate = 1;
  GL_ATI_blend_weighted_minmax = 1;
  GL_ATI_pn_triangles = 1;
  GL_ATI_point_cull_mode = 1;
  GL_ATI_separate_stencil = 1;
  GL_ATI_texture_compression_3dc = 1;
  GL_ATI_texture_env_combine3 = 1;
  GL_ATI_texture_float = 1;
  GL_ATI_texture_mirror_once = 1;
  GL_ATTACHED_SHADERS = 35717;
  GL_ATTRIB_STACK_DEPTH = 2992;
  GL_AUTO_NORMAL = 3456;
  GL_AUX0 = 1033;
  GL_AUX1 = 1034;
  GL_AUX2 = 1035;
  GL_AUX3 = 1036;
  GL_AUX_BUFFERS = 3072;
  GL_AUX_DEPTH_STENCIL_APPLE = 35348;
  GL_BACK = 1029;
  GL_BACK_LEFT = 1026;
  GL_BACK_RIGHT = 1027;
  GL_BGR = 32992;
  GL_BGRA = 32993;
  GL_BGRA_EXT = 32993;
  GL_BGRA_INTEGER_EXT = 36251;
  GL_BGR_EXT = 32992;
  GL_BGR_INTEGER_EXT = 36250;
  GL_BITMAP = 6656;
  GL_BITMAP_TOKEN = 1796;
  GL_BLEND = 3042;
  GL_BLEND_COLOR = 32773;
  GL_BLEND_COLOR_EXT = 32773;
  GL_BLEND_DST = 3040;
  GL_BLEND_DST_ALPHA = 32970;
  GL_BLEND_DST_ALPHA_EXT = 32970;
  GL_BLEND_DST_RGB = 32968;
  GL_BLEND_DST_RGB_EXT = 32968;
  GL_BLEND_EQUATION = 32777;
  GL_BLEND_EQUATION_ALPHA = 34877;
  GL_BLEND_EQUATION_ALPHA_EXT = 34877;
  GL_BLEND_EQUATION_EXT = 32777;
  GL_BLEND_EQUATION_RGB = 32777;
  GL_BLEND_EQUATION_RGB_EXT = 32777;
  GL_BLEND_SRC = 3041;
  GL_BLEND_SRC_ALPHA = 32971;
  GL_BLEND_SRC_ALPHA_EXT = 32971;
  GL_BLEND_SRC_RGB = 32969;
  GL_BLEND_SRC_RGB_EXT = 32969;
  GL_BLUE = 6405;
  GL_BLUE_BIAS = 3355;
  GL_BLUE_BITS = 3412;
  GL_BLUE_INTEGER_EXT = 36246;
  GL_BLUE_SCALE = 3354;
  GL_BOOL = 35670;
  GL_BOOL_ARB = 35670;
  GL_BOOL_VEC2 = 35671;
  GL_BOOL_VEC2_ARB = 35671;
  GL_BOOL_VEC3 = 35672;
  GL_BOOL_VEC3_ARB = 35672;
  GL_BOOL_VEC4 = 35673;
  GL_BOOL_VEC4_ARB = 35673;
  GL_BUFFER_ACCESS = 35003;
  GL_BUFFER_ACCESS_ARB = 35003;
  GL_BUFFER_FLUSHING_UNMAP_APPLE = 35347;
  GL_BUFFER_MAPPED = 35004;
  GL_BUFFER_MAPPED_ARB = 35004;
  GL_BUFFER_MAP_POINTER = 35005;
  GL_BUFFER_MAP_POINTER_ARB = 35005;
  GL_BUFFER_OBJECT_APPLE = 34227;
  GL_BUFFER_SERIALIZED_MODIFY_APPLE = 35346;
  GL_BUFFER_SIZE = 34660;
  GL_BUFFER_SIZE_ARB = 34660;
  GL_BUFFER_USAGE = 34661;
  GL_BUFFER_USAGE_ARB = 34661;
  GL_BYTE = 5120;
  GL_C3F_V3F = 10788;
  GL_C4F_N3F_V3F = 10790;
  GL_C4UB_V2F = 10786;
  GL_C4UB_V3F = 10787;
  GL_CCW = 2305;
  GL_CLAMP = 10496;
  GL_CLAMP_FRAGMENT_COLOR_ARB = 35099;
  GL_CLAMP_READ_COLOR_ARB = 35100;
  GL_CLAMP_TO_BORDER = 33069;
  GL_CLAMP_TO_BORDER_ARB = 33069;
  GL_CLAMP_TO_EDGE = 33071;
  GL_CLAMP_TO_EDGE_SGIS = 33071;
  GL_CLAMP_VERTEX_COLOR_ARB = 35098;
  GL_CLEAR = 5376;
  GL_CLIENT_ACTIVE_TEXTURE = 34017;
  GL_CLIENT_ACTIVE_TEXTURE_ARB = 34017;
  GL_CLIENT_ALL_ATTRIB_BITS = 4294967295;
  GL_CLIENT_ATTRIB_STACK_DEPTH = 2993;
  GL_CLIENT_PIXEL_STORE_BIT = 1;
  GL_CLIENT_VERTEX_ARRAY_BIT = 2;
  GL_CLIP_PLANE0 = 12288;
  GL_CLIP_PLANE1 = 12289;
  GL_CLIP_PLANE2 = 12290;
  GL_CLIP_PLANE3 = 12291;
  GL_CLIP_PLANE4 = 12292;
  GL_CLIP_PLANE5 = 12293;
  GL_CLIP_VOLUME_CLIPPING_HINT_EXT = 33008;
  GL_COEFF = 2560;
  GL_COLOR = 6144;
  GL_COLOR_ARRAY = 32886;
  GL_COLOR_ARRAY_BUFFER_BINDING = 34968;
  GL_COLOR_ARRAY_BUFFER_BINDING_ARB = 34968;
  GL_COLOR_ARRAY_POINTER = 32912;
  GL_COLOR_ARRAY_SIZE = 32897;
  GL_COLOR_ARRAY_STRIDE = 32899;
  GL_COLOR_ARRAY_TYPE = 32898;
  GL_COLOR_ATTACHMENT0 = 36064;
  GL_COLOR_ATTACHMENT0_EXT = 36064;
  GL_COLOR_ATTACHMENT1 = 36065;
  GL_COLOR_ATTACHMENT10 = 36074;
  GL_COLOR_ATTACHMENT10_EXT = 36074;
  GL_COLOR_ATTACHMENT11 = 36075;
  GL_COLOR_ATTACHMENT11_EXT = 36075;
  GL_COLOR_ATTACHMENT12 = 36076;
  GL_COLOR_ATTACHMENT12_EXT = 36076;
  GL_COLOR_ATTACHMENT13 = 36077;
  GL_COLOR_ATTACHMENT13_EXT = 36077;
  GL_COLOR_ATTACHMENT14 = 36078;
  GL_COLOR_ATTACHMENT14_EXT = 36078;
  GL_COLOR_ATTACHMENT15 = 36079;
  GL_COLOR_ATTACHMENT15_EXT = 36079;
  GL_COLOR_ATTACHMENT1_EXT = 36065;
  GL_COLOR_ATTACHMENT2 = 36066;
  GL_COLOR_ATTACHMENT2_EXT = 36066;
  GL_COLOR_ATTACHMENT3 = 36067;
  GL_COLOR_ATTACHMENT3_EXT = 36067;
  GL_COLOR_ATTACHMENT4 = 36068;
  GL_COLOR_ATTACHMENT4_EXT = 36068;
  GL_COLOR_ATTACHMENT5 = 36069;
  GL_COLOR_ATTACHMENT5_EXT = 36069;
  GL_COLOR_ATTACHMENT6 = 36070;
  GL_COLOR_ATTACHMENT6_EXT = 36070;
  GL_COLOR_ATTACHMENT7 = 36071;
  GL_COLOR_ATTACHMENT7_EXT = 36071;
  GL_COLOR_ATTACHMENT8 = 36072;
  GL_COLOR_ATTACHMENT8_EXT = 36072;
  GL_COLOR_ATTACHMENT9 = 36073;
  GL_COLOR_ATTACHMENT9_EXT = 36073;
  GL_COLOR_BUFFER_BIT = 16384;
  GL_COLOR_CLEAR_VALUE = 3106;
  GL_COLOR_FLOAT_APPLE = 35343;
  GL_COLOR_INDEX = 6400;
  GL_COLOR_INDEXES = 5635;
  GL_COLOR_LOGIC_OP = 3058;
  GL_COLOR_MATERIAL = 2903;
  GL_COLOR_MATERIAL_FACE = 2901;
  GL_COLOR_MATERIAL_PARAMETER = 2902;
  GL_COLOR_MATRIX = 32945;
  GL_COLOR_MATRIX_SGI = 32945;
  GL_COLOR_MATRIX_STACK_DEPTH = 32946;
  GL_COLOR_MATRIX_STACK_DEPTH_SGI = 32946;
  GL_COLOR_SUM = 33880;
  GL_COLOR_SUM_ARB = 33880;
  GL_COLOR_SUM_EXT = 33880;
  GL_COLOR_TABLE = 32976;
  GL_COLOR_TABLE_ALPHA_SIZE = 32989;
  GL_COLOR_TABLE_BIAS = 32983;
  GL_COLOR_TABLE_BLUE_SIZE = 32988;
  GL_COLOR_TABLE_FORMAT = 32984;
  GL_COLOR_TABLE_GREEN_SIZE = 32987;
  GL_COLOR_TABLE_INTENSITY_SIZE = 32991;
  GL_COLOR_TABLE_LUMINANCE_SIZE = 32990;
  GL_COLOR_TABLE_RED_SIZE = 32986;
  GL_COLOR_TABLE_SCALE = 32982;
  GL_COLOR_TABLE_WIDTH = 32985;
  GL_COLOR_WRITEMASK = 3107;
  GL_COMBINE = 34160;
  GL_COMBINE_ALPHA = 34162;
  GL_COMBINE_ALPHA_ARB = 34162;
  GL_COMBINE_ARB = 34160;
  GL_COMBINE_RGB = 34161;
  GL_COMBINE_RGB_ARB = 34161;
  GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT = 34894;
  GL_COMPARE_R_TO_TEXTURE = 34894;
  GL_COMPARE_R_TO_TEXTURE_ARB = 34894;
  GL_COMPILE = 4864;
  GL_COMPILE_AND_EXECUTE = 4865;
  GL_COMPILE_STATUS = 35713;
  GL_COMPRESSED_ALPHA = 34025;
  GL_COMPRESSED_ALPHA_ARB = 34025;
  GL_COMPRESSED_INTENSITY = 34028;
  GL_COMPRESSED_INTENSITY_ARB = 34028;
  GL_COMPRESSED_LUMINANCE = 34026;
  GL_COMPRESSED_LUMINANCE_ALPHA = 34027;
  GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI = 34871;
  GL_COMPRESSED_LUMINANCE_ALPHA_ARB = 34027;
  GL_COMPRESSED_LUMINANCE_ARB = 34026;
  GL_COMPRESSED_RED = 33317;
  GL_COMPRESSED_RED_RGTC1 = 36283;
  GL_COMPRESSED_RG = 33318;
  GL_COMPRESSED_RGB = 34029;
  GL_COMPRESSED_RGBA = 34030;
  GL_COMPRESSED_RGBA_ARB = 34030;
  GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 33777;
  GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 33778;
  GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 33779;
  GL_COMPRESSED_RGB_ARB = 34029;
  GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 33776;
  GL_COMPRESSED_RG_RGTC2 = 36285;
  GL_COMPRESSED_SIGNED_RED_RGTC1 = 36284;
  GL_COMPRESSED_SIGNED_RG_RGTC2 = 36286;
  GL_COMPRESSED_SLUMINANCE = 35914;
  GL_COMPRESSED_SLUMINANCE_ALPHA = 35915;
  GL_COMPRESSED_SLUMINANCE_ALPHA_EXT = 35915;
  GL_COMPRESSED_SLUMINANCE_EXT = 35914;
  GL_COMPRESSED_SRGB = 35912;
  GL_COMPRESSED_SRGB_ALPHA = 35913;
  GL_COMPRESSED_SRGB_ALPHA_EXT = 35913;
  GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 35917;
  GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 35918;
  GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 35919;
  GL_COMPRESSED_SRGB_EXT = 35912;
  GL_COMPRESSED_SRGB_S3TC_DXT1_EXT = 35916;
  GL_COMPRESSED_TEXTURE_FORMATS = 34467;
  GL_COMPRESSED_TEXTURE_FORMATS_ARB = 34467;
  GL_CONSTANT = 34166;
  GL_CONSTANT_ALPHA = 32771;
  GL_CONSTANT_ALPHA_EXT = 32771;
  GL_CONSTANT_ARB = 34166;
  GL_CONSTANT_ATTENUATION = 4615;
  GL_CONSTANT_BORDER = 33105;
  GL_CONSTANT_COLOR = 32769;
  GL_CONSTANT_COLOR_EXT = 32769;
  GL_CONVOLUTION_1D = 32784;
  GL_CONVOLUTION_2D = 32785;
  GL_CONVOLUTION_BORDER_COLOR = 33108;
  GL_CONVOLUTION_BORDER_MODE = 32787;
  GL_CONVOLUTION_FILTER_BIAS = 32789;
  GL_CONVOLUTION_FILTER_SCALE = 32788;
  GL_CONVOLUTION_FORMAT = 32791;
  GL_CONVOLUTION_HEIGHT = 32793;
  GL_CONVOLUTION_WIDTH = 32792;
  GL_COORD_REPLACE = 34914;
  GL_COORD_REPLACE_ARB = 34914;
  GL_COORD_REPLACE_NV = 34914;
  GL_COPY = 5379;
  GL_COPY_INVERTED = 5388;
  GL_COPY_PIXEL_TOKEN = 1798;
  GL_CULL_FACE = 2884;
  GL_CULL_FACE_MODE = 2885;
  GL_CURRENT_BIT = 1;
  GL_CURRENT_COLOR = 2816;
  GL_CURRENT_FOG_COORD = 33875;
  GL_CURRENT_FOG_COORDINATE = 33875;
  GL_CURRENT_FOG_COORDINATE_EXT = 33875;
  GL_CURRENT_INDEX = 2817;
  GL_CURRENT_MATRIX_ARB = 34369;
  GL_CURRENT_MATRIX_STACK_DEPTH_ARB = 34368;
  GL_CURRENT_NORMAL = 2818;
  GL_CURRENT_PROGRAM = 35725;
  GL_CURRENT_QUERY = 34917;
  GL_CURRENT_QUERY_ARB = 34917;
  GL_CURRENT_RASTER_COLOR = 2820;
  GL_CURRENT_RASTER_DISTANCE = 2825;
  GL_CURRENT_RASTER_INDEX = 2821;
  GL_CURRENT_RASTER_POSITION = 2823;
  GL_CURRENT_RASTER_POSITION_VALID = 2824;
  GL_CURRENT_RASTER_SECONDARY_COLOR = 33887;
  GL_CURRENT_RASTER_TEXTURE_COORDS = 2822;
  GL_CURRENT_SECONDARY_COLOR = 33881;
  GL_CURRENT_SECONDARY_COLOR_EXT = 33881;
  GL_CURRENT_TEXTURE_COORDS = 2819;
  GL_CURRENT_VERTEX_ATTRIB = 34342;
  GL_CURRENT_VERTEX_ATTRIB_ARB = 34342;
  GL_CURRENT_WEIGHT_ARB = 34472;
  GL_CW = 2304;
  GL_DECAL = 8449;
  GL_DECR = 7683;
  GL_DECR_WRAP = 34056;
  GL_DECR_WRAP_EXT = 34056;
  GL_DELETE_STATUS = 35712;
  GL_DEPTH = 6145;
  GL_DEPTH24_STENCIL8 = 35056;
  GL_DEPTH24_STENCIL8_EXT = 35056;
  GL_DEPTH32F_STENCIL8 = 36013;
  GL_DEPTH_ATTACHMENT = 36096;
  GL_DEPTH_ATTACHMENT_EXT = 36096;
  GL_DEPTH_BIAS = 3359;
  GL_DEPTH_BITS = 3414;
  GL_DEPTH_BOUNDS_EXT = 34961;
  GL_DEPTH_BOUNDS_TEST_EXT = 34960;
  GL_DEPTH_BUFFER_BIT = 256;
  GL_DEPTH_CLAMP_NV = 34383;
  GL_DEPTH_CLEAR_VALUE = 2931;
  GL_DEPTH_COMPONENT = 6402;
  GL_DEPTH_COMPONENT16 = 33189;
  GL_DEPTH_COMPONENT16_ARB = 33189;
  GL_DEPTH_COMPONENT24 = 33190;
  GL_DEPTH_COMPONENT24_ARB = 33190;
  GL_DEPTH_COMPONENT32 = 33191;
  GL_DEPTH_COMPONENT32F = 36012;
  GL_DEPTH_COMPONENT32_ARB = 33191;
  GL_DEPTH_FUNC = 2932;
  GL_DEPTH_RANGE = 2928;
  GL_DEPTH_SCALE = 3358;
  GL_DEPTH_STENCIL = 34041;
  GL_DEPTH_STENCIL_ATTACHMENT = 33306;
  GL_DEPTH_STENCIL_EXT = 34041;
  GL_DEPTH_TEST = 2929;
  GL_DEPTH_TEXTURE_MODE = 34891;
  GL_DEPTH_TEXTURE_MODE_ARB = 34891;
  GL_DEPTH_WRITEMASK = 2930;
  GL_DIFFUSE = 4609;
  GL_DITHER = 3024;
  GL_DOMAIN = 2562;
  GL_DONT_CARE = 4352;
  GL_DOT3_RGB = 34478;
  GL_DOT3_RGBA = 34479;
  GL_DOT3_RGBA_ARB = 34479;
  GL_DOT3_RGB_ARB = 34478;
  GL_DOUBLE = 5130;
  GL_DOUBLEBUFFER = 3122;
  GL_DRAW_BUFFER = 3073;
  GL_DRAW_BUFFER0 = 34853;
  GL_DRAW_BUFFER0_ARB = 34853;
  GL_DRAW_BUFFER1 = 34854;
  GL_DRAW_BUFFER10 = 34863;
  GL_DRAW_BUFFER10_ARB = 34863;
  GL_DRAW_BUFFER11 = 34864;
  GL_DRAW_BUFFER11_ARB = 34864;
  GL_DRAW_BUFFER12 = 34865;
  GL_DRAW_BUFFER12_ARB = 34865;
  GL_DRAW_BUFFER13 = 34866;
  GL_DRAW_BUFFER13_ARB = 34866;
  GL_DRAW_BUFFER14 = 34867;
  GL_DRAW_BUFFER14_ARB = 34867;
  GL_DRAW_BUFFER15 = 34868;
  GL_DRAW_BUFFER15_ARB = 34868;
  GL_DRAW_BUFFER1_ARB = 34854;
  GL_DRAW_BUFFER2 = 34855;
  GL_DRAW_BUFFER2_ARB = 34855;
  GL_DRAW_BUFFER3 = 34856;
  GL_DRAW_BUFFER3_ARB = 34856;
  GL_DRAW_BUFFER4 = 34857;
  GL_DRAW_BUFFER4_ARB = 34857;
  GL_DRAW_BUFFER5 = 34858;
  GL_DRAW_BUFFER5_ARB = 34858;
  GL_DRAW_BUFFER6 = 34859;
  GL_DRAW_BUFFER6_ARB = 34859;
  GL_DRAW_BUFFER7 = 34860;
  GL_DRAW_BUFFER7_ARB = 34860;
  GL_DRAW_BUFFER8 = 34861;
  GL_DRAW_BUFFER8_ARB = 34861;
  GL_DRAW_BUFFER9 = 34862;
  GL_DRAW_BUFFER9_ARB = 34862;
  GL_DRAW_FRAMEBUFFER = 36009;
  GL_DRAW_FRAMEBUFFER_BINDING = 36006;
  GL_DRAW_FRAMEBUFFER_BINDING_EXT = 36006;
  GL_DRAW_FRAMEBUFFER_EXT = 36009;
  GL_DRAW_PIXELS_APPLE = 35338;
  GL_DRAW_PIXEL_TOKEN = 1797;
  GL_DST_ALPHA = 772;
  GL_DST_COLOR = 774;
  GL_DYNAMIC_COPY = 35050;
  GL_DYNAMIC_COPY_ARB = 35050;
  GL_DYNAMIC_DRAW = 35048;
  GL_DYNAMIC_DRAW_ARB = 35048;
  GL_DYNAMIC_READ = 35049;
  GL_DYNAMIC_READ_ARB = 35049;
  GL_EDGE_FLAG = 2883;
  GL_EDGE_FLAG_ARRAY = 32889;
  GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 34971;
  GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = 34971;
  GL_EDGE_FLAG_ARRAY_POINTER = 32915;
  GL_EDGE_FLAG_ARRAY_STRIDE = 32908;
  GL_ELEMENT_ARRAY_APPLE = 35340;
  GL_ELEMENT_ARRAY_BUFFER = 34963;
  GL_ELEMENT_ARRAY_BUFFER_ARB = 34963;
  GL_ELEMENT_ARRAY_BUFFER_BINDING = 34965;
  GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = 34965;
  GL_ELEMENT_ARRAY_POINTER_APPLE = 35342;
  GL_ELEMENT_ARRAY_TYPE_APPLE = 35341;
  GL_EMISSION = 5632;
  GL_ENABLE_BIT = 8192;
  GL_EQUAL = 514;
  GL_EQUIV = 5385;
  GL_EVAL_BIT = 65536;
  GL_EXP = 2048;
  GL_EXP2 = 2049;
  GL_EXTENSIONS = 7939;
  GL_EXT_abgr = 1;
  GL_EXT_bgra = 1;
  GL_EXT_bindable_uniform = 1;
  GL_EXT_blend_color = 1;
  GL_EXT_blend_equation_separate = 1;
  GL_EXT_blend_func_separate = 1;
  GL_EXT_blend_minmax = 1;
  GL_EXT_blend_subtract = 1;
  GL_EXT_clip_volume_hint = 1;
  GL_EXT_compiled_vertex_array = 1;
  GL_EXT_depth_bounds_test = 1;
  GL_EXT_draw_buffers2 = 1;
  GL_EXT_draw_instanced = 0;
  GL_EXT_draw_range_elements = 1;
  GL_EXT_fog_coord = 1;
  GL_EXT_framebuffer_blit = 1;
  GL_EXT_framebuffer_multisample = 1;
  GL_EXT_framebuffer_object = 1;
  GL_EXT_framebuffer_sRGB = 1;
  GL_EXT_geometry_shader4 = 1;
  GL_EXT_gpu_program_parameters = 1;
  GL_EXT_gpu_shader4 = 1;
  GL_EXT_multi_draw_arrays = 1;
  GL_EXT_packed_depth_stencil = 1;
  GL_EXT_packed_float = 1;
  GL_EXT_provoking_vertex = 1;
  GL_EXT_rescale_normal = 1;
  GL_EXT_secondary_color = 1;
  GL_EXT_separate_specular_color = 1;
  GL_EXT_shadow_funcs = 1;
  GL_EXT_stencil_two_side = 1;
  GL_EXT_stencil_wrap = 1;
  GL_EXT_texture_array = 1;
  GL_EXT_texture_compression_dxt1 = 1;
  GL_EXT_texture_compression_s3tc = 1;
  GL_EXT_texture_env_add = 1;
  GL_EXT_texture_filter_anisotropic = 1;
  GL_EXT_texture_integer = 1;
  GL_EXT_texture_lod_bias = 1;
  GL_EXT_texture_mirror_clamp = 1;
  GL_EXT_texture_rectangle = 1;
  GL_EXT_texture_sRGB = 1;
  GL_EXT_texture_shared_exponent = 1;
  GL_EXT_transform_feedback = 1;
  GL_EXT_vertex_array_bgra = 1;
  GL_EYE_LINEAR = 9216;
  GL_EYE_PLANE = 9474;
  GL_EYE_PLANE_ABSOLUTE_NV = 34140;
  GL_EYE_RADIAL_NV = 34139;
  GL_FALSE = 0;
  GL_FASTEST = 4353;
  GL_FEEDBACK = 7169;
  GL_FEEDBACK_BUFFER_POINTER = 3568;
  GL_FEEDBACK_BUFFER_SIZE = 3569;
  GL_FEEDBACK_BUFFER_TYPE = 3570;
  GL_FENCE_APPLE = 35339;
  GL_FILL = 6914;
  GL_FIRST_VERTEX_CONVENTION_EXT = 36429;
  GL_FIXED_ONLY_ARB = 35101;
  GL_FLAT = 7424;
  GL_FLOAT = 5126;
  GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 36269;
  GL_FLOAT_MAT2 = 35674;
  GL_FLOAT_MAT2_ARB = 35674;
  GL_FLOAT_MAT2x3 = 35685;
  GL_FLOAT_MAT2x4 = 35686;
  GL_FLOAT_MAT3 = 35675;
  GL_FLOAT_MAT3_ARB = 35675;
  GL_FLOAT_MAT3x2 = 35687;
  GL_FLOAT_MAT3x4 = 35688;
  GL_FLOAT_MAT4 = 35676;
  GL_FLOAT_MAT4_ARB = 35676;
  GL_FLOAT_MAT4x2 = 35689;
  GL_FLOAT_MAT4x3 = 35690;
  GL_FLOAT_VEC2 = 35664;
  GL_FLOAT_VEC2_ARB = 35664;
  GL_FLOAT_VEC3 = 35665;
  GL_FLOAT_VEC3_ARB = 35665;
  GL_FLOAT_VEC4 = 35666;
  GL_FLOAT_VEC4_ARB = 35666;
  GL_FOG = 2912;
  GL_FOG_BIT = 128;
  GL_FOG_COLOR = 2918;
  GL_FOG_COORD = 33873;
  GL_FOG_COORDINATE = 33873;
  GL_FOG_COORDINATE_ARRAY = 33879;
  GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 34973;
  GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = 34973;
  GL_FOG_COORDINATE_ARRAY_EXT = 33879;
  GL_FOG_COORDINATE_ARRAY_POINTER = 33878;
  GL_FOG_COORDINATE_ARRAY_POINTER_EXT = 33878;
  GL_FOG_COORDINATE_ARRAY_STRIDE = 33877;
  GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = 33877;
  GL_FOG_COORDINATE_ARRAY_TYPE = 33876;
  GL_FOG_COORDINATE_ARRAY_TYPE_EXT = 33876;
  GL_FOG_COORDINATE_EXT = 33873;
  GL_FOG_COORDINATE_SOURCE = 33872;
  GL_FOG_COORDINATE_SOURCE_EXT = 33872;
  GL_FOG_COORD_ARRAY = 33879;
  GL_FOG_COORD_ARRAY_BUFFER_BINDING = 34973;
  GL_FOG_COORD_ARRAY_BUFFER_BINDING_ARB = 34973;
  GL_FOG_COORD_ARRAY_POINTER = 33878;
  GL_FOG_COORD_ARRAY_STRIDE = 33877;
  GL_FOG_COORD_ARRAY_TYPE = 33876;
  GL_FOG_COORD_SRC = 33872;
  GL_FOG_DENSITY = 2914;
  GL_FOG_DISTANCE_MODE_NV = 34138;
  GL_FOG_END = 2916;
  GL_FOG_HINT = 3156;
  GL_FOG_INDEX = 2913;
  GL_FOG_MODE = 2917;
  GL_FOG_START = 2915;
  GL_FRAGMENT_DEPTH = 33874;
  GL_FRAGMENT_DEPTH_EXT = 33874;
  GL_FRAGMENT_PROGRAM_ARB = 34820;
  GL_FRAGMENT_SHADER = 35632;
  GL_FRAGMENT_SHADER_ARB = 35632;
  GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 35723;
  GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 35723;
  GL_FRAMEBUFFER = 36160;
  GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 33301;
  GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 33300;
  GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 33296;
  GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 33297;
  GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 33302;
  GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 33299;
  GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = 36263;
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = 36049;
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = 36048;
  GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 33298;
  GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 33303;
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = 36052;
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = 36051;
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 36052;
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = 36052;
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = 36050;
  GL_FRAMEBUFFER_BINDING = 36006;
  GL_FRAMEBUFFER_BINDING_EXT = 36006;
  GL_FRAMEBUFFER_COMPLETE = 36053;
  GL_FRAMEBUFFER_COMPLETE_EXT = 36053;
  GL_FRAMEBUFFER_DEFAULT = 33304;
  GL_FRAMEBUFFER_EXT = 36160;
  GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
  GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = 36054;
  GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = 36057;
  GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 36059;
  GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = 36059;
  GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = 36058;
  GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = 36265;
  GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = 36264;
  GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
  GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = 36055;
  GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 36182;
  GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = 36182;
  GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 36060;
  GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = 36060;
  GL_FRAMEBUFFER_SRGB_CAPABLE_EXT = 36282;
  GL_FRAMEBUFFER_SRGB_EXT = 36281;
  GL_FRAMEBUFFER_UNDEFINED = 33305;
  GL_FRAMEBUFFER_UNSUPPORTED = 36061;
  GL_FRAMEBUFFER_UNSUPPORTED_EXT = 36061;
  GL_FRONT = 1028;
  GL_FRONT_AND_BACK = 1032;
  GL_FRONT_FACE = 2886;
  GL_FRONT_LEFT = 1024;
  GL_FRONT_RIGHT = 1025;
  GL_FUNC_ADD = 32774;
  GL_FUNC_ADD_EXT = 32774;
  GL_FUNC_REVERSE_SUBTRACT = 32779;
  GL_FUNC_REVERSE_SUBTRACT_EXT = 32779;
  GL_FUNC_SUBTRACT = 32778;
  GL_FUNC_SUBTRACT_EXT = 32778;
  GL_GENERATE_MIPMAP = 33169;
  GL_GENERATE_MIPMAP_HINT = 33170;
  GL_GENERATE_MIPMAP_HINT_SGIS = 33170;
  GL_GENERATE_MIPMAP_SGIS = 33169;
  GL_GEOMETRY_INPUT_TYPE_EXT = 36315;
  GL_GEOMETRY_OUTPUT_TYPE_EXT = 36316;
  GL_GEOMETRY_SHADER_EXT = 36313;
  GL_GEOMETRY_VERTICES_OUT_EXT = 36314;
  GL_GEQUAL = 518;
  GL_GLEXT_VERSION = 7;
  GL_GREATER = 516;
  GL_GREEN = 6404;
  GL_GREEN_BIAS = 3353;
  GL_GREEN_BITS = 3411;
  GL_GREEN_INTEGER_EXT = 36245;
  GL_GREEN_SCALE = 3352;
  GL_HALF_APPLE = 5131;
  GL_HALF_FLOAT = 5131;
  GL_HALF_FLOAT_ARB = 5131;
  GL_HINT_BIT = 32768;
  GL_HISTOGRAM = 32804;
  GL_HISTOGRAM_ALPHA_SIZE = 32811;
  GL_HISTOGRAM_BLUE_SIZE = 32810;
  GL_HISTOGRAM_FORMAT = 32807;
  GL_HISTOGRAM_GREEN_SIZE = 32809;
  GL_HISTOGRAM_LUMINANCE_SIZE = 32812;
  GL_HISTOGRAM_RED_SIZE = 32808;
  GL_HISTOGRAM_SINK = 32813;
  GL_HISTOGRAM_WIDTH = 32806;
  GL_IBM_rasterpos_clip = 1;
  GL_INCR = 7682;
  GL_INCR_WRAP = 34055;
  GL_INCR_WRAP_EXT = 34055;
  GL_INDEX_ARRAY = 32887;
  GL_INDEX_ARRAY_BUFFER_BINDING = 34969;
  GL_INDEX_ARRAY_BUFFER_BINDING_ARB = 34969;
  GL_INDEX_ARRAY_POINTER = 32913;
  GL_INDEX_ARRAY_STRIDE = 32902;
  GL_INDEX_ARRAY_TYPE = 32901;
  GL_INDEX_BITS = 3409;
  GL_INDEX_CLEAR_VALUE = 3104;
  GL_INDEX_LOGIC_OP = 3057;
  GL_INDEX_MODE = 3120;
  GL_INDEX_OFFSET = 3347;
  GL_INDEX_SHIFT = 3346;
  GL_INDEX_WRITEMASK = 3105;
  GL_INFO_LOG_LENGTH = 35716;
  GL_INT = 5124;
  GL_INTENSITY = 32841;
  GL_INTENSITY12 = 32844;
  GL_INTENSITY16 = 32845;
  GL_INTENSITY16F_ARB = 34845;
  GL_INTENSITY16I_EXT = 36235;
  GL_INTENSITY16UI_EXT = 36217;
  GL_INTENSITY32F_ARB = 34839;
  GL_INTENSITY32I_EXT = 36229;
  GL_INTENSITY32UI_EXT = 36211;
  GL_INTENSITY4 = 32842;
  GL_INTENSITY8 = 32843;
  GL_INTENSITY8I_EXT = 36241;
  GL_INTENSITY8UI_EXT = 36223;
  GL_INTENSITY_FLOAT16_APPLE = 34845;
  GL_INTENSITY_FLOAT16_ATI = 34845;
  GL_INTENSITY_FLOAT32_APPLE = 34839;
  GL_INTENSITY_FLOAT32_ATI = 34839;
  GL_INTERLEAVED_ATTRIBS_EXT = 35980;
  GL_INTERPOLATE = 34165;
  GL_INTERPOLATE_ARB = 34165;
  GL_INT_SAMPLER_1D_ARRAY_EXT = 36302;
  GL_INT_SAMPLER_1D_EXT = 36297;
  GL_INT_SAMPLER_2D_ARRAY_EXT = 36303;
  GL_INT_SAMPLER_2D_EXT = 36298;
  GL_INT_SAMPLER_2D_RECT_EXT = 36301;
  GL_INT_SAMPLER_3D_EXT = 36299;
  GL_INT_SAMPLER_BUFFER_EXT = 36304;
  GL_INT_SAMPLER_CUBE_EXT = 36300;
  GL_INT_VEC2 = 35667;
  GL_INT_VEC2_ARB = 35667;
  GL_INT_VEC3 = 35668;
  GL_INT_VEC3_ARB = 35668;
  GL_INT_VEC4 = 35669;
  GL_INT_VEC4_ARB = 35669;
  GL_INVALID_ENUM = 1280;
  GL_INVALID_FRAMEBUFFER_OPERATION = 1286;
  GL_INVALID_FRAMEBUFFER_OPERATION_EXT = 1286;
  GL_INVALID_INDEX = 4294967295;
  GL_INVALID_OPERATION = 1282;
  GL_INVALID_VALUE = 1281;
  GL_INVERT = 5386;
  GL_KEEP = 7680;
  GL_LAST_VERTEX_CONVENTION_EXT = 36430;
  GL_LEFT = 1030;
  GL_LEQUAL = 515;
  GL_LESS = 513;
  GL_LIGHT0 = 16384;
  GL_LIGHT1 = 16385;
  GL_LIGHT2 = 16386;
  GL_LIGHT3 = 16387;
  GL_LIGHT4 = 16388;
  GL_LIGHT5 = 16389;
  GL_LIGHT6 = 16390;
  GL_LIGHT7 = 16391;
  GL_LIGHTING = 2896;
  GL_LIGHTING_BIT = 64;
  GL_LIGHT_MODEL_AMBIENT = 2899;
  GL_LIGHT_MODEL_COLOR_CONTROL = 33272;
  GL_LIGHT_MODEL_COLOR_CONTROL_EXT = 33272;
  GL_LIGHT_MODEL_LOCAL_VIEWER = 2897;
  GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = 34224;
  GL_LIGHT_MODEL_TWO_SIDE = 2898;
  GL_LINE = 6913;
  GL_LINEAR = 9729;
  GL_LINEAR_ATTENUATION = 4616;
  GL_LINEAR_MIPMAP_LINEAR = 9987;
  GL_LINEAR_MIPMAP_NEAREST = 9985;
  GL_LINES = 1;
  GL_LINES_ADJACENCY_EXT = 10;
  GL_LINE_BIT = 4;
  GL_LINE_LOOP = 2;
  GL_LINE_RESET_TOKEN = 1799;
  GL_LINE_SMOOTH = 2848;
  GL_LINE_SMOOTH_HINT = 3154;
  GL_LINE_STIPPLE = 2852;
  GL_LINE_STIPPLE_PATTERN = 2853;
  GL_LINE_STIPPLE_REPEAT = 2854;
  GL_LINE_STRIP = 3;
  GL_LINE_STRIP_ADJACENCY_EXT = 11;
  GL_LINE_TOKEN = 1794;
  GL_LINE_WIDTH = 2849;
  GL_LINE_WIDTH_GRANULARITY = 2851;
  GL_LINE_WIDTH_RANGE = 2850;
  GL_LINK_STATUS = 35714;
  GL_LIST_BASE = 2866;
  GL_LIST_BIT = 131072;
  GL_LIST_INDEX = 2867;
  GL_LIST_MODE = 2864;
  GL_LOAD = 257;
  GL_LOGIC_OP = 3057;
  GL_LOGIC_OP_MODE = 3056;
  GL_LOWER_LEFT = 36001;
  GL_LUMINANCE = 6409;
  GL_LUMINANCE12 = 32833;
  GL_LUMINANCE12_ALPHA12 = 32839;
  GL_LUMINANCE12_ALPHA4 = 32838;
  GL_LUMINANCE16 = 32834;
  GL_LUMINANCE16F_ARB = 34846;
  GL_LUMINANCE16I_EXT = 36236;
  GL_LUMINANCE16UI_EXT = 36218;
  GL_LUMINANCE16_ALPHA16 = 32840;
  GL_LUMINANCE32F_ARB = 34840;
  GL_LUMINANCE32I_EXT = 36230;
  GL_LUMINANCE32UI_EXT = 36212;
  GL_LUMINANCE4 = 32831;
  GL_LUMINANCE4_ALPHA4 = 32835;
  GL_LUMINANCE6_ALPHA2 = 32836;
  GL_LUMINANCE8 = 32832;
  GL_LUMINANCE8I_EXT = 36242;
  GL_LUMINANCE8UI_EXT = 36224;
  GL_LUMINANCE8_ALPHA8 = 32837;
  GL_LUMINANCE_ALPHA = 6410;
  GL_LUMINANCE_ALPHA16F_ARB = 34847;
  GL_LUMINANCE_ALPHA16I_EXT = 36237;
  GL_LUMINANCE_ALPHA16UI_EXT = 36219;
  GL_LUMINANCE_ALPHA32F_ARB = 34841;
  GL_LUMINANCE_ALPHA32I_EXT = 36231;
  GL_LUMINANCE_ALPHA32UI_EXT = 36213;
  GL_LUMINANCE_ALPHA8I_EXT = 36243;
  GL_LUMINANCE_ALPHA8UI_EXT = 36225;
  GL_LUMINANCE_ALPHA_FLOAT16_APPLE = 34847;
  GL_LUMINANCE_ALPHA_FLOAT16_ATI = 34847;
  GL_LUMINANCE_ALPHA_FLOAT32_APPLE = 34841;
  GL_LUMINANCE_ALPHA_FLOAT32_ATI = 34841;
  GL_LUMINANCE_ALPHA_INTEGER_EXT = 36253;
  GL_LUMINANCE_FLOAT16_APPLE = 34846;
  GL_LUMINANCE_FLOAT16_ATI = 34846;
  GL_LUMINANCE_FLOAT32_APPLE = 34840;
  GL_LUMINANCE_FLOAT32_ATI = 34840;
  GL_LUMINANCE_INTEGER_EXT = 36252;
  GL_MAP1_COLOR_4 = 3472;
  GL_MAP1_GRID_DOMAIN = 3536;
  GL_MAP1_GRID_SEGMENTS = 3537;
  GL_MAP1_INDEX = 3473;
  GL_MAP1_NORMAL = 3474;
  GL_MAP1_TEXTURE_COORD_1 = 3475;
  GL_MAP1_TEXTURE_COORD_2 = 3476;
  GL_MAP1_TEXTURE_COORD_3 = 3477;
  GL_MAP1_TEXTURE_COORD_4 = 3478;
  GL_MAP1_VERTEX_3 = 3479;
  GL_MAP1_VERTEX_4 = 3480;
  GL_MAP2_COLOR_4 = 3504;
  GL_MAP2_GRID_DOMAIN = 3538;
  GL_MAP2_GRID_SEGMENTS = 3539;
  GL_MAP2_INDEX = 3505;
  GL_MAP2_NORMAL = 3506;
  GL_MAP2_TEXTURE_COORD_1 = 3507;
  GL_MAP2_TEXTURE_COORD_2 = 3508;
  GL_MAP2_TEXTURE_COORD_3 = 3509;
  GL_MAP2_TEXTURE_COORD_4 = 3510;
  GL_MAP2_VERTEX_3 = 3511;
  GL_MAP2_VERTEX_4 = 3512;
  GL_MAP_COLOR = 3344;
  GL_MAP_STENCIL = 3345;
  GL_MATRIX0_ARB = 35008;
  GL_MATRIX10_ARB = 35018;
  GL_MATRIX11_ARB = 35019;
  GL_MATRIX12_ARB = 35020;
  GL_MATRIX13_ARB = 35021;
  GL_MATRIX14_ARB = 35022;
  GL_MATRIX15_ARB = 35023;
  GL_MATRIX16_ARB = 35024;
  GL_MATRIX17_ARB = 35025;
  GL_MATRIX18_ARB = 35026;
  GL_MATRIX19_ARB = 35027;
  GL_MATRIX1_ARB = 35009;
  GL_MATRIX20_ARB = 35028;
  GL_MATRIX21_ARB = 35029;
  GL_MATRIX22_ARB = 35030;
  GL_MATRIX23_ARB = 35031;
  GL_MATRIX24_ARB = 35032;
  GL_MATRIX25_ARB = 35033;
  GL_MATRIX26_ARB = 35034;
  GL_MATRIX27_ARB = 35035;
  GL_MATRIX28_ARB = 35036;
  GL_MATRIX29_ARB = 35037;
  GL_MATRIX2_ARB = 35010;
  GL_MATRIX30_ARB = 35038;
  GL_MATRIX31_ARB = 35039;
  GL_MATRIX3_ARB = 35011;
  GL_MATRIX4_ARB = 35012;
  GL_MATRIX5_ARB = 35013;
  GL_MATRIX6_ARB = 35014;
  GL_MATRIX7_ARB = 35015;
  GL_MATRIX8_ARB = 35016;
  GL_MATRIX9_ARB = 35017;
  GL_MATRIX_MODE = 2976;
  GL_MAX = 32776;
  GL_MAX_3D_TEXTURE_SIZE = 32883;
  GL_MAX_ARRAY_TEXTURE_LAYERS_EXT = 35071;
  GL_MAX_ATTRIB_STACK_DEPTH = 3381;
  GL_MAX_BINDABLE_UNIFORM_SIZE_EXT = 36333;
  GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 3387;
  GL_MAX_CLIP_PLANES = 3378;
  GL_MAX_COLOR_ATTACHMENTS = 36063;
  GL_MAX_COLOR_ATTACHMENTS_EXT = 36063;
  GL_MAX_COLOR_MATRIX_STACK_DEPTH = 32947;
  GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 32947;
  GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 35379;
  GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 35378;
  GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
  GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = 35661;
  GL_MAX_COMBINED_UNIFORM_BLOCKS = 35374;
  GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 35377;
  GL_MAX_CONVOLUTION_HEIGHT = 32795;
  GL_MAX_CONVOLUTION_WIDTH = 32794;
  GL_MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
  GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB = 34076;
  GL_MAX_DRAW_BUFFERS = 34852;
  GL_MAX_DRAW_BUFFERS_ARB = 34852;
  GL_MAX_ELEMENTS_INDICES = 33001;
  GL_MAX_ELEMENTS_INDICES_EXT = 33001;
  GL_MAX_ELEMENTS_VERTICES = 33000;
  GL_MAX_ELEMENTS_VERTICES_EXT = 33000;
  GL_MAX_EVAL_ORDER = 3376;
  GL_MAX_EXT = 32776;
  GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = 36323;
  GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 35373;
  GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 35657;
  GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = 35657;
  GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = 36324;
  GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = 36320;
  GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = 35881;
  GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = 36321;
  GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 35372;
  GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = 36319;
  GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT = 36317;
  GL_MAX_LIGHTS = 3377;
  GL_MAX_LIST_NESTING = 2865;
  GL_MAX_MODELVIEW_STACK_DEPTH = 3382;
  GL_MAX_NAME_STACK_DEPTH = 3383;
  GL_MAX_PIXEL_MAP_TABLE = 3380;
  GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 24721;
  GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATIX = 24721;
  GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 34993;
  GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 34827;
  GL_MAX_PROGRAM_ATTRIBS_ARB = 34989;
  GL_MAX_PROGRAM_CALL_DEPTH_NV = 35061;
  GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = 34997;
  GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = 35060;
  GL_MAX_PROGRAM_IF_DEPTH_NV = 35062;
  GL_MAX_PROGRAM_INSTRUCTIONS_ARB = 34977;
  GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 34996;
  GL_MAX_PROGRAM_LOOP_COUNT_NV = 35064;
  GL_MAX_PROGRAM_LOOP_DEPTH_NV = 35063;
  GL_MAX_PROGRAM_MATRICES_ARB = 34351;
  GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 34350;
  GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 34995;
  GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 34830;
  GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 34991;
  GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 34979;
  GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 34987;
  GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 34983;
  GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 34832;
  GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 34831;
  GL_MAX_PROGRAM_PARAMETERS_ARB = 34985;
  GL_MAX_PROGRAM_TEMPORARIES_ARB = 34981;
  GL_MAX_PROGRAM_TEXEL_OFFSET_EXT = 35077;
  GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 34829;
  GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 34828;
  GL_MAX_PROJECTION_STACK_DEPTH = 3384;
  GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = 34040;
  GL_MAX_RECTANGLE_TEXTURE_SIZE_EXT = 34040;
  GL_MAX_RENDERBUFFER_SIZE = 34024;
  GL_MAX_RENDERBUFFER_SIZE_EXT = 34024;
  GL_MAX_SAMPLES = 36183;
  GL_MAX_SAMPLES_EXT = 36183;
  GL_MAX_SHININESS_NV = 34052;
  GL_MAX_SPOT_EXPONENT_NV = 34053;
  GL_MAX_TEXTURE_COORDS = 34929;
  GL_MAX_TEXTURE_COORDS_ARB = 34929;
  GL_MAX_TEXTURE_IMAGE_UNITS = 34930;
  GL_MAX_TEXTURE_IMAGE_UNITS_ARB = 34930;
  GL_MAX_TEXTURE_LOD_BIAS = 34045;
  GL_MAX_TEXTURE_LOD_BIAS_EXT = 34045;
  GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 34047;
  GL_MAX_TEXTURE_SIZE = 3379;
  GL_MAX_TEXTURE_STACK_DEPTH = 3385;
  GL_MAX_TEXTURE_UNITS = 34018;
  GL_MAX_TEXTURE_UNITS_ARB = 34018;
  GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT = 35978;
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT = 35979;
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT = 35968;
  GL_MAX_UNIFORM_BLOCK_SIZE = 35376;
  GL_MAX_UNIFORM_BUFFER_BINDINGS = 35375;
  GL_MAX_VARYING_COMPONENTS_EXT = 35659;
  GL_MAX_VARYING_FLOATS = 35659;
  GL_MAX_VARYING_FLOATS_ARB = 35659;
  GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_APPLE = 34080;
  GL_MAX_VERTEX_ATTRIBS = 34921;
  GL_MAX_VERTEX_ATTRIBS_ARB = 34921;
  GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT = 36322;
  GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
  GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = 35660;
  GL_MAX_VERTEX_UNIFORM_BLOCKS = 35371;
  GL_MAX_VERTEX_UNIFORM_COMPONENTS = 35658;
  GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB = 35658;
  GL_MAX_VERTEX_UNITS_ARB = 34468;
  GL_MAX_VERTEX_VARYING_COMPONENTS_EXT = 36318;
  GL_MAX_VIEWPORT_DIMS = 3386;
  GL_MAX_WEIGHTED_ATI = 34686;
  GL_MIN = 32775;
  GL_MINMAX = 32814;
  GL_MINMAX_FORMAT = 32815;
  GL_MINMAX_SINK = 32816;
  GL_MIN_EXT = 32775;
  GL_MIN_PBUFFER_VIEWPORT_DIMS_APPLE = 35344;
  GL_MIN_PROGRAM_TEXEL_OFFSET_EXT = 35076;
  GL_MIN_WEIGHTED_ATI = 34685;
  GL_MIRRORED_REPEAT = 33648;
  GL_MIRRORED_REPEAT_ARB = 33648;
  GL_MIRROR_CLAMP_ATI = 34626;
  GL_MIRROR_CLAMP_EXT = 34626;
  GL_MIRROR_CLAMP_TO_BORDER_EXT = 35090;
  GL_MIRROR_CLAMP_TO_EDGE_ATI = 34627;
  GL_MIRROR_CLAMP_TO_EDGE_EXT = 34627;
  GL_MODELVIEW = 5888;
  GL_MODELVIEW0_ARB = 5888;
  GL_MODELVIEW10_ARB = 34602;
  GL_MODELVIEW11_ARB = 34603;
  GL_MODELVIEW12_ARB = 34604;
  GL_MODELVIEW13_ARB = 34605;
  GL_MODELVIEW14_ARB = 34606;
  GL_MODELVIEW15_ARB = 34607;
  GL_MODELVIEW16_ARB = 34608;
  GL_MODELVIEW17_ARB = 34609;
  GL_MODELVIEW18_ARB = 34610;
  GL_MODELVIEW19_ARB = 34611;
  GL_MODELVIEW1_ARB = 34058;
  GL_MODELVIEW20_ARB = 34612;
  GL_MODELVIEW21_ARB = 34613;
  GL_MODELVIEW22_ARB = 34614;
  GL_MODELVIEW23_ARB = 34615;
  GL_MODELVIEW24_ARB = 34616;
  GL_MODELVIEW25_ARB = 34617;
  GL_MODELVIEW26_ARB = 34618;
  GL_MODELVIEW27_ARB = 34619;
  GL_MODELVIEW28_ARB = 34620;
  GL_MODELVIEW29_ARB = 34621;
  GL_MODELVIEW2_ARB = 34594;
  GL_MODELVIEW30_ARB = 34622;
  GL_MODELVIEW31_ARB = 34623;
  GL_MODELVIEW3_ARB = 34595;
  GL_MODELVIEW4_ARB = 34596;
  GL_MODELVIEW5_ARB = 34597;
  GL_MODELVIEW6_ARB = 34598;
  GL_MODELVIEW7_ARB = 34599;
  GL_MODELVIEW8_ARB = 34600;
  GL_MODELVIEW9_ARB = 34601;
  GL_MODELVIEW_MATRIX = 2982;
  GL_MODELVIEW_STACK_DEPTH = 2979;
  GL_MODULATE = 8448;
  GL_MODULATE_ADD_ATI = 34628;
  GL_MODULATE_SIGNED_ADD_ATI = 34629;
  GL_MODULATE_SUBTRACT_ATI = 34630;
  GL_MULT = 259;
  GL_MULTISAMPLE = 32925;
  GL_MULTISAMPLE_ARB = 32925;
  GL_MULTISAMPLE_BIT = 536870912;
  GL_MULTISAMPLE_BIT_ARB = 536870912;
  GL_MULTISAMPLE_FILTER_HINT_NV = 34100;
  GL_N3F_V3F = 10789;
  GL_NAME_STACK_DEPTH = 3440;
  GL_NAND = 5390;
  GL_NEAREST = 9728;
  GL_NEAREST_MIPMAP_LINEAR = 9986;
  GL_NEAREST_MIPMAP_NEAREST = 9984;
  GL_NEVER = 512;
  GL_NICEST = 4354;
  GL_NONE = 0;
  GL_NOOP = 5381;
  GL_NOR = 5384;
  GL_NORMALIZE = 2977;
  GL_NORMAL_ARRAY = 32885;
  GL_NORMAL_ARRAY_BUFFER_BINDING = 34967;
  GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = 34967;
  GL_NORMAL_ARRAY_POINTER = 32911;
  GL_NORMAL_ARRAY_STRIDE = 32895;
  GL_NORMAL_ARRAY_TYPE = 32894;
  GL_NORMAL_MAP = 34065;
  GL_NORMAL_MAP_ARB = 34065;
  GL_NORMAL_MAP_NV = 34065;
  GL_NOTEQUAL = 517;
  GL_NO_ERROR = 0;
  GL_NUM_COMPRESSED_TEXTURE_FORMATS = 34466;
  GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = 34466;
  GL_NV_blend_square = 1;
  GL_NV_conditional_render = 1;
  GL_NV_depth_clamp = 1;
  GL_NV_fog_distance = 1;
  GL_NV_fragment_program2 = 1;
  GL_NV_fragment_program_option = 1;
  GL_NV_light_max_exponent = 1;
  GL_NV_multisample_filter_hint = 1;
  GL_NV_point_sprite = 1;
  GL_NV_texgen_reflection = 1;
  GL_NV_vertex_program2_option = 1;
  GL_NV_vertex_program3 = 1;
  GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = 35721;
  GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = 35722;
  GL_OBJECT_ACTIVE_UNIFORMS_ARB = 35718;
  GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 35719;
  GL_OBJECT_ATTACHED_OBJECTS_ARB = 35717;
  GL_OBJECT_COMPILE_STATUS_ARB = 35713;
  GL_OBJECT_DELETE_STATUS_ARB = 35712;
  GL_OBJECT_INFO_LOG_LENGTH_ARB = 35716;
  GL_OBJECT_LINEAR = 9217;
  GL_OBJECT_LINK_STATUS_ARB = 35714;
  GL_OBJECT_PLANE = 9473;
  GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = 35720;
  GL_OBJECT_SUBTYPE_ARB = 35663;
  GL_OBJECT_TYPE_ARB = 35662;
  GL_OBJECT_VALIDATE_STATUS_ARB = 35715;
  GL_ONE = 1;
  GL_ONE_MINUS_CONSTANT_ALPHA = 32772;
  GL_ONE_MINUS_CONSTANT_ALPHA_EXT = 32772;
  GL_ONE_MINUS_CONSTANT_COLOR = 32770;
  GL_ONE_MINUS_CONSTANT_COLOR_EXT = 32770;
  GL_ONE_MINUS_DST_ALPHA = 773;
  GL_ONE_MINUS_DST_COLOR = 775;
  GL_ONE_MINUS_SRC_ALPHA = 771;
  GL_ONE_MINUS_SRC_COLOR = 769;
  GL_OPERAND0_ALPHA = 34200;
  GL_OPERAND0_ALPHA_ARB = 34200;
  GL_OPERAND0_RGB = 34192;
  GL_OPERAND0_RGB_ARB = 34192;
  GL_OPERAND1_ALPHA = 34201;
  GL_OPERAND1_ALPHA_ARB = 34201;
  GL_OPERAND1_RGB = 34193;
  GL_OPERAND1_RGB_ARB = 34193;
  GL_OPERAND2_ALPHA = 34202;
  GL_OPERAND2_ALPHA_ARB = 34202;
  GL_OPERAND2_RGB = 34194;
  GL_OPERAND2_RGB_ARB = 34194;
  GL_OPERAND3_ALPHA = 34203;
  GL_OPERAND3_ALPHA_ARB = 34203;
  GL_OPERAND3_RGB = 34195;
  GL_OPERAND3_RGB_ARB = 34195;
  GL_OPERAND4_ALPHA = 34204;
  GL_OPERAND4_ALPHA_ARB = 34204;
  GL_OPERAND4_RGB = 34196;
  GL_OPERAND4_RGB_ARB = 34196;
  GL_OPERAND5_ALPHA = 34205;
  GL_OPERAND5_ALPHA_ARB = 34205;
  GL_OPERAND5_RGB = 34197;
  GL_OPERAND5_RGB_ARB = 34197;
  GL_OPERAND6_ALPHA = 34206;
  GL_OPERAND6_ALPHA_ARB = 34206;
  GL_OPERAND6_RGB = 34198;
  GL_OPERAND6_RGB_ARB = 34198;
  GL_OPERAND7_ALPHA = 34207;
  GL_OPERAND7_ALPHA_ARB = 34207;
  GL_OPERAND7_RGB = 34199;
  GL_OPERAND7_RGB_ARB = 34199;
  GL_OR = 5383;
  GL_ORDER = 2561;
  GL_OR_INVERTED = 5389;
  GL_OR_REVERSE = 5387;
  GL_OUT_OF_MEMORY = 1285;
  GL_PACK_ALIGNMENT = 3333;
  GL_PACK_IMAGE_BYTES_APPLE = 35351;
  GL_PACK_IMAGE_HEIGHT = 32876;
  GL_PACK_LSB_FIRST = 3329;
  GL_PACK_ROW_BYTES_APPLE = 35349;
  GL_PACK_ROW_LENGTH = 3330;
  GL_PACK_SKIP_IMAGES = 32875;
  GL_PACK_SKIP_PIXELS = 3332;
  GL_PACK_SKIP_ROWS = 3331;
  GL_PACK_SWAP_BYTES = 3328;
  GL_PASS_THROUGH_TOKEN = 1792;
  GL_PERSPECTIVE_CORRECTION_HINT = 3152;
  GL_PIXEL_MAP_A_TO_A = 3193;
  GL_PIXEL_MAP_A_TO_A_SIZE = 3257;
  GL_PIXEL_MAP_B_TO_B = 3192;
  GL_PIXEL_MAP_B_TO_B_SIZE = 3256;
  GL_PIXEL_MAP_G_TO_G = 3191;
  GL_PIXEL_MAP_G_TO_G_SIZE = 3255;
  GL_PIXEL_MAP_I_TO_A = 3189;
  GL_PIXEL_MAP_I_TO_A_SIZE = 3253;
  GL_PIXEL_MAP_I_TO_B = 3188;
  GL_PIXEL_MAP_I_TO_B_SIZE = 3252;
  GL_PIXEL_MAP_I_TO_G = 3187;
  GL_PIXEL_MAP_I_TO_G_SIZE = 3251;
  GL_PIXEL_MAP_I_TO_I = 3184;
  GL_PIXEL_MAP_I_TO_I_SIZE = 3248;
  GL_PIXEL_MAP_I_TO_R = 3186;
  GL_PIXEL_MAP_I_TO_R_SIZE = 3250;
  GL_PIXEL_MAP_R_TO_R = 3190;
  GL_PIXEL_MAP_R_TO_R_SIZE = 3254;
  GL_PIXEL_MAP_S_TO_S = 3185;
  GL_PIXEL_MAP_S_TO_S_SIZE = 3249;
  GL_PIXEL_MODE_BIT = 32;
  GL_PIXEL_PACK_BUFFER = 35051;
  GL_PIXEL_PACK_BUFFER_ARB = 35051;
  GL_PIXEL_PACK_BUFFER_BINDING = 35053;
  GL_PIXEL_PACK_BUFFER_BINDING_ARB = 35053;
  GL_PIXEL_UNPACK_BUFFER = 35052;
  GL_PIXEL_UNPACK_BUFFER_ARB = 35052;
  GL_PIXEL_UNPACK_BUFFER_BINDING = 35055;
  GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = 35055;
  GL_PN_TRIANGLES_ATI = 24720;
  GL_PN_TRIANGLES_ATIX = 24720;
  GL_PN_TRIANGLES_NORMAL_MODE_ATI = 24723;
  GL_PN_TRIANGLES_NORMAL_MODE_ATIX = 24723;
  GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = 24727;
  GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATIX = 24727;
  GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = 24728;
  GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATIX = 24728;
  GL_PN_TRIANGLES_POINT_MODE_ATI = 24722;
  GL_PN_TRIANGLES_POINT_MODE_ATIX = 24722;
  GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI = 24726;
  GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATIX = 24726;
  GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = 24725;
  GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATIX = 24725;
  GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 24724;
  GL_PN_TRIANGLES_TESSELATION_LEVEL_ATIX = 24724;
  GL_POINT = 6912;
  GL_POINTS = 0;
  GL_POINT_BIT = 2;
  GL_POINT_CULL_CENTER_ATI = 24756;
  GL_POINT_CULL_CLIP_ATI = 24757;
  GL_POINT_CULL_MODE_ATI = 24755;
  GL_POINT_DISTANCE_ATTENUATION = 33065;
  GL_POINT_DISTANCE_ATTENUATION_ARB = 33065;
  GL_POINT_FADE_THRESHOLD_SIZE = 33064;
  GL_POINT_FADE_THRESHOLD_SIZE_ARB = 33064;
  GL_POINT_SIZE = 2833;
  GL_POINT_SIZE_GRANULARITY = 2835;
  GL_POINT_SIZE_MAX = 33063;
  GL_POINT_SIZE_MAX_ARB = 33063;
  GL_POINT_SIZE_MIN = 33062;
  GL_POINT_SIZE_MIN_ARB = 33062;
  GL_POINT_SIZE_RANGE = 2834;
  GL_POINT_SMOOTH = 2832;
  GL_POINT_SMOOTH_HINT = 3153;
  GL_POINT_SPRITE = 34913;
  GL_POINT_SPRITE_ARB = 34913;
  GL_POINT_SPRITE_COORD_ORIGIN = 36000;
  GL_POINT_SPRITE_NV = 34913;
  GL_POINT_SPRITE_R_MODE_NV = 34915;
  GL_POINT_TOKEN = 1793;
  GL_POLYGON = 9;
  GL_POLYGON_BIT = 8;
  GL_POLYGON_MODE = 2880;
  GL_POLYGON_OFFSET_FACTOR = 32824;
  GL_POLYGON_OFFSET_FILL = 32823;
  GL_POLYGON_OFFSET_LINE = 10754;
  GL_POLYGON_OFFSET_POINT = 10753;
  GL_POLYGON_OFFSET_UNITS = 10752;
  GL_POLYGON_SMOOTH = 2881;
  GL_POLYGON_SMOOTH_HINT = 3155;
  GL_POLYGON_STIPPLE = 2882;
  GL_POLYGON_STIPPLE_BIT = 16;
  GL_POLYGON_TOKEN = 1795;
  GL_POSITION = 4611;
  GL_POST_COLOR_MATRIX_ALPHA_BIAS = 32955;
  GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 32955;
  GL_POST_COLOR_MATRIX_ALPHA_SCALE = 32951;
  GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 32951;
  GL_POST_COLOR_MATRIX_BLUE_BIAS = 32954;
  GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = 32954;
  GL_POST_COLOR_MATRIX_BLUE_SCALE = 32950;
  GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = 32950;
  GL_POST_COLOR_MATRIX_COLOR_TABLE = 32978;
  GL_POST_COLOR_MATRIX_GREEN_BIAS = 32953;
  GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = 32953;
  GL_POST_COLOR_MATRIX_GREEN_SCALE = 32949;
  GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = 32949;
  GL_POST_COLOR_MATRIX_RED_BIAS = 32952;
  GL_POST_COLOR_MATRIX_RED_BIAS_SGI = 32952;
  GL_POST_COLOR_MATRIX_RED_SCALE = 32948;
  GL_POST_COLOR_MATRIX_RED_SCALE_SGI = 32948;
  GL_POST_CONVOLUTION_ALPHA_BIAS = 32803;
  GL_POST_CONVOLUTION_ALPHA_SCALE = 32799;
  GL_POST_CONVOLUTION_BLUE_BIAS = 32802;
  GL_POST_CONVOLUTION_BLUE_SCALE = 32798;
  GL_POST_CONVOLUTION_COLOR_TABLE = 32977;
  GL_POST_CONVOLUTION_GREEN_BIAS = 32801;
  GL_POST_CONVOLUTION_GREEN_SCALE = 32797;
  GL_POST_CONVOLUTION_RED_BIAS = 32800;
  GL_POST_CONVOLUTION_RED_SCALE = 32796;
  GL_PREVIOUS = 34168;
  GL_PREVIOUS_ARB = 34168;
  GL_PRIMARY_COLOR = 34167;
  GL_PRIMARY_COLOR_ARB = 34167;
  GL_PRIMITIVES_GENERATED_EXT = 35975;
  GL_PROGRAM_ADDRESS_REGISTERS_ARB = 34992;
  GL_PROGRAM_ALU_INSTRUCTIONS_ARB = 34821;
  GL_PROGRAM_ATTRIBS_ARB = 34988;
  GL_PROGRAM_BINDING_ARB = 34423;
  GL_PROGRAM_ERROR_POSITION_ARB = 34379;
  GL_PROGRAM_ERROR_STRING_ARB = 34932;
  GL_PROGRAM_FORMAT_ARB = 34934;
  GL_PROGRAM_FORMAT_ASCII_ARB = 34933;
  GL_PROGRAM_INSTRUCTIONS_ARB = 34976;
  GL_PROGRAM_LENGTH_ARB = 34343;
  GL_PROGRAM_NAME_ARB = 34423;
  GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 34994;
  GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 34824;
  GL_PROGRAM_NATIVE_ATTRIBS_ARB = 34990;
  GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 34978;
  GL_PROGRAM_NATIVE_PARAMETERS_ARB = 34986;
  GL_PROGRAM_NATIVE_TEMPORARIES_ARB = 34982;
  GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 34826;
  GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 34825;
  GL_PROGRAM_OBJECT_ARB = 35648;
  GL_PROGRAM_PARAMETERS_ARB = 34984;
  GL_PROGRAM_POINT_SIZE_EXT = 34370;
  GL_PROGRAM_STRING_ARB = 34344;
  GL_PROGRAM_TEMPORARIES_ARB = 34980;
  GL_PROGRAM_TEX_INDIRECTIONS_ARB = 34823;
  GL_PROGRAM_TEX_INSTRUCTIONS_ARB = 34822;
  GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = 34998;
  GL_PROJECTION = 5889;
  GL_PROJECTION_MATRIX = 2983;
  GL_PROJECTION_STACK_DEPTH = 2980;
  GL_PROVOKING_VERTEX_EXT = 36431;
  GL_PROXY_COLOR_TABLE = 32979;
  GL_PROXY_HISTOGRAM = 32805;
  GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 32981;
  GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = 32980;
  GL_PROXY_TEXTURE_1D = 32867;
  GL_PROXY_TEXTURE_1D_ARRAY_EXT = 35865;
  GL_PROXY_TEXTURE_2D = 32868;
  GL_PROXY_TEXTURE_2D_ARRAY_EXT = 35867;
  GL_PROXY_TEXTURE_3D = 32880;
  GL_PROXY_TEXTURE_CUBE_MAP = 34075;
  GL_PROXY_TEXTURE_CUBE_MAP_ARB = 34075;
  GL_PROXY_TEXTURE_RECTANGLE_ARB = 34039;
  GL_PROXY_TEXTURE_RECTANGLE_EXT = 34039;
  GL_PURGEABLE_APPLE = 35357;
  GL_Q = 8195;
  GL_QUADRATIC_ATTENUATION = 4617;
  GL_QUADS = 7;
  GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT = 36428;
  GL_QUAD_STRIP = 8;
  GL_QUERY_BY_REGION_NO_WAIT_NV = 36374;
  GL_QUERY_BY_REGION_WAIT_NV = 36373;
  GL_QUERY_COUNTER_BITS = 34916;
  GL_QUERY_COUNTER_BITS_ARB = 34916;
  GL_QUERY_NO_WAIT_NV = 36372;
  GL_QUERY_RESULT = 34918;
  GL_QUERY_RESULT_ARB = 34918;
  GL_QUERY_RESULT_AVAILABLE = 34919;
  GL_QUERY_RESULT_AVAILABLE_ARB = 34919;
  GL_QUERY_WAIT_NV = 36371;
  GL_R = 8194;
  GL_R11F_G11F_B10F_EXT = 35898;
  GL_R16 = 33322;
  GL_R16F = 33325;
  GL_R16I = 33331;
  GL_R16UI = 33332;
  GL_R32F = 33326;
  GL_R32I = 33333;
  GL_R32UI = 33334;
  GL_R3_G3_B2 = 10768;
  GL_R8 = 33321;
  GL_R8I = 33329;
  GL_R8UI = 33330;
  GL_RASTERIZER_DISCARD_EXT = 35977;
  GL_RASTER_POSITION_UNCLIPPED_IBM = 103010;
  GL_READ_BUFFER = 3074;
  GL_READ_FRAMEBUFFER = 36008;
  GL_READ_FRAMEBUFFER_BINDING = 36010;
  GL_READ_FRAMEBUFFER_BINDING_EXT = 36010;
  GL_READ_FRAMEBUFFER_EXT = 36008;
  GL_READ_ONLY = 35000;
  GL_READ_ONLY_ARB = 35000;
  GL_READ_WRITE = 35002;
  GL_READ_WRITE_ARB = 35002;
  GL_RED = 6403;
  GL_REDUCE = 32790;
  GL_RED_BIAS = 3349;
  GL_RED_BITS = 3410;
  GL_RED_INTEGER_EXT = 36244;
  GL_RED_SCALE = 3348;
  GL_REFLECTION_MAP = 34066;
  GL_REFLECTION_MAP_ARB = 34066;
  GL_REFLECTION_MAP_NV = 34066;
  GL_RELEASED_APPLE = 35353;
  GL_RENDER = 7168;
  GL_RENDERBUFFER = 36161;
  GL_RENDERBUFFER_ALPHA_SIZE = 36179;
  GL_RENDERBUFFER_ALPHA_SIZE_EXT = 36179;
  GL_RENDERBUFFER_BINDING = 36007;
  GL_RENDERBUFFER_BINDING_EXT = 36007;
  GL_RENDERBUFFER_BLUE_SIZE = 36178;
  GL_RENDERBUFFER_BLUE_SIZE_EXT = 36178;
  GL_RENDERBUFFER_DEPTH_SIZE = 36180;
  GL_RENDERBUFFER_DEPTH_SIZE_EXT = 36180;
  GL_RENDERBUFFER_EXT = 36161;
  GL_RENDERBUFFER_GREEN_SIZE = 36177;
  GL_RENDERBUFFER_GREEN_SIZE_EXT = 36177;
  GL_RENDERBUFFER_HEIGHT = 36163;
  GL_RENDERBUFFER_HEIGHT_EXT = 36163;
  GL_RENDERBUFFER_INTERNAL_FORMAT = 36164;
  GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = 36164;
  GL_RENDERBUFFER_RED_SIZE = 36176;
  GL_RENDERBUFFER_RED_SIZE_EXT = 36176;
  GL_RENDERBUFFER_SAMPLES = 36011;
  GL_RENDERBUFFER_SAMPLES_EXT = 36011;
  GL_RENDERBUFFER_STENCIL_SIZE = 36181;
  GL_RENDERBUFFER_STENCIL_SIZE_EXT = 36181;
  GL_RENDERBUFFER_WIDTH = 36162;
  GL_RENDERBUFFER_WIDTH_EXT = 36162;
  GL_RENDERER = 7937;
  GL_RENDER_MODE = 3136;
  GL_REPEAT = 10497;
  GL_REPLACE = 7681;
  GL_REPLICATE_BORDER = 33107;
  GL_RESCALE_NORMAL = 32826;
  GL_RESCALE_NORMAL_EXT = 32826;
  GL_RETAINED_APPLE = 35355;
  GL_RETURN = 258;
  GL_RG = 33319;
  GL_RG16 = 33324;
  GL_RG16F = 33327;
  GL_RG16I = 33337;
  GL_RG16UI = 33338;
  GL_RG32F = 33328;
  GL_RG32I = 33339;
  GL_RG32UI = 33340;
  GL_RG8 = 33323;
  GL_RG8I = 33335;
  GL_RG8UI = 33336;
  GL_RGB = 6407;
  GL_RGB10 = 32850;
  GL_RGB10_A2 = 32857;
  GL_RGB12 = 32851;
  GL_RGB16 = 32852;
  GL_RGB16F_ARB = 34843;
  GL_RGB16I_EXT = 36233;
  GL_RGB16UI_EXT = 36215;
  GL_RGB32F_ARB = 34837;
  GL_RGB32I_EXT = 36227;
  GL_RGB32UI_EXT = 36209;
  GL_RGB4 = 32847;
  GL_RGB5 = 32848;
  GL_RGB5_A1 = 32855;
  GL_RGB8 = 32849;
  GL_RGB8I_EXT = 36239;
  GL_RGB8UI_EXT = 36221;
  GL_RGB9_E5_EXT = 35901;
  GL_RGBA = 6408;
  GL_RGBA12 = 32858;
  GL_RGBA16 = 32859;
  GL_RGBA16F_ARB = 34842;
  GL_RGBA16I_EXT = 36232;
  GL_RGBA16UI_EXT = 36214;
  GL_RGBA2 = 32853;
  GL_RGBA32F_ARB = 34836;
  GL_RGBA32I_EXT = 36226;
  GL_RGBA32UI_EXT = 36208;
  GL_RGBA4 = 32854;
  GL_RGBA8 = 32856;
  GL_RGBA8I_EXT = 36238;
  GL_RGBA8UI_EXT = 36220;
  GL_RGBA_FLOAT16_APPLE = 34842;
  GL_RGBA_FLOAT16_ATI = 34842;
  GL_RGBA_FLOAT32_APPLE = 34836;
  GL_RGBA_FLOAT32_ATI = 34836;
  GL_RGBA_FLOAT_MODE_ARB = 34848;
  GL_RGBA_INTEGER_EXT = 36249;
  GL_RGBA_INTEGER_MODE_EXT = 36254;
  GL_RGBA_MODE = 3121;
  GL_RGBA_SIGNED_COMPONENTS_EXT = 35900;
  GL_RGB_422_APPLE = 35359;
  GL_RGB_FLOAT16_APPLE = 34843;
  GL_RGB_FLOAT16_ATI = 34843;
  GL_RGB_FLOAT32_APPLE = 34837;
  GL_RGB_FLOAT32_ATI = 34837;
  GL_RGB_INTEGER_EXT = 36248;
  GL_RGB_SCALE = 34163;
  GL_RGB_SCALE_ARB = 34163;
  GL_RG_INTEGER = 33320;
  GL_RIGHT = 1031;
  GL_S = 8192;
  GL_SAMPLER_1D = 35677;
  GL_SAMPLER_1D_ARB = 35677;
  GL_SAMPLER_1D_ARRAY_EXT = 36288;
  GL_SAMPLER_1D_ARRAY_SHADOW_EXT = 36291;
  GL_SAMPLER_1D_SHADOW = 35681;
  GL_SAMPLER_1D_SHADOW_ARB = 35681;
  GL_SAMPLER_2D = 35678;
  GL_SAMPLER_2D_ARB = 35678;
  GL_SAMPLER_2D_ARRAY_EXT = 36289;
  GL_SAMPLER_2D_ARRAY_SHADOW_EXT = 36292;
  GL_SAMPLER_2D_RECT_ARB = 35683;
  GL_SAMPLER_2D_RECT_SHADOW_ARB = 35684;
  GL_SAMPLER_2D_SHADOW = 35682;
  GL_SAMPLER_2D_SHADOW_ARB = 35682;
  GL_SAMPLER_3D = 35679;
  GL_SAMPLER_3D_ARB = 35679;
  GL_SAMPLER_BUFFER_EXT = 36290;
  GL_SAMPLER_CUBE = 35680;
  GL_SAMPLER_CUBE_ARB = 35680;
  GL_SAMPLER_CUBE_SHADOW_EXT = 36293;
  GL_SAMPLES = 32937;
  GL_SAMPLES_ARB = 32937;
  GL_SAMPLES_PASSED = 35092;
  GL_SAMPLES_PASSED_ARB = 35092;
  GL_SAMPLE_ALPHA_TO_COVERAGE = 32926;
  GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = 32926;
  GL_SAMPLE_ALPHA_TO_ONE = 32927;
  GL_SAMPLE_ALPHA_TO_ONE_ARB = 32927;
  GL_SAMPLE_BUFFERS = 32936;
  GL_SAMPLE_BUFFERS_ARB = 32936;
  GL_SAMPLE_COVERAGE = 32928;
  GL_SAMPLE_COVERAGE_ARB = 32928;
  GL_SAMPLE_COVERAGE_INVERT = 32939;
  GL_SAMPLE_COVERAGE_INVERT_ARB = 32939;
  GL_SAMPLE_COVERAGE_VALUE = 32938;
  GL_SAMPLE_COVERAGE_VALUE_ARB = 32938;
  GL_SCISSOR_BIT = 524288;
  GL_SCISSOR_BOX = 3088;
  GL_SCISSOR_TEST = 3089;
  GL_SECONDARY_COLOR_ARRAY = 33886;
  GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 34972;
  GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = 34972;
  GL_SECONDARY_COLOR_ARRAY_EXT = 33886;
  GL_SECONDARY_COLOR_ARRAY_POINTER = 33885;
  GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = 33885;
  GL_SECONDARY_COLOR_ARRAY_SIZE = 33882;
  GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = 33882;
  GL_SECONDARY_COLOR_ARRAY_STRIDE = 33884;
  GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = 33884;
  GL_SECONDARY_COLOR_ARRAY_TYPE = 33883;
  GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = 33883;
  GL_SELECT = 7170;
  GL_SELECTION_BUFFER_POINTER = 3571;
  GL_SELECTION_BUFFER_SIZE = 3572;
  GL_SEPARABLE_2D = 32786;
  GL_SEPARATE_ATTRIBS_EXT = 35981;
  GL_SEPARATE_SPECULAR_COLOR = 33274;
  GL_SEPARATE_SPECULAR_COLOR_EXT = 33274;
  GL_SET = 5391;
  GL_SGIS_generate_mipmap = 1;
  GL_SGIS_texture_edge_clamp = 1;
  GL_SGIS_texture_lod = 1;
  GL_SGI_color_matrix = 1;
  GL_SHADER_OBJECT_ARB = 35656;
  GL_SHADER_SOURCE_LENGTH = 35720;
  GL_SHADER_TYPE = 35663;
  GL_SHADE_MODEL = 2900;
  GL_SHADING_LANGUAGE_VERSION = 35724;
  GL_SHADING_LANGUAGE_VERSION_ARB = 35724;
  GL_SHININESS = 5633;
  GL_SHORT = 5122;
  GL_SINGLE_COLOR = 33273;
  GL_SINGLE_COLOR_EXT = 33273;
  GL_SLUMINANCE = 35910;
  GL_SLUMINANCE8 = 35911;
  GL_SLUMINANCE8_ALPHA8 = 35909;
  GL_SLUMINANCE8_ALPHA8_EXT = 35909;
  GL_SLUMINANCE8_EXT = 35911;
  GL_SLUMINANCE_ALPHA = 35908;
  GL_SLUMINANCE_ALPHA_EXT = 35908;
  GL_SLUMINANCE_EXT = 35910;
  GL_SMOOTH = 7425;
  GL_SMOOTH_LINE_WIDTH_GRANULARITY = 2851;
  GL_SMOOTH_LINE_WIDTH_RANGE = 2850;
  GL_SMOOTH_POINT_SIZE_GRANULARITY = 2835;
  GL_SMOOTH_POINT_SIZE_RANGE = 2834;
  GL_SOURCE0_ALPHA = 34184;
  GL_SOURCE0_ALPHA_ARB = 34184;
  GL_SOURCE0_RGB = 34176;
  GL_SOURCE0_RGB_ARB = 34176;
  GL_SOURCE1_ALPHA = 34185;
  GL_SOURCE1_ALPHA_ARB = 34185;
  GL_SOURCE1_RGB = 34177;
  GL_SOURCE1_RGB_ARB = 34177;
  GL_SOURCE2_ALPHA = 34186;
  GL_SOURCE2_ALPHA_ARB = 34186;
  GL_SOURCE2_RGB = 34178;
  GL_SOURCE2_RGB_ARB = 34178;
  GL_SOURCE3_ALPHA = 34187;
  GL_SOURCE3_ALPHA_ARB = 34187;
  GL_SOURCE3_RGB = 34179;
  GL_SOURCE3_RGB_ARB = 34179;
  GL_SOURCE4_ALPHA = 34188;
  GL_SOURCE4_ALPHA_ARB = 34188;
  GL_SOURCE4_RGB = 34180;
  GL_SOURCE4_RGB_ARB = 34180;
  GL_SOURCE5_ALPHA = 34189;
  GL_SOURCE5_ALPHA_ARB = 34189;
  GL_SOURCE5_RGB = 34181;
  GL_SOURCE5_RGB_ARB = 34181;
  GL_SOURCE6_ALPHA = 34190;
  GL_SOURCE6_ALPHA_ARB = 34190;
  GL_SOURCE6_RGB = 34182;
  GL_SOURCE6_RGB_ARB = 34182;
  GL_SOURCE7_ALPHA = 34191;
  GL_SOURCE7_ALPHA_ARB = 34191;
  GL_SOURCE7_RGB = 34183;
  GL_SOURCE7_RGB_ARB = 34183;
  GL_SPECULAR = 4610;
  GL_SPHERE_MAP = 9218;
  GL_SPOT_CUTOFF = 4614;
  GL_SPOT_DIRECTION = 4612;
  GL_SPOT_EXPONENT = 4613;
  GL_SRC0_ALPHA = 34184;
  GL_SRC0_RGB = 34176;
  GL_SRC1_ALPHA = 34185;
  GL_SRC1_RGB = 34177;
  GL_SRC2_ALPHA = 34186;
  GL_SRC2_RGB = 34178;
  GL_SRC3_ALPHA = 34187;
  GL_SRC3_RGB = 34179;
  GL_SRC4_ALPHA = 34188;
  GL_SRC4_RGB = 34180;
  GL_SRC5_ALPHA = 34189;
  GL_SRC5_RGB = 34181;
  GL_SRC6_ALPHA = 34190;
  GL_SRC6_RGB = 34182;
  GL_SRC7_ALPHA = 34191;
  GL_SRC7_RGB = 34183;
  GL_SRC_ALPHA = 770;
  GL_SRC_ALPHA_SATURATE = 776;
  GL_SRC_COLOR = 768;
  GL_SRGB = 35904;
  GL_SRGB8 = 35905;
  GL_SRGB8_ALPHA8 = 35907;
  GL_SRGB8_ALPHA8_EXT = 35907;
  GL_SRGB8_EXT = 35905;
  GL_SRGB_ALPHA = 35906;
  GL_SRGB_ALPHA_EXT = 35906;
  GL_SRGB_EXT = 35904;
  GL_STACK_OVERFLOW = 1283;
  GL_STACK_UNDERFLOW = 1284;
  GL_STATIC_COPY = 35046;
  GL_STATIC_COPY_ARB = 35046;
  GL_STATIC_DRAW = 35044;
  GL_STATIC_DRAW_ARB = 35044;
  GL_STATIC_READ = 35045;
  GL_STATIC_READ_ARB = 35045;
  GL_STENCIL = 6146;
  GL_STENCIL_ATTACHMENT = 36128;
  GL_STENCIL_ATTACHMENT_EXT = 36128;
  GL_STENCIL_BACK_FAIL = 34817;
  GL_STENCIL_BACK_FAIL_ATI = 34817;
  GL_STENCIL_BACK_FUNC = 34816;
  GL_STENCIL_BACK_FUNC_ATI = 34816;
  GL_STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
  GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI = 34818;
  GL_STENCIL_BACK_PASS_DEPTH_PASS = 34819;
  GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI = 34819;
  GL_STENCIL_BACK_REF = 36003;
  GL_STENCIL_BACK_VALUE_MASK = 36004;
  GL_STENCIL_BACK_WRITEMASK = 36005;
  GL_STENCIL_BITS = 3415;
  GL_STENCIL_BUFFER_BIT = 1024;
  GL_STENCIL_CLEAR_VALUE = 2961;
  GL_STENCIL_FAIL = 2964;
  GL_STENCIL_FUNC = 2962;
  GL_STENCIL_INDEX = 6401;
  GL_STENCIL_INDEX1 = 36166;
  GL_STENCIL_INDEX16 = 36169;
  GL_STENCIL_INDEX16_EXT = 36169;
  GL_STENCIL_INDEX1_EXT = 36166;
  GL_STENCIL_INDEX4 = 36167;
  GL_STENCIL_INDEX4_EXT = 36167;
  GL_STENCIL_INDEX8 = 36168;
  GL_STENCIL_INDEX8_EXT = 36168;
  GL_STENCIL_PASS_DEPTH_FAIL = 2965;
  GL_STENCIL_PASS_DEPTH_PASS = 2966;
  GL_STENCIL_REF = 2967;
  GL_STENCIL_TEST = 2960;
  GL_STENCIL_TEST_TWO_SIDE_EXT = 35088;
  GL_STENCIL_VALUE_MASK = 2963;
  GL_STENCIL_WRITEMASK = 2968;
  GL_STEREO = 3123;
  GL_STORAGE_CACHED_APPLE = 34238;
  GL_STORAGE_CLIENT_APPLE = 34228;
  GL_STORAGE_PRIVATE_APPLE = 34237;
  GL_STORAGE_SHARED_APPLE = 34239;
  GL_STREAM_COPY = 35042;
  GL_STREAM_COPY_ARB = 35042;
  GL_STREAM_DRAW = 35040;
  GL_STREAM_DRAW_ARB = 35040;
  GL_STREAM_READ = 35041;
  GL_STREAM_READ_ARB = 35041;
  GL_SUBPIXEL_BITS = 3408;
  GL_SUBTRACT = 34023;
  GL_SUBTRACT_ARB = 34023;
  GL_T = 8193;
  GL_T2F_C3F_V3F = 10794;
  GL_T2F_C4F_N3F_V3F = 10796;
  GL_T2F_C4UB_V3F = 10793;
  GL_T2F_N3F_V3F = 10795;
  GL_T2F_V3F = 10791;
  GL_T4F_C4F_N3F_V4F = 10797;
  GL_T4F_V4F = 10792;
  GL_TABLE_TOO_LARGE = 32817;
  GL_TEXTURE = 5890;
  GL_TEXTURE0 = 33984;
  GL_TEXTURE0_ARB = 33984;
  GL_TEXTURE1 = 33985;
  GL_TEXTURE10 = 33994;
  GL_TEXTURE10_ARB = 33994;
  GL_TEXTURE11 = 33995;
  GL_TEXTURE11_ARB = 33995;
  GL_TEXTURE12 = 33996;
  GL_TEXTURE12_ARB = 33996;
  GL_TEXTURE13 = 33997;
  GL_TEXTURE13_ARB = 33997;
  GL_TEXTURE14 = 33998;
  GL_TEXTURE14_ARB = 33998;
  GL_TEXTURE15 = 33999;
  GL_TEXTURE15_ARB = 33999;
  GL_TEXTURE16 = 34000;
  GL_TEXTURE16_ARB = 34000;
  GL_TEXTURE17 = 34001;
  GL_TEXTURE17_ARB = 34001;
  GL_TEXTURE18 = 34002;
  GL_TEXTURE18_ARB = 34002;
  GL_TEXTURE19 = 34003;
  GL_TEXTURE19_ARB = 34003;
  GL_TEXTURE1_ARB = 33985;
  GL_TEXTURE2 = 33986;
  GL_TEXTURE20 = 34004;
  GL_TEXTURE20_ARB = 34004;
  GL_TEXTURE21 = 34005;
  GL_TEXTURE21_ARB = 34005;
  GL_TEXTURE22 = 34006;
  GL_TEXTURE22_ARB = 34006;
  GL_TEXTURE23 = 34007;
  GL_TEXTURE23_ARB = 34007;
  GL_TEXTURE24 = 34008;
  GL_TEXTURE24_ARB = 34008;
  GL_TEXTURE25 = 34009;
  GL_TEXTURE25_ARB = 34009;
  GL_TEXTURE26 = 34010;
  GL_TEXTURE26_ARB = 34010;
  GL_TEXTURE27 = 34011;
  GL_TEXTURE27_ARB = 34011;
  GL_TEXTURE28 = 34012;
  GL_TEXTURE28_ARB = 34012;
  GL_TEXTURE29 = 34013;
  GL_TEXTURE29_ARB = 34013;
  GL_TEXTURE2_ARB = 33986;
  GL_TEXTURE3 = 33987;
  GL_TEXTURE30 = 34014;
  GL_TEXTURE30_ARB = 34014;
  GL_TEXTURE31 = 34015;
  GL_TEXTURE31_ARB = 34015;
  GL_TEXTURE3_ARB = 33987;
  GL_TEXTURE4 = 33988;
  GL_TEXTURE4_ARB = 33988;
  GL_TEXTURE5 = 33989;
  GL_TEXTURE5_ARB = 33989;
  GL_TEXTURE6 = 33990;
  GL_TEXTURE6_ARB = 33990;
  GL_TEXTURE7 = 33991;
  GL_TEXTURE7_ARB = 33991;
  GL_TEXTURE8 = 33992;
  GL_TEXTURE8_ARB = 33992;
  GL_TEXTURE9 = 33993;
  GL_TEXTURE9_ARB = 33993;
  GL_TEXTURE_1D = 3552;
  GL_TEXTURE_1D_ARRAY_EXT = 35864;
  GL_TEXTURE_2D = 3553;
  GL_TEXTURE_2D_ARRAY_EXT = 35866;
  GL_TEXTURE_3D = 32879;
  GL_TEXTURE_ALPHA_SIZE = 32863;
  GL_TEXTURE_ALPHA_TYPE = 35859;
  GL_TEXTURE_ALPHA_TYPE_ARB = 35859;
  GL_TEXTURE_BASE_LEVEL = 33084;
  GL_TEXTURE_BASE_LEVEL_SGIS = 33084;
  GL_TEXTURE_BINDING_1D = 32872;
  GL_TEXTURE_BINDING_1D_ARRAY_EXT = 35868;
  GL_TEXTURE_BINDING_2D = 32873;
  GL_TEXTURE_BINDING_2D_ARRAY_EXT = 35869;
  GL_TEXTURE_BINDING_3D = 32874;
  GL_TEXTURE_BINDING_CUBE_MAP = 34068;
  GL_TEXTURE_BINDING_CUBE_MAP_ARB = 34068;
  GL_TEXTURE_BINDING_RECTANGLE_ARB = 34038;
  GL_TEXTURE_BINDING_RECTANGLE_EXT = 34038;
  GL_TEXTURE_BIT = 262144;
  GL_TEXTURE_BLUE_SIZE = 32862;
  GL_TEXTURE_BLUE_TYPE = 35858;
  GL_TEXTURE_BLUE_TYPE_ARB = 35858;
  GL_TEXTURE_BORDER = 4101;
  GL_TEXTURE_BORDER_COLOR = 4100;
  GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = 32959;
  GL_TEXTURE_COMPARE_FUNC = 34893;
  GL_TEXTURE_COMPARE_FUNC_ARB = 34893;
  GL_TEXTURE_COMPARE_MODE = 34892;
  GL_TEXTURE_COMPARE_MODE_ARB = 34892;
  GL_TEXTURE_COMPONENTS = 4099;
  GL_TEXTURE_COMPRESSED = 34465;
  GL_TEXTURE_COMPRESSED_ARB = 34465;
  GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 34464;
  GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = 34464;
  GL_TEXTURE_COMPRESSION_HINT = 34031;
  GL_TEXTURE_COMPRESSION_HINT_ARB = 34031;
  GL_TEXTURE_COORD_ARRAY = 32888;
  GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 34970;
  GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = 34970;
  GL_TEXTURE_COORD_ARRAY_POINTER = 32914;
  GL_TEXTURE_COORD_ARRAY_SIZE = 32904;
  GL_TEXTURE_COORD_ARRAY_STRIDE = 32906;
  GL_TEXTURE_COORD_ARRAY_TYPE = 32905;
  GL_TEXTURE_CUBE_MAP = 34067;
  GL_TEXTURE_CUBE_MAP_ARB = 34067;
  GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
  GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 34070;
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 34072;
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 34074;
  GL_TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
  GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 34069;
  GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
  GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 34071;
  GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
  GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 34073;
  GL_TEXTURE_DEPTH = 32881;
  GL_TEXTURE_DEPTH_SIZE = 34890;
  GL_TEXTURE_DEPTH_SIZE_ARB = 34890;
  GL_TEXTURE_DEPTH_TYPE = 35862;
  GL_TEXTURE_DEPTH_TYPE_ARB = 35862;
  GL_TEXTURE_ENV = 8960;
  GL_TEXTURE_ENV_COLOR = 8705;
  GL_TEXTURE_ENV_MODE = 8704;
  GL_TEXTURE_FILTER_CONTROL = 34048;
  GL_TEXTURE_FILTER_CONTROL_EXT = 34048;
  GL_TEXTURE_GEN_MODE = 9472;
  GL_TEXTURE_GEN_Q = 3171;
  GL_TEXTURE_GEN_R = 3170;
  GL_TEXTURE_GEN_S = 3168;
  GL_TEXTURE_GEN_T = 3169;
  GL_TEXTURE_GREEN_SIZE = 32861;
  GL_TEXTURE_GREEN_TYPE = 35857;
  GL_TEXTURE_GREEN_TYPE_ARB = 35857;
  GL_TEXTURE_HEIGHT = 4097;
  GL_TEXTURE_INTENSITY_SIZE = 32865;
  GL_TEXTURE_INTENSITY_TYPE_ARB = 35861;
  GL_TEXTURE_INTERNAL_FORMAT = 4099;
  GL_TEXTURE_LOD_BIAS = 34049;
  GL_TEXTURE_LOD_BIAS_EXT = 34049;
  GL_TEXTURE_LUMINANCE_SIZE = 32864;
  GL_TEXTURE_LUMINANCE_TYPE_ARB = 35860;
  GL_TEXTURE_MAG_FILTER = 10240;
  GL_TEXTURE_MATRIX = 2984;
  GL_TEXTURE_MAX_ANISOTROPY_EXT = 34046;
  GL_TEXTURE_MAX_LEVEL = 33085;
  GL_TEXTURE_MAX_LEVEL_SGIS = 33085;
  GL_TEXTURE_MAX_LOD = 33083;
  GL_TEXTURE_MAX_LOD_SGIS = 33083;
  GL_TEXTURE_MINIMIZE_STORAGE_APPLE = 34230;
  GL_TEXTURE_MIN_FILTER = 10241;
  GL_TEXTURE_MIN_LOD = 33082;
  GL_TEXTURE_MIN_LOD_SGIS = 33082;
  GL_TEXTURE_PRIORITY = 32870;
  GL_TEXTURE_RANGE_LENGTH_APPLE = 34231;
  GL_TEXTURE_RANGE_POINTER_APPLE = 34232;
  GL_TEXTURE_RECTANGLE_ARB = 34037;
  GL_TEXTURE_RECTANGLE_EXT = 34037;
  GL_TEXTURE_RED_SIZE = 32860;
  GL_TEXTURE_RED_TYPE = 35856;
  GL_TEXTURE_RED_TYPE_ARB = 35856;
  GL_TEXTURE_RESIDENT = 32871;
  GL_TEXTURE_SHARED_SIZE_EXT = 35903;
  GL_TEXTURE_STACK_DEPTH = 2981;
  GL_TEXTURE_STENCIL_SIZE = 35057;
  GL_TEXTURE_STENCIL_SIZE_EXT = 35057;
  GL_TEXTURE_STORAGE_HINT_APPLE = 34236;
  GL_TEXTURE_WIDTH = 4096;
  GL_TEXTURE_WRAP_R = 32882;
  GL_TEXTURE_WRAP_S = 10242;
  GL_TEXTURE_WRAP_T = 10243;
  GL_TRANSFORM_BIT = 4096;
  GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT = 35983;
  GL_TRANSFORM_FEEDBACK_BUFFER_EXT = 35982;
  GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT = 35967;
  GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT = 35973;
  GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT = 35972;
  GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT = 35976;
  GL_TRANSFORM_FEEDBACK_VARYINGS_EXT = 35971;
  GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT = 35958;
  GL_TRANSFORM_HINT_APPLE = 34225;
  GL_TRANSPOSE_COLOR_MATRIX = 34022;
  GL_TRANSPOSE_COLOR_MATRIX_ARB = 34022;
  GL_TRANSPOSE_CURRENT_MATRIX_ARB = 34999;
  GL_TRANSPOSE_MODELVIEW_MATRIX = 34019;
  GL_TRANSPOSE_MODELVIEW_MATRIX_ARB = 34019;
  GL_TRANSPOSE_PROJECTION_MATRIX = 34020;
  GL_TRANSPOSE_PROJECTION_MATRIX_ARB = 34020;
  GL_TRANSPOSE_TEXTURE_MATRIX = 34021;
  GL_TRANSPOSE_TEXTURE_MATRIX_ARB = 34021;
  GL_TRIANGLES = 4;
  GL_TRIANGLES_ADJACENCY_EXT = 12;
  GL_TRIANGLE_FAN = 6;
  GL_TRIANGLE_STRIP = 5;
  GL_TRIANGLE_STRIP_ADJACENCY_EXT = 13;
  GL_TRUE = 1;
  GL_UNDEFINED_APPLE = 35356;
  GL_UNIFORM_ARRAY_STRIDE = 35388;
  GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 35394;
  GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 35395;
  GL_UNIFORM_BLOCK_BINDING = 35391;
  GL_UNIFORM_BLOCK_DATA_SIZE = 35392;
  GL_UNIFORM_BLOCK_INDEX = 35386;
  GL_UNIFORM_BLOCK_NAME_LENGTH = 35393;
  GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 35398;
  GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 35397;
  GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 35396;
  GL_UNIFORM_BUFFER = 35345;
  GL_UNIFORM_BUFFER_BINDING = 35368;
  GL_UNIFORM_BUFFER_BINDING_EXT = 36335;
  GL_UNIFORM_BUFFER_EXT = 36334;
  GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 35380;
  GL_UNIFORM_BUFFER_SIZE = 35370;
  GL_UNIFORM_BUFFER_START = 35369;
  GL_UNIFORM_IS_ROW_MAJOR = 35390;
  GL_UNIFORM_MATRIX_STRIDE = 35389;
  GL_UNIFORM_NAME_LENGTH = 35385;
  GL_UNIFORM_OFFSET = 35387;
  GL_UNIFORM_SIZE = 35384;
  GL_UNIFORM_TYPE = 35383;
  GL_UNPACK_ALIGNMENT = 3317;
  GL_UNPACK_CLIENT_STORAGE_APPLE = 34226;
  GL_UNPACK_IMAGE_BYTES_APPLE = 35352;
  GL_UNPACK_IMAGE_HEIGHT = 32878;
  GL_UNPACK_LSB_FIRST = 3313;
  GL_UNPACK_ROW_BYTES_APPLE = 35350;
  GL_UNPACK_ROW_LENGTH = 3314;
  GL_UNPACK_SKIP_IMAGES = 32877;
  GL_UNPACK_SKIP_PIXELS = 3316;
  GL_UNPACK_SKIP_ROWS = 3315;
  GL_UNPACK_SWAP_BYTES = 3312;
  GL_UNSIGNED_BYTE = 5121;
  GL_UNSIGNED_BYTE_2_3_3_REV = 33634;
  GL_UNSIGNED_BYTE_3_3_2 = 32818;
  GL_UNSIGNED_INT = 5125;
  GL_UNSIGNED_INT_10F_11F_11F_REV_EXT = 35899;
  GL_UNSIGNED_INT_10_10_10_2 = 32822;
  GL_UNSIGNED_INT_24_8 = 34042;
  GL_UNSIGNED_INT_24_8_EXT = 34042;
  GL_UNSIGNED_INT_2_10_10_10_REV = 33640;
  GL_UNSIGNED_INT_5_9_9_9_REV_EXT = 35902;
  GL_UNSIGNED_INT_8_8_8_8 = 32821;
  GL_UNSIGNED_INT_8_8_8_8_REV = 33639;
  GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = 36310;
  GL_UNSIGNED_INT_SAMPLER_1D_EXT = 36305;
  GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = 36311;
  GL_UNSIGNED_INT_SAMPLER_2D_EXT = 36306;
  GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT = 36309;
  GL_UNSIGNED_INT_SAMPLER_3D_EXT = 36307;
  GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = 36312;
  GL_UNSIGNED_INT_SAMPLER_CUBE_EXT = 36308;
  GL_UNSIGNED_INT_VEC2_EXT = 36294;
  GL_UNSIGNED_INT_VEC3_EXT = 36295;
  GL_UNSIGNED_INT_VEC4_EXT = 36296;
  GL_UNSIGNED_NORMALIZED = 35863;
  GL_UNSIGNED_NORMALIZED_ARB = 35863;
  GL_UNSIGNED_SHORT = 5123;
  GL_UNSIGNED_SHORT_1_5_5_5_REV = 33638;
  GL_UNSIGNED_SHORT_4_4_4_4 = 32819;
  GL_UNSIGNED_SHORT_4_4_4_4_REV = 33637;
  GL_UNSIGNED_SHORT_5_5_5_1 = 32820;
  GL_UNSIGNED_SHORT_5_6_5 = 33635;
  GL_UNSIGNED_SHORT_5_6_5_REV = 33636;
  GL_UNSIGNED_SHORT_8_8_APPLE = 34234;
  GL_UNSIGNED_SHORT_8_8_REV_APPLE = 34235;
  GL_UPPER_LEFT = 36002;
  GL_V2F = 10784;
  GL_V3F = 10785;
  GL_VALIDATE_STATUS = 35715;
  GL_VENDOR = 7936;
  GL_VERSION = 7938;
  GL_VERSION_1_1 = 1;
  GL_VERSION_1_2 = 1;
  GL_VERSION_1_3 = 1;
  GL_VERSION_1_4 = 1;
  GL_VERSION_1_5 = 1;
  GL_VERSION_2_0 = 1;
  GL_VERSION_2_1 = 1;
  GL_VERTEX_ARRAY = 32884;
  GL_VERTEX_ARRAY_BINDING_APPLE = 34229;
  GL_VERTEX_ARRAY_BUFFER_BINDING = 34966;
  GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = 34966;
  GL_VERTEX_ARRAY_POINTER = 32910;
  GL_VERTEX_ARRAY_RANGE_APPLE = 34077;
  GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = 34078;
  GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = 34081;
  GL_VERTEX_ARRAY_SIZE = 32890;
  GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = 34079;
  GL_VERTEX_ARRAY_STRIDE = 32892;
  GL_VERTEX_ARRAY_TYPE = 32891;
  GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
  GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = 34975;
  GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB = 35070;
  GL_VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
  GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = 34338;
  GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT = 35069;
  GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
  GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = 34922;
  GL_VERTEX_ATTRIB_ARRAY_POINTER = 34373;
  GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = 34373;
  GL_VERTEX_ATTRIB_ARRAY_SIZE = 34339;
  GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = 34339;
  GL_VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
  GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = 34340;
  GL_VERTEX_ATTRIB_ARRAY_TYPE = 34341;
  GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = 34341;
  GL_VERTEX_ATTRIB_MAP1_APPLE = 35328;
  GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE = 35331;
  GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = 35333;
  GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE = 35332;
  GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE = 35330;
  GL_VERTEX_ATTRIB_MAP2_APPLE = 35329;
  GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE = 35335;
  GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = 35337;
  GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE = 35336;
  GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE = 35334;
  GL_VERTEX_BLEND_ARB = 34471;
  GL_VERTEX_PROGRAM_ARB = 34336;
  GL_VERTEX_PROGRAM_POINT_SIZE = 34370;
  GL_VERTEX_PROGRAM_POINT_SIZE_ARB = 34370;
  GL_VERTEX_PROGRAM_TWO_SIDE = 34371;
  GL_VERTEX_PROGRAM_TWO_SIDE_ARB = 34371;
  GL_VERTEX_SHADER = 35633;
  GL_VERTEX_SHADER_ARB = 35633;
  GL_VIEWPORT = 2978;
  GL_VIEWPORT_BIT = 2048;
  GL_VOLATILE_APPLE = 35354;
  GL_WEIGHT_ARRAY_ARB = 34477;
  GL_WEIGHT_ARRAY_BUFFER_BINDING = 34974;
  GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = 34974;
  GL_WEIGHT_ARRAY_POINTER_ARB = 34476;
  GL_WEIGHT_ARRAY_SIZE_ARB = 34475;
  GL_WEIGHT_ARRAY_STRIDE_ARB = 34474;
  GL_WEIGHT_ARRAY_TYPE_ARB = 34473;
  GL_WEIGHT_SUM_UNITY_ARB = 34470;
  GL_WRITE_ONLY = 35001;
  GL_WRITE_ONLY_ARB = 35001;
  GL_XOR = 5382;
  GL_YCBCR_422_APPLE = 34233;
  GL_ZERO = 0;
  GL_ZOOM_X = 3350;
  GL_ZOOM_Y = 3351;
  kCGL0Bit = 1;
  kCGL10Bit = 256;
  kCGL128Bit = 65536;
  kCGL12Bit = 512;
  kCGL16Bit = 1024;
  kCGL1Bit = 2;
  kCGL24Bit = 2048;
  kCGL2Bit = 4;
  kCGL32Bit = 4096;
  kCGL3Bit = 8;
  kCGL48Bit = 8192;
  kCGL4Bit = 16;
  kCGL5Bit = 32;
  kCGL64Bit = 16384;
  kCGL6Bit = 64;
  kCGL8Bit = 128;
  kCGL96Bit = 32768;
  kCGLARGB12121212Bit = 2097152;
  kCGLARGB1555Bit = 1024;
  kCGLARGB16161616Bit = 8388608;
  kCGLARGB2101010Bit = 262144;
  kCGLARGB4444Bit = 128;
  kCGLARGB8888Bit = 32768;
  kCGLBadAddress = 10014;
  kCGLBadAlloc = 10016;
  kCGLBadAttribute = 10000;
  kCGLBadCodeModule = 10015;
  kCGLBadConnection = 10017;
  kCGLBadContext = 10004;
  kCGLBadDisplay = 10006;
  kCGLBadDrawable = 10005;
  kCGLBadEnumeration = 10010;
  kCGLBadFullScreen = 10012;
  kCGLBadMatch = 10009;
  kCGLBadOffScreen = 10011;
  kCGLBadPixelFormat = 10002;
  kCGLBadProperty = 10001;
  kCGLBadRendererInfo = 10003;
  kCGLBadState = 10007;
  kCGLBadValue = 10008;
  kCGLBadWindow = 10013;
  kCGLCEDisplayListOptimization = 307;
  kCGLCEMPEngine = 313;
  kCGLCERasterization = 221;
  kCGLCEStateValidation = 301;
  kCGLCESurfaceBackingSize = 305;
  kCGLCESwapLimit = 203;
  kCGLCESwapRectangle = 201;
  kCGLCPClientStorage = 226;
  kCGLCPComment = 1232;
  kCGLCPCurrentRendererID = 309;
  kCGLCPDispatchTableSize = 224;
  kCGLCPDumpState = 1233;
  kCGLCPEnableForceFlush = 1234;
  kCGLCPGPUFragmentProcessing = 311;
  kCGLCPGPUVertexProcessing = 310;
  kCGLCPHasDrawable = 314;
  kCGLCPMPSwapsInFlight = 315;
  kCGLCPReclaimResources = 308;
  kCGLCPSurfaceBackingSize = 304;
  kCGLCPSurfaceOpacity = 236;
  kCGLCPSurfaceOrder = 235;
  kCGLCPSurfaceSurfaceVolatile = 306;
  kCGLCPSurfaceTexture = 228;
  kCGLCPSwapInterval = 222;
  kCGLCPSwapRectangle = 200;
  kCGLDoubleBufferBit = 8;
  kCGLFECGLChoosePixelFormat = 0;
  kCGLFECGLClearDrawable = 1;
  kCGLFECGLComment = 2;
  kCGLFECGLCopyContext = 3;
  kCGLFECGLCreateContext = 4;
  kCGLFECGLCreatePBuffer = 5;
  kCGLFECGLDescribePBuffer = 6;
  kCGLFECGLDescribePixelFormat = 7;
  kCGLFECGLDescribeRenderer = 8;
  kCGLFECGLDestroyContext = 9;
  kCGLFECGLDestroyPBuffer = 10;
  kCGLFECGLDestroyPixelFormat = 11;
  kCGLFECGLDestroyRendererInfo = 12;
  kCGLFECGLDisable = 13;
  kCGLFECGLEnable = 14;
  kCGLFECGLFlushDrawable = 15;
  kCGLFECGLGetCurrentContext = 16;
  kCGLFECGLGetFullScreen = 17;
  kCGLFECGLGetOffScreen = 18;
  kCGLFECGLGetOption = 19;
  kCGLFECGLGetPBuffer = 21;
  kCGLFECGLGetParameter = 20;
  kCGLFECGLGetSurface = 22;
  kCGLFECGLGetVersion = 23;
  kCGLFECGLGetVirtualScreen = 24;
  kCGLFECGLIsEnabled = 25;
  kCGLFECGLQueryRendererInfo = 26;
  kCGLFECGLSetCurrentContext = 27;
  kCGLFECGLSetFullScreen = 28;
  kCGLFECGLSetOffScreen = 29;
  kCGLFECGLSetOption = 30;
  kCGLFECGLSetPBuffer = 32;
  kCGLFECGLSetParameter = 31;
  kCGLFECGLSetSurface = 33;
  kCGLFECGLSetVirtualScreen = 34;
  kCGLFECGLTexImagePBuffer = 35;
  kCGLFECGLUpdateContext = 36;
  kCGLFENumFunctions = 802;
  kCGLFEglAccum = 37;
  kCGLFEglActiveStencilFaceEXT = 38;
  kCGLFEglActiveTexture = 39;
  kCGLFEglAlphaFunc = 40;
  kCGLFEglAreTexturesResident = 41;
  kCGLFEglArrayElement = 42;
  kCGLFEglAttachObjectARB = 43;
  kCGLFEglAttachUniformBufferAPPLE = 795;
  kCGLFEglBegin = 44;
  kCGLFEglBeginConditionalRenderNV = 792;
  kCGLFEglBeginQuery = 45;
  kCGLFEglBeginTransformFeedbackEXT = 731;
  kCGLFEglBindAttribLocationARB = 46;
  kCGLFEglBindBuffer = 47;
  kCGLFEglBindBufferBaseEXT = 730;
  kCGLFEglBindBufferOffsetEXT = 729;
  kCGLFEglBindBufferRangeEXT = 728;
  kCGLFEglBindFragDataLocationEXT = 778;
  kCGLFEglBindFramebufferEXT = 48;
  kCGLFEglBindProgramARB = 49;
  kCGLFEglBindRenderbufferEXT = 50;
  kCGLFEglBindTexture = 51;
  kCGLFEglBindVertexArrayEXT = 52;
  kCGLFEglBitmap = 53;
  kCGLFEglBlendColor = 54;
  kCGLFEglBlendEquation = 55;
  kCGLFEglBlendEquationSeparateEXT = 56;
  kCGLFEglBlendFunc = 57;
  kCGLFEglBlendFuncSeparate = 58;
  kCGLFEglBlitFramebufferEXT = 790;
  kCGLFEglBufferData = 59;
  kCGLFEglBufferParameteriAPPLE = 717;
  kCGLFEglBufferSubData = 60;
  kCGLFEglCallList = 61;
  kCGLFEglCallLists = 62;
  kCGLFEglCheckFramebufferStatusEXT = 63;
  kCGLFEglClear = 64;
  kCGLFEglClearAccum = 65;
  kCGLFEglClearColor = 66;
  kCGLFEglClearColorIiEXT = 740;
  kCGLFEglClearColorIuiEXT = 741;
  kCGLFEglClearDepth = 67;
  kCGLFEglClearIndex = 68;
  kCGLFEglClearStencil = 69;
  kCGLFEglClientActiveTexture = 70;
  kCGLFEglClipPlane = 71;
  kCGLFEglColor3b = 72;
  kCGLFEglColor3bv = 73;
  kCGLFEglColor3d = 74;
  kCGLFEglColor3dv = 75;
  kCGLFEglColor3f = 76;
  kCGLFEglColor3fv = 77;
  kCGLFEglColor3i = 78;
  kCGLFEglColor3iv = 79;
  kCGLFEglColor3s = 80;
  kCGLFEglColor3sv = 81;
  kCGLFEglColor3ub = 82;
  kCGLFEglColor3ubv = 83;
  kCGLFEglColor3ui = 84;
  kCGLFEglColor3uiv = 85;
  kCGLFEglColor3us = 86;
  kCGLFEglColor3usv = 87;
  kCGLFEglColor4b = 88;
  kCGLFEglColor4bv = 89;
  kCGLFEglColor4d = 90;
  kCGLFEglColor4dv = 91;
  kCGLFEglColor4f = 92;
  kCGLFEglColor4fv = 93;
  kCGLFEglColor4i = 94;
  kCGLFEglColor4iv = 95;
  kCGLFEglColor4s = 96;
  kCGLFEglColor4sv = 97;
  kCGLFEglColor4ub = 98;
  kCGLFEglColor4ubv = 99;
  kCGLFEglColor4ui = 100;
  kCGLFEglColor4uiv = 101;
  kCGLFEglColor4us = 102;
  kCGLFEglColor4usv = 103;
  kCGLFEglColorMask = 104;
  kCGLFEglColorMaskIndexedEXT = 780;
  kCGLFEglColorMaterial = 105;
  kCGLFEglColorPointer = 106;
  kCGLFEglColorSubTable = 107;
  kCGLFEglColorTable = 108;
  kCGLFEglColorTableParameterfv = 109;
  kCGLFEglColorTableParameteriv = 110;
  kCGLFEglCombinerInputNV = 111;
  kCGLFEglCombinerOutputNV = 112;
  kCGLFEglCombinerParameterfNV = 113;
  kCGLFEglCombinerParameterfvNV = 114;
  kCGLFEglCombinerParameteriNV = 115;
  kCGLFEglCombinerParameterivNV = 116;
  kCGLFEglCombinerStageParameterfvNV = 117;
  kCGLFEglCompileShaderARB = 118;
  kCGLFEglCompressedTexImage1D = 119;
  kCGLFEglCompressedTexImage2D = 120;
  kCGLFEglCompressedTexImage3D = 121;
  kCGLFEglCompressedTexSubImage1D = 122;
  kCGLFEglCompressedTexSubImage2D = 123;
  kCGLFEglCompressedTexSubImage3D = 124;
  kCGLFEglConvolutionFilter1D = 125;
  kCGLFEglConvolutionFilter2D = 126;
  kCGLFEglConvolutionParameterf = 127;
  kCGLFEglConvolutionParameterfv = 128;
  kCGLFEglConvolutionParameteri = 129;
  kCGLFEglConvolutionParameteriv = 130;
  kCGLFEglCopyColorSubTable = 131;
  kCGLFEglCopyColorTable = 132;
  kCGLFEglCopyConvolutionFilter1D = 133;
  kCGLFEglCopyConvolutionFilter2D = 134;
  kCGLFEglCopyPixels = 135;
  kCGLFEglCopyTexImage1D = 136;
  kCGLFEglCopyTexImage2D = 137;
  kCGLFEglCopyTexSubImage1D = 138;
  kCGLFEglCopyTexSubImage2D = 139;
  kCGLFEglCopyTexSubImage3D = 140;
  kCGLFEglCreateProgramObjectARB = 141;
  kCGLFEglCreateShaderObjectARB = 142;
  kCGLFEglCullFace = 143;
  kCGLFEglDeleteBuffers = 144;
  kCGLFEglDeleteFencesAPPLE = 145;
  kCGLFEglDeleteFramebuffersEXT = 146;
  kCGLFEglDeleteLists = 147;
  kCGLFEglDeleteObjectARB = 148;
  kCGLFEglDeleteProgramsARB = 149;
  kCGLFEglDeleteQueries = 150;
  kCGLFEglDeleteRenderbuffersEXT = 151;
  kCGLFEglDeleteTextures = 152;
  kCGLFEglDeleteVertexArraysEXT = 153;
  kCGLFEglDepthBoundsEXT = 154;
  kCGLFEglDepthFunc = 155;
  kCGLFEglDepthMask = 156;
  kCGLFEglDepthRange = 157;
  kCGLFEglDetachObjectARB = 158;
  kCGLFEglDisable = 159;
  kCGLFEglDisableClientState = 160;
  kCGLFEglDisableIndexedEXT = 782;
  kCGLFEglDisableVertexAttribARB = 161;
  kCGLFEglDisableVertexAttribArrayARB = 162;
  kCGLFEglDrawArrays = 163;
  kCGLFEglDrawBuffer = 164;
  kCGLFEglDrawBuffersARB = 165;
  kCGLFEglDrawElementArrayAPPLE = 166;
  kCGLFEglDrawElements = 167;
  kCGLFEglDrawPixels = 168;
  kCGLFEglDrawRangeElementArrayAPPLE = 169;
  kCGLFEglDrawRangeElements = 170;
  kCGLFEglEdgeFlag = 171;
  kCGLFEglEdgeFlagPointer = 172;
  kCGLFEglEdgeFlagv = 173;
  kCGLFEglElementPointerAPPLE = 174;
  kCGLFEglEnable = 175;
  kCGLFEglEnableClientState = 176;
  kCGLFEglEnableIndexedEXT = 781;
  kCGLFEglEnableVertexAttribARB = 177;
  kCGLFEglEnableVertexAttribArrayARB = 178;
  kCGLFEglEnd = 179;
  kCGLFEglEndConditionalRenderNV = 793;
  kCGLFEglEndList = 180;
  kCGLFEglEndQuery = 181;
  kCGLFEglEndTransformFeedbackEXT = 732;
  kCGLFEglEvalCoord1d = 182;
  kCGLFEglEvalCoord1dv = 183;
  kCGLFEglEvalCoord1f = 184;
  kCGLFEglEvalCoord1fv = 185;
  kCGLFEglEvalCoord2d = 186;
  kCGLFEglEvalCoord2dv = 187;
  kCGLFEglEvalCoord2f = 188;
  kCGLFEglEvalCoord2fv = 189;
  kCGLFEglEvalMesh1 = 190;
  kCGLFEglEvalMesh2 = 191;
  kCGLFEglEvalPoint1 = 192;
  kCGLFEglEvalPoint2 = 193;
  kCGLFEglFeedbackBuffer = 194;
  kCGLFEglFinalCombinerInputNV = 195;
  kCGLFEglFinish = 196;
  kCGLFEglFinishFenceAPPLE = 197;
  kCGLFEglFinishObjectAPPLE = 198;
  kCGLFEglFinishRenderAPPLE = 199;
  kCGLFEglFlush = 200;
  kCGLFEglFlushMappedBufferRangeAPPLE = 718;
  kCGLFEglFlushRenderAPPLE = 201;
  kCGLFEglFlushVertexArrayRangeEXT = 202;
  kCGLFEglFogCoordPointer = 203;
  kCGLFEglFogCoordd = 204;
  kCGLFEglFogCoorddv = 205;
  kCGLFEglFogCoordf = 206;
  kCGLFEglFogCoordfv = 207;
  kCGLFEglFogf = 208;
  kCGLFEglFogfv = 209;
  kCGLFEglFogi = 210;
  kCGLFEglFogiv = 211;
  kCGLFEglFramebufferRenderbufferEXT = 212;
  kCGLFEglFramebufferTexture1DEXT = 213;
  kCGLFEglFramebufferTexture2DEXT = 214;
  kCGLFEglFramebufferTexture3DEXT = 215;
  kCGLFEglFramebufferTextureEXT = 725;
  kCGLFEglFramebufferTextureFaceEXT = 727;
  kCGLFEglFramebufferTextureLayerEXT = 726;
  kCGLFEglFrontFace = 216;
  kCGLFEglFrustum = 217;
  kCGLFEglGenBuffers = 218;
  kCGLFEglGenFencesAPPLE = 220;
  kCGLFEglGenFramebuffersEXT = 221;
  kCGLFEglGenLists = 222;
  kCGLFEglGenProgramsARB = 223;
  kCGLFEglGenQueries = 224;
  kCGLFEglGenRenderbuffersEXT = 225;
  kCGLFEglGenTextures = 226;
  kCGLFEglGenVertexArraysEXT = 227;
  kCGLFEglGenerateMipmapEXT = 219;
  kCGLFEglGetActiveAttribARB = 228;
  kCGLFEglGetActivePartitionNameAPPLE = 797;
  kCGLFEglGetActivePartitionivAPPLE = 796;
  kCGLFEglGetActiveUniformARB = 229;
  kCGLFEglGetActiveUniformsNamesAPPLE = 799;
  kCGLFEglGetActiveUniformsivAPPLE = 798;
  kCGLFEglGetAttachedObjectsARB = 230;
  kCGLFEglGetAttachedShaders = 794;
  kCGLFEglGetAttribLocationARB = 231;
  kCGLFEglGetBooleanIndexedvEXT = 736;
  kCGLFEglGetBooleanv = 232;
  kCGLFEglGetBufferParameteriv = 233;
  kCGLFEglGetBufferPointerv = 234;
  kCGLFEglGetBufferSubData = 235;
  kCGLFEglGetClipPlane = 236;
  kCGLFEglGetColorTable = 237;
  kCGLFEglGetColorTableParameterfv = 238;
  kCGLFEglGetColorTableParameteriv = 239;
  kCGLFEglGetCombinerInputParameterfvNV = 240;
  kCGLFEglGetCombinerInputParameterivNV = 241;
  kCGLFEglGetCombinerOutputParameterfvNV = 242;
  kCGLFEglGetCombinerOutputParameterivNV = 243;
  kCGLFEglGetCombinerStageParameterfvNV = 244;
  kCGLFEglGetCompressedTexImage = 245;
  kCGLFEglGetConvolutionFilter = 246;
  kCGLFEglGetConvolutionParameterfv = 247;
  kCGLFEglGetConvolutionParameteriv = 248;
  kCGLFEglGetDoublev = 249;
  kCGLFEglGetError = 250;
  kCGLFEglGetFinalCombinerInputParameterfvNV = 251;
  kCGLFEglGetFinalCombinerInputParameterivNV = 252;
  kCGLFEglGetFloatv = 253;
  kCGLFEglGetFragDataLocationEXT = 779;
  kCGLFEglGetFramebufferAttachmentParameterivEXT = 254;
  kCGLFEglGetHandleARB = 255;
  kCGLFEglGetHistogram = 256;
  kCGLFEglGetHistogramParameterfv = 257;
  kCGLFEglGetHistogramParameteriv = 258;
  kCGLFEglGetInfoLogARB = 259;
  kCGLFEglGetIntegerIndexedvEXT = 735;
  kCGLFEglGetIntegerv = 260;
  kCGLFEglGetLightfv = 261;
  kCGLFEglGetLightiv = 262;
  kCGLFEglGetMapdv = 263;
  kCGLFEglGetMapfv = 264;
  kCGLFEglGetMapiv = 265;
  kCGLFEglGetMaterialfv = 266;
  kCGLFEglGetMaterialiv = 267;
  kCGLFEglGetMinmax = 268;
  kCGLFEglGetMinmaxParameterfv = 269;
  kCGLFEglGetMinmaxParameteriv = 270;
  kCGLFEglGetObjectParameterfvARB = 271;
  kCGLFEglGetObjectParameterivAPPLE = 723;
  kCGLFEglGetObjectParameterivARB = 272;
  kCGLFEglGetPartitionIndexAPPLE = 800;
  kCGLFEglGetPixelMapfv = 273;
  kCGLFEglGetPixelMapuiv = 274;
  kCGLFEglGetPixelMapusv = 275;
  kCGLFEglGetPointerv = 276;
  kCGLFEglGetPolygonStipple = 277;
  kCGLFEglGetProgramEnvParameterdvARB = 278;
  kCGLFEglGetProgramEnvParameterfvARB = 279;
  kCGLFEglGetProgramInfoLog = 280;
  kCGLFEglGetProgramLocalParameterdvARB = 281;
  kCGLFEglGetProgramLocalParameterfvARB = 282;
  kCGLFEglGetProgramStringARB = 283;
  kCGLFEglGetProgramiv = 284;
  kCGLFEglGetProgramivARB = 285;
  kCGLFEglGetQueryObjectiv = 286;
  kCGLFEglGetQueryObjectuiv = 287;
  kCGLFEglGetQueryiv = 288;
  kCGLFEglGetRenderbufferParameterivEXT = 289;
  kCGLFEglGetSeparableFilter = 290;
  kCGLFEglGetShaderInfoLog = 291;
  kCGLFEglGetShaderSourceARB = 292;
  kCGLFEglGetShaderiv = 293;
  kCGLFEglGetString = 294;
  kCGLFEglGetTexEnvfv = 295;
  kCGLFEglGetTexEnviv = 296;
  kCGLFEglGetTexGendv = 297;
  kCGLFEglGetTexGenfv = 298;
  kCGLFEglGetTexGeniv = 299;
  kCGLFEglGetTexImage = 300;
  kCGLFEglGetTexLevelParameterfv = 301;
  kCGLFEglGetTexLevelParameteriv = 302;
  kCGLFEglGetTexParameterIivEXT = 744;
  kCGLFEglGetTexParameterIuivEXT = 745;
  kCGLFEglGetTexParameterPointervAPPLE = 303;
  kCGLFEglGetTexParameterfv = 304;
  kCGLFEglGetTexParameteriv = 305;
  kCGLFEglGetTransformFeedbackVaryingEXT = 734;
  kCGLFEglGetUniformBufferSizeEXT = 738;
  kCGLFEglGetUniformIndicesAPPLE = 801;
  kCGLFEglGetUniformLocationARB = 306;
  kCGLFEglGetUniformOffsetEXT = 739;
  kCGLFEglGetUniformfvARB = 307;
  kCGLFEglGetUniformivARB = 308;
  kCGLFEglGetUniformuivEXT = 777;
  kCGLFEglGetVertexAttribIivEXT = 767;
  kCGLFEglGetVertexAttribIuivEXT = 768;
  kCGLFEglGetVertexAttribPointervARB = 309;
  kCGLFEglGetVertexAttribdvARB = 310;
  kCGLFEglGetVertexAttribfvARB = 311;
  kCGLFEglGetVertexAttribivARB = 312;
  kCGLFEglHint = 313;
  kCGLFEglHistogram = 314;
  kCGLFEglIndexMask = 315;
  kCGLFEglIndexPointer = 316;
  kCGLFEglIndexd = 317;
  kCGLFEglIndexdv = 318;
  kCGLFEglIndexf = 319;
  kCGLFEglIndexfv = 320;
  kCGLFEglIndexi = 321;
  kCGLFEglIndexiv = 322;
  kCGLFEglIndexs = 323;
  kCGLFEglIndexsv = 324;
  kCGLFEglIndexub = 325;
  kCGLFEglIndexubv = 326;
  kCGLFEglInitNames = 327;
  kCGLFEglInterleavedArrays = 328;
  kCGLFEglIsBuffer = 329;
  kCGLFEglIsEnabled = 330;
  kCGLFEglIsEnabledIndexedEXT = 783;
  kCGLFEglIsFenceAPPLE = 331;
  kCGLFEglIsFramebufferEXT = 332;
  kCGLFEglIsList = 333;
  kCGLFEglIsProgram = 334;
  kCGLFEglIsProgramARB = 335;
  kCGLFEglIsQuery = 336;
  kCGLFEglIsRenderbufferEXT = 337;
  kCGLFEglIsShader = 338;
  kCGLFEglIsTexture = 339;
  kCGLFEglIsVertexArrayEXT = 340;
  kCGLFEglIsVertexAttribEnabledARB = 341;
  kCGLFEglLightModelf = 342;
  kCGLFEglLightModelfv = 343;
  kCGLFEglLightModeli = 344;
  kCGLFEglLightModeliv = 345;
  kCGLFEglLightf = 346;
  kCGLFEglLightfv = 347;
  kCGLFEglLighti = 348;
  kCGLFEglLightiv = 349;
  kCGLFEglLineStipple = 350;
  kCGLFEglLineWidth = 351;
  kCGLFEglLinkProgramARB = 352;
  kCGLFEglListBase = 353;
  kCGLFEglLoadIdentity = 354;
  kCGLFEglLoadMatrixd = 355;
  kCGLFEglLoadMatrixf = 356;
  kCGLFEglLoadName = 357;
  kCGLFEglLoadTransposeMatrixd = 358;
  kCGLFEglLoadTransposeMatrixf = 359;
  kCGLFEglLockArraysEXT = 360;
  kCGLFEglLogicOp = 361;
  kCGLFEglMap1d = 362;
  kCGLFEglMap1f = 363;
  kCGLFEglMap2d = 364;
  kCGLFEglMap2f = 365;
  kCGLFEglMapBuffer = 366;
  kCGLFEglMapGrid1d = 367;
  kCGLFEglMapGrid1f = 368;
  kCGLFEglMapGrid2d = 369;
  kCGLFEglMapGrid2f = 370;
  kCGLFEglMapVertexAttrib1dARB = 371;
  kCGLFEglMapVertexAttrib1fARB = 372;
  kCGLFEglMapVertexAttrib2dARB = 373;
  kCGLFEglMapVertexAttrib2fARB = 374;
  kCGLFEglMaterialf = 375;
  kCGLFEglMaterialfv = 376;
  kCGLFEglMateriali = 377;
  kCGLFEglMaterialiv = 378;
  kCGLFEglMatrixMode = 379;
  kCGLFEglMinmax = 380;
  kCGLFEglMultMatrixd = 381;
  kCGLFEglMultMatrixf = 382;
  kCGLFEglMultTransposeMatrixd = 383;
  kCGLFEglMultTransposeMatrixf = 384;
  kCGLFEglMultiDrawArrays = 385;
  kCGLFEglMultiDrawElementArrayAPPLE = 386;
  kCGLFEglMultiDrawElements = 387;
  kCGLFEglMultiDrawRangeElementArrayAPPLE = 388;
  kCGLFEglMultiTexCoord1d = 389;
  kCGLFEglMultiTexCoord1dv = 390;
  kCGLFEglMultiTexCoord1f = 391;
  kCGLFEglMultiTexCoord1fv = 392;
  kCGLFEglMultiTexCoord1i = 393;
  kCGLFEglMultiTexCoord1iv = 394;
  kCGLFEglMultiTexCoord1s = 395;
  kCGLFEglMultiTexCoord1sv = 396;
  kCGLFEglMultiTexCoord2d = 397;
  kCGLFEglMultiTexCoord2dv = 398;
  kCGLFEglMultiTexCoord2f = 399;
  kCGLFEglMultiTexCoord2fv = 400;
  kCGLFEglMultiTexCoord2i = 401;
  kCGLFEglMultiTexCoord2iv = 402;
  kCGLFEglMultiTexCoord2s = 403;
  kCGLFEglMultiTexCoord2sv = 404;
  kCGLFEglMultiTexCoord3d = 405;
  kCGLFEglMultiTexCoord3dv = 406;
  kCGLFEglMultiTexCoord3f = 407;
  kCGLFEglMultiTexCoord3fv = 408;
  kCGLFEglMultiTexCoord3i = 409;
  kCGLFEglMultiTexCoord3iv = 410;
  kCGLFEglMultiTexCoord3s = 411;
  kCGLFEglMultiTexCoord3sv = 412;
  kCGLFEglMultiTexCoord4d = 413;
  kCGLFEglMultiTexCoord4dv = 414;
  kCGLFEglMultiTexCoord4f = 415;
  kCGLFEglMultiTexCoord4fv = 416;
  kCGLFEglMultiTexCoord4i = 417;
  kCGLFEglMultiTexCoord4iv = 418;
  kCGLFEglMultiTexCoord4s = 419;
  kCGLFEglMultiTexCoord4sv = 420;
  kCGLFEglNewList = 421;
  kCGLFEglNormal3b = 422;
  kCGLFEglNormal3bv = 423;
  kCGLFEglNormal3d = 424;
  kCGLFEglNormal3dv = 425;
  kCGLFEglNormal3f = 426;
  kCGLFEglNormal3fv = 427;
  kCGLFEglNormal3i = 428;
  kCGLFEglNormal3iv = 429;
  kCGLFEglNormal3s = 430;
  kCGLFEglNormal3sv = 431;
  kCGLFEglNormalPointer = 432;
  kCGLFEglObjectPurgeableAPPLE = 721;
  kCGLFEglObjectUnpurgeableAPPLE = 722;
  kCGLFEglOrtho = 433;
  kCGLFEglPassThrough = 434;
  kCGLFEglPixelMapfv = 435;
  kCGLFEglPixelMapuiv = 436;
  kCGLFEglPixelMapusv = 437;
  kCGLFEglPixelStoref = 438;
  kCGLFEglPixelStorei = 439;
  kCGLFEglPixelTransferf = 440;
  kCGLFEglPixelTransferi = 441;
  kCGLFEglPixelZoom = 442;
  kCGLFEglPnTrianglesfATI = 443;
  kCGLFEglPnTrianglesiATI = 444;
  kCGLFEglPointParameterf = 445;
  kCGLFEglPointParameterfv = 446;
  kCGLFEglPointParameteri = 447;
  kCGLFEglPointParameteriv = 448;
  kCGLFEglPointSize = 449;
  kCGLFEglPolygonMode = 450;
  kCGLFEglPolygonOffset = 451;
  kCGLFEglPolygonStipple = 452;
  kCGLFEglPopAttrib = 453;
  kCGLFEglPopClientAttrib = 454;
  kCGLFEglPopMatrix = 455;
  kCGLFEglPopName = 456;
  kCGLFEglPrioritizeTextures = 457;
  kCGLFEglProgramEnvParameter4dARB = 458;
  kCGLFEglProgramEnvParameter4dvARB = 459;
  kCGLFEglProgramEnvParameter4fARB = 460;
  kCGLFEglProgramEnvParameter4fvARB = 461;
  kCGLFEglProgramEnvParameters4fvEXT = 719;
  kCGLFEglProgramLocalParameter4dARB = 462;
  kCGLFEglProgramLocalParameter4dvARB = 463;
  kCGLFEglProgramLocalParameter4fARB = 464;
  kCGLFEglProgramLocalParameter4fvARB = 465;
  kCGLFEglProgramLocalParameters4fvEXT = 720;
  kCGLFEglProgramParameteriEXT = 724;
  kCGLFEglProgramStringARB = 466;
  kCGLFEglPushAttrib = 467;
  kCGLFEglPushClientAttrib = 468;
  kCGLFEglPushMatrix = 469;
  kCGLFEglPushName = 470;
  kCGLFEglRasterPos2d = 471;
  kCGLFEglRasterPos2dv = 472;
  kCGLFEglRasterPos2f = 473;
  kCGLFEglRasterPos2fv = 474;
  kCGLFEglRasterPos2i = 475;
  kCGLFEglRasterPos2iv = 476;
  kCGLFEglRasterPos2s = 477;
  kCGLFEglRasterPos2sv = 478;
  kCGLFEglRasterPos3d = 479;
  kCGLFEglRasterPos3dv = 480;
  kCGLFEglRasterPos3f = 481;
  kCGLFEglRasterPos3fv = 482;
  kCGLFEglRasterPos3i = 483;
  kCGLFEglRasterPos3iv = 484;
  kCGLFEglRasterPos3s = 485;
  kCGLFEglRasterPos3sv = 486;
  kCGLFEglRasterPos4d = 487;
  kCGLFEglRasterPos4dv = 488;
  kCGLFEglRasterPos4f = 489;
  kCGLFEglRasterPos4fv = 490;
  kCGLFEglRasterPos4i = 491;
  kCGLFEglRasterPos4iv = 492;
  kCGLFEglRasterPos4s = 493;
  kCGLFEglRasterPos4sv = 494;
  kCGLFEglReadBuffer = 495;
  kCGLFEglReadPixels = 496;
  kCGLFEglRectd = 497;
  kCGLFEglRectdv = 498;
  kCGLFEglRectf = 499;
  kCGLFEglRectfv = 500;
  kCGLFEglRecti = 501;
  kCGLFEglRectiv = 502;
  kCGLFEglRects = 503;
  kCGLFEglRectsv = 504;
  kCGLFEglRenderMode = 506;
  kCGLFEglRenderbufferStorageEXT = 505;
  kCGLFEglRenderbufferStorageMultisampleEXT = 791;
  kCGLFEglResetHistogram = 507;
  kCGLFEglResetMinmax = 508;
  kCGLFEglRotated = 509;
  kCGLFEglRotatef = 510;
  kCGLFEglSampleCoverage = 511;
  kCGLFEglSamplePass = 512;
  kCGLFEglScaled = 513;
  kCGLFEglScalef = 514;
  kCGLFEglScissor = 515;
  kCGLFEglSecondaryColor3b = 516;
  kCGLFEglSecondaryColor3bv = 517;
  kCGLFEglSecondaryColor3d = 518;
  kCGLFEglSecondaryColor3dv = 519;
  kCGLFEglSecondaryColor3f = 520;
  kCGLFEglSecondaryColor3fv = 521;
  kCGLFEglSecondaryColor3i = 522;
  kCGLFEglSecondaryColor3iv = 523;
  kCGLFEglSecondaryColor3s = 524;
  kCGLFEglSecondaryColor3sv = 525;
  kCGLFEglSecondaryColor3ub = 526;
  kCGLFEglSecondaryColor3ubv = 527;
  kCGLFEglSecondaryColor3ui = 528;
  kCGLFEglSecondaryColor3uiv = 529;
  kCGLFEglSecondaryColor3us = 530;
  kCGLFEglSecondaryColor3usv = 531;
  kCGLFEglSecondaryColorPointer = 532;
  kCGLFEglSelectBuffer = 533;
  kCGLFEglSeparableFilter2D = 534;
  kCGLFEglSetFenceAPPLE = 535;
  kCGLFEglShadeModel = 536;
  kCGLFEglShaderSourceARB = 537;
  kCGLFEglStencilFunc = 538;
  kCGLFEglStencilFuncSeparate = 539;
  kCGLFEglStencilFuncSeparateATI = 540;
  kCGLFEglStencilMask = 541;
  kCGLFEglStencilMaskSeparate = 542;
  kCGLFEglStencilOp = 543;
  kCGLFEglStencilOpSeparateATI = 544;
  kCGLFEglTestFenceAPPLE = 545;
  kCGLFEglTestObjectAPPLE = 546;
  kCGLFEglTexCoord1d = 547;
  kCGLFEglTexCoord1dv = 548;
  kCGLFEglTexCoord1f = 549;
  kCGLFEglTexCoord1fv = 550;
  kCGLFEglTexCoord1i = 551;
  kCGLFEglTexCoord1iv = 552;
  kCGLFEglTexCoord1s = 553;
  kCGLFEglTexCoord1sv = 554;
  kCGLFEglTexCoord2d = 555;
  kCGLFEglTexCoord2dv = 556;
  kCGLFEglTexCoord2f = 557;
  kCGLFEglTexCoord2fv = 558;
  kCGLFEglTexCoord2i = 559;
  kCGLFEglTexCoord2iv = 560;
  kCGLFEglTexCoord2s = 561;
  kCGLFEglTexCoord2sv = 562;
  kCGLFEglTexCoord3d = 563;
  kCGLFEglTexCoord3dv = 564;
  kCGLFEglTexCoord3f = 565;
  kCGLFEglTexCoord3fv = 566;
  kCGLFEglTexCoord3i = 567;
  kCGLFEglTexCoord3iv = 568;
  kCGLFEglTexCoord3s = 569;
  kCGLFEglTexCoord3sv = 570;
  kCGLFEglTexCoord4d = 571;
  kCGLFEglTexCoord4dv = 572;
  kCGLFEglTexCoord4f = 573;
  kCGLFEglTexCoord4fv = 574;
  kCGLFEglTexCoord4i = 575;
  kCGLFEglTexCoord4iv = 576;
  kCGLFEglTexCoord4s = 577;
  kCGLFEglTexCoord4sv = 578;
  kCGLFEglTexCoordPointer = 579;
  kCGLFEglTexEnvf = 580;
  kCGLFEglTexEnvfv = 581;
  kCGLFEglTexEnvi = 582;
  kCGLFEglTexEnviv = 583;
  kCGLFEglTexGend = 584;
  kCGLFEglTexGendv = 585;
  kCGLFEglTexGenf = 586;
  kCGLFEglTexGenfv = 587;
  kCGLFEglTexGeni = 588;
  kCGLFEglTexGeniv = 589;
  kCGLFEglTexImage1D = 590;
  kCGLFEglTexImage2D = 591;
  kCGLFEglTexImage3D = 592;
  kCGLFEglTexParameterIivEXT = 742;
  kCGLFEglTexParameterIuivEXT = 743;
  kCGLFEglTexParameterf = 593;
  kCGLFEglTexParameterfv = 594;
  kCGLFEglTexParameteri = 595;
  kCGLFEglTexParameteriv = 596;
  kCGLFEglTexSubImage1D = 597;
  kCGLFEglTexSubImage2D = 598;
  kCGLFEglTexSubImage3D = 599;
  kCGLFEglTextureRangeAPPLE = 600;
  kCGLFEglTransformFeedbackVaryingsEXT = 733;
  kCGLFEglTranslated = 601;
  kCGLFEglTranslatef = 602;
  kCGLFEglUniform1fARB = 603;
  kCGLFEglUniform1fvARB = 604;
  kCGLFEglUniform1iARB = 605;
  kCGLFEglUniform1ivARB = 606;
  kCGLFEglUniform1uiEXT = 769;
  kCGLFEglUniform1uivEXT = 773;
  kCGLFEglUniform2fARB = 607;
  kCGLFEglUniform2fvARB = 608;
  kCGLFEglUniform2iARB = 609;
  kCGLFEglUniform2ivARB = 610;
  kCGLFEglUniform2uiEXT = 770;
  kCGLFEglUniform2uivEXT = 774;
  kCGLFEglUniform3fARB = 611;
  kCGLFEglUniform3fvARB = 612;
  kCGLFEglUniform3iARB = 613;
  kCGLFEglUniform3ivARB = 614;
  kCGLFEglUniform3uiEXT = 771;
  kCGLFEglUniform3uivEXT = 775;
  kCGLFEglUniform4fARB = 615;
  kCGLFEglUniform4fvARB = 616;
  kCGLFEglUniform4iARB = 617;
  kCGLFEglUniform4ivARB = 618;
  kCGLFEglUniform4uiEXT = 772;
  kCGLFEglUniform4uivEXT = 776;
  kCGLFEglUniformBufferEXT = 737;
  kCGLFEglUniformMatrix2fvARB = 619;
  kCGLFEglUniformMatrix2x3fv = 784;
  kCGLFEglUniformMatrix2x4fv = 786;
  kCGLFEglUniformMatrix3fvARB = 620;
  kCGLFEglUniformMatrix3x2fv = 785;
  kCGLFEglUniformMatrix3x4fv = 788;
  kCGLFEglUniformMatrix4fvARB = 621;
  kCGLFEglUniformMatrix4x2fv = 787;
  kCGLFEglUniformMatrix4x3fv = 789;
  kCGLFEglUnlockArraysEXT = 622;
  kCGLFEglUnmapBuffer = 623;
  kCGLFEglUseProgramObjectARB = 624;
  kCGLFEglValidateProgramARB = 625;
  kCGLFEglVertex2d = 626;
  kCGLFEglVertex2dv = 627;
  kCGLFEglVertex2f = 628;
  kCGLFEglVertex2fv = 629;
  kCGLFEglVertex2i = 630;
  kCGLFEglVertex2iv = 631;
  kCGLFEglVertex2s = 632;
  kCGLFEglVertex2sv = 633;
  kCGLFEglVertex3d = 634;
  kCGLFEglVertex3dv = 635;
  kCGLFEglVertex3f = 636;
  kCGLFEglVertex3fv = 637;
  kCGLFEglVertex3i = 638;
  kCGLFEglVertex3iv = 639;
  kCGLFEglVertex3s = 640;
  kCGLFEglVertex3sv = 641;
  kCGLFEglVertex4d = 642;
  kCGLFEglVertex4dv = 643;
  kCGLFEglVertex4f = 644;
  kCGLFEglVertex4fv = 645;
  kCGLFEglVertex4i = 646;
  kCGLFEglVertex4iv = 647;
  kCGLFEglVertex4s = 648;
  kCGLFEglVertex4sv = 649;
  kCGLFEglVertexArrayParameteriEXT = 650;
  kCGLFEglVertexArrayRangeEXT = 651;
  kCGLFEglVertexAttrib1dARB = 652;
  kCGLFEglVertexAttrib1dvARB = 653;
  kCGLFEglVertexAttrib1fARB = 654;
  kCGLFEglVertexAttrib1fvARB = 655;
  kCGLFEglVertexAttrib1sARB = 656;
  kCGLFEglVertexAttrib1svARB = 657;
  kCGLFEglVertexAttrib2dARB = 658;
  kCGLFEglVertexAttrib2dvARB = 659;
  kCGLFEglVertexAttrib2fARB = 660;
  kCGLFEglVertexAttrib2fvARB = 661;
  kCGLFEglVertexAttrib2sARB = 662;
  kCGLFEglVertexAttrib2svARB = 663;
  kCGLFEglVertexAttrib3dARB = 664;
  kCGLFEglVertexAttrib3dvARB = 665;
  kCGLFEglVertexAttrib3fARB = 666;
  kCGLFEglVertexAttrib3fvARB = 667;
  kCGLFEglVertexAttrib3sARB = 668;
  kCGLFEglVertexAttrib3svARB = 669;
  kCGLFEglVertexAttrib4bvARB = 670;
  kCGLFEglVertexAttrib4dARB = 671;
  kCGLFEglVertexAttrib4dvARB = 672;
  kCGLFEglVertexAttrib4fARB = 673;
  kCGLFEglVertexAttrib4fvARB = 674;
  kCGLFEglVertexAttrib4ivARB = 675;
  kCGLFEglVertexAttrib4nbvARB = 676;
  kCGLFEglVertexAttrib4nivARB = 677;
  kCGLFEglVertexAttrib4nsvARB = 678;
  kCGLFEglVertexAttrib4nubARB = 679;
  kCGLFEglVertexAttrib4nubvARB = 680;
  kCGLFEglVertexAttrib4nuivARB = 681;
  kCGLFEglVertexAttrib4nusvARB = 682;
  kCGLFEglVertexAttrib4sARB = 683;
  kCGLFEglVertexAttrib4svARB = 684;
  kCGLFEglVertexAttrib4ubvARB = 685;
  kCGLFEglVertexAttrib4uivARB = 686;
  kCGLFEglVertexAttrib4usvARB = 687;
  kCGLFEglVertexAttribI1iEXT = 746;
  kCGLFEglVertexAttribI1ivEXT = 754;
  kCGLFEglVertexAttribI1uiEXT = 750;
  kCGLFEglVertexAttribI1uivEXT = 758;
  kCGLFEglVertexAttribI2iEXT = 747;
  kCGLFEglVertexAttribI2ivEXT = 755;
  kCGLFEglVertexAttribI2uiEXT = 751;
  kCGLFEglVertexAttribI2uivEXT = 759;
  kCGLFEglVertexAttribI3iEXT = 748;
  kCGLFEglVertexAttribI3ivEXT = 756;
  kCGLFEglVertexAttribI3uiEXT = 752;
  kCGLFEglVertexAttribI3uivEXT = 760;
  kCGLFEglVertexAttribI4bvEXT = 762;
  kCGLFEglVertexAttribI4iEXT = 749;
  kCGLFEglVertexAttribI4ivEXT = 757;
  kCGLFEglVertexAttribI4svEXT = 763;
  kCGLFEglVertexAttribI4ubvEXT = 764;
  kCGLFEglVertexAttribI4uiEXT = 753;
  kCGLFEglVertexAttribI4uivEXT = 761;
  kCGLFEglVertexAttribI4usvEXT = 765;
  kCGLFEglVertexAttribIPointerEXT = 766;
  kCGLFEglVertexAttribPointerARB = 688;
  kCGLFEglVertexBlendARB = 689;
  kCGLFEglVertexPointer = 690;
  kCGLFEglViewport = 691;
  kCGLFEglWeightPointerARB = 692;
  kCGLFEglWeightbvARB = 693;
  kCGLFEglWeightdvARB = 694;
  kCGLFEglWeightfvARB = 695;
  kCGLFEglWeightivARB = 696;
  kCGLFEglWeightsvARB = 697;
  kCGLFEglWeightubvARB = 698;
  kCGLFEglWeightuivARB = 699;
  kCGLFEglWeightusvARB = 700;
  kCGLFEglWindowPos2d = 701;
  kCGLFEglWindowPos2dv = 702;
  kCGLFEglWindowPos2f = 703;
  kCGLFEglWindowPos2fv = 704;
  kCGLFEglWindowPos2i = 705;
  kCGLFEglWindowPos2iv = 706;
  kCGLFEglWindowPos2s = 707;
  kCGLFEglWindowPos2sv = 708;
  kCGLFEglWindowPos3d = 709;
  kCGLFEglWindowPos3dv = 710;
  kCGLFEglWindowPos3f = 711;
  kCGLFEglWindowPos3fv = 712;
  kCGLFEglWindowPos3i = 713;
  kCGLFEglWindowPos3iv = 714;
  kCGLFEglWindowPos3s = 715;
  kCGLFEglWindowPos3sv = 716;
  kCGLGOClearFormatCache = 502;
  kCGLGOComment = 1506;
  kCGLGODisableBitmap = 1627;
  kCGLGODisableCVARenderPath = 1611;
  kCGLGODisableCopyPixels = 1639;
  kCGLGODisableDrawPixels = 1635;
  kCGLGODisableFragmentShaders_ATI = 1622;
  kCGLGODisableImmediateRenderPath = 1610;
  kCGLGODisableReadPixels = 1631;
  kCGLGODisableTexturing = 1623;
  kCGLGODisableVARRenderPath = 1612;
  kCGLGOEnableBreakpoint = 1514;
  kCGLGOEnableDebugAttach = 1512;
  kCGLGOEnableFunctionStatistics = 1508;
  kCGLGOEnableFunctionTrace = 1507;
  kCGLGOForceSlowBitmapPath = 1626;
  kCGLGOForceSlowCopyPixelsPath = 1638;
  kCGLGOForceSlowDrawPixelsPath = 1634;
  kCGLGOForceSlowReadPixelsPath = 1630;
  kCGLGOForceSlowRenderingPath = 1609;
  kCGLGOForceSoftwareTRUFORM_ATI = 1620;
  kCGLGOForceSoftwareTexgen = 1619;
  kCGLGOForceSoftwareTransformLighting = 1618;
  kCGLGOForceSoftwareVertexShaders = 1621;
  kCGLGOForceWireframeRendering = 1613;
  kCGLGOFormatCacheSize = 501;
  kCGLGOHideObjects = 1513;
  kCGLGOMakeAllGLObjectsRequireUpdate = 1642;
  kCGLGOMakeAllGLStateRequireUpdate = 1643;
  kCGLGOOutlineCopyPixelsBuffer = 1640;
  kCGLGOOutlineCopyPixelsBufferColor = 1641;
  kCGLGOOutlineDrawPixelsBuffer = 1636;
  kCGLGOOutlineDrawPixelsBufferColor = 1637;
  kCGLGOOutlineReadPixelsBuffer = 1632;
  kCGLGOOutlineReadPixelsBufferColor = 1633;
  kCGLGOOutlineTexture = 1624;
  kCGLGOOutlineTextureColor = 1625;
  kCGLGOPageBreak = 1510;
  kCGLGOResetFunctionStatistics = 1511;
  kCGLGOResetFunctionTrace = 1509;
  kCGLGOResetLibrary = 504;
  kCGLGORetainRenderers = 503;
  kCGLGOSubmitOnCVARenderCommand = 1615;
  kCGLGOSubmitOnClearCommand = 1617;
  kCGLGOSubmitOnImmediateRenderCommand = 1614;
  kCGLGOSubmitOnVAORenderCommand = 1616;
  kCGLGOUseBuildCache = 506;
  kCGLGOUseErrorHandler = 505;
  kCGLMonoscopicBit = 1;
  kCGLMultisampleBit = 2;
  kCGLNoError = 0;
  kCGLPFAAccelerated = 73;
  kCGLPFAAcceleratedCompute = 97;
  kCGLPFAAccumSize = 14;
  kCGLPFAAllRenderers = 1;
  kCGLPFAAllowOfflineRenderers = 96;
  kCGLPFAAlphaSize = 11;
  kCGLPFAAuxBuffers = 7;
  kCGLPFAAuxDepthStencil = 57;
  kCGLPFABackingStore = 76;
  kCGLPFAClosestPolicy = 74;
  kCGLPFAColorFloat = 58;
  kCGLPFAColorSize = 8;
  kCGLPFACompliant = 83;
  kCGLPFADepthSize = 12;
  kCGLPFADisplayMask = 84;
  kCGLPFADoubleBuffer = 5;
  kCGLPFAFullScreen = 54;
  kCGLPFAMPSafe = 78;
  kCGLPFAMaximumPolicy = 52;
  kCGLPFAMinimumPolicy = 51;
  kCGLPFAMultiScreen = 81;
  kCGLPFAMultisample = 59;
  kCGLPFANoRecovery = 72;
  kCGLPFAOffScreen = 53;
  kCGLPFAPBuffer = 90;
  kCGLPFARemotePBuffer = 91;
  kCGLPFARendererID = 70;
  kCGLPFARobust = 75;
  kCGLPFASampleAlpha = 61;
  kCGLPFASampleBuffers = 55;
  kCGLPFASamples = 56;
  kCGLPFASingleRenderer = 71;
  kCGLPFAStencilSize = 13;
  kCGLPFAStereo = 6;
  kCGLPFASupersample = 60;
  kCGLPFAVirtualScreenCount = 128;
  kCGLPFAWindow = 80;
  kCGLProfBreakAfter = 2;
  kCGLProfBreakBefore = 1;
  kCGLRGB101010Bit = 131072;
  kCGLRGB101010_A8Bit = 524288;
  kCGLRGB121212Bit = 1048576;
  kCGLRGB161616Bit = 4194304;
  kCGLRGB444A8Bit = 256;
  kCGLRGB444Bit = 64;
  kCGLRGB555A8Bit = 2048;
  kCGLRGB555Bit = 512;
  kCGLRGB565A8Bit = 8192;
  kCGLRGB565Bit = 4096;
  kCGLRGB888A8Bit = 65536;
  kCGLRGB888Bit = 16384;
  kCGLRGBA16161616Bit = 8388608;
  kCGLRGBAFloat128Bit = 134217728;
  kCGLRGBAFloat256Bit = 536870912;
  kCGLRGBAFloat64Bit = 33554432;
  kCGLRGBFloat128Bit = 67108864;
  kCGLRGBFloat256Bit = 268435456;
  kCGLRGBFloat64Bit = 16777216;
  kCGLRPAccelerated = 73;
  kCGLRPAcceleratedCompute = 130;
  kCGLRPAccumModes = 104;
  kCGLRPBackingStore = 76;
  kCGLRPBufferModes = 100;
  kCGLRPColorModes = 103;
  kCGLRPCompliant = 83;
  kCGLRPDepthModes = 105;
  kCGLRPDisplayMask = 84;
  kCGLRPFullScreen = 54;
  kCGLRPGPUFragProcCapable = 123;
  kCGLRPGPUVertProcCapable = 122;
  kCGLRPMPSafe = 78;
  kCGLRPMaxAuxBuffers = 107;
  kCGLRPMaxSampleBuffers = 108;
  kCGLRPMaxSamples = 109;
  kCGLRPMultiScreen = 81;
  kCGLRPOffScreen = 53;
  kCGLRPOnline = 129;
  kCGLRPRendererCount = 128;
  kCGLRPRendererID = 70;
  kCGLRPRobust = 75;
  kCGLRPSampleAlpha = 111;
  kCGLRPSampleModes = 110;
  kCGLRPStencilModes = 106;
  kCGLRPTextureMemory = 121;
  kCGLRPVideoMemory = 120;
  kCGLRPWindow = 80;
  kCGLRendererATIRadeon8500ID = 136704;
  kCGLRendererATIRadeon9700ID = 137216;
  kCGLRendererATIRadeonID = 135680;
  kCGLRendererATIRadeonX1000ID = 137472;
  kCGLRendererATIRadeonX2000ID = 137728;
  kCGLRendererATIRage128ID = 135168;
  kCGLRendererATIRageProID = 136192;
  kCGLRendererAppleSWID = 132608;
  kCGLRendererGeForce2MXID = 139264;
  kCGLRendererGeForce3ID = 139776;
  kCGLRendererGeForce8xxxID = 140800;
  kCGLRendererGeForceFXID = 140288;
  kCGLRendererGenericFloatID = 132096;
  kCGLRendererGenericID = 131584;
  kCGLRendererIDMatchingMask = 16678656;
  kCGLRendererIntel900ID = 147456;
  kCGLRendererIntelX3100ID = 147968;
  kCGLRendererMesa3DFXID = 262144;
  kCGLRendererVTBladeXP2ID = 143360;
  kCGLSingleBufferBit = 4;
  kCGLStereoscopicBit = 2;
  kCGLSupersampleBit = 1;

  // 10.7+
  NSOpenGLPFAOpenGLProfile        = 99;
  NSOpenGLProfileVersionLegacy    = $1000;
  NSOpenGLProfileVersion3_2Core   = $3200;

// ===== External function pointers =====

var
  CGLChoosePixelFormat: function(attribs: PCGLPixelFormatAttribute; pix: PCGLPixelFormatObj; npix: PGLint): CGLError; cdecl;
  CGLClearDrawable: function(ctx: CGLContextObj): CGLError; cdecl;
  CGLCopyContext: function(src: CGLContextObj; dst: CGLContextObj; mask: GLbitfield): CGLError; cdecl;
  CGLCreateContext: function(pix: CGLPixelFormatObj; share: CGLContextObj; ctx: PCGLContextObj): CGLError; cdecl;
  CGLCreatePBuffer: function(width: GLsizei; height: GLsizei; target: GLenum; internalFormat: GLenum; max_level: GLint; pbuffer: PCGLPBufferObj): CGLError; cdecl;
  CGLDescribePBuffer: function(obj: CGLPBufferObj; width: PGLsizei; height: PGLsizei; target: PGLenum; internalFormat: PGLenum; mipmap: PGLint): CGLError; cdecl;
  CGLDescribePixelFormat: function(pix: CGLPixelFormatObj; pix_num: GLint; attrib: CGLPixelFormatAttribute; value: PGLint): CGLError; cdecl;
  CGLDescribeRenderer: function(rend: CGLRendererInfoObj; rend_num: GLint; prop: CGLRendererProperty; value: PGLint): CGLError; cdecl;
  CGLDestroyContext: function(ctx: CGLContextObj): CGLError; cdecl;
  CGLDestroyPBuffer: function(pbuffer: CGLPBufferObj): CGLError; cdecl;
  CGLDestroyPixelFormat: function(pix: CGLPixelFormatObj): CGLError; cdecl;
  CGLDestroyRendererInfo: function(rend: CGLRendererInfoObj): CGLError; cdecl;
  CGLDisable: function(ctx: CGLContextObj; pname: CGLContextEnable): CGLError; cdecl;
  CGLEnable: function(ctx: CGLContextObj; pname: CGLContextEnable): CGLError; cdecl;
  CGLErrorString: function(error: CGLError): MarshaledAString; cdecl;
  CGLFlushDrawable: function(ctx: CGLContextObj): CGLError; cdecl;
  CGLGetContextRetainCount: function(ctx: CGLContextObj): GLuint; cdecl;
  CGLGetCurrentContext: function: CGLContextObj; cdecl;
  CGLGetGlobalOption: function(pname: CGLGlobalOption; params: PGLint): CGLError; cdecl;
  CGLGetOffScreen: function(ctx: CGLContextObj; width: PGLsizei; height: PGLsizei; rowbytes: PGLint; baseaddr: Pointer): CGLError; cdecl;
  CGLGetOption: function(pname: CGLGlobalOption; param: PGLint): CGLError; cdecl;
  CGLGetPBuffer: function(ctx: CGLContextObj; pbuffer: PCGLPBufferObj; face: PGLenum; level: PGLint; screen: PGLint): CGLError; cdecl;
  CGLGetPBufferRetainCount: function(pbuffer: CGLPBufferObj): GLuint; cdecl;
  CGLGetParameter: function(ctx: CGLContextObj; pname: CGLContextParameter; params: PGLint): CGLError; cdecl;
  CGLGetPixelFormat: function(ctx: CGLContextObj): CGLPixelFormatObj; cdecl;
  CGLGetPixelFormatRetainCount: function(pix: CGLPixelFormatObj): GLuint; cdecl;
  CGLGetShareGroup: function(ctx: CGLContextObj): CGLShareGroupObj; cdecl;
  CGLGetVersion: procedure(majorvers: PGLint; minorvers: PGLint); cdecl;
  CGLGetVirtualScreen: function(ctx: CGLContextObj; screen: PGLint): CGLError; cdecl;
  CGLIsEnabled: function(ctx: CGLContextObj; pname: CGLContextEnable; enable: PGLint): CGLError; cdecl;
  CGLLockContext: function(ctx: CGLContextObj): CGLError; cdecl;
  CGLQueryRendererInfo: function(display_mask: GLuint; rend: PCGLRendererInfoObj; nrend: PGLint): CGLError; cdecl;
  CGLReleaseContext: procedure(ctx: CGLContextObj); cdecl;
  CGLReleasePBuffer: procedure(pbuffer: CGLPBufferObj); cdecl;
  CGLReleasePixelFormat: procedure(pix: CGLPixelFormatObj); cdecl;
  CGLRetainContext: function(ctx: CGLContextObj): CGLContextObj; cdecl;
  CGLRetainPBuffer: function(pbuffer: CGLPBufferObj): CGLPBufferObj; cdecl;
  CGLRetainPixelFormat: function(pix: CGLPixelFormatObj): CGLPixelFormatObj; cdecl;
  CGLSetCurrentContext: function(ctx: CGLContextObj): CGLError; cdecl;
  CGLSetFullScreen: function(ctx: CGLContextObj): CGLError; cdecl;
  CGLSetFullScreenOnDisplay: function(ctx: CGLContextObj; display_mask: GLuint): CGLError; cdecl;
  CGLSetGlobalOption: function(pname: CGLGlobalOption; params: PGLint): CGLError; cdecl;
  CGLSetOffScreen: function(ctx: CGLContextObj; width: GLsizei; height: GLsizei; rowbytes: GLint; baseaddr: Pointer): CGLError; cdecl;
  CGLSetOption: function(pname: CGLGlobalOption; param: GLint): CGLError; cdecl;
  CGLSetPBuffer: function(ctx: CGLContextObj; pbuffer: CGLPBufferObj; face: GLenum; level: GLint; screen: GLint): CGLError; cdecl;
  CGLSetParameter: function(ctx: CGLContextObj; pname: CGLContextParameter; params: PGLint): CGLError; cdecl;
  CGLSetVirtualScreen: function(ctx: CGLContextObj; screen: GLint): CGLError; cdecl;
  CGLTexImageIOSurface2D: function(ctx: CGLContextObj; target: GLenum; internal_format: GLenum; width: GLsizei; height: GLsizei; format: GLenum; type_: GLenum; ioSurface: IOSurfaceRef; plane: GLuint): CGLError; cdecl;
  CGLTexImagePBuffer: function(ctx: CGLContextObj; pbuffer: CGLPBufferObj; source: GLenum): CGLError; cdecl;
  CGLUnlockContext: function(ctx: CGLContextObj): CGLError; cdecl;
  glAccum: procedure(op: GLenum; value: GLfloat); cdecl;
  glActiveStencilFaceEXT: procedure(face: GLenum); cdecl;
  glActiveTexture: procedure(texture: GLenum); cdecl;
  glAlphaFunc: procedure(func: GLenum; ref: GLclampf); cdecl;
  glAreTexturesResident: function(n: GLsizei; textures: PGLuint; residences: PGLboolean): GLboolean; cdecl;
  glArrayElement: procedure(i: GLint); cdecl;
  glAttachObjectARB: procedure(containerObj: GLhandleARB; obj: GLhandleARB); cdecl;
  glAttachShader: procedure(program_: GLuint; shader: GLuint); cdecl;
  glBegin: procedure(mode: GLenum); cdecl;
  glBeginConditionalRenderNV: procedure(id: GLuint; mode: GLenum); cdecl;
  glBeginQuery: procedure(target: GLenum; id: GLuint); cdecl;
  glBeginQueryARB: procedure(target: GLenum; id: GLuint); cdecl;
  glBeginTransformFeedbackEXT: procedure(primitiveMode: GLenum); cdecl;
  glBindAttribLocation: procedure(program_: GLuint; index: GLuint; name: PGLchar); cdecl;
  glBindAttribLocationARB: procedure(programObj: GLhandleARB; index: GLuint; name: PGLcharARB); cdecl;
  glBindBuffer: procedure(target: GLenum; buffer: GLuint); cdecl;
  glBindBufferARB: procedure(target: GLenum; buffer: GLuint); cdecl;
  glBindBufferBase: procedure(target: GLenum; index: GLuint; buffer: GLuint); cdecl;
  glBindBufferBaseEXT: procedure(target: GLenum; index: GLuint; buffer: GLuint); cdecl;
  glBindBufferOffsetEXT: procedure(target: GLenum; index: GLuint; buffer: GLuint; offset: GLintptr); cdecl;
  glBindBufferRange: procedure(target: GLenum; index: GLuint; buffer: GLuint; offset: GLintptr; size: GLsizeiptr); cdecl;
  glBindBufferRangeEXT: procedure(target: GLenum; index: GLuint; buffer: GLuint; offset: GLintptr; size: GLsizeiptr); cdecl;
  glBindFragDataLocationEXT: procedure(program_: GLuint; colorNumber: GLuint; name: PGLchar); cdecl;
  glBindFramebufferEXT: procedure(target: GLenum; framebuffer: GLuint); cdecl;
  glBindProgramARB: procedure(target: GLenum; program_: GLuint); cdecl;
  glBindRenderbufferEXT: procedure(target: GLenum; renderbuffer: GLuint); cdecl;
  glBindTexture: procedure(target: GLenum; texture: GLuint); cdecl;
  glBindVertexArrayAPPLE: procedure(id: GLuint); cdecl;
  glBitmap: procedure(width: GLsizei; height: GLsizei; xorig: GLfloat; yorig: GLfloat; xmove: GLfloat; ymove: GLfloat; bitmap: PGLubyte); cdecl;
  glBlendColor: procedure(red: GLclampf; green: GLclampf; blue: GLclampf; alpha: GLclampf); cdecl;
  glBlendEquation: procedure(mode: GLenum); cdecl;
  glBlendEquationSeparate: procedure(modeRGB: GLenum; modeAlpha: GLenum); cdecl;
  glBlendEquationSeparateATI: procedure(equationRGB: GLenum; equationAlpha: GLenum); cdecl;
  glBlendEquationSeparateEXT: procedure(modeRGB: GLenum; modeAlpha: GLenum); cdecl;
  glBlendFunc: procedure(sfactor: GLenum; dfactor: GLenum); cdecl;
  glBlendFuncSeparate: procedure(srcRGB: GLenum; dstRGB: GLenum; srcAlpha: GLenum; dstAlpha: GLenum); cdecl;
  glBlitFramebufferEXT: procedure(srcX0: GLint; srcY0: GLint; srcX1: GLint; srcY1: GLint; dstX0: GLint; dstY0: GLint; dstX1: GLint; dstY1: GLint; mask: GLbitfield; filter: GLenum); cdecl;
  glBufferData: procedure(target: GLenum; size: GLsizeiptr; data: PGLvoid; usage: GLenum); cdecl;
  glBufferDataARB: procedure(target: GLenum; size: GLsizeiptrARB; data: PGLvoid; usage: GLenum); cdecl;
  glBufferParameteriAPPLE: procedure(target: GLenum; pname: GLenum; param: GLint); cdecl;
  glBufferSubData: procedure(target: GLenum; offset: GLintptr; size: GLsizeiptr; data: PGLvoid); cdecl;
  glBufferSubDataARB: procedure(target: GLenum; offset: GLintptrARB; size: GLsizeiptrARB; data: PGLvoid); cdecl;
  glCallList: procedure(list: GLuint); cdecl;
  glCallLists: procedure(n: GLsizei; type_: GLenum; lists: PGLvoid); cdecl;
  glCheckFramebufferStatusEXT: function(target: GLenum): GLenum; cdecl;
  glClampColorARB: procedure(target: GLenum; clamp: GLenum); cdecl;
  glClear: procedure(mask: GLbitfield); cdecl;
  glClearAccum: procedure(red: GLfloat; green: GLfloat; blue: GLfloat; alpha: GLfloat); cdecl;
  glClearColor: procedure(red: GLclampf; green: GLclampf; blue: GLclampf; alpha: GLclampf); cdecl;
  glClearColorIiEXT: procedure(r: GLint; g: GLint; b: GLint; a: GLint); cdecl;
  glClearColorIuiEXT: procedure(r: GLuint; g: GLuint; b: GLuint; a: GLuint); cdecl;
  glClearDepth: procedure(depth: GLclampd); cdecl;
  glClearIndex: procedure(c: GLfloat); cdecl;
  glClearStencil: procedure(s: GLint); cdecl;
  glClientActiveTexture: procedure(texture: GLenum); cdecl;
  glClipPlane: procedure(plane: GLenum; equation: PGLdouble); cdecl;
  glColor3b: procedure(red: GLbyte; green: GLbyte; blue: GLbyte); cdecl;
  glColor3bv: procedure(v: PGLbyte); cdecl;
  glColor3d: procedure(red: GLdouble; green: GLdouble; blue: GLdouble); cdecl;
  glColor3dv: procedure(v: PGLdouble); cdecl;
  glColor3f: procedure(red: GLfloat; green: GLfloat; blue: GLfloat); cdecl;
  glColor3fv: procedure(v: PGLfloat); cdecl;
  glColor3i: procedure(red: GLint; green: GLint; blue: GLint); cdecl;
  glColor3iv: procedure(v: PGLint); cdecl;
  glColor3s: procedure(red: GLshort; green: GLshort; blue: GLshort); cdecl;
  glColor3sv: procedure(v: PGLshort); cdecl;
  glColor3ub: procedure(red: GLubyte; green: GLubyte; blue: GLubyte); cdecl;
  glColor3ubv: procedure(v: PGLubyte); cdecl;
  glColor3ui: procedure(red: GLuint; green: GLuint; blue: GLuint); cdecl;
  glColor3uiv: procedure(v: PGLuint); cdecl;
  glColor3us: procedure(red: GLushort; green: GLushort; blue: GLushort); cdecl;
  glColor3usv: procedure(v: PGLushort); cdecl;
  glColor4b: procedure(red: GLbyte; green: GLbyte; blue: GLbyte; alpha: GLbyte); cdecl;
  glColor4bv: procedure(v: PGLbyte); cdecl;
  glColor4d: procedure(red: GLdouble; green: GLdouble; blue: GLdouble; alpha: GLdouble); cdecl;
  glColor4dv: procedure(v: PGLdouble); cdecl;
  glColor4f: procedure(red: GLfloat; green: GLfloat; blue: GLfloat; alpha: GLfloat); cdecl;
  glColor4fv: procedure(v: PGLfloat); cdecl;
  glColor4i: procedure(red: GLint; green: GLint; blue: GLint; alpha: GLint); cdecl;
  glColor4iv: procedure(v: PGLint); cdecl;
  glColor4s: procedure(red: GLshort; green: GLshort; blue: GLshort; alpha: GLshort); cdecl;
  glColor4sv: procedure(v: PGLshort); cdecl;
  glColor4ub: procedure(red: GLubyte; green: GLubyte; blue: GLubyte; alpha: GLubyte); cdecl;
  glColor4ubv: procedure(v: PGLubyte); cdecl;
  glColor4ui: procedure(red: GLuint; green: GLuint; blue: GLuint; alpha: GLuint); cdecl;
  glColor4uiv: procedure(v: PGLuint); cdecl;
  glColor4us: procedure(red: GLushort; green: GLushort; blue: GLushort; alpha: GLushort); cdecl;
  glColor4usv: procedure(v: PGLushort); cdecl;
  glColorMask: procedure(red: GLboolean; green: GLboolean; blue: GLboolean; alpha: GLboolean); cdecl;
  glColorMaskIndexedEXT: procedure(index: GLuint; r: GLboolean; g: GLboolean; b: GLboolean; a: GLboolean); cdecl;
  glColorMaterial: procedure(face: GLenum; mode: GLenum); cdecl;
  glColorPointer: procedure(size: GLint; type_: GLenum; stride: GLsizei; pointer: PGLvoid); cdecl;
  glColorSubTable: procedure(target: GLenum; start: GLsizei; count: GLsizei; format: GLenum; type_: GLenum; data: PGLvoid); cdecl;
  glColorTable: procedure(target: GLenum; internalformat: GLenum; width: GLsizei; format: GLenum; type_: GLenum; table: PGLvoid); cdecl;
  glColorTableParameterfv: procedure(target: GLenum; pname: GLenum; params: PGLfloat); cdecl;
  glColorTableParameteriv: procedure(target: GLenum; pname: GLenum; params: PGLint); cdecl;
  glCompileShader: procedure(shader: GLuint); cdecl;
  glCompileShaderARB: procedure(shaderObj: GLhandleARB); cdecl;
  glCompressedTexImage1D: procedure(target: GLenum; level: GLint; internalformat: GLenum; width: GLsizei; border: GLint; imageSize: GLsizei; data: PGLvoid); cdecl;
  glCompressedTexImage2D: procedure(target: GLenum; level: GLint; internalformat: GLenum; width: GLsizei; height: GLsizei; border: GLint; imageSize: GLsizei; data: PGLvoid); cdecl;
  glCompressedTexImage3D: procedure(target: GLenum; level: GLint; internalformat: GLenum; width: GLsizei; height: GLsizei; depth: GLsizei; border: GLint; imageSize: GLsizei; data: PGLvoid); cdecl;
  glCompressedTexSubImage1D: procedure(target: GLenum; level: GLint; xoffset: GLint; width: GLsizei; format: GLenum; imageSize: GLsizei; data: PGLvoid); cdecl;
  glCompressedTexSubImage2D: procedure(target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; width: GLsizei; height: GLsizei; format: GLenum; imageSize: GLsizei; data: PGLvoid); cdecl;
  glCompressedTexSubImage3D: procedure(target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; zoffset: GLint; width: GLsizei; height: GLsizei; depth: GLsizei; format: GLenum; imageSize: GLsizei; data: PGLvoid); cdecl;
  glConvolutionFilter1D: procedure(target: GLenum; internalformat: GLenum; width: GLsizei; format: GLenum; type_: GLenum; image: PGLvoid); cdecl;
  glConvolutionFilter2D: procedure(target: GLenum; internalformat: GLenum; width: GLsizei; height: GLsizei; format: GLenum; type_: GLenum; image: PGLvoid); cdecl;
  glConvolutionParameterf: procedure(target: GLenum; pname: GLenum; params: GLfloat); cdecl;
  glConvolutionParameterfv: procedure(target: GLenum; pname: GLenum; params: PGLfloat); cdecl;
  glConvolutionParameteri: procedure(target: GLenum; pname: GLenum; params: GLint); cdecl;
  glConvolutionParameteriv: procedure(target: GLenum; pname: GLenum; params: PGLint); cdecl;
  glCopyColorSubTable: procedure(target: GLenum; start: GLsizei; x: GLint; y: GLint; width: GLsizei); cdecl;
  glCopyColorTable: procedure(target: GLenum; internalformat: GLenum; x: GLint; y: GLint; width: GLsizei); cdecl;
  glCopyConvolutionFilter1D: procedure(target: GLenum; internalformat: GLenum; x: GLint; y: GLint; width: GLsizei); cdecl;
  glCopyConvolutionFilter2D: procedure(target: GLenum; internalformat: GLenum; x: GLint; y: GLint; width: GLsizei; height: GLsizei); cdecl;
  glCopyPixels: procedure(x: GLint; y: GLint; width: GLsizei; height: GLsizei; type_: GLenum); cdecl;
  glCopyTexImage1D: procedure(target: GLenum; level: GLint; internalformat: GLenum; x: GLint; y: GLint; width: GLsizei; border: GLint); cdecl;
  glCopyTexImage2D: procedure(target: GLenum; level: GLint; internalformat: GLenum; x: GLint; y: GLint; width: GLsizei; height: GLsizei; border: GLint); cdecl;
  glCopyTexSubImage1D: procedure(target: GLenum; level: GLint; xoffset: GLint; x: GLint; y: GLint; width: GLsizei); cdecl;
  glCopyTexSubImage2D: procedure(target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; x: GLint; y: GLint; width: GLsizei; height: GLsizei); cdecl;
  glCopyTexSubImage3D: procedure(target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; zoffset: GLint; x: GLint; y: GLint; width: GLsizei; height: GLsizei); cdecl;
  glCreateProgram: function: GLuint; cdecl;
  glCreateProgramObjectARB: function: GLhandleARB; cdecl;
  glCreateShader: function(type_: GLenum): GLuint; cdecl;
  glCreateShaderObjectARB: function(shaderType: GLenum): GLhandleARB; cdecl;
  glCullFace: procedure(mode: GLenum); cdecl;
  glDeleteBuffers: procedure(n: GLsizei; buffers: PGLuint); cdecl;
  glDeleteBuffersARB: procedure(n: GLsizei; buffers: PGLuint); cdecl;
  glDeleteFencesAPPLE: procedure(n: GLsizei; fences: PGLuint); cdecl;
  glDeleteFramebuffersEXT: procedure(n: GLsizei; framebuffers: PGLuint); cdecl;
  glDeleteLists: procedure(list: GLuint; range: GLsizei); cdecl;
  glDeleteObjectARB: procedure(obj: GLhandleARB); cdecl;
  glDeleteProgram: procedure(program_: GLuint); cdecl;
  glDeleteProgramsARB: procedure(n: GLsizei; programs: PGLuint); cdecl;
  glDeleteQueries: procedure(n: GLsizei; ids: PGLuint); cdecl;
  glDeleteQueriesARB: procedure(n: GLsizei; ids: PGLuint); cdecl;
  glDeleteRenderbuffersEXT: procedure(n: GLsizei; renderbuffers: PGLuint); cdecl;
  glDeleteShader: procedure(shader: GLuint); cdecl;
  glDeleteTextures: procedure(n: GLsizei; textures: PGLuint); cdecl;
  glDeleteVertexArraysAPPLE: procedure(n: GLsizei; ids: PGLuint); cdecl;
  glDepthBoundsEXT: procedure(zmin: GLclampd; zmax: GLclampd); cdecl;
  glDepthFunc: procedure(func: GLenum); cdecl;
  glDepthMask: procedure(flag: GLboolean); cdecl;
  glDepthRange: procedure(zNear: GLclampd; zFar: GLclampd); cdecl;
  glDetachObjectARB: procedure(containerObj: GLhandleARB; attachedObj: GLhandleARB); cdecl;
  glDetachShader: procedure(program_: GLuint; shader: GLuint); cdecl;
  glDisable: procedure(cap: GLenum); cdecl;
  glDisableClientState: procedure(array_: GLenum); cdecl;
  glDisableIndexedEXT: procedure(target: GLenum; index: GLuint); cdecl;
  glDisableVertexAttribAPPLE: procedure(index: GLuint; pname: GLenum); cdecl;
  glDisableVertexAttribArray: procedure(index: GLuint); cdecl;
  glDisableVertexAttribArrayARB: procedure(index: GLuint); cdecl;
  glDrawArrays: procedure(mode: GLenum; first: GLint; count: GLsizei); cdecl;
  glDrawArraysInstancedARB: procedure(mode: GLenum; first: GLint; count: GLsizei; primcount: GLsizei); cdecl;
  glDrawBuffer: procedure(mode: GLenum); cdecl;
  glDrawBuffers: procedure(n: GLsizei; bufs: PGLenum); cdecl;
  glDrawBuffersARB: procedure(n: GLsizei; bufs: PGLenum); cdecl;
  glDrawElementArrayAPPLE: procedure(mode: GLenum; first: GLint; count: GLsizei); cdecl;
  glDrawElements: procedure(mode: GLenum; count: GLsizei; type_: GLenum; indices: PGLvoid); cdecl;
  glDrawElementsInstancedARB: procedure(mode: GLenum; count: GLsizei; type_: GLenum; indices: PGLvoid; primcount: GLsizei); cdecl;
  glDrawPixels: procedure(width: GLsizei; height: GLsizei; format: GLenum; type_: GLenum; pixels: PGLvoid); cdecl;
  glDrawRangeElementArrayAPPLE: procedure(mode: GLenum; start: GLuint; end_: GLuint; first: GLint; count: GLsizei); cdecl;
  glDrawRangeElements: procedure(mode: GLenum; start: GLuint; end_: GLuint; count: GLsizei; type_: GLenum; indices: PGLvoid); cdecl;
  glEdgeFlag: procedure(flag: GLboolean); cdecl;
  glEdgeFlagPointer: procedure(stride: GLsizei; pointer: PGLvoid); cdecl;
  glEdgeFlagv: procedure(flag: PGLboolean); cdecl;
  glElementPointerAPPLE: procedure(type_: GLenum; pointer: PGLvoid); cdecl;
  glEnable: procedure(cap: GLenum); cdecl;
  glEnableClientState: procedure(array_: GLenum); cdecl;
  glEnableIndexedEXT: procedure(target: GLenum; index: GLuint); cdecl;
  glEnableVertexAttribAPPLE: procedure(index: GLuint; pname: GLenum); cdecl;
  glEnableVertexAttribArray: procedure(index: GLuint); cdecl;
  glEnableVertexAttribArrayARB: procedure(index: GLuint); cdecl;
  glEnd: procedure; cdecl;
  glEndConditionalRenderNV: procedure; cdecl;
  glEndList: procedure; cdecl;
  glEndQuery: procedure(target: GLenum); cdecl;
  glEndQueryARB: procedure(target: GLenum); cdecl;
  glEndTransformFeedbackEXT: procedure; cdecl;
  glEvalCoord1d: procedure(u: GLdouble); cdecl;
  glEvalCoord1dv: procedure(u: PGLdouble); cdecl;
  glEvalCoord1f: procedure(u: GLfloat); cdecl;
  glEvalCoord1fv: procedure(u: PGLfloat); cdecl;
  glEvalCoord2d: procedure(u: GLdouble; v: GLdouble); cdecl;
  glEvalCoord2dv: procedure(u: PGLdouble); cdecl;
  glEvalCoord2f: procedure(u: GLfloat; v: GLfloat); cdecl;
  glEvalCoord2fv: procedure(u: PGLfloat); cdecl;
  glEvalMesh1: procedure(mode: GLenum; i1: GLint; i2: GLint); cdecl;
  glEvalMesh2: procedure(mode: GLenum; i1: GLint; i2: GLint; j1: GLint; j2: GLint); cdecl;
  glEvalPoint1: procedure(i: GLint); cdecl;
  glEvalPoint2: procedure(i: GLint; j: GLint); cdecl;
  glFeedbackBuffer: procedure(size: GLsizei; type_: GLenum; buffer: PGLfloat); cdecl;
  glFinish: procedure; cdecl;
  glFinishFenceAPPLE: procedure(fence: GLuint); cdecl;
  glFinishObjectAPPLE: procedure(object_: GLenum; name: GLuint); cdecl;
  glFinishRenderAPPLE: procedure; cdecl;
  glFlush: procedure; cdecl;
  glFlushMappedBufferRangeAPPLE: procedure(target: GLenum; offset: GLintptr; size: GLsizeiptr); cdecl;
  glFlushRenderAPPLE: procedure; cdecl;
  glFlushVertexArrayRangeAPPLE: procedure(length: GLsizei; pointer: PGLvoid); cdecl;
  glFogCoordPointer: procedure(type_: GLenum; stride: GLsizei; pointer: PGLvoid); cdecl;
  glFogCoordd: procedure(coord: GLdouble); cdecl;
  glFogCoorddv: procedure(coord: PGLdouble); cdecl;
  glFogCoordf: procedure(coord: GLfloat); cdecl;
  glFogCoordfv: procedure(coord: PGLfloat); cdecl;
  glFogf: procedure(pname: GLenum; param: GLfloat); cdecl;
  glFogfv: procedure(pname: GLenum; params: PGLfloat); cdecl;
  glFogi: procedure(pname: GLenum; param: GLint); cdecl;
  glFogiv: procedure(pname: GLenum; params: PGLint); cdecl;
  glFramebufferRenderbufferEXT: procedure(target: GLenum; attachment: GLenum; renderbuffertarget: GLenum; renderbuffer: GLuint); cdecl;
  glFramebufferTexture1DEXT: procedure(target: GLenum; attachment: GLenum; textarget: GLenum; texture: GLuint; level: GLint); cdecl;
  glFramebufferTexture2DEXT: procedure(target: GLenum; attachment: GLenum; textarget: GLenum; texture: GLuint; level: GLint); cdecl;
  glFramebufferTexture3DEXT: procedure(target: GLenum; attachment: GLenum; textarget: GLenum; texture: GLuint; level: GLint; zoffset: GLint); cdecl;
  glFramebufferTextureEXT: procedure(target: GLenum; attachment: GLenum; texture: GLuint; level: GLint); cdecl;
  glFramebufferTextureFaceEXT: procedure(target: GLenum; attachment: GLenum; texture: GLuint; level: GLint; face: GLenum); cdecl;
  glFramebufferTextureLayerEXT: procedure(target: GLenum; attachment: GLenum; texture: GLuint; level: GLint; layer: GLint); cdecl;
  glFrontFace: procedure(mode: GLenum); cdecl;
  glFrustum: procedure(left: GLdouble; right: GLdouble; bottom: GLdouble; top: GLdouble; zNear: GLdouble; zFar: GLdouble); cdecl;
  glGenBuffers: procedure(n: GLsizei; buffers: PGLuint); cdecl;
  glGenBuffersARB: procedure(n: GLsizei; buffers: PGLuint); cdecl;
  glGenFencesAPPLE: procedure(n: GLsizei; fences: PGLuint); cdecl;
  glGenFramebuffersEXT: procedure(n: GLsizei; framebuffers: PGLuint); cdecl;
  glGenLists: function(range: GLsizei): GLuint; cdecl;
  glGenProgramsARB: procedure(n: GLsizei; programs: PGLuint); cdecl;
  glGenQueries: procedure(n: GLsizei; ids: PGLuint); cdecl;
  glGenQueriesARB: procedure(n: GLsizei; ids: PGLuint); cdecl;
  glGenRenderbuffersEXT: procedure(n: GLsizei; renderbuffers: PGLuint); cdecl;
  glGenTextures: procedure(n: GLsizei; textures: PGLuint); cdecl;
  glGenVertexArraysAPPLE: procedure(n: GLsizei; ids: PGLuint); cdecl;
  glGenerateMipmapEXT: procedure(target: GLenum); cdecl;
  glGetActiveAttrib: procedure(program_: GLuint; index: GLuint; bufSize: GLsizei; length: PGLsizei; size: PGLint; type_: PGLenum; name: PGLchar); cdecl;
  glGetActiveAttribARB: procedure(programObj: GLhandleARB; index: GLuint; maxLength: GLsizei; length: PGLsizei; size: PGLint; type_: PGLenum; name: PGLcharARB); cdecl;
  glGetActiveUniform: procedure(program_: GLuint; index: GLuint; bufSize: GLsizei; length: PGLsizei; size: PGLint; type_: PGLenum; name: PGLchar); cdecl;
  glGetActiveUniformARB: procedure(programObj: GLhandleARB; index: GLuint; maxLength: GLsizei; length: PGLsizei; size: PGLint; type_: PGLenum; name: PGLcharARB); cdecl;
  glGetActiveUniformBlockName: procedure(program_: GLuint; uniformBlockIndex: GLuint; bufSize: GLsizei; length: PGLsizei; uniformBlockName: PGLchar); cdecl;
  glGetActiveUniformBlockiv: procedure(program_: GLuint; uniformBlockIndex: GLuint; pname: GLenum; params: PGLint); cdecl;
  glGetActiveUniformName: procedure(program_: GLuint; uniformIndex: GLuint; bufSize: GLsizei; length: PGLsizei; uniformName: PGLchar); cdecl;
  glGetActiveUniformsiv: procedure(program_: GLuint; uniformCount: GLsizei; uniformIndices: PGLuint; pname: GLenum; params: PGLint); cdecl;
  glGetAttachedObjectsARB: procedure(containerObj: GLhandleARB; maxCount: GLsizei; count: PGLsizei; obj: PGLhandleARB); cdecl;
  glGetAttachedShaders: procedure(program_: GLuint; maxCount: GLsizei; count: PGLsizei; shaders: PGLuint); cdecl;
  glGetAttribLocation: function(program_: GLuint; name: PGLchar): GLint; cdecl;
  glGetAttribLocationARB: function(programObj: GLhandleARB; name: PGLcharARB): GLint; cdecl;
  glGetBooleanIndexedvEXT: procedure(param: GLenum; index: GLuint; values: PGLboolean); cdecl;
  glGetBooleanv: procedure(pname: GLenum; params: PGLboolean); cdecl;
  glGetBufferParameteriv: procedure(target: GLenum; pname: GLenum; params: PGLint); cdecl;
  glGetBufferParameterivARB: procedure(target: GLenum; pname: GLenum; params: PGLint); cdecl;
  glGetBufferPointerv: procedure(target: GLenum; pname: GLenum; params: PGLvoid); cdecl;
  glGetBufferPointervARB: procedure(target: GLenum; pname: GLenum; params: PGLvoid); cdecl;
  glGetBufferSubData: procedure(target: GLenum; offset: GLintptr; size: GLsizeiptr; data: PGLvoid); cdecl;
  glGetBufferSubDataARB: procedure(target: GLenum; offset: GLintptrARB; size: GLsizeiptrARB; data: PGLvoid); cdecl;
  glGetClipPlane: procedure(plane: GLenum; equation: PGLdouble); cdecl;
  glGetColorTable: procedure(target: GLenum; format: GLenum; type_: GLenum; table: PGLvoid); cdecl;
  glGetColorTableParameterfv: procedure(target: GLenum; pname: GLenum; params: PGLfloat); cdecl;
  glGetColorTableParameteriv: procedure(target: GLenum; pname: GLenum; params: PGLint); cdecl;
  glGetCompressedTexImage: procedure(target: GLenum; lod: GLint; img: PGLvoid); cdecl;
  glGetConvolutionFilter: procedure(target: GLenum; format: GLenum; type_: GLenum; image: PGLvoid); cdecl;
  glGetConvolutionParameterfv: procedure(target: GLenum; pname: GLenum; params: PGLfloat); cdecl;
  glGetConvolutionParameteriv: procedure(target: GLenum; pname: GLenum; params: PGLint); cdecl;
  glGetDoublev: procedure(pname: GLenum; params: PGLdouble); cdecl;
  glGetError: function: GLenum; cdecl;
  glGetFloatv: procedure(pname: GLenum; params: PGLfloat); cdecl;
  glGetFragDataLocationEXT: function(program_: GLuint; name: PGLchar): GLint; cdecl;
  glGetFramebufferAttachmentParameterivEXT: procedure(target: GLenum; attachment: GLenum; pname: GLenum; params: PGLint); cdecl;
  glGetHandleARB: function(pname: GLenum): GLhandleARB; cdecl;
  glGetHistogram: procedure(target: GLenum; reset: GLboolean; format: GLenum; type_: GLenum; values: PGLvoid); cdecl;
  glGetHistogramParameterfv: procedure(target: GLenum; pname: GLenum; params: PGLfloat); cdecl;
  glGetHistogramParameteriv: procedure(target: GLenum; pname: GLenum; params: PGLint); cdecl;
  glGetInfoLogARB: procedure(obj: GLhandleARB; maxLength: GLsizei; length: PGLsizei; infoLog: PGLcharARB); cdecl;
  glGetIntegerIndexedvEXT: procedure(param: GLenum; index: GLuint; values: PGLint); cdecl;
  glGetIntegeri_v: procedure(pname: GLenum; index: GLuint; data: PGLint); cdecl;
  glGetIntegerv: procedure(pname: GLenum; params: PGLint); cdecl;
  glGetLightfv: procedure(light: GLenum; pname: GLenum; params: PGLfloat); cdecl;
  glGetLightiv: procedure(light: GLenum; pname: GLenum; params: PGLint); cdecl;
  glGetMapdv: procedure(target: GLenum; query: GLenum; v: PGLdouble); cdecl;
  glGetMapfv: procedure(target: GLenum; query: GLenum; v: PGLfloat); cdecl;
  glGetMapiv: procedure(target: GLenum; query: GLenum; v: PGLint); cdecl;
  glGetMaterialfv: procedure(face: GLenum; pname: GLenum; params: PGLfloat); cdecl;
  glGetMaterialiv: procedure(face: GLenum; pname: GLenum; params: PGLint); cdecl;
  glGetMinmax: procedure(target: GLenum; reset: GLboolean; format: GLenum; type_: GLenum; values: PGLvoid); cdecl;
  glGetMinmaxParameterfv: procedure(target: GLenum; pname: GLenum; params: PGLfloat); cdecl;
  glGetMinmaxParameteriv: procedure(target: GLenum; pname: GLenum; params: PGLint); cdecl;
  glGetObjectParameterfvARB: procedure(obj: GLhandleARB; pname: GLenum; params: PGLfloat); cdecl;
  glGetObjectParameterivAPPLE: procedure(objectType: GLenum; name: GLuint; pname: GLenum; params: PGLint); cdecl;
  glGetObjectParameterivARB: procedure(obj: GLhandleARB; pname: GLenum; params: PGLint); cdecl;
  glGetPixelMapfv: procedure(map: GLenum; values: PGLfloat); cdecl;
  glGetPixelMapuiv: procedure(map: GLenum; values: PGLuint); cdecl;
  glGetPixelMapusv: procedure(map: GLenum; values: PGLushort); cdecl;
  glGetPointerv: procedure(pname: GLenum; params: PGLvoid); cdecl;
  glGetPolygonStipple: procedure(mask: PGLubyte); cdecl;
  glGetProgramEnvParameterdvARB: procedure(target: GLenum; index: GLuint; params: PGLdouble); cdecl;
  glGetProgramEnvParameterfvARB: procedure(target: GLenum; index: GLuint; params: PGLfloat); cdecl;
  glGetProgramInfoLog: procedure(program_: GLuint; bufSize: GLsizei; length: PGLsizei; infoLog: PGLchar); cdecl;
  glGetProgramLocalParameterdvARB: procedure(target: GLenum; index: GLuint; params: PGLdouble); cdecl;
  glGetProgramLocalParameterfvARB: procedure(target: GLenum; index: GLuint; params: PGLfloat); cdecl;
  glGetProgramStringARB: procedure(target: GLenum; pname: GLenum; string_: PGLvoid); cdecl;
  glGetProgramiv: procedure(program_: GLuint; pname: GLenum; params: PGLint); cdecl;
  glGetProgramivARB: procedure(target: GLenum; pname: GLenum; params: PGLint); cdecl;
  glGetQueryObjectiv: procedure(id: GLuint; pname: GLenum; params: PGLint); cdecl;
  glGetQueryObjectivARB: procedure(id: GLuint; pname: GLenum; params: PGLint); cdecl;
  glGetQueryObjectuiv: procedure(id: GLuint; pname: GLenum; params: PGLuint); cdecl;
  glGetQueryObjectuivARB: procedure(id: GLuint; pname: GLenum; params: PGLuint); cdecl;
  glGetQueryiv: procedure(target: GLenum; pname: GLenum; params: PGLint); cdecl;
  glGetQueryivARB: procedure(target: GLenum; pname: GLenum; params: PGLint); cdecl;
  glGetRenderbufferParameterivEXT: procedure(target: GLenum; pname: GLenum; params: PGLint); cdecl;
  glGetSeparableFilter: procedure(target: GLenum; format: GLenum; type_: GLenum; row: PGLvoid; column: PGLvoid; span: PGLvoid); cdecl;
  glGetShaderInfoLog: procedure(shader: GLuint; bufSize: GLsizei; length: PGLsizei; infoLog: PGLchar); cdecl;
  glGetShaderSource: procedure(shader: GLuint; bufSize: GLsizei; length: PGLsizei; source: PGLchar); cdecl;
  glGetShaderSourceARB: procedure(obj: GLhandleARB; maxLength: GLsizei; length: PGLsizei; source: PGLcharARB); cdecl;
  glGetShaderiv: procedure(shader: GLuint; pname: GLenum; params: PGLint); cdecl;
  glGetString: function(name: GLenum): PGLubyte; cdecl;
  glGetTexEnvfv: procedure(target: GLenum; pname: GLenum; params: PGLfloat); cdecl;
  glGetTexEnviv: procedure(target: GLenum; pname: GLenum; params: PGLint); cdecl;
  glGetTexGendv: procedure(coord: GLenum; pname: GLenum; params: PGLdouble); cdecl;
  glGetTexGenfv: procedure(coord: GLenum; pname: GLenum; params: PGLfloat); cdecl;
  glGetTexGeniv: procedure(coord: GLenum; pname: GLenum; params: PGLint); cdecl;
  glGetTexImage: procedure(target: GLenum; level: GLint; format: GLenum; type_: GLenum; pixels: PGLvoid); cdecl;
  glGetTexLevelParameterfv: procedure(target: GLenum; level: GLint; pname: GLenum; params: PGLfloat); cdecl;
  glGetTexLevelParameteriv: procedure(target: GLenum; level: GLint; pname: GLenum; params: PGLint); cdecl;
  glGetTexParameterIivEXT: procedure(target: GLenum; pname: GLenum; params: PGLint); cdecl;
  glGetTexParameterIuivEXT: procedure(target: GLenum; pname: GLenum; params: PGLuint); cdecl;
  glGetTexParameterPointervAPPLE: procedure(target: GLenum; pname: GLenum; params: PGLvoid); cdecl;
  glGetTexParameterfv: procedure(target: GLenum; pname: GLenum; params: PGLfloat); cdecl;
  glGetTexParameteriv: procedure(target: GLenum; pname: GLenum; params: PGLint); cdecl;
  glGetTransformFeedbackVaryingEXT: procedure(program_: GLuint; index: GLuint; bufSize: GLsizei; length: PGLsizei; size: PGLsizei; type_: PGLenum; name: PGLchar); cdecl;
  glGetUniformBlockIndex: function(program_: GLuint; uniformBlockName: PGLchar): GLuint; cdecl;
  glGetUniformBufferSizeEXT: function(program_: GLuint; location: GLint): GLint; cdecl;
  glGetUniformIndices: procedure(program_: GLuint; uniformCount: GLsizei; uniformNames: PGLchar; uniformIndices: PGLuint); cdecl;
  glGetUniformLocation: function(program_: GLuint; name: PGLchar): GLint; cdecl;
  glGetUniformLocationARB: function(programObj: GLhandleARB; name: PGLcharARB): GLint; cdecl;
  glGetUniformOffsetEXT: function(program_: GLuint; location: GLint): GLintptr; cdecl;
  glGetUniformfv: procedure(program_: GLuint; location: GLint; params: PGLfloat); cdecl;
  glGetUniformfvARB: procedure(programObj: GLhandleARB; location: GLint; params: PGLfloat); cdecl;
  glGetUniformiv: procedure(program_: GLuint; location: GLint; params: PGLint); cdecl;
  glGetUniformivARB: procedure(programObj: GLhandleARB; location: GLint; params: PGLint); cdecl;
  glGetUniformuivEXT: procedure(program_: GLuint; location: GLint; params: PGLuint); cdecl;
  glGetVertexAttribIivEXT: procedure(index: GLuint; pname: GLenum; params: PGLint); cdecl;
  glGetVertexAttribIuivEXT: procedure(index: GLuint; pname: GLenum; params: PGLuint); cdecl;
  glGetVertexAttribPointerv: procedure(index: GLuint; pname: GLenum; pointer: PGLvoid); cdecl;
  glGetVertexAttribPointervARB: procedure(index: GLuint; pname: GLenum; pointer: PGLvoid); cdecl;
  glGetVertexAttribdv: procedure(index: GLuint; pname: GLenum; params: PGLdouble); cdecl;
  glGetVertexAttribdvARB: procedure(index: GLuint; pname: GLenum; params: PGLdouble); cdecl;
  glGetVertexAttribfv: procedure(index: GLuint; pname: GLenum; params: PGLfloat); cdecl;
  glGetVertexAttribfvARB: procedure(index: GLuint; pname: GLenum; params: PGLfloat); cdecl;
  glGetVertexAttribiv: procedure(index: GLuint; pname: GLenum; params: PGLint); cdecl;
  glGetVertexAttribivARB: procedure(index: GLuint; pname: GLenum; params: PGLint); cdecl;
  glHint: procedure(target: GLenum; mode: GLenum); cdecl;
  glHistogram: procedure(target: GLenum; width: GLsizei; internalformat: GLenum; sink: GLboolean); cdecl;
  glIndexMask: procedure(mask: GLuint); cdecl;
  glIndexPointer: procedure(type_: GLenum; stride: GLsizei; pointer: PGLvoid); cdecl;
  glIndexd: procedure(c: GLdouble); cdecl;
  glIndexdv: procedure(c: PGLdouble); cdecl;
  glIndexf: procedure(c: GLfloat); cdecl;
  glIndexfv: procedure(c: PGLfloat); cdecl;
  glIndexi: procedure(c: GLint); cdecl;
  glIndexiv: procedure(c: PGLint); cdecl;
  glIndexs: procedure(c: GLshort); cdecl;
  glIndexsv: procedure(c: PGLshort); cdecl;
  glIndexub: procedure(c: GLubyte); cdecl;
  glIndexubv: procedure(c: PGLubyte); cdecl;
  glInitNames: procedure; cdecl;
  glInterleavedArrays: procedure(format: GLenum; stride: GLsizei; pointer: PGLvoid); cdecl;
  glIsBuffer: function(buffer: GLuint): GLboolean; cdecl;
  glIsBufferARB: function(buffer: GLuint): GLboolean; cdecl;
  glIsEnabled: function(cap: GLenum): GLboolean; cdecl;
  glIsEnabledIndexedEXT: function(target: GLenum; index: GLuint): GLboolean; cdecl;
  glIsFenceAPPLE: function(fence: GLuint): GLboolean; cdecl;
  glIsFramebufferEXT: function(framebuffer: GLuint): GLboolean; cdecl;
  glIsList: function(list: GLuint): GLboolean; cdecl;
  glIsProgram: function(program_: GLuint): GLboolean; cdecl;
  glIsProgramARB: function(program_: GLuint): GLboolean; cdecl;
  glIsQuery: function(id: GLuint): GLboolean; cdecl;
  glIsQueryARB: function(id: GLuint): GLboolean; cdecl;
  glIsRenderbufferEXT: function(renderbuffer: GLuint): GLboolean; cdecl;
  glIsShader: function(shader: GLuint): GLboolean; cdecl;
  glIsTexture: function(texture: GLuint): GLboolean; cdecl;
  glIsVertexArrayAPPLE: function(id: GLuint): GLboolean; cdecl;
  glIsVertexAttribEnabledAPPLE: function(index: GLuint; pname: GLenum): GLboolean; cdecl;
  glLightModelf: procedure(pname: GLenum; param: GLfloat); cdecl;
  glLightModelfv: procedure(pname: GLenum; params: PGLfloat); cdecl;
  glLightModeli: procedure(pname: GLenum; param: GLint); cdecl;
  glLightModeliv: procedure(pname: GLenum; params: PGLint); cdecl;
  glLightf: procedure(light: GLenum; pname: GLenum; param: GLfloat); cdecl;
  glLightfv: procedure(light: GLenum; pname: GLenum; params: PGLfloat); cdecl;
  glLighti: procedure(light: GLenum; pname: GLenum; param: GLint); cdecl;
  glLightiv: procedure(light: GLenum; pname: GLenum; params: PGLint); cdecl;
  glLineStipple: procedure(factor: GLint; pattern: GLushort); cdecl;
  glLineWidth: procedure(width: GLfloat); cdecl;
  glLinkProgram: procedure(program_: GLuint); cdecl;
  glLinkProgramARB: procedure(programObj: GLhandleARB); cdecl;
  glListBase: procedure(base: GLuint); cdecl;
  glLoadIdentity: procedure; cdecl;
  glLoadMatrixd: procedure(m: PGLdouble); cdecl;
  glLoadMatrixf: procedure(m: PGLfloat); cdecl;
  glLoadName: procedure(name: GLuint); cdecl;
  glLoadTransposeMatrixd: procedure(m: PGLdouble); cdecl;
  glLoadTransposeMatrixf: procedure(m: PGLfloat); cdecl;
  glLogicOp: procedure(opcode: GLenum); cdecl;
  glMap1d: procedure(target: GLenum; u1: GLdouble; u2: GLdouble; stride: GLint; order: GLint; points: PGLdouble); cdecl;
  glMap1f: procedure(target: GLenum; u1: GLfloat; u2: GLfloat; stride: GLint; order: GLint; points: PGLfloat); cdecl;
  glMap2d: procedure(target: GLenum; u1: GLdouble; u2: GLdouble; ustride: GLint; uorder: GLint; v1: GLdouble; v2: GLdouble; vstride: GLint; vorder: GLint; points: PGLdouble); cdecl;
  glMap2f: procedure(target: GLenum; u1: GLfloat; u2: GLfloat; ustride: GLint; uorder: GLint; v1: GLfloat; v2: GLfloat; vstride: GLint; vorder: GLint; points: PGLfloat); cdecl;
  glMapBuffer: function(target: GLenum; access: GLenum): PGLvoid; cdecl;
  glMapBufferARB: function(target: GLenum; access: GLenum): PGLvoid; cdecl;
  glMapGrid1d: procedure(un: GLint; u1: GLdouble; u2: GLdouble); cdecl;
  glMapGrid1f: procedure(un: GLint; u1: GLfloat; u2: GLfloat); cdecl;
  glMapGrid2d: procedure(un: GLint; u1: GLdouble; u2: GLdouble; vn: GLint; v1: GLdouble; v2: GLdouble); cdecl;
  glMapGrid2f: procedure(un: GLint; u1: GLfloat; u2: GLfloat; vn: GLint; v1: GLfloat; v2: GLfloat); cdecl;
  glMapVertexAttrib1dAPPLE: procedure(index: GLuint; size: GLuint; u1: GLdouble; u2: GLdouble; stride: GLint; order: GLint; points: PGLdouble); cdecl;
  glMapVertexAttrib1fAPPLE: procedure(index: GLuint; size: GLuint; u1: GLfloat; u2: GLfloat; stride: GLint; order: GLint; points: PGLfloat); cdecl;
  glMapVertexAttrib2dAPPLE: procedure(index: GLuint; size: GLuint; u1: GLdouble; u2: GLdouble; ustride: GLint; uorder: GLint; v1: GLdouble; v2: GLdouble; vstride: GLint; vorder: GLint; points: PGLdouble); cdecl;
  glMapVertexAttrib2fAPPLE: procedure(index: GLuint; size: GLuint; u1: GLfloat; u2: GLfloat; ustride: GLint; uorder: GLint; v1: GLfloat; v2: GLfloat; vstride: GLint; vorder: GLint; points: PGLfloat); cdecl;
  glMaterialf: procedure(face: GLenum; pname: GLenum; param: GLfloat); cdecl;
  glMaterialfv: procedure(face: GLenum; pname: GLenum; params: PGLfloat); cdecl;
  glMateriali: procedure(face: GLenum; pname: GLenum; param: GLint); cdecl;
  glMaterialiv: procedure(face: GLenum; pname: GLenum; params: PGLint); cdecl;
  glMatrixMode: procedure(mode: GLenum); cdecl;
  glMinmax: procedure(target: GLenum; internalformat: GLenum; sink: GLboolean); cdecl;
  glMultMatrixd: procedure(m: PGLdouble); cdecl;
  glMultMatrixf: procedure(m: PGLfloat); cdecl;
  glMultTransposeMatrixd: procedure(m: PGLdouble); cdecl;
  glMultTransposeMatrixf: procedure(m: PGLfloat); cdecl;
  glMultiDrawArrays: procedure(mode: GLenum; first: PGLint; count: PGLsizei; primcount: GLsizei); cdecl;
  glMultiDrawElementArrayAPPLE: procedure(mode: GLenum; first: PGLint; count: PGLsizei; primcount: GLsizei); cdecl;
  glMultiDrawElements: procedure(mode: GLenum; count: PGLsizei; type_: GLenum; indices: PGLvoid; primcount: GLsizei); cdecl;
  glMultiDrawRangeElementArrayAPPLE: procedure(mode: GLenum; start: GLuint; end_: GLuint; first: PGLint; count: PGLsizei; primcount: GLsizei); cdecl;
  glMultiTexCoord1d: procedure(target: GLenum; s: GLdouble); cdecl;
  glMultiTexCoord1dv: procedure(target: GLenum; v: PGLdouble); cdecl;
  glMultiTexCoord1f: procedure(target: GLenum; s: GLfloat); cdecl;
  glMultiTexCoord1fv: procedure(target: GLenum; v: PGLfloat); cdecl;
  glMultiTexCoord1i: procedure(target: GLenum; s: GLint); cdecl;
  glMultiTexCoord1iv: procedure(target: GLenum; v: PGLint); cdecl;
  glMultiTexCoord1s: procedure(target: GLenum; s: GLshort); cdecl;
  glMultiTexCoord1sv: procedure(target: GLenum; v: PGLshort); cdecl;
  glMultiTexCoord2d: procedure(target: GLenum; s: GLdouble; t: GLdouble); cdecl;
  glMultiTexCoord2dv: procedure(target: GLenum; v: PGLdouble); cdecl;
  glMultiTexCoord2f: procedure(target: GLenum; s: GLfloat; t: GLfloat); cdecl;
  glMultiTexCoord2fv: procedure(target: GLenum; v: PGLfloat); cdecl;
  glMultiTexCoord2i: procedure(target: GLenum; s: GLint; t: GLint); cdecl;
  glMultiTexCoord2iv: procedure(target: GLenum; v: PGLint); cdecl;
  glMultiTexCoord2s: procedure(target: GLenum; s: GLshort; t: GLshort); cdecl;
  glMultiTexCoord2sv: procedure(target: GLenum; v: PGLshort); cdecl;
  glMultiTexCoord3d: procedure(target: GLenum; s: GLdouble; t: GLdouble; r: GLdouble); cdecl;
  glMultiTexCoord3dv: procedure(target: GLenum; v: PGLdouble); cdecl;
  glMultiTexCoord3f: procedure(target: GLenum; s: GLfloat; t: GLfloat; r: GLfloat); cdecl;
  glMultiTexCoord3fv: procedure(target: GLenum; v: PGLfloat); cdecl;
  glMultiTexCoord3i: procedure(target: GLenum; s: GLint; t: GLint; r: GLint); cdecl;
  glMultiTexCoord3iv: procedure(target: GLenum; v: PGLint); cdecl;
  glMultiTexCoord3s: procedure(target: GLenum; s: GLshort; t: GLshort; r: GLshort); cdecl;
  glMultiTexCoord3sv: procedure(target: GLenum; v: PGLshort); cdecl;
  glMultiTexCoord4d: procedure(target: GLenum; s: GLdouble; t: GLdouble; r: GLdouble; q: GLdouble); cdecl;
  glMultiTexCoord4dv: procedure(target: GLenum; v: PGLdouble); cdecl;
  glMultiTexCoord4f: procedure(target: GLenum; s: GLfloat; t: GLfloat; r: GLfloat; q: GLfloat); cdecl;
  glMultiTexCoord4fv: procedure(target: GLenum; v: PGLfloat); cdecl;
  glMultiTexCoord4iv: procedure(target: GLenum; v: PGLint); cdecl;
  glMultiTexCoord4s: procedure(target: GLenum; s: GLshort; t: GLshort; r: GLshort; q: GLshort); cdecl;
  glMultiTexCoord4sv: procedure(target: GLenum; v: PGLshort); cdecl;
  glNewList: procedure(list: GLuint; mode: GLenum); cdecl;
  glNormal3b: procedure(nx: GLbyte; ny: GLbyte; nz: GLbyte); cdecl;
  glNormal3bv: procedure(v: PGLbyte); cdecl;
  glNormal3d: procedure(nx: GLdouble; ny: GLdouble; nz: GLdouble); cdecl;
  glNormal3dv: procedure(v: PGLdouble); cdecl;
  glNormal3f: procedure(nx: GLfloat; ny: GLfloat; nz: GLfloat); cdecl;
  glNormal3fv: procedure(v: PGLfloat); cdecl;
  glNormal3i: procedure(nx: GLint; ny: GLint; nz: GLint); cdecl;
  glNormal3iv: procedure(v: PGLint); cdecl;
  glNormal3s: procedure(nx: GLshort; ny: GLshort; nz: GLshort); cdecl;
  glNormal3sv: procedure(v: PGLshort); cdecl;
  glNormalPointer: procedure(type_: GLenum; stride: GLsizei; pointer: PGLvoid); cdecl;
  glObjectPurgeableAPPLE: function(objectType: GLenum; name: GLuint; option: GLenum): GLenum; cdecl;
  glObjectUnpurgeableAPPLE: function(objectType: GLenum; name: GLuint; option: GLenum): GLenum; cdecl;
  glOrtho: procedure(left: GLdouble; right: GLdouble; bottom: GLdouble; top: GLdouble; zNear: GLdouble; zFar: GLdouble); cdecl;
  glPNTrianglesfATI: procedure(pname: GLenum; param: GLfloat); cdecl;
  glPNTrianglesfATIX: procedure(pname: GLenum; param: GLfloat); cdecl;
  glPNTrianglesiATI: procedure(pname: GLenum; param: GLint); cdecl;
  glPNTrianglesiATIX: procedure(pname: GLenum; param: GLint); cdecl;
  glPassThrough: procedure(token: GLfloat); cdecl;
  glPixelMapfv: procedure(map: GLenum; mapsize: GLint; values: PGLfloat); cdecl;
  glPixelMapuiv: procedure(map: GLenum; mapsize: GLint; values: PGLuint); cdecl;
  glPixelMapusv: procedure(map: GLenum; mapsize: GLint; values: PGLushort); cdecl;
  glPixelStoref: procedure(pname: GLenum; param: GLfloat); cdecl;
  glPixelStorei: procedure(pname: GLenum; param: GLint); cdecl;
  glPixelTransferf: procedure(pname: GLenum; param: GLfloat); cdecl;
  glPixelTransferi: procedure(pname: GLenum; param: GLint); cdecl;
  glPixelZoom: procedure(xfactor: GLfloat; yfactor: GLfloat); cdecl;
  glPointParameterf: procedure(pname: GLenum; param: GLfloat); cdecl;
  glPointParameterfARB: procedure(pname: GLenum; param: GLfloat); cdecl;
  glPointParameterfv: procedure(pname: GLenum; params: PGLfloat); cdecl;
  glPointParameterfvARB: procedure(pname: GLenum; params: PGLfloat); cdecl;
  glPointParameteri: procedure(pname: GLenum; param: GLint); cdecl;
  glPointParameteriNV: procedure(pname: GLenum; param: GLint); cdecl;
  glPointParameteriv: procedure(pname: GLenum; params: PGLint); cdecl;
  glPointParameterivNV: procedure(pname: GLenum; params: PGLint); cdecl;
  glPointSize: procedure(size: GLfloat); cdecl;
  glPolygonMode: procedure(face: GLenum; mode: GLenum); cdecl;
  glPolygonOffset: procedure(factor: GLfloat; units: GLfloat); cdecl;
  glPolygonStipple: procedure(mask: PGLubyte); cdecl;
  glPopAttrib: procedure; cdecl;
  glPopClientAttrib: procedure; cdecl;
  glPopMatrix: procedure; cdecl;
  glPopName: procedure; cdecl;
  glPrioritizeTextures: procedure(n: GLsizei; textures: PGLuint; priorities: PGLclampf); cdecl;
  glProgramEnvParameter4dARB: procedure(target: GLenum; index: GLuint; x: GLdouble; y: GLdouble; z: GLdouble; w: GLdouble); cdecl;
  glProgramEnvParameter4dvARB: procedure(target: GLenum; index: GLuint; params: PGLdouble); cdecl;
  glProgramEnvParameter4fARB: procedure(target: GLenum; index: GLuint; x: GLfloat; y: GLfloat; z: GLfloat; w: GLfloat); cdecl;
  glProgramEnvParameter4fvARB: procedure(target: GLenum; index: GLuint; params: PGLfloat); cdecl;
  glProgramEnvParameters4fvEXT: procedure(target: GLenum; index: GLuint; count: GLsizei; params: PGLfloat); cdecl;
  glProgramLocalParameter4dARB: procedure(target: GLenum; index: GLuint; x: GLdouble; y: GLdouble; z: GLdouble; w: GLdouble); cdecl;
  glProgramLocalParameter4dvARB: procedure(target: GLenum; index: GLuint; params: PGLdouble); cdecl;
  glProgramLocalParameter4fARB: procedure(target: GLenum; index: GLuint; x: GLfloat; y: GLfloat; z: GLfloat; w: GLfloat); cdecl;
  glProgramLocalParameter4fvARB: procedure(target: GLenum; index: GLuint; params: PGLfloat); cdecl;
  glProgramLocalParameters4fvEXT: procedure(target: GLenum; index: GLuint; count: GLsizei; params: PGLfloat); cdecl;
  glProgramParameteriEXT: procedure(program_: GLuint; pname: GLenum; value: GLint); cdecl;
  glProgramStringARB: procedure(target: GLenum; format: GLenum; len: GLsizei; string_: PGLvoid); cdecl;
  glProvokingVertexEXT: procedure(mode: GLenum); cdecl;
  glPushAttrib: procedure(mask: GLbitfield); cdecl;
  glPushClientAttrib: procedure(mask: GLbitfield); cdecl;
  glPushMatrix: procedure; cdecl;
  glPushName: procedure(name: GLuint); cdecl;
  glRasterPos2d: procedure(x: GLdouble; y: GLdouble); cdecl;
  glRasterPos2dv: procedure(v: PGLdouble); cdecl;
  glRasterPos2f: procedure(x: GLfloat; y: GLfloat); cdecl;
  glRasterPos2fv: procedure(v: PGLfloat); cdecl;
  glRasterPos2i: procedure(x: GLint; y: GLint); cdecl;
  glRasterPos2iv: procedure(v: PGLint); cdecl;
  glRasterPos2s: procedure(x: GLshort; y: GLshort); cdecl;
  glRasterPos2sv: procedure(v: PGLshort); cdecl;
  glRasterPos3d: procedure(x: GLdouble; y: GLdouble; z: GLdouble); cdecl;
  glRasterPos3dv: procedure(v: PGLdouble); cdecl;
  glRasterPos3f: procedure(x: GLfloat; y: GLfloat; z: GLfloat); cdecl;
  glRasterPos3fv: procedure(v: PGLfloat); cdecl;
  glRasterPos3i: procedure(x: GLint; y: GLint; z: GLint); cdecl;
  glRasterPos3iv: procedure(v: PGLint); cdecl;
  glRasterPos3s: procedure(x: GLshort; y: GLshort; z: GLshort); cdecl;
  glRasterPos3sv: procedure(v: PGLshort); cdecl;
  glRasterPos4d: procedure(x: GLdouble; y: GLdouble; z: GLdouble; w: GLdouble); cdecl;
  glRasterPos4dv: procedure(v: PGLdouble); cdecl;
  glRasterPos4f: procedure(x: GLfloat; y: GLfloat; z: GLfloat; w: GLfloat); cdecl;
  glRasterPos4fv: procedure(v: PGLfloat); cdecl;
  glRasterPos4i: procedure(x: GLint; y: GLint; z: GLint; w: GLint); cdecl;
  glRasterPos4iv: procedure(v: PGLint); cdecl;
  glRasterPos4s: procedure(x: GLshort; y: GLshort; z: GLshort; w: GLshort); cdecl;
  glRasterPos4sv: procedure(v: PGLshort); cdecl;
  glReadBuffer: procedure(mode: GLenum); cdecl;
  glReadPixels: procedure(x: GLint; y: GLint; width: GLsizei; height: GLsizei; format: GLenum; type_: GLenum; pixels: PGLvoid); cdecl;
  glRectd: procedure(x1: GLdouble; y1: GLdouble; x2: GLdouble; y2: GLdouble); cdecl;
  glRectdv: procedure(v1: PGLdouble; v2: PGLdouble); cdecl;
  glRectf: procedure(x1: GLfloat; y1: GLfloat; x2: GLfloat; y2: GLfloat); cdecl;
  glRectfv: procedure(v1: PGLfloat; v2: PGLfloat); cdecl;
  glRecti: procedure(x1: GLint; y1: GLint; x2: GLint; y2: GLint); cdecl;
  glRectiv: procedure(v1: PGLint; v2: PGLint); cdecl;
  glRects: procedure(x1: GLshort; y1: GLshort; x2: GLshort; y2: GLshort); cdecl;
  glRectsv: procedure(v1: PGLshort; v2: PGLshort); cdecl;
  glRenderMode: function(mode: GLenum): GLint; cdecl;
  glRenderbufferStorageEXT: procedure(target: GLenum; internalformat: GLenum; width: GLsizei; height: GLsizei); cdecl;
  glRenderbufferStorageMultisampleEXT: procedure(target: GLenum; samples: GLsizei; internalformat: GLenum; width: GLsizei; height: GLsizei); cdecl;
  glResetHistogram: procedure(target: GLenum); cdecl;
  glResetMinmax: procedure(target: GLenum); cdecl;
  glRotated: procedure(angle: GLdouble; x: GLdouble; y: GLdouble; z: GLdouble); cdecl;
  glRotatef: procedure(angle: GLfloat; x: GLfloat; y: GLfloat; z: GLfloat); cdecl;
  glSampleCoverage: procedure(value: GLclampf; invert: GLboolean); cdecl;
  glSamplePass: procedure(pass: GLenum); cdecl;
  glScaled: procedure(x: GLdouble; y: GLdouble; z: GLdouble); cdecl;
  glScalef: procedure(x: GLfloat; y: GLfloat; z: GLfloat); cdecl;
  glScissor: procedure(x: GLint; y: GLint; width: GLsizei; height: GLsizei); cdecl;
  glSecondaryColor3b: procedure(red: GLbyte; green: GLbyte; blue: GLbyte); cdecl;
  glSecondaryColor3bv: procedure(v: PGLbyte); cdecl;
  glSecondaryColor3d: procedure(red: GLdouble; green: GLdouble; blue: GLdouble); cdecl;
  glSecondaryColor3dv: procedure(v: PGLdouble); cdecl;
  glSecondaryColor3f: procedure(red: GLfloat; green: GLfloat; blue: GLfloat); cdecl;
  glSecondaryColor3fv: procedure(v: PGLfloat); cdecl;
  glSecondaryColor3i: procedure(red: GLint; green: GLint; blue: GLint); cdecl;
  glSecondaryColor3iv: procedure(v: PGLint); cdecl;
  glSecondaryColor3s: procedure(red: GLshort; green: GLshort; blue: GLshort); cdecl;
  glSecondaryColor3sv: procedure(v: PGLshort); cdecl;
  glSecondaryColor3ub: procedure(red: GLubyte; green: GLubyte; blue: GLubyte); cdecl;
  glSecondaryColor3ubv: procedure(v: PGLubyte); cdecl;
  glSecondaryColor3ui: procedure(red: GLuint; green: GLuint; blue: GLuint); cdecl;
  glSecondaryColor3uiv: procedure(v: PGLuint); cdecl;
  glSecondaryColor3us: procedure(red: GLushort; green: GLushort; blue: GLushort); cdecl;
  glSecondaryColor3usv: procedure(v: PGLushort); cdecl;
  glSecondaryColorPointer: procedure(size: GLint; type_: GLenum; stride: GLsizei; pointer: PGLvoid); cdecl;
  glSelectBuffer: procedure(size: GLsizei; buffer: PGLuint); cdecl;
  glSeparableFilter2D: procedure(target: GLenum; internalformat: GLenum; width: GLsizei; height: GLsizei; format: GLenum; type_: GLenum; row: PGLvoid; column: PGLvoid); cdecl;
  glSetFenceAPPLE: procedure(fence: GLuint); cdecl;
  glShadeModel: procedure(mode: GLenum); cdecl;
  glShaderSource: procedure(shader: GLuint; count: GLsizei; string_: PGLchar; length: PGLint); cdecl;
  glShaderSourceARB: procedure(shaderObj: GLhandleARB; count: GLsizei; string_: PGLcharARB; length: PGLint); cdecl;
  glStencilFunc: procedure(func: GLenum; ref: GLint; mask: GLuint); cdecl;
  glStencilFuncSeparate: procedure(face: GLenum; func: GLenum; ref: GLint; mask: GLuint); cdecl;
  glStencilFuncSeparateATI: procedure(frontfunc: GLenum; backfunc: GLenum; ref: GLint; mask: GLuint); cdecl;
  glStencilMask: procedure(mask: GLuint); cdecl;
  glStencilMaskSeparate: procedure(face: GLenum; mask: GLuint); cdecl;
  glStencilOp: procedure(fail: GLenum; zfail: GLenum; zpass: GLenum); cdecl;
  glStencilOpSeparate: procedure(face: GLenum; fail: GLenum; zfail: GLenum; zpass: GLenum); cdecl;
  glStencilOpSeparateATI: procedure(face: GLenum; sfail: GLenum; dpfail: GLenum; dppass: GLenum); cdecl;
  glSwapAPPLE: procedure; cdecl;
  glTestFenceAPPLE: function(fence: GLuint): GLboolean; cdecl;
  glTestObjectAPPLE: function(object_: GLenum; name: GLuint): GLboolean; cdecl;
  glTexCoord1d: procedure(s: GLdouble); cdecl;
  glTexCoord1dv: procedure(v: PGLdouble); cdecl;
  glTexCoord1f: procedure(s: GLfloat); cdecl;
  glTexCoord1fv: procedure(v: PGLfloat); cdecl;
  glTexCoord1i: procedure(s: GLint); cdecl;
  glTexCoord1iv: procedure(v: PGLint); cdecl;
  glTexCoord1s: procedure(s: GLshort); cdecl;
  glTexCoord1sv: procedure(v: PGLshort); cdecl;
  glTexCoord2d: procedure(s: GLdouble; t: GLdouble); cdecl;
  glTexCoord2dv: procedure(v: PGLdouble); cdecl;
  glTexCoord2f: procedure(s: GLfloat; t: GLfloat); cdecl;
  glTexCoord2fv: procedure(v: PGLfloat); cdecl;
  glTexCoord2i: procedure(s: GLint; t: GLint); cdecl;
  glTexCoord2iv: procedure(v: PGLint); cdecl;
  glTexCoord2s: procedure(s: GLshort; t: GLshort); cdecl;
  glTexCoord2sv: procedure(v: PGLshort); cdecl;
  glTexCoord3d: procedure(s: GLdouble; t: GLdouble; r: GLdouble); cdecl;
  glTexCoord3dv: procedure(v: PGLdouble); cdecl;
  glTexCoord3f: procedure(s: GLfloat; t: GLfloat; r: GLfloat); cdecl;
  glTexCoord3fv: procedure(v: PGLfloat); cdecl;
  glTexCoord3i: procedure(s: GLint; t: GLint; r: GLint); cdecl;
  glTexCoord3iv: procedure(v: PGLint); cdecl;
  glTexCoord3s: procedure(s: GLshort; t: GLshort; r: GLshort); cdecl;
  glTexCoord3sv: procedure(v: PGLshort); cdecl;
  glTexCoord4d: procedure(s: GLdouble; t: GLdouble; r: GLdouble; q: GLdouble); cdecl;
  glTexCoord4dv: procedure(v: PGLdouble); cdecl;
  glTexCoord4f: procedure(s: GLfloat; t: GLfloat; r: GLfloat; q: GLfloat); cdecl;
  glTexCoord4fv: procedure(v: PGLfloat); cdecl;
  glTexCoord4i: procedure(s: GLint; t: GLint; r: GLint; q: GLint); cdecl;
  glTexCoord4iv: procedure(v: PGLint); cdecl;
  glTexCoord4s: procedure(s: GLshort; t: GLshort; r: GLshort; q: GLshort); cdecl;
  glTexCoord4sv: procedure(v: PGLshort); cdecl;
  glTexCoordPointer: procedure(size: GLint; type_: GLenum; stride: GLsizei; pointer: PGLvoid); cdecl;
  glTexEnvf: procedure(target: GLenum; pname: GLenum; param: GLfloat); cdecl;
  glTexEnvfv: procedure(target: GLenum; pname: GLenum; params: PGLfloat); cdecl;
  glTexEnvi: procedure(target: GLenum; pname: GLenum; param: GLint); cdecl;
  glTexEnviv: procedure(target: GLenum; pname: GLenum; params: PGLint); cdecl;
  glTexGend: procedure(coord: GLenum; pname: GLenum; param: GLdouble); cdecl;
  glTexGendv: procedure(coord: GLenum; pname: GLenum; params: PGLdouble); cdecl;
  glTexGenf: procedure(coord: GLenum; pname: GLenum; param: GLfloat); cdecl;
  glTexGenfv: procedure(coord: GLenum; pname: GLenum; params: PGLfloat); cdecl;
  glTexGeni: procedure(coord: GLenum; pname: GLenum; param: GLint); cdecl;
  glTexGeniv: procedure(coord: GLenum; pname: GLenum; params: PGLint); cdecl;
  glTexImage1D: procedure(target: GLenum; level: GLint; internalformat: GLenum; width: GLsizei; border: GLint; format: GLenum; type_: GLenum; pixels: PGLvoid); cdecl;
  glTexImage2D: procedure(target: GLenum; level: GLint; internalformat: GLenum; width: GLsizei; height: GLsizei; border: GLint; format: GLenum; type_: GLenum; pixels: PGLvoid); cdecl;
  glTexImage3D: procedure(target: GLenum; level: GLint; internalformat: GLenum; width: GLsizei; height: GLsizei; depth: GLsizei; border: GLint; format: GLenum; type_: GLenum; pixels: PGLvoid); cdecl;
  glTexParameterIivEXT: procedure(target: GLenum; pname: GLenum; params: PGLint); cdecl;
  glTexParameterIuivEXT: procedure(target: GLenum; pname: GLenum; params: PGLuint); cdecl;
  glTexParameterf: procedure(target: GLenum; pname: GLenum; param: GLfloat); cdecl;
  glTexParameterfv: procedure(target: GLenum; pname: GLenum; params: PGLfloat); cdecl;
  glTexParameteri: procedure(target: GLenum; pname: GLenum; param: GLint); cdecl;
  glTexParameteriv: procedure(target: GLenum; pname: GLenum; params: PGLint); cdecl;
  glTexSubImage1D: procedure(target: GLenum; level: GLint; xoffset: GLint; width: GLsizei; format: GLenum; type_: GLenum; pixels: PGLvoid); cdecl;
  glTexSubImage2D: procedure(target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; width: GLsizei; height: GLsizei; format: GLenum; type_: GLenum; pixels: PGLvoid); cdecl;
  glTexSubImage3D: procedure(target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; zoffset: GLint; width: GLsizei; height: GLsizei; depth: GLsizei; format: GLenum; type_: GLenum; pixels: PGLvoid); cdecl;
  glTextureRangeAPPLE: procedure(target: GLenum; length: GLsizei; pointer: PGLvoid); cdecl;
  glTransformFeedbackVaryingsEXT: procedure(program_: GLuint; count: GLsizei; varyings: PGLchar; bufferMode: GLenum); cdecl;
  glTranslated: procedure(x: GLdouble; y: GLdouble; z: GLdouble); cdecl;
  glTranslatef: procedure(x: GLfloat; y: GLfloat; z: GLfloat); cdecl;
  glUniform1f: procedure(location: GLint; v0: GLfloat); cdecl;
  glUniform1fARB: procedure(location: GLint; v0: GLfloat); cdecl;
  glUniform1fv: procedure(location: GLint; count: GLsizei; value: PGLfloat); cdecl;
  glUniform1fvARB: procedure(location: GLint; count: GLsizei; value: PGLfloat); cdecl;
  glUniform1i: procedure(location: GLint; v0: GLint); cdecl;
  glUniform1iARB: procedure(location: GLint; v0: GLint); cdecl;
  glUniform1iv: procedure(location: GLint; count: GLsizei; value: PGLint); cdecl;
  glUniform1ivARB: procedure(location: GLint; count: GLsizei; value: PGLint); cdecl;
  glUniform1uiEXT: procedure(location: GLint; v0: GLuint); cdecl;
  glUniform1uivEXT: procedure(location: GLint; count: GLsizei; value: PGLuint); cdecl;
  glUniform2f: procedure(location: GLint; v0: GLfloat; v1: GLfloat); cdecl;
  glUniform2fARB: procedure(location: GLint; v0: GLfloat; v1: GLfloat); cdecl;
  glUniform2fv: procedure(location: GLint; count: GLsizei; value: PGLfloat); cdecl;
  glUniform2fvARB: procedure(location: GLint; count: GLsizei; value: PGLfloat); cdecl;
  glUniform2i: procedure(location: GLint; v0: GLint; v1: GLint); cdecl;
  glUniform2iARB: procedure(location: GLint; v0: GLint; v1: GLint); cdecl;
  glUniform2iv: procedure(location: GLint; count: GLsizei; value: PGLint); cdecl;
  glUniform2ivARB: procedure(location: GLint; count: GLsizei; value: PGLint); cdecl;
  glUniform2uiEXT: procedure(location: GLint; v0: GLuint; v1: GLuint); cdecl;
  glUniform2uivEXT: procedure(location: GLint; count: GLsizei; value: PGLuint); cdecl;
  glUniform3f: procedure(location: GLint; v0: GLfloat; v1: GLfloat; v2: GLfloat); cdecl;
  glUniform3fARB: procedure(location: GLint; v0: GLfloat; v1: GLfloat; v2: GLfloat); cdecl;
  glUniform3fv: procedure(location: GLint; count: GLsizei; value: PGLfloat); cdecl;
  glUniform3fvARB: procedure(location: GLint; count: GLsizei; value: PGLfloat); cdecl;
  glUniform3i: procedure(location: GLint; v0: GLint; v1: GLint; v2: GLint); cdecl;
  glUniform3iARB: procedure(location: GLint; v0: GLint; v1: GLint; v2: GLint); cdecl;
  glUniform3iv: procedure(location: GLint; count: GLsizei; value: PGLint); cdecl;
  glUniform3ivARB: procedure(location: GLint; count: GLsizei; value: PGLint); cdecl;
  glUniform3uiEXT: procedure(location: GLint; v0: GLuint; v1: GLuint; v2: GLuint); cdecl;
  glUniform3uivEXT: procedure(location: GLint; count: GLsizei; value: PGLuint); cdecl;
  glUniform4f: procedure(location: GLint; v0: GLfloat; v1: GLfloat; v2: GLfloat; v3: GLfloat); cdecl;
  glUniform4fARB: procedure(location: GLint; v0: GLfloat; v1: GLfloat; v2: GLfloat; v3: GLfloat); cdecl;
  glUniform4fv: procedure(location: GLint; count: GLsizei; value: PGLfloat); cdecl;
  glUniform4fvARB: procedure(location: GLint; count: GLsizei; value: PGLfloat); cdecl;
  glUniform4i: procedure(location: GLint; v0: GLint; v1: GLint; v2: GLint; v3: GLint); cdecl;
  glUniform4iARB: procedure(location: GLint; v0: GLint; v1: GLint; v2: GLint; v3: GLint); cdecl;
  glUniform4iv: procedure(location: GLint; count: GLsizei; value: PGLint); cdecl;
  glUniform4ivARB: procedure(location: GLint; count: GLsizei; value: PGLint); cdecl;
  glUniform4uiEXT: procedure(location: GLint; v0: GLuint; v1: GLuint; v2: GLuint; v3: GLuint); cdecl;
  glUniform4uivEXT: procedure(location: GLint; count: GLsizei; value: PGLuint); cdecl;
  glUniformBlockBinding: procedure(program_: GLuint; uniformBlockIndex: GLuint; uniformBlockBinding: GLuint); cdecl;
  glUniformBufferEXT: procedure(program_: GLuint; location: GLint; buffer: GLuint); cdecl;
  glUniformMatrix2fv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; value: PGLfloat); cdecl;
  glUniformMatrix2fvARB: procedure(location: GLint; count: GLsizei; transpose: GLboolean; value: PGLfloat); cdecl;
  glUniformMatrix2x3fv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; value: PGLfloat); cdecl;
  glUniformMatrix2x4fv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; value: PGLfloat); cdecl;
  glUniformMatrix3fv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; value: PGLfloat); cdecl;
  glUniformMatrix3fvARB: procedure(location: GLint; count: GLsizei; transpose: GLboolean; value: PGLfloat); cdecl;
  glUniformMatrix3x2fv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; value: PGLfloat); cdecl;
  glUniformMatrix3x4fv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; value: PGLfloat); cdecl;
  glUniformMatrix4fv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; value: PGLfloat); cdecl;
  glUniformMatrix4fvARB: procedure(location: GLint; count: GLsizei; transpose: GLboolean; value: PGLfloat); cdecl;
  glUniformMatrix4x2fv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; value: PGLfloat); cdecl;
  glUniformMatrix4x3fv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; value: PGLfloat); cdecl;
  glUnlockArraysEXT: procedure; cdecl;
  glUnmapBuffer: function(target: GLenum): GLboolean; cdecl;
  glUnmapBufferARB: function(target: GLenum): GLboolean; cdecl;
  glUseProgram: procedure(program_: GLuint); cdecl;
  glUseProgramObjectARB: procedure(programObj: GLhandleARB); cdecl;
  glValidateProgram: procedure(program_: GLuint); cdecl;
  glValidateProgramARB: procedure(programObj: GLhandleARB); cdecl;
  glVertex2d: procedure(x: GLdouble; y: GLdouble); cdecl;
  glVertex2dv: procedure(v: PGLdouble); cdecl;
  glVertex2f: procedure(x: GLfloat; y: GLfloat); cdecl;
  glVertex2fv: procedure(v: PGLfloat); cdecl;
  glVertex2i: procedure(x: GLint; y: GLint); cdecl;
  glVertex2iv: procedure(v: PGLint); cdecl;
  glVertex2s: procedure(x: GLshort; y: GLshort); cdecl;
  glVertex2sv: procedure(v: PGLshort); cdecl;
  glVertex3d: procedure(x: GLdouble; y: GLdouble; z: GLdouble); cdecl;
  glVertex3dv: procedure(v: PGLdouble); cdecl;
  glVertex3f: procedure(x: GLfloat; y: GLfloat; z: GLfloat); cdecl;
  glVertex3fv: procedure(v: PGLfloat); cdecl;
  glVertex3i: procedure(x: GLint; y: GLint; z: GLint); cdecl;
  glVertex3iv: procedure(v: PGLint); cdecl;
  glVertex3s: procedure(x: GLshort; y: GLshort; z: GLshort); cdecl;
  glVertex3sv: procedure(v: PGLshort); cdecl;
  glVertex4d: procedure(x: GLdouble; y: GLdouble; z: GLdouble; w: GLdouble); cdecl;
  glVertex4dv: procedure(v: PGLdouble); cdecl;
  glVertex4f: procedure(x: GLfloat; y: GLfloat; z: GLfloat; w: GLfloat); cdecl;
  glVertex4fv: procedure(v: PGLfloat); cdecl;
  glVertex4i: procedure(x: GLint; y: GLint; z: GLint; w: GLint); cdecl;
  glVertex4iv: procedure(v: PGLint); cdecl;
  glVertex4s: procedure(x: GLshort; y: GLshort; z: GLshort; w: GLshort); cdecl;
  glVertex4sv: procedure(v: PGLshort); cdecl;
  glVertexArrayParameteriAPPLE: procedure(pname: GLenum; param: GLint); cdecl;
  glVertexArrayRangeAPPLE: procedure(length: GLsizei; pointer: PGLvoid); cdecl;
  glVertexAttrib1d: procedure(index: GLuint; x: GLdouble); cdecl;
  glVertexAttrib1dARB: procedure(index: GLuint; x: GLdouble); cdecl;
  glVertexAttrib1dv: procedure(index: GLuint; v: PGLdouble); cdecl;
  glVertexAttrib1dvARB: procedure(index: GLuint; v: PGLdouble); cdecl;
  glVertexAttrib1f: procedure(index: GLuint; x: GLfloat); cdecl;
  glVertexAttrib1fARB: procedure(index: GLuint; x: GLfloat); cdecl;
  glVertexAttrib1fv: procedure(index: GLuint; v: PGLfloat); cdecl;
  glVertexAttrib1fvARB: procedure(index: GLuint; v: PGLfloat); cdecl;
  glVertexAttrib1s: procedure(index: GLuint; x: GLshort); cdecl;
  glVertexAttrib1sARB: procedure(index: GLuint; x: GLshort); cdecl;
  glVertexAttrib1sv: procedure(index: GLuint; v: PGLshort); cdecl;
  glVertexAttrib1svARB: procedure(index: GLuint; v: PGLshort); cdecl;
  glVertexAttrib2d: procedure(index: GLuint; x: GLdouble; y: GLdouble); cdecl;
  glVertexAttrib2dARB: procedure(index: GLuint; x: GLdouble; y: GLdouble); cdecl;
  glVertexAttrib2dv: procedure(index: GLuint; v: PGLdouble); cdecl;
  glVertexAttrib2dvARB: procedure(index: GLuint; v: PGLdouble); cdecl;
  glVertexAttrib2f: procedure(index: GLuint; x: GLfloat; y: GLfloat); cdecl;
  glVertexAttrib2fARB: procedure(index: GLuint; x: GLfloat; y: GLfloat); cdecl;
  glVertexAttrib2fv: procedure(index: GLuint; v: PGLfloat); cdecl;
  glVertexAttrib2fvARB: procedure(index: GLuint; v: PGLfloat); cdecl;
  glVertexAttrib2s: procedure(index: GLuint; x: GLshort; y: GLshort); cdecl;
  glVertexAttrib2sARB: procedure(index: GLuint; x: GLshort; y: GLshort); cdecl;
  glVertexAttrib2sv: procedure(index: GLuint; v: PGLshort); cdecl;
  glVertexAttrib2svARB: procedure(index: GLuint; v: PGLshort); cdecl;
  glVertexAttrib3d: procedure(index: GLuint; x: GLdouble; y: GLdouble; z: GLdouble); cdecl;
  glVertexAttrib3dARB: procedure(index: GLuint; x: GLdouble; y: GLdouble; z: GLdouble); cdecl;
  glVertexAttrib3dv: procedure(index: GLuint; v: PGLdouble); cdecl;
  glVertexAttrib3dvARB: procedure(index: GLuint; v: PGLdouble); cdecl;
  glVertexAttrib3f: procedure(index: GLuint; x: GLfloat; y: GLfloat; z: GLfloat); cdecl;
  glVertexAttrib3fARB: procedure(index: GLuint; x: GLfloat; y: GLfloat; z: GLfloat); cdecl;
  glVertexAttrib3fv: procedure(index: GLuint; v: PGLfloat); cdecl;
  glVertexAttrib3fvARB: procedure(index: GLuint; v: PGLfloat); cdecl;
  glVertexAttrib3s: procedure(index: GLuint; x: GLshort; y: GLshort; z: GLshort); cdecl;
  glVertexAttrib3sARB: procedure(index: GLuint; x: GLshort; y: GLshort; z: GLshort); cdecl;
  glVertexAttrib3sv: procedure(index: GLuint; v: PGLshort); cdecl;
  glVertexAttrib3svARB: procedure(index: GLuint; v: PGLshort); cdecl;
  glVertexAttrib4Nbv: procedure(index: GLuint; v: PGLbyte); cdecl;
  glVertexAttrib4NbvARB: procedure(index: GLuint; v: PGLbyte); cdecl;
  glVertexAttrib4Niv: procedure(index: GLuint; v: PGLint); cdecl;
  glVertexAttrib4NivARB: procedure(index: GLuint; v: PGLint); cdecl;
  glVertexAttrib4Nsv: procedure(index: GLuint; v: PGLshort); cdecl;
  glVertexAttrib4NsvARB: procedure(index: GLuint; v: PGLshort); cdecl;
  glVertexAttrib4Nub: procedure(index: GLuint; x: GLubyte; y: GLubyte; z: GLubyte; w: GLubyte); cdecl;
  glVertexAttrib4NubARB: procedure(index: GLuint; x: GLubyte; y: GLubyte; z: GLubyte; w: GLubyte); cdecl;
  glVertexAttrib4Nubv: procedure(index: GLuint; v: PGLubyte); cdecl;
  glVertexAttrib4NubvARB: procedure(index: GLuint; v: PGLubyte); cdecl;
  glVertexAttrib4Nuiv: procedure(index: GLuint; v: PGLuint); cdecl;
  glVertexAttrib4NuivARB: procedure(index: GLuint; v: PGLuint); cdecl;
  glVertexAttrib4Nusv: procedure(index: GLuint; v: PGLushort); cdecl;
  glVertexAttrib4NusvARB: procedure(index: GLuint; v: PGLushort); cdecl;
  glVertexAttrib4bv: procedure(index: GLuint; v: PGLbyte); cdecl;
  glVertexAttrib4bvARB: procedure(index: GLuint; v: PGLbyte); cdecl;
  glVertexAttrib4d: procedure(index: GLuint; x: GLdouble; y: GLdouble; z: GLdouble; w: GLdouble); cdecl;
  glVertexAttrib4dARB: procedure(index: GLuint; x: GLdouble; y: GLdouble; z: GLdouble; w: GLdouble); cdecl;
  glVertexAttrib4dv: procedure(index: GLuint; v: PGLdouble); cdecl;
  glVertexAttrib4dvARB: procedure(index: GLuint; v: PGLdouble); cdecl;
  glVertexAttrib4f: procedure(index: GLuint; x: GLfloat; y: GLfloat; z: GLfloat; w: GLfloat); cdecl;
  glVertexAttrib4fARB: procedure(index: GLuint; x: GLfloat; y: GLfloat; z: GLfloat; w: GLfloat); cdecl;
  glVertexAttrib4fv: procedure(index: GLuint; v: PGLfloat); cdecl;
  glVertexAttrib4fvARB: procedure(index: GLuint; v: PGLfloat); cdecl;
  glVertexAttrib4iv: procedure(index: GLuint; v: PGLint); cdecl;
  glVertexAttrib4ivARB: procedure(index: GLuint; v: PGLint); cdecl;
  glVertexAttrib4s: procedure(index: GLuint; x: GLshort; y: GLshort; z: GLshort; w: GLshort); cdecl;
  glVertexAttrib4sARB: procedure(index: GLuint; x: GLshort; y: GLshort; z: GLshort; w: GLshort); cdecl;
  glVertexAttrib4sv: procedure(index: GLuint; v: PGLshort); cdecl;
  glVertexAttrib4svARB: procedure(index: GLuint; v: PGLshort); cdecl;
  glVertexAttrib4ubv: procedure(index: GLuint; v: PGLubyte); cdecl;
  glVertexAttrib4ubvARB: procedure(index: GLuint; v: PGLubyte); cdecl;
  glVertexAttrib4uiv: procedure(index: GLuint; v: PGLuint); cdecl;
  glVertexAttrib4uivARB: procedure(index: GLuint; v: PGLuint); cdecl;
  glVertexAttrib4usv: procedure(index: GLuint; v: PGLushort); cdecl;
  glVertexAttrib4usvARB: procedure(index: GLuint; v: PGLushort); cdecl;
  glVertexAttribDivisorARB: procedure(index: GLuint; divisor: GLuint); cdecl;
  glVertexAttribI1iEXT: procedure(index: GLuint; x: GLint); cdecl;
  glVertexAttribI1ivEXT: procedure(index: GLuint; v: PGLint); cdecl;
  glVertexAttribI1uiEXT: procedure(index: GLuint; x: GLuint); cdecl;
  glVertexAttribI1uivEXT: procedure(index: GLuint; v: PGLuint); cdecl;
  glVertexAttribI2iEXT: procedure(index: GLuint; x: GLint; y: GLint); cdecl;
  glVertexAttribI2ivEXT: procedure(index: GLuint; v: PGLint); cdecl;
  glVertexAttribI2uiEXT: procedure(index: GLuint; x: GLuint; y: GLuint); cdecl;
  glVertexAttribI2uivEXT: procedure(index: GLuint; v: PGLuint); cdecl;
  glVertexAttribI3iEXT: procedure(index: GLuint; x: GLint; y: GLint; z: GLint); cdecl;
  glVertexAttribI3ivEXT: procedure(index: GLuint; v: PGLint); cdecl;
  glVertexAttribI3uiEXT: procedure(index: GLuint; x: GLuint; y: GLuint; z: GLuint); cdecl;
  glVertexAttribI3uivEXT: procedure(index: GLuint; v: PGLuint); cdecl;
  glVertexAttribI4bvEXT: procedure(index: GLuint; v: PGLbyte); cdecl;
  glVertexAttribI4iEXT: procedure(index: GLuint; x: GLint; y: GLint; z: GLint; w: GLint); cdecl;
  glVertexAttribI4ivEXT: procedure(index: GLuint; v: PGLint); cdecl;
  glVertexAttribI4svEXT: procedure(index: GLuint; v: PGLshort); cdecl;
  glVertexAttribI4ubvEXT: procedure(index: GLuint; v: PGLubyte); cdecl;
  glVertexAttribI4uiEXT: procedure(index: GLuint; x: GLuint; y: GLuint; z: GLuint; w: GLuint); cdecl;
  glVertexAttribI4uivEXT: procedure(index: GLuint; v: PGLuint); cdecl;
  glVertexAttribI4usvEXT: procedure(index: GLuint; v: PGLushort); cdecl;
  glVertexAttribIPointerEXT: procedure(index: GLuint; size: GLint; type_: GLenum; stride: GLsizei; pointer: PGLvoid); cdecl;
  glVertexAttribPointer: procedure(index: GLuint; size: GLint; type_: GLenum; normalized: GLboolean; stride: GLsizei; pointer: PGLvoid); cdecl;
  glVertexAttribPointerARB: procedure(index: GLuint; size: GLint; type_: GLenum; normalized: GLboolean; stride: GLsizei; pointer: PGLvoid); cdecl;
  glVertexPointer: procedure(size: GLint; type_: GLenum; stride: GLsizei; pointer: PGLvoid); cdecl;
  glViewport: procedure(x: GLint; y: GLint; width: GLsizei; height: GLsizei); cdecl;
  glWindowPos2d: procedure(x: GLdouble; y: GLdouble); cdecl;
  glWindowPos2dv: procedure(v: PGLdouble); cdecl;
  glWindowPos2f: procedure(x: GLfloat; y: GLfloat); cdecl;
  glWindowPos2fv: procedure(v: PGLfloat); cdecl;
  glWindowPos2i: procedure(x: GLint; y: GLint); cdecl;
  glWindowPos2iv: procedure(v: PGLint); cdecl;
  glWindowPos2s: procedure(x: GLshort; y: GLshort); cdecl;
  glWindowPos2sv: procedure(v: PGLshort); cdecl;
  glWindowPos3d: procedure(x: GLdouble; y: GLdouble; z: GLdouble); cdecl;
  glWindowPos3dv: procedure(v: PGLdouble); cdecl;
  glWindowPos3f: procedure(x: GLfloat; y: GLfloat; z: GLfloat); cdecl;
  glWindowPos3fv: procedure(v: PGLfloat); cdecl;
  glWindowPos3i: procedure(x: GLint; y: GLint; z: GLint); cdecl;
  glWindowPos3iv: procedure(v: PGLint); cdecl;
  glWindowPos3s: procedure(x: GLshort; y: GLshort; z: GLshort); cdecl;
  glWindowPos3sv: procedure(v: PGLshort); cdecl;
{
  gluBeginCurve: procedure(nurb: PGLUnurbs); cdecl;
  gluBeginPolygon: procedure(tess: PGLUtesselator); cdecl;
  gluBeginSurface: procedure(nurb: PGLUnurbs); cdecl;
  gluBeginTrim: procedure(nurb: PGLUnurbs); cdecl;
  gluBuild1DMipmapLevels: function(target: GLenum; internalFormat: GLint; width: GLsizei; format: GLenum; type_: GLenum; level: GLint; base: GLint; max: GLint; data: Pointer): GLint; cdecl;
  gluBuild1DMipmapLevelsCTX: function(ctx: Pstruct _CGLContextObject; target: GLenum; internalFormat: GLint; width: GLsizei; format: GLenum; type_: GLenum; level: GLint; base: GLint; max: GLint; data: Pointer): GLint; cdecl;
  gluBuild1DMipmaps: function(target: GLenum; internalFormat: GLint; width: GLsizei; format: GLenum; type_: GLenum; data: Pointer): GLint; cdecl;
  gluBuild1DMipmapsCTX: function(ctx: Pstruct _CGLContextObject; target: GLenum; internalFormat: GLint; width: GLsizei; format: GLenum; type_: GLenum; data: Pointer): GLint; cdecl;
  gluBuild2DMipmapLevels: function(target: GLenum; internalFormat: GLint; width: GLsizei; height: GLsizei; format: GLenum; type_: GLenum; level: GLint; base: GLint; max: GLint; data: Pointer): GLint; cdecl;
  gluBuild2DMipmapLevelsCTX: function(ctx: Pstruct _CGLContextObject; target: GLenum; internalFormat: GLint; width: GLsizei; height: GLsizei; format: GLenum; type_: GLenum; level: GLint; base: GLint; max: GLint; data: Pointer): GLint; cdecl;
  gluBuild2DMipmaps: function(target: GLenum; internalFormat: GLint; width: GLsizei; height: GLsizei; format: GLenum; type_: GLenum; data: Pointer): GLint; cdecl;
  gluBuild2DMipmapsCTX: function(ctx: Pstruct _CGLContextObject; target: GLenum; internalFormat: GLint; width: GLsizei; height: GLsizei; format: GLenum; type_: GLenum; data: Pointer): GLint; cdecl;
  gluBuild3DMipmapLevels: function(target: GLenum; internalFormat: GLint; width: GLsizei; height: GLsizei; depth: GLsizei; format: GLenum; type_: GLenum; level: GLint; base: GLint; max: GLint; data: Pointer): GLint; cdecl;
  gluBuild3DMipmapLevelsCTX: function(ctx: Pstruct _CGLContextObject; target: GLenum; internalFormat: GLint; width: GLsizei; height: GLsizei; depth: GLsizei; format: GLenum; type_: GLenum; level: GLint; base: GLint; max: GLint; data: Pointer): GLint; cdecl;
  gluBuild3DMipmaps: function(target: GLenum; internalFormat: GLint; width: GLsizei; height: GLsizei; depth: GLsizei; format: GLenum; type_: GLenum; data: Pointer): GLint; cdecl;
  gluBuild3DMipmapsCTX: function(ctx: Pstruct _CGLContextObject; target: GLenum; internalFormat: GLint; width: GLsizei; height: GLsizei; depth: GLsizei; format: GLenum; type_: GLenum; data: Pointer): GLint; cdecl;
}
  gluCheckExtension: function(extName: PGLubyte; extString: PGLubyte): GLboolean; cdecl;
{
  gluCylinder: procedure(quad: PGLUquadric; base: GLdouble; top: GLdouble; height: GLdouble; slices: GLint; stacks: GLint); cdecl;
  gluDeleteNurbsRenderer: procedure(nurb: PGLUnurbs); cdecl;
  gluDeleteQuadric: procedure(quad: PGLUquadric); cdecl;
  gluDeleteTess: procedure(tess: PGLUtesselator); cdecl;
  gluDisk: procedure(quad: PGLUquadric; inner: GLdouble; outer: GLdouble; slices: GLint; loops: GLint); cdecl;
  gluEndCurve: procedure(nurb: PGLUnurbs); cdecl;
  gluEndPolygon: procedure(tess: PGLUtesselator); cdecl;
  gluEndSurface: procedure(nurb: PGLUnurbs); cdecl;
  gluEndTrim: procedure(nurb: PGLUnurbs); cdecl;
  gluErrorString: function(error: GLenum): PGLubyte; cdecl;
  gluGetNurbsProperty: procedure(nurb: PGLUnurbs; property_: GLenum; data: PGLfloat); cdecl;
}
  gluGetString: function(name: GLenum): PGLubyte; cdecl;
{
  gluGetTessProperty: procedure(tess: PGLUtesselator; which: GLenum; data: PGLdouble); cdecl;
  gluLoadSamplingMatrices: procedure(nurb: PGLUnurbs; model: PGLfloat; perspective: PGLfloat; view: PGLint); cdecl;
  gluLookAt: procedure(eyeX: GLdouble; eyeY: GLdouble; eyeZ: GLdouble; centerX: GLdouble; centerY: GLdouble; centerZ: GLdouble; upX: GLdouble; upY: GLdouble; upZ: GLdouble); cdecl;
  gluLookAtCTX: procedure(ctx: Pstruct _CGLContextObject; eyeX: GLdouble; eyeY: GLdouble; eyeZ: GLdouble; centerX: GLdouble; centerY: GLdouble; centerZ: GLdouble; upX: GLdouble; upY: GLdouble; upZ: GLdouble); cdecl;
  gluNewNurbsRenderer: function: PGLUnurbs; cdecl;
  gluNewNurbsRendererCTX: function(ctx: Pstruct _CGLContextObject): PGLUnurbs; cdecl;
  gluNewQuadric: function: PGLUquadric; cdecl;
  gluNewQuadricCTX: function(ctx: Pstruct _CGLContextObject): PGLUquadric; cdecl;
  gluNewTess: function: PGLUtesselator; cdecl;
  gluNewTessCTX: function(ctx: Pstruct _CGLContextObject): PGLUtesselator; cdecl;
  gluNextContour: procedure(tess: PGLUtesselator; type_: GLenum); cdecl;
  gluNurbsCallbackData: procedure(nurb: PGLUnurbs; userData: PGLvoid); cdecl;
  gluNurbsCallbackDataEXT: procedure(nurb: PGLUnurbs; userData: PGLvoid); cdecl;
  gluNurbsCurve: procedure(nurb: PGLUnurbs; knotCount: GLint; knots: PGLfloat; stride: GLint; control: PGLfloat; order: GLint; type_: GLenum); cdecl;
  gluNurbsProperty: procedure(nurb: PGLUnurbs; property_: GLenum; value: GLfloat); cdecl;
  gluNurbsSurface: procedure(nurb: PGLUnurbs; sKnotCount: GLint; sKnots: PGLfloat; tKnotCount: GLint; tKnots: PGLfloat; sStride: GLint; tStride: GLint; control: PGLfloat; sOrder: GLint; tOrder: GLint; type_: GLenum); cdecl;
  gluOrtho2D: procedure(left: GLdouble; right: GLdouble; bottom: GLdouble; top: GLdouble); cdecl;
  gluOrtho2DCTX: procedure(ctx: Pstruct _CGLContextObject; left: GLdouble; right: GLdouble; bottom: GLdouble; top: GLdouble); cdecl;
  gluPartialDisk: procedure(quad: PGLUquadric; inner: GLdouble; outer: GLdouble; slices: GLint; loops: GLint; start: GLdouble; sweep: GLdouble); cdecl;
  gluPerspective: procedure(fovy: GLdouble; aspect: GLdouble; zNear: GLdouble; zFar: GLdouble); cdecl;
  gluPerspectiveCTX: procedure(ctx: Pstruct _CGLContextObject; fovy: GLdouble; aspect: GLdouble; zNear: GLdouble; zFar: GLdouble); cdecl;
  gluPickMatrix: procedure(x: GLdouble; y: GLdouble; delX: GLdouble; delY: GLdouble; viewport: PGLint); cdecl;
  gluPickMatrixCTX: procedure(ctx: Pstruct _CGLContextObject; x: GLdouble; y: GLdouble; delX: GLdouble; delY: GLdouble; viewport: PGLint); cdecl;
  gluProject: function(objX: GLdouble; objY: GLdouble; objZ: GLdouble; model: PGLdouble; proj: PGLdouble; view: PGLint; winX: PGLdouble; winY: PGLdouble; winZ: PGLdouble): GLint; cdecl;
  gluPwlCurve: procedure(nurb: PGLUnurbs; count: GLint; data: PGLfloat; stride: GLint; type_: GLenum); cdecl;
  gluQuadricDrawStyle: procedure(quad: PGLUquadric; draw: GLenum); cdecl;
  gluQuadricNormals: procedure(quad: PGLUquadric; normal: GLenum); cdecl;
  gluQuadricOrientation: procedure(quad: PGLUquadric; orientation: GLenum); cdecl;
  gluQuadricTexture: procedure(quad: PGLUquadric; texture: GLboolean); cdecl;
  gluScaleImage: function(format: GLenum; wIn: GLsizei; hIn: GLsizei; typeIn: GLenum; dataIn: Pointer; wOut: GLsizei; hOut: GLsizei; typeOut: GLenum; dataOut: PGLvoid): GLint; cdecl;
  gluScaleImageCTX: function(ctx: Pstruct _CGLContextObject; format: GLenum; wIn: GLsizei; hIn: GLsizei; typeIn: GLenum; dataIn: Pointer; wOut: GLsizei; hOut: GLsizei; typeOut: GLenum; dataOut: Pointer): GLint; cdecl;
  gluSphere: procedure(quad: PGLUquadric; radius: GLdouble; slices: GLint; stacks: GLint); cdecl;
  gluTessBeginContour: procedure(tess: PGLUtesselator); cdecl;
  gluTessBeginPolygon: procedure(tess: PGLUtesselator; data: PGLvoid); cdecl;
  gluTessEndContour: procedure(tess: PGLUtesselator); cdecl;
  gluTessEndPolygon: procedure(tess: PGLUtesselator); cdecl;
  gluTessNormal: procedure(tess: PGLUtesselator; valueX: GLdouble; valueY: GLdouble; valueZ: GLdouble); cdecl;
  gluTessProperty: procedure(tess: PGLUtesselator; which: GLenum; data: GLdouble); cdecl;
  gluTessVertex: procedure(tess: PGLUtesselator; location: PGLdouble; data: PGLvoid); cdecl;
  gluUnProject: function(winX: GLdouble; winY: GLdouble; winZ: GLdouble; model: PGLdouble; proj: PGLdouble; view: PGLint; objX: PGLdouble; objY: PGLdouble; objZ: PGLdouble): GLint; cdecl;
  gluUnProject4: function(winX: GLdouble; winY: GLdouble; winZ: GLdouble; clipW: GLdouble; model: PGLdouble; proj: PGLdouble; view: PGLint; nearPlane: GLdouble; farPlane: GLdouble; objX: PGLdouble; objY: PGLdouble; objZ: PGLdouble; objW: PGLdouble): GLint; cdecl;
}

function InitOpenGL: HMODULE;

implementation

uses System.SysUtils;

function InitOpenGL: HMODULE;
begin
  Result := LoadLibrary('/System/Library/Frameworks/OpenGL.framework/OpenGL');
  if Result > 0 then
  begin
    @CGLChoosePixelFormat := GetProcAddress(Result, 'CGLChoosePixelFormat');
    @CGLClearDrawable := GetProcAddress(Result, 'CGLClearDrawable');
    @CGLCopyContext := GetProcAddress(Result, 'CGLCopyContext');
    @CGLCreateContext := GetProcAddress(Result, 'CGLCreateContext');
    @CGLCreatePBuffer := GetProcAddress(Result, 'CGLCreatePBuffer');
    @CGLDescribePBuffer := GetProcAddress(Result, 'CGLDescribePBuffer');
    @CGLDescribePixelFormat := GetProcAddress(Result, 'CGLDescribePixelFormat');
    @CGLDescribeRenderer := GetProcAddress(Result, 'CGLDescribeRenderer');
    @CGLDestroyContext := GetProcAddress(Result, 'CGLDestroyContext');
    @CGLDestroyPBuffer := GetProcAddress(Result, 'CGLDestroyPBuffer');
    @CGLDestroyPixelFormat := GetProcAddress(Result, 'CGLDestroyPixelFormat');
    @CGLDestroyRendererInfo := GetProcAddress(Result, 'CGLDestroyRendererInfo');
    @CGLDisable := GetProcAddress(Result, 'CGLDisable');
    @CGLEnable := GetProcAddress(Result, 'CGLEnable');
    @CGLErrorString := GetProcAddress(Result, 'CGLErrorString');
    @CGLFlushDrawable := GetProcAddress(Result, 'CGLFlushDrawable');
    @CGLGetContextRetainCount := GetProcAddress(Result, 'CGLGetContextRetainCount');
    @CGLGetCurrentContext := GetProcAddress(Result, 'CGLGetCurrentContext');
    @CGLGetGlobalOption := GetProcAddress(Result, 'CGLGetGlobalOption');
    @CGLGetOffScreen := GetProcAddress(Result, 'CGLGetOffScreen');
    @CGLGetOption := GetProcAddress(Result, 'CGLGetOption');
    @CGLGetPBuffer := GetProcAddress(Result, 'CGLGetPBuffer');
    @CGLGetPBufferRetainCount := GetProcAddress(Result, 'CGLGetPBufferRetainCount');
    @CGLGetParameter := GetProcAddress(Result, 'CGLGetParameter');
    @CGLGetPixelFormat := GetProcAddress(Result, 'CGLGetPixelFormat');
    @CGLGetPixelFormatRetainCount := GetProcAddress(Result, 'CGLGetPixelFormatRetainCount');
    @CGLGetShareGroup := GetProcAddress(Result, 'CGLGetShareGroup');
    @CGLGetVersion := GetProcAddress(Result, 'CGLGetVersion');
    @CGLGetVirtualScreen := GetProcAddress(Result, 'CGLGetVirtualScreen');
    @CGLIsEnabled := GetProcAddress(Result, 'CGLIsEnabled');
    @CGLLockContext := GetProcAddress(Result, 'CGLLockContext');
    @CGLQueryRendererInfo := GetProcAddress(Result, 'CGLQueryRendererInfo');
    @CGLReleaseContext := GetProcAddress(Result, 'CGLReleaseContext');
    @CGLReleasePBuffer := GetProcAddress(Result, 'CGLReleasePBuffer');
    @CGLReleasePixelFormat := GetProcAddress(Result, 'CGLReleasePixelFormat');
    @CGLRetainContext := GetProcAddress(Result, 'CGLRetainContext');
    @CGLRetainPBuffer := GetProcAddress(Result, 'CGLRetainPBuffer');
    @CGLRetainPixelFormat := GetProcAddress(Result, 'CGLRetainPixelFormat');
    @CGLSetCurrentContext := GetProcAddress(Result, 'CGLSetCurrentContext');
    @CGLSetFullScreen := GetProcAddress(Result, 'CGLSetFullScreen');
    @CGLSetFullScreenOnDisplay := GetProcAddress(Result, 'CGLSetFullScreenOnDisplay');
    @CGLSetGlobalOption := GetProcAddress(Result, 'CGLSetGlobalOption');
    @CGLSetOffScreen := GetProcAddress(Result, 'CGLSetOffScreen');
    @CGLSetOption := GetProcAddress(Result, 'CGLSetOption');
    @CGLSetPBuffer := GetProcAddress(Result, 'CGLSetPBuffer');
    @CGLSetParameter := GetProcAddress(Result, 'CGLSetParameter');
    @CGLSetVirtualScreen := GetProcAddress(Result, 'CGLSetVirtualScreen');
    @CGLTexImageIOSurface2D := GetProcAddress(Result, 'CGLTexImageIOSurface2D');
    @CGLTexImagePBuffer := GetProcAddress(Result, 'CGLTexImagePBuffer');
    @CGLUnlockContext := GetProcAddress(Result, 'CGLUnlockContext');
    @glAccum := GetProcAddress(Result, 'glAccum');
    @glActiveStencilFaceEXT := GetProcAddress(Result, 'glActiveStencilFaceEXT');
    @glActiveTexture := GetProcAddress(Result, 'glActiveTexture');
    @glAlphaFunc := GetProcAddress(Result, 'glAlphaFunc');
    @glAreTexturesResident := GetProcAddress(Result, 'glAreTexturesResident');
    @glArrayElement := GetProcAddress(Result, 'glArrayElement');
    @glAttachObjectARB := GetProcAddress(Result, 'glAttachObjectARB');
    @glAttachShader := GetProcAddress(Result, 'glAttachShader');
    @glBegin := GetProcAddress(Result, 'glBegin');
    @glBeginConditionalRenderNV := GetProcAddress(Result, 'glBeginConditionalRenderNV');
    @glBeginQuery := GetProcAddress(Result, 'glBeginQuery');
    @glBeginQueryARB := GetProcAddress(Result, 'glBeginQueryARB');
    @glBeginTransformFeedbackEXT := GetProcAddress(Result, 'glBeginTransformFeedbackEXT');
    @glBindAttribLocation := GetProcAddress(Result, 'glBindAttribLocation');
    @glBindAttribLocationARB := GetProcAddress(Result, 'glBindAttribLocationARB');
    @glBindBuffer := GetProcAddress(Result, 'glBindBuffer');
    @glBindBufferARB := GetProcAddress(Result, 'glBindBufferARB');
    @glBindBufferBase := GetProcAddress(Result, 'glBindBufferBase');
    @glBindBufferBaseEXT := GetProcAddress(Result, 'glBindBufferBaseEXT');
    @glBindBufferOffsetEXT := GetProcAddress(Result, 'glBindBufferOffsetEXT');
    @glBindBufferRange := GetProcAddress(Result, 'glBindBufferRange');
    @glBindBufferRangeEXT := GetProcAddress(Result, 'glBindBufferRangeEXT');
    @glBindFragDataLocationEXT := GetProcAddress(Result, 'glBindFragDataLocationEXT');
    @glBindFramebufferEXT := GetProcAddress(Result, 'glBindFramebufferEXT');
    @glBindProgramARB := GetProcAddress(Result, 'glBindProgramARB');
    @glBindRenderbufferEXT := GetProcAddress(Result, 'glBindRenderbufferEXT');
    @glBindTexture := GetProcAddress(Result, 'glBindTexture');
    @glBindVertexArrayAPPLE := GetProcAddress(Result, 'glBindVertexArrayAPPLE');
    @glBitmap := GetProcAddress(Result, 'glBitmap');
    @glBlendColor := GetProcAddress(Result, 'glBlendColor');
    @glBlendEquation := GetProcAddress(Result, 'glBlendEquation');
    @glBlendEquationSeparate := GetProcAddress(Result, 'glBlendEquationSeparate');
    @glBlendEquationSeparateATI := GetProcAddress(Result, 'glBlendEquationSeparateATI');
    @glBlendEquationSeparateEXT := GetProcAddress(Result, 'glBlendEquationSeparateEXT');
    @glBlendFunc := GetProcAddress(Result, 'glBlendFunc');
    @glBlendFuncSeparate := GetProcAddress(Result, 'glBlendFuncSeparate');
    @glBlitFramebufferEXT := GetProcAddress(Result, 'glBlitFramebufferEXT');
    @glBufferData := GetProcAddress(Result, 'glBufferData');
    @glBufferDataARB := GetProcAddress(Result, 'glBufferDataARB');
    @glBufferParameteriAPPLE := GetProcAddress(Result, 'glBufferParameteriAPPLE');
    @glBufferSubData := GetProcAddress(Result, 'glBufferSubData');
    @glBufferSubDataARB := GetProcAddress(Result, 'glBufferSubDataARB');
    @glCallList := GetProcAddress(Result, 'glCallList');
    @glCallLists := GetProcAddress(Result, 'glCallLists');
    @glCheckFramebufferStatusEXT := GetProcAddress(Result, 'glCheckFramebufferStatusEXT');
    @glClampColorARB := GetProcAddress(Result, 'glClampColorARB');
    @glClear := GetProcAddress(Result, 'glClear');
    @glClearAccum := GetProcAddress(Result, 'glClearAccum');
    @glClearColor := GetProcAddress(Result, 'glClearColor');
    @glClearColorIiEXT := GetProcAddress(Result, 'glClearColorIiEXT');
    @glClearColorIuiEXT := GetProcAddress(Result, 'glClearColorIuiEXT');
    @glClearDepth := GetProcAddress(Result, 'glClearDepth');
    @glClearIndex := GetProcAddress(Result, 'glClearIndex');
    @glClearStencil := GetProcAddress(Result, 'glClearStencil');
    @glClientActiveTexture := GetProcAddress(Result, 'glClientActiveTexture');
    @glClipPlane := GetProcAddress(Result, 'glClipPlane');
    @glColor3b := GetProcAddress(Result, 'glColor3b');
    @glColor3bv := GetProcAddress(Result, 'glColor3bv');
    @glColor3d := GetProcAddress(Result, 'glColor3d');
    @glColor3dv := GetProcAddress(Result, 'glColor3dv');
    @glColor3f := GetProcAddress(Result, 'glColor3f');
    @glColor3fv := GetProcAddress(Result, 'glColor3fv');
    @glColor3i := GetProcAddress(Result, 'glColor3i');
    @glColor3iv := GetProcAddress(Result, 'glColor3iv');
    @glColor3s := GetProcAddress(Result, 'glColor3s');
    @glColor3sv := GetProcAddress(Result, 'glColor3sv');
    @glColor3ub := GetProcAddress(Result, 'glColor3ub');
    @glColor3ubv := GetProcAddress(Result, 'glColor3ubv');
    @glColor3ui := GetProcAddress(Result, 'glColor3ui');
    @glColor3uiv := GetProcAddress(Result, 'glColor3uiv');
    @glColor3us := GetProcAddress(Result, 'glColor3us');
    @glColor3usv := GetProcAddress(Result, 'glColor3usv');
    @glColor4b := GetProcAddress(Result, 'glColor4b');
    @glColor4bv := GetProcAddress(Result, 'glColor4bv');
    @glColor4d := GetProcAddress(Result, 'glColor4d');
    @glColor4dv := GetProcAddress(Result, 'glColor4dv');
    @glColor4f := GetProcAddress(Result, 'glColor4f');
    @glColor4fv := GetProcAddress(Result, 'glColor4fv');
    @glColor4i := GetProcAddress(Result, 'glColor4i');
    @glColor4iv := GetProcAddress(Result, 'glColor4iv');
    @glColor4s := GetProcAddress(Result, 'glColor4s');
    @glColor4sv := GetProcAddress(Result, 'glColor4sv');
    @glColor4ub := GetProcAddress(Result, 'glColor4ub');
    @glColor4ubv := GetProcAddress(Result, 'glColor4ubv');
    @glColor4ui := GetProcAddress(Result, 'glColor4ui');
    @glColor4uiv := GetProcAddress(Result, 'glColor4uiv');
    @glColor4us := GetProcAddress(Result, 'glColor4us');
    @glColor4usv := GetProcAddress(Result, 'glColor4usv');
    @glColorMask := GetProcAddress(Result, 'glColorMask');
    @glColorMaskIndexedEXT := GetProcAddress(Result, 'glColorMaskIndexedEXT');
    @glColorMaterial := GetProcAddress(Result, 'glColorMaterial');
    @glColorPointer := GetProcAddress(Result, 'glColorPointer');
    @glColorSubTable := GetProcAddress(Result, 'glColorSubTable');
    @glColorTable := GetProcAddress(Result, 'glColorTable');
    @glColorTableParameterfv := GetProcAddress(Result, 'glColorTableParameterfv');
    @glColorTableParameteriv := GetProcAddress(Result, 'glColorTableParameteriv');
    @glCompileShader := GetProcAddress(Result, 'glCompileShader');
    @glCompileShaderARB := GetProcAddress(Result, 'glCompileShaderARB');
    @glCompressedTexImage1D := GetProcAddress(Result, 'glCompressedTexImage1D');
    @glCompressedTexImage2D := GetProcAddress(Result, 'glCompressedTexImage2D');
    @glCompressedTexImage3D := GetProcAddress(Result, 'glCompressedTexImage3D');
    @glCompressedTexSubImage1D := GetProcAddress(Result, 'glCompressedTexSubImage1D');
    @glCompressedTexSubImage2D := GetProcAddress(Result, 'glCompressedTexSubImage2D');
    @glCompressedTexSubImage3D := GetProcAddress(Result, 'glCompressedTexSubImage3D');
    @glConvolutionFilter1D := GetProcAddress(Result, 'glConvolutionFilter1D');
    @glConvolutionFilter2D := GetProcAddress(Result, 'glConvolutionFilter2D');
    @glConvolutionParameterf := GetProcAddress(Result, 'glConvolutionParameterf');
    @glConvolutionParameterfv := GetProcAddress(Result, 'glConvolutionParameterfv');
    @glConvolutionParameteri := GetProcAddress(Result, 'glConvolutionParameteri');
    @glConvolutionParameteriv := GetProcAddress(Result, 'glConvolutionParameteriv');
    @glCopyColorSubTable := GetProcAddress(Result, 'glCopyColorSubTable');
    @glCopyColorTable := GetProcAddress(Result, 'glCopyColorTable');
    @glCopyConvolutionFilter1D := GetProcAddress(Result, 'glCopyConvolutionFilter1D');
    @glCopyConvolutionFilter2D := GetProcAddress(Result, 'glCopyConvolutionFilter2D');
    @glCopyPixels := GetProcAddress(Result, 'glCopyPixels');
    @glCopyTexImage1D := GetProcAddress(Result, 'glCopyTexImage1D');
    @glCopyTexImage2D := GetProcAddress(Result, 'glCopyTexImage2D');
    @glCopyTexSubImage1D := GetProcAddress(Result, 'glCopyTexSubImage1D');
    @glCopyTexSubImage2D := GetProcAddress(Result, 'glCopyTexSubImage2D');
    @glCopyTexSubImage3D := GetProcAddress(Result, 'glCopyTexSubImage3D');
    @glCreateProgram := GetProcAddress(Result, 'glCreateProgram');
    @glCreateProgramObjectARB := GetProcAddress(Result, 'glCreateProgramObjectARB');
    @glCreateShader := GetProcAddress(Result, 'glCreateShader');
    @glCreateShaderObjectARB := GetProcAddress(Result, 'glCreateShaderObjectARB');
    @glCullFace := GetProcAddress(Result, 'glCullFace');
    @glDeleteBuffers := GetProcAddress(Result, 'glDeleteBuffers');
    @glDeleteBuffersARB := GetProcAddress(Result, 'glDeleteBuffersARB');
    @glDeleteFencesAPPLE := GetProcAddress(Result, 'glDeleteFencesAPPLE');
    @glDeleteFramebuffersEXT := GetProcAddress(Result, 'glDeleteFramebuffersEXT');
    @glDeleteLists := GetProcAddress(Result, 'glDeleteLists');
    @glDeleteObjectARB := GetProcAddress(Result, 'glDeleteObjectARB');
    @glDeleteProgram := GetProcAddress(Result, 'glDeleteProgram');
    @glDeleteProgramsARB := GetProcAddress(Result, 'glDeleteProgramsARB');
    @glDeleteQueries := GetProcAddress(Result, 'glDeleteQueries');
    @glDeleteQueriesARB := GetProcAddress(Result, 'glDeleteQueriesARB');
    @glDeleteRenderbuffersEXT := GetProcAddress(Result, 'glDeleteRenderbuffersEXT');
    @glDeleteShader := GetProcAddress(Result, 'glDeleteShader');
    @glDeleteTextures := GetProcAddress(Result, 'glDeleteTextures');
    @glDeleteVertexArraysAPPLE := GetProcAddress(Result, 'glDeleteVertexArraysAPPLE');
    @glDepthBoundsEXT := GetProcAddress(Result, 'glDepthBoundsEXT');
    @glDepthFunc := GetProcAddress(Result, 'glDepthFunc');
    @glDepthMask := GetProcAddress(Result, 'glDepthMask');
    @glDepthRange := GetProcAddress(Result, 'glDepthRange');
    @glDetachObjectARB := GetProcAddress(Result, 'glDetachObjectARB');
    @glDetachShader := GetProcAddress(Result, 'glDetachShader');
    @glDisable := GetProcAddress(Result, 'glDisable');
    @glDisableClientState := GetProcAddress(Result, 'glDisableClientState');
    @glDisableIndexedEXT := GetProcAddress(Result, 'glDisableIndexedEXT');
    @glDisableVertexAttribAPPLE := GetProcAddress(Result, 'glDisableVertexAttribAPPLE');
    @glDisableVertexAttribArray := GetProcAddress(Result, 'glDisableVertexAttribArray');
    @glDisableVertexAttribArrayARB := GetProcAddress(Result, 'glDisableVertexAttribArrayARB');
    @glDrawArrays := GetProcAddress(Result, 'glDrawArrays');
    @glDrawArraysInstancedARB := GetProcAddress(Result, 'glDrawArraysInstancedARB');
    @glDrawBuffer := GetProcAddress(Result, 'glDrawBuffer');
    @glDrawBuffers := GetProcAddress(Result, 'glDrawBuffers');
    @glDrawBuffersARB := GetProcAddress(Result, 'glDrawBuffersARB');
    @glDrawElementArrayAPPLE := GetProcAddress(Result, 'glDrawElementArrayAPPLE');
    @glDrawElements := GetProcAddress(Result, 'glDrawElements');
    @glDrawElementsInstancedARB := GetProcAddress(Result, 'glDrawElementsInstancedARB');
    @glDrawPixels := GetProcAddress(Result, 'glDrawPixels');
    @glDrawRangeElementArrayAPPLE := GetProcAddress(Result, 'glDrawRangeElementArrayAPPLE');
    @glDrawRangeElements := GetProcAddress(Result, 'glDrawRangeElements');
    @glEdgeFlag := GetProcAddress(Result, 'glEdgeFlag');
    @glEdgeFlagPointer := GetProcAddress(Result, 'glEdgeFlagPointer');
    @glEdgeFlagv := GetProcAddress(Result, 'glEdgeFlagv');
    @glElementPointerAPPLE := GetProcAddress(Result, 'glElementPointerAPPLE');
    @glEnable := GetProcAddress(Result, 'glEnable');
    @glEnableClientState := GetProcAddress(Result, 'glEnableClientState');
    @glEnableIndexedEXT := GetProcAddress(Result, 'glEnableIndexedEXT');
    @glEnableVertexAttribAPPLE := GetProcAddress(Result, 'glEnableVertexAttribAPPLE');
    @glEnableVertexAttribArray := GetProcAddress(Result, 'glEnableVertexAttribArray');
    @glEnableVertexAttribArrayARB := GetProcAddress(Result, 'glEnableVertexAttribArrayARB');
    @glEnd := GetProcAddress(Result, 'glEnd');
    @glEndConditionalRenderNV := GetProcAddress(Result, 'glEndConditionalRenderNV');
    @glEndList := GetProcAddress(Result, 'glEndList');
    @glEndQuery := GetProcAddress(Result, 'glEndQuery');
    @glEndQueryARB := GetProcAddress(Result, 'glEndQueryARB');
    @glEndTransformFeedbackEXT := GetProcAddress(Result, 'glEndTransformFeedbackEXT');
    @glEvalCoord1d := GetProcAddress(Result, 'glEvalCoord1d');
    @glEvalCoord1dv := GetProcAddress(Result, 'glEvalCoord1dv');
    @glEvalCoord1f := GetProcAddress(Result, 'glEvalCoord1f');
    @glEvalCoord1fv := GetProcAddress(Result, 'glEvalCoord1fv');
    @glEvalCoord2d := GetProcAddress(Result, 'glEvalCoord2d');
    @glEvalCoord2dv := GetProcAddress(Result, 'glEvalCoord2dv');
    @glEvalCoord2f := GetProcAddress(Result, 'glEvalCoord2f');
    @glEvalCoord2fv := GetProcAddress(Result, 'glEvalCoord2fv');
    @glEvalMesh1 := GetProcAddress(Result, 'glEvalMesh1');
    @glEvalMesh2 := GetProcAddress(Result, 'glEvalMesh2');
    @glEvalPoint1 := GetProcAddress(Result, 'glEvalPoint1');
    @glEvalPoint2 := GetProcAddress(Result, 'glEvalPoint2');
    @glFeedbackBuffer := GetProcAddress(Result, 'glFeedbackBuffer');
    @glFinish := GetProcAddress(Result, 'glFinish');
    @glFinishFenceAPPLE := GetProcAddress(Result, 'glFinishFenceAPPLE');
    @glFinishObjectAPPLE := GetProcAddress(Result, 'glFinishObjectAPPLE');
    @glFinishRenderAPPLE := GetProcAddress(Result, 'glFinishRenderAPPLE');
    @glFlush := GetProcAddress(Result, 'glFlush');
    @glFlushMappedBufferRangeAPPLE := GetProcAddress(Result, 'glFlushMappedBufferRangeAPPLE');
    @glFlushRenderAPPLE := GetProcAddress(Result, 'glFlushRenderAPPLE');
    @glFlushVertexArrayRangeAPPLE := GetProcAddress(Result, 'glFlushVertexArrayRangeAPPLE');
    @glFogCoordPointer := GetProcAddress(Result, 'glFogCoordPointer');
    @glFogCoordd := GetProcAddress(Result, 'glFogCoordd');
    @glFogCoorddv := GetProcAddress(Result, 'glFogCoorddv');
    @glFogCoordf := GetProcAddress(Result, 'glFogCoordf');
    @glFogCoordfv := GetProcAddress(Result, 'glFogCoordfv');
    @glFogf := GetProcAddress(Result, 'glFogf');
    @glFogfv := GetProcAddress(Result, 'glFogfv');
    @glFogi := GetProcAddress(Result, 'glFogi');
    @glFogiv := GetProcAddress(Result, 'glFogiv');
    @glFramebufferRenderbufferEXT := GetProcAddress(Result, 'glFramebufferRenderbufferEXT');
    @glFramebufferTexture1DEXT := GetProcAddress(Result, 'glFramebufferTexture1DEXT');
    @glFramebufferTexture2DEXT := GetProcAddress(Result, 'glFramebufferTexture2DEXT');
    @glFramebufferTexture3DEXT := GetProcAddress(Result, 'glFramebufferTexture3DEXT');
    @glFramebufferTextureEXT := GetProcAddress(Result, 'glFramebufferTextureEXT');
    @glFramebufferTextureFaceEXT := GetProcAddress(Result, 'glFramebufferTextureFaceEXT');
    @glFramebufferTextureLayerEXT := GetProcAddress(Result, 'glFramebufferTextureLayerEXT');
    @glFrontFace := GetProcAddress(Result, 'glFrontFace');
    @glFrustum := GetProcAddress(Result, 'glFrustum');
    @glGenBuffers := GetProcAddress(Result, 'glGenBuffers');
    @glGenBuffersARB := GetProcAddress(Result, 'glGenBuffersARB');
    @glGenFencesAPPLE := GetProcAddress(Result, 'glGenFencesAPPLE');
    @glGenFramebuffersEXT := GetProcAddress(Result, 'glGenFramebuffersEXT');
    @glGenLists := GetProcAddress(Result, 'glGenLists');
    @glGenProgramsARB := GetProcAddress(Result, 'glGenProgramsARB');
    @glGenQueries := GetProcAddress(Result, 'glGenQueries');
    @glGenQueriesARB := GetProcAddress(Result, 'glGenQueriesARB');
    @glGenRenderbuffersEXT := GetProcAddress(Result, 'glGenRenderbuffersEXT');
    @glGenTextures := GetProcAddress(Result, 'glGenTextures');
    @glGenVertexArraysAPPLE := GetProcAddress(Result, 'glGenVertexArraysAPPLE');
    @glGenerateMipmapEXT := GetProcAddress(Result, 'glGenerateMipmapEXT');
    @glGetActiveAttrib := GetProcAddress(Result, 'glGetActiveAttrib');
    @glGetActiveAttribARB := GetProcAddress(Result, 'glGetActiveAttribARB');
    @glGetActiveUniform := GetProcAddress(Result, 'glGetActiveUniform');
    @glGetActiveUniformARB := GetProcAddress(Result, 'glGetActiveUniformARB');
    @glGetActiveUniformBlockName := GetProcAddress(Result, 'glGetActiveUniformBlockName');
    @glGetActiveUniformBlockiv := GetProcAddress(Result, 'glGetActiveUniformBlockiv');
    @glGetActiveUniformName := GetProcAddress(Result, 'glGetActiveUniformName');
    @glGetActiveUniformsiv := GetProcAddress(Result, 'glGetActiveUniformsiv');
    @glGetAttachedObjectsARB := GetProcAddress(Result, 'glGetAttachedObjectsARB');
    @glGetAttachedShaders := GetProcAddress(Result, 'glGetAttachedShaders');
    @glGetAttribLocation := GetProcAddress(Result, 'glGetAttribLocation');
    @glGetAttribLocationARB := GetProcAddress(Result, 'glGetAttribLocationARB');
    @glGetBooleanIndexedvEXT := GetProcAddress(Result, 'glGetBooleanIndexedvEXT');
    @glGetBooleanv := GetProcAddress(Result, 'glGetBooleanv');
    @glGetBufferParameteriv := GetProcAddress(Result, 'glGetBufferParameteriv');
    @glGetBufferParameterivARB := GetProcAddress(Result, 'glGetBufferParameterivARB');
    @glGetBufferPointerv := GetProcAddress(Result, 'glGetBufferPointerv');
    @glGetBufferPointervARB := GetProcAddress(Result, 'glGetBufferPointervARB');
    @glGetBufferSubData := GetProcAddress(Result, 'glGetBufferSubData');
    @glGetBufferSubDataARB := GetProcAddress(Result, 'glGetBufferSubDataARB');
    @glGetClipPlane := GetProcAddress(Result, 'glGetClipPlane');
    @glGetColorTable := GetProcAddress(Result, 'glGetColorTable');
    @glGetColorTableParameterfv := GetProcAddress(Result, 'glGetColorTableParameterfv');
    @glGetColorTableParameteriv := GetProcAddress(Result, 'glGetColorTableParameteriv');
    @glGetCompressedTexImage := GetProcAddress(Result, 'glGetCompressedTexImage');
    @glGetConvolutionFilter := GetProcAddress(Result, 'glGetConvolutionFilter');
    @glGetConvolutionParameterfv := GetProcAddress(Result, 'glGetConvolutionParameterfv');
    @glGetConvolutionParameteriv := GetProcAddress(Result, 'glGetConvolutionParameteriv');
    @glGetDoublev := GetProcAddress(Result, 'glGetDoublev');
    @glGetError := GetProcAddress(Result, 'glGetError');
    @glGetFloatv := GetProcAddress(Result, 'glGetFloatv');
    @glGetFragDataLocationEXT := GetProcAddress(Result, 'glGetFragDataLocationEXT');
    @glGetFramebufferAttachmentParameterivEXT := GetProcAddress(Result, 'glGetFramebufferAttachmentParameterivEXT');
    @glGetHandleARB := GetProcAddress(Result, 'glGetHandleARB');
    @glGetHistogram := GetProcAddress(Result, 'glGetHistogram');
    @glGetHistogramParameterfv := GetProcAddress(Result, 'glGetHistogramParameterfv');
    @glGetHistogramParameteriv := GetProcAddress(Result, 'glGetHistogramParameteriv');
    @glGetInfoLogARB := GetProcAddress(Result, 'glGetInfoLogARB');
    @glGetIntegerIndexedvEXT := GetProcAddress(Result, 'glGetIntegerIndexedvEXT');
    @glGetIntegeri_v := GetProcAddress(Result, 'glGetIntegeri_v');
    @glGetIntegerv := GetProcAddress(Result, 'glGetIntegerv');
    @glGetLightfv := GetProcAddress(Result, 'glGetLightfv');
    @glGetLightiv := GetProcAddress(Result, 'glGetLightiv');
    @glGetMapdv := GetProcAddress(Result, 'glGetMapdv');
    @glGetMapfv := GetProcAddress(Result, 'glGetMapfv');
    @glGetMapiv := GetProcAddress(Result, 'glGetMapiv');
    @glGetMaterialfv := GetProcAddress(Result, 'glGetMaterialfv');
    @glGetMaterialiv := GetProcAddress(Result, 'glGetMaterialiv');
    @glGetMinmax := GetProcAddress(Result, 'glGetMinmax');
    @glGetMinmaxParameterfv := GetProcAddress(Result, 'glGetMinmaxParameterfv');
    @glGetMinmaxParameteriv := GetProcAddress(Result, 'glGetMinmaxParameteriv');
    @glGetObjectParameterfvARB := GetProcAddress(Result, 'glGetObjectParameterfvARB');
    @glGetObjectParameterivAPPLE := GetProcAddress(Result, 'glGetObjectParameterivAPPLE');
    @glGetObjectParameterivARB := GetProcAddress(Result, 'glGetObjectParameterivARB');
    @glGetPixelMapfv := GetProcAddress(Result, 'glGetPixelMapfv');
    @glGetPixelMapuiv := GetProcAddress(Result, 'glGetPixelMapuiv');
    @glGetPixelMapusv := GetProcAddress(Result, 'glGetPixelMapusv');
    @glGetPointerv := GetProcAddress(Result, 'glGetPointerv');
    @glGetPolygonStipple := GetProcAddress(Result, 'glGetPolygonStipple');
    @glGetProgramEnvParameterdvARB := GetProcAddress(Result, 'glGetProgramEnvParameterdvARB');
    @glGetProgramEnvParameterfvARB := GetProcAddress(Result, 'glGetProgramEnvParameterfvARB');
    @glGetProgramInfoLog := GetProcAddress(Result, 'glGetProgramInfoLog');
    @glGetProgramLocalParameterdvARB := GetProcAddress(Result, 'glGetProgramLocalParameterdvARB');
    @glGetProgramLocalParameterfvARB := GetProcAddress(Result, 'glGetProgramLocalParameterfvARB');
    @glGetProgramStringARB := GetProcAddress(Result, 'glGetProgramStringARB');
    @glGetProgramiv := GetProcAddress(Result, 'glGetProgramiv');
    @glGetProgramivARB := GetProcAddress(Result, 'glGetProgramivARB');
    @glGetQueryObjectiv := GetProcAddress(Result, 'glGetQueryObjectiv');
    @glGetQueryObjectivARB := GetProcAddress(Result, 'glGetQueryObjectivARB');
    @glGetQueryObjectuiv := GetProcAddress(Result, 'glGetQueryObjectuiv');
    @glGetQueryObjectuivARB := GetProcAddress(Result, 'glGetQueryObjectuivARB');
    @glGetQueryiv := GetProcAddress(Result, 'glGetQueryiv');
    @glGetQueryivARB := GetProcAddress(Result, 'glGetQueryivARB');
    @glGetRenderbufferParameterivEXT := GetProcAddress(Result, 'glGetRenderbufferParameterivEXT');
    @glGetSeparableFilter := GetProcAddress(Result, 'glGetSeparableFilter');
    @glGetShaderInfoLog := GetProcAddress(Result, 'glGetShaderInfoLog');
    @glGetShaderSource := GetProcAddress(Result, 'glGetShaderSource');
    @glGetShaderSourceARB := GetProcAddress(Result, 'glGetShaderSourceARB');
    @glGetShaderiv := GetProcAddress(Result, 'glGetShaderiv');
    @glGetString := GetProcAddress(Result, 'glGetString');
    @glGetTexEnvfv := GetProcAddress(Result, 'glGetTexEnvfv');
    @glGetTexEnviv := GetProcAddress(Result, 'glGetTexEnviv');
    @glGetTexGendv := GetProcAddress(Result, 'glGetTexGendv');
    @glGetTexGenfv := GetProcAddress(Result, 'glGetTexGenfv');
    @glGetTexGeniv := GetProcAddress(Result, 'glGetTexGeniv');
    @glGetTexImage := GetProcAddress(Result, 'glGetTexImage');
    @glGetTexLevelParameterfv := GetProcAddress(Result, 'glGetTexLevelParameterfv');
    @glGetTexLevelParameteriv := GetProcAddress(Result, 'glGetTexLevelParameteriv');
    @glGetTexParameterIivEXT := GetProcAddress(Result, 'glGetTexParameterIivEXT');
    @glGetTexParameterIuivEXT := GetProcAddress(Result, 'glGetTexParameterIuivEXT');
    @glGetTexParameterPointervAPPLE := GetProcAddress(Result, 'glGetTexParameterPointervAPPLE');
    @glGetTexParameterfv := GetProcAddress(Result, 'glGetTexParameterfv');
    @glGetTexParameteriv := GetProcAddress(Result, 'glGetTexParameteriv');
    @glGetTransformFeedbackVaryingEXT := GetProcAddress(Result, 'glGetTransformFeedbackVaryingEXT');
    @glGetUniformBlockIndex := GetProcAddress(Result, 'glGetUniformBlockIndex');
    @glGetUniformBufferSizeEXT := GetProcAddress(Result, 'glGetUniformBufferSizeEXT');
    @glGetUniformIndices := GetProcAddress(Result, 'glGetUniformIndices');
    @glGetUniformLocation := GetProcAddress(Result, 'glGetUniformLocation');
    @glGetUniformLocationARB := GetProcAddress(Result, 'glGetUniformLocationARB');
    @glGetUniformOffsetEXT := GetProcAddress(Result, 'glGetUniformOffsetEXT');
    @glGetUniformfv := GetProcAddress(Result, 'glGetUniformfv');
    @glGetUniformfvARB := GetProcAddress(Result, 'glGetUniformfvARB');
    @glGetUniformiv := GetProcAddress(Result, 'glGetUniformiv');
    @glGetUniformivARB := GetProcAddress(Result, 'glGetUniformivARB');
    @glGetUniformuivEXT := GetProcAddress(Result, 'glGetUniformuivEXT');
    @glGetVertexAttribIivEXT := GetProcAddress(Result, 'glGetVertexAttribIivEXT');
    @glGetVertexAttribIuivEXT := GetProcAddress(Result, 'glGetVertexAttribIuivEXT');
    @glGetVertexAttribPointerv := GetProcAddress(Result, 'glGetVertexAttribPointerv');
    @glGetVertexAttribPointervARB := GetProcAddress(Result, 'glGetVertexAttribPointervARB');
    @glGetVertexAttribdv := GetProcAddress(Result, 'glGetVertexAttribdv');
    @glGetVertexAttribdvARB := GetProcAddress(Result, 'glGetVertexAttribdvARB');
    @glGetVertexAttribfv := GetProcAddress(Result, 'glGetVertexAttribfv');
    @glGetVertexAttribfvARB := GetProcAddress(Result, 'glGetVertexAttribfvARB');
    @glGetVertexAttribiv := GetProcAddress(Result, 'glGetVertexAttribiv');
    @glGetVertexAttribivARB := GetProcAddress(Result, 'glGetVertexAttribivARB');
    @glHint := GetProcAddress(Result, 'glHint');
    @glHistogram := GetProcAddress(Result, 'glHistogram');
    @glIndexMask := GetProcAddress(Result, 'glIndexMask');
    @glIndexPointer := GetProcAddress(Result, 'glIndexPointer');
    @glIndexd := GetProcAddress(Result, 'glIndexd');
    @glIndexdv := GetProcAddress(Result, 'glIndexdv');
    @glIndexf := GetProcAddress(Result, 'glIndexf');
    @glIndexfv := GetProcAddress(Result, 'glIndexfv');
    @glIndexi := GetProcAddress(Result, 'glIndexi');
    @glIndexiv := GetProcAddress(Result, 'glIndexiv');
    @glIndexs := GetProcAddress(Result, 'glIndexs');
    @glIndexsv := GetProcAddress(Result, 'glIndexsv');
    @glIndexub := GetProcAddress(Result, 'glIndexub');
    @glIndexubv := GetProcAddress(Result, 'glIndexubv');
    @glInitNames := GetProcAddress(Result, 'glInitNames');
    @glInterleavedArrays := GetProcAddress(Result, 'glInterleavedArrays');
    @glIsBuffer := GetProcAddress(Result, 'glIsBuffer');
    @glIsBufferARB := GetProcAddress(Result, 'glIsBufferARB');
    @glIsEnabled := GetProcAddress(Result, 'glIsEnabled');
    @glIsEnabledIndexedEXT := GetProcAddress(Result, 'glIsEnabledIndexedEXT');
    @glIsFenceAPPLE := GetProcAddress(Result, 'glIsFenceAPPLE');
    @glIsFramebufferEXT := GetProcAddress(Result, 'glIsFramebufferEXT');
    @glIsList := GetProcAddress(Result, 'glIsList');
    @glIsProgram := GetProcAddress(Result, 'glIsProgram');
    @glIsProgramARB := GetProcAddress(Result, 'glIsProgramARB');
    @glIsQuery := GetProcAddress(Result, 'glIsQuery');
    @glIsQueryARB := GetProcAddress(Result, 'glIsQueryARB');
    @glIsRenderbufferEXT := GetProcAddress(Result, 'glIsRenderbufferEXT');
    @glIsShader := GetProcAddress(Result, 'glIsShader');
    @glIsTexture := GetProcAddress(Result, 'glIsTexture');
    @glIsVertexArrayAPPLE := GetProcAddress(Result, 'glIsVertexArrayAPPLE');
    @glIsVertexAttribEnabledAPPLE := GetProcAddress(Result, 'glIsVertexAttribEnabledAPPLE');
    @glLightModelf := GetProcAddress(Result, 'glLightModelf');
    @glLightModelfv := GetProcAddress(Result, 'glLightModelfv');
    @glLightModeli := GetProcAddress(Result, 'glLightModeli');
    @glLightModeliv := GetProcAddress(Result, 'glLightModeliv');
    @glLightf := GetProcAddress(Result, 'glLightf');
    @glLightfv := GetProcAddress(Result, 'glLightfv');
    @glLighti := GetProcAddress(Result, 'glLighti');
    @glLightiv := GetProcAddress(Result, 'glLightiv');
    @glLineStipple := GetProcAddress(Result, 'glLineStipple');
    @glLineWidth := GetProcAddress(Result, 'glLineWidth');
    @glLinkProgram := GetProcAddress(Result, 'glLinkProgram');
    @glLinkProgramARB := GetProcAddress(Result, 'glLinkProgramARB');
    @glListBase := GetProcAddress(Result, 'glListBase');
    @glLoadIdentity := GetProcAddress(Result, 'glLoadIdentity');
    @glLoadMatrixd := GetProcAddress(Result, 'glLoadMatrixd');
    @glLoadMatrixf := GetProcAddress(Result, 'glLoadMatrixf');
    @glLoadName := GetProcAddress(Result, 'glLoadName');
    @glLoadTransposeMatrixd := GetProcAddress(Result, 'glLoadTransposeMatrixd');
    @glLoadTransposeMatrixf := GetProcAddress(Result, 'glLoadTransposeMatrixf');
    @glLogicOp := GetProcAddress(Result, 'glLogicOp');
    @glMap1d := GetProcAddress(Result, 'glMap1d');
    @glMap1f := GetProcAddress(Result, 'glMap1f');
    @glMap2d := GetProcAddress(Result, 'glMap2d');
    @glMap2f := GetProcAddress(Result, 'glMap2f');
    @glMapBuffer := GetProcAddress(Result, 'glMapBuffer');
    @glMapBufferARB := GetProcAddress(Result, 'glMapBufferARB');
    @glMapGrid1d := GetProcAddress(Result, 'glMapGrid1d');
    @glMapGrid1f := GetProcAddress(Result, 'glMapGrid1f');
    @glMapGrid2d := GetProcAddress(Result, 'glMapGrid2d');
    @glMapGrid2f := GetProcAddress(Result, 'glMapGrid2f');
    @glMapVertexAttrib1dAPPLE := GetProcAddress(Result, 'glMapVertexAttrib1dAPPLE');
    @glMapVertexAttrib1fAPPLE := GetProcAddress(Result, 'glMapVertexAttrib1fAPPLE');
    @glMapVertexAttrib2dAPPLE := GetProcAddress(Result, 'glMapVertexAttrib2dAPPLE');
    @glMapVertexAttrib2fAPPLE := GetProcAddress(Result, 'glMapVertexAttrib2fAPPLE');
    @glMaterialf := GetProcAddress(Result, 'glMaterialf');
    @glMaterialfv := GetProcAddress(Result, 'glMaterialfv');
    @glMateriali := GetProcAddress(Result, 'glMateriali');
    @glMaterialiv := GetProcAddress(Result, 'glMaterialiv');
    @glMatrixMode := GetProcAddress(Result, 'glMatrixMode');
    @glMinmax := GetProcAddress(Result, 'glMinmax');
    @glMultMatrixd := GetProcAddress(Result, 'glMultMatrixd');
    @glMultMatrixf := GetProcAddress(Result, 'glMultMatrixf');
    @glMultTransposeMatrixd := GetProcAddress(Result, 'glMultTransposeMatrixd');
    @glMultTransposeMatrixf := GetProcAddress(Result, 'glMultTransposeMatrixf');
    @glMultiDrawArrays := GetProcAddress(Result, 'glMultiDrawArrays');
    @glMultiDrawElementArrayAPPLE := GetProcAddress(Result, 'glMultiDrawElementArrayAPPLE');
    @glMultiDrawElements := GetProcAddress(Result, 'glMultiDrawElements');
    @glMultiDrawRangeElementArrayAPPLE := GetProcAddress(Result, 'glMultiDrawRangeElementArrayAPPLE');
    @glMultiTexCoord1d := GetProcAddress(Result, 'glMultiTexCoord1d');
    @glMultiTexCoord1dv := GetProcAddress(Result, 'glMultiTexCoord1dv');
    @glMultiTexCoord1f := GetProcAddress(Result, 'glMultiTexCoord1f');
    @glMultiTexCoord1fv := GetProcAddress(Result, 'glMultiTexCoord1fv');
    @glMultiTexCoord1i := GetProcAddress(Result, 'glMultiTexCoord1i');
    @glMultiTexCoord1iv := GetProcAddress(Result, 'glMultiTexCoord1iv');
    @glMultiTexCoord1s := GetProcAddress(Result, 'glMultiTexCoord1s');
    @glMultiTexCoord1sv := GetProcAddress(Result, 'glMultiTexCoord1sv');
    @glMultiTexCoord2d := GetProcAddress(Result, 'glMultiTexCoord2d');
    @glMultiTexCoord2dv := GetProcAddress(Result, 'glMultiTexCoord2dv');
    @glMultiTexCoord2f := GetProcAddress(Result, 'glMultiTexCoord2f');
    @glMultiTexCoord2fv := GetProcAddress(Result, 'glMultiTexCoord2fv');
    @glMultiTexCoord2i := GetProcAddress(Result, 'glMultiTexCoord2i');
    @glMultiTexCoord2iv := GetProcAddress(Result, 'glMultiTexCoord2iv');
    @glMultiTexCoord2s := GetProcAddress(Result, 'glMultiTexCoord2s');
    @glMultiTexCoord2sv := GetProcAddress(Result, 'glMultiTexCoord2sv');
    @glMultiTexCoord3d := GetProcAddress(Result, 'glMultiTexCoord3d');
    @glMultiTexCoord3dv := GetProcAddress(Result, 'glMultiTexCoord3dv');
    @glMultiTexCoord3f := GetProcAddress(Result, 'glMultiTexCoord3f');
    @glMultiTexCoord3fv := GetProcAddress(Result, 'glMultiTexCoord3fv');
    @glMultiTexCoord3i := GetProcAddress(Result, 'glMultiTexCoord3i');
    @glMultiTexCoord3iv := GetProcAddress(Result, 'glMultiTexCoord3iv');
    @glMultiTexCoord3s := GetProcAddress(Result, 'glMultiTexCoord3s');
    @glMultiTexCoord3sv := GetProcAddress(Result, 'glMultiTexCoord3sv');
    @glMultiTexCoord4d := GetProcAddress(Result, 'glMultiTexCoord4d');
    @glMultiTexCoord4dv := GetProcAddress(Result, 'glMultiTexCoord4dv');
    @glMultiTexCoord4f := GetProcAddress(Result, 'glMultiTexCoord4f');
    @glMultiTexCoord4fv := GetProcAddress(Result, 'glMultiTexCoord4fv');
    @glMultiTexCoord4iv := GetProcAddress(Result, 'glMultiTexCoord4iv');
    @glMultiTexCoord4s := GetProcAddress(Result, 'glMultiTexCoord4s');
    @glMultiTexCoord4sv := GetProcAddress(Result, 'glMultiTexCoord4sv');
    @glNewList := GetProcAddress(Result, 'glNewList');
    @glNormal3b := GetProcAddress(Result, 'glNormal3b');
    @glNormal3bv := GetProcAddress(Result, 'glNormal3bv');
    @glNormal3d := GetProcAddress(Result, 'glNormal3d');
    @glNormal3dv := GetProcAddress(Result, 'glNormal3dv');
    @glNormal3f := GetProcAddress(Result, 'glNormal3f');
    @glNormal3fv := GetProcAddress(Result, 'glNormal3fv');
    @glNormal3i := GetProcAddress(Result, 'glNormal3i');
    @glNormal3iv := GetProcAddress(Result, 'glNormal3iv');
    @glNormal3s := GetProcAddress(Result, 'glNormal3s');
    @glNormal3sv := GetProcAddress(Result, 'glNormal3sv');
    @glNormalPointer := GetProcAddress(Result, 'glNormalPointer');
    @glObjectPurgeableAPPLE := GetProcAddress(Result, 'glObjectPurgeableAPPLE');
    @glObjectUnpurgeableAPPLE := GetProcAddress(Result, 'glObjectUnpurgeableAPPLE');
    @glOrtho := GetProcAddress(Result, 'glOrtho');
    @glPNTrianglesfATI := GetProcAddress(Result, 'glPNTrianglesfATI');
    @glPNTrianglesfATIX := GetProcAddress(Result, 'glPNTrianglesfATIX');
    @glPNTrianglesiATI := GetProcAddress(Result, 'glPNTrianglesiATI');
    @glPNTrianglesiATIX := GetProcAddress(Result, 'glPNTrianglesiATIX');
    @glPassThrough := GetProcAddress(Result, 'glPassThrough');
    @glPixelMapfv := GetProcAddress(Result, 'glPixelMapfv');
    @glPixelMapuiv := GetProcAddress(Result, 'glPixelMapuiv');
    @glPixelMapusv := GetProcAddress(Result, 'glPixelMapusv');
    @glPixelStoref := GetProcAddress(Result, 'glPixelStoref');
    @glPixelStorei := GetProcAddress(Result, 'glPixelStorei');
    @glPixelTransferf := GetProcAddress(Result, 'glPixelTransferf');
    @glPixelTransferi := GetProcAddress(Result, 'glPixelTransferi');
    @glPixelZoom := GetProcAddress(Result, 'glPixelZoom');
    @glPointParameterf := GetProcAddress(Result, 'glPointParameterf');
    @glPointParameterfARB := GetProcAddress(Result, 'glPointParameterfARB');
    @glPointParameterfv := GetProcAddress(Result, 'glPointParameterfv');
    @glPointParameterfvARB := GetProcAddress(Result, 'glPointParameterfvARB');
    @glPointParameteri := GetProcAddress(Result, 'glPointParameteri');
    @glPointParameteriNV := GetProcAddress(Result, 'glPointParameteriNV');
    @glPointParameteriv := GetProcAddress(Result, 'glPointParameteriv');
    @glPointParameterivNV := GetProcAddress(Result, 'glPointParameterivNV');
    @glPointSize := GetProcAddress(Result, 'glPointSize');
    @glPolygonMode := GetProcAddress(Result, 'glPolygonMode');
    @glPolygonOffset := GetProcAddress(Result, 'glPolygonOffset');
    @glPolygonStipple := GetProcAddress(Result, 'glPolygonStipple');
    @glPopAttrib := GetProcAddress(Result, 'glPopAttrib');
    @glPopClientAttrib := GetProcAddress(Result, 'glPopClientAttrib');
    @glPopMatrix := GetProcAddress(Result, 'glPopMatrix');
    @glPopName := GetProcAddress(Result, 'glPopName');
    @glPrioritizeTextures := GetProcAddress(Result, 'glPrioritizeTextures');
    @glProgramEnvParameter4dARB := GetProcAddress(Result, 'glProgramEnvParameter4dARB');
    @glProgramEnvParameter4dvARB := GetProcAddress(Result, 'glProgramEnvParameter4dvARB');
    @glProgramEnvParameter4fARB := GetProcAddress(Result, 'glProgramEnvParameter4fARB');
    @glProgramEnvParameter4fvARB := GetProcAddress(Result, 'glProgramEnvParameter4fvARB');
    @glProgramEnvParameters4fvEXT := GetProcAddress(Result, 'glProgramEnvParameters4fvEXT');
    @glProgramLocalParameter4dARB := GetProcAddress(Result, 'glProgramLocalParameter4dARB');
    @glProgramLocalParameter4dvARB := GetProcAddress(Result, 'glProgramLocalParameter4dvARB');
    @glProgramLocalParameter4fARB := GetProcAddress(Result, 'glProgramLocalParameter4fARB');
    @glProgramLocalParameter4fvARB := GetProcAddress(Result, 'glProgramLocalParameter4fvARB');
    @glProgramLocalParameters4fvEXT := GetProcAddress(Result, 'glProgramLocalParameters4fvEXT');
    @glProgramParameteriEXT := GetProcAddress(Result, 'glProgramParameteriEXT');
    @glProgramStringARB := GetProcAddress(Result, 'glProgramStringARB');
    @glProvokingVertexEXT := GetProcAddress(Result, 'glProvokingVertexEXT');
    @glPushAttrib := GetProcAddress(Result, 'glPushAttrib');
    @glPushClientAttrib := GetProcAddress(Result, 'glPushClientAttrib');
    @glPushMatrix := GetProcAddress(Result, 'glPushMatrix');
    @glPushName := GetProcAddress(Result, 'glPushName');
    @glRasterPos2d := GetProcAddress(Result, 'glRasterPos2d');
    @glRasterPos2dv := GetProcAddress(Result, 'glRasterPos2dv');
    @glRasterPos2f := GetProcAddress(Result, 'glRasterPos2f');
    @glRasterPos2fv := GetProcAddress(Result, 'glRasterPos2fv');
    @glRasterPos2i := GetProcAddress(Result, 'glRasterPos2i');
    @glRasterPos2iv := GetProcAddress(Result, 'glRasterPos2iv');
    @glRasterPos2s := GetProcAddress(Result, 'glRasterPos2s');
    @glRasterPos2sv := GetProcAddress(Result, 'glRasterPos2sv');
    @glRasterPos3d := GetProcAddress(Result, 'glRasterPos3d');
    @glRasterPos3dv := GetProcAddress(Result, 'glRasterPos3dv');
    @glRasterPos3f := GetProcAddress(Result, 'glRasterPos3f');
    @glRasterPos3fv := GetProcAddress(Result, 'glRasterPos3fv');
    @glRasterPos3i := GetProcAddress(Result, 'glRasterPos3i');
    @glRasterPos3iv := GetProcAddress(Result, 'glRasterPos3iv');
    @glRasterPos3s := GetProcAddress(Result, 'glRasterPos3s');
    @glRasterPos3sv := GetProcAddress(Result, 'glRasterPos3sv');
    @glRasterPos4d := GetProcAddress(Result, 'glRasterPos4d');
    @glRasterPos4dv := GetProcAddress(Result, 'glRasterPos4dv');
    @glRasterPos4f := GetProcAddress(Result, 'glRasterPos4f');
    @glRasterPos4fv := GetProcAddress(Result, 'glRasterPos4fv');
    @glRasterPos4i := GetProcAddress(Result, 'glRasterPos4i');
    @glRasterPos4iv := GetProcAddress(Result, 'glRasterPos4iv');
    @glRasterPos4s := GetProcAddress(Result, 'glRasterPos4s');
    @glRasterPos4sv := GetProcAddress(Result, 'glRasterPos4sv');
    @glReadBuffer := GetProcAddress(Result, 'glReadBuffer');
    @glReadPixels := GetProcAddress(Result, 'glReadPixels');
    @glRectd := GetProcAddress(Result, 'glRectd');
    @glRectdv := GetProcAddress(Result, 'glRectdv');
    @glRectf := GetProcAddress(Result, 'glRectf');
    @glRectfv := GetProcAddress(Result, 'glRectfv');
    @glRecti := GetProcAddress(Result, 'glRecti');
    @glRectiv := GetProcAddress(Result, 'glRectiv');
    @glRects := GetProcAddress(Result, 'glRects');
    @glRectsv := GetProcAddress(Result, 'glRectsv');
    @glRenderMode := GetProcAddress(Result, 'glRenderMode');
    @glRenderbufferStorageEXT := GetProcAddress(Result, 'glRenderbufferStorageEXT');
    @glRenderbufferStorageMultisampleEXT := GetProcAddress(Result, 'glRenderbufferStorageMultisampleEXT');
    @glResetHistogram := GetProcAddress(Result, 'glResetHistogram');
    @glResetMinmax := GetProcAddress(Result, 'glResetMinmax');
    @glRotated := GetProcAddress(Result, 'glRotated');
    @glRotatef := GetProcAddress(Result, 'glRotatef');
    @glSampleCoverage := GetProcAddress(Result, 'glSampleCoverage');
    @glSamplePass := GetProcAddress(Result, 'glSamplePass');
    @glScaled := GetProcAddress(Result, 'glScaled');
    @glScalef := GetProcAddress(Result, 'glScalef');
    @glScissor := GetProcAddress(Result, 'glScissor');
    @glSecondaryColor3b := GetProcAddress(Result, 'glSecondaryColor3b');
    @glSecondaryColor3bv := GetProcAddress(Result, 'glSecondaryColor3bv');
    @glSecondaryColor3d := GetProcAddress(Result, 'glSecondaryColor3d');
    @glSecondaryColor3dv := GetProcAddress(Result, 'glSecondaryColor3dv');
    @glSecondaryColor3f := GetProcAddress(Result, 'glSecondaryColor3f');
    @glSecondaryColor3fv := GetProcAddress(Result, 'glSecondaryColor3fv');
    @glSecondaryColor3i := GetProcAddress(Result, 'glSecondaryColor3i');
    @glSecondaryColor3iv := GetProcAddress(Result, 'glSecondaryColor3iv');
    @glSecondaryColor3s := GetProcAddress(Result, 'glSecondaryColor3s');
    @glSecondaryColor3sv := GetProcAddress(Result, 'glSecondaryColor3sv');
    @glSecondaryColor3ub := GetProcAddress(Result, 'glSecondaryColor3ub');
    @glSecondaryColor3ubv := GetProcAddress(Result, 'glSecondaryColor3ubv');
    @glSecondaryColor3ui := GetProcAddress(Result, 'glSecondaryColor3ui');
    @glSecondaryColor3uiv := GetProcAddress(Result, 'glSecondaryColor3uiv');
    @glSecondaryColor3us := GetProcAddress(Result, 'glSecondaryColor3us');
    @glSecondaryColor3usv := GetProcAddress(Result, 'glSecondaryColor3usv');
    @glSecondaryColorPointer := GetProcAddress(Result, 'glSecondaryColorPointer');
    @glSelectBuffer := GetProcAddress(Result, 'glSelectBuffer');
    @glSeparableFilter2D := GetProcAddress(Result, 'glSeparableFilter2D');
    @glSetFenceAPPLE := GetProcAddress(Result, 'glSetFenceAPPLE');
    @glShadeModel := GetProcAddress(Result, 'glShadeModel');
    @glShaderSource := GetProcAddress(Result, 'glShaderSource');
    @glShaderSourceARB := GetProcAddress(Result, 'glShaderSourceARB');
    @glStencilFunc := GetProcAddress(Result, 'glStencilFunc');
    @glStencilFuncSeparate := GetProcAddress(Result, 'glStencilFuncSeparate');
    @glStencilFuncSeparateATI := GetProcAddress(Result, 'glStencilFuncSeparateATI');
    @glStencilMask := GetProcAddress(Result, 'glStencilMask');
    @glStencilMaskSeparate := GetProcAddress(Result, 'glStencilMaskSeparate');
    @glStencilOp := GetProcAddress(Result, 'glStencilOp');
    @glStencilOpSeparate := GetProcAddress(Result, 'glStencilOpSeparate');
    @glStencilOpSeparateATI := GetProcAddress(Result, 'glStencilOpSeparateATI');
    @glSwapAPPLE := GetProcAddress(Result, 'glSwapAPPLE');
    @glTestFenceAPPLE := GetProcAddress(Result, 'glTestFenceAPPLE');
    @glTestObjectAPPLE := GetProcAddress(Result, 'glTestObjectAPPLE');
    @glTexCoord1d := GetProcAddress(Result, 'glTexCoord1d');
    @glTexCoord1dv := GetProcAddress(Result, 'glTexCoord1dv');
    @glTexCoord1f := GetProcAddress(Result, 'glTexCoord1f');
    @glTexCoord1fv := GetProcAddress(Result, 'glTexCoord1fv');
    @glTexCoord1i := GetProcAddress(Result, 'glTexCoord1i');
    @glTexCoord1iv := GetProcAddress(Result, 'glTexCoord1iv');
    @glTexCoord1s := GetProcAddress(Result, 'glTexCoord1s');
    @glTexCoord1sv := GetProcAddress(Result, 'glTexCoord1sv');
    @glTexCoord2d := GetProcAddress(Result, 'glTexCoord2d');
    @glTexCoord2dv := GetProcAddress(Result, 'glTexCoord2dv');
    @glTexCoord2f := GetProcAddress(Result, 'glTexCoord2f');
    @glTexCoord2fv := GetProcAddress(Result, 'glTexCoord2fv');
    @glTexCoord2i := GetProcAddress(Result, 'glTexCoord2i');
    @glTexCoord2iv := GetProcAddress(Result, 'glTexCoord2iv');
    @glTexCoord2s := GetProcAddress(Result, 'glTexCoord2s');
    @glTexCoord2sv := GetProcAddress(Result, 'glTexCoord2sv');
    @glTexCoord3d := GetProcAddress(Result, 'glTexCoord3d');
    @glTexCoord3dv := GetProcAddress(Result, 'glTexCoord3dv');
    @glTexCoord3f := GetProcAddress(Result, 'glTexCoord3f');
    @glTexCoord3fv := GetProcAddress(Result, 'glTexCoord3fv');
    @glTexCoord3i := GetProcAddress(Result, 'glTexCoord3i');
    @glTexCoord3iv := GetProcAddress(Result, 'glTexCoord3iv');
    @glTexCoord3s := GetProcAddress(Result, 'glTexCoord3s');
    @glTexCoord3sv := GetProcAddress(Result, 'glTexCoord3sv');
    @glTexCoord4d := GetProcAddress(Result, 'glTexCoord4d');
    @glTexCoord4dv := GetProcAddress(Result, 'glTexCoord4dv');
    @glTexCoord4f := GetProcAddress(Result, 'glTexCoord4f');
    @glTexCoord4fv := GetProcAddress(Result, 'glTexCoord4fv');
    @glTexCoord4i := GetProcAddress(Result, 'glTexCoord4i');
    @glTexCoord4iv := GetProcAddress(Result, 'glTexCoord4iv');
    @glTexCoord4s := GetProcAddress(Result, 'glTexCoord4s');
    @glTexCoord4sv := GetProcAddress(Result, 'glTexCoord4sv');
    @glTexCoordPointer := GetProcAddress(Result, 'glTexCoordPointer');
    @glTexEnvf := GetProcAddress(Result, 'glTexEnvf');
    @glTexEnvfv := GetProcAddress(Result, 'glTexEnvfv');
    @glTexEnvi := GetProcAddress(Result, 'glTexEnvi');
    @glTexEnviv := GetProcAddress(Result, 'glTexEnviv');
    @glTexGend := GetProcAddress(Result, 'glTexGend');
    @glTexGendv := GetProcAddress(Result, 'glTexGendv');
    @glTexGenf := GetProcAddress(Result, 'glTexGenf');
    @glTexGenfv := GetProcAddress(Result, 'glTexGenfv');
    @glTexGeni := GetProcAddress(Result, 'glTexGeni');
    @glTexGeniv := GetProcAddress(Result, 'glTexGeniv');
    @glTexImage1D := GetProcAddress(Result, 'glTexImage1D');
    @glTexImage2D := GetProcAddress(Result, 'glTexImage2D');
    @glTexImage3D := GetProcAddress(Result, 'glTexImage3D');
    @glTexParameterIivEXT := GetProcAddress(Result, 'glTexParameterIivEXT');
    @glTexParameterIuivEXT := GetProcAddress(Result, 'glTexParameterIuivEXT');
    @glTexParameterf := GetProcAddress(Result, 'glTexParameterf');
    @glTexParameterfv := GetProcAddress(Result, 'glTexParameterfv');
    @glTexParameteri := GetProcAddress(Result, 'glTexParameteri');
    @glTexParameteriv := GetProcAddress(Result, 'glTexParameteriv');
    @glTexSubImage1D := GetProcAddress(Result, 'glTexSubImage1D');
    @glTexSubImage2D := GetProcAddress(Result, 'glTexSubImage2D');
    @glTexSubImage3D := GetProcAddress(Result, 'glTexSubImage3D');
    @glTextureRangeAPPLE := GetProcAddress(Result, 'glTextureRangeAPPLE');
    @glTransformFeedbackVaryingsEXT := GetProcAddress(Result, 'glTransformFeedbackVaryingsEXT');
    @glTranslated := GetProcAddress(Result, 'glTranslated');
    @glTranslatef := GetProcAddress(Result, 'glTranslatef');
    @glUniform1f := GetProcAddress(Result, 'glUniform1f');
    @glUniform1fARB := GetProcAddress(Result, 'glUniform1fARB');
    @glUniform1fv := GetProcAddress(Result, 'glUniform1fv');
    @glUniform1fvARB := GetProcAddress(Result, 'glUniform1fvARB');
    @glUniform1i := GetProcAddress(Result, 'glUniform1i');
    @glUniform1iARB := GetProcAddress(Result, 'glUniform1iARB');
    @glUniform1iv := GetProcAddress(Result, 'glUniform1iv');
    @glUniform1ivARB := GetProcAddress(Result, 'glUniform1ivARB');
    @glUniform1uiEXT := GetProcAddress(Result, 'glUniform1uiEXT');
    @glUniform1uivEXT := GetProcAddress(Result, 'glUniform1uivEXT');
    @glUniform2f := GetProcAddress(Result, 'glUniform2f');
    @glUniform2fARB := GetProcAddress(Result, 'glUniform2fARB');
    @glUniform2fv := GetProcAddress(Result, 'glUniform2fv');
    @glUniform2fvARB := GetProcAddress(Result, 'glUniform2fvARB');
    @glUniform2i := GetProcAddress(Result, 'glUniform2i');
    @glUniform2iARB := GetProcAddress(Result, 'glUniform2iARB');
    @glUniform2iv := GetProcAddress(Result, 'glUniform2iv');
    @glUniform2ivARB := GetProcAddress(Result, 'glUniform2ivARB');
    @glUniform2uiEXT := GetProcAddress(Result, 'glUniform2uiEXT');
    @glUniform2uivEXT := GetProcAddress(Result, 'glUniform2uivEXT');
    @glUniform3f := GetProcAddress(Result, 'glUniform3f');
    @glUniform3fARB := GetProcAddress(Result, 'glUniform3fARB');
    @glUniform3fv := GetProcAddress(Result, 'glUniform3fv');
    @glUniform3fvARB := GetProcAddress(Result, 'glUniform3fvARB');
    @glUniform3i := GetProcAddress(Result, 'glUniform3i');
    @glUniform3iARB := GetProcAddress(Result, 'glUniform3iARB');
    @glUniform3iv := GetProcAddress(Result, 'glUniform3iv');
    @glUniform3ivARB := GetProcAddress(Result, 'glUniform3ivARB');
    @glUniform3uiEXT := GetProcAddress(Result, 'glUniform3uiEXT');
    @glUniform3uivEXT := GetProcAddress(Result, 'glUniform3uivEXT');
    @glUniform4f := GetProcAddress(Result, 'glUniform4f');
    @glUniform4fARB := GetProcAddress(Result, 'glUniform4fARB');
    @glUniform4fv := GetProcAddress(Result, 'glUniform4fv');
    @glUniform4fvARB := GetProcAddress(Result, 'glUniform4fvARB');
    @glUniform4i := GetProcAddress(Result, 'glUniform4i');
    @glUniform4iARB := GetProcAddress(Result, 'glUniform4iARB');
    @glUniform4iv := GetProcAddress(Result, 'glUniform4iv');
    @glUniform4ivARB := GetProcAddress(Result, 'glUniform4ivARB');
    @glUniform4uiEXT := GetProcAddress(Result, 'glUniform4uiEXT');
    @glUniform4uivEXT := GetProcAddress(Result, 'glUniform4uivEXT');
    @glUniformBlockBinding := GetProcAddress(Result, 'glUniformBlockBinding');
    @glUniformBufferEXT := GetProcAddress(Result, 'glUniformBufferEXT');
    @glUniformMatrix2fv := GetProcAddress(Result, 'glUniformMatrix2fv');
    @glUniformMatrix2fvARB := GetProcAddress(Result, 'glUniformMatrix2fvARB');
    @glUniformMatrix2x3fv := GetProcAddress(Result, 'glUniformMatrix2x3fv');
    @glUniformMatrix2x4fv := GetProcAddress(Result, 'glUniformMatrix2x4fv');
    @glUniformMatrix3fv := GetProcAddress(Result, 'glUniformMatrix3fv');
    @glUniformMatrix3fvARB := GetProcAddress(Result, 'glUniformMatrix3fvARB');
    @glUniformMatrix3x2fv := GetProcAddress(Result, 'glUniformMatrix3x2fv');
    @glUniformMatrix3x4fv := GetProcAddress(Result, 'glUniformMatrix3x4fv');
    @glUniformMatrix4fv := GetProcAddress(Result, 'glUniformMatrix4fv');
    @glUniformMatrix4fvARB := GetProcAddress(Result, 'glUniformMatrix4fvARB');
    @glUniformMatrix4x2fv := GetProcAddress(Result, 'glUniformMatrix4x2fv');
    @glUniformMatrix4x3fv := GetProcAddress(Result, 'glUniformMatrix4x3fv');
    @glUnlockArraysEXT := GetProcAddress(Result, 'glUnlockArraysEXT');
    @glUnmapBuffer := GetProcAddress(Result, 'glUnmapBuffer');
    @glUnmapBufferARB := GetProcAddress(Result, 'glUnmapBufferARB');
    @glUseProgram := GetProcAddress(Result, 'glUseProgram');
    @glUseProgramObjectARB := GetProcAddress(Result, 'glUseProgramObjectARB');
    @glValidateProgram := GetProcAddress(Result, 'glValidateProgram');
    @glValidateProgramARB := GetProcAddress(Result, 'glValidateProgramARB');
    @glVertex2d := GetProcAddress(Result, 'glVertex2d');
    @glVertex2dv := GetProcAddress(Result, 'glVertex2dv');
    @glVertex2f := GetProcAddress(Result, 'glVertex2f');
    @glVertex2fv := GetProcAddress(Result, 'glVertex2fv');
    @glVertex2i := GetProcAddress(Result, 'glVertex2i');
    @glVertex2iv := GetProcAddress(Result, 'glVertex2iv');
    @glVertex2s := GetProcAddress(Result, 'glVertex2s');
    @glVertex2sv := GetProcAddress(Result, 'glVertex2sv');
    @glVertex3d := GetProcAddress(Result, 'glVertex3d');
    @glVertex3dv := GetProcAddress(Result, 'glVertex3dv');
    @glVertex3f := GetProcAddress(Result, 'glVertex3f');
    @glVertex3fv := GetProcAddress(Result, 'glVertex3fv');
    @glVertex3i := GetProcAddress(Result, 'glVertex3i');
    @glVertex3iv := GetProcAddress(Result, 'glVertex3iv');
    @glVertex3s := GetProcAddress(Result, 'glVertex3s');
    @glVertex3sv := GetProcAddress(Result, 'glVertex3sv');
    @glVertex4d := GetProcAddress(Result, 'glVertex4d');
    @glVertex4dv := GetProcAddress(Result, 'glVertex4dv');
    @glVertex4f := GetProcAddress(Result, 'glVertex4f');
    @glVertex4fv := GetProcAddress(Result, 'glVertex4fv');
    @glVertex4i := GetProcAddress(Result, 'glVertex4i');
    @glVertex4iv := GetProcAddress(Result, 'glVertex4iv');
    @glVertex4s := GetProcAddress(Result, 'glVertex4s');
    @glVertex4sv := GetProcAddress(Result, 'glVertex4sv');
    @glVertexArrayParameteriAPPLE := GetProcAddress(Result, 'glVertexArrayParameteriAPPLE');
    @glVertexArrayRangeAPPLE := GetProcAddress(Result, 'glVertexArrayRangeAPPLE');
    @glVertexAttrib1d := GetProcAddress(Result, 'glVertexAttrib1d');
    @glVertexAttrib1dARB := GetProcAddress(Result, 'glVertexAttrib1dARB');
    @glVertexAttrib1dv := GetProcAddress(Result, 'glVertexAttrib1dv');
    @glVertexAttrib1dvARB := GetProcAddress(Result, 'glVertexAttrib1dvARB');
    @glVertexAttrib1f := GetProcAddress(Result, 'glVertexAttrib1f');
    @glVertexAttrib1fARB := GetProcAddress(Result, 'glVertexAttrib1fARB');
    @glVertexAttrib1fv := GetProcAddress(Result, 'glVertexAttrib1fv');
    @glVertexAttrib1fvARB := GetProcAddress(Result, 'glVertexAttrib1fvARB');
    @glVertexAttrib1s := GetProcAddress(Result, 'glVertexAttrib1s');
    @glVertexAttrib1sARB := GetProcAddress(Result, 'glVertexAttrib1sARB');
    @glVertexAttrib1sv := GetProcAddress(Result, 'glVertexAttrib1sv');
    @glVertexAttrib1svARB := GetProcAddress(Result, 'glVertexAttrib1svARB');
    @glVertexAttrib2d := GetProcAddress(Result, 'glVertexAttrib2d');
    @glVertexAttrib2dARB := GetProcAddress(Result, 'glVertexAttrib2dARB');
    @glVertexAttrib2dv := GetProcAddress(Result, 'glVertexAttrib2dv');
    @glVertexAttrib2dvARB := GetProcAddress(Result, 'glVertexAttrib2dvARB');
    @glVertexAttrib2f := GetProcAddress(Result, 'glVertexAttrib2f');
    @glVertexAttrib2fARB := GetProcAddress(Result, 'glVertexAttrib2fARB');
    @glVertexAttrib2fv := GetProcAddress(Result, 'glVertexAttrib2fv');
    @glVertexAttrib2fvARB := GetProcAddress(Result, 'glVertexAttrib2fvARB');
    @glVertexAttrib2s := GetProcAddress(Result, 'glVertexAttrib2s');
    @glVertexAttrib2sARB := GetProcAddress(Result, 'glVertexAttrib2sARB');
    @glVertexAttrib2sv := GetProcAddress(Result, 'glVertexAttrib2sv');
    @glVertexAttrib2svARB := GetProcAddress(Result, 'glVertexAttrib2svARB');
    @glVertexAttrib3d := GetProcAddress(Result, 'glVertexAttrib3d');
    @glVertexAttrib3dARB := GetProcAddress(Result, 'glVertexAttrib3dARB');
    @glVertexAttrib3dv := GetProcAddress(Result, 'glVertexAttrib3dv');
    @glVertexAttrib3dvARB := GetProcAddress(Result, 'glVertexAttrib3dvARB');
    @glVertexAttrib3f := GetProcAddress(Result, 'glVertexAttrib3f');
    @glVertexAttrib3fARB := GetProcAddress(Result, 'glVertexAttrib3fARB');
    @glVertexAttrib3fv := GetProcAddress(Result, 'glVertexAttrib3fv');
    @glVertexAttrib3fvARB := GetProcAddress(Result, 'glVertexAttrib3fvARB');
    @glVertexAttrib3s := GetProcAddress(Result, 'glVertexAttrib3s');
    @glVertexAttrib3sARB := GetProcAddress(Result, 'glVertexAttrib3sARB');
    @glVertexAttrib3sv := GetProcAddress(Result, 'glVertexAttrib3sv');
    @glVertexAttrib3svARB := GetProcAddress(Result, 'glVertexAttrib3svARB');
    @glVertexAttrib4Nbv := GetProcAddress(Result, 'glVertexAttrib4Nbv');
    @glVertexAttrib4NbvARB := GetProcAddress(Result, 'glVertexAttrib4NbvARB');
    @glVertexAttrib4Niv := GetProcAddress(Result, 'glVertexAttrib4Niv');
    @glVertexAttrib4NivARB := GetProcAddress(Result, 'glVertexAttrib4NivARB');
    @glVertexAttrib4Nsv := GetProcAddress(Result, 'glVertexAttrib4Nsv');
    @glVertexAttrib4NsvARB := GetProcAddress(Result, 'glVertexAttrib4NsvARB');
    @glVertexAttrib4Nub := GetProcAddress(Result, 'glVertexAttrib4Nub');
    @glVertexAttrib4NubARB := GetProcAddress(Result, 'glVertexAttrib4NubARB');
    @glVertexAttrib4Nubv := GetProcAddress(Result, 'glVertexAttrib4Nubv');
    @glVertexAttrib4NubvARB := GetProcAddress(Result, 'glVertexAttrib4NubvARB');
    @glVertexAttrib4Nuiv := GetProcAddress(Result, 'glVertexAttrib4Nuiv');
    @glVertexAttrib4NuivARB := GetProcAddress(Result, 'glVertexAttrib4NuivARB');
    @glVertexAttrib4Nusv := GetProcAddress(Result, 'glVertexAttrib4Nusv');
    @glVertexAttrib4NusvARB := GetProcAddress(Result, 'glVertexAttrib4NusvARB');
    @glVertexAttrib4bv := GetProcAddress(Result, 'glVertexAttrib4bv');
    @glVertexAttrib4bvARB := GetProcAddress(Result, 'glVertexAttrib4bvARB');
    @glVertexAttrib4d := GetProcAddress(Result, 'glVertexAttrib4d');
    @glVertexAttrib4dARB := GetProcAddress(Result, 'glVertexAttrib4dARB');
    @glVertexAttrib4dv := GetProcAddress(Result, 'glVertexAttrib4dv');
    @glVertexAttrib4dvARB := GetProcAddress(Result, 'glVertexAttrib4dvARB');
    @glVertexAttrib4f := GetProcAddress(Result, 'glVertexAttrib4f');
    @glVertexAttrib4fARB := GetProcAddress(Result, 'glVertexAttrib4fARB');
    @glVertexAttrib4fv := GetProcAddress(Result, 'glVertexAttrib4fv');
    @glVertexAttrib4fvARB := GetProcAddress(Result, 'glVertexAttrib4fvARB');
    @glVertexAttrib4iv := GetProcAddress(Result, 'glVertexAttrib4iv');
    @glVertexAttrib4ivARB := GetProcAddress(Result, 'glVertexAttrib4ivARB');
    @glVertexAttrib4s := GetProcAddress(Result, 'glVertexAttrib4s');
    @glVertexAttrib4sARB := GetProcAddress(Result, 'glVertexAttrib4sARB');
    @glVertexAttrib4sv := GetProcAddress(Result, 'glVertexAttrib4sv');
    @glVertexAttrib4svARB := GetProcAddress(Result, 'glVertexAttrib4svARB');
    @glVertexAttrib4ubv := GetProcAddress(Result, 'glVertexAttrib4ubv');
    @glVertexAttrib4ubvARB := GetProcAddress(Result, 'glVertexAttrib4ubvARB');
    @glVertexAttrib4uiv := GetProcAddress(Result, 'glVertexAttrib4uiv');
    @glVertexAttrib4uivARB := GetProcAddress(Result, 'glVertexAttrib4uivARB');
    @glVertexAttrib4usv := GetProcAddress(Result, 'glVertexAttrib4usv');
    @glVertexAttrib4usvARB := GetProcAddress(Result, 'glVertexAttrib4usvARB');
    @glVertexAttribDivisorARB := GetProcAddress(Result, 'glVertexAttribDivisorARB');
    @glVertexAttribI1iEXT := GetProcAddress(Result, 'glVertexAttribI1iEXT');
    @glVertexAttribI1ivEXT := GetProcAddress(Result, 'glVertexAttribI1ivEXT');
    @glVertexAttribI1uiEXT := GetProcAddress(Result, 'glVertexAttribI1uiEXT');
    @glVertexAttribI1uivEXT := GetProcAddress(Result, 'glVertexAttribI1uivEXT');
    @glVertexAttribI2iEXT := GetProcAddress(Result, 'glVertexAttribI2iEXT');
    @glVertexAttribI2ivEXT := GetProcAddress(Result, 'glVertexAttribI2ivEXT');
    @glVertexAttribI2uiEXT := GetProcAddress(Result, 'glVertexAttribI2uiEXT');
    @glVertexAttribI2uivEXT := GetProcAddress(Result, 'glVertexAttribI2uivEXT');
    @glVertexAttribI3iEXT := GetProcAddress(Result, 'glVertexAttribI3iEXT');
    @glVertexAttribI3ivEXT := GetProcAddress(Result, 'glVertexAttribI3ivEXT');
    @glVertexAttribI3uiEXT := GetProcAddress(Result, 'glVertexAttribI3uiEXT');
    @glVertexAttribI3uivEXT := GetProcAddress(Result, 'glVertexAttribI3uivEXT');
    @glVertexAttribI4bvEXT := GetProcAddress(Result, 'glVertexAttribI4bvEXT');
    @glVertexAttribI4iEXT := GetProcAddress(Result, 'glVertexAttribI4iEXT');
    @glVertexAttribI4ivEXT := GetProcAddress(Result, 'glVertexAttribI4ivEXT');
    @glVertexAttribI4svEXT := GetProcAddress(Result, 'glVertexAttribI4svEXT');
    @glVertexAttribI4ubvEXT := GetProcAddress(Result, 'glVertexAttribI4ubvEXT');
    @glVertexAttribI4uiEXT := GetProcAddress(Result, 'glVertexAttribI4uiEXT');
    @glVertexAttribI4uivEXT := GetProcAddress(Result, 'glVertexAttribI4uivEXT');
    @glVertexAttribI4usvEXT := GetProcAddress(Result, 'glVertexAttribI4usvEXT');
    @glVertexAttribIPointerEXT := GetProcAddress(Result, 'glVertexAttribIPointerEXT');
    @glVertexAttribPointer := GetProcAddress(Result, 'glVertexAttribPointer');
    @glVertexAttribPointerARB := GetProcAddress(Result, 'glVertexAttribPointerARB');
    @glVertexPointer := GetProcAddress(Result, 'glVertexPointer');
    @glViewport := GetProcAddress(Result, 'glViewport');
    @glWindowPos2d := GetProcAddress(Result, 'glWindowPos2d');
    @glWindowPos2dv := GetProcAddress(Result, 'glWindowPos2dv');
    @glWindowPos2f := GetProcAddress(Result, 'glWindowPos2f');
    @glWindowPos2fv := GetProcAddress(Result, 'glWindowPos2fv');
    @glWindowPos2i := GetProcAddress(Result, 'glWindowPos2i');
    @glWindowPos2iv := GetProcAddress(Result, 'glWindowPos2iv');
    @glWindowPos2s := GetProcAddress(Result, 'glWindowPos2s');
    @glWindowPos2sv := GetProcAddress(Result, 'glWindowPos2sv');
    @glWindowPos3d := GetProcAddress(Result, 'glWindowPos3d');
    @glWindowPos3dv := GetProcAddress(Result, 'glWindowPos3dv');
    @glWindowPos3f := GetProcAddress(Result, 'glWindowPos3f');
    @glWindowPos3fv := GetProcAddress(Result, 'glWindowPos3fv');
    @glWindowPos3i := GetProcAddress(Result, 'glWindowPos3i');
    @glWindowPos3iv := GetProcAddress(Result, 'glWindowPos3iv');
    @glWindowPos3s := GetProcAddress(Result, 'glWindowPos3s');
    @glWindowPos3sv := GetProcAddress(Result, 'glWindowPos3sv');
{
    @gluBeginCurve := GetProcAddress(Result, 'gluBeginCurve');
    @gluBeginPolygon := GetProcAddress(Result, 'gluBeginPolygon');
    @gluBeginSurface := GetProcAddress(Result, 'gluBeginSurface');
    @gluBeginTrim := GetProcAddress(Result, 'gluBeginTrim');
    @gluBuild1DMipmapLevels := GetProcAddress(Result, 'gluBuild1DMipmapLevels');
    @gluBuild1DMipmapLevelsCTX := GetProcAddress(Result, 'gluBuild1DMipmapLevelsCTX');
    @gluBuild1DMipmaps := GetProcAddress(Result, 'gluBuild1DMipmaps');
    @gluBuild1DMipmapsCTX := GetProcAddress(Result, 'gluBuild1DMipmapsCTX');
    @gluBuild2DMipmapLevels := GetProcAddress(Result, 'gluBuild2DMipmapLevels');
    @gluBuild2DMipmapLevelsCTX := GetProcAddress(Result, 'gluBuild2DMipmapLevelsCTX');
    @gluBuild2DMipmaps := GetProcAddress(Result, 'gluBuild2DMipmaps');
    @gluBuild2DMipmapsCTX := GetProcAddress(Result, 'gluBuild2DMipmapsCTX');
    @gluBuild3DMipmapLevels := GetProcAddress(Result, 'gluBuild3DMipmapLevels');
    @gluBuild3DMipmapLevelsCTX := GetProcAddress(Result, 'gluBuild3DMipmapLevelsCTX');
    @gluBuild3DMipmaps := GetProcAddress(Result, 'gluBuild3DMipmaps');
    @gluBuild3DMipmapsCTX := GetProcAddress(Result, 'gluBuild3DMipmapsCTX');
}
    @gluCheckExtension := GetProcAddress(Result, 'gluCheckExtension');
{
    @gluCylinder := GetProcAddress(Result, 'gluCylinder');
    @gluDeleteNurbsRenderer := GetProcAddress(Result, 'gluDeleteNurbsRenderer');
    @gluDeleteQuadric := GetProcAddress(Result, 'gluDeleteQuadric');
    @gluDeleteTess := GetProcAddress(Result, 'gluDeleteTess');
    @gluDisk := GetProcAddress(Result, 'gluDisk');
    @gluEndCurve := GetProcAddress(Result, 'gluEndCurve');
    @gluEndPolygon := GetProcAddress(Result, 'gluEndPolygon');
    @gluEndSurface := GetProcAddress(Result, 'gluEndSurface');
    @gluEndTrim := GetProcAddress(Result, 'gluEndTrim');
    @gluErrorString := GetProcAddress(Result, 'gluErrorString');
    @gluGetNurbsProperty := GetProcAddress(Result, 'gluGetNurbsProperty');
}
    @gluGetString := GetProcAddress(Result, 'gluGetString');
{
    @gluGetTessProperty := GetProcAddress(Result, 'gluGetTessProperty');
    @gluLoadSamplingMatrices := GetProcAddress(Result, 'gluLoadSamplingMatrices');
    @gluLookAt := GetProcAddress(Result, 'gluLookAt');
    @gluLookAtCTX := GetProcAddress(Result, 'gluLookAtCTX');
    @gluNewNurbsRenderer := GetProcAddress(Result, 'gluNewNurbsRenderer');
    @gluNewNurbsRendererCTX := GetProcAddress(Result, 'gluNewNurbsRendererCTX');
    @gluNewQuadric := GetProcAddress(Result, 'gluNewQuadric');
    @gluNewQuadricCTX := GetProcAddress(Result, 'gluNewQuadricCTX');
    @gluNewTess := GetProcAddress(Result, 'gluNewTess');
    @gluNewTessCTX := GetProcAddress(Result, 'gluNewTessCTX');
    @gluNextContour := GetProcAddress(Result, 'gluNextContour');
    @gluNurbsCallbackData := GetProcAddress(Result, 'gluNurbsCallbackData');
    @gluNurbsCallbackDataEXT := GetProcAddress(Result, 'gluNurbsCallbackDataEXT');
    @gluNurbsCurve := GetProcAddress(Result, 'gluNurbsCurve');
    @gluNurbsProperty := GetProcAddress(Result, 'gluNurbsProperty');
    @gluNurbsSurface := GetProcAddress(Result, 'gluNurbsSurface');
    @gluOrtho2D := GetProcAddress(Result, 'gluOrtho2D');
    @gluOrtho2DCTX := GetProcAddress(Result, 'gluOrtho2DCTX');
    @gluPartialDisk := GetProcAddress(Result, 'gluPartialDisk');
    @gluPerspective := GetProcAddress(Result, 'gluPerspective');
    @gluPerspectiveCTX := GetProcAddress(Result, 'gluPerspectiveCTX');
    @gluPickMatrix := GetProcAddress(Result, 'gluPickMatrix');
    @gluPickMatrixCTX := GetProcAddress(Result, 'gluPickMatrixCTX');
    @gluProject := GetProcAddress(Result, 'gluProject');
    @gluPwlCurve := GetProcAddress(Result, 'gluPwlCurve');
    @gluQuadricDrawStyle := GetProcAddress(Result, 'gluQuadricDrawStyle');
    @gluQuadricNormals := GetProcAddress(Result, 'gluQuadricNormals');
    @gluQuadricOrientation := GetProcAddress(Result, 'gluQuadricOrientation');
    @gluQuadricTexture := GetProcAddress(Result, 'gluQuadricTexture');
    @gluScaleImage := GetProcAddress(Result, 'gluScaleImage');
    @gluScaleImageCTX := GetProcAddress(Result, 'gluScaleImageCTX');
    @gluSphere := GetProcAddress(Result, 'gluSphere');
    @gluTessBeginContour := GetProcAddress(Result, 'gluTessBeginContour');
    @gluTessBeginPolygon := GetProcAddress(Result, 'gluTessBeginPolygon');
    @gluTessEndContour := GetProcAddress(Result, 'gluTessEndContour');
    @gluTessEndPolygon := GetProcAddress(Result, 'gluTessEndPolygon');
    @gluTessNormal := GetProcAddress(Result, 'gluTessNormal');
    @gluTessProperty := GetProcAddress(Result, 'gluTessProperty');
    @gluTessVertex := GetProcAddress(Result, 'gluTessVertex');
    @gluUnProject := GetProcAddress(Result, 'gluUnProject');
    @gluUnProject4 := GetProcAddress(Result, 'gluUnProject4');
}
  end;
end;

end.
