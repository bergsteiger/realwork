{*******************************************************}
{                                                       }
{                Delphi Runtime Library                 }
{                                                       }
{          Files: shlobj.h, shobjidl.h, shtypes.h,      }
{                 shldisp.h, shlguid.h                  }
{          Copyright (c) Microsoft Corporation          }
{          All Rights Reserved.                         }
{                                                       }
{       Translator: Embarcadero Technologies, Inc.      }
{ Copyright(c) 1995-2013 Embarcadero Technologies, Inc. }
{                                                       }
{*******************************************************}

{*******************************************************}
{       Win32 API Shell objects Interface Unit          }
{*******************************************************}

unit Winapi.ShlObj;

{$ALIGN ON}
{$MINENUMSIZE 4}
{$WEAKPACKAGEUNIT}

interface

uses Winapi.Windows, Winapi.ActiveX, Winapi.CommCtrl, Winapi.ShellAPI, Winapi.RegStr, Winapi.Messages, Winapi.WinInet, Winapi.UrlMon,
  Winapi.ObjectArray, Winapi.PropSys, Winapi.StructuredQueryCondition, Winapi.MSXMLIntf;

{$HPPEMIT '#include <ole2.h>'}
{$HPPEMIT '#include <prsht.h>'}
{$HPPEMIT '#include <commctrl.h>'}
{$HPPEMIT '#include <shlguid.h>'}
{$HPPEMIT '#include <shlobj.h>'}
{$HPPEMIT '#include <shldisp.h>'}
{$HPPEMIT ''}
{$HPPEMIT '#ifndef _WIN64'}
{$HPPEMIT '#pragma link "shell32.lib"}
{$HPPEMIT '#endif //_WIN64'}
{$HPPEMIT ''}
{$HPPEMIT '#define DECLARE_DINTERFACE_TYPE_UUID(uuid, iface) \'}
{$HPPEMIT '        interface DECLSPEC_UUID(uuid) iface;      \'}
{$HPPEMIT '        typedef System::DelphiInterface< iface >  _di_ ## iface;'}
{$HPPEMIT ''}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("000214E4-0000-0000-C000-000000000046", IContextMenu)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("000214F4-0000-0000-C000-000000000046", IContextMenu2)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("BCFCE0A0-EC17-11D0-8D10-00A0C90F2719", IContextMenu3)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("7F9185B0-CB92-43C5-80A9-92277A4F7B54", IExecuteCommand)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("000214EA-0000-0000-C000-000000000046", IPersistFolder)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("85788D00-6807-11D0-B810-00C04FD706EC", IRunnableTask)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("6CCB7BE0-6807-11D0-B810-00C04FD706EC", IShellTaskScheduler)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("C7B236CE-EE80-11D0-985F-006008059382", IQueryCodePage)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("1AC3D9F0-175C-11D1-95BE-00609797EA4F", IPersistFolder2)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("CEF04FDF-FE72-11D2-87A5-00C04F6837CF", IPersistFolder3)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("1079ACFC-29BD-11D3-8E0D-00C04F6837D5", IPersistIDList)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("000214F2-0000-0000-C000-000000000046", IEnumIDList)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("D0191542-7954-4908-BC06-B2360BBE45BA", IEnumFullIDList)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("6A9D9026-0E6E-464C-B000-42ECC07DE673", IObjectWithFolderEnumMode)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("67EFED0E-E827-4408-B493-78F3982B685C", IParseAndCreateItem)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("000214E6-0000-0000-C000-000000000046", IShellFolder)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("0E700BE1-9DB6-11D1-A1CE-00C04FD75D13", IEnumExtraSearch)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("93F2F68C-1D1B-11D3-A30E-00C04F79ABD1", IShellFolder2)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("3CC974D2-B302-4D36-AD3E-06D93F695D3F", IFolderViewOptions)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("000214E3-0000-0000-C000-000000000046", IShellView)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("88E39E80-3578-11CF-AE69-08002B2E1262", IShellView2)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("EC39FA88-F8AF-41C5-8421-38BED28F4673", IShellView3)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("CDE725B0-CCC9-4519-917E-325D72FAB4CE", IFolderView)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("6AF6E03F-D664-4EF4-9626-F7E0ED36755E", ISearchBoxInfo)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("1AF3A467-214F-4298-908E-06B03E0B39F9", IFolderView2)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("AE8C987D-8797-4ED3-BE72-2A47DD938DB0", IFolderViewSettings)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("196BF9A5-B346-4EF0-AA1E-5DCDB76768B1", IPreviewHandlerVisuals)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("E693CF68-D967-4112-8763-99172AEE5E5A", IVisualProperties)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("000214F1-0000-0000-C000-000000000046", ICommDlgBrowser)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("10339516-2894-11D2-9039-00C04F8EEB3E", ICommDlgBrowser2)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("C8AD25A1-3294-41EE-8165-71174BD01C57", ICommDlgBrowser3)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("D8EC27BB-3F3B-4042-B10A-4ACFD924D453", IColumnManager)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("C0A651F5-B48B-11D2-B5ED-006097C686F6", IFolderFilterSite)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("9CC22886-DC8E-11D2-B1D0-00C04F8EEB3E", IFolderFilter)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("F1DB8392-7331-11D0-8C99-00A0C92DBFE8", IInputObjectSite)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("68284FAA-6A48-11D0-8C78-00C04FD918B4", IInputObject)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("6915C085-510B-44CD-94AF-28DFA56CF92B", IInputObject2)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("000214E5-0000-0000-C000-000000000046", IShellIcon)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("000214E2-0000-0000-C000-000000000046", IShellBrowser)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("CB728B20-F786-11CE-92AD-00AA00A74CD0", IProfferService)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("43826D1E-E718-42EE-BC55-A1E261C37BFE", IShellItem)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("7E9FB0D3-919F-4307-AB2E-9B1860310C93", IShellItem2)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("BCC18B79-BA16-442F-80C4-8A59C30C463B", IShellItemImageFactory)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("A561E69A-B4B8-4113-91A5-64C6BCCA3430", IUserAccountChangeCallback)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("70629033-E363-4A28-A567-0DB78006E6D7", IEnumShellItems)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("D594D0D8-8DA7-457B-B3B4-CE5DBAAC0B88", ITransferAdviseSink)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("00ADB003-BDE9-45C6-8E29-D09F9353E108", ITransferSource)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("2DD81FE3-A83C-4DA9-A330-47249D345BA1", IEnumResources)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("FF5693BE-2CE0-4D48-B5C5-40817D1ACDB9", IShellItemResources)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("48ADDD32-3CA5-4124-ABE3-B5A72531B207", ITransferDestination)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("FE0B6665-E0CA-49B9-A178-2B5CB48D92A5", IStreamAsync)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("8A68FDDA-1FDC-4C20-8CEB-416643B5A625", IStreamUnbufferedInfo)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("04B0F1A7-9490-44BC-96E1-4296A31252E2", IFileOperationProgressSink)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("B63EA76D-1F85-456F-A19C-48159EFA858B", IShellItemArray)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("7F73BE3F-FB79-493C-A6C7-7EE14E245841", IInitializeWithItem)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("1C9CD5BB-98E9-4491-A60F-31AACC72B83C", IObjectWithSelection)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("321A6A6A-D61F-4BF3-97AE-14BE2986BB36", IObjectWithBackReferences)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("757A7D9F-919A-4118-99D7-DBB208C8CC66", IPropertyUI)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("9AF64809-5864-4C26-A720-C1F78C086EE3", ICategoryProvider)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("A3B14589-9174-49A8-89A3-06A1AE2B9BA7", ICategorizer)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("4657278B-411B-11D2-839A-00C04FD918D0", IDropTargetHelper)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("DE5BF786-477A-11D2-839D-00C04FD918D0", IDragSourceHelper)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("83E07D0D-0C5F-4163-BF1A-60B274051E40", IDragSourceHelper2)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("000214EE-0000-0000-C000-000000000046", IShellLinkA)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("000214F9-0000-0000-C000-000000000046", IShellLinkW)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("45E2B4AE-B1C3-11D0-B92F-00A0C90312E1", IShellLinkDataList)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("5CD52983-9449-11D2-963A-00C04F79ADF0", IResolveShellLink)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("49FF1172-EADC-446D-9285-156453A6431C", IActionProgressDialog)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("C1FB73D0-EC3A-4BA2-B512-8CDB9187B6D1", IHWEventHandler)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("CFCC809F-295D-42E8-9FFC-424B33C487E6", IHWEventHandler2)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("DDEFE873-6997-4E68-BE26-39B633ADBE12", IQueryCancelAutoPlay)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("DC2601D7-059E-42FC-A09D-2AFD21B6D5F7", IDynamicHWHandler)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("49FF1173-EADC-446D-9285-156453A6431C", IActionProgress)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("000214E8-0000-0000-C000-000000000046", IShellExtInit)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("000214E9-0000-0000-C000-000000000046", IShellPropSheetExt)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("000214FE-0000-0000-C000-000000000046", IRemoteComputer)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("7307055C-B24A-486B-9F25-163E597A28A9", IQueryContinue)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("F279B885-0AE9-4B85-AC06-DDECF9408941", IObjectWithCancelEvent)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("BA9711BA-5893-4787-A7E1-41277151550B", IUserNotification)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("19108294-0441-4AFF-8013-FA0A730B0BEA", IUserNotificationCallback)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("215913CC-57EB-4FAB-AB5A-E5FA7BEA2A6C", IUserNotification2)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("1DF0D7F1-B267-4D28-8B10-12E23202A5C4", IItemNameLimits)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("A0FFBC28-5482-4366-BE27-3E81E78E06C2", ISearchFolderItemFactory)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("BB2E617C-0920-11D1-9A0B-00C04FC2D6C1", IExtractImage)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("953BB1EE-93B4-11D1-98A3-00C04FB687DA", IExtractImage2)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("E35B4B2E-00DA-4BC1-9F13-38BC11F5D417", IThumbnailHandlerFactory)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("B3A4B685-B685-4805-99D9-5DEAD2873236", IParentAndItem)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("012DD920-7B26-11D0-8CA9-00A0C92DBFE8", IDockingWindow)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("EB0FE172-1A3A-11D0-89B3-00A0C90A90AC", IDeskBand)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("77E425FC-CBF9-4307-BA6A-BB5727745661", IDeskBandInfo)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("79D16DE4-ABEE-4021-8D9D-9169B261D657", IDeskBand2)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("56FDF342-FD6D-11D0-958A-006097C9A090", ITaskbarList)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("602D4995-B13A-429B-A66E-1935E44F4317", ITaskbarList2)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("EA1AFB91-9E28-4B86-90E9-9E9F8A5EEFAF", ITaskbarList3)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("C43DC798-95D1-4BEA-9030-BB99E2983A1A", ITaskbarList4)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("4CD19ADA-25A5-4A32-B3B7-347BEE5BE36B", IStartMenuPinnedList)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("3D73A659-E5D0-4D42-AFC0-5121BA425C8D", ICDBurn)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("88960F5B-422F-4E7B-8013-73415381C3C3", IWizardSite)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("C02EA696-86CC-491E-9B23-74394A0444A8", IWizardExtension)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("0E6B3F66-98D1-48C0-A222-FBDE74E2FBC5", IWebWizardExtension)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("AA9198BB-CCEC-472D-BEED-19A4F6733F7A", IPublishingWizard)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("1EA58F02-D55A-411D-B09E-9E65AC21605B", IFolderViewHost)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("361BBDC7-E6EE-4E13-BE58-58E2240C810F", IExplorerBrowserEvents)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("DFD3B6B5-C10C-4BE9-85F6-A66969F402F6", IExplorerBrowser)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("95A391C5-9ED4-4C28-8401-AB9E06719E11", IAccessibleObject)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("96E5AE6D-6AE1-4B1C-900C-C6480EAA8828", IResultsFolder)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("2C1C7E2E-2D0E-4059-831E-1E6F82335C2E", IEnumObjects)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("0C9FB851-E5C9-43EB-A370-F0677B13874C", IOperationsProgressDialog)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("F5B0BF81-8CB5-4B1B-9449-1A159E0C733C", IIOCancelInformation)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("947AAB5F-0A5C-4C13-B4D6-4BF7836FC9F8", IFileOperation)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("A6087428-3BE3-4D73-B308-7C04A540BF1A", IObjectProvider)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("D92995F8-CF5E-4A76-BF59-EAD39EA2B97E", INamespaceWalkCB)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("7AC7492B-C38E-438A-87DB-68737844FF70", INamespaceWalkCB2)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("57CED8A7-3F4A-432C-9350-30F24483F74F", INamespaceWalk)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("3CD141F4-3C6A-11D2-BCAA-00C04FD929DB", IAutoCompleteDropDown)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("4CF504B0-DE96-11D0-8B3F-00A0C911E8E5", IBandSite)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("B4DB1657-70D7-485E-8E3E-6FCB5A5C1802", IModalWindow)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("2271DCCA-74FC-4414-8FB7-C56B05ACE2D7", ICDBurnExt)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("0811AEBE-0B87-4C54-9E72-548CF649016B", IContextMenuSite)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("61E00D45-8FFF-4E60-924E-6537B61612DD", IEnumReadyCallback)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("8C8BF236-1AEC-495F-9894-91D57C3C686F", IEnumerableView)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("D2B57227-3D23-4B95-93C0-492BD454C356", IInsertItem)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("568804CD-CBD7-11D0-9816-00C04FD91972", IMenuBand)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("47C01F95-E185-412C-B5C5-4F27DF965AEA", IFolderBandPriv)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("A9521922-0812-4D44-9EC3-7FD38C726F3D", IRegTreeItem)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("505F1513-6B3E-4892-A272-59F8889A4D3E", IImageRecompress)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("EB0FE173-1A3A-11D0-89B3-00A0C90A90AC", IDeskBar)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("D1E7AFEB-6A2E-11D0-8C78-00C04FD918B4", IMenuPopup)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("64A1CBF0-3A1A-4461-9158-376969693950", IFileIsInUse)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("973510DB-7D7F-452B-8975-74A85828D354", IFileDialogEvents)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("42F85136-DB7E-439C-85F1-E4075D135FC8", IFileDialog)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("84BCCD23-5FDE-4CDB-AEA4-AF64B83D78AB", IFileSaveDialog)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("D57C7288-D4AD-4768-BE02-9D969532D960", IFileOpenDialog)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("E6FDD21A-163F-4975-9C8C-A69F1BA37034", IFileDialogCustomize)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("36116642-D713-4B97-9B83-7484A9D00433", IFileDialogControlEvents)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("61744FC7-85B5-4791-A9B0-272276309B13", IFileDialog2)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("4E530B0A-E611-4C77-A3AC-9031D022281B", IApplicationAssociationRegistration)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("1F76A169-F994-40AC-8FC8-0959E8874710", IApplicationAssociationRegistrationUI)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("ADD8BA80-002B-11D0-8F0F-00C04FD7D062", IDelegateFolder)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("10DF43C8-1DBE-11D3-8B34-006097DF5BD4", IBrowserFrameOptions)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("D2BC4C84-3F72-4A52-A604-7BCBF3982CBB", INewWindowManager)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("73DB1241-1E85-4581-8E4F-A81E1D0F8C57", IAttachmentExecute)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("4CA300A1-9B8D-11D1-8B22-00C04FD918D0", IShellMenuCallback)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("EE1F7637-E138-11D1-8379-00C04FD918D0", IShellMenu)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("FCE4BDE0-4B68-4B80-8E9C-7426315A7388", IShellRunDll)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("3AA7AF7E-9B36-420C-A8E3-F77D4674A488", IKnownFolder)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("8BE2D872-86AA-4D47-B776-32CCA40C7018", IKnownFolderManager)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("B4CD448A-9C86-4466-9201-2E62105B87AE", ISharingConfigurationManager)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("76E54780-AD74-48E3-A695-3BA9A0AFF10D", IPreviousVersionsInfo)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("A73CE67A-8AB1-44F1-8D43-D2FCBF6B1CD0", IRelatedItem)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("7D903FCA-D6F9-4810-8332-946C0177E247", IIdentityName)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("3C5A1C94-C951-4CB7-BB6D-3B93F30CCE93", IDelegateItem)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("240A7174-D653-4A1D-A6D3-D4943CFBFE3D", ICurrentItem)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("77F295D5-2D6F-4E19-B8AE-322F3E721AB5", ITransferMediumItem)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("05EDDA5C-98A3-4717-8ADB-C5E7DA991EB1", IUseToBrowseItem)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("C6FD5997-9F6B-4888-8703-94E80E8CDE3F", IDisplayItem)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("9D264146-A94F-4195-9F9F-3BB12CE0C955", IViewStateIdentityItem)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("36149969-0A8F-49c8-8B00-4AECB20222FB", IPreviewItem)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("8A87781B-39A7-4A1F-AAB3-A39B9C34A7D9", IDestinationStreamFactory)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("DCB07FDC-3BB5-451C-90BE-966644FED7B0", INewMenuClient)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("71C0D2BC-726D-45CC-A6C0-2E31C1DB2159", IInitializeWithBindCtx)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("2659B475-EEB8-48B7-8F07-B378810F48CF", IShellItemFilter)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("028212A3-B627-47E9-8856-C14265554E4F", INameSpaceTreeControl)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("7CC7AED8-290E-49BC-8945-C1401CC9306C", INameSpaceTreeControl2)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("93D77985-B3D8-4484-8318-672CDDA002CE", INameSpaceTreeControlEvents)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("F9C665D6-C2F2-4C19-BF33-8322D7352F51", INameSpaceTreeControlDropHandler)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("71F312DE-43ED-4190-8477-E9536B82350B", INameSpaceTreeAccessible)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("2D3BA758-33EE-42D5-BB7B-5F3431D86C78", INameSpaceTreeControlCustomDraw)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("E9701183-E6B3-4FF2-8568-813615FEC7BE", INameSpaceTreeControlFolderCapabilities)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("8895B1C6-B41F-4C1C-A562-0D564250836F", IPreviewHandler)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("FEC87AAF-35F9-447A-ADB7-20234491401A", IPreviewHandlerFrame)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("6D67E846-5B9C-4DB8-9CBC-DDE12F4254F1", ITrayDeskBand)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("B9075C7C-D48E-403F-AB99-D6C77A1084AC", IBandHost)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("E07010EC-BC17-44C0-97B0-46C7C95B9EDC", IExplorerPaneVisibility)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("3409E930-5A39-11D1-83FA-00A0C90DC849", IContextMenuCB)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("41DED17D-D6B3-4261-997D-88C60E4B1D58", IDefaultExtractIconInit)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("A08CE4D0-FA25-44AB-B57C-C7B1C323E0B9", IExplorerCommand)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("BDDACB60-7657-47AE-8445-D23E1ACF82AE", IExplorerCommandState)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("85075ACF-231F-40EA-9610-D26B7B58F638", IInitializeCommand)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("A88826F8-186F-4987-AADE-EA0CEF8FBFE8", IEnumExplorerCommand)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("64961751-0835-43C0-8FFE-D57686530E64", IExplorerCommandProvider)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("4440306E-D79A-48D0-88E6-A42692279BFB", IMarkupCallback)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("D6D2FBAE-F116-458C-8C34-03569877A2D2", IControlMarkup)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("6E0F9881-42A8-4F2A-97F8-8AF4E026D92D", IInitializeNetworkFolder)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("D11AD862-66DE-4DF4-BF6C-1F5621996AF1", IOpenControlPanel)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("0DF60D92-6818-46D6-B358-D66170DDE466", IComputerInfoChangeNotify)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("01E18D10-4D8B-11D2-855D-006008059367", IFileSystemBindData)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("3ACF075F-71DB-4AFA-81F0-3FC4FDF2A5B8", IFileSystemBindData2)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("6332DEBF-87B5-4670-90C0-5E57B408A49E", ICustomDestinationList)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("12337D35-94C6-48A0-BCE7-6A9C69D4D600", IApplicationDestinations)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("3C594F9F-9F30-47A1-979A-C9E83D3D0A06", IApplicationDocumentLists)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("36DB0196-9665-46D1-9BA7-D3709EECF9ED", IObjectWithAppUserModelID)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("71E806FB-8DEE-46FC-BF8C-7748A8A1AE13", IObjectWithProgID)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("6589B6D2-5F8D-4B9E-B7E0-23CDD9717D8C", IUpdateIDList)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("C1646BC4-F298-4F91-A204-EB2DD1709D1A", IDesktopGadget)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("7A3BD1D9-35A9-4FB3-A467-F48CAC35E2D0", IHomeGroup)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("C3E12EB5-7D8D-44F8-B6DD-0E77B34D6DE4", IInitializeWithPropertyStore)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("F0EE7333-E6FC-479B-9F25-A860C234A38E", IOpenSearchSource)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("11A66EFA-382E-451A-9234-1E0E12EF3085", IShellLibrary)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("92218CAB-ECAA-4335-8133-807FD234C2EE", IAssocHandlerInvoker)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("F04061AC-1659-4A3F-A954-775AA57FC083", IAssocHandler)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("973810AE-9599-4B88-9E4D-6EE98C9552DA", IEnumAssocHandlers)'}

{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("000214EB-0000-0000-C000-000000000046", IExtractIconA)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("000214FA-0000-0000-C000-000000000046", IExtractIconW)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("0C6C4200-C589-11D0-999A-00C04FD655E1", IShellIconOverlayIdentifier)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("F10B5E34-DD3B-42A7-AA7D-2F4EC54BB09B", IShellIconOverlayManager)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("7D688A70-C613-11D0-999B-00C04FD655E1", IShellIconOverlay)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("000214F5-0000-0000-C000-000000000046", IShellExecuteHookA)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("000214FB-0000-0000-C000-000000000046", IShellExecuteHookW)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("AC60F6A0-0FD9-11D0-99CB-00C04FD64497", IURLSearchHook)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("09F656A2-41AF-480C-88F7-16CC0D164615", ISearchContext)'} 
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("5EE44DA4-6D32-46E3-86BC-07540DEDD0E0", IURLSearchHook2)'} 
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("000214E1-0000-0000-C000-000000000046", INewShortcutHookA)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("000214F7-0000-0000-C000-000000000046", INewShortcutHookW)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("000214EF-0000-0000-C000-000000000046", ICopyHookA)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("000214FC-0000-0000-C000-000000000046", ICopyHookW)'}
{$HPPEMIT '#define IShellCopyHookA SID_ICopyHookA;'}
{$HPPEMIT '#define IShellCopyHookW SID_ICopyHookW;'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("000214F3-0000-0000-C000-000000000046", IFileViewerSite)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("000214F0-0000-0000-C000-000000000046", IFileViewerA)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("000214F8-0000-0000-C000-000000000046", IFileViewerW)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("000214EC-0000-0000-C000-000000000046", IShellDetails)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("00BB2761-6A77-11D0-A535-00C04FD7D062", IObjMgr)'} 
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("91956D21-9276-11D1-921A-006097DF5BD4", ICurrentWorkingDirectory)'} 
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("77A130B0-94FD-11D0-A544-00C04FD7D062", IACList)'} 
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("470141A0-5186-11D2-BBB6-0060977B464C", IACList2)'} 
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("EBBC7C04-315E-11D2-B62F-006097DF5BD4", IProgressDialog)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("2A342FC2-7B26-11D0-8CA9-00A0C92DBFE8", IDockingWindowSite)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("47D2657A-7B27-11D0-8CA9-00A0C92DBFE8", IDockingWindowFrame)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("4EA39266-7211-409F-B622-F63DBD16C533", IThumbnailCapture)'} 
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("6DFD582B-92E3-11D1-98A3-00C04FB687DA", IEnumShellImageStore)'} 
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("48C8118C-B924-11D1-98D5-00C04FB687DA", IShellImageStore)'} 
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("7FE80CC8-C247-11D0-B93A-00A0C90312E1", IShellFolderBand)'} 
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("EB0FE175-1A3A-11D0-89B3-00A0C90A90AC", IDeskBarClient)'} 
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("F490EB00-1240-11D1-9888-006097DEACF9", IActiveDesktop)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("52502EE0-EC80-11D0-89AB-00C04FC2972D", IActiveDesktopP)'} 
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("B22754E2-4574-11D1-9888-006097DEACF9", IADesktopP2)'} 
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("E8025004-1C42-11D2-BE2C-00A0C9A83DA1", IColumnProvider)'} 
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("D82BE2B1-5764-11D0-A96E-00C04FD705A2", IShellChangeNotify)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("00021500-0000-0000-C000-000000000046", IQueryInfo)'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("710EB7A0-45ED-11D0-924A-0020AFC7AC4D", IDefViewFrame)'} 
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("87D605E0-C511-11CF-89A9-00A0C9054129", IDocViewSite)'} 
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("4622AD16-FF23-11D0-8D34-00A0C90F2719", IInitializeObject)'} 
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("596A9A94-013E-11D1-8D34-00A0C90F2719", IBanneredBar)'} 
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("2047E320-F2A9-11CE-AE65-08002B2E1262", IShellFolderViewCB)'} 
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("37A378C0-F82D-11CE-AE65-08002B2E1262", IShellFolderView)'} 
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("FB700430-952C-11D1-946F-000000000000", INamedPropertyBag)'} 
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("3050F844-98B5-11CF-BB82-00AA00BDCE0B", IEnumPrivacyRecords)'} 

{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("9BA05970-F6A8-11CF-A442-00A0C90A8F39", IFolderViewOC);'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("62112AA2-EBE4-11cf-A5FB-0020AFE7292D", DShellFolderViewEvents);'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("4a3df050-23bd-11d2-939f-00a0c91eedba", DFConstraint);'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("FAC32C80-CBE4-11CE-8350-444553540000", FolderItem);'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("744129E0-CBE5-11CE-8350-444553540000", FolderItems);'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("08EC3E00-50B0-11CF-960C-0080C7F4EE85", FolderItemVerb);'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("1F8352C0-50B0-11CF-960C-0080C7F4EE85", FolderItemVerbs);'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("BBCBDE60-C3FF-11CE-8350-444553540000", Folder);'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("f0d2d8ef-3890-11d2-bf8b-00c04fb93661", Folder2);'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("A7AE5F64-C4D7-4d7f-9307-4D24EE54B841", Folder3);'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("edc817aa-92b8-11d1-b075-00c04fc33aa5", FolderItem2);'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("C94F0AD0-F363-11d2-A327-00C04F8EEC7F", FolderItems2);'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("eaa7c309-bbec-49d5-821d-64d966cb667f", FolderItems3);'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("88A05C00-F000-11CE-8350-444553540000", IShellLinkDual);'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("317EE249-F12E-11d2-B1E4-00C04F8EEB3E", IShellLinkDual2);'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("E7A1AF80-4D96-11CF-960C-0080C7F4EE85", IShellFolderViewDual);'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("31C147b6-0ADE-4A3C-B514-DDF932EF6D17", IShellFolderViewDual2);'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("29EC8E6C-46D3-411f-BAAA-611A6C9CAC66", IShellFolderViewDual3);'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("D8F015C0-C278-11CE-A49E-444553540000", IShellDispatch);'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("A4C6892C-3BA9-11d2-9DEA-00C04FB16162", IShellDispatch2);'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("177160ca-bb5a-411c-841d-bd38facdeaa0", IShellDispatch3);'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("efd84b2d-4bcf-4298-be25-eb542a59fbda", IShellDispatch4);'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("866738b9-6cf2-4de8-8767-f794ebe74f4e", IShellDispatch5);'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("2D91EEA1-9932-11d2-BE86-00A0C9A83DA1", IFileSearchBand);'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("18bcc359-4990-4bfb-b951-3c83702be5f9", IWebWizardHost);'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("0751c551-7568-41c9-8e5b-e22e38919236", INewWDEvents);'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("00bb2762-6a77-11d0-a535-00c04fd7d062", IAutoComplete);'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("EAC04BC0-3791-11d2-BB95-0060977B464C", IAutoComplete2);'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("8E74C210-CF9D-4eaf-A403-7356428F0A5A", IEnumACString);'}
{$HPPEMIT 'DECLARE_DINTERFACE_TYPE_UUID("3D8B0590-F691-11d2-8EA9-006097DF5BD4", IAsyncOperation);'}
{$HPPEMIT ''}
{$HPPEMIT '#ifdef UNICODE'}
{$HPPEMIT 'typedef _di_INewShortcutHookW _di_INewShortcutHook;'}
{$HPPEMIT 'typedef _di_IFileViewerW _di_IFileViewer;'}
{$HPPEMIT 'typedef _di_IShellLinkW _di_IShellLink;'}
{$HPPEMIT 'typedef _di_IExtractIconW _di_IExtractIcon;'}
{$HPPEMIT 'typedef _di_IShellExecuteHookW _di_IShellExecuteHook;'}
{$HPPEMIT 'typedef _di_ICopyHookW _di_ICopyHook;'}
{$HPPEMIT '#else'}
{$HPPEMIT 'typedef _di_INewShortcutHookA _di_INewShortcutHook;'}
{$HPPEMIT 'typedef _di_IFileViewerA _di_IFileViewer;'}
{$HPPEMIT 'typedef _di_IShellLinkA _di_IShellLink;'}
{$HPPEMIT 'typedef _di_IExtractIconA _di_IExtractIcon;'}
{$HPPEMIT 'typedef _di_IShellExecuteHookA _di_IShellExecuteHook;'}
{$HPPEMIT 'typedef _di_ICopyHookA _di_ICopyHook;'}
{$HPPEMIT '#endif'}
{$HPPEMIT ''}
{$HPPEMIT 'struct tagFVSHOWINFO;'}

// Translated From: ShTypes.h 
// Object identifiers in the explorer's name space (ItemID and IDList)
// 
//  All the items that the user can browse with the explorer (such as files,
// directories, servers, work-groups, etc.) has an identifier which is unique
// among items within the parent folder. Those identifiers are called item
// IDs (SHITEMID). Since all its parent folders have their own item IDs,
// any items can be uniquely identified by a list of item IDs, which is called
// an ID list (ITEMIDLIST).
// 
//  ID lists are almost always allocated by the task allocator (see some
// description below as well as OLE 2.0 SDK) and may be passed across
// some of shell interfaces (such as IShellFolder). Each item ID in an ID list
// is only meaningful to its parent folder (which has generated it), and all
// the clients must treat it as an opaque binary data except the first two
// bytes, which indicates the size of the item ID.
// 
//  When a shell extension -- which implements the IShellFolder interace --
// generates an item ID, it may put any information in it, not only the data
// with that it needs to identifies the item, but also some additional
// information, which would help implementing some other functions efficiently.
// For example, the shell's IShellFolder implementation of file system items
// stores the primary (long) name of a file or a directory as the item
// identifier, but it also stores its alternative (short) name, size and date
// etc.
//
//  When an ID list is passed to one of shell APIs (such as SHGetPathFromIDList),
// it is always an absolute path -- relative from the root of the name space,
// which is the desktop folder. When an ID list is passed to one of IShellFolder
// member function, it is always a relative path from the folder (unless it
// is explicitly specified).

{$ALIGN 1}
{$POINTERMATH ON}
type
// TSHItemID -- Item ID  (mkid)
  PSHItemID = ^TSHItemID;
  _SHITEMID = record
    cb: Word;                         { Size of the ID (including cb itself) }
    abID: array[0..0] of Byte;        { The item ID (variable length) }
  end;
  {$EXTERNALSYM _SHITEMID}
  TSHItemID = _SHITEMID;
  SHITEMID = _SHITEMID;
  {$EXTERNALSYM SHITEMID}


{ TItemIDList -- List if item IDs (combined with 0-terminator) }
  PItemIDList = ^TItemIDList;
  _ITEMIDLIST = record
     mkid: TSHItemID;
   end;
  {$EXTERNALSYM _ITEMIDLIST}
  TItemIDList = _ITEMIDLIST;
  ITEMIDLIST = _ITEMIDLIST;
  {$EXTERNALSYM ITEMIDLIST}
{$ALIGN ON}
  // typedef struct _BYTE_BLOB {unsigned long clSize; byte abData[1];} BYTE_BLOB; in wtypes.h
  _BYTE_BLOB = record
    clSize: ULONG;
    abData: array[0..0] of Byte;
  end;
  {$EXTERNALSYM _BYTE_BLOB}
  BYTE_BLOB = _BYTE_BLOB;
  {$EXTERNALSYM BYTE_BLOB}

  _ITEMIDLIST_RELATIVE = ITEMIDLIST;
  {$EXTERNALSYM _ITEMIDLIST_RELATIVE}
  ITEMIDLIST_RELATIVE = _ITEMIDLIST_RELATIVE;
  {$EXTERNALSYM ITEMIDLIST_RELATIVE}
  _ITEMID_CHILD = ITEMIDLIST_RELATIVE;
  {$EXTERNALSYM _ITEMID_CHILD}
  ITEMID_CHILD = _ITEMID_CHILD;
  {$EXTERNALSYM ITEMID_CHILD}
  _ITEMIDLIST_ABSOLUTE = ITEMIDLIST_RELATIVE;
  {$EXTERNALSYM _ITEMIDLIST_ABSOLUTE}
  ITEMIDLIST_ABSOLUTE = _ITEMIDLIST_ABSOLUTE;
  {$EXTERNALSYM ITEMIDLIST_ABSOLUTE}
  wirePIDL = ^BYTE_BLOB;
  {$EXTERNALSYM wirePIDL}
  LPITEMIDLIST = ^ITEMIDLIST;
  {$EXTERNALSYM LPITEMIDLIST}
  LPCITEMIDLIST = ^ITEMIDLIST;
  {$EXTERNALSYM LPCITEMIDLIST}
  PIDLIST_ABSOLUTE = ^ITEMIDLIST_ABSOLUTE;
  {$EXTERNALSYM PIDLIST_ABSOLUTE}
  PCIDLIST_ABSOLUTE = ^ITEMIDLIST_ABSOLUTE;
  {$EXTERNALSYM PCIDLIST_ABSOLUTE}
  PCUIDLIST_ABSOLUTE = ^ITEMIDLIST_ABSOLUTE;
  {$EXTERNALSYM PCUIDLIST_ABSOLUTE}
  PIDLIST_RELATIVE = ^ITEMIDLIST_RELATIVE;
  {$EXTERNALSYM PIDLIST_RELATIVE}
  PCIDLIST_RELATIVE = ^ITEMIDLIST_RELATIVE;
  {$EXTERNALSYM PCIDLIST_RELATIVE}
  PUIDLIST_RELATIVE = ^ITEMIDLIST_RELATIVE;
  {$EXTERNALSYM PUIDLIST_RELATIVE}
  PCUIDLIST_RELATIVE = ^ITEMIDLIST_RELATIVE;
  {$EXTERNALSYM PCUIDLIST_RELATIVE}

  PITEMID_CHILD = ^ITEMID_CHILD;
  {$EXTERNALSYM PITEMID_CHILD}
  PCITEMID_CHILD = ^ITEMID_CHILD;
  {$EXTERNALSYM PCITEMID_CHILD}
  PUITEMID_CHILD = ^ITEMID_CHILD;
  {$EXTERNALSYM PUITEMID_CHILD}
  PCUITEMID_CHILD = ^ITEMID_CHILD;
  {$EXTERNALSYM PCUITEMID_CHILD}

  PCUIDLIST_CHILD_ARRAY = ^PCUITEMID_CHILD;
  {$EXTERNALSYM PCUIDLIST_CHILD_ARRAY}
  PCUIDLIST_RELATIVE_ARRAY = ^PCUIDLIST_RELATIVE;
  {$EXTERNALSYM PCUIDLIST_RELATIVE_ARRAY}
  PCIDLIST_ABSOLUTE_ARRAY = ^PItemIDList;
  {$EXTERNALSYM PCIDLIST_ABSOLUTE_ARRAY}
  PCUIDLIST_ABSOLUTE_ARRAY = ^PCUIDLIST_ABSOLUTE;
  {$EXTERNALSYM PCUIDLIST_ABSOLUTE_ARRAY}


const
  STRRET_WSTR         = $0000;          { Use STRRET.pOleStr }
  {$EXTERNALSYM STRRET_WSTR}
  STRRET_OFFSET       = $0001;          { Use STRRET.uOffset to Ansi }
  {$EXTERNALSYM STRRET_OFFSET}
  STRRET_CSTR         = $0002;          { Use STRRET.cStr }
  {$EXTERNALSYM STRRET_CSTR}

type
{ record for returning strings from IShellFolder member functions }
  PSTRRet = ^TStrRet;
  _STRRET = record
     uType: UINT;              { One of the STRRET_* values }
     case Integer of
       0: (pOleStr: LPWSTR);                    { must be freed by caller of GetDisplayNameOf }
       1: (pStr: LPSTR);                        { NOT USED }
       2: (uOffset: UINT);                      { Offset into SHITEMID (ANSI) }
       3: (cStr: array[0..MAX_PATH-1] of AnsiChar); { Buffer to fill in }
    end;
  {$EXTERNALSYM _STRRET}
  TStrRet = _STRRET;
  STRRET = _STRRET;
  {$EXTERNALSYM STRRET}

 { IShellDetails is supported on Win9x and NT4; for >= NT5 use IShellFolder2 }
  // record for returning strings from IShellDetails
  PShellDetails = ^TShellDetails;
  _SHELLDETAILS = record
    fmt,                // LVCFMT_* value (header only)
    cxChar: Integer;    // Number of 'average' characters (header only)
    str: STRRET;        // String information
  end;
  {$EXTERNALSYM _SHELLDETAILS}
  TShellDetails = _SHELLDETAILS;
  SHELLDETAILS = _SHELLDETAILS;
  {$EXTERNALSYM SHELLDETAILS}

const
  PERCEIVED_TYPE_FIRST       = -3;
  {$EXTERNALSYM PERCEIVED_TYPE_FIRST}
  PERCEIVED_TYPE_CUSTOM      = -3;
  {$EXTERNALSYM PERCEIVED_TYPE_CUSTOM}
  PERCEIVED_TYPE_UNSPECIFIED = -2;
  {$EXTERNALSYM PERCEIVED_TYPE_UNSPECIFIED}
  PERCEIVED_TYPE_FOLDER      = -1;
  {$EXTERNALSYM PERCEIVED_TYPE_FOLDER}
  PERCEIVED_TYPE_UNKNOWN     = 0;
  {$EXTERNALSYM PERCEIVED_TYPE_UNKNOWN}
  PERCEIVED_TYPE_TEXT        = 1;
  {$EXTERNALSYM PERCEIVED_TYPE_TEXT}
  PERCEIVED_TYPE_IMAGE       = 2; 
  {$EXTERNALSYM PERCEIVED_TYPE_IMAGE}
  PERCEIVED_TYPE_AUDIO       = 3; 
  {$EXTERNALSYM PERCEIVED_TYPE_AUDIO}
  PERCEIVED_TYPE_VIDEO       = 4; 
  {$EXTERNALSYM PERCEIVED_TYPE_VIDEO}
  PERCEIVED_TYPE_COMPRESSED  = 5; 
  {$EXTERNALSYM PERCEIVED_TYPE_COMPRESSED}
  PERCEIVED_TYPE_DOCUMENT    = 6; 
  {$EXTERNALSYM PERCEIVED_TYPE_DOCUMENT}
  PERCEIVED_TYPE_SYSTEM      = 7; 
  {$EXTERNALSYM PERCEIVED_TYPE_SYSTEM}
  PERCEIVED_TYPE_APPLICATION = 8; 
  {$EXTERNALSYM PERCEIVED_TYPE_APPLICATION}
  PERCEIVED_TYPE_GAMEMEDIA   = 9; 
  {$EXTERNALSYM PERCEIVED_TYPE_GAMEMEDIA}
  PERCEIVED_TYPE_CONTACTS    = 10; 
  {$EXTERNALSYM PERCEIVED_TYPE_CONTACTS}
  PERCEIVED_TYPE_LAST        = 10; 
  {$EXTERNALSYM PERCEIVED_TYPE_LAST}

  PERCEIVEDFLAG_UNDEFINED = $0000; 
  {$EXTERNALSYM PERCEIVEDFLAG_UNDEFINED}
  PERCEIVEDFLAG_SOFTCODED = $0001; 
  {$EXTERNALSYM PERCEIVEDFLAG_SOFTCODED}
  PERCEIVEDFLAG_HARDCODED = $0002; 
  {$EXTERNALSYM PERCEIVEDFLAG_HARDCODED}
  PERCEIVEDFLAG_NATIVESUPPORT = $0004; 
  {$EXTERNALSYM PERCEIVEDFLAG_NATIVESUPPORT}
  PERCEIVEDFLAG_GDIPLUS = $0010; 
  {$EXTERNALSYM PERCEIVEDFLAG_GDIPLUS}
  PERCEIVEDFLAG_WMSDK = $0020; 
  {$EXTERNALSYM PERCEIVEDFLAG_WMSDK}
  PERCEIVEDFLAG_ZIPFOLDER = $0040; 
  {$EXTERNALSYM PERCEIVEDFLAG_ZIPFOLDER}
type
  PERCEIVEDFLAG = DWORD; 
  {$EXTERNALSYM PERCEIVEDFLAG}
  TPerceivedFlag = PERCEIVEDFLAG;

// The following declarations require Windows >= Vista
  _COMDLG_FILTERSPEC = record
    pszName: LPCWSTR;
    pszSpec: LPCWSTR;
  end;
  {$EXTERNALSYM _COMDLG_FILTERSPEC}
  COMDLG_FILTERSPEC = _COMDLG_FILTERSPEC;
  {$EXTERNALSYM COMDLG_FILTERSPEC}
  PComdlgFilterSpec = ^TComdlgFilterSpec;
  TComdlgFilterSpec = COMDLG_FILTERSPEC;

  KNOWNFOLDERID = TGUID;
  {$EXTERNALSYM KNOWNFOLDERID}
  TKnownFolderID = KnownFolderID;
  PKnownFolderID = ^TKnownFolderID;
  {$EXTERNALSYM PKNOWNFOLDERID}

  KF_REDIRECT_FLAGS = Integer;
  {$EXTERNALSYM KF_REDIRECT_FLAGS}
  TKFRedirectFlags = KF_REDIRECT_FLAGS;
  FOLDERTYPEID = TGUID;
  {$EXTERNALSYM FOLDERTYPEID}
  TFolderTypeID = FOLDERTYPEID;

  TASKOWNERID = TGUID;
  {$EXTERNALSYM TASKOWNERID}
  TTaskOwnerID = TASKOWNERID;

const
  {IShellFolder2.GetDefaultColumnState Values}
  SHCOLSTATE_DEFAULT            = $0000; 
  {$EXTERNALSYM SHCOLSTATE_DEFAULT}
  SHCOLSTATE_TYPE_STR           = $0001; 
  {$EXTERNALSYM SHCOLSTATE_TYPE_STR}
  SHCOLSTATE_TYPE_INT           = $0002; 
  {$EXTERNALSYM SHCOLSTATE_TYPE_INT}
  SHCOLSTATE_TYPE_DATE          = $0003; 
  {$EXTERNALSYM SHCOLSTATE_TYPE_DATE}
  SHCOLSTATE_TYPEMASK           = $000F; 
  {$EXTERNALSYM SHCOLSTATE_TYPEMASK}
  SHCOLSTATE_ONBYDEFAULT        = $0010;    // should on by default in details view
  {$EXTERNALSYM SHCOLSTATE_ONBYDEFAULT}
  SHCOLSTATE_SLOW               = $0020;    // will be slow to compute; do on a background thread
  {$EXTERNALSYM SHCOLSTATE_SLOW}
  SHCOLSTATE_EXTENDED           = $0040;    // provided by a handler; not the folder
  {$EXTERNALSYM SHCOLSTATE_EXTENDED}
  SHCOLSTATE_SECONDARYUI        = $0080;    // not displayed in context menu; but listed in the "More..." dialog
  {$EXTERNALSYM SHCOLSTATE_SECONDARYUI}
  SHCOLSTATE_HIDDEN             = $0100;    // not displayed in the UI
  {$EXTERNALSYM SHCOLSTATE_HIDDEN}
  SHCOLSTATE_PREFER_VARCMP      = $0200; 
  {$EXTERNALSYM SHCOLSTATE_PREFER_VARCMP}
  SHCOLSTATE_PREFER_FMTCMP      = $0400; 
  {$EXTERNALSYM SHCOLSTATE_PREFER_FMTCMP}
  SHCOLSTATE_NOSORTBYFOLDERNESS = $0800; 
  {$EXTERNALSYM SHCOLSTATE_NOSORTBYFOLDERNESS}
  SHCOLSTATE_VIEWONLY           = $10000; 
  {$EXTERNALSYM SHCOLSTATE_VIEWONLY}
  SHCOLSTATE_BATCHREAD          = $20000; 
  {$EXTERNALSYM SHCOLSTATE_BATCHREAD}
  SHCOLSTATE_NO_GROUPBY         = $40000; 
  {$EXTERNALSYM SHCOLSTATE_NO_GROUPBY}
  SHCOLSTATE_FIXED_WIDTH        = $1000; 
  {$EXTERNALSYM SHCOLSTATE_FIXED_WIDTH}
  SHCOLSTATE_NODPISCALE         = $2000; 
  {$EXTERNALSYM SHCOLSTATE_NODPISCALE}
  SHCOLSTATE_FIXED_RATIO        = $4000; 
  {$EXTERNALSYM SHCOLSTATE_FIXED_RATIO}
  SHCOLSTATE_DISPLAYMASK        = $F000; 
  {$EXTERNALSYM SHCOLSTATE_DISPLAYMASK}
type
  PShColumnID = ^TShColumnID;
  {$EXTERNALSYM PShColumnID}
  SHCOLUMNID = record
    fmtid: TGUID;
    pid: DWORD;
  end;
  {$EXTERNALSYM SHCOLUMNID}
  TShColumnID = SHCOLUMNID;
  {$EXTERNALSYM TShColumnID}

  tagDOMAIN_RELATIVE_OBJECTID = record
    guidVolume: TGUID;
    guidObject: TGUID;
  end;
  DOMAIN_RELATIVE_OBJECTID = tagDOMAIN_RELATIVE_OBJECTID;
  PDomainRelativeObjectID = ^TDomainRelativeObjectID;
  TDomainRelativeObjectID = tagDOMAIN_RELATIVE_OBJECTID;
//End shtypes.h
//tranlation of shlguid.h
const
  CLSID_NetworkDomain: TGUID     = '{46E06680-4BF0-11D1-83EE-00A0C90DC849}';
  {$EXTERNALSYM CLSID_NetworkDomain}
  CLSID_NetworkServer: TGUID     = '{C0542A90-4BF0-11D1-83EE-00A0C90DC849}';
  {$EXTERNALSYM CLSID_NetworkServer}
  CLSID_NetworkShare: TGUID      = '{54A754C0-4BF0-11D1-83EE-00A0C90DC849}';
  {$EXTERNALSYM CLSID_NetworkShare}
  CLSID_MyComputer: TGUID        = '{20D04FE0-3AEA-1069-A2D8-08002B30309D}';
  {$EXTERNALSYM CLSID_MyComputer}
  CLSID_Internet: TGUID          = '{871C5380-42A0-1069-A2EA-08002B30309D}';
  {$EXTERNALSYM CLSID_Internet}
  CLSID_RecycleBin: TGUID        = '{645FF040-5081-101B-9F08-00AA002F954E}';
  {$EXTERNALSYM CLSID_RecycleBin}
  CLSID_ControlPanel: TGUID      = '{21EC2020-3AEA-1069-A2DD-08002B30309D}';
  {$EXTERNALSYM CLSID_ControlPanel}
  CLSID_Printers: TGUID          = '{2227A280-3AEA-1069-A2DE-08002B30309D}';
  {$EXTERNALSYM CLSID_Printers}
  CLSID_MyDocuments: TGUID       = '{450D8FBA-AD25-11D0-98A8-0800361B1103}';
  {$EXTERNALSYM CLSID_MyDocuments}

  CATID_BrowsableShellExt: TGUID = '{00021490-0000-0000-C000-000000000046}';
  {$EXTERNALSYM CATID_BrowsableShellExt}
  CATID_BrowseInPlace: TGUID     = '{00021491-0000-0000-C000-000000000046}';
  {$EXTERNALSYM CATID_BrowseInPlace}
  CATID_DeskBand: TGUID          = '{00021492-0000-0000-C000-000000000046}';
  {$EXTERNALSYM CATID_DeskBand}
  CATID_InfoBand: TGUID          = '{00021493-0000-0000-C000-000000000046}';
  {$EXTERNALSYM CATID_InfoBand}
  CATID_CommBand: TGUID          = '{00021494-0000-0000-C000-000000000046}';
  {$EXTERNALSYM CATID_CommBand}

  FMTID_Intshcut: TGUID          = '{000214A0-0000-0000-C000-000000000046}';
  {$EXTERNALSYM FMTID_Intshcut}
  FMTID_InternetSite: TGUID      = '{000214A1-0000-0000-C000-000000000046}';
  {$EXTERNALSYM FMTID_InternetSite}

  CGID_Explorer: TGUID           = '{000214D0-0000-0000-C000-000000000046}';
  {$EXTERNALSYM CGID_Explorer}
  CGID_ShellDocView: TGUID       = '{000214D1-0000-0000-C000-000000000046}';
  {$EXTERNALSYM CGID_ShellDocView}
  CGID_ShellServiceObject: TGUID = '{000214D2-0000-0000-C000-000000000046}';
  {$EXTERNALSYM CGID_ShellServiceObject}
  CGID_ExplorerBarDoc: TGUID     = '{000214D3-0000-0000-C000-000000000046}';
  {$EXTERNALSYM CGID_ExplorerBarDoc}

  IID_IBriefcaseStg: TGUID             = '{8BCE1FA1-0921-101B-B1FF-00DD010CCC48}';
  {$EXTERNALSYM IID_IBriefcaseStg}
  IID_IDefViewID: TGUID                = '{985F64F0-D410-4E02-BE22-DA07F2B5C5E1}';
  {$EXTERNALSYM IID_IDefViewID}
  IDefViewID                           = IUnknown;
  {$EXTERNALSYM IDefViewID}

  CLSID_FolderShortcut: TGUID          = '{0AFACED1-E828-11D1-9187-B532F1E9575D}';
  {$EXTERNALSYM CLSID_FolderShortcut}
  CLSID_CFSIconOverlayManager: TGUID   = '{63B51F81-C868-11D0-999C-00C04FD655E1}';
  {$EXTERNALSYM CLSID_CFSIconOverlayManager}
  CLSID_ShellThumbnailDiskCache: TGUID = '{1EBDCF80-A200-11D0-A3A4-00C04FD706EC}';
  {$EXTERNALSYM CLSID_ShellThumbnailDiskCache}

  SID_DefView: TGUID    = '{6D12FE80-7911-11CF-9534-0000C05BAE0B}';
  {$EXTERNALSYM SID_DefView}
  CGID_DefView: TGUID   = '{4AF07F10-D231-11D0-B942-00A0C90312E1}';
  {$EXTERNALSYM CGID_DefView}
  CLSID_MenuBand: TGUID = '{5B4DAE26-B807-11D0-9815-00C04FD91972}';
  {$EXTERNALSYM CLSID_MenuBand}

// IShellFolderBand stuff
  VID_LargeIcons: TGUID = '{0057D0E0-3573-11CF-AE69-08002B2E1262}';
  {$EXTERNALSYM VID_LargeIcons}
  VID_SmallIcons: TGUID = '{089000C0-3573-11CF-AE69-08002B2E1262}';
  {$EXTERNALSYM VID_SmallIcons}
  VID_List: TGUID       = '{0E1FA5E0-3573-11CF-AE69-08002B2E1262}';
  {$EXTERNALSYM VID_List}
  VID_Details: TGUID    = '{137E7700-3573-11CF-AE69-08002B2E1262}';
  {$EXTERNALSYM VID_Details}
  VID_Tile: TGUID       = '{65F125E5-7BE1-4810-BA9D-D271C8432CE3}';
  {$EXTERNALSYM VID_Tile}
  VID_Content: TGUID    = '{30C2C434-0889-4C8D-985D-A9F71830B0A9}';
  {$EXTERNALSYM VID_Content}
// NOTE: This has to be the same as the old CLSID_Thumbnails
  VID_Thumbnails: TGUID = '{8BEBB290-52D0-11D0-B7F4-00C04FD706EC}';
  {$EXTERNALSYM VID_Thumbnails}
// ThumbStrip
  VID_ThumbStrip: TGUID = '{8EEFA624-D1E9-445B-94B7-74FBCE2EA11A}';
  {$EXTERNALSYM VID_ThumbStrip}
  SID_SShellDesktop: TGUID   = '{00021400-0000-0000-C000-000000000046}'; // CLSID_ShellDesktop
  {$EXTERNALSYM SID_SShellDesktop}

  SID_SInPlaceBrowser: TGUID = '{1D2AE02B-3655-46CC-B63A-285988153BCA}';
  {$EXTERNALSYM SID_SInPlaceBrowser}
  SID_SSearchBoxInfo: TGUID  = '{142DAA61-516B-4713-B49C-FB985EF82998}';
  {$EXTERNALSYM SID_SSearchBoxInfo}

// 
//  IShellDiscardable is an IID-only interface. If the object supports this
// interface it can be discarded anytime. IWebBrowser::PutProperty QI's for
// this interface to detect discardable properties.
// 
  IID_IDiscardableBrowserProperty: TGUID = '{49C3DE7C-D329-11D0-AB73-00C04FC33E80}';
  {$EXTERNALSYM IID_IDiscardableBrowserProperty}

// UrlHistory Guids
  CLSID_CUrlHistory: TGUID = '{3C374A40-BAE4-11CF-BF7D-00AA006946EE}';
  {$EXTERNALSYM CLSID_CUrlHistory}

  SID_SUrlHistory          = '{3C374A40-BAE4-11CF-BF7D-00AA006946EE}'; // CLSID_CUrlHistory;
  {$EXTERNALSYM SID_SUrlHistory}

// UrlSearchHook Guids
  CLSID_CURLSearchHook: TGUID  = '{CFBFAE00-17A6-11D0-99CB-00C04FD64497}';
  {$EXTERNALSYM CLSID_CURLSearchHook}
  SID_SInternetExplorer: TGUID = '{0002DF05-0000-0000-C000-000000000046}'; //IID_IWebBrowserApp
  {$EXTERNALSYM SID_SInternetExplorer}
  SID_SWebBrowserApp: TGUID    = '{0002DF05-0000-0000-C000-000000000046}'; //IID_IWebBrowserApp
  {$EXTERNALSYM SID_SWebBrowserApp}
  SID_SWebBrowserEventsService = '{54A8F188-9EBD-4795-AD16-9B4945119636}'; // IID_IWebBrowserEventsService;
  {$EXTERNALSYM SID_SWebBrowserEventsService}

// AutoComplete Guids
  CLSID_AutoComplete: TGUID = '{00BB2763-6A77-11D0-A535-00C04FD7D062}';
  {$EXTERNALSYM CLSID_AutoComplete}
  CLSID_ACLHistory: TGUID   = '{00BB2764-6A77-11D0-A535-00C04FD7D062}';
  {$EXTERNALSYM CLSID_ACLHistory}
  CLSID_ACListISF: TGUID    = '{03C036F1-A186-11D0-824A-00AA005B4383}';
  {$EXTERNALSYM CLSID_ACListISF}
  CLSID_ACLMRU: TGUID       = '{6756A641-DE71-11D0-831B-00AA005B4383}';
  {$EXTERNALSYM CLSID_ACLMRU}
  CLSID_ACLMulti: TGUID     = '{00BB2765-6A77-11D0-A535-00C04FD7D062}';
  {$EXTERNALSYM CLSID_ACLMulti}
  CLSID_ACLCustomMRU: TGUID = '{6935DB93-21E8-4CCC-BEB9-9FE3C77A297A}';
  {$EXTERNALSYM CLSID_ACLCustomMRU}

// IProgressDialog
  CLSID_ProgressDialog: TGUID      = '{F8383852-FCD3-11D1-A6B9-006097DF5BD4}';
  {$EXTERNALSYM CLSID_ProgressDialog}
// Progress objects exposed via QueryService
  SID_SProgressUI: TGUID           = '{F8383852-FCD3-11D1-A6B9-006097DF5BD4}'; //CLSID_ProgressDialog;
  {$EXTERNALSYM SID_SProgressUI}

// 
// Top-most browser implementation in the heirarchy. use IServiceProvider::QueryService()
// to get to interfaces (IID_IShellBrowser, IID_IShellBrowserService, etc.)
// 
  SID_STopLevelBrowser: TGUID      = '{4C96BE40-915C-11CF-99D3-00AA004AE837}';
  {$EXTERNALSYM SID_STopLevelBrowser}
  CLSID_FileTypes: TGUID           = '{B091E540-83E3-11CF-A713-0020AFD79762}';
  {$EXTERNALSYM CLSID_FileTypes}

  CLSID_ActiveDesktop: TGUID       = '{75048700-EF1F-11D0-9888-006097DEACF9}';
  {$EXTERNALSYM CLSID_ActiveDesktop}

  IID_ISynchronizedCallBack: TGUID = '{74C26041-70D1-11D1-B75A-00A0C90564FE}';
  {$EXTERNALSYM IID_ISynchronizedCallBack}
  IID_IQueryAssociations: TGUID    = '{C46CA590-3C3F-11D2-BEE6-0000F805CA57}';
  {$EXTERNALSYM IID_IQueryAssociations}

  CLSID_QueryAssociations: TGUID   = '{A07034FD-6CAA-4954-AC3F-97A27216F98A}';
  {$EXTERNALSYM CLSID_QueryAssociations}
  CLSID_LinkColumnProvider: TGUID  = '{24F14F02-7B1C-11D1-838F-0000F80461CF}';
  {$EXTERNALSYM CLSID_LinkColumnProvider}

// For Internet Shortcut Creation Command
// The shell uses this command to allow trident to save off it's per frame data in the shortcut
// and to allow it to fire the OnPersist() event on every frame
  CGID_ShortCut: TGUID            = '{93A68750-951A-11D1-946F-000000000000}';
  {$EXTERNALSYM CGID_ShortCut}
  CLSID_InternetButtons: TGUID    = '{1E796980-9CC5-11D1-A83F-00C04FC99D61}';
  {$EXTERNALSYM CLSID_InternetButtons}
  CLSID_MSOButtons: TGUID         = '{178F34B8-A282-11D2-86C5-00C04F8EEA99}';
  {$EXTERNALSYM CLSID_MSOButtons}
  CLSID_ToolbarExtButtons: TGUID  = '{2CE4B5D8-A28F-11D2-86C5-00C04F8EEA99}';
  {$EXTERNALSYM CLSID_ToolbarExtButtons}
  CLSID_DarwinAppPublisher: TGUID = '{CFCCC7A0-A282-11D1-9082-006008059382}';
  {$EXTERNALSYM CLSID_DarwinAppPublisher}
  CLSID_DocHostUIHandler: TGUID   = '{7057E952-BD1B-11D1-8919-00C04FC2C836}';
  {$EXTERNALSYM CLSID_DocHostUIHandler}

  FMTID_ShellDetails: TGUID       = '{28636AA6-953D-11D2-B5D6-00C04FD918D0}';
  {$EXTERNALSYM FMTID_ShellDetails}

  PID_FINDDATA        = 0;
  {$EXTERNALSYM PID_FINDDATA}
  PID_NETRESOURCE     = 1;
  {$EXTERNALSYM PID_NETRESOURCE}
  PID_DESCRIPTIONID   = 2;
  {$EXTERNALSYM PID_DESCRIPTIONID}
  PID_WHICHFOLDER     = 3;
  {$EXTERNALSYM PID_WHICHFOLDER}
  PID_NETWORKLOCATION = 4;
  {$EXTERNALSYM PID_NETWORKLOCATION}
  PID_COMPUTERNAME    = 5;
  {$EXTERNALSYM PID_COMPUTERNAME}

  FMTID_Storage: TGUID               = '{B725F130-47EF-101A-A5F1-02608C9EEBAC}';
  {$EXTERNALSYM FMTID_Storage}

// Image properties
  FMTID_ImageProperties: TGUID       = '{14B81DA1-0135-4D31-96D9-6CBFC9671A99}';
  {$EXTERNALSYM FMTID_ImageProperties}

// Custom Image Properties (not EXIF tags, which go into the auxiliary image property store)
  FMTID_CustomImageProperties: TGUID = '{7ECD8B0E-C136-4A9B-9411-4EBD6673CCC3}';
  {$EXTERNALSYM FMTID_CustomImageProperties}

// Library properties
  FMTID_LibraryProperties: TGUID     = '{5D76B67F-9B3D-44BB-B6AE-25DA4F638A67}';
  {$EXTERNALSYM FMTID_LibraryProperties}

// The GUIDs used to identify shell item attributes (columns). See IShellFolder2::GetDetailsEx implementations...
  FMTID_Displaced: TGUID = '{9B174B33-40FF-11D2-A27E-00C04FC30871}';
  {$EXTERNALSYM FMTID_Displaced}
  PID_DISPLACED_FROM = 2;
  {$EXTERNALSYM PID_DISPLACED_FROM}
  PID_DISPLACED_DATE = 3;
  {$EXTERNALSYM PID_DISPLACED_DATE}

  FMTID_Briefcase: TGUID = '{328D8B21-7729-4BFC-954C-902B329D56B0}';
  {$EXTERNALSYM FMTID_Briefcase}
  PID_SYNC_COPY_IN = 2;
  {$EXTERNALSYM PID_SYNC_COPY_IN}

  FMTID_Misc: TGUID = '{9B174B34-40FF-11D2-A27E-00C04FC30871}';
  {$EXTERNALSYM FMTID_Misc}
  PID_MISC_STATUS      = 2;
  {$EXTERNALSYM PID_MISC_STATUS}
  PID_MISC_ACCESSCOUNT = 3;
  {$EXTERNALSYM PID_MISC_ACCESSCOUNT}
  PID_MISC_OWNER       = 4;
  {$EXTERNALSYM PID_MISC_OWNER}
  PID_HTMLINFOTIPFILE  = 5;
  {$EXTERNALSYM PID_HTMLINFOTIPFILE}
  PID_MISC_PICS        = 6;
  {$EXTERNALSYM PID_MISC_PICS}

  FMTID_WebView: TGUID = '{F2275480-F782-4291-BD94-F13693513AEC}';
  {$EXTERNALSYM FMTID_WebView}
  PID_DISPLAY_PROPERTIES = 0;
  {$EXTERNALSYM PID_DISPLAY_PROPERTIES}
  PID_INTROTEXT          = 1;
  {$EXTERNALSYM PID_INTROTEXT}

  FMTID_MUSIC: TGUID = '{56A3372E-CE9C-11D2-9F0E-006097C686F6}';
  {$EXTERNALSYM FMTID_MUSIC}
  PIDSI_ARTIST    = 2;
  {$EXTERNALSYM PIDSI_ARTIST}
  PIDSI_SONGTITLE = 3;
  {$EXTERNALSYM PIDSI_SONGTITLE}
  PIDSI_ALBUM     = 4;
  {$EXTERNALSYM PIDSI_ALBUM}
  PIDSI_YEAR      = 5;
  {$EXTERNALSYM PIDSI_YEAR}
  PIDSI_COMMENT   = 6;
  {$EXTERNALSYM PIDSI_COMMENT}
  PIDSI_TRACK     = 7;
  {$EXTERNALSYM PIDSI_TRACK}
  PIDSI_GENRE     = 11;
  {$EXTERNALSYM PIDSI_GENRE}
  PIDSI_LYRICS    = 12;
  {$EXTERNALSYM PIDSI_LYRICS}

  FMTID_DRM: TGUID = '{AEAC19E4-89AE-4508-B9B7-BB867ABEE2ED}';
  {$EXTERNALSYM FMTID_DRM}
  PIDDRSI_PROTECTED   = 2;
  {$EXTERNALSYM PIDDRSI_PROTECTED}
  PIDDRSI_DESCRIPTION = 3;
  {$EXTERNALSYM PIDDRSI_DESCRIPTION}
  PIDDRSI_PLAYCOUNT   = 4;
  {$EXTERNALSYM PIDDRSI_PLAYCOUNT}
  PIDDRSI_PLAYSTARTS  = 5;
  {$EXTERNALSYM PIDDRSI_PLAYSTARTS}
  PIDDRSI_PLAYEXPIRES = 6;
  {$EXTERNALSYM PIDDRSI_PLAYEXPIRES}

//  FMTID_VideoSummaryInformation property identifiers.  See propkey.h for their types.
  PIDVSI_STREAM_NAME = $00000002;      // "System.Video.StreamName"   (old name "StreamName")
  {$EXTERNALSYM PIDVSI_STREAM_NAME}
  PIDVSI_FRAME_WIDTH = $00000003;      // "System.Video.FrameWidth"   (old name "FrameWidth")
  {$EXTERNALSYM PIDVSI_FRAME_WIDTH}
  PIDVSI_FRAME_HEIGHT = $00000004;     // "System.Video.FrameHeight"  (old name "FrameHeight")
  {$EXTERNALSYM PIDVSI_FRAME_HEIGHT}
  PIDVSI_TIMELENGTH = $00000007;       //                             (old name "TimeLength")
  {$EXTERNALSYM PIDVSI_TIMELENGTH}
  PIDVSI_FRAME_COUNT = $00000005;      // "System.Media.FrameCount"   (old name "FrameCount")
  {$EXTERNALSYM PIDVSI_FRAME_COUNT}
  PIDVSI_FRAME_RATE = $00000006;       // "System.Video.FrameRate"    (old name "FrameRate")
  {$EXTERNALSYM PIDVSI_FRAME_RATE}
  PIDVSI_DATA_RATE = $00000008;        // "System.Video.DataRate"     (old name "DataRate")
  {$EXTERNALSYM PIDVSI_DATA_RATE}
  PIDVSI_SAMPLE_SIZE = $00000009;      // "System.Video.SampleSize"   (old name "SampleSize")
  {$EXTERNALSYM PIDVSI_SAMPLE_SIZE}
  PIDVSI_COMPRESSION = $0000000A;      // "System.Video.Compression"  (old name "Compression")
  {$EXTERNALSYM PIDVSI_COMPRESSION}
  PIDVSI_STREAM_NUMBER = $0000000B;    // "System.Video.StreamNumber" (old name "StreamNumber")
  {$EXTERNALSYM PIDVSI_STREAM_NUMBER}

//  FMTID_AudioSummaryInformation property identifiers
  PIDASI_FORMAT = $00000002;           // VT_BSTR
  {$EXTERNALSYM PIDASI_FORMAT}
  PIDASI_TIMELENGTH = $00000003;       // VT_UI4, milliseconds
  {$EXTERNALSYM PIDASI_TIMELENGTH}
  PIDASI_AVG_DATA_RATE = $00000004;    // VT_UI4,  Hz
  {$EXTERNALSYM PIDASI_AVG_DATA_RATE}
  PIDASI_SAMPLE_RATE = $00000005;      // VT_UI4,  bits
  {$EXTERNALSYM PIDASI_SAMPLE_RATE}
  PIDASI_SAMPLE_SIZE = $00000006;      // VT_UI4,  bits
  {$EXTERNALSYM PIDASI_SAMPLE_SIZE}
  PIDASI_CHANNEL_COUNT = $00000007;    // VT_UI4
  {$EXTERNALSYM PIDASI_CHANNEL_COUNT}
  PIDASI_STREAM_NUMBER = $00000008;    // VT_UI2
  {$EXTERNALSYM PIDASI_STREAM_NUMBER}
  PIDASI_STREAM_NAME = $00000009;      // VT_LPWSTR
  {$EXTERNALSYM PIDASI_STREAM_NAME}
  PIDASI_COMPRESSION = $0000000A;      // VT_LPWSTR
  {$EXTERNALSYM PIDASI_COMPRESSION}

  PID_CONTROLPANEL_CATEGORY = 2;
  {$EXTERNALSYM PID_CONTROLPANEL_CATEGORY}

  FMTID_Volume: TGUID       = '{9B174B35-40FF-11D2-A27E-00C04FC30871}';
  {$EXTERNALSYM FMTID_Volume}
  PID_VOLUME_FREE       = 2;
  {$EXTERNALSYM PID_VOLUME_FREE}
  PID_VOLUME_CAPACITY   = 3;
  {$EXTERNALSYM PID_VOLUME_CAPACITY}
  PID_VOLUME_FILESYSTEM = 4;
  {$EXTERNALSYM PID_VOLUME_FILESYSTEM}

  PID_SHARE_CSC_STATUS = 2;     // server or share status, "online" "offline"
  {$EXTERNALSYM PID_SHARE_CSC_STATUS}

  PID_LINK_TARGET      = 2;
  {$EXTERNALSYM PID_LINK_TARGET}
  PID_LINK_TARGET_TYPE = 3;
  {$EXTERNALSYM PID_LINK_TARGET_TYPE}

  FMTID_Query: TGUID = '{49691C90-7E17-101A-A91C-08002B2ECDA9}';
  {$EXTERNALSYM FMTID_Query}
  PID_QUERY_RANK = 2;
  {$EXTERNALSYM PID_QUERY_RANK}

  CLSID_HWShellExecute: TGUID            = '{FFB8655F-81B9-4FCE-B89C-9A6BA76D13E7}';
  {$EXTERNALSYM CLSID_HWShellExecute}
  CLSID_DragDropHelper: TGUID            = '{4657278A-411B-11D2-839A-00C04FD918D0}';
  {$EXTERNALSYM CLSID_DragDropHelper}
  CLSID_CAnchorBrowsePropertyPage: TGUID = '{3050F3BB-98B5-11CF-BB82-00AA00BDCE0B}';
  {$EXTERNALSYM CLSID_CAnchorBrowsePropertyPage}
  CLSID_CImageBrowsePropertyPage: TGUID  = '{3050F3B3-98B5-11CF-BB82-00AA00BDCE0B}';
  {$EXTERNALSYM CLSID_CImageBrowsePropertyPage}
  CLSID_CDocBrowsePropertyPage: TGUID    = '{3050F3B4-98B5-11CF-BB82-00AA00BDCE0B}';
  {$EXTERNALSYM CLSID_CDocBrowsePropertyPage}

  SID_STopWindow: TGUID           = '{49E1B500-4636-11D3-97F7-00C04F45D0B3}';
  {$EXTERNALSYM SID_STopWindow}
  SID_SGetViewFromViewDual: TGUID = '{889A935D-971E-4B12-B90C-24DFC9E1E5E8}';
  {$EXTERNALSYM SID_SGetViewFromViewDual}

  CLSID_FolderItem: TGUID            = '{FEF10FA2-355E-4E06-9381-9B24D7F7CC88}';
  {$EXTERNALSYM CLSID_FolderItem}
  CLSID_FolderItemsMultiLevel: TGUID = '{53C74826-AB99-4D33-ACA4-3117F51D3788}';
  {$EXTERNALSYM CLSID_FolderItemsMultiLevel}
  CLSID_NewMenu: TGUID               = '{D969A300-E7FF-11D0-A93B-00A0C90F2719}';
  {$EXTERNALSYM CLSID_NewMenu}

//  BHIDs for IShellItem::BindToHandler()

// use this for IShellFolder::BindToObject() objects; IShellFolder
  BHID_SFObject: TGUID          = '{3981E224-F559-11D3-8E3A-00C04F6837D5}';
  {$EXTERNALSYM BHID_SFObject}
  // use this for IShellFolder::GetUIObject() objects; IContextMenu, IDataObject, IDropTarget, IQueryAssociation, etc.
  BHID_SFUIObject: TGUID        = '{3981E225-F559-11D3-8E3A-00C04F6837D5}';
  {$EXTERNALSYM BHID_SFUIObject}
  // use this for IShellFolder::CreateViewObject() objects; IShellView, IDropTarget, IContextMenu
  BHID_SFViewObject: TGUID      = '{3981E226-F559-11D3-8E3A-00C04F6837D5}';
  {$EXTERNALSYM BHID_SFViewObject}
  // use this for storage objects like IStream, IPropertyStore, IStorage
  BHID_Storage: TGUID           = '{3981E227-F559-11D3-8E3A-00C04F6837D5}';
  {$EXTERNALSYM BHID_Storage}
  // use this to get an IStream for the item
  BHID_Stream: TGUID            = '{1CEBB3AB-7C10-499A-A417-92CA16C4CB83}';
  {$EXTERNALSYM BHID_Stream}
  // use this to deref the item if it is a link to get its target item, use IShellItem
  BHID_LinkTargetItem: TGUID    = '{3981E228-F559-11D3-8E3A-00C04F6837D5}';
  {$EXTERNALSYM BHID_LinkTargetItem}
  // if the item is a folder use this to get an IEnumShellItems that enumerates the storage contents
  BHID_StorageEnum: TGUID       = '{4621A4E3-F0D6-4773-8A9C-46E77B174840}';
  {$EXTERNALSYM BHID_StorageEnum}
  // if the item is a folder use this to get an ITransferSource or ITransferDestiation object
  BHID_Transfer: TGUID          = '{D5E346A1-F753-4932-B403-4574800E2498}';
  {$EXTERNALSYM BHID_Transfer}
  // use this to get an IPropertyStore or IPropertyStoreFactory
  // to have more control over the property store for the item
  BHID_PropertyStore: TGUID     = '{0384E1A4-1523-439C-A4C8-AB911052F586}';
  {$EXTERNALSYM BHID_PropertyStore}
  // use this to get IExtractImage / IThumbnailProvider for an item
  BHID_ThumbnailHandler: TGUID  = '{7B2E650A-8E20-4F4A-B09E-6597AFC72FB0}';
  {$EXTERNALSYM BHID_ThumbnailHandler}
  // if the item is a folder use this to get an IEnumShellItems that enumerates all items
  // in the folder including folders, non folders and hidden items
  BHID_EnumItems: TGUID         = '{94F60519-2850-4924-AA5A-D15E84868039}';
  {$EXTERNALSYM BHID_EnumItems}
  // use this to get an IDataObject for an item or an array of items IShellItem/IShellItemArray::BindToHandler()
  BHID_DataObject: TGUID        = '{B8C0BD9F-ED24-455C-83E6-D5390C4FE8C4}';
  {$EXTERNALSYM BHID_DataObject}
  // use this to get an IQueryAssociations for an item or an array of items IShellItem/IShellItemArray::BindToHandler()
  BHID_AssociationArray: TGUID  = '{BEA9EF17-82F1-4F60-9284-4F8DB75C3BE9}';
  {$EXTERNALSYM BHID_AssociationArray}
  // use this to get an IFilter for an item
  BHID_Filter: TGUID            = '{38D08778-F557-4690-9EBF-BA54706AD8F7}';
  {$EXTERNALSYM BHID_Filter}
  // use this to retrieve an IEnumAssocHandlers that enumerates the association handlers for the given item.  Returns an
  // enumeration of recommended handlers, similar to calling SHAssocEnumHandlers with ASSOC_FILTER_RECOMMENDED.
  BHID_EnumAssocHandlers: TGUID = '{B8AB0B9C-C2EC-4F7A-918D-314900E6280A}';
  {$EXTERNALSYM BHID_EnumAssocHandlers}

  SID_CtxQueryAssociations: TGUID = '{FAADFC40-B777-4B69-AA81-77035EF0E6E8}';
  {$EXTERNALSYM SID_CtxQueryAssociations}
  CLSID_QuickLinks: TGUID         = '{0E5CBF21-D15F-11D0-8301-00AA005B4383}';
  {$EXTERNALSYM CLSID_QuickLinks}

// The IShellFolder band
  CLSID_ISFBand: TGUID        = '{D82BE2B0-5764-11D0-A96E-00C04FD705A2}';
  {$EXTERNALSYM CLSID_ISFBand}

  IID_CDefView: TGUID         = '{4434FF80-EF4C-11CE-AE65-08002B2E1262}';
  {$EXTERNALSYM IID_CDefView}

  CLSID_ShellFldSetExt: TGUID = '{6D5313C0-8C62-11D1-B2CD-006097DF8C11}';
  {$EXTERNALSYM CLSID_ShellFldSetExt}
  SID_SMenuBandChild: TGUID   = '{ED9CC020-08B9-11D1-9823-00C04FD91972}';
  {$EXTERNALSYM SID_SMenuBandChild}
  SID_SMenuBandParent: TGUID  = '{8C278EEC-3EAB-11D1-8CB0-00C04FD918D0}';
  {$EXTERNALSYM SID_SMenuBandParent}

  SID_SMenuPopup: TGUID                   = '{D1E7AFEB-6A2E-11D0-8C78-00C04FD918B4}';
  {$EXTERNALSYM SID_SMenuPopup}
  SID_SMenuBandBottomSelected: TGUID      = '{165EBAF4-6D51-11D2-83AD-00C04FD918D0}';
  {$EXTERNALSYM SID_SMenuBandBottomSelected}
  SID_SMenuBandBottom: TGUID              = '{743CA664-0DEB-11D1-9825-00C04FD91972}';
  {$EXTERNALSYM SID_SMenuBandBottom}
  SID_MenuShellFolder: TGUID              = '{A6C17EB4-2D65-11D2-838F-00C04FD918D0}';
  {$EXTERNALSYM SID_MenuShellFolder}
  SID_SMenuBandContextMenuModifier: TGUID = '{39545874-7162-465E-B783-2AA1874FEF81}';
  {$EXTERNALSYM SID_SMenuBandContextMenuModifier}
  SID_SMenuBandBKContextMenu: TGUID       = '{164BBD86-1D0D-4DE0-9A3B-D9729647C2B8}';
  {$EXTERNALSYM SID_SMenuBandBKContextMenu}

// Command Group ID for MenuDeskBar
  CGID_MENUDESKBAR: TGUID      = '{5C9F0A12-959E-11D0-A3A4-00A0C9082636}';
  {$EXTERNALSYM CGID_MENUDESKBAR}
  SID_SMenuBandTop: TGUID      = '{9493A810-EC38-11D0-BC46-00AA006CE2F5}';
  {$EXTERNALSYM SID_SMenuBandTop}

  CLSID_MenuToolbarBase: TGUID = '{40B96610-B522-11D1-B3B4-00AA006EFDE7}';
  {$EXTERNALSYM CLSID_MenuToolbarBase}
  CLSID_MenuBandSite: TGUID    = '{E13EF4E4-D2F2-11D0-9816-00C04FD91972}';
  {$EXTERNALSYM CLSID_MenuBandSite}
  SID_SCommDlgBrowser: TGUID   = '{80F30233-B7DF-11D2-A33B-006097DF5BD4}';
  {$EXTERNALSYM SID_SCommDlgBrowser}

// 
// These GUIDs may be assigned to the CREDENTIAL_PROVIDER_FIELD_DESCRIPTOR::guidFieldType
// member by Microsoft ICredentialProvider implementations.
// 
  CPFG_LOGON_USERNAME: TGUID     = '{DA15BBE8-954D-4FD3-B0F4-1FB5B90B174B}';
  {$EXTERNALSYM CPFG_LOGON_USERNAME}
  CPFG_LOGON_PASSWORD: TGUID     = '{60624CFA-A477-47B1-8A8E-3A4A19981827}';
  {$EXTERNALSYM CPFG_LOGON_PASSWORD}
  CPFG_SMARTCARD_USERNAME: TGUID = '{3E1ECF69-568C-4D96-9D59-46444174E2D6}';
  {$EXTERNALSYM CPFG_SMARTCARD_USERNAME}
  CPFG_SMARTCARD_PIN: TGUID      = '{4FE5263B-9181-46C1-B0A4-9DEDD4DB7DEA}';
  {$EXTERNALSYM CPFG_SMARTCARD_PIN}

// 
//  Known Folder IDs
// 
// some known folder types
  FOLDERTYPEID_Invalid: TGUID              = '{57807898-8C4F-4462-BB63-71042380B109}';
  {$EXTERNALSYM FOLDERTYPEID_Invalid}
  FOLDERTYPEID_Generic: TGUID              = '{5C4F28B5-F869-4E84-8E60-F11DB97C5CC7}';
  {$EXTERNALSYM FOLDERTYPEID_Generic}
  FOLDERTYPEID_GenericSearchResults: TGUID = '{7FDE1A1E-8B31-49A5-93B8-6BE14CFA4943}';
  {$EXTERNALSYM FOLDERTYPEID_GenericSearchResults}
  FOLDERTYPEID_GenericLibrary: TGUID       = '{5F4EAB9A-6833-4F61-899D-31CF46979D49}';
  {$EXTERNALSYM FOLDERTYPEID_GenericLibrary}
  FOLDERTYPEID_Documents: TGUID            = '{7D49D726-3C21-4F05-99AA-FDC2C9474656}';
  {$EXTERNALSYM FOLDERTYPEID_Documents}
  FOLDERTYPEID_Pictures: TGUID             = '{B3690E58-E961-423B-B687-386EBFD83239}';
  {$EXTERNALSYM FOLDERTYPEID_Pictures}
  FOLDERTYPEID_Music: TGUID                = '{94D6DDCC-4A68-4175-A374-BD584A510B78}';
  {$EXTERNALSYM FOLDERTYPEID_Music}
  FOLDERTYPEID_Videos: TGUID               = '{5FA96407-7E77-483C-AC93-691D05850DE8}';
  {$EXTERNALSYM FOLDERTYPEID_Videos}
  FOLDERTYPEID_UserFiles: TGUID            = '{CD0FC69B-71E2-46E5-9690-5BCD9F57AAB3}';
  {$EXTERNALSYM FOLDERTYPEID_UserFiles}
  FOLDERTYPEID_UsersLibraries: TGUID       = '{C4D98F09-6124-4FE0-9942-826416082DA9}';
  {$EXTERNALSYM FOLDERTYPEID_UsersLibraries}
  FOLDERTYPEID_OtherUsers: TGUID           = '{B337FD00-9DD5-4635-A6D4-DA33FD102B7A}';
  {$EXTERNALSYM FOLDERTYPEID_OtherUsers}
  FOLDERTYPEID_PublishedItems: TGUID       = '{7F2F5B96-FF74-41DA-AFD8-1C78A5F3AEA2}';
  {$EXTERNALSYM FOLDERTYPEID_PublishedItems}
  FOLDERTYPEID_Communications: TGUID       = '{91475FE5-586B-4EBA-8D75-D17434B8CDF6}';
  {$EXTERNALSYM FOLDERTYPEID_Communications}
  FOLDERTYPEID_Contacts: TGUID             = '{DE2B70EC-9BF7-4A93-BD3D-243F7881D492}';
  {$EXTERNALSYM FOLDERTYPEID_Contacts}
  FOLDERTYPEID_StartMenu: TGUID            = '{EF87B4CB-F2CE-4785-8658-4CA6C63E38C6}';
  {$EXTERNALSYM FOLDERTYPEID_StartMenu}
  FOLDERTYPEID_RecordedTV: TGUID           = '{5557A28F-5DA6-4F83-8809-C2C98A11A6FA}';
  {$EXTERNALSYM FOLDERTYPEID_RecordedTV}
  FOLDERTYPEID_SavedGames: TGUID           = '{D0363307-28CB-4106-9F23-2956E3E5E0E7}';
  {$EXTERNALSYM FOLDERTYPEID_SavedGames}
  FOLDERTYPEID_OpenSearch: TGUID           = '{8FAF9629-1980-46FF-8023-9DCEAB9C3EE3}';
  {$EXTERNALSYM FOLDERTYPEID_OpenSearch}
  FOLDERTYPEID_SearchConnector: TGUID      = '{982725EE-6F47-479E-B447-812BFA7D2E8F}';
  {$EXTERNALSYM FOLDERTYPEID_SearchConnector}
// foldertypes that do not have top views are below
  FOLDERTYPEID_Games: TGUID                = '{B689B0D0-76D3-4CBB-87F7-585D0E0CE070}';
  {$EXTERNALSYM FOLDERTYPEID_Games}
// category view of control panel
  FOLDERTYPEID_ControlPanelCategory: TGUID = '{DE4F0660-FA10-4B8F-A494-068B20B22307}';
  {$EXTERNALSYM FOLDERTYPEID_ControlPanelCategory}
// classic-mode control panel
  FOLDERTYPEID_ControlPanelClassic: TGUID  = '{0C3794F3-B545-43AA-A329-C37430C58D2A}';
  {$EXTERNALSYM FOLDERTYPEID_ControlPanelClassic}
// prnfldr
  FOLDERTYPEID_Printers: TGUID             = '{2C7BBEC6-C844-4A0A-91FA-CEF6F59CFDA1}';
  {$EXTERNALSYM FOLDERTYPEID_Printers}
// bbckfldr
  FOLDERTYPEID_RecycleBin: TGUID           = '{D6D9E004-CD87-442B-9D57-5E0AEB4F6F72}';
  {$EXTERNALSYM FOLDERTYPEID_RecycleBin}
// software explorer for ARP
  FOLDERTYPEID_SoftwareExplorer: TGUID     = '{D674391B-52D9-4E07-834E-67C98610F39D}';
  {$EXTERNALSYM FOLDERTYPEID_SoftwareExplorer}
// ZIP folders
  FOLDERTYPEID_CompressedFolder: TGUID     = '{80213E82-BCFD-4C4F-8817-BB27601267A9}';
  {$EXTERNALSYM FOLDERTYPEID_CompressedFolder}
// NetworkExplorerFolder
  FOLDERTYPEID_NetworkExplorer: TGUID      = '{25CC242B-9A7C-4F51-80E0-7A2928FEBE42}';
  {$EXTERNALSYM FOLDERTYPEID_NetworkExplorer}
// searches folder
  FOLDERTYPEID_Searches: TGUID             = '{0B0BA2E3-405F-415E-A6EE-CAD625207853}';
  {$EXTERNALSYM FOLDERTYPEID_Searches}
// search home
  FOLDERTYPEID_SearchHome: TGUID           = '{834D8A44-0974-4ED6-866E-F203D80B3810}';
  {$EXTERNALSYM FOLDERTYPEID_SearchHome}

// 
// Sync Manager object IDs.  These are GUIDs used in calls to the GetObject()
// method on ISyncMgrHandler and ISyncMgrSyncItem, defined in SyncMgr.idl.
// 
  SYNCMGR_OBJECTID_Icon: TGUID                  = '{6DBC85C3-5D07-4C72-A777-7FEC78072C06}';
  {$EXTERNALSYM SYNCMGR_OBJECTID_Icon}
  SYNCMGR_OBJECTID_EventStore: TGUID            = '{4BEF34B9-A786-4075-BA88-0C2B9D89A98F}';
  {$EXTERNALSYM SYNCMGR_OBJECTID_EventStore}
  SYNCMGR_OBJECTID_ConflictStore: TGUID         = '{D78181F4-2389-47E4-A960-60BCC2ED930B}';
  {$EXTERNALSYM SYNCMGR_OBJECTID_ConflictStore}
  SYNCMGR_OBJECTID_BrowseContent: TGUID         = '{57CBB584-E9B4-47AE-A120-C4DF3335DEE2}';
  {$EXTERNALSYM SYNCMGR_OBJECTID_BrowseContent}
  SYNCMGR_OBJECTID_ShowSchedule: TGUID          = '{EDC6F3E3-8441-4109-ADF3-6C1CA0B7DE47}';
  {$EXTERNALSYM SYNCMGR_OBJECTID_ShowSchedule}
  SYNCMGR_OBJECTID_QueryBeforeActivate: TGUID   = '{D882D80B-E7AA-49ED-86B7-E6E1F714CDFE}';
  {$EXTERNALSYM SYNCMGR_OBJECTID_QueryBeforeActivate}
  SYNCMGR_OBJECTID_QueryBeforeDeactivate: TGUID = '{A0EFC282-60E0-460E-9374-EA88513CFC80}';
  {$EXTERNALSYM SYNCMGR_OBJECTID_QueryBeforeDeactivate}
  SYNCMGR_OBJECTID_QueryBeforeEnable: TGUID     = '{04CBF7F0-5BEB-4DE1-BC90-908345C480F6}';
  {$EXTERNALSYM SYNCMGR_OBJECTID_QueryBeforeEnable}
  SYNCMGR_OBJECTID_QueryBeforeDisable: TGUID    = '{BB5F64AA-F004-4EB5-8E4D-26751966344C}';
  {$EXTERNALSYM SYNCMGR_OBJECTID_QueryBeforeDisable}
  SYNCMGR_OBJECTID_QueryBeforeDelete: TGUID     = '{F76C3397-AFB3-45D7-A59F-5A49E905437E}';
  {$EXTERNALSYM SYNCMGR_OBJECTID_QueryBeforeDelete}
  SYNCMGR_OBJECTID_EventLinkClick: TGUID        = '{2203BDC1-1AF1-4082-8C30-28399F41384C}';
  {$EXTERNALSYM SYNCMGR_OBJECTID_EventLinkClick}

// IExplorerPaneVisibility constants
  EP_NavPane: TGUID           = '{CB316B22-25F7-42B8-8A09-540D23A43C2F}';
  {$EXTERNALSYM EP_NavPane}
  EP_Commands: TGUID          = '{D9745868-CA5F-4A76-91CD-F5A129FBB076}';
  {$EXTERNALSYM EP_Commands}
  EP_Commands_Organize: TGUID = '{72E81700-E3EC-4660-BF24-3C3B7B648806}';
  {$EXTERNALSYM EP_Commands_Organize}
  EP_Commands_View: TGUID     = '{21F7C32D-EEAA-439B-BB51-37B96FD6A943}';
  {$EXTERNALSYM EP_Commands_View}
  EP_DetailsPane: TGUID       = '{43ABF98B-89B8-472D-B9CE-E69B8229F019}';
  {$EXTERNALSYM EP_DetailsPane}
  EP_PreviewPane: TGUID       = '{893C63D1-45C8-4D17-BE19-223BE71BE365}';
  {$EXTERNALSYM EP_PreviewPane}
  EP_QueryPane: TGUID         = '{65BCDE4F-4F07-4F27-83A7-1AFCA4DF7DDD}';
  {$EXTERNALSYM EP_QueryPane}
  EP_AdvQueryPane: TGUID      = '{B4E9DB8B-34BA-4C39-B5CC-16A1BD2C411C}';
  {$EXTERNALSYM EP_AdvQueryPane}

  CATID_LocationFactory: TGUID  = '{965C4D51-8B76-4E57-80B7-564D2EA4B55E}';
  {$EXTERNALSYM CATID_LocationFactory}
  CATID_LocationProvider: TGUID = '{1B3CA474-2614-414B-B813-1ACECA3E3DD8}';
  {$EXTERNALSYM CATID_LocationProvider}

// ItemsView
  ItemCount_Property_GUID: TGUID         = '{ABBF5C45-5CCC-47B7-BB4E-87CB87BBD162}';
  {$EXTERNALSYM ItemCount_Property_GUID}
  SelectedItemCount_Property_GUID: TGUID = '{8FE316D2-0E52-460A-9C1E-48F273D470A3}';
  {$EXTERNALSYM SelectedItemCount_Property_GUID}
  ItemIndex_Property_GUID: TGUID         = '{92A053DA-2969-4021-BF27-514CFC2E4A69}';
  {$EXTERNALSYM ItemIndex_Property_GUID}
// end shlguid.h

                                      
const
  SID_IPropertyStore           = Winapi.PropSys.SID_IPropertyStore deprecated 'Use Winapi.PropSys.SID_IPropertyStore';
  SID_IPropertyDescriptionList = Winapi.PropSys.SID_IPropertyDescriptionList deprecated 'Use Winapi.PropSys.SID_IPropertyDescriptionList';
type
  IPropertyStore = Winapi.PropSys.IPropertyStore deprecated 'Use Winapi.PropSys.IPropertyStore';
  {$EXTERNALSYM IPropertyStore}
  IPropertyDescriptionList = Winapi.PropSys.IPropertyStore deprecated 'Use Winapi.PropSys.IPropertyDescriptionList';
  {$EXTERNALSYM IPropertyDescriptionList}
const
  GPS_DEFAULT               = Winapi.PropSys.GPS_DEFAULT deprecated 'Use Winapi.PropSys.GPS_DEFAULT';
  {$EXTERNALSYM GPS_DEFAULT}
  GPS_HANDLERPROPERTIESONLY = Winapi.PropSys.GPS_HANDLERPROPERTIESONLY deprecated 'Use Winapi.PropSys.GPS_HANDLERPROPERTIESONLY';
  {$EXTERNALSYM GPS_HANDLERPROPERTIESONLY}
  GPS_READWRITE             = Winapi.PropSys.GPS_READWRITE deprecated 'Use Winapi.PropSys.GPS_READWRITE';
  {$EXTERNALSYM GPS_READWRITE}
  GPS_TEMPORARY             = Winapi.PropSys.GPS_TEMPORARY deprecated 'Use Winapi.PropSys.GPS_TEMPORARY';
  {$EXTERNALSYM GPS_TEMPORARY}
  GPS_FASTPROPERTIESONLY    = Winapi.PropSys.GPS_FASTPROPERTIESONLY deprecated 'Use Winapi.PropSys.GPS_FASTPROPERTIESONLY';
  {$EXTERNALSYM GPS_FASTPROPERTIESONLY}
  GPS_OPENSLOWITEM          = Winapi.PropSys.GPS_OPENSLOWITEM deprecated 'Use Winapi.PropSys.GPS_OPENSLOWITEM';
  {$EXTERNALSYM GPS_OPENSLOWITEM}
  GPS_DELAYCREATION         = Winapi.PropSys.GPS_DELAYCREATION deprecated 'Use Winapi.PropSys.GPS_DELAYCREATION';
  {$EXTERNALSYM GPS_DELAYCREATION}
  GPS_BESTEFFORT            = Winapi.PropSys.GPS_BESTEFFORT deprecated 'Use Winapi.PropSys.GPS_BESTEFFORT';
  {$EXTERNALSYM GPS_BESTEFFORT}
  GPS_MASK_VALID            = Winapi.PropSys.GPS_MASK_VALID deprecated 'Use Winapi.PropSys.GPS_MASK_VALID';
  {$EXTERNALSYM GPS_MASK_VALID}
                      
const
  SID_IContextMenu                            = '{000214E4-0000-0000-C000-000000000046}';
  SID_IContextMenu2                           = '{000214F4-0000-0000-C000-000000000046}';
  SID_IContextMenu3                           = '{BCFCE0A0-EC17-11D0-8D10-00A0C90F2719}';
  SID_IExecuteCommand                         = '{7F9185B0-CB92-43C5-80A9-92277A4F7B54}';
  SID_IPersistFolder                          = '{000214EA-0000-0000-C000-000000000046}';
  SID_IRunnableTask                           = '{85788D00-6807-11D0-B810-00C04FD706EC}';
  SID_IShellTaskScheduler                     = '{6CCB7BE0-6807-11D0-B810-00C04FD706EC}';
  SID_IQueryCodePage                          = '{C7B236CE-EE80-11D0-985F-006008059382}';
  SID_IPersistFolder2                         = '{1AC3D9F0-175C-11D1-95BE-00609797EA4F}';
  SID_IPersistFolder3                         = '{CEF04FDF-FE72-11D2-87A5-00C04F6837CF}';
  SID_IPersistIDList                          = '{1079ACFC-29BD-11D3-8E0D-00C04F6837D5}';
  SID_IEnumIDList                             = '{000214F2-0000-0000-C000-000000000046}';
  SID_IEnumFullIDList                         = '{D0191542-7954-4908-BC06-B2360BBE45BA}';
  SID_IObjectWithFolderEnumMode               = '{6A9D9026-0E6E-464C-B000-42ECC07DE673}';
  SID_IParseAndCreateItem                     = '{67EFED0E-E827-4408-B493-78F3982B685C}';
  SID_IShellFolder                            = '{000214E6-0000-0000-C000-000000000046}';
  SID_IEnumExtraSearch                        = '{0E700BE1-9DB6-11D1-A1CE-00C04FD75D13}';
  SID_IShellFolder2                           = '{93F2F68C-1D1B-11D3-A30E-00C04F79ABD1}';
  SID_IFolderViewOptions                      = '{3CC974D2-B302-4D36-AD3E-06D93F695D3F}';
  SID_IShellView                              = '{000214E3-0000-0000-C000-000000000046}';
  SID_IShellView2                             = '{88E39E80-3578-11CF-AE69-08002B2E1262}';
  SID_IShellView3                             = '{EC39FA88-F8AF-41C5-8421-38BED28F4673}';
  SID_IFolderView                             = '{CDE725B0-CCC9-4519-917E-325D72FAB4CE}';
  SID_ISearchBoxInfo                          = '{6AF6E03F-D664-4EF4-9626-F7E0ED36755E}';
  SID_IFolderView2                            = '{1AF3A467-214F-4298-908E-06B03E0B39F9}';
  SID_IFolderViewSettings                     = '{AE8C987D-8797-4ED3-BE72-2A47DD938DB0}';
  SID_IPreviewHandlerVisuals                  = '{196BF9A5-B346-4EF0-AA1E-5DCDB76768B1}';
  SID_IVisualProperties                       = '{E693CF68-D967-4112-8763-99172AEE5E5A}';
  SID_ICommDlgBrowser                         = '{000214F1-0000-0000-C000-000000000046}';
  SID_ICommDlgBrowser2                        = '{10339516-2894-11D2-9039-00C04F8EEB3E}';
  SID_ICommDlgBrowser3                        = '{C8AD25A1-3294-41EE-8165-71174BD01C57}';
  SID_IColumnManager                          = '{D8EC27BB-3F3B-4042-B10A-4ACFD924D453}';
  SID_IFolderFilterSite                       = '{C0A651F5-B48B-11D2-B5ED-006097C686F6}';
  SID_IFolderFilter                           = '{9CC22886-DC8E-11D2-B1D0-00C04F8EEB3E}';
  SID_IInputObjectSite                        = '{F1DB8392-7331-11D0-8C99-00A0C92DBFE8}';
  SID_IInputObject                            = '{68284FAA-6A48-11D0-8C78-00C04FD918B4}';
  SID_IInputObject2                           = '{6915C085-510B-44CD-94AF-28DFA56CF92B}';
  SID_IShellIcon                              = '{000214E5-0000-0000-C000-000000000046}';
  SID_IShellBrowser                           = '{000214E2-0000-0000-C000-000000000046}';
  SID_IProfferService                         = '{CB728B20-F786-11CE-92AD-00AA00A74CD0}';
  SID_IShellItem                              = '{43826D1E-E718-42EE-BC55-A1E261C37BFE}';
  SID_IShellItem2                             = '{7E9FB0D3-919F-4307-AB2E-9B1860310C93}';
  SID_IShellItemImageFactory                  = '{BCC18B79-BA16-442F-80C4-8A59C30C463B}';
  SID_IUserAccountChangeCallback              = '{A561E69A-B4B8-4113-91A5-64C6BCCA3430}';
  SID_IEnumShellItems                         = '{70629033-E363-4A28-A567-0DB78006E6D7}';
  SID_ITransferAdviseSink                     = '{D594D0D8-8DA7-457B-B3B4-CE5DBAAC0B88}';
  SID_ITransferSource                         = '{00ADB003-BDE9-45C6-8E29-D09F9353E108}';
  SID_IEnumResources                          = '{2DD81FE3-A83C-4DA9-A330-47249D345BA1}';
  SID_IShellItemResources                     = '{FF5693BE-2CE0-4D48-B5C5-40817D1ACDB9}';
  SID_ITransferDestination                    = '{48ADDD32-3CA5-4124-ABE3-B5A72531B207}';
  SID_IStreamAsync                            = '{FE0B6665-E0CA-49B9-A178-2B5CB48D92A5}';
  SID_IStreamUnbufferedInfo                   = '{8A68FDDA-1FDC-4C20-8CEB-416643B5A625}';
  SID_IFileOperationProgressSink              = '{04B0F1A7-9490-44BC-96E1-4296A31252E2}';
  SID_IShellItemArray                         = '{B63EA76D-1F85-456F-A19C-48159EFA858B}';
  SID_IInitializeWithItem                     = '{7F73BE3F-FB79-493C-A6C7-7EE14E245841}';
  SID_IObjectWithSelection                    = '{1C9CD5BB-98E9-4491-A60F-31AACC72B83C}';
  SID_IObjectWithBackReferences               = '{321A6A6A-D61F-4BF3-97AE-14BE2986BB36}';
  SID_IPropertyUI                             = '{757A7D9F-919A-4118-99D7-DBB208C8CC66}';
  SID_ICategoryProvider                       = '{9AF64809-5864-4C26-A720-C1F78C086EE3}';
  SID_ICategorizer                            = '{A3B14589-9174-49A8-89A3-06A1AE2B9BA7}';
  SID_IDropTargetHelper                       = '{4657278B-411B-11D2-839A-00C04FD918D0}';
  SID_IDragSourceHelper                       = '{DE5BF786-477A-11D2-839D-00C04FD918D0}';
  SID_IDragSourceHelper2                      = '{83E07D0D-0C5F-4163-BF1A-60B274051E40}';
  SID_IShellLinkA                             = '{000214EE-0000-0000-C000-000000000046}';
  SID_IShellLinkW                             = '{000214F9-0000-0000-C000-000000000046}';
  SID_IShellLinkDataList                      = '{45E2B4AE-B1C3-11D0-B92F-00A0C90312E1}';
  SID_IResolveShellLink                       = '{5CD52983-9449-11D2-963A-00C04F79ADF0}';
  SID_IActionProgressDialog                   = '{49FF1172-EADC-446D-9285-156453A6431C}';
  SID_IHWEventHandler                         = '{C1FB73D0-EC3A-4BA2-B512-8CDB9187B6D1}';
  SID_IHWEventHandler2                        = '{CFCC809F-295D-42E8-9FFC-424B33C487E6}';
  SID_IQueryCancelAutoPlay                    = '{DDEFE873-6997-4E68-BE26-39B633ADBE12}';
  SID_IDynamicHWHandler                       = '{DC2601D7-059E-42FC-A09D-2AFD21B6D5F7}';
  SID_IActionProgress                         = '{49FF1173-EADC-446D-9285-156453A6431C}';
  SID_IShellExtInit                           = '{000214E8-0000-0000-C000-000000000046}';
  SID_IShellPropSheetExt                      = '{000214E9-0000-0000-C000-000000000046}';
  SID_IRemoteComputer                         = '{000214FE-0000-0000-C000-000000000046}';
  SID_IQueryContinue                          = '{7307055C-B24A-486B-9F25-163E597A28A9}';
  SID_IObjectWithCancelEvent                  = '{F279B885-0AE9-4B85-AC06-DDECF9408941}';
  SID_IUserNotification                       = '{BA9711BA-5893-4787-A7E1-41277151550B}';
  SID_IUserNotificationCallback               = '{19108294-0441-4AFF-8013-FA0A730B0BEA}';
  SID_IUserNotification2                      = '{215913CC-57EB-4FAB-AB5A-E5FA7BEA2A6C}';
  SID_IItemNameLimits                         = '{1DF0D7F1-B267-4D28-8B10-12E23202A5C4}';
  SID_ISearchFolderItemFactory                = '{A0FFBC28-5482-4366-BE27-3E81E78E06C2}';
  SID_IExtractImage                           = '{BB2E617C-0920-11D1-9A0B-00C04FC2D6C1}';
  SID_IExtractImage2                          = '{953BB1EE-93B4-11D1-98A3-00C04FB687DA}';
  SID_IThumbnailHandlerFactory                = '{E35B4B2E-00DA-4BC1-9F13-38BC11F5D417}';
  SID_IParentAndItem                          = '{B3A4B685-B685-4805-99D9-5DEAD2873236}';
  SID_IDockingWindow                          = '{012DD920-7B26-11D0-8CA9-00A0C92DBFE8}';
  SID_IDeskBand                               = '{EB0FE172-1A3A-11D0-89B3-00A0C90A90AC}';
  SID_IDeskBandInfo                           = '{77E425FC-CBF9-4307-BA6A-BB5727745661}';
  SID_IDeskBand2                              = '{79D16DE4-ABEE-4021-8D9D-9169B261D657}';
  SID_ITaskbarList                            = '{56FDF342-FD6D-11D0-958A-006097C9A090}';
  SID_ITaskbarList2                           = '{602D4995-B13A-429B-A66E-1935E44F4317}';
  SID_ITaskbarList3                           = '{EA1AFB91-9E28-4B86-90E9-9E9F8A5EEFAF}';
  SID_ITaskbarList4                           = '{C43DC798-95D1-4BEA-9030-BB99E2983A1A}';
  SID_IStartMenuPinnedList                    = '{4CD19ADA-25A5-4A32-B3B7-347BEE5BE36B}';
  SID_ICDBurn                                 = '{3D73A659-E5D0-4D42-AFC0-5121BA425C8D}';
  SID_IWizardSite                             = '{88960F5B-422F-4E7B-8013-73415381C3C3}';
  SID_IWizardExtension                        = '{C02EA696-86CC-491E-9B23-74394A0444A8}';
  SID_IWebWizardExtension                     = '{0E6B3F66-98D1-48C0-A222-FBDE74E2FBC5}';
  SID_IPublishingWizard                       = '{AA9198BB-CCEC-472D-BEED-19A4F6733F7A}';
  SID_IFolderViewHost                         = '{1EA58F02-D55A-411D-B09E-9E65AC21605B}';
  SID_IExplorerBrowserEvents                  = '{361BBDC7-E6EE-4E13-BE58-58E2240C810F}';
  SID_IExplorerBrowser                        = '{DFD3B6B5-C10C-4BE9-85F6-A66969F402F6}';
  SID_IAccessibleObject                       = '{95A391C5-9ED4-4C28-8401-AB9E06719E11}';
  SID_IResultsFolder                          = '{96E5AE6D-6AE1-4B1C-900C-C6480EAA8828}';
  SID_IEnumObjects                            = '{2C1C7E2E-2D0E-4059-831E-1E6F82335C2E}';
  SID_IOperationsProgressDialog               = '{0C9FB851-E5C9-43EB-A370-F0677B13874C}';
  SID_IIOCancelInformation                    = '{F5B0BF81-8CB5-4B1B-9449-1A159E0C733C}';
  SID_IFileOperation                          = '{947AAB5F-0A5C-4C13-B4D6-4BF7836FC9F8}';
  SID_IObjectProvider                         = '{A6087428-3BE3-4D73-B308-7C04A540BF1A}';
  SID_INamespaceWalkCB                        = '{D92995F8-CF5E-4A76-BF59-EAD39EA2B97E}';
  SID_INamespaceWalkCB2                       = '{7AC7492B-C38E-438A-87DB-68737844FF70}';
  SID_INamespaceWalk                          = '{57CED8A7-3F4A-432C-9350-30F24483F74F}';
  SID_IAutoCompleteDropDown                   = '{3CD141F4-3C6A-11D2-BCAA-00C04FD929DB}';
  SID_IBandSite                               = '{4CF504B0-DE96-11D0-8B3F-00A0C911E8E5}';
  SID_IModalWindow                            = '{B4DB1657-70D7-485E-8E3E-6FCB5A5C1802}';
  SID_ICDBurnExt                              = '{2271DCCA-74FC-4414-8FB7-C56B05ACE2D7}';
  SID_IContextMenuSite                        = '{0811AEBE-0B87-4C54-9E72-548CF649016B}';
  SID_IEnumReadyCallback                      = '{61E00D45-8FFF-4E60-924E-6537B61612DD}';
  SID_IEnumerableView                         = '{8C8BF236-1AEC-495F-9894-91D57C3C686F}';
  SID_IInsertItem                             = '{D2B57227-3D23-4B95-93C0-492BD454C356}';
  SID_IMenuBand                               = '{568804CD-CBD7-11D0-9816-00C04FD91972}';
  SID_IFolderBandPriv                         = '{47C01F95-E185-412C-B5C5-4F27DF965AEA}';
  SID_IRegTreeItem                            = '{A9521922-0812-4D44-9EC3-7FD38C726F3D}';
  SID_IImageRecompress                        = '{505F1513-6B3E-4892-A272-59F8889A4D3E}';
  SID_IDeskBar                                = '{EB0FE173-1A3A-11D0-89B3-00A0C90A90AC}';
  SID_IMenuPopup                              = '{D1E7AFEB-6A2E-11D0-8C78-00C04FD918B4}';
  SID_IFileIsInUse                            = '{64A1CBF0-3A1A-4461-9158-376969693950}';
  SID_IFileDialogEvents                       = '{973510DB-7D7F-452B-8975-74A85828D354}';
  SID_IFileDialog                             = '{42F85136-DB7E-439C-85F1-E4075D135FC8}';
  SID_IFileSaveDialog                         = '{84BCCD23-5FDE-4CDB-AEA4-AF64B83D78AB}';
  SID_IFileOpenDialog                         = '{D57C7288-D4AD-4768-BE02-9D969532D960}';
  SID_IFileDialogCustomize                    = '{E6FDD21A-163F-4975-9C8C-A69F1BA37034}';
  SID_IFileDialogControlEvents                = '{36116642-D713-4B97-9B83-7484A9D00433}';
  SID_IFileDialog2                            = '{61744FC7-85B5-4791-A9B0-272276309B13}';
  SID_IApplicationAssociationRegistration     = '{4E530B0A-E611-4C77-A3AC-9031D022281B}';
  SID_IApplicationAssociationRegistrationUI   = '{1F76A169-F994-40AC-8FC8-0959E8874710}';
  SID_IDelegateFolder                         = '{ADD8BA80-002B-11D0-8F0F-00C04FD7D062}';
  SID_IBrowserFrameOptions                    = '{10DF43C8-1DBE-11D3-8B34-006097DF5BD4}';
  SID_INewWindowManager                       = '{D2BC4C84-3F72-4A52-A604-7BCBF3982CBB}';
  SID_IAttachmentExecute                      = '{73DB1241-1E85-4581-8E4F-A81E1D0F8C57}';
  SID_IShellMenuCallback                      = '{4CA300A1-9B8D-11D1-8B22-00C04FD918D0}';
  SID_IShellMenu                              = '{EE1F7637-E138-11D1-8379-00C04FD918D0}';
  SID_IShellRunDll                            = '{FCE4BDE0-4B68-4B80-8E9C-7426315A7388}';
  SID_IKnownFolder                            = '{3AA7AF7E-9B36-420C-A8E3-F77D4674A488}';
  SID_IKnownFolderManager                     = '{8BE2D872-86AA-4D47-B776-32CCA40C7018}';
  SID_ISharingConfigurationManager            = '{B4CD448A-9C86-4466-9201-2E62105B87AE}';
  SID_IPreviousVersionsInfo                   = '{76E54780-AD74-48E3-A695-3BA9A0AFF10D}';
  SID_IRelatedItem                            = '{A73CE67A-8AB1-44F1-8D43-D2FCBF6B1CD0}';
  SID_IIdentityName                           = '{7D903FCA-D6F9-4810-8332-946C0177E247}';
  SID_IDelegateItem                           = '{3C5A1C94-C951-4CB7-BB6D-3B93F30CCE93}';
  SID_ICurrentItem                            = '{240A7174-D653-4A1D-A6D3-D4943CFBFE3D}';
  SID_ITransferMediumItem                     = '{77F295D5-2D6F-4E19-B8AE-322F3E721AB5}';
  SID_IUseToBrowseItem                        = '{05EDDA5C-98A3-4717-8ADB-C5E7DA991EB1}';
  SID_IDisplayItem                            = '{C6FD5997-9F6B-4888-8703-94E80E8CDE3F}';
  SID_IViewStateIdentityItem                  = '{9D264146-A94F-4195-9F9F-3BB12CE0C955}';
  SID_IPreviewItem                            = '{36149969-0A8F-49c8-8B00-4AECB20222FB}';
  SID_IDestinationStreamFactory               = '{8A87781B-39A7-4A1F-AAB3-A39B9C34A7D9}';
  SID_INewMenuClient                          = '{DCB07FDC-3BB5-451C-90BE-966644FED7B0}';
  SID_IInitializeWithBindCtx                  = '{71C0D2BC-726D-45CC-A6C0-2E31C1DB2159}';
  SID_IShellItemFilter                        = '{2659B475-EEB8-48B7-8F07-B378810F48CF}';
  SID_INameSpaceTreeControl                   = '{028212A3-B627-47E9-8856-C14265554E4F}';
  SID_INameSpaceTreeControl2                  = '{7CC7AED8-290E-49BC-8945-C1401CC9306C}';
  SID_INameSpaceTreeControlEvents             = '{93D77985-B3D8-4484-8318-672CDDA002CE}';
  SID_INameSpaceTreeControlDropHandler        = '{F9C665D6-C2F2-4C19-BF33-8322D7352F51}';
  SID_INameSpaceTreeAccessible                = '{71F312DE-43ED-4190-8477-E9536B82350B}';
  SID_INameSpaceTreeControlCustomDraw         = '{2D3BA758-33EE-42D5-BB7B-5F3431D86C78}';
  SID_INameSpaceTreeControlFolderCapabilities = '{E9701183-E6B3-4FF2-8568-813615FEC7BE}';
  SID_IPreviewHandler                         = '{8895B1C6-B41F-4C1C-A562-0D564250836F}';
  SID_IPreviewHandlerFrame                    = '{FEC87AAF-35F9-447A-ADB7-20234491401A}';
  SID_ITrayDeskBand                           = '{6D67E846-5B9C-4DB8-9CBC-DDE12F4254F1}';
  SID_IBandHost                               = '{B9075C7C-D48E-403F-AB99-D6C77A1084AC}';
  SID_IExplorerPaneVisibility                 = '{E07010EC-BC17-44C0-97B0-46C7C95B9EDC}';
  SID_IContextMenuCB                          = '{3409E930-5A39-11D1-83FA-00A0C90DC849}';
  SID_IDefaultExtractIconInit                 = '{41DED17D-D6B3-4261-997D-88C60E4B1D58}';
  SID_IExplorerCommand                        = '{A08CE4D0-FA25-44AB-B57C-C7B1C323E0B9}';
  SID_IExplorerCommandState                   = '{BDDACB60-7657-47AE-8445-D23E1ACF82AE}';
  SID_IInitializeCommand                      = '{85075ACF-231F-40EA-9610-D26B7B58F638}';
  SID_IEnumExplorerCommand                    = '{A88826F8-186F-4987-AADE-EA0CEF8FBFE8}';
  SID_IExplorerCommandProvider                = '{64961751-0835-43C0-8FFE-D57686530E64}';
  SID_IMarkupCallback                         = '{4440306E-D79A-48D0-88E6-A42692279BFB}';
  SID_IControlMarkup                          = '{D6D2FBAE-F116-458C-8C34-03569877A2D2}';
  SID_IInitializeNetworkFolder                = '{6E0F9881-42A8-4F2A-97F8-8AF4E026D92D}';
  SID_IOpenControlPanel                       = '{D11AD862-66DE-4DF4-BF6C-1F5621996AF1}';
  SID_IComputerInfoChangeNotify               = '{0DF60D92-6818-46D6-B358-D66170DDE466}';
  SID_IFileSystemBindData                     = '{01E18D10-4D8B-11D2-855D-006008059367}';
  SID_IFileSystemBindData2                    = '{3ACF075F-71DB-4AFA-81F0-3FC4FDF2A5B8}';
  SID_ICustomDestinationList                  = '{6332DEBF-87B5-4670-90C0-5E57B408A49E}';
  SID_IApplicationDestinations                = '{12337D35-94C6-48A0-BCE7-6A9C69D4D600}';
  SID_IApplicationDocumentLists               = '{3C594F9F-9F30-47A1-979A-C9E83D3D0A06}';
  SID_IObjectWithAppUserModelID               = '{36DB0196-9665-46D1-9BA7-D3709EECF9ED}';
  SID_IObjectWithProgID                       = '{71E806FB-8DEE-46FC-BF8C-7748A8A1AE13}';
  SID_IUpdateIDList                           = '{6589B6D2-5F8D-4B9E-B7E0-23CDD9717D8C}';
  SID_IDesktopGadget                          = '{C1646BC4-F298-4F91-A204-EB2DD1709D1A}';
  SID_IHomeGroup                              = '{7A3BD1D9-35A9-4FB3-A467-F48CAC35E2D0}';
  SID_IInitializeWithPropertyStore            = '{C3E12EB5-7D8D-44F8-B6DD-0E77B34D6DE4}';
  SID_IOpenSearchSource                       = '{F0EE7333-E6FC-479B-9F25-A860C234A38E}';
  SID_IShellLibrary                           = '{11A66EFA-382E-451A-9234-1E0E12EF3085}';
  SID_IAssocHandlerInvoker                    = '{92218CAB-ECAA-4335-8133-807FD234C2EE}';
  SID_IAssocHandler                           = '{F04061AC-1659-4A3F-A954-775AA57FC083}';
  SID_IEnumAssocHandlers                      = '{973810AE-9599-4B88-9E4D-6EE98C9552DA}';

  IID_IContextMenu: TGUID                            = SID_IContextMenu;
  {$EXTERNALSYM IID_IContextMenu}
  IID_IContextMenu2: TGUID                           = SID_IContextMenu2;
  {$EXTERNALSYM IID_IContextMenu2}
  IID_IContextMenu3: TGUID                           = SID_IContextMenu3;
  {$EXTERNALSYM IID_IContextMenu3}
  IID_IExecuteCommand: TGUID                         = SID_IExecuteCommand;
  {$EXTERNALSYM IID_IExecuteCommand}
  IID_IPersistFolder: TGUID                          = SID_IPersistFolder;
  {$EXTERNALSYM IID_IPersistFolder}
  IID_IRunnableTask: TGUID                           = SID_IRunnableTask;
  {$EXTERNALSYM IID_IRunnableTask}
  IID_IShellTaskScheduler: TGUID                     = SID_IShellTaskScheduler;
  {$EXTERNALSYM IID_IShellTaskScheduler}
  IID_IQueryCodePage: TGUID                          = SID_IQueryCodePage;
  {$EXTERNALSYM IID_IQueryCodePage}
  IID_IPersistFolder2: TGUID                         = SID_IPersistFolder2;
  {$EXTERNALSYM IID_IPersistFolder2}
  IID_IPersistFolder3: TGUID                         = SID_IPersistFolder3;
  {$EXTERNALSYM IID_IPersistFolder3}
  IID_IPersistIDList: TGUID                          = SID_IPersistIDList;
  {$EXTERNALSYM IID_IPersistIDList}
  IID_IEnumIDList: TGUID                             = SID_IEnumIDList;
  {$EXTERNALSYM IID_IEnumIDList}
  IID_IEnumFullIDList: TGUID                         = SID_IEnumFullIDList;
  {$EXTERNALSYM IID_IEnumFullIDList}
  IID_IObjectWithFolderEnumMode: TGUID               = SID_IObjectWithFolderEnumMode;
  {$EXTERNALSYM IID_IObjectWithFolderEnumMode}
  IID_IParseAndCreateItem: TGUID                     = SID_IParseAndCreateItem;
  {$EXTERNALSYM IID_IParseAndCreateItem}
  IID_IShellFolder: TGUID                            = SID_IShellFolder;
  {$EXTERNALSYM IID_IShellFolder}
  IID_IEnumExtraSearch: TGUID                        = SID_IEnumExtraSearch;
  {$EXTERNALSYM IID_IEnumExtraSearch}
  IID_IShellFolder2: TGUID                           = SID_IShellFolder2;
  {$EXTERNALSYM IID_IShellFolder2}
  IID_IFolderViewOptions: TGUID                      = SID_IFolderViewOptions;
  {$EXTERNALSYM IID_IFolderViewOptions}
  IID_IShellView: TGUID                              = SID_IShellView;
  {$EXTERNALSYM IID_IShellView}
  IID_IShellView2: TGUID                             = SID_IShellView2;
  {$EXTERNALSYM IID_IShellView2}
  IID_IShellView3: TGUID                             = SID_IShellView3;
  {$EXTERNALSYM IID_IShellView3}
  IID_IFolderView: TGUID                             = SID_IFolderView;
  {$EXTERNALSYM IID_IFolderView}
  IID_ISearchBoxInfo: TGUID                          = SID_ISearchBoxInfo;
  {$EXTERNALSYM IID_ISearchBoxInfo}
  IID_IFolderView2: TGUID                            = SID_IFolderView2;
  {$EXTERNALSYM IID_IFolderView2}
  IID_IFolderViewSettings: TGUID                     = SID_IFolderViewSettings;
  {$EXTERNALSYM IID_IFolderViewSettings}
  IID_IPreviewHandlerVisuals: TGUID                  = SID_IPreviewHandlerVisuals;
  {$EXTERNALSYM IID_IPreviewHandlerVisuals}
  IID_IVisualProperties: TGUID                       = SID_IVisualProperties;
  {$EXTERNALSYM IID_IVisualProperties}
  IID_ICommDlgBrowser: TGUID                         = SID_ICommDlgBrowser;
  {$EXTERNALSYM IID_ICommDlgBrowser}
  IID_ICommDlgBrowser2: TGUID                        = SID_ICommDlgBrowser2;
  {$EXTERNALSYM IID_ICommDlgBrowser2}
  IID_ICommDlgBrowser3: TGUID                        = SID_ICommDlgBrowser3;
  {$EXTERNALSYM IID_ICommDlgBrowser3}
  IID_IColumnManager: TGUID                          = SID_IColumnManager;
  {$EXTERNALSYM IID_IColumnManager}
  IID_IFolderFilterSite: TGUID                       = SID_IFolderFilterSite;
  {$EXTERNALSYM IID_IFolderFilterSite}
  IID_IFolderFilter: TGUID                           = SID_IFolderFilter;
  {$EXTERNALSYM IID_IFolderFilter}
  IID_IInputObjectSite: TGUID                        = SID_IInputObjectSite;
  {$EXTERNALSYM IID_IInputObjectSite}
  IID_IInputObject: TGUID                            = SID_IInputObject;
  {$EXTERNALSYM IID_IInputObject}
  IID_IInputObject2: TGUID                           = SID_IInputObject2;
  {$EXTERNALSYM IID_IInputObject2}
  IID_IShellIcon: TGUID                              = SID_IShellIcon;
  {$EXTERNALSYM IID_IShellIcon}
  IID_IShellBrowser: TGUID                           = SID_IShellBrowser;
  {$EXTERNALSYM IID_IShellBrowser}
  IID_IProfferService: TGUID                         = SID_IProfferService;
  {$EXTERNALSYM IID_IProfferService}
  IID_IShellItem: TGUID                              = SID_IShellItem;
  {$EXTERNALSYM IID_IShellItem}
  IID_IShellItem2: TGUID                             = SID_IShellItem2;
  {$EXTERNALSYM IID_IShellItem2}
  IID_IShellItemImageFactory: TGUID                  = SID_IShellItemImageFactory;
  {$EXTERNALSYM IID_IShellItemImageFactory}
  IID_IUserAccountChangeCallback: TGUID              = SID_IUserAccountChangeCallback;
  {$EXTERNALSYM IID_IUserAccountChangeCallback}
  IID_IEnumShellItems: TGUID                         = SID_IEnumShellItems;
  {$EXTERNALSYM IID_IEnumShellItems}
  IID_ITransferAdviseSink: TGUID                     = SID_ITransferAdviseSink;
  {$EXTERNALSYM IID_ITransferAdviseSink}
  IID_ITransferSource: TGUID                         = SID_ITransferSource;
  {$EXTERNALSYM IID_ITransferSource}
  IID_IEnumResources: TGUID                          = SID_IEnumResources;
  {$EXTERNALSYM IID_IEnumResources}
  IID_IShellItemResources: TGUID                     = SID_IShellItemResources;
  {$EXTERNALSYM IID_IShellItemResources}
  IID_ITransferDestination: TGUID                    = SID_ITransferDestination;
  {$EXTERNALSYM IID_ITransferDestination}
  IID_IStreamAsync: TGUID                            = SID_IStreamAsync;
  {$EXTERNALSYM IID_IStreamAsync}
  IID_IStreamUnbufferedInfo: TGUID                   = SID_IStreamUnbufferedInfo;
  {$EXTERNALSYM IID_IStreamUnbufferedInfo}
  IID_IFileOperationProgressSink: TGUID              = SID_IFileOperationProgressSink;
  {$EXTERNALSYM IID_IFileOperationProgressSink}
  IID_IShellItemArray: TGUID                         = SID_IShellItemArray;
  {$EXTERNALSYM IID_IShellItemArray}
  IID_IInitializeWithItem: TGUID                     = SID_IInitializeWithItem;
  {$EXTERNALSYM IID_IInitializeWithItem}
  IID_IObjectWithSelection: TGUID                    = SID_IObjectWithSelection;
  {$EXTERNALSYM IID_IObjectWithSelection}
  IID_IObjectWithBackReferences: TGUID               = SID_IObjectWithBackReferences;
  {$EXTERNALSYM IID_IObjectWithBackReferences}
  IID_IPropertyUI: TGUID                             = SID_IPropertyUI;
  {$EXTERNALSYM IID_IPropertyUI}
  IID_ICategoryProvider: TGUID                       = SID_ICategoryProvider;
  {$EXTERNALSYM IID_ICategoryProvider}
  IID_ICategorizer: TGUID                            = SID_ICategorizer;
  {$EXTERNALSYM IID_ICategorizer}
  IID_IDropTargetHelper: TGUID                       = SID_IDropTargetHelper;
  {$EXTERNALSYM IID_IDropTargetHelper}
  IID_IDragSourceHelper: TGUID                       = SID_IDragSourceHelper;
  {$EXTERNALSYM IID_IDragSourceHelper}
  IID_IDragSourceHelper2: TGUID                      = SID_IDragSourceHelper2;
  {$EXTERNALSYM IID_IDragSourceHelper2}
  IID_IShellLinkA: TGUID                             = SID_IShellLinkA;
  {$EXTERNALSYM IID_IShellLinkA}
  IID_IShellLinkW: TGUID                             = SID_IShellLinkW;
  {$EXTERNALSYM IID_IShellLinkW}
  IID_IShellLink: TGUID                              = SID_IShellLinkW;
  {$EXTERNALSYM IID_IShellLink}
  IID_IShellLinkDataList: TGUID                      = SID_IShellLinkDataList;
  {$EXTERNALSYM IID_IShellLinkDataList}
  IID_IResolveShellLink: TGUID                       = SID_IResolveShellLink;
  {$EXTERNALSYM IID_IResolveShellLink}
  IID_IActionProgressDialog: TGUID                   = SID_IActionProgressDialog;
  {$EXTERNALSYM IID_IActionProgressDialog}
  IID_IHWEventHandler: TGUID                         = SID_IHWEventHandler;
  {$EXTERNALSYM IID_IHWEventHandler}
  IID_IHWEventHandler2: TGUID                        = SID_IHWEventHandler2;
  {$EXTERNALSYM IID_IHWEventHandler2}
  IID_IQueryCancelAutoPlay: TGUID                    = SID_IQueryCancelAutoPlay;
  {$EXTERNALSYM IID_IQueryCancelAutoPlay}
  IID_IDynamicHWHandler: TGUID                       = SID_IDynamicHWHandler;
  {$EXTERNALSYM IID_IDynamicHWHandler}
  IID_IActionProgress: TGUID                         = SID_IActionProgress;
  {$EXTERNALSYM IID_IActionProgress}
  IID_IShellExtInit: TGUID                           = SID_IShellExtInit;
  {$EXTERNALSYM IID_IShellExtInit}
  IID_IShellPropSheetExt: TGUID                      = SID_IShellPropSheetExt;
  {$EXTERNALSYM IID_IShellPropSheetExt}
  IID_IRemoteComputer: TGUID                         = SID_IRemoteComputer;
  {$EXTERNALSYM IID_IRemoteComputer}
  IID_IQueryContinue: TGUID                          = SID_IQueryContinue;
  {$EXTERNALSYM IID_IQueryContinue}
  IID_IObjectWithCancelEvent: TGUID                  = SID_IObjectWithCancelEvent;
  {$EXTERNALSYM IID_IObjectWithCancelEvent}
  IID_IUserNotification: TGUID                       = SID_IUserNotification;
  {$EXTERNALSYM IID_IUserNotification}
  IID_IUserNotificationCallback: TGUID               = SID_IUserNotificationCallback;
  {$EXTERNALSYM IID_IUserNotificationCallback}
  IID_IUserNotification2: TGUID                      = SID_IUserNotification2;
  {$EXTERNALSYM IID_IUserNotification2}
  IID_IItemNameLimits: TGUID                         = SID_IItemNameLimits;
  {$EXTERNALSYM IID_IItemNameLimits}
  IID_ISearchFolderItemFactory: TGUID                = SID_ISearchFolderItemFactory;
  {$EXTERNALSYM IID_ISearchFolderItemFactory}
  IID_IExtractImage: TGUID                           = SID_IExtractImage;
  {$EXTERNALSYM IID_IExtractImage}
  IID_IExtractImage2: TGUID                          = SID_IExtractImage2;
  {$EXTERNALSYM IID_IExtractImage2}
  IID_IThumbnailHandlerFactory: TGUID                = SID_IThumbnailHandlerFactory;
  {$EXTERNALSYM IID_IThumbnailHandlerFactory}
  IID_IParentAndItem: TGUID                          = SID_IParentAndItem;
  {$EXTERNALSYM IID_IParentAndItem}
  IID_IDockingWindow: TGUID                          = SID_IDockingWindow;
  {$EXTERNALSYM IID_IDockingWindow}
  IID_IDeskBand: TGUID                               = SID_IDeskBand;
  {$EXTERNALSYM IID_IDeskBand}
  IID_IDeskBandInfo: TGUID                           = SID_IDeskBandInfo;
  {$EXTERNALSYM IID_IDeskBandInfo}
  IID_IDeskBand2: TGUID                              = SID_IDeskBand2;
  {$EXTERNALSYM IID_IDeskBand2}
  IID_ITaskbarList: TGUID                            = SID_ITaskbarList;
  {$EXTERNALSYM IID_ITaskbarList}
  IID_ITaskbarList2: TGUID                           = SID_ITaskbarList2;
  {$EXTERNALSYM IID_ITaskbarList2}
  IID_ITaskbarList3: TGUID                           = SID_ITaskbarList3;
  {$EXTERNALSYM IID_ITaskbarList3}
  IID_ITaskbarList4: TGUID                           = SID_ITaskbarList4;
  {$EXTERNALSYM IID_ITaskbarList4}
  IID_IStartMenuPinnedList: TGUID                    = SID_IStartMenuPinnedList;
  {$EXTERNALSYM IID_IStartMenuPinnedList}
  IID_ICDBurn: TGUID                                 = SID_ICDBurn;
  {$EXTERNALSYM IID_ICDBurn}
  IID_IWizardSite: TGUID                             = SID_IWizardSite;
  {$EXTERNALSYM IID_IWizardSite}
  IID_IWizardExtension: TGUID                        = SID_IWizardExtension;
  {$EXTERNALSYM IID_IWizardExtension}
  IID_IWebWizardExtension: TGUID                     = SID_IWebWizardExtension;
  {$EXTERNALSYM IID_IWebWizardExtension}
  IID_IPublishingWizard: TGUID                       = SID_IPublishingWizard;
  {$EXTERNALSYM IID_IPublishingWizard}
  IID_IFolderViewHost: TGUID                         = SID_IFolderViewHost;
  {$EXTERNALSYM IID_IFolderViewHost}
  IID_IExplorerBrowserEvents: TGUID                  = SID_IExplorerBrowserEvents;
  {$EXTERNALSYM IID_IExplorerBrowserEvents}
  IID_IExplorerBrowser: TGUID                        = SID_IExplorerBrowser;
  {$EXTERNALSYM IID_IExplorerBrowser}
  IID_IAccessibleObject: TGUID                       = SID_IAccessibleObject;
  {$EXTERNALSYM IID_IAccessibleObject}
  IID_IResultsFolder: TGUID                          = SID_IResultsFolder;
  {$EXTERNALSYM IID_IResultsFolder}
  IID_IEnumObjects: TGUID                            = SID_IEnumObjects;
  {$EXTERNALSYM IID_IEnumObjects}
  IID_IOperationsProgressDialog: TGUID               = SID_IOperationsProgressDialog;
  {$EXTERNALSYM IID_IOperationsProgressDialog}
  IID_IIOCancelInformation: TGUID                    = SID_IIOCancelInformation;
  {$EXTERNALSYM IID_IIOCancelInformation}
  IID_IFileOperation: TGUID                          = SID_IFileOperation;
  {$EXTERNALSYM IID_IFileOperation}
  IID_IObjectProvider: TGUID                         = SID_IObjectProvider;
  {$EXTERNALSYM IID_IObjectProvider}
  IID_INamespaceWalkCB: TGUID                        = SID_INamespaceWalkCB;
  {$EXTERNALSYM IID_INamespaceWalkCB}
  IID_INamespaceWalkCB2: TGUID                       = SID_INamespaceWalkCB2;
  {$EXTERNALSYM IID_INamespaceWalkCB2}
  IID_INamespaceWalk: TGUID                          = SID_INamespaceWalk;
  {$EXTERNALSYM IID_INamespaceWalk}
  IID_IAutoCompleteDropDown: TGUID                   = SID_IAutoCompleteDropDown;
  {$EXTERNALSYM IID_IAutoCompleteDropDown}
  IID_IBandSite: TGUID                               = SID_IBandSite;
  {$EXTERNALSYM IID_IBandSite}
  IID_IModalWindow: TGUID                            = SID_IModalWindow;
  {$EXTERNALSYM IID_IModalWindow}
  IID_ICDBurnExt: TGUID                              = SID_ICDBurnExt;
  {$EXTERNALSYM IID_ICDBurnExt}
  IID_IContextMenuSite: TGUID                        = SID_IContextMenuSite;
  {$EXTERNALSYM IID_IContextMenuSite}
  IID_IEnumReadyCallback: TGUID                      = SID_IEnumReadyCallback;
  {$EXTERNALSYM IID_IEnumReadyCallback}
  IID_IEnumerableView: TGUID                         = SID_IEnumerableView;
  {$EXTERNALSYM IID_IEnumerableView}
  IID_IInsertItem: TGUID                             = SID_IInsertItem;
  {$EXTERNALSYM IID_IInsertItem}
  IID_IMenuBand: TGUID                               = SID_IMenuBand;
  {$EXTERNALSYM IID_IMenuBand}
  IID_IFolderBandPriv: TGUID                         = SID_IFolderBandPriv;
  {$EXTERNALSYM IID_IFolderBandPriv}
  IID_IRegTreeItem: TGUID                            = SID_IRegTreeItem;
  {$EXTERNALSYM IID_IRegTreeItem}
  IID_IImageRecompress: TGUID                        = SID_IImageRecompress;
  {$EXTERNALSYM IID_IImageRecompress}
  IID_IDeskBar: TGUID                                = SID_IDeskBar;
  {$EXTERNALSYM IID_IDeskBar}
  IID_IMenuPopup: TGUID                              = SID_IMenuPopup;
  {$EXTERNALSYM IID_IMenuPopup}
  IID_IFileIsInUse: TGUID                            = SID_IFileIsInUse;
  {$EXTERNALSYM IID_IFileIsInUse}
  IID_IFileDialogEvents: TGUID                       = SID_IFileDialogEvents;
  {$EXTERNALSYM IID_IFileDialogEvents}
  IID_IFileDialog: TGUID                             = SID_IFileDialog;
  {$EXTERNALSYM IID_IFileDialog}
  IID_IFileSaveDialog: TGUID                         = SID_IFileSaveDialog;
  {$EXTERNALSYM IID_IFileSaveDialog}
  IID_IFileOpenDialog: TGUID                         = SID_IFileOpenDialog;
  {$EXTERNALSYM IID_IFileOpenDialog}
  IID_IFileDialogCustomize: TGUID                    = SID_IFileDialogCustomize;
  {$EXTERNALSYM IID_IFileDialogCustomize}
  IID_IFileDialogControlEvents: TGUID                = SID_IFileDialogControlEvents;
  {$EXTERNALSYM IID_IFileDialogControlEvents}
  IID_IFileDialog2: TGUID                            = SID_IFileDialog2;
  {$EXTERNALSYM IID_IFileDialog2}
  IID_IApplicationAssociationRegistration: TGUID     = SID_IApplicationAssociationRegistration;
  {$EXTERNALSYM IID_IApplicationAssociationRegistration}
  IID_IApplicationAssociationRegistrationUI: TGUID   = SID_IApplicationAssociationRegistrationUI;
  {$EXTERNALSYM IID_IApplicationAssociationRegistrationUI}
  IID_IDelegateFolder: TGUID                         = SID_IDelegateFolder;
  {$EXTERNALSYM IID_IDelegateFolder}
  IID_IBrowserFrameOptions: TGUID                    = SID_IBrowserFrameOptions;
  {$EXTERNALSYM IID_IBrowserFrameOptions}
  IID_INewWindowManager: TGUID                       = SID_INewWindowManager;
  {$EXTERNALSYM IID_INewWindowManager}
  IID_IAttachmentExecute: TGUID                      = SID_IAttachmentExecute;
  {$EXTERNALSYM IID_IAttachmentExecute}
  IID_IShellMenuCallback: TGUID                      = SID_IShellMenuCallback;
  {$EXTERNALSYM IID_IShellMenuCallback}
  IID_IShellMenu: TGUID                              = SID_IShellMenu;
  {$EXTERNALSYM IID_IShellMenu}
  IID_IShellRunDll: TGUID                            = SID_IShellRunDll;
  {$EXTERNALSYM IID_IShellRunDll}
  IID_IKnownFolder: TGUID                            = SID_IKnownFolder;
  {$EXTERNALSYM IID_IKnownFolder}
  IID_IKnownFolderManager: TGUID                     = SID_IKnownFolderManager;
  {$EXTERNALSYM IID_IKnownFolderManager}
  IID_ISharingConfigurationManager: TGUID            = SID_ISharingConfigurationManager;
  {$EXTERNALSYM IID_ISharingConfigurationManager}
  IID_IPreviousVersionsInfo: TGUID                   = SID_IPreviousVersionsInfo;
  {$EXTERNALSYM IID_IPreviousVersionsInfo}
  IID_IRelatedItem: TGUID                            = SID_IRelatedItem;
  {$EXTERNALSYM IID_IRelatedItem}
  IID_IIdentityName: TGUID                           = SID_IIdentityName;
  {$EXTERNALSYM IID_IIdentityName}
  IID_IDelegateItem: TGUID                           = SID_IDelegateItem;
  {$EXTERNALSYM IID_IDelegateItem}
  IID_ICurrentItem: TGUID                            = SID_ICurrentItem;
  {$EXTERNALSYM IID_ICurrentItem}
  IID_ITransferMediumItem: TGUID                     = SID_ITransferMediumItem;
  {$EXTERNALSYM IID_ITransferMediumItem}
  IID_IUseToBrowseItem: TGUID                        = SID_IUseToBrowseItem;
  {$EXTERNALSYM IID_IUseToBrowseItem}
  IID_IDisplayItem: TGUID                            = SID_IDisplayItem;
  {$EXTERNALSYM IID_IDisplayItem}
  IID_IViewStateIdentityItem: TGUID                  = SID_IViewStateIdentityItem;
  {$EXTERNALSYM IID_IViewStateIdentityItem}
  IID_IPreviewItem: TGUID                            = SID_IPreviewItem;
  {$EXTERNALSYM IID_IPreviewItem}
  IID_IDestinationStreamFactory: TGUID               = SID_IDestinationStreamFactory;
  {$EXTERNALSYM IID_IDestinationStreamFactory}
  IID_INewMenuClient: TGUID                          = SID_INewMenuClient;
  {$EXTERNALSYM IID_INewMenuClient}
  IID_IInitializeWithBindCtx: TGUID                  = SID_IInitializeWithBindCtx;
  {$EXTERNALSYM IID_IInitializeWithBindCtx}
  IID_IShellItemFilter: TGUID                        = SID_IShellItemFilter;
  {$EXTERNALSYM IID_IShellItemFilter}
  IID_INameSpaceTreeControl: TGUID                   = SID_INameSpaceTreeControl;
  {$EXTERNALSYM IID_INameSpaceTreeControl}
  IID_INameSpaceTreeControl2: TGUID                  = SID_INameSpaceTreeControl2;
  {$EXTERNALSYM IID_INameSpaceTreeControl2}
  IID_INameSpaceTreeControlEvents: TGUID             = SID_INameSpaceTreeControlEvents;
  {$EXTERNALSYM IID_INameSpaceTreeControlEvents}
  IID_INameSpaceTreeControlDropHandler: TGUID        = SID_INameSpaceTreeControlDropHandler;
  {$EXTERNALSYM IID_INameSpaceTreeControlDropHandler}
  IID_INameSpaceTreeAccessible: TGUID                = SID_INameSpaceTreeAccessible;
  {$EXTERNALSYM IID_INameSpaceTreeAccessible}
  IID_INameSpaceTreeControlCustomDraw: TGUID         = SID_INameSpaceTreeControlCustomDraw;
  {$EXTERNALSYM IID_INameSpaceTreeControlCustomDraw}
  IID_INameSpaceTreeControlFolderCapabilities: TGUID = SID_INameSpaceTreeControlFolderCapabilities;
  {$EXTERNALSYM IID_INameSpaceTreeControlFolderCapabilities}
  IID_IPreviewHandler: TGUID                         = SID_IPreviewHandler;
  {$EXTERNALSYM IID_IPreviewHandler}
  IID_IPreviewHandlerFrame: TGUID                    = SID_IPreviewHandlerFrame;
  {$EXTERNALSYM IID_IPreviewHandlerFrame}
  IID_ITrayDeskBand: TGUID                           = SID_ITrayDeskBand;
  {$EXTERNALSYM IID_ITrayDeskBand}
  IID_IBandHost: TGUID                               = SID_IBandHost;
  {$EXTERNALSYM IID_IBandHost}
  IID_IExplorerPaneVisibility: TGUID                 = SID_IExplorerPaneVisibility;
  {$EXTERNALSYM IID_IExplorerPaneVisibility}
  IID_IContextMenuCB: TGUID                          = SID_IContextMenuCB;
  {$EXTERNALSYM IID_IContextMenuCB}
  IID_IDefaultExtractIconInit: TGUID                 = SID_IDefaultExtractIconInit;
  {$EXTERNALSYM IID_IDefaultExtractIconInit}
  IID_IExplorerCommand: TGUID                        = SID_IExplorerCommand;
  {$EXTERNALSYM IID_IExplorerCommand}
  IID_IExplorerCommandState: TGUID                   = SID_IExplorerCommandState;
  {$EXTERNALSYM IID_IExplorerCommandState}
  IID_IInitializeCommand: TGUID                      = SID_IInitializeCommand;
  {$EXTERNALSYM IID_IInitializeCommand}
  IID_IEnumExplorerCommand: TGUID                    = SID_IEnumExplorerCommand;
  {$EXTERNALSYM IID_IEnumExplorerCommand}
  IID_IExplorerCommandProvider: TGUID                = SID_IExplorerCommandProvider;
  {$EXTERNALSYM IID_IExplorerCommandProvider}
  IID_IMarkupCallback: TGUID                         = SID_IMarkupCallback;
  {$EXTERNALSYM IID_IMarkupCallback}
  IID_IControlMarkup: TGUID                          = SID_IControlMarkup;
  {$EXTERNALSYM IID_IControlMarkup}
  IID_IInitializeNetworkFolder: TGUID                = SID_IInitializeNetworkFolder;
  {$EXTERNALSYM IID_IInitializeNetworkFolder}
  IID_IOpenControlPanel: TGUID                       = SID_IOpenControlPanel;
  {$EXTERNALSYM IID_IOpenControlPanel}
  IID_IComputerInfoChangeNotify: TGUID               = SID_IComputerInfoChangeNotify;
  {$EXTERNALSYM IID_IComputerInfoChangeNotify}
  IID_IFileSystemBindData: TGUID                     = SID_IFileSystemBindData;
  {$EXTERNALSYM IID_IFileSystemBindData}
  IID_IFileSystemBindData2: TGUID                    = SID_IFileSystemBindData2;
  {$EXTERNALSYM IID_IFileSystemBindData2}
  IID_ICustomDestinationList: TGUID                  = SID_ICustomDestinationList;
  {$EXTERNALSYM IID_ICustomDestinationList}
  IID_IApplicationDestinations: TGUID                = SID_IApplicationDestinations;
  {$EXTERNALSYM IID_IApplicationDestinations}
  IID_IApplicationDocumentLists: TGUID               = SID_IApplicationDocumentLists;
  {$EXTERNALSYM IID_IApplicationDocumentLists}
  IID_IObjectWithAppUserModelID: TGUID               = SID_IObjectWithAppUserModelID;
  {$EXTERNALSYM IID_IObjectWithAppUserModelID}
  IID_IObjectWithProgID: TGUID                       = SID_IObjectWithProgID;
  {$EXTERNALSYM IID_IObjectWithProgID}
  IID_IUpdateIDList: TGUID                           = SID_IUpdateIDList;
  {$EXTERNALSYM IID_IUpdateIDList}
  IID_IDesktopGadget: TGUID                          = SID_IDesktopGadget;
  {$EXTERNALSYM IID_IDesktopGadget}
  IID_IHomeGroup: TGUID                              = SID_IHomeGroup;
  {$EXTERNALSYM IID_IHomeGroup}
  IID_IInitializeWithPropertyStore: TGUID            = SID_IInitializeWithPropertyStore;
  {$EXTERNALSYM IID_IInitializeWithPropertyStore}
  IID_IOpenSearchSource: TGUID                       = SID_IOpenSearchSource;
  {$EXTERNALSYM IID_IOpenSearchSource}
  IID_IShellLibrary: TGUID                           = SID_IShellLibrary;
  {$EXTERNALSYM IID_IShellLibrary}
  IID_IAssocHandlerInvoker: TGUID                    = SID_IAssocHandlerInvoker;
  {$EXTERNALSYM IID_IAssocHandlerInvoker}
  IID_IAssocHandler: TGUID                           = SID_IAssocHandler;
  {$EXTERNALSYM IID_IAssocHandler}
  IID_IEnumAssocHandlers: TGUID                      = SID_IEnumAssocHandlers;
  {$EXTERNALSYM IID_IEnumAssocHandlers}

  SID_SFolderView: TGUID             = SID_IFolderView;     // folder view, usually IFolderView
  {$EXTERNALSYM SID_SFolderView}
  SID_SExplorerBrowserFrame: TGUID   = SID_ICommDlgBrowser;
  {$EXTERNALSYM SID_SExplorerBrowserFrame}
  SID_SProfferService: TGUID         = SID_IProfferService; // nearest service that you can proffer to
  {$EXTERNALSYM SID_SProfferService}
  CGID_DeskBand: TGUID               = SID_IDeskBand;
  {$EXTERNALSYM CGID_DeskBand}
  SID_WizardSite: TGUID              = SID_IWizardSite;
  {$EXTERNALSYM SID_WizardSite}
  SID_WebWizardHost: TGUID           = SID_IWebWizardExtension;
  {$EXTERNALSYM SID_WebWizardHost}
  SID_SBandSite: TGUID               = SID_IBandSite;
  {$EXTERNALSYM SID_SBandSite}
  CGID_BandSite: TGUID               = SID_IBandSite;
  {$EXTERNALSYM CGID_BandSite}
  SID_CDWizardHost: TGUID            = SID_ICDBurnExt;
  {$EXTERNALSYM SID_CDWizardHost}
  SID_EnumerableView: TGUID          = SID_IEnumerableView;
  {$EXTERNALSYM SID_EnumerableView}
  SID_SNewWindowManager: TGUID       = SID_INewWindowManager;
  {$EXTERNALSYM SID_SNewWindowManager}
  SID_SNewMenuClient: TGUID          = SID_INewMenuClient;
  {$EXTERNALSYM SID_SNewMenuClient}
  SID_SCommandBarState: TGUID        = '{B99EAA5C-3850-4400-BC33-2CE534048BF8}';
  {$EXTERNALSYM SID_SCommandBarState}
  SID_SNavigationPane: TGUID         = SID_INameSpaceTreeControl; // nearest service that you can proffer to
  {$EXTERNALSYM SID_SNavigationPane}
  SID_SBandHost: TGUID               = SID_IBandHost;
  {$EXTERNALSYM SID_SBandHost}
  SID_ExplorerPaneVisibility: TGUID  = SID_IExplorerPaneVisibility;
  {$EXTERNALSYM SID_ExplorerPaneVisibility}

  SID_LinkSite:      TGUID = SID_IShellLinkW;     // IServiceProvider::QueryService() access the link object that is defering to you
  {$EXTERNALSYM SID_LinkSite}
  SID_SShellBrowser: TGUID = SID_IShellBrowser;
  {$EXTERNALSYM SID_SShellBrowser}

// ===========================================================================
// IContextMenu interface
// 
// [OverView]
// 
//  The shell uses the IContextMenu interface in following three cases.
// 
// case-1: The shell is loading context menu extensions.
// 
//   When the user clicks the right mouse button on an item within the shell's
//  name space (i.g., file, directory, server, work-group, etc.), it creates
//  the default context menu for its type, then loads context menu extensions
//  that are registered for that type (and its base type) so that they can
//  add extra menu items. Those context menu extensions are registered at
//  HKCR\{ProgID}\shellex\ContextMenuHandlers.
// 
// case-2: The shell is retrieving a context menu of sub-folders in extended
//   name-space.
// 
//   When the explorer's name space is extended by name space extensions,
//  the shell calls their IShellFolder::GetUIObjectOf to get the IContextMenu
//  objects when it creates context menus for folders under those extended
//  name spaces.
// 
// case-3: The shell is loading non-default drag and drop handler for directories.
// 
//   When the user performed a non-default drag and drop onto one of file
//  system folders (i.e., directories), it loads shell extensions that are
//  registered at HKCR\{ProgID}\DragDropHandlers.
// 
// 
// [Member functions]
// 
// 
// IContextMenu::QueryContextMenu
// 
//   This member function may insert one or more menuitems to the specified
//  menu (hmenu) at the specified location (indexMenu which is never be -1).
//  The IDs of those menuitem must be in the specified range (idCmdFirst and
//  idCmdLast). It returns the maximum menuitem ID offset (ushort) in the
//  'code' field (low word) of the scode.
// 
//   The uFlags specify the context. It may have one or more of following
//  flags.
// 
//  CMF_DEFAULTONLY: This flag is passed if the user is invoking the default
//   action (typically by double-clicking, case 1 and 2 only). Context menu
//   extensions (case 1) should not add any menu items, and returns S_OK.
// 
//  CMF_VERBSONLY: The explorer passes this flag if it is constructing
//   a context menu for a short-cut object (case 1 and case 2 only). If this
//   flag is passed, it should not add any menu-items that is not appropriate
//   from a short-cut.
//    A good example is the Delete menuitem, which confuses the user
//   because it is not clear whether it deletes the link source item or the
//   link itself.
// 
//  CMF_EXPLORER: The explorer passes this flag if it has the left-side pane
//   (case 1 and 2 only). Context menu extensions should ignore this flag.
//
//   High word (16-bit) are reserved for context specific communications
//  and the rest of flags (13-bit) are reserved by the system.
// 
// 
// IContextMenu::InvokeCommand
// 
//   This member is called when the user has selected one of menuitems that
//  are inserted by previous QueryContextMenu member. In this case, the
//  LOWORD(lpici->lpVerb) contains the menuitem ID offset (menuitem ID -
//  idCmdFirst).
// 
//   This member function may also be called programmatically. In such a case,
//  lpici->lpVerb specifies the canonical name of the command to be invoked,
//  which is typically retrieved by GetCommandString member previously.
// 
//  Parameters in lpci:
//    cbSize -- Specifies the size of this structure (sizeof(*lpci))
//    hwnd   -- Specifies the owner window for any message/dialog box.
//    fMask  -- Specifies whether or not dwHotkey/hIcon paramter is valid.
//    lpVerb -- Specifies the command to be invoked.
//    lpParameters -- Parameters (optional)
//    lpDirectory  -- Working directory (optional)
//    nShow -- Specifies the flag to be passed to ShowWindow (SW_*).
//    dwHotKey -- Hot key to be assigned to the app after invoked (optional).
//    hIcon -- Specifies the icon (optional).
//    hMonitor -- Specifies the default monitor (optional).
// 
// 
// IContextMenu::GetCommandString
// 
//   This member function is called by the explorer either to get the
//  canonical (language independent) command name (uFlags == GCS_VERB) or
//  the help text ((uFlags & GCS_HELPTEXT) != 0) for the specified command.
//  The retrieved canonical string may be passed to its InvokeCommand
//  member function to invoke a command programmatically. The explorer
//  displays the help texts in its status bar; therefore, the length of
//  the help text should be reasonably short (<40 characters).
// 
//  Parameters:
//   idCmd -- Specifies menuitem ID offset (from idCmdFirst)
//   uFlags -- Either GCS_VERB or GCS_HELPTEXT
//   pwReserved -- Reserved (must pass NULL when calling, must ignore when called)
//   pszName -- Specifies the string buffer.
//   cchMax -- Specifies the size of the string buffer.
// 
// ===========================================================================

// QueryContextMenu uFlags
const
  CMF_NORMAL            = $00000000;
  {$EXTERNALSYM CMF_NORMAL}
  CMF_DEFAULTONLY       = $00000001;
  {$EXTERNALSYM CMF_DEFAULTONLY}
  CMF_VERBSONLY         = $00000002;
  {$EXTERNALSYM CMF_VERBSONLY}
  CMF_EXPLORE           = $00000004;
  {$EXTERNALSYM CMF_EXPLORE}
  CMF_NOVERBS           = $00000008;
  {$EXTERNALSYM CMF_NOVERBS}
  CMF_CANRENAME         = $00000010;
  {$EXTERNALSYM CMF_CANRENAME}
  CMF_NODEFAULT         = $00000020;
  {$EXTERNALSYM CMF_NODEFAULT}
  CMF_INCLUDESTATIC     = $00000040;
  {$EXTERNALSYM CMF_INCLUDESTATIC}
  CMF_ITEMMENU          = $00000080;
  {$EXTERNALSYM CMF_ITEMMENU}
  CMF_EXTENDEDVERBS     = $00000100;
  {$EXTERNALSYM CMF_EXTENDEDVERBS}
  CMF_DISABLEDVERBS     = $00000200;
  {$EXTERNALSYM CMF_DISABLEDVERBS}
  CMF_ASYNCVERBSTATE    = $00000400;
  {$EXTERNALSYM CMF_ASYNCVERBSTATE}
  CMF_OPTIMIZEFORINVOKE = $00000800;
  {$EXTERNALSYM CMF_OPTIMIZEFORINVOKE}
  CMF_SYNCCASCADEMENU   = $00001000;
  {$EXTERNALSYM CMF_SYNCCASCADEMENU}
  CMF_DONOTPICKDEFAULT  = $00002000;
  {$EXTERNALSYM CMF_DONOTPICKDEFAULT}
  CMF_RESERVED          = $ffff0000;
  {$EXTERNALSYM CMF_RESERVED}

// GetCommandString uFlags
  GCS_VERBA     = $00000000; // canonical verb
  {$EXTERNALSYM GCS_VERBA}
  GCS_HELPTEXTA = $00000001; // help text (for status bar)
  {$EXTERNALSYM GCS_HELPTEXTA}
  GCS_VALIDATEA = $00000002; // validate command exists
  {$EXTERNALSYM GCS_VALIDATEA}
  GCS_VERBW     = $00000004; // canonical verb (unicode)
  {$EXTERNALSYM GCS_VERBW}
  GCS_HELPTEXTW = $00000005; // help text (unicode version)
  {$EXTERNALSYM GCS_HELPTEXTW}
  GCS_VALIDATEW = $00000006; // validate command exists (unicode)
  {$EXTERNALSYM GCS_VALIDATEW}
  GCS_VERBICONW = $00000014; // icon string (unicode)
  {$EXTERNALSYM GCS_VERBICONW}
  GCS_UNICODE   = $00000004; // for bit testing - Unicode string
  {$EXTERNALSYM GCS_UNICODE}

{$IFDEF UNICODE}
  GCS_VERB      = GCS_VERBW;
  GCS_HELPTEXT  = GCS_HELPTEXTW;
  GCS_VALIDATE  = GCS_VALIDATEW;
{$ELSE}
  GCS_VERB      = GCS_VERBA;
  GCS_HELPTEXT  = GCS_HELPTEXTA;
  GCS_VALIDATE  = GCS_VALIDATEA;
{$ENDIF}
  {$EXTERNALSYM GCS_VERB}
  {$EXTERNALSYM GCS_HELPTEXT}
  {$EXTERNALSYM GCS_VALIDATE}

  CMDSTR_NEWFOLDERA   = 'NewFolder';
  {$EXTERNALSYM CMDSTR_NEWFOLDERA}
  CMDSTR_VIEWLISTA    = 'ViewList';
  {$EXTERNALSYM CMDSTR_VIEWLISTA}
  CMDSTR_VIEWDETAILSA = 'ViewDetails';
  {$EXTERNALSYM CMDSTR_VIEWDETAILSA}
  CMDSTR_NEWFOLDERW   = 'NewFolder';                         
  {$EXTERNALSYM CMDSTR_NEWFOLDERW}
  CMDSTR_VIEWLISTW    = 'ViewList';
  {$EXTERNALSYM CMDSTR_VIEWLISTW}
  CMDSTR_VIEWDETAILSW = 'ViewDetails';
  {$EXTERNALSYM CMDSTR_VIEWDETAILSW}
  
{$IFDEF UNICODE}
  CMDSTR_NEWFOLDER    = CMDSTR_NEWFOLDERW;
  CMDSTR_VIEWLIST     = CMDSTR_VIEWLISTW;
  CMDSTR_VIEWDETAILS  = CMDSTR_VIEWDETAILSW;
{$ELSE}
  CMDSTR_NEWFOLDER    = CMDSTR_NEWFOLDERA;
  CMDSTR_VIEWLIST     = CMDSTR_VIEWLISTA;
  CMDSTR_VIEWDETAILS  = CMDSTR_VIEWDETAILSA;
{$ENDIF}
  {$EXTERNALSYM CMDSTR_NEWFOLDER}
  {$EXTERNALSYM CMDSTR_VIEWLIST}
  {$EXTERNALSYM CMDSTR_VIEWDETAILS}

  CMIC_MASK_HOTKEY           = SEE_MASK_HOTKEY;
  {$EXTERNALSYM CMIC_MASK_HOTKEY}
  CMIC_MASK_ICON             = SEE_MASK_ICON;
  {$EXTERNALSYM CMIC_MASK_ICON}
  CMIC_MASK_FLAG_NO_UI       = SEE_MASK_FLAG_NO_UI;
  {$EXTERNALSYM CMIC_MASK_FLAG_NO_UI}
  CMIC_MASK_UNICODE          = SEE_MASK_UNICODE;
  {$EXTERNALSYM CMIC_MASK_UNICODE}
  CMIC_MASK_NO_CONSOLE       = SEE_MASK_NO_CONSOLE;
  {$EXTERNALSYM CMIC_MASK_NO_CONSOLE}
//  CMIC_MASK_HASLINKNAME      = SEE_MASK_HASLINKNAME;  //Note: < Vista
//  {$EXTERNALSYM CMIC_MASK_HASLINKNAME}
//  CMIC_MASK_HASTITLE         = SEE_MASK_HASTITLE;        //Note; < Vista
//  {$EXTERNALSYM CMIC_MASK_HASTITLE}
//  CMIC_MASK_FLAG_SEP_VDM     = SEE_MASK_FLAG_SEPVDM;
//  {$EXTERNALSYM CMIC_MASK_FLAG_SEP_VDM}
  CMIC_MASK_ASYNCOK          = SEE_MASK_ASYNCOK;
  {$EXTERNALSYM CMIC_MASK_ASYNCOK}
  CMIC_MASK_NOASYNC          = SEE_MASK_NOASYNC;
  {$EXTERNALSYM CMIC_MASK_NOASYNC}
  CMIC_MASK_SHIFT_DOWN       = $10000000;
  {$EXTERNALSYM CMIC_MASK_SHIFT_DOWN}
  CMIC_MASK_CONTROL_DOWN     = $40000000;
  {$EXTERNALSYM CMIC_MASK_CONTROL_DOWN}
  CMIC_MASK_FLAG_LOG_USAGE   = SEE_MASK_FLAG_LOG_USAGE;
  {$EXTERNALSYM CMIC_MASK_FLAG_LOG_USAGE}
  CMIC_MASK_NOZONECHECKS     = SEE_MASK_NOZONECHECKS;
  {$EXTERNALSYM CMIC_MASK_NOZONECHECKS}

  CMIC_MASK_PTINVOKE         = $20000000;
  {$EXTERNALSYM CMIC_MASK_PTINVOKE}

type
  // NOTE: When SEE_MASK_HMONITOR is set, hIcon is treated as hMonitor
  PCMInvokeCommandInfo = ^TCMInvokeCommandInfo;
  _CMINVOKECOMMANDINFO = record
    cbSize: DWORD;        { must be sizeof(CMINVOKECOMMANDINFO) }
    fMask: DWORD;         { any combination of CMIC_MASK_* }
    hwnd: HWND;           { might be NULL (indicating no owner window) }
    lpVerb: LPCSTR;       { either a string of MAKEINTRESOURCE(idOffset) }
    lpParameters: LPCSTR; { might be NULL (indicating no parameter) }
    lpDirectory: LPCSTR;  { might be NULL (indicating no specific directory) }
    nShow: Integer;       { one of SW_ values for ShowWindow() API }
    dwHotKey: DWORD;
    hIcon: THandle;
  end;
  {$EXTERNALSYM _CMINVOKECOMMANDINFO}
  TCMInvokeCommandInfo = _CMINVOKECOMMANDINFO;
  CMINVOKECOMMANDINFO = _CMINVOKECOMMANDINFO;
  {$EXTERNALSYM CMINVOKECOMMANDINFO}

  PCMInvokeCommandInfoEx = ^TCMInvokeCommandInfoEx;
  _CMINVOKECOMMANDINFOEX = record
    cbSize: DWORD;       { must be sizeof(CMINVOKECOMMANDINFOEX) }
    fMask: DWORD;        { any combination of CMIC_MASK_* }
    hwnd: HWND;          { might be NULL (indicating no owner window) }
    lpVerb: LPCSTR;      { either a string or MAKEINTRESOURCE(idOffset) }
    lpParameters: LPCSTR;{ might be NULL (indicating no parameter) }
    lpDirectory: LPCSTR; { might be NULL (indicating no specific directory) }
    nShow: Integer;      { one of SW_ values for ShowWindow() API }
    dwHotKey: DWORD;
    hIcon: THandle;
    lpTitle: LPCSTR;        { For CreateProcess-StartupInfo.lpTitle }
    lpVerbW: LPCWSTR;       { Unicode verb (for those who can use it) }
    lpParametersW: LPCWSTR; { Unicode parameters (for those who can use it) }
    lpDirectoryW: LPCWSTR;  { Unicode directory (for those who can use it) }
    lpTitleW: LPCWSTR;      { Unicode title (for those who can use it) }
    ptInvoke: TPoint;       { Point where it's invoked }
  end;
  {$EXTERNALSYM _CMINVOKECOMMANDINFOEX}
  TCMInvokeCommandInfoEx = _CMINVOKECOMMANDINFOEX;
  CMINVOKECOMMANDINFOEX = _CMINVOKECOMMANDINFOEX;
  {$EXTERNALSYM CMINVOKECOMMANDINFOEX}

  IContextMenu = interface(IUnknown)
    [SID_IContextMenu]
    function QueryContextMenu(Menu: HMENU;
      indexMenu, idCmdFirst, idCmdLast, uFlags: UINT): HResult; stdcall;
    function InvokeCommand(var lpici: TCMInvokeCommandInfo): HResult; stdcall;
    function GetCommandString(idCmd: UINT_PTR; uFlags: UINT; pwReserved: PUINT;
      pszName: LPSTR; cchMax: UINT): HResult; stdcall;
  end;
  {$EXTERNALSYM IContextMenu}

{ IContextMenu2 (IContextMenu with one new member) }
{ IContextMenu2.HandleMenuMsg }

{  This function is called, if the client of IContextMenu is aware of }
{ IContextMenu2 interface and receives one of following messages while }
{ it is calling TrackPopupMenu (in the window proc of hwndOwner): }
{      WM_INITPOPUP, WM_DRAWITEM and WM_MEASUREITEM }
{  The callee may handle these messages to draw owner draw menuitems. }

  IContextMenu2 = interface(IContextMenu)
    [SID_IContextMenu2]
    function HandleMenuMsg(uMsg: UINT; WParam: WPARAM; LParam: LPARAM): HResult; stdcall;
  end;
  {$EXTERNALSYM IContextMenu2}

{ IContextMenu3 (IContextMenu2 with one new member }
{ IContextMenu3::HandleMenuMsg2 }

{  This function is called, if the client of IContextMenu is aware of }
{ IContextMenu3 interface and receives a menu message while }
{ it is calling TrackPopupMenu (in the window proc of hwndOwner): }

  IContextMenu3 = interface(IContextMenu2)
    [SID_IContextMenu3]
    function HandleMenuMsg2(uMsg: UINT; wParam: WPARAM; lParam: LPARAM;
      var lpResult: LRESULT): HResult; stdcall;
  end;
  {$EXTERNALSYM IContextMenu3}

{ interface IExecuteCommand }
  IExecuteCommand = interface(IUnknown) 
    [SID_IExecuteCommand]
    function SetKeyState(grfKeyState: DWORD): HRESULT; stdcall;
  
    function SetParameters(pszParameters: LPCWSTR): HRESULT; stdcall;
  
    function SetPosition(pt: TPoint): HRESULT; stdcall;
  
    function SetShowWindow(nShow: Integer): HRESULT; stdcall;
  
    function SetNoShowUI(fNoShowUI: BOOL): HRESULT; stdcall;
  
    function SetDirectory(pszDirectory: LPCWSTR): HRESULT; stdcall;
  
    function Execute: HRESULT; stdcall;
  end;
  {$EXTERNALSYM IExecuteCommand}

{ IPersistFolder Interface }
{  The IPersistFolder interface is used by the file system implementation of }
{ IShellFolder::BindToObject when it is initializing a shell folder object. }

{ IPersistFolder::Initialize }
{  This member function is called when the explorer is initializing a }
{ shell folder object. }
{  Parameters: }
{   pidl -- Specifies the absolute location of the folder. }

  IPersistFolder = interface(IPersist)
    [SID_IPersistFolder]
    function Initialize(pidl: PItemIDList): HResult; stdcall;
  end;
  {$EXTERNALSYM IPersistFolder}

const
  IRTIR_TASK_NOT_RUNNING = 0;
  {$EXTERNALSYM IRTIR_TASK_NOT_RUNNING}
  IRTIR_TASK_RUNNING     = 1;
  {$EXTERNALSYM IRTIR_TASK_RUNNING}
  IRTIR_TASK_SUSPENDED   = 2;
  {$EXTERNALSYM IRTIR_TASK_SUSPENDED}
  IRTIR_TASK_PENDING     = 3;
  {$EXTERNALSYM IRTIR_TASK_PENDING}
  IRTIR_TASK_FINISHED    = 4;
  {$EXTERNALSYM IRTIR_TASK_FINISHED}

{ interface IRunnableTask }
type
  IRunnableTask = interface(IUnknown) 
    [SID_IRunnableTask]
    function Run: HRESULT; stdcall;
  
    function Kill(bWait: BOOL): HRESULT; stdcall;
  
    function Suspend: HRESULT; stdcall;
  
    function Resume: HRESULT; stdcall;
  
    function IsRunning: Cardinal; stdcall;
  end;
  {$EXTERNALSYM IRunnableTask}

{ interface ITaskScheduler }
const
  TOID_NULL : TGuid = '{00000000-0000-0000-0000-000000000000}';
  {$EXTERNALSYM TOID_NULL}
  ITSAT_DEFAULT_LPARAM                = UIntPtr(-1);
  {$EXTERNALSYM ITSAT_DEFAULT_LPARAM}
  ITSAT_DEFAULT_PRIORITY              = $10000000;
  {$EXTERNALSYM ITSAT_DEFAULT_PRIORITY}
  ITSAT_MAX_PRIORITY                  = $7fffffff;
  {$EXTERNALSYM ITSAT_MAX_PRIORITY}
  ITSAT_MIN_PRIORITY                  = $00000000;
  {$EXTERNALSYM ITSAT_MIN_PRIORITY}
  ITSSFLAG_COMPLETE_ON_DESTROY        = $0000;        // wait for the current task to complete before deleting the scheduler
  {$EXTERNALSYM ITSSFLAG_COMPLETE_ON_DESTROY}
  ITSSFLAG_KILL_ON_DESTROY            = $0001;        // kill the current task (if there is one) when the task scheduler is deleted
  {$EXTERNALSYM ITSSFLAG_KILL_ON_DESTROY}
  ITSSFLAG_FLAGS_MASK                 = $0003;
  {$EXTERNALSYM ITSSFLAG_FLAGS_MASK}
  ITSS_THREAD_DESTROY_DEFAULT_TIMEOUT = 10*1000;      // default milliseconds until a sleeping worker thread is released
  {$EXTERNALSYM ITSS_THREAD_DESTROY_DEFAULT_TIMEOUT}
  ITSS_THREAD_TERMINATE_TIMEOUT       = INFINITE;     // set sleeping worker threads to never be released
  {$EXTERNALSYM ITSS_THREAD_TERMINATE_TIMEOUT}
  ITSS_THREAD_TIMEOUT_NO_CHANGE       = INFINITE - 1; // no change to the thread timeout
  {$EXTERNALSYM ITSS_THREAD_TIMEOUT_NO_CHANGE}

type
  IShellTaskScheduler = interface(IUnknown) 
    [SID_IShellTaskScheduler]
    function AddTask(const prt: IRunnableTask; const rtoid: TTaskOwnerID; 
      lParam: DWORD_PTR; dwPriority: DWORD): HRESULT; stdcall;
  
    function RemoveTasks(const rtoid: TTaskOwnerID; lParam: DWORD_PTR; 
      bWaitIfRunning: BOOL): HRESULT; stdcall;
  
    function CountTasks(const rtoid: TTaskOwnerID): UINT; stdcall;
  
    function Status(dwReleaseStatus: DWORD; 
      dwThreadTimeout: DWORD): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IShellTaskScheduler}

{ interface IQueryCodePage }
  IQueryCodePage = interface(IUnknown) 
    [SID_IQueryCodePage]
    function GetCodePage(var puiCodePage: UINT): HRESULT; stdcall;
  
    function SetCodePage(uiCodePage: UINT): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IQueryCodePage}

{ interface IPersistFolder2 }
  IPersistFolder2 = interface(IPersistFolder)
    [SID_IPersistFolder2]
    function GetCurFolder(var pidl: PItemIDList): HResult; stdcall;
  end;
  {$EXTERNALSYM IPersistFolder2}

{ interface IPersistFolder3 }
const
  CSIDL_FLAG_PFTI_TRACKTARGET = $4000; // CSIDL_FLAG_DONT_VERIFY; // Defined in sholobj
  {$EXTERNALSYM CSIDL_FLAG_PFTI_TRACKTARGET}
type
  _PERSIST_FOLDER_TARGET_INFO = record 
    pidlTargetFolder: PItemIDList;
    szTargetParsingName: packed array[0..259] of WCHAR;
    szNetworkProvider: packed array[0..259] of WCHAR;
    dwAttributes: DWORD;
    csidl: Integer;
  end;
  {$EXTERNALSYM _PERSIST_FOLDER_TARGET_INFO}
  PERSIST_FOLDER_TARGET_INFO = _PERSIST_FOLDER_TARGET_INFO;
  {$EXTERNALSYM PERSIST_FOLDER_TARGET_INFO}
  PPersistFolderTargetInfo = ^TPersistFolderTargetInfo;
  TPersistFolderTargetInfo = PERSIST_FOLDER_TARGET_INFO;

  IPersistFolder3 = interface(IPersistFolder2) 
    [SID_IPersistFolder3]
    function InitializeEx(const pbc: IBindCtx; pidlRoot: PItemIDList; 
      var ppfti: TPersistFolderTargetInfo): HRESULT; stdcall;
  
    function GetFolderTargetInfo(
      var ppfti: TPersistFolderTargetInfo): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IPersistFolder3}

{ interface IPersistIDList }
  IPersistIDList = interface(IPersist) 
    [SID_IPersistIDList]
    function SetIDList(pidl: PItemIDList): HRESULT; stdcall;
  
    function GetIDList(var ppidl: PItemIDList): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IPersistIDList}

{ IEnumIDList interface }

{ IShellFolder.EnumObjects member returns an IEnumIDList object. }
  IEnumIDList = interface(IUnknown)
    [SID_IEnumIDList]
    function Next(celt: ULONG; out rgelt: PItemIDList;
      var pceltFetched: ULONG): HResult; stdcall;
    function Skip(celt: ULONG): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out ppenum: IEnumIDList): HResult; stdcall;
  end;
  {$EXTERNALSYM IEnumIDList}

  IEnumFullIDList = interface(IUnknown)
    [SID_IEnumFullIDList]
    function Next(celt: ULONG; out rgelt: PItemIDList; 
      out pceltFetched: ULONG): HRESULT; stdcall;
    function Skip(celt: ULONG): HRESULT; stdcall;
    function Reset: HRESULT; stdcall;
    function Clone(out ppenum: IEnumFullIDList): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IEnumFullIDList}

{ IShellFolder.GetDisplayNameOf/SetNameOf uFlags }
const
  SHGDN_NORMAL                         = 0;     { default (display purpose) }
  {$EXTERNALSYM SHGDN_NORMAL}
  SHGDN_INFOLDER                       = 1;     { displayed under a folder (relative) }
  {$EXTERNALSYM SHGDN_INFOLDER}
  SHGDN_FOREDITING                     = $1000; { for in-place editing text }
  {$EXTERNALSYM SHGDN_FOREDITING}
  SHGDN_INCLUDE_NONFILESYS             = $2000; { if not set, display names for shell
                                                  name space items that are not in the
                                                  file system will fail. }
  {$EXTERNALSYM SHGDN_INCLUDE_NONFILESYS}
  SHGDN_FORADDRESSBAR                  = $4000; { for displaying in the address (drives dropdown) bar }
  {$EXTERNALSYM SHGDN_FORADDRESSBAR}
  SHGDN_FORPARSING                     = $8000; { for ParseDisplayName or path }
  {$EXTERNALSYM SHGDN_FORPARSING}

{ IShellFolder.EnumObjects }
const
  SHCONTF_CHECKING_FOR_CHILDREN = $10;
  {$EXTERNALSYM SHCONTF_CHECKING_FOR_CHILDREN}
  SHCONTF_FOLDERS               = $20;   { for shell browser }
  {$EXTERNALSYM SHCONTF_FOLDERS}
  SHCONTF_NONFOLDERS            = $40;   { for default view }
  {$EXTERNALSYM SHCONTF_NONFOLDERS}
  SHCONTF_INCLUDEHIDDEN         = $80;   { for hidden/system objects }
  {$EXTERNALSYM SHCONTF_INCLUDEHIDDEN}
  SHCONTF_INIT_ON_FIRST_NEXT    = $100;
  {$EXTERNALSYM SHCONTF_INIT_ON_FIRST_NEXT}
  SHCONTF_NETPRINTERSRCH        = $200;
  {$EXTERNALSYM SHCONTF_NETPRINTERSRCH}
  SHCONTF_SHAREABLE             = $400;
  {$EXTERNALSYM SHCONTF_SHAREABLE}
  SHCONTF_STORAGE               = $800;
  {$EXTERNALSYM SHCONTF_STORAGE}
  SHCONTF_NAVIGATION_ENUM       = $1000;
  {$EXTERNALSYM SHCONTF_NAVIGATION_ENUM}
  SHCONTF_FASTITEMS             = $2000;
  {$EXTERNALSYM SHCONTF_FASTITEMS}
  SHCONTF_FLATLIST              = $4000;
  {$EXTERNALSYM SHCONTF_FLATLIST}
  SHCONTF_ENABLE_ASYNC          = $8000;
  {$EXTERNALSYM SHCONTF_ENABLE_ASYNC}
  SHCONTF_ENABLE_INCLUDESUPERHIDDEN = $10000;
  {$EXTERNALSYM SHCONTF_ENABLE_INCLUDESUPERHIDDEN}

{ IShellFolder.GetAttributesOf flags }
  SHCIDS_ALLFIELDS      = $80000000;
  {$EXTERNALSYM SHCIDS_ALLFIELDS}
  SHCIDS_CANONICALONLY  = $10000000;
  {$EXTERNALSYM SHCIDS_CANONICALONLY}
  SHCIDS_BITMASK        = $FFFF0000;
  {$EXTERNALSYM SHCIDS_BITMASK}
  SHCIDS_COLUMNMASK     = $0000FFFF;
  {$EXTERNALSYM SHCIDS_COLUMNMASK}
  SFGAO_CANCOPY         = DROPEFFECT_COPY; // Objects can be copied    (0x1)
  {$EXTERNALSYM SFGAO_CANCOPY}
  SFGAO_CANMOVE         = DROPEFFECT_MOVE; // Objects can be moved     (0x2)
  {$EXTERNALSYM SFGAO_CANMOVE}
  SFGAO_CANLINK         = DROPEFFECT_LINK; // Objects can be linked    (0x4)
  {$EXTERNALSYM SFGAO_CANLINK}
  SFGAO_STORAGE         = $00000008;       // supports BindToObject(IID_IStorage)
  {$EXTERNALSYM SFGAO_STORAGE}
  SFGAO_CANRENAME       = $00000010;       // Objects can be renamed
  {$EXTERNALSYM SFGAO_CANRENAME}
  SFGAO_CANDELETE       = $00000020;       // Objects can be deleted
  {$EXTERNALSYM SFGAO_CANDELETE}
  SFGAO_HASPROPSHEET    = $00000040;       // Objects have property sheets
  {$EXTERNALSYM SFGAO_HASPROPSHEET}
  SFGAO_DROPTARGET      = $00000100;       // Objects are drop target
  {$EXTERNALSYM SFGAO_DROPTARGET}
  SFGAO_CAPABILITYMASK  = $00000177;
  {$EXTERNALSYM SFGAO_CAPABILITYMASK}
  SFGAO_SYSTEM          = $00001000;       // System object
  {$EXTERNALSYM SFGAO_SYSTEM}
  SFGAO_ENCRYPTED       = $00002000;       // Object is encrypted (use alt color)
  {$EXTERNALSYM SFGAO_ENCRYPTED}
  SFGAO_ISSLOW          = $00004000;       // 'Slow' object
  {$EXTERNALSYM SFGAO_ISSLOW}
  SFGAO_GHOSTED         = $00008000;       // Ghosted icon
  {$EXTERNALSYM SFGAO_GHOSTED}
  SFGAO_LINK            = $00010000;       // Shortcut (link)
  {$EXTERNALSYM SFGAO_LINK}
  SFGAO_SHARE           = $00020000;       // Shared
  {$EXTERNALSYM SFGAO_SHARE}
  SFGAO_READONLY        = $00040000;       // Read-only
  {$EXTERNALSYM SFGAO_READONLY}
  SFGAO_HIDDEN          = $00080000;       // Hidden object
  {$EXTERNALSYM SFGAO_HIDDEN}
  SFGAO_DISPLAYATTRMASK = $000FC000;
  {$EXTERNALSYM SFGAO_DISPLAYATTRMASK}
  SFGAO_FILESYSANCESTOR = $10000000;       // May contain children with SFGAO_FILESYSTEM
  {$EXTERNALSYM SFGAO_FILESYSANCESTOR}
  SFGAO_FOLDER          = $20000000;       // Support BindToObject(IID_IShellFolder)
  {$EXTERNALSYM SFGAO_FOLDER}
  SFGAO_FILESYSTEM      = $40000000;       // Is a win32 file system object (file/folder/root)
  {$EXTERNALSYM SFGAO_FILESYSTEM}
  SFGAO_HASSUBFOLDER    = $80000000;       // May contain children with SFGAO_FOLDER (may be slow)
  {$EXTERNALSYM SFGAO_HASSUBFOLDER}
  SFGAO_CONTENTSMASK    = $80000000;
  {$EXTERNALSYM SFGAO_CONTENTSMASK}
  SFGAO_VALIDATE        = $01000000;       // Invalidate cached information (may be slow)
  {$EXTERNALSYM SFGAO_VALIDATE}
  SFGAO_REMOVABLE       = $02000000;       // Is this removeable media?
  {$EXTERNALSYM SFGAO_REMOVABLE}
  SFGAO_COMPRESSED      = $04000000;       // Object is compressed (use alt color)
  {$EXTERNALSYM SFGAO_COMPRESSED}
  SFGAO_BROWSABLE       = $08000000;       // Supports IShellFolder, but only implements CreateViewObject() (non-folder view)
  {$EXTERNALSYM SFGAO_BROWSABLE}
  SFGAO_NONENUMERATED   = $00100000;       // Is a non-enumerated object (should be hidden)
  {$EXTERNALSYM SFGAO_NONENUMERATED}
  SFGAO_NEWCONTENT      = $00200000;       // Should show bold in explorer tree
  {$EXTERNALSYM SFGAO_NEWCONTENT}
  SFGAO_CANMONIKER      = $00400000;       // Obsolete
  {$EXTERNALSYM SFGAO_CANMONIKER}
  SFGAO_HASSTORAGE      = $00400000;       // Obsolete
  {$EXTERNALSYM SFGAO_HASSTORAGE}
  SFGAO_STREAM          = $00400000;       // Supports BindToObject(IID_IStream)
  {$EXTERNALSYM SFGAO_STREAM}
  SFGAO_STORAGEANCESTOR = $00800000;       // May contain children with SFGAO_STORAGE or SFGAO_STREAM
  {$EXTERNALSYM SFGAO_STORAGEANCESTOR}
  SFGAO_STORAGECAPMASK  = $70C50008;       // For determining storage capabilities, ie for open/save semantics
  {$EXTERNALSYM SFGAO_STORAGECAPMASK}
  SFGAO_PKEYSFGAOMASK   = $81044000;       // Attributes that are masked out for PKEY_SFGAOFlags because they are considered to cause slow calculations or lack context (SFGAO_VALIDATE | SFGAO_ISSLOW | SFGAO_HASSUBFOLDER and others)
  {$EXTERNALSYM SFGAO_PKEYSFGAOMASK}

const
  STR_BIND_FORCE_FOLDER_SHORTCUT_RESOLVE   = 'Force Folder Shortcut Resolve';
  {$EXTERNALSYM STR_BIND_FORCE_FOLDER_SHORTCUT_RESOLVE}
  STR_AVOID_DRIVE_RESTRICTION_POLICY       = 'Avoid Drive Restriction Policy';
  {$EXTERNALSYM STR_AVOID_DRIVE_RESTRICTION_POLICY}
  STR_SKIP_BINDING_CLSID                   = 'Skip Binding CLSID';
  {$EXTERNALSYM STR_SKIP_BINDING_CLSID}
  STR_PARSE_PREFER_FOLDER_BROWSING         = 'Parse Prefer Folder Browsing';
  {$EXTERNALSYM STR_PARSE_PREFER_FOLDER_BROWSING}
  STR_DONT_PARSE_RELATIVE                  = 'Don''t Parse Relative';
  {$EXTERNALSYM STR_DONT_PARSE_RELATIVE}
  STR_PARSE_TRANSLATE_ALIASES              = 'Parse Translate Aliases';
  {$EXTERNALSYM STR_PARSE_TRANSLATE_ALIASES}
  STR_PARSE_SKIP_NET_CACHE                 = 'Skip Net Resource Cache';
  {$EXTERNALSYM STR_PARSE_SKIP_NET_CACHE}
  STR_PARSE_SHELL_PROTOCOL_TO_FILE_OBJECTS = 'Parse Shell Protocol To File Objects';
  {$EXTERNALSYM STR_PARSE_SHELL_PROTOCOL_TO_FILE_OBJECTS}
  STR_TRACK_CLSID                          = 'Track the CLSID';
  {$EXTERNALSYM STR_TRACK_CLSID}
  STR_INTERNAL_NAVIGATE                    = 'Internal Navigation';
  {$EXTERNALSYM STR_INTERNAL_NAVIGATE}
  STR_PARSE_PROPERTYSTORE                  = 'DelegateNamedProperties';
  {$EXTERNALSYM STR_PARSE_PROPERTYSTORE}
  STR_NO_VALIDATE_FILENAME_CHARS           = 'NoValidateFilenameChars';
  {$EXTERNALSYM STR_NO_VALIDATE_FILENAME_CHARS}
  STR_BIND_DELEGATE_CREATE_OBJECT          = 'Delegate Object Creation';
  {$EXTERNALSYM STR_BIND_DELEGATE_CREATE_OBJECT}
  STR_PARSE_ALLOW_INTERNET_SHELL_FOLDERS   = 'Allow binding to Internet shell folder handlers and negate STR_PARSE_PREFER_WEB_BROWSING';
  {$EXTERNALSYM STR_PARSE_ALLOW_INTERNET_SHELL_FOLDERS}
  STR_PARSE_PREFER_WEB_BROWSING            = 'Do not bind to Internet shell folder handlers';
  {$EXTERNALSYM STR_PARSE_PREFER_WEB_BROWSING}
  STR_PARSE_SHOW_NET_DIAGNOSTICS_UI        = 'Show network diagnostics UI';
  {$EXTERNALSYM STR_PARSE_SHOW_NET_DIAGNOSTICS_UI}
  STR_PARSE_DONT_REQUIRE_VALIDATED_URLS    = 'Do not require validated URLs';
  {$EXTERNALSYM STR_PARSE_DONT_REQUIRE_VALIDATED_URLS}
  STR_INTERNETFOLDER_PARSE_ONLY_URLMON_BINDABLE = 'Validate URL';
  {$EXTERNALSYM STR_INTERNETFOLDER_PARSE_ONLY_URLMON_BINDABLE}
  STR_BIND_FOLDERS_READ_ONLY               = 'Folders As Read Only';
  {$EXTERNALSYM STR_BIND_FOLDERS_READ_ONLY}
  STR_BIND_FOLDER_ENUM_MODE                = 'Folder Enum Mode';
  {$EXTERNALSYM STR_BIND_FOLDER_ENUM_MODE}

//NOTE: Moved from original definition in shobjidl.h because IShellItem is needed
// by other interfaces

{ interface IShellItem }
const
  STR_DONT_RESOLVE_LINK  = 'Don''t Resolve Link';
  {$EXTERNALSYM STR_DONT_RESOLVE_LINK}
  STR_GET_ASYNC_HANDLER = 'GetAsyncHandler';
  {$EXTERNALSYM STR_GET_ASYNC_HANDLER}

const
  SIGDN_NORMALDISPLAY               = 0;
  {$EXTERNALSYM SIGDN_NORMALDISPLAY}
  SIGDN_PARENTRELATIVEPARSING       = $80018001;
  {$EXTERNALSYM SIGDN_PARENTRELATIVEPARSING}
  SIGDN_DESKTOPABSOLUTEPARSING      = $80028000;
  {$EXTERNALSYM SIGDN_DESKTOPABSOLUTEPARSING}
  SIGDN_PARENTRELATIVEEDITING       = $80031001;
  {$EXTERNALSYM SIGDN_PARENTRELATIVEEDITING}
  SIGDN_DESKTOPABSOLUTEEDITING      = $8004C000;
  {$EXTERNALSYM SIGDN_DESKTOPABSOLUTEEDITING}
  SIGDN_FILESYSPATH                 = $80058000;
  {$EXTERNALSYM SIGDN_FILESYSPATH}
  SIGDN_URL                         = $80068000;
  {$EXTERNALSYM SIGDN_URL}
  SIGDN_PARENTRELATIVEFORADDRESSBAR = $8007C001;
  {$EXTERNALSYM SIGDN_PARENTRELATIVEFORADDRESSBAR}
  SIGDN_PARENTRELATIVE              = $80080001;
  {$EXTERNALSYM SIGDN_PARENTRELATIVE}

  SICHINT_DISPLAY                       = 0;
  {$EXTERNALSYM SICHINT_DISPLAY}
  SICHINT_ALLFIELDS                     = $80000000;
  {$EXTERNALSYM SICHINT_ALLFIELDS}
  SICHINT_CANONICAL                     = $10000000;
  {$EXTERNALSYM SICHINT_CANONICAL}
  SICHINT_TEST_FILESYSPATH_IF_NOT_EQUAL = $20000000;
  {$EXTERNALSYM SICHINT_TEST_FILESYSPATH_IF_NOT_EQUAL}

type
  IShellItem = interface(IUnknown)
    [SID_IShellItem]
    function BindToHandler(const pbc: IBindCtx; const bhid: TGUID;
      const riid: TIID; out ppv): HResult; stdcall;
    function GetParent(var ppsi: IShellItem): HResult; stdcall;
    function GetDisplayName(sigdnName: DWORD; var ppszName: LPWSTR): HResult; stdcall;
    function GetAttributes(sfgaoMask: DWORD; var psfgaoAttribs: DWORD): HResult; stdcall;
    function Compare(const psi: IShellItem; hint: DWORD;
      var piOrder: Integer): HResult; stdcall;
  end;
  {$EXTERNALSYM IShellItem}
// END IShellItem

{ interface IObjectWithFolderEnumMode }
type
  FOLDER_ENUM_MODE = Integer;
  {$EXTERNALSYM FOLDER_ENUM_MODE}
  TFolderEnumMode = FOLDER_ENUM_MODE;
const
  FEM_VIEWRESULT = 0;
  {$EXTERNALSYM FEM_VIEWRESULT}
  FEM_NAVIGATION = 1;
  {$EXTERNALSYM FEM_NAVIGATION}

type
  IObjectWithFolderEnumMode = interface(IUnknown)
    [SID_IObjectWithFolderEnumMode]
    function SetMode(feMode: TFolderEnumMode): HRESULT; stdcall;
    function GetMode(out pfeMode: TFolderEnumMode): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IObjectWithFolderEnumMode}

{ interface IParseAndCreateItem }
const
  STR_PARSE_WITH_EXPLICIT_PROGID = 'ExplicitProgid'; 
  {$EXTERNALSYM STR_PARSE_WITH_EXPLICIT_PROGID}
  STR_PARSE_WITH_EXPLICIT_ASSOCAPP = 'ExplicitAssociationApp'; 
  {$EXTERNALSYM STR_PARSE_WITH_EXPLICIT_ASSOCAPP}
  STR_PARSE_EXPLICIT_ASSOCIATION_SUCCESSFUL = 'ExplicitAssociationSuccessful'; 
  {$EXTERNALSYM STR_PARSE_EXPLICIT_ASSOCIATION_SUCCESSFUL}
  STR_PARSE_AND_CREATE_ITEM = 'ParseAndCreateItem'; 
  {$EXTERNALSYM STR_PARSE_AND_CREATE_ITEM}

type
  IParseAndCreateItem = interface(IUnknown) 
    [SID_IParseAndCreateItem]
    function SetItem(const psi: IShellItem): HRESULT; stdcall;
    function GetItem(const riid: TIID; out ppv): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IParseAndCreateItem}

const
  STR_ITEM_CACHE_CONTEXT = 'ItemCacheContext'; 
  {$EXTERNALSYM STR_ITEM_CACHE_CONTEXT}

{ IShellFolder interface }

{ [Member functions] }

{ IShellFolder.BindToObject(pidl, pbc, riid, ppvOut)
  This function returns an instance of a sub-folder which is specified
  by the IDList (pidl).
 IShellFolder.BindToStorage(pidl, pbc, riid, ppvObj)
   This function returns a storage instance of a sub-folder which is
   specified by the IDList (pidl). The shell never calls this member
   function in the first release of Win95.
 IShellFolder.CompareIDs(lParam, pidl1, pidl2)
   This function compares two IDLists and returns the result. The shell
   explorer always passes 0 as lParam, which indicates 'sort by name'.
   It should return 0 (as CODE of the scode), if two id indicates the
   same object; negative value if pidl1 should be placed before pidl2;
   positive value if pidl2 should be placed before pidl1.
 IShellFolder.CreateViewObject(hwndOwner, riid, ppvOut)
   This function creates a view object of the folder itself. The view
   object is a difference instance from the shell folder object.
   "hwndOwner" can be used  as the owner window of its dialog box or
      menu during the lifetime of the view object.
   instance which has only one reference count. The explorer may create
   more than one instances of view object from one shell folder object
   and treat them as separate instances.
 IShellFolder.GetAttributesOf(cidl, apidl, prgfInOut)
   This function returns the attributes of specified objects in that
   folder. 'cidl' and 'apidl' specifies objects. 'apidl' contains only
   simple IDLists. The explorer initializes *prgfInOut with a set of
   flags to be evaluated. The shell folder may optimize the operation
   by not returning unspecified flags.
 IShellFolder.GetUIObjectOf(hwndOwner, cidl, apidl, riid, prgfInOut, ppvOut)
   This function creates a UI object to be used for specified objects.
   The shell explorer passes either IID_IDataObject (for transfer operation)
   or IID_IContextMenu (for context menu operation) as riid.
 IShellFolder.GetDisplayNameOf
   This function returns the display name of the specified object.
   If the ID contains the display name (in the locale character set),
   it returns the offset to the name. Otherwise, it returns a pointer
   to the display name string (UNICODE), which is allocated by the
   task allocator, or fills in a buffer.
 IShellFolder.SetNameOf
   This function sets the display name of the specified object.
   If it changes the ID as well, it returns the new ID which is
   alocated by the task allocator. }
type
  IShellFolder = interface(IUnknown)
    [SID_IShellFolder]
    function ParseDisplayName(hwndOwner: HWND;
      pbcReserved: Pointer; lpszDisplayName: POLESTR; out pchEaten: ULONG;
      out ppidl: PItemIDList; var dwAttributes: ULONG): HResult; stdcall;
    function EnumObjects(hwndOwner: HWND; grfFlags: DWORD;
      out EnumIDList: IEnumIDList): HResult; stdcall;
    function BindToObject(pidl: PItemIDList; pbcReserved: Pointer;
      const riid: TIID; out ppvOut): HResult; stdcall;
    function BindToStorage(pidl: PItemIDList; pbcReserved: Pointer;
      const riid: TIID; out ppvObj): HResult; stdcall;
    function CompareIDs(lParam: LPARAM;
      pidl1, pidl2: PItemIDList): HResult; stdcall;
    function CreateViewObject(hwndOwner: HWND; const riid: TIID;
      out ppvOut): HResult; stdcall;
    function GetAttributesOf(cidl: UINT; var apidl: PItemIDList;
      var rgfInOut: UINT): HResult; stdcall;
    function GetUIObjectOf(hwndOwner: HWND; cidl: UINT; var apidl: PItemIDList;
      const riid: TIID; prgfInOut: Pointer; out ppvOut): HResult; stdcall;
    function GetDisplayNameOf(pidl: PItemIDList; uFlags: DWORD;
      var lpName: TStrRet): HResult; stdcall;
    function SetNameOf(hwndOwner: HWND; pidl: PItemIDList; lpszName: POLEStr;
      uFlags: DWORD; var ppidlOut: PItemIDList): HResult; stdcall;
  end;
  {$EXTERNALSYM IShellFolder}

{ interface IEnumExtraSearch}
  EXTRASEARCH = record 
    guidSearch: TGUID;
    wszFriendlyName: packed array[0..79] of WCHAR;
    wszUrl: packed array[0..2083] of WCHAR;
  end;
  {$EXTERNALSYM EXTRASEARCH}
  PExtraSearch = ^TExtraSearch;
  TExtraSearch = EXTRASEARCH;

  IEnumExtraSearch = interface(IUnknown)
    [SID_IEnumExtraSearch]
    function Next(celt: ULONG; out rgelt: PExtraSearch;
      out pceltFetched: ULONG): HResult; stdcall;
    function Skip(celt: ULONG): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out ppEnum: IEnumExtraSearch): HResult; stdcall;
  end;
  {$EXTERNALSYM IEnumExtraSearch}

  IShellFolder2 = interface(IShellFolder)
    [SID_IShellFolder2]
    function GetDefaultSearchGUID(out pguid: TGUID): HResult; stdcall;
    function EnumSearches(out ppEnum: IEnumExtraSearch): HResult; stdcall;
    function GetDefaultColumn(dwRes: DWORD; var pSort: ULONG;
      var pDisplay: ULONG): HResult; stdcall;
    function GetDefaultColumnState(iColumn: UINT; var pcsFlags: DWORD): HResult; stdcall;
    function GetDetailsEx(pidl: PItemIDList; const pscid: SHCOLUMNID;
      pv: POleVariant): HResult; stdcall;
    function GetDetailsOf(pidl: PItemIDList; iColumn: UINT;
      var psd: TShellDetails): HResult; stdcall;
    function MapColumnToSCID(iColumn: UINT; var pscid: TShColumnID): HResult; stdcall;
  end;
  {$EXTERNALSYM IShellFolder2}

{  FOLDERSETTINGS is a data structure that explorer passes from one folder }
{ view to another, when the user is browsing. It calls ISV::GetCurrentInfo }
{ member to get the current settings and pass it to ISV::CreateViewWindow }
{ to allow the next folder view "inherit" it. These settings assumes a }
{ particular UI (which the shell's folder view has), and shell extensions }
{ may or may not use those settings. }
const
  FWF_NONE                = 0; 
  {$EXTERNALSYM FWF_NONE}
  FWF_AUTOARRANGE         = $1; 
  {$EXTERNALSYM FWF_AUTOARRANGE}
  FWF_ABBREVIATEDNAMES    = $2; 
  {$EXTERNALSYM FWF_ABBREVIATEDNAMES}
  FWF_SNAPTOGRID          = $4; 
  {$EXTERNALSYM FWF_SNAPTOGRID}
  FWF_OWNERDATA           = $8; 
  {$EXTERNALSYM FWF_OWNERDATA}
  FWF_BESTFITWINDOW       = $10; 
  {$EXTERNALSYM FWF_BESTFITWINDOW}
  FWF_DESKTOP             = $20; 
  {$EXTERNALSYM FWF_DESKTOP}
  FWF_SINGLESEL           = $40; 
  {$EXTERNALSYM FWF_SINGLESEL}
  FWF_NOSUBFOLDERS        = $80; 
  {$EXTERNALSYM FWF_NOSUBFOLDERS}
  FWF_TRANSPARENT         = $100; 
  {$EXTERNALSYM FWF_TRANSPARENT}
  FWF_NOCLIENTEDGE        = $200; 
  {$EXTERNALSYM FWF_NOCLIENTEDGE}
  FWF_NOSCROLL            = $400; 
  {$EXTERNALSYM FWF_NOSCROLL}
  FWF_ALIGNLEFT           = $800; 
  {$EXTERNALSYM FWF_ALIGNLEFT}
  FWF_NOICONS             = $1000; 
  {$EXTERNALSYM FWF_NOICONS}
  FWF_SHOWSELALWAYS       = $2000; 
  {$EXTERNALSYM FWF_SHOWSELALWAYS}
  FWF_NOVISIBLE           = $4000; 
  {$EXTERNALSYM FWF_NOVISIBLE}
  FWF_SINGLECLICKACTIVATE = $8000; 
  {$EXTERNALSYM FWF_SINGLECLICKACTIVATE}
  FWF_NOWEBVIEW           = $10000; 
  {$EXTERNALSYM FWF_NOWEBVIEW}
  FWF_HIDEFILENAMES       = $20000; 
  {$EXTERNALSYM FWF_HIDEFILENAMES}
  FWF_CHECKSELECT         = $40000; 
  {$EXTERNALSYM FWF_CHECKSELECT}
  FWF_NOENUMREFRESH       = $80000; 
  {$EXTERNALSYM FWF_NOENUMREFRESH}
  FWF_NOGROUPING          = $100000; 
  {$EXTERNALSYM FWF_NOGROUPING}
  FWF_FULLROWSELECT       = $200000; 
  {$EXTERNALSYM FWF_FULLROWSELECT}
  FWF_NOFILTERS           = $400000; 
  {$EXTERNALSYM FWF_NOFILTERS}
  FWF_NOCOLUMNHEADER      = $800000;
  {$EXTERNALSYM FWF_NOCOLUMNHEADER}
  FWF_NOHEADERINALLVIEWS  = $1000000; 
  {$EXTERNALSYM FWF_NOHEADERINALLVIEWS}
  FWF_EXTENDEDTILES       = $2000000; 
  {$EXTERNALSYM FWF_EXTENDEDTILES}
  FWF_TRICHECKSELECT      = $4000000; 
  {$EXTERNALSYM FWF_TRICHECKSELECT}
  FWF_AUTOCHECKSELECT     = $8000000; 
  {$EXTERNALSYM FWF_AUTOCHECKSELECT}
  FWF_NOBROWSERVIEWSTATE  = $10000000; 
  {$EXTERNALSYM FWF_NOBROWSERVIEWSTATE}
  FWF_SUBSETGROUPS        = $20000000; 
  {$EXTERNALSYM FWF_SUBSETGROUPS}
  FWF_USESEARCHFOLDER     = $40000000; 
  {$EXTERNALSYM FWF_USESEARCHFOLDER}
  FWF_ALLOWRTLREADING     = $80000000; 
  {$EXTERNALSYM FWF_ALLOWRTLREADING}

  FVM_AUTO       = -1; 
  {$EXTERNALSYM FVM_AUTO}
  FVM_FIRST      = 1; 
  {$EXTERNALSYM FVM_FIRST}
  FVM_ICON       = 1; 
  {$EXTERNALSYM FVM_ICON}
  FVM_SMALLICON  = 2; 
  {$EXTERNALSYM FVM_SMALLICON}
  FVM_LIST       = 3; 
  {$EXTERNALSYM FVM_LIST}
  FVM_DETAILS    = 4; 
  {$EXTERNALSYM FVM_DETAILS}
  FVM_THUMBNAIL  = 5; 
  {$EXTERNALSYM FVM_THUMBNAIL}
  FVM_TILE       = 6; 
  {$EXTERNALSYM FVM_TILE}
  FVM_THUMBSTRIP = 7; 
  {$EXTERNALSYM FVM_THUMBSTRIP}
  FVM_CONTENT    = 8; 
  {$EXTERNALSYM FVM_CONTENT}
  FVM_LAST       = 8;
  {$EXTERNALSYM FVM_LAST}

const
  FLVM_UNSPECIFIED = -1; 
  {$EXTERNALSYM FLVM_UNSPECIFIED}
  FLVM_FIRST       = 1; 
  {$EXTERNALSYM FLVM_FIRST}
  FLVM_DETAILS     = 1; 
  {$EXTERNALSYM FLVM_DETAILS}
  FLVM_TILES       = 2; 
  {$EXTERNALSYM FLVM_TILES}
  FLVM_ICONS       = 3; 
  {$EXTERNALSYM FLVM_ICONS}
  FLVM_LIST        = 4; 
  {$EXTERNALSYM FLVM_LIST}
  FLVM_CONTENT     = 5; 
  {$EXTERNALSYM FLVM_CONTENT}
  FLVM_LAST        = 5; 
  {$EXTERNALSYM FLVM_LAST}

type
  PFolderSettings = ^FOLDERSETTINGS;
  {$EXTERNALSYM PFolderSettings}
  FOLDERSETTINGS = record
    ViewMode: UINT;      { View mode (FOLDERVIEWMODE values) }
    fFlags: UINT;        { View options (FOLDERFLAGS bits) }
  end;
  {$EXTERNALSYM FOLDERSETTINGS}
  TFolderSettings = FOLDERSETTINGS;
  LPFOLDERSETTINGS = PFolderSettings;
  {$EXTERNALSYM LPFOLDERSETTINGS}

{ interface IFolderViewOptions }
const
  FVO_DEFAULT           = 0; 
  {$EXTERNALSYM FVO_DEFAULT}
  FVO_VISTALAYOUT       = $1; 
  {$EXTERNALSYM FVO_VISTALAYOUT}
  FVO_CUSTOMPOSITION    = $2; 
  {$EXTERNALSYM FVO_CUSTOMPOSITION}
  FVO_CUSTOMORDERING    = $4;
  {$EXTERNALSYM FVO_CUSTOMORDERING}
  FVO_SUPPORTHYPERLINKS = $8; 
  {$EXTERNALSYM FVO_SUPPORTHYPERLINKS}
  FVO_NOANIMATIONS      = $10; 
  {$EXTERNALSYM FVO_NOANIMATIONS}
  FVO_NOSCROLLTIPS      = $20; 
  {$EXTERNALSYM FVO_NOSCROLLTIPS}

type
  IFolderViewOptions = interface(IUnknown) 
    [SID_IFolderViewOptions]
    function SetFolderViewOptions(
      fvoMask, fvoFlags: Integer): HRESULT; stdcall;
    function GetFolderViewOptions(
      var pfvoFlags: Integer): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IFolderViewOptions}

{ Interface:   IShellView }

{ IShellView.ContextSensitiveHelp(fEnterMode) }

{   Inherited from IOleWindow.ContextSensitiveHelp. }


{ IShellView.TranslateAccelerator(lpmsg) }

{   Similar to IOleInPlaceActiveObject.TranlateAccelerator. The explorer }
{  calls this function BEFORE any other translation. Returning S_OK }
{  indicates that the message was translated (eaten) and should not be }
{  translated or dispatched by the explorer. }


{ IShellView.EnableModeless(fEnable) }

{   Similar to IOleInPlaceActiveObject.EnableModeless. }


{ IShellView.UIActivate(uState) }

{   The explorer calls this member function whenever the activation }
{  state of the view window is changed by a certain event that is }
{  NOT caused by the shell view itself. }

{   SVUIA_DEACTIVATE will be passed when the explorer is about to }
{  destroy the shell view window; the shell view is supposed to remove }
{  all the extended UIs (typically merged menu and modeless popup windows). }

{   SVUIA_ACTIVATE_NOFOCUS will be passsed when the shell view is losing }
{  the input focus or the shell view has been just created without the }
{  input focus; the shell view is supposed to set menuitems appropriate }
{  for non-focused state (no selection specific items should be added). }

{   SVUIA_ACTIVATE_FOCUS will be passed when the explorer has just }
{  created the view window with the input focus; the shell view is }
{  supposed to set menuitems appropriate for focused state. }

{   SVUIA_INPLACEACTIVATE(new) will be passed when the shell view is opened }
{  within an ActiveX control, which is not a UI active. In this case, }
{  the shell view should not merge menus or put toolbas. To be compatible }
{  with Win95 client, we don't pass this value unless the view supports }
{  IShellView2. }

{   The shell view should not change focus within this member function. }
{  The shell view should not hook the WM_KILLFOCUS message to remerge }
{  menuitems. However, the shell view typically hook the WM_SETFOCUS }
{  message, and re-merge the menu after calling IShellBrowser. }
{  OnViewWindowActivated. }


{ IShellView.Refresh() }

{   The explorer calls this member when the view needs to refresh its }
{  contents (such as when the user hits F5 key). }


{ IShellView.CreateViewWindow }

{   This member creates the view window (right-pane of the explorer or the }
{  client window of the folder window). }


{ IShellView.DestroyViewWindow }

{   This member destroys the view window. }


{ IShellView.GetCurrentInfo }

{   This member returns the folder settings. }


{ IShellView.AddPropertySHeetPages }

{   The explorer calls this member when it is opening the option property }
{  sheet. This allows the view to add additional pages to it. }


{ IShellView.SaveViewState() }

{   The explorer calls this member when the shell view is supposed to }
{  store its view settings. The shell view is supposed to get a view }
{  stream by calling IShellBrowser.GetViewStateStream and store the }
{  current view state into that stream. }


{ IShellView.SelectItem(pidlItem, uFlags) }

{   The explorer calls this member to change the selection state of }
{  item(s) within the shell view window.  If pidlItem is NULL and uFlags }
{  is SVSI_DESELECTOTHERS, all items should be deselected. }

{ ------------------------------------------------------------------------- }
const
{ shellview select item flags }
  SVSI_DESELECT       = 0; 
  {$EXTERNALSYM SVSI_DESELECT}
  SVSI_SELECT         = $1; 
  {$EXTERNALSYM SVSI_SELECT}
  SVSI_EDIT           = $3;  //Includes Select
  {$EXTERNALSYM SVSI_EDIT}
  SVSI_DESELECTOTHERS = $4; 
  {$EXTERNALSYM SVSI_DESELECTOTHERS}
  SVSI_ENSUREVISIBLE  = $8; 
  {$EXTERNALSYM SVSI_ENSUREVISIBLE}
  SVSI_FOCUSED        = $10; 
  {$EXTERNALSYM SVSI_FOCUSED}
  SVSI_TRANSLATEPT    = $20; 
  {$EXTERNALSYM SVSI_TRANSLATEPT}
  SVSI_SELECTIONMARK  = $40; 
  {$EXTERNALSYM SVSI_SELECTIONMARK}
  SVSI_POSITIONITEM   = $80; 
  {$EXTERNALSYM SVSI_POSITIONITEM}
  SVSI_CHECK          = $100; 
  {$EXTERNALSYM SVSI_CHECK}
  SVSI_CHECK2         = $200; 
  {$EXTERNALSYM SVSI_CHECK2}
  SVSI_KEYBOARDSELECT = $401; 
  {$EXTERNALSYM SVSI_KEYBOARDSELECT}
  SVSI_NOTAKEFOCUS    = $40000000;
  {$EXTERNALSYM SVSI_NOTAKEFOCUS}

  SVSI_NOSTATECHANGE = $80000000;     // work around the use of the high bit that results in 4245: signed/unsigned mismatch
  {$EXTERNALSYM SVSI_NOSTATECHANGE}

  SVGIO_BACKGROUND     = 0; 
  {$EXTERNALSYM SVGIO_BACKGROUND}
  SVGIO_SELECTION      = $1; 
  {$EXTERNALSYM SVGIO_SELECTION}
  SVGIO_ALLVIEW        = $2; 
  {$EXTERNALSYM SVGIO_ALLVIEW}
  SVGIO_CHECKED        = $3; 
  {$EXTERNALSYM SVGIO_CHECKED}
  SVGIO_TYPE_MASK      = $F; 
  {$EXTERNALSYM SVGIO_TYPE_MASK}
  SVGIO_FLAG_VIEWORDER = $80000000; 
  {$EXTERNALSYM SVGIO_FLAG_VIEWORDER}

const
{ uState values for IShellView.UIActivate }
  SVUIA_DEACTIVATE       = 0;
  {$EXTERNALSYM SVUIA_DEACTIVATE}
  SVUIA_ACTIVATE_NOFOCUS = 1;
  {$EXTERNALSYM SVUIA_ACTIVATE_NOFOCUS}
  SVUIA_ACTIVATE_FOCUS   = 2;
  {$EXTERNALSYM SVUIA_ACTIVATE_FOCUS}
  SVUIA_INPLACEACTIVATE  = 3;
  {$EXTERNALSYM SVUIA_INPLACEACTIVATE}


type
  IShellBrowser = interface;
  IShellView = interface(IOleWindow)
    [SID_IShellView]
    function TranslateAccelerator(var Msg: TMsg): HResult; stdcall;
    function EnableModeless(Enable: Boolean): HResult; stdcall;
    function UIActivate(State: UINT): HResult; stdcall;
    function Refresh: HResult; stdcall;
    function CreateViewWindow(PrevView: IShellView;
      var FolderSettings: TFolderSettings; ShellBrowser: IShellBrowser;
      var Rect: TRect; out Wnd: HWND): HResult; stdcall;
    function DestroyViewWindow: HResult; stdcall;
    function GetCurrentInfo(out FolderSettings: TFolderSettings): HResult; stdcall;
    function AddPropertySheetPages(Reseved: DWORD;
      lpfnAddPage: TFNAddPropSheetPage; lParam: LPARAM): HResult; stdcall;
    function SaveViewState: HResult; stdcall;
    function SelectItem(pidl: PItemIDList; flags: UINT): HResult; stdcall;
    function GetItemObject(Item: UINT; const iid: TIID; var IPtr: Pointer): HResult; stdcall;
  end;
  {$EXTERNALSYM IShellView}
//NOTE: Begin moved IShellBrowser
{ -------------------------------------------------------------------------- }

{ Interface:   IShellBrowser }

{  IShellBrowser interface is the interface that is provided by the shell }
{ explorer/folder frame window. When it creates the "contents pane" of }
{ a shell folder (which provides IShellFolder interface), it calls its }
{ CreateViewObject member function to create an IShellView object. Then, }
{ it calls its CreateViewWindow member to create the "contents pane" }
{ window. The pointer to the IShellBrowser interface is passed to }
{ the IShellView object as a parameter to this CreateViewWindow member }
{ function call. }

{    +--------------------------+  <-- Explorer window }
{    | [] Explorer              | }
{    |--------------------------+       IShellBrowser }
{    | File Edit View ..        | }
{    |--------------------------| }
{    |        |                 | }
{    |        |              <-------- Content pane }
{    |        |                 | }
{    |        |                 |       IShellView }
{    |        |                 | }
{    |        |                 | }
{    +--------------------------+ }



{ [Member functions] }


{ IShellBrowser.GetWindow(phwnd) }

{   Inherited from IOleWindow.GetWindow. }


{ IShellBrowser.ContextSensitiveHelp(fEnterMode) }

{   Inherited from IOleWindow.ContextSensitiveHelp. }


{ IShellBrowser.InsertMenusSB(hmenuShared, lpMenuWidths) }

{   Similar to the IOleInPlaceFrame.InsertMenus. The explorer will put }
{  "File" and "Edit" pulldown in the File menu group, "View" and "Tools" }
{  in the Container menu group and "Help" in the Window menu group. Each }
{  pulldown menu will have a uniqu ID, FCIDM_MENU_FILE/EDIT/VIEW/TOOLS/HELP. }
{  The view is allowed to insert menuitems into those sub-menus by those }
{  IDs must be between FCIDM_SHVIEWFIRST and FCIDM_SHVIEWLAST. }


{ IShellBrowser.SetMenuSB(hmenuShared, holemenu, hwndActiveObject) }

{   Similar to the IOleInPlaceFrame.SetMenu. The explorer ignores the }
{  holemenu parameter (reserved for future enhancement)  and performs }
{  menu-dispatch based on the menuitem IDs (see the description above). }
{  It is important to note that the explorer will add different }
{  set of menuitems depending on whether the view has a focus or not. }
{  Therefore, it is very important to call ISB.OnViewWindowActivate }
{  whenever the view window (or its children) gets the focus. }


{ IShellBrowser.RemoveMenusSB(hmenuShared) }

{   Same as the IOleInPlaceFrame.RemoveMenus. }


{ IShellBrowser.SetStatusTextSB(lpszStatusText) }

{   Same as the IOleInPlaceFrame.SetStatusText. It is also possible to }
{  send messages directly to the status window via SendControlMsg. }


{ IShellBrowser.EnableModelessSB(fEnable) }

{   Same as the IOleInPlaceFrame.EnableModeless. }

{ IShellBrowser.TranslateAcceleratorSB(lpmsg, wID) }

{   Same as the IOleInPlaceFrame.TranslateAccelerator, but will be }
{  never called because we don't support EXEs (i.e., the explorer has }
{  the message loop). This member function is defined here for possible }
{  future enhancement. }


{ IShellBrowser.BrowseObject(pidl, wFlags) }

{   The view calls this member to let shell explorer browse to another }
{  folder. The pidl and wFlags specifies the folder to be browsed. }

{  Following three flags specifies whether it creates another window or not. }
{   SBSP_SAMEBROWSER  -- Browse to another folder with the same window. }
{   SBSP_NEWBROWSER   -- Creates another window for the specified folder. }
{   SBSP_DEFBROWSER   -- Default behavior (respects the view option). }

{  Following three flags specifies open, explore, or default mode. These   . }
{  are ignored if SBSP_SAMEBROWSER or (SBSP_DEFBROWSER && (single window   . }
{  browser || explorer)).                                                  . }
{   SBSP_OPENMODE     -- Use a normal folder window }
{   SBSP_EXPLOREMODE  -- Use an explorer window }
{   SBSP_DEFMODE      -- Use the same as the current window }

{  Following three flags specifies the pidl. }
{   SBSP_ABSOLUTE -- pidl is an absolute pidl (relative from desktop) }
{   SBSP_RELATIVE -- pidl is relative from the current folder. }
{   SBSP_PARENT   -- Browse the parent folder (ignores the pidl) }
{   SBSP_NAVIGATEBACK    -- Navigate back (ignores the pidl) }
{   SBSP_NAVIGATEFORWARD -- Navigate forward (ignores the pidl) }

{  Following two flags control history manipulation as result of navigate }
{   SBSP_WRITENOHISTORY -- write no history (shell folder) entry }
{   SBSP_NOAUTOSELECT -- suppress selection in history pane }


{ IShellBrowser.GetViewStateStream(grfMode, ppstm) }

{   The browser returns an IStream interface as the storage for view }
{  specific state information. }

{   grfMode -- Specifies the read/write access (STGM_READ/WRITE/READWRITE) }
{   ppstm   -- Specifies the LPSTREAM variable to be filled. }


{ IShellBrowser.GetControlWindow(id, phwnd) }

{   The shell view may call this member function to get the window handle }
{  of Explorer controls (toolbar or status winodw -- FCW_TOOLBAR or }
{  FCW_STATUS). }


{ IShellBrowser.SendControlMsg(id, uMsg, wParam, lParam, pret) }

{   The shell view calls this member function to send control messages to }
{  one of Explorer controls (toolbar or status window -- FCW_TOOLBAR or }
{  FCW_STATUS). }


{ IShellBrowser.QueryActiveShellView(IShellView * ppshv) }

{   This member returns currently activated (displayed) shellview object. }
{  A shellview never need to call this member function. }


{ IShellBrowser.OnViewWindowActive(pshv) }

{   The shell view window calls this member function when the view window }
{  (or one of its children) got the focus. It MUST call this member before }
{  calling IShellBrowser.InsertMenus, because it will insert different }
{  set of menu items depending on whether the view has the focus or not. }


{ IShellBrowser.SetToolbarItems(lpButtons, nButtons, uFlags) }

{   The view calls this function to add toolbar items to the exporer's }
{  toolbar. "lpButtons" and "nButtons" specifies the array of toolbar }
{  items. "uFlags" must be one of FCT_MERGE, FCT_CONFIGABLE, FCT_ADDTOEND. }

{ ------------------------------------------------------------------------- }
  HOLEMENU = HGlobal;
  {$EXTERNALSYM HOLEMENU}
  IShellBrowser = interface(IOleWindow)
    [SID_IShellBrowser]
    function InsertMenusSB(hMenuShared: HMENU;
      out MenuWidths: TOleMenuGroupWidths): HResult; stdcall;
    function SetMenuSB(hMenuShared: HMENU;
      hOleMenuReserved: HOLEMENU; hwndActiveObject: HWND): HResult; stdcall;
    function RemoveMenusSB(hMenuShared: HMENU): HResult; stdcall;
    function SetStatusTextSB(StatusText: POleStr): HResult; stdcall;
    function EnableModelessSB(Enable: BOOL): HResult; stdcall;
    function TranslateAcceleratorSB(Msg: PMsg; ID: Word): HResult; stdcall;
    function BrowseObject(pidl: PItemIDList; flags: UINT): HResult; stdcall;
    function GetViewStateStream(Mode: DWORD; out Stream: IStream): HResult; stdcall;
    function GetControlWindow(ID: UINT; out Wnd: HWND): HResult; stdcall;
    function SendControlMsg(ID, Msg: UINT; wParm: WPARAM; lParm: LPARAM;
      var Rslt: LResult): HResult; stdcall;
    function QueryActiveShellView(var ShellView: IShellView): HResult; stdcall;
    function OnViewWindowActive(var ShellView: IShellView): HResult; stdcall;
    function SetToolbarItems(TBButton: PTBButton;
      nButtons, uFlags: UINT): HResult; stdcall;
  end;
  {$EXTERNALSYM IShellBrowser}

{ Values for wFlags parameter of ISB.BrowseObject() member. }
const
  SBSP_DEFBROWSER            = $0000;
  {$EXTERNALSYM SBSP_DEFBROWSER}
  SBSP_SAMEBROWSER           = $0001;
  {$EXTERNALSYM SBSP_SAMEBROWSER}
  SBSP_NEWBROWSER            = $0002;
  {$EXTERNALSYM SBSP_NEWBROWSER}
  SBSP_DEFMODE               = $0000;
  {$EXTERNALSYM SBSP_DEFMODE}
  SBSP_OPENMODE              = $0010;
  {$EXTERNALSYM SBSP_OPENMODE}
  SBSP_EXPLOREMODE           = $0020;
  {$EXTERNALSYM SBSP_EXPLOREMODE}
  SBSP_HELPMODE              = $0040;
  {$EXTERNALSYM SBSP_HELPMODE}
  SBSP_NOTRANSFERHIST        = $0080;
  {$EXTERNALSYM SBSP_NOTRANSFERHIST}
  SBSP_ABSOLUTE              = $0000;
  {$EXTERNALSYM SBSP_ABSOLUTE}
  SBSP_RELATIVE              = $1000;
  {$EXTERNALSYM SBSP_RELATIVE}
  SBSP_PARENT                = $2000;
  {$EXTERNALSYM SBSP_PARENT}
  SBSP_NAVIGATEBACK          = $4000;
  {$EXTERNALSYM SBSP_NAVIGATEBACK}
  SBSP_NAVIGATEFORWARD       = $8000;
  {$EXTERNALSYM SBSP_NAVIGATEFORWARD}
  SBSP_ALLOW_AUTONAVIGATE    = $00010000;
  {$EXTERNALSYM SBSP_ALLOW_AUTONAVIGATE}
  SBSP_KEEPSAMETEMPLATE      = $00020000;
  {$EXTERNALSYM SBSP_KEEPSAMETEMPLATE}
  SBSP_KEEPWORDWHEELTEXT     = $00040000;
  {$EXTERNALSYM SBSP_KEEPWORDWHEELTEXT}
  SBSP_ACTIVATE_NOFOCUS      = $00080000;
  {$EXTERNALSYM SBSP_ACTIVATE_NOFOCUS}
  SBSP_CREATENOHISTORY       = $00100000;
  {$EXTERNALSYM SBSP_CREATENOHISTORY}
  SBSP_PLAYNOSOUND           = $00200000;
  {$EXTERNALSYM SBSP_PLAYNOSOUND}
  SBSP_CALLERUNTRUSTED       = $00800000;
  {$EXTERNALSYM SBSP_CALLERUNTRUSTED}
  SBSP_TRUSTFIRSTDOWNLOAD    = $01000000;
  {$EXTERNALSYM SBSP_TRUSTFIRSTDOWNLOAD}
  SBSP_UNTRUSTEDFORDOWNLOAD  = $02000000;
  {$EXTERNALSYM SBSP_UNTRUSTEDFORDOWNLOAD}
  SBSP_NOAUTOSELECT          = $04000000;
  {$EXTERNALSYM SBSP_NOAUTOSELECT}
  SBSP_WRITENOHISTORY        = $08000000;
  {$EXTERNALSYM SBSP_WRITENOHISTORY}
  SBSP_TRUSTEDFORACTIVEX     = $10000000;
  {$EXTERNALSYM SBSP_TRUSTEDFORACTIVEX}
  SBSP_FEEDNAVIGATION        = $20000000;
  {$EXTERNALSYM SBSP_FEEDNAVIGATION}
  SBSP_REDIRECT              = $40000000;
  {$EXTERNALSYM SBSP_REDIRECT}
  SBSP_INITIATEDBYHLINKFRAME = $80000000;
  {$EXTERNALSYM SBSP_INITIATEDBYHLINKFRAME}

{ Values for id parameter of ISB.GetWindow/SendControlMsg members. }

{ WARNING: }
{  Any shell extensions which sends messages to those control windows }
{ might not work in the future version of windows. If you really need }
{ to send messages to them, (1) don't assume that those control window }
{ always exist (i.e. GetControlWindow may fail) and (2) verify the window }
{ class of the window before sending any messages. }
  FCW_STATUS      = $0001;
  {$EXTERNALSYM FCW_STATUS}
  FCW_TOOLBAR     = $0002;
  {$EXTERNALSYM FCW_TOOLBAR}
  FCW_TREE        = $0003;
  {$EXTERNALSYM FCW_TREE}
  FCW_INTERNETBAR = $0006;
  {$EXTERNALSYM FCW_INTERNETBAR}
  FCW_PROGRESS    = $0008;
  {$EXTERNALSYM FCW_PROGRESS}

{ Values for uFlags paremeter of ISB.SetToolbarItems member. }
  FCT_MERGE      = $0001;
  {$EXTERNALSYM FCT_MERGE}
  FCT_CONFIGABLE = $0002;
  {$EXTERNALSYM FCT_CONFIGABLE}
  FCT_ADDTOEND   = $0004;
  {$EXTERNALSYM FCT_ADDTOEND}
//END IShellBrowser

{ interface IShellView2 }
type
  SHELLVIEWID = TGUID;
  {$EXTERNALSYM SHELLVIEWID}
  TShellViewID = SHELLVIEWID;
  PShellViewID = ^TShellViewID;

const
  SV2GV_CURRENTVIEW     = -1;
  {$EXTERNALSYM SV2GV_CURRENTVIEW}
  SV2GV_DEFAULTVIEW     = -2;
  {$EXTERNALSYM SV2GV_DEFAULTVIEW}
type
  PSV2CreateParams = ^TSV2CreateParams;
  _SV2CVW2_PARAMS = record
    cbSize: DWORD;
    psvPrev: IShellView;
    pfs: PFolderSettings;
    psbOwner: IShellBrowser;
    prcView: PRect;
    pvid: PShellViewID;
    hwndView: HWND;
  end;
  {$EXTERNALSYM _SV2CVW2_PARAMS}
  TSV2CreateParams = _SV2CVW2_PARAMS;
  SV2CVW2_PARAMS = _SV2CVW2_PARAMS;
  {$EXTERNALSYM SV2CVW2_PARAMS}

  IShellView2 = interface(IShellView)
    [SID_IShellView2]
    function GetView(pvid: PShellViewID; uView: ULONG): HResult; stdcall;
    function CreateViewWindow2(SV2CreateParams: PSV2CreateParams): HResult; stdcall;
    function HandleRename(pidlNew: PItemIDList): HResult; stdcall;
    function SelectAndPositionItem(pidlItem: PItemIDList; uFlags: UINT;
      var Point: TPoint): HResult; stdcall;
  end;
  {$EXTERNALSYM IShellView2}

type
  _SV3CVW3_FLAGS = Integer; 
  {$EXTERNALSYM _SV3CVW3_FLAGS}
const
  SV3CVW3_DEFAULT          = 0; 
  {$EXTERNALSYM SV3CVW3_DEFAULT}
  SV3CVW3_NONINTERACTIVE   = $1; 
  {$EXTERNALSYM SV3CVW3_NONINTERACTIVE}
  SV3CVW3_FORCEVIEWMODE    = $2; 
  {$EXTERNALSYM SV3CVW3_FORCEVIEWMODE}
  SV3CVW3_FORCEFOLDERFLAGS = $4; 
  {$EXTERNALSYM SV3CVW3_FORCEFOLDERFLAGS}
type
  SV3CVW3_FLAGS = DWORD; 
  {$EXTERNALSYM SV3CVW3_FLAGS}
  TSV3CVW3Flags = SV3CVW3_FLAGS;

  IShellView3 = interface(IShellView2)
    [SID_IShellView3]
    function CreateViewWindow3(const psbOwner: IShellBrowser; const psvPrev: IShellView;
      dwViewFlags: TSV3CVW3Flags; dwMask, dwFlags: Integer;
      fvMode: Integer; const pvid: TShellViewID; const prcView: TRect; 
      var phwndView: HWND): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IShellView3}

//NOTE: IShellItemArray moved from below
{ interface IShellItemArray }
const
  SIATTRIBFLAGS_AND       = $1;
  {$EXTERNALSYM SIATTRIBFLAGS_AND}
  SIATTRIBFLAGS_OR        = $2;
  {$EXTERNALSYM SIATTRIBFLAGS_OR}
  SIATTRIBFLAGS_APPCOMPAT = $3;
  {$EXTERNALSYM SIATTRIBFLAGS_APPCOMPAT}
  SIATTRIBFLAGS_MASK      = $3;
  {$EXTERNALSYM SIATTRIBFLAGS_MASK}
  SIATTRIBFLAGS_ALLITEMS  = $4000;
  {$EXTERNALSYM SIATTRIBFLAGS_ALLITEMS}

type
  IEnumShellItems = interface;
  IShellItemArray = interface(IUnknown)
    [SID_IShellItemArray]
    function BindToHandler(const pbc: IBindCtx; const rbhid: TGUID;
      const riid: TIID; out ppvOut): HResult; stdcall;
    function GetPropertyStore(flags: DWORD; const riid: TIID; out ppv): HResult; stdcall;
    function GetPropertyDescriptionList(const keyType: TPropertyKey;
      const riid: TIID; out ppv): HResult; stdcall;
    function GetAttributes(dwAttribFlags: DWORD; sfgaoMask: DWORD;
      var psfgaoAttribs: DWORD): HResult; stdcall;
    function GetCount(var pdwNumItems: DWORD): HResult; stdcall;
    function GetItemAt(dwIndex: DWORD; var ppsi: IShellItem): HResult; stdcall;
    function EnumItems(var ppenumShellItems: IEnumShellItems): HResult; stdcall;
  end;
  {$EXTERNALSYM IShellItemArray}

  { interface IEnumShellItems }
  IEnumShellItems = interface(IUnknown)
    [SID_IEnumShellItems]
    function Next(celt: ULONG; out rgelt; pceltFetched: PLongint): HResult; stdcall;
    function Skip(celt: ULONG): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out ppenum: IEnumShellItems): HResult; stdcall;
  end;
  {$EXTERNALSYM IEnumShellItems}
//END IShellItemArray

{ interface IFolderView }
  IFolderView = interface(IUnknown)
    [SID_IFolderView]
    function GetCurrentViewMode(var pViewMode: UINT): HRESULT; stdcall;
    function SetCurrentViewMode(ViewMode: UINT): HRESULT; stdcall;
    function GetFolder(const riid: TIID; out ppv): HRESULT; stdcall;
    function Item(iItemIndex: Integer; var ppidl: PItemIDList): HRESULT; stdcall;
    function ItemCount(uFlags: UINT; var pcItems: Integer): HRESULT; stdcall;
    function Items(uFlags: UINT; const riid: TIID; out ppv): HRESULT; stdcall;
    function GetSelectionMarkedItem(var piItem: Integer): HRESULT; stdcall;
    function GetFocusedItem(var piItem: Integer): HRESULT; stdcall;
    function GetItemPosition(pidl: PItemIDList; var ppt: TPoint): HRESULT; stdcall;
    function GetSpacing(var ppt: TPoint): HRESULT; stdcall;
    function GetDefaultSpacing(var ppt: TPoint): HRESULT; stdcall;
    function GetAutoArrange: HRESULT; stdcall;
    function SelectItem(iItem: Integer; dwFlags: DWORD): HRESULT; stdcall;
    function SelectAndPositionItems(cidl: UINT; apidl: PItemIDList; 
      var apt: TPoint; dwFlags: DWORD): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IFolderView}

{ interface ISearchBoxInfo }
type
  ISearchBoxInfo = interface(IUnknown) 
    [SID_ISearchBoxInfo]
    function GetCondition(const riid: TIID; var ppv: Pointer): HRESULT; stdcall;
  
    function GetText(var ppsz: LPWSTR): HRESULT; stdcall;
  
  end;
  {$EXTERNALSYM ISearchBoxInfo}

{ interface IFolderView2 }
type
  tagSORTDIRECTION = Integer; 
  {$EXTERNALSYM tagSORTDIRECTION}
const
  SORT_DESCENDING = -1; 
  {$EXTERNALSYM SORT_DESCENDING}
  SORT_ASCENDING  = 1; 
  {$EXTERNALSYM SORT_ASCENDING}

type
  SORTDIRECTION = Integer; 
  {$EXTERNALSYM SORTDIRECTION}
  TSortDirection = SORTDIRECTION;

  SORTCOLUMN = record 
    propkey: TPropertyKey;
    direction: TSortDirection;
  end;
  {$EXTERNALSYM SORTCOLUMN}
  TSortColumn = SORTCOLUMN;

const
  FVST_EMPTYTEXT = 0;
  {$EXTERNALSYM FVST_EMPTYTEXT}

type
  IFolderView2 = interface(IFolderView) 
    [SID_IFolderView2]
    function SetGroupBy(const key: TPropertyKey; fAscending: BOOL): HRESULT; stdcall;
    function GetGroupBy(var pkey: TPropertyKey;
      var pfAscending: BOOL): HRESULT; stdcall;
    function SetViewProperty(pidl: PItemIDList; const propkey: TPropertyKey; 
      const propvar: TPropVariant): HRESULT; stdcall;
    function GetViewProperty(pidl: PItemIDList; const propkey: TPropertyKey; 
      const ppropvar: TPropVariant): HRESULT; stdcall;
    function SetTileViewProperties(pidl: PItemIDList; 
      pszPropList: LPCWSTR): HRESULT; stdcall;
    function SetExtendedTileViewProperties(pidl: PItemIDList; 
      pszPropList: LPCWSTR): HRESULT; stdcall;
    function SetText(iType: Integer; pwszText: LPCWSTR): HRESULT; stdcall;
    function SetCurrentFolderFlags(dwMask, dwFlags: DWORD): HRESULT; stdcall;
    function GetCurrentFolderFlags(var pdwFlags: DWORD): HRESULT; stdcall;
    function GetSortColumnCount(var pcColumns: Integer): HRESULT; stdcall;
    function SetSortColumns(rgSortColumns: array of TSortColumn; 
      cColumns: Integer): HRESULT; stdcall;
    function GetSortColumns(rgSortColumns: array of TSortColumn; 
      cColumns: Integer): HRESULT; stdcall;
    function GetItem(iItem: Integer; const riid: TIID; 
      out ppv): HRESULT; stdcall;
    function GetVisibleItem(iStart: Integer; fPrevious: BOOL; 
      var piItem: Integer): HRESULT; stdcall;
    function GetSelectedItem(iStart: Integer; 
      var piItem: Integer): HRESULT; stdcall;
    function GetSelection(fNoneImpliesFolder: BOOL; 
      out ppsia: IShellItemArray): HRESULT; stdcall;
    function GetSelectionState(pidl: PItemIDList;
      var pdwFlags: DWORD): HRESULT; stdcall;
    function InvokeVerbOnSelection(pszVerb: LPCSTR): HRESULT; stdcall;
    function SetViewModeAndIconSize(uViewMode: Integer;
      iImageSize: Integer): HRESULT; stdcall;
    function GetViewModeAndIconSize(var puViewMode: Integer;
      var piImageSize: Integer): HRESULT; stdcall;
    function SetGroupSubsetCount(cVisibleRows: UINT): HRESULT; stdcall;
    function GetGroupSubsetCount(var pcVisibleRows: UINT): HRESULT; stdcall;
    function SetRedraw(fRedrawOn: BOOL): HRESULT; stdcall;
    function IsMoveInSameFolder: HRESULT; stdcall;
    function DoRename: HRESULT; stdcall;
  end;
  {$EXTERNALSYM IFolderView2}

{ interface IFolderViewSettings }
  IFolderViewSettings = interface(IUnknown) 
    [SID_IFolderViewSettings]
    function GetColumnPropertyList(const riid: TIID; 
      out ppv): HRESULT; stdcall;
    function GetGroupByProperty(out pkey: TPropertyKey;
      out pfGroupAscending: BOOL): HRESULT; stdcall;
    function GetViewMode(var plvm: Integer): HRESULT; stdcall;
    function GetIconSize(var puIconSize: UINT): HRESULT; stdcall;
    function GetFolderFlags(
      out pfolderMask, pfolderFlags: Integer): HRESULT; stdcall;
    function GetSortColumns(rgSortColumns: array of TSortColumn;
      cColumnsIn: UINT; var pcColumnsOut: UINT): HRESULT; stdcall;
    function GetGroupSubsetCount(var pcVisibleRows: UINT): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IFolderViewSettings}

{ interface IPreviewHandlerVisuals }
  IPreviewHandlerVisuals = interface(IUnknown) 
    [SID_IPreviewHandlerVisuals]
    function SetBackgroundColor(color: TColorRef): HRESULT; stdcall;
    function SetFont(const plf: TLogFont): HRESULT; stdcall;
    function SetTextColor(color: TColorRef): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IPreviewHandlerVisuals}

{ interface IVisualProperties }
const
  VPWF_DEFAULT    = 0; 
  {$EXTERNALSYM VPWF_DEFAULT}
  VPWF_ALPHABLEND = $1; 
  {$EXTERNALSYM VPWF_ALPHABLEND}

  VPCF_TEXT           = 1; 
  {$EXTERNALSYM VPCF_TEXT}
  VPCF_BACKGROUND     = 2; 
  {$EXTERNALSYM VPCF_BACKGROUND}
  VPCF_SORTCOLUMN     = 3; 
  {$EXTERNALSYM VPCF_SORTCOLUMN}
  VPCF_SUBTEXT        = 4; 
  {$EXTERNALSYM VPCF_SUBTEXT}
  VPCF_TEXTBACKGROUND = 5; 
  {$EXTERNALSYM VPCF_TEXTBACKGROUND}

type
  IVisualProperties = interface(IUnknown) 
    [SID_IVisualProperties]
    function SetWatermark(hbmp: HBITMAP; vpwf: Integer): HRESULT; stdcall;
    function SetColor(vpcf: Integer; cr: TColorRef): HRESULT; stdcall;
    function GetColor(vpcf: Integer; var pcr: TColorRef): HRESULT; stdcall;
    function SetItemHeight(cyItemInPixels: Integer): HRESULT; stdcall;
    function GetItemHeight(var cyItemInPixels: Integer): HRESULT; stdcall;
    function SetFont(const plf: TLogFontW; bRedraw: BOOL): HRESULT; stdcall;
    function GetFont(out plf: TLogFontW): HRESULT; stdcall;
    function SetTheme(pszSubAppName, pszSubIdList: LPCWSTR): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IVisualProperties}

{ interface ICommDlgBrowser }
{  ICommDlgBrowser interface is the interface that is provided by the new }
{ common dialog window to hook and modify the behavior of IShellView.  When }
{ a default view is created, it queries its parent IShellBrowser for the }
{ ICommDlgBrowser interface.  If supported, it calls out to that interface }
{ in several cases that need to behave differently in a dialog. }

{ Member functions: }

{  ICommDlgBrowser.OnDefaultCommand() }
{    Called when the user double-clicks in the view or presses Enter.  The }
{   browser should return S_OK if it processed the action itself, S_FALSE }
{   to let the view perform the default action. }

{  ICommDlgBrowser.OnStateChange(ULONG uChange) }
{    Called when some states in the view change.  'uChange' is one of the }
{   CDBOSC_* values.  This call is made after the state (selection, focus, }
{   etc) has changed.  There is no return value. }

{  ICommDlgBrowser.IncludeObject(LPCITEMIDLIST pidl) }
{    Called when the view is enumerating objects.  'pidl' is a relative }
{   IDLIST.  The browser should return S_OK to include the object in the }
{   view, S_FALSE to hide it }

{ ------------------------------------------------------------------------- }
{ ICommDlgBrowser.OnStateChange values }
const
  CDBOSC_SETFOCUS    = $00000000;
  {$EXTERNALSYM CDBOSC_SETFOCUS}
  CDBOSC_KILLFOCUS   = $00000001;
  {$EXTERNALSYM CDBOSC_KILLFOCUS}
  CDBOSC_SELCHANGE   = $00000002;
  {$EXTERNALSYM CDBOSC_SELCHANGE}
  CDBOSC_RENAME      = $00000003;
  {$EXTERNALSYM CDBOSC_RENAME}
  CDBOSC_STATECHANGE = $00000004;
  {$EXTERNALSYM CDBOSC_STATECHANGE}

type
  ICommDlgBrowser = interface(IUnknown)
    [SID_ICommDlgBrowser]
    function OnDefaultCommand(const ppshv: IShellView): HResult; stdcall;
    function OnStateChange(const ppshv: IShellView; Change: ULONG): HResult; stdcall;
    function IncludeObject(const ppshv: IShellView; pidl: PItemIDList): HResult; stdcall;
  end;
  {$EXTERNALSYM ICommDlgBrowser}

{ interface ICommDlgBrowser2 }
const
  CDB2N_CONTEXTMENU_DONE   = $00000001;
  {$EXTERNALSYM CDB2N_CONTEXTMENU_DONE}
  CDB2N_CONTEXTMENU_START  = $00000002;
  {$EXTERNALSYM CDB2N_CONTEXTMENU_START}
  CDB2GVF_SHOWALLFILES     = $00000001;
  {$EXTERNALSYM CDB2GVF_SHOWALLFILES}
  CDB2GVF_ISFILESAVE       = $00000002; // is file save, else file open
  {$EXTERNALSYM CDB2GVF_ISFILESAVE}
  CDB2GVF_ALLOWPREVIEWPANE = $00000004;
  {$EXTERNALSYM CDB2GVF_ALLOWPREVIEWPANE}
  CDB2GVF_NOSELECTVERB     = $00000008;
  {$EXTERNALSYM CDB2GVF_NOSELECTVERB}
  CDB2GVF_NOINCLUDEITEM    = $00000010;
  {$EXTERNALSYM CDB2GVF_NOINCLUDEITEM}
  CDB2GVF_ISFOLDERPICKER   = $00000020;
  {$EXTERNALSYM CDB2GVF_ISFOLDERPICKER}
  CDB2GVF_ADDSHIELD        = $00000040; // when CDB2GVF_NOSELECTVERB is not specified this flag controls the display of a LUA shield on the Select menu item
  {$EXTERNALSYM CDB2GVF_ADDSHIELD}

type
  ICommDlgBrowser2 = interface(ICommDlgBrowser) 
    [SID_ICommDlgBrowser2]
    function Notify(const ppshv: IShellView; dwNotifyType: DWORD): HRESULT; stdcall;
    function GetDefaultMenuText(const ppshv: IShellView; pszText: LPWSTR; 
      cchMax: Integer): HRESULT; stdcall;
    function GetViewFlags(var pdwFlags: DWORD): HRESULT; stdcall;
  end;
  {$EXTERNALSYM ICommDlgBrowser2}

{ interface ICommDlgBrowser3 }
  ICommDlgBrowser3 = interface(ICommDlgBrowser2) 
    [SID_ICommDlgBrowser3]
    function OnColumnClicked(const ppshv: IShellView; 
      iColumn: Integer): HRESULT; stdcall;
    function GetCurrentFilter(pszFileSpec: LPWSTR; 
      cchFileSpec: Integer): HRESULT; stdcall;
    function OnPreViewCreated(const ppshv: IShellView): HRESULT; stdcall;
  end;
  {$EXTERNALSYM ICommDlgBrowser3}

{ interface IColumnManager }
const
  CM_MASK_WIDTH        = $1; 
  {$EXTERNALSYM CM_MASK_WIDTH}
  CM_MASK_DEFAULTWIDTH = $2; 
  {$EXTERNALSYM CM_MASK_DEFAULTWIDTH}
  CM_MASK_IDEALWIDTH   = $4; 
  {$EXTERNALSYM CM_MASK_IDEALWIDTH}
  CM_MASK_NAME         = $8; 
  {$EXTERNALSYM CM_MASK_NAME}
  CM_MASK_STATE        = $10; 
  {$EXTERNALSYM CM_MASK_STATE}

  CM_STATE_NONE               = 0; 
  {$EXTERNALSYM CM_STATE_NONE}
  CM_STATE_VISIBLE            = $1; 
  {$EXTERNALSYM CM_STATE_VISIBLE}
  CM_STATE_FIXEDWIDTH         = $2; 
  {$EXTERNALSYM CM_STATE_FIXEDWIDTH}
  CM_STATE_NOSORTBYFOLDERNESS = $4; 
  {$EXTERNALSYM CM_STATE_NOSORTBYFOLDERNESS}
  CM_STATE_ALWAYSVISIBLE      = $8; 
  {$EXTERNALSYM CM_STATE_ALWAYSVISIBLE}

  CM_ENUM_ALL     = $1; 
  {$EXTERNALSYM CM_ENUM_ALL}
  CM_ENUM_VISIBLE = $2; 
  {$EXTERNALSYM CM_ENUM_VISIBLE}

  CM_WIDTH_USEDEFAULT = -1;
  {$EXTERNALSYM CM_WIDTH_USEDEFAULT}
  CM_WIDTH_AUTOSIZE   = -2; 
  {$EXTERNALSYM CM_WIDTH_AUTOSIZE}

type
  CM_COLUMNINFO = record 
    cbSize: DWORD;
    dwMask: DWORD;
    dwState: DWORD;
    uWidth: UINT;
    uDefaultWidth: UINT;
    uIdealWidth: UINT;
    wszName: packed array[0..79] of WCHAR;
  end;
  {$EXTERNALSYM CM_COLUMNINFO}
  tagCM_COLUMNINFO = CM_COLUMNINFO;
  {$EXTERNALSYM tagCM_COLUMNINFO}
  TCMColumnInfo = CM_COLUMNINFO;

type
  IColumnManager = interface(IUnknown) 
    [SID_IColumnManager]
    function SetColumnInfo(const propkey: TPropertyKey; 
      var pcmci: TCMColumnInfo): HRESULT; stdcall;
    function GetColumnInfo(const propkey: TPropertyKey;
      var pcmci: TCMColumnInfo): HRESULT; stdcall;
    function GetColumnCount(dwFlags: Integer; 
      var puCount: UINT): HRESULT; stdcall;
    function GetColumns(dwFlags: Integer; rgkeyOrder: PPropertyKey; 
      cColumns: UINT): HRESULT; stdcall;
    function SetColumns(rgkeyOrder: array of TPropertyKey;
      cVisible: UINT): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IColumnManager}

{ interface IFolderFilterSite }
  IFolderFilterSite = interface(IUnknown) 
    [SID_IFolderFilterSite]
    function SetFilter(const punk: IUnknown): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IFolderFilterSite}

{ interface IFolderFilter }
  IFolderFilter = interface(IUnknown) 
    [SID_IFolderFilter]
    function ShouldShow(const psf: IShellFolder; pidlFolder: PItemIDList; 
      pidlItem: PItemIDList): HRESULT; stdcall;
    function GetEnumFlags(const psf: IShellFolder; pidlFolder: PItemIDList; 
      var phwnd: HWND; var pgrfFlags: DWORD): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IFolderFilter}

{ IInputObjectSite/IInputObject interfaces

 These interfaces allow us (or ISVs) to install/update external Internet
 Toolbar for IE and the shell. The frame will simply get the CLSID from
 registry (to be defined) and CoCreateInstance it. }

{ IInputObjectSite interface }
{
 A site implements this interface so the object can communicate
 focus change to it.

 [Member functions]

 IInputObjectSite::OnFocusChangeIS(punkObj, fSetFocus)
   Object (punkObj) is getting or losing the focus.
}
  IInputObjectSite = interface(IUnknown)
    [SID_IInputObjectSite]
    function OnFocusChangeIS(punkObj: IUnknown; fSetFocus: BOOL): HResult; stdcall;
  end;
  {$EXTERNALSYM IInputObjectSite}

{ IInputObject interface }
{
   An object implements this interface so the site can communicate
 activation and accelerator events to it.

 [Member functions]

 IInputObject::UIActivateIO(fActivate, lpMsg)
   Activates or deactivates the object.  lpMsg may be NULL.  Returns
   S_OK if the activation succeeded.

 IInputObject::HasFocusIO()
   Returns S_OK if the object has the focus, S_FALSE if not.

 IInputObject::TranslateAcceleratorIO(lpMsg)
   Allow the object to process the message.  Returns S_OK if the
   message was processed (eaten).
}
  IInputObject = interface(IUnknown)
    [SID_IInputObject]
    function UIActivateIO(fActivate: BOOL; var lpMsg: TMsg): HResult; stdcall;
    function HasFocusIO: HResult; stdcall;
    function TranslateAcceleratorIO(var lpMsg: TMsg): HResult; stdcall;
  end;
  {$EXTERNALSYM IInputObject}

{ interface IInputObject2 }
  IInputObject2 = interface(IInputObject) 
    [SID_IInputObject2]
    function TranslateAcceleratorGlobal(var pMsg: TMsg): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInputObject2}

{ IShellIcon Interface }
{ Used to get a icon index for a IShellFolder object.

 This interface can be implemented by a IShellFolder, as a quick way to
 return the icon for a object in the folder.

 An instance of this interface is only created once for the folder, unlike
 IExtractIcon witch is created once for each object.

 If a ShellFolder does not implement this interface, the standard
 GetUIObject(....IExtractIcon) method will be used to get a icon
 for all objects.

 The following standard imagelist indexs can be returned:

      0   document (blank page) (not associated)
      1   document (with stuff on the page)
      2   application (exe, com, bat)
      3   folder (plain)
      4   folder (open)

 IShellIcon.GetIconOf(pidl, flags, lpIconIndex)

      pidl            object to get icon for.
      flags           GIL_* input flags (GIL_OPEN, ...)
      lpIconIndex     place to return icon index.

  returns:
      NOERROR, if lpIconIndex contains the correct system imagelist index.
      S_FALSE, if unable to get icon for this object, go through
               GetUIObject, IExtractIcon, methods. }
  IShellIcon = interface(IUnknown)
    [SID_IShellIcon]
    function GetIconOf(pidl: PItemIDList; flags: UINT;
      out IconIndex: Integer): HResult; stdcall;
  end;
  {$EXTERNALSYM IShellIcon}

  //NOTE: IShellBrowser definition moved up.

type
{ interface IProfferService }
  IProfferService = interface(IUnknown)
    [SID_IProfferService]
    function ProfferService(const guidService: TGuid; const psp: IServiceProvider;
      var pdwCookie: DWORD): HRESULT; stdcall;
    function RevokeService(dwCookie: DWORD): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IProfferService}

//NOTE: IShellItem Declaration moved up.

function SHSimpleIDListFromPath(pszPath: LPCWSTR): PIDLIST_ABSOLUTE;
{$EXTERNALSYM SHSimpleIDListFromPath}
{ For IE >= IE70 }
// CLSID_ShellItem create and init helper APIs. produce IShellItem derived interfaces from these different expressions of an item
function SHCreateItemFromIDList(pidl: PItemIDList; const riid: TIID;
  out ppv): HResult; stdcall;
{$EXTERNALSYM SHCreateItemFromIDList}
function SHCreateItemFromParsingName(pszPath: LPCWSTR; const pbc: IBindCtx;
  const riid: TIID; out ppv): HResult; stdcall;
{$EXTERNALSYM SHCreateItemFromParsingName}
function SHCreateItemWithParent(pidlParent: PItemIDList;
  const psfParent: IShellFolder; pidl: PItemIDList; const riid: TIID;
  out ppvItem): HResult; stdcall;
{$EXTERNALSYM SHCreateItemWithParent}
function SHCreateItemFromRelativeName(const psiParent: IShellItem;
  pszName: LPCWSTR; const pbc: IBindCtx; const riid: TIID;
  out ppv): HResult; stdcall;
{$EXTERNALSYM SHCreateItemFromRelativeName}

{ For Windows >= Vista }
function SHCreateItemInKnownFolder(const kfid: TIID; dwKFFlags: DWORD;
  pszItem: LPCWSTR; const riid: TIID; out ppv): HResult; stdcall;
{$EXTERNALSYM SHCreateItemInKnownFolder}
// get the IDList expression from an object, works with objects that support IPersistIDlist or IPersistIDlist like CLSID_ShellItem and most shell folders
function SHGetIDListFromObject(const punk: IUnknown; out ppidl: PItemIDList): HResult; stdcall;
{$EXTERNALSYM SHGetIDListFromObject}
// similar to SHGetIDListFromObject but returns an IShellItem-based object (preferred for performance if the IDList is already bound to a folder)
function SHGetItemFromObject(const punk: IUnknown; const riid: TIID;
  out ppv): HResult; stdcall;
{$EXTERNALSYM SHGetItemFromObject}
// these APIs return object that support IPropertyStore or related interfaces
function SHGetPropertyStoreFromIDList(pidl: PItemIDList; flags: Integer;
  const riid: TIID; out ppv): HResult; stdcall;
{$EXTERNALSYM SHGetPropertyStoreFromIDList}
function SHGetPropertyStoreFromParsingName(pszPath: LPCWSTR; const pbc: IBindCtx;
  flags: Integer; const riid: TIID; out ppv): HResult; stdcall;
{$EXTERNALSYM SHGetPropertyStoreFromParsingName}
function SHGetNameFromIDList(pidl: PItemIDList; sigdnName: Integer;
  var ppszName: LPWSTR): HResult; stdcall;
{$EXTERNALSYM SHGetNameFromIDList}

const
  DOGIF_DEFAULT       = 0; 
  {$EXTERNALSYM DOGIF_DEFAULT}
  DOGIF_TRAVERSE_LINK = $1; 
  {$EXTERNALSYM DOGIF_TRAVERSE_LINK}
  DOGIF_NO_HDROP      = $2; 
  {$EXTERNALSYM DOGIF_NO_HDROP}
  DOGIF_NO_URL        = $4; 
  {$EXTERNALSYM DOGIF_NO_URL}
  DOGIF_ONLY_IF_ONE   = $8; 
  {$EXTERNALSYM DOGIF_ONLY_IF_ONE}

function SHGetItemFromDataObject(const pdtobj: IDataObject;
  dwFlags: DWORD; const riid: TIID;
  out ppv): HRESULT; stdcall;
{$EXTERNALSYM SHGetItemFromDataObject}

const
  STR_GPS_HANDLERPROPERTIESONLY = 'GPS_HANDLERPROPERTIESONLY';
  {$EXTERNALSYM STR_GPS_HANDLERPROPERTIESONLY}
  STR_GPS_FASTPROPERTIESONLY    = 'GPS_FASTPROPERTIESONLY';
  {$EXTERNALSYM STR_GPS_FASTPROPERTIESONLY}
  STR_GPS_OPENSLOWITEM          = 'GPS_OPENSLOWITEM';
  {$EXTERNALSYM STR_GPS_OPENSLOWITEM}
  STR_GPS_DELAYCREATION         = 'GPS_DELAYCREATION';
  {$EXTERNALSYM STR_GPS_DELAYCREATION}
  STR_GPS_BESTEFFORT            = 'GPS_BESTEFFORT';
  {$EXTERNALSYM STR_GPS_BESTEFFORT}
  STR_GPS_NO_OPLOCK             = 'GPS_NO_OPLOCK';
  {$EXTERNALSYM STR_GPS_NO_OPLOCK}

{ interface IShellItem2 }
type
  TCLSID = TGUID;                                                     
  IShellItem2 = interface(IShellItem)
    [SID_IShellItem2]
    function GetPropertyStore(flags: Integer; const riid: TIID;
      out ppv): HRESULT; stdcall;
    function GetPropertyStoreWithCreateObject(flags: Integer; 
      const punkCreateObject: IUnknown; const riid: TIID; 
      out ppv): HRESULT; stdcall;
    function GetPropertyStoreForKeys(rgKeys: array of TPropertyKey; cKeys: UINT; 
      flags: Integer; const riid: TIID; out ppv): HRESULT; stdcall;
    function GetPropertyDescriptionList(const keyType: TPropertyKey; const riid: TIID; 
      out ppv): HRESULT; stdcall;
    function Update(const pbc: IBindCtx): HRESULT; stdcall;
    function GetProperty(const key: TPropertyKey; 
      out ppropvar: TPropVariant): HRESULT; stdcall;
    function GetCLSID(const key: TPropertyKey; var pclsid: TCLSID): HRESULT; stdcall;
    function GetFileTime(const key: TPropertyKey; var pft: TFileTime): HRESULT; stdcall;
    function GetInt32(const key: TPropertyKey; var pi: Integer): HRESULT; stdcall;
    function GetString(const key: TPropertyKey; var ppsz: LPWSTR): HRESULT; stdcall;
    function GetUInt32(const key: TPropertyKey; var pui: Cardinal): HRESULT; stdcall;
    function GetUInt64(const key: TPropertyKey; var pull: ULONGLONG): HRESULT; stdcall;
    function GetBool(const key: TPropertyKey; var pf: BOOL): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IShellItem2}

{ interface IShellItemImageFactory }
const
  SIIGBF_RESIZETOFIT   = 0; 
  {$EXTERNALSYM SIIGBF_RESIZETOFIT}
  SIIGBF_BIGGERSIZEOK  = $1; 
  {$EXTERNALSYM SIIGBF_BIGGERSIZEOK}
  SIIGBF_MEMORYONLY    = $2; 
  {$EXTERNALSYM SIIGBF_MEMORYONLY}
  SIIGBF_ICONONLY      = $4; 
  {$EXTERNALSYM SIIGBF_ICONONLY}
  SIIGBF_THUMBNAILONLY = $8; 
  {$EXTERNALSYM SIIGBF_THUMBNAILONLY}
  SIIGBF_INCACHEONLY   = $10;
  {$EXTERNALSYM SIIGBF_INCACHEONLY}

type
  SIIGBF = Integer; 
  {$EXTERNALSYM SIIGBF}
  TSIIGBF = SIIGBF;

  IShellItemImageFactory = interface(IUnknown) 
    [SID_IShellItemImageFactory]
    function GetImage(size: TSize; flags: TSIIGBF; 
      var phbm: HBITMAP): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IShellItemImageFactory}

{ interface IUserAccountChangeCallback }
  IUserAccountChangeCallback = interface(IUnknown) 
    [SID_IUserAccountChangeCallback]
    function OnPictureChange(pszUserName: LPCWSTR): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IUserAccountChangeCallback}

//NOTE: IEnumShellItems moved up

{ interface ITransferAdviseSink }
type
  STGTRANSCONFIRMATION = TGUID;
  {$EXTERNALSYM STGTRANSCONFIRMATION}
  LPSTGTRANSCONFIRMATION = ^TGUID;
  {$EXTERNALSYM LPSTGTRANSCONFIRMATION}

const
  STGOP_MOVE            = 1; 
  {$EXTERNALSYM STGOP_MOVE}
  STGOP_COPY            = 2; 
  {$EXTERNALSYM STGOP_COPY}
  STGOP_SYNC            = 3; 
  {$EXTERNALSYM STGOP_SYNC}
  STGOP_REMOVE          = 5; 
  {$EXTERNALSYM STGOP_REMOVE}
  STGOP_RENAME          = 6; 
  {$EXTERNALSYM STGOP_RENAME}
  STGOP_APPLYPROPERTIES = 8; 
  {$EXTERNALSYM STGOP_APPLYPROPERTIES}
  STGOP_NEW             = 10; 
  {$EXTERNALSYM STGOP_NEW}

  TS_NONE          = $0;
  {$EXTERNALSYM TS_NONE}
  TS_PERFORMING    = $1; 
  {$EXTERNALSYM TS_PERFORMING}
  TS_PREPARING     = $2; 
  {$EXTERNALSYM TS_PREPARING}
  TS_INDETERMINATE = $4; 
  {$EXTERNALSYM TS_INDETERMINATE}

  TSF_NORMAL                     = 0; 
  {$EXTERNALSYM TSF_NORMAL}
  TSF_FAIL_EXIST                 = 0; 
  {$EXTERNALSYM TSF_FAIL_EXIST}
  TSF_RENAME_EXIST               = $1; 
  {$EXTERNALSYM TSF_RENAME_EXIST}
  TSF_OVERWRITE_EXIST            = $2; 
  {$EXTERNALSYM TSF_OVERWRITE_EXIST}
  TSF_ALLOW_DECRYPTION           = $4; 
  {$EXTERNALSYM TSF_ALLOW_DECRYPTION}
  TSF_NO_SECURITY                = $8; 
  {$EXTERNALSYM TSF_NO_SECURITY}
  TSF_COPY_CREATION_TIME         = $10; 
  {$EXTERNALSYM TSF_COPY_CREATION_TIME}
  TSF_COPY_WRITE_TIME            = $20; 
  {$EXTERNALSYM TSF_COPY_WRITE_TIME}
  TSF_USE_FULL_ACCESS            = $40; 
  {$EXTERNALSYM TSF_USE_FULL_ACCESS}
  TSF_DELETE_RECYCLE_IF_POSSIBLE = $80; 
  {$EXTERNALSYM TSF_DELETE_RECYCLE_IF_POSSIBLE}
  TSF_COPY_HARD_LINK             = $100; 
  {$EXTERNALSYM TSF_COPY_HARD_LINK}
  TSF_COPY_LOCALIZED_NAME        = $200; 
  {$EXTERNALSYM TSF_COPY_LOCALIZED_NAME}
  TSF_MOVE_AS_COPY_DELETE        = $400; 
  {$EXTERNALSYM TSF_MOVE_AS_COPY_DELETE}
  TSF_SUSPEND_SHELLEVENTS        = $800; 
  {$EXTERNALSYM TSF_SUSPEND_SHELLEVENTS}
type
  TRANSFER_SOURCE_FLAGS = DWORD; 
  {$EXTERNALSYM TRANSFER_SOURCE_FLAGS}
  TTransferSourceFlags = TRANSFER_SOURCE_FLAGS;

  TRANSFER_ADVISE_STATE = DWORD; 
  {$EXTERNALSYM TRANSFER_ADVISE_STATE}
  TTransferAdviseState = TRANSFER_ADVISE_STATE;

type
  ITransferAdviseSink = interface(IUnknown) 
    [SID_ITransferAdviseSink]
    function UpdateProgress(ullSizeCurrent, ullSizeTotal: ULONGLONG; 
      nFilesCurrent, nFilesTotal, nFoldersCurrent,
      nFoldersTotal: Integer): HRESULT; stdcall;
    function UpdateTransferState(ts: TTransferAdviseState): HRESULT; stdcall;
    function ConfirmOverwrite(const psiSource, psiDestParent: IShellItem;
      pszName: LPCWSTR): HRESULT; stdcall;
    function ConfirmEncryptionLoss(const psiSource: IShellItem): HRESULT; stdcall;
    function FileFailure(const psi: IShellItem; pszItem: LPCWSTR; hrError: HRESULT; 
      pszRename: LPWSTR; cchRename: Cardinal): HRESULT; stdcall;
    function SubStreamFailure(const psi: IShellItem; pszStreamName: LPCWSTR; 
      hrError: HRESULT): HRESULT; stdcall;
    function PropertyFailure(const psi: IShellItem; const pkey: TPropertyKey; 
      hrError: HRESULT): HRESULT; stdcall;
  end;
  {$EXTERNALSYM ITransferAdviseSink}

{ interface ITransferSource }
type
  ITransferSource = interface(IUnknown) 
    [SID_ITransferSource]
    function Advise(const psink: ITransferAdviseSink; 
      var pdwCookie: DWORD): HRESULT; stdcall;
    function Unadvise(dwCookie: DWORD): HRESULT; stdcall;
    function SetProperties(const pproparray: IPropertyChangeArray): HRESULT; stdcall;
    function OpenItem(const psi: IShellItem; dwFlags: DWORD; const riid: TIID; 
      out ppv): HRESULT; stdcall;
    function MoveItem(const psi, psiParentDst: IShellItem; 
      pszNameDst: LPCWSTR; dwFlags: DWORD; 
      out ppsiNew: IShellItem): HRESULT; stdcall;
    function RecycleItem(const psiSource, psiParentDest: IShellItem; 
      dwFlags: DWORD; out ppsiNewDest: IShellItem): HRESULT; stdcall;
    function RemoveItem(const psiSource: IShellItem; 
      dwFlags: DWORD): HRESULT; stdcall;
    function RenameItem(const psiSource: IShellItem; pszNewName: LPCWSTR; 
      dwFlags: DWORD; out ppsiNewDest: IShellItem): HRESULT; stdcall;
    function LinkItem(const psiSource, psiParentDest: IShellItem; 
      pszNewName: LPCWSTR; dwLinkFlags: DWORD; 
      out ppsiNewDest: IShellItem): HRESULT; stdcall;
    function ApplyPropertiesToItem(const psiSource: IShellItem; 
      out ppsiNew: IShellItem): HRESULT; stdcall;
    function GetDefaultDestinationName(const psiSource, psiParentDest: IShellItem; 
      var ppszDestinationName: LPWSTR): HRESULT; stdcall;
    function EnterFolder(const psiChildFolderDest: IShellItem): HRESULT; stdcall;
    function LeaveFolder(const psiChildFolderDest: IShellItem): HRESULT; stdcall;
  end;
  {$EXTERNALSYM ITransferSource}

{ interface IEnumResources }
type
  SHELL_ITEM_RESOURCE = record 
    guidType: TGUID;
    szName: packed array[0..259] of WCHAR;
  end;
  {$EXTERNALSYM SHELL_ITEM_RESOURCE}
  TShellItemResource = SHELL_ITEM_RESOURCE;

  IEnumResources = interface(IUnknown) 
    [SID_IEnumResources]
    function Next(celt: Cardinal; var psir: TShellItemResource; 
      var pceltFetched: Cardinal): HRESULT; stdcall;
    function Skip(celt: Cardinal): HRESULT; stdcall;
    function Reset: HRESULT; stdcall;
    function Clone(out ppenumr: IEnumResources): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IEnumResources}

{ interface IShellItemResources }
  IShellItemResources = interface(IUnknown) 
    [SID_IShellItemResources]
    function GetAttributes(var pdwAttributes: DWORD): HRESULT; stdcall;
    function GetSize(var pullSize: ULONGLONG): HRESULT; stdcall;
    function GetTimes(
      out pftCreation, pftWrite, pftAccess: TFileTime): HRESULT; stdcall;
    function SetTimes(
      const pftCreation, pftWrite, pftAccess: TFileTime): HRESULT; stdcall;
    function GetResourceDescription(var pcsir: TShellItemResource; 
      var ppszDescription: LPWSTR): HRESULT; stdcall;
    function EnumResources(out ppenumr: IEnumResources): HRESULT; stdcall;
    function SupportsResource(const pcsir: TShellItemResource): HRESULT; stdcall;
    function OpenResource(const pcsir: TShellItemResource; const riid: TIID; 
      out ppv): HRESULT; stdcall;
    function CreateResource(const pcsir: TShellItemResource; const riid: TIID; 
      out ppv): HRESULT; stdcall;
    function MarkForDelete: HRESULT; stdcall;
  end;
  {$EXTERNALSYM IShellItemResources}

{ interface ITransferDestination }
  ITransferDestination = interface(IUnknown) 
    [SID_ITransferDestination]
    function Advise(const psink: ITransferAdviseSink; 
      var pdwCookie: DWORD): HRESULT; stdcall;
    function Unadvise(dwCookie: DWORD): HRESULT; stdcall;
    function CreateItem(pszName: LPCWSTR; dwAttributes: DWORD; ullSize: ULONGLONG; 
      dwFlags: DWORD; const riidItem: TIID; var ppvItem: Pointer; 
      const riidResources: TIID; var ppvResources: Pointer): HRESULT; stdcall;
  end;
  {$EXTERNALSYM ITransferDestination}

{ interface IStreamAsync }
  IStreamAsync = interface(IStream)                                   
    [SID_IStreamAsync]
    function ReadAsync(var pv: Pointer; cb: DWORD; pcbRead: LPDWORD;
      lpOverlapped: POverlapped): HRESULT; stdcall;
  
    function WriteAsync(var lpBuffer: Pointer; cb: DWORD; pcbWritten: LPDWORD;
      lpOverlapped: POverlapped): HRESULT; stdcall;
  
    function OverlappedResult(lpOverlapped: POverlapped; 
      lpNumberOfBytesTransferred: LPDWORD; bWait: BOOL): HRESULT; stdcall;
  
    function CancelIo: HRESULT; stdcall;
  end;
  {$EXTERNALSYM IStreamAsync}

{ interface IStreamUnbufferedInfo }
  IStreamUnbufferedInfo = interface(IUnknown) 
    [SID_IStreamUnbufferedInfo]
    function GetSectorSize(var pcbSectorSize: Cardinal): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IStreamUnbufferedInfo}

{ interface IFileOperationProgressSink }
  IFileOperationProgressSink = interface(IUnknown)
    [SID_IFileOperationProgressSink]
    function StartOperations: HResult; stdcall;
    function FinishOperations(hrResult: HResult): HResult; stdcall;
    function PreRenameItem(dwFlags: DWORD; const psiItem: IShellItem;
      pszNewName: LPCWSTR): HResult; stdcall;
    function PostRenameItem(dwFlags: DWORD; const psiItem: IShellItem;
      pszNewName: LPCWSTR; hrRename: HResult; const psiNewlyCreated: IShellItem): HResult; stdcall;
    function PreMoveItem(dwFlags: DWORD; const psiItem: IShellItem;
      const psiDestinationFolder: IShellItem; pszNewName: LPCWSTR): HResult; stdcall;
    function PostMoveItem(dwFlags: DWORD; const psiItem: IShellItem;
      const psiDestinationFolder: IShellItem; pszNewName: LPCWSTR;
      hrMove: HResult; const psiNewlyCreated: IShellItem): HResult; stdcall;
    function PreCopyItem(dwFlags: DWORD; const psiItem: IShellItem;
      const psiDestinationFolder: IShellItem; pszNewName: LPCWSTR): HResult; stdcall;
    function PostCopyItem(dwFlags: DWORD; const psiItem: IShellItem;
      const psiDestinationFolder: IShellItem; pszNewName: LPCWSTR;
      hrCopy: HResult; const psiNewlyCreated: IShellItem): HResult; stdcall;
    function PreDeleteItem(dwFlags: DWORD; const psiItem: IShellItem): HResult; stdcall;
    function PostDeleteItem(dwFlags: DWORD; const psiItem: IShellItem; hrDelete: HResult;
      const psiNewlyCreated: IShellItem): HResult; stdcall;
    function PreNewItem(dwFlags: DWORD; const psiDestinationFolder: IShellItem;
      pszNewName: LPCWSTR): HResult; stdcall;
    function PostNewItem(dwFlags: DWORD; const psiDestinationFolder: IShellItem;
      pszNewName: LPCWSTR; pszTemplateName: LPCWSTR; dwFileAttributes: DWORD;
      hrNew: HResult; const psiNewItem: IShellItem): HResult; stdcall;
    function UpdateProgress(iWorkTotal: UINT; iWorkSoFar: UINT): HResult; stdcall;
    function ResetTimer: HResult; stdcall;
    function PauseTimer: HResult; stdcall;
    function ResumeTimer: HResult; stdcall;
  end;
  {$EXTERNALSYM IFileOperationProgressSink}

//NOTE: IShellItemArray moved up

function SHCreateShellItemArray(pidlParent: PItemIDList; const psf: IShellFolder;
  cidl: UINT; ppidl: array of ItemIDList;
  out ppsiItemArray: IShellItemArray): HResult; stdcall;
{$EXTERNALSYM SHCreateShellItemArray}
function SHCreateShellItemArrayFromDataObject(const pdo: IDataObject;
  const riid: TIID; var ppv: Pointer): HResult; stdcall;
{$EXTERNALSYM SHCreateShellItemArrayFromDataObject}
function SHCreateShellItemArrayFromIDLists(cidl: UINT;
  rgpidl: array of ItemIDList;
  out ppsiItemArray: IShellItemArray): HResult; stdcall;
{$EXTERNALSYM SHCreateShellItemArrayFromIDLists}
function SHCreateShellItemArrayFromShellItem(const psi: IShellItem;
  const riid: TIID; var ppv: Pointer): HResult; stdcall;
{$EXTERNALSYM SHCreateShellItemArrayFromShellItem}

{ interface IInitializeWithItem }
type
  IInitializeWithItem = interface(IUnknown) 
    [SID_IInitializeWithItem]
    function Initialize(const psi: IShellItem; grfMode: DWORD): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInitializeWithItem}

{ interface IObjectWithSelection }
type
  IObjectWithSelection = interface(IUnknown) 
    [SID_IObjectWithSelection]
    function SetSelection(const psia: IShellItemArray): HRESULT; stdcall;
    function GetSelection(const riid: TIID; out ppv): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IObjectWithSelection}

{ interface IObjectWithBackReferences }
  IObjectWithBackReferences = interface(IUnknown) 
    [SID_IObjectWithBackReferences]
    function RemoveBackReferences: HRESULT; stdcall;
  end;
  {$EXTERNALSYM IObjectWithBackReferences}

{ interface IPropertyUI }
type
  tagPROPERTYUI_NAME_FLAGS = Integer;
  {$EXTERNALSYM tagPROPERTYUI_NAME_FLAGS}
const
  PUIFNF_DEFAULT  = 0; 
  {$EXTERNALSYM PUIFNF_DEFAULT}
  PUIFNF_MNEMONIC = $1; 
  {$EXTERNALSYM PUIFNF_MNEMONIC}
type
  PROPERTYUI_NAME_FLAGS = DWORD; 
  {$EXTERNALSYM PROPERTYUI_NAME_FLAGS}
  TPropertyUINameFlags = PROPERTYUI_NAME_FLAGS;

type
  tagPROPERTYUI_FLAGS = Integer;
  {$EXTERNALSYM tagPROPERTYUI_FLAGS}
const
  PUIF_DEFAULT          = 0; 
  {$EXTERNALSYM PUIF_DEFAULT}
  PUIF_RIGHTALIGN       = $1; 
  {$EXTERNALSYM PUIF_RIGHTALIGN}
  PUIF_NOLABELININFOTIP = $2; 
  {$EXTERNALSYM PUIF_NOLABELININFOTIP}
type
  PROPERTYUI_FLAGS = DWORD; 
  {$EXTERNALSYM PROPERTYUI_FLAGS}
  TPropertyUIFlags = PROPERTYUI_FLAGS;

type
  tagPROPERTYUI_FORMAT_FLAGS = Integer;
  {$EXTERNALSYM tagPROPERTYUI_FORMAT_FLAGS}
const
  PUIFFDF_DEFAULT      = 0; 
  {$EXTERNALSYM PUIFFDF_DEFAULT}
  PUIFFDF_RIGHTTOLEFT  = $1; 
  {$EXTERNALSYM PUIFFDF_RIGHTTOLEFT}
  PUIFFDF_SHORTFORMAT  = $2; 
  {$EXTERNALSYM PUIFFDF_SHORTFORMAT}
  PUIFFDF_NOTIME       = $4; 
  {$EXTERNALSYM PUIFFDF_NOTIME}
  PUIFFDF_FRIENDLYDATE = $8; 
  {$EXTERNALSYM PUIFFDF_FRIENDLYDATE}
type
  PROPERTYUI_FORMAT_FLAGS = DWORD; 
  {$EXTERNALSYM PROPERTYUI_FORMAT_FLAGS}
  TPropertyUIFormatFlags = PROPERTYUI_FORMAT_FLAGS;

                                   
  TFMTID = TGUID;
  PROPID = ULONG;
  {$EXTERNALSYM PROPID}

  IPropertyUI = interface(IUnknown) 
    [SID_IPropertyUI]
    function ParsePropertyName(pszName: LPCWSTR; var pfmtid: TFMTID; 
      var ppid: PROPID; var pchEaten: Cardinal): HRESULT; stdcall;
  
    function GetCannonicalName(const fmtid: TFMTID; pid: PROPID; pwszText: LPWSTR; 
      cchText: DWORD): HRESULT; stdcall;
  
    function GetDisplayName(const fmtid: TFMTID; pid: PROPID; 
      flags: TPropertyUINameFlags; pwszText: LPWSTR; 
      cchText: DWORD): HRESULT; stdcall;
  
    function GetPropertyDescription(const fmtid: TFMTID; pid: PROPID; pwszText: LPWSTR; 
      cchText: DWORD): HRESULT; stdcall;
  
    function GetDefaultWidth(const fmtid: TFMTID; pid: PROPID; 
      var pcxChars: Cardinal): HRESULT; stdcall;
  
    function GetFlags(const fmtid: TFMTID; pid: PROPID; 
      var pflags: TPropertyUIFlags): HRESULT; stdcall;
  
    function FormatForDisplay(const fmtid: TFMTID; pid: PROPID; 
      var ppropvar: TPropVariant; puiff: TPropertyUIFormatFlags; pwszText: LPWSTR; 
      cchText: DWORD): HRESULT; stdcall;
  
    function GetHelpInfo(const fmtid: TFMTID; pid: PROPID; pwszHelpFile: LPWSTR; 
      cch: DWORD; var puHelpID: UINT): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IPropertyUI}

{ For IE >= IE70 }
function SHRemovePersonalPropertyValues(
  const psia: IShellItemArray): HResult; stdcall;
{$EXTERNALSYM SHRemovePersonalPropertyValues}

function SHAddDefaultPropertiesByExt(pszExt: LPCWSTR;
  const pPropStore: IPropertyStore): HResult; stdcall;
{$EXTERNALSYM SHAddDefaultPropertiesByExt}

//NOTE: SHCreateDefaultPropertiesOp moved below IFileOperation definition
function SHSetDefaultProperties(hwndParent: HWND; const psi: IShellItem;
  dwFileOpFlags: DWORD;
  const pfops: IFileOperationProgressSink): HResult; stdcall;
{$EXTERNALSYM SHSetDefaultProperties}

{ interface ICategoryProvider }
type
  ICategoryProvider = interface(IUnknown) 
    [SID_ICategoryProvider]
    function CanCategorizeOnSCID(const pscid: TSHColumnID): HRESULT; stdcall;
  
    function GetDefaultCategory(const pguid: TGUID;
      var pscid: TSHColumnID): HRESULT; stdcall;
  
    function GetCategoryForSCID(var pscid: TSHColumnID; 
      var pguid: TGUID): HRESULT; stdcall;
  
    function EnumCategories(out penum: IEnumGUID): HRESULT; stdcall;
  
    function GetCategoryName(const pguid: TGUID; pszName: LPWSTR;
      cch: UINT): HRESULT; stdcall;
  
    function CreateCategory(const pguid: TGUID; const riid: TIID;
      out ppv): HRESULT; stdcall;
  end;
  {$EXTERNALSYM ICategoryProvider}

{ interface ICategorizer }
const
  CATINFO_NORMAL         = 0; 
  {$EXTERNALSYM CATINFO_NORMAL}
  CATINFO_COLLAPSED      = $1; 
  {$EXTERNALSYM CATINFO_COLLAPSED}
  CATINFO_HIDDEN         = $2; 
  {$EXTERNALSYM CATINFO_HIDDEN}
  CATINFO_EXPANDED       = $4; 
  {$EXTERNALSYM CATINFO_EXPANDED}
  CATINFO_NOHEADER       = $8; 
  {$EXTERNALSYM CATINFO_NOHEADER}
  CATINFO_NOTCOLLAPSIBLE = $10; 
  {$EXTERNALSYM CATINFO_NOTCOLLAPSIBLE}
  CATINFO_NOHEADERCOUNT  = $20; 
  {$EXTERNALSYM CATINFO_NOHEADERCOUNT}
  CATINFO_SUBSETTED      = $40; 
  {$EXTERNALSYM CATINFO_SUBSETTED}

  CATSORT_DEFAULT = 0; 
  {$EXTERNALSYM CATSORT_DEFAULT}
  CATSORT_NAME    = $1; 
  {$EXTERNALSYM CATSORT_NAME}

type
  CATEGORY_INFO = record 
    cif: Integer;
    wszName: packed array[0..259] of WCHAR;
  end;
  {$EXTERNALSYM CATEGORY_INFO}
  tagCATEGORY_INFO = CATEGORY_INFO;
  TCategoryInfo = CATEGORY_INFO;

  ICategorizer = interface(IUnknown)
    [SID_ICategorizer]
    function GetDescription(pszDesc: LPWSTR; cch: UINT): HRESULT; stdcall;

    function GetCategory(cidl: UINT; apidl: array of ItemIDList;
      var rgCategoryIds: DWORD): HRESULT; stdcall;

    function GetCategoryInfo(dwCategoryId: DWORD;
      var pci: CATEGORY_INFO): HRESULT; stdcall;

    function CompareCategory(csfFlags: Integer; dwCategoryId1: DWORD;
      dwCategoryId2: DWORD): HRESULT; stdcall;
  end;
  {$EXTERNALSYM ICategorizer}

///////////////////////////////////////////////////////
//
// Drag and Drop helper
//
// Purpose: To expose the Shell drag images
//
// This interface is implemented in the shell by CLSID_DragDropHelper.
//
// To use:
//   If you are the source of a drag (i.e. in response to LV_DRAGBEGIN or
//    equivelent begin drag message) call
//    IDragSourceHelper::InitializeFromWindow
//              (<hwnd of window supporting DI_GETDRAGIMAGE>,
//               <pointer to POINT indicating offset to the mouse from
//                  the upper left corner of the image>,
//               <pointer to data object>)
//
//      NOTE: The Data object must support IDataObject::SetData with multiple
//            data types and GetData must implement data type cloning
//            (Including HGLOBAL), not just aliasing.
//
//   If you wish to have an image while over your application add the
//    IDragImages::Dr* calls to your IDropTarget implementation. For Example:
//
//    STDMETHODIMP CUserDropTarget::DragEnter(IDataObject* pDataObject,
//                                            DWORD grfKeyState,
//                                            POINTL pt, DWORD* pdwEffect)
//    {
//          // Process your DragEnter
//          // Call IDragImages::DragEnter last.
//          _pDropTargetHelper->DragEnter(_hwndDragOver, pDataObject,
//                                        (POINT*)&pt, *pdwEffect);
//          return hres;
//    }
//
//
//   If you wish to be able to source a drag image from a custom control,
//     implement a handler for the RegisterWindowMessage(DI_GETDRAGIMAGE).
//     The LPARAM is a pointer to an SHDRAGIMAGE structure.
//
//      sizeDragImage  -   Calculate the length and width required to render
//                          the images.
//      ptOffset       -   Calculate the offset from the upper left corner to
//                          the mouse cursor within the image
//      hbmpDragImage  -   CreateBitmap( sizeDragImage.cx, sizeDragImage.cy,
//                           GetDeviceCaps(hdcScreen, PLANES),
//                           GetDeviceCaps(hdcScreen, BITSPIXEL),
//                           NULL);
//
//   Drag Images will only be displayed on Windows NT 5.0 or later.
//
//
//   Note about IDropTargetHelper::Show - This method is provided for
//     showing/hiding the Drag image in low color depth video modes. When
//     painting to a window that is currently being dragged over (i.e. For
//     indicating a selection) you need to hide the drag image by calling this
//     method passing FALSE. After the window is done painting, Show the image
//     again by passing TRUE.

type
  LPSHDRAGIMAGE = ^SHDRAGIMAGE;
  {$EXTERNALSYM LPSHDRAGIMAGE}
  SHDRAGIMAGE = record
      sizeDragImage: SIZE;            // OUT - The length and Width of the
                                      //        rendered image
      ptOffset: TPoint;                // OUT - The Offset from the mouse cursor to
                                      //        the upper left corner of the image
      hbmpDragImage: HBITMAP;         // OUT - The Bitmap containing the rendered
                                      //        drag images
      crColorKey: COLORREF;           // OUT - The COLORREF that has been blitted
                                      //        to the background of the images
  end;
  {$EXTERNALSYM SHDRAGIMAGE}
  TShDragImage = SHDRAGIMAGE;
  PShDragImage = ^TShDragImage;

const
  // This is sent to a window to get the rendered images to a bitmap
  // Call RegisterWindowMessage to get the ID
  DI_GETDRAGIMAGE     ='ShellGetDragImage';
  {$EXTERNALSYM DI_GETDRAGIMAGE}

type
  IDropTargetHelper = interface(IUnknown)
    [SID_IDropTargetHelper]
    function DragEnter(hwndTarget: HWND; const pDataObject: IDataObject;
                       var ppt: TPoint; dwEffect: DWORD): HRESULT; stdcall;
    function DragLeave: HResult; stdcall;
    function DragOver(var ppt: TPoint; dwEffect: DWORD): HRESULT; stdcall;
    function Drop(const pDataObject: IDataObject; var ppt: TPoint;
                  dwEffect: DWORD): HRESULT; stdcall;
    function Show(fShow: BOOL): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IDropTargetHelper}

  IDragSourceHelper = interface(IUnknown)
    [SID_IDragSourceHelper]
    function InitializeFromBitmap(pshdi: LPSHDRAGIMAGE;
      const pDataObject: IDataObject): HRESULT; stdcall;
    function InitializeFromWindow(hwnd: HWND; var ppt: TPoint;
      const pDataObject: IDataObject): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IDragSourceHelper}

const
  DSH_ALLOWDROPDESCRIPTIONTEXT = $1; 
  {$EXTERNALSYM DSH_ALLOWDROPDESCRIPTIONTEXT}

type
  IDragSourceHelper2 = interface(IDragSourceHelper) 
    [SID_IDragSourceHelper2]
    function SetFlags(dwFlags: DWORD): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IDragSourceHelper2}

{ IShellLink Interface }
const
  { IShellLink.Resolve fFlags }
  SLR_NO_UI                     = $1; 
  {$EXTERNALSYM SLR_NO_UI}
  SLR_ANY_MATCH                 = $2; 
  {$EXTERNALSYM SLR_ANY_MATCH}
  SLR_UPDATE                    = $4; 
  {$EXTERNALSYM SLR_UPDATE}
  SLR_NOUPDATE                  = $8; 
  {$EXTERNALSYM SLR_NOUPDATE}
  SLR_NOSEARCH                  = $10; 
  {$EXTERNALSYM SLR_NOSEARCH}
  SLR_NOTRACK                   = $20; 
  {$EXTERNALSYM SLR_NOTRACK}
  SLR_NOLINKINFO                = $40; 
  {$EXTERNALSYM SLR_NOLINKINFO}
  SLR_INVOKE_MSI                = $80; 
  {$EXTERNALSYM SLR_INVOKE_MSI}
  SLR_NO_UI_WITH_MSG_PUMP       = $101; 
  {$EXTERNALSYM SLR_NO_UI_WITH_MSG_PUMP}
  SLR_OFFER_DELETE_WITHOUT_FILE = $200; 
  {$EXTERNALSYM SLR_OFFER_DELETE_WITHOUT_FILE}
  SLR_KNOWNFOLDER               = $400; 
  {$EXTERNALSYM SLR_KNOWNFOLDER}
  SLR_MACHINE_IN_LOCAL_TARGET   = $800; 
  {$EXTERNALSYM SLR_MACHINE_IN_LOCAL_TARGET}
  SLR_UPDATE_MACHINE_AND_SID    = $1000; 
  {$EXTERNALSYM SLR_UPDATE_MACHINE_AND_SID}

  { IShellLink.GetPath fFlags }
  SLGP_SHORTPATH        = $1; 
  {$EXTERNALSYM SLGP_SHORTPATH}
  SLGP_UNCPRIORITY      = $2; 
  {$EXTERNALSYM SLGP_UNCPRIORITY}
  SLGP_RAWPATH          = $4; 
  {$EXTERNALSYM SLGP_RAWPATH}
  SLGP_RELATIVEPRIORITY = $8; 
  {$EXTERNALSYM SLGP_RELATIVEPRIORITY}

type
  IShellLinkA = interface(IUnknown) { sl }
    [SID_IShellLinkA]
    function GetPath(pszFile: LPSTR; cchMaxPath: Integer;
      var pfd: TWin32FindDataA; fFlags: DWORD): HResult; stdcall;
    function GetIDList(var ppidl: PItemIDList): HResult; stdcall;
    function SetIDList(pidl: PItemIDList): HResult; stdcall;
    function GetDescription(pszName: LPSTR; cchMaxName: Integer): HResult; stdcall;
    function SetDescription(pszName: LPSTR): HResult; stdcall;
    function GetWorkingDirectory(pszDir: LPSTR; cchMaxPath: Integer): HResult; stdcall;
    function SetWorkingDirectory(pszDir: LPSTR): HResult; stdcall;
    function GetArguments(pszArgs: LPSTR; cchMaxPath: Integer): HResult; stdcall;
    function SetArguments(pszArgs: LPSTR): HResult; stdcall;
    function GetHotkey(var pwHotkey: Word): HResult; stdcall;
    function SetHotkey(wHotkey: Word): HResult; stdcall;
    function GetShowCmd(out piShowCmd: Integer): HResult; stdcall;
    function SetShowCmd(iShowCmd: Integer): HResult; stdcall;
    function GetIconLocation(pszIconPath: LPSTR; cchIconPath: Integer;
      out piIcon: Integer): HResult; stdcall;
    function SetIconLocation(pszIconPath: LPSTR; iIcon: Integer): HResult; stdcall;
    function SetRelativePath(pszPathRel: LPSTR; dwReserved: DWORD): HResult; stdcall;
    function Resolve(Wnd: HWND; fFlags: DWORD): HResult; stdcall;
    function SetPath(pszFile: LPSTR): HResult; stdcall;
  end;
  {$EXTERNALSYM IShellLinkA}
  IShellLinkW = interface(IUnknown) { sl }
    [SID_IShellLinkW]
    function GetPath(pszFile: LPWSTR; cchMaxPath: Integer;
      var pfd: TWin32FindDataW; fFlags: DWORD): HResult; stdcall;
    function GetIDList(var ppidl: PItemIDList): HResult; stdcall;
    function SetIDList(pidl: PItemIDList): HResult; stdcall;
    function GetDescription(pszName: LPWSTR; cchMaxName: Integer): HResult; stdcall;
    function SetDescription(pszName: LPWSTR): HResult; stdcall;
    function GetWorkingDirectory(pszDir: LPWSTR; cchMaxPath: Integer): HResult; stdcall;
    function SetWorkingDirectory(pszDir: LPWSTR): HResult; stdcall;
    function GetArguments(pszArgs: LPWSTR; cchMaxPath: Integer): HResult; stdcall;
    function SetArguments(pszArgs: LPWSTR): HResult; stdcall;
    function GetHotkey(var pwHotkey: Word): HResult; stdcall;
    function SetHotkey(wHotkey: Word): HResult; stdcall;
    function GetShowCmd(out piShowCmd: Integer): HResult; stdcall;
    function SetShowCmd(iShowCmd: Integer): HResult; stdcall;
    function GetIconLocation(pszIconPath: LPWSTR; cchIconPath: Integer;
      out piIcon: Integer): HResult; stdcall;
    function SetIconLocation(pszIconPath: LPWSTR; iIcon: Integer): HResult; stdcall;
    function SetRelativePath(pszPathRel: LPWSTR; dwReserved: DWORD): HResult; stdcall;
    function Resolve(Wnd: HWND; fFlags: DWORD): HResult; stdcall;
    function SetPath(pszFile: LPWSTR): HResult; stdcall;
  end;
  {$EXTERNALSYM IShellLinkW}
  IShellLink = IShellLinkW;
  {$EXTERNALSYM IShellLink}
{ interface IShellLinkDataList }
  IShellLinkDataList = interface(IUnknown) 
    [SID_IShellLinkDataList]
    function AddDataBlock(var pDataBlock: Pointer): HRESULT; stdcall;
    function CopyDataBlock(dwSig: DWORD; out ppDataBlock): HRESULT; stdcall;
    function RemoveDataBlock(dwSig: DWORD): HRESULT; stdcall;
    function GetFlags(var pdwFlags: DWORD): HRESULT; stdcall;
    function SetFlags(dwFlags: DWORD): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IShellLinkDataList}

{ interface IResolveShellLink }
  IResolveShellLink = interface(IUnknown) 
    [SID_IResolveShellLink]
    function ResolveShellLink(const punkLink: IUnknown; hwnd: HWND; 
      fFlags: DWORD): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IResolveShellLink}

{ interface IActionProgressDialog }
type
  tagSPINITF = Integer;
  {$EXTERNALSYM tagSPINITF}
const
  SPINITF_NORMAL     = 0; 
  {$EXTERNALSYM SPINITF_NORMAL}
  SPINITF_MODAL      = $1; 
  {$EXTERNALSYM SPINITF_MODAL}
  SPINITF_NOMINIMIZE = $8; 
  {$EXTERNALSYM SPINITF_NOMINIMIZE}
type
  SPINITF = DWORD; 
  {$EXTERNALSYM SPINITF}
  TSPInitf = SPINITF;

type
  IActionProgressDialog = interface(IUnknown) 
    [SID_IActionProgressDialog]
    function Initialize(flags: TSPInitf; pszTitle: LPCWSTR; 
      pszCancel: LPCWSTR): HRESULT; stdcall;
    function Stop: HRESULT; stdcall;
  end;
  {$EXTERNALSYM IActionProgressDialog}

{ interface IHWEventHandler }
  IHWEventHandler = interface(IUnknown) 
    [SID_IHWEventHandler]
    function Initialize(pszParams: LPCWSTR): HRESULT; stdcall;
    function HandleEvent(pszDeviceID: LPCWSTR; pszAltDeviceID: LPCWSTR; 
      pszEventType: LPCWSTR): HRESULT; stdcall;
    function HandleEventWithContent(pszDeviceID: LPCWSTR; pszAltDeviceID: LPCWSTR; 
      pszEventType: LPCWSTR; pszContentTypeHandler: LPCWSTR; 
      const pdataobject: IDataObject): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IHWEventHandler}

{ interface IHWEventHandler2 }
  IHWEventHandler2 = interface(IHWEventHandler) 
    [SID_IHWEventHandler2]
    function HandleEventWithHWND(pszDeviceID: LPCWSTR; pszAltDeviceID: LPCWSTR; 
      pszEventType: LPCWSTR; hwndOwner: HWND): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IHWEventHandler2}

{ interface IQueryCancelAutoPlay }
const
  ARCONTENT_AUTORUNINF     = $00000002; // That's the one we have today, and always had
  {$EXTERNALSYM ARCONTENT_AUTORUNINF}
  ARCONTENT_AUDIOCD        = $00000004; // Audio CD (not MP3 and the like, the stuff you buy at the store)
  {$EXTERNALSYM ARCONTENT_AUDIOCD}
  ARCONTENT_DVDMOVIE       = $00000008; // DVD Movie (not MPEGs, the stuff you buy at the store)
  {$EXTERNALSYM ARCONTENT_DVDMOVIE}
  ARCONTENT_BLANKCD        = $00000010; // Blank CD-R/CD-RW)
  {$EXTERNALSYM ARCONTENT_BLANKCD}
  ARCONTENT_BLANKDVD       = $00000020; // Blank DVD-R/DVD-RW
  {$EXTERNALSYM ARCONTENT_BLANKDVD}
  ARCONTENT_UNKNOWNCONTENT = $00000040; // Whatever files.  Mean that it's formatted.
  {$EXTERNALSYM ARCONTENT_UNKNOWNCONTENT}
  ARCONTENT_AUTOPLAYPIX    = $00000080; // Any files classified by shell as image. (jpg, bmp, etc.)
  {$EXTERNALSYM ARCONTENT_AUTOPLAYPIX}
  ARCONTENT_AUTOPLAYMUSIC  = $00000100; // Any files classified by shell as music. (wma, mp3, etc.)
  {$EXTERNALSYM ARCONTENT_AUTOPLAYMUSIC}
  ARCONTENT_AUTOPLAYVIDEO  = $00000200; // Any files classified by shell as video. (mpg, avi, etc.)
  {$EXTERNALSYM ARCONTENT_AUTOPLAYVIDEO}
  ARCONTENT_VCD            = $00000400; // VCD format
  {$EXTERNALSYM ARCONTENT_VCD}
  ARCONTENT_SVCD           = $00000800; // Super-VCD format
  {$EXTERNALSYM ARCONTENT_SVCD}
  ARCONTENT_DVDAUDIO       = $00001000; // DVD-Audio
  {$EXTERNALSYM ARCONTENT_DVDAUDIO}
  ARCONTENT_BLANKED        = $00002000; // Blank BD-R/BD-RW
  {$EXTERNALSYM ARCONTENT_BLANKED}
  ARCONTENT_BLURAY         = $00004000; // Blu-ray Disc
  {$EXTERNALSYM ARCONTENT_BLURAY}
  ARCONTENT_NONE           = $00000000; // Empty (but formatted)
  {$EXTERNALSYM ARCONTENT_NONE}
  ARCONTENT_MASK           = $00007FFE; // Bits that denote valid content types
  {$EXTERNALSYM ARCONTENT_MASK}
  ARCONTENT_PHASE_UNKNOWN  = $00000000; // We can be in any phase.  This is XP behavior.
  {$EXTERNALSYM ARCONTENT_PHASE_UNKNOWN}
  ARCONTENT_PHASE_PRESNIFF = $10000000; // These are contents we know w/o scanning the media for complete data (e.g. Audio track, DVD Movie).
  {$EXTERNALSYM ARCONTENT_PHASE_PRESNIFF}
  ARCONTENT_PHASE_SNIFFING = $20000000; // We are in the middle of searching the media.  There could be more contents to be found than currently reported.
  {$EXTERNALSYM ARCONTENT_PHASE_SNIFFING}
  ARCONTENT_PHASE_FINAL    = $40000000; // We have finished searching; contents we report are final.
  {$EXTERNALSYM ARCONTENT_PHASE_FINAL}
  ARCONTENT_PHASE_MASK     = $70000000; // Bits that denote what phase we are in the Autoplay process.
  {$EXTERNALSYM ARCONTENT_PHASE_MASK}

type
  IQueryCancelAutoPlay = interface(IUnknown) 
    [SID_IQueryCancelAutoPlay]
    function AllowAutoPlay(pszPath: LPCWSTR; dwContentType: DWORD; 
      pszLabel: LPCWSTR; dwSerialNumber: DWORD): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IQueryCancelAutoPlay}

{ interface IDynamicHWHandler }
  IDynamicHWHandler = interface(IUnknown) 
    [SID_IDynamicHWHandler]
    function GetDynamicInfo(pszDeviceID: LPCWSTR; dwContentType: DWORD; 
      var ppszAction: LPWSTR): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IDynamicHWHandler}

{ interface IActionProgress }
type
  tagSPBEGINF = Integer;
  {$EXTERNALSYM tagSPBEGINF}
const
  SPBEGINF_NORMAL          = 0; 
  {$EXTERNALSYM SPBEGINF_NORMAL}
  SPBEGINF_AUTOTIME        = $2; 
  {$EXTERNALSYM SPBEGINF_AUTOTIME}
  SPBEGINF_NOPROGRESSBAR   = $10; 
  {$EXTERNALSYM SPBEGINF_NOPROGRESSBAR}
  SPBEGINF_MARQUEEPROGRESS = $20; 
  {$EXTERNALSYM SPBEGINF_MARQUEEPROGRESS}
  SPBEGINF_NOCANCELBUTTON  = $40; 
  {$EXTERNALSYM SPBEGINF_NOCANCELBUTTON}
type
  SPBEGINF = DWORD; 
  {$EXTERNALSYM SPBEGINF}
  TSPBeginF = SPBEGINF;

const
  SPACTION_NONE               = 0; 
  {$EXTERNALSYM SPACTION_NONE}
  SPACTION_MOVING             = SPACTION_NONE + 1; 
  {$EXTERNALSYM SPACTION_MOVING}
  SPACTION_COPYING            = SPACTION_MOVING + 1; 
  {$EXTERNALSYM SPACTION_COPYING}
  SPACTION_RECYCLING          = SPACTION_COPYING + 1; 
  {$EXTERNALSYM SPACTION_RECYCLING}
  SPACTION_APPLYINGATTRIBS    = SPACTION_RECYCLING + 1; 
  {$EXTERNALSYM SPACTION_APPLYINGATTRIBS}
  SPACTION_DOWNLOADING        = SPACTION_APPLYINGATTRIBS + 1; 
  {$EXTERNALSYM SPACTION_DOWNLOADING}
  SPACTION_SEARCHING_INTERNET = SPACTION_DOWNLOADING + 1; 
  {$EXTERNALSYM SPACTION_SEARCHING_INTERNET}
  SPACTION_CALCULATING        = SPACTION_SEARCHING_INTERNET + 1; 
  {$EXTERNALSYM SPACTION_CALCULATING}
  SPACTION_UPLOADING          = SPACTION_CALCULATING + 1; 
  {$EXTERNALSYM SPACTION_UPLOADING}
  SPACTION_SEARCHING_FILES    = SPACTION_UPLOADING + 1; 
  {$EXTERNALSYM SPACTION_SEARCHING_FILES}
  SPACTION_DELETING           = SPACTION_SEARCHING_FILES + 1; 
  {$EXTERNALSYM SPACTION_DELETING}
  SPACTION_RENAMING           = SPACTION_DELETING + 1; 
  {$EXTERNALSYM SPACTION_RENAMING}
  SPACTION_FORMATTING         = SPACTION_RENAMING + 1; 
  {$EXTERNALSYM SPACTION_FORMATTING}
  SPACTION_COPY_MOVING        = SPACTION_FORMATTING + 1; 
  {$EXTERNALSYM SPACTION_COPY_MOVING}

  SPTEXT_ACTIONDESCRIPTION = 1; 
  {$EXTERNALSYM SPTEXT_ACTIONDESCRIPTION}
  SPTEXT_ACTIONDETAIL      = SPTEXT_ACTIONDESCRIPTION + 1; 
  {$EXTERNALSYM SPTEXT_ACTIONDETAIL}

type
  IActionProgress = interface(IUnknown) 
    [SID_IActionProgress]
    function &Begin(action: Integer; flags: TSPBeginF): HRESULT; stdcall;
    function UpdateProgress(ulCompleted: ULONGLONG;
      ulTotal: ULONGLONG): HRESULT; stdcall;
    function UpdateText(sptext: Integer; pszText: LPCWSTR;
      fMayCompact: BOOL): HRESULT; stdcall;
    function QueryCancel(var pfCancelled: BOOL): HRESULT; stdcall;
    function ResetCancel: HRESULT; stdcall;
    function &End: HRESULT; stdcall;
  end;
  {$EXTERNALSYM IActionProgress}

{ Interface: IShellExtInit }

{ The IShellExtInit interface is used by the explorer to initialize shell
  extension objects. The explorer (1) calls CoCreateInstance (or equivalent)
  with the registered CLSID and IID_IShellExtInit, (2) calls its Initialize
  member, then (3) calls its QueryInterface to a particular interface (such
  as IContextMenu or IPropSheetExt and (4) performs the rest of operation. }

{ [Member functions] }

{ IShellExtInit.Initialize }

{ This member function is called when the explorer is initializing either
  context menu extension, property sheet extension or non-default drag-drop
  extension.

  Parameters: (context menu or property sheet extension)
   pidlFolder -- Specifies the parent folder
   lpdobj -- Spefifies the set of items selected in that folder.
   hkeyProgID -- Specifies the type of the focused item in the selection.

  Parameters: (non-default drag-and-drop extension)
   pidlFolder -- Specifies the target (destination) folder
   lpdobj -- Specifies the items that are dropped (see the description
    about shell's clipboard below for clipboard formats).
   hkeyProgID -- Specifies the folder type. }
  IShellExtInit = interface(IUnknown)
    [SID_IShellExtInit]
    function Initialize(pidlFolder: PItemIDList; lpdobj: IDataObject;
      hKeyProgID: HKEY): HResult; stdcall;
  end;
  {$EXTERNALSYM IShellExtInit}

{ Interface: IShellPropSheetExt }

{ The explorer uses the IShellPropSheetExt to allow property sheet
  extensions or control panel extensions to add additional property
  sheet pages. }

{ [Member functions] }

{ IShellPropSheetExt.AddPages }

{ The explorer calls this member function when it finds a registered
  property sheet extension for a particular type of object. For each
  additional page, the extension creates a page object by calling
  CreatePropertySheetPage API and calls lpfnAddPage.

   Parameters:
    lpfnAddPage -- Specifies the callback function.
    lParam -- Specifies the opaque handle to be passed to the callback function. }


{ IShellPropSheetExt.ReplacePage }

{ The explorer never calls this member of property sheet extensions. The
  explorer calls this member of control panel extensions, so that they
  can replace some of default control panel pages (such as a page of
  mouse control panel).

   Parameters:
    uPageID -- Specifies the page to be replaced.
    lpfnReplace Specifies the callback function.
    lParam -- Specifies the opaque handle to be passed to the callback function. }
const
  EXPPS_FILETYPES = $1; 
  {$EXTERNALSYM EXPPS_FILETYPES}
type
  EXPPS = UINT;
  {$EXTERNALSYM EXPPS}
  TEXPPS = EXPPS;

type
  IShellPropSheetExt = interface(IUnknown)
    [SID_IShellPropSheetExt]
    function AddPages(lpfnAddPage: TFNAddPropSheetPage; lParam: LPARAM): HResult; stdcall;
    function ReplacePage(uPageID: TEXPPS; lpfnReplaceWith: TFNAddPropSheetPage;
      lParam: LPARAM): HResult; stdcall;
  end;
  {$EXTERNALSYM IShellPropSheetExt}

{ interface IRemoteComputer }
  IRemoteComputer = interface(IUnknown) 
    [SID_IRemoteComputer]
    function Initialize(pszMachine: LPCWSTR; bEnumerating: BOOL): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IRemoteComputer}

{ interface IQueryContinue }
  IQueryContinue = interface(IUnknown) 
    [SID_IQueryContinue]
    function QueryContinue: HRESULT; stdcall;
  end;
  {$EXTERNALSYM IQueryContinue}

{ interface IObjectWithCancelEvent }
  IObjectWithCancelEvent = interface(IUnknown) 
    [SID_IObjectWithCancelEvent]
    function GetCancelEvent(var phEvent: THandle): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IObjectWithCancelEvent}

{ interface IUserNotification }
  IUserNotification = interface(IUnknown) 
    [SID_IUserNotification]
    function SetBalloonInfo(pszTitle: LPCWSTR; pszText: LPCWSTR; 
      dwInfoFlags: DWORD): HRESULT; stdcall;
    function SetBalloonRetry(dwShowTime: DWORD; dwInterval: DWORD; 
      cRetryCount: UINT): HRESULT; stdcall;
    function SetIconInfo(hIcon: HICON; pszToolTip: LPCWSTR): HRESULT; stdcall;
    function Show(const pqc: IQueryContinue; 
      dwContinuePollInterval: DWORD): HRESULT; stdcall;
    function PlaySound(pszSoundName: LPCWSTR): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IUserNotification}

{ interface IUserNotificationCallback }
  IUserNotificationCallback = interface(IUnknown) 
    [SID_IUserNotificationCallback]
    function OnBalloonUserClick(const pt: TPoint): HRESULT; stdcall;
    function OnLeftClick(const pt: TPoint): HRESULT; stdcall;
    function OnContextMenu(const pt: TPoint): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IUserNotificationCallback}

{ interface IUserNotification2 }
  IUserNotification2 = interface(IUnknown) 
    [SID_IUserNotification2]
    function SetBalloonInfo(pszTitle: LPCWSTR; pszText: LPCWSTR; 
      dwInfoFlags: DWORD): HRESULT; stdcall;
    function SetBalloonRetry(dwShowTime: DWORD; dwInterval: DWORD; 
      cRetryCount: UINT): HRESULT; stdcall;
    function SetIconInfo(hIcon: HICON; pszToolTip: LPCWSTR): HRESULT; stdcall;
    function Show(const pqc: IQueryContinue; dwContinuePollInterval: DWORD; 
      const pSink: IUserNotificationCallback): HRESULT; stdcall;
    function PlaySound(pszSoundName: LPCWSTR): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IUserNotification2}

{ interface IItemNameLimits }
  IItemNameLimits = interface(IUnknown) 
    [SID_IItemNameLimits]
    function GetValidCharacters(var ppwszValidChars: LPWSTR; 
      var ppwszInvalidChars: LPWSTR): HRESULT; stdcall;
    function GetMaxLength(pszName: LPCWSTR; 
      var piMaxNameLen: Integer): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IItemNameLimits}

{ interface ISearchFolderItemFactory }
  ISearchFolderItemFactory = interface(IUnknown) 
    [SID_ISearchFolderItemFactory]
    function SetDisplayName(pszDisplayName: LPCWSTR): HRESULT; stdcall;
    function SetFolderTypeID(ftid: TFolderTypeID): HRESULT; stdcall;
    function SetFolderLogicalViewMode(flvm: Integer): HRESULT; stdcall;
    function SetIconSize(iIconSize: Integer): HRESULT; stdcall;
    function SetVisibleColumns(cVisibleColumns: UINT; 
      rgKey: array of TPropertyKey): HRESULT; stdcall;
    function SetSortColumns(cSortColumns: UINT; 
      rgSortColumns: array of TSortColumn): HRESULT; stdcall;
    function SetGroupColumn(const keyGroup: TPropertyKey): HRESULT; stdcall;
    function SetStacks(cStackKeys: UINT; 
      rgStackKeys: array of TPropertyKey): HRESULT; stdcall;
    function SetScope(const psiaScope: IShellItemArray): HRESULT; stdcall;
    function SetCondition(const pCondition: ICondition): HRESULT; stdcall;
    function GetShellItem(const riid: TIID; out ppv): HRESULT; stdcall;
    function GetIDList(out ppidl: PItemIDList): HRESULT; stdcall;
  end;
  {$EXTERNALSYM ISearchFolderItemFactory}


{ interface IExtractImage }
const
  IEI_PRIORITY_MAX     = ITSAT_MAX_PRIORITY;
  {$EXTERNALSYM IEI_PRIORITY_MAX}
  IEI_PRIORITY_MIN     = ITSAT_MIN_PRIORITY;
  {$EXTERNALSYM IEI_PRIORITY_MIN}
  IEIT_PRIORITY_NORMAL = ITSAT_DEFAULT_PRIORITY;
  {$EXTERNALSYM IEIT_PRIORITY_NORMAL}
  IEIFLAG_ASYNC        = $0001;                  // (deprecated) ask the extractor if it supports ASYNC extract (free threaded)
  {$EXTERNALSYM IEIFLAG_ASYNC}
  IEIFLAG_CACHE        = $0002;                  // returned from the extractor if it does NOT cache the thumbnail
  {$EXTERNALSYM IEIFLAG_CACHE}
  IEIFLAG_ASPECT       = $0004;                  // passed to the extractor to beg it to render to the aspect ratio of the supplied rect
  {$EXTERNALSYM IEIFLAG_ASPECT}
  IEIFLAG_OFFLINE      = $0008;                  // if the extractor shouldn't hit the net to get any content neede for the rendering
  {$EXTERNALSYM IEIFLAG_OFFLINE}
  IEIFLAG_GLEAM        = $0010;                  // does the image have a gleam ? this will be returned if it does
  {$EXTERNALSYM IEIFLAG_GLEAM}
  IEIFLAG_SCREEN       = $0020;                  // render as if for the screen  (this is exlusive with IEIFLAG_ASPECT )
  {$EXTERNALSYM IEIFLAG_SCREEN}
  IEIFLAG_ORIGSIZE     = $0040;                  // render to the approx size passed, but crop if neccessary
  {$EXTERNALSYM IEIFLAG_ORIGSIZE}
  IEIFLAG_NOSTAMP      = $0080;                  // returned from the extractor if it does NOT want an icon stamp on the thumbnail
  {$EXTERNALSYM IEIFLAG_NOSTAMP}
  IEIFLAG_NOBORDER     = $0100;                  // returned from the extractor if it does NOT want an a border around the thumbnail
  {$EXTERNALSYM IEIFLAG_NOBORDER}
  IEIFLAG_QUALITY      = $0200;                  // passed to the Extract method to indicate that a slower, higher quality image is desired, re-compute the thumbnail
  {$EXTERNALSYM IEIFLAG_QUALITY}
  IEIFLAG_REFRESH      = $0400;                  // returned from the extractor if it would like to have Refresh Thumbnail available
  {$EXTERNALSYM IEIFLAG_REFRESH}

type
  IExtractImage = interface(IUnknown) 
    [SID_IExtractImage]
    function GetLocation(pszPathBuffer: LPWSTR; cch: DWORD; var pdwPriority: DWORD; 
      var prgSize: TSize; dwRecClrDepth: DWORD; 
      var pdwFlags: DWORD): HRESULT; stdcall;
    function Extract(var phBmpThumbnail: HBITMAP): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IExtractImage}

{ interface IExtractImage2 }
  IExtractImage2 = interface(IExtractImage) 
    [SID_IExtractImage2]
    function GetDateStamp(var pDateStamp: TFileTime): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IExtractImage2}

{ interface IThumbnailHandlerFactory }
  IThumbnailHandlerFactory = interface(IUnknown) 
    [SID_IThumbnailHandlerFactory]
    function GetThumbnailHandler(pidlChild: PItemIDList; const pbc: IBindCtx; 
      const riid: TIID; out ppv): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IThumbnailHandlerFactory}

{ interface IParentAndItem }
  IParentAndItem = interface(IUnknown) 
    [SID_IParentAndItem]
    function SetParentAndItem(pidlParent: PItemIDList; const psf: IShellFolder; 
      pidlChild: PItemIDList): HRESULT; stdcall;
    function GetParentAndItem(var ppidlParent: PItemIDList; out ppsf: IShellFolder;
      out ppidlChild: PItemIDList): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IParentAndItem}

{ IDockingWindow interface }
{
 An object (docking window) implements this interface so the site can
 communicate with it.  An example of a docking window is a toolbar.

 [Member functions]

 IDockingWindow::ShowDW(fShow)
   Shows or hides the docking window.

 IDockingWindow::CloseDW(dwReserved)
   Closes the docking window.  dwReserved must be 0.

 IDockingWindow::ResizeBorderDW(prcBorder, punkToolbarSite, fReserved)
   Resizes the docking window's border to *prcBorder.  fReserved must
   be 0.
 IObjectWithSite::SetSite(punkSite)
   IDockingWindow usually paired with IObjectWithSite.
   Provides the IUnknown pointer of the site to the docking window.
}
  IDockingWindow = interface(IOleWindow)
    [SID_IDockingWindow]
    function ShowDW(fShow: BOOL): HResult; stdcall;
    function CloseDW(dwReserved: DWORD): HResult; stdcall;
    function ResizeBorderDW(var prcBorder: TRect; punkToolbarSite: IUnknown;
      fReserved: BOOL): HResult; stdcall;
  end;
  {$EXTERNALSYM IDockingWindow}

{ interface IDeskBand }
const
  // DESKBANDINFO dwModeFlags values
  DBIM_MINSIZE   = $0001;
  {$EXTERNALSYM DBIM_MINSIZE}
  DBIM_MAXSIZE   = $0002;
  {$EXTERNALSYM DBIM_MAXSIZE}
  DBIM_INTEGRAL  = $0004;
  {$EXTERNALSYM DBIM_INTEGRAL}
  DBIM_ACTUAL    = $0008;
  {$EXTERNALSYM DBIM_ACTUAL}
  DBIM_TITLE     = $0010;
  {$EXTERNALSYM DBIM_TITLE}
  DBIM_MODEFLAGS = $0020;
  {$EXTERNALSYM DBIM_MODEFLAGS}
  DBIM_BKCOLOR   = $0040;
  {$EXTERNALSYM DBIM_BKCOLOR}

type
  DESKBANDINFO = record
    dwMask: DWORD;
    ptMinSize: TPointL;
    ptMaxSize: TPointL;
    ptIntegral: TPointL;
    ptActual: TPointL;
    wszTitle: array[0..255] of WideChar;
    dwModeFlags: DWORD;
    crBkgnd: TCOLORREF;
  end;
  {$EXTERNALSYM DESKBANDINFO}
  PDeskBandInfo = ^TDeskBandInfo;
  TDeskBandInfo = DESKBANDINFO;

const
  // GetBandInfo view mode values
  DBIMF_NORMAL              = $0000;
  {$EXTERNALSYM DBIMF_NORMAL}
  DBIMF_FIXED               = $0001;
  {$EXTERNALSYM DBIMF_FIXED}
  DBIMF_FIXEDBMP            = $0004; // a fixed background bitmap (if supported)
  {$EXTERNALSYM DBIMF_FIXEDBMP}
  DBIMF_VARIABLEHEIGHT      = $0008;
  {$EXTERNALSYM DBIMF_VARIABLEHEIGHT}
  DBIMF_UNDELETEABLE        = $0010;
  {$EXTERNALSYM DBIMF_UNDELETEABLE}
  DBIMF_DEBOSSED            = $0020;
  {$EXTERNALSYM DBIMF_DEBOSSED}
  DBIMF_BKCOLOR             = $0040;
  {$EXTERNALSYM DBIMF_BKCOLOR}
  DBIMF_USECHEVRON          = $0080;
  {$EXTERNALSYM DBIMF_USECHEVRON}
  DBIMF_BREAK               = $0100;
  {$EXTERNALSYM DBIMF_BREAK}
  DBIMF_ADDTOFRONT          = $0200;
  {$EXTERNALSYM DBIMF_ADDTOFRONT}
  DBIMF_TOPALIGN            = $0400;
  {$EXTERNALSYM DBIMF_TOPALIGN}
  DBIMF_NOGRIPPER           = $0800;
  {$EXTERNALSYM DBIMF_NOGRIPPER}
  DBIMF_ALWAYSGRIPPER       = $1000;
  {$EXTERNALSYM DBIMF_ALWAYSGRIPPER}
  DBIMF_NOMARGINS           = $2000;
  {$EXTERNALSYM DBIMF_NOMARGINS}
  DBIF_VIEWMODE_NORMAL      = $0000;
  {$EXTERNALSYM DBIF_VIEWMODE_NORMAL}
  DBIF_VIEWMODE_VERTICAL    = $0001;
  {$EXTERNALSYM DBIF_VIEWMODE_VERTICAL}
  DBIF_VIEWMODE_FLOATING    = $0002;
  {$EXTERNALSYM DBIF_VIEWMODE_FLOATING}
  DBIF_VIEWMODE_TRANSPARENT = $0004;
  {$EXTERNALSYM DBIF_VIEWMODE_TRANSPARENT}

  DBID_BANDINFOCHANGED      = 0;
  {$EXTERNALSYM DBID_BANDINFOCHANGED}
  DBID_SHOWONLY             = 1;
  {$EXTERNALSYM DBID_SHOWONLY}
  DBID_MAXIMIZEBAND         = 2;
  {$EXTERNALSYM DBID_MAXIMIZEBAND}
  DBID_PUSHCHEVRON          = 3;
  {$EXTERNALSYM DBID_PUSHCHEVRON}
  DBID_DELAYINIT            = 4;
  {$EXTERNALSYM DBID_DELAYINIT}
  DBID_FINISHINIT           = 5;
  {$EXTERNALSYM DBID_FINISHINIT}
  DBID_SETWINDOWTHEME       = 6;
  {$EXTERNALSYM DBID_SETWINDOWTHEME}
  DBID_PERMITAUTOHIDE       = 7;
  {$EXTERNALSYM DBID_PERMITAUTOHIDE}

  DBPC_SELECTFIRST          = -1;
  {$EXTERNALSYM DBPC_SELECTFIRST}
  DBPC_SELECTLAST           = -2;
  {$EXTERNALSYM DBPC_SELECTLAST}

type
  IDeskBand = interface(IDockingWindow)
    [SID_IDeskBand]
    function GetBandInfo(dwBandID, dwViewMode: DWORD; var pdbi: TDeskBandInfo):
      HResult; stdcall;
  end;
  {$EXTERNALSYM IDeskBand}

{ interface IDeskBandInfo }
  IDeskBandInfo = interface(IUnknown) 
    [SID_IDeskBandInfo]
    function GetDefaultBandWidth(dwBandID: DWORD; dwViewMode: DWORD; 
      var pnWidth: Integer): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IDeskBandInfo}

{ interface IDeskBand2 }
  IDeskBand2 = interface(IDeskBand) 
    [SID_IDeskBand2]
    function CanRenderComposited(
      var pfCanRenderComposited: BOOL): HRESULT; stdcall;
  
    function SetCompositionState(fCompositionEnabled: BOOL): HRESULT; stdcall;
  
    function GetCompositionState(var pfCompositionEnabled: BOOL): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IDeskBand2}

{ interface ITaskbarList }
  ITaskbarList = interface(IUnknown) 
    [SID_ITaskbarList]
    function HrInit: HRESULT; stdcall;
    function AddTab(hwnd: HWND): HRESULT; stdcall;
    function DeleteTab(hwnd: HWND): HRESULT; stdcall;
    function ActivateTab(hwnd: HWND): HRESULT; stdcall;
    function SetActiveAlt(hwnd: HWND): HRESULT; stdcall;
  end;
  {$EXTERNALSYM ITaskbarList}

{ interface ITaskbarList2 }
  ITaskbarList2 = interface(ITaskbarList) 
    [SID_ITaskbarList2]
    function MarkFullscreenWindow(hwnd: HWND; fFullscreen: BOOL): HRESULT; stdcall;
  end;
  {$EXTERNALSYM ITaskbarList2}

{ interface ITaskbarList3 }
type
  THUMBBUTTON = record 
    dwMask: DWORD;
    iId: UINT;
    iBitmap: UINT;
    hIcon: HICON;
    szTip: packed array[0..259] of WCHAR;
    dwFlags: DWORD;
  end;
  {$EXTERNALSYM THUMBBUTTON}
  tagTHUMBBUTTON = THUMBBUTTON;
  {$EXTERNALSYM tagTHUMBBUTTON}
  TThumbButton = THUMBBUTTON;
  PThumbButton = ^TThumbButton;

// THUMBBUTTON flags
const
  THBF_ENABLED        =  $0000;
  {$EXTERNALSYM THBF_ENABLED}
  THBF_DISABLED       =  $0001;
  {$EXTERNALSYM THBF_DISABLED}
  THBF_DISMISSONCLICK =  $0002;
  {$EXTERNALSYM THBF_DISMISSONCLICK}
  THBF_NOBACKGROUND   =  $0004;
  {$EXTERNALSYM THBF_NOBACKGROUND}
  THBF_HIDDEN         =  $0008;
  {$EXTERNALSYM THBF_HIDDEN}
  THBF_NONINTERACTIVE = $10; 
  {$EXTERNALSYM THBF_NONINTERACTIVE}
// THUMBBUTTON mask
  THB_BITMAP          =  $0001;
  {$EXTERNALSYM THB_BITMAP}
  THB_ICON            =  $0002;
  {$EXTERNALSYM THB_ICON}
  THB_TOOLTIP         =  $0004;
  {$EXTERNALSYM THB_TOOLTIP}
  THB_FLAGS           =  $0008;
  {$EXTERNALSYM THB_FLAGS}
  THBN_CLICKED        =  $1800;
  {$EXTERNALSYM THBN_CLICKED}

const
  TBPF_NOPROGRESS    = 0; 
  {$EXTERNALSYM TBPF_NOPROGRESS}
  TBPF_INDETERMINATE = $1; 
  {$EXTERNALSYM TBPF_INDETERMINATE}
  TBPF_NORMAL        = $2; 
  {$EXTERNALSYM TBPF_NORMAL}
  TBPF_ERROR         = $4; 
  {$EXTERNALSYM TBPF_ERROR}
  TBPF_PAUSED        = $8; 
  {$EXTERNALSYM TBPF_PAUSED}

  TBATF_USEMDITHUMBNAIL   = $1; 
  {$EXTERNALSYM TBATF_USEMDITHUMBNAIL}
  TBATF_USEMDILIVEPREVIEW = $2; 
  {$EXTERNALSYM TBATF_USEMDILIVEPREVIEW}

type
  ITaskbarList3 = interface(ITaskbarList2) 
    [SID_ITaskbarList3]
    function SetProgressValue(hwnd: HWND; ullCompleted: ULONGLONG; 
      ullTotal: ULONGLONG): HRESULT; stdcall;
    function SetProgressState(hwnd: HWND; tbpFlags: Integer): HRESULT; stdcall;
    function RegisterTab(hwndTab: HWND; hwndMDI: HWND): HRESULT; stdcall;
    function UnregisterTab(hwndTab: HWND): HRESULT; stdcall;
    function SetTabOrder(hwndTab: HWND; hwndInsertBefore: HWND): HRESULT; stdcall;
    function SetTabActive(hwndTab: HWND; hwndMDI: HWND; 
      tbatFlags: Integer): HRESULT; stdcall;
    function ThumbBarAddButtons(hwnd: HWND; cButtons: UINT;
      pButton: PThumbButton): HRESULT; stdcall;
    function ThumbBarUpdateButtons(hwnd: HWND; cButtons: UINT;
      pButton: PThumbButton): HRESULT; stdcall;
    function ThumbBarSetImageList(hwnd: HWND; himl: HIMAGELIST): HRESULT; stdcall;
    function SetOverlayIcon(hwnd: HWND; hIcon: HICON; 
      pszDescription: LPCWSTR): HRESULT; stdcall;
    function SetThumbnailTooltip(hwnd: HWND; pszTip: LPCWSTR): HRESULT; stdcall;
    function SetThumbnailClip(hwnd: HWND; var prcClip: TRect): HRESULT; stdcall;
  end;
  {$EXTERNALSYM ITaskbarList3}
  
{ interface ITaskbarList4 }

type
  STPFLAG = Integer; 
  {$EXTERNALSYM STPFLAG}
const
  STPF_NONE                      = 0; 
  {$EXTERNALSYM STPF_NONE}
  STPF_USEAPPTHUMBNAILALWAYS     = $1; 
  {$EXTERNALSYM STPF_USEAPPTHUMBNAILALWAYS}
  STPF_USEAPPTHUMBNAILWHENACTIVE = $2; 
  {$EXTERNALSYM STPF_USEAPPTHUMBNAILWHENACTIVE}
  STPF_USEAPPPEEKALWAYS          = $4; 
  {$EXTERNALSYM STPF_USEAPPPEEKALWAYS}
  STPF_USEAPPPEEKWHENACTIVE      = $8; 
  {$EXTERNALSYM STPF_USEAPPPEEKWHENACTIVE}

type
  ITaskbarList4 = interface(ITaskbarList3) 
    [SID_ITaskbarList4]
    function SetTabProperties(hwndTab: HWND; stpFlags: STPFLAG): HRESULT; stdcall;
  end;
  {$EXTERNALSYM ITaskbarList4}

{ interface IStartMenuPinnedList }
  IStartMenuPinnedList = interface(IUnknown) 
    [SID_IStartMenuPinnedList]
    function RemoveFromList(const pitem: IShellItem): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IStartMenuPinnedList}

{ interface ICDBurn }
  ICDBurn = interface(IUnknown) 
    [SID_ICDBurn]
    function GetRecorderDriveLetter(pszDrive: LPWSTR; cch: UINT): HRESULT; stdcall;
    function Burn(hwnd: HWND): HRESULT; stdcall;
    function HasRecordableDrive(var pfHasRecorder: BOOL): HRESULT; stdcall;
  end;
  {$EXTERNALSYM ICDBurn}

{ interface IWizardSite }
const
  IDD_WIZEXTN_FIRST = $5000; 
  {$EXTERNALSYM IDD_WIZEXTN_FIRST}
  IDD_WIZEXTN_LAST = $5100; 
  {$EXTERNALSYM IDD_WIZEXTN_LAST}

type
  HPROPSHEETPAGE = type LongWord;                                    
  {$EXTERNALSYM HPROPSHEETPAGE}

  IWizardSite = interface(IUnknown) 
    [SID_IWizardSite]
    function GetPreviousPage(var phpage: HPROPSHEETPAGE): HRESULT; stdcall;
    function GetNextPage(var phpage: HPROPSHEETPAGE): HRESULT; stdcall;
    function GetCancelledPage(var phpage: HPROPSHEETPAGE): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IWizardSite}

{ interface IWizardExtension }
  IWizardExtension = interface(IUnknown) 
    [SID_IWizardExtension]
    function AddPages(aPages: array of HPROPSHEETPAGE; cPages: UINT; 
      var pnPagesAdded: UINT): HRESULT; stdcall;
    function GetFirstPage(var phpage: HPROPSHEETPAGE): HRESULT; stdcall;
    function GetLastPage(var phpage: HPROPSHEETPAGE): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IWizardExtension}

{ interface IWebWizardExtension }
  IWebWizardExtension = interface(IWizardExtension) 
    [SID_IWebWizardExtension]
    function SetInitialURL(pszURL: LPCWSTR): HRESULT; stdcall;
    function SetErrorURL(pszErrorURL: LPCWSTR): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IWebWizardExtension}

{ interface IPublishingWizard }
const
  SHPWHF_NORECOMPRESS          = $00000001; // don't allow/prompt for recompress of streams
  {$EXTERNALSYM SHPWHF_NORECOMPRESS}
  SHPWHF_NONETPLACECREATE      = $00000002; // don't create a network place when transfer is complete
  {$EXTERNALSYM SHPWHF_NONETPLACECREATE}
  SHPWHF_NOFILESELECTOR        = $00000004; // don't show the file selector
  {$EXTERNALSYM SHPWHF_NOFILESELECTOR}
  SHPWHF_USEMRU                = $00000008; // For OPW.  Use the Most-Recently-Used Print Provider
  {$EXTERNALSYM SHPWHF_USEMRU}
  SHPWHF_ANYLOCATION           = $00000100; // allow publishing to any location
  {$EXTERNALSYM SHPWHF_ANYLOCATION}
  SHPWHF_VALIDATEVIAWEBFOLDERS = $00010000; // enable web folders to validate network places (ANP support)
  {$EXTERNALSYM SHPWHF_VALIDATEVIAWEBFOLDERS}
type
  IPublishingWizard = interface(IWizardExtension) 
    [SID_IPublishingWizard]
    function Initialize(const pdo: IDataObject; dwOptions: DWORD; 
      pszServiceScope: LPCWSTR): HRESULT; stdcall;
    function GetTransferManifest(var phrFromTransfer: HRESULT; 
      out pdocManifest: IXMLDOMDocument): HRESULT; stdcall;
  end;

  {$EXTERNALSYM IPublishingWizard}
{ interface IFolderViewHost }
  IFolderViewHost = interface(IUnknown) 
    [SID_IFolderViewHost]
    function Initialize(hwndParent: HWND; const pdo: IDataObject; 
      var prc: TRect): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IFolderViewHost}

{ interface IExplorerBrowserEvents }
  IExplorerBrowserEvents = interface(IUnknown) 
    [SID_IExplorerBrowserEvents]
    function OnNavigationPending(pidlFolder: PItemIDList): HRESULT; stdcall;
    function OnViewCreated(const psv: IShellView): HRESULT; stdcall;
    function OnNavigationComplete(pidlFolder: PItemIDList): HRESULT; stdcall;
    function OnNavigationFailed(pidlFolder: PItemIDList): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IExplorerBrowserEvents}

{ interface IExplorerBrowser }
type
  _EXPLORER_BROWSER_OPTIONS = Integer;
  {$EXTERNALSYM _EXPLORER_BROWSER_OPTIONS}
const
  EBO_NONE               = 0; 
  {$EXTERNALSYM EBO_NONE}
  EBO_NAVIGATEONCE       = $1; 
  {$EXTERNALSYM EBO_NAVIGATEONCE}
  EBO_SHOWFRAMES         = $2; 
  {$EXTERNALSYM EBO_SHOWFRAMES}
  EBO_ALWAYSNAVIGATE     = $4; 
  {$EXTERNALSYM EBO_ALWAYSNAVIGATE}
  EBO_NOTRAVELLOG        = $8; 
  {$EXTERNALSYM EBO_NOTRAVELLOG}
  EBO_NOWRAPPERWINDOW    = $10; 
  {$EXTERNALSYM EBO_NOWRAPPERWINDOW}
  EBO_HTMLSHAREPOINTVIEW = $20; 
  {$EXTERNALSYM EBO_HTMLSHAREPOINTVIEW}
type
  EXPLORER_BROWSER_OPTIONS = DWORD; 
  {$EXTERNALSYM EXPLORER_BROWSER_OPTIONS}
  TExplorerBrowserOptions = EXPLORER_BROWSER_OPTIONS;

const
  EBF_NONE                 = 0; 
  {$EXTERNALSYM EBF_NONE}
  EBF_SELECTFROMDATAOBJECT = $100; 
  {$EXTERNALSYM EBF_SELECTFROMDATAOBJECT}
  EBF_NODROPTARGET         = $200; 
  {$EXTERNALSYM EBF_NODROPTARGET}
type
  EXPLORER_BROWSER_FILL_FLAGS = DWORD; 
  {$EXTERNALSYM EXPLORER_BROWSER_FILL_FLAGS}
  TExplorerBrowserFillFlags = EXPLORER_BROWSER_FILL_FLAGS;

type
  IExplorerBrowser = interface(IUnknown) 
    [SID_IExplorerBrowser]
    function Initialize(hwndParent: HWND; var prc: TRect; 
      var pfs: TFolderSettings): HRESULT; stdcall;
    function Destroy: HRESULT; stdcall;
    function SetRect(var phdwp: HDWP; rcBrowser: TRect): HRESULT; stdcall;
    function SetPropertyBag(pszPropertyBag: LPCWSTR): HRESULT; stdcall;
    function SetEmptyText(pszEmptyText: LPCWSTR): HRESULT; stdcall;
    function SetFolderSettings(var pfs: TFolderSettings): HRESULT; stdcall;
    function Advise(const psbe: IExplorerBrowserEvents; 
      var pdwCookie: DWORD): HRESULT; stdcall;
    function Unadvise(dwCookie: DWORD): HRESULT; stdcall;
    function SetOptions(dwFlag: TExplorerBrowserOptions): HRESULT; stdcall;
    function GetOptions(var pdwFlag: TExplorerBrowserOptions): HRESULT; stdcall;
    function BrowseToIDList(pidl: PItemIDList; uFlags: UINT): HRESULT; stdcall;
    function BrowseToObject(const punk: IUnknown; uFlags: UINT): HRESULT; stdcall;
    function FillFromObject(const punk: IUnknown; 
      dwFlags: TExplorerBrowserFillFlags): HRESULT; stdcall;
    function RemoveAll: HRESULT; stdcall;
    function GetCurrentView(const riid: TIID; out ppv): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IExplorerBrowser}

{ interface IAccessibleObject }
  IAccessibleObject = interface(IUnknown) 
    [SID_IAccessibleObject]
    function SetAccessibleName(pszName: LPCWSTR): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IAccessibleObject}

{ interface IResultsFolder }
  IResultsFolder = interface(IUnknown)
    [SID_IResultsFolder]
    function AddItem(const psi: IShellItem): HRESULT; stdcall;
    function AddIDList(pidl: PItemIDList; 
      var ppidlAdded: PItemIDList): HRESULT; stdcall;
    function RemoveItem(const psi: IShellItem): HRESULT; stdcall;
    function RemoveIDList(pidl: PItemIDList): HRESULT; stdcall;
    function RemoveAll: HRESULT; stdcall;
  end;
  {$EXTERNALSYM IResultsFolder}

{ interface IEnumObjects }
  IEnumObjects = interface(IUnknown) 
    [SID_IEnumObjects]
    function Next(celt: Cardinal; const riid: TIID; var rgelt: Pointer; 
      var pceltFetched: Cardinal): HRESULT; stdcall;
    function Skip(celt: Cardinal): HRESULT; stdcall;
    function Reset: HRESULT; stdcall;
    function Clone(out ppenum: IEnumObjects): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IEnumObjects}

{ interface IOperationsProgressDialog }
const
  OPPROGDLG_DEFAULT               = $00000000;
  {$EXTERNALSYM OPPROGDLG_DEFAULT}
  OPPROGDLG_ENABLEPAUSE           = $00000080; // Add a pause button (operation can be paused)
  {$EXTERNALSYM OPPROGDLG_ENABLEPAUSE}
  OPPROGDLG_ALLOWUNDO             = $00000100; // The operation can be undone in the dialog.  (The Stop button becomes Undo)
  {$EXTERNALSYM OPPROGDLG_ALLOWUNDO}
  OPPROGDLG_DONTDISPLAYSOURCEPATH = $00000200; // Don't display the path of source file in progress dialog
  {$EXTERNALSYM OPPROGDLG_DONTDISPLAYSOURCEPATH}
  OPPROGDLG_DONTDISPLAYDESTPATH   = $00000400; // Don't display the path of destination file in progress dialog
  {$EXTERNALSYM OPPROGDLG_DONTDISPLAYDESTPATH}
  OPPROGDLG_NOMULTIDAYESTIMATES   = $00000800; // Don't show estimates when greater than 1 day
  {$EXTERNALSYM OPPROGDLG_NOMULTIDAYESTIMATES}
  OPPROGDLG_DONTDISPLAYLOCATIONS  = $00001000; // Don't display the location line in the progress dialog
  {$EXTERNALSYM OPPROGDLG_DONTDISPLAYLOCATIONS}

type
  tagPDMODE = Integer;
  {$EXTERNALSYM tagPDMODE}
const
  PDM_DEFAULT        = $0; 
  {$EXTERNALSYM PDM_RUN}
  PDM_RUN            = $1; 
  {$EXTERNALSYM PDM_RUN}
  PDM_PREFLIGHT      = $2; 
  {$EXTERNALSYM PDM_PREFLIGHT}
  PDM_UNDOING        = $4; 
  {$EXTERNALSYM PDM_UNDOING}
  PDM_ERRORSBLOCKING = $8; 
  {$EXTERNALSYM PDM_ERRORSBLOCKING}
  PDM_INDETERMINATE  = $10; 
  {$EXTERNALSYM PDM_INDETERMINATE}
type
  PDMODE = DWORD; 
  {$EXTERNALSYM PDMODE}
  TPDMode = PDMODE;

const
  PDOPS_RUNNING   = $1; 
  {$EXTERNALSYM PDOPS_RUNNING}
  PDOPS_PAUSED    = $2; 
  {$EXTERNALSYM PDOPS_PAUSED}
  PDOPS_CANCELLED = $3; 
  {$EXTERNALSYM PDOPS_CANCELLED}
  PDOPS_STOPPED   = $4; 
  {$EXTERNALSYM PDOPS_STOPPED}
  PDOPS_ERRORS    = $5; 
  {$EXTERNALSYM PDOPS_ERRORS}

type
  IOperationsProgressDialog = interface(IUnknown) 
    [SID_IOperationsProgressDialog]
    function StartProgressDialog(hwndParent: HWND; 
      dwFlags: DWORD): HRESULT; stdcall;
    function StopProgressDialog: HRESULT; stdcall;
    function SetOperation(action: Integer): HRESULT; stdcall;
    function SetMode(mode: TPDMode): HRESULT; stdcall;
    function UpdateProgress(ullPointsCurrent: ULONGLONG; ullPointsTotal: ULONGLONG; 
      ullSizeCurrent: ULONGLONG; ullSizeTotal: ULONGLONG; 
      ullItemsCurrent: ULONGLONG; ullItemsTotal: ULONGLONG): HRESULT; stdcall;
    function UpdateLocations(
      const psiSource, psiTarget, psiItem: IShellItem): HRESULT; stdcall;
    function ResetTimer: HRESULT; stdcall;
    function PauseTimer: HRESULT; stdcall;
    function ResumeTimer: HRESULT; stdcall;
    function GetMilliseconds(var pullElapsed: ULONGLONG; 
      var pullRemaining: ULONGLONG): HRESULT; stdcall;
    function GetOperationStatus(var popstatus: Integer): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IOperationsProgressDialog}

{ interface IIOCancelInformation }
  IIOCancelInformation = interface(IUnknown) 
    [SID_IIOCancelInformation]
    function SetCancelInformation(dwThreadID: DWORD; 
      uMsgCancel: UINT): HRESULT; stdcall;
    function GetCancelInformation(var pdwThreadID: DWORD; 
      var puMsgCancel: UINT): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IIOCancelInformation}

{ interface IFileOperation }
const
  FOFX_NOSKIPJUNCTIONS        = $00010000; // Don't avoid binding to junctions (like Task folder, Recycle-Bin)
  {$EXTERNALSYM FOFX_NOSKIPJUNCTIONS}
  FOFX_PREFERHARDLINK         = $00020000; // Create hard link if possible
  {$EXTERNALSYM FOFX_PREFERHARDLINK}
  FOFX_SHOWELEVATIONPROMPT    = $00040000; // Show elevation prompts when error UI is disabled (use with FOF_NOERRORUI)
  {$EXTERNALSYM FOFX_SHOWELEVATIONPROMPT}
  FOFX_EARLYFAILURE           = $00100000; // Fail operation as soon as a single error occurs rather than trying to process other items (applies only when using FOF_NOERRORUI)
  {$EXTERNALSYM FOFX_EARLYFAILURE}
  FOFX_PRESERVEFILEEXTENSIONS = $00200000; // Rename collisions preserve file extns (use with FOF_RENAMEONCOLLISION)
  {$EXTERNALSYM FOFX_PRESERVEFILEEXTENSIONS}
  FOFX_KEEPNEWERFILE          = $00400000; // Keep newer file on naming conflicts
  {$EXTERNALSYM FOFX_KEEPNEWERFILE}
  FOFX_NOCOPYHOOKS            = $00800000; // Don't use copy hooks
  {$EXTERNALSYM FOFX_NOCOPYHOOKS}
  FOFX_NOMINIMIZEBOX          = $01000000; // Don't allow minimizing the progress dialog
  {$EXTERNALSYM FOFX_NOMINIMIZEBOX}
  FOFX_MOVEACLSACROSSVOLUMES  = $02000000; // Copy security information when performing a cross-volume move operation
  {$EXTERNALSYM FOFX_MOVEACLSACROSSVOLUMES}
  FOFX_DONTDISPLAYSOURCEPATH  = $04000000; // Don't display the path of source file in progress dialog
  {$EXTERNALSYM FOFX_DONTDISPLAYSOURCEPATH}
  FOFX_DONTDISPLAYDESTPATH    = $08000000; // Don't display the path of destination file in progress dialog
  {$EXTERNALSYM FOFX_DONTDISPLAYDESTPATH}
  FOFX_REQUIREELEVATION       = $10000000; // User expects the elevation; don't show a dialog to confirm
  {$EXTERNALSYM FOFX_REQUIREELEVATION}
  FOFX_COPYASDOWNLOAD         = $40000000; // Show Downloading instead of Copying
  {$EXTERNALSYM FOFX_COPYASDOWNLOAD}
  FOFX_DONTDISPLAYLOCATIONS   = $80000000; // Hides the locations line in the progress dialog
  {$EXTERNALSYM FOFX_DONTDISPLAYLOCATIONS}

type
  IFileOperation = interface(IUnknown)
    [SID_IFileOperation]
    function Advise(const pfops: IFileOperationProgressSink;
      var pdwCookie: DWORD): HRESULT; stdcall;
    function Unadvise(dwCookie: DWORD): HRESULT; stdcall;
    function SetOperationFlags(dwOperationFlags: DWORD): HRESULT; stdcall;
    function SetProgressMessage(pszMessage: LPCWSTR): HRESULT; stdcall;
    function SetProgressDialog(
      const popd: IOperationsProgressDialog): HRESULT; stdcall;
    function SetProperties(const pproparray: IPropertyChangeArray): HRESULT; stdcall;
    function SetOwnerWindow(hwndParent: HWND): HRESULT; stdcall;
    function ApplyPropertiesToItem(const psiItem: IShellItem): HRESULT; stdcall;
    function ApplyPropertiesToItems(const punkItems: IUnknown): HRESULT; stdcall;
    function RenameItem(const psiItem: IShellItem; pszNewName: LPCWSTR; 
      const pfopsItem: IFileOperationProgressSink): HRESULT; stdcall;
    function RenameItems(const pUnkItems: IUnknown; 
      pszNewName: LPCWSTR): HRESULT; stdcall;
    function MoveItem(const psiItem: IShellItem; const psiDestinationFolder: IShellItem; 
      pszNewName: LPCWSTR; 
      const pfopsItem: IFileOperationProgressSink): HRESULT; stdcall;
    function MoveItems(const punkItems: IUnknown; 
      const psiDestinationFolder: IShellItem): HRESULT; stdcall;
    function CopyItem(const psiItem: IShellItem; const psiDestinationFolder: IShellItem; 
      pszCopyName: LPCWSTR; 
      const pfopsItem: IFileOperationProgressSink): HRESULT; stdcall;
    function CopyItems(const punkItems: IUnknown; 
      const psiDestinationFolder: IShellItem): HRESULT; stdcall;
    function DeleteItem(const psiItem: IShellItem;
      const pfopsItem: IFileOperationProgressSink): HRESULT; stdcall;
    function DeleteItems(const punkItems: IUnknown): HRESULT; stdcall;
    function NewItem(const psiDestinationFolder: IShellItem; dwFileAttributes: DWORD; 
      pszName: LPCWSTR; pszTemplateName: LPCWSTR; 
      const pfopsItem: IFileOperationProgressSink): HRESULT; stdcall;
    function PerformOperations: HRESULT; stdcall;
    function GetAnyOperationsAborted(
      var pfAnyOperationsAborted: BOOL): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IFileOperation}

function SHCreateDefaultPropertiesOp(const psi: IShellItem;
  out ppFileOp: IFileOperation): HResult; stdcall;
{$EXTERNALSYM SHCreateDefaultPropertiesOp}

type
{ interface IObjectProvider }
  IObjectProvider = interface(IUnknown) 
    [SID_IObjectProvider]
    function QueryObject(const guidObject: TGuid; const riid: TIID; 
      out ppvOut): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IObjectProvider}

{ interface INamespaceWalkCB }
  INamespaceWalkCB = interface(IUnknown) 
    [SID_INamespaceWalkCB]
    function FoundItem(const psf: IShellFolder; pidl: PItemIDList): HRESULT; stdcall;
    function EnterFolder(const psf: IShellFolder; 
      pidl: PItemIDList): HRESULT; stdcall;
    function LeaveFolder(const psf: IShellFolder; 
      pidl: PItemIDList): HRESULT; stdcall;
    function InitializeProgressDialog(var ppszTitle: LPWSTR; 
      var ppszCancel: LPWSTR): HRESULT; stdcall;
  end;
  {$EXTERNALSYM INamespaceWalkCB}

{ interface INamespaceWalkCB2 }
  INamespaceWalkCB2 = interface(INamespaceWalkCB) 
    [SID_INamespaceWalkCB2]
    function WalkComplete(hr: HRESULT): HRESULT; stdcall;
  end;
  {$EXTERNALSYM INamespaceWalkCB2}

{ interface INamespaceWalk }
const
  NSWF_DEFAULT                        = 0; 
  {$EXTERNALSYM NSWF_DEFAULT}
  NSWF_NONE_IMPLIES_ALL               = $1; 
  {$EXTERNALSYM NSWF_NONE_IMPLIES_ALL}
  NSWF_ONE_IMPLIES_ALL                = $2; 
  {$EXTERNALSYM NSWF_ONE_IMPLIES_ALL}
  NSWF_DONT_TRAVERSE_LINKS            = $4; 
  {$EXTERNALSYM NSWF_DONT_TRAVERSE_LINKS}
  NSWF_DONT_ACCUMULATE_RESULT         = $8; 
  {$EXTERNALSYM NSWF_DONT_ACCUMULATE_RESULT}
  NSWF_TRAVERSE_STREAM_JUNCTIONS      = $10; 
  {$EXTERNALSYM NSWF_TRAVERSE_STREAM_JUNCTIONS}
  NSWF_FILESYSTEM_ONLY                = $20; 
  {$EXTERNALSYM NSWF_FILESYSTEM_ONLY}
  NSWF_SHOW_PROGRESS                  = $40; 
  {$EXTERNALSYM NSWF_SHOW_PROGRESS}
  NSWF_FLAG_VIEWORDER                 = $80; 
  {$EXTERNALSYM NSWF_FLAG_VIEWORDER}
  NSWF_IGNORE_AUTOPLAY_HIDA           = $100; 
  {$EXTERNALSYM NSWF_IGNORE_AUTOPLAY_HIDA}
  NSWF_ASYNC                          = $200; 
  {$EXTERNALSYM NSWF_ASYNC}
  NSWF_DONT_RESOLVE_LINKS             = $400; 
  {$EXTERNALSYM NSWF_DONT_RESOLVE_LINKS}
  NSWF_ACCUMULATE_FOLDERS             = $800; 
  {$EXTERNALSYM NSWF_ACCUMULATE_FOLDERS}
  NSWF_DONT_SORT                      = $1000; 
  {$EXTERNALSYM NSWF_DONT_SORT}
  NSWF_USE_TRANSFER_MEDIUM            = $2000; 
  {$EXTERNALSYM NSWF_USE_TRANSFER_MEDIUM}
  NSWF_DONT_TRAVERSE_STREAM_JUNCTIONS = $4000; 
  {$EXTERNALSYM NSWF_DONT_TRAVERSE_STREAM_JUNCTIONS}

type
  INamespaceWalk = interface(IUnknown) 
    [SID_INamespaceWalk]
    function Walk(const punkToWalk: IUnknown; dwFlags: DWORD; cDepth: Integer; 
      const pnswcb: INamespaceWalkCB): HRESULT; stdcall;
    function GetIDArrayResult(var pcItems: UINT; 
      var prgpidl: PItemIDList): HRESULT; stdcall;                                
  end;
  {$EXTERNALSYM INamespaceWalk}

  procedure FreeIDListArray(var ppidls: PIDLIST_RELATIVE; cItems: UINT); inline;
  {$EXTERNALSYM FreeIDListArray}
  procedure FreeIDListArrayFull(var ppidls: PItemIDList; cItems: UINT); inline;
  {$EXTERNALSYM FreeIDListArrayFull}
  procedure FreeIDListArrayChild(var ppidls: PItemIDList; cItems: UINT); inline;
  {$EXTERNALSYM FreeIDListArrayChild}

{ interface IAutoCompleteDropDown }
const
  ACDD_VISIBLE = $0001; 
  {$EXTERNALSYM ACDD_VISIBLE}

type
  IAutoCompleteDropDown = interface(IUnknown) 
    [SID_IAutoCompleteDropDown]
    function GetDropDownStatus(var pdwFlags: DWORD; 
      var ppwszString: LPWSTR): HRESULT; stdcall;
    function ResetEnumerator: HRESULT; stdcall;
  end;
  {$EXTERNALSYM IAutoCompleteDropDown}

{ interface IBandSite }
type
  tagBANDSITEINFO = record 
    dwMask: DWORD;
    dwState: DWORD;
    dwStyle: DWORD;
  end;
  {$EXTERNALSYM tagBANDSITEINFO}
  BANDSITEINFO = tagBANDSITEINFO;
  {$EXTERNALSYM BANDSITEINFO}
  TBandSiteInfo = BANDSITEINFO;
  PBandSiteInfo = ^TBandSiteInfo;

const
  BSID_BANDADDED                 = 0;
  {$EXTERNALSYM BSID_BANDADDED}
  BSID_BANDREMOVED               = BSID_BANDADDED + 1;
  {$EXTERNALSYM BSID_BANDREMOVED}
  BSIM_STATE                     = $00000001;
  {$EXTERNALSYM BSIM_STATE}
  BSIM_STYLE                     = $00000002;
  {$EXTERNALSYM BSIM_STYLE}
  BSSF_VISIBLE                   = $00000001;
  {$EXTERNALSYM BSSF_VISIBLE}
  BSSF_NOTITLE                   = $00000002;
  {$EXTERNALSYM BSSF_NOTITLE}
  BSSF_UNDELETEABLE              = $00001000;
  {$EXTERNALSYM BSSF_UNDELETEABLE}
  BSIS_AUTOGRIPPER               = $00000000;
  {$EXTERNALSYM BSIS_AUTOGRIPPER}
  BSIS_NOGRIPPER                 = $00000001;
  {$EXTERNALSYM BSIS_NOGRIPPER}
  BSIS_ALWAYSGRIPPER             = $00000002;
  {$EXTERNALSYM BSIS_ALWAYSGRIPPER}
  BSIS_LEFTALIGN                 = $00000004;
  {$EXTERNALSYM BSIS_LEFTALIGN}
  BSIS_SINGLECLICK               = $00000008;
  {$EXTERNALSYM BSIS_SINGLECLICK}
  BSIS_NOCONTEXTMENU             = $00000010;
  {$EXTERNALSYM BSIS_NOCONTEXTMENU}
  BSIS_NODROPTARGET              = $00000020;
  {$EXTERNALSYM BSIS_NODROPTARGET}
  BSIS_NOCAPTION                 = $00000040;
  {$EXTERNALSYM BSIS_NOCAPTION}
  BSIS_PREFERNOLINEBREAK         = $00000080;
  {$EXTERNALSYM BSIS_PREFERNOLINEBREAK}
  BSIS_LOCKED                    = $00000100;
  {$EXTERNALSYM BSIS_LOCKED}
  BSIS_PRESERVEORDERDURINGLAYOUT = $00000200;
  {$EXTERNALSYM BSIS_PRESERVEORDERDURINGLAYOUT}
  BSIS_FIXEDORDER                = $00000400;
  {$EXTERNALSYM BSIS_FIXEDORDER}

type
  IBandSite = interface(IUnknown) 
    [SID_IBandSite]
    function AddBand(const punk: IUnknown): HRESULT; stdcall;
    function EnumBands(uBand: UINT; var pdwBandID: DWORD): HRESULT; stdcall;
    function QueryBand(dwBandID: DWORD; out ppstb: IDeskBand; var pdwState: DWORD; 
      pszName: LPWSTR; cchName: Integer): HRESULT; stdcall;
    function SetBandState(dwBandID: DWORD; dwMask: DWORD; 
      dwState: DWORD): HRESULT; stdcall;
    function RemoveBand(dwBandID: DWORD): HRESULT; stdcall;
    function GetBandObject(dwBandID: DWORD; const riid: TIID; 
      out ppv): HRESULT; stdcall;
    function SetBandSiteInfo(var pbsinfo: TBandSiteInfo): HRESULT; stdcall;
    function GetBandSiteInfo(var pbsinfo: TBandSiteInfo): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IBandSite}

{ interface IModalWindow }
  IModalWindow = interface(IUnknown) 
    [SID_IModalWindow]
    function Show(hwndParent: HWND): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IModalWindow}

{ interface ICDBurnExt }
const
  PROPSTR_EXTENSIONCOMPLETIONSTATE = 'ExtensionCompletionState'; 
  {$EXTERNALSYM PROPSTR_EXTENSIONCOMPLETIONSTATE}

  CDBE_RET_DEFAULT          = 0; 
  {$EXTERNALSYM CDBE_RET_DEFAULT}
  CDBE_RET_DONTRUNOTHEREXTS = $1; 
  {$EXTERNALSYM CDBE_RET_DONTRUNOTHEREXTS}
  CDBE_RET_STOPWIZARD       = $2; 
  {$EXTERNALSYM CDBE_RET_STOPWIZARD}

  CDBE_TYPE_MUSIC = $1; 
  {$EXTERNALSYM CDBE_TYPE_MUSIC}
  CDBE_TYPE_DATA  = $2; 
  {$EXTERNALSYM CDBE_TYPE_DATA}
  CDBE_TYPE_ALL   = $FFFFFFFF; 
  {$EXTERNALSYM CDBE_TYPE_ALL}
type
  CDBE_ACTIONS = DWORD; 
  {$EXTERNALSYM CDBE_ACTIONS}
  TCDBEActions = CDBE_ACTIONS;

type
  ICDBurnExt = interface(IUnknown) 
    [SID_ICDBurnExt]
    function GetSupportedActionTypes(
      var pdwActions: TCDBEActions): HRESULT; stdcall;
  end;
  {$EXTERNALSYM ICDBurnExt}

{ interface IContextMenuSite }
  IContextMenuSite = interface(IUnknown) 
    [SID_IContextMenuSite]
    function DoContextMenuPopup(const punkContextMenu: IUnknown; fFlags: UINT; 
      pt: TPoint): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IContextMenuSite}

{ interface IEnumReadyCallback }
  IEnumReadyCallback = interface(IUnknown) 
    [SID_IEnumReadyCallback]
    function EnumReady: HRESULT; stdcall;
  end;
  {$EXTERNALSYM IEnumReadyCallback}

{ interface IEnumerableView }
  IEnumerableView = interface(IUnknown) 
    [SID_IEnumerableView]
    function SetEnumReadyCallback(const percb: IEnumReadyCallback): HRESULT; stdcall;
    function CreateEnumIDListFromContents(pidlFolder: PItemIDList; 
      dwEnumFlags: DWORD; out ppEnumIDList: IEnumIDList): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IEnumerableView}

{ interface IInsertItem }
  IInsertItem = interface(IUnknown) 
    [SID_IInsertItem]
    function InsertItem(pidl: PItemIDList): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInsertItem}

{ interface IMenuBand }
const
  MBHANDCID_PIDLSELECT = 0;
type
  IMenuBand = interface(IUnknown) 
    [SID_IMenuBand]
    function IsMenuMessage(var pmsg: TMsg): HRESULT; stdcall;
    function TranslateMenuMessage(var pmsg: TMsg; 
      var plRet: LRESULT): HRESULT; stdcall;                      
  end;
  {$EXTERNALSYM IMenuBand}

{ interface IFolderBandPriv }
  IFolderBandPriv = interface(IUnknown) 
    [SID_IFolderBandPriv]
    function SetCascade(fCascade: BOOL): HRESULT; stdcall;
    function SetAccelerators(fAccelerators: BOOL): HRESULT; stdcall;
    function SetNoIcons(fNoIcons: BOOL): HRESULT; stdcall;
    function SetNoText(fNoText: BOOL): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IFolderBandPriv}

{ interface IRegTreeItem }
  IRegTreeItem = interface(IUnknown) 
    [SID_IRegTreeItem]
    function GetCheckState(var pbCheck: BOOL): HRESULT; stdcall;
    function SetCheckState(bCheck: BOOL): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IRegTreeItem}

{ interface IImageRecompress }
  IImageRecompress = interface(IUnknown) 
    [SID_IImageRecompress]
    function RecompressImage(const psi: IShellItem; cx: Integer; cy: Integer; 
      iQuality: Integer; const pstg: IStorage; 
      out ppstrmOut: IStream): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IImageRecompress}

{ interface IDeskBar }
  IDeskBar = interface(IOleWindow) 
    [SID_IDeskBar]
    function SetClient(const punkClient: IUnknown): HRESULT; stdcall;
    function GetClient(out ppunkClient: IUnknown): HRESULT; stdcall;
    function OnPosRectChangeDB(var prc: TRect): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IDeskBar}

{ interface IMenuPopup }
const
  MPOS_EXECUTE       = 0; 
  {$EXTERNALSYM MPOS_EXECUTE}
  MPOS_FULLCANCEL    = MPOS_EXECUTE + 1; 
  {$EXTERNALSYM MPOS_FULLCANCEL}
  MPOS_CANCELLEVEL   = MPOS_FULLCANCEL + 1; 
  {$EXTERNALSYM MPOS_CANCELLEVEL}
  MPOS_SELECTLEFT    = MPOS_CANCELLEVEL + 1; 
  {$EXTERNALSYM MPOS_SELECTLEFT}
  MPOS_SELECTRIGHT   = MPOS_SELECTLEFT + 1; 
  {$EXTERNALSYM MPOS_SELECTRIGHT}
  MPOS_CHILDTRACKING = MPOS_SELECTRIGHT + 1; 
  {$EXTERNALSYM MPOS_CHILDTRACKING}

  MPPF_SETFOCUS      = $1; 
  {$EXTERNALSYM MPPF_SETFOCUS}
  MPPF_INITIALSELECT = $2; 
  {$EXTERNALSYM MPPF_INITIALSELECT}
  MPPF_NOANIMATE     = $4; 
  {$EXTERNALSYM MPPF_NOANIMATE}
  MPPF_KEYBOARD      = $10; 
  {$EXTERNALSYM MPPF_KEYBOARD}
  MPPF_REPOSITION    = $20; 
  {$EXTERNALSYM MPPF_REPOSITION}
  MPPF_FORCEZORDER   = $40; 
  {$EXTERNALSYM MPPF_FORCEZORDER}
  MPPF_FINALSELECT   = $80; 
  {$EXTERNALSYM MPPF_FINALSELECT}
  MPPF_TOP           = $20000000; 
  {$EXTERNALSYM MPPF_TOP}
  MPPF_LEFT          = $40000000; 
  {$EXTERNALSYM MPPF_LEFT}
  MPPF_RIGHT         = $60000000; 
  {$EXTERNALSYM MPPF_RIGHT}
  MPPF_BOTTOM        = $80000000; 
  {$EXTERNALSYM MPPF_BOTTOM}
  MPPF_POS_MASK      = $E0000000; 
  {$EXTERNALSYM MPPF_POS_MASK}
  MPPF_ALIGN_LEFT    = $2000000; 
  {$EXTERNALSYM MPPF_ALIGN_LEFT}
  MPPF_ALIGN_RIGHT   = $4000000; 
  {$EXTERNALSYM MPPF_ALIGN_RIGHT}
type
  MP_POPUPFLAGS = Integer; 
  {$EXTERNALSYM MP_POPUPFLAGS}
  TMPPopupFlags = MP_POPUPFLAGS;

type
  IMenuPopup = interface(IDeskBar) 
    [SID_IMenuPopup]
    // RECTL and RECT contain the same fields,
    // always used TRect instead of TRectl (for ex. PSPropertyBag_ReadRECTL in PropSys)
    function Popup(var ppt: TPointL; var prcExclude: TRect;                
      dwFlags: TMPPopupFlags): HRESULT; stdcall;
    function OnSelect(dwSelectType: DWORD): HRESULT; stdcall;
    function SetSubMenu(const pmp: IMenuPopup; fSet: BOOL): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IMenuPopup}

{ interface IFileIsInUse }
const
  FUT_PLAYING = 0; 
  {$EXTERNALSYM FUT_PLAYING}
  FUT_EDITING = FUT_PLAYING + 1; 
  {$EXTERNALSYM FUT_EDITING}
  FUT_GENERIC = FUT_EDITING + 1; 
  {$EXTERNALSYM FUT_GENERIC}

  OF_CAP_CANSWITCHTO = $0001; 
  {$EXTERNALSYM OF_CAP_CANSWITCHTO}
  OF_CAP_CANCLOSE = $0002; 
  {$EXTERNALSYM OF_CAP_CANCLOSE}

type
  IFileIsInUse = interface(IUnknown) 
    [SID_IFileIsInUse]
    function GetAppName(var ppszName: LPWSTR): HRESULT; stdcall;
    function GetUsage(var pfut: Integer): HRESULT; stdcall;
    function GetCapabilities(var pdwCapFlags: DWORD): HRESULT; stdcall;
    function GetSwitchToHWND(var phwnd: HWND): HRESULT; stdcall;
    function CloseFile: HRESULT; stdcall;
  end;
  {$EXTERNALSYM IFileIsInUse}

{ interface IFileDialogEvents }
const
  FDEOR_DEFAULT = 0; 
  {$EXTERNALSYM FDEOR_DEFAULT}
  FDEOR_ACCEPT  = 1; 
  {$EXTERNALSYM FDEOR_ACCEPT}
  FDEOR_REFUSE  = 2; 
  {$EXTERNALSYM FDEOR_REFUSE}

  FDESVR_DEFAULT = 0; 
  {$EXTERNALSYM FDESVR_DEFAULT}
  FDESVR_ACCEPT  = 1; 
  {$EXTERNALSYM FDESVR_ACCEPT}
  FDESVR_REFUSE  = 2; 
  {$EXTERNALSYM FDESVR_REFUSE}

  FDAP_BOTTOM = 0; 
  {$EXTERNALSYM FDAP_BOTTOM}
  FDAP_TOP    = 1; 
  {$EXTERNALSYM FDAP_TOP}

const
  FOS_OVERWRITEPROMPT    = $2;
  {$EXTERNALSYM FOS_OVERWRITEPROMPT}
  FOS_STRICTFILETYPES    = $4;
  {$EXTERNALSYM FOS_STRICTFILETYPES}
  FOS_NOCHANGEDIR        = $8;
  {$EXTERNALSYM FOS_NOCHANGEDIR}
  FOS_PICKFOLDERS        = $20;
  {$EXTERNALSYM FOS_PICKFOLDERS}
  FOS_FORCEFILESYSTEM    = $40;
  {$EXTERNALSYM FOS_FORCEFILESYSTEM}
  FOS_ALLNONSTORAGEITEMS = $80;
  {$EXTERNALSYM FOS_ALLNONSTORAGEITEMS}
  FOS_NOVALIDATE         = $100;
  {$EXTERNALSYM FOS_NOVALIDATE}
  FOS_ALLOWMULTISELECT   = $200;
  {$EXTERNALSYM FOS_ALLOWMULTISELECT}
  FOS_PATHMUSTEXIST      = $800;
  {$EXTERNALSYM FOS_PATHMUSTEXIST}
  FOS_FILEMUSTEXIST      = $1000;
  {$EXTERNALSYM FOS_FILEMUSTEXIST}
  FOS_CREATEPROMPT       = $2000;
  {$EXTERNALSYM FOS_CREATEPROMPT}
  FOS_SHAREAWARE         = $4000;
  {$EXTERNALSYM FOS_SHAREAWARE}
  FOS_NOREADONLYRETURN   = $8000;
  {$EXTERNALSYM FOS_NOREADONLYRETURN}
  FOS_NOTESTFILECREATE   = $10000;
  {$EXTERNALSYM FOS_NOTESTFILECREATE}
  FOS_HIDEMRUPLACES      = $20000;
  {$EXTERNALSYM FOS_HIDEMRUPLACES}
  FOS_HIDEPINNEDPLACES   = $40000;
  {$EXTERNALSYM FOS_HIDEPINNEDPLACES}
  FOS_NODEREFERENCELINKS = $100000;
  {$EXTERNALSYM FOS_NODEREFERENCELINKS}
  FOS_DONTADDTORECENT    = $2000000;
  {$EXTERNALSYM FOS_DONTADDTORECENT}
  FOS_FORCESHOWHIDDEN    = $10000000;
  {$EXTERNALSYM FOS_FORCESHOWHIDDEN}
  FOS_DEFAULTNOMINIMODE  = $20000000;
  {$EXTERNALSYM FOS_DEFAULTNOMINIMODE}
  FOS_FORCEPREVIEWPANEON = $40000000;
  {$EXTERNALSYM FOS_FORCEPREVIEWPANEON}
type
  IFileDialog = interface;
  IFileDialogEvents = interface(IUnknown)
    [SID_IFileDialogEvents]
    function OnFileOk(const pfd: IFileDialog): HResult; stdcall;
    function OnFolderChanging(const pfd: IFileDialog;
      const psiFolder: IShellItem): HResult; stdcall;
    function OnFolderChange(const pfd: IFileDialog): HResult; stdcall;
    function OnSelectionChange(const pfd: IFileDialog): HResult; stdcall;
    function OnShareViolation(const pfd: IFileDialog; const psi: IShellItem;
      out pResponse: DWORD): HResult; stdcall;
    function OnTypeChange(const pfd: IFileDialog): HResult; stdcall;
    function OnOverwrite(const pfd: IFileDialog; const psi: IShellItem;
      out pResponse: DWORD): HResult; stdcall;
  end;
  {$EXTERNALSYM IFileDialogEvents}

//NOTE: IShellItemFilter moved from original position in ShObjIdl.h
{ interface IShellItemFilter }
  IShellItemFilter = interface(IUnknown)
    [SID_IShellItemFilter]
    function IncludeItem(const psi: IShellItem): HResult; stdcall;
    function GetEnumFlagsForItem(const psi: IShellItem;
      var pgrfFlags: DWORD): HResult; stdcall;
  end;
  {$EXTERNALSYM IShellItemFilter}

{ interface IFileDialog }
  TComdlgFilterSpecArray = array of TComdlgFilterSpec;
  IFileDialog = interface(IModalWindow)
    [SID_IFileDialog]
    function SetFileTypes(cFileTypes: UINT; rgFilterSpec: TComdlgFilterSpecArray): HResult; stdcall;
    function SetFileTypeIndex(iFileType: UINT): HResult; stdcall;
    function GetFileTypeIndex(var piFileType: UINT): HResult; stdcall;
    function Advise(const pfde: IFileDialogEvents; var pdwCookie: DWORD): HResult; stdcall;
    function Unadvise(dwCookie: DWORD): HResult; stdcall;
    function SetOptions(fos: DWORD): HResult; stdcall;
    function GetOptions(var pfos: DWORD): HResult; stdcall;
    function SetDefaultFolder(const psi: IShellItem): HResult; stdcall;
    function SetFolder(const psi: IShellItem): HResult; stdcall;
    function GetFolder(var ppsi: IShellItem): HResult; stdcall;
    function GetCurrentSelection(var ppsi: IShellItem): HResult; stdcall;
    function SetFileName(pszName: LPCWSTR): HResult; stdcall;
    function GetFileName(var pszName: LPCWSTR): HResult; stdcall;
    function SetTitle(pszTitle: LPCWSTR): HResult; stdcall;
    function SetOkButtonLabel(pszText: LPCWSTR): HResult; stdcall;
    function SetFileNameLabel(pszLabel: LPCWSTR): HResult; stdcall;
    function GetResult(var ppsi: IShellItem): HResult; stdcall;
    function AddPlace(const psi: IShellItem; fdap: DWORD): HResult; stdcall;
    function SetDefaultExtension(pszDefaultExtension: LPCWSTR): HResult; stdcall;
    function Close(hr: HResult): HResult; stdcall;
    function SetClientGuid(const guid: TGUID): HResult; stdcall;
    function ClearClientData: HResult; stdcall;
    function SetFilter(const pFilter: IShellItemFilter): HResult; stdcall;
  end;
  {$EXTERNALSYM IFileDialog}

{ interface IFileSaveDialog }
  IFileSaveDialog = interface(IFileDialog)
    [SID_IFileSaveDialog]
    function SetSaveAsItem(const psiIShellItem: IShellItem): HResult; stdcall;
    function SetProperties(const pStore: IPropertyStore): HResult; stdcall;
    function SetCollectedProperties(const pList: IPropertyDescriptionList;
      fAppendDefault: BOOL): HResult; stdcall;
    function GetProperties(out ppStore: IPropertyStore): HResult; stdcall;
    function ApplyProperties(const psi: IShellItem;
      const pStore: IPropertyStore; hwnd: HWND;
      const pSink: IFileOperationProgressSink): HResult; stdcall;
  end;
  {$EXTERNALSYM IFileSaveDialog}


{ interface IFileOpenDialog }
  IFileOpenDialog = interface(IFileDialog)
    [SID_IFileOpenDialog]
    function GetResults(var ppenum: IShellItemArray): HResult; stdcall;
    function GetSelectedItems(var ppsai: IShellItemArray): HResult; stdcall;
  end;
  {$EXTERNALSYM IFileOpenDialog}

{ interface IFileDialogCustomize }
const
  CDCS_INACTIVE       = 0; 
  {$EXTERNALSYM CDCS_INACTIVE}
  CDCS_ENABLED        = $1; 
  {$EXTERNALSYM CDCS_ENABLED}
  CDCS_VISIBLE        = $2; 
  {$EXTERNALSYM CDCS_VISIBLE}
  CDCS_ENABLEDVISIBLE = $3; 
  {$EXTERNALSYM CDCS_ENABLEDVISIBLE}

type
  IFileDialogCustomize = interface(IUnknown)
    [SID_IFileDialogCustomize]
    function EnableOpenDropDown(dwIDCtl: DWORD): HResult; stdcall;
    function AddMenu(dwIDCtl: DWORD; pszLabel: LPCWSTR): HResult; stdcall;
    function AddPushButton(dwIDCtl: DWORD; pszLabel: LPCWSTR): HResult; stdcall;
    function AddComboBox(dwIDCtl: DWORD): HResult; stdcall;
    function AddRadioButtonList(dwIDCtl: DWORD): HResult; stdcall;
    function AddCheckButton(dwIDCtl: DWORD; pszLabel: LPCWSTR; bChecked: BOOL): HResult; stdcall;
    function AddEditBox(dwIDCtl: DWORD; pszText: LPCWSTR): HResult; stdcall;
    function AddSeparator(dwIDCtl: DWORD): HResult; stdcall;
    function AddText(dwIDCtl: DWORD; pszText: LPCWSTR): HResult; stdcall;
    function SetControlLabel(dwIDCtl: DWORD; pszLabel: LPCWSTR): HResult; stdcall;
    function GetControlState(dwIDCtl: DWORD; out pdwState: DWORD): HResult; stdcall;
    function SetControlState(dwIDCtl: DWORD; dwState: DWORD): HResult; stdcall;
    function GetEditBoxText(dwIDCtl: DWORD; out ppszText: LPCWSTR): HResult; stdcall;
    function SetEditBoxText(dwIDCtl: DWORD; pszText: LPCWSTR): HResult; stdcall;
    function GetCheckButtonState(dwIDCtl: DWORD; out pbChecked: BOOL): HResult; stdcall;
    function SetCheckButtonState(dwIDCtl: DWORD; bChecked: BOOL): HResult; stdcall;
    function AddControlItem(dwIDCtl: DWORD; dwIDItem: DWORD; pszLabel: LPCWSTR): HResult; stdcall;
    function RemoveControlItem(dwIDCtl: DWORD; dwIDItem: DWORD): HResult; stdcall;
    function RemoveAllControlItems(dwIDCtl: DWORD): HResult; stdcall;
    function GetControlItemState(dwIDCtl: DWORD; dwIDItem: DWORD; out pdwState: DWORD): HResult; stdcall;
    function SetControlItemState(dwIDCtl: DWORD; dwIDItem: DWORD; dwState: DWORD): HResult; stdcall;
    function GetSelectedControlItem(dwIDCtl: DWORD; out pdwIDItem: DWORD): HResult; stdcall;
    function SetSelectedControlItem(dwIDCtl: DWORD; dwIDItem: DWORD): HResult; stdcall;
    function StartVisualGroup(dwIDCtl: DWORD; pszLabel: LPCWSTR): HResult; stdcall;
    function EndVisualGroup: HResult; stdcall;
    function MakeProminent(dwIDCtl: DWORD): HResult; stdcall;
    function SetControlItemText(dwIDCtl: DWORD; dwIDItem: DWORD; pszLabel: LPCWSTR): HResult; stdcall;
  end;
  {$EXTERNALSYM IFileDialogCustomize}

{ interface IFileDialogControlEvents }
  IFileDialogControlEvents = interface(IUnknown)
    [SID_IFileDialogControlEvents]
    function OnItemSelected(const pfdc: IFileDialogCustomize; dwIDCtl: DWORD;
      dwIDItem: DWORD): HResult; stdcall;
    function OnButtonClicked(const pfdc: IFileDialogCustomize;
      dwIDCtl: DWORD): HResult; stdcall;
    function OnCheckButtonToggled(const pfdc: IFileDialogCustomize;
      dwIDCtl: DWORD; bChecked: BOOL): HResult; stdcall;
    function OnControlActivating(const pfdc: IFileDialogCustomize;
      dwIDCtl: DWORD): HResult; stdcall;
  end;
  {$EXTERNALSYM IFileDialogControlEvents}

{ interface IFileDialog2 }
  IFileDialog2 = interface(IFileDialog) 
    [SID_IFileDialog2]
    function SetCancelButtonLabel(pszLabel: LPCWSTR): HRESULT; stdcall;
    function SetNavigationRoot(const psi: IShellItem): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IFileDialog2}

{ interface IApplicationAssociationRegistration }
const
  AL_MACHINE   = 0; 
  {$EXTERNALSYM AL_MACHINE}
  AL_EFFECTIVE = AL_MACHINE + 1; 
  {$EXTERNALSYM AL_EFFECTIVE}
  AL_USER      = AL_EFFECTIVE + 1; 
  {$EXTERNALSYM AL_USER}

  AT_FILEEXTENSION   = 0; 
  {$EXTERNALSYM AT_FILEEXTENSION}
  AT_URLPROTOCOL     = AT_FILEEXTENSION + 1; 
  {$EXTERNALSYM AT_URLPROTOCOL}
  AT_STARTMENUCLIENT = AT_URLPROTOCOL + 1; 
  {$EXTERNALSYM AT_STARTMENUCLIENT}
  AT_MIMETYPE        = AT_STARTMENUCLIENT + 1; 
  {$EXTERNALSYM AT_MIMETYPE}

type
  IApplicationAssociationRegistration = interface(IUnknown) 
    [SID_IApplicationAssociationRegistration]
    function QueryCurrentDefault(pszQuery: LPCWSTR; atQueryType: Integer; 
      alQueryLevel: Integer; 
      var ppszAssociation: LPWSTR): HRESULT; stdcall;
    function QueryAppIsDefault(pszQuery: LPCWSTR; atQueryType: Integer; 
      alQueryLevel: Integer; pszAppRegistryName: LPCWSTR; 
      var pfDefault: BOOL): HRESULT; stdcall;
    function QueryAppIsDefaultAll(alQueryLevel: Integer; 
      pszAppRegistryName: LPCWSTR; var pfDefault: BOOL): HRESULT; stdcall;
    function SetAppAsDefault(pszAppRegistryName: LPCWSTR; pszSet: LPCWSTR; 
      atSetType: Integer): HRESULT; stdcall;
    function SetAppAsDefaultAll(pszAppRegistryName: LPCWSTR): HRESULT; stdcall;
    function ClearUserAssociations: HRESULT; stdcall;
  end;
  {$EXTERNALSYM IApplicationAssociationRegistration}

function SHCreateAssociationRegistration(const riid: TIID;
  out ppv): HResult; stdcall;
{$EXTERNALSYM SHCreateAssociationRegistration}

{ interface IApplicationAssociationRegistrationUI }
type
  IApplicationAssociationRegistrationUI = interface(IUnknown) 
    [SID_IApplicationAssociationRegistrationUI]
    function LaunchAdvancedAssociationUI(
      pszAppRegistryName: LPCWSTR): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IApplicationAssociationRegistrationUI}

{$ALIGN 1}
{ interface IDelegateFolder }
  DELEGATEITEMID = record
    cbSize: Word;
    wOuter: Word;
    cbInner: Word;
    rgb: packed array[0..0] of Byte;
  end;
  {$EXTERNALSYM DELEGATEITEMID}
  tagDELEGATEITEMID = DELEGATEITEMID;
  {$EXTERNALSYM tagDELEGATEITEMID}
  TDelegateItemID = DELEGATEITEMID;
  PDelegateITemID = ^TDelegateItemID;
  {$EXTERNALSYM PDELEGATEITEMID}
{$ALIGN ON}

  IDelegateFolder = interface(IUnknown) 
    [SID_IDelegateFolder]
    function SetItemAlloc(const pmalloc: IMalloc): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IDelegateFolder}

// INTERFACE: IBrowserFrameOptions
// 
// This interface was implemented so a browser or host can ask a ShellView/ShelNameSpace what
// kind of 'Behavior' is appropriate for that view.
// 
//    IBrowserFrameOptions::GetBrowserOptions()
//       dwMask is the logical OR of bits to look for.  pdwOptions is not optional and
//       it's return value will always equal or will be a subset of dwMask.
//       If the function succeeds, the return value must be S_OK and pdwOptions needs to be filled in.
//       If the function fails, pdwOptions needs to be filled in with BFO_NONE.
// 
const
  BFO_NONE                             = 0;
  {$EXTERNALSYM BFO_NONE}
  BFO_BROWSER_PERSIST_SETTINGS         = $1; 
  {$EXTERNALSYM BFO_BROWSER_PERSIST_SETTINGS}
  BFO_RENAME_FOLDER_OPTIONS_TOINTERNET = $2; 
  {$EXTERNALSYM BFO_RENAME_FOLDER_OPTIONS_TOINTERNET}
  BFO_BOTH_OPTIONS                     = $4; 
  {$EXTERNALSYM BFO_BOTH_OPTIONS}
  BIF_PREFER_INTERNET_SHORTCUT         = $8; 
  {$EXTERNALSYM BIF_PREFER_INTERNET_SHORTCUT}
  BFO_BROWSE_NO_IN_NEW_PROCESS         = $10; 
  {$EXTERNALSYM BFO_BROWSE_NO_IN_NEW_PROCESS}
  BFO_ENABLE_HYPERLINK_TRACKING        = $20; 
  {$EXTERNALSYM BFO_ENABLE_HYPERLINK_TRACKING}
  BFO_USE_IE_OFFLINE_SUPPORT           = $40; 
  {$EXTERNALSYM BFO_USE_IE_OFFLINE_SUPPORT}
  BFO_SUBSTITUE_INTERNET_START_PAGE    = $80; 
  {$EXTERNALSYM BFO_SUBSTITUE_INTERNET_START_PAGE}
  BFO_USE_IE_LOGOBANDING               = $100; 
  {$EXTERNALSYM BFO_USE_IE_LOGOBANDING}
  BFO_ADD_IE_TOCAPTIONBAR              = $200; 
  {$EXTERNALSYM BFO_ADD_IE_TOCAPTIONBAR}
  BFO_USE_DIALUP_REF                   = $400; 
  {$EXTERNALSYM BFO_USE_DIALUP_REF}
  BFO_USE_IE_TOOLBAR                   = $800; 
  {$EXTERNALSYM BFO_USE_IE_TOOLBAR}
  BFO_NO_PARENT_FOLDER_SUPPORT         = $1000; 
  {$EXTERNALSYM BFO_NO_PARENT_FOLDER_SUPPORT}
  BFO_NO_REOPEN_NEXT_RESTART           = $2000; 
  {$EXTERNALSYM BFO_NO_REOPEN_NEXT_RESTART}
  BFO_GO_HOME_PAGE                     = $4000; 
  {$EXTERNALSYM BFO_GO_HOME_PAGE}
  BFO_PREFER_IEPROCESS                 = $8000; 
  {$EXTERNALSYM BFO_PREFER_IEPROCESS}
  BFO_SHOW_NAVIGATION_CANCELLED        = $10000; 
  {$EXTERNALSYM BFO_SHOW_NAVIGATION_CANCELLED}
  BFO_USE_IE_STATUSBAR                 = $20000; 
  {$EXTERNALSYM BFO_USE_IE_STATUSBAR}
  BFO_QUERY_ALL                        = $FFFFFFFF; 
  {$EXTERNALSYM BFO_QUERY_ALL}
type
  BROWSERFRAMEOPTIONS = DWORD; 
  {$EXTERNALSYM BROWSERFRAMEOPTIONS}
  TBrowserFrameOptions = BROWSERFRAMEOPTIONS;

type
  IBrowserFrameOptions = interface(IUnknown) 
    [SID_IBrowserFrameOptions]
    function GetFrameOptions(dwMask: TBrowserFrameOptions; 
      var pdwOptions: TBrowserFrameOptions): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IBrowserFrameOptions}

{ interface INewWindowManager }
const
  NWMF_UNLOADING       = $1; 
  {$EXTERNALSYM NWMF_UNLOADING}
  NWMF_USERINITED      = $2; 
  {$EXTERNALSYM NWMF_USERINITED}
  NWMF_FIRST           = $4; 
  {$EXTERNALSYM NWMF_FIRST}
  NWMF_OVERRIDEKEY     = $8; 
  {$EXTERNALSYM NWMF_OVERRIDEKEY}
  NWMF_SHOWHELP        = $10; 
  {$EXTERNALSYM NWMF_SHOWHELP}
  NWMF_HTMLDIALOG      = $20; 
  {$EXTERNALSYM NWMF_HTMLDIALOG}
  NWMF_FROMDIALOGCHILD = $40; 
  {$EXTERNALSYM NWMF_FROMDIALOGCHILD}
  NWMF_USERREQUESTED   = $80; 
  {$EXTERNALSYM NWMF_USERREQUESTED}
  NWMF_USERALLOWED     = $100; 
  {$EXTERNALSYM NWMF_USERALLOWED}
  NWMF_FORCEWINDOW     = $10000; 
  {$EXTERNALSYM NWMF_FORCEWINDOW}
  NWMF_FORCETAB        = $20000; 
  {$EXTERNALSYM NWMF_FORCETAB}
  NWMF_SUGGESTWINDOW   = $40000; 
  {$EXTERNALSYM NWMF_SUGGESTWINDOW}
  NWMF_SUGGESTTAB      = $80000; 
  {$EXTERNALSYM NWMF_SUGGESTTAB}
  NWMF_INACTIVETAB     = $100000; 
  {$EXTERNALSYM NWMF_INACTIVETAB}

type
  INewWindowManager = interface(IUnknown) 
    [SID_INewWindowManager]
    function EvaluateNewWindow(pszUrl: LPCWSTR; pszName: LPCWSTR; 
      pszUrlContext: LPCWSTR; pszFeatures: LPCWSTR; fReplace: BOOL; dwFlags: DWORD; 
      dwUserActionTime: DWORD): HRESULT; stdcall;
  end;
  {$EXTERNALSYM INewWindowManager}

{ interface IAttachmentExecute }
const
  ATTACHMENT_PROMPT_NONE         = 0; 
  {$EXTERNALSYM ATTACHMENT_PROMPT_NONE}
  ATTACHMENT_PROMPT_SAVE         = $1; 
  {$EXTERNALSYM ATTACHMENT_PROMPT_SAVE}
  ATTACHMENT_PROMPT_EXEC         = $2; 
  {$EXTERNALSYM ATTACHMENT_PROMPT_EXEC}
  ATTACHMENT_PROMPT_EXEC_OR_SAVE = $3; 
  {$EXTERNALSYM ATTACHMENT_PROMPT_EXEC_OR_SAVE}

  ATTACHMENT_ACTION_CANCEL = 0; 
  {$EXTERNALSYM ATTACHMENT_ACTION_CANCEL}
  ATTACHMENT_ACTION_SAVE   = $1; 
  {$EXTERNALSYM ATTACHMENT_ACTION_SAVE}
  ATTACHMENT_ACTION_EXEC   = $2; 
  {$EXTERNALSYM ATTACHMENT_ACTION_EXEC}

type
  IAttachmentExecute = interface(IUnknown) 
    [SID_IAttachmentExecute]
    function SetClientTitle(pszTitle: LPCWSTR): HRESULT; stdcall;
    function SetClientGuid(const guid: TGuid): HRESULT; stdcall;
    function SetLocalPath(pszLocalPath: LPCWSTR): HRESULT; stdcall;
    function SetFileName(pszFileName: LPCWSTR): HRESULT; stdcall;
    function SetSource(pszSource: LPCWSTR): HRESULT; stdcall;
    function SetReferrer(pszReferrer: LPCWSTR): HRESULT; stdcall;
    function CheckPolicy: HRESULT; stdcall;
    function Prompt(hwnd: HWND; prompt: Integer; 
      var paction: Integer): HRESULT; stdcall;
    function Save: HRESULT; stdcall;
    function Execute(hwnd: HWND; pszVerb: LPCWSTR;
      var phProcess: THandle): HRESULT; stdcall;
    function SaveWithUI(hwnd: HWND): HRESULT; stdcall;
    function ClearClientState: HRESULT; stdcall;
  end;
  {$EXTERNALSYM IAttachmentExecute}

{ interface IShellMenuCallback }
type
  tagSMDATA = record 
    dwMask: DWORD;
    dwFlags: DWORD;
    hmenu: HMENU;
    hwnd: HWND;
    uId: UINT;
    uIdParent: UINT;
    uIdAncestor: UINT;
    punk: IUnknown;
    pidlFolder: PItemIDList;
    pidlItem: PUITEMID_CHILD;
    psf: IShellFolder;
    pvUserData: Pointer;
  end;
  {$EXTERNALSYM tagSMDATA}
  SMDATA = tagSMDATA;
  {$EXTERNALSYM SMDATA}
  TSMData = SMDATA;
  PSMData = ^TSMData;

// Mask
const
  SMDM_SHELLFOLDER = $00000001;                // This is for an item in the band
  {$EXTERNALSYM SMDM_SHELLFOLDER}
  SMDM_HMENU = $00000002;                      // This is for the Band itself
  {$EXTERNALSYM SMDM_HMENU}
  SMDM_TOOLBAR = $00000004;                    // Plain toolbar, not associated with a shell folder or hmenu
  {$EXTERNALSYM SMDM_TOOLBAR}
// Flags (bitmask)
type
  tagSMINFO = record 
    dwMask: DWORD;
    dwType: DWORD;
    dwFlags: DWORD;
    iIcon: Integer;
  end;
  {$EXTERNALSYM tagSMINFO}
  SMINFO = tagSMINFO;
  {$EXTERNALSYM SMINFO}
  TSMInfo = SMINFO;
  PSMInfo = ^TSMInfo;
  {$EXTERNALSYM PSMINFO}
  SHCSCHANGENOTIFYSTRUCT = record
    lEvent: Integer;
    pidl1: PItemIDList;
    pidl2: PItemIDList;
  end;
  {$EXTERNALSYM SHCSCHANGENOTIFYSTRUCT}
  SMCSHCHANGENOTIFYSTRUCT = SHCSCHANGENOTIFYSTRUCT;
  {$EXTERNALSYM SMCSHCHANGENOTIFYSTRUCT}
  TSMCSHChangeNotifyStruct = SMCSHCHANGENOTIFYSTRUCT;
  PSMCSHChangeNotifyStruct = ^SMCSHCHANGENOTIFYSTRUCT;

const
  SMIM_TYPE  = $1; 
  {$EXTERNALSYM SMIM_TYPE}
  SMIM_FLAGS = $2; 
  {$EXTERNALSYM SMIM_FLAGS}
  SMIM_ICON  = $4; 
  {$EXTERNALSYM SMIM_ICON}

  SMIT_SEPARATOR = $1;
  {$EXTERNALSYM SMIT_SEPARATOR}
  SMIT_STRING    = $2;
  {$EXTERNALSYM SMIT_STRING}

  SMIF_ICON                  = $1;
  {$EXTERNALSYM SMIF_ICON}
  SMIF_ACCELERATOR           = $2;
  {$EXTERNALSYM SMIF_ACCELERATOR}
  SMIF_DROPTARGET            = $4;
  {$EXTERNALSYM SMIF_DROPTARGET}
  SMIF_SUBMENU               = $8;
  {$EXTERNALSYM SMIF_SUBMENU}
  SMIF_CHECKED               = $20;
  {$EXTERNALSYM SMIF_CHECKED}
  SMIF_DROPCASCADE           = $40;
  {$EXTERNALSYM SMIF_DROPCASCADE}
  SMIF_HIDDEN                = $80;
  {$EXTERNALSYM SMIF_HIDDEN}
  SMIF_DISABLED              = $100;
  {$EXTERNALSYM SMIF_DISABLED}
  SMIF_TRACKPOPUP            = $200;
  {$EXTERNALSYM SMIF_TRACKPOPUP}
  SMIF_DEMOTED               = $400;
  {$EXTERNALSYM SMIF_DEMOTED}
  SMIF_ALTSTATE              = $800;
  {$EXTERNALSYM SMIF_ALTSTATE}
  SMIF_DRAGNDROP             = $1000;
  {$EXTERNALSYM SMIF_DRAGNDROP}
  SMIF_NEW                   = $2000;
  {$EXTERNALSYM SMIF_NEW}
  SMC_INITMENU               = $00000001; // The callback is called to init a menuband
  {$EXTERNALSYM SMC_INITMENU}
  SMC_CREATE                 = $00000002;
  {$EXTERNALSYM SMC_CREATE}
  SMC_EXITMENU               = $00000003; // The callback is called when menu is collapsing
  {$EXTERNALSYM SMC_EXITMENU}
  SMC_GETINFO                = $00000005; // The callback is called to return DWORD values
  {$EXTERNALSYM SMC_GETINFO}
  SMC_GETSFINFO              = $00000006; // The callback is called to return DWORD values
  {$EXTERNALSYM SMC_GETSFINFO}
  SMC_GETOBJECT              = $00000007; // The callback is called to get some object
  {$EXTERNALSYM SMC_GETOBJECT}
  SMC_GETSFOBJECT            = $00000008; // The callback is called to get some object
  {$EXTERNALSYM SMC_GETSFOBJECT}
  SMC_SFEXEC                 = $00000009; // The callback is called to execute an shell folder item
  {$EXTERNALSYM SMC_SFEXEC}
  SMC_SFSELECTITEM           = $0000000A; // The callback is called when an item is selected
  {$EXTERNALSYM SMC_SFSELECTITEM}
  SMC_REFRESH                = $00000010; // Menus have completely refreshed. Reset your state.
  {$EXTERNALSYM SMC_REFRESH}
  SMC_DEMOTE                 = $00000011; // Demote an item
  {$EXTERNALSYM SMC_DEMOTE}
  SMC_PROMOTE                = $00000012; // Promote an item, wParam = SMINV_* flag
  {$EXTERNALSYM SMC_PROMOTE}
  SMC_DEFAULTICON            = $00000016; // Returns Default icon location in wParam, index in lParam
  {$EXTERNALSYM SMC_DEFAULTICON}
  SMC_NEWITEM                = $00000017; // Notifies item is not in the order stream.
  {$EXTERNALSYM SMC_NEWITEM}
  SMC_CHEVRONEXPAND          = $00000019; // Notifies of a expansion via the chevron
  {$EXTERNALSYM SMC_CHEVRONEXPAND}
  SMC_DISPLAYCHEVRONTIP      = $0000002A; // S_OK display, S_FALSE not.
  {$EXTERNALSYM SMC_DISPLAYCHEVRONTIP}
  SMC_SETSFOBJECT            = $0000002D; // Called to save the passed object
  {$EXTERNALSYM SMC_SETSFOBJECT}
  SMC_SHCHANGENOTIFY         = $0000002E; // Called when a Change notify is received. lParam points to SMCSHCHANGENOTIFYSTRUCT
  {$EXTERNALSYM SMC_SHCHANGENOTIFY}
  SMC_CHEVRONGETTIP          = $0000002F; // Called to get the chevron tip text. wParam = Tip title, Lparam = TipText Both MAX_PATH
  {$EXTERNALSYM SMC_CHEVRONGETTIP}
  SMC_SFDDRESTRICTED         = $00000030; // Called requesting if it's ok to drop. wParam = IDropTarget.
  {$EXTERNALSYM SMC_SFDDRESTRICTED}
  SMC_SFEXEC_MIDDLE          = $00000031; // Same as SFEXEC, but the middle mouse button caused the exec.
  {$EXTERNALSYM SMC_SFEXEC_MIDDLE}
  SMC_GETAUTOEXPANDSTATE     = $00000041; // callback returns the default autoexpand state lParam = LPDWORD to recieve flags
  {$EXTERNALSYM SMC_GETAUTOEXPANDSTATE}
  SMC_AUTOEXPANDCHANGE       = $00000042; // Notify that the menu is expanding/contracting
  {$EXTERNALSYM SMC_AUTOEXPANDCHANGE}
  SMC_GETCONTEXTMENUMODIFIER = $00000043; // Used to add items to a context menu
  {$EXTERNALSYM SMC_GETCONTEXTMENUMODIFIER}
  SMC_GETBKCONTEXTMENU       = $00000044; // used to get a context menu to display when user right clicks on the background
  {$EXTERNALSYM SMC_GETBKCONTEXTMENU}
  SMC_OPEN                   = $00000045; // allows client to overwrite open/explore verb action on an item
  {$EXTERNALSYM SMC_OPEN}
// Flags for return value from SMC_GETAUTOEXPANDSTATE and SMC_AUTOEXPANDCHANGE:
  SMAE_EXPANDED              = $00000001; // The menu is or should start expanded
  {$EXTERNALSYM SMAE_EXPANDED}
  SMAE_CONTRACTED            = $00000002; // The menu is or should start contracted
  {$EXTERNALSYM SMAE_CONTRACTED}
// SMAE_EXPANDED and SMAE_CONTRACTED are mutually exclusive
  SMAE_USER                  = $00000004; // Indicates that the menu expansion/contraction is a reflection
                                          // of user choice
  {$EXTERNALSYM SMAE_USER}
  SMAE_VALID                 = $00000007;
  {$EXTERNALSYM SMAE_VALID}

type
  IShellMenuCallback = interface(IUnknown) 
    [SID_IShellMenuCallback]
    function CallbackSM(psmd: PSMData; uMsg: UINT; wParam: WPARAM; 
      lParam: LPARAM): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IShellMenuCallback}

{ interface IShellMenu }
const
  SMINIT_DEFAULT           = $00000000; // No Options
  {$EXTERNALSYM SMINIT_DEFAULT}
  SMINIT_RESTRICT_DRAGDROP = $00000002; // Don't allow Drag and Drop
  {$EXTERNALSYM SMINIT_RESTRICT_DRAGDROP}
  SMINIT_TOPLEVEL          = $00000004; // This is the top band.
  {$EXTERNALSYM SMINIT_TOPLEVEL}
  SMINIT_CACHED            = $00000010;
  {$EXTERNALSYM SMINIT_CACHED}
  SMINIT_AUTOEXPAND        = $00000100; // automatically expand/contract menu band
  {$EXTERNALSYM SMINIT_AUTOEXPAND}
  SMINIT_AUTOTOOLTIP       = $00000200; // regular tooltip support
  {$EXTERNALSYM SMINIT_AUTOTOOLTIP}
  SMINIT_DROPONCONTAINER   = $00000400; // allow drop on a container
  {$EXTERNALSYM SMINIT_DROPONCONTAINER}
  SMINIT_VERTICAL          = $10000000; // This is a vertical menu
  {$EXTERNALSYM SMINIT_VERTICAL}
  SMINIT_HORIZONTAL        = $20000000; // This is a horizontal menu    (does not inherit)
  {$EXTERNALSYM SMINIT_HORIZONTAL}
  ANCESTORDEFAULT          = -1;
  {$EXTERNALSYM ANCESTORDEFAULT}
  SMSET_TOP                = $10000000; // Bias this namespace to the top of the menu
  {$EXTERNALSYM SMSET_TOP}
  SMSET_BOTTOM             = $20000000; // Bias this namespace to the bottom of the menu
  {$EXTERNALSYM SMSET_BOTTOM}
  SMSET_DONTOWN            = $00000001; // The Menuband doesn't own the non-ref counted object
  {$EXTERNALSYM SMSET_DONTOWN}
  SMINV_REFRESH            = $00000001;
  {$EXTERNALSYM SMINV_REFRESH}
  SMINV_ID                 = $00000008;
  {$EXTERNALSYM SMINV_ID}

type
  IShellMenu = interface(IUnknown) 
    [SID_IShellMenu]
    function Initialize(const psmc: IShellMenuCallback; uId: UINT; uIdAncestor: UINT; 
      dwFlags: DWORD): HRESULT; stdcall;
    function GetMenuInfo(out ppsmc: IShellMenuCallback; var puId: UINT; 
      var puIdAncestor: UINT; var pdwFlags: DWORD): HRESULT; stdcall;
    function SetShellFolder(const psf: IShellFolder; pidlFolder: PItemIDList; 
      hKey: HKEY; dwFlags: DWORD): HRESULT; stdcall;
    function GetShellFolder(var pdwFlags: DWORD; var ppidl: PItemIDList; 
      const riid: TIID; out ppv): HRESULT; stdcall;
    function SetMenu(hmenu: HMENU; hwnd: HWND; dwFlags: DWORD): HRESULT; stdcall;
    function GetMenu(var phmenu: HMENU; var phwnd: HWND; 
      var pdwFlags: DWORD): HRESULT; stdcall;
    function InvalidateItem(psmd: PSMData; dwFlags: DWORD): HRESULT; stdcall;
    function GetState(psmd: PSMData): HRESULT; stdcall;
    function SetMenuToolbar(const punk: IUnknown; dwFlags: DWORD): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IShellMenu}

{ interface IShellRunDll }
  IShellRunDll = interface(IUnknown) 
    [SID_IShellRunDll]
    function Run(pszArgs: LPCWSTR): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IShellRunDll}

{ interface IKnownFolder }
const
  KF_CATEGORY_VIRTUAL = $1; 
  {$EXTERNALSYM KF_CATEGORY_VIRTUAL}
  KF_CATEGORY_FIXED   = $2; 
  {$EXTERNALSYM KF_CATEGORY_FIXED}
  KF_CATEGORY_COMMON  = $3; 
  {$EXTERNALSYM KF_CATEGORY_COMMON}
  KF_CATEGORY_PERUSER = $4; 
  {$EXTERNALSYM KF_CATEGORY_PERUSER}
type
  KF_CATEGORY = DWORD;
  {$EXTERNALSYM KF_CATEGORY}
  TKFCategory = KF_CATEGORY;

const
  KFDF_LOCAL_REDIRECT_ONLY = $2; 
  {$EXTERNALSYM KFDF_LOCAL_REDIRECT_ONLY}
  KFDF_ROAMABLE            = $4; 
  {$EXTERNALSYM KFDF_ROAMABLE}
  KFDF_PRECREATE           = $8; 
  {$EXTERNALSYM KFDF_PRECREATE}
  KFDF_STREAM              = $10; 
  {$EXTERNALSYM KFDF_STREAM}
  KFDF_PUBLISHEXPANDEDPATH = $20; 
  {$EXTERNALSYM KFDF_PUBLISHEXPANDEDPATH}
type
  KF_DEFINITION_FLAGS = DWORD; 
  {$EXTERNALSYM KF_DEFINITION_FLAGS}
  TKFDefinitionFlags = KF_DEFINITION_FLAGS; 

const
  KF_REDIRECT_USER_EXCLUSIVE               = $1; 
  {$EXTERNALSYM KF_REDIRECT_USER_EXCLUSIVE}
  KF_REDIRECT_COPY_SOURCE_DACL             = $2; 
  {$EXTERNALSYM KF_REDIRECT_COPY_SOURCE_DACL}
  KF_REDIRECT_OWNER_USER                   = $4; 
  {$EXTERNALSYM KF_REDIRECT_OWNER_USER}
  KF_REDIRECT_SET_OWNER_EXPLICIT           = $8; 
  {$EXTERNALSYM KF_REDIRECT_SET_OWNER_EXPLICIT}
  KF_REDIRECT_CHECK_ONLY                   = $10; 
  {$EXTERNALSYM KF_REDIRECT_CHECK_ONLY}
  KF_REDIRECT_WITH_UI                      = $20; 
  {$EXTERNALSYM KF_REDIRECT_WITH_UI}
  KF_REDIRECT_UNPIN                        = $40; 
  {$EXTERNALSYM KF_REDIRECT_UNPIN}
  KF_REDIRECT_PIN                          = $80; 
  {$EXTERNALSYM KF_REDIRECT_PIN}
  KF_REDIRECT_COPY_CONTENTS                = $200; 
  {$EXTERNALSYM KF_REDIRECT_COPY_CONTENTS}
  KF_REDIRECT_DEL_SOURCE_CONTENTS          = $400; 
  {$EXTERNALSYM KF_REDIRECT_DEL_SOURCE_CONTENTS}
  KF_REDIRECT_EXCLUDE_ALL_KNOWN_SUBFOLDERS = $800; 
  {$EXTERNALSYM KF_REDIRECT_EXCLUDE_ALL_KNOWN_SUBFOLDERS}

const
  KF_REDIRECTION_CAPABILITIES_ALLOW_ALL              = $FF; 
  {$EXTERNALSYM KF_REDIRECTION_CAPABILITIES_ALLOW_ALL}
  KF_REDIRECTION_CAPABILITIES_REDIRECTABLE           = $1; 
  {$EXTERNALSYM KF_REDIRECTION_CAPABILITIES_REDIRECTABLE}
  KF_REDIRECTION_CAPABILITIES_DENY_ALL               = $FFF00; 
  {$EXTERNALSYM KF_REDIRECTION_CAPABILITIES_DENY_ALL}
  KF_REDIRECTION_CAPABILITIES_DENY_POLICY_REDIRECTED = $100; 
  {$EXTERNALSYM KF_REDIRECTION_CAPABILITIES_DENY_POLICY_REDIRECTED}
  KF_REDIRECTION_CAPABILITIES_DENY_POLICY            = $200; 
  {$EXTERNALSYM KF_REDIRECTION_CAPABILITIES_DENY_POLICY}
  KF_REDIRECTION_CAPABILITIES_DENY_PERMISSIONS       = $400; 
  {$EXTERNALSYM KF_REDIRECTION_CAPABILITIES_DENY_PERMISSIONS}
type
  KF_REDIRECTION_CAPABILITIES = DWORD; 
  {$EXTERNALSYM KF_REDIRECTION_CAPABILITIES}
  TKFRedirectionCapabilities = KF_REDIRECTION_CAPABILITIES;

  KNOWNFOLDER_DEFINITION = record 
    category: TKFCategory;
    pszName: LPWSTR;
    pszDescription: LPWSTR;
    fidParent: TKnownFolderID;
    pszRelativePath: LPWSTR;
    pszParsingName: LPWSTR;
    pszTooltip: LPWSTR;
    pszLocalizedName: LPWSTR;
    pszIcon: LPWSTR;
    pszSecurity: LPWSTR;
    dwAttributes: DWORD;
    kfdFlags: TKFDefinitionFlags;
    ftidType: TFolderTypeID;
  end;
  {$EXTERNALSYM KNOWNFOLDER_DEFINITION}
  tagKNOWNFOLDER_DEFINITION = KNOWNFOLDER_DEFINITION;
  {$EXTERNALSYM tagKNOWNFOLDER_DEFINITION}
  TKnownFolderDefinition = KNOWNFOLDER_DEFINITION;

  IKnownFolder = interface(IUnknown) 
    [SID_IKnownFolder]
    function GetId(var pkfid: TknownFolderID): HRESULT; stdcall;
    function GetCategory(var pCategory: TKFCategory): HRESULT; stdcall;
    function GetShellItem(dwFlags: DWORD; const riid: TIID; 
      out ppv): HRESULT; stdcall;
    function GetPath(dwFlags: DWORD; var ppszPath: LPWSTR): HRESULT; stdcall;
    function SetPath(dwFlags: DWORD; pszPath: LPCWSTR): HRESULT; stdcall;
    function GetIDList(dwFlags: DWORD; var ppidl: PItemIDList): HRESULT; stdcall;
    function GetFolderType(var pftid: TFolderTypeID): HRESULT; stdcall;
    function GetRedirectionCapabilities(
      var pCapabilities: TKFRedirectionCapabilities): HRESULT; stdcall;
    function GetFolderDefinition(
      var pKFD: TKnownFolderDefinition): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IKnownFolder}

{ interface IKnownFolderManager }
type
  FFFP_MODE = Integer; 
  {$EXTERNALSYM FFFP_MODE}
const
  FFFP_EXACTMATCH         = 0; 
  {$EXTERNALSYM FFFP_EXACTMATCH}
  FFFP_NEARESTPARENTMATCH = FFFP_EXACTMATCH + 1; 
  {$EXTERNALSYM FFFP_NEARESTPARENTMATCH}

type
  IKnownFolderManager = interface(IUnknown) 
    [SID_IKnownFolderManager]
    function FolderIdFromCsidl(nCsidl: Integer; 
      var pfid: TKnownFolderID): HRESULT; stdcall;
    function FolderIdToCsidl(const rfid: TIID; 
      var pnCsidl: Integer): HRESULT; stdcall;
    function GetFolderIds(ppKFId: array of TKnownFolderID; 
      var pCount: UINT): HRESULT; stdcall;
    function GetFolder(const rfid: TIID; 
      out ppkf: IKnownFolder): HRESULT; stdcall;
    function GetFolderByName(pszCanonicalName: LPCWSTR; 
      out ppkf: IKnownFolder): HRESULT; stdcall;
    function RegisterFolder(const rfid: TIID; 
      var pKFD: TKnownFolderDefinition): HRESULT; stdcall;
    function UnregisterFolder(const rfid: TIID): HRESULT; stdcall;
    function FindFolderFromPath(pszPath: LPCWSTR; mode: FFFP_MODE; 
      out ppkf: IKnownFolder): HRESULT; stdcall;
    function FindFolderFromIDList(pidl: PItemIDList; 
      out ppkf: IKnownFolder): HRESULT; stdcall;
    function Redirect(const rfid: TIID; hwnd: HWND; flags: TKFRedirectFlags; 
      pszTargetPath: LPCWSTR; cFolders: UINT; var pExclusion: TKnownFolderID; 
      var ppszError: LPWSTR): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IKnownFolderManager}

procedure FreeKnownFolderDefinitionFields(var pKFD: KNOWNFOLDER_DEFINITION); inline;

{ interface ISharingConfigurationManager }
const
  SHARE_ROLE_INVALID     = -1; 
  {$EXTERNALSYM SHARE_ROLE_INVALID}
  SHARE_ROLE_READER      = 0; 
  {$EXTERNALSYM SHARE_ROLE_READER}
  SHARE_ROLE_CONTRIBUTOR = 1; 
  {$EXTERNALSYM SHARE_ROLE_CONTRIBUTOR}
  SHARE_ROLE_CO_OWNER    = 2; 
  {$EXTERNALSYM SHARE_ROLE_CO_OWNER}
  SHARE_ROLE_OWNER       = 3; 
  {$EXTERNALSYM SHARE_ROLE_OWNER}
  SHARE_ROLE_CUSTOM      = 4; 
  {$EXTERNALSYM SHARE_ROLE_CUSTOM}
  SHARE_ROLE_MIXED       = 5; 
  {$EXTERNALSYM SHARE_ROLE_MIXED}

  DEFSHAREID_USERS  = 1; 
  {$EXTERNALSYM DEFSHAREID_USERS}
  DEFSHAREID_PUBLIC = 2; 
  {$EXTERNALSYM DEFSHAREID_PUBLIC}

type
  ISharingConfigurationManager = interface(IUnknown) 
    [SID_ISharingConfigurationManager]
    function CreateShare(dsid: Integer; role: Integer): HRESULT; stdcall;
    function DeleteShare(dsid: Integer): HRESULT; stdcall;
    function ShareExists(dsid: Integer): HRESULT; stdcall;
    function GetSharePermissions(dsid: Integer; 
      var pRole: Integer): HRESULT; stdcall;
    function SharePrinters: HRESULT; stdcall;
    function StopSharingPrinters: HRESULT; stdcall;
    function ArePrintersShared: HRESULT; stdcall;
  end;
  {$EXTERNALSYM ISharingConfigurationManager}

{ interface IPreviousVersionsInfo }
  IPreviousVersionsInfo = interface(IUnknown) 
    [SID_IPreviousVersionsInfo]
    function AreSnapshotsAvailable(pszPath: LPCWSTR; fOkToBeSlow: BOOL; 
      var pfAvailable: BOOL): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IPreviousVersionsInfo}

{ interface IRelatedItem }
  IRelatedItem = interface(IUnknown) 
    [SID_IRelatedItem]
    function GetItemIDList(out ppidl: PItemIDList): HRESULT; stdcall;
    function GetItem(out ppsi: IShellItem): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IRelatedItem}

{ interface IIdentityName }
  IIdentityName = interface(IRelatedItem) 
    [SID_IIdentityName]
  end;
  {$EXTERNALSYM IIdentityName}

{ interface IDelegateItem }
  IDelegateItem = interface(IRelatedItem) 
    [SID_IDelegateItem]
  end;
  {$EXTERNALSYM IDelegateItem}

{ interface ICurrentItem }
  ICurrentItem = interface(IRelatedItem) 
    [SID_ICurrentItem]
  end;
  {$EXTERNALSYM ICurrentItem}

{ interface ITransferMediumItem }
  ITransferMediumItem = interface(IRelatedItem) 
    [SID_ITransferMediumItem]
  end;
  {$EXTERNALSYM ITransferMediumItem}

{ interface IUseToBrowseItem }
  IUseToBrowseItem = interface(IRelatedItem) 
    [SID_IUseToBrowseItem]
  end;
  {$EXTERNALSYM IUseToBrowseItem}

{ interface IDisplayItem }
  IDisplayItem = interface(IRelatedItem) 
    [SID_IDisplayItem]
  end;
  {$EXTERNALSYM IDisplayItem}

{ interface IViewStateIdentityItem }
  IViewStateIdentityItem = interface(IRelatedItem) 
    [SID_IViewStateIdentityItem]
  end;
  {$EXTERNALSYM IViewStateIdentityItem}

  IPreviewItem = interface(IRelatedItem) 
    [SID_IPreviewItem]
  end;
  {$EXTERNALSYM IPreviewItem}

{ interface IDestinationStreamFactory }
  IDestinationStreamFactory = interface(IUnknown) 
    [SID_IDestinationStreamFactory]
    function GetDestinationStream(out ppstm: IStream): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IDestinationStreamFactory}

{ interface INewMenuClient }
type
  tagNMCII_FLAGS = Integer;
  {$EXTERNALSYM tagNMCII_FLAGS}
const
  NMCII_ITEMS   = $1; 
  {$EXTERNALSYM NMCII_ITEMS}
  NMCII_FOLDERS = $2; 
  {$EXTERNALSYM NMCII_FOLDERS}
type
  NMCII_FLAGS = tagNMCII_FLAGS; 
  {$EXTERNALSYM NMCII_FLAGS}
  TNMCIIFlags = NMCII_FLAGS;

type
  tagNMCSAEI_FLAGS = Integer;
  {$EXTERNALSYM tagNMCSAEI_FLAGS}
const
  NMCSAEI_SELECT = 0; 
  {$EXTERNALSYM NMCSAEI_SELECT}
  NMCSAEI_EDIT   = $1; 
  {$EXTERNALSYM NMCSAEI_EDIT}
type
  NMCSAEI_FLAGS = tagNMCSAEI_FLAGS; 
  {$EXTERNALSYM NMCSAEI_FLAGS}
  TNMCSAEIFlags = NMCSAEI_FLAGS;

  INewMenuClient = interface(IUnknown) 
    [SID_INewMenuClient]
    function IncludeItems(var pflags: TNMCIIFlags): HRESULT; stdcall;
    function SelectAndEditItem(pidlItem: PItemIDList; 
      flags: TNMCSAEIFlags): HRESULT; stdcall;
  end;
  {$EXTERNALSYM INewMenuClient}

{ interface IInitializeWithBindCtx }
  IInitializeWithBindCtx = interface(IUnknown) 
    [SID_IInitializeWithBindCtx]
    function Initialize(const pbc: IBindCtx): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInitializeWithBindCtx}

//NOTE: IShellItemFilter defintion moved up

{ interface INameSpaceTreeControl }
type
  NSTCSTYLE = DWORD; 
  {$EXTERNALSYM NSTCSTYLE}

const
  NSTCS_HASEXPANDOS         = $1; 
  {$EXTERNALSYM NSTCS_HASEXPANDOS}
  NSTCS_HASLINES            = $2; 
  {$EXTERNALSYM NSTCS_HASLINES}
  NSTCS_SINGLECLICKEXPAND   = $4; 
  {$EXTERNALSYM NSTCS_SINGLECLICKEXPAND}
  NSTCS_FULLROWSELECT       = $8; 
  {$EXTERNALSYM NSTCS_FULLROWSELECT}
  NSTCS_SPRINGEXPAND        = $10; 
  {$EXTERNALSYM NSTCS_SPRINGEXPAND}
  NSTCS_HORIZONTALSCROLL    = $20; 
  {$EXTERNALSYM NSTCS_HORIZONTALSCROLL}
  NSTCS_ROOTHASEXPANDO      = $40; 
  {$EXTERNALSYM NSTCS_ROOTHASEXPANDO}
  NSTCS_SHOWSELECTIONALWAYS = $80; 
  {$EXTERNALSYM NSTCS_SHOWSELECTIONALWAYS}
  NSTCS_NOINFOTIP           = $200; 
  {$EXTERNALSYM NSTCS_NOINFOTIP}
  NSTCS_EVENHEIGHT          = $400; 
  {$EXTERNALSYM NSTCS_EVENHEIGHT}
  NSTCS_NOREPLACEOPEN       = $800; 
  {$EXTERNALSYM NSTCS_NOREPLACEOPEN}
  NSTCS_DISABLEDRAGDROP     = $1000; 
  {$EXTERNALSYM NSTCS_DISABLEDRAGDROP}
  NSTCS_NOORDERSTREAM       = $2000;
  {$EXTERNALSYM NSTCS_NOORDERSTREAM}
  NSTCS_RICHTOOLTIP         = $4000; 
  {$EXTERNALSYM NSTCS_RICHTOOLTIP}
  NSTCS_BORDER              = $8000; 
  {$EXTERNALSYM NSTCS_BORDER}
  NSTCS_NOEDITLABELS        = $10000; 
  {$EXTERNALSYM NSTCS_NOEDITLABELS}
  NSTCS_TABSTOP             = $20000; 
  {$EXTERNALSYM NSTCS_TABSTOP}
  NSTCS_FAVORITESMODE       = $80000; 
  {$EXTERNALSYM NSTCS_FAVORITESMODE}
  NSTCS_AUTOHSCROLL         = $100000; 
  {$EXTERNALSYM NSTCS_AUTOHSCROLL}
  NSTCS_FADEINOUTEXPANDOS   = $200000; 
  {$EXTERNALSYM NSTCS_FADEINOUTEXPANDOS}
  NSTCS_EMPTYTEXT           = $400000; 
  {$EXTERNALSYM NSTCS_EMPTYTEXT}
  NSTCS_CHECKBOXES          = $800000; 
  {$EXTERNALSYM NSTCS_CHECKBOXES}
  NSTCS_PARTIALCHECKBOXES   = $1000000; 
  {$EXTERNALSYM NSTCS_PARTIALCHECKBOXES}
  NSTCS_EXCLUSIONCHECKBOXES = $2000000; 
  {$EXTERNALSYM NSTCS_EXCLUSIONCHECKBOXES}
  NSTCS_DIMMEDCHECKBOXES    = $4000000; 
  {$EXTERNALSYM NSTCS_DIMMEDCHECKBOXES}
  NSTCS_NOINDENTCHECKS      = $8000000; 
  {$EXTERNALSYM NSTCS_NOINDENTCHECKS}
  NSTCS_ALLOWJUNCTIONS      = $10000000; 
  {$EXTERNALSYM NSTCS_ALLOWJUNCTIONS}
  NSTCS_SHOWTABSBUTTON      = $20000000; 
  {$EXTERNALSYM NSTCS_SHOWTABSBUTTON}
  NSTCS_SHOWDELETEBUTTON    = $40000000; 
  {$EXTERNALSYM NSTCS_SHOWDELETEBUTTON}
  NSTCS_SHOWREFRESHBUTTON   = $80000000; 
  {$EXTERNALSYM NSTCS_SHOWREFRESHBUTTON}
type
  NSTCROOTSTYLE = DWORD; 
  {$EXTERNALSYM NSTCROOTSTYLE}

type
  tagNSTCROOTSTYLE = type Integer;
  {$EXTERNALSYM tagNSTCROOTSTYLE}
const
  NSTCRS_VISIBLE  = 0; 
  {$EXTERNALSYM NSTCRS_VISIBLE}
  NSTCRS_HIDDEN   = $1; 
  {$EXTERNALSYM NSTCRS_HIDDEN}
  NSTCRS_EXPANDED = $2; 
  {$EXTERNALSYM NSTCRS_EXPANDED}
type
  NSTCITEMSTATE = DWORD; 
  {$EXTERNALSYM NSTCITEMSTATE}

type
  tagNSTCITEMSTATE = type Integer;
  {$EXTERNALSYM tagNSTCITEMSTATE}
const
  NSTCIS_NONE             = 0; 
  {$EXTERNALSYM NSTCIS_NONE}
  NSTCIS_SELECTED         = $1; 
  {$EXTERNALSYM NSTCIS_SELECTED}
  NSTCIS_EXPANDED         = $2; 
  {$EXTERNALSYM NSTCIS_EXPANDED}
  NSTCIS_BOLD             = $4; 
  {$EXTERNALSYM NSTCIS_BOLD}
  NSTCIS_DISABLED         = $8; 
  {$EXTERNALSYM NSTCIS_DISABLED}
  NSTCIS_SELECTEDNOEXPAND = $10; 
  {$EXTERNALSYM NSTCIS_SELECTEDNOEXPAND}
type
  NSTCGNI = DWORD; 
  {$EXTERNALSYM NSTCGNI}

type
  tagNSTCGNI = type Integer;
  {$EXTERNALSYM tagNSTCGNI}
const
  NSTCGNI_NEXT         = 0; 
  {$EXTERNALSYM NSTCGNI_NEXT}
  NSTCGNI_NEXTVISIBLE  = $1; 
  {$EXTERNALSYM NSTCGNI_NEXTVISIBLE}
  NSTCGNI_PREV         = $2; 
  {$EXTERNALSYM NSTCGNI_PREV}
  NSTCGNI_PREVVISIBLE  = $3; 
  {$EXTERNALSYM NSTCGNI_PREVVISIBLE}
  NSTCGNI_PARENT       = $4; 
  {$EXTERNALSYM NSTCGNI_PARENT}
  NSTCGNI_CHILD        = $5; 
  {$EXTERNALSYM NSTCGNI_CHILD}
  NSTCGNI_FIRSTVISIBLE = $6; 
  {$EXTERNALSYM NSTCGNI_FIRSTVISIBLE}
  NSTCGNI_LASTVISIBLE  = $7; 
  {$EXTERNALSYM NSTCGNI_LASTVISIBLE}

type
  INameSpaceTreeControl = interface(IUnknown) 
    [SID_INameSpaceTreeControl]
    function Initialize(hwndParent: HWND; var prc: TRect;
      nsctsFlags: NSTCSTYLE): HRESULT; stdcall;
    function TreeAdvise(const punk: IUnknown; 
      var pdwCookie: DWORD): HRESULT; stdcall;
    function TreeUnadvise(dwCookie: DWORD): HRESULT; stdcall;
    function AppendRoot(const psiRoot: IShellItem; grfEnumFlags: Integer; 
      grfRootStyle: NSTCROOTSTYLE; const pif: IShellItemFilter): HRESULT; stdcall;
    function InsertRoot(iIndex: Integer; const psiRoot: IShellItem; 
      grfEnumFlags: Integer; grfRootStyle: NSTCROOTSTYLE; 
      const pif: IShellItemFilter): HRESULT; stdcall;
    function RemoveRoot(const psiRoot: IShellItem): HRESULT; stdcall;
    function RemoveAllRoots: HRESULT; stdcall;
    function GetRootItems(out ppsiaRootItems: IShellItemArray): HRESULT; stdcall;
    function SetItemState(const psi: IShellItem; nstcisMask: NSTCITEMSTATE; 
      nstcisFlags: NSTCITEMSTATE): HRESULT; stdcall;
    function GetItemState(const psi: IShellItem; nstcisMask: NSTCITEMSTATE; 
      var pnstcisFlags: NSTCITEMSTATE): HRESULT; stdcall;
    function GetSelectedItems(out psiaItems: IShellItemArray): HRESULT; stdcall;
    function GetItemCustomState(const psi: IShellItem; 
      var piStateNumber: Integer): HRESULT; stdcall;
    function SetItemCustomState(const psi: IShellItem; 
      iStateNumber: Integer): HRESULT; stdcall;
    function EnsureItemVisible(const psi: IShellItem): HRESULT; stdcall;
    function SetTheme(pszTheme: LPCWSTR): HRESULT; stdcall;
    function GetNextItem(const psi: IShellItem; nstcgi: NSTCGNI; 
      out ppsiNext: IShellItem): HRESULT; stdcall;
    function HitTest(var ppt: TPoint; out ppsiOut: IShellItem): HRESULT; stdcall;
    function GetItemRect(const psi: IShellItem; var prect: TRect): HRESULT; stdcall;
    function CollapseAll: HRESULT; stdcall;
  end;
  {$EXTERNALSYM INameSpaceTreeControl}

{ interface INameSpaceTreeControl2 }
type
  NSTCSTYLE2 = Integer; 
  {$EXTERNALSYM NSTCSTYLE2}
const
  NSTCS2_DEFAULT                = 0; 
  {$EXTERNALSYM NSTCS2_DEFAULT}
  NSTCS2_INTERRUPTNOTIFICATIONS = $1; 
  {$EXTERNALSYM NSTCS2_INTERRUPTNOTIFICATIONS}
  NSTCS2_SHOWNULLSPACEMENU      = $2; 
  {$EXTERNALSYM NSTCS2_SHOWNULLSPACEMENU}
  NSTCS2_DISPLAYPADDING         = $4; 
  {$EXTERNALSYM NSTCS2_DISPLAYPADDING}
  NSTCS2_DISPLAYPINNEDONLY      = $8; 
  {$EXTERNALSYM NSTCS2_DISPLAYPINNEDONLY}
  NTSCS2_NOSINGLETONAUTOEXPAND  = $10; 
  {$EXTERNALSYM NTSCS2_NOSINGLETONAUTOEXPAND}

type
  INameSpaceTreeControl2 = interface(INameSpaceTreeControl) 
    [SID_INameSpaceTreeControl2]
    function SetControlStyle(nstcsMask: NSTCSTYLE; 
      nstcsStyle: NSTCSTYLE): HRESULT; stdcall;
    function GetControlStyle(nstcsMask: NSTCSTYLE; 
      var pnstcsStyle: NSTCSTYLE): HRESULT; stdcall;
    function SetControlStyle2(nstcsMask: NSTCSTYLE2; 
      nstcsStyle: NSTCSTYLE2): HRESULT; stdcall;
    function GetControlStyle2(nstcsMask: NSTCSTYLE2; 
      var pnstcsStyle: NSTCSTYLE2): HRESULT; stdcall;
  end;
  {$EXTERNALSYM INameSpaceTreeControl2}

const
  NSTCS2_ALLMASK = NSTCS2_INTERRUPTNOTIFICATIONS or NSTCS2_SHOWNULLSPACEMENU or NSTCS2_DISPLAYPADDING; 
  {$EXTERNALSYM NSTCS2_ALLMASK}

{ interface INameSpaceTreeControlEvents }
type
  NSTCEHITTEST = DWORD; 
  {$EXTERNALSYM NSTCEHITTEST}

const
  NSTCEHT_NOWHERE         = $1; 
  {$EXTERNALSYM NSTCEHT_NOWHERE}
  NSTCEHT_ONITEMICON      = $2; 
  {$EXTERNALSYM NSTCEHT_ONITEMICON}
  NSTCEHT_ONITEMLABEL     = $4; 
  {$EXTERNALSYM NSTCEHT_ONITEMLABEL}
  NSTCEHT_ONITEMINDENT    = $8; 
  {$EXTERNALSYM NSTCEHT_ONITEMINDENT}
  NSTCEHT_ONITEMBUTTON    = $10; 
  {$EXTERNALSYM NSTCEHT_ONITEMBUTTON}
  NSTCEHT_ONITEMRIGHT     = $20; 
  {$EXTERNALSYM NSTCEHT_ONITEMRIGHT}
  NSTCEHT_ONITEMSTATEICON = $40; 
  {$EXTERNALSYM NSTCEHT_ONITEMSTATEICON}
  NSTCEHT_ONITEM          = $46; 
  {$EXTERNALSYM NSTCEHT_ONITEM}
  NSTCEHT_ONITEMTABBUTTON = $1000; 
  {$EXTERNALSYM NSTCEHT_ONITEMTABBUTTON}
type
  NSTCECLICKTYPE = DWORD; 
  {$EXTERNALSYM NSTCECLICKTYPE}

const
  NSTCECT_LBUTTON  = $1; 
  {$EXTERNALSYM NSTCECT_LBUTTON}
  NSTCECT_MBUTTON  = $2; 
  {$EXTERNALSYM NSTCECT_MBUTTON}
  NSTCECT_RBUTTON  = $3; 
  {$EXTERNALSYM NSTCECT_RBUTTON}
  NSTCECT_BUTTON   = $3; 
  {$EXTERNALSYM NSTCECT_BUTTON}
  NSTCECT_DBLCLICK = $4; 
  {$EXTERNALSYM NSTCECT_DBLCLICK}

type
  INameSpaceTreeControlEvents = interface(IUnknown) 
    [SID_INameSpaceTreeControlEvents]
    function OnItemClick(const psi: IShellItem; nstceHitTest: NSTCEHITTEST; 
      nstceClickType: NSTCECLICKTYPE): HRESULT; stdcall;
    function OnPropertyItemCommit(const psi: IShellItem): HRESULT; stdcall;
    function OnItemStateChanging(const psi: IShellItem; nstcisMask: NSTCITEMSTATE; 
      nstcisState: NSTCITEMSTATE): HRESULT; stdcall;
    function OnItemStateChanged(const psi: IShellItem; nstcisMask: NSTCITEMSTATE; 
      nstcisState: NSTCITEMSTATE): HRESULT; stdcall;
    function OnSelectionChanged(
      const psiaSelection: IShellItemArray): HRESULT; stdcall;
    function OnKeyboardInput(uMsg: UINT; wParam: WPARAM; 
      lParam: LPARAM): HRESULT; stdcall;
    function OnBeforeExpand(const psi: IShellItem): HRESULT; stdcall;
    function OnAfterExpand(const psi: IShellItem): HRESULT; stdcall;
    function OnBeginLabelEdit(const psi: IShellItem): HRESULT; stdcall;
    function OnEndLabelEdit(const psi: IShellItem): HRESULT; stdcall;
    function OnGetToolTip(const psi: IShellItem; pszTip: LPWSTR; 
      cchTip: Integer): HRESULT; stdcall;
    function OnBeforeItemDelete(const psi: IShellItem): HRESULT; stdcall;
    function OnItemAdded(const psi: IShellItem; fIsRoot: BOOL): HRESULT; stdcall;
    function OnItemDeleted(const psi: IShellItem; fIsRoot: BOOL): HRESULT; stdcall;
    function OnBeforeContextMenu(const psi: IShellItem; const riid: TIID; 
      out ppv): HRESULT; stdcall;
    function OnAfterContextMenu(const psi: IShellItem; const pcmIn: IContextMenu; 
      const riid: TIID; out ppv): HRESULT; stdcall;
    function OnBeforeStateImageChange(const psi: IShellItem): HRESULT; stdcall;
    function OnGetDefaultIconIndex(const psi: IShellItem; var piDefaultIcon: Integer;
      var piOpenIcon: Integer): HRESULT; stdcall;
  end;
  {$EXTERNALSYM INameSpaceTreeControlEvents}

{ interface INameSpaceTreeControlDropHandler }
const
  NSTCDHPOS_ONTOP = -1; 
  {$EXTERNALSYM NSTCDHPOS_ONTOP}

type
  INameSpaceTreeControlDropHandler = interface(IUnknown) 
    [SID_INameSpaceTreeControlDropHandler]
    function OnDragEnter(const psiOver: IShellItem; const psiaData: IShellItemArray; 
      fOutsideSource: BOOL; grfKeyState: DWORD; 
      var pdwEffect: DWORD): HRESULT; stdcall;
    function OnDragOver(const psiOver: IShellItem; const psiaData: IShellItemArray; 
      grfKeyState: DWORD; var pdwEffect: DWORD): HRESULT; stdcall;
    function OnDragPosition(const psiOver: IShellItem; const psiaData: IShellItemArray; 
      iNewPosition: Integer; iOldPosition: Integer): HRESULT; stdcall;
    function OnDrop(const psiOver: IShellItem; const psiaData: IShellItemArray; 
      iPosition: Integer; grfKeyState: DWORD; 
      var pdwEffect: DWORD): HRESULT; stdcall;
    function OnDropPosition(const psiOver: IShellItem; const psiaData: IShellItemArray; 
      iNewPosition: Integer; iOldPosition: Integer): HRESULT; stdcall;
    function OnDragLeave(const psiOver: IShellItem): HRESULT; stdcall;
  end;
  {$EXTERNALSYM INameSpaceTreeControlDropHandler}

{ interface INameSpaceTreeAccessible }
  INameSpaceTreeAccessible = interface(IUnknown) 
    [SID_INameSpaceTreeAccessible]
    function OnGetDefaultAccessibilityAction(const psi: IShellItem; 
      var pbstrDefaultAction: WideString): HRESULT; stdcall;
    function OnDoDefaultAccessibilityAction(const psi: IShellItem): HRESULT; stdcall;
    function OnGetAccessibilityRole(const psi: IShellItem; 
      var pvarRole: Variant): HRESULT; stdcall;
  end;
  {$EXTERNALSYM INameSpaceTreeAccessible}

{ interface INameSpaceTreeControlCustomDraw }
type
  NSTCCUSTOMDRAW = record
    psi: IShellItem;
    uItemState: UINT;
    nstcis: NSTCITEMSTATE;
    pszText: LPCWSTR;
    iImage: Integer;
    himl: HIMAGELIST;
    iLevel: Integer;
    iIndent: Integer;
  end;
  {$EXTERNALSYM NSTCCUSTOMDRAW}
  tagNSTCCUSTOMDRAW = NSTCCUSTOMDRAW;
  {$EXTERNALSYM tagNSTCCUSTOMDRAW}
  TNSTCCustomDraw = NSTCCUSTOMDRAW;

  INameSpaceTreeControlCustomDraw = interface(IUnknown) 
    [SID_INameSpaceTreeControlCustomDraw]
    function PrePaint(hdc: HDC; var prc: TRect; 
      var plres: LRESULT): HRESULT; stdcall;
    function PostPaint(hdc: HDC; var prc: TRect): HRESULT; stdcall;
    function ItemPrePaint(hdc: HDC; var prc: TRect; var pnstccdItem: TNSTCCustomDraw; 
      var pclrText: COLORREF; var pclrTextBk: COLORREF; 
      var plres: LRESULT): HRESULT; stdcall;
    function ItemPostPaint(hdc: HDC; var prc: TRect; 
      var pnstccdItem: TNSTCCustomDraw): HRESULT; stdcall;
  end;
  {$EXTERNALSYM INameSpaceTreeControlCustomDraw}

{ interface INameSpaceTreeControlFolderCapabilities }
type
  NSTCFOLDERCAPABILITIES = Integer; 
  {$EXTERNALSYM NSTCFOLDERCAPABILITIES}
const
  NSTCFC_NONE                = 0; 
  {$EXTERNALSYM NSTCFC_NONE}
  NSTCFC_PINNEDITEMFILTERING = $1; 
  {$EXTERNALSYM NSTCFC_PINNEDITEMFILTERING}
  NSTCFC_DELAY_REGISTER_NOTIFY = $2; 
  {$EXTERNALSYM NSTCFC_DELAY_REGISTER_NOTIFY}

type
  INameSpaceTreeControlFolderCapabilities = interface(IUnknown) 
    [SID_INameSpaceTreeControlFolderCapabilities]
    function GetFolderCapabilities(
      nfcMask: NSTCFOLDERCAPABILITIES;
      var pnstcfc: NSTCFOLDERCAPABILITIES): HRESULT; stdcall;
  end;
  {$EXTERNALSYM INameSpaceTreeControlFolderCapabilities}

{ interface IPreviewHandler }
const
  E_PREVIEWHANDLER_DRM_FAIL = $86420001;
  {$EXTERNALSYM E_PREVIEWHANDLER_DRM_FAIL}
  E_PREVIEWHANDLER_NOAUTH = $86420002;
  {$EXTERNALSYM E_PREVIEWHANDLER_NOAUTH}
  E_PREVIEWHANDLER_NOTFOUND = $86420003;
  {$EXTERNALSYM E_PREVIEWHANDLER_NOTFOUND}
  E_PREVIEWHANDLER_CORRUPT = $86420004;
  {$EXTERNALSYM E_PREVIEWHANDLER_CORRUPT}

type
  IPreviewHandler = interface(IUnknown) 
    [SID_IPreviewHandler]
    function SetWindow(hwnd: HWND; var prc: TRect): HRESULT; stdcall;
    function SetRect(var prc: TRect): HRESULT; stdcall;
    function DoPreview: HRESULT; stdcall;
    function Unload: HRESULT; stdcall;
    function SetFocus: HRESULT; stdcall;
    function QueryFocus(var phwnd: HWND): HRESULT; stdcall;
    function TranslateAccelerator(var pmsg: TMsg): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IPreviewHandler}

{ interface IPreviewHandlerFrame}
type
  __MIDL_IPreviewHandlerFrame_0001 = record
    haccel: HACCEL;
    cAccelEntries : UINT;
  end;
  {$EXTERNALSYM __MIDL_IPreviewHandlerFrame_0001}
  PREVIEWHANDLERFRAMEINFO = __MIDL_IPreviewHandlerFrame_0001;
  {$EXTERNALSYM PREVIEWHANDLERFRAMEINFO}
  TPreviewHandlerFrameInfo = PREVIEWHANDLERFRAMEINFO;

  IPreviewHandlerFrame = interface(IUnknown) 
    [SID_IPreviewHandlerFrame]
    function GetWindowContext(
      var pinfo: TPreviewHandlerFrameInfo): HRESULT; stdcall;
    function TranslateAccelerator(var pmsg: TMsg): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IPreviewHandlerFrame}

{ interface ITrayDeskBand }
  ITrayDeskBand = interface(IUnknown)
    [SID_ITrayDeskBand]
    function ShowDeskBand(const clsid: TCLSID): HRESULT; stdcall;
    function HideDeskBand(const clsid: TCLSID): HRESULT; stdcall;
    function IsDeskBandShown(const clsid: TCLSID): HRESULT; stdcall;
    function DeskBandRegistrationChanged: HRESULT; stdcall;
  end;
  {$EXTERNALSYM ITrayDeskBand}

{ interface IBandHost }
  IBandHost = interface(IUnknown) 
    [SID_IBandHost]
    function CreateBand(const rclsidBand: TCLSID; fAvailable: BOOL; fVisible: BOOL; 
      const riid: TIID; out ppv): HRESULT; stdcall;
    function SetBandAvailability(const rclsidBand: TCLSID; 
      fAvailable: BOOL): HRESULT; stdcall;
    function DestroyBand(rclsidBand: TCLSID): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IBandHost}

{ interface IExplorerPaneVisibility }
type
  EXPLORERPANE = TGUID;
  {$EXTERNALSYM EXPLORERPANE}
  REFEXPLORERPANE = ^EXPLORERPANE;
  {$EXTERNALSYM REFEXPLORERPANE}

const
  EPS_DONTCARE     = 0; 
  {$EXTERNALSYM EPS_DONTCARE}
  EPS_DEFAULT_ON   = $1; 
  {$EXTERNALSYM EPS_DEFAULT_ON}
  EPS_DEFAULT_OFF  = $2; 
  {$EXTERNALSYM EPS_DEFAULT_OFF}
  EPS_STATEMASK    = $FFFF; 
  {$EXTERNALSYM EPS_STATEMASK}
  EPS_INITIALSTATE = $10000; 
  {$EXTERNALSYM EPS_INITIALSTATE}
  EPS_FORCE        = $20000; 
  {$EXTERNALSYM EPS_FORCE}
type
  EXPLORERPANESTATE = DWORD;
  {$EXTERNALSYM EXPLORERPANESTATE}
  TExplorerPaneState = EXPLORERPANESTATE;

type
  IExplorerPaneVisibility = interface(IUnknown) 
    [SID_IExplorerPaneVisibility]
    function GetPaneState(const ep: EXPLORERPANE; 
      var peps: TExplorerPaneState): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IExplorerPaneVisibility}

{ interface IContextMenuCB }
  IContextMenuCB = interface(IUnknown) 
    [SID_IContextMenuCB]
    function CallBack(const psf: IShellFolder; hwndOwner: HWND; 
      const pdtobj: IDataObject; uMsg: UINT; wParam: WPARAM; 
      lParam: LPARAM): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IContextMenuCB}

{ interface IDefaultExtractIconInit }
  IDefaultExtractIconInit = interface(IUnknown) 
    [SID_IDefaultExtractIconInit]
    function SetFlags(uFlags: UINT): HRESULT; stdcall;
    function SetKey(hkey: HKEY): HRESULT; stdcall;
    function SetNormalIcon(pszFile: LPCWSTR; iIcon: Integer): HRESULT; stdcall;
    function SetOpenIcon(pszFile: LPCWSTR; iIcon: Integer): HRESULT; stdcall;
    function SetShortcutIcon(pszFile: LPCWSTR; iIcon: Integer): HRESULT; stdcall;
    function SetDefaultIcon(pszFile: LPCWSTR; iIcon: Integer): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IDefaultExtractIconInit}

function SHCreateDefaultExtractIcon(const riid: TIID;
  out ppv): HRESULT; stdcall;
{$EXTERNALSYM SHCreateDefaultExtractIcon}

{ interface IExplorerCommand }
const
  ECS_ENABLED    = 0; 
  {$EXTERNALSYM ECS_ENABLED}
  ECS_DISABLED   = $1;
  {$EXTERNALSYM ECS_DISABLED}
  ECS_HIDDEN     = $2; 
  {$EXTERNALSYM ECS_HIDDEN}
  ECS_CHECKBOX   = $4; 
  {$EXTERNALSYM ECS_CHECKBOX}
  ECS_CHECKED    = $8; 
  {$EXTERNALSYM ECS_CHECKED}
  ECS_RADIOCHECK = $10; 
  {$EXTERNALSYM ECS_RADIOCHECK}
type
  EXPCMDSTATE = DWORD; 
  {$EXTERNALSYM EXPCMDSTATE}
  TExpCmdState = EXPCMDSTATE;

const
  ECF_DEFAULT         = 0; 
  {$EXTERNALSYM ECF_DEFAULT}
  ECF_HASSUBCOMMANDS  = $1; 
  {$EXTERNALSYM ECF_HASSUBCOMMANDS}
  ECF_HASSPLITBUTTON  = $2; 
  {$EXTERNALSYM ECF_HASSPLITBUTTON}
  ECF_HIDELABEL       = $4; 
  {$EXTERNALSYM ECF_HIDELABEL}
  ECF_ISSEPARATOR     = $8; 
  {$EXTERNALSYM ECF_ISSEPARATOR}
  ECF_HASLUASHIELD    = $10; 
  {$EXTERNALSYM ECF_HASLUASHIELD}
  ECF_SEPARATORBEFORE = $20; 
  {$EXTERNALSYM ECF_SEPARATORBEFORE}
  ECF_SEPARATORAFTER  = $40; 
  {$EXTERNALSYM ECF_SEPARATORAFTER}
  ECF_ISDROPDOWN      = $80; 
  {$EXTERNALSYM ECF_ISDROPDOWN}
type
  EXPCMDFLAGS = DWORD; 
  {$EXTERNALSYM EXPCMDFLAGS}
  TExpCmdFlags = EXPCMDFLAGS;

type
  IEnumExplorerCommand = interface;

  IExplorerCommand = interface(IUnknown) 
    [SID_IExplorerCommand]
    function GetTitle(const psiItemArray: IShellItemArray; 
      var ppszName: LPWSTR): HRESULT; stdcall;
    function GetIcon(const psiItemArray: IShellItemArray; 
      var ppszIcon: LPWSTR): HRESULT; stdcall;
    function GetToolTip(const psiItemArray: IShellItemArray; 
      var ppszInfotip: LPWSTR): HRESULT; stdcall;
    function GetCanonicalName(var pguidCommandName: TGUID): HRESULT; stdcall;
    function GetState(const psiItemArray: IShellItemArray; fOkToBeSlow: BOOL; 
      var pCmdState: TExpCmdState): HRESULT; stdcall;
    function Invoke(const psiItemArray: IShellItemArray; 
      const pbc: IBindCtx): HRESULT; stdcall;
    function GetFlags(var pFlags: TExpCmdFlags): HRESULT; stdcall;
    function EnumSubCommands(out ppEnum: IEnumExplorerCommand): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IExplorerCommand}

{ interface IExplorerCommandState }
  IExplorerCommandState = interface(IUnknown) 
    [SID_IExplorerCommandState]
    function GetState(const psiItemArray: IShellItemArray; fOkToBeSlow: BOOL; 
      var pCmdState: TExpCmdState): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IExplorerCommandState}

{ interface IInitializeCommand }
  IInitializeCommand = interface(IUnknown) 
    [SID_IInitializeCommand]
    function Initialize(pszCommandName: LPCWSTR; 
      const ppb: IPropertyBag): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInitializeCommand}

{ interface IEnumExplorerCommand }
  IEnumExplorerCommand = interface(IUnknown)
    [SID_IEnumExplorerCommand]
    function Next(celt: Cardinal; out pUICommand: IExplorerCommand; 
      var pceltFetched: Cardinal): HRESULT; stdcall;
    function Skip(celt: Cardinal): HRESULT; stdcall;
    function Reset: HRESULT; stdcall;
    function Clone(out ppenum: IEnumExplorerCommand): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IEnumExplorerCommand}

{ interface IExplorerCommandProvider }
  IExplorerCommandProvider = interface(IUnknown) 
    [SID_IExplorerCommandProvider]
    function GetCommands(const punkSite: IUnknown; const riid: TIID; 
      out ppv): HRESULT; stdcall;
    function GetCommand(const rguidCommandId: TGuid; const riid: TIID; 
      out ppv): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IExplorerCommandProvider}

{ interface IMarkupCallback }
  IMarkupCallback = interface(IUnknown) 
    [SID_IMarkupCallback]
    function GetState(dwId: DWORD; uState: UINT): HRESULT; stdcall;
    function Notify(dwId: DWORD; nCode: Integer; iLink: Integer): HRESULT; stdcall;
    function InvalidateRect(dwId: DWORD; var prc: TRect): HRESULT; stdcall;
    function OnCustomDraw(dwDrawStage: DWORD; hdc: HDC; var prc: TRect; dwId: DWORD; 
      iLink: Integer; uItemState: UINT; var pdwResult: LRESULT): HRESULT; stdcall;
    function CustomDrawText(hDC: HDC; lpString: LPCWSTR; nCount: Integer; 
      var pRect: TRect; uFormat: UINT; fLink: BOOL): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IMarkupCallback}

{ interface IControlMarkup }
type
  HTHEME = THandle; 
  {$EXTERNALSYM HTHEME}

const
  MARKUPSIZE_CALCWIDTH  = 0; 
  {$EXTERNALSYM MARKUPSIZE_CALCWIDTH}
  MARKUPSIZE_CALCHEIGHT = MARKUPSIZE_CALCWIDTH + 1; 
  {$EXTERNALSYM MARKUPSIZE_CALCHEIGHT}

  MARKUPLINKTEXT_URL  = 0; 
  {$EXTERNALSYM MARKUPLINKTEXT_URL}
  MARKUPLINKTEXT_ID   = MARKUPLINKTEXT_URL + 1; 
  {$EXTERNALSYM MARKUPLINKTEXT_ID}
  MARKUPLINKTEXT_TEXT = MARKUPLINKTEXT_ID + 1; 
  {$EXTERNALSYM MARKUPLINKTEXT_TEXT}

const
  MARKUPSTATE_FOCUSED       = $1; 
  {$EXTERNALSYM MARKUPSTATE_FOCUSED}
  MARKUPSTATE_ENABLED       = $2; 
  {$EXTERNALSYM MARKUPSTATE_ENABLED}
  MARKUPSTATE_VISITED       = $4; 
  {$EXTERNALSYM MARKUPSTATE_VISITED}
  MARKUPSTATE_HOT           = $8; 
  {$EXTERNALSYM MARKUPSTATE_HOT}
  MARKUPSTATE_DEFAULTCOLORS = $10; 
  {$EXTERNALSYM MARKUPSTATE_DEFAULTCOLORS}
  MARKUPSTATE_ALLOWMARKUP   = $40000000; 
  {$EXTERNALSYM MARKUPSTATE_ALLOWMARKUP}

  MARKUPMESSAGE_KEYEXECUTE   = 0; 
  {$EXTERNALSYM MARKUPMESSAGE_KEYEXECUTE}
  MARKUPMESSAGE_CLICKEXECUTE = MARKUPMESSAGE_KEYEXECUTE + 1; 
  {$EXTERNALSYM MARKUPMESSAGE_CLICKEXECUTE}
  MARKUPMESSAGE_WANTFOCUS    = MARKUPMESSAGE_CLICKEXECUTE + 1; 
  {$EXTERNALSYM MARKUPMESSAGE_WANTFOCUS}

type
  IControlMarkup = interface(IUnknown) 
    [SID_IControlMarkup]
    function SetCallback(const punk: IUnknown): HRESULT; stdcall;
    function GetCallback(const riid: TIID; var ppvUnk: Pointer): HRESULT; stdcall;
    function SetId(dwId: DWORD): HRESULT; stdcall;
    function GetId(var pdwId: DWORD): HRESULT; stdcall;
    function SetFonts(hFont: HFONT; hFontUnderline: HFONT): HRESULT; stdcall;
    function GetFonts(var phFont: HFONT; 
      var phFontUnderline: HFONT): HRESULT; stdcall;
    function SetText(pwszText: LPCWSTR): HRESULT; stdcall;
    function GetText(bRaw: BOOL; pwszText: LPWSTR; 
      var pdwCch: DWORD): HRESULT; stdcall;
    function SetLinkText(iLink: Integer; uMarkupLinkText: UINT; 
      pwszText: LPCWSTR): HRESULT; stdcall;
    function GetLinkText(iLink: Integer; uMarkupLinkText: UINT; pwszText: LPWSTR; 
      var pdwCch: DWORD): HRESULT; stdcall;
    function SetRenderFlags(uDT: UINT): HRESULT; stdcall;
    function GetRenderFlags(var puDT: UINT; var phTheme: HTHEME; 
      var piPartId: Integer; var piStateIdNormal: Integer; 
      var piStateIdLink: Integer): HRESULT; stdcall;
    function SetThemeRenderFlags(uDT: UINT; hTheme: HTHEME; iPartId: Integer; 
      iStateIdNormal: Integer; iStateIdLink: Integer): HRESULT; stdcall;
    function GetState(iLink: Integer; uStateMask: UINT; 
      var puState: UINT): HRESULT; stdcall;
    function SetState(iLink: Integer; uStateMask: UINT; 
      uState: UINT): HRESULT; stdcall;
    function DrawText(hdcClient: HDC; prcClient: PRect): HRESULT; stdcall;
    function SetLinkCursor: HRESULT; stdcall;
    function CalcIdealSize(hdc: HDC; uMarkUpCalc: UINT; 
      var prc: TRect): HRESULT; stdcall;
    function SetFocus: HRESULT; stdcall;
    function KillFocus: HRESULT; stdcall;
    function IsTabbable: HRESULT; stdcall;
    function OnButtonDown(pt: TPoint): HRESULT; stdcall;
    function OnButtonUp(pt: TPoint): HRESULT; stdcall;
    function OnKeyDown(uVirtKey: UINT): HRESULT; stdcall;
    function HitTest(pt: TPoint; var piLink: Integer): HRESULT; stdcall;
    function GetLinkRect(iLink: Integer; var prc: TRect): HRESULT; stdcall;
    function GetControlRect(var prcControl: TRect): HRESULT; stdcall;
    function GetLinkCount(var pcLinks: UINT): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IControlMarkup}

{ interface IInitializeNetworkFolder }
  IInitializeNetworkFolder = interface(IUnknown) 
    [SID_IInitializeNetworkFolder]
    function Initialize(pidl: PItemIDList; pidlTarget: PItemIDList; 
      uDisplayType: UINT; pszResName: LPCWSTR; 
      pszProvider: LPCWSTR): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInitializeNetworkFolder}

{ interface IOpenControlPanel }
const
  CPVIEW_CLASSIC  = 0; 
  {$EXTERNALSYM CPVIEW_CLASSIC}
  CPVIEW_ALLITEMS = CPVIEW_CLASSIC; 
  {$EXTERNALSYM CPVIEW_ALLITEMS}
  CPVIEW_CATEGORY = 1; 
  {$EXTERNALSYM CPVIEW_CATEGORY}
  CPVIEW_HOME     = CPVIEW_CATEGORY; 
  {$EXTERNALSYM CPVIEW_HOME}

type
  IOpenControlPanel = interface(IUnknown) 
    [SID_IOpenControlPanel]
    function Open(pszName: LPCWSTR; pszPage: LPCWSTR; 
      const punkSite: IUnknown): HRESULT; stdcall;
    function GetPath(pszName: LPCWSTR; pszPath: LPWSTR; 
      cchPath: UINT): HRESULT; stdcall;
    function GetCurrentView(var pView: Integer): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IOpenControlPanel}

{ interface IComputerInfoChangeNotify }
  IComputerInfoChangeNotify = interface(IUnknown) 
    [SID_IComputerInfoChangeNotify]
    function ComputerInfoChanged: HRESULT; stdcall;
  end;
  {$EXTERNALSYM IComputerInfoChangeNotify}

{ interface IFileSystemBindData }
const
  STR_FILE_SYS_BIND_DATA = 'File System Bind Data'; 
  {$EXTERNALSYM STR_FILE_SYS_BIND_DATA}
type
  IFileSystemBindData = interface(IUnknown) 
    [SID_IFileSystemBindData]
    function SetFindData(var pfd: TWin32FindDataW): HRESULT; stdcall;
    function GetFindData(var pfd: TWin32FindDataW): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IFileSystemBindData}

{ interface IFileSystemBindData2 }
  IFileSystemBindData2 = interface(IFileSystemBindData) 
    [SID_IFileSystemBindData2]
    function SetFileID(liFileID: TLargeInteger): HRESULT; stdcall;
    function GetFileID(var pliFileID: TLargeInteger): HRESULT; stdcall;
    function SetJunctionCLSID(const clsid: TCLSID): HRESULT; stdcall;
    function GetJunctionCLSID(out pclsid: TCLSID): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IFileSystemBindData2}

{ interface ICustomDestinationList }
const
  KDC_FREQUENT = 1; 
  {$EXTERNALSYM KDC_FREQUENT}
  KDC_RECENT   = KDC_FREQUENT + 1; 
  {$EXTERNALSYM KDC_RECENT}

type
  ICustomDestinationList = interface(IUnknown) 
    [SID_ICustomDestinationList]
    function SetAppID(pszAppID: LPCWSTR): HRESULT; stdcall;
    function BeginList(var pcMaxSlots: UINT; const riid: TIID; 
      out ppv): HRESULT; stdcall;
    function AppendCategory(pszCategory: LPCWSTR; 
      const poa: IObjectArray): HRESULT; stdcall;
    function AppendKnownCategory(category: Integer): HRESULT; stdcall;
    function AddUserTasks(const poa: IObjectArray): HRESULT; stdcall;
    function CommitList: HRESULT; stdcall;
    function GetRemovedDestinations(const riid: TIID; 
      out ppv): HRESULT; stdcall;
    function DeleteList(pszAppID: LPCWSTR): HRESULT; stdcall;
    function AbortList: HRESULT; stdcall;
  end;
  {$EXTERNALSYM ICustomDestinationList}

{ interface IApplicationDestinations }
  IApplicationDestinations = interface(IUnknown) 
    [SID_IApplicationDestinations]
    function SetAppID(pszAppID: LPCWSTR): HRESULT; stdcall;
    function RemoveDestination(const punk: IUnknown): HRESULT; stdcall;
    function RemoveAllDestinations: HRESULT; stdcall;
  end;
  {$EXTERNALSYM IApplicationDestinations}

{ interface IApplicationDocumentLists }
const
  ADLT_RECENT   = 0; 
  {$EXTERNALSYM ADLT_RECENT}
  ADLT_FREQUENT = ADLT_RECENT + 1; 
  {$EXTERNALSYM ADLT_FREQUENT}

type
  IApplicationDocumentLists = interface(IUnknown) 
    [SID_IApplicationDocumentLists]
    function SetAppID(pszAppID: LPCWSTR): HRESULT; stdcall;
    function GetList(listtype: Integer; cItemsDesired: UINT; 
      const riid: TIID; out ppv): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IApplicationDocumentLists}

{ interface IObjectWithAppUserModelID }
  IObjectWithAppUserModelID = interface(IUnknown) 
    [SID_IObjectWithAppUserModelID]
    function SetAppID(pszAppID: LPCWSTR): HRESULT; stdcall;
    function GetAppID(var ppszAppID: LPWSTR): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IObjectWithAppUserModelID}

{ interface IObjectWithProgID }
  IObjectWithProgID = interface(IUnknown) 
    [SID_IObjectWithProgID]
    function SetProgID(pszProgID: LPCWSTR): HRESULT; stdcall;
    function GetProgID(var ppszProgID: LPWSTR): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IObjectWithProgID}

{ interface IUpdateIDList }
  IUpdateIDList = interface(IUnknown) 
    [SID_IUpdateIDList]
    function Update(const pbc: IBindCtx; pidlIn: PItemIDList; 
      var ppidlOut: PItemIDList): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IUpdateIDList}

function SetCurrentProcessExplicitAppUserModelID(
  AppID: LPCWSTR): HResult; stdcall;
{$EXTERNALSYM SetCurrentProcessExplicitAppUserModelID}
function GetCurrentProcessExplicitAppUserModelID(
  var AppID: LPWSTR): HResult; stdcall;
{$EXTERNALSYM GetCurrentProcessExplicitAppUserModelID}

{ interface IDesktopGadget }
type
  IDesktopGadget = interface(IUnknown) 
    [SID_IDesktopGadget]
    function RunGadget(gadgetPath: LPCWSTR): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IDesktopGadget}

{ interface IHomeGroup }
const
  HOMEGROUP_SECURITY_GROUP = 'HomeUsers'; 
  {$EXTERNALSYM HOMEGROUP_SECURITY_GROUP}
type
  HOMEGROUPSHARINGCHOICES = Integer; 
  {$EXTERNALSYM HOMEGROUPSHARINGCHOICES}
  THomeGroupSharingChoices = HOMEGROUPSHARINGCHOICES;
const
  HGSC_NONE             = 0; 
  {$EXTERNALSYM HGSC_NONE}
  HGSC_MUSICLIBRARY     = $1; 
  {$EXTERNALSYM HGSC_MUSICLIBRARY}
  HGSC_PICTURESLIBRARY  = $2; 
  {$EXTERNALSYM HGSC_PICTURESLIBRARY}
  HGSC_VIDEOSLIBRARY    = $4; 
  {$EXTERNALSYM HGSC_VIDEOSLIBRARY}
  HGSC_DOCUMENTSLIBRARY = $8; 
  {$EXTERNALSYM HGSC_DOCUMENTSLIBRARY}
  HGSC_PRINTERS         = $10; 
  {$EXTERNALSYM HGSC_PRINTERS}

type
  IHomeGroup = interface(IUnknown) 
    [SID_IHomeGroup]
    function IsMember(var member: BOOL): HRESULT; stdcall;

    function ShowSharingWizard(owner: HWND; 
      var sharingchoices: THomeGroupSharingChoices): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IHomeGroup}

{ interface IInitializeWithPropertyStore }
  IInitializeWithPropertyStore = interface(IUnknown) 
    [SID_IInitializeWithPropertyStore]
    function Initialize(const pps: IPropertyStore): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInitializeWithPropertyStore}

{ interface IOpenSearchSource }
  IOpenSearchSource = interface(IUnknown) 
    [SID_IOpenSearchSource]
    function GetResults(hwnd: HWND; pszQuery: LPCWSTR; dwStartIndex: DWORD; 
      dwCount: DWORD; const riid: TIID; out ppv): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IOpenSearchSource}

{ interface IShellLibrary }
const
  LFF_FORCEFILESYSTEM = 1; 
  {$EXTERNALSYM LFF_FORCEFILESYSTEM}
  LFF_STORAGEITEMS    = 2; 
  {$EXTERNALSYM LFF_STORAGEITEMS}
  LFF_ALLITEMS        = 3; 
  {$EXTERNALSYM LFF_ALLITEMS}

const
  LOF_DEFAULT         = 0; 
  {$EXTERNALSYM LOF_DEFAULT}
  LOF_PINNEDTONAVPANE = $1; 
  {$EXTERNALSYM LOF_PINNEDTONAVPANE}
  LOF_MASK_ALL        = $1; 
  {$EXTERNALSYM LOF_MASK_ALL}

const
  DSFT_DETECT  = 1; 
  {$EXTERNALSYM DSFT_DETECT}
  DSFT_PRIVATE = DSFT_DETECT + 1; 
  {$EXTERNALSYM DSFT_PRIVATE}
  DSFT_PUBLIC  = DSFT_PRIVATE + 1; 
  {$EXTERNALSYM DSFT_PUBLIC}

type
  LIBRARYSAVEFLAGS = UInt;
  {$EXTERNALSYM LIBRARYSAVEFLAGS}
  TLibrarySaveFlags = LIBRARYSAVEFLAGS;
  {$EXTERNALSYM TLibrarySaveFlags}

{ LIBRARYSAVEFLAGS values }
const
  LSF_FAILIFTHERE      = 0; 
  {$EXTERNALSYM LSF_FAILIFTHERE}
  LSF_OVERRIDEEXISTING = $1; 
  {$EXTERNALSYM LSF_OVERRIDEEXISTING}
  LSF_MAKEUNIQUENAME   = $2; 
  {$EXTERNALSYM LSF_MAKEUNIQUENAME}

type
  IShellLibrary = interface(IUnknown) 
    [SID_IShellLibrary]
    function LoadLibraryFromItem(const psiLibrary: IShellItem; 
      grfMode: DWORD): HRESULT; stdcall;
    function LoadLibraryFromKnownFolder(const kfidLibrary: TIID; 
      grfMode: DWORD): HRESULT; stdcall;
    function AddFolder(const psiLocation: IShellItem): HRESULT; stdcall;
    function RemoveFolder(const psiLocation: IShellItem): HRESULT; stdcall;
    function GetFolders(lff: Integer; const riid: TIID; 
      out ppv): HRESULT; stdcall;
    function ResolveFolder(const psiFolderToResolve: IShellItem; dwTimeout: DWORD; 
      const riid: TIID; out ppv): HRESULT; stdcall;
    function GetDefaultSaveFolder(dsft: Integer; const riid: TIID; 
      out ppv): HRESULT; stdcall;
    function SetDefaultSaveFolder(dsft: Integer; 
      var psi: IShellItem): HRESULT; stdcall;
    function GetOptions(var plofOptions: Integer): HRESULT; stdcall;
    function SetOptions(lofMask, lofOptions: Integer): HRESULT; stdcall;
    function GetFolderType(var pftid: TFolderTypeID): HRESULT; stdcall;
    function SetFolderType(const ftid: TFolderTypeID): HRESULT; stdcall;
    function GetIcon(var ppszIcon: LPWSTR): HRESULT; stdcall;
    function SetIcon(pszIcon: LPCWSTR): HRESULT; stdcall;
    function Commit: HRESULT; stdcall;
    function Save(const psiFolderToSaveIn: IShellItem; pszLibraryName: LPCWSTR; 
      lsf: Integer; out ppsiSavedTo: IShellItem): HRESULT; stdcall;
    function SaveInKnownFolder(const kfidToSaveIn: TIID; pszLibraryName: LPCWSTR; 
      lsf: Integer; out ppsiSavedTo: IShellItem): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IShellLibrary}

{ library ShellObjects }
const
  SID_PublishingWizard_TEXT      = '{6b33163c-76a5-4b6c-bf21-45de9cd503a1}';
  SID_PublishingWizard: TGUID    = SID_PublishingWizard_TEXT; 
  {$EXTERNALSYM SID_PublishingWizard}
  CLSID_PublishingWizard: TGUID  = SID_PublishingWizard_TEXT;
  {$EXTERNALSYM CLSID_PublishingWizard}
  //
  CLSID_ShellDesktop: TGUID                           = '{00021400-0000-0000-C000-000000000046}';
  {$EXTERNALSYM CLSID_ShellDesktop}
  CLSID_ShellFSFolder: TGUID                          = '{F3364BA0-65B9-11CE-A9BA-00AA004AE837}';
  {$EXTERNALSYM CLSID_ShellFSFolder}
  CLSID_NetworkPlaces: TGUID                          = '{208D2C60-3AEA-1069-A2D7-08002B30309D}';
  {$EXTERNALSYM CLSID_NetworkPlaces}
  CLSID_ShellLink: TGUID                              = '{00021401-0000-0000-C000-000000000046}';
  {$EXTERNALSYM CLSID_ShellLink}
  CLSID_QueryCancelAutoPlay: TGUID                    = '{331F1768-05A9-4ddd-B86E-DAE34DDC998A}';
  {$EXTERNALSYM CLSID_QueryCancelAutoPlay}
  CLSID_DriveSizeCategorizer: TGUID                   = '{94357B53-CA29-4b78-83AE-E8FE7409134F}';
  {$EXTERNALSYM CLSID_DriveSizeCategorizer}
  CLSID_DriveTypeCategorizer: TGUID                   = '{B0A8F3CF-4333-4bab-8873-1CCB1CADA48B}';
  {$EXTERNALSYM CLSID_DriveTypeCategorizer}
  CLSID_FreeSpaceCategorizer: TGUID                   = '{B5607793-24AC-44c7-82E2-831726AA6CB7}';
  {$EXTERNALSYM CLSID_FreeSpaceCategorizer}
  CLSID_TimeCategorizer: TGUID                        = '{3bb4118f-ddfd-4d30-a348-9fb5d6bf1afe}';
  {$EXTERNALSYM CLSID_TimeCategorizer}
  CLSID_SizeCategorizer: TGUID                        = '{55d7b852-f6d1-42f2-aa75-8728a1b2d264}';
  {$EXTERNALSYM CLSID_SizeCategorizer}
  CLSID_AlphabeticalCategorizer: TGUID                = '{3c2654c6-7372-4f6b-b310-55d6128f49d2}';
  {$EXTERNALSYM CLSID_AlphabeticalCategorizer}
  CLSID_MergedCategorizer: TGUID                      = '{8e827c11-33e7-4bc1-b242-8cd9a1c2b304}';
  {$EXTERNALSYM CLSID_MergedCategorizer}
  CLSID_ImageProperties: TGUID                        = '{7ab770c7-0e23-4d7a-8aa2-19bfad479829}';
  {$EXTERNALSYM CLSID_ImageProperties}
  CLSID_PropertiesUI: TGUID                           = '{d912f8cf-0396-4915-884e-fb425d32943b}';
  {$EXTERNALSYM CLSID_PropertiesUI}
  CLSID_UserNotification: TGUID                       = '{0010890e-8789-413c-adbc-48f5b511b3af}';
  {$EXTERNALSYM CLSID_UserNotification}
  CLSID_CDBurn: TGUID                                 = '{fbeb8a05-beee-4442-804e-409d6c4515e9}';
  {$EXTERNALSYM CLSID_CDBurn}
  CLSID_TaskbarList: TGUID                            = '{56FDF344-FD6D-11d0-958A-006097C9A090}';
  {$EXTERNALSYM CLSID_TaskbarList}
  CLSID_StartMenuPin: TGUID                           = '{a2a9545d-a0c2-42b4-9708-a0b2badd77c8}';
  {$EXTERNALSYM CLSID_StartMenuPin}
  CLSID_WebWizardHost: TGUID                          = '{c827f149-55c1-4d28-935e-57e47caed973}';
  {$EXTERNALSYM CLSID_WebWizardHost}
  CLSID_PublishDropTarget: TGUID                      = '{CC6EEFFB-43F6-46c5-9619-51D571967F7D}';
  {$EXTERNALSYM CLSID_PublishDropTarget}
  CLSID_InternetPrintOrdering: TGUID                  = '{add36aa8-751a-4579-a266-d66f5202ccbb}';
  {$EXTERNALSYM CLSID_InternetPrintOrdering}
  CLSID_FolderViewHost: TGUID                         = '{20b1cb23-6968-4eb9-b7d4-a66d00d07cee}';
  {$EXTERNALSYM CLSID_FolderViewHost}
  CLSID_ExplorerBrowser: TGUID                        = '{71f96385-ddd6-48d3-a0c1-ae06e8b055fb}';
  {$EXTERNALSYM CLSID_ExplorerBrowser}
  CLSID_ImageRecompress: TGUID                        = '{6e33091c-d2f8-4740-b55e-2e11d1477a2c}';
  {$EXTERNALSYM CLSID_ImageRecompress}
  CLSID_TrayBandSiteService: TGUID                    = '{F60AD0A0-E5E1-45cb-B51A-E15B9F8B2934}';
  {$EXTERNALSYM CLSID_TrayBandSiteService}
  CLSID_TrayDeskBand: TGUID                           = '{E6442437-6C68-4f52-94DD-2CFED267EFB9}';
  {$EXTERNALSYM CLSID_TrayDeskBand}
  CLSID_AttachmentServices: TGUID                     = '{4125dd96-e03a-4103-8f70-e0597d803b9c}';
  {$EXTERNALSYM CLSID_AttachmentServices}
  CLSID_DocPropShellExtension: TGUID                  = '{883373C3-BF89-11D1-BE35-080036B11A03}';
  {$EXTERNALSYM CLSID_DocPropShellExtension}
  CLSID_ShellItem: TGUID                              = '{9ac9fbe1-e0a2-4ad6-b4ee-e212013ea917}';
  {$EXTERNALSYM CLSID_ShellItem}
  CLSID_NamespaceWalker: TGUID                        = '{72eb61e0-8672-4303-9175-f2e4c68b2e7c}';
  {$EXTERNALSYM CLSID_NamespaceWalker}
  CLSID_FileOperation: TGUID                          = '{3ad05575-8857-4850-9277-11b85bdb8e09}';
  {$EXTERNALSYM CLSID_FileOperation}
  CLSID_FileOpenDialog: TGUID                         = '{DC1C5A9C-E88A-4dde-A5A1-60F82A20AEF7}';
  {$EXTERNALSYM CLSID_FileOpenDialog}
  CLSID_FileSaveDialog: TGUID                         = '{C0B4E2F3-BA21-4773-8DBA-335EC946EB8B}';
  {$EXTERNALSYM CLSID_FileSaveDialog}
  CLSID_KnownFolderManager: TGUID                     = '{4df0c730-df9d-4ae3-9153-aa6b82e9795a}';
  {$EXTERNALSYM CLSID_KnownFolderManager}
  CLSID_FSCopyHandler: TGUID                          = '{D197380A-0A79-4dc8-A033-ED882C2FA14B}';
  {$EXTERNALSYM CLSID_FSCopyHandler}
  CLSID_SharingConfigurationManager: TGUID            = '{49F371E1-8C5C-4d9c-9A3B-54A6827F513C}';
  {$EXTERNALSYM CLSID_SharingConfigurationManager}
  CLSID_PreviousVersions: TGUID                       = '{596AB062-B4D2-4215-9F74-E9109B0A8153}';
  {$EXTERNALSYM CLSID_PreviousVersions}
  CLSID_NetworkConnections: TGUID                     = '{7007ACC7-3202-11D1-AAD2-00805FC1270E}';
  {$EXTERNALSYM CLSID_NetworkConnections}
  CLSID_NamespaceTreeControl: TGUID                   = '{AE054212-3535-4430-83ED-D501AA6680E6}';
  {$EXTERNALSYM CLSID_NamespaceTreeControl}
  CLSID_IENamespaceTreeControl: TGUID                 = '{ACE52D03-E5CD-4b20-82FF-E71B11BEAE1D}';
  {$EXTERNALSYM CLSID_IENamespaceTreeControl}
  CLSID_ScheduledTasks: TGUID                         = '{D6277990-4C6A-11CF-8D87-00AA0060F5BF}';
  {$EXTERNALSYM CLSID_ScheduledTasks}
  CLSID_ApplicationAssociationRegistration: TGUID     = '{591209c7-767b-42b2-9fba-44ee4615f2c7}';
  {$EXTERNALSYM CLSID_ApplicationAssociationRegistration}
  CLSID_ApplicationAssociationRegistrationUI: TGUID   = '{1968106d-f3b5-44cf-890e-116fcb9ecef1}';
  {$EXTERNALSYM CLSID_ApplicationAssociationRegistrationUI}
  CLSID_SearchFolderItemFactory: TGUID                = '{14010e02-bbbd-41f0-88e3-eda371216584}';
  {$EXTERNALSYM CLSID_SearchFolderItemFactory}
  CLSID_OpenControlPanel: TGUID                       = '{06622D85-6856-4460-8DE1-A81921B41C4B}';
  {$EXTERNALSYM CLSID_OpenControlPanel}
  CLSID_MailRecipient: TGUID                          = '{9E56BE60-C50F-11CF-9A2C-00A0C90A90CE}';
  {$EXTERNALSYM CLSID_MailRecipient}
  CLSID_NetworkExplorerFolder: TGUID                  = '{F02C1A0D-BE21-4350-88B0-7367FC96EF3C}';
  {$EXTERNALSYM CLSID_NetworkExplorerFolder}
  CLSID_DestinationList: TGUID                        = '{77f10cf0-3db5-4966-b520-b7c54fd35ed6}';
  {$EXTERNALSYM CLSID_DestinationList}
  CLSID_ApplicationDestinations: TGUID                = '{86c14003-4d6b-4ef3-a7b4-0506663b2e68}';
  {$EXTERNALSYM CLSID_ApplicationDestinations}
  CLSID_ApplicationDocumentLists: TGUID               = '{86bec222-30f2-47e0-9f25-60d11cd75c28}';
  {$EXTERNALSYM CLSID_ApplicationDocumentLists}
  CLSID_HomeGroup: TGUID                              = '{DE77BA04-3C92-4d11-A1A5-42352A53E0E3}';
  {$EXTERNALSYM CLSID_HomeGroup}
  CLSID_ShellLibrary: TGUID                           = '{d9b3211d-e57f-4426-aaef-30a806add397}';
  {$EXTERNALSYM CLSID_ShellLibrary}
  CLSID_AppStartupLink: TGUID                         = '{273eb5e7-88b0-4843-bfef-e2c81d43aae5}';
  {$EXTERNALSYM CLSID_AppStartupLink}
  CLSID_EnumerableObjectCollection: TGUID             = '{2d3468c1-36a7-43b6-ac24-d3f02fd9607a}';
  {$EXTERNALSYM CLSID_EnumerableObjectCollection}
  CLSID_DesktopGadget: TGUID                          = '{924ccc1b-6562-4c85-8657-d177925222b6}';
  {$EXTERNALSYM CLSID_DesktopGadget}

function SHGetTemporaryPropertyForItem(var psi: IShellItem;
  const propkey: TPropertyKey; var ppropvar: TPropVariant): HResult; stdcall;
{$EXTERNALSYM SHGetTemporaryPropertyForItem}
function SHSetTemporaryPropertyForItem(var psi: IShellItem;
  const propkey: TPropertyKey; const propvar: TPropVariant): HResult; stdcall;
{$EXTERNALSYM SHSetTemporaryPropertyForItem}

const
  LMD_DEFAULT                   = 0; 
  {$EXTERNALSYM LMD_DEFAULT}
  LMD_ALLOWUNINDEXABLELOCATIONS = $1; 
  {$EXTERNALSYM LMD_ALLOWUNINDEXABLELOCATIONS}

function SHShowManageLibraryUI(const psiLibrary: IShellItem; hwndOwner: HWND;
  pszTitle: LPCWSTR; pszInstruction: LPCWSTR;
  lmdOptions: Integer): HResult; stdcall;
{$EXTERNALSYM SHShowManageLibraryUI}
function SHResolveLibrary(const psiLibrary: IShellItem): HResult; stdcall;
{$EXTERNALSYM SHResolveLibrary}

function SHCreateLibrary(const riid: TIID; var ppv: Pointer): HResult;  inline;
{$EXTERNALSYM SHCreateLibrary}
function SHLoadLibraryFromItem(const psiLibrary: IShellItem; grfMode: DWORD;
  const riid: TIID; var ppv: Pointer): HResult; inline;
{$EXTERNALSYM SHLoadLibraryFromItem}
function SHLoadLibraryFromKnownFolder(const kfidLibrary: TIID; grfMode: DWORD;
  const riid: TIID; var ppv: Pointer): HResult; inline;
{$EXTERNALSYM SHLoadLibraryFromKnownFolder}
function SHLoadLibraryFromParsingName(pszParsingName: LPCWSTR; grfMode: DWORD;
  const riid: TIID; var ppv: Pointer): HResult; inline;
{$EXTERNALSYM SHLoadLibraryFromParsingName}
function SHAddFolderPathToLibrary(const plib: IShellLibrary;
  pszFolderPath: LPCWSTR): HResult; inline;
{$EXTERNALSYM SHAddFolderPathToLibrary}
function SHRemoveFolderPathFromLibrary(const plib: IShellLibrary;
  pszFolderPath: LPCWSTR): HResult; inline;
{$EXTERNALSYM SHRemoveFolderPathFromLibrary}
function SHResolveFolderPathInLibrary(const plib: IShellLibrary;
  pszFolderPath: LPCWSTR; dwTimeout: DWORD;
  var ppszResolvedPath: LPWSTR): HResult; inline;
{$EXTERNALSYM SHResolveFolderPathInLibrary}
function SHSaveLibraryInFolderPath(const plib: IShellLibrary;
  pszFolderPath: LPCWSTR; pszLibraryName: LPCWSTR; lsf: TLibrarySaveFlags;
  var ppszSavedToPath: LPWSTR): HResult; inline;
{$EXTERNALSYM SHSaveLibraryInFolderPath}

{ interface IAssocHandlerInvoker }
type
  IAssocHandlerInvoker = interface(IUnknown) 
    [SID_IAssocHandlerInvoker]
    function SupportsSelection: HRESULT; stdcall;
    function Invoke: HRESULT; stdcall;
  end;
  {$EXTERNALSYM IAssocHandlerInvoker}

{ interface IAssocHandler }
  IAssocHandler = interface(IUnknown) 
    [SID_IAssocHandler]
    function GetName(var ppsz: LPWSTR): HRESULT; stdcall;
    function GetUIName(var ppsz: LPWSTR): HRESULT; stdcall;
    function GetIconLocation(var ppszPath: LPWSTR; 
      var pIndex: Integer): HRESULT; stdcall;
    function IsRecommended: HRESULT; stdcall;
    function MakeDefault(pszDescription: LPCWSTR): HRESULT; stdcall;
    function Invoke(const pdo: IDataObject): HRESULT; stdcall;
    function CreateInvoker(const pdo: IDataObject; 
      out ppInvoker: IAssocHandlerInvoker): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IAssocHandler}

{ interface IEnumAssocHandlers }
  IEnumAssocHandlers = interface(IUnknown)
    [SID_IEnumAssocHandlers]
    function Next(celt: Cardinal; out rgelt: IAssocHandler; 
      var pceltFetched: Cardinal): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IEnumAssocHandlers}

type
  tagASSOC_FILTER = Integer;
  {$EXTERNALSYM tagASSOC_FILTER}
const
  ASSOC_FILTER_NONE        = 0; 
  {$EXTERNALSYM ASSOC_FILTER_NONE}
  ASSOC_FILTER_RECOMMENDED = $1; 
  {$EXTERNALSYM ASSOC_FILTER_RECOMMENDED}
type
  ASSOC_FILTER = tagASSOC_FILTER; 
  {$EXTERNALSYM ASSOC_FILTER}
  TAssocFilter = ASSOC_FILTER;

function SHAssocEnumHandlers(pszExtra: LPCWSTR; afFilter: TAssocFilter;
  out ppEnumHandler: IEnumAssocHandlers): HResult; stdcall;
{$EXTERNALSYM SHAssocEnumHandlers}
function SHAssocEnumHandlersForProtocolByApplication(protocol: LPCWSTR;
  const riid: TIID; var enumHandlers: Pointer): HResult; stdcall;
{$EXTERNALSYM SHAssocEnumHandlersForProtocolByApplication}


// Tranlated from: shlobj.h
const
  SID_IExtractIconA               = '{000214EB-0000-0000-C000-000000000046}';
  SID_IExtractIconW               = '{000214FA-0000-0000-C000-000000000046}';
  SID_IShellIconOverlayIdentifier = '{0C6C4200-C589-11D0-999A-00C04FD655E1}';
  SID_IShellIconOverlayManager    = '{F10B5E34-DD3B-42A7-AA7D-2F4EC54BB09B}';
  SID_IShellIconOverlay           = '{7D688A70-C613-11D0-999B-00C04FD655E1}';
  SID_IShellExecuteHookA          = '{000214F5-0000-0000-C000-000000000046}';
  SID_IShellExecuteHookW          = '{000214FB-0000-0000-C000-000000000046}';
  SID_IURLSearchHook              = '{AC60F6A0-0FD9-11D0-99CB-00C04FD64497}';
  SID_ISearchContext              = '{09F656A2-41AF-480C-88F7-16CC0D164615}'; 
  SID_IURLSearchHook2             = '{5EE44DA4-6D32-46E3-86BC-07540DEDD0E0}'; 
  SID_INewShortcutHookA           = '{000214E1-0000-0000-C000-000000000046}';
  SID_INewShortcutHookW           = '{000214F7-0000-0000-C000-000000000046}';
  SID_ICopyHookA                  = '{000214EF-0000-0000-C000-000000000046}';
  SID_ICopyHookW                  = '{000214FC-0000-0000-C000-000000000046}';
  SID_IShellCopyHookA             = SID_ICopyHookA;
  SID_IShellCopyHookW             = SID_ICopyHookW;
  SID_IFileViewerSite             = '{000214F3-0000-0000-C000-000000000046}';
  SID_IFileViewerA                = '{000214F0-0000-0000-C000-000000000046}';
  SID_IFileViewerW                = '{000214F8-0000-0000-C000-000000000046}';
  SID_IShellDetails               = '{000214EC-0000-0000-C000-000000000046}';
  SID_IObjMgr                     = '{00BB2761-6A77-11D0-A535-00C04FD7D062}'; 
  SID_ICurrentWorkingDirectory    = '{91956D21-9276-11D1-921A-006097DF5BD4}'; 
  SID_IACList                     = '{77A130B0-94FD-11D0-A544-00C04FD7D062}'; 
  SID_IACList2                    = '{470141A0-5186-11D2-BBB6-0060977B464C}'; 
  SID_IProgressDialog             = '{EBBC7C04-315E-11D2-B62F-006097DF5BD4}';
  SID_IDockingWindowSite          = '{2A342FC2-7B26-11D0-8CA9-00A0C92DBFE8}';
  SID_IDockingWindowFrame         = '{47D2657A-7B27-11D0-8CA9-00A0C92DBFE8}';
  SID_IThumbnailCapture           = '{4EA39266-7211-409F-B622-F63DBD16C533}'; 
  SID_IEnumShellImageStore        = '{6DFD582B-92E3-11D1-98A3-00C04FB687DA}'; 
  SID_IShellImageStore            = '{48C8118C-B924-11D1-98D5-00C04FB687DA}'; 
  SID_IShellFolderBand            = '{7FE80CC8-C247-11D0-B93A-00A0C90312E1}'; 
  SID_IDeskBarClient              = '{EB0FE175-1A3A-11D0-89B3-00A0C90A90AC}'; 
  SID_IActiveDesktop              = '{F490EB00-1240-11D1-9888-006097DEACF9}';
  SID_IActiveDesktopP             = '{52502EE0-EC80-11D0-89AB-00C04FC2972D}'; 
  SID_IADesktopP2                 = '{B22754E2-4574-11D1-9888-006097DEACF9}'; 
  SID_IColumnProvider             = '{E8025004-1C42-11D2-BE2C-00A0C9A83DA1}'; 
  SID_IShellChangeNotify          = '{D82BE2B1-5764-11D0-A96E-00C04FD705A2}';
  SID_IQueryInfo                  = '{00021500-0000-0000-C000-000000000046}';
  SID_IDefViewFrame               = '{710EB7A0-45ED-11D0-924A-0020AFC7AC4D}'; 
  SID_IDocViewSite                = '{87D605E0-C511-11CF-89A9-00A0C9054129}'; 
  SID_IInitializeObject           = '{4622AD16-FF23-11D0-8D34-00A0C90F2719}'; 
  SID_IBanneredBar                = '{596A9A94-013E-11D1-8D34-00A0C90F2719}'; 
  SID_IShellFolderViewCB          = '{2047E320-F2A9-11CE-AE65-08002B2E1262}'; 
  SID_IShellFolderView            = '{37A378C0-F82D-11CE-AE65-08002B2E1262}'; 
  SID_INamedPropertyBag           = '{FB700430-952C-11D1-946F-000000000000}'; 
  SID_IEnumPrivacyRecords         = '{3050F844-98B5-11CF-BB82-00AA00BDCE0B}'; 

  IID_IExtractIconA               : TGUID = SID_IExtractIconA;
  {$EXTERNALSYM IID_IExtractIconA}
  IID_IExtractIconW               : TGUID = SID_IExtractIconW;
  {$EXTERNALSYM IID_IExtractIconW}
  IID_IShellIconOverlayIdentifier : TGUID = SID_IShellIconOverlayIdentifier;
  {$EXTERNALSYM IID_IShellIconOverlayIdentifier}
  IID_IShellIconOverlayManager    : TGUID = SID_IShellIconOverlayManager;
  {$EXTERNALSYM IID_IShellIconOverlayManager}
  IID_IShellIconOverlay           : TGUID = SID_IShellIconOverlay;
  {$EXTERNALSYM IID_IShellIconOverlay}
  IID_IShellExecuteHookA          : TGUID = SID_IShellExecuteHookA;
  {$EXTERNALSYM IID_IShellExecuteHookA}
  IID_IShellExecuteHookW          : TGUID = SID_IShellExecuteHookW;
  {$EXTERNALSYM IID_IShellExecuteHookW}
  IID_IURLSearchHook              : TGUID = SID_IURLSearchHook;
  {$EXTERNALSYM IID_IURLSearchHook}
  IID_ISearchContext              : TGUID = SID_ISearchContext;
  {$EXTERNALSYM IID_ISearchContext}
  IID_IURLSearchHook2             : TGUID = SID_IURLSearchHook2;
  {$EXTERNALSYM IID_IURLSearchHook2}
  IID_INewShortcutHookA           : TGUID = SID_INewShortcutHookA;
  {$EXTERNALSYM IID_INewShortcutHookA}
  IID_INewShortcutHookW           : TGUID = SID_INewShortcutHookW;
  {$EXTERNALSYM IID_INewShortcutHookW}
  IID_ICopyHookA                  : TGUID = SID_ICopyHookA;
  {$EXTERNALSYM IID_ICopyHookA}
  IID_ICopyHookW                  : TGUID = SID_ICopyHookW;
  {$EXTERNALSYM IID_ICopyHookW}
  IID_IFileViewerSite             : TGUID = SID_IFileViewerSite;
  {$EXTERNALSYM IID_IFileViewerSite}
  IID_IFileViewerA                : TGUID = SID_IFileViewerA;
  {$EXTERNALSYM IID_IFileViewerA}
  IID_IFileViewerW                : TGUID = SID_IFileViewerW;
  {$EXTERNALSYM IID_IFileViewerW}
  IID_IShellDetails               : TGUID = SID_IShellDetails;
  {$EXTERNALSYM IID_IShellDetails}
  IID_IObjMgr                     : TGUID = SID_IObjMgr;
  {$EXTERNALSYM IID_IObjMgr}
  IID_ICurrentWorkingDirectory    : TGUID = SID_ICurrentWorkingDirectory;
  {$EXTERNALSYM IID_ICurrentWorkingDirectory}
  IID_IACList                     : TGUID = SID_IACList;
  {$EXTERNALSYM IID_IACList}
  IID_IACList2                    : TGUID = SID_IACList2;
  {$EXTERNALSYM IID_IACList2}
  IID_IProgressDialog             : TGUID = SID_IProgressDialog;
  {$EXTERNALSYM IID_IProgressDialog}
  IID_IDockingWindowSite          : TGUID = SID_IDockingWindowSite;
  {$EXTERNALSYM IID_IDockingWindowSite}
  IID_IDockingWindowFrame         : TGUID = SID_IDockingWindowFrame;
  {$EXTERNALSYM IID_IDockingWindowFrame}
  IID_IThumbnailCapture           : TGUID = SID_IThumbnailCapture;
  {$EXTERNALSYM IID_IThumbnailCapture}
  IID_IEnumShellImageStore        : TGUID = SID_IEnumShellImageStore;
  {$EXTERNALSYM IID_IEnumShellImageStore}
  IID_IShellImageStore            : TGUID = SID_IShellImageStore;
  {$EXTERNALSYM IID_IShellImageStore}
  IID_IShellFolderBand            : TGUID = SID_IShellFolderBand;
  {$EXTERNALSYM IID_IShellFolderBand}
  IID_IDeskBarClient              : TGUID = SID_IDeskBarClient;
  {$EXTERNALSYM IID_IDeskBarClient}
  IID_IActiveDesktop              : TGUID = SID_IActiveDesktop;
  {$EXTERNALSYM IID_IActiveDesktop}
  IID_IActiveDesktopP             : TGUID = SID_IActiveDesktopP;
  {$EXTERNALSYM IID_IActiveDesktopP}
  IID_IADesktopP2                 : TGUID = SID_IADesktopP2;
  {$EXTERNALSYM IID_IADesktopP2}
  IID_IColumnProvider             : TGUID = SID_IColumnProvider;
  {$EXTERNALSYM IID_IColumnProvider}
  IID_IShellChangeNotify          : TGUID = SID_IShellChangeNotify;
  {$EXTERNALSYM IID_IShellChangeNotify}
  IID_IQueryInfo                  : TGUID = SID_IQueryInfo;
  {$EXTERNALSYM IID_IQueryInfo}
  IID_IDefViewFrame               : TGUID = SID_IDefViewFrame;
  {$EXTERNALSYM IID_IDefViewFrame}
  IID_IDocViewSite                : TGUID = SID_IDocViewSite;
  {$EXTERNALSYM IID_IDocViewSite}
  IID_IInitializeObject           : TGUID = SID_IInitializeObject;
  {$EXTERNALSYM IID_IInitializeObject}
  IID_IBanneredBar                : TGUID = SID_IBanneredBar;
  {$EXTERNALSYM IID_IBanneredBar}
  IID_IShellFolderViewCB          : TGUID = SID_IShellFolderViewCB;
  {$EXTERNALSYM IID_IShellFolderViewCB}
  IID_IShellFolderView            : TGUID = SID_IShellFolderView;
  {$EXTERNALSYM IID_IShellFolderView}
  IID_INamedPropertyBag           : TGUID = SID_INamedPropertyBag;
  {$EXTERNALSYM IID_INamedPropertyBag}
  IID_IEnumPrivacyRecords         : TGUID = SID_IEnumPrivacyRecords;
  {$EXTERNALSYM IID_IEnumPrivacyRecords}


// ===========================================================================
// Legacy exports that are no longer needed, call the COM API instead
// ===========================================================================

function SHGetMalloc(out ppMalloc: IMalloc): HResult; stdcall;
{$EXTERNALSYM SHGetMalloc}
function SHAlloc(cb: TSize): Pointer; stdcall;
{$EXTERNALSYM SHAlloc}
procedure SHFree(out pv); stdcall;
{$EXTERNALSYM SHFree}

// ===========================================================================
// IExtractIcon interface
//
//  This interface is used in two different places in the shell.
// 
// Case-1: Icons of sub-folders for the scope-pane of the explorer.
// 
//  It is used by the explorer to get the "icon location" of
// sub-folders from each shell folders. When the user expands a folder
// in the scope pane of the explorer, the explorer does following:
//  (1) binds to the folder (gets IShellFolder),
//  (2) enumerates its sub-folders by calling its EnumObjects member,
//  (3) calls its GetUIObjectOf member to get IExtractIcon interface
//     for each sub-folders.
//  In this case, the explorer uses only IExtractIcon::GetIconLocation
// member to get the location of the appropriate icon. An icon location
// always consists of a file name (typically DLL or EXE) and either an icon
// resource or an icon index.
// 
// 
// Case-2: Extracting an icon image from a file
// 
//  It is used by the shell when it extracts an icon image
// from a file. When the shell is extracting an icon from a file,
// it does following:
//  (1) creates the icon extraction handler object (by getting its CLSID
//     under the {ProgID}\shell\ExtractIconHanler key and calling
//     CoCreateInstance requesting for IExtractIcon interface).
//  (2) Calls IExtractIcon::GetIconLocation.
//  (3) Then, calls IExtractIcon::ExtractIcon with the location/index pair.
//  (4) If (3) returns S_OK, it uses the returned icon.
//  (5) Otherwise, it recursively calls this logic with new location
//     assuming that the location string contains a fully qualified path name.
// 
//  From extension programmer's point of view, there are only two cases
// where they provide implementations of IExtractIcon:
//  Case-1) providing explorer extensions (i.e., IShellFolder).
//  Case-2) providing per-instance icons for some types of files.
// 
// Because Case-1 is described above, we'll explain only Case-2 here.
// 
// When the shell is about display an icon for a file, it does following:
//  (1) Finds its ProgID and ClassID.
//  (2) If the file has a ClassID, it gets the icon location string from the
//    "DefaultIcon" key under it. The string indicates either per-class
//    icon (e.g., "FOOBAR.DLL,2") or per-instance icon (e.g., "%1,1").
//  (3) If a per-instance icon is specified, the shell creates an icon
//    extraction handler object for it, and extracts the icon from it
//    (which is described above).
//
//  It is important to note that the shell calls IExtractIcon::GetIconLocation
// first, then calls IExtractIcon::Extract. Most application programs
// that support per-instance icons will probably store an icon location
// (DLL/EXE name and index/id) rather than an icon image in each file.
// In those cases, a programmer needs to implement only the GetIconLocation
// member and it Extract member simply returns S_FALSE. They need to
// implement Extract member only if they decided to store the icon images
// within files themselved or some other database (which is very rare).
// 
// 
// 
// [Member functions]
// 
// 
// IExtractIcon::GetIconLocation
// 
//  This function returns an icon location.
// 
//  Parameters:
//   uFlags     [in]  -- Specifies if it is opened or not (GIL_OPENICON or 0)
//   szIconFile [out] -- Specifies the string buffer buffer for a location name.
//   cchMax     [in]  -- Specifies the size of szIconFile (almost always MAX_PATH)
//   piIndex    [out] -- Sepcifies the address of UINT for the index.
//   pwFlags    [out] -- Returns GIL_* flags
//  Returns:
//   S_OK, if it returns a valid location; S_FALSE, if the shell use a
//   default icon.
// 
//  Notes: The location may or may not be a path to a file. The caller can
//   not assume anything unless the subsequent Extract member call returns
//   S_FALSE.
// 
//   if the returned location is not a path to a file, GIL_NOTFILENAME should
//   be set in the returned flags.
// 
// IExtractIcon::Extract
// 
//  This function extracts an icon image from a specified file.
// 
//  Parameters:
//   pszFile [in] -- Specifies the icon location (typically a path to a file).
//   nIconIndex [in] -- Specifies the icon index.
//   phiconLarge [out] -- Specifies the HICON variable for large icon.
//   phiconSmall [out] -- Specifies the HICON variable for small icon.
//   nIconSize [in] -- Specifies the size icon required (size of large icon)
//                     LOWORD is the requested large icon size
//                     HIWORD is the requested small icon size
//  Returns:
//   S_OK, if it extracted the from the file.
//   S_FALSE, if the caller should extract from the file specified in the
//           location.
// ===========================================================================

// GetIconLocation() input flags
const
  GIL_OPENICON    = $0001;       // allows containers to specify an "open" look
  {$EXTERNALSYM GIL_OPENICON}
  GIL_FORSHELL    = $0002;       // icon is to be displayed in a ShellFolder
  {$EXTERNALSYM GIL_FORSHELL}
  GIL_ASYNC       = $0020;       // this is an async extract, return E_PENDING
  {$EXTERNALSYM GIL_ASYNC}
  GIL_DEFAULTICON = $0040;       // get the default icon location if the final one takes too long to get
  {$EXTERNALSYM GIL_DEFAULTICON}
  GIL_FORSHORTCUT = $0080;       // the icon is for a shortcut to the object
  {$EXTERNALSYM GIL_FORSHORTCUT}
  GIL_CHECKSHIELD = $0200;       // return GIL_SHIELD or GIL_FORCENOSHIELD, don't block if GIL_ASYNC is set
  {$EXTERNALSYM GIL_CHECKSHIELD}

// GetIconLocation() return flags
  GIL_SIMULATEDOC   = $0001;       // simulate this document icon for this
  {$EXTERNALSYM GIL_SIMULATEDOC}
  GIL_PERINSTANCE   = $0002;       // icons from this class are per instance (each file has its own)
  {$EXTERNALSYM GIL_PERINSTANCE}
  GIL_PERCLASS      = $0004;       // icons from this class per class (shared for all files of this type)
  {$EXTERNALSYM GIL_PERCLASS}
  GIL_NOTFILENAME   = $0008;       // location is not a filename, must call ::ExtractIcon
  {$EXTERNALSYM GIL_NOTFILENAME}
  GIL_DONTCACHE     = $0010;       // this icon should not be cached
  {$EXTERNALSYM GIL_DONTCACHE}
  GIL_SHIELD        = $0200;       // icon should be "stamped" with the LUA shield
  {$EXTERNALSYM GIL_SHIELD}
  GIL_FORCENOSHIELD = $0400;       // icon must *not* be "stamped" with the LUA shield
  {$EXTERNALSYM GIL_FORCENOSHIELD}

type
  IExtractIconA = interface(IUnknown)
    [SID_IExtractIconA]
    function GetIconLocation(uFlags: UINT; szIconFile: LPSTR; cchMax: UINT;
      out piIndex: Integer; out pwFlags: UINT): HResult; stdcall;
    function Extract(pszFile: LPCSTR; nIconIndex: UINT;
      out phiconLarge, phiconSmall: HICON; nIconSize: UINT): HResult; stdcall;
  end;
  {$EXTERNALSYM IExtractIconA}
  IExtractIconW = interface(IUnknown)
    [SID_IExtractIconW]
    function GetIconLocation(uFlags: UINT; szIconFile: LPWSTR; cchMax: UINT;
      out piIndex: Integer; out pwFlags: UINT): HResult; stdcall;
    function Extract(pszFile: LPCWSTR; nIconIndex: UINT;
      out phiconLarge, phiconSmall: HICON; nIconSize: UINT): HResult; stdcall;
  end;
  {$EXTERNALSYM IExtractIconW}
  IExtractIcon = IExtractIconW;
  {$EXTERNALSYM IExtractIcon}

// ===========================================================================
// IShellIconOverlayIdentifier
//
// Used to identify a file as a member of the group of files that have this specific
// icon overlay
//
// Users can create new IconOverlayIdentifiers and place them in the following registry
// location together with the Icon overlay image and their priority.
// HKEY_LOCAL_MACHINE "Software\\Microsoft\\Windows\\CurrentVersion\\ShellIconOverlayIdentifiers"
//
// The shell will enumerate through all IconOverlayIdentifiers at start, and prioritize
// them according to internal rules, in case the internal rules don't apply, we use their
// input priority
// 
// IShellIconOverlayIdentifier:IsMemberOf(LPCWSTR pwszPath, DWORD dwAttrib)
//      pwszPath        full path of the file
//      dwAttrib        attribute of this file
// 
//  returns:
//      S_OK,    if the file is a member
//      S_FALSE, if the file is not a member
//      E_FAIL,  if the operation failed due to bad WIN32_FIND_DATA
// 
// IShellIconOverlayIdentifier::GetOverlayInfo(LPWSTR pwszIconFile, int * pIndex, DWORD * dwFlags) PURE;
//      pszIconFile    the path of the icon file
//      pIndex         Depend on the flags, this could contain the IconIndex
//      dwFlags        defined below
// 
// IShellIconOverlayIdentifier::GetPriority(int * pIPriority) PURE;
//      pIPriority     the priority of this Overlay Identifier
// ===========================================================================
  IShellIconOverlayIdentifier = interface(IUnknown)
    [SID_IShellIconOverlayIdentifier]
    function IsMemberOf(pwszPath: PWideChar; dwAttrib: DWORD): HResult; stdcall;
    function GetOverlayInfo(pwszIconFile: PWideChar; cchMax: Integer;
      var pIndex: Integer; var pdwFlags: DWORD): HResult; stdcall;
    function GetPriority(out pIPriority: Integer): HResult; stdcall;
  end;
  {$EXTERNALSYM IShellIconOverlayIdentifier}

const
  ISIOI_ICONFILE  = $00000001;   // path is returned through pwszIconFile
  {$EXTERNALSYM ISIOI_ICONFILE}
  ISIOI_ICONINDEX = $00000002;   // icon index in pwszIconFile is returned through pIndex
  {$EXTERNALSYM ISIOI_ICONINDEX}

// ===========================================================================
// 
// IShellIconOverlayManager
// 
// Used to return the icon overlay information including OverlayIndex, Image Index or Priority for an IShellFolder object.
// 
// IShellIconOverlayManager:GetFileOverlayInfo(LPCWSTR pwszPath, DWORD dwAttrib, int * pIndex, DWORD dwflags)
//      pwszPath        full path of the file
//      dwAttrib        attribute of this file
//      pIndex          pointer to the Icon Index in the system image list
//      pOverlayIndex   pointer to the OverlayIndex in the system image list
//      pPriority       pointer to the Priority of this overlay
// IShellIconOverlayManager:GetReservedOverlayInfo(LPCWSTR pwszPath, DWORD dwAttrib, int * pIndex, DWORD dwflags, int iReservedID)
//      iReservedID     reserved icon overlay id
//  returns:
//      S_OK,  if the index of an Overlay is found
//      S_FALSE, if no Overlay exists for this file
//      E_FAIL, if lpfd is bad
// IShellIconOverlayManager:RefreshOverlayImages(DWORD dwFlags)
//      This will refresh the overlay cache, depends on the dwFlags passed in
//      It will reload the icons into the imagelist, when passed SIOM_ICONINDEX
// IShellIconOverlayManager::LoadNonloadedOverlayIdentifiers()
//      This method loads any registered overlay identifiers (handlers) that
//      are not currently loaded.
// IShellIconOverlayManager::OverlayIndexFromImageIndex(int iImage, int *piIndex, BOOL fAdd)
//      iImage          existing shell image list index to look for
//      piIndex         returned overlay index
//      fAdd            Add image if not already present?
// ===========================================================================
type
  IShellIconOverlayManager = interface(IUnknown)
    [SID_IShellIconOverlayManager]
    function GetFileOverlayInfo(pwszPath: LPCWSTR; dwAttrib: DWORD;
      var pIndex: Integer; dwflags: DWORD): HRESULT; stdcall;

    function GetReservedOverlayInfo(pwszPath: LPCWSTR; dwAttrib: DWORD;
      var pIndex: Integer; dwflags: DWORD; iReservedID: Integer): HRESULT; stdcall;

    function RefreshOverlayImages(dwFlags: DWORD): HRESULT; stdcall;

    function LoadNonloadedOverlayIdentifiers: HRESULT; stdcall;

    function OverlayIndexFromImageIndex(iImage: Integer; 
      var piIndex: Integer; fAdd: BOOL): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IShellIconOverlayManager}

const
  SIOM_OVERLAYINDEX      = 1;
  {$EXTERNALSYM SIOM_OVERLAYINDEX}
  SIOM_ICONINDEX         = 2;
  {$EXTERNALSYM SIOM_ICONINDEX}
  //SIOM_PRIORITY        = 3
  SIOM_RESERVED_SHARED   = 0;
  {$EXTERNALSYM SIOM_RESERVED_SHARED}
  SIOM_RESERVED_LINK     = 1;
  {$EXTERNALSYM SIOM_RESERVED_LINK}
  SIOM_RESERVED_SLOWFILE = 2;
  {$EXTERNALSYM SIOM_RESERVED_SLOWFILE}
  SIOM_RESERVED_DEFAULT = 3;
  {$EXTERNALSYM SIOM_RESERVED_DEFAULT}

// ===========================================================================
// 
// IShellIconOverlay
// 
// Used to return the icon overlay index or its icon index for an IShellFolder object,
// this is always implemented with IShellFolder
// 
// IShellIconOverlay:GetOverlayIndex(LPCITEMIDLIST pidl, DWORD * pdwIndex)
//      pidl            object to identify icon overlay for.
//      pdwIndex        the Overlay Index in the system image list
// 
// IShellIconOverlay:GetOverlayIconIndex(LPCITEMIDLIST pidl, DWORD * pdwIndex)
//      pdwIconIndex    the Overlay Icon index in the system image list
// This method is only used for those who are interested in seeing the real bits
// of the Overlay Icon
// 
//  returns:
//      S_OK,  if the index of an Overlay is found
//      S_FALSE, if no Overlay exists for this file
//      E_FAIL, if pidl is bad
//
// ===========================================================================

type
  IShellIconOverlay = interface(IUnknown)
    [SID_IShellIconOverlay]
    function GetOverlayIndex(pidl: PItemIDList; out pIndex: Integer): HResult; stdcall;
    function GetOverlayIconIndex(pidl: PItemIDList; out pIconIndex: Integer): HResult; stdcall;
  end;
  {$EXTERNALSYM IShellIconOverlay}

const
  OI_DEFAULT = $00000000;
  {$EXTERNALSYM OI_DEFAULT}
  OI_ASYNC   = $FFFFEEEE;
  {$EXTERNALSYM OI_ASYNC}

function SHGetIconOverlayIndex(pszIconPath: LPCWSTR; 
  iIconIndex: Integer): integer; stdcall;
{$EXTERNALSYM SHGetIconOverlayIndex}
function SHGetIconOverlayIndexA(pszIconPath: LPCSTR; 
  iIconIndex: Integer): integer; stdcall;
{$EXTERNALSYM SHGetIconOverlayIndexA}
function SHGetIconOverlayIndexW(pszIconPath: LPCWSTR; 
  iIconIndex: Integer): integer; stdcall;
{$EXTERNALSYM SHGetIconOverlayIndexW}

// -------------------------------------------------------------------------
//
// SHGetIconOverlayIndex
//
// This function takes the path and icon/res id to the icon and convert it into
// an overlay index in the system image list.
// Note: there are totally only 15 slots for system image overlays, some of which
// was reserved by the system, or taken by the overlayidentifiers, so it's possible
// that this function would fail and return -1;
//
// To get the default overlays in the system, such as the share hand, link shortcut
// and slow files, pass NULL as the file name, then the IDO_SHGIOI_* flags as the icon index
// -------------------------------------------------------------------------
const
  IDO_SHGIOI_SHARE    = $0FFFFFFF;
  {$EXTERNALSYM IDO_SHGIOI_SHARE}
  IDO_SHGIOI_LINK     = $0FFFFFFE;
  {$EXTERNALSYM IDO_SHGIOI_LINK}
  IDO_SHGIOI_SLOWFILE = $0FFFFFFFD;
  {$EXTERNALSYM IDO_SHGIOI_SLOWFILE}
  IDO_SHGIOI_DEFAULT  = $0FFFFFFFC;
  {$EXTERNALSYM IDO_SHGIOI_DEFAULT}

// IShellLinkDataList::GetFlags()/SetFlags()
const
  SLDF_DEFAULT                               = $00000000;       // Shell link saved with ID list
  {$EXTERNALSYM SLDF_HAS_ID_LIST}
  SLDF_HAS_ID_LIST                           = $00000001;       // Shell link saved with ID list
  {$EXTERNALSYM SLDF_HAS_ID_LIST}
  SLDF_HAS_LINK_INFO                         = $00000002;       // Shell link saved with LinkInfo
  {$EXTERNALSYM SLDF_HAS_LINK_INFO}
  SLDF_HAS_NAME                              = $00000004; 
  {$EXTERNALSYM SLDF_HAS_NAME}
  SLDF_HAS_RELPATH                           = $00000008; 
  {$EXTERNALSYM SLDF_HAS_RELPATH}
  SLDF_HAS_WORKINGDIR                        = $00000010; 
  {$EXTERNALSYM SLDF_HAS_WORKINGDIR}
  SLDF_HAS_ARGS                              = $00000020; 
  {$EXTERNALSYM SLDF_HAS_ARGS}
  SLDF_HAS_ICONLOCATION                      = $00000040; 
  {$EXTERNALSYM SLDF_HAS_ICONLOCATION}
  SLDF_UNICODE                               = $00000080;       // the strings are unicode
  {$EXTERNALSYM SLDF_UNICODE}
  SLDF_FORCE_NO_LINKINFO                     = $00000100;       // disable LINKINFO tracking information (used to track network drives and compute UNC paths if one exists)
  {$EXTERNALSYM SLDF_FORCE_NO_LINKINFO}
  SLDF_HAS_EXP_SZ                            = $00000200;       // the link contains expandable env strings
  {$EXTERNALSYM SLDF_HAS_EXP_SZ}
  SLDF_RUN_IN_SEPARATE                       = $00000400;       // Run the 16-bit target exe in a separate VDM/WOW
  {$EXTERNALSYM SLDF_RUN_IN_SEPARATE}
  SLDF_HAS_LOGO3ID                           = $00000800;       // not used anymore ( < Vista)
  {$EXTERNALSYM SLDF_HAS_LOGO3ID}
  SLDF_HAS_DARWINID                          = $00001000;       // MSI (Darwin) link that can be installed on demand
  {$EXTERNALSYM SLDF_HAS_DARWINID}
  SLDF_RUNAS_USER                            = $00002000;       // Run target as a different user
  {$EXTERNALSYM SLDF_RUNAS_USER}
  SLDF_HAS_EXP_ICON_SZ                       = $00004000;       // contains expandable env string for icon path
  {$EXTERNALSYM SLDF_HAS_EXP_ICON_SZ}
  SLDF_NO_PIDL_ALIAS                         = $00008000;       // disable IDList alias mapping when parsing the IDList from the path
  {$EXTERNALSYM SLDF_NO_PIDL_ALIAS}
  SLDF_FORCE_UNCNAME                         = $00010000;       // make GetPath() prefer the UNC name to the local name
  {$EXTERNALSYM SLDF_FORCE_UNCNAME}
  SLDF_RUN_WITH_SHIMLAYER                    = $00020000;       // activate target of this link with shim layer active
  {$EXTERNALSYM SLDF_RUN_WITH_SHIMLAYER}
  SLDF_FORCE_NO_LINKTRACK                    = $00040000;       // disable ObjectID tracking information
  {$EXTERNALSYM SLDF_FORCE_NO_LINKTRACK}
  SLDF_ENABLE_TARGET_METADATA                = $00080000;       // enable caching of target metadata into link
  {$EXTERNALSYM SLDF_ENABLE_TARGET_METADATA}
  SLDF_DISABLE_LINK_PATH_TRACKING            = $00100000;       // disable EXP_SZ_LINK_SIG tracking
  {$EXTERNALSYM SLDF_DISABLE_LINK_PATH_TRACKING}
  SLDF_DISABLE_KNOWNFOLDER_RELATIVE_TRACKING = $00200000;       // disable KnownFolder tracking information (EXP_KNOWN_FOLDER)
  {$EXTERNALSYM SLDF_DISABLE_KNOWNFOLDER_RELATIVE_TRACKING}
  SLDF_NO_KF_ALIAS                           = $00400000;       // disable Known Folder alias mapping when loading the IDList during deserialization
  {$EXTERNALSYM SLDF_NO_KF_ALIAS}
  SLDF_ALLOW_LINK_TO_LINK                    = $00800000;       // allows this link to point to another shell link - must only be used when it is not possible to create cycles
  {$EXTERNALSYM SLDF_ALLOW_LINK_TO_LINK}
  SLDF_UNALIAS_ON_SAVE                       = $01000000;       // unalias the IDList when saving
  {$EXTERNALSYM SLDF_UNALIAS_ON_SAVE}
  SLDF_PREFER_ENVIRONMENT_PATH               = $02000000;       // unalias the IDList when saving
  {$EXTERNALSYM SLDF_PREFER_ENVIRONMENT_PATH}
  SLDF_KEEP_LOCAL_IDLIST_FOR_UNC_TARGET      = $04000000;       // unalias the IDList when saving
  {$EXTERNALSYM SLDF_KEEP_LOCAL_IDLIST_FOR_UNC_TARGET}
  SLDF_VALID                                 = $07FFF7FF;       // bits that are valid for ::SetFlags()
  {$EXTERNALSYM SLDF_VALID}
  SLDF_RESERVED                              = $80000000;       // Reserved-- so we can use the low word as an index value in the future
  {$EXTERNALSYM SLDF_RESERVED}

type
  LPDATABLOCK_HEADER = ^DATABLOCK_HEADER;
  {$EXTERNALSYM LPDATABLOCK_HEADER}
  tagDATABLOCKHEADER = record 
    cbSize: DWORD;              // Size of this extra data block
    dwSignature: DWORD;         // signature of this extra data block
  end;
  {$EXTERNALSYM tagDATABLOCKHEADER}
  DATABLOCK_HEADER = tagDATABLOCKHEADER;
  {$EXTERNALSYM DATABLOCK_HEADER}
  TDataBlockHeader = DATABLOCK_HEADER;
  PDataBlockHeader = ^TDatablockHeader;

  LPNT_CONSOLE_PROPS = ^NT_CONSOLE_PROPS;
  {$EXTERNALSYM LPNT_CONSOLE_PROPS}
  tagNT_CONSOLE_PROPS = record
    dbh: TDataBlockHeader;
    wFillAttribute: Word;            // fill attribute for console
    wPopupFillAttribute: Word;       // fill attribute for console popups
    dwScreenBufferSize: COORD;       // screen buffer size for console
    dwWindowSize: COORD;             // window size for console
    dwWindowOrigin: COORD;           // window origin for console
    nFont: DWORD;
    nInputBufferSize: DWORD;
    dwFontSize: COORD;
    uFontFamily: UINT;
    uFontWeight: UINT;
    FaceName: packed array[0..LF_FACESIZE-1] of WCHAR;
    uCursorSize: UINT;
    bFullScreen: BOOL;
    bQuickEdit: BOOL;
    bInsertMode: BOOL;
    bAutoPosition: BOOL;
    uHistoryBufferSize: UINT;
    uNumberOfHistoryBuffers: UINT;
    bHistoryNoDup: BOOL;
    ColorTable: packed array[0..15] of COLORREF;
  end;
  {$EXTERNALSYM tagNT_CONSOLE_PROPS}
  NT_CONSOLE_PROPS = tagNT_CONSOLE_PROPS;
  {$EXTERNALSYM NT_CONSOLE_PROPS}
  TNTConsoleProps = NT_CONSOLE_PROPS;
  PNTConsoleProps = ^TNtConsoleProps;
const
  NT_CONSOLE_PROPS_SIG = $A0000002;
  {$EXTERNALSYM NT_CONSOLE_PROPS_SIG}

// This is a FE Console property
type
  LPNT_FE_CONSOLE_PROPS = ^NT_FE_CONSOLE_PROPS;
  {$EXTERNALSYM LPNT_FE_CONSOLE_PROPS}
  tagNT_FE_CONSOLE_PROPS = record
    dbh: TDataBlockHeader;
    uCodePage: UINT;
  end;
  {$EXTERNALSYM tagNT_FE_CONSOLE_PROPS}
  NT_FE_CONSOLE_PROPS = tagNT_FE_CONSOLE_PROPS;
  {$EXTERNALSYM NT_FE_CONSOLE_PROPS}
  TNTFEConsoleProps = NT_FE_CONSOLE_PROPS;
  PNTFEConsoleProps = ^TNtFeConsoleProps;
const
  NT_FE_CONSOLE_PROPS_SIG = $A0000004;
  {$EXTERNALSYM NT_FE_CONSOLE_PROPS_SIG}

type
  LPEXP_DARWIN_LINK = ^EXP_DARWIN_LINK;
  {$EXTERNALSYM LPEXP_DARWIN_LINK}
  tagEXP_DARWIN_LINK = record
    dbh: TDataBlockHeader;
    szDarwinID: packed array[0..MAX_PATH-1] of AnsiChar; // ANSI darwin ID associated with link
    szwDarwinID: packed array[0..MAX_PATH-1] of WCHAR;   // UNICODE darwin ID associated with link
  end;
  {$EXTERNALSYM tagEXP_DARWIN_LINK}
  EXP_DARWIN_LINK = tagEXP_DARWIN_LINK;
  {$EXTERNALSYM EXP_DARWIN_LINK}
  TExpDarwinLink = EXP_DARWIN_LINK;
  PExpDarwinLink = ^TExpDarwinLink;
const
  EXP_DARWIN_ID_SIG = $A0000006; 
  {$EXTERNALSYM EXP_DARWIN_ID_SIG}

  EXP_SPECIAL_FOLDER_SIG = $A0000005;           // LPEXP_SPECIAL_FOLDER
  {$EXTERNALSYM EXP_SPECIAL_FOLDER_SIG}

type
  LPEXP_SPECIAL_FOLDER = ^EXP_SPECIAL_FOLDER;
  {$EXTERNALSYM LPEXP_SPECIAL_FOLDER}
  tagEXP_SPECIAL_FOLDER = record 
    cbSize: DWORD;                  // Size of this extra data block
    dwSignature: DWORD;             // signature of this extra data block
    idSpecialFolder: DWORD;         // special folder id this link points into
    cbOffset: DWORD;                // ofset into pidl from SLDF_HAS_ID_LIST for child
  end;
  {$EXTERNALSYM tagEXP_SPECIAL_FOLDER}
  EXP_SPECIAL_FOLDER = tagEXP_SPECIAL_FOLDER;
  {$EXTERNALSYM EXP_SPECIAL_FOLDER}
  TExpSpecialFolder = EXP_SPECIAL_FOLDER;
  PExpSpecialFolder = ^TExpSpecialFolder;


  LPEXP_SZ_LINK = ^EXP_SZ_LINK;
  {$EXTERNALSYM LPEXP_SZ_LINK}
  tagEXP_SZ_LINK = record 
    cbSize: DWORD;                  // Size of this extra data block
    dwSignature: DWORD;             // signature of this extra data block
    szTarget: packed array[0..MAX_PATH-1] of AnsiChar;// ANSI target name w/EXP_SZ in it
    swzTarget: packed array[0..MAX_PATH-1] of WCHAR;  // UNICODE target name w/EXP_SZ in it
  end;
  {$EXTERNALSYM tagEXP_SZ_LINK}
  EXP_SZ_LINK = tagEXP_SZ_LINK;
  {$EXTERNALSYM EXP_SZ_LINK}
  TExpSzLink = EXP_SZ_LINK;
  PExpSzLink = ^TExpSzLink;
const
  EXP_SZ_LINK_SIG = $A0000001;                  // LPEXP_SZ_LINK (target)
  {$EXTERNALSYM EXP_SZ_LINK_SIG}
  EXP_SZ_ICON_SIG = $A0000007;                  // LPEXP_SZ_LINK (icon)
  {$EXTERNALSYM EXP_SZ_ICON_SIG}

{$ALIGN 1}
type
  tagEXP_PROPERTYSTORAGE = record
    cbSize: DWORD;                  // Size of this extra data block
    dwSignature: DWORD;             // signature of this extra data block
    abPropertyStorage: packed array[0..0] of Byte;
  end;
  {$EXTERNALSYM tagEXP_PROPERTYSTORAGE}
  EXP_PROPERTYSTORAGE = tagEXP_PROPERTYSTORAGE;
  {$EXTERNALSYM EXP_PROPERTYSTORAGE}
  TExpPropertyStorage = EXP_PROPERTYSTORAGE;
  PExpPropertyStorage = ^TExpPropertystorage;
const
  EXP_PROPERTYSTORAGE_SIG = $A0000009;
  {$EXTERNALSYM EXP_PROPERTYSTORAGE_SIG}
{$ALIGN ON}

// ===========================================================================
// IShellExecuteHook Interface
// ===========================================================================
type
  IShellExecuteHookA = interface(IUnknown) { sl }
    [SID_IShellExecuteHookA]
    function Execute(var ShellExecuteInfo: TShellExecuteInfoA): HResult; stdcall;
  end;
  {$EXTERNALSYM IShellExecuteHookA}
  IShellExecuteHookW = interface(IUnknown) { sl }
    [SID_IShellExecuteHookW]
    function Execute(var ShellExecuteInfo: TShellExecuteInfoW): HResult; stdcall;
  end;
  {$EXTERNALSYM IShellExecuteHookW}
  IShellExecuteHook = IShellExecuteHookW;
  {$EXTERNALSYM IShellExecuteHook}

// ===========================================================================
// IURLSearchHook Interface
// ===========================================================================
  IURLSearchHook = interface(IUnknown)
    [SID_IURLSearchHook]
    function Translate(lpwszSearchURL: PWideChar; cchBufferSize: DWORD): HResult; stdcall;
  end;
  {$EXTERNALSYM IURLSearchHook}

  ISearchContext = interface(IUnknown)
    [SID_ISearchContext]
    function GetSearchUrl(var pbstrSearchUrl: PWCHAR): HRESULT; stdcall;

    function GetSearchText(var pbstrSearchText: PWCHAR): HRESULT; stdcall;

    function GetSearchStyle(var pdwSearchStyle: DWORD): HRESULT; stdcall;
  end;
  {$EXTERNALSYM ISearchContext}

  IURLSearchHook2 = interface(IURLSearchHook)
    [SID_IURLSearchHook2]
    function TranslateWithSearchContext(lpwszSearchURL: PWideChar; cchBufferSize: DWORD;
      const pSearchContext: ISearchContext): HResult; stdcall;
  end;
  {$EXTERNALSYM IURLSearchHook2}

// ===========================================================================
// INewShortcutHook Interface
// ===========================================================================
  INewShortcutHookA = interface(IUnknown) { sl }
    [SID_INewShortcutHookA]
    function SetReferent(pcszReferent: LPSTR; Wnd: HWND): HResult; stdcall;
    function GetReferent(pcszReferent: LPSTR; cchReferent: Integer): HResult; stdcall;
    function SetFolder(pcszFolder: LPSTR; Wnd: HWND): HResult; stdcall;
    function GetFolder(pcszFolder: LPSTR; cchFolder: Integer): HResult; stdcall;
    function GetName(pcszName: LPSTR; cchName: Integer): HResult; stdcall;
    function GetExtension(pcszExtension: LPSTR; cchExtension: Integer): HResult; stdcall;
  end;
  {$EXTERNALSYM INewShortcutHookA}
  INewShortcutHookW = interface(IUnknown) { sl }
    [SID_INewShortcutHookW]
    function SetReferent(pcszReferent: LPWSTR; Wnd: HWND): HResult; stdcall;
    function GetReferent(pcszReferent: LPWSTR; cchReferent: Integer): HResult; stdcall;
    function SetFolder(pcszFolder: LPWSTR; Wnd: HWND): HResult; stdcall;
    function GetFolder(pcszFolder: LPWSTR; cchFolder: Integer): HResult; stdcall;
    function GetName(pcszName: LPWSTR; cchName: Integer): HResult; stdcall;
    function GetExtension(pcszExtension: LPWSTR; cchExtension: Integer): HResult; stdcall;
  end;
  {$EXTERNALSYM INewShortcutHookW}
  INewShortcutHook = INewShortcutHookW;
  {$EXTERNALSYM INewShortcutHook}

// ===========================================================================
// ICopyHook Interface
// 
//  The copy hook is called whenever file system directories are
//  copy/moved/deleted/renamed via the shell.  It is also called by the shell
//  on changes of status of printers.
// 
//  Clients register their id under STRREG_SHEX_COPYHOOK for file system hooks
//  and STRREG_SHEx_PRNCOPYHOOK for printer hooks.
//  the CopyCallback is called prior to the action, so the hook has the chance
//  to allow, deny or cancel the operation by returning the falues:
//     IDYES  -  means allow the operation
//     IDNO   -  means disallow the operation on this file, but continue with
//              any other operations (eg. batch copy)
//     IDCANCEL - means disallow the current operation and cancel any pending
//              operations
// 
//   arguments to the CopyCallback
//      hwnd - window to use for any UI
//      wFunc - what operation is being done
//      wFlags - and flags (FOF_*) set in the initial call to the file operation
//      pszSrcFile - name of the source file
//      dwSrcAttribs - file attributes of the source file
//      pszDestFile - name of the destiation file (for move and renames)
//      dwDestAttribs - file attributes of the destination file
// ===========================================================================

  ICopyHookA = interface(IUnknown) { sl }
    [SID_IShellCopyHookA]
    function CopyCallback(Wnd: HWND; wFunc, wFlags: UINT; pszSrcFile: LPSTR;
      dwSrcAttribs: DWORD; pszDestFile: LPSTR; dwDestAttribs: DWORD): UINT; stdcall;
  end;
  {$EXTERNALSYM ICopyHookA}
  ICopyHookW = interface(IUnknown) { sl }
    [SID_IShellCopyHookW]
    function CopyCallback(Wnd: HWND; wFunc, wFlags: UINT; pszSrcFile: LPWSTR;
      dwSrcAttribs: DWORD; pszDestFile: LPWSTR; dwDestAttribs: DWORD): UINT; stdcall;
  end;
  {$EXTERNALSYM ICopyHookW}
  ICopyHook = ICopyHookW;
  {$EXTERNALSYM ICopyHook}

//NOTE:  IFileViewer, IFileViewerSite not supported as of win2k
// ===========================================================================
// IFileViewerSite Interface
// ===========================================================================
  IFileViewerSite = interface(IUnknown)
    [SID_IFileViewerSite]
    function SetPinnedWindow(Wnd: HWND): HResult; stdcall;
    function GetPinnedWindow(var Wnd: HWND): HResult; stdcall;
  end;
  {$EXTERNALSYM IFileViewerSite}

// ===========================================================================
// IFileViewer Interface
// 
// Implemented in a FileViewer component object.  Used to tell a
// FileViewer to PrintTo or to view, the latter happening though
// ShowInitialize and Show.  The filename is always given to the
// viewer through IPersistFile.
// ===========================================================================
  LPFVSHOWINFO = ^FVSHOWINFO;
  {$EXTERNALSYM LPFVSHOWINFO}
  tagFVSHOWINFO = record
    { Stuff passed into viewer (in) }
    cbSize: DWORD;           { Size of structure for future expansion... }
    hwndOwner: HWND;         { who is the owner window. }
    iShow: Integer;          { The show command }

    { Passed in and updated  (in/Out) }
    dwFlags: DWORD;          { flags }
    rect: TRECT;             { Where to create the window may have defaults }
    punkRel: IUNKNOWN;       { Relese this interface when window is visible }

    { Stuff that might be returned from viewer (out) }
    strNewFile: array[0..MAX_PATH-1] of TOleChar;   { New File to view. }
  end;
  {$EXTERNALSYM tagFVSHOWINFO}
  FVSHOWINFO = tagFVSHOWINFO;
  {$EXTERNALSYM FVSHOWINFO}

  TFVShowInfo = FVSHOWINFO;
  PFVShowInfo = ^TFVShowInfo;

const
  // Define File View Show Info Flags.
  FVSIF_RECT = $00000001;           // The rect variable has valid data.
  {$EXTERNALSYM FVSIF_RECT}
  FVSIF_PINNED = $00000002;         // We should Initialize pinned
  {$EXTERNALSYM FVSIF_PINNED}

  FVSIF_NEWFAILED = $08000000;      // The new file passed back failed
  {$EXTERNALSYM FVSIF_NEWFAILED}    // to be viewed.

  FVSIF_NEWFILE = $80000000;        // A new file to view has been returned
  {$EXTERNALSYM FVSIF_NEWFILE}
  FVSIF_CANVIEWIT = $40000000;      // The viewer can view it.
  {$EXTERNALSYM FVSIF_CANVIEWIT}

type
  IFileViewerA = interface(IUnknown)
    [SID_IFileViewerA]
    function ShowInitialize(fsi: IFileViewerSite): HResult; stdcall;
    function Show(var pvsi: TFVShowInfo): HResult; stdcall;
    function PrintTo(pszDriver: LPSTR; fSuppressUI: BOOL): HResult; stdcall;
  end;
  {$EXTERNALSYM IFileViewerA}
  IFileViewerW = interface(IUnknown)
    [SID_IFileViewerW]
    function ShowInitialize(fsi: IFileViewerSite): HResult; stdcall;
    function Show(var pvsi: TFVShowInfo): HResult; stdcall;
    function PrintTo(pszDriver: LPWSTR; fSuppressUI: BOOL): HResult; stdcall;
  end;
  {$EXTERNALSYM IFileViewerW}
  IFileViewer = IFileViewerW;
  {$EXTERNALSYM IFileViewer}

type
{ CommandTarget ids. for shell doc view wedge }
  TSHDVIDEnums = (
    SHDVID_SETPROGRESSPOS,
    SHDVID_SETPROGRESSRANGE,
    SHDVID_SETSTATUSTEXT,        { variantIn  bstr }
    SHDVID_REFRESH,
    SHDVID_STOP,
    SHDVID_UPDATECOMMANDS, { / this forces a re-querystatus of the command targets. }
                           { / the arg in can specify a specific one to update or NIL for evrything }
    SHDVID_SETTITLE,            { variantIn bstr }
    SHDVID_FINALTITLEAVAIL,     { variantIn bstr - sent after final SETTITLE is sent }
    SHDVID_STARTLOAD,           { NIL for everything }
    SHDVID_STOPLOAD,            { NIL for everything }
    SHDVID_CCALLBACK,           { callback to arbitrary C func }
    SHDVID_MENUEXEC,            { do menu command }
    SHDVID_MENUQS               { query menu commands }
  );
  {$EXTERNALSYM TSHDVIDEnums}
// NOTE: IFileViewer, IFileViewerSite not supported as of win2k

// --------------------------------------------------------------------------
// Command/menuitem IDs
//
//  The explorer dispatches WM_COMMAND messages based on the range of
// command/menuitem IDs. All the IDs of menuitems that the view (right
// pane) inserts must be in FCIDM_SHVIEWFIRST/LAST (otherwise, the explorer
// won't dispatch them). The view should not deal with any menuitems
// in FCIDM_BROWSERFIRST/LAST (otherwise, it won't work with the future
// version of the shell).
//
//  FCIDM_SHVIEWFIRST/LAST      for the right pane (IShellView)
//  FCIDM_BROWSERFIRST/LAST     for the explorer frame (IShellBrowser)
//  FCIDM_GLOBAL/LAST           for the explorer's submenu IDs
// --------------------------------------------------------------------------
const
  FCIDM_SHVIEWFIRST = $0000;
  {$EXTERNALSYM FCIDM_SHVIEWFIRST}
  FCIDM_SHVIEWLAST = $7fff;
  {$EXTERNALSYM FCIDM_SHVIEWLAST}
  FCIDM_BROWSERFIRST = $a000;
  {$EXTERNALSYM FCIDM_BROWSERFIRST}
  FCIDM_BROWSERLAST = $bf00;
  {$EXTERNALSYM FCIDM_BROWSERLAST}
  FCIDM_GLOBALFIRST = $8000;
  {$EXTERNALSYM FCIDM_GLOBALFIRST}
  FCIDM_GLOBALLAST = $9fff;
  {$EXTERNALSYM FCIDM_GLOBALLAST}

// Global submenu IDs and separator IDs
  FCIDM_MENU_FILE                 = FCIDM_GLOBALFIRST+$0000;
  {$EXTERNALSYM FCIDM_MENU_FILE}
  FCIDM_MENU_EDIT                 = FCIDM_GLOBALFIRST+$0040; 
  {$EXTERNALSYM FCIDM_MENU_EDIT}
  FCIDM_MENU_VIEW                 = FCIDM_GLOBALFIRST+$0080; 
  {$EXTERNALSYM FCIDM_MENU_VIEW}
  FCIDM_MENU_VIEW_SEP_OPTIONS     = FCIDM_GLOBALFIRST+$0081; 
  {$EXTERNALSYM FCIDM_MENU_VIEW_SEP_OPTIONS}
  FCIDM_MENU_TOOLS                = FCIDM_GLOBALFIRST+$00c0;     // for Win9x compat
  {$EXTERNALSYM FCIDM_MENU_TOOLS}
  FCIDM_MENU_TOOLS_SEP_GOTO       = FCIDM_GLOBALFIRST+$00c1;     // for Win9x compat
  {$EXTERNALSYM FCIDM_MENU_TOOLS_SEP_GOTO}
  FCIDM_MENU_HELP                 = FCIDM_GLOBALFIRST+$0100; 
  {$EXTERNALSYM FCIDM_MENU_HELP}
  FCIDM_MENU_FIND                 = FCIDM_GLOBALFIRST+$0140; 
  {$EXTERNALSYM FCIDM_MENU_FIND}
  FCIDM_MENU_EXPLORE              = FCIDM_GLOBALFIRST+$0150; 
  {$EXTERNALSYM FCIDM_MENU_EXPLORE}
  FCIDM_MENU_FAVORITES            = FCIDM_GLOBALFIRST+$0170; 
  {$EXTERNALSYM FCIDM_MENU_FAVORITES}

// --------------------------------------------------------------------------
// control IDs known to the view
// --------------------------------------------------------------------------

  FCIDM_TOOLBAR = FCIDM_BROWSERFIRST + 0; 
  {$EXTERNALSYM FCIDM_TOOLBAR}
  FCIDM_STATUS = FCIDM_BROWSERFIRST + 1; 
  {$EXTERNALSYM FCIDM_STATUS}

// The resource id of the offline cursor
// This cursor is avaialble in shdocvw.dll
  IDC_OFFLINE_HAND = 103; 
  {$EXTERNALSYM IDC_OFFLINE_HAND}

  IDC_PANTOOL_HAND_OPEN = 104; 
  {$EXTERNALSYM IDC_PANTOOL_HAND_OPEN}
  IDC_PANTOOL_HAND_CLOSED = 105; 
  {$EXTERNALSYM IDC_PANTOOL_HAND_CLOSED}

// SBCMDID_GETPANE - not necessarily in order
  PANE_NONE = -1;
  {$EXTERNALSYM PANE_NONE}
  PANE_ZONE = 1; 
  {$EXTERNALSYM PANE_ZONE}
  PANE_OFFLINE = 2; 
  {$EXTERNALSYM PANE_OFFLINE}
  PANE_PRINTER = 3; 
  {$EXTERNALSYM PANE_PRINTER}
  PANE_SSL = 4; 
  {$EXTERNALSYM PANE_SSL}
  PANE_NAVIGATION = 5; 
  {$EXTERNALSYM PANE_NAVIGATION}
  PANE_PROGRESS = 6; 
  {$EXTERNALSYM PANE_PROGRESS}
  PANE_PRIVACY = 7; 
  {$EXTERNALSYM PANE_PRIVACY}

function ILClone(pidl: PItemIDList): PItemIDList; stdcall;
{$EXTERNALSYM ILClone}
function ILCloneFirst(pidl: PItemIDList): PItemIDList; stdcall;
{$EXTERNALSYM ILCloneFirst}
function ILCombine(pidl1: PItemIDList; 
  pidl2: PItemIDList): PItemIDList; stdcall;
{$EXTERNALSYM ILCombine}
procedure ILFree(pidl: PItemIDList); stdcall;
{$EXTERNALSYM ILFree}
function ILGetNext(pidl: PItemIDList): PItemIDList; stdcall;
{$EXTERNALSYM ILGetNext}
function ILGetSize(pidl: PItemIDList): UINT; stdcall;
{$EXTERNALSYM ILGetSize}
function ILFindChild(pidlParent: PItemIDList; 
  pidlChild: PItemIDList): PItemIDList; stdcall;
{$EXTERNALSYM ILFindChild}
function ILFindLastID(pidl: PItemIDList): PItemIDList; stdcall;
{$EXTERNALSYM ILFindLastID}
function ILRemoveLastID(pidl: PItemIDList): BOOL; stdcall;
{$EXTERNALSYM ILRemoveLastID}
function ILIsEqual(pidl1: PItemIDList; pidl2: PItemIDList): BOOL; stdcall;
{$EXTERNALSYM ILIsEqual}
function ILIsParent(pidl1: PItemIDList; pidl2: PItemIDList; 
  fImmediate: BOOL): BOOL; stdcall;
{$EXTERNALSYM ILIsParent}
function ILSaveToStream(const pstm: IStream; 
  pidl: PItemIDList): HResult; stdcall;
{$EXTERNALSYM ILSaveToStream}
function ILLoadFromStream(const pstm: IStream; 
  var pidl: PItemIDList): HResult; stdcall;
{$EXTERNALSYM ILLoadFromStream}
function ILLoadFromStreamEx(const pstm: IStream;
  var pidl: PItemIDList): HResult; stdcall;
{$EXTERNALSYM ILLoadFromStreamEx}

function ILCreateFromPathA(pszPath: LPCSTR): PItemIDList; stdcall;
{$EXTERNALSYM ILCreateFromPathA}
function ILCreateFromPathW(pszPath: LPCWSTR): PItemIDList; stdcall;
{$EXTERNALSYM ILCreateFromPathW}

function ILCreateFromPath(pszPath: LPCTSTR): PItemIDList; stdcall;
{$EXTERNALSYM ILCreateFromPath}

function SHILCreateFromPath(pszPath: LPCWSTR; var ppidl: PItemIDList; 
  var rgfInOut: DWORD): HResult; stdcall;
{$EXTERNALSYM SHILCreateFromPath}

function ILCloneFull(pidl: PItemIDList): PItemIDList; inline;
{$EXTERNALSYM ILCloneFull}
function ILCloneChild(pidl: PItemIDList): PItemIDList; inline;
{$EXTERNALSYM ILCloneChild}
function VOID_OFFSET(pv: Pointer; cb: NativeUInt): Pointer; inline;
{$EXTERNALSYM VOID_OFFSET}
function ILSkip(pidl: PItemIDList; cb: UINT): PItemIDList; inline;
{$EXTERNALSYM ILSkip}
function ILNext(pidl: PItemIDList): PItemIDList; inline;
{$EXTERNALSYM ILNext}
function ILIsAligned(pidl: PItemIDList): BOOL; inline;
{$EXTERNALSYM ILIsAligned}
function ILIsEmpty(pidl: PItemIDList): BOOL; inline;
{$EXTERNALSYM ILIsEmpty}
function ILIsChild(pidl: PItemIDList): BOOL; inline;
{$EXTERNALSYM ILIsChild}
// already defined as external function
//function ILFindChild(pidlParent: PItemIDList; pidlChild: PItemIDList): PItemIDList; inline;
//{$EXTERNALSYM ILFindChild}

function ILAppendID(pidl: PItemIDList; pmkid: PSHItemID; fAppend: BOOL): PItemIDList; stdcall;
{$EXTERNALSYM ILAppendID}

// SHGetPathFromIDListEx returns a win32 file system path for the item in the name space.
//  and has a few special cases that include returning UNC printer names too!
type
  tagGPFIDL_FLAGS = Integer; 
  {$EXTERNALSYM tagGPFIDL_FLAGS}
const
  GPFIDL_DEFAULT    = $0000;         // normal Win32 file name, servers and drive roots included
  {$EXTERNALSYM GPFIDL_DEFAULT}
  GPFIDL_ALTNAME    = $0001;         // short file name
  {$EXTERNALSYM GPFIDL_ALTNAME}
  GPFIDL_UNCPRINTER = $0002;         // include UNC printer names too (non file system item)
  {$EXTERNALSYM GPFIDL_UNCPRINTER}
type
  GPFIDL_FLAGS = tagGPFIDL_FLAGS; 
  {$EXTERNALSYM GPFIDL_FLAGS}
  TGPFIDLFlags = GPFIDL_FLAGS;

function SHGetPathFromIDListEx(pidl: PItemIDList; pszPath: LPWSTR; 
  cchPath: DWORD; uOpts: TGPFIDLFlags): BOOL; stdcall;
{$EXTERNALSYM SHGetPathFromIDListEx}
// SHGetPathFromIDList is the old version of SHGetPathFromIDListEx that assumes the size of the buffer (MAX_PATH).
// The pidl should point to a file system object.
function SHGetPathFromIDList(pidl: PItemIDList; pszPath: LPWSTR): BOOL; stdcall;
{$EXTERNALSYM SHGetPathFromIDList}
function SHGetPathFromIDListA(pidl: PItemIDList; pszPath: LPSTR): BOOL; stdcall;
{$EXTERNALSYM SHGetPathFromIDListA}
function SHGetPathFromIDListW(pidl: PItemIDList; pszPath: LPWSTR): BOOL; stdcall;
{$EXTERNALSYM SHGetPathFromIDListW}
function SHCreateDirectory(hwnd: HWND; pszPath: LPCWSTR): integer; stdcall;
{$EXTERNALSYM SHCreateDirectory}
function SHCreateDirectoryEx(hwnd: HWND; pszPath: LPCWSTR;
  var psa: SECURITY_ATTRIBUTES): integer; stdcall;
{$EXTERNALSYM SHCreateDirectoryEx}
function SHCreateDirectoryExA(hwnd: HWND; pszPath: LPCSTR;
  var psa: SECURITY_ATTRIBUTES): integer; stdcall;
{$EXTERNALSYM SHCreateDirectoryExA}
function SHCreateDirectoryExW(hwnd: HWND; pszPath: LPCWSTR;
  var psa: SECURITY_ATTRIBUTES): integer; stdcall;
{$EXTERNALSYM SHCreateDirectoryExW}

const
  OFASI_EDIT = $0001; 
  {$EXTERNALSYM OFASI_EDIT}
  OFASI_OPENDESKTOP = $0002; 
  {$EXTERNALSYM OFASI_OPENDESKTOP}

function SHOpenFolderAndSelectItems(pidlFolder: PItemIDList; cidl: UINT; 
  const apidl: PItemIDList; dwFlags: DWORD): HResult; stdcall;
{$EXTERNALSYM SHOpenFolderAndSelectItems}

//  deprecated because of parameter ambiguity
//  call SHCreateItemWithParent() or SHCreateItemFromIDList() instead
function SHCreateShellItem(pidlParent: PItemIDList; const psfParent: IShellFolder; 
    pidl: PItemIDList; out ppsi: IShellItem): HResult; stdcall;
{$EXTERNALSYM SHCreateShellItem}

// SHGetSpecialFolderLocation
// 
//  Caller should use SHGetMalloc to obtain an allocator that can free the pidl
// 
const
// registry entries for special paths are kept in :
  REGSTR_PATH_SPECIAL_FOLDERS   = REGSTR_PATH_EXPLORER + '\Shell Folders';
  {$EXTERNALSYM REGSTR_PATH_SPECIAL_FOLDERS}

  CSIDL_DESKTOP                 = $0000;          // <desktop>
  {$EXTERNALSYM CSIDL_DESKTOP}
  CSIDL_INTERNET                = $0001;          // Internet Explorer (icon on desktop)
  {$EXTERNALSYM CSIDL_INTERNET}
  CSIDL_PROGRAMS                = $0002;          // Start Menu\Programs
  {$EXTERNALSYM CSIDL_PROGRAMS}
  CSIDL_CONTROLS                = $0003;          // My Computer\Control Panel
  {$EXTERNALSYM CSIDL_CONTROLS}
  CSIDL_PRINTERS                = $0004;          // My Computer\Printers
  {$EXTERNALSYM CSIDL_PRINTERS}
  CSIDL_PERSONAL                = $0005;          // My Documents
  {$EXTERNALSYM CSIDL_PERSONAL}
  CSIDL_FAVORITES               = $0006;          // <user name>\Favorites
  {$EXTERNALSYM CSIDL_FAVORITES}
  CSIDL_STARTUP                 = $0007;          // Start Menu\Programs\Startup
  {$EXTERNALSYM CSIDL_STARTUP}
  CSIDL_RECENT                  = $0008;          // <user name>\Recent
  {$EXTERNALSYM CSIDL_RECENT}
  CSIDL_SENDTO                  = $0009;          // <user name>\SendTo
  {$EXTERNALSYM CSIDL_SENDTO}
  CSIDL_BITBUCKET               = $000a;          // <desktop>\Recycle Bin
  {$EXTERNALSYM CSIDL_BITBUCKET}
  CSIDL_STARTMENU               = $000b;          // <user name>\Start Menu
  {$EXTERNALSYM CSIDL_STARTMENU}
  CSIDL_MYDOCUMENTS             = CSIDL_PERSONAL; // Personal was just a silly name for My Documents
  {$EXTERNALSYM CSIDL_MYDOCUMENTS}
  CSIDL_MYMUSIC                 = $000d;          // "My Music" folder
  {$EXTERNALSYM CSIDL_MYMUSIC}
  CSIDL_MYVIDEO                 = $000e;          // "My Videos" folder
  {$EXTERNALSYM CSIDL_MYVIDEO}
  CSIDL_DESKTOPDIRECTORY        = $0010;          // <user name>\Desktop
  {$EXTERNALSYM CSIDL_DESKTOPDIRECTORY}
  CSIDL_DRIVES                  = $0011;          // My Computer
  {$EXTERNALSYM CSIDL_DRIVES}
  CSIDL_NETWORK                 = $0012;          // Network Neighborhood (My Network Places)
  {$EXTERNALSYM CSIDL_NETWORK}
  CSIDL_NETHOOD                 = $0013;          // <user name>\nethood
  {$EXTERNALSYM CSIDL_NETHOOD}
  CSIDL_FONTS                   = $0014;          // windows\fonts
  {$EXTERNALSYM CSIDL_FONTS}
  CSIDL_TEMPLATES               = $0015;
  {$EXTERNALSYM CSIDL_TEMPLATES}
  CSIDL_COMMON_STARTMENU        = $0016;          // All Users\Start Menu
  {$EXTERNALSYM CSIDL_COMMON_STARTMENU}
  CSIDL_COMMON_PROGRAMS         = $0017;          // All Users\Start Menu\Programs
  {$EXTERNALSYM CSIDL_COMMON_PROGRAMS}
  CSIDL_COMMON_STARTUP          = $0018;          // All Users\Startup
  {$EXTERNALSYM CSIDL_COMMON_STARTUP}
  CSIDL_COMMON_DESKTOPDIRECTORY = $0019;          // All Users\Desktop
  {$EXTERNALSYM CSIDL_COMMON_DESKTOPDIRECTORY}
  CSIDL_APPDATA                 = $001a;          // <user name>\Application Data
  {$EXTERNALSYM CSIDL_APPDATA}
  CSIDL_PRINTHOOD               = $001b;          // <user name>\PrintHood
  {$EXTERNALSYM CSIDL_PRINTHOOD}
  CSIDL_LOCAL_APPDATA           = $001c;          // <user name>\Local Settings\Applicaiton Data (non roaming)
  {$EXTERNALSYM CSIDL_LOCAL_APPDATA}
  CSIDL_ALTSTARTUP              = $001d;          // non localized startup
  {$EXTERNALSYM CSIDL_ALTSTARTUP}
  CSIDL_COMMON_ALTSTARTUP       = $001e;          // non localized common startup
  {$EXTERNALSYM CSIDL_COMMON_ALTSTARTUP}
  CSIDL_COMMON_FAVORITES        = $001f;
  {$EXTERNALSYM CSIDL_COMMON_FAVORITES}
  CSIDL_INTERNET_CACHE          = $0020;
  {$EXTERNALSYM CSIDL_INTERNET_CACHE}
  CSIDL_COOKIES                 = $0021;
  {$EXTERNALSYM CSIDL_COOKIES}
  CSIDL_HISTORY                 = $0022;
  {$EXTERNALSYM CSIDL_HISTORY}
  CSIDL_COMMON_APPDATA          = $0023;          // All Users\Application Data
  {$EXTERNALSYM CSIDL_COMMON_APPDATA}
  CSIDL_WINDOWS                 = $0024;          // GetWindowsDirectory()
  {$EXTERNALSYM CSIDL_WINDOWS}
  CSIDL_SYSTEM                  = $0025;          // GetSystemDirectory()
  {$EXTERNALSYM CSIDL_SYSTEM}
  CSIDL_PROGRAM_FILES           = $0026;          // C:\Program Files
  {$EXTERNALSYM CSIDL_PROGRAM_FILES}
  CSIDL_MYPICTURES              = $0027;          // C:\Program Files\My Pictures
  {$EXTERNALSYM CSIDL_MYPICTURES}
  CSIDL_PROFILE                 = $0028;          // USERPROFILE
  {$EXTERNALSYM CSIDL_PROFILE}
  CSIDL_SYSTEMX86               = $0029;          // x86 system directory on RISC
  {$EXTERNALSYM CSIDL_SYSTEMX86}
  CSIDL_PROGRAM_FILESX86        = $002a;          // x86 C:\Program Files on RISC
  {$EXTERNALSYM CSIDL_PROGRAM_FILESX86}
  CSIDL_PROGRAM_FILES_COMMON    = $002b;          // C:\Program Files\Common
  {$EXTERNALSYM CSIDL_PROGRAM_FILES_COMMON}
  CSIDL_PROGRAM_FILES_COMMONX86 = $002c;          // x86 Program Files\Common on RISC
  {$EXTERNALSYM CSIDL_PROGRAM_FILES_COMMONX86}
  CSIDL_COMMON_TEMPLATES        = $002d;          // All Users\Templates
  {$EXTERNALSYM CSIDL_COMMON_TEMPLATES}
  CSIDL_COMMON_DOCUMENTS        = $002e;          // All Users\Documents
  {$EXTERNALSYM CSIDL_COMMON_DOCUMENTS}
  CSIDL_COMMON_ADMINTOOLS       = $002f;          // All Users\Start Menu\Programs\Administrative Tools
  {$EXTERNALSYM CSIDL_COMMON_ADMINTOOLS}
  CSIDL_ADMINTOOLS              = $0030;          // <user name>\Start Menu\Programs\Administrative Tools
  {$EXTERNALSYM CSIDL_ADMINTOOLS}
  CSIDL_CONNECTIONS             = $0031;          // Network and Dial-up Connections
  {$EXTERNALSYM CSIDL_CONNECTIONS}
  CSIDL_COMMON_MUSIC            = $0035;          // All Users\My Music
  {$EXTERNALSYM CSIDL_COMMON_MUSIC}
  CSIDL_COMMON_PICTURES         = $0036;          // All Users\My Pictures
  {$EXTERNALSYM CSIDL_COMMON_PICTURES}
  CSIDL_COMMON_VIDEO            = $0037;          // All Users\My Video
  {$EXTERNALSYM CSIDL_COMMON_VIDEO}
  CSIDL_RESOURCES               = $0038;          // Resource Direcotry
  {$EXTERNALSYM CSIDL_RESOURCES}
  CSIDL_RESOURCES_LOCALIZED     = $0039;          // Localized Resource Direcotry
  {$EXTERNALSYM CSIDL_RESOURCES_LOCALIZED}
  CSIDL_COMMON_OEM_LINKS        = $003a;          // Links to All Users OEM specific apps
  {$EXTERNALSYM CSIDL_COMMON_OEM_LINKS}
  CSIDL_CDBURN_AREA             = $003b;          // USERPROFILE\Local Settings\Application Data\Microsoft\CD Burning
  {$EXTERNALSYM CSIDL_CDBURN_AREA}
  // unused                               0x003c
  CSIDL_COMPUTERSNEARME         = $003d;          // Computers Near Me (computered from Workgroup membership)
  {$EXTERNALSYM CSIDL_COMPUTERSNEARME}
  CSIDL_FLAG_CREATE             = $8000;          // combine with CSIDL_ value to force folder creation in SHGetFolderPath()
  {$EXTERNALSYM CSIDL_FLAG_CREATE}
  CSIDL_FLAG_DONT_VERIFY        = $4000;          // combine with CSIDL_ value to return an unverified folder path
  {$EXTERNALSYM CSIDL_FLAG_DONT_VERIFY}
  CSIDL_FLAG_DONT_UNEXPAND      = $2000;          // combine with CSIDL_ value to avoid unexpanding environment variables
  {$EXTERNALSYM CSIDL_FLAG_DONT_UNEXPAND}
  CSIDL_FLAG_NO_ALIAS           = $1000;          // combine with CSIDL_ value to insure non-alias versions of the pidl
  {$EXTERNALSYM CSIDL_FLAG_NO_ALIAS}
  CSIDL_FLAG_PER_USER_INIT      = $0800;          // combine with CSIDL_ value to indicate per-user init (eg. upgrade)
  {$EXTERNALSYM CSIDL_FLAG_PER_USER_INIT}
  CSIDL_FLAG_MASK               = $FF00;          // mask for all possible flag values
  {$EXTERNALSYM CSIDL_FLAG_MASK}

function SHGetSpecialFolderLocation(hwndOwner: HWND; nFolder: Integer;
  var ppidl: PItemIDList): HResult; stdcall;
{$EXTERNALSYM SHGetSpecialFolderLocation}

function SHCloneSpecialIDList(hwnd: HWND; csidl: Integer; 
  fCreate: BOOL): PItemIDList; stdcall;
{$EXTERNALSYM SHCloneSpecialIDList}

function SHGetSpecialFolderPath(hwndOwner: HWND; lpszPath: LPWSTR;
  nFolder: Integer; fCreate: BOOL): BOOL; stdcall;
{$EXTERNALSYM SHGetSpecialFolderPath}
function SHGetSpecialFolderPathA(hwndOwner: HWND; lpszPath: LPSTR;
  nFolder: Integer; fCreate: BOOL): BOOL; stdcall;
{$EXTERNALSYM SHGetSpecialFolderPathA}
function SHGetSpecialFolderPathW(hwndOwner: HWND; lpszPath: LPWSTR;
  nFolder: Integer; fCreate: BOOL): BOOL; stdcall;
{$EXTERNALSYM SHGetSpecialFolderPathW}

procedure SHFlushSFCache; stdcall;
{$EXTERNALSYM SHFlushSFCache}

const
  SHGFP_TYPE_CURRENT = 0;      // current value for user, verify it exists
  {$EXTERNALSYM SHGFP_TYPE_CURRENT}
  SHGFP_TYPE_DEFAULT = 1;      // default value, may not exist
  {$EXTERNALSYM SHGFP_TYPE_DEFAULT}

function SHGetFolderPathA(hwnd: HWND; csidl: Integer; hToken: THandle; 
  dwFlags: DWORD; pszPath: LPSTR): HResult; stdcall;
{$EXTERNALSYM SHGetFolderPathA}
function SHGetFolderPathW(hwnd: HWND; csidl: Integer; hToken: THandle; 
  dwFlags: DWORD; pszPath: LPWSTR): HResult; stdcall;
{$EXTERNALSYM SHGetFolderPathW}
function SHGetFolderPath(hwnd: HWND; csidl: Integer; hToken: THandle; 
  dwFlags: DWORD; pszPath: LPWSTR): HResult; stdcall;
{$EXTERNALSYM SHGetFolderPath}

function SHGetFolderLocation(hwnd: HWND; csidl: Integer; hToken: THandle; 
  dwFlags: DWORD; var ppidl: PItemIDList): HResult; stdcall;
{$EXTERNALSYM SHGetFolderLocation}

function SHSetFolderPath(csidl: Integer; hToken: THandle; dwFlags: DWORD; 
  pszPath: LPCWSTR): HResult; stdcall;
{$EXTERNALSYM SHSetFolderPath}
function SHSetFolderPathA(csidl: Integer; hToken: THandle; dwFlags: DWORD; 
  pszPath: LPCSTR): HResult; stdcall;
{$EXTERNALSYM SHSetFolderPathA}
function SHSetFolderPathW(csidl: Integer; hToken: THandle; dwFlags: DWORD; 
  pszPath: LPCWSTR): HResult; stdcall;
{$EXTERNALSYM SHSetFolderPathW}

function SHGetFolderPathAndSubDir(hwnd: HWND; csidl: Integer; hToken: THandle; 
  dwFlags: DWORD; pszSubDir: LPCWSTR; pszPath: LPWSTR): HResult; stdcall;
{$EXTERNALSYM SHGetFolderPathAndSubDir}
function SHGetFolderPathAndSubDirA(hwnd: HWND; csidl: Integer; hToken: THandle; 
  dwFlags: DWORD; pszSubDir: LPCSTR; pszPath: LPSTR): HResult; stdcall;
{$EXTERNALSYM SHGetFolderPathAndSubDirA}
function SHGetFolderPathAndSubDirW(hwnd: HWND; csidl: Integer; hToken: THandle; 
  dwFlags: DWORD; pszSubDir: LPCWSTR; pszPath: LPWSTR): HResult; stdcall;
{$EXTERNALSYM SHGetFolderPathAndSubDirW}

// flags for Known Folder APIs
type
  KNOWN_FOLDER_FLAG = Integer; 
  {$EXTERNALSYM KNOWN_FOLDER_FLAG}
  TKnownFolderFlag = KNOWN_FOLDER_FLAG;
const
  KF_FLAG_DEFAULT             = $00000000; 
  {$EXTERNALSYM KF_FLAG_DEFAULT}

    // Make sure that the folder already exists or create it and apply security specified in folder definition
    // If folder can not be created then function will return failure and no folder path (IDList) will be returned
    // If folder is located on the network the function may take long time to execute
  KF_FLAG_CREATE              = $00008000; 
  {$EXTERNALSYM KF_FLAG_CREATE}

    // If this flag is specified then the folder path is returned and no verification is performed
    // Use this flag is you want to get folder's path (IDList) and do not need to verify folder's existence
    // 
    // If this flag is NOT specified then Known Folder API will try to verify that the folder exists
    //     If folder does not exist or can not be accessed then function will return failure and no folder path (IDList) will be returned
    //     If folder is located on the network the function may take long time to execute
  KF_FLAG_DONT_VERIFY         = $00004000; 
  {$EXTERNALSYM KF_FLAG_DONT_VERIFY}

    // Set folder path as is and do not try to substitute parts of the path with environments variables.
    // If flag is not specified then Known Folder will try to replace parts of the path with some
    // known environment variables (%USERPROFILE%, %APPDATA% etc.)
  KF_FLAG_DONT_UNEXPAND       = $00002000; 
  {$EXTERNALSYM KF_FLAG_DONT_UNEXPAND}

    // Get file system based IDList if available. If the flag is not specified the Known Folder API
    // will try to return aliased IDList by default. Example for FOLDERID_Documents -
    // Aliased - [desktop]\[user]\[Documents] - exact location is determined by shell namespace layout and might change
    // Non aliased - [desktop]\[computer]\[disk_c]\[users]\[user]\[Documents] - location is determined by folder location in the file system
  KF_FLAG_NO_ALIAS            = $00001000; 
  {$EXTERNALSYM KF_FLAG_NO_ALIAS}

    // Initialize the folder with desktop.ini settings
    // If folder can not be initialized then function will return failure and no folder path will be returned
    // If folder is located on the network the function may take long time to execute
  KF_FLAG_INIT                = $00000800; 
  {$EXTERNALSYM KF_FLAG_INIT}

    // Get the default path, will also verify folder existence unless KF_FLAG_DONT_VERIFY is also specified
  KF_FLAG_DEFAULT_PATH        = $00000400; 
  {$EXTERNALSYM KF_FLAG_DEFAULT_PATH}

    // Get the not-parent-relative default path. Only valid with KF_FLAG_DEFAULT_PATH
  KF_FLAG_NOT_PARENT_RELATIVE = $00000200; 
  {$EXTERNALSYM KF_FLAG_NOT_PARENT_RELATIVE}

    // Build simple IDList
  KF_FLAG_SIMPLE_IDLIST       = $00000100; 
  {$EXTERNALSYM KF_FLAG_SIMPLE_IDLIST}

    // only return the aliased IDLists, don't fallback to file system path
  KF_FLAG_ALIAS_ONLY          = $80000000; 
  {$EXTERNALSYM KF_FLAG_ALIAS_ONLY}

function SHGetKnownFolderIDList(const rfid: TIID; dwFlags: DWORD;
  hToken: THandle; var ppidl: PItemIDList): HRESULT; stdcall;
{$EXTERNALSYM SHGetKnownFolderIDList}

function SHSetKnownFolderPath(const rfid: TIID; dwFlags: DWORD;
  hToken: THandle; pszPath: LPCWSTR): HRESULT; stdcall;
{$EXTERNALSYM SHSetKnownFolderPath}

function SHGetKnownFolderPath(const rfid: TIID; dwFlags: DWORD; hToken: THandle; 
  var ppszPath: LPWSTR): HRESULT; stdcall;
{$EXTERNALSYM SHGetKnownFolderPath}

function SHGetKnownFolderItem(const rfid: TIID; dwFlags: DWORD;
  hToken: THandle; const riid: TIID; var ppv: Pointer): HRESULT; stdcall;
{$EXTERNALSYM SHGetKnownFolderItem}

const
  FCS_READ = $00000001; 
  {$EXTERNALSYM FCS_READ}
  FCS_FORCEWRITE = $00000002; 
  {$EXTERNALSYM FCS_FORCEWRITE}
  FCS_WRITE = FCS_READ or FCS_FORCEWRITE; 
  {$EXTERNALSYM FCS_WRITE}

  FCS_FLAG_DRAGDROP = 2; 
  {$EXTERNALSYM FCS_FLAG_DRAGDROP}

// Mask which values have been retreived or being set.
  FCSM_VIEWID = $00000001;                    // deprecated
  {$EXTERNALSYM FCSM_VIEWID}
  FCSM_WEBVIEWTEMPLATE = $00000002;         // deprecated
  {$EXTERNALSYM FCSM_WEBVIEWTEMPLATE}
  FCSM_INFOTIP = $00000004; 
  {$EXTERNALSYM FCSM_INFOTIP}
  FCSM_CLSID = $00000008; 
  {$EXTERNALSYM FCSM_CLSID}
  FCSM_ICONFILE = $00000010;
  {$EXTERNALSYM FCSM_ICONFILE}
  FCSM_LOGO = $00000020; 
  {$EXTERNALSYM FCSM_LOGO}
  FCSM_FLAGS = $00000040; 
  {$EXTERNALSYM FCSM_FLAGS}


type
// Used by SHGetSetFolderCustomSettings
  LPSHFOLDERCUSTOMSETTINGS = ^SHFOLDERCUSTOMSETTINGS;
  {$EXTERNALSYM LPSHFOLDERCUSTOMSETTINGS}
  tagSHFOLDERCUSTOMSETTINGS = record 
    dwSize: DWORD;
    dwMask: DWORD;                       // IN/OUT  Which Attributes to Get/Set
    pvid: PShellViewID;                  // OUT - if dwReadWrite is FCS_READ, IN - otherwise
    // The folder's WebView template path
    pszWebViewTemplate: LPWSTR;           // OUT - if dwReadWrite is FCS_READ, IN - otherwise
    cchWebViewTemplate: DWORD;            // IN - Specifies the size of the buffer pointed to by pszWebViewTemplate
                                         // Ignored if dwReadWrite is FCS_READ
    pszWebViewTemplateVersion: LPWSTR;           // currently IN only
    // Infotip for the folder
    pszInfoTip: LPWSTR;                  // OUT - if dwReadWrite is FCS_READ, IN - otherwise
    cchInfoTip: DWORD;                   // IN - Specifies the size of the buffer pointed to by pszInfoTip
                                         // Ignored if dwReadWrite is FCS_READ
    // CLSID that points to more info in the registry
    pclsid: PCLSID;                      // OUT - if dwReadWrite is FCS_READ, IN - otherwise
    // Other flags for the folder. Takes FCS_FLAG_* values
    dwFlags: DWORD;                      // OUT - if dwReadWrite is FCS_READ, IN - otherwise


    pszIconFile: LPWSTR;                 // OUT - if dwReadWrite is FCS_READ, IN - otherwise
    cchIconFile: DWORD;                  // IN - Specifies the size of the buffer pointed to by pszIconFile
                                         // Ignored if dwReadWrite is FCS_READ

    iIconIndex: Integer;                 // OUT - if dwReadWrite is FCS_READ, IN - otherwise

    pszLogo: LPWSTR;                 // OUT - if dwReadWrite is FCS_READ, IN - otherwise
    cchLogo: DWORD;                  // IN - Specifies the size of the buffer pointed to by pszIconFile
                                         // Ignored if dwReadWrite is FCS_READ
  end;
  {$EXTERNALSYM tagSHFOLDERCUSTOMSETTINGS}
  SHFOLDERCUSTOMSETTINGS = tagSHFOLDERCUSTOMSETTINGS;
  {$EXTERNALSYM SHFOLDERCUSTOMSETTINGS}
  TSHFolderCustomSettings = SHFOLDERCUSTOMSETTINGS;
  PSHFolderCustomSettings = ^TSHFOLDERCUSTOMSETTINGS;

// Gets/Sets the Folder Custom Settings for pszPath based on dwReadWrite. dwReadWrite can be FCS_READ/FCS_WRITE/FCS_FORCEWRITE
function SHGetSetFolderCustomSettings(pfcs: PSHFolderCustomSettings; 
  pszPath: LPCWSTR; dwReadWrite: DWORD): HResult; stdcall;
{$EXTERNALSYM SHGetSetFolderCustomSettings}

// -------------------------------------------------------------------------
// SHBrowseForFolder API
// -------------------------------------------------------------------------

type
  BFFCALLBACK = function(Wnd: HWND; uMsg: UINT; lParam, lpData: LPARAM): Integer stdcall;
  TFNBFFCallBack = type BFFCALLBACK;
  {$EXTERNALSYM BFFCALLBACK}

  _browseinfoA = record
    hwndOwner: HWND;
    pidlRoot: PItemIDList;
    pszDisplayName: LPSTR;  { Return display name of item selected. }
    lpszTitle: LPCSTR;      { text to go in the banner over the tree. }
    ulFlags: UINT;           { Flags that control the return stuff }
    lpfn: TFNBFFCallBack;
    lParam: LPARAM;          { extra info that's passed back in callbacks }
    iImage: Integer;         { output var: where to return the Image index. }
  end;
  {$EXTERNALSYM _browseinfoA}
  _browseinfoW = record
    hwndOwner: HWND;
    pidlRoot: PItemIDList;
    pszDisplayName: LPWSTR;  { Return display name of item selected. }
    lpszTitle: LPCWSTR;      { text to go in the banner over the tree. }
    ulFlags: UINT;           { Flags that control the return stuff }
    lpfn: TFNBFFCallBack;
    lParam: LPARAM;          { extra info that's passed back in callbacks }
    iImage: Integer;         { output var: where to return the Image index. }
  end;
  {$EXTERNALSYM _browseinfoW}
  _browseinfo = _browseinfoW;
  {$EXTERNALSYM _browseinfo}
  PBrowseInfoA = ^TBrowseInfoA;
  PBrowseInfoW = ^TBrowseInfoW;
  PBrowseInfo = PBrowseInfoW;
  TBrowseInfoA = _browseinfoA;
  TBrowseInfoW = _browseinfoW;
  TBrowseInfo = TBrowseInfoW;
  BROWSEINFOA = _browseinfoA;
  {$EXTERNALSYM BROWSEINFOA}
  BROWSEINFOW = _browseinfoW;
  {$EXTERNALSYM BROWSEINFOW}
  BROWSEINFO = BROWSEINFOW;
  {$EXTERNALSYM BROWSEINFO}


const
// Browsing for directory.
  BIF_RETURNONLYFSDIRS  = $00000001;    // For finding a folder to start document searching
  {$EXTERNALSYM BIF_RETURNONLYFSDIRS}
  BIF_DONTGOBELOWDOMAIN = $00000002;    // For starting the Find Computer
  {$EXTERNALSYM BIF_DONTGOBELOWDOMAIN}
  BIF_STATUSTEXT        = $00000004;    // Top of the dialog has 2 lines of text for BROWSEINFO.lpszTitle and one line if
  {$EXTERNALSYM BIF_STATUSTEXT}
                                        // this flag is set.  Passing the message BFFM_SETSTATUSTEXTA to the hwnd can set the
                                        // rest of the text.  This is not used with BIF_USENEWUI and BROWSEINFO.lpszTitle gets
                                        // all three lines of text.
  BIF_RETURNFSANCESTORS = $00000008; 
  {$EXTERNALSYM BIF_RETURNFSANCESTORS}
  BIF_EDITBOX           = $00000010;    // Add an editbox to the dialog
  {$EXTERNALSYM BIF_EDITBOX}
  BIF_VALIDATE          = $00000020;    // insist on valid result (or CANCEL)
  {$EXTERNALSYM BIF_VALIDATE}

  BIF_NEWDIALOGSTYLE    = $00000040;    // Use the new dialog layout with the ability to resize
  {$EXTERNALSYM BIF_NEWDIALOGSTYLE}
                                        // Caller needs to call OleInitialize() before using this API

  BIF_USENEWUI          = BIF_NEWDIALOGSTYLE or BIF_EDITBOX; 
  {$EXTERNALSYM BIF_USENEWUI}

  BIF_BROWSEINCLUDEURLS  = $00000080;  // Allow URLs to be displayed or entered. (Requires BIF_USENEWUI)
  {$EXTERNALSYM BIF_BROWSEINCLUDEURLS}
  BIF_UAHINT             = $00000100;  // Add a UA hint to the dialog, in place of the edit box. May not be combined with BIF_EDITBOX
  {$EXTERNALSYM BIF_UAHINT}
  BIF_NONEWFOLDERBUTTON  = $00000200;  // Do not add the "New Folder" button to the dialog.  Only applicable with BIF_NEWDIALOGSTYLE.
  {$EXTERNALSYM BIF_NONEWFOLDERBUTTON}
  BIF_NOTRANSLATETARGETS = $00000400;  // don't traverse target as shortcut
  {$EXTERNALSYM BIF_NOTRANSLATETARGETS}

  BIF_BROWSEFORCOMPUTER   = $00001000; // Browsing for Computers.
  {$EXTERNALSYM BIF_BROWSEFORCOMPUTER}
  BIF_BROWSEFORPRINTER    = $00002000; // Browsing for Printers
  {$EXTERNALSYM BIF_BROWSEFORPRINTER}
  BIF_BROWSEINCLUDEFILES  = $00004000; // Browsing for Everything
  {$EXTERNALSYM BIF_BROWSEINCLUDEFILES}
  BIF_SHAREABLE           = $00008000; // sharable resources displayed (remote shares, requires BIF_USENEWUI)
  {$EXTERNALSYM BIF_SHAREABLE}
  BIF_BROWSEFILEJUNCTIONS = $00010000; // allow folder junctions like zip files and libraries to be browsed
  {$EXTERNALSYM BIF_BROWSEFILEJUNCTIONS}

// message from browser
  BFFM_INITIALIZED     = 1; 
  {$EXTERNALSYM BFFM_INITIALIZED}
  BFFM_SELCHANGED      = 2;
  {$EXTERNALSYM BFFM_SELCHANGED}
  BFFM_VALIDATEFAILEDA = 3;     // lParam:szPath ret:1(cont),0(EndDialog)
  {$EXTERNALSYM BFFM_VALIDATEFAILEDA}
  BFFM_VALIDATEFAILEDW = 4;     // lParam:wzPath ret:1(cont),0(EndDialog)
  {$EXTERNALSYM BFFM_VALIDATEFAILEDW}
  BFFM_IUNKNOWN        = 5;    // provides IUnknown to client. lParam: IUnknown*
  {$EXTERNALSYM BFFM_IUNKNOWN}

// messages to browser
  BFFM_SETSTATUSTEXTA = WM_USER + 100; 
  {$EXTERNALSYM BFFM_SETSTATUSTEXTA}
  BFFM_ENABLEOK       = WM_USER + 101; 
  {$EXTERNALSYM BFFM_ENABLEOK}
  BFFM_SETSELECTIONA  = WM_USER + 102; 
  {$EXTERNALSYM BFFM_SETSELECTIONA}
  BFFM_SETSELECTIONW  = WM_USER + 103; 
  {$EXTERNALSYM BFFM_SETSELECTIONW}
  BFFM_SETSTATUSTEXTW = WM_USER + 104; 
  {$EXTERNALSYM BFFM_SETSTATUSTEXTW}
  BFFM_SETOKTEXT      = WM_USER + 105; // Unicode only
  {$EXTERNALSYM BFFM_SETOKTEXT}
  BFFM_SETEXPANDED    = WM_USER + 106; // Unicode only
  {$EXTERNALSYM BFFM_SETEXPANDED}

{$IFDEF UNICODE}
  BFFM_VALIDATEFAILED     = BFFM_VALIDATEFAILEDW;
  {$EXTERNALSYM BFFM_VALIDATEFAILED}
  BFFM_SETSTATUSTEXT      = BFFM_SETSTATUSTEXTW;
  {$EXTERNALSYM BFFM_SETSTATUSTEXT}
  BFFM_SETSELECTION       = BFFM_SETSELECTIONW;
  {$EXTERNALSYM BFFM_SETSELECTION}
{$ELSE}
  BFFM_VALIDATEFAILED     = BFFM_VALIDATEFAILEDA;
  {$EXTERNALSYM BFFM_VALIDATEFAILED}
  BFFM_SETSTATUSTEXT      = BFFM_SETSTATUSTEXTA;
  {$EXTERNALSYM BFFM_SETSTATUSTEXT}
  BFFM_SETSELECTION       = BFFM_SETSELECTIONA;
  {$EXTERNALSYM BFFM_SETSELECTION}
{$ENDIF}

function SHBrowseForFolder(var lpbi: TBrowseInfo): PItemIDList; stdcall;
{$EXTERNALSYM SHBrowseForFolder}
function SHBrowseForFolderA(var lpbi: TBrowseInfoA): PItemIDList; stdcall;
{$EXTERNALSYM SHBrowseForFolderA}
function SHBrowseForFolderW(var lpbi: TBrowseInfoW): PItemIDList; stdcall;
{$EXTERNALSYM SHBrowseForFolderW}

// -------------------------------------------------------------------------
// SHLoadInProc
//   This function is no longer implemented. It will return E_NOTIMPL.
// -------------------------------------------------------------------------

function SHLoadInProc(rclsid: TCLSID): HResult; stdcall;
{$EXTERNALSYM SHLoadInProc}

// -------------------------------------------------------------------------
// Internet Shortcut Object
// -------------------------------------------------------------------------
// Cmds for CGID_ShortCut
const
  ISHCUTCMDID_DOWNLOADICON      = 0; 
  {$EXTERNALSYM ISHCUTCMDID_DOWNLOADICON}
  ISHCUTCMDID_INTSHORTCUTCREATE = 1; 
  {$EXTERNALSYM ISHCUTCMDID_INTSHORTCUTCREATE}
  ISHCUTCMDID_COMMITHISTORY     = 2; 
  {$EXTERNALSYM ISHCUTCMDID_COMMITHISTORY}
  ISHCUTCMDID_SETUSERAWURL      = 3; 
  {$EXTERNALSYM ISHCUTCMDID_SETUSERAWURL}
  CMDID_INTSHORTCUTCREATE = ISHCUTCMDID_INTSHORTCUTCREATE; 
  {$EXTERNALSYM CMDID_INTSHORTCUTCREATE}

// Bindctx key, passed to IShellFolder::ParseDiplayName.  Provides dbfolder with extra
// data, besides the name, necessary for the parse. the object in the bind context implements
// IPropertyStore and provides a fixed set of properties
  STR_PARSE_WITH_PROPERTIES = 'ParseWithProperties'; 
  {$EXTERNALSYM STR_PARSE_WITH_PROPERTIES}

// Bindctx key, passed to IShellFolder::ParseDisplayName(). used to pass the original item that
// is being re-parsed. that item is stored as an IShellItem that supports IParentAndItem,
// and should be the un-aliased form of the item.
  STR_PARSE_PARTIAL_IDLIST = 'ParseOriginalItem'; 
  {$EXTERNALSYM STR_PARSE_PARTIAL_IDLIST}

// Helper function which returns a IShellFolder interface to the desktop
// folder. This is equivalent to call CoCreateInstance with CLSID_ShellDesktop.
// 
//  CoCreateInstance(CLSID_Desktop, NULL, CLSCTX_INPROC, IID_PPV_ARGS(&pshf));
// 
function SHGetDesktopFolder(out ppshf: IShellFolder): HResult; stdcall;
{$EXTERNALSYM SHGetDesktopFolder}

// this interface is deprecated, data sources should
// implement IShellFolder2::GetDetailsOf()/GetDetailsEx() instead
type
  IShellDetails = interface(IUnknown)
    [SID_IShellDetails]
    function GetDetailsOf(pidl: PItemIDList; iColumn: UINT;
      var pDetails: TShellDetails): HResult; stdcall;

    function ColumnClick(iColumn: UINT): HResult; stdcall;
  end;
  {$EXTERNALSYM IShellDetails}

// 
// IObjMgr::Append(punk)
//   This function adds an object to the end of a list of objects.
// 
// IObjMgr::Remove(punk)
//   This function removes an object from a list of objects.
// 
// This is implemented by CLSID_ACLMulti so each AutoComplete List
// (CLSID_ACLHistory, CLSID_ACListISF, CLSID_ACLMRU) can be added.
// CLSID_ACLMulti's IEnumString will then be the union of the results
// from the COM Objects added.
// 

  IObjMgr = interface(IUnknown)
    [SID_IObjMgr]
    function Append(const punk: IUnknown): HRESULT; stdcall;

    function Remove(const punk: IUnknown): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IObjMgr}

// 
// ICurrentWorkingDirectory::GetDirectory(LPWSTR pwzPath, DWORD cchSize)
//   This function gets the Current Working Directory from a COM object that
//   stores such state.
// 
// ICurrentWorkingDirectory::SetDirectory(LPCWSTR pwzPath)
//   This function sets the Current Working Directory of a COM object that
//   stores such state.
// 
// This function can be used generically.  One COM object that implements it
// is CLSID_ACListISF so that the AutoComplete engine can complete relative
// paths.  SetDirectory() will set the "Current Working Directory" and
// AutoComplete with then complete both absolute and relative paths.
// For Example, if ::SetDirectory(L"C:\Program Files") is called, then
// the user can AutoComplete "..\winnt".  In order to set the current
// working directory for non-file system paths, "ftp://ftp.microsoft.com/" or
// "Control Panel" for example, use IPersistFolder.
// 
  ICurrentWorkingDirectory = interface(IUnknown)
    [SID_ICurrentWorkingDirectory]
    function GetDirectory(var pwzPath: LPWSTR; cchSize: DWORD): HRESULT; stdcall;

    function SetDirectory(pwzPath: LPCWSTR): HRESULT; stdcall;
  end;
  {$EXTERNALSYM ICurrentWorkingDirectory}

// 
// IACList::Expand(LPCWSTR)
//   This function tells an autocomplete list to expand a specific string.
// 
// If the user enters a multi-level path, AutoComplete (CLSID_AutoComplete)
// will use this interface to tell the "AutoComplete Lists" where to expand
// the results.
// 
// For Example, if the user enters "C:\Program Files\Micros", AutoComplete
// first completely enumerate the "AutoComplete Lists" via IEnumString.  Then it
// will call the "AutoComplete Lists" with IACList::Expand(L"C:\Program Files").
// It will then enumerate the IEnumString interface again to get results in
// that directory.
// 
  IACList = interface(IUnknown)
    [SID_IACList]
    function Expand(pszExpand: LPCWSTR): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IACList}

// This interface exists to allow the caller to set filter criteria
// for an AutoComplete List.  AutoComplete Lists generates the list of
// possible AutoComplete completions.  CLSID_ACListISF is one AutoComplete
// List COM object that implements this interface.
  AUTOCOMPLETELISTOPTIONS = Integer; 
  {$EXTERNALSYM AUTOCOMPLETELISTOPTIONS}
  TAutoCompleteListOptions = AUTOCOMPLETELISTOPTIONS;
const
  ACLO_NONE             = 0;     // don't enumerate anything
  {$EXTERNALSYM ACLO_NONE}
  ACLO_CURRENTDIR       = 1;     // enumerate current directory
  {$EXTERNALSYM ACLO_CURRENTDIR}
  ACLO_MYCOMPUTER       = 2;     // enumerate MyComputer
  {$EXTERNALSYM ACLO_MYCOMPUTER}
  ACLO_DESKTOP          = 4;     // enumerate Desktop Folder
  {$EXTERNALSYM ACLO_DESKTOP}
  ACLO_FAVORITES        = 8;     // enumerate Favorites Folder
  {$EXTERNALSYM ACLO_FAVORITES}
  ACLO_FILESYSONLY      = 16;    // enumerate only the file system
  {$EXTERNALSYM ACLO_FILESYSONLY}
  ACLO_FILESYSDIRS      = 32;    // enumerate only the file system dirs, UNC shares, and UNC servers.
  {$EXTERNALSYM ACLO_FILESYSDIRS}
  ACLO_VIRTUALNAMESPACE = 64;    // enumereate on the virual namespace
  {$EXTERNALSYM ACLO_VIRTUALNAMESPACE}

type
  IACList2 = interface(IACList)
    [SID_IACList2]
    function SetOptions(dwFlag: DWORD): HRESULT; stdcall;

    function GetOptions(var pdwFlag: DWORD): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IACList2}

{ -------------------------------------------------------------------------*\
    INTERFACE: IProgressDialog

    DESCRIPTION:
        CLSID_ProgressDialog/IProgressDialog exist to allow a caller to create
    a progress dialog, set it's title, animation, text lines, progress, and
    it will do all the work of updating on a background thread, being modeless,
    handling the user canceling the operation, and estimating the time remaining
    until the operation completes.

    USAGE:
        This is how the dialog is used during operations that require progress
    and the ability to cancel:
        DWORD dwComplete, dwTotal;
        IProgressDialog * ppd;
        CoCreateInstance(CLSID_ProgressDialog, NULL, CLSCTX_INPROC_SERVER, IID_IProgressDialog, (void **)&ppd);
        ppd->SetTitle(L"My Slow Operation");                                // Set the title of the dialog.
        ppd->SetAnimation(hInstApp, IDA_OPERATION_ANIMATION);               // Set the animation to play.
        ppd->StartProgressDialog(hwndParent, punk, PROGDLG_AUTOTIME, NULL); // Display and enable automatic estimated time remaining.
        ppd->SetCancelMsg(L"Please wait while the current operation is cleaned up", NULL);   // Will only be displayed if Cancel button is pressed.

        dwComplete = 0;
        dwTotal = CalcTotalUnitsToDo();

        // Reset because CalcTotalUnitsToDo() took a long time and the estimated time
        // is based on the time between ::StartProgressDialog() and the first
        // ::SetProgress() call.
        ppd->Timer(PDTIMER_RESET, NULL);

        for (nIndex = 0; nIndex < nTotal; nIndex++)
            if (TRUE == ppd->HasUserCancelled())
                break;

            ppd->SetLine(2, L"I'm processing item n", FALSE, NULL);
            dwComplete += DoSlowOperation();

            ppd->SetProgress(dwCompleted, dwTotal);

        ppd->StopProgressDialog();
        ppd->Release();
\*------------------------------------------------------------------------- }

// Flags for IProgressDialog::StartProgressDialog() (dwFlags)
// The flag space includes OPPROGDLG_ and PROGDLG_ values, please guarantee they don't conflict. See shobjidl.idl for OPPROGDLG_*
const
  PROGDLG_NORMAL = $00000000;               // default normal progress dlg behavior
  {$EXTERNALSYM PROGDLG_NORMAL}
  PROGDLG_MODAL = $00000001;                // the dialog is modal to its hwndParent (default is modeless)
  {$EXTERNALSYM PROGDLG_MODAL}
  PROGDLG_AUTOTIME = $00000002;             // automatically updates the "Line3" text with the "time remaining" (you cant call SetLine3 if you passs this!)
  {$EXTERNALSYM PROGDLG_AUTOTIME}
  PROGDLG_NOTIME = $00000004;               // we dont show the "time remaining" if this is set. We need this if dwTotal < dwCompleted for sparse files
  {$EXTERNALSYM PROGDLG_NOTIME}
  PROGDLG_NOMINIMIZE = $00000008;           // Do not have a minimize button in the caption bar.
  {$EXTERNALSYM PROGDLG_NOMINIMIZE}
  PROGDLG_NOPROGRESSBAR = $00000010;        // Don't display the progress bar
  {$EXTERNALSYM PROGDLG_NOPROGRESSBAR}
  PROGDLG_MARQUEEPROGRESS = $00000020;      // Use marquee progress (comctl32 v6 required)
  {$EXTERNALSYM PROGDLG_MARQUEEPROGRESS}
  PROGDLG_NOCANCEL = $00000040;             // No cancel button (operation cannot be canceled) (use sparingly)
  {$EXTERNALSYM PROGDLG_NOCANCEL}

// Time Actions (dwTimerAction)
  PDTIMER_RESET = $00000001;             // Reset the timer so the progress will be calculated from now until the first ::SetProgress() is called so
  {$EXTERNALSYM PDTIMER_RESET}
                                             // those this time will correspond to the values passed to ::SetProgress().  Only do this before ::SetProgress() is called.
  PDTIMER_PAUSE = $00000002;             // Progress has been suspended
  {$EXTERNALSYM PDTIMER_PAUSE}
  PDTIMER_RESUME = $00000003;            // Progress has resumed
  {$EXTERNALSYM PDTIMER_RESUME}

type
  IProgressDialog = interface(IUnknown)
    [SID_IProgressDialog]
    function StartProgressDialog(hwndParent: HWND; const punkEnableModless: IUnknown; dwFlags: DWORD; var pvResevered: Pointer): HRESULT; stdcall;

    function StopProgressDialog: HRESULT; stdcall;

    function SetTitle(pwzTitle:LPCWSTR): HRESULT; stdcall;

    function SetAnimation(hInstAnimation: HINST; idAnimation: UINT): HRESULT; stdcall;

    function HasUserCancelled: BOOL; stdcall;

    function SetProgress(dwCompleted, dwTotal: DWORD): HRESULT; stdcall;

    function SetProgress64(ullCompleted, ullTotal: ULONGLONG): HRESULT; stdcall;

    function SetLine(dwLineNum: DWORD; pwzString: LPCWSTR; fCompactPath: BOOL; var pvResevered: Pointer): HRESULT; stdcall;

    function SetCancelMsg(pwzCancelMsg: LPCWSTR; var pvResevered: Pointer): HRESULT; stdcall;

    function Timer(dwTimerAction: DWORD; var pvResevered: Pointer): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IProgressDialog}

// -------------------------------------------------------------------------
// IDockingWindowSite interface
// 
//   A site implements this interface so the object can negotiate for
// and inquire about real estate on the site.
// 
// [Member functions]
// 
// IDockingWindowSite::GetBorderDW(punkObj, prcBorder)
//   Site returns the bounding rectangle of the given source object
//   (punkObj).
// 
// IDockingWindowSite::RequestBorderSpaceDW(punkObj, pbw)
//   Object requests that the site makes room for it, as specified in
//   *pbw.
// 
// IDockingWindowSite::SetBorderSpaceDW(punkObj, pbw)
//   Object requests that the site set the border spacing to the size
//   specified in *pbw.
// -------------------------------------------------------------------------
  IDockingWindowSite = interface(IOleWindow)
    [SID_IDockingWindowSite]
    function GetBorderDW(punkObj: IUnknown; var prcBorder: TRect): HResult; stdcall;
    function RequestBorderSpaceDW(punkObj: IUnknown; var pbw: TBorderWidths): HResult; stdcall;
    function SetBorderSpaceDW(punkObj: IUnknown; var pbw: TBorderWidths): HResult; stdcall;
  end;
  {$EXTERNALSYM IDockingWindowSite}

// -------------------------------------------------------------------------
// IDockingWindowFrame interface
// 
// [Member functions]
// 
// IDockingWindowFrame::AddToolbar(punkSrc, pwszItem, dwReserved)
// 
// IDockingWindowFrame::RemoveToolbar(punkSrc, dwRemoveFlags)
// 
// IDockingWindowFrame::FindToolbar(pwszItem, riid, ppv)
// -------------------------------------------------------------------------

const
  // flags for RemoveToolbar
  DWFRF_NORMAL           = $0000; 
  {$EXTERNALSYM DWFRF_NORMAL}
  DWFRF_DELETECONFIGDATA = $0001; 
  {$EXTERNALSYM DWFRF_DELETECONFIGDATA}


   // flags for AddToolbar
  DWFAF_HIDDEN   = $0001;    // add hidden
  {$EXTERNALSYM DWFAF_HIDDEN}
  DWFAF_GROUP1   = $0002;    // insert at end of group 1
  {$EXTERNALSYM DWFAF_GROUP1}
  DWFAF_GROUP2   = $0004;    // insert at end of group 2
  {$EXTERNALSYM DWFAF_GROUP2}
  DWFAF_AUTOHIDE = $0010;    // The toolbar will be subject to AutoHide in Full Screen mode
  {$EXTERNALSYM DWFAF_AUTOHIDE}

type
  IDockingWindowFrame = interface(IOleWindow)
    [SID_IDockingWindowFrame]
    function AddToolbar(punkSrc: IUnknown; pwszItem: PWideChar;
      dwAddFlags: DWORD): HResult; stdcall;
    function RemoveToolbar(punkSrc: IUnknown; dwRemoveFlags: DWORD): HResult; stdcall;
    function FindToolbar(pwszItem: PWideChar; const riid: TIID;
      var ppvObj: Pointer): HResult; stdcall;
  end;
  {$EXTERNALSYM IDockingWindowFrame}

{ ***************** IThumbnailCapture
 * CaptureThumbnail : takes an IHTMLDocument2 and returns a thumbnail of specified
 *                    size as an hbitmap
 }

type
  IThumbnailCapture = interface(IUnknown)
    [SID_IThumbnailCapture]
    function CaptureThumbnail(var pMaxSize: TSize; 
      const pHTMLDoc2: IUnknown; var phbmThumbnail: HBITMAP): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IThumbnailCapture}

  {$HPPEMIT '#if !(NTDDI_VERSION >= NTDDI_WIN2K && NTDDI_VERSION < NTDDI_VISTA)'}
  {$HPPEMIT 'typedef struct _EnumImageStoreDATAtag ENUMSHELLIMAGESTOREDATA;'}
  {$HPPEMIT '#endif'}
  _EnumImageStoreDATAtag = record 
    szPath: packed array[0..MAX_PATH-1] of WCHAR;
    ftTimeStamp: TFileTime;
  end;
  {$EXTERNALSYM _EnumImageStoreDATAtag}
  ENUMSHELLIMAGESTOREDATA = _EnumImageStoreDATAtag;
  {$EXTERNALSYM ENUMSHELLIMAGESTOREDATA}
  TEnumShellImageStoreData = ENUMSHELLIMAGESTOREDATA;
  PEnumShellImageStoreData = ^TEnumShellImageStoreData;

  IEnumShellImageStore = interface(IUnknown)
    [SID_IEnumShellImageStore]
    function Reset: HRESULT; stdcall;

    function Next(celt: ULONG; varprgElt: TEnumShellImageStoreData; var pceltFetched: ULONG): HRESULT; stdcall;

    function Skip(celt: ULONG): HRESULT; stdcall;

    function Clone(out ppEnum: IEnumShellImageStore): HResult; stdcall;
  end;
  {$EXTERNALSYM IEnumShellImageStore}

// flags used to determine the capabilities of the storage for the images
const
  SHIMSTCAPFLAG_LOCKABLE = $0001;          // does the store require/support locking
  {$EXTERNALSYM SHIMSTCAPFLAG_LOCKABLE}
  SHIMSTCAPFLAG_PURGEABLE = $0002;         // does the store require dead items purging externally ?
  {$EXTERNALSYM SHIMSTCAPFLAG_PURGEABLE}

// this interface is used to manipulate the Image cache. It can potentially be used
// in a free threaded manner in conjunction with the Lock parameter to Open and close
type
  IShellImageStore = interface(IUnknown)
    [SID_IShellImageStore]
    function Open(dwMode: DWORD; var pdwLock: DWORD): HRESULT; stdcall;

    function Create(dwMode: DWORD; var pdwLock: DWORD): HRESULT; stdcall;

    // if the lock is passed to either of these two methods, it releases the lock
    // once the operation is complete.
    function ReleaseLock(var pdwLock: DWORD ): HRESULT; stdcall;
    function Close(var pdwLock: DWORD): HRESULT; stdcall;
    function Commit(var pdwLock: DWORD): HRESULT; stdcall;
    function IsLocked: HRESULT; stdcall;

    function GetMode(var pdwMode: DWORD ): HRESULT; stdcall;
    function GetCapabilities(var pdwCapMask: DWORD ): HRESULT; stdcall;

    function AddEntry(pszName: LPCWSTR; var pftTimeStamp: TFileTime; dwMode: DWORD; hImage: HBITMAP): HRESULT; stdcall;
    function GetEntry(pszName: LPCWSTR; dwMode: DWORD; var phImage: HBITMAP): HRESULT; stdcall;
    function DeleteEntry(pszName: LPCWSTR): HRESULT; stdcall;
    function IsEntryInStore(pszName: LPCWSTR; var pftTimeStamp: TFileTime): HRESULT; stdcall;

    function Enum(out ppEnum: IEnumShellImageStore): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IShellImageStore}

// //  IShellFolderBand
// Field mask
const
  ISFB_MASK_STATE = $00000001;          // TRUE if dwStateMask and dwState is valid
  {$EXTERNALSYM ISFB_MASK_STATE}
  ISFB_MASK_BKCOLOR = $00000002;        // TRUE if crBkgnd field is valid
  {$EXTERNALSYM ISFB_MASK_BKCOLOR}
  ISFB_MASK_VIEWMODE = $00000004;       // TRUE if wViewMode field is valid
  {$EXTERNALSYM ISFB_MASK_VIEWMODE}
  ISFB_MASK_SHELLFOLDER = $00000008; 
  {$EXTERNALSYM ISFB_MASK_SHELLFOLDER}
  ISFB_MASK_IDLIST = $00000010; 
  {$EXTERNALSYM ISFB_MASK_IDLIST}
  ISFB_MASK_COLORS = $00000020;         // TRUE if crXXXX fields are valid (except bkgnd)
  {$EXTERNALSYM ISFB_MASK_COLORS}

  ISFB_STATE_DEFAULT = $00000000; 
  {$EXTERNALSYM ISFB_STATE_DEFAULT}
  ISFB_STATE_DEBOSSED = $00000001;
  {$EXTERNALSYM ISFB_STATE_DEBOSSED}
  ISFB_STATE_ALLOWRENAME = $00000002; 
  {$EXTERNALSYM ISFB_STATE_ALLOWRENAME}
  ISFB_STATE_NOSHOWTEXT = $00000004;    // TRUE if _fNoShowText
  {$EXTERNALSYM ISFB_STATE_NOSHOWTEXT}
  ISFB_STATE_CHANNELBAR = $00000010;    // TRUE if we want NavigateTarget support
  {$EXTERNALSYM ISFB_STATE_CHANNELBAR}
  ISFB_STATE_QLINKSMODE = $00000020;    // TRUE if we want to turn off drag & drop onto content items
  {$EXTERNALSYM ISFB_STATE_QLINKSMODE}
  ISFB_STATE_FULLOPEN = $00000040;      // TRUE if band should maximize when opened
  {$EXTERNALSYM ISFB_STATE_FULLOPEN}
  ISFB_STATE_NONAMESORT = $00000080;    // TRUE if band should _not_ sort icons by name
  {$EXTERNALSYM ISFB_STATE_NONAMESORT}
  ISFB_STATE_BTNMINSIZE = $00000100;    // TRUE if band should report min thickness of button
  {$EXTERNALSYM ISFB_STATE_BTNMINSIZE}

  ISFBVIEWMODE_SMALLICONS = $0001; 
  {$EXTERNALSYM ISFBVIEWMODE_SMALLICONS}
  ISFBVIEWMODE_LARGEICONS = $0002; 
  {$EXTERNALSYM ISFBVIEWMODE_LARGEICONS}
  ISFBVIEWMODE_LOGOS = $0003; 
  {$EXTERNALSYM ISFBVIEWMODE_LOGOS}

type
  tagBANDINFOSFB = record 
    dwMask: DWORD;            // [in] ISFB_MASK mask of valid fields from crBkgnd on
    dwStateMask: DWORD;       // [in] ISFB_STATE mask of dwState bits being set/queried
    dwState: DWORD;           // [in/out] ISFB_STATE bits
    crBkgnd: COLORREF;        // [in/out]
    crBtnLt: COLORREF;        // [in/out]
    crBtnDk: COLORREF;        // [in/out]
    wViewMode: Word;          // [in/out]
    wAlign: Word;             // not used (yet)
    psf: IShellFolder;       // [out]
    pidl: PItemIDList;          // [out]
  end;
  {$EXTERNALSYM tagBANDINFOSFB}
  BANDINFOSFB = tagBANDINFOSFB;
  {$EXTERNALSYM BANDINFOSFB}
  TBandInfoSFB = BANDINFOSFB;
  PBandInfoSFB = ^BANDINFOSFB;

  IShellFolderBand = interface(IUnknown)
    [SID_IShellFolderBand]
    function InitializeSFB(const psf: IShellFolder; pidl: PItemIDList): HRESULT; stdcall;

    function SetBandInfoSFB(var pbi: TBandInfoSFB): HRESULT; stdcall;

    function GetBandInfoSFB(var pbi: TBandInfoSFB): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IShellFolderBand}

// Command Target IDs
const
  SFBID_PIDLCHANGED = 0; 
  {$EXTERNALSYM SFBID_PIDLCHANGED}

// //  IDeskBarClient
type
  IDeskBarClient = interface(IOleWindow)
    [SID_IDeskBarClient]
    function SetDeskBarSite(const punkSite: IUnknown): HRESULT; stdcall;

    function SetModeDBC(dwMode: DWORD): HRESULT; stdcall;

    function UIActivateDBC(dwState: DWORD): HRESULT; stdcall;

    function GetSize(dwWhich: DWORD; var prc: TRect): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IDeskBarClient}
const
  DBC_GS_IDEAL = 0;          // get the ideal size
  {$EXTERNALSYM DBC_GS_IDEAL}
  DBC_GS_SIZEDOWN = 1;       // clip the height of a rect to a multiple of the rebar's integral size
  {$EXTERNALSYM DBC_GS_SIZEDOWN}

  DBC_HIDE = 0;       // Band is hidden (being destroyed)
  {$EXTERNALSYM DBC_HIDE}
  DBC_SHOW = 1;       // Band is visible
  {$EXTERNALSYM DBC_SHOW}
  DBC_SHOWOBSCURE = 2; // Band is completely obscured
  {$EXTERNALSYM DBC_SHOWOBSCURE}

const
  DBCID_EMPTY      = 0;     // bandsite is empty
  {$EXTERNALSYM DBCID_EMPTY}
  DBCID_ONDRAG     = 1;     // (down)DragMoveEnter/Leave vaIn:I4:eDrag
  {$EXTERNALSYM DBCID_ONDRAG}
  DBCID_CLSIDOFBAR = 2;     // clsid of bar inside
  {$EXTERNALSYM DBCID_CLSIDOFBAR}
  DBCID_RESIZE     = 3;     // resize from keyboard
  {$EXTERNALSYM DBCID_RESIZE}
  DBCID_GETBAR     = 4;     // returns vaOut:VT_UNKNOWN of hosting dockbar (IDeskBar)
  {$EXTERNALSYM DBCID_GETBAR}

{$ALIGN 1}
//  Flags and structures used by IActiveDesktop
type
  _tagWALLPAPEROPT = record
    dwSize: DWORD;     // size of this Structure.
    dwStyle: DWORD;    // WPSTYLE_* mentioned above
  end;
  {$EXTERNALSYM _tagWALLPAPEROPT}
  PWallPaperOpt = ^TWallPaperOpt;
  {$EXTERNALSYM PWallPaperOpt }
  TWallPaperOpt = _tagWALLPAPEROPT;
  {$EXTERNALSYM TWallPaperOpt }

  _tagCOMPONENTSOPT = record
    dwSize: DWORD;             // Size of this structure
    fEnableComponents: BOOL;   // Enable components?
    fActiveDesktop: BOOL;      // Active desktop enabled ?
  end;
  {$EXTERNALSYM _tagCOMPONENTSOPT}
  PComponentsOpt = ^TComponentsOpt;
  {$EXTERNALSYM PComponentsOpt }
  TComponentsOpt = _tagCOMPONENTSOPT;
  {$EXTERNALSYM TComponentsOpt }

  _tagCOMPPOS = record
    dwSize: DWORD;             //Size of this structure
    iLeft: Integer;            //Left of top-left corner in screen co-ordinates.
    iTop: Integer;             //Top of top-left corner in screen co-ordinates.
    dwWidth: DWORD;            // Width in pixels.
    dwHeight: DWORD;           // Height in pixels.
    izIndex: Integer;          // Indicates the Z-order of the component.
    fCanResize: BOOL;          // Is the component resizeable?
    fCanResizeX: BOOL;         // Resizeable in X-direction?
    fCanResizeY: BOOL;         // Resizeable in Y-direction?
    iPreferredLeftPercent: Integer;  //Left of top-left corner as percent of screen width
    iPreferredTopPercent: Integer;   //Top of top-left corner as percent of screen height
  end;
  {$EXTERNALSYM _tagCOMPPOS}
  PCompPos = ^TCompPos;
  {$EXTERNALSYM PCompPos }
  TCompPos = _tagCOMPPOS;
  {$EXTERNALSYM TCompPos }

  _tagCOMPSTATEINFO = record
    dwSize: DWORD;              // Size of this structure.
    iLeft: Integer;             // Left of the top-left corner in screen co-ordinates.
    iTop: Integer;              // Top of top-left corner in screen co-ordinates.
    dwWidth: DWORD;             // Width in pixels.
    dwHeight: DWORD;            // Height in pixels.
    dwItemState: DWORD;         // State of the component (full-screen mode or split-screen or normal state.
  end;
  {$EXTERNALSYM _tagCOMPSTATEINFO}
  TCompStateInfo = _tagCOMPSTATEINFO;
  PCompStateInfo = ^TCompStateInfo;
{$ALIGN ON}

  COMPSTATEINFO = _tagCOMPSTATEINFO;
  {$EXTERNALSYM COMPSTATEINFO}

  LPCOMPSTATEINFO = ^COMPSTATEINFO; 
  {$EXTERNALSYM LPCOMPSTATEINFO}
  LPCCOMPSTATEINFO = ^COMPSTATEINFO; 
  {$EXTERNALSYM LPCCOMPSTATEINFO}

const
  COMPONENT_TOP = $3fffffff;    // izOrder value meaning component is at the top
  {$EXTERNALSYM COMPONENT_TOP}

// iCompType values
  COMP_TYPE_HTMLDOC = 0; 
  {$EXTERNALSYM COMP_TYPE_HTMLDOC}
  COMP_TYPE_PICTURE = 1; 
  {$EXTERNALSYM COMP_TYPE_PICTURE}
  COMP_TYPE_WEBSITE = 2; 
  {$EXTERNALSYM COMP_TYPE_WEBSITE}
  COMP_TYPE_CONTROL = 3; 
  {$EXTERNALSYM COMP_TYPE_CONTROL}
  COMP_TYPE_CFHTML = 4; 
  {$EXTERNALSYM COMP_TYPE_CFHTML}
  COMP_TYPE_MAX = 4; 
  {$EXTERNALSYM COMP_TYPE_MAX}

// The following is the COMPONENT structure used in IE4.01, IE4.0 and Memphis. It is kept here for compatibility
// reasons.
type
  _tagIE4COMPONENT = record
    dwSize: DWORD;              // Size of this structure
    dwID: DWORD;                // Reserved: Set it always to zero.
    iComponentType: Integer;    // One of COMP_TYPE_*
    fChecked: BOOL;             // Is this component enabled?
    fDirty: BOOL;               // Had the component been modified and not yet saved to disk?
    fNoScroll: BOOL;            // Is the component scrollable?
    cpPos: TCompPos;            // Width, height etc.,
    wszFriendlyName: packed array[0..MAX_PATH-1] of WCHAR;// Friendly name of component.
    wszSource: packed array[0..INTERNET_MAX_URL_LENGTH-1] of WCHAR;// URL of the component.
    wszSubscribedURL: packed array[0..INTERNET_MAX_URL_LENGTH-1] of WCHAR;// Subscrined URL
  end;
  {$EXTERNALSYM _tagIE4COMPONENT}
  TIE4Component = _tagIE4COMPONENT;
  PIE4Component = ^TIE4component;
  IE4COMPONENT = _tagIE4COMPONENT;
  {$EXTERNALSYM IE4COMPONENT}

  LPIE4COMPONENT = ^IE4COMPONENT;
  {$EXTERNALSYM LPIE4COMPONENT}
  LPCIE4COMPONENT = ^IE4COMPONENT;
  {$EXTERNALSYM LPCIE4COMPONENT}

//
// The following is the new NT5 component structure. Note that the initial portion of this component exactly
// matches the IE4COMPONENT structure. All new fields are added at the bottom and the dwSize field is used to
// distinguish between IE4COMPONENT and the new COMPONENT structures.
//
  _tagCOMPONENT = record
    dwSize: DWORD;              // Size of this structure
    dwID: DWORD;                // Reserved: Set it always to zero.
    iComponentType: Integer;    // One of COMP_TYPE_*
    fChecked: BOOL;             // Is this component enabled?
    fDirty: BOOL;               // Had the component been modified and not yet saved to disk?
    fNoScroll: BOOL;            // Is the component scrollable?
    cpPos: TCompPos;            // Width, height etc.,
    wszFriendlyName: packed array[0..MAX_PATH-1] of WCHAR;// Friendly name of component.
    wszSource: packed array[0..INTERNET_MAX_URL_LENGTH-1] of WCHAR;// URL of the component.
    wszSubscribedURL: packed array[0..INTERNET_MAX_URL_LENGTH-1] of WCHAR;// Subscrined URL

    // New fields are added below. Everything above here must exactly match the IE4COMPONENT Structure.
    dwCurItemState: DWORD;          // Current state of the Component.
    csiOriginal: TCompStateInfo;    // Original state of the component when it was first added.
    csiRestored: TCompStateInfo;    // Restored state of the component.
  end;
  {$EXTERNALSYM _tagCOMPONENT}
  TShComponent = _tagCOMPONENT;
  PShComponent = ^TShComponent;

  COMPONENT = _tagCOMPONENT;
  {$EXTERNALSYM COMPONENT}

  LPCOMPONENT = ^COMPONENT;
  {$EXTERNALSYM LPCOMPONENT}
  LPCCOMPONENT = ^COMPONENT;
  {$EXTERNALSYM LPCCOMPONENT}

// Defines for dwCurItemState
const
  IS_NORMAL = $00000001;
  {$EXTERNALSYM IS_NORMAL}
  IS_FULLSCREEN = $00000002;
  {$EXTERNALSYM IS_FULLSCREEN}
  IS_SPLIT = $00000004; 
  {$EXTERNALSYM IS_SPLIT}
  IS_VALIDSIZESTATEBITS = IS_NORMAL or IS_SPLIT or IS_FULLSCREEN;   // The set of IS_* state bits which define the "size" of the component - these bits are mutually exclusive.
  {$EXTERNALSYM IS_VALIDSIZESTATEBITS}
  IS_VALIDSTATEBITS = IS_NORMAL or IS_SPLIT or IS_FULLSCREEN or $80000000 or $40000000;       // All of the currently defined IS_* bits.
  {$EXTERNALSYM IS_VALIDSTATEBITS}

// //////////////////////////////////////////
// Flags for IActiveDesktop::ApplyChanges()
  AD_APPLY_SAVE = $00000001; 
  {$EXTERNALSYM AD_APPLY_SAVE}
  AD_APPLY_HTMLGEN = $00000002; 
  {$EXTERNALSYM AD_APPLY_HTMLGEN}
  AD_APPLY_REFRESH = $00000004; 
  {$EXTERNALSYM AD_APPLY_REFRESH}
  AD_APPLY_ALL = AD_APPLY_SAVE or AD_APPLY_HTMLGEN or AD_APPLY_REFRESH; 
  {$EXTERNALSYM AD_APPLY_ALL}
  AD_APPLY_FORCE = $00000008; 
  {$EXTERNALSYM AD_APPLY_FORCE}
  AD_APPLY_BUFFERED_REFRESH = $00000010; 
  {$EXTERNALSYM AD_APPLY_BUFFERED_REFRESH}
  AD_APPLY_DYNAMICREFRESH = $00000020; 
  {$EXTERNALSYM AD_APPLY_DYNAMICREFRESH}

// //////////////////////////////////////////
// Flags for IActiveDesktop::GetWallpaper()
  AD_GETWP_BMP = $00000000; 
  {$EXTERNALSYM AD_GETWP_BMP}
  AD_GETWP_IMAGE = $00000001; 
  {$EXTERNALSYM AD_GETWP_IMAGE}
  AD_GETWP_LAST_APPLIED = $00000002; 
  {$EXTERNALSYM AD_GETWP_LAST_APPLIED}

// //////////////////////////////////////////
// Flags for IActiveDesktop::GetWallpaperOptions()
//           IActiveDesktop::SetWallpaperOptions()
  WPSTYLE_CENTER = 0; 
  {$EXTERNALSYM WPSTYLE_CENTER}
  WPSTYLE_TILE = 1; 
  {$EXTERNALSYM WPSTYLE_TILE}
  WPSTYLE_STRETCH = 2; 
  {$EXTERNALSYM WPSTYLE_STRETCH}
  WPSTYLE_KEEPASPECT = 3; 
  {$EXTERNALSYM WPSTYLE_KEEPASPECT}
  WPSTYLE_CROPTOFIT = 4; 
  {$EXTERNALSYM WPSTYLE_CROPTOFIT}
  WPSTYLE_MAX = 5;
  {$EXTERNALSYM WPSTYLE_MAX}

// //////////////////////////////////////////
// Flags for IActiveDesktop::ModifyComponent()

  COMP_ELEM_TYPE = $00000001; 
  {$EXTERNALSYM COMP_ELEM_TYPE}
  COMP_ELEM_CHECKED = $00000002; 
  {$EXTERNALSYM COMP_ELEM_CHECKED}
  COMP_ELEM_DIRTY = $00000004; 
  {$EXTERNALSYM COMP_ELEM_DIRTY}
  COMP_ELEM_NOSCROLL = $00000008; 
  {$EXTERNALSYM COMP_ELEM_NOSCROLL}
  COMP_ELEM_POS_LEFT = $00000010; 
  {$EXTERNALSYM COMP_ELEM_POS_LEFT}
  COMP_ELEM_POS_TOP = $00000020; 
  {$EXTERNALSYM COMP_ELEM_POS_TOP}
  COMP_ELEM_SIZE_WIDTH = $00000040; 
  {$EXTERNALSYM COMP_ELEM_SIZE_WIDTH}
  COMP_ELEM_SIZE_HEIGHT = $00000080; 
  {$EXTERNALSYM COMP_ELEM_SIZE_HEIGHT}
  COMP_ELEM_POS_ZINDEX = $00000100; 
  {$EXTERNALSYM COMP_ELEM_POS_ZINDEX}
  COMP_ELEM_SOURCE = $00000200; 
  {$EXTERNALSYM COMP_ELEM_SOURCE}
  COMP_ELEM_FRIENDLYNAME = $00000400; 
  {$EXTERNALSYM COMP_ELEM_FRIENDLYNAME}
  COMP_ELEM_SUBSCRIBEDURL = $00000800; 
  {$EXTERNALSYM COMP_ELEM_SUBSCRIBEDURL}
  COMP_ELEM_ORIGINAL_CSI = $00001000; 
  {$EXTERNALSYM COMP_ELEM_ORIGINAL_CSI}
  COMP_ELEM_RESTORED_CSI = $00002000; 
  {$EXTERNALSYM COMP_ELEM_RESTORED_CSI}
  COMP_ELEM_CURITEMSTATE = $00004000; 
  {$EXTERNALSYM COMP_ELEM_CURITEMSTATE}

  COMP_ELEM_ALL = COMP_ELEM_TYPE or COMP_ELEM_CHECKED or COMP_ELEM_DIRTY or                     
                         COMP_ELEM_NOSCROLL or COMP_ELEM_POS_LEFT or COMP_ELEM_SIZE_WIDTH  or          
                         COMP_ELEM_SIZE_HEIGHT or COMP_ELEM_POS_ZINDEX or COMP_ELEM_SOURCE or          
                         COMP_ELEM_FRIENDLYNAME or COMP_ELEM_POS_TOP or COMP_ELEM_SUBSCRIBEDURL or     
                         COMP_ELEM_ORIGINAL_CSI or COMP_ELEM_RESTORED_CSI or COMP_ELEM_CURITEMSTATE; 
  {$EXTERNALSYM COMP_ELEM_ALL}

// //////////////////////////////////////////
// Flags for IActiveDesktop::AddDesktopItemWithUI()
type
  tagDTI_ADTIWUI = Integer; 
  {$EXTERNALSYM tagDTI_ADTIWUI}
const
  DTI_ADDUI_DEFAULT       = $00000000; 
  {$EXTERNALSYM DTI_ADDUI_DEFAULT}
  DTI_ADDUI_DISPSUBWIZARD = $00000001; 
  {$EXTERNALSYM DTI_ADDUI_DISPSUBWIZARD}
  DTI_ADDUI_POSITIONITEM  = $00000002; 
  {$EXTERNALSYM DTI_ADDUI_POSITIONITEM}

// //////////////////////////////////////////
// Flags for IActiveDesktop::AddUrl()
  ADDURL_SILENT = $0001; 
  {$EXTERNALSYM ADDURL_SILENT}

// //////////////////////////////////////////
// Default positions for ADI
  COMPONENT_DEFAULT_LEFT = $FFFF; 
  {$EXTERNALSYM COMPONENT_DEFAULT_LEFT}
  COMPONENT_DEFAULT_TOP = $FFFF; 
  {$EXTERNALSYM COMPONENT_DEFAULT_TOP}

// 
//  Interface for manipulating the Active Desktop.
//
type
  IActiveDesktop = interface(IUnknown)
    [SID_IActiveDesktop]
    function ApplyChanges(dwFlags: DWORD): HResult; stdcall;
    function GetWallpaper(pwszWallpaper: PWideChar; cchWallpaper: UINT;
      dwReserved: DWORD): HResult; stdcall;
    function SetWallpaper(pwszWallpaper: PWideChar; dwReserved: DWORD): HResult; stdcall;
    function GetWallpaperOptions(var pwpo: TWallPaperOpt; dwReserved: DWORD): HResult; stdcall;
    function SetWallpaperOptions(var pwpo: TWallPaperOpt; dwReserved: DWORD): HResult; stdcall;
    function GetPattern(pwszPattern: PWideChar; cchPattern: UINT;
      dwReserved: DWORD): HResult; stdcall;
    function SetPattern(pwszPattern: PWideChar; dwReserved: DWORD): HResult; stdcall;
    function GetDesktopItemOptions(var pco: TComponentsOpt; dwReserved: DWORD):
      HResult; stdcall;
    function SetDesktopItemOptions(var pco: TComponentsOpt; dwReserved: DWORD):
      HResult; stdcall;
    function AddDesktopItem(var pcomp: TShComponent; dwReserved: DWORD): HResult; stdcall;
    function AddDesktopItemWithUI(hwnd: HWND; var pcomp: TShComponent;
      dwReserved: DWORD): HResult; stdcall;
    function ModifyDesktopItem(var pcomp: TShComponent; dwReserved: DWORD): HResult; stdcall;
    function RemoveDesktopItem(var pcomp: TShComponent; dwReserved: DWORD): HResult; stdcall;
    function GetDesktopItemCount(var lpiCount: Integer; dwReserved: DWORD): HResult; stdcall;
    function GetDesktopItem(nComponent: Integer; var pcomp: TShComponent;
      dwReserved: DWORD): HResult; stdcall;
    function GetDesktopItemByID(dwID: DWORD; var pcomp: TShComponent;
      dwReserved: DWORD): HResult; stdcall;
    function GenerateDesktopItemHtml(pwszFileName: PWideChar;
      var pcomp: TShComponent; dwReserved: DWORD): HResult; stdcall;
    function AddUrl(hwnd: HWND; pszSource: PWideChar; var pcomp: TShComponent;
      dwFlags: DWORD): HResult; stdcall;
    function GetDesktopItemBySource(pwszSource: PWideChar; var pcomp: TShComponent;
      dwReserved: DWORD): HResult; stdcall;
  end;
  {$EXTERNALSYM IActiveDesktop}

// Flags for SetSafeMode
const
  SSM_CLEAR = $0000; 
  {$EXTERNALSYM SSM_CLEAR}
  SSM_SET = $0001; 
  {$EXTERNALSYM SSM_SET}
  SSM_REFRESH = $0002; 
  {$EXTERNALSYM SSM_REFRESH}
  SSM_UPDATE = $0004; 
  {$EXTERNALSYM SSM_UPDATE}

// Flags for Set/GetScheme
  SCHEME_DISPLAY = $0001; 
  {$EXTERNALSYM SCHEME_DISPLAY}
  SCHEME_EDIT = $0002; 
  {$EXTERNALSYM SCHEME_EDIT}
  SCHEME_LOCAL = $0004; 
  {$EXTERNALSYM SCHEME_LOCAL}
  SCHEME_GLOBAL = $0008; 
  {$EXTERNALSYM SCHEME_GLOBAL}
  SCHEME_REFRESH = $0010; 
  {$EXTERNALSYM SCHEME_REFRESH}
  SCHEME_UPDATE = $0020; 
  {$EXTERNALSYM SCHEME_UPDATE}
  SCHEME_DONOTUSE = $0040; // used to be SCHEME_ENUMERATE; no longer supported
  {$EXTERNALSYM SCHEME_DONOTUSE}
  SCHEME_CREATE = $0080; 
  {$EXTERNALSYM SCHEME_CREATE}

type
  IActiveDesktopP = interface(IUnknown)
    [SID_IActiveDesktopP]
    function SetSafeMode(dwFlags: DWORD): HRESULT; stdcall;

    function EnsureUpdateHTML: HRESULT; stdcall;

    function SetScheme(pwszSchemeName: LPCWSTR; dwFlags: DWORD): HRESULT; stdcall;

    function GetScheme(var pwszSchemeName: LPWSTR; var lpdwcchBuffer: DWORD; dwFlags: DWORD): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IActiveDesktopP}

// Flags for GetObjectFlags
const
  GADOF_DIRTY = $00000001;
  {$EXTERNALSYM GADOF_DIRTY}

type
  IADesktopP2 = interface(IUnknown)
    [SID_IADesktopP2]
    function ReReadWallpaper: HRESULT; stdcall;
    function GetADObjectFlags(var lpdwFlags: DWORD; dwMask: DWORD): HRESULT; stdcall;
    function UpdateAllDesktopSubscriptions: HRESULT; stdcall;
    function MakeDynamicChanges(const pOleObj: IOleObject): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IADesktopP2}

const
  MAX_COLUMN_NAME_LEN = 80; 
  {$EXTERNALSYM MAX_COLUMN_NAME_LEN}
  MAX_COLUMN_DESC_LEN = 128; 
  {$EXTERNALSYM MAX_COLUMN_DESC_LEN}

{$ALIGN 1}
type
  LPSHCOLUMNINFO = ^SHCOLUMNINFO;
  {$EXTERNALSYM LPCSHCOLUMNINFO}
  tagSHCOLUMNINFO = record
    scid: TSHColumnID;                          // OUT the unique identifier of this column
    vt: TVarType;                               // OUT the native type of the data returned
    fmt: DWORD;                                 // OUT this listview format (LVCFMT_LEFT, usually)
    cChars: UINT;                               // OUT the default width of the column, in characters
    csFlags: DWORD;                             // OUT SHCOLSTATE flags
    wszTitle: packed array[0..MAX_COLUMN_NAME_LEN-1] of WCHAR;// OUT the title of the column
    wszDescription: packed array[0..MAX_COLUMN_DESC_LEN-1] of WCHAR;// OUT full description of this column
  end;
  {$EXTERNALSYM tagSHCOLUMNINFO}
  SHCOLUMNINFO = tagSHCOLUMNINFO;
  {$EXTERNALSYM SHCOLUMNINFO}
  TSHColumnInfo = SHCOLUMNINFO;
  PSHColumnInfo = ^TSHCOLUMNINFO;

  LPCSHCOLUMNINFO = ^SHCOLUMNINFO;
  {$EXTERNALSYM LPSHCOLUMNINFO}
{$ALIGN ON}

  LPSHCOLUMNINIT = ^SHCOLUMNINIT;
  {$EXTERNALSYM LPSHCOLUMNINIT}
  tagSHCOLUMNINIT = record
    dwFlags: Cardinal;            // initialization flags
    dwReserved: Cardinal;         // reserved for future use.
    wszFolder: packed array[0..MAX_PATH-1] of WCHAR;// fully qualified folder path (or empty if multiple folders)
  end;
  {$EXTERNALSYM tagSHCOLUMNINIT}
  SHCOLUMNINIT = tagSHCOLUMNINIT;
  {$EXTERNALSYM SHCOLUMNINIT}

  LPCSHCOLUMNINIT = ^SHCOLUMNINIT; 
  {$EXTERNALSYM LPCSHCOLUMNINIT}
  TSHColumnInit = SHCOLUMNINIT;
  PSHColumnInit = ^TSHCOLUMNINIT;

const
  SHCDF_UPDATEITEM = $00000001;             // this flag is a hint that the file has changed since the last call to GetItemData
  {$EXTERNALSYM SHCDF_UPDATEITEM}

type
  LPSHCOLUMNDATA = ^SHCOLUMNDATA;
  {$EXTERNALSYM LPSHCOLUMNDATA}
  tagSHCOLUMNDATA = record 
    dwFlags: Cardinal;           // combination of SHCDF_ flags.
    dwFileAttributes: DWORD;     // file attributes.
    dwReserved: Cardinal;        // reserved for future use.
    pwszExt: PWCHAR;             // address of file name extension
    wszFile: packed array[0..MAX_PATH-1] of WCHAR;// Absolute path of file.
  end;
  {$EXTERNALSYM tagSHCOLUMNDATA}
  SHCOLUMNDATA = tagSHCOLUMNDATA;
  {$EXTERNALSYM SHCOLUMNDATA}
  LPCSHCOLUMNDATA = ^SHCOLUMNDATA; 
  {$EXTERNALSYM LPCSHCOLUMNDATA}
  TSHColumnData = SHCOLUMNDATA;
  PSHColumnData = ^TSHCOLUMNDATA;


// Note: these objects must be threadsafe!  GetItemData _will_ be called
// simultaneously from multiple threads.
  IColumnProvider = interface(IUnknown)
    [SID_IColumnProvider]
    function Initialize(const psci: TSHColumnInit): HRESULT; stdcall;

    function GetColumnInfo(dwIndex: DWORD; out psci: TShColumnInfo): HRESULT; stdcall;

    function GetItemData(const pscid: TSHColumnID; const pscd: TSHColumnData; out pvarData): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IColumnProvider}

// ==========================================================================
// Clipboard format which may be supported by IDataObject from system
// defined shell folders (such as directories, network, ...).
// ==========================================================================

const
  CFSTR_SHELLIDLIST                = 'Shell IDList Array';               // CF_IDLIST
  {$EXTERNALSYM CFSTR_SHELLIDLIST}
  CFSTR_SHELLIDLISTOFFSET          = 'Shell Object Offsets';             // CF_OBJECTPOSITIONS
  {$EXTERNALSYM CFSTR_SHELLIDLISTOFFSET}
  CFSTR_NETRESOURCES               = 'Net Resource';                     // CF_NETRESOURCE
  {$EXTERNALSYM CFSTR_NETRESOURCES}
  CFSTR_FILEDESCRIPTORA            = 'FileGroupDescriptor';              // CF_FILEGROUPDESCRIPTORA
  {$EXTERNALSYM CFSTR_FILEDESCRIPTORA}
  CFSTR_FILEDESCRIPTORW            = 'FileGroupDescriptorW';             // CF_FILEGROUPDESCRIPTORW
  {$EXTERNALSYM CFSTR_FILEDESCRIPTORW}
  CFSTR_FILECONTENTS               = 'FileContents';                     // CF_FILECONTENTS
  {$EXTERNALSYM CFSTR_FILECONTENTS}
  CFSTR_FILENAMEA                  = 'FileName';                         // CF_FILENAMEA
  {$EXTERNALSYM CFSTR_FILENAMEA}
  CFSTR_FILENAMEW                  = 'FileNameW';                        // CF_FILENAMEW
  {$EXTERNALSYM CFSTR_FILENAMEW}
  CFSTR_PRINTERGROUP               = 'PrinterFriendlyName';              // CF_PRINTERS
  {$EXTERNALSYM CFSTR_PRINTERGROUP}
  CFSTR_FILENAMEMAPA               = 'FileNameMap';                      // CF_FILENAMEMAPA
  {$EXTERNALSYM CFSTR_FILENAMEMAPA}
  CFSTR_FILENAMEMAPW               = 'FileNameMapW';                     // CF_FILENAMEMAPW
  {$EXTERNALSYM CFSTR_FILENAMEMAPW}
  CFSTR_SHELLURL                   = 'UniformResourceLocator';
  {$EXTERNALSYM CFSTR_SHELLURL}
  CFSTR_INETURLA                   = CFSTR_SHELLURL;
  {$EXTERNALSYM CFSTR_INETURLA}
  CFSTR_INETURLW                   = 'UniformResourceLocatorW';
  {$EXTERNALSYM CFSTR_INETURLW}
  CFSTR_PREFERREDDROPEFFECT        = 'Preferred DropEffect';
  {$EXTERNALSYM CFSTR_PREFERREDDROPEFFECT}
  CFSTR_PERFORMEDDROPEFFECT        = 'Performed DropEffect';
  {$EXTERNALSYM CFSTR_PERFORMEDDROPEFFECT}
  CFSTR_PASTESUCCEEDED             = 'Paste Succeeded';
  {$EXTERNALSYM CFSTR_PASTESUCCEEDED}
  CFSTR_INDRAGLOOP                 = 'InShellDragLoop';
  {$EXTERNALSYM CFSTR_INDRAGLOOP}
  CFSTR_MOUNTEDVOLUME              = 'MountedVolume';
  {$EXTERNALSYM CFSTR_MOUNTEDVOLUME}
  CFSTR_PERSISTEDDATAOBJECT        = 'PersistedDataObject';
  {$EXTERNALSYM CFSTR_PERSISTEDDATAOBJECT}
  CFSTR_TARGETCLSID                = 'TargetCLSID';                      // HGLOBAL with a CLSID of the drop target
  {$EXTERNALSYM CFSTR_TARGETCLSID}
  CFSTR_LOGICALPERFORMEDDROPEFFECT = 'Logical Performed DropEffect';
  {$EXTERNALSYM CFSTR_LOGICALPERFORMEDDROPEFFECT}
  CFSTR_AUTOPLAY_SHELLIDLISTS      = 'Autoplay Enumerated IDList Array'; // (HGLOBAL with LPIDA)
  {$EXTERNALSYM CFSTR_AUTOPLAY_SHELLIDLISTS}
  CFSTR_UNTRUSTEDDRAGDROP          = 'UntrustedDragDrop';                // DWORD
  {$EXTERNALSYM CFSTR_UNTRUSTEDDRAGDROP}
  CFSTR_FILE_ATTRIBUTES_ARRAY      = 'File Attributes Array';            // (FILE_ATTRIBUTES_ARRAY format on HGLOBAL)
  {$EXTERNALSYM CFSTR_FILE_ATTRIBUTES_ARRAY}
  CFSTR_INVOKECOMMAND_DROPPARAM    = 'InvokeCommand DropParam';          // (HGLOBAL with LPWSTR)
  {$EXTERNALSYM CFSTR_INVOKECOMMAND_DROPPARAM}
  CFSTR_SHELLDROPHANDLER           = 'DropHandlerCLSID';                 // (HGLOBAL with CLSID of drop handler)
  {$EXTERNALSYM CFSTR_SHELLDROPHANDLER}
  CFSTR_DROPDESCRIPTION            = 'DropDescription';                  // (HGLOBAL with DROPDESCRIPTION)
  {$EXTERNALSYM CFSTR_DROPDESCRIPTION}

{$IFDEF UNICODE}
  CFSTR_FILEDESCRIPTOR        = CFSTR_FILEDESCRIPTORW;
  CFSTR_FILENAME              = CFSTR_FILENAMEW;
  CFSTR_FILENAMEMAP           = CFSTR_FILENAMEMAPW;
  CFSTR_INETURL = CFSTR_INETURLW; 
{$ELSE}
  CFSTR_FILEDESCRIPTOR        = CFSTR_FILEDESCRIPTORA;
  CFSTR_FILENAME              = CFSTR_FILENAMEA;
  CFSTR_FILENAMEMAP           = CFSTR_FILENAMEMAPA;
  CFSTR_INETURL = CFSTR_INETURLA; 
{$ENDIF}
  {$EXTERNALSYM CFSTR_FILEDESCRIPTOR}
  {$EXTERNALSYM CFSTR_FILENAME}
  {$EXTERNALSYM CFSTR_FILENAMEMAP}
  {$EXTERNALSYM CFSTR_INETURL}

  DVASPECT_SHORTNAME = 2;     // use for CF_HDROP to get short name version of file paths
  {$EXTERNALSYM DVASPECT_SHORTNAME}
  DVASPECT_COPY = 3;          // use to indicate format is a "Copy" of the data (FILECONTENTS, FILEDESCRIPTOR, etc)
  {$EXTERNALSYM DVASPECT_COPY}
  DVASPECT_LINK = 4;          // use to indicate format is a "Shortcut" to the data (FILECONTENTS, FILEDESCRIPTOR, etc)
  {$EXTERNALSYM DVASPECT_LINK}

// format of CF_NETRESOURCE
type
  PNResArray = ^TNResArray;
  _NRESARRAY = record
    cItems: UINT;
    nr: array[0..0] of TNetResource;
  end;
  {$EXTERNALSYM _NRESARRAY}
  NRESARRAY = _NRESARRAY;
  {$EXTERNALSYM NRESARRAY}
  TNResArray = _NRESARRAY;

// format of CF_IDLIST
  PIDA = ^TIDA;
  _IDA = record
    cidl: UINT;                      { number of relative IDList }
    aoffset: array[0..0] of UINT;    { [0]: folder IDList, [1]-[cidl]: item IDList }
  end;
  {$EXTERNALSYM _IDA}
  CIDA = _IDA;
  {$EXTERNALSYM CIDA}
  TIDA = _IDA;

// FILEDESCRIPTOR.dwFlags field indicate which fields are valid in the FILEDESCRIPTOR struct
  FD_FLAGS = Integer; 
  {$EXTERNALSYM FD_FLAGS}
  TFDFlags = FD_FLAGS;

const
  FD_CLSID      = $00000001; 
  {$EXTERNALSYM FD_CLSID}
  FD_SIZEPOINT  = $00000002; 
  {$EXTERNALSYM FD_SIZEPOINT}
  FD_ATTRIBUTES = $00000004; 
  {$EXTERNALSYM FD_ATTRIBUTES}
  FD_CREATETIME = $00000008; 
  {$EXTERNALSYM FD_CREATETIME}
  FD_ACCESSTIME = $00000010; 
  {$EXTERNALSYM FD_ACCESSTIME}
  FD_WRITESTIME = $00000020; 
  {$EXTERNALSYM FD_WRITESTIME}
  FD_FILESIZE   = $00000040; 
  {$EXTERNALSYM FD_FILESIZE}
  FD_PROGRESSUI = $00004000;                // Show Progress UI w/Drag and Drop
  {$EXTERNALSYM FD_PROGRESSUI}
  FD_LINKUI     = $00008000;                // 'link' UI is prefered
  {$EXTERNALSYM FD_LINKUI}
  FD_UNICODE    = $80000000;                      // this descriptor is UNICODE
  {$EXTERNALSYM FD_UNICODE}

type
  PFileDescriptorA = ^TFileDescriptorA;
  PFileDescriptorW = ^TFileDescriptorW;
  PFileDescriptor = PFileDescriptorW;
  _FILEDESCRIPTORA = record
    dwFlags: DWORD;
    clsid: TCLSID;
    sizel: TSize;
    pointl: TPoint;
    dwFileAttributes: DWORD;
    ftCreationTime: TFileTime;
    ftLastAccessTime: TFileTime;
    ftLastWriteTime: TFileTime;
    nFileSizeHigh: DWORD;
    nFileSizeLow: DWORD;
    cFileName: array[0..MAX_PATH-1] of AnsiChar;
  end;
  {$EXTERNALSYM _FILEDESCRIPTORA}
  _FILEDESCRIPTORW = record
    dwFlags: DWORD;
    clsid: TCLSID;
    sizel: TSize;
    pointl: TPoint;
    dwFileAttributes: DWORD;
    ftCreationTime: TFileTime;
    ftLastAccessTime: TFileTime;
    ftLastWriteTime: TFileTime;
    nFileSizeHigh: DWORD;
    nFileSizeLow: DWORD;
    cFileName: array[0..MAX_PATH-1] of WideChar;
  end;
  {$EXTERNALSYM _FILEDESCRIPTORW}
  _FILEDESCRIPTOR = _FILEDESCRIPTORW;
  {$EXTERNALSYM _FILEDESCRIPTOR}
  TFileDescriptorA = _FILEDESCRIPTORA;
  TFileDescriptorW = _FILEDESCRIPTORW;
  TFileDescriptor = TFileDescriptorW;
  FILEDESCRIPTORA = _FILEDESCRIPTORA;
  {$EXTERNALSYM FILEDESCRIPTORA}
  FILEDESCRIPTORW = _FILEDESCRIPTORW;
  {$EXTERNALSYM FILEDESCRIPTORW}
  FILEDESCRIPTOR = FILEDESCRIPTORW;
  {$EXTERNALSYM FILEDESCRIPTOR}

// format of CF_FILEGROUPDESCRIPTOR
  PFileGroupDescriptorA = ^TFileGroupDescriptorA;
  PFileGroupDescriptorW = ^TFileGroupDescriptorW;
  PFileGroupDescriptor = PFileGroupDescriptorW;
  _FILEGROUPDESCRIPTORA = record
    cItems: UINT;
    fgd: array[0..0] of TFileDescriptorA;
  end;
  {$EXTERNALSYM _FILEGROUPDESCRIPTORA}
  _FILEGROUPDESCRIPTORW = record
    cItems: UINT;
    fgd: array[0..0] of TFileDescriptorW;
  end;
  {$EXTERNALSYM _FILEGROUPDESCRIPTORW}
  _FILEGROUPDESCRIPTOR = _FILEGROUPDESCRIPTORW;
  {$EXTERNALSYM _FILEGROUPDESCRIPTOR}
  TFileGroupDescriptorA = _FILEGROUPDESCRIPTORA;
  TFileGroupDescriptorW = _FILEGROUPDESCRIPTORW;
  TFileGroupDescriptor = TFileGroupDescriptorW;
  FILEGROUPDESCRIPTORA = _FILEGROUPDESCRIPTORA;
  {$EXTERNALSYM FILEGROUPDESCRIPTORA}
  FILEGROUPDESCRIPTORW = _FILEGROUPDESCRIPTORW;
  {$EXTERNALSYM FILEGROUPDESCRIPTORW}
  FILEGROUPDESCRIPTOR = FILEGROUPDESCRIPTORW;
  {$EXTERNALSYM FILEGROUPDESCRIPTOR}

// format of CF_HDROP and CF_PRINTERS, in the HDROP case the data that follows
// is a double null terinated list of file names, for printers they are printer
// friendly names
  PDropFiles = ^TDropFiles;
  _DROPFILES = record
    pFiles: DWORD;                       { offset of file list }
    pt: TPoint;                          { drop point (client coords) }
    fNC: BOOL;                           { is it on NonClient area }
                                         { and pt is in screen coords }
    fWide: BOOL;                         { WIDE character switch }
  end;
  {$EXTERNALSYM _DROPFILES}
  DROPFILES = _DROPFILES;
  {$EXTERNALSYM DROPFILES}
  TDropFiles = _DROPFILES;

  tagFILE_ATTRIBUTES_ARRAY = record 
    cItems: UINT;                   // number of items in rgdwFileAttributes array
    dwSumFileAttributes: DWORD;     // all of the attributes ORed together
    dwProductFileAttributes: DWORD; // all of the attributes ANDed together
    rgdwFileAttributes: packed array[0..0] of DWORD;// array
  end;
  {$EXTERNALSYM tagFILE_ATTRIBUTES_ARRAY}
  FILE_ATTRIBUTES_ARRAY = tagFILE_ATTRIBUTES_ARRAY;
  {$EXTERNALSYM FILE_ATTRIBUTES_ARRAY}
  TFileAttributesArray = FILE_ATTRIBUTES_ARRAY;
  PFileAttributesArray = ^TFileAttributesArray;

  DROPIMAGETYPE = Integer; 
  {$EXTERNALSYM DROPIMAGETYPE}
  TDropImageType = DROPIMAGETYPE;
const
  DROPIMAGE_INVALID = -1;                              // no image preference (use default)
  {$EXTERNALSYM DROPIMAGE_INVALID}
  DROPIMAGE_NONE    = 0;                               // red "no" circle
  {$EXTERNALSYM DROPIMAGE_NONE}
  DROPIMAGE_COPY    = DROPEFFECT_COPY;                 // plus for copy
  {$EXTERNALSYM DROPIMAGE_COPY}
  DROPIMAGE_MOVE    = DROPEFFECT_MOVE;                 // movement arrow for move
  {$EXTERNALSYM DROPIMAGE_MOVE}
  DROPIMAGE_LINK    = DROPEFFECT_LINK;                 // link arrow for link
  {$EXTERNALSYM DROPIMAGE_LINK}
  DROPIMAGE_LABEL   = 6;                               // tag icon to indicate metadata will be changed
  {$EXTERNALSYM DROPIMAGE_LABEL}
  DROPIMAGE_WARNING = 7;                               // yellow exclamation, something is amiss with the operation
  {$EXTERNALSYM DROPIMAGE_WARNING}
  DROPIMAGE_NOIMAGE = 8;                               // no image at all
  {$EXTERNALSYM DROPIMAGE_NOIMAGE}

type
  tagDROPDESCRIPTION = record 
    &type: TDropImageType;                            // indicates the stock image to use
    szMessage: packed array[0..MAX_PATH-1] of WCHAR; // text such as "Move to %1"
    szInsert: packed array[0..MAX_PATH-1] of WCHAR   // text such as "Documents", inserted as specified by szMessage;

// some UI coloring is applied to the text in szInsert, if used by specifying %1 in szMessage.
// %% and %1 are the subset of FormatMessage markers that are processed here.
  end;
  {$EXTERNALSYM tagDROPDESCRIPTION}
  DROPDESCRIPTION = tagDROPDESCRIPTION;
  {$EXTERNALSYM DROPDESCRIPTION}
  TDropDescription = DROPDESCRIPTION;
  PDropDescription = ^TDropDescription;

// ====== File System Notification APIs ===============================
// 
{$ALIGN 1}
  _SHChangeNotifyEntry = record
    pidl: PItemIDList;
    fRecursive: BOOL;
  end;
  {$EXTERNALSYM _SHChangeNotifyEntry}
  SHChangeNotifyEntry = _SHChangeNotifyEntry;
  {$EXTERNALSYM SHChangeNotifyEntry}
  TSHChangeNotifyEntry = SHChangeNotifyEntry;
  PSHChangeNotifyEntry = ^TSHChangeNotifyEntry;
{$ALIGN ON}

// 
//  File System Notification flags
// 

const
  SHCNRF_InterruptLevel     = $00000001;
  {$EXTERNALSYM SHCNRF_InterruptLevel}
  SHCNRF_ShellLevel         = $00000002;
  {$EXTERNALSYM SHCNRF_ShellLevel}
  SHCNRF_RecursiveInterrupt = $00001000;
  {$EXTERNALSYM SHCNRF_RecursiveInterrupt}
  SHCNRF_NewDelivery        = $00008000;
  {$EXTERNALSYM SHCNRF_NewDelivery}

  SHCNE_RENAMEITEM          = $00000001;
  {$EXTERNALSYM SHCNE_RENAMEITEM}
  SHCNE_CREATE              = $00000002;
  {$EXTERNALSYM SHCNE_CREATE}
  SHCNE_DELETE              = $00000004;
  {$EXTERNALSYM SHCNE_DELETE}
  SHCNE_MKDIR               = $00000008;
  {$EXTERNALSYM SHCNE_MKDIR}
  SHCNE_RMDIR               = $00000010;
  {$EXTERNALSYM SHCNE_RMDIR}
  SHCNE_MEDIAINSERTED       = $00000020;
  {$EXTERNALSYM SHCNE_MEDIAINSERTED}
  SHCNE_MEDIAREMOVED        = $00000040;
  {$EXTERNALSYM SHCNE_MEDIAREMOVED}
  SHCNE_DRIVEREMOVED        = $00000080;
  {$EXTERNALSYM SHCNE_DRIVEREMOVED}
  SHCNE_DRIVEADD            = $00000100;
  {$EXTERNALSYM SHCNE_DRIVEADD}
  SHCNE_NETSHARE            = $00000200;
  {$EXTERNALSYM SHCNE_NETSHARE}
  SHCNE_NETUNSHARE          = $00000400;
  {$EXTERNALSYM SHCNE_NETUNSHARE}
  SHCNE_ATTRIBUTES          = $00000800;
  {$EXTERNALSYM SHCNE_ATTRIBUTES}
  SHCNE_UPDATEDIR           = $00001000;
  {$EXTERNALSYM SHCNE_UPDATEDIR}
  SHCNE_UPDATEITEM          = $00002000;
  {$EXTERNALSYM SHCNE_UPDATEITEM}
  SHCNE_SERVERDISCONNECT    = $00004000;
  {$EXTERNALSYM SHCNE_SERVERDISCONNECT}
  SHCNE_UPDATEIMAGE         = $00008000;
  {$EXTERNALSYM SHCNE_UPDATEIMAGE}
  SHCNE_DRIVEADDGUI         = $00010000;
  {$EXTERNALSYM SHCNE_DRIVEADDGUI}
  SHCNE_RENAMEFOLDER        = $00020000;
  {$EXTERNALSYM SHCNE_RENAMEFOLDER}
  SHCNE_FREESPACE           = $00040000;
  {$EXTERNALSYM SHCNE_FREESPACE}

// SHCNE_EXTENDED_EVENT: the extended event is identified in dwItem1,
// packed in LPITEMIDLIST format (same as SHCNF_DWORD packing).
// Additional information can be passed in the dwItem2 parameter
// of SHChangeNotify (called "pidl2" below), which if present, must also
// be in LPITEMIDLIST format.
// 
// Unlike the standard events, the extended events are ORDINALs, so we
// don't run out of bits.  Extended events follow the SHCNEE_* naming
// convention.
// 
// The dwItem2 parameter varies according to the extended event.

  SHCNE_EXTENDED_EVENT = $04000000; 
  {$EXTERNALSYM SHCNE_EXTENDED_EVENT}
  SHCNE_EXTENDED_EVENT_PRE_IE4 = $00080000;

  SHCNE_ASSOCCHANGED = $08000000; 
  {$EXTERNALSYM SHCNE_ASSOCCHANGED}

  SHCNE_DISKEVENTS = $0002381F; 
  {$EXTERNALSYM SHCNE_DISKEVENTS}
  SHCNE_GLOBALEVENTS = $0C0581E0;         // Events that dont match pidls first
  {$EXTERNALSYM SHCNE_GLOBALEVENTS}
  SHCNE_ALLEVENTS = $7FFFFFFF; 
  {$EXTERNALSYM SHCNE_ALLEVENTS}
  SHCNE_INTERRUPT = $80000000;            // The presence of this flag indicates
  {$EXTERNALSYM SHCNE_INTERRUPT}
                                            // that the event was generated by an
                                            // interrupt.  It is stripped out before
                                            // the clients of SHCNNotify_ see it.

// SHCNE_EXTENDED_EVENT extended events.  These events are ordinals.
// This is not a bitfield.

  SHCNEE_ORDERCHANGED  = $00000002; // pidl2 is the changed folder
  {$EXTERNALSYM SHCNEE_ORDERCHANGED}
  SHCNEE_MSI_CHANGE    = $00000004; // pidl2 is a SHChangeProductKeyAsIDList
  {$EXTERNALSYM SHCNEE_MSI_CHANGE}
  SHCNEE_MSI_UNINSTALL = $00000005; // pidl2 is a SHChangeProductKeyAsIDList
  {$EXTERNALSYM SHCNEE_MSI_UNINSTALL}

// Flags
// uFlags & SHCNF_TYPE is an ID which indicates what dwItem1 and dwItem2 mean
  SHCNF_IDLIST = $0000;             // LPITEMIDLIST
  {$EXTERNALSYM SHCNF_IDLIST}
  SHCNF_PATHA = $0001;              // path name
  {$EXTERNALSYM SHCNF_PATHA}
  SHCNF_PRINTERA = $0002;           // printer friendly name
  {$EXTERNALSYM SHCNF_PRINTERA}
  SHCNF_DWORD = $0003;              // DWORD
  {$EXTERNALSYM SHCNF_DWORD}
  SHCNF_PATHW = $0005;              // path name
  {$EXTERNALSYM SHCNF_PATHW}
  SHCNF_PRINTERW = $0006;           // printer friendly name
  {$EXTERNALSYM SHCNF_PRINTERW}
  SHCNF_TYPE = $00FF; 
  {$EXTERNALSYM SHCNF_TYPE}
  SHCNF_FLUSH = $1000; 
  {$EXTERNALSYM SHCNF_FLUSH}
  SHCNF_FLUSHNOWAIT = $3000;        // includes SHCNF_FLUSH
  {$EXTERNALSYM SHCNF_FLUSHNOWAIT}

  SHCNF_NOTIFYRECURSIVE = $10000;      // Notify clients registered for any child
  {$EXTERNALSYM SHCNF_NOTIFYRECURSIVE}

{$IFDEF UNICODE}
  SHCNF_PATH          = SHCNF_PATHW;
  SHCNF_PRINTER       = SHCNF_PRINTERW;
{$ELSE}
  SHCNF_PATH          = SHCNF_PATHA;
  SHCNF_PRINTER       = SHCNF_PRINTERA;
{$ENDIF}
  {$EXTERNALSYM SHCNF_PATH}
  {$EXTERNALSYM SHCNF_PRINTER}

//  APIs
procedure SHChangeNotify(wEventId: Integer; uFlags: UINT; 
  dwItem1, dwItem2: Pointer); stdcall;
{$EXTERNALSYM SHChangeNotify}

// IShellChangeNotify
type
  IShellChangeNotify = interface(IUnknown)
    [SID_IShellChangeNotify]
    function OnChange(lEvent: Longint; var pidl1, pidl2: TItemIDList): HResult; stdcall;
  end;
  {$EXTERNALSYM IShellChangeNotify}

// IQueryInfo
  IQueryInfo = interface(IUnknown)
    [SID_IQueryInfo]
    function GetInfoTip(dwFlags: DWORD; var ppwszTip: PWideChar): HResult; stdcall;
    function GetInfoFlags(out pdwFlags: DWORD): HResult; stdcall;
  end;
  {$EXTERNALSYM IQueryInfo}

const
  QITIPF_DEFAULT       = $00000000;
  {$EXTERNALSYM QITIPF_DEFAULT}
  QITIPF_USENAME       = $00000001;
  {$EXTERNALSYM QITIPF_USENAME}
  QITIPF_LINKNOTARGET  = $00000002;
  {$EXTERNALSYM QITIPF_LINKNOTARGET}
  QITIPF_LINKUSETARGET = $00000004;
  {$EXTERNALSYM QITIPF_LINKUSETARGET}
  QITIPF_USESLOWTIP    = $00000008; // Flag says it's OK to take a long time generating tip
  {$EXTERNALSYM QITIPF_USESLOWTIP}
  QITIPF_SINGLELINE    = $00000010;
  {$EXTERNALSYM QITIPF_SINGLELINE}

  QIF_CACHED           = $00000001;
  {$EXTERNALSYM QIF_CACHED}
  QIF_DONTEXPANDFOLDER = $00000002;
  {$EXTERNALSYM QIF_DONTEXPANDFOLDER}

// SHAddToRecentDocs
type
  SHARD = Integer; 
  {$EXTERNALSYM SHARD}
  TSHARD = SHARD;
const
  SHARD_PIDL            = $00000001;
  {$EXTERNALSYM SHARD_PIDL}
  SHARD_PATHA           = $00000002; 
  {$EXTERNALSYM SHARD_PATHA}
  SHARD_PATHW           = $00000003; 
  {$EXTERNALSYM SHARD_PATHW}
{$IFDEF UNICODE}
  SHARD_PATH      = SHARD_PATHW;
{$ELSE}
  SHARD_PATH      = SHARD_PATHA;
{$ENDIF}
  {$EXTERNALSYM SHARD_PATH}

  SHARD_APPIDINFO       = $00000004;     // indicates the data type is a pointer to a SHARDAPPIDINFO structure
  {$EXTERNALSYM SHARD_APPIDINFO}
  SHARD_APPIDINFOIDLIST = $00000005;     // indicates the data type is a pointer to a SHARDAPPIDINFOIDLIST structure
  {$EXTERNALSYM SHARD_APPIDINFOIDLIST}
  SHARD_LINK            = $00000006;     // indicates the data type is a pointer to an IShellLink instance
  {$EXTERNALSYM SHARD_LINK}
  SHARD_APPIDINFOLINK   = $00000007;     // indicates the data type is a pointer to a SHARDAPPIDINFOLINK structure
  {$EXTERNALSYM SHARD_APPIDINFOLINK}
  SHARD_SHELLITEM       = $00000008;     // indicates the data type is a pointer to a IShellItem instance
  {$EXTERNALSYM SHARD_SHELLITEM}

type
  SHARDAPPIDINFO = record 
    psi: IShellItem;       // The namespace location of the the item that should be added to the recent docs folder.
    pszAppID: LPCWSTR;      // The id of the application that should be associated with this recent doc.
  end;
  {$EXTERNALSYM SHARDAPPIDINFO} 
  TSHARDAppIDInfo = SHARDAPPIDINFO;
  {$EXTERNALSYM TSHARDAppIDInfo} 
  PSHARDAppIDInfo = ^TSHARDAppIDInfo;
  {$EXTERNALSYM PSHARDAppIDInfo} 

  SHARDAPPIDINFOIDLIST = record
    pidl: ItemIDList;      // The idlist for the shell item that should be added to the recent docs folder.
    pszAppID: LPCWSTR;      // The id of the application that should be associated with this recent doc.
  end;
  {$EXTERNALSYM SHARDAPPIDINFOIDLIST}
  TSHARDAppIDInfoIDList = SHARDAPPIDINFOIDLIST;
  {$EXTERNALSYM TSHARDAppIDInfoIDList} 
  PSHARDAppIDInfoIDList = ^TSHARDAppIDInfoIDList;
  {$EXTERNALSYM PSHARDAppIDInfoIDList} 

  SHARDAPPIDINFOLINK = record 
    psl: IShellLink;        // An IShellLink instance that when launched opens a recently used item in the specified
                            // application. This link is not added to the recent docs folder, but will be added to the
                            // specified application's destination list.
    pszAppID: LPCWSTR;      // The id of the application that should be associated with this recent doc.
  end;
  {$EXTERNALSYM SHARDAPPIDINFOLINK}
  TSHARDAppIDInfoLink = SHARDAPPIDINFOLINK;
  {$EXTERNALSYM TSHARDAppIDInfoLink}
  PSHARDAppIDInfoLink = ^TSHARDAppIDInfoLink;
  {$EXTERNALSYM PSHARDAppIDInfoLink}

// The type of the data pointed to by pv is a function of uFlags values that are SHARD_XXX values.
// PV can be a PCIDLIST_ABSOLUTE, PCWSTR, PCSTR, SHARDAPPIDINFO, or SHARDAPPIDINFOIDLIST.
procedure SHAddToRecentDocs(uFlags: UINT; pv: Pointer); stdcall;
{$EXTERNALSYM SHAddToRecentDocs}

{$ALIGN 1}
type
  LPSHChangeDWORDAsIDList = ^SHChangeDWORDAsIDList;
  {$EXTERNALSYM LPSHChangeDWORDAsIDList}
  _SHChangeDWORDAsIDList = record
    cb: USHORT;
    dwItem1: DWORD;
    dwItem2: DWORD;
    cbZero: USHORT;
  end;
  {$EXTERNALSYM _SHChangeDWORDAsIDList}
  SHChangeDWORDAsIDList = _SHChangeDWORDAsIDList;
  {$EXTERNALSYM SHChangeDWORDAsIDList}
  TSHChangeDWORDAsIDList = SHChangeDWORDAsIDList;
  PSHChangeDWORDAsIDList = ^TSHChangeDWORDAsIDList;

  LPSHChangeUpdateImageIDList = ^SHChangeUpdateImageIDList;
  {$EXTERNALSYM LPSHChangeUpdateImageIDList}
  _SHChangeUpdateImageIDList = record
    cb: USHORT;
    iIconIndex: Integer;
    iCurIndex: Integer;
    uFlags: UINT;
    dwProcessID: DWORD;
    szName: packed array[0..MAX_PATH-1] of WCHAR;
    cbZero: USHORT;
  end;
  {$EXTERNALSYM _SHChangeUpdateImageIDList}
  SHChangeUpdateImageIDList = _SHChangeUpdateImageIDList;
  {$EXTERNALSYM SHChangeUpdateImageIDList}
  TSHChangeUpdateImageIDList = SHChangeUpdateImageIDList;
  PSHChangeUpdateImageIDList = ^TSHChangeUpdateImageIDList;
{$ALIGN ON}

function SHHandleUpdateImage(pidlExtra: PItemIDList): Integer; stdcall;
{$EXTERNALSYM SHHandleUpdateImage}

type
  LPSHChangeProductKeyAsIDList = ^SHChangeProductKeyAsIDList;
  {$EXTERNALSYM LPSHChangeProductKeyAsIDList}
  _SHChangeProductKeyAsIDList = record 
    cb: SHORT;
    wszProductKey: packed array[0..38] of WCHAR;
    cbZero: SHORT;
  end;
  {$EXTERNALSYM _SHChangeProductKeyAsIDList}
  SHChangeProductKeyAsIDList = _SHChangeProductKeyAsIDList;
  {$EXTERNALSYM SHChangeProductKeyAsIDList}
  TSHChangeProductKeyAsIDList = SHChangeProductKeyAsIDList;
  PSHChangeProductKeyAsIDList = ^TSHChangeProductKeyAsIDList;

procedure SHUpdateImageA(pszHashItem: LPCSTR; iIndex: Integer; uFlags: UINT; 
  iImageIndex: Integer); stdcall;
{$EXTERNALSYM SHUpdateImageA}
procedure SHUpdateImageW(pszHashItem: LPCWSTR; iIndex: Integer; uFlags: UINT; 
  iImageIndex: Integer); stdcall;
{$EXTERNALSYM SHUpdateImageW}
procedure SHUpdateImage(pszHashItem: LPCWSTR; iIndex: Integer; uFlags: UINT; 
  iImageIndex: Integer); stdcall;
{$EXTERNALSYM SHUpdateImage}

function SHChangeNotifyRegister(hwnd: HWND; fSources: Integer; fEvents: Integer; 
  wMsg: UINT; cEntries: Integer; 
  var pshcne: TSHChangeNotifyEntry): ULONG; stdcall;
{$EXTERNALSYM SHChangeNotifyRegister}
function SHChangeNotifyDeregister(ulID: LongWord): BOOL; stdcall;
{$EXTERNALSYM SHChangeNotifyDeregister}

type
  SCNRT_STATUS = Integer; 
  {$EXTERNALSYM SCNRT_STATUS}
  TSCNRTStatus = SCNRT_STATUS;
const
  SCNRT_ENABLE  = 0; 
  {$EXTERNALSYM SCNRT_ENABLE}
  SCNRT_DISABLE = 1; 
  {$EXTERNALSYM SCNRT_DISABLE}

//  use SHChangeNotifyRegisterThread() to enable Async Register and Deregister.
//  call with SCNRT_ENABLE at the thread proc begining and SCNRT_DISABLE at the end
//  the call with SCNRT_DISABLE can block while it synchronizes with the main ChangeNotify thread
(* H2PAS - Macro Call: STDAPI_(void) SHChangeNotifyRegisterThread(SCNRT_STATUS status); *)

function SHChangeNotification_Lock(hChange: THandle; dwProcId: DWORD; 
  out pppidl: array of PItemIDList; out plEvent: LONG): THANDLE; stdcall;
{$EXTERNALSYM SHChangeNotification_Lock}
function SHChangeNotification_Unlock(hLock: THandle): BOOL; stdcall;
{$EXTERNALSYM SHChangeNotification_Unlock}
// The pidls that are given to the view via the ChangeNotifyEvents are simple Pidls,
// SHGetRealIDL() will convert them to true PIDLs.
function SHGetRealIDL(const psf: IShellFolder; pidlSimple: PItemIDList; 
  var ppidlReal: PItemIDList): HResult; stdcall;
{$EXTERNALSYM SHGetRealIDL}

function SHGetInstanceExplorer(out ppunk: IUnknown): HResult; stdcall;
{$EXTERNALSYM SHGetInstanceExplorer}

//
// SHGetDataFromIDListA/W
// 
// SHGetDataFromIDList nFormat values TCHAR
const
  SHGDFIL_FINDDATA          = 1;
  {$EXTERNALSYM SHGDFIL_FINDDATA}
  SHGDFIL_NETRESOURCE       = 2;
  {$EXTERNALSYM SHGDFIL_NETRESOURCE}
  SHGDFIL_DESCRIPTIONID     = 3;
  {$EXTERNALSYM SHGDFIL_DESCRIPTIONID}

  SHDID_ROOT_REGITEM        = 1;
  {$EXTERNALSYM SHDID_ROOT_REGITEM}
  SHDID_FS_FILE             = 2;
  {$EXTERNALSYM SHDID_FS_FILE}
  SHDID_FS_DIRECTORY        = 3;
  {$EXTERNALSYM SHDID_FS_DIRECTORY}
  SHDID_FS_OTHER            = 4;
  {$EXTERNALSYM SHDID_FS_OTHER}
  SHDID_COMPUTER_DRIVE35    = 5;
  {$EXTERNALSYM SHDID_COMPUTER_DRIVE35}
  SHDID_COMPUTER_DRIVE525   = 6;
  {$EXTERNALSYM SHDID_COMPUTER_DRIVE525}
  SHDID_COMPUTER_REMOVABLE  = 7;
  {$EXTERNALSYM SHDID_COMPUTER_REMOVABLE}
  SHDID_COMPUTER_FIXED      = 8;
  {$EXTERNALSYM SHDID_COMPUTER_FIXED}
  SHDID_COMPUTER_NETDRIVE   = 9;
  {$EXTERNALSYM SHDID_COMPUTER_NETDRIVE}
  SHDID_COMPUTER_CDROM      = 10;
  {$EXTERNALSYM SHDID_COMPUTER_CDROM}
  SHDID_COMPUTER_RAMDISK    = 11;
  {$EXTERNALSYM SHDID_COMPUTER_RAMDISK}
  SHDID_COMPUTER_OTHER      = 12;
  {$EXTERNALSYM SHDID_COMPUTER_OTHER}
  SHDID_NET_DOMAIN          = 13;
  {$EXTERNALSYM SHDID_NET_DOMAIN}
  SHDID_NET_SERVER          = 14;
  {$EXTERNALSYM SHDID_NET_SERVER}
  SHDID_NET_SHARE           = 15;
  {$EXTERNALSYM SHDID_NET_SHARE}
  SHDID_NET_RESTOFNET       = 16;
  {$EXTERNALSYM SHDID_NET_RESTOFNET}
  SHDID_NET_OTHER           = 17;
  {$EXTERNALSYM SHDID_NET_OTHER}
  SHDID_COMPUTER_IMAGING    = 18;
  {$EXTERNALSYM SHDID_COMPUTER_IMAGING}
  SHDID_COMPUTER_AUDIO      = 19;
  {$EXTERNALSYM SHDID_COMPUTER_AUDIO}
  SHDID_COMPUTER_SHAREDDOCS = 20;
  {$EXTERNALSYM SHDID_COMPUTER_SHAREDDOCS}
  SHDID_MOBILE_DEVICE       = 21; // PDA/PalmPC
  {$EXTERNALSYM SHDID_MOBILE_DEVICE}

type
  PSHDescriptionID = ^TSHDescriptionID;
  _SHDESCRIPTIONID = record
    dwDescriptionId: DWORD;
    Id: TCLSID;
  end;
  {$EXTERNALSYM _SHDESCRIPTIONID}
  SHDESCRIPTIONID = _SHDESCRIPTIONID;
  {$EXTERNALSYM SHDESCRIPTIONID}
  TSHDescriptionID = _SHDESCRIPTIONID;


// these delegate to IShellFolder2::GetDetailsEx()
function SHGetDataFromIDList(psf: IShellFolder; pidl: PItemIDList;
  nFormat: Integer; ptr: Pointer; cb: Integer): HResult; stdcall;
{$EXTERNALSYM SHGetDataFromIDList}
function SHGetDataFromIDListA(psf: IShellFolder; pidl: PItemIDList;
  nFormat: Integer; ptr: Pointer; cb: Integer): HResult; stdcall;
{$EXTERNALSYM SHGetDataFromIDListA}
function SHGetDataFromIDListW(psf: IShellFolder; pidl: PItemIDList;
  nFormat: Integer; ptr: Pointer; cb: Integer): HResult; stdcall;
{$EXTERNALSYM SHGetDataFromIDListW}

// ===========================================================================

// PathResolve flags
const
  PRF_VERIFYEXISTS = $0001;
  {$EXTERNALSYM PRF_VERIFYEXISTS}
  PRF_TRYPROGRAMEXTENSIONS = $0002 or PRF_VERIFYEXISTS; 
  {$EXTERNALSYM PRF_TRYPROGRAMEXTENSIONS}
  PRF_FIRSTDIRDEF = $0004; 
  {$EXTERNALSYM PRF_FIRSTDIRDEF}
  PRF_DONTFINDLNK = $0008;                  // if PRF_TRYPROGRAMEXTENSIONS is specified
  {$EXTERNALSYM PRF_DONTFINDLNK}
  PRF_REQUIREABSOLUTE = $0010;
  {$EXTERNALSYM PRF_REQUIREABSOLUTE}

function RestartDialog(hwnd: HWND; lpPrompt: LPCWSTR; 
  dwReturn: DWORD): Integer; stdcall;
{$EXTERNALSYM RestartDialog}
function RestartDialogEx(hwnd: HWND; lpPrompt: LPCWSTR; dwReturn: DWORD; 
  dwReasonCode: DWORD): Integer; stdcall;
{$EXTERNALSYM RestartDialogEx}

function SHCoCreateInstance(pszCLSID: LPCWSTR; var pclsid: TCLSID;
  const pUnkOuter: IUnknown; const riid: TIID; 
  var ppv: Pointer): HResult; stdcall;
{$EXTERNALSYM SHCoCreateInstance}

function SHCreateDataObject(pidlFolder: PItemIDList; cidl: UINT; 
  apidl: PItemIdList; const pdtInner: IDataObject; const riid: TIID;
  var ppv: Pointer): HResult; stdcall;
{$EXTERNALSYM SHCreateDataObject}

function CIDLData_CreateFromIDArray(pidlFolder: PItemIDList; cidl: UINT; 
  apidl: PItemIDList; 
  out ppdtobj: IDataObject): HResult; stdcall;
{$EXTERNALSYM CIDLData_CreateFromIDArray}
function SHCreateStdEnumFmtEtc(cfmt: UINT; var afmt: TFormatEtc; 
  out ppenumFormatEtc: IEnumFORMATETC): HResult; stdcall;
{$EXTERNALSYM SHCreateStdEnumFmtEtc}
function SHDoDragDrop(hwnd: HWND; const pdata: IDataObject; 
  const pdsrc: IDropSource; dwEffect: DWORD; 
  var pdwEffect: DWORD): HResult; stdcall;
{$EXTERNALSYM SHDoDragDrop}
// stuff for doing auto scrolling
const
  NUM_POINTS = 3; 
  {$EXTERNALSYM NUM_POINTS}
type
  tagAUTO_SCROLL_DATA = record // asd
    iNextSample: Integer;
    dwLastScroll: DWORD;
    bFull: BOOL;
    pts: packed array[0..NUM_POINTS-1] of TPoint;
    dwTimes: packed array[0..NUM_POINTS-1] of DWORD;
  end;
  {$EXTERNALSYM tagAUTO_SCROLL_DATA}
  AUTO_SCROLL_DATA = tagAUTO_SCROLL_DATA;
  {$EXTERNALSYM AUTO_SCROLL_DATA}
  TAutoScrollData = AUTO_SCROLL_DATA;
  PAutoScrollData = ^TAutoScrollData;

function DAD_SetDragImage(him: HIMAGELIST; 
  var pptOffset: TPoint): BOOL; stdcall;
{$EXTERNALSYM DAD_SetDragImage}
function DAD_DragEnterEx(hwndTarget: HWND;
  const ptStart: TPoint): BOOL; inline; overload;
function DAD_DragEnterEx(hwndTarget: HWND;
  ptStart: PPoint): BOOL; overload; stdcall;
{$EXTERNALSYM DAD_DragEnterEx}
function DAD_DragEnterEx2(hwndTarget: HWND; const ptStart: TPoint;
  const pdtObject: IDataObject): BOOL; inline; overload;
function DAD_DragEnterEx2(hwndTarget: HWND; ptStart: PPoint;
  const pdtObject: IDataObject): BOOL; overload; stdcall;
{$EXTERNALSYM DAD_DragEnterEx2}
function DAD_ShowDragImage(fShow: BOOL): BOOL; stdcall;
{$EXTERNALSYM DAD_ShowDragImage}
function DAD_DragMove(pt: TPoint): BOOL; stdcall;
{$EXTERNALSYM DAD_DragMove}
function DAD_DragLeave: BOOL; stdcall;
{$EXTERNALSYM DAD_DragLeave}
function DAD_AutoScroll(hwnd: HWND; var pad: TAutoScrollData; 
  var pptNow: TPoint): BOOL; stdcall;
{$EXTERNALSYM DAD_AutoScroll}
type
  LPCABINETSTATE = ^CABINETSTATE;
  {$EXTERNALSYM LPCABINETSTATE}
  tagCABINETSTATE = {$IFDEF WIN32}packed {$ENDIF}record
    cLength: Word;
    nVersion: Word;

    fUnusedFlags: Word;
{    fFullPathTitle: BOOL:1;}
{    fSaveLocalView: BOOL:1;}
{    fNotShell: BOOL:1;}
{    fSimpleDefault: BOOL:1;}
{    fDontShowDescBar: BOOL:1;}
{    fNewWindowMode: BOOL:1;}
{    fShowCompColor: BOOL:1;}// NT: Show compressed volumes in a different colour
{    fDontPrettyNames: BOOL:1;}// NT: Do 8.3 name conversion, or not!
{    fAdminsCreateCommonGroups: BOOL:1;}// NT: Administrators create comon groups
{    fUnusedFlags: UINT:7;}
    fMenuEnumFilter: UINT;
  end;
  {$EXTERNALSYM tagCABINETSTATE}
  CABINETSTATE = tagCABINETSTATE;
  {$EXTERNALSYM CABINETSTATE}
  TCabinetState = CABINETSTATE;
  PCabinetState = ^TCabinetState;

const
  CABINETSTATE_VERSION = 2; 
  {$EXTERNALSYM CABINETSTATE_VERSION}

// APIs for reading and writing the cabinet state.
function ReadCabinetState(var pcs : TCabinetState; cLength: Integer): BOOL; stdcall;
{$EXTERNALSYM ReadCabinetState}
function WriteCabinetState(var pcs: TCabinetState): BOOL; stdcall;
{$EXTERNALSYM WriteCabinetState}
function PathMakeUniqueName(pszUniqueName: LPWSTR; cchMax: UINT; 
  pszTemplate: LPCWSTR; pszLongPlate: LPCWSTR; pszDir: LPCWSTR): BOOL; stdcall;
{$EXTERNALSYM PathMakeUniqueName}
procedure PathQualify(psz: LPWSTR); stdcall;
{$EXTERNALSYM PathQualify}
function PathIsExe(pszPath: LPCWSTR): BOOL; stdcall;
{$EXTERNALSYM PathIsExe}
function PathIsSlow(pszFile: LPCWSTR; dwAttr: DWORD): BOOL; stdcall;
{$EXTERNALSYM PathIsSlow}
function PathIsSlowA(pszFile: LPCSTR; dwAttr: DWORD): BOOL; stdcall;
{$EXTERNALSYM PathIsSlowA}
function PathIsSlowW(pszFile: LPCWSTR; dwAttr: DWORD): BOOL; stdcall;
{$EXTERNALSYM PathIsSlowW}
// 
//  Return codes from PathCleanupSpec.  Negative return values are
//  unrecoverable errors
const
  PCS_FATAL = $80000000;
  {$EXTERNALSYM PCS_FATAL}
  PCS_REPLACEDCHAR = $00000001; 
  {$EXTERNALSYM PCS_REPLACEDCHAR}
  PCS_REMOVEDCHAR = $00000002; 
  {$EXTERNALSYM PCS_REMOVEDCHAR}
  PCS_TRUNCATED = $00000004; 
  {$EXTERNALSYM PCS_TRUNCATED}
  PCS_PATHTOOLONG = $00000008;      // Always combined with FATAL
  {$EXTERNALSYM PCS_PATHTOOLONG}

function PathCleanupSpec(pszDir: LPCWSTR; pszSpec: LPWSTR): Integer; stdcall;
{$EXTERNALSYM PathCleanupSpec}

function PathResolve(lpszPath: LPWSTR; dirs: LPCWSTR;
  fFlags: UINT): Integer; stdcall;
{$EXTERNALSYM PathResolve}
function GetFileNameFromBrowse(hwnd: HWND; pszFilePath: LPWSTR; 
  cchFilePath: UINT; pszWorkingDir: LPCWSTR; pszDefExt: LPCWSTR; 
  pszFilters: LPCWSTR; pszTitle: LPCWSTR): BOOL; stdcall;
{$EXTERNALSYM GetFileNameFromBrowse}
function DriveType(iDrive: Integer): Integer; stdcall;
{$EXTERNALSYM DriveType}

function RealDriveType(iDrive: Integer; fOKToHitNet: BOOL): Integer; stdcall;
{$EXTERNALSYM RealDriveType}
function IsNetDrive(iDrive: Integer): Integer; stdcall;
{$EXTERNALSYM IsNetDrive}
// Flags for Shell_MergeMenus
const
  MM_ADDSEPARATOR = $00000001; 
  {$EXTERNALSYM MM_ADDSEPARATOR}
  MM_SUBMENUSHAVEIDS = $00000002; 
  {$EXTERNALSYM MM_SUBMENUSHAVEIDS}
  MM_DONTREMOVESEPS = $00000004;
  {$EXTERNALSYM MM_DONTREMOVESEPS}

function Shell_MergeMenus(hmDst: HMENU; hmSrc: HMENU; uInsert: UINT; 
  uIDAdjust: UINT; uIDAdjustMax: UINT; uFlags: Cardinal): UINT; stdcall;
{$EXTERNALSYM Shell_MergeMenus}

{ 
 * The SHObjectProperties API provides an easy way to invoke the Properties
 *   context menu command on a subset of the shell item namespace.
 *
 *   PARAMETERS
 *
 *     hwnd              The window handle of the window which will own the dialog
 *     shopObjectType    A SHOP_ value as defined below
 *     pszObjectName     Name of the object, see SHOP_ values below
 *     pszPropertyPage   The name of the property sheet page to open to or NULL.
 *
 *   RETURN
 *
 *     TRUE if the Properties command was invoked
 }
function SHObjectProperties(hwnd: HWND; shopObjectType: DWORD; 
  pszObjectName: LPCWSTR; pszPropertyPage: LPCWSTR): BOOL; stdcall;
{$EXTERNALSYM SHObjectProperties}

const
  SHOP_PRINTERNAME = $00000001;  // pszObjectName points to a printer friendly name
  {$EXTERNALSYM SHOP_PRINTERNAME}
  SHOP_FILEPATH = $00000002;     // pszObjectName points to a fully qualified path+file name
  {$EXTERNALSYM SHOP_FILEPATH}
  SHOP_VOLUMEGUID = $00000004;   // pszObjectName points to a Volume GUID
  {$EXTERNALSYM SHOP_VOLUMEGUID}

{ 
 * The SHFormatDrive API provides access to the Shell
 *   format dialog. This allows apps which want to format disks
 *   to bring up the same dialog that the Shell does to do it.
 *
 *   This dialog is not sub-classable. You cannot put custom
 *   controls in it. If you want this ability, you will have
 *   to write your own front end for the DMaint_FormatDrive
 *   engine.
 *
 *   NOTE that the user can format as many diskettes in the specified
 *   drive, or as many times, as he/she wishes to. There is no way to
 *   force any specififc number of disks to format. If you want this
 *   ability, you will have to write your own front end for the
 *   DMaint_FormatDrive engine.
 *
 *   NOTE also that the format will not start till the user pushes the
 *   start button in the dialog. There is no way to do auto start. If
 *   you want this ability, you will have to write your own front end
 *   for the DMaint_FormatDrive engine.
 *
 *   PARAMETERS
 *
 *     hwnd    = The window handle of the window which will own the dialog
 *               NOTE that unlike SHCheckDrive, hwnd == NULL does not cause
 *               this dialog to come up as a "top level application" window.
 *               This parameter should always be non-null, this dialog is
 *               only designed to be the child of another window, not a
 *               stand-alone application.
 *     drive   = The 0 based (A: == 0) drive number of the drive to format
 *     fmtID   = The ID of the physical format to format the disk with
 *               NOTE: The special value SHFMT_ID_DEFAULT means "use the
 *                     default format specified by the DMaint_FormatDrive
 *                     engine". If you want to FORCE a particular format
 *                     ID "up front" you will have to call
 *                     DMaint_GetFormatOptions yourself before calling
 *                     this to obtain the valid list of phys format IDs
 *                     (contents of the PhysFmtIDList array in the
 *                     FMTINFOSTRUCT).
 *     options = There is currently only two option bits defined
 *
 *                SHFMT_OPT_FULL
 *                SHFMT_OPT_SYSONLY
 *
 *               The normal defualt in the Shell format dialog is
 *               "Quick Format", setting this option bit indicates that
 *               the caller wants to start with FULL format selected
 *               (this is useful for folks detecting "unformatted" disks
 *               and wanting to bring up the format dialog).
 *
 *               The SHFMT_OPT_SYSONLY initializes the dialog to
 *               default to just sys the disk.
 *
 *               All other bits are reserved for future expansion and
 *               must be 0.
 *
 *               Please note that this is a bit field and not a value
 *               and treat it accordingly.
 *
 *   RETURN
 *      The return is either one of the SHFMT_* values, or if the
 *      returned DWORD value is not == to one of these values, then
 *      the return is the physical format ID of the last succesful
 *      format. The LOWORD of this value can be passed on subsequent
 *      calls as the fmtID parameter to "format the same type you did
 *      last time".
 *
 }
function SHFormatDrive(hwnd: HWND; drive: UINT; fmtID: UINT; 
  options: UINT): DWORD; stdcall;
{$EXTERNALSYM SHFormatDrive}

// Special value of fmtID which means "use the default format"
const
  SHFMT_ID_DEFAULT = $FFFF; 
  {$EXTERNALSYM SHFMT_ID_DEFAULT}

// Option bits for options parameter
  SHFMT_OPT_FULL = $0001; 
  {$EXTERNALSYM SHFMT_OPT_FULL}
  SHFMT_OPT_SYSONLY = $0002; 
  {$EXTERNALSYM SHFMT_OPT_SYSONLY}

// Special return values. PLEASE NOTE that these are DWORD values.
  SHFMT_ERROR = $FFFFFFFF;          // Error on last format, drive may be formatable
  {$EXTERNALSYM SHFMT_ERROR}
  SHFMT_CANCEL = $FFFFFFFE;         // Last format was canceled
  {$EXTERNALSYM SHFMT_CANCEL}
  SHFMT_NOFORMAT = $FFFFFFFD;       // Drive is not formatable
  {$EXTERNALSYM SHFMT_NOFORMAT}

type
  HPSXA = HGlobal;
  {$EXTERNALSYM HPSXA}

function SHCreatePropSheetExtArray(hKey: HKEY; pszSubKey: LPCWSTR; 
  max_iface: UINT): HPSXA; stdcall;
{$EXTERNALSYM SHCreatePropSheetExtArray}
procedure SHDestroyPropSheetExtArray(hpsxa: HPSXA); stdcall;
{$EXTERNALSYM SHDestroyPropSheetExtArray}
function SHAddFromPropSheetExtArray(hpsxa: HPSXA; 
  lpfnAddPage: TFNAddPropSheetPage; lParam: LPARAM): UINT; stdcall;
{$EXTERNALSYM SHAddFromPropSheetExtArray}
function SHReplaceFromPropSheetExtArray(hpsxa: HPSXA; uPageID: UINT; 
  lpfnReplaceWith: TFnAddPropSheetPage; lParam: LPARAM): UINT; stdcall;
{$EXTERNALSYM SHReplaceFromPropSheetExtArray}

type
  IDefViewFrame = interface(IUnknown)
    [SID_IDefViewFrame]
    function GetWindowLV(var phwnd: HWND): HRESULT; stdcall;

    function ReleaseWindowLV: HRESULT; stdcall;

    function GetShellFolder(out ppsf: IShellFolder): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IDefViewFrame}
// shell restriction values, parameter for SHRestricted()
  RESTRICTIONS = Integer;
  {$EXTERNALSYM RESTRICTIONS}
  TRestrictions = RESTRICTIONS;
const
  REST_NONE                        = $00000000; 
  {$EXTERNALSYM REST_NONE}
  REST_NORUN                       = $00000001; 
  {$EXTERNALSYM REST_NORUN}
  REST_NOCLOSE                     = $00000002;
  {$EXTERNALSYM REST_NOCLOSE}
  REST_NOSAVESET                   = $00000004; 
  {$EXTERNALSYM REST_NOSAVESET}
  REST_NOFILEMENU                  = $00000008; 
  {$EXTERNALSYM REST_NOFILEMENU}
  REST_NOSETFOLDERS                = $00000010; 
  {$EXTERNALSYM REST_NOSETFOLDERS}
  REST_NOSETTASKBAR                = $00000020; 
  {$EXTERNALSYM REST_NOSETTASKBAR}
  REST_NODESKTOP                   = $00000040; 
  {$EXTERNALSYM REST_NODESKTOP}
  REST_NOFIND                      = $00000080; 
  {$EXTERNALSYM REST_NOFIND}
  REST_NODRIVES                    = $00000100; 
  {$EXTERNALSYM REST_NODRIVES}
  REST_NODRIVEAUTORUN              = $00000200; 
  {$EXTERNALSYM REST_NODRIVEAUTORUN}
  REST_NODRIVETYPEAUTORUN          = $00000400; 
  {$EXTERNALSYM REST_NODRIVETYPEAUTORUN}
  REST_NONETHOOD                   = $00000800; 
  {$EXTERNALSYM REST_NONETHOOD}
  REST_STARTBANNER                 = $00001000; 
  {$EXTERNALSYM REST_STARTBANNER}
  REST_RESTRICTRUN                 = $00002000; 
  {$EXTERNALSYM REST_RESTRICTRUN}
  REST_NOPRINTERTABS               = $00004000; 
  {$EXTERNALSYM REST_NOPRINTERTABS}
  REST_NOPRINTERDELETE             = $00008000;
  {$EXTERNALSYM REST_NOPRINTERDELETE}
  REST_NOPRINTERADD                = $00010000; 
  {$EXTERNALSYM REST_NOPRINTERADD}
  REST_NOSTARTMENUSUBFOLDERS       = $00020000; 
  {$EXTERNALSYM REST_NOSTARTMENUSUBFOLDERS}
  REST_MYDOCSONNET                 = $00040000; 
  {$EXTERNALSYM REST_MYDOCSONNET}
  REST_NOEXITTODOS                 = $00080000; 
  {$EXTERNALSYM REST_NOEXITTODOS}
  REST_ENFORCESHELLEXTSECURITY     = $00100000; 
  {$EXTERNALSYM REST_ENFORCESHELLEXTSECURITY}
  REST_LINKRESOLVEIGNORELINKINFO   = $00200000; 
  {$EXTERNALSYM REST_LINKRESOLVEIGNORELINKINFO}
  REST_NOCOMMONGROUPS              = $00400000; 
  {$EXTERNALSYM REST_NOCOMMONGROUPS}
  REST_SEPARATEDESKTOPPROCESS      = $00800000; 
  {$EXTERNALSYM REST_SEPARATEDESKTOPPROCESS}
  REST_NOWEB                       = $01000000; 
  {$EXTERNALSYM REST_NOWEB}
  REST_NOTRAYCONTEXTMENU           = $02000000; 
  {$EXTERNALSYM REST_NOTRAYCONTEXTMENU}
  REST_NOVIEWCONTEXTMENU           = $04000000;
  {$EXTERNALSYM REST_NOVIEWCONTEXTMENU}
  REST_NONETCONNECTDISCONNECT      = $08000000; 
  {$EXTERNALSYM REST_NONETCONNECTDISCONNECT}
  REST_STARTMENULOGOFF             = $10000000; 
  {$EXTERNALSYM REST_STARTMENULOGOFF}
  REST_NOSETTINGSASSIST            = $20000000; 
  {$EXTERNALSYM REST_NOSETTINGSASSIST}
  REST_NOINTERNETICON              = $40000001; 
  {$EXTERNALSYM REST_NOINTERNETICON}
  REST_NORECENTDOCSHISTORY         = $40000002; 
  {$EXTERNALSYM REST_NORECENTDOCSHISTORY}
  REST_NORECENTDOCSMENU            = $40000003; 
  {$EXTERNALSYM REST_NORECENTDOCSMENU}
  REST_NOACTIVEDESKTOP             = $40000004; 
  {$EXTERNALSYM REST_NOACTIVEDESKTOP}
  REST_NOACTIVEDESKTOPCHANGES      = $40000005; 
  {$EXTERNALSYM REST_NOACTIVEDESKTOPCHANGES}
  REST_NOFAVORITESMENU             = $40000006; 
  {$EXTERNALSYM REST_NOFAVORITESMENU}
  REST_CLEARRECENTDOCSONEXIT       = $40000007; 
  {$EXTERNALSYM REST_CLEARRECENTDOCSONEXIT}
  REST_CLASSICSHELL                = $40000008; 
  {$EXTERNALSYM REST_CLASSICSHELL}
  REST_NOCUSTOMIZEWEBVIEW          = $40000009; 
  {$EXTERNALSYM REST_NOCUSTOMIZEWEBVIEW}
  REST_NOHTMLWALLPAPER             = $40000010;
  {$EXTERNALSYM REST_NOHTMLWALLPAPER}
  REST_NOCHANGINGWALLPAPER         = $40000011; 
  {$EXTERNALSYM REST_NOCHANGINGWALLPAPER}
  REST_NODESKCOMP                  = $40000012; 
  {$EXTERNALSYM REST_NODESKCOMP}
  REST_NOADDDESKCOMP               = $40000013; 
  {$EXTERNALSYM REST_NOADDDESKCOMP}
  REST_NODELDESKCOMP               = $40000014; 
  {$EXTERNALSYM REST_NODELDESKCOMP}
  REST_NOCLOSEDESKCOMP             = $40000015; 
  {$EXTERNALSYM REST_NOCLOSEDESKCOMP}
  REST_NOCLOSE_DRAGDROPBAND        = $40000016;     // Disable Close and Drag & Drop on ALL Bands
  {$EXTERNALSYM REST_NOCLOSE_DRAGDROPBAND}
  REST_NOMOVINGBAND                = $40000017;     // Disable Moving ALL Bands
  {$EXTERNALSYM REST_NOMOVINGBAND}
  REST_NOEDITDESKCOMP              = $40000018; 
  {$EXTERNALSYM REST_NOEDITDESKCOMP}
  REST_NORESOLVESEARCH             = $40000019; 
  {$EXTERNALSYM REST_NORESOLVESEARCH}
  REST_NORESOLVETRACK              = $4000001A; 
  {$EXTERNALSYM REST_NORESOLVETRACK}
  REST_FORCECOPYACLWITHFILE        = $4000001B; 
  {$EXTERNALSYM REST_FORCECOPYACLWITHFILE}
  REST_NOLOGO3CHANNELNOTIFY        = $4000001C;
  {$EXTERNALSYM REST_NOLOGO3CHANNELNOTIFY}
  REST_NOFORGETSOFTWAREUPDATE      = $4000001D; 
  {$EXTERNALSYM REST_NOFORGETSOFTWAREUPDATE}
  REST_NOSETACTIVEDESKTOP          = $4000001E;     // No Active desktop on Settings Menu
  {$EXTERNALSYM REST_NOSETACTIVEDESKTOP}
  REST_NOUPDATEWINDOWS             = $4000001F;     // No Windows Update on Settings Menu
  {$EXTERNALSYM REST_NOUPDATEWINDOWS}
  REST_NOCHANGESTARMENU            = $40000020;     // No Context menu or Drag and Drop on Start menu
  {$EXTERNALSYM REST_NOCHANGESTARMENU}
  REST_NOFOLDEROPTIONS             = $40000021;     // No Folder Options on Settings Menu
  {$EXTERNALSYM REST_NOFOLDEROPTIONS}
  REST_HASFINDCOMPUTERS            = $40000022;     // Show Start/Search/Computers
  {$EXTERNALSYM REST_HASFINDCOMPUTERS}
  REST_INTELLIMENUS                = $40000023; 
  {$EXTERNALSYM REST_INTELLIMENUS}
  REST_RUNDLGMEMCHECKBOX           = $40000024; 
  {$EXTERNALSYM REST_RUNDLGMEMCHECKBOX}
  REST_ARP_ShowPostSetup           = $40000025;     // ARP: Show Post-Setup page
  {$EXTERNALSYM REST_ARP_ShowPostSetup}
  REST_NOCSC                       = $40000026;     // Disable the ClientSide caching on SM
  {$EXTERNALSYM REST_NOCSC}
  REST_NOCONTROLPANEL              = $40000027;     // Remove the Control Panel only from SM|Settings
  {$EXTERNALSYM REST_NOCONTROLPANEL}
  REST_ENUMWORKGROUP               = $40000028;     // Enumerate workgroup in root of nethood
  {$EXTERNALSYM REST_ENUMWORKGROUP}
  REST_ARP_NOARP                   = $40000029;     // ARP: Don't Allow ARP to come up at all
  {$EXTERNALSYM REST_ARP_NOARP}
  REST_ARP_NOREMOVEPAGE            = $4000002A;     // ARP: Don't allow Remove page
  {$EXTERNALSYM REST_ARP_NOREMOVEPAGE}
  REST_ARP_NOADDPAGE               = $4000002B;     // ARP: Don't allow Add page
  {$EXTERNALSYM REST_ARP_NOADDPAGE}
  REST_ARP_NOWINSETUPPAGE          = $4000002C;     // ARP: Don't allow opt components page
  {$EXTERNALSYM REST_ARP_NOWINSETUPPAGE}
  REST_GREYMSIADS                  = $4000002D;      // SM: Allow the greying of Darwin Ads in SM
  {$EXTERNALSYM REST_GREYMSIADS}
  REST_NOCHANGEMAPPEDDRIVELABEL    = $4000002E;     // Don't enable the UI which allows users to rename mapped drive labels
  {$EXTERNALSYM REST_NOCHANGEMAPPEDDRIVELABEL}
  REST_NOCHANGEMAPPEDDRIVECOMMENT  = $4000002F;     // Don't enable the UI which allows users to change mapped drive comments
  {$EXTERNALSYM REST_NOCHANGEMAPPEDDRIVECOMMENT}
  REST_MaxRecentDocs               = $40000030; 
  {$EXTERNALSYM REST_MaxRecentDocs}
  REST_NONETWORKCONNECTIONS        = $40000031;     // No Start Menu | Settings |Network Connections
  {$EXTERNALSYM REST_NONETWORKCONNECTIONS}
  REST_FORCESTARTMENULOGOFF        = $40000032;     // Force logoff on the Start Menu
  {$EXTERNALSYM REST_FORCESTARTMENULOGOFF}
  REST_NOWEBVIEW                   = $40000033;     // Disable Web View
  {$EXTERNALSYM REST_NOWEBVIEW}
  REST_NOCUSTOMIZETHISFOLDER       = $40000034;     // Disable Customize This Folder
  {$EXTERNALSYM REST_NOCUSTOMIZETHISFOLDER}
  REST_NOENCRYPTION                = $40000035;     // Don't allow file encryption
  {$EXTERNALSYM REST_NOENCRYPTION}
//  Do NOT use me                     0x40000036,
  REST_DONTSHOWSUPERHIDDEN         = $40000037;     // don't show super hidden files
  {$EXTERNALSYM REST_DONTSHOWSUPERHIDDEN}
  REST_NOSHELLSEARCHBUTTON         = $40000038; 
  {$EXTERNALSYM REST_NOSHELLSEARCHBUTTON}
  REST_NOHARDWARETAB               = $40000039;     // No Hardware tab on Drives or in control panel
  {$EXTERNALSYM REST_NOHARDWARETAB}
  REST_NORUNASINSTALLPROMPT        = $4000003A;     // Don't bring up "Run As" prompt for install programs
  {$EXTERNALSYM REST_NORUNASINSTALLPROMPT}
  REST_PROMPTRUNASINSTALLNETPATH   = $4000003B;     // Force the  "Run As" prompt for install programs on unc/network shares
  {$EXTERNALSYM REST_PROMPTRUNASINSTALLNETPATH}
  REST_NOMANAGEMYCOMPUTERVERB      = $4000003C;     // No Manage verb on My Computer
  {$EXTERNALSYM REST_NOMANAGEMYCOMPUTERVERB}
//  Do NOT use me                     0x4000003D,
  REST_DISALLOWRUN                 = $4000003E;     // don't allow certain apps to be run
  {$EXTERNALSYM REST_DISALLOWRUN}
  REST_NOWELCOMESCREEN             = $4000003F;     // don't allow the welcome screen to be displayed.
  {$EXTERNALSYM REST_NOWELCOMESCREEN}
  REST_RESTRICTCPL                 = $40000040;     // only allow certain cpls to be run
  {$EXTERNALSYM REST_RESTRICTCPL}
  REST_DISALLOWCPL                 = $40000041;     // don't allow certain cpls to be run
  {$EXTERNALSYM REST_DISALLOWCPL}
  REST_NOSMBALLOONTIP              = $40000042;     // No Start Menu Balloon Tip
  {$EXTERNALSYM REST_NOSMBALLOONTIP}
  REST_NOSMHELP                    = $40000043;     // No Help on the Start Menu
  {$EXTERNALSYM REST_NOSMHELP}
  REST_NOWINKEYS                   = $40000044;     // No Windows-X Hot keys
  {$EXTERNALSYM REST_NOWINKEYS}
  REST_NOENCRYPTONMOVE             = $40000045;     // Don't automatically try to encrypt files that are moved to encryped directories
  {$EXTERNALSYM REST_NOENCRYPTONMOVE}
  REST_NOLOCALMACHINERUN           = $40000046;     // ignore HKLM\sw\ms\win\cv\Run and all of it's sub keys
  {$EXTERNALSYM REST_NOLOCALMACHINERUN}
  REST_NOCURRENTUSERRUN            = $40000047;     // ignore HKCU\sw\ms\win\cv\Run and all of it's sub keys
  {$EXTERNALSYM REST_NOCURRENTUSERRUN}
  REST_NOLOCALMACHINERUNONCE       = $40000048;     // ignore HKLM\sw\ms\win\cv\RunOnce and all of it's sub keys
  {$EXTERNALSYM REST_NOLOCALMACHINERUNONCE}
  REST_NOCURRENTUSERRUNONCE        = $40000049;     // ignore HKCU\sw\ms\win\cv\RunOnce and all of it's sub keys
  {$EXTERNALSYM REST_NOCURRENTUSERRUNONCE}
  REST_FORCEACTIVEDESKTOPON        = $4000004A;     // Force ActiveDesktop to be turned ON all the time.
  {$EXTERNALSYM REST_FORCEACTIVEDESKTOPON}
//  Do NOT use me                     0x4000004B,
  REST_NOVIEWONDRIVE               = $4000004C;     // disallows CreateViewObject() on specified drives (CFSFolder only)
  {$EXTERNALSYM REST_NOVIEWONDRIVE}
  REST_NONETCRAWL                  = $4000004D;     // disables the crawling of the WNet namespace.
  {$EXTERNALSYM REST_NONETCRAWL}
  REST_NOSHAREDDOCUMENTS           = $4000004E;     // don't auto share the Shared Documents/create link
  {$EXTERNALSYM REST_NOSHAREDDOCUMENTS}
  REST_NOSMMYDOCS                  = $4000004F;     // Don't show the My Documents item on the Start Menu.
  {$EXTERNALSYM REST_NOSMMYDOCS}
  REST_NOSMMYPICS                  = $40000050;     // Don't show the My Pictures item on the Start Menu
  {$EXTERNALSYM REST_NOSMMYPICS}
  REST_ALLOWBITBUCKDRIVES          = $40000051;     // Bit mask indicating which which drives have bit bucket support
  {$EXTERNALSYM REST_ALLOWBITBUCKDRIVES}
  REST_NONLEGACYSHELLMODE          = $40000052;     // new consumer shell modes
  {$EXTERNALSYM REST_NONLEGACYSHELLMODE}
  REST_NOCONTROLPANELBARRICADE     = $40000053;     // The webview barricade in Control Panel
  {$EXTERNALSYM REST_NOCONTROLPANELBARRICADE}
  REST_NOSTARTPAGE                 = $40000054;     // Whistler Start Page on desktop.
  {$EXTERNALSYM REST_NOSTARTPAGE}
  REST_NOAUTOTRAYNOTIFY            = $40000055;     // Whistler auto-tray notify feature
  {$EXTERNALSYM REST_NOAUTOTRAYNOTIFY}
  REST_NOTASKGROUPING              = $40000056;     // Whistler taskbar button grouping feature
  {$EXTERNALSYM REST_NOTASKGROUPING}
  REST_NOCDBURNING                 = $40000057;     // whistler cd burning feature
  {$EXTERNALSYM REST_NOCDBURNING}
  REST_MYCOMPNOPROP                = $40000058;     // disables Properties on My Computer's context menu
  {$EXTERNALSYM REST_MYCOMPNOPROP}
  REST_MYDOCSNOPROP                = $40000059;     // disables Properties on My Documents' context menu
  {$EXTERNALSYM REST_MYDOCSNOPROP}
  REST_NOSTARTPANEL                = $4000005A;     // Windows start panel (New start menu) for Whistler.
  {$EXTERNALSYM REST_NOSTARTPANEL}
  REST_NODISPLAYAPPEARANCEPAGE     = $4000005B;     // disable Themes and Appearance tabs in the Display Control Panel.
  {$EXTERNALSYM REST_NODISPLAYAPPEARANCEPAGE}
  REST_NOTHEMESTAB                 = $4000005C;     // disable the Themes tab in the Display Control Panel.
  {$EXTERNALSYM REST_NOTHEMESTAB}
  REST_NOVISUALSTYLECHOICE         = $4000005D;     // disable the visual style drop down in the Appearance tab of the Display Control Panel.
  {$EXTERNALSYM REST_NOVISUALSTYLECHOICE}
  REST_NOSIZECHOICE                = $4000005E;     // disable the size drop down in the Appearance tab of the Display Control Panel.
  {$EXTERNALSYM REST_NOSIZECHOICE}
  REST_NOCOLORCHOICE               = $4000005F;     // disable the color drop down in the Appearance tab of the Display Control Panel.
  {$EXTERNALSYM REST_NOCOLORCHOICE}
  REST_SETVISUALSTYLE              = $40000060;     // Load the specified file as the visual style.
  {$EXTERNALSYM REST_SETVISUALSTYLE}
  REST_STARTRUNNOHOMEPATH          = $40000061;     // dont use the %HOMEPATH% env var for the Start-Run dialog
  {$EXTERNALSYM REST_STARTRUNNOHOMEPATH}
  REST_NOUSERNAMEINSTARTPANEL      = $40000062;     // don't show the username is the startpanel.
  {$EXTERNALSYM REST_NOUSERNAMEINSTARTPANEL}
  REST_NOMYCOMPUTERICON            = $40000063;     // don't show my computer anywhere, hide its contents
  {$EXTERNALSYM REST_NOMYCOMPUTERICON}
  REST_NOSMNETWORKPLACES           = $40000064;     // don't show network places in startpanel.
  {$EXTERNALSYM REST_NOSMNETWORKPLACES}
  REST_NOSMPINNEDLIST              = $40000065;     // don't show the pinned list in startpanel.
  {$EXTERNALSYM REST_NOSMPINNEDLIST}
  REST_NOSMMYMUSIC                 = $40000066;     // don't show MyMusic folder in startpanel
  {$EXTERNALSYM REST_NOSMMYMUSIC}
  REST_NOSMEJECTPC                 = $40000067;     // don't show "Undoc PC" command in startmenu
  {$EXTERNALSYM REST_NOSMEJECTPC}
  REST_NOSMMOREPROGRAMS            = $40000068;     // don't show "More Programs" button in StartPanel.
  {$EXTERNALSYM REST_NOSMMOREPROGRAMS}
  REST_NOSMMFUPROGRAMS             = $40000069;     // don't show the MFU programs list in StartPanel.
  {$EXTERNALSYM REST_NOSMMFUPROGRAMS}
  REST_NOTRAYITEMSDISPLAY          = $4000006A;     // disables the display of the system tray
  {$EXTERNALSYM REST_NOTRAYITEMSDISPLAY}
  REST_NOTOOLBARSONTASKBAR         = $4000006B;     // disables toolbar display on the taskbar
  {$EXTERNALSYM REST_NOTOOLBARSONTASKBAR}
  REST_NOSMCONFIGUREPROGRAMS       = $4000006F;     // No Configure Programs on Settings Menu
  {$EXTERNALSYM REST_NOSMCONFIGUREPROGRAMS}
  REST_HIDECLOCK                   = $40000070;     // don't show the clock
  {$EXTERNALSYM REST_HIDECLOCK}
  REST_NOLOWDISKSPACECHECKS        = $40000071;     // disable the low disk space checking
  {$EXTERNALSYM REST_NOLOWDISKSPACECHECKS}
  REST_NOENTIRENETWORK             = $40000072;     // removes the "Entire Network" link (i.e. from "My Network Places")
  {$EXTERNALSYM REST_NOENTIRENETWORK}
  REST_NODESKTOPCLEANUP            = $40000073;     // disable the desktop cleanup wizard
  {$EXTERNALSYM REST_NODESKTOPCLEANUP}
  REST_BITBUCKNUKEONDELETE         = $40000074;     // disables recycling of files
  {$EXTERNALSYM REST_BITBUCKNUKEONDELETE}
  REST_BITBUCKCONFIRMDELETE        = $40000075;     // always show the delete confirmation dialog when deleting files
  {$EXTERNALSYM REST_BITBUCKCONFIRMDELETE}
  REST_BITBUCKNOPROP               = $40000076;     // disables Properties on Recycle Bin's context menu
  {$EXTERNALSYM REST_BITBUCKNOPROP}
  REST_NODISPBACKGROUND            = $40000077;     // disables the Desktop tab in the Display CPL
  {$EXTERNALSYM REST_NODISPBACKGROUND}
  REST_NODISPSCREENSAVEPG          = $40000078;     // disables the Screen Saver tab in the Display CPL
  {$EXTERNALSYM REST_NODISPSCREENSAVEPG}
  REST_NODISPSETTINGSPG            = $40000079;     // disables the Settings tab in the Display CPL
  {$EXTERNALSYM REST_NODISPSETTINGSPG}
  REST_NODISPSCREENSAVEPREVIEW     = $4000007A;     // disables the screen saver on the Screen Saver tab in the Display CPL
  {$EXTERNALSYM REST_NODISPSCREENSAVEPREVIEW}
  REST_NODISPLAYCPL                = $4000007B;     // disables the Display CPL
  {$EXTERNALSYM REST_NODISPLAYCPL}
  REST_HIDERUNASVERB               = $4000007C;     // hides the "Run As..." context menu item
  {$EXTERNALSYM REST_HIDERUNASVERB}
  REST_NOTHUMBNAILCACHE            = $4000007D;     // disables use of the thumbnail cache
  {$EXTERNALSYM REST_NOTHUMBNAILCACHE}
  REST_NOSTRCMPLOGICAL             = $4000007E;     // dont use StrCmpLogical() instead use default CompareString()
  {$EXTERNALSYM REST_NOSTRCMPLOGICAL}
  REST_NOPUBLISHWIZARD             = $4000007F;     // disables publishing wizard (WPW)
  {$EXTERNALSYM REST_NOPUBLISHWIZARD}
  REST_NOONLINEPRINTSWIZARD        = $40000080;     // disables online prints wizard (OPW)
  {$EXTERNALSYM REST_NOONLINEPRINTSWIZARD}
  REST_NOWEBSERVICES               = $40000081;     // disables the web specified services for both OPW and WPW
  {$EXTERNALSYM REST_NOWEBSERVICES}
  REST_ALLOWUNHASHEDWEBVIEW        = $40000082;     // allow the user to be promted to accept web view templates that don't already have an md5 hash in the registry
  {$EXTERNALSYM REST_ALLOWUNHASHEDWEBVIEW}
  REST_ALLOWLEGACYWEBVIEW          = $40000083;     // allow legacy webview template to be shown.
  {$EXTERNALSYM REST_ALLOWLEGACYWEBVIEW}
  REST_REVERTWEBVIEWSECURITY       = $40000084;     // disable added webview security measures (revert to w2k functionality).
  {$EXTERNALSYM REST_REVERTWEBVIEWSECURITY}
  REST_INHERITCONSOLEHANDLES       = $40000086;     // ShellExec() will check for the current process and target process being console processes to inherit handles
  {$EXTERNALSYM REST_INHERITCONSOLEHANDLES}
  REST_SORTMAXITEMCOUNT            = $40000087;     // Do not sort views with more items than this key. Useful for viewing big amount of files in one folder.
  {$EXTERNALSYM REST_SORTMAXITEMCOUNT}
  REST_NOREMOTERECURSIVEEVENTS     = $40000089;     // Dont register network change events recursively to avoid network traffic
  {$EXTERNALSYM REST_NOREMOTERECURSIVEEVENTS}
  REST_NOREMOTECHANGENOTIFY        = $40000091;     // Do not notify for remote changy notifies
  {$EXTERNALSYM REST_NOREMOTECHANGENOTIFY}
  REST_NOSIMPLENETIDLIST           = $40000092;     // No simple network IDLists
  {$EXTERNALSYM REST_NOSIMPLENETIDLIST}
  REST_NOENUMENTIRENETWORK         = $40000093;     // Don't enumerate entire network if we happen to get to it (in conjunction with REST_NOENTIRENETWORK)
  {$EXTERNALSYM REST_NOENUMENTIRENETWORK}
  REST_NODETAILSTHUMBNAILONNETWORK = $40000094;     // Disable Thumbnail for Network files in DUI Details pane
  {$EXTERNALSYM REST_NODETAILSTHUMBNAILONNETWORK}
  REST_NOINTERNETOPENWITH          = $40000095;     // dont allow looking on the internet for file associations
  {$EXTERNALSYM REST_NOINTERNETOPENWITH}
  REST_DONTRETRYBADNETNAME         = $4000009B;     // In Network Places: if provider returns ERROR_BAD_NET_NAME, give up
  {$EXTERNALSYM REST_DONTRETRYBADNETNAME}
  REST_ALLOWFILECLSIDJUNCTIONS     = $4000009C;     // re-enable legacy support for file.{guid} junctions in FileSystem Folder
  {$EXTERNALSYM REST_ALLOWFILECLSIDJUNCTIONS}
  REST_NOUPNPINSTALL               = $4000009D;     // disable "install UPnP" task in My Net Places
  {$EXTERNALSYM REST_NOUPNPINSTALL}
  REST_ARP_DONTGROUPPATCHES        = $400000AC;     // List individual patches in Add/Remove Programs
  {$EXTERNALSYM REST_ARP_DONTGROUPPATCHES}
  REST_ARP_NOCHOOSEPROGRAMSPAGE    = $400000AD;     // Choose programs page
  {$EXTERNALSYM REST_ARP_NOCHOOSEPROGRAMSPAGE}

  REST_NODISCONNECT                = $41000001;     // No Disconnect option in Start menu
  {$EXTERNALSYM REST_NODISCONNECT}
  REST_NOSECURITY                  = $41000002;     // No Security option in start menu
  {$EXTERNALSYM REST_NOSECURITY}
  REST_NOFILEASSOCIATE             = $41000003;     // Do not allow user to change file association
  {$EXTERNALSYM REST_NOFILEASSOCIATE}
  REST_ALLOWCOMMENTTOGGLE          = $41000004;     // Allow the user to toggle the positions of the Comment and the Computer Name
  {$EXTERNALSYM REST_ALLOWCOMMENTTOGGLE}
  REST_USEDESKTOPINICACHE          = $41000005;     // Cache desktop.ini entries from network folders
  {$EXTERNALSYM REST_USEDESKTOPINICACHE}

function OpenRegStream(hkey: HKEY; pszSubkey: LPCWSTR; pszValue: LPCWSTR; 
  grfMode: DWORD): IStream; stdcall;
{$EXTERNALSYM OpenRegStream}
function SHFindFiles(pidlFolder: PItemIDList; 
  pidlSaveFile: PItemIDList): BOOL; stdcall;
{$EXTERNALSYM SHFindFiles}
procedure PathGetShortPath(pszLongPath: LPWSTR); stdcall;
{$EXTERNALSYM PathGetShortPath}
function PathYetAnotherMakeUniqueName(pszUniqueName: LPWSTR; pszPath: LPCWSTR; 
  pszShort: LPCWSTR; pszFileSpec: LPCWSTR): BOOL; stdcall;
{$EXTERNALSYM PathYetAnotherMakeUniqueName}
function Win32DeleteFile(pszPath: LPCWSTR): BOOL; stdcall;
{$EXTERNALSYM Win32DeleteFile}

// 
// Path processing function
// 
const
  PPCF_ADDQUOTES = $00000001;                      // return a quoted name if required
  {$EXTERNALSYM PPCF_ADDQUOTES}
  PPCF_ADDARGUMENTS = $00000003;                   // appends arguments (and wraps in quotes if required)
  {$EXTERNALSYM PPCF_ADDARGUMENTS}
  PPCF_NODIRECTORIES = $00000010;                  // don't match to directories
  {$EXTERNALSYM PPCF_NODIRECTORIES}
  PPCF_FORCEQUALIFY = $00000040;                   // qualify even non-relative names
  {$EXTERNALSYM PPCF_FORCEQUALIFY}
  PPCF_LONGESTPOSSIBLE = $00000080;                // always find the longest possible name
  {$EXTERNALSYM PPCF_LONGESTPOSSIBLE}

function PathProcessCommand(lpSrc: LPCWSTR; lpDest: LPWSTR; iMax: Integer; 
  dwFlags: DWORD): LONG; stdcall;
{$EXTERNALSYM PathProcessCommand}

function SHRestricted(rest: TRestrictions): DWORD; stdcall;
{$EXTERNALSYM SHRestricted}
function SignalFileOpen(pidl: PItemIDList): BOOL; stdcall;
{$EXTERNALSYM SignalFileOpen}
function AssocGetDetailsOfPropKey(const psf: IShellFolder; pidl: PItemIDList; 
  var pkey: TPropertyKey; var pv: Variant; 
  var pfFoundPropKey: BOOL): HResult; stdcall;
{$EXTERNALSYM AssocGetDetailsOfPropKey}
function SHLoadOLE(lParam: LPARAM): HResult; stdcall;
{$EXTERNALSYM SHLoadOLE}

// both ANSI and UNICODE
function SHStartNetConnectionDialogA(hwnd: HWND; pszRemoteName: LPCSTR; 
  dwType: DWORD): HResult; stdcall;
{$EXTERNALSYM SHStartNetConnectionDialogA}
// both ANSI and UNICODE
function SHStartNetConnectionDialogW(hwnd: HWND; pszRemoteName: LPCWSTR; 
  dwType: DWORD): HResult; stdcall;
{$EXTERNALSYM SHStartNetConnectionDialogW}
function SHStartNetConnectionDialog(hwnd: HWND; pszRemoteName: LPCWSTR; 
  dwType: DWORD): HResult; stdcall;
{$EXTERNALSYM SHStartNetConnectionDialog}


function SHDefExtractIconA(pszIconFile: LPCSTR; iIndex: Integer; uFlags: UINT;
  var phiconLarge: HICON; var phiconSmall: HICON; 
  nIconSize: UINT): HResult; stdcall;
{$EXTERNALSYM SHDefExtractIconA}
function SHDefExtractIconW(pszIconFile: LPCWSTR; iIndex: Integer; uFlags: UINT; 
  var phiconLarge: HICON; var phiconSmall: HICON; 
  nIconSize: UINT): HResult; stdcall;
{$EXTERNALSYM SHDefExtractIconW}
function SHDefExtractIcon(pszIconFile: LPCWSTR; iIndex: Integer; uFlags: UINT; 
  var phiconLarge: HICON; var phiconSmall: HICON; 
  nIconSize: UINT): HResult; stdcall;
{$EXTERNALSYM SHDefExtractIcon}

// Elevation

// OpenAsInfo flags
type
  tagOPEN_AS_INFO_FLAGS = Integer;
  {$EXTERNALSYM tagOPEN_AS_INFO_FLAGS}
  OPEN_AS_INFO_FLAGS = tagOPEN_AS_INFO_FLAGS; 
  {$EXTERNALSYM OPEN_AS_INFO_FLAGS}

  TOpenAsInfoFlags = tagOPEN_AS_INFO_FLAGS;
const
  OAIF_ALLOW_REGISTRATION = $00000001;        // enable the "always use this file" checkbox (NOTE if you don't pass this, it will be disabled)
  {$EXTERNALSYM OAIF_ALLOW_REGISTRATION}
  OAIF_REGISTER_EXT       = $00000002;        // do the registration after the user hits "ok"
  {$EXTERNALSYM OAIF_REGISTER_EXT}
  OAIF_EXEC               = $00000004;        // execute file after registering
  {$EXTERNALSYM OAIF_EXEC}
  OAIF_FORCE_REGISTRATION = $00000008;        // force the "always use this file" checkbox to be checked (normally, you won't use the OAIF_ALLOW_REGISTRATION when you pass this)
  {$EXTERNALSYM OAIF_FORCE_REGISTRATION}
  OAIF_HIDE_REGISTRATION  = $00000020;        // hide the "always use this file" checkbox
  {$EXTERNALSYM OAIF_HIDE_REGISTRATION}
  OAIF_URL_PROTOCOL       = $00000040;        // the "extension" passed is actually a protocol, and open with should show apps registered as capable of handling that protocol
  {$EXTERNALSYM OAIF_URL_PROTOCOL}

type
  _openasinfo = record
    pcszFile: LPCWSTR;              // [in] file name, or protocol name if
                                    //      OAIF_URL_PROTOCOL is set.
    pcszClass: LPCWSTR;             // [in] file class description. NULL means
                                    //      use pcszFile's extension. ignored
                                    //      if OAIF_URL_PROTOCOL is set.
    oaifInFlags: TOpenAsInfoFlags;  // [in] input flags from OPEN_AS_INFO_FLAGS enumeration
  end;
  {$EXTERNALSYM _openasinfo}
  OPENASINFO = _openasinfo;
  {$EXTERNALSYM OPENASINFO}
  TOpenAsInfo = OPENASINFO;
  POpenAsInfo = ^TOpenAsInfo;

function SHOpenWithDialog(hwndParent: HWND; 
  var poainfo: TOpenAsInfo): HResult; stdcall;
{$EXTERNALSYM SHOpenWithDialog}

function Shell_GetImageLists(var phiml: HIMAGELIST; 
  var phimlSmall: HIMAGELIST): BOOL; stdcall;
{$EXTERNALSYM Shell_GetImageLists}

function Shell_GetCachedImageIndex(pwszIconPath: LPCWSTR; iIconIndex: Integer;
  uIconFlags: UINT): Integer; stdcall;
{$EXTERNALSYM Shell_GetCachedImageIndex}

function Shell_GetCachedImageIndexA(pszIconPath: LPCSTR; iIconIndex: Integer;
  uIconFlags: UINT): Integer; stdcall;
{$EXTERNALSYM Shell_GetCachedImageIndexA}
function Shell_GetCachedImageIndexW(pszIconPath: LPCWSTR; iIconIndex: Integer;
  uIconFlags: UINT): Integer; stdcall;
{$EXTERNALSYM Shell_GetCachedImageIndexW}


// 
// IDocViewSite
type
  IDocViewSite = interface(IUnknown)
    [SID_IDocViewSite]
    function OnSetTitle(var pvTitle: TVariantArg): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IDocViewSite}
const
  VALIDATEUNC_CONNECT = $0001;              // connect a drive letter
  {$EXTERNALSYM VALIDATEUNC_CONNECT}
  VALIDATEUNC_NOUI = $0002;                 // don't bring up UI
  {$EXTERNALSYM VALIDATEUNC_NOUI}
  VALIDATEUNC_PRINT = $0004;                // validate as print share instead of disk share
  {$EXTERNALSYM VALIDATEUNC_PRINT}
  VALIDATEUNC_PERSIST = $0008;              // the connection should be made persistent
  {$EXTERNALSYM VALIDATEUNC_PERSIST}
  VALIDATEUNC_VALID = $000F;                // valid flags
  {$EXTERNALSYM VALIDATEUNC_VALID}
  VALIDATEUNC_VALID_PREVISTA = $0007;

function SHValidateUNC(hwndOwner: HWND; pszFile: LPWSTR; 
  fConnect: UINT): BOOL; stdcall;
{$EXTERNALSYM SHValidateUNC}

const
  OPENPROPS_NONE = $0000; 
  {$EXTERNALSYM OPENPROPS_NONE}
  OPENPROPS_INHIBITPIF = $8000; 
  {$EXTERNALSYM OPENPROPS_INHIBITPIF}
  GETPROPS_NONE = $0000; 
  {$EXTERNALSYM GETPROPS_NONE}
  SETPROPS_NONE = $0000; 
  {$EXTERNALSYM SETPROPS_NONE}
  CLOSEPROPS_NONE = $0000; 
  {$EXTERNALSYM CLOSEPROPS_NONE}
  CLOSEPROPS_DISCARD = $0001;
  {$EXTERNALSYM CLOSEPROPS_DISCARD}

  PIFNAMESIZE = 30; 
  {$EXTERNALSYM PIFNAMESIZE}
  PIFSTARTLOCSIZE = 63;
  {$EXTERNALSYM PIFSTARTLOCSIZE}
  PIFDEFPATHSIZE = 64; 
  {$EXTERNALSYM PIFDEFPATHSIZE}
  PIFPARAMSSIZE = 64; 
  {$EXTERNALSYM PIFPARAMSSIZE}
  PIFSHPROGSIZE = 64; 
  {$EXTERNALSYM PIFSHPROGSIZE}
  PIFSHDATASIZE = 64; 
  {$EXTERNALSYM PIFSHDATASIZE}
  PIFDEFFILESIZE = 80; 
  {$EXTERNALSYM PIFDEFFILESIZE}
  PIFMAXFILEPATH = 260; 
  {$EXTERNALSYM PIFMAXFILEPATH}

{$ALIGN 1}
type
  PROPPRG = record                          { prg }
    flPrg: Word;                            // see PRG_ flags
    flPrgInit: Word;                        // see PRGINIT_ flags
    achTitle: packed array[0..PIFNAMESIZE-1] of AnsiChar;// name[30]
    achCmdLine: packed array[0..PIFSTARTLOCSIZE+PIFPARAMSSIZE] of AnsiChar;// startfile[63] + params[64]
    achWorkDir: packed array[0..PIFDEFPATHSIZE-1] of AnsiChar;// defpath[64]
    wHotKey: Word;                          // PfHotKeyScan thru PfHotKeyVal
    achIconFile: packed array[0..PIFDEFFILESIZE-1] of AnsiChar;// name of file containing icon
    wIconIndex: Word;                       // index of icon within file
    dwEnhModeFlags: DWORD;                  // reserved enh-mode flags
    dwRealModeFlags: DWORD;                 // real-mode flags (see RMOPT_*)
    achOtherFile: packed array[0..PIFDEFFILESIZE-1] of AnsiChar;// name of "other" file in directory
    achPIFFile: packed array[0..PIFMAXFILEPATH-1] of AnsiChar;// name of PIF file
  end;
  {$EXTERNALSYM PROPPRG}
  LPPROPPRG = ^PROPPRG; 
  {$EXTERNALSYM LPPROPPRG}
  LPCPROPPRG = ^PROPPRG; 
  {$EXTERNALSYM LPCPROPPRG}
{$ALIGN ON}

  TPropPrg = PROPPRG;
  PPropPrg = ^TPropPrg;

function PifMgr_OpenProperties(pszApp: LPCWSTR; pszPIF: LPCWSTR; hInf: UINT; 
  flOpt: UINT): THANDLE; stdcall;
{$EXTERNALSYM PifMgr_OpenProperties}
function PifMgr_GetProperties(hProps: THandle; pszGroup: LPCSTR; 
  var lpProps: Pointer; cbProps: Integer; flOpt: UINT): Integer; stdcall;
{$EXTERNALSYM PifMgr_GetProperties}
function PifMgr_SetProperties(hProps: THandle; pszGroup: LPCSTR; 
  var lpProps: Pointer; cbProps: Integer; flOpt: UINT): Integer; stdcall;
{$EXTERNALSYM PifMgr_SetProperties}
function PifMgr_CloseProperties(hProps: THandle; flOpt: UINT): THANDLE; stdcall;
{$EXTERNALSYM PifMgr_CloseProperties}

procedure SHSetInstanceExplorer(const punk: IUnknown); stdcall;
{$EXTERNALSYM SHSetInstanceExplorer}
function IsUserAnAdmin: BOOL; stdcall;
{$EXTERNALSYM IsUserAnAdmin}

type
  IInitializeObject = interface(IUnknown)
    [SID_IInitializeObject]
    function Initialize: HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInitializeObject}

const
  BMICON_LARGE = 0; 
  {$EXTERNALSYM BMICON_LARGE}
  BMICON_SMALL = 1; 
  {$EXTERNALSYM BMICON_SMALL}

type
  IBanneredBar = interface(IUnknown)
    [SID_IBanneredBar]
    function SetIconSize(iIcon: DWORD): HRESULT; stdcall;

    function GetIconSize(var piIcon: DWORD): HRESULT; stdcall;

    function SetBitmap(hBitmap: HBITMAP): HRESULT; stdcall;

    function GetBitmap(var phBitmap: HBITMAP): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IBanneredBar}


function SHShellFolderView_Message(hwndMain: HWND; uMsg: UINT; 
  lParam: LPARAM): LRESULT; stdcall;
{$EXTERNALSYM SHShellFolderView_Message}

// Callback interface for the IShellView object returned from SHCreateShellFolderView.
type
  IShellFolderViewCB = interface(IUnknown)
    [SID_IShellFolderViewCB]
    function MessageSFVCB(uMsg: UINT; wParam: WPARAM; lParam: LPARAM): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IShellFolderViewCB}
const
  QCMINFO_PLACE_BEFORE = 0;
  {$EXTERNALSYM QCMINFO_PLACE_BEFORE}
  QCMINFO_PLACE_AFTER = 1; 
  {$EXTERNALSYM QCMINFO_PLACE_AFTER}
type
  _QCMINFO_IDMAP_PLACEMENT = record 
    id: UINT;
    fFlags: UINT;
  end;
  {$EXTERNALSYM _QCMINFO_IDMAP_PLACEMENT}
  QCMINFO_IDMAP_PLACEMENT = _QCMINFO_IDMAP_PLACEMENT;
  {$EXTERNALSYM QCMINFO_IDMAP_PLACEMENT}

  TQCMInfoIDMapPlacement = QCMINFO_IDMAP_PLACEMENT;
  PQCMInfoIDMapPlacement = ^TQCMInfoIDMapPlacement;

  _QCMINFO_IDMAP = record 
    nMaxIds: UINT;
    pIdList: packed array[0..0] of TQCMInfoIDMapPlacement;
  end;
  {$EXTERNALSYM _QCMINFO_IDMAP}
  QCMINFO_IDMAP = _QCMINFO_IDMAP;
  {$EXTERNALSYM QCMINFO_IDMAP}
  TQCMInfoIDMap = QCMINFO_IDMAP;
  PQCMInfoIDMap = ^TQCMInfoIDMap;

  LPQCMINFO = ^QCMINFO;
  {$EXTERNALSYM LPQCMINFO}
  _QCMINFO = record 
    hmenu: HMENU;               // in
    indexMenu: UINT;            // in
    idCmdFirst: UINT;           // in/out
    idCmdLast: UINT;            // in
    pIdMap: PQCMInfoIDMap;      // in / unused
  end;
  {$EXTERNALSYM _QCMINFO}
  QCMINFO = _QCMINFO;
  {$EXTERNALSYM QCMINFO}
  TQCMInfo = QCMINFO;
  PQCMInfo = ^TQCMInfo;

// TBINFO flags
const
  TBIF_APPEND = 0; 
  {$EXTERNALSYM TBIF_APPEND}
  TBIF_PREPEND = 1; 
  {$EXTERNALSYM TBIF_PREPEND}
  TBIF_REPLACE = 2; 
  {$EXTERNALSYM TBIF_REPLACE}
  TBIF_DEFAULT = $00000000;
  {$EXTERNALSYM TBIF_DEFAULT}
  TBIF_INTERNETBAR = $00010000; 
  {$EXTERNALSYM TBIF_INTERNETBAR}
  TBIF_STANDARDTOOLBAR = $00020000; 
  {$EXTERNALSYM TBIF_STANDARDTOOLBAR}
  TBIF_NOTOOLBAR = $00030000; 
  {$EXTERNALSYM TBIF_NOTOOLBAR}

type
  LPTBINFO = ^TBINFO;
  {$EXTERNALSYM LPTBINFO}
  _TBINFO = record 
    cbuttons: UINT;             // out
    uFlags: UINT;               // out (one of TBIF_ flags)
  end;
  {$EXTERNALSYM _TBINFO}
  TBINFO = _TBINFO;
  {$EXTERNALSYM TBINFO}
  TTBInfo = TBINFO;
  PTBInfo = ^TTBInfo;

  _DETAILSINFO = record 
    pidl: PItemIDList;
    fmt: Integer;
    cxChar: Integer;
    str: TStrRet;
    iImage: Integer;
  end;
  {$EXTERNALSYM _DETAILSINFO}
  DETAILSINFO = _DETAILSINFO;
  {$EXTERNALSYM DETAILSINFO}
  TDetailsInfo = DETAILSINFO;
  PDetailsInfo = ^TDetailsInfo;

  _SFVM_PROPPAGE_DATA = record 
    dwReserved: DWORD;
    pfn: PFNPropSheetCallback;
    lParam: LPARAM;
  end;
  {$EXTERNALSYM _SFVM_PROPPAGE_DATA}
  SFVM_PROPPAGE_DATA = _SFVM_PROPPAGE_DATA;
  {$EXTERNALSYM SFVM_PROPPAGE_DATA}
  TSFMVPropPageData = SFVM_PROPPAGE_DATA;
  PSFMVPropPageData = ^TSFMVPropPageData;

  _SFVM_HELPTOPIC_DATA = record 
    wszHelpFile: packed array[0..MAX_PATH-1] of WCHAR;
    wszHelpTopic: packed array[0..MAX_PATH-1] of WCHAR;
  end;
  {$EXTERNALSYM _SFVM_HELPTOPIC_DATA}
  SFVM_HELPTOPIC_DATA = _SFVM_HELPTOPIC_DATA;
  {$EXTERNALSYM SFVM_HELPTOPIC_DATA}
  TSFVMHelpTopicData = SFVM_HELPTOPIC_DATA;
  PSFVMHelpTopicData = ^TSFVMHelpTopicData;

//                                 uMsg    wParam             lParam
const
  SFVM_MERGEMENU = 1;               // -                  LPQCMINFO
  {$EXTERNALSYM SFVM_MERGEMENU}
  SFVM_INVOKECOMMAND = 2;           // idCmd              -
  {$EXTERNALSYM SFVM_INVOKECOMMAND}
  SFVM_GETHELPTEXT = 3;             // idCmd,cchMax       pszText
  {$EXTERNALSYM SFVM_GETHELPTEXT}
  SFVM_GETTOOLTIPTEXT = 4;          // idCmd,cchMax       pszText
  {$EXTERNALSYM SFVM_GETTOOLTIPTEXT}
  SFVM_GETBUTTONINFO = 5;           // -                  LPTBINFO
  {$EXTERNALSYM SFVM_GETBUTTONINFO}
  SFVM_GETBUTTONS = 6;              // idCmdFirst,cbtnMax LPTBBUTTON
  {$EXTERNALSYM SFVM_GETBUTTONS}
  SFVM_INITMENUPOPUP = 7;           // idCmdFirst,nIndex  hmenu
  {$EXTERNALSYM SFVM_INITMENUPOPUP}
  SFVM_FSNOTIFY = 14;               // LPCITEMIDLIST*     lEvent
  {$EXTERNALSYM SFVM_FSNOTIFY}
  SFVM_WINDOWCREATED = 15;          // hwnd               -
  {$EXTERNALSYM SFVM_WINDOWCREATED}
  SFVM_GETDETAILSOF = 23;           // iColumn            DETAILSINFO*
  {$EXTERNALSYM SFVM_GETDETAILSOF}
  SFVM_COLUMNCLICK = 24;            // iColumn            -
  {$EXTERNALSYM SFVM_COLUMNCLICK}
  SFVM_QUERYFSNOTIFY = 25;          // -                  SHChangeNotifyEntry *
  {$EXTERNALSYM SFVM_QUERYFSNOTIFY}
  SFVM_DEFITEMCOUNT = 26;           // -                  UINT*
  {$EXTERNALSYM SFVM_DEFITEMCOUNT}
  SFVM_DEFVIEWMODE = 27;            // -                  FOLDERVIEWMODE*
  {$EXTERNALSYM SFVM_DEFVIEWMODE}
  SFVM_UNMERGEMENU = 28;            // -                  hmenu
  {$EXTERNALSYM SFVM_UNMERGEMENU}
  SFVM_UPDATESTATUSBAR = 31;        // fInitialize        -
  {$EXTERNALSYM SFVM_UPDATESTATUSBAR}
  SFVM_BACKGROUNDENUM = 32;         // -                  -
  {$EXTERNALSYM SFVM_BACKGROUNDENUM}
  SFVM_DIDDRAGDROP = 36;            // dwEffect           IDataObject *
  {$EXTERNALSYM SFVM_DIDDRAGDROP}
  SFVM_SETISFV = 39;                // -                  IShellFolderView*
  {$EXTERNALSYM SFVM_SETISFV}
  SFVM_THISIDLIST = 41;             // -                  LPITMIDLIST*
  {$EXTERNALSYM SFVM_THISIDLIST}
  SFVM_ADDPROPERTYPAGES = 47;       // -                  SFVM_PROPPAGE_DATA *
  {$EXTERNALSYM SFVM_ADDPROPERTYPAGES}
  SFVM_BACKGROUNDENUMDONE = 48;     // -                  -
  {$EXTERNALSYM SFVM_BACKGROUNDENUMDONE}
  SFVM_GETNOTIFY = 49;              // LPITEMIDLIST*      LONG*
  {$EXTERNALSYM SFVM_GETNOTIFY}
  SFVM_GETSORTDEFAULTS = 53;        // iDirection         iParamSort
  {$EXTERNALSYM SFVM_GETSORTDEFAULTS}
  SFVM_SIZE = 57;                   // -                  -
  {$EXTERNALSYM SFVM_SIZE}
  SFVM_GETZONE = 58;                // -                  DWORD*
  {$EXTERNALSYM SFVM_GETZONE}
  SFVM_GETPANE = 59;                // Pane ID            DWORD*
  {$EXTERNALSYM SFVM_GETPANE}
  SFVM_GETHELPTOPIC = 63;           // -                  SFVM_HELPTOPIC_DATA *
  {$EXTERNALSYM SFVM_GETHELPTOPIC}
  SFVM_GETANIMATION = 68;           // HINSTANCE *        WCHAR *
  {$EXTERNALSYM SFVM_GETANIMATION}

// IShellFolderView
// 
// Deprecated: use IFolderView and IFolderView2 instead.
// 
// IShellFolderView is supported by the IShellView object returned from SHCreateShellFolderView.
// 
// Warnings:
//  - Some methods on this interface do not follow standard COM rules.
//  - Some methods can be used to configure the IShellView or cause it to behave incorrectly.
//  - Few of these methods have parameter or range validation, so callers can cause the IShellView to fault.

type
  _ITEMSPACING = record 
    cxSmall: Integer;
    cySmall: Integer;
    cxLarge: Integer;
    cyLarge: Integer;
  end;
  {$EXTERNALSYM _ITEMSPACING}
  ITEMSPACING = _ITEMSPACING;
  {$EXTERNALSYM ITEMSPACING}
  TItemSpacing = ITEMSPACING;
  PItemSpacing = ^TItemSpacing;

// defines for IShellFolderView::SetObjectCount
const
  SFVSOC_INVALIDATE_ALL = $00000001;    // Assumed to reset only what is neccessary...
  {$EXTERNALSYM SFVSOC_INVALIDATE_ALL}
  SFVSOC_NOSCROLL = LVSICF_NOSCROLL;
  {$EXTERNALSYM SFVSOC_NOSCROLL}

// defines for IShellFolderView::SelectItems()
  SFVS_SELECT_NONE = $0;        // unselect all
  {$EXTERNALSYM SFVS_SELECT_NONE}
  SFVS_SELECT_ALLITEMS = $1;    // select all
  {$EXTERNALSYM SFVS_SELECT_ALLITEMS}
  SFVS_SELECT_INVERT = $2;      // Invert the selection (no longer supported in Win7 and later)
  {$EXTERNALSYM SFVS_SELECT_INVERT}

type
  IShellFolderView = interface(IUnknown)
    [SID_IShellFolderView]
    function Rearrange(lParamSort: LPARAM): HRESULT; stdcall; // use IFolderView2::SetSortColumns 
    function GetArrangeParam(var plParamSort: LPARAM): HRESULT; stdcall; // use IFolderView2::GetSortColumns 
    function ArrangeGrid: HRESULT; stdcall; // select Arrange by Grid 
    function AutoArrange: HRESULT; stdcall; // select Auto Arrange 
    function GetAutoArrange: HRESULT; stdcall; // use IFolderView::GetAutoArrange 
    function AddObject(pidl: PItemIDList; var puItem: UINT): HRESULT; stdcall; // items added here may disappear (the data source is the final arbiter of which items are available to the view) 
    function GetObject(var ppidl: PItemIDList; uItem: UINT): HRESULT; stdcall; // use IFolderView::Item 
    function RemoveObject(pidl: PItemIDList; var puItem: UINT): HRESULT; stdcall; // items removed here may reappear (the data source is the final arbiter of which items are available to the view) 
    function GetObjectCount(var puCount: UINT): HRESULT; stdcall; // use IFolderView::ItemCount 
    function SetObjectCount(uCount, dwFlags: UINT): HRESULT; stdcall; // not implemented on Vista.  Sends LVM_SETITEMCOUNT with WPARAM=uCount and LPARAM=dwFlags to listview on XP. 
    function UpdateObject(pidlOld, pidlNew: PItemIDList; var puItem: UINT): HRESULT; stdcall; // swaps ITEMID_CHILDs, returning new index.  Changes may be discarded (the data source is the final arbiter of which items are available to the view) 
    function RefreshObject(pidl: PItemIDList; var puItem: UINT): HRESULT; stdcall; // tickles the listview to re-draw the item 
    function SetRedraw(bRedraw: BOOL): HRESULT; stdcall; // sends WM_SETREDRAW to the listview 
    function GetSelectedCount(var puSelected: UINT): HRESULT; stdcall; // use IFolderView2::GetSelection 
    function GetSelectedObjects(var pppidl: PItemIDList; var puItems: UINT): HRESULT; stdcall; // use IFolderView2::GetSelection.
    function IsDropOnSource(pDropTarget: IDropTarget): HRESULT; stdcall; // use IFolderView2::IsMoveInSameFolder 
    function GetDragPoint(var ppt: TPoint): HRESULT; stdcall; // returns point corresponding to drag-and-drop operation 
    function GetDropPoint(var ppt: TPoint): HRESULT; stdcall; // returns point corresponding to drag-and-drop operation 
    function MoveIcons(pDataObject: IDataObject): HRESULT; stdcall; // not implemented 
    function SetItemPos(pidl: PItemIDList; var ppt: TPoint): HRESULT; stdcall; // use IFolderView::SelectAndPositionItems 
    function IsBkDropTarget(pDropTarget: IDataObject): HRESULT; stdcall; // returns S_OK if drag-and-drop is on the background, S_FALSE otherwise 
    function SetClipboard(bMove: BOOL): HRESULT; stdcall; // if bMove is TRUE, this attempts to cut (edit.cut, ctrl-x) the current selection.  bMove of FALSE is not supported. 
    function SetPoints(pDataObject: IDataObject): HRESULT; stdcall; // copies points of current selection in to data object.  Call is not needed if drag operation was originated by the IShellView. 
    function GetItemSpacing(var pSpacing: TItemSpacing): HRESULT; stdcall; // use IFolderView::GetSpacing instead.  GetItemSpacing returns the spacing for small and large view modes only, returning S_OK if the current view mode is is positionable, S_FALSE otherwise. 
    function SetCallback(pNewCB: IShellFolderViewCB; out ppOldCB: IShellFolderViewCB): HRESULT; stdcall; // replace the IShellFolderViewCB that the IShellView uses
    function Select(dwFlags: UINT): HRESULT; stdcall; // SFVS_ select flags: select all, select none, invert selection (no longer supported in Win7 and later) 
    function QuerySupport(var pdwSupport: UINT): HRESULT; stdcall; // does nothing, returns S_OK. 
    function SetAutomationObject(pdisp: IDispatch): HRESULT; stdcall; // replaces the IShellView's internal automation object. 
  end;
  {$EXTERNALSYM IShellFolderView}

// SHCreateShellFolderView struct
type
  _SFV_CREATE = record
    cbSize: UINT;              // must be sizeof(SFV_CREATE)
    pshf: IShellFolder;        // IShellFolder the IShellView will use
    psvOuter: IShellView;      // optional: IShellView to pass to psfvcb
    psfvcb: IShellFolderViewCB;// No callback if NULL
  end;
  {$EXTERNALSYM _SFV_CREATE}
  SFV_CREATE = _SFV_CREATE;
  {$EXTERNALSYM SFV_CREATE}
  TSFVCreate = SFV_CREATE;
  PSFVCreate = ^TSFVCreate;

function SHCreateShellFolderView(var pcsfv: TSfvCreate; 
  out ppsv: IShellView): HResult; stdcall;
{$EXTERNALSYM SHCreateShellFolderView}
type
  LPFNDFMCALLBACK = function(const psf: IShellFolder; hwnd: HWND; 
    const pdtobj: IDataObject; uMsg: UINT; wParam: WPARAM; 
    lParam: LPARAM): HRESULT; cdecl;
{$EXTERNALSYM LPFNDFMCALLBACK}
  TFNDFMCallback = LPFNDFMCALLBACK;
function CDefFolderMenu_Create2(pidlFolder: PItemIDList; hwnd: HWND; cidl: UINT; 
  apidl: PItemIDList; const psf: IShellFolder; pfn: TFNDFMCallback; 
  nKeys: UINT; var ahkeys: HKEY; out pcm: IContextMenu): HResult; stdcall;
{$EXTERNALSYM CDefFolderMenu_Create2}

type
  tagDEFCONTEXTMENU = record 
    hwnd: HWND;
    pcmcb: IContextMenuCB;          // optional: callback object
    pidlFolder: PItemIDList;        // optional: IDList to folder of the items, computed from psf if NULL
    psf: IShellFolder;              // folder of the items
    cidl: UINT;                     // # of items in apidl
    apidl: PItemIDList;             // items operating on, used to get IDataObject and IAssociationArray
    punkAssociationInfo: IUnknown;  // optional: IQueryAssociations, specifies where to load extensions from, computed from apidl if NULL
    cKeys: UINT;                    // # of items in aKeys, may be zero
    aKeys: PHKEY;                   // optional: specifies where to load extensions from
  end;
  {$EXTERNALSYM tagDEFCONTEXTMENU}
  DEFCONTEXTMENU = tagDEFCONTEXTMENU;
  {$EXTERNALSYM DEFCONTEXTMENU}
  TDefContextMenu = DEFCONTEXTMENU;
  PDefContextMenu = ^TDefContextMenu;

// creates object that implements IContextMenu/IContextMenu2/IContextMenu3, typically
// used in the implemetnation of ::GetUIObjectOf()

function SHCreateDefaultContextMenu(var pdcm: TDefContextMenu; const riid: TIID; 
  var ppv: Pointer): HResult; stdcall;
{$EXTERNALSYM SHCreateDefaultContextMenu}

function SHOpenPropSheet(pszCaption: LPCSTR; ahkeys: PHKEY; cikeys: UINT; 
  var pclsidDefault: TCLSID; const pdtobj: IDataObject; const psb: IShellBrowser;
  pStartPage: LPCWSTR): BOOL; stdcall;
{$EXTERNALSYM SHOpenPropSheet}
function SHOpenPropSheetA(pszCaption: LPCSTR; ahkeys: PHKEY; cikeys: UINT; 
  var pclsidDefault: TCLSID; const pdtobj: IDataObject; const psb: IShellBrowser;
  pStartPage: LPCSTR): BOOL; stdcall;
{$EXTERNALSYM SHOpenPropSheetA}
function SHOpenPropSheetW(pszCaption: LPCSTR; ahkeys: PHKEY; cikeys: UINT; 
  var pclsidDefault: TCLSID; const pdtobj: IDataObject; const psb: IShellBrowser;
  pStartPage: LPCWSTR): BOOL; stdcall;
{$EXTERNALSYM SHOpenPropSheetW}

// structure for lParam of DFM_INFOKECOMMANDEX
type
  tagDFMICS = record 
    cbSize: DWORD;
    fMask: DWORD;   // CMIC_MASK_ values for the invoke
    lParam: LPARAM; // same as lParam of DFM_INFOKECOMMAND
    idCmdFirst: UINT;
    idDefMax: UINT;
    pici: PCMInvokeCommandInfo;// the whole thing so you can re-invoke on a child
    punkSite: IUnknown;         // site pointer for context menu handler
  end;
  {$EXTERNALSYM tagDFMICS}
  DFMICS = tagDFMICS;
  {$EXTERNALSYM DFMICS}
  TDFMICS = DFMICS;
  PDFMICS = ^TDFMICS;
  {$EXTERNALSYM PDFMICS}

// Note on context menus ranges:
//  Standard Items // DFM_MERGECONTEXTMENU, context menu extensions, DFM_MERGECONTEXTMENU_TOP
//  Separator
//  View Items   // context menu extensions can get here
//  Separator
//  (defcm S_FALSE "default" items, if applicable)
//  Separator
//  Folder Items // context menu extensions can get here
//  Separator
//  Bottom Items // DFM_MERGECONTEXTMENU_BOTTOM

//                                  uMsg       wParam       lParam
const
  DFM_MERGECONTEXTMENU = 1;             // uFlags       LPQCMINFO
  {$EXTERNALSYM DFM_MERGECONTEXTMENU}
  DFM_INVOKECOMMAND = 2;                // idCmd        pszArgs
  {$EXTERNALSYM DFM_INVOKECOMMAND}
  DFM_GETHELPTEXT = 5;                  // idCmd,cchMax pszText -Ansi
  {$EXTERNALSYM DFM_GETHELPTEXT}
  DFM_WM_MEASUREITEM = 6;               // ---from the message---
  {$EXTERNALSYM DFM_WM_MEASUREITEM}
  DFM_WM_DRAWITEM = 7;                  // ---from the message---
  {$EXTERNALSYM DFM_WM_DRAWITEM}
  DFM_WM_INITMENUPOPUP = 8;             // ---from the message---
  {$EXTERNALSYM DFM_WM_INITMENUPOPUP}
  DFM_VALIDATECMD = 9;                  // idCmd        0
  {$EXTERNALSYM DFM_VALIDATECMD}
  DFM_MERGECONTEXTMENU_TOP = 10;        // uFlags       LPQCMINFO
  {$EXTERNALSYM DFM_MERGECONTEXTMENU_TOP}
  DFM_GETHELPTEXTW = 11;                // idCmd,cchMax pszText -Unicode
  {$EXTERNALSYM DFM_GETHELPTEXTW}
  DFM_INVOKECOMMANDEX = 12;             // idCmd        PDFMICS
  {$EXTERNALSYM DFM_INVOKECOMMANDEX}
  DFM_MAPCOMMANDNAME = 13;              // idCmd *      pszCommandName
  {$EXTERNALSYM DFM_MAPCOMMANDNAME}
  DFM_GETDEFSTATICID = 14;              // idCmd *      0
  {$EXTERNALSYM DFM_GETDEFSTATICID}
  DFM_GETVERBW = 15;                    // idCmd,cchMax pszText -Unicode
  {$EXTERNALSYM DFM_GETVERBW}
  DFM_GETVERBA = 16;                    // idCmd,cchMax pszText -Ansi
  {$EXTERNALSYM DFM_GETVERBA}
  DFM_MERGECONTEXTMENU_BOTTOM = 17;     // uFlags       LPQCMINFO
  {$EXTERNALSYM DFM_MERGECONTEXTMENU_BOTTOM}
  DFM_MODIFYQCMFLAGS = 18;              // uFlags       UINT *puNewFlags;   modify the CFM_XXX values passed to IContextMenu::QueryContextMenu
  {$EXTERNALSYM DFM_MODIFYQCMFLAGS}

// Commands from DFM_INVOKECOMMAND when strings are passed in
  DFM_CMD_DELETE = -1; 
  {$EXTERNALSYM DFM_CMD_DELETE}
  DFM_CMD_MOVE = -2; 
  {$EXTERNALSYM DFM_CMD_MOVE}
  DFM_CMD_COPY = -3; 
  {$EXTERNALSYM DFM_CMD_COPY}
  DFM_CMD_LINK = -4; 
  {$EXTERNALSYM DFM_CMD_LINK}
  DFM_CMD_PROPERTIES = -5; 
  {$EXTERNALSYM DFM_CMD_PROPERTIES}
  DFM_CMD_NEWFOLDER = -6; 
  {$EXTERNALSYM DFM_CMD_NEWFOLDER}
  DFM_CMD_PASTE = -7; 
  {$EXTERNALSYM DFM_CMD_PASTE}
  DFM_CMD_VIEWLIST = -8; 
  {$EXTERNALSYM DFM_CMD_VIEWLIST}
  DFM_CMD_VIEWDETAILS = -9; 
  {$EXTERNALSYM DFM_CMD_VIEWDETAILS}
  DFM_CMD_PASTELINK = -10; 
  {$EXTERNALSYM DFM_CMD_PASTELINK}
  DFM_CMD_PASTESPECIAL = -11; 
  {$EXTERNALSYM DFM_CMD_PASTESPECIAL}
  DFM_CMD_MODALPROP = -12; 
  {$EXTERNALSYM DFM_CMD_MODALPROP}
  DFM_CMD_RENAME = -13; 
  {$EXTERNALSYM DFM_CMD_RENAME}


type
  LPFNVIEWCALLBACK = function(const psvOuter: IShellView; const psf: IShellFolder; 
    hwndMain: HWND; uMsg: UINT; wParam: WPARAM; 
    lParam: LPARAM): HRESULT; cdecl;
{$EXTERNALSYM LPFNVIEWCALLBACK}
  TFNViewCallBack = LPFNVIEWCALLBACK;

// SHCreateShellFolderViewEx struct
  LPCSFV = ^CSFV;
  {$EXTERNALSYM LPCSFV}
  _CSFV = record
    cbSize: UINT;
    pshf: IShellFolder;
    psvOuter: IShellView;
    pidl: PItemIDList;
    lEvents: Integer;
    pfnCallback: TFNViewCallback;       // No callback if NULL
    fvm: Integer;
  end;
  {$EXTERNALSYM _CSFV}
  CSFV = _CSFV;
  {$EXTERNALSYM CSFV}
  TCSFV = CSFV;
  PCSFV = ^TCSFV;

type
  LPSFV_SETITEMPOS = ^SFV_SETITEMPOS;
  {$EXTERNALSYM LPSFV_SETITEMPOS}
  _SFV_SETITEMPOS = record 
    pidl: PItemIDList;
    pt: TPoint;
  end;
  {$EXTERNALSYM _SFV_SETITEMPOS}
  SFV_SETITEMPOS = _SFV_SETITEMPOS;
  {$EXTERNALSYM SFV_SETITEMPOS}
  PCSFV_SETITEMPOS = ^SFV_SETITEMPOS; 
  {$EXTERNALSYM PCSFV_SETITEMPOS}

  TSFVSetItemPos = SFV_SETITEMPOS;
  PSFVSetItemPos = ^TSFVSetItemPos;
const
// Tell the FolderView to rearrange.  The lParam will be passed to
// IShellFolder::CompareIDs
  SFVM_REARRANGE = $00000001; 
  {$EXTERNALSYM SFVM_REARRANGE}
// Add an OBJECT into the view
  SFVM_ADDOBJECT = $00000003; 
  {$EXTERNALSYM SFVM_ADDOBJECT}
// Remove an OBJECT into the view
  SFVM_REMOVEOBJECT = $00000006; 
  {$EXTERNALSYM SFVM_REMOVEOBJECT}
// updates an object by passing in pointer to two PIDLS, the first
// is the old pidl, the second one is the one with update information.
// 
// _ppidl[1] must be a *copy* of a pidl, as control over the lifetime
// of the pidl belongs to the view after successful completion of
// this call.  (Unsuccessful completion (a -1 return) implies failure
// and the caller must free the memory.)  Win95 waits a while before
// freeing the pidl, IE4 frees the pidl immediately.
// IShellFolderView::UpdateObject does not suffer from this problem.
// 
  SFVM_UPDATEOBJECT = $00000007; 
  {$EXTERNALSYM SFVM_UPDATEOBJECT}
// Returns an array of the selected IDS to the caller.
//     lparam is a pointer to receive the idlists into
//     return value is the count of items in the array.
  SFVM_GETSELECTEDOBJECTS = $00000009; 
  {$EXTERNALSYM SFVM_GETSELECTEDOBJECTS}
// Sets the position of an item in the viewer
//     lparam is a pointer to a SVF_SETITEMPOS
//     return value is unused
  SFVM_SETITEMPOS = $0000000e; 
  {$EXTERNALSYM SFVM_SETITEMPOS}
//  Notifies a ShellView when one of its objects get put on the clipboard
//  as a result of a menu command.
// 
// 
//     lparam is the dwEffect (DROPEFFECT_MOVE, DROPEFFECT_COPY)
//     return value is void.
  SFVM_SETCLIPBOARD = $00000010; 
  {$EXTERNALSYM SFVM_SETCLIPBOARD}
  SFVM_SETPOINTS = $00000017; 
  {$EXTERNALSYM SFVM_SETPOINTS}

// Tell the FolderView to rearrange.  The lParam will be passed to IShellFolder::CompareIDs
function ShellFolderView_ReArrange(_hwnd: HWND; _lparam: LPARAM): BOOL; inline;
{$EXTERNALSYM ShellFolderView_ReArrange}
// Add an OBJECT into the view
function ShellFolderView_AddObject(_hwnd: HWND; _pidl: LPARAM): LPARAM; inline;
{$EXTERNALSYM ShellFolderView_AddObject}
// Remove an OBJECT into the view
function ShellFolderView_RemoveObject(_hwnd: HWND; _pidl: LPARAM): LPARAM; inline;
{$EXTERNALSYM ShellFolderView_RemoveObject}
// updates an object by passing in pointer to two PIDLS, the first
// is the old pidl, the second one is the one with update information.
//
// _ppidl[1] must be a *copy* of a pidl, as control over the lifetime
// of the pidl belongs to the view after successful completion of
// this call.  (Unsuccessful completion (a -1 return) implies failure
// and the caller must free the memory.)  Win95 waits a while before
// freeing the pidl, IE4 frees the pidl immediately.
// IShellFolderView::UpdateObject does not suffer from this problem.
function ShellFolderView_UpdateObject(_hwnd: HWND; _ppidl: LPARAM): LPARAM; inline;
{$EXTERNALSYM ShellFolderView_UpdateObject}
// Returns an array of the selected IDS to the caller.
//     lparam is a pointer to receive the idlists into
//     return value is the count of items in the array.
function ShellFolderView_GetSelectedObjects(_hwnd: HWND; ppidl: LPARAM): LPARAM; inline;
{$EXTERNALSYM ShellFolderView_GetSelectedObjects}
// Sets the position of an item in the viewer
//     lparam is a pointer to a SVF_SETITEMPOS
//     return value is unused
function ShellFolderView_SetItemPos(_hwnd: HWND; _pidl: LPARAM; _x, _y: Integer): LRESULT; inline;
{$EXTERNALSYM ShellFolderView_SetItemPos}
//  Notifies a ShellView when one of its objects get put on the clipboard
//  as a result of a menu command.
//     lparam is the dwEffect (DROPEFFECT_MOVE, DROPEFFECT_COPY)
//     return value is void.
procedure ShellFolderView_SetClipboard(_hwnd: HWND; _dwEffect: DWORD); inline;
{$EXTERNALSYM ShellFolderView_SetClipboard}
procedure ShellFolderView_SetPoints(_hwnd: HWND; _pdtobj: Pointer); inline;
{$EXTERNALSYM ShellFolderView_SetPoints}


function SHFind_InitMenuPopup(hmenu: HMENU; hwndOwner: HWND; idCmdFirst: UINT; 
  idCmdLast: UINT): IContextMenu; stdcall;
{$EXTERNALSYM SHFind_InitMenuPopup}
function SHCreateShellFolderViewEx(pcsfv: LPCSFV; 
  out ppsv: IShellView): HResult; stdcall;
{$EXTERNALSYM SHCreateShellFolderViewEx}

// Legacy PROPIDs for Internet Shortcuts (FMTID_Intshcut) to be used with
// IPropertySetStorage/IPropertyStorage.
// 
// The known property ids and their variant types are:
//      PID_IS_URL          [VT_LPWSTR]   URL
//      PID_IS_NAME         [VT_LPWSTR]   Name of the internet shortcut
//      PID_IS_WORKINGDIR   [VT_LPWSTR]   Working directory for the shortcut
//      PID_IS_HOTKEY       [VT_UI2]      Hotkey for the shortcut
//      PID_IS_SHOWCMD      [VT_I4]       Show command for shortcut
//      PID_IS_ICONINDEX    [VT_I4]       Index into file that has icon
//      PID_IS_ICONFILE     [VT_LPWSTR]   File that has the icon
//      PID_IS_WHATSNEW     [VT_LPWSTR]   What's New text
//      PID_IS_AUTHOR       [VT_LPWSTR]   Author
//      PID_IS_DESCRIPTION  [VT_LPWSTR]   Description text of site
//      PID_IS_COMMENT      [VT_LPWSTR]   User annotated comment

const
  PID_IS_URL           = 2;
  {$EXTERNALSYM PID_IS_URL}
  PID_IS_NAME          = 4;
  {$EXTERNALSYM PID_IS_NAME}
  PID_IS_WORKINGDIR    = 5;
  {$EXTERNALSYM PID_IS_WORKINGDIR}
  PID_IS_HOTKEY        = 6;
  {$EXTERNALSYM PID_IS_HOTKEY}
  PID_IS_SHOWCMD       = 7;
  {$EXTERNALSYM PID_IS_SHOWCMD}
  PID_IS_ICONINDEX     = 8;
  {$EXTERNALSYM PID_IS_ICONINDEX}
  PID_IS_ICONFILE      = 9;
  {$EXTERNALSYM PID_IS_ICONFILE}
  PID_IS_WHATSNEW      = 10;
  {$EXTERNALSYM PID_IS_WHATSNEW}
  PID_IS_AUTHOR        = 11;
  {$EXTERNALSYM PID_IS_AUTHOR}
  PID_IS_DESCRIPTION   = 12;
  {$EXTERNALSYM PID_IS_DESCRIPTION}
  PID_IS_COMMENT       = 13;
  {$EXTERNALSYM PID_IS_COMMENT}

// PROPIDs for Internet Sites (FMTID_InternetSite) to be used with
// IPropertySetStorage/IPropertyStorage
// 
// The known property ids and their variant types are:
//      PID_INTSITE_WHATSNEW     [VT_LPWSTR]   What's New text
//      PID_INTSITE_AUTHOR       [VT_LPWSTR]   Author
//      PID_INTSITE_LASTVISIT    [VT_FILETIME] Time site was last visited
//      PID_INTSITE_LASTMOD      [VT_FILETIME] Time site was last modified
//      PID_INTSITE_VISITCOUNT   [VT_UI4]      Number of times user has visited
//      PID_INTSITE_DESCRIPTION  [VT_LPWSTR]   Description text of site
//      PID_INTSITE_COMMENT      [VT_LPWSTR]   User annotated comment
//      PID_INTSITE_RECURSE      [VT_UI4]      Levels to recurse (0-3)
//      PID_INTSITE_WATCH        [VT_UI4]      PIDISM_ flags
//      PID_INTSITE_SUBSCRIPTION [VT_UI8]      Subscription cookie
//      PID_INTSITE_URL          [VT_LPWSTR]   URL
//      PID_INTSITE_TITLE        [VT_LPWSTR]   Title
//      PID_INTSITE_CODEPAGE     [VT_UI4]      Codepage of the document
//      PID_INTSITE_TRACKING     [VT_UI4]      Tracking
//      PID_INTSITE_ICONINDEX    [VT_I4]       Retrieve the index to the icon
//      PID_INTSITE_ICONFILE     [VT_LPWSTR]   Retrieve the file containing the icon index.
//      PID_INTSITE_RAWURL       [VT_LPWSTR]   The raw, un-encoded, unicode url.

  PID_INTSITE_WHATSNEW      = 2;
  {$EXTERNALSYM PID_INTSITE_WHATSNEW}
  PID_INTSITE_AUTHOR        = 3;
  {$EXTERNALSYM PID_INTSITE_AUTHOR}
  PID_INTSITE_LASTVISIT     = 4;
  {$EXTERNALSYM PID_INTSITE_LASTVISIT}
  PID_INTSITE_LASTMOD       = 5;
  {$EXTERNALSYM PID_INTSITE_LASTMOD}
  PID_INTSITE_VISITCOUNT    = 6;
  {$EXTERNALSYM PID_INTSITE_VISITCOUNT}
  PID_INTSITE_DESCRIPTION   = 7;
  {$EXTERNALSYM PID_INTSITE_DESCRIPTION}
  PID_INTSITE_COMMENT       = 8;
  {$EXTERNALSYM PID_INTSITE_COMMENT}
  PID_INTSITE_FLAGS         = 9;
  {$EXTERNALSYM PID_INTSITE_FLAGS}
  PID_INTSITE_CONTENTLEN    = 10;
  {$EXTERNALSYM PID_INTSITE_CONTENTLEN}
  PID_INTSITE_CONTENTCODE   = 11;
  {$EXTERNALSYM PID_INTSITE_CONTENTCODE}
  PID_INTSITE_RECURSE       = 12;
  {$EXTERNALSYM PID_INTSITE_RECURSE}
  PID_INTSITE_WATCH         = 13;
  {$EXTERNALSYM PID_INTSITE_WATCH}
  PID_INTSITE_SUBSCRIPTION  = 14;
  {$EXTERNALSYM PID_INTSITE_SUBSCRIPTION}
  PID_INTSITE_URL           = 15;
  {$EXTERNALSYM PID_INTSITE_URL}
  PID_INTSITE_TITLE         = 16;
  {$EXTERNALSYM PID_INTSITE_TITLE}
  PID_INTSITE_CODEPAGE      = 18;
  {$EXTERNALSYM PID_INTSITE_CODEPAGE}
  PID_INTSITE_TRACKING      = 19;
  {$EXTERNALSYM PID_INTSITE_TRACKING}
  PID_INTSITE_ICONINDEX     = 20; 
  {$EXTERNALSYM PID_INTSITE_ICONINDEX}
  PID_INTSITE_ICONFILE      = 21; 
  {$EXTERNALSYM PID_INTSITE_ICONFILE}

// Flags for PID_IS_FLAGS
  PIDISF_RECENTLYCHANGED = $00000001; 
  {$EXTERNALSYM PIDISF_RECENTLYCHANGED}
  PIDISF_CACHEDSTICKY    = $00000002; 
  {$EXTERNALSYM PIDISF_CACHEDSTICKY}
  PIDISF_CACHEIMAGES     = $00000010; 
  {$EXTERNALSYM PIDISF_CACHEIMAGES}
  PIDISF_FOLLOWALLLINKS  = $00000020; 
  {$EXTERNALSYM PIDISF_FOLLOWALLLINKS}

// Values for PID_INTSITE_WATCH
  PIDISM_GLOBAL    = 0;             // Monitor based on global setting
  {$EXTERNALSYM PIDISM_GLOBAL}
  PIDISM_WATCH     = 1;             // User says watch
  {$EXTERNALSYM PIDISM_WATCH}
  PIDISM_DONTWATCH = 2;             // User says don't watch
  {$EXTERNALSYM PIDISM_DONTWATCH}


// The shell keeps track of some per-user state to handle display
// options that is of major interest to ISVs.
// The key one requested right now is "DoubleClickInWebView".
type
  tagSHELLSTATEW = {$IFDEF WIN32}packed {$ENDIF}record
    Data: WORD;
    Data2: Byte;
{   fShowAllObjects: BOOL:1;
    fShowExtensions: BOOL:1;
    fNoConfirmRecycle: BOOL:1;
    fShowSysFiles: BOOL:1;
    fShowCompColor: BOOL:1;
    fDoubleClickInWebView: BOOL:1;
    fDesktopHTML: BOOL:1;
    fWin95Classic: BOOL:1;
    fDontPrettyPath: BOOL:1;
    fShowAttribCol: BOOL:1;
    fMapNetDrvBtn: BOOL:1;
    fShowInfoTip: BOOL:1;
    fHideIcons: BOOL:1;
    fWebView: BOOL:1;
    fFilter: BOOL:1;
    fShowSuperHidden: BOOL:1;
    fNoNetCrawling: BOOL:1;
}
    dwWin95Unused: DWORD;// Win95 only - no longer supported pszHiddenFileExts
    uWin95Unused: UINT; // Win95 only - no longer supported cbHiddenFileExts

    // Note: Not a typo!  This is a persisted structure so we cannot use LPARAM
    lParamSort: Integer;
    iSortDirection: Integer;
    version: UINT;

    // new for win2k. need notUsed var to calc the right size of ie4 struct
    // FIELD_OFFSET does not work on bit fields
    uNotUsed: UINT;// feel free to rename and use
    fFlags: WORD;
    fFlags2: Byte;
{   fSepProcess: BOOL:1;

    // new for Whistler.
    fStartPanelOn: BOOL:1;
    fShowStartPage: BOOL:1;

    // new for Windows Vista
    fAutoCheckSelect: BOOL:1;
    fIconsOnly: BOOL:1;
    fShowTypeOverlay: BOOL:1;

    // If you need a new flag, steal a bit from from fSpareFlags.
    // Also, keep SHELLFLAGSTATE and SHGetSettings in sync when adding new flags.
    fSpareFlags: UINT:11;
}
    private
      function  GetByte(const Index: Integer): BOOL;
      procedure SetByte(const Index: Integer; value: BOOL);
      function  GetByte2(const Index: Integer): BOOL;
      procedure SetByte2(const Index: Integer; value: BOOL);
      function  GetByte3(const Index: Integer): BOOL;
      procedure SetByte3(const Index: Integer; value: BOOL);
      function  GetByte4(const Index: Integer): UINT;
      procedure SetByte4(const Index: Integer; value: UINT);

    public
//    Data
      property fShowAllObjects:  BOOL Index $00000000 read GetByte write SetByte;  // mask always $0001, offset 0
      property fShowExtensions: BOOL Index $00000001 read GetByte write SetByte;   //  offset 1
      property fNoConfirmRecycle: BOOL Index $00000002 read GetByte write SetByte; //  offset 2
      property fShowSysFiles: BOOL Index $00000003 read GetByte write SetByte;     //  offset 3
      property fShowCompColor: BOOL Index $00000004 read GetByte write SetByte;    //  offset 4
      property fDoubleClickInWebView: BOOL Index $00000005 read GetByte write SetByte; //  offset 5
      property fDesktopHTML: BOOL Index $00000006 read GetByte write SetByte;      //  offset 6
      property fWin95Classic: BOOL Index $00000007 read GetByte write SetByte;     //  offset 7
      property fDontPrettyPath: BOOL Index $00000008 read GetByte write SetByte;   //  offset 8
      property fShowAttribCol: BOOL Index $00000009 read GetByte write SetByte;    //  offset 9
      property fMapNetDrvBtn: BOOL Index $0000000A read GetByte write SetByte;     //  offset 10
      property fShowInfoTip: BOOL Index $0000000B read GetByte write SetByte;      //  offset 11
      property fHideIcons: BOOL Index $0000000C read GetByte write SetByte;        //  offset 12
      property fWebView: BOOL Index $0000000D read GetByte write SetByte;          //  offset 13
      property fFilter: BOOL Index $0000000E read GetByte write SetByte;           //  offset 14
      property fShowSuperHidden: BOOL Index $0000000F read GetByte write SetByte;  //  offset 15
//    Data2
      property fNoNetCrawling: BOOL Index $00000000 read GetByte2 write SetByte2;  //  offset 0
//  fFlags: WORD;
      property fSepProcess: BOOL Index $00000000 read GetByte3 write SetByte3;       //  offset 0
      // new for Whistler.
      property fStartPanelOn: BOOL Index $00000001 read GetByte3 write SetByte3;     //  offset 1
      property fShowStartPage: BOOL Index $00000002 read GetByte3 write SetByte3;    //  offset 2
      // new for Windows Vista
      property fAutoCheckSelect: BOOL Index $00000003 read GetByte3 write SetByte3;  //  offset 3
      property fIconsOnly: BOOL Index $00000004 read GetByte3 write SetByte3;        //  offset 4
      property fShowTypeOverlay: BOOL Index $00000005 read GetByte3 write SetByte3;  //  offset 5
      // If you need a new flag, steal a bit from from fSpareFlags.
      // Also, keep SHELLFLAGSTATE and SHGetSettings in sync when adding new flags.
//  fFlags: WORD; and fFlags2: Byte;
      property fSpareFlags: UINT Index $01FFC006 read GetByte4 write SetByte4;  // mask=$0001FFC0, offset=6
  end;
  {$EXTERNALSYM tagSHELLSTATEW}

  SHELLSTATEA = tagSHELLSTATEW;
  {$EXTERNALSYM SHELLSTATEA}
  SHELLSTATEW = tagSHELLSTATEW;
  {$EXTERNALSYM SHELLSTATEW}
  SHELLSTATE = SHELLSTATEW;
  {$EXTERNALSYM SHELLSTATE}
  TShellState = SHELLSTATE;
  PShellState = ^TShellState;

const
  SHELLSTATEVERSION_IE4 = 9; 
  {$EXTERNALSYM SHELLSTATEVERSION_IE4}
  SHELLSTATEVERSION_WIN2K = 10; 
  {$EXTERNALSYM SHELLSTATEVERSION_WIN2K}

procedure SHGetSetSettings(var lpss: TShellState; dwMask: DWORD; bSet: BOOL); stdcall;
{$EXTERNALSYM SHGetSetSettings}

// 
//  SysFiles are these windows special files:
//      "dll sys vxd 386 drv"
// 
//  hidden files are files with the FILE_ATTRIBUTE_HIDDEN attribute
// 
//  system files are files with the FILE_ATTRIBUTE_SYSTEM attribute
// 
//      fShowAllObjects fShowSysFiles   Result
//      --------------- -------------   ------
//      0               0               hide hidden + SysFiles + system files
//      0               1               hide hidden files.
//      1               0               show all files.
//      1               1               show all files.
// 
type
  tagSHELLFLAGSTATE = record
{$IFDEF WIN32}
    Data: Word;
{$ELSE}
    Data: BOOL;
{$ENDIF}
{   BOOL fShowAllObjects : 1;
    BOOL fShowExtensions : 1;
    BOOL fNoConfirmRecycle : 1;
    BOOL fShowSysFiles : 1;
    BOOL fShowCompColor : 1;
    BOOL fDoubleClickInWebView : 1;
    BOOL fDesktopHTML : 1;
    BOOL fWin95Classic : 1;
    BOOL fDontPrettyPath : 1;
    BOOL fShowAttribCol : 1;
    BOOL fMapNetDrvBtn : 1;
    BOOL fShowInfoTip : 1;
    BOOL fHideIcons : 1;
    BOOL fAutoCheckSelect: BOOL:1;
    BOOL fIconsOnly: BOOL:1;
    UINT fRestFlags: UINT:1;}
  end;
  {$EXTERNALSYM tagSHELLFLAGSTATE}
  SHELLFLAGSTATE = tagSHELLFLAGSTATE;
  {$EXTERNALSYM SHELLFLAGSTATE}
  TShellFlagState = SHELLFLAGSTATE;
  PShellFlagState = ^TShellFlagState;

const
  SSF_SHOWALLOBJECTS       = $00000001;
  {$EXTERNALSYM SSF_SHOWALLOBJECTS}
  SSF_SHOWEXTENSIONS       = $00000002;
  {$EXTERNALSYM SSF_SHOWEXTENSIONS}
  SSF_HIDDENFILEEXTS       = $00000004;
  {$EXTERNALSYM SSF_HIDDENFILEEXTS}
  SSF_SERVERADMINUI        = $00000004;
  {$EXTERNALSYM SSF_SERVERADMINUI}
  SSF_SHOWCOMPCOLOR        = $00000008;
  {$EXTERNALSYM SSF_SHOWCOMPCOLOR}
  SSF_SORTCOLUMNS          = $00000010;
  {$EXTERNALSYM SSF_SORTCOLUMNS}
  SSF_SHOWSYSFILES         = $00000020;
  {$EXTERNALSYM SSF_SHOWSYSFILES}
  SSF_DOUBLECLICKINWEBVIEW = $00000080;
  {$EXTERNALSYM SSF_DOUBLECLICKINWEBVIEW}
  SSF_SHOWATTRIBCOL        = $00000100;
  {$EXTERNALSYM SSF_SHOWATTRIBCOL}
  SSF_DESKTOPHTML          = $00000200;
  {$EXTERNALSYM SSF_DESKTOPHTML}
  SSF_WIN95CLASSIC         = $00000400;
  {$EXTERNALSYM SSF_WIN95CLASSIC}
  SSF_DONTPRETTYPATH       = $00000800;
  {$EXTERNALSYM SSF_DONTPRETTYPATH}
  SSF_SHOWINFOTIP          = $00002000;
  {$EXTERNALSYM SSF_SHOWINFOTIP}
  SSF_MAPNETDRVBUTTON      = $00001000;
  {$EXTERNALSYM SSF_MAPNETDRVBUTTON}
  SSF_NOCONFIRMRECYCLE     = $00008000;
  {$EXTERNALSYM SSF_NOCONFIRMRECYCLE}
  SSF_HIDEICONS            = $00004000;
  {$EXTERNALSYM SSF_HIDEICONS}
  SSF_FILTER               = $00010000;
  {$EXTERNALSYM SSF_FILTER}
  SSF_WEBVIEW              = $00020000;
  {$EXTERNALSYM SSF_WEBVIEW}
  SSF_SHOWSUPERHIDDEN      = $00040000;
  {$EXTERNALSYM SSF_SHOWSUPERHIDDEN}
  SSF_SEPPROCESS           = $00080000;
  {$EXTERNALSYM SSF_SEPPROCESS}
  SSF_NONETCRAWLING        = $00100000;
  {$EXTERNALSYM SSF_NONETCRAWLING}
  SSF_STARTPANELON         = $00200000;
  {$EXTERNALSYM SSF_STARTPANELON}
  SSF_SHOWSTARTPAGE        = $00400000;
  {$EXTERNALSYM SSF_SHOWSTARTPAGE}
  SSF_AUTOCHECKSELECT      = $00800000;
  {$EXTERNALSYM SSF_AUTOCHECKSELECT}
  SSF_ICONSONLY            = $01000000;
  {$EXTERNALSYM SSF_ICONSONLY}
  SSF_SHOWTYPEOVERLAY      = $02000000;
  {$EXTERNALSYM SSF_SHOWTYPEOVERLAY}

// 
// Specify the bits you are interested in in dwMask and they will be
// filled out in the lpss structure.
// 
// When these settings change, a WM_SETTINGCHANGE message is sent
// with the string lParam value of "ShellState".
// 
procedure SHGetSettings(var lpss: TShellFlagState; dwMask: DWORD); stdcall;
{$EXTERNALSYM SHGetSettings}

// Given a pidl, you can get an interface pointer (as specified by riid) of the pidl's parent folder (in ppv)
// If ppidlLast is non-NULL, you can also get the pidl of the last item.
function SHBindToParent(pidl: PItemIDList; const riid: TIID; var ppv: Pointer; 
  var ppidlLast: PItemIDList): HResult; stdcall;
{$EXTERNALSYM SHBindToParent}

// Same as SHBindToParent, except you also specify which root to use.
function SHBindToFolderIDListParent(const psfRoot: IShellFolder; 
  pidl: PItemIDList; const riid: TIID; var ppv: Pointer; 
  var ppidlLast: PItemIDList): HResult; stdcall;
{$EXTERNALSYM SHBindToFolderIDListParent}

// same as SHBindToFolderIDListParent but with a IBindCtx *pbc;
function SHBindToFolderIDListParentEx(const psfRoot: IShellFolder; 
  pidl: PItemIDList; const ppbc: IBindCtx; const riid: TIID; 
  var ppv: Pointer; var ppidlLast: PItemIDList): HResult; stdcall;
{$EXTERNALSYM SHBindToFolderIDListParentEx}

// helper function that gets the desktop object, then calls BindToObject on that
function SHBindToObject(const psf: IShellFolder; pidl: PItemIDList; 
  const pbc: IBindCtx; const riid: TIID; var ppv: Pointer): HResult; stdcall;
{$EXTERNALSYM SHBindToObject}

//
//  given a string it will call psfDesktop->ParseDisplayName() to try and create a pidl
//  if no pbc specified, it uses the preferred options for parsing.
//  this includes mapping file system paths to their appropriate aliased location (RegisterObjectParam(STR_PARSE_TRANSLATE_ALIASES))
//  psfgaoOut is optional for SFGAO attributes
//
function SHParseDisplayName(pszName: LPCWSTR; const pbc: IBindCtx; 
  var ppidl: PItemIDList; sfgaoIn: DWORD; 
  var psfgaoOut: DWORD): HResult; stdcall;
{$EXTERNALSYM SHParseDisplayName}

// 
// This API will make its best effort to prepare the path for the caller.  This includes:
// 1. Prompting for the ejectable media to be re-inserted. (Floppy, CD-ROM, ZIP drive, etc.)
// 2. Prompting for the media to be formatted. (Floppy, hard drive, etc.)
// 3. Remount mapped drives if the connection was lost. (\\unc\share mapped to N: becomes disconnected)
// 4. If the path doesn't exist, create it.  (SHPPFW_DIRCREATE and SHPPFW_ASKDIRCREATE)
// 5. Display an error if the media is read only. (SHPPFW_NOWRITECHECK not set)
// 
// PARAMETERS:
//      hwnd: Parernt window for UI.  NULL means don't display UI. OPTIONAL
//      punkEnableModless: Parent that will be set to modal during UI using IOleInPlaceActiveObject::EnableModeless(). OPTIONAL
//      pszPath: Path to verify is valid for writting.  This can be a UNC or file drive path.  The path
//               should only contain directories.  Pass SHPPFW_IGNOREFILENAME if the last path segment
//               is always filename to ignore.
//      dwFlags: SHPPFW_* Flags to modify behavior

const
  SHPPFW_NONE = $00000000; 
  {$EXTERNALSYM SHPPFW_NONE}
  SHPPFW_DIRCREATE = $00000001;                     // Create the directory if it doesn't exist without asking the user.
  {$EXTERNALSYM SHPPFW_DIRCREATE}
  SHPPFW_ASKDIRCREATE = $00000002;                  // Create the directory if it doesn't exist after asking the user.
  {$EXTERNALSYM SHPPFW_ASKDIRCREATE}
  SHPPFW_IGNOREFILENAME = $00000004;                // Ignore the last item in pszPath because it's a file.  Example: pszPath="C:\DirA\DirB", only use "C:\DirA".
  {$EXTERNALSYM SHPPFW_IGNOREFILENAME}
  SHPPFW_NOWRITECHECK = $00000008;                  // Caller only needs to read from the drive, so don't check if it's READ ONLY.
  {$EXTERNALSYM SHPPFW_NOWRITECHECK}
  SHPPFW_MEDIACHECKONLY = $00000010;                // do the retrys on the media (or net path), return errors if the file can't be found
  {$EXTERNALSYM SHPPFW_MEDIACHECKONLY}

  SHPPFW_DEFAULT = SHPPFW_DIRCREATE;                // May change
  {$EXTERNALSYM SHPPFW_DEFAULT}

function SHPathPrepareForWriteA(hwnd: HWND; const punkEnableModless: IUnknown; 
  pszPath: LPCSTR; dwFlags: DWORD): HResult; stdcall;
{$EXTERNALSYM SHPathPrepareForWriteA}
function SHPathPrepareForWriteW(hwnd: HWND; const punkEnableModless: IUnknown; 
  pszPath: LPCWSTR; dwFlags: DWORD): HResult; stdcall;
{$EXTERNALSYM SHPathPrepareForWriteW}
function SHPathPrepareForWrite(hwnd: HWND; const punkEnableModless: IUnknown; 
  pszPath: LPCWSTR; dwFlags: DWORD): HResult; stdcall;
{$EXTERNALSYM SHPathPrepareForWrite}


// --------------------------------------------------------------------------
// Interface used for exposing the INI file methods on a shortcut file
// --------------------------------------------------------------------------
type
  INamedPropertyBag = interface(IUnknown)
    [SID_INamedPropertyBag]
    function ReadPropertyNPB(pszBagName, pszPropName: LPCWSTR; var pVar: TPropVariant): HRESULT; stdcall;

    function WritePropertyNPB(pszBagName, pszPropName: LPCWSTR; const pVar: TPropVariant): HRESULT; stdcall;

    function RemovePropertyNPB(pszBagName, pszPropName: LPCWSTR): HRESULT; stdcall;
  end;

//    SoftwareUpdateMessageBox
// 
//    Provides a standard message box for the alerting the user that a software
//    update is available or installed. No UI will be displayed if there is no
//    update available or if the available update version is less than or equal
//    to the Advertised update version.
// 
//    hWnd                - [in] Handle of owner window
//    szDistUnit          - [in] Unique identifier string for a code distribution unit. For
//                               ActiveX controls and Active Setup installed components, this
//                               is typically a GUID string.
//    dwFlags             - [in] Must be 0.
//    psdi                - [in,out] Pointer to SOFTDISTINFO ( see URLMon.h ). May be NULL.
//                                cbSize should be initialized
//                                by the caller to sizeof(SOFTDISTINFO), dwReserved should be set to 0.
// 
//    RETURNS:
// 
//    IDNO     - The user chose cancel. If *pbRemind is FALSE, the caller should save the
//               update version from the SOFTDISTINFO and pass it in as the Advertised
//               version in future calls.
// 
//    IDYES    - The user has selected Update Now/About Update. The caller should navigate to
//               the SOFTDISTINFO's pszHREF to initiate the install or learn about it.
//               The caller should save the update version from the SOFTDISTINFO and pass
//               it in as the Advertised version in future calls.
// 
//    IDIGNORE - There is no pending software update. Note: There is
//               no Ignore button in the standard UI. This occurs if the available
//               version is less than the installed version or is not present or if the
//               Advertised version is greater than or equal to the update version.
// 
//    IDABORT  - An error occured. Call GetSoftwareUpdateInfo() for a more specific HRESULT.
//               Note: There is no Abort button in the standard UI.

function SoftwareUpdateMessageBox(hWnd: HWND; szDistUnit: PWideChar;
  dwFlags: DWORD; var psdi: TSoftDistInfo): DWORD; stdcall;
{$EXTERNALSYM SoftwareUpdateMessageBox}

//  SHPropStgCreate()
//  Wrap of IPropertySetStorage::Open/Create
// 
//  This function ensures proper handling of code page retrieval/assignment
//  for the requested property set operation.
// 
//  psstg,          //  Address of IPropertySetStorage vtable
//  fmtid,          //  property set ID
//  pclsid,         //  class ID associated with the set. This can be NULL
//  grfFlags,       //  PROPSETFLAG_xxx.  All sets containing ansi bytes should be created with
                    //  PROPSETFLAG_ANSI, otherwise PROPSETFLAG_DEFAULT.
//  grfMode,        //  STGM_ flags.  Must contain STGM_DIRECT|STGM_EXCLUSIVE.
//  dwDisposition,  //  OPEN_EXISTING. OPEN_ALWAYS, CREATE_NEW, or CREATE_ALWAYS
//  IPropertyStorage** ppstg,  // Address to receive requested vtable
//  puCodePage      //  Optional address to receive the code page ID for the set.
// 
function SHPropStgCreate(const psstg: IPropertySetStorage; const fmtid: TFMTID; 
  var pclsid: TCLSID; grfFlags: DWORD; grfMode: DWORD; dwDisposition: DWORD;
  out ppstg: IPropertyStorage; var puCodePage: UINT): HResult; stdcall;
{$EXTERNALSYM SHPropStgCreate}


//  SHPropStgReadMultiple()
//  IPropertyStorage::ReadMultiple wrap
// 
//  The wrap ensures ANSI/UNICODE translations are handled properly for
//  legacy property sets.
// 
//  pps,       // address of IPropertyStorage vtable.
//  uCodePage, //Code page value retrieved from SHCreatePropertySet
//  cpspec,    //Count of properties being read
//  rgpspec,   //Array of the properties to be read
//  rgvar      //Array of PROPVARIANTs containing the property values on return
// 
function SHPropStgReadMultiple(const pps: IPropertyStorage; uCodePage: UINT; 
  cpspec: Cardinal; rgpspec: array of TPropSpec; 
  rgvar: array of TPropVariant): HResult; stdcall;
{$EXTERNALSYM SHPropStgReadMultiple}


//  SHPropStgWriteMultiple()
//  IPropertyStorage::WriteMultiple wrap
//
//  The wrap ensures ANSI/UNICODE translations are handled properly for
//  legacy property sets.
// 
//  pps,       // address of IPropertyStorage vtable.
//  uCodePage, // code page retrieved from SHCreatePropertySet.
//  cpspec,    // The number of properties being set
//  rgpspec,   // Property specifiers
//  rgvar,     // Array of PROPVARIANT values
//  propidNameFirst // Minimum value for property identifiers. This value should be >= PID_FIRST_USABLE
// 
function SHPropStgWriteMultiple(const pps: IPropertyStorage; var puCodePage: UINT; 
  cpspec: Cardinal; rgpspec: PPropSpec; rgvar: array of TPropVariant; 
  propidNameFirst: PROPID): HResult; stdcall;
{$EXTERNALSYM SHPropStgWriteMultiple}

function SHCreateFileExtractIconA(pszFile: LPCSTR; dwFileAttributes: DWORD; 
  const riid: TIID; var ppv: Pointer): HResult; stdcall;
{$EXTERNALSYM SHCreateFileExtractIconA}
function SHCreateFileExtractIconW(pszFile: LPCWSTR; dwFileAttributes: DWORD; 
  const riid: TIID; var ppv: Pointer): HResult; stdcall;
{$EXTERNALSYM SHCreateFileExtractIconW}
function SHCreateFileExtractIcon(pszFile: LPCWSTR; dwFileAttributes: DWORD; 
  const riid: TIID; var ppv: Pointer): HResult; stdcall;
{$EXTERNALSYM SHCreateFileExtractIcon}

function SHLimitInputEdit(hwndEdit: HWND; 
  const psf: IShellFolder): HResult; stdcall;
{$EXTERNALSYM SHLimitInputEdit}

function SHGetAttributesFromDataObject(const pdo: IDataObject; 
  dwAttributeMask: DWORD; var pdwAttributes: DWORD; 
  var pcItems: UINT): HResult; stdcall;
{$EXTERNALSYM SHGetAttributesFromDataObject}

// 
// The SHMultiFileProperties API displays a property sheet for a
// set of files specified in an IDList Array.
// 
// Parameters:
//      pdtobj  - Data object containing list of files.  The data
//                object must provide the "Shell IDList Array"
//                clipboard format.  The parent folder's implementation of
//                IShellFolder::GetDisplayNameOf must return a fully-qualified
//                filesystem path for each item in response to the
//                SHGDN_FORPARSING flag.
// 
//      dwFlags - Reserved for future use.  Should be set to 0.
// 
// Returns:
//      S_OK
// 
function SHMultiFileProperties(const pdtobj: IDataObject; 
  dwFlags: DWORD): HResult; stdcall;
{$EXTERNALSYM SHMultiFileProperties}

// A usefull function in Defview for mapping idlist into index into system
// image list.  Optionally it can also look up the index of the selected
// icon.
function SHMapPIDLToSystemImageListIndex(const pshf: IShellFolder;
  pidl: PItemIDList; var piIndexSel: Integer): Integer; stdcall;
{$EXTERNALSYM SHMapPIDLToSystemImageListIndex}

function SHCLSIDFromString(psz: LPCWSTR; var pclsid: TCLSID): HResult; stdcall;
{$EXTERNALSYM SHCLSIDFromString}
function SHCreateQueryCancelAutoPlayMoniker(
  out ppmoniker: IMoniker): HResult; stdcall;
{$EXTERNALSYM SHCreateQueryCancelAutoPlayMoniker}
function PerUserInit: HRESULT; stdcall;
{$EXTERNALSYM PerUserInit}
function SHRunControlPanel(lpcszCmdLine: LPCWSTR; 
  hwndMsgParent: HWND): BOOL; stdcall;
{$EXTERNALSYM SHRunControlPanel}

function PickIconDlg(hwnd: HWND; pszIconPath: LPWSTR; cchIconPath: UINT; 
  var piIconIndex: Integer): Integer; stdcall;
{$EXTERNALSYM PickIconDlg}


type
  LPAASHELLMENUFILENAME = ^AASHELLMENUFILENAME;
  {$EXTERNALSYM LPAASHELLMENUFILENAME}
  tagAAMENUFILENAME = record 
    cbTotal: Shortint;
    rgbReserved: packed array[0..11] of Byte;
    szFileName: packed array[0..0] of WCHAR;// variable length string
  end;
  {$EXTERNALSYM tagAAMENUFILENAME}
  AASHELLMENUFILENAME = tagAAMENUFILENAME;
  {$EXTERNALSYM AASHELLMENUFILENAME}
  TAAShellMenuFileName = AASHELLMENUFILENAME;
  PAAShellMenuFileName = ^TAAShellMenuFileName;

  LPAASHELLMENUITEM = ^AASHELLMENUITEM;
  {$EXTERNALSYM LPAASHELLMENUITEM}
  tagAASHELLMENUITEM = record
    lpReserved1: Pointer;
    iReserved: Integer;
    uiReserved: UINT;
    lpName: LPAASHELLMENUFILENAME;// name of file
    psz: LPWSTR;        // text to use if no file
  end;
  {$EXTERNALSYM tagAASHELLMENUITEM}
  AASHELLMENUITEM = tagAASHELLMENUITEM;
  {$EXTERNALSYM AASHELLMENUITEM}
  TAAShellMenuItem = AASHELLMENUITEM;
  PAAShellMenuItem = ^TAAShellMenuItem;

// returns an IStream or IStorage via riid/ppv
function StgMakeUniqueName(const pstgParent: IStorage; pszFileSpec: LPCWSTR; 
  grfMode: DWORD; const riid: TIID; var ppv: Pointer): HRESULT;
{$EXTERNALSYM StgMakeUniqueName}

type
  IESHORTCUTFLAGS = Integer; 
  {$EXTERNALSYM IESHORTCUTFLAGS}
const
  IESHORTCUT_NEWBROWSER    = $01; 
  {$EXTERNALSYM IESHORTCUT_NEWBROWSER}
  IESHORTCUT_OPENNEWTAB    = $02; 
  {$EXTERNALSYM IESHORTCUT_OPENNEWTAB}
  IESHORTCUT_FORCENAVIGATE = $04; 
  {$EXTERNALSYM IESHORTCUT_FORCENAVIGATE}
  IESHORTCUT_BACKGROUNDTAB = $08;
  {$EXTERNALSYM IESHORTCUT_BACKGROUNDTAB}

function ImportPrivacySettings(pszFilename: LPCWSTR;
  var pfParsePrivacyPreferences, pfParsePerSiteRules: BOOL): BOOL; stdcall;

type
  //NOTE: IEnumPrivacyRecords also defined in mshtml.h
  IEnumPrivacyRecords = interface(IUnknown)
    [SID_IEnumPrivacyRecords]
    function Reset: HRESULT; stdcall;

    function GetSize(var pSize: Cardinal): HRESULT; stdcall;

    function GetPrivacyImpacted(var pState: BOOL): HRESULT; stdcall;

    function Next(var pbstrUrl: WideString; var pbstrPolicyRef: WideString;
      var pdwReserved: Integer; var pdwPrivacyFlags: DWORD): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IEnumPrivacyRecords}

function DoPrivacyDlg(hwndOwner: HWND; pszUrl: LPCWSTR;
  var pPrivacyEnum: IEnumPrivacyRecords;
  fReportAllSites: BOOL): HResult; stdcall;
{$EXTERNALSYM DoPrivacyDlg}

//Shldisp.h
const
  SID_IFolderViewOC          = '{9BA05970-F6A8-11CF-A442-00A0C90A8F39}';
  SID_DShellFolderViewEvents = '{62112AA2-EBE4-11CF-A5FB-0020AFE7292D}';
  SID_DFConstraint           = '{4A3DF050-23BD-11D2-939F-00A0C91EEDBA}';
  SID_FolderItem             = '{FAC32C80-CBE4-11CE-8350-444553540000}';
  SID_FolderItems            = '{744129E0-CBE5-11CE-8350-444553540000}';
  SID_FolderItemVerb         = '{08EC3E00-50B0-11CF-960C-0080C7F4EE85}';
  SID_FolderItemVerbs        = '{1F8352C0-50B0-11CF-960C-0080C7F4EE85}';
  SID_Folder                 = '{BBCBDE60-C3FF-11CE-8350-444553540000}';
  SID_Folder2                = '{F0D2D8EF-3890-11D2-BF8B-00C04FB93661}';
  SID_Folder3                = '{A7AE5F64-C4D7-4D7F-9307-4D24EE54B841}';
  SID_FolderItem2            = '{EDC817AA-92B8-11D1-B075-00C04FC33AA5}';
  SID_FolderItems2           = '{C94F0AD0-F363-11D2-A327-00C04F8EEC7F}';
  SID_FolderItems3           = '{EAA7C309-BBEC-49D5-821D-64D966CB667F}';
  SID_IShellLinkDual         = '{88A05C00-F000-11CE-8350-444553540000}';
  SID_IShellLinkDual2        = '{317EE249-F12E-11D2-B1E4-00C04F8EEB3E}';
  SID_IShellFolderViewDual   = '{E7A1AF80-4D96-11CF-960C-0080C7F4EE85}';
  SID_IShellFolderViewDual2  = '{31C147B6-0ADE-4A3C-B514-DDF932EF6D17}';
  SID_IShellFolderViewDual3  = '{29EC8E6C-46D3-411F-BAAA-611A6C9CAC66}';
  SID_IShellDispatch         = '{D8F015C0-C278-11CE-A49E-444553540000}';
  SID_IShellDispatch2        = '{A4C6892C-3BA9-11D2-9DEA-00C04FB16162}';
  SID_IShellDispatch3        = '{177160CA-BB5A-411C-841D-BD38FACDEAA0}';
  SID_IShellDispatch4        = '{EFD84B2D-4BCF-4298-BE25-EB542A59FBDA}';
  SID_IShellDispatch5        = '{866738B9-6CF2-4DE8-8767-F794EBE74F4E}';
  SID_IFileSearchBand        = '{2D91EEA1-9932-11D2-BE86-00A0C9A83DA1}';
  SID_IWebWizardHost         = '{18BCC359-4990-4BFB-B951-3C83702BE5F9}';
  SID_INewWDEvents           = '{0751C551-7568-41C9-8E5B-E22E38919236}';
  SID_IAutoComplete          = '{00BB2762-6A77-11D0-A535-00C04FD7D062}';
  SID_IAutoComplete2         = '{EAC04BC0-3791-11D2-BB95-0060977B464C}';
  SID_IEnumACString          = '{8E74C210-CF9D-4EAF-A403-7356428F0A5A}';
  SID_IAsyncOperation        = '{3D8B0590-F691-11D2-8EA9-006097DF5BD4}';

  IID_IFolderViewOC: TGUID                  = SID_IFolderViewOC;
  {$EXTERNALSYM IID_IFolderViewOC}
  IID_DShellFolderViewEvents: TGUID         = SID_DShellFolderViewEvents;
  {$EXTERNALSYM IID_DShellFolderViewEvents}
  IID_DFConstraint: TGUID                   = SID_DFConstraint;
  {$EXTERNALSYM IID_DFConstraint}
  IID_FolderItem: TGUID                     = SID_FolderItem;
  {$EXTERNALSYM IID_FolderItem}
  IID_FolderItems: TGUID                    = SID_FolderItems;
  {$EXTERNALSYM IID_FolderItems}
  IID_FolderItemVerb: TGUID                 = SID_FolderItemVerb;
  {$EXTERNALSYM IID_FolderItemVerb}
  IID_FolderItemVerbs: TGUID                = SID_FolderItemVerbs;
  {$EXTERNALSYM IID_FolderItemVerbs}
  IID_Folder: TGUID                         = SID_Folder;
  {$EXTERNALSYM IID_Folder}
  IID_Folder2: TGUID                        = SID_Folder2;
  {$EXTERNALSYM IID_Folder2}
  IID_Folder3: TGUID                        = SID_Folder3;
  {$EXTERNALSYM IID_Folder3}
  IID_FolderItem2: TGUID                    = SID_FolderItem2;
  {$EXTERNALSYM IID_FolderItem2}
  IID_FolderItems2: TGUID                   = SID_FolderItems2;
  {$EXTERNALSYM IID_FolderItems2}
  IID_FolderItems3: TGUID                   = SID_FolderItems3;
  {$EXTERNALSYM IID_FolderItems3}
  IID_IShellLinkDual: TGUID                 = SID_IShellLinkDual;
  {$EXTERNALSYM IID_IShellLinkDual}
  IID_IShellLinkDual2: TGUID                = SID_IShellLinkDual2;
  {$EXTERNALSYM IID_IShellLinkDual2}
  IID_IShellFolderViewDual: TGUID           = SID_IShellFolderViewDual;
  {$EXTERNALSYM IID_IShellFolderViewDual}
  IID_IShellFolderViewDual2: TGUID          = SID_IShellFolderViewDual2;
  {$EXTERNALSYM IID_IShellFolderViewDual2}
  IID_IShellFolderViewDual3: TGUID          = SID_IShellFolderViewDual3;
  {$EXTERNALSYM IID_IShellFolderViewDual3}
  IID_IShellDispatch: TGUID                 = SID_IShellDispatch;
  {$EXTERNALSYM IID_IShellDispatch}
  IID_IShellDispatch2: TGUID                = SID_IShellDispatch2;
  {$EXTERNALSYM IID_IShellDispatch2}
  IID_IShellDispatch3: TGUID                = SID_IShellDispatch3;
  {$EXTERNALSYM IID_IShellDispatch3}
  IID_IShellDispatch4: TGUID                = SID_IShellDispatch4;
  {$EXTERNALSYM IID_IShellDispatch4}
  IID_IShellDispatch5: TGUID                = SID_IShellDispatch5;
  {$EXTERNALSYM IID_IShellDispatch5}
  IID_IFileSearchBand: TGUID                = SID_IFileSearchBand;
  {$EXTERNALSYM IID_IFileSearchBand}
  IID_IWebWizardHost: TGUID                 = SID_IWebWizardHost;
  {$EXTERNALSYM IID_IWebWizardHost}
  IID_INewWDEvents: TGUID                   = SID_INewWDEvents;
  {$EXTERNALSYM IID_INewWDEvents}
  IID_IAutoComplete: TGUID                  = SID_IAutoComplete;
  {$EXTERNALSYM IID_IAutoComplete}
  IID_IAutoComplete2: TGUID                 = SID_IAutoComplete2;
  {$EXTERNALSYM IID_IAutoComplete2}
  IID_IEnumACString: TGUID                  = SID_IEnumACString;
  {$EXTERNALSYM IID_IEnumACString}
  IID_IAsyncOperation: TGUID                = SID_IAsyncOperation;
  {$EXTERNALSYM IID_IAsyncOperation}

  CLSID_ShellFolderViewOC: TGUID           = '{9BA05971-F6A8-11CF-A442-00A0C90A8F39}';
  {$EXTERNALSYM CLSID_ShellFolderViewOC}
  CLSID_ShellFolderItem: TGUID             = '{2fe352ea-fd1f-11d2-b1f4-00c04f8eeb3e}';
  {$EXTERNALSYM CLSID_ShellFolderItem}
  CLSID_ShellLinkObject: TGUID             = '{11219420-1768-11d1-95BE-00609797EA4F}';
  {$EXTERNALSYM CLSID_ShellLinkObject}
  CLSID_ShellFolderView: TGUID             = '{62112AA1-EBE4-11cf-A5FB-0020AFE7292D}';
  {$EXTERNALSYM CLSID_ShellFolderView}
  CLSID_Shell: TGUID                       = '{13709620-C279-11CE-A49E-444553540000}';
  {$EXTERNALSYM CLSID_Shell}
  CLSID_ShellDispatchInproc: TGUID         = '{0A89A860-D7B1-11CE-8350-444553540000}';
  {$EXTERNALSYM CLSID_ShellDispatchInproc}
  CLSID_FileSearchBand: TGUID              = '{C4EE31F3-4768-11D2-BE5C-00A0C9A83DA1}';
  {$EXTERNALSYM CLSID_FileSearchBand}

const
  OFS_INACTIVE   = -1; 
  {$EXTERNALSYM OFS_INACTIVE}
  OFS_ONLINE     = OFS_INACTIVE + 1; 
  {$EXTERNALSYM OFS_ONLINE}
  OFS_OFFLINE    = OFS_ONLINE + 1; 
  {$EXTERNALSYM OFS_OFFLINE}
  OFS_SERVERBACK = OFS_OFFLINE + 1; 
  {$EXTERNALSYM OFS_SERVERBACK}
  OFS_DIRTYCACHE = OFS_SERVERBACK + 1; 
  {$EXTERNALSYM OFS_DIRTYCACHE}

  SFVVO_SHOWALLOBJECTS       = $1;
  {$EXTERNALSYM SFVVO_SHOWALLOBJECTS}
  SFVVO_SHOWEXTENSIONS       = $2; 
  {$EXTERNALSYM SFVVO_SHOWEXTENSIONS}
  SFVVO_SHOWCOMPCOLOR        = $8; 
  {$EXTERNALSYM SFVVO_SHOWCOMPCOLOR}
  SFVVO_SHOWSYSFILES         = $20; 
  {$EXTERNALSYM SFVVO_SHOWSYSFILES}
  SFVVO_WIN95CLASSIC         = $40; 
  {$EXTERNALSYM SFVVO_WIN95CLASSIC}
  SFVVO_DOUBLECLICKINWEBVIEW = $80; 
  {$EXTERNALSYM SFVVO_DOUBLECLICKINWEBVIEW}
  SFVVO_DESKTOPHTML          = $200; 
  {$EXTERNALSYM SFVVO_DESKTOPHTML}

  ssfDESKTOP          = 0;
  {$EXTERNALSYM ssfDESKTOP}
  ssfPROGRAMS         = $2; 
  {$EXTERNALSYM ssfPROGRAMS}
  ssfCONTROLS         = $3; 
  {$EXTERNALSYM ssfCONTROLS}
  ssfPRINTERS         = $4; 
  {$EXTERNALSYM ssfPRINTERS}
  ssfPERSONAL         = $5; 
  {$EXTERNALSYM ssfPERSONAL}
  ssfFAVORITES        = $6;
  {$EXTERNALSYM ssfFAVORITES}
  ssfSTARTUP          = $7; 
  {$EXTERNALSYM ssfSTARTUP}
  ssfRECENT           = $8; 
  {$EXTERNALSYM ssfRECENT}
  ssfSENDTO           = $9;
  {$EXTERNALSYM ssfSENDTO}
  ssfBITBUCKET        = $A; 
  {$EXTERNALSYM ssfBITBUCKET}
  ssfSTARTMENU        = $B; 
  {$EXTERNALSYM ssfSTARTMENU}
  ssfDESKTOPDIRECTORY = $10; 
  {$EXTERNALSYM ssfDESKTOPDIRECTORY}
  ssfDRIVES           = $11; 
  {$EXTERNALSYM ssfDRIVES}
  ssfNETWORK          = $12; 
  {$EXTERNALSYM ssfNETWORK}
  ssfNETHOOD          = $13; 
  {$EXTERNALSYM ssfNETHOOD}
  ssfFONTS            = $14; 
  {$EXTERNALSYM ssfFONTS}
  ssfTEMPLATES        = $15; 
  {$EXTERNALSYM ssfTEMPLATES}
  ssfCOMMONSTARTMENU  = $16; 
  {$EXTERNALSYM ssfCOMMONSTARTMENU}
  ssfCOMMONPROGRAMS   = $17; 
  {$EXTERNALSYM ssfCOMMONPROGRAMS}
  ssfCOMMONSTARTUP    = $18; 
  {$EXTERNALSYM ssfCOMMONSTARTUP}
  ssfCOMMONDESKTOPDIR = $19; 
  {$EXTERNALSYM ssfCOMMONDESKTOPDIR}
  ssfAPPDATA          = $1A; 
  {$EXTERNALSYM ssfAPPDATA}
  ssfPRINTHOOD        = $1B;
  {$EXTERNALSYM ssfPRINTHOOD}
  ssfLOCALAPPDATA     = $1C; 
  {$EXTERNALSYM ssfLOCALAPPDATA}
  ssfALTSTARTUP       = $1D; 
  {$EXTERNALSYM ssfALTSTARTUP}
  ssfCOMMONALTSTARTUP = $1E; 
  {$EXTERNALSYM ssfCOMMONALTSTARTUP}
  ssfCOMMONFAVORITES  = $1F; 
  {$EXTERNALSYM ssfCOMMONFAVORITES}
  ssfINTERNETCACHE    = $20; 
  {$EXTERNALSYM ssfINTERNETCACHE}
  ssfCOOKIES          = $21; 
  {$EXTERNALSYM ssfCOOKIES}
  ssfHISTORY          = $22; 
  {$EXTERNALSYM ssfHISTORY}
  ssfCOMMONAPPDATA    = $23;
  {$EXTERNALSYM ssfCOMMONAPPDATA}
  ssfWINDOWS          = $24; 
  {$EXTERNALSYM ssfWINDOWS}
  ssfSYSTEM           = $25; 
  {$EXTERNALSYM ssfSYSTEM}
  ssfPROGRAMFILES     = $26; 
  {$EXTERNALSYM ssfPROGRAMFILES}
  ssfMYPICTURES       = $27; 
  {$EXTERNALSYM ssfMYPICTURES}
  ssfPROFILE          = $28; 
  {$EXTERNALSYM ssfPROFILE}
  ssfSYSTEMx86        = $29; 
  {$EXTERNALSYM ssfSYSTEMx86}
  ssfPROGRAMFILESx86  = $30; 
  {$EXTERNALSYM ssfPROGRAMFILESx86}

{ interface IFolderViewOC }
type
  IFolderViewOC = interface(IDispatch) 
    [SID_IFolderViewOC]
    function SetFolderView(pdisp: IDispatch): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IFolderViewOC}

{ dispinterface DShellFolderViewEvents }
  DShellFolderViewEvents = interface(IDispatch) 
    [SID_DShellFolderViewEvents]
  end;
  {$EXTERNALSYM DShellFolderViewEvents}

{ interface DFConstraint }
  DFConstraint = interface(IDispatch) 
    [SID_DFConstraint]
    function get_Name(var pbs: WideString): HRESULT; stdcall;
    function get_Value(var pv: OleVariant): HRESULT; stdcall;
  end;
  {$EXTERNALSYM DFConstraint}

{ interface FolderItem }
  FolderItemVerbs = interface;
  FolderItem = interface(IDispatch)
    [SID_FolderItem]
    function get_Application(var ppid: IDispatch): HRESULT; stdcall;
    function get_Parent(var ppid: IDispatch): HRESULT; stdcall;
    function get_Name(var pbs: WideString): HRESULT; stdcall;
    function put_Name(bs: WideString): HRESULT; stdcall;
    function get_Path(var pbs: WideString): HRESULT; stdcall;
    function get_GetLink(var ppid: IDispatch): HRESULT; stdcall;
    function get_GetFolder(var ppid: IDispatch): HRESULT; stdcall;
    function get_IsLink(var pb: WordBool): HRESULT; stdcall;
    function get_IsFolder(var pb: VARIANT_BOOL): HRESULT; stdcall;
    function get_IsFileSystem(var pb: VARIANT_BOOL): HRESULT; stdcall;
    function get_IsBrowsable(var pb: VARIANT_BOOL): HRESULT; stdcall;
    function get_ModifyDate(var pdt: TDate): HRESULT; stdcall;
    function put_ModifyDate(dt: TDate): HRESULT; stdcall;
    function get_Size(var pul: Integer): HRESULT; stdcall;
    function get_Type(var pbs: WideString): HRESULT; stdcall;
    function Verbs(var ppfic: FolderItemVerbs): HRESULT; stdcall;
    function InvokeVerb(vVerb: OleVariant): HRESULT; stdcall;
  end;
  {$EXTERNALSYM FolderItem}

{ interface FolderItems }
  FolderItems = interface(IDispatch)
    [SID_FolderItems]
    function get_Count(var plCount: Integer): HRESULT; stdcall;
    function get_Application(var ppid: IDispatch): HRESULT; stdcall;
    function get_Parent(var ppid: IDispatch): HRESULT; stdcall;
    function Item(index: OleVariant; var ppid: FolderItem): HRESULT; stdcall;
    function _NewEnum(var ppunk: IUnknown): HRESULT; stdcall;
  end;
  {$EXTERNALSYM FolderItems}

{ interface FolderItemVerb }
  FolderItemVerb = interface(IDispatch)
    [SID_FolderItemVerb]
    function get_Application(var ppid: IDispatch): HRESULT; stdcall;
    function get_Parent(var ppid: IDispatch): HRESULT; stdcall;
    function get_Name(var pbs: WideString): HRESULT; stdcall;
    function DoIt: HRESULT; stdcall;
  end;
  {$EXTERNALSYM FolderItemVerb}

{ interface FolderItemVerbs }
  FolderItemVerbs = interface(IDispatch)
    [SID_FolderItemVerbs]
    function get_Count(var plCount: Integer): HRESULT; stdcall;
    function get_Application(var ppid: IDispatch): HRESULT; stdcall;
    function get_Parent(var ppid: IDispatch): HRESULT; stdcall;
    function Item(index: OleVariant; var ppid: FolderItemVerb): HRESULT; stdcall;
    function _NewEnum(var ppunk: IUnknown): HRESULT; stdcall;
  end;
  {$EXTERNALSYM FolderItemVerbs}

{ interface Folder }
  Folder = interface(IDispatch)
    [SID_Folder]
    function get_Title(var pbs: WideString): HRESULT; stdcall;
    function get_Application(var ppid: IDispatch): HRESULT; stdcall;
    function get_Parent(var ppid: IDispatch): HRESULT; stdcall;
    function get_ParentFolder(var ppsf: Folder): HRESULT; stdcall;
    function Items(var ppid: FolderItems): HRESULT; stdcall;
    function ParseName(bName: WideString; var ppid: FolderItem): HRESULT; stdcall;
    function NewFolder(bName: WideString; vOptions: OleVariant): HRESULT; stdcall;
    function MoveHere(vItem: OleVariant; vOptions: OleVariant): HRESULT; stdcall;
    function CopyHere(vItem: OleVariant; vOptions: OleVariant): HRESULT; stdcall;
    function GetDetailsOf(vItem: OleVariant; iColumn: Integer;
      var pbs: WideString): HRESULT; stdcall;
  end;
  {$EXTERNALSYM Folder}

{ interface Folder2 }
  Folder2 = interface(Folder)
    [SID_Folder2]
    function get_Self(var ppfi: FolderItem): HRESULT; stdcall;
    function get_OfflineStatus(var pul: Integer): HRESULT; stdcall;
    function Synchronize: HRESULT; stdcall;
    function get_HaveToShowWebViewBarricade(
      var pbHaveToShowWebViewBarricade: VARIANT_BOOL): HRESULT; stdcall;
    function DismissedWebViewBarricade: HRESULT; stdcall;
  end;
  {$EXTERNALSYM Folder2}

{ interface Folder3 }
  Folder3 = interface(Folder2)
    [SID_Folder3]
    function get_ShowWebViewBarricade(
      var pbShowWebViewBarricade: VARIANT_BOOL): HRESULT; stdcall;
    function put_ShowWebViewBarricade(
      bShowWebViewBarricade: VARIANT_BOOL): HRESULT; stdcall;
  end;
  {$EXTERNALSYM Folder3}

{ interface FolderItem2 }
  FolderItem2 = interface(FolderItem)
    [SID_FolderItem2]
    function InvokeVerbEx(vVerb: OleVariant; vArgs: OleVariant): HRESULT; stdcall;
    function ExtendedProperty(bstrPropName: WideString;
      var pvRet: OleVariant): HRESULT; stdcall;
  end;
  {$EXTERNALSYM FolderItem2}

{ interface FolderItems2 }
  FolderItems2 = interface(FolderItems)
    [SID_FolderItems2]
    function InvokeVerbEx(vVerb: OleVariant; vArgs: OleVariant): HRESULT; stdcall;
  end;
  {$EXTERNALSYM FolderItems2}

{ interface FolderItems3 }
  FolderItems3 = interface(FolderItems2)
    [SID_FolderItems3]
    function Filter(grfFlags: Integer; bstrFileSpec: WideString): HRESULT; stdcall;
    function get_Verbs(var ppfic: FolderItemVerbs): HRESULT; stdcall;
  end;
  {$EXTERNALSYM FolderItems3}

{ interface IShellLinkDual }
  IShellLinkDual = interface(IDispatch)
    [SID_IShellLinkDual]
    function get_Path(var pbs: WideString): HRESULT; stdcall;
    function put_Path(bs: WideString): HRESULT; stdcall;
    function get_Description(var pbs: WideString): HRESULT; stdcall;
    function put_Description(bs: WideString): HRESULT; stdcall;
    function get_WorkingDirectory(var pbs: WideString): HRESULT; stdcall;
    function put_WorkingDirectory(bs: WideString): HRESULT; stdcall;
    function get_Arguments(var pbs: WideString): HRESULT; stdcall;
    function put_Arguments(bs: WideString): HRESULT; stdcall;
    function get_Hotkey(var piHK: Integer): HRESULT; stdcall;
    function put_Hotkey(iHK: Integer): HRESULT; stdcall;
    function get_ShowCommand(var piShowCommand: Integer): HRESULT; stdcall;
    function put_ShowCommand(iShowCommand: Integer): HRESULT; stdcall;
    function Resolve(fFlags: Integer): HRESULT; stdcall;
    function GetIconLocation(var pbs: WideString; var piIcon: Integer): HRESULT; stdcall;
    function SetIconLocation(bs: WideString; iIcon: Integer): HRESULT; stdcall;
    function Save(vWhere: OleVariant): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IShellLinkDual}

{ interface IShellLinkDual2 }
  IShellLinkDual2 = interface(IShellLinkDual)
    [SID_IShellLinkDual2]
    function get_Target(var ppfi: FolderItem): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IShellLinkDual2}

{ interface IShellFolderViewDual }
  IShellFolderViewDual = interface(IDispatch)
    [SID_IShellFolderViewDual]
    function get_Application(var ppid: IDispatch): HRESULT; stdcall;
    function get_Parent(var ppid: IDispatch): HRESULT; stdcall;
    function get_Folder(var ppid: Folder): HRESULT; stdcall;
    function SelectedItems(var ppid: FolderItems): HRESULT; stdcall;
    function get_FocusedItem(var ppid: FolderItem): HRESULT; stdcall;
    function SelectItem(var pvfi: OleVariant; dwFlags: Integer): HRESULT; stdcall;
    function PopupItemMenu(pfi: FolderItem; vx, vy: OleVariant;
      var pbs: WideString): HRESULT; stdcall;
    function get_Script(var ppDisp: IDispatch): HRESULT; stdcall;
    function get_ViewOptions(var plViewOptions: Integer): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IShellFolderViewDual}

{ interface IShellFolderViewDual2 }
  IShellFolderViewDual2 = interface(IShellFolderViewDual)
    [SID_IShellFolderViewDual2]
    function get_CurrentViewMode(var pViewMode: UINT): HRESULT; stdcall;
    function put_CurrentViewMode(ViewMode: UINT): HRESULT; stdcall;
    function SelectItemRelative(iRelative: Integer): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IShellFolderViewDual2}

{ interface IShellFolderViewDual3 }
  IShellFolderViewDual3 = interface(IShellFolderViewDual2)
    [SID_IShellFolderViewDual3]
    function get_GroupBy(var pbstrGroupBy: WideString): HRESULT; stdcall;
    function put_GroupBy(bstrGroupBy: WideString): HRESULT; stdcall;
    function get_FolderFlags(var pdwFlags: DWORD): HRESULT; stdcall;
    function put_FolderFlags(dwFlags: DWORD): HRESULT; stdcall;
    function get_SortColumns(var pbstrSortColumns: WideString): HRESULT; stdcall;
    function put_SortColumns(bstrSortColumns: WideString): HRESULT; stdcall;
    function put_IconSize(iIconSize: Integer): HRESULT; stdcall;
    function get_IconSize(var piIconSize: Integer): HRESULT; stdcall;
    function FilterView(bstrFilterText: WideString): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IShellFolderViewDual3}

{ interface IShellDispatch }
  IShellDispatch = interface(IDispatch)
    [SID_IShellDispatch]
    function get_Application(var ppid: IDispatch): HRESULT; stdcall;
    function get_Parent(var ppid: IDispatch): HRESULT; stdcall;
    function NameSpace(vDir: OleVariant; var ppsdf: Folder): HRESULT; stdcall;
    function BrowseForFolder(Hwnd: Integer; Title: WideString; Options: Integer;
      RootFolder: OleVariant; var ppsdf: Folder): HRESULT; stdcall;
    function Windows(var ppid: IDispatch): HRESULT; stdcall;
    function Open(vDir: OleVariant): HRESULT; stdcall;
    function Explore(vDir: OleVariant): HRESULT; stdcall;
    function MinimizeAll: HRESULT; stdcall;
    function UndoMinimizeALL: HRESULT; stdcall;
    function FileRun: HRESULT; stdcall;
    function CascadeWindows: HRESULT; stdcall;
    function TileVertically: HRESULT; stdcall;
    function TileHorizontally: HRESULT; stdcall;
    function ShutdownWindows: HRESULT; stdcall;
    function Suspend: HRESULT; stdcall;
    function EjectPC: HRESULT; stdcall;
    function SetTime: HRESULT; stdcall;
    function TrayProperties: HRESULT; stdcall;
    function Help: HRESULT; stdcall;
    function FindFiles: HRESULT; stdcall;
    function FindComputer: HRESULT; stdcall;
    function RefreshMenu: HRESULT; stdcall;
    function ControlPanelItem(bstrDir: WideString): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IShellDispatch}

{ interface IShellDispatch2 }
  IShellDispatch2 = interface(IShellDispatch)
    [SID_IShellDispatch2]
    function IsRestricted(Group: WideString; Restriction: WideString;
      var plRestrictValue: Integer): HRESULT; stdcall;
    function ShellExecute(&File: WideString; vArgs, vDir, vOperation,
      vShow: OleVariant): HRESULT; stdcall;
    function FindPrinter(name: WideString; location: WideString;
      model: WideString): HRESULT; stdcall;
    function GetSystemInformation(name: WideString;
      var pv: OleVariant): HRESULT; stdcall;
    function ServiceStart(ServiceName: WideString; Persistent: OleVariant;
      var pSuccess: OleVariant): HRESULT; stdcall;
    function ServiceStop(ServiceName: WideString; Persistent: OleVariant;
      var pSuccess: OleVariant): HRESULT; stdcall;
    function IsServiceRunning(ServiceName: WideString;
      var pRunning: OleVariant): HRESULT; stdcall;
    function CanStartStopService(ServiceName: WideString;
      var CanStartStop: OleVariant): HRESULT; stdcall;
    function ShowBrowserBar(bstrClsid: WideString; bShow: OleVariant;
      var Success: OleVariant): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IShellDispatch2}

{ interface IShellDispatch3 }
  IShellDispatch3 = interface(IShellDispatch2)
    [SID_IShellDispatch3]
    function AddToRecent(varFile: OleVariant;
      bstrCategory: WideString): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IShellDispatch3}

{ interface IShellDispatch4 }
  IShellDispatch4 = interface(IShellDispatch3)
    [SID_IShellDispatch4]
    function WindowsSecurity: HRESULT; stdcall;
    function ToggleDesktop: HRESULT; stdcall;
    function ExplorerPolicy(bstrPolicyName: WideString;
      var pValue: OleVariant): HRESULT; stdcall;
    function GetSetting(lSetting: Integer;
      var pResult: VARIANT_BOOL): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IShellDispatch4}

{ interface IShellDispatch5 }
  IShellDispatch5 = interface(IShellDispatch4)
    [SID_IShellDispatch5]
    function WindowSwitcher: HRESULT; stdcall; { [helpstring] }
  end;
  {$EXTERNALSYM IShellDispatch5}

{ interface IFileSearchBand }
  IFileSearchBand = interface(IDispatch)
    [SID_IFileSearchBand]
    function SetFocus: HRESULT; stdcall; { [helpstring][id] }
    function SetSearchParameters(var pbstrSearchID: WideString;
      bNavToResults: VARIANT_BOOL; var pvarScope: OleVariant;
      var pvarQueryFile: OleVariant): HRESULT; stdcall;
    function get_SearchID(var pbstrSearchID: WideString): HRESULT; stdcall;
    function get_Scope(var pvarScope: OleVariant): HRESULT; stdcall;
    function get_QueryFile(var pvarFile: OleVariant): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IFileSearchBand}

{ interface IWebWizardHost }
  IWebWizardHost = interface(IDispatch)
    [SID_IWebWizardHost]
    function FinalBack: HRESULT; stdcall; { [id] }
    function FinalNext: HRESULT; stdcall; { [id] }
    function Cancel: HRESULT; stdcall; { [id] }
    function put_Caption(bstrCaption: WideString): HRESULT; stdcall;
    function get_Caption(var pbstrCaption: WideString): HRESULT; stdcall;
    function put_Property(bstrPropertyName: WideString;
      var pvProperty: OleVariant): HRESULT; stdcall;
    function get_Property(bstrPropertyName: WideString;
      var pvProperty: OleVariant): HRESULT; stdcall;
    function SetWizardButtons(vfEnableBack: VARIANT_BOOL;
      vfEnableNext: VARIANT_BOOL; vfLastPage: VARIANT_BOOL): HRESULT; stdcall;
    function SetHeaderText(bstrHeaderTitle: WideString;
      bstrHeaderSubtitle: WideString): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IWebWizardHost}

{ interface INewWDEvents }
  INewWDEvents = interface(IWebWizardHost)
    [SID_INewWDEvents]
    function PassportAuthenticate(bstrSignInUrl: WideString;
      var pvfAuthenitcated: VARIANT_BOOL): HRESULT; stdcall;
  end;
  {$EXTERNALSYM INewWDEvents}

// -------------------------------------------------------------------------
//
// IAutoComplete interface
//
//
// [Member functions]
//
// IAutoComplete::Init(hwndEdit, punkACL, pwszRegKeyPath, pwszQuickComplete)
//   This function initializes an AutoComplete object, telling it
//   what control to subclass, and what list of strings to process.
//
// IAutoComplete::Enable(fEnable)
//   This function enables or disables the AutoComplete functionality.
//
// -------------------------------------------------------------------------
  IAutoComplete = interface(IUnknown)
    [SID_IAutoComplete]
    function Init(hwndEdit: HWND; punkACL: IUnknown; pwszRegKeyPath: LPCWSTR;
      pwszQuickComplete: LPCWSTR): HRESULT; stdcall;
    function Enable(fEnable: BOOL): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IAutoComplete}

{ interface IAutoComplete2 }
const
  ACO_NONE               = 0;
  {$EXTERNALSYM ACO_NONE}
  ACO_AUTOSUGGEST        = $1;
  {$EXTERNALSYM ACO_AUTOSUGGEST}
  ACO_AUTOAPPEND         = $2;
  {$EXTERNALSYM ACO_AUTOAPPEND}
  ACO_SEARCH             = $4;
  {$EXTERNALSYM ACO_SEARCH}
  ACO_FILTERPREFIXES     = $8;
  {$EXTERNALSYM ACO_FILTERPREFIXES}
  ACO_USETAB             = $10;
  {$EXTERNALSYM ACO_USETAB}
  ACO_UPDOWNKEYDROPSLIST = $20;
  {$EXTERNALSYM ACO_UPDOWNKEYDROPSLIST}
  ACO_RTLREADING         = $40;
  {$EXTERNALSYM ACO_RTLREADING}
  ACO_WORD_FILTER        = $80;
  {$EXTERNALSYM ACO_WORD_FILTER}
  ACO_NOPREFIXFILTERING  = $100; 
  {$EXTERNALSYM ACO_NOPREFIXFILTERING}

type
  IAutoComplete2 = interface(IAutoComplete)
    [SID_IAutoComplete2]
    function SetOptions(dwFlag: DWORD): HRESULT; stdcall;
    function GetOptions(var pdwFlag: DWORD): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IAutoComplete2}

// INTERFACE: IEnumACString
// 
// This interface was implemented to return autocomplete strings
// into the caller's buffer (to reduce the number of memory allocations).
// A sort index is also returned to control the order of items displayed.
// by autocomplete.  The sort index should be set to zero if unused.
// 
// The NextItem method increments the current index by one (similar to Next
// when one item is requested).
// 

type
  ACENUMOPTION = type Integer;
  {$EXTERNALSYM ACENUMOPTION}
const
  ACEO_NONE            = 0;
  {$EXTERNALSYM ACEO_NONE}
  ACEO_MOSTRECENTFIRST = $1;
  {$EXTERNALSYM ACEO_MOSTRECENTFIRST}
  ACEO_FIRSTUNUSED     = $10000;
  {$EXTERNALSYM ACEO_FIRSTUNUSED}

type
  IEnumACString = interface(IEnumString) 
    [SID_IEnumACString]
    function NextItem(pszUrl: LPWSTR; cchMax: Cardinal;
      var pulSortIndex: Cardinal): HRESULT; stdcall;
    function SetEnumOptions(dwOptions: DWORD): HRESULT; stdcall;
    function GetEnumOptions(var pdwOptions: DWORD): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IEnumACString}

// INTERFACE: IAsyncOperation
// 
// This interface was implemented to turn some previously synchronous
// interfaces into async.  The following example is for
// doing the IDataObject::Drop() operation asynchronously.
// 
// Sometimes the rendering of the IDataObject data (IDataObject::GetData() or
// STGMEDIUM.pStream->Read()) can be time intensive.  The IDropTarget
// may want to do this on another thread.
// 
// Implimentation Check list:
// DoDragDrop Caller:
//    If this code can support asynch operations, then it needs to
//    QueryInterface() the IDataObject for IAsyncOperation.
//    IAsyncOperation::SetAsyncMode(VARIANT_TRUE).
//    After calling DoDragDrop(), call InOperation().  If any call fails
//    or InOperation() return FALSE, use the pdwEffect returned by DoDragDrop()
//    and the operation completed synchrously.
//
// OleSetClipboard Caller:
//    If this code can support asynch operations, then it needs to
//    QueryInterface() the IDataObject for IAsyncOperation.  Then call
//    IAsyncOperation::SetAsyncMode(VARIANT_TRUE).
//    If any of that fails, the final dwEffect should be passed to the IDataObject via
//    CFSTR_PERFORMEDDROPEFFECT.
//
// IDataObect Object:
//    IAsyncOperation::GetAsyncMode() should return whatever was last passed in
//          fDoOpAsync to ::SetAsyncMode() or VARIANT_FALSE if ::SetAsyncMode()
//          was never called.
//    IAsyncOperation::SetAsyncMode() should AddRef and store paocb.
//    IAsyncOperation::StartOperation() should store the fact that this was called and
//          cause InOperation() to return VARIANT_TRUE.  pbcReserved is not used and needs
//          to be NULL.
//    IAsyncOperation::InOperation() should return VARIANT_TRUE only if ::StartOperation()
//          was called.
//    IAsyncOperation::EndOperation() needs to call paocbpaocb->EndOperation() with the same
//          parameters.  Then release paocb.
//    IDataObject::SetData(CFSTR_PERFORMEDDROPEFFECT) When this happens, call
//          EndOperation(<into VAR>S_OK, NULL, <into VAR>dwEffect) and pass the dwEffect from the hglobal.
//
// IDropTarget Object:
//    IDropTarget::Drop() If asynch operations aren't supported, nothing is required.
//          The asynch operation can only happen if GetAsyncMode() returns VARIANT_TRUE.
//          Before starting the asynch operation, StartOperation(NULL) needs to be called before
//          returning from IDropTarget::Drop().
  IAsyncOperation = interface(IUnknown)
    [SID_IAsyncOperation]
    function SetAsyncMode(fDoOpAsync: BOOL): HRESULT; stdcall;
    function GetAsyncMode(var pfIsOpAsync: Bool): HRESULT; stdcall;
    function StartOperation(pbcReserved: IBindCtx): HRESULT; stdcall;
    function InOperation(var pfInAsyncOp: Bool): HRESULT; stdcall;
    function EndOperation(hResult: HRESULT; pbcReserved: IBindCtx;
      dwEffects: DWORD): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IAsyncOperation}

{$POINTERMATH OFF}

implementation

const
  shell32 = 'shell32.dll';
  shdocvw = 'shdocvw.dll';
  mydocs = 'mydocs.dll';

procedure SHAddToRecentDocs;                      external shell32 name 'SHAddToRecentDocs';
function SHBrowseForFolder;                      external shell32 name 'SHBrowseForFolderW';
function SHBrowseForFolderA;                      external shell32 name 'SHBrowseForFolderA';
function SHBrowseForFolderW;                      external shell32 name 'SHBrowseForFolderW';
procedure SHChangeNotify;                         external shell32 name 'SHChangeNotify';
function SHGetDataFromIDList;                    external shell32 name 'SHGetDataFromIDListW';
function SHGetDataFromIDListA;                    external shell32 name 'SHGetDataFromIDListA';
function SHGetDataFromIDListW;                    external shell32 name 'SHGetDataFromIDListW';
function SHGetDesktopFolder;                      external shell32 name 'SHGetDesktopFolder';
function SHGetInstanceExplorer;                   external shell32 name 'SHGetInstanceExplorer';
function SHGetMalloc;                             external shell32 name 'SHGetMalloc';
function SHGetPathFromIDList;                    external shell32 name 'SHGetPathFromIDListW';
function SHGetPathFromIDListA;                    external shell32 name 'SHGetPathFromIDListA';
function SHGetPathFromIDListW;                    external shell32 name 'SHGetPathFromIDListW';
function SHGetFolderLocation;                     external shell32 name 'SHGetFolderLocation';
function SHGetSpecialFolderLocation;              external shell32 name 'SHGetSpecialFolderLocation';
function SHLoadInProc;                            external shell32 name 'SHLoadInProc';
function SHGetSpecialFolderPath;                 external shell32 name 'SHGetSpecialFolderPathW'
function SHGetSpecialFolderPathA;                 external shell32 name 'SHGetSpecialFolderPathA'
function SHGetSpecialFolderPathW;                 external shell32 name 'SHGetSpecialFolderPathW'
procedure SHGetSettings;                          external shell32 name 'SHGetSettings';
function SoftwareUpdateMessageBox;                external shell32 name 'SoftwareUpdateMessageBox';


function SHGetItemFromObject;                     external shell32 name 'SHGetItemFromObject' delayed; //Win7
function SHGetItemFromDataObject;                 external shell32 name 'SHGetItemFromDataObject' delayed; //Win7

function SHCreateShellItemArray;                  external shell32 name 'SHCreateShellItemArray' delayed;
function SHCreateShellItemArrayFromDataObject;    external shell32 name 'SHCreateShellItemArrayFromDataObject' delayed;
function SHCreateShellItemArrayFromIDLists;       external shell32 name 'SHCreateShellItemArrayFromIDLists' delayed;
function SHCreateShellItemArrayFromShellItem;     external shell32 name 'SHCreateShellItemArrayFromShellItem' delayed;

function SHRemovePersonalPropertyValues;          external shell32 name 'SHRemovePersonalPropertyValues'; //???
function SHAddDefaultPropertiesByExt;             external shell32 name 'SHAddDefaultPropertiesByExt' delayed;
function SHSetDefaultProperties;                  external shell32 name 'SHSetDefaultProperties' delayed;

function SHCreateDefaultPropertiesOp;             external shell32 name 'SHCreateDefaultPropertiesOp' delayed;
function SHCreateAssociationRegistration;         external shell32 name 'SHCreateAssociationRegistration' delayed;

function SHCreateDefaultExtractIcon;              external shell32 name 'SHCreateDefaultExtractIcon' delayed;

function SetCurrentProcessExplicitAppUserModelID; external shell32 name 'SetCurrentProcessExplicitAppUserModelID' delayed; //Win7
function GetCurrentProcessExplicitAppUserModelID; external shell32 name 'GetCurrentProcessExplicitAppUserModelID' delayed; //Win7

function SHGetTemporaryPropertyForItem;           external shell32 name 'SHGetTemporaryPropertyForItem' delayed;
function SHSetTemporaryPropertyForItem;           external shell32 name 'SHSetTemporaryPropertyForItem' delayed;

function SHShowManageLibraryUI;                   external shell32 name 'SHShowManageLibraryUI' delayed; //Win7
function SHResolveLibrary;                        external shell32 name 'SHResolveLibrary' delayed; //Win7

function SHAssocEnumHandlers;                     external shell32 name 'SHAssocEnumHandlers';
function SHAssocEnumHandlersForProtocolByApplication; external shell32 name 'SHAssocEnumHandlersForProtocolByApplication' delayed; //Win7

function SHCreateItemFromIDList;                  external shell32 name 'SHCreateItemFromIDList' delayed;
function SHCreateItemFromParsingName;             external shell32 name 'SHCreateItemFromParsingName' delayed;
function SHCreateItemWithParent;                  external shell32 name 'SHCreateItemWithParent' delayed;
function SHCreateItemFromRelativeName;            external shell32 name 'SHCreateItemFromRelativeName' delayed;
function SHCreateItemInKnownFolder;               external shell32 name 'SHCreateItemInKnownFolder' delayed;
function SHGetIDListFromObject;                   external shell32 name 'SHGetIDListFromObject' delayed;
function SHGetPropertyStoreFromIDList;            external shell32 name 'SHGetPropertyStoreFromIDList' delayed;
function SHGetPropertyStoreFromParsingName;       external shell32 name 'SHGetPropertyStoreFromParsingName' delayed;
function SHGetNameFromIDList;                     external shell32 name 'SHGetNameFromIDList' delayed;

function DoPrivacyDlg;                            external shdocvw name 'DoPrivacyDlg';
function StgMakeUniqueName;                       external shell32 name 'StgMakeUniqueName' delayed;
function ImportPrivacySettings;                   external shdocvw name 'ImportPrivacySettings';

function PerUserInit;                             external mydocs name 'PerUserInit';                   

function ILLoadFromStream;                        external shell32 name 'ILLoadFromStream';
function PathProcessCommand;                      external shell32 name 'PathProcessCommand';
function SHCLSIDFromString;                       external shell32 name 'SHCLSIDFromString';
function SHCreateFileExtractIcon;                external shell32 name 'SHCreateFileExtractIconW';
function SHCreateFileExtractIconA;                external shell32 name 'SHCreateFileExtractIconA';
function SHCreateFileExtractIconW;                external shell32 name 'SHCreateFileExtractIconW';
function Shell_GetCachedImageIndex;              external shell32 name 'Shell_GetCachedImageIndexW';
function Shell_GetCachedImageIndexA;              external shell32 name 'Shell_GetCachedImageIndexA';
function Shell_GetCachedImageIndexW;              external shell32 name 'Shell_GetCachedImageIndexW';
function Shell_GetImageLists;                     external shell32 name 'Shell_GetImageLists' delayed;
function Shell_MergeMenus;                        external shell32 name 'Shell_MergeMenus' delayed;
function SHFindFiles;                             external shell32 name 'SHFindFiles' delayed;
function SHLoadOLE;                               external shell32 name 'SHLoadOLE';
function SHOpenPropSheet;                        external shell32 name 'SHOpenPropSheetW';
function SHOpenPropSheetA;                        external shell32 name 'SHOpenPropSheetA';
function SHOpenPropSheetW;                        external shell32 name 'SHOpenPropSheetW';
function SHRunControlPanel;                       external shell32 name 'SHRunControlPanel' delayed;
function SHStartNetConnectionDialog;             external shell32 name 'SHStartNetConnectionDialogW';
function SHStartNetConnectionDialogA;             external shell32 name 'SHStartNetConnectionDialogA';
function SHStartNetConnectionDialogW;             external shell32 name 'SHStartNetConnectionDialogW';

function AssocGetDetailsOfPropKey;                external shell32 name 'AssocGetDetailsOfPropKey' delayed;
function CDefFolderMenu_Create2;                  external shell32 name 'CDefFolderMenu_Create2';
function CIDLData_CreateFromIDArray;              external shell32 name 'CIDLData_CreateFromIDArray';
function DAD_AutoScroll;                          external shell32 name 'DAD_AutoScroll';
function DAD_DragEnterEx(hwndTarget: HWND;
  ptStart: PPoint): BOOL;                         external shell32 name 'DAD_DragEnterEx';
function DAD_DragEnterEx(hwndTarget: HWND;
  const ptStart: TPoint): BOOL;
begin
  Result := DAD_DragEnterEx(hwndTarget, @ptStart);
end;
function DAD_DragEnterEx2(hwndTarget: HWND; ptStart: PPoint;
  const pdtObject: IDataObject): BOOL;            external shell32 name 'DAD_DragEnterEx2';
function DAD_DragEnterEx2(hwndTarget: HWND; const ptStart: TPoint;
  const pdtObject: IDataObject): BOOL;
begin
  Result := DAD_DragEnterEx2(hwndTarget, @ptStart, pdtObject);
end;
function DAD_DragLeave;                           external shell32 name 'DAD_DragLeave';
function DAD_DragMove;                            external shell32 name 'DAD_DragMove';
function DAD_SetDragImage;                        external shell32 name 'DAD_SetDragImage';
function DAD_ShowDragImage;                       external shell32 name 'DAD_ShowDragImage';
function DriveType;                               external shell32 name 'DriveType';
function GetFileNameFromBrowse;                   external shell32 name 'GetFileNameFromBrowse';
function ILAppendID;                              external shell32 name 'ILAppendID';
function ILClone;                                 external shell32 name 'ILClone';
function ILCloneFirst;                            external shell32 name 'ILCloneFirst';
function ILCombine;                               external shell32 name 'ILCombine';
function ILCreateFromPath;                       external shell32 name 'ILCreateFromPathW';
function ILCreateFromPathA;                       external shell32 name 'ILCreateFromPathA';
function ILCreateFromPathW;                       external shell32 name 'ILCreateFromPathW';
function ILFindChild;                             external shell32 name 'ILFindChild';
function ILFindLastID;                            external shell32 name 'ILFindLastID';
procedure ILFree;                                 external shell32 name 'ILFree';
function ILGetNext;                               external shell32 name 'ILGetNext';
function ILGetSize;                               external shell32 name 'ILGetSize';
function ILIsEqual;                               external shell32 name 'ILIsEqual';
function ILIsParent;                              external shell32 name 'ILIsParent';
function ILLoadFromStreamEx;                      external shell32 name 'ILLoadFromStreamEx' delayed;
function ILRemoveLastID;                          external shell32 name 'ILRemoveLastID';
function ILSaveToStream;                          external shell32 name 'ILSaveToStream';
function IsNetDrive;                              external shell32 name 'IsNetDrive';
function IsUserAnAdmin;                           external shell32 name 'IsUserAnAdmin';
function OpenRegStream;                           external shell32 name 'OpenRegStream';
function PathCleanupSpec;                         external shell32 name 'PathCleanupSpec';
procedure PathGetShortPath;                       external shell32 name 'PathGetShortPath';
function PathIsExe;                               external shell32 name 'PathIsExe';
function PathIsSlow;                             external shell32 name 'PathIsSlowW';
function PathIsSlowA;                             external shell32 name 'PathIsSlowA';
function PathIsSlowW;                             external shell32 name 'PathIsSlowW';
function PathMakeUniqueName;                      external shell32 name 'PathMakeUniqueName';
procedure PathQualify;                            external shell32 name 'PathQualify'; //???
function PathResolve;                             external shell32 name 'PathResolve';
function PathYetAnotherMakeUniqueName;            external shell32 name 'PathYetAnotherMakeUniqueName';
function PickIconDlg;                             external shell32 name 'PickIconDlg' delayed;
function PifMgr_CloseProperties;                  external shell32 name 'PifMgr_CloseProperties';
function PifMgr_GetProperties;                    external shell32 name 'PifMgr_GetProperties';
function PifMgr_OpenProperties;                   external shell32 name 'PifMgr_OpenProperties';
function PifMgr_SetProperties;                    external shell32 name 'PifMgr_SetProperties';
function ReadCabinetState;                        external shell32 name 'ReadCabinetState';
function RealDriveType;                           external shell32 name 'RealDriveType';
function RestartDialog;                           external shell32 name 'RestartDialog';
function RestartDialogEx;                         external shell32 name 'RestartDialogEx';
function SHAddFromPropSheetExtArray;              external shell32 name 'SHAddFromPropSheetExtArray';
function SHAlloc;                                 external shell32 name 'SHAlloc';
function SHBindToFolderIDListParent;              external shell32 name 'SHBindToFolderIDListParent' delayed;
function SHBindToFolderIDListParentEx;            external shell32 name 'SHBindToFolderIDListParentEx' delayed;
function SHBindToObject;                          external shell32 name 'SHBindToObject' delayed;
function SHBindToParent;                          external shell32 name 'SHBindToParent';
function SHChangeNotification_Lock;               external shell32 name 'SHChangeNotification_Lock';
function SHChangeNotification_Unlock;             external shell32 name 'SHChangeNotification_Unlock';
function SHChangeNotifyDeregister;                external shell32 name 'SHChangeNotifyDeregister';
function SHChangeNotifyRegister;                  external shell32 name 'SHChangeNotifyRegister';
function SHCloneSpecialIDList;                    external shell32 name 'SHCloneSpecialIDList';
function SHCoCreateInstance;                      external shell32 name 'SHCoCreateInstance';
function SHCreateDataObject;                      external shell32 name 'SHCreateDataObject' delayed;
function SHCreateDefaultContextMenu;              external shell32 name 'SHCreateDefaultContextMenu' delayed;
function SHCreateDirectory;                       external shell32 name 'SHCreateDirectory';
function SHCreateDirectoryEx;                    external shell32 name 'SHCreateDirectoryExW';
function SHCreateDirectoryExA;                    external shell32 name 'SHCreateDirectoryExA';
function SHCreateDirectoryExW;                    external shell32 name 'SHCreateDirectoryExW';
function SHCreatePropSheetExtArray;               external shell32 name 'SHCreatePropSheetExtArray';
function SHCreateQueryCancelAutoPlayMoniker;      external shell32 name 'SHCreateQueryCancelAutoPlayMoniker' delayed;
function SHCreateShellFolderView;                 external shell32 name 'SHCreateShellFolderView';
function SHCreateShellFolderViewEx;               external shell32 name 'SHCreateShellFolderViewEx';
function SHCreateShellItem;                       external shell32 name 'SHCreateShellItem';
function SHCreateStdEnumFmtEtc;                   external shell32 name 'SHCreateStdEnumFmtEtc';
function SHDefExtractIcon;                       external shell32 name 'SHDefExtractIconW' delayed;
function SHDefExtractIconA;                       external shell32 name 'SHDefExtractIconA' delayed;
function SHDefExtractIconW;                       external shell32 name 'SHDefExtractIconW' delayed;
procedure SHDestroyPropSheetExtArray;             external shell32 name 'SHDestroyPropSheetExtArray';
function SHDoDragDrop;                            external shell32 name 'SHDoDragDrop' delayed;
function SHFind_InitMenuPopup;                    external shell32 name 'SHFind_InitMenuPopup' delayed;
procedure SHFlushSFCache;                         external shell32 name 'SHFlushSFCache' delayed;
function SHFormatDrive;                           external shell32 name 'SHFormatDrive';
procedure SHFree;                                 external shell32 name 'SHFree';
function SHGetAttributesFromDataObject;           external shell32 name 'SHGetAttributesFromDataObject' delayed;
function SHGetFolderPath;                        external shell32 name 'SHGetFolderPathW';
function SHGetFolderPathA;                        external shell32 name 'SHGetFolderPathA';
function SHGetFolderPathW;                        external shell32 name 'SHGetFolderPathW';
function SHGetFolderPathAndSubDir;               external shell32 name 'SHGetFolderPathAndSubDirW' delayed;
function SHGetFolderPathAndSubDirA;               external shell32 name 'SHGetFolderPathAndSubDirA' delayed;
function SHGetFolderPathAndSubDirW;               external shell32 name 'SHGetFolderPathAndSubDirW' delayed;
function SHGetIconOverlayIndex;                  external shell32 name 'SHGetIconOverlayIndexW';
function SHGetIconOverlayIndexA;                  external shell32 name 'SHGetIconOverlayIndexA';
function SHGetIconOverlayIndexW;                  external shell32 name 'SHGetIconOverlayIndexW';
function SHGetKnownFolderIDList;                  external shell32 name 'SHGetKnownFolderIDList' delayed;
function SHGetKnownFolderItem;                    external shell32 name 'SHGetKnownFolderItem' delayed;
function SHGetKnownFolderPath;                    external shell32 name 'SHGetKnownFolderPath' delayed;
function SHGetPathFromIDListEx;                   external shell32 name 'SHGetPathFromIDListEx' delayed;
function SHGetRealIDL;                            external shell32 name 'SHGetRealIDL';
function SHGetSetFolderCustomSettings;            external shell32 name 'SHGetSetFolderCustomSettings' delayed;
procedure SHGetSetSettings;                       external shell32 name 'SHGetSetSettings';
function SHHandleUpdateImage;                     external shell32 name 'SHHandleUpdateImage';
function SHILCreateFromPath;                      external shell32 name 'SHILCreateFromPath';
function SHLimitInputEdit;                        external shell32 name 'SHLimitInputEdit';
function SHMapPIDLToSystemImageListIndex;         external shell32 name 'SHMapPIDLToSystemImageListIndex';
function SHMultiFileProperties;                   external shell32 name 'SHMultiFileProperties';
function SHObjectProperties;                      external shell32 name 'SHObjectProperties';
function SHOpenFolderAndSelectItems;              external shell32 name 'SHOpenFolderAndSelectItems' delayed;
function SHOpenWithDialog;                        external shell32 name 'SHOpenWithDialog' delayed;
function SHParseDisplayName;                      external shell32 name 'SHParseDisplayName' delayed;
function SHPathPrepareForWrite;                  external shell32 name 'SHPathPrepareForWriteW';
function SHPathPrepareForWriteA;                  external shell32 name 'SHPathPrepareForWriteA';
function SHPathPrepareForWriteW;                  external shell32 name 'SHPathPrepareForWriteW';
function SHPropStgCreate;                         external shell32 name 'SHPropStgCreate';
function SHPropStgReadMultiple;                   external shell32 name 'SHPropStgReadMultiple' delayed;
function SHPropStgWriteMultiple;                  external shell32 name 'SHPropStgWriteMultiple' delayed;
function SHReplaceFromPropSheetExtArray;          external shell32 name 'SHReplaceFromPropSheetExtArray';
function SHRestricted;                            external shell32 name 'SHRestricted';
function SHSetFolderPath;                        external shell32 name 'SHSetFolderPathW';
function SHSetFolderPathA;                        external shell32 name 'SHSetFolderPathA';
function SHSetFolderPathW;                        external shell32 name 'SHSetFolderPathW';
procedure SHSetInstanceExplorer;                  external shell32 name 'SHSetInstanceExplorer' delayed;
function SHSetKnownFolderPath;                    external shell32 name 'SHSetKnownFolderPath' delayed;
function SHShellFolderView_Message;               external shell32 name 'SHShellFolderView_Message';
function SHSimpleIDListFromPath;                  external shell32 name 'SHSimpleIDListFromPath';
procedure SHUpdateImage;                         external shell32 name 'SHUpdateImageW';
procedure SHUpdateImageA;                         external shell32 name 'SHUpdateImageA';
procedure SHUpdateImageW;                         external shell32 name 'SHUpdateImageW';
function SHValidateUNC;                           external shell32 name 'SHValidateUNC';
function SignalFileOpen;                          external shell32 name 'SignalFileOpen';
function Win32DeleteFile;                         external shell32 name 'Win32DeleteFile' delayed;
function WriteCabinetState;                       external shell32 name 'WriteCabinetState';

procedure FreeIDListArray(var ppidls: PIDLIST_RELATIVE; cItems: UINT);
var i: UINT;
begin for i := 0 to cItems do CoTaskMemFree(@ppidls[i]); end;

procedure FreeIDListArrayFull(var ppidls: PItemIDList; cItems: UINT);
var i: UINT;
begin
  for i := 0 to cItems do CoTaskMemFree(@ppidls[i]);
  CoTaskMemFree(ppidls);
end;

procedure FreeIDListArrayChild(var ppidls: PItemIDList; cItems: UINT);
var i: UINT;
begin
  for i := 0 to cItems do CoTaskMemFree(@ppidls[i]);
  CoTaskMemFree(ppidls);
end;

procedure FreeKnownFolderDefinitionFields(var pKFD: KNOWNFOLDER_DEFINITION);
begin
  CoTaskMemFree(pKFD.pszName);
  CoTaskMemFree(pKFD.pszDescription);
  CoTaskMemFree(pKFD.pszRelativePath);
  CoTaskMemFree(pKFD.pszParsingName);
  CoTaskMemFree(pKFD.pszTooltip);
  CoTaskMemFree(pKFD.pszLocalizedName);
  CoTaskMemFree(pKFD.pszIcon);
  CoTaskMemFree(pKFD.pszSecurity);
end;

function SHCreateLibrary(const riid: TIID; var ppv: Pointer): HResult;
begin
  Result := CoCreateInstance(CLSID_ShellLibrary, nil, CLSCTX_INPROC_SERVER, riid, ppv);
end;

function SHLoadLibraryFromItem(const psiLibrary: IShellItem; grfMode: DWORD;
  const riid: TIID; var ppv: Pointer): HResult;
var
  plib: ^IShellLibrary;
begin
  ppv := nil;
  Result := CoCreateInstance(CLSID_ShellLibrary, nil, CLSCTX_INPROC_SERVER,
    IID_IShellLibrary, plib);
  if Succeeded(Result) then
  begin
    Result := plib.LoadLibraryFromItem(psiLibrary, grfMode);
    if Succeeded(Result) then
    begin
      Result := plib.QueryInterface(riid, ppv);
    end;
    plib._Release();
  end;
end;

function SHLoadLibraryFromKnownFolder(const kfidLibrary: TIID; grfMode: DWORD;
  const riid: TIID; var ppv: Pointer): HResult;
var
  plib: ^IShellLibrary;
begin
  ppv := nil;
  Result := CoCreateInstance(CLSID_ShellLibrary, nil, CLSCTX_INPROC_SERVER,
    IID_IShellLibrary, plib);
  if Succeeded(Result) then
  begin
    Result := plib.LoadLibraryFromKnownFolder(kfidLibrary, grfMode);
    if Succeeded(Result) then
    begin
      Result := plib.QueryInterface(riid, ppv);
    end;
    plib._Release();
  end;
end;

function SHLoadLibraryFromParsingName(pszParsingName: LPCWSTR; grfMode: DWORD;
  const riid: TIID; var ppv: Pointer): HResult;
var
  psiLibrary: IShellItem;
begin
  ppv := nil;
  Result := SHCreateItemFromParsingName(pszParsingName, nil, IID_IShellItem, psiLibrary);
  if Succeeded(Result) then
  begin
    Result := SHLoadLibraryFromItem(psiLibrary, grfMode, riid, ppv);
    psiLibrary._Release();
  end;
end;

function SHAddFolderPathToLibrary(const plib: IShellLibrary;
  pszFolderPath: LPCWSTR): HResult;
var
  psiFolder: IShellItem;
begin
  Result := SHCreateItemFromParsingName(pszFolderPath, nil, IID_IShellItem, psiFolder);
  if Succeeded(Result) then
  begin
    Result := plib.AddFolder(psiFolder);
    psiFolder._Release();
  end;
end;

function SHRemoveFolderPathFromLibrary(const plib: IShellLibrary;
  pszFolderPath: LPCWSTR): HResult;
var
  pidlFolder: PIDLIST_ABSOLUTE;
  psiFolder: IShellItem;
begin
  pidlFolder := SHSimpleIDListFromPath(pszFolderPath);
  Result := E_INVALIDARG;
  if assigned(pidlFolder) then Result := S_OK;
  if Succeeded(Result) then
  begin
    Result := SHCreateItemFromIDList(PItemIDList(pidlFolder), IID_IShellItem, psiFolder);
    if Succeeded(Result) then
    begin
      Result := plib.RemoveFolder(psiFolder);
      plib._Release();
    end;
    CoTaskMemFree(pidlFolder);
  end;
end;

function SHResolveFolderPathInLibrary(const plib: IShellLibrary;
  pszFolderPath: LPCWSTR; dwTimeout: DWORD;
  var ppszResolvedPath: LPWSTR): HResult;
var
  pidlFolder: PIDLIST_ABSOLUTE;
  psiFolder: IShellItem;
  psiResolved: IShellItem;
begin
  ppszResolvedPath := nil;
  pidlFolder := SHSimpleIDListFromPath(pszFolderPath);
  Result := E_INVALIDARG;
  if assigned(pidlFolder) then Result := S_OK;
  if Succeeded(Result) then
  begin
    Result := SHCreateItemFromIDList(PItemIDList(pidlFolder), IID_IShellItem, psiFolder);
    if Succeeded(Result) then
    begin
      Result := plib.ResolveFolder(psiFolder, dwTimeout, IID_IShellItem, psiResolved);
      if Succeeded(Result) then
      begin
        Result := psiResolved.GetDisplayName(SIGDN_DESKTOPABSOLUTEPARSING, ppszResolvedPath);
        psiResolved._Release();
      end;
      psiFolder._Release();
    end;
    CoTaskMemFree(pidlFolder);
  end;
end;

function SHSaveLibraryInFolderPath(const plib: IShellLibrary;
  pszFolderPath: LPCWSTR; pszLibraryName: LPCWSTR; lsf: TLibrarySaveFlags;
  var ppszSavedToPath: LPWSTR): HResult;
var
  psiFolder: IShellItem;
  psiSavedTo: IShellItem;
begin
  ppszSavedToPath := nil;
  Result := SHCreateItemFromParsingName(pszFolderPath, nil, IID_IShellItem, psiFolder);
  if Succeeded(Result) then
  begin
    Result := plib.Save(psiFolder, pszLibraryName, lsf, psiSavedTo);
    if Succeeded(Result) then
    begin
      if assigned( psiSavedTo) then
      begin
         Result := psiSavedTo.GetDisplayName(SIGDN_DESKTOPABSOLUTEPARSING, ppszSavedToPath);
      end;
      psiFolder._Release();
    end;
  end;
end;

function ILCloneFull(pidl: PItemIDList): PItemIDList;
begin
  Result := PItemIDList(ILClone(pidl));
end;

function ILCloneChild(pidl: PItemIDList): PItemIDList; inline;
begin
  Result := ILCloneFirst(pidl);
end;

function VOID_OFFSET(pv: Pointer; cb: NativeUInt): Pointer;
begin
  Result := Pointer(UIntPtr(pv) + cb);
end;

function ILSkip(pidl: PItemIDList; cb: UINT): PItemIDList;
begin
  Result := PItemIDList(VOID_OFFSET(pidl, cb));
end;

function ILNext(pidl: PItemIDList): PItemIDList;
begin
  Result := ILSkip(pidl, pidl.mkid.cb);
end;

function ILIsAligned(pidl: PItemIDList): BOOL;
begin
  Result := ((DWORD_PTR(pidl) AND (sizeof(Pointer) - 1)) = 0);
end;

function ILIsEmpty(pidl: PItemIDList): BOOL;
begin
  Result := ((pidl = nil) OR (pidl.mkid.cb = 0));
end;

function ILIsChild(pidl: PItemIDList): BOOL;
begin
  Result := (ILIsEmpty(pidl) OR ILIsEmpty(ILNext(pidl)));
end;

// alreary defined as external function from shell32.dll
//function ILFindChild(pidlParent: PItemIDList; pidlChild: PItemIDList): PItemIDList;
//begin
//  Result := PItemIDList(ILFindChild(pidlParent, pidlChild));
//end;

//EXAMPLE: property fShowSuperHidden: BOOL Index $000F0001 read GetByte write SetByte; // mask $0001, offset 15
function tagSHELLSTATEW.GetByte(const index: Integer): BOOL;
begin
  Result := ((Data shr index) and $0001) <> 0;
end;
procedure tagSHELLSTATEW.SetByte(const index: Integer; value: BOOL);
var
  BValue: WORD;
begin
  BValue := 0;
  if value then BValue := (1 shl index);
  Data := ((Data and (not (1 shl index))) or BValue);
end;

function tagSHELLSTATEW.GetByte2(const index: Integer): BOOL;
begin
  Result := ((Data2 shr index) and $0001) <> 0;
end;
procedure tagSHELLSTATEW.SetByte2(const index: Integer; value: BOOL);
var
  BValue: Byte;
begin
  BValue := 0;
  if value then BValue := (1 shl index);
  Data2 := ((Data2 and (not (1 shl index))) or BValue);
end;

function tagSHELLSTATEW.GetByte3(const index: Integer): BOOL;
begin
  Result := ((fFlags shr index) and $0001) <> 0;
end;
procedure tagSHELLSTATEW.SetByte3(const index: Integer; value: BOOL);
var
  BValue: WORD;
begin
  BValue := 0;
  if value then BValue := (1 shl index);
  fFlags := ((fFlags and (not (1 shl index))) or BValue);
end;

// from fFlags: WORD;
// and  fFlags2: Byte;
// Example: property fSpareFlags: UINT Index $01FFC006 read GetByte4 write SetByte4;  // mask=$0001FFC0, offset=6
function tagSHELLSTATEW.GetByte4(const index: Integer): UINT;
var
  Sum, Sum1: UINT;
begin
  Sum := UINT(fFlags);
  Sum1 := UINT(fFlags2);
  Sum := Sum + (Sum1 shr 16);
  Result := Sum shr (index and $000F);
end;
procedure tagSHELLSTATEW.SetByte4(const index: Integer; value: UINT);
var
  Sum: UINT;
begin
  Sum := value;
  Sum := Sum shl (index and $000F); 
  fFlags := WORD(Sum);
  Sum := Sum shr 16;
  fFlags2 := Byte(Sum);
end;

function ShellFolderView_ReArrange(_hwnd: HWND; _lparam: LPARAM): BOOL;
begin
  Result := SHShellFolderView_Message(_hwnd, SFVM_REARRANGE, _lparam) <> 0;
end;

function ShellFolderView_AddObject(_hwnd: HWND; _pidl: LPARAM): LPARAM;
begin
  Result := LPARAM(SHShellFolderView_Message(_hwnd, SFVM_ADDOBJECT, _pidl));
end;

function ShellFolderView_RemoveObject(_hwnd: HWND; _pidl: LPARAM) : LPARAM;
begin
  Result := LPARAM(SHShellFolderView_Message(_hwnd, SFVM_REMOVEOBJECT, _pidl));
end;

function ShellFolderView_UpdateObject(_hwnd: HWND; _ppidl: LPARAM): LPARAM;
begin
  Result := LPARAM(SHShellFolderView_Message(_hwnd, SFVM_UPDATEOBJECT, _ppidl));
end;

function ShellFolderView_GetSelectedObjects(_hwnd: HWND; ppidl: LPARAM): LPARAM;
begin
  Result := LPARAM(SHShellFolderView_Message(_hwnd, SFVM_GETSELECTEDOBJECTS, ppidl));
end;

function ShellFolderView_SetItemPos(_hwnd: HWND; _pidl: LPARAM; _x, _y: Integer): LRESULT;
var
  _sip: SFV_SETITEMPOS;
begin
  _sip.pidl := PItemIDList(_pidl);
  _sip.pt := TPoint.Create(_x, _y);
  Result := SHShellFolderView_Message(_hwnd, SFVM_SETITEMPOS, LPARAM(@_sip));
end;

procedure ShellFolderView_SetClipboard(_hwnd: HWND; _dwEffect: DWORD); inline;
begin
  SHShellFolderView_Message(_hwnd, SFVM_SETCLIPBOARD, LPARAM(_dwEffect));
end;

procedure ShellFolderView_SetPoints(_hwnd: HWND; _pdtobj: Pointer);
begin
  SHShellFolderView_Message(_hwnd, SFVM_SETPOINTS, LPARAM(_pdtobj));
end;

end.
