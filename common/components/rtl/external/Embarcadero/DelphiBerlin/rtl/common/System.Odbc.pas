{*******************************************************}
{                                                       }
{           CodeGear Delphi Runtime Library             }
{                                                       }
{ Copyright(c) 2016 Embarcadero Technologies, Inc.      }
{              All rights reserved                      }
{                                                       }
{             ODBC API Interface Unit                   }
{                                                       }
{*******************************************************}

{ Files: sqltypes.h, sql.h, sqlext.h, sqlucode.h        }

unit System.Odbc;

{$WEAKPACKAGEUNIT}

interface

                                                         

{$IFDEF MSWINDOWS}
uses
  Winapi.Windows
;
{$ENDIF}

(*$HPPEMIT '#if defined(__APPLE__) && !defined(_NO_REMAP_CONFLICTING_TYPES)'*)
(*$HPPEMIT '#define ULONG _ULONG // sqltypes.h/ULONG conflicts with sysmac.h '*)
(*$HPPEMIT '#define DWORD _DWORD // iodbcunix.h/DWORD conflicts with sysmac.h '*)
(*$HPPEMIT '#define BOOL  _BOOL_ // iodbcunix.h/BOOL conflicts with sysmac.h '*)
(*$HPPEMIT '#endif'*)
(*$HPPEMIT ''*)
(*$HPPEMIT '#include <sqltypes.h>'*)
(*$HPPEMIT '#include <sql.h>'*)
(*$HPPEMIT '#include <sqlext.h>'*)
(*$HPPEMIT '#include <sqlucode.h>'*)
(*$HPPEMIT ''*)
(*$HPPEMIT '#if defined(__APPLE__) && !defined(_NO_REMAP_CONFLICTING_TYPES)'*)
(*$HPPEMIT '#undef ULONG '*)
(*$HPPEMIT '#undef DWORD '*)
(*$HPPEMIT '#undef BOOL '*)
(*$HPPEMIT '#endif'*)


{ Translated from sqltypes.h }

const
{$IFDEF MSWINDOWS}
  odbcdll = 'odbc32.dll';
{$ENDIF}
{$IFDEF MACOS}
  odbcdll = '/usr/lib/libiodbc.dylib';
{$ENDIF}

  ODBCVER = $0380;
  {$EXTERNALSYM ODBCVER}

// API declaration data types
type
{$IFNDEF MSWINDOWS}
  LPCWSTR             = MarshaledString;
  LPCSTR              = MarshaledAString;
  {$NODEFINE LPCWSTR}
  {$NODEFINE LPCSTR}
{$ENDIF}
  SQLCHAR             = Byte;
  {$EXTERNALSYM SQLCHAR}
  PSqlChar            = ^SQLCHAR;
  SQLSCHAR            = ShortInt;
  {$EXTERNALSYM SQLSCHAR}
  SQLDATE             = Byte;
  {$EXTERNALSYM SQLDATE}
  SQLDECIMAL          = Byte;
  {$EXTERNALSYM SQLDECIMAL}
  SQLDOUBLE           = Double;
  {$EXTERNALSYM SQLDOUBLE}
  SQLFLOAT            = Double;
  {$EXTERNALSYM SQLFLOAT}
  SQLINTEGER          = LongInt;
  {$EXTERNALSYM SQLINTEGER}
{$IFDEF MSWINDOWS}
  SQLUINTEGER         = DWord;
{$ELSE}
  SQLUINTEGER         = LongWord;
{$ENDIF}
  {$EXTERNALSYM SQLUINTEGER}
  SQLSMALLINT         = SmallInt;
  {$EXTERNALSYM SQLSMALLINT}
  PSqlSmallInt        = ^SQLSMALLINT;
  SQLUSMALLINT        = Word;
  {$EXTERNALSYM SQLUSMALLINT}
{$IFDEF WIN64}
  SQLLEN              = Int64;
  {$EXTERNALSYM SQLLEN}
  SQLULEN             = UInt64;
  {$EXTERNALSYM SQLULEN}
  SQLSETPOSIROW       = UInt64;
  {$EXTERNALSYM SQLSETPOSIROW}
{$ELSE}
  SQLLEN              = SQLINTEGER;
  {$EXTERNALSYM SQLLEN}
  SQLULEN             = SQLUINTEGER;
  {$EXTERNALSYM SQLULEN}
  SQLSETPOSIROW       = SQLUSMALLINT;
  {$EXTERNALSYM SQLSETPOSIROW}
{$ENDIF}

  PSqlLen             = ^SQLLEN;

//For Backward compatibility
{$IFDEF WIN32}
  SQLROWCOUNT_CONST         = SQLULEN;

  SQLROWSETSIZE       = SQLULEN;
  {$EXTERNALSYM SQLROWSETSIZE}
  SQLTRANSID          = SQLULEN;
  {$EXTERNALSYM SQLTRANSID}
  SQLROWOFFSET        = SQLLEN;
  {$EXTERNALSYM SQLROWOFFSET}
{$ENDIF}

  SQLNUMERIC          = Byte;
  {$EXTERNALSYM SQLNUMERIC}
  SQLPOINTER          = Pointer;
  {$EXTERNALSYM SQLPOINTER}
  SQLREAL             = Single;
  {$EXTERNALSYM SQLREAL}

  SQLTIME             = Byte;
  {$EXTERNALSYM SQLTIME}
  SQLTIMESTAMP        = Byte;
  {$EXTERNALSYM SQLTIMESTAMP}
  SQLVARCHAR          = Byte;
  {$EXTERNALSYM SQLVARCHAR}

// function return type
  SQLRETURN           = SQLSMALLINT;
  {$EXTERNALSYM SQLRETURN}

// generic data structures
  SQLHANDLE           = Pointer;
  {$EXTERNALSYM SQLHANDLE}
  SQLHENV             = SQLHANDLE;
  {$EXTERNALSYM SQLHENV}
  SQLHDBC             = SQLHANDLE;
  {$EXTERNALSYM SQLHDBC}
  SQLHSTMT            = SQLHANDLE;
  {$EXTERNALSYM SQLHSTMT}
  SQLHDESC            = SQLHANDLE;
  {$EXTERNALSYM SQLHDESC}

  RETCODE             = SQLSMALLINT;
  {$EXTERNALSYM RETCODE}

{$IFDEF MSWINDOWS}
  SQLHWND             = HWND;
{$ELSE}
  SQLHWND             = Pointer;
{$ENDIF}
  {$EXTERNALSYM SQLHWND}

  tagDATE_STRUCT = record
    Year:  SQLSMALLINT;
    Month: SQLUSMALLINT;
    Day:   SQLUSMALLINT;
  end;
  {$EXTERNALSYM tagDATE_STRUCT}

  SQL_DATE_STRUCT = tagDATE_STRUCT;
  {$EXTERNALSYM SQL_DATE_STRUCT}

  tagTIME_STRUCT = record
    Hour:   SQLUSMALLINT;
    Minute: SQLUSMALLINT;
    Second: SQLUSMALLINT;
  end;
  {$EXTERNALSYM tagTIME_STRUCT}

  SQL_TIME_STRUCT = tagTIME_STRUCT;
  {$EXTERNALSYM SQL_TIME_STRUCT}

  tagTIMESTAMP_STRUCT = record
    Year:     SQLSMALLINT;
    Month:    SQLUSMALLINT;
    Day:      SQLUSMALLINT;
    Hour:     SQLUSMALLINT;
    Minute:   SQLUSMALLINT;
    Second:   SQLUSMALLINT;
    Fraction: SQLUINTEGER;
  end;
  {$EXTERNALSYM tagTIMESTAMP_STRUCT}

  SQL_TIMESTAMP_STRUCT = tagTIMESTAMP_STRUCT;
  {$EXTERNALSYM SQL_TIMESTAMP_STRUCT}

{
 enumerations for DATETIME_INTERVAL_SUBCODE values for interval data types
 these values are from SQL-92
}

  SQLINTERVAL = (Sql_Is_Year = 1, Sql_Is_Month = 2, Sql_Is_Day = 3, Sql_Is_Hour = 4,
                 Sql_Is_Minute = 5, Sql_Is_Second = 6, Sql_Is_Year_To_Month = 7,
                 Sql_Is_Day_To_Hour = 8, Sql_Is_Day_To_Minute = 9, Sql_Is_Day_To_Second = 10,
                 Sql_Is_Hour_To_Minute = 11, Sql_Is_Hour_To_Second = 12,
                 Sql_Is_Minute_To_Second = 13);
  {$EXTERNALSYM SQLINTERVAL}

  tagSQL_YEAR_MONTH = record
    Year:  SQLUINTEGER;
    Month: SQLUINTEGER;
  end;
  {$EXTERNALSYM tagSQL_YEAR_MONTH}

  tagSQL_DAY_SECOND = record
    Day:      SQLUINTEGER;
    Hour:     SQLUINTEGER;
    Minute:   SQLUINTEGER;
    Second:   SQLUINTEGER;
    Fraction: SQLUINTEGER;
  end;
  {$EXTERNALSYM tagSQL_DAY_SECOND}

  tagSQL_INTERVAL_STRUCT = record
    Interval_Type: SQLINTERVAL;
    Interval_Sign: SQLSMALLINT;
    case Integer of
     0: (Year_Month: tagSQL_YEAR_MONTH);
     1: (Day_Second: tagSQL_DAY_SECOND);
  end;
  {$EXTERNALSYM tagSQL_INTERVAL_STRUCT}

  ODBCINT64 = Int64;
  {$EXTERNALSYM ODBCINT64}
  ODBCUINT64 = UInt64;
  {$EXTERNALSYM ODBCUINT64}
  SQLBIGINT = OdbcInt64;
  {$EXTERNALSYM SQLBIGINT}
  SQLUBIGINT = OdbcUInt64;
  {$EXTERNALSYM SQLUBIGINT}

// internal representation of numeric data type
const
  SQL_MAX_NUMERIC_LEN = 16;
  {$EXTERNALSYM SQL_MAX_NUMERIC_LEN}

type
  tagSQL_NUMERIC_STRUCT = record
    Precision: SQLCHAR;
    Scale:     SQLSCHAR;
    Sign:      SQLCHAR;
    Val:       array[0..SQL_MAX_NUMERIC_LEN - 1] of SQLCHAR;
  end;
  {$EXTERNALSYM tagSQL_NUMERIC_STRUCT}

  SQLGUID = TGuid;
  {$EXTERNALSYM SQLGUID}

  BOOKMARK = SQLULEN;
  {$EXTERNALSYM BOOKMARK}

  SQLWCHAR = Char;
  {$EXTERNALSYM SQLWCHAR}
  PSqlWChar            = ^SQLWCHAR;

  SQLTCHAR = SQLWCHAR;
  {$EXTERNALSYM SQLTCHAR}

{ Translated from sql.h }

// special length/indicator values
const
  SQL_NULL_DATA = (-1);
  {$EXTERNALSYM SQL_NULL_DATA}
  SQL_DATA_AT_EXEC = (-2);
  {$EXTERNALSYM SQL_DATA_AT_EXEC}

// return values from functions
  SQL_SUCCESS = 0;
  {$EXTERNALSYM SQL_SUCCESS}
  SQL_SUCCESS_WITH_INFO = 1;
  {$EXTERNALSYM SQL_SUCCESS_WITH_INFO}

  SQL_NO_DATA = 100;
  {$EXTERNALSYM SQL_NO_DATA}

  SQL_PARAM_DATA_AVAILABLE = 101;
  {$EXTERNALSYM SQL_PARAM_DATA_AVAILABLE}

  SQL_ERROR = (-1);
  {$EXTERNALSYM SQL_ERROR}
  SQL_INVALID_HANDLE = (-2);
  {$EXTERNALSYM SQL_INVALID_HANDLE}

  SQL_STILL_EXECUTING = 2;
  {$EXTERNALSYM SQL_STILL_EXECUTING}
  SQL_NEED_DATA = 99;
  {$EXTERNALSYM SQL_NEED_DATA}

// test for SQL_SUCCESS or SQL_SUCCESS_WITH_INFO
function SQL_SUCCEEDED(const rc: SQLRETURN): Boolean;
{$EXTERNALSYM SQL_SUCCEEDED}

const
// flags for null-terminated string
  SQL_NTS = (-3);
  {$EXTERNALSYM SQL_NTS}
  SQL_NTSL = (-3);
  {$EXTERNALSYM SQL_NTSL}

// maximum message length
  SQL_MAX_MESSAGE_LENGTH = 512;
  {$EXTERNALSYM SQL_MAX_MESSAGE_LENGTH}

// date/time length constants
  SQL_DATE_LEN = 10;
  {$EXTERNALSYM SQL_DATE_LEN}
  SQL_TIME_LEN = 8;  // add P+1 if precision is nonzero
  {$EXTERNALSYM SQL_TIME_LEN}
  SQL_TIMESTAMP_LEN = 19;  // add P+1 if precision is nonzero
  {$EXTERNALSYM SQL_TIMESTAMP_LEN}

// handle type identifiers
  SQL_HANDLE_ENV = 1;
  {$EXTERNALSYM SQL_HANDLE_ENV}
  SQL_HANDLE_DBC = 2;
  {$EXTERNALSYM SQL_HANDLE_DBC}
  SQL_HANDLE_STMT = 3;
  {$EXTERNALSYM SQL_HANDLE_STMT}
  SQL_HANDLE_DESC = 4;
  {$EXTERNALSYM SQL_HANDLE_DESC}

// environment attribute
  SQL_ATTR_OUTPUT_NTS = 10001;
  {$EXTERNALSYM SQL_ATTR_OUTPUT_NTS}

// connection attributes
  SQL_ATTR_AUTO_IPD = 10001;
  {$EXTERNALSYM SQL_ATTR_AUTO_IPD}
  SQL_ATTR_METADATA_ID = 10014;
  {$EXTERNALSYM SQL_ATTR_METADATA_ID}

// statement attributes
  SQL_ATTR_APP_ROW_DESC = 10010;
  {$EXTERNALSYM SQL_ATTR_APP_ROW_DESC}
  SQL_ATTR_APP_PARAM_DESC = 10011;
  {$EXTERNALSYM SQL_ATTR_APP_PARAM_DESC}
  SQL_ATTR_IMP_ROW_DESC = 10012;
  {$EXTERNALSYM SQL_ATTR_IMP_ROW_DESC}
  SQL_ATTR_IMP_PARAM_DESC = 10013;
  {$EXTERNALSYM SQL_ATTR_IMP_PARAM_DESC}
  SQL_ATTR_CURSOR_SCROLLABLE = (-1);
  {$EXTERNALSYM SQL_ATTR_CURSOR_SCROLLABLE}
  SQL_ATTR_CURSOR_SENSITIVITY = (-2);
  {$EXTERNALSYM SQL_ATTR_CURSOR_SENSITIVITY}

// SQL_ATTR_CURSOR_SCROLLABLE values
  SQL_NONSCROLLABLE = 0;
  {$EXTERNALSYM SQL_NONSCROLLABLE}
  SQL_SCROLLABLE = 1;
  {$EXTERNALSYM SQL_SCROLLABLE}

// identifiers of fields in the SQL descriptor
  SQL_DESC_COUNT = 1001;
  {$EXTERNALSYM SQL_DESC_COUNT}
  SQL_DESC_TYPE = 1002;
  {$EXTERNALSYM SQL_DESC_TYPE}
  SQL_DESC_LENGTH = 1003;
  {$EXTERNALSYM SQL_DESC_LENGTH}
  SQL_DESC_OCTET_LENGTH_PTR = 1004;
  {$EXTERNALSYM SQL_DESC_OCTET_LENGTH_PTR}
  SQL_DESC_PRECISION = 1005;
  {$EXTERNALSYM SQL_DESC_PRECISION}
  SQL_DESC_SCALE = 1006;
  {$EXTERNALSYM SQL_DESC_SCALE}
  SQL_DESC_DATETIME_INTERVAL_CODE = 1007;
  {$EXTERNALSYM SQL_DESC_DATETIME_INTERVAL_CODE}
  SQL_DESC_NULLABLE = 1008;
  {$EXTERNALSYM SQL_DESC_NULLABLE}
  SQL_DESC_INDICATOR_PTR = 1009;
  {$EXTERNALSYM SQL_DESC_INDICATOR_PTR}
  SQL_DESC_DATA_PTR = 1010;
  {$EXTERNALSYM SQL_DESC_DATA_PTR}
  SQL_DESC_NAME = 1011;
  {$EXTERNALSYM SQL_DESC_NAME}
  SQL_DESC_UNNAMED = 1012;
  {$EXTERNALSYM SQL_DESC_UNNAMED}
  SQL_DESC_OCTET_LENGTH = 1013;
  {$EXTERNALSYM SQL_DESC_OCTET_LENGTH}
  SQL_DESC_ALLOC_TYPE = 1099;
  {$EXTERNALSYM SQL_DESC_ALLOC_TYPE}

// identifiers of fields in the diagnostics area
  SQL_DIAG_RETURNCODE = 1;
  {$EXTERNALSYM SQL_DIAG_RETURNCODE}
  SQL_DIAG_NUMBER = 2;
  {$EXTERNALSYM SQL_DIAG_NUMBER}
  SQL_DIAG_ROW_COUNT = 3;
  {$EXTERNALSYM SQL_DIAG_ROW_COUNT}
  SQL_DIAG_SQLSTATE = 4;
  {$EXTERNALSYM SQL_DIAG_SQLSTATE}
  SQL_DIAG_NATIVE = 5;
  {$EXTERNALSYM SQL_DIAG_NATIVE}
  SQL_DIAG_MESSAGE_TEXT = 6;
  {$EXTERNALSYM SQL_DIAG_MESSAGE_TEXT}
  SQL_DIAG_DYNAMIC_FUNCTION = 7;
  {$EXTERNALSYM SQL_DIAG_DYNAMIC_FUNCTION}
  SQL_DIAG_CLASS_ORIGIN = 8;
  {$EXTERNALSYM SQL_DIAG_CLASS_ORIGIN}
  SQL_DIAG_SUBCLASS_ORIGIN = 9;
  {$EXTERNALSYM SQL_DIAG_SUBCLASS_ORIGIN}
  SQL_DIAG_CONNECTION_NAME = 10;
  {$EXTERNALSYM SQL_DIAG_CONNECTION_NAME}
  SQL_DIAG_SERVER_NAME = 11;
  {$EXTERNALSYM SQL_DIAG_SERVER_NAME}
  SQL_DIAG_DYNAMIC_FUNCTION_CODE = 12;
  {$EXTERNALSYM SQL_DIAG_DYNAMIC_FUNCTION_CODE}

// dynamic function codes
  SQL_DIAG_ALTER_DOMAIN = 3;
  {$EXTERNALSYM SQL_DIAG_ALTER_DOMAIN}
  SQL_DIAG_ALTER_TABLE = 4;
  {$EXTERNALSYM SQL_DIAG_ALTER_TABLE}
  SQL_DIAG_CALL = 7;
  {$EXTERNALSYM SQL_DIAG_CALL}
  SQL_DIAG_CREATE_ASSERTION = 6;
  {$EXTERNALSYM SQL_DIAG_CREATE_ASSERTION}
  SQL_DIAG_CREATE_CHARACTER_SET = 8;
  {$EXTERNALSYM SQL_DIAG_CREATE_CHARACTER_SET}
  SQL_DIAG_CREATE_COLLATION = 10;
  {$EXTERNALSYM SQL_DIAG_CREATE_COLLATION}
  SQL_DIAG_CREATE_DOMAIN = 23;
  {$EXTERNALSYM SQL_DIAG_CREATE_DOMAIN}
  SQL_DIAG_CREATE_INDEX = (-1);
  {$EXTERNALSYM SQL_DIAG_CREATE_INDEX}
  SQL_DIAG_CREATE_SCHEMA = 64;
  {$EXTERNALSYM SQL_DIAG_CREATE_SCHEMA}
  SQL_DIAG_CREATE_TABLE = 77;
  {$EXTERNALSYM SQL_DIAG_CREATE_TABLE}
  SQL_DIAG_CREATE_TRANSLATION = 79;
  {$EXTERNALSYM SQL_DIAG_CREATE_TRANSLATION}
  SQL_DIAG_CREATE_VIEW = 84;
  {$EXTERNALSYM SQL_DIAG_CREATE_VIEW}
  SQL_DIAG_DELETE_WHERE = 19;
  {$EXTERNALSYM SQL_DIAG_DELETE_WHERE}
  SQL_DIAG_DROP_ASSERTION = 24;
  {$EXTERNALSYM SQL_DIAG_DROP_ASSERTION}
  SQL_DIAG_DROP_CHARACTER_SET = 25;
  {$EXTERNALSYM SQL_DIAG_DROP_CHARACTER_SET}
  SQL_DIAG_DROP_COLLATION = 26;
  {$EXTERNALSYM SQL_DIAG_DROP_COLLATION}
  SQL_DIAG_DROP_DOMAIN = 27;
  {$EXTERNALSYM SQL_DIAG_DROP_DOMAIN}
  SQL_DIAG_DROP_INDEX = (-2);
  {$EXTERNALSYM SQL_DIAG_DROP_INDEX}
  SQL_DIAG_DROP_SCHEMA = 31;
  {$EXTERNALSYM SQL_DIAG_DROP_SCHEMA}
  SQL_DIAG_DROP_TABLE = 32;
  {$EXTERNALSYM SQL_DIAG_DROP_TABLE}
  SQL_DIAG_DROP_TRANSLATION = 33;
  {$EXTERNALSYM SQL_DIAG_DROP_TRANSLATION}
  SQL_DIAG_DROP_VIEW = 36;
  {$EXTERNALSYM SQL_DIAG_DROP_VIEW}
  SQL_DIAG_DYNAMIC_DELETE_CURSOR = 38;
  {$EXTERNALSYM SQL_DIAG_DYNAMIC_DELETE_CURSOR}
  SQL_DIAG_DYNAMIC_UPDATE_CURSOR = 81;
  {$EXTERNALSYM SQL_DIAG_DYNAMIC_UPDATE_CURSOR}
  SQL_DIAG_GRANT = 48;
  {$EXTERNALSYM SQL_DIAG_GRANT}
  SQL_DIAG_INSERT = 50;
  {$EXTERNALSYM SQL_DIAG_INSERT}
  SQL_DIAG_REVOKE = 59;
  {$EXTERNALSYM SQL_DIAG_REVOKE}
  SQL_DIAG_SELECT_CURSOR = 85;
  {$EXTERNALSYM SQL_DIAG_SELECT_CURSOR}
  SQL_DIAG_UNKNOWN_STATEMENT = 0;
  {$EXTERNALSYM SQL_DIAG_UNKNOWN_STATEMENT}
  SQL_DIAG_UPDATE_WHERE = 82;
  {$EXTERNALSYM SQL_DIAG_UPDATE_WHERE}

// SQL data type codes
  SQL_UNKNOWN_TYPE = 0;
  {$EXTERNALSYM SQL_UNKNOWN_TYPE}
  SQL_CHAR = 1;
  {$EXTERNALSYM SQL_CHAR}
  SQL_NUMERIC = 2;
  {$EXTERNALSYM SQL_NUMERIC}
  SQL_DECIMAL = 3;
  {$EXTERNALSYM SQL_DECIMAL}
  SQL_INTEGER = 4;
  {$EXTERNALSYM SQL_INTEGER}
  SQL_SMALLINT = 5;
  {$EXTERNALSYM SQL_SMALLINT}
  SQL_FLOAT = 6;
  {$EXTERNALSYM SQL_FLOAT}
  SQL_REAL = 7;
  {$EXTERNALSYM SQL_REAL}
  SQL_DOUBLE = 8;
  {$EXTERNALSYM SQL_DOUBLE}
  SQL_DATETIME = 9;
  {$EXTERNALSYM SQL_DATETIME}
  SQL_VARCHAR = 12;
  {$EXTERNALSYM SQL_VARCHAR}

// One-parameter shortcuts for date/time data types
  SQL_TYPE_DATE = 91;
  {$EXTERNALSYM SQL_TYPE_DATE}
  SQL_TYPE_TIME = 92;
  {$EXTERNALSYM SQL_TYPE_TIME}
  SQL_TYPE_TIMESTAMP = 93;
  {$EXTERNALSYM SQL_TYPE_TIMESTAMP}

// Statement attribute values for cursor sensitivity
  SQL_UNSPECIFIED = 0;
  {$EXTERNALSYM SQL_UNSPECIFIED}
  SQL_INSENSITIVE = 1;
  {$EXTERNALSYM SQL_INSENSITIVE}
  SQL_SENSITIVE = 2;
  {$EXTERNALSYM SQL_SENSITIVE}

// GetTypeInfo() request for all data types
  SQL_ALL_TYPES = 0;
  {$EXTERNALSYM SQL_ALL_TYPES}

// Default conversion code for SQLBindCol(), SQLBindParam() and SQLGetData()
  SQL_DEFAULT = 99;
  {$EXTERNALSYM SQL_DEFAULT}

// SQLSQLLEN GetData() code indicating that the application row descriptor
// specifies the data type
  SQL_ARD_TYPE = (-99);
  {$EXTERNALSYM SQL_ARD_TYPE}

  SQL_APD_TYPE = (-100);
  {$EXTERNALSYM SQL_APD_TYPE}

// SQL date/time type subcodes
  SQL_CODE_DATE = 1;
  {$EXTERNALSYM SQL_CODE_DATE}
  SQL_CODE_TIME = 2;
  {$EXTERNALSYM SQL_CODE_TIME}
  SQL_CODE_TIMESTAMP = 3;
  {$EXTERNALSYM SQL_CODE_TIMESTAMP}

// CLI option values
  SQL_FALSE = 0;
  {$EXTERNALSYM SQL_FALSE}
  SQL_TRUE = 1;
  {$EXTERNALSYM SQL_TRUE}

// values of NULLABLE field in descriptor
  SQL_NO_NULLS = 0;
  {$EXTERNALSYM SQL_NO_NULLS}
  SQL_NULLABLE = 1;
  {$EXTERNALSYM SQL_NULLABLE}

// Value returned by SQLGetTypeInfo() to denote that it is
// not known whether or not a data type supports null values.
  SQL_NULLABLE_UNKNOWN = 2;
  {$EXTERNALSYM SQL_NULLABLE_UNKNOWN}

// Values returned by SQLGetTypeInfo() to show WHERE clause
// supported
  SQL_PRED_NONE = 0;
  {$EXTERNALSYM SQL_PRED_NONE}
  SQL_PRED_CHAR = 1;
  {$EXTERNALSYM SQL_PRED_CHAR}
  SQL_PRED_BASIC = 2;
  {$EXTERNALSYM SQL_PRED_BASIC}

// values of UNNAMED field in descriptor
  SQL_NAMED = 0;
  {$EXTERNALSYM SQL_NAMED}
  SQL_UNNAMED = 1;
  {$EXTERNALSYM SQL_UNNAMED}

// values of ALLOC_TYPE field in descriptor
  SQL_DESC_ALLOC_AUTO = 1;
  {$EXTERNALSYM SQL_DESC_ALLOC_AUTO}
  SQL_DESC_ALLOC_USER = 2;
  {$EXTERNALSYM SQL_DESC_ALLOC_USER}

// FreeStmt() options
  SQL_CLOSE = 0;
  {$EXTERNALSYM SQL_CLOSE}
  SQL_DROP = 1;
  {$EXTERNALSYM SQL_DROP}
  SQL_UNBIND = 2;
  {$EXTERNALSYM SQL_UNBIND}
  SQL_RESET_PARAMS = 3;
  {$EXTERNALSYM SQL_RESET_PARAMS}

// Codes used for FetchOrientation in SQLFetchScroll(),
// and in SQLDataSources()
  SQL_FETCH_NEXT = 1;
  {$EXTERNALSYM SQL_FETCH_NEXT}
  SQL_FETCH_FIRST = 2;
  {$EXTERNALSYM SQL_FETCH_FIRST}

// Other codes used for FetchOrientation in SQLFetchScroll()
  SQL_FETCH_LAST = 3;
  {$EXTERNALSYM SQL_FETCH_LAST}
  SQL_FETCH_PRIOR = 4;
  {$EXTERNALSYM SQL_FETCH_PRIOR}
  SQL_FETCH_ABSOLUTE = 5;
  {$EXTERNALSYM SQL_FETCH_ABSOLUTE}
  SQL_FETCH_RELATIVE = 6;
  {$EXTERNALSYM SQL_FETCH_RELATIVE}

// SQLEndTran() options
  SQL_COMMIT = 0;
  {$EXTERNALSYM SQL_COMMIT}
  SQL_ROLLBACK = 1;
  {$EXTERNALSYM SQL_ROLLBACK}

// null handles returned by SQLAllocHandle()
  SQL_NULL_HENV = 0;
  {$EXTERNALSYM SQL_NULL_HENV}
  SQL_NULL_HDBC = 0;
  {$EXTERNALSYM SQL_NULL_HDBC}
  SQL_NULL_HSTMT = 0;
  {$EXTERNALSYM SQL_NULL_HSTMT}
  SQL_NULL_HDESC = 0;
  {$EXTERNALSYM SQL_NULL_HDESC}

// null handle used in place of parent handle when allocating HENV
  SQL_NULL_HANDLE = 0;
  {$EXTERNALSYM SQL_NULL_HANDLE}

// Values that may appear in the result set of SQLSpecialColumns()
  SQL_SCOPE_CURROW = 0;
  {$EXTERNALSYM SQL_SCOPE_CURROW}
  SQL_SCOPE_TRANSACTION = 1;
  {$EXTERNALSYM SQL_SCOPE_TRANSACTION}
  SQL_SCOPE_SESSION = 2;
  {$EXTERNALSYM SQL_SCOPE_SESSION}

  SQL_PC_UNKNOWN = 0;
  {$EXTERNALSYM SQL_PC_UNKNOWN}
  SQL_PC_NON_PSEUDO = 1;
  {$EXTERNALSYM SQL_PC_NON_PSEUDO}
  SQL_PC_PSEUDO = 2;
  {$EXTERNALSYM SQL_PC_PSEUDO}

// Reserved value for the IdentifierType argument of SQLSpecialColumns()
  SQL_ROW_IDENTIFIER = 1;
  {$EXTERNALSYM SQL_ROW_IDENTIFIER}

// Reserved values for UNIQUE argument of SQLStatistics()
  SQL_INDEX_UNIQUE = 0;
  {$EXTERNALSYM SQL_INDEX_UNIQUE}
  SQL_INDEX_ALL = 1;
  {$EXTERNALSYM SQL_INDEX_ALL}

// Values that may appear in the result set of SQLStatistics()
  SQL_INDEX_CLUSTERED = 1;
  {$EXTERNALSYM SQL_INDEX_CLUSTERED}
  SQL_INDEX_HASHED = 2;
  {$EXTERNALSYM SQL_INDEX_HASHED}
  SQL_INDEX_OTHER = 3;
  {$EXTERNALSYM SQL_INDEX_OTHER}

// SQLGetFunctions() values to identify ODBC APIs
  SQL_API_SQLALLOCCONNECT = 1;
  {$EXTERNALSYM SQL_API_SQLALLOCCONNECT}
  SQL_API_SQLALLOCENV = 2;
  {$EXTERNALSYM SQL_API_SQLALLOCENV}
  SQL_API_SQLALLOCHANDLE = 1001;
  {$EXTERNALSYM SQL_API_SQLALLOCHANDLE}
  SQL_API_SQLALLOCSTMT = 3;
  {$EXTERNALSYM SQL_API_SQLALLOCSTMT}
  SQL_API_SQLBINDCOL = 4;
  {$EXTERNALSYM SQL_API_SQLBINDCOL}
  SQL_API_SQLBINDPARAM = 1002;
  {$EXTERNALSYM SQL_API_SQLBINDPARAM}
  SQL_API_SQLCANCEL = 5;
  {$EXTERNALSYM SQL_API_SQLCANCEL}
  SQL_API_SQLCLOSECURSOR = 1003;
  {$EXTERNALSYM SQL_API_SQLCLOSECURSOR}
  SQL_API_SQLCOLATTRIBUTE = 6;
  {$EXTERNALSYM SQL_API_SQLCOLATTRIBUTE}
  SQL_API_SQLCOLUMNS = 40;
  {$EXTERNALSYM SQL_API_SQLCOLUMNS}
  SQL_API_SQLCONNECT = 7;
  {$EXTERNALSYM SQL_API_SQLCONNECT}
  SQL_API_SQLCOPYDESC = 1004;
  {$EXTERNALSYM SQL_API_SQLCOPYDESC}
  SQL_API_SQLDATASOURCES = 57;
  {$EXTERNALSYM SQL_API_SQLDATASOURCES}
  SQL_API_SQLDESCRIBECOL = 8;
  {$EXTERNALSYM SQL_API_SQLDESCRIBECOL}
  SQL_API_SQLDISCONNECT = 9;
  {$EXTERNALSYM SQL_API_SQLDISCONNECT}
  SQL_API_SQLENDTRAN = 1005;
  {$EXTERNALSYM SQL_API_SQLENDTRAN}
  SQL_API_SQLERROR = 10;
  {$EXTERNALSYM SQL_API_SQLERROR}
  SQL_API_SQLEXECDIRECT = 11;
  {$EXTERNALSYM SQL_API_SQLEXECDIRECT}
  SQL_API_SQLEXECUTE = 12;
  {$EXTERNALSYM SQL_API_SQLEXECUTE}
  SQL_API_SQLFETCH = 13;
  {$EXTERNALSYM SQL_API_SQLFETCH}
  SQL_API_SQLFETCHSCROLL = 1021;
  {$EXTERNALSYM SQL_API_SQLFETCHSCROLL}
  SQL_API_SQLFREECONNECT = 14;
  {$EXTERNALSYM SQL_API_SQLFREECONNECT}
  SQL_API_SQLFREEENV = 15;
  {$EXTERNALSYM SQL_API_SQLFREEENV}
  SQL_API_SQLFREEHANDLE = 1006;
  {$EXTERNALSYM SQL_API_SQLFREEHANDLE}
  SQL_API_SQLFREESTMT = 16;
  {$EXTERNALSYM SQL_API_SQLFREESTMT}
  SQL_API_SQLGETCONNECTATTR = 1007;
  {$EXTERNALSYM SQL_API_SQLGETCONNECTATTR}
  SQL_API_SQLGETCONNECTOPTION = 42;
  {$EXTERNALSYM SQL_API_SQLGETCONNECTOPTION}
  SQL_API_SQLGETCURSORNAME = 17;
  {$EXTERNALSYM SQL_API_SQLGETCURSORNAME}
  SQL_API_SQLGETDATA = 43;
  {$EXTERNALSYM SQL_API_SQLGETDATA}
  SQL_API_SQLGETDESCFIELD = 1008;
  {$EXTERNALSYM SQL_API_SQLGETDESCFIELD}
  SQL_API_SQLGETDESCREC = 1009;
  {$EXTERNALSYM SQL_API_SQLGETDESCREC}
  SQL_API_SQLGETDIAGFIELD = 1010;
  {$EXTERNALSYM SQL_API_SQLGETDIAGFIELD}
  SQL_API_SQLGETDIAGREC = 1011;
  {$EXTERNALSYM SQL_API_SQLGETDIAGREC}
  SQL_API_SQLGETENVATTR = 1012;
  {$EXTERNALSYM SQL_API_SQLGETENVATTR}
  SQL_API_SQLGETFUNCTIONS = 44;
  {$EXTERNALSYM SQL_API_SQLGETFUNCTIONS}
  SQL_API_SQLGETINFO = 45;
  {$EXTERNALSYM SQL_API_SQLGETINFO}
  SQL_API_SQLGETSTMTATTR = 1014;
  {$EXTERNALSYM SQL_API_SQLGETSTMTATTR}
  SQL_API_SQLGETSTMTOPTION = 46;
  {$EXTERNALSYM SQL_API_SQLGETSTMTOPTION}
  SQL_API_SQLGETTYPEINFO = 47;
  {$EXTERNALSYM SQL_API_SQLGETTYPEINFO}
  SQL_API_SQLNUMRESULTCOLS = 18;
  {$EXTERNALSYM SQL_API_SQLNUMRESULTCOLS}
  SQL_API_SQLPARAMDATA = 48;
  {$EXTERNALSYM SQL_API_SQLPARAMDATA}
  SQL_API_SQLPREPARE = 19;
  {$EXTERNALSYM SQL_API_SQLPREPARE}
  SQL_API_SQLPUTDATA = 49;
  {$EXTERNALSYM SQL_API_SQLPUTDATA}
  SQL_API_SQLROWCOUNT = 20;
  {$EXTERNALSYM SQL_API_SQLROWCOUNT}
  SQL_API_SQLSETCONNECTATTR = 1016;
  {$EXTERNALSYM SQL_API_SQLSETCONNECTATTR}
  SQL_API_SQLSETCONNECTOPTION = 50;
  {$EXTERNALSYM SQL_API_SQLSETCONNECTOPTION}
  SQL_API_SQLSETCURSORNAME = 21;
  {$EXTERNALSYM SQL_API_SQLSETCURSORNAME}
  SQL_API_SQLSETDESCFIELD = 1017;
  {$EXTERNALSYM SQL_API_SQLSETDESCFIELD}
  SQL_API_SQLSETDESCREC = 1018;
  {$EXTERNALSYM SQL_API_SQLSETDESCREC}
  SQL_API_SQLSETENVATTR = 1019;
  {$EXTERNALSYM SQL_API_SQLSETENVATTR}
  SQL_API_SQLSETPARAM = 22;
  {$EXTERNALSYM SQL_API_SQLSETPARAM}
  SQL_API_SQLSETSTMTATTR = 1020;
  {$EXTERNALSYM SQL_API_SQLSETSTMTATTR}
  SQL_API_SQLSETSTMTOPTION = 51;
  {$EXTERNALSYM SQL_API_SQLSETSTMTOPTION}
  SQL_API_SQLSPECIALCOLUMNS = 52;
  {$EXTERNALSYM SQL_API_SQLSPECIALCOLUMNS}
  SQL_API_SQLSTATISTICS = 53;
  {$EXTERNALSYM SQL_API_SQLSTATISTICS}
  SQL_API_SQLTABLES = 54;
  {$EXTERNALSYM SQL_API_SQLTABLES}
  SQL_API_SQLTRANSACT = 23;
  {$EXTERNALSYM SQL_API_SQLTRANSACT}

  SQL_API_SQLCANCELHANDLE = 1022;
  {$EXTERNALSYM SQL_API_SQLCANCELHANDLE}

// Information requested by SQLGetInfo()
  SQL_MAX_DRIVER_CONNECTIONS = 0;
  {$EXTERNALSYM SQL_MAX_DRIVER_CONNECTIONS}
  SQL_MAXIMUM_DRIVER_CONNECTIONS = SQL_MAX_DRIVER_CONNECTIONS;
  {$EXTERNALSYM SQL_MAXIMUM_DRIVER_CONNECTIONS}
  SQL_MAX_CONCURRENT_ACTIVITIES = 1;
  {$EXTERNALSYM SQL_MAX_CONCURRENT_ACTIVITIES}
  SQL_MAXIMUM_CONCURRENT_ACTIVITIES = SQL_MAX_CONCURRENT_ACTIVITIES;
  {$EXTERNALSYM SQL_MAXIMUM_CONCURRENT_ACTIVITIES}
  SQL_DATA_SOURCE_NAME = 2;
  {$EXTERNALSYM SQL_DATA_SOURCE_NAME}
  SQL_FETCH_DIRECTION = 8;
  {$EXTERNALSYM SQL_FETCH_DIRECTION}
  SQL_SERVER_NAME = 13;
  {$EXTERNALSYM SQL_SERVER_NAME}
  SQL_SEARCH_PATTERN_ESCAPE = 14;
  {$EXTERNALSYM SQL_SEARCH_PATTERN_ESCAPE}
  SQL_DBMS_NAME = 17;
  {$EXTERNALSYM SQL_DBMS_NAME}
  SQL_DBMS_VER = 18;
  {$EXTERNALSYM SQL_DBMS_VER}
  SQL_ACCESSIBLE_TABLES = 19;
  {$EXTERNALSYM SQL_ACCESSIBLE_TABLES}
  SQL_ACCESSIBLE_PROCEDURES = 20;
  {$EXTERNALSYM SQL_ACCESSIBLE_PROCEDURES}
  SQL_CURSOR_COMMIT_BEHAVIOR = 23;
  {$EXTERNALSYM SQL_CURSOR_COMMIT_BEHAVIOR}
  SQL_DATA_SOURCE_READ_ONLY = 25;
  {$EXTERNALSYM SQL_DATA_SOURCE_READ_ONLY}
  SQL_DEFAULT_TXN_ISOLATION = 26;
  {$EXTERNALSYM SQL_DEFAULT_TXN_ISOLATION}
  SQL_IDENTIFIER_CASE = 28;
  {$EXTERNALSYM SQL_IDENTIFIER_CASE}
  SQL_IDENTIFIER_QUOTE_CHAR = 29;
  {$EXTERNALSYM SQL_IDENTIFIER_QUOTE_CHAR}
  SQL_MAX_COLUMN_NAME_LEN = 30;
  {$EXTERNALSYM SQL_MAX_COLUMN_NAME_LEN}
  SQL_MAXIMUM_COLUMN_NAME_LENGTH = SQL_MAX_COLUMN_NAME_LEN;
  {$EXTERNALSYM SQL_MAXIMUM_COLUMN_NAME_LENGTH}
  SQL_MAX_CURSOR_NAME_LEN = 31;
  {$EXTERNALSYM SQL_MAX_CURSOR_NAME_LEN}
  SQL_MAXIMUM_CURSOR_NAME_LENGTH = SQL_MAX_CURSOR_NAME_LEN;
  {$EXTERNALSYM SQL_MAXIMUM_CURSOR_NAME_LENGTH}
  SQL_MAX_SCHEMA_NAME_LEN = 32;
  {$EXTERNALSYM SQL_MAX_SCHEMA_NAME_LEN}
  SQL_MAXIMUM_SCHEMA_NAME_LENGTH = SQL_MAX_SCHEMA_NAME_LEN;
  {$EXTERNALSYM SQL_MAXIMUM_SCHEMA_NAME_LENGTH}
  SQL_MAX_CATALOG_NAME_LEN = 34;
  {$EXTERNALSYM SQL_MAX_CATALOG_NAME_LEN}
  SQL_MAXIMUM_CATALOG_NAME_LENGTH = SQL_MAX_CATALOG_NAME_LEN;
  {$EXTERNALSYM SQL_MAXIMUM_CATALOG_NAME_LENGTH}
  SQL_MAX_TABLE_NAME_LEN = 35;
  {$EXTERNALSYM SQL_MAX_TABLE_NAME_LEN}
  SQL_SCROLL_CONCURRENCY = 43;
  {$EXTERNALSYM SQL_SCROLL_CONCURRENCY}
  SQL_TXN_CAPABLE = 46;
  {$EXTERNALSYM SQL_TXN_CAPABLE}
  SQL_TRANSACTION_CAPABLE = SQL_TXN_CAPABLE;
  {$EXTERNALSYM SQL_TRANSACTION_CAPABLE}
  SQL_USER_NAME = 47;
  {$EXTERNALSYM SQL_USER_NAME}
  SQL_TXN_ISOLATION_OPTION = 72;
  {$EXTERNALSYM SQL_TXN_ISOLATION_OPTION}
  SQL_TRANSACTION_ISOLATION_OPTION = SQL_TXN_ISOLATION_OPTION;
  {$EXTERNALSYM SQL_TRANSACTION_ISOLATION_OPTION}
  SQL_INTEGRITY = 73;
  {$EXTERNALSYM SQL_INTEGRITY}
  SQL_GETDATA_EXTENSIONS = 81;
  {$EXTERNALSYM SQL_GETDATA_EXTENSIONS}
  SQL_NULL_COLLATION = 85;
  {$EXTERNALSYM SQL_NULL_COLLATION}
  SQL_ALTER_TABLE = 86;
  {$EXTERNALSYM SQL_ALTER_TABLE}
  SQL_ORDER_BY_COLUMNS_IN_SELECT = 90;
  {$EXTERNALSYM SQL_ORDER_BY_COLUMNS_IN_SELECT}
  SQL_SPECIAL_CHARACTERS = 94;
  {$EXTERNALSYM SQL_SPECIAL_CHARACTERS}
  SQL_MAX_COLUMNS_IN_GROUP_BY = 97;
  {$EXTERNALSYM SQL_MAX_COLUMNS_IN_GROUP_BY}
  SQL_MAXIMUM_COLUMNS_IN_GROUP_BY = SQL_MAX_COLUMNS_IN_GROUP_BY;
  {$EXTERNALSYM SQL_MAXIMUM_COLUMNS_IN_GROUP_BY}
  SQL_MAX_COLUMNS_IN_INDEX = 98;
  {$EXTERNALSYM SQL_MAX_COLUMNS_IN_INDEX}
  SQL_MAXIMUM_COLUMNS_IN_INDEX = SQL_MAX_COLUMNS_IN_INDEX;
  {$EXTERNALSYM SQL_MAXIMUM_COLUMNS_IN_INDEX}
  SQL_MAX_COLUMNS_IN_ORDER_BY = 99;
  {$EXTERNALSYM SQL_MAX_COLUMNS_IN_ORDER_BY}
  SQL_MAXIMUM_COLUMNS_IN_ORDER_BY = SQL_MAX_COLUMNS_IN_ORDER_BY;
  {$EXTERNALSYM SQL_MAXIMUM_COLUMNS_IN_ORDER_BY}
  SQL_MAX_COLUMNS_IN_SELECT = 100;
  {$EXTERNALSYM SQL_MAX_COLUMNS_IN_SELECT}
  SQL_MAXIMUM_COLUMNS_IN_SELECT = SQL_MAX_COLUMNS_IN_SELECT;
  {$EXTERNALSYM SQL_MAXIMUM_COLUMNS_IN_SELECT}
  SQL_MAX_COLUMNS_IN_TABLE = 101;
  {$EXTERNALSYM SQL_MAX_COLUMNS_IN_TABLE}
  SQL_MAX_INDEX_SIZE = 102;
  {$EXTERNALSYM SQL_MAX_INDEX_SIZE}
  SQL_MAXIMUM_INDEX_SIZE = SQL_MAX_INDEX_SIZE;
  {$EXTERNALSYM SQL_MAXIMUM_INDEX_SIZE}
  SQL_MAX_ROW_SIZE = 104;
  {$EXTERNALSYM SQL_MAX_ROW_SIZE}
  SQL_MAXIMUM_ROW_SIZE = SQL_MAX_ROW_SIZE;
  {$EXTERNALSYM SQL_MAXIMUM_ROW_SIZE}
  SQL_MAX_STATEMENT_LEN = 105;
  {$EXTERNALSYM SQL_MAX_STATEMENT_LEN}
  SQL_MAXIMUM_STATEMENT_LENGTH = SQL_MAX_STATEMENT_LEN;
  {$EXTERNALSYM SQL_MAXIMUM_STATEMENT_LENGTH}
  SQL_MAX_TABLES_IN_SELECT = 106;
  {$EXTERNALSYM SQL_MAX_TABLES_IN_SELECT}
  SQL_MAXIMUM_TABLES_IN_SELECT = SQL_MAX_TABLES_IN_SELECT;
  {$EXTERNALSYM SQL_MAXIMUM_TABLES_IN_SELECT}
  SQL_MAX_USER_NAME_LEN = 107;
  {$EXTERNALSYM SQL_MAX_USER_NAME_LEN}
  SQL_MAXIMUM_USER_NAME_LENGTH = SQL_MAX_USER_NAME_LEN;
  {$EXTERNALSYM SQL_MAXIMUM_USER_NAME_LENGTH}
  SQL_OJ_CAPABILITIES = 115;
  {$EXTERNALSYM SQL_OJ_CAPABILITIES}
  SQL_OUTER_JOIN_CAPABILITIES = SQL_OJ_CAPABILITIES;
  {$EXTERNALSYM SQL_OUTER_JOIN_CAPABILITIES}

  SQL_XOPEN_CLI_YEAR = 10000;
  {$EXTERNALSYM SQL_XOPEN_CLI_YEAR}
  SQL_CURSOR_SENSITIVITY = 10001;
  {$EXTERNALSYM SQL_CURSOR_SENSITIVITY}
  SQL_DESCRIBE_PARAMETER = 10002;
  {$EXTERNALSYM SQL_DESCRIBE_PARAMETER}
  SQL_CATALOG_NAME = 10003;
  {$EXTERNALSYM SQL_CATALOG_NAME}
  SQL_COLLATION_SEQ = 10004;
  {$EXTERNALSYM SQL_COLLATION_SEQ}
  SQL_MAX_IDENTIFIER_LEN = 10005;
  {$EXTERNALSYM SQL_MAX_IDENTIFIER_LEN}
  SQL_MAXIMUM_IDENTIFIER_LENGTH = SQL_MAX_IDENTIFIER_LEN;
  {$EXTERNALSYM SQL_MAXIMUM_IDENTIFIER_LENGTH}

// SQL_ALTER_TABLE bitmasks
  SQL_AT_ADD_COLUMN = $00000001;
  {$EXTERNALSYM SQL_AT_ADD_COLUMN}
  SQL_AT_DROP_COLUMN = $00000002;
  {$EXTERNALSYM SQL_AT_DROP_COLUMN}

  SQL_AT_ADD_CONSTRAINT = $00000008;
  {$EXTERNALSYM SQL_AT_ADD_CONSTRAINT}

// The following bitmasks are ODBC extensions and defined in sqlext.h
//  SQL_AT_COLUMN_SINGLE                       0x00000020L
//  SQL_AT_ADD_COLUMN_DEFAULT                  0x00000040L
//  SQL_AT_ADD_COLUMN_COLLATION                0x00000080L
//  SQL_AT_SET_COLUMN_DEFAULT                  0x00000100L
//  SQL_AT_DROP_COLUMN_DEFAULT                 0x00000200L
//  SQL_AT_DROP_COLUMN_CASCADE                 0x00000400L
//  SQL_AT_DROP_COLUMN_RESTRICT                0x00000800L
//  SQL_AT_ADD_TABLE_CONSTRAINT                0x00001000L
//  SQL_AT_DROP_TABLE_CONSTRAINT_CASCADE       0x00002000L
//  SQL_AT_DROP_TABLE_CONSTRAINT_RESTRICT      0x00004000L
//  SQL_AT_CONSTRAINT_NAME_DEFINITION          0x00008000L
//  SQL_AT_CONSTRAINT_INITIALLY_DEFERRED       0x00010000L
//  SQL_AT_CONSTRAINT_INITIALLY_IMMEDIATE      0x00020000L
//  SQL_AT_CONSTRAINT_DEFERRABLE               0x00040000L
//  SQL_AT_CONSTRAINT_NON_DEFERRABLE           0x00080000L


// SQL_ASYNC_MODE values
  SQL_AM_NONE = 0;
  {$EXTERNALSYM SQL_AM_NONE}
  SQL_AM_CONNECTION = 1;
  {$EXTERNALSYM SQL_AM_CONNECTION}
  SQL_AM_STATEMENT = 2;
  {$EXTERNALSYM SQL_AM_STATEMENT}

// SQL_CURSOR_COMMIT_BEHAVIOR values
  SQL_CB_DELETE = 0;
  {$EXTERNALSYM SQL_CB_DELETE}
  SQL_CB_CLOSE = 1;
  {$EXTERNALSYM SQL_CB_CLOSE}
  SQL_CB_PRESERVE = 2;
  {$EXTERNALSYM SQL_CB_PRESERVE}

// SQL_FETCH_DIRECTION bitmasks
  SQL_FD_FETCH_NEXT = $00000001;
  {$EXTERNALSYM SQL_FD_FETCH_NEXT}
  SQL_FD_FETCH_FIRST = $00000002;
  {$EXTERNALSYM SQL_FD_FETCH_FIRST}
  SQL_FD_FETCH_LAST = $00000004;
  {$EXTERNALSYM SQL_FD_FETCH_LAST}
  SQL_FD_FETCH_PRIOR = $00000008;
  {$EXTERNALSYM SQL_FD_FETCH_PRIOR}
  SQL_FD_FETCH_ABSOLUTE = $00000010;
  {$EXTERNALSYM SQL_FD_FETCH_ABSOLUTE}
  SQL_FD_FETCH_RELATIVE = $00000020;
  {$EXTERNALSYM SQL_FD_FETCH_RELATIVE}

// SQL_GETDATA_EXTENSIONS bitmasks
  SQL_GD_ANY_COLUMN = $00000001;
  {$EXTERNALSYM SQL_GD_ANY_COLUMN}
  SQL_GD_ANY_ORDER = $00000002;
  {$EXTERNALSYM SQL_GD_ANY_ORDER}

// SQL_IDENTIFIER_CASE values
  SQL_IC_UPPER = 1;
  {$EXTERNALSYM SQL_IC_UPPER}
  SQL_IC_LOWER = 2;
  {$EXTERNALSYM SQL_IC_LOWER}
  SQL_IC_SENSITIVE = 3;
  {$EXTERNALSYM SQL_IC_SENSITIVE}
  SQL_IC_MIXED = 4;
  {$EXTERNALSYM SQL_IC_MIXED}

// SQL_OJ_CAPABILITIES bitmasks
// NB: this means 'outer join', not what  you may be thinking
  SQL_OJ_LEFT = $00000001;
  {$EXTERNALSYM SQL_OJ_LEFT}
  SQL_OJ_RIGHT = $00000002;
  {$EXTERNALSYM SQL_OJ_RIGHT}
  SQL_OJ_FULL = $00000004;
  {$EXTERNALSYM SQL_OJ_FULL}
  SQL_OJ_NESTED = $00000008;
  {$EXTERNALSYM SQL_OJ_NESTED}
  SQL_OJ_NOT_ORDERED = $00000010;
  {$EXTERNALSYM SQL_OJ_NOT_ORDERED}
  SQL_OJ_INNER = $00000020;
  {$EXTERNALSYM SQL_OJ_INNER}
  SQL_OJ_ALL_COMPARISON_OPS = $00000040;
  {$EXTERNALSYM SQL_OJ_ALL_COMPARISON_OPS}

// SQL_SCROLL_CONCURRENCY bitmasks
  SQL_SCCO_READ_ONLY = $00000001;
  {$EXTERNALSYM SQL_SCCO_READ_ONLY}
  SQL_SCCO_LOCK = $00000002;
  {$EXTERNALSYM SQL_SCCO_LOCK}
  SQL_SCCO_OPT_ROWVER = $00000004;
  {$EXTERNALSYM SQL_SCCO_OPT_ROWVER}
  SQL_SCCO_OPT_VALUES = $00000008;
  {$EXTERNALSYM SQL_SCCO_OPT_VALUES}

// SQL_TXN_CAPABLE values
  SQL_TC_NONE = 0;
  {$EXTERNALSYM SQL_TC_NONE}
  SQL_TC_DML = 1;
  {$EXTERNALSYM SQL_TC_DML}
  SQL_TC_ALL = 2;
  {$EXTERNALSYM SQL_TC_ALL}
  SQL_TC_DDL_COMMIT = 3;
  {$EXTERNALSYM SQL_TC_DDL_COMMIT}
  SQL_TC_DDL_IGNORE = 4;
  {$EXTERNALSYM SQL_TC_DDL_IGNORE}

// SQL_TXN_ISOLATION_OPTION bitmasks
  SQL_TXN_READ_UNCOMMITTED = $00000001;
  {$EXTERNALSYM SQL_TXN_READ_UNCOMMITTED}
  SQL_TRANSACTION_READ_UNCOMMITTED = SQL_TXN_READ_UNCOMMITTED;
  {$EXTERNALSYM SQL_TRANSACTION_READ_UNCOMMITTED}
  SQL_TXN_READ_COMMITTED = $00000002;
  {$EXTERNALSYM SQL_TXN_READ_COMMITTED}
  SQL_TRANSACTION_READ_COMMITTED = SQL_TXN_READ_COMMITTED;
  {$EXTERNALSYM SQL_TRANSACTION_READ_COMMITTED}
  SQL_TXN_REPEATABLE_READ = $00000004;
  {$EXTERNALSYM SQL_TXN_REPEATABLE_READ}
  SQL_TRANSACTION_REPEATABLE_READ = SQL_TXN_REPEATABLE_READ;
  {$EXTERNALSYM SQL_TRANSACTION_REPEATABLE_READ}
  SQL_TXN_SERIALIZABLE = $00000008;
  {$EXTERNALSYM SQL_TXN_SERIALIZABLE}
  SQL_TRANSACTION_SERIALIZABLE = SQL_TXN_SERIALIZABLE;
  {$EXTERNALSYM SQL_TRANSACTION_SERIALIZABLE}

// SQL_NULL_COLLATION values
  SQL_NC_HIGH = 0;
  {$EXTERNALSYM SQL_NC_HIGH}
  SQL_NC_LOW = 1;
  {$EXTERNALSYM SQL_NC_LOW}

function SQLAllocConnect(EnvironmentHandle: SQLHENV; var ConnectionHandle: SQLHDBC): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLAllocConnect}

function SQLAllocEnv(var EnvironmentHandle: SQLHENV): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLAllocEnv}

function SQLAllocHandle(HandleType: SQLSMALLINT; InputHandle: SQLHANDLE; var OutputHandle: SQLHANDLE): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLAllocHandle}

function SQLAllocStmt(ConnectionHandle: SQLHDBC; var StatementHandle: SQLHSTMT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLAllocStmt}

function SQLBindCol(StatementHandle: SQLHSTMT; ColumnNumber: SQLUSMALLINT;
                    TargetType: SQLSMALLINT; TargetValue: SQLPOINTER;
                    BufferLength: SQLLEN; StrLen_or_Ind: PSQLLEN): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLBindCol}

function SQLBindParam(StatementHandle: SQLHSTMT; ParameterNumber: SQLUSMALLINT;
                      ValueType, ParameterType: SQLSMALLINT; LengthPrecision: SQLULEN;
                      ParameterScale: SQLSMALLINT; ParameterValue: SQLPOINTER;
                      StrLen_or_Ind: PSQLLEN): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLBindParam}

function SQLCancel(StatementHandle: SQLHSTMT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLCancel}

function SQLCancelHandle(HandleType: SQLSMALLINT; InputHandle: SQLHANDLE): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLCancelHandle}

function SQLCloseCursor(StatementHandle: SQLHSTMT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLCloseCursor}

function SQLColAttribute(hstmt: SQLHSTMT; iCol, iField: SQLUSMALLINT; pCharAttr: SQLPOINTER;
                         cbDescMax: SQLSMALLINT; var pcbCharAttr: SQLSMALLINT;
                         var pNumAttr: SQLLEN): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLColAttribute}
function SQLColAttributeA(hstmt: SQLHSTMT; iCol, iField: SQLUSMALLINT; pCharAttr: SQLPOINTER;
                         cbDescMax: SQLSMALLINT; var pcbCharAttr: SQLSMALLINT;
                         var pNumAttr: SQLLEN): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLColAttributeA}
function SQLColAttributeW(hstmt: SQLHSTMT; iCol, iField: SQLUSMALLINT; pCharAttr: SQLPOINTER;
                         cbDescMax: SQLSMALLINT; var pcbCharAttr: SQLSMALLINT;
                         var pNumAttr: SQLLEN): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLColAttributeW}

function SQLColumns(hstmt: SQLHSTMT; szCatalogName: LPCWSTR; cchCatalogName: SQLSMALLINT;
                    szSchemaName: LPCWSTR; cchSchemaName: SQLSMALLINT;
                    szTableName: LPCWSTR; cchTableName: SQLSMALLINT;
                    szColumnName: LPCWSTR; cchColumnName: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLColumns}
function SQLColumnsA(hstmt: SQLHSTMT; szCatalogName: LPCSTR; cchCatalogName: SQLSMALLINT;
                    szSchemaName: LPCSTR; cchSchemaName: SQLSMALLINT;
                    szTableName: LPCSTR; cchTableName: SQLSMALLINT;
                    szColumnName: LPCSTR; cchColumnName: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLColumnsA}
function SQLColumnsW(hstmt: SQLHSTMT; szCatalogName: LPCWSTR; cchCatalogName: SQLSMALLINT;
                    szSchemaName: LPCWSTR; cchSchemaName: SQLSMALLINT;
                    szTableName: LPCWSTR; cchTableName: SQLSMALLINT;
                    szColumnName: LPCWSTR; cchColumnName: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLColumnsW}

function SQLConnect(hdbc: SQLHDBC; szDSN: LPCWSTR; cchDSN: SQLSMALLINT;
                    szUID: LPCWSTR; cchUID: SQLSMALLINT; szAuthStr: LPCWSTR;
                    cchAuthStr: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLConnect}
function SQLConnectA(hdbc: SQLHDBC; szDSN: LPCSTR; cchDSN: SQLSMALLINT;
                    szUID: LPCSTR; cchUID: SQLSMALLINT; szAuthStr: LPCSTR;
                    cchAuthStr: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLConnectA}
function SQLConnectW(hdbc: SQLHDBC; szDSN: LPCWSTR; cchDSN: SQLSMALLINT;
                    szUID: LPCWSTR; cchUID: SQLSMALLINT; szAuthStr: LPCWSTR;
                    cchAuthStr: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLConnectW}

function SqlCopyDesc(SourceDescHandle: SQLHDESC; TargetDescHandle: SQLHDESC): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SqlCopyDesc}

function SQLDataSources(henv: SQLHENV; fDirection: SQLUSMALLINT; szDSN: LPCWSTR;
                         cchDSNMax: SQLSMALLINT; var pcchDSN: SQLSMALLINT;
                         wszDescription: LPCWSTR; cchDescriptionMax: SQLSMALLINT;
                         var pcchDescription: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLDataSources}
function SQLDataSourcesA(henv: SQLHENV; fDirection: SQLUSMALLINT; szDSN: LPCSTR;
                         cchDSNMax: SQLSMALLINT; var pcchDSN: SQLSMALLINT;
                         wszDescription: LPCSTR; cchDescriptionMax: SQLSMALLINT;
                         var pcchDescription: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLDataSourcesA}
function SQLDataSourcesW(henv: SQLHENV; fDirection: SQLUSMALLINT; szDSN: LPCWSTR;
                         cchDSNMax: SQLSMALLINT; var pcchDSN: SQLSMALLINT;
                         wszDescription: LPCWSTR; cchDescriptionMax: SQLSMALLINT;
                         var pcchDescription: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLDataSourcesW}

function SQLDescribeCol(hstmt: SQLHSTMT; icol: SQLUSMALLINT; szColName: LPCWSTR;
                        cchColNameMax: SQLSMALLINT; var pcchColName: SQLSMALLINT;
                        var pfSqlType: SQLSMALLINT; var pcbColDef: SQLULEN;
                        var pibScale: SQLSMALLINT; var pfNullable: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLDescribeCol}
function SQLDescribeColA(hstmt: SQLHSTMT; icol: SQLUSMALLINT; szColName: LPCSTR;
                        cchColNameMax: SQLSMALLINT; var pcchColName: SQLSMALLINT;
                        var pfSqlType: SQLSMALLINT; var pcbColDef: SQLULEN;
                        var pibScale: SQLSMALLINT; var pfNullable: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLDescribeColA}
function SQLDescribeColW(hstmt: SQLHSTMT; icol: SQLUSMALLINT; szColName: LPCWSTR;
                        cchColNameMax: SQLSMALLINT; var pcchColName: SQLSMALLINT;
                        var pfSqlType: SQLSMALLINT; var pcbColDef: SQLULEN;
                        var pibScale: SQLSMALLINT; var pfNullable: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLDescribeColW}

function SQLDisconnect(ConnectionHandle: SQLHDBC): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLDisconnect}

function SQLEndTran(HandleType: SQLSMALLINT; Handle: SQLHANDLE; CompletionType: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLEndTran}

function SQLError(henv: SQLHENV; hdbc: SQLHDBC; hstmt: SQLHSTMT; SqlState: LPCWSTR;
                  var pfNativeError: SQLINTEGER; wszErrorMesg: LPCWSTR;
                  cchErrorMsgMax: SQLSMALLINT; var pcchErrorMsg: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLError}
function SQLErrorA(henv: SQLHENV; hdbc: SQLHDBC; hstmt: SQLHSTMT; SqlState: LPCSTR;
                  var pfNativeError: SQLINTEGER; wszErrorMesg: LPCSTR;
                  cchErrorMsgMax: SQLSMALLINT; var pcchErrorMsg: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLErrorA}
function SQLErrorW(henv: SQLHENV; hdbc: SQLHDBC; hstmt: SQLHSTMT; SqlState: LPCWSTR;
                  var pfNativeError: SQLINTEGER; wszErrorMesg: LPCWSTR;
                  cchErrorMsgMax: SQLSMALLINT; var pcchErrorMsg: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLErrorW}

function SQLExecDirect(hstmt: SQLHSTMT; szSqlStr: LPCWSTR; TextLength: SQLINTEGER): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLExecDirect}
function SQLExecDirectA(hstmt: SQLHSTMT; szSqlStr: LPCSTR; TextLength: SQLINTEGER): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLExecDirectA}
function SQLExecDirectW(hstmt: SQLHSTMT; szSqlStr: LPCWSTR; TextLength: SQLINTEGER): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLExecDirectW}

function SQLExecute(StatementHandle: SQLHSTMT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLExecute}

function SQLFetch(StatementHandle: SQLHSTMT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLFetch}

function SQLFetchScroll(StatementHandle: SQLHSTMT; FetchOrientation: SQLSMALLINT;
                        FetchOffset: SQLLEN): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLFetchScroll}

function SQLFreeConnect(ConnectionHandle: SQLHDBC): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLFreeConnect}

function SQLFreeEnv(EnvironmentHandle: SQLHENV): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLFreeEnv}

function SQLFreeHandle(HandleType: SQLSMALLINT; Handle: SQLHANDLE): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLFreeHandle}

function SQLFreeStmt(StatementHandle: SQLHSTMT; Option: SQLUSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLFreeStmt}

function SQLGetConnectAttr(hdbc: SQLHDBC; fAttribute: SQLINTEGER; rgbValue: SQLPOINTER;
                           cbValueMax: SQLINTEGER; var pcbValue: SQLINTEGER): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLGetConnectAttr}
function SQLGetConnectAttrA(hdbc: SQLHDBC; fAttribute: SQLINTEGER; rgbValue: SQLPOINTER;
                           cbValueMax: SQLINTEGER; var pcbValue: SQLINTEGER): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLGetConnectAttrA}
function SQLGetConnectAttrW(hdbc: SQLHDBC; fAttribute: SQLINTEGER; rgbValue: SQLPOINTER;
                           cbValueMax: SQLINTEGER; var pcbValue: SQLINTEGER): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLGetConnectAttrW}

function SQLGetConnectOption(hdbc: SQLHDBC; fOption: SQLUSMALLINT; pvParam: SQLPOINTER): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLGetConnectOption}
function SQLGetConnectOptionA(hdbc: SQLHDBC; fOption: SQLUSMALLINT; pvParam: SQLPOINTER): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLGetConnectOptionA}
function SQLGetConnectOptionW(hdbc: SQLHDBC; fOption: SQLUSMALLINT; pvParam: SQLPOINTER): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLGetConnectOptionW}

function SQLGetCursorName(hstmt: SQLHSTMT; szCursor: LPCWSTR; cchCursorMax: SQLSMALLINT;
                          var pcchCursor: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLGetCursorName}
function SQLGetCursorNameA(hstmt: SQLHSTMT; szCursor: LPCSTR; cchCursorMax: SQLSMALLINT;
                          var pcchCursor: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLGetCursorNameA}
function SQLGetCursorNameW(hstmt: SQLHSTMT; szCursor: LPCWSTR; cchCursorMax: SQLSMALLINT;
                          var pcchCursor: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLGetCursorNameW}

function SQLGetData(StatementHandle: SQLHSTMT; ColumnNumber: SQLUSMALLINT;
                    TargetType: SQLSMALLINT; TargetValue: SQLPOINTER; BufferLength: SQLLEN;
                    StrLen_or_IndPtr: PSQLLEN): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLGetData}

function SQLGetDescField(hdesc: SQLHDESC; iRecord, iField: SQLSMALLINT;
                         rgbValue: SQLPOINTER; cbBufferLength: SQLINTEGER;
                         var StringLength: SQLINTEGER): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLGetDescField}
function SQLGetDescFieldA(hdesc: SQLHDESC; iRecord, iField: SQLSMALLINT;
                         rgbValue: SQLPOINTER; cbBufferLength: SQLINTEGER;
                         var StringLength: SQLINTEGER): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLGetDescFieldA}
function SQLGetDescFieldW(hdesc: SQLHDESC; iRecord, iField: SQLSMALLINT;
                         rgbValue: SQLPOINTER; cbBufferLength: SQLINTEGER;
                         var StringLength: SQLINTEGER): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLGetDescFieldW}

function SQLGetDescRec(hdesc: SQLHDESC; iRecord: SQLSMALLINT; szName: LPCWSTR;
                       cchNameMax: SQLSMALLINT; var pcchName: SQLSMALLINT;
                       var pfType: SQLSMALLINT; var pfSubType: SQLSMALLINT;
                       var pLength: SQLLEN; var pPrecision: SQLSMALLINT;
                       var pScale: SQLSMALLINT; var pNullable: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLGetDescRec}
function SQLGetDescRecA(hdesc: SQLHDESC; iRecord: SQLSMALLINT; szName: LPCSTR;
                       cchNameMax: SQLSMALLINT; var pcchName: SQLSMALLINT;
                       var pfType: SQLSMALLINT; var pfSubType: SQLSMALLINT;
                       var pLength: SQLLEN; var pPrecision: SQLSMALLINT;
                       var pScale: SQLSMALLINT; var pNullable: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLGetDescRecA}
function SQLGetDescRecW(hdesc: SQLHDESC; iRecord: SQLSMALLINT; szName: LPCWSTR;
                       cchNameMax: SQLSMALLINT; var pcchName: SQLSMALLINT;
                       var pfType: SQLSMALLINT; var pfSubType: SQLSMALLINT;
                       var pLength: SQLLEN; var pPrecision: SQLSMALLINT;
                       var pScale: SQLSMALLINT; var pNullable: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLGetDescRecW}

function SQLGetDiagField(fHandleType: SQLSMALLINT; handle: SQLHANDLE;
                         iRecord, fDiagField: SQLSMALLINT; rgbDiagInfo: SQLPOINTER;
                         cbBufferLength: SQLSMALLINT; var pcbStringLength: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLGetDiagField}
function SQLGetDiagFieldA(fHandleType: SQLSMALLINT; handle: SQLHANDLE;
                         iRecord, fDiagField: SQLSMALLINT; rgbDiagInfo: SQLPOINTER;
                         cbBufferLength: SQLSMALLINT; var pcbStringLength: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLGetDiagFieldA}
function SQLGetDiagFieldW(fHandleType: SQLSMALLINT; handle: SQLHANDLE;
                         iRecord, fDiagField: SQLSMALLINT; rgbDiagInfo: SQLPOINTER;
                         cbBufferLength: SQLSMALLINT; var pcbStringLength: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLGetDiagFieldW}

function SQLGetDiagRec(fHandleType: SQLSMALLINT; handle: SQLHANDLE; iRecord: SQLSMALLINT;
                       szSqlState: LPCWSTR; var pfNativeError: SQLINTEGER;
                       szErrorMsg: LPCWSTR; cchErrorMsgMax: SQLSMALLINT;
                       var pcchErrorMsg: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLGetDiagRec}
function SQLGetDiagRecA(fHandleType: SQLSMALLINT; handle: SQLHANDLE; iRecord: SQLSMALLINT;
                       szSqlState: LPCSTR; var pfNativeError: SQLINTEGER;
                       szErrorMsg: LPCSTR; cchErrorMsgMax: SQLSMALLINT;
                       var pcchErrorMsg: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLGetDiagRecA}
function SQLGetDiagRecW(fHandleType: SQLSMALLINT; handle: SQLHANDLE; iRecord: SQLSMALLINT;
                       szSqlState: LPCWSTR; var pfNativeError: SQLINTEGER;
                       szErrorMsg: LPCWSTR; cchErrorMsgMax: SQLSMALLINT;
                       var pcchErrorMsg: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLGetDiagRecW}

function SQLGetEnvAttr(EnvironmentHandle: SQLHENV; Attribute: SQLINTEGER; Value: SQLPOINTER;
                       BufferLength: SQLINTEGER; var StringLength: SQLINTEGER): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLGetEnvAttr}

function SQLGetFunctions(ConnectionHandle: SQLHDBC; FunctionId: SQLUSMALLINT;
                         var Supported: SQLUSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLGetFunctions}

function SQLGetInfo(hdbc: SQLHDBC; fInfoType: SQLUSMALLINT; rgbInfoValue: SQLPOINTER;
                    cbInfoValueMax: SQLSMALLINT; var pcbInfoValue: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLGetInfo}
function SQLGetInfoA(hdbc: SQLHDBC; fInfoType: SQLUSMALLINT; rgbInfoValue: SQLPOINTER;
                    cbInfoValueMax: SQLSMALLINT; var pcbInfoValue: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLGetInfoA}
function SQLGetInfoW(hdbc: SQLHDBC; fInfoType: SQLUSMALLINT; rgbInfoValue: SQLPOINTER;
                    cbInfoValueMax: SQLSMALLINT; var pcbInfoValue: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLGetInfoW}

function SQLGetStmtAttr(hstmt: SQLHSTMT; fAttribute: SQLINTEGER; rgbValue: SQLPOINTER;
                        cbValueMax: SQLINTEGER; var pcbValue: SQLINTEGER): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLGetStmtAttr}
function SQLGetStmtAttrA(hstmt: SQLHSTMT; fAttribute: SQLINTEGER; rgbValue: SQLPOINTER;
                        cbValueMax: SQLINTEGER; var pcbValue: SQLINTEGER): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLGetStmtAttrA}
function SQLGetStmtAttrW(hstmt: SQLHSTMT; fAttribute: SQLINTEGER; rgbValue: SQLPOINTER;
                        cbValueMax: SQLINTEGER; var pcbValue: SQLINTEGER): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLGetStmtAttrW}

function SQLGetStmtOption(StatementHandle: SQLHSTMT; Option: SQLUSMALLINT; Value: SQLPOINTER): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLGetStmtOption}

function SQLGetTypeInfo(StatementHandle: SQLHSTMT; DataType: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLGetTypeInfo}
function SQLGetTypeInfoA(StatementHandle: SQLHSTMT; DataType: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLGetTypeInfoA}
function SQLGetTypeInfoW(StatementHandle: SQLHSTMT; DataType: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLGetTypeInfoW}

function SQLNumResultCols(StatementHandle: SQLHSTMT; var ColumnCount: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLNumResultCols}

function SQLParamData(StatementHandle: SQLHSTMT; Value: SQLPOINTER): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLParamData}

function SQLPrepare(hstmt: SQLHSTMT; szSqlStr: LPCWSTR; cchSqlStr: SQLINTEGER): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLPrepare}
function SQLPrepareA(hstmt: SQLHSTMT; szSqlStr: LPCSTR; cchSqlStr: SQLINTEGER): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLPrepareA}
function SQLPrepareW(hstmt: SQLHSTMT; szSqlStr: LPCWSTR; cchSqlStr: SQLINTEGER): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLPrepareW}

function SQLPutData(StatementHandle: SQLHSTMT; Data: SQLPOINTER; StrLen_or_Ind: SQLLEN): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLPutData}

function SQLRowCount(StatementHandle: SQLHSTMT; var RowCount: SQLLEN): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLRowCount}

function SQLSetConnectAttr(hdbc: SQLHDBC; fAttribute: SQLINTEGER; rgbValue: SQLPOINTER;
                           cbValue: SQLINTEGER): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLSetConnectAttr}
function SQLSetConnectAttrA(hdbc: SQLHDBC; fAttribute: SQLINTEGER; rgbValue: SQLPOINTER;
                           cbValue: SQLINTEGER): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLSetConnectAttrA}
function SQLSetConnectAttrW(hdbc: SQLHDBC; fAttribute: SQLINTEGER; rgbValue: SQLPOINTER;
                           cbValue: SQLINTEGER): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLSetConnectAttrW}

function SQLSetConnectOption(hdbc: SQLHDBC; fOption: SQLUSMALLINT; vParam: SQLULEN): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLSetConnectOption}
function SQLSetConnectOptionA(hdbc: SQLHDBC; fOption: SQLUSMALLINT; vParam: SQLULEN): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLSetConnectOptionA}
function SQLSetConnectOptionW(hdbc: SQLHDBC; fOption: SQLUSMALLINT; vParam: SQLULEN): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLSetConnectOptionW}

function SQLSetCursorName(hstmt: SQLHSTMT; szCursor: LPCWSTR; cchCursor: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLSetCursorName}
function SQLSetCursorNameA(hstmt: SQLHSTMT; szCursor: LPCSTR; cchCursor: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLSetCursorNameA}
function SQLSetCursorNameW(hstmt: SQLHSTMT; szCursor: LPCWSTR; cchCursor: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLSetCursorNameW}

function SQLSetDescField(DescriptorHandle: SQLHDESC; RecNumber, FieldIdentifier: SQLSMALLINT;
                         Value: SQLPOINTER; BufferLength: SQLINTEGER): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLSetDescField}

function SQLSetDescRec(DescriptorHandle: SQLHDESC; RecNumber, _Type, SubType: SQLSMALLINT;
                       Length: SQLLEN; Precision, Scale: SQLSMALLINT;
                       Data: SQLPOINTER; var StringLength: SQLLEN;
                       var Indicator: SQLLEN): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLSetDescRec}

function SQLSetEnvAttr(EnvironmentHandle: SQLHENV; Attribute: SQLINTEGER;
                       Value: SQLPOINTER; StringLength: SQLINTEGER): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLSetEnvAttr}

function SQLSetParam(StatementHandle: SQLHSTMT; ParameterNumber: SQLUSMALLINT;
                     ValueType, ParameterType: SQLSMALLINT; LengthPrecision: SQLULEN;
                     ParameterScale: SQLSMALLINT; ParameterValue: SQLPOINTER;
                     var StrLen_or_Ind: SQLLEN): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLSetParam}

function SQLSetStmtAttr(hstmt: SQLHSTMT; fAttribute: SQLINTEGER; rgbValue: SQLPOINTER;
                        cbValueMax: SQLINTEGER): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLSetStmtAttr}

function SQLSetStmtOption(StatementHandle: SQLHSTMT; Option: SQLUSMALLINT; Value: SQLULEN): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLSetStmtOption}

function SQLSpecialColumns(hstmt: SQLHSTMT; fColType: SQLUSMALLINT;
                           szCatalogName: LPCWSTR; cchCatalogName: SQLSMALLINT;
                           szSchemaName: LPCWSTR; cchSchemaName: SQLSMALLINT;
                           szTableName: LPCWSTR; cchTableName: SQLSMALLINT;
                           fScope, fNullable: SQLUSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLSpecialColumns}
function SQLSpecialColumnsA(hstmt: SQLHSTMT; fColType: SQLUSMALLINT;
                           szCatalogName: LPCSTR; cchCatalogName: SQLSMALLINT;
                           szSchemaName: LPCSTR; cchSchemaName: SQLSMALLINT;
                           szTableName: LPCSTR; cchTableName: SQLSMALLINT;
                           fScope, fNullable: SQLUSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLSpecialColumnsA}
function SQLSpecialColumnsW(hstmt: SQLHSTMT; fColType: SQLUSMALLINT;
                           szCatalogName: LPCWSTR; cchCatalogName: SQLSMALLINT;
                           szSchemaName: LPCWSTR; cchSchemaName: SQLSMALLINT;
                           szTableName: LPCWSTR; cchTableName: SQLSMALLINT;
                           fScope, fNullable: SQLUSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLSpecialColumnsW}

function SQLStatistics(hstmt: SQLHSTMT; szCatalogName: LPCWSTR; cchCatalogName: SQLSMALLINT;
                       szSchemaName: LPCWSTR; cchSchemaName: SQLSMALLINT;
                       szTableName: LPCWSTR; cchTableName: SQLSMALLINT;
                       fUnique, fAccuracy: SQLUSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLStatistics}
function SQLStatisticsA(hstmt: SQLHSTMT; szCatalogName: LPCSTR; cchCatalogName: SQLSMALLINT;
                       szSchemaName: LPCSTR; cchSchemaName: SQLSMALLINT;
                       szTableName: LPCSTR; cchTableName: SQLSMALLINT;
                       fUnique, fAccuracy: SQLUSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLStatisticsA}
function SQLStatisticsW(hstmt: SQLHSTMT; szCatalogName: LPCWSTR; cchCatalogName: SQLSMALLINT;
                       szSchemaName: LPCWSTR; cchSchemaName: SQLSMALLINT;
                       szTableName: LPCWSTR; cchTableName: SQLSMALLINT;
                       fUnique, fAccuracy: SQLUSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLStatisticsW}

function SQLTables(hstmt: SQLHSTMT; szCatalogName: LPCWSTR; cchCatalogName: SQLSMALLINT;
                   szSchemaName: LPCWSTR; cchSchemaName: SQLSMALLINT;
                   szTableName: LPCWSTR; cchTableName: SQLSMALLINT;
                   szTableType: LPCWSTR; cchTableType: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLTables}
function SQLTablesA(hstmt: SQLHSTMT; szCatalogName: LPCSTR; cchCatalogName: SQLSMALLINT;
                   szSchemaName: LPCSTR; cchSchemaName: SQLSMALLINT;
                   szTableName: LPCSTR; cchTableName: SQLSMALLINT;
                   szTableType: LPCSTR; cchTableType: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLTablesA}
function SQLTablesW(hstmt: SQLHSTMT; szCatalogName: LPCWSTR; cchCatalogName: SQLSMALLINT;
                   szSchemaName: LPCWSTR; cchSchemaName: SQLSMALLINT;
                   szTableName: LPCWSTR; cchTableName: SQLSMALLINT;
                   szTableType: LPCWSTR; cchTableType: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLTablesW}

function SQLTransact(EnvironmentHandle: SQLHENV; ConnectionHandle: SQLHDBC;
                     CompletionType: SQLUSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLTransact}


{ Translated from sqlext.h }

// generally useful constants
const
  SQL_SPEC_MAJOR = 3;        // Major version of specification
  {$EXTERNALSYM SQL_SPEC_MAJOR}
  SQL_SPEC_MINOR = 80;       // Minor version of specification
  {$EXTERNALSYM SQL_SPEC_MINOR}
  SQL_SPEC_STRING = '03.80'; // String constant for version
  {$EXTERNALSYM SQL_SPEC_STRING}

  SQL_SQLSTATE_SIZE = 5;     // size of SQLSTATE
  {$EXTERNALSYM SQL_SQLSTATE_SIZE}

type
  SQLSTATE = array[0..SQL_SQLSTATE_SIZE] of SQLTCHAR;
  {$EXTERNALSYM SQLSTATE}

const
  SQL_MAX_DSN_LENGTH = 32;  // maximum data source name size
  {$EXTERNALSYM SQL_MAX_DSN_LENGTH}

  SQL_MAX_OPTION_STRING_LENGTH = 256;
  {$EXTERNALSYM SQL_MAX_OPTION_STRING_LENGTH}

// return code SQL_NO_DATA_FOUND is the same as SQL_NO_DATA
  SQL_NO_DATA_FOUND = SQL_NO_DATA;
  {$EXTERNALSYM SQL_NO_DATA_FOUND}

// an end handle type
  SQL_HANDLE_SENV = 5;
  {$EXTERNALSYM SQL_HANDLE_SENV}

// env attribute
  SQL_ATTR_ODBC_VERSION = 200;
  {$EXTERNALSYM SQL_ATTR_ODBC_VERSION}
  SQL_ATTR_CONNECTION_POOLING = 201;
  {$EXTERNALSYM SQL_ATTR_CONNECTION_POOLING}
  SQL_ATTR_CP_MATCH = 202;
  {$EXTERNALSYM SQL_ATTR_CP_MATCH}

// values for SQL_ATTR_CONNECTION_POOLING
  SQL_CP_OFF = 0;
  {$EXTERNALSYM SQL_CP_OFF}
  SQL_CP_ONE_PER_DRIVER = 1;
  {$EXTERNALSYM SQL_CP_ONE_PER_DRIVER}
  SQL_CP_ONE_PER_HENV = 2;
  {$EXTERNALSYM SQL_CP_ONE_PER_HENV}
  SQL_CP_DEFAULT = SQL_CP_OFF;
  {$EXTERNALSYM SQL_CP_DEFAULT}

// values for SQL_ATTR_CP_MATCH */
  SQL_CP_STRICT_MATCH = 0;
  {$EXTERNALSYM SQL_CP_STRICT_MATCH}
  SQL_CP_RELAXED_MATCH = 1;
  {$EXTERNALSYM SQL_CP_RELAXED_MATCH}
  SQL_CP_MATCH_DEFAULT = SQL_CP_STRICT_MATCH;
  {$EXTERNALSYM SQL_CP_MATCH_DEFAULT}

// values for SQL_ATTR_ODBC_VERSION
  SQL_OV_ODBC2 = 2;
  {$EXTERNALSYM SQL_OV_ODBC2}
  SQL_OV_ODBC3 = 3;
  {$EXTERNALSYM SQL_OV_ODBC3}

// new values for SQL_ATTR_ODBC_VERSION
// From ODBC 3.8 onwards, we should use <major version> * 100 + <minor version>
  SQL_OV_ODBC3_80 = 380;
  {$EXTERNALSYM SQL_OV_ODBC3_80}


// connection attributes
  SQL_ACCESS_MODE = 101;
  {$EXTERNALSYM SQL_ACCESS_MODE}
  SQL_AUTOCOMMIT = 102;
  {$EXTERNALSYM SQL_AUTOCOMMIT}
  SQL_LOGIN_TIMEOUT = 103;
  {$EXTERNALSYM SQL_LOGIN_TIMEOUT}
  SQL_OPT_TRACE = 104;
  {$EXTERNALSYM SQL_OPT_TRACE}
  SQL_OPT_TRACEFILE = 105;
  {$EXTERNALSYM SQL_OPT_TRACEFILE}
  SQL_TRANSLATE_DLL = 106;
  {$EXTERNALSYM SQL_TRANSLATE_DLL}
  SQL_TRANSLATE_OPTION = 107;
  {$EXTERNALSYM SQL_TRANSLATE_OPTION}
  SQL_TXN_ISOLATION = 108;
  {$EXTERNALSYM SQL_TXN_ISOLATION}
  SQL_CURRENT_QUALIFIER = 109;
  {$EXTERNALSYM SQL_CURRENT_QUALIFIER}
  SQL_ODBC_CURSORS = 110;
  {$EXTERNALSYM SQL_ODBC_CURSORS}
  SQL_QUIET_MODE = 111;
  {$EXTERNALSYM SQL_QUIET_MODE}
  SQL_PACKET_SIZE = 112;
  {$EXTERNALSYM SQL_PACKET_SIZE}

// connection attributes with new names
  SQL_ATTR_ACCESS_MODE = SQL_ACCESS_MODE;
  {$EXTERNALSYM SQL_ATTR_ACCESS_MODE}
  SQL_ATTR_AUTOCOMMIT = SQL_AUTOCOMMIT;
  {$EXTERNALSYM SQL_ATTR_AUTOCOMMIT}
  SQL_ATTR_CONNECTION_TIMEOUT = 113;
  {$EXTERNALSYM SQL_ATTR_CONNECTION_TIMEOUT}
  SQL_ATTR_CURRENT_CATALOG = SQL_CURRENT_QUALIFIER;
  {$EXTERNALSYM SQL_ATTR_CURRENT_CATALOG}
  SQL_ATTR_DISCONNECT_BEHAVIOR = 114;
  {$EXTERNALSYM SQL_ATTR_DISCONNECT_BEHAVIOR}
  SQL_ATTR_ENLIST_IN_DTC = 1207;
  {$EXTERNALSYM SQL_ATTR_ENLIST_IN_DTC}
  SQL_ATTR_ENLIST_IN_XA = 1208;
  {$EXTERNALSYM SQL_ATTR_ENLIST_IN_XA}
  SQL_ATTR_LOGIN_TIMEOUT = SQL_LOGIN_TIMEOUT;
  {$EXTERNALSYM SQL_ATTR_LOGIN_TIMEOUT}
  SQL_ATTR_ODBC_CURSORS = SQL_ODBC_CURSORS;
  {$EXTERNALSYM SQL_ATTR_ODBC_CURSORS}
  SQL_ATTR_PACKET_SIZE = SQL_PACKET_SIZE;
  {$EXTERNALSYM SQL_ATTR_PACKET_SIZE}
  SQL_ATTR_QUIET_MODE = SQL_QUIET_MODE;
  {$EXTERNALSYM SQL_ATTR_QUIET_MODE}
  SQL_ATTR_TRACE = SQL_OPT_TRACE;
  {$EXTERNALSYM SQL_ATTR_TRACE}
  SQL_ATTR_TRACEFILE = SQL_OPT_TRACEFILE;
  {$EXTERNALSYM SQL_ATTR_TRACEFILE}
  SQL_ATTR_TRANSLATE_LIB = SQL_TRANSLATE_DLL;
  {$EXTERNALSYM SQL_ATTR_TRANSLATE_LIB}
  SQL_ATTR_TRANSLATE_OPTION = SQL_TRANSLATE_OPTION;
  {$EXTERNALSYM SQL_ATTR_TRANSLATE_OPTION}
  SQL_ATTR_TXN_ISOLATION = SQL_TXN_ISOLATION;
  {$EXTERNALSYM SQL_ATTR_TXN_ISOLATION}

  SQL_ATTR_CONNECTION_DEAD = 1209;    // GetConnectAttr only
  {$EXTERNALSYM SQL_ATTR_CONNECTION_DEAD}

//  ODBC Driver Manager sets this connection attribute to a unicode driver
//  (which supports SQLConnectW) when the application is an ANSI application
//  (which calls SQLConnect, SQLDriverConnect, or SQLBrowseConnect).
//  This is SetConnectAttr only and application does not set this attribute
//  This attribute was introduced because some unicode driver's some APIs may
//  need to behave differently on ANSI or Unicode applications. A unicode
//  driver, which  has same behavior for both ANSI or Unicode applications,
//  should return SQL_ERROR when the driver manager sets this connection
//  attribute. When a unicode driver returns SQL_SUCCESS on this attribute,
//  the driver manager treates ANSI and Unicode connections differently in
//  connection pooling.
  SQL_ATTR_ANSI_APP = 115;
  {$EXTERNALSYM SQL_ATTR_ANSI_APP}

  SQL_ATTR_RESET_CONNECTION = 116;
  {$EXTERNALSYM SQL_ATTR_RESET_CONNECTION}
  SQL_ATTR_ASYNC_DBC_FUNCTIONS_ENABLE = 117;
  {$EXTERNALSYM SQL_ATTR_ASYNC_DBC_FUNCTIONS_ENABLE}

// SQL_ACCESS_MODE options
  SQL_MODE_READ_WRITE = 0;
  {$EXTERNALSYM SQL_MODE_READ_WRITE}
  SQL_MODE_READ_ONLY = 1;
  {$EXTERNALSYM SQL_MODE_READ_ONLY}
  SQL_MODE_DEFAULT = SQL_MODE_READ_WRITE;
  {$EXTERNALSYM SQL_MODE_DEFAULT}

// SQL_AUTOCOMMIT options
  SQL_AUTOCOMMIT_OFF = 0;
  {$EXTERNALSYM SQL_AUTOCOMMIT_OFF}
  SQL_AUTOCOMMIT_ON = 1;
  {$EXTERNALSYM SQL_AUTOCOMMIT_ON}
  SQL_AUTOCOMMIT_DEFAULT = SQL_AUTOCOMMIT_ON;
  {$EXTERNALSYM SQL_AUTOCOMMIT_DEFAULT}

// SQL_LOGIN_TIMEOUT options
  SQL_LOGIN_TIMEOUT_DEFAULT = 15;
  {$EXTERNALSYM SQL_LOGIN_TIMEOUT_DEFAULT}

// SQL_OPT_TRACE options
  SQL_OPT_TRACE_OFF = 0;
  {$EXTERNALSYM SQL_OPT_TRACE_OFF}
  SQL_OPT_TRACE_ON = 1;
  {$EXTERNALSYM SQL_OPT_TRACE_ON}
  SQL_OPT_TRACE_DEFAULT = SQL_OPT_TRACE_OFF;
  {$EXTERNALSYM SQL_OPT_TRACE_DEFAULT}
  SQL_OPT_TRACE_FILE_DEFAULT = '\\SQL.LOG';
  {$EXTERNALSYM SQL_OPT_TRACE_FILE_DEFAULT}

// SQL_ODBC_CURSORS options
  SQL_CUR_USE_IF_NEEDED = 0;
  {$EXTERNALSYM SQL_CUR_USE_IF_NEEDED}
  SQL_CUR_USE_ODBC = 1;
  {$EXTERNALSYM SQL_CUR_USE_ODBC}
  SQL_CUR_USE_DRIVER = 2;
  {$EXTERNALSYM SQL_CUR_USE_DRIVER}
  SQL_CUR_DEFAULT = SQL_CUR_USE_DRIVER;
  {$EXTERNALSYM SQL_CUR_DEFAULT}

// values for SQL_ATTR_DISCONNECT_BEHAVIOR
  SQL_DB_RETURN_TO_POOL = 0;
  {$EXTERNALSYM SQL_DB_RETURN_TO_POOL}
  SQL_DB_DISCONNECT = 1;
  {$EXTERNALSYM SQL_DB_DISCONNECT}
  SQL_DB_DEFAULT = SQL_DB_RETURN_TO_POOL;
  {$EXTERNALSYM SQL_DB_DEFAULT}

// values for SQL_ATTR_ENLIST_IN_DTC
  SQL_DTC_DONE = 0;
  {$EXTERNALSYM SQL_DTC_DONE}

// values for SQL_ATTR_CONNECTION_DEAD
  SQL_CD_TRUE = 1;       // Connection is closed/dead
  {$EXTERNALSYM SQL_CD_TRUE}
  SQL_CD_FALSE = 0;      // Connection is open/available
  {$EXTERNALSYM SQL_CD_FALSE}

// values for SQL_ATTR_ANSI_APP
  SQL_AA_TRUE = 1;   // the application is an ANSI app
  {$EXTERNALSYM SQL_AA_TRUE}
  SQL_AA_FALSE = 0;  // the application is a Unicode app
  {$EXTERNALSYM SQL_AA_FALSE}

// values for SQL_ATTR_RESET_CONNECTION
  SQL_RESET_CONNECTION_YES = 1;
  {$EXTERNALSYM SQL_RESET_CONNECTION_YES}

// values for SQL_ATTR_ASYNC_DBC_FUNCTIONS_ENABLE
  SQL_ASYNC_DBC_ENABLE_ON = 1;
  {$EXTERNALSYM SQL_ASYNC_DBC_ENABLE_ON}
  SQL_ASYNC_DBC_ENABLE_OFF = 0;
  {$EXTERNALSYM SQL_ASYNC_DBC_ENABLE_OFF}
  SQL_ASYNC_DBC_ENABLE_DEFAULT = SQL_ASYNC_DBC_ENABLE_OFF;
  {$EXTERNALSYM SQL_ASYNC_DBC_ENABLE_DEFAULT}

// statement attributes
  SQL_QUERY_TIMEOUT = 0;
  {$EXTERNALSYM SQL_QUERY_TIMEOUT}
  SQL_MAX_ROWS = 1;
  {$EXTERNALSYM SQL_MAX_ROWS}
  SQL_NOSCAN = 2;
  {$EXTERNALSYM SQL_NOSCAN}
  SQL_MAX_LENGTH = 3;
  {$EXTERNALSYM SQL_MAX_LENGTH}
  SQL_ASYNC_ENABLE = 4;   // same as SQL_ATTR_ASYNC_ENABLE
  {$EXTERNALSYM SQL_ASYNC_ENABLE}
  SQL_BIND_TYPE = 5;
  {$EXTERNALSYM SQL_BIND_TYPE}
  SQL_CURSOR_TYPE = 6;
  {$EXTERNALSYM SQL_CURSOR_TYPE}
  SQL_CONCURRENCY = 7;
  {$EXTERNALSYM SQL_CONCURRENCY}
  SQL_KEYSET_SIZE = 8;
  {$EXTERNALSYM SQL_KEYSET_SIZE}
  SQL_ROWSET_SIZE = 9;
  {$EXTERNALSYM SQL_ROWSET_SIZE}
  SQL_SIMULATE_CURSOR = 10;
  {$EXTERNALSYM SQL_SIMULATE_CURSOR}
  SQL_RETRIEVE_DATA = 11;
  {$EXTERNALSYM SQL_RETRIEVE_DATA}
  SQL_USE_BOOKMARKS = 12;
  {$EXTERNALSYM SQL_USE_BOOKMARKS}
  SQL_GET_BOOKMARK = 13;      //      GetStmtOption Only
  {$EXTERNALSYM SQL_GET_BOOKMARK}
  SQL_ROW_NUMBER = 14;        //      GetStmtOption Only
  {$EXTERNALSYM SQL_ROW_NUMBER}

// statement attributes for ODBC 3.0
  SQL_ATTR_ASYNC_ENABLE = 4;
  {$EXTERNALSYM SQL_ATTR_ASYNC_ENABLE}
  SQL_ATTR_CONCURRENCY = SQL_CONCURRENCY;
  {$EXTERNALSYM SQL_ATTR_CONCURRENCY}
  SQL_ATTR_CURSOR_TYPE = SQL_CURSOR_TYPE;
  {$EXTERNALSYM SQL_ATTR_CURSOR_TYPE}
  SQL_ATTR_ENABLE_AUTO_IPD = 15;
  {$EXTERNALSYM SQL_ATTR_ENABLE_AUTO_IPD}
  SQL_ATTR_FETCH_BOOKMARK_PTR = 16;
  {$EXTERNALSYM SQL_ATTR_FETCH_BOOKMARK_PTR}
  SQL_ATTR_KEYSET_SIZE = SQL_KEYSET_SIZE;
  {$EXTERNALSYM SQL_ATTR_KEYSET_SIZE}
  SQL_ATTR_MAX_LENGTH = SQL_MAX_LENGTH;
  {$EXTERNALSYM SQL_ATTR_MAX_LENGTH}
  SQL_ATTR_MAX_ROWS = SQL_MAX_ROWS;
  {$EXTERNALSYM SQL_ATTR_MAX_ROWS}
  SQL_ATTR_NOSCAN = SQL_NOSCAN;
  {$EXTERNALSYM SQL_ATTR_NOSCAN}
  SQL_ATTR_PARAM_BIND_OFFSET_PTR = 17;
  {$EXTERNALSYM SQL_ATTR_PARAM_BIND_OFFSET_PTR}
  SQL_ATTR_PARAM_BIND_TYPE = 18;
  {$EXTERNALSYM SQL_ATTR_PARAM_BIND_TYPE}
  SQL_ATTR_PARAM_OPERATION_PTR = 19;
  {$EXTERNALSYM SQL_ATTR_PARAM_OPERATION_PTR}
  SQL_ATTR_PARAM_STATUS_PTR = 20;
  {$EXTERNALSYM SQL_ATTR_PARAM_STATUS_PTR}
  SQL_ATTR_PARAMS_PROCESSED_PTR = 21;
  {$EXTERNALSYM SQL_ATTR_PARAMS_PROCESSED_PTR}
  SQL_ATTR_PARAMSET_SIZE = 22;
  {$EXTERNALSYM SQL_ATTR_PARAMSET_SIZE}
  SQL_ATTR_QUERY_TIMEOUT = SQL_QUERY_TIMEOUT;
  {$EXTERNALSYM SQL_ATTR_QUERY_TIMEOUT}
  SQL_ATTR_RETRIEVE_DATA = SQL_RETRIEVE_DATA;
  {$EXTERNALSYM SQL_ATTR_RETRIEVE_DATA}
  SQL_ATTR_ROW_BIND_OFFSET_PTR = 23;
  {$EXTERNALSYM SQL_ATTR_ROW_BIND_OFFSET_PTR}
  SQL_ATTR_ROW_BIND_TYPE = SQL_BIND_TYPE;
  {$EXTERNALSYM SQL_ATTR_ROW_BIND_TYPE}
  SQL_ATTR_ROW_NUMBER = SQL_ROW_NUMBER;      //GetStmtAttr
  {$EXTERNALSYM SQL_ATTR_ROW_NUMBER}
  SQL_ATTR_ROW_OPERATION_PTR = 24;
  {$EXTERNALSYM SQL_ATTR_ROW_OPERATION_PTR}
  SQL_ATTR_ROW_STATUS_PTR = 25;
  {$EXTERNALSYM SQL_ATTR_ROW_STATUS_PTR}
  SQL_ATTR_ROWS_FETCHED_PTR = 26;
  {$EXTERNALSYM SQL_ATTR_ROWS_FETCHED_PTR}
  SQL_ATTR_ROW_ARRAY_SIZE = 27;
  {$EXTERNALSYM SQL_ATTR_ROW_ARRAY_SIZE}
  SQL_ATTR_SIMULATE_CURSOR = SQL_SIMULATE_CURSOR;
  {$EXTERNALSYM SQL_ATTR_SIMULATE_CURSOR}
  SQL_ATTR_USE_BOOKMARKS = SQL_USE_BOOKMARKS;
  {$EXTERNALSYM SQL_ATTR_USE_BOOKMARKS}

// SQLColAttributes subdefines for SQL_COLUMN_SEARCHABLE
// These are also used by SQLGetInfo
  SQL_UNSEARCHABLE = 0;
  {$EXTERNALSYM SQL_UNSEARCHABLE}
  SQL_LIKE_ONLY = 1;
  {$EXTERNALSYM SQL_LIKE_ONLY}
  SQL_ALL_EXCEPT_LIKE = 2;
  {$EXTERNALSYM SQL_ALL_EXCEPT_LIKE}
  SQL_SEARCHABLE = 3;
  {$EXTERNALSYM SQL_SEARCHABLE}
  SQL_PRED_SEARCHABLE = SQL_SEARCHABLE;
  {$EXTERNALSYM SQL_PRED_SEARCHABLE}

// New defines for SEARCHABLE column in SQLGetTypeInfo
  SQL_COL_PRED_CHAR = SQL_LIKE_ONLY;
  {$EXTERNALSYM SQL_COL_PRED_CHAR}
  SQL_COL_PRED_BASIC = SQL_ALL_EXCEPT_LIKE;
  {$EXTERNALSYM SQL_COL_PRED_BASIC}

// whether an attribute is a pointer or not
  SQL_IS_POINTER = (-4);
  {$EXTERNALSYM SQL_IS_POINTER}
  SQL_IS_UINTEGER = (-5);
  {$EXTERNALSYM SQL_IS_UINTEGER}
  SQL_IS_INTEGER = (-6);
  {$EXTERNALSYM SQL_IS_INTEGER}
  SQL_IS_USMALLINT = (-7);
  {$EXTERNALSYM SQL_IS_USMALLINT}
  SQL_IS_SMALLINT = (-8);
  {$EXTERNALSYM SQL_IS_SMALLINT}

// the value of SQL_ATTR_PARAM_BIND_TYPE
  SQL_PARAM_BIND_BY_COLUMN = 0;
  {$EXTERNALSYM SQL_PARAM_BIND_BY_COLUMN}
  SQL_PARAM_BIND_TYPE_DEFAULT = SQL_PARAM_BIND_BY_COLUMN;
  {$EXTERNALSYM SQL_PARAM_BIND_TYPE_DEFAULT}

// SQL_QUERY_TIMEOUT options
  SQL_QUERY_TIMEOUT_DEFAULT = 0;
  {$EXTERNALSYM SQL_QUERY_TIMEOUT_DEFAULT}

// SQL_MAX_ROWS options
  SQL_MAX_ROWS_DEFAULT = 0;
  {$EXTERNALSYM SQL_MAX_ROWS_DEFAULT}

// SQL_NOSCAN options
  SQL_NOSCAN_OFF = 0;     //      1.0 FALSE
  {$EXTERNALSYM SQL_NOSCAN_OFF}
  SQL_NOSCAN_ON = 1;      //      1.0 TRUE
  {$EXTERNALSYM SQL_NOSCAN_ON}
  SQL_NOSCAN_DEFAULT = SQL_NOSCAN_OFF;
  {$EXTERNALSYM SQL_NOSCAN_DEFAULT}

// SQL_MAX_LENGTH options
  SQL_MAX_LENGTH_DEFAULT = 0;
  {$EXTERNALSYM SQL_MAX_LENGTH_DEFAULT}

// values for SQL_ATTR_ASYNC_ENABLE
  SQL_ASYNC_ENABLE_OFF = 0;
  {$EXTERNALSYM SQL_ASYNC_ENABLE_OFF}
  SQL_ASYNC_ENABLE_ON = 1;
  {$EXTERNALSYM SQL_ASYNC_ENABLE_ON}
  SQL_ASYNC_ENABLE_DEFAULT = SQL_ASYNC_ENABLE_OFF;
  {$EXTERNALSYM SQL_ASYNC_ENABLE_DEFAULT}

// SQL_BIND_TYPE options
  SQL_BIND_BY_COLUMN = 0;
  {$EXTERNALSYM SQL_BIND_BY_COLUMN}
  SQL_BIND_TYPE_DEFAULT = SQL_BIND_BY_COLUMN;  // Default value
  {$EXTERNALSYM SQL_BIND_TYPE_DEFAULT}

// SQL_CONCURRENCY options
  SQL_CONCUR_READ_ONLY = 1;
  {$EXTERNALSYM SQL_CONCUR_READ_ONLY}
  SQL_CONCUR_LOCK = 2;
  {$EXTERNALSYM SQL_CONCUR_LOCK}
  SQL_CONCUR_ROWVER = 3;
  {$EXTERNALSYM SQL_CONCUR_ROWVER}
  SQL_CONCUR_VALUES = 4;
  {$EXTERNALSYM SQL_CONCUR_VALUES}
  SQL_CONCUR_DEFAULT = SQL_CONCUR_READ_ONLY; // Default value
  {$EXTERNALSYM SQL_CONCUR_DEFAULT}

// SQL_CURSOR_TYPE options
  SQL_CURSOR_FORWARD_ONLY = 0;
  {$EXTERNALSYM SQL_CURSOR_FORWARD_ONLY}
  SQL_CURSOR_KEYSET_DRIVEN = 1;
  {$EXTERNALSYM SQL_CURSOR_KEYSET_DRIVEN}
  SQL_CURSOR_DYNAMIC = 2;
  {$EXTERNALSYM SQL_CURSOR_DYNAMIC}
  SQL_CURSOR_STATIC = 3;
  {$EXTERNALSYM SQL_CURSOR_STATIC}
  SQL_CURSOR_TYPE_DEFAULT = SQL_CURSOR_FORWARD_ONLY; // Default value
  {$EXTERNALSYM SQL_CURSOR_TYPE_DEFAULT}

// SQL_ROWSET_SIZE options
  SQL_ROWSET_SIZE_DEFAULT = 1;
  {$EXTERNALSYM SQL_ROWSET_SIZE_DEFAULT}

// SQL_KEYSET_SIZE options
  SQL_KEYSET_SIZE_DEFAULT = 0;
  {$EXTERNALSYM SQL_KEYSET_SIZE_DEFAULT}

// SQL_SIMULATE_CURSOR options
  SQL_SC_NON_UNIQUE = 0;
  {$EXTERNALSYM SQL_SC_NON_UNIQUE}
  SQL_SC_TRY_UNIQUE = 1;
  {$EXTERNALSYM SQL_SC_TRY_UNIQUE}
  SQL_SC_UNIQUE = 2;
  {$EXTERNALSYM SQL_SC_UNIQUE}

// SQL_RETRIEVE_DATA options
  SQL_RD_OFF = 0;
  {$EXTERNALSYM SQL_RD_OFF}
  SQL_RD_ON = 1;
  {$EXTERNALSYM SQL_RD_ON}
  SQL_RD_DEFAULT = SQL_RD_ON;
  {$EXTERNALSYM SQL_RD_DEFAULT}

// SQL_USE_BOOKMARKS options
  SQL_UB_OFF = 0;
  {$EXTERNALSYM SQL_UB_OFF}
  SQL_UB_ON = 1;
  {$EXTERNALSYM SQL_UB_ON}
  SQL_UB_DEFAULT = SQL_UB_OFF;
  {$EXTERNALSYM SQL_UB_DEFAULT}

// New values for SQL_USE_BOOKMARKS attribute
  SQL_UB_FIXED = SQL_UB_ON;
  {$EXTERNALSYM SQL_UB_FIXED}
  SQL_UB_VARIABLE = 2;
  {$EXTERNALSYM SQL_UB_VARIABLE}

// SQLColAttributes defines
  SQL_COLUMN_COUNT = 0;
  {$EXTERNALSYM SQL_COLUMN_COUNT}
  SQL_COLUMN_NAME = 1;
  {$EXTERNALSYM SQL_COLUMN_NAME}
  SQL_COLUMN_TYPE = 2;
  {$EXTERNALSYM SQL_COLUMN_TYPE}
  SQL_COLUMN_LENGTH = 3;
  {$EXTERNALSYM SQL_COLUMN_LENGTH}
  SQL_COLUMN_PRECISION = 4;
  {$EXTERNALSYM SQL_COLUMN_PRECISION}
  SQL_COLUMN_SCALE = 5;
  {$EXTERNALSYM SQL_COLUMN_SCALE}
  SQL_COLUMN_DISPLAY_SIZE = 6;
  {$EXTERNALSYM SQL_COLUMN_DISPLAY_SIZE}
  SQL_COLUMN_NULLABLE = 7;
  {$EXTERNALSYM SQL_COLUMN_NULLABLE}
  SQL_COLUMN_UNSIGNED = 8;
  {$EXTERNALSYM SQL_COLUMN_UNSIGNED}
  SQL_COLUMN_MONEY = 9;
  {$EXTERNALSYM SQL_COLUMN_MONEY}
  SQL_COLUMN_UPDATABLE = 10;
  {$EXTERNALSYM SQL_COLUMN_UPDATABLE}
  SQL_COLUMN_AUTO_INCREMENT = 11;
  {$EXTERNALSYM SQL_COLUMN_AUTO_INCREMENT}
  SQL_COLUMN_CASE_SENSITIVE = 12;
  {$EXTERNALSYM SQL_COLUMN_CASE_SENSITIVE}
  SQL_COLUMN_SEARCHABLE = 13;
  {$EXTERNALSYM SQL_COLUMN_SEARCHABLE}
  SQL_COLUMN_TYPE_NAME = 14;
  {$EXTERNALSYM SQL_COLUMN_TYPE_NAME}
  SQL_COLUMN_TABLE_NAME = 15;
  {$EXTERNALSYM SQL_COLUMN_TABLE_NAME}
  SQL_COLUMN_OWNER_NAME = 16;
  {$EXTERNALSYM SQL_COLUMN_OWNER_NAME}
  SQL_COLUMN_QUALIFIER_NAME = 17;
  {$EXTERNALSYM SQL_COLUMN_QUALIFIER_NAME}
  SQL_COLUMN_LABEL = 18;
  {$EXTERNALSYM SQL_COLUMN_LABEL}
  SQL_COLATT_OPT_MAX = SQL_COLUMN_LABEL;
  {$EXTERNALSYM SQL_COLATT_OPT_MAX}
  SQL_COLATT_OPT_MIN = SQL_COLUMN_COUNT;
  {$EXTERNALSYM SQL_COLATT_OPT_MIN}

// extended descriptor field
  SQL_DESC_ARRAY_SIZE = 20;
  {$EXTERNALSYM SQL_DESC_ARRAY_SIZE}
  SQL_DESC_ARRAY_STATUS_PTR = 21;
  {$EXTERNALSYM SQL_DESC_ARRAY_STATUS_PTR}
  SQL_DESC_AUTO_UNIQUE_VALUE = SQL_COLUMN_AUTO_INCREMENT;
  {$EXTERNALSYM SQL_DESC_AUTO_UNIQUE_VALUE}
  SQL_DESC_BASE_COLUMN_NAME = 22;
  {$EXTERNALSYM SQL_DESC_BASE_COLUMN_NAME}
  SQL_DESC_BASE_TABLE_NAME = 23;
  {$EXTERNALSYM SQL_DESC_BASE_TABLE_NAME}
  SQL_DESC_BIND_OFFSET_PTR = 24;
  {$EXTERNALSYM SQL_DESC_BIND_OFFSET_PTR}
  SQL_DESC_BIND_TYPE = 25;
  {$EXTERNALSYM SQL_DESC_BIND_TYPE}
  SQL_DESC_CASE_SENSITIVE = SQL_COLUMN_CASE_SENSITIVE;
  {$EXTERNALSYM SQL_DESC_CASE_SENSITIVE}
  SQL_DESC_CATALOG_NAME = SQL_COLUMN_QUALIFIER_NAME;
  {$EXTERNALSYM SQL_DESC_CATALOG_NAME}
  SQL_DESC_CONCISE_TYPE = SQL_COLUMN_TYPE;
  {$EXTERNALSYM SQL_DESC_CONCISE_TYPE}
  SQL_DESC_DATETIME_INTERVAL_PRECISION = 26;
  {$EXTERNALSYM SQL_DESC_DATETIME_INTERVAL_PRECISION}
  SQL_DESC_DISPLAY_SIZE = SQL_COLUMN_DISPLAY_SIZE;
  {$EXTERNALSYM SQL_DESC_DISPLAY_SIZE}
  SQL_DESC_FIXED_PREC_SCALE = SQL_COLUMN_MONEY;
  {$EXTERNALSYM SQL_DESC_FIXED_PREC_SCALE}
  SQL_DESC_LABEL = SQL_COLUMN_LABEL;
  {$EXTERNALSYM SQL_DESC_LABEL}
  SQL_DESC_LITERAL_PREFIX = 27;
  {$EXTERNALSYM SQL_DESC_LITERAL_PREFIX}
  SQL_DESC_LITERAL_SUFFIX = 28;
  {$EXTERNALSYM SQL_DESC_LITERAL_SUFFIX}
  SQL_DESC_LOCAL_TYPE_NAME = 29;
  {$EXTERNALSYM SQL_DESC_LOCAL_TYPE_NAME}
  SQL_DESC_MAXIMUM_SCALE = 30;
  {$EXTERNALSYM SQL_DESC_MAXIMUM_SCALE}
  SQL_DESC_MINIMUM_SCALE = 31;
  {$EXTERNALSYM SQL_DESC_MINIMUM_SCALE}
  SQL_DESC_NUM_PREC_RADIX = 32;
  {$EXTERNALSYM SQL_DESC_NUM_PREC_RADIX}
  SQL_DESC_PARAMETER_TYPE = 33;
  {$EXTERNALSYM SQL_DESC_PARAMETER_TYPE}
  SQL_DESC_ROWS_PROCESSED_PTR = 34;
  {$EXTERNALSYM SQL_DESC_ROWS_PROCESSED_PTR}
  SQL_DESC_ROWVER = 35;
  {$EXTERNALSYM SQL_DESC_ROWVER}
  SQL_DESC_SCHEMA_NAME = SQL_COLUMN_OWNER_NAME;
  {$EXTERNALSYM SQL_DESC_SCHEMA_NAME}
  SQL_DESC_SEARCHABLE = SQL_COLUMN_SEARCHABLE;
  {$EXTERNALSYM SQL_DESC_SEARCHABLE}
  SQL_DESC_TYPE_NAME = SQL_COLUMN_TYPE_NAME;
  {$EXTERNALSYM SQL_DESC_TYPE_NAME}
  SQL_DESC_TABLE_NAME = SQL_COLUMN_TABLE_NAME;
  {$EXTERNALSYM SQL_DESC_TABLE_NAME}
  SQL_DESC_UNSIGNED = SQL_COLUMN_UNSIGNED;
  {$EXTERNALSYM SQL_DESC_UNSIGNED}
  SQL_DESC_UPDATABLE = SQL_COLUMN_UPDATABLE;
  {$EXTERNALSYM SQL_DESC_UPDATABLE}


// defines for diagnostics fields
  SQL_DIAG_CURSOR_ROW_COUNT = (-1249);
  {$EXTERNALSYM SQL_DIAG_CURSOR_ROW_COUNT}
  SQL_DIAG_ROW_NUMBER = (-1248);
  {$EXTERNALSYM SQL_DIAG_ROW_NUMBER}
  SQL_DIAG_COLUMN_NUMBER = (-1247);
  {$EXTERNALSYM SQL_DIAG_COLUMN_NUMBER}

// SQL extended datatypes
  SQL_DATE = 9;
  {$EXTERNALSYM SQL_DATE}
  SQL_INTERVAL = 10;
  {$EXTERNALSYM SQL_INTERVAL}
  SQL_TIME = 10;
  {$EXTERNALSYM SQL_TIME}
  SQL_TIMESTAMP = 11;
  {$EXTERNALSYM SQL_TIMESTAMP}
  SQL_LONGVARCHAR = (-1);
  {$EXTERNALSYM SQL_LONGVARCHAR}
  SQL_BINARY = (-2);
  {$EXTERNALSYM SQL_BINARY}
  SQL_VARBINARY = (-3);
  {$EXTERNALSYM SQL_VARBINARY}
  SQL_LONGVARBINARY = (-4);
  {$EXTERNALSYM SQL_LONGVARBINARY}
  SQL_BIGINT = (-5);
  {$EXTERNALSYM SQL_BIGINT}
  SQL_TINYINT = (-6);
  {$EXTERNALSYM SQL_TINYINT}
  SQL_BIT = (-7);
  {$EXTERNALSYM SQL_BIT}
  SQL_GUID = (-11);
  {$EXTERNALSYM SQL_GUID}

// interval code
  SQL_CODE_YEAR = 1;
  {$EXTERNALSYM SQL_CODE_YEAR}
  SQL_CODE_MONTH = 2;
  {$EXTERNALSYM SQL_CODE_MONTH}
  SQL_CODE_DAY = 3;
  {$EXTERNALSYM SQL_CODE_DAY}
  SQL_CODE_HOUR = 4;
  {$EXTERNALSYM SQL_CODE_HOUR}
  SQL_CODE_MINUTE = 5;
  {$EXTERNALSYM SQL_CODE_MINUTE}
  SQL_CODE_SECOND = 6;
  {$EXTERNALSYM SQL_CODE_SECOND}
  SQL_CODE_YEAR_TO_MONTH = 7;
  {$EXTERNALSYM SQL_CODE_YEAR_TO_MONTH}
  SQL_CODE_DAY_TO_HOUR = 8;
  {$EXTERNALSYM SQL_CODE_DAY_TO_HOUR}
  SQL_CODE_DAY_TO_MINUTE = 9;
  {$EXTERNALSYM SQL_CODE_DAY_TO_MINUTE}
  SQL_CODE_DAY_TO_SECOND = 10;
  {$EXTERNALSYM SQL_CODE_DAY_TO_SECOND}
  SQL_CODE_HOUR_TO_MINUTE = 11;
  {$EXTERNALSYM SQL_CODE_HOUR_TO_MINUTE}
  SQL_CODE_HOUR_TO_SECOND = 12;
  {$EXTERNALSYM SQL_CODE_HOUR_TO_SECOND}
  SQL_CODE_MINUTE_TO_SECOND = 13;
  {$EXTERNALSYM SQL_CODE_MINUTE_TO_SECOND}

  SQL_INTERVAL_YEAR = (100 + SQL_CODE_YEAR);
  {$EXTERNALSYM SQL_INTERVAL_YEAR}
  SQL_INTERVAL_MONTH = (100 + SQL_CODE_MONTH);
  {$EXTERNALSYM SQL_INTERVAL_MONTH}
  SQL_INTERVAL_DAY = (100 + SQL_CODE_DAY);
  {$EXTERNALSYM SQL_INTERVAL_DAY}
  SQL_INTERVAL_HOUR = (100 + SQL_CODE_HOUR);
  {$EXTERNALSYM SQL_INTERVAL_HOUR}
  SQL_INTERVAL_MINUTE = (100 + SQL_CODE_MINUTE);
  {$EXTERNALSYM SQL_INTERVAL_MINUTE}
  SQL_INTERVAL_SECOND = (100 + SQL_CODE_SECOND);
  {$EXTERNALSYM SQL_INTERVAL_SECOND}
  SQL_INTERVAL_YEAR_TO_MONTH = (100 + SQL_CODE_YEAR_TO_MONTH);
  {$EXTERNALSYM SQL_INTERVAL_YEAR_TO_MONTH}
  SQL_INTERVAL_DAY_TO_HOUR = (100 + SQL_CODE_DAY_TO_HOUR);
  {$EXTERNALSYM SQL_INTERVAL_DAY_TO_HOUR}
  SQL_INTERVAL_DAY_TO_MINUTE = (100 + SQL_CODE_DAY_TO_MINUTE);
  {$EXTERNALSYM SQL_INTERVAL_DAY_TO_MINUTE}
  SQL_INTERVAL_DAY_TO_SECOND = (100 + SQL_CODE_DAY_TO_SECOND);
  {$EXTERNALSYM SQL_INTERVAL_DAY_TO_SECOND}
  SQL_INTERVAL_HOUR_TO_MINUTE = (100 + SQL_CODE_HOUR_TO_MINUTE);
  {$EXTERNALSYM SQL_INTERVAL_HOUR_TO_MINUTE}
  SQL_INTERVAL_HOUR_TO_SECOND = (100 + SQL_CODE_HOUR_TO_SECOND);
  {$EXTERNALSYM SQL_INTERVAL_HOUR_TO_SECOND}
  SQL_INTERVAL_MINUTE_TO_SECOND = (100 + SQL_CODE_MINUTE_TO_SECOND);
  {$EXTERNALSYM SQL_INTERVAL_MINUTE_TO_SECOND}

  SQL_WCHAR = (-8); //From sqlucode.h
  {$EXTERNALSYM SQL_WCHAR}
  SQL_WVARCHAR = (-9); //From sqlucode.h
  {$EXTERNALSYM SQL_WVARCHAR}
  SQL_WLONGVARCHAR = (-10); //From sqlucode.h
  {$EXTERNALSYM SQL_WLONGVARCHAR}

  SQL_UNICODE = SQL_WCHAR;
  {$EXTERNALSYM SQL_UNICODE}

  SQL_UNICODE_VARCHAR = SQL_WVARCHAR;
  {$EXTERNALSYM SQL_UNICODE_VARCHAR}
  SQL_UNICODE_LONGVARCHAR = SQL_WLONGVARCHAR;
  {$EXTERNALSYM SQL_UNICODE_LONGVARCHAR}
  SQL_UNICODE_CHAR = SQL_WCHAR;
  {$EXTERNALSYM SQL_UNICODE_CHAR}

// C datatype to SQL datatype mapping      SQL types
//                                         -------------------
  SQL_C_CHAR = SQL_CHAR;             // CHAR, VARCHAR, DECIMAL, NUMERIC
  {$EXTERNALSYM SQL_C_CHAR}
  SQL_C_LONG = SQL_INTEGER;          // INTEGER
  {$EXTERNALSYM SQL_C_LONG}
  SQL_C_SHORT = SQL_SMALLINT;        // SMALLINT
  {$EXTERNALSYM SQL_C_SHORT}
  SQL_C_FLOAT = SQL_REAL;            // REAL
  {$EXTERNALSYM SQL_C_FLOAT}
  SQL_C_DOUBLE = SQL_DOUBLE;         // FLOAT, DOUBLE
  {$EXTERNALSYM SQL_C_DOUBLE}
  SQL_C_NUMERIC = SQL_NUMERIC;
  {$EXTERNALSYM SQL_C_NUMERIC}
  SQL_C_DEFAULT = 99;
  {$EXTERNALSYM SQL_C_DEFAULT}

  SQL_SIGNED_OFFSET = (-20);
  {$EXTERNALSYM SQL_SIGNED_OFFSET}
  SQL_UNSIGNED_OFFSET = (-22);
  {$EXTERNALSYM SQL_UNSIGNED_OFFSET}

// C datatype to SQL datatype mapping
  SQL_C_DATE = SQL_DATE;
  {$EXTERNALSYM SQL_C_DATE}
  SQL_C_TIME = SQL_TIME;
  {$EXTERNALSYM SQL_C_TIME}
  SQL_C_TIMESTAMP = SQL_TIMESTAMP;
  {$EXTERNALSYM SQL_C_TIMESTAMP}
  SQL_C_TYPE_DATE = SQL_TYPE_DATE;
  {$EXTERNALSYM SQL_C_TYPE_DATE}
  SQL_C_TYPE_TIME = SQL_TYPE_TIME;
  {$EXTERNALSYM SQL_C_TYPE_TIME}
  SQL_C_TYPE_TIMESTAMP = SQL_TYPE_TIMESTAMP;
  {$EXTERNALSYM SQL_C_TYPE_TIMESTAMP}
  SQL_C_INTERVAL_YEAR = SQL_INTERVAL_YEAR;
  {$EXTERNALSYM SQL_C_INTERVAL_YEAR}
  SQL_C_INTERVAL_MONTH = SQL_INTERVAL_MONTH;
  {$EXTERNALSYM SQL_C_INTERVAL_MONTH}
  SQL_C_INTERVAL_DAY = SQL_INTERVAL_DAY;
  {$EXTERNALSYM SQL_C_INTERVAL_DAY}
  SQL_C_INTERVAL_HOUR = SQL_INTERVAL_HOUR;
  {$EXTERNALSYM SQL_C_INTERVAL_HOUR}
  SQL_C_INTERVAL_MINUTE = SQL_INTERVAL_MINUTE;
  {$EXTERNALSYM SQL_C_INTERVAL_MINUTE}
  SQL_C_INTERVAL_SECOND = SQL_INTERVAL_SECOND;
  {$EXTERNALSYM SQL_C_INTERVAL_SECOND}
  SQL_C_INTERVAL_YEAR_TO_MONTH = SQL_INTERVAL_YEAR_TO_MONTH;
  {$EXTERNALSYM SQL_C_INTERVAL_YEAR_TO_MONTH}
  SQL_C_INTERVAL_DAY_TO_HOUR = SQL_INTERVAL_DAY_TO_HOUR;
  {$EXTERNALSYM SQL_C_INTERVAL_DAY_TO_HOUR}
  SQL_C_INTERVAL_DAY_TO_MINUTE = SQL_INTERVAL_DAY_TO_MINUTE;
  {$EXTERNALSYM SQL_C_INTERVAL_DAY_TO_MINUTE}
  SQL_C_INTERVAL_DAY_TO_SECOND = SQL_INTERVAL_DAY_TO_SECOND;
  {$EXTERNALSYM SQL_C_INTERVAL_DAY_TO_SECOND}
  SQL_C_INTERVAL_HOUR_TO_MINUTE = SQL_INTERVAL_HOUR_TO_MINUTE;
  {$EXTERNALSYM SQL_C_INTERVAL_HOUR_TO_MINUTE}
  SQL_C_INTERVAL_HOUR_TO_SECOND = SQL_INTERVAL_HOUR_TO_SECOND;
  {$EXTERNALSYM SQL_C_INTERVAL_HOUR_TO_SECOND}
  SQL_C_INTERVAL_MINUTE_TO_SECOND = SQL_INTERVAL_MINUTE_TO_SECOND;
  {$EXTERNALSYM SQL_C_INTERVAL_MINUTE_TO_SECOND}
  SQL_C_BINARY = SQL_BINARY;
  {$EXTERNALSYM SQL_C_BINARY}
  SQL_C_BIT = SQL_BIT;
  {$EXTERNALSYM SQL_C_BIT}
  SQL_C_SBIGINT = (SQL_BIGINT+SQL_SIGNED_OFFSET);     // SIGNED BIGINT
  {$EXTERNALSYM SQL_C_SBIGINT}
  SQL_C_UBIGINT = (SQL_BIGINT+SQL_UNSIGNED_OFFSET);   // UNSIGNED BIGINT
  {$EXTERNALSYM SQL_C_UBIGINT}
  SQL_C_TINYINT = SQL_TINYINT;
  {$EXTERNALSYM SQL_C_TINYINT}
  SQL_C_SLONG = (SQL_C_LONG+SQL_SIGNED_OFFSET);       // SIGNED INTEGER
  {$EXTERNALSYM SQL_C_SLONG}
  SQL_C_SSHORT = (SQL_C_SHORT+SQL_SIGNED_OFFSET);     // SIGNED SMALLINT
  {$EXTERNALSYM SQL_C_SSHORT}
  SQL_C_STINYINT = (SQL_TINYINT+SQL_SIGNED_OFFSET);   // SIGNED TINYINT
  {$EXTERNALSYM SQL_C_STINYINT}
  SQL_C_ULONG = (SQL_C_LONG+SQL_UNSIGNED_OFFSET);     // UNSIGNED INTEGER
  {$EXTERNALSYM SQL_C_ULONG}
  SQL_C_USHORT = (SQL_C_SHORT+SQL_UNSIGNED_OFFSET);   // UNSIGNED SMALLINT
  {$EXTERNALSYM SQL_C_USHORT}
  SQL_C_UTINYINT = (SQL_TINYINT+SQL_UNSIGNED_OFFSET); // UNSIGNED TINYINT
  {$EXTERNALSYM SQL_C_UTINYINT}

{$IFDEF WIN64}
  SQL_C_BOOKMARK = SQL_C_UBIGINT;                     // BOOKMARK
  {$EXTERNALSYM SQL_C_BOOKMARK}
{$ELSE}
  SQL_C_BOOKMARK = SQL_C_ULONG;                       // BOOKMARK
  {$EXTERNALSYM SQL_C_BOOKMARK}
{$ENDIF}

  SQL_C_GUID = SQL_GUID;
  {$EXTERNALSYM SQL_C_GUID}

  SQL_TYPE_NULL = 0;
  {$EXTERNALSYM SQL_TYPE_NULL}

// base value of driver-specific C-Type (max is 0x7fff)
// define driver-specific C-Type, named as SQL_DRIVER_C_TYPE_BASE,
// SQL_DRIVER_C_TYPE_BASE+1, SQL_DRIVER_C_TYPE_BASE+2, etc.
  SQL_DRIVER_C_TYPE_BASE = $4000;
  {$EXTERNALSYM SQL_DRIVER_C_TYPE_BASE}

// base value of driver-specific fields/attributes (max are 0x7fff [16-bit] or 0x00007fff [32-bit])
// define driver-specific SQL-Type, named as SQL_DRIVER_SQL_TYPE_BASE,
// SQL_DRIVER_SQL_TYPE_BASE+1, SQL_DRIVER_SQL_TYPE_BASE+2, etc.
//
// Please note that there is no runtime change in this version of DM.
// However, we suggest that driver manufacturers adhere to this range
// as future versions of the DM may enforce these constraints
  SQL_DRIVER_SQL_TYPE_BASE = $4000;
  {$EXTERNALSYM SQL_DRIVER_SQL_TYPE_BASE}
  SQL_DRIVER_DESC_FIELD_BASE = $4000;
  {$EXTERNALSYM SQL_DRIVER_DESC_FIELD_BASE}
  SQL_DRIVER_DIAG_FIELD_BASE = $4000;
  {$EXTERNALSYM SQL_DRIVER_DIAG_FIELD_BASE}
  SQL_DRIVER_INFO_TYPE_BASE = $4000;
  {$EXTERNALSYM SQL_DRIVER_INFO_TYPE_BASE}
  SQL_DRIVER_CONN_ATTR_BASE = $00004000;  // 32-bit
  {$EXTERNALSYM SQL_DRIVER_CONN_ATTR_BASE}
  SQL_DRIVER_STMT_ATTR_BASE = $00004000;  // 32-bit
  {$EXTERNALSYM SQL_DRIVER_STMT_ATTR_BASE}

  SQL_C_VARBOOKMARK = SQL_C_BINARY;
  {$EXTERNALSYM SQL_C_VARBOOKMARK}

// define for SQL_DIAG_ROW_NUMBER and SQL_DIAG_COLUMN_NUMBER
  SQL_NO_ROW_NUMBER = (-1);
  {$EXTERNALSYM SQL_NO_ROW_NUMBER}
  SQL_NO_COLUMN_NUMBER = (-1);
  {$EXTERNALSYM SQL_NO_COLUMN_NUMBER}
  SQL_ROW_NUMBER_UNKNOWN = (-2);
  {$EXTERNALSYM SQL_ROW_NUMBER_UNKNOWN}
  SQL_COLUMN_NUMBER_UNKNOWN = (-2);
  {$EXTERNALSYM SQL_COLUMN_NUMBER_UNKNOWN}

// SQLBindParameter extensions
  SQL_DEFAULT_PARAM = (-5);
  {$EXTERNALSYM SQL_DEFAULT_PARAM}
  SQL_IGNORE = (-6);
  {$EXTERNALSYM SQL_IGNORE}
  SQL_COLUMN_IGNORE = SQL_IGNORE;
  {$EXTERNALSYM SQL_COLUMN_IGNORE}
  SQL_LEN_DATA_AT_EXEC_OFFSET = (-100);
  {$EXTERNALSYM SQL_LEN_DATA_AT_EXEC_OFFSET}

function SQL_LEN_DATA_AT_EXEC(const length: SQLLEN): SQLLEN;
{$EXTERNALSYM SQL_LEN_DATA_AT_EXEC}

// binary length for driver specific attributes
const
  SQL_LEN_BINARY_ATTR_OFFSET = (-100);
  {$EXTERNALSYM SQL_LEN_BINARY_ATTR_OFFSET}

function SQL_LEN_BINARY_ATTR(const length: SQLLEN): SQLLEN;
{$EXTERNALSYM SQL_LEN_BINARY_ATTR}

const
// Defines for SQLBindParameter and
//                           SQLProcedureColumns (returned in the result set)
  SQL_PARAM_TYPE_UNKNOWN = 0;
  {$EXTERNALSYM SQL_PARAM_TYPE_UNKNOWN}
  SQL_PARAM_INPUT = 1;
  {$EXTERNALSYM SQL_PARAM_INPUT}
  SQL_PARAM_INPUT_OUTPUT = 2;
  {$EXTERNALSYM SQL_PARAM_INPUT_OUTPUT}
  SQL_RESULT_COL = 3;
  {$EXTERNALSYM SQL_RESULT_COL}
  SQL_PARAM_OUTPUT = 4;
  {$EXTERNALSYM SQL_PARAM_OUTPUT}
  SQL_RETURN_VALUE = 5;
  {$EXTERNALSYM SQL_RETURN_VALUE}
  SQL_PARAM_INPUT_OUTPUT_STREAM = 8;
  {$EXTERNALSYM SQL_PARAM_INPUT_OUTPUT_STREAM}
  SQL_PARAM_OUTPUT_STREAM = 16;
  {$EXTERNALSYM SQL_PARAM_OUTPUT_STREAM}

// Defines used by Driver Manager when mapping SQLSetParam to SQLBindParameter
  SQL_PARAM_TYPE_DEFAULT = SQL_PARAM_INPUT_OUTPUT;
  {$EXTERNALSYM SQL_PARAM_TYPE_DEFAULT}
  SQL_SETPARAM_VALUE_MAX = (-1);
  {$EXTERNALSYM SQL_SETPARAM_VALUE_MAX}

// SQLColAttributes subdefines for SQL_COLUMN_UPDATABLE
  SQL_ATTR_READONLY = 0;
  {$EXTERNALSYM SQL_ATTR_READONLY}
  SQL_ATTR_WRITE = 1;
  {$EXTERNALSYM SQL_ATTR_WRITE}
  SQL_ATTR_READWRITE_UNKNOWN = 2;
  {$EXTERNALSYM SQL_ATTR_READWRITE_UNKNOWN}

// Special return values for SQLGetData
  SQL_NO_TOTAL = (-4);
  {$EXTERNALSYM SQL_NO_TOTAL}

//********************************************/
//* SQLGetFunctions: additional values for   */
//* fFunction to represent functions that    */
//* are not in the X/Open spec.              */
//********************************************/

  SQL_API_SQLALLOCHANDLESTD = 73;
  {$EXTERNALSYM SQL_API_SQLALLOCHANDLESTD}
  SQL_API_SQLBULKOPERATIONS = 24;
  {$EXTERNALSYM SQL_API_SQLBULKOPERATIONS}
  SQL_API_SQLBINDPARAMETER = 72;
  {$EXTERNALSYM SQL_API_SQLBINDPARAMETER}
  SQL_API_SQLBROWSECONNECT = 55;
  {$EXTERNALSYM SQL_API_SQLBROWSECONNECT}
  SQL_API_SQLCOLATTRIBUTES = 6;
  {$EXTERNALSYM SQL_API_SQLCOLATTRIBUTES}
  SQL_API_SQLCOLUMNPRIVILEGES = 56;
  {$EXTERNALSYM SQL_API_SQLCOLUMNPRIVILEGES}
  SQL_API_SQLDESCRIBEPARAM = 58;
  {$EXTERNALSYM SQL_API_SQLDESCRIBEPARAM}
  SQL_API_SQLDRIVERCONNECT = 41;
  {$EXTERNALSYM SQL_API_SQLDRIVERCONNECT}
  SQL_API_SQLDRIVERS = 71;
  {$EXTERNALSYM SQL_API_SQLDRIVERS}
  SQL_API_SQLEXTENDEDFETCH = 59;
  {$EXTERNALSYM SQL_API_SQLEXTENDEDFETCH}
  SQL_API_SQLFOREIGNKEYS = 60;
  {$EXTERNALSYM SQL_API_SQLFOREIGNKEYS}
  SQL_API_SQLMORERESULTS = 61;
  {$EXTERNALSYM SQL_API_SQLMORERESULTS}
  SQL_API_SQLNATIVESQL = 62;
  {$EXTERNALSYM SQL_API_SQLNATIVESQL}
  SQL_API_SQLNUMPARAMS = 63;
  {$EXTERNALSYM SQL_API_SQLNUMPARAMS}
  SQL_API_SQLPARAMOPTIONS = 64;
  {$EXTERNALSYM SQL_API_SQLPARAMOPTIONS}
  SQL_API_SQLPRIMARYKEYS = 65;
  {$EXTERNALSYM SQL_API_SQLPRIMARYKEYS}
  SQL_API_SQLPROCEDURECOLUMNS = 66;
  {$EXTERNALSYM SQL_API_SQLPROCEDURECOLUMNS}
  SQL_API_SQLPROCEDURES = 67;
  {$EXTERNALSYM SQL_API_SQLPROCEDURES}
  SQL_API_SQLSETPOS = 68;
  {$EXTERNALSYM SQL_API_SQLSETPOS}
  SQL_API_SQLSETSCROLLOPTIONS = 69;
  {$EXTERNALSYM SQL_API_SQLSETSCROLLOPTIONS}
  SQL_API_SQLTABLEPRIVILEGES = 70;
  {$EXTERNALSYM SQL_API_SQLTABLEPRIVILEGES}

//--------------------------------------------*/
// SQL_API_ALL_FUNCTIONS returns an array     */
// of 'booleans' representing whether a       */
// function is implemented by the driver.     */
//                                            */
// CAUTION: Only functions defined in ODBC    */
// version 2.0 and earlier are returned, the  */
// new high-range function numbers defined by */
// X/Open break this scheme.   See the new    */
// method -- SQL_API_ODBC3_ALL_FUNCTIONS      */
//--------------------------------------------*/

  SQL_API_ALL_FUNCTIONS = 0;       // See CAUTION above
  {$EXTERNALSYM SQL_API_ALL_FUNCTIONS}

//----------------------------------------------*/
// 2.X drivers export a dummy function with     */
// ordinal number SQL_API_LOADBYORDINAL to speed*/
// loading under the windows operating system.  */
//                                              */
// CAUTION: Loading by ordinal is not supported */
// for 3.0 and above drivers.                   */
//----------------------------------------------*/

  SQL_API_LOADBYORDINAL = 199;     // See CAUTION above
  {$EXTERNALSYM SQL_API_LOADBYORDINAL}

//----------------------------------------------*/
// SQL_API_ODBC3_ALL_FUNCTIONS                  */
// This returns a bitmap, which allows us to    */
// handle the higher-valued function numbers.   */
// Use  SQL_FUNC_EXISTS(bitmap,function_number) */
// to determine if the function exists.         */
//----------------------------------------------*/

  SQL_API_ODBC3_ALL_FUNCTIONS = 999;
  {$EXTERNALSYM SQL_API_ODBC3_ALL_FUNCTIONS}
  SQL_API_ODBC3_ALL_FUNCTIONS_SIZE = 250;     // array of 250 words
  {$EXTERNALSYM SQL_API_ODBC3_ALL_FUNCTIONS_SIZE}

function SQL_FUNC_EXISTS(pfExists: PSQLSMALLINT; uwAPI: SQLUSMALLINT): SQLINTEGER;
{$EXTERNALSYM SQL_FUNC_EXISTS}

//***********************************************/
// Extended definitions for SQLGetInfo          */
//***********************************************/

//---------------------------------*/
// Values in ODBC 2.0 that are not */
// in the X/Open spec              */
//---------------------------------*/
const
  SQL_INFO_FIRST = 0;
  {$EXTERNALSYM SQL_INFO_FIRST}
  SQL_ACTIVE_CONNECTIONS = 0;  // MAX_DRIVER_CONNECTIONS
  {$EXTERNALSYM SQL_ACTIVE_CONNECTIONS}
  SQL_ACTIVE_STATEMENTS = 1;  // MAX_CONCURRENT_ACTIVITIES
  {$EXTERNALSYM SQL_ACTIVE_STATEMENTS}
  SQL_DRIVER_HDBC = 3;
  {$EXTERNALSYM SQL_DRIVER_HDBC}
  SQL_DRIVER_HENV = 4;
  {$EXTERNALSYM SQL_DRIVER_HENV}
  SQL_DRIVER_HSTMT = 5;
  {$EXTERNALSYM SQL_DRIVER_HSTMT}
  SQL_DRIVER_NAME = 6;
  {$EXTERNALSYM SQL_DRIVER_NAME}
  SQL_DRIVER_VER = 7;
  {$EXTERNALSYM SQL_DRIVER_VER}
  SQL_ODBC_API_CONFORMANCE = 9;
  {$EXTERNALSYM SQL_ODBC_API_CONFORMANCE}
  SQL_ODBC_VER = 10;
  {$EXTERNALSYM SQL_ODBC_VER}
  SQL_ROW_UPDATES = 11;
  {$EXTERNALSYM SQL_ROW_UPDATES}
  SQL_ODBC_SAG_CLI_CONFORMANCE = 12;
  {$EXTERNALSYM SQL_ODBC_SAG_CLI_CONFORMANCE}
  SQL_ODBC_SQL_CONFORMANCE = 15;
  {$EXTERNALSYM SQL_ODBC_SQL_CONFORMANCE}
  SQL_PROCEDURES = 21;
  {$EXTERNALSYM SQL_PROCEDURES}
  SQL_CONCAT_NULL_BEHAVIOR = 22;
  {$EXTERNALSYM SQL_CONCAT_NULL_BEHAVIOR}
  SQL_CURSOR_ROLLBACK_BEHAVIOR = 24;
  {$EXTERNALSYM SQL_CURSOR_ROLLBACK_BEHAVIOR}
  SQL_EXPRESSIONS_IN_ORDERBY = 27;
  {$EXTERNALSYM SQL_EXPRESSIONS_IN_ORDERBY}
  SQL_MAX_OWNER_NAME_LEN = 32;  // MAX_SCHEMA_NAME_LEN
  {$EXTERNALSYM SQL_MAX_OWNER_NAME_LEN}
  SQL_MAX_PROCEDURE_NAME_LEN = 33;
  {$EXTERNALSYM SQL_MAX_PROCEDURE_NAME_LEN}
  SQL_MAX_QUALIFIER_NAME_LEN = 34;  // MAX_CATALOG_NAME_LEN
  {$EXTERNALSYM SQL_MAX_QUALIFIER_NAME_LEN}
  SQL_MULT_RESULT_SETS = 36;
  {$EXTERNALSYM SQL_MULT_RESULT_SETS}
  SQL_MULTIPLE_ACTIVE_TXN = 37;
  {$EXTERNALSYM SQL_MULTIPLE_ACTIVE_TXN}
  SQL_OUTER_JOINS = 38;
  {$EXTERNALSYM SQL_OUTER_JOINS}
  SQL_OWNER_TERM = 39;
  {$EXTERNALSYM SQL_OWNER_TERM}
  SQL_PROCEDURE_TERM = 40;
  {$EXTERNALSYM SQL_PROCEDURE_TERM}
  SQL_QUALIFIER_NAME_SEPARATOR = 41;
  {$EXTERNALSYM SQL_QUALIFIER_NAME_SEPARATOR}
  SQL_QUALIFIER_TERM = 42;
  {$EXTERNALSYM SQL_QUALIFIER_TERM}
  SQL_SCROLL_OPTIONS = 44;
  {$EXTERNALSYM SQL_SCROLL_OPTIONS}
  SQL_TABLE_TERM = 45;
  {$EXTERNALSYM SQL_TABLE_TERM}
  SQL_CONVERT_FUNCTIONS = 48;
  {$EXTERNALSYM SQL_CONVERT_FUNCTIONS}
  SQL_NUMERIC_FUNCTIONS = 49;
  {$EXTERNALSYM SQL_NUMERIC_FUNCTIONS}
  SQL_STRING_FUNCTIONS = 50;
  {$EXTERNALSYM SQL_STRING_FUNCTIONS}
  SQL_SYSTEM_FUNCTIONS = 51;
  {$EXTERNALSYM SQL_SYSTEM_FUNCTIONS}
  SQL_TIMEDATE_FUNCTIONS = 52;
  {$EXTERNALSYM SQL_TIMEDATE_FUNCTIONS}
  SQL_CONVERT_BIGINT = 53;
  {$EXTERNALSYM SQL_CONVERT_BIGINT}
  SQL_CONVERT_BINARY = 54;
  {$EXTERNALSYM SQL_CONVERT_BINARY}
  SQL_CONVERT_BIT = 55;
  {$EXTERNALSYM SQL_CONVERT_BIT}
  SQL_CONVERT_CHAR = 56;
  {$EXTERNALSYM SQL_CONVERT_CHAR}
  SQL_CONVERT_DATE = 57;
  {$EXTERNALSYM SQL_CONVERT_DATE}
  SQL_CONVERT_DECIMAL = 58;
  {$EXTERNALSYM SQL_CONVERT_DECIMAL}
  SQL_CONVERT_DOUBLE = 59;
  {$EXTERNALSYM SQL_CONVERT_DOUBLE}
  SQL_CONVERT_FLOAT = 60;
  {$EXTERNALSYM SQL_CONVERT_FLOAT}
  SQL_CONVERT_INTEGER = 61;
  {$EXTERNALSYM SQL_CONVERT_INTEGER}
  SQL_CONVERT_LONGVARCHAR = 62;
  {$EXTERNALSYM SQL_CONVERT_LONGVARCHAR}
  SQL_CONVERT_NUMERIC = 63;
  {$EXTERNALSYM SQL_CONVERT_NUMERIC}
  SQL_CONVERT_REAL = 64;
  {$EXTERNALSYM SQL_CONVERT_REAL}
  SQL_CONVERT_SMALLINT = 65;
  {$EXTERNALSYM SQL_CONVERT_SMALLINT}
  SQL_CONVERT_TIME = 66;
  {$EXTERNALSYM SQL_CONVERT_TIME}
  SQL_CONVERT_TIMESTAMP = 67;
  {$EXTERNALSYM SQL_CONVERT_TIMESTAMP}
  SQL_CONVERT_TINYINT = 68;
  {$EXTERNALSYM SQL_CONVERT_TINYINT}
  SQL_CONVERT_VARBINARY = 69;
  {$EXTERNALSYM SQL_CONVERT_VARBINARY}
  SQL_CONVERT_VARCHAR = 70;
  {$EXTERNALSYM SQL_CONVERT_VARCHAR}
  SQL_CONVERT_LONGVARBINARY = 71;
  {$EXTERNALSYM SQL_CONVERT_LONGVARBINARY}
  SQL_ODBC_SQL_OPT_IEF = 73;      // SQL_INTEGRITY
  {$EXTERNALSYM SQL_ODBC_SQL_OPT_IEF}
  SQL_CORRELATION_NAME = 74;
  {$EXTERNALSYM SQL_CORRELATION_NAME}
  SQL_NON_NULLABLE_COLUMNS = 75;
  {$EXTERNALSYM SQL_NON_NULLABLE_COLUMNS}
  SQL_DRIVER_HLIB = 76;
  {$EXTERNALSYM SQL_DRIVER_HLIB}
  SQL_DRIVER_ODBC_VER = 77;
  {$EXTERNALSYM SQL_DRIVER_ODBC_VER}
  SQL_LOCK_TYPES = 78;
  {$EXTERNALSYM SQL_LOCK_TYPES}
  SQL_POS_OPERATIONS = 79;
  {$EXTERNALSYM SQL_POS_OPERATIONS}
  SQL_POSITIONED_STATEMENTS = 80;
  {$EXTERNALSYM SQL_POSITIONED_STATEMENTS}
  SQL_BOOKMARK_PERSISTENCE = 82;
  {$EXTERNALSYM SQL_BOOKMARK_PERSISTENCE}
  SQL_STATIC_SENSITIVITY = 83;
  {$EXTERNALSYM SQL_STATIC_SENSITIVITY}
  SQL_FILE_USAGE = 84;
  {$EXTERNALSYM SQL_FILE_USAGE}
  SQL_COLUMN_ALIAS = 87;
  {$EXTERNALSYM SQL_COLUMN_ALIAS}
  SQL_GROUP_BY = 88;
  {$EXTERNALSYM SQL_GROUP_BY}
  SQL_KEYWORDS = 89;
  {$EXTERNALSYM SQL_KEYWORDS}
  SQL_OWNER_USAGE = 91;
  {$EXTERNALSYM SQL_OWNER_USAGE}
  SQL_QUALIFIER_USAGE = 92;
  {$EXTERNALSYM SQL_QUALIFIER_USAGE}
  SQL_QUOTED_IDENTIFIER_CASE = 93;
  {$EXTERNALSYM SQL_QUOTED_IDENTIFIER_CASE}
  SQL_SUBQUERIES = 95;
  {$EXTERNALSYM SQL_SUBQUERIES}
  SQL_UNION = 96;
  {$EXTERNALSYM SQL_UNION}
  SQL_MAX_ROW_SIZE_INCLUDES_LONG = 103;
  {$EXTERNALSYM SQL_MAX_ROW_SIZE_INCLUDES_LONG}
  SQL_MAX_CHAR_LITERAL_LEN = 108;
  {$EXTERNALSYM SQL_MAX_CHAR_LITERAL_LEN}
  SQL_TIMEDATE_ADD_INTERVALS = 109;
  {$EXTERNALSYM SQL_TIMEDATE_ADD_INTERVALS}
  SQL_TIMEDATE_DIFF_INTERVALS = 110;
  {$EXTERNALSYM SQL_TIMEDATE_DIFF_INTERVALS}
  SQL_NEED_LONG_DATA_LEN = 111;
  {$EXTERNALSYM SQL_NEED_LONG_DATA_LEN}
  SQL_MAX_BINARY_LITERAL_LEN = 112;
  {$EXTERNALSYM SQL_MAX_BINARY_LITERAL_LEN}
  SQL_LIKE_ESCAPE_CLAUSE = 113;
  {$EXTERNALSYM SQL_LIKE_ESCAPE_CLAUSE}
  SQL_QUALIFIER_LOCATION = 114;
  {$EXTERNALSYM SQL_QUALIFIER_LOCATION}

//-----------------------------------------------*/
// ODBC 3.0 SQLGetInfo values that are not part  */
// of the X/Open standard at this time.   X/Open */
// standard values are in sql.h.                 */
//-----------------------------------------------*/

  SQL_ACTIVE_ENVIRONMENTS = 116;
  {$EXTERNALSYM SQL_ACTIVE_ENVIRONMENTS}
  SQL_ALTER_DOMAIN = 117;
  {$EXTERNALSYM SQL_ALTER_DOMAIN}

  SQL_SQL_CONFORMANCE = 118;
  {$EXTERNALSYM SQL_SQL_CONFORMANCE}
  SQL_DATETIME_LITERALS = 119;
  {$EXTERNALSYM SQL_DATETIME_LITERALS}

  SQL_ASYNC_MODE = 10021;   // new X/Open spec
  {$EXTERNALSYM SQL_ASYNC_MODE}
  SQL_BATCH_ROW_COUNT = 120;
  {$EXTERNALSYM SQL_BATCH_ROW_COUNT}
  SQL_BATCH_SUPPORT = 121;
  {$EXTERNALSYM SQL_BATCH_SUPPORT}
  SQL_CATALOG_LOCATION = SQL_QUALIFIER_LOCATION;
  {$EXTERNALSYM SQL_CATALOG_LOCATION}
  SQL_CATALOG_NAME_SEPARATOR = SQL_QUALIFIER_NAME_SEPARATOR;
  {$EXTERNALSYM SQL_CATALOG_NAME_SEPARATOR}
  SQL_CATALOG_TERM = SQL_QUALIFIER_TERM;
  {$EXTERNALSYM SQL_CATALOG_TERM}
  SQL_CATALOG_USAGE = SQL_QUALIFIER_USAGE;
  {$EXTERNALSYM SQL_CATALOG_USAGE}
  SQL_CONVERT_WCHAR = 122;
  {$EXTERNALSYM SQL_CONVERT_WCHAR}
  SQL_CONVERT_INTERVAL_DAY_TIME = 123;
  {$EXTERNALSYM SQL_CONVERT_INTERVAL_DAY_TIME}
  SQL_CONVERT_INTERVAL_YEAR_MONTH = 124;
  {$EXTERNALSYM SQL_CONVERT_INTERVAL_YEAR_MONTH}
  SQL_CONVERT_WLONGVARCHAR = 125;
  {$EXTERNALSYM SQL_CONVERT_WLONGVARCHAR}
  SQL_CONVERT_WVARCHAR = 126;
  {$EXTERNALSYM SQL_CONVERT_WVARCHAR}
  SQL_CREATE_ASSERTION = 127;
  {$EXTERNALSYM SQL_CREATE_ASSERTION}
  SQL_CREATE_CHARACTER_SET = 128;
  {$EXTERNALSYM SQL_CREATE_CHARACTER_SET}
  SQL_CREATE_COLLATION = 129;
  {$EXTERNALSYM SQL_CREATE_COLLATION}
  SQL_CREATE_DOMAIN = 130;
  {$EXTERNALSYM SQL_CREATE_DOMAIN}
  SQL_CREATE_SCHEMA = 131;
  {$EXTERNALSYM SQL_CREATE_SCHEMA}
  SQL_CREATE_TABLE = 132;
  {$EXTERNALSYM SQL_CREATE_TABLE}
  SQL_CREATE_TRANSLATION = 133;
  {$EXTERNALSYM SQL_CREATE_TRANSLATION}
  SQL_CREATE_VIEW = 134;
  {$EXTERNALSYM SQL_CREATE_VIEW}
  SQL_DRIVER_HDESC = 135;
  {$EXTERNALSYM SQL_DRIVER_HDESC}
  SQL_DROP_ASSERTION = 136;
  {$EXTERNALSYM SQL_DROP_ASSERTION}
  SQL_DROP_CHARACTER_SET = 137;
  {$EXTERNALSYM SQL_DROP_CHARACTER_SET}
  SQL_DROP_COLLATION = 138;
  {$EXTERNALSYM SQL_DROP_COLLATION}
  SQL_DROP_DOMAIN = 139;
  {$EXTERNALSYM SQL_DROP_DOMAIN}
  SQL_DROP_SCHEMA = 140;
  {$EXTERNALSYM SQL_DROP_SCHEMA}
  SQL_DROP_TABLE = 141;
  {$EXTERNALSYM SQL_DROP_TABLE}
  SQL_DROP_TRANSLATION = 142;
  {$EXTERNALSYM SQL_DROP_TRANSLATION}
  SQL_DROP_VIEW = 143;
  {$EXTERNALSYM SQL_DROP_VIEW}
  SQL_DYNAMIC_CURSOR_ATTRIBUTES1 = 144;
  {$EXTERNALSYM SQL_DYNAMIC_CURSOR_ATTRIBUTES1}
  SQL_DYNAMIC_CURSOR_ATTRIBUTES2 = 145;
  {$EXTERNALSYM SQL_DYNAMIC_CURSOR_ATTRIBUTES2}
  SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES1 = 146;
  {$EXTERNALSYM SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES1}
  SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES2 = 147;
  {$EXTERNALSYM SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES2}
  SQL_INDEX_KEYWORDS = 148;
  {$EXTERNALSYM SQL_INDEX_KEYWORDS}
  SQL_INFO_SCHEMA_VIEWS = 149;
  {$EXTERNALSYM SQL_INFO_SCHEMA_VIEWS}
  SQL_KEYSET_CURSOR_ATTRIBUTES1 = 150;
  {$EXTERNALSYM SQL_KEYSET_CURSOR_ATTRIBUTES1}
  SQL_KEYSET_CURSOR_ATTRIBUTES2 = 151;
  {$EXTERNALSYM SQL_KEYSET_CURSOR_ATTRIBUTES2}
  SQL_MAX_ASYNC_CONCURRENT_STATEMENTS = 10022;   // new X/Open spec
  {$EXTERNALSYM SQL_MAX_ASYNC_CONCURRENT_STATEMENTS}
  SQL_ODBC_INTERFACE_CONFORMANCE = 152;
  {$EXTERNALSYM SQL_ODBC_INTERFACE_CONFORMANCE}
  SQL_PARAM_ARRAY_ROW_COUNTS = 153;
  {$EXTERNALSYM SQL_PARAM_ARRAY_ROW_COUNTS}
  SQL_PARAM_ARRAY_SELECTS = 154;
  {$EXTERNALSYM SQL_PARAM_ARRAY_SELECTS}
  SQL_SCHEMA_TERM = SQL_OWNER_TERM;
  {$EXTERNALSYM SQL_SCHEMA_TERM}
  SQL_SCHEMA_USAGE = SQL_OWNER_USAGE;
  {$EXTERNALSYM SQL_SCHEMA_USAGE}
  SQL_SQL92_DATETIME_FUNCTIONS = 155;
  {$EXTERNALSYM SQL_SQL92_DATETIME_FUNCTIONS}
  SQL_SQL92_FOREIGN_KEY_DELETE_RULE = 156;
  {$EXTERNALSYM SQL_SQL92_FOREIGN_KEY_DELETE_RULE}
  SQL_SQL92_FOREIGN_KEY_UPDATE_RULE = 157;
  {$EXTERNALSYM SQL_SQL92_FOREIGN_KEY_UPDATE_RULE}
  SQL_SQL92_GRANT = 158;
  {$EXTERNALSYM SQL_SQL92_GRANT}
  SQL_SQL92_NUMERIC_VALUE_FUNCTIONS = 159;
  {$EXTERNALSYM SQL_SQL92_NUMERIC_VALUE_FUNCTIONS}
  SQL_SQL92_PREDICATES = 160;
  {$EXTERNALSYM SQL_SQL92_PREDICATES}
  SQL_SQL92_RELATIONAL_JOIN_OPERATORS = 161;
  {$EXTERNALSYM SQL_SQL92_RELATIONAL_JOIN_OPERATORS}
  SQL_SQL92_REVOKE = 162;
  {$EXTERNALSYM SQL_SQL92_REVOKE}
  SQL_SQL92_ROW_VALUE_CONSTRUCTOR = 163;
  {$EXTERNALSYM SQL_SQL92_ROW_VALUE_CONSTRUCTOR}
  SQL_SQL92_STRING_FUNCTIONS = 164;
  {$EXTERNALSYM SQL_SQL92_STRING_FUNCTIONS}
  SQL_SQL92_VALUE_EXPRESSIONS = 165;
  {$EXTERNALSYM SQL_SQL92_VALUE_EXPRESSIONS}
  SQL_STANDARD_CLI_CONFORMANCE = 166;
  {$EXTERNALSYM SQL_STANDARD_CLI_CONFORMANCE}
  SQL_STATIC_CURSOR_ATTRIBUTES1 = 167;
  {$EXTERNALSYM SQL_STATIC_CURSOR_ATTRIBUTES1}
  SQL_STATIC_CURSOR_ATTRIBUTES2 = 168;
  {$EXTERNALSYM SQL_STATIC_CURSOR_ATTRIBUTES2}

  SQL_AGGREGATE_FUNCTIONS = 169;
  {$EXTERNALSYM SQL_AGGREGATE_FUNCTIONS}
  SQL_DDL_INDEX = 170;
  {$EXTERNALSYM SQL_DDL_INDEX}
  SQL_DM_VER = 171;
  {$EXTERNALSYM SQL_DM_VER}
  SQL_INSERT_STATEMENT = 172;
  {$EXTERNALSYM SQL_INSERT_STATEMENT}
  SQL_CONVERT_GUID = 173;
  {$EXTERNALSYM SQL_CONVERT_GUID}
  SQL_UNION_STATEMENT = SQL_UNION;
  {$EXTERNALSYM SQL_UNION_STATEMENT}

// Info Types
  SQL_ASYNC_DBC_FUNCTIONS = 10023;
  {$EXTERNALSYM SQL_ASYNC_DBC_FUNCTIONS}

  SQL_DTC_TRANSITION_COST = 1750;
  {$EXTERNALSYM SQL_DTC_TRANSITION_COST}

// SQL_ALTER_TABLE bitmasks
// the following 5 bitmasks are defined in sql.h
//#define SQL_AT_ADD_COLUMN                      0x00000001L
//#define SQL_AT_DROP_COLUMN                     0x00000002L
//#define SQL_AT_ADD_CONSTRAINT                  0x00000008L
  SQL_AT_ADD_COLUMN_SINGLE = $00000020;
  {$EXTERNALSYM SQL_AT_ADD_COLUMN_SINGLE}
  SQL_AT_ADD_COLUMN_DEFAULT = $00000040;
  {$EXTERNALSYM SQL_AT_ADD_COLUMN_DEFAULT}
  SQL_AT_ADD_COLUMN_COLLATION = $00000080;
  {$EXTERNALSYM SQL_AT_ADD_COLUMN_COLLATION}
  SQL_AT_SET_COLUMN_DEFAULT = $00000100;
  {$EXTERNALSYM SQL_AT_SET_COLUMN_DEFAULT}
  SQL_AT_DROP_COLUMN_DEFAULT = $00000200;
  {$EXTERNALSYM SQL_AT_DROP_COLUMN_DEFAULT}
  SQL_AT_DROP_COLUMN_CASCADE = $00000400;
  {$EXTERNALSYM SQL_AT_DROP_COLUMN_CASCADE}
  SQL_AT_DROP_COLUMN_RESTRICT = $00000800;
  {$EXTERNALSYM SQL_AT_DROP_COLUMN_RESTRICT}
  SQL_AT_ADD_TABLE_CONSTRAINT = $00001000;
  {$EXTERNALSYM SQL_AT_ADD_TABLE_CONSTRAINT}
  SQL_AT_DROP_TABLE_CONSTRAINT_CASCADE = $00002000;
  {$EXTERNALSYM SQL_AT_DROP_TABLE_CONSTRAINT_CASCADE}
  SQL_AT_DROP_TABLE_CONSTRAINT_RESTRICT = $00004000;
  {$EXTERNALSYM SQL_AT_DROP_TABLE_CONSTRAINT_RESTRICT}
  SQL_AT_CONSTRAINT_NAME_DEFINITION = $00008000;
  {$EXTERNALSYM SQL_AT_CONSTRAINT_NAME_DEFINITION}
  SQL_AT_CONSTRAINT_INITIALLY_DEFERRED = $00010000;
  {$EXTERNALSYM SQL_AT_CONSTRAINT_INITIALLY_DEFERRED}
  SQL_AT_CONSTRAINT_INITIALLY_IMMEDIATE = $00020000;
  {$EXTERNALSYM SQL_AT_CONSTRAINT_INITIALLY_IMMEDIATE}
  SQL_AT_CONSTRAINT_DEFERRABLE = $00040000;
  {$EXTERNALSYM SQL_AT_CONSTRAINT_DEFERRABLE}
  SQL_AT_CONSTRAINT_NON_DEFERRABLE = $00080000;
  {$EXTERNALSYM SQL_AT_CONSTRAINT_NON_DEFERRABLE}

// SQL_CONVERT_*  return value bitmasks

  SQL_CVT_CHAR = $00000001;
  {$EXTERNALSYM SQL_CVT_CHAR}
  SQL_CVT_NUMERIC = $00000002;
  {$EXTERNALSYM SQL_CVT_NUMERIC}
  SQL_CVT_DECIMAL = $00000004;
  {$EXTERNALSYM SQL_CVT_DECIMAL}
  SQL_CVT_INTEGER = $00000008;
  {$EXTERNALSYM SQL_CVT_INTEGER}
  SQL_CVT_SMALLINT = $00000010;
  {$EXTERNALSYM SQL_CVT_SMALLINT}
  SQL_CVT_FLOAT = $00000020;
  {$EXTERNALSYM SQL_CVT_FLOAT}
  SQL_CVT_REAL = $00000040;
  {$EXTERNALSYM SQL_CVT_REAL}
  SQL_CVT_DOUBLE = $00000080;
  {$EXTERNALSYM SQL_CVT_DOUBLE}
  SQL_CVT_VARCHAR = $00000100;
  {$EXTERNALSYM SQL_CVT_VARCHAR}
  SQL_CVT_LONGVARCHAR = $00000200;
  {$EXTERNALSYM SQL_CVT_LONGVARCHAR}
  SQL_CVT_BINARY = $00000400;
  {$EXTERNALSYM SQL_CVT_BINARY}
  SQL_CVT_VARBINARY = $00000800;
  {$EXTERNALSYM SQL_CVT_VARBINARY}
  SQL_CVT_BIT = $00001000;
  {$EXTERNALSYM SQL_CVT_BIT}
  SQL_CVT_TINYINT = $00002000;
  {$EXTERNALSYM SQL_CVT_TINYINT}
  SQL_CVT_BIGINT = $00004000;
  {$EXTERNALSYM SQL_CVT_BIGINT}
  SQL_CVT_DATE = $00008000;
  {$EXTERNALSYM SQL_CVT_DATE}
  SQL_CVT_TIME = $00010000;
  {$EXTERNALSYM SQL_CVT_TIME}
  SQL_CVT_TIMESTAMP = $00020000;
  {$EXTERNALSYM SQL_CVT_TIMESTAMP}
  SQL_CVT_LONGVARBINARY = $00040000;
  {$EXTERNALSYM SQL_CVT_LONGVARBINARY}
  SQL_CVT_INTERVAL_YEAR_MONTH = $00080000;
  {$EXTERNALSYM SQL_CVT_INTERVAL_YEAR_MONTH}
  SQL_CVT_INTERVAL_DAY_TIME = $00100000;
  {$EXTERNALSYM SQL_CVT_INTERVAL_DAY_TIME}
  SQL_CVT_WCHAR = $00200000;
  {$EXTERNALSYM SQL_CVT_WCHAR}
  SQL_CVT_WLONGVARCHAR = $00400000;
  {$EXTERNALSYM SQL_CVT_WLONGVARCHAR}
  SQL_CVT_WVARCHAR = $00800000;
  {$EXTERNALSYM SQL_CVT_WVARCHAR}
  SQL_CVT_GUID = $01000000;
  {$EXTERNALSYM SQL_CVT_GUID}

// SQL_CONVERT_FUNCTIONS functions
  SQL_FN_CVT_CONVERT = $00000001;
  {$EXTERNALSYM SQL_FN_CVT_CONVERT}
  SQL_FN_CVT_CAST = $00000002;
  {$EXTERNALSYM SQL_FN_CVT_CAST}

// SQL_STRING_FUNCTIONS functions

  SQL_FN_STR_CONCAT = $00000001;
  {$EXTERNALSYM SQL_FN_STR_CONCAT}
  SQL_FN_STR_INSERT = $00000002;
  {$EXTERNALSYM SQL_FN_STR_INSERT}
  SQL_FN_STR_LEFT = $00000004;
  {$EXTERNALSYM SQL_FN_STR_LEFT}
  SQL_FN_STR_LTRIM = $00000008;
  {$EXTERNALSYM SQL_FN_STR_LTRIM}
  SQL_FN_STR_LENGTH = $00000010;
  {$EXTERNALSYM SQL_FN_STR_LENGTH}
  SQL_FN_STR_LOCATE = $00000020;
  {$EXTERNALSYM SQL_FN_STR_LOCATE}
  SQL_FN_STR_LCASE = $00000040;
  {$EXTERNALSYM SQL_FN_STR_LCASE}
  SQL_FN_STR_REPEAT = $00000080;
  {$EXTERNALSYM SQL_FN_STR_REPEAT}
  SQL_FN_STR_REPLACE = $00000100;
  {$EXTERNALSYM SQL_FN_STR_REPLACE}
  SQL_FN_STR_RIGHT = $00000200;
  {$EXTERNALSYM SQL_FN_STR_RIGHT}
  SQL_FN_STR_RTRIM = $00000400;
  {$EXTERNALSYM SQL_FN_STR_RTRIM}
  SQL_FN_STR_SUBSTRING = $00000800;
  {$EXTERNALSYM SQL_FN_STR_SUBSTRING}
  SQL_FN_STR_UCASE = $00001000;
  {$EXTERNALSYM SQL_FN_STR_UCASE}
  SQL_FN_STR_ASCII = $00002000;
  {$EXTERNALSYM SQL_FN_STR_ASCII}
  SQL_FN_STR_CHAR = $00004000;
  {$EXTERNALSYM SQL_FN_STR_CHAR}
  SQL_FN_STR_DIFFERENCE = $00008000;
  {$EXTERNALSYM SQL_FN_STR_DIFFERENCE}
  SQL_FN_STR_LOCATE_2 = $00010000;
  {$EXTERNALSYM SQL_FN_STR_LOCATE_2}
  SQL_FN_STR_SOUNDEX = $00020000;
  {$EXTERNALSYM SQL_FN_STR_SOUNDEX}
  SQL_FN_STR_SPACE = $00040000;
  {$EXTERNALSYM SQL_FN_STR_SPACE}
  SQL_FN_STR_BIT_LENGTH = $00080000;
  {$EXTERNALSYM SQL_FN_STR_BIT_LENGTH}
  SQL_FN_STR_CHAR_LENGTH = $00100000;
  {$EXTERNALSYM SQL_FN_STR_CHAR_LENGTH}
  SQL_FN_STR_CHARACTER_LENGTH = $00200000;
  {$EXTERNALSYM SQL_FN_STR_CHARACTER_LENGTH}
  SQL_FN_STR_OCTET_LENGTH = $00400000;
  {$EXTERNALSYM SQL_FN_STR_OCTET_LENGTH}
  SQL_FN_STR_POSITION = $00800000;
  {$EXTERNALSYM SQL_FN_STR_POSITION}

// SQL_SQL92_STRING_FUNCTIONS
  SQL_SSF_CONVERT = $00000001;
  {$EXTERNALSYM SQL_SSF_CONVERT}
  SQL_SSF_LOWER = $00000002;
  {$EXTERNALSYM SQL_SSF_LOWER}
  SQL_SSF_UPPER = $00000004;
  {$EXTERNALSYM SQL_SSF_UPPER}
  SQL_SSF_SUBSTRING = $00000008;
  {$EXTERNALSYM SQL_SSF_SUBSTRING}
  SQL_SSF_TRANSLATE = $00000010;
  {$EXTERNALSYM SQL_SSF_TRANSLATE}
  SQL_SSF_TRIM_BOTH = $00000020;
  {$EXTERNALSYM SQL_SSF_TRIM_BOTH}
  SQL_SSF_TRIM_LEADING = $00000040;
  {$EXTERNALSYM SQL_SSF_TRIM_LEADING}
  SQL_SSF_TRIM_TRAILING = $00000080;
  {$EXTERNALSYM SQL_SSF_TRIM_TRAILING}

// SQL_NUMERIC_FUNCTIONS functions
  SQL_FN_NUM_ABS = $00000001;
  {$EXTERNALSYM SQL_FN_NUM_ABS}
  SQL_FN_NUM_ACOS = $00000002;
  {$EXTERNALSYM SQL_FN_NUM_ACOS}
  SQL_FN_NUM_ASIN = $00000004;
  {$EXTERNALSYM SQL_FN_NUM_ASIN}
  SQL_FN_NUM_ATAN = $00000008;
  {$EXTERNALSYM SQL_FN_NUM_ATAN}
  SQL_FN_NUM_ATAN2 = $00000010;
  {$EXTERNALSYM SQL_FN_NUM_ATAN2}
  SQL_FN_NUM_CEILING = $00000020;
  {$EXTERNALSYM SQL_FN_NUM_CEILING}
  SQL_FN_NUM_COS = $00000040;
  {$EXTERNALSYM SQL_FN_NUM_COS}
  SQL_FN_NUM_COT = $00000080;
  {$EXTERNALSYM SQL_FN_NUM_COT}
  SQL_FN_NUM_EXP = $00000100;
  {$EXTERNALSYM SQL_FN_NUM_EXP}
  SQL_FN_NUM_FLOOR = $00000200;
  {$EXTERNALSYM SQL_FN_NUM_FLOOR}
  SQL_FN_NUM_LOG = $00000400;
  {$EXTERNALSYM SQL_FN_NUM_LOG}
  SQL_FN_NUM_MOD = $00000800;
  {$EXTERNALSYM SQL_FN_NUM_MOD}
  SQL_FN_NUM_SIGN = $00001000;
  {$EXTERNALSYM SQL_FN_NUM_SIGN}
  SQL_FN_NUM_SIN = $00002000;
  {$EXTERNALSYM SQL_FN_NUM_SIN}
  SQL_FN_NUM_SQRT = $00004000;
  {$EXTERNALSYM SQL_FN_NUM_SQRT}
  SQL_FN_NUM_TAN = $00008000;
  {$EXTERNALSYM SQL_FN_NUM_TAN}
  SQL_FN_NUM_PI = $00010000;
  {$EXTERNALSYM SQL_FN_NUM_PI}
  SQL_FN_NUM_RAND = $00020000;
  {$EXTERNALSYM SQL_FN_NUM_RAND}
  SQL_FN_NUM_DEGREES = $00040000;
  {$EXTERNALSYM SQL_FN_NUM_DEGREES}
  SQL_FN_NUM_LOG10 = $00080000;
  {$EXTERNALSYM SQL_FN_NUM_LOG10}
  SQL_FN_NUM_POWER = $00100000;
  {$EXTERNALSYM SQL_FN_NUM_POWER}
  SQL_FN_NUM_RADIANS = $00200000;
  {$EXTERNALSYM SQL_FN_NUM_RADIANS}
  SQL_FN_NUM_ROUND = $00400000;
  {$EXTERNALSYM SQL_FN_NUM_ROUND}
  SQL_FN_NUM_TRUNCATE = $00800000;
  {$EXTERNALSYM SQL_FN_NUM_TRUNCATE}

// SQL_SQL92_NUMERIC_VALUE_FUNCTIONS
  SQL_SNVF_BIT_LENGTH = $00000001;
  {$EXTERNALSYM SQL_SNVF_BIT_LENGTH}
  SQL_SNVF_CHAR_LENGTH = $00000002;
  {$EXTERNALSYM SQL_SNVF_CHAR_LENGTH}
  SQL_SNVF_CHARACTER_LENGTH = $00000004;
  {$EXTERNALSYM SQL_SNVF_CHARACTER_LENGTH}
  SQL_SNVF_EXTRACT = $00000008;
  {$EXTERNALSYM SQL_SNVF_EXTRACT}
  SQL_SNVF_OCTET_LENGTH = $00000010;
  {$EXTERNALSYM SQL_SNVF_OCTET_LENGTH}
  SQL_SNVF_POSITION = $00000020;
  {$EXTERNALSYM SQL_SNVF_POSITION}

// SQL_TIMEDATE_FUNCTIONS functions
  SQL_FN_TD_NOW = $00000001;
  {$EXTERNALSYM SQL_FN_TD_NOW}
  SQL_FN_TD_CURDATE = $00000002;
  {$EXTERNALSYM SQL_FN_TD_CURDATE}
  SQL_FN_TD_DAYOFMONTH = $00000004;
  {$EXTERNALSYM SQL_FN_TD_DAYOFMONTH}
  SQL_FN_TD_DAYOFWEEK = $00000008;
  {$EXTERNALSYM SQL_FN_TD_DAYOFWEEK}
  SQL_FN_TD_DAYOFYEAR = $00000010;
  {$EXTERNALSYM SQL_FN_TD_DAYOFYEAR}
  SQL_FN_TD_MONTH = $00000020;
  {$EXTERNALSYM SQL_FN_TD_MONTH}
  SQL_FN_TD_QUARTER = $00000040;
  {$EXTERNALSYM SQL_FN_TD_QUARTER}
  SQL_FN_TD_WEEK = $00000080;
  {$EXTERNALSYM SQL_FN_TD_WEEK}
  SQL_FN_TD_YEAR = $00000100;
  {$EXTERNALSYM SQL_FN_TD_YEAR}
  SQL_FN_TD_CURTIME = $00000200;
  {$EXTERNALSYM SQL_FN_TD_CURTIME}
  SQL_FN_TD_HOUR = $00000400;
  {$EXTERNALSYM SQL_FN_TD_HOUR}
  SQL_FN_TD_MINUTE = $00000800;
  {$EXTERNALSYM SQL_FN_TD_MINUTE}
  SQL_FN_TD_SECOND = $00001000;
  {$EXTERNALSYM SQL_FN_TD_SECOND}
  SQL_FN_TD_TIMESTAMPADD = $00002000;
  {$EXTERNALSYM SQL_FN_TD_TIMESTAMPADD}
  SQL_FN_TD_TIMESTAMPDIFF = $00004000;
  {$EXTERNALSYM SQL_FN_TD_TIMESTAMPDIFF}
  SQL_FN_TD_DAYNAME = $00008000;
  {$EXTERNALSYM SQL_FN_TD_DAYNAME}
  SQL_FN_TD_MONTHNAME = $00010000;
  {$EXTERNALSYM SQL_FN_TD_MONTHNAME}
  SQL_FN_TD_CURRENT_DATE = $00020000;
  {$EXTERNALSYM SQL_FN_TD_CURRENT_DATE}
  SQL_FN_TD_CURRENT_TIME = $00040000;
  {$EXTERNALSYM SQL_FN_TD_CURRENT_TIME}
  SQL_FN_TD_CURRENT_TIMESTAMP = $00080000;
  {$EXTERNALSYM SQL_FN_TD_CURRENT_TIMESTAMP}
  SQL_FN_TD_EXTRACT = $00100000;
  {$EXTERNALSYM SQL_FN_TD_EXTRACT}

// SQL_SQL92_DATETIME_FUNCTIONS
  SQL_SDF_CURRENT_DATE = $00000001;
  {$EXTERNALSYM SQL_SDF_CURRENT_DATE}
  SQL_SDF_CURRENT_TIME = $00000002;
  {$EXTERNALSYM SQL_SDF_CURRENT_TIME}
  SQL_SDF_CURRENT_TIMESTAMP = $00000004;
  {$EXTERNALSYM SQL_SDF_CURRENT_TIMESTAMP}

// SQL_SYSTEM_FUNCTIONS functions
  SQL_FN_SYS_USERNAME = $00000001;
  {$EXTERNALSYM SQL_FN_SYS_USERNAME}
  SQL_FN_SYS_DBNAME = $00000002;
  {$EXTERNALSYM SQL_FN_SYS_DBNAME}
  SQL_FN_SYS_IFNULL = $00000004;
  {$EXTERNALSYM SQL_FN_SYS_IFNULL}

// SQL_TIMEDATE_ADD_INTERVALS and SQL_TIMEDATE_DIFF_INTERVALS functions
  SQL_FN_TSI_FRAC_SECOND = $00000001;
  {$EXTERNALSYM SQL_FN_TSI_FRAC_SECOND}
  SQL_FN_TSI_SECOND = $00000002;
  {$EXTERNALSYM SQL_FN_TSI_SECOND}
  SQL_FN_TSI_MINUTE = $00000004;
  {$EXTERNALSYM SQL_FN_TSI_MINUTE}
  SQL_FN_TSI_HOUR = $00000008;
  {$EXTERNALSYM SQL_FN_TSI_HOUR}
  SQL_FN_TSI_DAY = $00000010;
  {$EXTERNALSYM SQL_FN_TSI_DAY}
  SQL_FN_TSI_WEEK = $00000020;
  {$EXTERNALSYM SQL_FN_TSI_WEEK}
  SQL_FN_TSI_MONTH = $00000040;
  {$EXTERNALSYM SQL_FN_TSI_MONTH}
  SQL_FN_TSI_QUARTER = $00000080;
  {$EXTERNALSYM SQL_FN_TSI_QUARTER}
  SQL_FN_TSI_YEAR = $00000100;
  {$EXTERNALSYM SQL_FN_TSI_YEAR}

// bitmasks for SQL_DYNAMIC_CURSOR_ATTRIBUTES1,
// * SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES1,
// * SQL_KEYSET_CURSOR_ATTRIBUTES1, and SQL_STATIC_CURSOR_ATTRIBUTES1

// supported SQLFetchScroll FetchOrientation's
  SQL_CA1_NEXT = $00000001;
  {$EXTERNALSYM SQL_CA1_NEXT}
  SQL_CA1_ABSOLUTE = $00000002;
  {$EXTERNALSYM SQL_CA1_ABSOLUTE}
  SQL_CA1_RELATIVE = $00000004;
  {$EXTERNALSYM SQL_CA1_RELATIVE}
  SQL_CA1_BOOKMARK = $00000008;
  {$EXTERNALSYM SQL_CA1_BOOKMARK}

// supported SQLSetPos LockType's
  SQL_CA1_LOCK_NO_CHANGE = $00000040;
  {$EXTERNALSYM SQL_CA1_LOCK_NO_CHANGE}
  SQL_CA1_LOCK_EXCLUSIVE = $00000080;
  {$EXTERNALSYM SQL_CA1_LOCK_EXCLUSIVE}
  SQL_CA1_LOCK_UNLOCK = $00000100;
  {$EXTERNALSYM SQL_CA1_LOCK_UNLOCK}

// supported SQLSetPos Operations
  SQL_CA1_POS_POSITION = $00000200;
  {$EXTERNALSYM SQL_CA1_POS_POSITION}
  SQL_CA1_POS_UPDATE = $00000400;
  {$EXTERNALSYM SQL_CA1_POS_UPDATE}
  SQL_CA1_POS_DELETE = $00000800;
  {$EXTERNALSYM SQL_CA1_POS_DELETE}
  SQL_CA1_POS_REFRESH = $00001000;
  {$EXTERNALSYM SQL_CA1_POS_REFRESH}

// positioned updates and deletes
  SQL_CA1_POSITIONED_UPDATE = $00002000;
  {$EXTERNALSYM SQL_CA1_POSITIONED_UPDATE}
  SQL_CA1_POSITIONED_DELETE = $00004000;
  {$EXTERNALSYM SQL_CA1_POSITIONED_DELETE}
  SQL_CA1_SELECT_FOR_UPDATE = $00008000;
  {$EXTERNALSYM SQL_CA1_SELECT_FOR_UPDATE}

// supported SQLBulkOperations operations
  SQL_CA1_BULK_ADD = $00010000;
  {$EXTERNALSYM SQL_CA1_BULK_ADD}
  SQL_CA1_BULK_UPDATE_BY_BOOKMARK = $00020000;
  {$EXTERNALSYM SQL_CA1_BULK_UPDATE_BY_BOOKMARK}
  SQL_CA1_BULK_DELETE_BY_BOOKMARK = $00040000;
  {$EXTERNALSYM SQL_CA1_BULK_DELETE_BY_BOOKMARK}
  SQL_CA1_BULK_FETCH_BY_BOOKMARK = $00080000;
  {$EXTERNALSYM SQL_CA1_BULK_FETCH_BY_BOOKMARK}

// bitmasks for SQL_DYNAMIC_CURSOR_ATTRIBUTES2,
// * SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES2,
// * SQL_KEYSET_CURSOR_ATTRIBUTES2, and SQL_STATIC_CURSOR_ATTRIBUTES2

// supported values for SQL_ATTR_SCROLL_CONCURRENCY
  SQL_CA2_READ_ONLY_CONCURRENCY = $00000001;
  {$EXTERNALSYM SQL_CA2_READ_ONLY_CONCURRENCY}
  SQL_CA2_LOCK_CONCURRENCY = $00000002;
  {$EXTERNALSYM SQL_CA2_LOCK_CONCURRENCY}
  SQL_CA2_OPT_ROWVER_CONCURRENCY = $00000004;
  {$EXTERNALSYM SQL_CA2_OPT_ROWVER_CONCURRENCY}
  SQL_CA2_OPT_VALUES_CONCURRENCY = $00000008;
  {$EXTERNALSYM SQL_CA2_OPT_VALUES_CONCURRENCY}

// sensitivity of the cursor to its own inserts, deletes, and updates
  SQL_CA2_SENSITIVITY_ADDITIONS = $00000010;
  {$EXTERNALSYM SQL_CA2_SENSITIVITY_ADDITIONS}
  SQL_CA2_SENSITIVITY_DELETIONS = $00000020;
  {$EXTERNALSYM SQL_CA2_SENSITIVITY_DELETIONS}
  SQL_CA2_SENSITIVITY_UPDATES = $00000040;
  {$EXTERNALSYM SQL_CA2_SENSITIVITY_UPDATES}

// semantics of SQL_ATTR_MAX_ROWS
  SQL_CA2_MAX_ROWS_SELECT = $00000080;
  {$EXTERNALSYM SQL_CA2_MAX_ROWS_SELECT}
  SQL_CA2_MAX_ROWS_INSERT = $00000100;
  {$EXTERNALSYM SQL_CA2_MAX_ROWS_INSERT}
  SQL_CA2_MAX_ROWS_DELETE = $00000200;
  {$EXTERNALSYM SQL_CA2_MAX_ROWS_DELETE}
  SQL_CA2_MAX_ROWS_UPDATE = $00000400;
  {$EXTERNALSYM SQL_CA2_MAX_ROWS_UPDATE}
  SQL_CA2_MAX_ROWS_CATALOG = $00000800;
  {$EXTERNALSYM SQL_CA2_MAX_ROWS_CATALOG}
  SQL_CA2_MAX_ROWS_AFFECTS_ALL = (SQL_CA2_MAX_ROWS_SELECT or SQL_CA2_MAX_ROWS_INSERT or
                                  SQL_CA2_MAX_ROWS_DELETE or SQL_CA2_MAX_ROWS_UPDATE or
                                  SQL_CA2_MAX_ROWS_CATALOG);
  {$EXTERNALSYM SQL_CA2_MAX_ROWS_AFFECTS_ALL}

// semantics of SQL_DIAG_CURSOR_ROW_COUNT
  SQL_CA2_CRC_EXACT = $00001000;
  {$EXTERNALSYM SQL_CA2_CRC_EXACT}
  SQL_CA2_CRC_APPROXIMATE = $00002000;
  {$EXTERNALSYM SQL_CA2_CRC_APPROXIMATE}

// the kinds of positioned statements that can be simulated
  SQL_CA2_SIMULATE_NON_UNIQUE = $00004000;
  {$EXTERNALSYM SQL_CA2_SIMULATE_NON_UNIQUE}
  SQL_CA2_SIMULATE_TRY_UNIQUE = $00008000;
  {$EXTERNALSYM SQL_CA2_SIMULATE_TRY_UNIQUE}
  SQL_CA2_SIMULATE_UNIQUE = $00010000;
  {$EXTERNALSYM SQL_CA2_SIMULATE_UNIQUE}

// SQL_ODBC_API_CONFORMANCE values
  SQL_OAC_NONE = $0000;
  {$EXTERNALSYM SQL_OAC_NONE}
  SQL_OAC_LEVEL1 = $0001;
  {$EXTERNALSYM SQL_OAC_LEVEL1}
  SQL_OAC_LEVEL2 = $0002;
  {$EXTERNALSYM SQL_OAC_LEVEL2}

// SQL_ODBC_SAG_CLI_CONFORMANCE values
  SQL_OSCC_NOT_COMPLIANT = $0000;
  {$EXTERNALSYM SQL_OSCC_NOT_COMPLIANT}
  SQL_OSCC_COMPLIANT = $0001;
  {$EXTERNALSYM SQL_OSCC_COMPLIANT}

// SQL_ODBC_SQL_CONFORMANCE values
  SQL_OSC_MINIMUM = $0000;
  {$EXTERNALSYM SQL_OSC_MINIMUM}
  SQL_OSC_CORE = $0001;
  {$EXTERNALSYM SQL_OSC_CORE}
  SQL_OSC_EXTENDED = $0002;
  {$EXTERNALSYM SQL_OSC_EXTENDED}


// SQL_CONCAT_NULL_BEHAVIOR values
  SQL_CB_NULL = $0000;
  {$EXTERNALSYM SQL_CB_NULL}
  SQL_CB_NON_NULL = $0001;
  {$EXTERNALSYM SQL_CB_NON_NULL}

// SQL_SCROLL_OPTIONS masks
  SQL_SO_FORWARD_ONLY = $00000001;
  {$EXTERNALSYM SQL_SO_FORWARD_ONLY}
  SQL_SO_KEYSET_DRIVEN = $00000002;
  {$EXTERNALSYM SQL_SO_KEYSET_DRIVEN}
  SQL_SO_DYNAMIC = $00000004;
  {$EXTERNALSYM SQL_SO_DYNAMIC}
  SQL_SO_MIXED = $00000008;
  {$EXTERNALSYM SQL_SO_MIXED}
  SQL_SO_STATIC = $00000010;
  {$EXTERNALSYM SQL_SO_STATIC}

// SQL_FETCH_DIRECTION masks

// SQL_FETCH_RESUME is no longer supported
//  SQL_FD_FETCH_RESUME                 $00000040;

  SQL_FD_FETCH_BOOKMARK = $00000080;
  {$EXTERNALSYM SQL_FD_FETCH_BOOKMARK}

// SQL_TXN_ISOLATION_OPTION masks
// SQL_TXN_VERSIONING is no longer supported
//  SQL_TXN_VERSIONING                  $00000010;

// SQL_CORRELATION_NAME values
  SQL_CN_NONE = $0000;
  {$EXTERNALSYM SQL_CN_NONE}
  SQL_CN_DIFFERENT = $0001;
  {$EXTERNALSYM SQL_CN_DIFFERENT}
  SQL_CN_ANY = $0002;
  {$EXTERNALSYM SQL_CN_ANY}

// SQL_NON_NULLABLE_COLUMNS values
  SQL_NNC_NULL = $0000;
  {$EXTERNALSYM SQL_NNC_NULL}
  SQL_NNC_NON_NULL = $0001;
  {$EXTERNALSYM SQL_NNC_NON_NULL}

// SQL_NULL_COLLATION values
  SQL_NC_START = $0002;
  {$EXTERNALSYM SQL_NC_START}
  SQL_NC_END = $0004;
  {$EXTERNALSYM SQL_NC_END}

// SQL_FILE_USAGE values
  SQL_FILE_NOT_SUPPORTED = $0000;
  {$EXTERNALSYM SQL_FILE_NOT_SUPPORTED}
  SQL_FILE_TABLE = $0001;
  {$EXTERNALSYM SQL_FILE_TABLE}
  SQL_FILE_QUALIFIER = $0002;
  {$EXTERNALSYM SQL_FILE_QUALIFIER}
  SQL_FILE_CATALOG = SQL_FILE_QUALIFIER;  // ODBC 3.0
  {$EXTERNALSYM SQL_FILE_CATALOG}


// SQL_GETDATA_EXTENSIONS values
  SQL_GD_BLOCK = $00000004;
  {$EXTERNALSYM SQL_GD_BLOCK}
  SQL_GD_BOUND = $00000008;
  {$EXTERNALSYM SQL_GD_BOUND}
  SQL_GD_OUTPUT_PARAMS = $00000010;
  {$EXTERNALSYM SQL_GD_OUTPUT_PARAMS}

// SQL_POSITIONED_STATEMENTS masks
  SQL_PS_POSITIONED_DELETE = $00000001;
  {$EXTERNALSYM SQL_PS_POSITIONED_DELETE}
  SQL_PS_POSITIONED_UPDATE = $00000002;
  {$EXTERNALSYM SQL_PS_POSITIONED_UPDATE}
  SQL_PS_SELECT_FOR_UPDATE = $00000004;
  {$EXTERNALSYM SQL_PS_SELECT_FOR_UPDATE}

// SQL_GROUP_BY values
  SQL_GB_NOT_SUPPORTED = $0000;
  {$EXTERNALSYM SQL_GB_NOT_SUPPORTED}
  SQL_GB_GROUP_BY_EQUALS_SELECT = $0001;
  {$EXTERNALSYM SQL_GB_GROUP_BY_EQUALS_SELECT}
  SQL_GB_GROUP_BY_CONTAINS_SELECT = $0002;
  {$EXTERNALSYM SQL_GB_GROUP_BY_CONTAINS_SELECT}
  SQL_GB_NO_RELATION = $0003;
  {$EXTERNALSYM SQL_GB_NO_RELATION}
  SQL_GB_COLLATE = $0004;
  {$EXTERNALSYM SQL_GB_COLLATE}

// SQL_OWNER_USAGE masks
  SQL_OU_DML_STATEMENTS = $00000001;
  {$EXTERNALSYM SQL_OU_DML_STATEMENTS}
  SQL_OU_PROCEDURE_INVOCATION = $00000002;
  {$EXTERNALSYM SQL_OU_PROCEDURE_INVOCATION}
  SQL_OU_TABLE_DEFINITION = $00000004;
  {$EXTERNALSYM SQL_OU_TABLE_DEFINITION}
  SQL_OU_INDEX_DEFINITION = $00000008;
  {$EXTERNALSYM SQL_OU_INDEX_DEFINITION}
  SQL_OU_PRIVILEGE_DEFINITION = $00000010;
  {$EXTERNALSYM SQL_OU_PRIVILEGE_DEFINITION}

// SQL_SCHEMA_USAGE masks
  SQL_SU_DML_STATEMENTS = SQL_OU_DML_STATEMENTS;
  {$EXTERNALSYM SQL_SU_DML_STATEMENTS}
  SQL_SU_PROCEDURE_INVOCATION = SQL_OU_PROCEDURE_INVOCATION;
  {$EXTERNALSYM SQL_SU_PROCEDURE_INVOCATION}
  SQL_SU_TABLE_DEFINITION = SQL_OU_TABLE_DEFINITION;
  {$EXTERNALSYM SQL_SU_TABLE_DEFINITION}
  SQL_SU_INDEX_DEFINITION = SQL_OU_INDEX_DEFINITION;
  {$EXTERNALSYM SQL_SU_INDEX_DEFINITION}
  SQL_SU_PRIVILEGE_DEFINITION = SQL_OU_PRIVILEGE_DEFINITION;
  {$EXTERNALSYM SQL_SU_PRIVILEGE_DEFINITION}

// SQL_QUALIFIER_USAGE masks
  SQL_QU_DML_STATEMENTS = $00000001;
  {$EXTERNALSYM SQL_QU_DML_STATEMENTS}
  SQL_QU_PROCEDURE_INVOCATION = $00000002;
  {$EXTERNALSYM SQL_QU_PROCEDURE_INVOCATION}
  SQL_QU_TABLE_DEFINITION = $00000004;
  {$EXTERNALSYM SQL_QU_TABLE_DEFINITION}
  SQL_QU_INDEX_DEFINITION = $00000008;
  {$EXTERNALSYM SQL_QU_INDEX_DEFINITION}
  SQL_QU_PRIVILEGE_DEFINITION = $00000010;
  {$EXTERNALSYM SQL_QU_PRIVILEGE_DEFINITION}

// SQL_CATALOG_USAGE masks
  SQL_CU_DML_STATEMENTS = SQL_QU_DML_STATEMENTS;
  {$EXTERNALSYM SQL_CU_DML_STATEMENTS}
  SQL_CU_PROCEDURE_INVOCATION = SQL_QU_PROCEDURE_INVOCATION;
  {$EXTERNALSYM SQL_CU_PROCEDURE_INVOCATION}
  SQL_CU_TABLE_DEFINITION = SQL_QU_TABLE_DEFINITION;
  {$EXTERNALSYM SQL_CU_TABLE_DEFINITION}
  SQL_CU_INDEX_DEFINITION = SQL_QU_INDEX_DEFINITION;
  {$EXTERNALSYM SQL_CU_INDEX_DEFINITION}
  SQL_CU_PRIVILEGE_DEFINITION = SQL_QU_PRIVILEGE_DEFINITION;
  {$EXTERNALSYM SQL_CU_PRIVILEGE_DEFINITION}

// SQL_SUBQUERIES masks
  SQL_SQ_COMPARISON = $00000001;
  {$EXTERNALSYM SQL_SQ_COMPARISON}
  SQL_SQ_EXISTS = $00000002;
  {$EXTERNALSYM SQL_SQ_EXISTS}
  SQL_SQ_IN = $00000004;
  {$EXTERNALSYM SQL_SQ_IN}
  SQL_SQ_QUANTIFIED = $00000008;
  {$EXTERNALSYM SQL_SQ_QUANTIFIED}
  SQL_SQ_CORRELATED_SUBQUERIES = $00000010;
  {$EXTERNALSYM SQL_SQ_CORRELATED_SUBQUERIES}

// SQL_UNION masks
  SQL_U_UNION = $00000001;
  {$EXTERNALSYM SQL_U_UNION}
  SQL_U_UNION_ALL = $00000002;
  {$EXTERNALSYM SQL_U_UNION_ALL}

// SQL_BOOKMARK_PERSISTENCE values
  SQL_BP_CLOSE = $00000001;
  {$EXTERNALSYM SQL_BP_CLOSE}
  SQL_BP_DELETE = $00000002;
  {$EXTERNALSYM SQL_BP_DELETE}
  SQL_BP_DROP = $00000004;
  {$EXTERNALSYM SQL_BP_DROP}
  SQL_BP_TRANSACTION = $00000008;
  {$EXTERNALSYM SQL_BP_TRANSACTION}
  SQL_BP_UPDATE = $00000010;
  {$EXTERNALSYM SQL_BP_UPDATE}
  SQL_BP_OTHER_HSTMT = $00000020;
  {$EXTERNALSYM SQL_BP_OTHER_HSTMT}
  SQL_BP_SCROLL = $00000040;
  {$EXTERNALSYM SQL_BP_SCROLL}

// SQL_STATIC_SENSITIVITY values
  SQL_SS_ADDITIONS = $00000001;
  {$EXTERNALSYM SQL_SS_ADDITIONS}
  SQL_SS_DELETIONS = $00000002;
  {$EXTERNALSYM SQL_SS_DELETIONS}
  SQL_SS_UPDATES = $00000004;
  {$EXTERNALSYM SQL_SS_UPDATES}

// SQL_VIEW values
  SQL_CV_CREATE_VIEW = $00000001;
  {$EXTERNALSYM SQL_CV_CREATE_VIEW}
  SQL_CV_CHECK_OPTION = $00000002;
  {$EXTERNALSYM SQL_CV_CHECK_OPTION}
  SQL_CV_CASCADED = $00000004;
  {$EXTERNALSYM SQL_CV_CASCADED}
  SQL_CV_LOCAL = $00000008;
  {$EXTERNALSYM SQL_CV_LOCAL}

// SQL_LOCK_TYPES masks
  SQL_LCK_NO_CHANGE = $00000001;
  {$EXTERNALSYM SQL_LCK_NO_CHANGE}
  SQL_LCK_EXCLUSIVE = $00000002;
  {$EXTERNALSYM SQL_LCK_EXCLUSIVE}
  SQL_LCK_UNLOCK = $00000004;
  {$EXTERNALSYM SQL_LCK_UNLOCK}

// SQL_POS_OPERATIONS masks
  SQL_POS_POSITION = $00000001;
  {$EXTERNALSYM SQL_POS_POSITION}
  SQL_POS_REFRESH = $00000002;
  {$EXTERNALSYM SQL_POS_REFRESH}
  SQL_POS_UPDATE = $00000004;
  {$EXTERNALSYM SQL_POS_UPDATE}
  SQL_POS_DELETE = $00000008;
  {$EXTERNALSYM SQL_POS_DELETE}
  SQL_POS_ADD = $00000010;
  {$EXTERNALSYM SQL_POS_ADD}

// SQL_QUALIFIER_LOCATION values
  SQL_QL_START = $0001;
  {$EXTERNALSYM SQL_QL_START}
  SQL_QL_END = $0002;
  {$EXTERNALSYM SQL_QL_END}

// Here start return values for ODBC 3.0 SQLGetInfo

// SQL_AGGREGATE_FUNCTIONS bitmasks
  SQL_AF_AVG = $00000001;
  {$EXTERNALSYM SQL_AF_AVG}
  SQL_AF_COUNT = $00000002;
  {$EXTERNALSYM SQL_AF_COUNT}
  SQL_AF_MAX = $00000004;
  {$EXTERNALSYM SQL_AF_MAX}
  SQL_AF_MIN = $00000008;
  {$EXTERNALSYM SQL_AF_MIN}
  SQL_AF_SUM = $00000010;
  {$EXTERNALSYM SQL_AF_SUM}
  SQL_AF_DISTINCT = $00000020;
  {$EXTERNALSYM SQL_AF_DISTINCT}
  SQL_AF_ALL = $00000040;
  {$EXTERNALSYM SQL_AF_ALL}

// SQL_SQL_CONFORMANCE bit masks
  SQL_SC_SQL92_ENTRY = $00000001;
  {$EXTERNALSYM SQL_SC_SQL92_ENTRY}
  SQL_SC_FIPS127_2_TRANSITIONAL = $00000002;
  {$EXTERNALSYM SQL_SC_FIPS127_2_TRANSITIONAL}
  SQL_SC_SQL92_INTERMEDIATE = $00000004;
  {$EXTERNALSYM SQL_SC_SQL92_INTERMEDIATE}
  SQL_SC_SQL92_FULL = $00000008;
  {$EXTERNALSYM SQL_SC_SQL92_FULL}

// SQL_DATETIME_LITERALS masks
  SQL_DL_SQL92_DATE = $00000001;
  {$EXTERNALSYM SQL_DL_SQL92_DATE}
  SQL_DL_SQL92_TIME = $00000002;
  {$EXTERNALSYM SQL_DL_SQL92_TIME}
  SQL_DL_SQL92_TIMESTAMP = $00000004;
  {$EXTERNALSYM SQL_DL_SQL92_TIMESTAMP}
  SQL_DL_SQL92_INTERVAL_YEAR = $00000008;
  {$EXTERNALSYM SQL_DL_SQL92_INTERVAL_YEAR}
  SQL_DL_SQL92_INTERVAL_MONTH = $00000010;
  {$EXTERNALSYM SQL_DL_SQL92_INTERVAL_MONTH}
  SQL_DL_SQL92_INTERVAL_DAY = $00000020;
  {$EXTERNALSYM SQL_DL_SQL92_INTERVAL_DAY}
  SQL_DL_SQL92_INTERVAL_HOUR = $00000040;
  {$EXTERNALSYM SQL_DL_SQL92_INTERVAL_HOUR}
  SQL_DL_SQL92_INTERVAL_MINUTE = $00000080;
  {$EXTERNALSYM SQL_DL_SQL92_INTERVAL_MINUTE}
  SQL_DL_SQL92_INTERVAL_SECOND = $00000100;
  {$EXTERNALSYM SQL_DL_SQL92_INTERVAL_SECOND}
  SQL_DL_SQL92_INTERVAL_YEAR_TO_MONTH = $00000200;
  {$EXTERNALSYM SQL_DL_SQL92_INTERVAL_YEAR_TO_MONTH}
  SQL_DL_SQL92_INTERVAL_DAY_TO_HOUR = $00000400;
  {$EXTERNALSYM SQL_DL_SQL92_INTERVAL_DAY_TO_HOUR}
  SQL_DL_SQL92_INTERVAL_DAY_TO_MINUTE = $00000800;
  {$EXTERNALSYM SQL_DL_SQL92_INTERVAL_DAY_TO_MINUTE}
  SQL_DL_SQL92_INTERVAL_DAY_TO_SECOND = $00001000;
  {$EXTERNALSYM SQL_DL_SQL92_INTERVAL_DAY_TO_SECOND}
  SQL_DL_SQL92_INTERVAL_HOUR_TO_MINUTE = $00002000;
  {$EXTERNALSYM SQL_DL_SQL92_INTERVAL_HOUR_TO_MINUTE}
  SQL_DL_SQL92_INTERVAL_HOUR_TO_SECOND = $00004000;
  {$EXTERNALSYM SQL_DL_SQL92_INTERVAL_HOUR_TO_SECOND}
  SQL_DL_SQL92_INTERVAL_MINUTE_TO_SECOND = $00008000;
  {$EXTERNALSYM SQL_DL_SQL92_INTERVAL_MINUTE_TO_SECOND}

// SQL_CATALOG_LOCATION values
  SQL_CL_START = SQL_QL_START;
  {$EXTERNALSYM SQL_CL_START}
  SQL_CL_END = SQL_QL_END;
  {$EXTERNALSYM SQL_CL_END}

// values for SQL_BATCH_ROW_COUNT
  SQL_BRC_PROCEDURES = $0000001;
  {$EXTERNALSYM SQL_BRC_PROCEDURES}
  SQL_BRC_EXPLICIT = $0000002;
  {$EXTERNALSYM SQL_BRC_EXPLICIT}
  SQL_BRC_ROLLED_UP = $0000004;
  {$EXTERNALSYM SQL_BRC_ROLLED_UP}

// bitmasks for SQL_BATCH_SUPPORT
  SQL_BS_SELECT_EXPLICIT = $00000001;
  {$EXTERNALSYM SQL_BS_SELECT_EXPLICIT}
  SQL_BS_ROW_COUNT_EXPLICIT = $00000002;
  {$EXTERNALSYM SQL_BS_ROW_COUNT_EXPLICIT}
  SQL_BS_SELECT_PROC = $00000004;
  {$EXTERNALSYM SQL_BS_SELECT_PROC}
  SQL_BS_ROW_COUNT_PROC = $00000008;
  {$EXTERNALSYM SQL_BS_ROW_COUNT_PROC}

// Values for SQL_PARAM_ARRAY_ROW_COUNTS getinfo
  SQL_PARC_BATCH = 1;
  {$EXTERNALSYM SQL_PARC_BATCH}
  SQL_PARC_NO_BATCH = 2;
  {$EXTERNALSYM SQL_PARC_NO_BATCH}

// values for SQL_PARAM_ARRAY_SELECTS
  SQL_PAS_BATCH = 1;
  {$EXTERNALSYM SQL_PAS_BATCH}
  SQL_PAS_NO_BATCH = 2;
  {$EXTERNALSYM SQL_PAS_NO_BATCH}
  SQL_PAS_NO_SELECT = 3;
  {$EXTERNALSYM SQL_PAS_NO_SELECT}

// Bitmasks for SQL_INDEX_KEYWORDS
  SQL_IK_NONE = $00000000;
  {$EXTERNALSYM SQL_IK_NONE}
  SQL_IK_ASC = $00000001;
  {$EXTERNALSYM SQL_IK_ASC}
  SQL_IK_DESC = $00000002;
  {$EXTERNALSYM SQL_IK_DESC}
  SQL_IK_ALL = (SQL_IK_ASC or SQL_IK_DESC);
  {$EXTERNALSYM SQL_IK_ALL}

// Bitmasks for SQL_INFO_SCHEMA_VIEWS
  SQL_ISV_ASSERTIONS = $00000001;
  {$EXTERNALSYM SQL_ISV_ASSERTIONS}
  SQL_ISV_CHARACTER_SETS = $00000002;
  {$EXTERNALSYM SQL_ISV_CHARACTER_SETS}
  SQL_ISV_CHECK_CONSTRAINTS = $00000004;
  {$EXTERNALSYM SQL_ISV_CHECK_CONSTRAINTS}
  SQL_ISV_COLLATIONS = $00000008;
  {$EXTERNALSYM SQL_ISV_COLLATIONS}
  SQL_ISV_COLUMN_DOMAIN_USAGE = $00000010;
  {$EXTERNALSYM SQL_ISV_COLUMN_DOMAIN_USAGE}
  SQL_ISV_COLUMN_PRIVILEGES = $00000020;
  {$EXTERNALSYM SQL_ISV_COLUMN_PRIVILEGES}
  SQL_ISV_COLUMNS = $00000040;
  {$EXTERNALSYM SQL_ISV_COLUMNS}
  SQL_ISV_CONSTRAINT_COLUMN_USAGE = $00000080;
  {$EXTERNALSYM SQL_ISV_CONSTRAINT_COLUMN_USAGE}
  SQL_ISV_CONSTRAINT_TABLE_USAGE = $00000100;
  {$EXTERNALSYM SQL_ISV_CONSTRAINT_TABLE_USAGE}
  SQL_ISV_DOMAIN_CONSTRAINTS = $00000200;
  {$EXTERNALSYM SQL_ISV_DOMAIN_CONSTRAINTS}
  SQL_ISV_DOMAINS = $00000400;
  {$EXTERNALSYM SQL_ISV_DOMAINS}
  SQL_ISV_KEY_COLUMN_USAGE = $00000800;
  {$EXTERNALSYM SQL_ISV_KEY_COLUMN_USAGE}
  SQL_ISV_REFERENTIAL_CONSTRAINTS = $00001000;
  {$EXTERNALSYM SQL_ISV_REFERENTIAL_CONSTRAINTS}
  SQL_ISV_SCHEMATA = $00002000;
  {$EXTERNALSYM SQL_ISV_SCHEMATA}
  SQL_ISV_SQL_LANGUAGES = $00004000;
  {$EXTERNALSYM SQL_ISV_SQL_LANGUAGES}
  SQL_ISV_TABLE_CONSTRAINTS = $00008000;
  {$EXTERNALSYM SQL_ISV_TABLE_CONSTRAINTS}
  SQL_ISV_TABLE_PRIVILEGES = $00010000;
  {$EXTERNALSYM SQL_ISV_TABLE_PRIVILEGES}
  SQL_ISV_TABLES = $00020000;
  {$EXTERNALSYM SQL_ISV_TABLES}
  SQL_ISV_TRANSLATIONS = $00040000;
  {$EXTERNALSYM SQL_ISV_TRANSLATIONS}
  SQL_ISV_USAGE_PRIVILEGES = $00080000;
  {$EXTERNALSYM SQL_ISV_USAGE_PRIVILEGES}
  SQL_ISV_VIEW_COLUMN_USAGE = $00100000;
  {$EXTERNALSYM SQL_ISV_VIEW_COLUMN_USAGE}
  SQL_ISV_VIEW_TABLE_USAGE = $00200000;
  {$EXTERNALSYM SQL_ISV_VIEW_TABLE_USAGE}
  SQL_ISV_VIEWS = $00400000;
  {$EXTERNALSYM SQL_ISV_VIEWS}

// Bitmasks for SQL_ALTER_DOMAIN
  SQL_AD_CONSTRAINT_NAME_DEFINITION = $00000001;
  {$EXTERNALSYM SQL_AD_CONSTRAINT_NAME_DEFINITION}
  SQL_AD_ADD_DOMAIN_CONSTRAINT = $00000002;
  {$EXTERNALSYM SQL_AD_ADD_DOMAIN_CONSTRAINT}
  SQL_AD_DROP_DOMAIN_CONSTRAINT = $00000004;
  {$EXTERNALSYM SQL_AD_DROP_DOMAIN_CONSTRAINT}
  SQL_AD_ADD_DOMAIN_DEFAULT = $00000008;
  {$EXTERNALSYM SQL_AD_ADD_DOMAIN_DEFAULT}
  SQL_AD_DROP_DOMAIN_DEFAULT = $00000010;
  {$EXTERNALSYM SQL_AD_DROP_DOMAIN_DEFAULT}
  SQL_AD_ADD_CONSTRAINT_INITIALLY_DEFERRED = $00000020;
  {$EXTERNALSYM SQL_AD_ADD_CONSTRAINT_INITIALLY_DEFERRED}
  SQL_AD_ADD_CONSTRAINT_INITIALLY_IMMEDIATE = $00000040;
  {$EXTERNALSYM SQL_AD_ADD_CONSTRAINT_INITIALLY_IMMEDIATE}
  SQL_AD_ADD_CONSTRAINT_DEFERRABLE = $00000080;
  {$EXTERNALSYM SQL_AD_ADD_CONSTRAINT_DEFERRABLE}
  SQL_AD_ADD_CONSTRAINT_NON_DEFERRABLE = $00000100;
  {$EXTERNALSYM SQL_AD_ADD_CONSTRAINT_NON_DEFERRABLE}

// SQL_CREATE_SCHEMA bitmasks
  SQL_CS_CREATE_SCHEMA = $00000001;
  {$EXTERNALSYM SQL_CS_CREATE_SCHEMA}
  SQL_CS_AUTHORIZATION = $00000002;
  {$EXTERNALSYM SQL_CS_AUTHORIZATION}
  SQL_CS_DEFAULT_CHARACTER_SET = $00000004;
  {$EXTERNALSYM SQL_CS_DEFAULT_CHARACTER_SET}

// SQL_CREATE_TRANSLATION bitmasks
  SQL_CTR_CREATE_TRANSLATION = $00000001;
  {$EXTERNALSYM SQL_CTR_CREATE_TRANSLATION}

// SQL_CREATE_ASSERTION bitmasks
  SQL_CA_CREATE_ASSERTION = $00000001;
  {$EXTERNALSYM SQL_CA_CREATE_ASSERTION}
  SQL_CA_CONSTRAINT_INITIALLY_DEFERRED = $00000010;
  {$EXTERNALSYM SQL_CA_CONSTRAINT_INITIALLY_DEFERRED}
  SQL_CA_CONSTRAINT_INITIALLY_IMMEDIATE = $00000020;
  {$EXTERNALSYM SQL_CA_CONSTRAINT_INITIALLY_IMMEDIATE}
  SQL_CA_CONSTRAINT_DEFERRABLE = $00000040;
  {$EXTERNALSYM SQL_CA_CONSTRAINT_DEFERRABLE}
  SQL_CA_CONSTRAINT_NON_DEFERRABLE = $00000080;
  {$EXTERNALSYM SQL_CA_CONSTRAINT_NON_DEFERRABLE}

// SQL_CREATE_CHARACTER_SET bitmasks
  SQL_CCS_CREATE_CHARACTER_SET = $00000001;
  {$EXTERNALSYM SQL_CCS_CREATE_CHARACTER_SET}
  SQL_CCS_COLLATE_CLAUSE = $00000002;
  {$EXTERNALSYM SQL_CCS_COLLATE_CLAUSE}
  SQL_CCS_LIMITED_COLLATION = $00000004;
  {$EXTERNALSYM SQL_CCS_LIMITED_COLLATION}

// SQL_CREATE_COLLATION bitmasks
  SQL_CCOL_CREATE_COLLATION = $00000001;
  {$EXTERNALSYM SQL_CCOL_CREATE_COLLATION}

// SQL_CREATE_DOMAIN bitmasks
  SQL_CDO_CREATE_DOMAIN = $00000001;
  {$EXTERNALSYM SQL_CDO_CREATE_DOMAIN}
  SQL_CDO_DEFAULT = $00000002;
  {$EXTERNALSYM SQL_CDO_DEFAULT}
  SQL_CDO_CONSTRAINT = $00000004;
  {$EXTERNALSYM SQL_CDO_CONSTRAINT}
  SQL_CDO_COLLATION = $00000008;
  {$EXTERNALSYM SQL_CDO_COLLATION}
  SQL_CDO_CONSTRAINT_NAME_DEFINITION = $00000010;
  {$EXTERNALSYM SQL_CDO_CONSTRAINT_NAME_DEFINITION}
  SQL_CDO_CONSTRAINT_INITIALLY_DEFERRED = $00000020;
  {$EXTERNALSYM SQL_CDO_CONSTRAINT_INITIALLY_DEFERRED}
  SQL_CDO_CONSTRAINT_INITIALLY_IMMEDIATE = $00000040;
  {$EXTERNALSYM SQL_CDO_CONSTRAINT_INITIALLY_IMMEDIATE}
  SQL_CDO_CONSTRAINT_DEFERRABLE = $00000080;
  {$EXTERNALSYM SQL_CDO_CONSTRAINT_DEFERRABLE}
  SQL_CDO_CONSTRAINT_NON_DEFERRABLE = $00000100;
  {$EXTERNALSYM SQL_CDO_CONSTRAINT_NON_DEFERRABLE}

// SQL_CREATE_TABLE bitmasks
  SQL_CT_CREATE_TABLE = $00000001;
  {$EXTERNALSYM SQL_CT_CREATE_TABLE}
  SQL_CT_COMMIT_PRESERVE = $00000002;
  {$EXTERNALSYM SQL_CT_COMMIT_PRESERVE}
  SQL_CT_COMMIT_DELETE = $00000004;
  {$EXTERNALSYM SQL_CT_COMMIT_DELETE}
  SQL_CT_GLOBAL_TEMPORARY = $00000008;
  {$EXTERNALSYM SQL_CT_GLOBAL_TEMPORARY}
  SQL_CT_LOCAL_TEMPORARY = $00000010;
  {$EXTERNALSYM SQL_CT_LOCAL_TEMPORARY}
  SQL_CT_CONSTRAINT_INITIALLY_DEFERRED = $00000020;
  {$EXTERNALSYM SQL_CT_CONSTRAINT_INITIALLY_DEFERRED}
  SQL_CT_CONSTRAINT_INITIALLY_IMMEDIATE = $00000040;
  {$EXTERNALSYM SQL_CT_CONSTRAINT_INITIALLY_IMMEDIATE}
  SQL_CT_CONSTRAINT_DEFERRABLE = $00000080;
  {$EXTERNALSYM SQL_CT_CONSTRAINT_DEFERRABLE}
  SQL_CT_CONSTRAINT_NON_DEFERRABLE = $00000100;
  {$EXTERNALSYM SQL_CT_CONSTRAINT_NON_DEFERRABLE}
  SQL_CT_COLUMN_CONSTRAINT = $00000200;
  {$EXTERNALSYM SQL_CT_COLUMN_CONSTRAINT}
  SQL_CT_COLUMN_DEFAULT = $00000400;
  {$EXTERNALSYM SQL_CT_COLUMN_DEFAULT}
  SQL_CT_COLUMN_COLLATION = $00000800;
  {$EXTERNALSYM SQL_CT_COLUMN_COLLATION}
  SQL_CT_TABLE_CONSTRAINT = $00001000;
  {$EXTERNALSYM SQL_CT_TABLE_CONSTRAINT}
  SQL_CT_CONSTRAINT_NAME_DEFINITION = $00002000;
  {$EXTERNALSYM SQL_CT_CONSTRAINT_NAME_DEFINITION}

// SQL_DDL_INDEX bitmasks
  SQL_DI_CREATE_INDEX = $00000001;
  {$EXTERNALSYM SQL_DI_CREATE_INDEX}
  SQL_DI_DROP_INDEX = $00000002;
  {$EXTERNALSYM SQL_DI_DROP_INDEX}

// SQL_DROP_COLLATION bitmasks
  SQL_DC_DROP_COLLATION = $00000001;
  {$EXTERNALSYM SQL_DC_DROP_COLLATION}

// SQL_DROP_DOMAIN bitmasks
  SQL_DD_DROP_DOMAIN = $00000001;
  {$EXTERNALSYM SQL_DD_DROP_DOMAIN}
  SQL_DD_RESTRICT = $00000002;
  {$EXTERNALSYM SQL_DD_RESTRICT}
  SQL_DD_CASCADE = $00000004;
  {$EXTERNALSYM SQL_DD_CASCADE}

// SQL_DROP_SCHEMA bitmasks
  SQL_DS_DROP_SCHEMA = $00000001;
  {$EXTERNALSYM SQL_DS_DROP_SCHEMA}
  SQL_DS_RESTRICT = $00000002;
  {$EXTERNALSYM SQL_DS_RESTRICT}
  SQL_DS_CASCADE = $00000004;
  {$EXTERNALSYM SQL_DS_CASCADE}

// SQL_DROP_CHARACTER_SET bitmasks
  SQL_DCS_DROP_CHARACTER_SET = $00000001;
  {$EXTERNALSYM SQL_DCS_DROP_CHARACTER_SET}

// SQL_DROP_ASSERTION bitmasks
  SQL_DA_DROP_ASSERTION = $00000001;
  {$EXTERNALSYM SQL_DA_DROP_ASSERTION}

// SQL_DROP_TABLE bitmasks
  SQL_DT_DROP_TABLE = $00000001;
  {$EXTERNALSYM SQL_DT_DROP_TABLE}
  SQL_DT_RESTRICT = $00000002;
  {$EXTERNALSYM SQL_DT_RESTRICT}
  SQL_DT_CASCADE = $00000004;
  {$EXTERNALSYM SQL_DT_CASCADE}

// SQL_DROP_TRANSLATION bitmasks
  SQL_DTR_DROP_TRANSLATION = $00000001;
  {$EXTERNALSYM SQL_DTR_DROP_TRANSLATION}

// SQL_DROP_VIEW bitmasks
  SQL_DV_DROP_VIEW = $00000001;
  {$EXTERNALSYM SQL_DV_DROP_VIEW}
  SQL_DV_RESTRICT = $00000002;
  {$EXTERNALSYM SQL_DV_RESTRICT}
  SQL_DV_CASCADE = $00000004;
  {$EXTERNALSYM SQL_DV_CASCADE}

// SQL_INSERT_STATEMENT bitmasks
  SQL_IS_INSERT_LITERALS = $00000001;
  {$EXTERNALSYM SQL_IS_INSERT_LITERALS}
  SQL_IS_INSERT_SEARCHED = $00000002;
  {$EXTERNALSYM SQL_IS_INSERT_SEARCHED}
  SQL_IS_SELECT_INTO = $00000004;
  {$EXTERNALSYM SQL_IS_SELECT_INTO}

// SQL_ODBC_INTERFACE_CONFORMANCE values
  SQL_OIC_CORE = 1;
  {$EXTERNALSYM SQL_OIC_CORE}
  SQL_OIC_LEVEL1 = 2;
  {$EXTERNALSYM SQL_OIC_LEVEL1}
  SQL_OIC_LEVEL2 = 3;
  {$EXTERNALSYM SQL_OIC_LEVEL2}

// SQL_SQL92_FOREIGN_KEY_DELETE_RULE bitmasks
  SQL_SFKD_CASCADE = $00000001;
  {$EXTERNALSYM SQL_SFKD_CASCADE}
  SQL_SFKD_NO_ACTION = $00000002;
  {$EXTERNALSYM SQL_SFKD_NO_ACTION}
  SQL_SFKD_SET_DEFAULT = $00000004;
  {$EXTERNALSYM SQL_SFKD_SET_DEFAULT}
  SQL_SFKD_SET_NULL = $00000008;
  {$EXTERNALSYM SQL_SFKD_SET_NULL}

// SQL_SQL92_FOREIGN_KEY_UPDATE_RULE bitmasks
  SQL_SFKU_CASCADE = $00000001;
  {$EXTERNALSYM SQL_SFKU_CASCADE}
  SQL_SFKU_NO_ACTION = $00000002;
  {$EXTERNALSYM SQL_SFKU_NO_ACTION}
  SQL_SFKU_SET_DEFAULT = $00000004;
  {$EXTERNALSYM SQL_SFKU_SET_DEFAULT}
  SQL_SFKU_SET_NULL = $00000008;
  {$EXTERNALSYM SQL_SFKU_SET_NULL}

// SQL_SQL92_GRANT  bitmasks
  SQL_SG_USAGE_ON_DOMAIN = $00000001;
  {$EXTERNALSYM SQL_SG_USAGE_ON_DOMAIN}
  SQL_SG_USAGE_ON_CHARACTER_SET = $00000002;
  {$EXTERNALSYM SQL_SG_USAGE_ON_CHARACTER_SET}
  SQL_SG_USAGE_ON_COLLATION = $00000004;
  {$EXTERNALSYM SQL_SG_USAGE_ON_COLLATION}
  SQL_SG_USAGE_ON_TRANSLATION = $00000008;
  {$EXTERNALSYM SQL_SG_USAGE_ON_TRANSLATION}
  SQL_SG_WITH_GRANT_OPTION = $00000010;
  {$EXTERNALSYM SQL_SG_WITH_GRANT_OPTION}
  SQL_SG_DELETE_TABLE = $00000020;
  {$EXTERNALSYM SQL_SG_DELETE_TABLE}
  SQL_SG_INSERT_TABLE = $00000040;
  {$EXTERNALSYM SQL_SG_INSERT_TABLE}
  SQL_SG_INSERT_COLUMN = $00000080;
  {$EXTERNALSYM SQL_SG_INSERT_COLUMN}
  SQL_SG_REFERENCES_TABLE = $00000100;
  {$EXTERNALSYM SQL_SG_REFERENCES_TABLE}
  SQL_SG_REFERENCES_COLUMN = $00000200;
  {$EXTERNALSYM SQL_SG_REFERENCES_COLUMN}
  SQL_SG_SELECT_TABLE = $00000400;
  {$EXTERNALSYM SQL_SG_SELECT_TABLE}
  SQL_SG_UPDATE_TABLE = $00000800;
  {$EXTERNALSYM SQL_SG_UPDATE_TABLE}
  SQL_SG_UPDATE_COLUMN = $00001000;
  {$EXTERNALSYM SQL_SG_UPDATE_COLUMN}

// SQL_SQL92_PREDICATES bitmasks
  SQL_SP_EXISTS = $00000001;
  {$EXTERNALSYM SQL_SP_EXISTS}
  SQL_SP_ISNOTNULL = $00000002;
  {$EXTERNALSYM SQL_SP_ISNOTNULL}
  SQL_SP_ISNULL = $00000004;
  {$EXTERNALSYM SQL_SP_ISNULL}
  SQL_SP_MATCH_FULL = $00000008;
  {$EXTERNALSYM SQL_SP_MATCH_FULL}
  SQL_SP_MATCH_PARTIAL = $00000010;
  {$EXTERNALSYM SQL_SP_MATCH_PARTIAL}
  SQL_SP_MATCH_UNIQUE_FULL = $00000020;
  {$EXTERNALSYM SQL_SP_MATCH_UNIQUE_FULL}
  SQL_SP_MATCH_UNIQUE_PARTIAL = $00000040;
  {$EXTERNALSYM SQL_SP_MATCH_UNIQUE_PARTIAL}
  SQL_SP_OVERLAPS = $00000080;
  {$EXTERNALSYM SQL_SP_OVERLAPS}
  SQL_SP_UNIQUE = $00000100;
  {$EXTERNALSYM SQL_SP_UNIQUE}
  SQL_SP_LIKE = $00000200;
  {$EXTERNALSYM SQL_SP_LIKE}
  SQL_SP_IN = $00000400;
  {$EXTERNALSYM SQL_SP_IN}
  SQL_SP_BETWEEN = $00000800;
  {$EXTERNALSYM SQL_SP_BETWEEN}
  SQL_SP_COMPARISON = $00001000;
  {$EXTERNALSYM SQL_SP_COMPARISON}
  SQL_SP_QUANTIFIED_COMPARISON = $00002000;
  {$EXTERNALSYM SQL_SP_QUANTIFIED_COMPARISON}

// SQL_SQL92_RELATIONAL_JOIN_OPERATORS bitmasks
  SQL_SRJO_CORRESPONDING_CLAUSE = $00000001;
  {$EXTERNALSYM SQL_SRJO_CORRESPONDING_CLAUSE}
  SQL_SRJO_CROSS_JOIN = $00000002;
  {$EXTERNALSYM SQL_SRJO_CROSS_JOIN}
  SQL_SRJO_EXCEPT_JOIN = $00000004;
  {$EXTERNALSYM SQL_SRJO_EXCEPT_JOIN}
  SQL_SRJO_FULL_OUTER_JOIN = $00000008;
  {$EXTERNALSYM SQL_SRJO_FULL_OUTER_JOIN}
  SQL_SRJO_INNER_JOIN = $00000010;
  {$EXTERNALSYM SQL_SRJO_INNER_JOIN}
  SQL_SRJO_INTERSECT_JOIN = $00000020;
  {$EXTERNALSYM SQL_SRJO_INTERSECT_JOIN}
  SQL_SRJO_LEFT_OUTER_JOIN = $00000040;
  {$EXTERNALSYM SQL_SRJO_LEFT_OUTER_JOIN}
  SQL_SRJO_NATURAL_JOIN = $00000080;
  {$EXTERNALSYM SQL_SRJO_NATURAL_JOIN}
  SQL_SRJO_RIGHT_OUTER_JOIN = $00000100;
  {$EXTERNALSYM SQL_SRJO_RIGHT_OUTER_JOIN}
  SQL_SRJO_UNION_JOIN = $00000200;
  {$EXTERNALSYM SQL_SRJO_UNION_JOIN}

// SQL_SQL92_REVOKE bitmasks
  SQL_SR_USAGE_ON_DOMAIN = $00000001;
  {$EXTERNALSYM SQL_SR_USAGE_ON_DOMAIN}
  SQL_SR_USAGE_ON_CHARACTER_SET = $00000002;
  {$EXTERNALSYM SQL_SR_USAGE_ON_CHARACTER_SET}
  SQL_SR_USAGE_ON_COLLATION = $00000004;
  {$EXTERNALSYM SQL_SR_USAGE_ON_COLLATION}
  SQL_SR_USAGE_ON_TRANSLATION = $00000008;
  {$EXTERNALSYM SQL_SR_USAGE_ON_TRANSLATION}
  SQL_SR_GRANT_OPTION_FOR = $00000010;
  {$EXTERNALSYM SQL_SR_GRANT_OPTION_FOR}
  SQL_SR_CASCADE = $00000020;
  {$EXTERNALSYM SQL_SR_CASCADE}
  SQL_SR_RESTRICT = $00000040;
  {$EXTERNALSYM SQL_SR_RESTRICT}
  SQL_SR_DELETE_TABLE = $00000080;
  {$EXTERNALSYM SQL_SR_DELETE_TABLE}
  SQL_SR_INSERT_TABLE = $00000100;
  {$EXTERNALSYM SQL_SR_INSERT_TABLE}
  SQL_SR_INSERT_COLUMN = $00000200;
  {$EXTERNALSYM SQL_SR_INSERT_COLUMN}
  SQL_SR_REFERENCES_TABLE = $00000400;
  {$EXTERNALSYM SQL_SR_REFERENCES_TABLE}
  SQL_SR_REFERENCES_COLUMN = $00000800;
  {$EXTERNALSYM SQL_SR_REFERENCES_COLUMN}
  SQL_SR_SELECT_TABLE = $00001000;
  {$EXTERNALSYM SQL_SR_SELECT_TABLE}
  SQL_SR_UPDATE_TABLE = $00002000;
  {$EXTERNALSYM SQL_SR_UPDATE_TABLE}
  SQL_SR_UPDATE_COLUMN = $00004000;
  {$EXTERNALSYM SQL_SR_UPDATE_COLUMN}

// SQL_SQL92_ROW_VALUE_CONSTRUCTOR bitmasks
  SQL_SRVC_VALUE_EXPRESSION = $00000001;
  {$EXTERNALSYM SQL_SRVC_VALUE_EXPRESSION}
  SQL_SRVC_NULL = $00000002;
  {$EXTERNALSYM SQL_SRVC_NULL}
  SQL_SRVC_DEFAULT = $00000004;
  {$EXTERNALSYM SQL_SRVC_DEFAULT}
  SQL_SRVC_ROW_SUBQUERY = $00000008;
  {$EXTERNALSYM SQL_SRVC_ROW_SUBQUERY}

// SQL_SQL92_VALUE_EXPRESSIONS bitmasks
  SQL_SVE_CASE = $00000001;
  {$EXTERNALSYM SQL_SVE_CASE}
  SQL_SVE_CAST = $00000002;
  {$EXTERNALSYM SQL_SVE_CAST}
  SQL_SVE_COALESCE = $00000004;
  {$EXTERNALSYM SQL_SVE_COALESCE}
  SQL_SVE_NULLIF = $00000008;
  {$EXTERNALSYM SQL_SVE_NULLIF}

// SQL_STANDARD_CLI_CONFORMANCE bitmasks
  SQL_SCC_XOPEN_CLI_VERSION1 = $00000001;
  {$EXTERNALSYM SQL_SCC_XOPEN_CLI_VERSION1}
  SQL_SCC_ISO92_CLI = $00000002;
  {$EXTERNALSYM SQL_SCC_ISO92_CLI}

// SQL_UNION_STATEMENT bitmasks
  SQL_US_UNION = SQL_U_UNION;
  {$EXTERNALSYM SQL_US_UNION}
  SQL_US_UNION_ALL = SQL_U_UNION_ALL;
  {$EXTERNALSYM SQL_US_UNION_ALL}

// SQL_DTC_TRANSITION_COST bitmasks
  SQL_DTC_ENLIST_EXPENSIVE = $00000001;
  {$EXTERNALSYM SQL_DTC_ENLIST_EXPENSIVE}
  SQL_DTC_UNENLIST_EXPENSIVE = $00000002;
  {$EXTERNALSYM SQL_DTC_UNENLIST_EXPENSIVE}

// possible values for SQL_ASYNC_DBC_FUNCTIONS
  SQL_ASYNC_DBC_NOT_CAPABLE = $00000000;
  {$EXTERNALSYM SQL_ASYNC_DBC_NOT_CAPABLE}
  SQL_ASYNC_DBC_CAPABLE = $00000001;
  {$EXTERNALSYM SQL_ASYNC_DBC_CAPABLE}

// additional SQLDataSources fetch directions
  SQL_FETCH_FIRST_USER = 31;
  {$EXTERNALSYM SQL_FETCH_FIRST_USER}
  SQL_FETCH_FIRST_SYSTEM = 32;
  {$EXTERNALSYM SQL_FETCH_FIRST_SYSTEM}

// Defines for SQLSetPos
  SQL_ENTIRE_ROWSET = 0;
  {$EXTERNALSYM SQL_ENTIRE_ROWSET}

// Operations in SQLSetPos
  SQL_POSITION = 0;               //      1.0 FALSE
  {$EXTERNALSYM SQL_POSITION}
  SQL_REFRESH = 1;                //      1.0 TRUE
  {$EXTERNALSYM SQL_REFRESH}
  SQL_UPDATE = 2;
  {$EXTERNALSYM SQL_UPDATE}
  SQL_DELETE = 3;
  {$EXTERNALSYM SQL_DELETE}

// Operations in SQLBulkOperations
  SQL_ADD = 4;
  {$EXTERNALSYM SQL_ADD}
  SQL_SETPOS_MAX_OPTION_VALUE = SQL_ADD;
  {$EXTERNALSYM SQL_SETPOS_MAX_OPTION_VALUE}
  SQL_UPDATE_BY_BOOKMARK = 5;
  {$EXTERNALSYM SQL_UPDATE_BY_BOOKMARK}
  SQL_DELETE_BY_BOOKMARK = 6;
  {$EXTERNALSYM SQL_DELETE_BY_BOOKMARK}
  SQL_FETCH_BY_BOOKMARK = 7;
  {$EXTERNALSYM SQL_FETCH_BY_BOOKMARK}

// Lock options in SQLSetPos
  SQL_LOCK_NO_CHANGE = 0;               //      1.0 FALSE
  {$EXTERNALSYM SQL_LOCK_NO_CHANGE}
  SQL_LOCK_EXCLUSIVE = 1;               //      1.0 TRUE
  {$EXTERNALSYM SQL_LOCK_EXCLUSIVE}
  SQL_LOCK_UNLOCK = 2;
  {$EXTERNALSYM SQL_LOCK_UNLOCK}

  SQL_SETPOS_MAX_LOCK_VALUE = SQL_LOCK_UNLOCK;
  {$EXTERNALSYM SQL_SETPOS_MAX_LOCK_VALUE}

{$IFDEF MSWINDOWS}
// Macros for SQLSetPos
function SQL_POSITION_TO(hstmt: SQLHSTMT; irow: SQLSETPOSIROW): SQLRETURN;
{$EXTERNALSYM SQL_POSITION_TO}
function SQL_LOCK_RECORD(hstmt: SQLHSTMT; irow: SQLSETPOSIROW; fLock: SQLUSMALLINT): SQLRETURN;
{$EXTERNALSYM SQL_LOCK_RECORD}
function SQL_REFRESH_RECORD(hstmt: SQLHSTMT; irow: SQLSETPOSIROW; fLock: SQLUSMALLINT): SQLRETURN;
{$EXTERNALSYM SQL_REFRESH_RECORD}
function SQL_UPDATE_RECORD(hstmt: SQLHSTMT; irow: SQLSETPOSIROW): SQLRETURN;
{$EXTERNALSYM SQL_UPDATE_RECORD}
function SQL_DELETE_RECORD(hstmt: SQLHSTMT; irow: SQLSETPOSIROW): SQLRETURN;
{$EXTERNALSYM SQL_DELETE_RECORD}
function SQL_ADD_RECORD(hstmt: SQLHSTMT; irow: SQLSETPOSIROW): SQLRETURN;
{$EXTERNALSYM SQL_ADD_RECORD}
{$ENDIF}

const
// Column types and scopes in SQLSpecialColumns.
  SQL_BEST_ROWID = 1;
  {$EXTERNALSYM SQL_BEST_ROWID}
  SQL_ROWVER = 2;
  {$EXTERNALSYM SQL_ROWVER}

// Defines for SQLSpecialColumns (returned in the result set)
//   SQL_PC_UNKNOWN and SQL_PC_PSEUDO are defined in sql.h
  SQL_PC_NOT_PSEUDO = 1;
  {$EXTERNALSYM SQL_PC_NOT_PSEUDO}

// Defines for SQLStatistics
  SQL_QUICK = 0;
  {$EXTERNALSYM SQL_QUICK}
  SQL_ENSURE = 1;
  {$EXTERNALSYM SQL_ENSURE}

// Defines for SQLStatistics (returned in the result set)
//   SQL_INDEX_CLUSTERED, SQL_INDEX_HASHED, and SQL_INDEX_OTHER are
//   defined in sql.h
  SQL_TABLE_STAT = 0;
  {$EXTERNALSYM SQL_TABLE_STAT}

// Defines for SQLTables
  SQL_ALL_CATALOGS = '%';
  {$EXTERNALSYM SQL_ALL_CATALOGS}
  SQL_ALL_SCHEMAS = '%';
  {$EXTERNALSYM SQL_ALL_SCHEMAS}
  SQL_ALL_TABLE_TYPES = '%';
  {$EXTERNALSYM SQL_ALL_TABLE_TYPES}

// Options for SQLDriverConnect
  SQL_DRIVER_NOPROMPT = 0;
  {$EXTERNALSYM SQL_DRIVER_NOPROMPT}
  SQL_DRIVER_COMPLETE = 1;
  {$EXTERNALSYM SQL_DRIVER_COMPLETE}
  SQL_DRIVER_PROMPT = 2;
  {$EXTERNALSYM SQL_DRIVER_PROMPT}
  SQL_DRIVER_COMPLETE_REQUIRED = 3;
  {$EXTERNALSYM SQL_DRIVER_COMPLETE_REQUIRED}

function SQLDriverConnect(hdbc: SQLHDBC; hwnd: SQLHWND; szConnStrIn: LPCWSTR;
                          cchConnStrIn: SQLSMALLINT; szConnStrOut: LPCWSTR;
                          cchConnStrOutMax: SQLSMALLINT; var pcchConnStrOut: SQLSMALLINT;
                          fDriverCompletion: SQLUSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLDriverConnect}
function SQLDriverConnectA(hdbc: SQLHDBC; hwnd: SQLHWND; szConnStrIn: LPCSTR;
                          cchConnStrIn: SQLSMALLINT; szConnStrOut: LPCSTR;
                          cchConnStrOutMax: SQLSMALLINT; var pcchConnStrOut: SQLSMALLINT;
                          fDriverCompletion: SQLUSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLDriverConnectA}
function SQLDriverConnectW(hdbc: SQLHDBC; hwnd: SQLHWND; szConnStrIn: LPCWSTR;
                          cchConnStrIn: SQLSMALLINT; szConnStrOut: LPCWSTR;
                          cchConnStrOutMax: SQLSMALLINT; var pcchConnStrOut: SQLSMALLINT;
                          fDriverCompletion: SQLUSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLDriverConnectW}


// Level 2 Functions
const
// SQLExtendedFetch "fFetchType" values
  SQL_FETCH_BOOKMARK = 8;
  {$EXTERNALSYM SQL_FETCH_BOOKMARK}

// SQLExtendedFetch "rgfRowStatus" element values
  SQL_ROW_SUCCESS = 0;
  {$EXTERNALSYM SQL_ROW_SUCCESS}
  SQL_ROW_DELETED = 1;
  {$EXTERNALSYM SQL_ROW_DELETED}
  SQL_ROW_UPDATED = 2;
  {$EXTERNALSYM SQL_ROW_UPDATED}
  SQL_ROW_NOROW = 3;
  {$EXTERNALSYM SQL_ROW_NOROW}
  SQL_ROW_ADDED = 4;
  {$EXTERNALSYM SQL_ROW_ADDED}
  SQL_ROW_ERROR = 5;
  {$EXTERNALSYM SQL_ROW_ERROR}
  SQL_ROW_SUCCESS_WITH_INFO = 6;
  {$EXTERNALSYM SQL_ROW_SUCCESS_WITH_INFO}
  SQL_ROW_PROCEED = 0;
  {$EXTERNALSYM SQL_ROW_PROCEED}
  SQL_ROW_IGNORE = 1;
  {$EXTERNALSYM SQL_ROW_IGNORE}

// value for SQL_DESC_ARRAY_STATUS_PTR
  SQL_PARAM_SUCCESS = 0;
  {$EXTERNALSYM SQL_PARAM_SUCCESS}
  SQL_PARAM_SUCCESS_WITH_INFO = 6;
  {$EXTERNALSYM SQL_PARAM_SUCCESS_WITH_INFO}
  SQL_PARAM_ERROR = 5;
  {$EXTERNALSYM SQL_PARAM_ERROR}
  SQL_PARAM_UNUSED = 7;
  {$EXTERNALSYM SQL_PARAM_UNUSED}
  SQL_PARAM_DIAG_UNAVAILABLE = 1;
  {$EXTERNALSYM SQL_PARAM_DIAG_UNAVAILABLE}

  SQL_PARAM_PROCEED = 0;
  {$EXTERNALSYM SQL_PARAM_PROCEED}
  SQL_PARAM_IGNORE = 1;
  {$EXTERNALSYM SQL_PARAM_IGNORE}

// Defines for SQLForeignKeys (UPDATE_RULE and DELETE_RULE)
  SQL_CASCADE = 0;
  {$EXTERNALSYM SQL_CASCADE}
  SQL_RESTRICT = 1;
  {$EXTERNALSYM SQL_RESTRICT}
  SQL_SET_NULL = 2;
  {$EXTERNALSYM SQL_SET_NULL}
  SQL_NO_ACTION = 3;
  {$EXTERNALSYM SQL_NO_ACTION}
  SQL_SET_DEFAULT = 4;
  {$EXTERNALSYM SQL_SET_DEFAULT}

// Note that the following are in a different column of SQLForeignKeys than
// the previous #defines.   These are for DEFERRABILITY.
  SQL_INITIALLY_DEFERRED = 5;
  {$EXTERNALSYM SQL_INITIALLY_DEFERRED}
  SQL_INITIALLY_IMMEDIATE = 6;
  {$EXTERNALSYM SQL_INITIALLY_IMMEDIATE}
  SQL_NOT_DEFERRABLE = 7;
  {$EXTERNALSYM SQL_NOT_DEFERRABLE}

// Defines for SQLProcedures (returned in the result set)
  SQL_PT_UNKNOWN = 0;
  {$EXTERNALSYM SQL_PT_UNKNOWN}
  SQL_PT_PROCEDURE = 1;
  {$EXTERNALSYM SQL_PT_PROCEDURE}
  SQL_PT_FUNCTION = 2;
  {$EXTERNALSYM SQL_PT_FUNCTION}

//      This define is too large for RC
  SQL_ODBC_KEYWORDS = 'ABSOLUTE,ACTION,ADA,ADD,ALL,ALLOCATE,ALTER,AND,ANY,ARE,AS,' +
                      'ASC,ASSERTION,AT,AUTHORIZATION,AVG,' +
                      'BEGIN,BETWEEN,BIT,BIT_LENGTH,BOTH,BY,CASCADE,CASCADED,CASE,CAST,CATALOG,' +
                      'CHAR,CHAR_LENGTH,CHARACTER,CHARACTER_LENGTH,CHECK,CLOSE,COALESCE,' +
                      'COLLATE,COLLATION,COLUMN,COMMIT,CONNECT,CONNECTION,CONSTRAINT,' +
                      'CONSTRAINTS,CONTINUE,CONVERT,CORRESPONDING,COUNT,CREATE,CROSS,CURRENT,' +
                      'CURRENT_DATE,CURRENT_TIME,CURRENT_TIMESTAMP,CURRENT_USER,CURSOR,' +
                      'DATE,DAY,DEALLOCATE,DEC,DECIMAL,DECLARE,DEFAULT,DEFERRABLE,' +
                      'DEFERRED,DELETE,DESC,DESCRIBE,DESCRIPTOR,DIAGNOSTICS,DISCONNECT,' +
                      'DISTINCT,DOMAIN,DOUBLE,DROP,' +
                      'ELSE,END,END-EXEC,ESCAPE,EXCEPT,EXCEPTION,EXEC,EXECUTE,' +
                      'EXISTS,EXTERNAL,EXTRACT,' +
                      'FALSE,FETCH,FIRST,FLOAT,FOR,FOREIGN,FORTRAN,FOUND,FROM,FULL,' +
                      'GET,GLOBAL,GO,GOTO,GRANT,GROUP,HAVING,HOUR,' +
                      'IDENTITY,IMMEDIATE,IN,INCLUDE,INDEX,INDICATOR,INITIALLY,INNER,' +
                      'INPUT,INSENSITIVE,INSERT,INT,INTEGER,INTERSECT,INTERVAL,INTO,IS,ISOLATION,' +
                      'JOIN,KEY,LANGUAGE,LAST,LEADING,LEFT,LEVEL,LIKE,LOCAL,LOWER,' +
                      'MATCH,MAX,MIN,MINUTE,MODULE,MONTH,' +
                      'NAMES,NATIONAL,NATURAL,NCHAR,NEXT,NO,NONE,NOT,NULL,NULLIF,NUMERIC,' +
                      'OCTET_LENGTH,OF,ON,ONLY,OPEN,OPTION,OR,ORDER,OUTER,OUTPUT,OVERLAPS,' +
                      'PAD,PARTIAL,PASCAL,PLI,POSITION,PRECISION,PREPARE,PRESERVE,' +
                      'PRIMARY,PRIOR,PRIVILEGES,PROCEDURE,PUBLIC,' +
                      'READ,REAL,REFERENCES,RELATIVE,RESTRICT,REVOKE,RIGHT,ROLLBACK,ROWS' +
                      'SCHEMA,SCROLL,SECOND,SECTION,SELECT,SESSION,SESSION_USER,SET,SIZE,' +
                      'SMALLINT,SOME,SPACE,SQL,SQLCA,SQLCODE,SQLERROR,SQLSTATE,SQLWARNING,' +
                      'SUBSTRING,SUM,SYSTEM_USER,' +
                      'TABLE,TEMPORARY,THEN,TIME,TIMESTAMP,TIMEZONE_HOUR,TIMEZONE_MINUTE,' +
                      'TO,TRAILING,TRANSACTION,TRANSLATE,TRANSLATION,TRIM,TRUE,' +
                      'UNION,UNIQUE,UNKNOWN,UPDATE,UPPER,USAGE,USER,USING,' +
                      'VALUE,VALUES,VARCHAR,VARYING,VIEW,WHEN,WHENEVER,WHERE,WITH,WORK,WRITE,' +
                      'YEAR,ZONE';
  {$EXTERNALSYM SQL_ODBC_KEYWORDS}

function SQLBrowseConnect(hdbc: SQLHDBC; szConnStrIn: LPCWSTR; cchConnStrIn: SQLSMALLINT;
                          szConnStrOut: LPCWSTR; cchConnStrOutMax: SQLSMALLINT;
                          var pcchConnStrOut: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLBrowseConnect}
function SQLBrowseConnectA(hdbc: SQLHDBC; szConnStrIn: LPCSTR; cchConnStrIn: SQLSMALLINT;
                          szConnStrOut: LPCSTR; cchConnStrOutMax: SQLSMALLINT;
                          var pcchConnStrOut: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLBrowseConnectA}
function SQLBrowseConnectW(hdbc: SQLHDBC; szConnStrIn: LPCWSTR; cchConnStrIn: SQLSMALLINT;
                          szConnStrOut: LPCWSTR; cchConnStrOutMax: SQLSMALLINT;
                          var pcchConnStrOut: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLBrowseConnectW}

function SQLBulkOperations(StatementHandle: SQLHSTMT; Operation: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLBulkOperations}

function SQLColumnPrivileges(hstmt: SQLHSTMT; szCatalogName: LPCWSTR;
                             cchCatalogName: SQLSMALLINT; szSchemaName: LPCWSTR;
                             cchSchemaName: SQLSMALLINT; szTableName: LPCWSTR;
                             cchTableName: SQLSMALLINT; szColumnName: LPCWSTR;
                             cchColumnName: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLColumnPrivileges}
function SQLColumnPrivilegesA(hstmt: SQLHSTMT; szCatalogName: LPCSTR;
                             cchCatalogName: SQLSMALLINT; szSchemaName: LPCSTR;
                             cchSchemaName: SQLSMALLINT; szTableName: LPCSTR;
                             cchTableName: SQLSMALLINT; szColumnName: LPCSTR;
                             cchColumnName: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLColumnPrivilegesA}
function SQLColumnPrivilegesW(hstmt: SQLHSTMT; szCatalogName: LPCWSTR;
                             cchCatalogName: SQLSMALLINT; szSchemaName: LPCWSTR;
                             cchSchemaName: SQLSMALLINT; szTableName: LPCWSTR;
                             cchTableName: SQLSMALLINT; szColumnName: LPCWSTR;
                             cchColumnName: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLColumnPrivilegesW}

function SQLDescribeParam(hstmt: SQLHSTMT; ipar: SQLUSMALLINT; var pfSqlType: SQLSMALLINT;
                          var pcbParamDef: SQLULEN; var pibScale: SQLSMALLINT;
                          var pfNullable: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLDescribeParam}

function SQLForeignKeys(hstmt: SQLHSTMT; szPkCatalogName: LPCWSTR;
                        cchPkCatalogName: SQLSMALLINT; szPkSchemaName: LPCWSTR;
                        cchPkSchemaName: SQLSMALLINT; szPkTableName: LPCWSTR;
                        cchPkTableName: SQLSMALLINT; szFkCatalogName: LPCWSTR;
                        cchFkCatalogName: SQLSMALLINT; szFkSchemaName: LPCWSTR;
                        cchFkSchemaName: SQLSMALLINT; szFkTableName: LPCWSTR;
                        cchFkTableName: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLForeignKeys}
function SQLForeignKeysA(hstmt: SQLHSTMT; szPkCatalogName: LPCSTR;
                        cchPkCatalogName: SQLSMALLINT; szPkSchemaName: LPCSTR;
                        cchPkSchemaName: SQLSMALLINT; szPkTableName: LPCSTR;
                        cchPkTableName: SQLSMALLINT; szFkCatalogName: LPCSTR;
                        cchFkCatalogName: SQLSMALLINT; szFkSchemaName: LPCSTR;
                        cchFkSchemaName: SQLSMALLINT; szFkTableName: LPCSTR;
                        cchFkTableName: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLForeignKeysA}
function SQLForeignKeysW(hstmt: SQLHSTMT; szPkCatalogName: LPCWSTR;
                        cchPkCatalogName: SQLSMALLINT; szPkSchemaName: LPCWSTR;
                        cchPkSchemaName: SQLSMALLINT; szPkTableName: LPCWSTR;
                        cchPkTableName: SQLSMALLINT; szFkCatalogName: LPCWSTR;
                        cchFkCatalogName: SQLSMALLINT; szFkSchemaName: LPCWSTR;
                        cchFkSchemaName: SQLSMALLINT; szFkTableName: LPCWSTR;
                        cchFkTableName: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLForeignKeysW}

function SQLMoreResults(hstmt: SQLHSTMT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLMoreResults}

function SQLNativeSql(hdbc: SQLHDBC; szSqlStrIn: LPCWSTR; cchSqlStrIn: SQLINTEGER;
                      szSqlStr: LPCWSTR; cchSqlStrMax: SQLINTEGER;
                      var pcchSqlStr: SQLINTEGER): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLNativeSql}
function SQLNativeSqlA(hdbc: SQLHDBC; szSqlStrIn: LPCSTR; cchSqlStrIn: SQLINTEGER;
                      szSqlStr: LPCSTR; cchSqlStrMax: SQLINTEGER;
                      var pcchSqlStr: SQLINTEGER): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLNativeSqlA}
function SQLNativeSqlW(hdbc: SQLHDBC; szSqlStrIn: LPCWSTR; cchSqlStrIn: SQLINTEGER;
                      szSqlStr: LPCWSTR; cchSqlStrMax: SQLINTEGER;
                      var pcchSqlStr: SQLINTEGER): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLNativeSqlW}

function SQLNumParams(hstmt: SQLHSTMT; var pcpar: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLNumParams}

function SQLPrimaryKeys(hstmt: SQLHSTMT; szCatalogName: LPCWSTR; cchCatalogName: SQLSMALLINT;
                        szSchemaName: LPCWSTR; cchSchemaName: SQLSMALLINT;
                        szTableName: LPCWSTR; cchTableName: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLPrimaryKeys}
function SQLPrimaryKeysA(hstmt: SQLHSTMT; szCatalogName: LPCSTR; cchCatalogName: SQLSMALLINT;
                        szSchemaName: LPCSTR; cchSchemaName: SQLSMALLINT;
                        szTableName: LPCSTR; cchTableName: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLPrimaryKeysA}
function SQLPrimaryKeysW(hstmt: SQLHSTMT; szCatalogName: LPCWSTR; cchCatalogName: SQLSMALLINT;
                        szSchemaName: LPCWSTR; cchSchemaName: SQLSMALLINT;
                        szTableName: LPCWSTR; cchTableName: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLPrimaryKeysW}

function SQLProcedureColumns(hstmt: SQLHSTMT; szCatalogName: LPCWSTR;
                             cchCatalogName: SQLSMALLINT; szSchemaName: LPCWSTR;
                             cchSchemaName: SQLSMALLINT; szProcName: LPCWSTR;
                             cchProcName: SQLSMALLINT; szColumnName: LPCWSTR;
                             cchColumnName: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLProcedureColumns}
function SQLProcedureColumnsA(hstmt: SQLHSTMT; szCatalogName: LPCSTR;
                             cchCatalogName: SQLSMALLINT; szSchemaName: LPCSTR;
                             cchSchemaName: SQLSMALLINT; szProcName: LPCSTR;
                             cchProcName: SQLSMALLINT; szColumnName: LPCSTR;
                             cchColumnName: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLProcedureColumnsA}
function SQLProcedureColumnsW(hstmt: SQLHSTMT; szCatalogName: LPCWSTR;
                             cchCatalogName: SQLSMALLINT; szSchemaName: LPCWSTR;
                             cchSchemaName: SQLSMALLINT; szProcName: LPCWSTR;
                             cchProcName: SQLSMALLINT; szColumnName: LPCWSTR;
                             cchColumnName: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLProcedureColumnsW}

function SQLProcedures(hstmt: SQLHSTMT; szCatalogName: LPCWSTR; cchCatalogName: SQLSMALLINT;
                       szSchemaName: LPCWSTR; cchSchemaName: SQLSMALLINT;
                       szProcName: LPCWSTR; cchProcName: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLProcedures}
function SQLProceduresA(hstmt: SQLHSTMT; szCatalogName: LPCSTR; cchCatalogName: SQLSMALLINT;
                       szSchemaName: LPCSTR; cchSchemaName: SQLSMALLINT;
                       szProcName: LPCSTR; cchProcName: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLProceduresA}
function SQLProceduresW(hstmt: SQLHSTMT; szCatalogName: LPCWSTR; cchCatalogName: SQLSMALLINT;
                       szSchemaName: LPCWSTR; cchSchemaName: SQLSMALLINT;
                       szProcName: LPCWSTR; cchProcName: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLProceduresW}

{$IFDEF MSWINDOWS}
function SQLSetPos(hstmt: SQLHSTMT; irow: SQLSETPOSIROW; fOption, fLock: SQLUSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLSetPos}
{$ENDIF}

function SQLTablePrivileges(hstmt: SQLHSTMT; szCatalogName: LPCWSTR;
                            cchCatalogName: SQLSMALLINT; szSchemaName: LPCWSTR;
                            cchSchemaName: SQLSMALLINT; szTableName: LPCWSTR;
                            cchTableName: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLTablePrivileges}
function SQLTablePrivilegesA(hstmt: SQLHSTMT; szCatalogName: LPCSTR;
                            cchCatalogName: SQLSMALLINT; szSchemaName: LPCSTR;
                            cchSchemaName: SQLSMALLINT; szTableName: LPCSTR;
                            cchTableName: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLTablePrivilegesA}
function SQLTablePrivilegesW(hstmt: SQLHSTMT; szCatalogName: LPCWSTR;
                            cchCatalogName: SQLSMALLINT; szSchemaName: LPCWSTR;
                            cchSchemaName: SQLSMALLINT; szTableName: LPCWSTR;
                            cchTableName: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLTablePrivilegesW}

function SQLDrivers(henv: SQLHENV; fDirection: SQLUSMALLINT; szDriverDesc: LPCWSTR;
                    cchDriverDescMax: SQLSMALLINT; var pcchDriverDesc: SQLSMALLINT;
                    szDriverAttributes: LPCWSTR; cchDrvrAttrMax: SQLSMALLINT;
                    var pcchDrvrAttr: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLDrivers}
function SQLDriversA(henv: SQLHENV; fDirection: SQLUSMALLINT; szDriverDesc: LPCSTR;
                    cchDriverDescMax: SQLSMALLINT; var pcchDriverDesc: SQLSMALLINT;
                    szDriverAttributes: LPCSTR; cchDrvrAttrMax: SQLSMALLINT;
                    var pcchDrvrAttr: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLDriversA}
function SQLDriversW(henv: SQLHENV; fDirection: SQLUSMALLINT; szDriverDesc: LPCWSTR;
                    cchDriverDescMax: SQLSMALLINT; var pcchDriverDesc: SQLSMALLINT;
                    szDriverAttributes: LPCWSTR; cchDrvrAttrMax: SQLSMALLINT;
                    var pcchDrvrAttr: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLDriversW}

function SQLBindParameter(hstmt: SQLHSTMT; ipar: SQLUSMALLINT; fParamType, fCType, fSqlType: SQLSMALLINT;
                          cbColDef: SQLULEN; ibScale: SQLSMALLINT; rgbValue: SQLPOINTER;
                          cbValueMax: SQLLEN; pcbValue: PSQLLEN): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLBindParameter}


const
//---------------------------------------------------------*/
// SQLAllocHandleStd is implemented to make SQLAllocHandle */
// compatible with X/Open standard.  an application should */
// not call SQLAllocHandleStd directly                     */
//---------------------------------------------------------*/

// Internal type subcodes */
  SQL_YEAR = SQL_CODE_YEAR;
  {$EXTERNALSYM SQL_YEAR}
  SQL_MONTH = SQL_CODE_MONTH;
  {$EXTERNALSYM SQL_MONTH}
  SQL_DAY = SQL_CODE_DAY;
  {$EXTERNALSYM SQL_DAY}
  SQL_HOUR = SQL_CODE_HOUR;
  {$EXTERNALSYM SQL_HOUR}
  SQL_MINUTE = SQL_CODE_MINUTE;
  {$EXTERNALSYM SQL_MINUTE}
  SQL_SECOND = SQL_CODE_SECOND;
  {$EXTERNALSYM SQL_SECOND}
  SQL_YEAR_TO_MONTH = SQL_CODE_YEAR_TO_MONTH;
  {$EXTERNALSYM SQL_YEAR_TO_MONTH}
  SQL_DAY_TO_HOUR = SQL_CODE_DAY_TO_HOUR;
  {$EXTERNALSYM SQL_DAY_TO_HOUR}
  SQL_DAY_TO_MINUTE = SQL_CODE_DAY_TO_MINUTE;
  {$EXTERNALSYM SQL_DAY_TO_MINUTE}
  SQL_DAY_TO_SECOND = SQL_CODE_DAY_TO_SECOND;
  {$EXTERNALSYM SQL_DAY_TO_SECOND}
  SQL_HOUR_TO_MINUTE = SQL_CODE_HOUR_TO_MINUTE;
  {$EXTERNALSYM SQL_HOUR_TO_MINUTE}
  SQL_HOUR_TO_SECOND = SQL_CODE_HOUR_TO_SECOND;
  {$EXTERNALSYM SQL_HOUR_TO_SECOND}
  SQL_MINUTE_TO_SECOND = SQL_CODE_MINUTE_TO_SECOND;
  {$EXTERNALSYM SQL_MINUTE_TO_SECOND}

{$IFDEF MSWINDOWS}
function SQLAllocHandleStd(fHandleType: SQLSMALLINT; hInput: SQLHANDLE; var phOutput: SQLHANDLE): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLAllocHandleStd}
{$ENDIF}


const
//      Deprecated defines from prior versions of ODBC
  SQL_DATABASE_NAME = 16;    // Use SQLGetConnectOption/SQL_CURRENT_QUALIFIER
  {$EXTERNALSYM SQL_DATABASE_NAME}
  SQL_FD_FETCH_PREV = SQL_FD_FETCH_PRIOR;
  {$EXTERNALSYM SQL_FD_FETCH_PREV}
  SQL_FETCH_PREV = SQL_FETCH_PRIOR;
  {$EXTERNALSYM SQL_FETCH_PREV}
  SQL_CONCUR_TIMESTAMP = SQL_CONCUR_ROWVER;
  {$EXTERNALSYM SQL_CONCUR_TIMESTAMP}
  SQL_SCCO_OPT_TIMESTAMP = SQL_SCCO_OPT_ROWVER;
  {$EXTERNALSYM SQL_SCCO_OPT_TIMESTAMP}
  SQL_CC_DELETE = SQL_CB_DELETE;
  {$EXTERNALSYM SQL_CC_DELETE}
  SQL_CR_DELETE = SQL_CB_DELETE;
  {$EXTERNALSYM SQL_CR_DELETE}
  SQL_CC_CLOSE = SQL_CB_CLOSE;
  {$EXTERNALSYM SQL_CC_CLOSE}
  SQL_CR_CLOSE = SQL_CB_CLOSE;
  {$EXTERNALSYM SQL_CR_CLOSE}
  SQL_CC_PRESERVE = SQL_CB_PRESERVE;
  {$EXTERNALSYM SQL_CC_PRESERVE}
  SQL_CR_PRESERVE = SQL_CB_PRESERVE;
  {$EXTERNALSYM SQL_CR_PRESERVE}
// SQL_FETCH_RESUME is not supported by 2.0+ drivers
//SQL_FETCH_RESUME                7
  SQL_SCROLL_FORWARD_ONLY = 0;     //-SQL_CURSOR_FORWARD_ONLY
  {$EXTERNALSYM SQL_SCROLL_FORWARD_ONLY}
  SQL_SCROLL_KEYSET_DRIVEN = (-1); //-SQL_CURSOR_KEYSET_DRIVEN
  {$EXTERNALSYM SQL_SCROLL_KEYSET_DRIVEN}
  SQL_SCROLL_DYNAMIC = (-2);       //-SQL_CURSOR_DYNAMIC
  {$EXTERNALSYM SQL_SCROLL_DYNAMIC}
  SQL_SCROLL_STATIC = (-3);        //-SQL_CURSOR_STATIC
  {$EXTERNALSYM SQL_SCROLL_STATIC}

// Tracing section
  TRACE_VERSION = 1000;        // Version of trace API
  {$EXTERNALSYM TRACE_VERSION}

// open a trace log file
function TraceOpenLogFile(szFileName: PWideChar; var lpwszOutputMsg; cbOutputMsg: LongWord): RETCODE {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM TraceOpenLogFile}
function TraceCloseLogFile: RETCODE {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF}; // Request to close a trace log
{$EXTERNALSYM TraceOpenLogFile}
procedure TraceReturn(Param1, Param2: RETCODE) {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF}; // Processes trace after FN is called
{$EXTERNALSYM TraceOpenLogFile}
function TraceVersion: LongWord {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF}; // Returns trace API version
{$EXTERNALSYM TraceOpenLogFile}

const
// Functions for Visual Studio Analyzer
// to turn on/off tracing or VS events, call TraceVSControl by setting or clearing the following bits
  TRACE_ON = $00000001;
  {$EXTERNALSYM TRACE_ON}
  TRACE_VS_EVENT_ON = $00000002;
  {$EXTERNALSYM TRACE_VS_EVENT_ON}

function TraceVSControl(Param: LongWord): RETCODE {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM TraceVSControl}

// Functions for setting the connection pooling failure detection code */
// The "TryWait" value is the time (in seconds) that the DM will wait  */
// between detecting that a connection is dead (using                  */
// SQL_ATTR_CONNECTION_DEAD) and retrying the connection.  During that */
// interval, connection requests will get "The server appears to be    */
// dead" error returns.                                                */

{$IFDEF MSWINDOWS}
function ODBCSetTryWaitValue(dwValue: LongWord): BOOL {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF}; // In seconds
{$EXTERNALSYM ODBCSetTryWaitValue}
{$ELSE}
function ODBCSetTryWaitValue(dwValue: LongWord): LongBool {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF}; // In seconds
{$EXTERNALSYM ODBCSetTryWaitValue}
{$ENDIF}
function ODBCGetTryWaitValue: LongWord {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF}; // In Milliseconds(!)
{$EXTERNALSYM ODBCGetTryWaitValue}

const
// the flags in ODBC_VS_ARGS
  ODBC_VS_FLAG_UNICODE_ARG = $00000001; // the argument is unicode
  {$EXTERNALSYM ODBC_VS_FLAG_UNICODE_ARG}
  ODBC_VS_FLAG_UNICODE_COR = $00000002; // the correlation is unicode
  {$EXTERNALSYM ODBC_VS_FLAG_UNICODE_COR}
  ODBC_VS_FLAG_RETCODE = $00000004;     // RetCode field is set
  {$EXTERNALSYM ODBC_VS_FLAG_RETCODE}
  ODBC_VS_FLAG_STOP = $00000008;        // Stop firing visual studio analyzer events
  {$EXTERNALSYM ODBC_VS_FLAG_STOP}

{ Translated from sqlucode.h }

const
  SQL_C_WCHAR = SQL_WCHAR;
  {$EXTERNALSYM SQL_C_WCHAR}
  SQL_C_TCHAR = SQL_C_WCHAR;
  {$EXTERNALSYM SQL_C_TCHAR}
  SQL_SQLSTATE_SIZEW = 10;  // size of SQLSTATE for unicode
  {$EXTERNALSYM SQL_SQLSTATE_SIZEW}

function SQLColAttributes(hstmt: SQLHSTMT; icol, fDescType: SQLUSMALLINT;
                           rgbDesc: SQLPOINTER; cbDescMax: SQLSMALLINT;
                           var pcbDesc: SQLSMALLINT; var pfDesc: SQLLEN): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLColAttributes}
function SQLColAttributesA(hstmt: SQLHSTMT; icol, fDescType: SQLUSMALLINT;
                           rgbDesc: SQLPOINTER; cbDescMax: SQLSMALLINT;
                           var pcbDesc: SQLSMALLINT; var pfDesc: SQLLEN): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLColAttributesA}
function SQLColAttributesW(hstmt: SQLHSTMT; icol, fDescType: SQLUSMALLINT;
                           rgbDesc: SQLPOINTER; cbDescMax: SQLSMALLINT;
                           var pcbDesc: SQLSMALLINT; var pfDesc: SQLLEN): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLColAttributesW}

function SQLSetDescFieldW(DescriptorHandle: SQLHDESC; RecNumber, FieldIdentifier: SQLSMALLINT;
                          Value: SQLPOINTER; BufferLength: SQLINTEGER): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLSetDescFieldW}

function SQLSetStmtAttrW(hstmt: SQLHSTMT; fAttribute: SQLINTEGER; rgbValue: SQLPOINTER;
                         cbValueMax: SQLINTEGER): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLSetStmtAttrW}

function SQLGetStmtOptionA(hstmt: SQLHSTMT; fOption: SQLUSMALLINT; pvParam: SQLPOINTER): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLGetStmtOptionA}

function SQLSetStmtOptionA(hstmt: SQLHSTMT; fOption: SQLUSMALLINT; vParam: SQLULEN): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLSetStmtOptionA}

function SQLDescribeParamA(hstmt: SQLHSTMT; ipar: SQLUSMALLINT; var pfSqlType: SQLSMALLINT;
                           var pcbParamDef: SQLUINTEGER; var pibScale: SQLSMALLINT;
                           var pfNullable: SQLSMALLINT): SQLRETURN {$IFDEF MSWINDOWS}stdcall{$ELSE}cdecl{$ENDIF};
{$EXTERNALSYM SQLDescribeParamA}

implementation

function SQL_SUCCEEDED(const rc: SQLRETURN): Boolean;
begin
  Result := (rc and (not 1)) = 0;
end;

function SQL_LEN_DATA_AT_EXEC(const length: SQLLEN): SQLLEN;
begin
  Result := -(length) + SQL_LEN_DATA_AT_EXEC_OFFSET;
end;

function SQL_LEN_BINARY_ATTR(const length: SQLLEN): SQLLEN;
begin
  Result := -(length) + SQL_LEN_BINARY_ATTR_OFFSET;
end;

function SQL_FUNC_EXISTS(pfExists: PSQLSMALLINT; uwAPI: SQLUSMALLINT): SQLINTEGER;
begin
  Inc(pfExists, uwAPI shr 4);
  if (pfExists^ and (1 shl (uwAPI and $000F))) <> 0 then
    Result := SQL_TRUE
  else
    Result := SQL_FALSE;
end;

{$IFDEF MSWINDOWS}
function SQL_POSITION_TO(hstmt: SQLHSTMT; irow: SQLSETPOSIROW): SQLRETURN;
begin
  Result := SQLSetPos(hstmt, irow, SQL_POSITION, SQL_LOCK_NO_CHANGE);
end;

function SQL_LOCK_RECORD(hstmt: SQLHSTMT; irow: SQLSETPOSIROW; fLock: SQLUSMALLINT): SQLRETURN;
begin
  Result := SQLSetPos(hstmt, irow, SQL_POSITION, fLock);
end;

function SQL_REFRESH_RECORD(hstmt: SQLHSTMT; irow: SQLSETPOSIROW; fLock: SQLUSMALLINT): SQLRETURN;
begin
  Result := SQLSetPos(hstmt, irow, SQL_REFRESH, fLock);
end;

function SQL_UPDATE_RECORD(hstmt: SQLHSTMT; irow: SQLSETPOSIROW): SQLRETURN;
begin
  Result := SQLSetPos(hstmt, irow, SQL_UPDATE, SQL_LOCK_NO_CHANGE);
end;

function SQL_DELETE_RECORD(hstmt: SQLHSTMT; irow: SQLSETPOSIROW): SQLRETURN;
begin
  Result := SQLSetPos(hstmt, irow, SQL_DELETE, SQL_LOCK_NO_CHANGE);
end;

function SQL_ADD_RECORD(hstmt: SQLHSTMT; irow: SQLSETPOSIROW): SQLRETURN;
begin
  Result := SQLSetPos(hstmt, irow, SQL_ADD, SQL_LOCK_NO_CHANGE);
end;
{$ENDIF}

function SQLAllocConnect; external odbcdll name 'SQLAllocConnect';
function SQLAllocEnv; external odbcdll name 'SQLAllocEnv';
function SQLAllocHandle; external odbcdll name 'SQLAllocHandle';
function SQLAllocStmt; external odbcdll name 'SQLAllocStmt';
function SQLBindCol; external odbcdll name 'SQLBindCol';
function SQLBindParam; external odbcdll name 'SQLBindParam';
function SQLCancel; external odbcdll name 'SQLCancel';
function SQLCancelHandle; external odbcdll name 'SQLCancelHandle';
function SQLCloseCursor; external odbcdll name 'SQLCloseCursor';
function SQLColAttribute; external odbcdll name 'SQLColAttributeW';
function SQLColAttributeA; external odbcdll name 'SQLColAttributeA';
function SQLColAttributeW; external odbcdll name 'SQLColAttributeW';
function SQLColumns; external odbcdll name 'SQLColumnsW';
function SQLColumnsA; external odbcdll name 'SQLColumnsA';
function SQLColumnsW; external odbcdll name 'SQLColumnsW';
function SQLConnect; external odbcdll name 'SQLConnectW';
function SQLConnectA; external odbcdll name 'SQLConnectA';
function SQLConnectW; external odbcdll name 'SQLConnectW';
function SQLCopyDesc; external odbcdll name 'SQLCopyDesc';
function SQLDataSources; external odbcdll name 'SQLDataSourcesW';
function SQLDataSourcesA; external odbcdll name 'SQLDataSourcesA';
function SQLDataSourcesW; external odbcdll name 'SQLDataSourcesW';
function SQLDescribeCol; external odbcdll name 'SQLDescribeColW';
function SQLDescribeColA; external odbcdll name 'SQLDescribeColA';
function SQLDescribeColW; external odbcdll name 'SQLDescribeColW';
function SQLDisconnect; external odbcdll name 'SQLDisconnect';
function SQLEndTran; external odbcdll name 'SQLEndTran';
function SQLError; external odbcdll name 'SQLErrorW';
function SQLErrorA; external odbcdll name 'SQLErrorA';
function SQLErrorW; external odbcdll name 'SQLErrorW';
function SQLExecDirect; external odbcdll name 'SQLExecDirectW';
function SQLExecDirectA; external odbcdll name 'SQLExecDirectA';
function SQLExecDirectW; external odbcdll name 'SQLExecDirectW';
function SQLExecute; external odbcdll name 'SQLExecute';
function SQLFetch; external odbcdll name 'SQLFetch';
function SQLFetchScroll; external odbcdll name 'SQLFetchScroll';
function SQLFreeConnect; external odbcdll name 'SQLFreeConnect';
function SQLFreeEnv; external odbcdll name 'SQLFreeEnv';
function SQLFreeHandle; external odbcdll name 'SQLFreeHandle';
function SQLFreeStmt; external odbcdll name 'SQLFreeStmt';
function SQLGetConnectAttr; external odbcdll name 'SQLGetConnectAttrW';
function SQLGetConnectAttrA; external odbcdll name 'SQLGetConnectAttrA';
function SQLGetConnectAttrW; external odbcdll name 'SQLGetConnectAttrW';
function SQLGetConnectOption; external odbcdll name 'SQLGetConnectOptionW';
function SQLGetConnectOptionA; external odbcdll name 'SQLGetConnectOptionA';
function SQLGetConnectOptionW; external odbcdll name 'SQLGetConnectOptionW';
function SQLGetCursorName; external odbcdll name 'SQLGetCursorNameW';
function SQLGetCursorNameA; external odbcdll name 'SQLGetCursorNameA';
function SQLGetCursorNameW; external odbcdll name 'SQLGetCursorNameW';
function SQLGetData; external odbcdll name 'SQLGetData';
function SQLGetDescField; external odbcdll name 'SQLGetDescFieldW';
function SQLGetDescFieldA; external odbcdll name 'SQLGetDescFieldA';
function SQLGetDescFieldW; external odbcdll name 'SQLGetDescFieldW';
function SQLGetDescRec; external odbcdll name 'SQLGetDescRecW';
function SQLGetDescRecA; external odbcdll name 'SQLGetDescRecA';
function SQLGetDescRecW; external odbcdll name 'SQLGetDescRecW';
function SQLGetDiagField; external odbcdll name 'SQLGetDiagFieldW';
function SQLGetDiagFieldA; external odbcdll name 'SQLGetDiagFieldA';
function SQLGetDiagFieldW; external odbcdll name 'SQLGetDiagFieldW';
function SQLGetDiagRec; external odbcdll name 'SQLGetDiagRecW';
function SQLGetDiagRecA; external odbcdll name 'SQLGetDiagRecA';
function SQLGetDiagRecW; external odbcdll name 'SQLGetDiagRecW';
function SQLGetEnvAttr; external odbcdll name 'SQLGetEnvAttr';
function SQLGetFunctions; external odbcdll name 'SQLGetFunctions';
function SQLGetInfo; external odbcdll name 'SQLGetInfoW';
function SQLGetInfoA; external odbcdll name 'SQLGetInfoA';
function SQLGetInfoW; external odbcdll name 'SQLGetInfoW';
function SQLGetStmtAttr; external odbcdll name 'SQLGetStmtAttrW';
function SQLGetStmtAttrA; external odbcdll name 'SQLGetStmtAttrA';
function SQLGetStmtAttrW; external odbcdll name 'SQLGetStmtAttrW';
function SQLGetStmtOption; external odbcdll name 'SQLGetStmtOption';
function SQLGetTypeInfo; external odbcdll name 'SQLGetTypeInfoW';
function SQLGetTypeInfoA; external odbcdll name 'SQLGetTypeInfoA';
function SQLGetTypeInfoW; external odbcdll name 'SQLGetTypeInfoW';
function SQLNumResultCols; external odbcdll name 'SQLNumResultCols';
function SQLParamData; external odbcdll name 'SQLParamData';
function SQLPrepare; external odbcdll name 'SQLPrepareW';
function SQLPrepareA; external odbcdll name 'SQLPrepareA';
function SQLPrepareW; external odbcdll name 'SQLPrepareW';
function SQLPutData; external odbcdll name 'SQLPutData';
function SQLRowCount; external odbcdll name 'SQLRowCount';
function SQLSetConnectAttr; external odbcdll name 'SQLSetConnectAttrW';
function SQLSetConnectAttrA; external odbcdll name 'SQLSetConnectAttrA';
function SQLSetConnectAttrW; external odbcdll name 'SQLSetConnectAttrW';
function SQLSetConnectOption; external odbcdll name 'SQLSetConnectOptionW';
function SQLSetConnectOptionA; external odbcdll name 'SQLSetConnectOptionA';
function SQLSetConnectOptionW; external odbcdll name 'SQLSetConnectOptionW';
function SQLSetCursorName; external odbcdll name 'SQLSetCursorNameW';
function SQLSetCursorNameA; external odbcdll name 'SQLSetCursorNameA';
function SQLSetCursorNameW; external odbcdll name 'SQLSetCursorNameW';
function SQLSetDescField; external odbcdll name 'SQLSetDescFieldW';
function SQLSetDescRec; external odbcdll name 'SQLSetDescRec';
function SQLSetEnvAttr; external odbcdll name 'SQLSetEnvAttr';
function SQLSetParam; external odbcdll name 'SQLSetParam';
function SQLSetStmtAttr; external odbcdll name 'SQLSetStmtAttrW';
function SQLSetStmtOption; external odbcdll name 'SQLSetStmtOption';
function SQLSpecialColumns; external odbcdll name 'SQLSpecialColumnsW';
function SQLSpecialColumnsA; external odbcdll name 'SQLSpecialColumnsA';
function SQLSpecialColumnsW; external odbcdll name 'SQLSpecialColumnsW';
function SQLStatistics; external odbcdll name 'SQLStatisticsW';
function SQLStatisticsA; external odbcdll name 'SQLStatisticsA';
function SQLStatisticsW; external odbcdll name 'SQLStatisticsW';
function SQLTables; external odbcdll name 'SQLTablesW';
function SQLTablesA; external odbcdll name 'SQLTablesA';
function SQLTablesW; external odbcdll name 'SQLTablesW';
function SQLTransact; external odbcdll name 'SQLTransact';

function SQLDriverConnect; external odbcdll name 'SQLDriverConnectW';
function SQLDriverConnectA; external odbcdll name 'SQLDriverConnectA';
function SQLDriverConnectW; external odbcdll name 'SQLDriverConnectW';
function SQLBrowseConnect; external odbcdll name 'SQLBrowseConnectW';
function SQLBrowseConnectA; external odbcdll name 'SQLBrowseConnectA';
function SQLBrowseConnectW; external odbcdll name 'SQLBrowseConnectW';
function SQLBulkOperations; external odbcdll name 'SQLBulkOperations';
function SQLColumnPrivileges; external odbcdll name 'SQLColumnPrivilegesW';
function SQLColumnPrivilegesA; external odbcdll name 'SQLColumnPrivilegesA';
function SQLColumnPrivilegesW; external odbcdll name 'SQLColumnPrivilegesW';
function SQLDescribeParam; external odbcdll name 'SQLDescribeParam';
function SQLForeignKeys; external odbcdll name 'SQLForeignKeysW';
function SQLForeignKeysA; external odbcdll name 'SQLForeignKeysA';
function SQLForeignKeysW; external odbcdll name 'SQLForeignKeysW';
function SQLMoreResults; external odbcdll name 'SQLMoreResults';
function SQLNativeSql; external odbcdll name 'SQLNativeSqlW';
function SQLNativeSqlA; external odbcdll name 'SQLNativeSqlA';
function SQLNativeSqlW; external odbcdll name 'SQLNativeSqlW';
function SQLNumParams; external odbcdll name 'SQLNumParams';
function SQLPrimaryKeys; external odbcdll name 'SQLPrimaryKeysW';
function SQLPrimaryKeysA; external odbcdll name 'SQLPrimaryKeysA';
function SQLPrimaryKeysW; external odbcdll name 'SQLPrimaryKeysW';
function SQLProcedureColumns; external odbcdll name 'SQLProcedureColumnsW';
function SQLProcedureColumnsA; external odbcdll name 'SQLProcedureColumnsA';
function SQLProcedureColumnsW; external odbcdll name 'SQLProcedureColumnsW';
function SQLProcedures; external odbcdll name 'SQLProceduresW';
function SQLProceduresA; external odbcdll name 'SQLProceduresA';
function SQLProceduresW; external odbcdll name 'SQLProceduresW';
{$IFDEF MSWINDOWS}
function SQLSetPos; external odbcdll name 'SQLSetPos';
{$ENDIF}
function SQLTablePrivileges; external odbcdll name 'SQLTablePrivilegesW';
function SQLTablePrivilegesA; external odbcdll name 'SQLTablePrivilegesA';
function SQLTablePrivilegesW; external odbcdll name 'SQLTablePrivilegesW';
function SQLDrivers; external odbcdll name 'SQLDriversW';
function SQLDriversA; external odbcdll name 'SQLDriversA';
function SQLDriversW; external odbcdll name 'SQLDriversW';
function SQLBindParameter; external odbcdll name 'SQLBindParameter';

{$IFDEF MSWINDOWS}
function SQLAllocHandleStd; external odbcdll name 'SQLAllocHandleStd';
{$ENDIF}

function TraceOpenLogFile; external odbcdll name 'TraceOpenLogFile';
function TraceCloseLogFile; external odbcdll name 'TraceCloseLogFile';
procedure TraceReturn; external odbcdll name 'TraceReturn';
function TraceVersion; external odbcdll name 'TraceVersion';

function TraceVSControl; external odbcdll name 'TraceVSControl';

{$IFDEF MSWINDOWS}
function ODBCSetTryWaitValue; external odbcdll name 'ODBCSetTryWaitValue';
{$ELSE}
function ODBCSetTryWaitValue; external odbcdll name 'ODBCSetTryWaitValue';
{$ENDIF}
function ODBCGetTryWaitValue; external odbcdll name 'ODBCGetTryWaitValue';

function SQLColAttributes; external odbcdll name 'SQLColAttributesW';
function SQLColAttributesA; external odbcdll name 'SQLColAttributesA';
function SQLColAttributesW; external odbcdll name 'SQLColAttributesW';
function SQLSetDescFieldW; external odbcdll name 'SQLSetDescFieldW';
function SQLSetStmtAttrW; external odbcdll name 'SQLSetStmtAttrW';

function SQLGetStmtOptionA; external odbcdll name 'SQLGetStmtOptionA';
function SQLSetStmtOptionA; external odbcdll name 'SQLSetStmtOptionA';
function SQLDescribeParamA; external odbcdll name 'SQLDescribeParamA';

end.
