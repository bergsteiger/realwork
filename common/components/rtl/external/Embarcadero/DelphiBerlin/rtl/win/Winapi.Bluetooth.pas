{*******************************************************}
{                                                       }
{                Delphi Runtime Library                 }
{                                                       }
{ Files: bluetoothapis.h bthdef.h bthsdpdef.h ws2bth.h  }
{         Copyright (C) Microsoft Corporation.          }
{         All Rights Reserved.                          }
{                                                       }
{       Translator: Embarcadero Technologies, Inc.      }
{ Copyright(c) 2016 Embarcadero Technologies, Inc.      }
{              All rights reserved                      }
{                                                       }
{*******************************************************}

unit Winapi.Bluetooth;

{$ALIGN ON}
{$MINENUMSIZE 4}
{$WEAKPACKAGEUNIT}

interface

uses
  Winapi.Windows;

{$HPPEMIT '#include <bthsdpdef.h>'}
{$HPPEMIT '#include <bthdef.h>'}
{$HPPEMIT '#include <bluetoothapis.h>'}
{$HPPEMIT '#include <ws2bth.h>'}

///////////////////////////////
///
///  Start bthsdpdef.h
///
///////////////////////////////
type
  SDP_LARGE_INTEGER_16 = record
    LowPart: UInt64;
    HighPart: Int64;
  end;
  {$EXTERNALSYM SDP_LARGE_INTEGER_16}
  PSDP_LARGE_INTEGER_16 = ^SDP_LARGE_INTEGER_16;
  {$EXTERNALSYM PSDP_LARGE_INTEGER_16}
  LPSDP_LARGE_INTEGER_16 = PSDP_LARGE_INTEGER_16;
  {$EXTERNALSYM LPSDP_LARGE_INTEGER_16}

  TSdpLargeInteger = SDP_LARGE_INTEGER_16;
  PSdpLargeInteger = ^TSdpLargeInteger;


  SDP_ULARGE_INTEGER_16 = record
    LowPart: UInt64;
    HighPart: UInt64;
  end;
  {$EXTERNALSYM SDP_ULARGE_INTEGER_16}
  PSDP_ULARGE_INTEGER_16 = ^SDP_ULARGE_INTEGER_16;
  {$EXTERNALSYM PSDP_ULARGE_INTEGER_16}
  LPSDP_ULARGE_INTEGER_16 = PSDP_ULARGE_INTEGER_16;
  {$EXTERNALSYM LPSDP_ULARGE_INTEGER_16}

  TSdpULargeInteger16 = SDP_ULARGE_INTEGER_16;
  PSdpULargeInteger16 = ^TSdpULargeInteger16;


  NodeContainerType = (NodeContainerTypeSequence, NodeContainerTypeAlternative);
  TNodeContainerType = NodeContainerType;

  SDP_ERROR = USHORT;
  {$EXTERNALSYM SDP_ERROR}
  PSDP_ERROR = ^SDP_ERROR;
  {$EXTERNALSYM PSDP_ERROR}

  TSdpError = SDP_ERROR;
  PSdpError = ^TSdpError;


  SDP_TYPE = (SDP_TYPE_NIL = $00, SDP_TYPE_UINT = $01, SDP_TYPE_INT = $02, SDP_TYPE_UUID = $03,
    SDP_TYPE_STRING = $04, SDP_TYPE_BOOLEAN = $05, SDP_TYPE_SEQUENCE = $06, SDP_TYPE_ALTERNATIVE = $07,
    SDP_TYPE_URL = $08, SDP_TYPE_CONTAINER = $20);
  {$EXTERNALSYM SDP_TYPE}
  TSdpType = SDP_TYPE;


// allow for a little easier type checking / sizing for integers and UUIDs
// ((SDP_ST_XXX & 0xF0) >> 4) == SDP_TYPE_XXX
// size of the data (in bytes) is encoded as ((SDP_ST_XXX & 0xF0) >> 8)
  SDP_SPECIFICTYPE = (SDP_ST_NONE = $0000, SDP_ST_UINT8 = $0010, SDP_ST_UINT16 = $0110, SDP_ST_UINT32 = $0210,
    SDP_ST_UINT64 = $0310, SDP_ST_UINT128 = $0410, SDP_ST_INT8 = $0020, SDP_ST_INT16 = $0120, SDP_ST_INT32 = $0220,
    SDP_ST_INT64 = $0320, SDP_ST_INT128 = $0420, SDP_ST_UUID16 = $0130, SDP_ST_UUID32 = $0220, SDP_ST_UUID128 = $0430);
  {$EXTERNALSYM SDP_SPECIFICTYPE}
  TSdpSpecificType = SDP_SPECIFICTYPE;

type
  _SdpAttributeRange = record
    minAttribute: USHORT;
    maxAttribute: USHORT;
  end;
  {$EXTERNALSYM _SdpAttributeRange}
  SdpAttributeRange = _SdpAttributeRange;
  {$EXTERNALSYM SdpAttributeRange}
  TSdpAttributeRange = SdpAttributeRange;

  SdpQueryUuidUnion = record
    case Integer of
      0: (uuid128: TGUID);
      1: (uuid32: ULONG);
      2: (uuid16: USHORT);
  end;
  TSdpQueryUuidUnion = SdpQueryUuidUnion;

  _SdpQueryUuid = record
    u: SdpQueryUuidUnion;
    uuidType: USHORT;
  end;
  {$EXTERNALSYM _SdpQueryUuid}
  SdpQueryUuid = _SdpQueryUuid;
  {$EXTERNALSYM SdpQueryUuid}
  TSdpQueryUuid = SdpQueryUuid;


///////////////////////////////
///
///  End bthsdpdef.h
///
///////////////////////////////




///////////////////////////////
///
///  Start bthdef.h
///
///////////////////////////////
const
  GUID_BTHPORT_DEVICE_INTERFACE: TGUID = '{0850302A-B344-4FDA-9BE9-90576B8D46F0}';
  {$EXTERNALSYM GUID_BTHPORT_DEVICE_INTERFACE}
  GUID_BLUETOOTH_RADIO_IN_RANGE: TGUID = '{EA3B5B82-26EE-450E-B0D8-D26FE30A3869}';
  {$EXTERNALSYM GUID_BLUETOOTH_RADIO_IN_RANGE}
  GUID_BLUETOOTH_RADIO_OUT_OF_RANGE: TGUID = '{E28867C9-C2AA-4CED-B969-4570866037C4}';
  {$EXTERNALSYM GUID_BLUETOOTH_RADIO_OUT_OF_RANGE}
  GUID_BLUETOOTH_PIN_REQUEST: TGUID = '{BD198B7C-24AB-4B9A-8C0D-A8EA8349AA16}';
  {$EXTERNALSYM GUID_BLUETOOTH_PIN_REQUEST}
  GUID_BLUETOOTH_L2CAP_EVENT: TGUID = '{7EAE4030-B709-4AA8-AC55-E953829C9DAA}';
  {$EXTERNALSYM GUID_BLUETOOTH_L2CAP_EVENT}
  GUID_BLUETOOTH_HCI_EVENT: TGUID = '{FC240062-1541-49BE-B463-84C4DCD7BF7F}';
  {$EXTERNALSYM GUID_BLUETOOTH_HCI_EVENT}
  GUID_BLUETOOTH_AUTHENTICATION_REQUEST: TGUID = '{5DC9136D-996C-46DB-84F5-32C0A3F47352}';
  {$EXTERNALSYM GUID_BLUETOOTH_AUTHENTICATION_REQUEST}
  GUID_BLUETOOTH_KEYPRESS_EVENT: TGUID = '{D668DFCD-0F4E-4EFC-BFE0-392EEEC5109C}';
  {$EXTERNALSYM GUID_BLUETOOTH_KEYPRESS_EVENT}
  GUID_BLUETOOTH_HCI_VENDOR_EVENT: TGUID = '{547247E6-45BB-4C33-AF8C-C00EFE15A71D}';
  {$EXTERNALSYM GUID_BLUETOOTH_KEYPRESS_EVENT}

//
// Bluetooth base UUID for service discovery
//
  Bluetooth_Base_UUID: TGUID = '{00000000-0000-1000-8000-00805F9B34FB}';
 {$EXTERNALSYM Bluetooth_Base_UUID}

//
// UUID for the root of the browse group list
//
  SDP_PROTOCOL_UUID: TGUID = '{00000001-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM SDP_PROTOCOL_UUID}
  UDP_PROTOCOL_UUID: TGUID = '{00000002-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM UDP_PROTOCOL_UUID}
  RFCOMM_PROTOCOL_UUID: TGUID = '{00000003-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM RFCOMM_PROTOCOL_UUID}
  TCP_PROTOCOL_UUID: TGUID = '{00000004-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM TCP_PROTOCOL_UUID}
  TCSBIN_PROTOCOL_UUID: TGUID = '{00000005-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM TCSBIN_PROTOCOL_UUID}
  TCSAT_PROTOCOL_UUID: TGUID = '{00000006-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM TCSAT_PROTOCOL_UUID}
  OBEX_PROTOCOL_UUID: TGUID = '{00000008-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM OBEX_PROTOCOL_UUID}
  IP_PROTOCOL_UUID: TGUID = '{00000009-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM IP_PROTOCOL_UUID}
  FTP_PROTOCOL_UUID: TGUID = '{0000000A-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM FTP_PROTOCOL_UUID}
  HTTP_PROTOCOL_UUID: TGUID = '{0000000C-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM HTTP_PROTOCOL_UUID}
  WSP_PROTOCOL_UUID: TGUID = '{0000000E-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM WSP_PROTOCOL_UUID}
  BNEP_PROTOCOL_UUID: TGUID = '{0000000F-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM BNEP_PROTOCOL_UUID}
  UPNP_PROTOCOL_UUID: TGUID = '{00000010-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM UPNP_PROTOCOL_UUID}
  HID_PROTOCOL_UUID: TGUID = '{00000011-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM HID_PROTOCOL_UUID}
  HCCC_PROTOCOL_UUID: TGUID = '{00000012-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM HCCC_PROTOCOL_UUID}
  HCDC_PROTOCOL_UUID: TGUID = '{00000014-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM HCDC_PROTOCOL_UUID}
  HN_PROTOCOL_UUID: TGUID = '{00000016-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM HN_PROTOCOL_UUID}
  AVCTP_PROTOCOL_UUID: TGUID = '{00000017-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM AVCTP_PROTOCOL_UUID}
  AVDTP_PROTOCOL_UUID: TGUID = '{00000019-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM AVDTP_PROTOCOL_UUID}
  CMPT_PROTOCOL_UUID: TGUID = '{0000001B-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM CMPT_PROTOCOL_UUID}
  UDI_C_PLANE_PROTOCOL_UUID: TGUID = '{0000001D-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM UDI_C_PLANE_PROTOCOL_UUID}
  L2CAP_PROTOCOL_UUID: TGUID = '{00000100-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM L2CAP_PROTOCOL_UUID}

  SDP_PROTOCOL_UUID16 = $0001;
  {$EXTERNALSYM SDP_PROTOCOL_UUID16}
  UDP_PROTOCOL_UUID16 = $0002;
  {$EXTERNALSYM UDP_PROTOCOL_UUID16}
  RFCOMM_PROTOCOL_UUID16 = $0003;
  {$EXTERNALSYM RFCOMM_PROTOCOL_UUID16}
  TCP_PROTOCOL_UUID16 = $0004;
  {$EXTERNALSYM TCP_PROTOCOL_UUID16}
  TCSBIN_PROTOCOL_UUID16 = $0005;
  {$EXTERNALSYM TCSBIN_PROTOCOL_UUID16}
  TCSAT_PROTOCOL_UUID16 = $0006;
  {$EXTERNALSYM TCSAT_PROTOCOL_UUID16}
  OBEX_PROTOCOL_UUID16 = $0008;
  {$EXTERNALSYM OBEX_PROTOCOL_UUID16}
  IP_PROTOCOL_UUID16 = $0009;
  {$EXTERNALSYM IP_PROTOCOL_UUID16}
  FTP_PROTOCOL_UUID16 = $000A;
  {$EXTERNALSYM FTP_PROTOCOL_UUID16}
  HTTP_PROTOCOL_UUID16 = $000C;
  {$EXTERNALSYM HTTP_PROTOCOL_UUID16}
  WSP_PROTOCOL_UUID16 = $000E;
  {$EXTERNALSYM WSP_PROTOCOL_UUID16}
  BNEP_PROTOCOL_UUID16 = $000F; 
  {$EXTERNALSYM BNEP_PROTOCOL_UUID16}
  UPNP_PROTOCOL_UUID16 = $0010;
  {$EXTERNALSYM UPNP_PROTOCOL_UUID16}
  HID_PROTOCOL_UUID16 = $0011;
  {$EXTERNALSYM HID_PROTOCOL_UUID16}
  HCCC_PROTOCOL_UUID16 = $0012;
  {$EXTERNALSYM HCCC_PROTOCOL_UUID16}
  HCDC_PROTOCOL_UUID16 = $0014;
  {$EXTERNALSYM HCDC_PROTOCOL_UUID16}
  HCN_PROTOCOL_UUID16 = $0016;
  {$EXTERNALSYM HCN_PROTOCOL_UUID16}
  AVCTP_PROTOCOL_UUID16 = $0017;
  {$EXTERNALSYM AVCTP_PROTOCOL_UUID16}
  AVDTP_PROTOCOL_UUID16 = $0019;
  {$EXTERNALSYM AVDTP_PROTOCOL_UUID16}
  CMPT_PROTOCOL_UUID16 = $001B;
  {$EXTERNALSYM CMPT_PROTOCOL_UUID16}
  UDI_C_PLANE_PROTOCOL_UUID16 = $001D;
  {$EXTERNALSYM UDI_C_PLANE_PROTOCOL_UUID16}
  L2CAP_PROTOCOL_UUID16 = $0100;
  {$EXTERNALSYM L2CAP_PROTOCOL_UUID16}

  ServiceDiscoveryServerServiceClassID_UUID: TGUID = '{00001000-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM ServiceDiscoveryServerServiceClassID_UUID}
  BrowseGroupDescriptorServiceClassID_UUID: TGUID = '{00001001-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM BrowseGroupDescriptorServiceClassID_UUID}
  PublicBrowseGroupServiceClass_UUID: TGUID = '{00001002-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM PublicBrowseGroupServiceClass_UUID}
  SerialPortServiceClass_UUID: TGUID = '{00001101-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM SerialPortServiceClass_UUID}
  LANAccessUsingPPPServiceClass_UUID: TGUID = '{00001102-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM LANAccessUsingPPPServiceClass_UUID}
  DialupNetworkingServiceClass_UUID: TGUID = '{00001103-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM DialupNetworkingServiceClass_UUID}
  IrMCSyncServiceClass_UUID: TGUID = '{00001104-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM IrMCSyncServiceClass_UUID}
  OBEXObjectPushServiceClass_UUID: TGUID = '{00001105-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM OBEXObjectPushServiceClass_UUID}
  OBEXFileTransferServiceClass_UUID: TGUID = '{00001106-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM OBEXFileTransferServiceClass_UUID}
  IrMCSyncCommandServiceClass_UUID: TGUID = '{00001107-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM IrMCSyncCommandServiceClass_UUID}
  HeadsetServiceClass_UUID: TGUID = '{00001108-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM HeadsetServiceClass_UUID}
  CordlessTelephonyServiceClass_UUID: TGUID = '{00001109-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM CordlessTelephonyServiceClass_UUID}
  AudioSourceServiceClass_UUID: TGUID = '{0000110A-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM AudioSourceServiceClass_UUID}
  AudioSinkServiceClass_UUID: TGUID = '{0000110B-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM AudioSinkServiceClass_UUID}
  AVRemoteControlTargetServiceClass_UUID: TGUID = '{0000110C-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM AVRemoteControlTargetServiceClass_UUID}
  AdvancedAudioDistributionServiceClass_UUID: TGUID = '{0000110D-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM AdvancedAudioDistributionServiceClass_UUID}
  AVRemoteControlServiceClass_UUID: TGUID = '{0000110E-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM AVRemoteControlServiceClass_UUID}
  VideoConferencingServiceClass_UUID: TGUID = '{0000110F-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM VideoConferencingServiceClass_UUID}
  IntercomServiceClass_UUID: TGUID = '{00001110-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM IntercomServiceClass_UUID}
  FaxServiceClass_UUID: TGUID = '{00001111-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM FaxServiceClass_UUID}
  HeadsetAudioGatewayServiceClass_UUID: TGUID = '{00001112-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM HeadsetAudioGatewayServiceClass_UUID}
  WAPServiceClass_UUID: TGUID = '{00001113-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM WAPServiceClass_UUID}
  WAPClientServiceClass_UUID: TGUID = '{00001114-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM WAPClientServiceClass_UUID}
  PANUServiceClass_UUID: TGUID = '{00001115-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM PANUServiceClass_UUID}
  NAPServiceClass_UUID: TGUID = '{00001116-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM NAPServiceClass_UUID}
  GNServiceClass_UUID: TGUID = '{00001117-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM GNServiceClass_UUID}
  DirectPrintingServiceClass_UUID: TGUID = '{00001118-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM DirectPrintingServiceClass_UUID}
  ReferencePrintingServiceClass_UUID: TGUID = '{00001119-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM ReferencePrintingServiceClass_UUID}
  ImagingServiceClass_UUID: TGUID = '{0000111A-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM ImagingServiceClass_UUID}
  ImagingResponderServiceClass_UUID: TGUID = '{0000111B-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM ImagingResponderServiceClass_UUID}
  ImagingAutomaticArchiveServiceClass_UUID: TGUID = '{0000111C-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM ImagingAutomaticArchiveServiceClass_UUID}
  ImagingReferenceObjectsServiceClass_UUID: TGUID = '{0000111D-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM ImagingReferenceObjectsServiceClass_UUID}
  HandsfreeServiceClass_UUID: TGUID = '{0000111E-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM HandsfreeServiceClass_UUID}
  HandsfreeAudioGatewayServiceClass_UUID: TGUID = '{0000111F-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM HandsfreeAudioGatewayServiceClass_UUID}
  DirectPrintingReferenceObjectsServiceClass_UUID: TGUID = '{00001120-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM DirectPrintingReferenceObjectsServiceClass_UUID}
  ReflectedUIServiceClass_UUID: TGUID = '{00001121-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM ReflectedUIServiceClass_UUID}
  BasicPrintingServiceClass_UUID: TGUID = '{00001122-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM BasicPrintingServiceClass_UUID}
  PrintingStatusServiceClass_UUID: TGUID = '{00001123-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM PrintingStatusServiceClass_UUID}
  HumanInterfaceDeviceServiceClass_UUID: TGUID = '{00001124-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM HumanInterfaceDeviceServiceClass_UUID}
  HardcopyCableReplacementServiceClass_UUID: TGUID = '{00001125-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM HardcopyCableReplacementServiceClass_UUID}
  HCRPrintServiceClass_UUID: TGUID = '{00001126-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM HCRPrintServiceClass_UUID}
  HCRScanServiceClass_UUID: TGUID = '{00001127-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM HCRScanServiceClass_UUID}
  CommonISDNAccessServiceClass_UUID: TGUID = '{00001128-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM CommonISDNAccessServiceClass_UUID}
  VideoConferencingGWServiceClass_UUID: TGUID = '{00001129-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM VideoConferencingGWServiceClass_UUID}
  UDIMTServiceClass_UUID: TGUID = '{0000112A-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM UDIMTServiceClass_UUID}
  UDITAServiceClass_UUID: TGUID = '{0000112B-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM UDITAServiceClass_UUID}
  AudioVideoServiceClass_UUID: TGUID = '{0000112C-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM AudioVideoServiceClass_UUID}
  SimAccessServiceClass_UUID: TGUID = '{0000112D-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM SimAccessServiceClass_UUID}
  PhonebookAccessPceServiceClass_UUID: TGUID = '{0000112E-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM PhonebookAccessPceServiceClass_UUID}
  PhonebookAccessPseServiceClass_UUID: TGUID = '{0000112F-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM PhonebookAccessPseServiceClass_UUID}
  PnPInformationServiceClass_UUID: TGUID = '{00001200-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM PnPInformationServiceClass_UUID}
  GenericNetworkingServiceClass_UUID: TGUID = '{00001201-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM GenericNetworkingServiceClass_UUID}
  GenericFileTransferServiceClass_UUID: TGUID = '{00001202-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM GenericFileTransferServiceClass_UUID}
  GenericAudioServiceClass_UUID: TGUID = '{00001203-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM GenericAudioServiceClass_UUID}
  GenericTelephonyServiceClass_UUID: TGUID = '{00001204-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM GenericTelephonyServiceClass_UUID}
  UPnpServiceClass_UUID: TGUID = '{00001205-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM UPnpServiceClass_UUID}
  UPnpIpServiceClass_UUID: TGUID = '{00001206-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM UPnpIpServiceClass_UUID}
  ESdpUpnpIpPanServiceClass_UUID: TGUID = '{00001300-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM ESdpUpnpIpPanServiceClass_UUID}
  ESdpUpnpIpLapServiceClass_UUID: TGUID = '{00001301-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM ESdpUpnpIpLapServiceClass_UUID}
  ESdpUpnpL2capServiceClass_UUID: TGUID = '{00001302-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM ESdpUpnpL2capServiceClass_UUID}
  VideoSourceServiceClass_UUID: TGUID = '{00001303-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM VideoSourceServiceClass_UUID}
  VideoSinkServiceClass_UUID: TGUID = '{00001304-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM VideoSinkServiceClass_UUID}
  VideoDistributionServiceClass_UUID: TGUID = '{00001305-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM VideoDistributionServiceClass_UUID}

  ServiceDiscoveryServerServiceClassID_UUID16 = $1000;
  {$EXTERNALSYM ServiceDiscoveryServerServiceClassID_UUID16}
  BrowseGroupDescriptorServiceClassID_UUID16 = $1001;
  {$EXTERNALSYM BrowseGroupDescriptorServiceClassID_UUID16}
  PublicBrowseGroupServiceClassID_UUID16 = $1002;
  {$EXTERNALSYM PublicBrowseGroupServiceClassID_UUID16}
  SerialPortServiceClassID_UUID16 = $1101;
  {$EXTERNALSYM SerialPortServiceClassID_UUID16}
  LANAccessUsingPPPServiceClassID_UUID16 = $1102;
  {$EXTERNALSYM LANAccessUsingPPPServiceClassID_UUID16}
  DialupNetworkingServiceClassID_UUID16 = $1103;
  {$EXTERNALSYM DialupNetworkingServiceClassID_UUID16}
  IrMCSyncServiceClassID_UUID16 = $1104;
  {$EXTERNALSYM IrMCSyncServiceClassID_UUID16}
  OBEXObjectPushServiceClassID_UUID16 = $1105;
  {$EXTERNALSYM OBEXObjectPushServiceClassID_UUID16}
  OBEXFileTransferServiceClassID_UUID16 = $1106;
  {$EXTERNALSYM OBEXFileTransferServiceClassID_UUID16}
  IrMcSyncCommandServiceClassID_UUID16 = $1107;
  {$EXTERNALSYM IrMcSyncCommandServiceClassID_UUID16}
  HeadsetServiceClassID_UUID16 = $1108;
  {$EXTERNALSYM HeadsetServiceClassID_UUID16}
  CordlessServiceClassID_UUID16 = $1109;
  {$EXTERNALSYM CordlessServiceClassID_UUID16}
  AudioSourceServiceClassID_UUID16 = $110A;
  {$EXTERNALSYM AudioSourceServiceClassID_UUID16}
  AudioSinkSourceServiceClassID_UUID16 = $110B;
  {$EXTERNALSYM AudioSinkSourceServiceClassID_UUID16}
  AVRemoteControlTargetServiceClassID_UUID16 = $110C;
  {$EXTERNALSYM AVRemoteControlTargetServiceClassID_UUID16}
  AdvancedAudioDistributionServiceClassID_UUID16 = $110D;
  {$EXTERNALSYM AdvancedAudioDistributionServiceClassID_UUID16}
  AVRemoteControlServiceClassID_UUID16 = $110E;
  {$EXTERNALSYM AVRemoteControlServiceClassID_UUID16}
  VideoConferencingServiceClassID_UUID16 = $110F;
  {$EXTERNALSYM VideoConferencingServiceClassID_UUID16}
  IntercomServiceClassID_UUID16 = $1110;
  {$EXTERNALSYM IntercomServiceClassID_UUID16}
  FaxServiceClassID_UUID16 = $1111;
  {$EXTERNALSYM FaxServiceClassID_UUID16}
  HeadsetAudioGatewayServiceClassID_UUID16 = $1112;
  {$EXTERNALSYM HeadsetAudioGatewayServiceClassID_UUID16}
  WAPServiceClassID_UUID16 = $1113;
  {$EXTERNALSYM WAPServiceClassID_UUID16}
  WAPClientServiceClassID_UUID16 = $1114;
  {$EXTERNALSYM WAPClientServiceClassID_UUID16}
  PANUServiceClassID_UUID16 = $1115;
  {$EXTERNALSYM PANUServiceClassID_UUID16}
  NAPServiceClassID_UUID16 = $1116;
  {$EXTERNALSYM NAPServiceClassID_UUID16}
  GNServiceClassID_UUID16 = $1117;
  {$EXTERNALSYM GNServiceClassID_UUID16}
  DirectPrintingServiceClassID_UUID16 = $1118;
  {$EXTERNALSYM DirectPrintingServiceClassID_UUID16}
  ReferencePrintingServiceClassID_UUID16 = $1119;
  {$EXTERNALSYM ReferencePrintingServiceClassID_UUID16}
  ImagingServiceClassID_UUID16 = $111A;
  {$EXTERNALSYM ImagingServiceClassID_UUID16}
  ImagingResponderServiceClassID_UUID16 = $111B;
  {$EXTERNALSYM ImagingResponderServiceClassID_UUID16}
  ImagingAutomaticArchiveServiceClassID_UUID16 = $111C;
  {$EXTERNALSYM ImagingAutomaticArchiveServiceClassID_UUID16}
  ImagingReferenceObjectsServiceClassID_UUID16 = $111D;
  {$EXTERNALSYM ImagingReferenceObjectsServiceClassID_UUID16}
  HandsfreeServiceClassID_UUID16 = $111E;
  {$EXTERNALSYM HandsfreeServiceClassID_UUID16}
  HandsfreeAudioGatewayServiceClassID_UUID16 = $111F;
  {$EXTERNALSYM HandsfreeAudioGatewayServiceClassID_UUID16}
  DirectPrintingReferenceObjectsServiceClassID_UUID16 = $1120;
  {$EXTERNALSYM DirectPrintingReferenceObjectsServiceClassID_UUID16}
  ReflectsUIServiceClassID_UUID16 = $1121;
  {$EXTERNALSYM ReflectsUIServiceClassID_UUID16}
  BasicPrintingServiceClassID_UUID16 = $1122;
  {$EXTERNALSYM BasicPrintingServiceClassID_UUID16}
  PrintingStatusServiceClassID_UUID16 = $1123;
  {$EXTERNALSYM PrintingStatusServiceClassID_UUID16}
  HumanInterfaceDeviceServiceClassID_UUID16 = $1124;
  {$EXTERNALSYM HumanInterfaceDeviceServiceClassID_UUID16}
  HardcopyCableReplacementServiceClassID_UUID16 = $1125;
  {$EXTERNALSYM HardcopyCableReplacementServiceClassID_UUID16}
  HCRPrintServiceClassID_UUID16 = $1126;
  {$EXTERNALSYM HCRPrintServiceClassID_UUID16}
  HCRScanServiceClassID_UUID16 = $1127;
  {$EXTERNALSYM HCRScanServiceClassID_UUID16}
  CommonISDNAccessServiceClass_UUID16 = $1128;
  {$EXTERNALSYM CommonISDNAccessServiceClass_UUID16}
  VideoConferencingGWServiceClass_UUID16 = $1129;
  {$EXTERNALSYM VideoConferencingGWServiceClass_UUID16}
  UDIMTServiceClass_UUID16 = $112A;
  {$EXTERNALSYM UDIMTServiceClass_UUID16}
  UDITAServiceClass_UUID16 = $112B;
  {$EXTERNALSYM UDITAServiceClass_UUID16}
  AudioVideoServiceClass_UUID16 = $112C;
  {$EXTERNALSYM AudioVideoServiceClass_UUID16}

  PnPInformationServiceClassID_UUID16 = $1200;
  {$EXTERNALSYM PnPInformationServiceClassID_UUID16}
  GenericNetworkingServiceClassID_UUID16 = $1201;
  {$EXTERNALSYM GenericNetworkingServiceClassID_UUID16}
  GenericFileTransferServiceClassID_UUID16 = $1202;
  {$EXTERNALSYM GenericFileTransferServiceClassID_UUID16}
  GenericAudioServiceClassID_UUID16 = $1203;
  {$EXTERNALSYM GenericAudioServiceClassID_UUID16}
  GenericTelephonyServiceClassID_UUID16 = $1204;
  {$EXTERNALSYM GenericTelephonyServiceClassID_UUID16}

  AVRemoteControlControllerServiceClass_UUID16 = VideoConferencingServiceClassID_UUID16;
  {$EXTERNALSYM AVRemoteControlControllerServiceClass_UUID16}
  AVRemoteControlControllerServiceClass_UUID: TGUID = '{0000110F-0000-1000-8000-00805F9B34FB}';
  {$EXTERNALSYM VideoConferencingServiceClass_UUID}


//
// max length of device friendly name.
//
  BTH_MAX_NAME_SIZE = 248;
  {$EXTERNALSYM BTH_MAX_NAME_SIZE}

  BTH_MAX_PIN_SIZE = 16;
  {$EXTERNALSYM BTH_MAX_PIN_SIZE}
  BTH_LINK_KEY_LENGTH = 16;
  {$EXTERNALSYM BTH_LINK_KEY_LENGTH}

  BTH_MFG_ERICSSON = 0;
  {$EXTERNALSYM BTH_MFG_ERICSSON}
  BTH_MFG_NOKIA = 1;
  {$EXTERNALSYM BTH_MFG_NOKIA}
  BTH_MFG_INTEL = 2;
  {$EXTERNALSYM BTH_MFG_INTEL}
  BTH_MFG_IBM = 3;
  {$EXTERNALSYM BTH_MFG_IBM}
  BTH_MFG_TOSHIBA = 4;
  {$EXTERNALSYM BTH_MFG_TOSHIBA}
  BTH_MFG_3COM = 5;
  {$EXTERNALSYM BTH_MFG_3COM}
  BTH_MFG_MICROSOFT = 6;
  {$EXTERNALSYM BTH_MFG_MICROSOFT}
  BTH_MFG_LUCENT = 7;
  {$EXTERNALSYM BTH_MFG_LUCENT}
  BTH_MFG_MOTOROLA = 8;
  {$EXTERNALSYM BTH_MFG_MOTOROLA}
  BTH_MFG_INFINEON = 9;
  {$EXTERNALSYM BTH_MFG_INFINEON}
  BTH_MFG_CSR = 10;
  {$EXTERNALSYM BTH_MFG_CSR}
  BTH_MFG_SILICONWAVE = 11;
  {$EXTERNALSYM BTH_MFG_SILICONWAVE}
  BTH_MFG_DIGIANSWER = 12;
  {$EXTERNALSYM BTH_MFG_DIGIANSWER}
  BTH_MFG_TI = 13;
  {$EXTERNALSYM BTH_MFG_TI}
  BTH_MFG_PARTHUS = 14;
  {$EXTERNALSYM BTH_MFG_PARTHUS}
  BTH_MFG_BROADCOM = 15;
  {$EXTERNALSYM BTH_MFG_BROADCOM}
  BTH_MFG_MITEL = 16;
  {$EXTERNALSYM BTH_MFG_MITEL}
  BTH_MFG_WIDCOMM = 17;
  {$EXTERNALSYM BTH_MFG_WIDCOMM}
  BTH_MFG_ZEEVO = 18;
  {$EXTERNALSYM BTH_MFG_ZEEVO}
  BTH_MFG_ATMEL = 19;
  {$EXTERNALSYM BTH_MFG_ATMEL}
  BTH_MFG_MITSIBUSHI = 20;
  {$EXTERNALSYM BTH_MFG_MITSIBUSHI}
  BTH_MFG_RTX_TELECOM = 21;
  {$EXTERNALSYM BTH_MFG_RTX_TELECOM}
  BTH_MFG_KC_TECHNOLOGY = 22;
  {$EXTERNALSYM BTH_MFG_KC_TECHNOLOGY}
  BTH_MFG_NEWLOGIC = 23;
  {$EXTERNALSYM BTH_MFG_NEWLOGIC}
  BTH_MFG_TRANSILICA = 24;
  {$EXTERNALSYM BTH_MFG_TRANSILICA}
  BTH_MFG_ROHDE_SCHWARZ = 25;
  {$EXTERNALSYM BTH_MFG_ROHDE_SCHWARZ}
  BTH_MFG_TTPCOM = 26;
  {$EXTERNALSYM BTH_MFG_TTPCOM}
  BTH_MFG_SIGNIA = 27;
  {$EXTERNALSYM BTH_MFG_SIGNIA}
  BTH_MFG_CONEXANT = 28;
  {$EXTERNALSYM BTH_MFG_CONEXANT}
  BTH_MFG_QUALCOMM = 29;
  {$EXTERNALSYM BTH_MFG_QUALCOMM}
  BTH_MFG_INVENTEL = 30;
  {$EXTERNALSYM BTH_MFG_INVENTEL}
  BTH_MFG_AVM_BERLIN = 31;
  {$EXTERNALSYM BTH_MFG_AVM_BERLIN}
  BTH_MFG_BANDSPEED = 32;
  {$EXTERNALSYM BTH_MFG_BANDSPEED}
  BTH_MFG_MANSELLA = 33;
  {$EXTERNALSYM BTH_MFG_MANSELLA}
  BTH_MFG_NEC = 34;
  {$EXTERNALSYM BTH_MFG_NEC}
  BTH_MFG_WAVEPLUS_TECHNOLOGY_CO = 35;
  {$EXTERNALSYM BTH_MFG_WAVEPLUS_TECHNOLOGY_CO}
  BTH_MFG_ALCATEL = 36;
  {$EXTERNALSYM BTH_MFG_ALCATEL}
  BTH_MFG_PHILIPS_SEMICONDUCTOR = 37;
  {$EXTERNALSYM BTH_MFG_PHILIPS_SEMICONDUCTOR}
  BTH_MFG_C_TECHNOLOGIES = 38;
  {$EXTERNALSYM BTH_MFG_C_TECHNOLOGIES}
  BTH_MFG_OPEN_INTERFACE = 39;
  {$EXTERNALSYM BTH_MFG_OPEN_INTERFACE}
  BTH_MFG_RF_MICRO_DEVICES = 40;
  {$EXTERNALSYM BTH_MFG_RF_MICRO_DEVICES}
  BTH_MFG_HITACHI = 41;
  {$EXTERNALSYM BTH_MFG_HITACHI}
  BTH_MFG_SYMBOL_TECHNOLOGIES = 42;
  {$EXTERNALSYM BTH_MFG_SYMBOL_TECHNOLOGIES}
  BTH_MFG_TENOVIS = 43;
  {$EXTERNALSYM BTH_MFG_TENOVIS}
  BTH_MFG_MACRONIX_INTERNATIONAL = 44;
  {$EXTERNALSYM BTH_MFG_MACRONIX_INTERNATIONAL}
  BTH_MFG_NORDIC_SEMICONDUCTORS_ASA = 89;
  {$EXTERNALSYM BTH_MFG_NORDIC_SEMICONDUCTORS_ASA}
  BTH_MFG_INTERNAL_USE = 65535;
  {$EXTERNALSYM BTH_MFG_INTERNAL_USE}

type
  BTH_ADDR = UInt64;
  {$EXTERNALSYM BTH_ADDR}
  PBTH_ADDR = ^BTH_ADDR;
  {$EXTERNALSYM PBTH_ADDR}
  BTH_COD = ULONG;
  {$EXTERNALSYM BTH_COD}
  PBTH_COD = ^BTH_COD;
  {$EXTERNALSYM PBTH_COD}
  BTH_LAP = ULONG;
  {$EXTERNALSYM BTH_LAP}
  PBTH_LAP = ^BTH_LAP;
  {$EXTERNALSYM PBTH_LAP}

const
  BTH_ADDR_NULL = UInt64($0000000000000000);
  {$EXTERNALSYM BTH_ADDR_NULL}

  NAP_MASK = UInt64($FFFF00000000);
  {$EXTERNALSYM NAP_MASK}
  SAP_MASK = UInt64($0000FFFFFFFF);
  {$EXTERNALSYM SAP_MASK}

  NAP_BIT_OFFSET = 8 * 4;
  {$EXTERNALSYM NAP_BIT_OFFSET}
  SAP_BIT_OFFSET = 0;
  {$EXTERNALSYM SAP_BIT_OFFSET}

function GET_NAP(_bth_addr: BTH_ADDR): USHORT;
{$EXTERNALSYM GET_NAP}
function GET_SAP(_bth_addr: BTH_ADDR): ULONG;
{$EXTERNALSYM GET_SAP}
function SET_NAP(_nap: USHORT): UInt64;            
{$EXTERNALSYM SET_NAP}
function SET_SAP(_sap: ULONG): UInt64;             
{$EXTERNALSYM SET_SAP}
function SET_NAP_SAP(_nap: USHORT; _sap: ULONG): UInt64;             
{$EXTERNALSYM SET_NAP_SAP}

const
  COD_FORMAT_BIT_OFFSET = 0;
  {$EXTERNALSYM COD_FORMAT_BIT_OFFSET}
  COD_MINOR_BIT_OFFSET = 2;
  {$EXTERNALSYM COD_MINOR_BIT_OFFSET}
  COD_MAJOR_BIT_OFFSET = 8 * 1;
  {$EXTERNALSYM COD_MAJOR_BIT_OFFSET}
  COD_SERVICE_BIT_OFFSET = 8 * 1 + 5;
  {$EXTERNALSYM COD_SERVICE_BIT_OFFSET}

function GET_COD_FORMAT(_cod: BTH_COD): BTH_COD;
{$EXTERNALSYM GET_COD_FORMAT}
function GET_COD_MINOR(_cod: BTH_COD): BTH_COD;
{$EXTERNALSYM GET_COD_MINOR}
function GET_COD_MAJOR(_cod: BTH_COD): BTH_COD;
{$EXTERNALSYM GET_COD_MAJOR}
function GET_COD_SERVICE(_cod: BTH_COD): BTH_COD;
{$EXTERNALSYM GET_COD_SERVICE}

const
  COD_FORMAT_MASK = $000003;
  {$EXTERNALSYM COD_FORMAT_MASK}
  COD_MINOR_MASK = $0000FC;
  {$EXTERNALSYM COD_MINOR_MASK}
  COD_MAJOR_MASK = $001F00;
  {$EXTERNALSYM COD_MAJOR_MASK}
  COD_SERVICE_MASK = $FFE000;
  {$EXTERNALSYM COD_SERVICE_MASK}

procedure SET_COD_MINOR(var _cod: BTH_COD; _minor: BTH_COD);
{$EXTERNALSYM SET_COD_MINOR}
procedure SET_COD_MAJOR(var _cod: BTH_COD; _major: BTH_COD);
{$EXTERNALSYM SET_COD_MAJOR}
procedure SET_COD_SERVICE(var _cod: BTH_COD; _service: BTH_COD);
{$EXTERNALSYM SET_COD_SERVICE}

const
  COD_VERSION = $0;
  {$EXTERNALSYM COD_VERSION}

  COD_SERVICE_LIMITED = $0001;
  {$EXTERNALSYM COD_SERVICE_LIMITED}
  COD_SERVICE_POSITIONING = $0008;
  {$EXTERNALSYM COD_SERVICE_POSITIONING}
  COD_SERVICE_NETWORKING = $0010;
  {$EXTERNALSYM COD_SERVICE_NETWORKING}
  COD_SERVICE_RENDERING = $0020;
  {$EXTERNALSYM COD_SERVICE_RENDERING}
  COD_SERVICE_CAPTURING = $0040;
  {$EXTERNALSYM COD_SERVICE_CAPTURING}
  COD_SERVICE_OBJECT_XFER = $0080;
  {$EXTERNALSYM COD_SERVICE_OBJECT_XFER}
  COD_SERVICE_AUDIO = $0100;
  {$EXTERNALSYM COD_SERVICE_AUDIO}
  COD_SERVICE_TELEPHONY = $0200;
  {$EXTERNALSYM COD_SERVICE_TELEPHONY}
  COD_SERVICE_INFORMATION = $0400;
  {$EXTERNALSYM COD_SERVICE_INFORMATION}

  COD_SERVICE_VALID_MASK = COD_SERVICE_LIMITED or COD_SERVICE_POSITIONING or
    COD_SERVICE_NETWORKING or COD_SERVICE_RENDERING or
    COD_SERVICE_CAPTURING or COD_SERVICE_OBJECT_XFER or
    COD_SERVICE_AUDIO or COD_SERVICE_TELEPHONY or
    COD_SERVICE_INFORMATION;
  {$EXTERNALSYM COD_SERVICE_VALID_MASK}

  COD_SERVICE_MAX_COUNT = 9;
  {$EXTERNALSYM COD_SERVICE_MAX_COUNT}

//
// Major class codes
//
const
  COD_MAJOR_MISCELLANEOUS = $00;
  {$EXTERNALSYM COD_MAJOR_MISCELLANEOUS}
  COD_MAJOR_COMPUTER = $01;
  {$EXTERNALSYM COD_MAJOR_COMPUTER}
  COD_MAJOR_PHONE = $02;
  {$EXTERNALSYM COD_MAJOR_PHONE}
  COD_MAJOR_LAN_ACCESS = $03;
  {$EXTERNALSYM COD_MAJOR_LAN_ACCESS}
  COD_MAJOR_AUDIO = $04;
  {$EXTERNALSYM COD_MAJOR_AUDIO}
  COD_MAJOR_PERIPHERAL = $05;
  {$EXTERNALSYM COD_MAJOR_PERIPHERAL}
  COD_MAJOR_IMAGING = $06;
  {$EXTERNALSYM COD_MAJOR_IMAGING}
  COD_MAJOR_WEARABLE = $07;
  {$EXTERNALSYM COD_MAJOR_WEARABLE}
  COD_MAJOR_TOY = $08;
  {$EXTERNALSYM COD_MAJOR_TOY}
  COD_MAJOR_HEALTH = $09;
  {$EXTERNALSYM COD_MAJOR_HEALTH}
  COD_MAJOR_UNCLASSIFIED = $1F;
  {$EXTERNALSYM COD_MAJOR_UNCLASSIFIED}

//
// Minor class codes specific to each major class
//

const
  COD_COMPUTER_MINOR_UNCLASSIFIED = $00;
  {$EXTERNALSYM COD_COMPUTER_MINOR_UNCLASSIFIED}
  COD_COMPUTER_MINOR_DESKTOP = $01;
  {$EXTERNALSYM COD_COMPUTER_MINOR_DESKTOP}
  COD_COMPUTER_MINOR_SERVER = $02;
  {$EXTERNALSYM COD_COMPUTER_MINOR_SERVER}
  COD_COMPUTER_MINOR_LAPTOP = $03;
  {$EXTERNALSYM COD_COMPUTER_MINOR_LAPTOP}
  COD_COMPUTER_MINOR_HANDHELD = $04;
  {$EXTERNALSYM COD_COMPUTER_MINOR_HANDHELD}
  COD_COMPUTER_MINOR_PALM = $05;
  {$EXTERNALSYM COD_COMPUTER_MINOR_PALM}
  COD_COMPUTER_MINOR_WEARABLE = $06;
  {$EXTERNALSYM COD_COMPUTER_MINOR_WEARABLE}

  COD_PHONE_MINOR_UNCLASSIFIED = $00;
  {$EXTERNALSYM COD_PHONE_MINOR_UNCLASSIFIED}
  COD_PHONE_MINOR_CELLULAR = $01;
  {$EXTERNALSYM COD_PHONE_MINOR_CELLULAR}
  COD_PHONE_MINOR_CORDLESS = $02;
  {$EXTERNALSYM COD_PHONE_MINOR_CORDLESS}
  COD_PHONE_MINOR_SMART = $03;
  {$EXTERNALSYM COD_PHONE_MINOR_SMART}
  COD_PHONE_MINOR_WIRED_MODEM = $04;
  {$EXTERNALSYM COD_PHONE_MINOR_WIRED_MODEM}

  COD_AUDIO_MINOR_UNCLASSIFIED = $00;
  {$EXTERNALSYM COD_AUDIO_MINOR_UNCLASSIFIED}
  COD_AUDIO_MINOR_HEADSET = $01;
  {$EXTERNALSYM COD_AUDIO_MINOR_HEADSET}
  COD_AUDIO_MINOR_HANDS_FREE = $02;
  {$EXTERNALSYM COD_AUDIO_MINOR_HANDS_FREE}
  COD_AUDIO_MINOR_HEADSET_HANDS_FREE = $03;
  {$EXTERNALSYM COD_AUDIO_MINOR_HEADSET_HANDS_FREE}
  COD_AUDIO_MINOR_MICROPHONE = $04;
  {$EXTERNALSYM COD_AUDIO_MINOR_MICROPHONE}
  COD_AUDIO_MINOR_LOUDSPEAKER = $05;
  {$EXTERNALSYM COD_AUDIO_MINOR_LOUDSPEAKER}
  COD_AUDIO_MINOR_HEADPHONES = $06;
  {$EXTERNALSYM COD_AUDIO_MINOR_HEADPHONES}
  COD_AUDIO_MINOR_PORTABLE_AUDIO = $07;
  {$EXTERNALSYM COD_AUDIO_MINOR_PORTABLE_AUDIO}
  COD_AUDIO_MINOR_CAR_AUDIO = $08;
  {$EXTERNALSYM COD_AUDIO_MINOR_CAR_AUDIO}
  COD_AUDIO_MINOR_SET_TOP_BOX = $09;
  {$EXTERNALSYM COD_AUDIO_MINOR_SET_TOP_BOX}
  COD_AUDIO_MINOR_HIFI_AUDIO = $0A;
  {$EXTERNALSYM COD_AUDIO_MINOR_HIFI_AUDIO}
  COD_AUDIO_MINOR_VCR = $0B;
  {$EXTERNALSYM COD_AUDIO_MINOR_VCR}
  COD_AUDIO_MINOR_VIDEO_CAMERA = $0C;
  {$EXTERNALSYM COD_AUDIO_MINOR_VIDEO_CAMERA}
  COD_AUDIO_MINOR_CAMCORDER = $0D;
  {$EXTERNALSYM COD_AUDIO_MINOR_CAMCORDER}
  COD_AUDIO_MINOR_VIDEO_MONITOR = $0E;
  {$EXTERNALSYM COD_AUDIO_MINOR_VIDEO_MONITOR}
  COD_AUDIO_MINOR_VIDEO_DISPLAY_LOUDSPEAKER = $0F;
  {$EXTERNALSYM COD_AUDIO_MINOR_VIDEO_DISPLAY_LOUDSPEAKER}
  COD_AUDIO_MINOR_VIDEO_DISPLAY_CONFERENCING = $10;
  {$EXTERNALSYM COD_AUDIO_MINOR_VIDEO_DISPLAY_CONFERENCING}
  //COD_AUDIO_MINOR_RESERVED = $11:
  COD_AUDIO_MINOR_GAMING_TOY = $12;
  {$EXTERNALSYM COD_AUDIO_MINOR_GAMING_TOY}

  COD_PERIPHERAL_MINOR_KEYBOARD_MASK = $10;
  {$EXTERNALSYM COD_PERIPHERAL_MINOR_KEYBOARD_MASK}
  COD_PERIPHERAL_MINOR_POINTER_MASK = $20;
  {$EXTERNALSYM COD_PERIPHERAL_MINOR_POINTER_MASK}

  COD_PERIPHERAL_MINOR_NO_CATEGORY = $00;
  {$EXTERNALSYM COD_PERIPHERAL_MINOR_NO_CATEGORY}
  COD_PERIPHERAL_MINOR_JOYSTICK = $01;
  {$EXTERNALSYM COD_PERIPHERAL_MINOR_JOYSTICK}
  COD_PERIPHERAL_MINOR_GAMEPAD = $02;
  {$EXTERNALSYM COD_PERIPHERAL_MINOR_GAMEPAD}
  COD_PERIPHERAL_MINOR_REMOTE_CONTROL = $03;
  {$EXTERNALSYM COD_PERIPHERAL_MINOR_REMOTE_CONTROL}
  COD_PERIPHERAL_MINOR_SENSING = $04;
  {$EXTERNALSYM COD_PERIPHERAL_MINOR_SENSING}

  COD_IMAGING_MINOR_DISPLAY_MASK = $04;
  {$EXTERNALSYM COD_IMAGING_MINOR_DISPLAY_MASK}
  COD_IMAGING_MINOR_CAMERA_MASK = $08;
  {$EXTERNALSYM COD_IMAGING_MINOR_CAMERA_MASK}
  COD_IMAGING_MINOR_SCANNER_MASK = $10;
  {$EXTERNALSYM COD_IMAGING_MINOR_SCANNER_MASK}
  COD_IMAGING_MINOR_PRINTER_MASK = $20;
  {$EXTERNALSYM COD_IMAGING_MINOR_PRINTER_MASK}

  COD_WEARABLE_MINOR_WRIST_WATCH = $01;
  {$EXTERNALSYM COD_WEARABLE_MINOR_WRIST_WATCH}
  COD_WEARABLE_MINOR_PAGER = $02;
  {$EXTERNALSYM COD_WEARABLE_MINOR_PAGER}
  COD_WEARABLE_MINOR_JACKET = $03;
  {$EXTERNALSYM COD_WEARABLE_MINOR_JACKET}
  COD_WEARABLE_MINOR_HELMET = $04;
  {$EXTERNALSYM COD_WEARABLE_MINOR_HELMET}
  COD_WEARABLE_MINOR_GLASSES = $05;
  {$EXTERNALSYM COD_WEARABLE_MINOR_GLASSES}

  COD_TOY_MINOR_ROBOT = $01;
  {$EXTERNALSYM COD_TOY_MINOR_ROBOT}
  COD_TOY_MINOR_VEHICLE = $02;
  {$EXTERNALSYM COD_TOY_MINOR_VEHICLE}
  COD_TOY_MINOR_DOLL_ACTION_FIGURE = $03;
  {$EXTERNALSYM COD_TOY_MINOR_DOLL_ACTION_FIGURE}
  COD_TOY_MINOR_CONTROLLER = $04;
  {$EXTERNALSYM COD_TOY_MINOR_CONTROLLER}
  COD_TOY_MINOR_GAME = $05;
  {$EXTERNALSYM COD_TOY_MINOR_GAME}

  COD_HEALTH_MINOR_BLOOD_PRESSURE_MONITOR = $01;
  {$EXTERNALSYM COD_HEALTH_MINOR_BLOOD_PRESSURE_MONITOR}
  COD_HEALTH_MINOR_THERMOMETER = $02;
  {$EXTERNALSYM COD_HEALTH_MINOR_THERMOMETER}
  COD_HEALTH_MINOR_WEIGHING_SCALE = $03;
  {$EXTERNALSYM COD_HEALTH_MINOR_WEIGHING_SCALE}
  COD_HEALTH_MINOR_GLUCOSE_METER = $04;
  {$EXTERNALSYM COD_HEALTH_MINOR_GLUCOSE_METER}
  COD_HEALTH_MINOR_PULSE_OXIMETER = $05;
  {$EXTERNALSYM COD_HEALTH_MINOR_PULSE_OXIMETER}
  COD_HEALTH_MINOR_HEART_PULSE_MONITOR = $06;
  {$EXTERNALSYM COD_HEALTH_MINOR_HEART_PULSE_MONITOR}
  COD_HEALTH_MINOR_HEALTH_DATA_DISPLAY = $07;
  {$EXTERNALSYM COD_HEALTH_MINOR_HEALTH_DATA_DISPLAY}
  COD_HEALTH_MINOR_STEP_COUNTER = $08;
  {$EXTERNALSYM COD_HEALTH_MINOR_STEP_COUNTER}

//
// Cannot use GET_COD_MINOR for this b/c it is embedded in a different manner
// than the rest of the major classes
//
const
  COD_LAN_ACCESS_BIT_OFFSET = 5;
  {$EXTERNALSYM COD_LAN_ACCESS_BIT_OFFSET}

  COD_LAN_MINOR_MASK = $00001C;
  {$EXTERNALSYM COD_LAN_MINOR_MASK}
  COD_LAN_ACCESS_MASK = $0000E0;
  {$EXTERNALSYM COD_LAN_ACCESS_MASK}

function GET_COD_LAN_MINOR(_cod: BTH_COD): BTH_COD;
{$EXTERNALSYM GET_COD_LAN_MINOR}
function GET_COD_LAN_ACCESS(_cod: BTH_COD): BTH_COD;
{$EXTERNALSYM GET_COD_LAN_ACCESS}

//
// LAN access percent usage subcodes
//
const
  COD_LAN_MINOR_UNCLASSIFIED = $00;
  {$EXTERNALSYM COD_LAN_MINOR_UNCLASSIFIED}
  COD_LAN_ACCESS_0_USED = $00;
  {$EXTERNALSYM COD_LAN_ACCESS_0_USED}
  COD_LAN_ACCESS_17_USED = $01;
  {$EXTERNALSYM COD_LAN_ACCESS_17_USED}
  COD_LAN_ACCESS_33_USED = $02;
  {$EXTERNALSYM COD_LAN_ACCESS_33_USED}
  COD_LAN_ACCESS_50_USED = $03;
  {$EXTERNALSYM COD_LAN_ACCESS_50_USED}
  COD_LAN_ACCESS_67_USED = $04;
  {$EXTERNALSYM COD_LAN_ACCESS_67_USED}
  COD_LAN_ACCESS_83_USED = $05;
  {$EXTERNALSYM COD_LAN_ACCESS_83_USED}
  COD_LAN_ACCESS_99_USED = $06;
  {$EXTERNALSYM COD_LAN_ACCESS_99_USED}
  COD_LAN_ACCESS_FULL = $07;
  {$EXTERNALSYM COD_LAN_ACCESS_FULL}


//
// Extended Inquiry Response (EIR) defines.
//
  BTH_EIR_FLAGS_ID = $01;
  {$EXTERNALSYM BTH_EIR_FLAGS_ID}
  BTH_EIR_16_UUIDS_PARTIAL_ID = $02;
  {$EXTERNALSYM BTH_EIR_16_UUIDS_PARTIAL_ID}
  BTH_EIR_16_UUIDS_COMPLETE_ID = $03;
  {$EXTERNALSYM BTH_EIR_16_UUIDS_COMPLETE_ID}
  BTH_EIR_32_UUIDS_PARTIAL_ID = $04;
  {$EXTERNALSYM BTH_EIR_32_UUIDS_PARTIAL_ID}
  BTH_EIR_32_UUIDS_COMPLETE_ID = $05;
  {$EXTERNALSYM BTH_EIR_32_UUIDS_COMPLETE_ID}
  BTH_EIR_128_UUIDS_PARTIAL_ID = $06;
  {$EXTERNALSYM BTH_EIR_128_UUIDS_PARTIAL_ID}
  BTH_EIR_128_UUIDS_COMPLETE_ID = $07;
  {$EXTERNALSYM BTH_EIR_128_UUIDS_COMPLETE_ID}
  BTH_EIR_LOCAL_NAME_PARTIAL_ID = $08;
  {$EXTERNALSYM BTH_EIR_LOCAL_NAME_PARTIAL_ID}
  BTH_EIR_LOCAL_NAME_COMPLETE_ID = $09;
  {$EXTERNALSYM BTH_EIR_LOCAL_NAME_COMPLETE_ID}
  BTH_EIR_TX_POWER_LEVEL_ID = $0A;
  {$EXTERNALSYM BTH_EIR_TX_POWER_LEVEL_ID}
  BTH_EIR_OOB_OPT_DATA_LEN_ID = $0B;
  {$EXTERNALSYM BTH_EIR_OOB_OPT_DATA_LEN_ID}
  BTH_EIR_OOB_BD_ADDR_ID = $0C;
  {$EXTERNALSYM BTH_EIR_OOB_BD_ADDR_ID}
  BTH_EIR_OOB_COD_ID = $0D;
  {$EXTERNALSYM BTH_EIR_OOB_COD_ID}
  BTH_EIR_OOB_SP_HASH_ID = $0E;
  {$EXTERNALSYM BTH_EIR_OOB_SP_HASH_ID}
  BTH_EIR_OOB_SP_RANDOMIZER_ID = $0F;
  {$EXTERNALSYM BTH_EIR_OOB_SP_RANDOMIZER_ID}
  BTH_EIR_MANUFACTURER_ID = $FF;
  {$EXTERNALSYM BTH_EIR_MANUFACTURER_ID}

//
// Extended Inquiry Response (EIR) size.
//
  BTH_EIR_SIZE = 240;
  {$EXTERNALSYM BTH_EIR_SIZE}


//
// Used as an initializer of LAP_DATA
//
  LAP_GIAC_INIT : array [0..2] of Byte = ($33, $8B, $9E);
  {$EXTERNALSYM LAP_GIAC_INIT}
  LAP_LIAC_INIT : array [0..2] of Byte = ($00, $8B, $9E);
  {$EXTERNALSYM LAP_LIAC_INIT}

//
// General Inquiry Access Code.
//
const
  LAP_GIAC_VALUE = $009E8B33;
  {$EXTERNALSYM LAP_GIAC_VALUE}

//
// Limited Inquiry Access Code.
//

const
  LAP_LIAC_VALUE = $009E8B00;
  {$EXTERNALSYM LAP_LIAC_VALUE}

  BTH_ADDR_IAC_FIRST = $9E8B00;
  {$EXTERNALSYM BTH_ADDR_IAC_FIRST}
  BTH_ADDR_IAC_LAST = $9E8B3F;
  {$EXTERNALSYM BTH_ADDR_IAC_LAST}
  BTH_ADDR_LIAC = $9E8B00;
  {$EXTERNALSYM BTH_ADDR_LIAC}
  BTH_ADDR_GIAC = $9E8B33;
  {$EXTERNALSYM BTH_ADDR_GIAC}

type
  BTHSTATUS = UCHAR;
  {$EXTERNALSYM BTHSTATUS}
  PBTHSTATUS = ^BTHSTATUS;
  {$EXTERNALSYM PBTHSTATUS}

function BTH_ERROR(_btStatus: BTHSTATUS): BOOL;
{$EXTERNALSYM BTH_ERROR}
function BTH_SUCCESS(_btStatus: BTHSTATUS): BOOL;
{$EXTERNALSYM BTH_SUCCESS}

const
  BTH_ERROR_SUCCESS = $00;
  {$EXTERNALSYM BTH_ERROR_SUCCESS}
  BTH_ERROR_UNKNOWN_HCI_COMMAND = $01;
  {$EXTERNALSYM BTH_ERROR_UNKNOWN_HCI_COMMAND}
  BTH_ERROR_NO_CONNECTION = $02;
  {$EXTERNALSYM BTH_ERROR_NO_CONNECTION}
  BTH_ERROR_HARDWARE_FAILURE = $03;
  {$EXTERNALSYM BTH_ERROR_HARDWARE_FAILURE}
  BTH_ERROR_PAGE_TIMEOUT = $04;
  {$EXTERNALSYM BTH_ERROR_PAGE_TIMEOUT}
  BTH_ERROR_AUTHENTICATION_FAILURE = $05;
  {$EXTERNALSYM BTH_ERROR_AUTHENTICATION_FAILURE}
  BTH_ERROR_KEY_MISSING = $06;
  {$EXTERNALSYM BTH_ERROR_KEY_MISSING}
  BTH_ERROR_MEMORY_FULL = $07;
  {$EXTERNALSYM BTH_ERROR_MEMORY_FULL}
  BTH_ERROR_CONNECTION_TIMEOUT = $08;
  {$EXTERNALSYM BTH_ERROR_CONNECTION_TIMEOUT}
  BTH_ERROR_MAX_NUMBER_OF_CONNECTIONS = $09;
  {$EXTERNALSYM BTH_ERROR_MAX_NUMBER_OF_CONNECTIONS}
  BTH_ERROR_MAX_NUMBER_OF_SCO_CONNECTIONS = $0a;
  {$EXTERNALSYM BTH_ERROR_MAX_NUMBER_OF_SCO_CONNECTIONS}
  BTH_ERROR_ACL_CONNECTION_ALREADY_EXISTS = $0b;
  {$EXTERNALSYM BTH_ERROR_ACL_CONNECTION_ALREADY_EXISTS}
  BTH_ERROR_COMMAND_DISALLOWED = $0c;
  {$EXTERNALSYM BTH_ERROR_COMMAND_DISALLOWED}
  BTH_ERROR_HOST_REJECTED_LIMITED_RESOURCES = $0d;
  {$EXTERNALSYM BTH_ERROR_HOST_REJECTED_LIMITED_RESOURCES}
  BTH_ERROR_HOST_REJECTED_SECURITY_REASONS = $0e;
  {$EXTERNALSYM BTH_ERROR_HOST_REJECTED_SECURITY_REASONS}
  BTH_ERROR_HOST_REJECTED_PERSONAL_DEVICE = $0F;
  {$EXTERNALSYM BTH_ERROR_HOST_REJECTED_PERSONAL_DEVICE}
  BTH_ERROR_HOST_TIMEOUT = $10;
  {$EXTERNALSYM BTH_ERROR_HOST_TIMEOUT}
  BTH_ERROR_UNSUPPORTED_FEATURE_OR_PARAMETER = $11;
  {$EXTERNALSYM BTH_ERROR_UNSUPPORTED_FEATURE_OR_PARAMETER}
  BTH_ERROR_INVALID_HCI_PARAMETER = $12;
  {$EXTERNALSYM BTH_ERROR_INVALID_HCI_PARAMETER}
  BTH_ERROR_REMOTE_USER_ENDED_CONNECTION = $13;
  {$EXTERNALSYM BTH_ERROR_REMOTE_USER_ENDED_CONNECTION}
  BTH_ERROR_REMOTE_LOW_RESOURCES = $14;
  {$EXTERNALSYM BTH_ERROR_REMOTE_LOW_RESOURCES}
  BTH_ERROR_REMOTE_POWERING_OFF = $15;
  {$EXTERNALSYM BTH_ERROR_REMOTE_POWERING_OFF}
  BTH_ERROR_LOCAL_HOST_TERMINATED_CONNECTION = $16;
  {$EXTERNALSYM BTH_ERROR_LOCAL_HOST_TERMINATED_CONNECTION}
  BTH_ERROR_REPEATED_ATTEMPTS = $17;
  {$EXTERNALSYM BTH_ERROR_REPEATED_ATTEMPTS}
  BTH_ERROR_PAIRING_NOT_ALLOWED = $18;
  {$EXTERNALSYM BTH_ERROR_PAIRING_NOT_ALLOWED}
  BTH_ERROR_UKNOWN_LMP_PDU = $19;
  {$EXTERNALSYM BTH_ERROR_UKNOWN_LMP_PDU}
  BTH_ERROR_UNSUPPORTED_REMOTE_FEATURE = $1a;
  {$EXTERNALSYM BTH_ERROR_UNSUPPORTED_REMOTE_FEATURE}
  BTH_ERROR_SCO_OFFSET_REJECTED = $1b;
  {$EXTERNALSYM BTH_ERROR_SCO_OFFSET_REJECTED}
  BTH_ERROR_SCO_INTERVAL_REJECTED = $1c;
  {$EXTERNALSYM BTH_ERROR_SCO_INTERVAL_REJECTED}
  BTH_ERROR_SCO_AIRMODE_REJECTED = $1d;
  {$EXTERNALSYM BTH_ERROR_SCO_AIRMODE_REJECTED}
  BTH_ERROR_INVALID_LMP_PARAMETERS = $1e;
  {$EXTERNALSYM BTH_ERROR_INVALID_LMP_PARAMETERS}
  BTH_ERROR_UNSPECIFIED_ERROR = $1F;
  {$EXTERNALSYM BTH_ERROR_UNSPECIFIED_ERROR}
  BTH_ERROR_UNSUPPORTED_LMP_PARM_VALUE = $20;
  {$EXTERNALSYM BTH_ERROR_UNSUPPORTED_LMP_PARM_VALUE}
  BTH_ERROR_ROLE_CHANGE_NOT_ALLOWED = $21;
  {$EXTERNALSYM BTH_ERROR_ROLE_CHANGE_NOT_ALLOWED}
  BTH_ERROR_LMP_RESPONSE_TIMEOUT = $22;
  {$EXTERNALSYM BTH_ERROR_LMP_RESPONSE_TIMEOUT}
  BTH_ERROR_LMP_TRANSACTION_COLLISION = $23;
  {$EXTERNALSYM BTH_ERROR_LMP_TRANSACTION_COLLISION}
  BTH_ERROR_LMP_PDU_NOT_ALLOWED = $24;
  {$EXTERNALSYM BTH_ERROR_LMP_PDU_NOT_ALLOWED}
  BTH_ERROR_ENCRYPTION_MODE_NOT_ACCEPTABLE = $25;
  {$EXTERNALSYM BTH_ERROR_ENCRYPTION_MODE_NOT_ACCEPTABLE}
  BTH_ERROR_UNIT_KEY_NOT_USED = $26;
  {$EXTERNALSYM BTH_ERROR_UNIT_KEY_NOT_USED}
  BTH_ERROR_QOS_IS_NOT_SUPPORTED = $27;
  {$EXTERNALSYM BTH_ERROR_QOS_IS_NOT_SUPPORTED}
  BTH_ERROR_INSTANT_PASSED = $28;
  {$EXTERNALSYM BTH_ERROR_INSTANT_PASSED}
  BTH_ERROR_PAIRING_WITH_UNIT_KEY_NOT_SUPPORTED = $29;
  {$EXTERNALSYM BTH_ERROR_PAIRING_WITH_UNIT_KEY_NOT_SUPPORTED}


  BTH_ERROR_DIFFERENT_TRANSACTION_COLLISION   = $2A;
  {$EXTERNALSYM BTH_ERROR_DIFFERENT_TRANSACTION_COLLISION}
  BTH_ERROR_QOS_UNACCEPTABLE_PARAMETER        = $2C;
  {$EXTERNALSYM BTH_ERROR_QOS_UNACCEPTABLE_PARAMETER}
  BTH_ERROR_QOS_REJECTED                      = $2D;
  {$EXTERNALSYM BTH_ERROR_QOS_REJECTED}
  BTH_ERROR_CHANNEL_CLASSIFICATION_NOT_SUPPORTED = $2E;
  {$EXTERNALSYM BTH_ERROR_CHANNEL_CLASSIFICATION_NOT_SUPPORTED}
  BTH_ERROR_INSUFFICIENT_SECURITY             = $2f;
  {$EXTERNALSYM BTH_ERROR_INSUFFICIENT_SECURITY}
  BTH_ERROR_PARAMETER_OUT_OF_MANDATORY_RANGE  = $30;
  {$EXTERNALSYM BTH_ERROR_PARAMETER_OUT_OF_MANDATORY_RANGE}
  BTH_ERROR_ROLE_SWITCH_PENDING = $32;
  {$EXTERNALSYM BTH_ERROR_ROLE_SWITCH_PENDING}
  BTH_ERROR_RESERVED_SLOT_VIOLATION = $34;
  {$EXTERNALSYM BTH_ERROR_RESERVED_SLOT_VIOLATION}
  BTH_ERROR_ROLE_SWITCH_FAILED = $35;
  {$EXTERNALSYM BTH_ERROR_ROLE_SWITCH_FAILED}
  BTH_ERROR_EXTENDED_INQUIRY_RESPONSE_TOO_LARGE = $36;
  {$EXTERNALSYM BTH_ERROR_EXTENDED_INQUIRY_RESPONSE_TOO_LARGE}
  BTH_ERROR_SECURE_SIMPLE_PAIRING_NOT_SUPPORTED_BY_HOST = $37;
  {$EXTERNALSYM BTH_ERROR_SECURE_SIMPLE_PAIRING_NOT_SUPPORTED_BY_HOST}
  BTH_ERROR_HOST_BUSY_PAIRING = $38;
  {$EXTERNALSYM BTH_ERROR_HOST_BUSY_PAIRING}
  BTH_ERROR_CONNECTION_REJECTED_DUE_TO_NO_SUITABLE_CHANNEL_FOUND = $39;
  {$EXTERNALSYM BTH_ERROR_CONNECTION_REJECTED_DUE_TO_NO_SUITABLE_CHANNEL_FOUND}
  BTH_ERROR_CONTROLLER_BUSY = $3A;
  {$EXTERNALSYM BTH_ERROR_CONTROLLER_BUSY}
  BTH_ERROR_UNACCEPTABLE_CONNECTION_INTERVAL = $3B;
  {$EXTERNALSYM BTH_ERROR_UNACCEPTABLE_CONNECTION_INTERVAL}
  BTH_ERROR_DIRECTED_ADVERTISING_TIMEOUT = $3C;
  {$EXTERNALSYM BTH_ERROR_DIRECTED_ADVERTISING_TIMEOUT}
  BTH_ERROR_CONNECTION_TERMINATED_DUE_TO_MIC_FAILURE = $3D;
  {$EXTERNALSYM BTH_ERROR_CONNECTION_TERMINATED_DUE_TO_MIC_FAILURE}
  BTH_ERROR_CONNECTION_FAILED_TO_BE_ESTABLISHED = $3E;
  {$EXTERNALSYM BTH_ERROR_CONNECTION_FAILED_TO_BE_ESTABLISHED}
  BTH_ERROR_MAC_CONNECTION_FAILED = $3F;
  {$EXTERNALSYM BTH_ERROR_MAC_CONNECTION_FAILED}
  BTH_ERROR_UNSPECIFIED = $FF;
  {$EXTERNALSYM BTH_ERROR_UNSPECIFIED}

//
// Min, max, and default L2cap MTU.
//
const
  L2CAP_MIN_MTU = 48;
  {$EXTERNALSYM L2CAP_MIN_MTU}
  L2CAP_MAX_MTU = $FFFF;
  {$EXTERNALSYM L2CAP_MAX_MTU}
  L2CAP_DEFAULT_MTU = 672;
  {$EXTERNALSYM L2CAP_DEFAULT_MTU}

//
// Max l2cap signal size (48) - size of signal header (4)
//
const
  MAX_L2CAP_PING_DATA_LENGTH = 44;
  {$EXTERNALSYM MAX_L2CAP_PING_DATA_LENGTH}
  MAX_L2CAP_INFO_DATA_LENGTH = 44;
  {$EXTERNALSYM MAX_L2CAP_INFO_DATA_LENGTH}

//
// the following two structures provides information about
// discovered remote radios.
//
const
  BDIF_ADDRESS = $00000001;
  {$EXTERNALSYM BDIF_ADDRESS}
  BDIF_COD = $00000002;
  {$EXTERNALSYM BDIF_COD}
  BDIF_NAME = $00000004;
  {$EXTERNALSYM BDIF_NAME}
  BDIF_PAIRED = $00000008;
  {$EXTERNALSYM BDIF_PAIRED}
  BDIF_PERSONAL = $00000010;
  {$EXTERNALSYM BDIF_PERSONAL}
  BDIF_CONNECTED = $00000020;
  {$EXTERNALSYM BDIF_CONNECTED}

  BDIF_SHORT_NAME         = $00000040;
  {$EXTERNALSYM BDIF_SHORT_NAME}
  BDIF_VISIBLE            = $00000080;
  {$EXTERNALSYM BDIF_VISIBLE}
  BDIF_SSP_SUPPORTED      = $00000100;
  {$EXTERNALSYM BDIF_SSP_SUPPORTED}
  BDIF_SSP_PAIRED         = $00000200;
  {$EXTERNALSYM BDIF_SSP_PAIRED}
  BDIF_SSP_MITM_PROTECTED = $00000400;
  {$EXTERNALSYM BDIF_SSP_MITM_PROTECTED}
  BDIF_RSSI               = $00001000;
  {$EXTERNALSYM BDIF_RSSI}
  BDIF_EIR                = $00002000;
  {$EXTERNALSYM BDIF_EIR}
  BDIF_BR                 = $00004000;
  {$EXTERNALSYM BDIF_BR}
  BDIF_LE                 = $00008000;
  {$EXTERNALSYM BDIF_LE}
  BDIF_LE_PAIRED          = $00010000;
  {$EXTERNALSYM BDIF_LE_PAIRED}
  BDIF_LE_PERSONAL        = $00020000;
  {$EXTERNALSYM BDIF_LE_PERSONAL}
  BDIF_LE_MITM_PROTECTED  = $00040000;
  {$EXTERNALSYM BDIF_LE_MITM_PROTECTED}
  BDIF_LE_PRIVACY_ENABLED = $00080000;
  {$EXTERNALSYM BDIF_LE_PRIVACY_ENABLED}

const
  BDIF_VALID_FLAGS = BDIF_ADDRESS or BDIF_COD or BDIF_NAME or BDIF_PAIRED or BDIF_PERSONAL or
     BDIF_CONNECTED or BDIF_SHORT_NAME or BDIF_VISIBLE or BDIF_RSSI or BDIF_EIR or BDIF_SSP_PAIRED or BDIF_SSP_MITM_PROTECTED or
     BDIF_BR or BDIF_LE or BDIF_LE_PAIRED or BDIF_LE_PERSONAL or BDIF_LE_MITM_PROTECTED or BDIF_LE_PRIVACY_ENABLED;
  {$EXTERNALSYM BDIF_VALID_FLAGS}

type
  _BTH_DEVICE_INFO = record

    //
    // Combination BDIF_Xxx flags
    //
    flags: ULONG;

    //
    // Address of remote device.
    //
    address: BTH_ADDR;

    //
    // Class Of Device.
    //
    classOfDevice: BTH_COD;

    //
    // name of the device
    //
    name: array [0..BTH_MAX_NAME_SIZE - 1] of Byte;
  end;
  {$EXTERNALSYM _BTH_DEVICE_INFO}
  BTH_DEVICE_INFO = _BTH_DEVICE_INFO;
  {$EXTERNALSYM BTH_DEVICE_INFO}
  PBTH_DEVICE_INFO = ^BTH_DEVICE_INFO;
  {$EXTERNALSYM PBTH_DEVICE_INFO}

  TBthDeviceInfo = _BTH_DEVICE_INFO;
  PBthDeviceInfo = ^TBthDeviceInfo;


//
// Buffer associated with GUID_BLUETOOTH_RADIO_IN_RANGE
//
type
  _BTH_RADIO_IN_RANGE = record
    //
    // Information about the remote radio
    //
    deviceInfo: TBthDeviceInfo;
    //
    // The previous flags value for the BTH_DEVICE_INFO.  The receiver of this
    // notification can compare the deviceInfo.flags and previousDeviceFlags
    // to determine what has changed about this remote radio.
    //
    // For instance, if BDIF_NAME is set in deviceInfo.flags and not in
    // previousDeviceFlags, the remote radio's has just been retrieved.
    //
    previousDeviceFlags: ULONG;
  end;
  {$EXTERNALSYM _BTH_RADIO_IN_RANGE}
  BTH_RADIO_IN_RANGE = _BTH_RADIO_IN_RANGE;
  {$EXTERNALSYM BTH_RADIO_IN_RANGE}
  PBTH_RADIO_IN_RANGE = ^BTH_RADIO_IN_RANGE;
  {$EXTERNALSYM PBTH_RADIO_IN_RANGE}
  TBthRadioInRange = BTH_RADIO_IN_RANGE;
  PBthRadioInRange = PBTH_RADIO_IN_RANGE;

//
// Buffer associated with GUID_BLUETOOTH_L2CAP_EVENT
//
  _BTH_L2CAP_EVENT_INFO = record
    //
    // Remote radio address which the L2CAP event is associated with
    //
    bthAddress: BTH_ADDR;

    //
    // The PSM that is either being connected to or disconnected from
    //
    psm: USHORT;

    //
    // If != 0, then the channel has just been established.  If == 0, then the
    // channel has been destroyed.  Notifications for a destroyed channel will
    // only be sent for channels successfully established.
    //
    connected: UCHAR;

    //
    // If != 0, then the local host iniated the l2cap connection.  If == 0, then
    // the remote host initated the connection.  This field is only valid if
    // connect is != 0.
    //
    initiated: UCHAR;
  end;
  {$EXTERNALSYM _BTH_L2CAP_EVENT_INFO}
  BTH_L2CAP_EVENT_INFO = _BTH_L2CAP_EVENT_INFO;
  {$EXTERNALSYM BTH_L2CAP_EVENT_INFO}
  PBTH_L2CAP_EVENT_INFO = ^BTH_L2CAP_EVENT_INFO;
  {$EXTERNALSYM PBTH_L2CAP_EVENT_INFO}

  TBthL2CapEventInfo = _BTH_L2CAP_EVENT_INFO;
  PBthL2CapEventInfo = ^TBthL2CapEventInfo;


const
  HCI_CONNECTION_TYPE_ACL = 1;
  {$EXTERNALSYM HCI_CONNECTION_TYPE_ACL}
  HCI_CONNECTION_TYPE_SCO = 2;
  {$EXTERNALSYM HCI_CONNECTION_TYPE_SCO}
  HCI_CONNECTION_TYPE_LE = 3;
  {$EXTERNALSYM HCI_CONNECTION_TYPE_LE}

//
// Buffer associated with GUID_BLUETOOTH_HCI_EVENT
//
type
  _BTH_HCI_EVENT_INFO = record
    //
    // Remote radio address which the HCI event is associated with
    //
    bthAddress: BTH_ADDR;

    //
    // HCI_CONNECTION_TYPE_XXX value
    //
    connectionType: UCHAR;

    //
    // If != 0, then the underlying connection to the remote radio has just
    // been estrablished.  If == 0, then the underlying conneciton has just been
    // destroyed.
    //
    connected: UCHAR;
  end;
  {$EXTERNALSYM _BTH_HCI_EVENT_INFO}
  BTH_HCI_EVENT_INFO = _BTH_HCI_EVENT_INFO;
  {$EXTERNALSYM BTH_HCI_EVENT_INFO}
  PBTH_HCI_EVENT_INFO = ^BTH_HCI_EVENT_INFO;
  {$EXTERNALSYM PBTH_HCI_EVENT_INFO}
  TBthHciEventInfo = _BTH_HCI_EVENT_INFO;
  PBthHciEventInfo = ^TBthHciEventInfo;

  _IO_CAPABILITY = (IoCaps_DisplayOnly = $00, IoCaps_DisplayYesNo = $01, IoCaps_KeyboardOnly = $02, IoCaps_NoInputNoOutput = $03,
   IoCaps_Undefined = $FF );
  {$EXTERNALSYM _IO_CAPABILITY}
  IO_CAPABILITY = _IO_CAPABILITY;
  {$EXTERNALSYM IO_CAPABILITY}

  _AUTHENTICATION_REQUIREMENTS = (MITMProtectionNotRequired = $00, MITMProtectionRequired = $01,
    MITMProtectionNotRequiredBonding = $02, MITMProtectionRequiredBonding = $03, MITMProtectionNotRequiredGeneralBonding = $04,
    MITMProtectionRequiredGeneralBonding = $05, MITMProtectionNotDefined = $FF );
  {$EXTERNALSYM _AUTHENTICATION_REQUIREMENTS}
  AUTHENTICATION_REQUIREMENTS = _AUTHENTICATION_REQUIREMENTS;
  {$EXTERNALSYM AUTHENTICATION_REQUIREMENTS}
  TAuthenticationRequirements = _AUTHENTICATION_REQUIREMENTS;

function IsMITMProtectionRequired(requirements: TAuthenticationRequirements): BOOL;
{$EXTERNALSYM IsMITMProtectionRequired}

const
  BTH_MAX_SERVICE_NAME_SIZE = 256;
  {$EXTERNALSYM BTH_MAX_SERVICE_NAME_SIZE}
  MAX_UUIDS_IN_QUERY = 12;
  {$EXTERNALSYM MAX_UUIDS_IN_QUERY}
  BTH_VID_DEFAULT_VALUE = $FFFF;
  {$EXTERNALSYM BTH_VID_DEFAULT_VALUE}
  SDP_ERROR_INVALID_SDP_VERSION = $0001;
  {$EXTERNALSYM SDP_ERROR_INVALID_SDP_VERSION}
  SDP_ERROR_INVALID_RECORD_HANDLE = $0002;
  {$EXTERNALSYM SDP_ERROR_INVALID_RECORD_HANDLE}
  SDP_ERROR_INVALID_REQUEST_SYNTAX = $0003;
  {$EXTERNALSYM SDP_ERROR_INVALID_REQUEST_SYNTAX}
  SDP_ERROR_INVALID_PDU_SIZE = $0004;
  {$EXTERNALSYM SDP_ERROR_INVALID_PDU_SIZE}
  SDP_ERROR_INVALID_CONTINUATION_STATE = $0005;
  {$EXTERNALSYM SDP_ERROR_INVALID_CONTINUATION_STATE}
  SDP_ERROR_INSUFFICIENT_RESOURCES = $0006;
  {$EXTERNALSYM SDP_ERROR_INSUFFICIENT_RESOURCES}

//
// Defined by windows to handle server errors that are not described by the
// above errors.  Start at 0x0100 so we don't go anywhere near the spec
// defined values.
//

//
// Success, nothing went wrong
//
const
  SDP_ERROR_SUCCESS = SDP_ERROR($0000);
  {$EXTERNALSYM SDP_ERROR_SUCCESS}

//
// The SDP PDU or parameters other than the SDP stream response was not correct
//

  SDP_ERROR_SERVER_INVALID_RESPONSE = SDP_ERROR($0100);
  {$EXTERNALSYM SDP_ERROR_SERVER_INVALID_RESPONSE}

///
/// The SDP response stream did not parse correctly.
///

  SDP_ERROR_SERVER_RESPONSE_DID_NOT_PARSE = SDP_ERROR($0200);
  {$EXTERNALSYM SDP_ERROR_SERVER_RESPONSE_DID_NOT_PARSE}

///
/// The SDP response stream was successfully parsed, but did not match the
/// required format for the query.
///

  SDP_ERROR_SERVER_BAD_FORMAT = SDP_ERROR($0300);
  {$EXTERNALSYM SDP_ERROR_SERVER_BAD_FORMAT}

///
/// SDP was unable to send a continued query back to the server
///

  SDP_ERROR_COULD_NOT_SEND_CONTINUE = SDP_ERROR($0400);
  {$EXTERNALSYM SDP_ERROR_COULD_NOT_SEND_CONTINUE}

///
/// Server sent a response that was too large to fit in the caller's buffer.
///

  SDP_ERROR_RESPONSE_TOO_LARGE = SDP_ERROR($0500);
  {$EXTERNALSYM SDP_ERROR_RESPONSE_TOO_LARGE}

  SDP_ATTRIB_RECORD_HANDLE = $0000;
  {$EXTERNALSYM SDP_ATTRIB_RECORD_HANDLE}
  SDP_ATTRIB_CLASS_ID_LIST = $0001;
  {$EXTERNALSYM SDP_ATTRIB_CLASS_ID_LIST}
  SDP_ATTRIB_RECORD_STATE = $0002;
  {$EXTERNALSYM SDP_ATTRIB_RECORD_STATE}
  SDP_ATTRIB_SERVICE_ID = $0003;
  {$EXTERNALSYM SDP_ATTRIB_SERVICE_ID}
  SDP_ATTRIB_PROTOCOL_DESCRIPTOR_LIST = $0004;
  {$EXTERNALSYM SDP_ATTRIB_PROTOCOL_DESCRIPTOR_LIST}
  SDP_ATTRIB_BROWSE_GROUP_LIST = $0005;
  {$EXTERNALSYM SDP_ATTRIB_BROWSE_GROUP_LIST}
  SDP_ATTRIB_LANG_BASE_ATTRIB_ID_LIST = $0006;
  {$EXTERNALSYM SDP_ATTRIB_LANG_BASE_ATTRIB_ID_LIST}
  SDP_ATTRIB_INFO_TIME_TO_LIVE = $0007;
  {$EXTERNALSYM SDP_ATTRIB_INFO_TIME_TO_LIVE}
  SDP_ATTRIB_AVAILABILITY = $0008;
  {$EXTERNALSYM SDP_ATTRIB_AVAILABILITY}
  SDP_ATTRIB_PROFILE_DESCRIPTOR_LIST = $0009;
  {$EXTERNALSYM SDP_ATTRIB_PROFILE_DESCRIPTOR_LIST}
  SDP_ATTRIB_DOCUMENTATION_URL = $000A;
  {$EXTERNALSYM SDP_ATTRIB_DOCUMENTATION_URL}
  SDP_ATTRIB_CLIENT_EXECUTABLE_URL = $000B;
  {$EXTERNALSYM SDP_ATTRIB_CLIENT_EXECUTABLE_URL}
  SDP_ATTRIB_ICON_URL = $000C;
  {$EXTERNALSYM SDP_ATTRIB_ICON_URL}
  SDP_ATTRIB_ADDITIONAL_PROTOCOL_DESCRIPTOR_LIST = $000D;
  {$EXTERNALSYM SDP_ATTRIB_ADDITIONAL_PROTOCOL_DESCRIPTOR_LIST}

//
// Attribute IDs in the range of 0x000D - 0x01FF are reserved for future use
//

const
  SDP_ATTRIB_PROFILE_SPECIFIC = $0200;
  {$EXTERNALSYM SDP_ATTRIB_PROFILE_SPECIFIC}

  LANG_BASE_LANGUAGE_INDEX = $0000;
  {$EXTERNALSYM LANG_BASE_LANGUAGE_INDEX}
  LANG_BASE_ENCODING_INDEX = $0001;
  {$EXTERNALSYM LANG_BASE_ENCODING_INDEX}
  LANG_BASE_OFFSET_INDEX = $0002;
  {$EXTERNALSYM LANG_BASE_OFFSET_INDEX}
  LANG_DEFAULT_ID = $0100;
  {$EXTERNALSYM LANG_DEFAULT_ID}

  STRING_NAME_OFFSET = $0000;
  {$EXTERNALSYM STRING_NAME_OFFSET}
  STRING_DESCRIPTION_OFFSET = $0001;
  {$EXTERNALSYM STRING_DESCRIPTION_OFFSET}
  STRING_PROVIDER_NAME_OFFSET = $0002;
  {$EXTERNALSYM STRING_PROVIDER_NAME_OFFSET}

  SDP_ATTRIB_SDP_VERSION_NUMBER_LIST = $0200;
  {$EXTERNALSYM SDP_ATTRIB_SDP_VERSION_NUMBER_LIST}
  SDP_ATTRIB_SDP_DATABASE_STATE = $0201;
  {$EXTERNALSYM SDP_ATTRIB_SDP_DATABASE_STATE}

  SDP_ATTRIB_BROWSE_GROUP_ID = $0200;
  {$EXTERNALSYM SDP_ATTRIB_BROWSE_GROUP_ID}

  SDP_ATTRIB_CORDLESS_EXTERNAL_NETWORK = $0301;
  {$EXTERNALSYM SDP_ATTRIB_CORDLESS_EXTERNAL_NETWORK}

  SDP_ATTRIB_FAX_CLASS_1_SUPPORT = $0302;
  {$EXTERNALSYM SDP_ATTRIB_FAX_CLASS_1_SUPPORT}
  SDP_ATTRIB_FAX_CLASS_2_0_SUPPORT = $0303;
  {$EXTERNALSYM SDP_ATTRIB_FAX_CLASS_2_0_SUPPORT}
  SDP_ATTRIB_FAX_CLASS_2_SUPPORT = $0304;
  {$EXTERNALSYM SDP_ATTRIB_FAX_CLASS_2_SUPPORT}
  SDP_ATTRIB_FAX_AUDIO_FEEDBACK_SUPPORT = $0305;
  {$EXTERNALSYM SDP_ATTRIB_FAX_AUDIO_FEEDBACK_SUPPORT}

  SDP_ATTRIB_HEADSET_REMOTE_AUDIO_VOLUME_CONTROL = $0302;
  {$EXTERNALSYM SDP_ATTRIB_HEADSET_REMOTE_AUDIO_VOLUME_CONTROL}

  SDP_ATTRIB_LAN_LPSUBNET = $0200;
  {$EXTERNALSYM SDP_ATTRIB_LAN_LPSUBNET}

  SDP_ATTRIB_OBJECT_PUSH_SUPPORTED_FORMATS_LIST = $0303;
  {$EXTERNALSYM SDP_ATTRIB_OBJECT_PUSH_SUPPORTED_FORMATS_LIST}

  SDP_ATTRIB_SYNCH_SUPPORTED_DATA_STORES_LIST = $0301;
  {$EXTERNALSYM SDP_ATTRIB_SYNCH_SUPPORTED_DATA_STORES_LIST}

//  this is in the assigned numbers doc, but it does not show up in any profile

const
  SDP_ATTRIB_SERVICE_VERSION = $0300;
  {$EXTERNALSYM SDP_ATTRIB_SERVICE_VERSION}

  SDP_ATTRIB_PAN_NETWORK_ADDRESS = $0306;
  {$EXTERNALSYM SDP_ATTRIB_PAN_NETWORK_ADDRESS}
  SDP_ATTRIB_PAN_WAP_GATEWAY = $0307;
  {$EXTERNALSYM SDP_ATTRIB_PAN_WAP_GATEWAY}
  SDP_ATTRIB_PAN_HOME_PAGE_URL = $0308;
  {$EXTERNALSYM SDP_ATTRIB_PAN_HOME_PAGE_URL}
  SDP_ATTRIB_PAN_WAP_STACK_TYPE = $0309;
  {$EXTERNALSYM SDP_ATTRIB_PAN_WAP_STACK_TYPE}
  SDP_ATTRIB_PAN_SECURITY_DESCRIPTION = $030A;
  {$EXTERNALSYM SDP_ATTRIB_PAN_SECURITY_DESCRIPTION}
  SDP_ATTRIB_PAN_NET_ACCESS_TYPE = $030B;
  {$EXTERNALSYM SDP_ATTRIB_PAN_NET_ACCESS_TYPE}
  SDP_ATTRIB_PAN_MAX_NET_ACCESS_RATE = $030C;
  {$EXTERNALSYM SDP_ATTRIB_PAN_MAX_NET_ACCESS_RATE}

  SDP_ATTRIB_IMAGING_SUPPORTED_CAPABILITIES = $0310;
  {$EXTERNALSYM SDP_ATTRIB_IMAGING_SUPPORTED_CAPABILITIES}
  SDP_ATTRIB_IMAGING_SUPPORTED_FEATURES = $0311;
  {$EXTERNALSYM SDP_ATTRIB_IMAGING_SUPPORTED_FEATURES}
  SDP_ATTRIB_IMAGING_SUPPORTED_FUNCTIONS = $0312;
  {$EXTERNALSYM SDP_ATTRIB_IMAGING_SUPPORTED_FUNCTIONS}
  SDP_ATTRIB_IMAGING_TOTAL_DATA_CAPACITY = $0313;
  {$EXTERNALSYM SDP_ATTRIB_IMAGING_TOTAL_DATA_CAPACITY}

  SDP_ATTRIB_DI_SPECIFICATION_ID = $0200;
  {$EXTERNALSYM SDP_ATTRIB_DI_SPECIFICATION_ID}
  SDP_ATTRIB_DI_VENDOR_ID = $0201;
  {$EXTERNALSYM SDP_ATTRIB_DI_VENDOR_ID}
  SDP_ATTRIB_DI_PRODUCT_ID = $0202;
  {$EXTERNALSYM SDP_ATTRIB_DI_PRODUCT_ID}
  SDP_ATTRIB_DI_VERSION = $0203;
  {$EXTERNALSYM SDP_ATTRIB_DI_VERSION}
  SDP_ATTRIB_DI_PRIMARY_RECORD = $0204;
  {$EXTERNALSYM SDP_ATTRIB_DI_PRIMARY_RECORD}
  SDP_ATTRIB_DI_VENDOR_ID_SOURCE = $0205;
  {$EXTERNALSYM SDP_ATTRIB_DI_VENDOR_ID_SOURCE}

  SDP_ATTRIB_HID_DEVICE_RELEASE_NUMBER = $0200;
  {$EXTERNALSYM SDP_ATTRIB_HID_DEVICE_RELEASE_NUMBER}
  SDP_ATTRIB_HID_PARSER_VERSION = $0201;
  {$EXTERNALSYM SDP_ATTRIB_HID_PARSER_VERSION}
  SDP_ATTRIB_HID_DEVICE_SUBCLASS = $0202;
  {$EXTERNALSYM SDP_ATTRIB_HID_DEVICE_SUBCLASS}
  SDP_ATTRIB_HID_COUNTRY_CODE = $0203;
  {$EXTERNALSYM SDP_ATTRIB_HID_COUNTRY_CODE}
  SDP_ATTRIB_HID_VIRTUAL_CABLE = $0204;
  {$EXTERNALSYM SDP_ATTRIB_HID_VIRTUAL_CABLE}
  SDP_ATTRIB_HID_RECONNECT_INITIATE = $0205;
  {$EXTERNALSYM SDP_ATTRIB_HID_RECONNECT_INITIATE}
  SDP_ATTRIB_HID_DESCRIPTOR_LIST = $0206;
  {$EXTERNALSYM SDP_ATTRIB_HID_DESCRIPTOR_LIST}
  SDP_ATTRIB_HID_LANG_ID_BASE_LIST = $0207;
  {$EXTERNALSYM SDP_ATTRIB_HID_LANG_ID_BASE_LIST}
  SDP_ATTRIB_HID_SDP_DISABLE = $0208;
  {$EXTERNALSYM SDP_ATTRIB_HID_SDP_DISABLE}
  SDP_ATTRIB_HID_BATTERY_POWER = $0209;
  {$EXTERNALSYM SDP_ATTRIB_HID_BATTERY_POWER}
  SDP_ATTRIB_HID_REMOTE_WAKE = $020A;
  {$EXTERNALSYM SDP_ATTRIB_HID_REMOTE_WAKE}
  SDP_ATTRIB_HID_REPORT_LIST = $020B;
  {$EXTERNALSYM SDP_ATTRIB_HID_REPORT_LIST}
  SDP_ATTRIB_HID_SUPERVISION_TIMEOUT = $020C;
  {$EXTERNALSYM SDP_ATTRIB_HID_SUPERVISION_TIMEOUT}
  SDP_ATTRIB_HID_NORMALLY_CONNECTABLE = $020D;
  {$EXTERNALSYM SDP_ATTRIB_HID_NORMALLY_CONNECTABLE}
  SDP_ATTRIB_HID_BOOT_DEVICE = $020E;
  {$EXTERNALSYM SDP_ATTRIB_HID_BOOT_DEVICE}

//
// Profile specific values
//

  CORDLESS_EXTERNAL_NETWORK_PSTN = $01;
  {$EXTERNALSYM CORDLESS_EXTERNAL_NETWORK_PSTN}
  CORDLESS_EXTERNAL_NETWORK_ISDN = $02;
  {$EXTERNALSYM CORDLESS_EXTERNAL_NETWORK_ISDN}
  CORDLESS_EXTERNAL_NETWORK_GSM = $03;
  {$EXTERNALSYM CORDLESS_EXTERNAL_NETWORK_GSM}
  CORDLESS_EXTERNAL_NETWORK_CDMA = $04;
  {$EXTERNALSYM CORDLESS_EXTERNAL_NETWORK_CDMA}
  CORDLESS_EXTERNAL_NETWORK_ANALOG_CELLULAR = $05;
  {$EXTERNALSYM CORDLESS_EXTERNAL_NETWORK_ANALOG_CELLULAR}
  CORDLESS_EXTERNAL_NETWORK_PACKET_SWITCHED = $06;
  {$EXTERNALSYM CORDLESS_EXTERNAL_NETWORK_PACKET_SWITCHED}
  CORDLESS_EXTERNAL_NETWORK_OTHER = $07;
  {$EXTERNALSYM CORDLESS_EXTERNAL_NETWORK_OTHER}

  OBJECT_PUSH_FORMAT_VCARD_2_1 = $01;
  {$EXTERNALSYM OBJECT_PUSH_FORMAT_VCARD_2_1}
  OBJECT_PUSH_FORMAT_VCARD_3_0 = $02;
  {$EXTERNALSYM OBJECT_PUSH_FORMAT_VCARD_3_0}
  OBJECT_PUSH_FORMAT_VCAL_1_0 = $03;
  {$EXTERNALSYM OBJECT_PUSH_FORMAT_VCAL_1_0}
  OBJECT_PUSH_FORMAT_ICAL_2_0 = $04;
  {$EXTERNALSYM OBJECT_PUSH_FORMAT_ICAL_2_0}
  OBJECT_PUSH_FORMAT_VNOTE = $05;
  {$EXTERNALSYM OBJECT_PUSH_FORMAT_VNOTE}
  OBJECT_PUSH_FORMAT_VMESSAGE = $06;
  {$EXTERNALSYM OBJECT_PUSH_FORMAT_VMESSAGE}
  OBJECT_PUSH_FORMAT_ANY = $FF;
  {$EXTERNALSYM OBJECT_PUSH_FORMAT_ANY}

  SYNCH_DATA_STORE_PHONEBOOK = $01;
  {$EXTERNALSYM SYNCH_DATA_STORE_PHONEBOOK}
  SYNCH_DATA_STORE_CALENDAR = $03;
  {$EXTERNALSYM SYNCH_DATA_STORE_CALENDAR}
  SYNCH_DATA_STORE_NOTES = $05;
  {$EXTERNALSYM SYNCH_DATA_STORE_NOTES}
  SYNCH_DATA_STORE_MESSAGES = $06;
  {$EXTERNALSYM SYNCH_DATA_STORE_MESSAGES}

  DI_VENDOR_ID_SOURCE_BLUETOOTH_SIG = $0001;
  {$EXTERNALSYM DI_VENDOR_ID_SOURCE_BLUETOOTH_SIG}
  DI_VENDOR_ID_SOURCE_USB_IF = $0002;
  {$EXTERNALSYM DI_VENDOR_ID_SOURCE_USB_IF}

  PSM_SDP = $0001;
  {$EXTERNALSYM PSM_SDP}
  PSM_RFCOMM = $0003;
  {$EXTERNALSYM PSM_RFCOMM}
  PSM_TCS_BIN = $0005;
  {$EXTERNALSYM PSM_TCS_BIN}
  PSM_TCS_BIN_CORDLESS = $0007;
  {$EXTERNALSYM PSM_TCS_BIN_CORDLESS}
  PSM_BNEP = $000F;
  {$EXTERNALSYM PSM_BNEP}
  PSM_HID_CONTROL = $0011;
  {$EXTERNALSYM PSM_HID_CONTROL}
  PSM_HID_INTERRUPT = $0013;
  {$EXTERNALSYM PSM_HID_INTERRUPT}
  PSM_AVCTP = $0017;
  {$EXTERNALSYM PSM_AVCTP}
  PSM_AVDTP = $0019;
  {$EXTERNALSYM PSM_AVDTP}
  PSM_UDI_C_PLANE = $001D;
  {$EXTERNALSYM PSM_UDI_C_PLANE}

//
// Strings
//

const
  STR_ADDR_FMTA = '(%02x:%02x:%02x:%02x:%02x:%02x)';
  {$EXTERNALSYM STR_ADDR_FMTA}
  STR_ADDR_FMTW = '(%02x:%02x:%02x:%02x:%02x:%02x)';
  {$EXTERNALSYM STR_ADDR_FMTW}

  STR_ADDR_SHORT_FMTA = '%04x%08x';
  {$EXTERNALSYM STR_ADDR_SHORT_FMTA}
  STR_ADDR_SHORT_FMTW = '%04x%08x';
  {$EXTERNALSYM STR_ADDR_SHORT_FMTW}

{$IFDEF UNICODE}
  STR_ADDR_FMT = STR_ADDR_FMTW;
  {$EXTERNALSYM STR_ADDR_FMT}
  STR_ADDR_SHORT_FMT = STR_ADDR_SHORT_FMTW;
  {$EXTERNALSYM STR_ADDR_SHORT_FMT}
{$ELSE}
  STR_ADDR_FMT = STR_ADDR_FMTA;
  {$EXTERNALSYM STR_ADDR_FMT}
  STR_ADDR_SHORT_FMT = STR_ADDR_SHORT_FMTA;
  {$EXTERNALSYM STR_ADDR_SHORT_FMT}
{$ENDIF UNICODE}

function GET_BITS(Field, Offset, Mask: Integer): Integer;
{$EXTERNALSYM GET_BITS}
function GET_BIT(Field, Offset: Integer): Integer;
{$EXTERNALSYM GET_BIT}

function LMP_3_SLOT_PACKETS(X: Integer): Integer;
{$EXTERNALSYM LMP_3_SLOT_PACKETS}
function LMP_5_SLOT_PACKETS(X: Integer): Integer;
{$EXTERNALSYM LMP_5_SLOT_PACKETS}
function LMP_ENCRYPTION(X: Integer): Integer;
{$EXTERNALSYM LMP_ENCRYPTION}
function LMP_SLOT_OFFSET(X: Integer): Integer;
{$EXTERNALSYM LMP_SLOT_OFFSET}
function LMP_TIMING_ACCURACY(X: Integer): Integer;
{$EXTERNALSYM LMP_TIMING_ACCURACY}
function LMP_SWITCH(X: Integer): Integer;
{$EXTERNALSYM LMP_SWITCH}
function LMP_HOLD_MODE(X: Integer): Integer;
{$EXTERNALSYM LMP_HOLD_MODE}
function LMP_SNIFF_MODE(X: Integer): Integer;
{$EXTERNALSYM LMP_SNIFF_MODE}
function LMP_PARK_MODE(X: Integer): Integer;
{$EXTERNALSYM LMP_PARK_MODE}
function LMP_RSSI(X: Integer): Integer;
{$EXTERNALSYM LMP_RSSI}
function LMP_CHANNEL_QUALITY_DRIVEN_MODE(X: Integer): Integer;
{$EXTERNALSYM LMP_CHANNEL_QUALITY_DRIVEN_MODE}
function LMP_SCO_LINK(X: Integer): Integer;
{$EXTERNALSYM LMP_SCO_LINK}
function LMP_HV2_PACKETS(X: Integer): Integer;
{$EXTERNALSYM LMP_HV2_PACKETS}
function LMP_HV3_PACKETS(X: Integer): Integer;
{$EXTERNALSYM LMP_HV3_PACKETS}
function LMP_MU_LAW_LOG(X: Integer): Integer;
{$EXTERNALSYM LMP_MU_LAW_LOG}
function LMP_A_LAW_LOG(X: Integer): Integer;
{$EXTERNALSYM LMP_A_LAW_LOG}
function LMP_CVSD(X: Integer): Integer;
{$EXTERNALSYM LMP_CVSD}
function LMP_PAGING_SCHEME(X: Integer): Integer;
{$EXTERNALSYM LMP_PAGING_SCHEME}
function LMP_POWER_CONTROL(X: Integer): Integer;
{$EXTERNALSYM LMP_POWER_CONTROL}
function LMP_TRANSPARENT_SCO_DATA(X: Integer): Integer;
{$EXTERNALSYM LMP_TRANSPARENT_SCO_DATA}
function LMP_FLOW_CONTROL_LAG(X: Integer): Integer;
{$EXTERNALSYM LMP_FLOW_CONTROL_LAG}
///////////////////////////////
///
///  End bthdef.h
///
///////////////////////////////


///////////////////////////////
///
///  Start ws2bth.h
///
///////////////////////////////

const
  //BT_PORT_ANY = $ffffffff;
  BT_PORT_ANY = ULONG(-1);
  {$EXTERNALSYM BT_PORT_ANY}
  BT_PORT_MIN = $1;
  {$EXTERNALSYM BT_PORT_MIN}
  BT_PORT_MAX = $ffff;
  {$EXTERNALSYM BT_PORT_MAX}
  BT_PORT_DYN_FIRST = $1001;
  {$EXTERNALSYM BT_PORT_DYN_FIRST}


type
  _SOCKADDR_BTH = packed record
    addressFamily: USHORT; // Always AF_BTH
    btAddr: BTH_ADDR;      // Bluetooth device address
    serviceClassId: TGUID; // [OPTIONAL] system will query SDP for port
    port: ULONG;           // RFCOMM channel or L2CAP PSM
  end;
  {$EXTERNALSYM _SOCKADDR_BTH}
  SOCKADDR_BTH = _SOCKADDR_BTH;
  {$EXTERNALSYM SOCKADDR_BTH}
  PSOCKADDR_BTH = ^_SOCKADDR_BTH;
  {$EXTERNALSYM PSOCKADDR_BTH}
  TSockAddrBth = _SOCKADDR_BTH;
  PSockAddrBth = ^TSockAddrBth;

const
  SVCID_BTH_PROVIDER: TGUID = '{06AA63E0-7D60-41FF-AFB2-3EE6D2D9392D}';
  {$EXTERNALSYM SVCID_BTH_PROVIDER}
  BTH_ADDR_STRING_SIZE = 12;  // max size from WSAAddressToString
  {$EXTERNALSYM BTH_ADDR_STRING_SIZE}

//
// Bluetooth protocol #s are assigned according to the Bluetooth
// Assigned Numbers portion of the Bluetooth Specification
//
const
  BTHPROTO_RFCOMM = $0003;
  {$EXTERNALSYM BTHPROTO_RFCOMM}
  BTHPROTO_L2CAP = $0100;
  {$EXTERNALSYM BTHPROTO_L2CAP}

  SOL_RFCOMM = BTHPROTO_RFCOMM;
  {$EXTERNALSYM SOL_RFCOMM}
  SOL_L2CAP = BTHPROTO_L2CAP;
  {$EXTERNALSYM SOL_L2CAP}
  SOL_SDP = $0101;
  {$EXTERNALSYM SOL_SDP}

//
// SOCKET OPTIONS
//
  SO_BTH_AUTHENTICATE = DWORD($80000001); // optlen=sizeof(ULONG), optval = &(ULONG)TRUE/FALSE
  {$EXTERNALSYM SO_BTH_AUTHENTICATE}
  SO_BTH_ENCRYPT =      DWORD($00000002); // optlen=sizeof(ULONG), optval = &(ULONG)TRUE/FALSE
  {$EXTERNALSYM SO_BTH_ENCRYPT}
  SO_BTH_MTU =          DWORD($80000007); // optlen=sizeof(ULONG), optval = &mtu
  {$EXTERNALSYM SO_BTH_MTU}
  SO_BTH_MTU_MAX =      DWORD($80000008); // optlen=sizeof(ULONG), optval = &max. mtu
  {$EXTERNALSYM SO_BTH_MTU_MAX}
  SO_BTH_MTU_MIN =      DWORD($8000000a); // optlen=sizeof(ULONG), optval = &min. mtu
  {$EXTERNALSYM SO_BTH_MTU_MIN}

//
// Socket option parameters
//
// 3-DH5 => payload of 1021 => L2cap payload of 1017 => RFComm payload of 1011
  RFCOMM_MAX_MTU = $000003F3; // L2CAP MTU (1017) - RFCOMM header size (6)
  {$EXTERNALSYM RFCOMM_MAX_MTU}
  RFCOMM_MIN_MTU = $00000017; // RFCOMM spec sec 5.3 table 5.1
  {$EXTERNALSYM RFCOMM_MIN_MTU}

//
// NAME SERVICE PROVIDER DEFINITIONS
// For calling WSASetService
// and WSALookupServiceBegin, WSALookupServiceNext, WSALookupServiceEnd
// with Bluetooth-specific extensions
//
  BTH_SDP_VERSION = 1;
  {$EXTERNALSYM BTH_SDP_VERSION}


//
// [OPTIONAL] passed in BLOB member of WSAQUERYSET
// QUERYSET and its lpBlob member are copied & converted
// to unicode in the system for non-unicode applications.
// However, nothing is copied back upon return.  In
// order for the system to return data such as pRecordHandle,
// it much have an extra level of indirection from lpBlob
//
type
  _BTH_SET_SERVICE = packed record
    //
    // This version number will change when/if the binary format of
    // SDP records change, affecting the format of pRecord.
    // Set to BTH_SDP_VERSION by client, and returned by system
    //
    pSdpVersion: PULONG;

    //
    // Handle to SDP record.  When BTH_SET_SERVICE structure is later
    // passed to WSASetService RNRSERVICE_DELETE, this handle identifies the
    // record to delete.
    //
    pRecordHandle: PHandle;

    //
    // COD_SERVICE_* bit(s) associated with this SDP record, which will be
    // advertised when the local radio is found during device inquiry.
    // When the last SDP record associated with a bit is deleted, that
    // service bit is no longer reported in repsonse to inquiries
    //
    fCodService: ULONG;               // COD_SERVICE_* bits
    Reserved: array [0..4] of ULONG;  // Reserved by system.  Must be zero.
    ulRecordLength: ULONG;            // length of pRecord which follows
    pRecord: array [0..0] of UCHAR;   // SDP record as defined by bluetooth spec
  end;
  {$EXTERNALSYM _BTH_SET_SERVICE}
  BTH_SET_SERVICE = _BTH_SET_SERVICE;
  {$EXTERNALSYM BTH_SET_SERVICE}
  PBTH_SET_SERVICE = ^_BTH_SET_SERVICE;
  {$EXTERNALSYM PBTH_SET_SERVICE}
  TBthSetService = _BTH_SET_SERVICE;
  PBthSetService = ^TBthSetService;

//
// Default device inquiry duration in seconds
//
// The application thread will be blocked in WSALookupServiceBegin
// for the duration of the device inquiry, so this value needs to
// be balanced against the chance that a device that is actually
// present might not being found by Bluetooth in this time
//
// Paging improvements post-1.1 will cause devices to be
// found generally uniformly in the 0-6 sec timeperiod
//
const
  SDP_DEFAULT_INQUIRY_SECONDS = 6;
  {$EXTERNALSYM SDP_DEFAULT_INQUIRY_SECONDS}
  SDP_MAX_INQUIRY_SECONDS = 60;
  {$EXTERNALSYM SDP_MAX_INQUIRY_SECONDS}

//
// Default maximum number of devices to search for
//
  SDP_DEFAULT_INQUIRY_MAX_RESPONSES = 255;
  {$EXTERNALSYM SDP_DEFAULT_INQUIRY_MAX_RESPONSES}
  SDP_SERVICE_SEARCH_REQUEST = 1;
  {$EXTERNALSYM SDP_SERVICE_SEARCH_REQUEST}
  SDP_SERVICE_ATTRIBUTE_REQUEST = 2;
  {$EXTERNALSYM SDP_SERVICE_ATTRIBUTE_REQUEST}
  SDP_SERVICE_SEARCH_ATTRIBUTE_REQUEST = 3;
  {$EXTERNALSYM SDP_SERVICE_SEARCH_ATTRIBUTE_REQUEST}

//
// [OPTIONAL] input restrictions on device inquiry
// Passed in BLOB of LUP_CONTAINERS (device) search
//
type
  _BTH_QUERY_DEVICE = packed record
    LAP: ULONG;          // reserved: must be 0 (GIAC inquiry only)
    length: UCHAR;       // requested length of inquiry (seconds)
  end;
  {$EXTERNALSYM _BTH_QUERY_DEVICE}
  BTH_QUERY_DEVICE = _BTH_QUERY_DEVICE;
  {$EXTERNALSYM BTH_QUERY_DEVICE}
  PBTH_QUERY_DEVICE = ^_BTH_QUERY_DEVICE;
  {$EXTERNALSYM PBTH_QUERY_DEVICE}
  TBthQueryDevice = _BTH_QUERY_DEVICE;
  PBthQueryDevice = ^TBthQueryDevice;

//
// [OPTIONAL] Restrictions on searching for a particular service
// Passed in BLOB of !LUP_CONTAINERS (service) search
//
  _BTH_QUERY_SERVICE = packed record
    &type: ULONG;
    serviceHandle: ULONG;
    uuids: array[0..MAX_UUIDS_IN_QUERY - 1] of SdpQueryUuid;
    numRange: ULONG;
    pRange: array[0..0] of SdpAttributeRange;
  end;
  {$EXTERNALSYM _BTH_QUERY_SERVICE}
  BTH_QUERY_SERVICE = _BTH_QUERY_SERVICE;
  {$EXTERNALSYM BTH_QUERY_SERVICE}
  PBTH_QUERY_SERVICE = ^_BTH_QUERY_SERVICE;
  {$EXTERNALSYM PBTH_QUERY_SERVICE}
  TBthQueryService = _BTH_QUERY_SERVICE;
  PBthQueryService = ^TBthQueryService;

//
// BTHNS_RESULT_*
//
// Bluetooth specific flags returned from WSALookupServiceNext
// in WSAQUERYSET.dwOutputFlags in response to device inquiry
//

//
// Local device is paired with remote device
//
const
  BTHNS_RESULT_DEVICE_CONNECTED =     $00010000;
  {$EXTERNALSYM BTHNS_RESULT_DEVICE_CONNECTED}
  BTHNS_RESULT_DEVICE_REMEMBERED =    $00020000;
  {$EXTERNALSYM BTHNS_RESULT_DEVICE_REMEMBERED}
  BTHNS_RESULT_DEVICE_AUTHENTICATED = $00040000;
  {$EXTERNALSYM BTHNS_RESULT_DEVICE_AUTHENTICATED}

//
// SOCKET IOCTLs
//
// From Winapi.Winsock2.pas
  _IOC_OUT      = $40000000;
  _IOC_IN       = DWORD($80000000);
  _IOC_INOUT    = DWORD(_IOC_IN or _IOC_OUT);
  _IOC_VENDOR   = $18000000;

  SIO_RFCOMM_SEND_COMMAND = _IOC_INOUT or _IOC_VENDOR or 101;
  {$EXTERNALSYM SIO_RFCOMM_SEND_COMMAND}
  SIO_RFCOMM_WAIT_COMMAND = _IOC_INOUT or _IOC_VENDOR or 102;
  {$EXTERNALSYM SIO_RFCOMM_WAIT_COMMAND}

//
// These IOCTLs are for test/validation/conformance and may only be
// present in debug/checked builds of the system
//
  SIO_BTH_PING = _IOC_INOUT or _IOC_VENDOR or 8;
  {$EXTERNALSYM SIO_BTH_PING}
  SIO_BTH_INFO = _IOC_INOUT or _IOC_VENDOR or 9;
  {$EXTERNALSYM SIO_BTH_INFO}
  SIO_RFCOMM_SESSION_FLOW_OFF = _IOC_INOUT or _IOC_VENDOR or 103;
  {$EXTERNALSYM SIO_RFCOMM_SESSION_FLOW_OFF}
  SIO_RFCOMM_TEST             = _IOC_INOUT or _IOC_VENDOR or 104;
  {$EXTERNALSYM SIO_RFCOMM_TEST}
  SIO_RFCOMM_USECFC           = _IOC_INOUT or _IOC_VENDOR or 105;
  {$EXTERNALSYM SIO_RFCOMM_USECFC}
//                              _IOC_INOUT or _IOC_VENDOR or 106;  // Reserved

//
// SOCKET IOCTL DEFINITIONS
//
  MSC_FC_BIT      = 1 shl 1;    // Flow control, clear if we can receive
  {$EXTERNALSYM MSC_FC_BIT}
  MSC_RTC_BIT     = 1 shl 2;    // Ready to communicate, set when ready
  {$EXTERNALSYM MSC_RTC_BIT}
  MSC_RTR_BIT     = 1 shl 3;    // Ready to receive, set when ready
  {$EXTERNALSYM MSC_RTR_BIT}
  MSC_RESERVED    = (1 shl 4) or (1 shl 5);   // Reserved by spec, must be 0
  {$EXTERNALSYM MSC_RESERVED}
  MSC_IC_BIT      = 1 shl 6;    // Incoming call
  {$EXTERNALSYM MSC_IC_BIT}
  MSC_DV_BIT      = 1 shl 7;    // Data valid
  {$EXTERNALSYM MSC_DV_BIT}
  MSC_BREAK_BIT   = 1 shl 1;    // Set if sending break
  {$EXTERNALSYM MSC_BREAK_BIT}

function MSC_SET_BREAK_LENGTH(var b: Int32; l: Int32): Int32;
{$EXTERNALSYM MSC_SET_BREAK_LENGTH}

type
  _RFCOMM_MSC_DATA = packed record
    Signals: UCHAR;
    Break: UCHAR;
  end;
  {$EXTERNALSYM _RFCOMM_MSC_DATA}
  RFCOMM_MSC_DATA = _RFCOMM_MSC_DATA;
  {$EXTERNALSYM RFCOMM_MSC_DATA}
  PRFCOMM_MSC_DATA = ^RFCOMM_MSC_DATA;
  {$EXTERNALSYM PRFCOMM_MSC_DATA}
  TRfCommMscData = _RFCOMM_MSC_DATA;
  PRfCommMscData = ^TRfCommMscData;

//
// Structure definition from Bluetooth RFCOMM spec, TS 07.10 5.4.6.3.10
//
const
  RLS_ERROR          = $01;
  {$EXTERNALSYM RLS_ERROR}
  RLS_OVERRUN        = $02;
  {$EXTERNALSYM RLS_OVERRUN}
  RLS_PARITY         = $04;
  {$EXTERNALSYM RLS_PARITY}
  RLS_FRAMING        = $08;
  {$EXTERNALSYM RLS_FRAMING}

type
  _RFCOMM_RLS_DATA = packed record
    LineStatus: UCHAR;
  end;
  {$EXTERNALSYM _RFCOMM_RLS_DATA}
  RFCOMM_RLS_DATA = _RFCOMM_RLS_DATA;
  {$EXTERNALSYM RFCOMM_RLS_DATA}
  PRFCOMM_RLS_DATA = ^RFCOMM_RLS_DATA;
  {$EXTERNALSYM PRFCOMM_RLS_DATA}
  TRfCommRlsData = _RFCOMM_RLS_DATA;
  PRfCommRlsData = ^TRfCommRlsData;

//
// Structure definition from Bluetooth RFCOMM spec, TS 07.10 5.4.6.3.9
//
const
  RPN_BAUD_2400     = 0;
  {$EXTERNALSYM RPN_BAUD_2400}
  RPN_BAUD_4800     = 1;
  {$EXTERNALSYM RPN_BAUD_4800}
  RPN_BAUD_7200     = 2;
  {$EXTERNALSYM RPN_BAUD_7200}
  RPN_BAUD_9600     = 3;
  {$EXTERNALSYM RPN_BAUD_9600}
  RPN_BAUD_19200    = 4;
  {$EXTERNALSYM RPN_BAUD_19200}
  RPN_BAUD_38400    = 5;
  {$EXTERNALSYM RPN_BAUD_38400}
  RPN_BAUD_57600    = 6;
  {$EXTERNALSYM RPN_BAUD_57600}
  RPN_BAUD_115200   = 7;
  {$EXTERNALSYM RPN_BAUD_115200}
  RPN_BAUD_230400   = 8;
  {$EXTERNALSYM RPN_BAUD_230400}
  RPN_DATA_5        = $0;
  {$EXTERNALSYM RPN_DATA_5}
  RPN_DATA_6        = $1;
  {$EXTERNALSYM RPN_DATA_6}
  RPN_DATA_7        = $2;
  {$EXTERNALSYM RPN_DATA_7}
  RPN_DATA_8        = $3;
  {$EXTERNALSYM RPN_DATA_8}
  RPN_STOP_1        = $0;
  {$EXTERNALSYM RPN_STOP_1}
  RPN_STOP_1_5      = $4;
  {$EXTERNALSYM RPN_STOP_1_5}
  RPN_PARITY_NONE   = $00;
  {$EXTERNALSYM RPN_PARITY_NONE}
  RPN_PARITY_ODD    = $08;
  {$EXTERNALSYM RPN_PARITY_ODD}
  RPN_PARITY_EVEN   = $18;
  {$EXTERNALSYM RPN_PARITY_EVEN}
  RPN_PARITY_MARK   = $28;
  {$EXTERNALSYM RPN_PARITY_MARK}
  RPN_PARITY_SPACE  = $38;
  {$EXTERNALSYM RPN_PARITY_SPACE}
  RPN_FLOW_X_IN     = $01;
  {$EXTERNALSYM RPN_FLOW_X_IN}
  RPN_FLOW_X_OUT    = $02;
  {$EXTERNALSYM RPN_FLOW_X_OUT}
  RPN_FLOW_RTR_IN   = $04;
  {$EXTERNALSYM RPN_FLOW_RTR_IN}
  RPN_FLOW_RTR_OUT  = $08;
  {$EXTERNALSYM RPN_FLOW_RTR_OUT}
  RPN_FLOW_RTC_IN   = $10;
  {$EXTERNALSYM RPN_FLOW_RTC_IN}
  RPN_FLOW_RTC_OUT  = $20;
  {$EXTERNALSYM RPN_FLOW_RTC_OUT}
  RPN_PARAM_BAUD    = $01;
  {$EXTERNALSYM RPN_PARAM_BAUD}
  RPN_PARAM_DATA    = $02;
  {$EXTERNALSYM RPN_PARAM_DATA}
  RPN_PARAM_STOP    = $04;
  {$EXTERNALSYM RPN_PARAM_STOP}
  RPN_PARAM_PARITY  = $08;
  {$EXTERNALSYM RPN_PARAM_PARITY}
  RPN_PARAM_P_TYPE  = $10;
  {$EXTERNALSYM RPN_PARAM_P_TYPE}
  RPN_PARAM_XON     = $20;
  {$EXTERNALSYM RPN_PARAM_XON}
  RPN_PARAM_XOFF    = $40;
  {$EXTERNALSYM RPN_PARAM_XOFF}
  RPN_PARAM_X_IN    = $01;
  {$EXTERNALSYM RPN_PARAM_X_IN}
  RPN_PARAM_X_OUT   = $02;
  {$EXTERNALSYM RPN_PARAM_X_OUT}
  RPN_PARAM_RTR_IN  = $04;
  {$EXTERNALSYM RPN_PARAM_RTR_IN}
  RPN_PARAM_RTR_OUT = $08;
  {$EXTERNALSYM RPN_PARAM_RTR_OUT}
  RPN_PARAM_RTC_IN  = $10;
  {$EXTERNALSYM RPN_PARAM_RTC_IN}
  RPN_PARAM_RTC_OUT = $20;
  {$EXTERNALSYM RPN_PARAM_RTC_OUT}

type
  _RFCOMM_RPN_DATA = packed record
    Baud: UCHAR;
    Data: UCHAR;
    FlowControl: UCHAR;
    XonChar: UCHAR;
    XoffChar: UCHAR;
    ParameterMask1: UCHAR;
    ParameterMask2: UCHAR;
  end;
  {$EXTERNALSYM _RFCOMM_RPN_DATA}
  RFCOMM_RPN_DATA = _RFCOMM_RPN_DATA;
  {$EXTERNALSYM RFCOMM_RPN_DATA}
  PRFCOMM_RPN_DATA = ^_RFCOMM_RPN_DATA;
  {$EXTERNALSYM PRFCOMM_RPN_DATA}
  TRfCommRpnData = _RFCOMM_RPN_DATA;
  PRfCommRpnData = ^TRfCommRpnData;

const
  RFCOMM_CMD_NONE            = 0;
  {$EXTERNALSYM RFCOMM_CMD_NONE}
  RFCOMM_CMD_MSC             = 1;
  {$EXTERNALSYM RFCOMM_CMD_MSC}
  RFCOMM_CMD_RLS             = 2;
  {$EXTERNALSYM RFCOMM_CMD_RLS}
  RFCOMM_CMD_RPN             = 3;
  {$EXTERNALSYM RFCOMM_CMD_RPN}
  RFCOMM_CMD_RPN_REQUEST     = 4;
  {$EXTERNALSYM RFCOMM_CMD_RPN_REQUEST}
  RFCOMM_CMD_RPN_RESPONSE    = 5;
  {$EXTERNALSYM RFCOMM_CMD_RPN_RESPONSE}
//      RESERVED_CMD           6

type
  _RFCOMM_COMMAND = record
    CmdType: ULONG;   // one of RFCOMM_CMD_*
    case Integer of
      0: (MSC: RFCOMM_MSC_DATA);
      1: (RLS: RFCOMM_RLS_DATA);
      2: (RPN: RFCOMM_RPN_DATA);
  end;
  {$EXTERNALSYM _RFCOMM_COMMAND}
  RFCOMM_COMMAND = _RFCOMM_COMMAND;
  {$EXTERNALSYM RFCOMM_COMMAND}
  PRFCOMM_COMMAND = ^RFCOMM_COMMAND;
  {$EXTERNALSYM PRFCOMM_COMMAND}
  TRfCommCommand = _RFCOMM_COMMAND;
  PRfCommCommand = ^TRfCommCommand;

//
// These structures are for test/validation/conformance and may only be
// present in debug/checked builds of the system
//
type
  _BTH_PING_REQ = record
    btAddr: BTH_ADDR;
    dataLen: UCHAR;
    data: array [0..MAX_L2CAP_PING_DATA_LENGTH - 1] of UCHAR;
  end;
  {$EXTERNALSYM _BTH_PING_REQ}
  BTH_PING_REQ = _BTH_PING_REQ;
  {$EXTERNALSYM BTH_PING_REQ}
  PBTH_PING_REQ = ^BTH_PING_REQ;
  {$EXTERNALSYM PBTH_PING_REQ}
  TBthPingReq = _BTH_PING_REQ;
  PBthPingReq = ^TBthPingReq;

  _BTH_PING_RSP = record
    dataLen: UCHAR;
    data: array [0..MAX_L2CAP_PING_DATA_LENGTH - 1] of UCHAR;
  end;
  {$EXTERNALSYM _BTH_PING_RSP}
  BTH_PING_RSP = _BTH_PING_RSP;
  {$EXTERNALSYM BTH_PING_RSP}
  PBTH_PING_RSP = ^BTH_PING_RSP;
  {$EXTERNALSYM PBTH_PING_RSP}
  TBthPingRsp = _BTH_PING_RSP;
  PBthPingRsp = ^TBthPingRsp;

  _BTH_INFO_REQ = record
    btAddr: BTH_ADDR;
    infoType: USHORT;
  end;
  {$EXTERNALSYM _BTH_INFO_REQ}
  BTH_INFO_REQ = _BTH_INFO_REQ;
  {$EXTERNALSYM BTH_INFO_REQ}
  PBTH_INFO_REQ = ^BTH_INFO_REQ;
  {$EXTERNALSYM PBTH_INFO_REQ}
  TBthInfoReq = _BTH_INFO_REQ;
  PBthInfoReq = ^TBthInfoReq;

  _BTH_INFO_RSP = record
    result: USHORT;
    dataLen: UCHAR;
    case Integer of
      0: (connectionlessMTU: USHORT);
      1: (data: array [0..MAX_L2CAP_INFO_DATA_LENGTH - 1] of UCHAR);
  end;
  {$EXTERNALSYM _BTH_INFO_RSP}
  BTH_INFO_RSP = _BTH_INFO_RSP;
  {$EXTERNALSYM BTH_INFO_RSP}
  PBTH_INFO_RSP = ^BTH_INFO_RSP;
  {$EXTERNALSYM PBTH_INFO_RSP}
  TBthInfoRsp = _BTH_INFO_RSP;
  PBthInfoRsp = ^TBthInfoRsp;

//
// WinCE compatible struct names
//
type
  BTHNS_SETBLOB = _BTH_SET_SERVICE;
  {$EXTERNALSYM BTHNS_SETBLOB}
  PBTHNS_SETBLOB = ^BTHNS_SETBLOB;
  {$EXTERNALSYM BTHNS_SETBLOB}
  TBthnsSetblob = _BTH_SET_SERVICE;
  PBthnsSetblob = ^TBthnsSetblob;

  BTHNS_INQUIRYBLOB = _BTH_QUERY_DEVICE;
  {$EXTERNALSYM BTHNS_INQUIRYBLOB}
  PBTHNS_INQUIRYBLOB = ^BTHNS_INQUIRYBLOB;
  {$EXTERNALSYM PBTHNS_INQUIRYBLOB}
  TBthnsInquiryblob = _BTH_QUERY_DEVICE;
  PBthnsInquiryblob = ^TBthnsInquiryblob;

  BTHNS_RESTRICTIONBLOB = _BTH_QUERY_SERVICE;
  {$EXTERNALSYM BTHNS_RESTRICTIONBLOB}
  PBTHNS_RESTRICTIONBLOB = ^BTHNS_RESTRICTIONBLOB;
  {$EXTERNALSYM PBTHNS_RESTRICTIONBLOB}
  TBthnsRestrictionblob = _BTH_QUERY_SERVICE;
  PBthnsRestrictionblob = ^TBthnsRestrictionblob;


///////////////////////////////
///
///  End ws2bth.h
///
///////////////////////////////

///////////////////////////////
///
///  Start BluetoothAPIs.h
///
///////////////////////////////

const
  BLUETOOTH_MAX_NAME_SIZE            = 248;
  {$EXTERNALSYM BLUETOOTH_MAX_NAME_SIZE}
  BLUETOOTH_MAX_PASSKEY_SIZE         = 16;
  {$EXTERNALSYM BLUETOOTH_MAX_PASSKEY_SIZE}
  BLUETOOTH_MAX_PASSKEY_BUFFER_SIZE  = BLUETOOTH_MAX_PASSKEY_SIZE + 1;
  {$EXTERNALSYM BLUETOOTH_MAX_PASSKEY_BUFFER_SIZE}
  BLUETOOTH_MAX_SERVICE_NAME_SIZE    = 256;
  {$EXTERNALSYM BLUETOOTH_MAX_SERVICE_NAME_SIZE}
  BLUETOOTH_DEVICE_NAME_SIZE         = 256;
  {$EXTERNALSYM BLUETOOTH_DEVICE_NAME_SIZE}


// ***************************************************************************
//
//  Bluetooth Address
//
// ***************************************************************************

type
  _BLUETOOTH_ADDRESS = record
    case Integer of
      0: (ullLong: BTH_ADDR);                 //  easier to compare again BLUETOOTH_NULL_ADDRESS
      1: (rgBytes: array [0..5] of Byte);     //  easier to format when broken out
  end;
  {$EXTERNALSYM _BLUETOOTH_ADDRESS}
  BLUETOOTH_ADDRESS = _BLUETOOTH_ADDRESS;
  {$EXTERNALSYM BLUETOOTH_ADDRESS}
  TBluetoothAddress = _BLUETOOTH_ADDRESS;
  PBluetoothAddress = ^TBluetoothAddress;

const
  BLUETOOTH_NULL_ADDRESS: TBluetoothAddress = (ullLong: 0);
  {$EXTERNALSYM BLUETOOTH_NULL_ADDRESS}

type
  _BLUETOOTH_LOCAL_SERVICE_INFO = record
    Enabled: BOOL;                   //  If TRUE, the enable the services
    btAddr: TBluetoothAddress;       //  If service is to be advertised for a particular remote device
    szName: array [0..BLUETOOTH_MAX_NAME_SIZE - 1] of WCHAR;  //  SDP Service Name to be advertised.
    szDeviceString: array [0..BLUETOOTH_MAX_NAME_SIZE - 1] of WCHAR;  //  Local device name (if any) like COM4 or LPT1
  end;
  BLUETOOTH_LOCAL_SERVICE_INFO = _BLUETOOTH_LOCAL_SERVICE_INFO;
  {$EXTERNALSYM BLUETOOTH_LOCAL_SERVICE_INFO}
  PBLUETOOTH_LOCAL_SERVICE_INFO = ^_BLUETOOTH_LOCAL_SERVICE_INFO;
  {$EXTERNALSYM PBLUETOOTH_LOCAL_SERVICE_INFO}

  TBluetoothLocalServiceInfo = _BLUETOOTH_LOCAL_SERVICE_INFO;
  PBluetoothLocalServiceInfo = ^TBluetoothLocalServiceInfo;


// ***************************************************************************
//
//  Radio Enumeration
//
// ***************************************************************************

type
  _BLUETOOTH_FIND_RADIO_PARAMS = record
    dwSize: DWORD;
  end;
  {$EXTERNALSYM _BLUETOOTH_FIND_RADIO_PARAMS}
  BLUETOOTH_FIND_RADIO_PARAMS = _BLUETOOTH_FIND_RADIO_PARAMS;
  {$EXTERNALSYM BLUETOOTH_FIND_RADIO_PARAMS}
  TBluetoothFindRadioParams = _BLUETOOTH_FIND_RADIO_PARAMS;
  PBluetoothFindRadioParams = ^TBluetoothFindRadioParams;

  HBLUETOOTH_RADIO_FIND = THandle;
  {$EXTERNALSYM HBLUETOOTH_RADIO_FIND}
  TBluetoothRadioFind = HBLUETOOTH_RADIO_FIND;

function BluetoothFindFirstRadio(var pbtfrp: TBluetoothFindRadioParams; var phRadio: THandle): TBluetoothRadioFind; stdcall;
{$EXTERNALSYM BluetoothFindFirstRadio}

function BluetoothFindNextRadio(hFind: TBluetoothRadioFind; var phRadio: THandle): BOOL; stdcall;
{$EXTERNALSYM BluetoothFindNextRadio}

function BluetoothFindRadioClose(hFind: TBluetoothRadioFind): BOOL; stdcall;
{$EXTERNALSYM BluetoothFindRadioClose}


// ***************************************************************************
//
//  Radio Information
//
// ***************************************************************************

type
  _BLUETOOTH_RADIO_INFO = record
    dwSize: DWORD;                     // Size, in bytes, of this entire data structure
    address: TBluetoothAddress;        // Address of the local radio
    szName: array [0..BLUETOOTH_MAX_NAME_SIZE - 1] of WCHAR;   // Name of the local radio
    ulClassofDevice: ULONG;            // Class of device for the local radio
    lmpSubversion: USHORT;             // lmpSubversion, manufacturer specifc.
    manufacturer: USHORT;              // Manufacturer of the radio, BTH_MFG_Xxx value.  For the most up to date
                                       // list, goto the Bluetooth specification website and get the Bluetooth
                                       // assigned numbers document.
  end;
  {$EXTERNALSYM _BLUETOOTH_RADIO_INFO}
  BLUETOOTH_RADIO_INFO = _BLUETOOTH_RADIO_INFO;
  {$EXTERNALSYM BLUETOOTH_RADIO_INFO}
  PBLUETOOTH_RADIO_INFO = ^BLUETOOTH_RADIO_INFO;
  {$EXTERNALSYM PBLUETOOTH_RADIO_INFO}
  TBluetoothRadioInfo = _BLUETOOTH_RADIO_INFO;
  PTBluetoothRadioInfo = ^TBluetoothRadioInfo;


// ***************************************************************************
//
//  Device Information Stuctures
//
// ***************************************************************************

function BluetoothGetRadioInfo(hRadio: THandle; var pRadioInfo: TBluetoothRadioInfo): DWORD; stdcall;
{$EXTERNALSYM BluetoothGetRadioInfo}

type
  _BLUETOOTH_DEVICE_INFO = record
    dwSize: DWORD;                            //  size, in bytes, of this structure - must be the sizeof(BLUETOOTH_DEVICE_INFO)
    Address: BLUETOOTH_ADDRESS;               //  Bluetooth address
    ulClassofDevice: ULONG;                   //  Bluetooth "Class of Device"
    fConnected: BOOL;                         //  Device connected/in use
    fRemembered: BOOL;                        //  Device remembered
    fAuthenticated: BOOL;                     //  Device authenticated/paired/bonded
    stLastSeen: SYSTEMTIME;                   //  Last time the device was seen
    stLastUsed: SYSTEMTIME;                   //  Last time the device was used for other than RNR, inquiry, or SDP
    szName: array [0..BLUETOOTH_MAX_NAME_SIZE - 1] of WCHAR;  //  Name of the device
  end;
  {$EXTERNALSYM _BLUETOOTH_DEVICE_INFO}
  BLUETOOTH_DEVICE_INFO = _BLUETOOTH_DEVICE_INFO;
  {$EXTERNALSYM BLUETOOTH_DEVICE_INFO}
  PBLUETOOTH_DEVICE_INFO = ^BLUETOOTH_DEVICE_INFO;
  {$EXTERNALSYM PBLUETOOTH_DEVICE_INFO}

  TBluetoothDeviceInfo = BLUETOOTH_DEVICE_INFO;
  PBluetoothDeviceInfo = ^TBluetoothDeviceInfo;


//
// Support added after KB942567
//
  _BLUETOOTH_AUTHENTICATION_METHOD = (BLUETOOTH_AUTHENTICATION_METHOD_LEGACY = $1,
    BLUETOOTH_AUTHENTICATION_METHOD_OOB,
    BLUETOOTH_AUTHENTICATION_METHOD_NUMERIC_COMPARISON,
    BLUETOOTH_AUTHENTICATION_METHOD_PASSKEY_NOTIFICATION,
    BLUETOOTH_AUTHENTICATION_METHOD_PASSKEY);
  {$EXTERNALSYM _BLUETOOTH_AUTHENTICATION_METHOD}
  BLUETOOTH_AUTHENTICATION_METHOD = _BLUETOOTH_AUTHENTICATION_METHOD;
  {$EXTERNALSYM BLUETOOTH_AUTHENTICATION_METHOD}
  PBLUETOOTH_AUTHENTICATION_METHOD = ^BLUETOOTH_AUTHENTICATION_METHOD;
  {$EXTERNALSYM BLUETOOTH_AUTHENTICATION_METHOD}

  TBluetoothAuthenticationMethod = _BLUETOOTH_AUTHENTICATION_METHOD;
  PBluetoothAuthenticationMethod = ^TBluetoothAuthenticationMethod;


  _BLUETOOTH_IO_CAPABILITY = (BLUETOOTH_IO_CAPABILITY_DISPLAYONLY = $00,
    BLUETOOTH_IO_CAPABILITY_DISPLAYYESNO    = $01,
    BLUETOOTH_IO_CAPABILITY_KEYBOARDONLY    = $02,
    BLUETOOTH_IO_CAPABILITY_NOINPUTNOOUTPUT = $03,
    BLUETOOTH_IO_CAPABILITY_UNDEFINED       = $ff);
  {$EXTERNALSYM _BLUETOOTH_IO_CAPABILITY}
  BLUETOOTH_IO_CAPABILITY = _BLUETOOTH_IO_CAPABILITY;

  TBluetoothIOCapability = _BLUETOOTH_IO_CAPABILITY;
  PBluetoothIOCapability = ^TBluetoothIOCapability;


  _BLUETOOTH_AUTHENTICATION_REQUIREMENTS = (BLUETOOTH_MITM_ProtectionNotRequired = $0,
    BLUETOOTH_MITM_ProtectionRequired                  = $01,
    BLUETOOTH_MITM_ProtectionNotRequiredBonding        = $02,
    BLUETOOTH_MITM_ProtectionRequiredBonding           = $03,
    BLUETOOTH_MITM_ProtectionNotRequiredGeneralBonding = $04,
    BLUETOOTH_MITM_ProtectionRequiredGeneralBonding    = $05,
    BLUETOOTH_MITM_ProtectionNotDefined                = $ff);
  {$EXTERNALSYM _BLUETOOTH_AUTHENTICATION_REQUIREMENTS}
  BLUETOOTH_AUTHENTICATION_REQUIREMENTS = _BLUETOOTH_AUTHENTICATION_REQUIREMENTS;
  {$EXTERNALSYM BLUETOOTH_AUTHENTICATION_REQUIREMENTS}

  TBluetoothAuthenticationRequirements = _BLUETOOTH_AUTHENTICATION_REQUIREMENTS;
  PBluetoothAuthenticationRequirements = ^TBluetoothAuthenticationRequirements;


  _BLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS = record
    deviceInfo: TBluetoothDeviceInfo;
    authenticationMethod: TBluetoothAuthenticationMethod;
    ioCapability: TBluetoothIOCapability;
    authenticationRequirements: TBluetoothAuthenticationRequirements;
    case Integer of
      0: (Numeric_Value: ULONG);
      1: (Passkey: ULONG);
  end;
  {$EXTERNALSYM _BLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS}
  BLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS = _BLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS;
  {$EXTERNALSYM BLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS}
  TBluetoothAuthenticationCallbackParams = _BLUETOOTH_AUTHENTICATION_CALLBACK_PARAMS;

// ***************************************************************************
//
//  Device Enumeration
//
// ***************************************************************************

type
  _BLUETOOTH_DEVICE_SEARCH_PARAMS = record
    dwSize: DWORD;                //  IN  sizeof this structure
    fReturnAuthenticated: BOOL;   //  IN  return authenticated devices
    fReturnRemembered: BOOL;      //  IN  return remembered devices
    fReturnUnknown: BOOL;         //  IN  return unknown devices
    fReturnConnected: BOOL;       //  IN  return connected devices
    fIssueInquiry: BOOL;          //  IN  issue a new inquiry
    cTimeoutMultiplier: UCHAR;    //  IN  timeout for the inquiry, expressed in increments of 1.28 seconds
    hRadio: THandle;              //  IN  handle to radio to enumerate - NULL == all radios will be searched
  end;
  {$EXTERNALSYM _BLUETOOTH_DEVICE_SEARCH_PARAMS}
  BLUETOOTH_DEVICE_SEARCH_PARAMS = _BLUETOOTH_DEVICE_SEARCH_PARAMS;
  {$EXTERNALSYM BLUETOOTH_DEVICE_SEARCH_PARAMS}
  PBLUETOOTH_DEVICE_SEARCH_PARAMS = ^_BLUETOOTH_DEVICE_SEARCH_PARAMS;
  {$EXTERNALSYM PBLUETOOTH_DEVICE_INFO}

  TBluetoothDeviceSearchParams = _BLUETOOTH_DEVICE_SEARCH_PARAMS;
  PBluetoothDeviceSearchParams = ^TBluetoothDeviceSearchParams;


  HBLUETOOTH_DEVICE_FIND = THandle;
  {$EXTERNALSYM HBLUETOOTH_DEVICE_FIND}
  TBluetoothDeviceFind = HBLUETOOTH_DEVICE_FIND;

function BluetoothFindFirstDevice(var pbtsp: TBluetoothDeviceSearchParams; var pbtdi: TBluetoothDeviceInfo): TBluetoothDeviceFind; stdcall;
{$EXTERNALSYM BluetoothFindFirstDevice}

function BluetoothFindNextDevice(hFind: TBluetoothDeviceFind; var pbtdi: TBluetoothDeviceInfo): BOOL; stdcall;
{$EXTERNALSYM BluetoothFindNextDevice}

function BluetoothFindDeviceClose(hFind: TBluetoothDeviceFind): BOOL; stdcall;
{$EXTERNALSYM BluetoothFindDeviceClose}

function BluetoothGetDeviceInfo(hRadio: THandle; var pbtdi: TBluetoothDeviceInfo): DWORD; stdcall;
{$EXTERNALSYM BluetoothGetDeviceInfo}

function BluetoothUpdateDeviceRecord(var pbtdi: TBluetoothDeviceInfo): DWORD; stdcall;
{$EXTERNALSYM BluetoothUpdateDeviceRecord}

function BluetoothRemoveDevice(var pAddress: TBluetoothAddress): DWORD; stdcall;
{$EXTERNALSYM BluetoothRemoveDevice}

type
  _BLUETOOTH_COD_PAIRS = record
    ulCODMask: ULONG;                          //  ClassOfDevice mask to compare
    pcszDescription: LPCWSTR;                  //  Descriptive string of mask
  end;
  {$EXTERNALSYM _BLUETOOTH_COD_PAIRS}
  BLUETOOTH_COD_PAIRS = _BLUETOOTH_COD_PAIRS;
  {$EXTERNALSYM BLUETOOTH_COD_PAIRS}

  TBluetoothCodPairs = _BLUETOOTH_COD_PAIRS;
  PBluetoothCodPairs = ^TBluetoothCodPairs;

  PFN_DEVICE_CALLBACK = function(pvParam: LPVOID; pDevice: PBluetoothDeviceInfo): BOOL; stdcall;
  {$EXTERNALSYM PFN_DEVICE_CALLBACK}
  TDeviceCallback = PFN_DEVICE_CALLBACK;

  _BLUETOOTH_SELECT_DEVICE_PARAMS = record
    dwSize: DWORD;                            //  IN  sizeof this structure
    cNumOfClasses: ULONG;                     //  IN  Number in prgClassOfDevice - if ZERO search for all devices
    prgClassOfDevices: TBluetoothCodPairs;    //  IN  Array of CODs to find.
    pszInfo: LPWSTR;                          //  IN  If not NULL, sets the "information" text
    hwndParent: HWND;                         //  IN  parent window - NULL == no parent
    fForceAuthentication: BOOL;               //  IN  If TRUE, authenication will be forced before returning
    fShowAuthenticated: BOOL;                 //  IN  If TRUE, authenticated devices will be shown in the picker
    fShowRemembered: BOOL;                    //  IN  If TRUE, remembered devices will be shown in the picker
    fShowUnknown: BOOL;                       //  IN  If TRUE, unknown devices that are not authenticated or "remember" will be shown.
    fAddNewDeviceWizard: BOOL;                //  IN  If TRUE, invokes the add new device wizard.
    fSkipServicesPage: BOOL;                  //  IN  If TRUE, skips the "Services" page in the wizard.
    pfnDeviceCallback: TDeviceCallback;       //  IN  If non-NULL, a callback that will be called for each device. If the
                                              //      the callback returns TRUE, the item will be added. If the callback is
                                              //      is FALSE, the item will not be shown.
    pvParam: LPVOID;                          //  IN  Parameter to be passed to pfnDeviceCallback as the pvParam.
    cNumDevices: DWORD;                       //  IN  number calles wants - ZERO == no limit.
                                              //  OUT the number of devices returned.
    pDevices: PBluetoothDeviceInfo;           //  OUT pointer to an array for BLUETOOTH_DEVICE_INFOs.
                                              //      call BluetoothSelectDevicesFree() to free
  end;
  {$EXTERNALSYM _BLUETOOTH_SELECT_DEVICE_PARAMS}
  BLUETOOTH_SELECT_DEVICE_PARAMS = _BLUETOOTH_SELECT_DEVICE_PARAMS;
  {$EXTERNALSYM BLUETOOTH_SELECT_DEVICE_PARAMS}

  TBluetoothSelectDeviceParams = BLUETOOTH_SELECT_DEVICE_PARAMS;
  PBluetoothSelectDeviceParams = ^BLUETOOTH_SELECT_DEVICE_PARAMS;


function BluetoothSelectDevices(pbtsdp: PBluetoothSelectDeviceParams): BOOL; stdcall;
{$EXTERNALSYM BluetoothSelectDevices}

function BluetoothSelectDevicesFree(pbtsdp: PBluetoothSelectDeviceParams): BOOL; stdcall;
{$EXTERNALSYM BluetoothSelectDevicesFree}

function BluetoothDisplayDeviceProperties(hwndParent: HWND; pbtdi: PBluetoothDeviceInfo): BOOL; stdcall;
{$EXTERNALSYM BluetoothDisplayDeviceProperties}

function BluetoothAuthenticateDevice(hwndParent: HWND; hRadio: THandle; var pbtbi: TBluetoothDeviceInfo; pszPasskey: PWideChar;
  ulPasskeyLength: ULONG): DWORD; stdcall;
{$EXTERNALSYM BluetoothAuthenticateDevice}

//
// Common header for all PIN related structures
//
type
  _BLUETOOTH_PIN_INFO = record
    pin: array [0..BTH_MAX_PIN_SIZE - 1] of UCHAR;
    pinLength: UCHAR;
  end;
  {$EXTERNALSYM _BLUETOOTH_PIN_INFO}
  BLUETOOTH_PIN_INFO = _BLUETOOTH_PIN_INFO;
  {$EXTERNALSYM BLUETOOTH_PIN_INFO}
  PBLUETOOTH_PIN_INFO = ^_BLUETOOTH_PIN_INFO;
  {$EXTERNALSYM PBLUETOOTH_PIN_INFO}

  TBluetoothPinInfo = _BLUETOOTH_PIN_INFO;
  PBluetoothPinInfo = ^TBluetoothPinInfo;

  _BLUETOOTH_OOB_DATA_INFO = record
    C: array [0..15] of UCHAR;
    R: array [0..15] of UCHAR;
  end;
  {$EXTERNALSYM _BLUETOOTH_OOB_DATA_INFO}
  BLUETOOTH_OOB_DATA_INFO = _BLUETOOTH_OOB_DATA_INFO;
  {$EXTERNALSYM BLUETOOTH_OOB_DATA_INFO}
  PBLUETOOTH_OOB_DATA_INFO = ^_BLUETOOTH_OOB_DATA_INFO;
  {$EXTERNALSYM PBLUETOOTH_PIN_INFO}

  TBluetoothOOBDataInfo = _BLUETOOTH_PIN_INFO;
  PBluetoothOOBDataInfo = ^TBluetoothOOBDataInfo;

  _BLUETOOTH_NUMERIC_COMPARISON_INFO = record
    NumericValue: ULONG;
  end;
  {$EXTERNALSYM _BLUETOOTH_NUMERIC_COMPARISON_INFO}
  BLUETOOTH_NUMERIC_COMPARISON_INFO = _BLUETOOTH_NUMERIC_COMPARISON_INFO;
  {$EXTERNALSYM BLUETOOTH_NUMERIC_COMPARISON_INFO}
  PBLUETOOTH_NUMERIC_COMPARISON_INFO = ^_BLUETOOTH_NUMERIC_COMPARISON_INFO;
  {$EXTERNALSYM PBLUETOOTH_NUMERIC_COMPARISON_INFO}

  TBluetoothNumericComparisonInfo = _BLUETOOTH_NUMERIC_COMPARISON_INFO;
  PBluetoothNumericComparisonInfo = ^TBluetoothNumericComparisonInfo;

  _BLUETOOTH_PASSKEY_INFO = record
    passkey: ULONG;
  end;
  {$EXTERNALSYM _BLUETOOTH_PASSKEY_INFO}
  BLUETOOTH_PASSKEY_INFO = _BLUETOOTH_PASSKEY_INFO;
  {$EXTERNALSYM BLUETOOTH_PASSKEY_INFO}
  PBLUETOOTH_PASSKEY_INFO = ^_BLUETOOTH_PASSKEY_INFO;
  {$EXTERNALSYM PBLUETOOTH_PASSKEY_INFO}

  TBluetoothPassKeyInfo = _BLUETOOTH_PASSKEY_INFO;
  PBluetoothPassKeyInfo = ^TBluetoothPassKeyInfo;

function BluetoothAuthenticateDeviceEx(hwndParentIn: HWND; hRadioIn: THandle; var pbtdiInout: TBluetoothDeviceInfo;
  pbtOobData: PBluetoothOOBDataInfo; authenticationRequirement: TAuthenticationRequirements): DWORD; stdcall;

function BluetoothAuthenticateMultipleDevices(hwndParent: HWND; hRadio: THandle; cDevices: DWORD;
  pbtdi: PBluetoothDeviceInfo): DWORD; stdcall;
{$EXTERNALSYM BluetoothAuthenticateMultipleDevices}

// ***************************************************************************
//
//  Bluetooth Services
//
// ***************************************************************************

const
  BLUETOOTH_SERVICE_DISABLE  = $00;
  {$EXTERNALSYM BLUETOOTH_SERVICE_DISABLE}
  BLUETOOTH_SERVICE_ENABLE   = $01;
  {$EXTERNALSYM BLUETOOTH_SERVICE_ENABLE}
  BLUETOOTH_SERVICE_MASK     = BLUETOOTH_SERVICE_ENABLE or BLUETOOTH_SERVICE_DISABLE;
  {$EXTERNALSYM BLUETOOTH_SERVICE_MASK}

function BluetoothSetServiceState(
    hRadio: THandle;
    pbtdi: PBluetoothDeviceInfo;
    const pGuidService: TGUID;
    dwServiceFlags: DWORD): DWORD; stdcall;
{$EXTERNALSYM BluetoothSetServiceState}

function BluetoothEnumerateInstalledServices(
    hRadio: THandle;
    var pbtdi: TBluetoothDeviceInfo;
    var pcServices: DWORD;
    pGuidServices: PGUID): DWORD; stdcall;
{$EXTERNALSYM BluetoothEnumerateInstalledServices}

function BluetoothEnableDiscovery(hRadio: THandle; fEnabled: BOOL): BOOL; stdcall;
{$EXTERNALSYM BluetoothEnableDiscovery}

function BluetoothIsDiscoverable(hRadio: THandle): BOOL; stdcall;
{$EXTERNALSYM BluetoothIsDiscoverable}

function BluetoothEnableIncomingConnections(hRadio: THandle; fEnabled: BOOL): BOOL; stdcall;
{$EXTERNALSYM BluetoothEnableIncomingConnections}

function BluetoothIsConnectable(hRadio: THandle): BOOL; stdcall;
{$EXTERNALSYM BluetoothIsConnectable}

// ***************************************************************************
//
//  Authentication Registration
//
// ***************************************************************************

type
  HBLUETOOTH_AUTHENTICATION_REGISTRATION = THandle;
  {$EXTERNALSYM HBLUETOOTH_AUTHENTICATION_REGISTRATION}

  PFN_AUTHENTICATION_CALLBACK = function(pvParam: Pointer; pDevice: PBluetoothDeviceInfo): BOOL; stdcall;
  {$EXTERNALSYM PFN_AUTHENTICATION_CALLBACK}

function BluetoothRegisterForAuthentication(
    pbtdi: PBluetoothDeviceInfo;
    var phRegHandle: HBLUETOOTH_AUTHENTICATION_REGISTRATION;
    pfnCallback: PFN_AUTHENTICATION_CALLBACK;
    pvParam: Pointer): DWORD; stdcall;
{$EXTERNALSYM BluetoothRegisterForAuthentication}

function BluetoothUnregisterAuthentication(hRegHandle: HBLUETOOTH_AUTHENTICATION_REGISTRATION): BOOL; stdcall;
{$EXTERNALSYM BluetoothUnregisterAuthentication}

function BluetoothSendAuthenticationResponse(
    hRadio: THandle;
    pbtdi: PBluetoothDeviceInfo;
    pszPasskey: LPWSTR): DWORD; stdcall;
{$EXTERNALSYM BluetoothSendAuthenticationResponse}


// ***************************************************************************
//
//  SDP Parsing Functions
//
// ***************************************************************************
type
  TSpdElementDataString = record
    // raw string buffer, may not be encoded as ANSI, use
    // BluetoothSdpGetString to convert the value if it is described
    // by the base language attribute ID list
    value: LPBYTE;
    // raw length of the string, may not be NULL terminuated
    length: ULONG;
  end;

  TSpdElementDataUrl = record
    value: LPBYTE;
    length: ULONG;
  end;

  TSpdElementDataSequence = record
    // raw sequence, starts at sequence element header
    value: LPBYTE;
    // raw sequence length
    length: ULONG;
  end;

  // type == SDP_TYPE_ALTERNATIVE
  TSpdElementDataAlternative = record
    // raw alternative, starts at alternative element header
    value: LPBYTE;
    // raw alternative length
    length: ULONG;
  end;

  _SDP_ELEMENT_DATA = record
    //
    // Enumeration of SDP element types.  Generic element types will have a
    // specificType value other then SDP_ST_NONE.  The generic types are:
    // o SDP_TYPE_UINT
    // o SDP_TYPE_INT
    // o SDP_TYPE_UUID
    //
    &type: SDP_TYPE;

    //
    // Specific types for the generic SDP element types.
    //
    specificType: SDP_SPECIFICTYPE;

    //
    // Union of all possible data types.  type and specificType will indicate
    // which field is valid.  For types which do not have a valid specificType,
    // specific type will be SDP_ST_NONE.
    //
    case Integer of
        // type == SDP_TYPE_INT
        0: (int128: SDP_LARGE_INTEGER_16);        // specificType == SDP_ST_INT128
        1: (int64: LONGLONG);                     // specificType == SDP_ST_INT64
        2: (int32: Integer);                      // specificType == SDP_ST_INT32
        3: (int16: SHORT);                        // specificType == SDP_ST_INT16
        4: (int8: Byte);                          // specificType == SDP_ST_INT8

        // type == SDP_TYPE_UINT
        5: (uint128: SDP_ULARGE_INTEGER_16);      // specificType == SDP_ST_UINT128
        6: (uint64: Int64);                       // specificType == SDP_ST_UINT64
        7: (uint32: ULONG);                       // specificType == SDP_ST_UINT32
        8: (uint16: USHORT);                      // specificType == SDP_ST_UINT16
        9: (uint8: UCHAR);                        // specificType == SDP_ST_UINT8

        // type == SDP_TYPE_BOOLEAN
        10: (booleanVal: UCHAR);

        // type == SDP_TYPE_UUID
        11: (uuid128: TGUID);                     // specificType == SDP_ST_UUID128
        12: (uuid32: ULONG);                      // specificType == SDP_ST_UUID32
        13: (uuid16: USHORT);                     // specificType == SDP_ST_UUID32

        // type == SDP_TYPE_STRING
        14: (&string: TSpdElementDataString);
        // type == SDP_TYPE_URL
        15: (url: TSpdElementDataUrl);

        // type == SDP_TYPE_SEQUENCE
        16: (sequence: TSpdElementDataSequence);

        // type == SDP_TYPE_ALTERNATIVE
        17: (alternative: TSpdElementDataAlternative);
  end;
  {$EXTERNALSYM _SDP_ELEMENT_DATA}
  SDP_ELEMENT_DATA = _SDP_ELEMENT_DATA;
  {$EXTERNALSYM SDP_ELEMENT_DATA}
  PSDP_ELEMENT_DATA = ^SDP_ELEMENT_DATA;
  {$EXTERNALSYM PSDP_ELEMENT_DATA}

  TSdpElementData = _SDP_ELEMENT_DATA;
  PSdpElementData = ^TSdpElementData;


function BluetoothSdpGetElementData(pSdpStream: LPBYTE; cbSdpStreamLength: ULONG; var pData: TSdpElementData): DWORD; stdcall;
{$EXTERNALSYM BluetoothSdpGetElementData}

type
  HBLUETOOTH_CONTAINER_ELEMENT = THandle;
  {$EXTERNALSYM HBLUETOOTH_CONTAINER_ELEMENT}

function BluetoothSdpGetContainerElementData(pContainerStream: LPBYTE; cbContainerLength: ULONG;
  var pElement: HBLUETOOTH_CONTAINER_ELEMENT; var pData: TSdpElementData): DWORD; stdcall;
{$EXTERNALSYM BluetoothSdpGetContainerElementData}

function BluetoothSdpGetAttributeValue(pRecordStream: LPBYTE; cbRecordLength: ULONG; usAttributeId: USHORT;
    var pAttributeData: TSdpElementData): DWORD; stdcall;
{$EXTERNALSYM BluetoothSdpGetAttributeValue}

//
// These three fields correspond one to one with the triplets defined in the
// SDP specification for the language base attribute ID list.
//

type
  _SDP_STRING_TYPE_DATA = record
    //
    // How the string is encoded according to ISO 639:1988 (E/F): "Code
    // for the representation of names of languages".
    //
    encoding: USHORT;

    //
    // MIBE number from IANA database
    //
    mibeNum: USHORT;

    //
    // The base attribute where the string is to be found in the record
    //
    attributeId: USHORT;
  end;
  {$EXTERNALSYM _SDP_STRING_TYPE_DATA}
  SDP_STRING_TYPE_DATA = _SDP_STRING_TYPE_DATA;
  {$EXTERNALSYM SDP_STRING_TYPE_DATA}
  PSDP_STRING_TYPE_DATA = ^SDP_STRING_TYPE_DATA;
  {$EXTERNALSYM PSDP_STRING_TYPE_DATA}

  TSdpStringTypeData = _SDP_STRING_TYPE_DATA;
  PSdpStringTypeData = ^TSdpStringTypeData;

function BluetoothSdpGetString(pRecordStream: LPBYTE; cbRecordLength: ULONG; pStringData: PSdpStringTypeData;
    usStringOffset: USHORT; pszString: LPWSTR; var pcchStringLength: ULONG): DWORD; stdcall;
{$EXTERNALSYM BluetoothSdpGetString}

// ***************************************************************************
//
//  Raw Attribute  Enumeration
//
// ***************************************************************************

type
  PFN_BLUETOOTH_ENUM_ATTRIBUTES_CALLBACK = function(uAttribId: ULONG; pValueStream: LPBYTE; cbStreamSize: ULONG;
    pvParam: LPVOID): BOOL; stdcall;
  {$EXTERNALSYM PFN_BLUETOOTH_ENUM_ATTRIBUTES_CALLBACK}
  TBluetoothEnumAttributesCallback = PFN_BLUETOOTH_ENUM_ATTRIBUTES_CALLBACK;

function BluetoothSdpEnumAttributes(pSDPStream: LPBYTE; cbStreamSize: ULONG; pfnCallback: TBluetoothEnumAttributesCallback;
    pvParam: LPVOID): BOOL; stdcall;
{$EXTERNALSYM BluetoothSdpEnumAttributes}

function BluetoothEnumAttributes(pSDPStream: LPBYTE; cbStreamSize: ULONG; pfnCallback: TBluetoothEnumAttributesCallback;
    pvParam: LPVOID): BOOL; stdcall;
{$EXTERNALSYM BluetoothEnumAttributes}

function BluetoothSetLocalServiceInfo(hRadioIn: THandle; pClassGuid: PGUID; ulInstance: ULONG;
    var pServiceInfoIn: TBluetoothLocalServiceInfo): DWORD; stdcall;
{$EXTERNALSYM BluetoothSetLocalServiceInfo}

function BluetoothIsVersionAvailable(MajorVersion: UCHAR; MinorVersion: UCHAR): BOOL; stdcall;
{$EXTERNALSYM BluetoothIsVersionAvailable}

///////////////////////////////
///
///  End BluetoothAPIs.h
///
///////////////////////////////

implementation

function GET_NAP(_bth_addr: BTH_ADDR): USHORT;
begin
  Result := ((_bth_addr and NAP_MASK) shr NAP_BIT_OFFSET);
end;

function GET_SAP(_bth_addr: BTH_ADDR): ULONG;
begin
  Result := ((_bth_addr and SAP_MASK) shr SAP_BIT_OFFSET);
end;

function SET_NAP(_nap: USHORT): UInt64;
begin
  Result := (_nap shl NAP_BIT_OFFSET);
end;

function SET_SAP(_sap: ULONG): UInt64;
begin
  Result := (_sap shl SAP_BIT_OFFSET);
end;

function SET_NAP_SAP(_nap: USHORT; _sap: ULONG): UInt64;
begin
  Result := (SET_NAP(_nap) or SET_SAP(_sap));
end;

function GET_COD_LAN_MINOR(_cod: DWORD): DWORD;
begin
  Result := ((_cod and COD_LAN_MINOR_MASK) shr COD_MINOR_BIT_OFFSET);
end;

function GET_COD_LAN_ACCESS(_cod: DWORD): DWORD;
begin
  Result := ((_cod and COD_LAN_ACCESS_MASK) shr COD_LAN_ACCESS_BIT_OFFSET);
end;

function BTH_ERROR(_btStatus: BTHSTATUS): BOOL;
begin
  Result := _btStatus <> BTH_ERROR_SUCCESS;
end;

function BTH_SUCCESS(_btStatus: BTHSTATUS): BOOL;
begin
  Result := _btStatus = BTH_ERROR_SUCCESS;
end;

function GET_BITS(Field, Offset, Mask: Integer): Integer;
begin
  Result := (Field shr Offset) and Mask;
end;

function GET_BIT(field,offset: Integer): Integer;
begin
  Result := GET_BITS(Field, Offset, $1);
end;

function LMP_3_SLOT_PACKETS(X: Integer): Integer;
begin
  Result := GET_BIT(x, 0);
end;

function LMP_5_SLOT_PACKETS(X: Integer): Integer;
begin
  Result := GET_BIT(x, 1);
end;

function LMP_ENCRYPTION(X: Integer): Integer;
begin
  Result := GET_BIT(x, 2);
end;

function LMP_SLOT_OFFSET(X: Integer): Integer;
begin
  Result := GET_BIT(x, 3);
end;

function LMP_TIMING_ACCURACY(X: Integer): Integer;
begin
  Result := GET_BIT(x, 4);
end;

function LMP_SWITCH(X: Integer): Integer;
begin
  Result := GET_BIT(x, 5);
end;

function LMP_HOLD_MODE(X: Integer): Integer;
begin
  Result := GET_BIT(x, 6);
end;

function LMP_SNIFF_MODE(X: Integer): Integer;
begin
  Result := GET_BIT(x, 7);
end;

function LMP_PARK_MODE(X: Integer): Integer;
begin
  Result := GET_BIT(x, 8);
end;

function LMP_RSSI(X: Integer): Integer;
begin
  Result := GET_BIT(x, 9);
end;

function LMP_CHANNEL_QUALITY_DRIVEN_MODE(X: Integer): Integer;
begin
  Result := GET_BIT(x, 10);
end;

function LMP_SCO_LINK(X: Integer): Integer;
begin
  Result := GET_BIT(x, 11);
end;

function LMP_HV2_PACKETS(X: Integer): Integer;
begin
  Result := GET_BIT(x, 12);
end;

function LMP_HV3_PACKETS(X: Integer): Integer;
begin
  Result := GET_BIT(x, 13);
end;

function LMP_MU_LAW_LOG(X: Integer): Integer;
begin
  Result := GET_BIT(x, 14);
end;

function LMP_A_LAW_LOG(X: Integer): Integer;
begin
  Result := GET_BIT(x, 15);
end;

function LMP_CVSD(X: Integer): Integer;
begin
  Result := GET_BIT(x, 16);
end;

function LMP_PAGING_SCHEME(X: Integer): Integer;
begin
  Result := GET_BIT(x, 17);
end;

function LMP_POWER_CONTROL(X: Integer): Integer;
begin
  Result := GET_BIT(x, 18);
end;

function LMP_TRANSPARENT_SCO_DATA(X: Integer): Integer;
begin
  Result := GET_BIT(x, 19);
end;

function LMP_FLOW_CONTROL_LAG(X: Integer): Integer;
begin
  Result := GET_BITS(x, 20, $3);
end;

function GET_COD_FORMAT(_cod: BTH_COD): BTH_COD;
begin
  Result := (_cod and COD_FORMAT_MASK) shr COD_FORMAT_BIT_OFFSET;
end;

function GET_COD_MINOR(_cod: BTH_COD): BTH_COD;
begin
  Result := (_cod and COD_MINOR_MASK) shr COD_MINOR_BIT_OFFSET;
end;

function GET_COD_MAJOR(_cod: BTH_COD): BTH_COD;
begin
  Result := (_cod and COD_MAJOR_MASK) shr COD_MAJOR_BIT_OFFSET;
end;

function GET_COD_SERVICE(_cod: BTH_COD): BTH_COD;
begin
  Result := (_cod and COD_SERVICE_MASK) shr COD_SERVICE_BIT_OFFSET;
end;

procedure SET_COD_MINOR(var _cod: BTH_COD; _minor: BTH_COD);
begin
  _cod := (_cod and not COD_MINOR_MASK) or (_minor shl COD_MINOR_BIT_OFFSET);
end;

procedure SET_COD_MAJOR(var _cod: BTH_COD; _major: BTH_COD);
begin
  _cod := (_cod and not COD_MAJOR_MASK) or (_major shl COD_MAJOR_BIT_OFFSET);
end;

procedure SET_COD_SERVICE(var _cod: BTH_COD; _service: BTH_COD);
begin
  _cod := (_cod and not COD_SERVICE_MASK) or (_service shl COD_SERVICE_BIT_OFFSET);
end;

function MSC_SET_BREAK_LENGTH(var b: Int32; l: Int32): Int32;
begin
  b := (b and $03) or ((l and $0f) shl 4);
  Result := b;
end;


const
  bthapi = 'bthprops.cpl';

{$WARN SYMBOL_PLATFORM OFF}
function IsMITMProtectionRequired; external bthapi name 'IsMITMProtectionRequired' delayed;
function BluetoothFindFirstRadio; external bthapi name 'BluetoothFindFirstRadio' delayed;
function BluetoothFindNextRadio; external bthapi name 'BluetoothFindNextRadio' delayed;
function BluetoothFindRadioClose; external bthapi name 'BluetoothFindRadioClose' delayed;
function BluetoothGetRadioInfo; external bthapi name 'BluetoothGetRadioInfo' delayed;
function BluetoothFindFirstDevice; external bthapi name 'BluetoothFindFirstDevice' delayed;
function BluetoothFindNextDevice; external bthapi name 'BluetoothFindNextDevice' delayed;
function BluetoothFindDeviceClose; external bthapi name 'BluetoothFindDeviceClose' delayed;
function BluetoothGetDeviceInfo; external bthapi name 'BluetoothGetDeviceInfo' delayed;
function BluetoothUpdateDeviceRecord; external bthapi name 'BluetoothUpdateDeviceRecord' delayed;
function BluetoothRemoveDevice; external bthapi name 'BluetoothRemoveDevice' delayed;
function BluetoothSelectDevices; external bthapi name 'BluetoothSelectDevices' delayed;
function BluetoothSelectDevicesFree; external bthapi name 'BluetoothSelectDevicesFree' delayed;
function BluetoothDisplayDeviceProperties; external bthapi name 'BluetoothDisplayDeviceProperties' delayed;
function BluetoothAuthenticateDevice; external bthapi name 'BluetoothAuthenticateDevice' delayed;
function BluetoothAuthenticateDeviceEx; external bthapi name 'BluetoothAuthenticateDeviceEx' delayed;
function BluetoothAuthenticateMultipleDevices; external bthapi name 'BluetoothAuthenticateMultipleDevices' delayed;
function BluetoothSetServiceState; external bthapi name 'BluetoothSetServiceState' delayed;
function BluetoothEnumerateInstalledServices; external bthapi name 'BluetoothEnumerateInstalledServices' delayed;
function BluetoothEnableDiscovery; external bthapi name 'BluetoothEnableDiscovery' delayed;
function BluetoothIsDiscoverable; external bthapi name 'BluetoothIsDiscoverable' delayed;
function BluetoothEnableIncomingConnections; external bthapi name 'BluetoothEnableIncomingConnections' delayed;
function BluetoothIsConnectable; external bthapi name 'BluetoothIsConnectable' delayed;
function BluetoothRegisterForAuthentication; external bthapi name 'BluetoothRegisterForAuthentication' delayed;
function BluetoothUnregisterAuthentication; external bthapi name 'BluetoothUnregisterAuthentication' delayed;
function BluetoothSendAuthenticationResponse; external bthapi name 'BluetoothSendAuthenticationResponse' delayed;
function BluetoothSdpGetElementData; external bthapi name 'BluetoothSdpGetElementData' delayed;
function BluetoothSdpGetContainerElementData; external bthapi name 'BluetoothSdpGetContainerElementData' delayed;
function BluetoothSdpGetAttributeValue; external bthapi name 'BluetoothSdpGetAttributeValue' delayed;
function BluetoothSdpGetString; external bthapi name 'BluetoothSdpGetString' delayed;
function BluetoothSdpEnumAttributes; external bthapi name 'BluetoothSdpEnumAttributes' delayed;
function BluetoothEnumAttributes; external bthapi name 'BluetoothSdpEnumAttributes' delayed;
function BluetoothSetLocalServiceInfo; external bthapi name 'BluetoothSetLocalServiceInfo' delayed;
function BluetoothIsVersionAvailable; external bthapi name 'BluetoothIsVersionAvailable' delayed;



end.

