{*******************************************************}
{                                                       }
{                Delphi Runtime Library                 }
{                                                       }
{ Files: d3d11ShaderTracing.h                           }
{         Copyright (C) Microsoft Corporation.          }
{         All Rights Reserved.                          }
{                                                       }
{       Translator: Embarcadero Technologies, Inc.      }
{ Copyright(c) 2016 Embarcadero Technologies, Inc.      }
{              All rights reserved                      }
{                                                       }
{*******************************************************}
unit Winapi.D3D11Shadertracing;

{$ALIGN ON}
{$MINENUMSIZE 4}
{$WEAKPACKAGEUNIT}

interface

{$HPPEMIT '#include "d3d11ShaderTracing.h"'}

{
 * this ALWAYS GENERATED file contains the definitions for the interfaces *
 * File created by MIDL compiler version 8.00.0602 *
 * @@MIDL_FILE_HEADING(  ) *
}

uses
  Winapi.D3D11,
  Winapi.D3DCommon,
  Winapi.Windows;

const
  D3D11_TRACE_COMPONENT_X = $1;
  {$EXTERNALSYM D3D11_TRACE_COMPONENT_X}
  D3D11_TRACE_COMPONENT_Y = $2;
  {$EXTERNALSYM D3D11_TRACE_COMPONENT_Y}
  D3D11_TRACE_COMPONENT_Z = $4;
  {$EXTERNALSYM D3D11_TRACE_COMPONENT_Z}
  D3D11_TRACE_COMPONENT_W = $8;
  {$EXTERNALSYM D3D11_TRACE_COMPONENT_W}

  D3D11_SHADER_TRACE_FLAG_RECORD_REGISTER_WRITES = $1;
  {$EXTERNALSYM D3D11_SHADER_TRACE_FLAG_RECORD_REGISTER_WRITES}
  D3D11_SHADER_TRACE_FLAG_RECORD_REGISTER_READS  = $2;
  {$EXTERNALSYM D3D11_SHADER_TRACE_FLAG_RECORD_REGISTER_READS}

  D3D11_TRACE_REGISTER_FLAGS_RELATIVE_INDEXING = $1;
  {$EXTERNALSYM D3D11_TRACE_REGISTER_FLAGS_RELATIVE_INDEXING}

  D3D11_TRACE_MISC_GS_EMIT = $1;
  {$EXTERNALSYM D3D11_TRACE_MISC_GS_EMIT}
  D3D11_TRACE_MISC_GS_CUT  = $2;
  {$EXTERNALSYM D3D11_TRACE_MISC_GS_CUT}
  D3D11_TRACE_MISC_PS_DISCARD = $4;
  {$EXTERNALSYM D3D11_TRACE_MISC_PS_DISCARD}
  D3D11_TRACE_MISC_GS_EMIT_STREAM = $8;
  {$EXTERNALSYM D3D11_TRACE_MISC_GS_EMIT_STREAM}
  D3D11_TRACE_MISC_GS_CUT_STREAM = $10;
  {$EXTERNALSYM D3D11_TRACE_MISC_GS_CUT_STREAM}
  D3D11_TRACE_MISC_HALT = $20;
  {$EXTERNALSYM D3D11_TRACE_MISC_HALT}
  D3D11_TRACE_MISC_MESSAGE = $40;
  {$EXTERNALSYM D3D11_TRACE_MISC_MESSAGE}


// Forward Declarations
type
  ID3D11ShaderTrace = interface;
  ID3D11ShaderTraceFactory = interface;

// interface __MIDL_itf_D3D11ShaderTracing_0000_0000
// [local]

  D3D11_SHADER_TYPE = (
    D3D11_VERTEX_SHADER	= 1,
  {$EXTERNALSYM D3D11_VERTEX_SHADER}
    D3D11_HULL_SHADER	= 2,
  {$EXTERNALSYM D3D11_HULL_SHADER}
    D3D11_DOMAIN_SHADER	= 3,
  {$EXTERNALSYM D3D11_DOMAIN_SHADER}
    D3D11_GEOMETRY_SHADER	= 4,
  {$EXTERNALSYM D3D11_GEOMETRY_SHADER}
    D3D11_PIXEL_SHADER	= 5,
  {$EXTERNALSYM D3D11_PIXEL_SHADER}
    D3D11_COMPUTE_SHADER	= 6);
  {$EXTERNALSYM D3D11_COMPUTE_SHADER}
  TD3D11ShaderType = D3D11_SHADER_TYPE;
  {$EXTERNALSYM D3D11_SHADER_TYPE}

  D3D11_TRACE_COMPONENT_MASK = UINT8;
  {$EXTERNALSYM D3D11_TRACE_COMPONENT_MASK}

  D3D11_VERTEX_SHADER_TRACE_DESC = record
    Invocation: UINT64;
  end;
  {$EXTERNALSYM D3D11_VERTEX_SHADER_TRACE_DESC}
  TD3D11_VERTEX_SHADER_TRACE_DESC = D3D11_VERTEX_SHADER_TRACE_DESC;

  D3D11_HULL_SHADER_TRACE_DESC = record
    Invocation: UINT64;
  end;
  {$EXTERNALSYM D3D11_HULL_SHADER_TRACE_DESC}
  TD3D11HullShaderTraceDesc = D3D11_HULL_SHADER_TRACE_DESC;

  D3D11_DOMAIN_SHADER_TRACE_DESC = record
    Invocation: UINT64;
  end;
  {$EXTERNALSYM D3D11_DOMAIN_SHADER_TRACE_DESC}
  TD3D11DomainShaderTraceDesc = D3D11_DOMAIN_SHADER_TRACE_DESC;

  D3D11_GEOMETRY_SHADER_TRACE_DESC = record
    Invocation: UINT64;
  end;
  {$EXTERNALSYM D3D11_GEOMETRY_SHADER_TRACE_DESC}
  TD3D11GeometryShaderTraceDesc = D3D11_GEOMETRY_SHADER_TRACE_DESC;

  D3D11_PIXEL_SHADER_TRACE_DESC = record
    Invocation: UINT64;
    X: integer;
    Y: integer;
    SampleMask: UINT64
  end;
  {$EXTERNALSYM D3D11_PIXEL_SHADER_TRACE_DESC}
  TD3D11PixelShaderTraceDesc = D3D11_PIXEL_SHADER_TRACE_DESC;

  D3D11_COMPUTE_SHADER_TRACE_DESC = record
    Invocation: UINT64;
    ThreadIDInGroup: array [0..2] of UINT;
    ThreadGroupID: array [0..2] of UINT;
  end;
  {$EXTERNALSYM D3D11_COMPUTE_SHADER_TRACE_DESC}
  TD3D11ComputeShaderTraceDesc = D3D11_COMPUTE_SHADER_TRACE_DESC;


  D3D11_SHADER_TRACE_DESC = record
    _Type: D3D11_SHADER_TYPE;
    Flags: UINT;
    case byte of
      0: (VertexShaderTraceDesc: D3D11_VERTEX_SHADER_TRACE_DESC);
      1: (HullShaderTraceDesc: D3D11_HULL_SHADER_TRACE_DESC);
      2: (DomainShaderTraceDesc: D3D11_DOMAIN_SHADER_TRACE_DESC);
      3: (GeometryShaderTraceDesc: D3D11_GEOMETRY_SHADER_TRACE_DESC);
      4: (PixelShaderTraceDesc: D3D11_PIXEL_SHADER_TRACE_DESC);
      5: (ComputeShaderTraceDesc: D3D11_COMPUTE_SHADER_TRACE_DESC);
  end;
  {$EXTERNALSYM D3D11_SHADER_TRACE_DESC}
  TD3D11ShaderTraceDesc = D3D11_SHADER_TRACE_DESC;
  PD3D11ShaderTraceDesc = ^D3D11_SHADER_TRACE_DESC;

  D3D11_TRACE_GS_INPUT_PRIMITIVE = (
    D3D11_TRACE_GS_INPUT_PRIMITIVE_UNDEFINED	= 0,
  {$EXTERNALSYM D3D11_TRACE_GS_INPUT_PRIMITIVE_UNDEFINED}
    D3D11_TRACE_GS_INPUT_PRIMITIVE_POINT	= 1,
  {$EXTERNALSYM D3D11_TRACE_GS_INPUT_PRIMITIVE_POINT}
    D3D11_TRACE_GS_INPUT_PRIMITIVE_LINE	= 2,
  {$EXTERNALSYM D3D11_TRACE_GS_INPUT_PRIMITIVE_LINE}
    D3D11_TRACE_GS_INPUT_PRIMITIVE_TRIANGLE	= 3,
  {$EXTERNALSYM D3D11_TRACE_GS_INPUT_PRIMITIVE_TRIANGLE}
    D3D11_TRACE_GS_INPUT_PRIMITIVE_LINE_ADJ	= 6,
  {$EXTERNALSYM D3D11_TRACE_GS_INPUT_PRIMITIVE_LINE_ADJ}
    D3D11_TRACE_GS_INPUT_PRIMITIVE_TRIANGLE_ADJ	= 7);
  {$EXTERNALSYM D3D11_TRACE_GS_INPUT_PRIMITIVE_TRIANGLE_ADJ}
  TD3D11TraceGsInputPrimitive = D3D11_TRACE_GS_INPUT_PRIMITIVE;
  {$EXTERNALSYM D3D11_TRACE_GS_INPUT_PRIMITIVE}

  D3D11_TRACE_STATS = record
    TraceDesc: D3D11_SHADER_TRACE_DESC;
    NumInvocationsInStamp: UINT8;
    TargetStampIndex: UINT8;
    NumTraceSteps: UINT;
    InputMask: array [0..31] of D3D11_TRACE_COMPONENT_MASK;
    OutputMask: array [0..31] of D3D11_TRACE_COMPONENT_MASK;
    NumTemps: UINT16;
    MaxIndexableTempIndex: UINT16;
    IndexableTempSize: array [0..4095] of UINT16;
    ImmediateConstantBufferSize: UINT16;
    PixelPosition: array [0..3, 0..1] of UINT;
    PixelCoverageMask: array [0..3] of UINT64;
    PixelDiscardedMask: array [0..3] of UINT64;
    PixelCoverageMaskAfterShader: array [0..3] of UINT64;
    PixelCoverageMaskAfterA2CSampleMask: array [0..3] of UINT64;
    PixelCoverageMaskAfterA2CSampleMaskDepth: array [0..3] of UINT64;
    PixelCoverageMaskAfterA2CSampleMaskDepthStencil: array [0..3] of UINT64;
    PSOutputsDepth: BOOL;
    PSOutputsMask: BOOL;
    GSInputPrimitive: D3D11_TRACE_GS_INPUT_PRIMITIVE;
    GSInputsPrimitiveID: BOOL;
    HSOutputPatchConstantMask: array [0..31] of D3D11_TRACE_COMPONENT_MASK;
    DSInputPatchConstantMask : array [0..31] of D3D11_TRACE_COMPONENT_MASK;
  end;
  {$EXTERNALSYM D3D11_TRACE_STATS}
  TD3D11TraceStats = D3D11_TRACE_STATS;

  D3D11_TRACE_VALUE = record
    Bits: array [0..3] of UINT;
    ValidMask: D3D11_TRACE_COMPONENT_MASK;
  end;
  {$EXTERNALSYM D3D11_TRACE_VALUE}
  TD3D11TraceValue = D3D11_TRACE_VALUE;

  D3D11_TRACE_REGISTER_TYPE = (
    D3D11_TRACE_OUTPUT_NULL_REGISTER	= 0,
  {$EXTERNALSYM D3D11_TRACE_OUTPUT_NULL_REGISTER}
    D3D11_TRACE_INPUT_REGISTER	= (D3D11_TRACE_OUTPUT_NULL_REGISTER + 1) ,
  {$EXTERNALSYM D3D11_TRACE_INPUT_REGISTER}
    D3D11_TRACE_INPUT_PRIMITIVE_ID_REGISTER	= (D3D11_TRACE_INPUT_REGISTER + 1) ,
  {$EXTERNALSYM D3D11_TRACE_INPUT_PRIMITIVE_ID_REGISTER}
    D3D11_TRACE_IMMEDIATE_CONSTANT_BUFFER	= (D3D11_TRACE_INPUT_PRIMITIVE_ID_REGISTER + 1) ,
  {$EXTERNALSYM D3D11_TRACE_IMMEDIATE_CONSTANT_BUFFER	}
    D3D11_TRACE_TEMP_REGISTER	= (D3D11_TRACE_IMMEDIATE_CONSTANT_BUFFER + 1) ,
  {$EXTERNALSYM D3D11_TRACE_TEMP_REGISTER	}
    D3D11_TRACE_INDEXABLE_TEMP_REGISTER	= (D3D11_TRACE_TEMP_REGISTER + 1) ,
  {$EXTERNALSYM D3D11_TRACE_INDEXABLE_TEMP_REGISTER	}
    D3D11_TRACE_OUTPUT_REGISTER	= (D3D11_TRACE_INDEXABLE_TEMP_REGISTER + 1) ,
  {$EXTERNALSYM D3D11_TRACE_OUTPUT_REGISTER	}
    D3D11_TRACE_OUTPUT_DEPTH_REGISTER	= (D3D11_TRACE_OUTPUT_REGISTER + 1) ,
  {$EXTERNALSYM D3D11_TRACE_OUTPUT_DEPTH_REGISTER	}
    D3D11_TRACE_CONSTANT_BUFFER	= (D3D11_TRACE_OUTPUT_DEPTH_REGISTER + 1) ,
  {$EXTERNALSYM D3D11_TRACE_CONSTANT_BUFFER	}
    D3D11_TRACE_IMMEDIATE32	= (D3D11_TRACE_CONSTANT_BUFFER + 1) ,
  {$EXTERNALSYM D3D11_TRACE_IMMEDIATE32	}
    D3D11_TRACE_SAMPLER	= (D3D11_TRACE_IMMEDIATE32 + 1) ,
  {$EXTERNALSYM D3D11_TRACE_SAMPLER	}
    D3D11_TRACE_RESOURCE	= (D3D11_TRACE_SAMPLER + 1) ,
  {$EXTERNALSYM D3D11_TRACE_RESOURCE	}
    D3D11_TRACE_RASTERIZER	= (D3D11_TRACE_RESOURCE + 1) ,
  {$EXTERNALSYM D3D11_TRACE_RASTERIZER	}
    D3D11_TRACE_OUTPUT_COVERAGE_MASK	= (D3D11_TRACE_RASTERIZER + 1) ,
  {$EXTERNALSYM D3D11_TRACE_OUTPUT_COVERAGE_MASK	}
    D3D11_TRACE_STREAM	= (D3D11_TRACE_OUTPUT_COVERAGE_MASK + 1) ,
  {$EXTERNALSYM D3D11_TRACE_STREAM	}
    D3D11_TRACE_THIS_POINTER	= (D3D11_TRACE_STREAM + 1) ,
  {$EXTERNALSYM D3D11_TRACE_THIS_POINTER	}
    D3D11_TRACE_OUTPUT_CONTROL_POINT_ID_REGISTER	= (D3D11_TRACE_THIS_POINTER + 1) ,
  {$EXTERNALSYM D3D11_TRACE_OUTPUT_CONTROL_POINT_ID_REGISTER	}
    D3D11_TRACE_INPUT_FORK_INSTANCE_ID_REGISTER	= (D3D11_TRACE_OUTPUT_CONTROL_POINT_ID_REGISTER + 1) ,
  {$EXTERNALSYM D3D11_TRACE_INPUT_FORK_INSTANCE_ID_REGISTER	}
    D3D11_TRACE_INPUT_JOIN_INSTANCE_ID_REGISTER	= (D3D11_TRACE_INPUT_FORK_INSTANCE_ID_REGISTER + 1) ,
  {$EXTERNALSYM D3D11_TRACE_INPUT_JOIN_INSTANCE_ID_REGISTER	}
    D3D11_TRACE_INPUT_CONTROL_POINT_REGISTER	= (D3D11_TRACE_INPUT_JOIN_INSTANCE_ID_REGISTER + 1) ,
  {$EXTERNALSYM D3D11_TRACE_INPUT_CONTROL_POINT_REGISTER	}
    D3D11_TRACE_OUTPUT_CONTROL_POINT_REGISTER	= (D3D11_TRACE_INPUT_CONTROL_POINT_REGISTER + 1) ,
  {$EXTERNALSYM D3D11_TRACE_OUTPUT_CONTROL_POINT_REGISTER	}
    D3D11_TRACE_INPUT_PATCH_CONSTANT_REGISTER	= (D3D11_TRACE_OUTPUT_CONTROL_POINT_REGISTER + 1) ,
  {$EXTERNALSYM D3D11_TRACE_INPUT_PATCH_CONSTANT_REGISTER	}
    D3D11_TRACE_INPUT_DOMAIN_POINT_REGISTER	= (D3D11_TRACE_INPUT_PATCH_CONSTANT_REGISTER + 1) ,
  {$EXTERNALSYM D3D11_TRACE_INPUT_DOMAIN_POINT_REGISTER	}
    D3D11_TRACE_UNORDERED_ACCESS_VIEW	= (D3D11_TRACE_INPUT_DOMAIN_POINT_REGISTER + 1) ,
  {$EXTERNALSYM D3D11_TRACE_UNORDERED_ACCESS_VIEW	}
    D3D11_TRACE_THREAD_GROUP_SHARED_MEMORY	= (D3D11_TRACE_UNORDERED_ACCESS_VIEW + 1) ,
  {$EXTERNALSYM D3D11_TRACE_THREAD_GROUP_SHARED_MEMORY	}
    D3D11_TRACE_INPUT_THREAD_ID_REGISTER	= (D3D11_TRACE_THREAD_GROUP_SHARED_MEMORY + 1) ,
  {$EXTERNALSYM D3D11_TRACE_INPUT_THREAD_ID_REGISTER	}
    D3D11_TRACE_INPUT_THREAD_GROUP_ID_REGISTER	= (D3D11_TRACE_INPUT_THREAD_ID_REGISTER + 1) ,
  {$EXTERNALSYM D3D11_TRACE_INPUT_THREAD_GROUP_ID_REGISTER}
    D3D11_TRACE_INPUT_THREAD_ID_IN_GROUP_REGISTER	= (D3D11_TRACE_INPUT_THREAD_GROUP_ID_REGISTER + 1) ,
  {$EXTERNALSYM D3D11_TRACE_INPUT_THREAD_ID_IN_GROUP_REGISTER	}
    D3D11_TRACE_INPUT_COVERAGE_MASK_REGISTER	= (D3D11_TRACE_INPUT_THREAD_ID_IN_GROUP_REGISTER + 1) ,
  {$EXTERNALSYM D3D11_TRACE_INPUT_COVERAGE_MASK_REGISTER	}
    D3D11_TRACE_INPUT_THREAD_ID_IN_GROUP_FLATTENED_REGISTER	= (D3D11_TRACE_INPUT_COVERAGE_MASK_REGISTER + 1) ,
  {$EXTERNALSYM D3D11_TRACE_INPUT_THREAD_ID_IN_GROUP_FLATTENED_REGISTER	}
    D3D11_TRACE_INPUT_GS_INSTANCE_ID_REGISTER	= (D3D11_TRACE_INPUT_THREAD_ID_IN_GROUP_FLATTENED_REGISTER + 1) ,
  {$EXTERNALSYM D3D11_TRACE_INPUT_GS_INSTANCE_ID_REGISTER	}
    D3D11_TRACE_OUTPUT_DEPTH_GREATER_EQUAL_REGISTER	= (D3D11_TRACE_INPUT_GS_INSTANCE_ID_REGISTER + 1) ,
  {$EXTERNALSYM D3D11_TRACE_OUTPUT_DEPTH_GREATER_EQUAL_REGISTER	}
    D3D11_TRACE_OUTPUT_DEPTH_LESS_EQUAL_REGISTER	= (D3D11_TRACE_OUTPUT_DEPTH_GREATER_EQUAL_REGISTER + 1) ,
  {$EXTERNALSYM D3D11_TRACE_OUTPUT_DEPTH_LESS_EQUAL_REGISTER	}
    D3D11_TRACE_IMMEDIATE64	= (D3D11_TRACE_OUTPUT_DEPTH_LESS_EQUAL_REGISTER + 1) ,
  {$EXTERNALSYM D3D11_TRACE_IMMEDIATE64	}
    D3D11_TRACE_INPUT_CYCLE_COUNTER_REGISTER	= (D3D11_TRACE_IMMEDIATE64 + 1) ,
  {$EXTERNALSYM D3D11_TRACE_INPUT_CYCLE_COUNTER_REGISTER	}
    D3D11_TRACE_INTERFACE_POINTER	= (D3D11_TRACE_INPUT_CYCLE_COUNTER_REGISTER + 1));
  {$EXTERNALSYM D3D11_TRACE_INTERFACE_POINTER	}
  TD3D11TraceRegisterType = D3D11_TRACE_REGISTER_TYPE;
  {$EXTERNALSYM D3D11_TRACE_REGISTER_TYPE}

  TTRACE_REGISTER_INDEX = record
    case byte of
      0: (Index1D: UINT16);
      1: (Index2D: array [0..1] of UINT16);
  end;

  D3D11_TRACE_REGISTER = record
    RegType: D3D11_TRACE_REGISTER_TYPE;
    Index : TTRACE_REGISTER_INDEX;
    OperandIndex: UINT8;
    Flags: UINT8;
  end;
  {$EXTERNALSYM D3D11_TRACE_REGISTER}
  TD3D11TraceRegister = D3D11_TRACE_REGISTER;
  PD3D11TraceRegister = ^D3D11_TRACE_REGISTER;

  D3D11_TRACE_MISC_OPERATIONS_MASK = UINT16;
  {$EXTERNALSYM D3D11_TRACE_MISC_OPERATIONS_MASK}

  D3D11_TRACE_STEP = record
    ID: UINT;
    InstructionActive: BOOL;
    NumRegistersWritten: UINT8;
    NumRegistersRead: UINT8;
    MiscOperations: D3D11_TRACE_MISC_OPERATIONS_MASK;
    OpcodeType: UINT;
    CurrentGlobalCycle: UINT64;
  end;
  {$EXTERNALSYM D3D11_TRACE_STEP}
  TD3D11TraceStep = D3D11_TRACE_STEP;


// interface ID3D11ShaderTrace
// [unique][local][object][uuid]


  {$EXTERNALSYM IID_ID3D11ShaderTrace}
  IID_ID3D11ShaderTrace = ID3D11ShaderTrace;
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11ShaderTrace);'}
  {$EXTERNALSYM ID3D11ShaderTrace}
  ID3D11ShaderTrace = interface(IUnknown)
  ['{36B013E6-2811-4845-BAA7-D623FE0DF104}']
    function TraceReady(
        (*_Out_opt_*)  out pTestCount: UINT64): HRESULT; stdcall;

    procedure ResetTrace; stdcall;

    function GetTraceStats(
        (*_Out_*)  out pTraceStats: D3D11_TRACE_STATS): HRESULT; stdcall;

    function PSSelectStamp(
        (*_In_*)  stampIndex: UINT): HRESULT; stdcall;

    function GetInitialRegisterContents(
        (*_In_*)  pRegister: PD3D11TraceRegister;
        (*_Out_*)  out pValue: D3D11_TRACE_VALUE): HRESULT; stdcall;

    function GetStep(
        (*_In_*)   stepIndex: UINT;
        (*_Out_*)  out pTraceStep: D3D11_TRACE_STEP): HRESULT; stdcall;

    function GetWrittenRegister(
        (*_In_*)   stepIndex: UINT;
        (*_In_*)   writtenRegisterIndex: UINT;
        (*_Out_*)  out pRegister: D3D11_TRACE_REGISTER;
        (*_Out_*)  out pValue: D3D11_TRACE_VALUE): HRESULT; stdcall;

    function GetReadRegister(
        (*_In_*)   stepIndex: UINT;
        (*_In_*)   readRegisterIndex: UINT;
        (*_Out_*)  out pRegister: D3D11_TRACE_REGISTER;
        (*_Out_*)  out pValue: D3D11_TRACE_VALUE): HRESULT; stdcall;
  end;

// interface ID3D11ShaderTraceFactory
// [unique][local][object][uuid]


  {$EXTERNALSYM IID_ID3D11ShaderTraceFactory}
  IID_ID3D11ShaderTraceFactory = ID3D11ShaderTraceFactory;
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D11ShaderTraceFactory);'}
  {$EXTERNALSYM ID3D11ShaderTraceFactory}
  ID3D11ShaderTraceFactory = interface(IUnknown)
  ['{1FBAD429-66AB-41CC-9617-667AC10E4459}']
    function CreateShaderTrace(
      (*_In_*)  pShader: IUnknown;
      (*_In_*)  pTraceDesc: PD3D11ShaderTraceDesc;
      (*_Out_*)  out ppShaderTrace: ID3D11ShaderTrace): HRESULT; stdcall;
  end;

// interface __MIDL_itf_D3D11ShaderTracing_0000_0002
// [local]

  function D3DDisassemble11Trace(
        (*_In_reads_bytes_(SrcDataSize)*) pSrcData: LPCVOID;
        (*_In_*) SrcDataSize: SIZE_T;
        (*_In_*) pTrace: ID3D11ShaderTrace;
        (*_In_*) StartStep: UINT;
        (*_In_*) NumSteps: UINT;
        (*_In_*) Flags: UINT;
        (*_Out_ interface *) out ppDisassembly: ID3D10Blob
        ): HRESULT; stdcall; external d3d11dll delayed;

  {$EXTERNALSYM D3DDisassemble11Trace}

// Additional Prototypes for ALL interfaces

// end of Additional Prototypes

implementation

end.
