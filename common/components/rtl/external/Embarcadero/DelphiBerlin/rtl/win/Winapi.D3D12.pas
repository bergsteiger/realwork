{*******************************************************}
{                                                       }
{                Delphi Runtime Library                 }
{                                                       }
{ Files: d3d12.h                                        }
{         Copyright (C) Microsoft Corporation.          }
{         All Rights Reserved.                          }
{                                                       }
{       Translator: Embarcadero Technologies, Inc.      }
{ Copyright(c) 2016 Embarcadero Technologies, Inc.      }
{              All rights reserved                      }
{                                                       }
{*******************************************************}
unit Winapi.D3D12;

{$ALIGN ON}
{$MINENUMSIZE 4}
{$WEAKPACKAGEUNIT}

interface

{$HPPEMIT '#include "windows.h"'}
{$HPPEMIT '#include "dxgi.h"'}
{$HPPEMIT '#include "d3dcommon.h"'}
{$HPPEMIT '#include "d3d12sdklayers.h"}
{$HPPEMIT '#include "d3d12.h"'}

uses
  Winapi.DXGI,
  Winapi.DxgiType,
  Winapi.DxgiFormat,
  Winapi.d3dcommon,
  Winapi.Windows;

const
  D3D12dll = 'd3d12.dll';

// interface __MIDL_itf_d3d12_0000_0000
// [local]
  D3D12_16BIT_INDEX_STRIP_CUT_VALUE	= $ffff;
  {$EXTERNALSYM D3D12_16BIT_INDEX_STRIP_CUT_VALUE}
  D3D12_32BIT_INDEX_STRIP_CUT_VALUE	= $ffffffff;
  {$EXTERNALSYM D3D12_32BIT_INDEX_STRIP_CUT_VALUE}
  D3D12_8BIT_INDEX_STRIP_CUT_VALUE = $ff;
  {$EXTERNALSYM D3D12_8BIT_INDEX_STRIP_CUT_VALUE}
  D3D12_APPEND_ALIGNED_ELEMENT = $ffffffff;
  {$EXTERNALSYM D3D12_APPEND_ALIGNED_ELEMENT}
  D3D12_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT = 9;
  {$EXTERNALSYM D3D12_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT}
  D3D12_CLIP_OR_CULL_DISTANCE_COUNT = 8;
  {$EXTERNALSYM D3D12_CLIP_OR_CULL_DISTANCE_COUNT}
  D3D12_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT = 2;
  {$EXTERNALSYM D3D12_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT}
  D3D12_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT = 14;
  {$EXTERNALSYM D3D12_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT}
  D3D12_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS = 4;
  {$EXTERNALSYM D3D12_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS}
  D3D12_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D12_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT}
  D3D12_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT = 15;
  {$EXTERNALSYM D3D12_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT}
  D3D12_COMMONSHADER_CONSTANT_BUFFER_PARTIAL_UPDATE_EXTENTS_BYTE_ALIGNMENT = 16;
  {$EXTERNALSYM D3D12_COMMONSHADER_CONSTANT_BUFFER_PARTIAL_UPDATE_EXTENTS_BYTE_ALIGNMENT}
  D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4;
  {$EXTERNALSYM D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS}
  D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT = 15;
  {$EXTERNALSYM D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT}
  D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1;
  {$EXTERNALSYM D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST}
  D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1;
  {$EXTERNALSYM D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS}
  D3D12_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT = 64;
  {$EXTERNALSYM D3D12_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT}
  D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4;
  {$EXTERNALSYM D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS}
  D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT = 1;
  {$EXTERNALSYM D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT}
  D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1;
  {$EXTERNALSYM D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST}
  D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1;
  {$EXTERNALSYM D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS}
  D3D12_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D12_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT}
  D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS = 1;
  {$EXTERNALSYM D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS}
  D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT = 128;
  {$EXTERNALSYM D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT}
  D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST = 1;
  {$EXTERNALSYM D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST}
  D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS = 1;
  {$EXTERNALSYM D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS}
  D3D12_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT = 128;
  {$EXTERNALSYM D3D12_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT}
  D3D12_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS = 1;
  {$EXTERNALSYM D3D12_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS}
  D3D12_COMMONSHADER_SAMPLER_REGISTER_COUNT = 16;
  {$EXTERNALSYM D3D12_COMMONSHADER_SAMPLER_REGISTER_COUNT}
  D3D12_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST = 1;
  {$EXTERNALSYM D3D12_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST}
  D3D12_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS = 1;
  {$EXTERNALSYM D3D12_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS}
  D3D12_COMMONSHADER_SAMPLER_SLOT_COUNT = 16;
  {$EXTERNALSYM D3D12_COMMONSHADER_SAMPLER_SLOT_COUNT}
  D3D12_COMMONSHADER_SUBROUTINE_NESTING_LIMIT = 32;
  {$EXTERNALSYM D3D12_COMMONSHADER_SUBROUTINE_NESTING_LIMIT}
  D3D12_COMMONSHADER_TEMP_REGISTER_COMPONENTS = 4;
  {$EXTERNALSYM D3D12_COMMONSHADER_TEMP_REGISTER_COMPONENTS}
  D3D12_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D12_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT}
  D3D12_COMMONSHADER_TEMP_REGISTER_COUNT = 4096;
  {$EXTERNALSYM D3D12_COMMONSHADER_TEMP_REGISTER_COUNT}
  D3D12_COMMONSHADER_TEMP_REGISTER_READS_PER_INST = 3;
  {$EXTERNALSYM D3D12_COMMONSHADER_TEMP_REGISTER_READS_PER_INST}
  D3D12_COMMONSHADER_TEMP_REGISTER_READ_PORTS = 3;
  {$EXTERNALSYM D3D12_COMMONSHADER_TEMP_REGISTER_READ_PORTS}
  D3D12_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX = 10;
  {$EXTERNALSYM D3D12_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX}
  D3D12_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN = -10;
  {$EXTERNALSYM D3D12_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN}
  D3D12_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE = -8;
  {$EXTERNALSYM D3D12_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE}
  D3D12_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE = 7;
  {$EXTERNALSYM D3D12_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE}
  D3D12_CONSTANT_BUFFER_DATA_PLACEMENT_ALIGNMENT = 256;
  {$EXTERNALSYM D3D12_CONSTANT_BUFFER_DATA_PLACEMENT_ALIGNMENT}
  D3D12_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 256;
  {$EXTERNALSYM D3D12_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD}
  D3D12_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP = 64;
  {$EXTERNALSYM D3D12_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP}
  D3D12_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 240;
  {$EXTERNALSYM D3D12_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD}
  D3D12_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP = 68;
  {$EXTERNALSYM D3D12_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP}
  D3D12_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 224;
  {$EXTERNALSYM D3D12_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD}
  D3D12_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP = 72;
  {$EXTERNALSYM D3D12_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP}
  D3D12_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 208;
  {$EXTERNALSYM D3D12_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD}
  D3D12_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP = 76;
  {$EXTERNALSYM D3D12_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP}
  D3D12_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 192;
  {$EXTERNALSYM D3D12_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD}
  D3D12_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP = 84;
  {$EXTERNALSYM D3D12_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP}
  D3D12_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 176;
  {$EXTERNALSYM D3D12_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD}
  D3D12_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP = 92;
  {$EXTERNALSYM D3D12_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP}
  D3D12_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 160;
  {$EXTERNALSYM D3D12_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD}
  D3D12_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP = 100;
  {$EXTERNALSYM D3D12_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP}
  D3D12_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 144;
  {$EXTERNALSYM D3D12_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD}
  D3D12_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP = 112;
  {$EXTERNALSYM D3D12_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP}
  D3D12_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 128;
  {$EXTERNALSYM D3D12_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD}
  D3D12_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP = 128;
  {$EXTERNALSYM D3D12_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP}
  D3D12_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 112;
  {$EXTERNALSYM D3D12_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD}
  D3D12_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP = 144;
  {$EXTERNALSYM D3D12_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP}
  D3D12_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 96;
  {$EXTERNALSYM D3D12_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD}
  D3D12_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP = 168;
  {$EXTERNALSYM D3D12_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP}
  D3D12_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 80;
  {$EXTERNALSYM D3D12_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD}
  D3D12_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP = 204;
  {$EXTERNALSYM D3D12_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP}
  D3D12_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 64;
  {$EXTERNALSYM D3D12_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD}
  D3D12_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP = 256;
  {$EXTERNALSYM D3D12_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP}
  D3D12_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 48;
  {$EXTERNALSYM D3D12_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD}
  D3D12_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP = 340;
  {$EXTERNALSYM D3D12_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP}
  D3D12_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 32;
  {$EXTERNALSYM D3D12_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD}
  D3D12_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP = 512;
  {$EXTERNALSYM D3D12_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP}
  D3D12_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 16;
  {$EXTERNALSYM D3D12_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD}
  D3D12_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP = 768;
  {$EXTERNALSYM D3D12_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP}
  D3D12_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION = 1;
  {$EXTERNALSYM D3D12_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION}
  D3D12_CS_4_X_RAW_UAV_BYTE_ALIGNMENT = 256;
  {$EXTERNALSYM D3D12_CS_4_X_RAW_UAV_BYTE_ALIGNMENT}
  D3D12_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP = 768;
  {$EXTERNALSYM D3D12_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP}
  D3D12_CS_4_X_THREAD_GROUP_MAX_X = 768;
  {$EXTERNALSYM D3D12_CS_4_X_THREAD_GROUP_MAX_X}
  D3D12_CS_4_X_THREAD_GROUP_MAX_Y = 768;
  {$EXTERNALSYM D3D12_CS_4_X_THREAD_GROUP_MAX_Y}
  D3D12_CS_4_X_UAV_REGISTER_COUNT = 1;
  {$EXTERNALSYM D3D12_CS_4_X_UAV_REGISTER_COUNT}
  D3D12_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION = 65535;
  {$EXTERNALSYM D3D12_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION}
  D3D12_CS_TGSM_REGISTER_COUNT = 8192;
  {$EXTERNALSYM D3D12_CS_TGSM_REGISTER_COUNT}
  D3D12_CS_TGSM_REGISTER_READS_PER_INST = 1;
  {$EXTERNALSYM D3D12_CS_TGSM_REGISTER_READS_PER_INST}
  D3D12_CS_TGSM_RESOURCE_REGISTER_COMPONENTS = 1;
  {$EXTERNALSYM D3D12_CS_TGSM_RESOURCE_REGISTER_COMPONENTS}
  D3D12_CS_TGSM_RESOURCE_REGISTER_READ_PORTS = 1;
  {$EXTERNALSYM D3D12_CS_TGSM_RESOURCE_REGISTER_READ_PORTS}
  D3D12_CS_THREADGROUPID_REGISTER_COMPONENTS = 3;
  {$EXTERNALSYM D3D12_CS_THREADGROUPID_REGISTER_COMPONENTS}
  D3D12_CS_THREADGROUPID_REGISTER_COUNT = 1;
  {$EXTERNALSYM D3D12_CS_THREADGROUPID_REGISTER_COUNT}
  D3D12_CS_THREADIDINGROUPFLATTENED_REGISTER_COMPONENTS = 1;
  {$EXTERNALSYM D3D12_CS_THREADIDINGROUPFLATTENED_REGISTER_COMPONENTS}
  D3D12_CS_THREADIDINGROUPFLATTENED_REGISTER_COUNT = 1;
  {$EXTERNALSYM D3D12_CS_THREADIDINGROUPFLATTENED_REGISTER_COUNT}
  D3D12_CS_THREADIDINGROUP_REGISTER_COMPONENTS = 3;
  {$EXTERNALSYM D3D12_CS_THREADIDINGROUP_REGISTER_COMPONENTS}
  D3D12_CS_THREADIDINGROUP_REGISTER_COUNT = 1;
  {$EXTERNALSYM D3D12_CS_THREADIDINGROUP_REGISTER_COUNT}
  D3D12_CS_THREADID_REGISTER_COMPONENTS = 3;
  {$EXTERNALSYM D3D12_CS_THREADID_REGISTER_COMPONENTS}
  D3D12_CS_THREADID_REGISTER_COUNT = 1;
  {$EXTERNALSYM D3D12_CS_THREADID_REGISTER_COUNT}
  D3D12_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP = 1024;
  {$EXTERNALSYM D3D12_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP}
  D3D12_CS_THREAD_GROUP_MAX_X = 1024;
  {$EXTERNALSYM D3D12_CS_THREAD_GROUP_MAX_X}
  D3D12_CS_THREAD_GROUP_MAX_Y = 1024;
  {$EXTERNALSYM D3D12_CS_THREAD_GROUP_MAX_Y}
  D3D12_CS_THREAD_GROUP_MAX_Z = 64;
  {$EXTERNALSYM D3D12_CS_THREAD_GROUP_MAX_Z}
  D3D12_CS_THREAD_GROUP_MIN_X = 1;
  {$EXTERNALSYM D3D12_CS_THREAD_GROUP_MIN_X}
  D3D12_CS_THREAD_GROUP_MIN_Y = 1;
  {$EXTERNALSYM D3D12_CS_THREAD_GROUP_MIN_Y}
  D3D12_CS_THREAD_GROUP_MIN_Z = 1;
  {$EXTERNALSYM D3D12_CS_THREAD_GROUP_MIN_Z}
  D3D12_CS_THREAD_LOCAL_TEMP_REGISTER_POOL = 16384;
  {$EXTERNALSYM D3D12_CS_THREAD_LOCAL_TEMP_REGISTER_POOL}
  D3D12_DEFAULT_BLEND_FACTOR_ALPHA = 1.0;
  {$EXTERNALSYM D3D12_DEFAULT_BLEND_FACTOR_ALPHA}
  D3D12_DEFAULT_BLEND_FACTOR_BLUE = 1.0;
  {$EXTERNALSYM D3D12_DEFAULT_BLEND_FACTOR_BLUE}
  D3D12_DEFAULT_BLEND_FACTOR_GREEN = 1.0;
  {$EXTERNALSYM D3D12_DEFAULT_BLEND_FACTOR_GREEN}
  D3D12_DEFAULT_BLEND_FACTOR_RED = 1.0;
  {$EXTERNALSYM D3D12_DEFAULT_BLEND_FACTOR_RED}
  D3D12_DEFAULT_BORDER_COLOR_COMPONENT = 0.0;
  {$EXTERNALSYM D3D12_DEFAULT_BORDER_COLOR_COMPONENT}
  D3D12_DEFAULT_DEPTH_BIAS = 0;
  {$EXTERNALSYM D3D12_DEFAULT_DEPTH_BIAS}
  D3D12_DEFAULT_DEPTH_BIAS_CLAMP = 0.0;
  {$EXTERNALSYM D3D12_DEFAULT_DEPTH_BIAS_CLAMP}
  D3D12_DEFAULT_MAX_ANISOTROPY = 16;
  {$EXTERNALSYM D3D12_DEFAULT_MAX_ANISOTROPY}
  D3D12_DEFAULT_MIP_LOD_BIAS = 0.0;
  {$EXTERNALSYM D3D12_DEFAULT_MIP_LOD_BIAS}
  D3D12_DEFAULT_MSAA_RESOURCE_PLACEMENT_ALIGNMENT = 4194304;
  {$EXTERNALSYM D3D12_DEFAULT_MSAA_RESOURCE_PLACEMENT_ALIGNMENT}
  D3D12_DEFAULT_RENDER_TARGET_ARRAY_INDEX = 0;
  {$EXTERNALSYM D3D12_DEFAULT_RENDER_TARGET_ARRAY_INDEX}
  D3D12_DEFAULT_RESOURCE_PLACEMENT_ALIGNMENT = 65536;
  {$EXTERNALSYM D3D12_DEFAULT_RESOURCE_PLACEMENT_ALIGNMENT}
  D3D12_DEFAULT_SAMPLE_MASK = $ffffffff;
  {$EXTERNALSYM D3D12_DEFAULT_SAMPLE_MASK}
  D3D12_DEFAULT_SCISSOR_ENDX = 0;
  {$EXTERNALSYM D3D12_DEFAULT_SCISSOR_ENDX}
  D3D12_DEFAULT_SCISSOR_ENDY = 0;
  {$EXTERNALSYM D3D12_DEFAULT_SCISSOR_ENDY}
  D3D12_DEFAULT_SCISSOR_STARTX = 0;
  {$EXTERNALSYM D3D12_DEFAULT_SCISSOR_STARTX}
  D3D12_DEFAULT_SCISSOR_STARTY = 0;
  {$EXTERNALSYM D3D12_DEFAULT_SCISSOR_STARTY}
  D3D12_DEFAULT_SLOPE_SCALED_DEPTH_BIAS = 0.0;
  {$EXTERNALSYM D3D12_DEFAULT_SLOPE_SCALED_DEPTH_BIAS}
  D3D12_DEFAULT_STENCIL_READ_MASK = $ff;
  {$EXTERNALSYM D3D12_DEFAULT_STENCIL_READ_MASK}
  D3D12_DEFAULT_STENCIL_REFERENCE = 0;
  {$EXTERNALSYM D3D12_DEFAULT_STENCIL_REFERENCE}
  D3D12_DEFAULT_STENCIL_WRITE_MASK = $ff;
  {$EXTERNALSYM D3D12_DEFAULT_STENCIL_WRITE_MASK}
  D3D12_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX = 0;
  {$EXTERNALSYM D3D12_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX}
  D3D12_DEFAULT_VIEWPORT_HEIGHT = 0;
  {$EXTERNALSYM D3D12_DEFAULT_VIEWPORT_HEIGHT}
  D3D12_DEFAULT_VIEWPORT_MAX_DEPTH = 0.0;
  {$EXTERNALSYM D3D12_DEFAULT_VIEWPORT_MAX_DEPTH}
  D3D12_DEFAULT_VIEWPORT_MIN_DEPTH = 0.0;
  {$EXTERNALSYM D3D12_DEFAULT_VIEWPORT_MIN_DEPTH}
  D3D12_DEFAULT_VIEWPORT_TOPLEFTX = 0;
  {$EXTERNALSYM D3D12_DEFAULT_VIEWPORT_TOPLEFTX}
  D3D12_DEFAULT_VIEWPORT_TOPLEFTY = 0;
  {$EXTERNALSYM D3D12_DEFAULT_VIEWPORT_TOPLEFTY}
  D3D12_DEFAULT_VIEWPORT_WIDTH = 0;
  {$EXTERNALSYM D3D12_DEFAULT_VIEWPORT_WIDTH}
  D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND = $ffffffff;
  {$EXTERNALSYM D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND}
  D3D12_DRIVER_RESERVED_REGISTER_SPACE_VALUES_END = $fffffff7;
  {$EXTERNALSYM D3D12_DRIVER_RESERVED_REGISTER_SPACE_VALUES_END}
  D3D12_DRIVER_RESERVED_REGISTER_SPACE_VALUES_START = $fffffff0;
  {$EXTERNALSYM D3D12_DRIVER_RESERVED_REGISTER_SPACE_VALUES_START}
  D3D12_DS_INPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = 3968;
  {$EXTERNALSYM D3D12_DS_INPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS}
  D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENTS = 4;
  {$EXTERNALSYM D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENTS}
  D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT}
  D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COUNT = 32;
  {$EXTERNALSYM D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COUNT}
  D3D12_DS_INPUT_CONTROL_POINT_REGISTER_READS_PER_INST = 2;
  {$EXTERNALSYM D3D12_DS_INPUT_CONTROL_POINT_REGISTER_READS_PER_INST}
  D3D12_DS_INPUT_CONTROL_POINT_REGISTER_READ_PORTS = 1;
  {$EXTERNALSYM D3D12_DS_INPUT_CONTROL_POINT_REGISTER_READ_PORTS}
  D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENTS = 3;
  {$EXTERNALSYM D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENTS}
  D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENT_BIT_COUNT}
  D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COUNT = 1;
  {$EXTERNALSYM D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COUNT}
  D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_READS_PER_INST = 2;
  {$EXTERNALSYM D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_READS_PER_INST}
  D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_READ_PORTS = 1;
  {$EXTERNALSYM D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_READ_PORTS}
  D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = 4;
  {$EXTERNALSYM D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENTS}
  D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT}
  D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COUNT = 32;
  {$EXTERNALSYM D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COUNT}
  D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = 2;
  {$EXTERNALSYM D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST}
  D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = 1;
  {$EXTERNALSYM D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_READ_PORTS}
  D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = 1;
  {$EXTERNALSYM D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS}
  D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT}
  D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = 1;
  {$EXTERNALSYM D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COUNT}
  D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = 2;
  {$EXTERNALSYM D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST}
  D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = 1;
  {$EXTERNALSYM D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS}
  D3D12_DS_OUTPUT_REGISTER_COMPONENTS = 4;
  {$EXTERNALSYM D3D12_DS_OUTPUT_REGISTER_COMPONENTS}
  D3D12_DS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D12_DS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT}
  D3D12_DS_OUTPUT_REGISTER_COUNT = 32;
  {$EXTERNALSYM D3D12_DS_OUTPUT_REGISTER_COUNT}
  D3D12_FLOAT16_FUSED_TOLERANCE_IN_ULP = 0.6;
  {$EXTERNALSYM D3D12_FLOAT16_FUSED_TOLERANCE_IN_ULP}
  D3D12_FLOAT32_MAX = 3.402823466e+38;
  {$EXTERNALSYM D3D12_FLOAT32_MAX}
  D3D12_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP = 0.6;
  {$EXTERNALSYM D3D12_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP}
  D3D12_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR = 2.4;
  {$EXTERNALSYM D3D12_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR}
  D3D12_FLOAT_TO_SRGB_EXPONENT_NUMERATOR = 1.0;
  {$EXTERNALSYM D3D12_FLOAT_TO_SRGB_EXPONENT_NUMERATOR}
  D3D12_FLOAT_TO_SRGB_OFFSET = 0.055;
  {$EXTERNALSYM D3D12_FLOAT_TO_SRGB_OFFSET}
  D3D12_FLOAT_TO_SRGB_SCALE_1 = 12.92;
  {$EXTERNALSYM D3D12_FLOAT_TO_SRGB_SCALE_1}
  D3D12_FLOAT_TO_SRGB_SCALE_2 = 1.055;
  {$EXTERNALSYM D3D12_FLOAT_TO_SRGB_SCALE_2}
  D3D12_FLOAT_TO_SRGB_THRESHOLD = 0.0031308;
  {$EXTERNALSYM D3D12_FLOAT_TO_SRGB_THRESHOLD}
  D3D12_FTOI_INSTRUCTION_MAX_INPUT = 2147483647.999;
  {$EXTERNALSYM D3D12_FTOI_INSTRUCTION_MAX_INPUT}
  D3D12_FTOI_INSTRUCTION_MIN_INPUT = 2147483648.999;
  {$EXTERNALSYM D3D12_FTOI_INSTRUCTION_MIN_INPUT}
  D3D12_FTOU_INSTRUCTION_MAX_INPUT = 4294967295.999;
  {$EXTERNALSYM D3D12_FTOU_INSTRUCTION_MAX_INPUT}
  D3D12_FTOU_INSTRUCTION_MIN_INPUT = 0.0;
  {$EXTERNALSYM D3D12_FTOU_INSTRUCTION_MIN_INPUT}
  D3D12_GS_INPUT_INSTANCE_ID_READS_PER_INST = 2;
  {$EXTERNALSYM D3D12_GS_INPUT_INSTANCE_ID_READS_PER_INST}
  D3D12_GS_INPUT_INSTANCE_ID_READ_PORTS = 1;
  {$EXTERNALSYM D3D12_GS_INPUT_INSTANCE_ID_READ_PORTS}
  D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENTS = 1;
  {$EXTERNALSYM D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENTS}
  D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT}
  D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COUNT = 1;
  {$EXTERNALSYM D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COUNT}
  D3D12_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS = 1;
  {$EXTERNALSYM D3D12_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS}
  D3D12_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D12_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT}
  D3D12_GS_INPUT_PRIM_CONST_REGISTER_COUNT = 1;
  {$EXTERNALSYM D3D12_GS_INPUT_PRIM_CONST_REGISTER_COUNT}
  D3D12_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST = 2;
  {$EXTERNALSYM D3D12_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST}
  D3D12_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS = 1;
  {$EXTERNALSYM D3D12_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS}
  D3D12_GS_INPUT_REGISTER_COMPONENTS = 4;
  {$EXTERNALSYM D3D12_GS_INPUT_REGISTER_COMPONENTS}
  D3D12_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D12_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT}
  D3D12_GS_INPUT_REGISTER_COUNT = 32;
  {$EXTERNALSYM D3D12_GS_INPUT_REGISTER_COUNT}
  D3D12_GS_INPUT_REGISTER_READS_PER_INST = 2;
  {$EXTERNALSYM D3D12_GS_INPUT_REGISTER_READS_PER_INST}
  D3D12_GS_INPUT_REGISTER_READ_PORTS = 1;
  {$EXTERNALSYM D3D12_GS_INPUT_REGISTER_READ_PORTS}
  D3D12_GS_INPUT_REGISTER_VERTICES = 32;
  {$EXTERNALSYM D3D12_GS_INPUT_REGISTER_VERTICES}
  D3D12_GS_MAX_INSTANCE_COUNT = 32;
  {$EXTERNALSYM D3D12_GS_MAX_INSTANCE_COUNT}
  D3D12_GS_MAX_OUTPUT_VERTEX_COUNT_ACROSS_INSTANCES = 1024;
  {$EXTERNALSYM D3D12_GS_MAX_OUTPUT_VERTEX_COUNT_ACROSS_INSTANCES}
  D3D12_GS_OUTPUT_ELEMENTS = 32;
  {$EXTERNALSYM D3D12_GS_OUTPUT_ELEMENTS}
  D3D12_GS_OUTPUT_REGISTER_COMPONENTS = 4;
  {$EXTERNALSYM D3D12_GS_OUTPUT_REGISTER_COMPONENTS}
  D3D12_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D12_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT}
  D3D12_GS_OUTPUT_REGISTER_COUNT = 32;
  {$EXTERNALSYM D3D12_GS_OUTPUT_REGISTER_COUNT}
  D3D12_HS_CONTROL_POINT_PHASE_INPUT_REGISTER_COUNT = 32;
  {$EXTERNALSYM D3D12_HS_CONTROL_POINT_PHASE_INPUT_REGISTER_COUNT}
  D3D12_HS_CONTROL_POINT_PHASE_OUTPUT_REGISTER_COUNT = 32;
  {$EXTERNALSYM D3D12_HS_CONTROL_POINT_PHASE_OUTPUT_REGISTER_COUNT}
  D3D12_HS_CONTROL_POINT_REGISTER_COMPONENTS = 4;
  {$EXTERNALSYM D3D12_HS_CONTROL_POINT_REGISTER_COMPONENTS}
  D3D12_HS_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D12_HS_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT}
  D3D12_HS_CONTROL_POINT_REGISTER_READS_PER_INST = 2;
  {$EXTERNALSYM D3D12_HS_CONTROL_POINT_REGISTER_READS_PER_INST}
  D3D12_HS_CONTROL_POINT_REGISTER_READ_PORTS = 1;
  {$EXTERNALSYM D3D12_HS_CONTROL_POINT_REGISTER_READ_PORTS}
  D3D12_HS_FORK_PHASE_INSTANCE_COUNT_UPPER_BOUND = $ffffffff;
  {$EXTERNALSYM D3D12_HS_FORK_PHASE_INSTANCE_COUNT_UPPER_BOUND}
  D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENTS = 1;
  {$EXTERNALSYM D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENTS}
  D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT}
  D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COUNT = 1;
  {$EXTERNALSYM D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COUNT}
  D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READS_PER_INST = 2;
  {$EXTERNALSYM D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READS_PER_INST}
  D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READ_PORTS = 1;
  {$EXTERNALSYM D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READ_PORTS}
  D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENTS = 1;
  {$EXTERNALSYM D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENTS}
  D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT}
  D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COUNT = 1;
  {$EXTERNALSYM D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COUNT}
  D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READS_PER_INST = 2;
  {$EXTERNALSYM D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READS_PER_INST}
  D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READ_PORTS = 1;
  {$EXTERNALSYM D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READ_PORTS}
  D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = 1;
  {$EXTERNALSYM D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS}
  D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT}
  D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = 1;
  {$EXTERNALSYM D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COUNT}
  D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = 2;
  {$EXTERNALSYM D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST}
  D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = 1;
  {$EXTERNALSYM D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS}
  D3D12_HS_JOIN_PHASE_INSTANCE_COUNT_UPPER_BOUND = $ffffffff;
  {$EXTERNALSYM D3D12_HS_JOIN_PHASE_INSTANCE_COUNT_UPPER_BOUND}
  D3D12_HS_MAXTESSFACTOR_LOWER_BOUND = 1.0;
  {$EXTERNALSYM D3D12_HS_MAXTESSFACTOR_LOWER_BOUND}
  D3D12_HS_MAXTESSFACTOR_UPPER_BOUND = 64.0;
  {$EXTERNALSYM D3D12_HS_MAXTESSFACTOR_UPPER_BOUND}
  D3D12_HS_OUTPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = 3968;
  {$EXTERNALSYM D3D12_HS_OUTPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS}
  D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENTS = 1;
  {$EXTERNALSYM D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENTS}
  D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENT_BIT_COUNT}
  D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COUNT = 1;
  {$EXTERNALSYM D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COUNT}
  D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READS_PER_INST = 2;
  {$EXTERNALSYM D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READS_PER_INST}
  D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READ_PORTS = 1;
  {$EXTERNALSYM D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READ_PORTS}
  D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = 4;
  {$EXTERNALSYM D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENTS}
  D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT}
  D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COUNT = 32;
  {$EXTERNALSYM D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COUNT}
  D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = 2;
  {$EXTERNALSYM D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST}
  D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = 1;
  {$EXTERNALSYM D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READ_PORTS}
  D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_SCALAR_COMPONENTS = 128;
  {$EXTERNALSYM D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_SCALAR_COMPONENTS}
  D3D12_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES = 0;
  {$EXTERNALSYM D3D12_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES}
  D3D12_IA_DEFAULT_PRIMITIVE_TOPOLOGY = 0;
  {$EXTERNALSYM D3D12_IA_DEFAULT_PRIMITIVE_TOPOLOGY}
  D3D12_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES = 0;
  {$EXTERNALSYM D3D12_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES}
  D3D12_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT = 1;
  {$EXTERNALSYM D3D12_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT}
  D3D12_IA_INSTANCE_ID_BIT_COUNT = 32;
  {$EXTERNALSYM D3D12_IA_INSTANCE_ID_BIT_COUNT}
  D3D12_IA_INTEGER_ARITHMETIC_BIT_COUNT = 32;
  {$EXTERNALSYM D3D12_IA_INTEGER_ARITHMETIC_BIT_COUNT}
  D3D12_IA_PATCH_MAX_CONTROL_POINT_COUNT = 32;
  {$EXTERNALSYM D3D12_IA_PATCH_MAX_CONTROL_POINT_COUNT}
  D3D12_IA_PRIMITIVE_ID_BIT_COUNT = 32;
  {$EXTERNALSYM D3D12_IA_PRIMITIVE_ID_BIT_COUNT}
  D3D12_IA_VERTEX_ID_BIT_COUNT = 32;
  {$EXTERNALSYM D3D12_IA_VERTEX_ID_BIT_COUNT}
  D3D12_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT = 32;
  {$EXTERNALSYM D3D12_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT}
  D3D12_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS = 128;
  {$EXTERNALSYM D3D12_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS}
  D3D12_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT = 32;
  {$EXTERNALSYM D3D12_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT}
  D3D12_INTEGER_DIVIDE_BY_ZERO_QUOTIENT = $ffffffff;
  {$EXTERNALSYM D3D12_INTEGER_DIVIDE_BY_ZERO_QUOTIENT}
  D3D12_INTEGER_DIVIDE_BY_ZERO_REMAINDER = $ffffffff;
  {$EXTERNALSYM D3D12_INTEGER_DIVIDE_BY_ZERO_REMAINDER}
  D3D12_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL = $ffffffff;
  {$EXTERNALSYM D3D12_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL}
  D3D12_KEEP_UNORDERED_ACCESS_VIEWS = $ffffffff;
  {$EXTERNALSYM D3D12_KEEP_UNORDERED_ACCESS_VIEWS}
  D3D12_LINEAR_GAMMA = 1.0;
  {$EXTERNALSYM D3D12_LINEAR_GAMMA}
  D3D12_MAJOR_VERSION = 12;
  {$EXTERNALSYM D3D12_MAJOR_VERSION}
  D3D12_MAX_BORDER_COLOR_COMPONENT = 1.0;
  {$EXTERNALSYM D3D12_MAX_BORDER_COLOR_COMPONENT}
  D3D12_MAX_DEPTH = 1.0;
  {$EXTERNALSYM D3D12_MAX_DEPTH}
  D3D12_MAX_LIVE_STATIC_SAMPLERS = 2032;
  {$EXTERNALSYM D3D12_MAX_LIVE_STATIC_SAMPLERS}
  D3D12_MAX_MAXANISOTROPY = 16;
  {$EXTERNALSYM D3D12_MAX_MAXANISOTROPY}
  D3D12_MAX_MULTISAMPLE_SAMPLE_COUNT = 32;
  {$EXTERNALSYM D3D12_MAX_MULTISAMPLE_SAMPLE_COUNT}
  D3D12_MAX_POSITION_VALUE = 3.402823466e+34;
  {$EXTERNALSYM D3D12_MAX_POSITION_VALUE}
  D3D12_MAX_ROOT_COST = 64;
  {$EXTERNALSYM D3D12_MAX_ROOT_COST}
  D3D12_MAX_SHADER_VISIBLE_DESCRIPTOR_HEAP_SIZE_TIER_1 = 1000000;
  {$EXTERNALSYM D3D12_MAX_SHADER_VISIBLE_DESCRIPTOR_HEAP_SIZE_TIER_1}
  D3D12_MAX_SHADER_VISIBLE_DESCRIPTOR_HEAP_SIZE_TIER_2 = 1000000;
  {$EXTERNALSYM D3D12_MAX_SHADER_VISIBLE_DESCRIPTOR_HEAP_SIZE_TIER_2}
  D3D12_MAX_SHADER_VISIBLE_SAMPLER_HEAP_SIZE = 2048;
  {$EXTERNALSYM D3D12_MAX_SHADER_VISIBLE_SAMPLER_HEAP_SIZE}
  D3D12_MAX_TEXTURE_DIMENSION_2_TO_EXP = 17;
  {$EXTERNALSYM D3D12_MAX_TEXTURE_DIMENSION_2_TO_EXP}
  D3D12_MINOR_VERSION = 0;
  {$EXTERNALSYM D3D12_MINOR_VERSION}
  D3D12_MIN_BORDER_COLOR_COMPONENT = 0.0;
  {$EXTERNALSYM D3D12_MIN_BORDER_COLOR_COMPONENT}
  D3D12_MIN_DEPTH = 0.0;
  {$EXTERNALSYM D3D12_MIN_DEPTH}
  D3D12_MIN_MAXANISOTROPY = 0;
  {$EXTERNALSYM D3D12_MIN_MAXANISOTROPY}
  D3D12_MIP_LOD_BIAS_MAX = 15.99;
  {$EXTERNALSYM D3D12_MIP_LOD_BIAS_MAX}
  D3D12_MIP_LOD_BIAS_MIN = 16.0;
  {$EXTERNALSYM D3D12_MIP_LOD_BIAS_MIN}
  D3D12_MIP_LOD_FRACTIONAL_BIT_COUNT = 8;
  {$EXTERNALSYM D3D12_MIP_LOD_FRACTIONAL_BIT_COUNT}
  D3D12_MIP_LOD_RANGE_BIT_COUNT = 8;
  {$EXTERNALSYM D3D12_MIP_LOD_RANGE_BIT_COUNT}
  D3D12_MULTISAMPLE_ANTIALIAS_LINE_WIDTH = 1.4;
  {$EXTERNALSYM D3D12_MULTISAMPLE_ANTIALIAS_LINE_WIDTH}
  D3D12_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT = 0;
  {$EXTERNALSYM D3D12_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT}
  D3D12_OS_RESERVED_REGISTER_SPACE_VALUES_END = $fffffff;
  {$EXTERNALSYM D3D12_OS_RESERVED_REGISTER_SPACE_VALUES_END}
  D3D12_OS_RESERVED_REGISTER_SPACE_VALUES_START = $fffffff8;
  {$EXTERNALSYM D3D12_OS_RESERVED_REGISTER_SPACE_VALUES_START}
  D3D12_PACKED_TILE = $ffffffff;
  {$EXTERNALSYM D3D12_PACKED_TILE}
  D3D12_PIXEL_ADDRESS_RANGE_BIT_COUNT = 15;
  {$EXTERNALSYM D3D12_PIXEL_ADDRESS_RANGE_BIT_COUNT}
  D3D12_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT = 16;
  {$EXTERNALSYM D3D12_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT}
  D3D12_PS_CS_UAV_REGISTER_COMPONENTS = 1;
  {$EXTERNALSYM D3D12_PS_CS_UAV_REGISTER_COMPONENTS}
  D3D12_PS_CS_UAV_REGISTER_COUNT = 8;
  {$EXTERNALSYM D3D12_PS_CS_UAV_REGISTER_COUNT}
  D3D12_PS_CS_UAV_REGISTER_READS_PER_INST = 1;
  {$EXTERNALSYM D3D12_PS_CS_UAV_REGISTER_READS_PER_INST}
  D3D12_PS_CS_UAV_REGISTER_READ_PORTS = 1;
  {$EXTERNALSYM D3D12_PS_CS_UAV_REGISTER_READ_PORTS}
  D3D12_PS_FRONTFACING_DEFAULT_VALUE = $ffffffff;
  {$EXTERNALSYM D3D12_PS_FRONTFACING_DEFAULT_VALUE}
  D3D12_PS_FRONTFACING_FALSE_VALUE = 0;
  {$EXTERNALSYM D3D12_PS_FRONTFACING_FALSE_VALUE}
  D3D12_PS_FRONTFACING_TRUE_VALUE = $ffffffff;
  {$EXTERNALSYM D3D12_PS_FRONTFACING_TRUE_VALUE}
  D3D12_PS_INPUT_REGISTER_COMPONENTS = 4;
  {$EXTERNALSYM D3D12_PS_INPUT_REGISTER_COMPONENTS}
  D3D12_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D12_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT}
  D3D12_PS_INPUT_REGISTER_COUNT = 32;
  {$EXTERNALSYM D3D12_PS_INPUT_REGISTER_COUNT}
  D3D12_PS_INPUT_REGISTER_READS_PER_INST = 2;
  {$EXTERNALSYM D3D12_PS_INPUT_REGISTER_READS_PER_INST}
  D3D12_PS_INPUT_REGISTER_READ_PORTS = 1;
  {$EXTERNALSYM D3D12_PS_INPUT_REGISTER_READ_PORTS}
  D3D12_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT = 0.0;
  {$EXTERNALSYM D3D12_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT}
  D3D12_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS = 1;
  {$EXTERNALSYM D3D12_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS}
  D3D12_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D12_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT}
  D3D12_PS_OUTPUT_DEPTH_REGISTER_COUNT = 1;
  {$EXTERNALSYM D3D12_PS_OUTPUT_DEPTH_REGISTER_COUNT}
  D3D12_PS_OUTPUT_MASK_REGISTER_COMPONENTS = 1;
  {$EXTERNALSYM D3D12_PS_OUTPUT_MASK_REGISTER_COMPONENTS}
  D3D12_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D12_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT}
  D3D12_PS_OUTPUT_MASK_REGISTER_COUNT = 1;
  {$EXTERNALSYM D3D12_PS_OUTPUT_MASK_REGISTER_COUNT}
  D3D12_PS_OUTPUT_REGISTER_COMPONENTS = 4;
  {$EXTERNALSYM D3D12_PS_OUTPUT_REGISTER_COMPONENTS}
  D3D12_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D12_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT}
  D3D12_PS_OUTPUT_REGISTER_COUNT = 8;
  {$EXTERNALSYM D3D12_PS_OUTPUT_REGISTER_COUNT}
  D3D12_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT = 0.5;
  {$EXTERNALSYM D3D12_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT}
  D3D12_RAW_UAV_SRV_BYTE_ALIGNMENT = 16;
  {$EXTERNALSYM D3D12_RAW_UAV_SRV_BYTE_ALIGNMENT}
  D3D12_REQ_BLEND_OBJECT_COUNT_PER_DEVICE = 4096;
  {$EXTERNALSYM D3D12_REQ_BLEND_OBJECT_COUNT_PER_DEVICE}
  D3D12_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP = 27;
  {$EXTERNALSYM D3D12_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP}
  D3D12_REQ_CONSTANT_BUFFER_ELEMENT_COUNT = 4096;
  {$EXTERNALSYM D3D12_REQ_CONSTANT_BUFFER_ELEMENT_COUNT}
  D3D12_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE = 4096;
  {$EXTERNALSYM D3D12_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE}
  D3D12_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 32;
  {$EXTERNALSYM D3D12_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP}
  D3D12_REQ_DRAW_VERTEX_COUNT_2_TO_EXP = 32;
  {$EXTERNALSYM D3D12_REQ_DRAW_VERTEX_COUNT_2_TO_EXP}
  D3D12_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION = 16384;
  {$EXTERNALSYM D3D12_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION}
  D3D12_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT = 1024;
  {$EXTERNALSYM D3D12_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT}
  D3D12_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT = 4096;
  {$EXTERNALSYM D3D12_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT}
  D3D12_REQ_MAXANISOTROPY = 16;
  {$EXTERNALSYM D3D12_REQ_MAXANISOTROPY}
  D3D12_REQ_MIP_LEVELS = 15;
  {$EXTERNALSYM D3D12_REQ_MIP_LEVELS}
  D3D12_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES = 2048;
  {$EXTERNALSYM D3D12_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES}
  D3D12_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE = 4096;
  {$EXTERNALSYM D3D12_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE}
  D3D12_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH = 16384;
  {$EXTERNALSYM D3D12_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH}
  D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM = 128;
  {$EXTERNALSYM D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM}
  D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM = 0.25;
  {$EXTERNALSYM D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM}
  D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_C_TERM = 2048;
  {$EXTERNALSYM D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_C_TERM}
  D3D12_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP = 20;
  {$EXTERNALSYM D3D12_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP}
  D3D12_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE = 4096;
  {$EXTERNALSYM D3D12_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE}
  D3D12_REQ_SUBRESOURCES = 30720;
  {$EXTERNALSYM D3D12_REQ_SUBRESOURCES}
  D3D12_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION = 2048;
  {$EXTERNALSYM D3D12_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION}
  D3D12_REQ_TEXTURE1D_U_DIMENSION = 16384;
  {$EXTERNALSYM D3D12_REQ_TEXTURE1D_U_DIMENSION}
  D3D12_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION = 2048;
  {$EXTERNALSYM D3D12_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION}
  D3D12_REQ_TEXTURE2D_U_OR_V_DIMENSION = 16384;
  {$EXTERNALSYM D3D12_REQ_TEXTURE2D_U_OR_V_DIMENSION}
  D3D12_REQ_TEXTURE3D_U_V_OR_W_DIMENSION = 2048;
  {$EXTERNALSYM D3D12_REQ_TEXTURE3D_U_V_OR_W_DIMENSION}
  D3D12_REQ_TEXTURECUBE_DIMENSION = 16384;
  {$EXTERNALSYM D3D12_REQ_TEXTURECUBE_DIMENSION}
  D3D12_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL = 0;
  {$EXTERNALSYM D3D12_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL}
  D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES = $ffffffff;
  {$EXTERNALSYM D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES}
  D3D12_SHADER_MAJOR_VERSION = 5;
  {$EXTERNALSYM D3D12_SHADER_MAJOR_VERSION}
  D3D12_SHADER_MAX_INSTANCES = 65535;
  {$EXTERNALSYM D3D12_SHADER_MAX_INSTANCES}
  D3D12_SHADER_MAX_INTERFACES = 253;
  {$EXTERNALSYM D3D12_SHADER_MAX_INTERFACES}
  D3D12_SHADER_MAX_INTERFACE_CALL_SITES = 4096;
  {$EXTERNALSYM D3D12_SHADER_MAX_INTERFACE_CALL_SITES}
  D3D12_SHADER_MAX_TYPES = 65535;
  {$EXTERNALSYM D3D12_SHADER_MAX_TYPES}
  D3D12_SHADER_MINOR_VERSION = 1;
  {$EXTERNALSYM D3D12_SHADER_MINOR_VERSION}
  D3D12_SHIFT_INSTRUCTION_PAD_VALUE = 0;
  {$EXTERNALSYM D3D12_SHIFT_INSTRUCTION_PAD_VALUE}
  D3D12_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT = 5;
  {$EXTERNALSYM D3D12_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT}
  D3D12_SIMULTANEOUS_RENDER_TARGET_COUNT = 8;
  {$EXTERNALSYM D3D12_SIMULTANEOUS_RENDER_TARGET_COUNT}
  D3D12_SMALL_MSAA_RESOURCE_PLACEMENT_ALIGNMENT = 65536;
  {$EXTERNALSYM D3D12_SMALL_MSAA_RESOURCE_PLACEMENT_ALIGNMENT}
  D3D12_SMALL_RESOURCE_PLACEMENT_ALIGNMENT = 4096;
  {$EXTERNALSYM D3D12_SMALL_RESOURCE_PLACEMENT_ALIGNMENT}
  D3D12_SO_BUFFER_MAX_STRIDE_IN_BYTES = 2048;
  {$EXTERNALSYM D3D12_SO_BUFFER_MAX_STRIDE_IN_BYTES}
  D3D12_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES = 512;
  {$EXTERNALSYM D3D12_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES}
  D3D12_SO_BUFFER_SLOT_COUNT = 4;
  {$EXTERNALSYM D3D12_SO_BUFFER_SLOT_COUNT}
  D3D12_SO_DDI_REGISTER_INDEX_DENOTING_GAP = $ffffffff;
  {$EXTERNALSYM D3D12_SO_DDI_REGISTER_INDEX_DENOTING_GAP}
  D3D12_SO_NO_RASTERIZED_STREAM = $ffffffff;
  {$EXTERNALSYM D3D12_SO_NO_RASTERIZED_STREAM}
  D3D12_SO_OUTPUT_COMPONENT_COUNT = 128;
  {$EXTERNALSYM D3D12_SO_OUTPUT_COMPONENT_COUNT}
  D3D12_SO_STREAM_COUNT = 4;
  {$EXTERNALSYM D3D12_SO_STREAM_COUNT}
  D3D12_SPEC_DATE_DAY = 14;
  {$EXTERNALSYM D3D12_SPEC_DATE_DAY}
  D3D12_SPEC_DATE_MONTH = 11;
  {$EXTERNALSYM D3D12_SPEC_DATE_MONTH}
  D3D12_SPEC_DATE_YEAR = 2014;
  {$EXTERNALSYM D3D12_SPEC_DATE_YEAR}
  D3D12_SPEC_VERSION = 1.16;
  {$EXTERNALSYM D3D12_SPEC_VERSION}
  D3D12_SRGB_GAMMA = 2.2;
  {$EXTERNALSYM D3D12_SRGB_GAMMA}
  D3D12_SRGB_TO_FLOAT_DENOMINATOR_1 = 12.92;
  {$EXTERNALSYM D3D12_SRGB_TO_FLOAT_DENOMINATOR_1}
  D3D12_SRGB_TO_FLOAT_DENOMINATOR_2 = 1.055;
  {$EXTERNALSYM D3D12_SRGB_TO_FLOAT_DENOMINATOR_2}
  D3D12_SRGB_TO_FLOAT_EXPONENT = 2.4;
  {$EXTERNALSYM D3D12_SRGB_TO_FLOAT_EXPONENT}
  D3D12_SRGB_TO_FLOAT_OFFSET = 0.055;
  {$EXTERNALSYM D3D12_SRGB_TO_FLOAT_OFFSET}
  D3D12_SRGB_TO_FLOAT_THRESHOLD = 0.04045;
  {$EXTERNALSYM D3D12_SRGB_TO_FLOAT_THRESHOLD}
  D3D12_SRGB_TO_FLOAT_TOLERANCE_IN_ULP = 0.5;
  {$EXTERNALSYM D3D12_SRGB_TO_FLOAT_TOLERANCE_IN_ULP}
  D3D12_STANDARD_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D12_STANDARD_COMPONENT_BIT_COUNT}
  D3D12_STANDARD_COMPONENT_BIT_COUNT_DOUBLED = 64;
  {$EXTERNALSYM D3D12_STANDARD_COMPONENT_BIT_COUNT_DOUBLED}
  D3D12_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE = 4;
  {$EXTERNALSYM D3D12_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE}
  D3D12_STANDARD_PIXEL_COMPONENT_COUNT = 128;
  {$EXTERNALSYM D3D12_STANDARD_PIXEL_COMPONENT_COUNT}
  D3D12_STANDARD_PIXEL_ELEMENT_COUNT = 32;
  {$EXTERNALSYM D3D12_STANDARD_PIXEL_ELEMENT_COUNT}
  D3D12_STANDARD_VECTOR_SIZE = 4;
  {$EXTERNALSYM D3D12_STANDARD_VECTOR_SIZE}
  D3D12_STANDARD_VERTEX_ELEMENT_COUNT = 32;
  {$EXTERNALSYM D3D12_STANDARD_VERTEX_ELEMENT_COUNT}
  D3D12_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT = 64;
  {$EXTERNALSYM D3D12_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT}
  D3D12_SUBPIXEL_FRACTIONAL_BIT_COUNT = 8;
  {$EXTERNALSYM D3D12_SUBPIXEL_FRACTIONAL_BIT_COUNT}
  D3D12_SUBTEXEL_FRACTIONAL_BIT_COUNT = 8;
  {$EXTERNALSYM D3D12_SUBTEXEL_FRACTIONAL_BIT_COUNT}
  D3D12_SYSTEM_RESERVED_REGISTER_SPACE_VALUES_END = $ffffffff;
  {$EXTERNALSYM D3D12_SYSTEM_RESERVED_REGISTER_SPACE_VALUES_END}
  D3D12_SYSTEM_RESERVED_REGISTER_SPACE_VALUES_START = $fffffff0;
  {$EXTERNALSYM D3D12_SYSTEM_RESERVED_REGISTER_SPACE_VALUES_START}
  D3D12_TESSELLATOR_MAX_EVEN_TESSELLATION_FACTOR = 64;
  {$EXTERNALSYM D3D12_TESSELLATOR_MAX_EVEN_TESSELLATION_FACTOR}
  D3D12_TESSELLATOR_MAX_ISOLINE_DENSITY_TESSELLATION_FACTOR = 64;
  {$EXTERNALSYM D3D12_TESSELLATOR_MAX_ISOLINE_DENSITY_TESSELLATION_FACTOR}
  D3D12_TESSELLATOR_MAX_ODD_TESSELLATION_FACTOR = 63;
  {$EXTERNALSYM D3D12_TESSELLATOR_MAX_ODD_TESSELLATION_FACTOR}
  D3D12_TESSELLATOR_MAX_TESSELLATION_FACTOR = 64;
  {$EXTERNALSYM D3D12_TESSELLATOR_MAX_TESSELLATION_FACTOR}
  D3D12_TESSELLATOR_MIN_EVEN_TESSELLATION_FACTOR = 2;
  {$EXTERNALSYM D3D12_TESSELLATOR_MIN_EVEN_TESSELLATION_FACTOR}
  D3D12_TESSELLATOR_MIN_ISOLINE_DENSITY_TESSELLATION_FACTOR = 1;
  {$EXTERNALSYM D3D12_TESSELLATOR_MIN_ISOLINE_DENSITY_TESSELLATION_FACTOR}
  D3D12_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR = 1;
  {$EXTERNALSYM D3D12_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR}
  D3D12_TEXEL_ADDRESS_RANGE_BIT_COUNT = 16;
  {$EXTERNALSYM D3D12_TEXEL_ADDRESS_RANGE_BIT_COUNT}
  D3D12_TEXTURE_DATA_PITCH_ALIGNMENT = 256;
  {$EXTERNALSYM D3D12_TEXTURE_DATA_PITCH_ALIGNMENT}
  D3D12_TEXTURE_DATA_PLACEMENT_ALIGNMENT = 512;
  {$EXTERNALSYM D3D12_TEXTURE_DATA_PLACEMENT_ALIGNMENT}
  D3D12_TILED_RESOURCE_TILE_SIZE_IN_BYTES = 65536;
  {$EXTERNALSYM D3D12_TILED_RESOURCE_TILE_SIZE_IN_BYTES}
  D3D12_UAV_COUNTER_PLACEMENT_ALIGNMENT = 4096;
  {$EXTERNALSYM D3D12_UAV_COUNTER_PLACEMENT_ALIGNMENT}
  D3D12_UAV_SLOT_COUNT = 64;
  {$EXTERNALSYM D3D12_UAV_SLOT_COUNT}
  D3D12_UNBOUND_MEMORY_ACCESS_RESULT = 0;
  {$EXTERNALSYM D3D12_UNBOUND_MEMORY_ACCESS_RESULT}
  D3D12_VIEWPORT_AND_SCISSORRECT_MAX_INDEX = 15;
  {$EXTERNALSYM D3D12_VIEWPORT_AND_SCISSORRECT_MAX_INDEX}
  D3D12_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE = 16;
  {$EXTERNALSYM D3D12_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE}
  D3D12_VIEWPORT_BOUNDS_MAX = 32767;
  {$EXTERNALSYM D3D12_VIEWPORT_BOUNDS_MAX}
  D3D12_VIEWPORT_BOUNDS_MIN = -32768;
  {$EXTERNALSYM D3D12_VIEWPORT_BOUNDS_MIN}
  D3D12_VS_INPUT_REGISTER_COMPONENTS = 4;
  {$EXTERNALSYM D3D12_VS_INPUT_REGISTER_COMPONENTS}
  D3D12_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D12_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT}
  D3D12_VS_INPUT_REGISTER_COUNT = 32;
  {$EXTERNALSYM D3D12_VS_INPUT_REGISTER_COUNT}
  D3D12_VS_INPUT_REGISTER_READS_PER_INST = 2;
  {$EXTERNALSYM D3D12_VS_INPUT_REGISTER_READS_PER_INST}
  D3D12_VS_INPUT_REGISTER_READ_PORTS = 1;
  {$EXTERNALSYM D3D12_VS_INPUT_REGISTER_READ_PORTS}
  D3D12_VS_OUTPUT_REGISTER_COMPONENTS = 4;
  {$EXTERNALSYM D3D12_VS_OUTPUT_REGISTER_COMPONENTS}
  D3D12_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
  {$EXTERNALSYM D3D12_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT}
  D3D12_VS_OUTPUT_REGISTER_COUNT = 32;
  {$EXTERNALSYM D3D12_VS_OUTPUT_REGISTER_COUNT}
  D3D12_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT = 10;
  {$EXTERNALSYM D3D12_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT}
  D3D12_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 25;
  {$EXTERNALSYM D3D12_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP}
  D3D12_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP = 25;
  {$EXTERNALSYM D3D12_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP}

  {$EXTERNALSYM D3D12_SHADER_COMPONENT_MAPPING_MASK}
  D3D12_SHADER_COMPONENT_MAPPING_MASK = $7;
  {$EXTERNALSYM D3D12_SHADER_COMPONENT_MAPPING_SHIFT}
  D3D12_SHADER_COMPONENT_MAPPING_SHIFT = 3;
  {$EXTERNALSYM D3D12_SHADER_COMPONENT_MAPPING_ALWAYS_SET_BIT_AVOIDING_ZEROMEM_MISTAKES}
  D3D12_SHADER_COMPONENT_MAPPING_ALWAYS_SET_BIT_AVOIDING_ZEROMEM_MISTAKES = (1 shl (D3D12_SHADER_COMPONENT_MAPPING_SHIFT * 4));

  {$EXTERNALSYM D3D12_FILTER_REDUCTION_TYPE_MASK}
  D3D12_FILTER_REDUCTION_TYPE_MASK = $3;
  {$EXTERNALSYM D3D12_FILTER_REDUCTION_TYPE_SHIFT}
  D3D12_FILTER_REDUCTION_TYPE_SHIFT = 7;
  {$EXTERNALSYM D3D12_FILTER_TYPE_MASK}
  D3D12_FILTER_TYPE_MASK = $3;
  {$EXTERNALSYM D3D12_MIN_FILTER_SHIFT}
  D3D12_MIN_FILTER_SHIFT = 4;
  {$EXTERNALSYM D3D12_MAG_FILTER_SHIFT}
  D3D12_MAG_FILTER_SHIFT = 2;
  {$EXTERNALSYM D3D12_MIP_FILTER_SHIFT}
  D3D12_MIP_FILTER_SHIFT = 0;
  {$EXTERNALSYM D3D12_ANISOTROPIC_FILTERING_BIT}
  D3D12_ANISOTROPIC_FILTERING_BIT = $40;

type

  //array types to be used on functions definitions
  TFourSingleArray = array [0..3] of Single;
  TFourUIntArray = array [0..3] of UInt;

{ Forward Declarations }
  ID3D12Object = interface;
  ID3D12DeviceChild = interface;
  ID3D12RootSignature = interface;
  ID3D12RootSignatureDeserializer = interface;
  ID3D12Pageable = interface;
  ID3D12Heap = interface;
  ID3D12Resource = interface;
  ID3D12CommandAllocator = interface;
  ID3D12Fence = interface;
  ID3D12PipelineState = interface;
  ID3D12DescriptorHeap = interface;
  ID3D12QueryHeap = interface;
  ID3D12CommandSignature = interface;
  ID3D12CommandList = interface;
  ID3D12GraphicsCommandList = interface;
  ID3D12CommandQueue = interface;
  ID3D12Device = interface;

  {$EXTERNALSYM D3D12_GPU_VIRTUAL_ADDRESS}
  D3D12_GPU_VIRTUAL_ADDRESS = UINT64;
  TD3D12GpuVirtualAddress = D3D12_GPU_VIRTUAL_ADDRESS;

  {$EXTERNALSYM D3D12_COMMAND_LIST_TYPE}
  D3D12_COMMAND_LIST_TYPE = (
    {$EXTERNALSYM D3D12_COMMAND_LIST_TYPE_DIRECT}
    D3D12_COMMAND_LIST_TYPE_DIRECT	= 0,
    {$EXTERNALSYM D3D12_COMMAND_LIST_TYPE_BUNDLE}
    D3D12_COMMAND_LIST_TYPE_BUNDLE	= 1,
    {$EXTERNALSYM D3D12_COMMAND_LIST_TYPE_COMPUTE}
    D3D12_COMMAND_LIST_TYPE_COMPUTE	= 2,
    {$EXTERNALSYM D3D12_COMMAND_LIST_TYPE_COPY}
    D3D12_COMMAND_LIST_TYPE_COPY	= 3);
  TD3D12CommandListType = D3D12_COMMAND_LIST_TYPE;

  {$EXTERNALSYM D3D12_COMMAND_QUEUE_FLAGS}
  D3D12_COMMAND_QUEUE_FLAGS = (
    {$EXTERNALSYM D3D12_COMMAND_QUEUE_FLAG_NONE}
    D3D12_COMMAND_QUEUE_FLAG_NONE	= 0,
    {$EXTERNALSYM D3D12_COMMAND_QUEUE_FLAG_DISABLE_GPU_TIMEOUT}
    D3D12_COMMAND_QUEUE_FLAG_DISABLE_GPU_TIMEOUT	= $1);
  TD3D12CommandQueueFlags = D3D12_COMMAND_QUEUE_FLAGS;

  {$EXTERNALSYM D3D12_COMMAND_QUEUE_PRIORITY}
  D3D12_COMMAND_QUEUE_PRIORITY = (
    {$EXTERNALSYM D3D12_COMMAND_QUEUE_PRIORITY_NORMAL}
    D3D12_COMMAND_QUEUE_PRIORITY_NORMAL	= 0,
    {$EXTERNALSYM D3D12_COMMAND_QUEUE_PRIORITY_HIGH}
    D3D12_COMMAND_QUEUE_PRIORITY_HIGH	= 100);
  TD3D12CommandQueuePriority = D3D12_COMMAND_QUEUE_PRIORITY;

  D3D12_COMMAND_QUEUE_DESC = record
    _Type: D3D12_COMMAND_LIST_TYPE;
    Priority: Integer;
    Flags: D3D12_COMMAND_QUEUE_FLAGS;
    NodeMask: UINT;
  end;
  {$EXTERNALSYM D3D12_COMMAND_QUEUE_DESC}
  TD3D12CommandQueueDesc = D3D12_COMMAND_QUEUE_DESC;
  PD3D12CommandQueueDesc = ^TD3D12CommandQueueDesc;

  {$EXTERNALSYM D3D12_PRIMITIVE_TOPOLOGY_TYPE}
  D3D12_PRIMITIVE_TOPOLOGY_TYPE = (
    {$EXTERNALSYM D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED}
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED	= 0,
    {$EXTERNALSYM D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT}
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT	= 1,
    {$EXTERNALSYM D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE}
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE	= 2,
    {$EXTERNALSYM D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE}
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE	= 3,
    {$EXTERNALSYM D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH}
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH	= 4);
  TD3D12PrimitiveTopologyType = D3D12_PRIMITIVE_TOPOLOGY_TYPE;

  {$EXTERNALSYM D3D12_INPUT_CLASSIFICATION}
  D3D12_INPUT_CLASSIFICATION = (
    {$EXTERNALSYM D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA}
    D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA	= 0,
    {$EXTERNALSYM D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA}
    D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA	= 1);
  TD3D12InputClassification = D3D12_INPUT_CLASSIFICATION;

  D3D12_INPUT_ELEMENT_DESC = record
    SemanticName: LPCSTR;
    SemanticIndex: UINT;
    Format: DXGI_FORMAT;
    InputSlot: UINT;
    AlignedByteOffset: UINT;
    InputSlotClass: D3D12_INPUT_CLASSIFICATION;
    InstanceDataStepRate: UINT;
  end;
  {$EXTERNALSYM D3D12_INPUT_ELEMENT_DESC}
  TD3D12InputElementDesc = D3D12_INPUT_ELEMENT_DESC;
  PD3D12InputElementDesc = ^TD3D12InputElementDesc;

  {$EXTERNALSYM D3D12_FILL_MODE}
  D3D12_FILL_MODE = (
    {$EXTERNALSYM D3D12_FILL_MODE_WIREFRAME}
    D3D12_FILL_MODE_WIREFRAME	= 2,
    {$EXTERNALSYM D3D12_FILL_MODE_SOLID}
    D3D12_FILL_MODE_SOLID	= 3);
  TD3D12FillMode = D3D12_FILL_MODE;

  {$EXTERNALSYM D3D12_PRIMITIVE_TOPOLOGY}
  D3D12_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY;
  TD3D12PrimitiveTopology = D3D12_PRIMITIVE_TOPOLOGY;

  {$EXTERNALSYM D3D12_PRIMITIVE}
  D3D12_PRIMITIVE = D3D_PRIMITIVE;
  TD3D12Primitive = D3D12_PRIMITIVE;

  {$EXTERNALSYM D3D12_CULL_MODE}
  D3D12_CULL_MODE = (
    {$EXTERNALSYM D3D12_CULL_MODE_NONE}
    D3D12_CULL_MODE_NONE	= 1,
    {$EXTERNALSYM D3D12_CULL_MODE_FRONT}
    D3D12_CULL_MODE_FRONT	= 2,
    {$EXTERNALSYM D3D12_CULL_MODE_BACK}
    D3D12_CULL_MODE_BACK	= 3);
  TD3D12CullMode = D3D12_CULL_MODE;

  D3D12_SO_DECLARATION_ENTRY = record
    Stream: UINT;
    SemanticName: LPCSTR;
    SemanticIndex: UINT;
    StartComponent: BYTE;
    ComponentCount: BYTE;
    OutputSlot: BYTE;
  end;
  {$EXTERNALSYM D3D12_SO_DECLARATION_ENTRY}
  TD3D12SoDeclarationEntry = D3D12_SO_DECLARATION_ENTRY;
  PD3D12SoDeclarationEntry = ^TD3D12SoDeclarationEntry;

  D3D12_VIEWPORT = record
    TopLeftX: Single;
    TopLeftY: Single;
    Width: Single;
    Height: Single;
    MinDepth: Single;
    MaxDepth: Single;
  end;
  {$EXTERNALSYM D3D12_VIEWPORT}
  TD3D12Viewport = D3D12_VIEWPORT;
  PD3D12Viewport = ^TD3D12Viewport;

  {$EXTERNALSYM D3D12_RECT}
  D3D12_RECT = TRECT;
  TD3D12Rect = D3D12_RECT;
  PD3D12Rect = ^TD3D12Rect;

  D3D12_BOX = record
    left: UINT;
    top: UINT;
    front: UINT;
    right: UINT;
    bottom: UINT;
    back: UINT;
  end;
  {$EXTERNALSYM D3D12_BOX}
  TD3D12Box = D3D12_BOX;
  PD3D12Box = ^TD3D12Box;

  {$EXTERNALSYM D3D12_COMPARISON_FUNC}
  D3D12_COMPARISON_FUNC = (
    {$EXTERNALSYM D3D12_COMPARISON_FUNC_NEVER}
    D3D12_COMPARISON_FUNC_NEVER	= 1,
    {$EXTERNALSYM D3D12_COMPARISON_FUNC_LESS}
    D3D12_COMPARISON_FUNC_LESS	= 2,
    {$EXTERNALSYM D3D12_COMPARISON_FUNC_EQUAL}
    D3D12_COMPARISON_FUNC_EQUAL	= 3,
    {$EXTERNALSYM D3D12_COMPARISON_FUNC_LESS_EQUAL}
    D3D12_COMPARISON_FUNC_LESS_EQUAL	= 4,
    {$EXTERNALSYM D3D12_COMPARISON_FUNC_GREATER}
    D3D12_COMPARISON_FUNC_GREATER	= 5,
    {$EXTERNALSYM D3D12_COMPARISON_FUNC_NOT_EQUAL}
    D3D12_COMPARISON_FUNC_NOT_EQUAL	= 6,
    {$EXTERNALSYM D3D12_COMPARISON_FUNC_GREATER_EQUAL}
    D3D12_COMPARISON_FUNC_GREATER_EQUAL	= 7,
    {$EXTERNALSYM D3D12_COMPARISON_FUNC_ALWAYS}
    D3D12_COMPARISON_FUNC_ALWAYS	= 8);
  TD3D12ComparisonFunc = D3D12_COMPARISON_FUNC;

  {$EXTERNALSYM D3D12_DEPTH_WRITE_MASK}
  D3D12_DEPTH_WRITE_MASK = (
    {$EXTERNALSYM D3D12_DEPTH_WRITE_MASK_ZERO}
    D3D12_DEPTH_WRITE_MASK_ZERO	= 0,
    {$EXTERNALSYM D3D12_DEPTH_WRITE_MASK_ALL}
    D3D12_DEPTH_WRITE_MASK_ALL	= 1);
  TD3D12DepthWriteMask = D3D12_DEPTH_WRITE_MASK;

  {$EXTERNALSYM D3D12_STENCIL_OP}
  D3D12_STENCIL_OP = (
    {$EXTERNALSYM D3D12_STENCIL_OP_KEEP}
    D3D12_STENCIL_OP_KEEP	= 1,
    {$EXTERNALSYM D3D12_STENCIL_OP_ZERO}
    D3D12_STENCIL_OP_ZERO	= 2,
    {$EXTERNALSYM D3D12_STENCIL_OP_REPLACE}
    D3D12_STENCIL_OP_REPLACE	= 3,
    {$EXTERNALSYM D3D12_STENCIL_OP_INCR_SAT}
    D3D12_STENCIL_OP_INCR_SAT	= 4,
    {$EXTERNALSYM D3D12_STENCIL_OP_DECR_SAT}
    D3D12_STENCIL_OP_DECR_SAT	= 5,
    {$EXTERNALSYM D3D12_STENCIL_OP_INVERT}
    D3D12_STENCIL_OP_INVERT	= 6,
    {$EXTERNALSYM D3D12_STENCIL_OP_INCR}
    D3D12_STENCIL_OP_INCR	= 7,
    {$EXTERNALSYM D3D12_STENCIL_OP_DECR}
    D3D12_STENCIL_OP_DECR	= 8);
  TD3D12StencilOp = D3D12_STENCIL_OP;

  D3D12_DEPTH_STENCILOP_DESC = record
    StencilFailOp: D3D12_STENCIL_OP;
    StencilDepthFailOp: D3D12_STENCIL_OP;
    StencilPassOp: D3D12_STENCIL_OP;
    StencilFunc: D3D12_COMPARISON_FUNC;
  end;
  {$EXTERNALSYM D3D12_DEPTH_STENCILOP_DESC}
  TD3D12DepthStencilopDesc = D3D12_DEPTH_STENCILOP_DESC;
  PD3D12DepthStencilopDesc = ^TD3D12DepthStencilopDesc;

  D3D12_DEPTH_STENCIL_DESC = record
    DepthEnable: BOOL;
    DepthWriteMask: D3D12_DEPTH_WRITE_MASK;
    DepthFunc: D3D12_COMPARISON_FUNC;
    StencilEnable: BOOL;
    StencilReadMask: UINT8;
    StencilWriteMask: UINT8;
    FrontFace: D3D12_DEPTH_STENCILOP_DESC;
    BackFace: D3D12_DEPTH_STENCILOP_DESC;
  end;
  {$EXTERNALSYM D3D12_DEPTH_STENCIL_DESC}
  TD3D12DepthStencilDesc = D3D12_DEPTH_STENCIL_DESC;
  PD3D12DepthStencilDesc = ^TD3D12DepthStencilDesc;

  {$EXTERNALSYM D3D12_BLEND}
  D3D12_BLEND = (
    {$EXTERNALSYM D3D12_BLEND_ZERO}
    D3D12_BLEND_ZERO	= 1,
    {$EXTERNALSYM D3D12_BLEND_ONE}
    D3D12_BLEND_ONE	= 2,
    {$EXTERNALSYM D3D12_BLEND_SRC_COLOR}
    D3D12_BLEND_SRC_COLOR	= 3,
    {$EXTERNALSYM D3D12_BLEND_INV_SRC_COLOR}
    D3D12_BLEND_INV_SRC_COLOR	= 4,
    {$EXTERNALSYM D3D12_BLEND_SRC_ALPHA}
    D3D12_BLEND_SRC_ALPHA	= 5,
    {$EXTERNALSYM D3D12_BLEND_INV_SRC_ALPHA}
    D3D12_BLEND_INV_SRC_ALPHA	= 6,
    {$EXTERNALSYM D3D12_BLEND_DEST_ALPHA}
    D3D12_BLEND_DEST_ALPHA	= 7,
    {$EXTERNALSYM D3D12_BLEND_INV_DEST_ALPHA}
    D3D12_BLEND_INV_DEST_ALPHA	= 8,
    {$EXTERNALSYM D3D12_BLEND_DEST_COLOR}
    D3D12_BLEND_DEST_COLOR	= 9,
    {$EXTERNALSYM D3D12_BLEND_INV_DEST_COLOR}
    D3D12_BLEND_INV_DEST_COLOR	= 10,
    {$EXTERNALSYM D3D12_BLEND_SRC_ALPHA_SAT}
    D3D12_BLEND_SRC_ALPHA_SAT	= 11,
    {$EXTERNALSYM D3D12_BLEND_BLEND_FACTOR}
    D3D12_BLEND_BLEND_FACTOR	= 14,
    {$EXTERNALSYM D3D12_BLEND_INV_BLEND_FACTOR}
    D3D12_BLEND_INV_BLEND_FACTOR	= 15,
    {$EXTERNALSYM D3D12_BLEND_SRC1_COLOR}
    D3D12_BLEND_SRC1_COLOR	= 16,
    {$EXTERNALSYM D3D12_BLEND_INV_SRC1_COLOR}
    D3D12_BLEND_INV_SRC1_COLOR	= 17,
    {$EXTERNALSYM D3D12_BLEND_SRC1_ALPHA}
    D3D12_BLEND_SRC1_ALPHA	= 18,
    {$EXTERNALSYM D3D12_BLEND_INV_SRC1_ALPHA}
    D3D12_BLEND_INV_SRC1_ALPHA	= 19);
  TD3D12Blend = D3D12_BLEND;

  {$EXTERNALSYM D3D12_BLEND_OP}
  D3D12_BLEND_OP = (
    {$EXTERNALSYM D3D12_BLEND_OP_ADD}
    D3D12_BLEND_OP_ADD	= 1,
    {$EXTERNALSYM D3D12_BLEND_OP_SUBTRACT}
    D3D12_BLEND_OP_SUBTRACT	= 2,
    {$EXTERNALSYM D3D12_BLEND_OP_REV_SUBTRACT}
    D3D12_BLEND_OP_REV_SUBTRACT	= 3,
    {$EXTERNALSYM D3D12_BLEND_OP_MIN}
    D3D12_BLEND_OP_MIN	= 4,
    {$EXTERNALSYM D3D12_BLEND_OP_MAX}
    D3D12_BLEND_OP_MAX	= 5);
  TD3D12BlendOp = D3D12_BLEND_OP;

  {$EXTERNALSYM D3D12_COLOR_WRITE_ENABLE}
  D3D12_COLOR_WRITE_ENABLE = (
    {$EXTERNALSYM D3D12_COLOR_WRITE_ENABLE_RED}
    D3D12_COLOR_WRITE_ENABLE_RED	= 1,
    {$EXTERNALSYM D3D12_COLOR_WRITE_ENABLE_GREEN}
    D3D12_COLOR_WRITE_ENABLE_GREEN	= 2,
    {$EXTERNALSYM D3D12_COLOR_WRITE_ENABLE_BLUE}
    D3D12_COLOR_WRITE_ENABLE_BLUE	= 4,
    {$EXTERNALSYM D3D12_COLOR_WRITE_ENABLE_ALPHA}
    D3D12_COLOR_WRITE_ENABLE_ALPHA	= 8,
    {$EXTERNALSYM D3D12_COLOR_WRITE_ENABLE_ALL}
    D3D12_COLOR_WRITE_ENABLE_ALL	= ((DWORD(D3D12_COLOR_WRITE_ENABLE_RED) or DWORD(D3D12_COLOR_WRITE_ENABLE_GREEN)) or
      DWORD(D3D12_COLOR_WRITE_ENABLE_BLUE)) or DWORD(D3D12_COLOR_WRITE_ENABLE_ALPHA));
  TD3D12ColorWriteEnable = D3D12_COLOR_WRITE_ENABLE;

  {$EXTERNALSYM D3D12_LOGIC_OP}
  D3D12_LOGIC_OP = (
    {$EXTERNALSYM D3D12_LOGIC_OP_CLEAR}
    D3D12_LOGIC_OP_CLEAR	= 0,
    {$EXTERNALSYM D3D12_LOGIC_OP_SET}
    D3D12_LOGIC_OP_SET	= ( D3D12_LOGIC_OP_CLEAR + 1 ) ,
    {$EXTERNALSYM D3D12_LOGIC_OP_COPY}
    D3D12_LOGIC_OP_COPY	= ( D3D12_LOGIC_OP_SET + 1 ) ,
    {$EXTERNALSYM D3D12_LOGIC_OP_COPY_INVERTED}
    D3D12_LOGIC_OP_COPY_INVERTED	= ( D3D12_LOGIC_OP_COPY + 1 ) ,
    {$EXTERNALSYM D3D12_LOGIC_OP_NOOP}
    D3D12_LOGIC_OP_NOOP	= ( D3D12_LOGIC_OP_COPY_INVERTED + 1 ) ,
    {$EXTERNALSYM D3D12_LOGIC_OP_INVERT}
    D3D12_LOGIC_OP_INVERT	= ( D3D12_LOGIC_OP_NOOP + 1 ) ,
    {$EXTERNALSYM D3D12_LOGIC_OP_AND}
    D3D12_LOGIC_OP_AND	= ( D3D12_LOGIC_OP_INVERT + 1 ) ,
    {$EXTERNALSYM D3D12_LOGIC_OP_NAND}
    D3D12_LOGIC_OP_NAND	= ( D3D12_LOGIC_OP_AND + 1 ) ,
    {$EXTERNALSYM D3D12_LOGIC_OP_OR}
    D3D12_LOGIC_OP_OR	= ( D3D12_LOGIC_OP_NAND + 1 ) ,
    {$EXTERNALSYM D3D12_LOGIC_OP_NOR}
    D3D12_LOGIC_OP_NOR	= ( D3D12_LOGIC_OP_OR + 1 ) ,
    {$EXTERNALSYM D3D12_LOGIC_OP_XOR}
    D3D12_LOGIC_OP_XOR	= ( D3D12_LOGIC_OP_NOR + 1 ) ,
    {$EXTERNALSYM D3D12_LOGIC_OP_EQUIV}
    D3D12_LOGIC_OP_EQUIV	= ( D3D12_LOGIC_OP_XOR + 1 ) ,
    {$EXTERNALSYM D3D12_LOGIC_OP_AND_REVERSE}
    D3D12_LOGIC_OP_AND_REVERSE	= ( D3D12_LOGIC_OP_EQUIV + 1 ) ,
    {$EXTERNALSYM D3D12_LOGIC_OP_AND_INVERTED}
    D3D12_LOGIC_OP_AND_INVERTED	= ( D3D12_LOGIC_OP_AND_REVERSE + 1 ) ,
    {$EXTERNALSYM D3D12_LOGIC_OP_OR_REVERSE}
    D3D12_LOGIC_OP_OR_REVERSE	= ( D3D12_LOGIC_OP_AND_INVERTED + 1 ) ,
    {$EXTERNALSYM D3D12_LOGIC_OP_OR_INVERTED}
    D3D12_LOGIC_OP_OR_INVERTED	= ( D3D12_LOGIC_OP_OR_REVERSE + 1 ));
  TD3D12LogicOp = D3D12_LOGIC_OP;

  D3D12_RENDER_TARGET_BLEND_DESC = record
    BlendEnable: BOOL;
    LogicOpEnable: BOOL;
    SrcBlend: D3D12_BLEND;
    DestBlend: D3D12_BLEND;
    BlendOp: D3D12_BLEND_OP;
    SrcBlendAlpha: D3D12_BLEND;
    DestBlendAlpha: D3D12_BLEND;
    BlendOpAlpha: D3D12_BLEND_OP;
    LogicOp: D3D12_LOGIC_OP;
    RenderTargetWriteMask: UINT8;
  end;
  {$EXTERNALSYM D3D12_RENDER_TARGET_BLEND_DESC}
  TD3D12RenderTargetBlendDesc = D3D12_RENDER_TARGET_BLEND_DESC;
  PD3D12RenderTargetBlendDesc = ^TD3D12RenderTargetBlendDesc;

  D3D12_BLEND_DESC = record
    AlphaToCoverageEnable: BOOL;
    IndependentBlendEnable: BOOL;
    RenderTarget: array [0..7] of D3D12_RENDER_TARGET_BLEND_DESC;
  end;
  {$EXTERNALSYM D3D12_BLEND_DESC}
  TD3D12BlendDesc = D3D12_BLEND_DESC;
  PD3D12BlendDesc = ^TD3D12BlendDesc;

// Note, the array size for RenderTarget[] above is D3D12_SIMULTANEOUS_RENDERTARGET_COUNT.
// IDL processing/generation of this header replaces the define; this comment is merely explaining what happened.
  {$EXTERNALSYM D3D12_CONSERVATIVE_RASTERIZATION_MODE}
  D3D12_CONSERVATIVE_RASTERIZATION_MODE = (
    {$EXTERNALSYM D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF}
    D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF	= 0,
    {$EXTERNALSYM D3D12_CONSERVATIVE_RASTERIZATION_MODE_ON}
    D3D12_CONSERVATIVE_RASTERIZATION_MODE_ON	= 1);
  TD3D12ConservativeRasterizationMode = D3D12_CONSERVATIVE_RASTERIZATION_MODE;

  D3D12_RASTERIZER_DESC = record
    FillMode: D3D12_FILL_MODE;
    CullMode: D3D12_CULL_MODE;
    FrontCounterClockwise: BOOL;
    DepthBias: Integer;
    DepthBiasClamp: Single;
    SlopeScaledDepthBias: Single;
    DepthClipEnable: BOOL;
    MultisampleEnable: BOOL;
    AntialiasedLineEnable: BOOL;
    ForcedSampleCount: UINT;
    ConservativeRaster: D3D12_CONSERVATIVE_RASTERIZATION_MODE;
  end;
  {$EXTERNALSYM D3D12_RASTERIZER_DESC}
  TD3D12RasterizerDesc = D3D12_RASTERIZER_DESC;
  PD3D12RasterizerDesc = ^TD3D12RasterizerDesc;

  ID3D12Object = interface(IUnknown)
  ['{C4FEC28F-7966-4E95-9F94-F431CB56C3B8}']
    function GetPrivateData(
        (*_In_*) const guid: TGUID;
        (*_Inout_*) var pDataSize: UINT;
        (*_Out_writes_bytes_opt_( *pDataSize )*) pData: pointer): HRESULT; stdcall;

    function SetPrivateData(
        (*_In_*) const guid: TGUID;
        (*_In_*) DataSize: UINT;
        (*_In_reads_bytes_opt_( DataSize )*) const pData: pointer): HRESULT; stdcall;

    function SetPrivateDataInterface(
        (*_In_*) const guid: TGUID;
        (*_In_opt_*) const pdata: IUnknown): HRESULT; stdcall;

    function SetName((*_In_z_*) Name: LPCWSTR): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IID_ID3D12Object}
  IID_ID3D12Object = ID3D12Object;
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12Object);'}
  {$EXTERNALSYM ID3D12Object}

// interface ID3D12DeviceChild
// [unique][local][object][uuid]

  ID3D12DeviceChild = interface(ID3D12Object)
  ['{905DB94B-A00C-4140-9DF5-2B64CA9EA357}']
    function GetDevice(const riid: TGUID;(*_COM_Outptr_opt_*)out ppvDevice): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IID_ID3D12DeviceChild}
  IID_ID3D12DeviceChild = ID3D12DeviceChild;
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12DeviceChild);'}
  {$EXTERNALSYM ID3D12DeviceChild}

// interface ID3D12RootSignature
// [unique][local][object][uuid]

  ID3D12RootSignature = interface(ID3D12DeviceChild)
  ['{C54A6B66-72DF-4EE8-8BE5-A946A1429214}']
  end;
  {$EXTERNALSYM IID_ID3D12RootSignature}
  IID_ID3D12RootSignature = ID3D12RootSignature;
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12RootSignature);'}
  {$EXTERNALSYM ID3D12RootSignature}

// interface __MIDL_itf_d3d12_0000_0001
// [local]

  D3D12_SHADER_BYTECODE = record
    (*_Field_size_bytes_full_(BytecodeLength)*)
    pShaderBytecode: Pointer;               
    BytecodeLength: SIZE_T;
  end;
  {$EXTERNALSYM D3D12_SHADER_BYTECODE}
  TD3D12ShaderBytecode = D3D12_SHADER_BYTECODE;
  PD3D12ShaderBytecode = ^TD3D12ShaderBytecode;

  D3D12_STREAM_OUTPUT_DESC = record
    (*_Field_size_full_(NumEntries)*)
    pSODeclaration: PD3D12SoDeclarationEntry;
    NumEntries: UINT;
    (*_Field_size_full_(NumStrides)*)
    pBufferStrides: PUINT;
    NumStrides: UINT;
    RasterizedStream: UINT;
  end;
  {$EXTERNALSYM D3D12_STREAM_OUTPUT_DESC}
  TD3D12StreamOutputDesc = D3D12_STREAM_OUTPUT_DESC;
  PD3D12StreamOutputDesc = ^TD3D12StreamOutputDesc;

  D3D12_INPUT_LAYOUT_DESC = record
    (*_Field_size_full_(NumElements)*)
    pInputElementDescs: PD3D12InputElementDesc;
    NumElements: UINT;
  end;
  {$EXTERNALSYM D3D12_INPUT_LAYOUT_DESC}
  TD3D12InputLayoutDesc = D3D12_INPUT_LAYOUT_DESC;
  PD3D12InputLayoutDesc = ^TD3D12InputLayoutDesc;

  {$EXTERNALSYM D3D12_INDEX_BUFFER_STRIP_CUT_VALUE}
  D3D12_INDEX_BUFFER_STRIP_CUT_VALUE = (
    {$EXTERNALSYM D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_DISABLED}
    D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_DISABLED	= 0,
    {$EXTERNALSYM D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFF}
    D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFF	= 1,
    {$EXTERNALSYM D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFFFFFF}
    D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFFFFFF	= 2);
  TD3D12IndexBufferStripCutValue = D3D12_INDEX_BUFFER_STRIP_CUT_VALUE;
  PD3D12IndexBufferStripCutValue = ^TD3D12IndexBufferStripCutValue;

  D3D12_CACHED_PIPELINE_STATE = record
    (*_Field_size_bytes_full_(CachedBlobSizeInBytes)*)
    pCachedBlob: Pointer;
    CachedBlobSizeInBytes: SIZE_T;
  end;
  {$EXTERNALSYM D3D12_CACHED_PIPELINE_STATE}
  TD3D12CachedPipelineState = D3D12_CACHED_PIPELINE_STATE;
  PD3D12CachedPipelineState = ^TD3D12CachedPipelineState;

  {$EXTERNALSYM D3D12_PIPELINE_STATE_FLAGS}
  D3D12_PIPELINE_STATE_FLAGS = (
    {$EXTERNALSYM D3D12_PIPELINE_STATE_FLAG_NONE}
    D3D12_PIPELINE_STATE_FLAG_NONE	= 0,
    {$EXTERNALSYM D3D12_PIPELINE_STATE_FLAG_TOOL_DEBUG}
    D3D12_PIPELINE_STATE_FLAG_TOOL_DEBUG	= $1);
  TD3D12PipelineStateFlags = D3D12_PIPELINE_STATE_FLAGS;
  PD3D12PipelineStateFlags = ^TD3D12PipelineStateFlags;

  D3D12_GRAPHICS_PIPELINE_STATE_DESC = record
    pRootSignature: ID3D12RootSignature;
    VS: D3D12_SHADER_BYTECODE;
    PS: D3D12_SHADER_BYTECODE;
    DS: D3D12_SHADER_BYTECODE;
    HS: D3D12_SHADER_BYTECODE;
    GS: D3D12_SHADER_BYTECODE;
    StreamOutput: D3D12_STREAM_OUTPUT_DESC;
    BlendState: D3D12_BLEND_DESC;
    SampleMask: UINT;
    RasterizerState: D3D12_RASTERIZER_DESC;
    DepthStencilState: D3D12_DEPTH_STENCIL_DESC;
    InputLayout: D3D12_INPUT_LAYOUT_DESC;
    IBStripCutValue: D3D12_INDEX_BUFFER_STRIP_CUT_VALUE;
    PrimitiveTopologyType: D3D12_PRIMITIVE_TOPOLOGY_TYPE;
    NumRenderTargets: UINT;
    RTVFormats: array [0..7] of DXGI_FORMAT;
    DSVFormat: DXGI_FORMAT;
    SampleDesc: DXGI_SAMPLE_DESC;
    NodeMask: UINT;
    CachedPSO: D3D12_CACHED_PIPELINE_STATE;
    Flags: D3D12_PIPELINE_STATE_FLAGS;
  end;
  {$EXTERNALSYM D3D12_GRAPHICS_PIPELINE_STATE_DESC}
  TD3D12GraphicsPipelineStateDesc = D3D12_GRAPHICS_PIPELINE_STATE_DESC;
  PD3D12GraphicsPipelineStateDesc = ^TD3D12GraphicsPipelineStateDesc;

  D3D12_COMPUTE_PIPELINE_STATE_DESC = record
    pRootSignature: ID3D12RootSignature ;
    CS: D3D12_SHADER_BYTECODE;
    NodeMask: UINT;
    CachedPSO: D3D12_CACHED_PIPELINE_STATE;
    Flags: D3D12_PIPELINE_STATE_FLAGS;
  end;
  {$EXTERNALSYM D3D12_COMPUTE_PIPELINE_STATE_DESC}
  TD3D12ComputePipelineStateDesc = D3D12_COMPUTE_PIPELINE_STATE_DESC;
  PD3D12ComputePipelineStateDesc = ^TD3D12ComputePipelineStateDesc;

  {$EXTERNALSYM D3D12_FEATURE}
  D3D12_FEATURE = (
    {$EXTERNALSYM D3D12_FEATURE_D3D12_OPTIONS}
    D3D12_FEATURE_D3D12_OPTIONS	= 0,
    {$EXTERNALSYM D3D12_FEATURE_ARCHITECTURE}
    D3D12_FEATURE_ARCHITECTURE	= ( D3D12_FEATURE_D3D12_OPTIONS + 1 ) ,
    {$EXTERNALSYM D3D12_FEATURE_FEATURE_LEVELS}
    D3D12_FEATURE_FEATURE_LEVELS	= ( D3D12_FEATURE_ARCHITECTURE + 1 ) ,
    {$EXTERNALSYM D3D12_FEATURE_FORMAT_SUPPORT}
    D3D12_FEATURE_FORMAT_SUPPORT	= ( D3D12_FEATURE_FEATURE_LEVELS + 1 ) ,
    {$EXTERNALSYM D3D12_FEATURE_MULTISAMPLE_QUALITY_LEVELS}
    D3D12_FEATURE_MULTISAMPLE_QUALITY_LEVELS	= ( D3D12_FEATURE_FORMAT_SUPPORT + 1 ) ,
    {$EXTERNALSYM D3D12_FEATURE_FORMAT_INFO}
    D3D12_FEATURE_FORMAT_INFO	= ( D3D12_FEATURE_MULTISAMPLE_QUALITY_LEVELS + 1 ) ,
    {$EXTERNALSYM D3D12_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT}
    D3D12_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT	= ( D3D12_FEATURE_FORMAT_INFO + 1 ));
  TD3D12Feature = D3D12_FEATURE;

  {$EXTERNALSYM D3D12_SHADER_MIN_PRECISION_SUPPORT}
  D3D12_SHADER_MIN_PRECISION_SUPPORT = (
    {$EXTERNALSYM D3D12_SHADER_MIN_PRECISION_SUPPORT_NONE}
    D3D12_SHADER_MIN_PRECISION_SUPPORT_NONE	= 0,
    {$EXTERNALSYM D3D12_SHADER_MIN_PRECISION_SUPPORT_10_BIT}
    D3D12_SHADER_MIN_PRECISION_SUPPORT_10_BIT	= 1,
    {$EXTERNALSYM D3D12_SHADER_MIN_PRECISION_SUPPORT_16_BIT}
    D3D12_SHADER_MIN_PRECISION_SUPPORT_16_BIT	= $2);
  TD3D12ShaderMinPrecisionSupport = D3D12_SHADER_MIN_PRECISION_SUPPORT;

  {$EXTERNALSYM D3D12_TILED_RESOURCES_TIER}
  D3D12_TILED_RESOURCES_TIER = (
    {$EXTERNALSYM D3D12_TILED_RESOURCES_TIER_NOT_SUPPORTED}
    D3D12_TILED_RESOURCES_TIER_NOT_SUPPORTED	= 0,
    {$EXTERNALSYM D3D12_TILED_RESOURCES_TIER_1}
    D3D12_TILED_RESOURCES_TIER_1	= 1,
    {$EXTERNALSYM D3D12_TILED_RESOURCES_TIER_2}
    D3D12_TILED_RESOURCES_TIER_2	= 2,
    {$EXTERNALSYM D3D12_TILED_RESOURCES_TIER_3}
    D3D12_TILED_RESOURCES_TIER_3	= 3);
  TD3D12TiledResourcesTier = D3D12_TILED_RESOURCES_TIER;

  {$EXTERNALSYM D3D12_RESOURCE_BINDING_TIER}
  D3D12_RESOURCE_BINDING_TIER = (
    {$EXTERNALSYM D3D12_RESOURCE_BINDING_TIER_1}
    D3D12_RESOURCE_BINDING_TIER_1	= 1,
    {$EXTERNALSYM D3D12_RESOURCE_BINDING_TIER_2}
    D3D12_RESOURCE_BINDING_TIER_2	= 2,
    {$EXTERNALSYM D3D12_RESOURCE_BINDING_TIER_3}
    D3D12_RESOURCE_BINDING_TIER_3	= 3);
  TD3D12ResourceBindingTier = D3D12_RESOURCE_BINDING_TIER;

  {$EXTERNALSYM D3D12_CONSERVATIVE_RASTERIZATION_TIER}
  D3D12_CONSERVATIVE_RASTERIZATION_TIER = (
    {$EXTERNALSYM D3D12_CONSERVATIVE_RASTERIZATION_TIER_NOT_SUPPORTED}
    D3D12_CONSERVATIVE_RASTERIZATION_TIER_NOT_SUPPORTED	= 0,
    {$EXTERNALSYM D3D12_CONSERVATIVE_RASTERIZATION_TIER_1}
    D3D12_CONSERVATIVE_RASTERIZATION_TIER_1	= 1,
    {$EXTERNALSYM D3D12_CONSERVATIVE_RASTERIZATION_TIER_2}
    D3D12_CONSERVATIVE_RASTERIZATION_TIER_2	= 2,
    {$EXTERNALSYM D3D12_CONSERVATIVE_RASTERIZATION_TIER_3}
    D3D12_CONSERVATIVE_RASTERIZATION_TIER_3	= 3);
  TD3D12ConservativeRasterizationTier = D3D12_CONSERVATIVE_RASTERIZATION_TIER;

  {$EXTERNALSYM D3D12_FORMAT_SUPPORT1}
  D3D12_FORMAT_SUPPORT1 = (
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT1_NONE}
    D3D12_FORMAT_SUPPORT1_NONE	= 0,
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT1_BUFFER}
    D3D12_FORMAT_SUPPORT1_BUFFER	= $1,
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT1_IA_VERTEX_BUFFER}
    D3D12_FORMAT_SUPPORT1_IA_VERTEX_BUFFER	= $2,
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT1_IA_INDEX_BUFFER}
    D3D12_FORMAT_SUPPORT1_IA_INDEX_BUFFER	= $4,
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT1_SO_BUFFER}
    D3D12_FORMAT_SUPPORT1_SO_BUFFER	= $8,
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT1_TEXTURE1D}
    D3D12_FORMAT_SUPPORT1_TEXTURE1D	= $10,
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT1_TEXTURE2D}
    D3D12_FORMAT_SUPPORT1_TEXTURE2D	= $20,
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT1_TEXTURE3D}
    D3D12_FORMAT_SUPPORT1_TEXTURE3D	= $40,
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT1_TEXTURECUBE}
    D3D12_FORMAT_SUPPORT1_TEXTURECUBE	= $80,
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT1_SHADER_LOAD}
    D3D12_FORMAT_SUPPORT1_SHADER_LOAD	= $100,
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE}
    D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE	= $200,
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_COMPARISON}
    D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_COMPARISON	= $400,
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_MONO_TEXT}
    D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_MONO_TEXT	= $800,
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT1_MIP}
    D3D12_FORMAT_SUPPORT1_MIP	= $1000,
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT1_RENDER_TARGET}
    D3D12_FORMAT_SUPPORT1_RENDER_TARGET	= $4000,
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT1_BLENDABLE}
    D3D12_FORMAT_SUPPORT1_BLENDABLE	= $8000,
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT1_DEPTH_STENCIL}
    D3D12_FORMAT_SUPPORT1_DEPTH_STENCIL	= $10000,
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RESOLVE}
    D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RESOLVE	= $40000,
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT1_DISPLAY}
    D3D12_FORMAT_SUPPORT1_DISPLAY	= $80000,
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT1_CAST_WITHIN_BIT_LAYOUT}
    D3D12_FORMAT_SUPPORT1_CAST_WITHIN_BIT_LAYOUT	= $100000,
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RENDERTARGET}
    D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RENDERTARGET	= $200000,
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT1_MULTISAMPLE_LOAD}
    D3D12_FORMAT_SUPPORT1_MULTISAMPLE_LOAD	= $400000,
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT1_SHADER_GATHER}
    D3D12_FORMAT_SUPPORT1_SHADER_GATHER	= $800000,
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT1_BACK_BUFFER_CAST}
    D3D12_FORMAT_SUPPORT1_BACK_BUFFER_CAST	= $1000000,
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT1_TYPED_UNORDERED_ACCESS_VIEW}
    D3D12_FORMAT_SUPPORT1_TYPED_UNORDERED_ACCESS_VIEW	= $2000000,
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT1_SHADER_GATHER_COMPARISON}
    D3D12_FORMAT_SUPPORT1_SHADER_GATHER_COMPARISON	= $4000000,
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT1_DECODER_OUTPUT}
    D3D12_FORMAT_SUPPORT1_DECODER_OUTPUT	= $8000000,
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_OUTPUT}
    D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_OUTPUT	= $10000000,
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_INPUT}
    D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_INPUT	= $20000000,
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT1_VIDEO_ENCODER}
    D3D12_FORMAT_SUPPORT1_VIDEO_ENCODER	= $40000000);
  TD3D12FormatSupport1 = D3D12_FORMAT_SUPPORT1;

  {$EXTERNALSYM D3D12_FORMAT_SUPPORT2}
  D3D12_FORMAT_SUPPORT2 = (
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT2_NONE}
    D3D12_FORMAT_SUPPORT2_NONE	= 0,
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_ADD}
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_ADD	= $1,
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS}
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS	= $2,
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE}
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE	= $4,
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE}
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE	= $8,
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX}
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX	= $10,
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX}
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX	= $20,
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT2_UAV_TYPED_LOAD}
    D3D12_FORMAT_SUPPORT2_UAV_TYPED_LOAD	= $40,
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT2_UAV_TYPED_STORE}
    D3D12_FORMAT_SUPPORT2_UAV_TYPED_STORE	= $80,
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP}
    D3D12_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP	= $100,
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT2_TILED}
    D3D12_FORMAT_SUPPORT2_TILED	= $200,
    {$EXTERNALSYM D3D12_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY}
    D3D12_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY	= $4000);
  TD3D12FormatSupport2 = D3D12_FORMAT_SUPPORT2;

  {$EXTERNALSYM D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS}
  D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS = (
    {$EXTERNALSYM D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_NONE}
    D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_NONE	= 0,
    {$EXTERNALSYM D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_TILED_RESOURCE}
    D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_TILED_RESOURCE	= $1);
  TD3D12MultisampleQualityLevelFlags = D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS;

  {$EXTERNALSYM D3D12_CROSS_NODE_SHARING_TIER}
  D3D12_CROSS_NODE_SHARING_TIER = (
    {$EXTERNALSYM D3D12_CROSS_NODE_SHARING_TIER_NOT_SUPPORTED}
    D3D12_CROSS_NODE_SHARING_TIER_NOT_SUPPORTED	= 0,
    {$EXTERNALSYM D3D12_CROSS_NODE_SHARING_TIER_1_EMULATED}
    D3D12_CROSS_NODE_SHARING_TIER_1_EMULATED	= 1,
    {$EXTERNALSYM D3D12_CROSS_NODE_SHARING_TIER_1}
    D3D12_CROSS_NODE_SHARING_TIER_1	= 2,
    {$EXTERNALSYM D3D12_CROSS_NODE_SHARING_TIER_2}
    D3D12_CROSS_NODE_SHARING_TIER_2	= 3);
  TD3D12CrossNodeSharingTier = D3D12_CROSS_NODE_SHARING_TIER;

  {$EXTERNALSYM D3D12_RESOURCE_HEAP_TIER}
  D3D12_RESOURCE_HEAP_TIER = (
    {$EXTERNALSYM D3D12_RESOURCE_HEAP_TIER_1}
    D3D12_RESOURCE_HEAP_TIER_1	= 1,
    {$EXTERNALSYM D3D12_RESOURCE_HEAP_TIER_2}
    D3D12_RESOURCE_HEAP_TIER_2	= 2);
  TD3D12ResourceHeapTier = D3D12_RESOURCE_HEAP_TIER;

  D3D12_FEATURE_DATA_D3D12_OPTIONS = record
    (*_Out_*) DoublePrecisionFloatShaderOps: BOOL;
    (*_Out_*) OutputMergerLogicOp: BOOL;
    (*_Out_*) MinPrecisionSupport: D3D12_SHADER_MIN_PRECISION_SUPPORT;
    (*_Out_*) TiledResourcesTier: D3D12_TILED_RESOURCES_TIER;
    (*_Out_*) ResourceBindingTier: D3D12_RESOURCE_BINDING_TIER;
    (*_Out_*) PSSpecifiedStencilRefSupported: BOOL;
    (*_Out_*) TypedUAVLoadAdditionalFormats: BOOL;
    (*_Out_*) ROVsSupported: BOOL;
    (*_Out_*) ConservativeRasterizationTier: D3D12_CONSERVATIVE_RASTERIZATION_TIER;
    (*_Out_*) MaxGPUVirtualAddressBitsPerResource: UINT;
    (*_Out_*) StandardSwizzle64KBSupported: BOOL;
    (*_Out_*) CrossNodeSharingTier: D3D12_CROSS_NODE_SHARING_TIER;
    (*_Out_*) CrossAdapterRowMajorTextureSupported: BOOL;
    (*_Out_*) VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation: BOOL;
    (*_Out_*) ResourceHeapTier: D3D12_RESOURCE_HEAP_TIER;
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_D3D12_OPTIONS}
  TD3D12FeatureDataD3d12Options = D3D12_FEATURE_DATA_D3D12_OPTIONS;
  PD3D12FeatureDataD3d12Options = ^TD3D12FeatureDataD3d12Options;

  D3D12_FEATURE_DATA_ARCHITECTURE = record
    NodeIndex: UINT; //_In_
    TileBasedRenderer: BOOL; //_Out_
    UMA: BOOL; //_Out_
    CacheCoherentUMA: BOOL; //_Out_
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_ARCHITECTURE}
  TD3D12FeatureDataArchitecture = D3D12_FEATURE_DATA_ARCHITECTURE;
  PD3D12FeatureDataArchitecture = ^TD3D12FeatureDataArchitecture;

  D3D12_FEATURE_DATA_FEATURE_LEVELS = record
    NumFeatureLevels: UINT; //_In_
    (*_In_reads_(NumFeatureLevels)*)
    pFeatureLevelsRequested: PD3D_FEATURE_LEVEL;
    MaxSupportedFeatureLevel: D3D_FEATURE_LEVEL; //_Out_
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_FEATURE_LEVELS}
  TD3D12FeatureDataFeatureLevels = D3D12_FEATURE_DATA_FEATURE_LEVELS;
  PD3D12FeatureDataFeatureLevels = ^TD3D12FeatureDataFeatureLevels;

  D3D12_FEATURE_DATA_FORMAT_SUPPORT = record
    Format: DXGI_FORMAT; //_In_
    Support1: D3D12_FORMAT_SUPPORT1; //_Out_
    Support2: D3D12_FORMAT_SUPPORT2; //_Out_
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_FORMAT_SUPPORT}
  TD3D12FeatureDataFormatSupport = D3D12_FEATURE_DATA_FORMAT_SUPPORT;
  PD3D12FeatureDataFormatSupport = ^TD3D12FeatureDataFormatSupport;

  D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS = record
    Format: DXGI_FORMAT; //_In_
    SampleCount: UINT; //_In_
    Flags: D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS; //_In_
    NumQualityLevels: UINT; //_Out_
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS}
  TD3D12FeatureDataMultisampleQualityLevels = D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS;
  PD3D12FeatureDataMultisampleQualityLevels = ^TD3D12FeatureDataMultisampleQualityLevels;

  D3D12_FEATURE_DATA_FORMAT_INFO = record
    Format: DXGI_FORMAT;
    PlaneCount: UINT8;
  end;
  {$EXTERNALSYM D3D12_FEATURE_DATA_FORMAT_INFO}
  TD3D12FeatureDataFormatInfo = D3D12_FEATURE_DATA_FORMAT_INFO;
  PD3D12FeatureDataFormatInfo = ^TD3D12FeatureDataFormatInfo;

  D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT = record
    MaxGPUVirtualAddressBitsPerResource: UINT;
    MaxGPUVirtualAddressBitsPerProcess: UINT;
  end;
                                                          
  {.$EXTERNALSYM D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT}
  TD3D12FeatureDataGpuVirtualAddressSupport = D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT;
  PD3D12FeatureDataGpuVirtualAddressSupport = ^TD3D12FeatureDataGpuVirtualAddressSupport;

  D3D12_RESOURCE_ALLOCATION_INFO = record
    SizeInBytes: UINT64;
    Alignment: UINT64;
  end;
  {$EXTERNALSYM D3D12_RESOURCE_ALLOCATION_INFO}
  TD3D12ResourceAllocationInfo = D3D12_RESOURCE_ALLOCATION_INFO;
  PD3D12ResourceAllocationInfo = ^TD3D12ResourceAllocationInfo;

  {$EXTERNALSYM D3D12_HEAP_TYPE}
  D3D12_HEAP_TYPE = (
    {$EXTERNALSYM D3D12_HEAP_TYPE_DEFAULT}
    D3D12_HEAP_TYPE_DEFAULT	= 1,
    {$EXTERNALSYM D3D12_HEAP_TYPE_UPLOAD}
    D3D12_HEAP_TYPE_UPLOAD	= 2,
    {$EXTERNALSYM D3D12_HEAP_TYPE_READBACK}
    D3D12_HEAP_TYPE_READBACK	= 3,
    {$EXTERNALSYM D3D12_HEAP_TYPE_CUSTOM}
    D3D12_HEAP_TYPE_CUSTOM	= 4);
  TD3D12HeapType = D3D12_HEAP_TYPE;

  {$EXTERNALSYM D3D12_CPU_PAGE_PROPERTY}
  D3D12_CPU_PAGE_PROPERTY = (
    {$EXTERNALSYM D3D12_CPU_PAGE_PROPERTY_UNKNOWN}
    D3D12_CPU_PAGE_PROPERTY_UNKNOWN	= 0,
    {$EXTERNALSYM D3D12_CPU_PAGE_PROPERTY_NOT_AVAILABLE}
    D3D12_CPU_PAGE_PROPERTY_NOT_AVAILABLE	= 1,
    {$EXTERNALSYM D3D12_CPU_PAGE_PROPERTY_WRITE_COMBINE}
    D3D12_CPU_PAGE_PROPERTY_WRITE_COMBINE	= 2,
    {$EXTERNALSYM D3D12_CPU_PAGE_PROPERTY_WRITE_BACK}
    D3D12_CPU_PAGE_PROPERTY_WRITE_BACK	= 3);
  TD3D12CpuPageProperty = D3D12_CPU_PAGE_PROPERTY;

  {$EXTERNALSYM D3D12_MEMORY_POOL}
  D3D12_MEMORY_POOL = (
    {$EXTERNALSYM D3D12_MEMORY_POOL_UNKNOWN}
    D3D12_MEMORY_POOL_UNKNOWN	= 0,
    {$EXTERNALSYM D3D12_MEMORY_POOL_L0}
    D3D12_MEMORY_POOL_L0	= 1,
    {$EXTERNALSYM D3D12_MEMORY_POOL_L1}
    D3D12_MEMORY_POOL_L1	= 2);
  TD3D12MemoryPool = D3D12_MEMORY_POOL;

  D3D12_HEAP_PROPERTIES = record
    _Type: D3D12_HEAP_TYPE;
    CPUPageProperty: D3D12_CPU_PAGE_PROPERTY;
    MemoryPoolPreference: D3D12_MEMORY_POOL;
    CreationNodeMask: UINT;
    VisibleNodeMask: UINT;
  end;
  {$EXTERNALSYM D3D12_HEAP_PROPERTIES}
  TD3D12HeapProperties = D3D12_HEAP_PROPERTIES;
  PD3D12HeapProperties = ^TD3D12HeapProperties;

  {$EXTERNALSYM D3D12_HEAP_FLAGS}
  D3D12_HEAP_FLAGS = (
    {$EXTERNALSYM D3D12_HEAP_FLAG_NONE}
    D3D12_HEAP_FLAG_NONE	= 0,
    {$EXTERNALSYM D3D12_HEAP_FLAG_SHARED}
    D3D12_HEAP_FLAG_SHARED	= $1,
    {$EXTERNALSYM D3D12_HEAP_FLAG_DENY_BUFFERS}
    D3D12_HEAP_FLAG_DENY_BUFFERS	= $4,
    {$EXTERNALSYM D3D12_HEAP_FLAG_ALLOW_DISPLAY}
    D3D12_HEAP_FLAG_ALLOW_DISPLAY	= $8,
    {$EXTERNALSYM D3D12_HEAP_FLAG_SHARED_CROSS_ADAPTER}
    D3D12_HEAP_FLAG_SHARED_CROSS_ADAPTER	= $20,
    {$EXTERNALSYM D3D12_HEAP_FLAG_DENY_RT_DS_TEXTURES}
    D3D12_HEAP_FLAG_DENY_RT_DS_TEXTURES	= $40,
    {$EXTERNALSYM D3D12_HEAP_FLAG_DENY_NON_RT_DS_TEXTURES}
    D3D12_HEAP_FLAG_DENY_NON_RT_DS_TEXTURES	= $80,
    {$EXTERNALSYM D3D12_HEAP_FLAG_ALLOW_ALL_BUFFERS_AND_TEXTURES}
    D3D12_HEAP_FLAG_ALLOW_ALL_BUFFERS_AND_TEXTURES	= 0,
    {$EXTERNALSYM D3D12_HEAP_FLAG_ALLOW_ONLY_BUFFERS}
    D3D12_HEAP_FLAG_ALLOW_ONLY_BUFFERS	= $c0,
    {$EXTERNALSYM D3D12_HEAP_FLAG_ALLOW_ONLY_NON_RT_DS_TEXTURES}
    D3D12_HEAP_FLAG_ALLOW_ONLY_NON_RT_DS_TEXTURES	= $44,
    {$EXTERNALSYM D3D12_HEAP_FLAG_ALLOW_ONLY_RT_DS_TEXTURES}
    D3D12_HEAP_FLAG_ALLOW_ONLY_RT_DS_TEXTURES	= $84);
  TD3D12HeapFlags = D3D12_HEAP_FLAGS;
  PD3D12HeapFlags = ^TD3D12HeapFlags;

  D3D12_HEAP_DESC = record
    SizeInBytes: UINT64;
    Properties: D3D12_HEAP_PROPERTIES;
    Alignment: UINT64;
    Flags: D3D12_HEAP_FLAGS;
  end;
  {$EXTERNALSYM D3D12_HEAP_DESC}
  TD3D12HeapDesc = D3D12_HEAP_DESC;
  PD3D12HeapDesc = ^TD3D12HeapDesc;

  {$EXTERNALSYM D3D12_RESOURCE_DIMENSION}
  D3D12_RESOURCE_DIMENSION = (
    {$EXTERNALSYM D3D12_RESOURCE_DIMENSION_UNKNOWN}
    D3D12_RESOURCE_DIMENSION_UNKNOWN	= 0,
    {$EXTERNALSYM D3D12_RESOURCE_DIMENSION_BUFFER}
    D3D12_RESOURCE_DIMENSION_BUFFER	= 1,
    {$EXTERNALSYM D3D12_RESOURCE_DIMENSION_TEXTURE1D}
    D3D12_RESOURCE_DIMENSION_TEXTURE1D	= 2,
    {$EXTERNALSYM D3D12_RESOURCE_DIMENSION_TEXTURE2D}
    D3D12_RESOURCE_DIMENSION_TEXTURE2D	= 3,
    {$EXTERNALSYM D3D12_RESOURCE_DIMENSION_TEXTURE3D}
    D3D12_RESOURCE_DIMENSION_TEXTURE3D	= 4);
  TD3D12ResourceDimension = D3D12_RESOURCE_DIMENSION;

  {$EXTERNALSYM D3D12_TEXTURE_LAYOUT}
  D3D12_TEXTURE_LAYOUT = (
    {$EXTERNALSYM D3D12_TEXTURE_LAYOUT_UNKNOWN}
    D3D12_TEXTURE_LAYOUT_UNKNOWN	= 0,
    {$EXTERNALSYM D3D12_TEXTURE_LAYOUT_ROW_MAJOR}
    D3D12_TEXTURE_LAYOUT_ROW_MAJOR	= 1,
    {$EXTERNALSYM D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE}
    D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE	= 2,
    {$EXTERNALSYM D3D12_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE}
    D3D12_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE	= 3);
  TD3D12TextureLayout = D3D12_TEXTURE_LAYOUT;

  {$EXTERNALSYM D3D12_RESOURCE_FLAGS}
  D3D12_RESOURCE_FLAGS = (
    {$EXTERNALSYM D3D12_RESOURCE_FLAG_NONE}
    D3D12_RESOURCE_FLAG_NONE	= 0,
    {$EXTERNALSYM D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET}
    D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET	= $1,
    {$EXTERNALSYM D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL}
    D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL	= $2,
    {$EXTERNALSYM D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS}
    D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS	= $4,
    {$EXTERNALSYM D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE}
    D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE	= $8,
    {$EXTERNALSYM D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER}
    D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER	= $10,
    {$EXTERNALSYM D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS}
    D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS	= $20);
  TD3D12ResourceFlags = D3D12_RESOURCE_FLAGS;

  D3D12_RESOURCE_DESC = record
    Dimension: D3D12_RESOURCE_DIMENSION;
    Alignment: UINT64;
    Width: UINT64;
    Height: UINT;
    DepthOrArraySize: UINT16;
    MipLevels: UINT16;
    Format: DXGI_FORMAT;
    SampleDesc: DXGI_SAMPLE_DESC;
    Layout: D3D12_TEXTURE_LAYOUT;
    Flags: D3D12_RESOURCE_FLAGS;
  end;
  {$EXTERNALSYM D3D12_RESOURCE_DESC}
  TD3D12ResourceDesc = D3D12_RESOURCE_DESC;
  PD3D12ResourceDesc = ^TD3D12ResourceDesc;

  D3D12_DEPTH_STENCIL_VALUE = record
    Depth: Single;
    Stencil: UINT8;
  end;
  {$EXTERNALSYM D3D12_DEPTH_STENCIL_VALUE}
  TD3D12DepthStencilValue = D3D12_DEPTH_STENCIL_VALUE;
  PD3D12DepthStencilValue = ^TD3D12DepthStencilValue;

  D3D12_CLEAR_VALUE = record
    Format: DXGI_FORMAT;
    case Integer of
      0: (Color: TFourSingleArray);
      1: (DepthStencil: D3D12_DEPTH_STENCIL_VALUE);
  end;
  {$EXTERNALSYM D3D12_CLEAR_VALUE}
  TD3D12ClearValue = D3D12_CLEAR_VALUE;
  PD3D12ClearValue = ^TD3D12ClearValue;

  D3D12_RANGE = record
    _Begin: SIZE_T;
    _End: SIZE_T;
  end;
  {$EXTERNALSYM D3D12_RANGE}
  TD3D12Range = D3D12_RANGE;
  PD3D12Range = ^TD3D12Range;

  D3D12_SUBRESOURCE_INFO = record
    Offset: UINT64;
    RowPitch: UINT;
    DepthPitch: UINT;
  end;
  {$EXTERNALSYM D3D12_SUBRESOURCE_INFO}
  TD3D12SubresourceInfo = D3D12_SUBRESOURCE_INFO;
  PD3D12SubresourceInfo = ^TD3D12SubresourceInfo;

  D3D12_TILED_RESOURCE_COORDINATE = record
    X: UINT;
    Y: UINT;
    Z: UINT;
    Subresource: UINT;
  end;
  {$EXTERNALSYM D3D12_TILED_RESOURCE_COORDINATE}
  TD3D12TiledResourceCoordinate = D3D12_TILED_RESOURCE_COORDINATE;
  PD3D12TiledResourceCoordinate = ^TD3D12TiledResourceCoordinate;

  D3D12_TILE_REGION_SIZE = record
    NumTiles: UINT;
    UseBox: BOOL;
    Width: UINT;
    Height: UINT16;
    Depth: UINT16;
  end;
  {$EXTERNALSYM D3D12_TILE_REGION_SIZE}
  TD3D12TileRegionSize = D3D12_TILE_REGION_SIZE;
  PD3D12TileRegionSize = ^TD3D12TileRegionSize;

  {$EXTERNALSYM D3D12_TILE_RANGE_FLAGS}
  D3D12_TILE_RANGE_FLAGS = (
    {$EXTERNALSYM D3D12_TILE_RANGE_FLAG_NONE}
    D3D12_TILE_RANGE_FLAG_NONE	= 0,
    {$EXTERNALSYM D3D12_TILE_RANGE_FLAG_NULL}
    D3D12_TILE_RANGE_FLAG_NULL	= 1,
    {$EXTERNALSYM D3D12_TILE_RANGE_FLAG_SKIP}
    D3D12_TILE_RANGE_FLAG_SKIP	= 2,
    {$EXTERNALSYM D3D12_TILE_RANGE_FLAG_REUSE_SINGLE_TILE}
    D3D12_TILE_RANGE_FLAG_REUSE_SINGLE_TILE	= 4);
  TD3D12TileRangeFlags = D3D12_TILE_RANGE_FLAGS;
  PD3D12TileRangeFlags = ^TD3D12TileRangeFlags;

  D3D12_SUBRESOURCE_TILING = record
    WidthInTiles: UINT;
    HeightInTiles: UINT16;
    DepthInTiles: UINT16;
    StartTileIndexInOverallResource: UINT;
  end;
  {$EXTERNALSYM D3D12_SUBRESOURCE_TILING}
  TD3D12SubresourceTiling = D3D12_SUBRESOURCE_TILING;
  PD3D12SubresourceTiling = ^TD3D12SubresourceTiling;

  D3D12_TILE_SHAPE = record
    WidthInTexels: UINT;
    HeightInTexels: UINT;
    DepthInTexels: UINT;
  end;
  {$EXTERNALSYM D3D12_TILE_SHAPE}
  TD3D12TileShape = D3D12_TILE_SHAPE;
  PD3D12TileShape = ^TD3D12TileShape;

  D3D12_PACKED_MIP_INFO = record
    NumStandardMips: UINT8;
    NumPackedMips: UINT8;
    NumTilesForPackedMips: UINT;
    StartTileIndexInOverallResource: UINT;
  end;
  {$EXTERNALSYM D3D12_PACKED_MIP_INFO}
  TD3D12PackedMipInfo = D3D12_PACKED_MIP_INFO;
  PD3D12PackedMipInfo = ^TD3D12PackedMipInfo;

  {$EXTERNALSYM D3D12_TILE_MAPPING_FLAGS}
  D3D12_TILE_MAPPING_FLAGS = (
    {$EXTERNALSYM D3D12_TILE_MAPPING_FLAG_NONE}
    D3D12_TILE_MAPPING_FLAG_NONE	= 0,
    {$EXTERNALSYM D3D12_TILE_MAPPING_FLAG_NO_HAZARD}
    D3D12_TILE_MAPPING_FLAG_NO_HAZARD	= $1);
  TD3D12TileMappingFlags = D3D12_TILE_MAPPING_FLAGS;
  PD3D12TileMappingFlags = ^TD3D12TileMappingFlags;

  {$EXTERNALSYM D3D12_TILE_COPY_FLAGS}
  D3D12_TILE_COPY_FLAGS = (
    {$EXTERNALSYM D3D12_TILE_COPY_FLAG_NONE}
    D3D12_TILE_COPY_FLAG_NONE	= 0,
    {$EXTERNALSYM D3D12_TILE_COPY_FLAG_NO_HAZARD}
    D3D12_TILE_COPY_FLAG_NO_HAZARD	= $1,
    {$EXTERNALSYM D3D12_TILE_COPY_FLAG_LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE}
    D3D12_TILE_COPY_FLAG_LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE	= $2,
    {$EXTERNALSYM D3D12_TILE_COPY_FLAG_SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER}
    D3D12_TILE_COPY_FLAG_SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER	= $4);
  TD3D12TileCopyFlags = D3D12_TILE_COPY_FLAGS;

  {$EXTERNALSYM D3D12_RESOURCE_STATES}
  D3D12_RESOURCE_STATES = (
    {$EXTERNALSYM D3D12_RESOURCE_STATE_COMMON}
    D3D12_RESOURCE_STATE_COMMON	= 0,
    {$EXTERNALSYM D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER}
    D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER	= $1,
    {$EXTERNALSYM D3D12_RESOURCE_STATE_INDEX_BUFFER}
    D3D12_RESOURCE_STATE_INDEX_BUFFER	= $2,
    {$EXTERNALSYM D3D12_RESOURCE_STATE_RENDER_TARGET}
    D3D12_RESOURCE_STATE_RENDER_TARGET	= $4,
    {$EXTERNALSYM D3D12_RESOURCE_STATE_UNORDERED_ACCESS}
    D3D12_RESOURCE_STATE_UNORDERED_ACCESS	= $8,
    {$EXTERNALSYM D3D12_RESOURCE_STATE_DEPTH_WRITE}
    D3D12_RESOURCE_STATE_DEPTH_WRITE	= $10,
    {$EXTERNALSYM D3D12_RESOURCE_STATE_DEPTH_READ}
    D3D12_RESOURCE_STATE_DEPTH_READ	= $20,
    {$EXTERNALSYM D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE}
    D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE	= $40,
    {$EXTERNALSYM D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE}
    D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE	= $80,
    {$EXTERNALSYM D3D12_RESOURCE_STATE_STREAM_OUT}
    D3D12_RESOURCE_STATE_STREAM_OUT	= $100,
    {$EXTERNALSYM D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT}
    D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT	= $200,
    {$EXTERNALSYM D3D12_RESOURCE_STATE_COPY_DEST}
    D3D12_RESOURCE_STATE_COPY_DEST	= $400,
    {$EXTERNALSYM D3D12_RESOURCE_STATE_COPY_SOURCE}
    D3D12_RESOURCE_STATE_COPY_SOURCE	= $800,
    {$EXTERNALSYM D3D12_RESOURCE_STATE_RESOLVE_DEST}
    D3D12_RESOURCE_STATE_RESOLVE_DEST	= $1000,
    {$EXTERNALSYM D3D12_RESOURCE_STATE_RESOLVE_SOURCE}
    D3D12_RESOURCE_STATE_RESOLVE_SOURCE	= $2000,
    {$EXTERNALSYM D3D12_RESOURCE_STATE_GENERIC_READ}
    D3D12_RESOURCE_STATE_GENERIC_READ	= ((((($1 or $2) or $40) or $80) or $200) or $800),
    {$EXTERNALSYM D3D12_RESOURCE_STATE_PRESENT}
    D3D12_RESOURCE_STATE_PRESENT	= 0,
    {$EXTERNALSYM D3D12_RESOURCE_STATE_PREDICATION}
    D3D12_RESOURCE_STATE_PREDICATION	= $200);
  TD3D12ResourceStates = D3D12_RESOURCE_STATES;

  {$EXTERNALSYM D3D12_RESOURCE_BARRIER_TYPE}
  D3D12_RESOURCE_BARRIER_TYPE = (
    {$EXTERNALSYM D3D12_RESOURCE_BARRIER_TYPE_TRANSITION}
    D3D12_RESOURCE_BARRIER_TYPE_TRANSITION	= 0,
    {$EXTERNALSYM D3D12_RESOURCE_BARRIER_TYPE_ALIASING	=}
    D3D12_RESOURCE_BARRIER_TYPE_ALIASING	= ( D3D12_RESOURCE_BARRIER_TYPE_TRANSITION + 1 ) ,
    {$EXTERNALSYM D3D12_RESOURCE_BARRIER_TYPE_UAV	=}
    D3D12_RESOURCE_BARRIER_TYPE_UAV	= ( D3D12_RESOURCE_BARRIER_TYPE_ALIASING + 1 ));
  TD3D12ResourceBarrierType = D3D12_RESOURCE_BARRIER_TYPE;

  D3D12_RESOURCE_TRANSITION_BARRIER = record
  private
    FResource: Pointer;
    FSubresource: UINT;
    FStateBefore: D3D12_RESOURCE_STATES;
    FStateAfter: D3D12_RESOURCE_STATES;
    function GetpResource: ID3D12Resource;
    procedure SetpResource(const Value: ID3D12Resource);
  public
    property pResource: ID3D12Resource read GetpResource write SetpResource;
    property Subresource: UINT read FSubresource write FSubresource;
    property StateBefore: D3D12_RESOURCE_STATES read FStateBefore write FStateBefore;
    property StateAfter: D3D12_RESOURCE_STATES read FStateAfter write FStateAfter;
  end;
  {$EXTERNALSYM D3D12_RESOURCE_TRANSITION_BARRIER}
  TD3D12ResourceTransitionBarrier = D3D12_RESOURCE_TRANSITION_BARRIER;
  PD3D12ResourceTransitionBarrier = ^TD3D12ResourceTransitionBarrier;

  D3D12_RESOURCE_ALIASING_BARRIER = record
  private
    FResourceBefore: Pointer;
    FResourceAfter: Pointer;
    function GetpResourceAfter: ID3D12Resource;
    function GetpResourceBefore: ID3D12Resource;
    procedure SetpResourceAfter(const Value: ID3D12Resource);
    procedure SetpResourceBefore(const Value: ID3D12Resource);
  public
    property pResourceBefore: ID3D12Resource read GetpResourceBefore write SetpResourceBefore;
    property pResourceAfter: ID3D12Resource read GetpResourceAfter write SetpResourceAfter;
  end;
  {$EXTERNALSYM D3D12_RESOURCE_ALIASING_BARRIER}
  TD3D12ResourceAliasingBarrier = D3D12_RESOURCE_ALIASING_BARRIER;
  PD3D12ResourceAliasingBarrier = ^TD3D12ResourceAliasingBarrier;

  D3D12_RESOURCE_UAV_BARRIER = record
  private
    FResource: Pointer;
    function GetpResource: ID3D12Resource;
    procedure SetpResource(const Value: ID3D12Resource);
  public
    property pResource: ID3D12Resource read GetpResource write SetpResource;
  end;
  {$EXTERNALSYM D3D12_RESOURCE_UAV_BARRIER}
  TD3D12ResourceUavBarrier = D3D12_RESOURCE_UAV_BARRIER;
  PD3D12ResourceUavBarrier = ^TD3D12ResourceUavBarrier;

  {$EXTERNALSYM D3D12_RESOURCE_BARRIER_FLAGS}
  D3D12_RESOURCE_BARRIER_FLAGS = (
    {$EXTERNALSYM D3D12_RESOURCE_BARRIER_FLAG_NONE}
    D3D12_RESOURCE_BARRIER_FLAG_NONE	= 0,
    {$EXTERNALSYM D3D12_RESOURCE_BARRIER_FLAG_BEGIN_ONLY}
    D3D12_RESOURCE_BARRIER_FLAG_BEGIN_ONLY	= $1,
    {$EXTERNALSYM D3D12_RESOURCE_BARRIER_FLAG_END_ONLY}
    D3D12_RESOURCE_BARRIER_FLAG_END_ONLY	= $2);
  TD3D12ResourceBarrierFlags = D3D12_RESOURCE_BARRIER_FLAGS;

  D3D12_RESOURCE_BARRIER = record
    _Type: D3D12_RESOURCE_BARRIER_TYPE;
    Flags: D3D12_RESOURCE_BARRIER_FLAGS;
    case Integer of
      0: (Transition: TD3D12ResourceTransitionBarrier);
      1: (Aliasing: TD3D12ResourceAliasingBarrier);
      2: (UAV: TD3D12ResourceUavBarrier);
  end;
  {$EXTERNALSYM D3D12_RESOURCE_BARRIER}
  TD3D12ResourceBarrier = D3D12_RESOURCE_BARRIER;
  PD3D12ResourceBarrier = ^TD3D12ResourceBarrier;

  D3D12_SUBRESOURCE_FOOTPRINT = record
    Format: DXGI_FORMAT;
    Width: UINT;
    Height: UINT;
    Depth: UINT;
    RowPitch: UINT;
  end;
  {$EXTERNALSYM D3D12_SUBRESOURCE_FOOTPRINT}
  TD3D12SubresourceFootprint = D3D12_SUBRESOURCE_FOOTPRINT;
  PD3D12SubresourceFootprint = ^TD3D12SubresourceFootprint;

  D3D12_PLACED_SUBRESOURCE_FOOTPRINT = record
    Offset: UINT64;
    Footprint: D3D12_SUBRESOURCE_FOOTPRINT;
  end;
  {$EXTERNALSYM D3D12_PLACED_SUBRESOURCE_FOOTPRINT}
  TD3D12PlacedSubresourceFootprint = D3D12_PLACED_SUBRESOURCE_FOOTPRINT;
  PD3D12PlacedSubresourceFootprint = ^TD3D12PlacedSubresourceFootprint;

  {$EXTERNALSYM D3D12_TEXTURE_COPY_TYPE}
  D3D12_TEXTURE_COPY_TYPE = (
    {$EXTERNALSYM D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX}
    D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX	= 0,
    {$EXTERNALSYM D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT}
    D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT = 1);
  TD3D12TextureCopyType = D3D12_TEXTURE_COPY_TYPE;

  D3D12_TEXTURE_COPY_LOCATION = record
    pResource: ID3D12Resource ;
    _Type: D3D12_TEXTURE_COPY_TYPE;
    case Integer of
      0: (PlacedFootprint: D3D12_PLACED_SUBRESOURCE_FOOTPRINT);
      1: (SubresourceIndex: UINT);
  end;
  {$EXTERNALSYM D3D12_TEXTURE_COPY_LOCATION}
  TD3D12TextureCopyLocation = D3D12_TEXTURE_COPY_LOCATION;
  PD3D12TextureCopyLocation = ^TD3D12TextureCopyLocation;

  {$EXTERNALSYM D3D12_SHADER_COMPONENT_MAPPING}
  D3D12_SHADER_COMPONENT_MAPPING = (
    {$EXTERNALSYM D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_0}
    D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_0	= 0,
    {$EXTERNALSYM D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_1}
    D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_1	= 1,
    {$EXTERNALSYM D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_2}
    D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_2	= 2,
    {$EXTERNALSYM D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_3}
    D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_3	= 3,
    {$EXTERNALSYM D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_0}
    D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_0	= 4,
    {$EXTERNALSYM D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_1}
    D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_1	= 5);
  TD3D12ShaderComponentMapping = D3D12_SHADER_COMPONENT_MAPPING;

  {$EXTERNALSYM D3D12_BUFFER_SRV_FLAGS}
  D3D12_BUFFER_SRV_FLAGS = (
    {$EXTERNALSYM D3D12_BUFFER_SRV_FLAG_NONE}
    D3D12_BUFFER_SRV_FLAG_NONE	= 0,
    {$EXTERNALSYM D3D12_BUFFER_SRV_FLAG_RAW}
    D3D12_BUFFER_SRV_FLAG_RAW	= $1);
  TD3D12BufferSrvFlags = D3D12_BUFFER_SRV_FLAGS;

  D3D12_BUFFER_SRV = record
    FirstElement: UINT64;
    NumElements: UINT;
    StructureByteStride: UINT;
    Flags: D3D12_BUFFER_SRV_FLAGS;
  end;
  {$EXTERNALSYM D3D12_BUFFER_SRV}
  TD3D12BufferSrv = D3D12_BUFFER_SRV;
  PD3D12BufferSrv = ^TD3D12BufferSrv;

  D3D12_TEX1D_SRV = record
    MostDetailedMip: UINT;
    MipLevels: UINT;
    ResourceMinLODClamp: Single;
  end;
  {$EXTERNALSYM D3D12_TEX1D_SRV}
  TD3D12Tex1dSrv = D3D12_TEX1D_SRV;
  PD3D12Tex1dSrv = ^TD3D12Tex1dSrv;

  D3D12_TEX1D_ARRAY_SRV = record
    MostDetailedMip: UINT;
    MipLevels: UINT;
    FirstArraySlice: UINT;
    ArraySize: UINT;
    ResourceMinLODClamp: Single;
  end;
  {$EXTERNALSYM D3D12_TEX1D_ARRAY_SRV}
  TD3D12Tex1dArraySrv = D3D12_TEX1D_ARRAY_SRV;
  PD3D12Tex1dArraySrv = ^TD3D12Tex1dArraySrv;

  D3D12_TEX2D_SRV = record
    MostDetailedMip: UINT;
    MipLevels: UINT;
    PlaneSlice: UINT;
    ResourceMinLODClamp: Single;
  end;
  {$EXTERNALSYM D3D12_TEX2D_SRV}
  TD3D12Tex2dSrv = D3D12_TEX2D_SRV;
  PD3D12Tex2dSrv = ^TD3D12Tex2dSrv;

  D3D12_TEX2D_ARRAY_SRV = record
    MostDetailedMip: UINT;
    MipLevels: UINT;
    FirstArraySlice: UINT;
    ArraySize: UINT;
    PlaneSlice: UINT;
    ResourceMinLODClamp: Single;
  end;
  {$EXTERNALSYM D3D12_TEX2D_ARRAY_SRV}
  TD3D12Tex2dArraySrv = D3D12_TEX2D_ARRAY_SRV;
  PD3D12Tex2dArraySrv = ^TD3D12Tex2dArraySrv;

  D3D12_TEX3D_SRV = record
    MostDetailedMip: UINT;
    MipLevels: UINT;
    ResourceMinLODClamp: Single;
  end;
  {$EXTERNALSYM D3D12_TEX3D_SRV}
  TD3D12Tex3dSrv = D3D12_TEX3D_SRV;
  PD3D12Tex3dSrv = ^TD3D12Tex3dSrv;

  D3D12_TEXCUBE_SRV = record
    MostDetailedMip: UINT;
    MipLevels: UINT;
    ResourceMinLODClamp: Single;
  end;
  {$EXTERNALSYM D3D12_TEXCUBE_SRV}
  TD3D12TexcubeSrv = D3D12_TEXCUBE_SRV;
  PD3D12TexcubeSrv = ^TD3D12TexcubeSrv;

  D3D12_TEXCUBE_ARRAY_SRV = record
    MostDetailedMip: UINT;
    MipLevels: UINT;
    First2DArrayFace: UINT;
    NumCubes: UINT;
    ResourceMinLODClamp: Single;
  end;
  {$EXTERNALSYM D3D12_TEXCUBE_ARRAY_SRV}
  TD3D12TexcubeArraySrv = D3D12_TEXCUBE_ARRAY_SRV;
  PD3D12TexcubeArraySrv = ^TD3D12TexcubeArraySrv;

  D3D12_TEX2DMS_SRV = record
    UnusedField_NothingToDefine: UINT;
  end;
  {$EXTERNALSYM D3D12_TEX2DMS_SRV}
  TD3D12Tex2dmsSrv = D3D12_TEX2DMS_SRV;
  PD3D12Tex2dmsSrv = ^TD3D12Tex2dmsSrv;

  D3D12_TEX2DMS_ARRAY_SRV = record
    FirstArraySlice: UINT;
    ArraySize: UINT;
  end;
  {$EXTERNALSYM D3D12_TEX2DMS_ARRAY_SRV}
  TD3D12Tex2dmsArraySrv = D3D12_TEX2DMS_ARRAY_SRV;
  PD3D12Tex2dmsArraySrv = ^TD3D12Tex2dmsArraySrv;

  {$EXTERNALSYM D3D12_SRV_DIMENSION}
  D3D12_SRV_DIMENSION = (
    {$EXTERNALSYM D3D12_SRV_DIMENSION_UNKNOWN}
    D3D12_SRV_DIMENSION_UNKNOWN	= 0,
    {$EXTERNALSYM D3D12_SRV_DIMENSION_BUFFER}
    D3D12_SRV_DIMENSION_BUFFER	= 1,
    {$EXTERNALSYM D3D12_SRV_DIMENSION_TEXTURE1D}
    D3D12_SRV_DIMENSION_TEXTURE1D	= 2,
    {$EXTERNALSYM D3D12_SRV_DIMENSION_TEXTURE1DARRAY}
    D3D12_SRV_DIMENSION_TEXTURE1DARRAY	= 3,
    {$EXTERNALSYM D3D12_SRV_DIMENSION_TEXTURE2D}
    D3D12_SRV_DIMENSION_TEXTURE2D	= 4,
    {$EXTERNALSYM D3D12_SRV_DIMENSION_TEXTURE2DARRAY}
    D3D12_SRV_DIMENSION_TEXTURE2DARRAY	= 5,
    {$EXTERNALSYM D3D12_SRV_DIMENSION_TEXTURE2DMS}
    D3D12_SRV_DIMENSION_TEXTURE2DMS	= 6,
    {$EXTERNALSYM D3D12_SRV_DIMENSION_TEXTURE2DMSARRAY}
    D3D12_SRV_DIMENSION_TEXTURE2DMSARRAY	= 7,
    {$EXTERNALSYM D3D12_SRV_DIMENSION_TEXTURE3D}
    D3D12_SRV_DIMENSION_TEXTURE3D	= 8,
    {$EXTERNALSYM D3D12_SRV_DIMENSION_TEXTURECUBE}
    D3D12_SRV_DIMENSION_TEXTURECUBE	= 9,
    {$EXTERNALSYM D3D12_SRV_DIMENSION_TEXTURECUBEARRAY}
    D3D12_SRV_DIMENSION_TEXTURECUBEARRAY	= 10);
  TD3D12SrvDimension = D3D12_SRV_DIMENSION;

  D3D12_SHADER_RESOURCE_VIEW_DESC = record
    Format: DXGI_FORMAT;
    ViewDimension: D3D12_SRV_DIMENSION;
    Shader4ComponentMapping: UINT;
    case Integer of
      0: (Buffer: D3D12_BUFFER_SRV);
      1: (Texture1D: D3D12_TEX1D_SRV);
      2: (Texture1DArray: D3D12_TEX1D_ARRAY_SRV);
      3: (Texture2D: D3D12_TEX2D_SRV);
      4: (Texture2DArray: D3D12_TEX2D_ARRAY_SRV);
      5: (Texture2DMS: D3D12_TEX2DMS_SRV);
      6: (Texture2DMSArray: D3D12_TEX2DMS_ARRAY_SRV);
      7: (Texture3D: D3D12_TEX3D_SRV);
      8: (TextureCube: D3D12_TEXCUBE_SRV);
      9: (TextureCubeArray: D3D12_TEXCUBE_ARRAY_SRV);
  end;
  {$EXTERNALSYM D3D12_SHADER_RESOURCE_VIEW_DESC}
  TD3D12ShaderResourceViewDesc = D3D12_SHADER_RESOURCE_VIEW_DESC;
  PD3D12ShaderResourceViewDesc = ^TD3D12ShaderResourceViewDesc;

  D3D12_CONSTANT_BUFFER_VIEW_DESC = record
    BufferLocation: D3D12_GPU_VIRTUAL_ADDRESS;
    SizeInBytes: UINT;
  end;
  {$EXTERNALSYM D3D12_CONSTANT_BUFFER_VIEW_DESC}
  TD3D12ConstantBufferViewDesc = D3D12_CONSTANT_BUFFER_VIEW_DESC;
  PD3D12ConstantBufferViewDesc = ^TD3D12ConstantBufferViewDesc;

  {$EXTERNALSYM D3D12_FILTER}
  D3D12_FILTER = (
    {$EXTERNALSYM D3D12_FILTER_MIN_MAG_MIP_POINT}
    D3D12_FILTER_MIN_MAG_MIP_POINT	= 0,
    {$EXTERNALSYM D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR}
    D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR	= $1,
    {$EXTERNALSYM D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT}
    D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT	= $4,
    {$EXTERNALSYM D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR}
    D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR	= $5,
    {$EXTERNALSYM D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT}
    D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT	= $10,
    {$EXTERNALSYM D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR}
    D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR	= $11,
    {$EXTERNALSYM D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT}
    D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT	= $14,
    {$EXTERNALSYM D3D12_FILTER_MIN_MAG_MIP_LINEAR}
    D3D12_FILTER_MIN_MAG_MIP_LINEAR	= $15,
    {$EXTERNALSYM D3D12_FILTER_ANISOTROPIC}
    D3D12_FILTER_ANISOTROPIC	= $55,
    {$EXTERNALSYM D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT}
    D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT	= $80,
    {$EXTERNALSYM D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR}
    D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR	= $81,
    {$EXTERNALSYM D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT}
    D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT	= $84,
    {$EXTERNALSYM D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR}
    D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR	= $85,
    {$EXTERNALSYM D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT}
    D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT	= $90,
    {$EXTERNALSYM D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR}
    D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR	= $91,
    {$EXTERNALSYM D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT}
    D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT	= $94,
    {$EXTERNALSYM D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR}
    D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR	= $95,
    {$EXTERNALSYM D3D12_FILTER_COMPARISON_ANISOTROPIC}
    D3D12_FILTER_COMPARISON_ANISOTROPIC	= $d5,
    {$EXTERNALSYM D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT}
    D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT	= $100,
    {$EXTERNALSYM D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR}
    D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR	= $101,
    {$EXTERNALSYM D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT}
    D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT	= $104,
    {$EXTERNALSYM D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR}
    D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR	= $105,
    {$EXTERNALSYM D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT}
    D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT	= $110,
    {$EXTERNALSYM D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR}
    D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR	= $111,
    {$EXTERNALSYM D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT}
    D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT	= $114,
    {$EXTERNALSYM D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR}
    D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR	= $115,
    {$EXTERNALSYM D3D12_FILTER_MINIMUM_ANISOTROPIC}
    D3D12_FILTER_MINIMUM_ANISOTROPIC	= $155,
    {$EXTERNALSYM D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT}
    D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT	= $180,
    {$EXTERNALSYM D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR}
    D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR	= $181,
    {$EXTERNALSYM D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT}
    D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT	= $184,
    {$EXTERNALSYM D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR}
    D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR	= $185,
    {$EXTERNALSYM D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT}
    D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT	= $190,
    {$EXTERNALSYM D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR}
    D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR	= $191,
    {$EXTERNALSYM D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT}
    D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT	= $194,
    {$EXTERNALSYM D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR}
    D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR	= $195,
    {$EXTERNALSYM D3D12_FILTER_MAXIMUM_ANISOTROPIC}
    D3D12_FILTER_MAXIMUM_ANISOTROPIC	= $1d5);
  TD3D12Filter = D3D12_FILTER;

  {$EXTERNALSYM D3D12_FILTER_TYPE}
  D3D12_FILTER_TYPE = (
    {$EXTERNALSYM D3D12_FILTER_TYPE_POINT}
    D3D12_FILTER_TYPE_POINT	= 0,
    {$EXTERNALSYM D3D12_FILTER_TYPE_LINEAR}
    D3D12_FILTER_TYPE_LINEAR	= 1);
  TD3D12FilterType = D3D12_FILTER_TYPE;

  {$EXTERNALSYM D3D12_FILTER_REDUCTION_TYPE}
  D3D12_FILTER_REDUCTION_TYPE = (
    {$EXTERNALSYM D3D12_FILTER_REDUCTION_TYPE_STANDARD}
    D3D12_FILTER_REDUCTION_TYPE_STANDARD	= 0,
    {$EXTERNALSYM D3D12_FILTER_REDUCTION_TYPE_COMPARISON}
    D3D12_FILTER_REDUCTION_TYPE_COMPARISON	= 1,
    {$EXTERNALSYM D3D12_FILTER_REDUCTION_TYPE_MINIMUM}
    D3D12_FILTER_REDUCTION_TYPE_MINIMUM	= 2,
    {$EXTERNALSYM D3D12_FILTER_REDUCTION_TYPE_MAXIMUM}
    D3D12_FILTER_REDUCTION_TYPE_MAXIMUM	= 3);
  TD3D12FilterReductionType = D3D12_FILTER_REDUCTION_TYPE;

  {$EXTERNALSYM D3D12_TEXTURE_ADDRESS_MODE}
  D3D12_TEXTURE_ADDRESS_MODE = (
    {$EXTERNALSYM D3D12_TEXTURE_ADDRESS_MODE_WRAP}
    D3D12_TEXTURE_ADDRESS_MODE_WRAP	= 1,
    {$EXTERNALSYM D3D12_TEXTURE_ADDRESS_MODE_MIRROR}
    D3D12_TEXTURE_ADDRESS_MODE_MIRROR	= 2,
    {$EXTERNALSYM D3D12_TEXTURE_ADDRESS_MODE_CLAMP}
    D3D12_TEXTURE_ADDRESS_MODE_CLAMP	= 3,
    {$EXTERNALSYM D3D12_TEXTURE_ADDRESS_MODE_BORDER}
    D3D12_TEXTURE_ADDRESS_MODE_BORDER	= 4,
    {$EXTERNALSYM D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE}
    D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE	= 5);
  TD3D12TextureAddressMode = D3D12_TEXTURE_ADDRESS_MODE;

  D3D12_SAMPLER_DESC = record
    Filter: D3D12_FILTER;
    AddressU: D3D12_TEXTURE_ADDRESS_MODE;
    AddressV: D3D12_TEXTURE_ADDRESS_MODE;
    AddressW: D3D12_TEXTURE_ADDRESS_MODE;
    MipLODBias: Single;
    MaxAnisotropy: UINT;
    ComparisonFunc: D3D12_COMPARISON_FUNC;
    BorderColor: TFourSingleArray;
    MinLOD: Single;
    MaxLOD: Single;
  end;
  {$EXTERNALSYM D3D12_SAMPLER_DESC}
  TD3D12SamplerDesc = D3D12_SAMPLER_DESC;
  PD3D12SamplerDesc = ^TD3D12SamplerDesc;

  {$EXTERNALSYM D3D12_BUFFER_UAV_FLAGS}
  D3D12_BUFFER_UAV_FLAGS = (
    {$EXTERNALSYM D3D12_BUFFER_UAV_FLAG_NONE}
    D3D12_BUFFER_UAV_FLAG_NONE	= 0,
    {$EXTERNALSYM D3D12_BUFFER_UAV_FLAG_RAW}
    D3D12_BUFFER_UAV_FLAG_RAW	= $1);
  TD3D12BufferUavFlags = D3D12_BUFFER_UAV_FLAGS;

  D3D12_BUFFER_UAV = record
    FirstElement: UINT64;
    NumElements: UINT;
    StructureByteStride: UINT;
    CounterOffsetInBytes: UINT64;
    Flags: D3D12_BUFFER_UAV_FLAGS;
  end;
  {$EXTERNALSYM D3D12_BUFFER_UAV}
  TD3D12BufferUav = D3D12_BUFFER_UAV;
  PD3D12BufferUav = ^TD3D12BufferUav;

  D3D12_TEX1D_UAV = record
    MipSlice: UINT;
  end;
  {$EXTERNALSYM D3D12_TEX1D_UAV}
  TD3D12Tex1dUav = D3D12_TEX1D_UAV;
  PD3D12Tex1dUav = ^TD3D12Tex1dUav;

  D3D12_TEX1D_ARRAY_UAV = record
    MipSlice: UINT;
    FirstArraySlice: UINT;
    ArraySize: UINT;
  end;
  {$EXTERNALSYM D3D12_TEX1D_ARRAY_UAV}
  TD3D12Tex1dArrayUav = D3D12_TEX1D_ARRAY_UAV;
  PD3D12Tex1dArrayUav = ^TD3D12Tex1dArrayUav;

  D3D12_TEX2D_UAV = record
    MipSlice: UINT;
    PlaneSlice: UINT;
  end;
  {$EXTERNALSYM D3D12_TEX2D_UAV}
  TD3D12Tex2dUav = D3D12_TEX2D_UAV;
  PD3D12Tex2dUav = ^TD3D12Tex2dUav;

  D3D12_TEX2D_ARRAY_UAV = record
    MipSlice: UINT;
    FirstArraySlice: UINT;
    ArraySize: UINT;
    PlaneSlice: UINT;
  end;
  {$EXTERNALSYM D3D12_TEX2D_ARRAY_UAV}
  TD3D12Tex2dArrayUav = D3D12_TEX2D_ARRAY_UAV;
  PD3D12Tex2dArrayUav = ^TD3D12Tex2dArrayUav;

  D3D12_TEX3D_UAV = record
    MipSlice: UINT;
    FirstWSlice: UINT;
    WSize: UINT;
  end;
  {$EXTERNALSYM D3D12_TEX3D_UAV}
  TD3D12Tex3dUav = D3D12_TEX3D_UAV;
  PD3D12Tex3dUav = ^TD3D12Tex3dUav;

  {$EXTERNALSYM D3D12_UAV_DIMENSION}
  D3D12_UAV_DIMENSION = (
    {$EXTERNALSYM D3D12_UAV_DIMENSION_UNKNOWN}
    D3D12_UAV_DIMENSION_UNKNOWN	= 0,
    {$EXTERNALSYM D3D12_UAV_DIMENSION_BUFFER}
    D3D12_UAV_DIMENSION_BUFFER	= 1,
    {$EXTERNALSYM D3D12_UAV_DIMENSION_TEXTURE1D}
    D3D12_UAV_DIMENSION_TEXTURE1D	= 2,
    {$EXTERNALSYM D3D12_UAV_DIMENSION_TEXTURE1DARRAY}
    D3D12_UAV_DIMENSION_TEXTURE1DARRAY	= 3,
    {$EXTERNALSYM D3D12_UAV_DIMENSION_TEXTURE2D}
    D3D12_UAV_DIMENSION_TEXTURE2D	= 4,
    {$EXTERNALSYM D3D12_UAV_DIMENSION_TEXTURE2DARRAY}
    D3D12_UAV_DIMENSION_TEXTURE2DARRAY	= 5,
    {$EXTERNALSYM D3D12_UAV_DIMENSION_TEXTURE3D}
    D3D12_UAV_DIMENSION_TEXTURE3D	= 8);
  TD3D12UavDimension = D3D12_UAV_DIMENSION;

  D3D12_UNORDERED_ACCESS_VIEW_DESC = record
    Format: DXGI_FORMAT;
    ViewDimension: D3D12_UAV_DIMENSION;
    case Integer of
      0: (Buffer: D3D12_BUFFER_UAV);
      1: (Texture1D: D3D12_TEX1D_UAV);
      2: (Texture1DArray: D3D12_TEX1D_ARRAY_UAV);
      3: (Texture2D: D3D12_TEX2D_UAV);
      4: (Texture2DArray: D3D12_TEX2D_ARRAY_UAV);
      5: (Texture3D: D3D12_TEX3D_UAV);
  end;
  {$EXTERNALSYM D3D12_UNORDERED_ACCESS_VIEW_DESC}
  TD3D12UnorderedAccessViewDesc = D3D12_UNORDERED_ACCESS_VIEW_DESC;
  PD3D12UnorderedAccessViewDesc = ^TD3D12UnorderedAccessViewDesc;

  D3D12_BUFFER_RTV = record
    FirstElement: UINT64;
    NumElements: UINT;
  end;
  {$EXTERNALSYM D3D12_BUFFER_RTV}
  TD3D12BufferRtv = D3D12_BUFFER_RTV;
  PD3D12BufferRtv = ^TD3D12BufferRtv;

  D3D12_TEX1D_RTV = record
    MipSlice: UINT;
  end;
  {$EXTERNALSYM D3D12_TEX1D_RTV}
  TD3D12Tex1dRtv = D3D12_TEX1D_RTV;
  PD3D12Tex1dRtv = ^TD3D12Tex1dRtv;

  D3D12_TEX1D_ARRAY_RTV = record
    MipSlice: UINT;
    FirstArraySlice: UINT;
    ArraySize: UINT;
  end;
  {$EXTERNALSYM D3D12_TEX1D_ARRAY_RTV}
  TD3D12Tex1dArrayRtv = D3D12_TEX1D_ARRAY_RTV;
  PD3D12Tex1dArrayRtv = ^TD3D12Tex1dArrayRtv;

  D3D12_TEX2D_RTV = record
    MipSlice: UINT;
    PlaneSlice: UINT;
  end;
  {$EXTERNALSYM D3D12_TEX2D_RTV}
  TD3D12Tex2dRtv = D3D12_TEX2D_RTV;
  PD3D12Tex2dRtv = ^TD3D12Tex2dRtv;

  D3D12_TEX2DMS_RTV = record
    UnusedField_NothingToDefine: UINT;
  end;
  {$EXTERNALSYM D3D12_TEX2DMS_RTV}
  TD3D12Tex2dmsRtv = D3D12_TEX2DMS_RTV;
  PD3D12Tex2dmsRtv = ^TD3D12Tex2dmsRtv;

  D3D12_TEX2D_ARRAY_RTV = record
    MipSlice: UINT;
    FirstArraySlice: UINT;
    ArraySize: UINT;
    PlaneSlice: UINT;
  end;
  {$EXTERNALSYM D3D12_TEX2D_ARRAY_RTV}
  TD3D12Tex2dArrayRtv = D3D12_TEX2D_ARRAY_RTV;
  PD3D12Tex2dArrayRtv = ^TD3D12Tex2dArrayRtv;

  D3D12_TEX2DMS_ARRAY_RTV = record
    FirstArraySlice: UINT;
    ArraySize: UINT;
  end;
  {$EXTERNALSYM D3D12_TEX2DMS_ARRAY_RTV}
  TD3D12Tex2dmsArrayRtv = D3D12_TEX2DMS_ARRAY_RTV;
  PD3D12Tex2dmsArrayRtv = ^TD3D12Tex2dmsArrayRtv;

  D3D12_TEX3D_RTV = record
    MipSlice: UINT;
    FirstWSlice: UINT;
    WSize: UINT;
  end;
  {$EXTERNALSYM D3D12_TEX3D_RTV}
  TD3D12Tex3dRtv = D3D12_TEX3D_RTV;
  PD3D12Tex3dRtv = ^TD3D12Tex3dRtv;

  {$EXTERNALSYM D3D12_RTV_DIMENSION}
  D3D12_RTV_DIMENSION = (
    {$EXTERNALSYM D3D12_RTV_DIMENSION_UNKNOWN}
    D3D12_RTV_DIMENSION_UNKNOWN	= 0,
    {$EXTERNALSYM D3D12_RTV_DIMENSION_BUFFER}
    D3D12_RTV_DIMENSION_BUFFER	= 1,
    {$EXTERNALSYM D3D12_RTV_DIMENSION_TEXTURE1D}
    D3D12_RTV_DIMENSION_TEXTURE1D	= 2,
    {$EXTERNALSYM D3D12_RTV_DIMENSION_TEXTURE1DARRAY}
    D3D12_RTV_DIMENSION_TEXTURE1DARRAY	= 3,
    {$EXTERNALSYM D3D12_RTV_DIMENSION_TEXTURE2D}
    D3D12_RTV_DIMENSION_TEXTURE2D	= 4,
    {$EXTERNALSYM D3D12_RTV_DIMENSION_TEXTURE2DARRAY}
    D3D12_RTV_DIMENSION_TEXTURE2DARRAY	= 5,
    {$EXTERNALSYM D3D12_RTV_DIMENSION_TEXTURE2DMS}
    D3D12_RTV_DIMENSION_TEXTURE2DMS	= 6,
    {$EXTERNALSYM D3D12_RTV_DIMENSION_TEXTURE2DMSARRAY}
    D3D12_RTV_DIMENSION_TEXTURE2DMSARRAY	= 7,
    {$EXTERNALSYM D3D12_RTV_DIMENSION_TEXTURE3D}
    D3D12_RTV_DIMENSION_TEXTURE3D	= 8);
  TD3D12RtvDimension = D3D12_RTV_DIMENSION;

  D3D12_RENDER_TARGET_VIEW_DESC = record
    Format: DXGI_FORMAT;
    ViewDimension: D3D12_RTV_DIMENSION;
    case Integer of
      0: (Buffer: D3D12_BUFFER_RTV);
      1: (Texture1D: D3D12_TEX1D_RTV);
      2: (Texture1DArray: D3D12_TEX1D_ARRAY_RTV);
      3: (Texture2D: D3D12_TEX2D_RTV);
      4: (Texture2DArray: D3D12_TEX2D_ARRAY_RTV);
      5: (Texture2DMS: D3D12_TEX2DMS_RTV);
      6: (Texture2DMSArray: D3D12_TEX2DMS_ARRAY_RTV);
      7: (Texture3D: D3D12_TEX3D_RTV);
  end;
  {$EXTERNALSYM D3D12_RENDER_TARGET_VIEW_DESC}
  TD3D12RenderTargetViewDesc = D3D12_RENDER_TARGET_VIEW_DESC;
  PD3D12RenderTargetViewDesc = ^TD3D12RenderTargetViewDesc;

  D3D12_TEX1D_DSV = record
    MipSlice: UINT;
  end;
  {$EXTERNALSYM D3D12_TEX1D_DSV}
  TD3D12_TEX1D_DSV = D3D12_TEX1D_DSV;
  PD3D12_TEX1D_DSV = ^TD3D12_TEX1D_DSV;

  D3D12_TEX1D_ARRAY_DSV = record
    MipSlice: UINT;
    FirstArraySlice: UINT;
    ArraySize: UINT;
  end;
  {$EXTERNALSYM D3D12_TEX1D_ARRAY_DSV}
  TD3D12Tex1dArrayDsv = D3D12_TEX1D_ARRAY_DSV;
  PD3D12Tex1dArrayDsv = ^TD3D12Tex1dArrayDsv;

  D3D12_TEX2D_DSV = record
    MipSlice: UINT;
  end;
  {$EXTERNALSYM D3D12_TEX2D_DSV}
  TD3D12Tex2dDsv = D3D12_TEX2D_DSV;
  PD3D12Tex2dDsv = ^TD3D12Tex2dDsv;

  D3D12_TEX2D_ARRAY_DSV = record
    MipSlice: UINT;
    FirstArraySlice: UINT;
    ArraySize: UINT;
  end;
  {$EXTERNALSYM D3D12_TEX2D_ARRAY_DSV}
  TD3D12Tex2dArrayDsv = D3D12_TEX2D_ARRAY_DSV;
  PD3D12Tex2dArrayDsv = ^TD3D12Tex2dArrayDsv;

  D3D12_TEX2DMS_DSV = record
    UnusedField_NothingToDefine: UINT;
  end;
  {$EXTERNALSYM D3D12_TEX2DMS_DSV}
  TD3D12Tex2dmsDsv = D3D12_TEX2DMS_DSV;
  PD3D12Tex2dmsDsv = ^TD3D12Tex2dmsDsv;

  D3D12_TEX2DMS_ARRAY_DSV = record
    FirstArraySlice: UINT;
    ArraySize: UINT;
  end;
  {$EXTERNALSYM D3D12_TEX2DMS_ARRAY_DSV}
  TD3D12Tex2dmsArrayDsv = D3D12_TEX2DMS_ARRAY_DSV;
  PD3D12Tex2dmsArrayDsv = ^TD3D12Tex2dmsArrayDsv;

  {$EXTERNALSYM D3D12_DSV_FLAGS}
  D3D12_DSV_FLAGS = (
    {$EXTERNALSYM D3D12_DSV_FLAG_NONE}
    D3D12_DSV_FLAG_NONE	= 0,
    {$EXTERNALSYM D3D12_DSV_FLAG_READ_ONLY_DEPTH}
    D3D12_DSV_FLAG_READ_ONLY_DEPTH	= $1,
    {$EXTERNALSYM D3D12_DSV_FLAG_READ_ONLY_STENCIL}
    D3D12_DSV_FLAG_READ_ONLY_STENCIL	= $2);
  TD3D12DsvFlags = D3D12_DSV_FLAGS;

  {$EXTERNALSYM D3D12_DSV_DIMENSION}
  D3D12_DSV_DIMENSION = (
    {$EXTERNALSYM D3D12_DSV_DIMENSION_UNKNOWN}
    D3D12_DSV_DIMENSION_UNKNOWN	= 0,
    {$EXTERNALSYM D3D12_DSV_DIMENSION_TEXTURE1D}
    D3D12_DSV_DIMENSION_TEXTURE1D	= 1,
    {$EXTERNALSYM D3D12_DSV_DIMENSION_TEXTURE1DARRAY}
    D3D12_DSV_DIMENSION_TEXTURE1DARRAY	= 2,
    {$EXTERNALSYM D3D12_DSV_DIMENSION_TEXTURE2D}
    D3D12_DSV_DIMENSION_TEXTURE2D	= 3,
    {$EXTERNALSYM D3D12_DSV_DIMENSION_TEXTURE2DARRAY}
    D3D12_DSV_DIMENSION_TEXTURE2DARRAY	= 4,
    {$EXTERNALSYM D3D12_DSV_DIMENSION_TEXTURE2DMS}
    D3D12_DSV_DIMENSION_TEXTURE2DMS	= 5,
    {$EXTERNALSYM D3D12_DSV_DIMENSION_TEXTURE2DMSARRAY}
    D3D12_DSV_DIMENSION_TEXTURE2DMSARRAY	= 6);
  TD3D12DsvDimension = D3D12_DSV_DIMENSION;

  D3D12_DEPTH_STENCIL_VIEW_DESC = record
    Format: DXGI_FORMAT;
    ViewDimension: D3D12_DSV_DIMENSION;
    Flags: D3D12_DSV_FLAGS;
    case Integer of
      0: (Texture1D: D3D12_TEX1D_DSV);
      1: (Texture1DArray: D3D12_TEX1D_ARRAY_DSV);
      2: (Texture2D: D3D12_TEX2D_DSV);
      3: (Texture2DArray: D3D12_TEX2D_ARRAY_DSV);
      4: (Texture2DMS: D3D12_TEX2DMS_DSV);
      5: (Texture2DMSArray: D3D12_TEX2DMS_ARRAY_DSV);
  end;
  {$EXTERNALSYM D3D12_DEPTH_STENCIL_VIEW_DESC}
  TD3D12DepthStencilViewDesc = D3D12_DEPTH_STENCIL_VIEW_DESC;
  PD3D12DepthStencilViewDesc = ^TD3D12DepthStencilViewDesc;

  {$EXTERNALSYM D3D12_CLEAR_FLAGS}
  D3D12_CLEAR_FLAGS = (
    {$EXTERNALSYM D3D12_CLEAR_FLAG_DEPTH}
    D3D12_CLEAR_FLAG_DEPTH	= $1,
    {$EXTERNALSYM D3D12_CLEAR_FLAG_STENCIL}
    D3D12_CLEAR_FLAG_STENCIL	= $2);
  TD3D12ClearFlags = D3D12_CLEAR_FLAGS;

  {$EXTERNALSYM D3D12_FENCE_FLAGS}
  D3D12_FENCE_FLAGS = (
    {$EXTERNALSYM D3D12_FENCE_FLAG_NONE}
    D3D12_FENCE_FLAG_NONE	= 0,
    {$EXTERNALSYM D3D12_FENCE_FLAG_SHARED}
    D3D12_FENCE_FLAG_SHARED	= $1,
    {$EXTERNALSYM D3D12_FENCE_FLAG_SHARED_CROSS_ADAPTER}
    D3D12_FENCE_FLAG_SHARED_CROSS_ADAPTER	= $2);
  TD3D12FenceFlags = D3D12_FENCE_FLAGS;

  {$EXTERNALSYM D3D12_DESCRIPTOR_HEAP_TYPE}
  D3D12_DESCRIPTOR_HEAP_TYPE = (
    {$EXTERNALSYM D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV}
    D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV	= 0,
    {$EXTERNALSYM D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER	=}
    D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER	= ( D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV + 1 ) ,
    {$EXTERNALSYM D3D12_DESCRIPTOR_HEAP_TYPE_RTV	=}
    D3D12_DESCRIPTOR_HEAP_TYPE_RTV	= ( D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER + 1 ) ,
    {$EXTERNALSYM D3D12_DESCRIPTOR_HEAP_TYPE_DSV	=}
    D3D12_DESCRIPTOR_HEAP_TYPE_DSV	= ( D3D12_DESCRIPTOR_HEAP_TYPE_RTV + 1 ) ,
    {$EXTERNALSYM D3D12_DESCRIPTOR_HEAP_TYPE_NUM_TYPES	=}
    D3D12_DESCRIPTOR_HEAP_TYPE_NUM_TYPES	= ( D3D12_DESCRIPTOR_HEAP_TYPE_DSV + 1 ));
  TD3D12DescriptorHeapType = D3D12_DESCRIPTOR_HEAP_TYPE;

  {$EXTERNALSYM D3D12_DESCRIPTOR_HEAP_FLAGS}
  D3D12_DESCRIPTOR_HEAP_FLAGS = (
    {$EXTERNALSYM D3D12_DESCRIPTOR_HEAP_FLAG_NONE}
    D3D12_DESCRIPTOR_HEAP_FLAG_NONE	= 0,
    {$EXTERNALSYM D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE}
    D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE	= $1);
  TD3D12DescriptorHeapFlags = D3D12_DESCRIPTOR_HEAP_FLAGS;

  D3D12_DESCRIPTOR_HEAP_DESC = record
    _Type: TD3D12DescriptorHeapType;
    NumDescriptors: UINT;
    Flags: TD3D12DescriptorHeapFlags;
    NodeMask: UINT;
  end;
  {$EXTERNALSYM D3D12_DESCRIPTOR_HEAP_DESC}
  TD3D12DescriptorHeapDesc = D3D12_DESCRIPTOR_HEAP_DESC;
  PD3D12DescriptorHeapDesc = ^TD3D12DescriptorHeapDesc;

  {$EXTERNALSYM D3D12_DESCRIPTOR_RANGE_TYPE}
  D3D12_DESCRIPTOR_RANGE_TYPE = (
    {$EXTERNALSYM D3D12_DESCRIPTOR_RANGE_TYPE_SRV}
    D3D12_DESCRIPTOR_RANGE_TYPE_SRV	= 0,
    {$EXTERNALSYM D3D12_DESCRIPTOR_RANGE_TYPE_UAV	=}
    D3D12_DESCRIPTOR_RANGE_TYPE_UAV	= ( D3D12_DESCRIPTOR_RANGE_TYPE_SRV + 1 ) ,
    {$EXTERNALSYM D3D12_DESCRIPTOR_RANGE_TYPE_CBV	=}
    D3D12_DESCRIPTOR_RANGE_TYPE_CBV	= ( D3D12_DESCRIPTOR_RANGE_TYPE_UAV + 1 ) ,
    {$EXTERNALSYM D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER	=}
    D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER	= ( D3D12_DESCRIPTOR_RANGE_TYPE_CBV + 1 ));
  TD3D12DescriptorRangeType = D3D12_DESCRIPTOR_RANGE_TYPE;

  D3D12_DESCRIPTOR_RANGE = record
    RangeType: D3D12_DESCRIPTOR_RANGE_TYPE;
    NumDescriptors: UINT;
    BaseShaderRegister: UINT;
    RegisterSpace: UINT;
    OffsetInDescriptorsFromTableStart: UINT;
  end;
  {$EXTERNALSYM D3D12_DESCRIPTOR_RANGE}
  TD3D12DescriptorRange = D3D12_DESCRIPTOR_RANGE;
  PD3D12DescriptorRange = ^TD3D12DescriptorRange;

  D3D12_ROOT_DESCRIPTOR_TABLE = record
    NumDescriptorRanges: UINT;
    (*_Field_size_full_(NumDescriptorRanges)*)
    pDescriptorRanges: PD3D12DescriptorRange;
  end;
  {$EXTERNALSYM D3D12_ROOT_DESCRIPTOR_TABLE}
  TD3D12RootDescriptorTable = D3D12_ROOT_DESCRIPTOR_TABLE;
  PD3D12RootDescriptorTable = ^TD3D12RootDescriptorTable;

  D3D12_ROOT_CONSTANTS = record
    ShaderRegister: UINT;
    RegisterSpace: UINT;
    Num32BitValues: UINT;
  end;
  {$EXTERNALSYM D3D12_ROOT_CONSTANTS}
  TD3D12RootConstants = D3D12_ROOT_CONSTANTS;
  PD3D12RootConstants = ^TD3D12RootConstants;

  D3D12_ROOT_DESCRIPTOR = record
    ShaderRegister: UINT;
    RegisterSpace: UINT;
  end;
  {$EXTERNALSYM D3D12_ROOT_DESCRIPTOR}
  TD3D12RootDescriptor = D3D12_ROOT_DESCRIPTOR;
  PD3D12RootDescriptor = ^TD3D12RootDescriptor;

  {$EXTERNALSYM D3D12_SHADER_VISIBILITY}
  D3D12_SHADER_VISIBILITY = (
    {$EXTERNALSYM D3D12_SHADER_VISIBILITY_ALL}
    D3D12_SHADER_VISIBILITY_ALL	= 0,
    {$EXTERNALSYM D3D12_SHADER_VISIBILITY_VERTEX}
    D3D12_SHADER_VISIBILITY_VERTEX	= 1,
    {$EXTERNALSYM D3D12_SHADER_VISIBILITY_HULL}
    D3D12_SHADER_VISIBILITY_HULL	= 2,
    {$EXTERNALSYM D3D12_SHADER_VISIBILITY_DOMAIN}
    D3D12_SHADER_VISIBILITY_DOMAIN	= 3,
    {$EXTERNALSYM D3D12_SHADER_VISIBILITY_GEOMETRY}
    D3D12_SHADER_VISIBILITY_GEOMETRY	= 4,
    {$EXTERNALSYM D3D12_SHADER_VISIBILITY_PIXEL}
    D3D12_SHADER_VISIBILITY_PIXEL	= 5);
  TD3D12ShaderVisibility = D3D12_SHADER_VISIBILITY;

  {$EXTERNALSYM D3D12_ROOT_PARAMETER_TYPE}
  D3D12_ROOT_PARAMETER_TYPE = (
    {$EXTERNALSYM D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE}
    D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE	= 0,
    {$EXTERNALSYM D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS}
    D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS	= ( D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE + 1 ) ,
    {$EXTERNALSYM D3D12_ROOT_PARAMETER_TYPE_CBV}
    D3D12_ROOT_PARAMETER_TYPE_CBV	= ( D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS + 1 ) ,
    {$EXTERNALSYM D3D12_ROOT_PARAMETER_TYPE_SRV}
    D3D12_ROOT_PARAMETER_TYPE_SRV	= ( D3D12_ROOT_PARAMETER_TYPE_CBV + 1 ) ,
    {$EXTERNALSYM D3D12_ROOT_PARAMETER_TYPE_UAV}
    D3D12_ROOT_PARAMETER_TYPE_UAV	= ( D3D12_ROOT_PARAMETER_TYPE_SRV + 1 ));
  TD3D12RootParameterType = D3D12_ROOT_PARAMETER_TYPE;

  TD3D12_ROOT_PARAMETER_INNER = record
    case Integer of
      0: (DescriptorTable: D3D12_ROOT_DESCRIPTOR_TABLE);
      1: (Constants: D3D12_ROOT_CONSTANTS);
      2: (Descriptor: D3D12_ROOT_DESCRIPTOR);
  end;

  D3D12_ROOT_PARAMETER = record
    ParameterType: D3D12_ROOT_PARAMETER_TYPE;
    Union: TD3D12_ROOT_PARAMETER_INNER;
    ShaderVisibility: D3D12_SHADER_VISIBILITY;
  end;
  {$EXTERNALSYM D3D12_ROOT_PARAMETER}
  TD3D12RootParameter = D3D12_ROOT_PARAMETER;
  PD3D12RootParameter = ^TD3D12RootParameter;

  {$EXTERNALSYM D3D12_ROOT_SIGNATURE_FLAGS}
  D3D12_ROOT_SIGNATURE_FLAGS = (
    {$EXTERNALSYM D3D12_ROOT_SIGNATURE_FLAG_NONE}
    D3D12_ROOT_SIGNATURE_FLAG_NONE	= 0,
    {$EXTERNALSYM D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT}
    D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT	= $1,
    {$EXTERNALSYM D3D12_ROOT_SIGNATURE_FLAG_DENY_VERTEX_SHADER_ROOT_ACCESS}
    D3D12_ROOT_SIGNATURE_FLAG_DENY_VERTEX_SHADER_ROOT_ACCESS	= $2,
    {$EXTERNALSYM D3D12_ROOT_SIGNATURE_FLAG_DENY_HULL_SHADER_ROOT_ACCESS}
    D3D12_ROOT_SIGNATURE_FLAG_DENY_HULL_SHADER_ROOT_ACCESS	= $4,
    {$EXTERNALSYM D3D12_ROOT_SIGNATURE_FLAG_DENY_DOMAIN_SHADER_ROOT_ACCESS}
    D3D12_ROOT_SIGNATURE_FLAG_DENY_DOMAIN_SHADER_ROOT_ACCESS	= $8,
    {$EXTERNALSYM D3D12_ROOT_SIGNATURE_FLAG_DENY_GEOMETRY_SHADER_ROOT_ACCESS}
    D3D12_ROOT_SIGNATURE_FLAG_DENY_GEOMETRY_SHADER_ROOT_ACCESS	= $10,
    {$EXTERNALSYM D3D12_ROOT_SIGNATURE_FLAG_DENY_PIXEL_SHADER_ROOT_ACCESS}
    D3D12_ROOT_SIGNATURE_FLAG_DENY_PIXEL_SHADER_ROOT_ACCESS	= $20,
    {$EXTERNALSYM D3D12_ROOT_SIGNATURE_FLAG_ALLOW_STREAM_OUTPUT}
    D3D12_ROOT_SIGNATURE_FLAG_ALLOW_STREAM_OUTPUT	= $40);
  TD3D12RootSignatureFlags = D3D12_ROOT_SIGNATURE_FLAGS;

  {$EXTERNALSYM D3D12_STATIC_BORDER_COLOR}
  D3D12_STATIC_BORDER_COLOR = (
    {$EXTERNALSYM D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK}
    D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK	= 0,
    {$EXTERNALSYM D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK}
    D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK	= ( D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK + 1 ) ,
    {$EXTERNALSYM D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE}
    D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE	= ( D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK + 1 ));
  TD3D12StaticBorderColor = D3D12_STATIC_BORDER_COLOR;

  D3D12_STATIC_SAMPLER_DESC = record
    Filter: D3D12_FILTER;
    AddressU: D3D12_TEXTURE_ADDRESS_MODE;
    AddressV: D3D12_TEXTURE_ADDRESS_MODE;
    AddressW: D3D12_TEXTURE_ADDRESS_MODE;
    MipLODBias: Single;
    MaxAnisotropy: UINT;
    ComparisonFunc: D3D12_COMPARISON_FUNC;
    BorderColor: D3D12_STATIC_BORDER_COLOR;
    MinLOD: Single;
    MaxLOD: Single;
    ShaderRegister: UINT;
    RegisterSpace: UINT;
    ShaderVisibility: D3D12_SHADER_VISIBILITY;
  end;
  {$EXTERNALSYM D3D12_STATIC_SAMPLER_DESC}
  TD3D12_STATIC_SAMPLER_DESC = D3D12_STATIC_SAMPLER_DESC;
  PD3D12_STATIC_SAMPLER_DESC = ^TD3D12_STATIC_SAMPLER_DESC;

  D3D12_ROOT_SIGNATURE_DESC = record
    NumParameters: UINT;
    (*_Field_size_full_(NumParameters)*)
    pParameters: PD3D12RootParameter;
    NumStaticSamplers: UINT;
    (*_Field_size_full_(NumStaticSamplers)*)
    pStaticSamplers: PD3D12_STATIC_SAMPLER_DESC;
    Flags: D3D12_ROOT_SIGNATURE_FLAGS;
  end;
  {$EXTERNALSYM D3D12_ROOT_SIGNATURE_DESC}
  TD3D12RootSignatureDesc = D3D12_ROOT_SIGNATURE_DESC;
  PD3D12RootSignatureDesc = ^TD3D12RootSignatureDesc;

  {$EXTERNALSYM D3D_ROOT_SIGNATURE_VERSION}
  D3D_ROOT_SIGNATURE_VERSION = (
    {$EXTERNALSYM D3D_ROOT_SIGNATURE_VERSION_1}
    D3D_ROOT_SIGNATURE_VERSION_1	= $1);
  TD3DRootSignatureVersion = D3D_ROOT_SIGNATURE_VERSION;
  PD3DRootSignatureVersion = ^TD3DRootSignatureVersion;

// interface ID3D12RootSignatureDeserializer
// [unique][local][object][uuid]

  ID3D12RootSignatureDeserializer = interface(IUnknown)
  ['{34AB647B-3CC8-46AC-841B-C0965645C046}']
    procedure GetRootSignatureDesc(out RootSignatureDesc: TD3D12RootSignatureDesc); stdcall;
  end;
  {$EXTERNALSYM IID_ID3D12RootSignatureDeserializer}
  IID_ID3D12RootSignatureDeserializer = ID3D12RootSignatureDeserializer;
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12RootSignatureDeserializer);'}
  {$EXTERNALSYM ID3D12RootSignatureDeserializer}

// interface __MIDL_itf_d3d12_0000_0002
// [local]

  D3D12_CPU_DESCRIPTOR_HANDLE = record
    ptr: SIZE_T;
  end;
  {$EXTERNALSYM D3D12_CPU_DESCRIPTOR_HANDLE}
  TD3D12CpuDescriptorHandle = D3D12_CPU_DESCRIPTOR_HANDLE;
  PD3D12CpuDescriptorHandle = ^TD3D12CpuDescriptorHandle;

  D3D12_GPU_DESCRIPTOR_HANDLE = record
    ptr: UINT64;
  end;
  {$EXTERNALSYM D3D12_GPU_DESCRIPTOR_HANDLE}
  TD3D12GpuDescriptorHandle = D3D12_GPU_DESCRIPTOR_HANDLE;
  PD3D12GpuDescriptorHandle = ^TD3D12GpuDescriptorHandle;

// If rects are supplied in D3D12_DISCARD_REGION, below, the resource
// must have 2D subresources with all specified subresources the same dimension.
  D3D12_DISCARD_REGION = record
    NumRects: UINT;
    (*_In_reads_(NumRects)  const*)
    pRects: PD3D12Rect;
    FirstSubresource: UINT;
    NumSubresources: UINT;
  end;
  {$EXTERNALSYM D3D12_DISCARD_REGION}
  TD3D12DiscardRegion = D3D12_DISCARD_REGION;
  PD3D12DiscardRegion = ^TD3D12DiscardRegion;

  {$EXTERNALSYM D3D12_QUERY_HEAP_TYPE}
  D3D12_QUERY_HEAP_TYPE = (
    {$EXTERNALSYM D3D12_QUERY_HEAP_TYPE_OCCLUSION}
    D3D12_QUERY_HEAP_TYPE_OCCLUSION	= 0,
    {$EXTERNALSYM D3D12_QUERY_HEAP_TYPE_TIMESTAMP}
    D3D12_QUERY_HEAP_TYPE_TIMESTAMP	= 1,
    {$EXTERNALSYM D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS}
    D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS	= 2,
    {$EXTERNALSYM D3D12_QUERY_HEAP_TYPE_SO_STATISTICS}
    D3D12_QUERY_HEAP_TYPE_SO_STATISTICS	= 3);
  TD3D12QueryHeapType = D3D12_QUERY_HEAP_TYPE;

  D3D12_QUERY_HEAP_DESC = record
    _Type: D3D12_QUERY_HEAP_TYPE;
    Count: UINT;
    NodeMask: UINT;
  end;
  {$EXTERNALSYM D3D12_QUERY_HEAP_DESC}
  TD3D12QueryHeapDesc = D3D12_QUERY_HEAP_DESC;
  PD3D12QueryHeapDesc = ^TD3D12QueryHeapDesc;

  {$EXTERNALSYM D3D12_QUERY_TYPE}
  D3D12_QUERY_TYPE = (
    {$EXTERNALSYM D3D12_QUERY_TYPE_OCCLUSION}
    D3D12_QUERY_TYPE_OCCLUSION	= 0,
    {$EXTERNALSYM D3D12_QUERY_TYPE_BINARY_OCCLUSION}
    D3D12_QUERY_TYPE_BINARY_OCCLUSION	= 1,
    {$EXTERNALSYM D3D12_QUERY_TYPE_TIMESTAMP}
    D3D12_QUERY_TYPE_TIMESTAMP	= 2,
    {$EXTERNALSYM D3D12_QUERY_TYPE_PIPELINE_STATISTICS}
    D3D12_QUERY_TYPE_PIPELINE_STATISTICS	= 3,
    {$EXTERNALSYM D3D12_QUERY_TYPE_SO_STATISTICS_STREAM0}
    D3D12_QUERY_TYPE_SO_STATISTICS_STREAM0	= 4,
    {$EXTERNALSYM D3D12_QUERY_TYPE_SO_STATISTICS_STREAM1}
    D3D12_QUERY_TYPE_SO_STATISTICS_STREAM1	= 5,
    {$EXTERNALSYM D3D12_QUERY_TYPE_SO_STATISTICS_STREAM2}
    D3D12_QUERY_TYPE_SO_STATISTICS_STREAM2	= 6,
    {$EXTERNALSYM D3D12_QUERY_TYPE_SO_STATISTICS_STREAM3}
    D3D12_QUERY_TYPE_SO_STATISTICS_STREAM3	= 7);
  TD3D12QueryType = D3D12_QUERY_TYPE;

  {$EXTERNALSYM D3D12_PREDICATION_OP}
  D3D12_PREDICATION_OP = (
    {$EXTERNALSYM D3D12_PREDICATION_OP_EQUAL_ZERO}
    D3D12_PREDICATION_OP_EQUAL_ZERO	= 0,
    {$EXTERNALSYM D3D12_PREDICATION_OP_NOT_EQUAL_ZERO}
    D3D12_PREDICATION_OP_NOT_EQUAL_ZERO	= 1);
  TD3D12PredicationOp = D3D12_PREDICATION_OP;

  D3D12_QUERY_DATA_PIPELINE_STATISTICS = record
    IAVertices: UINT64;
    IAPrimitives: UINT64;
    VSInvocations: UINT64;
    GSInvocations: UINT64;
    GSPrimitives: UINT64;
    CInvocations: UINT64;
    CPrimitives: UINT64;
    PSInvocations: UINT64;
    HSInvocations: UINT64;
    DSInvocations: UINT64;
    CSInvocations: UINT64;
  end;
  {$EXTERNALSYM D3D12_QUERY_DATA_PIPELINE_STATISTICS}
  TD3D12QueryDataPipelineStatistics = D3D12_QUERY_DATA_PIPELINE_STATISTICS;
  PD3D12QueryDataPipelineStatistics = ^TD3D12QueryDataPipelineStatistics;

  D3D12_QUERY_DATA_SO_STATISTICS = record
    NumPrimitivesWritten: UINT64;
    PrimitivesStorageNeeded: UINT64;
  end;
  {$EXTERNALSYM D3D12_QUERY_DATA_SO_STATISTICS}
  TD3D12QueryDataSoStatistics = D3D12_QUERY_DATA_SO_STATISTICS;
  PD3D12QueryDataSoStatistics = ^TD3D12QueryDataSoStatistics;

  D3D12_STREAM_OUTPUT_BUFFER_VIEW = record
    BufferLocation: D3D12_GPU_VIRTUAL_ADDRESS;
    SizeInBytes: UINT64;
    BufferFilledSizeLocation: D3D12_GPU_VIRTUAL_ADDRESS;
  end;
  {$EXTERNALSYM D3D12_STREAM_OUTPUT_BUFFER_VIEW}
  TD3D12StreamOutputBufferView = D3D12_STREAM_OUTPUT_BUFFER_VIEW;
  PD3D12StreamOutputBufferView = ^TD3D12StreamOutputBufferView;

  D3D12_DRAW_ARGUMENTS = record
    VertexCountPerInstance: UINT;
    InstanceCount: UINT;
    StartVertexLocation: UINT;
    StartInstanceLocation: UINT;
  end;
  {$EXTERNALSYM D3D12_DRAW_ARGUMENTS}
  TD3D12DrawArguments = D3D12_DRAW_ARGUMENTS;
  PD3D12DrawArguments = ^TD3D12DrawArguments;

  D3D12_DRAW_INDEXED_ARGUMENTS = record
    IndexCountPerInstance: UINT;
    InstanceCount: UINT;
    StartIndexLocation: UINT;
    BaseVertexLocation: INT32;
    StartInstanceLocation: UINT;
  end;
  {$EXTERNALSYM D3D12_DRAW_INDEXED_ARGUMENTS}
  TD3D12DrawIndexedArguments = D3D12_DRAW_INDEXED_ARGUMENTS;
  PD3D12DrawIndexedArguments = ^TD3D12DrawIndexedArguments;

  D3D12_DISPATCH_ARGUMENTS = record
    ThreadGroupCountX: UINT;
    ThreadGroupCountY: UINT;
    ThreadGroupCountZ: UINT;
  end;
  {$EXTERNALSYM D3D12_DISPATCH_ARGUMENTS}
  TD3D12DispatchArguments = D3D12_DISPATCH_ARGUMENTS;
  PD3D12DispatchArguments = ^TD3D12DispatchArguments;

  D3D12_VERTEX_BUFFER_VIEW = record
    BufferLocation: D3D12_GPU_VIRTUAL_ADDRESS;
    SizeInBytes: UINT;
    StrideInBytes: UINT;
  end;
  {$EXTERNALSYM D3D12_VERTEX_BUFFER_VIEW}
  TD3D12VertexBufferView = D3D12_VERTEX_BUFFER_VIEW;
  PD3D12VertexBufferView = ^TD3D12VertexBufferView;

  D3D12_INDEX_BUFFER_VIEW = record
    BufferLocation: D3D12_GPU_VIRTUAL_ADDRESS;
    SizeInBytes: UINT;
    Format: DXGI_FORMAT;
  end;
  {$EXTERNALSYM D3D12_INDEX_BUFFER_VIEW}
  TD3D12IndexBufferView = D3D12_INDEX_BUFFER_VIEW;
  PD3D12IndexBufferView = ^TD3D12IndexBufferView;

  {$EXTERNALSYM D3D12_INDIRECT_ARGUMENT_TYPE}
  D3D12_INDIRECT_ARGUMENT_TYPE = (
    {$EXTERNALSYM D3D12_INDIRECT_ARGUMENT_TYPE_DRAW}
    D3D12_INDIRECT_ARGUMENT_TYPE_DRAW	= 0,
    {$EXTERNALSYM D3D12_INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED}
    D3D12_INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED	= ( D3D12_INDIRECT_ARGUMENT_TYPE_DRAW + 1 ) ,
    {$EXTERNALSYM D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH}
    D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH	= ( D3D12_INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED + 1 ) ,
    {$EXTERNALSYM D3D12_INDIRECT_ARGUMENT_TYPE_VERTEX_BUFFER_VIEW}
    D3D12_INDIRECT_ARGUMENT_TYPE_VERTEX_BUFFER_VIEW	= ( D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH + 1 ) ,
    {$EXTERNALSYM D3D12_INDIRECT_ARGUMENT_TYPE_INDEX_BUFFER_VIEW}
    D3D12_INDIRECT_ARGUMENT_TYPE_INDEX_BUFFER_VIEW	= ( D3D12_INDIRECT_ARGUMENT_TYPE_VERTEX_BUFFER_VIEW + 1 ) ,
    {$EXTERNALSYM D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT	=}
    D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT	= ( D3D12_INDIRECT_ARGUMENT_TYPE_INDEX_BUFFER_VIEW + 1 ) ,
    {$EXTERNALSYM D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT_BUFFER_VIEW}
    D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT_BUFFER_VIEW	= ( D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT + 1 ) ,
    {$EXTERNALSYM D3D12_INDIRECT_ARGUMENT_TYPE_SHADER_RESOURCE_VIEW}
    D3D12_INDIRECT_ARGUMENT_TYPE_SHADER_RESOURCE_VIEW	= ( D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT_BUFFER_VIEW + 1 ) ,
    {$EXTERNALSYM D3D12_INDIRECT_ARGUMENT_TYPE_UNORDERED_ACCESS_VIEW}
    D3D12_INDIRECT_ARGUMENT_TYPE_UNORDERED_ACCESS_VIEW	= ( D3D12_INDIRECT_ARGUMENT_TYPE_SHADER_RESOURCE_VIEW + 1 ));
  TD3D12IndirectArgumentType = D3D12_INDIRECT_ARGUMENT_TYPE;

  TD3D12_INDIRECT_ARGUMENT_DESC_VertexBuffer = record
    Slot: UINT ;
  end;

  TD3D12_INDIRECT_ARGUMENT_DESC_Constant = record
    RootParameterIndex: UINT;
    DestOffsetIn32BitValues: UINT;
    Num32BitValuesToSet: UINT;
  end;

  TD3D12_INDIRECT_ARGUMENT_DESC_ConstantBufferView = record
    RootParameterIndex: UINT;
  end;

  TD3D12_INDIRECT_ARGUMENT_DESC_ShaderResourceView = record
    RootParameterIndex: UINT;
  end;

  TD3D12_INDIRECT_ARGUMENT_DESC_UnorderedAccessView = record
    RootParameterIndex: UINT;
  end;

  D3D12_INDIRECT_ARGUMENT_DESC = record
    _Type: D3D12_INDIRECT_ARGUMENT_TYPE;
    case Integer of
      0: (VertexBuffer: TD3D12_INDIRECT_ARGUMENT_DESC_VertexBuffer);
      1: (Constant: TD3D12_INDIRECT_ARGUMENT_DESC_Constant);
      2: (ConstantBufferView: TD3D12_INDIRECT_ARGUMENT_DESC_ConstantBufferView);
      3: (ShaderResourceView: TD3D12_INDIRECT_ARGUMENT_DESC_ShaderResourceView);
      4: (UnorderedAccessView: TD3D12_INDIRECT_ARGUMENT_DESC_UnorderedAccessView);
  end;
  {$EXTERNALSYM D3D12_INDIRECT_ARGUMENT_DESC}
  TD3D12IndirectArgumentDesc = D3D12_INDIRECT_ARGUMENT_DESC;
  PD3D12IndirectArgumentDesc = ^TD3D12IndirectArgumentDesc;

  D3D12_COMMAND_SIGNATURE_DESC = record
    ByteStride: UINT;
    NumArgumentDescs: UINT;
    (*_Field_size_full_(NumArgumentDescs)*)
    pArgumentDescs: PD3D12IndirectArgumentDesc;
    NodeMask: UINT;
  end;
  {$EXTERNALSYM D3D12_COMMAND_SIGNATURE_DESC}
  TD3D12CommandSignatureDesc = D3D12_COMMAND_SIGNATURE_DESC;
  PD3D12CommandSignatureDesc = ^TD3D12CommandSignatureDesc;

// interface ID3D12Pageable
// [unique][local][object][uuid]
  ID3D12Pageable = interface(ID3D12DeviceChild)
  ['{63EE58FB-1268-4835-86DA-F008CE62F0D6}']
  end;
  {$EXTERNALSYM IID_ID3D12Pageable}
  IID_ID3D12Pageable = ID3D12Pageable;
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12Pageable);'}
  {$EXTERNALSYM ID3D12Pageable}

// interface ID3D12Heap
// [unique][local][object][uuid]

  ID3D12Heap = interface(ID3D12Pageable)
  ['{6B3B2502-6E51-45B3-90EE-9884265E8DF3}']
    function GetDesc: D3D12_HEAP_DESC; stdcall;
  end;
  {$EXTERNALSYM IID_ID3D12Heap}
  IID_ID3D12Heap = ID3D12Heap;
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12Heap);'}
  {$EXTERNALSYM ID3D12Heap}

// interface ID3D12Resource
// [unique][local][object][uuid]

  {$EXTERNALSYM IID_ID3D12Resource}
  IID_ID3D12Resource = ID3D12Resource;
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12Resource);'}
  {$EXTERNALSYM ID3D12Resource}
  ID3D12Resource = interface(ID3D12Pageable)
  ['{696442BE-A72E-4059-BC79-5B5C98040FAD}']
    function Map(
        Subresource: UINT;
        (*_In_opt_*) const pReadRange: PD3D12Range;
        (*_Outptr_opt_result_bytebuffer_(_Inexpressible_("Dependent on resource"))*)
        out ppData): HRESULT; stdcall;

    procedure Unmap(Subresource: UINT; (*_In_opt_*) const pWrittenRange: PD3D12Range); stdcall;

    procedure GetDesc(out ResourceDesc: TD3D12ResourceDesc); stdcall;

    function GetGPUVirtualAddress: TD3D12GpuVirtualAddress; stdcall;

    function WriteToSubresource(
        DstSubresource: UINT;
        (*_In_opt_*) const pDstBox: PD3D12Box;
        (*_In_*) const pSrcData: Pointer;
        SrcRowPitch: UINT;
        SrcDepthPitch: UINT): HRESULT; stdcall;

    function ReadFromSubresource(
        (*_Out_*) pDstData: Pointer;
        DstRowPitch: UINT;
        DstDepthPitch: UINT;
        SrcSubresource: UINT;
        (*_In_opt_*) const pSrcBox: PD3D12Box): HRESULT; stdcall;

    function GetHeapProperties(
        (*_Out_opt_*) pHeapProperties: PD3D12HeapProperties;
        (*_Out_opt_*) pHeapFlags: PD3D12HeapFlags): HRESULT; stdcall;
  end;

// interface ID3D12CommandAllocator
// [unique][local][object][uuid]

  ID3D12CommandAllocator = interface(ID3D12Pageable)
  ['{6102DEE4-AF59-4B09-B999-B44D73F09B24}']
    function Reset: HRESULT; stdcall;
  end;
  {$EXTERNALSYM IID_ID3D12CommandAllocator}
  IID_ID3D12CommandAllocator = ID3D12CommandAllocator;
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12CommandAllocator);'}
  {$EXTERNALSYM ID3D12CommandAllocator}

// interface ID3D12Fence
// [unique][local][object][uuid]

  ID3D12Fence = interface(ID3D12Pageable)
  ['{0A753DCF-C4D8-4B91-ADF6-BE5A60D95A76}']
    function GetCompletedValue: UINT64; stdcall;

    function SetEventOnCompletion(Value: UINT64; hEvent: THandle): HRESULT; stdcall;

    function Signal(Value: UINT64): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IID_ID3D12Fence}
  IID_ID3D12Fence = ID3D12Fence;
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12Fence);'}
  {$EXTERNALSYM ID3D12Fence}

// interface ID3D12PipelineState
// [unique][local][object][uuid]

  ID3D12PipelineState = interface(ID3D12Pageable)
  ['{765A30F3-F624-4C6F-A828-ACE948622445}']
    function GetCachedBlob((*_COM_Outptr_*) [Ref] ppBlob: ID3DBlob): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IID_ID3D12PipelineState}
  IID_ID3D12PipelineState = ID3D12PipelineState;
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12PipelineState);'}
  {$EXTERNALSYM ID3D12PipelineState}

// interface ID3D12DescriptorHeap
// [unique][local][object][uuid]
  ID3D12DescriptorHeap = interface(ID3D12Pageable)
  ['{8EFB471D-616C-4F49-90F7-127BB763FA51}']
    procedure GetDesc(out desc: TD3D12DescriptorHeapDesc); stdcall;
    procedure GetCPUDescriptorHandleForHeapStart(out rtvHandle: TD3D12CpuDescriptorHandle); stdcall;
    procedure GetGPUDescriptorHandleForHeapStart(out gpuHandle: TD3D12GpuDescriptorHandle); stdcall;
  end;
  {$EXTERNALSYM IID_ID3D12DescriptorHeap}
  IID_ID3D12DescriptorHeap = ID3D12DescriptorHeap;
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12DescriptorHeap);'}
  {$EXTERNALSYM ID3D12DescriptorHeap}

// interface ID3D12QueryHeap
// [unique][local][object][uuid]

  ID3D12QueryHeap = interface(ID3D12Pageable)
  ['{0D9658AE-ED45-469E-A61D-970EC583CAB4}']
  end;
  {$EXTERNALSYM IID_ID3D12QueryHeap}
  IID_ID3D12QueryHeap = ID3D12QueryHeap;
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12QueryHeap);'}
  {$EXTERNALSYM ID3D12QueryHeap}

// interface ID3D12CommandSignature
// [unique][local][object][uuid]

  ID3D12CommandSignature = interface(ID3D12Pageable)
  ['{C36A797C-EC80-4F0A-8985-A7B2475082D1}']
  end;
  {$EXTERNALSYM IID_ID3D12CommandSignature}
  IID_ID3D12CommandSignature = ID3D12CommandSignature;
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12CommandSignature);'}
  {$EXTERNALSYM ID3D12CommandSignature}

// interface ID3D12CommandList
// [unique][local][object][uuid]

  {$EXTERNALSYM IID_ID3D12CommandList}
  IID_ID3D12CommandList = ID3D12CommandList;
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12CommandList);'}
  {$EXTERNALSYM ID3D12CommandList}
  ID3D12CommandList = interface(ID3D12DeviceChild)
  ['{7116D91C-E7E4-47CE-B8C6-EC8168F437E5}']
    function GetType: TD3D12CommandListType; stdcall;
  end;

// interface ID3D12GraphicsCommandList
// [unique][local][object][uuid]

  {$EXTERNALSYM IID_ID3D12GraphicsCommandList}
  IID_ID3D12GraphicsCommandList = ID3D12GraphicsCommandList;
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12GraphicsCommandList);'}
  {$EXTERNALSYM ID3D12GraphicsCommandList}
  ID3D12GraphicsCommandList = interface(ID3D12CommandList)
  ['{5B160D0F-AC1B-4185-8BA8-B3AE42A5A455}']
    function Close: HRESULT; stdcall;

    function Reset(
      (*_In_*) pAllocator: Pointer; //ID3D12CommandAllocator;
      (*_In_opt_*) pInitialState: Pointer {ID3D12PipelineState}): HRESULT; stdcall;

    procedure ClearState((*_In_opt_*) pPipelineState: ID3D12PipelineState); stdcall;

    procedure DrawInstanced(
      (*_In_*) VertexCountPerInstance: UINT;
      (*_In_*) InstanceCount: UINT;
      (*_In_*) StartVertexLocation: UINT;
      (*_In_*) StartInstanceLocation: UINT ); stdcall;

    procedure DrawIndexedInstanced(
      (*_In_*) IndexCountPerInstance: UINT;
      (*_In_*) InstanceCount: UINT;
      (*_In_*) StartIndexLocation: UINT;
      (*_In_*) BaseVertexLocation: INT32;
      (*_In_*) StartInstanceLocation: UINT ); stdcall;

    procedure Dispatch(
      (*_In_*) ThreadGroupCountX: UINT;
      (*_In_*) ThreadGroupCountY: UINT;
      (*_In_*) ThreadGroupCountZ: UINT ); stdcall;

    procedure CopyBufferRegion(
      (*_In_*) pDstBuffer: ID3D12Resource;
      DstOffset: UINT64;
      (*_In_*) pSrcBuffer: ID3D12Resource;
      SrcOffset: UINT64;
      NumBytes: UINT64); stdcall;

    procedure CopyTextureRegion(
      (*_In_*) const pDst: PD3D12TextureCopyLocation;
      DstX: UINT;
      DstY: UINT;
      DstZ: UINT;
      (*_In_*) const pSrc: PD3D12TextureCopyLocation;
      (*_In_opt_*) const pSrcBox: PD3D12Box); stdcall;

    procedure CopyResource(
      (*_In_*) pDstResource: ID3D12Resource;
      (*_In_*) pSrcResource: ID3D12Resource); stdcall;

    procedure CopyTiles(
      (*_In_*) pTiledResource: ID3D12Resource;
      (*_In_*) const pTileRegionStartCoordinate: PD3D12TiledResourceCoordinate;
      (*_In_*) const pTileRegionSize: PD3D12TileRegionSize;
      (*_In_*) pBuffer: ID3D12Resource;
      BufferStartOffsetInBytes: UINT64;
      Flags: TD3D12TileCopyFlags); stdcall;

    procedure ResolveSubresource(
      (*_In_*) pDstResource: ID3D12Resource;
      (*_In_*) DstSubresource: UINT;
      (*_In_*) pSrcResource: ID3D12Resource;
      (*_In_*) SrcSubresource: UINT;
      (*_In_*) Format: DXGI_FORMAT); stdcall;

    procedure IASetPrimitiveTopology(
      (*_In_*) PrimitiveTopology: D3D12_PRIMITIVE_TOPOLOGY); stdcall;

    procedure RSSetViewports(
      (*_In_range_(0, D3D12_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE)*)
      NumViewports: UINT;
      (*_In_reads_( NumViewports)*)
      pViewports: PD3D12Viewport); stdcall;

    procedure RSSetScissorRects(
      (*_In_range_(0, D3D12_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE)*)
      NumRects: UINT;
      (*_In_reads_( NumRects)*)
      pRects: PD3D12Rect); stdcall;

    procedure OMSetBlendFactor((*_In_opt_*) const BlendFactor: TFourSingleArray); stdcall;

    procedure OMSetStencilRef((*_In_*) StencilRef: UINT); stdcall;

    procedure SetPipelineState((*_In_*) pPipelineState: ID3D12PipelineState); stdcall;

    procedure ResourceBarrier(
      (*_In_*) NumBarriers: UINT;
      (*_In_reads_(NumBarriers)*)
      pBarriers: PD3D12ResourceBarrier); stdcall;

    procedure ExecuteBundle((*_In_*) pCommandList: ID3D12GraphicsCommandList); stdcall;

    procedure SetDescriptorHeaps(
      (*_In_*) NumDescriptorHeaps: UINT;
      (*_In_reads_(NumDescriptorHeaps)*)
      [Ref] ppDescriptorHeaps: ID3D12DescriptorHeap); stdcall;

    procedure SetComputeRootSignature((*_In_*) pRootSignature: ID3D12RootSignature); stdcall;

    procedure SetGraphicsRootSignature((*_In_*) pRootSignature: Pointer); stdcall;

    procedure SetComputeRootDescriptorTable(
      (*_In_*) RootParameterIndex: UINT;
      (*_In_*) BaseDescriptor: TD3D12GpuDescriptorHandle); stdcall;

    procedure SetGraphicsRootDescriptorTable(
      (*_In_*) RootParameterIndex: UINT;
      (*_In_*) BaseDescriptor: TD3D12GpuDescriptorHandle); stdcall;

    procedure SetComputeRoot32BitConstant(
      (*_In_*) RootParameterIndex: UINT;
      (*_In_*) SrcData: UINT;
      (*_In_*) DestOffsetIn32BitValues: UINT); stdcall;

    procedure SetGraphicsRoot32BitConstant(
      (*_In_*) RootParameterIndex: UINT;
      (*_In_*) SrcData: UINT;
      (*_In_*) DestOffsetIn32BitValues: UINT); stdcall;

    procedure SetComputeRoot32BitConstants(
      (*_In_*) RootParameterIndex: UINT;
      (*_In_*) Num32BitValuesToSet: UINT;
      (*_In_reads_(Num32BitValuesToSet*sizeof(UINT))*)
      const pSrcData: Pointer;
      (*_In_*) DestOffsetIn32BitValues: UINT); stdcall;

    procedure SetGraphicsRoot32BitConstants(
      (*_In_*) RootParameterIndex: UINT;
      (*_In_*) Num32BitValuesToSet: UINT;
      (*_In_reads_(Num32BitValuesToSet*sizeof(UINT))*)
      const pSrcData: Pointer;
      (*_In_*) DestOffsetIn32BitValues: UINT); stdcall;

    procedure SetComputeRootConstantBufferView(
      (*_In_*) RootParameterIndex: UINT;
      (*_In_*) BufferLocation: TD3D12GpuVirtualAddress); stdcall;

    procedure SetGraphicsRootConstantBufferView(
      (*_In_*) RootParameterIndex: UINT;
      (*_In_*) BufferLocation: TD3D12GpuVirtualAddress); stdcall;

    procedure SetComputeRootShaderResourceView(
      (*_In_*) RootParameterIndex: UINT;
      (*_In_*) BufferLocation: TD3D12GpuVirtualAddress); stdcall;

    procedure SetGraphicsRootShaderResourceView(
      (*_In_*) RootParameterIndex: UINT;
      (*_In_*) BufferLocation: TD3D12GpuVirtualAddress); stdcall;

    procedure SetComputeRootUnorderedAccessView(
      (*_In_*) RootParameterIndex: UINT;
      (*_In_*) BufferLocation: TD3D12GpuVirtualAddress); stdcall;

    procedure SetGraphicsRootUnorderedAccessView(
      (*_In_*) RootParameterIndex: UINT;
      (*_In_*) BufferLocation: TD3D12GpuVirtualAddress); stdcall;

    procedure IASetIndexBuffer((*_In_opt_*) const pView: PD3D12IndexBufferView); stdcall;

    procedure IASetVertexBuffers(
      (*_In_*) StartSlot: UINT;
      (*_In_*) NumViews: UINT;
      (*_In_reads_opt_(NumViews)*)
      const pViews: PD3D12VertexBufferView); stdcall;

    procedure SOSetTargets(
      (*_In_*) StartSlot: UINT;
      (*_In_*) NumViews: UINT;
      (*_In_reads_opt_(NumViews)*)
      const pViews: PD3D12StreamOutputBufferView); stdcall;

    procedure OMSetRenderTargets(
      (*_In_*) NumRenderTargetDescriptors: UINT;
      (*_In_*) const pRenderTargetDescriptors: PD3D12CpuDescriptorHandle;
      (*_In_*) RTsSingleHandleToDescriptorRange: BOOL;
      (*_In_opt_*)  const pDepthStencilDescriptor: PD3D12CpuDescriptorHandle); stdcall;

    procedure ClearDepthStencilView(
      (*_In_*) DepthStencilView: TD3D12CpuDescriptorHandle;
      (*_In_*) ClearFlags: TD3D12ClearFlags;
      (*_In_*) Depth: Single;
      (*_In_*) Stencil: UINT8;
      (*_In_*) NumRects: UINT;
      (*_In_reads_(NumRects)*)  const pRects: PD3D12Rect); stdcall;

    procedure ClearRenderTargetView(
      (*_In_*) RenderTargetView: TD3D12CpuDescriptorHandle;
      (*_In_*) const ColorRGBA: TFourSingleArray;
      (*_In_*) NumRects: UINT;
      (*_In_reads_(NumRects)*) pRects: PD3D12Rect); stdcall;

    procedure ClearUnorderedAccessViewUint(
      (*_In_*) ViewGPUHandleInCurrentHeap: TD3D12GpuDescriptorHandle;
      (*_In_*) ViewCPUHandle: TD3D12CpuDescriptorHandle;
      (*_In_*) pResource: ID3D12Resource;
      (*_In_*) const Values: TFourUIntArray;
      (*_In_*) NumRects: UINT;
      (*_In_reads_(NumRects)*) const pRects: PD3D12Rect); stdcall;

    procedure ClearUnorderedAccessViewSingle(
      (*_In_*) ViewGPUHandleInCurrentHeap: TD3D12GpuDescriptorHandle;
      (*_In_*) ViewCPUHandle: TD3D12CpuDescriptorHandle;
      (*_In_*) pResource: ID3D12Resource;
      (*_In_*) Values: TFourSingleArray;
      (*_In_*) NumRects: UINT;
      (*_In_reads_(NumRects)*) const pRects: PD3D12Rect); stdcall;

    procedure DiscardResource(
      (*_In_*) pResource: ID3D12Resource;
      (*_In_opt_*) const pRegion: PD3D12DiscardRegion); stdcall;

    procedure BeginQuery(
      (*_In_*) pQueryHeap: ID3D12QueryHeap;
      (*_In_*) _Type: D3D12_QUERY_TYPE;
      (*_In_*) Index: UINT); stdcall;

    procedure EndQuery(
      (*_In_*) pQueryHeap: ID3D12QueryHeap;
      (*_In_*) _Type: D3D12_QUERY_TYPE;
      (*_In_*) Index: UINT); stdcall;

    procedure ResolveQueryData(
      (*_In_*) pQueryHeap: ID3D12QueryHeap;
      (*_In_*) _Type: D3D12_QUERY_TYPE;
      (*_In_*) StartIndex: UINT;
      (*_In_*) NumQueries: UINT;
      (*_In_*) pDestinationBuffer: ID3D12Resource;
      (*_In_*) AlignedDestinationBufferOffset: UINT64); stdcall;

    procedure SetPredication(
      (*_In_opt_*) pBuffer: ID3D12Resource;
      (*_In_*) AlignedBufferOffset: UINT64;
      (*_In_*) Operation: D3D12_PREDICATION_OP); stdcall;

    procedure SetMarker(
      Metadata: UINT;
      (*_In_reads_bytes_opt_(Size)*)
      const pData: Pointer;
      Size: UINT); stdcall;

    procedure BeginEvent(
      Metadata: UINT;
      (*_In_reads_bytes_opt_(Size)*)
      const pData: Pointer;
      Size: UINT); stdcall;

    procedure EndEvent; stdcall;

    procedure ExecuteIndirect(
      (*_In_*) pCommandSignature: ID3D12CommandSignature;
      (*_In_*) MaxCommandCount: UINT;
      (*_In_*) pArgumentBuffer: ID3D12Resource;
      (*_In_*) ArgumentBufferOffset: UINT64;
      (*_In_opt_*) pCountBuffer: ID3D12Resource;
      (*_In_*)  CountBufferOffset: UINT64); stdcall;
  end;
// interface ID3D12CommandQueue
// [unique][local][object][uuid]

  {$EXTERNALSYM IID_ID3D12CommandQueue}
  IID_ID3D12CommandQueue = ID3D12CommandQueue;
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12CommandQueue);'}
  {$EXTERNALSYM ID3D12CommandQueue}
  ID3D12CommandQueue = interface(ID3D12Pageable)
  ['{0EC870A6-5D7E-4C22-8CFC-5BAAE07616ED}']
    procedure UpdateTileMappings(
      (*_In_*) pResource: ID3D12Resource;
      NumResourceRegions: UINT;
      (*_In_reads_opt_(NumResourceRegions)*)
      const pResourceRegionStartCoordinates: PD3D12TiledResourceCoordinate;
      (*_In_reads_opt_(NumResourceRegions)*)
      const pResourceRegionSizes: PD3D12TileRegionSize;
      (*_In_opt_*) pHeap: ID3D12Heap;
      NumRanges: UINT;
      (*_In_reads_opt_(NumRanges)*)
      const pRangeFlags: PD3D12TileRangeFlags;
      (*_In_reads_opt_(NumRanges)*)
      const pHeapRangeStartOffsets: PUINT;
      (*_In_reads_opt_(NumRanges)*)
      const pRangeTileCounts: PUINT;
      Flags: D3D12_TILE_MAPPING_FLAGS); stdcall;

    procedure CopyTileMappings(
      (*_In_*) pDstResource: ID3D12Resource;
      (*_In_*) const pDstRegionStartCoordinate: PD3D12TiledResourceCoordinate;
      (*_In_*) pSrcResource: ID3D12Resource;
      (*_In_*) const pSrcRegionStartCoordinate: PD3D12TiledResourceCoordinate;
      (*_In_*) const pRegionSize: PD3D12TileRegionSize;
      Flags: D3D12_TILE_MAPPING_FLAGS); stdcall;

    procedure ExecuteCommandLists(
      (*_In_*) NumCommandLists: UINT;
      (*_In_reads_(NumCommandLists)*)
      const [Ref] ppCommandLists: ID3D12CommandList); stdcall;

    procedure SetMarker(
      Metadata: UINT;
      (*_In_reads_bytes_opt_(Size)*)
      const pData: Pointer;
      Size: UINT); stdcall;

    procedure BeginEvent(
      Metadata: UINT;
      (*_In_reads_bytes_opt_(Size)*)
      const pData: Pointer;
      Size: UINT); stdcall;

    procedure EndEvent; stdcall;

    function Signal(
      pFence: ID3D12Fence;
      Value: UINT64): HRESULT; stdcall;

    function Wait(
      pFence: ID3D12Fence;
      Value: UINT64): HRESULT; stdcall;

    function GetTimestampFrequency((*_Out_*)out pFrequency: UINT64): HRESULT; stdcall;

    function GetClockCalibration(
      (*_Out_*)out pGpuTimestamp: UINT64;
      (*_Out_*)out pCpuTimestamp: UINT64): HRESULT; stdcall;

    function GetDesc: PD3D12CommandQueueDesc; stdcall;
  end;

// interface ID3D12Device
// [unique][local][object][uuid]

  {$EXTERNALSYM IID_ID3D12Device}
  IID_ID3D12Device = ID3D12Device;
  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ID3D12Device);'}
  {$EXTERNALSYM ID3D12Device}
  ID3D12Device = interface(ID3D12Object)
  ['{189819F1-1DB6-4B57-BE54-1821339B85F7}']
    function GetNodeCount: UINT; stdcall;

    function CreateCommandQueue(
      (*_In_*) pDesc: PD3D12CommandQueueDesc;
      const riid: TGUID;
      (*_COM_Outptr_*)out ppCommandQueue): HRESULT; stdcall;

    function CreateCommandAllocator(
      (*_In_*) _type: D3D12_COMMAND_LIST_TYPE;
      const riid: TGUID;
      (*_COM_Outptr_*) out ppCommandAllocator): HRESULT; stdcall;

    function CreateGraphicsPipelineState(
      (*_In_ *) const pDesc: PD3D12GraphicsPipelineStateDesc;
      const riid: TGUID;
      (*_COM_Outptr_*) out ppPipelineState): HRESULT; stdcall;

    function CreateComputePipelineState(
      (*_In_*) const pDesc: PD3D12ComputePipelineStateDesc;
      const riid: TGUID;
      (*_COM_Outptr_*) out ppPipelineState): HRESULT; stdcall;

    function CreateCommandList(
      (*_In_*) nodeMask: UINT;
      (*_In_*) _type: D3D12_COMMAND_LIST_TYPE;
      (*_In_*) pCommandAllocator: ID3D12CommandAllocator;
      (*_In_opt_*) pInitialState: ID3D12PipelineState;
      const riid: TGUID;
      (*_COM_Outptr_*) out ppCommandList): HRESULT; stdcall;

    function CheckFeatureSupport(
      Feature: D3D12_FEATURE;
      (*_Inout_updates_bytes_(FeatureSupportDataSize)*)
      pFeatureSupportData: Pointer;
      FeatureSupportDataSize: UINT): HRESULT; stdcall;

    function CreateDescriptorHeap(
      (*_In_*) pDescriptorHeapDesc: PD3D12DescriptorHeapDesc;
      const riid: TGUID;
      (*_COM_Outptr_*) out ppvHeap): HRESULT; stdcall;

    function GetDescriptorHandleIncrementSize(
      (*_In_*) DescriptorHeapType: TD3D12DescriptorHeapType ): UINT; stdcall;

    function CreateRootSignature(
      (*_In_*) nodeMask: UINT;
      (*_In_reads_(blobLengthInBytes)*)
      const pBlobWithRootSignature: Pointer;
      (*_In_*) blobLengthInBytes: SIZE_T;
      const riid: TGUID;
      (*_COM_Outptr_*) out ppvRootSignature): HRESULT; stdcall;

    procedure CreateConstantBufferView(
      (*_In_opt_*) const pDesc: PD3D12ConstantBufferViewDesc;
      (*_In_*) DestDescriptor: D3D12_CPU_DESCRIPTOR_HANDLE); stdcall;

    procedure CreateShaderResourceView(
      (*_In_opt_*) pResource: ID3D12Resource;
      (*_In_opt_*) const pDesc: PD3D12ShaderResourceViewDesc;
      (*_In_*) DestDescriptor: TD3D12CpuDescriptorHandle); stdcall;

    procedure CreateUnorderedAccessView(
      (*_In_opt_*) pResource: ID3D12Resource;
      (*_In_opt_*) pCounterResource: ID3D12Resource;
      (*_In_opt_*) const pDesc: PD3D12UnorderedAccessViewDesc;
      (*_In_*)  DestDescriptor: TD3D12CpuDescriptorHandle); stdcall;

    procedure CreateRenderTargetView(
      (*_In_opt_*) pResource: Pointer;
      (*_In_opt_*) pDesc: PD3D12RenderTargetViewDesc;
      (*_In_*) DestDescriptor: TD3D12CpuDescriptorHandle); stdcall;

    procedure CreateDepthStencilView(
      (*_In_opt_*) pResource: ID3D12Resource;
      (*_In_opt_*) const pDesc: PD3D12DepthStencilViewDesc;
      (*_In_*) DestDescriptor: TD3D12CpuDescriptorHandle); stdcall;

    procedure CreateSampler(
      (*_In_*) const pDesc: PD3D12SamplerDesc;
      (*_In_*) DestDescriptor: TD3D12CpuDescriptorHandle); stdcall;

    procedure CopyDescriptors(
      (*_In_*) NumDestDescriptorRanges: UINT;
      (*_In_reads_(NumDestDescriptorRanges)*)
      const pDestDescriptorRangeStarts: PD3D12CpuDescriptorHandle;
      (*_In_reads_opt_(NumDestDescriptorRanges)*)
      const pDestDescriptorRangeSizes: PUINT;
      (*_In_*) NumSrcDescriptorRanges: UINT;
      (*_In_reads_(NumSrcDescriptorRanges)*)
      const pSrcDescriptorRangeStarts: TD3D12CpuDescriptorHandle;
      (*_In_reads_opt_(NumSrcDescriptorRanges)*)
      const pSrcDescriptorRangeSizes: PUINT;
      (*_In_*) DescriptorHeapsType: TD3D12DescriptorHeapType); stdcall;

    procedure CopyDescriptorsSimple(
      (*_In_*) NumDescriptors: UINT;
      (*_In_*) DestDescriptorRangeStart: TD3D12CpuDescriptorHandle;
      (*_In_*) SrcDescriptorRangeStart: TD3D12CpuDescriptorHandle;
      (*_In_*) DescriptorHeapsType: TD3D12DescriptorHeapType); stdcall;

    function GetResourceAllocationInfo(
      (*_In_*) visibleMask: UINT;
      (*_In_*) numResourceDescs: UINT;
      (*_In_reads_(numResourceDescs)*)
      const pResourceDescs: PD3D12ResourceDesc): TD3D12ResourceAllocationInfo; stdcall;

    function GetCustomHeapProperties(
      (*_In_*) nodeMask: UINT;
      heapType: D3D12_HEAP_TYPE): TD3D12HeapProperties; stdcall;

    function CreateCommittedResource(
      (*_In_*) const pHeapProperties: PD3D12HeapProperties;
      HeapFlags: D3D12_HEAP_FLAGS;
      (*_In_*) const pResourceDesc: PD3D12ResourceDesc;
      InitialResourceState: TD3D12ResourceStates;
      (*_In_opt_*) const pOptimizedClearValue: PD3D12ClearValue;
      const riidResource: TGUID;
      (*_COM_Outptr_opt_*)out ppvResource): HRESULT; stdcall;

    function CreateHeap(
      (*_In_*) const pDesc: PD3D12HeapDesc;
      const riid: TGUID;
      (*_COM_Outptr_opt_*) ppvHeap: PPointer): HRESULT; stdcall;

    function CreatePlacedResource(
      (*_In_*) pHeap: ID3D12Heap;
      HeapOffset: UINT64;
      (*_In_*) const pDesc: PD3D12ResourceDesc;
      InitialState: TD3D12ResourceStates;
      (*_In_opt_*) const pOptimizedClearValue: PD3D12ClearValue;
      const riid: TGUID;
      (*_COM_Outptr_opt_*) ppvResource: PPointer): HRESULT; stdcall;

    function CreateReservedResource(
      (*_In_*) const pDesc: D3D12_RESOURCE_DESC;
      InitialState: D3D12_RESOURCE_STATES;
      (*_In_opt_*) const pOptimizedClearValue: PD3D12ClearValue;
      const riid: TGUID;
      (*_COM_Outptr_opt_*) ppvResource: PPointer): HRESULT; stdcall;

    function CreateSharedHandle(
      (*_In_*) pObject: ID3D12DeviceChild;
      (*_In_opt_*) pAttributes: PSecurityAttributes;
      Access: DWORD;
      (*_In_opt_*) Name: LPCWSTR;
      (*_Out_*) out _pHandle: THandle): HRESULT; stdcall;

    function OpenSharedHandle(
      (*_In_*) NTHandle: THandle;
      const riid: TGUID;
      (*_COM_Outptr_opt_*) ppvObj: PPointer): HRESULT; stdcall;

    function OpenSharedHandleByName(
      (*_In_*) Name: LPCWSTR;
      Access: DWORD;
      (* [annotation][out] *)
      (*_Out_*) out pNTHandle: THandle): HRESULT; stdcall;

    function MakeResident(
      NumObjects: UINT;
      (*_In_reads_(NumObjects)*)
      const [Ref] ppObjects: ID3D12Pageable): HRESULT; stdcall;

    function Evict(
      NumObjects: UINT;
      (*_In_reads_(NumObjects)*)
      const [Ref] ppObjects: ID3D12Pageable): HRESULT; stdcall;

    function CreateFence(
      InitialValue: UINT64;
      Flags: D3D12_FENCE_FLAGS;
      const riid: TGUID;
      (*_COM_Outptr_*) out ppFence): HRESULT; stdcall;

    function GetDeviceRemovedReason: HRESULT; stdcall;

    procedure GetCopyableFootprints(
      (*_In_*) const pResourceDesc: PD3D12ResourceDesc;
      (*_In_range_(0,D3D12_REQ_SUBRESOURCES)*)
      FirstSubresource: UINT;
      (*_In_range_(0,D3D12_REQ_SUBRESOURCES-FirstSubresource)*)
      NumSubresources: UINT;
      BaseOffset: UINT64;
      (*_Out_writes_opt_(NumSubresources)*)
      pLayouts: PD3D12PlacedSubresourceFootprint;
      (*_Out_writes_opt_(NumSubresources)*)
      pNumRows: PUINT;
      (*_Out_writes_opt_(NumSubresources)*)
      pRowSizeInBytes: PUINT64;
      (*_Out_opt_*) pTotalBytes: PUINT64); stdcall;

    function CreateQueryHeap(
      (*_In_*) const pDesc: PD3D12QueryHeapDesc;
      const riid: TGUID;
      (*_COM_Outptr_opt_*) ppvHeap: PPointer): HRESULT; stdcall;

    function SetStablePowerState(Enable: BOOL): HRESULT; stdcall;

    function CreateCommandSignature(
      (*_In_*) const pDesc: PD3D12CommandSignatureDesc;
      (*_In_opt_*) pRootSignature: ID3D12RootSignature;
      const riid: TGUID;
      (*_COM_Outptr_opt_*) ppvCommandSignature: PPointer): HRESULT; stdcall;

    procedure GetResourceTiling(
      (*_In_*) pTiledResource: ID3D12Resource;
      (*_Out_opt_*) pNumTilesForEntireResource: PUINT;
      (*_Out_opt_*) pPackedMipDesc: PD3D12PackedMipInfo;
      (*_Out_opt_*) pStandardTileShapeForNonPackedMips: PD3D12TileShape;
      (*_Inout_opt_*) var pNumSubresourceTilings: UINT;
      (*_In_*) FirstSubresourceTilingToGet: UINT;
      (*_Out_writes_(*pNumSubresourceTilings)*)
      pSubresourceTilingsForNonPackedMips: PD3D12SubresourceTiling); stdcall;

    function GetAdapterLuid: LUID; stdcall;
  end;

// interface __MIDL_itf_d3d12_0000_0017
// [local]

  D3D12_SUBRESOURCE_DATA = record
    pData: Pointer;
    RowPitch: LONG_PTR;
    SlicePitch: LONG_PTR;
  end;
  {$EXTERNALSYM D3D12_SUBRESOURCE_DATA}
  TD3D12SubresourceData = D3D12_SUBRESOURCE_DATA;
  PD3D12SubresourceData = ^TD3D12SubresourceData;

  D3D12_MEMCPY_DEST = record
    pData: Pointer;
    RowPitch: SIZE_T;
    SlicePitch: SIZE_T;
  end;
  {$EXTERNALSYM D3D12_MEMCPY_DEST}
  TD3D12MemcpyDest = D3D12_MEMCPY_DEST;
  PD3D12MemcpyDest = ^TD3D12MemcpyDest;

///////////////////////////////////////////////////////////////////////////
// D3D12CreateDevice
// ------------------
//
// pAdapter
//      If NULL, D3D12CreateDevice will choose the primary adapter.
//      If non-NULL, D3D12CreateDevice will use the provided adapter.
// MinimumFeatureLevel
//      The minimum feature level required for successful device creation.
// riid
//      The interface IID of the device to be returned. Expected: ID3D12Device.
// ppDevice
//      Pointer to returned interface. May be NULL.
//
// Return Values
//  Any of those documented for
//          CreateDXGIFactory1
//          IDXGIFactory::EnumAdapters
//          D3D12CreateDevice
//
///////////////////////////////////////////////////////////////////////////

{$EXTERNALSYM D3D12CreateDevice}
function D3D12CreateDevice(
  (*_In_opt_*) pAdapter: Pointer;
  MinimumFeatureLevel: D3D_FEATURE_LEVEL;
  (*_In_*) const riid: TGUID; // Expected: ID3D12Device
  (*_COM_Outptr_opt_*) ppDevice: PPointer): HRESULT; stdcall; external D3D12dll delayed;

{$EXTERNALSYM D3D12GetDebugInterface}
function D3D12GetDebugInterface(
  (*_In_*) const riid: TGUID;
  (*_COM_Outptr_opt_*) ppvDebug: PPointer): HRESULT; stdcall; external D3D12dll delayed;

{$EXTERNALSYM D3D12SerializeRootSignature}
function D3D12SerializeRootSignature(
  (*_In_*) pRootSignature: PD3D12RootSignatureDesc;
  (*_In_*) Version: D3D_ROOT_SIGNATURE_VERSION;
  (*_Out_*) out ppBlob: ID3DBlob;
  (*_Always_(_Outptr_opt_result_maybenull_)*)
  ppErrorBlob: PPointer): HRESULT; stdcall; external D3D12dll delayed;

{$EXTERNALSYM D3D12CreateRootSignatureDeserializer}
function D3D12CreateRootSignatureDeserializer(
   (*_In_reads_bytes_(SrcDataSizeInBytes)*)
   pSrcData: LPCVOID;
   (*_In_*) SrcDataSizeInBytes: SIZE_T;
   (*_In_*) const pRootSignatureDeserializerInterface: TGUID;
   (*_Out_*) out ppRootSignatureDeserializer: Pointer): HRESULT; stdcall; external D3D12dll delayed;


// MACRO DEFINITIOS
{$EXTERNALSYM D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING}
function D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING: UINT; overload;
{$EXTERNALSYM D3D12_ENCODE_SHADER_4_COMPONENT_MAPPING}
function D3D12_ENCODE_SHADER_4_COMPONENT_MAPPING(Src0,Src1,Src2,Src3: UINT): UINT; overload;
{$EXTERNALSYM D3D12_DECODE_SHADER_4_COMPONENT_MAPPING}
function D3D12_DECODE_SHADER_4_COMPONENT_MAPPING(ComponentToExtract,Mapping: UINT): D3D12_SHADER_COMPONENT_MAPPING;  overload;

{$EXTERNALSYM D3D12_ENCODE_BASIC_FILTER}
function D3D12_ENCODE_BASIC_FILTER(min, mag, mip, reduction: UINT ): D3D12_FILTER; inline;
{$EXTERNALSYM D3D12_ENCODE_ANISOTROPIC_FILTER}
function D3D12_ENCODE_ANISOTROPIC_FILTER(reduction: UINT): D3D12_FILTER; inline;
{$EXTERNALSYM D3D12_DECODE_MIN_FILTER}
function D3D12_DECODE_MIN_FILTER(D3D12Filter: UINT): D3D12_FILTER_TYPE; inline;
{$EXTERNALSYM D3D12_DECODE_MAG_FILTER}
function D3D12_DECODE_MAG_FILTER(D3D12Filter: UINT): D3D12_FILTER_TYPE; inline;
{$EXTERNALSYM D3D12_DECODE_MIP_FILTER}
function D3D12_DECODE_MIP_FILTER(D3D12Filter: UINT): D3D12_FILTER_TYPE; inline;
{$EXTERNALSYM D3D12_DECODE_FILTER_REDUCTION}
function D3D12_DECODE_FILTER_REDUCTION(D3D12Filter: UINT): D3D12_FILTER_REDUCTION_TYPE; inline;
{$EXTERNALSYM D3D12_DECODE_IS_COMPARISON_FILTER}
function D3D12_DECODE_IS_COMPARISON_FILTER(D3D12Filter: UINT): Boolean; inline;
{$EXTERNALSYM D3D12_DECODE_IS_ANISOTROPIC_FILTER}
function D3D12_DECODE_IS_ANISOTROPIC_FILTER(D3D12Filter: UINT): Boolean;

implementation

function D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING: UINT;
begin
  Result := D3D12_ENCODE_SHADER_4_COMPONENT_MAPPING(0,1,2,3);
end;

function D3D12_ENCODE_SHADER_4_COMPONENT_MAPPING(Src0,Src1,Src2,Src3: UINT): UINT;
begin
  Result := (((Src0 and D3D12_SHADER_COMPONENT_MAPPING_MASK) or
      ((Src1 and D3D12_SHADER_COMPONENT_MAPPING_MASK) shl D3D12_SHADER_COMPONENT_MAPPING_SHIFT) or
      ((Src2 and D3D12_SHADER_COMPONENT_MAPPING_MASK) shl (D3D12_SHADER_COMPONENT_MAPPING_SHIFT * 2)) or
      ((Src3 and D3D12_SHADER_COMPONENT_MAPPING_MASK) shl (D3D12_SHADER_COMPONENT_MAPPING_SHIFT * 3)) or
      D3D12_SHADER_COMPONENT_MAPPING_ALWAYS_SET_BIT_AVOIDING_ZEROMEM_MISTAKES))
end;

function D3D12_DECODE_SHADER_4_COMPONENT_MAPPING(ComponentToExtract,Mapping: UINT): D3D12_SHADER_COMPONENT_MAPPING;
begin
  Result := D3D12_SHADER_COMPONENT_MAPPING(Mapping shr (D3D12_SHADER_COMPONENT_MAPPING_SHIFT * ComponentToExtract) and
      D3D12_SHADER_COMPONENT_MAPPING_MASK);
end;

function D3D12_ENCODE_BASIC_FILTER( min, mag, mip, reduction: UINT ): D3D12_FILTER;
begin
  Result := D3D12_FILTER(
   ((min and D3D12_FILTER_TYPE_MASK) shl D3D12_MIN_FILTER_SHIFT) or
   ((mag and D3D12_FILTER_TYPE_MASK) shl D3D12_MAG_FILTER_SHIFT) or
   ((mip and D3D12_FILTER_TYPE_MASK) shl D3D12_MIP_FILTER_SHIFT) or
   ((reduction and D3D12_FILTER_REDUCTION_TYPE_MASK) shl D3D12_FILTER_REDUCTION_TYPE_SHIFT));
end;

function D3D12_ENCODE_ANISOTROPIC_FILTER(reduction: UINT): D3D12_FILTER;
var
  Ltmp: D3D12_FILTER;
begin
  Ltmp :=   D3D12_ENCODE_BASIC_FILTER(UINT(D3D12_FILTER_TYPE_LINEAR),UINT(D3D12_FILTER_TYPE_LINEAR), UINT(D3D12_FILTER_TYPE_LINEAR), reduction);
  Result := D3D12_FILTER(D3D12_ANISOTROPIC_FILTERING_BIT or UINT(Ltmp));
end;

function D3D12_DECODE_MIN_FILTER(D3D12Filter: UINT): D3D12_FILTER_TYPE;
begin
  Result := D3D12_FILTER_TYPE((D3D12Filter shr D3D12_MIN_FILTER_SHIFT) and D3D12_FILTER_TYPE_MASK);
end;

function D3D12_DECODE_MAG_FILTER(D3D12Filter: UINT): D3D12_FILTER_TYPE;
begin
  Result := D3D12_FILTER_TYPE((D3D12Filter shr D3D12_MAG_FILTER_SHIFT) and D3D12_FILTER_TYPE_MASK);
end;

function D3D12_DECODE_MIP_FILTER(D3D12Filter: UINT): D3D12_FILTER_TYPE;
begin
  Result := D3D12_FILTER_TYPE((D3D12Filter shr D3D12_MIP_FILTER_SHIFT) and D3D12_FILTER_TYPE_MASK);
end;

function D3D12_DECODE_FILTER_REDUCTION(D3D12Filter: UINT): D3D12_FILTER_REDUCTION_TYPE;
begin
  Result := D3D12_FILTER_REDUCTION_TYPE((D3D12Filter shr D3D12_FILTER_REDUCTION_TYPE_SHIFT) and D3D12_FILTER_REDUCTION_TYPE_MASK);
end;

function D3D12_DECODE_IS_COMPARISON_FILTER(D3D12Filter: UINT): Boolean;
begin
  Result := D3D12_DECODE_FILTER_REDUCTION(D3D12Filter) = D3D12_FILTER_REDUCTION_TYPE_COMPARISON;
end;

function D3D12_DECODE_IS_ANISOTROPIC_FILTER(D3D12Filter: UINT): Boolean;
begin
  Result := ( Boolean(D3D12Filter and D3D12_ANISOTROPIC_FILTERING_BIT) and
    (D3D12_FILTER_TYPE_LINEAR = D3D12_DECODE_MIN_FILTER(D3D12Filter)) and
    (D3D12_FILTER_TYPE_LINEAR = D3D12_DECODE_MAG_FILTER(D3D12Filter)) and
    (D3D12_FILTER_TYPE_LINEAR = D3D12_DECODE_MIP_FILTER(D3D12Filter)));
end;

{ TD3D12ResourceUavBarrierNoInterface }

function D3D12_RESOURCE_UAV_BARRIER.GetpResource: ID3D12Resource;
begin
  Result := ID3D12Resource(FResource);
end;

procedure D3D12_RESOURCE_UAV_BARRIER.SetpResource(const Value: ID3D12Resource);
begin
  ID3D12Resource(FResource) := Value;
end;

{ TD3D12ResourceAliasingBarrierNoInterface }

function D3D12_RESOURCE_ALIASING_BARRIER.GetpResourceAfter: ID3D12Resource;
begin
  Result := ID3D12Resource(FResourceAfter);
end;

function D3D12_RESOURCE_ALIASING_BARRIER.GetpResourceBefore: ID3D12Resource;
begin
  Result := ID3D12Resource(FResourceBefore);
end;

procedure D3D12_RESOURCE_ALIASING_BARRIER.SetpResourceAfter(const Value: ID3D12Resource);
begin
  ID3D12Resource(FResourceAfter) := Value;
end;

procedure D3D12_RESOURCE_ALIASING_BARRIER.SetpResourceBefore(const Value: ID3D12Resource);
begin
  ID3D12Resource(FResourceBefore) := Value;
end;

{ TD3D12ResourceTransitionBarrierNoInterface }

function D3D12_RESOURCE_TRANSITION_BARRIER.GetpResource: ID3D12Resource;
begin
  Result := ID3D12Resource(pResource);
end;

procedure D3D12_RESOURCE_TRANSITION_BARRIER.SetpResource(const Value: ID3D12Resource);
begin
  ID3D12Resource(FResource) := Value;
end;

end.
