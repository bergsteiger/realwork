{*******************************************************}
{                                                       }
{                Delphi Runtime Library                 }
{                                                       }
{          File: MsInkAut.h                             }
{          Copyright (c) Microsoft Corporation          }
{          All Rights Reserved.                         }
{                                                       }
{       Translator: Embarcadero Technologies, Inc.      }
{ Copyright(c) 2016 Embarcadero Technologies, Inc.      }
{              All rights reserved                      }
{                                                       }
{*******************************************************}

unit Winapi.MsInkAut;

{$ALIGN ON}
{$MINENUMSIZE 4}
{$WEAKPACKAGEUNIT}

{$HPPEMIT ''}
{$HPPEMIT '#include "msinkaut.h"'}
{$HPPEMIT ''}

interface

uses
  Winapi.TpcShrd, Winapi.Windows, Winapi.ActiveX;


const
  SID_IInkRectangle = '{9794FF82-6071-4717-8A8B-6AC7C64A686E}';
  SID_IInkExtendedProperty = '{DB489209-B7C3-411D-90F6-1548CFFF271E}';
  SID_IInkExtendedProperties = '{89F2A8BE-95A9-4530-8B8F-88E971E3E25F}';
  SID_IInkDrawingAttributes = '{BF519B75-0A15-4623-ADC9-C00D436A8092}';
  SID_IInkTransform = '{615F1D43-8703-4565-88E2-8201D2ECD7B7}';
  SID_IInkGesture = '{3BDC0A97-04E5-4e26-B813-18F052D41DEF}';
  SID_IInkCursor = '{AD30C630-40C5-4350-8405-9C71012FC558}';
  SID_IInkCursors = '{A248C1AC-C698-4e06-9E5C-D57F77C7E647}';
  SID_IInkCursorButton = '{85EF9417-1D59-49b2-A13C-702C85430894}';
  SID_IInkCursorButtons = '{3671CC40-B624-4671-9FA0-DB119D952D54}';
  SID_IInkTablet = '{2DE25EAA-6EF8-42d5-AEE9-185BC81B912D}';
  SID_IInkTablet2 = '{90c91ad2-fa36-49d6-9516-ce8d570f6f85}';
  SID_IInkTablet3 = '{7e313997-1327-41dd-8ca9-79f24be17250}';
  SID_IInkTablets = '{112086D9-7779-4535-A699-862B43AC1863}';
  SID_IInkStrokeDisp = '{43242FEA-91D1-4a72-963E-FBB91829CFA2}';
  SID_IInkStrokes = '{F1F4C9D8-590A-4963-B3AE-1935671BB6F3}';
  SID_IInkCustomStrokes = '{7E23A88F-C30E-420f-9BDB-28902543F0C1}';
  SID__IInkStrokesEvents = '{F33053EC-5D25-430a-928F-76A6491DDE15}';
  SID_IInkDisp = '{9D398FA0-C4E2-4fcd-9973-975CAAF47EA6}';
  SID__IInkEvents = '{427B1865-CA3F-479a-83A9-0F420F2A0073}';
  SID_IInkRenderer = '{E6257A9C-B511-4f4c-A8B0-A7DBC9506B83}';
  SID_IInkCollector = '{F0F060B5-8B1F-4a7c-89EC-880692588A4F}';
  SID__IInkCollectorEvents = '{11A583F2-712D-4fea-ABCF-AB4AF38EA06B}';
  SID_IInkOverlay = '{b82a463b-c1c5-45a3-997c-deab5651b67a}';
  SID__IInkOverlayEvents = '{31179b69-e563-489e-b16f-712f1e8a0651}';
  SID_IInkPicture = '{e85662e0-379a-40d7-9b5c-757d233f9923}';
  SID__IInkPictureEvents = '{60ff4fee-22ff-4484-acc1-d308d9cd7ea3}';
  SID_IInkRecognizer = '{782BF7CF-034B-4396-8A32-3A1833CF6B56}';
  SID_IInkRecognizer2 = '{6110118A-3A75-4ad6-B2AA-04B2B72BBE65}';
  SID_IInkRecognizers = '{9CCC4F12-B0B7-4a8b-BF58-4AECA4E8CEFD}';
  SID__IInkRecognitionEvents = '{17BCE92F-2E21-47FD-9D33-3C6AFBFD8C59}';
  SID_IInkRecognizerContext = '{C68F52F9-32A3-4625-906C-44FC23B40958}';
  SID_IInkRecognizerContext2 = '{D6F0E32F-73D8-408e-8E9F-5FEA592C363F}';
  SID_IInkRecognitionResult = '{3BC129A8-86CD-45ad-BDE8-E0D32D61C16D}';
  SID_IInkRecognitionAlternate = '{B7E660AD-77E4-429b-ADDA-873780D1FC4A}';
  SID_IInkRecognitionAlternates = '{286A167F-9F19-4c61-9D53-4F07BE622B84}';
  SID_IInkRecognizerGuide = '{D934BE07-7B84-4208-9136-83C20994E905}';
  SID_IInkWordList = '{76BA3491-CB2F-406b-9961-0E0C4CDAAEF2}';
  SID_IInkWordList2 = '{14542586-11BF-4f5f-B6E7-49D0744AAB6E}';
  SID_IInk = '{03F8E511-43A1-11D3-8BB6-0080C7D6BAD5}';
  SID_IInkLineInfo = '{9C1C5AD6-F22F-4DE4-B453-A2CC482E7C33}';
  SID_ISketchInk = '{B4563688-98EB-4646-B279-44DA14D45748}';


const
  IID_IInkRectangle: TGUID = (
    D1:$9794FF82; D2:$6071; D3:$4717; D4:($8A,$8B,$6A,$C7,$C6,$4A,$68,$6E));
  {$EXTERNALSYM IID_IInkRectangle}
  IID_IInkExtendedProperty: TGUID = (
    D1:$DB489209; D2:$B7C3; D3:$411D; D4:($90,$F6,$15,$48,$CF,$FF,$27,$1E));
  {$EXTERNALSYM IID_IInkExtendedProperty}
  IID_IInkExtendedProperties: TGUID = (
    D1:$89F2A8BE; D2:$95A9; D3:$4530; D4:($8B,$8F,$88,$E9,$71,$E3,$E2,$5F));
  {$EXTERNALSYM IID_IInkExtendedProperties}
  IID_IInkDrawingAttributes: TGUID = (
    D1:$BF519B75; D2:$0A15; D3:$4623; D4:($AD,$C9,$C0,$0D,$43,$6A,$80,$92));
  {$EXTERNALSYM IID_IInkDrawingAttributes}
  IID_IInkTransform: TGUID = (
    D1:$615F1D43; D2:$8703; D3:$4565; D4:($88,$E2,$82,$01,$D2,$EC,$D7,$B7));
  {$EXTERNALSYM IID_IInkTransform}
  IID_IInkGesture: TGUID = (
    D1:$3BDC0A97; D2:$04E5; D3:$4E26; D4:($B8,$13,$18,$F0,$52,$D4,$1D,$EF));
  {$EXTERNALSYM IID_IInkGesture}
  IID_IInkCursor: TGUID = (
    D1:$AD30C630; D2:$40C5; D3:$4350; D4:($84,$05,$9C,$71,$01,$2F,$C5,$58));
  {$EXTERNALSYM IID_IInkCursor}
  IID_IInkCursors: TGUID = (
    D1:$A248C1AC; D2:$C698; D3:$4E06; D4:($9E,$5C,$D5,$7F,$77,$C7,$E6,$47));
  {$EXTERNALSYM IID_IInkCursors}
  IID_IInkCursorButton: TGUID = (
    D1:$85EF9417; D2:$1D59; D3:$49B2; D4:($A1,$3C,$70,$2C,$85,$43,$08,$94));
  {$EXTERNALSYM IID_IInkCursorButton}
  IID_IInkCursorButtons: TGUID = (
    D1:$3671CC40; D2:$B624; D3:$4671; D4:($9F,$A0,$DB,$11,$9D,$95,$2D,$54));
  {$EXTERNALSYM IID_IInkCursorButtons}
  IID_IInkTablet: TGUID = (
    D1:$2DE25EAA; D2:$6EF8; D3:$42D5; D4:($AE,$E9,$18,$5B,$C8,$1B,$91,$2D));
  {$EXTERNALSYM IID_IInkTablet}
  IID_IInkTablet2: TGUID = (
    D1:$90C91AD2; D2:$FA36; D3:$49D6; D4:($95,$16,$CE,$8D,$57,$0F,$6F,$85));
  {$EXTERNALSYM IID_IInkTablet2}
  IID_IInkTablet3: TGUID = (
    D1:$7E313997; D2:$1327; D3:$41DD; D4:($8C,$A9,$79,$F2,$4B,$E1,$72,$50));
  {$EXTERNALSYM IID_IInkTablet3}
  IID_IInkTablets: TGUID = (
    D1:$112086D9; D2:$7779; D3:$4535; D4:($A6,$99,$86,$2B,$43,$AC,$18,$63));
  {$EXTERNALSYM IID_IInkTablets}
  IID_IInkStrokeDisp: TGUID = (
    D1:$43242FEA; D2:$91D1; D3:$4A72; D4:($96,$3E,$FB,$B9,$18,$29,$CF,$A2));
  {$EXTERNALSYM IID_IInkStrokeDisp}
  IID_IInkStrokes: TGUID = (
    D1:$F1F4C9D8; D2:$590A; D3:$4963; D4:($B3,$AE,$19,$35,$67,$1B,$B6,$F3));
  {$EXTERNALSYM IID_IInkStrokes}
  IID_IInkCustomStrokes: TGUID = (
    D1:$7E23A88F; D2:$C30E; D3:$420F; D4:($9B,$DB,$28,$90,$25,$43,$F0,$C1));
  {$EXTERNALSYM IID_IInkCustomStrokes}
  IID__IInkStrokesEvents: TGUID = (
    D1:$F33053EC; D2:$5D25; D3:$430A; D4:($92,$8F,$76,$A6,$49,$1D,$DE,$15));
  {$EXTERNALSYM IID__IInkStrokesEvents}
  IID_IInkDisp: TGUID = (
    D1:$9D398FA0; D2:$C4E2; D3:$4FCD; D4:($99,$73,$97,$5C,$AA,$F4,$7E,$A6));
  {$EXTERNALSYM IID_IInkDisp}
  IID__IInkEvents: TGUID = (
    D1:$427B1865; D2:$CA3F; D3:$479A; D4:($83,$A9,$0F,$42,$0F,$2A,$00,$73));
  {$EXTERNALSYM IID__IInkEvents}
  IID_IInkRenderer: TGUID = (
    D1:$E6257A9C; D2:$B511; D3:$4F4C; D4:($A8,$B0,$A7,$DB,$C9,$50,$6B,$83));
  {$EXTERNALSYM IID_IInkRenderer}
  IID_IInkCollector: TGUID = (
    D1:$F0F060B5; D2:$8B1F; D3:$4A7C; D4:($89,$EC,$88,$06,$92,$58,$8A,$4F));
  {$EXTERNALSYM IID_IInkCollector}
  IID__IInkCollectorEvents: TGUID = (
    D1:$11A583F2; D2:$712D; D3:$4FEA; D4:($AB,$CF,$AB,$4A,$F3,$8E,$A0,$6B));
  {$EXTERNALSYM IID__IInkCollectorEvents}
  IID_IInkOverlay: TGUID = (
    D1:$B82A463B; D2:$C1C5; D3:$45A3; D4:($99,$7C,$DE,$AB,$56,$51,$B6,$7A));
  {$EXTERNALSYM IID_IInkOverlay}
  IID__IInkOverlayEvents: TGUID = (
    D1:$31179B69; D2:$E563; D3:$489E; D4:($B1,$6F,$71,$2F,$1E,$8A,$06,$51));
  {$EXTERNALSYM IID__IInkOverlayEvents}
  IID_IInkPicture: TGUID = (
    D1:$E85662E0; D2:$379A; D3:$40D7; D4:($9B,$5C,$75,$7D,$23,$3F,$99,$23));
  {$EXTERNALSYM IID_IInkPicture}
  IID__IInkPictureEvents: TGUID = (
    D1:$60FF4FEE; D2:$22FF; D3:$4484; D4:($AC,$C1,$D3,$08,$D9,$CD,$7E,$A3));
  {$EXTERNALSYM IID__IInkPictureEvents}
  IID_IInkRecognizer: TGUID = (
    D1:$782BF7CF; D2:$034B; D3:$4396; D4:($8A,$32,$3A,$18,$33,$CF,$6B,$56));
  {$EXTERNALSYM IID_IInkRecognizer}
  IID_IInkRecognizer2: TGUID = (
    D1:$6110118A; D2:$3A75; D3:$4AD6; D4:($B2,$AA,$04,$B2,$B7,$2B,$BE,$65));
  {$EXTERNALSYM IID_IInkRecognizer2}
  IID_IInkRecognizers: TGUID = (
    D1:$9CCC4F12; D2:$B0B7; D3:$4A8B; D4:($BF,$58,$4A,$EC,$A4,$E8,$CE,$FD));
  {$EXTERNALSYM IID_IInkRecognizers}
  IID__IInkRecognitionEvents: TGUID = (
    D1:$17BCE92F; D2:$2E21; D3:$47FD; D4:($9D,$33,$3C,$6A,$FB,$FD,$8C,$59));
  {$EXTERNALSYM IID__IInkRecognitionEvents}
  IID_IInkRecognizerContext: TGUID = (
    D1:$C68F52F9; D2:$32A3; D3:$4625; D4:($90,$6C,$44,$FC,$23,$B4,$09,$58));
  {$EXTERNALSYM IID_IInkRecognizerContext}
  IID_IInkRecognizerContext2: TGUID = (
    D1:$D6F0E32F; D2:$73D8; D3:$408E; D4:($8E,$9F,$5F,$EA,$59,$2C,$36,$3F));
  {$EXTERNALSYM IID_IInkRecognizerContext2}
  IID_IInkRecognitionResult: TGUID = (
    D1:$3BC129A8; D2:$86CD; D3:$45AD; D4:($BD,$E8,$E0,$D3,$2D,$61,$C1,$6D));
  {$EXTERNALSYM IID_IInkRecognitionResult}
  IID_IInkRecognitionAlternate: TGUID = (
    D1:$B7E660AD; D2:$77E4; D3:$429B; D4:($AD,$DA,$87,$37,$80,$D1,$FC,$4A));
  {$EXTERNALSYM IID_IInkRecognitionAlternate}
  IID_IInkRecognitionAlternates: TGUID = (
    D1:$286A167F; D2:$9F19; D3:$4C61; D4:($9D,$53,$4F,$07,$BE,$62,$2B,$84));
  {$EXTERNALSYM IID_IInkRecognitionAlternates}
  IID_IInkRecognizerGuide: TGUID = (
    D1:$D934BE07; D2:$7B84; D3:$4208; D4:($91,$36,$83,$C2,$09,$94,$E9,$05));
  {$EXTERNALSYM IID_IInkRecognizerGuide}
  IID_IInkWordList: TGUID = (
    D1:$76BA3491; D2:$CB2F; D3:$406B; D4:($99,$61,$0E,$0C,$4C,$DA,$AE,$F2));
  {$EXTERNALSYM IID_IInkWordList}
  IID_IInkWordList2: TGUID = (
    D1:$14542586; D2:$11BF; D3:$4F5F; D4:($B6,$E7,$49,$D0,$74,$4A,$AB,$6E));
  {$EXTERNALSYM IID_IInkWordList2}
  IID_IInk: TGUID = (
    D1:$03F8E511; D2:$43A1; D3:$11D3; D4:($8B,$B6,$00,$80,$C7,$D6,$BA,$D5));
  {$EXTERNALSYM IID_IInk}
  IID_IInkLineInfo: TGUID = (
    D1:$9C1C5AD6; D2:$F22F; D3:$4DE4; D4:($B4,$53,$A2,$CC,$48,$2E,$7C,$33));
  {$EXTERNALSYM IID_IInkLineInfo}
  IID_ISketchInk: TGUID = (
    D1:$B4563688; D2:$98EB; D3:$4646; D4:($B2,$79,$44,$DA,$14,$D4,$57,$48));
  {$EXTERNALSYM IID_ISketchInk}


const
  CLSID_InkDisp: TGUID = (
    D1:$937C1A34; D2:$151D; D3:$4610; D4:($9C,$A6,$A8,$CC,$9B,$DB,$5D,$83));
  {$EXTERNALSYM CLSID_InkDisp}
  CLSID_InkOverlay: TGUID = (
    D1:$65D00646; D2:$CDE3; D3:$4A88; D4:($91,$63,$67,$69,$F0,$F1,$A9,$7D));
  {$EXTERNALSYM CLSID_InkOverlay}
  CLSID_InkPicture: TGUID = (
    D1:$04A1E553; D2:$FE36; D3:$4FDE; D4:($86,$5E,$34,$41,$94,$E6,$94,$24));
  {$EXTERNALSYM CLSID_InkPicture}
  CLSID_InkCollector: TGUID = (
    D1:$43FB1553; D2:$AD74; D3:$4EE8; D4:($88,$E4,$3E,$6D,$AA,$C9,$15,$DB));
  {$EXTERNALSYM CLSID_InkCollector}
  CLSID_InkDrawingAttributes: TGUID = (
    D1:$D8BF32A2; D2:$05A5; D3:$44C3; D4:($B3,$AA,$5E,$80,$AC,$7D,$25,$76));
  {$EXTERNALSYM CLSID_InkDrawingAttributes}
  CLSID_InkRectangle: TGUID = (
    D1:$43B07326; D2:$AAE0; D3:$4B62; D4:($A8,$3D,$5F,$D7,$68,$B7,$35,$3C));
  {$EXTERNALSYM CLSID_InkRectangle}
  CLSID_InkRenderer: TGUID = (
    D1:$9C1CC6E4; D2:$D7EB; D3:$4EEB; D4:($90,$91,$15,$A7,$C8,$79,$1E,$D9));
  {$EXTERNALSYM CLSID_InkRenderer}
  CLSID_InkTransform: TGUID = (
    D1:$E3D5D93C; D2:$1663; D3:$4A78; D4:($A1,$A7,$22,$37,$5D,$FE,$BA,$EE));
  {$EXTERNALSYM CLSID_InkTransform}
  CLSID_InkRecognizers: TGUID = (
    D1:$9FD4E808; D2:$F6E6; D3:$4E65; D4:($98,$D3,$AA,$39,$05,$4C,$12,$55));
  {$EXTERNALSYM CLSID_InkRecognizers}
  CLSID_InkRecognizerContext: TGUID = (
    D1:$AAC46A37; D2:$9229; D3:$4FC0; D4:($8C,$CE,$44,$97,$56,$9B,$F4,$D1));
  {$EXTERNALSYM CLSID_InkRecognizerContext}
  CLSID_InkRecognizerGuide: TGUID = (
    D1:$8770D941; D2:$A63A; D3:$4671; D4:($A3,$75,$28,$55,$A1,$8E,$BA,$73));
  {$EXTERNALSYM CLSID_InkRecognizerGuide}
  CLSID_InkTablets: TGUID = (
    D1:$6E4FCB12; D2:$510A; D3:$4D40; D4:($93,$04,$1D,$A1,$0A,$E9,$14,$7C));
  {$EXTERNALSYM CLSID_InkTablets}
  CLSID_InkWordList: TGUID = (
    D1:$9DE85094; D2:$F71F; D3:$44F1; D4:($84,$71,$15,$A2,$FA,$76,$FC,$F3));
  {$EXTERNALSYM CLSID_InkWordList}
  CLSID_InkStrokes: TGUID = (
    D1:$48F491BC; D2:$240E; D3:$4860; D4:($B0,$79,$A1,$E9,$4D,$3D,$2C,$86));
  {$EXTERNALSYM CLSID_InkStrokes}
  CLSID_Ink: TGUID = (
    D1:$13DE4A42; D2:$8D21; D3:$4C8E; D4:($BF,$9C,$8F,$69,$CB,$06,$8F,$CA));
  {$EXTERNALSYM CLSID_Ink}
  CLSID_SketchInk: TGUID = (
    D1:$F0291081; D2:$E87C; D3:$4E07; D4:($97,$DA,$A0,$A0,$37,$61,$E5,$86));
  {$EXTERNALSYM CLSID_SketchInk}


const
  IMF_FONT_SELECTED_IN_HDC = $1;
  {$EXTERNALSYM IMF_FONT_SELECTED_IN_HDC}
  IMF_ITALIC               = $2;
  {$EXTERNALSYM IMF_ITALIC}
  IMF_BOLD                 = $4;
  {$EXTERNALSYM IMF_BOLD}

  TCF_ALLOW_RECOGNITION = $1;
  {$EXTERNALSYM TCF_ALLOW_RECOGNITION}
  TCF_FORCE_RECOGNITION = $2;
  {$EXTERNALSYM TCF_FORCE_RECOGNITION}

  INK_SERIALIZED_FORMAT = 'Ink Serialized Format';
  {$EXTERNALSYM INK_SERIALIZED_FORMAT}

  ISC_FirstElement = 0;
  {$EXTERNALSYM ISC_FirstElement}
  ISC_AllElements  = -1;
  {$EXTERNALSYM ISC_AllElements}

  STR_GUID_X = '{598A6A8F-52C0-4BA0-93AF-AF357411A561}';
  {$EXTERNALSYM STR_GUID_X}
  STR_GUID_Y = '{B53F9F75-04E0-4498-A7EE-C30DBB5A9011}';
  {$EXTERNALSYM STR_GUID_Y}
  STR_GUID_Z = '{735ADB30-0EBB-4788-A0E4-0F316490055D}';
  {$EXTERNALSYM STR_GUID_Z}
  STR_GUID_PAKETSTATUS = '{6E0E07BF-AFE7-4CF7-87D1-AF6446208418}';
  {$EXTERNALSYM STR_GUID_PAKETSTATUS}
  STR_GUID_TIMERTICK = '{436510C5-FED3-45D1-8B76-71D3EA7A829D}';
  {$EXTERNALSYM STR_GUID_TIMERTICK}
  STR_GUID_SERIALNUMBER = '{78A81B56-0935-4493-BAAE-00541A8A16C4}';
  {$EXTERNALSYM STR_GUID_SERIALNUMBER}
  STR_GUID_NORMALPRESSURE = '{7307502D-F9F4-4E18-B3F2-2CE1B1A3610C}';
  {$EXTERNALSYM STR_GUID_NORMALPRESSURE}
  STR_GUID_TANGENTPRESSURE = '{6DA4488B-5244-41EC-905B-32D89AB80809}';
  {$EXTERNALSYM STR_GUID_TANGENTPRESSURE}
  STR_GUID_BUTTONPRESSURE = '{8B7FEFC4-96AA-4BFE-AC26-8A5F0BE07BF5}';
  {$EXTERNALSYM STR_GUID_BUTTONPRESSURE}
  STR_GUID_XTILTORIENTATION = '{A8D07B3A-8BF0-40B0-95A9-B80A6BB787BF}';
  {$EXTERNALSYM STR_GUID_XTILTORIENTATION}
  STR_GUID_YTILTORIENTATION = '{0E932389-1D77-43AF-AC00-5B950D6D4B2D}';
  {$EXTERNALSYM STR_GUID_YTILTORIENTATION}
  STR_GUID_AZIMUTHORIENTATION = '{029123B4-8828-410B-B250-A0536595E5DC}';
  {$EXTERNALSYM STR_GUID_AZIMUTHORIENTATION}
  STR_GUID_ALTITUDEORIENTATION = '{82DEC5C7-F6BA-4906-894F-66D68DFC456C}';
  {$EXTERNALSYM STR_GUID_ALTITUDEORIENTATION}
  STR_GUID_TWISTORIENTATION = '{0D324960-13B2-41E4-ACE6-7AE9D43D2D3B}';
  {$EXTERNALSYM STR_GUID_TWISTORIENTATION}
  STR_GUID_PITCHROTATION = '{7F7E57B7-BE37-4BE1-A356-7A84160E1893}';
  {$EXTERNALSYM STR_GUID_PITCHROTATION}
  STR_GUID_ROLLROTATION = '{5D5D5E56-6BA9-4C5B-9FB0-851C91714E56}';
  {$EXTERNALSYM STR_GUID_ROLLROTATION}
  STR_GUID_YAWROTATION = '{6A849980-7C3A-45B7-AA82-90A262950E89}';
  {$EXTERNALSYM STR_GUID_YAWROTATION}
  STR_GUID_WIDTH = '{BAABE94D-2712-48F5-BE9D-8F8B5EA0711A}';
  {$EXTERNALSYM STR_GUID_WIDTH}
  STR_GUID_HEIGHT = '{E61858D2-E447-4218-9D3F-18865C203DF4}';
  {$EXTERNALSYM STR_GUID_HEIGHT}
  STR_GUID_FINGERCONTACTCONFIDENCE = '{E706C804-57F0-4F00-8A0C-853D57789BE9}';
  {$EXTERNALSYM STR_GUID_FINGERCONTACTCONFIDENCE}
  STR_GUID_DEVICE_CONTACT_ID = '{02585B91-049B-4750-9615-DF8948AB3C9C}';
  {$EXTERNALSYM STR_GUID_DEVICE_CONTACT_ID}
  GUID_PACKETPROPERTY_GUID_X: TGUID = (
    D1:$598A6A8F; D2:$52C0; D3:$4BA0; D4:($93,$AF,$AF,$35,$74,$11,$A5,$61));
  {$EXTERNALSYM GUID_PACKETPROPERTY_GUID_X}
  GUID_PACKETPROPERTY_GUID_Y: TGUID = (
    D1:$B53F9F75; D2:$04E0; D3:$4498; D4:($A7,$EE,$C3,$0D,$BB,$5A,$90,$11));
  {$EXTERNALSYM GUID_PACKETPROPERTY_GUID_Y}
  GUID_PACKETPROPERTY_GUID_Z: TGUID = (
    D1:$735ADB30; D2:$0EBB; D3:$4788; D4:($A0,$E4,$0F,$31,$64,$90,$05,$5D));
  {$EXTERNALSYM GUID_PACKETPROPERTY_GUID_Z}
  GUID_PACKETPROPERTY_GUID_PACKET_STATUS: TGUID = (
    D1:$6E0E07BF; D2:$AFE7; D3:$4CF7; D4:($87,$D1,$AF,$64,$46,$20,$84,$18));
  {$EXTERNALSYM GUID_PACKETPROPERTY_GUID_PACKET_STATUS}
  GUID_PACKETPROPERTY_GUID_TIMER_TICK: TGUID = (
    D1:$436510C5; D2:$FED3; D3:$45D1; D4:($8B,$76,$71,$D3,$EA,$7A,$82,$9D));
  {$EXTERNALSYM GUID_PACKETPROPERTY_GUID_TIMER_TICK}
  GUID_PACKETPROPERTY_GUID_SERIAL_NUMBER: TGUID = (
    D1:$78A81B56; D2:$0935; D3:$4493; D4:($BA,$AE,$00,$54,$1A,$8A,$16,$C4));
  {$EXTERNALSYM GUID_PACKETPROPERTY_GUID_SERIAL_NUMBER}
  GUID_PACKETPROPERTY_GUID_NORMAL_PRESSURE: TGUID = (
    D1:$7307502D; D2:$F9F4; D3:$4E18; D4:($B3,$F2,$2C,$E1,$B1,$A3,$61,$0C));
  {$EXTERNALSYM GUID_PACKETPROPERTY_GUID_NORMAL_PRESSURE}
  GUID_PACKETPROPERTY_GUID_TANGENT_PRESSURE: TGUID = (
    D1:$6DA4488B; D2:$5244; D3:$41EC; D4:($90,$5B,$32,$D8,$9A,$B8,$08,$09));
  {$EXTERNALSYM GUID_PACKETPROPERTY_GUID_TANGENT_PRESSURE}
  GUID_PACKETPROPERTY_GUID_BUTTON_PRESSURE: TGUID = (
    D1:$8B7FEFC4; D2:$96AA; D3:$4BFE; D4:($AC,$26,$8A,$5F,$0B,$E0,$7B,$F5));
  {$EXTERNALSYM GUID_PACKETPROPERTY_GUID_BUTTON_PRESSURE}
  GUID_PACKETPROPERTY_GUID_X_TILT_ORIENTATION: TGUID = (
    D1:$A8D07B3A; D2:$8BF0; D3:$40B0; D4:($95,$A9,$B8,$0A,$6B,$B7,$87,$BF));
  {$EXTERNALSYM GUID_PACKETPROPERTY_GUID_X_TILT_ORIENTATION}
  GUID_PACKETPROPERTY_GUID_Y_TILT_ORIENTATION: TGUID = (
    D1:$0E932389; D2:$1D77; D3:$43AF; D4:($AC,$00,$5B,$95,$0D,$6D,$4B,$2D));
  {$EXTERNALSYM GUID_PACKETPROPERTY_GUID_Y_TILT_ORIENTATION}
  GUID_PACKETPROPERTY_GUID_AZIMUTH_ORIENTATION: TGUID = (
    D1:$029123B4; D2:$8828; D3:$410B; D4:($B2,$50,$A0,$53,$65,$95,$E5,$DC));
  {$EXTERNALSYM GUID_PACKETPROPERTY_GUID_AZIMUTH_ORIENTATION}
  GUID_PACKETPROPERTY_GUID_ALTITUDE_ORIENTATION: TGUID = (
    D1:$82DEC5C7; D2:$F6BA; D3:$4906; D4:($89,$4F,$66,$D6,$8D,$FC,$45,$6C));
  {$EXTERNALSYM GUID_PACKETPROPERTY_GUID_ALTITUDE_ORIENTATION}
  GUID_PACKETPROPERTY_GUID_TWIST_ORIENTATION: TGUID = (
    D1:$0D324960; D2:$13B2; D3:$41E4; D4:($AC,$E6,$7A,$E9,$D4,$3D,$2D,$3B));
  {$EXTERNALSYM GUID_PACKETPROPERTY_GUID_TWIST_ORIENTATION}
  GUID_PACKETPROPERTY_GUID_PITCH_ROTATION: TGUID = (
    D1:$7F7E57B7; D2:$BE37; D3:$4BE1; D4:($A3,$56,$7A,$84,$16,$0E,$18,$93));
  {$EXTERNALSYM GUID_PACKETPROPERTY_GUID_PITCH_ROTATION}
  GUID_PACKETPROPERTY_GUID_ROLL_ROTATION: TGUID = (
    D1:$5D5D5E56; D2:$6BA9; D3:$4C5B; D4:($9F,$B0,$85,$1C,$91,$71,$4E,$56));
  {$EXTERNALSYM GUID_PACKETPROPERTY_GUID_ROLL_ROTATION}
  GUID_PACKETPROPERTY_GUID_YAW_ROTATION: TGUID = (
    D1:$6A849980; D2:$7C3A; D3:$45B7; D4:($AA,$82,$90,$A2,$62,$95,$0E,$89));
  {$EXTERNALSYM GUID_PACKETPROPERTY_GUID_YAW_ROTATION}
  GUID_PACKETPROPERTY_GUID_WIDTH: TGUID = (
    D1:$BAABE94D; D2:$2712; D3:$48F5; D4:($BE,$9D,$8F,$8B,$5E,$A0,$71,$1A));
  {$EXTERNALSYM GUID_PACKETPROPERTY_GUID_WIDTH}
  GUID_PACKETPROPERTY_GUID_HEIGHT: TGUID = (
    D1:$E61858D2; D2:$E447; D3:$4218; D4:($9D,$3F,$18,$86,$5C,$20,$3D,$F4));
  {$EXTERNALSYM GUID_PACKETPROPERTY_GUID_HEIGHT}
  GUID_PACKETPROPERTY_GUID_FINGERCONTACTCONFIDENCE: TGUID = (
    D1:$E706C804; D2:$57F0; D3:$4F00; D4:($8A,$0C,$85,$3D,$57,$78,$9B,$E9));
  {$EXTERNALSYM GUID_PACKETPROPERTY_GUID_FINGERCONTACTCONFIDENCE}
  GUID_PACKETPROPERTY_GUID_DEVICE_CONTACT_ID: TGUID = (
    D1:$02585B91; D2:$049B; D3:$4750; D4:($96,$15,$DF,$89,$48,$AB,$3C,$9C));
  {$EXTERNALSYM GUID_PACKETPROPERTY_GUID_DEVICE_CONTACT_ID}
  INKRECOGNITIONPROPERTY_LINENUMBER = '{DBF29F2C-5289-4BE8-B3D8-6EF63246253E}';
  {$EXTERNALSYM INKRECOGNITIONPROPERTY_LINENUMBER}
  INKRECOGNITIONPROPERTY_BOXNUMBER = '{2C243E3A-F733-4EB6-B1F8-B5DC5C2C4CDA}';
  {$EXTERNALSYM INKRECOGNITIONPROPERTY_BOXNUMBER}
  INKRECOGNITIONPROPERTY_SEGMENTATION = '{B3C0FE6C-FB51-4164-BA2F-844AF8F983DA}';
  {$EXTERNALSYM INKRECOGNITIONPROPERTY_SEGMENTATION}
  INKRECOGNITIONPROPERTY_HOTPOINT = '{CA6F40DC-5292-452a-91FB-2181C0BEC0DE}';
  {$EXTERNALSYM INKRECOGNITIONPROPERTY_HOTPOINT}
  INKRECOGNITIONPROPERTY_MAXIMUMSTROKECOUNT = '{BF0EEC4E-4B7D-47a9-8CFA-234DD24BD22A}';
  {$EXTERNALSYM INKRECOGNITIONPROPERTY_MAXIMUMSTROKECOUNT}
  INKRECOGNITIONPROPERTY_POINTSPERINCH = '{7ED16B76-889C-468e-8276-0021B770187E}';
  {$EXTERNALSYM INKRECOGNITIONPROPERTY_POINTSPERINCH}
  INKRECOGNITIONPROPERTY_CONFIDENCELEVEL = '{7DFE11A7-FB5D-4958-8765-154ADF0D833F}';
  {$EXTERNALSYM INKRECOGNITIONPROPERTY_CONFIDENCELEVEL}
  INKRECOGNITIONPROPERTY_LINEMETRICS = '{8CC24B27-30A9-4b96-9056-2D3A90DA0727}';
  {$EXTERNALSYM INKRECOGNITIONPROPERTY_LINEMETRICS}
  FACTOID_NONE = 'NONE';
  {$EXTERNALSYM FACTOID_NONE}
  FACTOID_DEFAULT = 'DEFAULT';
  {$EXTERNALSYM FACTOID_DEFAULT}
  FACTOID_SYSTEMDICTIONARY = 'SYSDICT';
  {$EXTERNALSYM FACTOID_SYSTEMDICTIONARY}
  FACTOID_WORDLIST = 'WORDLIST';
  {$EXTERNALSYM FACTOID_WORDLIST}
  FACTOID_EMAIL = 'EMAIL';
  {$EXTERNALSYM FACTOID_EMAIL}
  FACTOID_WEB = 'WEB';
  {$EXTERNALSYM FACTOID_WEB}
  FACTOID_ONECHAR = 'ONECHAR';
  {$EXTERNALSYM FACTOID_ONECHAR}
  FACTOID_NUMBER = 'NUMBER';
  {$EXTERNALSYM FACTOID_NUMBER}
  FACTOID_DIGIT = 'DIGIT';
  {$EXTERNALSYM FACTOID_DIGIT}
  FACTOID_NUMBERSIMPLE = 'NUMSIMPLE';
  {$EXTERNALSYM FACTOID_NUMBERSIMPLE}
  FACTOID_CURRENCY = 'CURRENCY';
  {$EXTERNALSYM FACTOID_CURRENCY}
  FACTOID_POSTALCODE = 'POSTALCODE';
  {$EXTERNALSYM FACTOID_POSTALCODE}
  FACTOID_PERCENT = 'PERCENT';
  {$EXTERNALSYM FACTOID_PERCENT}
  FACTOID_DATE = 'DATE';
  {$EXTERNALSYM FACTOID_DATE}
  FACTOID_TIME = 'TIME';
  {$EXTERNALSYM FACTOID_TIME}
  FACTOID_TELEPHONE = 'TELEPHONE';
  {$EXTERNALSYM FACTOID_TELEPHONE}
  FACTOID_FILENAME = 'FILENAME';
  {$EXTERNALSYM FACTOID_FILENAME}
  FACTOID_UPPERCHAR = 'UPPERCHAR';
  {$EXTERNALSYM FACTOID_UPPERCHAR}
  FACTOID_LOWERCHAR = 'LOWERCHAR';
  {$EXTERNALSYM FACTOID_LOWERCHAR}
  FACTOID_PUNCCHAR = 'PUNCCHAR';
  {$EXTERNALSYM FACTOID_PUNCCHAR}
  FACTOID_JAPANESECOMMON = 'JPN_COMMON';
  {$EXTERNALSYM FACTOID_JAPANESECOMMON}
  FACTOID_CHINESESIMPLECOMMON = 'CHS_COMMON';
  {$EXTERNALSYM FACTOID_CHINESESIMPLECOMMON}
  FACTOID_CHINESETRADITIONALCOMMON = 'CHT_COMMON';
  {$EXTERNALSYM FACTOID_CHINESETRADITIONALCOMMON}
  FACTOID_KOREANCOMMON = 'KOR_COMMON';
  {$EXTERNALSYM FACTOID_KOREANCOMMON}
  FACTOID_HIRAGANA = 'HIRAGANA';
  {$EXTERNALSYM FACTOID_HIRAGANA}
  FACTOID_KATAKANA = 'KATAKANA';
  {$EXTERNALSYM FACTOID_KATAKANA}
  FACTOID_KANJICOMMON = 'KANJI_COMMON';
  {$EXTERNALSYM FACTOID_KANJICOMMON}
  FACTOID_KANJIRARE = 'KANJI_RARE';
  {$EXTERNALSYM FACTOID_KANJIRARE}
  FACTOID_BOPOMOFO = 'BOPOMOFO';
  {$EXTERNALSYM FACTOID_BOPOMOFO}
  FACTOID_JAMO = 'JAMO';
  {$EXTERNALSYM FACTOID_JAMO}
  FACTOID_HANGULCOMMON = 'HANGUL_COMMON';
  {$EXTERNALSYM FACTOID_HANGULCOMMON}
  FACTOID_HANGULRARE = 'HANGUL_RARE';
  {$EXTERNALSYM FACTOID_HANGULRARE}

  IBBM_Default    = 0;
  {$EXTERNALSYM IBBM_Default}
  IBBM_NoCurveFit = 1;
  {$EXTERNALSYM IBBM_NoCurveFit}
  IBBM_CurveFit   = 2;
  {$EXTERNALSYM IBBM_CurveFit}
  IBBM_PointsOnly = 3;
  {$EXTERNALSYM IBBM_PointsOnly}
  IBBM_Union      = 4;
  {$EXTERNALSYM IBBM_Union}
  IBBM_Last = IBBM_Union + 1;
  {$EXTERNALSYM IBBM_Last}

  IEF_CopyFromOriginal   = 0;
  {$EXTERNALSYM IEF_CopyFromOriginal}
  IEF_RemoveFromOriginal = $1;
  {$EXTERNALSYM IEF_RemoveFromOriginal}
  IEF_Default            = IEF_REMOVEFROMORIGINAL;
  {$EXTERNALSYM IEF_Default}
  IEF_All = IEF_RemoveFromOriginal or IEF_CopyFromOriginal;
  {$EXTERNALSYM IEF_All}

  IPF_InkSerializedFormat       = 0;
  {$EXTERNALSYM IPF_InkSerializedFormat}
  IPF_Base64InkSerializedFormat = 1;
  {$EXTERNALSYM IPF_Base64InkSerializedFormat}
  IPF_GIF                       = 2;
  {$EXTERNALSYM IPF_GIF}
  IPF_Base64GIF                 = 3;
  {$EXTERNALSYM IPF_Base64GIF}
  IPF_Last = IPF_Base64GIF + 1;
  {$EXTERNALSYM IPF_Last}

  IPCM_Default            = 0;
  {$EXTERNALSYM IPCM_Default}
  IPCM_MaximumCompression = 1;
  {$EXTERNALSYM IPCM_MaximumCompression}
  IPCM_NoCompression      = 2;
  {$EXTERNALSYM IPCM_NoCompression}

  IPT_Ball      = 0;
  {$EXTERNALSYM IPT_Ball}
  IPT_Rectangle = 1;
  {$EXTERNALSYM IPT_Rectangle}
  IPT_Last = IPT_Rectangle + 1;
  {$EXTERNALSYM IPT_Last}

  IRO_Black       = 1;
  {$EXTERNALSYM IRO_Black}
  IRO_NotMergePen = 2;
  {$EXTERNALSYM IRO_NotMergePen}
  IRO_MaskNotPen  = 3;
  {$EXTERNALSYM IRO_MaskNotPen}
  IRO_NotCopyPen  = 4;
  {$EXTERNALSYM IRO_NotCopyPen}
  IRO_MaskPenNot  = 5;
  {$EXTERNALSYM IRO_MaskPenNot}
  IRO_Not         = 6;
  {$EXTERNALSYM IRO_Not}
  IRO_XOrPen      = 7;
  {$EXTERNALSYM IRO_XOrPen}
  IRO_NotMaskPen  = 8;
  {$EXTERNALSYM IRO_NotMaskPen}
  IRO_MaskPen     = 9;
  {$EXTERNALSYM IRO_MaskPen}
  IRO_NotXOrPen   = 10;
  {$EXTERNALSYM IRO_NotXOrPen}
  IRO_NoOperation = 11;
  {$EXTERNALSYM IRO_NoOperation}
  IRO_MergeNotPen = 12;
  {$EXTERNALSYM IRO_MergeNotPen}
  IRO_CopyPen     = 13;
  {$EXTERNALSYM IRO_CopyPen}
  IRO_MergePenNot = 14;
  {$EXTERNALSYM IRO_MergePenNot}
  IRO_MergePen    = 15;
  {$EXTERNALSYM IRO_MergePen}
  IRO_White       = 16;
  {$EXTERNALSYM IRO_White}
  IRO_Last = IRO_White+1;
  {$EXTERNALSYM IRO_Last}

  IMP_Default        = 0;
  {$EXTERNALSYM IMP_Default}
  IMP_Arrow          = 1;
  {$EXTERNALSYM IMP_Arrow}
  IMP_Crosshair      = 2;
  {$EXTERNALSYM IMP_Crosshair}
  IMP_Ibeam          = 3;
  {$EXTERNALSYM IMP_Ibeam}
  IMP_SizeNESW       = 4;
  {$EXTERNALSYM IMP_SizeNESW}
  IMP_SizeNS         = 5;
  {$EXTERNALSYM IMP_SizeNS}
  IMP_SizeNWSE       = 6;
  {$EXTERNALSYM IMP_SizeNWSE}
  IMP_SizeWE         = 7;
  {$EXTERNALSYM IMP_SizeWE}
  IMP_UpArrow        = 8;
  {$EXTERNALSYM IMP_UpArrow}
  IMP_Hourglass      = 9;
  {$EXTERNALSYM IMP_Hourglass}
  IMP_NoDrop         = 10;
  {$EXTERNALSYM IMP_NoDrop}
  IMP_ArrowHourglass = 11;
  {$EXTERNALSYM IMP_ArrowHourglass}
  IMP_ArrowQuestion  = 12;
  {$EXTERNALSYM IMP_ArrowQuestion}
  IMP_SizeAll        = 13;
  {$EXTERNALSYM IMP_SizeAll}
  IMP_Hand           = 14;
  {$EXTERNALSYM IMP_Hand}
  IMP_Custom         = 99;
  {$EXTERNALSYM IMP_Custom}

  ICB_Copy        = 0;
  {$EXTERNALSYM ICB_Copy}
  ICB_Cut         = $1;
  {$EXTERNALSYM ICB_Cut}
  ICB_ExtractOnly = $30;
  {$EXTERNALSYM ICB_ExtractOnly}
  ICB_DelayedCopy = $20;
  {$EXTERNALSYM ICB_DelayedCopy}
  ICB_Default     = ICB_COPY;
  {$EXTERNALSYM ICB_Default}
  ICB_Last = ICB_DelayedCopy+1;
  {$EXTERNALSYM ICB_Last}

  ICF_None                = 0;
  {$EXTERNALSYM ICF_None}
  ICF_InkSerializedFormat = $1;
  {$EXTERNALSYM ICF_InkSerializedFormat}
  ICF_SketchInk           = $2;
  {$EXTERNALSYM ICF_SketchInk}
  ICF_TextInk             = $6;
  {$EXTERNALSYM ICF_TextInk}
  ICF_EnhancedMetafile    = $8;
  {$EXTERNALSYM ICF_EnhancedMetafile}
  ICF_Metafile            = $20;
  {$EXTERNALSYM ICF_Metafile}
  ICF_Bitmap              = $40;
  {$EXTERNALSYM ICF_Bitmap}
  ICF_PasteMask           = $7;
  {$EXTERNALSYM ICF_PasteMask}
  ICF_CopyMask            = $7F;
  {$EXTERNALSYM ICF_CopyMask}
  ICF_Default             = ICF_COPYMASK;
  {$EXTERNALSYM ICF_Default}
  ICF_Last = ICF_CopyMask+1;
  {$EXTERNALSYM ICF_Last}

  SHR_None      = 0;
  {$EXTERNALSYM SHR_None}
  SHR_NW        = SHR_NONE + 1;
  {$EXTERNALSYM SHR_NW}
  SHR_SE        = SHR_NW + 1;
  {$EXTERNALSYM SHR_SE}
  SHR_NE        = SHR_SE + 1;
  {$EXTERNALSYM SHR_NE}
  SHR_SW        = SHR_NE + 1;
  {$EXTERNALSYM SHR_SW}
  SHR_E         = SHR_SW + 1;
  {$EXTERNALSYM SHR_E}
  SHR_W         = SHR_E + 1;
  {$EXTERNALSYM SHR_W}
  SHR_N         = SHR_W + 1;
  {$EXTERNALSYM SHR_N}
  SHR_S         = SHR_N + 1;
  {$EXTERNALSYM SHR_S}
  SHR_Selection = SHR_S + 1;
  {$EXTERNALSYM SHR_Selection}

  IRS_NoError                     = 0;
  {$EXTERNALSYM IRS_NoError}
  IRS_Interrupted                 = $1;
  {$EXTERNALSYM IRS_Interrupted}
  IRS_ProcessFailed               = $2;
  {$EXTERNALSYM IRS_ProcessFailed}
  IRS_InkAddedFailed              = $4;
  {$EXTERNALSYM IRS_InkAddedFailed}
  IRS_SetAutoCompletionModeFailed = $8;
  {$EXTERNALSYM IRS_SetAutoCompletionModeFailed}
  IRS_SetStrokesFailed            = $10;
  {$EXTERNALSYM IRS_SetStrokesFailed}
  IRS_SetGuideFailed              = $20;
  {$EXTERNALSYM IRS_SetGuideFailed}
  IRS_SetFlagsFailed              = $40;
  {$EXTERNALSYM IRS_SetFlagsFailed}
  IRS_SetFactoidFailed            = $80;
  {$EXTERNALSYM IRS_SetFactoidFailed}
  IRS_SetPrefixSuffixFailed       = $100;
  {$EXTERNALSYM IRS_SetPrefixSuffixFailed}
  IRS_SetWordListFailed           = $200;
  {$EXTERNALSYM IRS_SetWordListFailed}

  DISPID_IRTop          = 1;
  {$EXTERNALSYM DISPID_IRTop}
  DISPID_IRLeft         = DISPID_IRTOP + 1;
  {$EXTERNALSYM DISPID_IRLeft}
  DISPID_IRBottom       = DISPID_IRLEFT + 1;
  {$EXTERNALSYM DISPID_IRBottom}
  DISPID_IRRight        = DISPID_IRBOTTOM + 1;
  {$EXTERNALSYM DISPID_IRRight}
  DISPID_IRGetRectangle = DISPID_IRRIGHT + 1;
  {$EXTERNALSYM DISPID_IRGetRectangle}
  DISPID_IRSetRectangle = DISPID_IRGETRECTANGLE + 1;
  {$EXTERNALSYM DISPID_IRSetRectangle}
  DISPID_IRData         = DISPID_IRSETRECTANGLE + 1;
  {$EXTERNALSYM DISPID_IRData}

  DISPID_IEPGuid = 1;
  {$EXTERNALSYM DISPID_IEPGuid}
  DISPID_IEPData = DISPID_IEPGUID + 1;
  {$EXTERNALSYM DISPID_IEPData}

  DISPID_IEPs_NewEnum          = DISPID_NEWENUM;
  {$EXTERNALSYM DISPID_IEPs_NewEnum}
  DISPID_IEPsItem              = DISPID_VALUE;
  {$EXTERNALSYM DISPID_IEPsItem}
  DISPID_IEPsCount             = 1;
  {$EXTERNALSYM DISPID_IEPsCount}
  DISPID_IEPsAdd               = DISPID_IEPSCOUNT + 1;
  {$EXTERNALSYM DISPID_IEPsAdd}
  DISPID_IEPsRemove            = DISPID_IEPSADD + 1;
  {$EXTERNALSYM DISPID_IEPsRemove}
  DISPID_IEPsClear             = DISPID_IEPSREMOVE + 1;
  {$EXTERNALSYM DISPID_IEPsClear}
  DISPID_IEPsDoesPropertyExist = DISPID_IEPSCLEAR + 1;
  {$EXTERNALSYM DISPID_IEPsDoesPropertyExist}

  DISPID_DAHeight             = 1;
  {$EXTERNALSYM DISPID_DAHeight}
  DISPID_DAColor              = DISPID_DAHEIGHT + 1;
  {$EXTERNALSYM DISPID_DAColor}
  DISPID_DAWidth              = DISPID_DACOLOR + 1;
  {$EXTERNALSYM DISPID_DAWidth}
  DISPID_DAFitToCurve         = DISPID_DAWIDTH + 1;
  {$EXTERNALSYM DISPID_DAFitToCurve}
  DISPID_DAIgnorePressure     = DISPID_DAFITTOCURVE + 1;
  {$EXTERNALSYM DISPID_DAIgnorePressure}
  DISPID_DAAntiAliased        = DISPID_DAIGNOREPRESSURE + 1;
  {$EXTERNALSYM DISPID_DAAntiAliased}
  DISPID_DATransparency       = DISPID_DAANTIALIASED + 1;
  {$EXTERNALSYM DISPID_DATransparency}
  DISPID_DARasterOperation    = DISPID_DATRANSPARENCY + 1;
  {$EXTERNALSYM DISPID_DARasterOperation}
  DISPID_DAPenTip             = DISPID_DARASTEROPERATION + 1;
  {$EXTERNALSYM DISPID_DAPenTip}
  DISPID_DAClone              = DISPID_DAPENTIP + 1;
  {$EXTERNALSYM DISPID_DAClone}
  DISPID_DAExtendedProperties = DISPID_DACLONE + 1;
  {$EXTERNALSYM DISPID_DAExtendedProperties}

  DISPID_ITReset        = 1;
  {$EXTERNALSYM DISPID_ITReset}
  DISPID_ITTranslate    = DISPID_ITRESET + 1;
  {$EXTERNALSYM DISPID_ITTranslate}
  DISPID_ITRotate       = DISPID_ITTRANSLATE + 1;
  {$EXTERNALSYM DISPID_ITRotate}
  DISPID_ITReflect      = DISPID_ITROTATE + 1;
  {$EXTERNALSYM DISPID_ITReflect}
  DISPID_ITShear        = DISPID_ITREFLECT + 1;
  {$EXTERNALSYM DISPID_ITShear}
  DISPID_ITScale        = DISPID_ITSHEAR + 1;
  {$EXTERNALSYM DISPID_ITScale}
  DISPID_ITeM11         = DISPID_ITSCALE + 1;
  {$EXTERNALSYM DISPID_ITeM11}
  DISPID_ITeM12         = DISPID_ITEM11 + 1;
  {$EXTERNALSYM DISPID_ITeM12}
  DISPID_ITeM21         = DISPID_ITEM12 + 1;
  {$EXTERNALSYM DISPID_ITeM21}
  DISPID_ITeM22         = DISPID_ITEM21 + 1;
  {$EXTERNALSYM DISPID_ITeM22}
  DISPID_ITeDx          = DISPID_ITEM22 + 1;
  {$EXTERNALSYM DISPID_ITeDx}
  DISPID_ITeDy          = DISPID_ITEDX + 1;
  {$EXTERNALSYM DISPID_ITeDy}
  DISPID_ITGetTransform = DISPID_ITEDY + 1;
  {$EXTERNALSYM DISPID_ITGetTransform}
  DISPID_ITSetTransform = DISPID_ITGETTRANSFORM + 1;
  {$EXTERNALSYM DISPID_ITSetTransform}
  DISPID_ITData         = DISPID_ITSETTRANSFORM + 1;
  {$EXTERNALSYM DISPID_ITData}

  IAG_AllGestures     = 0;
  {$EXTERNALSYM IAG_AllGestures}
  IAG_NoGesture       = $F000;
  {$EXTERNALSYM IAG_NoGesture}
  IAG_Scratchout      = $F001;
  {$EXTERNALSYM IAG_Scratchout}
  IAG_Triangle        = $F002;
  {$EXTERNALSYM IAG_Triangle}
  IAG_Square          = $F003;
  {$EXTERNALSYM IAG_Square}
  IAG_Star            = $F004;
  {$EXTERNALSYM IAG_Star}
  IAG_Check           = $F005;
  {$EXTERNALSYM IAG_Check}
  IAG_Curlicue        = $F010;
  {$EXTERNALSYM IAG_Curlicue}
  IAG_DoubleCurlicue  = $F011;
  {$EXTERNALSYM IAG_DoubleCurlicue}
  IAG_Circle          = $F020;
  {$EXTERNALSYM IAG_Circle}
  IAG_DoubleCircle    = $F021;
  {$EXTERNALSYM IAG_DoubleCircle}
  IAG_SemiCircleLeft  = $F028;
  {$EXTERNALSYM IAG_SemiCircleLeft}
  IAG_SemiCircleRight = $F029;
  {$EXTERNALSYM IAG_SemiCircleRight}
  IAG_ChevronUp       = $F030;
  {$EXTERNALSYM IAG_ChevronUp}
  IAG_ChevronDown     = $F031;
  {$EXTERNALSYM IAG_ChevronDown}
  IAG_ChevronLeft     = $F032;
  {$EXTERNALSYM IAG_ChevronLeft}
  IAG_ChevronRight    = $F033;
  {$EXTERNALSYM IAG_ChevronRight}
  IAG_ArrowUp         = $F038;
  {$EXTERNALSYM IAG_ArrowUp}
  IAG_ArrowDown       = $F039;
  {$EXTERNALSYM IAG_ArrowDown}
  IAG_ArrowLeft       = $F03A;
  {$EXTERNALSYM IAG_ArrowLeft}
  IAG_ArrowRight      = $F03B;
  {$EXTERNALSYM IAG_ArrowRight}
  IAG_Up              = $F058;
  {$EXTERNALSYM IAG_Up}
  IAG_Down            = $F059;
  {$EXTERNALSYM IAG_Down}
  IAG_Left            = $F05A;
  {$EXTERNALSYM IAG_Left}
  IAG_Right           = $F05B;
  {$EXTERNALSYM IAG_Right}
  IAG_UpDown          = $F060;
  {$EXTERNALSYM IAG_UpDown}
  IAG_DownUp          = $F061;
  {$EXTERNALSYM IAG_DownUp}
  IAG_LeftRight       = $F062;
  {$EXTERNALSYM IAG_LeftRight}
  IAG_RightLeft       = $F063;
  {$EXTERNALSYM IAG_RightLeft}
  IAG_UpLeftLong      = $F064;
  {$EXTERNALSYM IAG_UpLeftLong}
  IAG_UpRightLong     = $F065;
  {$EXTERNALSYM IAG_UpRightLong}
  IAG_DownLeftLong    = $F066;
  {$EXTERNALSYM IAG_DownLeftLong}
  IAG_DownRightLong   = $F067;
  {$EXTERNALSYM IAG_DownRightLong}
  IAG_UpLeft          = $F068;
  {$EXTERNALSYM IAG_UpLeft}
  IAG_UpRight         = $F069;
  {$EXTERNALSYM IAG_UpRight}
  IAG_DownLeft        = $F06A;
  {$EXTERNALSYM IAG_DownLeft}
  IAG_DownRight       = $F06B;
  {$EXTERNALSYM IAG_DownRight}
  IAG_LeftUp          = $F06C;
  {$EXTERNALSYM IAG_LeftUp}
  IAG_LeftDown        = $F06D;
  {$EXTERNALSYM IAG_LeftDown}
  IAG_RightUp         = $F06E;
  {$EXTERNALSYM IAG_RightUp}
  IAG_RightDown       = $F06F;
  {$EXTERNALSYM IAG_RightDown}
  IAG_Exclamation     = $F0A4;
  {$EXTERNALSYM IAG_Exclamation}
  IAG_Tap             = $F0F0;
  {$EXTERNALSYM IAG_Tap}
  IAG_DoubleTap       = $F0F1;
  {$EXTERNALSYM IAG_DoubleTap}

  ISG_Tap        = $10;
  {$EXTERNALSYM ISG_Tap}
  ISG_DoubleTap  = $11;
  {$EXTERNALSYM ISG_DoubleTap}
  ISG_RightTap   = $12;
  {$EXTERNALSYM ISG_RightTap}
  ISG_Drag       = $13;
  {$EXTERNALSYM ISG_Drag}
  ISG_RightDrag  = $14;
  {$EXTERNALSYM ISG_RightDrag}
  ISG_HoldEnter  = $15;
  {$EXTERNALSYM ISG_HoldEnter}
  ISG_HoldLeave  = $16;
  {$EXTERNALSYM ISG_HoldLeave}
  ISG_HoverEnter = $17;
  {$EXTERNALSYM ISG_HoverEnter}
  ISG_HoverLeave = $18;
  {$EXTERNALSYM ISG_HoverLeave}
  ISG_Flick      = $1F;
  {$EXTERNALSYM ISG_Flick}
  ISG_First = ISG_Tap;
  {$EXTERNALSYM ISG_First}
  ISG_Last = ISG_Flick;
  {$EXTERNALSYM ISG_Last}

  IRC_Strong       = 0;
  {$EXTERNALSYM IRC_Strong}
  IRC_Intermediate = 1;
  {$EXTERNALSYM IRC_Intermediate}
  IRC_Poor         = 2;
  {$EXTERNALSYM IRC_Poor}

  DISPID_IGId          = DISPID_VALUE;
  {$EXTERNALSYM DISPID_IGId}
  DISPID_IGGetHotPoint = DISPID_IGID + 1;
  {$EXTERNALSYM DISPID_IGGetHotPoint}
  DISPID_IGConfidence  = DISPID_IGGETHOTPOINT + 1;
  {$EXTERNALSYM DISPID_IGConfidence}

  DISPID_ICsrName              = DISPID_VALUE;
  {$EXTERNALSYM DISPID_ICsrName}
  DISPID_ICsrId                = 1;
  {$EXTERNALSYM DISPID_ICsrId}
  DISPID_ICsrDrawingAttributes = DISPID_ICSRID + 1;
  {$EXTERNALSYM DISPID_ICsrDrawingAttributes}
  DISPID_ICsrButtons           = DISPID_ICSRDRAWINGATTRIBUTES + 1;
  {$EXTERNALSYM DISPID_ICsrButtons}
  DISPID_ICsrInverted          = DISPID_ICSRBUTTONS + 1;
  {$EXTERNALSYM DISPID_ICsrInverted}
  DISPID_ICsrTablet            = DISPID_ICSRINVERTED + 1;
  {$EXTERNALSYM DISPID_ICsrTablet}

  DISPID_ICs_NewEnum = DISPID_NEWENUM;
  {$EXTERNALSYM DISPID_ICs_NewEnum}
  DISPID_ICsItem     = DISPID_VALUE;
  {$EXTERNALSYM DISPID_ICsItem}
  DISPID_ICsCount    = 1;
  {$EXTERNALSYM DISPID_ICsCount}

  ICBS_Unavailable = 0;
  {$EXTERNALSYM ICBS_Unavailable}
  ICBS_Up          = ICBS_UNAVAILABLE + 1;
  {$EXTERNALSYM ICBS_Up}
  ICBS_Down        = ICBS_UP + 1;
  {$EXTERNALSYM ICBS_Down}
  ICBS_Last = ICBS_Down;
  {$EXTERNALSYM ICBS_Last}

  DISPID_ICBName  = DISPID_VALUE;
  {$EXTERNALSYM DISPID_ICBName}
  DISPID_ICBId    = 1;
  {$EXTERNALSYM DISPID_ICBId}
  DISPID_ICBState = DISPID_ICBID + 1;
  {$EXTERNALSYM DISPID_ICBState}

  DISPID_ICBs_NewEnum = DISPID_NEWENUM;
  {$EXTERNALSYM DISPID_ICBs_NewEnum}
  DISPID_ICBsItem     = DISPID_VALUE;
  {$EXTERNALSYM DISPID_ICBsItem}
  DISPID_ICBsCount    = 1;
  {$EXTERNALSYM DISPID_ICBsCount}

  THWC_Integrated             = $1;
  {$EXTERNALSYM THWC_Integrated}
  THWC_CursorMustTouch        = $2;
  {$EXTERNALSYM THWC_CursorMustTouch}
  THWC_HardProximity          = $4;
  {$EXTERNALSYM THWC_HardProximity}
  THWC_CursorsHavePhysicalIds = $8;
  {$EXTERNALSYM THWC_CursorsHavePhysicalIds}

  TPMU_Default     = 0;
  {$EXTERNALSYM TPMU_Default}
  TPMU_Inches      = TPMU_DEFAULT + 1;
  {$EXTERNALSYM TPMU_Inches}
  TPMU_Centimeters = TPMU_INCHES + 1;
  {$EXTERNALSYM TPMU_Centimeters}
  TPMU_Degrees     = TPMU_CENTIMETERS + 1;
  {$EXTERNALSYM TPMU_Degrees}
  TPMU_Radians     = TPMU_DEGREES + 1;
  {$EXTERNALSYM TPMU_Radians}
  TPMU_Seconds     = TPMU_RADIANS + 1;
  {$EXTERNALSYM TPMU_Seconds}
  TPMU_Pounds      = TPMU_SECONDS + 1;
  {$EXTERNALSYM TPMU_Pounds}
  TPMU_Grams       = TPMU_POUNDS + 1;
  {$EXTERNALSYM TPMU_Grams}

  DISPID_ITName                      = DISPID_VALUE;
  {$EXTERNALSYM DISPID_ITName}
  DISPID_ITPlugAndPlayId             = 1;
  {$EXTERNALSYM DISPID_ITPlugAndPlayId}
  DISPID_ITPropertyMetrics           = DISPID_ITPLUGANDPLAYID + 1;
  {$EXTERNALSYM DISPID_ITPropertyMetrics}
  DISPID_ITIsPacketPropertySupported = DISPID_ITPROPERTYMETRICS + 1;
  {$EXTERNALSYM DISPID_ITIsPacketPropertySupported}
  DISPID_ITMaximumInputRectangle     = DISPID_ITISPACKETPROPERTYSUPPORTED + 1;
  {$EXTERNALSYM DISPID_ITMaximumInputRectangle}
  DISPID_ITHardwareCapabilities      = DISPID_ITMAXIMUMINPUTRECTANGLE + 1;
  {$EXTERNALSYM DISPID_ITHardwareCapabilities}

  TDK_Mouse = 0;
  {$EXTERNALSYM TDK_Mouse}
  TDK_Pen   = TDK_MOUSE + 1;
  {$EXTERNALSYM TDK_Pen}
  TDK_Touch = TDK_PEN + 1;
  {$EXTERNALSYM TDK_Touch}

  DISPID_IT2DeviceKind = DISPID_VALUE;
  {$EXTERNALSYM DISPID_IT2DeviceKind}

  DISPID_IT3IsMultiTouch   = DISPID_VALUE;
  {$EXTERNALSYM DISPID_IT3IsMultiTouch}
  DISPID_IT3MaximumCursors = DISPID_IT3ISMULTITOUCH + 1;
  {$EXTERNALSYM DISPID_IT3MaximumCursors}

  DISPID_ITs_NewEnum                  = DISPID_NEWENUM;
  {$EXTERNALSYM DISPID_ITs_NewEnum}
  DISPID_ITsItem                      = DISPID_VALUE;
  {$EXTERNALSYM DISPID_ITsItem}
  DISPID_ITsDefaultTablet             = 1;
  {$EXTERNALSYM DISPID_ITsDefaultTablet}
  DISPID_ITsCount                     = DISPID_ITSDEFAULTTABLET + 1;
  {$EXTERNALSYM DISPID_ITsCount}
  DISPID_ITsIsPacketPropertySupported = DISPID_ITSCOUNT + 1;
  {$EXTERNALSYM DISPID_ITsIsPacketPropertySupported}

  DISPID_ISDInkIndex                            = 1;
  {$EXTERNALSYM DISPID_ISDInkIndex}
  DISPID_ISDID                                  = DISPID_ISDINKINDEX + 1;
  {$EXTERNALSYM DISPID_ISDID}
  DISPID_ISDGetBoundingBox                      = DISPID_ISDID + 1;
  {$EXTERNALSYM DISPID_ISDGetBoundingBox}
  DISPID_ISDDrawingAttributes                   = DISPID_ISDGETBOUNDINGBOX + 1;
  {$EXTERNALSYM DISPID_ISDDrawingAttributes}
  DISPID_ISDFindIntersections                   = DISPID_ISDDRAWINGATTRIBUTES + 1;
  {$EXTERNALSYM DISPID_ISDFindIntersections}
  DISPID_ISDGetRectangleIntersections           = DISPID_ISDFINDINTERSECTIONS + 1;
  {$EXTERNALSYM DISPID_ISDGetRectangleIntersections}
  DISPID_ISDClip                                = DISPID_ISDGETRECTANGLEINTERSECTIONS + 1;
  {$EXTERNALSYM DISPID_ISDClip}
  DISPID_ISDHitTestCircle                       = DISPID_ISDCLIP + 1;
  {$EXTERNALSYM DISPID_ISDHitTestCircle}
  DISPID_ISDNearestPoint                        = DISPID_ISDHITTESTCIRCLE + 1;
  {$EXTERNALSYM DISPID_ISDNearestPoint}
  DISPID_ISDSplit                               = DISPID_ISDNEARESTPOINT + 1;
  {$EXTERNALSYM DISPID_ISDSplit}
  DISPID_ISDExtendedProperties                  = DISPID_ISDSPLIT + 1;
  {$EXTERNALSYM DISPID_ISDExtendedProperties}
  DISPID_ISDInk                                 = DISPID_ISDEXTENDEDPROPERTIES + 1;
  {$EXTERNALSYM DISPID_ISDInk}
  DISPID_ISDBezierPoints                        = DISPID_ISDINK + 1;
  {$EXTERNALSYM DISPID_ISDBezierPoints}
  DISPID_ISDPolylineCusps                       = DISPID_ISDBEZIERPOINTS + 1;
  {$EXTERNALSYM DISPID_ISDPolylineCusps}
  DISPID_ISDBezierCusps                         = DISPID_ISDPOLYLINECUSPS + 1;
  {$EXTERNALSYM DISPID_ISDBezierCusps}
  DISPID_ISDSelfIntersections                   = DISPID_ISDBEZIERCUSPS + 1;
  {$EXTERNALSYM DISPID_ISDSelfIntersections}
  DISPID_ISDPacketCount                         = DISPID_ISDSELFINTERSECTIONS + 1;
  {$EXTERNALSYM DISPID_ISDPacketCount}
  DISPID_ISDPacketSize                          = DISPID_ISDPACKETCOUNT + 1;
  {$EXTERNALSYM DISPID_ISDPacketSize}
  DISPID_ISDPacketDescription                   = DISPID_ISDPACKETSIZE + 1;
  {$EXTERNALSYM DISPID_ISDPacketDescription}
  DISPID_ISDDeleted                             = DISPID_ISDPACKETDESCRIPTION + 1;
  {$EXTERNALSYM DISPID_ISDDeleted}
  DISPID_ISDGetPacketDescriptionPropertyMetrics = DISPID_ISDDELETED + 1;
  {$EXTERNALSYM DISPID_ISDGetPacketDescriptionPropertyMetrics}
  DISPID_ISDGetPoints                           = DISPID_ISDGETPACKETDESCRIPTIONPROPERTYMETRICS + 1;
  {$EXTERNALSYM DISPID_ISDGetPoints}
  DISPID_ISDSetPoints                           = DISPID_ISDGETPOINTS + 1;
  {$EXTERNALSYM DISPID_ISDSetPoints}
  DISPID_ISDGetPacketData                       = DISPID_ISDSETPOINTS + 1;
  {$EXTERNALSYM DISPID_ISDGetPacketData}
  DISPID_ISDGetPacketValuesByProperty           = DISPID_ISDGETPACKETDATA + 1;
  {$EXTERNALSYM DISPID_ISDGetPacketValuesByProperty}
  DISPID_ISDSetPacketValuesByProperty           = DISPID_ISDGETPACKETVALUESBYPROPERTY + 1;
  {$EXTERNALSYM DISPID_ISDSetPacketValuesByProperty}
  DISPID_ISDGetFlattenedBezierPoints            = DISPID_ISDSETPACKETVALUESBYPROPERTY + 1;
  {$EXTERNALSYM DISPID_ISDGetFlattenedBezierPoints}
  DISPID_ISDScaleToRectangle                    = DISPID_ISDGETFLATTENEDBEZIERPOINTS + 1;
  {$EXTERNALSYM DISPID_ISDScaleToRectangle}
  DISPID_ISDTransform                           = DISPID_ISDSCALETORECTANGLE + 1;
  {$EXTERNALSYM DISPID_ISDTransform}
  DISPID_ISDMove                                = DISPID_ISDTRANSFORM + 1;
  {$EXTERNALSYM DISPID_ISDMove}
  DISPID_ISDRotate                              = DISPID_ISDMOVE + 1;
  {$EXTERNALSYM DISPID_ISDRotate}
  DISPID_ISDShear                               = DISPID_ISDROTATE + 1;
  {$EXTERNALSYM DISPID_ISDShear}
  DISPID_ISDScale                               = DISPID_ISDSHEAR + 1;
  {$EXTERNALSYM DISPID_ISDScale}

  DISPID_ISs_NewEnum                = DISPID_NEWENUM;
  {$EXTERNALSYM DISPID_ISs_NewEnum}
  DISPID_ISsItem                    = DISPID_VALUE;
  {$EXTERNALSYM DISPID_ISsItem}
  DISPID_ISsCount                   = 1;
  {$EXTERNALSYM DISPID_ISsCount}
  DISPID_ISsValid                   = DISPID_ISSCOUNT + 1;
  {$EXTERNALSYM DISPID_ISsValid}
  DISPID_ISsInk                     = DISPID_ISSVALID + 1;
  {$EXTERNALSYM DISPID_ISsInk}
  DISPID_ISsAdd                     = DISPID_ISSINK + 1;
  {$EXTERNALSYM DISPID_ISsAdd}
  DISPID_ISsAddStrokes              = DISPID_ISSADD + 1;
  {$EXTERNALSYM DISPID_ISsAddStrokes}
  DISPID_ISsRemove                  = DISPID_ISSADDSTROKES + 1;
  {$EXTERNALSYM DISPID_ISsRemove}
  DISPID_ISsRemoveStrokes           = DISPID_ISSREMOVE + 1;
  {$EXTERNALSYM DISPID_ISsRemoveStrokes}
  DISPID_ISsToString                = DISPID_ISSREMOVESTROKES + 1;
  {$EXTERNALSYM DISPID_ISsToString}
  DISPID_ISsModifyDrawingAttributes = DISPID_ISSTOSTRING + 1;
  {$EXTERNALSYM DISPID_ISsModifyDrawingAttributes}
  DISPID_ISsGetBoundingBox          = DISPID_ISSMODIFYDRAWINGATTRIBUTES + 1;
  {$EXTERNALSYM DISPID_ISsGetBoundingBox}
  DISPID_ISsScaleToRectangle        = DISPID_ISSGETBOUNDINGBOX + 1;
  {$EXTERNALSYM DISPID_ISsScaleToRectangle}
  DISPID_ISsTransform               = DISPID_ISSSCALETORECTANGLE + 1;
  {$EXTERNALSYM DISPID_ISsTransform}
  DISPID_ISsMove                    = DISPID_ISSTRANSFORM + 1;
  {$EXTERNALSYM DISPID_ISsMove}
  DISPID_ISsRotate                  = DISPID_ISSMOVE + 1;
  {$EXTERNALSYM DISPID_ISsRotate}
  DISPID_ISsShear                   = DISPID_ISSROTATE + 1;
  {$EXTERNALSYM DISPID_ISsShear}
  DISPID_ISsScale                   = DISPID_ISSSHEAR + 1;
  {$EXTERNALSYM DISPID_ISsScale}
  DISPID_ISsClip                    = DISPID_ISSSCALE + 1;
  {$EXTERNALSYM DISPID_ISsClip}
  DISPID_ISsRecognitionResult       = DISPID_ISSCLIP + 1;
  {$EXTERNALSYM DISPID_ISsRecognitionResult}
  DISPID_ISsRemoveRecognitionResult = DISPID_ISSRECOGNITIONRESULT + 1;
  {$EXTERNALSYM DISPID_ISsRemoveRecognitionResult}

  DISPID_ICSs_NewEnum = DISPID_NEWENUM;
  {$EXTERNALSYM DISPID_ICSs_NewEnum}
  DISPID_ICSsItem     = DISPID_VALUE;
  {$EXTERNALSYM DISPID_ICSsItem}
  DISPID_ICSsCount    = 1;
  {$EXTERNALSYM DISPID_ICSsCount}
  DISPID_ICSsAdd      = DISPID_ICSSCOUNT + 1;
  {$EXTERNALSYM DISPID_ICSsAdd}
  DISPID_ICSsRemove   = DISPID_ICSSADD + 1;
  {$EXTERNALSYM DISPID_ICSsRemove}
  DISPID_ICSsClear    = DISPID_ICSSREMOVE + 1;
  {$EXTERNALSYM DISPID_ICSsClear}

  DISPID_SEStrokesAdded   = 1;
  {$EXTERNALSYM DISPID_SEStrokesAdded}
  DISPID_SEStrokesRemoved = DISPID_SESTROKESADDED + 1;
  {$EXTERNALSYM DISPID_SEStrokesRemoved}

  DISPID_IStrokes                    = 1;
  {$EXTERNALSYM DISPID_IStrokes}
  DISPID_IExtendedProperties         = DISPID_ISTROKES + 1;
  {$EXTERNALSYM DISPID_IExtendedProperties}
  DISPID_IGetBoundingBox             = DISPID_IEXTENDEDPROPERTIES + 1;
  {$EXTERNALSYM DISPID_IGetBoundingBox}
  DISPID_IDeleteStrokes              = DISPID_IGETBOUNDINGBOX + 1;
  {$EXTERNALSYM DISPID_IDeleteStrokes}
  DISPID_IDeleteStroke               = DISPID_IDELETESTROKES + 1;
  {$EXTERNALSYM DISPID_IDeleteStroke}
  DISPID_IExtractStrokes             = DISPID_IDELETESTROKE + 1;
  {$EXTERNALSYM DISPID_IExtractStrokes}
  DISPID_IExtractWithRectangle       = DISPID_IEXTRACTSTROKES + 1;
  {$EXTERNALSYM DISPID_IExtractWithRectangle}
  DISPID_IDirty                      = DISPID_IEXTRACTWITHRECTANGLE + 1;
  {$EXTERNALSYM DISPID_IDirty}
  DISPID_ICustomStrokes              = DISPID_IDIRTY + 1;
  {$EXTERNALSYM DISPID_ICustomStrokes}
  DISPID_IClone                      = DISPID_ICUSTOMSTROKES + 1;
  {$EXTERNALSYM DISPID_IClone}
  DISPID_IHitTestCircle              = DISPID_ICLONE + 1;
  {$EXTERNALSYM DISPID_IHitTestCircle}
  DISPID_IHitTestWithRectangle       = DISPID_IHITTESTCIRCLE + 1;
  {$EXTERNALSYM DISPID_IHitTestWithRectangle}
  DISPID_IHitTestWithLasso           = DISPID_IHITTESTWITHRECTANGLE + 1;
  {$EXTERNALSYM DISPID_IHitTestWithLasso}
  DISPID_INearestPoint               = DISPID_IHITTESTWITHLASSO + 1;
  {$EXTERNALSYM DISPID_INearestPoint}
  DISPID_ICreateStrokes              = DISPID_INEARESTPOINT + 1;
  {$EXTERNALSYM DISPID_ICreateStrokes}
  DISPID_ICreateStroke               = DISPID_ICREATESTROKES + 1;
  {$EXTERNALSYM DISPID_ICreateStroke}
  DISPID_IAddStrokesAtRectangle      = DISPID_ICREATESTROKE + 1;
  {$EXTERNALSYM DISPID_IAddStrokesAtRectangle}
  DISPID_IClip                       = DISPID_IADDSTROKESATRECTANGLE + 1;
  {$EXTERNALSYM DISPID_IClip}
  DISPID_ISave                       = DISPID_ICLIP + 1;
  {$EXTERNALSYM DISPID_ISave}
  DISPID_ILoad                       = DISPID_ISAVE + 1;
  {$EXTERNALSYM DISPID_ILoad}
  DISPID_ICreateStrokeFromPoints     = DISPID_ILOAD + 1;
  {$EXTERNALSYM DISPID_ICreateStrokeFromPoints}
  DISPID_IClipboardCopyWithRectangle = DISPID_ICREATESTROKEFROMPOINTS + 1;
  {$EXTERNALSYM DISPID_IClipboardCopyWithRectangle}
  DISPID_IClipboardCopy              = DISPID_ICLIPBOARDCOPYWITHRECTANGLE + 1;
  {$EXTERNALSYM DISPID_IClipboardCopy}
  DISPID_ICanPaste                   = DISPID_ICLIPBOARDCOPY + 1;
  {$EXTERNALSYM DISPID_ICanPaste}
  DISPID_IClipboardPaste             = DISPID_ICANPASTE + 1;
  {$EXTERNALSYM DISPID_IClipboardPaste}

  DISPID_IEInkAdded   = 1;
  {$EXTERNALSYM DISPID_IEInkAdded}
  DISPID_IEInkDeleted = DISPID_IEINKADDED + 1;
  {$EXTERNALSYM DISPID_IEInkDeleted}

  DISPID_IRGetViewTransform          = 1;
  {$EXTERNALSYM DISPID_IRGetViewTransform}
  DISPID_IRSetViewTransform          = DISPID_IRGETVIEWTRANSFORM + 1;
  {$EXTERNALSYM DISPID_IRSetViewTransform}
  DISPID_IRGetObjectTransform        = DISPID_IRSETVIEWTRANSFORM + 1;
  {$EXTERNALSYM DISPID_IRGetObjectTransform}
  DISPID_IRSetObjectTransform        = DISPID_IRGETOBJECTTRANSFORM + 1;
  {$EXTERNALSYM DISPID_IRSetObjectTransform}
  DISPID_IRDraw                      = DISPID_IRSETOBJECTTRANSFORM + 1;
  {$EXTERNALSYM DISPID_IRDraw}
  DISPID_IRDrawStroke                = DISPID_IRDRAW + 1;
  {$EXTERNALSYM DISPID_IRDrawStroke}
  DISPID_IRPixelToInkSpace           = DISPID_IRDRAWSTROKE + 1;
  {$EXTERNALSYM DISPID_IRPixelToInkSpace}
  DISPID_IRInkSpaceToPixel           = DISPID_IRPIXELTOINKSPACE + 1;
  {$EXTERNALSYM DISPID_IRInkSpaceToPixel}
  DISPID_IRPixelToInkSpaceFromPoints = DISPID_IRINKSPACETOPIXEL + 1;
  {$EXTERNALSYM DISPID_IRPixelToInkSpaceFromPoints}
  DISPID_IRInkSpaceToPixelFromPoints = DISPID_IRPIXELTOINKSPACEFROMPOINTS + 1;
  {$EXTERNALSYM DISPID_IRInkSpaceToPixelFromPoints}
  DISPID_IRMeasure                   = DISPID_IRINKSPACETOPIXELFROMPOINTS + 1;
  {$EXTERNALSYM DISPID_IRMeasure}
  DISPID_IRMeasureStroke             = DISPID_IRMEASURE + 1;
  {$EXTERNALSYM DISPID_IRMeasureStroke}
  DISPID_IRMove                      = DISPID_IRMEASURESTROKE + 1;
  {$EXTERNALSYM DISPID_IRMove}
  DISPID_IRRotate                    = DISPID_IRMOVE + 1;
  {$EXTERNALSYM DISPID_IRRotate}
  DISPID_IRScale                     = DISPID_IRROTATE + 1;
  {$EXTERNALSYM DISPID_IRScale}

  ICEI_DefaultEvents    = -1;
  {$EXTERNALSYM ICEI_DefaultEvents}
  ICEI_CursorDown       = ICEI_DEFAULTEVENTS + 1;
  {$EXTERNALSYM ICEI_CursorDown}
  ICEI_Stroke           = ICEI_CURSORDOWN + 1;
  {$EXTERNALSYM ICEI_Stroke}
  ICEI_NewPackets       = ICEI_STROKE + 1;
  {$EXTERNALSYM ICEI_NewPackets}
  ICEI_NewInAirPackets  = ICEI_NEWPACKETS + 1;
  {$EXTERNALSYM ICEI_NewInAirPackets}
  ICEI_CursorButtonDown = ICEI_NEWINAIRPACKETS + 1;
  {$EXTERNALSYM ICEI_CursorButtonDown}
  ICEI_CursorButtonUp   = ICEI_CURSORBUTTONDOWN + 1;
  {$EXTERNALSYM ICEI_CursorButtonUp}
  ICEI_CursorInRange    = ICEI_CURSORBUTTONUP + 1;
  {$EXTERNALSYM ICEI_CursorInRange}
  ICEI_CursorOutOfRange = ICEI_CURSORINRANGE + 1;
  {$EXTERNALSYM ICEI_CursorOutOfRange}
  ICEI_SystemGesture    = ICEI_CURSOROUTOFRANGE + 1;
  {$EXTERNALSYM ICEI_SystemGesture}
  ICEI_TabletAdded      = ICEI_SYSTEMGESTURE + 1;
  {$EXTERNALSYM ICEI_TabletAdded}
  ICEI_TabletRemoved    = ICEI_TABLETADDED + 1;
  {$EXTERNALSYM ICEI_TabletRemoved}
  ICEI_MouseDown        = ICEI_TABLETREMOVED + 1;
  {$EXTERNALSYM ICEI_MouseDown}
  ICEI_MouseMove        = ICEI_MOUSEDOWN + 1;
  {$EXTERNALSYM ICEI_MouseMove}
  ICEI_MouseUp          = ICEI_MOUSEMOVE + 1;
  {$EXTERNALSYM ICEI_MouseUp}
  ICEI_MouseWheel       = ICEI_MOUSEUP + 1;
  {$EXTERNALSYM ICEI_MouseWheel}
  ICEI_DblClick         = ICEI_MOUSEWHEEL + 1;
  {$EXTERNALSYM ICEI_DblClick}
  ICEI_AllEvents        = ICEI_DBLCLICK + 1;
  {$EXTERNALSYM ICEI_AllEvents}

  IMF_Left   = 1;
  {$EXTERNALSYM IMF_Left}
  IMF_Right  = 2;
  {$EXTERNALSYM IMF_Right}
  IMF_Middle = 4;
  {$EXTERNALSYM IMF_Middle}

  IKM_Shift   = $1;
  {$EXTERNALSYM IKM_Shift}
  IKM_Control = $2;
  {$EXTERNALSYM IKM_Control}
  IKM_Alt     = $4;
  {$EXTERNALSYM IKM_Alt}

  DISPID_ICEStroke              = 1;
  {$EXTERNALSYM DISPID_ICEStroke}
  DISPID_ICECursorDown          = DISPID_ICESTROKE + 1;
  {$EXTERNALSYM DISPID_ICECursorDown}
  DISPID_ICENewPackets          = DISPID_ICECURSORDOWN + 1;
  {$EXTERNALSYM DISPID_ICENewPackets}
  DISPID_ICENewInAirPackets     = DISPID_ICENEWPACKETS + 1;
  {$EXTERNALSYM DISPID_ICENewInAirPackets}
  DISPID_ICECursorButtonDown    = DISPID_ICENEWINAIRPACKETS + 1;
  {$EXTERNALSYM DISPID_ICECursorButtonDown}
  DISPID_ICECursorButtonUp      = DISPID_ICECURSORBUTTONDOWN + 1;
  {$EXTERNALSYM DISPID_ICECursorButtonUp}
  DISPID_ICECursorInRange       = DISPID_ICECURSORBUTTONUP + 1;
  {$EXTERNALSYM DISPID_ICECursorInRange}
  DISPID_ICECursorOutOfRange    = DISPID_ICECURSORINRANGE + 1;
  {$EXTERNALSYM DISPID_ICECursorOutOfRange}
  DISPID_ICESystemGesture       = DISPID_ICECURSOROUTOFRANGE + 1;
  {$EXTERNALSYM DISPID_ICESystemGesture}
  DISPID_ICEGesture             = DISPID_ICESYSTEMGESTURE + 1;
  {$EXTERNALSYM DISPID_ICEGesture}
  DISPID_ICETabletAdded         = DISPID_ICEGESTURE + 1;
  {$EXTERNALSYM DISPID_ICETabletAdded}
  DISPID_ICETabletRemoved       = DISPID_ICETABLETADDED + 1;
  {$EXTERNALSYM DISPID_ICETabletRemoved}
  DISPID_IOEPainting            = DISPID_ICETABLETREMOVED + 1;
  {$EXTERNALSYM DISPID_IOEPainting}
  DISPID_IOEPainted             = DISPID_IOEPAINTING + 1;
  {$EXTERNALSYM DISPID_IOEPainted}
  DISPID_IOESelectionChanging   = DISPID_IOEPAINTED + 1;
  {$EXTERNALSYM DISPID_IOESelectionChanging}
  DISPID_IOESelectionChanged    = DISPID_IOESELECTIONCHANGING + 1;
  {$EXTERNALSYM DISPID_IOESelectionChanged}
  DISPID_IOESelectionMoving     = DISPID_IOESELECTIONCHANGED + 1;
  {$EXTERNALSYM DISPID_IOESelectionMoving}
  DISPID_IOESelectionMoved      = DISPID_IOESELECTIONMOVING + 1;
  {$EXTERNALSYM DISPID_IOESelectionMoved}
  DISPID_IOESelectionResizing   = DISPID_IOESELECTIONMOVED + 1;
  {$EXTERNALSYM DISPID_IOESelectionResizing}
  DISPID_IOESelectionResized    = DISPID_IOESELECTIONRESIZING + 1;
  {$EXTERNALSYM DISPID_IOESelectionResized}
  DISPID_IOEStrokesDeleting     = DISPID_IOESELECTIONRESIZED + 1;
  {$EXTERNALSYM DISPID_IOEStrokesDeleting}
  DISPID_IOEStrokesDeleted      = DISPID_IOESTROKESDELETING + 1;
  {$EXTERNALSYM DISPID_IOEStrokesDeleted}
  DISPID_IPEChangeUICues        = DISPID_IOESTROKESDELETED + 1;
  {$EXTERNALSYM DISPID_IPEChangeUICues}
  DISPID_IPEClick               = DISPID_IPECHANGEUICUES + 1;
  {$EXTERNALSYM DISPID_IPEClick}
  DISPID_IPEDblClick            = DISPID_IPECLICK + 1;
  {$EXTERNALSYM DISPID_IPEDblClick}
  DISPID_IPEInvalidated         = DISPID_IPEDBLCLICK + 1;
  {$EXTERNALSYM DISPID_IPEInvalidated}
  DISPID_IPEMouseDown           = DISPID_IPEINVALIDATED + 1;
  {$EXTERNALSYM DISPID_IPEMouseDown}
  DISPID_IPEMouseEnter          = DISPID_IPEMOUSEDOWN + 1;
  {$EXTERNALSYM DISPID_IPEMouseEnter}
  DISPID_IPEMouseHover          = DISPID_IPEMOUSEENTER + 1;
  {$EXTERNALSYM DISPID_IPEMouseHover}
  DISPID_IPEMouseLeave          = DISPID_IPEMOUSEHOVER + 1;
  {$EXTERNALSYM DISPID_IPEMouseLeave}
  DISPID_IPEMouseMove           = DISPID_IPEMOUSELEAVE + 1;
  {$EXTERNALSYM DISPID_IPEMouseMove}
  DISPID_IPEMouseUp             = DISPID_IPEMOUSEMOVE + 1;
  {$EXTERNALSYM DISPID_IPEMouseUp}
  DISPID_IPEMouseWheel          = DISPID_IPEMOUSEUP + 1;
  {$EXTERNALSYM DISPID_IPEMouseWheel}
  DISPID_IPESizeModeChanged     = DISPID_IPEMOUSEWHEEL + 1;
  {$EXTERNALSYM DISPID_IPESizeModeChanged}
  DISPID_IPEStyleChanged        = DISPID_IPESIZEMODECHANGED + 1;
  {$EXTERNALSYM DISPID_IPEStyleChanged}
  DISPID_IPESystemColorsChanged = DISPID_IPESTYLECHANGED + 1;
  {$EXTERNALSYM DISPID_IPESystemColorsChanged}
  DISPID_IPEKeyDown             = DISPID_IPESYSTEMCOLORSCHANGED + 1;
  {$EXTERNALSYM DISPID_IPEKeyDown}
  DISPID_IPEKeyPress            = DISPID_IPEKEYDOWN + 1;
  {$EXTERNALSYM DISPID_IPEKeyPress}
  DISPID_IPEKeyUp               = DISPID_IPEKEYPRESS + 1;
  {$EXTERNALSYM DISPID_IPEKeyUp}
  DISPID_IPEResize              = DISPID_IPEKEYUP + 1;
  {$EXTERNALSYM DISPID_IPEResize}
  DISPID_IPESizeChanged         = DISPID_IPERESIZE + 1;
  {$EXTERNALSYM DISPID_IPESizeChanged}

  IOEM_Ink    = 0;
  {$EXTERNALSYM IOEM_Ink}
  IOEM_Delete = 1;
  {$EXTERNALSYM IOEM_Delete}
  IOEM_Select = 2;
  {$EXTERNALSYM IOEM_Select}
  IOEM_Last = IOEM_Select + 1;
  {$EXTERNALSYM IOEM_Last}

  IOAM_Behind  = 0;
  {$EXTERNALSYM IOAM_Behind}
  IOAM_InFront = 1;
  {$EXTERNALSYM IOAM_InFront}
  IOAM_Last = IOAM_InFront+1;
  {$EXTERNALSYM IOAM_Last}

  IPSM_AutoSize     = 0;
  {$EXTERNALSYM IPSM_AutoSize}
  IPSM_CenterImage  = 1;
  {$EXTERNALSYM IPSM_CenterImage}
  IPSM_Normal       = 2;
  {$EXTERNALSYM IPSM_Normal}
  IPSM_StretchImage = 3;
  {$EXTERNALSYM IPSM_StretchImage}
  IPSM_Last = IPSM_StretchImage + 1;
  {$EXTERNALSYM IPSM_Last}

  IOERM_StrokeErase = 0;
  {$EXTERNALSYM IOERM_StrokeErase}
  IOERM_PointErase  = 1;
  {$EXTERNALSYM IOERM_PointErase}
  IOERM_Last = IOERM_PointErase + 1;
  {$EXTERNALSYM IOERM_Last}

  ICM_InkOnly       = 0;
  {$EXTERNALSYM ICM_InkOnly}
  ICM_GestureOnly   = ICM_INKONLY + 1;
  {$EXTERNALSYM ICM_GestureOnly}
  ICM_InkAndGesture = ICM_GESTUREONLY + 1;
  {$EXTERNALSYM ICM_InkAndGesture}
  ICM_Last = ICM_InkAndGesture;
  {$EXTERNALSYM ICM_Last}

  DISPID_ICEnabled                        = 1;
  {$EXTERNALSYM DISPID_ICEnabled}
  DISPID_ICHwnd                           = DISPID_ICENABLED + 1;
  {$EXTERNALSYM DISPID_ICHwnd}
  DISPID_ICPaint                          = DISPID_ICHWND + 1;
  {$EXTERNALSYM DISPID_ICPaint}
  DISPID_ICText                           = DISPID_ICPAINT + 1;
  {$EXTERNALSYM DISPID_ICText}
  DISPID_ICDefaultDrawingAttributes       = DISPID_ICTEXT + 1;
  {$EXTERNALSYM DISPID_ICDefaultDrawingAttributes}
  DISPID_ICRenderer                       = DISPID_ICDEFAULTDRAWINGATTRIBUTES + 1;
  {$EXTERNALSYM DISPID_ICRenderer}
  DISPID_ICInk                            = DISPID_ICRENDERER + 1;
  {$EXTERNALSYM DISPID_ICInk}
  DISPID_ICAutoRedraw                     = DISPID_ICINK + 1;
  {$EXTERNALSYM DISPID_ICAutoRedraw}
  DISPID_ICCollectingInk                  = DISPID_ICAUTOREDRAW + 1;
  {$EXTERNALSYM DISPID_ICCollectingInk}
  DISPID_ICSetEventInterest               = DISPID_ICCOLLECTINGINK + 1;
  {$EXTERNALSYM DISPID_ICSetEventInterest}
  DISPID_ICGetEventInterest               = DISPID_ICSETEVENTINTEREST + 1;
  {$EXTERNALSYM DISPID_ICGetEventInterest}
  DISPID_IOEditingMode                    = DISPID_ICGETEVENTINTEREST + 1;
  {$EXTERNALSYM DISPID_IOEditingMode}
  DISPID_IOSelection                      = DISPID_IOEDITINGMODE + 1;
  {$EXTERNALSYM DISPID_IOSelection}
  DISPID_IOAttachMode                     = DISPID_IOSELECTION + 1;
  {$EXTERNALSYM DISPID_IOAttachMode}
  DISPID_IOHitTestSelection               = DISPID_IOATTACHMODE + 1;
  {$EXTERNALSYM DISPID_IOHitTestSelection}
  DISPID_IODraw                           = DISPID_IOHITTESTSELECTION + 1;
  {$EXTERNALSYM DISPID_IODraw}
  DISPID_IPPicture                        = DISPID_IODRAW + 1;
  {$EXTERNALSYM DISPID_IPPicture}
  DISPID_IPSizeMode                       = DISPID_IPPICTURE + 1;
  {$EXTERNALSYM DISPID_IPSizeMode}
  DISPID_IPBackColor                      = DISPID_IPSIZEMODE + 1;
  {$EXTERNALSYM DISPID_IPBackColor}
  DISPID_ICCursors                        = DISPID_IPBACKCOLOR + 1;
  {$EXTERNALSYM DISPID_ICCursors}
  DISPID_ICMarginX                        = DISPID_ICCURSORS + 1;
  {$EXTERNALSYM DISPID_ICMarginX}
  DISPID_ICMarginY                        = DISPID_ICMARGINX + 1;
  {$EXTERNALSYM DISPID_ICMarginY}
  DISPID_ICSetWindowInputRectangle        = DISPID_ICMARGINY + 1;
  {$EXTERNALSYM DISPID_ICSetWindowInputRectangle}
  DISPID_ICGetWindowInputRectangle        = DISPID_ICSETWINDOWINPUTRECTANGLE + 1;
  {$EXTERNALSYM DISPID_ICGetWindowInputRectangle}
  DISPID_ICTablet                         = DISPID_ICGETWINDOWINPUTRECTANGLE + 1;
  {$EXTERNALSYM DISPID_ICTablet}
  DISPID_ICSetAllTabletsMode              = DISPID_ICTABLET + 1;
  {$EXTERNALSYM DISPID_ICSetAllTabletsMode}
  DISPID_ICSetSingleTabletIntegratedMode  = DISPID_ICSETALLTABLETSMODE + 1;
  {$EXTERNALSYM DISPID_ICSetSingleTabletIntegratedMode}
  DISPID_ICCollectionMode                 = DISPID_ICSETSINGLETABLETINTEGRATEDMODE + 1;
  {$EXTERNALSYM DISPID_ICCollectionMode}
  DISPID_ICSetGestureStatus               = DISPID_ICCOLLECTIONMODE + 1;
  {$EXTERNALSYM DISPID_ICSetGestureStatus}
  DISPID_ICGetGestureStatus               = DISPID_ICSETGESTURESTATUS + 1;
  {$EXTERNALSYM DISPID_ICGetGestureStatus}
  DISPID_ICDynamicRendering               = DISPID_ICGETGESTURESTATUS + 1;
  {$EXTERNALSYM DISPID_ICDynamicRendering}
  DISPID_ICDesiredPacketDescription       = DISPID_ICDYNAMICRENDERING + 1;
  {$EXTERNALSYM DISPID_ICDesiredPacketDescription}
  DISPID_IOEraserMode                     = DISPID_ICDESIREDPACKETDESCRIPTION + 1;
  {$EXTERNALSYM DISPID_IOEraserMode}
  DISPID_IOEraserWidth                    = DISPID_IOERASERMODE + 1;
  {$EXTERNALSYM DISPID_IOEraserWidth}
  DISPID_ICMouseIcon                      = DISPID_IOERASERWIDTH + 1;
  {$EXTERNALSYM DISPID_ICMouseIcon}
  DISPID_ICMousePointer                   = DISPID_ICMOUSEICON + 1;
  {$EXTERNALSYM DISPID_ICMousePointer}
  DISPID_IPInkEnabled                     = DISPID_ICMOUSEPOINTER + 1;
  {$EXTERNALSYM DISPID_IPInkEnabled}
  DISPID_ICSupportHighContrastInk         = DISPID_IPINKENABLED + 1;
  {$EXTERNALSYM DISPID_ICSupportHighContrastInk}
  DISPID_IOSupportHighContrastSelectionUI = DISPID_ICSUPPORTHIGHCONTRASTINK + 1;
  {$EXTERNALSYM DISPID_IOSupportHighContrastSelectionUI}

  DISPID_RecoClsid                      = 1;
  {$EXTERNALSYM DISPID_RecoClsid}
  DISPID_RecoName                       = DISPID_RECOCLSID + 1;
  {$EXTERNALSYM DISPID_RecoName}
  DISPID_RecoVendor                     = DISPID_RECONAME + 1;
  {$EXTERNALSYM DISPID_RecoVendor}
  DISPID_RecoCapabilities               = DISPID_RECOVENDOR + 1;
  {$EXTERNALSYM DISPID_RecoCapabilities}
  DISPID_RecoLanguageID                 = DISPID_RECOCAPABILITIES + 1;
  {$EXTERNALSYM DISPID_RecoLanguageID}
  DISPID_RecoPreferredPacketDescription = DISPID_RECOLANGUAGEID + 1;
  {$EXTERNALSYM DISPID_RecoPreferredPacketDescription}
  DISPID_RecoCreateRecognizerContext    = DISPID_RECOPREFERREDPACKETDESCRIPTION + 1;
  {$EXTERNALSYM DISPID_RecoCreateRecognizerContext}
  DISPID_RecoSupportedProperties        = DISPID_RECOCREATERECOGNIZERCONTEXT + 1;
  {$EXTERNALSYM DISPID_RecoSupportedProperties}

  IRC_DontCare                     = 1;
  {$EXTERNALSYM IRC_DontCare}
  IRC_Object                       = 2;
  {$EXTERNALSYM IRC_Object}
  IRC_FreeInput                    = 4;
  {$EXTERNALSYM IRC_FreeInput}
  IRC_LinedInput                   = 8;
  {$EXTERNALSYM IRC_LinedInput}
  IRC_BoxedInput                   = 16;
  {$EXTERNALSYM IRC_BoxedInput}
  IRC_CharacterAutoCompletionInput = 32;
  {$EXTERNALSYM IRC_CharacterAutoCompletionInput}
  IRC_RightAndDown                 = 64;
  {$EXTERNALSYM IRC_RightAndDown}
  IRC_LeftAndDown                  = 128;
  {$EXTERNALSYM IRC_LeftAndDown}
  IRC_DownAndLeft                  = 256;
  {$EXTERNALSYM IRC_DownAndLeft}
  IRC_DownAndRight                 = 512;
  {$EXTERNALSYM IRC_DownAndRight}
  IRC_ArbitraryAngle               = 1024;
  {$EXTERNALSYM IRC_ArbitraryAngle}
  IRC_Lattice                      = 2048;
  {$EXTERNALSYM IRC_Lattice}
  IRC_AdviseInkChange              = 4096;
  {$EXTERNALSYM IRC_AdviseInkChange}
  IRC_StrokeReorder                = 8192;
  {$EXTERNALSYM IRC_StrokeReorder}
  IRC_Personalizable               = 16384;
  {$EXTERNALSYM IRC_Personalizable}

  DISPID_RecoId            = DISPID_VALUE;
  {$EXTERNALSYM DISPID_RecoId}
  DISPID_RecoUnicodeRanges = 1;
  {$EXTERNALSYM DISPID_RecoUnicodeRanges}

  DISPID_IRecos_NewEnum             = DISPID_NEWENUM;
  {$EXTERNALSYM DISPID_IRecos_NewEnum}
  DISPID_IRecosItem                 = DISPID_VALUE;
  {$EXTERNALSYM DISPID_IRecosItem}
  DISPID_IRecosCount                = 1;
  {$EXTERNALSYM DISPID_IRecosCount}
  DISPID_IRecosGetDefaultRecognizer = DISPID_IRECOSCOUNT + 1;
  {$EXTERNALSYM DISPID_IRecosGetDefaultRecognizer}

  IRCACM_Full   = 0;
  {$EXTERNALSYM IRCACM_Full}
  IRCACM_Prefix = IRCACM_FULL + 1;
  {$EXTERNALSYM IRCACM_Prefix}
  IRCACM_Random = IRCACM_PREFIX + 1;
  {$EXTERNALSYM IRCACM_Random}

  IRM_None                   = 0;
  {$EXTERNALSYM IRM_None}
  IRM_WordModeOnly           = $1;
  {$EXTERNALSYM IRM_WordModeOnly}
  IRM_Coerce                 = $2;
  {$EXTERNALSYM IRM_Coerce}
  IRM_TopInkBreaksOnly       = $4;
  {$EXTERNALSYM IRM_TopInkBreaksOnly}
  IRM_PrefixOk               = $8;
  {$EXTERNALSYM IRM_PrefixOk}
  IRM_LineMode               = $10;
  {$EXTERNALSYM IRM_LineMode}
  IRM_DisablePersonalization = $20;
  {$EXTERNALSYM IRM_DisablePersonalization}
  IRM_AutoSpace              = $40;
  {$EXTERNALSYM IRM_AutoSpace}
  IRM_Max                    = $80;
  {$EXTERNALSYM IRM_Max}

  DISPID_IRERecognitionWithAlternates = 1;
  {$EXTERNALSYM DISPID_IRERecognitionWithAlternates}
  DISPID_IRERecognition               = DISPID_IRERECOGNITIONWITHALTERNATES + 1;
  {$EXTERNALSYM DISPID_IRERecognition}

  DISPID_IRecoCtx_Strokes                           = 1;
  {$EXTERNALSYM DISPID_IRecoCtx_Strokes}
  DISPID_IRecoCtx_CharacterAutoCompletionMode       = DISPID_IRECOCTX_STROKES + 1;
  {$EXTERNALSYM DISPID_IRecoCtx_CharacterAutoCompletionMode}
  DISPID_IRecoCtx_Factoid                           = DISPID_IRECOCTX_CHARACTERAUTOCOMPLETIONMODE + 1;
  {$EXTERNALSYM DISPID_IRecoCtx_Factoid}
  DISPID_IRecoCtx_WordList                          = DISPID_IRECOCTX_FACTOID + 1;
  {$EXTERNALSYM DISPID_IRecoCtx_WordList}
  DISPID_IRecoCtx_Recognizer                        = DISPID_IRECOCTX_WORDLIST + 1;
  {$EXTERNALSYM DISPID_IRecoCtx_Recognizer}
  DISPID_IRecoCtx_Guide                             = DISPID_IRECOCTX_RECOGNIZER + 1;
  {$EXTERNALSYM DISPID_IRecoCtx_Guide}
  DISPID_IRecoCtx_Flags                             = DISPID_IRECOCTX_GUIDE + 1;
  {$EXTERNALSYM DISPID_IRecoCtx_Flags}
  DISPID_IRecoCtx_PrefixText                        = DISPID_IRECOCTX_FLAGS + 1;
  {$EXTERNALSYM DISPID_IRecoCtx_PrefixText}
  DISPID_IRecoCtx_SuffixText                        = DISPID_IRECOCTX_PREFIXTEXT + 1;
  {$EXTERNALSYM DISPID_IRecoCtx_SuffixText}
  DISPID_IRecoCtx_StopRecognition                   = DISPID_IRECOCTX_SUFFIXTEXT + 1;
  {$EXTERNALSYM DISPID_IRecoCtx_StopRecognition}
  DISPID_IRecoCtx_Clone                             = DISPID_IRECOCTX_STOPRECOGNITION + 1;
  {$EXTERNALSYM DISPID_IRecoCtx_Clone}
  DISPID_IRecoCtx_Recognize                         = DISPID_IRECOCTX_CLONE + 1;
  {$EXTERNALSYM DISPID_IRecoCtx_Recognize}
  DISPID_IRecoCtx_StopBackgroundRecognition         = DISPID_IRECOCTX_RECOGNIZE + 1;
  {$EXTERNALSYM DISPID_IRecoCtx_StopBackgroundRecognition}
  DISPID_IRecoCtx_EndInkInput                       = DISPID_IRECOCTX_STOPBACKGROUNDRECOGNITION + 1;
  {$EXTERNALSYM DISPID_IRecoCtx_EndInkInput}
  DISPID_IRecoCtx_BackgroundRecognize               = DISPID_IRECOCTX_ENDINKINPUT + 1;
  {$EXTERNALSYM DISPID_IRecoCtx_BackgroundRecognize}
  DISPID_IRecoCtx_BackgroundRecognizeWithAlternates = DISPID_IRECOCTX_BACKGROUNDRECOGNIZE + 1;
  {$EXTERNALSYM DISPID_IRecoCtx_BackgroundRecognizeWithAlternates}
  DISPID_IRecoCtx_IsStringSupported                 = DISPID_IRECOCTX_BACKGROUNDRECOGNIZEWITHALTERNATES + 1;
  {$EXTERNALSYM DISPID_IRecoCtx_IsStringSupported}

  DISPID_IRecoCtx2_EnabledUnicodeRanges = DISPID_VALUE;
  {$EXTERNALSYM DISPID_IRecoCtx2_EnabledUnicodeRanges}

  IRAS_Start        = 0;
  {$EXTERNALSYM IRAS_Start}
  IRAS_DefaultCount = 10;
  {$EXTERNALSYM IRAS_DefaultCount}
  IRAS_All          = -1;
  {$EXTERNALSYM IRAS_All}

  DISPID_InkRecognitionResult_TopString               = 1;
  {$EXTERNALSYM DISPID_InkRecognitionResult_TopString}
  DISPID_InkRecognitionResult_TopAlternate            = DISPID_INKRECOGNITIONRESULT_TOPSTRING + 1;
  {$EXTERNALSYM DISPID_InkRecognitionResult_TopAlternate}
  DISPID_InkRecognitionResult_Strokes                 = DISPID_INKRECOGNITIONRESULT_TOPALTERNATE + 1;
  {$EXTERNALSYM DISPID_InkRecognitionResult_Strokes}
  DISPID_InkRecognitionResult_TopConfidence           = DISPID_INKRECOGNITIONRESULT_STROKES + 1;
  {$EXTERNALSYM DISPID_InkRecognitionResult_TopConfidence}
  DISPID_InkRecognitionResult_AlternatesFromSelection = DISPID_INKRECOGNITIONRESULT_TOPCONFIDENCE + 1;
  {$EXTERNALSYM DISPID_InkRecognitionResult_AlternatesFromSelection}
  DISPID_InkRecognitionResult_ModifyTopAlternate      = DISPID_INKRECOGNITIONRESULT_ALTERNATESFROMSELECTION + 1;
  {$EXTERNALSYM DISPID_InkRecognitionResult_ModifyTopAlternate}
  DISPID_InkRecognitionResult_SetResultOnStrokes      = DISPID_INKRECOGNITIONRESULT_MODIFYTOPALTERNATE + 1;
  {$EXTERNALSYM DISPID_InkRecognitionResult_SetResultOnStrokes}

  DISPID_InkRecoAlternate_String                               = 1;
  {$EXTERNALSYM DISPID_InkRecoAlternate_String}
  DISPID_InkRecoAlternate_LineNumber                           = DISPID_INKRECOALTERNATE_STRING + 1;
  {$EXTERNALSYM DISPID_InkRecoAlternate_LineNumber}
  DISPID_InkRecoAlternate_Baseline                             = DISPID_INKRECOALTERNATE_LINENUMBER + 1;
  {$EXTERNALSYM DISPID_InkRecoAlternate_Baseline}
  DISPID_InkRecoAlternate_Midline                              = DISPID_INKRECOALTERNATE_BASELINE + 1;
  {$EXTERNALSYM DISPID_InkRecoAlternate_Midline}
  DISPID_InkRecoAlternate_Ascender                             = DISPID_INKRECOALTERNATE_MIDLINE + 1;
  {$EXTERNALSYM DISPID_InkRecoAlternate_Ascender}
  DISPID_InkRecoAlternate_Descender                            = DISPID_INKRECOALTERNATE_ASCENDER + 1;
  {$EXTERNALSYM DISPID_InkRecoAlternate_Descender}
  DISPID_InkRecoAlternate_Confidence                           = DISPID_INKRECOALTERNATE_DESCENDER + 1;
  {$EXTERNALSYM DISPID_InkRecoAlternate_Confidence}
  DISPID_InkRecoAlternate_Strokes                              = DISPID_INKRECOALTERNATE_CONFIDENCE + 1;
  {$EXTERNALSYM DISPID_InkRecoAlternate_Strokes}
  DISPID_InkRecoAlternate_GetStrokesFromStrokeRanges           = DISPID_INKRECOALTERNATE_STROKES + 1;
  {$EXTERNALSYM DISPID_InkRecoAlternate_GetStrokesFromStrokeRanges}
  DISPID_InkRecoAlternate_GetStrokesFromTextRange              = DISPID_INKRECOALTERNATE_GETSTROKESFROMSTROKERANGES + 1;
  {$EXTERNALSYM DISPID_InkRecoAlternate_GetStrokesFromTextRange}
  DISPID_InkRecoAlternate_GetTextRangeFromStrokes              = DISPID_INKRECOALTERNATE_GETSTROKESFROMTEXTRANGE + 1;
  {$EXTERNALSYM DISPID_InkRecoAlternate_GetTextRangeFromStrokes}
  DISPID_InkRecoAlternate_GetPropertyValue                     = DISPID_INKRECOALTERNATE_GETTEXTRANGEFROMSTROKES + 1;
  {$EXTERNALSYM DISPID_InkRecoAlternate_GetPropertyValue}
  DISPID_InkRecoAlternate_LineAlternates                       = DISPID_INKRECOALTERNATE_GETPROPERTYVALUE + 1;
  {$EXTERNALSYM DISPID_InkRecoAlternate_LineAlternates}
  DISPID_InkRecoAlternate_ConfidenceAlternates                 = DISPID_INKRECOALTERNATE_LINEALTERNATES + 1;
  {$EXTERNALSYM DISPID_InkRecoAlternate_ConfidenceAlternates}
  DISPID_InkRecoAlternate_AlternatesWithConstantPropertyValues = DISPID_INKRECOALTERNATE_CONFIDENCEALTERNATES + 1;
  {$EXTERNALSYM DISPID_InkRecoAlternate_AlternatesWithConstantPropertyValues}

  DISPID_InkRecognitionAlternates_NewEnum = DISPID_NEWENUM;
  {$EXTERNALSYM DISPID_InkRecognitionAlternates_NewEnum}
  DISPID_InkRecognitionAlternates_Item    = DISPID_VALUE;
  {$EXTERNALSYM DISPID_InkRecognitionAlternates_Item}
  DISPID_InkRecognitionAlternates_Count   = 1;
  {$EXTERNALSYM DISPID_InkRecognitionAlternates_Count}
  DISPID_InkRecognitionAlternates_Strokes = DISPID_INKRECOGNITIONALTERNATES_COUNT + 1;
  {$EXTERNALSYM DISPID_InkRecognitionAlternates_Strokes}

  DISPID_IRGWritingBox = 1;
  {$EXTERNALSYM DISPID_IRGWritingBox}
  DISPID_IRGDrawnBox   = DISPID_IRGWRITINGBOX + 1;
  {$EXTERNALSYM DISPID_IRGDrawnBox}
  DISPID_IRGRows       = DISPID_IRGDRAWNBOX + 1;
  {$EXTERNALSYM DISPID_IRGRows}
  DISPID_IRGColumns    = DISPID_IRGROWS + 1;
  {$EXTERNALSYM DISPID_IRGColumns}
  DISPID_IRGMidline    = DISPID_IRGCOLUMNS + 1;
  {$EXTERNALSYM DISPID_IRGMidline}
  DISPID_IRGGuideData  = DISPID_IRGMIDLINE + 1;
  {$EXTERNALSYM DISPID_IRGGuideData}

  DISPID_InkWordList_AddWord    = 0;
  {$EXTERNALSYM DISPID_InkWordList_AddWord}
  DISPID_InkWordList_RemoveWord = DISPID_INKWORDLIST_ADDWORD + 1;
  {$EXTERNALSYM DISPID_InkWordList_RemoveWord}
  DISPID_InkWordList_Merge      = DISPID_INKWORDLIST_REMOVEWORD + 1;
  {$EXTERNALSYM DISPID_InkWordList_Merge}

  DISPID_InkWordList2_AddWords = DISPID_INKWORDLIST_MERGE + 1;
  {$EXTERNALSYM DISPID_InkWordList2_AddWords}

  InkMinTransparencyValue           = 0;
  {$EXTERNALSYM InkMinTransparencyValue}
  InkMaxTransparencyValue           = 255;
  {$EXTERNALSYM InkMaxTransparencyValue}

  InkCollectorClipInkToMargin       = 0;
  {$EXTERNALSYM InkCollectorClipInkToMargin}
  InkCollectorDefaultMargin         = -2147483647 - 1;
  {$EXTERNALSYM InkCollectorDefaultMargin}



{ Forward Declarations }

type
  IInkRectangle = interface;
  IInkExtendedProperty = interface;
  IInkExtendedProperties = interface;
  IInkDrawingAttributes = interface;
  IInkTransform = interface;
  IInkGesture = interface;
  IInkCursor = interface;
  IInkCursors = interface;
  IInkCursorButton = interface;
  IInkCursorButtons = interface;
  IInkTablet = interface;
  IInkTablet2 = interface;
  IInkTablet3 = interface;
  IInkTablets = interface;
  IInkStrokeDisp = interface;
  IInkStrokes = interface;
  IInkCustomStrokes = interface;
  _IInkStrokesEvents = interface;
  IInkDisp = interface;
  _IInkEvents = interface;
  IInkRenderer = interface;
  IInkCollector = interface;
  _IInkCollectorEvents = interface;
  IInkOverlay = interface;
  _IInkOverlayEvents = interface;
  IInkPicture = interface;
  _IInkPictureEvents = interface;
  IInkRecognizer = interface;
  IInkRecognizer2 = interface;
  IInkRecognizers = interface;
  _IInkRecognitionEvents = interface;
  IInkRecognizerContext = interface;
  IInkRecognizerContext2 = interface;
  IInkRecognitionResult = interface;
  IInkRecognitionAlternate = interface;
  IInkRecognitionAlternates = interface;
  IInkRecognizerGuide = interface;
  IInkWordList = interface;
  IInkWordList2 = interface;
  IInk = interface;
  IInkLineInfo = interface;
  ISketchInk = interface;


  INK_METRIC_FLAGS = type Integer;
  {$EXTERNALSYM INK_METRIC_FLAGS}

  GET_DANDIDATE_FLAGS = type Integer;
  {$EXTERNALSYM GET_DANDIDATE_FLAGS}

  INKMETRIC = record
    iHeight: Integer;
    iFontAscent: Integer;
    iFontDescent: Integer;
    dwFlags: DWORD;
    color: COLORREF;
  end;
  {$EXTERNALSYM INKMETRIC}
  tagINKMETRIC = INKMETRIC;
  {$EXTERNALSYM tagINKMETRIC}
  TInkMetric = INKMETRIC;
  PInkMetric = ^TInkMetric;

  InkSelectionConstants = type Integer;
  {$EXTERNALSYM InkSelectionConstants}

  InkBoundingBoxMode = type Integer;
  {$EXTERNALSYM InkBoundingBoxMode}

  InkExtractFlags = type Integer;
  {$EXTERNALSYM InkExtractFlags}

  InkPersistenceFormat = type Integer;
  {$EXTERNALSYM InkPersistenceFormat}

  InkPersistenceCompressionMode = type Integer;
  {$EXTERNALSYM InkPersistenceCompressionMode}

  InkPenTip = type Integer;
  {$EXTERNALSYM InkPenTip}

  InkRasterOperation = type Integer;
  {$EXTERNALSYM InkRasterOperation}

  InkMousePointer = type Integer;
  {$EXTERNALSYM InkMousePointer}

  InkClipboardModes = type Integer;
  {$EXTERNALSYM InkClipboardModes}

  InkClipboardFormats = type Integer;
  {$EXTERNALSYM InkClipboardFormats}

  SelectionHitResult = type Integer;
  {$EXTERNALSYM SelectionHitResult}

  InkRecognitionStatus = type Integer;
  {$EXTERNALSYM InkRecognitionStatus}

  DISPID_InkRectangle = type Integer;
  {$EXTERNALSYM DISPID_InkRectangle}

  DISPID_InkExtendedProperty = type Integer;
  {$EXTERNALSYM DISPID_InkExtendedProperty}

  DISPID_InkExtendedProperties = type Integer;
  {$EXTERNALSYM DISPID_InkExtendedProperties}

  DISPID_InkDrawingAttributes = type Integer;
  {$EXTERNALSYM DISPID_InkDrawingAttributes}

  DISPID_InkTransform = type Integer;
  {$EXTERNALSYM DISPID_InkTransform}

  InkApplicationGesture = type Integer;
  {$EXTERNALSYM InkApplicationGesture}

  InkSystemGesture = type Integer;
  {$EXTERNALSYM InkSystemGesture}

  InkRecognitionConfidence = type Integer;
  {$EXTERNALSYM InkRecognitionConfidence}

  DISPID_InkGesture = type Integer;
  {$EXTERNALSYM DISPID_InkGesture}

  DISPID_InkCursor = type Integer;
  {$EXTERNALSYM DISPID_InkCursor}

  DISPID_InkCursors = type Integer;
  {$EXTERNALSYM DISPID_InkCursors}

  InkCursorButtonState = type Integer;
  {$EXTERNALSYM InkCursorButtonState}

  DISPID_InkCursorButton = type Integer;
  {$EXTERNALSYM DISPID_InkCursorButton}

  DISPID_InkCursorButtons = type Integer;
  {$EXTERNALSYM DISPID_InkCursorButtons}

  TabletHardwareCapabilities = type Integer;
  {$EXTERNALSYM TabletHardwareCapabilities}

  TabletPropertyMetricUnit = type Integer;
  {$EXTERNALSYM TabletPropertyMetricUnit}

  DISPID_InkTablet = type Integer;
  {$EXTERNALSYM DISPID_InkTablet}

  TabletDeviceKind = type Integer;
  {$EXTERNALSYM TabletDeviceKind}

  DISPID_InkTablet2 = type Integer;
  {$EXTERNALSYM DISPID_InkTablet2}

  DISPID_InkTablet3 = type Integer;
  {$EXTERNALSYM DISPID_InkTablet3}

  DISPID_InkTablets = type Integer;
  {$EXTERNALSYM DISPID_InkTablets}

  DISPID_InkStrokeDisp = type Integer;
  {$EXTERNALSYM DISPID_InkStrokeDisp}

  DISPID_InkStrokes = type Integer;
  {$EXTERNALSYM DISPID_InkStrokes}

  DISPID_InkCustomStrokes = type Integer;
  {$EXTERNALSYM DISPID_InkCustomStrokes}

  DISPID_StrokeEvent = type Integer;
  {$EXTERNALSYM DISPID_StrokeEvent}

  DISPID_Ink = type Integer;
  {$EXTERNALSYM DISPID_Ink}

  DISPID_InkEvent = type Integer;
  {$EXTERNALSYM DISPID_InkEvent}

  DISPID_InkRenderer = type Integer;
  {$EXTERNALSYM DISPID_InkRenderer}

  InkCollectorEventInterest = type Integer;
  {$EXTERNALSYM InkCollectorEventInterest}

  InkMouseButton = type Integer;
  {$EXTERNALSYM InkMouseButton}

  InkShiftKeyModifierFlags = type Integer;
  {$EXTERNALSYM InkShiftKeyModifierFlags}

  DISPID_InkCollectorEvent = type Integer;
  {$EXTERNALSYM DISPID_InkCollectorEvent}

  InkOverlayEditingMode = type Integer;
  {$EXTERNALSYM InkOverlayEditingMode}

  InkOverlayAttachMode = type Integer;
  {$EXTERNALSYM InkOverlayAttachMode}

  InkPictureSizeMode = type Integer;
  {$EXTERNALSYM InkPictureSizeMode}

  InkOverlayEraserMode = type Integer;
  {$EXTERNALSYM InkOverlayEraserMode}

  InkCollectionMode = type Integer;
  {$EXTERNALSYM InkCollectionMode}

  DISPID_InkCollector = type Integer;
  {$EXTERNALSYM DISPID_InkCollector}

  DISPID_InkRecognizer = type Integer;
  {$EXTERNALSYM DISPID_InkRecognizer}

  InkRecognizerCapabilities = type Integer;
  {$EXTERNALSYM InkRecognizerCapabilities}

  DISPID_InkRecognizer2 = type Integer;
  {$EXTERNALSYM DISPID_InkRecognizer2}

  DISPID_InkRecognizers = type Integer;
  {$EXTERNALSYM DISPID_InkRecognizers}

  InkRecognizerCharacterAutoCompletionMode = type Integer;
  {$EXTERNALSYM InkRecognizerCharacterAutoCompletionMode}

  InkRecognitionModes = type Integer;
  {$EXTERNALSYM InkRecognitionModes}

  DISPID_InkRecognitionEvent = type Integer;
  {$EXTERNALSYM DISPID_InkRecognitionEvent}

  DISPID_InkRecoContext = type Integer;
  {$EXTERNALSYM DISPID_InkRecoContext}

  DISPID_InkRecoContext2 = type Integer;
  {$EXTERNALSYM DISPID_InkRecoContext2}

  InkRecognitionAlternatesSelection = type Integer;
  {$EXTERNALSYM InkRecognitionAlternatesSelection}

  DISPID_InkRecognitionResult = type Integer;
  {$EXTERNALSYM DISPID_InkRecognitionResult}

  DISPID_InkRecoAlternate = type Integer;
  {$EXTERNALSYM DISPID_InkRecoAlternate}

  DISPID_InkRecognitionAlternates = type Integer;
  {$EXTERNALSYM DISPID_InkRecognitionAlternates}

  _InkRecoGuide = record
    rectWritingBox: TRect;
    rectDrawnBox: TRect;
    cRows: Integer;
    cColumns: Integer;
    midline: Integer;
  end;
  {$EXTERNALSYM _InkRecoGuide}
  InkRecoGuide = _InkRecoGuide;
  {$EXTERNALSYM InkRecoGuide}
  TInkRecoGuide = InkRecoGuide;
  PInkRecoGuide = ^TInkRecoGuide;

  DISPID_InkRecognizerGuide = type Integer;
  {$EXTERNALSYM DISPID_InkRecognizerGuide}

  DISPID_InkWordList = type Integer;
  {$EXTERNALSYM DISPID_InkWordList}

  DISPID_InkWordList2 = type Integer;
  {$EXTERNALSYM DISPID_InkWordList2}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(IInkRectangle);'}
  IInkRectangle = interface(IDispatch) 
    [SID_IInkRectangle]
    function get_Top(var Units: Integer): HRESULT; stdcall;
    function put_Top(Units: Integer): HRESULT; stdcall;
    function get_Left(var Units: Integer): HRESULT; stdcall;
    function put_Left(Units: Integer): HRESULT; stdcall;
    function get_Bottom(var Units: Integer): HRESULT; stdcall;
    function put_Bottom(Units: Integer): HRESULT; stdcall;
    function get_Right(var Units: Integer): HRESULT; stdcall;
    function put_Right(Units: Integer): HRESULT; stdcall;
    function get_Data(var Rect: TRect): HRESULT; stdcall;
    function put_Data(Rect: TRect): HRESULT; stdcall;
    function GetRectangle(var Top: Integer; var Left: Integer; var Bottom: Integer;
      var Right: Integer): HRESULT; stdcall;
    function SetRectangle(Top: Integer; Left: Integer; Bottom: Integer;
      Right: Integer): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInkRectangle}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(IInkExtendedProperty);'}
  IInkExtendedProperty = interface(IDispatch)
    [SID_IInkExtendedProperty]
    function get_Guid(var Guid: WideString): HRESULT; stdcall;
    function get_Data(var Data: Variant): HRESULT; stdcall;
    function put_Data(Data: Variant): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInkExtendedProperty}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(IInkExtendedProperties);'}
  IInkExtendedProperties = interface(IDispatch)
    [SID_IInkExtendedProperties]
    function get_Count(var Count: Integer): HRESULT; stdcall;
    function get__NewEnum(var _NewEnum: IUnknown): HRESULT; stdcall;
    function Item(Identifier: Variant;
      var Item: IInkExtendedProperty): HRESULT; stdcall;
    function Add(Guid: WideString; Data: Variant;
      var InkExtendedProperty: IInkExtendedProperty): HRESULT; stdcall;
    function Remove(Identifier: Variant): HRESULT; stdcall;
    function Clear: HRESULT; stdcall;
    function DoesPropertyExist(Guid: WideString;
      var DoesPropertyExist: VARIANT_BOOL): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInkExtendedProperties}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(IInkDrawingAttributes);'}
  IInkDrawingAttributes = interface(IDispatch)
    [SID_IInkDrawingAttributes]
    function get_Color(var CurrentColor: Integer): HRESULT; stdcall;
    function put_Color(NewColor: Integer): HRESULT; stdcall;
    function get_Width(var CurrentWidth: Single): HRESULT; stdcall;
    function put_Width(NewWidth: Single): HRESULT; stdcall;
    function get_Height(var CurrentHeight: Single): HRESULT; stdcall;
    function put_Height(NewHeight: Single): HRESULT; stdcall;
    function get_FitToCurve(var Flag: VARIANT_BOOL): HRESULT; stdcall;
    function put_FitToCurve(Flag: VARIANT_BOOL): HRESULT; stdcall;
    function get_IgnorePressure(var Flag: VARIANT_BOOL): HRESULT; stdcall;
    function put_IgnorePressure(Flag: VARIANT_BOOL): HRESULT; stdcall;
    function get_AntiAliased(var Flag: VARIANT_BOOL): HRESULT; stdcall;
    function put_AntiAliased(Flag: VARIANT_BOOL): HRESULT; stdcall;
    function get_Transparency(var CurrentTransparency: Integer): HRESULT; stdcall;
    function put_Transparency(NewTransparency: Integer): HRESULT; stdcall;
    function get_RasterOperation(var CurrentRasterOperation: InkRasterOperation): HRESULT; stdcall;
    function put_RasterOperation(NewRasterOperation: InkRasterOperation): HRESULT; stdcall;
    function get_PenTip(var CurrentPenTip: InkPenTip): HRESULT; stdcall;
    function put_PenTip(NewPenTip: InkPenTip): HRESULT; stdcall;
    function get_ExtendedProperties(var Properties: IInkExtendedProperties): HRESULT; stdcall;
    function Clone(var DrawingAttributes: IInkDrawingAttributes): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInkDrawingAttributes}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(IInkTransform);'}
  IInkTransform = interface(IDispatch)
    [SID_IInkTransform]
    function Reset: HRESULT; stdcall;
    function Translate(HorizontalComponent: Single;
      VerticalComponent: Single): HRESULT; stdcall;
    function Rotate(Degrees: Single; x: Single = 0;
      y: Single = 0): HRESULT; stdcall;
    function Reflect(Horizontally: VARIANT_BOOL;
      Vertically: VARIANT_BOOL): HRESULT; stdcall;
    function Shear(HorizontalComponent: Single;
      VerticalComponent: Single): HRESULT; stdcall;
    function ScaleTransform(HorizontalMultiplier: Single;
      VerticalMultiplier: Single): HRESULT; stdcall;
    function GetTransform(var eM11: Single; var eM12: Single; var eM21: Single;
      var eM22: Single; var eDx: Single; var eDy: Single): HRESULT; stdcall;
    function SetTransform(eM11: Single; eM12: Single; eM21: Single; eM22: Single;
      eDx: Single; eDy: Single): HRESULT; stdcall;
    function get_eM11(var Value: Single): HRESULT; stdcall;
    function put_eM11(Value: Single): HRESULT; stdcall;
    function get_eM12(var Value: Single): HRESULT; stdcall;
    function put_eM12(Value: Single): HRESULT; stdcall;
    function get_eM21(var Value: Single): HRESULT; stdcall;
    function put_eM21(Value: Single): HRESULT; stdcall;
    function get_eM22(var Value: Single): HRESULT; stdcall;
    function put_eM22(Value: Single): HRESULT; stdcall;
    function get_eDx(var Value: Single): HRESULT; stdcall;
    function put_eDx(Value: Single): HRESULT; stdcall;
    function get_eDy(var Value: Single): HRESULT; stdcall;
    function put_eDy(Value: Single): HRESULT; stdcall;
    function get_Data(var XForm: XFORM): HRESULT; stdcall;
    function put_Data(XForm: XFORM): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInkTransform}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(IInkGesture);'}
  IInkGesture = interface(IDispatch)
    [SID_IInkGesture]
    function get_Confidence(var Confidence: InkRecognitionConfidence): HRESULT; stdcall;
    function get_Id(var Id: InkApplicationGesture): HRESULT; stdcall;
    function GetHotPoint(var X: Integer; var Y: Integer): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInkGesture}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(IInkCursor);'}
  IInkCursor = interface(IDispatch)
    [SID_IInkCursor]
    function get_Name(var Name: WideString): HRESULT; stdcall;
    function get_Id(var Id: Integer): HRESULT; stdcall;
    function get_Inverted(var Status: VARIANT_BOOL): HRESULT; stdcall;
    function get_DrawingAttributes(var Attributes: IInkDrawingAttributes): HRESULT; stdcall;
    function putref_DrawingAttributes(Attributes: IInkDrawingAttributes): HRESULT; stdcall;
    function get_Tablet(var Tablet: IInkTablet): HRESULT; stdcall;
    function get_Buttons(var Buttons: IInkCursorButtons): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInkCursor}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(IInkCursors);'}
  IInkCursors = interface(IDispatch)
    [SID_IInkCursors]
    function get_Count(var Count: Integer): HRESULT; stdcall;
    function get__NewEnum(var _NewEnum: IUnknown): HRESULT; stdcall;
    function Item(Index: Integer; var Cursor: IInkCursor): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInkCursors}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(IInkCursorButton);'}
  IInkCursorButton = interface(IDispatch) 
    [SID_IInkCursorButton]
    function get_Name(var Name: WideString): HRESULT; stdcall;
    function get_Id(var Id: WideString): HRESULT; stdcall;
    function get_State(var CurrentState: InkCursorButtonState): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInkCursorButton}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(IInkCursorButtons);'}
  IInkCursorButtons = interface(IDispatch)
    [SID_IInkCursorButtons]
    function get_Count(var Count: Integer): HRESULT; stdcall;
    function get__NewEnum(var _NewEnum: IUnknown): HRESULT; stdcall;
    function Item(Identifier: Variant;
      var Button: IInkCursorButton): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInkCursorButtons}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(IInkTablet);'}
  IInkTablet = interface(IDispatch)
    [SID_IInkTablet]
    function get_Name(var Name: WideString): HRESULT; stdcall;
    function get_PlugAndPlayId(var Id: WideString): HRESULT; stdcall;
    function get_MaximumInputRectangle(var Rectangle: IInkRectangle): HRESULT; stdcall;
    function get_HardwareCapabilities(var Capabilities: TabletHardwareCapabilities): HRESULT; stdcall;
    function IsPacketPropertySupported(packetPropertyName: WideString;
      var Supported: VARIANT_BOOL): HRESULT; stdcall;
    function GetPropertyMetrics(propertyName: WideString; var Minimum: Integer;
      var Maximum: Integer; var Units: TabletPropertyMetricUnit;
      var Resolution: Single): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInkTablet}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(IInkTablet2);'}
  IInkTablet2 = interface(IDispatch)
    [SID_IInkTablet2]
    function get_DeviceKind(var Kind: TabletDeviceKind): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInkTablet2}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(IInkTablet3);'}
  IInkTablet3 = interface(IDispatch)
    [SID_IInkTablet3]
    function get_IsMultiTouch(var pIsMultiTouch: VARIANT_BOOL): HRESULT; stdcall;
    function get_MaximumCursors(var pMaximumCursors: Cardinal): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInkTablet3}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(IInkTablets);'}
  IInkTablets = interface(IDispatch) 
    [SID_IInkTablets]
    function get_Count(var Count: Integer): HRESULT; stdcall;
    function get__NewEnum(var _NewEnum: IUnknown): HRESULT; stdcall;
    function get_DefaultTablet(var DefaultTablet: IInkTablet): HRESULT; stdcall;
    function Item(Index: Integer; var Tablet: IInkTablet): HRESULT; stdcall;
    function IsPacketPropertySupported(packetPropertyName: WideString;
      var Supported: VARIANT_BOOL): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInkTablets}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(IInkStrokeDisp);'}
  IInkStrokeDisp = interface(IDispatch)
    [SID_IInkStrokeDisp]
    function get_ID(var ID: Integer): HRESULT; stdcall;
    function get_BezierPoints(var Points: Variant): HRESULT; stdcall;
    function get_DrawingAttributes(var DrawAttrs: IInkDrawingAttributes): HRESULT; stdcall;
    function putref_DrawingAttributes(DrawAttrs: IInkDrawingAttributes): HRESULT; stdcall;
    function get_Ink(var Ink: IInkDisp): HRESULT; stdcall;
    function get_ExtendedProperties(var Properties: IInkExtendedProperties): HRESULT; stdcall;
    function get_PolylineCusps(var Cusps: Variant): HRESULT; stdcall;
    function get_BezierCusps(var Cusps: Variant): HRESULT; stdcall;
    function get_SelfIntersections(var Intersections: Variant): HRESULT; stdcall;
    function get_PacketCount(var plCount: Integer): HRESULT; stdcall;
    function get_PacketSize(var plSize: Integer): HRESULT; stdcall;
    function get_PacketDescription(var PacketDescription: Variant): HRESULT; stdcall;
    function get_Deleted(var Deleted: VARIANT_BOOL): HRESULT; stdcall;
    function GetBoundingBox(BoundingBoxMode: InkBoundingBoxMode;
      var Rectangle: IInkRectangle): HRESULT; stdcall;
    function FindIntersections(Strokes: IInkStrokes;
      var Intersections: Variant): HRESULT; stdcall;
    function GetRectangleIntersections(Rectangle: IInkRectangle;
      var Intersections: Variant): HRESULT; stdcall;
    function Clip(Rectangle: IInkRectangle): HRESULT; stdcall;
    function HitTestCircle(X: Integer; Y: Integer; Radius: Single;
      var Intersects: VARIANT_BOOL): HRESULT; stdcall;
    function NearestPoint(X: Integer; Y: Integer; var Distance: Single;
      var Point: Single): HRESULT; stdcall;
    function Split(SplitAt: Single;
      var NewStroke: IInkStrokeDisp): HRESULT; stdcall;
    function GetPacketDescriptionPropertyMetrics(PropertyName: WideString;
      var Minimum: Integer; var Maximum: Integer;
      var Units: TabletPropertyMetricUnit;
      var Resolution: Single): HRESULT; stdcall;
    function GetPoints(Index: Integer; Count: Integer;
      var Points: Variant): HRESULT; stdcall;
    function SetPoints(Points: Variant; Index: Integer; Count: Integer;
      var NumberOfPointsSet: Integer): HRESULT; stdcall;
    function GetPacketData(Index: Integer; Count: Integer;
      var PacketData: Variant): HRESULT; stdcall;
    function GetPacketValuesByProperty(PropertyName: WideString; Index: Integer;
      Count: Integer; var PacketValues: Variant): HRESULT; stdcall;
    function SetPacketValuesByProperty(bstrPropertyName: WideString;
      PacketValues: Variant; Index: Integer; Count: Integer;
      var NumberOfPacketsSet: Integer): HRESULT; stdcall;
    function GetFlattenedBezierPoints(FittingError: Integer;
      var FlattenedBezierPoints: Variant): HRESULT; stdcall;
    function Transform(Transform: IInkTransform;
      ApplyOnPenWidth: VARIANT_BOOL = 0): HRESULT; stdcall;
    function ScaleToRectangle(Rectangle: IInkRectangle): HRESULT; stdcall;
    function Move(HorizontalComponent: Single;
      VerticalComponent: Single): HRESULT; stdcall;
    function Rotate(Degrees: Single; x: Single = 0;
      y: Single = 0): HRESULT; stdcall;
    function Shear(HorizontalMultiplier: Single;
      VerticalMultiplier: Single): HRESULT; stdcall;
    function ScaleTransform(HorizontalMultiplier: Single;
      VerticalMultiplier: Single): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInkStrokeDisp}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(IInkStrokes);'}
  IInkStrokes = interface(IDispatch)
    [SID_IInkStrokes]
    function get_Count(var Count: Integer): HRESULT; stdcall;
    function get__NewEnum(var _NewEnum: IUnknown): HRESULT; stdcall;
    function get_Ink(var Ink: IInkDisp): HRESULT; stdcall;
    function get_RecognitionResult(var RecognitionResult: IInkRecognitionResult): HRESULT; stdcall;
    function ToString(var ToString: WideString): HRESULT; stdcall;
    function Item(Index: Integer; var Stroke: IInkStrokeDisp): HRESULT; stdcall;
    function Add(InkStroke: IInkStrokeDisp): HRESULT; stdcall;
    function AddStrokes(InkStrokes: IInkStrokes): HRESULT; stdcall;
    function Remove(InkStroke: IInkStrokeDisp): HRESULT; stdcall;
    function RemoveStrokes(InkStrokes: IInkStrokes): HRESULT; stdcall;
    function ModifyDrawingAttributes(DrawAttrs: IInkDrawingAttributes): HRESULT; stdcall;
    function GetBoundingBox(BoundingBoxMode: InkBoundingBoxMode;
      var BoundingBox: IInkRectangle): HRESULT; stdcall;
    function Transform(Transform: IInkTransform; ApplyOnPenWidth: VARIANT_BOOL = 0): HRESULT; stdcall;
    function ScaleToRectangle(Rectangle: IInkRectangle): HRESULT; stdcall;
    function Move(HorizontalComponent: Single; VerticalComponent: Single): HRESULT; stdcall;
    function Rotate(Degrees: Single; x: Single = 0; y: Single = 0): HRESULT; stdcall;
    function Shear(HorizontalMultiplier: Single; VerticalMultiplier: Single): HRESULT; stdcall;
    function ScaleTransform(HorizontalMultiplier: Single; VerticalMultiplier: Single): HRESULT; stdcall;
    function Clip(Rectangle: IInkRectangle): HRESULT; stdcall;
    function RemoveRecognitionResult: HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInkStrokes}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(IInkCustomStrokes);'}
  IInkCustomStrokes = interface(IDispatch)
    [SID_IInkCustomStrokes]
    function get_Count(var Count: Integer): HRESULT; stdcall;
    function get__NewEnum(var _NewEnum: IUnknown): HRESULT; stdcall;
    function Item(Identifier: Variant; var Strokes: IInkStrokes): HRESULT; stdcall;
    function Add(Name: WideString; Strokes: IInkStrokes): HRESULT; stdcall;
    function Remove(Identifier: Variant): HRESULT; stdcall;
    function Clear: HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInkCustomStrokes}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(_IInkStrokesEvents);'}
  _IInkStrokesEvents = interface(IDispatch)
    [SID__IInkStrokesEvents]
  end;
  {$EXTERNALSYM _IInkStrokesEvents}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(IInkDisp);'}
  IInkDisp = interface(IDispatch)
    [SID_IInkDisp]
    function get_Strokes(var Strokes: IInkStrokes): HRESULT; stdcall;
    function get_ExtendedProperties(var Properties: IInkExtendedProperties): HRESULT; stdcall;
    function get_Dirty(var Dirty: VARIANT_BOOL): HRESULT; stdcall;
    function put_Dirty(Dirty: VARIANT_BOOL): HRESULT; stdcall;
    function get_CustomStrokes(var ppunkInkCustomStrokes: IInkCustomStrokes): HRESULT; stdcall;
    function GetBoundingBox(BoundingBoxMode: InkBoundingBoxMode;
      var Rectangle: IInkRectangle): HRESULT; stdcall;
    function DeleteStrokes(Strokes: IInkStrokes = nil): HRESULT; stdcall;
    function DeleteStroke(Stroke: IInkStrokeDisp): HRESULT; stdcall;
    function ExtractStrokes(Strokes: IInkStrokes; ExtractFlags: InkExtractFlags;
      var ExtractedInk: IInkDisp): HRESULT; stdcall;
    function ExtractWithRectangle(Rectangle: IInkRectangle;
      extractFlags: InkExtractFlags; var ExtractedInk: IInkDisp): HRESULT; stdcall;
    function Clip(Rectangle: IInkRectangle): HRESULT; stdcall;
    function Clone(var NewInk: IInkDisp): HRESULT; stdcall;
    function HitTestCircle(X: Integer; Y: Integer; radius: Single;
      var Strokes: IInkStrokes): HRESULT; stdcall;
    function HitTestWithRectangle(SelectionRectangle: IInkRectangle;
      IntersectPercent: Single; var Strokes: IInkStrokes): HRESULT; stdcall;
    function HitTestWithLasso(Points: Variant; IntersectPercent: Single;
      var LassoPoints: Variant; var Strokes: IInkStrokes): HRESULT; stdcall;
    function NearestPoint(X: Integer; Y: Integer; var PointOnStroke: Single;
      var DistanceFromPacket: Single; var Stroke: IInkStrokeDisp): HRESULT; stdcall;
    function CreateStrokes(StrokeIds: Variant;
      var Strokes: IInkStrokes): HRESULT; stdcall;
    function AddStrokesAtRectangle(SourceStrokes: IInkStrokes;
      TargetRectangle: IInkRectangle): HRESULT; stdcall;
    function Save(PersistenceFormat: InkPersistenceFormat;
      CompressionMode: InkPersistenceCompressionMode;
      var Data: Variant): HRESULT; stdcall;
    function Load(Data: Variant): HRESULT; stdcall;
    function CreateStroke(PacketData: Variant; PacketDescription: Variant;
      var Stroke: IInkStrokeDisp): HRESULT; stdcall;
    function ClipboardCopyWithRectangle(Rectangle: IInkRectangle;
      ClipboardFormats: InkClipboardFormats; ClipboardModes: InkClipboardModes;
      var DataObject: IDataObject): HRESULT; stdcall;
    function ClipboardCopy(strokes: IInkStrokes; ClipboardFormats: InkClipboardFormats;
      ClipboardModes: InkClipboardModes; var DataObject: IDataObject): HRESULT; stdcall;
    function CanPaste(DataObject: IDataObject; var CanPaste: VARIANT_BOOL): HRESULT; stdcall;
    function ClipboardPaste(x: Integer; y: Integer; DataObject: IDataObject;
      var Strokes: IInkStrokes): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInkDisp}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(_IInkEvents);'}
  _IInkEvents = interface(IDispatch)
    [SID__IInkEvents]
  end;
  {$EXTERNALSYM _IInkEvents}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(IInkRenderer);'}
  IInkRenderer = interface(IDispatch)
    [SID_IInkRenderer]
    function GetViewTransform(ViewTransform: IInkTransform): HRESULT; stdcall;
    function SetViewTransform(ViewTransform: IInkTransform): HRESULT; stdcall;
    function GetObjectTransform(ObjectTransform: IInkTransform): HRESULT; stdcall;
    function SetObjectTransform(ObjectTransform: IInkTransform): HRESULT; stdcall;
    function Draw(hDC: LONG_PTR; Strokes: IInkStrokes): HRESULT; stdcall;
    function DrawStroke(hDC: LONG_PTR; Stroke: IInkStrokeDisp;
      DrawingAttributes: IInkDrawingAttributes = nil): HRESULT; stdcall;
    function PixelToInkSpace(hDC: LONG_PTR; var x: Integer; var y: Integer): HRESULT; stdcall;
    function InkSpaceToPixel(hdcDisplay: LONG_PTR; var x: Integer; var y: Integer): HRESULT; stdcall;
    function PixelToInkSpaceFromPoints(hDC: LONG_PTR; var Points: Variant): HRESULT; stdcall;
    function InkSpaceToPixelFromPoints(hDC: LONG_PTR; var Points: Variant): HRESULT; stdcall;
    function Measure(Strokes: IInkStrokes; var Rectangle: IInkRectangle): HRESULT; stdcall;
    function MeasureStroke(Stroke: IInkStrokeDisp; DrawingAttributes: IInkDrawingAttributes;
      var Rectangle: IInkRectangle): HRESULT; stdcall;
    function Move(HorizontalComponent: Single; VerticalComponent: Single): HRESULT; stdcall;
    function Rotate(Degrees: Single; x: Single = 0; y: Single = 0): HRESULT; stdcall;
    function ScaleTransform(HorizontalMultiplier: Single;
      VerticalMultiplier: Single; ApplyOnPenWidth: VARIANT_BOOL = -1): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInkRenderer}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(IInkCollector);'}
  IInkCollector = interface(IDispatch) 
    [SID_IInkCollector]
    function get_hWnd(var CurrentWindow: LONG_PTR): HRESULT; stdcall;
    function put_hWnd(NewWindow: LONG_PTR): HRESULT; stdcall;
    function get_Enabled(var Collecting: VARIANT_BOOL): HRESULT; stdcall;
    function put_Enabled(Collecting: VARIANT_BOOL): HRESULT; stdcall;
    function get_DefaultDrawingAttributes(var CurrentAttributes: IInkDrawingAttributes): HRESULT; stdcall;
    function putref_DefaultDrawingAttributes(NewAttributes: IInkDrawingAttributes): HRESULT; stdcall;
    function get_Renderer(var CurrentInkRenderer: IInkRenderer): HRESULT; stdcall;
    function putref_Renderer(NewInkRenderer: IInkRenderer): HRESULT; stdcall;
    function get_Ink(var Ink: IInkDisp): HRESULT; stdcall;
    function putref_Ink(NewInk: IInkDisp): HRESULT; stdcall;
    function get_AutoRedraw(var AutoRedraw: VARIANT_BOOL): HRESULT; stdcall;
    function put_AutoRedraw(AutoRedraw: VARIANT_BOOL): HRESULT; stdcall;
    function get_CollectingInk(var Collecting: VARIANT_BOOL): HRESULT; stdcall;
    function get_CollectionMode(var Mode: InkCollectionMode): HRESULT; stdcall;
    function put_CollectionMode(Mode: InkCollectionMode): HRESULT; stdcall;
    function get_DynamicRendering(var Enabled: VARIANT_BOOL): HRESULT; stdcall;
    function put_DynamicRendering(Enabled: VARIANT_BOOL): HRESULT; stdcall;
    function get_DesiredPacketDescription(var PacketGuids: Variant): HRESULT; stdcall;
    function put_DesiredPacketDescription(PacketGuids: Variant): HRESULT; stdcall;
    function get_MouseIcon(var MouseIcon: IPictureDisp): HRESULT; stdcall;
    function put_MouseIcon(MouseIcon: IPictureDisp): HRESULT; stdcall;
    function putref_MouseIcon(MouseIcon: IPictureDisp): HRESULT; stdcall;
    function get_MousePointer(var MousePointer: InkMousePointer): HRESULT; stdcall;
    function put_MousePointer(MousePointer: InkMousePointer): HRESULT; stdcall;
    function get_Cursors(var Cursors: IInkCursors): HRESULT; stdcall;
    function get_MarginX(var MarginX: Integer): HRESULT; stdcall;
    function put_MarginX(MarginX: Integer): HRESULT; stdcall;
    function get_MarginY(var MarginY: Integer): HRESULT; stdcall;
    function put_MarginY(MarginY: Integer): HRESULT; stdcall;
    function get_Tablet(var SingleTablet: IInkTablet): HRESULT; stdcall;
    function get_SupportHighContrastInk(var Support: VARIANT_BOOL): HRESULT; stdcall;
    function put_SupportHighContrastInk(Support: VARIANT_BOOL): HRESULT; stdcall;
    function SetGestureStatus(Gesture: InkApplicationGesture; Listen: VARIANT_BOOL): HRESULT; stdcall;
    function GetGestureStatus(Gesture: InkApplicationGesture; var Listening: VARIANT_BOOL): HRESULT; stdcall;
    function GetWindowInputRectangle(var WindowInputRectangle: IInkRectangle): HRESULT; stdcall;
    function SetWindowInputRectangle(WindowInputRectangle: IInkRectangle): HRESULT; stdcall;
    function SetAllTabletsMode(UseMouseForInput: VARIANT_BOOL = -1): HRESULT; stdcall;
    function SetSingleTabletIntegratedMode(Tablet: IInkTablet): HRESULT; stdcall;
    function GetEventInterest(EventId: InkCollectorEventInterest;
      var Listen: VARIANT_BOOL): HRESULT; stdcall;
    function SetEventInterest(EventId: InkCollectorEventInterest;
      Listen: VARIANT_BOOL): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInkCollector}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(_IInkCollectorEvents);'}
  _IInkCollectorEvents = interface(IDispatch)
    [SID__IInkCollectorEvents]
  end;
  {$EXTERNALSYM _IInkCollectorEvents}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(IInkOverlay);'}
  IInkOverlay = interface(IDispatch)
    [SID_IInkOverlay]
    function get_hWnd(var CurrentWindow: LONG_PTR): HRESULT; stdcall;
    function put_hWnd(NewWindow: LONG_PTR): HRESULT; stdcall;
    function get_Enabled(var Collecting: VARIANT_BOOL): HRESULT; stdcall;
    function put_Enabled(Collecting: VARIANT_BOOL): HRESULT; stdcall;
    function get_DefaultDrawingAttributes(var CurrentAttributes: IInkDrawingAttributes): HRESULT; stdcall;
    function putref_DefaultDrawingAttributes(NewAttributes: IInkDrawingAttributes): HRESULT; stdcall;
    function get_Renderer(var CurrentInkRenderer: IInkRenderer): HRESULT; stdcall;
    function putref_Renderer(NewInkRenderer: IInkRenderer): HRESULT; stdcall;
    function get_Ink(var Ink: IInkDisp): HRESULT; stdcall;
    function putref_Ink(NewInk: IInkDisp): HRESULT; stdcall;
    function get_AutoRedraw(var AutoRedraw: VARIANT_BOOL): HRESULT; stdcall;
    function put_AutoRedraw(AutoRedraw: VARIANT_BOOL): HRESULT; stdcall;
    function get_CollectingInk(var Collecting: VARIANT_BOOL): HRESULT; stdcall;
    function get_CollectionMode(var Mode: InkCollectionMode): HRESULT; stdcall;
    function put_CollectionMode(Mode: InkCollectionMode): HRESULT; stdcall;
    function get_DynamicRendering(var Enabled: VARIANT_BOOL): HRESULT; stdcall;
    function put_DynamicRendering(Enabled: VARIANT_BOOL): HRESULT; stdcall;
    function get_DesiredPacketDescription(var PacketGuids: Variant): HRESULT; stdcall;
    function put_DesiredPacketDescription(PacketGuids: Variant): HRESULT; stdcall;
    function get_MouseIcon(var MouseIcon: IPictureDisp): HRESULT; stdcall;
    function put_MouseIcon(MouseIcon: IPictureDisp): HRESULT; stdcall;
    function putref_MouseIcon(MouseIcon: IPictureDisp): HRESULT; stdcall;
    function get_MousePointer(var MousePointer: InkMousePointer): HRESULT; stdcall;
    function put_MousePointer(MousePointer: InkMousePointer): HRESULT; stdcall;
    function get_EditingMode(var EditingMode: InkOverlayEditingMode): HRESULT; stdcall;
    function put_EditingMode(EditingMode: InkOverlayEditingMode): HRESULT; stdcall;
    function get_Selection(var Selection: IInkStrokes): HRESULT; stdcall;
    function put_Selection(Selection: IInkStrokes): HRESULT; stdcall;
    function get_EraserMode(var EraserMode: InkOverlayEraserMode): HRESULT; stdcall;
    function put_EraserMode(EraserMode: InkOverlayEraserMode): HRESULT; stdcall;
    function get_EraserWidth(var EraserWidth: Integer): HRESULT; stdcall;
    function put_EraserWidth(newEraserWidth: Integer): HRESULT; stdcall;
    function get_AttachMode(var AttachMode: InkOverlayAttachMode): HRESULT; stdcall;
    function put_AttachMode(AttachMode: InkOverlayAttachMode): HRESULT; stdcall;
    function get_Cursors(var Cursors: IInkCursors): HRESULT; stdcall;
    function get_MarginX(var MarginX: Integer): HRESULT; stdcall;
    function put_MarginX(MarginX: Integer): HRESULT; stdcall;
    function get_MarginY(var MarginY: Integer): HRESULT; stdcall;
    function put_MarginY(MarginY: Integer): HRESULT; stdcall;
    function get_Tablet(var SingleTablet: IInkTablet): HRESULT; stdcall;
    function get_SupportHighContrastInk(var Support: VARIANT_BOOL): HRESULT; stdcall;
    function put_SupportHighContrastInk(Support: VARIANT_BOOL): HRESULT; stdcall;
    function get_SupportHighContrastSelectionUI(var Support: VARIANT_BOOL): HRESULT; stdcall;
    function put_SupportHighContrastSelectionUI(Support: VARIANT_BOOL): HRESULT; stdcall;
    function HitTestSelection(x: Integer; y: Integer;
      var SelArea: SelectionHitResult): HRESULT; stdcall;
    function Draw(Rect: IInkRectangle): HRESULT; stdcall;
    function SetGestureStatus(Gesture: InkApplicationGesture;
      Listen: VARIANT_BOOL): HRESULT; stdcall;
    function GetGestureStatus(Gesture: InkApplicationGesture;
      var Listening: VARIANT_BOOL): HRESULT; stdcall;
    function GetWindowInputRectangle(var WindowInputRectangle: IInkRectangle): HRESULT; stdcall;
    function SetWindowInputRectangle(WindowInputRectangle: IInkRectangle): HRESULT; stdcall;
    function SetAllTabletsMode(UseMouseForInput: VARIANT_BOOL = -1): HRESULT; stdcall;
    function SetSingleTabletIntegratedMode(Tablet: IInkTablet): HRESULT; stdcall;
    function GetEventInterest(EventId: InkCollectorEventInterest;
      var Listen: VARIANT_BOOL): HRESULT; stdcall;
    function SetEventInterest(EventId: InkCollectorEventInterest;
      Listen: VARIANT_BOOL): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInkOverlay}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(_IInkOverlayEvents);'}
  _IInkOverlayEvents = interface(IDispatch)
    [SID__IInkOverlayEvents]
  end;
  {$EXTERNALSYM _IInkOverlayEvents}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(IInkPicture);'}
  IInkPicture = interface(IDispatch)
    [SID_IInkPicture]
    function get_hWnd(var CurrentWindow: LONG_PTR): HRESULT; stdcall;
    function get_DefaultDrawingAttributes(var CurrentAttributes: IInkDrawingAttributes): HRESULT; stdcall;
    function putref_DefaultDrawingAttributes(NewAttributes: IInkDrawingAttributes): HRESULT; stdcall;
    function get_Renderer(var CurrentInkRenderer: IInkRenderer): HRESULT; stdcall;
    function putref_Renderer(NewInkRenderer: IInkRenderer): HRESULT; stdcall;
    function get_Ink(var Ink: IInkDisp): HRESULT; stdcall;
    function putref_Ink(NewInk: IInkDisp): HRESULT; stdcall;
    function get_AutoRedraw(var AutoRedraw: VARIANT_BOOL): HRESULT; stdcall;
    function put_AutoRedraw(AutoRedraw: VARIANT_BOOL): HRESULT; stdcall;
    function get_CollectingInk(var Collecting: VARIANT_BOOL): HRESULT; stdcall;
    function get_CollectionMode(var Mode: InkCollectionMode): HRESULT; stdcall;
    function put_CollectionMode(Mode: InkCollectionMode): HRESULT; stdcall;
    function get_DynamicRendering(var Enabled: VARIANT_BOOL): HRESULT; stdcall;
    function put_DynamicRendering(Enabled: VARIANT_BOOL): HRESULT; stdcall;
    function get_DesiredPacketDescription(var PacketGuids: Variant): HRESULT; stdcall;
    function put_DesiredPacketDescription(PacketGuids: Variant): HRESULT; stdcall;
    function get_MouseIcon(var MouseIcon: IPictureDisp): HRESULT; stdcall;
    function put_MouseIcon(MouseIcon: IPictureDisp): HRESULT; stdcall;
    function putref_MouseIcon(MouseIcon: IPictureDisp): HRESULT; stdcall;
    function get_MousePointer(var MousePointer: InkMousePointer): HRESULT; stdcall;
    function put_MousePointer(MousePointer: InkMousePointer): HRESULT; stdcall;
    function get_EditingMode(var EditingMode: InkOverlayEditingMode): HRESULT; stdcall;
    function put_EditingMode(EditingMode: InkOverlayEditingMode): HRESULT; stdcall;
    function get_Selection(var Selection: IInkStrokes): HRESULT; stdcall;
    function put_Selection(Selection: IInkStrokes): HRESULT; stdcall;
    function get_EraserMode(var EraserMode: InkOverlayEraserMode): HRESULT; stdcall;
    function put_EraserMode(EraserMode: InkOverlayEraserMode): HRESULT; stdcall;
    function get_EraserWidth(var EraserWidth: Integer): HRESULT; stdcall;
    function put_EraserWidth(newEraserWidth: Integer): HRESULT; stdcall;
    function putref_Picture(pPicture: IPictureDisp): HRESULT; stdcall;
    function put_Picture(pPicture: IPictureDisp): HRESULT; stdcall;
    function get_Picture(var ppPicture: IPictureDisp): HRESULT; stdcall;
    function put_SizeMode(smNewSizeMode: InkPictureSizeMode): HRESULT; stdcall;
    function get_SizeMode(var smSizeMode: InkPictureSizeMode): HRESULT; stdcall;
    function put_BackColor(newColor: OLE_COLOR): HRESULT; stdcall;
    function get_BackColor(var pColor: OLE_COLOR): HRESULT; stdcall;
    function get_Cursors(var Cursors: IInkCursors): HRESULT; stdcall;
    function get_MarginX(var MarginX: Integer): HRESULT; stdcall;
    function put_MarginX(MarginX: Integer): HRESULT; stdcall;
    function get_MarginY(var MarginY: Integer): HRESULT; stdcall;
    function put_MarginY(MarginY: Integer): HRESULT; stdcall;
    function get_Tablet(var SingleTablet: IInkTablet): HRESULT; stdcall;
    function get_SupportHighContrastInk(var Support: VARIANT_BOOL): HRESULT; stdcall;
    function put_SupportHighContrastInk(Support: VARIANT_BOOL): HRESULT; stdcall;
    function get_SupportHighContrastSelectionUI(var Support: VARIANT_BOOL): HRESULT; stdcall;
    function put_SupportHighContrastSelectionUI(Support: VARIANT_BOOL): HRESULT; stdcall;
    function HitTestSelection(x: Integer; y: Integer;
      var SelArea: SelectionHitResult): HRESULT; stdcall;
    function SetGestureStatus(Gesture: InkApplicationGesture;
      Listen: VARIANT_BOOL): HRESULT; stdcall;
    function GetGestureStatus(Gesture: InkApplicationGesture;
      var Listening: VARIANT_BOOL): HRESULT; stdcall;
    function GetWindowInputRectangle(var WindowInputRectangle: IInkRectangle): HRESULT; stdcall;
    function SetWindowInputRectangle(WindowInputRectangle: IInkRectangle): HRESULT; stdcall;
    function SetAllTabletsMode(UseMouseForInput: VARIANT_BOOL = -1): HRESULT; stdcall;
    function SetSingleTabletIntegratedMode(Tablet: IInkTablet): HRESULT; stdcall;
    function GetEventInterest(EventId: InkCollectorEventInterest;
      var Listen: VARIANT_BOOL): HRESULT; stdcall;
    function SetEventInterest(EventId: InkCollectorEventInterest;
      Listen: VARIANT_BOOL): HRESULT; stdcall;
    function get_InkEnabled(var Collecting: VARIANT_BOOL): HRESULT; stdcall;
    function put_InkEnabled(Collecting: VARIANT_BOOL): HRESULT; stdcall;
    function get_Enabled(var pbool: VARIANT_BOOL): HRESULT; stdcall;
    function put_Enabled(vbool: VARIANT_BOOL): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInkPicture}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(_IInkPictureEvents);'}
  _IInkPictureEvents = interface(IDispatch)
    [SID__IInkPictureEvents]
  end;
  {$EXTERNALSYM _IInkPictureEvents}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(IInkRecognizer);'}
  IInkRecognizer = interface(IDispatch)
    [SID_IInkRecognizer]
    function get_Name(var Name: WideString): HRESULT; stdcall;
    function get_Vendor(var Vendor: WideString): HRESULT; stdcall;
    function get_Capabilities(var CapabilitiesFlags: InkRecognizerCapabilities): HRESULT; stdcall;
    function get_Languages(var Languages: Variant): HRESULT; stdcall;
    function get_SupportedProperties(var SupportedProperties: Variant): HRESULT; stdcall;
    function get_PreferredPacketDescription(var PreferredPacketDescription: Variant): HRESULT; stdcall;
    function CreateRecognizerContext(var Context: IInkRecognizerContext): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInkRecognizer}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(IInkRecognizer2);'}
  IInkRecognizer2 = interface(IDispatch)
    [SID_IInkRecognizer2]
    function get_Id(var pbstrId: WideString): HRESULT; stdcall;
    function get_UnicodeRanges(var UnicodeRanges: Variant): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInkRecognizer2}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(IInkRecognizers);'}
  IInkRecognizers = interface(IDispatch)
    [SID_IInkRecognizers]
    function get_Count(var Count: Integer): HRESULT; stdcall;
    function get__NewEnum(var _NewEnum: IUnknown): HRESULT; stdcall;
    function GetDefaultRecognizer(lcid: Integer;
      var DefaultRecognizer: IInkRecognizer): HRESULT; stdcall;
    function Item(Index: Integer; var InkRecognizer: IInkRecognizer): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInkRecognizers}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(_IInkRecognitionEvents);'}
  _IInkRecognitionEvents = interface(IDispatch)
    [SID__IInkRecognitionEvents]
  end;
  {$EXTERNALSYM _IInkRecognitionEvents}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(IInkRecognizerContext);'}
  IInkRecognizerContext = interface(IDispatch)
    [SID_IInkRecognizerContext]
    function get_Strokes(var Strokes: IInkStrokes): HRESULT; stdcall;
    function putref_Strokes(Strokes: IInkStrokes): HRESULT; stdcall;
    function get_CharacterAutoCompletionMode(
      var Mode: InkRecognizerCharacterAutoCompletionMode): HRESULT; stdcall;
    function put_CharacterAutoCompletionMode(
      Mode: InkRecognizerCharacterAutoCompletionMode): HRESULT; stdcall;
    function get_Factoid(var Factoid: WideString): HRESULT; stdcall;
    function put_Factoid(factoid: WideString): HRESULT; stdcall;
    function get_Guide(var RecognizerGuide: IInkRecognizerGuide): HRESULT; stdcall;
    function putref_Guide(RecognizerGuide: IInkRecognizerGuide): HRESULT; stdcall;
    function get_PrefixText(var Prefix: WideString): HRESULT; stdcall;
    function put_PrefixText(Prefix: WideString): HRESULT; stdcall;
    function get_SuffixText(var Suffix: WideString): HRESULT; stdcall;
    function put_SuffixText(Suffix: WideString): HRESULT; stdcall;
    function get_RecognitionFlags(var Modes: InkRecognitionModes): HRESULT; stdcall;
    function put_RecognitionFlags(Modes: InkRecognitionModes): HRESULT; stdcall;
    function get_WordList(var WordList: IInkWordList): HRESULT; stdcall;
    function putref_WordList(WordList: IInkWordList): HRESULT; stdcall;
    function get_Recognizer(var Recognizer: IInkRecognizer): HRESULT; stdcall;
    function Recognize(var RecognitionStatus: InkRecognitionStatus;
      var RecognitionResult: IInkRecognitionResult): HRESULT; stdcall;
    function StopBackgroundRecognition: HRESULT; stdcall;
    function EndInkInput: HRESULT; stdcall;
    function BackgroundRecognize(CustomData: Variant): HRESULT; stdcall;
    function BackgroundRecognizeWithAlternates(CustomData: Variant): HRESULT; stdcall;
    function Clone(var RecoContext: IInkRecognizerContext): HRESULT; stdcall;
    function IsStringSupported(&String: WideString;
      var Supported: VARIANT_BOOL): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInkRecognizerContext}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(IInkRecognizerContext2);'}
  IInkRecognizerContext2 = interface(IDispatch)
    [SID_IInkRecognizerContext2]
    function get_EnabledUnicodeRanges(var UnicodeRanges: Variant): HRESULT; stdcall;
    function put_EnabledUnicodeRanges(UnicodeRanges: Variant): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInkRecognizerContext2}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(IInkRecognitionResult);'}
  IInkRecognitionResult = interface(IDispatch)
    [SID_IInkRecognitionResult]
    function get_TopString(var TopString: WideString): HRESULT; stdcall;
    function get_TopAlternate(var TopAlternate: IInkRecognitionAlternate): HRESULT; stdcall;
    function get_TopConfidence(var TopConfidence: InkRecognitionConfidence): HRESULT; stdcall;
    function get_Strokes(var Strokes: IInkStrokes): HRESULT; stdcall;
    function AlternatesFromSelection(selectionStart: Integer;
      selectionLength: Integer; maximumAlternates: Integer;
      var AlternatesFromSelection: IInkRecognitionAlternates): HRESULT; stdcall;
    function ModifyTopAlternate(Alternate: IInkRecognitionAlternate): HRESULT; stdcall;
    function SetResultOnStrokes: HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInkRecognitionResult}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(IInkRecognitionAlternate);'}
  IInkRecognitionAlternate = interface(IDispatch)
    [SID_IInkRecognitionAlternate]
    function get_String(var RecoString: WideString): HRESULT; stdcall;
    function get_Confidence(var Confidence: InkRecognitionConfidence): HRESULT; stdcall;
    function get_Baseline(var Baseline: Variant): HRESULT; stdcall;
    function get_Midline(var Midline: Variant): HRESULT; stdcall;
    function get_Ascender(var Ascender: Variant): HRESULT; stdcall;
    function get_Descender(var Descender: Variant): HRESULT; stdcall;
    function get_LineNumber(var LineNumber: Integer): HRESULT; stdcall;
    function get_Strokes(var Strokes: IInkStrokes): HRESULT; stdcall;
    function get_LineAlternates(var LineAlternates: IInkRecognitionAlternates): HRESULT; stdcall;
    function get_ConfidenceAlternates(var ConfidenceAlternates: IInkRecognitionAlternates): HRESULT; stdcall;
    function GetStrokesFromStrokeRanges(Strokes: IInkStrokes;
      var GetStrokesFromStrokeRanges: IInkStrokes): HRESULT; stdcall;
    function GetStrokesFromTextRange(var selectionStart: Integer;
      var selectionLength: Integer;
      var GetStrokesFromTextRange: IInkStrokes): HRESULT; stdcall;
    function GetTextRangeFromStrokes(Strokes: IInkStrokes;
      var selectionStart: Integer; var selectionLength: Integer): HRESULT; stdcall;
    function AlternatesWithConstantPropertyValues(PropertyType: WideString;
      var AlternatesWithConstantPropertyValues: IInkRecognitionAlternates): HRESULT; stdcall;
    function GetPropertyValue(PropertyType: WideString;
      var PropertyValue: Variant): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInkRecognitionAlternate}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(IInkRecognitionAlternates);'}
  IInkRecognitionAlternates = interface(IDispatch)
    [SID_IInkRecognitionAlternates]
    function get_Count(var Count: Integer): HRESULT; stdcall;
    function get__NewEnum(var _NewEnum: IUnknown): HRESULT; stdcall;
    function get_Strokes(var Strokes: IInkStrokes): HRESULT; stdcall;
    function Item(Index: Integer; var InkRecoAlternate: IInkRecognitionAlternate): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInkRecognitionAlternates}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(IInkRecognizerGuide);'}
  IInkRecognizerGuide = interface(IDispatch)
    [SID_IInkRecognizerGuide]
    function get_WritingBox(var Rectangle: IInkRectangle): HRESULT; stdcall;
    function put_WritingBox(Rectangle: IInkRectangle): HRESULT; stdcall;
    function get_DrawnBox(var Rectangle: IInkRectangle): HRESULT; stdcall;
    function put_DrawnBox(Rectangle: IInkRectangle): HRESULT; stdcall;
    function get_Rows(var Units: Integer): HRESULT; stdcall;
    function put_Rows(Units: Integer): HRESULT; stdcall;
    function get_Columns(var Units: Integer): HRESULT; stdcall;
    function put_Columns(Units: Integer): HRESULT; stdcall;
    function get_Midline(var Units: Integer): HRESULT; stdcall;
    function put_Midline(Units: Integer): HRESULT; stdcall;
    function get_GuideData(var pRecoGuide: InkRecoGuide): HRESULT; stdcall;
    function put_GuideData(recoGuide: InkRecoGuide): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInkRecognizerGuide}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(IInkWordList);'}
  IInkWordList = interface(IDispatch)
    [SID_IInkWordList]
    function AddWord(NewWord: WideString): HRESULT; stdcall;
    function RemoveWord(RemoveWord: WideString): HRESULT; stdcall;
    function Merge(MergeWordList: IInkWordList): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInkWordList}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(IInkWordList2);'}
  IInkWordList2 = interface(IDispatch)
    [SID_IInkWordList2]
    function AddWords(NewWords: WideString): HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInkWordList2}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(IInk);'}
  IInk = interface(IDispatch)
    [SID_IInk]
  end;
  {$EXTERNALSYM IInk}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(IInkLineInfo);'}
  IInkLineInfo = interface(IUnknown)
    [SID_IInkLineInfo]
    function SetFormat(var pim: TInkMetric): HRESULT; stdcall;
    function GetFormat(var pim: TInkMetric): HRESULT; stdcall;
    function GetInkExtent(var pim: TInkMetric;
      var pnWidth: UINT): HRESULT; stdcall;
    function GetCandidate(nCandidateNum: UINT; pwcRecogWord: LPWSTR;
      var pcwcRecogWord: UINT; dwFlags: DWORD): HRESULT; stdcall;
    function SetCandidate(nCandidateNum: UINT;
      strRecogWord: LPWSTR): HRESULT; stdcall;
    function Recognize: HRESULT; stdcall;
  end;
  {$EXTERNALSYM IInkLineInfo}


  {$HPPEMIT 'DECLARE_DINTERFACE_TYPE(ISketchInk);'}
  ISketchInk = interface(IDispatch)
    [SID_ISketchInk]
  end;
  {$EXTERNALSYM ISketchInk}


implementation

end.
