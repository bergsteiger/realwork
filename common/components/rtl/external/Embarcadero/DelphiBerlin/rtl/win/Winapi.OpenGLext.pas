{*******************************************************}
{                                                       }
{           CodeGear Delphi Runtime Library             }
{ Copyright(c) 2016 Embarcadero Technologies, Inc.      }
{              All rights reserved                      }
{                                                       }
{*******************************************************}

unit Winapi.OpenGLext;

interface

uses Winapi.OpenGl;

(*$HPPEMIT '#include <gl/glext.h>' *)

type
  GLsizeiptr = IntPtr;
  {$EXTERNALSYM GLsizeiptr}
  PGLsizeiptr = ^GLsizeiptr;

  GLintptr = IntPtr;
  {$EXTERNALSYM GLintptr}
  PGLintptr = ^GLintptr;

  GLchar = Byte;
  {$EXTERNALSYM GLchar}
  PGLchar = MarshaledAString;
  PPGLchar = ^PGLchar;

  GLhalf = WORD;
  {$EXTERNALSYM GLhalf}
  PGLhalf = ^GLhalf;

  GLsync = Pointer;
  {$EXTERNALSYM GLsync}
  PGLsync = ^GLsync;
  
  GLint64 = Int64;
  {$EXTERNALSYM GLint64}
  PGLint64 = ^GLint64;

  GLuint64 = UInt64;
  {$EXTERNALSYM GLuint64}
  PGLuint64 = ^GLuint64;
  
  GLfixed = GLint;
  {$EXTERNALSYM GLfixed}
  PGLfixed = ^GLfixed;
  
  _cl_context = record end;
  {$EXTERNALSYM _cl_context}
  p_cl_context = ^_cl_context;

  _cl_event = record end;
  {$EXTERNALSYM _cl_event}
  p_cl_event = ^_cl_event;
  
  // EXT
  GLint64EXT = Int64;
  {$EXTERNALSYM GLint64EXT}
  PGLint64EXT = ^GLint64EXT;

  GLuint64EXT = UInt64;
  {$EXTERNALSYM GLuint64EXT}
  PGLuint64EXT = ^GLuint64EXT;

  // ARB
  GLhalfARB = WORD;
  {$EXTERNALSYM GLhalfARB}
  PGLhalfARB = ^GLhalfARB;

  GLhandleARB = Pointer;
  {$EXTERNALSYM GLhandleARB}
  PGLhandleARB = ^GLhandleARB;

  GLcharARB = Byte;
  {$EXTERNALSYM GLcharARB}
  PGLcharARB = ^MarshaledAString;
  PPGLcharARB =  ^PGLcharARB;

  GLsizeiptrARB = IntPtr;
  {$EXTERNALSYM GLsizeiptrARB}
  PGLsizeiptrARB = ^GLsizeiptrARB;

  GLintptrARB = IntPtr;
  {$EXTERNALSYM GLintptrARB}
  PGLintptrARB = ^GLintptrARB;

  // NV
  GLhalfNV = WORD;
  {$EXTERNALSYM GLhalfNV}
  PGLhalfNV = ^GLhalfNV;

  GLvdpauSurfaceNV = GLintptr;
  {$EXTERNALSYM GLvdpauSurfaceNV}
  PGLvdpauSurfaceNV = ^GLvdpauSurfaceNV;

const
  GL_GLEXT_VERSION = 20131126;
  {$EXTERNALSYM GL_GLEXT_VERSION}

{ GL_VERSION_1_2 }
  GL_UNSIGNED_BYTE_3_3_2 = $8032;
  {$EXTERNALSYM GL_UNSIGNED_BYTE_3_3_2}
  GL_UNSIGNED_SHORT_4_4_4_4 = $8033;
  {$EXTERNALSYM GL_UNSIGNED_SHORT_4_4_4_4}
  GL_UNSIGNED_SHORT_5_5_5_1 = $8034;
  {$EXTERNALSYM GL_UNSIGNED_SHORT_5_5_5_1}
  GL_UNSIGNED_INT_8_8_8_8 = $8035;
  {$EXTERNALSYM GL_UNSIGNED_INT_8_8_8_8}
  GL_UNSIGNED_INT_10_10_10_2 = $8036;
  {$EXTERNALSYM GL_UNSIGNED_INT_10_10_10_2}
  GL_TEXTURE_BINDING_3D = $806A;
  {$EXTERNALSYM GL_TEXTURE_BINDING_3D}
  GL_PACK_SKIP_IMAGES = $806B;
  {$EXTERNALSYM GL_PACK_SKIP_IMAGES}
  GL_PACK_IMAGE_HEIGHT = $806C;
  {$EXTERNALSYM GL_PACK_IMAGE_HEIGHT}
  GL_UNPACK_SKIP_IMAGES = $806D;
  {$EXTERNALSYM GL_UNPACK_SKIP_IMAGES}
  GL_UNPACK_IMAGE_HEIGHT = $806E;
  {$EXTERNALSYM GL_UNPACK_IMAGE_HEIGHT}
  GL_TEXTURE_3D = $806F;
  {$EXTERNALSYM GL_TEXTURE_3D}
  GL_PROXY_TEXTURE_3D = $8070;
  {$EXTERNALSYM GL_PROXY_TEXTURE_3D}
  GL_TEXTURE_DEPTH = $8071;
  {$EXTERNALSYM GL_TEXTURE_DEPTH}
  GL_TEXTURE_WRAP_R = $8072;
  {$EXTERNALSYM GL_TEXTURE_WRAP_R}
  GL_MAX_3D_TEXTURE_SIZE = $8073;
  {$EXTERNALSYM GL_MAX_3D_TEXTURE_SIZE}
  GL_UNSIGNED_BYTE_2_3_3_REV = $8362;
  {$EXTERNALSYM GL_UNSIGNED_BYTE_2_3_3_REV}
  GL_UNSIGNED_SHORT_5_6_5 = $8363;
  {$EXTERNALSYM GL_UNSIGNED_SHORT_5_6_5}
  GL_UNSIGNED_SHORT_5_6_5_REV = $8364;
  {$EXTERNALSYM GL_UNSIGNED_SHORT_5_6_5_REV}
  GL_UNSIGNED_SHORT_4_4_4_4_REV = $8365;
  {$EXTERNALSYM GL_UNSIGNED_SHORT_4_4_4_4_REV}
  GL_UNSIGNED_SHORT_1_5_5_5_REV = $8366;
  {$EXTERNALSYM GL_UNSIGNED_SHORT_1_5_5_5_REV}
  GL_UNSIGNED_INT_8_8_8_8_REV = $8367;
  {$EXTERNALSYM GL_UNSIGNED_INT_8_8_8_8_REV}
  GL_UNSIGNED_INT_2_10_10_10_REV = $8368;
  {$EXTERNALSYM GL_UNSIGNED_INT_2_10_10_10_REV}
  GL_BGR = $80E0;
  {$EXTERNALSYM GL_BGR}
  GL_BGRA = $80E1;
  {$EXTERNALSYM GL_BGRA}
  GL_MAX_ELEMENTS_VERTICES = $80E8;
  {$EXTERNALSYM GL_MAX_ELEMENTS_VERTICES}
  GL_MAX_ELEMENTS_INDICES = $80E9;
  {$EXTERNALSYM GL_MAX_ELEMENTS_INDICES}
  GL_CLAMP_TO_EDGE = $812F;
  {$EXTERNALSYM GL_CLAMP_TO_EDGE}
  GL_TEXTURE_MIN_LOD = $813A;
  {$EXTERNALSYM GL_TEXTURE_MIN_LOD}
  GL_TEXTURE_MAX_LOD = $813B;
  {$EXTERNALSYM GL_TEXTURE_MAX_LOD}
  GL_TEXTURE_BASE_LEVEL = $813C;
  {$EXTERNALSYM GL_TEXTURE_BASE_LEVEL}
  GL_TEXTURE_MAX_LEVEL = $813D;
  {$EXTERNALSYM GL_TEXTURE_MAX_LEVEL}
  GL_SMOOTH_POINT_SIZE_RANGE = $0B12;
  {$EXTERNALSYM GL_SMOOTH_POINT_SIZE_RANGE}
  GL_SMOOTH_POINT_SIZE_GRANULARITY = $0B13;
  {$EXTERNALSYM GL_SMOOTH_POINT_SIZE_GRANULARITY}
  GL_SMOOTH_LINE_WIDTH_RANGE = $0B22;
  {$EXTERNALSYM GL_SMOOTH_LINE_WIDTH_RANGE}
  GL_SMOOTH_LINE_WIDTH_GRANULARITY = $0B23;
  {$EXTERNALSYM GL_SMOOTH_LINE_WIDTH_GRANULARITY}
  GL_ALIASED_LINE_WIDTH_RANGE = $846E;
  {$EXTERNALSYM GL_ALIASED_LINE_WIDTH_RANGE}
  GL_RESCALE_NORMAL = $803A;
  {$EXTERNALSYM GL_RESCALE_NORMAL}
  GL_LIGHT_MODEL_COLOR_CONTROL = $81F8;
  {$EXTERNALSYM GL_LIGHT_MODEL_COLOR_CONTROL}
  GL_SINGLE_COLOR = $81F9;
  {$EXTERNALSYM GL_SINGLE_COLOR}
  GL_SEPARATE_SPECULAR_COLOR = $81FA;
  {$EXTERNALSYM GL_SEPARATE_SPECULAR_COLOR}
  GL_ALIASED_POINT_SIZE_RANGE = $846D;
  {$EXTERNALSYM GL_ALIASED_POINT_SIZE_RANGE}

{ GL_VERSION_1_3 }
  GL_TEXTURE0 = $84C0;
  {$EXTERNALSYM GL_TEXTURE0}
  GL_TEXTURE1 = $84C1;
  {$EXTERNALSYM GL_TEXTURE1}
  GL_TEXTURE2 = $84C2;
  {$EXTERNALSYM GL_TEXTURE2}
  GL_TEXTURE3 = $84C3;
  {$EXTERNALSYM GL_TEXTURE3}
  GL_TEXTURE4 = $84C4;
  {$EXTERNALSYM GL_TEXTURE4}
  GL_TEXTURE5 = $84C5;
  {$EXTERNALSYM GL_TEXTURE5}
  GL_TEXTURE6 = $84C6;
  {$EXTERNALSYM GL_TEXTURE6}
  GL_TEXTURE7 = $84C7;
  {$EXTERNALSYM GL_TEXTURE7}
  GL_TEXTURE8 = $84C8;
  {$EXTERNALSYM GL_TEXTURE8}
  GL_TEXTURE9 = $84C9;
  {$EXTERNALSYM GL_TEXTURE9}
  GL_TEXTURE10 = $84CA;
  {$EXTERNALSYM GL_TEXTURE10}
  GL_TEXTURE11 = $84CB;
  {$EXTERNALSYM GL_TEXTURE11}
  GL_TEXTURE12 = $84CC;
  {$EXTERNALSYM GL_TEXTURE12}
  GL_TEXTURE13 = $84CD;
  {$EXTERNALSYM GL_TEXTURE13}
  GL_TEXTURE14 = $84CE;
  {$EXTERNALSYM GL_TEXTURE14}
  GL_TEXTURE15 = $84CF;
  {$EXTERNALSYM GL_TEXTURE15}
  GL_TEXTURE16 = $84D0;
  {$EXTERNALSYM GL_TEXTURE16}
  GL_TEXTURE17 = $84D1;
  {$EXTERNALSYM GL_TEXTURE17}
  GL_TEXTURE18 = $84D2;
  {$EXTERNALSYM GL_TEXTURE18}
  GL_TEXTURE19 = $84D3;
  {$EXTERNALSYM GL_TEXTURE19}
  GL_TEXTURE20 = $84D4;
  {$EXTERNALSYM GL_TEXTURE20}
  GL_TEXTURE21 = $84D5;
  {$EXTERNALSYM GL_TEXTURE21}
  GL_TEXTURE22 = $84D6;
  {$EXTERNALSYM GL_TEXTURE22}
  GL_TEXTURE23 = $84D7;
  {$EXTERNALSYM GL_TEXTURE23}
  GL_TEXTURE24 = $84D8;
  {$EXTERNALSYM GL_TEXTURE24}
  GL_TEXTURE25 = $84D9;
  {$EXTERNALSYM GL_TEXTURE25}
  GL_TEXTURE26 = $84DA;
  {$EXTERNALSYM GL_TEXTURE26}
  GL_TEXTURE27 = $84DB;
  {$EXTERNALSYM GL_TEXTURE27}
  GL_TEXTURE28 = $84DC;
  {$EXTERNALSYM GL_TEXTURE28}
  GL_TEXTURE29 = $84DD;
  {$EXTERNALSYM GL_TEXTURE29}
  GL_TEXTURE30 = $84DE;
  {$EXTERNALSYM GL_TEXTURE30}
  GL_TEXTURE31 = $84DF;
  {$EXTERNALSYM GL_TEXTURE31}
  GL_ACTIVE_TEXTURE = $84E0;
  {$EXTERNALSYM GL_ACTIVE_TEXTURE}
  GL_MULTISAMPLE = $809D;
  {$EXTERNALSYM GL_MULTISAMPLE}
  GL_SAMPLE_ALPHA_TO_COVERAGE = $809E;
  {$EXTERNALSYM GL_SAMPLE_ALPHA_TO_COVERAGE}
  GL_SAMPLE_ALPHA_TO_ONE = $809F;
  {$EXTERNALSYM GL_SAMPLE_ALPHA_TO_ONE}
  GL_SAMPLE_COVERAGE = $80A0;
  {$EXTERNALSYM GL_SAMPLE_COVERAGE}
  GL_SAMPLE_BUFFERS = $80A8;
  {$EXTERNALSYM GL_SAMPLE_BUFFERS}
  GL_SAMPLES = $80A9;
  {$EXTERNALSYM GL_SAMPLES}
  GL_SAMPLE_COVERAGE_VALUE = $80AA;
  {$EXTERNALSYM GL_SAMPLE_COVERAGE_VALUE}
  GL_SAMPLE_COVERAGE_INVERT = $80AB;
  {$EXTERNALSYM GL_SAMPLE_COVERAGE_INVERT}
  GL_TEXTURE_CUBE_MAP = $8513;
  {$EXTERNALSYM GL_TEXTURE_CUBE_MAP}
  GL_TEXTURE_BINDING_CUBE_MAP = $8514;
  {$EXTERNALSYM GL_TEXTURE_BINDING_CUBE_MAP}
  GL_TEXTURE_CUBE_MAP_POSITIVE_X = $8515;
  {$EXTERNALSYM GL_TEXTURE_CUBE_MAP_POSITIVE_X}
  GL_TEXTURE_CUBE_MAP_NEGATIVE_X = $8516;
  {$EXTERNALSYM GL_TEXTURE_CUBE_MAP_NEGATIVE_X}
  GL_TEXTURE_CUBE_MAP_POSITIVE_Y = $8517;
  {$EXTERNALSYM GL_TEXTURE_CUBE_MAP_POSITIVE_Y}
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = $8518;
  {$EXTERNALSYM GL_TEXTURE_CUBE_MAP_NEGATIVE_Y}
  GL_TEXTURE_CUBE_MAP_POSITIVE_Z = $8519;
  {$EXTERNALSYM GL_TEXTURE_CUBE_MAP_POSITIVE_Z}
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = $851A;
  {$EXTERNALSYM GL_TEXTURE_CUBE_MAP_NEGATIVE_Z}
  GL_PROXY_TEXTURE_CUBE_MAP = $851B;
  {$EXTERNALSYM GL_PROXY_TEXTURE_CUBE_MAP}
  GL_MAX_CUBE_MAP_TEXTURE_SIZE = $851C;
  {$EXTERNALSYM GL_MAX_CUBE_MAP_TEXTURE_SIZE}
  GL_COMPRESSED_RGB = $84ED;
  {$EXTERNALSYM GL_COMPRESSED_RGB}
  GL_COMPRESSED_RGBA = $84EE;
  {$EXTERNALSYM GL_COMPRESSED_RGBA}
  GL_TEXTURE_COMPRESSION_HINT = $84EF;
  {$EXTERNALSYM GL_TEXTURE_COMPRESSION_HINT}
  GL_TEXTURE_COMPRESSED_IMAGE_SIZE = $86A0;
  {$EXTERNALSYM GL_TEXTURE_COMPRESSED_IMAGE_SIZE}
  GL_TEXTURE_COMPRESSED = $86A1;
  {$EXTERNALSYM GL_TEXTURE_COMPRESSED}
  GL_NUM_COMPRESSED_TEXTURE_FORMATS = $86A2;
  {$EXTERNALSYM GL_NUM_COMPRESSED_TEXTURE_FORMATS}
  GL_COMPRESSED_TEXTURE_FORMATS = $86A3;
  {$EXTERNALSYM GL_COMPRESSED_TEXTURE_FORMATS}
  GL_CLAMP_TO_BORDER = $812D;
  {$EXTERNALSYM GL_CLAMP_TO_BORDER}
  GL_CLIENT_ACTIVE_TEXTURE = $84E1;
  {$EXTERNALSYM GL_CLIENT_ACTIVE_TEXTURE}
  GL_MAX_TEXTURE_UNITS = $84E2;
  {$EXTERNALSYM GL_MAX_TEXTURE_UNITS}
  GL_TRANSPOSE_MODELVIEW_MATRIX = $84E3;
  {$EXTERNALSYM GL_TRANSPOSE_MODELVIEW_MATRIX}
  GL_TRANSPOSE_PROJECTION_MATRIX = $84E4;
  {$EXTERNALSYM GL_TRANSPOSE_PROJECTION_MATRIX}
  GL_TRANSPOSE_TEXTURE_MATRIX = $84E5;
  {$EXTERNALSYM GL_TRANSPOSE_TEXTURE_MATRIX}
  GL_TRANSPOSE_COLOR_MATRIX = $84E6;
  {$EXTERNALSYM GL_TRANSPOSE_COLOR_MATRIX}
  GL_MULTISAMPLE_BIT = $20000000;
  {$EXTERNALSYM GL_MULTISAMPLE_BIT}
  GL_NORMAL_MAP = $8511;
  {$EXTERNALSYM GL_NORMAL_MAP}
  GL_REFLECTION_MAP = $8512;
  {$EXTERNALSYM GL_REFLECTION_MAP}
  GL_COMPRESSED_ALPHA = $84E9;
  {$EXTERNALSYM GL_COMPRESSED_ALPHA}
  GL_COMPRESSED_LUMINANCE = $84EA;
  {$EXTERNALSYM GL_COMPRESSED_LUMINANCE}
  GL_COMPRESSED_LUMINANCE_ALPHA = $84EB;
  {$EXTERNALSYM GL_COMPRESSED_LUMINANCE_ALPHA}
  GL_COMPRESSED_INTENSITY = $84EC;
  {$EXTERNALSYM GL_COMPRESSED_INTENSITY}
  GL_COMBINE = $8570;
  {$EXTERNALSYM GL_COMBINE}
  GL_COMBINE_RGB = $8571;
  {$EXTERNALSYM GL_COMBINE_RGB}
  GL_COMBINE_ALPHA = $8572;
  {$EXTERNALSYM GL_COMBINE_ALPHA}
  GL_SOURCE0_RGB = $8580;
  {$EXTERNALSYM GL_SOURCE0_RGB}
  GL_SOURCE1_RGB = $8581;
  {$EXTERNALSYM GL_SOURCE1_RGB}
  GL_SOURCE2_RGB = $8582;
  {$EXTERNALSYM GL_SOURCE2_RGB}
  GL_SOURCE0_ALPHA = $8588;
  {$EXTERNALSYM GL_SOURCE0_ALPHA}
  GL_SOURCE1_ALPHA = $8589;
  {$EXTERNALSYM GL_SOURCE1_ALPHA}
  GL_SOURCE2_ALPHA = $858A;
  {$EXTERNALSYM GL_SOURCE2_ALPHA}
  GL_OPERAND0_RGB = $8590;
  {$EXTERNALSYM GL_OPERAND0_RGB}
  GL_OPERAND1_RGB = $8591;
  {$EXTERNALSYM GL_OPERAND1_RGB}
  GL_OPERAND2_RGB = $8592;
  {$EXTERNALSYM GL_OPERAND2_RGB}
  GL_OPERAND0_ALPHA = $8598;
  {$EXTERNALSYM GL_OPERAND0_ALPHA}
  GL_OPERAND1_ALPHA = $8599;
  {$EXTERNALSYM GL_OPERAND1_ALPHA}
  GL_OPERAND2_ALPHA = $859A;
  {$EXTERNALSYM GL_OPERAND2_ALPHA}
  GL_RGB_SCALE = $8573;
  {$EXTERNALSYM GL_RGB_SCALE}
  GL_ADD_SIGNED = $8574;
  {$EXTERNALSYM GL_ADD_SIGNED}
  GL_INTERPOLATE = $8575;
  {$EXTERNALSYM GL_INTERPOLATE}
  GL_SUBTRACT = $84E7;
  {$EXTERNALSYM GL_SUBTRACT}
  GL_CONSTANT = $8576;
  {$EXTERNALSYM GL_CONSTANT}
  GL_PRIMARY_COLOR = $8577;
  {$EXTERNALSYM GL_PRIMARY_COLOR}
  GL_PREVIOUS = $8578;
  {$EXTERNALSYM GL_PREVIOUS}
  GL_DOT3_RGB = $86AE;
  {$EXTERNALSYM GL_DOT3_RGB}
  GL_DOT3_RGBA = $86AF;
  {$EXTERNALSYM GL_DOT3_RGBA}

{ GL_VERSION_1_4 }
  GL_BLEND_DST_RGB = $80C8;
  {$EXTERNALSYM GL_BLEND_DST_RGB}
  GL_BLEND_SRC_RGB = $80C9;
  {$EXTERNALSYM GL_BLEND_SRC_RGB}
  GL_BLEND_DST_ALPHA = $80CA;
  {$EXTERNALSYM GL_BLEND_DST_ALPHA}
  GL_BLEND_SRC_ALPHA = $80CB;
  {$EXTERNALSYM GL_BLEND_SRC_ALPHA}
  GL_POINT_FADE_THRESHOLD_SIZE = $8128;
  {$EXTERNALSYM GL_POINT_FADE_THRESHOLD_SIZE}
  GL_DEPTH_COMPONENT16 = $81A5;
  {$EXTERNALSYM GL_DEPTH_COMPONENT16}
  GL_DEPTH_COMPONENT24 = $81A6;
  {$EXTERNALSYM GL_DEPTH_COMPONENT24}
  GL_DEPTH_COMPONENT32 = $81A7;
  {$EXTERNALSYM GL_DEPTH_COMPONENT32}
  GL_MIRRORED_REPEAT = $8370;
  {$EXTERNALSYM GL_MIRRORED_REPEAT}
  GL_MAX_TEXTURE_LOD_BIAS = $84FD;
  {$EXTERNALSYM GL_MAX_TEXTURE_LOD_BIAS}
  GL_TEXTURE_LOD_BIAS = $8501;
  {$EXTERNALSYM GL_TEXTURE_LOD_BIAS}
  GL_INCR_WRAP = $8507;
  {$EXTERNALSYM GL_INCR_WRAP}
  GL_DECR_WRAP = $8508;
  {$EXTERNALSYM GL_DECR_WRAP}
  GL_TEXTURE_DEPTH_SIZE = $884A;
  {$EXTERNALSYM GL_TEXTURE_DEPTH_SIZE}
  GL_TEXTURE_COMPARE_MODE = $884C;
  {$EXTERNALSYM GL_TEXTURE_COMPARE_MODE}
  GL_TEXTURE_COMPARE_FUNC = $884D;
  {$EXTERNALSYM GL_TEXTURE_COMPARE_FUNC}
  GL_POINT_SIZE_MIN = $8126;
  {$EXTERNALSYM GL_POINT_SIZE_MIN}
  GL_POINT_SIZE_MAX = $8127;
  {$EXTERNALSYM GL_POINT_SIZE_MAX}
  GL_POINT_DISTANCE_ATTENUATION = $8129;
  {$EXTERNALSYM GL_POINT_DISTANCE_ATTENUATION}
  GL_GENERATE_MIPMAP = $8191;
  {$EXTERNALSYM GL_GENERATE_MIPMAP}
  GL_GENERATE_MIPMAP_HINT = $8192;
  {$EXTERNALSYM GL_GENERATE_MIPMAP_HINT}
  GL_FOG_COORDINATE_SOURCE = $8450;
  {$EXTERNALSYM GL_FOG_COORDINATE_SOURCE}
  GL_FOG_COORDINATE = $8451;
  {$EXTERNALSYM GL_FOG_COORDINATE}
  GL_FRAGMENT_DEPTH = $8452;
  {$EXTERNALSYM GL_FRAGMENT_DEPTH}
  GL_CURRENT_FOG_COORDINATE = $8453;
  {$EXTERNALSYM GL_CURRENT_FOG_COORDINATE}
  GL_FOG_COORDINATE_ARRAY_TYPE = $8454;
  {$EXTERNALSYM GL_FOG_COORDINATE_ARRAY_TYPE}
  GL_FOG_COORDINATE_ARRAY_STRIDE = $8455;
  {$EXTERNALSYM GL_FOG_COORDINATE_ARRAY_STRIDE}
  GL_FOG_COORDINATE_ARRAY_POINTER = $8456;
  {$EXTERNALSYM GL_FOG_COORDINATE_ARRAY_POINTER}
  GL_FOG_COORDINATE_ARRAY = $8457;
  {$EXTERNALSYM GL_FOG_COORDINATE_ARRAY}
  GL_COLOR_SUM = $8458;
  {$EXTERNALSYM GL_COLOR_SUM}
  GL_CURRENT_SECONDARY_COLOR = $8459;
  {$EXTERNALSYM GL_CURRENT_SECONDARY_COLOR}
  GL_SECONDARY_COLOR_ARRAY_SIZE = $845A;
  {$EXTERNALSYM GL_SECONDARY_COLOR_ARRAY_SIZE}
  GL_SECONDARY_COLOR_ARRAY_TYPE = $845B;
  {$EXTERNALSYM GL_SECONDARY_COLOR_ARRAY_TYPE}
  GL_SECONDARY_COLOR_ARRAY_STRIDE = $845C;
  {$EXTERNALSYM GL_SECONDARY_COLOR_ARRAY_STRIDE}
  GL_SECONDARY_COLOR_ARRAY_POINTER = $845D;
  {$EXTERNALSYM GL_SECONDARY_COLOR_ARRAY_POINTER}
  GL_SECONDARY_COLOR_ARRAY = $845E;
  {$EXTERNALSYM GL_SECONDARY_COLOR_ARRAY}
  GL_TEXTURE_FILTER_CONTROL = $8500;
  {$EXTERNALSYM GL_TEXTURE_FILTER_CONTROL}
  GL_DEPTH_TEXTURE_MODE = $884B;
  {$EXTERNALSYM GL_DEPTH_TEXTURE_MODE}
  GL_COMPARE_R_TO_TEXTURE = $884E;
  {$EXTERNALSYM GL_COMPARE_R_TO_TEXTURE}
  GL_FUNC_ADD = $8006;
  {$EXTERNALSYM GL_FUNC_ADD}
  GL_FUNC_SUBTRACT = $800A;
  {$EXTERNALSYM GL_FUNC_SUBTRACT}
  GL_FUNC_REVERSE_SUBTRACT = $800B;
  {$EXTERNALSYM GL_FUNC_REVERSE_SUBTRACT}
  GL_MIN = $8007;
  {$EXTERNALSYM GL_MIN}
  GL_MAX = $8008;
  {$EXTERNALSYM GL_MAX}
  GL_CONSTANT_COLOR = $8001;
  {$EXTERNALSYM GL_CONSTANT_COLOR}
  GL_ONE_MINUS_CONSTANT_COLOR = $8002;
  {$EXTERNALSYM GL_ONE_MINUS_CONSTANT_COLOR}
  GL_CONSTANT_ALPHA = $8003;
  {$EXTERNALSYM GL_CONSTANT_ALPHA}
  GL_ONE_MINUS_CONSTANT_ALPHA = $8004;
  {$EXTERNALSYM GL_ONE_MINUS_CONSTANT_ALPHA}
  GL_BUFFER_SIZE = $8764;
  {$EXTERNALSYM GL_BUFFER_SIZE}
  GL_BUFFER_USAGE = $8765;
  {$EXTERNALSYM GL_BUFFER_USAGE}
  GL_QUERY_COUNTER_BITS = $8864;
  {$EXTERNALSYM GL_QUERY_COUNTER_BITS}
  GL_CURRENT_QUERY = $8865;
  {$EXTERNALSYM GL_CURRENT_QUERY}
  GL_QUERY_RESULT = $8866;
  {$EXTERNALSYM GL_QUERY_RESULT}
  GL_QUERY_RESULT_AVAILABLE = $8867;
  {$EXTERNALSYM GL_QUERY_RESULT_AVAILABLE}
  GL_ARRAY_BUFFER = $8892;
  {$EXTERNALSYM GL_ARRAY_BUFFER}
  GL_ELEMENT_ARRAY_BUFFER = $8893;
  {$EXTERNALSYM GL_ELEMENT_ARRAY_BUFFER}
  GL_ARRAY_BUFFER_BINDING = $8894;
  {$EXTERNALSYM GL_ARRAY_BUFFER_BINDING}
  GL_ELEMENT_ARRAY_BUFFER_BINDING = $8895;
  {$EXTERNALSYM GL_ELEMENT_ARRAY_BUFFER_BINDING}
  GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = $889F;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING}
  GL_READ_ONLY = $88B8;
  {$EXTERNALSYM GL_READ_ONLY}
  GL_WRITE_ONLY = $88B9;
  {$EXTERNALSYM GL_WRITE_ONLY}
  GL_READ_WRITE = $88BA;
  {$EXTERNALSYM GL_READ_WRITE}
  GL_BUFFER_ACCESS = $88BB;
  {$EXTERNALSYM GL_BUFFER_ACCESS}
  GL_BUFFER_MAPPED = $88BC;
  {$EXTERNALSYM GL_BUFFER_MAPPED}
  GL_BUFFER_MAP_POINTER = $88BD;
  {$EXTERNALSYM GL_BUFFER_MAP_POINTER}
  GL_STREAM_DRAW = $88E0;
  {$EXTERNALSYM GL_STREAM_DRAW}
  GL_STREAM_READ = $88E1;
  {$EXTERNALSYM GL_STREAM_READ}
  GL_STREAM_COPY = $88E2;
  {$EXTERNALSYM GL_STREAM_COPY}
  GL_STATIC_DRAW = $88E4;
  {$EXTERNALSYM GL_STATIC_DRAW}
  GL_STATIC_READ = $88E5;
  {$EXTERNALSYM GL_STATIC_READ}
  GL_STATIC_COPY = $88E6;
  {$EXTERNALSYM GL_STATIC_COPY}
  GL_DYNAMIC_DRAW = $88E8;
  {$EXTERNALSYM GL_DYNAMIC_DRAW}
  GL_DYNAMIC_READ = $88E9;
  {$EXTERNALSYM GL_DYNAMIC_READ}
  GL_DYNAMIC_COPY = $88EA;
  {$EXTERNALSYM GL_DYNAMIC_COPY}
  GL_SAMPLES_PASSED = $8914;
  {$EXTERNALSYM GL_SAMPLES_PASSED}
  GL_SRC1_ALPHA = $8589;
  {$EXTERNALSYM GL_SRC1_ALPHA}
  GL_VERTEX_ARRAY_BUFFER_BINDING = $8896;
  {$EXTERNALSYM GL_VERTEX_ARRAY_BUFFER_BINDING}
  GL_NORMAL_ARRAY_BUFFER_BINDING = $8897;
  {$EXTERNALSYM GL_NORMAL_ARRAY_BUFFER_BINDING}
  GL_COLOR_ARRAY_BUFFER_BINDING = $8898;
  {$EXTERNALSYM GL_COLOR_ARRAY_BUFFER_BINDING}
  GL_INDEX_ARRAY_BUFFER_BINDING = $8899;
  {$EXTERNALSYM GL_INDEX_ARRAY_BUFFER_BINDING}
  GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = $889A;
  {$EXTERNALSYM GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING}
  GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = $889B;
  {$EXTERNALSYM GL_EDGE_FLAG_ARRAY_BUFFER_BINDING}
  GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = $889C;
  {$EXTERNALSYM GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING}
  GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = $889D;
  {$EXTERNALSYM GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING}
  GL_WEIGHT_ARRAY_BUFFER_BINDING = $889E;
  {$EXTERNALSYM GL_WEIGHT_ARRAY_BUFFER_BINDING}
  GL_FOG_COORD_SRC = $8450;
  {$EXTERNALSYM GL_FOG_COORD_SRC}
  GL_FOG_COORD = $8451;
  {$EXTERNALSYM GL_FOG_COORD}
  GL_CURRENT_FOG_COORD = $8453;
  {$EXTERNALSYM GL_CURRENT_FOG_COORD}
  GL_FOG_COORD_ARRAY_TYPE = $8454;
  {$EXTERNALSYM GL_FOG_COORD_ARRAY_TYPE}
  GL_FOG_COORD_ARRAY_STRIDE = $8455;
  {$EXTERNALSYM GL_FOG_COORD_ARRAY_STRIDE}
  GL_FOG_COORD_ARRAY_POINTER = $8456;
  {$EXTERNALSYM GL_FOG_COORD_ARRAY_POINTER}
  GL_FOG_COORD_ARRAY = $8457;
  {$EXTERNALSYM GL_FOG_COORD_ARRAY}
  GL_FOG_COORD_ARRAY_BUFFER_BINDING = $889D;
  {$EXTERNALSYM GL_FOG_COORD_ARRAY_BUFFER_BINDING}
  GL_SRC0_RGB = $8580;
  {$EXTERNALSYM GL_SRC0_RGB}
  GL_SRC1_RGB = $8581;
  {$EXTERNALSYM GL_SRC1_RGB}
  GL_SRC2_RGB = $8582;
  {$EXTERNALSYM GL_SRC2_RGB}
  GL_SRC0_ALPHA = $8588;
  {$EXTERNALSYM GL_SRC0_ALPHA}
  GL_SRC2_ALPHA = $858A;
  {$EXTERNALSYM GL_SRC2_ALPHA}
  GL_BLEND_EQUATION_RGB = $8009;
  {$EXTERNALSYM GL_BLEND_EQUATION_RGB}
  GL_VERTEX_ATTRIB_ARRAY_ENABLED = $8622;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_ARRAY_ENABLED}
  GL_VERTEX_ATTRIB_ARRAY_SIZE = $8623;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_ARRAY_SIZE}
  GL_VERTEX_ATTRIB_ARRAY_STRIDE = $8624;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_ARRAY_STRIDE}
  GL_VERTEX_ATTRIB_ARRAY_TYPE = $8625;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_ARRAY_TYPE}
  GL_CURRENT_VERTEX_ATTRIB = $8626;
  {$EXTERNALSYM GL_CURRENT_VERTEX_ATTRIB}
  GL_VERTEX_PROGRAM_POINT_SIZE = $8642;
  {$EXTERNALSYM GL_VERTEX_PROGRAM_POINT_SIZE}
  GL_VERTEX_ATTRIB_ARRAY_POINTER = $8645;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_ARRAY_POINTER}
  GL_STENCIL_BACK_FUNC = $8800;
  {$EXTERNALSYM GL_STENCIL_BACK_FUNC}
  GL_STENCIL_BACK_FAIL = $8801;
  {$EXTERNALSYM GL_STENCIL_BACK_FAIL}
  GL_STENCIL_BACK_PASS_DEPTH_FAIL = $8802;
  {$EXTERNALSYM GL_STENCIL_BACK_PASS_DEPTH_FAIL}
  GL_STENCIL_BACK_PASS_DEPTH_PASS = $8803;
  {$EXTERNALSYM GL_STENCIL_BACK_PASS_DEPTH_PASS}
  GL_MAX_DRAW_BUFFERS = $8824;
  {$EXTERNALSYM GL_MAX_DRAW_BUFFERS}
  GL_DRAW_BUFFER0 = $8825;
  {$EXTERNALSYM GL_DRAW_BUFFER0}
  GL_DRAW_BUFFER1 = $8826;
  {$EXTERNALSYM GL_DRAW_BUFFER1}
  GL_DRAW_BUFFER2 = $8827;
  {$EXTERNALSYM GL_DRAW_BUFFER2}
  GL_DRAW_BUFFER3 = $8828;
  {$EXTERNALSYM GL_DRAW_BUFFER3}
  GL_DRAW_BUFFER4 = $8829;
  {$EXTERNALSYM GL_DRAW_BUFFER4}
  GL_DRAW_BUFFER5 = $882A;
  {$EXTERNALSYM GL_DRAW_BUFFER5}
  GL_DRAW_BUFFER6 = $882B;
  {$EXTERNALSYM GL_DRAW_BUFFER6}
  GL_DRAW_BUFFER7 = $882C;
  {$EXTERNALSYM GL_DRAW_BUFFER7}
  GL_DRAW_BUFFER8 = $882D;
  {$EXTERNALSYM GL_DRAW_BUFFER8}
  GL_DRAW_BUFFER9 = $882E;
  {$EXTERNALSYM GL_DRAW_BUFFER9}
  GL_DRAW_BUFFER10 = $882F;
  {$EXTERNALSYM GL_DRAW_BUFFER10}
  GL_DRAW_BUFFER11 = $8830;
  {$EXTERNALSYM GL_DRAW_BUFFER11}
  GL_DRAW_BUFFER12 = $8831;
  {$EXTERNALSYM GL_DRAW_BUFFER12}
  GL_DRAW_BUFFER13 = $8832;
  {$EXTERNALSYM GL_DRAW_BUFFER13}
  GL_DRAW_BUFFER14 = $8833;
  {$EXTERNALSYM GL_DRAW_BUFFER14}
  GL_DRAW_BUFFER15 = $8834;
  {$EXTERNALSYM GL_DRAW_BUFFER15}
  GL_BLEND_EQUATION_ALPHA = $883D;
  {$EXTERNALSYM GL_BLEND_EQUATION_ALPHA}
  GL_MAX_VERTEX_ATTRIBS = $8869;
  {$EXTERNALSYM GL_MAX_VERTEX_ATTRIBS}
  GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = $886A;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_ARRAY_NORMALIZED}
  GL_MAX_TEXTURE_IMAGE_UNITS = $8872;
  {$EXTERNALSYM GL_MAX_TEXTURE_IMAGE_UNITS}
  GL_FRAGMENT_SHADER = $8B30;
  {$EXTERNALSYM GL_FRAGMENT_SHADER}
  GL_VERTEX_SHADER = $8B31;
  {$EXTERNALSYM GL_VERTEX_SHADER}
  GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = $8B49;
  {$EXTERNALSYM GL_MAX_FRAGMENT_UNIFORM_COMPONENTS}
  GL_MAX_VERTEX_UNIFORM_COMPONENTS = $8B4A;
  {$EXTERNALSYM GL_MAX_VERTEX_UNIFORM_COMPONENTS}
  GL_MAX_VARYING_FLOATS = $8B4B;
  {$EXTERNALSYM GL_MAX_VARYING_FLOATS}
  GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = $8B4C;
  {$EXTERNALSYM GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS}
  GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = $8B4D;
  {$EXTERNALSYM GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS}
  GL_SHADER_TYPE = $8B4F;
  {$EXTERNALSYM GL_SHADER_TYPE}
  GL_FLOAT_VEC2 = $8B50;
  {$EXTERNALSYM GL_FLOAT_VEC2}
  GL_FLOAT_VEC3 = $8B51;
  {$EXTERNALSYM GL_FLOAT_VEC3}
  GL_FLOAT_VEC4 = $8B52;
  {$EXTERNALSYM GL_FLOAT_VEC4}
  GL_INT_VEC2 = $8B53;
  {$EXTERNALSYM GL_INT_VEC2}
  GL_INT_VEC3 = $8B54;
  {$EXTERNALSYM GL_INT_VEC3}
  GL_INT_VEC4 = $8B55;
  {$EXTERNALSYM GL_INT_VEC4}
  GL_BOOL = $8B56;
  {$EXTERNALSYM GL_BOOL}
  GL_BOOL_VEC2 = $8B57;
  {$EXTERNALSYM GL_BOOL_VEC2}
  GL_BOOL_VEC3 = $8B58;
  {$EXTERNALSYM GL_BOOL_VEC3}
  GL_BOOL_VEC4 = $8B59;
  {$EXTERNALSYM GL_BOOL_VEC4}
  GL_FLOAT_MAT2 = $8B5A;
  {$EXTERNALSYM GL_FLOAT_MAT2}
  GL_FLOAT_MAT3 = $8B5B;
  {$EXTERNALSYM GL_FLOAT_MAT3}
  GL_FLOAT_MAT4 = $8B5C;
  {$EXTERNALSYM GL_FLOAT_MAT4}
  GL_SAMPLER_1D = $8B5D;
  {$EXTERNALSYM GL_SAMPLER_1D}
  GL_SAMPLER_2D = $8B5E;
  {$EXTERNALSYM GL_SAMPLER_2D}
  GL_SAMPLER_3D = $8B5F;
  {$EXTERNALSYM GL_SAMPLER_3D}
  GL_SAMPLER_CUBE = $8B60;
  {$EXTERNALSYM GL_SAMPLER_CUBE}
  GL_SAMPLER_1D_SHADOW = $8B61;
  {$EXTERNALSYM GL_SAMPLER_1D_SHADOW}
  GL_SAMPLER_2D_SHADOW = $8B62;
  {$EXTERNALSYM GL_SAMPLER_2D_SHADOW}
  GL_DELETE_STATUS = $8B80;
  {$EXTERNALSYM GL_DELETE_STATUS}
  GL_COMPILE_STATUS = $8B81;
  {$EXTERNALSYM GL_COMPILE_STATUS}
  GL_LINK_STATUS = $8B82;
  {$EXTERNALSYM GL_LINK_STATUS}
  GL_VALIDATE_STATUS = $8B83;
  {$EXTERNALSYM GL_VALIDATE_STATUS}
  GL_INFO_LOG_LENGTH = $8B84;
  {$EXTERNALSYM GL_INFO_LOG_LENGTH}
  GL_ATTACHED_SHADERS = $8B85;
  {$EXTERNALSYM GL_ATTACHED_SHADERS}
  GL_ACTIVE_UNIFORMS = $8B86;
  {$EXTERNALSYM GL_ACTIVE_UNIFORMS}
  GL_ACTIVE_UNIFORM_MAX_LENGTH = $8B87;
  {$EXTERNALSYM GL_ACTIVE_UNIFORM_MAX_LENGTH}
  GL_SHADER_SOURCE_LENGTH = $8B88;
  {$EXTERNALSYM GL_SHADER_SOURCE_LENGTH}
  GL_ACTIVE_ATTRIBUTES = $8B89;
  {$EXTERNALSYM GL_ACTIVE_ATTRIBUTES}
  GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = $8B8A;
  {$EXTERNALSYM GL_ACTIVE_ATTRIBUTE_MAX_LENGTH}
  GL_FRAGMENT_SHADER_DERIVATIVE_HINT = $8B8B;
  {$EXTERNALSYM GL_FRAGMENT_SHADER_DERIVATIVE_HINT}
  GL_SHADING_LANGUAGE_VERSION = $8B8C;
  {$EXTERNALSYM GL_SHADING_LANGUAGE_VERSION}
  GL_CURRENT_PROGRAM = $8B8D;
  {$EXTERNALSYM GL_CURRENT_PROGRAM}
  GL_POINT_SPRITE_COORD_ORIGIN = $8CA0;
  {$EXTERNALSYM GL_POINT_SPRITE_COORD_ORIGIN}
  GL_LOWER_LEFT = $8CA1;
  {$EXTERNALSYM GL_LOWER_LEFT}
  GL_UPPER_LEFT = $8CA2;
  {$EXTERNALSYM GL_UPPER_LEFT}
  GL_STENCIL_BACK_REF = $8CA3;
  {$EXTERNALSYM GL_STENCIL_BACK_REF}
  GL_STENCIL_BACK_VALUE_MASK = $8CA4;
  {$EXTERNALSYM GL_STENCIL_BACK_VALUE_MASK}
  GL_STENCIL_BACK_WRITEMASK = $8CA5;
  {$EXTERNALSYM GL_STENCIL_BACK_WRITEMASK}
  GL_VERTEX_PROGRAM_TWO_SIDE = $8643;
  {$EXTERNALSYM GL_VERTEX_PROGRAM_TWO_SIDE}
  GL_POINT_SPRITE = $8861;
  {$EXTERNALSYM GL_POINT_SPRITE}
  GL_COORD_REPLACE = $8862;
  {$EXTERNALSYM GL_COORD_REPLACE}
  GL_MAX_TEXTURE_COORDS = $8871;
  {$EXTERNALSYM GL_MAX_TEXTURE_COORDS}

{ GL_VERSION_2_1 }
  GL_PIXEL_PACK_BUFFER = $88EB;
  {$EXTERNALSYM GL_PIXEL_PACK_BUFFER}
  GL_PIXEL_UNPACK_BUFFER = $88EC;
  {$EXTERNALSYM GL_PIXEL_UNPACK_BUFFER}
  GL_PIXEL_PACK_BUFFER_BINDING = $88ED;
  {$EXTERNALSYM GL_PIXEL_PACK_BUFFER_BINDING}
  GL_PIXEL_UNPACK_BUFFER_BINDING = $88EF;
  {$EXTERNALSYM GL_PIXEL_UNPACK_BUFFER_BINDING}
  GL_FLOAT_MAT2x3 = $8B65;
  {$EXTERNALSYM GL_FLOAT_MAT2x3}
  GL_FLOAT_MAT2x4 = $8B66;
  {$EXTERNALSYM GL_FLOAT_MAT2x4}
  GL_FLOAT_MAT3x2 = $8B67;
  {$EXTERNALSYM GL_FLOAT_MAT3x2}
  GL_FLOAT_MAT3x4 = $8B68;
  {$EXTERNALSYM GL_FLOAT_MAT3x4}
  GL_FLOAT_MAT4x2 = $8B69;
  {$EXTERNALSYM GL_FLOAT_MAT4x2}
  GL_FLOAT_MAT4x3 = $8B6A;
  {$EXTERNALSYM GL_FLOAT_MAT4x3}
  GL_SRGB = $8C40;
  {$EXTERNALSYM GL_SRGB}
  GL_SRGB8 = $8C41;
  {$EXTERNALSYM GL_SRGB8}
  GL_SRGB_ALPHA = $8C42;
  {$EXTERNALSYM GL_SRGB_ALPHA}
  GL_SRGB8_ALPHA8 = $8C43;
  {$EXTERNALSYM GL_SRGB8_ALPHA8}
  GL_COMPRESSED_SRGB = $8C48;
  {$EXTERNALSYM GL_COMPRESSED_SRGB}
  GL_COMPRESSED_SRGB_ALPHA = $8C49;
  {$EXTERNALSYM GL_COMPRESSED_SRGB_ALPHA}
  GL_CURRENT_RASTER_SECONDARY_COLOR = $845F;
  {$EXTERNALSYM GL_CURRENT_RASTER_SECONDARY_COLOR}
  GL_SLUMINANCE_ALPHA = $8C44;
  {$EXTERNALSYM GL_SLUMINANCE_ALPHA}
  GL_SLUMINANCE8_ALPHA8 = $8C45;
  {$EXTERNALSYM GL_SLUMINANCE8_ALPHA8}
  GL_SLUMINANCE = $8C46;
  {$EXTERNALSYM GL_SLUMINANCE}
  GL_SLUMINANCE8 = $8C47;
  {$EXTERNALSYM GL_SLUMINANCE8}
  GL_COMPRESSED_SLUMINANCE = $8C4A;
  {$EXTERNALSYM GL_COMPRESSED_SLUMINANCE}
  GL_COMPRESSED_SLUMINANCE_ALPHA = $8C4B;
  {$EXTERNALSYM GL_COMPRESSED_SLUMINANCE_ALPHA}
  GL_COMPARE_REF_TO_TEXTURE = $884E;
  {$EXTERNALSYM GL_COMPARE_REF_TO_TEXTURE}
  GL_CLIP_DISTANCE0 = $3000;
  {$EXTERNALSYM GL_CLIP_DISTANCE0}
  GL_CLIP_DISTANCE1 = $3001;
  {$EXTERNALSYM GL_CLIP_DISTANCE1}
  GL_CLIP_DISTANCE2 = $3002;
  {$EXTERNALSYM GL_CLIP_DISTANCE2}
  GL_CLIP_DISTANCE3 = $3003;
  {$EXTERNALSYM GL_CLIP_DISTANCE3}
  GL_CLIP_DISTANCE4 = $3004;
  {$EXTERNALSYM GL_CLIP_DISTANCE4}
  GL_CLIP_DISTANCE5 = $3005;
  {$EXTERNALSYM GL_CLIP_DISTANCE5}
  GL_CLIP_DISTANCE6 = $3006;
  {$EXTERNALSYM GL_CLIP_DISTANCE6}
  GL_CLIP_DISTANCE7 = $3007;
  {$EXTERNALSYM GL_CLIP_DISTANCE7}
  GL_MAX_CLIP_DISTANCES = $0D32;
  {$EXTERNALSYM GL_MAX_CLIP_DISTANCES}
  GL_MAJOR_VERSION = $821B;
  {$EXTERNALSYM GL_MAJOR_VERSION}
  GL_MINOR_VERSION = $821C;
  {$EXTERNALSYM GL_MINOR_VERSION}
  GL_NUM_EXTENSIONS = $821D;
  {$EXTERNALSYM GL_NUM_EXTENSIONS}
  GL_CONTEXT_FLAGS = $821E;
  {$EXTERNALSYM GL_CONTEXT_FLAGS}
  GL_COMPRESSED_RED = $8225;
  {$EXTERNALSYM GL_COMPRESSED_RED}
  GL_COMPRESSED_RG = $8226;
  {$EXTERNALSYM GL_COMPRESSED_RG}
  GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = $00000001;
  {$EXTERNALSYM GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT}
  GL_RGBA32F = $8814;
  {$EXTERNALSYM GL_RGBA32F}
  GL_RGB32F = $8815;
  {$EXTERNALSYM GL_RGB32F}
  GL_RGBA16F = $881A;
  {$EXTERNALSYM GL_RGBA16F}
  GL_RGB16F = $881B;
  {$EXTERNALSYM GL_RGB16F}
  GL_VERTEX_ATTRIB_ARRAY_INTEGER = $88FD;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_ARRAY_INTEGER}
  GL_MAX_ARRAY_TEXTURE_LAYERS = $88FF;
  {$EXTERNALSYM GL_MAX_ARRAY_TEXTURE_LAYERS}
  GL_MIN_PROGRAM_TEXEL_OFFSET = $8904;
  {$EXTERNALSYM GL_MIN_PROGRAM_TEXEL_OFFSET}
  GL_MAX_PROGRAM_TEXEL_OFFSET = $8905;
  {$EXTERNALSYM GL_MAX_PROGRAM_TEXEL_OFFSET}
  GL_CLAMP_READ_COLOR = $891C;
  {$EXTERNALSYM GL_CLAMP_READ_COLOR}
  GL_FIXED_ONLY = $891D;
  {$EXTERNALSYM GL_FIXED_ONLY}
  GL_MAX_VARYING_COMPONENTS = $8B4B;
  {$EXTERNALSYM GL_MAX_VARYING_COMPONENTS}
  GL_TEXTURE_1D_ARRAY = $8C18;
  {$EXTERNALSYM GL_TEXTURE_1D_ARRAY}
  GL_PROXY_TEXTURE_1D_ARRAY = $8C19;
  {$EXTERNALSYM GL_PROXY_TEXTURE_1D_ARRAY}
  GL_TEXTURE_2D_ARRAY = $8C1A;
  {$EXTERNALSYM GL_TEXTURE_2D_ARRAY}
  GL_PROXY_TEXTURE_2D_ARRAY = $8C1B;
  {$EXTERNALSYM GL_PROXY_TEXTURE_2D_ARRAY}
  GL_TEXTURE_BINDING_1D_ARRAY = $8C1C;
  {$EXTERNALSYM GL_TEXTURE_BINDING_1D_ARRAY}
  GL_TEXTURE_BINDING_2D_ARRAY = $8C1D;
  {$EXTERNALSYM GL_TEXTURE_BINDING_2D_ARRAY}
  GL_R11F_G11F_B10F = $8C3A;
  {$EXTERNALSYM GL_R11F_G11F_B10F}
  GL_UNSIGNED_INT_10F_11F_11F_REV = $8C3B;
  {$EXTERNALSYM GL_UNSIGNED_INT_10F_11F_11F_REV}
  GL_RGB9_E5 = $8C3D;
  {$EXTERNALSYM GL_RGB9_E5}
  GL_UNSIGNED_INT_5_9_9_9_REV = $8C3E;
  {$EXTERNALSYM GL_UNSIGNED_INT_5_9_9_9_REV}
  GL_TEXTURE_SHARED_SIZE = $8C3F;
  {$EXTERNALSYM GL_TEXTURE_SHARED_SIZE}
  GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = $8C76;
  {$EXTERNALSYM GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH}
  GL_TRANSFORM_FEEDBACK_BUFFER_MODE = $8C7F;
  {$EXTERNALSYM GL_TRANSFORM_FEEDBACK_BUFFER_MODE}
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = $8C80;
  {$EXTERNALSYM GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS}
  GL_TRANSFORM_FEEDBACK_VARYINGS = $8C83;
  {$EXTERNALSYM GL_TRANSFORM_FEEDBACK_VARYINGS}
  GL_TRANSFORM_FEEDBACK_BUFFER_START = $8C84;
  {$EXTERNALSYM GL_TRANSFORM_FEEDBACK_BUFFER_START}
  GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = $8C85;
  {$EXTERNALSYM GL_TRANSFORM_FEEDBACK_BUFFER_SIZE}
  GL_PRIMITIVES_GENERATED = $8C87;
  {$EXTERNALSYM GL_PRIMITIVES_GENERATED}
  GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = $8C88;
  {$EXTERNALSYM GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN}
  GL_RASTERIZER_DISCARD = $8C89;
  {$EXTERNALSYM GL_RASTERIZER_DISCARD}
  GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = $8C8A;
  {$EXTERNALSYM GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS}
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = $8C8B;
  {$EXTERNALSYM GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS}
  GL_INTERLEAVED_ATTRIBS = $8C8C;
  {$EXTERNALSYM GL_INTERLEAVED_ATTRIBS}
  GL_SEPARATE_ATTRIBS = $8C8D;
  {$EXTERNALSYM GL_SEPARATE_ATTRIBS}
  GL_TRANSFORM_FEEDBACK_BUFFER = $8C8E;
  {$EXTERNALSYM GL_TRANSFORM_FEEDBACK_BUFFER}
  GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = $8C8F;
  {$EXTERNALSYM GL_TRANSFORM_FEEDBACK_BUFFER_BINDING}
  GL_RGBA32UI = $8D70;
  {$EXTERNALSYM GL_RGBA32UI}
  GL_RGB32UI = $8D71;
  {$EXTERNALSYM GL_RGB32UI}
  GL_RGBA16UI = $8D76;
  {$EXTERNALSYM GL_RGBA16UI}
  GL_RGB16UI = $8D77;
  {$EXTERNALSYM GL_RGB16UI}
  GL_RGBA8UI = $8D7C;
  {$EXTERNALSYM GL_RGBA8UI}
  GL_RGB8UI = $8D7D;
  {$EXTERNALSYM GL_RGB8UI}
  GL_RGBA32I = $8D82;
  {$EXTERNALSYM GL_RGBA32I}
  GL_RGB32I = $8D83;
  {$EXTERNALSYM GL_RGB32I}
  GL_RGBA16I = $8D88;
  {$EXTERNALSYM GL_RGBA16I}
  GL_RGB16I = $8D89;
  {$EXTERNALSYM GL_RGB16I}
  GL_RGBA8I = $8D8E;
  {$EXTERNALSYM GL_RGBA8I}
  GL_RGB8I = $8D8F;
  {$EXTERNALSYM GL_RGB8I}
  GL_RED_INTEGER = $8D94;
  {$EXTERNALSYM GL_RED_INTEGER}
  GL_GREEN_INTEGER = $8D95;
  {$EXTERNALSYM GL_GREEN_INTEGER}
  GL_BLUE_INTEGER = $8D96;
  {$EXTERNALSYM GL_BLUE_INTEGER}
  GL_RGB_INTEGER = $8D98;
  {$EXTERNALSYM GL_RGB_INTEGER}
  GL_RGBA_INTEGER = $8D99;
  {$EXTERNALSYM GL_RGBA_INTEGER}
  GL_BGR_INTEGER = $8D9A;
  {$EXTERNALSYM GL_BGR_INTEGER}
  GL_BGRA_INTEGER = $8D9B;
  {$EXTERNALSYM GL_BGRA_INTEGER}
  GL_SAMPLER_1D_ARRAY = $8DC0;
  {$EXTERNALSYM GL_SAMPLER_1D_ARRAY}
  GL_SAMPLER_2D_ARRAY = $8DC1;
  {$EXTERNALSYM GL_SAMPLER_2D_ARRAY}
  GL_SAMPLER_1D_ARRAY_SHADOW = $8DC3;
  {$EXTERNALSYM GL_SAMPLER_1D_ARRAY_SHADOW}
  GL_SAMPLER_2D_ARRAY_SHADOW = $8DC4;
  {$EXTERNALSYM GL_SAMPLER_2D_ARRAY_SHADOW}
  GL_SAMPLER_CUBE_SHADOW = $8DC5;
  {$EXTERNALSYM GL_SAMPLER_CUBE_SHADOW}
  GL_UNSIGNED_INT_VEC2 = $8DC6;
  {$EXTERNALSYM GL_UNSIGNED_INT_VEC2}
  GL_UNSIGNED_INT_VEC3 = $8DC7;
  {$EXTERNALSYM GL_UNSIGNED_INT_VEC3}
  GL_UNSIGNED_INT_VEC4 = $8DC8;
  {$EXTERNALSYM GL_UNSIGNED_INT_VEC4}
  GL_INT_SAMPLER_1D = $8DC9;
  {$EXTERNALSYM GL_INT_SAMPLER_1D}
  GL_INT_SAMPLER_2D = $8DCA;
  {$EXTERNALSYM GL_INT_SAMPLER_2D}
  GL_INT_SAMPLER_3D = $8DCB;
  {$EXTERNALSYM GL_INT_SAMPLER_3D}
  GL_INT_SAMPLER_CUBE = $8DCC;
  {$EXTERNALSYM GL_INT_SAMPLER_CUBE}
  GL_INT_SAMPLER_1D_ARRAY = $8DCE;
  {$EXTERNALSYM GL_INT_SAMPLER_1D_ARRAY}
  GL_INT_SAMPLER_2D_ARRAY = $8DCF;
  {$EXTERNALSYM GL_INT_SAMPLER_2D_ARRAY}
  GL_UNSIGNED_INT_SAMPLER_1D = $8DD1;
  {$EXTERNALSYM GL_UNSIGNED_INT_SAMPLER_1D}
  GL_UNSIGNED_INT_SAMPLER_2D = $8DD2;
  {$EXTERNALSYM GL_UNSIGNED_INT_SAMPLER_2D}
  GL_UNSIGNED_INT_SAMPLER_3D = $8DD3;
  {$EXTERNALSYM GL_UNSIGNED_INT_SAMPLER_3D}
  GL_UNSIGNED_INT_SAMPLER_CUBE = $8DD4;
  {$EXTERNALSYM GL_UNSIGNED_INT_SAMPLER_CUBE}
  GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = $8DD6;
  {$EXTERNALSYM GL_UNSIGNED_INT_SAMPLER_1D_ARRAY}
  GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = $8DD7;
  {$EXTERNALSYM GL_UNSIGNED_INT_SAMPLER_2D_ARRAY}
  GL_QUERY_WAIT = $8E13;
  {$EXTERNALSYM GL_QUERY_WAIT}
  GL_QUERY_NO_WAIT = $8E14;
  {$EXTERNALSYM GL_QUERY_NO_WAIT}
  GL_QUERY_BY_REGION_WAIT = $8E15;
  {$EXTERNALSYM GL_QUERY_BY_REGION_WAIT}
  GL_QUERY_BY_REGION_NO_WAIT = $8E16;
  {$EXTERNALSYM GL_QUERY_BY_REGION_NO_WAIT}
  GL_BUFFER_ACCESS_FLAGS = $911F;
  {$EXTERNALSYM GL_BUFFER_ACCESS_FLAGS}
  GL_BUFFER_MAP_LENGTH = $9120;
  {$EXTERNALSYM GL_BUFFER_MAP_LENGTH}
  GL_BUFFER_MAP_OFFSET = $9121;
  {$EXTERNALSYM GL_BUFFER_MAP_OFFSET}
  GL_DEPTH_COMPONENT32F = $8CAC;
  {$EXTERNALSYM GL_DEPTH_COMPONENT32F}
  GL_DEPTH32F_STENCIL8 = $8CAD;
  {$EXTERNALSYM GL_DEPTH32F_STENCIL8}
  GL_FLOAT_32_UNSIGNED_INT_24_8_REV = $8DAD;
  {$EXTERNALSYM GL_FLOAT_32_UNSIGNED_INT_24_8_REV}
  GL_INVALID_FRAMEBUFFER_OPERATION = $0506;
  {$EXTERNALSYM GL_INVALID_FRAMEBUFFER_OPERATION}
  GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = $8210;
  {$EXTERNALSYM GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING}
  GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = $8211;
  {$EXTERNALSYM GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE}
  GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = $8212;
  {$EXTERNALSYM GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE}
  GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = $8213;
  {$EXTERNALSYM GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE}
  GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = $8214;
  {$EXTERNALSYM GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE}
  GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = $8215;
  {$EXTERNALSYM GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE}
  GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = $8216;
  {$EXTERNALSYM GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE}
  GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = $8217;
  {$EXTERNALSYM GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE}
  GL_FRAMEBUFFER_DEFAULT = $8218;
  {$EXTERNALSYM GL_FRAMEBUFFER_DEFAULT}
  GL_FRAMEBUFFER_UNDEFINED = $8219;
  {$EXTERNALSYM GL_FRAMEBUFFER_UNDEFINED}
  GL_DEPTH_STENCIL_ATTACHMENT = $821A;
  {$EXTERNALSYM GL_DEPTH_STENCIL_ATTACHMENT}
  GL_MAX_RENDERBUFFER_SIZE = $84E8;
  {$EXTERNALSYM GL_MAX_RENDERBUFFER_SIZE}
  GL_DEPTH_STENCIL = $84F9;
  {$EXTERNALSYM GL_DEPTH_STENCIL}
  GL_UNSIGNED_INT_24_8 = $84FA;
  {$EXTERNALSYM GL_UNSIGNED_INT_24_8}
  GL_DEPTH24_STENCIL8 = $88F0;
  {$EXTERNALSYM GL_DEPTH24_STENCIL8}
  GL_TEXTURE_STENCIL_SIZE = $88F1;
  {$EXTERNALSYM GL_TEXTURE_STENCIL_SIZE}
  GL_TEXTURE_RED_TYPE = $8C10;
  {$EXTERNALSYM GL_TEXTURE_RED_TYPE}
  GL_TEXTURE_GREEN_TYPE = $8C11;
  {$EXTERNALSYM GL_TEXTURE_GREEN_TYPE}
  GL_TEXTURE_BLUE_TYPE = $8C12;
  {$EXTERNALSYM GL_TEXTURE_BLUE_TYPE}
  GL_TEXTURE_ALPHA_TYPE = $8C13;
  {$EXTERNALSYM GL_TEXTURE_ALPHA_TYPE}
  GL_TEXTURE_DEPTH_TYPE = $8C16;
  {$EXTERNALSYM GL_TEXTURE_DEPTH_TYPE}
  GL_UNSIGNED_NORMALIZED = $8C17;
  {$EXTERNALSYM GL_UNSIGNED_NORMALIZED}
  GL_FRAMEBUFFER_BINDING = $8CA6;
  {$EXTERNALSYM GL_FRAMEBUFFER_BINDING}
  GL_DRAW_FRAMEBUFFER_BINDING = $8CA6;
  {$EXTERNALSYM GL_DRAW_FRAMEBUFFER_BINDING}
  GL_RENDERBUFFER_BINDING = $8CA7;
  {$EXTERNALSYM GL_RENDERBUFFER_BINDING}
  GL_READ_FRAMEBUFFER = $8CA8;
  {$EXTERNALSYM GL_READ_FRAMEBUFFER}
  GL_DRAW_FRAMEBUFFER = $8CA9;
  {$EXTERNALSYM GL_DRAW_FRAMEBUFFER}
  GL_READ_FRAMEBUFFER_BINDING = $8CAA;
  {$EXTERNALSYM GL_READ_FRAMEBUFFER_BINDING}
  GL_RENDERBUFFER_SAMPLES = $8CAB;
  {$EXTERNALSYM GL_RENDERBUFFER_SAMPLES}
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = $8CD0;
  {$EXTERNALSYM GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE}
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = $8CD1;
  {$EXTERNALSYM GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME}
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = $8CD2;
  {$EXTERNALSYM GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL}
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = $8CD3;
  {$EXTERNALSYM GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE}
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = $8CD4;
  {$EXTERNALSYM GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER}
  GL_FRAMEBUFFER_COMPLETE = $8CD5;
  {$EXTERNALSYM GL_FRAMEBUFFER_COMPLETE}
  GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = $8CD6;
  {$EXTERNALSYM GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT}
  GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = $8CD7;
  {$EXTERNALSYM GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT}
  GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = $8CDB;
  {$EXTERNALSYM GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER}
  GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = $8CDC;
  {$EXTERNALSYM GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER}
  GL_FRAMEBUFFER_UNSUPPORTED = $8CDD;
  {$EXTERNALSYM GL_FRAMEBUFFER_UNSUPPORTED}
  GL_MAX_COLOR_ATTACHMENTS = $8CDF;
  {$EXTERNALSYM GL_MAX_COLOR_ATTACHMENTS}
  GL_COLOR_ATTACHMENT0 = $8CE0;
  {$EXTERNALSYM GL_COLOR_ATTACHMENT0}
  GL_COLOR_ATTACHMENT1 = $8CE1;
  {$EXTERNALSYM GL_COLOR_ATTACHMENT1}
  GL_COLOR_ATTACHMENT2 = $8CE2;
  {$EXTERNALSYM GL_COLOR_ATTACHMENT2}
  GL_COLOR_ATTACHMENT3 = $8CE3;
  {$EXTERNALSYM GL_COLOR_ATTACHMENT3}
  GL_COLOR_ATTACHMENT4 = $8CE4;
  {$EXTERNALSYM GL_COLOR_ATTACHMENT4}
  GL_COLOR_ATTACHMENT5 = $8CE5;
  {$EXTERNALSYM GL_COLOR_ATTACHMENT5}
  GL_COLOR_ATTACHMENT6 = $8CE6;
  {$EXTERNALSYM GL_COLOR_ATTACHMENT6}
  GL_COLOR_ATTACHMENT7 = $8CE7;
  {$EXTERNALSYM GL_COLOR_ATTACHMENT7}
  GL_COLOR_ATTACHMENT8 = $8CE8;
  {$EXTERNALSYM GL_COLOR_ATTACHMENT8}
  GL_COLOR_ATTACHMENT9 = $8CE9;
  {$EXTERNALSYM GL_COLOR_ATTACHMENT9}
  GL_COLOR_ATTACHMENT10 = $8CEA;
  {$EXTERNALSYM GL_COLOR_ATTACHMENT10}
  GL_COLOR_ATTACHMENT11 = $8CEB;
  {$EXTERNALSYM GL_COLOR_ATTACHMENT11}
  GL_COLOR_ATTACHMENT12 = $8CEC;
  {$EXTERNALSYM GL_COLOR_ATTACHMENT12}
  GL_COLOR_ATTACHMENT13 = $8CED;
  {$EXTERNALSYM GL_COLOR_ATTACHMENT13}
  GL_COLOR_ATTACHMENT14 = $8CEE;
  {$EXTERNALSYM GL_COLOR_ATTACHMENT14}
  GL_COLOR_ATTACHMENT15 = $8CEF;
  {$EXTERNALSYM GL_COLOR_ATTACHMENT15}
  GL_DEPTH_ATTACHMENT = $8D00;
  {$EXTERNALSYM GL_DEPTH_ATTACHMENT}
  GL_STENCIL_ATTACHMENT = $8D20;
  {$EXTERNALSYM GL_STENCIL_ATTACHMENT}
  GL_FRAMEBUFFER = $8D40;
  {$EXTERNALSYM GL_FRAMEBUFFER}
  GL_RENDERBUFFER = $8D41;
  {$EXTERNALSYM GL_RENDERBUFFER}
  GL_RENDERBUFFER_WIDTH = $8D42;
  {$EXTERNALSYM GL_RENDERBUFFER_WIDTH}
  GL_RENDERBUFFER_HEIGHT = $8D43;
  {$EXTERNALSYM GL_RENDERBUFFER_HEIGHT}
  GL_RENDERBUFFER_INTERNAL_FORMAT = $8D44;
  {$EXTERNALSYM GL_RENDERBUFFER_INTERNAL_FORMAT}
  GL_STENCIL_INDEX1 = $8D46;
  {$EXTERNALSYM GL_STENCIL_INDEX1}
  GL_STENCIL_INDEX4 = $8D47;
  {$EXTERNALSYM GL_STENCIL_INDEX4}
  GL_STENCIL_INDEX8 = $8D48;
  {$EXTERNALSYM GL_STENCIL_INDEX8}
  GL_STENCIL_INDEX16 = $8D49;
  {$EXTERNALSYM GL_STENCIL_INDEX16}
  GL_RENDERBUFFER_RED_SIZE = $8D50;
  {$EXTERNALSYM GL_RENDERBUFFER_RED_SIZE}
  GL_RENDERBUFFER_GREEN_SIZE = $8D51;
  {$EXTERNALSYM GL_RENDERBUFFER_GREEN_SIZE}
  GL_RENDERBUFFER_BLUE_SIZE = $8D52;
  {$EXTERNALSYM GL_RENDERBUFFER_BLUE_SIZE}
  GL_RENDERBUFFER_ALPHA_SIZE = $8D53;
  {$EXTERNALSYM GL_RENDERBUFFER_ALPHA_SIZE}
  GL_RENDERBUFFER_DEPTH_SIZE = $8D54;
  {$EXTERNALSYM GL_RENDERBUFFER_DEPTH_SIZE}
  GL_RENDERBUFFER_STENCIL_SIZE = $8D55;
  {$EXTERNALSYM GL_RENDERBUFFER_STENCIL_SIZE}
  GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = $8D56;
  {$EXTERNALSYM GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE}
  GL_MAX_SAMPLES = $8D57;
  {$EXTERNALSYM GL_MAX_SAMPLES}
  GL_INDEX = $8222;
  {$EXTERNALSYM GL_INDEX}
  GL_TEXTURE_LUMINANCE_TYPE = $8C14;
  {$EXTERNALSYM GL_TEXTURE_LUMINANCE_TYPE}
  GL_TEXTURE_INTENSITY_TYPE = $8C15;
  {$EXTERNALSYM GL_TEXTURE_INTENSITY_TYPE}
  GL_FRAMEBUFFER_SRGB = $8DB9;
  {$EXTERNALSYM GL_FRAMEBUFFER_SRGB}
  GL_HALF_FLOAT = $140B;
  {$EXTERNALSYM GL_HALF_FLOAT}
  GL_MAP_READ_BIT = $0001;
  {$EXTERNALSYM GL_MAP_READ_BIT}
  GL_MAP_WRITE_BIT = $0002;
  {$EXTERNALSYM GL_MAP_WRITE_BIT}
  GL_MAP_INVALIDATE_RANGE_BIT = $0004;
  {$EXTERNALSYM GL_MAP_INVALIDATE_RANGE_BIT}
  GL_MAP_INVALIDATE_BUFFER_BIT = $0008;
  {$EXTERNALSYM GL_MAP_INVALIDATE_BUFFER_BIT}
  GL_MAP_FLUSH_EXPLICIT_BIT = $0010;
  {$EXTERNALSYM GL_MAP_FLUSH_EXPLICIT_BIT}
  GL_MAP_UNSYNCHRONIZED_BIT = $0020;
  {$EXTERNALSYM GL_MAP_UNSYNCHRONIZED_BIT}
  GL_COMPRESSED_RED_RGTC1 = $8DBB;
  {$EXTERNALSYM GL_COMPRESSED_RED_RGTC1}
  GL_COMPRESSED_SIGNED_RED_RGTC1 = $8DBC;
  {$EXTERNALSYM GL_COMPRESSED_SIGNED_RED_RGTC1}
  GL_COMPRESSED_RG_RGTC2 = $8DBD;
  {$EXTERNALSYM GL_COMPRESSED_RG_RGTC2}
  GL_COMPRESSED_SIGNED_RG_RGTC2 = $8DBE;
  {$EXTERNALSYM GL_COMPRESSED_SIGNED_RG_RGTC2}
  GL_RG = $8227;
  {$EXTERNALSYM GL_RG}
  GL_RG_INTEGER = $8228;
  {$EXTERNALSYM GL_RG_INTEGER}
  GL_R8 = $8229;
  {$EXTERNALSYM GL_R8}
  GL_R16 = $822A;
  {$EXTERNALSYM GL_R16}
  GL_RG8 = $822B;
  {$EXTERNALSYM GL_RG8}
  GL_RG16 = $822C;
  {$EXTERNALSYM GL_RG16}
  GL_R16F = $822D;
  {$EXTERNALSYM GL_R16F}
  GL_R32F = $822E;
  {$EXTERNALSYM GL_R32F}
  GL_RG16F = $822F;
  {$EXTERNALSYM GL_RG16F}
  GL_RG32F = $8230;
  {$EXTERNALSYM GL_RG32F}
  GL_R8I = $8231;
  {$EXTERNALSYM GL_R8I}
  GL_R8UI = $8232;
  {$EXTERNALSYM GL_R8UI}
  GL_R16I = $8233;
  {$EXTERNALSYM GL_R16I}
  GL_R16UI = $8234;
  {$EXTERNALSYM GL_R16UI}
  GL_R32I = $8235;
  {$EXTERNALSYM GL_R32I}
  GL_R32UI = $8236;
  {$EXTERNALSYM GL_R32UI}
  GL_RG8I = $8237;
  {$EXTERNALSYM GL_RG8I}
  GL_RG8UI = $8238;
  {$EXTERNALSYM GL_RG8UI}
  GL_RG16I = $8239;
  {$EXTERNALSYM GL_RG16I}
  GL_RG16UI = $823A;
  {$EXTERNALSYM GL_RG16UI}
  GL_RG32I = $823B;
  {$EXTERNALSYM GL_RG32I}
  GL_RG32UI = $823C;
  {$EXTERNALSYM GL_RG32UI}
  GL_VERTEX_ARRAY_BINDING = $85B5;
  {$EXTERNALSYM GL_VERTEX_ARRAY_BINDING}
  GL_CLAMP_VERTEX_COLOR = $891A;
  {$EXTERNALSYM GL_CLAMP_VERTEX_COLOR}
  GL_CLAMP_FRAGMENT_COLOR = $891B;
  {$EXTERNALSYM GL_CLAMP_FRAGMENT_COLOR}
  GL_ALPHA_INTEGER = $8D97;
  {$EXTERNALSYM GL_ALPHA_INTEGER}

{ GL_VERSION_3_1 }
  GL_SAMPLER_2D_RECT = $8B63;
  {$EXTERNALSYM GL_SAMPLER_2D_RECT}
  GL_SAMPLER_2D_RECT_SHADOW = $8B64;
  {$EXTERNALSYM GL_SAMPLER_2D_RECT_SHADOW}
  GL_SAMPLER_BUFFER = $8DC2;
  {$EXTERNALSYM GL_SAMPLER_BUFFER}
  GL_INT_SAMPLER_2D_RECT = $8DCD;
  {$EXTERNALSYM GL_INT_SAMPLER_2D_RECT}
  GL_INT_SAMPLER_BUFFER = $8DD0;
  {$EXTERNALSYM GL_INT_SAMPLER_BUFFER}
  GL_UNSIGNED_INT_SAMPLER_2D_RECT = $8DD5;
  {$EXTERNALSYM GL_UNSIGNED_INT_SAMPLER_2D_RECT}
  GL_UNSIGNED_INT_SAMPLER_BUFFER = $8DD8;
  {$EXTERNALSYM GL_UNSIGNED_INT_SAMPLER_BUFFER}
  GL_TEXTURE_BUFFER = $8C2A;
  {$EXTERNALSYM GL_TEXTURE_BUFFER}
  GL_MAX_TEXTURE_BUFFER_SIZE = $8C2B;
  {$EXTERNALSYM GL_MAX_TEXTURE_BUFFER_SIZE}
  GL_TEXTURE_BINDING_BUFFER = $8C2C;
  {$EXTERNALSYM GL_TEXTURE_BINDING_BUFFER}
  GL_TEXTURE_BUFFER_DATA_STORE_BINDING = $8C2D;
  {$EXTERNALSYM GL_TEXTURE_BUFFER_DATA_STORE_BINDING}
  GL_TEXTURE_RECTANGLE = $84F5;
  {$EXTERNALSYM GL_TEXTURE_RECTANGLE}
  GL_TEXTURE_BINDING_RECTANGLE = $84F6;
  {$EXTERNALSYM GL_TEXTURE_BINDING_RECTANGLE}
  GL_PROXY_TEXTURE_RECTANGLE = $84F7;
  {$EXTERNALSYM GL_PROXY_TEXTURE_RECTANGLE}
  GL_MAX_RECTANGLE_TEXTURE_SIZE = $84F8;
  {$EXTERNALSYM GL_MAX_RECTANGLE_TEXTURE_SIZE}
  GL_R8_SNORM = $8F94;
  {$EXTERNALSYM GL_R8_SNORM}
  GL_RG8_SNORM = $8F95;
  {$EXTERNALSYM GL_RG8_SNORM}
  GL_RGB8_SNORM = $8F96;
  {$EXTERNALSYM GL_RGB8_SNORM}
  GL_RGBA8_SNORM = $8F97;
  {$EXTERNALSYM GL_RGBA8_SNORM}
  GL_R16_SNORM = $8F98;
  {$EXTERNALSYM GL_R16_SNORM}
  GL_RG16_SNORM = $8F99;
  {$EXTERNALSYM GL_RG16_SNORM}
  GL_RGB16_SNORM = $8F9A;
  {$EXTERNALSYM GL_RGB16_SNORM}
  GL_RGBA16_SNORM = $8F9B;
  {$EXTERNALSYM GL_RGBA16_SNORM}
  GL_SIGNED_NORMALIZED = $8F9C;
  {$EXTERNALSYM GL_SIGNED_NORMALIZED}
  GL_PRIMITIVE_RESTART = $8F9D;
  {$EXTERNALSYM GL_PRIMITIVE_RESTART}
  GL_PRIMITIVE_RESTART_INDEX = $8F9E;
  {$EXTERNALSYM GL_PRIMITIVE_RESTART_INDEX}
  GL_COPY_READ_BUFFER = $8F36;
  {$EXTERNALSYM GL_COPY_READ_BUFFER}
  GL_COPY_WRITE_BUFFER = $8F37;
  {$EXTERNALSYM GL_COPY_WRITE_BUFFER}
  GL_UNIFORM_BUFFER = $8A11;
  {$EXTERNALSYM GL_UNIFORM_BUFFER}
  GL_UNIFORM_BUFFER_BINDING = $8A28;
  {$EXTERNALSYM GL_UNIFORM_BUFFER_BINDING}
  GL_UNIFORM_BUFFER_START = $8A29;
  {$EXTERNALSYM GL_UNIFORM_BUFFER_START}
  GL_UNIFORM_BUFFER_SIZE = $8A2A;
  {$EXTERNALSYM GL_UNIFORM_BUFFER_SIZE}
  GL_MAX_VERTEX_UNIFORM_BLOCKS = $8A2B;
  {$EXTERNALSYM GL_MAX_VERTEX_UNIFORM_BLOCKS}
  GL_MAX_FRAGMENT_UNIFORM_BLOCKS = $8A2D;
  {$EXTERNALSYM GL_MAX_FRAGMENT_UNIFORM_BLOCKS}
  GL_MAX_COMBINED_UNIFORM_BLOCKS = $8A2E;
  {$EXTERNALSYM GL_MAX_COMBINED_UNIFORM_BLOCKS}
  GL_MAX_UNIFORM_BUFFER_BINDINGS = $8A2F;
  {$EXTERNALSYM GL_MAX_UNIFORM_BUFFER_BINDINGS}
  GL_MAX_UNIFORM_BLOCK_SIZE = $8A30;
  {$EXTERNALSYM GL_MAX_UNIFORM_BLOCK_SIZE}
  GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = $8A31;
  {$EXTERNALSYM GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS}
  GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = $8A33;
  {$EXTERNALSYM GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS}
  GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = $8A34;
  {$EXTERNALSYM GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT}
  GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = $8A35;
  {$EXTERNALSYM GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH}
  GL_ACTIVE_UNIFORM_BLOCKS = $8A36;
  {$EXTERNALSYM GL_ACTIVE_UNIFORM_BLOCKS}
  GL_UNIFORM_TYPE = $8A37;
  {$EXTERNALSYM GL_UNIFORM_TYPE}
  GL_UNIFORM_SIZE = $8A38;
  {$EXTERNALSYM GL_UNIFORM_SIZE}
  GL_UNIFORM_NAME_LENGTH = $8A39;
  {$EXTERNALSYM GL_UNIFORM_NAME_LENGTH}
  GL_UNIFORM_BLOCK_INDEX = $8A3A;
  {$EXTERNALSYM GL_UNIFORM_BLOCK_INDEX}
  GL_UNIFORM_OFFSET = $8A3B;
  {$EXTERNALSYM GL_UNIFORM_OFFSET}
  GL_UNIFORM_ARRAY_STRIDE = $8A3C;
  {$EXTERNALSYM GL_UNIFORM_ARRAY_STRIDE}
  GL_UNIFORM_MATRIX_STRIDE = $8A3D;
  {$EXTERNALSYM GL_UNIFORM_MATRIX_STRIDE}
  GL_UNIFORM_IS_ROW_MAJOR = $8A3E;
  {$EXTERNALSYM GL_UNIFORM_IS_ROW_MAJOR}
  GL_UNIFORM_BLOCK_BINDING = $8A3F;
  {$EXTERNALSYM GL_UNIFORM_BLOCK_BINDING}
  GL_UNIFORM_BLOCK_DATA_SIZE = $8A40;
  {$EXTERNALSYM GL_UNIFORM_BLOCK_DATA_SIZE}
  GL_UNIFORM_BLOCK_NAME_LENGTH = $8A41;
  {$EXTERNALSYM GL_UNIFORM_BLOCK_NAME_LENGTH}
  GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = $8A42;
  {$EXTERNALSYM GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS}
  GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = $8A43;
  {$EXTERNALSYM GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES}
  GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = $8A44;
  {$EXTERNALSYM GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER}
  GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = $8A46;
  {$EXTERNALSYM GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER}
  GL_INVALID_INDEX = $FFFFFFFF;
  {$EXTERNALSYM GL_INVALID_INDEX}
  GL_CONTEXT_CORE_PROFILE_BIT = $00000001;
  {$EXTERNALSYM GL_CONTEXT_CORE_PROFILE_BIT}
  GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = $00000002;
  {$EXTERNALSYM GL_CONTEXT_COMPATIBILITY_PROFILE_BIT}
  GL_LINES_ADJACENCY = $000A;
  {$EXTERNALSYM GL_LINES_ADJACENCY}
  GL_LINE_STRIP_ADJACENCY = $000B;
  {$EXTERNALSYM GL_LINE_STRIP_ADJACENCY}
  GL_TRIANGLES_ADJACENCY = $000C;
  {$EXTERNALSYM GL_TRIANGLES_ADJACENCY}
  GL_TRIANGLE_STRIP_ADJACENCY = $000D;
  {$EXTERNALSYM GL_TRIANGLE_STRIP_ADJACENCY}
  GL_PROGRAM_POINT_SIZE = $8642;
  {$EXTERNALSYM GL_PROGRAM_POINT_SIZE}
  GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = $8C29;
  {$EXTERNALSYM GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS}
  GL_FRAMEBUFFER_ATTACHMENT_LAYERED = $8DA7;
  {$EXTERNALSYM GL_FRAMEBUFFER_ATTACHMENT_LAYERED}
  GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = $8DA8;
  {$EXTERNALSYM GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS}
  GL_GEOMETRY_SHADER = $8DD9;
  {$EXTERNALSYM GL_GEOMETRY_SHADER}
  GL_GEOMETRY_VERTICES_OUT = $8916;
  {$EXTERNALSYM GL_GEOMETRY_VERTICES_OUT}
  GL_GEOMETRY_INPUT_TYPE = $8917;
  {$EXTERNALSYM GL_GEOMETRY_INPUT_TYPE}
  GL_GEOMETRY_OUTPUT_TYPE = $8918;
  {$EXTERNALSYM GL_GEOMETRY_OUTPUT_TYPE}
  GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = $8DDF;
  {$EXTERNALSYM GL_MAX_GEOMETRY_UNIFORM_COMPONENTS}
  GL_MAX_GEOMETRY_OUTPUT_VERTICES = $8DE0;
  {$EXTERNALSYM GL_MAX_GEOMETRY_OUTPUT_VERTICES}
  GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = $8DE1;
  {$EXTERNALSYM GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS}
  GL_MAX_VERTEX_OUTPUT_COMPONENTS = $9122;
  {$EXTERNALSYM GL_MAX_VERTEX_OUTPUT_COMPONENTS}
  GL_MAX_GEOMETRY_INPUT_COMPONENTS = $9123;
  {$EXTERNALSYM GL_MAX_GEOMETRY_INPUT_COMPONENTS}
  GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = $9124;
  {$EXTERNALSYM GL_MAX_GEOMETRY_OUTPUT_COMPONENTS}
  GL_MAX_FRAGMENT_INPUT_COMPONENTS = $9125;
  {$EXTERNALSYM GL_MAX_FRAGMENT_INPUT_COMPONENTS}
  GL_CONTEXT_PROFILE_MASK = $9126;
  {$EXTERNALSYM GL_CONTEXT_PROFILE_MASK}
  GL_DEPTH_CLAMP = $864F;
  {$EXTERNALSYM GL_DEPTH_CLAMP}
  GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = $8E4C;
  {$EXTERNALSYM GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION}
  GL_FIRST_VERTEX_CONVENTION = $8E4D;
  {$EXTERNALSYM GL_FIRST_VERTEX_CONVENTION}
  GL_LAST_VERTEX_CONVENTION = $8E4E;
  {$EXTERNALSYM GL_LAST_VERTEX_CONVENTION}
  GL_PROVOKING_VERTEX = $8E4F;
  {$EXTERNALSYM GL_PROVOKING_VERTEX}
  GL_TEXTURE_CUBE_MAP_SEAMLESS = $884F;
  {$EXTERNALSYM GL_TEXTURE_CUBE_MAP_SEAMLESS}
  GL_MAX_SERVER_WAIT_TIMEOUT = $9111;
  {$EXTERNALSYM GL_MAX_SERVER_WAIT_TIMEOUT}
  GL_OBJECT_TYPE = $9112;
  {$EXTERNALSYM GL_OBJECT_TYPE}
  GL_SYNC_CONDITION = $9113;
  {$EXTERNALSYM GL_SYNC_CONDITION}
  GL_SYNC_STATUS = $9114;
  {$EXTERNALSYM GL_SYNC_STATUS}
  GL_SYNC_FLAGS = $9115;
  {$EXTERNALSYM GL_SYNC_FLAGS}
  GL_SYNC_FENCE = $9116;
  {$EXTERNALSYM GL_SYNC_FENCE}
  GL_SYNC_GPU_COMMANDS_COMPLETE = $9117;
  {$EXTERNALSYM GL_SYNC_GPU_COMMANDS_COMPLETE}
  GL_UNSIGNALED = $9118;
  {$EXTERNALSYM GL_UNSIGNALED}
  GL_SIGNALED = $9119;
  {$EXTERNALSYM GL_SIGNALED}
  GL_ALREADY_SIGNALED = $911A;
  {$EXTERNALSYM GL_ALREADY_SIGNALED}
  GL_TIMEOUT_EXPIRED = $911B;
  {$EXTERNALSYM GL_TIMEOUT_EXPIRED}
  GL_CONDITION_SATISFIED = $911C;
  {$EXTERNALSYM GL_CONDITION_SATISFIED}
  GL_WAIT_FAILED = $911D;
  {$EXTERNALSYM GL_WAIT_FAILED}
  GL_TIMEOUT_IGNORED = $FFFFFFFFFFFFFFFF;
  {$EXTERNALSYM GL_TIMEOUT_IGNORED}
  GL_SYNC_FLUSH_COMMANDS_BIT = $00000001;
  {$EXTERNALSYM GL_SYNC_FLUSH_COMMANDS_BIT}
  GL_SAMPLE_POSITION = $8E50;
  {$EXTERNALSYM GL_SAMPLE_POSITION}
  GL_SAMPLE_MASK = $8E51;
  {$EXTERNALSYM GL_SAMPLE_MASK}
  GL_SAMPLE_MASK_VALUE = $8E52;
  {$EXTERNALSYM GL_SAMPLE_MASK_VALUE}
  GL_MAX_SAMPLE_MASK_WORDS = $8E59;
  {$EXTERNALSYM GL_MAX_SAMPLE_MASK_WORDS}
  GL_TEXTURE_2D_MULTISAMPLE = $9100;
  {$EXTERNALSYM GL_TEXTURE_2D_MULTISAMPLE}
  GL_PROXY_TEXTURE_2D_MULTISAMPLE = $9101;
  {$EXTERNALSYM GL_PROXY_TEXTURE_2D_MULTISAMPLE}
  GL_TEXTURE_2D_MULTISAMPLE_ARRAY = $9102;
  {$EXTERNALSYM GL_TEXTURE_2D_MULTISAMPLE_ARRAY}
  GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = $9103;
  {$EXTERNALSYM GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY}
  GL_TEXTURE_BINDING_2D_MULTISAMPLE = $9104;
  {$EXTERNALSYM GL_TEXTURE_BINDING_2D_MULTISAMPLE}
  GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = $9105;
  {$EXTERNALSYM GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY}
  GL_TEXTURE_SAMPLES = $9106;
  {$EXTERNALSYM GL_TEXTURE_SAMPLES}
  GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = $9107;
  {$EXTERNALSYM GL_TEXTURE_FIXED_SAMPLE_LOCATIONS}
  GL_SAMPLER_2D_MULTISAMPLE = $9108;
  {$EXTERNALSYM GL_SAMPLER_2D_MULTISAMPLE}
  GL_INT_SAMPLER_2D_MULTISAMPLE = $9109;
  {$EXTERNALSYM GL_INT_SAMPLER_2D_MULTISAMPLE}
  GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = $910A;
  {$EXTERNALSYM GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE}
  GL_SAMPLER_2D_MULTISAMPLE_ARRAY = $910B;
  {$EXTERNALSYM GL_SAMPLER_2D_MULTISAMPLE_ARRAY}
  GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = $910C;
  {$EXTERNALSYM GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY}
  GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = $910D;
  {$EXTERNALSYM GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY}
  GL_MAX_COLOR_TEXTURE_SAMPLES = $910E;
  {$EXTERNALSYM GL_MAX_COLOR_TEXTURE_SAMPLES}
  GL_MAX_DEPTH_TEXTURE_SAMPLES = $910F;
  {$EXTERNALSYM GL_MAX_DEPTH_TEXTURE_SAMPLES}
  GL_MAX_INTEGER_SAMPLES = $9110;
  {$EXTERNALSYM GL_MAX_INTEGER_SAMPLES}

{ GL_VERSION_3_3 }
  GL_VERTEX_ATTRIB_ARRAY_DIVISOR = $88FE;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_ARRAY_DIVISOR}
  GL_SRC1_COLOR = $88F9;
  {$EXTERNALSYM GL_SRC1_COLOR}
  GL_ONE_MINUS_SRC1_COLOR = $88FA;
  {$EXTERNALSYM GL_ONE_MINUS_SRC1_COLOR}
  GL_ONE_MINUS_SRC1_ALPHA = $88FB;
  {$EXTERNALSYM GL_ONE_MINUS_SRC1_ALPHA}
  GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = $88FC;
  {$EXTERNALSYM GL_MAX_DUAL_SOURCE_DRAW_BUFFERS}
  GL_ANY_SAMPLES_PASSED = $8C2F;
  {$EXTERNALSYM GL_ANY_SAMPLES_PASSED}
  GL_SAMPLER_BINDING = $8919;
  {$EXTERNALSYM GL_SAMPLER_BINDING}
  GL_RGB10_A2UI = $906F;
  {$EXTERNALSYM GL_RGB10_A2UI}
  GL_TEXTURE_SWIZZLE_R = $8E42;
  {$EXTERNALSYM GL_TEXTURE_SWIZZLE_R}
  GL_TEXTURE_SWIZZLE_G = $8E43;
  {$EXTERNALSYM GL_TEXTURE_SWIZZLE_G}
  GL_TEXTURE_SWIZZLE_B = $8E44;
  {$EXTERNALSYM GL_TEXTURE_SWIZZLE_B}
  GL_TEXTURE_SWIZZLE_A = $8E45;
  {$EXTERNALSYM GL_TEXTURE_SWIZZLE_A}
  GL_TEXTURE_SWIZZLE_RGBA = $8E46;
  {$EXTERNALSYM GL_TEXTURE_SWIZZLE_RGBA}
  GL_TIME_ELAPSED = $88BF;
  {$EXTERNALSYM GL_TIME_ELAPSED}
  GL_TIMESTAMP = $8E28;
  {$EXTERNALSYM GL_TIMESTAMP}
  GL_INT_2_10_10_10_REV = $8D9F;
  {$EXTERNALSYM GL_INT_2_10_10_10_REV}

{ GL_VERSION_4_0 }
  GL_SAMPLE_SHADING = $8C36;
  {$EXTERNALSYM GL_SAMPLE_SHADING}
  GL_MIN_SAMPLE_SHADING_VALUE = $8C37;
  {$EXTERNALSYM GL_MIN_SAMPLE_SHADING_VALUE}
  GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = $8E5E;
  {$EXTERNALSYM GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET}
  GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = $8E5F;
  {$EXTERNALSYM GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET}
  GL_TEXTURE_CUBE_MAP_ARRAY = $9009;
  {$EXTERNALSYM GL_TEXTURE_CUBE_MAP_ARRAY}
  GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = $900A;
  {$EXTERNALSYM GL_TEXTURE_BINDING_CUBE_MAP_ARRAY}
  GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = $900B;
  {$EXTERNALSYM GL_PROXY_TEXTURE_CUBE_MAP_ARRAY}
  GL_SAMPLER_CUBE_MAP_ARRAY = $900C;
  {$EXTERNALSYM GL_SAMPLER_CUBE_MAP_ARRAY}
  GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = $900D;
  {$EXTERNALSYM GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW}
  GL_INT_SAMPLER_CUBE_MAP_ARRAY = $900E;
  {$EXTERNALSYM GL_INT_SAMPLER_CUBE_MAP_ARRAY}
  GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = $900F;
  {$EXTERNALSYM GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY}
  GL_DRAW_INDIRECT_BUFFER = $8F3F;
  {$EXTERNALSYM GL_DRAW_INDIRECT_BUFFER}
  GL_DRAW_INDIRECT_BUFFER_BINDING = $8F43;
  {$EXTERNALSYM GL_DRAW_INDIRECT_BUFFER_BINDING}
  GL_GEOMETRY_SHADER_INVOCATIONS = $887F;
  {$EXTERNALSYM GL_GEOMETRY_SHADER_INVOCATIONS}
  GL_MAX_GEOMETRY_SHADER_INVOCATIONS = $8E5A;
  {$EXTERNALSYM GL_MAX_GEOMETRY_SHADER_INVOCATIONS}
  GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = $8E5B;
  {$EXTERNALSYM GL_MIN_FRAGMENT_INTERPOLATION_OFFSET}
  GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = $8E5C;
  {$EXTERNALSYM GL_MAX_FRAGMENT_INTERPOLATION_OFFSET}
  GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = $8E5D;
  {$EXTERNALSYM GL_FRAGMENT_INTERPOLATION_OFFSET_BITS}
  GL_MAX_VERTEX_STREAMS = $8E71;
  {$EXTERNALSYM GL_MAX_VERTEX_STREAMS}
  GL_DOUBLE_VEC2 = $8FFC;
  {$EXTERNALSYM GL_DOUBLE_VEC2}
  GL_DOUBLE_VEC3 = $8FFD;
  {$EXTERNALSYM GL_DOUBLE_VEC3}
  GL_DOUBLE_VEC4 = $8FFE;
  {$EXTERNALSYM GL_DOUBLE_VEC4}
  GL_DOUBLE_MAT2 = $8F46;
  {$EXTERNALSYM GL_DOUBLE_MAT2}
  GL_DOUBLE_MAT3 = $8F47;
  {$EXTERNALSYM GL_DOUBLE_MAT3}
  GL_DOUBLE_MAT4 = $8F48;
  {$EXTERNALSYM GL_DOUBLE_MAT4}
  GL_DOUBLE_MAT2x3 = $8F49;
  {$EXTERNALSYM GL_DOUBLE_MAT2x3}
  GL_DOUBLE_MAT2x4 = $8F4A;
  {$EXTERNALSYM GL_DOUBLE_MAT2x4}
  GL_DOUBLE_MAT3x2 = $8F4B;
  {$EXTERNALSYM GL_DOUBLE_MAT3x2}
  GL_DOUBLE_MAT3x4 = $8F4C;
  {$EXTERNALSYM GL_DOUBLE_MAT3x4}
  GL_DOUBLE_MAT4x2 = $8F4D;
  {$EXTERNALSYM GL_DOUBLE_MAT4x2}
  GL_DOUBLE_MAT4x3 = $8F4E;
  {$EXTERNALSYM GL_DOUBLE_MAT4x3}
  GL_ACTIVE_SUBROUTINES = $8DE5;
  {$EXTERNALSYM GL_ACTIVE_SUBROUTINES}
  GL_ACTIVE_SUBROUTINE_UNIFORMS = $8DE6;
  {$EXTERNALSYM GL_ACTIVE_SUBROUTINE_UNIFORMS}
  GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = $8E47;
  {$EXTERNALSYM GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS}
  GL_ACTIVE_SUBROUTINE_MAX_LENGTH = $8E48;
  {$EXTERNALSYM GL_ACTIVE_SUBROUTINE_MAX_LENGTH}
  GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = $8E49;
  {$EXTERNALSYM GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH}
  GL_MAX_SUBROUTINES = $8DE7;
  {$EXTERNALSYM GL_MAX_SUBROUTINES}
  GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = $8DE8;
  {$EXTERNALSYM GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS}
  GL_NUM_COMPATIBLE_SUBROUTINES = $8E4A;
  {$EXTERNALSYM GL_NUM_COMPATIBLE_SUBROUTINES}
  GL_COMPATIBLE_SUBROUTINES = $8E4B;
  {$EXTERNALSYM GL_COMPATIBLE_SUBROUTINES}
  GL_PATCHES = $000E;
  {$EXTERNALSYM GL_PATCHES}
  GL_PATCH_VERTICES = $8E72;
  {$EXTERNALSYM GL_PATCH_VERTICES}
  GL_PATCH_DEFAULT_INNER_LEVEL = $8E73;
  {$EXTERNALSYM GL_PATCH_DEFAULT_INNER_LEVEL}
  GL_PATCH_DEFAULT_OUTER_LEVEL = $8E74;
  {$EXTERNALSYM GL_PATCH_DEFAULT_OUTER_LEVEL}
  GL_TESS_CONTROL_OUTPUT_VERTICES = $8E75;
  {$EXTERNALSYM GL_TESS_CONTROL_OUTPUT_VERTICES}
  GL_TESS_GEN_MODE = $8E76;
  {$EXTERNALSYM GL_TESS_GEN_MODE}
  GL_TESS_GEN_SPACING = $8E77;
  {$EXTERNALSYM GL_TESS_GEN_SPACING}
  GL_TESS_GEN_VERTEX_ORDER = $8E78;
  {$EXTERNALSYM GL_TESS_GEN_VERTEX_ORDER}
  GL_TESS_GEN_POINT_MODE = $8E79;
  {$EXTERNALSYM GL_TESS_GEN_POINT_MODE}
  GL_ISOLINES = $8E7A;
  {$EXTERNALSYM GL_ISOLINES}
  GL_FRACTIONAL_ODD = $8E7B;
  {$EXTERNALSYM GL_FRACTIONAL_ODD}
  GL_FRACTIONAL_EVEN = $8E7C;
  {$EXTERNALSYM GL_FRACTIONAL_EVEN}
  GL_MAX_PATCH_VERTICES = $8E7D;
  {$EXTERNALSYM GL_MAX_PATCH_VERTICES}
  GL_MAX_TESS_GEN_LEVEL = $8E7E;
  {$EXTERNALSYM GL_MAX_TESS_GEN_LEVEL}
  GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = $8E7F;
  {$EXTERNALSYM GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS}
  GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = $8E80;
  {$EXTERNALSYM GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS}
  GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = $8E81;
  {$EXTERNALSYM GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS}
  GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = $8E82;
  {$EXTERNALSYM GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS}
  GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = $8E83;
  {$EXTERNALSYM GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS}
  GL_MAX_TESS_PATCH_COMPONENTS = $8E84;
  {$EXTERNALSYM GL_MAX_TESS_PATCH_COMPONENTS}
  GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = $8E85;
  {$EXTERNALSYM GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS}
  GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = $8E86;
  {$EXTERNALSYM GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS}
  GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = $8E89;
  {$EXTERNALSYM GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS}
  GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = $8E8A;
  {$EXTERNALSYM GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS}
  GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = $886C;
  {$EXTERNALSYM GL_MAX_TESS_CONTROL_INPUT_COMPONENTS}
  GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = $886D;
  {$EXTERNALSYM GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS}
  GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = $8E1E;
  {$EXTERNALSYM GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS}
  GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = $8E1F;
  {$EXTERNALSYM GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS}
  GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = $84F0;
  {$EXTERNALSYM GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER}
  GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = $84F1;
  {$EXTERNALSYM GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER}
  GL_TESS_EVALUATION_SHADER = $8E87;
  {$EXTERNALSYM GL_TESS_EVALUATION_SHADER}
  GL_TESS_CONTROL_SHADER = $8E88;
  {$EXTERNALSYM GL_TESS_CONTROL_SHADER}
  GL_TRANSFORM_FEEDBACK = $8E22;
  {$EXTERNALSYM GL_TRANSFORM_FEEDBACK}
  GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = $8E23;
  {$EXTERNALSYM GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED}
  GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = $8E24;
  {$EXTERNALSYM GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE}
  GL_TRANSFORM_FEEDBACK_BINDING = $8E25;
  {$EXTERNALSYM GL_TRANSFORM_FEEDBACK_BINDING}
  GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = $8E70;
  {$EXTERNALSYM GL_MAX_TRANSFORM_FEEDBACK_BUFFERS}

{ GL_VERSION_4_1 }
  GL_FIXED = $140C;
  {$EXTERNALSYM GL_FIXED}
  GL_IMPLEMENTATION_COLOR_READ_TYPE = $8B9A;
  {$EXTERNALSYM GL_IMPLEMENTATION_COLOR_READ_TYPE}
  GL_IMPLEMENTATION_COLOR_READ_FORMAT = $8B9B;
  {$EXTERNALSYM GL_IMPLEMENTATION_COLOR_READ_FORMAT}
  GL_LOW_FLOAT = $8DF0;
  {$EXTERNALSYM GL_LOW_FLOAT}
  GL_MEDIUM_FLOAT = $8DF1;
  {$EXTERNALSYM GL_MEDIUM_FLOAT}
  GL_HIGH_FLOAT = $8DF2;
  {$EXTERNALSYM GL_HIGH_FLOAT}
  GL_LOW_INT = $8DF3;
  {$EXTERNALSYM GL_LOW_INT}
  GL_MEDIUM_INT = $8DF4;
  {$EXTERNALSYM GL_MEDIUM_INT}
  GL_HIGH_INT = $8DF5;
  {$EXTERNALSYM GL_HIGH_INT}
  GL_SHADER_COMPILER = $8DFA;
  {$EXTERNALSYM GL_SHADER_COMPILER}
  GL_SHADER_BINARY_FORMATS = $8DF8;
  {$EXTERNALSYM GL_SHADER_BINARY_FORMATS}
  GL_NUM_SHADER_BINARY_FORMATS = $8DF9;
  {$EXTERNALSYM GL_NUM_SHADER_BINARY_FORMATS}
  GL_MAX_VERTEX_UNIFORM_VECTORS = $8DFB;
  {$EXTERNALSYM GL_MAX_VERTEX_UNIFORM_VECTORS}
  GL_MAX_VARYING_VECTORS = $8DFC;
  {$EXTERNALSYM GL_MAX_VARYING_VECTORS}
  GL_MAX_FRAGMENT_UNIFORM_VECTORS = $8DFD;
  {$EXTERNALSYM GL_MAX_FRAGMENT_UNIFORM_VECTORS}
  GL_RGB565 = $8D62;
  {$EXTERNALSYM GL_RGB565}
  GL_PROGRAM_BINARY_RETRIEVABLE_HINT = $8257;
  {$EXTERNALSYM GL_PROGRAM_BINARY_RETRIEVABLE_HINT}
  GL_PROGRAM_BINARY_LENGTH = $8741;
  {$EXTERNALSYM GL_PROGRAM_BINARY_LENGTH}
  GL_NUM_PROGRAM_BINARY_FORMATS = $87FE;
  {$EXTERNALSYM GL_NUM_PROGRAM_BINARY_FORMATS}
  GL_PROGRAM_BINARY_FORMATS = $87FF;
  {$EXTERNALSYM GL_PROGRAM_BINARY_FORMATS}
  GL_VERTEX_SHADER_BIT = $00000001;
  {$EXTERNALSYM GL_VERTEX_SHADER_BIT}
  GL_FRAGMENT_SHADER_BIT = $00000002;
  {$EXTERNALSYM GL_FRAGMENT_SHADER_BIT}
  GL_GEOMETRY_SHADER_BIT = $00000004;
  {$EXTERNALSYM GL_GEOMETRY_SHADER_BIT}
  GL_TESS_CONTROL_SHADER_BIT = $00000008;
  {$EXTERNALSYM GL_TESS_CONTROL_SHADER_BIT}
  GL_TESS_EVALUATION_SHADER_BIT = $00000010;
  {$EXTERNALSYM GL_TESS_EVALUATION_SHADER_BIT}
  GL_ALL_SHADER_BITS = $FFFFFFFF;
  {$EXTERNALSYM GL_ALL_SHADER_BITS}
  GL_PROGRAM_SEPARABLE = $8258;
  {$EXTERNALSYM GL_PROGRAM_SEPARABLE}
  GL_ACTIVE_PROGRAM = $8259;
  {$EXTERNALSYM GL_ACTIVE_PROGRAM}
  GL_PROGRAM_PIPELINE_BINDING = $825A;
  {$EXTERNALSYM GL_PROGRAM_PIPELINE_BINDING}
  GL_MAX_VIEWPORTS = $825B;
  {$EXTERNALSYM GL_MAX_VIEWPORTS}
  GL_VIEWPORT_SUBPIXEL_BITS = $825C;
  {$EXTERNALSYM GL_VIEWPORT_SUBPIXEL_BITS}
  GL_VIEWPORT_BOUNDS_RANGE = $825D;
  {$EXTERNALSYM GL_VIEWPORT_BOUNDS_RANGE}
  GL_LAYER_PROVOKING_VERTEX = $825E;
  {$EXTERNALSYM GL_LAYER_PROVOKING_VERTEX}
  GL_VIEWPORT_INDEX_PROVOKING_VERTEX = $825F;
  {$EXTERNALSYM GL_VIEWPORT_INDEX_PROVOKING_VERTEX}
  GL_UNDEFINED_VERTEX = $8260;
  {$EXTERNALSYM GL_UNDEFINED_VERTEX}

{ GL_VERSION_4_2 }
  GL_UNPACK_COMPRESSED_BLOCK_WIDTH = $9127;
  {$EXTERNALSYM GL_UNPACK_COMPRESSED_BLOCK_WIDTH}
  GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = $9128;
  {$EXTERNALSYM GL_UNPACK_COMPRESSED_BLOCK_HEIGHT}
  GL_UNPACK_COMPRESSED_BLOCK_DEPTH = $9129;
  {$EXTERNALSYM GL_UNPACK_COMPRESSED_BLOCK_DEPTH}
  GL_UNPACK_COMPRESSED_BLOCK_SIZE = $912A;
  {$EXTERNALSYM GL_UNPACK_COMPRESSED_BLOCK_SIZE}
  GL_PACK_COMPRESSED_BLOCK_WIDTH = $912B;
  {$EXTERNALSYM GL_PACK_COMPRESSED_BLOCK_WIDTH}
  GL_PACK_COMPRESSED_BLOCK_HEIGHT = $912C;
  {$EXTERNALSYM GL_PACK_COMPRESSED_BLOCK_HEIGHT}
  GL_PACK_COMPRESSED_BLOCK_DEPTH = $912D;
  {$EXTERNALSYM GL_PACK_COMPRESSED_BLOCK_DEPTH}
  GL_PACK_COMPRESSED_BLOCK_SIZE = $912E;
  {$EXTERNALSYM GL_PACK_COMPRESSED_BLOCK_SIZE}
  GL_NUM_SAMPLE_COUNTS = $9380;
  {$EXTERNALSYM GL_NUM_SAMPLE_COUNTS}
  GL_MIN_MAP_BUFFER_ALIGNMENT = $90BC;
  {$EXTERNALSYM GL_MIN_MAP_BUFFER_ALIGNMENT}
  GL_ATOMIC_COUNTER_BUFFER = $92C0;
  {$EXTERNALSYM GL_ATOMIC_COUNTER_BUFFER}
  GL_ATOMIC_COUNTER_BUFFER_BINDING = $92C1;
  {$EXTERNALSYM GL_ATOMIC_COUNTER_BUFFER_BINDING}
  GL_ATOMIC_COUNTER_BUFFER_START = $92C2;
  {$EXTERNALSYM GL_ATOMIC_COUNTER_BUFFER_START}
  GL_ATOMIC_COUNTER_BUFFER_SIZE = $92C3;
  {$EXTERNALSYM GL_ATOMIC_COUNTER_BUFFER_SIZE}
  GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = $92C4;
  {$EXTERNALSYM GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE}
  GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = $92C5;
  {$EXTERNALSYM GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS}
  GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = $92C6;
  {$EXTERNALSYM GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES}
  GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = $92C7;
  {$EXTERNALSYM GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER}
  GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = $92C8;
  {$EXTERNALSYM GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER}
  GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = $92C9;
  {$EXTERNALSYM GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER}
  GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = $92CA;
  {$EXTERNALSYM GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER}
  GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = $92CB;
  {$EXTERNALSYM GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER}
  GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = $92CC;
  {$EXTERNALSYM GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS}
  GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = $92CD;
  {$EXTERNALSYM GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS}
  GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = $92CE;
  {$EXTERNALSYM GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS}
  GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = $92CF;
  {$EXTERNALSYM GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS}
  GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = $92D0;
  {$EXTERNALSYM GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS}
  GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = $92D1;
  {$EXTERNALSYM GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS}
  GL_MAX_VERTEX_ATOMIC_COUNTERS = $92D2;
  {$EXTERNALSYM GL_MAX_VERTEX_ATOMIC_COUNTERS}
  GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = $92D3;
  {$EXTERNALSYM GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS}
  GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = $92D4;
  {$EXTERNALSYM GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS}
  GL_MAX_GEOMETRY_ATOMIC_COUNTERS = $92D5;
  {$EXTERNALSYM GL_MAX_GEOMETRY_ATOMIC_COUNTERS}
  GL_MAX_FRAGMENT_ATOMIC_COUNTERS = $92D6;
  {$EXTERNALSYM GL_MAX_FRAGMENT_ATOMIC_COUNTERS}
  GL_MAX_COMBINED_ATOMIC_COUNTERS = $92D7;
  {$EXTERNALSYM GL_MAX_COMBINED_ATOMIC_COUNTERS}
  GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = $92D8;
  {$EXTERNALSYM GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE}
  GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = $92DC;
  {$EXTERNALSYM GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS}
  GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = $92D9;
  {$EXTERNALSYM GL_ACTIVE_ATOMIC_COUNTER_BUFFERS}
  GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = $92DA;
  {$EXTERNALSYM GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX}
  GL_UNSIGNED_INT_ATOMIC_COUNTER = $92DB;
  {$EXTERNALSYM GL_UNSIGNED_INT_ATOMIC_COUNTER}
  GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = $00000001;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT}
  GL_ELEMENT_ARRAY_BARRIER_BIT = $00000002;
  {$EXTERNALSYM GL_ELEMENT_ARRAY_BARRIER_BIT}
  GL_UNIFORM_BARRIER_BIT = $00000004;
  {$EXTERNALSYM GL_UNIFORM_BARRIER_BIT}
  GL_TEXTURE_FETCH_BARRIER_BIT = $00000008;
  {$EXTERNALSYM GL_TEXTURE_FETCH_BARRIER_BIT}
  GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = $00000020;
  {$EXTERNALSYM GL_SHADER_IMAGE_ACCESS_BARRIER_BIT}
  GL_COMMAND_BARRIER_BIT = $00000040;
  {$EXTERNALSYM GL_COMMAND_BARRIER_BIT}
  GL_PIXEL_BUFFER_BARRIER_BIT = $00000080;
  {$EXTERNALSYM GL_PIXEL_BUFFER_BARRIER_BIT}
  GL_TEXTURE_UPDATE_BARRIER_BIT = $00000100;
  {$EXTERNALSYM GL_TEXTURE_UPDATE_BARRIER_BIT}
  GL_BUFFER_UPDATE_BARRIER_BIT = $00000200;
  {$EXTERNALSYM GL_BUFFER_UPDATE_BARRIER_BIT}
  GL_FRAMEBUFFER_BARRIER_BIT = $00000400;
  {$EXTERNALSYM GL_FRAMEBUFFER_BARRIER_BIT}
  GL_TRANSFORM_FEEDBACK_BARRIER_BIT = $00000800;
  {$EXTERNALSYM GL_TRANSFORM_FEEDBACK_BARRIER_BIT}
  GL_ATOMIC_COUNTER_BARRIER_BIT = $00001000;
  {$EXTERNALSYM GL_ATOMIC_COUNTER_BARRIER_BIT}
  GL_ALL_BARRIER_BITS = $FFFFFFFF;
  {$EXTERNALSYM GL_ALL_BARRIER_BITS}
  GL_MAX_IMAGE_UNITS = $8F38;
  {$EXTERNALSYM GL_MAX_IMAGE_UNITS}
  GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = $8F39;
  {$EXTERNALSYM GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS}
  GL_IMAGE_BINDING_NAME = $8F3A;
  {$EXTERNALSYM GL_IMAGE_BINDING_NAME}
  GL_IMAGE_BINDING_LEVEL = $8F3B;
  {$EXTERNALSYM GL_IMAGE_BINDING_LEVEL}
  GL_IMAGE_BINDING_LAYERED = $8F3C;
  {$EXTERNALSYM GL_IMAGE_BINDING_LAYERED}
  GL_IMAGE_BINDING_LAYER = $8F3D;
  {$EXTERNALSYM GL_IMAGE_BINDING_LAYER}
  GL_IMAGE_BINDING_ACCESS = $8F3E;
  {$EXTERNALSYM GL_IMAGE_BINDING_ACCESS}
  GL_IMAGE_1D = $904C;
  {$EXTERNALSYM GL_IMAGE_1D}
  GL_IMAGE_2D = $904D;
  {$EXTERNALSYM GL_IMAGE_2D}
  GL_IMAGE_3D = $904E;
  {$EXTERNALSYM GL_IMAGE_3D}
  GL_IMAGE_2D_RECT = $904F;
  {$EXTERNALSYM GL_IMAGE_2D_RECT}
  GL_IMAGE_CUBE = $9050;
  {$EXTERNALSYM GL_IMAGE_CUBE}
  GL_IMAGE_BUFFER = $9051;
  {$EXTERNALSYM GL_IMAGE_BUFFER}
  GL_IMAGE_1D_ARRAY = $9052;
  {$EXTERNALSYM GL_IMAGE_1D_ARRAY}
  GL_IMAGE_2D_ARRAY = $9053;
  {$EXTERNALSYM GL_IMAGE_2D_ARRAY}
  GL_IMAGE_CUBE_MAP_ARRAY = $9054;
  {$EXTERNALSYM GL_IMAGE_CUBE_MAP_ARRAY}
  GL_IMAGE_2D_MULTISAMPLE = $9055;
  {$EXTERNALSYM GL_IMAGE_2D_MULTISAMPLE}
  GL_IMAGE_2D_MULTISAMPLE_ARRAY = $9056;
  {$EXTERNALSYM GL_IMAGE_2D_MULTISAMPLE_ARRAY}
  GL_INT_IMAGE_1D = $9057;
  {$EXTERNALSYM GL_INT_IMAGE_1D}
  GL_INT_IMAGE_2D = $9058;
  {$EXTERNALSYM GL_INT_IMAGE_2D}
  GL_INT_IMAGE_3D = $9059;
  {$EXTERNALSYM GL_INT_IMAGE_3D}
  GL_INT_IMAGE_2D_RECT = $905A;
  {$EXTERNALSYM GL_INT_IMAGE_2D_RECT}
  GL_INT_IMAGE_CUBE = $905B;
  {$EXTERNALSYM GL_INT_IMAGE_CUBE}
  GL_INT_IMAGE_BUFFER = $905C;
  {$EXTERNALSYM GL_INT_IMAGE_BUFFER}
  GL_INT_IMAGE_1D_ARRAY = $905D;
  {$EXTERNALSYM GL_INT_IMAGE_1D_ARRAY}
  GL_INT_IMAGE_2D_ARRAY = $905E;
  {$EXTERNALSYM GL_INT_IMAGE_2D_ARRAY}
  GL_INT_IMAGE_CUBE_MAP_ARRAY = $905F;
  {$EXTERNALSYM GL_INT_IMAGE_CUBE_MAP_ARRAY}
  GL_INT_IMAGE_2D_MULTISAMPLE = $9060;
  {$EXTERNALSYM GL_INT_IMAGE_2D_MULTISAMPLE}
  GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = $9061;
  {$EXTERNALSYM GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY}
  GL_UNSIGNED_INT_IMAGE_1D = $9062;
  {$EXTERNALSYM GL_UNSIGNED_INT_IMAGE_1D}
  GL_UNSIGNED_INT_IMAGE_2D = $9063;
  {$EXTERNALSYM GL_UNSIGNED_INT_IMAGE_2D}
  GL_UNSIGNED_INT_IMAGE_3D = $9064;
  {$EXTERNALSYM GL_UNSIGNED_INT_IMAGE_3D}
  GL_UNSIGNED_INT_IMAGE_2D_RECT = $9065;
  {$EXTERNALSYM GL_UNSIGNED_INT_IMAGE_2D_RECT}
  GL_UNSIGNED_INT_IMAGE_CUBE = $9066;
  {$EXTERNALSYM GL_UNSIGNED_INT_IMAGE_CUBE}
  GL_UNSIGNED_INT_IMAGE_BUFFER = $9067;
  {$EXTERNALSYM GL_UNSIGNED_INT_IMAGE_BUFFER}
  GL_UNSIGNED_INT_IMAGE_1D_ARRAY = $9068;
  {$EXTERNALSYM GL_UNSIGNED_INT_IMAGE_1D_ARRAY}
  GL_UNSIGNED_INT_IMAGE_2D_ARRAY = $9069;
  {$EXTERNALSYM GL_UNSIGNED_INT_IMAGE_2D_ARRAY}
  GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = $906A;
  {$EXTERNALSYM GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY}
  GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = $906B;
  {$EXTERNALSYM GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE}
  GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = $906C;
  {$EXTERNALSYM GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY}
  GL_MAX_IMAGE_SAMPLES = $906D;
  {$EXTERNALSYM GL_MAX_IMAGE_SAMPLES}
  GL_IMAGE_BINDING_FORMAT = $906E;
  {$EXTERNALSYM GL_IMAGE_BINDING_FORMAT}
  GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = $90C7;
  {$EXTERNALSYM GL_IMAGE_FORMAT_COMPATIBILITY_TYPE}
  GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = $90C8;
  {$EXTERNALSYM GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE}
  GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = $90C9;
  {$EXTERNALSYM GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS}
  GL_MAX_VERTEX_IMAGE_UNIFORMS = $90CA;
  {$EXTERNALSYM GL_MAX_VERTEX_IMAGE_UNIFORMS}
  GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = $90CB;
  {$EXTERNALSYM GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS}
  GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = $90CC;
  {$EXTERNALSYM GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS}
  GL_MAX_GEOMETRY_IMAGE_UNIFORMS = $90CD;
  {$EXTERNALSYM GL_MAX_GEOMETRY_IMAGE_UNIFORMS}
  GL_MAX_FRAGMENT_IMAGE_UNIFORMS = $90CE;
  {$EXTERNALSYM GL_MAX_FRAGMENT_IMAGE_UNIFORMS}
  GL_MAX_COMBINED_IMAGE_UNIFORMS = $90CF;
  {$EXTERNALSYM GL_MAX_COMBINED_IMAGE_UNIFORMS}
  GL_TEXTURE_IMMUTABLE_FORMAT = $912F;
  {$EXTERNALSYM GL_TEXTURE_IMMUTABLE_FORMAT}

{ GL_VERSION_4_3 }
  GL_NUM_SHADING_LANGUAGE_VERSIONS = $82E9;
  {$EXTERNALSYM GL_NUM_SHADING_LANGUAGE_VERSIONS}
  GL_VERTEX_ATTRIB_ARRAY_LONG = $874E;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_ARRAY_LONG}
  GL_COMPRESSED_RGB8_ETC2 = $9274;
  {$EXTERNALSYM GL_COMPRESSED_RGB8_ETC2}
  GL_COMPRESSED_SRGB8_ETC2 = $9275;
  {$EXTERNALSYM GL_COMPRESSED_SRGB8_ETC2}
  GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = $9276;
  {$EXTERNALSYM GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2}
  GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = $9277;
  {$EXTERNALSYM GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2}
  GL_COMPRESSED_RGBA8_ETC2_EAC = $9278;
  {$EXTERNALSYM GL_COMPRESSED_RGBA8_ETC2_EAC}
  GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = $9279;
  {$EXTERNALSYM GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC}
  GL_COMPRESSED_R11_EAC = $9270;
  {$EXTERNALSYM GL_COMPRESSED_R11_EAC}
  GL_COMPRESSED_SIGNED_R11_EAC = $9271;
  {$EXTERNALSYM GL_COMPRESSED_SIGNED_R11_EAC}
  GL_COMPRESSED_RG11_EAC = $9272;
  {$EXTERNALSYM GL_COMPRESSED_RG11_EAC}
  GL_COMPRESSED_SIGNED_RG11_EAC = $9273;
  {$EXTERNALSYM GL_COMPRESSED_SIGNED_RG11_EAC}
  GL_PRIMITIVE_RESTART_FIXED_INDEX = $8D69;
  {$EXTERNALSYM GL_PRIMITIVE_RESTART_FIXED_INDEX}
  GL_ANY_SAMPLES_PASSED_CONSERVATIVE = $8D6A;
  {$EXTERNALSYM GL_ANY_SAMPLES_PASSED_CONSERVATIVE}
  GL_MAX_ELEMENT_INDEX = $8D6B;
  {$EXTERNALSYM GL_MAX_ELEMENT_INDEX}
  GL_COMPUTE_SHADER = $91B9;
  {$EXTERNALSYM GL_COMPUTE_SHADER}
  GL_MAX_COMPUTE_UNIFORM_BLOCKS = $91BB;
  {$EXTERNALSYM GL_MAX_COMPUTE_UNIFORM_BLOCKS}
  GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = $91BC;
  {$EXTERNALSYM GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS}
  GL_MAX_COMPUTE_IMAGE_UNIFORMS = $91BD;
  {$EXTERNALSYM GL_MAX_COMPUTE_IMAGE_UNIFORMS}
  GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = $8262;
  {$EXTERNALSYM GL_MAX_COMPUTE_SHARED_MEMORY_SIZE}
  GL_MAX_COMPUTE_UNIFORM_COMPONENTS = $8263;
  {$EXTERNALSYM GL_MAX_COMPUTE_UNIFORM_COMPONENTS}
  GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = $8264;
  {$EXTERNALSYM GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS}
  GL_MAX_COMPUTE_ATOMIC_COUNTERS = $8265;
  {$EXTERNALSYM GL_MAX_COMPUTE_ATOMIC_COUNTERS}
  GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = $8266;
  {$EXTERNALSYM GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS}
  GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = $90EB;
  {$EXTERNALSYM GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS}
  GL_MAX_COMPUTE_WORK_GROUP_COUNT = $91BE;
  {$EXTERNALSYM GL_MAX_COMPUTE_WORK_GROUP_COUNT}
  GL_MAX_COMPUTE_WORK_GROUP_SIZE = $91BF;
  {$EXTERNALSYM GL_MAX_COMPUTE_WORK_GROUP_SIZE}
  GL_COMPUTE_WORK_GROUP_SIZE = $8267;
  {$EXTERNALSYM GL_COMPUTE_WORK_GROUP_SIZE}
  GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = $90EC;
  {$EXTERNALSYM GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER}
  GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = $90ED;
  {$EXTERNALSYM GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER}
  GL_DISPATCH_INDIRECT_BUFFER = $90EE;
  {$EXTERNALSYM GL_DISPATCH_INDIRECT_BUFFER}
  GL_DISPATCH_INDIRECT_BUFFER_BINDING = $90EF;
  {$EXTERNALSYM GL_DISPATCH_INDIRECT_BUFFER_BINDING}
  GL_DEBUG_OUTPUT_SYNCHRONOUS = $8242;
  {$EXTERNALSYM GL_DEBUG_OUTPUT_SYNCHRONOUS}
  GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = $8243;
  {$EXTERNALSYM GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH}
  GL_DEBUG_CALLBACK_FUNCTION = $8244;
  {$EXTERNALSYM GL_DEBUG_CALLBACK_FUNCTION}
  GL_DEBUG_CALLBACK_USER_PARAM = $8245;
  {$EXTERNALSYM GL_DEBUG_CALLBACK_USER_PARAM}
  GL_DEBUG_SOURCE_API = $8246;
  {$EXTERNALSYM GL_DEBUG_SOURCE_API}
  GL_DEBUG_SOURCE_WINDOW_SYSTEM = $8247;
  {$EXTERNALSYM GL_DEBUG_SOURCE_WINDOW_SYSTEM}
  GL_DEBUG_SOURCE_SHADER_COMPILER = $8248;
  {$EXTERNALSYM GL_DEBUG_SOURCE_SHADER_COMPILER}
  GL_DEBUG_SOURCE_THIRD_PARTY = $8249;
  {$EXTERNALSYM GL_DEBUG_SOURCE_THIRD_PARTY}
  GL_DEBUG_SOURCE_APPLICATION = $824A;
  {$EXTERNALSYM GL_DEBUG_SOURCE_APPLICATION}
  GL_DEBUG_SOURCE_OTHER = $824B;
  {$EXTERNALSYM GL_DEBUG_SOURCE_OTHER}
  GL_DEBUG_TYPE_ERROR = $824C;
  {$EXTERNALSYM GL_DEBUG_TYPE_ERROR}
  GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = $824D;
  {$EXTERNALSYM GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR}
  GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = $824E;
  {$EXTERNALSYM GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR}
  GL_DEBUG_TYPE_PORTABILITY = $824F;
  {$EXTERNALSYM GL_DEBUG_TYPE_PORTABILITY}
  GL_DEBUG_TYPE_PERFORMANCE = $8250;
  {$EXTERNALSYM GL_DEBUG_TYPE_PERFORMANCE}
  GL_DEBUG_TYPE_OTHER = $8251;
  {$EXTERNALSYM GL_DEBUG_TYPE_OTHER}
  GL_MAX_DEBUG_MESSAGE_LENGTH = $9143;
  {$EXTERNALSYM GL_MAX_DEBUG_MESSAGE_LENGTH}
  GL_MAX_DEBUG_LOGGED_MESSAGES = $9144;
  {$EXTERNALSYM GL_MAX_DEBUG_LOGGED_MESSAGES}
  GL_DEBUG_LOGGED_MESSAGES = $9145;
  {$EXTERNALSYM GL_DEBUG_LOGGED_MESSAGES}
  GL_DEBUG_SEVERITY_HIGH = $9146;
  {$EXTERNALSYM GL_DEBUG_SEVERITY_HIGH}
  GL_DEBUG_SEVERITY_MEDIUM = $9147;
  {$EXTERNALSYM GL_DEBUG_SEVERITY_MEDIUM}
  GL_DEBUG_SEVERITY_LOW = $9148;
  {$EXTERNALSYM GL_DEBUG_SEVERITY_LOW}
  GL_DEBUG_TYPE_MARKER = $8268;
  {$EXTERNALSYM GL_DEBUG_TYPE_MARKER}
  GL_DEBUG_TYPE_PUSH_GROUP = $8269;
  {$EXTERNALSYM GL_DEBUG_TYPE_PUSH_GROUP}
  GL_DEBUG_TYPE_POP_GROUP = $826A;
  {$EXTERNALSYM GL_DEBUG_TYPE_POP_GROUP}
  GL_DEBUG_SEVERITY_NOTIFICATION = $826B;
  {$EXTERNALSYM GL_DEBUG_SEVERITY_NOTIFICATION}
  GL_MAX_DEBUG_GROUP_STACK_DEPTH = $826C;
  {$EXTERNALSYM GL_MAX_DEBUG_GROUP_STACK_DEPTH}
  GL_DEBUG_GROUP_STACK_DEPTH = $826D;
  {$EXTERNALSYM GL_DEBUG_GROUP_STACK_DEPTH}
  GL_BUFFER = $82E0;
  {$EXTERNALSYM GL_BUFFER}
  GL_SHADER = $82E1;
  {$EXTERNALSYM GL_SHADER}
  GL_PROGRAM = $82E2;
  {$EXTERNALSYM GL_PROGRAM}
  GL_QUERY = $82E3;
  {$EXTERNALSYM GL_QUERY}
  GL_PROGRAM_PIPELINE = $82E4;
  {$EXTERNALSYM GL_PROGRAM_PIPELINE}
  GL_SAMPLER = $82E6;
  {$EXTERNALSYM GL_SAMPLER}
  GL_MAX_LABEL_LENGTH = $82E8;
  {$EXTERNALSYM GL_MAX_LABEL_LENGTH}
  GL_DEBUG_OUTPUT = $92E0;
  {$EXTERNALSYM GL_DEBUG_OUTPUT}
  GL_CONTEXT_FLAG_DEBUG_BIT = $00000002;
  {$EXTERNALSYM GL_CONTEXT_FLAG_DEBUG_BIT}
  GL_MAX_UNIFORM_LOCATIONS = $826E;
  {$EXTERNALSYM GL_MAX_UNIFORM_LOCATIONS}
  GL_FRAMEBUFFER_DEFAULT_WIDTH = $9310;
  {$EXTERNALSYM GL_FRAMEBUFFER_DEFAULT_WIDTH}
  GL_FRAMEBUFFER_DEFAULT_HEIGHT = $9311;
  {$EXTERNALSYM GL_FRAMEBUFFER_DEFAULT_HEIGHT}
  GL_FRAMEBUFFER_DEFAULT_LAYERS = $9312;
  {$EXTERNALSYM GL_FRAMEBUFFER_DEFAULT_LAYERS}
  GL_FRAMEBUFFER_DEFAULT_SAMPLES = $9313;
  {$EXTERNALSYM GL_FRAMEBUFFER_DEFAULT_SAMPLES}
  GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = $9314;
  {$EXTERNALSYM GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS}
  GL_MAX_FRAMEBUFFER_WIDTH = $9315;
  {$EXTERNALSYM GL_MAX_FRAMEBUFFER_WIDTH}
  GL_MAX_FRAMEBUFFER_HEIGHT = $9316;
  {$EXTERNALSYM GL_MAX_FRAMEBUFFER_HEIGHT}
  GL_MAX_FRAMEBUFFER_LAYERS = $9317;
  {$EXTERNALSYM GL_MAX_FRAMEBUFFER_LAYERS}
  GL_MAX_FRAMEBUFFER_SAMPLES = $9318;
  {$EXTERNALSYM GL_MAX_FRAMEBUFFER_SAMPLES}
  GL_INTERNALFORMAT_SUPPORTED = $826F;
  {$EXTERNALSYM GL_INTERNALFORMAT_SUPPORTED}
  GL_INTERNALFORMAT_PREFERRED = $8270;
  {$EXTERNALSYM GL_INTERNALFORMAT_PREFERRED}
  GL_INTERNALFORMAT_RED_SIZE = $8271;
  {$EXTERNALSYM GL_INTERNALFORMAT_RED_SIZE}
  GL_INTERNALFORMAT_GREEN_SIZE = $8272;
  {$EXTERNALSYM GL_INTERNALFORMAT_GREEN_SIZE}
  GL_INTERNALFORMAT_BLUE_SIZE = $8273;
  {$EXTERNALSYM GL_INTERNALFORMAT_BLUE_SIZE}
  GL_INTERNALFORMAT_ALPHA_SIZE = $8274;
  {$EXTERNALSYM GL_INTERNALFORMAT_ALPHA_SIZE}
  GL_INTERNALFORMAT_DEPTH_SIZE = $8275;
  {$EXTERNALSYM GL_INTERNALFORMAT_DEPTH_SIZE}
  GL_INTERNALFORMAT_STENCIL_SIZE = $8276;
  {$EXTERNALSYM GL_INTERNALFORMAT_STENCIL_SIZE}
  GL_INTERNALFORMAT_SHARED_SIZE = $8277;
  {$EXTERNALSYM GL_INTERNALFORMAT_SHARED_SIZE}
  GL_INTERNALFORMAT_RED_TYPE = $8278;
  {$EXTERNALSYM GL_INTERNALFORMAT_RED_TYPE}
  GL_INTERNALFORMAT_GREEN_TYPE = $8279;
  {$EXTERNALSYM GL_INTERNALFORMAT_GREEN_TYPE}
  GL_INTERNALFORMAT_BLUE_TYPE = $827A;
  {$EXTERNALSYM GL_INTERNALFORMAT_BLUE_TYPE}
  GL_INTERNALFORMAT_ALPHA_TYPE = $827B;
  {$EXTERNALSYM GL_INTERNALFORMAT_ALPHA_TYPE}
  GL_INTERNALFORMAT_DEPTH_TYPE = $827C;
  {$EXTERNALSYM GL_INTERNALFORMAT_DEPTH_TYPE}
  GL_INTERNALFORMAT_STENCIL_TYPE = $827D;
  {$EXTERNALSYM GL_INTERNALFORMAT_STENCIL_TYPE}
  GL_MAX_WIDTH = $827E;
  {$EXTERNALSYM GL_MAX_WIDTH}
  GL_MAX_HEIGHT = $827F;
  {$EXTERNALSYM GL_MAX_HEIGHT}
  GL_MAX_DEPTH = $8280;
  {$EXTERNALSYM GL_MAX_DEPTH}
  GL_MAX_LAYERS = $8281;
  {$EXTERNALSYM GL_MAX_LAYERS}
  GL_MAX_COMBINED_DIMENSIONS = $8282;
  {$EXTERNALSYM GL_MAX_COMBINED_DIMENSIONS}
  GL_COLOR_COMPONENTS = $8283;
  {$EXTERNALSYM GL_COLOR_COMPONENTS}
  GL_DEPTH_COMPONENTS = $8284;
  {$EXTERNALSYM GL_DEPTH_COMPONENTS}
  GL_STENCIL_COMPONENTS = $8285;
  {$EXTERNALSYM GL_STENCIL_COMPONENTS}
  GL_COLOR_RENDERABLE = $8286;
  {$EXTERNALSYM GL_COLOR_RENDERABLE}
  GL_DEPTH_RENDERABLE = $8287;
  {$EXTERNALSYM GL_DEPTH_RENDERABLE}
  GL_STENCIL_RENDERABLE = $8288;
  {$EXTERNALSYM GL_STENCIL_RENDERABLE}
  GL_FRAMEBUFFER_RENDERABLE = $8289;
  {$EXTERNALSYM GL_FRAMEBUFFER_RENDERABLE}
  GL_FRAMEBUFFER_RENDERABLE_LAYERED = $828A;
  {$EXTERNALSYM GL_FRAMEBUFFER_RENDERABLE_LAYERED}
  GL_FRAMEBUFFER_BLEND = $828B;
  {$EXTERNALSYM GL_FRAMEBUFFER_BLEND}
  GL_READ_PIXELS = $828C;
  {$EXTERNALSYM GL_READ_PIXELS}
  GL_READ_PIXELS_FORMAT = $828D;
  {$EXTERNALSYM GL_READ_PIXELS_FORMAT}
  GL_READ_PIXELS_TYPE = $828E;
  {$EXTERNALSYM GL_READ_PIXELS_TYPE}
  GL_TEXTURE_IMAGE_FORMAT = $828F;
  {$EXTERNALSYM GL_TEXTURE_IMAGE_FORMAT}
  GL_TEXTURE_IMAGE_TYPE = $8290;
  {$EXTERNALSYM GL_TEXTURE_IMAGE_TYPE}
  GL_GET_TEXTURE_IMAGE_FORMAT = $8291;
  {$EXTERNALSYM GL_GET_TEXTURE_IMAGE_FORMAT}
  GL_GET_TEXTURE_IMAGE_TYPE = $8292;
  {$EXTERNALSYM GL_GET_TEXTURE_IMAGE_TYPE}
  GL_MIPMAP = $8293;
  {$EXTERNALSYM GL_MIPMAP}
  GL_MANUAL_GENERATE_MIPMAP = $8294;
  {$EXTERNALSYM GL_MANUAL_GENERATE_MIPMAP}
  GL_AUTO_GENERATE_MIPMAP = $8295;
  {$EXTERNALSYM GL_AUTO_GENERATE_MIPMAP}
  GL_COLOR_ENCODING = $8296;
  {$EXTERNALSYM GL_COLOR_ENCODING}
  GL_SRGB_READ = $8297;
  {$EXTERNALSYM GL_SRGB_READ}
  GL_SRGB_WRITE = $8298;
  {$EXTERNALSYM GL_SRGB_WRITE}
  GL_FILTER = $829A;
  {$EXTERNALSYM GL_FILTER}
  GL_VERTEX_TEXTURE = $829B;
  {$EXTERNALSYM GL_VERTEX_TEXTURE}
  GL_TESS_CONTROL_TEXTURE = $829C;
  {$EXTERNALSYM GL_TESS_CONTROL_TEXTURE}
  GL_TESS_EVALUATION_TEXTURE = $829D;
  {$EXTERNALSYM GL_TESS_EVALUATION_TEXTURE}
  GL_GEOMETRY_TEXTURE = $829E;
  {$EXTERNALSYM GL_GEOMETRY_TEXTURE}
  GL_FRAGMENT_TEXTURE = $829F;
  {$EXTERNALSYM GL_FRAGMENT_TEXTURE}
  GL_COMPUTE_TEXTURE = $82A0;
  {$EXTERNALSYM GL_COMPUTE_TEXTURE}
  GL_TEXTURE_SHADOW = $82A1;
  {$EXTERNALSYM GL_TEXTURE_SHADOW}
  GL_TEXTURE_GATHER = $82A2;
  {$EXTERNALSYM GL_TEXTURE_GATHER}
  GL_TEXTURE_GATHER_SHADOW = $82A3;
  {$EXTERNALSYM GL_TEXTURE_GATHER_SHADOW}
  GL_SHADER_IMAGE_LOAD = $82A4;
  {$EXTERNALSYM GL_SHADER_IMAGE_LOAD}
  GL_SHADER_IMAGE_STORE = $82A5;
  {$EXTERNALSYM GL_SHADER_IMAGE_STORE}
  GL_SHADER_IMAGE_ATOMIC = $82A6;
  {$EXTERNALSYM GL_SHADER_IMAGE_ATOMIC}
  GL_IMAGE_TEXEL_SIZE = $82A7;
  {$EXTERNALSYM GL_IMAGE_TEXEL_SIZE}
  GL_IMAGE_COMPATIBILITY_CLASS = $82A8;
  {$EXTERNALSYM GL_IMAGE_COMPATIBILITY_CLASS}
  GL_IMAGE_PIXEL_FORMAT = $82A9;
  {$EXTERNALSYM GL_IMAGE_PIXEL_FORMAT}
  GL_IMAGE_PIXEL_TYPE = $82AA;
  {$EXTERNALSYM GL_IMAGE_PIXEL_TYPE}
  GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = $82AC;
  {$EXTERNALSYM GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST}
  GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = $82AD;
  {$EXTERNALSYM GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST}
  GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = $82AE;
  {$EXTERNALSYM GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE}
  GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = $82AF;
  {$EXTERNALSYM GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE}
  GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = $82B1;
  {$EXTERNALSYM GL_TEXTURE_COMPRESSED_BLOCK_WIDTH}
  GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = $82B2;
  {$EXTERNALSYM GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT}
  GL_TEXTURE_COMPRESSED_BLOCK_SIZE = $82B3;
  {$EXTERNALSYM GL_TEXTURE_COMPRESSED_BLOCK_SIZE}
  GL_CLEAR_BUFFER = $82B4;
  {$EXTERNALSYM GL_CLEAR_BUFFER}
  GL_TEXTURE_VIEW = $82B5;
  {$EXTERNALSYM GL_TEXTURE_VIEW}
  GL_VIEW_COMPATIBILITY_CLASS = $82B6;
  {$EXTERNALSYM GL_VIEW_COMPATIBILITY_CLASS}
  GL_FULL_SUPPORT = $82B7;
  {$EXTERNALSYM GL_FULL_SUPPORT}
  GL_CAVEAT_SUPPORT = $82B8;
  {$EXTERNALSYM GL_CAVEAT_SUPPORT}
  GL_IMAGE_CLASS_4_X_32 = $82B9;
  {$EXTERNALSYM GL_IMAGE_CLASS_4_X_32}
  GL_IMAGE_CLASS_2_X_32 = $82BA;
  {$EXTERNALSYM GL_IMAGE_CLASS_2_X_32}
  GL_IMAGE_CLASS_1_X_32 = $82BB;
  {$EXTERNALSYM GL_IMAGE_CLASS_1_X_32}
  GL_IMAGE_CLASS_4_X_16 = $82BC;
  {$EXTERNALSYM GL_IMAGE_CLASS_4_X_16}
  GL_IMAGE_CLASS_2_X_16 = $82BD;
  {$EXTERNALSYM GL_IMAGE_CLASS_2_X_16}
  GL_IMAGE_CLASS_1_X_16 = $82BE;
  {$EXTERNALSYM GL_IMAGE_CLASS_1_X_16}
  GL_IMAGE_CLASS_4_X_8 = $82BF;
  {$EXTERNALSYM GL_IMAGE_CLASS_4_X_8}
  GL_IMAGE_CLASS_2_X_8 = $82C0;
  {$EXTERNALSYM GL_IMAGE_CLASS_2_X_8}
  GL_IMAGE_CLASS_1_X_8 = $82C1;
  {$EXTERNALSYM GL_IMAGE_CLASS_1_X_8}
  GL_IMAGE_CLASS_11_11_10 = $82C2;
  {$EXTERNALSYM GL_IMAGE_CLASS_11_11_10}
  GL_IMAGE_CLASS_10_10_10_2 = $82C3;
  {$EXTERNALSYM GL_IMAGE_CLASS_10_10_10_2}
  GL_VIEW_CLASS_128_BITS = $82C4;
  {$EXTERNALSYM GL_VIEW_CLASS_128_BITS}
  GL_VIEW_CLASS_96_BITS = $82C5;
  {$EXTERNALSYM GL_VIEW_CLASS_96_BITS}
  GL_VIEW_CLASS_64_BITS = $82C6;
  {$EXTERNALSYM GL_VIEW_CLASS_64_BITS}
  GL_VIEW_CLASS_48_BITS = $82C7;
  {$EXTERNALSYM GL_VIEW_CLASS_48_BITS}
  GL_VIEW_CLASS_32_BITS = $82C8;
  {$EXTERNALSYM GL_VIEW_CLASS_32_BITS}
  GL_VIEW_CLASS_24_BITS = $82C9;
  {$EXTERNALSYM GL_VIEW_CLASS_24_BITS}
  GL_VIEW_CLASS_16_BITS = $82CA;
  {$EXTERNALSYM GL_VIEW_CLASS_16_BITS}
  GL_VIEW_CLASS_8_BITS = $82CB;
  {$EXTERNALSYM GL_VIEW_CLASS_8_BITS}
  GL_VIEW_CLASS_S3TC_DXT1_RGB = $82CC;
  {$EXTERNALSYM GL_VIEW_CLASS_S3TC_DXT1_RGB}
  GL_VIEW_CLASS_S3TC_DXT1_RGBA = $82CD;
  {$EXTERNALSYM GL_VIEW_CLASS_S3TC_DXT1_RGBA}
  GL_VIEW_CLASS_S3TC_DXT3_RGBA = $82CE;
  {$EXTERNALSYM GL_VIEW_CLASS_S3TC_DXT3_RGBA}
  GL_VIEW_CLASS_S3TC_DXT5_RGBA = $82CF;
  {$EXTERNALSYM GL_VIEW_CLASS_S3TC_DXT5_RGBA}
  GL_VIEW_CLASS_RGTC1_RED = $82D0;
  {$EXTERNALSYM GL_VIEW_CLASS_RGTC1_RED}
  GL_VIEW_CLASS_RGTC2_RG = $82D1;
  {$EXTERNALSYM GL_VIEW_CLASS_RGTC2_RG}
  GL_VIEW_CLASS_BPTC_UNORM = $82D2;
  {$EXTERNALSYM GL_VIEW_CLASS_BPTC_UNORM}
  GL_VIEW_CLASS_BPTC_FLOAT = $82D3;
  {$EXTERNALSYM GL_VIEW_CLASS_BPTC_FLOAT}
  GL_UNIFORM = $92E1;
  {$EXTERNALSYM GL_UNIFORM}
  GL_UNIFORM_BLOCK = $92E2;
  {$EXTERNALSYM GL_UNIFORM_BLOCK}
  GL_PROGRAM_INPUT = $92E3;
  {$EXTERNALSYM GL_PROGRAM_INPUT}
  GL_PROGRAM_OUTPUT = $92E4;
  {$EXTERNALSYM GL_PROGRAM_OUTPUT}
  GL_BUFFER_VARIABLE = $92E5;
  {$EXTERNALSYM GL_BUFFER_VARIABLE}
  GL_SHADER_STORAGE_BLOCK = $92E6;
  {$EXTERNALSYM GL_SHADER_STORAGE_BLOCK}
  GL_VERTEX_SUBROUTINE = $92E8;
  {$EXTERNALSYM GL_VERTEX_SUBROUTINE}
  GL_TESS_CONTROL_SUBROUTINE = $92E9;
  {$EXTERNALSYM GL_TESS_CONTROL_SUBROUTINE}
  GL_TESS_EVALUATION_SUBROUTINE = $92EA;
  {$EXTERNALSYM GL_TESS_EVALUATION_SUBROUTINE}
  GL_GEOMETRY_SUBROUTINE = $92EB;
  {$EXTERNALSYM GL_GEOMETRY_SUBROUTINE}
  GL_FRAGMENT_SUBROUTINE = $92EC;
  {$EXTERNALSYM GL_FRAGMENT_SUBROUTINE}
  GL_COMPUTE_SUBROUTINE = $92ED;
  {$EXTERNALSYM GL_COMPUTE_SUBROUTINE}
  GL_VERTEX_SUBROUTINE_UNIFORM = $92EE;
  {$EXTERNALSYM GL_VERTEX_SUBROUTINE_UNIFORM}
  GL_TESS_CONTROL_SUBROUTINE_UNIFORM = $92EF;
  {$EXTERNALSYM GL_TESS_CONTROL_SUBROUTINE_UNIFORM}
  GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = $92F0;
  {$EXTERNALSYM GL_TESS_EVALUATION_SUBROUTINE_UNIFORM}
  GL_GEOMETRY_SUBROUTINE_UNIFORM = $92F1;
  {$EXTERNALSYM GL_GEOMETRY_SUBROUTINE_UNIFORM}
  GL_FRAGMENT_SUBROUTINE_UNIFORM = $92F2;
  {$EXTERNALSYM GL_FRAGMENT_SUBROUTINE_UNIFORM}
  GL_COMPUTE_SUBROUTINE_UNIFORM = $92F3;
  {$EXTERNALSYM GL_COMPUTE_SUBROUTINE_UNIFORM}
  GL_TRANSFORM_FEEDBACK_VARYING = $92F4;
  {$EXTERNALSYM GL_TRANSFORM_FEEDBACK_VARYING}
  GL_ACTIVE_RESOURCES = $92F5;
  {$EXTERNALSYM GL_ACTIVE_RESOURCES}
  GL_MAX_NAME_LENGTH = $92F6;
  {$EXTERNALSYM GL_MAX_NAME_LENGTH}
  GL_MAX_NUM_ACTIVE_VARIABLES = $92F7;
  {$EXTERNALSYM GL_MAX_NUM_ACTIVE_VARIABLES}
  GL_MAX_NUM_COMPATIBLE_SUBROUTINES = $92F8;
  {$EXTERNALSYM GL_MAX_NUM_COMPATIBLE_SUBROUTINES}
  GL_NAME_LENGTH = $92F9;
  {$EXTERNALSYM GL_NAME_LENGTH}
  GL_TYPE = $92FA;
  {$EXTERNALSYM GL_TYPE}
  GL_ARRAY_SIZE = $92FB;
  {$EXTERNALSYM GL_ARRAY_SIZE}
  GL_OFFSET = $92FC;
  {$EXTERNALSYM GL_OFFSET}
  GL_BLOCK_INDEX = $92FD;
  {$EXTERNALSYM GL_BLOCK_INDEX}
  GL_ARRAY_STRIDE = $92FE;
  {$EXTERNALSYM GL_ARRAY_STRIDE}
  GL_MATRIX_STRIDE = $92FF;
  {$EXTERNALSYM GL_MATRIX_STRIDE}
  GL_IS_ROW_MAJOR = $9300;
  {$EXTERNALSYM GL_IS_ROW_MAJOR}
  GL_ATOMIC_COUNTER_BUFFER_INDEX = $9301;
  {$EXTERNALSYM GL_ATOMIC_COUNTER_BUFFER_INDEX}
  GL_BUFFER_BINDING = $9302;
  {$EXTERNALSYM GL_BUFFER_BINDING}
  GL_BUFFER_DATA_SIZE = $9303;
  {$EXTERNALSYM GL_BUFFER_DATA_SIZE}
  GL_NUM_ACTIVE_VARIABLES = $9304;
  {$EXTERNALSYM GL_NUM_ACTIVE_VARIABLES}
  GL_ACTIVE_VARIABLES = $9305;
  {$EXTERNALSYM GL_ACTIVE_VARIABLES}
  GL_REFERENCED_BY_VERTEX_SHADER = $9306;
  {$EXTERNALSYM GL_REFERENCED_BY_VERTEX_SHADER}
  GL_REFERENCED_BY_TESS_CONTROL_SHADER = $9307;
  {$EXTERNALSYM GL_REFERENCED_BY_TESS_CONTROL_SHADER}
  GL_REFERENCED_BY_TESS_EVALUATION_SHADER = $9308;
  {$EXTERNALSYM GL_REFERENCED_BY_TESS_EVALUATION_SHADER}
  GL_REFERENCED_BY_GEOMETRY_SHADER = $9309;
  {$EXTERNALSYM GL_REFERENCED_BY_GEOMETRY_SHADER}
  GL_REFERENCED_BY_FRAGMENT_SHADER = $930A;
  {$EXTERNALSYM GL_REFERENCED_BY_FRAGMENT_SHADER}
  GL_REFERENCED_BY_COMPUTE_SHADER = $930B;
  {$EXTERNALSYM GL_REFERENCED_BY_COMPUTE_SHADER}
  GL_TOP_LEVEL_ARRAY_SIZE = $930C;
  {$EXTERNALSYM GL_TOP_LEVEL_ARRAY_SIZE}
  GL_TOP_LEVEL_ARRAY_STRIDE = $930D;
  {$EXTERNALSYM GL_TOP_LEVEL_ARRAY_STRIDE}
  GL_LOCATION = $930E;
  {$EXTERNALSYM GL_LOCATION}
  GL_LOCATION_INDEX = $930F;
  {$EXTERNALSYM GL_LOCATION_INDEX}
  GL_IS_PER_PATCH = $92E7;
  {$EXTERNALSYM GL_IS_PER_PATCH}
  GL_SHADER_STORAGE_BUFFER = $90D2;
  {$EXTERNALSYM GL_SHADER_STORAGE_BUFFER}
  GL_SHADER_STORAGE_BUFFER_BINDING = $90D3;
  {$EXTERNALSYM GL_SHADER_STORAGE_BUFFER_BINDING}
  GL_SHADER_STORAGE_BUFFER_START = $90D4;
  {$EXTERNALSYM GL_SHADER_STORAGE_BUFFER_START}
  GL_SHADER_STORAGE_BUFFER_SIZE = $90D5;
  {$EXTERNALSYM GL_SHADER_STORAGE_BUFFER_SIZE}
  GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = $90D6;
  {$EXTERNALSYM GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS}
  GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = $90D7;
  {$EXTERNALSYM GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS}
  GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = $90D8;
  {$EXTERNALSYM GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS}
  GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = $90D9;
  {$EXTERNALSYM GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS}
  GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = $90DA;
  {$EXTERNALSYM GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS}
  GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = $90DB;
  {$EXTERNALSYM GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS}
  GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = $90DC;
  {$EXTERNALSYM GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS}
  GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = $90DD;
  {$EXTERNALSYM GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS}
  GL_MAX_SHADER_STORAGE_BLOCK_SIZE = $90DE;
  {$EXTERNALSYM GL_MAX_SHADER_STORAGE_BLOCK_SIZE}
  GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = $90DF;
  {$EXTERNALSYM GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT}
  GL_SHADER_STORAGE_BARRIER_BIT = $00002000;
  {$EXTERNALSYM GL_SHADER_STORAGE_BARRIER_BIT}
  GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = $8F39;
  {$EXTERNALSYM GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES}
  GL_DEPTH_STENCIL_TEXTURE_MODE = $90EA;
  {$EXTERNALSYM GL_DEPTH_STENCIL_TEXTURE_MODE}
  GL_TEXTURE_BUFFER_OFFSET = $919D;
  {$EXTERNALSYM GL_TEXTURE_BUFFER_OFFSET}
  GL_TEXTURE_BUFFER_SIZE = $919E;
  {$EXTERNALSYM GL_TEXTURE_BUFFER_SIZE}
  GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = $919F;
  {$EXTERNALSYM GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT}
  GL_TEXTURE_VIEW_MIN_LEVEL = $82DB;
  {$EXTERNALSYM GL_TEXTURE_VIEW_MIN_LEVEL}
  GL_TEXTURE_VIEW_NUM_LEVELS = $82DC;
  {$EXTERNALSYM GL_TEXTURE_VIEW_NUM_LEVELS}
  GL_TEXTURE_VIEW_MIN_LAYER = $82DD;
  {$EXTERNALSYM GL_TEXTURE_VIEW_MIN_LAYER}
  GL_TEXTURE_VIEW_NUM_LAYERS = $82DE;
  {$EXTERNALSYM GL_TEXTURE_VIEW_NUM_LAYERS}
  GL_TEXTURE_IMMUTABLE_LEVELS = $82DF;
  {$EXTERNALSYM GL_TEXTURE_IMMUTABLE_LEVELS}
  GL_VERTEX_ATTRIB_BINDING = $82D4;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_BINDING}
  GL_VERTEX_ATTRIB_RELATIVE_OFFSET = $82D5;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_RELATIVE_OFFSET}
  GL_VERTEX_BINDING_DIVISOR = $82D6;
  {$EXTERNALSYM GL_VERTEX_BINDING_DIVISOR}
  GL_VERTEX_BINDING_OFFSET = $82D7;
  {$EXTERNALSYM GL_VERTEX_BINDING_OFFSET}
  GL_VERTEX_BINDING_STRIDE = $82D8;
  {$EXTERNALSYM GL_VERTEX_BINDING_STRIDE}
  GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = $82D9;
  {$EXTERNALSYM GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET}
  GL_MAX_VERTEX_ATTRIB_BINDINGS = $82DA;
  {$EXTERNALSYM GL_MAX_VERTEX_ATTRIB_BINDINGS}
  GL_DISPLAY_LIST = $82E7;
  {$EXTERNALSYM GL_DISPLAY_LIST}

{ GL_VERSION_4_4 }
  GL_MAX_VERTEX_ATTRIB_STRIDE = $82E5;
  {$EXTERNALSYM GL_MAX_VERTEX_ATTRIB_STRIDE}
  GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = $8221;
  {$EXTERNALSYM GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED}
  GL_TEXTURE_BUFFER_BINDING = $8C2A;
  {$EXTERNALSYM GL_TEXTURE_BUFFER_BINDING}
  GL_MAP_PERSISTENT_BIT = $0040;
  {$EXTERNALSYM GL_MAP_PERSISTENT_BIT}
  GL_MAP_COHERENT_BIT = $0080;
  {$EXTERNALSYM GL_MAP_COHERENT_BIT}
  GL_DYNAMIC_STORAGE_BIT = $0100;
  {$EXTERNALSYM GL_DYNAMIC_STORAGE_BIT}
  GL_CLIENT_STORAGE_BIT = $0200;
  {$EXTERNALSYM GL_CLIENT_STORAGE_BIT}
  GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = $00004000;
  {$EXTERNALSYM GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT}
  GL_BUFFER_IMMUTABLE_STORAGE = $821F;
  {$EXTERNALSYM GL_BUFFER_IMMUTABLE_STORAGE}
  GL_BUFFER_STORAGE_FLAGS = $8220;
  {$EXTERNALSYM GL_BUFFER_STORAGE_FLAGS}
  GL_CLEAR_TEXTURE = $9365;
  {$EXTERNALSYM GL_CLEAR_TEXTURE}
  GL_LOCATION_COMPONENT = $934A;
  {$EXTERNALSYM GL_LOCATION_COMPONENT}
  GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = $934B;
  {$EXTERNALSYM GL_TRANSFORM_FEEDBACK_BUFFER_INDEX}
  GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = $934C;
  {$EXTERNALSYM GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE}
  GL_QUERY_BUFFER = $9192;
  {$EXTERNALSYM GL_QUERY_BUFFER}
  GL_QUERY_BUFFER_BARRIER_BIT = $00008000;
  {$EXTERNALSYM GL_QUERY_BUFFER_BARRIER_BIT}
  GL_QUERY_BUFFER_BINDING = $9193;
  {$EXTERNALSYM GL_QUERY_BUFFER_BINDING}
  GL_QUERY_RESULT_NO_WAIT = $9194;
  {$EXTERNALSYM GL_QUERY_RESULT_NO_WAIT}
  GL_MIRROR_CLAMP_TO_EDGE = $8743;
  {$EXTERNALSYM GL_MIRROR_CLAMP_TO_EDGE}

{ GL_ARB_ES2_compatibility }

{ GL_ARB_ES3_compatibility }

{ GL_ARB_arrays_of_arrays }

{ GL_ARB_base_instance }
  GL_UNSIGNED_INT64_ARB = $140F;
  {$EXTERNALSYM GL_UNSIGNED_INT64_ARB}

{ GL_ARB_blend_func_extended }

{ GL_ARB_buffer_storage }

{ GL_ARB_cl_event }
  GL_SYNC_CL_EVENT_ARB = $8240;
  {$EXTERNALSYM GL_SYNC_CL_EVENT_ARB}
  GL_SYNC_CL_EVENT_COMPLETE_ARB = $8241;
  {$EXTERNALSYM GL_SYNC_CL_EVENT_COMPLETE_ARB}

{ GL_ARB_clear_buffer_object }

{ GL_ARB_clear_texture }

{ GL_ARB_color_buffer_float }
  GL_RGBA_FLOAT_MODE_ARB = $8820;
  {$EXTERNALSYM GL_RGBA_FLOAT_MODE_ARB}
  GL_CLAMP_VERTEX_COLOR_ARB = $891A;
  {$EXTERNALSYM GL_CLAMP_VERTEX_COLOR_ARB}
  GL_CLAMP_FRAGMENT_COLOR_ARB = $891B;
  {$EXTERNALSYM GL_CLAMP_FRAGMENT_COLOR_ARB}
  GL_CLAMP_READ_COLOR_ARB = $891C;
  {$EXTERNALSYM GL_CLAMP_READ_COLOR_ARB}
  GL_FIXED_ONLY_ARB = $891D;
  {$EXTERNALSYM GL_FIXED_ONLY_ARB}

{ GL_ARB_compatibility }

{ GL_ARB_compressed_texture_pixel_storage }

{ GL_ARB_compute_shader }
  GL_COMPUTE_SHADER_BIT = $00000020;
  {$EXTERNALSYM GL_COMPUTE_SHADER_BIT}

{ GL_ARB_compute_variable_group_size }
  GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB = $9344;
  {$EXTERNALSYM GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB}
  GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB = $90EB;
  {$EXTERNALSYM GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB}
  GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB = $9345;
  {$EXTERNALSYM GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB}
  GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB = $91BF;
  {$EXTERNALSYM GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB}

{ GL_ARB_conservative_depth }

{ GL_ARB_copy_buffer }
  GL_COPY_READ_BUFFER_BINDING = $8F36;
  {$EXTERNALSYM GL_COPY_READ_BUFFER_BINDING}
  GL_COPY_WRITE_BUFFER_BINDING = $8F37;
  {$EXTERNALSYM GL_COPY_WRITE_BUFFER_BINDING}

{ GL_ARB_copy_image }

{ GL_ARB_debug_output }
  GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB = $8242;
  {$EXTERNALSYM GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB}
  GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = $8243;
  {$EXTERNALSYM GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB}
  GL_DEBUG_CALLBACK_FUNCTION_ARB = $8244;
  {$EXTERNALSYM GL_DEBUG_CALLBACK_FUNCTION_ARB}
  GL_DEBUG_CALLBACK_USER_PARAM_ARB = $8245;
  {$EXTERNALSYM GL_DEBUG_CALLBACK_USER_PARAM_ARB}
  GL_DEBUG_SOURCE_API_ARB = $8246;
  {$EXTERNALSYM GL_DEBUG_SOURCE_API_ARB}
  GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB = $8247;
  {$EXTERNALSYM GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB}
  GL_DEBUG_SOURCE_SHADER_COMPILER_ARB = $8248;
  {$EXTERNALSYM GL_DEBUG_SOURCE_SHADER_COMPILER_ARB}
  GL_DEBUG_SOURCE_THIRD_PARTY_ARB = $8249;
  {$EXTERNALSYM GL_DEBUG_SOURCE_THIRD_PARTY_ARB}
  GL_DEBUG_SOURCE_APPLICATION_ARB = $824A;
  {$EXTERNALSYM GL_DEBUG_SOURCE_APPLICATION_ARB}
  GL_DEBUG_SOURCE_OTHER_ARB = $824B;
  {$EXTERNALSYM GL_DEBUG_SOURCE_OTHER_ARB}
  GL_DEBUG_TYPE_ERROR_ARB = $824C;
  {$EXTERNALSYM GL_DEBUG_TYPE_ERROR_ARB}
  GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = $824D;
  {$EXTERNALSYM GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB}
  GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = $824E;
  {$EXTERNALSYM GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB}
  GL_DEBUG_TYPE_PORTABILITY_ARB = $824F;
  {$EXTERNALSYM GL_DEBUG_TYPE_PORTABILITY_ARB}
  GL_DEBUG_TYPE_PERFORMANCE_ARB = $8250;
  {$EXTERNALSYM GL_DEBUG_TYPE_PERFORMANCE_ARB}
  GL_DEBUG_TYPE_OTHER_ARB = $8251;
  {$EXTERNALSYM GL_DEBUG_TYPE_OTHER_ARB}
  GL_MAX_DEBUG_MESSAGE_LENGTH_ARB = $9143;
  {$EXTERNALSYM GL_MAX_DEBUG_MESSAGE_LENGTH_ARB}
  GL_MAX_DEBUG_LOGGED_MESSAGES_ARB = $9144;
  {$EXTERNALSYM GL_MAX_DEBUG_LOGGED_MESSAGES_ARB}
  GL_DEBUG_LOGGED_MESSAGES_ARB = $9145;
  {$EXTERNALSYM GL_DEBUG_LOGGED_MESSAGES_ARB}
  GL_DEBUG_SEVERITY_HIGH_ARB = $9146;
  {$EXTERNALSYM GL_DEBUG_SEVERITY_HIGH_ARB}
  GL_DEBUG_SEVERITY_MEDIUM_ARB = $9147;
  {$EXTERNALSYM GL_DEBUG_SEVERITY_MEDIUM_ARB}
  GL_DEBUG_SEVERITY_LOW_ARB = $9148;
  {$EXTERNALSYM GL_DEBUG_SEVERITY_LOW_ARB}

{ GL_ARB_depth_buffer_float }

{ GL_ARB_depth_clamp }

{ GL_ARB_depth_texture }
  GL_DEPTH_COMPONENT16_ARB = $81A5;
  {$EXTERNALSYM GL_DEPTH_COMPONENT16_ARB}
  GL_DEPTH_COMPONENT24_ARB = $81A6;
  {$EXTERNALSYM GL_DEPTH_COMPONENT24_ARB}
  GL_DEPTH_COMPONENT32_ARB = $81A7;
  {$EXTERNALSYM GL_DEPTH_COMPONENT32_ARB}
  GL_TEXTURE_DEPTH_SIZE_ARB = $884A;
  {$EXTERNALSYM GL_TEXTURE_DEPTH_SIZE_ARB}
  GL_DEPTH_TEXTURE_MODE_ARB = $884B;
  {$EXTERNALSYM GL_DEPTH_TEXTURE_MODE_ARB}

{ GL_ARB_draw_buffers }
  GL_MAX_DRAW_BUFFERS_ARB = $8824;
  {$EXTERNALSYM GL_MAX_DRAW_BUFFERS_ARB}
  GL_DRAW_BUFFER0_ARB = $8825;
  {$EXTERNALSYM GL_DRAW_BUFFER0_ARB}
  GL_DRAW_BUFFER1_ARB = $8826;
  {$EXTERNALSYM GL_DRAW_BUFFER1_ARB}
  GL_DRAW_BUFFER2_ARB = $8827;
  {$EXTERNALSYM GL_DRAW_BUFFER2_ARB}
  GL_DRAW_BUFFER3_ARB = $8828;
  {$EXTERNALSYM GL_DRAW_BUFFER3_ARB}
  GL_DRAW_BUFFER4_ARB = $8829;
  {$EXTERNALSYM GL_DRAW_BUFFER4_ARB}
  GL_DRAW_BUFFER5_ARB = $882A;
  {$EXTERNALSYM GL_DRAW_BUFFER5_ARB}
  GL_DRAW_BUFFER6_ARB = $882B;
  {$EXTERNALSYM GL_DRAW_BUFFER6_ARB}
  GL_DRAW_BUFFER7_ARB = $882C;
  {$EXTERNALSYM GL_DRAW_BUFFER7_ARB}
  GL_DRAW_BUFFER8_ARB = $882D;
  {$EXTERNALSYM GL_DRAW_BUFFER8_ARB}
  GL_DRAW_BUFFER9_ARB = $882E;
  {$EXTERNALSYM GL_DRAW_BUFFER9_ARB}
  GL_DRAW_BUFFER10_ARB = $882F;
  {$EXTERNALSYM GL_DRAW_BUFFER10_ARB}
  GL_DRAW_BUFFER11_ARB = $8830;
  {$EXTERNALSYM GL_DRAW_BUFFER11_ARB}
  GL_DRAW_BUFFER12_ARB = $8831;
  {$EXTERNALSYM GL_DRAW_BUFFER12_ARB}
  GL_DRAW_BUFFER13_ARB = $8832;
  {$EXTERNALSYM GL_DRAW_BUFFER13_ARB}
  GL_DRAW_BUFFER14_ARB = $8833;
  {$EXTERNALSYM GL_DRAW_BUFFER14_ARB}
  GL_DRAW_BUFFER15_ARB = $8834;
  {$EXTERNALSYM GL_DRAW_BUFFER15_ARB}

{ GL_ARB_draw_buffers_blend }

{ GL_ARB_draw_elements_base_vertex }

{ GL_ARB_draw_indirect }

{ GL_ARB_draw_instanced }

{ GL_ARB_enhanced_layouts }

{ GL_ARB_explicit_attrib_location }

{ GL_ARB_explicit_uniform_location }

{ GL_ARB_fragment_coord_conventions }

{ GL_ARB_fragment_layer_viewport }

{ GL_ARB_fragment_program }
  GL_FRAGMENT_PROGRAM_ARB = $8804;
  {$EXTERNALSYM GL_FRAGMENT_PROGRAM_ARB}
  GL_PROGRAM_FORMAT_ASCII_ARB = $8875;
  {$EXTERNALSYM GL_PROGRAM_FORMAT_ASCII_ARB}
  GL_PROGRAM_LENGTH_ARB = $8627;
  {$EXTERNALSYM GL_PROGRAM_LENGTH_ARB}
  GL_PROGRAM_FORMAT_ARB = $8876;
  {$EXTERNALSYM GL_PROGRAM_FORMAT_ARB}
  GL_PROGRAM_BINDING_ARB = $8677;
  {$EXTERNALSYM GL_PROGRAM_BINDING_ARB}
  GL_PROGRAM_INSTRUCTIONS_ARB = $88A0;
  {$EXTERNALSYM GL_PROGRAM_INSTRUCTIONS_ARB}
  GL_MAX_PROGRAM_INSTRUCTIONS_ARB = $88A1;
  {$EXTERNALSYM GL_MAX_PROGRAM_INSTRUCTIONS_ARB}
  GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = $88A2;
  {$EXTERNALSYM GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB}
  GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = $88A3;
  {$EXTERNALSYM GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB}
  GL_PROGRAM_TEMPORARIES_ARB = $88A4;
  {$EXTERNALSYM GL_PROGRAM_TEMPORARIES_ARB}
  GL_MAX_PROGRAM_TEMPORARIES_ARB = $88A5;
  {$EXTERNALSYM GL_MAX_PROGRAM_TEMPORARIES_ARB}
  GL_PROGRAM_NATIVE_TEMPORARIES_ARB = $88A6;
  {$EXTERNALSYM GL_PROGRAM_NATIVE_TEMPORARIES_ARB}
  GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = $88A7;
  {$EXTERNALSYM GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB}
  GL_PROGRAM_PARAMETERS_ARB = $88A8;
  {$EXTERNALSYM GL_PROGRAM_PARAMETERS_ARB}
  GL_MAX_PROGRAM_PARAMETERS_ARB = $88A9;
  {$EXTERNALSYM GL_MAX_PROGRAM_PARAMETERS_ARB}
  GL_PROGRAM_NATIVE_PARAMETERS_ARB = $88AA;
  {$EXTERNALSYM GL_PROGRAM_NATIVE_PARAMETERS_ARB}
  GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = $88AB;
  {$EXTERNALSYM GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB}
  GL_PROGRAM_ATTRIBS_ARB = $88AC;
  {$EXTERNALSYM GL_PROGRAM_ATTRIBS_ARB}
  GL_MAX_PROGRAM_ATTRIBS_ARB = $88AD;
  {$EXTERNALSYM GL_MAX_PROGRAM_ATTRIBS_ARB}
  GL_PROGRAM_NATIVE_ATTRIBS_ARB = $88AE;
  {$EXTERNALSYM GL_PROGRAM_NATIVE_ATTRIBS_ARB}
  GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = $88AF;
  {$EXTERNALSYM GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB}
  GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = $88B4;
  {$EXTERNALSYM GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB}
  GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = $88B5;
  {$EXTERNALSYM GL_MAX_PROGRAM_ENV_PARAMETERS_ARB}
  GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = $88B6;
  {$EXTERNALSYM GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB}
  GL_PROGRAM_ALU_INSTRUCTIONS_ARB = $8805;
  {$EXTERNALSYM GL_PROGRAM_ALU_INSTRUCTIONS_ARB}
  GL_PROGRAM_TEX_INSTRUCTIONS_ARB = $8806;
  {$EXTERNALSYM GL_PROGRAM_TEX_INSTRUCTIONS_ARB}
  GL_PROGRAM_TEX_INDIRECTIONS_ARB = $8807;
  {$EXTERNALSYM GL_PROGRAM_TEX_INDIRECTIONS_ARB}
  GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = $8808;
  {$EXTERNALSYM GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB}
  GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = $8809;
  {$EXTERNALSYM GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB}
  GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = $880A;
  {$EXTERNALSYM GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB}
  GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = $880B;
  {$EXTERNALSYM GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB}
  GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = $880C;
  {$EXTERNALSYM GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB}
  GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = $880D;
  {$EXTERNALSYM GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB}
  GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = $880E;
  {$EXTERNALSYM GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB}
  GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = $880F;
  {$EXTERNALSYM GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB}
  GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = $8810;
  {$EXTERNALSYM GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB}
  GL_PROGRAM_STRING_ARB = $8628;
  {$EXTERNALSYM GL_PROGRAM_STRING_ARB}
  GL_PROGRAM_ERROR_POSITION_ARB = $864B;
  {$EXTERNALSYM GL_PROGRAM_ERROR_POSITION_ARB}
  GL_CURRENT_MATRIX_ARB = $8641;
  {$EXTERNALSYM GL_CURRENT_MATRIX_ARB}
  GL_TRANSPOSE_CURRENT_MATRIX_ARB = $88B7;
  {$EXTERNALSYM GL_TRANSPOSE_CURRENT_MATRIX_ARB}
  GL_CURRENT_MATRIX_STACK_DEPTH_ARB = $8640;
  {$EXTERNALSYM GL_CURRENT_MATRIX_STACK_DEPTH_ARB}
  GL_MAX_PROGRAM_MATRICES_ARB = $862F;
  {$EXTERNALSYM GL_MAX_PROGRAM_MATRICES_ARB}
  GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = $862E;
  {$EXTERNALSYM GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB}
  GL_MAX_TEXTURE_COORDS_ARB = $8871;
  {$EXTERNALSYM GL_MAX_TEXTURE_COORDS_ARB}
  GL_MAX_TEXTURE_IMAGE_UNITS_ARB = $8872;
  {$EXTERNALSYM GL_MAX_TEXTURE_IMAGE_UNITS_ARB}
  GL_PROGRAM_ERROR_STRING_ARB = $8874;
  {$EXTERNALSYM GL_PROGRAM_ERROR_STRING_ARB}
  GL_MATRIX0_ARB = $88C0;
  {$EXTERNALSYM GL_MATRIX0_ARB}
  GL_MATRIX1_ARB = $88C1;
  {$EXTERNALSYM GL_MATRIX1_ARB}
  GL_MATRIX2_ARB = $88C2;
  {$EXTERNALSYM GL_MATRIX2_ARB}
  GL_MATRIX3_ARB = $88C3;
  {$EXTERNALSYM GL_MATRIX3_ARB}
  GL_MATRIX4_ARB = $88C4;
  {$EXTERNALSYM GL_MATRIX4_ARB}
  GL_MATRIX5_ARB = $88C5;
  {$EXTERNALSYM GL_MATRIX5_ARB}
  GL_MATRIX6_ARB = $88C6;
  {$EXTERNALSYM GL_MATRIX6_ARB}
  GL_MATRIX7_ARB = $88C7;
  {$EXTERNALSYM GL_MATRIX7_ARB}
  GL_MATRIX8_ARB = $88C8;
  {$EXTERNALSYM GL_MATRIX8_ARB}
  GL_MATRIX9_ARB = $88C9;
  {$EXTERNALSYM GL_MATRIX9_ARB}
  GL_MATRIX10_ARB = $88CA;
  {$EXTERNALSYM GL_MATRIX10_ARB}
  GL_MATRIX11_ARB = $88CB;
  {$EXTERNALSYM GL_MATRIX11_ARB}
  GL_MATRIX12_ARB = $88CC;
  {$EXTERNALSYM GL_MATRIX12_ARB}
  GL_MATRIX13_ARB = $88CD;
  {$EXTERNALSYM GL_MATRIX13_ARB}
  GL_MATRIX14_ARB = $88CE;
  {$EXTERNALSYM GL_MATRIX14_ARB}
  GL_MATRIX15_ARB = $88CF;
  {$EXTERNALSYM GL_MATRIX15_ARB}
  GL_MATRIX16_ARB = $88D0;
  {$EXTERNALSYM GL_MATRIX16_ARB}
  GL_MATRIX17_ARB = $88D1;
  {$EXTERNALSYM GL_MATRIX17_ARB}
  GL_MATRIX18_ARB = $88D2;
  {$EXTERNALSYM GL_MATRIX18_ARB}
  GL_MATRIX19_ARB = $88D3;
  {$EXTERNALSYM GL_MATRIX19_ARB}
  GL_MATRIX20_ARB = $88D4;
  {$EXTERNALSYM GL_MATRIX20_ARB}
  GL_MATRIX21_ARB = $88D5;
  {$EXTERNALSYM GL_MATRIX21_ARB}
  GL_MATRIX22_ARB = $88D6;
  {$EXTERNALSYM GL_MATRIX22_ARB}
  GL_MATRIX23_ARB = $88D7;
  {$EXTERNALSYM GL_MATRIX23_ARB}
  GL_MATRIX24_ARB = $88D8;
  {$EXTERNALSYM GL_MATRIX24_ARB}
  GL_MATRIX25_ARB = $88D9;
  {$EXTERNALSYM GL_MATRIX25_ARB}
  GL_MATRIX26_ARB = $88DA;
  {$EXTERNALSYM GL_MATRIX26_ARB}
  GL_MATRIX27_ARB = $88DB;
  {$EXTERNALSYM GL_MATRIX27_ARB}
  GL_MATRIX28_ARB = $88DC;
  {$EXTERNALSYM GL_MATRIX28_ARB}
  GL_MATRIX29_ARB = $88DD;
  {$EXTERNALSYM GL_MATRIX29_ARB}
  GL_MATRIX30_ARB = $88DE;
  {$EXTERNALSYM GL_MATRIX30_ARB}
  GL_MATRIX31_ARB = $88DF;
  {$EXTERNALSYM GL_MATRIX31_ARB}

{ GL_ARB_fragment_program_shadow }

{ GL_ARB_fragment_shader }
  GL_FRAGMENT_SHADER_ARB = $8B30;
  {$EXTERNALSYM GL_FRAGMENT_SHADER_ARB}
  GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = $8B49;
  {$EXTERNALSYM GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB}
  GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = $8B8B;
  {$EXTERNALSYM GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB}

{ GL_ARB_framebuffer_no_attachments }

{ GL_ARB_framebuffer_object }

{ GL_ARB_framebuffer_sRGB }

{ GL_ARB_geometry_shader4 }
  GL_LINES_ADJACENCY_ARB = $000A;
  {$EXTERNALSYM GL_LINES_ADJACENCY_ARB}
  GL_LINE_STRIP_ADJACENCY_ARB = $000B;
  {$EXTERNALSYM GL_LINE_STRIP_ADJACENCY_ARB}
  GL_TRIANGLES_ADJACENCY_ARB = $000C;
  {$EXTERNALSYM GL_TRIANGLES_ADJACENCY_ARB}
  GL_TRIANGLE_STRIP_ADJACENCY_ARB = $000D;
  {$EXTERNALSYM GL_TRIANGLE_STRIP_ADJACENCY_ARB}
  GL_PROGRAM_POINT_SIZE_ARB = $8642;
  {$EXTERNALSYM GL_PROGRAM_POINT_SIZE_ARB}
  GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = $8C29;
  {$EXTERNALSYM GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB}
  GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = $8DA7;
  {$EXTERNALSYM GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB}
  GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = $8DA8;
  {$EXTERNALSYM GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB}
  GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = $8DA9;
  {$EXTERNALSYM GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB}
  GL_GEOMETRY_SHADER_ARB = $8DD9;
  {$EXTERNALSYM GL_GEOMETRY_SHADER_ARB}
  GL_GEOMETRY_VERTICES_OUT_ARB = $8DDA;
  {$EXTERNALSYM GL_GEOMETRY_VERTICES_OUT_ARB}
  GL_GEOMETRY_INPUT_TYPE_ARB = $8DDB;
  {$EXTERNALSYM GL_GEOMETRY_INPUT_TYPE_ARB}
  GL_GEOMETRY_OUTPUT_TYPE_ARB = $8DDC;
  {$EXTERNALSYM GL_GEOMETRY_OUTPUT_TYPE_ARB}
  GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB = $8DDD;
  {$EXTERNALSYM GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB}
  GL_MAX_VERTEX_VARYING_COMPONENTS_ARB = $8DDE;
  {$EXTERNALSYM GL_MAX_VERTEX_VARYING_COMPONENTS_ARB}
  GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = $8DDF;
  {$EXTERNALSYM GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB}
  GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB = $8DE0;
  {$EXTERNALSYM GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB}
  GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = $8DE1;
  {$EXTERNALSYM GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB}

{ GL_ARB_get_program_binary }

{ GL_ARB_gpu_shader5 }

{ GL_ARB_gpu_shader_fp64 }
  GL_HALF_FLOAT_ARB = $140B;
  {$EXTERNALSYM GL_HALF_FLOAT_ARB}

{ GL_ARB_half_float_vertex }

{ GL_ARB_imaging }
  GL_BLEND_COLOR = $8005;
  {$EXTERNALSYM GL_BLEND_COLOR}
  GL_BLEND_EQUATION = $8009;
  {$EXTERNALSYM GL_BLEND_EQUATION}
  GL_CONVOLUTION_1D = $8010;
  {$EXTERNALSYM GL_CONVOLUTION_1D}
  GL_CONVOLUTION_2D = $8011;
  {$EXTERNALSYM GL_CONVOLUTION_2D}
  GL_SEPARABLE_2D = $8012;
  {$EXTERNALSYM GL_SEPARABLE_2D}
  GL_CONVOLUTION_BORDER_MODE = $8013;
  {$EXTERNALSYM GL_CONVOLUTION_BORDER_MODE}
  GL_CONVOLUTION_FILTER_SCALE = $8014;
  {$EXTERNALSYM GL_CONVOLUTION_FILTER_SCALE}
  GL_CONVOLUTION_FILTER_BIAS = $8015;
  {$EXTERNALSYM GL_CONVOLUTION_FILTER_BIAS}
  GL_REDUCE = $8016;
  {$EXTERNALSYM GL_REDUCE}
  GL_CONVOLUTION_FORMAT = $8017;
  {$EXTERNALSYM GL_CONVOLUTION_FORMAT}
  GL_CONVOLUTION_WIDTH = $8018;
  {$EXTERNALSYM GL_CONVOLUTION_WIDTH}
  GL_CONVOLUTION_HEIGHT = $8019;
  {$EXTERNALSYM GL_CONVOLUTION_HEIGHT}
  GL_MAX_CONVOLUTION_WIDTH = $801A;
  {$EXTERNALSYM GL_MAX_CONVOLUTION_WIDTH}
  GL_MAX_CONVOLUTION_HEIGHT = $801B;
  {$EXTERNALSYM GL_MAX_CONVOLUTION_HEIGHT}
  GL_POST_CONVOLUTION_RED_SCALE = $801C;
  {$EXTERNALSYM GL_POST_CONVOLUTION_RED_SCALE}
  GL_POST_CONVOLUTION_GREEN_SCALE = $801D;
  {$EXTERNALSYM GL_POST_CONVOLUTION_GREEN_SCALE}
  GL_POST_CONVOLUTION_BLUE_SCALE = $801E;
  {$EXTERNALSYM GL_POST_CONVOLUTION_BLUE_SCALE}
  GL_POST_CONVOLUTION_ALPHA_SCALE = $801F;
  {$EXTERNALSYM GL_POST_CONVOLUTION_ALPHA_SCALE}
  GL_POST_CONVOLUTION_RED_BIAS = $8020;
  {$EXTERNALSYM GL_POST_CONVOLUTION_RED_BIAS}
  GL_POST_CONVOLUTION_GREEN_BIAS = $8021;
  {$EXTERNALSYM GL_POST_CONVOLUTION_GREEN_BIAS}
  GL_POST_CONVOLUTION_BLUE_BIAS = $8022;
  {$EXTERNALSYM GL_POST_CONVOLUTION_BLUE_BIAS}
  GL_POST_CONVOLUTION_ALPHA_BIAS = $8023;
  {$EXTERNALSYM GL_POST_CONVOLUTION_ALPHA_BIAS}
  GL_HISTOGRAM = $8024;
  {$EXTERNALSYM GL_HISTOGRAM}
  GL_PROXY_HISTOGRAM = $8025;
  {$EXTERNALSYM GL_PROXY_HISTOGRAM}
  GL_HISTOGRAM_WIDTH = $8026;
  {$EXTERNALSYM GL_HISTOGRAM_WIDTH}
  GL_HISTOGRAM_FORMAT = $8027;
  {$EXTERNALSYM GL_HISTOGRAM_FORMAT}
  GL_HISTOGRAM_RED_SIZE = $8028;
  {$EXTERNALSYM GL_HISTOGRAM_RED_SIZE}
  GL_HISTOGRAM_GREEN_SIZE = $8029;
  {$EXTERNALSYM GL_HISTOGRAM_GREEN_SIZE}
  GL_HISTOGRAM_BLUE_SIZE = $802A;
  {$EXTERNALSYM GL_HISTOGRAM_BLUE_SIZE}
  GL_HISTOGRAM_ALPHA_SIZE = $802B;
  {$EXTERNALSYM GL_HISTOGRAM_ALPHA_SIZE}
  GL_HISTOGRAM_LUMINANCE_SIZE = $802C;
  {$EXTERNALSYM GL_HISTOGRAM_LUMINANCE_SIZE}
  GL_HISTOGRAM_SINK = $802D;
  {$EXTERNALSYM GL_HISTOGRAM_SINK}
  GL_MINMAX = $802E;
  {$EXTERNALSYM GL_MINMAX}
  GL_MINMAX_FORMAT = $802F;
  {$EXTERNALSYM GL_MINMAX_FORMAT}
  GL_MINMAX_SINK = $8030;
  {$EXTERNALSYM GL_MINMAX_SINK}
  GL_TABLE_TOO_LARGE = $8031;
  {$EXTERNALSYM GL_TABLE_TOO_LARGE}
  GL_COLOR_MATRIX = $80B1;
  {$EXTERNALSYM GL_COLOR_MATRIX}
  GL_COLOR_MATRIX_STACK_DEPTH = $80B2;
  {$EXTERNALSYM GL_COLOR_MATRIX_STACK_DEPTH}
  GL_MAX_COLOR_MATRIX_STACK_DEPTH = $80B3;
  {$EXTERNALSYM GL_MAX_COLOR_MATRIX_STACK_DEPTH}
  GL_POST_COLOR_MATRIX_RED_SCALE = $80B4;
  {$EXTERNALSYM GL_POST_COLOR_MATRIX_RED_SCALE}
  GL_POST_COLOR_MATRIX_GREEN_SCALE = $80B5;
  {$EXTERNALSYM GL_POST_COLOR_MATRIX_GREEN_SCALE}
  GL_POST_COLOR_MATRIX_BLUE_SCALE = $80B6;
  {$EXTERNALSYM GL_POST_COLOR_MATRIX_BLUE_SCALE}
  GL_POST_COLOR_MATRIX_ALPHA_SCALE = $80B7;
  {$EXTERNALSYM GL_POST_COLOR_MATRIX_ALPHA_SCALE}
  GL_POST_COLOR_MATRIX_RED_BIAS = $80B8;
  {$EXTERNALSYM GL_POST_COLOR_MATRIX_RED_BIAS}
  GL_POST_COLOR_MATRIX_GREEN_BIAS = $80B9;
  {$EXTERNALSYM GL_POST_COLOR_MATRIX_GREEN_BIAS}
  GL_POST_COLOR_MATRIX_BLUE_BIAS = $80BA;
  {$EXTERNALSYM GL_POST_COLOR_MATRIX_BLUE_BIAS}
  GL_POST_COLOR_MATRIX_ALPHA_BIAS = $80BB;
  {$EXTERNALSYM GL_POST_COLOR_MATRIX_ALPHA_BIAS}
  GL_COLOR_TABLE = $80D0;
  {$EXTERNALSYM GL_COLOR_TABLE}
  GL_POST_CONVOLUTION_COLOR_TABLE = $80D1;
  {$EXTERNALSYM GL_POST_CONVOLUTION_COLOR_TABLE}
  GL_POST_COLOR_MATRIX_COLOR_TABLE = $80D2;
  {$EXTERNALSYM GL_POST_COLOR_MATRIX_COLOR_TABLE}
  GL_PROXY_COLOR_TABLE = $80D3;
  {$EXTERNALSYM GL_PROXY_COLOR_TABLE}
  GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = $80D4;
  {$EXTERNALSYM GL_PROXY_POST_CONVOLUTION_COLOR_TABLE}
  GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = $80D5;
  {$EXTERNALSYM GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE}
  GL_COLOR_TABLE_SCALE = $80D6;
  {$EXTERNALSYM GL_COLOR_TABLE_SCALE}
  GL_COLOR_TABLE_BIAS = $80D7;
  {$EXTERNALSYM GL_COLOR_TABLE_BIAS}
  GL_COLOR_TABLE_FORMAT = $80D8;
  {$EXTERNALSYM GL_COLOR_TABLE_FORMAT}
  GL_COLOR_TABLE_WIDTH = $80D9;
  {$EXTERNALSYM GL_COLOR_TABLE_WIDTH}
  GL_COLOR_TABLE_RED_SIZE = $80DA;
  {$EXTERNALSYM GL_COLOR_TABLE_RED_SIZE}
  GL_COLOR_TABLE_GREEN_SIZE = $80DB;
  {$EXTERNALSYM GL_COLOR_TABLE_GREEN_SIZE}
  GL_COLOR_TABLE_BLUE_SIZE = $80DC;
  {$EXTERNALSYM GL_COLOR_TABLE_BLUE_SIZE}
  GL_COLOR_TABLE_ALPHA_SIZE = $80DD;
  {$EXTERNALSYM GL_COLOR_TABLE_ALPHA_SIZE}
  GL_COLOR_TABLE_LUMINANCE_SIZE = $80DE;
  {$EXTERNALSYM GL_COLOR_TABLE_LUMINANCE_SIZE}
  GL_COLOR_TABLE_INTENSITY_SIZE = $80DF;
  {$EXTERNALSYM GL_COLOR_TABLE_INTENSITY_SIZE}
  GL_CONSTANT_BORDER = $8151;
  {$EXTERNALSYM GL_CONSTANT_BORDER}
  GL_REPLICATE_BORDER = $8153;
  {$EXTERNALSYM GL_REPLICATE_BORDER}
  GL_CONVOLUTION_BORDER_COLOR = $8154;
  {$EXTERNALSYM GL_CONVOLUTION_BORDER_COLOR}

{ GL_ARB_indirect_parameters }
  GL_PARAMETER_BUFFER_ARB = $80EE;
  {$EXTERNALSYM GL_PARAMETER_BUFFER_ARB}
  GL_PARAMETER_BUFFER_BINDING_ARB = $80EF;
  {$EXTERNALSYM GL_PARAMETER_BUFFER_BINDING_ARB}

{ GL_ARB_instanced_arrays }
  GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB = $88FE;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB}

{ GL_ARB_internalformat_query }

{ GL_ARB_internalformat_query2 }
  GL_SRGB_DECODE_ARB = $8299;
  {$EXTERNALSYM GL_SRGB_DECODE_ARB}

{ GL_ARB_invalidate_subdata }

{ GL_ARB_map_buffer_alignment }

{ GL_ARB_map_buffer_range }

{ GL_ARB_matrix_palette }
  GL_MATRIX_PALETTE_ARB = $8840;
  {$EXTERNALSYM GL_MATRIX_PALETTE_ARB}
  GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = $8841;
  {$EXTERNALSYM GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB}
  GL_MAX_PALETTE_MATRICES_ARB = $8842;
  {$EXTERNALSYM GL_MAX_PALETTE_MATRICES_ARB}
  GL_CURRENT_PALETTE_MATRIX_ARB = $8843;
  {$EXTERNALSYM GL_CURRENT_PALETTE_MATRIX_ARB}
  GL_MATRIX_INDEX_ARRAY_ARB = $8844;
  {$EXTERNALSYM GL_MATRIX_INDEX_ARRAY_ARB}
  GL_CURRENT_MATRIX_INDEX_ARB = $8845;
  {$EXTERNALSYM GL_CURRENT_MATRIX_INDEX_ARB}
  GL_MATRIX_INDEX_ARRAY_SIZE_ARB = $8846;
  {$EXTERNALSYM GL_MATRIX_INDEX_ARRAY_SIZE_ARB}
  GL_MATRIX_INDEX_ARRAY_TYPE_ARB = $8847;
  {$EXTERNALSYM GL_MATRIX_INDEX_ARRAY_TYPE_ARB}
  GL_MATRIX_INDEX_ARRAY_STRIDE_ARB = $8848;
  {$EXTERNALSYM GL_MATRIX_INDEX_ARRAY_STRIDE_ARB}
  GL_MATRIX_INDEX_ARRAY_POINTER_ARB = $8849;
  {$EXTERNALSYM GL_MATRIX_INDEX_ARRAY_POINTER_ARB}

{ GL_ARB_multi_bind }

{ GL_ARB_multi_draw_indirect }

{ GL_ARB_multisample }
  GL_MULTISAMPLE_ARB = $809D;
  {$EXTERNALSYM GL_MULTISAMPLE_ARB}
  GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = $809E;
  {$EXTERNALSYM GL_SAMPLE_ALPHA_TO_COVERAGE_ARB}
  GL_SAMPLE_ALPHA_TO_ONE_ARB = $809F;
  {$EXTERNALSYM GL_SAMPLE_ALPHA_TO_ONE_ARB}
  GL_SAMPLE_COVERAGE_ARB = $80A0;
  {$EXTERNALSYM GL_SAMPLE_COVERAGE_ARB}
  GL_SAMPLE_BUFFERS_ARB = $80A8;
  {$EXTERNALSYM GL_SAMPLE_BUFFERS_ARB}
  GL_SAMPLES_ARB = $80A9;
  {$EXTERNALSYM GL_SAMPLES_ARB}
  GL_SAMPLE_COVERAGE_VALUE_ARB = $80AA;
  {$EXTERNALSYM GL_SAMPLE_COVERAGE_VALUE_ARB}
  GL_SAMPLE_COVERAGE_INVERT_ARB = $80AB;
  {$EXTERNALSYM GL_SAMPLE_COVERAGE_INVERT_ARB}
  GL_MULTISAMPLE_BIT_ARB = $20000000;
  {$EXTERNALSYM GL_MULTISAMPLE_BIT_ARB}

{ GL_ARB_multitexture }
  GL_TEXTURE0_ARB = $84C0;
  {$EXTERNALSYM GL_TEXTURE0_ARB}
  GL_TEXTURE1_ARB = $84C1;
  {$EXTERNALSYM GL_TEXTURE1_ARB}
  GL_TEXTURE2_ARB = $84C2;
  {$EXTERNALSYM GL_TEXTURE2_ARB}
  GL_TEXTURE3_ARB = $84C3;
  {$EXTERNALSYM GL_TEXTURE3_ARB}
  GL_TEXTURE4_ARB = $84C4;
  {$EXTERNALSYM GL_TEXTURE4_ARB}
  GL_TEXTURE5_ARB = $84C5;
  {$EXTERNALSYM GL_TEXTURE5_ARB}
  GL_TEXTURE6_ARB = $84C6;
  {$EXTERNALSYM GL_TEXTURE6_ARB}
  GL_TEXTURE7_ARB = $84C7;
  {$EXTERNALSYM GL_TEXTURE7_ARB}
  GL_TEXTURE8_ARB = $84C8;
  {$EXTERNALSYM GL_TEXTURE8_ARB}
  GL_TEXTURE9_ARB = $84C9;
  {$EXTERNALSYM GL_TEXTURE9_ARB}
  GL_TEXTURE10_ARB = $84CA;
  {$EXTERNALSYM GL_TEXTURE10_ARB}
  GL_TEXTURE11_ARB = $84CB;
  {$EXTERNALSYM GL_TEXTURE11_ARB}
  GL_TEXTURE12_ARB = $84CC;
  {$EXTERNALSYM GL_TEXTURE12_ARB}
  GL_TEXTURE13_ARB = $84CD;
  {$EXTERNALSYM GL_TEXTURE13_ARB}
  GL_TEXTURE14_ARB = $84CE;
  {$EXTERNALSYM GL_TEXTURE14_ARB}
  GL_TEXTURE15_ARB = $84CF;
  {$EXTERNALSYM GL_TEXTURE15_ARB}
  GL_TEXTURE16_ARB = $84D0;
  {$EXTERNALSYM GL_TEXTURE16_ARB}
  GL_TEXTURE17_ARB = $84D1;
  {$EXTERNALSYM GL_TEXTURE17_ARB}
  GL_TEXTURE18_ARB = $84D2;
  {$EXTERNALSYM GL_TEXTURE18_ARB}
  GL_TEXTURE19_ARB = $84D3;
  {$EXTERNALSYM GL_TEXTURE19_ARB}
  GL_TEXTURE20_ARB = $84D4;
  {$EXTERNALSYM GL_TEXTURE20_ARB}
  GL_TEXTURE21_ARB = $84D5;
  {$EXTERNALSYM GL_TEXTURE21_ARB}
  GL_TEXTURE22_ARB = $84D6;
  {$EXTERNALSYM GL_TEXTURE22_ARB}
  GL_TEXTURE23_ARB = $84D7;
  {$EXTERNALSYM GL_TEXTURE23_ARB}
  GL_TEXTURE24_ARB = $84D8;
  {$EXTERNALSYM GL_TEXTURE24_ARB}
  GL_TEXTURE25_ARB = $84D9;
  {$EXTERNALSYM GL_TEXTURE25_ARB}
  GL_TEXTURE26_ARB = $84DA;
  {$EXTERNALSYM GL_TEXTURE26_ARB}
  GL_TEXTURE27_ARB = $84DB;
  {$EXTERNALSYM GL_TEXTURE27_ARB}
  GL_TEXTURE28_ARB = $84DC;
  {$EXTERNALSYM GL_TEXTURE28_ARB}
  GL_TEXTURE29_ARB = $84DD;
  {$EXTERNALSYM GL_TEXTURE29_ARB}
  GL_TEXTURE30_ARB = $84DE;
  {$EXTERNALSYM GL_TEXTURE30_ARB}
  GL_TEXTURE31_ARB = $84DF;
  {$EXTERNALSYM GL_TEXTURE31_ARB}
  GL_ACTIVE_TEXTURE_ARB = $84E0;
  {$EXTERNALSYM GL_ACTIVE_TEXTURE_ARB}
  GL_CLIENT_ACTIVE_TEXTURE_ARB = $84E1;
  {$EXTERNALSYM GL_CLIENT_ACTIVE_TEXTURE_ARB}
  GL_MAX_TEXTURE_UNITS_ARB = $84E2;
  {$EXTERNALSYM GL_MAX_TEXTURE_UNITS_ARB}

{ GL_ARB_occlusion_query }
  GL_QUERY_COUNTER_BITS_ARB = $8864;
  {$EXTERNALSYM GL_QUERY_COUNTER_BITS_ARB}
  GL_CURRENT_QUERY_ARB = $8865;
  {$EXTERNALSYM GL_CURRENT_QUERY_ARB}
  GL_QUERY_RESULT_ARB = $8866;
  {$EXTERNALSYM GL_QUERY_RESULT_ARB}
  GL_QUERY_RESULT_AVAILABLE_ARB = $8867;
  {$EXTERNALSYM GL_QUERY_RESULT_AVAILABLE_ARB}
  GL_SAMPLES_PASSED_ARB = $8914;
  {$EXTERNALSYM GL_SAMPLES_PASSED_ARB}

{ GL_ARB_occlusion_query2 }

{ GL_ARB_pixel_buffer_object }
  GL_PIXEL_PACK_BUFFER_ARB = $88EB;
  {$EXTERNALSYM GL_PIXEL_PACK_BUFFER_ARB}
  GL_PIXEL_UNPACK_BUFFER_ARB = $88EC;
  {$EXTERNALSYM GL_PIXEL_UNPACK_BUFFER_ARB}
  GL_PIXEL_PACK_BUFFER_BINDING_ARB = $88ED;
  {$EXTERNALSYM GL_PIXEL_PACK_BUFFER_BINDING_ARB}
  GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = $88EF;
  {$EXTERNALSYM GL_PIXEL_UNPACK_BUFFER_BINDING_ARB}

{ GL_ARB_point_parameters }
  GL_POINT_SIZE_MIN_ARB = $8126;
  {$EXTERNALSYM GL_POINT_SIZE_MIN_ARB}
  GL_POINT_SIZE_MAX_ARB = $8127;
  {$EXTERNALSYM GL_POINT_SIZE_MAX_ARB}
  GL_POINT_FADE_THRESHOLD_SIZE_ARB = $8128;
  {$EXTERNALSYM GL_POINT_FADE_THRESHOLD_SIZE_ARB}
  GL_POINT_DISTANCE_ATTENUATION_ARB = $8129;
  {$EXTERNALSYM GL_POINT_DISTANCE_ATTENUATION_ARB}

{ GL_ARB_point_sprite }
  GL_POINT_SPRITE_ARB = $8861;
  {$EXTERNALSYM GL_POINT_SPRITE_ARB}
  GL_COORD_REPLACE_ARB = $8862;
  {$EXTERNALSYM GL_COORD_REPLACE_ARB}

{ GL_ARB_program_interface_query }

{ GL_ARB_provoking_vertex }

{ GL_ARB_query_buffer_object }

{ GL_ARB_robust_buffer_access_behavior }

{ GL_ARB_robustness }
  GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = $00000004;
  {$EXTERNALSYM GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB}
  GL_LOSE_CONTEXT_ON_RESET_ARB = $8252;
  {$EXTERNALSYM GL_LOSE_CONTEXT_ON_RESET_ARB}
  GL_GUILTY_CONTEXT_RESET_ARB = $8253;
  {$EXTERNALSYM GL_GUILTY_CONTEXT_RESET_ARB}
  GL_INNOCENT_CONTEXT_RESET_ARB = $8254;
  {$EXTERNALSYM GL_INNOCENT_CONTEXT_RESET_ARB}
  GL_UNKNOWN_CONTEXT_RESET_ARB = $8255;
  {$EXTERNALSYM GL_UNKNOWN_CONTEXT_RESET_ARB}
  GL_RESET_NOTIFICATION_STRATEGY_ARB = $8256;
  {$EXTERNALSYM GL_RESET_NOTIFICATION_STRATEGY_ARB}
  GL_NO_RESET_NOTIFICATION_ARB = $8261;
  {$EXTERNALSYM GL_NO_RESET_NOTIFICATION_ARB}

{ GL_ARB_robustness_isolation }

{ GL_ARB_sample_shading }
  GL_SAMPLE_SHADING_ARB = $8C36;
  {$EXTERNALSYM GL_SAMPLE_SHADING_ARB}
  GL_MIN_SAMPLE_SHADING_VALUE_ARB = $8C37;
  {$EXTERNALSYM GL_MIN_SAMPLE_SHADING_VALUE_ARB}

{ GL_ARB_sampler_objects }

{ GL_ARB_seamless_cube_map }

{ GL_ARB_seamless_cubemap_per_texture }

{ GL_ARB_separate_shader_objects }

{ GL_ARB_shader_atomic_counters }

{ GL_ARB_shader_bit_encoding }

{ GL_ARB_shader_draw_parameters }

{ GL_ARB_shader_group_vote }

{ GL_ARB_shader_image_load_store }

{ GL_ARB_shader_image_size }

{ GL_ARB_shader_objects }
  GL_PROGRAM_OBJECT_ARB = $8B40;
  {$EXTERNALSYM GL_PROGRAM_OBJECT_ARB}
  GL_SHADER_OBJECT_ARB = $8B48;
  {$EXTERNALSYM GL_SHADER_OBJECT_ARB}
  GL_OBJECT_TYPE_ARB = $8B4E;
  {$EXTERNALSYM GL_OBJECT_TYPE_ARB}
  GL_OBJECT_SUBTYPE_ARB = $8B4F;
  {$EXTERNALSYM GL_OBJECT_SUBTYPE_ARB}
  GL_FLOAT_VEC2_ARB = $8B50;
  {$EXTERNALSYM GL_FLOAT_VEC2_ARB}
  GL_FLOAT_VEC3_ARB = $8B51;
  {$EXTERNALSYM GL_FLOAT_VEC3_ARB}
  GL_FLOAT_VEC4_ARB = $8B52;
  {$EXTERNALSYM GL_FLOAT_VEC4_ARB}
  GL_INT_VEC2_ARB = $8B53;
  {$EXTERNALSYM GL_INT_VEC2_ARB}
  GL_INT_VEC3_ARB = $8B54;
  {$EXTERNALSYM GL_INT_VEC3_ARB}
  GL_INT_VEC4_ARB = $8B55;
  {$EXTERNALSYM GL_INT_VEC4_ARB}
  GL_BOOL_ARB = $8B56;
  {$EXTERNALSYM GL_BOOL_ARB}
  GL_BOOL_VEC2_ARB = $8B57;
  {$EXTERNALSYM GL_BOOL_VEC2_ARB}
  GL_BOOL_VEC3_ARB = $8B58;
  {$EXTERNALSYM GL_BOOL_VEC3_ARB}
  GL_BOOL_VEC4_ARB = $8B59;
  {$EXTERNALSYM GL_BOOL_VEC4_ARB}
  GL_FLOAT_MAT2_ARB = $8B5A;
  {$EXTERNALSYM GL_FLOAT_MAT2_ARB}
  GL_FLOAT_MAT3_ARB = $8B5B;
  {$EXTERNALSYM GL_FLOAT_MAT3_ARB}
  GL_FLOAT_MAT4_ARB = $8B5C;
  {$EXTERNALSYM GL_FLOAT_MAT4_ARB}
  GL_SAMPLER_1D_ARB = $8B5D;
  {$EXTERNALSYM GL_SAMPLER_1D_ARB}
  GL_SAMPLER_2D_ARB = $8B5E;
  {$EXTERNALSYM GL_SAMPLER_2D_ARB}
  GL_SAMPLER_3D_ARB = $8B5F;
  {$EXTERNALSYM GL_SAMPLER_3D_ARB}
  GL_SAMPLER_CUBE_ARB = $8B60;
  {$EXTERNALSYM GL_SAMPLER_CUBE_ARB}
  GL_SAMPLER_1D_SHADOW_ARB = $8B61;
  {$EXTERNALSYM GL_SAMPLER_1D_SHADOW_ARB}
  GL_SAMPLER_2D_SHADOW_ARB = $8B62;
  {$EXTERNALSYM GL_SAMPLER_2D_SHADOW_ARB}
  GL_SAMPLER_2D_RECT_ARB = $8B63;
  {$EXTERNALSYM GL_SAMPLER_2D_RECT_ARB}
  GL_SAMPLER_2D_RECT_SHADOW_ARB = $8B64;
  {$EXTERNALSYM GL_SAMPLER_2D_RECT_SHADOW_ARB}
  GL_OBJECT_DELETE_STATUS_ARB = $8B80;
  {$EXTERNALSYM GL_OBJECT_DELETE_STATUS_ARB}
  GL_OBJECT_COMPILE_STATUS_ARB = $8B81;
  {$EXTERNALSYM GL_OBJECT_COMPILE_STATUS_ARB}
  GL_OBJECT_LINK_STATUS_ARB = $8B82;
  {$EXTERNALSYM GL_OBJECT_LINK_STATUS_ARB}
  GL_OBJECT_VALIDATE_STATUS_ARB = $8B83;
  {$EXTERNALSYM GL_OBJECT_VALIDATE_STATUS_ARB}
  GL_OBJECT_INFO_LOG_LENGTH_ARB = $8B84;
  {$EXTERNALSYM GL_OBJECT_INFO_LOG_LENGTH_ARB}
  GL_OBJECT_ATTACHED_OBJECTS_ARB = $8B85;
  {$EXTERNALSYM GL_OBJECT_ATTACHED_OBJECTS_ARB}
  GL_OBJECT_ACTIVE_UNIFORMS_ARB = $8B86;
  {$EXTERNALSYM GL_OBJECT_ACTIVE_UNIFORMS_ARB}
  GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = $8B87;
  {$EXTERNALSYM GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB}
  GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = $8B88;
  {$EXTERNALSYM GL_OBJECT_SHADER_SOURCE_LENGTH_ARB}

{ GL_ARB_shader_precision }

{ GL_ARB_shader_stencil_export }

{ GL_ARB_shader_storage_buffer_object }

{ GL_ARB_shader_subroutine }

{ GL_ARB_shader_texture_lod }

{ GL_ARB_shading_language_100 }
  GL_SHADING_LANGUAGE_VERSION_ARB = $8B8C;
  {$EXTERNALSYM GL_SHADING_LANGUAGE_VERSION_ARB}

{ GL_ARB_shading_language_420pack }

{ GL_ARB_shading_language_include }
  GL_SHADER_INCLUDE_ARB = $8DAE;
  {$EXTERNALSYM GL_SHADER_INCLUDE_ARB}
  GL_NAMED_STRING_LENGTH_ARB = $8DE9;
  {$EXTERNALSYM GL_NAMED_STRING_LENGTH_ARB}
  GL_NAMED_STRING_TYPE_ARB = $8DEA;
  {$EXTERNALSYM GL_NAMED_STRING_TYPE_ARB}

{ GL_ARB_shading_language_packing }

{ GL_ARB_shadow }
  GL_TEXTURE_COMPARE_MODE_ARB = $884C;
  {$EXTERNALSYM GL_TEXTURE_COMPARE_MODE_ARB}
  GL_TEXTURE_COMPARE_FUNC_ARB = $884D;
  {$EXTERNALSYM GL_TEXTURE_COMPARE_FUNC_ARB}
  GL_COMPARE_R_TO_TEXTURE_ARB = $884E;
  {$EXTERNALSYM GL_COMPARE_R_TO_TEXTURE_ARB}

{ GL_ARB_shadow_ambient }
  GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = $80BF;
  {$EXTERNALSYM GL_TEXTURE_COMPARE_FAIL_VALUE_ARB}

{ GL_ARB_sparse_texture }
  GL_TEXTURE_SPARSE_ARB = $91A6;
  {$EXTERNALSYM GL_TEXTURE_SPARSE_ARB}
  GL_VIRTUAL_PAGE_SIZE_INDEX_ARB = $91A7;
  {$EXTERNALSYM GL_VIRTUAL_PAGE_SIZE_INDEX_ARB}
  GL_MIN_SPARSE_LEVEL_ARB = $919B;
  {$EXTERNALSYM GL_MIN_SPARSE_LEVEL_ARB}
  GL_NUM_VIRTUAL_PAGE_SIZES_ARB = $91A8;
  {$EXTERNALSYM GL_NUM_VIRTUAL_PAGE_SIZES_ARB}
  GL_VIRTUAL_PAGE_SIZE_X_ARB = $9195;
  {$EXTERNALSYM GL_VIRTUAL_PAGE_SIZE_X_ARB}
  GL_VIRTUAL_PAGE_SIZE_Y_ARB = $9196;
  {$EXTERNALSYM GL_VIRTUAL_PAGE_SIZE_Y_ARB}
  GL_VIRTUAL_PAGE_SIZE_Z_ARB = $9197;
  {$EXTERNALSYM GL_VIRTUAL_PAGE_SIZE_Z_ARB}
  GL_MAX_SPARSE_TEXTURE_SIZE_ARB = $9198;
  {$EXTERNALSYM GL_MAX_SPARSE_TEXTURE_SIZE_ARB}
  GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB = $9199;
  {$EXTERNALSYM GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB}
  GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB = $919A;
  {$EXTERNALSYM GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB}
  GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB = $91A9;
  {$EXTERNALSYM GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB}

{ GL_ARB_stencil_texturing }

{ GL_ARB_sync }

{ GL_ARB_tessellation_shader }

{ GL_ARB_texture_border_clamp }
  GL_CLAMP_TO_BORDER_ARB = $812D;
  {$EXTERNALSYM GL_CLAMP_TO_BORDER_ARB}

{ GL_ARB_texture_buffer_object }
  GL_TEXTURE_BUFFER_ARB = $8C2A;
  {$EXTERNALSYM GL_TEXTURE_BUFFER_ARB}
  GL_MAX_TEXTURE_BUFFER_SIZE_ARB = $8C2B;
  {$EXTERNALSYM GL_MAX_TEXTURE_BUFFER_SIZE_ARB}
  GL_TEXTURE_BINDING_BUFFER_ARB = $8C2C;
  {$EXTERNALSYM GL_TEXTURE_BINDING_BUFFER_ARB}
  GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB = $8C2D;
  {$EXTERNALSYM GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB}
  GL_TEXTURE_BUFFER_FORMAT_ARB = $8C2E;
  {$EXTERNALSYM GL_TEXTURE_BUFFER_FORMAT_ARB}

{ GL_ARB_texture_buffer_object_rgb32 }

{ GL_ARB_texture_buffer_range }

{ GL_ARB_texture_compression }
  GL_COMPRESSED_ALPHA_ARB = $84E9;
  {$EXTERNALSYM GL_COMPRESSED_ALPHA_ARB}
  GL_COMPRESSED_LUMINANCE_ARB = $84EA;
  {$EXTERNALSYM GL_COMPRESSED_LUMINANCE_ARB}
  GL_COMPRESSED_LUMINANCE_ALPHA_ARB = $84EB;
  {$EXTERNALSYM GL_COMPRESSED_LUMINANCE_ALPHA_ARB}
  GL_COMPRESSED_INTENSITY_ARB = $84EC;
  {$EXTERNALSYM GL_COMPRESSED_INTENSITY_ARB}
  GL_COMPRESSED_RGB_ARB = $84ED;
  {$EXTERNALSYM GL_COMPRESSED_RGB_ARB}
  GL_COMPRESSED_RGBA_ARB = $84EE;
  {$EXTERNALSYM GL_COMPRESSED_RGBA_ARB}
  GL_TEXTURE_COMPRESSION_HINT_ARB = $84EF;
  {$EXTERNALSYM GL_TEXTURE_COMPRESSION_HINT_ARB}
  GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = $86A0;
  {$EXTERNALSYM GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB}
  GL_TEXTURE_COMPRESSED_ARB = $86A1;
  {$EXTERNALSYM GL_TEXTURE_COMPRESSED_ARB}
  GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = $86A2;
  {$EXTERNALSYM GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB}
  GL_COMPRESSED_TEXTURE_FORMATS_ARB = $86A3;
  {$EXTERNALSYM GL_COMPRESSED_TEXTURE_FORMATS_ARB}

{ GL_ARB_texture_compression_bptc }
  GL_COMPRESSED_RGBA_BPTC_UNORM_ARB = $8E8C;
  {$EXTERNALSYM GL_COMPRESSED_RGBA_BPTC_UNORM_ARB}
  GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = $8E8D;
  {$EXTERNALSYM GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB}
  GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = $8E8E;
  {$EXTERNALSYM GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB}
  GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = $8E8F;
  {$EXTERNALSYM GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB}

{ GL_ARB_texture_compression_rgtc }

{ GL_ARB_texture_cube_map }
  GL_NORMAL_MAP_ARB = $8511;
  {$EXTERNALSYM GL_NORMAL_MAP_ARB}
  GL_REFLECTION_MAP_ARB = $8512;
  {$EXTERNALSYM GL_REFLECTION_MAP_ARB}
  GL_TEXTURE_CUBE_MAP_ARB = $8513;
  {$EXTERNALSYM GL_TEXTURE_CUBE_MAP_ARB}
  GL_TEXTURE_BINDING_CUBE_MAP_ARB = $8514;
  {$EXTERNALSYM GL_TEXTURE_BINDING_CUBE_MAP_ARB}
  GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = $8515;
  {$EXTERNALSYM GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB}
  GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = $8516;
  {$EXTERNALSYM GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB}
  GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = $8517;
  {$EXTERNALSYM GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB}
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = $8518;
  {$EXTERNALSYM GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB}
  GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = $8519;
  {$EXTERNALSYM GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB}
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = $851A;
  {$EXTERNALSYM GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB}
  GL_PROXY_TEXTURE_CUBE_MAP_ARB = $851B;
  {$EXTERNALSYM GL_PROXY_TEXTURE_CUBE_MAP_ARB}
  GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB = $851C;
  {$EXTERNALSYM GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB}

{ GL_ARB_texture_cube_map_array }
  GL_TEXTURE_CUBE_MAP_ARRAY_ARB = $9009;
  {$EXTERNALSYM GL_TEXTURE_CUBE_MAP_ARRAY_ARB}
  GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB = $900A;
  {$EXTERNALSYM GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB}
  GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = $900B;
  {$EXTERNALSYM GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB}
  GL_SAMPLER_CUBE_MAP_ARRAY_ARB = $900C;
  {$EXTERNALSYM GL_SAMPLER_CUBE_MAP_ARRAY_ARB}
  GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB = $900D;
  {$EXTERNALSYM GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB}
  GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = $900E;
  {$EXTERNALSYM GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB}
  GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = $900F;
  {$EXTERNALSYM GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB}

{ GL_ARB_texture_env_add }

{ GL_ARB_texture_env_combine }
  GL_COMBINE_ARB = $8570;
  {$EXTERNALSYM GL_COMBINE_ARB}
  GL_COMBINE_RGB_ARB = $8571;
  {$EXTERNALSYM GL_COMBINE_RGB_ARB}
  GL_COMBINE_ALPHA_ARB = $8572;
  {$EXTERNALSYM GL_COMBINE_ALPHA_ARB}
  GL_SOURCE0_RGB_ARB = $8580;
  {$EXTERNALSYM GL_SOURCE0_RGB_ARB}
  GL_SOURCE1_RGB_ARB = $8581;
  {$EXTERNALSYM GL_SOURCE1_RGB_ARB}
  GL_SOURCE2_RGB_ARB = $8582;
  {$EXTERNALSYM GL_SOURCE2_RGB_ARB}
  GL_SOURCE0_ALPHA_ARB = $8588;
  {$EXTERNALSYM GL_SOURCE0_ALPHA_ARB}
  GL_SOURCE1_ALPHA_ARB = $8589;
  {$EXTERNALSYM GL_SOURCE1_ALPHA_ARB}
  GL_SOURCE2_ALPHA_ARB = $858A;
  {$EXTERNALSYM GL_SOURCE2_ALPHA_ARB}
  GL_OPERAND0_RGB_ARB = $8590;
  {$EXTERNALSYM GL_OPERAND0_RGB_ARB}
  GL_OPERAND1_RGB_ARB = $8591;
  {$EXTERNALSYM GL_OPERAND1_RGB_ARB}
  GL_OPERAND2_RGB_ARB = $8592;
  {$EXTERNALSYM GL_OPERAND2_RGB_ARB}
  GL_OPERAND0_ALPHA_ARB = $8598;
  {$EXTERNALSYM GL_OPERAND0_ALPHA_ARB}
  GL_OPERAND1_ALPHA_ARB = $8599;
  {$EXTERNALSYM GL_OPERAND1_ALPHA_ARB}
  GL_OPERAND2_ALPHA_ARB = $859A;
  {$EXTERNALSYM GL_OPERAND2_ALPHA_ARB}
  GL_RGB_SCALE_ARB = $8573;
  {$EXTERNALSYM GL_RGB_SCALE_ARB}
  GL_ADD_SIGNED_ARB = $8574;
  {$EXTERNALSYM GL_ADD_SIGNED_ARB}
  GL_INTERPOLATE_ARB = $8575;
  {$EXTERNALSYM GL_INTERPOLATE_ARB}
  GL_SUBTRACT_ARB = $84E7;
  {$EXTERNALSYM GL_SUBTRACT_ARB}
  GL_CONSTANT_ARB = $8576;
  {$EXTERNALSYM GL_CONSTANT_ARB}
  GL_PRIMARY_COLOR_ARB = $8577;
  {$EXTERNALSYM GL_PRIMARY_COLOR_ARB}
  GL_PREVIOUS_ARB = $8578;
  {$EXTERNALSYM GL_PREVIOUS_ARB}

{ GL_ARB_texture_env_crossbar }

{ GL_ARB_texture_env_dot3 }
  GL_DOT3_RGB_ARB = $86AE;
  {$EXTERNALSYM GL_DOT3_RGB_ARB}
  GL_DOT3_RGBA_ARB = $86AF;
  {$EXTERNALSYM GL_DOT3_RGBA_ARB}

{ GL_ARB_texture_float }
  GL_TEXTURE_RED_TYPE_ARB = $8C10;
  {$EXTERNALSYM GL_TEXTURE_RED_TYPE_ARB}
  GL_TEXTURE_GREEN_TYPE_ARB = $8C11;
  {$EXTERNALSYM GL_TEXTURE_GREEN_TYPE_ARB}
  GL_TEXTURE_BLUE_TYPE_ARB = $8C12;
  {$EXTERNALSYM GL_TEXTURE_BLUE_TYPE_ARB}
  GL_TEXTURE_ALPHA_TYPE_ARB = $8C13;
  {$EXTERNALSYM GL_TEXTURE_ALPHA_TYPE_ARB}
  GL_TEXTURE_LUMINANCE_TYPE_ARB = $8C14;
  {$EXTERNALSYM GL_TEXTURE_LUMINANCE_TYPE_ARB}
  GL_TEXTURE_INTENSITY_TYPE_ARB = $8C15;
  {$EXTERNALSYM GL_TEXTURE_INTENSITY_TYPE_ARB}
  GL_TEXTURE_DEPTH_TYPE_ARB = $8C16;
  {$EXTERNALSYM GL_TEXTURE_DEPTH_TYPE_ARB}
  GL_UNSIGNED_NORMALIZED_ARB = $8C17;
  {$EXTERNALSYM GL_UNSIGNED_NORMALIZED_ARB}
  GL_RGBA32F_ARB = $8814;
  {$EXTERNALSYM GL_RGBA32F_ARB}
  GL_RGB32F_ARB = $8815;
  {$EXTERNALSYM GL_RGB32F_ARB}
  GL_ALPHA32F_ARB = $8816;
  {$EXTERNALSYM GL_ALPHA32F_ARB}
  GL_INTENSITY32F_ARB = $8817;
  {$EXTERNALSYM GL_INTENSITY32F_ARB}
  GL_LUMINANCE32F_ARB = $8818;
  {$EXTERNALSYM GL_LUMINANCE32F_ARB}
  GL_LUMINANCE_ALPHA32F_ARB = $8819;
  {$EXTERNALSYM GL_LUMINANCE_ALPHA32F_ARB}
  GL_RGBA16F_ARB = $881A;
  {$EXTERNALSYM GL_RGBA16F_ARB}
  GL_RGB16F_ARB = $881B;
  {$EXTERNALSYM GL_RGB16F_ARB}
  GL_ALPHA16F_ARB = $881C;
  {$EXTERNALSYM GL_ALPHA16F_ARB}
  GL_INTENSITY16F_ARB = $881D;
  {$EXTERNALSYM GL_INTENSITY16F_ARB}
  GL_LUMINANCE16F_ARB = $881E;
  {$EXTERNALSYM GL_LUMINANCE16F_ARB}
  GL_LUMINANCE_ALPHA16F_ARB = $881F;
  {$EXTERNALSYM GL_LUMINANCE_ALPHA16F_ARB}

{ GL_ARB_texture_gather }
  GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = $8E5E;
  {$EXTERNALSYM GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB}
  GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = $8E5F;
  {$EXTERNALSYM GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB}
  GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB = $8F9F;
  {$EXTERNALSYM GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB}

{ GL_ARB_texture_mirror_clamp_to_edge }

{ GL_ARB_texture_mirrored_repeat }
  GL_MIRRORED_REPEAT_ARB = $8370;
  {$EXTERNALSYM GL_MIRRORED_REPEAT_ARB}

{ GL_ARB_texture_multisample }

{ GL_ARB_texture_non_power_of_two }

{ GL_ARB_texture_query_levels }

{ GL_ARB_texture_query_lod }

{ GL_ARB_texture_rectangle }
  GL_TEXTURE_RECTANGLE_ARB = $84F5;
  {$EXTERNALSYM GL_TEXTURE_RECTANGLE_ARB}
  GL_TEXTURE_BINDING_RECTANGLE_ARB = $84F6;
  {$EXTERNALSYM GL_TEXTURE_BINDING_RECTANGLE_ARB}
  GL_PROXY_TEXTURE_RECTANGLE_ARB = $84F7;
  {$EXTERNALSYM GL_PROXY_TEXTURE_RECTANGLE_ARB}
  GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = $84F8;
  {$EXTERNALSYM GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB}

{ GL_ARB_texture_rg }

{ GL_ARB_texture_rgb10_a2ui }

{ GL_ARB_texture_stencil8 }

{ GL_ARB_texture_storage }

{ GL_ARB_texture_storage_multisample }

{ GL_ARB_texture_swizzle }

{ GL_ARB_texture_view }

{ GL_ARB_timer_query }

{ GL_ARB_transform_feedback2 }
  GL_TRANSFORM_FEEDBACK_PAUSED = $8E23;
  {$EXTERNALSYM GL_TRANSFORM_FEEDBACK_PAUSED}
  GL_TRANSFORM_FEEDBACK_ACTIVE = $8E24;
  {$EXTERNALSYM GL_TRANSFORM_FEEDBACK_ACTIVE}

{ GL_ARB_transform_feedback3 }

{ GL_ARB_transform_feedback_instanced }

{ GL_ARB_transpose_matrix }
  GL_TRANSPOSE_MODELVIEW_MATRIX_ARB = $84E3;
  {$EXTERNALSYM GL_TRANSPOSE_MODELVIEW_MATRIX_ARB}
  GL_TRANSPOSE_PROJECTION_MATRIX_ARB = $84E4;
  {$EXTERNALSYM GL_TRANSPOSE_PROJECTION_MATRIX_ARB}
  GL_TRANSPOSE_TEXTURE_MATRIX_ARB = $84E5;
  {$EXTERNALSYM GL_TRANSPOSE_TEXTURE_MATRIX_ARB}
  GL_TRANSPOSE_COLOR_MATRIX_ARB = $84E6;
  {$EXTERNALSYM GL_TRANSPOSE_COLOR_MATRIX_ARB}

{ GL_ARB_uniform_buffer_object }
  GL_MAX_GEOMETRY_UNIFORM_BLOCKS = $8A2C;
  {$EXTERNALSYM GL_MAX_GEOMETRY_UNIFORM_BLOCKS}
  GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = $8A32;
  {$EXTERNALSYM GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS}
  GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = $8A45;
  {$EXTERNALSYM GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER}

{ GL_ARB_vertex_array_bgra }

{ GL_ARB_vertex_array_object }

{ GL_ARB_vertex_attrib_64bit }

{ GL_ARB_vertex_attrib_binding }

{ GL_ARB_vertex_blend }
  GL_MAX_VERTEX_UNITS_ARB = $86A4;
  {$EXTERNALSYM GL_MAX_VERTEX_UNITS_ARB}
  GL_ACTIVE_VERTEX_UNITS_ARB = $86A5;
  {$EXTERNALSYM GL_ACTIVE_VERTEX_UNITS_ARB}
  GL_WEIGHT_SUM_UNITY_ARB = $86A6;
  {$EXTERNALSYM GL_WEIGHT_SUM_UNITY_ARB}
  GL_VERTEX_BLEND_ARB = $86A7;
  {$EXTERNALSYM GL_VERTEX_BLEND_ARB}
  GL_CURRENT_WEIGHT_ARB = $86A8;
  {$EXTERNALSYM GL_CURRENT_WEIGHT_ARB}
  GL_WEIGHT_ARRAY_TYPE_ARB = $86A9;
  {$EXTERNALSYM GL_WEIGHT_ARRAY_TYPE_ARB}
  GL_WEIGHT_ARRAY_STRIDE_ARB = $86AA;
  {$EXTERNALSYM GL_WEIGHT_ARRAY_STRIDE_ARB}
  GL_WEIGHT_ARRAY_SIZE_ARB = $86AB;
  {$EXTERNALSYM GL_WEIGHT_ARRAY_SIZE_ARB}
  GL_WEIGHT_ARRAY_POINTER_ARB = $86AC;
  {$EXTERNALSYM GL_WEIGHT_ARRAY_POINTER_ARB}
  GL_WEIGHT_ARRAY_ARB = $86AD;
  {$EXTERNALSYM GL_WEIGHT_ARRAY_ARB}
  GL_MODELVIEW0_ARB = $1700;
  {$EXTERNALSYM GL_MODELVIEW0_ARB}
  GL_MODELVIEW1_ARB = $850A;
  {$EXTERNALSYM GL_MODELVIEW1_ARB}
  GL_MODELVIEW2_ARB = $8722;
  {$EXTERNALSYM GL_MODELVIEW2_ARB}
  GL_MODELVIEW3_ARB = $8723;
  {$EXTERNALSYM GL_MODELVIEW3_ARB}
  GL_MODELVIEW4_ARB = $8724;
  {$EXTERNALSYM GL_MODELVIEW4_ARB}
  GL_MODELVIEW5_ARB = $8725;
  {$EXTERNALSYM GL_MODELVIEW5_ARB}
  GL_MODELVIEW6_ARB = $8726;
  {$EXTERNALSYM GL_MODELVIEW6_ARB}
  GL_MODELVIEW7_ARB = $8727;
  {$EXTERNALSYM GL_MODELVIEW7_ARB}
  GL_MODELVIEW8_ARB = $8728;
  {$EXTERNALSYM GL_MODELVIEW8_ARB}
  GL_MODELVIEW9_ARB = $8729;
  {$EXTERNALSYM GL_MODELVIEW9_ARB}
  GL_MODELVIEW10_ARB = $872A;
  {$EXTERNALSYM GL_MODELVIEW10_ARB}
  GL_MODELVIEW11_ARB = $872B;
  {$EXTERNALSYM GL_MODELVIEW11_ARB}
  GL_MODELVIEW12_ARB = $872C;
  {$EXTERNALSYM GL_MODELVIEW12_ARB}
  GL_MODELVIEW13_ARB = $872D;
  {$EXTERNALSYM GL_MODELVIEW13_ARB}
  GL_MODELVIEW14_ARB = $872E;
  {$EXTERNALSYM GL_MODELVIEW14_ARB}
  GL_MODELVIEW15_ARB = $872F;
  {$EXTERNALSYM GL_MODELVIEW15_ARB}
  GL_MODELVIEW16_ARB = $8730;
  {$EXTERNALSYM GL_MODELVIEW16_ARB}
  GL_MODELVIEW17_ARB = $8731;
  {$EXTERNALSYM GL_MODELVIEW17_ARB}
  GL_MODELVIEW18_ARB = $8732;
  {$EXTERNALSYM GL_MODELVIEW18_ARB}
  GL_MODELVIEW19_ARB = $8733;
  {$EXTERNALSYM GL_MODELVIEW19_ARB}
  GL_MODELVIEW20_ARB = $8734;
  {$EXTERNALSYM GL_MODELVIEW20_ARB}
  GL_MODELVIEW21_ARB = $8735;
  {$EXTERNALSYM GL_MODELVIEW21_ARB}
  GL_MODELVIEW22_ARB = $8736;
  {$EXTERNALSYM GL_MODELVIEW22_ARB}
  GL_MODELVIEW23_ARB = $8737;
  {$EXTERNALSYM GL_MODELVIEW23_ARB}
  GL_MODELVIEW24_ARB = $8738;
  {$EXTERNALSYM GL_MODELVIEW24_ARB}
  GL_MODELVIEW25_ARB = $8739;
  {$EXTERNALSYM GL_MODELVIEW25_ARB}
  GL_MODELVIEW26_ARB = $873A;
  {$EXTERNALSYM GL_MODELVIEW26_ARB}
  GL_MODELVIEW27_ARB = $873B;
  {$EXTERNALSYM GL_MODELVIEW27_ARB}
  GL_MODELVIEW28_ARB = $873C;
  {$EXTERNALSYM GL_MODELVIEW28_ARB}
  GL_MODELVIEW29_ARB = $873D;
  {$EXTERNALSYM GL_MODELVIEW29_ARB}
  GL_MODELVIEW30_ARB = $873E;
  {$EXTERNALSYM GL_MODELVIEW30_ARB}
  GL_MODELVIEW31_ARB = $873F;
  {$EXTERNALSYM GL_MODELVIEW31_ARB}
  GL_BUFFER_SIZE_ARB = $8764;
  {$EXTERNALSYM GL_BUFFER_SIZE_ARB}
  GL_BUFFER_USAGE_ARB = $8765;
  {$EXTERNALSYM GL_BUFFER_USAGE_ARB}
  GL_ARRAY_BUFFER_ARB = $8892;
  {$EXTERNALSYM GL_ARRAY_BUFFER_ARB}
  GL_ELEMENT_ARRAY_BUFFER_ARB = $8893;
  {$EXTERNALSYM GL_ELEMENT_ARRAY_BUFFER_ARB}
  GL_ARRAY_BUFFER_BINDING_ARB = $8894;
  {$EXTERNALSYM GL_ARRAY_BUFFER_BINDING_ARB}
  GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = $8895;
  {$EXTERNALSYM GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB}
  GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = $8896;
  {$EXTERNALSYM GL_VERTEX_ARRAY_BUFFER_BINDING_ARB}
  GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = $8897;
  {$EXTERNALSYM GL_NORMAL_ARRAY_BUFFER_BINDING_ARB}
  GL_COLOR_ARRAY_BUFFER_BINDING_ARB = $8898;
  {$EXTERNALSYM GL_COLOR_ARRAY_BUFFER_BINDING_ARB}
  GL_INDEX_ARRAY_BUFFER_BINDING_ARB = $8899;
  {$EXTERNALSYM GL_INDEX_ARRAY_BUFFER_BINDING_ARB}
  GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = $889A;
  {$EXTERNALSYM GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB}
  GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = $889B;
  {$EXTERNALSYM GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB}
  GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = $889C;
  {$EXTERNALSYM GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB}
  GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = $889D;
  {$EXTERNALSYM GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB}
  GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = $889E;
  {$EXTERNALSYM GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB}
  GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = $889F;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB}
  GL_READ_ONLY_ARB = $88B8;
  {$EXTERNALSYM GL_READ_ONLY_ARB}
  GL_WRITE_ONLY_ARB = $88B9;
  {$EXTERNALSYM GL_WRITE_ONLY_ARB}
  GL_READ_WRITE_ARB = $88BA;
  {$EXTERNALSYM GL_READ_WRITE_ARB}
  GL_BUFFER_ACCESS_ARB = $88BB;
  {$EXTERNALSYM GL_BUFFER_ACCESS_ARB}
  GL_BUFFER_MAPPED_ARB = $88BC;
  {$EXTERNALSYM GL_BUFFER_MAPPED_ARB}
  GL_BUFFER_MAP_POINTER_ARB = $88BD;
  {$EXTERNALSYM GL_BUFFER_MAP_POINTER_ARB}
  GL_STREAM_DRAW_ARB = $88E0;
  {$EXTERNALSYM GL_STREAM_DRAW_ARB}
  GL_STREAM_READ_ARB = $88E1;
  {$EXTERNALSYM GL_STREAM_READ_ARB}
  GL_STREAM_COPY_ARB = $88E2;
  {$EXTERNALSYM GL_STREAM_COPY_ARB}
  GL_STATIC_DRAW_ARB = $88E4;
  {$EXTERNALSYM GL_STATIC_DRAW_ARB}
  GL_STATIC_READ_ARB = $88E5;
  {$EXTERNALSYM GL_STATIC_READ_ARB}
  GL_STATIC_COPY_ARB = $88E6;
  {$EXTERNALSYM GL_STATIC_COPY_ARB}
  GL_DYNAMIC_DRAW_ARB = $88E8;
  {$EXTERNALSYM GL_DYNAMIC_DRAW_ARB}
  GL_DYNAMIC_READ_ARB = $88E9;
  {$EXTERNALSYM GL_DYNAMIC_READ_ARB}
  GL_DYNAMIC_COPY_ARB = $88EA;
  {$EXTERNALSYM GL_DYNAMIC_COPY_ARB}

{ GL_ARB_vertex_program }
  GL_COLOR_SUM_ARB = $8458;
  {$EXTERNALSYM GL_COLOR_SUM_ARB}
  GL_VERTEX_PROGRAM_ARB = $8620;
  {$EXTERNALSYM GL_VERTEX_PROGRAM_ARB}
  GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = $8622;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB}
  GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = $8623;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB}
  GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = $8624;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB}
  GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = $8625;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB}
  GL_CURRENT_VERTEX_ATTRIB_ARB = $8626;
  {$EXTERNALSYM GL_CURRENT_VERTEX_ATTRIB_ARB}
  GL_VERTEX_PROGRAM_POINT_SIZE_ARB = $8642;
  {$EXTERNALSYM GL_VERTEX_PROGRAM_POINT_SIZE_ARB}
  GL_VERTEX_PROGRAM_TWO_SIDE_ARB = $8643;
  {$EXTERNALSYM GL_VERTEX_PROGRAM_TWO_SIDE_ARB}
  GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = $8645;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB}
  GL_MAX_VERTEX_ATTRIBS_ARB = $8869;
  {$EXTERNALSYM GL_MAX_VERTEX_ATTRIBS_ARB}
  GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = $886A;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB}
  GL_PROGRAM_ADDRESS_REGISTERS_ARB = $88B0;
  {$EXTERNALSYM GL_PROGRAM_ADDRESS_REGISTERS_ARB}
  GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = $88B1;
  {$EXTERNALSYM GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB}
  GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = $88B2;
  {$EXTERNALSYM GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB}
  GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = $88B3;
  {$EXTERNALSYM GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB}

{ GL_ARB_vertex_shader }
  GL_VERTEX_SHADER_ARB = $8B31;
  {$EXTERNALSYM GL_VERTEX_SHADER_ARB}
  GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB = $8B4A;
  {$EXTERNALSYM GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB}
  GL_MAX_VARYING_FLOATS_ARB = $8B4B;
  {$EXTERNALSYM GL_MAX_VARYING_FLOATS_ARB}
  GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = $8B4C;
  {$EXTERNALSYM GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB}
  GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = $8B4D;
  {$EXTERNALSYM GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB}
  GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = $8B89;
  {$EXTERNALSYM GL_OBJECT_ACTIVE_ATTRIBUTES_ARB}
  GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = $8B8A;
  {$EXTERNALSYM GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB}

{ GL_ARB_vertex_type_10f_11f_11f_rev }

{ GL_ARB_vertex_type_2_10_10_10_rev }

{ GL_ARB_viewport_array }

{ GL_ARB_window_pos }

{ GL_KHR_debug }

{ GL_KHR_texture_compression_astc_hdr }
  GL_COMPRESSED_RGBA_ASTC_4x4_KHR = $93B0;
  {$EXTERNALSYM GL_COMPRESSED_RGBA_ASTC_4x4_KHR}
  GL_COMPRESSED_RGBA_ASTC_5x4_KHR = $93B1;
  {$EXTERNALSYM GL_COMPRESSED_RGBA_ASTC_5x4_KHR}
  GL_COMPRESSED_RGBA_ASTC_5x5_KHR = $93B2;
  {$EXTERNALSYM GL_COMPRESSED_RGBA_ASTC_5x5_KHR}
  GL_COMPRESSED_RGBA_ASTC_6x5_KHR = $93B3;
  {$EXTERNALSYM GL_COMPRESSED_RGBA_ASTC_6x5_KHR}
  GL_COMPRESSED_RGBA_ASTC_6x6_KHR = $93B4;
  {$EXTERNALSYM GL_COMPRESSED_RGBA_ASTC_6x6_KHR}
  GL_COMPRESSED_RGBA_ASTC_8x5_KHR = $93B5;
  {$EXTERNALSYM GL_COMPRESSED_RGBA_ASTC_8x5_KHR}
  GL_COMPRESSED_RGBA_ASTC_8x6_KHR = $93B6;
  {$EXTERNALSYM GL_COMPRESSED_RGBA_ASTC_8x6_KHR}
  GL_COMPRESSED_RGBA_ASTC_8x8_KHR = $93B7;
  {$EXTERNALSYM GL_COMPRESSED_RGBA_ASTC_8x8_KHR}
  GL_COMPRESSED_RGBA_ASTC_10x5_KHR = $93B8;
  {$EXTERNALSYM GL_COMPRESSED_RGBA_ASTC_10x5_KHR}
  GL_COMPRESSED_RGBA_ASTC_10x6_KHR = $93B9;
  {$EXTERNALSYM GL_COMPRESSED_RGBA_ASTC_10x6_KHR}
  GL_COMPRESSED_RGBA_ASTC_10x8_KHR = $93BA;
  {$EXTERNALSYM GL_COMPRESSED_RGBA_ASTC_10x8_KHR}
  GL_COMPRESSED_RGBA_ASTC_10x10_KHR = $93BB;
  {$EXTERNALSYM GL_COMPRESSED_RGBA_ASTC_10x10_KHR}
  GL_COMPRESSED_RGBA_ASTC_12x10_KHR = $93BC;
  {$EXTERNALSYM GL_COMPRESSED_RGBA_ASTC_12x10_KHR}
  GL_COMPRESSED_RGBA_ASTC_12x12_KHR = $93BD;
  {$EXTERNALSYM GL_COMPRESSED_RGBA_ASTC_12x12_KHR}
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = $93D0;
  {$EXTERNALSYM GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR}
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = $93D1;
  {$EXTERNALSYM GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR}
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = $93D2;
  {$EXTERNALSYM GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR}
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = $93D3;
  {$EXTERNALSYM GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR}
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = $93D4;
  {$EXTERNALSYM GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR}
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = $93D5;
  {$EXTERNALSYM GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR}
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = $93D6;
  {$EXTERNALSYM GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR}
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = $93D7;
  {$EXTERNALSYM GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR}
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = $93D8;
  {$EXTERNALSYM GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR}
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = $93D9;
  {$EXTERNALSYM GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR}
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = $93DA;
  {$EXTERNALSYM GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR}
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = $93DB;
  {$EXTERNALSYM GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR}
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = $93DC;
  {$EXTERNALSYM GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR}
  GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = $93DD;
  {$EXTERNALSYM GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR}

{ GL_KHR_texture_compression_astc_ldr }

{ GL_OES_byte_coordinates }

{ GL_OES_compressed_paletted_texture }
  GL_PALETTE4_RGB8_OES = $8B90;
  {$EXTERNALSYM GL_PALETTE4_RGB8_OES}
  GL_PALETTE4_RGBA8_OES = $8B91;
  {$EXTERNALSYM GL_PALETTE4_RGBA8_OES}
  GL_PALETTE4_R5_G6_B5_OES = $8B92;
  {$EXTERNALSYM GL_PALETTE4_R5_G6_B5_OES}
  GL_PALETTE4_RGBA4_OES = $8B93;
  {$EXTERNALSYM GL_PALETTE4_RGBA4_OES}
  GL_PALETTE4_RGB5_A1_OES = $8B94;
  {$EXTERNALSYM GL_PALETTE4_RGB5_A1_OES}
  GL_PALETTE8_RGB8_OES = $8B95;
  {$EXTERNALSYM GL_PALETTE8_RGB8_OES}
  GL_PALETTE8_RGBA8_OES = $8B96;
  {$EXTERNALSYM GL_PALETTE8_RGBA8_OES}
  GL_PALETTE8_R5_G6_B5_OES = $8B97;
  {$EXTERNALSYM GL_PALETTE8_R5_G6_B5_OES}
  GL_PALETTE8_RGBA4_OES = $8B98;
  {$EXTERNALSYM GL_PALETTE8_RGBA4_OES}
  GL_PALETTE8_RGB5_A1_OES = $8B99;
  {$EXTERNALSYM GL_PALETTE8_RGB5_A1_OES}
  GL_FIXED_OES = $140C;
  {$EXTERNALSYM GL_FIXED_OES}

{ GL_OES_query_matrix }

{ GL_OES_read_format }
  GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = $8B9A;
  {$EXTERNALSYM GL_IMPLEMENTATION_COLOR_READ_TYPE_OES}
  GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = $8B9B;
  {$EXTERNALSYM GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES}

{ GL_OES_single_precision }

{ GL_3DFX_multisample }
  GL_MULTISAMPLE_3DFX = $86B2;
  {$EXTERNALSYM GL_MULTISAMPLE_3DFX}
  GL_SAMPLE_BUFFERS_3DFX = $86B3;
  {$EXTERNALSYM GL_SAMPLE_BUFFERS_3DFX}
  GL_SAMPLES_3DFX = $86B4;
  {$EXTERNALSYM GL_SAMPLES_3DFX}
  GL_MULTISAMPLE_BIT_3DFX = $20000000;
  {$EXTERNALSYM GL_MULTISAMPLE_BIT_3DFX}

{ GL_3DFX_tbuffer }

{ GL_3DFX_texture_compression_FXT1 }
  GL_COMPRESSED_RGB_FXT1_3DFX = $86B0;
  {$EXTERNALSYM GL_COMPRESSED_RGB_FXT1_3DFX}
  GL_COMPRESSED_RGBA_FXT1_3DFX = $86B1;
  {$EXTERNALSYM GL_COMPRESSED_RGBA_FXT1_3DFX}

{ GL_AMD_blend_minmax_factor }
  GL_FACTOR_MIN_AMD = $901C;
  {$EXTERNALSYM GL_FACTOR_MIN_AMD}
  GL_FACTOR_MAX_AMD = $901D;
  {$EXTERNALSYM GL_FACTOR_MAX_AMD}

{ GL_AMD_conservative_depth }

{ GL_AMD_debug_output }
  GL_MAX_DEBUG_MESSAGE_LENGTH_AMD = $9143;
  {$EXTERNALSYM GL_MAX_DEBUG_MESSAGE_LENGTH_AMD}
  GL_MAX_DEBUG_LOGGED_MESSAGES_AMD = $9144;
  {$EXTERNALSYM GL_MAX_DEBUG_LOGGED_MESSAGES_AMD}
  GL_DEBUG_LOGGED_MESSAGES_AMD = $9145;
  {$EXTERNALSYM GL_DEBUG_LOGGED_MESSAGES_AMD}
  GL_DEBUG_SEVERITY_HIGH_AMD = $9146;
  {$EXTERNALSYM GL_DEBUG_SEVERITY_HIGH_AMD}
  GL_DEBUG_SEVERITY_MEDIUM_AMD = $9147;
  {$EXTERNALSYM GL_DEBUG_SEVERITY_MEDIUM_AMD}
  GL_DEBUG_SEVERITY_LOW_AMD = $9148;
  {$EXTERNALSYM GL_DEBUG_SEVERITY_LOW_AMD}
  GL_DEBUG_CATEGORY_API_ERROR_AMD = $9149;
  {$EXTERNALSYM GL_DEBUG_CATEGORY_API_ERROR_AMD}
  GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD = $914A;
  {$EXTERNALSYM GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD}
  GL_DEBUG_CATEGORY_DEPRECATION_AMD = $914B;
  {$EXTERNALSYM GL_DEBUG_CATEGORY_DEPRECATION_AMD}
  GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD = $914C;
  {$EXTERNALSYM GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD}
  GL_DEBUG_CATEGORY_PERFORMANCE_AMD = $914D;
  {$EXTERNALSYM GL_DEBUG_CATEGORY_PERFORMANCE_AMD}
  GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD = $914E;
  {$EXTERNALSYM GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD}
  GL_DEBUG_CATEGORY_APPLICATION_AMD = $914F;
  {$EXTERNALSYM GL_DEBUG_CATEGORY_APPLICATION_AMD}
  GL_DEBUG_CATEGORY_OTHER_AMD = $9150;
  {$EXTERNALSYM GL_DEBUG_CATEGORY_OTHER_AMD}

{ GL_AMD_depth_clamp_separate }
  GL_DEPTH_CLAMP_NEAR_AMD = $901E;
  {$EXTERNALSYM GL_DEPTH_CLAMP_NEAR_AMD}
  GL_DEPTH_CLAMP_FAR_AMD = $901F;
  {$EXTERNALSYM GL_DEPTH_CLAMP_FAR_AMD}

{ GL_AMD_draw_buffers_blend }

{ GL_AMD_interleaved_elements }
  GL_VERTEX_ELEMENT_SWIZZLE_AMD = $91A4;
  {$EXTERNALSYM GL_VERTEX_ELEMENT_SWIZZLE_AMD}
  GL_VERTEX_ID_SWIZZLE_AMD = $91A5;
  {$EXTERNALSYM GL_VERTEX_ID_SWIZZLE_AMD}

{ GL_AMD_multi_draw_indirect }

{ GL_AMD_name_gen_delete }
  GL_DATA_BUFFER_AMD = $9151;
  {$EXTERNALSYM GL_DATA_BUFFER_AMD}
  GL_PERFORMANCE_MONITOR_AMD = $9152;
  {$EXTERNALSYM GL_PERFORMANCE_MONITOR_AMD}
  GL_QUERY_OBJECT_AMD = $9153;
  {$EXTERNALSYM GL_QUERY_OBJECT_AMD}
  GL_VERTEX_ARRAY_OBJECT_AMD = $9154;
  {$EXTERNALSYM GL_VERTEX_ARRAY_OBJECT_AMD}
  GL_SAMPLER_OBJECT_AMD = $9155;
  {$EXTERNALSYM GL_SAMPLER_OBJECT_AMD}

{ GL_AMD_occlusion_query_event }
  GL_OCCLUSION_QUERY_EVENT_MASK_AMD = $874F;
  {$EXTERNALSYM GL_OCCLUSION_QUERY_EVENT_MASK_AMD}
  GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD = $00000001;
  {$EXTERNALSYM GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD}
  GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD = $00000002;
  {$EXTERNALSYM GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD}
  GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD = $00000004;
  {$EXTERNALSYM GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD}
  GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD = $00000008;
  {$EXTERNALSYM GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD}
  GL_QUERY_ALL_EVENT_BITS_AMD = $FFFFFFFF;
  {$EXTERNALSYM GL_QUERY_ALL_EVENT_BITS_AMD}

{ GL_AMD_performance_monitor }
  GL_COUNTER_TYPE_AMD = $8BC0;
  {$EXTERNALSYM GL_COUNTER_TYPE_AMD}
  GL_COUNTER_RANGE_AMD = $8BC1;
  {$EXTERNALSYM GL_COUNTER_RANGE_AMD}
  GL_UNSIGNED_INT64_AMD = $8BC2;
  {$EXTERNALSYM GL_UNSIGNED_INT64_AMD}
  GL_PERCENTAGE_AMD = $8BC3;
  {$EXTERNALSYM GL_PERCENTAGE_AMD}
  GL_PERFMON_RESULT_AVAILABLE_AMD = $8BC4;
  {$EXTERNALSYM GL_PERFMON_RESULT_AVAILABLE_AMD}
  GL_PERFMON_RESULT_SIZE_AMD = $8BC5;
  {$EXTERNALSYM GL_PERFMON_RESULT_SIZE_AMD}
  GL_PERFMON_RESULT_AMD = $8BC6;
  {$EXTERNALSYM GL_PERFMON_RESULT_AMD}

{ GL_AMD_pinned_memory }
  GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD = $9160;
  {$EXTERNALSYM GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD}

{ GL_AMD_query_buffer_object }
  GL_QUERY_BUFFER_AMD = $9192;
  {$EXTERNALSYM GL_QUERY_BUFFER_AMD}
  GL_QUERY_BUFFER_BINDING_AMD = $9193;
  {$EXTERNALSYM GL_QUERY_BUFFER_BINDING_AMD}
  GL_QUERY_RESULT_NO_WAIT_AMD = $9194;
  {$EXTERNALSYM GL_QUERY_RESULT_NO_WAIT_AMD}

{ GL_AMD_sample_positions }
  GL_SUBSAMPLE_DISTANCE_AMD = $883F;
  {$EXTERNALSYM GL_SUBSAMPLE_DISTANCE_AMD}

{ GL_AMD_seamless_cubemap_per_texture }

{ GL_AMD_shader_atomic_counter_ops }

{ GL_AMD_shader_stencil_export }

{ GL_AMD_shader_trinary_minmax }

{ GL_AMD_sparse_texture }
  GL_VIRTUAL_PAGE_SIZE_X_AMD = $9195;
  {$EXTERNALSYM GL_VIRTUAL_PAGE_SIZE_X_AMD}
  GL_VIRTUAL_PAGE_SIZE_Y_AMD = $9196;
  {$EXTERNALSYM GL_VIRTUAL_PAGE_SIZE_Y_AMD}
  GL_VIRTUAL_PAGE_SIZE_Z_AMD = $9197;
  {$EXTERNALSYM GL_VIRTUAL_PAGE_SIZE_Z_AMD}
  GL_MAX_SPARSE_TEXTURE_SIZE_AMD = $9198;
  {$EXTERNALSYM GL_MAX_SPARSE_TEXTURE_SIZE_AMD}
  GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD = $9199;
  {$EXTERNALSYM GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD}
  GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS = $919A;
  {$EXTERNALSYM GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS}
  GL_MIN_SPARSE_LEVEL_AMD = $919B;
  {$EXTERNALSYM GL_MIN_SPARSE_LEVEL_AMD}
  GL_MIN_LOD_WARNING_AMD = $919C;
  {$EXTERNALSYM GL_MIN_LOD_WARNING_AMD}
  GL_TEXTURE_STORAGE_SPARSE_BIT_AMD = $00000001;
  {$EXTERNALSYM GL_TEXTURE_STORAGE_SPARSE_BIT_AMD}

{ GL_AMD_stencil_operation_extended }
  GL_SET_AMD = $874A;
  {$EXTERNALSYM GL_SET_AMD}
  GL_REPLACE_VALUE_AMD = $874B;
  {$EXTERNALSYM GL_REPLACE_VALUE_AMD}
  GL_STENCIL_OP_VALUE_AMD = $874C;
  {$EXTERNALSYM GL_STENCIL_OP_VALUE_AMD}
  GL_STENCIL_BACK_OP_VALUE_AMD = $874D;
  {$EXTERNALSYM GL_STENCIL_BACK_OP_VALUE_AMD}

{ GL_AMD_texture_texture4 }

{ GL_AMD_transform_feedback3_lines_triangles }

{ GL_AMD_vertex_shader_layer }

{ GL_AMD_vertex_shader_tessellator }
  GL_SAMPLER_BUFFER_AMD = $9001;
  {$EXTERNALSYM GL_SAMPLER_BUFFER_AMD}
  GL_INT_SAMPLER_BUFFER_AMD = $9002;
  {$EXTERNALSYM GL_INT_SAMPLER_BUFFER_AMD}
  GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD = $9003;
  {$EXTERNALSYM GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD}
  GL_TESSELLATION_MODE_AMD = $9004;
  {$EXTERNALSYM GL_TESSELLATION_MODE_AMD}
  GL_TESSELLATION_FACTOR_AMD = $9005;
  {$EXTERNALSYM GL_TESSELLATION_FACTOR_AMD}
  GL_DISCRETE_AMD = $9006;
  {$EXTERNALSYM GL_DISCRETE_AMD}
  GL_CONTINUOUS_AMD = $9007;
  {$EXTERNALSYM GL_CONTINUOUS_AMD}

{ GL_AMD_vertex_shader_viewport_index }

{ GL_APPLE_aux_depth_stencil }
  GL_AUX_DEPTH_STENCIL_APPLE = $8A14;
  {$EXTERNALSYM GL_AUX_DEPTH_STENCIL_APPLE}

{ GL_APPLE_client_storage }
  GL_UNPACK_CLIENT_STORAGE_APPLE = $85B2;
  {$EXTERNALSYM GL_UNPACK_CLIENT_STORAGE_APPLE}

{ GL_APPLE_element_array }
  GL_ELEMENT_ARRAY_APPLE = $8A0C;
  {$EXTERNALSYM GL_ELEMENT_ARRAY_APPLE}
  GL_ELEMENT_ARRAY_TYPE_APPLE = $8A0D;
  {$EXTERNALSYM GL_ELEMENT_ARRAY_TYPE_APPLE}
  GL_ELEMENT_ARRAY_POINTER_APPLE = $8A0E;
  {$EXTERNALSYM GL_ELEMENT_ARRAY_POINTER_APPLE}

{ GL_APPLE_fence }
  GL_DRAW_PIXELS_APPLE = $8A0A;
  {$EXTERNALSYM GL_DRAW_PIXELS_APPLE}
  GL_FENCE_APPLE = $8A0B;
  {$EXTERNALSYM GL_FENCE_APPLE}

{ GL_APPLE_float_pixels }
  GL_HALF_APPLE = $140B;
  {$EXTERNALSYM GL_HALF_APPLE}
  GL_RGBA_FLOAT32_APPLE = $8814;
  {$EXTERNALSYM GL_RGBA_FLOAT32_APPLE}
  GL_RGB_FLOAT32_APPLE = $8815;
  {$EXTERNALSYM GL_RGB_FLOAT32_APPLE}
  GL_ALPHA_FLOAT32_APPLE = $8816;
  {$EXTERNALSYM GL_ALPHA_FLOAT32_APPLE}
  GL_INTENSITY_FLOAT32_APPLE = $8817;
  {$EXTERNALSYM GL_INTENSITY_FLOAT32_APPLE}
  GL_LUMINANCE_FLOAT32_APPLE = $8818;
  {$EXTERNALSYM GL_LUMINANCE_FLOAT32_APPLE}
  GL_LUMINANCE_ALPHA_FLOAT32_APPLE = $8819;
  {$EXTERNALSYM GL_LUMINANCE_ALPHA_FLOAT32_APPLE}
  GL_RGBA_FLOAT16_APPLE = $881A;
  {$EXTERNALSYM GL_RGBA_FLOAT16_APPLE}
  GL_RGB_FLOAT16_APPLE = $881B;
  {$EXTERNALSYM GL_RGB_FLOAT16_APPLE}
  GL_ALPHA_FLOAT16_APPLE = $881C;
  {$EXTERNALSYM GL_ALPHA_FLOAT16_APPLE}
  GL_INTENSITY_FLOAT16_APPLE = $881D;
  {$EXTERNALSYM GL_INTENSITY_FLOAT16_APPLE}
  GL_LUMINANCE_FLOAT16_APPLE = $881E;
  {$EXTERNALSYM GL_LUMINANCE_FLOAT16_APPLE}
  GL_LUMINANCE_ALPHA_FLOAT16_APPLE = $881F;
  {$EXTERNALSYM GL_LUMINANCE_ALPHA_FLOAT16_APPLE}
  GL_COLOR_FLOAT_APPLE = $8A0F;
  {$EXTERNALSYM GL_COLOR_FLOAT_APPLE}

{ GL_APPLE_flush_buffer_range }
  GL_BUFFER_SERIALIZED_MODIFY_APPLE = $8A12;
  {$EXTERNALSYM GL_BUFFER_SERIALIZED_MODIFY_APPLE}
  GL_BUFFER_FLUSHING_UNMAP_APPLE = $8A13;
  {$EXTERNALSYM GL_BUFFER_FLUSHING_UNMAP_APPLE}

{ GL_APPLE_object_purgeable }
  GL_BUFFER_OBJECT_APPLE = $85B3;
  {$EXTERNALSYM GL_BUFFER_OBJECT_APPLE}
  GL_RELEASED_APPLE = $8A19;
  {$EXTERNALSYM GL_RELEASED_APPLE}
  GL_VOLATILE_APPLE = $8A1A;
  {$EXTERNALSYM GL_VOLATILE_APPLE}
  GL_RETAINED_APPLE = $8A1B;
  {$EXTERNALSYM GL_RETAINED_APPLE}
  GL_UNDEFINED_APPLE = $8A1C;
  {$EXTERNALSYM GL_UNDEFINED_APPLE}
  GL_PURGEABLE_APPLE = $8A1D;
  {$EXTERNALSYM GL_PURGEABLE_APPLE}

{ GL_APPLE_rgb_422 }
  GL_RGB_422_APPLE = $8A1F;
  {$EXTERNALSYM GL_RGB_422_APPLE}
  GL_UNSIGNED_SHORT_8_8_APPLE = $85BA;
  {$EXTERNALSYM GL_UNSIGNED_SHORT_8_8_APPLE}
  GL_UNSIGNED_SHORT_8_8_REV_APPLE = $85BB;
  {$EXTERNALSYM GL_UNSIGNED_SHORT_8_8_REV_APPLE}
  GL_RGB_RAW_422_APPLE = $8A51;
  {$EXTERNALSYM GL_RGB_RAW_422_APPLE}

{ GL_APPLE_row_bytes }
  GL_PACK_ROW_BYTES_APPLE = $8A15;
  {$EXTERNALSYM GL_PACK_ROW_BYTES_APPLE}
  GL_UNPACK_ROW_BYTES_APPLE = $8A16;
  {$EXTERNALSYM GL_UNPACK_ROW_BYTES_APPLE}

{ GL_APPLE_specular_vector }
  GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = $85B0;
  {$EXTERNALSYM GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE}

{ GL_APPLE_texture_range }
  GL_TEXTURE_RANGE_LENGTH_APPLE = $85B7;
  {$EXTERNALSYM GL_TEXTURE_RANGE_LENGTH_APPLE}
  GL_TEXTURE_RANGE_POINTER_APPLE = $85B8;
  {$EXTERNALSYM GL_TEXTURE_RANGE_POINTER_APPLE}
  GL_TEXTURE_STORAGE_HINT_APPLE = $85BC;
  {$EXTERNALSYM GL_TEXTURE_STORAGE_HINT_APPLE}
  GL_STORAGE_PRIVATE_APPLE = $85BD;
  {$EXTERNALSYM GL_STORAGE_PRIVATE_APPLE}
  GL_STORAGE_CACHED_APPLE = $85BE;
  {$EXTERNALSYM GL_STORAGE_CACHED_APPLE}
  GL_STORAGE_SHARED_APPLE = $85BF;
  {$EXTERNALSYM GL_STORAGE_SHARED_APPLE}

{ GL_APPLE_transform_hint }
  GL_TRANSFORM_HINT_APPLE = $85B1;
  {$EXTERNALSYM GL_TRANSFORM_HINT_APPLE}

{ GL_APPLE_vertex_array_object }
  GL_VERTEX_ARRAY_BINDING_APPLE = $85B5;
  {$EXTERNALSYM GL_VERTEX_ARRAY_BINDING_APPLE}

{ GL_APPLE_vertex_array_range }
  GL_VERTEX_ARRAY_RANGE_APPLE = $851D;
  {$EXTERNALSYM GL_VERTEX_ARRAY_RANGE_APPLE}
  GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = $851E;
  {$EXTERNALSYM GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE}
  GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = $851F;
  {$EXTERNALSYM GL_VERTEX_ARRAY_STORAGE_HINT_APPLE}
  GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = $8521;
  {$EXTERNALSYM GL_VERTEX_ARRAY_RANGE_POINTER_APPLE}
  GL_STORAGE_CLIENT_APPLE = $85B4;
  {$EXTERNALSYM GL_STORAGE_CLIENT_APPLE}

{ GL_APPLE_vertex_program_evaluators }
  GL_VERTEX_ATTRIB_MAP1_APPLE = $8A00;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_MAP1_APPLE}
  GL_VERTEX_ATTRIB_MAP2_APPLE = $8A01;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_MAP2_APPLE}
  GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE = $8A02;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE}
  GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE = $8A03;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE}
  GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE = $8A04;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE}
  GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = $8A05;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE}
  GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE = $8A06;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE}
  GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE = $8A07;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE}
  GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE = $8A08;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE}
  GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = $8A09;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE}

{ GL_APPLE_ycbcr_422 }
  GL_YCBCR_422_APPLE = $85B9;
  {$EXTERNALSYM GL_YCBCR_422_APPLE}

{ GL_ATI_draw_buffers }
  GL_MAX_DRAW_BUFFERS_ATI = $8824;
  {$EXTERNALSYM GL_MAX_DRAW_BUFFERS_ATI}
  GL_DRAW_BUFFER0_ATI = $8825;
  {$EXTERNALSYM GL_DRAW_BUFFER0_ATI}
  GL_DRAW_BUFFER1_ATI = $8826;
  {$EXTERNALSYM GL_DRAW_BUFFER1_ATI}
  GL_DRAW_BUFFER2_ATI = $8827;
  {$EXTERNALSYM GL_DRAW_BUFFER2_ATI}
  GL_DRAW_BUFFER3_ATI = $8828;
  {$EXTERNALSYM GL_DRAW_BUFFER3_ATI}
  GL_DRAW_BUFFER4_ATI = $8829;
  {$EXTERNALSYM GL_DRAW_BUFFER4_ATI}
  GL_DRAW_BUFFER5_ATI = $882A;
  {$EXTERNALSYM GL_DRAW_BUFFER5_ATI}
  GL_DRAW_BUFFER6_ATI = $882B;
  {$EXTERNALSYM GL_DRAW_BUFFER6_ATI}
  GL_DRAW_BUFFER7_ATI = $882C;
  {$EXTERNALSYM GL_DRAW_BUFFER7_ATI}
  GL_DRAW_BUFFER8_ATI = $882D;
  {$EXTERNALSYM GL_DRAW_BUFFER8_ATI}
  GL_DRAW_BUFFER9_ATI = $882E;
  {$EXTERNALSYM GL_DRAW_BUFFER9_ATI}
  GL_DRAW_BUFFER10_ATI = $882F;
  {$EXTERNALSYM GL_DRAW_BUFFER10_ATI}
  GL_DRAW_BUFFER11_ATI = $8830;
  {$EXTERNALSYM GL_DRAW_BUFFER11_ATI}
  GL_DRAW_BUFFER12_ATI = $8831;
  {$EXTERNALSYM GL_DRAW_BUFFER12_ATI}
  GL_DRAW_BUFFER13_ATI = $8832;
  {$EXTERNALSYM GL_DRAW_BUFFER13_ATI}
  GL_DRAW_BUFFER14_ATI = $8833;
  {$EXTERNALSYM GL_DRAW_BUFFER14_ATI}
  GL_DRAW_BUFFER15_ATI = $8834;
  {$EXTERNALSYM GL_DRAW_BUFFER15_ATI}

{ GL_ATI_element_array }
  GL_ELEMENT_ARRAY_ATI = $8768;
  {$EXTERNALSYM GL_ELEMENT_ARRAY_ATI}
  GL_ELEMENT_ARRAY_TYPE_ATI = $8769;
  {$EXTERNALSYM GL_ELEMENT_ARRAY_TYPE_ATI}
  GL_ELEMENT_ARRAY_POINTER_ATI = $876A;
  {$EXTERNALSYM GL_ELEMENT_ARRAY_POINTER_ATI}

{ GL_ATI_envmap_bumpmap }
  GL_BUMP_ROT_MATRIX_ATI = $8775;
  {$EXTERNALSYM GL_BUMP_ROT_MATRIX_ATI}
  GL_BUMP_ROT_MATRIX_SIZE_ATI = $8776;
  {$EXTERNALSYM GL_BUMP_ROT_MATRIX_SIZE_ATI}
  GL_BUMP_NUM_TEX_UNITS_ATI = $8777;
  {$EXTERNALSYM GL_BUMP_NUM_TEX_UNITS_ATI}
  GL_BUMP_TEX_UNITS_ATI = $8778;
  {$EXTERNALSYM GL_BUMP_TEX_UNITS_ATI}
  GL_DUDV_ATI = $8779;
  {$EXTERNALSYM GL_DUDV_ATI}
  GL_DU8DV8_ATI = $877A;
  {$EXTERNALSYM GL_DU8DV8_ATI}
  GL_BUMP_ENVMAP_ATI = $877B;
  {$EXTERNALSYM GL_BUMP_ENVMAP_ATI}
  GL_BUMP_TARGET_ATI = $877C;
  {$EXTERNALSYM GL_BUMP_TARGET_ATI}

{ GL_ATI_fragment_shader }
  GL_FRAGMENT_SHADER_ATI = $8920;
  {$EXTERNALSYM GL_FRAGMENT_SHADER_ATI}
  GL_REG_0_ATI = $8921;
  {$EXTERNALSYM GL_REG_0_ATI}
  GL_REG_1_ATI = $8922;
  {$EXTERNALSYM GL_REG_1_ATI}
  GL_REG_2_ATI = $8923;
  {$EXTERNALSYM GL_REG_2_ATI}
  GL_REG_3_ATI = $8924;
  {$EXTERNALSYM GL_REG_3_ATI}
  GL_REG_4_ATI = $8925;
  {$EXTERNALSYM GL_REG_4_ATI}
  GL_REG_5_ATI = $8926;
  {$EXTERNALSYM GL_REG_5_ATI}
  GL_REG_6_ATI = $8927;
  {$EXTERNALSYM GL_REG_6_ATI}
  GL_REG_7_ATI = $8928;
  {$EXTERNALSYM GL_REG_7_ATI}
  GL_REG_8_ATI = $8929;
  {$EXTERNALSYM GL_REG_8_ATI}
  GL_REG_9_ATI = $892A;
  {$EXTERNALSYM GL_REG_9_ATI}
  GL_REG_10_ATI = $892B;
  {$EXTERNALSYM GL_REG_10_ATI}
  GL_REG_11_ATI = $892C;
  {$EXTERNALSYM GL_REG_11_ATI}
  GL_REG_12_ATI = $892D;
  {$EXTERNALSYM GL_REG_12_ATI}
  GL_REG_13_ATI = $892E;
  {$EXTERNALSYM GL_REG_13_ATI}
  GL_REG_14_ATI = $892F;
  {$EXTERNALSYM GL_REG_14_ATI}
  GL_REG_15_ATI = $8930;
  {$EXTERNALSYM GL_REG_15_ATI}
  GL_REG_16_ATI = $8931;
  {$EXTERNALSYM GL_REG_16_ATI}
  GL_REG_17_ATI = $8932;
  {$EXTERNALSYM GL_REG_17_ATI}
  GL_REG_18_ATI = $8933;
  {$EXTERNALSYM GL_REG_18_ATI}
  GL_REG_19_ATI = $8934;
  {$EXTERNALSYM GL_REG_19_ATI}
  GL_REG_20_ATI = $8935;
  {$EXTERNALSYM GL_REG_20_ATI}
  GL_REG_21_ATI = $8936;
  {$EXTERNALSYM GL_REG_21_ATI}
  GL_REG_22_ATI = $8937;
  {$EXTERNALSYM GL_REG_22_ATI}
  GL_REG_23_ATI = $8938;
  {$EXTERNALSYM GL_REG_23_ATI}
  GL_REG_24_ATI = $8939;
  {$EXTERNALSYM GL_REG_24_ATI}
  GL_REG_25_ATI = $893A;
  {$EXTERNALSYM GL_REG_25_ATI}
  GL_REG_26_ATI = $893B;
  {$EXTERNALSYM GL_REG_26_ATI}
  GL_REG_27_ATI = $893C;
  {$EXTERNALSYM GL_REG_27_ATI}
  GL_REG_28_ATI = $893D;
  {$EXTERNALSYM GL_REG_28_ATI}
  GL_REG_29_ATI = $893E;
  {$EXTERNALSYM GL_REG_29_ATI}
  GL_REG_30_ATI = $893F;
  {$EXTERNALSYM GL_REG_30_ATI}
  GL_REG_31_ATI = $8940;
  {$EXTERNALSYM GL_REG_31_ATI}
  GL_CON_0_ATI = $8941;
  {$EXTERNALSYM GL_CON_0_ATI}
  GL_CON_1_ATI = $8942;
  {$EXTERNALSYM GL_CON_1_ATI}
  GL_CON_2_ATI = $8943;
  {$EXTERNALSYM GL_CON_2_ATI}
  GL_CON_3_ATI = $8944;
  {$EXTERNALSYM GL_CON_3_ATI}
  GL_CON_4_ATI = $8945;
  {$EXTERNALSYM GL_CON_4_ATI}
  GL_CON_5_ATI = $8946;
  {$EXTERNALSYM GL_CON_5_ATI}
  GL_CON_6_ATI = $8947;
  {$EXTERNALSYM GL_CON_6_ATI}
  GL_CON_7_ATI = $8948;
  {$EXTERNALSYM GL_CON_7_ATI}
  GL_CON_8_ATI = $8949;
  {$EXTERNALSYM GL_CON_8_ATI}
  GL_CON_9_ATI = $894A;
  {$EXTERNALSYM GL_CON_9_ATI}
  GL_CON_10_ATI = $894B;
  {$EXTERNALSYM GL_CON_10_ATI}
  GL_CON_11_ATI = $894C;
  {$EXTERNALSYM GL_CON_11_ATI}
  GL_CON_12_ATI = $894D;
  {$EXTERNALSYM GL_CON_12_ATI}
  GL_CON_13_ATI = $894E;
  {$EXTERNALSYM GL_CON_13_ATI}
  GL_CON_14_ATI = $894F;
  {$EXTERNALSYM GL_CON_14_ATI}
  GL_CON_15_ATI = $8950;
  {$EXTERNALSYM GL_CON_15_ATI}
  GL_CON_16_ATI = $8951;
  {$EXTERNALSYM GL_CON_16_ATI}
  GL_CON_17_ATI = $8952;
  {$EXTERNALSYM GL_CON_17_ATI}
  GL_CON_18_ATI = $8953;
  {$EXTERNALSYM GL_CON_18_ATI}
  GL_CON_19_ATI = $8954;
  {$EXTERNALSYM GL_CON_19_ATI}
  GL_CON_20_ATI = $8955;
  {$EXTERNALSYM GL_CON_20_ATI}
  GL_CON_21_ATI = $8956;
  {$EXTERNALSYM GL_CON_21_ATI}
  GL_CON_22_ATI = $8957;
  {$EXTERNALSYM GL_CON_22_ATI}
  GL_CON_23_ATI = $8958;
  {$EXTERNALSYM GL_CON_23_ATI}
  GL_CON_24_ATI = $8959;
  {$EXTERNALSYM GL_CON_24_ATI}
  GL_CON_25_ATI = $895A;
  {$EXTERNALSYM GL_CON_25_ATI}
  GL_CON_26_ATI = $895B;
  {$EXTERNALSYM GL_CON_26_ATI}
  GL_CON_27_ATI = $895C;
  {$EXTERNALSYM GL_CON_27_ATI}
  GL_CON_28_ATI = $895D;
  {$EXTERNALSYM GL_CON_28_ATI}
  GL_CON_29_ATI = $895E;
  {$EXTERNALSYM GL_CON_29_ATI}
  GL_CON_30_ATI = $895F;
  {$EXTERNALSYM GL_CON_30_ATI}
  GL_CON_31_ATI = $8960;
  {$EXTERNALSYM GL_CON_31_ATI}
  GL_MOV_ATI = $8961;
  {$EXTERNALSYM GL_MOV_ATI}
  GL_ADD_ATI = $8963;
  {$EXTERNALSYM GL_ADD_ATI}
  GL_MUL_ATI = $8964;
  {$EXTERNALSYM GL_MUL_ATI}
  GL_SUB_ATI = $8965;
  {$EXTERNALSYM GL_SUB_ATI}
  GL_DOT3_ATI = $8966;
  {$EXTERNALSYM GL_DOT3_ATI}
  GL_DOT4_ATI = $8967;
  {$EXTERNALSYM GL_DOT4_ATI}
  GL_MAD_ATI = $8968;
  {$EXTERNALSYM GL_MAD_ATI}
  GL_LERP_ATI = $8969;
  {$EXTERNALSYM GL_LERP_ATI}
  GL_CND_ATI = $896A;
  {$EXTERNALSYM GL_CND_ATI}
  GL_CND0_ATI = $896B;
  {$EXTERNALSYM GL_CND0_ATI}
  GL_DOT2_ADD_ATI = $896C;
  {$EXTERNALSYM GL_DOT2_ADD_ATI}
  GL_SECONDARY_INTERPOLATOR_ATI = $896D;
  {$EXTERNALSYM GL_SECONDARY_INTERPOLATOR_ATI}
  GL_NUM_FRAGMENT_REGISTERS_ATI = $896E;
  {$EXTERNALSYM GL_NUM_FRAGMENT_REGISTERS_ATI}
  GL_NUM_FRAGMENT_CONSTANTS_ATI = $896F;
  {$EXTERNALSYM GL_NUM_FRAGMENT_CONSTANTS_ATI}
  GL_NUM_PASSES_ATI = $8970;
  {$EXTERNALSYM GL_NUM_PASSES_ATI}
  GL_NUM_INSTRUCTIONS_PER_PASS_ATI = $8971;
  {$EXTERNALSYM GL_NUM_INSTRUCTIONS_PER_PASS_ATI}
  GL_NUM_INSTRUCTIONS_TOTAL_ATI = $8972;
  {$EXTERNALSYM GL_NUM_INSTRUCTIONS_TOTAL_ATI}
  GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = $8973;
  {$EXTERNALSYM GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI}
  GL_NUM_LOOPBACK_COMPONENTS_ATI = $8974;
  {$EXTERNALSYM GL_NUM_LOOPBACK_COMPONENTS_ATI}
  GL_COLOR_ALPHA_PAIRING_ATI = $8975;
  {$EXTERNALSYM GL_COLOR_ALPHA_PAIRING_ATI}
  GL_SWIZZLE_STR_ATI = $8976;
  {$EXTERNALSYM GL_SWIZZLE_STR_ATI}
  GL_SWIZZLE_STQ_ATI = $8977;
  {$EXTERNALSYM GL_SWIZZLE_STQ_ATI}
  GL_SWIZZLE_STR_DR_ATI = $8978;
  {$EXTERNALSYM GL_SWIZZLE_STR_DR_ATI}
  GL_SWIZZLE_STQ_DQ_ATI = $8979;
  {$EXTERNALSYM GL_SWIZZLE_STQ_DQ_ATI}
  GL_SWIZZLE_STRQ_ATI = $897A;
  {$EXTERNALSYM GL_SWIZZLE_STRQ_ATI}
  GL_SWIZZLE_STRQ_DQ_ATI = $897B;
  {$EXTERNALSYM GL_SWIZZLE_STRQ_DQ_ATI}
  GL_RED_BIT_ATI = $00000001;
  {$EXTERNALSYM GL_RED_BIT_ATI}
  GL_GREEN_BIT_ATI = $00000002;
  {$EXTERNALSYM GL_GREEN_BIT_ATI}
  GL_BLUE_BIT_ATI = $00000004;
  {$EXTERNALSYM GL_BLUE_BIT_ATI}
  GL_2X_BIT_ATI = $00000001;
  {$EXTERNALSYM GL_2X_BIT_ATI}
  GL_4X_BIT_ATI = $00000002;
  {$EXTERNALSYM GL_4X_BIT_ATI}
  GL_8X_BIT_ATI = $00000004;
  {$EXTERNALSYM GL_8X_BIT_ATI}
  GL_HALF_BIT_ATI = $00000008;
  {$EXTERNALSYM GL_HALF_BIT_ATI}
  GL_QUARTER_BIT_ATI = $00000010;
  {$EXTERNALSYM GL_QUARTER_BIT_ATI}
  GL_EIGHTH_BIT_ATI = $00000020;
  {$EXTERNALSYM GL_EIGHTH_BIT_ATI}
  GL_SATURATE_BIT_ATI = $00000040;
  {$EXTERNALSYM GL_SATURATE_BIT_ATI}
  GL_COMP_BIT_ATI = $00000002;
  {$EXTERNALSYM GL_COMP_BIT_ATI}
  GL_NEGATE_BIT_ATI = $00000004;
  {$EXTERNALSYM GL_NEGATE_BIT_ATI}
  GL_BIAS_BIT_ATI = $00000008;
  {$EXTERNALSYM GL_BIAS_BIT_ATI}

{ GL_ATI_map_object_buffer }

{ GL_ATI_meminfo }
  GL_VBO_FREE_MEMORY_ATI = $87FB;
  {$EXTERNALSYM GL_VBO_FREE_MEMORY_ATI}
  GL_TEXTURE_FREE_MEMORY_ATI = $87FC;
  {$EXTERNALSYM GL_TEXTURE_FREE_MEMORY_ATI}
  GL_RENDERBUFFER_FREE_MEMORY_ATI = $87FD;
  {$EXTERNALSYM GL_RENDERBUFFER_FREE_MEMORY_ATI}

{ GL_ATI_pixel_format_float }
  GL_RGBA_FLOAT_MODE_ATI = $8820;
  {$EXTERNALSYM GL_RGBA_FLOAT_MODE_ATI}
  GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI = $8835;
  {$EXTERNALSYM GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI}

{ GL_ATI_pn_triangles }
  GL_PN_TRIANGLES_ATI = $87F0;
  {$EXTERNALSYM GL_PN_TRIANGLES_ATI}
  GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = $87F1;
  {$EXTERNALSYM GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI}
  GL_PN_TRIANGLES_POINT_MODE_ATI = $87F2;
  {$EXTERNALSYM GL_PN_TRIANGLES_POINT_MODE_ATI}
  GL_PN_TRIANGLES_NORMAL_MODE_ATI = $87F3;
  {$EXTERNALSYM GL_PN_TRIANGLES_NORMAL_MODE_ATI}
  GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = $87F4;
  {$EXTERNALSYM GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI}
  GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = $87F5;
  {$EXTERNALSYM GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI}
  GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI = $87F6;
  {$EXTERNALSYM GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI}
  GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = $87F7;
  {$EXTERNALSYM GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI}
  GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = $87F8;
  {$EXTERNALSYM GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI}

{ GL_ATI_separate_stencil }
  GL_STENCIL_BACK_FUNC_ATI = $8800;
  {$EXTERNALSYM GL_STENCIL_BACK_FUNC_ATI}
  GL_STENCIL_BACK_FAIL_ATI = $8801;
  {$EXTERNALSYM GL_STENCIL_BACK_FAIL_ATI}
  GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI = $8802;
  {$EXTERNALSYM GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI}
  GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI = $8803;
  {$EXTERNALSYM GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI}

{ GL_ATI_text_fragment_shader }
  GL_TEXT_FRAGMENT_SHADER_ATI = $8200;
  {$EXTERNALSYM GL_TEXT_FRAGMENT_SHADER_ATI}

{ GL_ATI_texture_env_combine3 }
  GL_MODULATE_ADD_ATI = $8744;
  {$EXTERNALSYM GL_MODULATE_ADD_ATI}
  GL_MODULATE_SIGNED_ADD_ATI = $8745;
  {$EXTERNALSYM GL_MODULATE_SIGNED_ADD_ATI}
  GL_MODULATE_SUBTRACT_ATI = $8746;
  {$EXTERNALSYM GL_MODULATE_SUBTRACT_ATI}

{ GL_ATI_texture_float }
  GL_RGBA_FLOAT32_ATI = $8814;
  {$EXTERNALSYM GL_RGBA_FLOAT32_ATI}
  GL_RGB_FLOAT32_ATI = $8815;
  {$EXTERNALSYM GL_RGB_FLOAT32_ATI}
  GL_ALPHA_FLOAT32_ATI = $8816;
  {$EXTERNALSYM GL_ALPHA_FLOAT32_ATI}
  GL_INTENSITY_FLOAT32_ATI = $8817;
  {$EXTERNALSYM GL_INTENSITY_FLOAT32_ATI}
  GL_LUMINANCE_FLOAT32_ATI = $8818;
  {$EXTERNALSYM GL_LUMINANCE_FLOAT32_ATI}
  GL_LUMINANCE_ALPHA_FLOAT32_ATI = $8819;
  {$EXTERNALSYM GL_LUMINANCE_ALPHA_FLOAT32_ATI}
  GL_RGBA_FLOAT16_ATI = $881A;
  {$EXTERNALSYM GL_RGBA_FLOAT16_ATI}
  GL_RGB_FLOAT16_ATI = $881B;
  {$EXTERNALSYM GL_RGB_FLOAT16_ATI}
  GL_ALPHA_FLOAT16_ATI = $881C;
  {$EXTERNALSYM GL_ALPHA_FLOAT16_ATI}
  GL_INTENSITY_FLOAT16_ATI = $881D;
  {$EXTERNALSYM GL_INTENSITY_FLOAT16_ATI}
  GL_LUMINANCE_FLOAT16_ATI = $881E;
  {$EXTERNALSYM GL_LUMINANCE_FLOAT16_ATI}
  GL_LUMINANCE_ALPHA_FLOAT16_ATI = $881F;
  {$EXTERNALSYM GL_LUMINANCE_ALPHA_FLOAT16_ATI}

{ GL_ATI_texture_mirror_once }
  GL_MIRROR_CLAMP_ATI = $8742;
  {$EXTERNALSYM GL_MIRROR_CLAMP_ATI}
  GL_MIRROR_CLAMP_TO_EDGE_ATI = $8743;
  {$EXTERNALSYM GL_MIRROR_CLAMP_TO_EDGE_ATI}

{ GL_ATI_vertex_array_object }
  GL_STATIC_ATI = $8760;
  {$EXTERNALSYM GL_STATIC_ATI}
  GL_DYNAMIC_ATI = $8761;
  {$EXTERNALSYM GL_DYNAMIC_ATI}
  GL_PRESERVE_ATI = $8762;
  {$EXTERNALSYM GL_PRESERVE_ATI}
  GL_DISCARD_ATI = $8763;
  {$EXTERNALSYM GL_DISCARD_ATI}
  GL_OBJECT_BUFFER_SIZE_ATI = $8764;
  {$EXTERNALSYM GL_OBJECT_BUFFER_SIZE_ATI}
  GL_OBJECT_BUFFER_USAGE_ATI = $8765;
  {$EXTERNALSYM GL_OBJECT_BUFFER_USAGE_ATI}
  GL_ARRAY_OBJECT_BUFFER_ATI = $8766;
  {$EXTERNALSYM GL_ARRAY_OBJECT_BUFFER_ATI}
  GL_ARRAY_OBJECT_OFFSET_ATI = $8767;
  {$EXTERNALSYM GL_ARRAY_OBJECT_OFFSET_ATI}

{ GL_ATI_vertex_attrib_array_object }

{ GL_ATI_vertex_streams }
  GL_MAX_VERTEX_STREAMS_ATI = $876B;
  {$EXTERNALSYM GL_MAX_VERTEX_STREAMS_ATI}
  GL_VERTEX_STREAM0_ATI = $876C;
  {$EXTERNALSYM GL_VERTEX_STREAM0_ATI}
  GL_VERTEX_STREAM1_ATI = $876D;
  {$EXTERNALSYM GL_VERTEX_STREAM1_ATI}
  GL_VERTEX_STREAM2_ATI = $876E;
  {$EXTERNALSYM GL_VERTEX_STREAM2_ATI}
  GL_VERTEX_STREAM3_ATI = $876F;
  {$EXTERNALSYM GL_VERTEX_STREAM3_ATI}
  GL_VERTEX_STREAM4_ATI = $8770;
  {$EXTERNALSYM GL_VERTEX_STREAM4_ATI}
  GL_VERTEX_STREAM5_ATI = $8771;
  {$EXTERNALSYM GL_VERTEX_STREAM5_ATI}
  GL_VERTEX_STREAM6_ATI = $8772;
  {$EXTERNALSYM GL_VERTEX_STREAM6_ATI}
  GL_VERTEX_STREAM7_ATI = $8773;
  {$EXTERNALSYM GL_VERTEX_STREAM7_ATI}
  GL_VERTEX_SOURCE_ATI = $8774;
  {$EXTERNALSYM GL_VERTEX_SOURCE_ATI}

{ GL_EXT_422_pixels }
  GL_422_EXT = $80CC;
  {$EXTERNALSYM GL_422_EXT}
  GL_422_REV_EXT = $80CD;
  {$EXTERNALSYM GL_422_REV_EXT}
  GL_422_AVERAGE_EXT = $80CE;
  {$EXTERNALSYM GL_422_AVERAGE_EXT}
  GL_422_REV_AVERAGE_EXT = $80CF;
  {$EXTERNALSYM GL_422_REV_AVERAGE_EXT}

{ GL_EXT_abgr }
  GL_ABGR_EXT = $8000;
  {$EXTERNALSYM GL_ABGR_EXT}

{ GL_EXT_bgra }
  GL_BGR_EXT = $80E0;
  {$EXTERNALSYM GL_BGR_EXT}
  GL_BGRA_EXT = $80E1;
  {$EXTERNALSYM GL_BGRA_EXT}

{ GL_EXT_bindable_uniform }
  GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT = $8DE2;
  {$EXTERNALSYM GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT}
  GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = $8DE3;
  {$EXTERNALSYM GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT}
  GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = $8DE4;
  {$EXTERNALSYM GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT}
  GL_MAX_BINDABLE_UNIFORM_SIZE_EXT = $8DED;
  {$EXTERNALSYM GL_MAX_BINDABLE_UNIFORM_SIZE_EXT}
  GL_UNIFORM_BUFFER_EXT = $8DEE;
  {$EXTERNALSYM GL_UNIFORM_BUFFER_EXT}
  GL_UNIFORM_BUFFER_BINDING_EXT = $8DEF;
  {$EXTERNALSYM GL_UNIFORM_BUFFER_BINDING_EXT}

{ GL_EXT_blend_color }
  GL_CONSTANT_COLOR_EXT = $8001;
  {$EXTERNALSYM GL_CONSTANT_COLOR_EXT}
  GL_ONE_MINUS_CONSTANT_COLOR_EXT = $8002;
  {$EXTERNALSYM GL_ONE_MINUS_CONSTANT_COLOR_EXT}
  GL_CONSTANT_ALPHA_EXT = $8003;
  {$EXTERNALSYM GL_CONSTANT_ALPHA_EXT}
  GL_ONE_MINUS_CONSTANT_ALPHA_EXT = $8004;
  {$EXTERNALSYM GL_ONE_MINUS_CONSTANT_ALPHA_EXT}
  GL_BLEND_COLOR_EXT = $8005;
  {$EXTERNALSYM GL_BLEND_COLOR_EXT}

{ GL_EXT_blend_equation_separate }
  GL_BLEND_EQUATION_RGB_EXT = $8009;
  {$EXTERNALSYM GL_BLEND_EQUATION_RGB_EXT}
  GL_BLEND_EQUATION_ALPHA_EXT = $883D;
  {$EXTERNALSYM GL_BLEND_EQUATION_ALPHA_EXT}

{ GL_EXT_blend_func_separate }
  GL_BLEND_DST_RGB_EXT = $80C8;
  {$EXTERNALSYM GL_BLEND_DST_RGB_EXT}
  GL_BLEND_SRC_RGB_EXT = $80C9;
  {$EXTERNALSYM GL_BLEND_SRC_RGB_EXT}
  GL_BLEND_DST_ALPHA_EXT = $80CA;
  {$EXTERNALSYM GL_BLEND_DST_ALPHA_EXT}
  GL_BLEND_SRC_ALPHA_EXT = $80CB;
  {$EXTERNALSYM GL_BLEND_SRC_ALPHA_EXT}

{ GL_EXT_blend_logic_op }

{ GL_EXT_blend_minmax }
  GL_MIN_EXT = $8007;
  {$EXTERNALSYM GL_MIN_EXT}
  GL_MAX_EXT = $8008;
  {$EXTERNALSYM GL_MAX_EXT}
  GL_FUNC_ADD_EXT = $8006;
  {$EXTERNALSYM GL_FUNC_ADD_EXT}
  GL_BLEND_EQUATION_EXT = $8009;
  {$EXTERNALSYM GL_BLEND_EQUATION_EXT}

{ GL_EXT_blend_subtract }
  GL_FUNC_SUBTRACT_EXT = $800A;
  {$EXTERNALSYM GL_FUNC_SUBTRACT_EXT}
  GL_FUNC_REVERSE_SUBTRACT_EXT = $800B;
  {$EXTERNALSYM GL_FUNC_REVERSE_SUBTRACT_EXT}

{ GL_EXT_clip_volume_hint }
  GL_CLIP_VOLUME_CLIPPING_HINT_EXT = $80F0;
  {$EXTERNALSYM GL_CLIP_VOLUME_CLIPPING_HINT_EXT}

{ GL_EXT_cmyka }
  GL_CMYK_EXT = $800C;
  {$EXTERNALSYM GL_CMYK_EXT}
  GL_CMYKA_EXT = $800D;
  {$EXTERNALSYM GL_CMYKA_EXT}
  GL_PACK_CMYK_HINT_EXT = $800E;
  {$EXTERNALSYM GL_PACK_CMYK_HINT_EXT}
  GL_UNPACK_CMYK_HINT_EXT = $800F;
  {$EXTERNALSYM GL_UNPACK_CMYK_HINT_EXT}

{ GL_EXT_color_subtable }

{ GL_EXT_compiled_vertex_array }
  GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = $81A8;
  {$EXTERNALSYM GL_ARRAY_ELEMENT_LOCK_FIRST_EXT}
  GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = $81A9;
  {$EXTERNALSYM GL_ARRAY_ELEMENT_LOCK_COUNT_EXT}

{ GL_EXT_convolution }
  GL_CONVOLUTION_1D_EXT = $8010;
  {$EXTERNALSYM GL_CONVOLUTION_1D_EXT}
  GL_CONVOLUTION_2D_EXT = $8011;
  {$EXTERNALSYM GL_CONVOLUTION_2D_EXT}
  GL_SEPARABLE_2D_EXT = $8012;
  {$EXTERNALSYM GL_SEPARABLE_2D_EXT}
  GL_CONVOLUTION_BORDER_MODE_EXT = $8013;
  {$EXTERNALSYM GL_CONVOLUTION_BORDER_MODE_EXT}
  GL_CONVOLUTION_FILTER_SCALE_EXT = $8014;
  {$EXTERNALSYM GL_CONVOLUTION_FILTER_SCALE_EXT}
  GL_CONVOLUTION_FILTER_BIAS_EXT = $8015;
  {$EXTERNALSYM GL_CONVOLUTION_FILTER_BIAS_EXT}
  GL_REDUCE_EXT = $8016;
  {$EXTERNALSYM GL_REDUCE_EXT}
  GL_CONVOLUTION_FORMAT_EXT = $8017;
  {$EXTERNALSYM GL_CONVOLUTION_FORMAT_EXT}
  GL_CONVOLUTION_WIDTH_EXT = $8018;
  {$EXTERNALSYM GL_CONVOLUTION_WIDTH_EXT}
  GL_CONVOLUTION_HEIGHT_EXT = $8019;
  {$EXTERNALSYM GL_CONVOLUTION_HEIGHT_EXT}
  GL_MAX_CONVOLUTION_WIDTH_EXT = $801A;
  {$EXTERNALSYM GL_MAX_CONVOLUTION_WIDTH_EXT}
  GL_MAX_CONVOLUTION_HEIGHT_EXT = $801B;
  {$EXTERNALSYM GL_MAX_CONVOLUTION_HEIGHT_EXT}
  GL_POST_CONVOLUTION_RED_SCALE_EXT = $801C;
  {$EXTERNALSYM GL_POST_CONVOLUTION_RED_SCALE_EXT}
  GL_POST_CONVOLUTION_GREEN_SCALE_EXT = $801D;
  {$EXTERNALSYM GL_POST_CONVOLUTION_GREEN_SCALE_EXT}
  GL_POST_CONVOLUTION_BLUE_SCALE_EXT = $801E;
  {$EXTERNALSYM GL_POST_CONVOLUTION_BLUE_SCALE_EXT}
  GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = $801F;
  {$EXTERNALSYM GL_POST_CONVOLUTION_ALPHA_SCALE_EXT}
  GL_POST_CONVOLUTION_RED_BIAS_EXT = $8020;
  {$EXTERNALSYM GL_POST_CONVOLUTION_RED_BIAS_EXT}
  GL_POST_CONVOLUTION_GREEN_BIAS_EXT = $8021;
  {$EXTERNALSYM GL_POST_CONVOLUTION_GREEN_BIAS_EXT}
  GL_POST_CONVOLUTION_BLUE_BIAS_EXT = $8022;
  {$EXTERNALSYM GL_POST_CONVOLUTION_BLUE_BIAS_EXT}
  GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = $8023;
  {$EXTERNALSYM GL_POST_CONVOLUTION_ALPHA_BIAS_EXT}

{ GL_EXT_coordinate_frame }
  GL_TANGENT_ARRAY_EXT = $8439;
  {$EXTERNALSYM GL_TANGENT_ARRAY_EXT}
  GL_BINORMAL_ARRAY_EXT = $843A;
  {$EXTERNALSYM GL_BINORMAL_ARRAY_EXT}
  GL_CURRENT_TANGENT_EXT = $843B;
  {$EXTERNALSYM GL_CURRENT_TANGENT_EXT}
  GL_CURRENT_BINORMAL_EXT = $843C;
  {$EXTERNALSYM GL_CURRENT_BINORMAL_EXT}
  GL_TANGENT_ARRAY_TYPE_EXT = $843E;
  {$EXTERNALSYM GL_TANGENT_ARRAY_TYPE_EXT}
  GL_TANGENT_ARRAY_STRIDE_EXT = $843F;
  {$EXTERNALSYM GL_TANGENT_ARRAY_STRIDE_EXT}
  GL_BINORMAL_ARRAY_TYPE_EXT = $8440;
  {$EXTERNALSYM GL_BINORMAL_ARRAY_TYPE_EXT}
  GL_BINORMAL_ARRAY_STRIDE_EXT = $8441;
  {$EXTERNALSYM GL_BINORMAL_ARRAY_STRIDE_EXT}
  GL_TANGENT_ARRAY_POINTER_EXT = $8442;
  {$EXTERNALSYM GL_TANGENT_ARRAY_POINTER_EXT}
  GL_BINORMAL_ARRAY_POINTER_EXT = $8443;
  {$EXTERNALSYM GL_BINORMAL_ARRAY_POINTER_EXT}
  GL_MAP1_TANGENT_EXT = $8444;
  {$EXTERNALSYM GL_MAP1_TANGENT_EXT}
  GL_MAP2_TANGENT_EXT = $8445;
  {$EXTERNALSYM GL_MAP2_TANGENT_EXT}
  GL_MAP1_BINORMAL_EXT = $8446;
  {$EXTERNALSYM GL_MAP1_BINORMAL_EXT}
  GL_MAP2_BINORMAL_EXT = $8447;
  {$EXTERNALSYM GL_MAP2_BINORMAL_EXT}

{ GL_EXT_copy_texture }

{ GL_EXT_cull_vertex }
  GL_CULL_VERTEX_EXT = $81AA;
  {$EXTERNALSYM GL_CULL_VERTEX_EXT}
  GL_CULL_VERTEX_EYE_POSITION_EXT = $81AB;
  {$EXTERNALSYM GL_CULL_VERTEX_EYE_POSITION_EXT}
  GL_CULL_VERTEX_OBJECT_POSITION_EXT = $81AC;
  {$EXTERNALSYM GL_CULL_VERTEX_OBJECT_POSITION_EXT}

{ GL_EXT_debug_label }
  GL_PROGRAM_PIPELINE_OBJECT_EXT = $8A4F;
  {$EXTERNALSYM GL_PROGRAM_PIPELINE_OBJECT_EXT}
  GL_PROGRAM_OBJECT_EXT = $8B40;
  {$EXTERNALSYM GL_PROGRAM_OBJECT_EXT}
  GL_SHADER_OBJECT_EXT = $8B48;
  {$EXTERNALSYM GL_SHADER_OBJECT_EXT}
  GL_BUFFER_OBJECT_EXT = $9151;
  {$EXTERNALSYM GL_BUFFER_OBJECT_EXT}
  GL_QUERY_OBJECT_EXT = $9153;
  {$EXTERNALSYM GL_QUERY_OBJECT_EXT}
  GL_VERTEX_ARRAY_OBJECT_EXT = $9154;
  {$EXTERNALSYM GL_VERTEX_ARRAY_OBJECT_EXT}

{ GL_EXT_debug_marker }

{ GL_EXT_depth_bounds_test }
  GL_DEPTH_BOUNDS_TEST_EXT = $8890;
  {$EXTERNALSYM GL_DEPTH_BOUNDS_TEST_EXT}
  GL_DEPTH_BOUNDS_EXT = $8891;
  {$EXTERNALSYM GL_DEPTH_BOUNDS_EXT}

{ GL_EXT_direct_state_access }
  GL_PROGRAM_MATRIX_EXT = $8E2D;
  {$EXTERNALSYM GL_PROGRAM_MATRIX_EXT}
  GL_TRANSPOSE_PROGRAM_MATRIX_EXT = $8E2E;
  {$EXTERNALSYM GL_TRANSPOSE_PROGRAM_MATRIX_EXT}
  GL_PROGRAM_MATRIX_STACK_DEPTH_EXT = $8E2F;
  {$EXTERNALSYM GL_PROGRAM_MATRIX_STACK_DEPTH_EXT}

{ GL_EXT_draw_buffers2 }

{ GL_EXT_draw_instanced }

{ GL_EXT_draw_range_elements }
  GL_MAX_ELEMENTS_VERTICES_EXT = $80E8;
  {$EXTERNALSYM GL_MAX_ELEMENTS_VERTICES_EXT}
  GL_MAX_ELEMENTS_INDICES_EXT = $80E9;
  {$EXTERNALSYM GL_MAX_ELEMENTS_INDICES_EXT}

{ GL_EXT_fog_coord }
  GL_FOG_COORDINATE_SOURCE_EXT = $8450;
  {$EXTERNALSYM GL_FOG_COORDINATE_SOURCE_EXT}
  GL_FOG_COORDINATE_EXT = $8451;
  {$EXTERNALSYM GL_FOG_COORDINATE_EXT}
  GL_FRAGMENT_DEPTH_EXT = $8452;
  {$EXTERNALSYM GL_FRAGMENT_DEPTH_EXT}
  GL_CURRENT_FOG_COORDINATE_EXT = $8453;
  {$EXTERNALSYM GL_CURRENT_FOG_COORDINATE_EXT}
  GL_FOG_COORDINATE_ARRAY_TYPE_EXT = $8454;
  {$EXTERNALSYM GL_FOG_COORDINATE_ARRAY_TYPE_EXT}
  GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = $8455;
  {$EXTERNALSYM GL_FOG_COORDINATE_ARRAY_STRIDE_EXT}
  GL_FOG_COORDINATE_ARRAY_POINTER_EXT = $8456;
  {$EXTERNALSYM GL_FOG_COORDINATE_ARRAY_POINTER_EXT}
  GL_FOG_COORDINATE_ARRAY_EXT = $8457;
  {$EXTERNALSYM GL_FOG_COORDINATE_ARRAY_EXT}

{ GL_EXT_framebuffer_blit }
  GL_READ_FRAMEBUFFER_EXT = $8CA8;
  {$EXTERNALSYM GL_READ_FRAMEBUFFER_EXT}
  GL_DRAW_FRAMEBUFFER_EXT = $8CA9;
  {$EXTERNALSYM GL_DRAW_FRAMEBUFFER_EXT}
  GL_DRAW_FRAMEBUFFER_BINDING_EXT = $8CA6;
  {$EXTERNALSYM GL_DRAW_FRAMEBUFFER_BINDING_EXT}
  GL_READ_FRAMEBUFFER_BINDING_EXT = $8CAA;
  {$EXTERNALSYM GL_READ_FRAMEBUFFER_BINDING_EXT}

{ GL_EXT_framebuffer_multisample }
  GL_RENDERBUFFER_SAMPLES_EXT = $8CAB;
  {$EXTERNALSYM GL_RENDERBUFFER_SAMPLES_EXT}
  GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = $8D56;
  {$EXTERNALSYM GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT}
  GL_MAX_SAMPLES_EXT = $8D57;
  {$EXTERNALSYM GL_MAX_SAMPLES_EXT}

{ GL_EXT_framebuffer_multisample_blit_scaled }
  GL_SCALED_RESOLVE_FASTEST_EXT = $90BA;
  {$EXTERNALSYM GL_SCALED_RESOLVE_FASTEST_EXT}
  GL_SCALED_RESOLVE_NICEST_EXT = $90BB;
  {$EXTERNALSYM GL_SCALED_RESOLVE_NICEST_EXT}

{ GL_EXT_framebuffer_object }
  GL_INVALID_FRAMEBUFFER_OPERATION_EXT = $0506;
  {$EXTERNALSYM GL_INVALID_FRAMEBUFFER_OPERATION_EXT}
  GL_MAX_RENDERBUFFER_SIZE_EXT = $84E8;
  {$EXTERNALSYM GL_MAX_RENDERBUFFER_SIZE_EXT}
  GL_FRAMEBUFFER_BINDING_EXT = $8CA6;
  {$EXTERNALSYM GL_FRAMEBUFFER_BINDING_EXT}
  GL_RENDERBUFFER_BINDING_EXT = $8CA7;
  {$EXTERNALSYM GL_RENDERBUFFER_BINDING_EXT}
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = $8CD0;
  {$EXTERNALSYM GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT}
  GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = $8CD1;
  {$EXTERNALSYM GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT}
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = $8CD2;
  {$EXTERNALSYM GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT}
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = $8CD3;
  {$EXTERNALSYM GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT}
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = $8CD4;
  {$EXTERNALSYM GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT}
  GL_FRAMEBUFFER_COMPLETE_EXT = $8CD5;
  {$EXTERNALSYM GL_FRAMEBUFFER_COMPLETE_EXT}
  GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = $8CD6;
  {$EXTERNALSYM GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT}
  GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = $8CD7;
  {$EXTERNALSYM GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT}
  GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = $8CD9;
  {$EXTERNALSYM GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT}
  GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = $8CDA;
  {$EXTERNALSYM GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT}
  GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = $8CDB;
  {$EXTERNALSYM GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT}
  GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = $8CDC;
  {$EXTERNALSYM GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT}
  GL_FRAMEBUFFER_UNSUPPORTED_EXT = $8CDD;
  {$EXTERNALSYM GL_FRAMEBUFFER_UNSUPPORTED_EXT}
  GL_MAX_COLOR_ATTACHMENTS_EXT = $8CDF;
  {$EXTERNALSYM GL_MAX_COLOR_ATTACHMENTS_EXT}
  GL_COLOR_ATTACHMENT0_EXT = $8CE0;
  {$EXTERNALSYM GL_COLOR_ATTACHMENT0_EXT}
  GL_COLOR_ATTACHMENT1_EXT = $8CE1;
  {$EXTERNALSYM GL_COLOR_ATTACHMENT1_EXT}
  GL_COLOR_ATTACHMENT2_EXT = $8CE2;
  {$EXTERNALSYM GL_COLOR_ATTACHMENT2_EXT}
  GL_COLOR_ATTACHMENT3_EXT = $8CE3;
  {$EXTERNALSYM GL_COLOR_ATTACHMENT3_EXT}
  GL_COLOR_ATTACHMENT4_EXT = $8CE4;
  {$EXTERNALSYM GL_COLOR_ATTACHMENT4_EXT}
  GL_COLOR_ATTACHMENT5_EXT = $8CE5;
  {$EXTERNALSYM GL_COLOR_ATTACHMENT5_EXT}
  GL_COLOR_ATTACHMENT6_EXT = $8CE6;
  {$EXTERNALSYM GL_COLOR_ATTACHMENT6_EXT}
  GL_COLOR_ATTACHMENT7_EXT = $8CE7;
  {$EXTERNALSYM GL_COLOR_ATTACHMENT7_EXT}
  GL_COLOR_ATTACHMENT8_EXT = $8CE8;
  {$EXTERNALSYM GL_COLOR_ATTACHMENT8_EXT}
  GL_COLOR_ATTACHMENT9_EXT = $8CE9;
  {$EXTERNALSYM GL_COLOR_ATTACHMENT9_EXT}
  GL_COLOR_ATTACHMENT10_EXT = $8CEA;
  {$EXTERNALSYM GL_COLOR_ATTACHMENT10_EXT}
  GL_COLOR_ATTACHMENT11_EXT = $8CEB;
  {$EXTERNALSYM GL_COLOR_ATTACHMENT11_EXT}
  GL_COLOR_ATTACHMENT12_EXT = $8CEC;
  {$EXTERNALSYM GL_COLOR_ATTACHMENT12_EXT}
  GL_COLOR_ATTACHMENT13_EXT = $8CED;
  {$EXTERNALSYM GL_COLOR_ATTACHMENT13_EXT}
  GL_COLOR_ATTACHMENT14_EXT = $8CEE;
  {$EXTERNALSYM GL_COLOR_ATTACHMENT14_EXT}
  GL_COLOR_ATTACHMENT15_EXT = $8CEF;
  {$EXTERNALSYM GL_COLOR_ATTACHMENT15_EXT}
  GL_DEPTH_ATTACHMENT_EXT = $8D00;
  {$EXTERNALSYM GL_DEPTH_ATTACHMENT_EXT}
  GL_STENCIL_ATTACHMENT_EXT = $8D20;
  {$EXTERNALSYM GL_STENCIL_ATTACHMENT_EXT}
  GL_FRAMEBUFFER_EXT = $8D40;
  {$EXTERNALSYM GL_FRAMEBUFFER_EXT}
  GL_RENDERBUFFER_EXT = $8D41;
  {$EXTERNALSYM GL_RENDERBUFFER_EXT}
  GL_RENDERBUFFER_WIDTH_EXT = $8D42;
  {$EXTERNALSYM GL_RENDERBUFFER_WIDTH_EXT}
  GL_RENDERBUFFER_HEIGHT_EXT = $8D43;
  {$EXTERNALSYM GL_RENDERBUFFER_HEIGHT_EXT}
  GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = $8D44;
  {$EXTERNALSYM GL_RENDERBUFFER_INTERNAL_FORMAT_EXT}
  GL_STENCIL_INDEX1_EXT = $8D46;
  {$EXTERNALSYM GL_STENCIL_INDEX1_EXT}
  GL_STENCIL_INDEX4_EXT = $8D47;
  {$EXTERNALSYM GL_STENCIL_INDEX4_EXT}
  GL_STENCIL_INDEX8_EXT = $8D48;
  {$EXTERNALSYM GL_STENCIL_INDEX8_EXT}
  GL_STENCIL_INDEX16_EXT = $8D49;
  {$EXTERNALSYM GL_STENCIL_INDEX16_EXT}
  GL_RENDERBUFFER_RED_SIZE_EXT = $8D50;
  {$EXTERNALSYM GL_RENDERBUFFER_RED_SIZE_EXT}
  GL_RENDERBUFFER_GREEN_SIZE_EXT = $8D51;
  {$EXTERNALSYM GL_RENDERBUFFER_GREEN_SIZE_EXT}
  GL_RENDERBUFFER_BLUE_SIZE_EXT = $8D52;
  {$EXTERNALSYM GL_RENDERBUFFER_BLUE_SIZE_EXT}
  GL_RENDERBUFFER_ALPHA_SIZE_EXT = $8D53;
  {$EXTERNALSYM GL_RENDERBUFFER_ALPHA_SIZE_EXT}
  GL_RENDERBUFFER_DEPTH_SIZE_EXT = $8D54;
  {$EXTERNALSYM GL_RENDERBUFFER_DEPTH_SIZE_EXT}
  GL_RENDERBUFFER_STENCIL_SIZE_EXT = $8D55;
  {$EXTERNALSYM GL_RENDERBUFFER_STENCIL_SIZE_EXT}

{ GL_EXT_framebuffer_sRGB }
  GL_FRAMEBUFFER_SRGB_EXT = $8DB9;
  {$EXTERNALSYM GL_FRAMEBUFFER_SRGB_EXT}
  GL_FRAMEBUFFER_SRGB_CAPABLE_EXT = $8DBA;
  {$EXTERNALSYM GL_FRAMEBUFFER_SRGB_CAPABLE_EXT}

{ GL_EXT_geometry_shader4 }
  GL_GEOMETRY_SHADER_EXT = $8DD9;
  {$EXTERNALSYM GL_GEOMETRY_SHADER_EXT}
  GL_GEOMETRY_VERTICES_OUT_EXT = $8DDA;
  {$EXTERNALSYM GL_GEOMETRY_VERTICES_OUT_EXT}
  GL_GEOMETRY_INPUT_TYPE_EXT = $8DDB;
  {$EXTERNALSYM GL_GEOMETRY_INPUT_TYPE_EXT}
  GL_GEOMETRY_OUTPUT_TYPE_EXT = $8DDC;
  {$EXTERNALSYM GL_GEOMETRY_OUTPUT_TYPE_EXT}
  GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = $8C29;
  {$EXTERNALSYM GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT}
  GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT = $8DDD;
  {$EXTERNALSYM GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT}
  GL_MAX_VERTEX_VARYING_COMPONENTS_EXT = $8DDE;
  {$EXTERNALSYM GL_MAX_VERTEX_VARYING_COMPONENTS_EXT}
  GL_MAX_VARYING_COMPONENTS_EXT = $8B4B;
  {$EXTERNALSYM GL_MAX_VARYING_COMPONENTS_EXT}
  GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = $8DDF;
  {$EXTERNALSYM GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT}
  GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = $8DE0;
  {$EXTERNALSYM GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT}
  GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = $8DE1;
  {$EXTERNALSYM GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT}
  GL_LINES_ADJACENCY_EXT = $000A;
  {$EXTERNALSYM GL_LINES_ADJACENCY_EXT}
  GL_LINE_STRIP_ADJACENCY_EXT = $000B;
  {$EXTERNALSYM GL_LINE_STRIP_ADJACENCY_EXT}
  GL_TRIANGLES_ADJACENCY_EXT = $000C;
  {$EXTERNALSYM GL_TRIANGLES_ADJACENCY_EXT}
  GL_TRIANGLE_STRIP_ADJACENCY_EXT = $000D;
  {$EXTERNALSYM GL_TRIANGLE_STRIP_ADJACENCY_EXT}
  GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = $8DA8;
  {$EXTERNALSYM GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT}
  GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = $8DA9;
  {$EXTERNALSYM GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT}
  GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = $8DA7;
  {$EXTERNALSYM GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT}
  GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = $8CD4;
  {$EXTERNALSYM GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT}
  GL_PROGRAM_POINT_SIZE_EXT = $8642;
  {$EXTERNALSYM GL_PROGRAM_POINT_SIZE_EXT}

{ GL_EXT_gpu_program_parameters }

{ GL_EXT_gpu_shader4 }
  GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT = $88FD;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT}
  GL_SAMPLER_1D_ARRAY_EXT = $8DC0;
  {$EXTERNALSYM GL_SAMPLER_1D_ARRAY_EXT}
  GL_SAMPLER_2D_ARRAY_EXT = $8DC1;
  {$EXTERNALSYM GL_SAMPLER_2D_ARRAY_EXT}
  GL_SAMPLER_BUFFER_EXT = $8DC2;
  {$EXTERNALSYM GL_SAMPLER_BUFFER_EXT}
  GL_SAMPLER_1D_ARRAY_SHADOW_EXT = $8DC3;
  {$EXTERNALSYM GL_SAMPLER_1D_ARRAY_SHADOW_EXT}
  GL_SAMPLER_2D_ARRAY_SHADOW_EXT = $8DC4;
  {$EXTERNALSYM GL_SAMPLER_2D_ARRAY_SHADOW_EXT}
  GL_SAMPLER_CUBE_SHADOW_EXT = $8DC5;
  {$EXTERNALSYM GL_SAMPLER_CUBE_SHADOW_EXT}
  GL_UNSIGNED_INT_VEC2_EXT = $8DC6;
  {$EXTERNALSYM GL_UNSIGNED_INT_VEC2_EXT}
  GL_UNSIGNED_INT_VEC3_EXT = $8DC7;
  {$EXTERNALSYM GL_UNSIGNED_INT_VEC3_EXT}
  GL_UNSIGNED_INT_VEC4_EXT = $8DC8;
  {$EXTERNALSYM GL_UNSIGNED_INT_VEC4_EXT}
  GL_INT_SAMPLER_1D_EXT = $8DC9;
  {$EXTERNALSYM GL_INT_SAMPLER_1D_EXT}
  GL_INT_SAMPLER_2D_EXT = $8DCA;
  {$EXTERNALSYM GL_INT_SAMPLER_2D_EXT}
  GL_INT_SAMPLER_3D_EXT = $8DCB;
  {$EXTERNALSYM GL_INT_SAMPLER_3D_EXT}
  GL_INT_SAMPLER_CUBE_EXT = $8DCC;
  {$EXTERNALSYM GL_INT_SAMPLER_CUBE_EXT}
  GL_INT_SAMPLER_2D_RECT_EXT = $8DCD;
  {$EXTERNALSYM GL_INT_SAMPLER_2D_RECT_EXT}
  GL_INT_SAMPLER_1D_ARRAY_EXT = $8DCE;
  {$EXTERNALSYM GL_INT_SAMPLER_1D_ARRAY_EXT}
  GL_INT_SAMPLER_2D_ARRAY_EXT = $8DCF;
  {$EXTERNALSYM GL_INT_SAMPLER_2D_ARRAY_EXT}
  GL_INT_SAMPLER_BUFFER_EXT = $8DD0;
  {$EXTERNALSYM GL_INT_SAMPLER_BUFFER_EXT}
  GL_UNSIGNED_INT_SAMPLER_1D_EXT = $8DD1;
  {$EXTERNALSYM GL_UNSIGNED_INT_SAMPLER_1D_EXT}
  GL_UNSIGNED_INT_SAMPLER_2D_EXT = $8DD2;
  {$EXTERNALSYM GL_UNSIGNED_INT_SAMPLER_2D_EXT}
  GL_UNSIGNED_INT_SAMPLER_3D_EXT = $8DD3;
  {$EXTERNALSYM GL_UNSIGNED_INT_SAMPLER_3D_EXT}
  GL_UNSIGNED_INT_SAMPLER_CUBE_EXT = $8DD4;
  {$EXTERNALSYM GL_UNSIGNED_INT_SAMPLER_CUBE_EXT}
  GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT = $8DD5;
  {$EXTERNALSYM GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT}
  GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = $8DD6;
  {$EXTERNALSYM GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT}
  GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = $8DD7;
  {$EXTERNALSYM GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT}
  GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = $8DD8;
  {$EXTERNALSYM GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT}
  GL_MIN_PROGRAM_TEXEL_OFFSET_EXT = $8904;
  {$EXTERNALSYM GL_MIN_PROGRAM_TEXEL_OFFSET_EXT}
  GL_MAX_PROGRAM_TEXEL_OFFSET_EXT = $8905;
  {$EXTERNALSYM GL_MAX_PROGRAM_TEXEL_OFFSET_EXT}

{ GL_EXT_histogram }
  GL_HISTOGRAM_EXT = $8024;
  {$EXTERNALSYM GL_HISTOGRAM_EXT}
  GL_PROXY_HISTOGRAM_EXT = $8025;
  {$EXTERNALSYM GL_PROXY_HISTOGRAM_EXT}
  GL_HISTOGRAM_WIDTH_EXT = $8026;
  {$EXTERNALSYM GL_HISTOGRAM_WIDTH_EXT}
  GL_HISTOGRAM_FORMAT_EXT = $8027;
  {$EXTERNALSYM GL_HISTOGRAM_FORMAT_EXT}
  GL_HISTOGRAM_RED_SIZE_EXT = $8028;
  {$EXTERNALSYM GL_HISTOGRAM_RED_SIZE_EXT}
  GL_HISTOGRAM_GREEN_SIZE_EXT = $8029;
  {$EXTERNALSYM GL_HISTOGRAM_GREEN_SIZE_EXT}
  GL_HISTOGRAM_BLUE_SIZE_EXT = $802A;
  {$EXTERNALSYM GL_HISTOGRAM_BLUE_SIZE_EXT}
  GL_HISTOGRAM_ALPHA_SIZE_EXT = $802B;
  {$EXTERNALSYM GL_HISTOGRAM_ALPHA_SIZE_EXT}
  GL_HISTOGRAM_LUMINANCE_SIZE_EXT = $802C;
  {$EXTERNALSYM GL_HISTOGRAM_LUMINANCE_SIZE_EXT}
  GL_HISTOGRAM_SINK_EXT = $802D;
  {$EXTERNALSYM GL_HISTOGRAM_SINK_EXT}
  GL_MINMAX_EXT = $802E;
  {$EXTERNALSYM GL_MINMAX_EXT}
  GL_MINMAX_FORMAT_EXT = $802F;
  {$EXTERNALSYM GL_MINMAX_FORMAT_EXT}
  GL_MINMAX_SINK_EXT = $8030;
  {$EXTERNALSYM GL_MINMAX_SINK_EXT}
  GL_TABLE_TOO_LARGE_EXT = $8031;
  {$EXTERNALSYM GL_TABLE_TOO_LARGE_EXT}

{ GL_EXT_index_array_formats }
  GL_IUI_V2F_EXT = $81AD;
  {$EXTERNALSYM GL_IUI_V2F_EXT}
  GL_IUI_V3F_EXT = $81AE;
  {$EXTERNALSYM GL_IUI_V3F_EXT}
  GL_IUI_N3F_V2F_EXT = $81AF;
  {$EXTERNALSYM GL_IUI_N3F_V2F_EXT}
  GL_IUI_N3F_V3F_EXT = $81B0;
  {$EXTERNALSYM GL_IUI_N3F_V3F_EXT}
  GL_T2F_IUI_V2F_EXT = $81B1;
  {$EXTERNALSYM GL_T2F_IUI_V2F_EXT}
  GL_T2F_IUI_V3F_EXT = $81B2;
  {$EXTERNALSYM GL_T2F_IUI_V3F_EXT}
  GL_T2F_IUI_N3F_V2F_EXT = $81B3;
  {$EXTERNALSYM GL_T2F_IUI_N3F_V2F_EXT}
  GL_T2F_IUI_N3F_V3F_EXT = $81B4;
  {$EXTERNALSYM GL_T2F_IUI_N3F_V3F_EXT}

{ GL_EXT_index_func }
  GL_INDEX_TEST_EXT = $81B5;
  {$EXTERNALSYM GL_INDEX_TEST_EXT}
  GL_INDEX_TEST_FUNC_EXT = $81B6;
  {$EXTERNALSYM GL_INDEX_TEST_FUNC_EXT}
  GL_INDEX_TEST_REF_EXT = $81B7;
  {$EXTERNALSYM GL_INDEX_TEST_REF_EXT}

{ GL_EXT_index_material }
  GL_INDEX_MATERIAL_EXT = $81B8;
  {$EXTERNALSYM GL_INDEX_MATERIAL_EXT}
  GL_INDEX_MATERIAL_PARAMETER_EXT = $81B9;
  {$EXTERNALSYM GL_INDEX_MATERIAL_PARAMETER_EXT}
  GL_INDEX_MATERIAL_FACE_EXT = $81BA;
  {$EXTERNALSYM GL_INDEX_MATERIAL_FACE_EXT}

{ GL_EXT_index_texture }

{ GL_EXT_light_texture }
  GL_FRAGMENT_MATERIAL_EXT = $8349;
  {$EXTERNALSYM GL_FRAGMENT_MATERIAL_EXT}
  GL_FRAGMENT_NORMAL_EXT = $834A;
  {$EXTERNALSYM GL_FRAGMENT_NORMAL_EXT}
  GL_FRAGMENT_COLOR_EXT = $834C;
  {$EXTERNALSYM GL_FRAGMENT_COLOR_EXT}
  GL_ATTENUATION_EXT = $834D;
  {$EXTERNALSYM GL_ATTENUATION_EXT}
  GL_SHADOW_ATTENUATION_EXT = $834E;
  {$EXTERNALSYM GL_SHADOW_ATTENUATION_EXT}
  GL_TEXTURE_APPLICATION_MODE_EXT = $834F;
  {$EXTERNALSYM GL_TEXTURE_APPLICATION_MODE_EXT}
  GL_TEXTURE_LIGHT_EXT = $8350;
  {$EXTERNALSYM GL_TEXTURE_LIGHT_EXT}
  GL_TEXTURE_MATERIAL_FACE_EXT = $8351;
  {$EXTERNALSYM GL_TEXTURE_MATERIAL_FACE_EXT}
  GL_TEXTURE_MATERIAL_PARAMETER_EXT = $8352;
  {$EXTERNALSYM GL_TEXTURE_MATERIAL_PARAMETER_EXT}

{ GL_EXT_misc_attribute }

{ GL_EXT_multi_draw_arrays }

{ GL_EXT_multisample }
  GL_MULTISAMPLE_EXT = $809D;
  {$EXTERNALSYM GL_MULTISAMPLE_EXT}
  GL_SAMPLE_ALPHA_TO_MASK_EXT = $809E;
  {$EXTERNALSYM GL_SAMPLE_ALPHA_TO_MASK_EXT}
  GL_SAMPLE_ALPHA_TO_ONE_EXT = $809F;
  {$EXTERNALSYM GL_SAMPLE_ALPHA_TO_ONE_EXT}
  GL_SAMPLE_MASK_EXT = $80A0;
  {$EXTERNALSYM GL_SAMPLE_MASK_EXT}
  GL_1PASS_EXT = $80A1;
  {$EXTERNALSYM GL_1PASS_EXT}
  GL_2PASS_0_EXT = $80A2;
  {$EXTERNALSYM GL_2PASS_0_EXT}
  GL_2PASS_1_EXT = $80A3;
  {$EXTERNALSYM GL_2PASS_1_EXT}
  GL_4PASS_0_EXT = $80A4;
  {$EXTERNALSYM GL_4PASS_0_EXT}
  GL_4PASS_1_EXT = $80A5;
  {$EXTERNALSYM GL_4PASS_1_EXT}
  GL_4PASS_2_EXT = $80A6;
  {$EXTERNALSYM GL_4PASS_2_EXT}
  GL_4PASS_3_EXT = $80A7;
  {$EXTERNALSYM GL_4PASS_3_EXT}
  GL_SAMPLE_BUFFERS_EXT = $80A8;
  {$EXTERNALSYM GL_SAMPLE_BUFFERS_EXT}
  GL_SAMPLES_EXT = $80A9;
  {$EXTERNALSYM GL_SAMPLES_EXT}
  GL_SAMPLE_MASK_VALUE_EXT = $80AA;
  {$EXTERNALSYM GL_SAMPLE_MASK_VALUE_EXT}
  GL_SAMPLE_MASK_INVERT_EXT = $80AB;
  {$EXTERNALSYM GL_SAMPLE_MASK_INVERT_EXT}
  GL_SAMPLE_PATTERN_EXT = $80AC;
  {$EXTERNALSYM GL_SAMPLE_PATTERN_EXT}
  GL_MULTISAMPLE_BIT_EXT = $20000000;
  {$EXTERNALSYM GL_MULTISAMPLE_BIT_EXT}

{ GL_EXT_packed_depth_stencil }
  GL_DEPTH_STENCIL_EXT = $84F9;
  {$EXTERNALSYM GL_DEPTH_STENCIL_EXT}
  GL_UNSIGNED_INT_24_8_EXT = $84FA;
  {$EXTERNALSYM GL_UNSIGNED_INT_24_8_EXT}
  GL_DEPTH24_STENCIL8_EXT = $88F0;
  {$EXTERNALSYM GL_DEPTH24_STENCIL8_EXT}
  GL_TEXTURE_STENCIL_SIZE_EXT = $88F1;
  {$EXTERNALSYM GL_TEXTURE_STENCIL_SIZE_EXT}

{ GL_EXT_packed_float }
  GL_R11F_G11F_B10F_EXT = $8C3A;
  {$EXTERNALSYM GL_R11F_G11F_B10F_EXT}
  GL_UNSIGNED_INT_10F_11F_11F_REV_EXT = $8C3B;
  {$EXTERNALSYM GL_UNSIGNED_INT_10F_11F_11F_REV_EXT}
  GL_RGBA_SIGNED_COMPONENTS_EXT = $8C3C;
  {$EXTERNALSYM GL_RGBA_SIGNED_COMPONENTS_EXT}

{ GL_EXT_packed_pixels }
  GL_UNSIGNED_BYTE_3_3_2_EXT = $8032;
  {$EXTERNALSYM GL_UNSIGNED_BYTE_3_3_2_EXT}
  GL_UNSIGNED_SHORT_4_4_4_4_EXT = $8033;
  {$EXTERNALSYM GL_UNSIGNED_SHORT_4_4_4_4_EXT}
  GL_UNSIGNED_SHORT_5_5_5_1_EXT = $8034;
  {$EXTERNALSYM GL_UNSIGNED_SHORT_5_5_5_1_EXT}
  GL_UNSIGNED_INT_8_8_8_8_EXT = $8035;
  {$EXTERNALSYM GL_UNSIGNED_INT_8_8_8_8_EXT}
  GL_UNSIGNED_INT_10_10_10_2_EXT = $8036;
  {$EXTERNALSYM GL_UNSIGNED_INT_10_10_10_2_EXT}

{ GL_EXT_paletted_texture }
  GL_COLOR_INDEX1_EXT = $80E2;
  {$EXTERNALSYM GL_COLOR_INDEX1_EXT}
  GL_COLOR_INDEX2_EXT = $80E3;
  {$EXTERNALSYM GL_COLOR_INDEX2_EXT}
  GL_COLOR_INDEX4_EXT = $80E4;
  {$EXTERNALSYM GL_COLOR_INDEX4_EXT}
  GL_COLOR_INDEX8_EXT = $80E5;
  {$EXTERNALSYM GL_COLOR_INDEX8_EXT}
  GL_COLOR_INDEX12_EXT = $80E6;
  {$EXTERNALSYM GL_COLOR_INDEX12_EXT}
  GL_COLOR_INDEX16_EXT = $80E7;
  {$EXTERNALSYM GL_COLOR_INDEX16_EXT}
  GL_TEXTURE_INDEX_SIZE_EXT = $80ED;
  {$EXTERNALSYM GL_TEXTURE_INDEX_SIZE_EXT}

{ GL_EXT_pixel_buffer_object }
  GL_PIXEL_PACK_BUFFER_EXT = $88EB;
  {$EXTERNALSYM GL_PIXEL_PACK_BUFFER_EXT}
  GL_PIXEL_UNPACK_BUFFER_EXT = $88EC;
  {$EXTERNALSYM GL_PIXEL_UNPACK_BUFFER_EXT}
  GL_PIXEL_PACK_BUFFER_BINDING_EXT = $88ED;
  {$EXTERNALSYM GL_PIXEL_PACK_BUFFER_BINDING_EXT}
  GL_PIXEL_UNPACK_BUFFER_BINDING_EXT = $88EF;
  {$EXTERNALSYM GL_PIXEL_UNPACK_BUFFER_BINDING_EXT}

{ GL_EXT_pixel_transform }
  GL_PIXEL_TRANSFORM_2D_EXT = $8330;
  {$EXTERNALSYM GL_PIXEL_TRANSFORM_2D_EXT}
  GL_PIXEL_MAG_FILTER_EXT = $8331;
  {$EXTERNALSYM GL_PIXEL_MAG_FILTER_EXT}
  GL_PIXEL_MIN_FILTER_EXT = $8332;
  {$EXTERNALSYM GL_PIXEL_MIN_FILTER_EXT}
  GL_PIXEL_CUBIC_WEIGHT_EXT = $8333;
  {$EXTERNALSYM GL_PIXEL_CUBIC_WEIGHT_EXT}
  GL_CUBIC_EXT = $8334;
  {$EXTERNALSYM GL_CUBIC_EXT}
  GL_AVERAGE_EXT = $8335;
  {$EXTERNALSYM GL_AVERAGE_EXT}
  GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = $8336;
  {$EXTERNALSYM GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT}
  GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = $8337;
  {$EXTERNALSYM GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT}
  GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = $8338;
  {$EXTERNALSYM GL_PIXEL_TRANSFORM_2D_MATRIX_EXT}

{ GL_EXT_pixel_transform_color_table }

{ GL_EXT_point_parameters }
  GL_POINT_SIZE_MIN_EXT = $8126;
  {$EXTERNALSYM GL_POINT_SIZE_MIN_EXT}
  GL_POINT_SIZE_MAX_EXT = $8127;
  {$EXTERNALSYM GL_POINT_SIZE_MAX_EXT}
  GL_POINT_FADE_THRESHOLD_SIZE_EXT = $8128;
  {$EXTERNALSYM GL_POINT_FADE_THRESHOLD_SIZE_EXT}
  GL_DISTANCE_ATTENUATION_EXT = $8129;
  {$EXTERNALSYM GL_DISTANCE_ATTENUATION_EXT}

{ GL_EXT_polygon_offset }
  GL_POLYGON_OFFSET_EXT = $8037;
  {$EXTERNALSYM GL_POLYGON_OFFSET_EXT}
  GL_POLYGON_OFFSET_FACTOR_EXT = $8038;
  {$EXTERNALSYM GL_POLYGON_OFFSET_FACTOR_EXT}
  GL_POLYGON_OFFSET_BIAS_EXT = $8039;
  {$EXTERNALSYM GL_POLYGON_OFFSET_BIAS_EXT}

{ GL_EXT_provoking_vertex }
  GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT = $8E4C;
  {$EXTERNALSYM GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT}
  GL_FIRST_VERTEX_CONVENTION_EXT = $8E4D;
  {$EXTERNALSYM GL_FIRST_VERTEX_CONVENTION_EXT}
  GL_LAST_VERTEX_CONVENTION_EXT = $8E4E;
  {$EXTERNALSYM GL_LAST_VERTEX_CONVENTION_EXT}
  GL_PROVOKING_VERTEX_EXT = $8E4F;
  {$EXTERNALSYM GL_PROVOKING_VERTEX_EXT}

{ GL_EXT_rescale_normal }
  GL_RESCALE_NORMAL_EXT = $803A;
  {$EXTERNALSYM GL_RESCALE_NORMAL_EXT}

{ GL_EXT_secondary_color }
  GL_COLOR_SUM_EXT = $8458;
  {$EXTERNALSYM GL_COLOR_SUM_EXT}
  GL_CURRENT_SECONDARY_COLOR_EXT = $8459;
  {$EXTERNALSYM GL_CURRENT_SECONDARY_COLOR_EXT}
  GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = $845A;
  {$EXTERNALSYM GL_SECONDARY_COLOR_ARRAY_SIZE_EXT}
  GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = $845B;
  {$EXTERNALSYM GL_SECONDARY_COLOR_ARRAY_TYPE_EXT}
  GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = $845C;
  {$EXTERNALSYM GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT}
  GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = $845D;
  {$EXTERNALSYM GL_SECONDARY_COLOR_ARRAY_POINTER_EXT}
  GL_SECONDARY_COLOR_ARRAY_EXT = $845E;
  {$EXTERNALSYM GL_SECONDARY_COLOR_ARRAY_EXT}

{ GL_EXT_separate_shader_objects }
  GL_ACTIVE_PROGRAM_EXT = $8B8D;
  {$EXTERNALSYM GL_ACTIVE_PROGRAM_EXT}

{ GL_EXT_separate_specular_color }
  GL_LIGHT_MODEL_COLOR_CONTROL_EXT = $81F8;
  {$EXTERNALSYM GL_LIGHT_MODEL_COLOR_CONTROL_EXT}
  GL_SINGLE_COLOR_EXT = $81F9;
  {$EXTERNALSYM GL_SINGLE_COLOR_EXT}
  GL_SEPARATE_SPECULAR_COLOR_EXT = $81FA;
  {$EXTERNALSYM GL_SEPARATE_SPECULAR_COLOR_EXT}

{ GL_EXT_shader_image_load_store }
  GL_MAX_IMAGE_UNITS_EXT = $8F38;
  {$EXTERNALSYM GL_MAX_IMAGE_UNITS_EXT}
  GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT = $8F39;
  {$EXTERNALSYM GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT}
  GL_IMAGE_BINDING_NAME_EXT = $8F3A;
  {$EXTERNALSYM GL_IMAGE_BINDING_NAME_EXT}
  GL_IMAGE_BINDING_LEVEL_EXT = $8F3B;
  {$EXTERNALSYM GL_IMAGE_BINDING_LEVEL_EXT}
  GL_IMAGE_BINDING_LAYERED_EXT = $8F3C;
  {$EXTERNALSYM GL_IMAGE_BINDING_LAYERED_EXT}
  GL_IMAGE_BINDING_LAYER_EXT = $8F3D;
  {$EXTERNALSYM GL_IMAGE_BINDING_LAYER_EXT}
  GL_IMAGE_BINDING_ACCESS_EXT = $8F3E;
  {$EXTERNALSYM GL_IMAGE_BINDING_ACCESS_EXT}
  GL_IMAGE_1D_EXT = $904C;
  {$EXTERNALSYM GL_IMAGE_1D_EXT}
  GL_IMAGE_2D_EXT = $904D;
  {$EXTERNALSYM GL_IMAGE_2D_EXT}
  GL_IMAGE_3D_EXT = $904E;
  {$EXTERNALSYM GL_IMAGE_3D_EXT}
  GL_IMAGE_2D_RECT_EXT = $904F;
  {$EXTERNALSYM GL_IMAGE_2D_RECT_EXT}
  GL_IMAGE_CUBE_EXT = $9050;
  {$EXTERNALSYM GL_IMAGE_CUBE_EXT}
  GL_IMAGE_BUFFER_EXT = $9051;
  {$EXTERNALSYM GL_IMAGE_BUFFER_EXT}
  GL_IMAGE_1D_ARRAY_EXT = $9052;
  {$EXTERNALSYM GL_IMAGE_1D_ARRAY_EXT}
  GL_IMAGE_2D_ARRAY_EXT = $9053;
  {$EXTERNALSYM GL_IMAGE_2D_ARRAY_EXT}
  GL_IMAGE_CUBE_MAP_ARRAY_EXT = $9054;
  {$EXTERNALSYM GL_IMAGE_CUBE_MAP_ARRAY_EXT}
  GL_IMAGE_2D_MULTISAMPLE_EXT = $9055;
  {$EXTERNALSYM GL_IMAGE_2D_MULTISAMPLE_EXT}
  GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = $9056;
  {$EXTERNALSYM GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT}
  GL_INT_IMAGE_1D_EXT = $9057;
  {$EXTERNALSYM GL_INT_IMAGE_1D_EXT}
  GL_INT_IMAGE_2D_EXT = $9058;
  {$EXTERNALSYM GL_INT_IMAGE_2D_EXT}
  GL_INT_IMAGE_3D_EXT = $9059;
  {$EXTERNALSYM GL_INT_IMAGE_3D_EXT}
  GL_INT_IMAGE_2D_RECT_EXT = $905A;
  {$EXTERNALSYM GL_INT_IMAGE_2D_RECT_EXT}
  GL_INT_IMAGE_CUBE_EXT = $905B;
  {$EXTERNALSYM GL_INT_IMAGE_CUBE_EXT}
  GL_INT_IMAGE_BUFFER_EXT = $905C;
  {$EXTERNALSYM GL_INT_IMAGE_BUFFER_EXT}
  GL_INT_IMAGE_1D_ARRAY_EXT = $905D;
  {$EXTERNALSYM GL_INT_IMAGE_1D_ARRAY_EXT}
  GL_INT_IMAGE_2D_ARRAY_EXT = $905E;
  {$EXTERNALSYM GL_INT_IMAGE_2D_ARRAY_EXT}
  GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT = $905F;
  {$EXTERNALSYM GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT}
  GL_INT_IMAGE_2D_MULTISAMPLE_EXT = $9060;
  {$EXTERNALSYM GL_INT_IMAGE_2D_MULTISAMPLE_EXT}
  GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = $9061;
  {$EXTERNALSYM GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT}
  GL_UNSIGNED_INT_IMAGE_1D_EXT = $9062;
  {$EXTERNALSYM GL_UNSIGNED_INT_IMAGE_1D_EXT}
  GL_UNSIGNED_INT_IMAGE_2D_EXT = $9063;
  {$EXTERNALSYM GL_UNSIGNED_INT_IMAGE_2D_EXT}
  GL_UNSIGNED_INT_IMAGE_3D_EXT = $9064;
  {$EXTERNALSYM GL_UNSIGNED_INT_IMAGE_3D_EXT}
  GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT = $9065;
  {$EXTERNALSYM GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT}
  GL_UNSIGNED_INT_IMAGE_CUBE_EXT = $9066;
  {$EXTERNALSYM GL_UNSIGNED_INT_IMAGE_CUBE_EXT}
  GL_UNSIGNED_INT_IMAGE_BUFFER_EXT = $9067;
  {$EXTERNALSYM GL_UNSIGNED_INT_IMAGE_BUFFER_EXT}
  GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT = $9068;
  {$EXTERNALSYM GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT}
  GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT = $9069;
  {$EXTERNALSYM GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT}
  GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = $906A;
  {$EXTERNALSYM GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT}
  GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT = $906B;
  {$EXTERNALSYM GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT}
  GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = $906C;
  {$EXTERNALSYM GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT}
  GL_MAX_IMAGE_SAMPLES_EXT = $906D;
  {$EXTERNALSYM GL_MAX_IMAGE_SAMPLES_EXT}
  GL_IMAGE_BINDING_FORMAT_EXT = $906E;
  {$EXTERNALSYM GL_IMAGE_BINDING_FORMAT_EXT}
  GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT = $00000001;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT}
  GL_ELEMENT_ARRAY_BARRIER_BIT_EXT = $00000002;
  {$EXTERNALSYM GL_ELEMENT_ARRAY_BARRIER_BIT_EXT}
  GL_UNIFORM_BARRIER_BIT_EXT = $00000004;
  {$EXTERNALSYM GL_UNIFORM_BARRIER_BIT_EXT}
  GL_TEXTURE_FETCH_BARRIER_BIT_EXT = $00000008;
  {$EXTERNALSYM GL_TEXTURE_FETCH_BARRIER_BIT_EXT}
  GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT = $00000020;
  {$EXTERNALSYM GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT}
  GL_COMMAND_BARRIER_BIT_EXT = $00000040;
  {$EXTERNALSYM GL_COMMAND_BARRIER_BIT_EXT}
  GL_PIXEL_BUFFER_BARRIER_BIT_EXT = $00000080;
  {$EXTERNALSYM GL_PIXEL_BUFFER_BARRIER_BIT_EXT}
  GL_TEXTURE_UPDATE_BARRIER_BIT_EXT = $00000100;
  {$EXTERNALSYM GL_TEXTURE_UPDATE_BARRIER_BIT_EXT}
  GL_BUFFER_UPDATE_BARRIER_BIT_EXT = $00000200;
  {$EXTERNALSYM GL_BUFFER_UPDATE_BARRIER_BIT_EXT}
  GL_FRAMEBUFFER_BARRIER_BIT_EXT = $00000400;
  {$EXTERNALSYM GL_FRAMEBUFFER_BARRIER_BIT_EXT}
  GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT = $00000800;
  {$EXTERNALSYM GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT}
  GL_ATOMIC_COUNTER_BARRIER_BIT_EXT = $00001000;
  {$EXTERNALSYM GL_ATOMIC_COUNTER_BARRIER_BIT_EXT}
  GL_ALL_BARRIER_BITS_EXT = $FFFFFFFF;
  {$EXTERNALSYM GL_ALL_BARRIER_BITS_EXT}

{ GL_EXT_shader_integer_mix }

{ GL_EXT_shadow_funcs }

{ GL_EXT_shared_texture_palette }
  GL_SHARED_TEXTURE_PALETTE_EXT = $81FB;
  {$EXTERNALSYM GL_SHARED_TEXTURE_PALETTE_EXT}

{ GL_EXT_stencil_clear_tag }
  GL_STENCIL_TAG_BITS_EXT = $88F2;
  {$EXTERNALSYM GL_STENCIL_TAG_BITS_EXT}
  GL_STENCIL_CLEAR_TAG_VALUE_EXT = $88F3;
  {$EXTERNALSYM GL_STENCIL_CLEAR_TAG_VALUE_EXT}

{ GL_EXT_stencil_two_side }
  GL_STENCIL_TEST_TWO_SIDE_EXT = $8910;
  {$EXTERNALSYM GL_STENCIL_TEST_TWO_SIDE_EXT}
  GL_ACTIVE_STENCIL_FACE_EXT = $8911;
  {$EXTERNALSYM GL_ACTIVE_STENCIL_FACE_EXT}

{ GL_EXT_stencil_wrap }
  GL_INCR_WRAP_EXT = $8507;
  {$EXTERNALSYM GL_INCR_WRAP_EXT}
  GL_DECR_WRAP_EXT = $8508;
  {$EXTERNALSYM GL_DECR_WRAP_EXT}

{ GL_EXT_subtexture }

{ GL_EXT_texture }
  GL_ALPHA4_EXT = $803B;
  {$EXTERNALSYM GL_ALPHA4_EXT}
  GL_ALPHA8_EXT = $803C;
  {$EXTERNALSYM GL_ALPHA8_EXT}
  GL_ALPHA12_EXT = $803D;
  {$EXTERNALSYM GL_ALPHA12_EXT}
  GL_ALPHA16_EXT = $803E;
  {$EXTERNALSYM GL_ALPHA16_EXT}
  GL_LUMINANCE4_EXT = $803F;
  {$EXTERNALSYM GL_LUMINANCE4_EXT}
  GL_LUMINANCE8_EXT = $8040;
  {$EXTERNALSYM GL_LUMINANCE8_EXT}
  GL_LUMINANCE12_EXT = $8041;
  {$EXTERNALSYM GL_LUMINANCE12_EXT}
  GL_LUMINANCE16_EXT = $8042;
  {$EXTERNALSYM GL_LUMINANCE16_EXT}
  GL_LUMINANCE4_ALPHA4_EXT = $8043;
  {$EXTERNALSYM GL_LUMINANCE4_ALPHA4_EXT}
  GL_LUMINANCE6_ALPHA2_EXT = $8044;
  {$EXTERNALSYM GL_LUMINANCE6_ALPHA2_EXT}
  GL_LUMINANCE8_ALPHA8_EXT = $8045;
  {$EXTERNALSYM GL_LUMINANCE8_ALPHA8_EXT}
  GL_LUMINANCE12_ALPHA4_EXT = $8046;
  {$EXTERNALSYM GL_LUMINANCE12_ALPHA4_EXT}
  GL_LUMINANCE12_ALPHA12_EXT = $8047;
  {$EXTERNALSYM GL_LUMINANCE12_ALPHA12_EXT}
  GL_LUMINANCE16_ALPHA16_EXT = $8048;
  {$EXTERNALSYM GL_LUMINANCE16_ALPHA16_EXT}
  GL_INTENSITY_EXT = $8049;
  {$EXTERNALSYM GL_INTENSITY_EXT}
  GL_INTENSITY4_EXT = $804A;
  {$EXTERNALSYM GL_INTENSITY4_EXT}
  GL_INTENSITY8_EXT = $804B;
  {$EXTERNALSYM GL_INTENSITY8_EXT}
  GL_INTENSITY12_EXT = $804C;
  {$EXTERNALSYM GL_INTENSITY12_EXT}
  GL_INTENSITY16_EXT = $804D;
  {$EXTERNALSYM GL_INTENSITY16_EXT}
  GL_RGB2_EXT = $804E;
  {$EXTERNALSYM GL_RGB2_EXT}
  GL_RGB4_EXT = $804F;
  {$EXTERNALSYM GL_RGB4_EXT}
  GL_RGB5_EXT = $8050;
  {$EXTERNALSYM GL_RGB5_EXT}
  GL_RGB8_EXT = $8051;
  {$EXTERNALSYM GL_RGB8_EXT}
  GL_RGB10_EXT = $8052;
  {$EXTERNALSYM GL_RGB10_EXT}
  GL_RGB12_EXT = $8053;
  {$EXTERNALSYM GL_RGB12_EXT}
  GL_RGB16_EXT = $8054;
  {$EXTERNALSYM GL_RGB16_EXT}
  GL_RGBA2_EXT = $8055;
  {$EXTERNALSYM GL_RGBA2_EXT}
  GL_RGBA4_EXT = $8056;
  {$EXTERNALSYM GL_RGBA4_EXT}
  GL_RGB5_A1_EXT = $8057;
  {$EXTERNALSYM GL_RGB5_A1_EXT}
  GL_RGBA8_EXT = $8058;
  {$EXTERNALSYM GL_RGBA8_EXT}
  GL_RGB10_A2_EXT = $8059;
  {$EXTERNALSYM GL_RGB10_A2_EXT}
  GL_RGBA12_EXT = $805A;
  {$EXTERNALSYM GL_RGBA12_EXT}
  GL_RGBA16_EXT = $805B;
  {$EXTERNALSYM GL_RGBA16_EXT}
  GL_TEXTURE_RED_SIZE_EXT = $805C;
  {$EXTERNALSYM GL_TEXTURE_RED_SIZE_EXT}
  GL_TEXTURE_GREEN_SIZE_EXT = $805D;
  {$EXTERNALSYM GL_TEXTURE_GREEN_SIZE_EXT}
  GL_TEXTURE_BLUE_SIZE_EXT = $805E;
  {$EXTERNALSYM GL_TEXTURE_BLUE_SIZE_EXT}
  GL_TEXTURE_ALPHA_SIZE_EXT = $805F;
  {$EXTERNALSYM GL_TEXTURE_ALPHA_SIZE_EXT}
  GL_TEXTURE_LUMINANCE_SIZE_EXT = $8060;
  {$EXTERNALSYM GL_TEXTURE_LUMINANCE_SIZE_EXT}
  GL_TEXTURE_INTENSITY_SIZE_EXT = $8061;
  {$EXTERNALSYM GL_TEXTURE_INTENSITY_SIZE_EXT}
  GL_REPLACE_EXT = $8062;
  {$EXTERNALSYM GL_REPLACE_EXT}
  GL_PROXY_TEXTURE_1D_EXT = $8063;
  {$EXTERNALSYM GL_PROXY_TEXTURE_1D_EXT}
  GL_PROXY_TEXTURE_2D_EXT = $8064;
  {$EXTERNALSYM GL_PROXY_TEXTURE_2D_EXT}
  GL_TEXTURE_TOO_LARGE_EXT = $8065;
  {$EXTERNALSYM GL_TEXTURE_TOO_LARGE_EXT}

{ GL_EXT_texture3D }
  GL_PACK_SKIP_IMAGES_EXT = $806B;
  {$EXTERNALSYM GL_PACK_SKIP_IMAGES_EXT}
  GL_PACK_IMAGE_HEIGHT_EXT = $806C;
  {$EXTERNALSYM GL_PACK_IMAGE_HEIGHT_EXT}
  GL_UNPACK_SKIP_IMAGES_EXT = $806D;
  {$EXTERNALSYM GL_UNPACK_SKIP_IMAGES_EXT}
  GL_UNPACK_IMAGE_HEIGHT_EXT = $806E;
  {$EXTERNALSYM GL_UNPACK_IMAGE_HEIGHT_EXT}
  GL_TEXTURE_3D_EXT = $806F;
  {$EXTERNALSYM GL_TEXTURE_3D_EXT}
  GL_PROXY_TEXTURE_3D_EXT = $8070;
  {$EXTERNALSYM GL_PROXY_TEXTURE_3D_EXT}
  GL_TEXTURE_DEPTH_EXT = $8071;
  {$EXTERNALSYM GL_TEXTURE_DEPTH_EXT}
  GL_TEXTURE_WRAP_R_EXT = $8072;
  {$EXTERNALSYM GL_TEXTURE_WRAP_R_EXT}
  GL_MAX_3D_TEXTURE_SIZE_EXT = $8073;
  {$EXTERNALSYM GL_MAX_3D_TEXTURE_SIZE_EXT}

{ GL_EXT_texture_array }
  GL_TEXTURE_1D_ARRAY_EXT = $8C18;
  {$EXTERNALSYM GL_TEXTURE_1D_ARRAY_EXT}
  GL_PROXY_TEXTURE_1D_ARRAY_EXT = $8C19;
  {$EXTERNALSYM GL_PROXY_TEXTURE_1D_ARRAY_EXT}
  GL_TEXTURE_2D_ARRAY_EXT = $8C1A;
  {$EXTERNALSYM GL_TEXTURE_2D_ARRAY_EXT}
  GL_PROXY_TEXTURE_2D_ARRAY_EXT = $8C1B;
  {$EXTERNALSYM GL_PROXY_TEXTURE_2D_ARRAY_EXT}
  GL_TEXTURE_BINDING_1D_ARRAY_EXT = $8C1C;
  {$EXTERNALSYM GL_TEXTURE_BINDING_1D_ARRAY_EXT}
  GL_TEXTURE_BINDING_2D_ARRAY_EXT = $8C1D;
  {$EXTERNALSYM GL_TEXTURE_BINDING_2D_ARRAY_EXT}
  GL_MAX_ARRAY_TEXTURE_LAYERS_EXT = $88FF;
  {$EXTERNALSYM GL_MAX_ARRAY_TEXTURE_LAYERS_EXT}
  GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT = $884E;
  {$EXTERNALSYM GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT}

{ GL_EXT_texture_buffer_object }
  GL_TEXTURE_BUFFER_EXT = $8C2A;
  {$EXTERNALSYM GL_TEXTURE_BUFFER_EXT}
  GL_MAX_TEXTURE_BUFFER_SIZE_EXT = $8C2B;
  {$EXTERNALSYM GL_MAX_TEXTURE_BUFFER_SIZE_EXT}
  GL_TEXTURE_BINDING_BUFFER_EXT = $8C2C;
  {$EXTERNALSYM GL_TEXTURE_BINDING_BUFFER_EXT}
  GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = $8C2D;
  {$EXTERNALSYM GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT}
  GL_TEXTURE_BUFFER_FORMAT_EXT = $8C2E;
  {$EXTERNALSYM GL_TEXTURE_BUFFER_FORMAT_EXT}

{ GL_EXT_texture_compression_latc }
  GL_COMPRESSED_LUMINANCE_LATC1_EXT = $8C70;
  {$EXTERNALSYM GL_COMPRESSED_LUMINANCE_LATC1_EXT}
  GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = $8C71;
  {$EXTERNALSYM GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT}
  GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = $8C72;
  {$EXTERNALSYM GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT}
  GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = $8C73;
  {$EXTERNALSYM GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT}

{ GL_EXT_texture_compression_rgtc }
  GL_COMPRESSED_RED_RGTC1_EXT = $8DBB;
  {$EXTERNALSYM GL_COMPRESSED_RED_RGTC1_EXT}
  GL_COMPRESSED_SIGNED_RED_RGTC1_EXT = $8DBC;
  {$EXTERNALSYM GL_COMPRESSED_SIGNED_RED_RGTC1_EXT}
  GL_COMPRESSED_RED_GREEN_RGTC2_EXT = $8DBD;
  {$EXTERNALSYM GL_COMPRESSED_RED_GREEN_RGTC2_EXT}
  GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = $8DBE;
  {$EXTERNALSYM GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}

{ GL_EXT_texture_compression_s3tc }
  GL_COMPRESSED_RGB_S3TC_DXT1_EXT = $83F0;
  {$EXTERNALSYM GL_COMPRESSED_RGB_S3TC_DXT1_EXT}
  GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = $83F1;
  {$EXTERNALSYM GL_COMPRESSED_RGBA_S3TC_DXT1_EXT}
  GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = $83F2;
  {$EXTERNALSYM GL_COMPRESSED_RGBA_S3TC_DXT3_EXT}
  GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = $83F3;
  {$EXTERNALSYM GL_COMPRESSED_RGBA_S3TC_DXT5_EXT}

{ GL_EXT_texture_cube_map }
  GL_NORMAL_MAP_EXT = $8511;
  {$EXTERNALSYM GL_NORMAL_MAP_EXT}
  GL_REFLECTION_MAP_EXT = $8512;
  {$EXTERNALSYM GL_REFLECTION_MAP_EXT}
  GL_TEXTURE_CUBE_MAP_EXT = $8513;
  {$EXTERNALSYM GL_TEXTURE_CUBE_MAP_EXT}
  GL_TEXTURE_BINDING_CUBE_MAP_EXT = $8514;
  {$EXTERNALSYM GL_TEXTURE_BINDING_CUBE_MAP_EXT}
  GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT = $8515;
  {$EXTERNALSYM GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT}
  GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = $8516;
  {$EXTERNALSYM GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT}
  GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = $8517;
  {$EXTERNALSYM GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT}
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = $8518;
  {$EXTERNALSYM GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT}
  GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = $8519;
  {$EXTERNALSYM GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT}
  GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = $851A;
  {$EXTERNALSYM GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT}
  GL_PROXY_TEXTURE_CUBE_MAP_EXT = $851B;
  {$EXTERNALSYM GL_PROXY_TEXTURE_CUBE_MAP_EXT}
  GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT = $851C;
  {$EXTERNALSYM GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT}

{ GL_EXT_texture_env_add }

{ GL_EXT_texture_env_combine }
  GL_COMBINE_EXT = $8570;
  {$EXTERNALSYM GL_COMBINE_EXT}
  GL_COMBINE_RGB_EXT = $8571;
  {$EXTERNALSYM GL_COMBINE_RGB_EXT}
  GL_COMBINE_ALPHA_EXT = $8572;
  {$EXTERNALSYM GL_COMBINE_ALPHA_EXT}
  GL_RGB_SCALE_EXT = $8573;
  {$EXTERNALSYM GL_RGB_SCALE_EXT}
  GL_ADD_SIGNED_EXT = $8574;
  {$EXTERNALSYM GL_ADD_SIGNED_EXT}
  GL_INTERPOLATE_EXT = $8575;
  {$EXTERNALSYM GL_INTERPOLATE_EXT}
  GL_CONSTANT_EXT = $8576;
  {$EXTERNALSYM GL_CONSTANT_EXT}
  GL_PRIMARY_COLOR_EXT = $8577;
  {$EXTERNALSYM GL_PRIMARY_COLOR_EXT}
  GL_PREVIOUS_EXT = $8578;
  {$EXTERNALSYM GL_PREVIOUS_EXT}
  GL_SOURCE0_RGB_EXT = $8580;
  {$EXTERNALSYM GL_SOURCE0_RGB_EXT}
  GL_SOURCE1_RGB_EXT = $8581;
  {$EXTERNALSYM GL_SOURCE1_RGB_EXT}
  GL_SOURCE2_RGB_EXT = $8582;
  {$EXTERNALSYM GL_SOURCE2_RGB_EXT}
  GL_SOURCE0_ALPHA_EXT = $8588;
  {$EXTERNALSYM GL_SOURCE0_ALPHA_EXT}
  GL_SOURCE1_ALPHA_EXT = $8589;
  {$EXTERNALSYM GL_SOURCE1_ALPHA_EXT}
  GL_SOURCE2_ALPHA_EXT = $858A;
  {$EXTERNALSYM GL_SOURCE2_ALPHA_EXT}
  GL_OPERAND0_RGB_EXT = $8590;
  {$EXTERNALSYM GL_OPERAND0_RGB_EXT}
  GL_OPERAND1_RGB_EXT = $8591;
  {$EXTERNALSYM GL_OPERAND1_RGB_EXT}
  GL_OPERAND2_RGB_EXT = $8592;
  {$EXTERNALSYM GL_OPERAND2_RGB_EXT}
  GL_OPERAND0_ALPHA_EXT = $8598;
  {$EXTERNALSYM GL_OPERAND0_ALPHA_EXT}
  GL_OPERAND1_ALPHA_EXT = $8599;
  {$EXTERNALSYM GL_OPERAND1_ALPHA_EXT}
  GL_OPERAND2_ALPHA_EXT = $859A;
  {$EXTERNALSYM GL_OPERAND2_ALPHA_EXT}

{ GL_EXT_texture_env_dot3 }
  GL_DOT3_RGB_EXT = $8740;
  {$EXTERNALSYM GL_DOT3_RGB_EXT}
  GL_DOT3_RGBA_EXT = $8741;
  {$EXTERNALSYM GL_DOT3_RGBA_EXT}

{ GL_EXT_texture_filter_anisotropic }
  GL_TEXTURE_MAX_ANISOTROPY_EXT = $84FE;
  {$EXTERNALSYM GL_TEXTURE_MAX_ANISOTROPY_EXT}
  GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = $84FF;
  {$EXTERNALSYM GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT}

{ GL_EXT_texture_integer }
  GL_RGBA32UI_EXT = $8D70;
  {$EXTERNALSYM GL_RGBA32UI_EXT}
  GL_RGB32UI_EXT = $8D71;
  {$EXTERNALSYM GL_RGB32UI_EXT}
  GL_ALPHA32UI_EXT = $8D72;
  {$EXTERNALSYM GL_ALPHA32UI_EXT}
  GL_INTENSITY32UI_EXT = $8D73;
  {$EXTERNALSYM GL_INTENSITY32UI_EXT}
  GL_LUMINANCE32UI_EXT = $8D74;
  {$EXTERNALSYM GL_LUMINANCE32UI_EXT}
  GL_LUMINANCE_ALPHA32UI_EXT = $8D75;
  {$EXTERNALSYM GL_LUMINANCE_ALPHA32UI_EXT}
  GL_RGBA16UI_EXT = $8D76;
  {$EXTERNALSYM GL_RGBA16UI_EXT}
  GL_RGB16UI_EXT = $8D77;
  {$EXTERNALSYM GL_RGB16UI_EXT}
  GL_ALPHA16UI_EXT = $8D78;
  {$EXTERNALSYM GL_ALPHA16UI_EXT}
  GL_INTENSITY16UI_EXT = $8D79;
  {$EXTERNALSYM GL_INTENSITY16UI_EXT}
  GL_LUMINANCE16UI_EXT = $8D7A;
  {$EXTERNALSYM GL_LUMINANCE16UI_EXT}
  GL_LUMINANCE_ALPHA16UI_EXT = $8D7B;
  {$EXTERNALSYM GL_LUMINANCE_ALPHA16UI_EXT}
  GL_RGBA8UI_EXT = $8D7C;
  {$EXTERNALSYM GL_RGBA8UI_EXT}
  GL_RGB8UI_EXT = $8D7D;
  {$EXTERNALSYM GL_RGB8UI_EXT}
  GL_ALPHA8UI_EXT = $8D7E;
  {$EXTERNALSYM GL_ALPHA8UI_EXT}
  GL_INTENSITY8UI_EXT = $8D7F;
  {$EXTERNALSYM GL_INTENSITY8UI_EXT}
  GL_LUMINANCE8UI_EXT = $8D80;
  {$EXTERNALSYM GL_LUMINANCE8UI_EXT}
  GL_LUMINANCE_ALPHA8UI_EXT = $8D81;
  {$EXTERNALSYM GL_LUMINANCE_ALPHA8UI_EXT}
  GL_RGBA32I_EXT = $8D82;
  {$EXTERNALSYM GL_RGBA32I_EXT}
  GL_RGB32I_EXT = $8D83;
  {$EXTERNALSYM GL_RGB32I_EXT}
  GL_ALPHA32I_EXT = $8D84;
  {$EXTERNALSYM GL_ALPHA32I_EXT}
  GL_INTENSITY32I_EXT = $8D85;
  {$EXTERNALSYM GL_INTENSITY32I_EXT}
  GL_LUMINANCE32I_EXT = $8D86;
  {$EXTERNALSYM GL_LUMINANCE32I_EXT}
  GL_LUMINANCE_ALPHA32I_EXT = $8D87;
  {$EXTERNALSYM GL_LUMINANCE_ALPHA32I_EXT}
  GL_RGBA16I_EXT = $8D88;
  {$EXTERNALSYM GL_RGBA16I_EXT}
  GL_RGB16I_EXT = $8D89;
  {$EXTERNALSYM GL_RGB16I_EXT}
  GL_ALPHA16I_EXT = $8D8A;
  {$EXTERNALSYM GL_ALPHA16I_EXT}
  GL_INTENSITY16I_EXT = $8D8B;
  {$EXTERNALSYM GL_INTENSITY16I_EXT}
  GL_LUMINANCE16I_EXT = $8D8C;
  {$EXTERNALSYM GL_LUMINANCE16I_EXT}
  GL_LUMINANCE_ALPHA16I_EXT = $8D8D;
  {$EXTERNALSYM GL_LUMINANCE_ALPHA16I_EXT}
  GL_RGBA8I_EXT = $8D8E;
  {$EXTERNALSYM GL_RGBA8I_EXT}
  GL_RGB8I_EXT = $8D8F;
  {$EXTERNALSYM GL_RGB8I_EXT}
  GL_ALPHA8I_EXT = $8D90;
  {$EXTERNALSYM GL_ALPHA8I_EXT}
  GL_INTENSITY8I_EXT = $8D91;
  {$EXTERNALSYM GL_INTENSITY8I_EXT}
  GL_LUMINANCE8I_EXT = $8D92;
  {$EXTERNALSYM GL_LUMINANCE8I_EXT}
  GL_LUMINANCE_ALPHA8I_EXT = $8D93;
  {$EXTERNALSYM GL_LUMINANCE_ALPHA8I_EXT}
  GL_RED_INTEGER_EXT = $8D94;
  {$EXTERNALSYM GL_RED_INTEGER_EXT}
  GL_GREEN_INTEGER_EXT = $8D95;
  {$EXTERNALSYM GL_GREEN_INTEGER_EXT}
  GL_BLUE_INTEGER_EXT = $8D96;
  {$EXTERNALSYM GL_BLUE_INTEGER_EXT}
  GL_ALPHA_INTEGER_EXT = $8D97;
  {$EXTERNALSYM GL_ALPHA_INTEGER_EXT}
  GL_RGB_INTEGER_EXT = $8D98;
  {$EXTERNALSYM GL_RGB_INTEGER_EXT}
  GL_RGBA_INTEGER_EXT = $8D99;
  {$EXTERNALSYM GL_RGBA_INTEGER_EXT}
  GL_BGR_INTEGER_EXT = $8D9A;
  {$EXTERNALSYM GL_BGR_INTEGER_EXT}
  GL_BGRA_INTEGER_EXT = $8D9B;
  {$EXTERNALSYM GL_BGRA_INTEGER_EXT}
  GL_LUMINANCE_INTEGER_EXT = $8D9C;
  {$EXTERNALSYM GL_LUMINANCE_INTEGER_EXT}
  GL_LUMINANCE_ALPHA_INTEGER_EXT = $8D9D;
  {$EXTERNALSYM GL_LUMINANCE_ALPHA_INTEGER_EXT}
  GL_RGBA_INTEGER_MODE_EXT = $8D9E;
  {$EXTERNALSYM GL_RGBA_INTEGER_MODE_EXT}

{ GL_EXT_texture_lod_bias }
  GL_MAX_TEXTURE_LOD_BIAS_EXT = $84FD;
  {$EXTERNALSYM GL_MAX_TEXTURE_LOD_BIAS_EXT}
  GL_TEXTURE_FILTER_CONTROL_EXT = $8500;
  {$EXTERNALSYM GL_TEXTURE_FILTER_CONTROL_EXT}
  GL_TEXTURE_LOD_BIAS_EXT = $8501;
  {$EXTERNALSYM GL_TEXTURE_LOD_BIAS_EXT}

{ GL_EXT_texture_mirror_clamp }
  GL_MIRROR_CLAMP_EXT = $8742;
  {$EXTERNALSYM GL_MIRROR_CLAMP_EXT}
  GL_MIRROR_CLAMP_TO_EDGE_EXT = $8743;
  {$EXTERNALSYM GL_MIRROR_CLAMP_TO_EDGE_EXT}
  GL_MIRROR_CLAMP_TO_BORDER_EXT = $8912;
  {$EXTERNALSYM GL_MIRROR_CLAMP_TO_BORDER_EXT}

{ GL_EXT_texture_object }
  GL_TEXTURE_PRIORITY_EXT = $8066;
  {$EXTERNALSYM GL_TEXTURE_PRIORITY_EXT}
  GL_TEXTURE_RESIDENT_EXT = $8067;
  {$EXTERNALSYM GL_TEXTURE_RESIDENT_EXT}
  GL_TEXTURE_1D_BINDING_EXT = $8068;
  {$EXTERNALSYM GL_TEXTURE_1D_BINDING_EXT}
  GL_TEXTURE_2D_BINDING_EXT = $8069;
  {$EXTERNALSYM GL_TEXTURE_2D_BINDING_EXT}
  GL_TEXTURE_3D_BINDING_EXT = $806A;
  {$EXTERNALSYM GL_TEXTURE_3D_BINDING_EXT}

{ GL_EXT_texture_perturb_normal }
  GL_PERTURB_EXT = $85AE;
  {$EXTERNALSYM GL_PERTURB_EXT}
  GL_TEXTURE_NORMAL_EXT = $85AF;
  {$EXTERNALSYM GL_TEXTURE_NORMAL_EXT}

{ GL_EXT_texture_sRGB }
  GL_SRGB_EXT = $8C40;
  {$EXTERNALSYM GL_SRGB_EXT}
  GL_SRGB8_EXT = $8C41;
  {$EXTERNALSYM GL_SRGB8_EXT}
  GL_SRGB_ALPHA_EXT = $8C42;
  {$EXTERNALSYM GL_SRGB_ALPHA_EXT}
  GL_SRGB8_ALPHA8_EXT = $8C43;
  {$EXTERNALSYM GL_SRGB8_ALPHA8_EXT}
  GL_SLUMINANCE_ALPHA_EXT = $8C44;
  {$EXTERNALSYM GL_SLUMINANCE_ALPHA_EXT}
  GL_SLUMINANCE8_ALPHA8_EXT = $8C45;
  {$EXTERNALSYM GL_SLUMINANCE8_ALPHA8_EXT}
  GL_SLUMINANCE_EXT = $8C46;
  {$EXTERNALSYM GL_SLUMINANCE_EXT}
  GL_SLUMINANCE8_EXT = $8C47;
  {$EXTERNALSYM GL_SLUMINANCE8_EXT}
  GL_COMPRESSED_SRGB_EXT = $8C48;
  {$EXTERNALSYM GL_COMPRESSED_SRGB_EXT}
  GL_COMPRESSED_SRGB_ALPHA_EXT = $8C49;
  {$EXTERNALSYM GL_COMPRESSED_SRGB_ALPHA_EXT}
  GL_COMPRESSED_SLUMINANCE_EXT = $8C4A;
  {$EXTERNALSYM GL_COMPRESSED_SLUMINANCE_EXT}
  GL_COMPRESSED_SLUMINANCE_ALPHA_EXT = $8C4B;
  {$EXTERNALSYM GL_COMPRESSED_SLUMINANCE_ALPHA_EXT}
  GL_COMPRESSED_SRGB_S3TC_DXT1_EXT = $8C4C;
  {$EXTERNALSYM GL_COMPRESSED_SRGB_S3TC_DXT1_EXT}
  GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = $8C4D;
  {$EXTERNALSYM GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT}
  GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = $8C4E;
  {$EXTERNALSYM GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT}
  GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = $8C4F;
  {$EXTERNALSYM GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}

{ GL_EXT_texture_sRGB_decode }
  GL_TEXTURE_SRGB_DECODE_EXT = $8A48;
  {$EXTERNALSYM GL_TEXTURE_SRGB_DECODE_EXT}
  GL_DECODE_EXT = $8A49;
  {$EXTERNALSYM GL_DECODE_EXT}
  GL_SKIP_DECODE_EXT = $8A4A;
  {$EXTERNALSYM GL_SKIP_DECODE_EXT}

{ GL_EXT_texture_shared_exponent }
  GL_RGB9_E5_EXT = $8C3D;
  {$EXTERNALSYM GL_RGB9_E5_EXT}
  GL_UNSIGNED_INT_5_9_9_9_REV_EXT = $8C3E;
  {$EXTERNALSYM GL_UNSIGNED_INT_5_9_9_9_REV_EXT}
  GL_TEXTURE_SHARED_SIZE_EXT = $8C3F;
  {$EXTERNALSYM GL_TEXTURE_SHARED_SIZE_EXT}

{ GL_EXT_texture_snorm }
  GL_ALPHA_SNORM = $9010;
  {$EXTERNALSYM GL_ALPHA_SNORM}
  GL_LUMINANCE_SNORM = $9011;
  {$EXTERNALSYM GL_LUMINANCE_SNORM}
  GL_LUMINANCE_ALPHA_SNORM = $9012;
  {$EXTERNALSYM GL_LUMINANCE_ALPHA_SNORM}
  GL_INTENSITY_SNORM = $9013;
  {$EXTERNALSYM GL_INTENSITY_SNORM}
  GL_ALPHA8_SNORM = $9014;
  {$EXTERNALSYM GL_ALPHA8_SNORM}
  GL_LUMINANCE8_SNORM = $9015;
  {$EXTERNALSYM GL_LUMINANCE8_SNORM}
  GL_LUMINANCE8_ALPHA8_SNORM = $9016;
  {$EXTERNALSYM GL_LUMINANCE8_ALPHA8_SNORM}
  GL_INTENSITY8_SNORM = $9017;
  {$EXTERNALSYM GL_INTENSITY8_SNORM}
  GL_ALPHA16_SNORM = $9018;
  {$EXTERNALSYM GL_ALPHA16_SNORM}
  GL_LUMINANCE16_SNORM = $9019;
  {$EXTERNALSYM GL_LUMINANCE16_SNORM}
  GL_LUMINANCE16_ALPHA16_SNORM = $901A;
  {$EXTERNALSYM GL_LUMINANCE16_ALPHA16_SNORM}
  GL_INTENSITY16_SNORM = $901B;
  {$EXTERNALSYM GL_INTENSITY16_SNORM}
  GL_RED_SNORM = $8F90;
  {$EXTERNALSYM GL_RED_SNORM}
  GL_RG_SNORM = $8F91;
  {$EXTERNALSYM GL_RG_SNORM}
  GL_RGB_SNORM = $8F92;
  {$EXTERNALSYM GL_RGB_SNORM}
  GL_RGBA_SNORM = $8F93;
  {$EXTERNALSYM GL_RGBA_SNORM}

{ GL_EXT_texture_swizzle }
  GL_TEXTURE_SWIZZLE_R_EXT = $8E42;
  {$EXTERNALSYM GL_TEXTURE_SWIZZLE_R_EXT}
  GL_TEXTURE_SWIZZLE_G_EXT = $8E43;
  {$EXTERNALSYM GL_TEXTURE_SWIZZLE_G_EXT}
  GL_TEXTURE_SWIZZLE_B_EXT = $8E44;
  {$EXTERNALSYM GL_TEXTURE_SWIZZLE_B_EXT}
  GL_TEXTURE_SWIZZLE_A_EXT = $8E45;
  {$EXTERNALSYM GL_TEXTURE_SWIZZLE_A_EXT}
  GL_TEXTURE_SWIZZLE_RGBA_EXT = $8E46;
  {$EXTERNALSYM GL_TEXTURE_SWIZZLE_RGBA_EXT}

{ GL_EXT_timer_query }
  GL_TIME_ELAPSED_EXT = $88BF;
  {$EXTERNALSYM GL_TIME_ELAPSED_EXT}

{ GL_EXT_transform_feedback }
  GL_TRANSFORM_FEEDBACK_BUFFER_EXT = $8C8E;
  {$EXTERNALSYM GL_TRANSFORM_FEEDBACK_BUFFER_EXT}
  GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT = $8C84;
  {$EXTERNALSYM GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT}
  GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT = $8C85;
  {$EXTERNALSYM GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT}
  GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT = $8C8F;
  {$EXTERNALSYM GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT}
  GL_INTERLEAVED_ATTRIBS_EXT = $8C8C;
  {$EXTERNALSYM GL_INTERLEAVED_ATTRIBS_EXT}
  GL_SEPARATE_ATTRIBS_EXT = $8C8D;
  {$EXTERNALSYM GL_SEPARATE_ATTRIBS_EXT}
  GL_PRIMITIVES_GENERATED_EXT = $8C87;
  {$EXTERNALSYM GL_PRIMITIVES_GENERATED_EXT}
  GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT = $8C88;
  {$EXTERNALSYM GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT}
  GL_RASTERIZER_DISCARD_EXT = $8C89;
  {$EXTERNALSYM GL_RASTERIZER_DISCARD_EXT}
  GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT = $8C8A;
  {$EXTERNALSYM GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT}
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT = $8C8B;
  {$EXTERNALSYM GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT}
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT = $8C80;
  {$EXTERNALSYM GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT}
  GL_TRANSFORM_FEEDBACK_VARYINGS_EXT = $8C83;
  {$EXTERNALSYM GL_TRANSFORM_FEEDBACK_VARYINGS_EXT}
  GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT = $8C7F;
  {$EXTERNALSYM GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT}
  GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT = $8C76;
  {$EXTERNALSYM GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT}

{ GL_EXT_vertex_array }
  GL_VERTEX_ARRAY_EXT = $8074;
  {$EXTERNALSYM GL_VERTEX_ARRAY_EXT}
  GL_NORMAL_ARRAY_EXT = $8075;
  {$EXTERNALSYM GL_NORMAL_ARRAY_EXT}
  GL_COLOR_ARRAY_EXT = $8076;
  {$EXTERNALSYM GL_COLOR_ARRAY_EXT}
  GL_INDEX_ARRAY_EXT = $8077;
  {$EXTERNALSYM GL_INDEX_ARRAY_EXT}
  GL_TEXTURE_COORD_ARRAY_EXT = $8078;
  {$EXTERNALSYM GL_TEXTURE_COORD_ARRAY_EXT}
  GL_EDGE_FLAG_ARRAY_EXT = $8079;
  {$EXTERNALSYM GL_EDGE_FLAG_ARRAY_EXT}
  GL_VERTEX_ARRAY_SIZE_EXT = $807A;
  {$EXTERNALSYM GL_VERTEX_ARRAY_SIZE_EXT}
  GL_VERTEX_ARRAY_TYPE_EXT = $807B;
  {$EXTERNALSYM GL_VERTEX_ARRAY_TYPE_EXT}
  GL_VERTEX_ARRAY_STRIDE_EXT = $807C;
  {$EXTERNALSYM GL_VERTEX_ARRAY_STRIDE_EXT}
  GL_VERTEX_ARRAY_COUNT_EXT = $807D;
  {$EXTERNALSYM GL_VERTEX_ARRAY_COUNT_EXT}
  GL_NORMAL_ARRAY_TYPE_EXT = $807E;
  {$EXTERNALSYM GL_NORMAL_ARRAY_TYPE_EXT}
  GL_NORMAL_ARRAY_STRIDE_EXT = $807F;
  {$EXTERNALSYM GL_NORMAL_ARRAY_STRIDE_EXT}
  GL_NORMAL_ARRAY_COUNT_EXT = $8080;
  {$EXTERNALSYM GL_NORMAL_ARRAY_COUNT_EXT}
  GL_COLOR_ARRAY_SIZE_EXT = $8081;
  {$EXTERNALSYM GL_COLOR_ARRAY_SIZE_EXT}
  GL_COLOR_ARRAY_TYPE_EXT = $8082;
  {$EXTERNALSYM GL_COLOR_ARRAY_TYPE_EXT}
  GL_COLOR_ARRAY_STRIDE_EXT = $8083;
  {$EXTERNALSYM GL_COLOR_ARRAY_STRIDE_EXT}
  GL_COLOR_ARRAY_COUNT_EXT = $8084;
  {$EXTERNALSYM GL_COLOR_ARRAY_COUNT_EXT}
  GL_INDEX_ARRAY_TYPE_EXT = $8085;
  {$EXTERNALSYM GL_INDEX_ARRAY_TYPE_EXT}
  GL_INDEX_ARRAY_STRIDE_EXT = $8086;
  {$EXTERNALSYM GL_INDEX_ARRAY_STRIDE_EXT}
  GL_INDEX_ARRAY_COUNT_EXT = $8087;
  {$EXTERNALSYM GL_INDEX_ARRAY_COUNT_EXT}
  GL_TEXTURE_COORD_ARRAY_SIZE_EXT = $8088;
  {$EXTERNALSYM GL_TEXTURE_COORD_ARRAY_SIZE_EXT}
  GL_TEXTURE_COORD_ARRAY_TYPE_EXT = $8089;
  {$EXTERNALSYM GL_TEXTURE_COORD_ARRAY_TYPE_EXT}
  GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = $808A;
  {$EXTERNALSYM GL_TEXTURE_COORD_ARRAY_STRIDE_EXT}
  GL_TEXTURE_COORD_ARRAY_COUNT_EXT = $808B;
  {$EXTERNALSYM GL_TEXTURE_COORD_ARRAY_COUNT_EXT}
  GL_EDGE_FLAG_ARRAY_STRIDE_EXT = $808C;
  {$EXTERNALSYM GL_EDGE_FLAG_ARRAY_STRIDE_EXT}
  GL_EDGE_FLAG_ARRAY_COUNT_EXT = $808D;
  {$EXTERNALSYM GL_EDGE_FLAG_ARRAY_COUNT_EXT}
  GL_VERTEX_ARRAY_POINTER_EXT = $808E;
  {$EXTERNALSYM GL_VERTEX_ARRAY_POINTER_EXT}
  GL_NORMAL_ARRAY_POINTER_EXT = $808F;
  {$EXTERNALSYM GL_NORMAL_ARRAY_POINTER_EXT}
  GL_COLOR_ARRAY_POINTER_EXT = $8090;
  {$EXTERNALSYM GL_COLOR_ARRAY_POINTER_EXT}
  GL_INDEX_ARRAY_POINTER_EXT = $8091;
  {$EXTERNALSYM GL_INDEX_ARRAY_POINTER_EXT}
  GL_TEXTURE_COORD_ARRAY_POINTER_EXT = $8092;
  {$EXTERNALSYM GL_TEXTURE_COORD_ARRAY_POINTER_EXT}
  GL_EDGE_FLAG_ARRAY_POINTER_EXT = $8093;
  {$EXTERNALSYM GL_EDGE_FLAG_ARRAY_POINTER_EXT}

{ GL_EXT_vertex_array_bgra }

{ GL_EXT_vertex_attrib_64bit }
  GL_DOUBLE_VEC2_EXT = $8FFC;
  {$EXTERNALSYM GL_DOUBLE_VEC2_EXT}
  GL_DOUBLE_VEC3_EXT = $8FFD;
  {$EXTERNALSYM GL_DOUBLE_VEC3_EXT}
  GL_DOUBLE_VEC4_EXT = $8FFE;
  {$EXTERNALSYM GL_DOUBLE_VEC4_EXT}
  GL_DOUBLE_MAT2_EXT = $8F46;
  {$EXTERNALSYM GL_DOUBLE_MAT2_EXT}
  GL_DOUBLE_MAT3_EXT = $8F47;
  {$EXTERNALSYM GL_DOUBLE_MAT3_EXT}
  GL_DOUBLE_MAT4_EXT = $8F48;
  {$EXTERNALSYM GL_DOUBLE_MAT4_EXT}
  GL_DOUBLE_MAT2x3_EXT = $8F49;
  {$EXTERNALSYM GL_DOUBLE_MAT2x3_EXT}
  GL_DOUBLE_MAT2x4_EXT = $8F4A;
  {$EXTERNALSYM GL_DOUBLE_MAT2x4_EXT}
  GL_DOUBLE_MAT3x2_EXT = $8F4B;
  {$EXTERNALSYM GL_DOUBLE_MAT3x2_EXT}
  GL_DOUBLE_MAT3x4_EXT = $8F4C;
  {$EXTERNALSYM GL_DOUBLE_MAT3x4_EXT}
  GL_DOUBLE_MAT4x2_EXT = $8F4D;
  {$EXTERNALSYM GL_DOUBLE_MAT4x2_EXT}
  GL_DOUBLE_MAT4x3_EXT = $8F4E;
  {$EXTERNALSYM GL_DOUBLE_MAT4x3_EXT}

{ GL_EXT_vertex_shader }
  GL_VERTEX_SHADER_EXT = $8780;
  {$EXTERNALSYM GL_VERTEX_SHADER_EXT}
  GL_VERTEX_SHADER_BINDING_EXT = $8781;
  {$EXTERNALSYM GL_VERTEX_SHADER_BINDING_EXT}
  GL_OP_INDEX_EXT = $8782;
  {$EXTERNALSYM GL_OP_INDEX_EXT}
  GL_OP_NEGATE_EXT = $8783;
  {$EXTERNALSYM GL_OP_NEGATE_EXT}
  GL_OP_DOT3_EXT = $8784;
  {$EXTERNALSYM GL_OP_DOT3_EXT}
  GL_OP_DOT4_EXT = $8785;
  {$EXTERNALSYM GL_OP_DOT4_EXT}
  GL_OP_MUL_EXT = $8786;
  {$EXTERNALSYM GL_OP_MUL_EXT}
  GL_OP_ADD_EXT = $8787;
  {$EXTERNALSYM GL_OP_ADD_EXT}
  GL_OP_MADD_EXT = $8788;
  {$EXTERNALSYM GL_OP_MADD_EXT}
  GL_OP_FRAC_EXT = $8789;
  {$EXTERNALSYM GL_OP_FRAC_EXT}
  GL_OP_MAX_EXT = $878A;
  {$EXTERNALSYM GL_OP_MAX_EXT}
  GL_OP_MIN_EXT = $878B;
  {$EXTERNALSYM GL_OP_MIN_EXT}
  GL_OP_SET_GE_EXT = $878C;
  {$EXTERNALSYM GL_OP_SET_GE_EXT}
  GL_OP_SET_LT_EXT = $878D;
  {$EXTERNALSYM GL_OP_SET_LT_EXT}
  GL_OP_CLAMP_EXT = $878E;
  {$EXTERNALSYM GL_OP_CLAMP_EXT}
  GL_OP_FLOOR_EXT = $878F;
  {$EXTERNALSYM GL_OP_FLOOR_EXT}
  GL_OP_ROUND_EXT = $8790;
  {$EXTERNALSYM GL_OP_ROUND_EXT}
  GL_OP_EXP_BASE_2_EXT = $8791;
  {$EXTERNALSYM GL_OP_EXP_BASE_2_EXT}
  GL_OP_LOG_BASE_2_EXT = $8792;
  {$EXTERNALSYM GL_OP_LOG_BASE_2_EXT}
  GL_OP_POWER_EXT = $8793;
  {$EXTERNALSYM GL_OP_POWER_EXT}
  GL_OP_RECIP_EXT = $8794;
  {$EXTERNALSYM GL_OP_RECIP_EXT}
  GL_OP_RECIP_SQRT_EXT = $8795;
  {$EXTERNALSYM GL_OP_RECIP_SQRT_EXT}
  GL_OP_SUB_EXT = $8796;
  {$EXTERNALSYM GL_OP_SUB_EXT}
  GL_OP_CROSS_PRODUCT_EXT = $8797;
  {$EXTERNALSYM GL_OP_CROSS_PRODUCT_EXT}
  GL_OP_MULTIPLY_MATRIX_EXT = $8798;
  {$EXTERNALSYM GL_OP_MULTIPLY_MATRIX_EXT}
  GL_OP_MOV_EXT = $8799;
  {$EXTERNALSYM GL_OP_MOV_EXT}
  GL_OUTPUT_VERTEX_EXT = $879A;
  {$EXTERNALSYM GL_OUTPUT_VERTEX_EXT}
  GL_OUTPUT_COLOR0_EXT = $879B;
  {$EXTERNALSYM GL_OUTPUT_COLOR0_EXT}
  GL_OUTPUT_COLOR1_EXT = $879C;
  {$EXTERNALSYM GL_OUTPUT_COLOR1_EXT}
  GL_OUTPUT_TEXTURE_COORD0_EXT = $879D;
  {$EXTERNALSYM GL_OUTPUT_TEXTURE_COORD0_EXT}
  GL_OUTPUT_TEXTURE_COORD1_EXT = $879E;
  {$EXTERNALSYM GL_OUTPUT_TEXTURE_COORD1_EXT}
  GL_OUTPUT_TEXTURE_COORD2_EXT = $879F;
  {$EXTERNALSYM GL_OUTPUT_TEXTURE_COORD2_EXT}
  GL_OUTPUT_TEXTURE_COORD3_EXT = $87A0;
  {$EXTERNALSYM GL_OUTPUT_TEXTURE_COORD3_EXT}
  GL_OUTPUT_TEXTURE_COORD4_EXT = $87A1;
  {$EXTERNALSYM GL_OUTPUT_TEXTURE_COORD4_EXT}
  GL_OUTPUT_TEXTURE_COORD5_EXT = $87A2;
  {$EXTERNALSYM GL_OUTPUT_TEXTURE_COORD5_EXT}
  GL_OUTPUT_TEXTURE_COORD6_EXT = $87A3;
  {$EXTERNALSYM GL_OUTPUT_TEXTURE_COORD6_EXT}
  GL_OUTPUT_TEXTURE_COORD7_EXT = $87A4;
  {$EXTERNALSYM GL_OUTPUT_TEXTURE_COORD7_EXT}
  GL_OUTPUT_TEXTURE_COORD8_EXT = $87A5;
  {$EXTERNALSYM GL_OUTPUT_TEXTURE_COORD8_EXT}
  GL_OUTPUT_TEXTURE_COORD9_EXT = $87A6;
  {$EXTERNALSYM GL_OUTPUT_TEXTURE_COORD9_EXT}
  GL_OUTPUT_TEXTURE_COORD10_EXT = $87A7;
  {$EXTERNALSYM GL_OUTPUT_TEXTURE_COORD10_EXT}
  GL_OUTPUT_TEXTURE_COORD11_EXT = $87A8;
  {$EXTERNALSYM GL_OUTPUT_TEXTURE_COORD11_EXT}
  GL_OUTPUT_TEXTURE_COORD12_EXT = $87A9;
  {$EXTERNALSYM GL_OUTPUT_TEXTURE_COORD12_EXT}
  GL_OUTPUT_TEXTURE_COORD13_EXT = $87AA;
  {$EXTERNALSYM GL_OUTPUT_TEXTURE_COORD13_EXT}
  GL_OUTPUT_TEXTURE_COORD14_EXT = $87AB;
  {$EXTERNALSYM GL_OUTPUT_TEXTURE_COORD14_EXT}
  GL_OUTPUT_TEXTURE_COORD15_EXT = $87AC;
  {$EXTERNALSYM GL_OUTPUT_TEXTURE_COORD15_EXT}
  GL_OUTPUT_TEXTURE_COORD16_EXT = $87AD;
  {$EXTERNALSYM GL_OUTPUT_TEXTURE_COORD16_EXT}
  GL_OUTPUT_TEXTURE_COORD17_EXT = $87AE;
  {$EXTERNALSYM GL_OUTPUT_TEXTURE_COORD17_EXT}
  GL_OUTPUT_TEXTURE_COORD18_EXT = $87AF;
  {$EXTERNALSYM GL_OUTPUT_TEXTURE_COORD18_EXT}
  GL_OUTPUT_TEXTURE_COORD19_EXT = $87B0;
  {$EXTERNALSYM GL_OUTPUT_TEXTURE_COORD19_EXT}
  GL_OUTPUT_TEXTURE_COORD20_EXT = $87B1;
  {$EXTERNALSYM GL_OUTPUT_TEXTURE_COORD20_EXT}
  GL_OUTPUT_TEXTURE_COORD21_EXT = $87B2;
  {$EXTERNALSYM GL_OUTPUT_TEXTURE_COORD21_EXT}
  GL_OUTPUT_TEXTURE_COORD22_EXT = $87B3;
  {$EXTERNALSYM GL_OUTPUT_TEXTURE_COORD22_EXT}
  GL_OUTPUT_TEXTURE_COORD23_EXT = $87B4;
  {$EXTERNALSYM GL_OUTPUT_TEXTURE_COORD23_EXT}
  GL_OUTPUT_TEXTURE_COORD24_EXT = $87B5;
  {$EXTERNALSYM GL_OUTPUT_TEXTURE_COORD24_EXT}
  GL_OUTPUT_TEXTURE_COORD25_EXT = $87B6;
  {$EXTERNALSYM GL_OUTPUT_TEXTURE_COORD25_EXT}
  GL_OUTPUT_TEXTURE_COORD26_EXT = $87B7;
  {$EXTERNALSYM GL_OUTPUT_TEXTURE_COORD26_EXT}
  GL_OUTPUT_TEXTURE_COORD27_EXT = $87B8;
  {$EXTERNALSYM GL_OUTPUT_TEXTURE_COORD27_EXT}
  GL_OUTPUT_TEXTURE_COORD28_EXT = $87B9;
  {$EXTERNALSYM GL_OUTPUT_TEXTURE_COORD28_EXT}
  GL_OUTPUT_TEXTURE_COORD29_EXT = $87BA;
  {$EXTERNALSYM GL_OUTPUT_TEXTURE_COORD29_EXT}
  GL_OUTPUT_TEXTURE_COORD30_EXT = $87BB;
  {$EXTERNALSYM GL_OUTPUT_TEXTURE_COORD30_EXT}
  GL_OUTPUT_TEXTURE_COORD31_EXT = $87BC;
  {$EXTERNALSYM GL_OUTPUT_TEXTURE_COORD31_EXT}
  GL_OUTPUT_FOG_EXT = $87BD;
  {$EXTERNALSYM GL_OUTPUT_FOG_EXT}
  GL_SCALAR_EXT = $87BE;
  {$EXTERNALSYM GL_SCALAR_EXT}
  GL_VECTOR_EXT = $87BF;
  {$EXTERNALSYM GL_VECTOR_EXT}
  GL_MATRIX_EXT = $87C0;
  {$EXTERNALSYM GL_MATRIX_EXT}
  GL_VARIANT_EXT = $87C1;
  {$EXTERNALSYM GL_VARIANT_EXT}
  GL_INVARIANT_EXT = $87C2;
  {$EXTERNALSYM GL_INVARIANT_EXT}
  GL_LOCAL_CONSTANT_EXT = $87C3;
  {$EXTERNALSYM GL_LOCAL_CONSTANT_EXT}
  GL_LOCAL_EXT = $87C4;
  {$EXTERNALSYM GL_LOCAL_EXT}
  GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = $87C5;
  {$EXTERNALSYM GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT}
  GL_MAX_VERTEX_SHADER_VARIANTS_EXT = $87C6;
  {$EXTERNALSYM GL_MAX_VERTEX_SHADER_VARIANTS_EXT}
  GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = $87C7;
  {$EXTERNALSYM GL_MAX_VERTEX_SHADER_INVARIANTS_EXT}
  GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = $87C8;
  {$EXTERNALSYM GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT}
  GL_MAX_VERTEX_SHADER_LOCALS_EXT = $87C9;
  {$EXTERNALSYM GL_MAX_VERTEX_SHADER_LOCALS_EXT}
  GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = $87CA;
  {$EXTERNALSYM GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT}
  GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = $87CB;
  {$EXTERNALSYM GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT}
  GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = $87CC;
  {$EXTERNALSYM GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT}
  GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = $87CD;
  {$EXTERNALSYM GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT}
  GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = $87CE;
  {$EXTERNALSYM GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT}
  GL_VERTEX_SHADER_INSTRUCTIONS_EXT = $87CF;
  {$EXTERNALSYM GL_VERTEX_SHADER_INSTRUCTIONS_EXT}
  GL_VERTEX_SHADER_VARIANTS_EXT = $87D0;
  {$EXTERNALSYM GL_VERTEX_SHADER_VARIANTS_EXT}
  GL_VERTEX_SHADER_INVARIANTS_EXT = $87D1;
  {$EXTERNALSYM GL_VERTEX_SHADER_INVARIANTS_EXT}
  GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = $87D2;
  {$EXTERNALSYM GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT}
  GL_VERTEX_SHADER_LOCALS_EXT = $87D3;
  {$EXTERNALSYM GL_VERTEX_SHADER_LOCALS_EXT}
  GL_VERTEX_SHADER_OPTIMIZED_EXT = $87D4;
  {$EXTERNALSYM GL_VERTEX_SHADER_OPTIMIZED_EXT}
  GL_X_EXT = $87D5;
  {$EXTERNALSYM GL_X_EXT}
  GL_Y_EXT = $87D6;
  {$EXTERNALSYM GL_Y_EXT}
  GL_Z_EXT = $87D7;
  {$EXTERNALSYM GL_Z_EXT}
  GL_W_EXT = $87D8;
  {$EXTERNALSYM GL_W_EXT}
  GL_NEGATIVE_X_EXT = $87D9;
  {$EXTERNALSYM GL_NEGATIVE_X_EXT}
  GL_NEGATIVE_Y_EXT = $87DA;
  {$EXTERNALSYM GL_NEGATIVE_Y_EXT}
  GL_NEGATIVE_Z_EXT = $87DB;
  {$EXTERNALSYM GL_NEGATIVE_Z_EXT}
  GL_NEGATIVE_W_EXT = $87DC;
  {$EXTERNALSYM GL_NEGATIVE_W_EXT}
  GL_ZERO_EXT = $87DD;
  {$EXTERNALSYM GL_ZERO_EXT}
  GL_ONE_EXT = $87DE;
  {$EXTERNALSYM GL_ONE_EXT}
  GL_NEGATIVE_ONE_EXT = $87DF;
  {$EXTERNALSYM GL_NEGATIVE_ONE_EXT}
  GL_NORMALIZED_RANGE_EXT = $87E0;
  {$EXTERNALSYM GL_NORMALIZED_RANGE_EXT}
  GL_FULL_RANGE_EXT = $87E1;
  {$EXTERNALSYM GL_FULL_RANGE_EXT}
  GL_CURRENT_VERTEX_EXT = $87E2;
  {$EXTERNALSYM GL_CURRENT_VERTEX_EXT}
  GL_MVP_MATRIX_EXT = $87E3;
  {$EXTERNALSYM GL_MVP_MATRIX_EXT}
  GL_VARIANT_VALUE_EXT = $87E4;
  {$EXTERNALSYM GL_VARIANT_VALUE_EXT}
  GL_VARIANT_DATATYPE_EXT = $87E5;
  {$EXTERNALSYM GL_VARIANT_DATATYPE_EXT}
  GL_VARIANT_ARRAY_STRIDE_EXT = $87E6;
  {$EXTERNALSYM GL_VARIANT_ARRAY_STRIDE_EXT}
  GL_VARIANT_ARRAY_TYPE_EXT = $87E7;
  {$EXTERNALSYM GL_VARIANT_ARRAY_TYPE_EXT}
  GL_VARIANT_ARRAY_EXT = $87E8;
  {$EXTERNALSYM GL_VARIANT_ARRAY_EXT}
  GL_VARIANT_ARRAY_POINTER_EXT = $87E9;
  {$EXTERNALSYM GL_VARIANT_ARRAY_POINTER_EXT}
  GL_INVARIANT_VALUE_EXT = $87EA;
  {$EXTERNALSYM GL_INVARIANT_VALUE_EXT}
  GL_INVARIANT_DATATYPE_EXT = $87EB;
  {$EXTERNALSYM GL_INVARIANT_DATATYPE_EXT}
  GL_LOCAL_CONSTANT_VALUE_EXT = $87EC;
  {$EXTERNALSYM GL_LOCAL_CONSTANT_VALUE_EXT}
  GL_LOCAL_CONSTANT_DATATYPE_EXT = $87ED;
  {$EXTERNALSYM GL_LOCAL_CONSTANT_DATATYPE_EXT}

{ GL_EXT_vertex_weighting }
  GL_MODELVIEW0_STACK_DEPTH_EXT = $0BA3;
  {$EXTERNALSYM GL_MODELVIEW0_STACK_DEPTH_EXT}
  GL_MODELVIEW1_STACK_DEPTH_EXT = $8502;
  {$EXTERNALSYM GL_MODELVIEW1_STACK_DEPTH_EXT}
  GL_MODELVIEW0_MATRIX_EXT = $0BA6;
  {$EXTERNALSYM GL_MODELVIEW0_MATRIX_EXT}
  GL_MODELVIEW1_MATRIX_EXT = $8506;
  {$EXTERNALSYM GL_MODELVIEW1_MATRIX_EXT}
  GL_VERTEX_WEIGHTING_EXT = $8509;
  {$EXTERNALSYM GL_VERTEX_WEIGHTING_EXT}
  GL_MODELVIEW0_EXT = $1700;
  {$EXTERNALSYM GL_MODELVIEW0_EXT}
  GL_MODELVIEW1_EXT = $850A;
  {$EXTERNALSYM GL_MODELVIEW1_EXT}
  GL_CURRENT_VERTEX_WEIGHT_EXT = $850B;
  {$EXTERNALSYM GL_CURRENT_VERTEX_WEIGHT_EXT}
  GL_VERTEX_WEIGHT_ARRAY_EXT = $850C;
  {$EXTERNALSYM GL_VERTEX_WEIGHT_ARRAY_EXT}
  GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = $850D;
  {$EXTERNALSYM GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT}
  GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = $850E;
  {$EXTERNALSYM GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT}
  GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = $850F;
  {$EXTERNALSYM GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT}
  GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = $8510;
  {$EXTERNALSYM GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT}

{ GL_EXT_x11_sync_object }
  GL_SYNC_X11_FENCE_EXT = $90E1;
  {$EXTERNALSYM GL_SYNC_X11_FENCE_EXT}

{ GL_GREMEDY_frame_terminator }

{ GL_GREMEDY_string_marker }

{ GL_HP_convolution_border_modes }
  GL_IGNORE_BORDER_HP = $8150;
  {$EXTERNALSYM GL_IGNORE_BORDER_HP}
  GL_CONSTANT_BORDER_HP = $8151;
  {$EXTERNALSYM GL_CONSTANT_BORDER_HP}
  GL_REPLICATE_BORDER_HP = $8153;
  {$EXTERNALSYM GL_REPLICATE_BORDER_HP}
  GL_CONVOLUTION_BORDER_COLOR_HP = $8154;
  {$EXTERNALSYM GL_CONVOLUTION_BORDER_COLOR_HP}

{ GL_HP_image_transform }
  GL_IMAGE_SCALE_X_HP = $8155;
  {$EXTERNALSYM GL_IMAGE_SCALE_X_HP}
  GL_IMAGE_SCALE_Y_HP = $8156;
  {$EXTERNALSYM GL_IMAGE_SCALE_Y_HP}
  GL_IMAGE_TRANSLATE_X_HP = $8157;
  {$EXTERNALSYM GL_IMAGE_TRANSLATE_X_HP}
  GL_IMAGE_TRANSLATE_Y_HP = $8158;
  {$EXTERNALSYM GL_IMAGE_TRANSLATE_Y_HP}
  GL_IMAGE_ROTATE_ANGLE_HP = $8159;
  {$EXTERNALSYM GL_IMAGE_ROTATE_ANGLE_HP}
  GL_IMAGE_ROTATE_ORIGIN_X_HP = $815A;
  {$EXTERNALSYM GL_IMAGE_ROTATE_ORIGIN_X_HP}
  GL_IMAGE_ROTATE_ORIGIN_Y_HP = $815B;
  {$EXTERNALSYM GL_IMAGE_ROTATE_ORIGIN_Y_HP}
  GL_IMAGE_MAG_FILTER_HP = $815C;
  {$EXTERNALSYM GL_IMAGE_MAG_FILTER_HP}
  GL_IMAGE_MIN_FILTER_HP = $815D;
  {$EXTERNALSYM GL_IMAGE_MIN_FILTER_HP}
  GL_IMAGE_CUBIC_WEIGHT_HP = $815E;
  {$EXTERNALSYM GL_IMAGE_CUBIC_WEIGHT_HP}
  GL_CUBIC_HP = $815F;
  {$EXTERNALSYM GL_CUBIC_HP}
  GL_AVERAGE_HP = $8160;
  {$EXTERNALSYM GL_AVERAGE_HP}
  GL_IMAGE_TRANSFORM_2D_HP = $8161;
  {$EXTERNALSYM GL_IMAGE_TRANSFORM_2D_HP}
  GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = $8162;
  {$EXTERNALSYM GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP}
  GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = $8163;
  {$EXTERNALSYM GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP}

{ GL_HP_occlusion_test }
  GL_OCCLUSION_TEST_HP = $8165;
  {$EXTERNALSYM GL_OCCLUSION_TEST_HP}
  GL_OCCLUSION_TEST_RESULT_HP = $8166;
  {$EXTERNALSYM GL_OCCLUSION_TEST_RESULT_HP}

{ GL_HP_texture_lighting }
  GL_TEXTURE_LIGHTING_MODE_HP = $8167;
  {$EXTERNALSYM GL_TEXTURE_LIGHTING_MODE_HP}
  GL_TEXTURE_POST_SPECULAR_HP = $8168;
  {$EXTERNALSYM GL_TEXTURE_POST_SPECULAR_HP}
  GL_TEXTURE_PRE_SPECULAR_HP = $8169;
  {$EXTERNALSYM GL_TEXTURE_PRE_SPECULAR_HP}

{ GL_IBM_cull_vertex }
  GL_CULL_VERTEX_IBM = 103050;
  {$EXTERNALSYM GL_CULL_VERTEX_IBM}

{ GL_IBM_rasterpos_clip }
  GL_RASTER_POSITION_UNCLIPPED_IBM = $19262;
  {$EXTERNALSYM GL_RASTER_POSITION_UNCLIPPED_IBM}

{ GL_IBM_static_data }
  GL_ALL_STATIC_DATA_IBM = 103060;
  {$EXTERNALSYM GL_ALL_STATIC_DATA_IBM}
  GL_STATIC_VERTEX_ARRAY_IBM = 103061;
  {$EXTERNALSYM GL_STATIC_VERTEX_ARRAY_IBM}

{ GL_IBM_texture_mirrored_repeat }
  GL_MIRRORED_REPEAT_IBM = $8370;
  {$EXTERNALSYM GL_MIRRORED_REPEAT_IBM}

{ GL_IBM_vertex_array_lists }
  GL_VERTEX_ARRAY_LIST_IBM = 103070;
  {$EXTERNALSYM GL_VERTEX_ARRAY_LIST_IBM}
  GL_NORMAL_ARRAY_LIST_IBM = 103071;
  {$EXTERNALSYM GL_NORMAL_ARRAY_LIST_IBM}
  GL_COLOR_ARRAY_LIST_IBM = 103072;
  {$EXTERNALSYM GL_COLOR_ARRAY_LIST_IBM}
  GL_INDEX_ARRAY_LIST_IBM = 103073;
  {$EXTERNALSYM GL_INDEX_ARRAY_LIST_IBM}
  GL_TEXTURE_COORD_ARRAY_LIST_IBM = 103074;
  {$EXTERNALSYM GL_TEXTURE_COORD_ARRAY_LIST_IBM}
  GL_EDGE_FLAG_ARRAY_LIST_IBM = 103075;
  {$EXTERNALSYM GL_EDGE_FLAG_ARRAY_LIST_IBM}
  GL_FOG_COORDINATE_ARRAY_LIST_IBM = 103076;
  {$EXTERNALSYM GL_FOG_COORDINATE_ARRAY_LIST_IBM}
  GL_SECONDARY_COLOR_ARRAY_LIST_IBM = 103077;
  {$EXTERNALSYM GL_SECONDARY_COLOR_ARRAY_LIST_IBM}
  GL_VERTEX_ARRAY_LIST_STRIDE_IBM = 103080;
  {$EXTERNALSYM GL_VERTEX_ARRAY_LIST_STRIDE_IBM}
  GL_NORMAL_ARRAY_LIST_STRIDE_IBM = 103081;
  {$EXTERNALSYM GL_NORMAL_ARRAY_LIST_STRIDE_IBM}
  GL_COLOR_ARRAY_LIST_STRIDE_IBM = 103082;
  {$EXTERNALSYM GL_COLOR_ARRAY_LIST_STRIDE_IBM}
  GL_INDEX_ARRAY_LIST_STRIDE_IBM = 103083;
  {$EXTERNALSYM GL_INDEX_ARRAY_LIST_STRIDE_IBM}
  GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = 103084;
  {$EXTERNALSYM GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM}
  GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = 103085;
  {$EXTERNALSYM GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM}
  GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = 103086;
  {$EXTERNALSYM GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM}
  GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = 103087;
  {$EXTERNALSYM GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM}

{ GL_INGR_color_clamp }
  GL_RED_MIN_CLAMP_INGR = $8560;
  {$EXTERNALSYM GL_RED_MIN_CLAMP_INGR}
  GL_GREEN_MIN_CLAMP_INGR = $8561;
  {$EXTERNALSYM GL_GREEN_MIN_CLAMP_INGR}
  GL_BLUE_MIN_CLAMP_INGR = $8562;
  {$EXTERNALSYM GL_BLUE_MIN_CLAMP_INGR}
  GL_ALPHA_MIN_CLAMP_INGR = $8563;
  {$EXTERNALSYM GL_ALPHA_MIN_CLAMP_INGR}
  GL_RED_MAX_CLAMP_INGR = $8564;
  {$EXTERNALSYM GL_RED_MAX_CLAMP_INGR}
  GL_GREEN_MAX_CLAMP_INGR = $8565;
  {$EXTERNALSYM GL_GREEN_MAX_CLAMP_INGR}
  GL_BLUE_MAX_CLAMP_INGR = $8566;
  {$EXTERNALSYM GL_BLUE_MAX_CLAMP_INGR}
  GL_ALPHA_MAX_CLAMP_INGR = $8567;
  {$EXTERNALSYM GL_ALPHA_MAX_CLAMP_INGR}

{ GL_INGR_interlace_read }
  GL_INTERLACE_READ_INGR = $8568;
  {$EXTERNALSYM GL_INTERLACE_READ_INGR}

{ GL_INTEL_fragment_shader_ordering }

{ GL_INTEL_map_texture }
  GL_TEXTURE_MEMORY_LAYOUT_INTEL = $83FF;
  {$EXTERNALSYM GL_TEXTURE_MEMORY_LAYOUT_INTEL}
  GL_LAYOUT_DEFAULT_INTEL = 0;
  {$EXTERNALSYM GL_LAYOUT_DEFAULT_INTEL}
  GL_LAYOUT_LINEAR_INTEL = 1;
  {$EXTERNALSYM GL_LAYOUT_LINEAR_INTEL}
  GL_LAYOUT_LINEAR_CPU_CACHED_INTEL = 2;
  {$EXTERNALSYM GL_LAYOUT_LINEAR_CPU_CACHED_INTEL}

{ GL_INTEL_parallel_arrays }
  GL_PARALLEL_ARRAYS_INTEL = $83F4;
  {$EXTERNALSYM GL_PARALLEL_ARRAYS_INTEL}
  GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = $83F5;
  {$EXTERNALSYM GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL}
  GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = $83F6;
  {$EXTERNALSYM GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL}
  GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL = $83F7;
  {$EXTERNALSYM GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL}
  GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = $83F8;
  {$EXTERNALSYM GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL}

{ GL_MESAX_texture_stack }
  GL_TEXTURE_1D_STACK_MESAX = $8759;
  {$EXTERNALSYM GL_TEXTURE_1D_STACK_MESAX}
  GL_TEXTURE_2D_STACK_MESAX = $875A;
  {$EXTERNALSYM GL_TEXTURE_2D_STACK_MESAX}
  GL_PROXY_TEXTURE_1D_STACK_MESAX = $875B;
  {$EXTERNALSYM GL_PROXY_TEXTURE_1D_STACK_MESAX}
  GL_PROXY_TEXTURE_2D_STACK_MESAX = $875C;
  {$EXTERNALSYM GL_PROXY_TEXTURE_2D_STACK_MESAX}
  GL_TEXTURE_1D_STACK_BINDING_MESAX = $875D;
  {$EXTERNALSYM GL_TEXTURE_1D_STACK_BINDING_MESAX}
  GL_TEXTURE_2D_STACK_BINDING_MESAX = $875E;
  {$EXTERNALSYM GL_TEXTURE_2D_STACK_BINDING_MESAX}

{ GL_MESA_pack_invert }
  GL_PACK_INVERT_MESA = $8758;
  {$EXTERNALSYM GL_PACK_INVERT_MESA}

{ GL_MESA_resize_buffers }

{ GL_MESA_window_pos }

{ GL_MESA_ycbcr_texture }
  GL_UNSIGNED_SHORT_8_8_MESA = $85BA;
  {$EXTERNALSYM GL_UNSIGNED_SHORT_8_8_MESA}
  GL_UNSIGNED_SHORT_8_8_REV_MESA = $85BB;
  {$EXTERNALSYM GL_UNSIGNED_SHORT_8_8_REV_MESA}
  GL_YCBCR_MESA = $8757;
  {$EXTERNALSYM GL_YCBCR_MESA}

{ GL_NVX_conditional_render }

{ GL_NV_bindless_multi_draw_indirect }

{ GL_NV_bindless_texture }

{ GL_NV_blend_equation_advanced }
  GL_BLEND_OVERLAP_NV = $9281;
  {$EXTERNALSYM GL_BLEND_OVERLAP_NV}
  GL_BLEND_PREMULTIPLIED_SRC_NV = $9280;
  {$EXTERNALSYM GL_BLEND_PREMULTIPLIED_SRC_NV}
  GL_BLUE_NV = $1905;
  {$EXTERNALSYM GL_BLUE_NV}
  GL_COLORBURN_NV = $929A;
  {$EXTERNALSYM GL_COLORBURN_NV}
  GL_COLORDODGE_NV = $9299;
  {$EXTERNALSYM GL_COLORDODGE_NV}
  GL_CONJOINT_NV = $9284;
  {$EXTERNALSYM GL_CONJOINT_NV}
  GL_CONTRAST_NV = $92A1;
  {$EXTERNALSYM GL_CONTRAST_NV}
  GL_DARKEN_NV = $9297;
  {$EXTERNALSYM GL_DARKEN_NV}
  GL_DIFFERENCE_NV = $929E;
  {$EXTERNALSYM GL_DIFFERENCE_NV}
  GL_DISJOINT_NV = $9283;
  {$EXTERNALSYM GL_DISJOINT_NV}
  GL_DST_ATOP_NV = $928F;
  {$EXTERNALSYM GL_DST_ATOP_NV}
  GL_DST_IN_NV = $928B;
  {$EXTERNALSYM GL_DST_IN_NV}
  GL_DST_NV = $9287;
  {$EXTERNALSYM GL_DST_NV}
  GL_DST_OUT_NV = $928D;
  {$EXTERNALSYM GL_DST_OUT_NV}
  GL_DST_OVER_NV = $9289;
  {$EXTERNALSYM GL_DST_OVER_NV}
  GL_EXCLUSION_NV = $92A0;
  {$EXTERNALSYM GL_EXCLUSION_NV}
  GL_GREEN_NV = $1904;
  {$EXTERNALSYM GL_GREEN_NV}
  GL_HARDLIGHT_NV = $929B;
  {$EXTERNALSYM GL_HARDLIGHT_NV}
  GL_HARDMIX_NV = $92A9;
  {$EXTERNALSYM GL_HARDMIX_NV}
  GL_HSL_COLOR_NV = $92AF;
  {$EXTERNALSYM GL_HSL_COLOR_NV}
  GL_HSL_HUE_NV = $92AD;
  {$EXTERNALSYM GL_HSL_HUE_NV}
  GL_HSL_LUMINOSITY_NV = $92B0;
  {$EXTERNALSYM GL_HSL_LUMINOSITY_NV}
  GL_HSL_SATURATION_NV = $92AE;
  {$EXTERNALSYM GL_HSL_SATURATION_NV}
  GL_INVERT_OVG_NV = $92B4;
  {$EXTERNALSYM GL_INVERT_OVG_NV}
  GL_INVERT_RGB_NV = $92A3;
  {$EXTERNALSYM GL_INVERT_RGB_NV}
  GL_LIGHTEN_NV = $9298;
  {$EXTERNALSYM GL_LIGHTEN_NV}
  GL_LINEARBURN_NV = $92A5;
  {$EXTERNALSYM GL_LINEARBURN_NV}
  GL_LINEARDODGE_NV = $92A4;
  {$EXTERNALSYM GL_LINEARDODGE_NV}
  GL_LINEARLIGHT_NV = $92A7;
  {$EXTERNALSYM GL_LINEARLIGHT_NV}
  GL_MINUS_CLAMPED_NV = $92B3;
  {$EXTERNALSYM GL_MINUS_CLAMPED_NV}
  GL_MINUS_NV = $929F;
  {$EXTERNALSYM GL_MINUS_NV}
  GL_MULTIPLY_NV = $9294;
  {$EXTERNALSYM GL_MULTIPLY_NV}
  GL_OVERLAY_NV = $9296;
  {$EXTERNALSYM GL_OVERLAY_NV}
  GL_PINLIGHT_NV = $92A8;
  {$EXTERNALSYM GL_PINLIGHT_NV}
  GL_PLUS_CLAMPED_ALPHA_NV = $92B2;
  {$EXTERNALSYM GL_PLUS_CLAMPED_ALPHA_NV}
  GL_PLUS_CLAMPED_NV = $92B1;
  {$EXTERNALSYM GL_PLUS_CLAMPED_NV}
  GL_PLUS_DARKER_NV = $9292;
  {$EXTERNALSYM GL_PLUS_DARKER_NV}
  GL_PLUS_NV = $9291;
  {$EXTERNALSYM GL_PLUS_NV}
  GL_RED_NV = $1903;
  {$EXTERNALSYM GL_RED_NV}
  GL_SCREEN_NV = $9295;
  {$EXTERNALSYM GL_SCREEN_NV}
  GL_SOFTLIGHT_NV = $929C;
  {$EXTERNALSYM GL_SOFTLIGHT_NV}
  GL_SRC_ATOP_NV = $928E;
  {$EXTERNALSYM GL_SRC_ATOP_NV}
  GL_SRC_IN_NV = $928A;
  {$EXTERNALSYM GL_SRC_IN_NV}
  GL_SRC_NV = $9286;
  {$EXTERNALSYM GL_SRC_NV}
  GL_SRC_OUT_NV = $928C;
  {$EXTERNALSYM GL_SRC_OUT_NV}
  GL_SRC_OVER_NV = $9288;
  {$EXTERNALSYM GL_SRC_OVER_NV}
  GL_UNCORRELATED_NV = $9282;
  {$EXTERNALSYM GL_UNCORRELATED_NV}
  GL_VIVIDLIGHT_NV = $92A6;
  {$EXTERNALSYM GL_VIVIDLIGHT_NV}
  GL_XOR_NV = $1506;
  {$EXTERNALSYM GL_XOR_NV}

{ GL_NV_blend_equation_advanced_coherent }
  GL_BLEND_ADVANCED_COHERENT_NV = $9285;
  {$EXTERNALSYM GL_BLEND_ADVANCED_COHERENT_NV}

{ GL_NV_blend_square }

{ GL_NV_compute_program5 }
  GL_COMPUTE_PROGRAM_NV = $90FB;
  {$EXTERNALSYM GL_COMPUTE_PROGRAM_NV}
  GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV = $90FC;
  {$EXTERNALSYM GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV}

{ GL_NV_conditional_render }
  GL_QUERY_WAIT_NV = $8E13;
  {$EXTERNALSYM GL_QUERY_WAIT_NV}
  GL_QUERY_NO_WAIT_NV = $8E14;
  {$EXTERNALSYM GL_QUERY_NO_WAIT_NV}
  GL_QUERY_BY_REGION_WAIT_NV = $8E15;
  {$EXTERNALSYM GL_QUERY_BY_REGION_WAIT_NV}
  GL_QUERY_BY_REGION_NO_WAIT_NV = $8E16;
  {$EXTERNALSYM GL_QUERY_BY_REGION_NO_WAIT_NV}

{ GL_NV_copy_depth_to_color }
  GL_DEPTH_STENCIL_TO_RGBA_NV = $886E;
  {$EXTERNALSYM GL_DEPTH_STENCIL_TO_RGBA_NV}
  GL_DEPTH_STENCIL_TO_BGRA_NV = $886F;
  {$EXTERNALSYM GL_DEPTH_STENCIL_TO_BGRA_NV}

{ GL_NV_deep_texture3D }
  GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV = $90D0;
  {$EXTERNALSYM GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV}
  GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV = $90D1;
  {$EXTERNALSYM GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV}

{ GL_NV_depth_buffer_float }
  GL_DEPTH_COMPONENT32F_NV = $8DAB;
  {$EXTERNALSYM GL_DEPTH_COMPONENT32F_NV}
  GL_DEPTH32F_STENCIL8_NV = $8DAC;
  {$EXTERNALSYM GL_DEPTH32F_STENCIL8_NV}
  GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV = $8DAD;
  {$EXTERNALSYM GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV}
  GL_DEPTH_BUFFER_FLOAT_MODE_NV = $8DAF;
  {$EXTERNALSYM GL_DEPTH_BUFFER_FLOAT_MODE_NV}

{ GL_NV_depth_clamp }
  GL_DEPTH_CLAMP_NV = $864F;
  {$EXTERNALSYM GL_DEPTH_CLAMP_NV}

{ GL_NV_evaluators }
  GL_EVAL_2D_NV = $86C0;
  {$EXTERNALSYM GL_EVAL_2D_NV}
  GL_EVAL_TRIANGULAR_2D_NV = $86C1;
  {$EXTERNALSYM GL_EVAL_TRIANGULAR_2D_NV}
  GL_MAP_TESSELLATION_NV = $86C2;
  {$EXTERNALSYM GL_MAP_TESSELLATION_NV}
  GL_MAP_ATTRIB_U_ORDER_NV = $86C3;
  {$EXTERNALSYM GL_MAP_ATTRIB_U_ORDER_NV}
  GL_MAP_ATTRIB_V_ORDER_NV = $86C4;
  {$EXTERNALSYM GL_MAP_ATTRIB_V_ORDER_NV}
  GL_EVAL_FRACTIONAL_TESSELLATION_NV = $86C5;
  {$EXTERNALSYM GL_EVAL_FRACTIONAL_TESSELLATION_NV}
  GL_EVAL_VERTEX_ATTRIB0_NV = $86C6;
  {$EXTERNALSYM GL_EVAL_VERTEX_ATTRIB0_NV}
  GL_EVAL_VERTEX_ATTRIB1_NV = $86C7;
  {$EXTERNALSYM GL_EVAL_VERTEX_ATTRIB1_NV}
  GL_EVAL_VERTEX_ATTRIB2_NV = $86C8;
  {$EXTERNALSYM GL_EVAL_VERTEX_ATTRIB2_NV}
  GL_EVAL_VERTEX_ATTRIB3_NV = $86C9;
  {$EXTERNALSYM GL_EVAL_VERTEX_ATTRIB3_NV}
  GL_EVAL_VERTEX_ATTRIB4_NV = $86CA;
  {$EXTERNALSYM GL_EVAL_VERTEX_ATTRIB4_NV}
  GL_EVAL_VERTEX_ATTRIB5_NV = $86CB;
  {$EXTERNALSYM GL_EVAL_VERTEX_ATTRIB5_NV}
  GL_EVAL_VERTEX_ATTRIB6_NV = $86CC;
  {$EXTERNALSYM GL_EVAL_VERTEX_ATTRIB6_NV}
  GL_EVAL_VERTEX_ATTRIB7_NV = $86CD;
  {$EXTERNALSYM GL_EVAL_VERTEX_ATTRIB7_NV}
  GL_EVAL_VERTEX_ATTRIB8_NV = $86CE;
  {$EXTERNALSYM GL_EVAL_VERTEX_ATTRIB8_NV}
  GL_EVAL_VERTEX_ATTRIB9_NV = $86CF;
  {$EXTERNALSYM GL_EVAL_VERTEX_ATTRIB9_NV}
  GL_EVAL_VERTEX_ATTRIB10_NV = $86D0;
  {$EXTERNALSYM GL_EVAL_VERTEX_ATTRIB10_NV}
  GL_EVAL_VERTEX_ATTRIB11_NV = $86D1;
  {$EXTERNALSYM GL_EVAL_VERTEX_ATTRIB11_NV}
  GL_EVAL_VERTEX_ATTRIB12_NV = $86D2;
  {$EXTERNALSYM GL_EVAL_VERTEX_ATTRIB12_NV}
  GL_EVAL_VERTEX_ATTRIB13_NV = $86D3;
  {$EXTERNALSYM GL_EVAL_VERTEX_ATTRIB13_NV}
  GL_EVAL_VERTEX_ATTRIB14_NV = $86D4;
  {$EXTERNALSYM GL_EVAL_VERTEX_ATTRIB14_NV}
  GL_EVAL_VERTEX_ATTRIB15_NV = $86D5;
  {$EXTERNALSYM GL_EVAL_VERTEX_ATTRIB15_NV}
  GL_MAX_MAP_TESSELLATION_NV = $86D6;
  {$EXTERNALSYM GL_MAX_MAP_TESSELLATION_NV}
  GL_MAX_RATIONAL_EVAL_ORDER_NV = $86D7;
  {$EXTERNALSYM GL_MAX_RATIONAL_EVAL_ORDER_NV}

{ GL_NV_explicit_multisample }
  GL_SAMPLE_POSITION_NV = $8E50;
  {$EXTERNALSYM GL_SAMPLE_POSITION_NV}
  GL_SAMPLE_MASK_NV = $8E51;
  {$EXTERNALSYM GL_SAMPLE_MASK_NV}
  GL_SAMPLE_MASK_VALUE_NV = $8E52;
  {$EXTERNALSYM GL_SAMPLE_MASK_VALUE_NV}
  GL_TEXTURE_BINDING_RENDERBUFFER_NV = $8E53;
  {$EXTERNALSYM GL_TEXTURE_BINDING_RENDERBUFFER_NV}
  GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV = $8E54;
  {$EXTERNALSYM GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV}
  GL_TEXTURE_RENDERBUFFER_NV = $8E55;
  {$EXTERNALSYM GL_TEXTURE_RENDERBUFFER_NV}
  GL_SAMPLER_RENDERBUFFER_NV = $8E56;
  {$EXTERNALSYM GL_SAMPLER_RENDERBUFFER_NV}
  GL_INT_SAMPLER_RENDERBUFFER_NV = $8E57;
  {$EXTERNALSYM GL_INT_SAMPLER_RENDERBUFFER_NV}
  GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV = $8E58;
  {$EXTERNALSYM GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV}
  GL_MAX_SAMPLE_MASK_WORDS_NV = $8E59;
  {$EXTERNALSYM GL_MAX_SAMPLE_MASK_WORDS_NV}

{ GL_NV_fence }
  GL_ALL_COMPLETED_NV = $84F2;
  {$EXTERNALSYM GL_ALL_COMPLETED_NV}
  GL_FENCE_STATUS_NV = $84F3;
  {$EXTERNALSYM GL_FENCE_STATUS_NV}
  GL_FENCE_CONDITION_NV = $84F4;
  {$EXTERNALSYM GL_FENCE_CONDITION_NV}

{ GL_NV_float_buffer }
  GL_FLOAT_R_NV = $8880;
  {$EXTERNALSYM GL_FLOAT_R_NV}
  GL_FLOAT_RG_NV = $8881;
  {$EXTERNALSYM GL_FLOAT_RG_NV}
  GL_FLOAT_RGB_NV = $8882;
  {$EXTERNALSYM GL_FLOAT_RGB_NV}
  GL_FLOAT_RGBA_NV = $8883;
  {$EXTERNALSYM GL_FLOAT_RGBA_NV}
  GL_FLOAT_R16_NV = $8884;
  {$EXTERNALSYM GL_FLOAT_R16_NV}
  GL_FLOAT_R32_NV = $8885;
  {$EXTERNALSYM GL_FLOAT_R32_NV}
  GL_FLOAT_RG16_NV = $8886;
  {$EXTERNALSYM GL_FLOAT_RG16_NV}
  GL_FLOAT_RG32_NV = $8887;
  {$EXTERNALSYM GL_FLOAT_RG32_NV}
  GL_FLOAT_RGB16_NV = $8888;
  {$EXTERNALSYM GL_FLOAT_RGB16_NV}
  GL_FLOAT_RGB32_NV = $8889;
  {$EXTERNALSYM GL_FLOAT_RGB32_NV}
  GL_FLOAT_RGBA16_NV = $888A;
  {$EXTERNALSYM GL_FLOAT_RGBA16_NV}
  GL_FLOAT_RGBA32_NV = $888B;
  {$EXTERNALSYM GL_FLOAT_RGBA32_NV}
  GL_TEXTURE_FLOAT_COMPONENTS_NV = $888C;
  {$EXTERNALSYM GL_TEXTURE_FLOAT_COMPONENTS_NV}
  GL_FLOAT_CLEAR_COLOR_VALUE_NV = $888D;
  {$EXTERNALSYM GL_FLOAT_CLEAR_COLOR_VALUE_NV}
  GL_FLOAT_RGBA_MODE_NV = $888E;
  {$EXTERNALSYM GL_FLOAT_RGBA_MODE_NV}

{ GL_NV_fog_distance }
  GL_FOG_DISTANCE_MODE_NV = $855A;
  {$EXTERNALSYM GL_FOG_DISTANCE_MODE_NV}
  GL_EYE_RADIAL_NV = $855B;
  {$EXTERNALSYM GL_EYE_RADIAL_NV}
  GL_EYE_PLANE_ABSOLUTE_NV = $855C;
  {$EXTERNALSYM GL_EYE_PLANE_ABSOLUTE_NV}

{ GL_NV_fragment_program }
  GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = $8868;
  {$EXTERNALSYM GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV}
  GL_FRAGMENT_PROGRAM_NV = $8870;
  {$EXTERNALSYM GL_FRAGMENT_PROGRAM_NV}
  GL_MAX_TEXTURE_COORDS_NV = $8871;
  {$EXTERNALSYM GL_MAX_TEXTURE_COORDS_NV}
  GL_MAX_TEXTURE_IMAGE_UNITS_NV = $8872;
  {$EXTERNALSYM GL_MAX_TEXTURE_IMAGE_UNITS_NV}
  GL_FRAGMENT_PROGRAM_BINDING_NV = $8873;
  {$EXTERNALSYM GL_FRAGMENT_PROGRAM_BINDING_NV}
  GL_PROGRAM_ERROR_STRING_NV = $8874;
  {$EXTERNALSYM GL_PROGRAM_ERROR_STRING_NV}

{ GL_NV_fragment_program2 }
  GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = $88F4;
  {$EXTERNALSYM GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV}
  GL_MAX_PROGRAM_CALL_DEPTH_NV = $88F5;
  {$EXTERNALSYM GL_MAX_PROGRAM_CALL_DEPTH_NV}
  GL_MAX_PROGRAM_IF_DEPTH_NV = $88F6;
  {$EXTERNALSYM GL_MAX_PROGRAM_IF_DEPTH_NV}
  GL_MAX_PROGRAM_LOOP_DEPTH_NV = $88F7;
  {$EXTERNALSYM GL_MAX_PROGRAM_LOOP_DEPTH_NV}
  GL_MAX_PROGRAM_LOOP_COUNT_NV = $88F8;
  {$EXTERNALSYM GL_MAX_PROGRAM_LOOP_COUNT_NV}

{ GL_NV_framebuffer_multisample_coverage }
  GL_RENDERBUFFER_COVERAGE_SAMPLES_NV = $8CAB;
  {$EXTERNALSYM GL_RENDERBUFFER_COVERAGE_SAMPLES_NV}
  GL_RENDERBUFFER_COLOR_SAMPLES_NV = $8E10;
  {$EXTERNALSYM GL_RENDERBUFFER_COLOR_SAMPLES_NV}
  GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV = $8E11;
  {$EXTERNALSYM GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV}
  GL_MULTISAMPLE_COVERAGE_MODES_NV = $8E12;
  {$EXTERNALSYM GL_MULTISAMPLE_COVERAGE_MODES_NV}

{ GL_NV_geometry_program4 }
  GL_GEOMETRY_PROGRAM_NV = $8C26;
  {$EXTERNALSYM GL_GEOMETRY_PROGRAM_NV}
  GL_MAX_PROGRAM_OUTPUT_VERTICES_NV = $8C27;
  {$EXTERNALSYM GL_MAX_PROGRAM_OUTPUT_VERTICES_NV}
  GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = $8C28;
  {$EXTERNALSYM GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV}

{ GL_NV_gpu_program4 }
  GL_MIN_PROGRAM_TEXEL_OFFSET_NV = $8904;
  {$EXTERNALSYM GL_MIN_PROGRAM_TEXEL_OFFSET_NV}
  GL_MAX_PROGRAM_TEXEL_OFFSET_NV = $8905;
  {$EXTERNALSYM GL_MAX_PROGRAM_TEXEL_OFFSET_NV}
  GL_PROGRAM_ATTRIB_COMPONENTS_NV = $8906;
  {$EXTERNALSYM GL_PROGRAM_ATTRIB_COMPONENTS_NV}
  GL_PROGRAM_RESULT_COMPONENTS_NV = $8907;
  {$EXTERNALSYM GL_PROGRAM_RESULT_COMPONENTS_NV}
  GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV = $8908;
  {$EXTERNALSYM GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV}
  GL_MAX_PROGRAM_RESULT_COMPONENTS_NV = $8909;
  {$EXTERNALSYM GL_MAX_PROGRAM_RESULT_COMPONENTS_NV}
  GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV = $8DA5;
  {$EXTERNALSYM GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV}
  GL_MAX_PROGRAM_GENERIC_RESULTS_NV = $8DA6;
  {$EXTERNALSYM GL_MAX_PROGRAM_GENERIC_RESULTS_NV}

{ GL_NV_gpu_program5 }
  GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV = $8E5A;
  {$EXTERNALSYM GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV}
  GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV = $8E5B;
  {$EXTERNALSYM GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV}
  GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV = $8E5C;
  {$EXTERNALSYM GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV}
  GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV = $8E5D;
  {$EXTERNALSYM GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV}
  GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV = $8E5E;
  {$EXTERNALSYM GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV}
  GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV = $8E5F;
  {$EXTERNALSYM GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV}
  GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV = $8F44;
  {$EXTERNALSYM GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV}
  GL_MAX_PROGRAM_SUBROUTINE_NUM_NV = $8F45;
  {$EXTERNALSYM GL_MAX_PROGRAM_SUBROUTINE_NUM_NV}

{ GL_NV_gpu_program5_mem_extended }
  GL_INT64_NV = $140E;
  {$EXTERNALSYM GL_INT64_NV}
  GL_UNSIGNED_INT64_NV = $140F;
  {$EXTERNALSYM GL_UNSIGNED_INT64_NV}
  GL_INT8_NV = $8FE0;
  {$EXTERNALSYM GL_INT8_NV}
  GL_INT8_VEC2_NV = $8FE1;
  {$EXTERNALSYM GL_INT8_VEC2_NV}
  GL_INT8_VEC3_NV = $8FE2;
  {$EXTERNALSYM GL_INT8_VEC3_NV}
  GL_INT8_VEC4_NV = $8FE3;
  {$EXTERNALSYM GL_INT8_VEC4_NV}
  GL_INT16_NV = $8FE4;
  {$EXTERNALSYM GL_INT16_NV}
  GL_INT16_VEC2_NV = $8FE5;
  {$EXTERNALSYM GL_INT16_VEC2_NV}
  GL_INT16_VEC3_NV = $8FE6;
  {$EXTERNALSYM GL_INT16_VEC3_NV}
  GL_INT16_VEC4_NV = $8FE7;
  {$EXTERNALSYM GL_INT16_VEC4_NV}
  GL_INT64_VEC2_NV = $8FE9;
  {$EXTERNALSYM GL_INT64_VEC2_NV}
  GL_INT64_VEC3_NV = $8FEA;
  {$EXTERNALSYM GL_INT64_VEC3_NV}
  GL_INT64_VEC4_NV = $8FEB;
  {$EXTERNALSYM GL_INT64_VEC4_NV}
  GL_UNSIGNED_INT8_NV = $8FEC;
  {$EXTERNALSYM GL_UNSIGNED_INT8_NV}
  GL_UNSIGNED_INT8_VEC2_NV = $8FED;
  {$EXTERNALSYM GL_UNSIGNED_INT8_VEC2_NV}
  GL_UNSIGNED_INT8_VEC3_NV = $8FEE;
  {$EXTERNALSYM GL_UNSIGNED_INT8_VEC3_NV}
  GL_UNSIGNED_INT8_VEC4_NV = $8FEF;
  {$EXTERNALSYM GL_UNSIGNED_INT8_VEC4_NV}
  GL_UNSIGNED_INT16_NV = $8FF0;
  {$EXTERNALSYM GL_UNSIGNED_INT16_NV}
  GL_UNSIGNED_INT16_VEC2_NV = $8FF1;
  {$EXTERNALSYM GL_UNSIGNED_INT16_VEC2_NV}
  GL_UNSIGNED_INT16_VEC3_NV = $8FF2;
  {$EXTERNALSYM GL_UNSIGNED_INT16_VEC3_NV}
  GL_UNSIGNED_INT16_VEC4_NV = $8FF3;
  {$EXTERNALSYM GL_UNSIGNED_INT16_VEC4_NV}
  GL_UNSIGNED_INT64_VEC2_NV = $8FF5;
  {$EXTERNALSYM GL_UNSIGNED_INT64_VEC2_NV}
  GL_UNSIGNED_INT64_VEC3_NV = $8FF6;
  {$EXTERNALSYM GL_UNSIGNED_INT64_VEC3_NV}
  GL_UNSIGNED_INT64_VEC4_NV = $8FF7;
  {$EXTERNALSYM GL_UNSIGNED_INT64_VEC4_NV}
  GL_FLOAT16_NV = $8FF8;
  {$EXTERNALSYM GL_FLOAT16_NV}
  GL_FLOAT16_VEC2_NV = $8FF9;
  {$EXTERNALSYM GL_FLOAT16_VEC2_NV}
  GL_FLOAT16_VEC3_NV = $8FFA;
  {$EXTERNALSYM GL_FLOAT16_VEC3_NV}
  GL_FLOAT16_VEC4_NV = $8FFB;
  {$EXTERNALSYM GL_FLOAT16_VEC4_NV}
  GL_HALF_FLOAT_NV = $140B;
  {$EXTERNALSYM GL_HALF_FLOAT_NV}

{ GL_NV_light_max_exponent }
  GL_MAX_SHININESS_NV = $8504;
  {$EXTERNALSYM GL_MAX_SHININESS_NV}
  GL_MAX_SPOT_EXPONENT_NV = $8505;
  {$EXTERNALSYM GL_MAX_SPOT_EXPONENT_NV}

{ GL_NV_multisample_coverage }
  GL_COLOR_SAMPLES_NV = $8E20;
  {$EXTERNALSYM GL_COLOR_SAMPLES_NV}

{ GL_NV_multisample_filter_hint }
  GL_MULTISAMPLE_FILTER_HINT_NV = $8534;
  {$EXTERNALSYM GL_MULTISAMPLE_FILTER_HINT_NV}

{ GL_NV_occlusion_query }
  GL_PIXEL_COUNTER_BITS_NV = $8864;
  {$EXTERNALSYM GL_PIXEL_COUNTER_BITS_NV}
  GL_CURRENT_OCCLUSION_QUERY_ID_NV = $8865;
  {$EXTERNALSYM GL_CURRENT_OCCLUSION_QUERY_ID_NV}
  GL_PIXEL_COUNT_NV = $8866;
  {$EXTERNALSYM GL_PIXEL_COUNT_NV}
  GL_PIXEL_COUNT_AVAILABLE_NV = $8867;
  {$EXTERNALSYM GL_PIXEL_COUNT_AVAILABLE_NV}

{ GL_NV_packed_depth_stencil }
  GL_DEPTH_STENCIL_NV = $84F9;
  {$EXTERNALSYM GL_DEPTH_STENCIL_NV}
  GL_UNSIGNED_INT_24_8_NV = $84FA;
  {$EXTERNALSYM GL_UNSIGNED_INT_24_8_NV}

{ GL_NV_parameter_buffer_object }
  GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = $8DA0;
  {$EXTERNALSYM GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV}
  GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = $8DA1;
  {$EXTERNALSYM GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV}
  GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV = $8DA2;
  {$EXTERNALSYM GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV}
  GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = $8DA3;
  {$EXTERNALSYM GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV}
  GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = $8DA4;
  {$EXTERNALSYM GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV}

{ GL_NV_path_rendering }
  GL_PATH_FORMAT_SVG_NV = $9070;
  {$EXTERNALSYM GL_PATH_FORMAT_SVG_NV}
  GL_PATH_FORMAT_PS_NV = $9071;
  {$EXTERNALSYM GL_PATH_FORMAT_PS_NV}
  GL_STANDARD_FONT_NAME_NV = $9072;
  {$EXTERNALSYM GL_STANDARD_FONT_NAME_NV}
  GL_SYSTEM_FONT_NAME_NV = $9073;
  {$EXTERNALSYM GL_SYSTEM_FONT_NAME_NV}
  GL_FILE_NAME_NV = $9074;
  {$EXTERNALSYM GL_FILE_NAME_NV}
  GL_PATH_STROKE_WIDTH_NV = $9075;
  {$EXTERNALSYM GL_PATH_STROKE_WIDTH_NV}
  GL_PATH_END_CAPS_NV = $9076;
  {$EXTERNALSYM GL_PATH_END_CAPS_NV}
  GL_PATH_INITIAL_END_CAP_NV = $9077;
  {$EXTERNALSYM GL_PATH_INITIAL_END_CAP_NV}
  GL_PATH_TERMINAL_END_CAP_NV = $9078;
  {$EXTERNALSYM GL_PATH_TERMINAL_END_CAP_NV}
  GL_PATH_JOIN_STYLE_NV = $9079;
  {$EXTERNALSYM GL_PATH_JOIN_STYLE_NV}
  GL_PATH_MITER_LIMIT_NV = $907A;
  {$EXTERNALSYM GL_PATH_MITER_LIMIT_NV}
  GL_PATH_DASH_CAPS_NV = $907B;
  {$EXTERNALSYM GL_PATH_DASH_CAPS_NV}
  GL_PATH_INITIAL_DASH_CAP_NV = $907C;
  {$EXTERNALSYM GL_PATH_INITIAL_DASH_CAP_NV}
  GL_PATH_TERMINAL_DASH_CAP_NV = $907D;
  {$EXTERNALSYM GL_PATH_TERMINAL_DASH_CAP_NV}
  GL_PATH_DASH_OFFSET_NV = $907E;
  {$EXTERNALSYM GL_PATH_DASH_OFFSET_NV}
  GL_PATH_CLIENT_LENGTH_NV = $907F;
  {$EXTERNALSYM GL_PATH_CLIENT_LENGTH_NV}
  GL_PATH_FILL_MODE_NV = $9080;
  {$EXTERNALSYM GL_PATH_FILL_MODE_NV}
  GL_PATH_FILL_MASK_NV = $9081;
  {$EXTERNALSYM GL_PATH_FILL_MASK_NV}
  GL_PATH_FILL_COVER_MODE_NV = $9082;
  {$EXTERNALSYM GL_PATH_FILL_COVER_MODE_NV}
  GL_PATH_STROKE_COVER_MODE_NV = $9083;
  {$EXTERNALSYM GL_PATH_STROKE_COVER_MODE_NV}
  GL_PATH_STROKE_MASK_NV = $9084;
  {$EXTERNALSYM GL_PATH_STROKE_MASK_NV}
  GL_COUNT_UP_NV = $9088;
  {$EXTERNALSYM GL_COUNT_UP_NV}
  GL_COUNT_DOWN_NV = $9089;
  {$EXTERNALSYM GL_COUNT_DOWN_NV}
  GL_PATH_OBJECT_BOUNDING_BOX_NV = $908A;
  {$EXTERNALSYM GL_PATH_OBJECT_BOUNDING_BOX_NV}
  GL_CONVEX_HULL_NV = $908B;
  {$EXTERNALSYM GL_CONVEX_HULL_NV}
  GL_BOUNDING_BOX_NV = $908D;
  {$EXTERNALSYM GL_BOUNDING_BOX_NV}
  GL_TRANSLATE_X_NV = $908E;
  {$EXTERNALSYM GL_TRANSLATE_X_NV}
  GL_TRANSLATE_Y_NV = $908F;
  {$EXTERNALSYM GL_TRANSLATE_Y_NV}
  GL_TRANSLATE_2D_NV = $9090;
  {$EXTERNALSYM GL_TRANSLATE_2D_NV}
  GL_TRANSLATE_3D_NV = $9091;
  {$EXTERNALSYM GL_TRANSLATE_3D_NV}
  GL_AFFINE_2D_NV = $9092;
  {$EXTERNALSYM GL_AFFINE_2D_NV}
  GL_AFFINE_3D_NV = $9094;
  {$EXTERNALSYM GL_AFFINE_3D_NV}
  GL_TRANSPOSE_AFFINE_2D_NV = $9096;
  {$EXTERNALSYM GL_TRANSPOSE_AFFINE_2D_NV}
  GL_TRANSPOSE_AFFINE_3D_NV = $9098;
  {$EXTERNALSYM GL_TRANSPOSE_AFFINE_3D_NV}
  GL_UTF8_NV = $909A;
  {$EXTERNALSYM GL_UTF8_NV}
  GL_UTF16_NV = $909B;
  {$EXTERNALSYM GL_UTF16_NV}
  GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV = $909C;
  {$EXTERNALSYM GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV}
  GL_PATH_COMMAND_COUNT_NV = $909D;
  {$EXTERNALSYM GL_PATH_COMMAND_COUNT_NV}
  GL_PATH_COORD_COUNT_NV = $909E;
  {$EXTERNALSYM GL_PATH_COORD_COUNT_NV}
  GL_PATH_DASH_ARRAY_COUNT_NV = $909F;
  {$EXTERNALSYM GL_PATH_DASH_ARRAY_COUNT_NV}
  GL_PATH_COMPUTED_LENGTH_NV = $90A0;
  {$EXTERNALSYM GL_PATH_COMPUTED_LENGTH_NV}
  GL_PATH_FILL_BOUNDING_BOX_NV = $90A1;
  {$EXTERNALSYM GL_PATH_FILL_BOUNDING_BOX_NV}
  GL_PATH_STROKE_BOUNDING_BOX_NV = $90A2;
  {$EXTERNALSYM GL_PATH_STROKE_BOUNDING_BOX_NV}
  GL_SQUARE_NV = $90A3;
  {$EXTERNALSYM GL_SQUARE_NV}
  GL_ROUND_NV = $90A4;
  {$EXTERNALSYM GL_ROUND_NV}
  GL_TRIANGULAR_NV = $90A5;
  {$EXTERNALSYM GL_TRIANGULAR_NV}
  GL_BEVEL_NV = $90A6;
  {$EXTERNALSYM GL_BEVEL_NV}
  GL_MITER_REVERT_NV = $90A7;
  {$EXTERNALSYM GL_MITER_REVERT_NV}
  GL_MITER_TRUNCATE_NV = $90A8;
  {$EXTERNALSYM GL_MITER_TRUNCATE_NV}
  GL_SKIP_MISSING_GLYPH_NV = $90A9;
  {$EXTERNALSYM GL_SKIP_MISSING_GLYPH_NV}
  GL_USE_MISSING_GLYPH_NV = $90AA;
  {$EXTERNALSYM GL_USE_MISSING_GLYPH_NV}
  GL_PATH_ERROR_POSITION_NV = $90AB;
  {$EXTERNALSYM GL_PATH_ERROR_POSITION_NV}
  GL_PATH_FOG_GEN_MODE_NV = $90AC;
  {$EXTERNALSYM GL_PATH_FOG_GEN_MODE_NV}
  GL_ACCUM_ADJACENT_PAIRS_NV = $90AD;
  {$EXTERNALSYM GL_ACCUM_ADJACENT_PAIRS_NV}
  GL_ADJACENT_PAIRS_NV = $90AE;
  {$EXTERNALSYM GL_ADJACENT_PAIRS_NV}
  GL_FIRST_TO_REST_NV = $90AF;
  {$EXTERNALSYM GL_FIRST_TO_REST_NV}
  GL_PATH_GEN_MODE_NV = $90B0;
  {$EXTERNALSYM GL_PATH_GEN_MODE_NV}
  GL_PATH_GEN_COEFF_NV = $90B1;
  {$EXTERNALSYM GL_PATH_GEN_COEFF_NV}
  GL_PATH_GEN_COLOR_FORMAT_NV = $90B2;
  {$EXTERNALSYM GL_PATH_GEN_COLOR_FORMAT_NV}
  GL_PATH_GEN_COMPONENTS_NV = $90B3;
  {$EXTERNALSYM GL_PATH_GEN_COMPONENTS_NV}
  GL_PATH_STENCIL_FUNC_NV = $90B7;
  {$EXTERNALSYM GL_PATH_STENCIL_FUNC_NV}
  GL_PATH_STENCIL_REF_NV = $90B8;
  {$EXTERNALSYM GL_PATH_STENCIL_REF_NV}
  GL_PATH_STENCIL_VALUE_MASK_NV = $90B9;
  {$EXTERNALSYM GL_PATH_STENCIL_VALUE_MASK_NV}
  GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV = $90BD;
  {$EXTERNALSYM GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV}
  GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV = $90BE;
  {$EXTERNALSYM GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV}
  GL_PATH_COVER_DEPTH_FUNC_NV = $90BF;
  {$EXTERNALSYM GL_PATH_COVER_DEPTH_FUNC_NV}
  GL_PATH_DASH_OFFSET_RESET_NV = $90B4;
  {$EXTERNALSYM GL_PATH_DASH_OFFSET_RESET_NV}
  GL_MOVE_TO_RESETS_NV = $90B5;
  {$EXTERNALSYM GL_MOVE_TO_RESETS_NV}
  GL_MOVE_TO_CONTINUES_NV = $90B6;
  {$EXTERNALSYM GL_MOVE_TO_CONTINUES_NV}
  GL_CLOSE_PATH_NV = $00;
  {$EXTERNALSYM GL_CLOSE_PATH_NV}
  GL_MOVE_TO_NV = $02;
  {$EXTERNALSYM GL_MOVE_TO_NV}
  GL_RELATIVE_MOVE_TO_NV = $03;
  {$EXTERNALSYM GL_RELATIVE_MOVE_TO_NV}
  GL_LINE_TO_NV = $04;
  {$EXTERNALSYM GL_LINE_TO_NV}
  GL_RELATIVE_LINE_TO_NV = $05;
  {$EXTERNALSYM GL_RELATIVE_LINE_TO_NV}
  GL_HORIZONTAL_LINE_TO_NV = $06;
  {$EXTERNALSYM GL_HORIZONTAL_LINE_TO_NV}
  GL_RELATIVE_HORIZONTAL_LINE_TO_NV = $07;
  {$EXTERNALSYM GL_RELATIVE_HORIZONTAL_LINE_TO_NV}
  GL_VERTICAL_LINE_TO_NV = $08;
  {$EXTERNALSYM GL_VERTICAL_LINE_TO_NV}
  GL_RELATIVE_VERTICAL_LINE_TO_NV = $09;
  {$EXTERNALSYM GL_RELATIVE_VERTICAL_LINE_TO_NV}
  GL_QUADRATIC_CURVE_TO_NV = $0A;
  {$EXTERNALSYM GL_QUADRATIC_CURVE_TO_NV}
  GL_RELATIVE_QUADRATIC_CURVE_TO_NV = $0B;
  {$EXTERNALSYM GL_RELATIVE_QUADRATIC_CURVE_TO_NV}
  GL_CUBIC_CURVE_TO_NV = $0C;
  {$EXTERNALSYM GL_CUBIC_CURVE_TO_NV}
  GL_RELATIVE_CUBIC_CURVE_TO_NV = $0D;
  {$EXTERNALSYM GL_RELATIVE_CUBIC_CURVE_TO_NV}
  GL_SMOOTH_QUADRATIC_CURVE_TO_NV = $0E;
  {$EXTERNALSYM GL_SMOOTH_QUADRATIC_CURVE_TO_NV}
  GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV = $0F;
  {$EXTERNALSYM GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV}
  GL_SMOOTH_CUBIC_CURVE_TO_NV = $10;
  {$EXTERNALSYM GL_SMOOTH_CUBIC_CURVE_TO_NV}
  GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV = $11;
  {$EXTERNALSYM GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV}
  GL_SMALL_CCW_ARC_TO_NV = $12;
  {$EXTERNALSYM GL_SMALL_CCW_ARC_TO_NV}
  GL_RELATIVE_SMALL_CCW_ARC_TO_NV = $13;
  {$EXTERNALSYM GL_RELATIVE_SMALL_CCW_ARC_TO_NV}
  GL_SMALL_CW_ARC_TO_NV = $14;
  {$EXTERNALSYM GL_SMALL_CW_ARC_TO_NV}
  GL_RELATIVE_SMALL_CW_ARC_TO_NV = $15;
  {$EXTERNALSYM GL_RELATIVE_SMALL_CW_ARC_TO_NV}
  GL_LARGE_CCW_ARC_TO_NV = $16;
  {$EXTERNALSYM GL_LARGE_CCW_ARC_TO_NV}
  GL_RELATIVE_LARGE_CCW_ARC_TO_NV = $17;
  {$EXTERNALSYM GL_RELATIVE_LARGE_CCW_ARC_TO_NV}
  GL_LARGE_CW_ARC_TO_NV = $18;
  {$EXTERNALSYM GL_LARGE_CW_ARC_TO_NV}
  GL_RELATIVE_LARGE_CW_ARC_TO_NV = $19;
  {$EXTERNALSYM GL_RELATIVE_LARGE_CW_ARC_TO_NV}
  GL_RESTART_PATH_NV = $F0;
  {$EXTERNALSYM GL_RESTART_PATH_NV}
  GL_DUP_FIRST_CUBIC_CURVE_TO_NV = $F2;
  {$EXTERNALSYM GL_DUP_FIRST_CUBIC_CURVE_TO_NV}
  GL_DUP_LAST_CUBIC_CURVE_TO_NV = $F4;
  {$EXTERNALSYM GL_DUP_LAST_CUBIC_CURVE_TO_NV}
  GL_RECT_NV = $F6;
  {$EXTERNALSYM GL_RECT_NV}
  GL_CIRCULAR_CCW_ARC_TO_NV = $F8;
  {$EXTERNALSYM GL_CIRCULAR_CCW_ARC_TO_NV}
  GL_CIRCULAR_CW_ARC_TO_NV = $FA;
  {$EXTERNALSYM GL_CIRCULAR_CW_ARC_TO_NV}
  GL_CIRCULAR_TANGENT_ARC_TO_NV = $FC;
  {$EXTERNALSYM GL_CIRCULAR_TANGENT_ARC_TO_NV}
  GL_ARC_TO_NV = $FE;
  {$EXTERNALSYM GL_ARC_TO_NV}
  GL_RELATIVE_ARC_TO_NV = $FF;
  {$EXTERNALSYM GL_RELATIVE_ARC_TO_NV}
  GL_BOLD_BIT_NV = $01;
  {$EXTERNALSYM GL_BOLD_BIT_NV}
  GL_ITALIC_BIT_NV = $02;
  {$EXTERNALSYM GL_ITALIC_BIT_NV}
  GL_GLYPH_WIDTH_BIT_NV = $01;
  {$EXTERNALSYM GL_GLYPH_WIDTH_BIT_NV}
  GL_GLYPH_HEIGHT_BIT_NV = $02;
  {$EXTERNALSYM GL_GLYPH_HEIGHT_BIT_NV}
  GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV = $04;
  {$EXTERNALSYM GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV}
  GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV = $08;
  {$EXTERNALSYM GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV}
  GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV = $10;
  {$EXTERNALSYM GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV}
  GL_GLYPH_VERTICAL_BEARING_X_BIT_NV = $20;
  {$EXTERNALSYM GL_GLYPH_VERTICAL_BEARING_X_BIT_NV}
  GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV = $40;
  {$EXTERNALSYM GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV}
  GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV = $80;
  {$EXTERNALSYM GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV}
  GL_GLYPH_HAS_KERNING_BIT_NV = $100;
  {$EXTERNALSYM GL_GLYPH_HAS_KERNING_BIT_NV}
  GL_FONT_X_MIN_BOUNDS_BIT_NV = $00010000;
  {$EXTERNALSYM GL_FONT_X_MIN_BOUNDS_BIT_NV}
  GL_FONT_Y_MIN_BOUNDS_BIT_NV = $00020000;
  {$EXTERNALSYM GL_FONT_Y_MIN_BOUNDS_BIT_NV}
  GL_FONT_X_MAX_BOUNDS_BIT_NV = $00040000;
  {$EXTERNALSYM GL_FONT_X_MAX_BOUNDS_BIT_NV}
  GL_FONT_Y_MAX_BOUNDS_BIT_NV = $00080000;
  {$EXTERNALSYM GL_FONT_Y_MAX_BOUNDS_BIT_NV}
  GL_FONT_UNITS_PER_EM_BIT_NV = $00100000;
  {$EXTERNALSYM GL_FONT_UNITS_PER_EM_BIT_NV}
  GL_FONT_ASCENDER_BIT_NV = $00200000;
  {$EXTERNALSYM GL_FONT_ASCENDER_BIT_NV}
  GL_FONT_DESCENDER_BIT_NV = $00400000;
  {$EXTERNALSYM GL_FONT_DESCENDER_BIT_NV}
  GL_FONT_HEIGHT_BIT_NV = $00800000;
  {$EXTERNALSYM GL_FONT_HEIGHT_BIT_NV}
  GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV = $01000000;
  {$EXTERNALSYM GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV}
  GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV = $02000000;
  {$EXTERNALSYM GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV}
  GL_FONT_UNDERLINE_POSITION_BIT_NV = $04000000;
  {$EXTERNALSYM GL_FONT_UNDERLINE_POSITION_BIT_NV}
  GL_FONT_UNDERLINE_THICKNESS_BIT_NV = $08000000;
  {$EXTERNALSYM GL_FONT_UNDERLINE_THICKNESS_BIT_NV}
  GL_FONT_HAS_KERNING_BIT_NV = $10000000;
  {$EXTERNALSYM GL_FONT_HAS_KERNING_BIT_NV}
  GL_PRIMARY_COLOR_NV = $852C;
  {$EXTERNALSYM GL_PRIMARY_COLOR_NV}
  GL_SECONDARY_COLOR_NV = $852D;
  {$EXTERNALSYM GL_SECONDARY_COLOR_NV}

{ GL_NV_pixel_data_range }
  GL_WRITE_PIXEL_DATA_RANGE_NV = $8878;
  {$EXTERNALSYM GL_WRITE_PIXEL_DATA_RANGE_NV}
  GL_READ_PIXEL_DATA_RANGE_NV = $8879;
  {$EXTERNALSYM GL_READ_PIXEL_DATA_RANGE_NV}
  GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = $887A;
  {$EXTERNALSYM GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV}
  GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = $887B;
  {$EXTERNALSYM GL_READ_PIXEL_DATA_RANGE_LENGTH_NV}
  GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = $887C;
  {$EXTERNALSYM GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV}
  GL_READ_PIXEL_DATA_RANGE_POINTER_NV = $887D;
  {$EXTERNALSYM GL_READ_PIXEL_DATA_RANGE_POINTER_NV}

{ GL_NV_point_sprite }
  GL_POINT_SPRITE_NV = $8861;
  {$EXTERNALSYM GL_POINT_SPRITE_NV}
  GL_COORD_REPLACE_NV = $8862;
  {$EXTERNALSYM GL_COORD_REPLACE_NV}
  GL_POINT_SPRITE_R_MODE_NV = $8863;
  {$EXTERNALSYM GL_POINT_SPRITE_R_MODE_NV}

{ GL_NV_present_video }
  GL_FRAME_NV = $8E26;
  {$EXTERNALSYM GL_FRAME_NV}
  GL_FIELDS_NV = $8E27;
  {$EXTERNALSYM GL_FIELDS_NV}
  GL_CURRENT_TIME_NV = $8E28;
  {$EXTERNALSYM GL_CURRENT_TIME_NV}
  GL_NUM_FILL_STREAMS_NV = $8E29;
  {$EXTERNALSYM GL_NUM_FILL_STREAMS_NV}
  GL_PRESENT_TIME_NV = $8E2A;
  {$EXTERNALSYM GL_PRESENT_TIME_NV}
  GL_PRESENT_DURATION_NV = $8E2B;
  {$EXTERNALSYM GL_PRESENT_DURATION_NV}

{ GL_NV_primitive_restart }
  GL_PRIMITIVE_RESTART_NV = $8558;
  {$EXTERNALSYM GL_PRIMITIVE_RESTART_NV}
  GL_PRIMITIVE_RESTART_INDEX_NV = $8559;
  {$EXTERNALSYM GL_PRIMITIVE_RESTART_INDEX_NV}

{ GL_NV_register_combiners }
  GL_REGISTER_COMBINERS_NV = $8522;
  {$EXTERNALSYM GL_REGISTER_COMBINERS_NV}
  GL_VARIABLE_A_NV = $8523;
  {$EXTERNALSYM GL_VARIABLE_A_NV}
  GL_VARIABLE_B_NV = $8524;
  {$EXTERNALSYM GL_VARIABLE_B_NV}
  GL_VARIABLE_C_NV = $8525;
  {$EXTERNALSYM GL_VARIABLE_C_NV}
  GL_VARIABLE_D_NV = $8526;
  {$EXTERNALSYM GL_VARIABLE_D_NV}
  GL_VARIABLE_E_NV = $8527;
  {$EXTERNALSYM GL_VARIABLE_E_NV}
  GL_VARIABLE_F_NV = $8528;
  {$EXTERNALSYM GL_VARIABLE_F_NV}
  GL_VARIABLE_G_NV = $8529;
  {$EXTERNALSYM GL_VARIABLE_G_NV}
  GL_CONSTANT_COLOR0_NV = $852A;
  {$EXTERNALSYM GL_CONSTANT_COLOR0_NV}
  GL_CONSTANT_COLOR1_NV = $852B;
  {$EXTERNALSYM GL_CONSTANT_COLOR1_NV}
  GL_SPARE0_NV = $852E;
  {$EXTERNALSYM GL_SPARE0_NV}
  GL_SPARE1_NV = $852F;
  {$EXTERNALSYM GL_SPARE1_NV}
  GL_DISCARD_NV = $8530;
  {$EXTERNALSYM GL_DISCARD_NV}
  GL_E_TIMES_F_NV = $8531;
  {$EXTERNALSYM GL_E_TIMES_F_NV}
  GL_SPARE0_PLUS_SECONDARY_COLOR_NV = $8532;
  {$EXTERNALSYM GL_SPARE0_PLUS_SECONDARY_COLOR_NV}
  GL_UNSIGNED_IDENTITY_NV = $8536;
  {$EXTERNALSYM GL_UNSIGNED_IDENTITY_NV}
  GL_UNSIGNED_INVERT_NV = $8537;
  {$EXTERNALSYM GL_UNSIGNED_INVERT_NV}
  GL_EXPAND_NORMAL_NV = $8538;
  {$EXTERNALSYM GL_EXPAND_NORMAL_NV}
  GL_EXPAND_NEGATE_NV = $8539;
  {$EXTERNALSYM GL_EXPAND_NEGATE_NV}
  GL_HALF_BIAS_NORMAL_NV = $853A;
  {$EXTERNALSYM GL_HALF_BIAS_NORMAL_NV}
  GL_HALF_BIAS_NEGATE_NV = $853B;
  {$EXTERNALSYM GL_HALF_BIAS_NEGATE_NV}
  GL_SIGNED_IDENTITY_NV = $853C;
  {$EXTERNALSYM GL_SIGNED_IDENTITY_NV}
  GL_SIGNED_NEGATE_NV = $853D;
  {$EXTERNALSYM GL_SIGNED_NEGATE_NV}
  GL_SCALE_BY_TWO_NV = $853E;
  {$EXTERNALSYM GL_SCALE_BY_TWO_NV}
  GL_SCALE_BY_FOUR_NV = $853F;
  {$EXTERNALSYM GL_SCALE_BY_FOUR_NV}
  GL_SCALE_BY_ONE_HALF_NV = $8540;
  {$EXTERNALSYM GL_SCALE_BY_ONE_HALF_NV}
  GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = $8541;
  {$EXTERNALSYM GL_BIAS_BY_NEGATIVE_ONE_HALF_NV}
  GL_COMBINER_INPUT_NV = $8542;
  {$EXTERNALSYM GL_COMBINER_INPUT_NV}
  GL_COMBINER_MAPPING_NV = $8543;
  {$EXTERNALSYM GL_COMBINER_MAPPING_NV}
  GL_COMBINER_COMPONENT_USAGE_NV = $8544;
  {$EXTERNALSYM GL_COMBINER_COMPONENT_USAGE_NV}
  GL_COMBINER_AB_DOT_PRODUCT_NV = $8545;
  {$EXTERNALSYM GL_COMBINER_AB_DOT_PRODUCT_NV}
  GL_COMBINER_CD_DOT_PRODUCT_NV = $8546;
  {$EXTERNALSYM GL_COMBINER_CD_DOT_PRODUCT_NV}
  GL_COMBINER_MUX_SUM_NV = $8547;
  {$EXTERNALSYM GL_COMBINER_MUX_SUM_NV}
  GL_COMBINER_SCALE_NV = $8548;
  {$EXTERNALSYM GL_COMBINER_SCALE_NV}
  GL_COMBINER_BIAS_NV = $8549;
  {$EXTERNALSYM GL_COMBINER_BIAS_NV}
  GL_COMBINER_AB_OUTPUT_NV = $854A;
  {$EXTERNALSYM GL_COMBINER_AB_OUTPUT_NV}
  GL_COMBINER_CD_OUTPUT_NV = $854B;
  {$EXTERNALSYM GL_COMBINER_CD_OUTPUT_NV}
  GL_COMBINER_SUM_OUTPUT_NV = $854C;
  {$EXTERNALSYM GL_COMBINER_SUM_OUTPUT_NV}
  GL_MAX_GENERAL_COMBINERS_NV = $854D;
  {$EXTERNALSYM GL_MAX_GENERAL_COMBINERS_NV}
  GL_NUM_GENERAL_COMBINERS_NV = $854E;
  {$EXTERNALSYM GL_NUM_GENERAL_COMBINERS_NV}
  GL_COLOR_SUM_CLAMP_NV = $854F;
  {$EXTERNALSYM GL_COLOR_SUM_CLAMP_NV}
  GL_COMBINER0_NV = $8550;
  {$EXTERNALSYM GL_COMBINER0_NV}
  GL_COMBINER1_NV = $8551;
  {$EXTERNALSYM GL_COMBINER1_NV}
  GL_COMBINER2_NV = $8552;
  {$EXTERNALSYM GL_COMBINER2_NV}
  GL_COMBINER3_NV = $8553;
  {$EXTERNALSYM GL_COMBINER3_NV}
  GL_COMBINER4_NV = $8554;
  {$EXTERNALSYM GL_COMBINER4_NV}
  GL_COMBINER5_NV = $8555;
  {$EXTERNALSYM GL_COMBINER5_NV}
  GL_COMBINER6_NV = $8556;
  {$EXTERNALSYM GL_COMBINER6_NV}
  GL_COMBINER7_NV = $8557;
  {$EXTERNALSYM GL_COMBINER7_NV}

{ GL_NV_register_combiners2 }
  GL_PER_STAGE_CONSTANTS_NV = $8535;
  {$EXTERNALSYM GL_PER_STAGE_CONSTANTS_NV}

{ GL_NV_shader_buffer_load }
  GL_BUFFER_GPU_ADDRESS_NV = $8F1D;
  {$EXTERNALSYM GL_BUFFER_GPU_ADDRESS_NV}
  GL_GPU_ADDRESS_NV = $8F34;
  {$EXTERNALSYM GL_GPU_ADDRESS_NV}
  GL_MAX_SHADER_BUFFER_ADDRESS_NV = $8F35;
  {$EXTERNALSYM GL_MAX_SHADER_BUFFER_ADDRESS_NV}

{ GL_NV_shader_buffer_store }
  GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV = $00000010;
  {$EXTERNALSYM GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV}

{ GL_NV_tessellation_program5 }
  GL_MAX_PROGRAM_PATCH_ATTRIBS_NV = $86D8;
  {$EXTERNALSYM GL_MAX_PROGRAM_PATCH_ATTRIBS_NV}
  GL_TESS_CONTROL_PROGRAM_NV = $891E;
  {$EXTERNALSYM GL_TESS_CONTROL_PROGRAM_NV}
  GL_TESS_EVALUATION_PROGRAM_NV = $891F;
  {$EXTERNALSYM GL_TESS_EVALUATION_PROGRAM_NV}
  GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV = $8C74;
  {$EXTERNALSYM GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV}
  GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV = $8C75;
  {$EXTERNALSYM GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV}

{ GL_NV_texgen_emboss }
  GL_EMBOSS_LIGHT_NV = $855D;
  {$EXTERNALSYM GL_EMBOSS_LIGHT_NV}
  GL_EMBOSS_CONSTANT_NV = $855E;
  {$EXTERNALSYM GL_EMBOSS_CONSTANT_NV}
  GL_EMBOSS_MAP_NV = $855F;
  {$EXTERNALSYM GL_EMBOSS_MAP_NV}

{ GL_NV_texgen_reflection }
  GL_NORMAL_MAP_NV = $8511;
  {$EXTERNALSYM GL_NORMAL_MAP_NV}
  GL_REFLECTION_MAP_NV = $8512;
  {$EXTERNALSYM GL_REFLECTION_MAP_NV}

{ GL_NV_texture_env_combine4 }
  GL_COMBINE4_NV = $8503;
  {$EXTERNALSYM GL_COMBINE4_NV}
  GL_SOURCE3_RGB_NV = $8583;
  {$EXTERNALSYM GL_SOURCE3_RGB_NV}
  GL_SOURCE3_ALPHA_NV = $858B;
  {$EXTERNALSYM GL_SOURCE3_ALPHA_NV}
  GL_OPERAND3_RGB_NV = $8593;
  {$EXTERNALSYM GL_OPERAND3_RGB_NV}
  GL_OPERAND3_ALPHA_NV = $859B;
  {$EXTERNALSYM GL_OPERAND3_ALPHA_NV}

{ GL_NV_texture_expand_normal }
  GL_TEXTURE_UNSIGNED_REMAP_MODE_NV = $888F;
  {$EXTERNALSYM GL_TEXTURE_UNSIGNED_REMAP_MODE_NV}

{ GL_NV_texture_multisample }
  GL_TEXTURE_COVERAGE_SAMPLES_NV = $9045;
  {$EXTERNALSYM GL_TEXTURE_COVERAGE_SAMPLES_NV}
  GL_TEXTURE_COLOR_SAMPLES_NV = $9046;
  {$EXTERNALSYM GL_TEXTURE_COLOR_SAMPLES_NV}

{ GL_NV_texture_rectangle }
  GL_TEXTURE_RECTANGLE_NV = $84F5;
  {$EXTERNALSYM GL_TEXTURE_RECTANGLE_NV}
  GL_TEXTURE_BINDING_RECTANGLE_NV = $84F6;
  {$EXTERNALSYM GL_TEXTURE_BINDING_RECTANGLE_NV}
  GL_PROXY_TEXTURE_RECTANGLE_NV = $84F7;
  {$EXTERNALSYM GL_PROXY_TEXTURE_RECTANGLE_NV}
  GL_MAX_RECTANGLE_TEXTURE_SIZE_NV = $84F8;
  {$EXTERNALSYM GL_MAX_RECTANGLE_TEXTURE_SIZE_NV}

{ GL_NV_texture_shader }
  GL_OFFSET_TEXTURE_RECTANGLE_NV = $864C;
  {$EXTERNALSYM GL_OFFSET_TEXTURE_RECTANGLE_NV}
  GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = $864D;
  {$EXTERNALSYM GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV}
  GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = $864E;
  {$EXTERNALSYM GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV}
  GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = $86D9;
  {$EXTERNALSYM GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV}
  GL_UNSIGNED_INT_S8_S8_8_8_NV = $86DA;
  {$EXTERNALSYM GL_UNSIGNED_INT_S8_S8_8_8_NV}
  GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = $86DB;
  {$EXTERNALSYM GL_UNSIGNED_INT_8_8_S8_S8_REV_NV}
  GL_DSDT_MAG_INTENSITY_NV = $86DC;
  {$EXTERNALSYM GL_DSDT_MAG_INTENSITY_NV}
  GL_SHADER_CONSISTENT_NV = $86DD;
  {$EXTERNALSYM GL_SHADER_CONSISTENT_NV}
  GL_TEXTURE_SHADER_NV = $86DE;
  {$EXTERNALSYM GL_TEXTURE_SHADER_NV}
  GL_SHADER_OPERATION_NV = $86DF;
  {$EXTERNALSYM GL_SHADER_OPERATION_NV}
  GL_CULL_MODES_NV = $86E0;
  {$EXTERNALSYM GL_CULL_MODES_NV}
  GL_OFFSET_TEXTURE_MATRIX_NV = $86E1;
  {$EXTERNALSYM GL_OFFSET_TEXTURE_MATRIX_NV}
  GL_OFFSET_TEXTURE_SCALE_NV = $86E2;
  {$EXTERNALSYM GL_OFFSET_TEXTURE_SCALE_NV}
  GL_OFFSET_TEXTURE_BIAS_NV = $86E3;
  {$EXTERNALSYM GL_OFFSET_TEXTURE_BIAS_NV}
  GL_OFFSET_TEXTURE_2D_MATRIX_NV = $86E1;
  {$EXTERNALSYM GL_OFFSET_TEXTURE_2D_MATRIX_NV}
  GL_OFFSET_TEXTURE_2D_SCALE_NV = $86E2;
  {$EXTERNALSYM GL_OFFSET_TEXTURE_2D_SCALE_NV}
  GL_OFFSET_TEXTURE_2D_BIAS_NV = $86E3;
  {$EXTERNALSYM GL_OFFSET_TEXTURE_2D_BIAS_NV}
  GL_PREVIOUS_TEXTURE_INPUT_NV = $86E4;
  {$EXTERNALSYM GL_PREVIOUS_TEXTURE_INPUT_NV}
  GL_CONST_EYE_NV = $86E5;
  {$EXTERNALSYM GL_CONST_EYE_NV}
  GL_PASS_THROUGH_NV = $86E6;
  {$EXTERNALSYM GL_PASS_THROUGH_NV}
  GL_CULL_FRAGMENT_NV = $86E7;
  {$EXTERNALSYM GL_CULL_FRAGMENT_NV}
  GL_OFFSET_TEXTURE_2D_NV = $86E8;
  {$EXTERNALSYM GL_OFFSET_TEXTURE_2D_NV}
  GL_DEPENDENT_AR_TEXTURE_2D_NV = $86E9;
  {$EXTERNALSYM GL_DEPENDENT_AR_TEXTURE_2D_NV}
  GL_DEPENDENT_GB_TEXTURE_2D_NV = $86EA;
  {$EXTERNALSYM GL_DEPENDENT_GB_TEXTURE_2D_NV}
  GL_DOT_PRODUCT_NV = $86EC;
  {$EXTERNALSYM GL_DOT_PRODUCT_NV}
  GL_DOT_PRODUCT_DEPTH_REPLACE_NV = $86ED;
  {$EXTERNALSYM GL_DOT_PRODUCT_DEPTH_REPLACE_NV}
  GL_DOT_PRODUCT_TEXTURE_2D_NV = $86EE;
  {$EXTERNALSYM GL_DOT_PRODUCT_TEXTURE_2D_NV}
  GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = $86F0;
  {$EXTERNALSYM GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV}
  GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = $86F1;
  {$EXTERNALSYM GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV}
  GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = $86F2;
  {$EXTERNALSYM GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV}
  GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = $86F3;
  {$EXTERNALSYM GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV}
  GL_HILO_NV = $86F4;
  {$EXTERNALSYM GL_HILO_NV}
  GL_DSDT_NV = $86F5;
  {$EXTERNALSYM GL_DSDT_NV}
  GL_DSDT_MAG_NV = $86F6;
  {$EXTERNALSYM GL_DSDT_MAG_NV}
  GL_DSDT_MAG_VIB_NV = $86F7;
  {$EXTERNALSYM GL_DSDT_MAG_VIB_NV}
  GL_HILO16_NV = $86F8;
  {$EXTERNALSYM GL_HILO16_NV}
  GL_SIGNED_HILO_NV = $86F9;
  {$EXTERNALSYM GL_SIGNED_HILO_NV}
  GL_SIGNED_HILO16_NV = $86FA;
  {$EXTERNALSYM GL_SIGNED_HILO16_NV}
  GL_SIGNED_RGBA_NV = $86FB;
  {$EXTERNALSYM GL_SIGNED_RGBA_NV}
  GL_SIGNED_RGBA8_NV = $86FC;
  {$EXTERNALSYM GL_SIGNED_RGBA8_NV}
  GL_SIGNED_RGB_NV = $86FE;
  {$EXTERNALSYM GL_SIGNED_RGB_NV}
  GL_SIGNED_RGB8_NV = $86FF;
  {$EXTERNALSYM GL_SIGNED_RGB8_NV}
  GL_SIGNED_LUMINANCE_NV = $8701;
  {$EXTERNALSYM GL_SIGNED_LUMINANCE_NV}
  GL_SIGNED_LUMINANCE8_NV = $8702;
  {$EXTERNALSYM GL_SIGNED_LUMINANCE8_NV}
  GL_SIGNED_LUMINANCE_ALPHA_NV = $8703;
  {$EXTERNALSYM GL_SIGNED_LUMINANCE_ALPHA_NV}
  GL_SIGNED_LUMINANCE8_ALPHA8_NV = $8704;
  {$EXTERNALSYM GL_SIGNED_LUMINANCE8_ALPHA8_NV}
  GL_SIGNED_ALPHA_NV = $8705;
  {$EXTERNALSYM GL_SIGNED_ALPHA_NV}
  GL_SIGNED_ALPHA8_NV = $8706;
  {$EXTERNALSYM GL_SIGNED_ALPHA8_NV}
  GL_SIGNED_INTENSITY_NV = $8707;
  {$EXTERNALSYM GL_SIGNED_INTENSITY_NV}
  GL_SIGNED_INTENSITY8_NV = $8708;
  {$EXTERNALSYM GL_SIGNED_INTENSITY8_NV}
  GL_DSDT8_NV = $8709;
  {$EXTERNALSYM GL_DSDT8_NV}
  GL_DSDT8_MAG8_NV = $870A;
  {$EXTERNALSYM GL_DSDT8_MAG8_NV}
  GL_DSDT8_MAG8_INTENSITY8_NV = $870B;
  {$EXTERNALSYM GL_DSDT8_MAG8_INTENSITY8_NV}
  GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = $870C;
  {$EXTERNALSYM GL_SIGNED_RGB_UNSIGNED_ALPHA_NV}
  GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = $870D;
  {$EXTERNALSYM GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV}
  GL_HI_SCALE_NV = $870E;
  {$EXTERNALSYM GL_HI_SCALE_NV}
  GL_LO_SCALE_NV = $870F;
  {$EXTERNALSYM GL_LO_SCALE_NV}
  GL_DS_SCALE_NV = $8710;
  {$EXTERNALSYM GL_DS_SCALE_NV}
  GL_DT_SCALE_NV = $8711;
  {$EXTERNALSYM GL_DT_SCALE_NV}
  GL_MAGNITUDE_SCALE_NV = $8712;
  {$EXTERNALSYM GL_MAGNITUDE_SCALE_NV}
  GL_VIBRANCE_SCALE_NV = $8713;
  {$EXTERNALSYM GL_VIBRANCE_SCALE_NV}
  GL_HI_BIAS_NV = $8714;
  {$EXTERNALSYM GL_HI_BIAS_NV}
  GL_LO_BIAS_NV = $8715;
  {$EXTERNALSYM GL_LO_BIAS_NV}
  GL_DS_BIAS_NV = $8716;
  {$EXTERNALSYM GL_DS_BIAS_NV}
  GL_DT_BIAS_NV = $8717;
  {$EXTERNALSYM GL_DT_BIAS_NV}
  GL_MAGNITUDE_BIAS_NV = $8718;
  {$EXTERNALSYM GL_MAGNITUDE_BIAS_NV}
  GL_VIBRANCE_BIAS_NV = $8719;
  {$EXTERNALSYM GL_VIBRANCE_BIAS_NV}
  GL_TEXTURE_BORDER_VALUES_NV = $871A;
  {$EXTERNALSYM GL_TEXTURE_BORDER_VALUES_NV}
  GL_TEXTURE_HI_SIZE_NV = $871B;
  {$EXTERNALSYM GL_TEXTURE_HI_SIZE_NV}
  GL_TEXTURE_LO_SIZE_NV = $871C;
  {$EXTERNALSYM GL_TEXTURE_LO_SIZE_NV}
  GL_TEXTURE_DS_SIZE_NV = $871D;
  {$EXTERNALSYM GL_TEXTURE_DS_SIZE_NV}
  GL_TEXTURE_DT_SIZE_NV = $871E;
  {$EXTERNALSYM GL_TEXTURE_DT_SIZE_NV}
  GL_TEXTURE_MAG_SIZE_NV = $871F;
  {$EXTERNALSYM GL_TEXTURE_MAG_SIZE_NV}

{ GL_NV_texture_shader2 }
  GL_DOT_PRODUCT_TEXTURE_3D_NV = $86EF;
  {$EXTERNALSYM GL_DOT_PRODUCT_TEXTURE_3D_NV}

{ GL_NV_texture_shader3 }
  GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV = $8850;
  {$EXTERNALSYM GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV}
  GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = $8851;
  {$EXTERNALSYM GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV}
  GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = $8852;
  {$EXTERNALSYM GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV}
  GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = $8853;
  {$EXTERNALSYM GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV}
  GL_OFFSET_HILO_TEXTURE_2D_NV = $8854;
  {$EXTERNALSYM GL_OFFSET_HILO_TEXTURE_2D_NV}
  GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV = $8855;
  {$EXTERNALSYM GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV}
  GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = $8856;
  {$EXTERNALSYM GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV}
  GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = $8857;
  {$EXTERNALSYM GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV}
  GL_DEPENDENT_HILO_TEXTURE_2D_NV = $8858;
  {$EXTERNALSYM GL_DEPENDENT_HILO_TEXTURE_2D_NV}
  GL_DEPENDENT_RGB_TEXTURE_3D_NV = $8859;
  {$EXTERNALSYM GL_DEPENDENT_RGB_TEXTURE_3D_NV}
  GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = $885A;
  {$EXTERNALSYM GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV}
  GL_DOT_PRODUCT_PASS_THROUGH_NV = $885B;
  {$EXTERNALSYM GL_DOT_PRODUCT_PASS_THROUGH_NV}
  GL_DOT_PRODUCT_TEXTURE_1D_NV = $885C;
  {$EXTERNALSYM GL_DOT_PRODUCT_TEXTURE_1D_NV}
  GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = $885D;
  {$EXTERNALSYM GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV}
  GL_HILO8_NV = $885E;
  {$EXTERNALSYM GL_HILO8_NV}
  GL_SIGNED_HILO8_NV = $885F;
  {$EXTERNALSYM GL_SIGNED_HILO8_NV}
  GL_FORCE_BLUE_TO_ONE_NV = $8860;
  {$EXTERNALSYM GL_FORCE_BLUE_TO_ONE_NV}

{ GL_NV_transform_feedback }
  GL_BACK_PRIMARY_COLOR_NV = $8C77;
  {$EXTERNALSYM GL_BACK_PRIMARY_COLOR_NV}
  GL_BACK_SECONDARY_COLOR_NV = $8C78;
  {$EXTERNALSYM GL_BACK_SECONDARY_COLOR_NV}
  GL_TEXTURE_COORD_NV = $8C79;
  {$EXTERNALSYM GL_TEXTURE_COORD_NV}
  GL_CLIP_DISTANCE_NV = $8C7A;
  {$EXTERNALSYM GL_CLIP_DISTANCE_NV}
  GL_VERTEX_ID_NV = $8C7B;
  {$EXTERNALSYM GL_VERTEX_ID_NV}
  GL_PRIMITIVE_ID_NV = $8C7C;
  {$EXTERNALSYM GL_PRIMITIVE_ID_NV}
  GL_GENERIC_ATTRIB_NV = $8C7D;
  {$EXTERNALSYM GL_GENERIC_ATTRIB_NV}
  GL_TRANSFORM_FEEDBACK_ATTRIBS_NV = $8C7E;
  {$EXTERNALSYM GL_TRANSFORM_FEEDBACK_ATTRIBS_NV}
  GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV = $8C7F;
  {$EXTERNALSYM GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV}
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV = $8C80;
  {$EXTERNALSYM GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV}
  GL_ACTIVE_VARYINGS_NV = $8C81;
  {$EXTERNALSYM GL_ACTIVE_VARYINGS_NV}
  GL_ACTIVE_VARYING_MAX_LENGTH_NV = $8C82;
  {$EXTERNALSYM GL_ACTIVE_VARYING_MAX_LENGTH_NV}
  GL_TRANSFORM_FEEDBACK_VARYINGS_NV = $8C83;
  {$EXTERNALSYM GL_TRANSFORM_FEEDBACK_VARYINGS_NV}
  GL_TRANSFORM_FEEDBACK_BUFFER_START_NV = $8C84;
  {$EXTERNALSYM GL_TRANSFORM_FEEDBACK_BUFFER_START_NV}
  GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV = $8C85;
  {$EXTERNALSYM GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV}
  GL_TRANSFORM_FEEDBACK_RECORD_NV = $8C86;
  {$EXTERNALSYM GL_TRANSFORM_FEEDBACK_RECORD_NV}
  GL_PRIMITIVES_GENERATED_NV = $8C87;
  {$EXTERNALSYM GL_PRIMITIVES_GENERATED_NV}
  GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV = $8C88;
  {$EXTERNALSYM GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV}
  GL_RASTERIZER_DISCARD_NV = $8C89;
  {$EXTERNALSYM GL_RASTERIZER_DISCARD_NV}
  GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV = $8C8A;
  {$EXTERNALSYM GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV}
  GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV = $8C8B;
  {$EXTERNALSYM GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV}
  GL_INTERLEAVED_ATTRIBS_NV = $8C8C;
  {$EXTERNALSYM GL_INTERLEAVED_ATTRIBS_NV}
  GL_SEPARATE_ATTRIBS_NV = $8C8D;
  {$EXTERNALSYM GL_SEPARATE_ATTRIBS_NV}
  GL_TRANSFORM_FEEDBACK_BUFFER_NV = $8C8E;
  {$EXTERNALSYM GL_TRANSFORM_FEEDBACK_BUFFER_NV}
  GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV = $8C8F;
  {$EXTERNALSYM GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV}
  GL_LAYER_NV = $8DAA;
  {$EXTERNALSYM GL_LAYER_NV}
  GL_NEXT_BUFFER_NV = -2;
  {$EXTERNALSYM GL_NEXT_BUFFER_NV}
  GL_SKIP_COMPONENTS4_NV = -3;
  {$EXTERNALSYM GL_SKIP_COMPONENTS4_NV}
  GL_SKIP_COMPONENTS3_NV = -4;
  {$EXTERNALSYM GL_SKIP_COMPONENTS3_NV}
  GL_SKIP_COMPONENTS2_NV = -5;
  {$EXTERNALSYM GL_SKIP_COMPONENTS2_NV}
  GL_SKIP_COMPONENTS1_NV = -6;
  {$EXTERNALSYM GL_SKIP_COMPONENTS1_NV}

{ GL_NV_transform_feedback2 }
  GL_TRANSFORM_FEEDBACK_NV = $8E22;
  {$EXTERNALSYM GL_TRANSFORM_FEEDBACK_NV}
  GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV = $8E23;
  {$EXTERNALSYM GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV}
  GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV = $8E24;
  {$EXTERNALSYM GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV}
  GL_TRANSFORM_FEEDBACK_BINDING_NV = $8E25;
  {$EXTERNALSYM GL_TRANSFORM_FEEDBACK_BINDING_NV}
  GL_SURFACE_STATE_NV = $86EB;
  {$EXTERNALSYM GL_SURFACE_STATE_NV}
  GL_SURFACE_REGISTERED_NV = $86FD;
  {$EXTERNALSYM GL_SURFACE_REGISTERED_NV}
  GL_SURFACE_MAPPED_NV = $8700;
  {$EXTERNALSYM GL_SURFACE_MAPPED_NV}
  GL_WRITE_DISCARD_NV = $88BE;
  {$EXTERNALSYM GL_WRITE_DISCARD_NV}

{ GL_NV_vertex_array_range }
  GL_VERTEX_ARRAY_RANGE_NV = $851D;
  {$EXTERNALSYM GL_VERTEX_ARRAY_RANGE_NV}
  GL_VERTEX_ARRAY_RANGE_LENGTH_NV = $851E;
  {$EXTERNALSYM GL_VERTEX_ARRAY_RANGE_LENGTH_NV}
  GL_VERTEX_ARRAY_RANGE_VALID_NV = $851F;
  {$EXTERNALSYM GL_VERTEX_ARRAY_RANGE_VALID_NV}
  GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = $8520;
  {$EXTERNALSYM GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV}
  GL_VERTEX_ARRAY_RANGE_POINTER_NV = $8521;
  {$EXTERNALSYM GL_VERTEX_ARRAY_RANGE_POINTER_NV}

{ GL_NV_vertex_array_range2 }
  GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = $8533;
  {$EXTERNALSYM GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV}

{ GL_NV_vertex_buffer_unified_memory }
  GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV = $8F1E;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV}
  GL_ELEMENT_ARRAY_UNIFIED_NV = $8F1F;
  {$EXTERNALSYM GL_ELEMENT_ARRAY_UNIFIED_NV}
  GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV = $8F20;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV}
  GL_VERTEX_ARRAY_ADDRESS_NV = $8F21;
  {$EXTERNALSYM GL_VERTEX_ARRAY_ADDRESS_NV}
  GL_NORMAL_ARRAY_ADDRESS_NV = $8F22;
  {$EXTERNALSYM GL_NORMAL_ARRAY_ADDRESS_NV}
  GL_COLOR_ARRAY_ADDRESS_NV = $8F23;
  {$EXTERNALSYM GL_COLOR_ARRAY_ADDRESS_NV}
  GL_INDEX_ARRAY_ADDRESS_NV = $8F24;
  {$EXTERNALSYM GL_INDEX_ARRAY_ADDRESS_NV}
  GL_TEXTURE_COORD_ARRAY_ADDRESS_NV = $8F25;
  {$EXTERNALSYM GL_TEXTURE_COORD_ARRAY_ADDRESS_NV}
  GL_EDGE_FLAG_ARRAY_ADDRESS_NV = $8F26;
  {$EXTERNALSYM GL_EDGE_FLAG_ARRAY_ADDRESS_NV}
  GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV = $8F27;
  {$EXTERNALSYM GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV}
  GL_FOG_COORD_ARRAY_ADDRESS_NV = $8F28;
  {$EXTERNALSYM GL_FOG_COORD_ARRAY_ADDRESS_NV}
  GL_ELEMENT_ARRAY_ADDRESS_NV = $8F29;
  {$EXTERNALSYM GL_ELEMENT_ARRAY_ADDRESS_NV}
  GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV = $8F2A;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV}
  GL_VERTEX_ARRAY_LENGTH_NV = $8F2B;
  {$EXTERNALSYM GL_VERTEX_ARRAY_LENGTH_NV}
  GL_NORMAL_ARRAY_LENGTH_NV = $8F2C;
  {$EXTERNALSYM GL_NORMAL_ARRAY_LENGTH_NV}
  GL_COLOR_ARRAY_LENGTH_NV = $8F2D;
  {$EXTERNALSYM GL_COLOR_ARRAY_LENGTH_NV}
  GL_INDEX_ARRAY_LENGTH_NV = $8F2E;
  {$EXTERNALSYM GL_INDEX_ARRAY_LENGTH_NV}
  GL_TEXTURE_COORD_ARRAY_LENGTH_NV = $8F2F;
  {$EXTERNALSYM GL_TEXTURE_COORD_ARRAY_LENGTH_NV}
  GL_EDGE_FLAG_ARRAY_LENGTH_NV = $8F30;
  {$EXTERNALSYM GL_EDGE_FLAG_ARRAY_LENGTH_NV}
  GL_SECONDARY_COLOR_ARRAY_LENGTH_NV = $8F31;
  {$EXTERNALSYM GL_SECONDARY_COLOR_ARRAY_LENGTH_NV}
  GL_FOG_COORD_ARRAY_LENGTH_NV = $8F32;
  {$EXTERNALSYM GL_FOG_COORD_ARRAY_LENGTH_NV}
  GL_ELEMENT_ARRAY_LENGTH_NV = $8F33;
  {$EXTERNALSYM GL_ELEMENT_ARRAY_LENGTH_NV}
  GL_DRAW_INDIRECT_UNIFIED_NV = $8F40;
  {$EXTERNALSYM GL_DRAW_INDIRECT_UNIFIED_NV}
  GL_DRAW_INDIRECT_ADDRESS_NV = $8F41;
  {$EXTERNALSYM GL_DRAW_INDIRECT_ADDRESS_NV}
  GL_DRAW_INDIRECT_LENGTH_NV = $8F42;
  {$EXTERNALSYM GL_DRAW_INDIRECT_LENGTH_NV}

{ GL_NV_vertex_program }
  GL_VERTEX_PROGRAM_NV = $8620;
  {$EXTERNALSYM GL_VERTEX_PROGRAM_NV}
  GL_VERTEX_STATE_PROGRAM_NV = $8621;
  {$EXTERNALSYM GL_VERTEX_STATE_PROGRAM_NV}
  GL_ATTRIB_ARRAY_SIZE_NV = $8623;
  {$EXTERNALSYM GL_ATTRIB_ARRAY_SIZE_NV}
  GL_ATTRIB_ARRAY_STRIDE_NV = $8624;
  {$EXTERNALSYM GL_ATTRIB_ARRAY_STRIDE_NV}
  GL_ATTRIB_ARRAY_TYPE_NV = $8625;
  {$EXTERNALSYM GL_ATTRIB_ARRAY_TYPE_NV}
  GL_CURRENT_ATTRIB_NV = $8626;
  {$EXTERNALSYM GL_CURRENT_ATTRIB_NV}
  GL_PROGRAM_LENGTH_NV = $8627;
  {$EXTERNALSYM GL_PROGRAM_LENGTH_NV}
  GL_PROGRAM_STRING_NV = $8628;
  {$EXTERNALSYM GL_PROGRAM_STRING_NV}
  GL_MODELVIEW_PROJECTION_NV = $8629;
  {$EXTERNALSYM GL_MODELVIEW_PROJECTION_NV}
  GL_IDENTITY_NV = $862A;
  {$EXTERNALSYM GL_IDENTITY_NV}
  GL_INVERSE_NV = $862B;
  {$EXTERNALSYM GL_INVERSE_NV}
  GL_TRANSPOSE_NV = $862C;
  {$EXTERNALSYM GL_TRANSPOSE_NV}
  GL_INVERSE_TRANSPOSE_NV = $862D;
  {$EXTERNALSYM GL_INVERSE_TRANSPOSE_NV}
  GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV = $862E;
  {$EXTERNALSYM GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV}
  GL_MAX_TRACK_MATRICES_NV = $862F;
  {$EXTERNALSYM GL_MAX_TRACK_MATRICES_NV}
  GL_MATRIX0_NV = $8630;
  {$EXTERNALSYM GL_MATRIX0_NV}
  GL_MATRIX1_NV = $8631;
  {$EXTERNALSYM GL_MATRIX1_NV}
  GL_MATRIX2_NV = $8632;
  {$EXTERNALSYM GL_MATRIX2_NV}
  GL_MATRIX3_NV = $8633;
  {$EXTERNALSYM GL_MATRIX3_NV}
  GL_MATRIX4_NV = $8634;
  {$EXTERNALSYM GL_MATRIX4_NV}
  GL_MATRIX5_NV = $8635;
  {$EXTERNALSYM GL_MATRIX5_NV}
  GL_MATRIX6_NV = $8636;
  {$EXTERNALSYM GL_MATRIX6_NV}
  GL_MATRIX7_NV = $8637;
  {$EXTERNALSYM GL_MATRIX7_NV}
  GL_CURRENT_MATRIX_STACK_DEPTH_NV = $8640;
  {$EXTERNALSYM GL_CURRENT_MATRIX_STACK_DEPTH_NV}
  GL_CURRENT_MATRIX_NV = $8641;
  {$EXTERNALSYM GL_CURRENT_MATRIX_NV}
  GL_VERTEX_PROGRAM_POINT_SIZE_NV = $8642;
  {$EXTERNALSYM GL_VERTEX_PROGRAM_POINT_SIZE_NV}
  GL_VERTEX_PROGRAM_TWO_SIDE_NV = $8643;
  {$EXTERNALSYM GL_VERTEX_PROGRAM_TWO_SIDE_NV}
  GL_PROGRAM_PARAMETER_NV = $8644;
  {$EXTERNALSYM GL_PROGRAM_PARAMETER_NV}
  GL_ATTRIB_ARRAY_POINTER_NV = $8645;
  {$EXTERNALSYM GL_ATTRIB_ARRAY_POINTER_NV}
  GL_PROGRAM_TARGET_NV = $8646;
  {$EXTERNALSYM GL_PROGRAM_TARGET_NV}
  GL_PROGRAM_RESIDENT_NV = $8647;
  {$EXTERNALSYM GL_PROGRAM_RESIDENT_NV}
  GL_TRACK_MATRIX_NV = $8648;
  {$EXTERNALSYM GL_TRACK_MATRIX_NV}
  GL_TRACK_MATRIX_TRANSFORM_NV = $8649;
  {$EXTERNALSYM GL_TRACK_MATRIX_TRANSFORM_NV}
  GL_VERTEX_PROGRAM_BINDING_NV = $864A;
  {$EXTERNALSYM GL_VERTEX_PROGRAM_BINDING_NV}
  GL_PROGRAM_ERROR_POSITION_NV = $864B;
  {$EXTERNALSYM GL_PROGRAM_ERROR_POSITION_NV}
  GL_VERTEX_ATTRIB_ARRAY0_NV = $8650;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_ARRAY0_NV}
  GL_VERTEX_ATTRIB_ARRAY1_NV = $8651;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_ARRAY1_NV}
  GL_VERTEX_ATTRIB_ARRAY2_NV = $8652;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_ARRAY2_NV}
  GL_VERTEX_ATTRIB_ARRAY3_NV = $8653;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_ARRAY3_NV}
  GL_VERTEX_ATTRIB_ARRAY4_NV = $8654;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_ARRAY4_NV}
  GL_VERTEX_ATTRIB_ARRAY5_NV = $8655;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_ARRAY5_NV}
  GL_VERTEX_ATTRIB_ARRAY6_NV = $8656;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_ARRAY6_NV}
  GL_VERTEX_ATTRIB_ARRAY7_NV = $8657;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_ARRAY7_NV}
  GL_VERTEX_ATTRIB_ARRAY8_NV = $8658;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_ARRAY8_NV}
  GL_VERTEX_ATTRIB_ARRAY9_NV = $8659;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_ARRAY9_NV}
  GL_VERTEX_ATTRIB_ARRAY10_NV = $865A;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_ARRAY10_NV}
  GL_VERTEX_ATTRIB_ARRAY11_NV = $865B;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_ARRAY11_NV}
  GL_VERTEX_ATTRIB_ARRAY12_NV = $865C;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_ARRAY12_NV}
  GL_VERTEX_ATTRIB_ARRAY13_NV = $865D;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_ARRAY13_NV}
  GL_VERTEX_ATTRIB_ARRAY14_NV = $865E;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_ARRAY14_NV}
  GL_VERTEX_ATTRIB_ARRAY15_NV = $865F;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_ARRAY15_NV}
  GL_MAP1_VERTEX_ATTRIB0_4_NV = $8660;
  {$EXTERNALSYM GL_MAP1_VERTEX_ATTRIB0_4_NV}
  GL_MAP1_VERTEX_ATTRIB1_4_NV = $8661;
  {$EXTERNALSYM GL_MAP1_VERTEX_ATTRIB1_4_NV}
  GL_MAP1_VERTEX_ATTRIB2_4_NV = $8662;
  {$EXTERNALSYM GL_MAP1_VERTEX_ATTRIB2_4_NV}
  GL_MAP1_VERTEX_ATTRIB3_4_NV = $8663;
  {$EXTERNALSYM GL_MAP1_VERTEX_ATTRIB3_4_NV}
  GL_MAP1_VERTEX_ATTRIB4_4_NV = $8664;
  {$EXTERNALSYM GL_MAP1_VERTEX_ATTRIB4_4_NV}
  GL_MAP1_VERTEX_ATTRIB5_4_NV = $8665;
  {$EXTERNALSYM GL_MAP1_VERTEX_ATTRIB5_4_NV}
  GL_MAP1_VERTEX_ATTRIB6_4_NV = $8666;
  {$EXTERNALSYM GL_MAP1_VERTEX_ATTRIB6_4_NV}
  GL_MAP1_VERTEX_ATTRIB7_4_NV = $8667;
  {$EXTERNALSYM GL_MAP1_VERTEX_ATTRIB7_4_NV}
  GL_MAP1_VERTEX_ATTRIB8_4_NV = $8668;
  {$EXTERNALSYM GL_MAP1_VERTEX_ATTRIB8_4_NV}
  GL_MAP1_VERTEX_ATTRIB9_4_NV = $8669;
  {$EXTERNALSYM GL_MAP1_VERTEX_ATTRIB9_4_NV}
  GL_MAP1_VERTEX_ATTRIB10_4_NV = $866A;
  {$EXTERNALSYM GL_MAP1_VERTEX_ATTRIB10_4_NV}
  GL_MAP1_VERTEX_ATTRIB11_4_NV = $866B;
  {$EXTERNALSYM GL_MAP1_VERTEX_ATTRIB11_4_NV}
  GL_MAP1_VERTEX_ATTRIB12_4_NV = $866C;
  {$EXTERNALSYM GL_MAP1_VERTEX_ATTRIB12_4_NV}
  GL_MAP1_VERTEX_ATTRIB13_4_NV = $866D;
  {$EXTERNALSYM GL_MAP1_VERTEX_ATTRIB13_4_NV}
  GL_MAP1_VERTEX_ATTRIB14_4_NV = $866E;
  {$EXTERNALSYM GL_MAP1_VERTEX_ATTRIB14_4_NV}
  GL_MAP1_VERTEX_ATTRIB15_4_NV = $866F;
  {$EXTERNALSYM GL_MAP1_VERTEX_ATTRIB15_4_NV}
  GL_MAP2_VERTEX_ATTRIB0_4_NV = $8670;
  {$EXTERNALSYM GL_MAP2_VERTEX_ATTRIB0_4_NV}
  GL_MAP2_VERTEX_ATTRIB1_4_NV = $8671;
  {$EXTERNALSYM GL_MAP2_VERTEX_ATTRIB1_4_NV}
  GL_MAP2_VERTEX_ATTRIB2_4_NV = $8672;
  {$EXTERNALSYM GL_MAP2_VERTEX_ATTRIB2_4_NV}
  GL_MAP2_VERTEX_ATTRIB3_4_NV = $8673;
  {$EXTERNALSYM GL_MAP2_VERTEX_ATTRIB3_4_NV}
  GL_MAP2_VERTEX_ATTRIB4_4_NV = $8674;
  {$EXTERNALSYM GL_MAP2_VERTEX_ATTRIB4_4_NV}
  GL_MAP2_VERTEX_ATTRIB5_4_NV = $8675;
  {$EXTERNALSYM GL_MAP2_VERTEX_ATTRIB5_4_NV}
  GL_MAP2_VERTEX_ATTRIB6_4_NV = $8676;
  {$EXTERNALSYM GL_MAP2_VERTEX_ATTRIB6_4_NV}
  GL_MAP2_VERTEX_ATTRIB7_4_NV = $8677;
  {$EXTERNALSYM GL_MAP2_VERTEX_ATTRIB7_4_NV}
  GL_MAP2_VERTEX_ATTRIB8_4_NV = $8678;
  {$EXTERNALSYM GL_MAP2_VERTEX_ATTRIB8_4_NV}
  GL_MAP2_VERTEX_ATTRIB9_4_NV = $8679;
  {$EXTERNALSYM GL_MAP2_VERTEX_ATTRIB9_4_NV}
  GL_MAP2_VERTEX_ATTRIB10_4_NV = $867A;
  {$EXTERNALSYM GL_MAP2_VERTEX_ATTRIB10_4_NV}
  GL_MAP2_VERTEX_ATTRIB11_4_NV = $867B;
  {$EXTERNALSYM GL_MAP2_VERTEX_ATTRIB11_4_NV}
  GL_MAP2_VERTEX_ATTRIB12_4_NV = $867C;
  {$EXTERNALSYM GL_MAP2_VERTEX_ATTRIB12_4_NV}
  GL_MAP2_VERTEX_ATTRIB13_4_NV = $867D;
  {$EXTERNALSYM GL_MAP2_VERTEX_ATTRIB13_4_NV}
  GL_MAP2_VERTEX_ATTRIB14_4_NV = $867E;
  {$EXTERNALSYM GL_MAP2_VERTEX_ATTRIB14_4_NV}
  GL_MAP2_VERTEX_ATTRIB15_4_NV = $867F;
  {$EXTERNALSYM GL_MAP2_VERTEX_ATTRIB15_4_NV}

{ GL_NV_vertex_program4 }
  GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV = $88FD;
  {$EXTERNALSYM GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV}

{ GL_NV_video_capture }
  GL_VIDEO_BUFFER_NV = $9020;
  {$EXTERNALSYM GL_VIDEO_BUFFER_NV}
  GL_VIDEO_BUFFER_BINDING_NV = $9021;
  {$EXTERNALSYM GL_VIDEO_BUFFER_BINDING_NV}
  GL_FIELD_UPPER_NV = $9022;
  {$EXTERNALSYM GL_FIELD_UPPER_NV}
  GL_FIELD_LOWER_NV = $9023;
  {$EXTERNALSYM GL_FIELD_LOWER_NV}
  GL_NUM_VIDEO_CAPTURE_STREAMS_NV = $9024;
  {$EXTERNALSYM GL_NUM_VIDEO_CAPTURE_STREAMS_NV}
  GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV = $9025;
  {$EXTERNALSYM GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV}
  GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV = $9026;
  {$EXTERNALSYM GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV}
  GL_LAST_VIDEO_CAPTURE_STATUS_NV = $9027;
  {$EXTERNALSYM GL_LAST_VIDEO_CAPTURE_STATUS_NV}
  GL_VIDEO_BUFFER_PITCH_NV = $9028;
  {$EXTERNALSYM GL_VIDEO_BUFFER_PITCH_NV}
  GL_VIDEO_COLOR_CONVERSION_MATRIX_NV = $9029;
  {$EXTERNALSYM GL_VIDEO_COLOR_CONVERSION_MATRIX_NV}
  GL_VIDEO_COLOR_CONVERSION_MAX_NV = $902A;
  {$EXTERNALSYM GL_VIDEO_COLOR_CONVERSION_MAX_NV}
  GL_VIDEO_COLOR_CONVERSION_MIN_NV = $902B;
  {$EXTERNALSYM GL_VIDEO_COLOR_CONVERSION_MIN_NV}
  GL_VIDEO_COLOR_CONVERSION_OFFSET_NV = $902C;
  {$EXTERNALSYM GL_VIDEO_COLOR_CONVERSION_OFFSET_NV}
  GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV = $902D;
  {$EXTERNALSYM GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV}
  GL_PARTIAL_SUCCESS_NV = $902E;
  {$EXTERNALSYM GL_PARTIAL_SUCCESS_NV}
  GL_SUCCESS_NV = $902F;
  {$EXTERNALSYM GL_SUCCESS_NV}
  GL_FAILURE_NV = $9030;
  {$EXTERNALSYM GL_FAILURE_NV}
  GL_YCBYCR8_422_NV = $9031;
  {$EXTERNALSYM GL_YCBYCR8_422_NV}
  GL_YCBAYCR8A_4224_NV = $9032;
  {$EXTERNALSYM GL_YCBAYCR8A_4224_NV}
  GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV = $9033;
  {$EXTERNALSYM GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV}
  GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV = $9034;
  {$EXTERNALSYM GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV}
  GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV = $9035;
  {$EXTERNALSYM GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV}
  GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV = $9036;
  {$EXTERNALSYM GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV}
  GL_Z4Y12Z4CB12Z4CR12_444_NV = $9037;
  {$EXTERNALSYM GL_Z4Y12Z4CB12Z4CR12_444_NV}
  GL_VIDEO_CAPTURE_FRAME_WIDTH_NV = $9038;
  {$EXTERNALSYM GL_VIDEO_CAPTURE_FRAME_WIDTH_NV}
  GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV = $9039;
  {$EXTERNALSYM GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV}
  GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV = $903A;
  {$EXTERNALSYM GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV}
  GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV = $903B;
  {$EXTERNALSYM GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV}
  GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV = $903C;
  {$EXTERNALSYM GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV}

{ GL_OML_interlace }
  GL_INTERLACE_OML = $8980;
  {$EXTERNALSYM GL_INTERLACE_OML}
  GL_INTERLACE_READ_OML = $8981;
  {$EXTERNALSYM GL_INTERLACE_READ_OML}

{ GL_OML_resample }
  GL_PACK_RESAMPLE_OML = $8984;
  {$EXTERNALSYM GL_PACK_RESAMPLE_OML}
  GL_UNPACK_RESAMPLE_OML = $8985;
  {$EXTERNALSYM GL_UNPACK_RESAMPLE_OML}
  GL_RESAMPLE_REPLICATE_OML = $8986;
  {$EXTERNALSYM GL_RESAMPLE_REPLICATE_OML}
  GL_RESAMPLE_ZERO_FILL_OML = $8987;
  {$EXTERNALSYM GL_RESAMPLE_ZERO_FILL_OML}
  GL_RESAMPLE_AVERAGE_OML = $8988;
  {$EXTERNALSYM GL_RESAMPLE_AVERAGE_OML}
  GL_RESAMPLE_DECIMATE_OML = $8989;
  {$EXTERNALSYM GL_RESAMPLE_DECIMATE_OML}

{ GL_OML_subsample }
  GL_FORMAT_SUBSAMPLE_24_24_OML = $8982;
  {$EXTERNALSYM GL_FORMAT_SUBSAMPLE_24_24_OML}
  GL_FORMAT_SUBSAMPLE_244_244_OML = $8983;
  {$EXTERNALSYM GL_FORMAT_SUBSAMPLE_244_244_OML}

{ GL_PGI_misc_hints }
  GL_PREFER_DOUBLEBUFFER_HINT_PGI = $1A1F8;
  {$EXTERNALSYM GL_PREFER_DOUBLEBUFFER_HINT_PGI}
  GL_CONSERVE_MEMORY_HINT_PGI = $1A1FD;
  {$EXTERNALSYM GL_CONSERVE_MEMORY_HINT_PGI}
  GL_RECLAIM_MEMORY_HINT_PGI = $1A1FE;
  {$EXTERNALSYM GL_RECLAIM_MEMORY_HINT_PGI}
  GL_NATIVE_GRAPHICS_HANDLE_PGI = $1A202;
  {$EXTERNALSYM GL_NATIVE_GRAPHICS_HANDLE_PGI}
  GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = $1A203;
  {$EXTERNALSYM GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI}
  GL_NATIVE_GRAPHICS_END_HINT_PGI = $1A204;
  {$EXTERNALSYM GL_NATIVE_GRAPHICS_END_HINT_PGI}
  GL_ALWAYS_FAST_HINT_PGI = $1A20C;
  {$EXTERNALSYM GL_ALWAYS_FAST_HINT_PGI}
  GL_ALWAYS_SOFT_HINT_PGI = $1A20D;
  {$EXTERNALSYM GL_ALWAYS_SOFT_HINT_PGI}
  GL_ALLOW_DRAW_OBJ_HINT_PGI = $1A20E;
  {$EXTERNALSYM GL_ALLOW_DRAW_OBJ_HINT_PGI}
  GL_ALLOW_DRAW_WIN_HINT_PGI = $1A20F;
  {$EXTERNALSYM GL_ALLOW_DRAW_WIN_HINT_PGI}
  GL_ALLOW_DRAW_FRG_HINT_PGI = $1A210;
  {$EXTERNALSYM GL_ALLOW_DRAW_FRG_HINT_PGI}
  GL_ALLOW_DRAW_MEM_HINT_PGI = $1A211;
  {$EXTERNALSYM GL_ALLOW_DRAW_MEM_HINT_PGI}
  GL_STRICT_DEPTHFUNC_HINT_PGI = $1A216;
  {$EXTERNALSYM GL_STRICT_DEPTHFUNC_HINT_PGI}
  GL_STRICT_LIGHTING_HINT_PGI = $1A217;
  {$EXTERNALSYM GL_STRICT_LIGHTING_HINT_PGI}
  GL_STRICT_SCISSOR_HINT_PGI = $1A218;
  {$EXTERNALSYM GL_STRICT_SCISSOR_HINT_PGI}
  GL_FULL_STIPPLE_HINT_PGI = $1A219;
  {$EXTERNALSYM GL_FULL_STIPPLE_HINT_PGI}
  GL_CLIP_NEAR_HINT_PGI = $1A220;
  {$EXTERNALSYM GL_CLIP_NEAR_HINT_PGI}
  GL_CLIP_FAR_HINT_PGI = $1A221;
  {$EXTERNALSYM GL_CLIP_FAR_HINT_PGI}
  GL_WIDE_LINE_HINT_PGI = $1A222;
  {$EXTERNALSYM GL_WIDE_LINE_HINT_PGI}
  GL_BACK_NORMALS_HINT_PGI = $1A223;
  {$EXTERNALSYM GL_BACK_NORMALS_HINT_PGI}

{ GL_PGI_vertex_hints }
  GL_VERTEX_DATA_HINT_PGI = $1A22A;
  {$EXTERNALSYM GL_VERTEX_DATA_HINT_PGI}
  GL_VERTEX_CONSISTENT_HINT_PGI = $1A22B;
  {$EXTERNALSYM GL_VERTEX_CONSISTENT_HINT_PGI}
  GL_MATERIAL_SIDE_HINT_PGI = $1A22C;
  {$EXTERNALSYM GL_MATERIAL_SIDE_HINT_PGI}
  GL_MAX_VERTEX_HINT_PGI = $1A22D;
  {$EXTERNALSYM GL_MAX_VERTEX_HINT_PGI}
  GL_COLOR3_BIT_PGI = $00010000;
  {$EXTERNALSYM GL_COLOR3_BIT_PGI}
  GL_COLOR4_BIT_PGI = $00020000;
  {$EXTERNALSYM GL_COLOR4_BIT_PGI}
  GL_EDGEFLAG_BIT_PGI = $00040000;
  {$EXTERNALSYM GL_EDGEFLAG_BIT_PGI}
  GL_INDEX_BIT_PGI = $00080000;
  {$EXTERNALSYM GL_INDEX_BIT_PGI}
  GL_MAT_AMBIENT_BIT_PGI = $00100000;
  {$EXTERNALSYM GL_MAT_AMBIENT_BIT_PGI}
  GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = $00200000;
  {$EXTERNALSYM GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI}
  GL_MAT_DIFFUSE_BIT_PGI = $00400000;
  {$EXTERNALSYM GL_MAT_DIFFUSE_BIT_PGI}
  GL_MAT_EMISSION_BIT_PGI = $00800000;
  {$EXTERNALSYM GL_MAT_EMISSION_BIT_PGI}
  GL_MAT_COLOR_INDEXES_BIT_PGI = $01000000;
  {$EXTERNALSYM GL_MAT_COLOR_INDEXES_BIT_PGI}
  GL_MAT_SHININESS_BIT_PGI = $02000000;
  {$EXTERNALSYM GL_MAT_SHININESS_BIT_PGI}
  GL_MAT_SPECULAR_BIT_PGI = $04000000;
  {$EXTERNALSYM GL_MAT_SPECULAR_BIT_PGI}
  GL_NORMAL_BIT_PGI = $08000000;
  {$EXTERNALSYM GL_NORMAL_BIT_PGI}
  GL_TEXCOORD1_BIT_PGI = $10000000;
  {$EXTERNALSYM GL_TEXCOORD1_BIT_PGI}
  GL_TEXCOORD2_BIT_PGI = $20000000;
  {$EXTERNALSYM GL_TEXCOORD2_BIT_PGI}
  GL_TEXCOORD3_BIT_PGI = $40000000;
  {$EXTERNALSYM GL_TEXCOORD3_BIT_PGI}
  GL_TEXCOORD4_BIT_PGI = $80000000;
  {$EXTERNALSYM GL_TEXCOORD4_BIT_PGI}
  GL_VERTEX23_BIT_PGI = $00000004;
  {$EXTERNALSYM GL_VERTEX23_BIT_PGI}
  GL_VERTEX4_BIT_PGI = $00000008;
  {$EXTERNALSYM GL_VERTEX4_BIT_PGI}

{ GL_REND_screen_coordinates }
  GL_SCREEN_COORDINATES_REND = $8490;
  {$EXTERNALSYM GL_SCREEN_COORDINATES_REND}
  GL_INVERTED_SCREEN_W_REND = $8491;
  {$EXTERNALSYM GL_INVERTED_SCREEN_W_REND}

{ GL_S3_s3tc }
  GL_RGB_S3TC = $83A0;
  {$EXTERNALSYM GL_RGB_S3TC}
  GL_RGB4_S3TC = $83A1;
  {$EXTERNALSYM GL_RGB4_S3TC}
  GL_RGBA_S3TC = $83A2;
  {$EXTERNALSYM GL_RGBA_S3TC}
  GL_RGBA4_S3TC = $83A3;
  {$EXTERNALSYM GL_RGBA4_S3TC}
  GL_RGBA_DXT5_S3TC = $83A4;
  {$EXTERNALSYM GL_RGBA_DXT5_S3TC}
  GL_RGBA4_DXT5_S3TC = $83A5;
  {$EXTERNALSYM GL_RGBA4_DXT5_S3TC}

{ GL_SGIS_detail_texture }
  GL_DETAIL_TEXTURE_2D_SGIS = $8095;
  {$EXTERNALSYM GL_DETAIL_TEXTURE_2D_SGIS}
  GL_DETAIL_TEXTURE_2D_BINDING_SGIS = $8096;
  {$EXTERNALSYM GL_DETAIL_TEXTURE_2D_BINDING_SGIS}
  GL_LINEAR_DETAIL_SGIS = $8097;
  {$EXTERNALSYM GL_LINEAR_DETAIL_SGIS}
  GL_LINEAR_DETAIL_ALPHA_SGIS = $8098;
  {$EXTERNALSYM GL_LINEAR_DETAIL_ALPHA_SGIS}
  GL_LINEAR_DETAIL_COLOR_SGIS = $8099;
  {$EXTERNALSYM GL_LINEAR_DETAIL_COLOR_SGIS}
  GL_DETAIL_TEXTURE_LEVEL_SGIS = $809A;
  {$EXTERNALSYM GL_DETAIL_TEXTURE_LEVEL_SGIS}
  GL_DETAIL_TEXTURE_MODE_SGIS = $809B;
  {$EXTERNALSYM GL_DETAIL_TEXTURE_MODE_SGIS}
  GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS = $809C;
  {$EXTERNALSYM GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS}

{ GL_SGIS_fog_function }
  GL_FOG_FUNC_SGIS = $812A;
  {$EXTERNALSYM GL_FOG_FUNC_SGIS}
  GL_FOG_FUNC_POINTS_SGIS = $812B;
  {$EXTERNALSYM GL_FOG_FUNC_POINTS_SGIS}
  GL_MAX_FOG_FUNC_POINTS_SGIS = $812C;
  {$EXTERNALSYM GL_MAX_FOG_FUNC_POINTS_SGIS}

{ GL_SGIS_generate_mipmap }
  GL_GENERATE_MIPMAP_SGIS = $8191;
  {$EXTERNALSYM GL_GENERATE_MIPMAP_SGIS}
  GL_GENERATE_MIPMAP_HINT_SGIS = $8192;
  {$EXTERNALSYM GL_GENERATE_MIPMAP_HINT_SGIS}

{ GL_SGIS_multisample }
  GL_MULTISAMPLE_SGIS = $809D;
  {$EXTERNALSYM GL_MULTISAMPLE_SGIS}
  GL_SAMPLE_ALPHA_TO_MASK_SGIS = $809E;
  {$EXTERNALSYM GL_SAMPLE_ALPHA_TO_MASK_SGIS}
  GL_SAMPLE_ALPHA_TO_ONE_SGIS = $809F;
  {$EXTERNALSYM GL_SAMPLE_ALPHA_TO_ONE_SGIS}
  GL_SAMPLE_MASK_SGIS = $80A0;
  {$EXTERNALSYM GL_SAMPLE_MASK_SGIS}
  GL_1PASS_SGIS = $80A1;
  {$EXTERNALSYM GL_1PASS_SGIS}
  GL_2PASS_0_SGIS = $80A2;
  {$EXTERNALSYM GL_2PASS_0_SGIS}
  GL_2PASS_1_SGIS = $80A3;
  {$EXTERNALSYM GL_2PASS_1_SGIS}
  GL_4PASS_0_SGIS = $80A4;
  {$EXTERNALSYM GL_4PASS_0_SGIS}
  GL_4PASS_1_SGIS = $80A5;
  {$EXTERNALSYM GL_4PASS_1_SGIS}
  GL_4PASS_2_SGIS = $80A6;
  {$EXTERNALSYM GL_4PASS_2_SGIS}
  GL_4PASS_3_SGIS = $80A7;
  {$EXTERNALSYM GL_4PASS_3_SGIS}
  GL_SAMPLE_BUFFERS_SGIS = $80A8;
  {$EXTERNALSYM GL_SAMPLE_BUFFERS_SGIS}
  GL_SAMPLES_SGIS = $80A9;
  {$EXTERNALSYM GL_SAMPLES_SGIS}
  GL_SAMPLE_MASK_VALUE_SGIS = $80AA;
  {$EXTERNALSYM GL_SAMPLE_MASK_VALUE_SGIS}
  GL_SAMPLE_MASK_INVERT_SGIS = $80AB;
  {$EXTERNALSYM GL_SAMPLE_MASK_INVERT_SGIS}
  GL_SAMPLE_PATTERN_SGIS = $80AC;
  {$EXTERNALSYM GL_SAMPLE_PATTERN_SGIS}

{ GL_SGIS_pixel_texture }
  GL_PIXEL_TEXTURE_SGIS = $8353;
  {$EXTERNALSYM GL_PIXEL_TEXTURE_SGIS}
  GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS = $8354;
  {$EXTERNALSYM GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS}
  GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS = $8355;
  {$EXTERNALSYM GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS}
  GL_PIXEL_GROUP_COLOR_SGIS = $8356;
  {$EXTERNALSYM GL_PIXEL_GROUP_COLOR_SGIS}

{ GL_SGIS_point_line_texgen }
  GL_EYE_DISTANCE_TO_POINT_SGIS = $81F0;
  {$EXTERNALSYM GL_EYE_DISTANCE_TO_POINT_SGIS}
  GL_OBJECT_DISTANCE_TO_POINT_SGIS = $81F1;
  {$EXTERNALSYM GL_OBJECT_DISTANCE_TO_POINT_SGIS}
  GL_EYE_DISTANCE_TO_LINE_SGIS = $81F2;
  {$EXTERNALSYM GL_EYE_DISTANCE_TO_LINE_SGIS}
  GL_OBJECT_DISTANCE_TO_LINE_SGIS = $81F3;
  {$EXTERNALSYM GL_OBJECT_DISTANCE_TO_LINE_SGIS}
  GL_EYE_POINT_SGIS = $81F4;
  {$EXTERNALSYM GL_EYE_POINT_SGIS}
  GL_OBJECT_POINT_SGIS = $81F5;
  {$EXTERNALSYM GL_OBJECT_POINT_SGIS}
  GL_EYE_LINE_SGIS = $81F6;
  {$EXTERNALSYM GL_EYE_LINE_SGIS}
  GL_OBJECT_LINE_SGIS = $81F7;
  {$EXTERNALSYM GL_OBJECT_LINE_SGIS}

{ GL_SGIS_point_parameters }
  GL_POINT_SIZE_MIN_SGIS = $8126;
  {$EXTERNALSYM GL_POINT_SIZE_MIN_SGIS}
  GL_POINT_SIZE_MAX_SGIS = $8127;
  {$EXTERNALSYM GL_POINT_SIZE_MAX_SGIS}
  GL_POINT_FADE_THRESHOLD_SIZE_SGIS = $8128;
  {$EXTERNALSYM GL_POINT_FADE_THRESHOLD_SIZE_SGIS}
  GL_DISTANCE_ATTENUATION_SGIS = $8129;
  {$EXTERNALSYM GL_DISTANCE_ATTENUATION_SGIS}

{ GL_SGIS_sharpen_texture }
  GL_LINEAR_SHARPEN_SGIS = $80AD;
  {$EXTERNALSYM GL_LINEAR_SHARPEN_SGIS}
  GL_LINEAR_SHARPEN_ALPHA_SGIS = $80AE;
  {$EXTERNALSYM GL_LINEAR_SHARPEN_ALPHA_SGIS}
  GL_LINEAR_SHARPEN_COLOR_SGIS = $80AF;
  {$EXTERNALSYM GL_LINEAR_SHARPEN_COLOR_SGIS}
  GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS = $80B0;
  {$EXTERNALSYM GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS}

{ GL_SGIS_texture4D }
  GL_PACK_SKIP_VOLUMES_SGIS = $8130;
  {$EXTERNALSYM GL_PACK_SKIP_VOLUMES_SGIS}
  GL_PACK_IMAGE_DEPTH_SGIS = $8131;
  {$EXTERNALSYM GL_PACK_IMAGE_DEPTH_SGIS}
  GL_UNPACK_SKIP_VOLUMES_SGIS = $8132;
  {$EXTERNALSYM GL_UNPACK_SKIP_VOLUMES_SGIS}
  GL_UNPACK_IMAGE_DEPTH_SGIS = $8133;
  {$EXTERNALSYM GL_UNPACK_IMAGE_DEPTH_SGIS}
  GL_TEXTURE_4D_SGIS = $8134;
  {$EXTERNALSYM GL_TEXTURE_4D_SGIS}
  GL_PROXY_TEXTURE_4D_SGIS = $8135;
  {$EXTERNALSYM GL_PROXY_TEXTURE_4D_SGIS}
  GL_TEXTURE_4DSIZE_SGIS = $8136;
  {$EXTERNALSYM GL_TEXTURE_4DSIZE_SGIS}
  GL_TEXTURE_WRAP_Q_SGIS = $8137;
  {$EXTERNALSYM GL_TEXTURE_WRAP_Q_SGIS}
  GL_MAX_4D_TEXTURE_SIZE_SGIS = $8138;
  {$EXTERNALSYM GL_MAX_4D_TEXTURE_SIZE_SGIS}
  GL_TEXTURE_4D_BINDING_SGIS = $814F;
  {$EXTERNALSYM GL_TEXTURE_4D_BINDING_SGIS}

{ GL_SGIS_texture_border_clamp }
  GL_CLAMP_TO_BORDER_SGIS = $812D;
  {$EXTERNALSYM GL_CLAMP_TO_BORDER_SGIS}

{ GL_SGIS_texture_color_mask }
  GL_TEXTURE_COLOR_WRITEMASK_SGIS = $81EF;
  {$EXTERNALSYM GL_TEXTURE_COLOR_WRITEMASK_SGIS}

{ GL_SGIS_texture_edge_clamp }
  GL_CLAMP_TO_EDGE_SGIS = $812F;
  {$EXTERNALSYM GL_CLAMP_TO_EDGE_SGIS}

{ GL_SGIS_texture_filter4 }
  GL_FILTER4_SGIS = $8146;
  {$EXTERNALSYM GL_FILTER4_SGIS}
  GL_TEXTURE_FILTER4_SIZE_SGIS = $8147;
  {$EXTERNALSYM GL_TEXTURE_FILTER4_SIZE_SGIS}

{ GL_SGIS_texture_lod }
  GL_TEXTURE_MIN_LOD_SGIS = $813A;
  {$EXTERNALSYM GL_TEXTURE_MIN_LOD_SGIS}
  GL_TEXTURE_MAX_LOD_SGIS = $813B;
  {$EXTERNALSYM GL_TEXTURE_MAX_LOD_SGIS}
  GL_TEXTURE_BASE_LEVEL_SGIS = $813C;
  {$EXTERNALSYM GL_TEXTURE_BASE_LEVEL_SGIS}
  GL_TEXTURE_MAX_LEVEL_SGIS = $813D;
  {$EXTERNALSYM GL_TEXTURE_MAX_LEVEL_SGIS}

{ GL_SGIS_texture_select }
  GL_DUAL_ALPHA4_SGIS = $8110;
  {$EXTERNALSYM GL_DUAL_ALPHA4_SGIS}
  GL_DUAL_ALPHA8_SGIS = $8111;
  {$EXTERNALSYM GL_DUAL_ALPHA8_SGIS}
  GL_DUAL_ALPHA12_SGIS = $8112;
  {$EXTERNALSYM GL_DUAL_ALPHA12_SGIS}
  GL_DUAL_ALPHA16_SGIS = $8113;
  {$EXTERNALSYM GL_DUAL_ALPHA16_SGIS}
  GL_DUAL_LUMINANCE4_SGIS = $8114;
  {$EXTERNALSYM GL_DUAL_LUMINANCE4_SGIS}
  GL_DUAL_LUMINANCE8_SGIS = $8115;
  {$EXTERNALSYM GL_DUAL_LUMINANCE8_SGIS}
  GL_DUAL_LUMINANCE12_SGIS = $8116;
  {$EXTERNALSYM GL_DUAL_LUMINANCE12_SGIS}
  GL_DUAL_LUMINANCE16_SGIS = $8117;
  {$EXTERNALSYM GL_DUAL_LUMINANCE16_SGIS}
  GL_DUAL_INTENSITY4_SGIS = $8118;
  {$EXTERNALSYM GL_DUAL_INTENSITY4_SGIS}
  GL_DUAL_INTENSITY8_SGIS = $8119;
  {$EXTERNALSYM GL_DUAL_INTENSITY8_SGIS}
  GL_DUAL_INTENSITY12_SGIS = $811A;
  {$EXTERNALSYM GL_DUAL_INTENSITY12_SGIS}
  GL_DUAL_INTENSITY16_SGIS = $811B;
  {$EXTERNALSYM GL_DUAL_INTENSITY16_SGIS}
  GL_DUAL_LUMINANCE_ALPHA4_SGIS = $811C;
  {$EXTERNALSYM GL_DUAL_LUMINANCE_ALPHA4_SGIS}
  GL_DUAL_LUMINANCE_ALPHA8_SGIS = $811D;
  {$EXTERNALSYM GL_DUAL_LUMINANCE_ALPHA8_SGIS}
  GL_QUAD_ALPHA4_SGIS = $811E;
  {$EXTERNALSYM GL_QUAD_ALPHA4_SGIS}
  GL_QUAD_ALPHA8_SGIS = $811F;
  {$EXTERNALSYM GL_QUAD_ALPHA8_SGIS}
  GL_QUAD_LUMINANCE4_SGIS = $8120;
  {$EXTERNALSYM GL_QUAD_LUMINANCE4_SGIS}
  GL_QUAD_LUMINANCE8_SGIS = $8121;
  {$EXTERNALSYM GL_QUAD_LUMINANCE8_SGIS}
  GL_QUAD_INTENSITY4_SGIS = $8122;
  {$EXTERNALSYM GL_QUAD_INTENSITY4_SGIS}
  GL_QUAD_INTENSITY8_SGIS = $8123;
  {$EXTERNALSYM GL_QUAD_INTENSITY8_SGIS}
  GL_DUAL_TEXTURE_SELECT_SGIS = $8124;
  {$EXTERNALSYM GL_DUAL_TEXTURE_SELECT_SGIS}
  GL_QUAD_TEXTURE_SELECT_SGIS = $8125;
  {$EXTERNALSYM GL_QUAD_TEXTURE_SELECT_SGIS}

{ GL_SGIX_async }
  GL_ASYNC_MARKER_SGIX = $8329;
  {$EXTERNALSYM GL_ASYNC_MARKER_SGIX}

{ GL_SGIX_async_histogram }
  GL_ASYNC_HISTOGRAM_SGIX = $832C;
  {$EXTERNALSYM GL_ASYNC_HISTOGRAM_SGIX}
  GL_MAX_ASYNC_HISTOGRAM_SGIX = $832D;
  {$EXTERNALSYM GL_MAX_ASYNC_HISTOGRAM_SGIX}

{ GL_SGIX_async_pixel }
  GL_ASYNC_TEX_IMAGE_SGIX = $835C;
  {$EXTERNALSYM GL_ASYNC_TEX_IMAGE_SGIX}
  GL_ASYNC_DRAW_PIXELS_SGIX = $835D;
  {$EXTERNALSYM GL_ASYNC_DRAW_PIXELS_SGIX}
  GL_ASYNC_READ_PIXELS_SGIX = $835E;
  {$EXTERNALSYM GL_ASYNC_READ_PIXELS_SGIX}
  GL_MAX_ASYNC_TEX_IMAGE_SGIX = $835F;
  {$EXTERNALSYM GL_MAX_ASYNC_TEX_IMAGE_SGIX}
  GL_MAX_ASYNC_DRAW_PIXELS_SGIX = $8360;
  {$EXTERNALSYM GL_MAX_ASYNC_DRAW_PIXELS_SGIX}
  GL_MAX_ASYNC_READ_PIXELS_SGIX = $8361;
  {$EXTERNALSYM GL_MAX_ASYNC_READ_PIXELS_SGIX}

{ GL_SGIX_blend_alpha_minmax }
  GL_ALPHA_MIN_SGIX = $8320;
  {$EXTERNALSYM GL_ALPHA_MIN_SGIX}
  GL_ALPHA_MAX_SGIX = $8321;
  {$EXTERNALSYM GL_ALPHA_MAX_SGIX}

{ GL_SGIX_calligraphic_fragment }
  GL_CALLIGRAPHIC_FRAGMENT_SGIX = $8183;
  {$EXTERNALSYM GL_CALLIGRAPHIC_FRAGMENT_SGIX}

{ GL_SGIX_clipmap }
  GL_LINEAR_CLIPMAP_LINEAR_SGIX = $8170;
  {$EXTERNALSYM GL_LINEAR_CLIPMAP_LINEAR_SGIX}
  GL_TEXTURE_CLIPMAP_CENTER_SGIX = $8171;
  {$EXTERNALSYM GL_TEXTURE_CLIPMAP_CENTER_SGIX}
  GL_TEXTURE_CLIPMAP_FRAME_SGIX = $8172;
  {$EXTERNALSYM GL_TEXTURE_CLIPMAP_FRAME_SGIX}
  GL_TEXTURE_CLIPMAP_OFFSET_SGIX = $8173;
  {$EXTERNALSYM GL_TEXTURE_CLIPMAP_OFFSET_SGIX}
  GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = $8174;
  {$EXTERNALSYM GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX}
  GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = $8175;
  {$EXTERNALSYM GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX}
  GL_TEXTURE_CLIPMAP_DEPTH_SGIX = $8176;
  {$EXTERNALSYM GL_TEXTURE_CLIPMAP_DEPTH_SGIX}
  GL_MAX_CLIPMAP_DEPTH_SGIX = $8177;
  {$EXTERNALSYM GL_MAX_CLIPMAP_DEPTH_SGIX}
  GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = $8178;
  {$EXTERNALSYM GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX}
  GL_NEAREST_CLIPMAP_NEAREST_SGIX = $844D;
  {$EXTERNALSYM GL_NEAREST_CLIPMAP_NEAREST_SGIX}
  GL_NEAREST_CLIPMAP_LINEAR_SGIX = $844E;
  {$EXTERNALSYM GL_NEAREST_CLIPMAP_LINEAR_SGIX}
  GL_LINEAR_CLIPMAP_NEAREST_SGIX = $844F;
  {$EXTERNALSYM GL_LINEAR_CLIPMAP_NEAREST_SGIX}

{ GL_SGIX_convolution_accuracy }
  GL_CONVOLUTION_HINT_SGIX = $8316;
  {$EXTERNALSYM GL_CONVOLUTION_HINT_SGIX}

{ GL_SGIX_depth_pass_instrument }

{ GL_SGIX_depth_texture }
  GL_DEPTH_COMPONENT16_SGIX = $81A5;
  {$EXTERNALSYM GL_DEPTH_COMPONENT16_SGIX}
  GL_DEPTH_COMPONENT24_SGIX = $81A6;
  {$EXTERNALSYM GL_DEPTH_COMPONENT24_SGIX}
  GL_DEPTH_COMPONENT32_SGIX = $81A7;
  {$EXTERNALSYM GL_DEPTH_COMPONENT32_SGIX}

{ GL_SGIX_flush_raster }

{ GL_SGIX_fog_offset }
  GL_FOG_OFFSET_SGIX = $8198;
  {$EXTERNALSYM GL_FOG_OFFSET_SGIX}
  GL_FOG_OFFSET_VALUE_SGIX = $8199;
  {$EXTERNALSYM GL_FOG_OFFSET_VALUE_SGIX}

{ GL_SGIX_fragment_lighting }
  GL_FRAGMENT_LIGHTING_SGIX = $8400;
  {$EXTERNALSYM GL_FRAGMENT_LIGHTING_SGIX}
  GL_FRAGMENT_COLOR_MATERIAL_SGIX = $8401;
  {$EXTERNALSYM GL_FRAGMENT_COLOR_MATERIAL_SGIX}
  GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX = $8402;
  {$EXTERNALSYM GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX}
  GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = $8403;
  {$EXTERNALSYM GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX}
  GL_MAX_FRAGMENT_LIGHTS_SGIX = $8404;
  {$EXTERNALSYM GL_MAX_FRAGMENT_LIGHTS_SGIX}
  GL_MAX_ACTIVE_LIGHTS_SGIX = $8405;
  {$EXTERNALSYM GL_MAX_ACTIVE_LIGHTS_SGIX}
  GL_CURRENT_RASTER_NORMAL_SGIX = $8406;
  {$EXTERNALSYM GL_CURRENT_RASTER_NORMAL_SGIX}
  GL_LIGHT_ENV_MODE_SGIX = $8407;
  {$EXTERNALSYM GL_LIGHT_ENV_MODE_SGIX}
  GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = $8408;
  {$EXTERNALSYM GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX}
  GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = $8409;
  {$EXTERNALSYM GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX}
  GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = $840A;
  {$EXTERNALSYM GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX}
  GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = $840B;
  {$EXTERNALSYM GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX}
  GL_FRAGMENT_LIGHT0_SGIX = $840C;
  {$EXTERNALSYM GL_FRAGMENT_LIGHT0_SGIX}
  GL_FRAGMENT_LIGHT1_SGIX = $840D;
  {$EXTERNALSYM GL_FRAGMENT_LIGHT1_SGIX}
  GL_FRAGMENT_LIGHT2_SGIX = $840E;
  {$EXTERNALSYM GL_FRAGMENT_LIGHT2_SGIX}
  GL_FRAGMENT_LIGHT3_SGIX = $840F;
  {$EXTERNALSYM GL_FRAGMENT_LIGHT3_SGIX}
  GL_FRAGMENT_LIGHT4_SGIX = $8410;
  {$EXTERNALSYM GL_FRAGMENT_LIGHT4_SGIX}
  GL_FRAGMENT_LIGHT5_SGIX = $8411;
  {$EXTERNALSYM GL_FRAGMENT_LIGHT5_SGIX}
  GL_FRAGMENT_LIGHT6_SGIX = $8412;
  {$EXTERNALSYM GL_FRAGMENT_LIGHT6_SGIX}
  GL_FRAGMENT_LIGHT7_SGIX = $8413;
  {$EXTERNALSYM GL_FRAGMENT_LIGHT7_SGIX}

{ GL_SGIX_framezoom }
  GL_FRAMEZOOM_SGIX = $818B;
  {$EXTERNALSYM GL_FRAMEZOOM_SGIX}
  GL_FRAMEZOOM_FACTOR_SGIX = $818C;
  {$EXTERNALSYM GL_FRAMEZOOM_FACTOR_SGIX}
  GL_MAX_FRAMEZOOM_FACTOR_SGIX = $818D;
  {$EXTERNALSYM GL_MAX_FRAMEZOOM_FACTOR_SGIX}

{ GL_SGIX_igloo_interface }

{ GL_SGIX_instruments }
  GL_INSTRUMENT_BUFFER_POINTER_SGIX = $8180;
  {$EXTERNALSYM GL_INSTRUMENT_BUFFER_POINTER_SGIX}
  GL_INSTRUMENT_MEASUREMENTS_SGIX = $8181;
  {$EXTERNALSYM GL_INSTRUMENT_MEASUREMENTS_SGIX}

{ GL_SGIX_interlace }
  GL_INTERLACE_SGIX = $8094;
  {$EXTERNALSYM GL_INTERLACE_SGIX}

{ GL_SGIX_ir_instrument1 }
  GL_IR_INSTRUMENT1_SGIX = $817F;
  {$EXTERNALSYM GL_IR_INSTRUMENT1_SGIX}

{ GL_SGIX_list_priority }
  GL_LIST_PRIORITY_SGIX = $8182;
  {$EXTERNALSYM GL_LIST_PRIORITY_SGIX}

{ GL_SGIX_pixel_texture }
  GL_PIXEL_TEX_GEN_SGIX = $8139;
  {$EXTERNALSYM GL_PIXEL_TEX_GEN_SGIX}
  GL_PIXEL_TEX_GEN_MODE_SGIX = $832B;
  {$EXTERNALSYM GL_PIXEL_TEX_GEN_MODE_SGIX}

{ GL_SGIX_pixel_tiles }
  GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX = $813E;
  {$EXTERNALSYM GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX}
  GL_PIXEL_TILE_CACHE_INCREMENT_SGIX = $813F;
  {$EXTERNALSYM GL_PIXEL_TILE_CACHE_INCREMENT_SGIX}
  GL_PIXEL_TILE_WIDTH_SGIX = $8140;
  {$EXTERNALSYM GL_PIXEL_TILE_WIDTH_SGIX}
  GL_PIXEL_TILE_HEIGHT_SGIX = $8141;
  {$EXTERNALSYM GL_PIXEL_TILE_HEIGHT_SGIX}
  GL_PIXEL_TILE_GRID_WIDTH_SGIX = $8142;
  {$EXTERNALSYM GL_PIXEL_TILE_GRID_WIDTH_SGIX}
  GL_PIXEL_TILE_GRID_HEIGHT_SGIX = $8143;
  {$EXTERNALSYM GL_PIXEL_TILE_GRID_HEIGHT_SGIX}
  GL_PIXEL_TILE_GRID_DEPTH_SGIX = $8144;
  {$EXTERNALSYM GL_PIXEL_TILE_GRID_DEPTH_SGIX}
  GL_PIXEL_TILE_CACHE_SIZE_SGIX = $8145;
  {$EXTERNALSYM GL_PIXEL_TILE_CACHE_SIZE_SGIX}

{ GL_SGIX_polynomial_ffd }
  GL_TEXTURE_DEFORMATION_BIT_SGIX = $00000001;
  {$EXTERNALSYM GL_TEXTURE_DEFORMATION_BIT_SGIX}
  GL_GEOMETRY_DEFORMATION_BIT_SGIX = $00000002;
  {$EXTERNALSYM GL_GEOMETRY_DEFORMATION_BIT_SGIX}
  GL_GEOMETRY_DEFORMATION_SGIX = $8194;
  {$EXTERNALSYM GL_GEOMETRY_DEFORMATION_SGIX}
  GL_TEXTURE_DEFORMATION_SGIX = $8195;
  {$EXTERNALSYM GL_TEXTURE_DEFORMATION_SGIX}
  GL_DEFORMATIONS_MASK_SGIX = $8196;
  {$EXTERNALSYM GL_DEFORMATIONS_MASK_SGIX}
  GL_MAX_DEFORMATION_ORDER_SGIX = $8197;
  {$EXTERNALSYM GL_MAX_DEFORMATION_ORDER_SGIX}

{ GL_SGIX_reference_plane }
  GL_REFERENCE_PLANE_SGIX = $817D;
  {$EXTERNALSYM GL_REFERENCE_PLANE_SGIX}
  GL_REFERENCE_PLANE_EQUATION_SGIX = $817E;
  {$EXTERNALSYM GL_REFERENCE_PLANE_EQUATION_SGIX}

{ GL_SGIX_resample }
  GL_PACK_RESAMPLE_SGIX = $842C;
  {$EXTERNALSYM GL_PACK_RESAMPLE_SGIX}
  GL_UNPACK_RESAMPLE_SGIX = $842D;
  {$EXTERNALSYM GL_UNPACK_RESAMPLE_SGIX}
  GL_RESAMPLE_REPLICATE_SGIX = $842E;
  {$EXTERNALSYM GL_RESAMPLE_REPLICATE_SGIX}
  GL_RESAMPLE_ZERO_FILL_SGIX = $842F;
  {$EXTERNALSYM GL_RESAMPLE_ZERO_FILL_SGIX}
  GL_RESAMPLE_DECIMATE_SGIX = $8430;
  {$EXTERNALSYM GL_RESAMPLE_DECIMATE_SGIX}

{ GL_SGIX_scalebias_hint }
  GL_SCALEBIAS_HINT_SGIX = $8322;
  {$EXTERNALSYM GL_SCALEBIAS_HINT_SGIX}

{ GL_SGIX_shadow }
  GL_TEXTURE_COMPARE_SGIX = $819A;
  {$EXTERNALSYM GL_TEXTURE_COMPARE_SGIX}
  GL_TEXTURE_COMPARE_OPERATOR_SGIX = $819B;
  {$EXTERNALSYM GL_TEXTURE_COMPARE_OPERATOR_SGIX}
  GL_TEXTURE_LEQUAL_R_SGIX = $819C;
  {$EXTERNALSYM GL_TEXTURE_LEQUAL_R_SGIX}
  GL_TEXTURE_GEQUAL_R_SGIX = $819D;
  {$EXTERNALSYM GL_TEXTURE_GEQUAL_R_SGIX}

{ GL_SGIX_shadow_ambient }
  GL_SHADOW_AMBIENT_SGIX = $80BF;
  {$EXTERNALSYM GL_SHADOW_AMBIENT_SGIX}

{ GL_SGIX_sprite }
  GL_SPRITE_SGIX = $8148;
  {$EXTERNALSYM GL_SPRITE_SGIX}
  GL_SPRITE_MODE_SGIX = $8149;
  {$EXTERNALSYM GL_SPRITE_MODE_SGIX}
  GL_SPRITE_AXIS_SGIX = $814A;
  {$EXTERNALSYM GL_SPRITE_AXIS_SGIX}
  GL_SPRITE_TRANSLATION_SGIX = $814B;
  {$EXTERNALSYM GL_SPRITE_TRANSLATION_SGIX}
  GL_SPRITE_AXIAL_SGIX = $814C;
  {$EXTERNALSYM GL_SPRITE_AXIAL_SGIX}
  GL_SPRITE_OBJECT_ALIGNED_SGIX = $814D;
  {$EXTERNALSYM GL_SPRITE_OBJECT_ALIGNED_SGIX}
  GL_SPRITE_EYE_ALIGNED_SGIX = $814E;
  {$EXTERNALSYM GL_SPRITE_EYE_ALIGNED_SGIX}

{ GL_SGIX_subsample }
  GL_PACK_SUBSAMPLE_RATE_SGIX = $85A0;
  {$EXTERNALSYM GL_PACK_SUBSAMPLE_RATE_SGIX}
  GL_UNPACK_SUBSAMPLE_RATE_SGIX = $85A1;
  {$EXTERNALSYM GL_UNPACK_SUBSAMPLE_RATE_SGIX}
  GL_PIXEL_SUBSAMPLE_4444_SGIX = $85A2;
  {$EXTERNALSYM GL_PIXEL_SUBSAMPLE_4444_SGIX}
  GL_PIXEL_SUBSAMPLE_2424_SGIX = $85A3;
  {$EXTERNALSYM GL_PIXEL_SUBSAMPLE_2424_SGIX}
  GL_PIXEL_SUBSAMPLE_4242_SGIX = $85A4;
  {$EXTERNALSYM GL_PIXEL_SUBSAMPLE_4242_SGIX}

{ GL_SGIX_texture_add_env }
  GL_TEXTURE_ENV_BIAS_SGIX = $80BE;
  {$EXTERNALSYM GL_TEXTURE_ENV_BIAS_SGIX}

{ GL_SGIX_texture_coordinate_clamp }
  GL_TEXTURE_MAX_CLAMP_S_SGIX = $8369;
  {$EXTERNALSYM GL_TEXTURE_MAX_CLAMP_S_SGIX}
  GL_TEXTURE_MAX_CLAMP_T_SGIX = $836A;
  {$EXTERNALSYM GL_TEXTURE_MAX_CLAMP_T_SGIX}
  GL_TEXTURE_MAX_CLAMP_R_SGIX = $836B;
  {$EXTERNALSYM GL_TEXTURE_MAX_CLAMP_R_SGIX}

{ GL_SGIX_texture_lod_bias }
  GL_TEXTURE_LOD_BIAS_S_SGIX = $818E;
  {$EXTERNALSYM GL_TEXTURE_LOD_BIAS_S_SGIX}
  GL_TEXTURE_LOD_BIAS_T_SGIX = $818F;
  {$EXTERNALSYM GL_TEXTURE_LOD_BIAS_T_SGIX}
  GL_TEXTURE_LOD_BIAS_R_SGIX = $8190;
  {$EXTERNALSYM GL_TEXTURE_LOD_BIAS_R_SGIX}

{ GL_SGIX_texture_multi_buffer }
  GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = $812E;
  {$EXTERNALSYM GL_TEXTURE_MULTI_BUFFER_HINT_SGIX}

{ GL_SGIX_texture_scale_bias }
  GL_POST_TEXTURE_FILTER_BIAS_SGIX = $8179;
  {$EXTERNALSYM GL_POST_TEXTURE_FILTER_BIAS_SGIX}
  GL_POST_TEXTURE_FILTER_SCALE_SGIX = $817A;
  {$EXTERNALSYM GL_POST_TEXTURE_FILTER_SCALE_SGIX}
  GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = $817B;
  {$EXTERNALSYM GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX}
  GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = $817C;
  {$EXTERNALSYM GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX}

{ GL_SGIX_vertex_preclip }
  GL_VERTEX_PRECLIP_SGIX = $83EE;
  {$EXTERNALSYM GL_VERTEX_PRECLIP_SGIX}
  GL_VERTEX_PRECLIP_HINT_SGIX = $83EF;
  {$EXTERNALSYM GL_VERTEX_PRECLIP_HINT_SGIX}

{ GL_SGIX_ycrcb }
  GL_YCRCB_422_SGIX = $81BB;
  {$EXTERNALSYM GL_YCRCB_422_SGIX}
  GL_YCRCB_444_SGIX = $81BC;
  {$EXTERNALSYM GL_YCRCB_444_SGIX}

{ GL_SGIX_ycrcba }
  GL_YCRCB_SGIX = $8318;
  {$EXTERNALSYM GL_YCRCB_SGIX}
  GL_YCRCBA_SGIX = $8319;
  {$EXTERNALSYM GL_YCRCBA_SGIX}

{ GL_SGI_color_matrix }
  GL_COLOR_MATRIX_SGI = $80B1;
  {$EXTERNALSYM GL_COLOR_MATRIX_SGI}
  GL_COLOR_MATRIX_STACK_DEPTH_SGI = $80B2;
  {$EXTERNALSYM GL_COLOR_MATRIX_STACK_DEPTH_SGI}
  GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = $80B3;
  {$EXTERNALSYM GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI}
  GL_POST_COLOR_MATRIX_RED_SCALE_SGI = $80B4;
  {$EXTERNALSYM GL_POST_COLOR_MATRIX_RED_SCALE_SGI}
  GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = $80B5;
  {$EXTERNALSYM GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI}
  GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = $80B6;
  {$EXTERNALSYM GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI}
  GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = $80B7;
  {$EXTERNALSYM GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI}
  GL_POST_COLOR_MATRIX_RED_BIAS_SGI = $80B8;
  {$EXTERNALSYM GL_POST_COLOR_MATRIX_RED_BIAS_SGI}
  GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = $80B9;
  {$EXTERNALSYM GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI}
  GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = $80BA;
  {$EXTERNALSYM GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI}
  GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = $80BB;
  {$EXTERNALSYM GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI}

{ GL_SGI_color_table }
  GL_COLOR_TABLE_SGI = $80D0;
  {$EXTERNALSYM GL_COLOR_TABLE_SGI}
  GL_POST_CONVOLUTION_COLOR_TABLE_SGI = $80D1;
  {$EXTERNALSYM GL_POST_CONVOLUTION_COLOR_TABLE_SGI}
  GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = $80D2;
  {$EXTERNALSYM GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI}
  GL_PROXY_COLOR_TABLE_SGI = $80D3;
  {$EXTERNALSYM GL_PROXY_COLOR_TABLE_SGI}
  GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = $80D4;
  {$EXTERNALSYM GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI}
  GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = $80D5;
  {$EXTERNALSYM GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI}
  GL_COLOR_TABLE_SCALE_SGI = $80D6;
  {$EXTERNALSYM GL_COLOR_TABLE_SCALE_SGI}
  GL_COLOR_TABLE_BIAS_SGI = $80D7;
  {$EXTERNALSYM GL_COLOR_TABLE_BIAS_SGI}
  GL_COLOR_TABLE_FORMAT_SGI = $80D8;
  {$EXTERNALSYM GL_COLOR_TABLE_FORMAT_SGI}
  GL_COLOR_TABLE_WIDTH_SGI = $80D9;
  {$EXTERNALSYM GL_COLOR_TABLE_WIDTH_SGI}
  GL_COLOR_TABLE_RED_SIZE_SGI = $80DA;
  {$EXTERNALSYM GL_COLOR_TABLE_RED_SIZE_SGI}
  GL_COLOR_TABLE_GREEN_SIZE_SGI = $80DB;
  {$EXTERNALSYM GL_COLOR_TABLE_GREEN_SIZE_SGI}
  GL_COLOR_TABLE_BLUE_SIZE_SGI = $80DC;
  {$EXTERNALSYM GL_COLOR_TABLE_BLUE_SIZE_SGI}
  GL_COLOR_TABLE_ALPHA_SIZE_SGI = $80DD;
  {$EXTERNALSYM GL_COLOR_TABLE_ALPHA_SIZE_SGI}
  GL_COLOR_TABLE_LUMINANCE_SIZE_SGI = $80DE;
  {$EXTERNALSYM GL_COLOR_TABLE_LUMINANCE_SIZE_SGI}
  GL_COLOR_TABLE_INTENSITY_SIZE_SGI = $80DF;
  {$EXTERNALSYM GL_COLOR_TABLE_INTENSITY_SIZE_SGI}

{ GL_SGI_texture_color_table }
  GL_TEXTURE_COLOR_TABLE_SGI = $80BC;
  {$EXTERNALSYM GL_TEXTURE_COLOR_TABLE_SGI}
  GL_PROXY_TEXTURE_COLOR_TABLE_SGI = $80BD;
  {$EXTERNALSYM GL_PROXY_TEXTURE_COLOR_TABLE_SGI}

{ GL_SUNX_constant_data }
  GL_UNPACK_CONSTANT_DATA_SUNX = $81D5;
  {$EXTERNALSYM GL_UNPACK_CONSTANT_DATA_SUNX}
  GL_TEXTURE_CONSTANT_DATA_SUNX = $81D6;
  {$EXTERNALSYM GL_TEXTURE_CONSTANT_DATA_SUNX}

{ GL_SUN_convolution_border_modes }
  GL_WRAP_BORDER_SUN = $81D4;
  {$EXTERNALSYM GL_WRAP_BORDER_SUN}

{ GL_SUN_global_alpha }
  GL_GLOBAL_ALPHA_SUN = $81D9;
  {$EXTERNALSYM GL_GLOBAL_ALPHA_SUN}
  GL_GLOBAL_ALPHA_FACTOR_SUN = $81DA;
  {$EXTERNALSYM GL_GLOBAL_ALPHA_FACTOR_SUN}

{ GL_SUN_mesh_array }
  GL_QUAD_MESH_SUN = $8614;
  {$EXTERNALSYM GL_QUAD_MESH_SUN}
  GL_TRIANGLE_MESH_SUN = $8615;
  {$EXTERNALSYM GL_TRIANGLE_MESH_SUN}

{ GL_SUN_slice_accum }
  GL_SLICE_ACCUM_SUN = $85CC;
  {$EXTERNALSYM GL_SLICE_ACCUM_SUN}

{ GL_SUN_triangle_list }
  GL_RESTART_SUN = $0001;
  {$EXTERNALSYM GL_RESTART_SUN}
  GL_REPLACE_MIDDLE_SUN = $0002;
  {$EXTERNALSYM GL_REPLACE_MIDDLE_SUN}
  GL_REPLACE_OLDEST_SUN = $0003;
  {$EXTERNALSYM GL_REPLACE_OLDEST_SUN}
  GL_TRIANGLE_LIST_SUN = $81D7;
  {$EXTERNALSYM GL_TRIANGLE_LIST_SUN}
  GL_REPLACEMENT_CODE_SUN = $81D8;
  {$EXTERNALSYM GL_REPLACEMENT_CODE_SUN}
  GL_REPLACEMENT_CODE_ARRAY_SUN = $85C0;
  {$EXTERNALSYM GL_REPLACEMENT_CODE_ARRAY_SUN}
  GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN = $85C1;
  {$EXTERNALSYM GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN}
  GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN = $85C2;
  {$EXTERNALSYM GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN}
  GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN = $85C3;
  {$EXTERNALSYM GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN}
  GL_R1UI_V3F_SUN = $85C4;
  {$EXTERNALSYM GL_R1UI_V3F_SUN}
  GL_R1UI_C4UB_V3F_SUN = $85C5;
  {$EXTERNALSYM GL_R1UI_C4UB_V3F_SUN}
  GL_R1UI_C3F_V3F_SUN = $85C6;
  {$EXTERNALSYM GL_R1UI_C3F_V3F_SUN}
  GL_R1UI_N3F_V3F_SUN = $85C7;
  {$EXTERNALSYM GL_R1UI_N3F_V3F_SUN}
  GL_R1UI_C4F_N3F_V3F_SUN = $85C8;
  {$EXTERNALSYM GL_R1UI_C4F_N3F_V3F_SUN}
  GL_R1UI_T2F_V3F_SUN = $85C9;
  {$EXTERNALSYM GL_R1UI_T2F_V3F_SUN}
  GL_R1UI_T2F_N3F_V3F_SUN = $85CA;
  {$EXTERNALSYM GL_R1UI_T2F_N3F_V3F_SUN}
  GL_R1UI_T2F_C4F_N3F_V3F_SUN = $85CB;
  {$EXTERNALSYM GL_R1UI_T2F_C4F_N3F_V3F_SUN}

{ GL_WIN_phong_shading }
  GL_PHONG_WIN = $80EA;
  {$EXTERNALSYM GL_PHONG_WIN}
  GL_PHONG_HINT_WIN = $80EB;
  {$EXTERNALSYM GL_PHONG_HINT_WIN}

{ GL_WIN_specular_fog }
  GL_FOG_SPECULAR_TEXTURE_WIN = $80EC;
  {$EXTERNALSYM GL_FOG_SPECULAR_TEXTURE_WIN}

type
 GLDEBUGPROC = procedure(source : GLEnum; type_ : GLEnum; id : GLUInt; severity : GLUInt; length : GLsizei; const message_ : PGLCHar; userParam : Pointer); stdcall;
 {$EXTERNALSYM GLDEBUGPROC}
 GLDEBUGPROCARB = procedure (source: GLenum; type_: GLenum; id: GLuint; severity: GLenum; length: GLsizei; const message_: PGLchar; userParam: Pointer); stdcall;
 {$EXTERNALSYM GLDEBUGPROCARB}
 GLDEBUGPROCAMD = procedure (id: GLuint; category: GLenum; severity: GLenum; length: GLsizei; const message_: PGLchar; userParam: Pointer); stdcall;
 {$EXTERNALSYM GLDEBUGPROCARB}

 var

{ GL_VERSION_1_2 }
  glDrawRangeElements: procedure(mode: GLenum; start: GLuint; end_: GLuint; count: GLsizei; type_: GLenum; const indices: Pointer); stdcall;
  glTexImage3D: procedure(target: GLenum; level: GLint; internalformat: GLint; width: GLsizei; height: GLsizei; depth: GLsizei; border: GLint; format: GLenum; type_: GLenum; const pixels: Pointer); stdcall;
  glTexSubImage3D: procedure(target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; zoffset: GLint; width: GLsizei; height: GLsizei; depth: GLsizei; format: GLenum; type_: GLenum; const pixels: Pointer); stdcall;
  glCopyTexSubImage3D: procedure(target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; zoffset: GLint; x: GLint; y: GLint; width: GLsizei; height: GLsizei); stdcall;

{ GL_VERSION_1_3 }
  glActiveTexture: procedure(texture: GLenum); stdcall;
  glSampleCoverage: procedure(value: GLfloat; invert: GLboolean); stdcall;
  glCompressedTexImage3D: procedure(target: GLenum; level: GLint; internalformat: GLenum; width: GLsizei; height: GLsizei; depth: GLsizei; border: GLint; imageSize: GLsizei; const data: Pointer); stdcall;
  glCompressedTexImage2D: procedure(target: GLenum; level: GLint; internalformat: GLenum; width: GLsizei; height: GLsizei; border: GLint; imageSize: GLsizei; const data: Pointer); stdcall;
  glCompressedTexImage1D: procedure(target: GLenum; level: GLint; internalformat: GLenum; width: GLsizei; border: GLint; imageSize: GLsizei; const data: Pointer); stdcall;
  glCompressedTexSubImage3D: procedure(target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; zoffset: GLint; width: GLsizei; height: GLsizei; depth: GLsizei; format: GLenum; imageSize: GLsizei; const data: Pointer); stdcall;
  glCompressedTexSubImage2D: procedure(target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; width: GLsizei; height: GLsizei; format: GLenum; imageSize: GLsizei; const data: Pointer); stdcall;
  glCompressedTexSubImage1D: procedure(target: GLenum; level: GLint; xoffset: GLint; width: GLsizei; format: GLenum; imageSize: GLsizei; const data: Pointer); stdcall;
  glGetCompressedTexImage: procedure(target: GLenum; level: GLint; img: Pointer); stdcall;
  glClientActiveTexture: procedure(texture: GLenum); stdcall;
  glMultiTexCoord1d: procedure(target: GLenum; s: GLdouble); stdcall;
  glMultiTexCoord1dv: procedure(target: GLenum; const v: PGLdouble); stdcall;
  glMultiTexCoord1f: procedure(target: GLenum; s: GLfloat); stdcall;
  glMultiTexCoord1fv: procedure(target: GLenum; const v: PGLfloat); stdcall;
  glMultiTexCoord1i: procedure(target: GLenum; s: GLint); stdcall;
  glMultiTexCoord1iv: procedure(target: GLenum; const v: PGLint); stdcall;
  glMultiTexCoord1s: procedure(target: GLenum; s: GLshort); stdcall;
  glMultiTexCoord1sv: procedure(target: GLenum; const v: PGLshort); stdcall;
  glMultiTexCoord2d: procedure(target: GLenum; s: GLdouble; t: GLdouble); stdcall;
  glMultiTexCoord2dv: procedure(target: GLenum; const v: PGLdouble); stdcall;
  glMultiTexCoord2f: procedure(target: GLenum; s: GLfloat; t: GLfloat); stdcall;
  glMultiTexCoord2fv: procedure(target: GLenum; const v: PGLfloat); stdcall;
  glMultiTexCoord2i: procedure(target: GLenum; s: GLint; t: GLint); stdcall;
  glMultiTexCoord2iv: procedure(target: GLenum; const v: PGLint); stdcall;
  glMultiTexCoord2s: procedure(target: GLenum; s: GLshort; t: GLshort); stdcall;
  glMultiTexCoord2sv: procedure(target: GLenum; const v: PGLshort); stdcall;
  glMultiTexCoord3d: procedure(target: GLenum; s: GLdouble; t: GLdouble; r: GLdouble); stdcall;
  glMultiTexCoord3dv: procedure(target: GLenum; const v: PGLdouble); stdcall;
  glMultiTexCoord3f: procedure(target: GLenum; s: GLfloat; t: GLfloat; r: GLfloat); stdcall;
  glMultiTexCoord3fv: procedure(target: GLenum; const v: PGLfloat); stdcall;
  glMultiTexCoord3i: procedure(target: GLenum; s: GLint; t: GLint; r: GLint); stdcall;
  glMultiTexCoord3iv: procedure(target: GLenum; const v: PGLint); stdcall;
  glMultiTexCoord3s: procedure(target: GLenum; s: GLshort; t: GLshort; r: GLshort); stdcall;
  glMultiTexCoord3sv: procedure(target: GLenum; const v: PGLshort); stdcall;
  glMultiTexCoord4d: procedure(target: GLenum; s: GLdouble; t: GLdouble; r: GLdouble; q: GLdouble); stdcall;
  glMultiTexCoord4dv: procedure(target: GLenum; const v: PGLdouble); stdcall;
  glMultiTexCoord4f: procedure(target: GLenum; s: GLfloat; t: GLfloat; r: GLfloat; q: GLfloat); stdcall;
  glMultiTexCoord4fv: procedure(target: GLenum; const v: PGLfloat); stdcall;
  glMultiTexCoord4i: procedure(target: GLenum; s: GLint; t: GLint; r: GLint; q: GLint); stdcall;
  glMultiTexCoord4iv: procedure(target: GLenum; const v: PGLint); stdcall;
  glMultiTexCoord4s: procedure(target: GLenum; s: GLshort; t: GLshort; r: GLshort; q: GLshort); stdcall;
  glMultiTexCoord4sv: procedure(target: GLenum; const v: PGLshort); stdcall;
  glLoadTransposeMatrixf: procedure(const m: PGLfloat); stdcall;
  glLoadTransposeMatrixd: procedure(const m: PGLdouble); stdcall;
  glMultTransposeMatrixf: procedure(const m: PGLfloat); stdcall;
  glMultTransposeMatrixd: procedure(const m: PGLdouble); stdcall;

{ GL_VERSION_1_4 }
  glBlendFuncSeparate: procedure(sfactorRGB: GLenum; dfactorRGB: GLenum; sfactorAlpha: GLenum; dfactorAlpha: GLenum); stdcall;
  glMultiDrawArrays: procedure(mode: GLenum; const first: PGLint; const count: PGLsizei; drawcount: GLsizei); stdcall;
  glMultiDrawElements: procedure(mode: GLenum; const count: PGLsizei; type_: GLenum; const indices: PPointer; drawcount: GLsizei); stdcall;
  glPointParameterf: procedure(pname: GLenum; param: GLfloat); stdcall;
  glPointParameterfv: procedure(pname: GLenum; const params: PGLfloat); stdcall;
  glPointParameteri: procedure(pname: GLenum; param: GLint); stdcall;
  glPointParameteriv: procedure(pname: GLenum; const params: PGLint); stdcall;
  glFogCoordf: procedure(coord: GLfloat); stdcall;
  glFogCoordfv: procedure(const coord: PGLfloat); stdcall;
  glFogCoordd: procedure(coord: GLdouble); stdcall;
  glFogCoorddv: procedure(const coord: PGLdouble); stdcall;
  glFogCoordPointer: procedure(type_: GLenum; stride: GLsizei; const pointer: Pointer); stdcall;
  glSecondaryColor3b: procedure(red: GLbyte; green: GLbyte; blue: GLbyte); stdcall;
  glSecondaryColor3bv: procedure(const v: PGLbyte); stdcall;
  glSecondaryColor3d: procedure(red: GLdouble; green: GLdouble; blue: GLdouble); stdcall;
  glSecondaryColor3dv: procedure(const v: PGLdouble); stdcall;
  glSecondaryColor3f: procedure(red: GLfloat; green: GLfloat; blue: GLfloat); stdcall;
  glSecondaryColor3fv: procedure(const v: PGLfloat); stdcall;
  glSecondaryColor3i: procedure(red: GLint; green: GLint; blue: GLint); stdcall;
  glSecondaryColor3iv: procedure(const v: PGLint); stdcall;
  glSecondaryColor3s: procedure(red: GLshort; green: GLshort; blue: GLshort); stdcall;
  glSecondaryColor3sv: procedure(const v: PGLshort); stdcall;
  glSecondaryColor3ub: procedure(red: GLubyte; green: GLubyte; blue: GLubyte); stdcall;
  glSecondaryColor3ubv: procedure(const v: PGLubyte); stdcall;
  glSecondaryColor3ui: procedure(red: GLuint; green: GLuint; blue: GLuint); stdcall;
  glSecondaryColor3uiv: procedure(const v: PGLuint); stdcall;
  glSecondaryColor3us: procedure(red: GLushort; green: GLushort; blue: GLushort); stdcall;
  glSecondaryColor3usv: procedure(const v: PGLushort); stdcall;
  glSecondaryColorPointer: procedure(size: GLint; type_: GLenum; stride: GLsizei; const pointer: Pointer); stdcall;
  glWindowPos2d: procedure(x: GLdouble; y: GLdouble); stdcall;
  glWindowPos2dv: procedure(const v: PGLdouble); stdcall;
  glWindowPos2f: procedure(x: GLfloat; y: GLfloat); stdcall;
  glWindowPos2fv: procedure(const v: PGLfloat); stdcall;
  glWindowPos2i: procedure(x: GLint; y: GLint); stdcall;
  glWindowPos2iv: procedure(const v: PGLint); stdcall;
  glWindowPos2s: procedure(x: GLshort; y: GLshort); stdcall;
  glWindowPos2sv: procedure(const v: PGLshort); stdcall;
  glWindowPos3d: procedure(x: GLdouble; y: GLdouble; z: GLdouble); stdcall;
  glWindowPos3dv: procedure(const v: PGLdouble); stdcall;
  glWindowPos3f: procedure(x: GLfloat; y: GLfloat; z: GLfloat); stdcall;
  glWindowPos3fv: procedure(const v: PGLfloat); stdcall;
  glWindowPos3i: procedure(x: GLint; y: GLint; z: GLint); stdcall;
  glWindowPos3iv: procedure(const v: PGLint); stdcall;
  glWindowPos3s: procedure(x: GLshort; y: GLshort; z: GLshort); stdcall;
  glWindowPos3sv: procedure(const v: PGLshort); stdcall;
  glBlendColor: procedure(red: GLfloat; green: GLfloat; blue: GLfloat; alpha: GLfloat); stdcall;
  glBlendEquation: procedure(mode: GLenum); stdcall;

{ GL_VERSION_1_5 }
  glGenQueries: procedure(n: GLsizei; ids: PGLuint); stdcall;
  glDeleteQueries: procedure(n: GLsizei; const ids: PGLuint); stdcall;
  glIsQuery: function(id: GLuint): GLboolean; stdcall;
  glBeginQuery: procedure(target: GLenum; id: GLuint); stdcall;
  glEndQuery: procedure(target: GLenum); stdcall;
  glGetQueryiv: procedure(target: GLenum; pname: GLenum; params: PGLint); stdcall;
  glGetQueryObjectiv: procedure(id: GLuint; pname: GLenum; params: PGLint); stdcall;
  glGetQueryObjectuiv: procedure(id: GLuint; pname: GLenum; params: PGLuint); stdcall;
  glBindBuffer: procedure(target: GLenum; buffer: GLuint); stdcall;
  glDeleteBuffers: procedure(n: GLsizei; const buffers: PGLuint); stdcall;
  glGenBuffers: procedure(n: GLsizei; buffers: PGLuint); stdcall;
  glIsBuffer: function(buffer: GLuint): GLboolean; stdcall;
  glBufferData: procedure(target: GLenum; size: GLsizeiptr; const data: Pointer; usage: GLenum); stdcall;
  glBufferSubData: procedure(target: GLenum; offset: GLintptr; size: GLsizeiptr; const data: Pointer); stdcall;
  glGetBufferSubData: procedure(target: GLenum; offset: GLintptr; size: GLsizeiptr; data: Pointer); stdcall;
  glMapBuffer: function(target: GLenum; access: GLenum): Pointer; stdcall;
  glUnmapBuffer: function(target: GLenum): GLboolean; stdcall;
  glGetBufferParameteriv: procedure(target: GLenum; pname: GLenum; params: PGLint); stdcall;
  glGetBufferPointerv: procedure(target: GLenum; pname: GLenum; params: PPointer); stdcall;

{ GL_VERSION_2_0 }
  glBlendEquationSeparate: procedure(modeRGB: GLenum; modeAlpha: GLenum); stdcall;
  glDrawBuffers: procedure(n: GLsizei; const bufs: PGLenum); stdcall;
  glStencilOpSeparate: procedure(face: GLenum; sfail: GLenum; dpfail: GLenum; dppass: GLenum); stdcall;
  glStencilFuncSeparate: procedure(face: GLenum; func: GLenum; ref: GLint; mask: GLuint); stdcall;
  glStencilMaskSeparate: procedure(face: GLenum; mask: GLuint); stdcall;
  glAttachShader: procedure(program_: GLuint; shader: GLuint); stdcall;
  glBindAttribLocation: procedure(program_: GLuint; index: GLuint; const name: PGLchar); stdcall;
  glCompileShader: procedure(shader: GLuint); stdcall;
  glCreateProgram: function: GLuint; stdcall;
  glCreateShader: function(type_: GLenum): GLuint; stdcall;
  glDeleteProgram: procedure(program_: GLuint); stdcall;
  glDeleteShader: procedure(shader: GLuint); stdcall;
  glDetachShader: procedure(program_: GLuint; shader: GLuint); stdcall;
  glDisableVertexAttribArray: procedure(index: GLuint); stdcall;
  glEnableVertexAttribArray: procedure(index: GLuint); stdcall;
  glGetActiveAttrib: procedure(program_: GLuint; index: GLuint; bufSize: GLsizei; length: PGLsizei; size: PGLint; type_: PGLenum; name: PGLchar); stdcall;
  glGetActiveUniform: procedure(program_: GLuint; index: GLuint; bufSize: GLsizei; length: PGLsizei; size: PGLint; type_: PGLenum; name: PGLchar); stdcall;
  glGetAttachedShaders: procedure(program_: GLuint; maxCount: GLsizei; count: PGLsizei; shaders: PGLuint); stdcall;
  glGetAttribLocation: function(program_: GLuint; const name: PGLchar): GLint; stdcall;
  glGetProgramiv: procedure(program_: GLuint; pname: GLenum; params: PGLint); stdcall;
  glGetProgramInfoLog: procedure(program_: GLuint; bufSize: GLsizei; length: PGLsizei; infoLog: PGLchar); stdcall;
  glGetShaderiv: procedure(shader: GLuint; pname: GLenum; params: PGLint); stdcall;
  glGetShaderInfoLog: procedure(shader: GLuint; bufSize: GLsizei; length: PGLsizei; infoLog: PGLchar); stdcall;
  glGetShaderSource: procedure(shader: GLuint; bufSize: GLsizei; length: PGLsizei; source: PGLchar); stdcall;
  glGetUniformLocation: function(program_: GLuint; const name: PGLchar): GLint; stdcall;
  glGetUniformfv: procedure(program_: GLuint; location: GLint; params: PGLfloat); stdcall;
  glGetUniformiv: procedure(program_: GLuint; location: GLint; params: PGLint); stdcall;
  glGetVertexAttribdv: procedure(index: GLuint; pname: GLenum; params: PGLdouble); stdcall;
  glGetVertexAttribfv: procedure(index: GLuint; pname: GLenum; params: PGLfloat); stdcall;
  glGetVertexAttribiv: procedure(index: GLuint; pname: GLenum; params: PGLint); stdcall;
  glGetVertexAttribPointerv: procedure(index: GLuint; pname: GLenum; pointer: PPointer); stdcall;
  glIsProgram: function(program_: GLuint): GLboolean; stdcall;
  glIsShader: function(shader: GLuint): GLboolean; stdcall;
  glLinkProgram: procedure(program_: GLuint); stdcall;
  glShaderSource: procedure(shader: GLuint; count: GLsizei; const string_: PPGLchar; const length: PGLint); stdcall;
  glUseProgram: procedure(program_: GLuint); stdcall;
  glUniform1f: procedure(location: GLint; v0: GLfloat); stdcall;
  glUniform2f: procedure(location: GLint; v0: GLfloat; v1: GLfloat); stdcall;
  glUniform3f: procedure(location: GLint; v0: GLfloat; v1: GLfloat; v2: GLfloat); stdcall;
  glUniform4f: procedure(location: GLint; v0: GLfloat; v1: GLfloat; v2: GLfloat; v3: GLfloat); stdcall;
  glUniform1i: procedure(location: GLint; v0: GLint); stdcall;
  glUniform2i: procedure(location: GLint; v0: GLint; v1: GLint); stdcall;
  glUniform3i: procedure(location: GLint; v0: GLint; v1: GLint; v2: GLint); stdcall;
  glUniform4i: procedure(location: GLint; v0: GLint; v1: GLint; v2: GLint; v3: GLint); stdcall;
  glUniform1fv: procedure(location: GLint; count: GLsizei; const value: PGLfloat); stdcall;
  glUniform2fv: procedure(location: GLint; count: GLsizei; const value: PGLfloat); stdcall;
  glUniform3fv: procedure(location: GLint; count: GLsizei; const value: PGLfloat); stdcall;
  glUniform4fv: procedure(location: GLint; count: GLsizei; const value: PGLfloat); stdcall;
  glUniform1iv: procedure(location: GLint; count: GLsizei; const value: PGLint); stdcall;
  glUniform2iv: procedure(location: GLint; count: GLsizei; const value: PGLint); stdcall;
  glUniform3iv: procedure(location: GLint; count: GLsizei; const value: PGLint); stdcall;
  glUniform4iv: procedure(location: GLint; count: GLsizei; const value: PGLint); stdcall;
  glUniformMatrix2fv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); stdcall;
  glUniformMatrix3fv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); stdcall;
  glUniformMatrix4fv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); stdcall;
  glValidateProgram: procedure(program_: GLuint); stdcall;
  glVertexAttrib1d: procedure(index: GLuint; x: GLdouble); stdcall;
  glVertexAttrib1dv: procedure(index: GLuint; const v: PGLdouble); stdcall;
  glVertexAttrib1f: procedure(index: GLuint; x: GLfloat); stdcall;
  glVertexAttrib1fv: procedure(index: GLuint; const v: PGLfloat); stdcall;
  glVertexAttrib1s: procedure(index: GLuint; x: GLshort); stdcall;
  glVertexAttrib1sv: procedure(index: GLuint; const v: PGLshort); stdcall;
  glVertexAttrib2d: procedure(index: GLuint; x: GLdouble; y: GLdouble); stdcall;
  glVertexAttrib2dv: procedure(index: GLuint; const v: PGLdouble); stdcall;
  glVertexAttrib2f: procedure(index: GLuint; x: GLfloat; y: GLfloat); stdcall;
  glVertexAttrib2fv: procedure(index: GLuint; const v: PGLfloat); stdcall;
  glVertexAttrib2s: procedure(index: GLuint; x: GLshort; y: GLshort); stdcall;
  glVertexAttrib2sv: procedure(index: GLuint; const v: PGLshort); stdcall;
  glVertexAttrib3d: procedure(index: GLuint; x: GLdouble; y: GLdouble; z: GLdouble); stdcall;
  glVertexAttrib3dv: procedure(index: GLuint; const v: PGLdouble); stdcall;
  glVertexAttrib3f: procedure(index: GLuint; x: GLfloat; y: GLfloat; z: GLfloat); stdcall;
  glVertexAttrib3fv: procedure(index: GLuint; const v: PGLfloat); stdcall;
  glVertexAttrib3s: procedure(index: GLuint; x: GLshort; y: GLshort; z: GLshort); stdcall;
  glVertexAttrib3sv: procedure(index: GLuint; const v: PGLshort); stdcall;
  glVertexAttrib4Nbv: procedure(index: GLuint; const v: PGLbyte); stdcall;
  glVertexAttrib4Niv: procedure(index: GLuint; const v: PGLint); stdcall;
  glVertexAttrib4Nsv: procedure(index: GLuint; const v: PGLshort); stdcall;
  glVertexAttrib4Nub: procedure(index: GLuint; x: GLubyte; y: GLubyte; z: GLubyte; w: GLubyte); stdcall;
  glVertexAttrib4Nubv: procedure(index: GLuint; const v: PGLubyte); stdcall;
  glVertexAttrib4Nuiv: procedure(index: GLuint; const v: PGLuint); stdcall;
  glVertexAttrib4Nusv: procedure(index: GLuint; const v: PGLushort); stdcall;
  glVertexAttrib4bv: procedure(index: GLuint; const v: PGLbyte); stdcall;
  glVertexAttrib4d: procedure(index: GLuint; x: GLdouble; y: GLdouble; z: GLdouble; w: GLdouble); stdcall;
  glVertexAttrib4dv: procedure(index: GLuint; const v: PGLdouble); stdcall;
  glVertexAttrib4f: procedure(index: GLuint; x: GLfloat; y: GLfloat; z: GLfloat; w: GLfloat); stdcall;
  glVertexAttrib4fv: procedure(index: GLuint; const v: PGLfloat); stdcall;
  glVertexAttrib4iv: procedure(index: GLuint; const v: PGLint); stdcall;
  glVertexAttrib4s: procedure(index: GLuint; x: GLshort; y: GLshort; z: GLshort; w: GLshort); stdcall;
  glVertexAttrib4sv: procedure(index: GLuint; const v: PGLshort); stdcall;
  glVertexAttrib4ubv: procedure(index: GLuint; const v: PGLubyte); stdcall;
  glVertexAttrib4uiv: procedure(index: GLuint; const v: PGLuint); stdcall;
  glVertexAttrib4usv: procedure(index: GLuint; const v: PGLushort); stdcall;
  glVertexAttribPointer: procedure(index: GLuint; size: GLint; type_: GLenum; normalized: GLboolean; stride: GLsizei; const pointer: Pointer); stdcall;

{ GL_VERSION_2_1 }
  glUniformMatrix2x3fv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); stdcall;
  glUniformMatrix3x2fv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); stdcall;
  glUniformMatrix2x4fv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); stdcall;
  glUniformMatrix4x2fv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); stdcall;
  glUniformMatrix3x4fv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); stdcall;
  glUniformMatrix4x3fv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); stdcall;

{ GL_VERSION_3_0 }
  glColorMaski: procedure(index: GLuint; r: GLboolean; g: GLboolean; b: GLboolean; a: GLboolean); stdcall;
  glGetBooleani_v: procedure(target: GLenum; index: GLuint; data: PGLboolean); stdcall;
  glGetIntegeri_v: procedure(target: GLenum; index: GLuint; data: PGLint); stdcall;
  glEnablei: procedure(target: GLenum; index: GLuint); stdcall;
  glDisablei: procedure(target: GLenum; index: GLuint); stdcall;
  glIsEnabledi: function(target: GLenum; index: GLuint): GLboolean; stdcall;
  glBeginTransformFeedback: procedure(primitiveMode: GLenum); stdcall;
  glEndTransformFeedback: procedure; stdcall;
  glBindBufferRange: procedure(target: GLenum; index: GLuint; buffer: GLuint; offset: GLintptr; size: GLsizeiptr); stdcall;
  glBindBufferBase: procedure(target: GLenum; index: GLuint; buffer: GLuint); stdcall;
  glTransformFeedbackVaryings: procedure(program_: GLuint; count: GLsizei; const varyings: PPGLchar; bufferMode: GLenum); stdcall;
  glGetTransformFeedbackVarying: procedure(program_: GLuint; index: GLuint; bufSize: GLsizei; length: PGLsizei; size: PGLsizei; type_: PGLenum; name: PGLchar); stdcall;
  glClampColor: procedure(target: GLenum; clamp: GLenum); stdcall;
  glBeginConditionalRender: procedure(id: GLuint; mode: GLenum); stdcall;
  glEndConditionalRender: procedure; stdcall;
  glVertexAttribIPointer: procedure(index: GLuint; size: GLint; type_: GLenum; stride: GLsizei; const pointer: Pointer); stdcall;
  glGetVertexAttribIiv: procedure(index: GLuint; pname: GLenum; params: PGLint); stdcall;
  glGetVertexAttribIuiv: procedure(index: GLuint; pname: GLenum; params: PGLuint); stdcall;
  glVertexAttribI1i: procedure(index: GLuint; x: GLint); stdcall;
  glVertexAttribI2i: procedure(index: GLuint; x: GLint; y: GLint); stdcall;
  glVertexAttribI3i: procedure(index: GLuint; x: GLint; y: GLint; z: GLint); stdcall;
  glVertexAttribI4i: procedure(index: GLuint; x: GLint; y: GLint; z: GLint; w: GLint); stdcall;
  glVertexAttribI1ui: procedure(index: GLuint; x: GLuint); stdcall;
  glVertexAttribI2ui: procedure(index: GLuint; x: GLuint; y: GLuint); stdcall;
  glVertexAttribI3ui: procedure(index: GLuint; x: GLuint; y: GLuint; z: GLuint); stdcall;
  glVertexAttribI4ui: procedure(index: GLuint; x: GLuint; y: GLuint; z: GLuint; w: GLuint); stdcall;
  glVertexAttribI1iv: procedure(index: GLuint; const v: PGLint); stdcall;
  glVertexAttribI2iv: procedure(index: GLuint; const v: PGLint); stdcall;
  glVertexAttribI3iv: procedure(index: GLuint; const v: PGLint); stdcall;
  glVertexAttribI4iv: procedure(index: GLuint; const v: PGLint); stdcall;
  glVertexAttribI1uiv: procedure(index: GLuint; const v: PGLuint); stdcall;
  glVertexAttribI2uiv: procedure(index: GLuint; const v: PGLuint); stdcall;
  glVertexAttribI3uiv: procedure(index: GLuint; const v: PGLuint); stdcall;
  glVertexAttribI4uiv: procedure(index: GLuint; const v: PGLuint); stdcall;
  glVertexAttribI4bv: procedure(index: GLuint; const v: PGLbyte); stdcall;
  glVertexAttribI4sv: procedure(index: GLuint; const v: PGLshort); stdcall;
  glVertexAttribI4ubv: procedure(index: GLuint; const v: PGLubyte); stdcall;
  glVertexAttribI4usv: procedure(index: GLuint; const v: PGLushort); stdcall;
  glGetUniformuiv: procedure(program_: GLuint; location: GLint; params: PGLuint); stdcall;
  glBindFragDataLocation: procedure(program_: GLuint; color: GLuint; const name: PGLchar); stdcall;
  glGetFragDataLocation: function(program_: GLuint; const name: PGLchar): GLint; stdcall;
  glUniform1ui: procedure(location: GLint; v0: GLuint); stdcall;
  glUniform2ui: procedure(location: GLint; v0: GLuint; v1: GLuint); stdcall;
  glUniform3ui: procedure(location: GLint; v0: GLuint; v1: GLuint; v2: GLuint); stdcall;
  glUniform4ui: procedure(location: GLint; v0: GLuint; v1: GLuint; v2: GLuint; v3: GLuint); stdcall;
  glUniform1uiv: procedure(location: GLint; count: GLsizei; const value: PGLuint); stdcall;
  glUniform2uiv: procedure(location: GLint; count: GLsizei; const value: PGLuint); stdcall;
  glUniform3uiv: procedure(location: GLint; count: GLsizei; const value: PGLuint); stdcall;
  glUniform4uiv: procedure(location: GLint; count: GLsizei; const value: PGLuint); stdcall;
  glTexParameterIiv: procedure(target: GLenum; pname: GLenum; const params: PGLint); stdcall;
  glTexParameterIuiv: procedure(target: GLenum; pname: GLenum; const params: PGLuint); stdcall;
  glGetTexParameterIiv: procedure(target: GLenum; pname: GLenum; params: PGLint); stdcall;
  glGetTexParameterIuiv: procedure(target: GLenum; pname: GLenum; params: PGLuint); stdcall;
  glClearBufferiv: procedure(buffer: GLenum; drawbuffer: GLint; const value: PGLint); stdcall;
  glClearBufferuiv: procedure(buffer: GLenum; drawbuffer: GLint; const value: PGLuint); stdcall;
  glClearBufferfv: procedure(buffer: GLenum; drawbuffer: GLint; const value: PGLfloat); stdcall;
  glClearBufferfi: procedure(buffer: GLenum; drawbuffer: GLint; depth: GLfloat; stencil: GLint); stdcall;
  glGetStringi: function(name: GLenum; index: GLuint): PGLubyte; stdcall;
  glIsRenderbuffer: function(renderbuffer: GLuint): GLboolean; stdcall;
  glBindRenderbuffer: procedure(target: GLenum; renderbuffer: GLuint); stdcall;
  glDeleteRenderbuffers: procedure(n: GLsizei; const renderbuffers: PGLuint); stdcall;
  glGenRenderbuffers: procedure(n: GLsizei; renderbuffers: PGLuint); stdcall;
  glRenderbufferStorage: procedure(target: GLenum; internalformat: GLenum; width: GLsizei; height: GLsizei); stdcall;
  glGetRenderbufferParameteriv: procedure(target: GLenum; pname: GLenum; params: PGLint); stdcall;
  glIsFramebuffer: function(framebuffer: GLuint): GLboolean; stdcall;
  glBindFramebuffer: procedure(target: GLenum; framebuffer: GLuint); stdcall;
  glDeleteFramebuffers: procedure(n: GLsizei; const framebuffers: PGLuint); stdcall;
  glGenFramebuffers: procedure(n: GLsizei; framebuffers: PGLuint); stdcall;
  glCheckFramebufferStatus: function(target: GLenum): GLenum; stdcall;
  glFramebufferTexture1D: procedure(target: GLenum; attachment: GLenum; textarget: GLenum; texture: GLuint; level: GLint); stdcall;
  glFramebufferTexture2D: procedure(target: GLenum; attachment: GLenum; textarget: GLenum; texture: GLuint; level: GLint); stdcall;
  glFramebufferTexture3D: procedure(target: GLenum; attachment: GLenum; textarget: GLenum; texture: GLuint; level: GLint; zoffset: GLint); stdcall;
  glFramebufferRenderbuffer: procedure(target: GLenum; attachment: GLenum; renderbuffertarget: GLenum; renderbuffer: GLuint); stdcall;
  glGetFramebufferAttachmentParameteriv: procedure(target: GLenum; attachment: GLenum; pname: GLenum; params: PGLint); stdcall;
  glGenerateMipmap: procedure(target: GLenum); stdcall;
  glBlitFramebuffer: procedure(srcX0: GLint; srcY0: GLint; srcX1: GLint; srcY1: GLint; dstX0: GLint; dstY0: GLint; dstX1: GLint; dstY1: GLint; mask: GLbitfield; filter: GLenum); stdcall;
  glRenderbufferStorageMultisample: procedure(target: GLenum; samples: GLsizei; internalformat: GLenum; width: GLsizei; height: GLsizei); stdcall;
  glFramebufferTextureLayer: procedure(target: GLenum; attachment: GLenum; texture: GLuint; level: GLint; layer: GLint); stdcall;
  glMapBufferRange: function(target: GLenum; offset: GLintptr; length: GLsizeiptr; access: GLbitfield): Pointer; stdcall;
  glFlushMappedBufferRange: procedure(target: GLenum; offset: GLintptr; length: GLsizeiptr); stdcall;
  glBindVertexArray: procedure(array_: GLuint); stdcall;
  glDeleteVertexArrays: procedure(n: GLsizei; const arrays: PGLuint); stdcall;
  glGenVertexArrays: procedure(n: GLsizei; arrays: PGLuint); stdcall;
  glIsVertexArray: function(array_: GLuint): GLboolean; stdcall;

{ GL_VERSION_3_1 }
  glDrawArraysInstanced: procedure(mode: GLenum; first: GLint; count: GLsizei; instancecount: GLsizei); stdcall;
  glDrawElementsInstanced: procedure(mode: GLenum; count: GLsizei; type_: GLenum; const indices: Pointer; instancecount: GLsizei); stdcall;
  glTexBuffer: procedure(target: GLenum; internalformat: GLenum; buffer: GLuint); stdcall;
  glPrimitiveRestartIndex: procedure(index: GLuint); stdcall;
  glCopyBufferSubData: procedure(readTarget: GLenum; writeTarget: GLenum; readOffset: GLintptr; writeOffset: GLintptr; size: GLsizeiptr); stdcall;
  glGetUniformIndices: procedure(program_: GLuint; uniformCount: GLsizei; const uniformNames: PPGLchar; uniformIndices: PGLuint); stdcall;
  glGetActiveUniformsiv: procedure(program_: GLuint; uniformCount: GLsizei; const uniformIndices: PGLuint; pname: GLenum; params: PGLint); stdcall;
  glGetActiveUniformName: procedure(program_: GLuint; uniformIndex: GLuint; bufSize: GLsizei; length: PGLsizei; uniformName: PGLchar); stdcall;
  glGetUniformBlockIndex: function(program_: GLuint; const uniformBlockName: PGLchar): GLuint; stdcall;
  glGetActiveUniformBlockiv: procedure(program_: GLuint; uniformBlockIndex: GLuint; pname: GLenum; params: PGLint); stdcall;
  glGetActiveUniformBlockName: procedure(program_: GLuint; uniformBlockIndex: GLuint; bufSize: GLsizei; length: PGLsizei; uniformBlockName: PGLchar); stdcall;
  glUniformBlockBinding: procedure(program_: GLuint; uniformBlockIndex: GLuint; uniformBlockBinding: GLuint); stdcall;

{ GL_VERSION_3_2 }

{ GLEXT_64_TYPES_DEFINED }
  glDrawElementsBaseVertex: procedure(mode: GLenum; count: GLsizei; type_: GLenum; const indices: Pointer; basevertex: GLint); stdcall;
  glDrawRangeElementsBaseVertex: procedure(mode: GLenum; start: GLuint; end_: GLuint; count: GLsizei; type_: GLenum; const indices: Pointer; basevertex: GLint); stdcall;
  glDrawElementsInstancedBaseVertex: procedure(mode: GLenum; count: GLsizei; type_: GLenum; const indices: Pointer; instancecount: GLsizei; basevertex: GLint); stdcall;
  glMultiDrawElementsBaseVertex: procedure(mode: GLenum; const count: PGLsizei; type_: GLenum; const indices: PPointer; drawcount: GLsizei; const basevertex: PGLint); stdcall;
  glProvokingVertex: procedure(mode: GLenum); stdcall;
  glFenceSync: function(condition: GLenum; flags: GLbitfield): GLsync; stdcall;
  glIsSync: function(sync: GLsync): GLboolean; stdcall;
  glDeleteSync: procedure(sync: GLsync); stdcall;
  glClientWaitSync: function(sync: GLsync; flags: GLbitfield; timeout: GLuint64): GLenum; stdcall;
  glWaitSync: procedure(sync: GLsync; flags: GLbitfield; timeout: GLuint64); stdcall;
  glGetInteger64v: procedure(pname: GLenum; data: PGLint64); stdcall;
  glGetSynciv: procedure(sync: GLsync; pname: GLenum; bufSize: GLsizei; length: PGLsizei; values: PGLint); stdcall;
  glGetInteger64i_v: procedure(target: GLenum; index: GLuint; data: PGLint64); stdcall;
  glGetBufferParameteri64v: procedure(target: GLenum; pname: GLenum; params: PGLint64); stdcall;
  glFramebufferTexture: procedure(target: GLenum; attachment: GLenum; texture: GLuint; level: GLint); stdcall;
  glTexImage2DMultisample: procedure(target: GLenum; samples: GLsizei; internalformat: GLenum; width: GLsizei; height: GLsizei; fixedsamplelocations: GLboolean); stdcall;
  glTexImage3DMultisample: procedure(target: GLenum; samples: GLsizei; internalformat: GLenum; width: GLsizei; height: GLsizei; depth: GLsizei; fixedsamplelocations: GLboolean); stdcall;
  glGetMultisamplefv: procedure(pname: GLenum; index: GLuint; val: PGLfloat); stdcall;
  glSampleMaski: procedure(index: GLuint; mask: GLbitfield); stdcall;

{ GL_VERSION_3_3 }
  glBindFragDataLocationIndexed: procedure(program_: GLuint; colorNumber: GLuint; index: GLuint; const name: PGLchar); stdcall;
  glGetFragDataIndex: function(program_: GLuint; const name: PGLchar): GLint; stdcall;
  glGenSamplers: procedure(count: GLsizei; samplers: PGLuint); stdcall;
  glDeleteSamplers: procedure(count: GLsizei; const samplers: PGLuint); stdcall;
  glIsSampler: function(sampler: GLuint): GLboolean; stdcall;
  glBindSampler: procedure(unit_: GLuint; sampler: GLuint); stdcall;
  glSamplerParameteri: procedure(sampler: GLuint; pname: GLenum; param: GLint); stdcall;
  glSamplerParameteriv: procedure(sampler: GLuint; pname: GLenum; const param: PGLint); stdcall;
  glSamplerParameterf: procedure(sampler: GLuint; pname: GLenum; param: GLfloat); stdcall;
  glSamplerParameterfv: procedure(sampler: GLuint; pname: GLenum; const param: PGLfloat); stdcall;
  glSamplerParameterIiv: procedure(sampler: GLuint; pname: GLenum; const param: PGLint); stdcall;
  glSamplerParameterIuiv: procedure(sampler: GLuint; pname: GLenum; const param: PGLuint); stdcall;
  glGetSamplerParameteriv: procedure(sampler: GLuint; pname: GLenum; params: PGLint); stdcall;
  glGetSamplerParameterIiv: procedure(sampler: GLuint; pname: GLenum; params: PGLint); stdcall;
  glGetSamplerParameterfv: procedure(sampler: GLuint; pname: GLenum; params: PGLfloat); stdcall;
  glGetSamplerParameterIuiv: procedure(sampler: GLuint; pname: GLenum; params: PGLuint); stdcall;
  glQueryCounter: procedure(id: GLuint; target: GLenum); stdcall;
  glGetQueryObjecti64v: procedure(id: GLuint; pname: GLenum; params: PGLint64); stdcall;
  glGetQueryObjectui64v: procedure(id: GLuint; pname: GLenum; params: PGLuint64); stdcall;
  glVertexAttribDivisor: procedure(index: GLuint; divisor: GLuint); stdcall;
  glVertexAttribP1ui: procedure(index: GLuint; type_: GLenum; normalized: GLboolean; value: GLuint); stdcall;
  glVertexAttribP1uiv: procedure(index: GLuint; type_: GLenum; normalized: GLboolean; const value: PGLuint); stdcall;
  glVertexAttribP2ui: procedure(index: GLuint; type_: GLenum; normalized: GLboolean; value: GLuint); stdcall;
  glVertexAttribP2uiv: procedure(index: GLuint; type_: GLenum; normalized: GLboolean; const value: PGLuint); stdcall;
  glVertexAttribP3ui: procedure(index: GLuint; type_: GLenum; normalized: GLboolean; value: GLuint); stdcall;
  glVertexAttribP3uiv: procedure(index: GLuint; type_: GLenum; normalized: GLboolean; const value: PGLuint); stdcall;
  glVertexAttribP4ui: procedure(index: GLuint; type_: GLenum; normalized: GLboolean; value: GLuint); stdcall;
  glVertexAttribP4uiv: procedure(index: GLuint; type_: GLenum; normalized: GLboolean; const value: PGLuint); stdcall;
  glVertexP2ui: procedure(type_: GLenum; value: GLuint); stdcall;
  glVertexP2uiv: procedure(type_: GLenum; const value: PGLuint); stdcall;
  glVertexP3ui: procedure(type_: GLenum; value: GLuint); stdcall;
  glVertexP3uiv: procedure(type_: GLenum; const value: PGLuint); stdcall;
  glVertexP4ui: procedure(type_: GLenum; value: GLuint); stdcall;
  glVertexP4uiv: procedure(type_: GLenum; const value: PGLuint); stdcall;
  glTexCoordP1ui: procedure(type_: GLenum; coords: GLuint); stdcall;
  glTexCoordP1uiv: procedure(type_: GLenum; const coords: PGLuint); stdcall;
  glTexCoordP2ui: procedure(type_: GLenum; coords: GLuint); stdcall;
  glTexCoordP2uiv: procedure(type_: GLenum; const coords: PGLuint); stdcall;
  glTexCoordP3ui: procedure(type_: GLenum; coords: GLuint); stdcall;
  glTexCoordP3uiv: procedure(type_: GLenum; const coords: PGLuint); stdcall;
  glTexCoordP4ui: procedure(type_: GLenum; coords: GLuint); stdcall;
  glTexCoordP4uiv: procedure(type_: GLenum; const coords: PGLuint); stdcall;
  glMultiTexCoordP1ui: procedure(texture: GLenum; type_: GLenum; coords: GLuint); stdcall;
  glMultiTexCoordP1uiv: procedure(texture: GLenum; type_: GLenum; const coords: PGLuint); stdcall;
  glMultiTexCoordP2ui: procedure(texture: GLenum; type_: GLenum; coords: GLuint); stdcall;
  glMultiTexCoordP2uiv: procedure(texture: GLenum; type_: GLenum; const coords: PGLuint); stdcall;
  glMultiTexCoordP3ui: procedure(texture: GLenum; type_: GLenum; coords: GLuint); stdcall;
  glMultiTexCoordP3uiv: procedure(texture: GLenum; type_: GLenum; const coords: PGLuint); stdcall;
  glMultiTexCoordP4ui: procedure(texture: GLenum; type_: GLenum; coords: GLuint); stdcall;
  glMultiTexCoordP4uiv: procedure(texture: GLenum; type_: GLenum; const coords: PGLuint); stdcall;
  glNormalP3ui: procedure(type_: GLenum; coords: GLuint); stdcall;
  glNormalP3uiv: procedure(type_: GLenum; const coords: PGLuint); stdcall;
  glColorP3ui: procedure(type_: GLenum; color: GLuint); stdcall;
  glColorP3uiv: procedure(type_: GLenum; const color: PGLuint); stdcall;
  glColorP4ui: procedure(type_: GLenum; color: GLuint); stdcall;
  glColorP4uiv: procedure(type_: GLenum; const color: PGLuint); stdcall;
  glSecondaryColorP3ui: procedure(type_: GLenum; color: GLuint); stdcall;
  glSecondaryColorP3uiv: procedure(type_: GLenum; const color: PGLuint); stdcall;

{ GL_VERSION_4_0 }
  glMinSampleShading: procedure(value: GLfloat); stdcall;
  glBlendEquationi: procedure(buf: GLuint; mode: GLenum); stdcall;
  glBlendEquationSeparatei: procedure(buf: GLuint; modeRGB: GLenum; modeAlpha: GLenum); stdcall;
  glBlendFunci: procedure(buf: GLuint; src: GLenum; dst: GLenum); stdcall;
  glBlendFuncSeparatei: procedure(buf: GLuint; srcRGB: GLenum; dstRGB: GLenum; srcAlpha: GLenum; dstAlpha: GLenum); stdcall;
  glDrawArraysIndirect: procedure(mode: GLenum; const indirect: Pointer); stdcall;
  glDrawElementsIndirect: procedure(mode: GLenum; type_: GLenum; const indirect: Pointer); stdcall;
  glUniform1d: procedure(location: GLint; x: GLdouble); stdcall;
  glUniform2d: procedure(location: GLint; x: GLdouble; y: GLdouble); stdcall;
  glUniform3d: procedure(location: GLint; x: GLdouble; y: GLdouble; z: GLdouble); stdcall;
  glUniform4d: procedure(location: GLint; x: GLdouble; y: GLdouble; z: GLdouble; w: GLdouble); stdcall;
  glUniform1dv: procedure(location: GLint; count: GLsizei; const value: PGLdouble); stdcall;
  glUniform2dv: procedure(location: GLint; count: GLsizei; const value: PGLdouble); stdcall;
  glUniform3dv: procedure(location: GLint; count: GLsizei; const value: PGLdouble); stdcall;
  glUniform4dv: procedure(location: GLint; count: GLsizei; const value: PGLdouble); stdcall;
  glUniformMatrix2dv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); stdcall;
  glUniformMatrix3dv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); stdcall;
  glUniformMatrix4dv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); stdcall;
  glUniformMatrix2x3dv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); stdcall;
  glUniformMatrix2x4dv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); stdcall;
  glUniformMatrix3x2dv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); stdcall;
  glUniformMatrix3x4dv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); stdcall;
  glUniformMatrix4x2dv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); stdcall;
  glUniformMatrix4x3dv: procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); stdcall;
  glGetUniformdv: procedure(program_: GLuint; location: GLint; params: PGLdouble); stdcall;
  glGetSubroutineUniformLocation: function(program_: GLuint; shadertype: GLenum; const name: PGLchar): GLint; stdcall;
  glGetSubroutineIndex: function(program_: GLuint; shadertype: GLenum; const name: PGLchar): GLuint; stdcall;
  glGetActiveSubroutineUniformiv: procedure(program_: GLuint; shadertype: GLenum; index: GLuint; pname: GLenum; values: PGLint); stdcall;
  glGetActiveSubroutineUniformName: procedure(program_: GLuint; shadertype: GLenum; index: GLuint; bufsize: GLsizei; length: PGLsizei; name: PGLchar); stdcall;
  glGetActiveSubroutineName: procedure(program_: GLuint; shadertype: GLenum; index: GLuint; bufsize: GLsizei; length: PGLsizei; name: PGLchar); stdcall;
  glUniformSubroutinesuiv: procedure(shadertype: GLenum; count: GLsizei; const indices: PGLuint); stdcall;
  glGetUniformSubroutineuiv: procedure(shadertype: GLenum; location: GLint; params: PGLuint); stdcall;
  glGetProgramStageiv: procedure(program_: GLuint; shadertype: GLenum; pname: GLenum; values: PGLint); stdcall;
  glPatchParameteri: procedure(pname: GLenum; value: GLint); stdcall;
  glPatchParameterfv: procedure(pname: GLenum; const values: PGLfloat); stdcall;
  glBindTransformFeedback: procedure(target: GLenum; id: GLuint); stdcall;
  glDeleteTransformFeedbacks: procedure(n: GLsizei; const ids: PGLuint); stdcall;
  glGenTransformFeedbacks: procedure(n: GLsizei; ids: PGLuint); stdcall;
  glIsTransformFeedback: function(id: GLuint): GLboolean; stdcall;
  glPauseTransformFeedback: procedure; stdcall;
  glResumeTransformFeedback: procedure; stdcall;
  glDrawTransformFeedback: procedure(mode: GLenum; id: GLuint); stdcall;
  glDrawTransformFeedbackStream: procedure(mode: GLenum; id: GLuint; stream: GLuint); stdcall;
  glBeginQueryIndexed: procedure(target: GLenum; index: GLuint; id: GLuint); stdcall;
  glEndQueryIndexed: procedure(target: GLenum; index: GLuint); stdcall;
  glGetQueryIndexediv: procedure(target: GLenum; index: GLuint; pname: GLenum; params: PGLint); stdcall;

{ GL_VERSION_4_1 }
  glReleaseShaderCompiler: procedure; stdcall;
  glShaderBinary: procedure(count: GLsizei; const shaders: PGLuint; binaryformat: GLenum; const binary: Pointer; length: GLsizei); stdcall;
  glGetShaderPrecisionFormat: procedure(shadertype: GLenum; precisiontype: GLenum; range: PGLint; precision: PGLint); stdcall;
  glDepthRangef: procedure(n: GLfloat; f: GLfloat); stdcall;
  glClearDepthf: procedure(d: GLfloat); stdcall;
  glGetProgramBinary: procedure(program_: GLuint; bufSize: GLsizei; length: PGLsizei; binaryFormat: PGLenum; binary: Pointer); stdcall;
  glProgramBinary: procedure(program_: GLuint; binaryFormat: GLenum; const binary: Pointer; length: GLsizei); stdcall;
  glProgramParameteri: procedure(program_: GLuint; pname: GLenum; value: GLint); stdcall;
  glUseProgramStages: procedure(pipeline: GLuint; stages: GLbitfield; program_: GLuint); stdcall;
  glActiveShaderProgram: procedure(pipeline: GLuint; program_: GLuint); stdcall;
  glCreateShaderProgramv: function(type_: GLenum; count: GLsizei; const strings: PPGLchar): GLuint; stdcall;
  glBindProgramPipeline: procedure(pipeline: GLuint); stdcall;
  glDeleteProgramPipelines: procedure(n: GLsizei; const pipelines: PGLuint); stdcall;
  glGenProgramPipelines: procedure(n: GLsizei; pipelines: PGLuint); stdcall;
  glIsProgramPipeline: function(pipeline: GLuint): GLboolean; stdcall;
  glGetProgramPipelineiv: procedure(pipeline: GLuint; pname: GLenum; params: PGLint); stdcall;
  glProgramUniform1i: procedure(program_: GLuint; location: GLint; v0: GLint); stdcall;
  glProgramUniform1iv: procedure(program_: GLuint; location: GLint; count: GLsizei; const value: PGLint); stdcall;
  glProgramUniform1f: procedure(program_: GLuint; location: GLint; v0: GLfloat); stdcall;
  glProgramUniform1fv: procedure(program_: GLuint; location: GLint; count: GLsizei; const value: PGLfloat); stdcall;
  glProgramUniform1d: procedure(program_: GLuint; location: GLint; v0: GLdouble); stdcall;
  glProgramUniform1dv: procedure(program_: GLuint; location: GLint; count: GLsizei; const value: PGLdouble); stdcall;
  glProgramUniform1ui: procedure(program_: GLuint; location: GLint; v0: GLuint); stdcall;
  glProgramUniform1uiv: procedure(program_: GLuint; location: GLint; count: GLsizei; const value: PGLuint); stdcall;
  glProgramUniform2i: procedure(program_: GLuint; location: GLint; v0: GLint; v1: GLint); stdcall;
  glProgramUniform2iv: procedure(program_: GLuint; location: GLint; count: GLsizei; const value: PGLint); stdcall;
  glProgramUniform2f: procedure(program_: GLuint; location: GLint; v0: GLfloat; v1: GLfloat); stdcall;
  glProgramUniform2fv: procedure(program_: GLuint; location: GLint; count: GLsizei; const value: PGLfloat); stdcall;
  glProgramUniform2d: procedure(program_: GLuint; location: GLint; v0: GLdouble; v1: GLdouble); stdcall;
  glProgramUniform2dv: procedure(program_: GLuint; location: GLint; count: GLsizei; const value: PGLdouble); stdcall;
  glProgramUniform2ui: procedure(program_: GLuint; location: GLint; v0: GLuint; v1: GLuint); stdcall;
  glProgramUniform2uiv: procedure(program_: GLuint; location: GLint; count: GLsizei; const value: PGLuint); stdcall;
  glProgramUniform3i: procedure(program_: GLuint; location: GLint; v0: GLint; v1: GLint; v2: GLint); stdcall;
  glProgramUniform3iv: procedure(program_: GLuint; location: GLint; count: GLsizei; const value: PGLint); stdcall;
  glProgramUniform3f: procedure(program_: GLuint; location: GLint; v0: GLfloat; v1: GLfloat; v2: GLfloat); stdcall;
  glProgramUniform3fv: procedure(program_: GLuint; location: GLint; count: GLsizei; const value: PGLfloat); stdcall;
  glProgramUniform3d: procedure(program_: GLuint; location: GLint; v0: GLdouble; v1: GLdouble; v2: GLdouble); stdcall;
  glProgramUniform3dv: procedure(program_: GLuint; location: GLint; count: GLsizei; const value: PGLdouble); stdcall;
  glProgramUniform3ui: procedure(program_: GLuint; location: GLint; v0: GLuint; v1: GLuint; v2: GLuint); stdcall;
  glProgramUniform3uiv: procedure(program_: GLuint; location: GLint; count: GLsizei; const value: PGLuint); stdcall;
  glProgramUniform4i: procedure(program_: GLuint; location: GLint; v0: GLint; v1: GLint; v2: GLint; v3: GLint); stdcall;
  glProgramUniform4iv: procedure(program_: GLuint; location: GLint; count: GLsizei; const value: PGLint); stdcall;
  glProgramUniform4f: procedure(program_: GLuint; location: GLint; v0: GLfloat; v1: GLfloat; v2: GLfloat; v3: GLfloat); stdcall;
  glProgramUniform4fv: procedure(program_: GLuint; location: GLint; count: GLsizei; const value: PGLfloat); stdcall;
  glProgramUniform4d: procedure(program_: GLuint; location: GLint; v0: GLdouble; v1: GLdouble; v2: GLdouble; v3: GLdouble); stdcall;
  glProgramUniform4dv: procedure(program_: GLuint; location: GLint; count: GLsizei; const value: PGLdouble); stdcall;
  glProgramUniform4ui: procedure(program_: GLuint; location: GLint; v0: GLuint; v1: GLuint; v2: GLuint; v3: GLuint); stdcall;
  glProgramUniform4uiv: procedure(program_: GLuint; location: GLint; count: GLsizei; const value: PGLuint); stdcall;
  glProgramUniformMatrix2fv: procedure(program_: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); stdcall;
  glProgramUniformMatrix3fv: procedure(program_: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); stdcall;
  glProgramUniformMatrix4fv: procedure(program_: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); stdcall;
  glProgramUniformMatrix2dv: procedure(program_: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); stdcall;
  glProgramUniformMatrix3dv: procedure(program_: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); stdcall;
  glProgramUniformMatrix4dv: procedure(program_: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); stdcall;
  glProgramUniformMatrix2x3fv: procedure(program_: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); stdcall;
  glProgramUniformMatrix3x2fv: procedure(program_: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); stdcall;
  glProgramUniformMatrix2x4fv: procedure(program_: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); stdcall;
  glProgramUniformMatrix4x2fv: procedure(program_: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); stdcall;
  glProgramUniformMatrix3x4fv: procedure(program_: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); stdcall;
  glProgramUniformMatrix4x3fv: procedure(program_: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); stdcall;
  glProgramUniformMatrix2x3dv: procedure(program_: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); stdcall;
  glProgramUniformMatrix3x2dv: procedure(program_: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); stdcall;
  glProgramUniformMatrix2x4dv: procedure(program_: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); stdcall;
  glProgramUniformMatrix4x2dv: procedure(program_: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); stdcall;
  glProgramUniformMatrix3x4dv: procedure(program_: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); stdcall;
  glProgramUniformMatrix4x3dv: procedure(program_: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); stdcall;
  glValidateProgramPipeline: procedure(pipeline: GLuint); stdcall;
  glGetProgramPipelineInfoLog: procedure(pipeline: GLuint; bufSize: GLsizei; length: PGLsizei; infoLog: PGLchar); stdcall;
  glVertexAttribL1d: procedure(index: GLuint; x: GLdouble); stdcall;
  glVertexAttribL2d: procedure(index: GLuint; x: GLdouble; y: GLdouble); stdcall;
  glVertexAttribL3d: procedure(index: GLuint; x: GLdouble; y: GLdouble; z: GLdouble); stdcall;
  glVertexAttribL4d: procedure(index: GLuint; x: GLdouble; y: GLdouble; z: GLdouble; w: GLdouble); stdcall;
  glVertexAttribL1dv: procedure(index: GLuint; const v: PGLdouble); stdcall;
  glVertexAttribL2dv: procedure(index: GLuint; const v: PGLdouble); stdcall;
  glVertexAttribL3dv: procedure(index: GLuint; const v: PGLdouble); stdcall;
  glVertexAttribL4dv: procedure(index: GLuint; const v: PGLdouble); stdcall;
  glVertexAttribLPointer: procedure(index: GLuint; size: GLint; type_: GLenum; stride: GLsizei; const pointer: Pointer); stdcall;
  glGetVertexAttribLdv: procedure(index: GLuint; pname: GLenum; params: PGLdouble); stdcall;
  glViewportArrayv: procedure(first: GLuint; count: GLsizei; const v: PGLfloat); stdcall;
  glViewportIndexedf: procedure(index: GLuint; x: GLfloat; y: GLfloat; w: GLfloat; h: GLfloat); stdcall;
  glViewportIndexedfv: procedure(index: GLuint; const v: PGLfloat); stdcall;
  glScissorArrayv: procedure(first: GLuint; count: GLsizei; const v: PGLint); stdcall;
  glScissorIndexed: procedure(index: GLuint; left: GLint; bottom: GLint; width: GLsizei; height: GLsizei); stdcall;
  glScissorIndexedv: procedure(index: GLuint; const v: PGLint); stdcall;
  glDepthRangeArrayv: procedure(first: GLuint; count: GLsizei; const v: PGLdouble); stdcall;
  glDepthRangeIndexed: procedure(index: GLuint; n: GLdouble; f: GLdouble); stdcall;
  glGetFloati_v: procedure(target: GLenum; index: GLuint; data: PGLfloat); stdcall;
  glGetDoublei_v: procedure(target: GLenum; index: GLuint; data: PGLdouble); stdcall;

{ GL_VERSION_4_2 }
  glDrawArraysInstancedBaseInstance: procedure(mode: GLenum; first: GLint; count: GLsizei; instancecount: GLsizei; baseinstance: GLuint); stdcall;
  glDrawElementsInstancedBaseInstance: procedure(mode: GLenum; count: GLsizei; type_: GLenum; const indices: Pointer; instancecount: GLsizei; baseinstance: GLuint); stdcall;
  glDrawElementsInstancedBaseVertexBaseInstance: procedure(mode: GLenum; count: GLsizei; type_: GLenum; const indices: Pointer; instancecount: GLsizei; basevertex: GLint; baseinstance: GLuint); stdcall;
  glGetInternalformativ: procedure(target: GLenum; internalformat: GLenum; pname: GLenum; bufSize: GLsizei; params: PGLint); stdcall;
  glGetActiveAtomicCounterBufferiv: procedure(program_: GLuint; bufferIndex: GLuint; pname: GLenum; params: PGLint); stdcall;
  glBindImageTexture: procedure(unit_: GLuint; texture: GLuint; level: GLint; layered: GLboolean; layer: GLint; access: GLenum; format: GLenum); stdcall;
  glMemoryBarrier: procedure(barriers: GLbitfield); stdcall;
  glTexStorage1D: procedure(target: GLenum; levels: GLsizei; internalformat: GLenum; width: GLsizei); stdcall;
  glTexStorage2D: procedure(target: GLenum; levels: GLsizei; internalformat: GLenum; width: GLsizei; height: GLsizei); stdcall;
  glTexStorage3D: procedure(target: GLenum; levels: GLsizei; internalformat: GLenum; width: GLsizei; height: GLsizei; depth: GLsizei); stdcall;
  glDrawTransformFeedbackInstanced: procedure(mode: GLenum; id: GLuint; instancecount: GLsizei); stdcall;
  glDrawTransformFeedbackStreamInstanced: procedure(mode: GLenum; id: GLuint; stream: GLuint; instancecount: GLsizei); stdcall;

{ GL_VERSION_4_3 }
  glClearBufferData: procedure(target: GLenum; internalformat: GLenum; format: GLenum; type_: GLenum; const data: Pointer); stdcall;
  glClearBufferSubData: procedure(target: GLenum; internalformat: GLenum; offset: GLintptr; size: GLsizeiptr; format: GLenum; type_: GLenum; const data: Pointer); stdcall;
  glDispatchCompute: procedure(num_groups_x: GLuint; num_groups_y: GLuint; num_groups_z: GLuint); stdcall;
  glDispatchComputeIndirect: procedure(indirect: GLintptr); stdcall;
  glCopyImageSubData: procedure(srcName: GLuint; srcTarget: GLenum; srcLevel: GLint; srcX: GLint; srcY: GLint; srcZ: GLint; dstName: GLuint; dstTarget: GLenum; dstLevel: GLint; dstX: GLint; dstY: GLint; dstZ: GLint; srcWidth: GLsizei; srcHeight: GLsizei; srcDepth: GLsizei); stdcall;
  glFramebufferParameteri: procedure(target: GLenum; pname: GLenum; param: GLint); stdcall;
  glGetFramebufferParameteriv: procedure(target: GLenum; pname: GLenum; params: PGLint); stdcall;
  glGetInternalformati64v: procedure(target: GLenum; internalformat: GLenum; pname: GLenum; bufSize: GLsizei; params: PGLint64); stdcall;
  glInvalidateTexSubImage: procedure(texture: GLuint; level: GLint; xoffset: GLint; yoffset: GLint; zoffset: GLint; width: GLsizei; height: GLsizei; depth: GLsizei); stdcall;
  glInvalidateTexImage: procedure(texture: GLuint; level: GLint); stdcall;
  glInvalidateBufferSubData: procedure(buffer: GLuint; offset: GLintptr; length: GLsizeiptr); stdcall;
  glInvalidateBufferData: procedure(buffer: GLuint); stdcall;
  glInvalidateFramebuffer: procedure(target: GLenum; numAttachments: GLsizei; const attachments: PGLenum); stdcall;
  glInvalidateSubFramebuffer: procedure(target: GLenum; numAttachments: GLsizei; const attachments: PGLenum; x: GLint; y: GLint; width: GLsizei; height: GLsizei); stdcall;
  glMultiDrawArraysIndirect: procedure(mode: GLenum; const indirect: Pointer; drawcount: GLsizei; stride: GLsizei); stdcall;
  glMultiDrawElementsIndirect: procedure(mode: GLenum; type_: GLenum; const indirect: Pointer; drawcount: GLsizei; stride: GLsizei); stdcall;
  glGetProgramInterfaceiv: procedure(program_: GLuint; programInterface: GLenum; pname: GLenum; params: PGLint); stdcall;
  glGetProgramResourceIndex: function(program_: GLuint; programInterface: GLenum; const name: PGLchar): GLuint; stdcall;
  glGetProgramResourceName: procedure(program_: GLuint; programInterface: GLenum; index: GLuint; bufSize: GLsizei; length: PGLsizei; name: PGLchar); stdcall;
  glGetProgramResourceiv: procedure(program_: GLuint; programInterface: GLenum; index: GLuint; propCount: GLsizei; const props: PGLenum; bufSize: GLsizei; length: PGLsizei; params: PGLint); stdcall;
  glGetProgramResourceLocation: function(program_: GLuint; programInterface: GLenum; const name: PGLchar): GLint; stdcall;
  glGetProgramResourceLocationIndex: function(program_: GLuint; programInterface: GLenum; const name: PGLchar): GLint; stdcall;
  glShaderStorageBlockBinding: procedure(program_: GLuint; storageBlockIndex: GLuint; storageBlockBinding: GLuint); stdcall;
  glTexBufferRange: procedure(target: GLenum; internalformat: GLenum; buffer: GLuint; offset: GLintptr; size: GLsizeiptr); stdcall;
  glTexStorage2DMultisample: procedure(target: GLenum; samples: GLsizei; internalformat: GLenum; width: GLsizei; height: GLsizei; fixedsamplelocations: GLboolean); stdcall;
  glTexStorage3DMultisample: procedure(target: GLenum; samples: GLsizei; internalformat: GLenum; width: GLsizei; height: GLsizei; depth: GLsizei; fixedsamplelocations: GLboolean); stdcall;
  glTextureView: procedure(texture: GLuint; target: GLenum; origtexture: GLuint; internalformat: GLenum; minlevel: GLuint; numlevels: GLuint; minlayer: GLuint; numlayers: GLuint); stdcall;
  glBindVertexBuffer: procedure(bindingindex: GLuint; buffer: GLuint; offset: GLintptr; stride: GLsizei); stdcall;
  glVertexAttribFormat: procedure(attribindex: GLuint; size: GLint; type_: GLenum; normalized: GLboolean; relativeoffset: GLuint); stdcall;
  glVertexAttribIFormat: procedure(attribindex: GLuint; size: GLint; type_: GLenum; relativeoffset: GLuint); stdcall;
  glVertexAttribLFormat: procedure(attribindex: GLuint; size: GLint; type_: GLenum; relativeoffset: GLuint); stdcall;
  glVertexAttribBinding: procedure(attribindex: GLuint; bindingindex: GLuint); stdcall;
  glVertexBindingDivisor: procedure(bindingindex: GLuint; divisor: GLuint); stdcall;
  glDebugMessageControl: procedure(source: GLenum; type_: GLenum; severity: GLenum; count: GLsizei; const ids: PGLuint; enabled: GLboolean); stdcall;
  glDebugMessageInsert: procedure(source: GLenum; type_: GLenum; id: GLuint; severity: GLenum; length: GLsizei; const buf: PGLchar); stdcall;
  glDebugMessageCallback: procedure(callback: GLDEBUGPROC; const userParam: Pointer); stdcall;
  glGetDebugMessageLog: function(count: GLuint; bufSize: GLsizei; sources: PGLenum; types: PGLenum; ids: PGLuint; severities: PGLenum; lengths: PGLsizei; messageLog: PGLchar): GLuint; stdcall;
  glPushDebugGroup: procedure(source: GLenum; id: GLuint; length: GLsizei; const message: PGLchar); stdcall;
  glPopDebugGroup: procedure; stdcall;
  glObjectLabel: procedure(identifier: GLenum; name: GLuint; length: GLsizei; const label_: PGLchar); stdcall;
  glGetObjectLabel: procedure(identifier: GLenum; name: GLuint; bufSize: GLsizei; length: PGLsizei; label_: PGLchar); stdcall;
  glObjectPtrLabel: procedure(const ptr: Pointer; length: GLsizei; const label_: PGLchar); stdcall;
  glGetObjectPtrLabel: procedure(const ptr: Pointer; bufSize: GLsizei; length: PGLsizei; label_: PGLchar); stdcall;

{ GL_VERSION_4_4 }
  glBufferStorage: procedure(target: GLenum; size: GLsizeiptr; const data: Pointer; flags: GLbitfield); stdcall;
  glClearTexImage: procedure(texture: GLuint; level: GLint; format: GLenum; type_: GLenum; const data: Pointer); stdcall;
  glClearTexSubImage: procedure(texture: GLuint; level: GLint; xoffset: GLint; yoffset: GLint; zoffset: GLint; width: GLsizei; height: GLsizei; depth: GLsizei; format: GLenum; type_: GLenum; const data: Pointer); stdcall;
  glBindBuffersBase: procedure(target: GLenum; first: GLuint; count: GLsizei; const buffers: PGLuint); stdcall;
  glBindBuffersRange: procedure(target: GLenum; first: GLuint; count: GLsizei; const buffers: PGLuint; const offsets: PGLintptr; const sizes: PGLsizeiptr); stdcall;
  glBindTextures: procedure(first: GLuint; count: GLsizei; const textures: PGLuint); stdcall;
  glBindSamplers: procedure(first: GLuint; count: GLsizei; const samplers: PGLuint); stdcall;
  glBindImageTextures: procedure(first: GLuint; count: GLsizei; const textures: PGLuint); stdcall;
  glBindVertexBuffers: procedure(first: GLuint; count: GLsizei; const buffers: PGLuint; const offsets: PGLintptr; const strides: PGLsizei); stdcall;

{ GL_ARB_bindless_texture }
  glGetTextureHandleARB: function(texture: GLuint): GLuint64; stdcall;
  glGetTextureSamplerHandleARB: function(texture: GLuint; sampler: GLuint): GLuint64; stdcall;
  glMakeTextureHandleResidentARB: procedure(handle: GLuint64); stdcall;
  glMakeTextureHandleNonResidentARB: procedure(handle: GLuint64); stdcall;
  glGetImageHandleARB: function(texture: GLuint; level: GLint; layered: GLboolean; layer: GLint; format: GLenum): GLuint64; stdcall;
  glMakeImageHandleResidentARB: procedure(handle: GLuint64; access: GLenum); stdcall;
  glMakeImageHandleNonResidentARB: procedure(handle: GLuint64); stdcall;
  glUniformHandleui64ARB: procedure(location: GLint; value: GLuint64); stdcall;
  glUniformHandleui64vARB: procedure(location: GLint; count: GLsizei; const value: PGLuint64); stdcall;
  glProgramUniformHandleui64ARB: procedure(program_: GLuint; location: GLint; value: GLuint64); stdcall;
  glProgramUniformHandleui64vARB: procedure(program_: GLuint; location: GLint; count: GLsizei; const values: PGLuint64); stdcall;
  glIsTextureHandleResidentARB: function(handle: GLuint64): GLboolean; stdcall;
  glIsImageHandleResidentARB: function(handle: GLuint64): GLboolean; stdcall;
  glVertexAttribL1ui64ARB: procedure(index: GLuint; x: GLuint64EXT); stdcall;
  glVertexAttribL1ui64vARB: procedure(index: GLuint; const v: PGLuint64EXT); stdcall;
  glGetVertexAttribLui64vARB: procedure(index: GLuint; pname: GLenum; params: PGLuint64EXT); stdcall;

{ GL_ARB_cl_event }
  glCreateSyncFromCLeventARB: function(context: P_cl_context; event: P_cl_event; flags: GLbitfield): GLsync; stdcall;

{ GL_ARB_color_buffer_float }
  glClampColorARB: procedure(target: GLenum; clamp: GLenum); stdcall;

{ GL_ARB_compute_variable_group_size }
  glDispatchComputeGroupSizeARB: procedure(num_groups_x: GLuint; num_groups_y: GLuint; num_groups_z: GLuint; group_size_x: GLuint; group_size_y: GLuint; group_size_z: GLuint); stdcall;

{ GL_ARB_debug_output }
  glDebugMessageControlARB: procedure(source: GLenum; type_: GLenum; severity: GLenum; count: GLsizei; const ids: PGLuint; enabled: GLboolean); stdcall;
  glDebugMessageInsertARB: procedure(source: GLenum; type_: GLenum; id: GLuint; severity: GLenum; length: GLsizei; const buf: PGLchar); stdcall;
  glDebugMessageCallbackARB: procedure(callback: GLDEBUGPROCARB; const userParam: Pointer); stdcall;
  glGetDebugMessageLogARB: function(count: GLuint; bufSize: GLsizei; sources: PGLenum; types: PGLenum; ids: PGLuint; severities: PGLenum; lengths: PGLsizei; messageLog: PGLchar): GLuint; stdcall;

{ GL_ARB_draw_buffers }
  glDrawBuffersARB: procedure(n: GLsizei; const bufs: PGLenum); stdcall;

{ GL_ARB_draw_buffers_blend }
  glBlendEquationiARB: procedure(buf: GLuint; mode: GLenum); stdcall;
  glBlendEquationSeparateiARB: procedure(buf: GLuint; modeRGB: GLenum; modeAlpha: GLenum); stdcall;
  glBlendFunciARB: procedure(buf: GLuint; src: GLenum; dst: GLenum); stdcall;
  glBlendFuncSeparateiARB: procedure(buf: GLuint; srcRGB: GLenum; dstRGB: GLenum; srcAlpha: GLenum; dstAlpha: GLenum); stdcall;

{ GL_ARB_draw_instanced }
  glDrawArraysInstancedARB: procedure(mode: GLenum; first: GLint; count: GLsizei; primcount: GLsizei); stdcall;
  glDrawElementsInstancedARB: procedure(mode: GLenum; count: GLsizei; type_: GLenum; const indices: Pointer; primcount: GLsizei); stdcall;

{ GL_ARB_fragment_program }
  glProgramStringARB: procedure(target: GLenum; format: GLenum; len: GLsizei; const string_: Pointer); stdcall;
  glBindProgramARB: procedure(target: GLenum; program_: GLuint); stdcall;
  glDeleteProgramsARB: procedure(n: GLsizei; const programs: PGLuint); stdcall;
  glGenProgramsARB: procedure(n: GLsizei; programs: PGLuint); stdcall;
  glProgramEnvParameter4dARB: procedure(target: GLenum; index: GLuint; x: GLdouble; y: GLdouble; z: GLdouble; w: GLdouble); stdcall;
  glProgramEnvParameter4dvARB: procedure(target: GLenum; index: GLuint; const params: PGLdouble); stdcall;
  glProgramEnvParameter4fARB: procedure(target: GLenum; index: GLuint; x: GLfloat; y: GLfloat; z: GLfloat; w: GLfloat); stdcall;
  glProgramEnvParameter4fvARB: procedure(target: GLenum; index: GLuint; const params: PGLfloat); stdcall;
  glProgramLocalParameter4dARB: procedure(target: GLenum; index: GLuint; x: GLdouble; y: GLdouble; z: GLdouble; w: GLdouble); stdcall;
  glProgramLocalParameter4dvARB: procedure(target: GLenum; index: GLuint; const params: PGLdouble); stdcall;
  glProgramLocalParameter4fARB: procedure(target: GLenum; index: GLuint; x: GLfloat; y: GLfloat; z: GLfloat; w: GLfloat); stdcall;
  glProgramLocalParameter4fvARB: procedure(target: GLenum; index: GLuint; const params: PGLfloat); stdcall;
  glGetProgramEnvParameterdvARB: procedure(target: GLenum; index: GLuint; params: PGLdouble); stdcall;
  glGetProgramEnvParameterfvARB: procedure(target: GLenum; index: GLuint; params: PGLfloat); stdcall;
  glGetProgramLocalParameterdvARB: procedure(target: GLenum; index: GLuint; params: PGLdouble); stdcall;
  glGetProgramLocalParameterfvARB: procedure(target: GLenum; index: GLuint; params: PGLfloat); stdcall;
  glGetProgramivARB: procedure(target: GLenum; pname: GLenum; params: PGLint); stdcall;
  glGetProgramStringARB: procedure(target: GLenum; pname: GLenum; string_: Pointer); stdcall;
  glIsProgramARB: function(program_: GLuint): GLboolean; stdcall;

{ GL_ARB_geometry_shader4 }
  glProgramParameteriARB: procedure(program_: GLuint; pname: GLenum; value: GLint); stdcall;
  glFramebufferTextureARB: procedure(target: GLenum; attachment: GLenum; texture: GLuint; level: GLint); stdcall;
  glFramebufferTextureLayerARB: procedure(target: GLenum; attachment: GLenum; texture: GLuint; level: GLint; layer: GLint); stdcall;
  glFramebufferTextureFaceARB: procedure(target: GLenum; attachment: GLenum; texture: GLuint; level: GLint; face: GLenum); stdcall;

{ GL_ARB_imaging }
  glColorTable: procedure(target: GLenum; internalformat: GLenum; width: GLsizei; format: GLenum; type_: GLenum; const table: Pointer); stdcall;
  glColorTableParameterfv: procedure(target: GLenum; pname: GLenum; const params: PGLfloat); stdcall;
  glColorTableParameteriv: procedure(target: GLenum; pname: GLenum; const params: PGLint); stdcall;
  glCopyColorTable: procedure(target: GLenum; internalformat: GLenum; x: GLint; y: GLint; width: GLsizei); stdcall;
  glGetColorTable: procedure(target: GLenum; format: GLenum; type_: GLenum; table: Pointer); stdcall;
  glGetColorTableParameterfv: procedure(target: GLenum; pname: GLenum; params: PGLfloat); stdcall;
  glGetColorTableParameteriv: procedure(target: GLenum; pname: GLenum; params: PGLint); stdcall;
  glColorSubTable: procedure(target: GLenum; start: GLsizei; count: GLsizei; format: GLenum; type_: GLenum; const data: Pointer); stdcall;
  glCopyColorSubTable: procedure(target: GLenum; start: GLsizei; x: GLint; y: GLint; width: GLsizei); stdcall;
  glConvolutionFilter1D: procedure(target: GLenum; internalformat: GLenum; width: GLsizei; format: GLenum; type_: GLenum; const image: Pointer); stdcall;
  glConvolutionFilter2D: procedure(target: GLenum; internalformat: GLenum; width: GLsizei; height: GLsizei; format: GLenum; type_: GLenum; const image: Pointer); stdcall;
  glConvolutionParameterf: procedure(target: GLenum; pname: GLenum; params: GLfloat); stdcall;
  glConvolutionParameterfv: procedure(target: GLenum; pname: GLenum; const params: PGLfloat); stdcall;
  glConvolutionParameteri: procedure(target: GLenum; pname: GLenum; params: GLint); stdcall;
  glConvolutionParameteriv: procedure(target: GLenum; pname: GLenum; const params: PGLint); stdcall;
  glCopyConvolutionFilter1D: procedure(target: GLenum; internalformat: GLenum; x: GLint; y: GLint; width: GLsizei); stdcall;
  glCopyConvolutionFilter2D: procedure(target: GLenum; internalformat: GLenum; x: GLint; y: GLint; width: GLsizei; height: GLsizei); stdcall;
  glGetConvolutionFilter: procedure(target: GLenum; format: GLenum; type_: GLenum; image: Pointer); stdcall;
  glGetConvolutionParameterfv: procedure(target: GLenum; pname: GLenum; params: PGLfloat); stdcall;
  glGetConvolutionParameteriv: procedure(target: GLenum; pname: GLenum; params: PGLint); stdcall;
  glGetSeparableFilter: procedure(target: GLenum; format: GLenum; type_: GLenum; row: Pointer; column: Pointer; span: Pointer); stdcall;
  glSeparableFilter2D: procedure(target: GLenum; internalformat: GLenum; width: GLsizei; height: GLsizei; format: GLenum; type_: GLenum; const row: Pointer; const column: Pointer); stdcall;
  glGetHistogram: procedure(target: GLenum; reset: GLboolean; format: GLenum; type_: GLenum; values: Pointer); stdcall;
  glGetHistogramParameterfv: procedure(target: GLenum; pname: GLenum; params: PGLfloat); stdcall;
  glGetHistogramParameteriv: procedure(target: GLenum; pname: GLenum; params: PGLint); stdcall;
  glGetMinmax: procedure(target: GLenum; reset: GLboolean; format: GLenum; type_: GLenum; values: Pointer); stdcall;
  glGetMinmaxParameterfv: procedure(target: GLenum; pname: GLenum; params: PGLfloat); stdcall;
  glGetMinmaxParameteriv: procedure(target: GLenum; pname: GLenum; params: PGLint); stdcall;
  glHistogram: procedure(target: GLenum; width: GLsizei; internalformat: GLenum; sink: GLboolean); stdcall;
  glMinmax: procedure(target: GLenum; internalformat: GLenum; sink: GLboolean); stdcall;
  glResetHistogram: procedure(target: GLenum); stdcall;
  glResetMinmax: procedure(target: GLenum); stdcall;

{ GL_ARB_indirect_parameters }
  glMultiDrawArraysIndirectCountARB: procedure(mode: GLenum; indirect: GLintptr; drawcount: GLintptr; maxdrawcount: GLsizei; stride: GLsizei); stdcall;
  glMultiDrawElementsIndirectCountARB: procedure(mode: GLenum; type_: GLenum; indirect: GLintptr; drawcount: GLintptr; maxdrawcount: GLsizei; stride: GLsizei); stdcall;

{ GL_ARB_instanced_arrays }
  glVertexAttribDivisorARB: procedure(index: GLuint; divisor: GLuint); stdcall;

{ GL_ARB_matrix_palette }
  glCurrentPaletteMatrixARB: procedure(index: GLint); stdcall;
  glMatrixIndexubvARB: procedure(size: GLint; const indices: PGLubyte); stdcall;
  glMatrixIndexusvARB: procedure(size: GLint; const indices: PGLushort); stdcall;
  glMatrixIndexuivARB: procedure(size: GLint; const indices: PGLuint); stdcall;
  glMatrixIndexPointerARB: procedure(size: GLint; type_: GLenum; stride: GLsizei; const pointer: Pointer); stdcall;

{ GL_ARB_multisample }
  glSampleCoverageARB: procedure(value: GLfloat; invert: GLboolean); stdcall;

{ GL_ARB_multitexture }
  glActiveTextureARB: procedure(texture: GLenum); stdcall;
  glClientActiveTextureARB: procedure(texture: GLenum); stdcall;
  glMultiTexCoord1dARB: procedure(target: GLenum; s: GLdouble); stdcall;
  glMultiTexCoord1dvARB: procedure(target: GLenum; const v: PGLdouble); stdcall;
  glMultiTexCoord1fARB: procedure(target: GLenum; s: GLfloat); stdcall;
  glMultiTexCoord1fvARB: procedure(target: GLenum; const v: PGLfloat); stdcall;
  glMultiTexCoord1iARB: procedure(target: GLenum; s: GLint); stdcall;
  glMultiTexCoord1ivARB: procedure(target: GLenum; const v: PGLint); stdcall;
  glMultiTexCoord1sARB: procedure(target: GLenum; s: GLshort); stdcall;
  glMultiTexCoord1svARB: procedure(target: GLenum; const v: PGLshort); stdcall;
  glMultiTexCoord2dARB: procedure(target: GLenum; s: GLdouble; t: GLdouble); stdcall;
  glMultiTexCoord2dvARB: procedure(target: GLenum; const v: PGLdouble); stdcall;
  glMultiTexCoord2fARB: procedure(target: GLenum; s: GLfloat; t: GLfloat); stdcall;
  glMultiTexCoord2fvARB: procedure(target: GLenum; const v: PGLfloat); stdcall;
  glMultiTexCoord2iARB: procedure(target: GLenum; s: GLint; t: GLint); stdcall;
  glMultiTexCoord2ivARB: procedure(target: GLenum; const v: PGLint); stdcall;
  glMultiTexCoord2sARB: procedure(target: GLenum; s: GLshort; t: GLshort); stdcall;
  glMultiTexCoord2svARB: procedure(target: GLenum; const v: PGLshort); stdcall;
  glMultiTexCoord3dARB: procedure(target: GLenum; s: GLdouble; t: GLdouble; r: GLdouble); stdcall;
  glMultiTexCoord3dvARB: procedure(target: GLenum; const v: PGLdouble); stdcall;
  glMultiTexCoord3fARB: procedure(target: GLenum; s: GLfloat; t: GLfloat; r: GLfloat); stdcall;
  glMultiTexCoord3fvARB: procedure(target: GLenum; const v: PGLfloat); stdcall;
  glMultiTexCoord3iARB: procedure(target: GLenum; s: GLint; t: GLint; r: GLint); stdcall;
  glMultiTexCoord3ivARB: procedure(target: GLenum; const v: PGLint); stdcall;
  glMultiTexCoord3sARB: procedure(target: GLenum; s: GLshort; t: GLshort; r: GLshort); stdcall;
  glMultiTexCoord3svARB: procedure(target: GLenum; const v: PGLshort); stdcall;
  glMultiTexCoord4dARB: procedure(target: GLenum; s: GLdouble; t: GLdouble; r: GLdouble; q: GLdouble); stdcall;
  glMultiTexCoord4dvARB: procedure(target: GLenum; const v: PGLdouble); stdcall;
  glMultiTexCoord4fARB: procedure(target: GLenum; s: GLfloat; t: GLfloat; r: GLfloat; q: GLfloat); stdcall;
  glMultiTexCoord4fvARB: procedure(target: GLenum; const v: PGLfloat); stdcall;
  glMultiTexCoord4iARB: procedure(target: GLenum; s: GLint; t: GLint; r: GLint; q: GLint); stdcall;
  glMultiTexCoord4ivARB: procedure(target: GLenum; const v: PGLint); stdcall;
  glMultiTexCoord4sARB: procedure(target: GLenum; s: GLshort; t: GLshort; r: GLshort; q: GLshort); stdcall;
  glMultiTexCoord4svARB: procedure(target: GLenum; const v: PGLshort); stdcall;

{ GL_ARB_occlusion_query }
  glGenQueriesARB: procedure(n: GLsizei; ids: PGLuint); stdcall;
  glDeleteQueriesARB: procedure(n: GLsizei; const ids: PGLuint); stdcall;
  glIsQueryARB: function(id: GLuint): GLboolean; stdcall;
  glBeginQueryARB: procedure(target: GLenum; id: GLuint); stdcall;
  glEndQueryARB: procedure(target: GLenum); stdcall;
  glGetQueryivARB: procedure(target: GLenum; pname: GLenum; params: PGLint); stdcall;
  glGetQueryObjectivARB: procedure(id: GLuint; pname: GLenum; params: PGLint); stdcall;
  glGetQueryObjectuivARB: procedure(id: GLuint; pname: GLenum; params: PGLuint); stdcall;

{ GL_ARB_point_parameters }
  glPointParameterfARB: procedure(pname: GLenum; param: GLfloat); stdcall;
  glPointParameterfvARB: procedure(pname: GLenum; const params: PGLfloat); stdcall;

{ GL_ARB_robustness }
  glGetGraphicsResetStatusARB: function: GLenum; stdcall;
  glGetnTexImageARB: procedure(target: GLenum; level: GLint; format: GLenum; type_: GLenum; bufSize: GLsizei; img: Pointer); stdcall;
  glReadnPixelsARB: procedure(x: GLint; y: GLint; width: GLsizei; height: GLsizei; format: GLenum; type_: GLenum; bufSize: GLsizei; data: Pointer); stdcall;
  glGetnCompressedTexImageARB: procedure(target: GLenum; lod: GLint; bufSize: GLsizei; img: Pointer); stdcall;
  glGetnUniformfvARB: procedure(program_: GLuint; location: GLint; bufSize: GLsizei; params: PGLfloat); stdcall;
  glGetnUniformivARB: procedure(program_: GLuint; location: GLint; bufSize: GLsizei; params: PGLint); stdcall;
  glGetnUniformuivARB: procedure(program_: GLuint; location: GLint; bufSize: GLsizei; params: PGLuint); stdcall;
  glGetnUniformdvARB: procedure(program_: GLuint; location: GLint; bufSize: GLsizei; params: PGLdouble); stdcall;
  glGetnMapdvARB: procedure(target: GLenum; query: GLenum; bufSize: GLsizei; v: PGLdouble); stdcall;
  glGetnMapfvARB: procedure(target: GLenum; query: GLenum; bufSize: GLsizei; v: PGLfloat); stdcall;
  glGetnMapivARB: procedure(target: GLenum; query: GLenum; bufSize: GLsizei; v: PGLint); stdcall;
  glGetnPixelMapfvARB: procedure(map: GLenum; bufSize: GLsizei; values: PGLfloat); stdcall;
  glGetnPixelMapuivARB: procedure(map: GLenum; bufSize: GLsizei; values: PGLuint); stdcall;
  glGetnPixelMapusvARB: procedure(map: GLenum; bufSize: GLsizei; values: PGLushort); stdcall;
  glGetnPolygonStippleARB: procedure(bufSize: GLsizei; pattern: PGLubyte); stdcall;
  glGetnColorTableARB: procedure(target: GLenum; format: GLenum; type_: GLenum; bufSize: GLsizei; table: Pointer); stdcall;
  glGetnConvolutionFilterARB: procedure(target: GLenum; format: GLenum; type_: GLenum; bufSize: GLsizei; image: Pointer); stdcall;
  glGetnSeparableFilterARB: procedure(target: GLenum; format: GLenum; type_: GLenum; rowBufSize: GLsizei; row: Pointer; columnBufSize: GLsizei; column: Pointer; span: Pointer); stdcall;
  glGetnHistogramARB: procedure(target: GLenum; reset: GLboolean; format: GLenum; type_: GLenum; bufSize: GLsizei; values: Pointer); stdcall;
  glGetnMinmaxARB: procedure(target: GLenum; reset: GLboolean; format: GLenum; type_: GLenum; bufSize: GLsizei; values: Pointer); stdcall;

{ GL_ARB_sample_shading }
  glMinSampleShadingARB: procedure(value: GLfloat); stdcall;

{ GL_ARB_shader_objects }
  glDeleteObjectARB: procedure(obj: GLhandleARB); stdcall;
  glGetHandleARB: function(pname: GLenum): GLhandleARB; stdcall;
  glDetachObjectARB: procedure(containerObj: GLhandleARB; attachedObj: GLhandleARB); stdcall;
  glCreateShaderObjectARB: function(shaderType: GLenum): GLhandleARB; stdcall;
  glShaderSourceARB: procedure(shaderObj: GLhandleARB; count: GLsizei; const string_: PPGLcharARB; const length: PGLint); stdcall;
  glCompileShaderARB: procedure(shaderObj: GLhandleARB); stdcall;
  glCreateProgramObjectARB: function: GLhandleARB; stdcall;
  glAttachObjectARB: procedure(containerObj: GLhandleARB; obj: GLhandleARB); stdcall;
  glLinkProgramARB: procedure(programObj: GLhandleARB); stdcall;
  glUseProgramObjectARB: procedure(programObj: GLhandleARB); stdcall;
  glValidateProgramARB: procedure(programObj: GLhandleARB); stdcall;
  glUniform1fARB: procedure(location: GLint; v0: GLfloat); stdcall;
  glUniform2fARB: procedure(location: GLint; v0: GLfloat; v1: GLfloat); stdcall;
  glUniform3fARB: procedure(location: GLint; v0: GLfloat; v1: GLfloat; v2: GLfloat); stdcall;
  glUniform4fARB: procedure(location: GLint; v0: GLfloat; v1: GLfloat; v2: GLfloat; v3: GLfloat); stdcall;
  glUniform1iARB: procedure(location: GLint; v0: GLint); stdcall;
  glUniform2iARB: procedure(location: GLint; v0: GLint; v1: GLint); stdcall;
  glUniform3iARB: procedure(location: GLint; v0: GLint; v1: GLint; v2: GLint); stdcall;
  glUniform4iARB: procedure(location: GLint; v0: GLint; v1: GLint; v2: GLint; v3: GLint); stdcall;
  glUniform1fvARB: procedure(location: GLint; count: GLsizei; const value: PGLfloat); stdcall;
  glUniform2fvARB: procedure(location: GLint; count: GLsizei; const value: PGLfloat); stdcall;
  glUniform3fvARB: procedure(location: GLint; count: GLsizei; const value: PGLfloat); stdcall;
  glUniform4fvARB: procedure(location: GLint; count: GLsizei; const value: PGLfloat); stdcall;
  glUniform1ivARB: procedure(location: GLint; count: GLsizei; const value: PGLint); stdcall;
  glUniform2ivARB: procedure(location: GLint; count: GLsizei; const value: PGLint); stdcall;
  glUniform3ivARB: procedure(location: GLint; count: GLsizei; const value: PGLint); stdcall;
  glUniform4ivARB: procedure(location: GLint; count: GLsizei; const value: PGLint); stdcall;
  glUniformMatrix2fvARB: procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); stdcall;
  glUniformMatrix3fvARB: procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); stdcall;
  glUniformMatrix4fvARB: procedure(location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); stdcall;
  glGetObjectParameterfvARB: procedure(obj: GLhandleARB; pname: GLenum; params: PGLfloat); stdcall;
  glGetObjectParameterivARB: procedure(obj: GLhandleARB; pname: GLenum; params: PGLint); stdcall;
  glGetInfoLogARB: procedure(obj: GLhandleARB; maxLength: GLsizei; length: PGLsizei; infoLog: PGLcharARB); stdcall;
  glGetAttachedObjectsARB: procedure(containerObj: GLhandleARB; maxCount: GLsizei; count: PGLsizei; obj: PGLhandleARB); stdcall;
  glGetUniformLocationARB: function(programObj: GLhandleARB; const name: PGLcharARB): GLint; stdcall;
  glGetActiveUniformARB: procedure(programObj: GLhandleARB; index: GLuint; maxLength: GLsizei; length: PGLsizei; size: PGLint; type_: PGLenum; name: PGLcharARB); stdcall;
  glGetUniformfvARB: procedure(programObj: GLhandleARB; location: GLint; params: PGLfloat); stdcall;
  glGetUniformivARB: procedure(programObj: GLhandleARB; location: GLint; params: PGLint); stdcall;
  glGetShaderSourceARB: procedure(obj: GLhandleARB; maxLength: GLsizei; length: PGLsizei; source: PGLcharARB); stdcall;

{ GL_ARB_shading_language_include }
  glNamedStringARB: procedure(type_: GLenum; namelen: GLint; const name: PGLchar; stringlen: GLint; const string_: PGLchar); stdcall;
  glDeleteNamedStringARB: procedure(namelen: GLint; const name: PGLchar); stdcall;
  glCompileShaderIncludeARB: procedure(shader: GLuint; count: GLsizei; const path: PPGLchar; const length: PGLint); stdcall;
  glIsNamedStringARB: function(namelen: GLint; const name: PGLchar): GLboolean; stdcall;
  glGetNamedStringARB: procedure(namelen: GLint; const name: PGLchar; bufSize: GLsizei; stringlen: PGLint; string_: PGLchar); stdcall;
  glGetNamedStringivARB: procedure(namelen: GLint; const name: PGLchar; pname: GLenum; params: PGLint); stdcall;

{ GL_ARB_sparse_texture }
  glTexPageCommitmentARB: procedure(target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; zoffset: GLint; width: GLsizei; height: GLsizei; depth: GLsizei; resident: GLboolean); stdcall;

{ GL_ARB_texture_buffer_object }
  glTexBufferARB: procedure(target: GLenum; internalformat: GLenum; buffer: GLuint); stdcall;

{ GL_ARB_texture_compression }
  glCompressedTexImage3DARB: procedure(target: GLenum; level: GLint; internalformat: GLenum; width: GLsizei; height: GLsizei; depth: GLsizei; border: GLint; imageSize: GLsizei; const data: Pointer); stdcall;
  glCompressedTexImage2DARB: procedure(target: GLenum; level: GLint; internalformat: GLenum; width: GLsizei; height: GLsizei; border: GLint; imageSize: GLsizei; const data: Pointer); stdcall;
  glCompressedTexImage1DARB: procedure(target: GLenum; level: GLint; internalformat: GLenum; width: GLsizei; border: GLint; imageSize: GLsizei; const data: Pointer); stdcall;
  glCompressedTexSubImage3DARB: procedure(target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; zoffset: GLint; width: GLsizei; height: GLsizei; depth: GLsizei; format: GLenum; imageSize: GLsizei; const data: Pointer); stdcall;
  glCompressedTexSubImage2DARB: procedure(target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; width: GLsizei; height: GLsizei; format: GLenum; imageSize: GLsizei; const data: Pointer); stdcall;
  glCompressedTexSubImage1DARB: procedure(target: GLenum; level: GLint; xoffset: GLint; width: GLsizei; format: GLenum; imageSize: GLsizei; const data: Pointer); stdcall;
  glGetCompressedTexImageARB: procedure(target: GLenum; level: GLint; img: Pointer); stdcall;

{ GL_ARB_transpose_matrix }
  glLoadTransposeMatrixfARB: procedure(const m: PGLfloat); stdcall;
  glLoadTransposeMatrixdARB: procedure(const m: PGLdouble); stdcall;
  glMultTransposeMatrixfARB: procedure(const m: PGLfloat); stdcall;
  glMultTransposeMatrixdARB: procedure(const m: PGLdouble); stdcall;

{ GL_ARB_vertex_blend }
  glWeightbvARB: procedure(size: GLint; const weights: PGLbyte); stdcall;
  glWeightsvARB: procedure(size: GLint; const weights: PGLshort); stdcall;
  glWeightivARB: procedure(size: GLint; const weights: PGLint); stdcall;
  glWeightfvARB: procedure(size: GLint; const weights: PGLfloat); stdcall;
  glWeightdvARB: procedure(size: GLint; const weights: PGLdouble); stdcall;
  glWeightubvARB: procedure(size: GLint; const weights: PGLubyte); stdcall;
  glWeightusvARB: procedure(size: GLint; const weights: PGLushort); stdcall;
  glWeightuivARB: procedure(size: GLint; const weights: PGLuint); stdcall;
  glWeightPointerARB: procedure(size: GLint; type_: GLenum; stride: GLsizei; const pointer: Pointer); stdcall;
  glVertexBlendARB: procedure(count: GLint); stdcall;

{ GL_ARB_vertex_buffer_object }
  glBindBufferARB: procedure(target: GLenum; buffer: GLuint); stdcall;
  glDeleteBuffersARB: procedure(n: GLsizei; const buffers: PGLuint); stdcall;
  glGenBuffersARB: procedure(n: GLsizei; buffers: PGLuint); stdcall;
  glIsBufferARB: function(buffer: GLuint): GLboolean; stdcall;
  glBufferDataARB: procedure(target: GLenum; size: GLsizeiptrARB; const data: Pointer; usage: GLenum); stdcall;
  glBufferSubDataARB: procedure(target: GLenum; offset: GLintptrARB; size: GLsizeiptrARB; const data: Pointer); stdcall;
  glGetBufferSubDataARB: procedure(target: GLenum; offset: GLintptrARB; size: GLsizeiptrARB; data: Pointer); stdcall;
  glMapBufferARB: function(target: GLenum; access: GLenum): Pointer; stdcall;
  glUnmapBufferARB: function(target: GLenum): GLboolean; stdcall;
  glGetBufferParameterivARB: procedure(target: GLenum; pname: GLenum; params: PGLint); stdcall;
  glGetBufferPointervARB: procedure(target: GLenum; pname: GLenum; params: PPointer); stdcall;

{ GL_ARB_vertex_program }
  glVertexAttrib1dARB: procedure(index: GLuint; x: GLdouble); stdcall;
  glVertexAttrib1dvARB: procedure(index: GLuint; const v: PGLdouble); stdcall;
  glVertexAttrib1fARB: procedure(index: GLuint; x: GLfloat); stdcall;
  glVertexAttrib1fvARB: procedure(index: GLuint; const v: PGLfloat); stdcall;
  glVertexAttrib1sARB: procedure(index: GLuint; x: GLshort); stdcall;
  glVertexAttrib1svARB: procedure(index: GLuint; const v: PGLshort); stdcall;
  glVertexAttrib2dARB: procedure(index: GLuint; x: GLdouble; y: GLdouble); stdcall;
  glVertexAttrib2dvARB: procedure(index: GLuint; const v: PGLdouble); stdcall;
  glVertexAttrib2fARB: procedure(index: GLuint; x: GLfloat; y: GLfloat); stdcall;
  glVertexAttrib2fvARB: procedure(index: GLuint; const v: PGLfloat); stdcall;
  glVertexAttrib2sARB: procedure(index: GLuint; x: GLshort; y: GLshort); stdcall;
  glVertexAttrib2svARB: procedure(index: GLuint; const v: PGLshort); stdcall;
  glVertexAttrib3dARB: procedure(index: GLuint; x: GLdouble; y: GLdouble; z: GLdouble); stdcall;
  glVertexAttrib3dvARB: procedure(index: GLuint; const v: PGLdouble); stdcall;
  glVertexAttrib3fARB: procedure(index: GLuint; x: GLfloat; y: GLfloat; z: GLfloat); stdcall;
  glVertexAttrib3fvARB: procedure(index: GLuint; const v: PGLfloat); stdcall;
  glVertexAttrib3sARB: procedure(index: GLuint; x: GLshort; y: GLshort; z: GLshort); stdcall;
  glVertexAttrib3svARB: procedure(index: GLuint; const v: PGLshort); stdcall;
  glVertexAttrib4NbvARB: procedure(index: GLuint; const v: PGLbyte); stdcall;
  glVertexAttrib4NivARB: procedure(index: GLuint; const v: PGLint); stdcall;
  glVertexAttrib4NsvARB: procedure(index: GLuint; const v: PGLshort); stdcall;
  glVertexAttrib4NubARB: procedure(index: GLuint; x: GLubyte; y: GLubyte; z: GLubyte; w: GLubyte); stdcall;
  glVertexAttrib4NubvARB: procedure(index: GLuint; const v: PGLubyte); stdcall;
  glVertexAttrib4NuivARB: procedure(index: GLuint; const v: PGLuint); stdcall;
  glVertexAttrib4NusvARB: procedure(index: GLuint; const v: PGLushort); stdcall;
  glVertexAttrib4bvARB: procedure(index: GLuint; const v: PGLbyte); stdcall;
  glVertexAttrib4dARB: procedure(index: GLuint; x: GLdouble; y: GLdouble; z: GLdouble; w: GLdouble); stdcall;
  glVertexAttrib4dvARB: procedure(index: GLuint; const v: PGLdouble); stdcall;
  glVertexAttrib4fARB: procedure(index: GLuint; x: GLfloat; y: GLfloat; z: GLfloat; w: GLfloat); stdcall;
  glVertexAttrib4fvARB: procedure(index: GLuint; const v: PGLfloat); stdcall;
  glVertexAttrib4ivARB: procedure(index: GLuint; const v: PGLint); stdcall;
  glVertexAttrib4sARB: procedure(index: GLuint; x: GLshort; y: GLshort; z: GLshort; w: GLshort); stdcall;
  glVertexAttrib4svARB: procedure(index: GLuint; const v: PGLshort); stdcall;
  glVertexAttrib4ubvARB: procedure(index: GLuint; const v: PGLubyte); stdcall;
  glVertexAttrib4uivARB: procedure(index: GLuint; const v: PGLuint); stdcall;
  glVertexAttrib4usvARB: procedure(index: GLuint; const v: PGLushort); stdcall;
  glVertexAttribPointerARB: procedure(index: GLuint; size: GLint; type_: GLenum; normalized: GLboolean; stride: GLsizei; const pointer: Pointer); stdcall;
  glEnableVertexAttribArrayARB: procedure(index: GLuint); stdcall;
  glDisableVertexAttribArrayARB: procedure(index: GLuint); stdcall;
  glGetVertexAttribdvARB: procedure(index: GLuint; pname: GLenum; params: PGLdouble); stdcall;
  glGetVertexAttribfvARB: procedure(index: GLuint; pname: GLenum; params: PGLfloat); stdcall;
  glGetVertexAttribivARB: procedure(index: GLuint; pname: GLenum; params: PGLint); stdcall;
  glGetVertexAttribPointervARB: procedure(index: GLuint; pname: GLenum; pointer: PPointer); stdcall;

{ GL_ARB_vertex_shader }
  glBindAttribLocationARB: procedure(programObj: GLhandleARB; index: GLuint; const name: PGLcharARB); stdcall;
  glGetActiveAttribARB: procedure(programObj: GLhandleARB; index: GLuint; maxLength: GLsizei; length: PGLsizei; size: PGLint; type_: PGLenum; name: PGLcharARB); stdcall;
  glGetAttribLocationARB: function(programObj: GLhandleARB; const name: PGLcharARB): GLint; stdcall;

{ GL_ARB_window_pos }
  glWindowPos2dARB: procedure(x: GLdouble; y: GLdouble); stdcall;
  glWindowPos2dvARB: procedure(const v: PGLdouble); stdcall;
  glWindowPos2fARB: procedure(x: GLfloat; y: GLfloat); stdcall;
  glWindowPos2fvARB: procedure(const v: PGLfloat); stdcall;
  glWindowPos2iARB: procedure(x: GLint; y: GLint); stdcall;
  glWindowPos2ivARB: procedure(const v: PGLint); stdcall;
  glWindowPos2sARB: procedure(x: GLshort; y: GLshort); stdcall;
  glWindowPos2svARB: procedure(const v: PGLshort); stdcall;
  glWindowPos3dARB: procedure(x: GLdouble; y: GLdouble; z: GLdouble); stdcall;
  glWindowPos3dvARB: procedure(const v: PGLdouble); stdcall;
  glWindowPos3fARB: procedure(x: GLfloat; y: GLfloat; z: GLfloat); stdcall;
  glWindowPos3fvARB: procedure(const v: PGLfloat); stdcall;
  glWindowPos3iARB: procedure(x: GLint; y: GLint; z: GLint); stdcall;
  glWindowPos3ivARB: procedure(const v: PGLint); stdcall;
  glWindowPos3sARB: procedure(x: GLshort; y: GLshort; z: GLshort); stdcall;
  glWindowPos3svARB: procedure(const v: PGLshort); stdcall;

{ GL_OES_byte_coordinates }
  glMultiTexCoord1bOES: procedure(texture: GLenum; s: GLbyte); stdcall;
  glMultiTexCoord1bvOES: procedure(texture: GLenum; const coords: PGLbyte); stdcall;
  glMultiTexCoord2bOES: procedure(texture: GLenum; s: GLbyte; t: GLbyte); stdcall;
  glMultiTexCoord2bvOES: procedure(texture: GLenum; const coords: PGLbyte); stdcall;
  glMultiTexCoord3bOES: procedure(texture: GLenum; s: GLbyte; t: GLbyte; r: GLbyte); stdcall;
  glMultiTexCoord3bvOES: procedure(texture: GLenum; const coords: PGLbyte); stdcall;
  glMultiTexCoord4bOES: procedure(texture: GLenum; s: GLbyte; t: GLbyte; r: GLbyte; q: GLbyte); stdcall;
  glMultiTexCoord4bvOES: procedure(texture: GLenum; const coords: PGLbyte); stdcall;
  glTexCoord1bOES: procedure(s: GLbyte); stdcall;
  glTexCoord1bvOES: procedure(const coords: PGLbyte); stdcall;
  glTexCoord2bOES: procedure(s: GLbyte; t: GLbyte); stdcall;
  glTexCoord2bvOES: procedure(const coords: PGLbyte); stdcall;
  glTexCoord3bOES: procedure(s: GLbyte; t: GLbyte; r: GLbyte); stdcall;
  glTexCoord3bvOES: procedure(const coords: PGLbyte); stdcall;
  glTexCoord4bOES: procedure(s: GLbyte; t: GLbyte; r: GLbyte; q: GLbyte); stdcall;
  glTexCoord4bvOES: procedure(const coords: PGLbyte); stdcall;
  glVertex2bOES: procedure(x: GLbyte); stdcall;
  glVertex2bvOES: procedure(const coords: PGLbyte); stdcall;
  glVertex3bOES: procedure(x: GLbyte; y: GLbyte); stdcall;
  glVertex3bvOES: procedure(const coords: PGLbyte); stdcall;
  glVertex4bOES: procedure(x: GLbyte; y: GLbyte; z: GLbyte); stdcall;
  glVertex4bvOES: procedure(const coords: PGLbyte); stdcall;

{ GL_OES_fixed_point }
  glAlphaFuncxOES: procedure(func: GLenum; ref: GLfixed); stdcall;
  glClearColorxOES: procedure(red: GLfixed; green: GLfixed; blue: GLfixed; alpha: GLfixed); stdcall;
  glClearDepthxOES: procedure(depth: GLfixed); stdcall;
  glClipPlanexOES: procedure(plane: GLenum; const equation: PGLfixed); stdcall;
  glColor4xOES: procedure(red: GLfixed; green: GLfixed; blue: GLfixed; alpha: GLfixed); stdcall;
  glDepthRangexOES: procedure(n: GLfixed; f: GLfixed); stdcall;
  glFogxOES: procedure(pname: GLenum; param: GLfixed); stdcall;
  glFogxvOES: procedure(pname: GLenum; const param: PGLfixed); stdcall;
  glFrustumxOES: procedure(l: GLfixed; r: GLfixed; b: GLfixed; t: GLfixed; n: GLfixed; f: GLfixed); stdcall;
  glGetClipPlanexOES: procedure(plane: GLenum; equation: PGLfixed); stdcall;
  glGetFixedvOES: procedure(pname: GLenum; params: PGLfixed); stdcall;
  glGetTexEnvxvOES: procedure(target: GLenum; pname: GLenum; params: PGLfixed); stdcall;
  glGetTexParameterxvOES: procedure(target: GLenum; pname: GLenum; params: PGLfixed); stdcall;
  glLightModelxOES: procedure(pname: GLenum; param: GLfixed); stdcall;
  glLightModelxvOES: procedure(pname: GLenum; const param: PGLfixed); stdcall;
  glLightxOES: procedure(light: GLenum; pname: GLenum; param: GLfixed); stdcall;
  glLightxvOES: procedure(light: GLenum; pname: GLenum; const params: PGLfixed); stdcall;
  glLineWidthxOES: procedure(width: GLfixed); stdcall;
  glLoadMatrixxOES: procedure(const m: PGLfixed); stdcall;
  glMaterialxOES: procedure(face: GLenum; pname: GLenum; param: GLfixed); stdcall;
  glMaterialxvOES: procedure(face: GLenum; pname: GLenum; const param: PGLfixed); stdcall;
  glMultMatrixxOES: procedure(const m: PGLfixed); stdcall;
  glMultiTexCoord4xOES: procedure(texture: GLenum; s: GLfixed; t: GLfixed; r: GLfixed; q: GLfixed); stdcall;
  glNormal3xOES: procedure(nx: GLfixed; ny: GLfixed; nz: GLfixed); stdcall;
  glOrthoxOES: procedure(l: GLfixed; r: GLfixed; b: GLfixed; t: GLfixed; n: GLfixed; f: GLfixed); stdcall;
  glPointParameterxvOES: procedure(pname: GLenum; const params: PGLfixed); stdcall;
  glPointSizexOES: procedure(size: GLfixed); stdcall;
  glPolygonOffsetxOES: procedure(factor: GLfixed; units: GLfixed); stdcall;
  glRotatexOES: procedure(angle: GLfixed; x: GLfixed; y: GLfixed; z: GLfixed); stdcall;
  glSampleCoverageOES: procedure(value: GLfixed; invert: GLboolean); stdcall;
  glScalexOES: procedure(x: GLfixed; y: GLfixed; z: GLfixed); stdcall;
  glTexEnvxOES: procedure(target: GLenum; pname: GLenum; param: GLfixed); stdcall;
  glTexEnvxvOES: procedure(target: GLenum; pname: GLenum; const params: PGLfixed); stdcall;
  glTexParameterxOES: procedure(target: GLenum; pname: GLenum; param: GLfixed); stdcall;
  glTexParameterxvOES: procedure(target: GLenum; pname: GLenum; const params: PGLfixed); stdcall;
  glTranslatexOES: procedure(x: GLfixed; y: GLfixed; z: GLfixed); stdcall;
  glAccumxOES: procedure(op: GLenum; value: GLfixed); stdcall;
  glBitmapxOES: procedure(width: GLsizei; height: GLsizei; xorig: GLfixed; yorig: GLfixed; xmove: GLfixed; ymove: GLfixed; const bitmap: PGLubyte); stdcall;
  glBlendColorxOES: procedure(red: GLfixed; green: GLfixed; blue: GLfixed; alpha: GLfixed); stdcall;
  glClearAccumxOES: procedure(red: GLfixed; green: GLfixed; blue: GLfixed; alpha: GLfixed); stdcall;
  glColor3xOES: procedure(red: GLfixed; green: GLfixed; blue: GLfixed); stdcall;
  glColor3xvOES: procedure(const components: PGLfixed); stdcall;
  glColor4xvOES: procedure(const components: PGLfixed); stdcall;
  glConvolutionParameterxOES: procedure(target: GLenum; pname: GLenum; param: GLfixed); stdcall;
  glConvolutionParameterxvOES: procedure(target: GLenum; pname: GLenum; const params: PGLfixed); stdcall;
  glEvalCoord1xOES: procedure(u: GLfixed); stdcall;
  glEvalCoord1xvOES: procedure(const coords: PGLfixed); stdcall;
  glEvalCoord2xOES: procedure(u: GLfixed; v: GLfixed); stdcall;
  glEvalCoord2xvOES: procedure(const coords: PGLfixed); stdcall;
  glFeedbackBufferxOES: procedure(n: GLsizei; type_: GLenum; const buffer: PGLfixed); stdcall;
  glGetConvolutionParameterxvOES: procedure(target: GLenum; pname: GLenum; params: PGLfixed); stdcall;
  glGetHistogramParameterxvOES: procedure(target: GLenum; pname: GLenum; params: PGLfixed); stdcall;
  glGetLightxOES: procedure(light: GLenum; pname: GLenum; params: PGLfixed); stdcall;
  glGetMapxvOES: procedure(target: GLenum; query: GLenum; v: PGLfixed); stdcall;
  glGetMaterialxOES: procedure(face: GLenum; pname: GLenum; param: GLfixed); stdcall;
  glGetPixelMapxv: procedure(map: GLenum; size: GLint; values: PGLfixed); stdcall;
  glGetTexGenxvOES: procedure(coord: GLenum; pname: GLenum; params: PGLfixed); stdcall;
  glGetTexLevelParameterxvOES: procedure(target: GLenum; level: GLint; pname: GLenum; params: PGLfixed); stdcall;
  glIndexxOES: procedure(component: GLfixed); stdcall;
  glIndexxvOES: procedure(const component: PGLfixed); stdcall;
  glLoadTransposeMatrixxOES: procedure(const m: PGLfixed); stdcall;
  glMap1xOES: procedure(target: GLenum; u1: GLfixed; u2: GLfixed; stride: GLint; order: GLint; points: GLfixed); stdcall;
  glMap2xOES: procedure(target: GLenum; u1: GLfixed; u2: GLfixed; ustride: GLint; uorder: GLint; v1: GLfixed; v2: GLfixed; vstride: GLint; vorder: GLint; points: GLfixed); stdcall;
  glMapGrid1xOES: procedure(n: GLint; u1: GLfixed; u2: GLfixed); stdcall;
  glMapGrid2xOES: procedure(n: GLint; u1: GLfixed; u2: GLfixed; v1: GLfixed; v2: GLfixed); stdcall;
  glMultTransposeMatrixxOES: procedure(const m: PGLfixed); stdcall;
  glMultiTexCoord1xOES: procedure(texture: GLenum; s: GLfixed); stdcall;
  glMultiTexCoord1xvOES: procedure(texture: GLenum; const coords: PGLfixed); stdcall;
  glMultiTexCoord2xOES: procedure(texture: GLenum; s: GLfixed; t: GLfixed); stdcall;
  glMultiTexCoord2xvOES: procedure(texture: GLenum; const coords: PGLfixed); stdcall;
  glMultiTexCoord3xOES: procedure(texture: GLenum; s: GLfixed; t: GLfixed; r: GLfixed); stdcall;
  glMultiTexCoord3xvOES: procedure(texture: GLenum; const coords: PGLfixed); stdcall;
  glMultiTexCoord4xvOES: procedure(texture: GLenum; const coords: PGLfixed); stdcall;
  glNormal3xvOES: procedure(const coords: PGLfixed); stdcall;
  glPassThroughxOES: procedure(token: GLfixed); stdcall;
  glPixelMapx: procedure(map: GLenum; size: GLint; const values: PGLfixed); stdcall;
  glPixelStorex: procedure(pname: GLenum; param: GLfixed); stdcall;
  glPixelTransferxOES: procedure(pname: GLenum; param: GLfixed); stdcall;
  glPixelZoomxOES: procedure(xfactor: GLfixed; yfactor: GLfixed); stdcall;
  glPrioritizeTexturesxOES: procedure(n: GLsizei; const textures: PGLuint; const priorities: PGLfixed); stdcall;
  glRasterPos2xOES: procedure(x: GLfixed; y: GLfixed); stdcall;
  glRasterPos2xvOES: procedure(const coords: PGLfixed); stdcall;
  glRasterPos3xOES: procedure(x: GLfixed; y: GLfixed; z: GLfixed); stdcall;
  glRasterPos3xvOES: procedure(const coords: PGLfixed); stdcall;
  glRasterPos4xOES: procedure(x: GLfixed; y: GLfixed; z: GLfixed; w: GLfixed); stdcall;
  glRasterPos4xvOES: procedure(const coords: PGLfixed); stdcall;
  glRectxOES: procedure(x1: GLfixed; y1: GLfixed; x2: GLfixed; y2: GLfixed); stdcall;
  glRectxvOES: procedure(const v1: PGLfixed; const v2: PGLfixed); stdcall;
  glTexCoord1xOES: procedure(s: GLfixed); stdcall;
  glTexCoord1xvOES: procedure(const coords: PGLfixed); stdcall;
  glTexCoord2xOES: procedure(s: GLfixed; t: GLfixed); stdcall;
  glTexCoord2xvOES: procedure(const coords: PGLfixed); stdcall;
  glTexCoord3xOES: procedure(s: GLfixed; t: GLfixed; r: GLfixed); stdcall;
  glTexCoord3xvOES: procedure(const coords: PGLfixed); stdcall;
  glTexCoord4xOES: procedure(s: GLfixed; t: GLfixed; r: GLfixed; q: GLfixed); stdcall;
  glTexCoord4xvOES: procedure(const coords: PGLfixed); stdcall;
  glTexGenxOES: procedure(coord: GLenum; pname: GLenum; param: GLfixed); stdcall;
  glTexGenxvOES: procedure(coord: GLenum; pname: GLenum; const params: PGLfixed); stdcall;
  glVertex2xOES: procedure(x: GLfixed); stdcall;
  glVertex2xvOES: procedure(const coords: PGLfixed); stdcall;
  glVertex3xOES: procedure(x: GLfixed; y: GLfixed); stdcall;
  glVertex3xvOES: procedure(const coords: PGLfixed); stdcall;
  glVertex4xOES: procedure(x: GLfixed; y: GLfixed; z: GLfixed); stdcall;
  glVertex4xvOES: procedure(const coords: PGLfixed); stdcall;

{ GL_OES_query_matrix }
  glQueryMatrixxOES: function(mantissa: PGLfixed; exponent: PGLint): GLbitfield; stdcall;

{ GL_OES_single_precision }
  glClearDepthfOES: procedure(depth: GLclampf); stdcall;
  glClipPlanefOES: procedure(plane: GLenum; const equation: PGLfloat); stdcall;
  glDepthRangefOES: procedure(n: GLclampf; f: GLclampf); stdcall;
  glFrustumfOES: procedure(l: GLfloat; r: GLfloat; b: GLfloat; t: GLfloat; n: GLfloat; f: GLfloat); stdcall;
  glGetClipPlanefOES: procedure(plane: GLenum; equation: PGLfloat); stdcall;
  glOrthofOES: procedure(l: GLfloat; r: GLfloat; b: GLfloat; t: GLfloat; n: GLfloat; f: GLfloat); stdcall;

{ GL_3DFX_tbuffer }
  glTbufferMask3DFX: procedure(mask: GLuint); stdcall;

{ GL_AMD_debug_output }
  glDebugMessageEnableAMD: procedure(category: GLenum; severity: GLenum; count: GLsizei; const ids: PGLuint; enabled: GLboolean); stdcall;
  glDebugMessageInsertAMD: procedure(category: GLenum; severity: GLenum; id: GLuint; length: GLsizei; const buf: PGLchar); stdcall;
  glDebugMessageCallbackAMD: procedure(callback: GLDEBUGPROCAMD; userParam: Pointer); stdcall;
  glGetDebugMessageLogAMD: function(count: GLuint; bufsize: GLsizei; categories: PGLenum; severities: PGLuint; ids: PGLuint; lengths: PGLsizei; message: PGLchar): GLuint; stdcall;

{ GL_AMD_draw_buffers_blend }
  glBlendFuncIndexedAMD: procedure(buf: GLuint; src: GLenum; dst: GLenum); stdcall;
  glBlendFuncSeparateIndexedAMD: procedure(buf: GLuint; srcRGB: GLenum; dstRGB: GLenum; srcAlpha: GLenum; dstAlpha: GLenum); stdcall;
  glBlendEquationIndexedAMD: procedure(buf: GLuint; mode: GLenum); stdcall;
  glBlendEquationSeparateIndexedAMD: procedure(buf: GLuint; modeRGB: GLenum; modeAlpha: GLenum); stdcall;

{ GL_AMD_interleaved_elements }
  glVertexAttribParameteriAMD: procedure(index: GLuint; pname: GLenum; param: GLint); stdcall;

{ GL_AMD_multi_draw_indirect }
  glMultiDrawArraysIndirectAMD: procedure(mode: GLenum; const indirect: Pointer; primcount: GLsizei; stride: GLsizei); stdcall;
  glMultiDrawElementsIndirectAMD: procedure(mode: GLenum; type_: GLenum; const indirect: Pointer; primcount: GLsizei; stride: GLsizei); stdcall;

{ GL_AMD_name_gen_delete }
  glGenNamesAMD: procedure(identifier: GLenum; num: GLuint; names: PGLuint); stdcall;
  glDeleteNamesAMD: procedure(identifier: GLenum; num: GLuint; const names: PGLuint); stdcall;
  glIsNameAMD: function(identifier: GLenum; name: GLuint): GLboolean; stdcall;

{ GL_AMD_occlusion_query_event }
  glQueryObjectParameteruiAMD: procedure(target: GLenum; id: GLuint; pname: GLenum; param: GLuint); stdcall;

{ GL_AMD_performance_monitor }
  glGetPerfMonitorGroupsAMD: procedure(numGroups: PGLint; groupsSize: GLsizei; groups: PGLuint); stdcall;
  glGetPerfMonitorCountersAMD: procedure(group: GLuint; numCounters: PGLint; maxActiveCounters: PGLint; counterSize: GLsizei; counters: PGLuint); stdcall;
  glGetPerfMonitorGroupStringAMD: procedure(group: GLuint; bufSize: GLsizei; length: PGLsizei; groupString: PGLchar); stdcall;
  glGetPerfMonitorCounterStringAMD: procedure(group: GLuint; counter: GLuint; bufSize: GLsizei; length: PGLsizei; counterString: PGLchar); stdcall;
  glGetPerfMonitorCounterInfoAMD: procedure(group: GLuint; counter: GLuint; pname: GLenum; data: Pointer); stdcall;
  glGenPerfMonitorsAMD: procedure(n: GLsizei; monitors: PGLuint); stdcall;
  glDeletePerfMonitorsAMD: procedure(n: GLsizei; monitors: PGLuint); stdcall;
  glSelectPerfMonitorCountersAMD: procedure(monitor: GLuint; enable: GLboolean; group: GLuint; numCounters: GLint; counterList: PGLuint); stdcall;
  glBeginPerfMonitorAMD: procedure(monitor: GLuint); stdcall;
  glEndPerfMonitorAMD: procedure(monitor: GLuint); stdcall;
  glGetPerfMonitorCounterDataAMD: procedure(monitor: GLuint; pname: GLenum; dataSize: GLsizei; data: PGLuint; bytesWritten: PGLint); stdcall;

{ GL_AMD_sample_positions }
  glSetMultisamplefvAMD: procedure(pname: GLenum; index: GLuint; const val: PGLfloat); stdcall;

{ GL_AMD_sparse_texture }
  glTexStorageSparseAMD: procedure(target: GLenum; internalFormat: GLenum; width: GLsizei; height: GLsizei; depth: GLsizei; layers: GLsizei; flags: GLbitfield); stdcall;
  glTextureStorageSparseAMD: procedure(texture: GLuint; target: GLenum; internalFormat: GLenum; width: GLsizei; height: GLsizei; depth: GLsizei; layers: GLsizei; flags: GLbitfield); stdcall;

{ GL_AMD_stencil_operation_extended }
  glStencilOpValueAMD: procedure(face: GLenum; value: GLuint); stdcall;

{ GL_AMD_vertex_shader_tessellator }
  glTessellationFactorAMD: procedure(factor: GLfloat); stdcall;
  glTessellationModeAMD: procedure(mode: GLenum); stdcall;

{ GL_APPLE_element_array }
  glElementPointerAPPLE: procedure(type_: GLenum; const pointer: Pointer); stdcall;
  glDrawElementArrayAPPLE: procedure(mode: GLenum; first: GLint; count: GLsizei); stdcall;
  glDrawRangeElementArrayAPPLE: procedure(mode: GLenum; start: GLuint; end_: GLuint; first: GLint; count: GLsizei); stdcall;
  glMultiDrawElementArrayAPPLE: procedure(mode: GLenum; const first: PGLint; const count: PGLsizei; primcount: GLsizei); stdcall;
  glMultiDrawRangeElementArrayAPPLE: procedure(mode: GLenum; start: GLuint; end_: GLuint; const first: PGLint; const count: PGLsizei; primcount: GLsizei); stdcall;

{ GL_APPLE_fence }
  glGenFencesAPPLE: procedure(n: GLsizei; fences: PGLuint); stdcall;
  glDeleteFencesAPPLE: procedure(n: GLsizei; const fences: PGLuint); stdcall;
  glSetFenceAPPLE: procedure(fence: GLuint); stdcall;
  glIsFenceAPPLE: function(fence: GLuint): GLboolean; stdcall;
  glTestFenceAPPLE: function(fence: GLuint): GLboolean; stdcall;
  glFinishFenceAPPLE: procedure(fence: GLuint); stdcall;
  glTestObjectAPPLE: function(object_: GLenum; name: GLuint): GLboolean; stdcall;
  glFinishObjectAPPLE: procedure(object_: GLenum; name: GLint); stdcall;

{ GL_APPLE_flush_buffer_range }
  glBufferParameteriAPPLE: procedure(target: GLenum; pname: GLenum; param: GLint); stdcall;
  glFlushMappedBufferRangeAPPLE: procedure(target: GLenum; offset: GLintptr; size: GLsizeiptr); stdcall;

{ GL_APPLE_object_purgeable }
  glObjectPurgeableAPPLE: function(objectType: GLenum; name: GLuint; option: GLenum): GLenum; stdcall;
  glObjectUnpurgeableAPPLE: function(objectType: GLenum; name: GLuint; option: GLenum): GLenum; stdcall;
  glGetObjectParameterivAPPLE: procedure(objectType: GLenum; name: GLuint; pname: GLenum; params: PGLint); stdcall;

{ GL_APPLE_texture_range }
  glTextureRangeAPPLE: procedure(target: GLenum; length: GLsizei; const pointer: Pointer); stdcall;
  glGetTexParameterPointervAPPLE: procedure(target: GLenum; pname: GLenum; params: PPointer); stdcall;

{ GL_APPLE_vertex_array_object }
  glBindVertexArrayAPPLE: procedure(array_: GLuint); stdcall;
  glDeleteVertexArraysAPPLE: procedure(n: GLsizei; const arrays: PGLuint); stdcall;
  glGenVertexArraysAPPLE: procedure(n: GLsizei; arrays: PGLuint); stdcall;
  glIsVertexArrayAPPLE: function(array_: GLuint): GLboolean; stdcall;

{ GL_APPLE_vertex_array_range }
  glVertexArrayRangeAPPLE: procedure(length: GLsizei; pointer: Pointer); stdcall;
  glFlushVertexArrayRangeAPPLE: procedure(length: GLsizei; pointer: Pointer); stdcall;
  glVertexArrayParameteriAPPLE: procedure(pname: GLenum; param: GLint); stdcall;

{ GL_APPLE_vertex_program_evaluators }
  glEnableVertexAttribAPPLE: procedure(index: GLuint; pname: GLenum); stdcall;
  glDisableVertexAttribAPPLE: procedure(index: GLuint; pname: GLenum); stdcall;
  glIsVertexAttribEnabledAPPLE: function(index: GLuint; pname: GLenum): GLboolean; stdcall;
  glMapVertexAttrib1dAPPLE: procedure(index: GLuint; size: GLuint; u1: GLdouble; u2: GLdouble; stride: GLint; order: GLint; const points: PGLdouble); stdcall;
  glMapVertexAttrib1fAPPLE: procedure(index: GLuint; size: GLuint; u1: GLfloat; u2: GLfloat; stride: GLint; order: GLint; const points: PGLfloat); stdcall;
  glMapVertexAttrib2dAPPLE: procedure(index: GLuint; size: GLuint; u1: GLdouble; u2: GLdouble; ustride: GLint; uorder: GLint; v1: GLdouble; v2: GLdouble; vstride: GLint; vorder: GLint; const points: PGLdouble); stdcall;
  glMapVertexAttrib2fAPPLE: procedure(index: GLuint; size: GLuint; u1: GLfloat; u2: GLfloat; ustride: GLint; uorder: GLint; v1: GLfloat; v2: GLfloat; vstride: GLint; vorder: GLint; const points: PGLfloat); stdcall;

{ GL_ATI_draw_buffers }
  glDrawBuffersATI: procedure(n: GLsizei; const bufs: PGLenum); stdcall;

{ GL_ATI_element_array }
  glElementPointerATI: procedure(type_: GLenum; const pointer: Pointer); stdcall;
  glDrawElementArrayATI: procedure(mode: GLenum; count: GLsizei); stdcall;
  glDrawRangeElementArrayATI: procedure(mode: GLenum; start: GLuint; end_: GLuint; count: GLsizei); stdcall;

{ GL_ATI_envmap_bumpmap }
  glTexBumpParameterivATI: procedure(pname: GLenum; const param: PGLint); stdcall;
  glTexBumpParameterfvATI: procedure(pname: GLenum; const param: PGLfloat); stdcall;
  glGetTexBumpParameterivATI: procedure(pname: GLenum; param: PGLint); stdcall;
  glGetTexBumpParameterfvATI: procedure(pname: GLenum; param: PGLfloat); stdcall;

{ GL_ATI_fragment_shader }
  glGenFragmentShadersATI: function(range: GLuint): GLuint; stdcall;
  glBindFragmentShaderATI: procedure(id: GLuint); stdcall;
  glDeleteFragmentShaderATI: procedure(id: GLuint); stdcall;
  glBeginFragmentShaderATI: procedure; stdcall;
  glEndFragmentShaderATI: procedure; stdcall;
  glPassTexCoordATI: procedure(dst: GLuint; coord: GLuint; swizzle: GLenum); stdcall;
  glSampleMapATI: procedure(dst: GLuint; interp: GLuint; swizzle: GLenum); stdcall;
  glColorFragmentOp1ATI: procedure(op: GLenum; dst: GLuint; dstMask: GLuint; dstMod: GLuint; arg1: GLuint; arg1Rep: GLuint; arg1Mod: GLuint); stdcall;
  glColorFragmentOp2ATI: procedure(op: GLenum; dst: GLuint; dstMask: GLuint; dstMod: GLuint; arg1: GLuint; arg1Rep: GLuint; arg1Mod: GLuint; arg2: GLuint; arg2Rep: GLuint; arg2Mod: GLuint); stdcall;
  glColorFragmentOp3ATI: procedure(op: GLenum; dst: GLuint; dstMask: GLuint; dstMod: GLuint; arg1: GLuint; arg1Rep: GLuint; arg1Mod: GLuint; arg2: GLuint; arg2Rep: GLuint; arg2Mod: GLuint; arg3: GLuint; arg3Rep: GLuint; arg3Mod: GLuint); stdcall;
  glAlphaFragmentOp1ATI: procedure(op: GLenum; dst: GLuint; dstMod: GLuint; arg1: GLuint; arg1Rep: GLuint; arg1Mod: GLuint); stdcall;
  glAlphaFragmentOp2ATI: procedure(op: GLenum; dst: GLuint; dstMod: GLuint; arg1: GLuint; arg1Rep: GLuint; arg1Mod: GLuint; arg2: GLuint; arg2Rep: GLuint; arg2Mod: GLuint); stdcall;
  glAlphaFragmentOp3ATI: procedure(op: GLenum; dst: GLuint; dstMod: GLuint; arg1: GLuint; arg1Rep: GLuint; arg1Mod: GLuint; arg2: GLuint; arg2Rep: GLuint; arg2Mod: GLuint; arg3: GLuint; arg3Rep: GLuint; arg3Mod: GLuint); stdcall;
  glSetFragmentShaderConstantATI: procedure(dst: GLuint; const value: PGLfloat); stdcall;

{ GL_ATI_map_object_buffer }
  glMapObjectBufferATI: function(buffer: GLuint): Pointer; stdcall;
  glUnmapObjectBufferATI: procedure(buffer: GLuint); stdcall;

{ GL_ATI_pn_triangles }
  glPNTrianglesiATI: procedure(pname: GLenum; param: GLint); stdcall;
  glPNTrianglesfATI: procedure(pname: GLenum; param: GLfloat); stdcall;

{ GL_ATI_separate_stencil }
  glStencilOpSeparateATI: procedure(face: GLenum; sfail: GLenum; dpfail: GLenum; dppass: GLenum); stdcall;
  glStencilFuncSeparateATI: procedure(frontfunc: GLenum; backfunc: GLenum; ref: GLint; mask: GLuint); stdcall;

{ GL_ATI_vertex_array_object }
  glNewObjectBufferATI: function(size: GLsizei; const pointer: Pointer; usage: GLenum): GLuint; stdcall;
  glIsObjectBufferATI: function(buffer: GLuint): GLboolean; stdcall;
  glUpdateObjectBufferATI: procedure(buffer: GLuint; offset: GLuint; size: GLsizei; const pointer: Pointer; preserve: GLenum); stdcall;
  glGetObjectBufferfvATI: procedure(buffer: GLuint; pname: GLenum; params: PGLfloat); stdcall;
  glGetObjectBufferivATI: procedure(buffer: GLuint; pname: GLenum; params: PGLint); stdcall;
  glFreeObjectBufferATI: procedure(buffer: GLuint); stdcall;
  glArrayObjectATI: procedure(array_: GLenum; size: GLint; type_: GLenum; stride: GLsizei; buffer: GLuint; offset: GLuint); stdcall;
  glGetArrayObjectfvATI: procedure(array_: GLenum; pname: GLenum; params: PGLfloat); stdcall;
  glGetArrayObjectivATI: procedure(array_: GLenum; pname: GLenum; params: PGLint); stdcall;
  glVariantArrayObjectATI: procedure(id: GLuint; type_: GLenum; stride: GLsizei; buffer: GLuint; offset: GLuint); stdcall;
  glGetVariantArrayObjectfvATI: procedure(id: GLuint; pname: GLenum; params: PGLfloat); stdcall;
  glGetVariantArrayObjectivATI: procedure(id: GLuint; pname: GLenum; params: PGLint); stdcall;

{ GL_ATI_vertex_attrib_array_object }
  glVertexAttribArrayObjectATI: procedure(index: GLuint; size: GLint; type_: GLenum; normalized: GLboolean; stride: GLsizei; buffer: GLuint; offset: GLuint); stdcall;
  glGetVertexAttribArrayObjectfvATI: procedure(index: GLuint; pname: GLenum; params: PGLfloat); stdcall;
  glGetVertexAttribArrayObjectivATI: procedure(index: GLuint; pname: GLenum; params: PGLint); stdcall;

{ GL_ATI_vertex_streams }
  glVertexStream1sATI: procedure(stream: GLenum; x: GLshort); stdcall;
  glVertexStream1svATI: procedure(stream: GLenum; const coords: PGLshort); stdcall;
  glVertexStream1iATI: procedure(stream: GLenum; x: GLint); stdcall;
  glVertexStream1ivATI: procedure(stream: GLenum; const coords: PGLint); stdcall;
  glVertexStream1fATI: procedure(stream: GLenum; x: GLfloat); stdcall;
  glVertexStream1fvATI: procedure(stream: GLenum; const coords: PGLfloat); stdcall;
  glVertexStream1dATI: procedure(stream: GLenum; x: GLdouble); stdcall;
  glVertexStream1dvATI: procedure(stream: GLenum; const coords: PGLdouble); stdcall;
  glVertexStream2sATI: procedure(stream: GLenum; x: GLshort; y: GLshort); stdcall;
  glVertexStream2svATI: procedure(stream: GLenum; const coords: PGLshort); stdcall;
  glVertexStream2iATI: procedure(stream: GLenum; x: GLint; y: GLint); stdcall;
  glVertexStream2ivATI: procedure(stream: GLenum; const coords: PGLint); stdcall;
  glVertexStream2fATI: procedure(stream: GLenum; x: GLfloat; y: GLfloat); stdcall;
  glVertexStream2fvATI: procedure(stream: GLenum; const coords: PGLfloat); stdcall;
  glVertexStream2dATI: procedure(stream: GLenum; x: GLdouble; y: GLdouble); stdcall;
  glVertexStream2dvATI: procedure(stream: GLenum; const coords: PGLdouble); stdcall;
  glVertexStream3sATI: procedure(stream: GLenum; x: GLshort; y: GLshort; z: GLshort); stdcall;
  glVertexStream3svATI: procedure(stream: GLenum; const coords: PGLshort); stdcall;
  glVertexStream3iATI: procedure(stream: GLenum; x: GLint; y: GLint; z: GLint); stdcall;
  glVertexStream3ivATI: procedure(stream: GLenum; const coords: PGLint); stdcall;
  glVertexStream3fATI: procedure(stream: GLenum; x: GLfloat; y: GLfloat; z: GLfloat); stdcall;
  glVertexStream3fvATI: procedure(stream: GLenum; const coords: PGLfloat); stdcall;
  glVertexStream3dATI: procedure(stream: GLenum; x: GLdouble; y: GLdouble; z: GLdouble); stdcall;
  glVertexStream3dvATI: procedure(stream: GLenum; const coords: PGLdouble); stdcall;
  glVertexStream4sATI: procedure(stream: GLenum; x: GLshort; y: GLshort; z: GLshort; w: GLshort); stdcall;
  glVertexStream4svATI: procedure(stream: GLenum; const coords: PGLshort); stdcall;
  glVertexStream4iATI: procedure(stream: GLenum; x: GLint; y: GLint; z: GLint; w: GLint); stdcall;
  glVertexStream4ivATI: procedure(stream: GLenum; const coords: PGLint); stdcall;
  glVertexStream4fATI: procedure(stream: GLenum; x: GLfloat; y: GLfloat; z: GLfloat; w: GLfloat); stdcall;
  glVertexStream4fvATI: procedure(stream: GLenum; const coords: PGLfloat); stdcall;
  glVertexStream4dATI: procedure(stream: GLenum; x: GLdouble; y: GLdouble; z: GLdouble; w: GLdouble); stdcall;
  glVertexStream4dvATI: procedure(stream: GLenum; const coords: PGLdouble); stdcall;
  glNormalStream3bATI: procedure(stream: GLenum; nx: GLbyte; ny: GLbyte; nz: GLbyte); stdcall;
  glNormalStream3bvATI: procedure(stream: GLenum; const coords: PGLbyte); stdcall;
  glNormalStream3sATI: procedure(stream: GLenum; nx: GLshort; ny: GLshort; nz: GLshort); stdcall;
  glNormalStream3svATI: procedure(stream: GLenum; const coords: PGLshort); stdcall;
  glNormalStream3iATI: procedure(stream: GLenum; nx: GLint; ny: GLint; nz: GLint); stdcall;
  glNormalStream3ivATI: procedure(stream: GLenum; const coords: PGLint); stdcall;
  glNormalStream3fATI: procedure(stream: GLenum; nx: GLfloat; ny: GLfloat; nz: GLfloat); stdcall;
  glNormalStream3fvATI: procedure(stream: GLenum; const coords: PGLfloat); stdcall;
  glNormalStream3dATI: procedure(stream: GLenum; nx: GLdouble; ny: GLdouble; nz: GLdouble); stdcall;
  glNormalStream3dvATI: procedure(stream: GLenum; const coords: PGLdouble); stdcall;
  glClientActiveVertexStreamATI: procedure(stream: GLenum); stdcall;
  glVertexBlendEnviATI: procedure(pname: GLenum; param: GLint); stdcall;
  glVertexBlendEnvfATI: procedure(pname: GLenum; param: GLfloat); stdcall;

{ GL_EXT_bindable_uniform }
  glUniformBufferEXT: procedure(program_: GLuint; location: GLint; buffer: GLuint); stdcall;
  glGetUniformBufferSizeEXT: function(program_: GLuint; location: GLint): GLint; stdcall;
  glGetUniformOffsetEXT: function(program_: GLuint; location: GLint): GLintptr; stdcall;

{ GL_EXT_blend_color }
  glBlendColorEXT: procedure(red: GLfloat; green: GLfloat; blue: GLfloat; alpha: GLfloat); stdcall;

{ GL_EXT_blend_equation_separate }
  glBlendEquationSeparateEXT: procedure(modeRGB: GLenum; modeAlpha: GLenum); stdcall;

{ GL_EXT_blend_func_separate }
  glBlendFuncSeparateEXT: procedure(sfactorRGB: GLenum; dfactorRGB: GLenum; sfactorAlpha: GLenum; dfactorAlpha: GLenum); stdcall;

{ GL_EXT_blend_minmax }
  glBlendEquationEXT: procedure(mode: GLenum); stdcall;

{ GL_EXT_color_subtable }
  glColorSubTableEXT: procedure(target: GLenum; start: GLsizei; count: GLsizei; format: GLenum; type_: GLenum; const data: Pointer); stdcall;
  glCopyColorSubTableEXT: procedure(target: GLenum; start: GLsizei; x: GLint; y: GLint; width: GLsizei); stdcall;

{ GL_EXT_compiled_vertex_array }
  glLockArraysEXT: procedure(first: GLint; count: GLsizei); stdcall;
  glUnlockArraysEXT: procedure; stdcall;

{ GL_EXT_convolution }
  glConvolutionFilter1DEXT: procedure(target: GLenum; internalformat: GLenum; width: GLsizei; format: GLenum; type_: GLenum; const image: Pointer); stdcall;
  glConvolutionFilter2DEXT: procedure(target: GLenum; internalformat: GLenum; width: GLsizei; height: GLsizei; format: GLenum; type_: GLenum; const image: Pointer); stdcall;
  glConvolutionParameterfEXT: procedure(target: GLenum; pname: GLenum; params: GLfloat); stdcall;
  glConvolutionParameterfvEXT: procedure(target: GLenum; pname: GLenum; const params: PGLfloat); stdcall;
  glConvolutionParameteriEXT: procedure(target: GLenum; pname: GLenum; params: GLint); stdcall;
  glConvolutionParameterivEXT: procedure(target: GLenum; pname: GLenum; const params: PGLint); stdcall;
  glCopyConvolutionFilter1DEXT: procedure(target: GLenum; internalformat: GLenum; x: GLint; y: GLint; width: GLsizei); stdcall;
  glCopyConvolutionFilter2DEXT: procedure(target: GLenum; internalformat: GLenum; x: GLint; y: GLint; width: GLsizei; height: GLsizei); stdcall;
  glGetConvolutionFilterEXT: procedure(target: GLenum; format: GLenum; type_: GLenum; image: Pointer); stdcall;
  glGetConvolutionParameterfvEXT: procedure(target: GLenum; pname: GLenum; params: PGLfloat); stdcall;
  glGetConvolutionParameterivEXT: procedure(target: GLenum; pname: GLenum; params: PGLint); stdcall;
  glGetSeparableFilterEXT: procedure(target: GLenum; format: GLenum; type_: GLenum; row: Pointer; column: Pointer; span: Pointer); stdcall;
  glSeparableFilter2DEXT: procedure(target: GLenum; internalformat: GLenum; width: GLsizei; height: GLsizei; format: GLenum; type_: GLenum; const row: Pointer; const column: Pointer); stdcall;

{ GL_EXT_coordinate_frame }
  glTangent3bEXT: procedure(tx: GLbyte; ty: GLbyte; tz: GLbyte); stdcall;
  glTangent3bvEXT: procedure(const v: PGLbyte); stdcall;
  glTangent3dEXT: procedure(tx: GLdouble; ty: GLdouble; tz: GLdouble); stdcall;
  glTangent3dvEXT: procedure(const v: PGLdouble); stdcall;
  glTangent3fEXT: procedure(tx: GLfloat; ty: GLfloat; tz: GLfloat); stdcall;
  glTangent3fvEXT: procedure(const v: PGLfloat); stdcall;
  glTangent3iEXT: procedure(tx: GLint; ty: GLint; tz: GLint); stdcall;
  glTangent3ivEXT: procedure(const v: PGLint); stdcall;
  glTangent3sEXT: procedure(tx: GLshort; ty: GLshort; tz: GLshort); stdcall;
  glTangent3svEXT: procedure(const v: PGLshort); stdcall;
  glBinormal3bEXT: procedure(bx: GLbyte; by: GLbyte; bz: GLbyte); stdcall;
  glBinormal3bvEXT: procedure(const v: PGLbyte); stdcall;
  glBinormal3dEXT: procedure(bx: GLdouble; by: GLdouble; bz: GLdouble); stdcall;
  glBinormal3dvEXT: procedure(const v: PGLdouble); stdcall;
  glBinormal3fEXT: procedure(bx: GLfloat; by: GLfloat; bz: GLfloat); stdcall;
  glBinormal3fvEXT: procedure(const v: PGLfloat); stdcall;
  glBinormal3iEXT: procedure(bx: GLint; by: GLint; bz: GLint); stdcall;
  glBinormal3ivEXT: procedure(const v: PGLint); stdcall;
  glBinormal3sEXT: procedure(bx: GLshort; by: GLshort; bz: GLshort); stdcall;
  glBinormal3svEXT: procedure(const v: PGLshort); stdcall;
  glTangentPointerEXT: procedure(type_: GLenum; stride: GLsizei; const pointer: Pointer); stdcall;
  glBinormalPointerEXT: procedure(type_: GLenum; stride: GLsizei; const pointer: Pointer); stdcall;

{ GL_EXT_copy_texture }
  glCopyTexImage1DEXT: procedure(target: GLenum; level: GLint; internalformat: GLenum; x: GLint; y: GLint; width: GLsizei; border: GLint); stdcall;
  glCopyTexImage2DEXT: procedure(target: GLenum; level: GLint; internalformat: GLenum; x: GLint; y: GLint; width: GLsizei; height: GLsizei; border: GLint); stdcall;
  glCopyTexSubImage1DEXT: procedure(target: GLenum; level: GLint; xoffset: GLint; x: GLint; y: GLint; width: GLsizei); stdcall;
  glCopyTexSubImage2DEXT: procedure(target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; x: GLint; y: GLint; width: GLsizei; height: GLsizei); stdcall;
  glCopyTexSubImage3DEXT: procedure(target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; zoffset: GLint; x: GLint; y: GLint; width: GLsizei; height: GLsizei); stdcall;

{ GL_EXT_cull_vertex }
  glCullParameterdvEXT: procedure(pname: GLenum; params: PGLdouble); stdcall;
  glCullParameterfvEXT: procedure(pname: GLenum; params: PGLfloat); stdcall;

{ GL_EXT_debug_label }
  glLabelObjectEXT: procedure(type_: GLenum; object_: GLuint; length: GLsizei; const label_: PGLchar); stdcall;
  glGetObjectLabelEXT: procedure(type_: GLenum; object_: GLuint; bufSize: GLsizei; length: PGLsizei; label_: PGLchar); stdcall;

{ GL_EXT_debug_marker }
  glInsertEventMarkerEXT: procedure(length: GLsizei; const marker: PGLchar); stdcall;
  glPushGroupMarkerEXT: procedure(length: GLsizei; const marker: PGLchar); stdcall;
  glPopGroupMarkerEXT: procedure; stdcall;

{ GL_EXT_depth_bounds_test }
  glDepthBoundsEXT: procedure(zmin: GLclampd; zmax: GLclampd); stdcall;

{ GL_EXT_direct_state_access }
  glMatrixLoadfEXT: procedure(mode: GLenum; const m: PGLfloat); stdcall;
  glMatrixLoaddEXT: procedure(mode: GLenum; const m: PGLdouble); stdcall;
  glMatrixMultfEXT: procedure(mode: GLenum; const m: PGLfloat); stdcall;
  glMatrixMultdEXT: procedure(mode: GLenum; const m: PGLdouble); stdcall;
  glMatrixLoadIdentityEXT: procedure(mode: GLenum); stdcall;
  glMatrixRotatefEXT: procedure(mode: GLenum; angle: GLfloat; x: GLfloat; y: GLfloat; z: GLfloat); stdcall;
  glMatrixRotatedEXT: procedure(mode: GLenum; angle: GLdouble; x: GLdouble; y: GLdouble; z: GLdouble); stdcall;
  glMatrixScalefEXT: procedure(mode: GLenum; x: GLfloat; y: GLfloat; z: GLfloat); stdcall;
  glMatrixScaledEXT: procedure(mode: GLenum; x: GLdouble; y: GLdouble; z: GLdouble); stdcall;
  glMatrixTranslatefEXT: procedure(mode: GLenum; x: GLfloat; y: GLfloat; z: GLfloat); stdcall;
  glMatrixTranslatedEXT: procedure(mode: GLenum; x: GLdouble; y: GLdouble; z: GLdouble); stdcall;
  glMatrixFrustumEXT: procedure(mode: GLenum; left: GLdouble; right: GLdouble; bottom: GLdouble; top: GLdouble; zNear: GLdouble; zFar: GLdouble); stdcall;
  glMatrixOrthoEXT: procedure(mode: GLenum; left: GLdouble; right: GLdouble; bottom: GLdouble; top: GLdouble; zNear: GLdouble; zFar: GLdouble); stdcall;
  glMatrixPopEXT: procedure(mode: GLenum); stdcall;
  glMatrixPushEXT: procedure(mode: GLenum); stdcall;
  glClientAttribDefaultEXT: procedure(mask: GLbitfield); stdcall;
  glPushClientAttribDefaultEXT: procedure(mask: GLbitfield); stdcall;
  glTextureParameterfEXT: procedure(texture: GLuint; target: GLenum; pname: GLenum; param: GLfloat); stdcall;
  glTextureParameterfvEXT: procedure(texture: GLuint; target: GLenum; pname: GLenum; const params: PGLfloat); stdcall;
  glTextureParameteriEXT: procedure(texture: GLuint; target: GLenum; pname: GLenum; param: GLint); stdcall;
  glTextureParameterivEXT: procedure(texture: GLuint; target: GLenum; pname: GLenum; const params: PGLint); stdcall;
  glTextureImage1DEXT: procedure(texture: GLuint; target: GLenum; level: GLint; internalformat: GLint; width: GLsizei; border: GLint; format: GLenum; type_: GLenum; const pixels: Pointer); stdcall;
  glTextureImage2DEXT: procedure(texture: GLuint; target: GLenum; level: GLint; internalformat: GLint; width: GLsizei; height: GLsizei; border: GLint; format: GLenum; type_: GLenum; const pixels: Pointer); stdcall;
  glTextureSubImage1DEXT: procedure(texture: GLuint; target: GLenum; level: GLint; xoffset: GLint; width: GLsizei; format: GLenum; type_: GLenum; const pixels: Pointer); stdcall;
  glTextureSubImage2DEXT: procedure(texture: GLuint; target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; width: GLsizei; height: GLsizei; format: GLenum; type_: GLenum; const pixels: Pointer); stdcall;
  glCopyTextureImage1DEXT: procedure(texture: GLuint; target: GLenum; level: GLint; internalformat: GLenum; x: GLint; y: GLint; width: GLsizei; border: GLint); stdcall;
  glCopyTextureImage2DEXT: procedure(texture: GLuint; target: GLenum; level: GLint; internalformat: GLenum; x: GLint; y: GLint; width: GLsizei; height: GLsizei; border: GLint); stdcall;
  glCopyTextureSubImage1DEXT: procedure(texture: GLuint; target: GLenum; level: GLint; xoffset: GLint; x: GLint; y: GLint; width: GLsizei); stdcall;
  glCopyTextureSubImage2DEXT: procedure(texture: GLuint; target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; x: GLint; y: GLint; width: GLsizei; height: GLsizei); stdcall;
  glGetTextureImageEXT: procedure(texture: GLuint; target: GLenum; level: GLint; format: GLenum; type_: GLenum; pixels: Pointer); stdcall;
  glGetTextureParameterfvEXT: procedure(texture: GLuint; target: GLenum; pname: GLenum; params: PGLfloat); stdcall;
  glGetTextureParameterivEXT: procedure(texture: GLuint; target: GLenum; pname: GLenum; params: PGLint); stdcall;
  glGetTextureLevelParameterfvEXT: procedure(texture: GLuint; target: GLenum; level: GLint; pname: GLenum; params: PGLfloat); stdcall;
  glGetTextureLevelParameterivEXT: procedure(texture: GLuint; target: GLenum; level: GLint; pname: GLenum; params: PGLint); stdcall;
  glTextureImage3DEXT: procedure(texture: GLuint; target: GLenum; level: GLint; internalformat: GLint; width: GLsizei; height: GLsizei; depth: GLsizei; border: GLint; format: GLenum; type_: GLenum; const pixels: Pointer); stdcall;
  glTextureSubImage3DEXT: procedure(texture: GLuint; target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; zoffset: GLint; width: GLsizei; height: GLsizei; depth: GLsizei; format: GLenum; type_: GLenum; const pixels: Pointer); stdcall;
  glCopyTextureSubImage3DEXT: procedure(texture: GLuint; target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; zoffset: GLint; x: GLint; y: GLint; width: GLsizei; height: GLsizei); stdcall;
  glBindMultiTextureEXT: procedure(texunit: GLenum; target: GLenum; texture: GLuint); stdcall;
  glMultiTexCoordPointerEXT: procedure(texunit: GLenum; size: GLint; type_: GLenum; stride: GLsizei; const pointer: Pointer); stdcall;
  glMultiTexEnvfEXT: procedure(texunit: GLenum; target: GLenum; pname: GLenum; param: GLfloat); stdcall;
  glMultiTexEnvfvEXT: procedure(texunit: GLenum; target: GLenum; pname: GLenum; const params: PGLfloat); stdcall;
  glMultiTexEnviEXT: procedure(texunit: GLenum; target: GLenum; pname: GLenum; param: GLint); stdcall;
  glMultiTexEnvivEXT: procedure(texunit: GLenum; target: GLenum; pname: GLenum; const params: PGLint); stdcall;
  glMultiTexGendEXT: procedure(texunit: GLenum; coord: GLenum; pname: GLenum; param: GLdouble); stdcall;
  glMultiTexGendvEXT: procedure(texunit: GLenum; coord: GLenum; pname: GLenum; const params: PGLdouble); stdcall;
  glMultiTexGenfEXT: procedure(texunit: GLenum; coord: GLenum; pname: GLenum; param: GLfloat); stdcall;
  glMultiTexGenfvEXT: procedure(texunit: GLenum; coord: GLenum; pname: GLenum; const params: PGLfloat); stdcall;
  glMultiTexGeniEXT: procedure(texunit: GLenum; coord: GLenum; pname: GLenum; param: GLint); stdcall;
  glMultiTexGenivEXT: procedure(texunit: GLenum; coord: GLenum; pname: GLenum; const params: PGLint); stdcall;
  glGetMultiTexEnvfvEXT: procedure(texunit: GLenum; target: GLenum; pname: GLenum; params: PGLfloat); stdcall;
  glGetMultiTexEnvivEXT: procedure(texunit: GLenum; target: GLenum; pname: GLenum; params: PGLint); stdcall;
  glGetMultiTexGendvEXT: procedure(texunit: GLenum; coord: GLenum; pname: GLenum; params: PGLdouble); stdcall;
  glGetMultiTexGenfvEXT: procedure(texunit: GLenum; coord: GLenum; pname: GLenum; params: PGLfloat); stdcall;
  glGetMultiTexGenivEXT: procedure(texunit: GLenum; coord: GLenum; pname: GLenum; params: PGLint); stdcall;
  glMultiTexParameteriEXT: procedure(texunit: GLenum; target: GLenum; pname: GLenum; param: GLint); stdcall;
  glMultiTexParameterivEXT: procedure(texunit: GLenum; target: GLenum; pname: GLenum; const params: PGLint); stdcall;
  glMultiTexParameterfEXT: procedure(texunit: GLenum; target: GLenum; pname: GLenum; param: GLfloat); stdcall;
  glMultiTexParameterfvEXT: procedure(texunit: GLenum; target: GLenum; pname: GLenum; const params: PGLfloat); stdcall;
  glMultiTexImage1DEXT: procedure(texunit: GLenum; target: GLenum; level: GLint; internalformat: GLint; width: GLsizei; border: GLint; format: GLenum; type_: GLenum; const pixels: Pointer); stdcall;
  glMultiTexImage2DEXT: procedure(texunit: GLenum; target: GLenum; level: GLint; internalformat: GLint; width: GLsizei; height: GLsizei; border: GLint; format: GLenum; type_: GLenum; const pixels: Pointer); stdcall;
  glMultiTexSubImage1DEXT: procedure(texunit: GLenum; target: GLenum; level: GLint; xoffset: GLint; width: GLsizei; format: GLenum; type_: GLenum; const pixels: Pointer); stdcall;
  glMultiTexSubImage2DEXT: procedure(texunit: GLenum; target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; width: GLsizei; height: GLsizei; format: GLenum; type_: GLenum; const pixels: Pointer); stdcall;
  glCopyMultiTexImage1DEXT: procedure(texunit: GLenum; target: GLenum; level: GLint; internalformat: GLenum; x: GLint; y: GLint; width: GLsizei; border: GLint); stdcall;
  glCopyMultiTexImage2DEXT: procedure(texunit: GLenum; target: GLenum; level: GLint; internalformat: GLenum; x: GLint; y: GLint; width: GLsizei; height: GLsizei; border: GLint); stdcall;
  glCopyMultiTexSubImage1DEXT: procedure(texunit: GLenum; target: GLenum; level: GLint; xoffset: GLint; x: GLint; y: GLint; width: GLsizei); stdcall;
  glCopyMultiTexSubImage2DEXT: procedure(texunit: GLenum; target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; x: GLint; y: GLint; width: GLsizei; height: GLsizei); stdcall;
  glGetMultiTexImageEXT: procedure(texunit: GLenum; target: GLenum; level: GLint; format: GLenum; type_: GLenum; pixels: Pointer); stdcall;
  glGetMultiTexParameterfvEXT: procedure(texunit: GLenum; target: GLenum; pname: GLenum; params: PGLfloat); stdcall;
  glGetMultiTexParameterivEXT: procedure(texunit: GLenum; target: GLenum; pname: GLenum; params: PGLint); stdcall;
  glGetMultiTexLevelParameterfvEXT: procedure(texunit: GLenum; target: GLenum; level: GLint; pname: GLenum; params: PGLfloat); stdcall;
  glGetMultiTexLevelParameterivEXT: procedure(texunit: GLenum; target: GLenum; level: GLint; pname: GLenum; params: PGLint); stdcall;
  glMultiTexImage3DEXT: procedure(texunit: GLenum; target: GLenum; level: GLint; internalformat: GLint; width: GLsizei; height: GLsizei; depth: GLsizei; border: GLint; format: GLenum; type_: GLenum; const pixels: Pointer); stdcall;
  glMultiTexSubImage3DEXT: procedure(texunit: GLenum; target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; zoffset: GLint; width: GLsizei; height: GLsizei; depth: GLsizei; format: GLenum; type_: GLenum; const pixels: Pointer); stdcall;
  glCopyMultiTexSubImage3DEXT: procedure(texunit: GLenum; target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; zoffset: GLint; x: GLint; y: GLint; width: GLsizei; height: GLsizei); stdcall;
  glEnableClientStateIndexedEXT: procedure(array_: GLenum; index: GLuint); stdcall;
  glDisableClientStateIndexedEXT: procedure(array_: GLenum; index: GLuint); stdcall;
  glGetFloatIndexedvEXT: procedure(target: GLenum; index: GLuint; data: PGLfloat); stdcall;
  glGetDoubleIndexedvEXT: procedure(target: GLenum; index: GLuint; data: PGLdouble); stdcall;
  glGetPointerIndexedvEXT: procedure(target: GLenum; index: GLuint; data: PPointer); stdcall;
  glEnableIndexedEXT: procedure(target: GLenum; index: GLuint); stdcall;
  glDisableIndexedEXT: procedure(target: GLenum; index: GLuint); stdcall;
  glIsEnabledIndexedEXT: function(target: GLenum; index: GLuint): GLboolean; stdcall;
  glGetIntegerIndexedvEXT: procedure(target: GLenum; index: GLuint; data: PGLint); stdcall;
  glGetBooleanIndexedvEXT: procedure(target: GLenum; index: GLuint; data: PGLboolean); stdcall;
  glCompressedTextureImage3DEXT: procedure(texture: GLuint; target: GLenum; level: GLint; internalformat: GLenum; width: GLsizei; height: GLsizei; depth: GLsizei; border: GLint; imageSize: GLsizei; const bits: Pointer); stdcall;
  glCompressedTextureImage2DEXT: procedure(texture: GLuint; target: GLenum; level: GLint; internalformat: GLenum; width: GLsizei; height: GLsizei; border: GLint; imageSize: GLsizei; const bits: Pointer); stdcall;
  glCompressedTextureImage1DEXT: procedure(texture: GLuint; target: GLenum; level: GLint; internalformat: GLenum; width: GLsizei; border: GLint; imageSize: GLsizei; const bits: Pointer); stdcall;
  glCompressedTextureSubImage3DEXT: procedure(texture: GLuint; target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; zoffset: GLint; width: GLsizei; height: GLsizei; depth: GLsizei; format: GLenum; imageSize: GLsizei; const bits: Pointer); stdcall;
  glCompressedTextureSubImage2DEXT: procedure(texture: GLuint; target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; width: GLsizei; height: GLsizei; format: GLenum; imageSize: GLsizei; const bits: Pointer); stdcall;
  glCompressedTextureSubImage1DEXT: procedure(texture: GLuint; target: GLenum; level: GLint; xoffset: GLint; width: GLsizei; format: GLenum; imageSize: GLsizei; const bits: Pointer); stdcall;
  glGetCompressedTextureImageEXT: procedure(texture: GLuint; target: GLenum; lod: GLint; img: Pointer); stdcall;
  glCompressedMultiTexImage3DEXT: procedure(texunit: GLenum; target: GLenum; level: GLint; internalformat: GLenum; width: GLsizei; height: GLsizei; depth: GLsizei; border: GLint; imageSize: GLsizei; const bits: Pointer); stdcall;
  glCompressedMultiTexImage2DEXT: procedure(texunit: GLenum; target: GLenum; level: GLint; internalformat: GLenum; width: GLsizei; height: GLsizei; border: GLint; imageSize: GLsizei; const bits: Pointer); stdcall;
  glCompressedMultiTexImage1DEXT: procedure(texunit: GLenum; target: GLenum; level: GLint; internalformat: GLenum; width: GLsizei; border: GLint; imageSize: GLsizei; const bits: Pointer); stdcall;
  glCompressedMultiTexSubImage3DEXT: procedure(texunit: GLenum; target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; zoffset: GLint; width: GLsizei; height: GLsizei; depth: GLsizei; format: GLenum; imageSize: GLsizei; const bits: Pointer); stdcall;
  glCompressedMultiTexSubImage2DEXT: procedure(texunit: GLenum; target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; width: GLsizei; height: GLsizei; format: GLenum; imageSize: GLsizei; const bits: Pointer); stdcall;
  glCompressedMultiTexSubImage1DEXT: procedure(texunit: GLenum; target: GLenum; level: GLint; xoffset: GLint; width: GLsizei; format: GLenum; imageSize: GLsizei; const bits: Pointer); stdcall;
  glGetCompressedMultiTexImageEXT: procedure(texunit: GLenum; target: GLenum; lod: GLint; img: Pointer); stdcall;
  glMatrixLoadTransposefEXT: procedure(mode: GLenum; const m: PGLfloat); stdcall;
  glMatrixLoadTransposedEXT: procedure(mode: GLenum; const m: PGLdouble); stdcall;
  glMatrixMultTransposefEXT: procedure(mode: GLenum; const m: PGLfloat); stdcall;
  glMatrixMultTransposedEXT: procedure(mode: GLenum; const m: PGLdouble); stdcall;
  glNamedBufferDataEXT: procedure(buffer: GLuint; size: GLsizeiptr; const data: Pointer; usage: GLenum); stdcall;
  glNamedBufferSubDataEXT: procedure(buffer: GLuint; offset: GLintptr; size: GLsizeiptr; const data: Pointer); stdcall;
  glMapNamedBufferEXT: function(buffer: GLuint; access: GLenum): Pointer; stdcall;
  glUnmapNamedBufferEXT: function(buffer: GLuint): GLboolean; stdcall;
  glGetNamedBufferParameterivEXT: procedure(buffer: GLuint; pname: GLenum; params: PGLint); stdcall;
  glGetNamedBufferPointervEXT: procedure(buffer: GLuint; pname: GLenum; params: PPointer); stdcall;
  glGetNamedBufferSubDataEXT: procedure(buffer: GLuint; offset: GLintptr; size: GLsizeiptr; data: Pointer); stdcall;
  glProgramUniform1fEXT: procedure(program_: GLuint; location: GLint; v0: GLfloat); stdcall;
  glProgramUniform2fEXT: procedure(program_: GLuint; location: GLint; v0: GLfloat; v1: GLfloat); stdcall;
  glProgramUniform3fEXT: procedure(program_: GLuint; location: GLint; v0: GLfloat; v1: GLfloat; v2: GLfloat); stdcall;
  glProgramUniform4fEXT: procedure(program_: GLuint; location: GLint; v0: GLfloat; v1: GLfloat; v2: GLfloat; v3: GLfloat); stdcall;
  glProgramUniform1iEXT: procedure(program_: GLuint; location: GLint; v0: GLint); stdcall;
  glProgramUniform2iEXT: procedure(program_: GLuint; location: GLint; v0: GLint; v1: GLint); stdcall;
  glProgramUniform3iEXT: procedure(program_: GLuint; location: GLint; v0: GLint; v1: GLint; v2: GLint); stdcall;
  glProgramUniform4iEXT: procedure(program_: GLuint; location: GLint; v0: GLint; v1: GLint; v2: GLint; v3: GLint); stdcall;
  glProgramUniform1fvEXT: procedure(program_: GLuint; location: GLint; count: GLsizei; const value: PGLfloat); stdcall;
  glProgramUniform2fvEXT: procedure(program_: GLuint; location: GLint; count: GLsizei; const value: PGLfloat); stdcall;
  glProgramUniform3fvEXT: procedure(program_: GLuint; location: GLint; count: GLsizei; const value: PGLfloat); stdcall;
  glProgramUniform4fvEXT: procedure(program_: GLuint; location: GLint; count: GLsizei; const value: PGLfloat); stdcall;
  glProgramUniform1ivEXT: procedure(program_: GLuint; location: GLint; count: GLsizei; const value: PGLint); stdcall;
  glProgramUniform2ivEXT: procedure(program_: GLuint; location: GLint; count: GLsizei; const value: PGLint); stdcall;
  glProgramUniform3ivEXT: procedure(program_: GLuint; location: GLint; count: GLsizei; const value: PGLint); stdcall;
  glProgramUniform4ivEXT: procedure(program_: GLuint; location: GLint; count: GLsizei; const value: PGLint); stdcall;
  glProgramUniformMatrix2fvEXT: procedure(program_: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); stdcall;
  glProgramUniformMatrix3fvEXT: procedure(program_: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); stdcall;
  glProgramUniformMatrix4fvEXT: procedure(program_: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); stdcall;
  glProgramUniformMatrix2x3fvEXT: procedure(program_: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); stdcall;
  glProgramUniformMatrix3x2fvEXT: procedure(program_: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); stdcall;
  glProgramUniformMatrix2x4fvEXT: procedure(program_: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); stdcall;
  glProgramUniformMatrix4x2fvEXT: procedure(program_: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); stdcall;
  glProgramUniformMatrix3x4fvEXT: procedure(program_: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); stdcall;
  glProgramUniformMatrix4x3fvEXT: procedure(program_: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLfloat); stdcall;
  glTextureBufferEXT: procedure(texture: GLuint; target: GLenum; internalformat: GLenum; buffer: GLuint); stdcall;
  glMultiTexBufferEXT: procedure(texunit: GLenum; target: GLenum; internalformat: GLenum; buffer: GLuint); stdcall;
  glTextureParameterIivEXT: procedure(texture: GLuint; target: GLenum; pname: GLenum; const params: PGLint); stdcall;
  glTextureParameterIuivEXT: procedure(texture: GLuint; target: GLenum; pname: GLenum; const params: PGLuint); stdcall;
  glGetTextureParameterIivEXT: procedure(texture: GLuint; target: GLenum; pname: GLenum; params: PGLint); stdcall;
  glGetTextureParameterIuivEXT: procedure(texture: GLuint; target: GLenum; pname: GLenum; params: PGLuint); stdcall;
  glMultiTexParameterIivEXT: procedure(texunit: GLenum; target: GLenum; pname: GLenum; const params: PGLint); stdcall;
  glMultiTexParameterIuivEXT: procedure(texunit: GLenum; target: GLenum; pname: GLenum; const params: PGLuint); stdcall;
  glGetMultiTexParameterIivEXT: procedure(texunit: GLenum; target: GLenum; pname: GLenum; params: PGLint); stdcall;
  glGetMultiTexParameterIuivEXT: procedure(texunit: GLenum; target: GLenum; pname: GLenum; params: PGLuint); stdcall;
  glProgramUniform1uiEXT: procedure(program_: GLuint; location: GLint; v0: GLuint); stdcall;
  glProgramUniform2uiEXT: procedure(program_: GLuint; location: GLint; v0: GLuint; v1: GLuint); stdcall;
  glProgramUniform3uiEXT: procedure(program_: GLuint; location: GLint; v0: GLuint; v1: GLuint; v2: GLuint); stdcall;
  glProgramUniform4uiEXT: procedure(program_: GLuint; location: GLint; v0: GLuint; v1: GLuint; v2: GLuint; v3: GLuint); stdcall;
  glProgramUniform1uivEXT: procedure(program_: GLuint; location: GLint; count: GLsizei; const value: PGLuint); stdcall;
  glProgramUniform2uivEXT: procedure(program_: GLuint; location: GLint; count: GLsizei; const value: PGLuint); stdcall;
  glProgramUniform3uivEXT: procedure(program_: GLuint; location: GLint; count: GLsizei; const value: PGLuint); stdcall;
  glProgramUniform4uivEXT: procedure(program_: GLuint; location: GLint; count: GLsizei; const value: PGLuint); stdcall;
  glNamedProgramLocalParameters4fvEXT: procedure(program_: GLuint; target: GLenum; index: GLuint; count: GLsizei; const params: PGLfloat); stdcall;
  glNamedProgramLocalParameterI4iEXT: procedure(program_: GLuint; target: GLenum; index: GLuint; x: GLint; y: GLint; z: GLint; w: GLint); stdcall;
  glNamedProgramLocalParameterI4ivEXT: procedure(program_: GLuint; target: GLenum; index: GLuint; const params: PGLint); stdcall;
  glNamedProgramLocalParametersI4ivEXT: procedure(program_: GLuint; target: GLenum; index: GLuint; count: GLsizei; const params: PGLint); stdcall;
  glNamedProgramLocalParameterI4uiEXT: procedure(program_: GLuint; target: GLenum; index: GLuint; x: GLuint; y: GLuint; z: GLuint; w: GLuint); stdcall;
  glNamedProgramLocalParameterI4uivEXT: procedure(program_: GLuint; target: GLenum; index: GLuint; const params: PGLuint); stdcall;
  glNamedProgramLocalParametersI4uivEXT: procedure(program_: GLuint; target: GLenum; index: GLuint; count: GLsizei; const params: PGLuint); stdcall;
  glGetNamedProgramLocalParameterIivEXT: procedure(program_: GLuint; target: GLenum; index: GLuint; params: PGLint); stdcall;
  glGetNamedProgramLocalParameterIuivEXT: procedure(program_: GLuint; target: GLenum; index: GLuint; params: PGLuint); stdcall;
  glEnableClientStateiEXT: procedure(array_: GLenum; index: GLuint); stdcall;
  glDisableClientStateiEXT: procedure(array_: GLenum; index: GLuint); stdcall;
  glGetFloati_vEXT: procedure(pname: GLenum; index: GLuint; params: PGLfloat); stdcall;
  glGetDoublei_vEXT: procedure(pname: GLenum; index: GLuint; params: PGLdouble); stdcall;
  glGetPointeri_vEXT: procedure(pname: GLenum; index: GLuint; params: PPointer); stdcall;
  glNamedProgramStringEXT: procedure(program_: GLuint; target: GLenum; format: GLenum; len: GLsizei; const string_: Pointer); stdcall;
  glNamedProgramLocalParameter4dEXT: procedure(program_: GLuint; target: GLenum; index: GLuint; x: GLdouble; y: GLdouble; z: GLdouble; w: GLdouble); stdcall;
  glNamedProgramLocalParameter4dvEXT: procedure(program_: GLuint; target: GLenum; index: GLuint; const params: PGLdouble); stdcall;
  glNamedProgramLocalParameter4fEXT: procedure(program_: GLuint; target: GLenum; index: GLuint; x: GLfloat; y: GLfloat; z: GLfloat; w: GLfloat); stdcall;
  glNamedProgramLocalParameter4fvEXT: procedure(program_: GLuint; target: GLenum; index: GLuint; const params: PGLfloat); stdcall;
  glGetNamedProgramLocalParameterdvEXT: procedure(program_: GLuint; target: GLenum; index: GLuint; params: PGLdouble); stdcall;
  glGetNamedProgramLocalParameterfvEXT: procedure(program_: GLuint; target: GLenum; index: GLuint; params: PGLfloat); stdcall;
  glGetNamedProgramivEXT: procedure(program_: GLuint; target: GLenum; pname: GLenum; params: PGLint); stdcall;
  glGetNamedProgramStringEXT: procedure(program_: GLuint; target: GLenum; pname: GLenum; string_: Pointer); stdcall;
  glNamedRenderbufferStorageEXT: procedure(renderbuffer: GLuint; internalformat: GLenum; width: GLsizei; height: GLsizei); stdcall;
  glGetNamedRenderbufferParameterivEXT: procedure(renderbuffer: GLuint; pname: GLenum; params: PGLint); stdcall;
  glNamedRenderbufferStorageMultisampleEXT: procedure(renderbuffer: GLuint; samples: GLsizei; internalformat: GLenum; width: GLsizei; height: GLsizei); stdcall;
  glNamedRenderbufferStorageMultisampleCoverageEXT: procedure(renderbuffer: GLuint; coverageSamples: GLsizei; colorSamples: GLsizei; internalformat: GLenum; width: GLsizei; height: GLsizei); stdcall;
  glCheckNamedFramebufferStatusEXT: function(framebuffer: GLuint; target: GLenum): GLenum; stdcall;
  glNamedFramebufferTexture1DEXT: procedure(framebuffer: GLuint; attachment: GLenum; textarget: GLenum; texture: GLuint; level: GLint); stdcall;
  glNamedFramebufferTexture2DEXT: procedure(framebuffer: GLuint; attachment: GLenum; textarget: GLenum; texture: GLuint; level: GLint); stdcall;
  glNamedFramebufferTexture3DEXT: procedure(framebuffer: GLuint; attachment: GLenum; textarget: GLenum; texture: GLuint; level: GLint; zoffset: GLint); stdcall;
  glNamedFramebufferRenderbufferEXT: procedure(framebuffer: GLuint; attachment: GLenum; renderbuffertarget: GLenum; renderbuffer: GLuint); stdcall;
  glGetNamedFramebufferAttachmentParameterivEXT: procedure(framebuffer: GLuint; attachment: GLenum; pname: GLenum; params: PGLint); stdcall;
  glGenerateTextureMipmapEXT: procedure(texture: GLuint; target: GLenum); stdcall;
  glGenerateMultiTexMipmapEXT: procedure(texunit: GLenum; target: GLenum); stdcall;
  glFramebufferDrawBufferEXT: procedure(framebuffer: GLuint; mode: GLenum); stdcall;
  glFramebufferDrawBuffersEXT: procedure(framebuffer: GLuint; n: GLsizei; const bufs: PGLenum); stdcall;
  glFramebufferReadBufferEXT: procedure(framebuffer: GLuint; mode: GLenum); stdcall;
  glGetFramebufferParameterivEXT: procedure(framebuffer: GLuint; pname: GLenum; params: PGLint); stdcall;
  glNamedCopyBufferSubDataEXT: procedure(readBuffer: GLuint; writeBuffer: GLuint; readOffset: GLintptr; writeOffset: GLintptr; size: GLsizeiptr); stdcall;
  glNamedFramebufferTextureEXT: procedure(framebuffer: GLuint; attachment: GLenum; texture: GLuint; level: GLint); stdcall;
  glNamedFramebufferTextureLayerEXT: procedure(framebuffer: GLuint; attachment: GLenum; texture: GLuint; level: GLint; layer: GLint); stdcall;
  glNamedFramebufferTextureFaceEXT: procedure(framebuffer: GLuint; attachment: GLenum; texture: GLuint; level: GLint; face: GLenum); stdcall;
  glTextureRenderbufferEXT: procedure(texture: GLuint; target: GLenum; renderbuffer: GLuint); stdcall;
  glMultiTexRenderbufferEXT: procedure(texunit: GLenum; target: GLenum; renderbuffer: GLuint); stdcall;
  glVertexArrayVertexOffsetEXT: procedure(vaobj: GLuint; buffer: GLuint; size: GLint; type_: GLenum; stride: GLsizei; offset: GLintptr); stdcall;
  glVertexArrayColorOffsetEXT: procedure(vaobj: GLuint; buffer: GLuint; size: GLint; type_: GLenum; stride: GLsizei; offset: GLintptr); stdcall;
  glVertexArrayEdgeFlagOffsetEXT: procedure(vaobj: GLuint; buffer: GLuint; stride: GLsizei; offset: GLintptr); stdcall;
  glVertexArrayIndexOffsetEXT: procedure(vaobj: GLuint; buffer: GLuint; type_: GLenum; stride: GLsizei; offset: GLintptr); stdcall;
  glVertexArrayNormalOffsetEXT: procedure(vaobj: GLuint; buffer: GLuint; type_: GLenum; stride: GLsizei; offset: GLintptr); stdcall;
  glVertexArrayTexCoordOffsetEXT: procedure(vaobj: GLuint; buffer: GLuint; size: GLint; type_: GLenum; stride: GLsizei; offset: GLintptr); stdcall;
  glVertexArrayMultiTexCoordOffsetEXT: procedure(vaobj: GLuint; buffer: GLuint; texunit: GLenum; size: GLint; type_: GLenum; stride: GLsizei; offset: GLintptr); stdcall;
  glVertexArrayFogCoordOffsetEXT: procedure(vaobj: GLuint; buffer: GLuint; type_: GLenum; stride: GLsizei; offset: GLintptr); stdcall;
  glVertexArraySecondaryColorOffsetEXT: procedure(vaobj: GLuint; buffer: GLuint; size: GLint; type_: GLenum; stride: GLsizei; offset: GLintptr); stdcall;
  glVertexArrayVertexAttribOffsetEXT: procedure(vaobj: GLuint; buffer: GLuint; index: GLuint; size: GLint; type_: GLenum; normalized: GLboolean; stride: GLsizei; offset: GLintptr); stdcall;
  glVertexArrayVertexAttribIOffsetEXT: procedure(vaobj: GLuint; buffer: GLuint; index: GLuint; size: GLint; type_: GLenum; stride: GLsizei; offset: GLintptr); stdcall;
  glEnableVertexArrayEXT: procedure(vaobj: GLuint; array_: GLenum); stdcall;
  glDisableVertexArrayEXT: procedure(vaobj: GLuint; array_: GLenum); stdcall;
  glEnableVertexArrayAttribEXT: procedure(vaobj: GLuint; index: GLuint); stdcall;
  glDisableVertexArrayAttribEXT: procedure(vaobj: GLuint; index: GLuint); stdcall;
  glGetVertexArrayIntegervEXT: procedure(vaobj: GLuint; pname: GLenum; param: PGLint); stdcall;
  glGetVertexArrayPointervEXT: procedure(vaobj: GLuint; pname: GLenum; param: PPointer); stdcall;
  glGetVertexArrayIntegeri_vEXT: procedure(vaobj: GLuint; index: GLuint; pname: GLenum; param: PGLint); stdcall;
  glGetVertexArrayPointeri_vEXT: procedure(vaobj: GLuint; index: GLuint; pname: GLenum; param: PPointer); stdcall;
  glMapNamedBufferRangeEXT: function(buffer: GLuint; offset: GLintptr; length: GLsizeiptr; access: GLbitfield): Pointer; stdcall;
  glFlushMappedNamedBufferRangeEXT: procedure(buffer: GLuint; offset: GLintptr; length: GLsizeiptr); stdcall;
  glNamedBufferStorageEXT: procedure(buffer: GLuint; size: GLsizeiptr; const data: Pointer; flags: GLbitfield); stdcall;
  glClearNamedBufferDataEXT: procedure(buffer: GLuint; internalformat: GLenum; format: GLenum; type_: GLenum; const data: Pointer); stdcall;
  glClearNamedBufferSubDataEXT: procedure(buffer: GLuint; internalformat: GLenum; format: GLenum; type_: GLenum; offset: GLsizeiptr; size: GLsizeiptr; const data: Pointer); stdcall;
  glNamedFramebufferParameteriEXT: procedure(framebuffer: GLuint; pname: GLenum; param: GLint); stdcall;
  glGetNamedFramebufferParameterivEXT: procedure(framebuffer: GLuint; pname: GLenum; params: PGLint); stdcall;
  glProgramUniform1dEXT: procedure(program_: GLuint; location: GLint; x: GLdouble); stdcall;
  glProgramUniform2dEXT: procedure(program_: GLuint; location: GLint; x: GLdouble; y: GLdouble); stdcall;
  glProgramUniform3dEXT: procedure(program_: GLuint; location: GLint; x: GLdouble; y: GLdouble; z: GLdouble); stdcall;
  glProgramUniform4dEXT: procedure(program_: GLuint; location: GLint; x: GLdouble; y: GLdouble; z: GLdouble; w: GLdouble); stdcall;
  glProgramUniform1dvEXT: procedure(program_: GLuint; location: GLint; count: GLsizei; const value: PGLdouble); stdcall;
  glProgramUniform2dvEXT: procedure(program_: GLuint; location: GLint; count: GLsizei; const value: PGLdouble); stdcall;
  glProgramUniform3dvEXT: procedure(program_: GLuint; location: GLint; count: GLsizei; const value: PGLdouble); stdcall;
  glProgramUniform4dvEXT: procedure(program_: GLuint; location: GLint; count: GLsizei; const value: PGLdouble); stdcall;
  glProgramUniformMatrix2dvEXT: procedure(program_: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); stdcall;
  glProgramUniformMatrix3dvEXT: procedure(program_: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); stdcall;
  glProgramUniformMatrix4dvEXT: procedure(program_: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); stdcall;
  glProgramUniformMatrix2x3dvEXT: procedure(program_: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); stdcall;
  glProgramUniformMatrix2x4dvEXT: procedure(program_: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); stdcall;
  glProgramUniformMatrix3x2dvEXT: procedure(program_: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); stdcall;
  glProgramUniformMatrix3x4dvEXT: procedure(program_: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); stdcall;
  glProgramUniformMatrix4x2dvEXT: procedure(program_: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); stdcall;
  glProgramUniformMatrix4x3dvEXT: procedure(program_: GLuint; location: GLint; count: GLsizei; transpose: GLboolean; const value: PGLdouble); stdcall;
  glTextureBufferRangeEXT: procedure(texture: GLuint; target: GLenum; internalformat: GLenum; buffer: GLuint; offset: GLintptr; size: GLsizeiptr); stdcall;
  glTextureStorage1DEXT: procedure(texture: GLuint; target: GLenum; levels: GLsizei; internalformat: GLenum; width: GLsizei); stdcall;
  glTextureStorage2DEXT: procedure(texture: GLuint; target: GLenum; levels: GLsizei; internalformat: GLenum; width: GLsizei; height: GLsizei); stdcall;
  glTextureStorage3DEXT: procedure(texture: GLuint; target: GLenum; levels: GLsizei; internalformat: GLenum; width: GLsizei; height: GLsizei; depth: GLsizei); stdcall;
  glTextureStorage2DMultisampleEXT: procedure(texture: GLuint; target: GLenum; samples: GLsizei; internalformat: GLenum; width: GLsizei; height: GLsizei; fixedsamplelocations: GLboolean); stdcall;
  glTextureStorage3DMultisampleEXT: procedure(texture: GLuint; target: GLenum; samples: GLsizei; internalformat: GLenum; width: GLsizei; height: GLsizei; depth: GLsizei; fixedsamplelocations: GLboolean); stdcall;
  glVertexArrayBindVertexBufferEXT: procedure(vaobj: GLuint; bindingindex: GLuint; buffer: GLuint; offset: GLintptr; stride: GLsizei); stdcall;
  glVertexArrayVertexAttribFormatEXT: procedure(vaobj: GLuint; attribindex: GLuint; size: GLint; type_: GLenum; normalized: GLboolean; relativeoffset: GLuint); stdcall;
  glVertexArrayVertexAttribIFormatEXT: procedure(vaobj: GLuint; attribindex: GLuint; size: GLint; type_: GLenum; relativeoffset: GLuint); stdcall;
  glVertexArrayVertexAttribLFormatEXT: procedure(vaobj: GLuint; attribindex: GLuint; size: GLint; type_: GLenum; relativeoffset: GLuint); stdcall;
  glVertexArrayVertexAttribBindingEXT: procedure(vaobj: GLuint; attribindex: GLuint; bindingindex: GLuint); stdcall;
  glVertexArrayVertexBindingDivisorEXT: procedure(vaobj: GLuint; bindingindex: GLuint; divisor: GLuint); stdcall;
  glVertexArrayVertexAttribLOffsetEXT: procedure(vaobj: GLuint; buffer: GLuint; index: GLuint; size: GLint; type_: GLenum; stride: GLsizei; offset: GLintptr); stdcall;
  glTexturePageCommitmentEXT: procedure(texture: GLuint; level: GLint; xoffset: GLint; yoffset: GLint; zoffset: GLint; width: GLsizei; height: GLsizei; depth: GLsizei; resident: GLboolean); stdcall;
  glVertexArrayVertexAttribDivisorEXT: procedure(vaobj: GLuint; index: GLuint; divisor: GLuint); stdcall;

{ GL_EXT_draw_buffers2 }
  glColorMaskIndexedEXT: procedure(index: GLuint; r: GLboolean; g: GLboolean; b: GLboolean; a: GLboolean); stdcall;

{ GL_EXT_draw_instanced }
  glDrawArraysInstancedEXT: procedure(mode: GLenum; start: GLint; count: GLsizei; primcount: GLsizei); stdcall;
  glDrawElementsInstancedEXT: procedure(mode: GLenum; count: GLsizei; type_: GLenum; const indices: Pointer; primcount: GLsizei); stdcall;

{ GL_EXT_draw_range_elements }
  glDrawRangeElementsEXT: procedure(mode: GLenum; start: GLuint; end_: GLuint; count: GLsizei; type_: GLenum; const indices: Pointer); stdcall;

{ GL_EXT_fog_coord }
  glFogCoordfEXT: procedure(coord: GLfloat); stdcall;
  glFogCoordfvEXT: procedure(const coord: PGLfloat); stdcall;
  glFogCoorddEXT: procedure(coord: GLdouble); stdcall;
  glFogCoorddvEXT: procedure(const coord: PGLdouble); stdcall;
  glFogCoordPointerEXT: procedure(type_: GLenum; stride: GLsizei; const pointer: Pointer); stdcall;

{ GL_EXT_framebuffer_blit }
  glBlitFramebufferEXT: procedure(srcX0: GLint; srcY0: GLint; srcX1: GLint; srcY1: GLint; dstX0: GLint; dstY0: GLint; dstX1: GLint; dstY1: GLint; mask: GLbitfield; filter: GLenum); stdcall;

{ GL_EXT_framebuffer_multisample }
  glRenderbufferStorageMultisampleEXT: procedure(target: GLenum; samples: GLsizei; internalformat: GLenum; width: GLsizei; height: GLsizei); stdcall;

{ GL_EXT_framebuffer_object }
  glIsRenderbufferEXT: function(renderbuffer: GLuint): GLboolean; stdcall;
  glBindRenderbufferEXT: procedure(target: GLenum; renderbuffer: GLuint); stdcall;
  glDeleteRenderbuffersEXT: procedure(n: GLsizei; const renderbuffers: PGLuint); stdcall;
  glGenRenderbuffersEXT: procedure(n: GLsizei; renderbuffers: PGLuint); stdcall;
  glRenderbufferStorageEXT: procedure(target: GLenum; internalformat: GLenum; width: GLsizei; height: GLsizei); stdcall;
  glGetRenderbufferParameterivEXT: procedure(target: GLenum; pname: GLenum; params: PGLint); stdcall;
  glIsFramebufferEXT: function(framebuffer: GLuint): GLboolean; stdcall;
  glBindFramebufferEXT: procedure(target: GLenum; framebuffer: GLuint); stdcall;
  glDeleteFramebuffersEXT: procedure(n: GLsizei; const framebuffers: PGLuint); stdcall;
  glGenFramebuffersEXT: procedure(n: GLsizei; framebuffers: PGLuint); stdcall;
  glCheckFramebufferStatusEXT: function(target: GLenum): GLenum; stdcall;
  glFramebufferTexture1DEXT: procedure(target: GLenum; attachment: GLenum; textarget: GLenum; texture: GLuint; level: GLint); stdcall;
  glFramebufferTexture2DEXT: procedure(target: GLenum; attachment: GLenum; textarget: GLenum; texture: GLuint; level: GLint); stdcall;
  glFramebufferTexture3DEXT: procedure(target: GLenum; attachment: GLenum; textarget: GLenum; texture: GLuint; level: GLint; zoffset: GLint); stdcall;
  glFramebufferRenderbufferEXT: procedure(target: GLenum; attachment: GLenum; renderbuffertarget: GLenum; renderbuffer: GLuint); stdcall;
  glGetFramebufferAttachmentParameterivEXT: procedure(target: GLenum; attachment: GLenum; pname: GLenum; params: PGLint); stdcall;
  glGenerateMipmapEXT: procedure(target: GLenum); stdcall;

{ GL_EXT_geometry_shader4 }
  glProgramParameteriEXT: procedure(program_: GLuint; pname: GLenum; value: GLint); stdcall;

{ GL_EXT_gpu_program_parameters }
  glProgramEnvParameters4fvEXT: procedure(target: GLenum; index: GLuint; count: GLsizei; const params: PGLfloat); stdcall;
  glProgramLocalParameters4fvEXT: procedure(target: GLenum; index: GLuint; count: GLsizei; const params: PGLfloat); stdcall;

{ GL_EXT_gpu_shader4 }
  glGetUniformuivEXT: procedure(program_: GLuint; location: GLint; params: PGLuint); stdcall;
  glBindFragDataLocationEXT: procedure(program_: GLuint; color: GLuint; const name: PGLchar); stdcall;
  glGetFragDataLocationEXT: function(program_: GLuint; const name: PGLchar): GLint; stdcall;
  glUniform1uiEXT: procedure(location: GLint; v0: GLuint); stdcall;
  glUniform2uiEXT: procedure(location: GLint; v0: GLuint; v1: GLuint); stdcall;
  glUniform3uiEXT: procedure(location: GLint; v0: GLuint; v1: GLuint; v2: GLuint); stdcall;
  glUniform4uiEXT: procedure(location: GLint; v0: GLuint; v1: GLuint; v2: GLuint; v3: GLuint); stdcall;
  glUniform1uivEXT: procedure(location: GLint; count: GLsizei; const value: PGLuint); stdcall;
  glUniform2uivEXT: procedure(location: GLint; count: GLsizei; const value: PGLuint); stdcall;
  glUniform3uivEXT: procedure(location: GLint; count: GLsizei; const value: PGLuint); stdcall;
  glUniform4uivEXT: procedure(location: GLint; count: GLsizei; const value: PGLuint); stdcall;

{ GL_EXT_histogram }
  glGetHistogramEXT: procedure(target: GLenum; reset: GLboolean; format: GLenum; type_: GLenum; values: Pointer); stdcall;
  glGetHistogramParameterfvEXT: procedure(target: GLenum; pname: GLenum; params: PGLfloat); stdcall;
  glGetHistogramParameterivEXT: procedure(target: GLenum; pname: GLenum; params: PGLint); stdcall;
  glGetMinmaxEXT: procedure(target: GLenum; reset: GLboolean; format: GLenum; type_: GLenum; values: Pointer); stdcall;
  glGetMinmaxParameterfvEXT: procedure(target: GLenum; pname: GLenum; params: PGLfloat); stdcall;
  glGetMinmaxParameterivEXT: procedure(target: GLenum; pname: GLenum; params: PGLint); stdcall;
  glHistogramEXT: procedure(target: GLenum; width: GLsizei; internalformat: GLenum; sink: GLboolean); stdcall;
  glMinmaxEXT: procedure(target: GLenum; internalformat: GLenum; sink: GLboolean); stdcall;
  glResetHistogramEXT: procedure(target: GLenum); stdcall;
  glResetMinmaxEXT: procedure(target: GLenum); stdcall;

{ GL_EXT_index_func }
  glIndexFuncEXT: procedure(func: GLenum; ref: GLclampf); stdcall;

{ GL_EXT_index_material }
  glIndexMaterialEXT: procedure(face: GLenum; mode: GLenum); stdcall;

{ GL_EXT_light_texture }
  glApplyTextureEXT: procedure(mode: GLenum); stdcall;
  glTextureLightEXT: procedure(pname: GLenum); stdcall;
  glTextureMaterialEXT: procedure(face: GLenum; mode: GLenum); stdcall;

{ GL_EXT_multi_draw_arrays }
  glMultiDrawArraysEXT: procedure(mode: GLenum; const first: PGLint; const count: PGLsizei; primcount: GLsizei); stdcall;
  glMultiDrawElementsEXT: procedure(mode: GLenum; const count: PGLsizei; type_: GLenum; const indices: PPointer; primcount: GLsizei); stdcall;

{ GL_EXT_multisample }
  glSampleMaskEXT: procedure(value: GLclampf; invert: GLboolean); stdcall;
  glSamplePatternEXT: procedure(pattern: GLenum); stdcall;

{ GL_EXT_paletted_texture }
  glColorTableEXT: procedure(target: GLenum; internalFormat: GLenum; width: GLsizei; format: GLenum; type_: GLenum; const table: Pointer); stdcall;
  glGetColorTableEXT: procedure(target: GLenum; format: GLenum; type_: GLenum; data: Pointer); stdcall;
  glGetColorTableParameterivEXT: procedure(target: GLenum; pname: GLenum; params: PGLint); stdcall;
  glGetColorTableParameterfvEXT: procedure(target: GLenum; pname: GLenum; params: PGLfloat); stdcall;

{ GL_EXT_pixel_transform }
  glPixelTransformParameteriEXT: procedure(target: GLenum; pname: GLenum; param: GLint); stdcall;
  glPixelTransformParameterfEXT: procedure(target: GLenum; pname: GLenum; param: GLfloat); stdcall;
  glPixelTransformParameterivEXT: procedure(target: GLenum; pname: GLenum; const params: PGLint); stdcall;
  glPixelTransformParameterfvEXT: procedure(target: GLenum; pname: GLenum; const params: PGLfloat); stdcall;
  glGetPixelTransformParameterivEXT: procedure(target: GLenum; pname: GLenum; params: PGLint); stdcall;
  glGetPixelTransformParameterfvEXT: procedure(target: GLenum; pname: GLenum; params: PGLfloat); stdcall;

{ GL_EXT_point_parameters }
  glPointParameterfEXT: procedure(pname: GLenum; param: GLfloat); stdcall;
  glPointParameterfvEXT: procedure(pname: GLenum; const params: PGLfloat); stdcall;

{ GL_EXT_polygon_offset }
  glPolygonOffsetEXT: procedure(factor: GLfloat; bias: GLfloat); stdcall;

{ GL_EXT_provoking_vertex }
  glProvokingVertexEXT: procedure(mode: GLenum); stdcall;

{ GL_EXT_secondary_color }
  glSecondaryColor3bEXT: procedure(red: GLbyte; green: GLbyte; blue: GLbyte); stdcall;
  glSecondaryColor3bvEXT: procedure(const v: PGLbyte); stdcall;
  glSecondaryColor3dEXT: procedure(red: GLdouble; green: GLdouble; blue: GLdouble); stdcall;
  glSecondaryColor3dvEXT: procedure(const v: PGLdouble); stdcall;
  glSecondaryColor3fEXT: procedure(red: GLfloat; green: GLfloat; blue: GLfloat); stdcall;
  glSecondaryColor3fvEXT: procedure(const v: PGLfloat); stdcall;
  glSecondaryColor3iEXT: procedure(red: GLint; green: GLint; blue: GLint); stdcall;
  glSecondaryColor3ivEXT: procedure(const v: PGLint); stdcall;
  glSecondaryColor3sEXT: procedure(red: GLshort; green: GLshort; blue: GLshort); stdcall;
  glSecondaryColor3svEXT: procedure(const v: PGLshort); stdcall;
  glSecondaryColor3ubEXT: procedure(red: GLubyte; green: GLubyte; blue: GLubyte); stdcall;
  glSecondaryColor3ubvEXT: procedure(const v: PGLubyte); stdcall;
  glSecondaryColor3uiEXT: procedure(red: GLuint; green: GLuint; blue: GLuint); stdcall;
  glSecondaryColor3uivEXT: procedure(const v: PGLuint); stdcall;
  glSecondaryColor3usEXT: procedure(red: GLushort; green: GLushort; blue: GLushort); stdcall;
  glSecondaryColor3usvEXT: procedure(const v: PGLushort); stdcall;
  glSecondaryColorPointerEXT: procedure(size: GLint; type_: GLenum; stride: GLsizei; const pointer: Pointer); stdcall;

{ GL_EXT_separate_shader_objects }
  glUseShaderProgramEXT: procedure(type_: GLenum; program_: GLuint); stdcall;
  glActiveProgramEXT: procedure(program_: GLuint); stdcall;
  glCreateShaderProgramEXT: function(type_: GLenum; const string_: PGLchar): GLuint; stdcall;

{ GL_EXT_shader_image_load_store }
  glBindImageTextureEXT: procedure(index: GLuint; texture: GLuint; level: GLint; layered: GLboolean; layer: GLint; access: GLenum; format: GLint); stdcall;
  glMemoryBarrierEXT: procedure(barriers: GLbitfield); stdcall;

{ GL_EXT_stencil_clear_tag }
  glStencilClearTagEXT: procedure(stencilTagBits: GLsizei; stencilClearTag: GLuint); stdcall;

{ GL_EXT_stencil_two_side }
  glActiveStencilFaceEXT: procedure(face: GLenum); stdcall;

{ GL_EXT_subtexture }
  glTexSubImage1DEXT: procedure(target: GLenum; level: GLint; xoffset: GLint; width: GLsizei; format: GLenum; type_: GLenum; const pixels: Pointer); stdcall;
  glTexSubImage2DEXT: procedure(target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; width: GLsizei; height: GLsizei; format: GLenum; type_: GLenum; const pixels: Pointer); stdcall;

{ GL_EXT_texture3D }
  glTexImage3DEXT: procedure(target: GLenum; level: GLint; internalformat: GLenum; width: GLsizei; height: GLsizei; depth: GLsizei; border: GLint; format: GLenum; type_: GLenum; const pixels: Pointer); stdcall;
  glTexSubImage3DEXT: procedure(target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; zoffset: GLint; width: GLsizei; height: GLsizei; depth: GLsizei; format: GLenum; type_: GLenum; const pixels: Pointer); stdcall;

{ GL_EXT_texture_buffer_object }
  glTexBufferEXT: procedure(target: GLenum; internalformat: GLenum; buffer: GLuint); stdcall;

{ GL_EXT_texture_integer }
  glTexParameterIivEXT: procedure(target: GLenum; pname: GLenum; const params: PGLint); stdcall;
  glTexParameterIuivEXT: procedure(target: GLenum; pname: GLenum; const params: PGLuint); stdcall;
  glGetTexParameterIivEXT: procedure(target: GLenum; pname: GLenum; params: PGLint); stdcall;
  glGetTexParameterIuivEXT: procedure(target: GLenum; pname: GLenum; params: PGLuint); stdcall;
  glClearColorIiEXT: procedure(red: GLint; green: GLint; blue: GLint; alpha: GLint); stdcall;
  glClearColorIuiEXT: procedure(red: GLuint; green: GLuint; blue: GLuint; alpha: GLuint); stdcall;

{ GL_EXT_texture_object }
  glAreTexturesResidentEXT: function(n: GLsizei; const textures: PGLuint; residences: PGLboolean): GLboolean; stdcall;
  glBindTextureEXT: procedure(target: GLenum; texture: GLuint); stdcall;
  glDeleteTexturesEXT: procedure(n: GLsizei; const textures: PGLuint); stdcall;
  glGenTexturesEXT: procedure(n: GLsizei; textures: PGLuint); stdcall;
  glIsTextureEXT: function(texture: GLuint): GLboolean; stdcall;
  glPrioritizeTexturesEXT: procedure(n: GLsizei; const textures: PGLuint; const priorities: PGLclampf); stdcall;

{ GL_EXT_texture_perturb_normal }
  glTextureNormalEXT: procedure(mode: GLenum); stdcall;

{ GL_EXT_timer_query }
  glGetQueryObjecti64vEXT: procedure(id: GLuint; pname: GLenum; params: PGLint64); stdcall;
  glGetQueryObjectui64vEXT: procedure(id: GLuint; pname: GLenum; params: PGLuint64); stdcall;

{ GL_EXT_transform_feedback }
  glBeginTransformFeedbackEXT: procedure(primitiveMode: GLenum); stdcall;
  glEndTransformFeedbackEXT: procedure; stdcall;
  glBindBufferRangeEXT: procedure(target: GLenum; index: GLuint; buffer: GLuint; offset: GLintptr; size: GLsizeiptr); stdcall;
  glBindBufferOffsetEXT: procedure(target: GLenum; index: GLuint; buffer: GLuint; offset: GLintptr); stdcall;
  glBindBufferBaseEXT: procedure(target: GLenum; index: GLuint; buffer: GLuint); stdcall;
  glTransformFeedbackVaryingsEXT: procedure(program_: GLuint; count: GLsizei; const varyings: PPGLchar; bufferMode: GLenum); stdcall;
  glGetTransformFeedbackVaryingEXT: procedure(program_: GLuint; index: GLuint; bufSize: GLsizei; length: PGLsizei; size: PGLsizei; type_: PGLenum; name: PGLchar); stdcall;

{ GL_EXT_vertex_array }
  glArrayElementEXT: procedure(i: GLint); stdcall;
  glColorPointerEXT: procedure(size: GLint; type_: GLenum; stride: GLsizei; count: GLsizei; const pointer: Pointer); stdcall;
  glDrawArraysEXT: procedure(mode: GLenum; first: GLint; count: GLsizei); stdcall;
  glEdgeFlagPointerEXT: procedure(stride: GLsizei; count: GLsizei; const pointer: PGLboolean); stdcall;
  glGetPointervEXT: procedure(pname: GLenum; params: PPointer); stdcall;
  glIndexPointerEXT: procedure(type_: GLenum; stride: GLsizei; count: GLsizei; const pointer: Pointer); stdcall;
  glNormalPointerEXT: procedure(type_: GLenum; stride: GLsizei; count: GLsizei; const pointer: Pointer); stdcall;
  glTexCoordPointerEXT: procedure(size: GLint; type_: GLenum; stride: GLsizei; count: GLsizei; const pointer: Pointer); stdcall;
  glVertexPointerEXT: procedure(size: GLint; type_: GLenum; stride: GLsizei; count: GLsizei; const pointer: Pointer); stdcall;

{ GL_EXT_vertex_attrib_64bit }
  glVertexAttribL1dEXT: procedure(index: GLuint; x: GLdouble); stdcall;
  glVertexAttribL2dEXT: procedure(index: GLuint; x: GLdouble; y: GLdouble); stdcall;
  glVertexAttribL3dEXT: procedure(index: GLuint; x: GLdouble; y: GLdouble; z: GLdouble); stdcall;
  glVertexAttribL4dEXT: procedure(index: GLuint; x: GLdouble; y: GLdouble; z: GLdouble; w: GLdouble); stdcall;
  glVertexAttribL1dvEXT: procedure(index: GLuint; const v: PGLdouble); stdcall;
  glVertexAttribL2dvEXT: procedure(index: GLuint; const v: PGLdouble); stdcall;
  glVertexAttribL3dvEXT: procedure(index: GLuint; const v: PGLdouble); stdcall;
  glVertexAttribL4dvEXT: procedure(index: GLuint; const v: PGLdouble); stdcall;
  glVertexAttribLPointerEXT: procedure(index: GLuint; size: GLint; type_: GLenum; stride: GLsizei; const pointer: Pointer); stdcall;
  glGetVertexAttribLdvEXT: procedure(index: GLuint; pname: GLenum; params: PGLdouble); stdcall;

{ GL_EXT_vertex_shader }
  glBeginVertexShaderEXT: procedure; stdcall;
  glEndVertexShaderEXT: procedure; stdcall;
  glBindVertexShaderEXT: procedure(id: GLuint); stdcall;
  glGenVertexShadersEXT: function(range: GLuint): GLuint; stdcall;
  glDeleteVertexShaderEXT: procedure(id: GLuint); stdcall;
  glShaderOp1EXT: procedure(op: GLenum; res: GLuint; arg1: GLuint); stdcall;
  glShaderOp2EXT: procedure(op: GLenum; res: GLuint; arg1: GLuint; arg2: GLuint); stdcall;
  glShaderOp3EXT: procedure(op: GLenum; res: GLuint; arg1: GLuint; arg2: GLuint; arg3: GLuint); stdcall;
  glSwizzleEXT: procedure(res: GLuint; in_: GLuint; outX: GLenum; outY: GLenum; outZ: GLenum; outW: GLenum); stdcall;
  glWriteMaskEXT: procedure(res: GLuint; in_: GLuint; outX: GLenum; outY: GLenum; outZ: GLenum; outW: GLenum); stdcall;
  glInsertComponentEXT: procedure(res: GLuint; src: GLuint; num: GLuint); stdcall;
  glExtractComponentEXT: procedure(res: GLuint; src: GLuint; num: GLuint); stdcall;
  glGenSymbolsEXT: function(datatype: GLenum; storagetype: GLenum; range: GLenum; components: GLuint): GLuint; stdcall;
  glSetInvariantEXT: procedure(id: GLuint; type_: GLenum; const addr: Pointer); stdcall;
  glSetLocalConstantEXT: procedure(id: GLuint; type_: GLenum; const addr: Pointer); stdcall;
  glVariantbvEXT: procedure(id: GLuint; const addr: PGLbyte); stdcall;
  glVariantsvEXT: procedure(id: GLuint; const addr: PGLshort); stdcall;
  glVariantivEXT: procedure(id: GLuint; const addr: PGLint); stdcall;
  glVariantfvEXT: procedure(id: GLuint; const addr: PGLfloat); stdcall;
  glVariantdvEXT: procedure(id: GLuint; const addr: PGLdouble); stdcall;
  glVariantubvEXT: procedure(id: GLuint; const addr: PGLubyte); stdcall;
  glVariantusvEXT: procedure(id: GLuint; const addr: PGLushort); stdcall;
  glVariantuivEXT: procedure(id: GLuint; const addr: PGLuint); stdcall;
  glVariantPointerEXT: procedure(id: GLuint; type_: GLenum; stride: GLuint; const addr: Pointer); stdcall;
  glEnableVariantClientStateEXT: procedure(id: GLuint); stdcall;
  glDisableVariantClientStateEXT: procedure(id: GLuint); stdcall;
  glBindLightParameterEXT: function(light: GLenum; value: GLenum): GLuint; stdcall;
  glBindMaterialParameterEXT: function(face: GLenum; value: GLenum): GLuint; stdcall;
  glBindTexGenParameterEXT: function(unit_: GLenum; coord: GLenum; value: GLenum): GLuint; stdcall;
  glBindTextureUnitParameterEXT: function(unit_: GLenum; value: GLenum): GLuint; stdcall;
  glBindParameterEXT: function(value: GLenum): GLuint; stdcall;
  glIsVariantEnabledEXT: function(id: GLuint; cap: GLenum): GLboolean; stdcall;
  glGetVariantBooleanvEXT: procedure(id: GLuint; value: GLenum; data: PGLboolean); stdcall;
  glGetVariantIntegervEXT: procedure(id: GLuint; value: GLenum; data: PGLint); stdcall;
  glGetVariantFloatvEXT: procedure(id: GLuint; value: GLenum; data: PGLfloat); stdcall;
  glGetVariantPointervEXT: procedure(id: GLuint; value: GLenum; data: PPointer); stdcall;
  glGetInvariantBooleanvEXT: procedure(id: GLuint; value: GLenum; data: PGLboolean); stdcall;
  glGetInvariantIntegervEXT: procedure(id: GLuint; value: GLenum; data: PGLint); stdcall;
  glGetInvariantFloatvEXT: procedure(id: GLuint; value: GLenum; data: PGLfloat); stdcall;
  glGetLocalConstantBooleanvEXT: procedure(id: GLuint; value: GLenum; data: PGLboolean); stdcall;
  glGetLocalConstantIntegervEXT: procedure(id: GLuint; value: GLenum; data: PGLint); stdcall;
  glGetLocalConstantFloatvEXT: procedure(id: GLuint; value: GLenum; data: PGLfloat); stdcall;

{ GL_EXT_vertex_weighting }
  glVertexWeightfEXT: procedure(weight: GLfloat); stdcall;
  glVertexWeightfvEXT: procedure(const weight: PGLfloat); stdcall;
  glVertexWeightPointerEXT: procedure(size: GLint; type_: GLenum; stride: GLsizei; const pointer: Pointer); stdcall;

{ GL_EXT_x11_sync_object }
  glImportSyncEXT: function(external_sync_type: GLenum; external_sync: GLintptr; flags: GLbitfield): GLsync; stdcall;

{ GL_GREMEDY_frame_terminator }
  glFrameTerminatorGREMEDY: procedure; stdcall;

{ GL_GREMEDY_string_marker }
  glStringMarkerGREMEDY: procedure(len: GLsizei; const string_: Pointer); stdcall;

{ GL_HP_image_transform }
  glImageTransformParameteriHP: procedure(target: GLenum; pname: GLenum; param: GLint); stdcall;
  glImageTransformParameterfHP: procedure(target: GLenum; pname: GLenum; param: GLfloat); stdcall;
  glImageTransformParameterivHP: procedure(target: GLenum; pname: GLenum; const params: PGLint); stdcall;
  glImageTransformParameterfvHP: procedure(target: GLenum; pname: GLenum; const params: PGLfloat); stdcall;
  glGetImageTransformParameterivHP: procedure(target: GLenum; pname: GLenum; params: PGLint); stdcall;
  glGetImageTransformParameterfvHP: procedure(target: GLenum; pname: GLenum; params: PGLfloat); stdcall;

{ GL_IBM_multimode_draw_arrays }
  glMultiModeDrawArraysIBM: procedure(const mode: PGLenum; const first: PGLint; const count: PGLsizei; primcount: GLsizei; modestride: GLint); stdcall;
  glMultiModeDrawElementsIBM: procedure(const mode: PGLenum; const count: PGLsizei; type_: GLenum; const indices: PPointer; primcount: GLsizei; modestride: GLint); stdcall;

{ GL_IBM_static_data }
  glFlushStaticDataIBM: procedure(target: GLenum); stdcall;

{ GL_IBM_vertex_array_lists }
  glColorPointerListIBM: procedure(size: GLint; type_: GLenum; stride: GLint; const pointer: PPointer; ptrstride: GLint); stdcall;
  glSecondaryColorPointerListIBM: procedure(size: GLint; type_: GLenum; stride: GLint; const pointer: PPointer; ptrstride: GLint); stdcall;
  glEdgeFlagPointerListIBM: procedure(stride: GLint; const pointer: PPGLboolean; ptrstride: GLint); stdcall;
  glFogCoordPointerListIBM: procedure(type_: GLenum; stride: GLint; const pointer: PPointer; ptrstride: GLint); stdcall;
  glIndexPointerListIBM: procedure(type_: GLenum; stride: GLint; const pointer: PPointer; ptrstride: GLint); stdcall;
  glNormalPointerListIBM: procedure(type_: GLenum; stride: GLint; const pointer: PPointer; ptrstride: GLint); stdcall;
  glTexCoordPointerListIBM: procedure(size: GLint; type_: GLenum; stride: GLint; const pointer: PPointer; ptrstride: GLint); stdcall;
  glVertexPointerListIBM: procedure(size: GLint; type_: GLenum; stride: GLint; const pointer: PPointer; ptrstride: GLint); stdcall;

{ GL_INGR_blend_func_separate }
  glBlendFuncSeparateINGR: procedure(sfactorRGB: GLenum; dfactorRGB: GLenum; sfactorAlpha: GLenum; dfactorAlpha: GLenum); stdcall;

{ GL_INTEL_map_texture }
  glSyncTextureINTEL: procedure(texture: GLuint); stdcall;
  glUnmapTexture2DINTEL: procedure(texture: GLuint; level: GLint); stdcall;
  glMapTexture2DINTEL: function(texture: GLuint; level: GLint; access: GLbitfield; stride: PGLint; layout: PGLenum): Pointer; stdcall;

{ GL_INTEL_parallel_arrays }
  glVertexPointervINTEL: procedure(size: GLint; type_: GLenum; const pointer: PPointer); stdcall;
  glNormalPointervINTEL: procedure(type_: GLenum; const pointer: PPointer); stdcall;
  glColorPointervINTEL: procedure(size: GLint; type_: GLenum; const pointer: PPointer); stdcall;
  glTexCoordPointervINTEL: procedure(size: GLint; type_: GLenum; const pointer: PPointer); stdcall;

{ GL_MESA_resize_buffers }
  glResizeBuffersMESA: procedure; stdcall;

{ GL_MESA_window_pos }
  glWindowPos2dMESA: procedure(x: GLdouble; y: GLdouble); stdcall;
  glWindowPos2dvMESA: procedure(const v: PGLdouble); stdcall;
  glWindowPos2fMESA: procedure(x: GLfloat; y: GLfloat); stdcall;
  glWindowPos2fvMESA: procedure(const v: PGLfloat); stdcall;
  glWindowPos2iMESA: procedure(x: GLint; y: GLint); stdcall;
  glWindowPos2ivMESA: procedure(const v: PGLint); stdcall;
  glWindowPos2sMESA: procedure(x: GLshort; y: GLshort); stdcall;
  glWindowPos2svMESA: procedure(const v: PGLshort); stdcall;
  glWindowPos3dMESA: procedure(x: GLdouble; y: GLdouble; z: GLdouble); stdcall;
  glWindowPos3dvMESA: procedure(const v: PGLdouble); stdcall;
  glWindowPos3fMESA: procedure(x: GLfloat; y: GLfloat; z: GLfloat); stdcall;
  glWindowPos3fvMESA: procedure(const v: PGLfloat); stdcall;
  glWindowPos3iMESA: procedure(x: GLint; y: GLint; z: GLint); stdcall;
  glWindowPos3ivMESA: procedure(const v: PGLint); stdcall;
  glWindowPos3sMESA: procedure(x: GLshort; y: GLshort; z: GLshort); stdcall;
  glWindowPos3svMESA: procedure(const v: PGLshort); stdcall;
  glWindowPos4dMESA: procedure(x: GLdouble; y: GLdouble; z: GLdouble; w: GLdouble); stdcall;
  glWindowPos4dvMESA: procedure(const v: PGLdouble); stdcall;
  glWindowPos4fMESA: procedure(x: GLfloat; y: GLfloat; z: GLfloat; w: GLfloat); stdcall;
  glWindowPos4fvMESA: procedure(const v: PGLfloat); stdcall;
  glWindowPos4iMESA: procedure(x: GLint; y: GLint; z: GLint; w: GLint); stdcall;
  glWindowPos4ivMESA: procedure(const v: PGLint); stdcall;
  glWindowPos4sMESA: procedure(x: GLshort; y: GLshort; z: GLshort; w: GLshort); stdcall;
  glWindowPos4svMESA: procedure(const v: PGLshort); stdcall;

{ GL_NVX_conditional_render }
  glBeginConditionalRenderNVX: procedure(id: GLuint); stdcall;
  glEndConditionalRenderNVX: procedure; stdcall;

{ GL_NV_bindless_multi_draw_indirect }
  glMultiDrawArraysIndirectBindlessNV: procedure(mode: GLenum; const indirect: Pointer; drawCount: GLsizei; stride: GLsizei; vertexBufferCount: GLint); stdcall;
  glMultiDrawElementsIndirectBindlessNV: procedure(mode: GLenum; type_: GLenum; const indirect: Pointer; drawCount: GLsizei; stride: GLsizei; vertexBufferCount: GLint); stdcall;

{ GL_NV_bindless_texture }
  glGetTextureHandleNV: function(texture: GLuint): GLuint64; stdcall;
  glGetTextureSamplerHandleNV: function(texture: GLuint; sampler: GLuint): GLuint64; stdcall;
  glMakeTextureHandleResidentNV: procedure(handle: GLuint64); stdcall;
  glMakeTextureHandleNonResidentNV: procedure(handle: GLuint64); stdcall;
  glGetImageHandleNV: function(texture: GLuint; level: GLint; layered: GLboolean; layer: GLint; format: GLenum): GLuint64; stdcall;
  glMakeImageHandleResidentNV: procedure(handle: GLuint64; access: GLenum); stdcall;
  glMakeImageHandleNonResidentNV: procedure(handle: GLuint64); stdcall;
  glUniformHandleui64NV: procedure(location: GLint; value: GLuint64); stdcall;
  glUniformHandleui64vNV: procedure(location: GLint; count: GLsizei; const value: PGLuint64); stdcall;
  glProgramUniformHandleui64NV: procedure(program_: GLuint; location: GLint; value: GLuint64); stdcall;
  glProgramUniformHandleui64vNV: procedure(program_: GLuint; location: GLint; count: GLsizei; const values: PGLuint64); stdcall;
  glIsTextureHandleResidentNV: function(handle: GLuint64): GLboolean; stdcall;
  glIsImageHandleResidentNV: function(handle: GLuint64): GLboolean; stdcall;

{ GL_NV_blend_equation_advanced }
  glBlendParameteriNV: procedure(pname: GLenum; value: GLint); stdcall;
  glBlendBarrierNV: procedure; stdcall;

{ GL_NV_conditional_render }
  glBeginConditionalRenderNV: procedure(id: GLuint; mode: GLenum); stdcall;
  glEndConditionalRenderNV: procedure; stdcall;

{ GL_NV_copy_image }
  glCopyImageSubDataNV: procedure(srcName: GLuint; srcTarget: GLenum; srcLevel: GLint; srcX: GLint; srcY: GLint; srcZ: GLint; dstName: GLuint; dstTarget: GLenum; dstLevel: GLint; dstX: GLint; dstY: GLint; dstZ: GLint; width: GLsizei; height: GLsizei; depth: GLsizei); stdcall;

{ GL_NV_depth_buffer_float }
  glDepthRangedNV: procedure(zNear: GLdouble; zFar: GLdouble); stdcall;
  glClearDepthdNV: procedure(depth: GLdouble); stdcall;
  glDepthBoundsdNV: procedure(zmin: GLdouble; zmax: GLdouble); stdcall;

{ GL_NV_draw_texture }
  glDrawTextureNV: procedure(texture: GLuint; sampler: GLuint; x0: GLfloat; y0: GLfloat; x1: GLfloat; y1: GLfloat; z: GLfloat; s0: GLfloat; t0: GLfloat; s1: GLfloat; t1: GLfloat); stdcall;

{ GL_NV_evaluators }
  glMapControlPointsNV: procedure(target: GLenum; index: GLuint; type_: GLenum; ustride: GLsizei; vstride: GLsizei; uorder: GLint; vorder: GLint; packed_: GLboolean; const points: Pointer); stdcall;
  glMapParameterivNV: procedure(target: GLenum; pname: GLenum; const params: PGLint); stdcall;
  glMapParameterfvNV: procedure(target: GLenum; pname: GLenum; const params: PGLfloat); stdcall;
  glGetMapControlPointsNV: procedure(target: GLenum; index: GLuint; type_: GLenum; ustride: GLsizei; vstride: GLsizei; packed_: GLboolean; points: Pointer); stdcall;
  glGetMapParameterivNV: procedure(target: GLenum; pname: GLenum; params: PGLint); stdcall;
  glGetMapParameterfvNV: procedure(target: GLenum; pname: GLenum; params: PGLfloat); stdcall;
  glGetMapAttribParameterivNV: procedure(target: GLenum; index: GLuint; pname: GLenum; params: PGLint); stdcall;
  glGetMapAttribParameterfvNV: procedure(target: GLenum; index: GLuint; pname: GLenum; params: PGLfloat); stdcall;
  glEvalMapsNV: procedure(target: GLenum; mode: GLenum); stdcall;

{ GL_NV_explicit_multisample }
  glGetMultisamplefvNV: procedure(pname: GLenum; index: GLuint; val: PGLfloat); stdcall;
  glSampleMaskIndexedNV: procedure(index: GLuint; mask: GLbitfield); stdcall;
  glTexRenderbufferNV: procedure(target: GLenum; renderbuffer: GLuint); stdcall;

{ GL_NV_fence }
  glDeleteFencesNV: procedure(n: GLsizei; const fences: PGLuint); stdcall;
  glGenFencesNV: procedure(n: GLsizei; fences: PGLuint); stdcall;
  glIsFenceNV: function(fence: GLuint): GLboolean; stdcall;
  glTestFenceNV: function(fence: GLuint): GLboolean; stdcall;
  glGetFenceivNV: procedure(fence: GLuint; pname: GLenum; params: PGLint); stdcall;
  glFinishFenceNV: procedure(fence: GLuint); stdcall;
  glSetFenceNV: procedure(fence: GLuint; condition: GLenum); stdcall;

{ GL_NV_fragment_program }
  glProgramNamedParameter4fNV: procedure(id: GLuint; len: GLsizei; const name: PGLubyte; x: GLfloat; y: GLfloat; z: GLfloat; w: GLfloat); stdcall;
  glProgramNamedParameter4fvNV: procedure(id: GLuint; len: GLsizei; const name: PGLubyte; const v: PGLfloat); stdcall;
  glProgramNamedParameter4dNV: procedure(id: GLuint; len: GLsizei; const name: PGLubyte; x: GLdouble; y: GLdouble; z: GLdouble; w: GLdouble); stdcall;
  glProgramNamedParameter4dvNV: procedure(id: GLuint; len: GLsizei; const name: PGLubyte; const v: PGLdouble); stdcall;
  glGetProgramNamedParameterfvNV: procedure(id: GLuint; len: GLsizei; const name: PGLubyte; params: PGLfloat); stdcall;
  glGetProgramNamedParameterdvNV: procedure(id: GLuint; len: GLsizei; const name: PGLubyte; params: PGLdouble); stdcall;

{ GL_NV_framebuffer_multisample_coverage }
  glRenderbufferStorageMultisampleCoverageNV: procedure(target: GLenum; coverageSamples: GLsizei; colorSamples: GLsizei; internalformat: GLenum; width: GLsizei; height: GLsizei); stdcall;

{ GL_NV_geometry_program4 }
  glProgramVertexLimitNV: procedure(target: GLenum; limit: GLint); stdcall;
  glFramebufferTextureEXT: procedure(target: GLenum; attachment: GLenum; texture: GLuint; level: GLint); stdcall;
  glFramebufferTextureLayerEXT: procedure(target: GLenum; attachment: GLenum; texture: GLuint; level: GLint; layer: GLint); stdcall;
  glFramebufferTextureFaceEXT: procedure(target: GLenum; attachment: GLenum; texture: GLuint; level: GLint; face: GLenum); stdcall;

{ GL_NV_gpu_program4 }
  glProgramLocalParameterI4iNV: procedure(target: GLenum; index: GLuint; x: GLint; y: GLint; z: GLint; w: GLint); stdcall;
  glProgramLocalParameterI4ivNV: procedure(target: GLenum; index: GLuint; const params: PGLint); stdcall;
  glProgramLocalParametersI4ivNV: procedure(target: GLenum; index: GLuint; count: GLsizei; const params: PGLint); stdcall;
  glProgramLocalParameterI4uiNV: procedure(target: GLenum; index: GLuint; x: GLuint; y: GLuint; z: GLuint; w: GLuint); stdcall;
  glProgramLocalParameterI4uivNV: procedure(target: GLenum; index: GLuint; const params: PGLuint); stdcall;
  glProgramLocalParametersI4uivNV: procedure(target: GLenum; index: GLuint; count: GLsizei; const params: PGLuint); stdcall;
  glProgramEnvParameterI4iNV: procedure(target: GLenum; index: GLuint; x: GLint; y: GLint; z: GLint; w: GLint); stdcall;
  glProgramEnvParameterI4ivNV: procedure(target: GLenum; index: GLuint; const params: PGLint); stdcall;
  glProgramEnvParametersI4ivNV: procedure(target: GLenum; index: GLuint; count: GLsizei; const params: PGLint); stdcall;
  glProgramEnvParameterI4uiNV: procedure(target: GLenum; index: GLuint; x: GLuint; y: GLuint; z: GLuint; w: GLuint); stdcall;
  glProgramEnvParameterI4uivNV: procedure(target: GLenum; index: GLuint; const params: PGLuint); stdcall;
  glProgramEnvParametersI4uivNV: procedure(target: GLenum; index: GLuint; count: GLsizei; const params: PGLuint); stdcall;
  glGetProgramLocalParameterIivNV: procedure(target: GLenum; index: GLuint; params: PGLint); stdcall;
  glGetProgramLocalParameterIuivNV: procedure(target: GLenum; index: GLuint; params: PGLuint); stdcall;
  glGetProgramEnvParameterIivNV: procedure(target: GLenum; index: GLuint; params: PGLint); stdcall;
  glGetProgramEnvParameterIuivNV: procedure(target: GLenum; index: GLuint; params: PGLuint); stdcall;

{ GL_NV_gpu_program5 }
  glProgramSubroutineParametersuivNV: procedure(target: GLenum; count: GLsizei; const params: PGLuint); stdcall;
  glGetProgramSubroutineParameteruivNV: procedure(target: GLenum; index: GLuint; param: PGLuint); stdcall;

{ GL_NV_gpu_shader5 }
  glUniform1i64NV: procedure(location: GLint; x: GLint64EXT); stdcall;
  glUniform2i64NV: procedure(location: GLint; x: GLint64EXT; y: GLint64EXT); stdcall;
  glUniform3i64NV: procedure(location: GLint; x: GLint64EXT; y: GLint64EXT; z: GLint64EXT); stdcall;
  glUniform4i64NV: procedure(location: GLint; x: GLint64EXT; y: GLint64EXT; z: GLint64EXT; w: GLint64EXT); stdcall;
  glUniform1i64vNV: procedure(location: GLint; count: GLsizei; const value: PGLint64EXT); stdcall;
  glUniform2i64vNV: procedure(location: GLint; count: GLsizei; const value: PGLint64EXT); stdcall;
  glUniform3i64vNV: procedure(location: GLint; count: GLsizei; const value: PGLint64EXT); stdcall;
  glUniform4i64vNV: procedure(location: GLint; count: GLsizei; const value: PGLint64EXT); stdcall;
  glUniform1ui64NV: procedure(location: GLint; x: GLuint64EXT); stdcall;
  glUniform2ui64NV: procedure(location: GLint; x: GLuint64EXT; y: GLuint64EXT); stdcall;
  glUniform3ui64NV: procedure(location: GLint; x: GLuint64EXT; y: GLuint64EXT; z: GLuint64EXT); stdcall;
  glUniform4ui64NV: procedure(location: GLint; x: GLuint64EXT; y: GLuint64EXT; z: GLuint64EXT; w: GLuint64EXT); stdcall;
  glUniform1ui64vNV: procedure(location: GLint; count: GLsizei; const value: PGLuint64EXT); stdcall;
  glUniform2ui64vNV: procedure(location: GLint; count: GLsizei; const value: PGLuint64EXT); stdcall;
  glUniform3ui64vNV: procedure(location: GLint; count: GLsizei; const value: PGLuint64EXT); stdcall;
  glUniform4ui64vNV: procedure(location: GLint; count: GLsizei; const value: PGLuint64EXT); stdcall;
  glGetUniformi64vNV: procedure(program_: GLuint; location: GLint; params: PGLint64EXT); stdcall;
  glProgramUniform1i64NV: procedure(program_: GLuint; location: GLint; x: GLint64EXT); stdcall;
  glProgramUniform2i64NV: procedure(program_: GLuint; location: GLint; x: GLint64EXT; y: GLint64EXT); stdcall;
  glProgramUniform3i64NV: procedure(program_: GLuint; location: GLint; x: GLint64EXT; y: GLint64EXT; z: GLint64EXT); stdcall;
  glProgramUniform4i64NV: procedure(program_: GLuint; location: GLint; x: GLint64EXT; y: GLint64EXT; z: GLint64EXT; w: GLint64EXT); stdcall;
  glProgramUniform1i64vNV: procedure(program_: GLuint; location: GLint; count: GLsizei; const value: PGLint64EXT); stdcall;
  glProgramUniform2i64vNV: procedure(program_: GLuint; location: GLint; count: GLsizei; const value: PGLint64EXT); stdcall;
  glProgramUniform3i64vNV: procedure(program_: GLuint; location: GLint; count: GLsizei; const value: PGLint64EXT); stdcall;
  glProgramUniform4i64vNV: procedure(program_: GLuint; location: GLint; count: GLsizei; const value: PGLint64EXT); stdcall;
  glProgramUniform1ui64NV: procedure(program_: GLuint; location: GLint; x: GLuint64EXT); stdcall;
  glProgramUniform2ui64NV: procedure(program_: GLuint; location: GLint; x: GLuint64EXT; y: GLuint64EXT); stdcall;
  glProgramUniform3ui64NV: procedure(program_: GLuint; location: GLint; x: GLuint64EXT; y: GLuint64EXT; z: GLuint64EXT); stdcall;
  glProgramUniform4ui64NV: procedure(program_: GLuint; location: GLint; x: GLuint64EXT; y: GLuint64EXT; z: GLuint64EXT; w: GLuint64EXT); stdcall;
  glProgramUniform1ui64vNV: procedure(program_: GLuint; location: GLint; count: GLsizei; const value: PGLuint64EXT); stdcall;
  glProgramUniform2ui64vNV: procedure(program_: GLuint; location: GLint; count: GLsizei; const value: PGLuint64EXT); stdcall;
  glProgramUniform3ui64vNV: procedure(program_: GLuint; location: GLint; count: GLsizei; const value: PGLuint64EXT); stdcall;
  glProgramUniform4ui64vNV: procedure(program_: GLuint; location: GLint; count: GLsizei; const value: PGLuint64EXT); stdcall;

{ GL_NV_half_float }
  glVertex2hNV: procedure(x: GLhalfNV; y: GLhalfNV); stdcall;
  glVertex2hvNV: procedure(const v: PGLhalfNV); stdcall;
  glVertex3hNV: procedure(x: GLhalfNV; y: GLhalfNV; z: GLhalfNV); stdcall;
  glVertex3hvNV: procedure(const v: PGLhalfNV); stdcall;
  glVertex4hNV: procedure(x: GLhalfNV; y: GLhalfNV; z: GLhalfNV; w: GLhalfNV); stdcall;
  glVertex4hvNV: procedure(const v: PGLhalfNV); stdcall;
  glNormal3hNV: procedure(nx: GLhalfNV; ny: GLhalfNV; nz: GLhalfNV); stdcall;
  glNormal3hvNV: procedure(const v: PGLhalfNV); stdcall;
  glColor3hNV: procedure(red: GLhalfNV; green: GLhalfNV; blue: GLhalfNV); stdcall;
  glColor3hvNV: procedure(const v: PGLhalfNV); stdcall;
  glColor4hNV: procedure(red: GLhalfNV; green: GLhalfNV; blue: GLhalfNV; alpha: GLhalfNV); stdcall;
  glColor4hvNV: procedure(const v: PGLhalfNV); stdcall;
  glTexCoord1hNV: procedure(s: GLhalfNV); stdcall;
  glTexCoord1hvNV: procedure(const v: PGLhalfNV); stdcall;
  glTexCoord2hNV: procedure(s: GLhalfNV; t: GLhalfNV); stdcall;
  glTexCoord2hvNV: procedure(const v: PGLhalfNV); stdcall;
  glTexCoord3hNV: procedure(s: GLhalfNV; t: GLhalfNV; r: GLhalfNV); stdcall;
  glTexCoord3hvNV: procedure(const v: PGLhalfNV); stdcall;
  glTexCoord4hNV: procedure(s: GLhalfNV; t: GLhalfNV; r: GLhalfNV; q: GLhalfNV); stdcall;
  glTexCoord4hvNV: procedure(const v: PGLhalfNV); stdcall;
  glMultiTexCoord1hNV: procedure(target: GLenum; s: GLhalfNV); stdcall;
  glMultiTexCoord1hvNV: procedure(target: GLenum; const v: PGLhalfNV); stdcall;
  glMultiTexCoord2hNV: procedure(target: GLenum; s: GLhalfNV; t: GLhalfNV); stdcall;
  glMultiTexCoord2hvNV: procedure(target: GLenum; const v: PGLhalfNV); stdcall;
  glMultiTexCoord3hNV: procedure(target: GLenum; s: GLhalfNV; t: GLhalfNV; r: GLhalfNV); stdcall;
  glMultiTexCoord3hvNV: procedure(target: GLenum; const v: PGLhalfNV); stdcall;
  glMultiTexCoord4hNV: procedure(target: GLenum; s: GLhalfNV; t: GLhalfNV; r: GLhalfNV; q: GLhalfNV); stdcall;
  glMultiTexCoord4hvNV: procedure(target: GLenum; const v: PGLhalfNV); stdcall;
  glFogCoordhNV: procedure(fog: GLhalfNV); stdcall;
  glFogCoordhvNV: procedure(const fog: PGLhalfNV); stdcall;
  glSecondaryColor3hNV: procedure(red: GLhalfNV; green: GLhalfNV; blue: GLhalfNV); stdcall;
  glSecondaryColor3hvNV: procedure(const v: PGLhalfNV); stdcall;
  glVertexWeighthNV: procedure(weight: GLhalfNV); stdcall;
  glVertexWeighthvNV: procedure(const weight: PGLhalfNV); stdcall;
  glVertexAttrib1hNV: procedure(index: GLuint; x: GLhalfNV); stdcall;
  glVertexAttrib1hvNV: procedure(index: GLuint; const v: PGLhalfNV); stdcall;
  glVertexAttrib2hNV: procedure(index: GLuint; x: GLhalfNV; y: GLhalfNV); stdcall;
  glVertexAttrib2hvNV: procedure(index: GLuint; const v: PGLhalfNV); stdcall;
  glVertexAttrib3hNV: procedure(index: GLuint; x: GLhalfNV; y: GLhalfNV; z: GLhalfNV); stdcall;
  glVertexAttrib3hvNV: procedure(index: GLuint; const v: PGLhalfNV); stdcall;
  glVertexAttrib4hNV: procedure(index: GLuint; x: GLhalfNV; y: GLhalfNV; z: GLhalfNV; w: GLhalfNV); stdcall;
  glVertexAttrib4hvNV: procedure(index: GLuint; const v: PGLhalfNV); stdcall;
  glVertexAttribs1hvNV: procedure(index: GLuint; n: GLsizei; const v: PGLhalfNV); stdcall;
  glVertexAttribs2hvNV: procedure(index: GLuint; n: GLsizei; const v: PGLhalfNV); stdcall;
  glVertexAttribs3hvNV: procedure(index: GLuint; n: GLsizei; const v: PGLhalfNV); stdcall;
  glVertexAttribs4hvNV: procedure(index: GLuint; n: GLsizei; const v: PGLhalfNV); stdcall;

{ GL_NV_occlusion_query }
  glGenOcclusionQueriesNV: procedure(n: GLsizei; ids: PGLuint); stdcall;
  glDeleteOcclusionQueriesNV: procedure(n: GLsizei; const ids: PGLuint); stdcall;
  glIsOcclusionQueryNV: function(id: GLuint): GLboolean; stdcall;
  glBeginOcclusionQueryNV: procedure(id: GLuint); stdcall;
  glEndOcclusionQueryNV: procedure; stdcall;
  glGetOcclusionQueryivNV: procedure(id: GLuint; pname: GLenum; params: PGLint); stdcall;
  glGetOcclusionQueryuivNV: procedure(id: GLuint; pname: GLenum; params: PGLuint); stdcall;

{ GL_NV_packed_depth_stencil }

{ GL_NV_parameter_buffer_object }
  glProgramBufferParametersfvNV: procedure(target: GLenum; bindingIndex: GLuint; wordIndex: GLuint; count: GLsizei; const params: PGLfloat); stdcall;
  glProgramBufferParametersIivNV: procedure(target: GLenum; bindingIndex: GLuint; wordIndex: GLuint; count: GLsizei; const params: PGLint); stdcall;
  glProgramBufferParametersIuivNV: procedure(target: GLenum; bindingIndex: GLuint; wordIndex: GLuint; count: GLsizei; const params: PGLuint); stdcall;

{ GL_NV_path_rendering }
  glGenPathsNV: function(range: GLsizei): GLuint; stdcall;
  glDeletePathsNV: procedure(path: GLuint; range: GLsizei); stdcall;
  glIsPathNV: function(path: GLuint): GLboolean; stdcall;
  glPathCommandsNV: procedure(path: GLuint; numCommands: GLsizei; const commands: PGLubyte; numCoords: GLsizei; coordType: GLenum; const coords: Pointer); stdcall;
  glPathCoordsNV: procedure(path: GLuint; numCoords: GLsizei; coordType: GLenum; const coords: Pointer); stdcall;
  glPathSubCommandsNV: procedure(path: GLuint; commandStart: GLsizei; commandsToDelete: GLsizei; numCommands: GLsizei; const commands: PGLubyte; numCoords: GLsizei; coordType: GLenum; const coords: Pointer); stdcall;
  glPathSubCoordsNV: procedure(path: GLuint; coordStart: GLsizei; numCoords: GLsizei; coordType: GLenum; const coords: Pointer); stdcall;
  glPathStringNV: procedure(path: GLuint; format: GLenum; length: GLsizei; const pathString: Pointer); stdcall;
  glPathGlyphsNV: procedure(firstPathName: GLuint; fontTarget: GLenum; const fontName: Pointer; fontStyle: GLbitfield; numGlyphs: GLsizei; type_: GLenum; const charcodes: Pointer; handleMissingGlyphs: GLenum; pathParameterTemplate: GLuint; emScale: GLfloat); stdcall;
  glPathGlyphRangeNV: procedure(firstPathName: GLuint; fontTarget: GLenum; const fontName: Pointer; fontStyle: GLbitfield; firstGlyph: GLuint; numGlyphs: GLsizei; handleMissingGlyphs: GLenum; pathParameterTemplate: GLuint; emScale: GLfloat); stdcall;
  glWeightPathsNV: procedure(resultPath: GLuint; numPaths: GLsizei; const paths: PGLuint; const weights: PGLfloat); stdcall;
  glCopyPathNV: procedure(resultPath: GLuint; srcPath: GLuint); stdcall;
  glInterpolatePathsNV: procedure(resultPath: GLuint; pathA: GLuint; pathB: GLuint; weight: GLfloat); stdcall;
  glTransformPathNV: procedure(resultPath: GLuint; srcPath: GLuint; transformType: GLenum; const transformValues: PGLfloat); stdcall;
  glPathParameterivNV: procedure(path: GLuint; pname: GLenum; const value: PGLint); stdcall;
  glPathParameteriNV: procedure(path: GLuint; pname: GLenum; value: GLint); stdcall;
  glPathParameterfvNV: procedure(path: GLuint; pname: GLenum; const value: PGLfloat); stdcall;
  glPathParameterfNV: procedure(path: GLuint; pname: GLenum; value: GLfloat); stdcall;
  glPathDashArrayNV: procedure(path: GLuint; dashCount: GLsizei; const dashArray: PGLfloat); stdcall;
  glPathStencilFuncNV: procedure(func: GLenum; ref: GLint; mask: GLuint); stdcall;
  glPathStencilDepthOffsetNV: procedure(factor: GLfloat; units: GLfloat); stdcall;
  glStencilFillPathNV: procedure(path: GLuint; fillMode: GLenum; mask: GLuint); stdcall;
  glStencilStrokePathNV: procedure(path: GLuint; reference: GLint; mask: GLuint); stdcall;
  glStencilFillPathInstancedNV: procedure(numPaths: GLsizei; pathNameType: GLenum; const paths: Pointer; pathBase: GLuint; fillMode: GLenum; mask: GLuint; transformType: GLenum; const transformValues: PGLfloat); stdcall;
  glStencilStrokePathInstancedNV: procedure(numPaths: GLsizei; pathNameType: GLenum; const paths: Pointer; pathBase: GLuint; reference: GLint; mask: GLuint; transformType: GLenum; const transformValues: PGLfloat); stdcall;
  glPathCoverDepthFuncNV: procedure(func: GLenum); stdcall;
  glPathColorGenNV: procedure(color: GLenum; genMode: GLenum; colorFormat: GLenum; const coeffs: PGLfloat); stdcall;
  glPathTexGenNV: procedure(texCoordSet: GLenum; genMode: GLenum; components: GLint; const coeffs: PGLfloat); stdcall;
  glPathFogGenNV: procedure(genMode: GLenum); stdcall;
  glCoverFillPathNV: procedure(path: GLuint; coverMode: GLenum); stdcall;
  glCoverStrokePathNV: procedure(path: GLuint; coverMode: GLenum); stdcall;
  glCoverFillPathInstancedNV: procedure(numPaths: GLsizei; pathNameType: GLenum; const paths: Pointer; pathBase: GLuint; coverMode: GLenum; transformType: GLenum; const transformValues: PGLfloat); stdcall;
  glCoverStrokePathInstancedNV: procedure(numPaths: GLsizei; pathNameType: GLenum; const paths: Pointer; pathBase: GLuint; coverMode: GLenum; transformType: GLenum; const transformValues: PGLfloat); stdcall;
  glGetPathParameterivNV: procedure(path: GLuint; pname: GLenum; value: PGLint); stdcall;
  glGetPathParameterfvNV: procedure(path: GLuint; pname: GLenum; value: PGLfloat); stdcall;
  glGetPathCommandsNV: procedure(path: GLuint; commands: PGLubyte); stdcall;
  glGetPathCoordsNV: procedure(path: GLuint; coords: PGLfloat); stdcall;
  glGetPathDashArrayNV: procedure(path: GLuint; dashArray: PGLfloat); stdcall;
  glGetPathMetricsNV: procedure(metricQueryMask: GLbitfield; numPaths: GLsizei; pathNameType: GLenum; const paths: Pointer; pathBase: GLuint; stride: GLsizei; metrics: PGLfloat); stdcall;
  glGetPathMetricRangeNV: procedure(metricQueryMask: GLbitfield; firstPathName: GLuint; numPaths: GLsizei; stride: GLsizei; metrics: PGLfloat); stdcall;
  glGetPathSpacingNV: procedure(pathListMode: GLenum; numPaths: GLsizei; pathNameType: GLenum; const paths: Pointer; pathBase: GLuint; advanceScale: GLfloat; kerningScale: GLfloat; transformType: GLenum; returnedSpacing: PGLfloat); stdcall;
  glGetPathColorGenivNV: procedure(color: GLenum; pname: GLenum; value: PGLint); stdcall;
  glGetPathColorGenfvNV: procedure(color: GLenum; pname: GLenum; value: PGLfloat); stdcall;
  glGetPathTexGenivNV: procedure(texCoordSet: GLenum; pname: GLenum; value: PGLint); stdcall;
  glGetPathTexGenfvNV: procedure(texCoordSet: GLenum; pname: GLenum; value: PGLfloat); stdcall;
  glIsPointInFillPathNV: function(path: GLuint; mask: GLuint; x: GLfloat; y: GLfloat): GLboolean; stdcall;
  glIsPointInStrokePathNV: function(path: GLuint; x: GLfloat; y: GLfloat): GLboolean; stdcall;
  glGetPathLengthNV: function(path: GLuint; startSegment: GLsizei; numSegments: GLsizei): GLfloat; stdcall;
  glPointAlongPathNV: function(path: GLuint; startSegment: GLsizei; numSegments: GLsizei; distance: GLfloat; x: PGLfloat; y: PGLfloat; tangentX: PGLfloat; tangentY: PGLfloat): GLboolean; stdcall;

{ GL_NV_pixel_data_range }
  glPixelDataRangeNV: procedure(target: GLenum; length: GLsizei; const pointer: Pointer); stdcall;
  glFlushPixelDataRangeNV: procedure(target: GLenum); stdcall;

{ GL_NV_point_sprite }
  glPointParameteriNV: procedure(pname: GLenum; param: GLint); stdcall;
  glPointParameterivNV: procedure(pname: GLenum; const params: PGLint); stdcall;

{ GL_NV_present_video }
  glPresentFrameKeyedNV: procedure(video_slot: GLuint; minPresentTime: GLuint64EXT; beginPresentTimeId: GLuint; presentDurationId: GLuint; type_: GLenum; target0: GLenum; fill0: GLuint; key0: GLuint; target1: GLenum; fill1: GLuint; key1: GLuint); stdcall;
  glPresentFrameDualFillNV: procedure(video_slot: GLuint; minPresentTime: GLuint64EXT; beginPresentTimeId: GLuint; presentDurationId: GLuint; type_: GLenum; target0: GLenum; fill0: GLuint; target1: GLenum; fill1: GLuint; target2: GLenum; fill2: GLuint; target3: GLenum; fill3: GLuint); stdcall;
  glGetVideoivNV: procedure(video_slot: GLuint; pname: GLenum; params: PGLint); stdcall;
  glGetVideouivNV: procedure(video_slot: GLuint; pname: GLenum; params: PGLuint); stdcall;
  glGetVideoi64vNV: procedure(video_slot: GLuint; pname: GLenum; params: PGLint64EXT); stdcall;
  glGetVideoui64vNV: procedure(video_slot: GLuint; pname: GLenum; params: PGLuint64EXT); stdcall;

{ GL_NV_primitive_restart }
  glPrimitiveRestartNV: procedure; stdcall;
  glPrimitiveRestartIndexNV: procedure(index: GLuint); stdcall;

{ GL_NV_register_combiners }
  glCombinerParameterfvNV: procedure(pname: GLenum; const params: PGLfloat); stdcall;
  glCombinerParameterfNV: procedure(pname: GLenum; param: GLfloat); stdcall;
  glCombinerParameterivNV: procedure(pname: GLenum; const params: PGLint); stdcall;
  glCombinerParameteriNV: procedure(pname: GLenum; param: GLint); stdcall;
  glCombinerInputNV: procedure(stage: GLenum; portion: GLenum; variable: GLenum; input: GLenum; mapping: GLenum; componentUsage: GLenum); stdcall;
  glCombinerOutputNV: procedure(stage: GLenum; portion: GLenum; abOutput: GLenum; cdOutput: GLenum; sumOutput: GLenum; scale: GLenum; bias: GLenum; abDotProduct: GLboolean; cdDotProduct: GLboolean; muxSum: GLboolean); stdcall;
  glFinalCombinerInputNV: procedure(variable: GLenum; input: GLenum; mapping: GLenum; componentUsage: GLenum); stdcall;
  glGetCombinerInputParameterfvNV: procedure(stage: GLenum; portion: GLenum; variable: GLenum; pname: GLenum; params: PGLfloat); stdcall;
  glGetCombinerInputParameterivNV: procedure(stage: GLenum; portion: GLenum; variable: GLenum; pname: GLenum; params: PGLint); stdcall;
  glGetCombinerOutputParameterfvNV: procedure(stage: GLenum; portion: GLenum; pname: GLenum; params: PGLfloat); stdcall;
  glGetCombinerOutputParameterivNV: procedure(stage: GLenum; portion: GLenum; pname: GLenum; params: PGLint); stdcall;
  glGetFinalCombinerInputParameterfvNV: procedure(variable: GLenum; pname: GLenum; params: PGLfloat); stdcall;
  glGetFinalCombinerInputParameterivNV: procedure(variable: GLenum; pname: GLenum; params: PGLint); stdcall;

{ GL_NV_register_combiners2 }
  glCombinerStageParameterfvNV: procedure(stage: GLenum; pname: GLenum; const params: PGLfloat); stdcall;
  glGetCombinerStageParameterfvNV: procedure(stage: GLenum; pname: GLenum; params: PGLfloat); stdcall;

{ GL_NV_shader_buffer_load }
  glMakeBufferResidentNV: procedure(target: GLenum; access: GLenum); stdcall;
  glMakeBufferNonResidentNV: procedure(target: GLenum); stdcall;
  glIsBufferResidentNV: function(target: GLenum): GLboolean; stdcall;
  glMakeNamedBufferResidentNV: procedure(buffer: GLuint; access: GLenum); stdcall;
  glMakeNamedBufferNonResidentNV: procedure(buffer: GLuint); stdcall;
  glIsNamedBufferResidentNV: function(buffer: GLuint): GLboolean; stdcall;
  glGetBufferParameterui64vNV: procedure(target: GLenum; pname: GLenum; params: PGLuint64EXT); stdcall;
  glGetNamedBufferParameterui64vNV: procedure(buffer: GLuint; pname: GLenum; params: PGLuint64EXT); stdcall;
  glGetIntegerui64vNV: procedure(value: GLenum; result: PGLuint64EXT); stdcall;
  glUniformui64NV: procedure(location: GLint; value: GLuint64EXT); stdcall;
  glUniformui64vNV: procedure(location: GLint; count: GLsizei; const value: PGLuint64EXT); stdcall;
  glGetUniformui64vNV: procedure(program_: GLuint; location: GLint; params: PGLuint64EXT); stdcall;
  glProgramUniformui64NV: procedure(program_: GLuint; location: GLint; value: GLuint64EXT); stdcall;
  glProgramUniformui64vNV: procedure(program_: GLuint; location: GLint; count: GLsizei; const value: PGLuint64EXT); stdcall;

{ GL_NV_texture_barrier }
  glTextureBarrierNV: procedure; stdcall;

{ GL_NV_texture_multisample }
  glTexImage2DMultisampleCoverageNV: procedure(target: GLenum; coverageSamples: GLsizei; colorSamples: GLsizei; internalFormat: GLint; width: GLsizei; height: GLsizei; fixedSampleLocations: GLboolean); stdcall;
  glTexImage3DMultisampleCoverageNV: procedure(target: GLenum; coverageSamples: GLsizei; colorSamples: GLsizei; internalFormat: GLint; width: GLsizei; height: GLsizei; depth: GLsizei; fixedSampleLocations: GLboolean); stdcall;
  glTextureImage2DMultisampleNV: procedure(texture: GLuint; target: GLenum; samples: GLsizei; internalFormat: GLint; width: GLsizei; height: GLsizei; fixedSampleLocations: GLboolean); stdcall;
  glTextureImage3DMultisampleNV: procedure(texture: GLuint; target: GLenum; samples: GLsizei; internalFormat: GLint; width: GLsizei; height: GLsizei; depth: GLsizei; fixedSampleLocations: GLboolean); stdcall;
  glTextureImage2DMultisampleCoverageNV: procedure(texture: GLuint; target: GLenum; coverageSamples: GLsizei; colorSamples: GLsizei; internalFormat: GLint; width: GLsizei; height: GLsizei; fixedSampleLocations: GLboolean); stdcall;
  glTextureImage3DMultisampleCoverageNV: procedure(texture: GLuint; target: GLenum; coverageSamples: GLsizei; colorSamples: GLsizei; internalFormat: GLint; width: GLsizei; height: GLsizei; depth: GLsizei; fixedSampleLocations: GLboolean); stdcall;

{ GL_NV_transform_feedback }
  glBeginTransformFeedbackNV: procedure(primitiveMode: GLenum); stdcall;
  glEndTransformFeedbackNV: procedure; stdcall;
  glTransformFeedbackAttribsNV: procedure(count: GLuint; const attribs: PGLint; bufferMode: GLenum); stdcall;
  glBindBufferRangeNV: procedure(target: GLenum; index: GLuint; buffer: GLuint; offset: GLintptr; size: GLsizeiptr); stdcall;
  glBindBufferOffsetNV: procedure(target: GLenum; index: GLuint; buffer: GLuint; offset: GLintptr); stdcall;
  glBindBufferBaseNV: procedure(target: GLenum; index: GLuint; buffer: GLuint); stdcall;
  glTransformFeedbackVaryingsNV: procedure(program_: GLuint; count: GLsizei; const locations: PGLint; bufferMode: GLenum); stdcall;
  glActiveVaryingNV: procedure(program_: GLuint; const name: PGLchar); stdcall;
  glGetVaryingLocationNV: function(program_: GLuint; const name: PGLchar): GLint; stdcall;
  glGetActiveVaryingNV: procedure(program_: GLuint; index: GLuint; bufSize: GLsizei; length: PGLsizei; size: PGLsizei; type_: PGLenum; name: PGLchar); stdcall;
  glGetTransformFeedbackVaryingNV: procedure(program_: GLuint; index: GLuint; location: PGLint); stdcall;
  glTransformFeedbackStreamAttribsNV: procedure(count: GLsizei; const attribs: PGLint; nbuffers: GLsizei; const bufstreams: PGLint; bufferMode: GLenum); stdcall;

{ GL_NV_transform_feedback2 }
  glBindTransformFeedbackNV: procedure(target: GLenum; id: GLuint); stdcall;
  glDeleteTransformFeedbacksNV: procedure(n: GLsizei; const ids: PGLuint); stdcall;
  glGenTransformFeedbacksNV: procedure(n: GLsizei; ids: PGLuint); stdcall;
  glIsTransformFeedbackNV: function(id: GLuint): GLboolean; stdcall;
  glPauseTransformFeedbackNV: procedure; stdcall;
  glResumeTransformFeedbackNV: procedure; stdcall;
  glDrawTransformFeedbackNV: procedure(mode: GLenum; id: GLuint); stdcall;

{ GL_NV_vdpau_interop }
  glVDPAUInitNV: procedure(const vdpDevice: Pointer; const getProcAddress: Pointer); stdcall;
  glVDPAUFiniNV: procedure; stdcall;
  glVDPAURegisterVideoSurfaceNV: function(const vdpSurface: Pointer; target: GLenum; numTextureNames: GLsizei; const textureNames: PGLuint): GLvdpauSurfaceNV; stdcall;
  glVDPAURegisterOutputSurfaceNV: function(const vdpSurface: Pointer; target: GLenum; numTextureNames: GLsizei; const textureNames: PGLuint): GLvdpauSurfaceNV; stdcall;
  glVDPAUIsSurfaceNV: procedure(surface: GLvdpauSurfaceNV); stdcall;
  glVDPAUUnregisterSurfaceNV: procedure(surface: GLvdpauSurfaceNV); stdcall;
  glVDPAUGetSurfaceivNV: procedure(surface: GLvdpauSurfaceNV; pname: GLenum; bufSize: GLsizei; length: PGLsizei; values: PGLint); stdcall;
  glVDPAUSurfaceAccessNV: procedure(surface: GLvdpauSurfaceNV; access: GLenum); stdcall;
  glVDPAUMapSurfacesNV: procedure(numSurfaces: GLsizei; const surfaces: PGLvdpauSurfaceNV); stdcall;
  glVDPAUUnmapSurfacesNV: procedure(numSurface: GLsizei; const surfaces: PGLvdpauSurfaceNV); stdcall;

{ GL_NV_vertex_array_range }
  glFlushVertexArrayRangeNV: procedure; stdcall;
  glVertexArrayRangeNV: procedure(length: GLsizei; const pointer: Pointer); stdcall;

{ GL_NV_vertex_attrib_integer_64bit }
  glVertexAttribL1i64NV: procedure(index: GLuint; x: GLint64EXT); stdcall;
  glVertexAttribL2i64NV: procedure(index: GLuint; x: GLint64EXT; y: GLint64EXT); stdcall;
  glVertexAttribL3i64NV: procedure(index: GLuint; x: GLint64EXT; y: GLint64EXT; z: GLint64EXT); stdcall;
  glVertexAttribL4i64NV: procedure(index: GLuint; x: GLint64EXT; y: GLint64EXT; z: GLint64EXT; w: GLint64EXT); stdcall;
  glVertexAttribL1i64vNV: procedure(index: GLuint; const v: PGLint64EXT); stdcall;
  glVertexAttribL2i64vNV: procedure(index: GLuint; const v: PGLint64EXT); stdcall;
  glVertexAttribL3i64vNV: procedure(index: GLuint; const v: PGLint64EXT); stdcall;
  glVertexAttribL4i64vNV: procedure(index: GLuint; const v: PGLint64EXT); stdcall;
  glVertexAttribL1ui64NV: procedure(index: GLuint; x: GLuint64EXT); stdcall;
  glVertexAttribL2ui64NV: procedure(index: GLuint; x: GLuint64EXT; y: GLuint64EXT); stdcall;
  glVertexAttribL3ui64NV: procedure(index: GLuint; x: GLuint64EXT; y: GLuint64EXT; z: GLuint64EXT); stdcall;
  glVertexAttribL4ui64NV: procedure(index: GLuint; x: GLuint64EXT; y: GLuint64EXT; z: GLuint64EXT; w: GLuint64EXT); stdcall;
  glVertexAttribL1ui64vNV: procedure(index: GLuint; const v: PGLuint64EXT); stdcall;
  glVertexAttribL2ui64vNV: procedure(index: GLuint; const v: PGLuint64EXT); stdcall;
  glVertexAttribL3ui64vNV: procedure(index: GLuint; const v: PGLuint64EXT); stdcall;
  glVertexAttribL4ui64vNV: procedure(index: GLuint; const v: PGLuint64EXT); stdcall;
  glGetVertexAttribLi64vNV: procedure(index: GLuint; pname: GLenum; params: PGLint64EXT); stdcall;
  glGetVertexAttribLui64vNV: procedure(index: GLuint; pname: GLenum; params: PGLuint64EXT); stdcall;
  glVertexAttribLFormatNV: procedure(index: GLuint; size: GLint; type_: GLenum; stride: GLsizei); stdcall;

{ GL_NV_vertex_buffer_unified_memory }
  glBufferAddressRangeNV: procedure(pname: GLenum; index: GLuint; address: GLuint64EXT; length: GLsizeiptr); stdcall;
  glVertexFormatNV: procedure(size: GLint; type_: GLenum; stride: GLsizei); stdcall;
  glNormalFormatNV: procedure(type_: GLenum; stride: GLsizei); stdcall;
  glColorFormatNV: procedure(size: GLint; type_: GLenum; stride: GLsizei); stdcall;
  glIndexFormatNV: procedure(type_: GLenum; stride: GLsizei); stdcall;
  glTexCoordFormatNV: procedure(size: GLint; type_: GLenum; stride: GLsizei); stdcall;
  glEdgeFlagFormatNV: procedure(stride: GLsizei); stdcall;
  glSecondaryColorFormatNV: procedure(size: GLint; type_: GLenum; stride: GLsizei); stdcall;
  glFogCoordFormatNV: procedure(type_: GLenum; stride: GLsizei); stdcall;
  glVertexAttribFormatNV: procedure(index: GLuint; size: GLint; type_: GLenum; normalized: GLboolean; stride: GLsizei); stdcall;
  glVertexAttribIFormatNV: procedure(index: GLuint; size: GLint; type_: GLenum; stride: GLsizei); stdcall;
  glGetIntegerui64i_vNV: procedure(value: GLenum; index: GLuint; result: PGLuint64EXT); stdcall;

{ GL_NV_vertex_program }
  glAreProgramsResidentNV: function(n: GLsizei; const programs: PGLuint; residences: PGLboolean): GLboolean; stdcall;
  glBindProgramNV: procedure(target: GLenum; id: GLuint); stdcall;
  glDeleteProgramsNV: procedure(n: GLsizei; const programs: PGLuint); stdcall;
  glExecuteProgramNV: procedure(target: GLenum; id: GLuint; const params: PGLfloat); stdcall;
  glGenProgramsNV: procedure(n: GLsizei; programs: PGLuint); stdcall;
  glGetProgramParameterdvNV: procedure(target: GLenum; index: GLuint; pname: GLenum; params: PGLdouble); stdcall;
  glGetProgramParameterfvNV: procedure(target: GLenum; index: GLuint; pname: GLenum; params: PGLfloat); stdcall;
  glGetProgramivNV: procedure(id: GLuint; pname: GLenum; params: PGLint); stdcall;
  glGetProgramStringNV: procedure(id: GLuint; pname: GLenum; program_: PGLubyte); stdcall;
  glGetTrackMatrixivNV: procedure(target: GLenum; address: GLuint; pname: GLenum; params: PGLint); stdcall;
  glGetVertexAttribdvNV: procedure(index: GLuint; pname: GLenum; params: PGLdouble); stdcall;
  glGetVertexAttribfvNV: procedure(index: GLuint; pname: GLenum; params: PGLfloat); stdcall;
  glGetVertexAttribivNV: procedure(index: GLuint; pname: GLenum; params: PGLint); stdcall;
  glGetVertexAttribPointervNV: procedure(index: GLuint; pname: GLenum; pointer: PPointer); stdcall;
  glIsProgramNV: function(id: GLuint): GLboolean; stdcall;
  glLoadProgramNV: procedure(target: GLenum; id: GLuint; len: GLsizei; const program_: PGLubyte); stdcall;
  glProgramParameter4dNV: procedure(target: GLenum; index: GLuint; x: GLdouble; y: GLdouble; z: GLdouble; w: GLdouble); stdcall;
  glProgramParameter4dvNV: procedure(target: GLenum; index: GLuint; const v: PGLdouble); stdcall;
  glProgramParameter4fNV: procedure(target: GLenum; index: GLuint; x: GLfloat; y: GLfloat; z: GLfloat; w: GLfloat); stdcall;
  glProgramParameter4fvNV: procedure(target: GLenum; index: GLuint; const v: PGLfloat); stdcall;
  glProgramParameters4dvNV: procedure(target: GLenum; index: GLuint; count: GLsizei; const v: PGLdouble); stdcall;
  glProgramParameters4fvNV: procedure(target: GLenum; index: GLuint; count: GLsizei; const v: PGLfloat); stdcall;
  glRequestResidentProgramsNV: procedure(n: GLsizei; const programs: PGLuint); stdcall;
  glTrackMatrixNV: procedure(target: GLenum; address: GLuint; matrix: GLenum; transform: GLenum); stdcall;
  glVertexAttribPointerNV: procedure(index: GLuint; fsize: GLint; type_: GLenum; stride: GLsizei; const pointer: Pointer); stdcall;
  glVertexAttrib1dNV: procedure(index: GLuint; x: GLdouble); stdcall;
  glVertexAttrib1dvNV: procedure(index: GLuint; const v: PGLdouble); stdcall;
  glVertexAttrib1fNV: procedure(index: GLuint; x: GLfloat); stdcall;
  glVertexAttrib1fvNV: procedure(index: GLuint; const v: PGLfloat); stdcall;
  glVertexAttrib1sNV: procedure(index: GLuint; x: GLshort); stdcall;
  glVertexAttrib1svNV: procedure(index: GLuint; const v: PGLshort); stdcall;
  glVertexAttrib2dNV: procedure(index: GLuint; x: GLdouble; y: GLdouble); stdcall;
  glVertexAttrib2dvNV: procedure(index: GLuint; const v: PGLdouble); stdcall;
  glVertexAttrib2fNV: procedure(index: GLuint; x: GLfloat; y: GLfloat); stdcall;
  glVertexAttrib2fvNV: procedure(index: GLuint; const v: PGLfloat); stdcall;
  glVertexAttrib2sNV: procedure(index: GLuint; x: GLshort; y: GLshort); stdcall;
  glVertexAttrib2svNV: procedure(index: GLuint; const v: PGLshort); stdcall;
  glVertexAttrib3dNV: procedure(index: GLuint; x: GLdouble; y: GLdouble; z: GLdouble); stdcall;
  glVertexAttrib3dvNV: procedure(index: GLuint; const v: PGLdouble); stdcall;
  glVertexAttrib3fNV: procedure(index: GLuint; x: GLfloat; y: GLfloat; z: GLfloat); stdcall;
  glVertexAttrib3fvNV: procedure(index: GLuint; const v: PGLfloat); stdcall;
  glVertexAttrib3sNV: procedure(index: GLuint; x: GLshort; y: GLshort; z: GLshort); stdcall;
  glVertexAttrib3svNV: procedure(index: GLuint; const v: PGLshort); stdcall;
  glVertexAttrib4dNV: procedure(index: GLuint; x: GLdouble; y: GLdouble; z: GLdouble; w: GLdouble); stdcall;
  glVertexAttrib4dvNV: procedure(index: GLuint; const v: PGLdouble); stdcall;
  glVertexAttrib4fNV: procedure(index: GLuint; x: GLfloat; y: GLfloat; z: GLfloat; w: GLfloat); stdcall;
  glVertexAttrib4fvNV: procedure(index: GLuint; const v: PGLfloat); stdcall;
  glVertexAttrib4sNV: procedure(index: GLuint; x: GLshort; y: GLshort; z: GLshort; w: GLshort); stdcall;
  glVertexAttrib4svNV: procedure(index: GLuint; const v: PGLshort); stdcall;
  glVertexAttrib4ubNV: procedure(index: GLuint; x: GLubyte; y: GLubyte; z: GLubyte; w: GLubyte); stdcall;
  glVertexAttrib4ubvNV: procedure(index: GLuint; const v: PGLubyte); stdcall;
  glVertexAttribs1dvNV: procedure(index: GLuint; count: GLsizei; const v: PGLdouble); stdcall;
  glVertexAttribs1fvNV: procedure(index: GLuint; count: GLsizei; const v: PGLfloat); stdcall;
  glVertexAttribs1svNV: procedure(index: GLuint; count: GLsizei; const v: PGLshort); stdcall;
  glVertexAttribs2dvNV: procedure(index: GLuint; count: GLsizei; const v: PGLdouble); stdcall;
  glVertexAttribs2fvNV: procedure(index: GLuint; count: GLsizei; const v: PGLfloat); stdcall;
  glVertexAttribs2svNV: procedure(index: GLuint; count: GLsizei; const v: PGLshort); stdcall;
  glVertexAttribs3dvNV: procedure(index: GLuint; count: GLsizei; const v: PGLdouble); stdcall;
  glVertexAttribs3fvNV: procedure(index: GLuint; count: GLsizei; const v: PGLfloat); stdcall;
  glVertexAttribs3svNV: procedure(index: GLuint; count: GLsizei; const v: PGLshort); stdcall;
  glVertexAttribs4dvNV: procedure(index: GLuint; count: GLsizei; const v: PGLdouble); stdcall;
  glVertexAttribs4fvNV: procedure(index: GLuint; count: GLsizei; const v: PGLfloat); stdcall;
  glVertexAttribs4svNV: procedure(index: GLuint; count: GLsizei; const v: PGLshort); stdcall;
  glVertexAttribs4ubvNV: procedure(index: GLuint; count: GLsizei; const v: PGLubyte); stdcall;

{ GL_NV_vertex_program4 }
  glVertexAttribI1iEXT: procedure(index: GLuint; x: GLint); stdcall;
  glVertexAttribI2iEXT: procedure(index: GLuint; x: GLint; y: GLint); stdcall;
  glVertexAttribI3iEXT: procedure(index: GLuint; x: GLint; y: GLint; z: GLint); stdcall;
  glVertexAttribI4iEXT: procedure(index: GLuint; x: GLint; y: GLint; z: GLint; w: GLint); stdcall;
  glVertexAttribI1uiEXT: procedure(index: GLuint; x: GLuint); stdcall;
  glVertexAttribI2uiEXT: procedure(index: GLuint; x: GLuint; y: GLuint); stdcall;
  glVertexAttribI3uiEXT: procedure(index: GLuint; x: GLuint; y: GLuint; z: GLuint); stdcall;
  glVertexAttribI4uiEXT: procedure(index: GLuint; x: GLuint; y: GLuint; z: GLuint; w: GLuint); stdcall;
  glVertexAttribI1ivEXT: procedure(index: GLuint; const v: PGLint); stdcall;
  glVertexAttribI2ivEXT: procedure(index: GLuint; const v: PGLint); stdcall;
  glVertexAttribI3ivEXT: procedure(index: GLuint; const v: PGLint); stdcall;
  glVertexAttribI4ivEXT: procedure(index: GLuint; const v: PGLint); stdcall;
  glVertexAttribI1uivEXT: procedure(index: GLuint; const v: PGLuint); stdcall;
  glVertexAttribI2uivEXT: procedure(index: GLuint; const v: PGLuint); stdcall;
  glVertexAttribI3uivEXT: procedure(index: GLuint; const v: PGLuint); stdcall;
  glVertexAttribI4uivEXT: procedure(index: GLuint; const v: PGLuint); stdcall;
  glVertexAttribI4bvEXT: procedure(index: GLuint; const v: PGLbyte); stdcall;
  glVertexAttribI4svEXT: procedure(index: GLuint; const v: PGLshort); stdcall;
  glVertexAttribI4ubvEXT: procedure(index: GLuint; const v: PGLubyte); stdcall;
  glVertexAttribI4usvEXT: procedure(index: GLuint; const v: PGLushort); stdcall;
  glVertexAttribIPointerEXT: procedure(index: GLuint; size: GLint; type_: GLenum; stride: GLsizei; const pointer: Pointer); stdcall;
  glGetVertexAttribIivEXT: procedure(index: GLuint; pname: GLenum; params: PGLint); stdcall;
  glGetVertexAttribIuivEXT: procedure(index: GLuint; pname: GLenum; params: PGLuint); stdcall;

{ GL_NV_video_capture }
  glBeginVideoCaptureNV: procedure(video_capture_slot: GLuint); stdcall;
  glBindVideoCaptureStreamBufferNV: procedure(video_capture_slot: GLuint; stream: GLuint; frame_region: GLenum; offset: GLintptrARB); stdcall;
  glBindVideoCaptureStreamTextureNV: procedure(video_capture_slot: GLuint; stream: GLuint; frame_region: GLenum; target: GLenum; texture: GLuint); stdcall;
  glEndVideoCaptureNV: procedure(video_capture_slot: GLuint); stdcall;
  glGetVideoCaptureivNV: procedure(video_capture_slot: GLuint; pname: GLenum; params: PGLint); stdcall;
  glGetVideoCaptureStreamivNV: procedure(video_capture_slot: GLuint; stream: GLuint; pname: GLenum; params: PGLint); stdcall;
  glGetVideoCaptureStreamfvNV: procedure(video_capture_slot: GLuint; stream: GLuint; pname: GLenum; params: PGLfloat); stdcall;
  glGetVideoCaptureStreamdvNV: procedure(video_capture_slot: GLuint; stream: GLuint; pname: GLenum; params: PGLdouble); stdcall;
  glVideoCaptureNV: function(video_capture_slot: GLuint; sequence_num: PGLuint; capture_time: PGLuint64EXT): GLenum; stdcall;
  glVideoCaptureStreamParameterivNV: procedure(video_capture_slot: GLuint; stream: GLuint; pname: GLenum; const params: PGLint); stdcall;
  glVideoCaptureStreamParameterfvNV: procedure(video_capture_slot: GLuint; stream: GLuint; pname: GLenum; const params: PGLfloat); stdcall;
  glVideoCaptureStreamParameterdvNV: procedure(video_capture_slot: GLuint; stream: GLuint; pname: GLenum; const params: PGLdouble); stdcall;

{ GL_PGI_misc_hints }
  glHintPGI: procedure(target: GLenum; mode: GLint); stdcall;

{ GL_SGIS_detail_texture }
  glDetailTexFuncSGIS: procedure(target: GLenum; n: GLsizei; const points: PGLfloat); stdcall;
  glGetDetailTexFuncSGIS: procedure(target: GLenum; points: PGLfloat); stdcall;

{ GL_SGIS_fog_function }
  glFogFuncSGIS: procedure(n: GLsizei; const points: PGLfloat); stdcall;
  glGetFogFuncSGIS: procedure(points: PGLfloat); stdcall;

{ GL_SGIS_multisample }
  glSampleMaskSGIS: procedure(value: GLclampf; invert: GLboolean); stdcall;
  glSamplePatternSGIS: procedure(pattern: GLenum); stdcall;

{ GL_SGIS_pixel_texture }
  glPixelTexGenParameteriSGIS: procedure(pname: GLenum; param: GLint); stdcall;
  glPixelTexGenParameterivSGIS: procedure(pname: GLenum; const params: PGLint); stdcall;
  glPixelTexGenParameterfSGIS: procedure(pname: GLenum; param: GLfloat); stdcall;
  glPixelTexGenParameterfvSGIS: procedure(pname: GLenum; const params: PGLfloat); stdcall;
  glGetPixelTexGenParameterivSGIS: procedure(pname: GLenum; params: PGLint); stdcall;
  glGetPixelTexGenParameterfvSGIS: procedure(pname: GLenum; params: PGLfloat); stdcall;

{ GL_SGIS_point_parameters }
  glPointParameterfSGIS: procedure(pname: GLenum; param: GLfloat); stdcall;
  glPointParameterfvSGIS: procedure(pname: GLenum; const params: PGLfloat); stdcall;

{ GL_SGIS_sharpen_texture }
  glSharpenTexFuncSGIS: procedure(target: GLenum; n: GLsizei; const points: PGLfloat); stdcall;
  glGetSharpenTexFuncSGIS: procedure(target: GLenum; points: PGLfloat); stdcall;

{ GL_SGIS_texture4D }
  glTexImage4DSGIS: procedure(target: GLenum; level: GLint; internalformat: GLenum; width: GLsizei; height: GLsizei; depth: GLsizei; size4d: GLsizei; border: GLint; format: GLenum; type_: GLenum; const pixels: Pointer); stdcall;
  glTexSubImage4DSGIS: procedure(target: GLenum; level: GLint; xoffset: GLint; yoffset: GLint; zoffset: GLint; woffset: GLint; width: GLsizei; height: GLsizei; depth: GLsizei; size4d: GLsizei; format: GLenum; type_: GLenum; const pixels: Pointer); stdcall;

{ GL_SGIS_texture_color_mask }
  glTextureColorMaskSGIS: procedure(red: GLboolean; green: GLboolean; blue: GLboolean; alpha: GLboolean); stdcall;

{ GL_SGIS_texture_filter4 }
  glGetTexFilterFuncSGIS: procedure(target: GLenum; filter: GLenum; weights: PGLfloat); stdcall;
  glTexFilterFuncSGIS: procedure(target: GLenum; filter: GLenum; n: GLsizei; const weights: PGLfloat); stdcall;

{ GL_SGIX_async }
  glAsyncMarkerSGIX: procedure(marker: GLuint); stdcall;
  glFinishAsyncSGIX: function(markerp: PGLuint): GLint; stdcall;
  glPollAsyncSGIX: function(markerp: PGLuint): GLint; stdcall;
  glGenAsyncMarkersSGIX: function(range: GLsizei): GLuint; stdcall;
  glDeleteAsyncMarkersSGIX: procedure(marker: GLuint; range: GLsizei); stdcall;
  glIsAsyncMarkerSGIX: function(marker: GLuint): GLboolean; stdcall;

{ GL_SGIX_flush_raster }
  glFlushRasterSGIX: procedure; stdcall;

{ GL_SGIX_fragment_lighting }
  glFragmentColorMaterialSGIX: procedure(face: GLenum; mode: GLenum); stdcall;
  glFragmentLightfSGIX: procedure(light: GLenum; pname: GLenum; param: GLfloat); stdcall;
  glFragmentLightfvSGIX: procedure(light: GLenum; pname: GLenum; const params: PGLfloat); stdcall;
  glFragmentLightiSGIX: procedure(light: GLenum; pname: GLenum; param: GLint); stdcall;
  glFragmentLightivSGIX: procedure(light: GLenum; pname: GLenum; const params: PGLint); stdcall;
  glFragmentLightModelfSGIX: procedure(pname: GLenum; param: GLfloat); stdcall;
  glFragmentLightModelfvSGIX: procedure(pname: GLenum; const params: PGLfloat); stdcall;
  glFragmentLightModeliSGIX: procedure(pname: GLenum; param: GLint); stdcall;
  glFragmentLightModelivSGIX: procedure(pname: GLenum; const params: PGLint); stdcall;
  glFragmentMaterialfSGIX: procedure(face: GLenum; pname: GLenum; param: GLfloat); stdcall;
  glFragmentMaterialfvSGIX: procedure(face: GLenum; pname: GLenum; const params: PGLfloat); stdcall;
  glFragmentMaterialiSGIX: procedure(face: GLenum; pname: GLenum; param: GLint); stdcall;
  glFragmentMaterialivSGIX: procedure(face: GLenum; pname: GLenum; const params: PGLint); stdcall;
  glGetFragmentLightfvSGIX: procedure(light: GLenum; pname: GLenum; params: PGLfloat); stdcall;
  glGetFragmentLightivSGIX: procedure(light: GLenum; pname: GLenum; params: PGLint); stdcall;
  glGetFragmentMaterialfvSGIX: procedure(face: GLenum; pname: GLenum; params: PGLfloat); stdcall;
  glGetFragmentMaterialivSGIX: procedure(face: GLenum; pname: GLenum; params: PGLint); stdcall;
  glLightEnviSGIX: procedure(pname: GLenum; param: GLint); stdcall;

{ GL_SGIX_framezoom }
  glFrameZoomSGIX: procedure(factor: GLint); stdcall;

{ GL_SGIX_igloo_interface }
  glIglooInterfaceSGIX: procedure(pname: GLenum; const params: Pointer); stdcall;

{ GL_SGIX_instruments }
  glGetInstrumentsSGIX: function: GLint; stdcall;
  glInstrumentsBufferSGIX: procedure(size: GLsizei; buffer: PGLint); stdcall;
  glPollInstrumentsSGIX: function(marker_p: PGLint): GLint; stdcall;
  glReadInstrumentsSGIX: procedure(marker: GLint); stdcall;
  glStartInstrumentsSGIX: procedure; stdcall;
  glStopInstrumentsSGIX: procedure(marker: GLint); stdcall;

{ GL_SGIX_list_priority }
  glGetListParameterfvSGIX: procedure(list: GLuint; pname: GLenum; params: PGLfloat); stdcall;
  glGetListParameterivSGIX: procedure(list: GLuint; pname: GLenum; params: PGLint); stdcall;
  glListParameterfSGIX: procedure(list: GLuint; pname: GLenum; param: GLfloat); stdcall;
  glListParameterfvSGIX: procedure(list: GLuint; pname: GLenum; const params: PGLfloat); stdcall;
  glListParameteriSGIX: procedure(list: GLuint; pname: GLenum; param: GLint); stdcall;
  glListParameterivSGIX: procedure(list: GLuint; pname: GLenum; const params: PGLint); stdcall;

{ GL_SGIX_pixel_texture }
  glPixelTexGenSGIX: procedure(mode: GLenum); stdcall;

{ GL_SGIX_polynomial_ffd }
  glDeformationMap3dSGIX: procedure(target: GLenum; u1: GLdouble; u2: GLdouble; ustride: GLint; uorder: GLint; v1: GLdouble; v2: GLdouble; vstride: GLint; vorder: GLint; w1: GLdouble; w2: GLdouble; wstride: GLint; worder: GLint; const points: PGLdouble); stdcall;
  glDeformationMap3fSGIX: procedure(target: GLenum; u1: GLfloat; u2: GLfloat; ustride: GLint; uorder: GLint; v1: GLfloat; v2: GLfloat; vstride: GLint; vorder: GLint; w1: GLfloat; w2: GLfloat; wstride: GLint; worder: GLint; const points: PGLfloat); stdcall;
  glDeformSGIX: procedure(mask: GLbitfield); stdcall;
  glLoadIdentityDeformationMapSGIX: procedure(mask: GLbitfield); stdcall;

{ GL_SGIX_reference_plane }
  glReferencePlaneSGIX: procedure(const equation: PGLdouble); stdcall;

{ GL_SGIX_sprite }
  glSpriteParameterfSGIX: procedure(pname: GLenum; param: GLfloat); stdcall;
  glSpriteParameterfvSGIX: procedure(pname: GLenum; const params: PGLfloat); stdcall;
  glSpriteParameteriSGIX: procedure(pname: GLenum; param: GLint); stdcall;
  glSpriteParameterivSGIX: procedure(pname: GLenum; const params: PGLint); stdcall;

{ GL_SGIX_tag_sample_buffer }
  glTagSampleBufferSGIX: procedure; stdcall;

{ GL_SGI_color_table }
  glColorTableSGI: procedure(target: GLenum; internalformat: GLenum; width: GLsizei; format: GLenum; type_: GLenum; const table: Pointer); stdcall;
  glColorTableParameterfvSGI: procedure(target: GLenum; pname: GLenum; const params: PGLfloat); stdcall;
  glColorTableParameterivSGI: procedure(target: GLenum; pname: GLenum; const params: PGLint); stdcall;
  glCopyColorTableSGI: procedure(target: GLenum; internalformat: GLenum; x: GLint; y: GLint; width: GLsizei); stdcall;
  glGetColorTableSGI: procedure(target: GLenum; format: GLenum; type_: GLenum; table: Pointer); stdcall;
  glGetColorTableParameterfvSGI: procedure(target: GLenum; pname: GLenum; params: PGLfloat); stdcall;
  glGetColorTableParameterivSGI: procedure(target: GLenum; pname: GLenum; params: PGLint); stdcall;

{ GL_SUNX_constant_data }
  glFinishTextureSUNX: procedure; stdcall;

{ GL_SUN_global_alpha }
  glGlobalAlphaFactorbSUN: procedure(factor: GLbyte); stdcall;
  glGlobalAlphaFactorsSUN: procedure(factor: GLshort); stdcall;
  glGlobalAlphaFactoriSUN: procedure(factor: GLint); stdcall;
  glGlobalAlphaFactorfSUN: procedure(factor: GLfloat); stdcall;
  glGlobalAlphaFactordSUN: procedure(factor: GLdouble); stdcall;
  glGlobalAlphaFactorubSUN: procedure(factor: GLubyte); stdcall;
  glGlobalAlphaFactorusSUN: procedure(factor: GLushort); stdcall;
  glGlobalAlphaFactoruiSUN: procedure(factor: GLuint); stdcall;

{ GL_SUN_mesh_array }
  glDrawMeshArraysSUN: procedure(mode: GLenum; first: GLint; count: GLsizei; width: GLsizei); stdcall;

{ GL_SUN_triangle_list }
  glReplacementCodeuiSUN: procedure(code: GLuint); stdcall;
  glReplacementCodeusSUN: procedure(code: GLushort); stdcall;
  glReplacementCodeubSUN: procedure(code: GLubyte); stdcall;
  glReplacementCodeuivSUN: procedure(const code: PGLuint); stdcall;
  glReplacementCodeusvSUN: procedure(const code: PGLushort); stdcall;
  glReplacementCodeubvSUN: procedure(const code: PGLubyte); stdcall;
  glReplacementCodePointerSUN: procedure(type_: GLenum; stride: GLsizei; const pointer: PPointer); stdcall;

{ GL_SUN_vertex }
  glColor4ubVertex2fSUN: procedure(r: GLubyte; g: GLubyte; b: GLubyte; a: GLubyte; x: GLfloat; y: GLfloat); stdcall;
  glColor4ubVertex2fvSUN: procedure(const c: PGLubyte; const v: PGLfloat); stdcall;
  glColor4ubVertex3fSUN: procedure(r: GLubyte; g: GLubyte; b: GLubyte; a: GLubyte; x: GLfloat; y: GLfloat; z: GLfloat); stdcall;
  glColor4ubVertex3fvSUN: procedure(const c: PGLubyte; const v: PGLfloat); stdcall;
  glColor3fVertex3fSUN: procedure(r: GLfloat; g: GLfloat; b: GLfloat; x: GLfloat; y: GLfloat; z: GLfloat); stdcall;
  glColor3fVertex3fvSUN: procedure(const c: PGLfloat; const v: PGLfloat); stdcall;
  glNormal3fVertex3fSUN: procedure(nx: GLfloat; ny: GLfloat; nz: GLfloat; x: GLfloat; y: GLfloat; z: GLfloat); stdcall;
  glNormal3fVertex3fvSUN: procedure(const n: PGLfloat; const v: PGLfloat); stdcall;
  glColor4fNormal3fVertex3fSUN: procedure(r: GLfloat; g: GLfloat; b: GLfloat; a: GLfloat; nx: GLfloat; ny: GLfloat; nz: GLfloat; x: GLfloat; y: GLfloat; z: GLfloat); stdcall;
  glColor4fNormal3fVertex3fvSUN: procedure(const c: PGLfloat; const n: PGLfloat; const v: PGLfloat); stdcall;
  glTexCoord2fVertex3fSUN: procedure(s: GLfloat; t: GLfloat; x: GLfloat; y: GLfloat; z: GLfloat); stdcall;
  glTexCoord2fVertex3fvSUN: procedure(const tc: PGLfloat; const v: PGLfloat); stdcall;
  glTexCoord4fVertex4fSUN: procedure(s: GLfloat; t: GLfloat; p: GLfloat; q: GLfloat; x: GLfloat; y: GLfloat; z: GLfloat; w: GLfloat); stdcall;
  glTexCoord4fVertex4fvSUN: procedure(const tc: PGLfloat; const v: PGLfloat); stdcall;
  glTexCoord2fColor4ubVertex3fSUN: procedure(s: GLfloat; t: GLfloat; r: GLubyte; g: GLubyte; b: GLubyte; a: GLubyte; x: GLfloat; y: GLfloat; z: GLfloat); stdcall;
  glTexCoord2fColor4ubVertex3fvSUN: procedure(const tc: PGLfloat; const c: PGLubyte; const v: PGLfloat); stdcall;
  glTexCoord2fColor3fVertex3fSUN: procedure(s: GLfloat; t: GLfloat; r: GLfloat; g: GLfloat; b: GLfloat; x: GLfloat; y: GLfloat; z: GLfloat); stdcall;
  glTexCoord2fColor3fVertex3fvSUN: procedure(const tc: PGLfloat; const c: PGLfloat; const v: PGLfloat); stdcall;
  glTexCoord2fNormal3fVertex3fSUN: procedure(s: GLfloat; t: GLfloat; nx: GLfloat; ny: GLfloat; nz: GLfloat; x: GLfloat; y: GLfloat; z: GLfloat); stdcall;
  glTexCoord2fNormal3fVertex3fvSUN: procedure(const tc: PGLfloat; const n: PGLfloat; const v: PGLfloat); stdcall;
  glTexCoord2fColor4fNormal3fVertex3fSUN: procedure(s: GLfloat; t: GLfloat; r: GLfloat; g: GLfloat; b: GLfloat; a: GLfloat; nx: GLfloat; ny: GLfloat; nz: GLfloat; x: GLfloat; y: GLfloat; z: GLfloat); stdcall;
  glTexCoord2fColor4fNormal3fVertex3fvSUN: procedure(const tc: PGLfloat; const c: PGLfloat; const n: PGLfloat; const v: PGLfloat); stdcall;
  glTexCoord4fColor4fNormal3fVertex4fSUN: procedure(s: GLfloat; t: GLfloat; p: GLfloat; q: GLfloat; r: GLfloat; g: GLfloat; b: GLfloat; a: GLfloat; nx: GLfloat; ny: GLfloat; nz: GLfloat; x: GLfloat; y: GLfloat; z: GLfloat; w: GLfloat); stdcall;
  glTexCoord4fColor4fNormal3fVertex4fvSUN: procedure(const tc: PGLfloat; const c: PGLfloat; const n: PGLfloat; const v: PGLfloat); stdcall;
  glReplacementCodeuiVertex3fSUN: procedure(rc: GLuint; x: GLfloat; y: GLfloat; z: GLfloat); stdcall;
  glReplacementCodeuiVertex3fvSUN: procedure(const rc: PGLuint; const v: PGLfloat); stdcall;
  glReplacementCodeuiColor4ubVertex3fSUN: procedure(rc: GLuint; r: GLubyte; g: GLubyte; b: GLubyte; a: GLubyte; x: GLfloat; y: GLfloat; z: GLfloat); stdcall;
  glReplacementCodeuiColor4ubVertex3fvSUN: procedure(const rc: PGLuint; const c: PGLubyte; const v: PGLfloat); stdcall;
  glReplacementCodeuiColor3fVertex3fSUN: procedure(rc: GLuint; r: GLfloat; g: GLfloat; b: GLfloat; x: GLfloat; y: GLfloat; z: GLfloat); stdcall;
  glReplacementCodeuiColor3fVertex3fvSUN: procedure(const rc: PGLuint; const c: PGLfloat; const v: PGLfloat); stdcall;
  glReplacementCodeuiNormal3fVertex3fSUN: procedure(rc: GLuint; nx: GLfloat; ny: GLfloat; nz: GLfloat; x: GLfloat; y: GLfloat; z: GLfloat); stdcall;
  glReplacementCodeuiNormal3fVertex3fvSUN: procedure(const rc: PGLuint; const n: PGLfloat; const v: PGLfloat); stdcall;
  glReplacementCodeuiColor4fNormal3fVertex3fSUN: procedure(rc: GLuint; r: GLfloat; g: GLfloat; b: GLfloat; a: GLfloat; nx: GLfloat; ny: GLfloat; nz: GLfloat; x: GLfloat; y: GLfloat; z: GLfloat); stdcall;
  glReplacementCodeuiColor4fNormal3fVertex3fvSUN: procedure(const rc: PGLuint; const c: PGLfloat; const n: PGLfloat; const v: PGLfloat); stdcall;
  glReplacementCodeuiTexCoord2fVertex3fSUN: procedure(rc: GLuint; s: GLfloat; t: GLfloat; x: GLfloat; y: GLfloat; z: GLfloat); stdcall;
  glReplacementCodeuiTexCoord2fVertex3fvSUN: procedure(const rc: PGLuint; const tc: PGLfloat; const v: PGLfloat); stdcall;
  glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN: procedure(rc: GLuint; s: GLfloat; t: GLfloat; nx: GLfloat; ny: GLfloat; nz: GLfloat; x: GLfloat; y: GLfloat; z: GLfloat); stdcall;
  glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN: procedure(const rc: PGLuint; const tc: PGLfloat; const n: PGLfloat; const v: PGLfloat); stdcall;
  glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN: procedure(rc: GLuint; s: GLfloat; t: GLfloat; r: GLfloat; g: GLfloat; b: GLfloat; a: GLfloat; nx: GLfloat; ny: GLfloat; nz: GLfloat; x: GLfloat; y: GLfloat; z: GLfloat); stdcall;
  glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN: procedure(const rc: PGLuint; const tc: PGLfloat; const c: PGLfloat; const n: PGLfloat; const v: PGLfloat); stdcall;

procedure InitOpenGLext;

implementation

procedure InitOpenGLext;
begin

  glDrawRangeElements := wglGetProcAddress('glDrawRangeElements');
  glTexImage3D := wglGetProcAddress('glTexImage3D');
  glTexSubImage3D := wglGetProcAddress('glTexSubImage3D');
  glCopyTexSubImage3D := wglGetProcAddress('glCopyTexSubImage3D');
  glActiveTexture := wglGetProcAddress('glActiveTexture');
  glSampleCoverage := wglGetProcAddress('glSampleCoverage');
  glCompressedTexImage3D := wglGetProcAddress('glCompressedTexImage3D');
  glCompressedTexImage2D := wglGetProcAddress('glCompressedTexImage2D');
  glCompressedTexImage1D := wglGetProcAddress('glCompressedTexImage1D');
  glCompressedTexSubImage3D := wglGetProcAddress('glCompressedTexSubImage3D');
  glCompressedTexSubImage2D := wglGetProcAddress('glCompressedTexSubImage2D');
  glCompressedTexSubImage1D := wglGetProcAddress('glCompressedTexSubImage1D');
  glGetCompressedTexImage := wglGetProcAddress('glGetCompressedTexImage');
  glClientActiveTexture := wglGetProcAddress('glClientActiveTexture');
  glMultiTexCoord1d := wglGetProcAddress('glMultiTexCoord1d');
  glMultiTexCoord1dv := wglGetProcAddress('glMultiTexCoord1dv');
  glMultiTexCoord1f := wglGetProcAddress('glMultiTexCoord1f');
  glMultiTexCoord1fv := wglGetProcAddress('glMultiTexCoord1fv');
  glMultiTexCoord1i := wglGetProcAddress('glMultiTexCoord1i');
  glMultiTexCoord1iv := wglGetProcAddress('glMultiTexCoord1iv');
  glMultiTexCoord1s := wglGetProcAddress('glMultiTexCoord1s');
  glMultiTexCoord1sv := wglGetProcAddress('glMultiTexCoord1sv');
  glMultiTexCoord2d := wglGetProcAddress('glMultiTexCoord2d');
  glMultiTexCoord2dv := wglGetProcAddress('glMultiTexCoord2dv');
  glMultiTexCoord2f := wglGetProcAddress('glMultiTexCoord2f');
  glMultiTexCoord2fv := wglGetProcAddress('glMultiTexCoord2fv');
  glMultiTexCoord2i := wglGetProcAddress('glMultiTexCoord2i');
  glMultiTexCoord2iv := wglGetProcAddress('glMultiTexCoord2iv');
  glMultiTexCoord2s := wglGetProcAddress('glMultiTexCoord2s');
  glMultiTexCoord2sv := wglGetProcAddress('glMultiTexCoord2sv');
  glMultiTexCoord3d := wglGetProcAddress('glMultiTexCoord3d');
  glMultiTexCoord3dv := wglGetProcAddress('glMultiTexCoord3dv');
  glMultiTexCoord3f := wglGetProcAddress('glMultiTexCoord3f');
  glMultiTexCoord3fv := wglGetProcAddress('glMultiTexCoord3fv');
  glMultiTexCoord3i := wglGetProcAddress('glMultiTexCoord3i');
  glMultiTexCoord3iv := wglGetProcAddress('glMultiTexCoord3iv');
  glMultiTexCoord3s := wglGetProcAddress('glMultiTexCoord3s');
  glMultiTexCoord3sv := wglGetProcAddress('glMultiTexCoord3sv');
  glMultiTexCoord4d := wglGetProcAddress('glMultiTexCoord4d');
  glMultiTexCoord4dv := wglGetProcAddress('glMultiTexCoord4dv');
  glMultiTexCoord4f := wglGetProcAddress('glMultiTexCoord4f');
  glMultiTexCoord4fv := wglGetProcAddress('glMultiTexCoord4fv');
  glMultiTexCoord4i := wglGetProcAddress('glMultiTexCoord4i');
  glMultiTexCoord4iv := wglGetProcAddress('glMultiTexCoord4iv');
  glMultiTexCoord4s := wglGetProcAddress('glMultiTexCoord4s');
  glMultiTexCoord4sv := wglGetProcAddress('glMultiTexCoord4sv');
  glLoadTransposeMatrixf := wglGetProcAddress('glLoadTransposeMatrixf');
  glLoadTransposeMatrixd := wglGetProcAddress('glLoadTransposeMatrixd');
  glMultTransposeMatrixf := wglGetProcAddress('glMultTransposeMatrixf');
  glMultTransposeMatrixd := wglGetProcAddress('glMultTransposeMatrixd');
  glBlendFuncSeparate := wglGetProcAddress('glBlendFuncSeparate');
  glMultiDrawArrays := wglGetProcAddress('glMultiDrawArrays');
  glMultiDrawElements := wglGetProcAddress('glMultiDrawElements');
  glPointParameterf := wglGetProcAddress('glPointParameterf');
  glPointParameterfv := wglGetProcAddress('glPointParameterfv');
  glPointParameteri := wglGetProcAddress('glPointParameteri');
  glPointParameteriv := wglGetProcAddress('glPointParameteriv');
  glFogCoordf := wglGetProcAddress('glFogCoordf');
  glFogCoordfv := wglGetProcAddress('glFogCoordfv');
  glFogCoordd := wglGetProcAddress('glFogCoordd');
  glFogCoorddv := wglGetProcAddress('glFogCoorddv');
  glFogCoordPointer := wglGetProcAddress('glFogCoordPointer');
  glSecondaryColor3b := wglGetProcAddress('glSecondaryColor3b');
  glSecondaryColor3bv := wglGetProcAddress('glSecondaryColor3bv');
  glSecondaryColor3d := wglGetProcAddress('glSecondaryColor3d');
  glSecondaryColor3dv := wglGetProcAddress('glSecondaryColor3dv');
  glSecondaryColor3f := wglGetProcAddress('glSecondaryColor3f');
  glSecondaryColor3fv := wglGetProcAddress('glSecondaryColor3fv');
  glSecondaryColor3i := wglGetProcAddress('glSecondaryColor3i');
  glSecondaryColor3iv := wglGetProcAddress('glSecondaryColor3iv');
  glSecondaryColor3s := wglGetProcAddress('glSecondaryColor3s');
  glSecondaryColor3sv := wglGetProcAddress('glSecondaryColor3sv');
  glSecondaryColor3ub := wglGetProcAddress('glSecondaryColor3ub');
  glSecondaryColor3ubv := wglGetProcAddress('glSecondaryColor3ubv');
  glSecondaryColor3ui := wglGetProcAddress('glSecondaryColor3ui');
  glSecondaryColor3uiv := wglGetProcAddress('glSecondaryColor3uiv');
  glSecondaryColor3us := wglGetProcAddress('glSecondaryColor3us');
  glSecondaryColor3usv := wglGetProcAddress('glSecondaryColor3usv');
  glSecondaryColorPointer := wglGetProcAddress('glSecondaryColorPointer');
  glWindowPos2d := wglGetProcAddress('glWindowPos2d');
  glWindowPos2dv := wglGetProcAddress('glWindowPos2dv');
  glWindowPos2f := wglGetProcAddress('glWindowPos2f');
  glWindowPos2fv := wglGetProcAddress('glWindowPos2fv');
  glWindowPos2i := wglGetProcAddress('glWindowPos2i');
  glWindowPos2iv := wglGetProcAddress('glWindowPos2iv');
  glWindowPos2s := wglGetProcAddress('glWindowPos2s');
  glWindowPos2sv := wglGetProcAddress('glWindowPos2sv');
  glWindowPos3d := wglGetProcAddress('glWindowPos3d');
  glWindowPos3dv := wglGetProcAddress('glWindowPos3dv');
  glWindowPos3f := wglGetProcAddress('glWindowPos3f');
  glWindowPos3fv := wglGetProcAddress('glWindowPos3fv');
  glWindowPos3i := wglGetProcAddress('glWindowPos3i');
  glWindowPos3iv := wglGetProcAddress('glWindowPos3iv');
  glWindowPos3s := wglGetProcAddress('glWindowPos3s');
  glWindowPos3sv := wglGetProcAddress('glWindowPos3sv');
  glBlendColor := wglGetProcAddress('glBlendColor');
  glBlendEquation := wglGetProcAddress('glBlendEquation');
  glGenQueries := wglGetProcAddress('glGenQueries');
  glDeleteQueries := wglGetProcAddress('glDeleteQueries');
  glIsQuery := wglGetProcAddress('glIsQuery');
  glBeginQuery := wglGetProcAddress('glBeginQuery');
  glEndQuery := wglGetProcAddress('glEndQuery');
  glGetQueryiv := wglGetProcAddress('glGetQueryiv');
  glGetQueryObjectiv := wglGetProcAddress('glGetQueryObjectiv');
  glGetQueryObjectuiv := wglGetProcAddress('glGetQueryObjectuiv');
  glBindBuffer := wglGetProcAddress('glBindBuffer');
  glDeleteBuffers := wglGetProcAddress('glDeleteBuffers');
  glGenBuffers := wglGetProcAddress('glGenBuffers');
  glIsBuffer := wglGetProcAddress('glIsBuffer');
  glBufferData := wglGetProcAddress('glBufferData');
  glBufferSubData := wglGetProcAddress('glBufferSubData');
  glGetBufferSubData := wglGetProcAddress('glGetBufferSubData');
  glMapBuffer := wglGetProcAddress('glMapBuffer');
  glUnmapBuffer := wglGetProcAddress('glUnmapBuffer');
  glGetBufferParameteriv := wglGetProcAddress('glGetBufferParameteriv');
  glGetBufferPointerv := wglGetProcAddress('glGetBufferPointerv');
  glBlendEquationSeparate := wglGetProcAddress('glBlendEquationSeparate');
  glDrawBuffers := wglGetProcAddress('glDrawBuffers');
  glStencilOpSeparate := wglGetProcAddress('glStencilOpSeparate');
  glStencilFuncSeparate := wglGetProcAddress('glStencilFuncSeparate');
  glStencilMaskSeparate := wglGetProcAddress('glStencilMaskSeparate');
  glAttachShader := wglGetProcAddress('glAttachShader');
  glBindAttribLocation := wglGetProcAddress('glBindAttribLocation');
  glCompileShader := wglGetProcAddress('glCompileShader');
  glCreateProgram := wglGetProcAddress('glCreateProgram');
  glCreateShader := wglGetProcAddress('glCreateShader');
  glDeleteProgram := wglGetProcAddress('glDeleteProgram');
  glDeleteShader := wglGetProcAddress('glDeleteShader');
  glDetachShader := wglGetProcAddress('glDetachShader');
  glDisableVertexAttribArray := wglGetProcAddress('glDisableVertexAttribArray');
  glEnableVertexAttribArray := wglGetProcAddress('glEnableVertexAttribArray');
  glGetActiveAttrib := wglGetProcAddress('glGetActiveAttrib');
  glGetActiveUniform := wglGetProcAddress('glGetActiveUniform');
  glGetAttachedShaders := wglGetProcAddress('glGetAttachedShaders');
  glGetAttribLocation := wglGetProcAddress('glGetAttribLocation');
  glGetProgramiv := wglGetProcAddress('glGetProgramiv');
  glGetProgramInfoLog := wglGetProcAddress('glGetProgramInfoLog');
  glGetShaderiv := wglGetProcAddress('glGetShaderiv');
  glGetShaderInfoLog := wglGetProcAddress('glGetShaderInfoLog');
  glGetShaderSource := wglGetProcAddress('glGetShaderSource');
  glGetUniformLocation := wglGetProcAddress('glGetUniformLocation');
  glGetUniformfv := wglGetProcAddress('glGetUniformfv');
  glGetUniformiv := wglGetProcAddress('glGetUniformiv');
  glGetVertexAttribdv := wglGetProcAddress('glGetVertexAttribdv');
  glGetVertexAttribfv := wglGetProcAddress('glGetVertexAttribfv');
  glGetVertexAttribiv := wglGetProcAddress('glGetVertexAttribiv');
  glGetVertexAttribPointerv := wglGetProcAddress('glGetVertexAttribPointerv');
  glIsProgram := wglGetProcAddress('glIsProgram');
  glIsShader := wglGetProcAddress('glIsShader');
  glLinkProgram := wglGetProcAddress('glLinkProgram');
  glShaderSource := wglGetProcAddress('glShaderSource');
  glUseProgram := wglGetProcAddress('glUseProgram');
  glUniform1f := wglGetProcAddress('glUniform1f');
  glUniform2f := wglGetProcAddress('glUniform2f');
  glUniform3f := wglGetProcAddress('glUniform3f');
  glUniform4f := wglGetProcAddress('glUniform4f');
  glUniform1i := wglGetProcAddress('glUniform1i');
  glUniform2i := wglGetProcAddress('glUniform2i');
  glUniform3i := wglGetProcAddress('glUniform3i');
  glUniform4i := wglGetProcAddress('glUniform4i');
  glUniform1fv := wglGetProcAddress('glUniform1fv');
  glUniform2fv := wglGetProcAddress('glUniform2fv');
  glUniform3fv := wglGetProcAddress('glUniform3fv');
  glUniform4fv := wglGetProcAddress('glUniform4fv');
  glUniform1iv := wglGetProcAddress('glUniform1iv');
  glUniform2iv := wglGetProcAddress('glUniform2iv');
  glUniform3iv := wglGetProcAddress('glUniform3iv');
  glUniform4iv := wglGetProcAddress('glUniform4iv');
  glUniformMatrix2fv := wglGetProcAddress('glUniformMatrix2fv');
  glUniformMatrix3fv := wglGetProcAddress('glUniformMatrix3fv');
  glUniformMatrix4fv := wglGetProcAddress('glUniformMatrix4fv');
  glValidateProgram := wglGetProcAddress('glValidateProgram');
  glVertexAttrib1d := wglGetProcAddress('glVertexAttrib1d');
  glVertexAttrib1dv := wglGetProcAddress('glVertexAttrib1dv');
  glVertexAttrib1f := wglGetProcAddress('glVertexAttrib1f');
  glVertexAttrib1fv := wglGetProcAddress('glVertexAttrib1fv');
  glVertexAttrib1s := wglGetProcAddress('glVertexAttrib1s');
  glVertexAttrib1sv := wglGetProcAddress('glVertexAttrib1sv');
  glVertexAttrib2d := wglGetProcAddress('glVertexAttrib2d');
  glVertexAttrib2dv := wglGetProcAddress('glVertexAttrib2dv');
  glVertexAttrib2f := wglGetProcAddress('glVertexAttrib2f');
  glVertexAttrib2fv := wglGetProcAddress('glVertexAttrib2fv');
  glVertexAttrib2s := wglGetProcAddress('glVertexAttrib2s');
  glVertexAttrib2sv := wglGetProcAddress('glVertexAttrib2sv');
  glVertexAttrib3d := wglGetProcAddress('glVertexAttrib3d');
  glVertexAttrib3dv := wglGetProcAddress('glVertexAttrib3dv');
  glVertexAttrib3f := wglGetProcAddress('glVertexAttrib3f');
  glVertexAttrib3fv := wglGetProcAddress('glVertexAttrib3fv');
  glVertexAttrib3s := wglGetProcAddress('glVertexAttrib3s');
  glVertexAttrib3sv := wglGetProcAddress('glVertexAttrib3sv');
  glVertexAttrib4Nbv := wglGetProcAddress('glVertexAttrib4Nbv');
  glVertexAttrib4Niv := wglGetProcAddress('glVertexAttrib4Niv');
  glVertexAttrib4Nsv := wglGetProcAddress('glVertexAttrib4Nsv');
  glVertexAttrib4Nub := wglGetProcAddress('glVertexAttrib4Nub');
  glVertexAttrib4Nubv := wglGetProcAddress('glVertexAttrib4Nubv');
  glVertexAttrib4Nuiv := wglGetProcAddress('glVertexAttrib4Nuiv');
  glVertexAttrib4Nusv := wglGetProcAddress('glVertexAttrib4Nusv');
  glVertexAttrib4bv := wglGetProcAddress('glVertexAttrib4bv');
  glVertexAttrib4d := wglGetProcAddress('glVertexAttrib4d');
  glVertexAttrib4dv := wglGetProcAddress('glVertexAttrib4dv');
  glVertexAttrib4f := wglGetProcAddress('glVertexAttrib4f');
  glVertexAttrib4fv := wglGetProcAddress('glVertexAttrib4fv');
  glVertexAttrib4iv := wglGetProcAddress('glVertexAttrib4iv');
  glVertexAttrib4s := wglGetProcAddress('glVertexAttrib4s');
  glVertexAttrib4sv := wglGetProcAddress('glVertexAttrib4sv');
  glVertexAttrib4ubv := wglGetProcAddress('glVertexAttrib4ubv');
  glVertexAttrib4uiv := wglGetProcAddress('glVertexAttrib4uiv');
  glVertexAttrib4usv := wglGetProcAddress('glVertexAttrib4usv');
  glVertexAttribPointer := wglGetProcAddress('glVertexAttribPointer');
  glUniformMatrix2x3fv := wglGetProcAddress('glUniformMatrix2x3fv');
  glUniformMatrix3x2fv := wglGetProcAddress('glUniformMatrix3x2fv');
  glUniformMatrix2x4fv := wglGetProcAddress('glUniformMatrix2x4fv');
  glUniformMatrix4x2fv := wglGetProcAddress('glUniformMatrix4x2fv');
  glUniformMatrix3x4fv := wglGetProcAddress('glUniformMatrix3x4fv');
  glUniformMatrix4x3fv := wglGetProcAddress('glUniformMatrix4x3fv');
  glColorMaski := wglGetProcAddress('glColorMaski');
  glGetBooleani_v := wglGetProcAddress('glGetBooleani_v');
  glGetIntegeri_v := wglGetProcAddress('glGetIntegeri_v');
  glEnablei := wglGetProcAddress('glEnablei');
  glDisablei := wglGetProcAddress('glDisablei');
  glIsEnabledi := wglGetProcAddress('glIsEnabledi');
  glBeginTransformFeedback := wglGetProcAddress('glBeginTransformFeedback');
  glEndTransformFeedback := wglGetProcAddress('glEndTransformFeedback');
  glBindBufferRange := wglGetProcAddress('glBindBufferRange');
  glBindBufferBase := wglGetProcAddress('glBindBufferBase');
  glTransformFeedbackVaryings := wglGetProcAddress('glTransformFeedbackVaryings');
  glGetTransformFeedbackVarying := wglGetProcAddress('glGetTransformFeedbackVarying');
  glClampColor := wglGetProcAddress('glClampColor');
  glBeginConditionalRender := wglGetProcAddress('glBeginConditionalRender');
  glEndConditionalRender := wglGetProcAddress('glEndConditionalRender');
  glVertexAttribIPointer := wglGetProcAddress('glVertexAttribIPointer');
  glGetVertexAttribIiv := wglGetProcAddress('glGetVertexAttribIiv');
  glGetVertexAttribIuiv := wglGetProcAddress('glGetVertexAttribIuiv');
  glVertexAttribI1i := wglGetProcAddress('glVertexAttribI1i');
  glVertexAttribI2i := wglGetProcAddress('glVertexAttribI2i');
  glVertexAttribI3i := wglGetProcAddress('glVertexAttribI3i');
  glVertexAttribI4i := wglGetProcAddress('glVertexAttribI4i');
  glVertexAttribI1ui := wglGetProcAddress('glVertexAttribI1ui');
  glVertexAttribI2ui := wglGetProcAddress('glVertexAttribI2ui');
  glVertexAttribI3ui := wglGetProcAddress('glVertexAttribI3ui');
  glVertexAttribI4ui := wglGetProcAddress('glVertexAttribI4ui');
  glVertexAttribI1iv := wglGetProcAddress('glVertexAttribI1iv');
  glVertexAttribI2iv := wglGetProcAddress('glVertexAttribI2iv');
  glVertexAttribI3iv := wglGetProcAddress('glVertexAttribI3iv');
  glVertexAttribI4iv := wglGetProcAddress('glVertexAttribI4iv');
  glVertexAttribI1uiv := wglGetProcAddress('glVertexAttribI1uiv');
  glVertexAttribI2uiv := wglGetProcAddress('glVertexAttribI2uiv');
  glVertexAttribI3uiv := wglGetProcAddress('glVertexAttribI3uiv');
  glVertexAttribI4uiv := wglGetProcAddress('glVertexAttribI4uiv');
  glVertexAttribI4bv := wglGetProcAddress('glVertexAttribI4bv');
  glVertexAttribI4sv := wglGetProcAddress('glVertexAttribI4sv');
  glVertexAttribI4ubv := wglGetProcAddress('glVertexAttribI4ubv');
  glVertexAttribI4usv := wglGetProcAddress('glVertexAttribI4usv');
  glGetUniformuiv := wglGetProcAddress('glGetUniformuiv');
  glBindFragDataLocation := wglGetProcAddress('glBindFragDataLocation');
  glGetFragDataLocation := wglGetProcAddress('glGetFragDataLocation');
  glUniform1ui := wglGetProcAddress('glUniform1ui');
  glUniform2ui := wglGetProcAddress('glUniform2ui');
  glUniform3ui := wglGetProcAddress('glUniform3ui');
  glUniform4ui := wglGetProcAddress('glUniform4ui');
  glUniform1uiv := wglGetProcAddress('glUniform1uiv');
  glUniform2uiv := wglGetProcAddress('glUniform2uiv');
  glUniform3uiv := wglGetProcAddress('glUniform3uiv');
  glUniform4uiv := wglGetProcAddress('glUniform4uiv');
  glTexParameterIiv := wglGetProcAddress('glTexParameterIiv');
  glTexParameterIuiv := wglGetProcAddress('glTexParameterIuiv');
  glGetTexParameterIiv := wglGetProcAddress('glGetTexParameterIiv');
  glGetTexParameterIuiv := wglGetProcAddress('glGetTexParameterIuiv');
  glClearBufferiv := wglGetProcAddress('glClearBufferiv');
  glClearBufferuiv := wglGetProcAddress('glClearBufferuiv');
  glClearBufferfv := wglGetProcAddress('glClearBufferfv');
  glClearBufferfi := wglGetProcAddress('glClearBufferfi');
  glGetStringi := wglGetProcAddress('glGetStringi');
  glIsRenderbuffer := wglGetProcAddress('glIsRenderbuffer');
  glBindRenderbuffer := wglGetProcAddress('glBindRenderbuffer');
  glDeleteRenderbuffers := wglGetProcAddress('glDeleteRenderbuffers');
  glGenRenderbuffers := wglGetProcAddress('glGenRenderbuffers');
  glRenderbufferStorage := wglGetProcAddress('glRenderbufferStorage');
  glGetRenderbufferParameteriv := wglGetProcAddress('glGetRenderbufferParameteriv');
  glIsFramebuffer := wglGetProcAddress('glIsFramebuffer');
  glBindFramebuffer := wglGetProcAddress('glBindFramebuffer');
  glDeleteFramebuffers := wglGetProcAddress('glDeleteFramebuffers');
  glGenFramebuffers := wglGetProcAddress('glGenFramebuffers');
  glCheckFramebufferStatus := wglGetProcAddress('glCheckFramebufferStatus');
  glFramebufferTexture1D := wglGetProcAddress('glFramebufferTexture1D');
  glFramebufferTexture2D := wglGetProcAddress('glFramebufferTexture2D');
  glFramebufferTexture3D := wglGetProcAddress('glFramebufferTexture3D');
  glFramebufferRenderbuffer := wglGetProcAddress('glFramebufferRenderbuffer');
  glGetFramebufferAttachmentParameteriv := wglGetProcAddress('glGetFramebufferAttachmentParameteriv');
  glGenerateMipmap := wglGetProcAddress('glGenerateMipmap');
  glBlitFramebuffer := wglGetProcAddress('glBlitFramebuffer');
  glRenderbufferStorageMultisample := wglGetProcAddress('glRenderbufferStorageMultisample');
  glFramebufferTextureLayer := wglGetProcAddress('glFramebufferTextureLayer');
  glMapBufferRange := wglGetProcAddress('glMapBufferRange');
  glFlushMappedBufferRange := wglGetProcAddress('glFlushMappedBufferRange');
  glBindVertexArray := wglGetProcAddress('glBindVertexArray');
  glDeleteVertexArrays := wglGetProcAddress('glDeleteVertexArrays');
  glGenVertexArrays := wglGetProcAddress('glGenVertexArrays');
  glIsVertexArray := wglGetProcAddress('glIsVertexArray');
  glDrawArraysInstanced := wglGetProcAddress('glDrawArraysInstanced');
  glDrawElementsInstanced := wglGetProcAddress('glDrawElementsInstanced');
  glTexBuffer := wglGetProcAddress('glTexBuffer');
  glPrimitiveRestartIndex := wglGetProcAddress('glPrimitiveRestartIndex');
  glCopyBufferSubData := wglGetProcAddress('glCopyBufferSubData');
  glGetUniformIndices := wglGetProcAddress('glGetUniformIndices');
  glGetActiveUniformsiv := wglGetProcAddress('glGetActiveUniformsiv');
  glGetActiveUniformName := wglGetProcAddress('glGetActiveUniformName');
  glGetUniformBlockIndex := wglGetProcAddress('glGetUniformBlockIndex');
  glGetActiveUniformBlockiv := wglGetProcAddress('glGetActiveUniformBlockiv');
  glGetActiveUniformBlockName := wglGetProcAddress('glGetActiveUniformBlockName');
  glUniformBlockBinding := wglGetProcAddress('glUniformBlockBinding');
  glDrawElementsBaseVertex := wglGetProcAddress('glDrawElementsBaseVertex');
  glDrawRangeElementsBaseVertex := wglGetProcAddress('glDrawRangeElementsBaseVertex');
  glDrawElementsInstancedBaseVertex := wglGetProcAddress('glDrawElementsInstancedBaseVertex');
  glMultiDrawElementsBaseVertex := wglGetProcAddress('glMultiDrawElementsBaseVertex');
  glProvokingVertex := wglGetProcAddress('glProvokingVertex');
  glFenceSync := wglGetProcAddress('glFenceSync');
  glIsSync := wglGetProcAddress('glIsSync');
  glDeleteSync := wglGetProcAddress('glDeleteSync');
  glClientWaitSync := wglGetProcAddress('glClientWaitSync');
  glWaitSync := wglGetProcAddress('glWaitSync');
  glGetInteger64v := wglGetProcAddress('glGetInteger64v');
  glGetSynciv := wglGetProcAddress('glGetSynciv');
  glGetInteger64i_v := wglGetProcAddress('glGetInteger64i_v');
  glGetBufferParameteri64v := wglGetProcAddress('glGetBufferParameteri64v');
  glFramebufferTexture := wglGetProcAddress('glFramebufferTexture');
  glTexImage2DMultisample := wglGetProcAddress('glTexImage2DMultisample');
  glTexImage3DMultisample := wglGetProcAddress('glTexImage3DMultisample');
  glGetMultisamplefv := wglGetProcAddress('glGetMultisamplefv');
  glSampleMaski := wglGetProcAddress('glSampleMaski');
  glBindFragDataLocationIndexed := wglGetProcAddress('glBindFragDataLocationIndexed');
  glGetFragDataIndex := wglGetProcAddress('glGetFragDataIndex');
  glGenSamplers := wglGetProcAddress('glGenSamplers');
  glDeleteSamplers := wglGetProcAddress('glDeleteSamplers');
  glIsSampler := wglGetProcAddress('glIsSampler');
  glBindSampler := wglGetProcAddress('glBindSampler');
  glSamplerParameteri := wglGetProcAddress('glSamplerParameteri');
  glSamplerParameteriv := wglGetProcAddress('glSamplerParameteriv');
  glSamplerParameterf := wglGetProcAddress('glSamplerParameterf');
  glSamplerParameterfv := wglGetProcAddress('glSamplerParameterfv');
  glSamplerParameterIiv := wglGetProcAddress('glSamplerParameterIiv');
  glSamplerParameterIuiv := wglGetProcAddress('glSamplerParameterIuiv');
  glGetSamplerParameteriv := wglGetProcAddress('glGetSamplerParameteriv');
  glGetSamplerParameterIiv := wglGetProcAddress('glGetSamplerParameterIiv');
  glGetSamplerParameterfv := wglGetProcAddress('glGetSamplerParameterfv');
  glGetSamplerParameterIuiv := wglGetProcAddress('glGetSamplerParameterIuiv');
  glQueryCounter := wglGetProcAddress('glQueryCounter');
  glGetQueryObjecti64v := wglGetProcAddress('glGetQueryObjecti64v');
  glGetQueryObjectui64v := wglGetProcAddress('glGetQueryObjectui64v');
  glVertexAttribDivisor := wglGetProcAddress('glVertexAttribDivisor');
  glVertexAttribP1ui := wglGetProcAddress('glVertexAttribP1ui');
  glVertexAttribP1uiv := wglGetProcAddress('glVertexAttribP1uiv');
  glVertexAttribP2ui := wglGetProcAddress('glVertexAttribP2ui');
  glVertexAttribP2uiv := wglGetProcAddress('glVertexAttribP2uiv');
  glVertexAttribP3ui := wglGetProcAddress('glVertexAttribP3ui');
  glVertexAttribP3uiv := wglGetProcAddress('glVertexAttribP3uiv');
  glVertexAttribP4ui := wglGetProcAddress('glVertexAttribP4ui');
  glVertexAttribP4uiv := wglGetProcAddress('glVertexAttribP4uiv');
  glVertexP2ui := wglGetProcAddress('glVertexP2ui');
  glVertexP2uiv := wglGetProcAddress('glVertexP2uiv');
  glVertexP3ui := wglGetProcAddress('glVertexP3ui');
  glVertexP3uiv := wglGetProcAddress('glVertexP3uiv');
  glVertexP4ui := wglGetProcAddress('glVertexP4ui');
  glVertexP4uiv := wglGetProcAddress('glVertexP4uiv');
  glTexCoordP1ui := wglGetProcAddress('glTexCoordP1ui');
  glTexCoordP1uiv := wglGetProcAddress('glTexCoordP1uiv');
  glTexCoordP2ui := wglGetProcAddress('glTexCoordP2ui');
  glTexCoordP2uiv := wglGetProcAddress('glTexCoordP2uiv');
  glTexCoordP3ui := wglGetProcAddress('glTexCoordP3ui');
  glTexCoordP3uiv := wglGetProcAddress('glTexCoordP3uiv');
  glTexCoordP4ui := wglGetProcAddress('glTexCoordP4ui');
  glTexCoordP4uiv := wglGetProcAddress('glTexCoordP4uiv');
  glMultiTexCoordP1ui := wglGetProcAddress('glMultiTexCoordP1ui');
  glMultiTexCoordP1uiv := wglGetProcAddress('glMultiTexCoordP1uiv');
  glMultiTexCoordP2ui := wglGetProcAddress('glMultiTexCoordP2ui');
  glMultiTexCoordP2uiv := wglGetProcAddress('glMultiTexCoordP2uiv');
  glMultiTexCoordP3ui := wglGetProcAddress('glMultiTexCoordP3ui');
  glMultiTexCoordP3uiv := wglGetProcAddress('glMultiTexCoordP3uiv');
  glMultiTexCoordP4ui := wglGetProcAddress('glMultiTexCoordP4ui');
  glMultiTexCoordP4uiv := wglGetProcAddress('glMultiTexCoordP4uiv');
  glNormalP3ui := wglGetProcAddress('glNormalP3ui');
  glNormalP3uiv := wglGetProcAddress('glNormalP3uiv');
  glColorP3ui := wglGetProcAddress('glColorP3ui');
  glColorP3uiv := wglGetProcAddress('glColorP3uiv');
  glColorP4ui := wglGetProcAddress('glColorP4ui');
  glColorP4uiv := wglGetProcAddress('glColorP4uiv');
  glSecondaryColorP3ui := wglGetProcAddress('glSecondaryColorP3ui');
  glSecondaryColorP3uiv := wglGetProcAddress('glSecondaryColorP3uiv');
  glMinSampleShading := wglGetProcAddress('glMinSampleShading');
  glBlendEquationi := wglGetProcAddress('glBlendEquationi');
  glBlendEquationSeparatei := wglGetProcAddress('glBlendEquationSeparatei');
  glBlendFunci := wglGetProcAddress('glBlendFunci');
  glBlendFuncSeparatei := wglGetProcAddress('glBlendFuncSeparatei');
  glDrawArraysIndirect := wglGetProcAddress('glDrawArraysIndirect');
  glDrawElementsIndirect := wglGetProcAddress('glDrawElementsIndirect');
  glUniform1d := wglGetProcAddress('glUniform1d');
  glUniform2d := wglGetProcAddress('glUniform2d');
  glUniform3d := wglGetProcAddress('glUniform3d');
  glUniform4d := wglGetProcAddress('glUniform4d');
  glUniform1dv := wglGetProcAddress('glUniform1dv');
  glUniform2dv := wglGetProcAddress('glUniform2dv');
  glUniform3dv := wglGetProcAddress('glUniform3dv');
  glUniform4dv := wglGetProcAddress('glUniform4dv');
  glUniformMatrix2dv := wglGetProcAddress('glUniformMatrix2dv');
  glUniformMatrix3dv := wglGetProcAddress('glUniformMatrix3dv');
  glUniformMatrix4dv := wglGetProcAddress('glUniformMatrix4dv');
  glUniformMatrix2x3dv := wglGetProcAddress('glUniformMatrix2x3dv');
  glUniformMatrix2x4dv := wglGetProcAddress('glUniformMatrix2x4dv');
  glUniformMatrix3x2dv := wglGetProcAddress('glUniformMatrix3x2dv');
  glUniformMatrix3x4dv := wglGetProcAddress('glUniformMatrix3x4dv');
  glUniformMatrix4x2dv := wglGetProcAddress('glUniformMatrix4x2dv');
  glUniformMatrix4x3dv := wglGetProcAddress('glUniformMatrix4x3dv');
  glGetUniformdv := wglGetProcAddress('glGetUniformdv');
  glGetSubroutineUniformLocation := wglGetProcAddress('glGetSubroutineUniformLocation');
  glGetSubroutineIndex := wglGetProcAddress('glGetSubroutineIndex');
  glGetActiveSubroutineUniformiv := wglGetProcAddress('glGetActiveSubroutineUniformiv');
  glGetActiveSubroutineUniformName := wglGetProcAddress('glGetActiveSubroutineUniformName');
  glGetActiveSubroutineName := wglGetProcAddress('glGetActiveSubroutineName');
  glUniformSubroutinesuiv := wglGetProcAddress('glUniformSubroutinesuiv');
  glGetUniformSubroutineuiv := wglGetProcAddress('glGetUniformSubroutineuiv');
  glGetProgramStageiv := wglGetProcAddress('glGetProgramStageiv');
  glPatchParameteri := wglGetProcAddress('glPatchParameteri');
  glPatchParameterfv := wglGetProcAddress('glPatchParameterfv');
  glBindTransformFeedback := wglGetProcAddress('glBindTransformFeedback');
  glDeleteTransformFeedbacks := wglGetProcAddress('glDeleteTransformFeedbacks');
  glGenTransformFeedbacks := wglGetProcAddress('glGenTransformFeedbacks');
  glIsTransformFeedback := wglGetProcAddress('glIsTransformFeedback');
  glPauseTransformFeedback := wglGetProcAddress('glPauseTransformFeedback');
  glResumeTransformFeedback := wglGetProcAddress('glResumeTransformFeedback');
  glDrawTransformFeedback := wglGetProcAddress('glDrawTransformFeedback');
  glDrawTransformFeedbackStream := wglGetProcAddress('glDrawTransformFeedbackStream');
  glBeginQueryIndexed := wglGetProcAddress('glBeginQueryIndexed');
  glEndQueryIndexed := wglGetProcAddress('glEndQueryIndexed');
  glGetQueryIndexediv := wglGetProcAddress('glGetQueryIndexediv');
  glReleaseShaderCompiler := wglGetProcAddress('glReleaseShaderCompiler');
  glShaderBinary := wglGetProcAddress('glShaderBinary');
  glGetShaderPrecisionFormat := wglGetProcAddress('glGetShaderPrecisionFormat');
  glDepthRangef := wglGetProcAddress('glDepthRangef');
  glClearDepthf := wglGetProcAddress('glClearDepthf');
  glGetProgramBinary := wglGetProcAddress('glGetProgramBinary');
  glProgramBinary := wglGetProcAddress('glProgramBinary');
  glProgramParameteri := wglGetProcAddress('glProgramParameteri');
  glUseProgramStages := wglGetProcAddress('glUseProgramStages');
  glActiveShaderProgram := wglGetProcAddress('glActiveShaderProgram');
  glCreateShaderProgramv := wglGetProcAddress('glCreateShaderProgramv');
  glBindProgramPipeline := wglGetProcAddress('glBindProgramPipeline');
  glDeleteProgramPipelines := wglGetProcAddress('glDeleteProgramPipelines');
  glGenProgramPipelines := wglGetProcAddress('glGenProgramPipelines');
  glIsProgramPipeline := wglGetProcAddress('glIsProgramPipeline');
  glGetProgramPipelineiv := wglGetProcAddress('glGetProgramPipelineiv');
  glProgramUniform1i := wglGetProcAddress('glProgramUniform1i');
  glProgramUniform1iv := wglGetProcAddress('glProgramUniform1iv');
  glProgramUniform1f := wglGetProcAddress('glProgramUniform1f');
  glProgramUniform1fv := wglGetProcAddress('glProgramUniform1fv');
  glProgramUniform1d := wglGetProcAddress('glProgramUniform1d');
  glProgramUniform1dv := wglGetProcAddress('glProgramUniform1dv');
  glProgramUniform1ui := wglGetProcAddress('glProgramUniform1ui');
  glProgramUniform1uiv := wglGetProcAddress('glProgramUniform1uiv');
  glProgramUniform2i := wglGetProcAddress('glProgramUniform2i');
  glProgramUniform2iv := wglGetProcAddress('glProgramUniform2iv');
  glProgramUniform2f := wglGetProcAddress('glProgramUniform2f');
  glProgramUniform2fv := wglGetProcAddress('glProgramUniform2fv');
  glProgramUniform2d := wglGetProcAddress('glProgramUniform2d');
  glProgramUniform2dv := wglGetProcAddress('glProgramUniform2dv');
  glProgramUniform2ui := wglGetProcAddress('glProgramUniform2ui');
  glProgramUniform2uiv := wglGetProcAddress('glProgramUniform2uiv');
  glProgramUniform3i := wglGetProcAddress('glProgramUniform3i');
  glProgramUniform3iv := wglGetProcAddress('glProgramUniform3iv');
  glProgramUniform3f := wglGetProcAddress('glProgramUniform3f');
  glProgramUniform3fv := wglGetProcAddress('glProgramUniform3fv');
  glProgramUniform3d := wglGetProcAddress('glProgramUniform3d');
  glProgramUniform3dv := wglGetProcAddress('glProgramUniform3dv');
  glProgramUniform3ui := wglGetProcAddress('glProgramUniform3ui');
  glProgramUniform3uiv := wglGetProcAddress('glProgramUniform3uiv');
  glProgramUniform4i := wglGetProcAddress('glProgramUniform4i');
  glProgramUniform4iv := wglGetProcAddress('glProgramUniform4iv');
  glProgramUniform4f := wglGetProcAddress('glProgramUniform4f');
  glProgramUniform4fv := wglGetProcAddress('glProgramUniform4fv');
  glProgramUniform4d := wglGetProcAddress('glProgramUniform4d');
  glProgramUniform4dv := wglGetProcAddress('glProgramUniform4dv');
  glProgramUniform4ui := wglGetProcAddress('glProgramUniform4ui');
  glProgramUniform4uiv := wglGetProcAddress('glProgramUniform4uiv');
  glProgramUniformMatrix2fv := wglGetProcAddress('glProgramUniformMatrix2fv');
  glProgramUniformMatrix3fv := wglGetProcAddress('glProgramUniformMatrix3fv');
  glProgramUniformMatrix4fv := wglGetProcAddress('glProgramUniformMatrix4fv');
  glProgramUniformMatrix2dv := wglGetProcAddress('glProgramUniformMatrix2dv');
  glProgramUniformMatrix3dv := wglGetProcAddress('glProgramUniformMatrix3dv');
  glProgramUniformMatrix4dv := wglGetProcAddress('glProgramUniformMatrix4dv');
  glProgramUniformMatrix2x3fv := wglGetProcAddress('glProgramUniformMatrix2x3fv');
  glProgramUniformMatrix3x2fv := wglGetProcAddress('glProgramUniformMatrix3x2fv');
  glProgramUniformMatrix2x4fv := wglGetProcAddress('glProgramUniformMatrix2x4fv');
  glProgramUniformMatrix4x2fv := wglGetProcAddress('glProgramUniformMatrix4x2fv');
  glProgramUniformMatrix3x4fv := wglGetProcAddress('glProgramUniformMatrix3x4fv');
  glProgramUniformMatrix4x3fv := wglGetProcAddress('glProgramUniformMatrix4x3fv');
  glProgramUniformMatrix2x3dv := wglGetProcAddress('glProgramUniformMatrix2x3dv');
  glProgramUniformMatrix3x2dv := wglGetProcAddress('glProgramUniformMatrix3x2dv');
  glProgramUniformMatrix2x4dv := wglGetProcAddress('glProgramUniformMatrix2x4dv');
  glProgramUniformMatrix4x2dv := wglGetProcAddress('glProgramUniformMatrix4x2dv');
  glProgramUniformMatrix3x4dv := wglGetProcAddress('glProgramUniformMatrix3x4dv');
  glProgramUniformMatrix4x3dv := wglGetProcAddress('glProgramUniformMatrix4x3dv');
  glValidateProgramPipeline := wglGetProcAddress('glValidateProgramPipeline');
  glGetProgramPipelineInfoLog := wglGetProcAddress('glGetProgramPipelineInfoLog');
  glVertexAttribL1d := wglGetProcAddress('glVertexAttribL1d');
  glVertexAttribL2d := wglGetProcAddress('glVertexAttribL2d');
  glVertexAttribL3d := wglGetProcAddress('glVertexAttribL3d');
  glVertexAttribL4d := wglGetProcAddress('glVertexAttribL4d');
  glVertexAttribL1dv := wglGetProcAddress('glVertexAttribL1dv');
  glVertexAttribL2dv := wglGetProcAddress('glVertexAttribL2dv');
  glVertexAttribL3dv := wglGetProcAddress('glVertexAttribL3dv');
  glVertexAttribL4dv := wglGetProcAddress('glVertexAttribL4dv');
  glVertexAttribLPointer := wglGetProcAddress('glVertexAttribLPointer');
  glGetVertexAttribLdv := wglGetProcAddress('glGetVertexAttribLdv');
  glViewportArrayv := wglGetProcAddress('glViewportArrayv');
  glViewportIndexedf := wglGetProcAddress('glViewportIndexedf');
  glViewportIndexedfv := wglGetProcAddress('glViewportIndexedfv');
  glScissorArrayv := wglGetProcAddress('glScissorArrayv');
  glScissorIndexed := wglGetProcAddress('glScissorIndexed');
  glScissorIndexedv := wglGetProcAddress('glScissorIndexedv');
  glDepthRangeArrayv := wglGetProcAddress('glDepthRangeArrayv');
  glDepthRangeIndexed := wglGetProcAddress('glDepthRangeIndexed');
  glGetFloati_v := wglGetProcAddress('glGetFloati_v');
  glGetDoublei_v := wglGetProcAddress('glGetDoublei_v');
  glDrawArraysInstancedBaseInstance := wglGetProcAddress('glDrawArraysInstancedBaseInstance');
  glDrawElementsInstancedBaseInstance := wglGetProcAddress('glDrawElementsInstancedBaseInstance');
  glDrawElementsInstancedBaseVertexBaseInstance := wglGetProcAddress('glDrawElementsInstancedBaseVertexBaseInstance');
  glGetInternalformativ := wglGetProcAddress('glGetInternalformativ');
  glGetActiveAtomicCounterBufferiv := wglGetProcAddress('glGetActiveAtomicCounterBufferiv');
  glBindImageTexture := wglGetProcAddress('glBindImageTexture');
  glMemoryBarrier := wglGetProcAddress('glMemoryBarrier');
  glTexStorage1D := wglGetProcAddress('glTexStorage1D');
  glTexStorage2D := wglGetProcAddress('glTexStorage2D');
  glTexStorage3D := wglGetProcAddress('glTexStorage3D');
  glDrawTransformFeedbackInstanced := wglGetProcAddress('glDrawTransformFeedbackInstanced');
  glDrawTransformFeedbackStreamInstanced := wglGetProcAddress('glDrawTransformFeedbackStreamInstanced');
  glClearBufferData := wglGetProcAddress('glClearBufferData');
  glClearBufferSubData := wglGetProcAddress('glClearBufferSubData');
  glDispatchCompute := wglGetProcAddress('glDispatchCompute');
  glDispatchComputeIndirect := wglGetProcAddress('glDispatchComputeIndirect');
  glCopyImageSubData := wglGetProcAddress('glCopyImageSubData');
  glFramebufferParameteri := wglGetProcAddress('glFramebufferParameteri');
  glGetFramebufferParameteriv := wglGetProcAddress('glGetFramebufferParameteriv');
  glGetInternalformati64v := wglGetProcAddress('glGetInternalformati64v');
  glInvalidateTexSubImage := wglGetProcAddress('glInvalidateTexSubImage');
  glInvalidateTexImage := wglGetProcAddress('glInvalidateTexImage');
  glInvalidateBufferSubData := wglGetProcAddress('glInvalidateBufferSubData');
  glInvalidateBufferData := wglGetProcAddress('glInvalidateBufferData');
  glInvalidateFramebuffer := wglGetProcAddress('glInvalidateFramebuffer');
  glInvalidateSubFramebuffer := wglGetProcAddress('glInvalidateSubFramebuffer');
  glMultiDrawArraysIndirect := wglGetProcAddress('glMultiDrawArraysIndirect');
  glMultiDrawElementsIndirect := wglGetProcAddress('glMultiDrawElementsIndirect');
  glGetProgramInterfaceiv := wglGetProcAddress('glGetProgramInterfaceiv');
  glGetProgramResourceIndex := wglGetProcAddress('glGetProgramResourceIndex');
  glGetProgramResourceName := wglGetProcAddress('glGetProgramResourceName');
  glGetProgramResourceiv := wglGetProcAddress('glGetProgramResourceiv');
  glGetProgramResourceLocation := wglGetProcAddress('glGetProgramResourceLocation');
  glGetProgramResourceLocationIndex := wglGetProcAddress('glGetProgramResourceLocationIndex');
  glShaderStorageBlockBinding := wglGetProcAddress('glShaderStorageBlockBinding');
  glTexBufferRange := wglGetProcAddress('glTexBufferRange');
  glTexStorage2DMultisample := wglGetProcAddress('glTexStorage2DMultisample');
  glTexStorage3DMultisample := wglGetProcAddress('glTexStorage3DMultisample');
  glTextureView := wglGetProcAddress('glTextureView');
  glBindVertexBuffer := wglGetProcAddress('glBindVertexBuffer');
  glVertexAttribFormat := wglGetProcAddress('glVertexAttribFormat');
  glVertexAttribIFormat := wglGetProcAddress('glVertexAttribIFormat');
  glVertexAttribLFormat := wglGetProcAddress('glVertexAttribLFormat');
  glVertexAttribBinding := wglGetProcAddress('glVertexAttribBinding');
  glVertexBindingDivisor := wglGetProcAddress('glVertexBindingDivisor');
  glDebugMessageControl := wglGetProcAddress('glDebugMessageControl');
  glDebugMessageInsert := wglGetProcAddress('glDebugMessageInsert');
  glDebugMessageCallback := wglGetProcAddress('glDebugMessageCallback');
  glGetDebugMessageLog := wglGetProcAddress('glGetDebugMessageLog');
  glPushDebugGroup := wglGetProcAddress('glPushDebugGroup');
  glPopDebugGroup := wglGetProcAddress('glPopDebugGroup');
  glObjectLabel := wglGetProcAddress('glObjectLabel');
  glGetObjectLabel := wglGetProcAddress('glGetObjectLabel');
  glObjectPtrLabel := wglGetProcAddress('glObjectPtrLabel');
  glGetObjectPtrLabel := wglGetProcAddress('glGetObjectPtrLabel');
  glBufferStorage := wglGetProcAddress('glBufferStorage');
  glClearTexImage := wglGetProcAddress('glClearTexImage');
  glClearTexSubImage := wglGetProcAddress('glClearTexSubImage');
  glBindBuffersBase := wglGetProcAddress('glBindBuffersBase');
  glBindBuffersRange := wglGetProcAddress('glBindBuffersRange');
  glBindTextures := wglGetProcAddress('glBindTextures');
  glBindSamplers := wglGetProcAddress('glBindSamplers');
  glBindImageTextures := wglGetProcAddress('glBindImageTextures');
  glBindVertexBuffers := wglGetProcAddress('glBindVertexBuffers');
  glGetTextureHandleARB := wglGetProcAddress('glGetTextureHandleARB');
  glGetTextureSamplerHandleARB := wglGetProcAddress('glGetTextureSamplerHandleARB');
  glMakeTextureHandleResidentARB := wglGetProcAddress('glMakeTextureHandleResidentARB');
  glMakeTextureHandleNonResidentARB := wglGetProcAddress('glMakeTextureHandleNonResidentARB');
  glGetImageHandleARB := wglGetProcAddress('glGetImageHandleARB');
  glMakeImageHandleResidentARB := wglGetProcAddress('glMakeImageHandleResidentARB');
  glMakeImageHandleNonResidentARB := wglGetProcAddress('glMakeImageHandleNonResidentARB');
  glUniformHandleui64ARB := wglGetProcAddress('glUniformHandleui64ARB');
  glUniformHandleui64vARB := wglGetProcAddress('glUniformHandleui64vARB');
  glProgramUniformHandleui64ARB := wglGetProcAddress('glProgramUniformHandleui64ARB');
  glProgramUniformHandleui64vARB := wglGetProcAddress('glProgramUniformHandleui64vARB');
  glIsTextureHandleResidentARB := wglGetProcAddress('glIsTextureHandleResidentARB');
  glIsImageHandleResidentARB := wglGetProcAddress('glIsImageHandleResidentARB');
  glVertexAttribL1ui64ARB := wglGetProcAddress('glVertexAttribL1ui64ARB');
  glVertexAttribL1ui64vARB := wglGetProcAddress('glVertexAttribL1ui64vARB');
  glGetVertexAttribLui64vARB := wglGetProcAddress('glGetVertexAttribLui64vARB');
  glCreateSyncFromCLeventARB := wglGetProcAddress('glCreateSyncFromCLeventARB');
  glClampColorARB := wglGetProcAddress('glClampColorARB');
  glDispatchComputeGroupSizeARB := wglGetProcAddress('glDispatchComputeGroupSizeARB');
  glDebugMessageControlARB := wglGetProcAddress('glDebugMessageControlARB');
  glDebugMessageInsertARB := wglGetProcAddress('glDebugMessageInsertARB');
  glDebugMessageCallbackARB := wglGetProcAddress('glDebugMessageCallbackARB');
  glGetDebugMessageLogARB := wglGetProcAddress('glGetDebugMessageLogARB');
  glDrawBuffersARB := wglGetProcAddress('glDrawBuffersARB');
  glBlendEquationiARB := wglGetProcAddress('glBlendEquationiARB');
  glBlendEquationSeparateiARB := wglGetProcAddress('glBlendEquationSeparateiARB');
  glBlendFunciARB := wglGetProcAddress('glBlendFunciARB');
  glBlendFuncSeparateiARB := wglGetProcAddress('glBlendFuncSeparateiARB');
  glDrawArraysInstancedARB := wglGetProcAddress('glDrawArraysInstancedARB');
  glDrawElementsInstancedARB := wglGetProcAddress('glDrawElementsInstancedARB');
  glProgramStringARB := wglGetProcAddress('glProgramStringARB');
  glBindProgramARB := wglGetProcAddress('glBindProgramARB');
  glDeleteProgramsARB := wglGetProcAddress('glDeleteProgramsARB');
  glGenProgramsARB := wglGetProcAddress('glGenProgramsARB');
  glProgramEnvParameter4dARB := wglGetProcAddress('glProgramEnvParameter4dARB');
  glProgramEnvParameter4dvARB := wglGetProcAddress('glProgramEnvParameter4dvARB');
  glProgramEnvParameter4fARB := wglGetProcAddress('glProgramEnvParameter4fARB');
  glProgramEnvParameter4fvARB := wglGetProcAddress('glProgramEnvParameter4fvARB');
  glProgramLocalParameter4dARB := wglGetProcAddress('glProgramLocalParameter4dARB');
  glProgramLocalParameter4dvARB := wglGetProcAddress('glProgramLocalParameter4dvARB');
  glProgramLocalParameter4fARB := wglGetProcAddress('glProgramLocalParameter4fARB');
  glProgramLocalParameter4fvARB := wglGetProcAddress('glProgramLocalParameter4fvARB');
  glGetProgramEnvParameterdvARB := wglGetProcAddress('glGetProgramEnvParameterdvARB');
  glGetProgramEnvParameterfvARB := wglGetProcAddress('glGetProgramEnvParameterfvARB');
  glGetProgramLocalParameterdvARB := wglGetProcAddress('glGetProgramLocalParameterdvARB');
  glGetProgramLocalParameterfvARB := wglGetProcAddress('glGetProgramLocalParameterfvARB');
  glGetProgramivARB := wglGetProcAddress('glGetProgramivARB');
  glGetProgramStringARB := wglGetProcAddress('glGetProgramStringARB');
  glIsProgramARB := wglGetProcAddress('glIsProgramARB');
  glProgramParameteriARB := wglGetProcAddress('glProgramParameteriARB');
  glFramebufferTextureARB := wglGetProcAddress('glFramebufferTextureARB');
  glFramebufferTextureLayerARB := wglGetProcAddress('glFramebufferTextureLayerARB');
  glFramebufferTextureFaceARB := wglGetProcAddress('glFramebufferTextureFaceARB');
  glColorTable := wglGetProcAddress('glColorTable');
  glColorTableParameterfv := wglGetProcAddress('glColorTableParameterfv');
  glColorTableParameteriv := wglGetProcAddress('glColorTableParameteriv');
  glCopyColorTable := wglGetProcAddress('glCopyColorTable');
  glGetColorTable := wglGetProcAddress('glGetColorTable');
  glGetColorTableParameterfv := wglGetProcAddress('glGetColorTableParameterfv');
  glGetColorTableParameteriv := wglGetProcAddress('glGetColorTableParameteriv');
  glColorSubTable := wglGetProcAddress('glColorSubTable');
  glCopyColorSubTable := wglGetProcAddress('glCopyColorSubTable');
  glConvolutionFilter1D := wglGetProcAddress('glConvolutionFilter1D');
  glConvolutionFilter2D := wglGetProcAddress('glConvolutionFilter2D');
  glConvolutionParameterf := wglGetProcAddress('glConvolutionParameterf');
  glConvolutionParameterfv := wglGetProcAddress('glConvolutionParameterfv');
  glConvolutionParameteri := wglGetProcAddress('glConvolutionParameteri');
  glConvolutionParameteriv := wglGetProcAddress('glConvolutionParameteriv');
  glCopyConvolutionFilter1D := wglGetProcAddress('glCopyConvolutionFilter1D');
  glCopyConvolutionFilter2D := wglGetProcAddress('glCopyConvolutionFilter2D');
  glGetConvolutionFilter := wglGetProcAddress('glGetConvolutionFilter');
  glGetConvolutionParameterfv := wglGetProcAddress('glGetConvolutionParameterfv');
  glGetConvolutionParameteriv := wglGetProcAddress('glGetConvolutionParameteriv');
  glGetSeparableFilter := wglGetProcAddress('glGetSeparableFilter');
  glSeparableFilter2D := wglGetProcAddress('glSeparableFilter2D');
  glGetHistogram := wglGetProcAddress('glGetHistogram');
  glGetHistogramParameterfv := wglGetProcAddress('glGetHistogramParameterfv');
  glGetHistogramParameteriv := wglGetProcAddress('glGetHistogramParameteriv');
  glGetMinmax := wglGetProcAddress('glGetMinmax');
  glGetMinmaxParameterfv := wglGetProcAddress('glGetMinmaxParameterfv');
  glGetMinmaxParameteriv := wglGetProcAddress('glGetMinmaxParameteriv');
  glHistogram := wglGetProcAddress('glHistogram');
  glMinmax := wglGetProcAddress('glMinmax');
  glResetHistogram := wglGetProcAddress('glResetHistogram');
  glResetMinmax := wglGetProcAddress('glResetMinmax');
  glMultiDrawArraysIndirectCountARB := wglGetProcAddress('glMultiDrawArraysIndirectCountARB');
  glMultiDrawElementsIndirectCountARB := wglGetProcAddress('glMultiDrawElementsIndirectCountARB');
  glVertexAttribDivisorARB := wglGetProcAddress('glVertexAttribDivisorARB');
  glCurrentPaletteMatrixARB := wglGetProcAddress('glCurrentPaletteMatrixARB');
  glMatrixIndexubvARB := wglGetProcAddress('glMatrixIndexubvARB');
  glMatrixIndexusvARB := wglGetProcAddress('glMatrixIndexusvARB');
  glMatrixIndexuivARB := wglGetProcAddress('glMatrixIndexuivARB');
  glMatrixIndexPointerARB := wglGetProcAddress('glMatrixIndexPointerARB');
  glSampleCoverageARB := wglGetProcAddress('glSampleCoverageARB');
  glActiveTextureARB := wglGetProcAddress('glActiveTextureARB');
  glClientActiveTextureARB := wglGetProcAddress('glClientActiveTextureARB');
  glMultiTexCoord1dARB := wglGetProcAddress('glMultiTexCoord1dARB');
  glMultiTexCoord1dvARB := wglGetProcAddress('glMultiTexCoord1dvARB');
  glMultiTexCoord1fARB := wglGetProcAddress('glMultiTexCoord1fARB');
  glMultiTexCoord1fvARB := wglGetProcAddress('glMultiTexCoord1fvARB');
  glMultiTexCoord1iARB := wglGetProcAddress('glMultiTexCoord1iARB');
  glMultiTexCoord1ivARB := wglGetProcAddress('glMultiTexCoord1ivARB');
  glMultiTexCoord1sARB := wglGetProcAddress('glMultiTexCoord1sARB');
  glMultiTexCoord1svARB := wglGetProcAddress('glMultiTexCoord1svARB');
  glMultiTexCoord2dARB := wglGetProcAddress('glMultiTexCoord2dARB');
  glMultiTexCoord2dvARB := wglGetProcAddress('glMultiTexCoord2dvARB');
  glMultiTexCoord2fARB := wglGetProcAddress('glMultiTexCoord2fARB');
  glMultiTexCoord2fvARB := wglGetProcAddress('glMultiTexCoord2fvARB');
  glMultiTexCoord2iARB := wglGetProcAddress('glMultiTexCoord2iARB');
  glMultiTexCoord2ivARB := wglGetProcAddress('glMultiTexCoord2ivARB');
  glMultiTexCoord2sARB := wglGetProcAddress('glMultiTexCoord2sARB');
  glMultiTexCoord2svARB := wglGetProcAddress('glMultiTexCoord2svARB');
  glMultiTexCoord3dARB := wglGetProcAddress('glMultiTexCoord3dARB');
  glMultiTexCoord3dvARB := wglGetProcAddress('glMultiTexCoord3dvARB');
  glMultiTexCoord3fARB := wglGetProcAddress('glMultiTexCoord3fARB');
  glMultiTexCoord3fvARB := wglGetProcAddress('glMultiTexCoord3fvARB');
  glMultiTexCoord3iARB := wglGetProcAddress('glMultiTexCoord3iARB');
  glMultiTexCoord3ivARB := wglGetProcAddress('glMultiTexCoord3ivARB');
  glMultiTexCoord3sARB := wglGetProcAddress('glMultiTexCoord3sARB');
  glMultiTexCoord3svARB := wglGetProcAddress('glMultiTexCoord3svARB');
  glMultiTexCoord4dARB := wglGetProcAddress('glMultiTexCoord4dARB');
  glMultiTexCoord4dvARB := wglGetProcAddress('glMultiTexCoord4dvARB');
  glMultiTexCoord4fARB := wglGetProcAddress('glMultiTexCoord4fARB');
  glMultiTexCoord4fvARB := wglGetProcAddress('glMultiTexCoord4fvARB');
  glMultiTexCoord4iARB := wglGetProcAddress('glMultiTexCoord4iARB');
  glMultiTexCoord4ivARB := wglGetProcAddress('glMultiTexCoord4ivARB');
  glMultiTexCoord4sARB := wglGetProcAddress('glMultiTexCoord4sARB');
  glMultiTexCoord4svARB := wglGetProcAddress('glMultiTexCoord4svARB');
  glGenQueriesARB := wglGetProcAddress('glGenQueriesARB');
  glDeleteQueriesARB := wglGetProcAddress('glDeleteQueriesARB');
  glIsQueryARB := wglGetProcAddress('glIsQueryARB');
  glBeginQueryARB := wglGetProcAddress('glBeginQueryARB');
  glEndQueryARB := wglGetProcAddress('glEndQueryARB');
  glGetQueryivARB := wglGetProcAddress('glGetQueryivARB');
  glGetQueryObjectivARB := wglGetProcAddress('glGetQueryObjectivARB');
  glGetQueryObjectuivARB := wglGetProcAddress('glGetQueryObjectuivARB');
  glPointParameterfARB := wglGetProcAddress('glPointParameterfARB');
  glPointParameterfvARB := wglGetProcAddress('glPointParameterfvARB');
  glGetGraphicsResetStatusARB := wglGetProcAddress('glGetGraphicsResetStatusARB');
  glGetnTexImageARB := wglGetProcAddress('glGetnTexImageARB');
  glReadnPixelsARB := wglGetProcAddress('glReadnPixelsARB');
  glGetnCompressedTexImageARB := wglGetProcAddress('glGetnCompressedTexImageARB');
  glGetnUniformfvARB := wglGetProcAddress('glGetnUniformfvARB');
  glGetnUniformivARB := wglGetProcAddress('glGetnUniformivARB');
  glGetnUniformuivARB := wglGetProcAddress('glGetnUniformuivARB');
  glGetnUniformdvARB := wglGetProcAddress('glGetnUniformdvARB');
  glGetnMapdvARB := wglGetProcAddress('glGetnMapdvARB');
  glGetnMapfvARB := wglGetProcAddress('glGetnMapfvARB');
  glGetnMapivARB := wglGetProcAddress('glGetnMapivARB');
  glGetnPixelMapfvARB := wglGetProcAddress('glGetnPixelMapfvARB');
  glGetnPixelMapuivARB := wglGetProcAddress('glGetnPixelMapuivARB');
  glGetnPixelMapusvARB := wglGetProcAddress('glGetnPixelMapusvARB');
  glGetnPolygonStippleARB := wglGetProcAddress('glGetnPolygonStippleARB');
  glGetnColorTableARB := wglGetProcAddress('glGetnColorTableARB');
  glGetnConvolutionFilterARB := wglGetProcAddress('glGetnConvolutionFilterARB');
  glGetnSeparableFilterARB := wglGetProcAddress('glGetnSeparableFilterARB');
  glGetnHistogramARB := wglGetProcAddress('glGetnHistogramARB');
  glGetnMinmaxARB := wglGetProcAddress('glGetnMinmaxARB');
  glMinSampleShadingARB := wglGetProcAddress('glMinSampleShadingARB');
  glDeleteObjectARB := wglGetProcAddress('glDeleteObjectARB');
  glGetHandleARB := wglGetProcAddress('glGetHandleARB');
  glDetachObjectARB := wglGetProcAddress('glDetachObjectARB');
  glCreateShaderObjectARB := wglGetProcAddress('glCreateShaderObjectARB');
  glShaderSourceARB := wglGetProcAddress('glShaderSourceARB');
  glCompileShaderARB := wglGetProcAddress('glCompileShaderARB');
  glCreateProgramObjectARB := wglGetProcAddress('glCreateProgramObjectARB');
  glAttachObjectARB := wglGetProcAddress('glAttachObjectARB');
  glLinkProgramARB := wglGetProcAddress('glLinkProgramARB');
  glUseProgramObjectARB := wglGetProcAddress('glUseProgramObjectARB');
  glValidateProgramARB := wglGetProcAddress('glValidateProgramARB');
  glUniform1fARB := wglGetProcAddress('glUniform1fARB');
  glUniform2fARB := wglGetProcAddress('glUniform2fARB');
  glUniform3fARB := wglGetProcAddress('glUniform3fARB');
  glUniform4fARB := wglGetProcAddress('glUniform4fARB');
  glUniform1iARB := wglGetProcAddress('glUniform1iARB');
  glUniform2iARB := wglGetProcAddress('glUniform2iARB');
  glUniform3iARB := wglGetProcAddress('glUniform3iARB');
  glUniform4iARB := wglGetProcAddress('glUniform4iARB');
  glUniform1fvARB := wglGetProcAddress('glUniform1fvARB');
  glUniform2fvARB := wglGetProcAddress('glUniform2fvARB');
  glUniform3fvARB := wglGetProcAddress('glUniform3fvARB');
  glUniform4fvARB := wglGetProcAddress('glUniform4fvARB');
  glUniform1ivARB := wglGetProcAddress('glUniform1ivARB');
  glUniform2ivARB := wglGetProcAddress('glUniform2ivARB');
  glUniform3ivARB := wglGetProcAddress('glUniform3ivARB');
  glUniform4ivARB := wglGetProcAddress('glUniform4ivARB');
  glUniformMatrix2fvARB := wglGetProcAddress('glUniformMatrix2fvARB');
  glUniformMatrix3fvARB := wglGetProcAddress('glUniformMatrix3fvARB');
  glUniformMatrix4fvARB := wglGetProcAddress('glUniformMatrix4fvARB');
  glGetObjectParameterfvARB := wglGetProcAddress('glGetObjectParameterfvARB');
  glGetObjectParameterivARB := wglGetProcAddress('glGetObjectParameterivARB');
  glGetInfoLogARB := wglGetProcAddress('glGetInfoLogARB');
  glGetAttachedObjectsARB := wglGetProcAddress('glGetAttachedObjectsARB');
  glGetUniformLocationARB := wglGetProcAddress('glGetUniformLocationARB');
  glGetActiveUniformARB := wglGetProcAddress('glGetActiveUniformARB');
  glGetUniformfvARB := wglGetProcAddress('glGetUniformfvARB');
  glGetUniformivARB := wglGetProcAddress('glGetUniformivARB');
  glGetShaderSourceARB := wglGetProcAddress('glGetShaderSourceARB');
  glNamedStringARB := wglGetProcAddress('glNamedStringARB');
  glDeleteNamedStringARB := wglGetProcAddress('glDeleteNamedStringARB');
  glCompileShaderIncludeARB := wglGetProcAddress('glCompileShaderIncludeARB');
  glIsNamedStringARB := wglGetProcAddress('glIsNamedStringARB');
  glGetNamedStringARB := wglGetProcAddress('glGetNamedStringARB');
  glGetNamedStringivARB := wglGetProcAddress('glGetNamedStringivARB');
  glTexPageCommitmentARB := wglGetProcAddress('glTexPageCommitmentARB');
  glTexBufferARB := wglGetProcAddress('glTexBufferARB');
  glCompressedTexImage3DARB := wglGetProcAddress('glCompressedTexImage3DARB');
  glCompressedTexImage2DARB := wglGetProcAddress('glCompressedTexImage2DARB');
  glCompressedTexImage1DARB := wglGetProcAddress('glCompressedTexImage1DARB');
  glCompressedTexSubImage3DARB := wglGetProcAddress('glCompressedTexSubImage3DARB');
  glCompressedTexSubImage2DARB := wglGetProcAddress('glCompressedTexSubImage2DARB');
  glCompressedTexSubImage1DARB := wglGetProcAddress('glCompressedTexSubImage1DARB');
  glGetCompressedTexImageARB := wglGetProcAddress('glGetCompressedTexImageARB');
  glLoadTransposeMatrixfARB := wglGetProcAddress('glLoadTransposeMatrixfARB');
  glLoadTransposeMatrixdARB := wglGetProcAddress('glLoadTransposeMatrixdARB');
  glMultTransposeMatrixfARB := wglGetProcAddress('glMultTransposeMatrixfARB');
  glMultTransposeMatrixdARB := wglGetProcAddress('glMultTransposeMatrixdARB');
  glWeightbvARB := wglGetProcAddress('glWeightbvARB');
  glWeightsvARB := wglGetProcAddress('glWeightsvARB');
  glWeightivARB := wglGetProcAddress('glWeightivARB');
  glWeightfvARB := wglGetProcAddress('glWeightfvARB');
  glWeightdvARB := wglGetProcAddress('glWeightdvARB');
  glWeightubvARB := wglGetProcAddress('glWeightubvARB');
  glWeightusvARB := wglGetProcAddress('glWeightusvARB');
  glWeightuivARB := wglGetProcAddress('glWeightuivARB');
  glWeightPointerARB := wglGetProcAddress('glWeightPointerARB');
  glVertexBlendARB := wglGetProcAddress('glVertexBlendARB');
  glBindBufferARB := wglGetProcAddress('glBindBufferARB');
  glDeleteBuffersARB := wglGetProcAddress('glDeleteBuffersARB');
  glGenBuffersARB := wglGetProcAddress('glGenBuffersARB');
  glIsBufferARB := wglGetProcAddress('glIsBufferARB');
  glBufferDataARB := wglGetProcAddress('glBufferDataARB');
  glBufferSubDataARB := wglGetProcAddress('glBufferSubDataARB');
  glGetBufferSubDataARB := wglGetProcAddress('glGetBufferSubDataARB');
  glMapBufferARB := wglGetProcAddress('glMapBufferARB');
  glUnmapBufferARB := wglGetProcAddress('glUnmapBufferARB');
  glGetBufferParameterivARB := wglGetProcAddress('glGetBufferParameterivARB');
  glGetBufferPointervARB := wglGetProcAddress('glGetBufferPointervARB');
  glVertexAttrib1dARB := wglGetProcAddress('glVertexAttrib1dARB');
  glVertexAttrib1dvARB := wglGetProcAddress('glVertexAttrib1dvARB');
  glVertexAttrib1fARB := wglGetProcAddress('glVertexAttrib1fARB');
  glVertexAttrib1fvARB := wglGetProcAddress('glVertexAttrib1fvARB');
  glVertexAttrib1sARB := wglGetProcAddress('glVertexAttrib1sARB');
  glVertexAttrib1svARB := wglGetProcAddress('glVertexAttrib1svARB');
  glVertexAttrib2dARB := wglGetProcAddress('glVertexAttrib2dARB');
  glVertexAttrib2dvARB := wglGetProcAddress('glVertexAttrib2dvARB');
  glVertexAttrib2fARB := wglGetProcAddress('glVertexAttrib2fARB');
  glVertexAttrib2fvARB := wglGetProcAddress('glVertexAttrib2fvARB');
  glVertexAttrib2sARB := wglGetProcAddress('glVertexAttrib2sARB');
  glVertexAttrib2svARB := wglGetProcAddress('glVertexAttrib2svARB');
  glVertexAttrib3dARB := wglGetProcAddress('glVertexAttrib3dARB');
  glVertexAttrib3dvARB := wglGetProcAddress('glVertexAttrib3dvARB');
  glVertexAttrib3fARB := wglGetProcAddress('glVertexAttrib3fARB');
  glVertexAttrib3fvARB := wglGetProcAddress('glVertexAttrib3fvARB');
  glVertexAttrib3sARB := wglGetProcAddress('glVertexAttrib3sARB');
  glVertexAttrib3svARB := wglGetProcAddress('glVertexAttrib3svARB');
  glVertexAttrib4NbvARB := wglGetProcAddress('glVertexAttrib4NbvARB');
  glVertexAttrib4NivARB := wglGetProcAddress('glVertexAttrib4NivARB');
  glVertexAttrib4NsvARB := wglGetProcAddress('glVertexAttrib4NsvARB');
  glVertexAttrib4NubARB := wglGetProcAddress('glVertexAttrib4NubARB');
  glVertexAttrib4NubvARB := wglGetProcAddress('glVertexAttrib4NubvARB');
  glVertexAttrib4NuivARB := wglGetProcAddress('glVertexAttrib4NuivARB');
  glVertexAttrib4NusvARB := wglGetProcAddress('glVertexAttrib4NusvARB');
  glVertexAttrib4bvARB := wglGetProcAddress('glVertexAttrib4bvARB');
  glVertexAttrib4dARB := wglGetProcAddress('glVertexAttrib4dARB');
  glVertexAttrib4dvARB := wglGetProcAddress('glVertexAttrib4dvARB');
  glVertexAttrib4fARB := wglGetProcAddress('glVertexAttrib4fARB');
  glVertexAttrib4fvARB := wglGetProcAddress('glVertexAttrib4fvARB');
  glVertexAttrib4ivARB := wglGetProcAddress('glVertexAttrib4ivARB');
  glVertexAttrib4sARB := wglGetProcAddress('glVertexAttrib4sARB');
  glVertexAttrib4svARB := wglGetProcAddress('glVertexAttrib4svARB');
  glVertexAttrib4ubvARB := wglGetProcAddress('glVertexAttrib4ubvARB');
  glVertexAttrib4uivARB := wglGetProcAddress('glVertexAttrib4uivARB');
  glVertexAttrib4usvARB := wglGetProcAddress('glVertexAttrib4usvARB');
  glVertexAttribPointerARB := wglGetProcAddress('glVertexAttribPointerARB');
  glEnableVertexAttribArrayARB := wglGetProcAddress('glEnableVertexAttribArrayARB');
  glDisableVertexAttribArrayARB := wglGetProcAddress('glDisableVertexAttribArrayARB');
  glGetVertexAttribdvARB := wglGetProcAddress('glGetVertexAttribdvARB');
  glGetVertexAttribfvARB := wglGetProcAddress('glGetVertexAttribfvARB');
  glGetVertexAttribivARB := wglGetProcAddress('glGetVertexAttribivARB');
  glGetVertexAttribPointervARB := wglGetProcAddress('glGetVertexAttribPointervARB');
  glBindAttribLocationARB := wglGetProcAddress('glBindAttribLocationARB');
  glGetActiveAttribARB := wglGetProcAddress('glGetActiveAttribARB');
  glGetAttribLocationARB := wglGetProcAddress('glGetAttribLocationARB');
  glWindowPos2dARB := wglGetProcAddress('glWindowPos2dARB');
  glWindowPos2dvARB := wglGetProcAddress('glWindowPos2dvARB');
  glWindowPos2fARB := wglGetProcAddress('glWindowPos2fARB');
  glWindowPos2fvARB := wglGetProcAddress('glWindowPos2fvARB');
  glWindowPos2iARB := wglGetProcAddress('glWindowPos2iARB');
  glWindowPos2ivARB := wglGetProcAddress('glWindowPos2ivARB');
  glWindowPos2sARB := wglGetProcAddress('glWindowPos2sARB');
  glWindowPos2svARB := wglGetProcAddress('glWindowPos2svARB');
  glWindowPos3dARB := wglGetProcAddress('glWindowPos3dARB');
  glWindowPos3dvARB := wglGetProcAddress('glWindowPos3dvARB');
  glWindowPos3fARB := wglGetProcAddress('glWindowPos3fARB');
  glWindowPos3fvARB := wglGetProcAddress('glWindowPos3fvARB');
  glWindowPos3iARB := wglGetProcAddress('glWindowPos3iARB');
  glWindowPos3ivARB := wglGetProcAddress('glWindowPos3ivARB');
  glWindowPos3sARB := wglGetProcAddress('glWindowPos3sARB');
  glWindowPos3svARB := wglGetProcAddress('glWindowPos3svARB');
  glMultiTexCoord1bOES := wglGetProcAddress('glMultiTexCoord1bOES');
  glMultiTexCoord1bvOES := wglGetProcAddress('glMultiTexCoord1bvOES');
  glMultiTexCoord2bOES := wglGetProcAddress('glMultiTexCoord2bOES');
  glMultiTexCoord2bvOES := wglGetProcAddress('glMultiTexCoord2bvOES');
  glMultiTexCoord3bOES := wglGetProcAddress('glMultiTexCoord3bOES');
  glMultiTexCoord3bvOES := wglGetProcAddress('glMultiTexCoord3bvOES');
  glMultiTexCoord4bOES := wglGetProcAddress('glMultiTexCoord4bOES');
  glMultiTexCoord4bvOES := wglGetProcAddress('glMultiTexCoord4bvOES');
  glTexCoord1bOES := wglGetProcAddress('glTexCoord1bOES');
  glTexCoord1bvOES := wglGetProcAddress('glTexCoord1bvOES');
  glTexCoord2bOES := wglGetProcAddress('glTexCoord2bOES');
  glTexCoord2bvOES := wglGetProcAddress('glTexCoord2bvOES');
  glTexCoord3bOES := wglGetProcAddress('glTexCoord3bOES');
  glTexCoord3bvOES := wglGetProcAddress('glTexCoord3bvOES');
  glTexCoord4bOES := wglGetProcAddress('glTexCoord4bOES');
  glTexCoord4bvOES := wglGetProcAddress('glTexCoord4bvOES');
  glVertex2bOES := wglGetProcAddress('glVertex2bOES');
  glVertex2bvOES := wglGetProcAddress('glVertex2bvOES');
  glVertex3bOES := wglGetProcAddress('glVertex3bOES');
  glVertex3bvOES := wglGetProcAddress('glVertex3bvOES');
  glVertex4bOES := wglGetProcAddress('glVertex4bOES');
  glVertex4bvOES := wglGetProcAddress('glVertex4bvOES');
  glAlphaFuncxOES := wglGetProcAddress('glAlphaFuncxOES');
  glClearColorxOES := wglGetProcAddress('glClearColorxOES');
  glClearDepthxOES := wglGetProcAddress('glClearDepthxOES');
  glClipPlanexOES := wglGetProcAddress('glClipPlanexOES');
  glColor4xOES := wglGetProcAddress('glColor4xOES');
  glDepthRangexOES := wglGetProcAddress('glDepthRangexOES');
  glFogxOES := wglGetProcAddress('glFogxOES');
  glFogxvOES := wglGetProcAddress('glFogxvOES');
  glFrustumxOES := wglGetProcAddress('glFrustumxOES');
  glGetClipPlanexOES := wglGetProcAddress('glGetClipPlanexOES');
  glGetFixedvOES := wglGetProcAddress('glGetFixedvOES');
  glGetTexEnvxvOES := wglGetProcAddress('glGetTexEnvxvOES');
  glGetTexParameterxvOES := wglGetProcAddress('glGetTexParameterxvOES');
  glLightModelxOES := wglGetProcAddress('glLightModelxOES');
  glLightModelxvOES := wglGetProcAddress('glLightModelxvOES');
  glLightxOES := wglGetProcAddress('glLightxOES');
  glLightxvOES := wglGetProcAddress('glLightxvOES');
  glLineWidthxOES := wglGetProcAddress('glLineWidthxOES');
  glLoadMatrixxOES := wglGetProcAddress('glLoadMatrixxOES');
  glMaterialxOES := wglGetProcAddress('glMaterialxOES');
  glMaterialxvOES := wglGetProcAddress('glMaterialxvOES');
  glMultMatrixxOES := wglGetProcAddress('glMultMatrixxOES');
  glMultiTexCoord4xOES := wglGetProcAddress('glMultiTexCoord4xOES');
  glNormal3xOES := wglGetProcAddress('glNormal3xOES');
  glOrthoxOES := wglGetProcAddress('glOrthoxOES');
  glPointParameterxvOES := wglGetProcAddress('glPointParameterxvOES');
  glPointSizexOES := wglGetProcAddress('glPointSizexOES');
  glPolygonOffsetxOES := wglGetProcAddress('glPolygonOffsetxOES');
  glRotatexOES := wglGetProcAddress('glRotatexOES');
  glSampleCoverageOES := wglGetProcAddress('glSampleCoverageOES');
  glScalexOES := wglGetProcAddress('glScalexOES');
  glTexEnvxOES := wglGetProcAddress('glTexEnvxOES');
  glTexEnvxvOES := wglGetProcAddress('glTexEnvxvOES');
  glTexParameterxOES := wglGetProcAddress('glTexParameterxOES');
  glTexParameterxvOES := wglGetProcAddress('glTexParameterxvOES');
  glTranslatexOES := wglGetProcAddress('glTranslatexOES');
  glAccumxOES := wglGetProcAddress('glAccumxOES');
  glBitmapxOES := wglGetProcAddress('glBitmapxOES');
  glBlendColorxOES := wglGetProcAddress('glBlendColorxOES');
  glClearAccumxOES := wglGetProcAddress('glClearAccumxOES');
  glColor3xOES := wglGetProcAddress('glColor3xOES');
  glColor3xvOES := wglGetProcAddress('glColor3xvOES');
  glColor4xvOES := wglGetProcAddress('glColor4xvOES');
  glConvolutionParameterxOES := wglGetProcAddress('glConvolutionParameterxOES');
  glConvolutionParameterxvOES := wglGetProcAddress('glConvolutionParameterxvOES');
  glEvalCoord1xOES := wglGetProcAddress('glEvalCoord1xOES');
  glEvalCoord1xvOES := wglGetProcAddress('glEvalCoord1xvOES');
  glEvalCoord2xOES := wglGetProcAddress('glEvalCoord2xOES');
  glEvalCoord2xvOES := wglGetProcAddress('glEvalCoord2xvOES');
  glFeedbackBufferxOES := wglGetProcAddress('glFeedbackBufferxOES');
  glGetConvolutionParameterxvOES := wglGetProcAddress('glGetConvolutionParameterxvOES');
  glGetHistogramParameterxvOES := wglGetProcAddress('glGetHistogramParameterxvOES');
  glGetLightxOES := wglGetProcAddress('glGetLightxOES');
  glGetMapxvOES := wglGetProcAddress('glGetMapxvOES');
  glGetMaterialxOES := wglGetProcAddress('glGetMaterialxOES');
  glGetPixelMapxv := wglGetProcAddress('glGetPixelMapxv');
  glGetTexGenxvOES := wglGetProcAddress('glGetTexGenxvOES');
  glGetTexLevelParameterxvOES := wglGetProcAddress('glGetTexLevelParameterxvOES');
  glIndexxOES := wglGetProcAddress('glIndexxOES');
  glIndexxvOES := wglGetProcAddress('glIndexxvOES');
  glLoadTransposeMatrixxOES := wglGetProcAddress('glLoadTransposeMatrixxOES');
  glMap1xOES := wglGetProcAddress('glMap1xOES');
  glMap2xOES := wglGetProcAddress('glMap2xOES');
  glMapGrid1xOES := wglGetProcAddress('glMapGrid1xOES');
  glMapGrid2xOES := wglGetProcAddress('glMapGrid2xOES');
  glMultTransposeMatrixxOES := wglGetProcAddress('glMultTransposeMatrixxOES');
  glMultiTexCoord1xOES := wglGetProcAddress('glMultiTexCoord1xOES');
  glMultiTexCoord1xvOES := wglGetProcAddress('glMultiTexCoord1xvOES');
  glMultiTexCoord2xOES := wglGetProcAddress('glMultiTexCoord2xOES');
  glMultiTexCoord2xvOES := wglGetProcAddress('glMultiTexCoord2xvOES');
  glMultiTexCoord3xOES := wglGetProcAddress('glMultiTexCoord3xOES');
  glMultiTexCoord3xvOES := wglGetProcAddress('glMultiTexCoord3xvOES');
  glMultiTexCoord4xvOES := wglGetProcAddress('glMultiTexCoord4xvOES');
  glNormal3xvOES := wglGetProcAddress('glNormal3xvOES');
  glPassThroughxOES := wglGetProcAddress('glPassThroughxOES');
  glPixelMapx := wglGetProcAddress('glPixelMapx');
  glPixelStorex := wglGetProcAddress('glPixelStorex');
  glPixelTransferxOES := wglGetProcAddress('glPixelTransferxOES');
  glPixelZoomxOES := wglGetProcAddress('glPixelZoomxOES');
  glPrioritizeTexturesxOES := wglGetProcAddress('glPrioritizeTexturesxOES');
  glRasterPos2xOES := wglGetProcAddress('glRasterPos2xOES');
  glRasterPos2xvOES := wglGetProcAddress('glRasterPos2xvOES');
  glRasterPos3xOES := wglGetProcAddress('glRasterPos3xOES');
  glRasterPos3xvOES := wglGetProcAddress('glRasterPos3xvOES');
  glRasterPos4xOES := wglGetProcAddress('glRasterPos4xOES');
  glRasterPos4xvOES := wglGetProcAddress('glRasterPos4xvOES');
  glRectxOES := wglGetProcAddress('glRectxOES');
  glRectxvOES := wglGetProcAddress('glRectxvOES');
  glTexCoord1xOES := wglGetProcAddress('glTexCoord1xOES');
  glTexCoord1xvOES := wglGetProcAddress('glTexCoord1xvOES');
  glTexCoord2xOES := wglGetProcAddress('glTexCoord2xOES');
  glTexCoord2xvOES := wglGetProcAddress('glTexCoord2xvOES');
  glTexCoord3xOES := wglGetProcAddress('glTexCoord3xOES');
  glTexCoord3xvOES := wglGetProcAddress('glTexCoord3xvOES');
  glTexCoord4xOES := wglGetProcAddress('glTexCoord4xOES');
  glTexCoord4xvOES := wglGetProcAddress('glTexCoord4xvOES');
  glTexGenxOES := wglGetProcAddress('glTexGenxOES');
  glTexGenxvOES := wglGetProcAddress('glTexGenxvOES');
  glVertex2xOES := wglGetProcAddress('glVertex2xOES');
  glVertex2xvOES := wglGetProcAddress('glVertex2xvOES');
  glVertex3xOES := wglGetProcAddress('glVertex3xOES');
  glVertex3xvOES := wglGetProcAddress('glVertex3xvOES');
  glVertex4xOES := wglGetProcAddress('glVertex4xOES');
  glVertex4xvOES := wglGetProcAddress('glVertex4xvOES');
  glQueryMatrixxOES := wglGetProcAddress('glQueryMatrixxOES');
  glClearDepthfOES := wglGetProcAddress('glClearDepthfOES');
  glClipPlanefOES := wglGetProcAddress('glClipPlanefOES');
  glDepthRangefOES := wglGetProcAddress('glDepthRangefOES');
  glFrustumfOES := wglGetProcAddress('glFrustumfOES');
  glGetClipPlanefOES := wglGetProcAddress('glGetClipPlanefOES');
  glOrthofOES := wglGetProcAddress('glOrthofOES');
  glTbufferMask3DFX := wglGetProcAddress('glTbufferMask3DFX');
  glDebugMessageEnableAMD := wglGetProcAddress('glDebugMessageEnableAMD');
  glDebugMessageInsertAMD := wglGetProcAddress('glDebugMessageInsertAMD');
  glDebugMessageCallbackAMD := wglGetProcAddress('glDebugMessageCallbackAMD');
  glGetDebugMessageLogAMD := wglGetProcAddress('glGetDebugMessageLogAMD');
  glBlendFuncIndexedAMD := wglGetProcAddress('glBlendFuncIndexedAMD');
  glBlendFuncSeparateIndexedAMD := wglGetProcAddress('glBlendFuncSeparateIndexedAMD');
  glBlendEquationIndexedAMD := wglGetProcAddress('glBlendEquationIndexedAMD');
  glBlendEquationSeparateIndexedAMD := wglGetProcAddress('glBlendEquationSeparateIndexedAMD');
  glVertexAttribParameteriAMD := wglGetProcAddress('glVertexAttribParameteriAMD');
  glMultiDrawArraysIndirectAMD := wglGetProcAddress('glMultiDrawArraysIndirectAMD');
  glMultiDrawElementsIndirectAMD := wglGetProcAddress('glMultiDrawElementsIndirectAMD');
  glGenNamesAMD := wglGetProcAddress('glGenNamesAMD');
  glDeleteNamesAMD := wglGetProcAddress('glDeleteNamesAMD');
  glIsNameAMD := wglGetProcAddress('glIsNameAMD');
  glQueryObjectParameteruiAMD := wglGetProcAddress('glQueryObjectParameteruiAMD');
  glGetPerfMonitorGroupsAMD := wglGetProcAddress('glGetPerfMonitorGroupsAMD');
  glGetPerfMonitorCountersAMD := wglGetProcAddress('glGetPerfMonitorCountersAMD');
  glGetPerfMonitorGroupStringAMD := wglGetProcAddress('glGetPerfMonitorGroupStringAMD');
  glGetPerfMonitorCounterStringAMD := wglGetProcAddress('glGetPerfMonitorCounterStringAMD');
  glGetPerfMonitorCounterInfoAMD := wglGetProcAddress('glGetPerfMonitorCounterInfoAMD');
  glGenPerfMonitorsAMD := wglGetProcAddress('glGenPerfMonitorsAMD');
  glDeletePerfMonitorsAMD := wglGetProcAddress('glDeletePerfMonitorsAMD');
  glSelectPerfMonitorCountersAMD := wglGetProcAddress('glSelectPerfMonitorCountersAMD');
  glBeginPerfMonitorAMD := wglGetProcAddress('glBeginPerfMonitorAMD');
  glEndPerfMonitorAMD := wglGetProcAddress('glEndPerfMonitorAMD');
  glGetPerfMonitorCounterDataAMD := wglGetProcAddress('glGetPerfMonitorCounterDataAMD');
  glSetMultisamplefvAMD := wglGetProcAddress('glSetMultisamplefvAMD');
  glTexStorageSparseAMD := wglGetProcAddress('glTexStorageSparseAMD');
  glTextureStorageSparseAMD := wglGetProcAddress('glTextureStorageSparseAMD');
  glStencilOpValueAMD := wglGetProcAddress('glStencilOpValueAMD');
  glTessellationFactorAMD := wglGetProcAddress('glTessellationFactorAMD');
  glTessellationModeAMD := wglGetProcAddress('glTessellationModeAMD');
  glElementPointerAPPLE := wglGetProcAddress('glElementPointerAPPLE');
  glDrawElementArrayAPPLE := wglGetProcAddress('glDrawElementArrayAPPLE');
  glDrawRangeElementArrayAPPLE := wglGetProcAddress('glDrawRangeElementArrayAPPLE');
  glMultiDrawElementArrayAPPLE := wglGetProcAddress('glMultiDrawElementArrayAPPLE');
  glMultiDrawRangeElementArrayAPPLE := wglGetProcAddress('glMultiDrawRangeElementArrayAPPLE');
  glGenFencesAPPLE := wglGetProcAddress('glGenFencesAPPLE');
  glDeleteFencesAPPLE := wglGetProcAddress('glDeleteFencesAPPLE');
  glSetFenceAPPLE := wglGetProcAddress('glSetFenceAPPLE');
  glIsFenceAPPLE := wglGetProcAddress('glIsFenceAPPLE');
  glTestFenceAPPLE := wglGetProcAddress('glTestFenceAPPLE');
  glFinishFenceAPPLE := wglGetProcAddress('glFinishFenceAPPLE');
  glTestObjectAPPLE := wglGetProcAddress('glTestObjectAPPLE');
  glFinishObjectAPPLE := wglGetProcAddress('glFinishObjectAPPLE');
  glBufferParameteriAPPLE := wglGetProcAddress('glBufferParameteriAPPLE');
  glFlushMappedBufferRangeAPPLE := wglGetProcAddress('glFlushMappedBufferRangeAPPLE');
  glObjectPurgeableAPPLE := wglGetProcAddress('glObjectPurgeableAPPLE');
  glObjectUnpurgeableAPPLE := wglGetProcAddress('glObjectUnpurgeableAPPLE');
  glGetObjectParameterivAPPLE := wglGetProcAddress('glGetObjectParameterivAPPLE');
  glTextureRangeAPPLE := wglGetProcAddress('glTextureRangeAPPLE');
  glGetTexParameterPointervAPPLE := wglGetProcAddress('glGetTexParameterPointervAPPLE');
  glBindVertexArrayAPPLE := wglGetProcAddress('glBindVertexArrayAPPLE');
  glDeleteVertexArraysAPPLE := wglGetProcAddress('glDeleteVertexArraysAPPLE');
  glGenVertexArraysAPPLE := wglGetProcAddress('glGenVertexArraysAPPLE');
  glIsVertexArrayAPPLE := wglGetProcAddress('glIsVertexArrayAPPLE');
  glVertexArrayRangeAPPLE := wglGetProcAddress('glVertexArrayRangeAPPLE');
  glFlushVertexArrayRangeAPPLE := wglGetProcAddress('glFlushVertexArrayRangeAPPLE');
  glVertexArrayParameteriAPPLE := wglGetProcAddress('glVertexArrayParameteriAPPLE');
  glEnableVertexAttribAPPLE := wglGetProcAddress('glEnableVertexAttribAPPLE');
  glDisableVertexAttribAPPLE := wglGetProcAddress('glDisableVertexAttribAPPLE');
  glIsVertexAttribEnabledAPPLE := wglGetProcAddress('glIsVertexAttribEnabledAPPLE');
  glMapVertexAttrib1dAPPLE := wglGetProcAddress('glMapVertexAttrib1dAPPLE');
  glMapVertexAttrib1fAPPLE := wglGetProcAddress('glMapVertexAttrib1fAPPLE');
  glMapVertexAttrib2dAPPLE := wglGetProcAddress('glMapVertexAttrib2dAPPLE');
  glMapVertexAttrib2fAPPLE := wglGetProcAddress('glMapVertexAttrib2fAPPLE');
  glDrawBuffersATI := wglGetProcAddress('glDrawBuffersATI');
  glElementPointerATI := wglGetProcAddress('glElementPointerATI');
  glDrawElementArrayATI := wglGetProcAddress('glDrawElementArrayATI');
  glDrawRangeElementArrayATI := wglGetProcAddress('glDrawRangeElementArrayATI');
  glTexBumpParameterivATI := wglGetProcAddress('glTexBumpParameterivATI');
  glTexBumpParameterfvATI := wglGetProcAddress('glTexBumpParameterfvATI');
  glGetTexBumpParameterivATI := wglGetProcAddress('glGetTexBumpParameterivATI');
  glGetTexBumpParameterfvATI := wglGetProcAddress('glGetTexBumpParameterfvATI');
  glGenFragmentShadersATI := wglGetProcAddress('glGenFragmentShadersATI');
  glBindFragmentShaderATI := wglGetProcAddress('glBindFragmentShaderATI');
  glDeleteFragmentShaderATI := wglGetProcAddress('glDeleteFragmentShaderATI');
  glBeginFragmentShaderATI := wglGetProcAddress('glBeginFragmentShaderATI');
  glEndFragmentShaderATI := wglGetProcAddress('glEndFragmentShaderATI');
  glPassTexCoordATI := wglGetProcAddress('glPassTexCoordATI');
  glSampleMapATI := wglGetProcAddress('glSampleMapATI');
  glColorFragmentOp1ATI := wglGetProcAddress('glColorFragmentOp1ATI');
  glColorFragmentOp2ATI := wglGetProcAddress('glColorFragmentOp2ATI');
  glColorFragmentOp3ATI := wglGetProcAddress('glColorFragmentOp3ATI');
  glAlphaFragmentOp1ATI := wglGetProcAddress('glAlphaFragmentOp1ATI');
  glAlphaFragmentOp2ATI := wglGetProcAddress('glAlphaFragmentOp2ATI');
  glAlphaFragmentOp3ATI := wglGetProcAddress('glAlphaFragmentOp3ATI');
  glSetFragmentShaderConstantATI := wglGetProcAddress('glSetFragmentShaderConstantATI');
  glMapObjectBufferATI := wglGetProcAddress('glMapObjectBufferATI');
  glUnmapObjectBufferATI := wglGetProcAddress('glUnmapObjectBufferATI');
  glPNTrianglesiATI := wglGetProcAddress('glPNTrianglesiATI');
  glPNTrianglesfATI := wglGetProcAddress('glPNTrianglesfATI');
  glStencilOpSeparateATI := wglGetProcAddress('glStencilOpSeparateATI');
  glStencilFuncSeparateATI := wglGetProcAddress('glStencilFuncSeparateATI');
  glNewObjectBufferATI := wglGetProcAddress('glNewObjectBufferATI');
  glIsObjectBufferATI := wglGetProcAddress('glIsObjectBufferATI');
  glUpdateObjectBufferATI := wglGetProcAddress('glUpdateObjectBufferATI');
  glGetObjectBufferfvATI := wglGetProcAddress('glGetObjectBufferfvATI');
  glGetObjectBufferivATI := wglGetProcAddress('glGetObjectBufferivATI');
  glFreeObjectBufferATI := wglGetProcAddress('glFreeObjectBufferATI');
  glArrayObjectATI := wglGetProcAddress('glArrayObjectATI');
  glGetArrayObjectfvATI := wglGetProcAddress('glGetArrayObjectfvATI');
  glGetArrayObjectivATI := wglGetProcAddress('glGetArrayObjectivATI');
  glVariantArrayObjectATI := wglGetProcAddress('glVariantArrayObjectATI');
  glGetVariantArrayObjectfvATI := wglGetProcAddress('glGetVariantArrayObjectfvATI');
  glGetVariantArrayObjectivATI := wglGetProcAddress('glGetVariantArrayObjectivATI');
  glVertexAttribArrayObjectATI := wglGetProcAddress('glVertexAttribArrayObjectATI');
  glGetVertexAttribArrayObjectfvATI := wglGetProcAddress('glGetVertexAttribArrayObjectfvATI');
  glGetVertexAttribArrayObjectivATI := wglGetProcAddress('glGetVertexAttribArrayObjectivATI');
  glVertexStream1sATI := wglGetProcAddress('glVertexStream1sATI');
  glVertexStream1svATI := wglGetProcAddress('glVertexStream1svATI');
  glVertexStream1iATI := wglGetProcAddress('glVertexStream1iATI');
  glVertexStream1ivATI := wglGetProcAddress('glVertexStream1ivATI');
  glVertexStream1fATI := wglGetProcAddress('glVertexStream1fATI');
  glVertexStream1fvATI := wglGetProcAddress('glVertexStream1fvATI');
  glVertexStream1dATI := wglGetProcAddress('glVertexStream1dATI');
  glVertexStream1dvATI := wglGetProcAddress('glVertexStream1dvATI');
  glVertexStream2sATI := wglGetProcAddress('glVertexStream2sATI');
  glVertexStream2svATI := wglGetProcAddress('glVertexStream2svATI');
  glVertexStream2iATI := wglGetProcAddress('glVertexStream2iATI');
  glVertexStream2ivATI := wglGetProcAddress('glVertexStream2ivATI');
  glVertexStream2fATI := wglGetProcAddress('glVertexStream2fATI');
  glVertexStream2fvATI := wglGetProcAddress('glVertexStream2fvATI');
  glVertexStream2dATI := wglGetProcAddress('glVertexStream2dATI');
  glVertexStream2dvATI := wglGetProcAddress('glVertexStream2dvATI');
  glVertexStream3sATI := wglGetProcAddress('glVertexStream3sATI');
  glVertexStream3svATI := wglGetProcAddress('glVertexStream3svATI');
  glVertexStream3iATI := wglGetProcAddress('glVertexStream3iATI');
  glVertexStream3ivATI := wglGetProcAddress('glVertexStream3ivATI');
  glVertexStream3fATI := wglGetProcAddress('glVertexStream3fATI');
  glVertexStream3fvATI := wglGetProcAddress('glVertexStream3fvATI');
  glVertexStream3dATI := wglGetProcAddress('glVertexStream3dATI');
  glVertexStream3dvATI := wglGetProcAddress('glVertexStream3dvATI');
  glVertexStream4sATI := wglGetProcAddress('glVertexStream4sATI');
  glVertexStream4svATI := wglGetProcAddress('glVertexStream4svATI');
  glVertexStream4iATI := wglGetProcAddress('glVertexStream4iATI');
  glVertexStream4ivATI := wglGetProcAddress('glVertexStream4ivATI');
  glVertexStream4fATI := wglGetProcAddress('glVertexStream4fATI');
  glVertexStream4fvATI := wglGetProcAddress('glVertexStream4fvATI');
  glVertexStream4dATI := wglGetProcAddress('glVertexStream4dATI');
  glVertexStream4dvATI := wglGetProcAddress('glVertexStream4dvATI');
  glNormalStream3bATI := wglGetProcAddress('glNormalStream3bATI');
  glNormalStream3bvATI := wglGetProcAddress('glNormalStream3bvATI');
  glNormalStream3sATI := wglGetProcAddress('glNormalStream3sATI');
  glNormalStream3svATI := wglGetProcAddress('glNormalStream3svATI');
  glNormalStream3iATI := wglGetProcAddress('glNormalStream3iATI');
  glNormalStream3ivATI := wglGetProcAddress('glNormalStream3ivATI');
  glNormalStream3fATI := wglGetProcAddress('glNormalStream3fATI');
  glNormalStream3fvATI := wglGetProcAddress('glNormalStream3fvATI');
  glNormalStream3dATI := wglGetProcAddress('glNormalStream3dATI');
  glNormalStream3dvATI := wglGetProcAddress('glNormalStream3dvATI');
  glClientActiveVertexStreamATI := wglGetProcAddress('glClientActiveVertexStreamATI');
  glVertexBlendEnviATI := wglGetProcAddress('glVertexBlendEnviATI');
  glVertexBlendEnvfATI := wglGetProcAddress('glVertexBlendEnvfATI');
  glUniformBufferEXT := wglGetProcAddress('glUniformBufferEXT');
  glGetUniformBufferSizeEXT := wglGetProcAddress('glGetUniformBufferSizeEXT');
  glGetUniformOffsetEXT := wglGetProcAddress('glGetUniformOffsetEXT');
  glBlendColorEXT := wglGetProcAddress('glBlendColorEXT');
  glBlendEquationSeparateEXT := wglGetProcAddress('glBlendEquationSeparateEXT');
  glBlendFuncSeparateEXT := wglGetProcAddress('glBlendFuncSeparateEXT');
  glBlendEquationEXT := wglGetProcAddress('glBlendEquationEXT');
  glColorSubTableEXT := wglGetProcAddress('glColorSubTableEXT');
  glCopyColorSubTableEXT := wglGetProcAddress('glCopyColorSubTableEXT');
  glLockArraysEXT := wglGetProcAddress('glLockArraysEXT');
  glUnlockArraysEXT := wglGetProcAddress('glUnlockArraysEXT');
  glConvolutionFilter1DEXT := wglGetProcAddress('glConvolutionFilter1DEXT');
  glConvolutionFilter2DEXT := wglGetProcAddress('glConvolutionFilter2DEXT');
  glConvolutionParameterfEXT := wglGetProcAddress('glConvolutionParameterfEXT');
  glConvolutionParameterfvEXT := wglGetProcAddress('glConvolutionParameterfvEXT');
  glConvolutionParameteriEXT := wglGetProcAddress('glConvolutionParameteriEXT');
  glConvolutionParameterivEXT := wglGetProcAddress('glConvolutionParameterivEXT');
  glCopyConvolutionFilter1DEXT := wglGetProcAddress('glCopyConvolutionFilter1DEXT');
  glCopyConvolutionFilter2DEXT := wglGetProcAddress('glCopyConvolutionFilter2DEXT');
  glGetConvolutionFilterEXT := wglGetProcAddress('glGetConvolutionFilterEXT');
  glGetConvolutionParameterfvEXT := wglGetProcAddress('glGetConvolutionParameterfvEXT');
  glGetConvolutionParameterivEXT := wglGetProcAddress('glGetConvolutionParameterivEXT');
  glGetSeparableFilterEXT := wglGetProcAddress('glGetSeparableFilterEXT');
  glSeparableFilter2DEXT := wglGetProcAddress('glSeparableFilter2DEXT');
  glTangent3bEXT := wglGetProcAddress('glTangent3bEXT');
  glTangent3bvEXT := wglGetProcAddress('glTangent3bvEXT');
  glTangent3dEXT := wglGetProcAddress('glTangent3dEXT');
  glTangent3dvEXT := wglGetProcAddress('glTangent3dvEXT');
  glTangent3fEXT := wglGetProcAddress('glTangent3fEXT');
  glTangent3fvEXT := wglGetProcAddress('glTangent3fvEXT');
  glTangent3iEXT := wglGetProcAddress('glTangent3iEXT');
  glTangent3ivEXT := wglGetProcAddress('glTangent3ivEXT');
  glTangent3sEXT := wglGetProcAddress('glTangent3sEXT');
  glTangent3svEXT := wglGetProcAddress('glTangent3svEXT');
  glBinormal3bEXT := wglGetProcAddress('glBinormal3bEXT');
  glBinormal3bvEXT := wglGetProcAddress('glBinormal3bvEXT');
  glBinormal3dEXT := wglGetProcAddress('glBinormal3dEXT');
  glBinormal3dvEXT := wglGetProcAddress('glBinormal3dvEXT');
  glBinormal3fEXT := wglGetProcAddress('glBinormal3fEXT');
  glBinormal3fvEXT := wglGetProcAddress('glBinormal3fvEXT');
  glBinormal3iEXT := wglGetProcAddress('glBinormal3iEXT');
  glBinormal3ivEXT := wglGetProcAddress('glBinormal3ivEXT');
  glBinormal3sEXT := wglGetProcAddress('glBinormal3sEXT');
  glBinormal3svEXT := wglGetProcAddress('glBinormal3svEXT');
  glTangentPointerEXT := wglGetProcAddress('glTangentPointerEXT');
  glBinormalPointerEXT := wglGetProcAddress('glBinormalPointerEXT');
  glCopyTexImage1DEXT := wglGetProcAddress('glCopyTexImage1DEXT');
  glCopyTexImage2DEXT := wglGetProcAddress('glCopyTexImage2DEXT');
  glCopyTexSubImage1DEXT := wglGetProcAddress('glCopyTexSubImage1DEXT');
  glCopyTexSubImage2DEXT := wglGetProcAddress('glCopyTexSubImage2DEXT');
  glCopyTexSubImage3DEXT := wglGetProcAddress('glCopyTexSubImage3DEXT');
  glCullParameterdvEXT := wglGetProcAddress('glCullParameterdvEXT');
  glCullParameterfvEXT := wglGetProcAddress('glCullParameterfvEXT');
  glLabelObjectEXT := wglGetProcAddress('glLabelObjectEXT');
  glGetObjectLabelEXT := wglGetProcAddress('glGetObjectLabelEXT');
  glInsertEventMarkerEXT := wglGetProcAddress('glInsertEventMarkerEXT');
  glPushGroupMarkerEXT := wglGetProcAddress('glPushGroupMarkerEXT');
  glPopGroupMarkerEXT := wglGetProcAddress('glPopGroupMarkerEXT');
  glDepthBoundsEXT := wglGetProcAddress('glDepthBoundsEXT');
  glMatrixLoadfEXT := wglGetProcAddress('glMatrixLoadfEXT');
  glMatrixLoaddEXT := wglGetProcAddress('glMatrixLoaddEXT');
  glMatrixMultfEXT := wglGetProcAddress('glMatrixMultfEXT');
  glMatrixMultdEXT := wglGetProcAddress('glMatrixMultdEXT');
  glMatrixLoadIdentityEXT := wglGetProcAddress('glMatrixLoadIdentityEXT');
  glMatrixRotatefEXT := wglGetProcAddress('glMatrixRotatefEXT');
  glMatrixRotatedEXT := wglGetProcAddress('glMatrixRotatedEXT');
  glMatrixScalefEXT := wglGetProcAddress('glMatrixScalefEXT');
  glMatrixScaledEXT := wglGetProcAddress('glMatrixScaledEXT');
  glMatrixTranslatefEXT := wglGetProcAddress('glMatrixTranslatefEXT');
  glMatrixTranslatedEXT := wglGetProcAddress('glMatrixTranslatedEXT');
  glMatrixFrustumEXT := wglGetProcAddress('glMatrixFrustumEXT');
  glMatrixOrthoEXT := wglGetProcAddress('glMatrixOrthoEXT');
  glMatrixPopEXT := wglGetProcAddress('glMatrixPopEXT');
  glMatrixPushEXT := wglGetProcAddress('glMatrixPushEXT');
  glClientAttribDefaultEXT := wglGetProcAddress('glClientAttribDefaultEXT');
  glPushClientAttribDefaultEXT := wglGetProcAddress('glPushClientAttribDefaultEXT');
  glTextureParameterfEXT := wglGetProcAddress('glTextureParameterfEXT');
  glTextureParameterfvEXT := wglGetProcAddress('glTextureParameterfvEXT');
  glTextureParameteriEXT := wglGetProcAddress('glTextureParameteriEXT');
  glTextureParameterivEXT := wglGetProcAddress('glTextureParameterivEXT');
  glTextureImage1DEXT := wglGetProcAddress('glTextureImage1DEXT');
  glTextureImage2DEXT := wglGetProcAddress('glTextureImage2DEXT');
  glTextureSubImage1DEXT := wglGetProcAddress('glTextureSubImage1DEXT');
  glTextureSubImage2DEXT := wglGetProcAddress('glTextureSubImage2DEXT');
  glCopyTextureImage1DEXT := wglGetProcAddress('glCopyTextureImage1DEXT');
  glCopyTextureImage2DEXT := wglGetProcAddress('glCopyTextureImage2DEXT');
  glCopyTextureSubImage1DEXT := wglGetProcAddress('glCopyTextureSubImage1DEXT');
  glCopyTextureSubImage2DEXT := wglGetProcAddress('glCopyTextureSubImage2DEXT');
  glGetTextureImageEXT := wglGetProcAddress('glGetTextureImageEXT');
  glGetTextureParameterfvEXT := wglGetProcAddress('glGetTextureParameterfvEXT');
  glGetTextureParameterivEXT := wglGetProcAddress('glGetTextureParameterivEXT');
  glGetTextureLevelParameterfvEXT := wglGetProcAddress('glGetTextureLevelParameterfvEXT');
  glGetTextureLevelParameterivEXT := wglGetProcAddress('glGetTextureLevelParameterivEXT');
  glTextureImage3DEXT := wglGetProcAddress('glTextureImage3DEXT');
  glTextureSubImage3DEXT := wglGetProcAddress('glTextureSubImage3DEXT');
  glCopyTextureSubImage3DEXT := wglGetProcAddress('glCopyTextureSubImage3DEXT');
  glBindMultiTextureEXT := wglGetProcAddress('glBindMultiTextureEXT');
  glMultiTexCoordPointerEXT := wglGetProcAddress('glMultiTexCoordPointerEXT');
  glMultiTexEnvfEXT := wglGetProcAddress('glMultiTexEnvfEXT');
  glMultiTexEnvfvEXT := wglGetProcAddress('glMultiTexEnvfvEXT');
  glMultiTexEnviEXT := wglGetProcAddress('glMultiTexEnviEXT');
  glMultiTexEnvivEXT := wglGetProcAddress('glMultiTexEnvivEXT');
  glMultiTexGendEXT := wglGetProcAddress('glMultiTexGendEXT');
  glMultiTexGendvEXT := wglGetProcAddress('glMultiTexGendvEXT');
  glMultiTexGenfEXT := wglGetProcAddress('glMultiTexGenfEXT');
  glMultiTexGenfvEXT := wglGetProcAddress('glMultiTexGenfvEXT');
  glMultiTexGeniEXT := wglGetProcAddress('glMultiTexGeniEXT');
  glMultiTexGenivEXT := wglGetProcAddress('glMultiTexGenivEXT');
  glGetMultiTexEnvfvEXT := wglGetProcAddress('glGetMultiTexEnvfvEXT');
  glGetMultiTexEnvivEXT := wglGetProcAddress('glGetMultiTexEnvivEXT');
  glGetMultiTexGendvEXT := wglGetProcAddress('glGetMultiTexGendvEXT');
  glGetMultiTexGenfvEXT := wglGetProcAddress('glGetMultiTexGenfvEXT');
  glGetMultiTexGenivEXT := wglGetProcAddress('glGetMultiTexGenivEXT');
  glMultiTexParameteriEXT := wglGetProcAddress('glMultiTexParameteriEXT');
  glMultiTexParameterivEXT := wglGetProcAddress('glMultiTexParameterivEXT');
  glMultiTexParameterfEXT := wglGetProcAddress('glMultiTexParameterfEXT');
  glMultiTexParameterfvEXT := wglGetProcAddress('glMultiTexParameterfvEXT');
  glMultiTexImage1DEXT := wglGetProcAddress('glMultiTexImage1DEXT');
  glMultiTexImage2DEXT := wglGetProcAddress('glMultiTexImage2DEXT');
  glMultiTexSubImage1DEXT := wglGetProcAddress('glMultiTexSubImage1DEXT');
  glMultiTexSubImage2DEXT := wglGetProcAddress('glMultiTexSubImage2DEXT');
  glCopyMultiTexImage1DEXT := wglGetProcAddress('glCopyMultiTexImage1DEXT');
  glCopyMultiTexImage2DEXT := wglGetProcAddress('glCopyMultiTexImage2DEXT');
  glCopyMultiTexSubImage1DEXT := wglGetProcAddress('glCopyMultiTexSubImage1DEXT');
  glCopyMultiTexSubImage2DEXT := wglGetProcAddress('glCopyMultiTexSubImage2DEXT');
  glGetMultiTexImageEXT := wglGetProcAddress('glGetMultiTexImageEXT');
  glGetMultiTexParameterfvEXT := wglGetProcAddress('glGetMultiTexParameterfvEXT');
  glGetMultiTexParameterivEXT := wglGetProcAddress('glGetMultiTexParameterivEXT');
  glGetMultiTexLevelParameterfvEXT := wglGetProcAddress('glGetMultiTexLevelParameterfvEXT');
  glGetMultiTexLevelParameterivEXT := wglGetProcAddress('glGetMultiTexLevelParameterivEXT');
  glMultiTexImage3DEXT := wglGetProcAddress('glMultiTexImage3DEXT');
  glMultiTexSubImage3DEXT := wglGetProcAddress('glMultiTexSubImage3DEXT');
  glCopyMultiTexSubImage3DEXT := wglGetProcAddress('glCopyMultiTexSubImage3DEXT');
  glEnableClientStateIndexedEXT := wglGetProcAddress('glEnableClientStateIndexedEXT');
  glDisableClientStateIndexedEXT := wglGetProcAddress('glDisableClientStateIndexedEXT');
  glGetFloatIndexedvEXT := wglGetProcAddress('glGetFloatIndexedvEXT');
  glGetDoubleIndexedvEXT := wglGetProcAddress('glGetDoubleIndexedvEXT');
  glGetPointerIndexedvEXT := wglGetProcAddress('glGetPointerIndexedvEXT');
  glEnableIndexedEXT := wglGetProcAddress('glEnableIndexedEXT');
  glDisableIndexedEXT := wglGetProcAddress('glDisableIndexedEXT');
  glIsEnabledIndexedEXT := wglGetProcAddress('glIsEnabledIndexedEXT');
  glGetIntegerIndexedvEXT := wglGetProcAddress('glGetIntegerIndexedvEXT');
  glGetBooleanIndexedvEXT := wglGetProcAddress('glGetBooleanIndexedvEXT');
  glCompressedTextureImage3DEXT := wglGetProcAddress('glCompressedTextureImage3DEXT');
  glCompressedTextureImage2DEXT := wglGetProcAddress('glCompressedTextureImage2DEXT');
  glCompressedTextureImage1DEXT := wglGetProcAddress('glCompressedTextureImage1DEXT');
  glCompressedTextureSubImage3DEXT := wglGetProcAddress('glCompressedTextureSubImage3DEXT');
  glCompressedTextureSubImage2DEXT := wglGetProcAddress('glCompressedTextureSubImage2DEXT');
  glCompressedTextureSubImage1DEXT := wglGetProcAddress('glCompressedTextureSubImage1DEXT');
  glGetCompressedTextureImageEXT := wglGetProcAddress('glGetCompressedTextureImageEXT');
  glCompressedMultiTexImage3DEXT := wglGetProcAddress('glCompressedMultiTexImage3DEXT');
  glCompressedMultiTexImage2DEXT := wglGetProcAddress('glCompressedMultiTexImage2DEXT');
  glCompressedMultiTexImage1DEXT := wglGetProcAddress('glCompressedMultiTexImage1DEXT');
  glCompressedMultiTexSubImage3DEXT := wglGetProcAddress('glCompressedMultiTexSubImage3DEXT');
  glCompressedMultiTexSubImage2DEXT := wglGetProcAddress('glCompressedMultiTexSubImage2DEXT');
  glCompressedMultiTexSubImage1DEXT := wglGetProcAddress('glCompressedMultiTexSubImage1DEXT');
  glGetCompressedMultiTexImageEXT := wglGetProcAddress('glGetCompressedMultiTexImageEXT');
  glMatrixLoadTransposefEXT := wglGetProcAddress('glMatrixLoadTransposefEXT');
  glMatrixLoadTransposedEXT := wglGetProcAddress('glMatrixLoadTransposedEXT');
  glMatrixMultTransposefEXT := wglGetProcAddress('glMatrixMultTransposefEXT');
  glMatrixMultTransposedEXT := wglGetProcAddress('glMatrixMultTransposedEXT');
  glNamedBufferDataEXT := wglGetProcAddress('glNamedBufferDataEXT');
  glNamedBufferSubDataEXT := wglGetProcAddress('glNamedBufferSubDataEXT');
  glMapNamedBufferEXT := wglGetProcAddress('glMapNamedBufferEXT');
  glUnmapNamedBufferEXT := wglGetProcAddress('glUnmapNamedBufferEXT');
  glGetNamedBufferParameterivEXT := wglGetProcAddress('glGetNamedBufferParameterivEXT');
  glGetNamedBufferPointervEXT := wglGetProcAddress('glGetNamedBufferPointervEXT');
  glGetNamedBufferSubDataEXT := wglGetProcAddress('glGetNamedBufferSubDataEXT');
  glProgramUniform1fEXT := wglGetProcAddress('glProgramUniform1fEXT');
  glProgramUniform2fEXT := wglGetProcAddress('glProgramUniform2fEXT');
  glProgramUniform3fEXT := wglGetProcAddress('glProgramUniform3fEXT');
  glProgramUniform4fEXT := wglGetProcAddress('glProgramUniform4fEXT');
  glProgramUniform1iEXT := wglGetProcAddress('glProgramUniform1iEXT');
  glProgramUniform2iEXT := wglGetProcAddress('glProgramUniform2iEXT');
  glProgramUniform3iEXT := wglGetProcAddress('glProgramUniform3iEXT');
  glProgramUniform4iEXT := wglGetProcAddress('glProgramUniform4iEXT');
  glProgramUniform1fvEXT := wglGetProcAddress('glProgramUniform1fvEXT');
  glProgramUniform2fvEXT := wglGetProcAddress('glProgramUniform2fvEXT');
  glProgramUniform3fvEXT := wglGetProcAddress('glProgramUniform3fvEXT');
  glProgramUniform4fvEXT := wglGetProcAddress('glProgramUniform4fvEXT');
  glProgramUniform1ivEXT := wglGetProcAddress('glProgramUniform1ivEXT');
  glProgramUniform2ivEXT := wglGetProcAddress('glProgramUniform2ivEXT');
  glProgramUniform3ivEXT := wglGetProcAddress('glProgramUniform3ivEXT');
  glProgramUniform4ivEXT := wglGetProcAddress('glProgramUniform4ivEXT');
  glProgramUniformMatrix2fvEXT := wglGetProcAddress('glProgramUniformMatrix2fvEXT');
  glProgramUniformMatrix3fvEXT := wglGetProcAddress('glProgramUniformMatrix3fvEXT');
  glProgramUniformMatrix4fvEXT := wglGetProcAddress('glProgramUniformMatrix4fvEXT');
  glProgramUniformMatrix2x3fvEXT := wglGetProcAddress('glProgramUniformMatrix2x3fvEXT');
  glProgramUniformMatrix3x2fvEXT := wglGetProcAddress('glProgramUniformMatrix3x2fvEXT');
  glProgramUniformMatrix2x4fvEXT := wglGetProcAddress('glProgramUniformMatrix2x4fvEXT');
  glProgramUniformMatrix4x2fvEXT := wglGetProcAddress('glProgramUniformMatrix4x2fvEXT');
  glProgramUniformMatrix3x4fvEXT := wglGetProcAddress('glProgramUniformMatrix3x4fvEXT');
  glProgramUniformMatrix4x3fvEXT := wglGetProcAddress('glProgramUniformMatrix4x3fvEXT');
  glTextureBufferEXT := wglGetProcAddress('glTextureBufferEXT');
  glMultiTexBufferEXT := wglGetProcAddress('glMultiTexBufferEXT');
  glTextureParameterIivEXT := wglGetProcAddress('glTextureParameterIivEXT');
  glTextureParameterIuivEXT := wglGetProcAddress('glTextureParameterIuivEXT');
  glGetTextureParameterIivEXT := wglGetProcAddress('glGetTextureParameterIivEXT');
  glGetTextureParameterIuivEXT := wglGetProcAddress('glGetTextureParameterIuivEXT');
  glMultiTexParameterIivEXT := wglGetProcAddress('glMultiTexParameterIivEXT');
  glMultiTexParameterIuivEXT := wglGetProcAddress('glMultiTexParameterIuivEXT');
  glGetMultiTexParameterIivEXT := wglGetProcAddress('glGetMultiTexParameterIivEXT');
  glGetMultiTexParameterIuivEXT := wglGetProcAddress('glGetMultiTexParameterIuivEXT');
  glProgramUniform1uiEXT := wglGetProcAddress('glProgramUniform1uiEXT');
  glProgramUniform2uiEXT := wglGetProcAddress('glProgramUniform2uiEXT');
  glProgramUniform3uiEXT := wglGetProcAddress('glProgramUniform3uiEXT');
  glProgramUniform4uiEXT := wglGetProcAddress('glProgramUniform4uiEXT');
  glProgramUniform1uivEXT := wglGetProcAddress('glProgramUniform1uivEXT');
  glProgramUniform2uivEXT := wglGetProcAddress('glProgramUniform2uivEXT');
  glProgramUniform3uivEXT := wglGetProcAddress('glProgramUniform3uivEXT');
  glProgramUniform4uivEXT := wglGetProcAddress('glProgramUniform4uivEXT');
  glNamedProgramLocalParameters4fvEXT := wglGetProcAddress('glNamedProgramLocalParameters4fvEXT');
  glNamedProgramLocalParameterI4iEXT := wglGetProcAddress('glNamedProgramLocalParameterI4iEXT');
  glNamedProgramLocalParameterI4ivEXT := wglGetProcAddress('glNamedProgramLocalParameterI4ivEXT');
  glNamedProgramLocalParametersI4ivEXT := wglGetProcAddress('glNamedProgramLocalParametersI4ivEXT');
  glNamedProgramLocalParameterI4uiEXT := wglGetProcAddress('glNamedProgramLocalParameterI4uiEXT');
  glNamedProgramLocalParameterI4uivEXT := wglGetProcAddress('glNamedProgramLocalParameterI4uivEXT');
  glNamedProgramLocalParametersI4uivEXT := wglGetProcAddress('glNamedProgramLocalParametersI4uivEXT');
  glGetNamedProgramLocalParameterIivEXT := wglGetProcAddress('glGetNamedProgramLocalParameterIivEXT');
  glGetNamedProgramLocalParameterIuivEXT := wglGetProcAddress('glGetNamedProgramLocalParameterIuivEXT');
  glEnableClientStateiEXT := wglGetProcAddress('glEnableClientStateiEXT');
  glDisableClientStateiEXT := wglGetProcAddress('glDisableClientStateiEXT');
  glGetFloati_vEXT := wglGetProcAddress('glGetFloati_vEXT');
  glGetDoublei_vEXT := wglGetProcAddress('glGetDoublei_vEXT');
  glGetPointeri_vEXT := wglGetProcAddress('glGetPointeri_vEXT');
  glNamedProgramStringEXT := wglGetProcAddress('glNamedProgramStringEXT');
  glNamedProgramLocalParameter4dEXT := wglGetProcAddress('glNamedProgramLocalParameter4dEXT');
  glNamedProgramLocalParameter4dvEXT := wglGetProcAddress('glNamedProgramLocalParameter4dvEXT');
  glNamedProgramLocalParameter4fEXT := wglGetProcAddress('glNamedProgramLocalParameter4fEXT');
  glNamedProgramLocalParameter4fvEXT := wglGetProcAddress('glNamedProgramLocalParameter4fvEXT');
  glGetNamedProgramLocalParameterdvEXT := wglGetProcAddress('glGetNamedProgramLocalParameterdvEXT');
  glGetNamedProgramLocalParameterfvEXT := wglGetProcAddress('glGetNamedProgramLocalParameterfvEXT');
  glGetNamedProgramivEXT := wglGetProcAddress('glGetNamedProgramivEXT');
  glGetNamedProgramStringEXT := wglGetProcAddress('glGetNamedProgramStringEXT');
  glNamedRenderbufferStorageEXT := wglGetProcAddress('glNamedRenderbufferStorageEXT');
  glGetNamedRenderbufferParameterivEXT := wglGetProcAddress('glGetNamedRenderbufferParameterivEXT');
  glNamedRenderbufferStorageMultisampleEXT := wglGetProcAddress('glNamedRenderbufferStorageMultisampleEXT');
  glNamedRenderbufferStorageMultisampleCoverageEXT := wglGetProcAddress('glNamedRenderbufferStorageMultisampleCoverageEXT');
  glCheckNamedFramebufferStatusEXT := wglGetProcAddress('glCheckNamedFramebufferStatusEXT');
  glNamedFramebufferTexture1DEXT := wglGetProcAddress('glNamedFramebufferTexture1DEXT');
  glNamedFramebufferTexture2DEXT := wglGetProcAddress('glNamedFramebufferTexture2DEXT');
  glNamedFramebufferTexture3DEXT := wglGetProcAddress('glNamedFramebufferTexture3DEXT');
  glNamedFramebufferRenderbufferEXT := wglGetProcAddress('glNamedFramebufferRenderbufferEXT');
  glGetNamedFramebufferAttachmentParameterivEXT := wglGetProcAddress('glGetNamedFramebufferAttachmentParameterivEXT');
  glGenerateTextureMipmapEXT := wglGetProcAddress('glGenerateTextureMipmapEXT');
  glGenerateMultiTexMipmapEXT := wglGetProcAddress('glGenerateMultiTexMipmapEXT');
  glFramebufferDrawBufferEXT := wglGetProcAddress('glFramebufferDrawBufferEXT');
  glFramebufferDrawBuffersEXT := wglGetProcAddress('glFramebufferDrawBuffersEXT');
  glFramebufferReadBufferEXT := wglGetProcAddress('glFramebufferReadBufferEXT');
  glGetFramebufferParameterivEXT := wglGetProcAddress('glGetFramebufferParameterivEXT');
  glNamedCopyBufferSubDataEXT := wglGetProcAddress('glNamedCopyBufferSubDataEXT');
  glNamedFramebufferTextureEXT := wglGetProcAddress('glNamedFramebufferTextureEXT');
  glNamedFramebufferTextureLayerEXT := wglGetProcAddress('glNamedFramebufferTextureLayerEXT');
  glNamedFramebufferTextureFaceEXT := wglGetProcAddress('glNamedFramebufferTextureFaceEXT');
  glTextureRenderbufferEXT := wglGetProcAddress('glTextureRenderbufferEXT');
  glMultiTexRenderbufferEXT := wglGetProcAddress('glMultiTexRenderbufferEXT');
  glVertexArrayVertexOffsetEXT := wglGetProcAddress('glVertexArrayVertexOffsetEXT');
  glVertexArrayColorOffsetEXT := wglGetProcAddress('glVertexArrayColorOffsetEXT');
  glVertexArrayEdgeFlagOffsetEXT := wglGetProcAddress('glVertexArrayEdgeFlagOffsetEXT');
  glVertexArrayIndexOffsetEXT := wglGetProcAddress('glVertexArrayIndexOffsetEXT');
  glVertexArrayNormalOffsetEXT := wglGetProcAddress('glVertexArrayNormalOffsetEXT');
  glVertexArrayTexCoordOffsetEXT := wglGetProcAddress('glVertexArrayTexCoordOffsetEXT');
  glVertexArrayMultiTexCoordOffsetEXT := wglGetProcAddress('glVertexArrayMultiTexCoordOffsetEXT');
  glVertexArrayFogCoordOffsetEXT := wglGetProcAddress('glVertexArrayFogCoordOffsetEXT');
  glVertexArraySecondaryColorOffsetEXT := wglGetProcAddress('glVertexArraySecondaryColorOffsetEXT');
  glVertexArrayVertexAttribOffsetEXT := wglGetProcAddress('glVertexArrayVertexAttribOffsetEXT');
  glVertexArrayVertexAttribIOffsetEXT := wglGetProcAddress('glVertexArrayVertexAttribIOffsetEXT');
  glEnableVertexArrayEXT := wglGetProcAddress('glEnableVertexArrayEXT');
  glDisableVertexArrayEXT := wglGetProcAddress('glDisableVertexArrayEXT');
  glEnableVertexArrayAttribEXT := wglGetProcAddress('glEnableVertexArrayAttribEXT');
  glDisableVertexArrayAttribEXT := wglGetProcAddress('glDisableVertexArrayAttribEXT');
  glGetVertexArrayIntegervEXT := wglGetProcAddress('glGetVertexArrayIntegervEXT');
  glGetVertexArrayPointervEXT := wglGetProcAddress('glGetVertexArrayPointervEXT');
  glGetVertexArrayIntegeri_vEXT := wglGetProcAddress('glGetVertexArrayIntegeri_vEXT');
  glGetVertexArrayPointeri_vEXT := wglGetProcAddress('glGetVertexArrayPointeri_vEXT');
  glMapNamedBufferRangeEXT := wglGetProcAddress('glMapNamedBufferRangeEXT');
  glFlushMappedNamedBufferRangeEXT := wglGetProcAddress('glFlushMappedNamedBufferRangeEXT');
  glNamedBufferStorageEXT := wglGetProcAddress('glNamedBufferStorageEXT');
  glClearNamedBufferDataEXT := wglGetProcAddress('glClearNamedBufferDataEXT');
  glClearNamedBufferSubDataEXT := wglGetProcAddress('glClearNamedBufferSubDataEXT');
  glNamedFramebufferParameteriEXT := wglGetProcAddress('glNamedFramebufferParameteriEXT');
  glGetNamedFramebufferParameterivEXT := wglGetProcAddress('glGetNamedFramebufferParameterivEXT');
  glProgramUniform1dEXT := wglGetProcAddress('glProgramUniform1dEXT');
  glProgramUniform2dEXT := wglGetProcAddress('glProgramUniform2dEXT');
  glProgramUniform3dEXT := wglGetProcAddress('glProgramUniform3dEXT');
  glProgramUniform4dEXT := wglGetProcAddress('glProgramUniform4dEXT');
  glProgramUniform1dvEXT := wglGetProcAddress('glProgramUniform1dvEXT');
  glProgramUniform2dvEXT := wglGetProcAddress('glProgramUniform2dvEXT');
  glProgramUniform3dvEXT := wglGetProcAddress('glProgramUniform3dvEXT');
  glProgramUniform4dvEXT := wglGetProcAddress('glProgramUniform4dvEXT');
  glProgramUniformMatrix2dvEXT := wglGetProcAddress('glProgramUniformMatrix2dvEXT');
  glProgramUniformMatrix3dvEXT := wglGetProcAddress('glProgramUniformMatrix3dvEXT');
  glProgramUniformMatrix4dvEXT := wglGetProcAddress('glProgramUniformMatrix4dvEXT');
  glProgramUniformMatrix2x3dvEXT := wglGetProcAddress('glProgramUniformMatrix2x3dvEXT');
  glProgramUniformMatrix2x4dvEXT := wglGetProcAddress('glProgramUniformMatrix2x4dvEXT');
  glProgramUniformMatrix3x2dvEXT := wglGetProcAddress('glProgramUniformMatrix3x2dvEXT');
  glProgramUniformMatrix3x4dvEXT := wglGetProcAddress('glProgramUniformMatrix3x4dvEXT');
  glProgramUniformMatrix4x2dvEXT := wglGetProcAddress('glProgramUniformMatrix4x2dvEXT');
  glProgramUniformMatrix4x3dvEXT := wglGetProcAddress('glProgramUniformMatrix4x3dvEXT');
  glTextureBufferRangeEXT := wglGetProcAddress('glTextureBufferRangeEXT');
  glTextureStorage1DEXT := wglGetProcAddress('glTextureStorage1DEXT');
  glTextureStorage2DEXT := wglGetProcAddress('glTextureStorage2DEXT');
  glTextureStorage3DEXT := wglGetProcAddress('glTextureStorage3DEXT');
  glTextureStorage2DMultisampleEXT := wglGetProcAddress('glTextureStorage2DMultisampleEXT');
  glTextureStorage3DMultisampleEXT := wglGetProcAddress('glTextureStorage3DMultisampleEXT');
  glVertexArrayBindVertexBufferEXT := wglGetProcAddress('glVertexArrayBindVertexBufferEXT');
  glVertexArrayVertexAttribFormatEXT := wglGetProcAddress('glVertexArrayVertexAttribFormatEXT');
  glVertexArrayVertexAttribIFormatEXT := wglGetProcAddress('glVertexArrayVertexAttribIFormatEXT');
  glVertexArrayVertexAttribLFormatEXT := wglGetProcAddress('glVertexArrayVertexAttribLFormatEXT');
  glVertexArrayVertexAttribBindingEXT := wglGetProcAddress('glVertexArrayVertexAttribBindingEXT');
  glVertexArrayVertexBindingDivisorEXT := wglGetProcAddress('glVertexArrayVertexBindingDivisorEXT');
  glVertexArrayVertexAttribLOffsetEXT := wglGetProcAddress('glVertexArrayVertexAttribLOffsetEXT');
  glTexturePageCommitmentEXT := wglGetProcAddress('glTexturePageCommitmentEXT');
  glVertexArrayVertexAttribDivisorEXT := wglGetProcAddress('glVertexArrayVertexAttribDivisorEXT');
  glColorMaskIndexedEXT := wglGetProcAddress('glColorMaskIndexedEXT');
  glDrawArraysInstancedEXT := wglGetProcAddress('glDrawArraysInstancedEXT');
  glDrawElementsInstancedEXT := wglGetProcAddress('glDrawElementsInstancedEXT');
  glDrawRangeElementsEXT := wglGetProcAddress('glDrawRangeElementsEXT');
  glFogCoordfEXT := wglGetProcAddress('glFogCoordfEXT');
  glFogCoordfvEXT := wglGetProcAddress('glFogCoordfvEXT');
  glFogCoorddEXT := wglGetProcAddress('glFogCoorddEXT');
  glFogCoorddvEXT := wglGetProcAddress('glFogCoorddvEXT');
  glFogCoordPointerEXT := wglGetProcAddress('glFogCoordPointerEXT');
  glBlitFramebufferEXT := wglGetProcAddress('glBlitFramebufferEXT');
  glRenderbufferStorageMultisampleEXT := wglGetProcAddress('glRenderbufferStorageMultisampleEXT');
  glIsRenderbufferEXT := wglGetProcAddress('glIsRenderbufferEXT');
  glBindRenderbufferEXT := wglGetProcAddress('glBindRenderbufferEXT');
  glDeleteRenderbuffersEXT := wglGetProcAddress('glDeleteRenderbuffersEXT');
  glGenRenderbuffersEXT := wglGetProcAddress('glGenRenderbuffersEXT');
  glRenderbufferStorageEXT := wglGetProcAddress('glRenderbufferStorageEXT');
  glGetRenderbufferParameterivEXT := wglGetProcAddress('glGetRenderbufferParameterivEXT');
  glIsFramebufferEXT := wglGetProcAddress('glIsFramebufferEXT');
  glBindFramebufferEXT := wglGetProcAddress('glBindFramebufferEXT');
  glDeleteFramebuffersEXT := wglGetProcAddress('glDeleteFramebuffersEXT');
  glGenFramebuffersEXT := wglGetProcAddress('glGenFramebuffersEXT');
  glCheckFramebufferStatusEXT := wglGetProcAddress('glCheckFramebufferStatusEXT');
  glFramebufferTexture1DEXT := wglGetProcAddress('glFramebufferTexture1DEXT');
  glFramebufferTexture2DEXT := wglGetProcAddress('glFramebufferTexture2DEXT');
  glFramebufferTexture3DEXT := wglGetProcAddress('glFramebufferTexture3DEXT');
  glFramebufferRenderbufferEXT := wglGetProcAddress('glFramebufferRenderbufferEXT');
  glGetFramebufferAttachmentParameterivEXT := wglGetProcAddress('glGetFramebufferAttachmentParameterivEXT');
  glGenerateMipmapEXT := wglGetProcAddress('glGenerateMipmapEXT');
  glProgramParameteriEXT := wglGetProcAddress('glProgramParameteriEXT');
  glProgramEnvParameters4fvEXT := wglGetProcAddress('glProgramEnvParameters4fvEXT');
  glProgramLocalParameters4fvEXT := wglGetProcAddress('glProgramLocalParameters4fvEXT');
  glGetUniformuivEXT := wglGetProcAddress('glGetUniformuivEXT');
  glBindFragDataLocationEXT := wglGetProcAddress('glBindFragDataLocationEXT');
  glGetFragDataLocationEXT := wglGetProcAddress('glGetFragDataLocationEXT');
  glUniform1uiEXT := wglGetProcAddress('glUniform1uiEXT');
  glUniform2uiEXT := wglGetProcAddress('glUniform2uiEXT');
  glUniform3uiEXT := wglGetProcAddress('glUniform3uiEXT');
  glUniform4uiEXT := wglGetProcAddress('glUniform4uiEXT');
  glUniform1uivEXT := wglGetProcAddress('glUniform1uivEXT');
  glUniform2uivEXT := wglGetProcAddress('glUniform2uivEXT');
  glUniform3uivEXT := wglGetProcAddress('glUniform3uivEXT');
  glUniform4uivEXT := wglGetProcAddress('glUniform4uivEXT');
  glGetHistogramEXT := wglGetProcAddress('glGetHistogramEXT');
  glGetHistogramParameterfvEXT := wglGetProcAddress('glGetHistogramParameterfvEXT');
  glGetHistogramParameterivEXT := wglGetProcAddress('glGetHistogramParameterivEXT');
  glGetMinmaxEXT := wglGetProcAddress('glGetMinmaxEXT');
  glGetMinmaxParameterfvEXT := wglGetProcAddress('glGetMinmaxParameterfvEXT');
  glGetMinmaxParameterivEXT := wglGetProcAddress('glGetMinmaxParameterivEXT');
  glHistogramEXT := wglGetProcAddress('glHistogramEXT');
  glMinmaxEXT := wglGetProcAddress('glMinmaxEXT');
  glResetHistogramEXT := wglGetProcAddress('glResetHistogramEXT');
  glResetMinmaxEXT := wglGetProcAddress('glResetMinmaxEXT');
  glIndexFuncEXT := wglGetProcAddress('glIndexFuncEXT');
  glIndexMaterialEXT := wglGetProcAddress('glIndexMaterialEXT');
  glApplyTextureEXT := wglGetProcAddress('glApplyTextureEXT');
  glTextureLightEXT := wglGetProcAddress('glTextureLightEXT');
  glTextureMaterialEXT := wglGetProcAddress('glTextureMaterialEXT');
  glMultiDrawArraysEXT := wglGetProcAddress('glMultiDrawArraysEXT');
  glMultiDrawElementsEXT := wglGetProcAddress('glMultiDrawElementsEXT');
  glSampleMaskEXT := wglGetProcAddress('glSampleMaskEXT');
  glSamplePatternEXT := wglGetProcAddress('glSamplePatternEXT');
  glColorTableEXT := wglGetProcAddress('glColorTableEXT');
  glGetColorTableEXT := wglGetProcAddress('glGetColorTableEXT');
  glGetColorTableParameterivEXT := wglGetProcAddress('glGetColorTableParameterivEXT');
  glGetColorTableParameterfvEXT := wglGetProcAddress('glGetColorTableParameterfvEXT');
  glPixelTransformParameteriEXT := wglGetProcAddress('glPixelTransformParameteriEXT');
  glPixelTransformParameterfEXT := wglGetProcAddress('glPixelTransformParameterfEXT');
  glPixelTransformParameterivEXT := wglGetProcAddress('glPixelTransformParameterivEXT');
  glPixelTransformParameterfvEXT := wglGetProcAddress('glPixelTransformParameterfvEXT');
  glGetPixelTransformParameterivEXT := wglGetProcAddress('glGetPixelTransformParameterivEXT');
  glGetPixelTransformParameterfvEXT := wglGetProcAddress('glGetPixelTransformParameterfvEXT');
  glPointParameterfEXT := wglGetProcAddress('glPointParameterfEXT');
  glPointParameterfvEXT := wglGetProcAddress('glPointParameterfvEXT');
  glPolygonOffsetEXT := wglGetProcAddress('glPolygonOffsetEXT');
  glProvokingVertexEXT := wglGetProcAddress('glProvokingVertexEXT');
  glSecondaryColor3bEXT := wglGetProcAddress('glSecondaryColor3bEXT');
  glSecondaryColor3bvEXT := wglGetProcAddress('glSecondaryColor3bvEXT');
  glSecondaryColor3dEXT := wglGetProcAddress('glSecondaryColor3dEXT');
  glSecondaryColor3dvEXT := wglGetProcAddress('glSecondaryColor3dvEXT');
  glSecondaryColor3fEXT := wglGetProcAddress('glSecondaryColor3fEXT');
  glSecondaryColor3fvEXT := wglGetProcAddress('glSecondaryColor3fvEXT');
  glSecondaryColor3iEXT := wglGetProcAddress('glSecondaryColor3iEXT');
  glSecondaryColor3ivEXT := wglGetProcAddress('glSecondaryColor3ivEXT');
  glSecondaryColor3sEXT := wglGetProcAddress('glSecondaryColor3sEXT');
  glSecondaryColor3svEXT := wglGetProcAddress('glSecondaryColor3svEXT');
  glSecondaryColor3ubEXT := wglGetProcAddress('glSecondaryColor3ubEXT');
  glSecondaryColor3ubvEXT := wglGetProcAddress('glSecondaryColor3ubvEXT');
  glSecondaryColor3uiEXT := wglGetProcAddress('glSecondaryColor3uiEXT');
  glSecondaryColor3uivEXT := wglGetProcAddress('glSecondaryColor3uivEXT');
  glSecondaryColor3usEXT := wglGetProcAddress('glSecondaryColor3usEXT');
  glSecondaryColor3usvEXT := wglGetProcAddress('glSecondaryColor3usvEXT');
  glSecondaryColorPointerEXT := wglGetProcAddress('glSecondaryColorPointerEXT');
  glUseShaderProgramEXT := wglGetProcAddress('glUseShaderProgramEXT');
  glActiveProgramEXT := wglGetProcAddress('glActiveProgramEXT');
  glCreateShaderProgramEXT := wglGetProcAddress('glCreateShaderProgramEXT');
  glBindImageTextureEXT := wglGetProcAddress('glBindImageTextureEXT');
  glMemoryBarrierEXT := wglGetProcAddress('glMemoryBarrierEXT');
  glStencilClearTagEXT := wglGetProcAddress('glStencilClearTagEXT');
  glActiveStencilFaceEXT := wglGetProcAddress('glActiveStencilFaceEXT');
  glTexSubImage1DEXT := wglGetProcAddress('glTexSubImage1DEXT');
  glTexSubImage2DEXT := wglGetProcAddress('glTexSubImage2DEXT');
  glTexImage3DEXT := wglGetProcAddress('glTexImage3DEXT');
  glTexSubImage3DEXT := wglGetProcAddress('glTexSubImage3DEXT');
  glTexBufferEXT := wglGetProcAddress('glTexBufferEXT');
  glTexParameterIivEXT := wglGetProcAddress('glTexParameterIivEXT');
  glTexParameterIuivEXT := wglGetProcAddress('glTexParameterIuivEXT');
  glGetTexParameterIivEXT := wglGetProcAddress('glGetTexParameterIivEXT');
  glGetTexParameterIuivEXT := wglGetProcAddress('glGetTexParameterIuivEXT');
  glClearColorIiEXT := wglGetProcAddress('glClearColorIiEXT');
  glClearColorIuiEXT := wglGetProcAddress('glClearColorIuiEXT');
  glAreTexturesResidentEXT := wglGetProcAddress('glAreTexturesResidentEXT');
  glBindTextureEXT := wglGetProcAddress('glBindTextureEXT');
  glDeleteTexturesEXT := wglGetProcAddress('glDeleteTexturesEXT');
  glGenTexturesEXT := wglGetProcAddress('glGenTexturesEXT');
  glIsTextureEXT := wglGetProcAddress('glIsTextureEXT');
  glPrioritizeTexturesEXT := wglGetProcAddress('glPrioritizeTexturesEXT');
  glTextureNormalEXT := wglGetProcAddress('glTextureNormalEXT');
  glGetQueryObjecti64vEXT := wglGetProcAddress('glGetQueryObjecti64vEXT');
  glGetQueryObjectui64vEXT := wglGetProcAddress('glGetQueryObjectui64vEXT');
  glBeginTransformFeedbackEXT := wglGetProcAddress('glBeginTransformFeedbackEXT');
  glEndTransformFeedbackEXT := wglGetProcAddress('glEndTransformFeedbackEXT');
  glBindBufferRangeEXT := wglGetProcAddress('glBindBufferRangeEXT');
  glBindBufferOffsetEXT := wglGetProcAddress('glBindBufferOffsetEXT');
  glBindBufferBaseEXT := wglGetProcAddress('glBindBufferBaseEXT');
  glTransformFeedbackVaryingsEXT := wglGetProcAddress('glTransformFeedbackVaryingsEXT');
  glGetTransformFeedbackVaryingEXT := wglGetProcAddress('glGetTransformFeedbackVaryingEXT');
  glArrayElementEXT := wglGetProcAddress('glArrayElementEXT');
  glColorPointerEXT := wglGetProcAddress('glColorPointerEXT');
  glDrawArraysEXT := wglGetProcAddress('glDrawArraysEXT');
  glEdgeFlagPointerEXT := wglGetProcAddress('glEdgeFlagPointerEXT');
  glGetPointervEXT := wglGetProcAddress('glGetPointervEXT');
  glIndexPointerEXT := wglGetProcAddress('glIndexPointerEXT');
  glNormalPointerEXT := wglGetProcAddress('glNormalPointerEXT');
  glTexCoordPointerEXT := wglGetProcAddress('glTexCoordPointerEXT');
  glVertexPointerEXT := wglGetProcAddress('glVertexPointerEXT');
  glVertexAttribL1dEXT := wglGetProcAddress('glVertexAttribL1dEXT');
  glVertexAttribL2dEXT := wglGetProcAddress('glVertexAttribL2dEXT');
  glVertexAttribL3dEXT := wglGetProcAddress('glVertexAttribL3dEXT');
  glVertexAttribL4dEXT := wglGetProcAddress('glVertexAttribL4dEXT');
  glVertexAttribL1dvEXT := wglGetProcAddress('glVertexAttribL1dvEXT');
  glVertexAttribL2dvEXT := wglGetProcAddress('glVertexAttribL2dvEXT');
  glVertexAttribL3dvEXT := wglGetProcAddress('glVertexAttribL3dvEXT');
  glVertexAttribL4dvEXT := wglGetProcAddress('glVertexAttribL4dvEXT');
  glVertexAttribLPointerEXT := wglGetProcAddress('glVertexAttribLPointerEXT');
  glGetVertexAttribLdvEXT := wglGetProcAddress('glGetVertexAttribLdvEXT');
  glBeginVertexShaderEXT := wglGetProcAddress('glBeginVertexShaderEXT');
  glEndVertexShaderEXT := wglGetProcAddress('glEndVertexShaderEXT');
  glBindVertexShaderEXT := wglGetProcAddress('glBindVertexShaderEXT');
  glGenVertexShadersEXT := wglGetProcAddress('glGenVertexShadersEXT');
  glDeleteVertexShaderEXT := wglGetProcAddress('glDeleteVertexShaderEXT');
  glShaderOp1EXT := wglGetProcAddress('glShaderOp1EXT');
  glShaderOp2EXT := wglGetProcAddress('glShaderOp2EXT');
  glShaderOp3EXT := wglGetProcAddress('glShaderOp3EXT');
  glSwizzleEXT := wglGetProcAddress('glSwizzleEXT');
  glWriteMaskEXT := wglGetProcAddress('glWriteMaskEXT');
  glInsertComponentEXT := wglGetProcAddress('glInsertComponentEXT');
  glExtractComponentEXT := wglGetProcAddress('glExtractComponentEXT');
  glGenSymbolsEXT := wglGetProcAddress('glGenSymbolsEXT');
  glSetInvariantEXT := wglGetProcAddress('glSetInvariantEXT');
  glSetLocalConstantEXT := wglGetProcAddress('glSetLocalConstantEXT');
  glVariantbvEXT := wglGetProcAddress('glVariantbvEXT');
  glVariantsvEXT := wglGetProcAddress('glVariantsvEXT');
  glVariantivEXT := wglGetProcAddress('glVariantivEXT');
  glVariantfvEXT := wglGetProcAddress('glVariantfvEXT');
  glVariantdvEXT := wglGetProcAddress('glVariantdvEXT');
  glVariantubvEXT := wglGetProcAddress('glVariantubvEXT');
  glVariantusvEXT := wglGetProcAddress('glVariantusvEXT');
  glVariantuivEXT := wglGetProcAddress('glVariantuivEXT');
  glVariantPointerEXT := wglGetProcAddress('glVariantPointerEXT');
  glEnableVariantClientStateEXT := wglGetProcAddress('glEnableVariantClientStateEXT');
  glDisableVariantClientStateEXT := wglGetProcAddress('glDisableVariantClientStateEXT');
  glBindLightParameterEXT := wglGetProcAddress('glBindLightParameterEXT');
  glBindMaterialParameterEXT := wglGetProcAddress('glBindMaterialParameterEXT');
  glBindTexGenParameterEXT := wglGetProcAddress('glBindTexGenParameterEXT');
  glBindTextureUnitParameterEXT := wglGetProcAddress('glBindTextureUnitParameterEXT');
  glBindParameterEXT := wglGetProcAddress('glBindParameterEXT');
  glIsVariantEnabledEXT := wglGetProcAddress('glIsVariantEnabledEXT');
  glGetVariantBooleanvEXT := wglGetProcAddress('glGetVariantBooleanvEXT');
  glGetVariantIntegervEXT := wglGetProcAddress('glGetVariantIntegervEXT');
  glGetVariantFloatvEXT := wglGetProcAddress('glGetVariantFloatvEXT');
  glGetVariantPointervEXT := wglGetProcAddress('glGetVariantPointervEXT');
  glGetInvariantBooleanvEXT := wglGetProcAddress('glGetInvariantBooleanvEXT');
  glGetInvariantIntegervEXT := wglGetProcAddress('glGetInvariantIntegervEXT');
  glGetInvariantFloatvEXT := wglGetProcAddress('glGetInvariantFloatvEXT');
  glGetLocalConstantBooleanvEXT := wglGetProcAddress('glGetLocalConstantBooleanvEXT');
  glGetLocalConstantIntegervEXT := wglGetProcAddress('glGetLocalConstantIntegervEXT');
  glGetLocalConstantFloatvEXT := wglGetProcAddress('glGetLocalConstantFloatvEXT');
  glVertexWeightfEXT := wglGetProcAddress('glVertexWeightfEXT');
  glVertexWeightfvEXT := wglGetProcAddress('glVertexWeightfvEXT');
  glVertexWeightPointerEXT := wglGetProcAddress('glVertexWeightPointerEXT');
  glImportSyncEXT := wglGetProcAddress('glImportSyncEXT');
  glFrameTerminatorGREMEDY := wglGetProcAddress('glFrameTerminatorGREMEDY');
  glStringMarkerGREMEDY := wglGetProcAddress('glStringMarkerGREMEDY');
  glImageTransformParameteriHP := wglGetProcAddress('glImageTransformParameteriHP');
  glImageTransformParameterfHP := wglGetProcAddress('glImageTransformParameterfHP');
  glImageTransformParameterivHP := wglGetProcAddress('glImageTransformParameterivHP');
  glImageTransformParameterfvHP := wglGetProcAddress('glImageTransformParameterfvHP');
  glGetImageTransformParameterivHP := wglGetProcAddress('glGetImageTransformParameterivHP');
  glGetImageTransformParameterfvHP := wglGetProcAddress('glGetImageTransformParameterfvHP');
  glMultiModeDrawArraysIBM := wglGetProcAddress('glMultiModeDrawArraysIBM');
  glMultiModeDrawElementsIBM := wglGetProcAddress('glMultiModeDrawElementsIBM');
  glFlushStaticDataIBM := wglGetProcAddress('glFlushStaticDataIBM');
  glColorPointerListIBM := wglGetProcAddress('glColorPointerListIBM');
  glSecondaryColorPointerListIBM := wglGetProcAddress('glSecondaryColorPointerListIBM');
  glEdgeFlagPointerListIBM := wglGetProcAddress('glEdgeFlagPointerListIBM');
  glFogCoordPointerListIBM := wglGetProcAddress('glFogCoordPointerListIBM');
  glIndexPointerListIBM := wglGetProcAddress('glIndexPointerListIBM');
  glNormalPointerListIBM := wglGetProcAddress('glNormalPointerListIBM');
  glTexCoordPointerListIBM := wglGetProcAddress('glTexCoordPointerListIBM');
  glVertexPointerListIBM := wglGetProcAddress('glVertexPointerListIBM');
  glBlendFuncSeparateINGR := wglGetProcAddress('glBlendFuncSeparateINGR');
  glSyncTextureINTEL := wglGetProcAddress('glSyncTextureINTEL');
  glUnmapTexture2DINTEL := wglGetProcAddress('glUnmapTexture2DINTEL');
  glMapTexture2DINTEL := wglGetProcAddress('glMapTexture2DINTEL');
  glVertexPointervINTEL := wglGetProcAddress('glVertexPointervINTEL');
  glNormalPointervINTEL := wglGetProcAddress('glNormalPointervINTEL');
  glColorPointervINTEL := wglGetProcAddress('glColorPointervINTEL');
  glTexCoordPointervINTEL := wglGetProcAddress('glTexCoordPointervINTEL');
  glResizeBuffersMESA := wglGetProcAddress('glResizeBuffersMESA');
  glWindowPos2dMESA := wglGetProcAddress('glWindowPos2dMESA');
  glWindowPos2dvMESA := wglGetProcAddress('glWindowPos2dvMESA');
  glWindowPos2fMESA := wglGetProcAddress('glWindowPos2fMESA');
  glWindowPos2fvMESA := wglGetProcAddress('glWindowPos2fvMESA');
  glWindowPos2iMESA := wglGetProcAddress('glWindowPos2iMESA');
  glWindowPos2ivMESA := wglGetProcAddress('glWindowPos2ivMESA');
  glWindowPos2sMESA := wglGetProcAddress('glWindowPos2sMESA');
  glWindowPos2svMESA := wglGetProcAddress('glWindowPos2svMESA');
  glWindowPos3dMESA := wglGetProcAddress('glWindowPos3dMESA');
  glWindowPos3dvMESA := wglGetProcAddress('glWindowPos3dvMESA');
  glWindowPos3fMESA := wglGetProcAddress('glWindowPos3fMESA');
  glWindowPos3fvMESA := wglGetProcAddress('glWindowPos3fvMESA');
  glWindowPos3iMESA := wglGetProcAddress('glWindowPos3iMESA');
  glWindowPos3ivMESA := wglGetProcAddress('glWindowPos3ivMESA');
  glWindowPos3sMESA := wglGetProcAddress('glWindowPos3sMESA');
  glWindowPos3svMESA := wglGetProcAddress('glWindowPos3svMESA');
  glWindowPos4dMESA := wglGetProcAddress('glWindowPos4dMESA');
  glWindowPos4dvMESA := wglGetProcAddress('glWindowPos4dvMESA');
  glWindowPos4fMESA := wglGetProcAddress('glWindowPos4fMESA');
  glWindowPos4fvMESA := wglGetProcAddress('glWindowPos4fvMESA');
  glWindowPos4iMESA := wglGetProcAddress('glWindowPos4iMESA');
  glWindowPos4ivMESA := wglGetProcAddress('glWindowPos4ivMESA');
  glWindowPos4sMESA := wglGetProcAddress('glWindowPos4sMESA');
  glWindowPos4svMESA := wglGetProcAddress('glWindowPos4svMESA');
  glBeginConditionalRenderNVX := wglGetProcAddress('glBeginConditionalRenderNVX');
  glEndConditionalRenderNVX := wglGetProcAddress('glEndConditionalRenderNVX');
  glMultiDrawArraysIndirectBindlessNV := wglGetProcAddress('glMultiDrawArraysIndirectBindlessNV');
  glMultiDrawElementsIndirectBindlessNV := wglGetProcAddress('glMultiDrawElementsIndirectBindlessNV');
  glGetTextureHandleNV := wglGetProcAddress('glGetTextureHandleNV');
  glGetTextureSamplerHandleNV := wglGetProcAddress('glGetTextureSamplerHandleNV');
  glMakeTextureHandleResidentNV := wglGetProcAddress('glMakeTextureHandleResidentNV');
  glMakeTextureHandleNonResidentNV := wglGetProcAddress('glMakeTextureHandleNonResidentNV');
  glGetImageHandleNV := wglGetProcAddress('glGetImageHandleNV');
  glMakeImageHandleResidentNV := wglGetProcAddress('glMakeImageHandleResidentNV');
  glMakeImageHandleNonResidentNV := wglGetProcAddress('glMakeImageHandleNonResidentNV');
  glUniformHandleui64NV := wglGetProcAddress('glUniformHandleui64NV');
  glUniformHandleui64vNV := wglGetProcAddress('glUniformHandleui64vNV');
  glProgramUniformHandleui64NV := wglGetProcAddress('glProgramUniformHandleui64NV');
  glProgramUniformHandleui64vNV := wglGetProcAddress('glProgramUniformHandleui64vNV');
  glIsTextureHandleResidentNV := wglGetProcAddress('glIsTextureHandleResidentNV');
  glIsImageHandleResidentNV := wglGetProcAddress('glIsImageHandleResidentNV');
  glBlendParameteriNV := wglGetProcAddress('glBlendParameteriNV');
  glBlendBarrierNV := wglGetProcAddress('glBlendBarrierNV');
  glBeginConditionalRenderNV := wglGetProcAddress('glBeginConditionalRenderNV');
  glEndConditionalRenderNV := wglGetProcAddress('glEndConditionalRenderNV');
  glCopyImageSubDataNV := wglGetProcAddress('glCopyImageSubDataNV');
  glDepthRangedNV := wglGetProcAddress('glDepthRangedNV');
  glClearDepthdNV := wglGetProcAddress('glClearDepthdNV');
  glDepthBoundsdNV := wglGetProcAddress('glDepthBoundsdNV');
  glDrawTextureNV := wglGetProcAddress('glDrawTextureNV');
  glMapControlPointsNV := wglGetProcAddress('glMapControlPointsNV');
  glMapParameterivNV := wglGetProcAddress('glMapParameterivNV');
  glMapParameterfvNV := wglGetProcAddress('glMapParameterfvNV');
  glGetMapControlPointsNV := wglGetProcAddress('glGetMapControlPointsNV');
  glGetMapParameterivNV := wglGetProcAddress('glGetMapParameterivNV');
  glGetMapParameterfvNV := wglGetProcAddress('glGetMapParameterfvNV');
  glGetMapAttribParameterivNV := wglGetProcAddress('glGetMapAttribParameterivNV');
  glGetMapAttribParameterfvNV := wglGetProcAddress('glGetMapAttribParameterfvNV');
  glEvalMapsNV := wglGetProcAddress('glEvalMapsNV');
  glGetMultisamplefvNV := wglGetProcAddress('glGetMultisamplefvNV');
  glSampleMaskIndexedNV := wglGetProcAddress('glSampleMaskIndexedNV');
  glTexRenderbufferNV := wglGetProcAddress('glTexRenderbufferNV');
  glDeleteFencesNV := wglGetProcAddress('glDeleteFencesNV');
  glGenFencesNV := wglGetProcAddress('glGenFencesNV');
  glIsFenceNV := wglGetProcAddress('glIsFenceNV');
  glTestFenceNV := wglGetProcAddress('glTestFenceNV');
  glGetFenceivNV := wglGetProcAddress('glGetFenceivNV');
  glFinishFenceNV := wglGetProcAddress('glFinishFenceNV');
  glSetFenceNV := wglGetProcAddress('glSetFenceNV');
  glProgramNamedParameter4fNV := wglGetProcAddress('glProgramNamedParameter4fNV');
  glProgramNamedParameter4fvNV := wglGetProcAddress('glProgramNamedParameter4fvNV');
  glProgramNamedParameter4dNV := wglGetProcAddress('glProgramNamedParameter4dNV');
  glProgramNamedParameter4dvNV := wglGetProcAddress('glProgramNamedParameter4dvNV');
  glGetProgramNamedParameterfvNV := wglGetProcAddress('glGetProgramNamedParameterfvNV');
  glGetProgramNamedParameterdvNV := wglGetProcAddress('glGetProgramNamedParameterdvNV');
  glRenderbufferStorageMultisampleCoverageNV := wglGetProcAddress('glRenderbufferStorageMultisampleCoverageNV');
  glProgramVertexLimitNV := wglGetProcAddress('glProgramVertexLimitNV');
  glFramebufferTextureEXT := wglGetProcAddress('glFramebufferTextureEXT');
  glFramebufferTextureLayerEXT := wglGetProcAddress('glFramebufferTextureLayerEXT');
  glFramebufferTextureFaceEXT := wglGetProcAddress('glFramebufferTextureFaceEXT');
  glProgramLocalParameterI4iNV := wglGetProcAddress('glProgramLocalParameterI4iNV');
  glProgramLocalParameterI4ivNV := wglGetProcAddress('glProgramLocalParameterI4ivNV');
  glProgramLocalParametersI4ivNV := wglGetProcAddress('glProgramLocalParametersI4ivNV');
  glProgramLocalParameterI4uiNV := wglGetProcAddress('glProgramLocalParameterI4uiNV');
  glProgramLocalParameterI4uivNV := wglGetProcAddress('glProgramLocalParameterI4uivNV');
  glProgramLocalParametersI4uivNV := wglGetProcAddress('glProgramLocalParametersI4uivNV');
  glProgramEnvParameterI4iNV := wglGetProcAddress('glProgramEnvParameterI4iNV');
  glProgramEnvParameterI4ivNV := wglGetProcAddress('glProgramEnvParameterI4ivNV');
  glProgramEnvParametersI4ivNV := wglGetProcAddress('glProgramEnvParametersI4ivNV');
  glProgramEnvParameterI4uiNV := wglGetProcAddress('glProgramEnvParameterI4uiNV');
  glProgramEnvParameterI4uivNV := wglGetProcAddress('glProgramEnvParameterI4uivNV');
  glProgramEnvParametersI4uivNV := wglGetProcAddress('glProgramEnvParametersI4uivNV');
  glGetProgramLocalParameterIivNV := wglGetProcAddress('glGetProgramLocalParameterIivNV');
  glGetProgramLocalParameterIuivNV := wglGetProcAddress('glGetProgramLocalParameterIuivNV');
  glGetProgramEnvParameterIivNV := wglGetProcAddress('glGetProgramEnvParameterIivNV');
  glGetProgramEnvParameterIuivNV := wglGetProcAddress('glGetProgramEnvParameterIuivNV');
  glProgramSubroutineParametersuivNV := wglGetProcAddress('glProgramSubroutineParametersuivNV');
  glGetProgramSubroutineParameteruivNV := wglGetProcAddress('glGetProgramSubroutineParameteruivNV');
  glUniform1i64NV := wglGetProcAddress('glUniform1i64NV');
  glUniform2i64NV := wglGetProcAddress('glUniform2i64NV');
  glUniform3i64NV := wglGetProcAddress('glUniform3i64NV');
  glUniform4i64NV := wglGetProcAddress('glUniform4i64NV');
  glUniform1i64vNV := wglGetProcAddress('glUniform1i64vNV');
  glUniform2i64vNV := wglGetProcAddress('glUniform2i64vNV');
  glUniform3i64vNV := wglGetProcAddress('glUniform3i64vNV');
  glUniform4i64vNV := wglGetProcAddress('glUniform4i64vNV');
  glUniform1ui64NV := wglGetProcAddress('glUniform1ui64NV');
  glUniform2ui64NV := wglGetProcAddress('glUniform2ui64NV');
  glUniform3ui64NV := wglGetProcAddress('glUniform3ui64NV');
  glUniform4ui64NV := wglGetProcAddress('glUniform4ui64NV');
  glUniform1ui64vNV := wglGetProcAddress('glUniform1ui64vNV');
  glUniform2ui64vNV := wglGetProcAddress('glUniform2ui64vNV');
  glUniform3ui64vNV := wglGetProcAddress('glUniform3ui64vNV');
  glUniform4ui64vNV := wglGetProcAddress('glUniform4ui64vNV');
  glGetUniformi64vNV := wglGetProcAddress('glGetUniformi64vNV');
  glProgramUniform1i64NV := wglGetProcAddress('glProgramUniform1i64NV');
  glProgramUniform2i64NV := wglGetProcAddress('glProgramUniform2i64NV');
  glProgramUniform3i64NV := wglGetProcAddress('glProgramUniform3i64NV');
  glProgramUniform4i64NV := wglGetProcAddress('glProgramUniform4i64NV');
  glProgramUniform1i64vNV := wglGetProcAddress('glProgramUniform1i64vNV');
  glProgramUniform2i64vNV := wglGetProcAddress('glProgramUniform2i64vNV');
  glProgramUniform3i64vNV := wglGetProcAddress('glProgramUniform3i64vNV');
  glProgramUniform4i64vNV := wglGetProcAddress('glProgramUniform4i64vNV');
  glProgramUniform1ui64NV := wglGetProcAddress('glProgramUniform1ui64NV');
  glProgramUniform2ui64NV := wglGetProcAddress('glProgramUniform2ui64NV');
  glProgramUniform3ui64NV := wglGetProcAddress('glProgramUniform3ui64NV');
  glProgramUniform4ui64NV := wglGetProcAddress('glProgramUniform4ui64NV');
  glProgramUniform1ui64vNV := wglGetProcAddress('glProgramUniform1ui64vNV');
  glProgramUniform2ui64vNV := wglGetProcAddress('glProgramUniform2ui64vNV');
  glProgramUniform3ui64vNV := wglGetProcAddress('glProgramUniform3ui64vNV');
  glProgramUniform4ui64vNV := wglGetProcAddress('glProgramUniform4ui64vNV');
  glVertex2hNV := wglGetProcAddress('glVertex2hNV');
  glVertex2hvNV := wglGetProcAddress('glVertex2hvNV');
  glVertex3hNV := wglGetProcAddress('glVertex3hNV');
  glVertex3hvNV := wglGetProcAddress('glVertex3hvNV');
  glVertex4hNV := wglGetProcAddress('glVertex4hNV');
  glVertex4hvNV := wglGetProcAddress('glVertex4hvNV');
  glNormal3hNV := wglGetProcAddress('glNormal3hNV');
  glNormal3hvNV := wglGetProcAddress('glNormal3hvNV');
  glColor3hNV := wglGetProcAddress('glColor3hNV');
  glColor3hvNV := wglGetProcAddress('glColor3hvNV');
  glColor4hNV := wglGetProcAddress('glColor4hNV');
  glColor4hvNV := wglGetProcAddress('glColor4hvNV');
  glTexCoord1hNV := wglGetProcAddress('glTexCoord1hNV');
  glTexCoord1hvNV := wglGetProcAddress('glTexCoord1hvNV');
  glTexCoord2hNV := wglGetProcAddress('glTexCoord2hNV');
  glTexCoord2hvNV := wglGetProcAddress('glTexCoord2hvNV');
  glTexCoord3hNV := wglGetProcAddress('glTexCoord3hNV');
  glTexCoord3hvNV := wglGetProcAddress('glTexCoord3hvNV');
  glTexCoord4hNV := wglGetProcAddress('glTexCoord4hNV');
  glTexCoord4hvNV := wglGetProcAddress('glTexCoord4hvNV');
  glMultiTexCoord1hNV := wglGetProcAddress('glMultiTexCoord1hNV');
  glMultiTexCoord1hvNV := wglGetProcAddress('glMultiTexCoord1hvNV');
  glMultiTexCoord2hNV := wglGetProcAddress('glMultiTexCoord2hNV');
  glMultiTexCoord2hvNV := wglGetProcAddress('glMultiTexCoord2hvNV');
  glMultiTexCoord3hNV := wglGetProcAddress('glMultiTexCoord3hNV');
  glMultiTexCoord3hvNV := wglGetProcAddress('glMultiTexCoord3hvNV');
  glMultiTexCoord4hNV := wglGetProcAddress('glMultiTexCoord4hNV');
  glMultiTexCoord4hvNV := wglGetProcAddress('glMultiTexCoord4hvNV');
  glFogCoordhNV := wglGetProcAddress('glFogCoordhNV');
  glFogCoordhvNV := wglGetProcAddress('glFogCoordhvNV');
  glSecondaryColor3hNV := wglGetProcAddress('glSecondaryColor3hNV');
  glSecondaryColor3hvNV := wglGetProcAddress('glSecondaryColor3hvNV');
  glVertexWeighthNV := wglGetProcAddress('glVertexWeighthNV');
  glVertexWeighthvNV := wglGetProcAddress('glVertexWeighthvNV');
  glVertexAttrib1hNV := wglGetProcAddress('glVertexAttrib1hNV');
  glVertexAttrib1hvNV := wglGetProcAddress('glVertexAttrib1hvNV');
  glVertexAttrib2hNV := wglGetProcAddress('glVertexAttrib2hNV');
  glVertexAttrib2hvNV := wglGetProcAddress('glVertexAttrib2hvNV');
  glVertexAttrib3hNV := wglGetProcAddress('glVertexAttrib3hNV');
  glVertexAttrib3hvNV := wglGetProcAddress('glVertexAttrib3hvNV');
  glVertexAttrib4hNV := wglGetProcAddress('glVertexAttrib4hNV');
  glVertexAttrib4hvNV := wglGetProcAddress('glVertexAttrib4hvNV');
  glVertexAttribs1hvNV := wglGetProcAddress('glVertexAttribs1hvNV');
  glVertexAttribs2hvNV := wglGetProcAddress('glVertexAttribs2hvNV');
  glVertexAttribs3hvNV := wglGetProcAddress('glVertexAttribs3hvNV');
  glVertexAttribs4hvNV := wglGetProcAddress('glVertexAttribs4hvNV');
  glGenOcclusionQueriesNV := wglGetProcAddress('glGenOcclusionQueriesNV');
  glDeleteOcclusionQueriesNV := wglGetProcAddress('glDeleteOcclusionQueriesNV');
  glIsOcclusionQueryNV := wglGetProcAddress('glIsOcclusionQueryNV');
  glBeginOcclusionQueryNV := wglGetProcAddress('glBeginOcclusionQueryNV');
  glEndOcclusionQueryNV := wglGetProcAddress('glEndOcclusionQueryNV');
  glGetOcclusionQueryivNV := wglGetProcAddress('glGetOcclusionQueryivNV');
  glGetOcclusionQueryuivNV := wglGetProcAddress('glGetOcclusionQueryuivNV');
  glProgramBufferParametersfvNV := wglGetProcAddress('glProgramBufferParametersfvNV');
  glProgramBufferParametersIivNV := wglGetProcAddress('glProgramBufferParametersIivNV');
  glProgramBufferParametersIuivNV := wglGetProcAddress('glProgramBufferParametersIuivNV');
  glGenPathsNV := wglGetProcAddress('glGenPathsNV');
  glDeletePathsNV := wglGetProcAddress('glDeletePathsNV');
  glIsPathNV := wglGetProcAddress('glIsPathNV');
  glPathCommandsNV := wglGetProcAddress('glPathCommandsNV');
  glPathCoordsNV := wglGetProcAddress('glPathCoordsNV');
  glPathSubCommandsNV := wglGetProcAddress('glPathSubCommandsNV');
  glPathSubCoordsNV := wglGetProcAddress('glPathSubCoordsNV');
  glPathStringNV := wglGetProcAddress('glPathStringNV');
  glPathGlyphsNV := wglGetProcAddress('glPathGlyphsNV');
  glPathGlyphRangeNV := wglGetProcAddress('glPathGlyphRangeNV');
  glWeightPathsNV := wglGetProcAddress('glWeightPathsNV');
  glCopyPathNV := wglGetProcAddress('glCopyPathNV');
  glInterpolatePathsNV := wglGetProcAddress('glInterpolatePathsNV');
  glTransformPathNV := wglGetProcAddress('glTransformPathNV');
  glPathParameterivNV := wglGetProcAddress('glPathParameterivNV');
  glPathParameteriNV := wglGetProcAddress('glPathParameteriNV');
  glPathParameterfvNV := wglGetProcAddress('glPathParameterfvNV');
  glPathParameterfNV := wglGetProcAddress('glPathParameterfNV');
  glPathDashArrayNV := wglGetProcAddress('glPathDashArrayNV');
  glPathStencilFuncNV := wglGetProcAddress('glPathStencilFuncNV');
  glPathStencilDepthOffsetNV := wglGetProcAddress('glPathStencilDepthOffsetNV');
  glStencilFillPathNV := wglGetProcAddress('glStencilFillPathNV');
  glStencilStrokePathNV := wglGetProcAddress('glStencilStrokePathNV');
  glStencilFillPathInstancedNV := wglGetProcAddress('glStencilFillPathInstancedNV');
  glStencilStrokePathInstancedNV := wglGetProcAddress('glStencilStrokePathInstancedNV');
  glPathCoverDepthFuncNV := wglGetProcAddress('glPathCoverDepthFuncNV');
  glPathColorGenNV := wglGetProcAddress('glPathColorGenNV');
  glPathTexGenNV := wglGetProcAddress('glPathTexGenNV');
  glPathFogGenNV := wglGetProcAddress('glPathFogGenNV');
  glCoverFillPathNV := wglGetProcAddress('glCoverFillPathNV');
  glCoverStrokePathNV := wglGetProcAddress('glCoverStrokePathNV');
  glCoverFillPathInstancedNV := wglGetProcAddress('glCoverFillPathInstancedNV');
  glCoverStrokePathInstancedNV := wglGetProcAddress('glCoverStrokePathInstancedNV');
  glGetPathParameterivNV := wglGetProcAddress('glGetPathParameterivNV');
  glGetPathParameterfvNV := wglGetProcAddress('glGetPathParameterfvNV');
  glGetPathCommandsNV := wglGetProcAddress('glGetPathCommandsNV');
  glGetPathCoordsNV := wglGetProcAddress('glGetPathCoordsNV');
  glGetPathDashArrayNV := wglGetProcAddress('glGetPathDashArrayNV');
  glGetPathMetricsNV := wglGetProcAddress('glGetPathMetricsNV');
  glGetPathMetricRangeNV := wglGetProcAddress('glGetPathMetricRangeNV');
  glGetPathSpacingNV := wglGetProcAddress('glGetPathSpacingNV');
  glGetPathColorGenivNV := wglGetProcAddress('glGetPathColorGenivNV');
  glGetPathColorGenfvNV := wglGetProcAddress('glGetPathColorGenfvNV');
  glGetPathTexGenivNV := wglGetProcAddress('glGetPathTexGenivNV');
  glGetPathTexGenfvNV := wglGetProcAddress('glGetPathTexGenfvNV');
  glIsPointInFillPathNV := wglGetProcAddress('glIsPointInFillPathNV');
  glIsPointInStrokePathNV := wglGetProcAddress('glIsPointInStrokePathNV');
  glGetPathLengthNV := wglGetProcAddress('glGetPathLengthNV');
  glPointAlongPathNV := wglGetProcAddress('glPointAlongPathNV');
  glPixelDataRangeNV := wglGetProcAddress('glPixelDataRangeNV');
  glFlushPixelDataRangeNV := wglGetProcAddress('glFlushPixelDataRangeNV');
  glPointParameteriNV := wglGetProcAddress('glPointParameteriNV');
  glPointParameterivNV := wglGetProcAddress('glPointParameterivNV');
  glPresentFrameKeyedNV := wglGetProcAddress('glPresentFrameKeyedNV');
  glPresentFrameDualFillNV := wglGetProcAddress('glPresentFrameDualFillNV');
  glGetVideoivNV := wglGetProcAddress('glGetVideoivNV');
  glGetVideouivNV := wglGetProcAddress('glGetVideouivNV');
  glGetVideoi64vNV := wglGetProcAddress('glGetVideoi64vNV');
  glGetVideoui64vNV := wglGetProcAddress('glGetVideoui64vNV');
  glPrimitiveRestartNV := wglGetProcAddress('glPrimitiveRestartNV');
  glPrimitiveRestartIndexNV := wglGetProcAddress('glPrimitiveRestartIndexNV');
  glCombinerParameterfvNV := wglGetProcAddress('glCombinerParameterfvNV');
  glCombinerParameterfNV := wglGetProcAddress('glCombinerParameterfNV');
  glCombinerParameterivNV := wglGetProcAddress('glCombinerParameterivNV');
  glCombinerParameteriNV := wglGetProcAddress('glCombinerParameteriNV');
  glCombinerInputNV := wglGetProcAddress('glCombinerInputNV');
  glCombinerOutputNV := wglGetProcAddress('glCombinerOutputNV');
  glFinalCombinerInputNV := wglGetProcAddress('glFinalCombinerInputNV');
  glGetCombinerInputParameterfvNV := wglGetProcAddress('glGetCombinerInputParameterfvNV');
  glGetCombinerInputParameterivNV := wglGetProcAddress('glGetCombinerInputParameterivNV');
  glGetCombinerOutputParameterfvNV := wglGetProcAddress('glGetCombinerOutputParameterfvNV');
  glGetCombinerOutputParameterivNV := wglGetProcAddress('glGetCombinerOutputParameterivNV');
  glGetFinalCombinerInputParameterfvNV := wglGetProcAddress('glGetFinalCombinerInputParameterfvNV');
  glGetFinalCombinerInputParameterivNV := wglGetProcAddress('glGetFinalCombinerInputParameterivNV');
  glCombinerStageParameterfvNV := wglGetProcAddress('glCombinerStageParameterfvNV');
  glGetCombinerStageParameterfvNV := wglGetProcAddress('glGetCombinerStageParameterfvNV');
  glMakeBufferResidentNV := wglGetProcAddress('glMakeBufferResidentNV');
  glMakeBufferNonResidentNV := wglGetProcAddress('glMakeBufferNonResidentNV');
  glIsBufferResidentNV := wglGetProcAddress('glIsBufferResidentNV');
  glMakeNamedBufferResidentNV := wglGetProcAddress('glMakeNamedBufferResidentNV');
  glMakeNamedBufferNonResidentNV := wglGetProcAddress('glMakeNamedBufferNonResidentNV');
  glIsNamedBufferResidentNV := wglGetProcAddress('glIsNamedBufferResidentNV');
  glGetBufferParameterui64vNV := wglGetProcAddress('glGetBufferParameterui64vNV');
  glGetNamedBufferParameterui64vNV := wglGetProcAddress('glGetNamedBufferParameterui64vNV');
  glGetIntegerui64vNV := wglGetProcAddress('glGetIntegerui64vNV');
  glUniformui64NV := wglGetProcAddress('glUniformui64NV');
  glUniformui64vNV := wglGetProcAddress('glUniformui64vNV');
  glGetUniformui64vNV := wglGetProcAddress('glGetUniformui64vNV');
  glProgramUniformui64NV := wglGetProcAddress('glProgramUniformui64NV');
  glProgramUniformui64vNV := wglGetProcAddress('glProgramUniformui64vNV');
  glTextureBarrierNV := wglGetProcAddress('glTextureBarrierNV');
  glTexImage2DMultisampleCoverageNV := wglGetProcAddress('glTexImage2DMultisampleCoverageNV');
  glTexImage3DMultisampleCoverageNV := wglGetProcAddress('glTexImage3DMultisampleCoverageNV');
  glTextureImage2DMultisampleNV := wglGetProcAddress('glTextureImage2DMultisampleNV');
  glTextureImage3DMultisampleNV := wglGetProcAddress('glTextureImage3DMultisampleNV');
  glTextureImage2DMultisampleCoverageNV := wglGetProcAddress('glTextureImage2DMultisampleCoverageNV');
  glTextureImage3DMultisampleCoverageNV := wglGetProcAddress('glTextureImage3DMultisampleCoverageNV');
  glBeginTransformFeedbackNV := wglGetProcAddress('glBeginTransformFeedbackNV');
  glEndTransformFeedbackNV := wglGetProcAddress('glEndTransformFeedbackNV');
  glTransformFeedbackAttribsNV := wglGetProcAddress('glTransformFeedbackAttribsNV');
  glBindBufferRangeNV := wglGetProcAddress('glBindBufferRangeNV');
  glBindBufferOffsetNV := wglGetProcAddress('glBindBufferOffsetNV');
  glBindBufferBaseNV := wglGetProcAddress('glBindBufferBaseNV');
  glTransformFeedbackVaryingsNV := wglGetProcAddress('glTransformFeedbackVaryingsNV');
  glActiveVaryingNV := wglGetProcAddress('glActiveVaryingNV');
  glGetVaryingLocationNV := wglGetProcAddress('glGetVaryingLocationNV');
  glGetActiveVaryingNV := wglGetProcAddress('glGetActiveVaryingNV');
  glGetTransformFeedbackVaryingNV := wglGetProcAddress('glGetTransformFeedbackVaryingNV');
  glTransformFeedbackStreamAttribsNV := wglGetProcAddress('glTransformFeedbackStreamAttribsNV');
  glBindTransformFeedbackNV := wglGetProcAddress('glBindTransformFeedbackNV');
  glDeleteTransformFeedbacksNV := wglGetProcAddress('glDeleteTransformFeedbacksNV');
  glGenTransformFeedbacksNV := wglGetProcAddress('glGenTransformFeedbacksNV');
  glIsTransformFeedbackNV := wglGetProcAddress('glIsTransformFeedbackNV');
  glPauseTransformFeedbackNV := wglGetProcAddress('glPauseTransformFeedbackNV');
  glResumeTransformFeedbackNV := wglGetProcAddress('glResumeTransformFeedbackNV');
  glDrawTransformFeedbackNV := wglGetProcAddress('glDrawTransformFeedbackNV');
  glVDPAUInitNV := wglGetProcAddress('glVDPAUInitNV');
  glVDPAUFiniNV := wglGetProcAddress('glVDPAUFiniNV');
  glVDPAURegisterVideoSurfaceNV := wglGetProcAddress('glVDPAURegisterVideoSurfaceNV');
  glVDPAURegisterOutputSurfaceNV := wglGetProcAddress('glVDPAURegisterOutputSurfaceNV');
  glVDPAUIsSurfaceNV := wglGetProcAddress('glVDPAUIsSurfaceNV');
  glVDPAUUnregisterSurfaceNV := wglGetProcAddress('glVDPAUUnregisterSurfaceNV');
  glVDPAUGetSurfaceivNV := wglGetProcAddress('glVDPAUGetSurfaceivNV');
  glVDPAUSurfaceAccessNV := wglGetProcAddress('glVDPAUSurfaceAccessNV');
  glVDPAUMapSurfacesNV := wglGetProcAddress('glVDPAUMapSurfacesNV');
  glVDPAUUnmapSurfacesNV := wglGetProcAddress('glVDPAUUnmapSurfacesNV');
  glFlushVertexArrayRangeNV := wglGetProcAddress('glFlushVertexArrayRangeNV');
  glVertexArrayRangeNV := wglGetProcAddress('glVertexArrayRangeNV');
  glVertexAttribL1i64NV := wglGetProcAddress('glVertexAttribL1i64NV');
  glVertexAttribL2i64NV := wglGetProcAddress('glVertexAttribL2i64NV');
  glVertexAttribL3i64NV := wglGetProcAddress('glVertexAttribL3i64NV');
  glVertexAttribL4i64NV := wglGetProcAddress('glVertexAttribL4i64NV');
  glVertexAttribL1i64vNV := wglGetProcAddress('glVertexAttribL1i64vNV');
  glVertexAttribL2i64vNV := wglGetProcAddress('glVertexAttribL2i64vNV');
  glVertexAttribL3i64vNV := wglGetProcAddress('glVertexAttribL3i64vNV');
  glVertexAttribL4i64vNV := wglGetProcAddress('glVertexAttribL4i64vNV');
  glVertexAttribL1ui64NV := wglGetProcAddress('glVertexAttribL1ui64NV');
  glVertexAttribL2ui64NV := wglGetProcAddress('glVertexAttribL2ui64NV');
  glVertexAttribL3ui64NV := wglGetProcAddress('glVertexAttribL3ui64NV');
  glVertexAttribL4ui64NV := wglGetProcAddress('glVertexAttribL4ui64NV');
  glVertexAttribL1ui64vNV := wglGetProcAddress('glVertexAttribL1ui64vNV');
  glVertexAttribL2ui64vNV := wglGetProcAddress('glVertexAttribL2ui64vNV');
  glVertexAttribL3ui64vNV := wglGetProcAddress('glVertexAttribL3ui64vNV');
  glVertexAttribL4ui64vNV := wglGetProcAddress('glVertexAttribL4ui64vNV');
  glGetVertexAttribLi64vNV := wglGetProcAddress('glGetVertexAttribLi64vNV');
  glGetVertexAttribLui64vNV := wglGetProcAddress('glGetVertexAttribLui64vNV');
  glVertexAttribLFormatNV := wglGetProcAddress('glVertexAttribLFormatNV');
  glBufferAddressRangeNV := wglGetProcAddress('glBufferAddressRangeNV');
  glVertexFormatNV := wglGetProcAddress('glVertexFormatNV');
  glNormalFormatNV := wglGetProcAddress('glNormalFormatNV');
  glColorFormatNV := wglGetProcAddress('glColorFormatNV');
  glIndexFormatNV := wglGetProcAddress('glIndexFormatNV');
  glTexCoordFormatNV := wglGetProcAddress('glTexCoordFormatNV');
  glEdgeFlagFormatNV := wglGetProcAddress('glEdgeFlagFormatNV');
  glSecondaryColorFormatNV := wglGetProcAddress('glSecondaryColorFormatNV');
  glFogCoordFormatNV := wglGetProcAddress('glFogCoordFormatNV');
  glVertexAttribFormatNV := wglGetProcAddress('glVertexAttribFormatNV');
  glVertexAttribIFormatNV := wglGetProcAddress('glVertexAttribIFormatNV');
  glGetIntegerui64i_vNV := wglGetProcAddress('glGetIntegerui64i_vNV');
  glAreProgramsResidentNV := wglGetProcAddress('glAreProgramsResidentNV');
  glBindProgramNV := wglGetProcAddress('glBindProgramNV');
  glDeleteProgramsNV := wglGetProcAddress('glDeleteProgramsNV');
  glExecuteProgramNV := wglGetProcAddress('glExecuteProgramNV');
  glGenProgramsNV := wglGetProcAddress('glGenProgramsNV');
  glGetProgramParameterdvNV := wglGetProcAddress('glGetProgramParameterdvNV');
  glGetProgramParameterfvNV := wglGetProcAddress('glGetProgramParameterfvNV');
  glGetProgramivNV := wglGetProcAddress('glGetProgramivNV');
  glGetProgramStringNV := wglGetProcAddress('glGetProgramStringNV');
  glGetTrackMatrixivNV := wglGetProcAddress('glGetTrackMatrixivNV');
  glGetVertexAttribdvNV := wglGetProcAddress('glGetVertexAttribdvNV');
  glGetVertexAttribfvNV := wglGetProcAddress('glGetVertexAttribfvNV');
  glGetVertexAttribivNV := wglGetProcAddress('glGetVertexAttribivNV');
  glGetVertexAttribPointervNV := wglGetProcAddress('glGetVertexAttribPointervNV');
  glIsProgramNV := wglGetProcAddress('glIsProgramNV');
  glLoadProgramNV := wglGetProcAddress('glLoadProgramNV');
  glProgramParameter4dNV := wglGetProcAddress('glProgramParameter4dNV');
  glProgramParameter4dvNV := wglGetProcAddress('glProgramParameter4dvNV');
  glProgramParameter4fNV := wglGetProcAddress('glProgramParameter4fNV');
  glProgramParameter4fvNV := wglGetProcAddress('glProgramParameter4fvNV');
  glProgramParameters4dvNV := wglGetProcAddress('glProgramParameters4dvNV');
  glProgramParameters4fvNV := wglGetProcAddress('glProgramParameters4fvNV');
  glRequestResidentProgramsNV := wglGetProcAddress('glRequestResidentProgramsNV');
  glTrackMatrixNV := wglGetProcAddress('glTrackMatrixNV');
  glVertexAttribPointerNV := wglGetProcAddress('glVertexAttribPointerNV');
  glVertexAttrib1dNV := wglGetProcAddress('glVertexAttrib1dNV');
  glVertexAttrib1dvNV := wglGetProcAddress('glVertexAttrib1dvNV');
  glVertexAttrib1fNV := wglGetProcAddress('glVertexAttrib1fNV');
  glVertexAttrib1fvNV := wglGetProcAddress('glVertexAttrib1fvNV');
  glVertexAttrib1sNV := wglGetProcAddress('glVertexAttrib1sNV');
  glVertexAttrib1svNV := wglGetProcAddress('glVertexAttrib1svNV');
  glVertexAttrib2dNV := wglGetProcAddress('glVertexAttrib2dNV');
  glVertexAttrib2dvNV := wglGetProcAddress('glVertexAttrib2dvNV');
  glVertexAttrib2fNV := wglGetProcAddress('glVertexAttrib2fNV');
  glVertexAttrib2fvNV := wglGetProcAddress('glVertexAttrib2fvNV');
  glVertexAttrib2sNV := wglGetProcAddress('glVertexAttrib2sNV');
  glVertexAttrib2svNV := wglGetProcAddress('glVertexAttrib2svNV');
  glVertexAttrib3dNV := wglGetProcAddress('glVertexAttrib3dNV');
  glVertexAttrib3dvNV := wglGetProcAddress('glVertexAttrib3dvNV');
  glVertexAttrib3fNV := wglGetProcAddress('glVertexAttrib3fNV');
  glVertexAttrib3fvNV := wglGetProcAddress('glVertexAttrib3fvNV');
  glVertexAttrib3sNV := wglGetProcAddress('glVertexAttrib3sNV');
  glVertexAttrib3svNV := wglGetProcAddress('glVertexAttrib3svNV');
  glVertexAttrib4dNV := wglGetProcAddress('glVertexAttrib4dNV');
  glVertexAttrib4dvNV := wglGetProcAddress('glVertexAttrib4dvNV');
  glVertexAttrib4fNV := wglGetProcAddress('glVertexAttrib4fNV');
  glVertexAttrib4fvNV := wglGetProcAddress('glVertexAttrib4fvNV');
  glVertexAttrib4sNV := wglGetProcAddress('glVertexAttrib4sNV');
  glVertexAttrib4svNV := wglGetProcAddress('glVertexAttrib4svNV');
  glVertexAttrib4ubNV := wglGetProcAddress('glVertexAttrib4ubNV');
  glVertexAttrib4ubvNV := wglGetProcAddress('glVertexAttrib4ubvNV');
  glVertexAttribs1dvNV := wglGetProcAddress('glVertexAttribs1dvNV');
  glVertexAttribs1fvNV := wglGetProcAddress('glVertexAttribs1fvNV');
  glVertexAttribs1svNV := wglGetProcAddress('glVertexAttribs1svNV');
  glVertexAttribs2dvNV := wglGetProcAddress('glVertexAttribs2dvNV');
  glVertexAttribs2fvNV := wglGetProcAddress('glVertexAttribs2fvNV');
  glVertexAttribs2svNV := wglGetProcAddress('glVertexAttribs2svNV');
  glVertexAttribs3dvNV := wglGetProcAddress('glVertexAttribs3dvNV');
  glVertexAttribs3fvNV := wglGetProcAddress('glVertexAttribs3fvNV');
  glVertexAttribs3svNV := wglGetProcAddress('glVertexAttribs3svNV');
  glVertexAttribs4dvNV := wglGetProcAddress('glVertexAttribs4dvNV');
  glVertexAttribs4fvNV := wglGetProcAddress('glVertexAttribs4fvNV');
  glVertexAttribs4svNV := wglGetProcAddress('glVertexAttribs4svNV');
  glVertexAttribs4ubvNV := wglGetProcAddress('glVertexAttribs4ubvNV');
  glVertexAttribI1iEXT := wglGetProcAddress('glVertexAttribI1iEXT');
  glVertexAttribI2iEXT := wglGetProcAddress('glVertexAttribI2iEXT');
  glVertexAttribI3iEXT := wglGetProcAddress('glVertexAttribI3iEXT');
  glVertexAttribI4iEXT := wglGetProcAddress('glVertexAttribI4iEXT');
  glVertexAttribI1uiEXT := wglGetProcAddress('glVertexAttribI1uiEXT');
  glVertexAttribI2uiEXT := wglGetProcAddress('glVertexAttribI2uiEXT');
  glVertexAttribI3uiEXT := wglGetProcAddress('glVertexAttribI3uiEXT');
  glVertexAttribI4uiEXT := wglGetProcAddress('glVertexAttribI4uiEXT');
  glVertexAttribI1ivEXT := wglGetProcAddress('glVertexAttribI1ivEXT');
  glVertexAttribI2ivEXT := wglGetProcAddress('glVertexAttribI2ivEXT');
  glVertexAttribI3ivEXT := wglGetProcAddress('glVertexAttribI3ivEXT');
  glVertexAttribI4ivEXT := wglGetProcAddress('glVertexAttribI4ivEXT');
  glVertexAttribI1uivEXT := wglGetProcAddress('glVertexAttribI1uivEXT');
  glVertexAttribI2uivEXT := wglGetProcAddress('glVertexAttribI2uivEXT');
  glVertexAttribI3uivEXT := wglGetProcAddress('glVertexAttribI3uivEXT');
  glVertexAttribI4uivEXT := wglGetProcAddress('glVertexAttribI4uivEXT');
  glVertexAttribI4bvEXT := wglGetProcAddress('glVertexAttribI4bvEXT');
  glVertexAttribI4svEXT := wglGetProcAddress('glVertexAttribI4svEXT');
  glVertexAttribI4ubvEXT := wglGetProcAddress('glVertexAttribI4ubvEXT');
  glVertexAttribI4usvEXT := wglGetProcAddress('glVertexAttribI4usvEXT');
  glVertexAttribIPointerEXT := wglGetProcAddress('glVertexAttribIPointerEXT');
  glGetVertexAttribIivEXT := wglGetProcAddress('glGetVertexAttribIivEXT');
  glGetVertexAttribIuivEXT := wglGetProcAddress('glGetVertexAttribIuivEXT');
  glBeginVideoCaptureNV := wglGetProcAddress('glBeginVideoCaptureNV');
  glBindVideoCaptureStreamBufferNV := wglGetProcAddress('glBindVideoCaptureStreamBufferNV');
  glBindVideoCaptureStreamTextureNV := wglGetProcAddress('glBindVideoCaptureStreamTextureNV');
  glEndVideoCaptureNV := wglGetProcAddress('glEndVideoCaptureNV');
  glGetVideoCaptureivNV := wglGetProcAddress('glGetVideoCaptureivNV');
  glGetVideoCaptureStreamivNV := wglGetProcAddress('glGetVideoCaptureStreamivNV');
  glGetVideoCaptureStreamfvNV := wglGetProcAddress('glGetVideoCaptureStreamfvNV');
  glGetVideoCaptureStreamdvNV := wglGetProcAddress('glGetVideoCaptureStreamdvNV');
  glVideoCaptureNV := wglGetProcAddress('glVideoCaptureNV');
  glVideoCaptureStreamParameterivNV := wglGetProcAddress('glVideoCaptureStreamParameterivNV');
  glVideoCaptureStreamParameterfvNV := wglGetProcAddress('glVideoCaptureStreamParameterfvNV');
  glVideoCaptureStreamParameterdvNV := wglGetProcAddress('glVideoCaptureStreamParameterdvNV');
  glHintPGI := wglGetProcAddress('glHintPGI');
  glDetailTexFuncSGIS := wglGetProcAddress('glDetailTexFuncSGIS');
  glGetDetailTexFuncSGIS := wglGetProcAddress('glGetDetailTexFuncSGIS');
  glFogFuncSGIS := wglGetProcAddress('glFogFuncSGIS');
  glGetFogFuncSGIS := wglGetProcAddress('glGetFogFuncSGIS');
  glSampleMaskSGIS := wglGetProcAddress('glSampleMaskSGIS');
  glSamplePatternSGIS := wglGetProcAddress('glSamplePatternSGIS');
  glPixelTexGenParameteriSGIS := wglGetProcAddress('glPixelTexGenParameteriSGIS');
  glPixelTexGenParameterivSGIS := wglGetProcAddress('glPixelTexGenParameterivSGIS');
  glPixelTexGenParameterfSGIS := wglGetProcAddress('glPixelTexGenParameterfSGIS');
  glPixelTexGenParameterfvSGIS := wglGetProcAddress('glPixelTexGenParameterfvSGIS');
  glGetPixelTexGenParameterivSGIS := wglGetProcAddress('glGetPixelTexGenParameterivSGIS');
  glGetPixelTexGenParameterfvSGIS := wglGetProcAddress('glGetPixelTexGenParameterfvSGIS');
  glPointParameterfSGIS := wglGetProcAddress('glPointParameterfSGIS');
  glPointParameterfvSGIS := wglGetProcAddress('glPointParameterfvSGIS');
  glSharpenTexFuncSGIS := wglGetProcAddress('glSharpenTexFuncSGIS');
  glGetSharpenTexFuncSGIS := wglGetProcAddress('glGetSharpenTexFuncSGIS');
  glTexImage4DSGIS := wglGetProcAddress('glTexImage4DSGIS');
  glTexSubImage4DSGIS := wglGetProcAddress('glTexSubImage4DSGIS');
  glTextureColorMaskSGIS := wglGetProcAddress('glTextureColorMaskSGIS');
  glGetTexFilterFuncSGIS := wglGetProcAddress('glGetTexFilterFuncSGIS');
  glTexFilterFuncSGIS := wglGetProcAddress('glTexFilterFuncSGIS');
  glAsyncMarkerSGIX := wglGetProcAddress('glAsyncMarkerSGIX');
  glFinishAsyncSGIX := wglGetProcAddress('glFinishAsyncSGIX');
  glPollAsyncSGIX := wglGetProcAddress('glPollAsyncSGIX');
  glGenAsyncMarkersSGIX := wglGetProcAddress('glGenAsyncMarkersSGIX');
  glDeleteAsyncMarkersSGIX := wglGetProcAddress('glDeleteAsyncMarkersSGIX');
  glIsAsyncMarkerSGIX := wglGetProcAddress('glIsAsyncMarkerSGIX');
  glFlushRasterSGIX := wglGetProcAddress('glFlushRasterSGIX');
  glFragmentColorMaterialSGIX := wglGetProcAddress('glFragmentColorMaterialSGIX');
  glFragmentLightfSGIX := wglGetProcAddress('glFragmentLightfSGIX');
  glFragmentLightfvSGIX := wglGetProcAddress('glFragmentLightfvSGIX');
  glFragmentLightiSGIX := wglGetProcAddress('glFragmentLightiSGIX');
  glFragmentLightivSGIX := wglGetProcAddress('glFragmentLightivSGIX');
  glFragmentLightModelfSGIX := wglGetProcAddress('glFragmentLightModelfSGIX');
  glFragmentLightModelfvSGIX := wglGetProcAddress('glFragmentLightModelfvSGIX');
  glFragmentLightModeliSGIX := wglGetProcAddress('glFragmentLightModeliSGIX');
  glFragmentLightModelivSGIX := wglGetProcAddress('glFragmentLightModelivSGIX');
  glFragmentMaterialfSGIX := wglGetProcAddress('glFragmentMaterialfSGIX');
  glFragmentMaterialfvSGIX := wglGetProcAddress('glFragmentMaterialfvSGIX');
  glFragmentMaterialiSGIX := wglGetProcAddress('glFragmentMaterialiSGIX');
  glFragmentMaterialivSGIX := wglGetProcAddress('glFragmentMaterialivSGIX');
  glGetFragmentLightfvSGIX := wglGetProcAddress('glGetFragmentLightfvSGIX');
  glGetFragmentLightivSGIX := wglGetProcAddress('glGetFragmentLightivSGIX');
  glGetFragmentMaterialfvSGIX := wglGetProcAddress('glGetFragmentMaterialfvSGIX');
  glGetFragmentMaterialivSGIX := wglGetProcAddress('glGetFragmentMaterialivSGIX');
  glLightEnviSGIX := wglGetProcAddress('glLightEnviSGIX');
  glFrameZoomSGIX := wglGetProcAddress('glFrameZoomSGIX');
  glIglooInterfaceSGIX := wglGetProcAddress('glIglooInterfaceSGIX');
  glGetInstrumentsSGIX := wglGetProcAddress('glGetInstrumentsSGIX');
  glInstrumentsBufferSGIX := wglGetProcAddress('glInstrumentsBufferSGIX');
  glPollInstrumentsSGIX := wglGetProcAddress('glPollInstrumentsSGIX');
  glReadInstrumentsSGIX := wglGetProcAddress('glReadInstrumentsSGIX');
  glStartInstrumentsSGIX := wglGetProcAddress('glStartInstrumentsSGIX');
  glStopInstrumentsSGIX := wglGetProcAddress('glStopInstrumentsSGIX');
  glGetListParameterfvSGIX := wglGetProcAddress('glGetListParameterfvSGIX');
  glGetListParameterivSGIX := wglGetProcAddress('glGetListParameterivSGIX');
  glListParameterfSGIX := wglGetProcAddress('glListParameterfSGIX');
  glListParameterfvSGIX := wglGetProcAddress('glListParameterfvSGIX');
  glListParameteriSGIX := wglGetProcAddress('glListParameteriSGIX');
  glListParameterivSGIX := wglGetProcAddress('glListParameterivSGIX');
  glPixelTexGenSGIX := wglGetProcAddress('glPixelTexGenSGIX');
  glDeformationMap3dSGIX := wglGetProcAddress('glDeformationMap3dSGIX');
  glDeformationMap3fSGIX := wglGetProcAddress('glDeformationMap3fSGIX');
  glDeformSGIX := wglGetProcAddress('glDeformSGIX');
  glLoadIdentityDeformationMapSGIX := wglGetProcAddress('glLoadIdentityDeformationMapSGIX');
  glReferencePlaneSGIX := wglGetProcAddress('glReferencePlaneSGIX');
  glSpriteParameterfSGIX := wglGetProcAddress('glSpriteParameterfSGIX');
  glSpriteParameterfvSGIX := wglGetProcAddress('glSpriteParameterfvSGIX');
  glSpriteParameteriSGIX := wglGetProcAddress('glSpriteParameteriSGIX');
  glSpriteParameterivSGIX := wglGetProcAddress('glSpriteParameterivSGIX');
  glTagSampleBufferSGIX := wglGetProcAddress('glTagSampleBufferSGIX');
  glColorTableSGI := wglGetProcAddress('glColorTableSGI');
  glColorTableParameterfvSGI := wglGetProcAddress('glColorTableParameterfvSGI');
  glColorTableParameterivSGI := wglGetProcAddress('glColorTableParameterivSGI');
  glCopyColorTableSGI := wglGetProcAddress('glCopyColorTableSGI');
  glGetColorTableSGI := wglGetProcAddress('glGetColorTableSGI');
  glGetColorTableParameterfvSGI := wglGetProcAddress('glGetColorTableParameterfvSGI');
  glGetColorTableParameterivSGI := wglGetProcAddress('glGetColorTableParameterivSGI');
  glFinishTextureSUNX := wglGetProcAddress('glFinishTextureSUNX');
  glGlobalAlphaFactorbSUN := wglGetProcAddress('glGlobalAlphaFactorbSUN');
  glGlobalAlphaFactorsSUN := wglGetProcAddress('glGlobalAlphaFactorsSUN');
  glGlobalAlphaFactoriSUN := wglGetProcAddress('glGlobalAlphaFactoriSUN');
  glGlobalAlphaFactorfSUN := wglGetProcAddress('glGlobalAlphaFactorfSUN');
  glGlobalAlphaFactordSUN := wglGetProcAddress('glGlobalAlphaFactordSUN');
  glGlobalAlphaFactorubSUN := wglGetProcAddress('glGlobalAlphaFactorubSUN');
  glGlobalAlphaFactorusSUN := wglGetProcAddress('glGlobalAlphaFactorusSUN');
  glGlobalAlphaFactoruiSUN := wglGetProcAddress('glGlobalAlphaFactoruiSUN');
  glDrawMeshArraysSUN := wglGetProcAddress('glDrawMeshArraysSUN');
  glReplacementCodeuiSUN := wglGetProcAddress('glReplacementCodeuiSUN');
  glReplacementCodeusSUN := wglGetProcAddress('glReplacementCodeusSUN');
  glReplacementCodeubSUN := wglGetProcAddress('glReplacementCodeubSUN');
  glReplacementCodeuivSUN := wglGetProcAddress('glReplacementCodeuivSUN');
  glReplacementCodeusvSUN := wglGetProcAddress('glReplacementCodeusvSUN');
  glReplacementCodeubvSUN := wglGetProcAddress('glReplacementCodeubvSUN');
  glReplacementCodePointerSUN := wglGetProcAddress('glReplacementCodePointerSUN');
  glColor4ubVertex2fSUN := wglGetProcAddress('glColor4ubVertex2fSUN');
  glColor4ubVertex2fvSUN := wglGetProcAddress('glColor4ubVertex2fvSUN');
  glColor4ubVertex3fSUN := wglGetProcAddress('glColor4ubVertex3fSUN');
  glColor4ubVertex3fvSUN := wglGetProcAddress('glColor4ubVertex3fvSUN');
  glColor3fVertex3fSUN := wglGetProcAddress('glColor3fVertex3fSUN');
  glColor3fVertex3fvSUN := wglGetProcAddress('glColor3fVertex3fvSUN');
  glNormal3fVertex3fSUN := wglGetProcAddress('glNormal3fVertex3fSUN');
  glNormal3fVertex3fvSUN := wglGetProcAddress('glNormal3fVertex3fvSUN');
  glColor4fNormal3fVertex3fSUN := wglGetProcAddress('glColor4fNormal3fVertex3fSUN');
  glColor4fNormal3fVertex3fvSUN := wglGetProcAddress('glColor4fNormal3fVertex3fvSUN');
  glTexCoord2fVertex3fSUN := wglGetProcAddress('glTexCoord2fVertex3fSUN');
  glTexCoord2fVertex3fvSUN := wglGetProcAddress('glTexCoord2fVertex3fvSUN');
  glTexCoord4fVertex4fSUN := wglGetProcAddress('glTexCoord4fVertex4fSUN');
  glTexCoord4fVertex4fvSUN := wglGetProcAddress('glTexCoord4fVertex4fvSUN');
  glTexCoord2fColor4ubVertex3fSUN := wglGetProcAddress('glTexCoord2fColor4ubVertex3fSUN');
  glTexCoord2fColor4ubVertex3fvSUN := wglGetProcAddress('glTexCoord2fColor4ubVertex3fvSUN');
  glTexCoord2fColor3fVertex3fSUN := wglGetProcAddress('glTexCoord2fColor3fVertex3fSUN');
  glTexCoord2fColor3fVertex3fvSUN := wglGetProcAddress('glTexCoord2fColor3fVertex3fvSUN');
  glTexCoord2fNormal3fVertex3fSUN := wglGetProcAddress('glTexCoord2fNormal3fVertex3fSUN');
  glTexCoord2fNormal3fVertex3fvSUN := wglGetProcAddress('glTexCoord2fNormal3fVertex3fvSUN');
  glTexCoord2fColor4fNormal3fVertex3fSUN := wglGetProcAddress('glTexCoord2fColor4fNormal3fVertex3fSUN');
  glTexCoord2fColor4fNormal3fVertex3fvSUN := wglGetProcAddress('glTexCoord2fColor4fNormal3fVertex3fvSUN');
  glTexCoord4fColor4fNormal3fVertex4fSUN := wglGetProcAddress('glTexCoord4fColor4fNormal3fVertex4fSUN');
  glTexCoord4fColor4fNormal3fVertex4fvSUN := wglGetProcAddress('glTexCoord4fColor4fNormal3fVertex4fvSUN');
  glReplacementCodeuiVertex3fSUN := wglGetProcAddress('glReplacementCodeuiVertex3fSUN');
  glReplacementCodeuiVertex3fvSUN := wglGetProcAddress('glReplacementCodeuiVertex3fvSUN');
  glReplacementCodeuiColor4ubVertex3fSUN := wglGetProcAddress('glReplacementCodeuiColor4ubVertex3fSUN');
  glReplacementCodeuiColor4ubVertex3fvSUN := wglGetProcAddress('glReplacementCodeuiColor4ubVertex3fvSUN');
  glReplacementCodeuiColor3fVertex3fSUN := wglGetProcAddress('glReplacementCodeuiColor3fVertex3fSUN');
  glReplacementCodeuiColor3fVertex3fvSUN := wglGetProcAddress('glReplacementCodeuiColor3fVertex3fvSUN');
  glReplacementCodeuiNormal3fVertex3fSUN := wglGetProcAddress('glReplacementCodeuiNormal3fVertex3fSUN');
  glReplacementCodeuiNormal3fVertex3fvSUN := wglGetProcAddress('glReplacementCodeuiNormal3fVertex3fvSUN');
  glReplacementCodeuiColor4fNormal3fVertex3fSUN := wglGetProcAddress('glReplacementCodeuiColor4fNormal3fVertex3fSUN');
  glReplacementCodeuiColor4fNormal3fVertex3fvSUN := wglGetProcAddress('glReplacementCodeuiColor4fNormal3fVertex3fvSUN');
  glReplacementCodeuiTexCoord2fVertex3fSUN := wglGetProcAddress('glReplacementCodeuiTexCoord2fVertex3fSUN');
  glReplacementCodeuiTexCoord2fVertex3fvSUN := wglGetProcAddress('glReplacementCodeuiTexCoord2fVertex3fvSUN');
  glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN := wglGetProcAddress('glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN');
  glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN := wglGetProcAddress('glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN');
  glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN := wglGetProcAddress('glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN');
  glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN := wglGetProcAddress('glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN');

end;

end.

