{*******************************************************}
{                                                       }
{                Delphi Runtime Library                 }
{                                                       }
{          File: UxTheme.h                              }
{          Copyright (c) Microsoft Corporation.         }
{          All Rights Reserved.                         }
{                                                       }
{          Portions tranlated by Mike Lischke           }
{       Translator: Embarcadero Technologies, Inc.      }
{ Copyright(c) 2016 Embarcadero Technologies, Inc.      }
{              All rights reserved                      }
{                                                       }
{*******************************************************}

{*******************************************************}
{       Visual Styles (Themes) API interface unit       }
{*******************************************************}

unit Winapi.UxTheme;

{$HPPEMIT LEGACYHPP}
{$HPPEMIT ''}
{$HPPEMIT '#include "uxtheme.h"'}
{$HPPEMIT ''}

{$ALIGN ON}
{$MINENUMSIZE 4}

interface

uses
  Winapi.Windows, Winapi.CommCtrl;

procedure FreeThemeLibrary;
function InitThemeLibrary: Boolean;
function UseThemes: Boolean;

type
  HTHEME = THANDLE;
  {$EXTERNALSYM HTHEME}

const
  MAX_THEMECOLOR = 64;
  {$EXTERNALSYM MAX_THEMECOLOR}
  MAX_THEMESIZE  = 64;
  {$EXTERNALSYM MAX_THEMESIZE}

function BeginPanningFeedback(hwnd: HWND): BOOL; stdcall;
{$EXTERNALSYM BeginPanningFeedback}
function UpdatePanningFeedback(hwnd: HWND; lTotalOverpanOffsetX: Integer;
  lTotalOverpanOffsetY: Integer; fInInertia: BOOL): BOOL; stdcall;
{$EXTERNALSYM UpdatePanningFeedback}
function EndPanningFeedback(hwnd: HWND; fAnimateBack: BOOL): BOOL; stdcall;
{$EXTERNALSYM EndPanningFeedback}
var
  OpenThemeData: function(hwnd: HWND; pszClassList: LPCWSTR): HTHEME; stdcall;
  {$EXTERNALSYM OpenThemeData}
  CloseThemeData: function(hTheme: HTHEME): HRESULT; stdcall;
  {$EXTERNALSYM CloseThemeData}
  DrawThemeBackground: function(hTheme: HTHEME; hdc: HDC; iPartId, iStateId: Integer;
    const pRect: TRect; pClipRect: PRECT): HRESULT; stdcall;
  {$EXTERNALSYM DrawThemeBackground}
  DrawThemeText: function(hTheme: HTHEME; hdc: HDC; iPartId, iStateId: Integer;
    pszText: LPCWSTR; iCharCount: Integer; dwTextFlags, dwTextFlags2: DWORD;
    const pRect: TRect): HRESULT; stdcall;
  {$EXTERNALSYM DrawThemeText}
  GetThemeBackgroundContentRect: function(hTheme: HTHEME; hdc: HDC;
    iPartId, iStateId: Integer; const pBoundingRect: TRect;
    pContentRect: PRECT): HRESULT; stdcall;
  {$EXTERNALSYM GetThemeBackgroundContentRect}
  GetThemeBackgroundExtent: function(hTheme: HTHEME; hdc: HDC;
    iPartId, iStateId: Integer; const pContentRect: TRect;
    var pExtentRect: TRect): HRESULT; stdcall;
  {$EXTERNALSYM GetThemeBackgroundExtent}

const
  DTT_GRAYED = $1;
  {$EXTERNALSYM DTT_GRAYED}
  { For Windows >= Vista }
  DTT_FLAGS2VALIDBITS = DTT_GRAYED;
  {$EXTERNALSYM DTT_FLAGS2VALIDBITS}

type
  THEMESIZE = (
    TS_MIN,             // minimum size
    TS_TRUE,            // size without stretching
    TS_DRAW             // size that theme mgr will use to draw part
  );
  {$EXTERNALSYM THEMESIZE}
  TThemeSize = THEMESIZE;

var
  GetThemePartSize: function(hTheme: HTHEME; hdc: HDC;
    iPartId, iStateId: Integer; prc: PRECT; eSize: THEMESIZE;
    var psz: TSize): HRESULT; stdcall;
  {$EXTERNALSYM GetThemePartSize}
  GetThemeTextExtent: function(hTheme: HTHEME; hdc: HDC; iPartId, iStateId: Integer; pszText: LPCWSTR;
    iCharCount: Integer; dwTextFlags: DWORD; pBoundingRect: PRECT; var pExtentRect: TRect): HRESULT; stdcall;
  {$EXTERNALSYM GetThemeTextExtent}
  GetThemeTextMetrics: function(hTheme: HTHEME; hdc: HDC; iPartId, iStateId: Integer;
    var ptm: TEXTMETRICW): HRESULT; stdcall;
  {$EXTERNALSYM GetThemeTextMetrics}
  GetThemeBackgroundRegion: function(hTheme: HTHEME; hdc: HDC; iPartId, iStateId: Integer; const pRect: TRect;
    var pRegion: HRGN): HRESULT; stdcall;
  {$EXTERNALSYM GetThemeBackgroundRegion}

{ HitTestThemeBackground, HitTestThemeBackgroundRegion flags }
const
  HTTB_BACKGROUNDSEG         = $0000;
  {$EXTERNALSYM HTTB_BACKGROUNDSEG}
  HTTB_FIXEDBORDER           = $0002;  // Return code may be either HTCLIENT or HTBORDER.
  {$EXTERNALSYM HTTB_FIXEDBORDER}
  HTTB_CAPTION               = $0004;
  {$EXTERNALSYM HTTB_CAPTION}
  HTTB_RESIZINGBORDER_LEFT   = $0010; // Hit test left resizing border,
  {$EXTERNALSYM HTTB_RESIZINGBORDER_LEFT}
  HTTB_RESIZINGBORDER_TOP    = $0020; // Hit test top resizing border
  {$EXTERNALSYM HTTB_RESIZINGBORDER_TOP}
  HTTB_RESIZINGBORDER_RIGHT  = $0040; // Hit test right resizing border
  {$EXTERNALSYM HTTB_RESIZINGBORDER_RIGHT}
  HTTB_RESIZINGBORDER_BOTTOM = $0080; // Hit test bottom resizing border
  {$EXTERNALSYM HTTB_RESIZINGBORDER_BOTTOM}
  HTTB_RESIZINGBORDER        = (HTTB_RESIZINGBORDER_LEFT or HTTB_RESIZINGBORDER_TOP or
                                HTTB_RESIZINGBORDER_RIGHT or HTTB_RESIZINGBORDER_BOTTOM);
  {$EXTERNALSYM HTTB_RESIZINGBORDER}
  HTTB_SIZINGTEMPLATE        = $0100;
  {$EXTERNALSYM HTTB_SIZINGTEMPLATE}
  HTTB_SYSTEMSIZINGMARGINS   = $0200;
  {$EXTERNALSYM HTTB_SYSTEMSIZINGMARGINS}

var
  HitTestThemeBackground: function(hTheme: HTHEME; hdc: HDC;
    iPartId, iStateId: Integer; dwOptions: DWORD; const pRect: TRect;
    hrgn: HRGN; ptTest: TPoint; var pwHitTestCode: WORD): HRESULT; stdcall;
  {$EXTERNALSYM HitTestThemeBackground}
  DrawThemeEdge: function(hTheme: HTHEME; hdc: HDC; iPartId, iStateId: Integer;
    const pDestRect: TRect; uEdge, uFlags: UINT; pContentRect: PRECT): HRESULT; stdcall;
  {$EXTERNALSYM DrawThemeEdge}
  DrawThemeIcon: function(hTheme: HTHEME; hdc: HDC; iPartId, iStateId: Integer;
    const pRect: TRect; himl: HIMAGELIST; iImageIndex: Integer): HRESULT; stdcall;
  {$EXTERNALSYM DrawThemeIcon}
  IsThemePartDefined: function(hTheme: HTHEME; iPartId, iStateId: Integer): BOOL; stdcall;
  {$EXTERNALSYM IsThemePartDefined}
  IsThemeBackgroundPartiallyTransparent: function(hTheme: HTHEME;
    iPartId, iStateId: Integer): BOOL; stdcall;
  {$EXTERNALSYM IsThemeBackgroundPartiallyTransparent}
  GetThemeColor: function(hTheme: HTHEME; iPartId, iStateId, iPropId: Integer;
    var pColor: COLORREF): HRESULT; stdcall;
  {$EXTERNALSYM GetThemeColor}
  GetThemeMetric: function(hTheme: HTHEME; hdc: HDC; iPartId, iStateId, iPropId: Integer;
    var piVal: Integer): HRESULT; stdcall;
  {$EXTERNALSYM GetThemeMetric}
  GetThemeString: function(hTheme: HTHEME; iPartId, iStateId, iPropId: Integer;
    pszBuff: LPWSTR; cchMaxBuffChars: Integer): HRESULT; stdcall;
  {$EXTERNALSYM GetThemeString}
  GetThemeBool: function(hTheme: HTHEME; iPartId, iStateId, iPropId: Integer;
    var pfVal: BOOL): HRESULT; stdcall;
  {$EXTERNALSYM GetThemeBool}
  GetThemeInt: function(hTheme: HTHEME; iPartId, iStateId, iPropId: Integer;
    var piVal: Integer): HRESULT; stdcall;
  {$EXTERNALSYM GetThemeInt}
  GetThemeEnumValue: function(hTheme: HTHEME; iPartId, iStateId, iPropId: Integer;
    var piVal: Integer): HRESULT; stdcall;
  {$EXTERNALSYM GetThemeEnumValue}
  GetThemePosition: function(hTheme: HTHEME; iPartId, iStateId, iPropId: Integer;
    var pPoint: TPoint): HRESULT; stdcall;
  {$EXTERNALSYM GetThemePosition}
  GetThemeFont: function(hTheme: HTHEME; hdc: HDC; iPartId, iStateId, iPropId: Integer;
    var pFont: LOGFONTW): HRESULT; stdcall;
  {$EXTERNALSYM GetThemeFont}
  GetThemeRect: function(hTheme: HTHEME; iPartId, iStateId, iPropId: Integer;
    var pRect: TRect): HRESULT; stdcall;
  {$EXTERNALSYM GetThemeRect}

type
  _MARGINS = record
    cxLeftWidth: Integer;      // width of left border that retains its size
    cxRightWidth: Integer;     // width of right border that retains its size
    cyTopHeight: Integer;      // height of top border that retains its size
    cyBottomHeight: Integer;   // height of bottom border that retains its size
  end;
  {$EXTERNALSYM _MARGINS}
  MARGINS = _MARGINS;
  {$EXTERNALSYM MARGINS}
  PMARGINS = ^MARGINS;
  {$EXTERNALSYM PMARGINS}
  TMargins = MARGINS;

var
  GetThemeMargins: function(hTheme: HTHEME; hdc: HDC; iPartId, iStateId, iPropId: Integer; prc: PRECT;
    var pMargins: MARGINS): HRESULT; stdcall;
{$EXTERNALSYM GetThemeMargins}

const
  { if _WIN32_WINNT >= 0x0600 }
  MAX_INTLIST_COUNT = 402;
  { else }
  //MAX_INTLIST_COUNT = 10;
  { endif }
  {$EXTERNALSYM MAX_INTLIST_COUNT}
  MAX_INTLIST_COUNT_600 = 402; // For Windows >= 6.00 (Vista)

type
  _INTLIST = record
    iValueCount: Integer;      // number of values in iValues
    iValues: array [0..MAX_INTLIST_COUNT_600 - 1] of Integer;
  end;
  {$EXTERNALSYM _INTLIST}
  INTLIST = _INTLIST;
  {$EXTERNALSYM INTLIST}
  PINTLIST = ^INTLIST;
  {$EXTERNALSYM PINTLIST}
  TIntList = INTLIST;

var
  GetThemeIntList: function(hTheme: HTHEME; iPartId, iStateId, iPropId: Integer; var pIntList: INTLIST): HRESULT; stdcall;
{$EXTERNALSYM GetThemeIntList}

type
  PROPERTYORIGIN = (
    PO_STATE,           // property was found in the state section
    PO_PART,            // property was found in the part section
    PO_CLASS,           // property was found in the class section
    PO_GLOBAL,          // property was found in [globals] section
    PO_NOTFOUND);       // property was not found
  {$EXTERNALSYM PROPERTYORIGIN}
  TPropertyOrigin = PROPERTYORIGIN;

var
  GetThemePropertyOrigin: function(hTheme: HTHEME; iPartId, iStateId, iPropId: Integer;
    var pOrigin: PROPERTYORIGIN): HRESULT; stdcall;
  {$EXTERNALSYM GetThemePropertyOrigin}
  SetWindowTheme: function(hwnd: HWND; pszSubAppName: LPCWSTR;
    pszSubIdList: LPCWSTR): HRESULT; stdcall;
  {$EXTERNALSYM SetWindowTheme}
  GetThemeFilename: function(hTheme: HTHEME; iPartId, iStateId, iPropId: Integer;
    pszThemeFileName: LPWSTR; cchMaxBuffChars: Integer): HRESULT; stdcall;
  {$EXTERNALSYM GetThemeFilename}
  GetThemeSysColor: function(hTheme: HTHEME; iColorId: Integer): COLORREF; stdcall;
  {$EXTERNALSYM GetThemeSysColor}
  GetThemeSysColorBrush: function(hTheme: HTHEME; iColorId: Integer): HBRUSH; stdcall;
  {$EXTERNALSYM GetThemeSysColorBrush}
  GetThemeSysBool: function(hTheme: HTHEME; iBoolId: Integer): BOOL; stdcall;
  {$EXTERNALSYM GetThemeSysBool}
  GetThemeSysSize: function(hTheme: HTHEME; iSizeId: Integer): Integer; stdcall;
  {$EXTERNALSYM GetThemeSysSize}
  GetThemeSysFont: function(hTheme: HTHEME; iFontId: Integer;
    var plf: LOGFONTW): HRESULT; stdcall;
  {$EXTERNALSYM GetThemeSysFont}
  GetThemeSysString: function(hTheme: HTHEME; iStringId: Integer;
    pszStringBuff: LPWSTR; cchMaxStringChars: Integer): HRESULT; stdcall;
  {$EXTERNALSYM GetThemeSysString}
  GetThemeSysInt: function(hTheme: HTHEME; iIntId: Integer;
    var piValue: Integer): HRESULT; stdcall;
  {$EXTERNALSYM GetThemeSysInt}
  IsThemeActive: function: BOOL; stdcall;
  {$EXTERNALSYM IsThemeActive}
  IsAppThemed: function: BOOL; stdcall;
  {$EXTERNALSYM IsAppThemed}
  GetWindowTheme: function(hwnd: HWND): HTHEME; stdcall;
  {$EXTERNALSYM GetWindowTheme}

const
  ETDT_DISABLE       = $00000001;
  {$EXTERNALSYM ETDT_DISABLE}
  ETDT_ENABLE        = $00000002;
  {$EXTERNALSYM ETDT_ENABLE}
  ETDT_USETABTEXTURE = $00000004;
  {$EXTERNALSYM ETDT_USETABTEXTURE}
  { For Windows >= Vista }
  ETDT_USEAEROWIZARDTABTEXTURE    = $00000008;
  {$EXTERNALSYM ETDT_USEAEROWIZARDTABTEXTURE}

  ETDT_ENABLETAB     = (ETDT_ENABLE or ETDT_USETABTEXTURE);
  {$EXTERNALSYM ETDT_ENABLETAB}

  { For Windows >= Vista }
  ETDT_ENABLEAEROWIZARDTAB = (ETDT_ENABLE or ETDT_USEAEROWIZARDTABTEXTURE);
  {$EXTERNALSYM ETDT_ENABLEAEROWIZARDTAB}
  ETDT_VALIDBITS           = ETDT_DISABLE or
                             ETDT_ENABLE or
                             ETDT_USETABTEXTURE or
                             ETDT_USEAEROWIZARDTABTEXTURE;
  {$EXTERNALSYM ETDT_VALIDBITS}

var
  EnableThemeDialogTexture: function(hwnd: HWND; dwFlags: DWORD): HRESULT; stdcall;
{$EXTERNALSYM EnableThemeDialogTexture}

var
  IsThemeDialogTextureEnabled: function(hwnd: HWND): BOOL; stdcall;
{$EXTERNALSYM IsThemeDialogTextureEnabled}


{ Flags to control theming within an application }
const
  STAP_ALLOW_NONCLIENT   = (1 shl 0);
  {$EXTERNALSYM STAP_ALLOW_NONCLIENT}
  STAP_ALLOW_CONTROLS    = (1 shl 1);
  {$EXTERNALSYM STAP_ALLOW_CONTROLS}
  STAP_ALLOW_WEBCONTENT  = (1 shl 2);
  {$EXTERNALSYM STAP_ALLOW_WEBCONTENT}
  { For Windows >= Vista }
  STAP_VALIDBITS         = STAP_ALLOW_NONCLIENT or
                           STAP_ALLOW_CONTROLS or
                           STAP_ALLOW_WEBCONTENT;
  {$EXTERNALSYM STAP_VALIDBITS}


var
  GetThemeAppProperties: function: DWORD; stdcall;
  {$EXTERNALSYM GetThemeAppProperties}
  SetThemeAppProperties: procedure(dwFlags: DWORD); stdcall;
  {$EXTERNALSYM SetThemeAppProperties}
  GetCurrentThemeName: function(pszThemeFileName: LPWSTR;
    cchMaxNameChars: Integer; pszColorBuff: LPWSTR; cchMaxColorChars: Integer;
    pszSizeBuff: LPWSTR; cchMaxSizeChars: Integer): HRESULT; stdcall;
  {$EXTERNALSYM GetCurrentThemeName}


const
  SZ_THDOCPROP_DISPLAYNAME               = WideString('DisplayName');
  {$EXTERNALSYM SZ_THDOCPROP_DISPLAYNAME}
  SZ_THDOCPROP_CANONICALNAME             = WideString('ThemeName');
  {$EXTERNALSYM SZ_THDOCPROP_CANONICALNAME}
  SZ_THDOCPROP_TOOLTIP                   = WideString('ToolTip');
  {$EXTERNALSYM SZ_THDOCPROP_TOOLTIP}
  SZ_THDOCPROP_AUTHOR                    = WideString('author');
  {$EXTERNALSYM SZ_THDOCPROP_AUTHOR}

var
  GetThemeDocumentationProperty: function(pszThemeName, pszPropertyName: LPCWSTR;
    pszValueBuff: LPWSTR; cchMaxValChars: Integer): HRESULT; stdcall;
  {$EXTERNALSYM GetThemeDocumentationProperty}
  DrawThemeParentBackground: function(hwnd: HWND; hdc: HDC; prc: PRECT): HRESULT; stdcall;
  {$EXTERNALSYM DrawThemeParentBackground}
  EnableTheming: function(fEnable: BOOL): HRESULT; stdcall;
  {$EXTERNALSYM EnableTheming}

{ Tmschema.h }

type
  BGTYPE = Integer;
  {$EXTERNALSYM BGTYPE}
const
  BT_IMAGEFILE = 0;
  {$EXTERNALSYM BT_IMAGEFILE}
  BT_BORDERFILL = 1;
  {$EXTERNALSYM BT_BORDERFILL}
  BT_NONE = 2;
  {$EXTERNALSYM BT_NONE}

type
  IMAGELAYOUT = Integer;
  {$EXTERNALSYM IMAGELAYOUT}
const
  IL_VERTICAL = 0;
  {$EXTERNALSYM IL_VERTICAL}
  IL_HORIZONTAL = 1;
  {$EXTERNALSYM IL_HORIZONTAL}

type
  BORDERTYPE = Integer;
  {$EXTERNALSYM BORDERTYPE}
const
  BT_RECT = 0;
  {$EXTERNALSYM BT_RECT}
  BT_ROUNDRECT = 1;
  {$EXTERNALSYM BT_ROUNDRECT}
  BT_ELLIPSE = 2;
  {$EXTERNALSYM BT_ELLIPSE}

type
  FILLTYPE = Integer;
  {$EXTERNALSYM FILLTYPE}
const
  FT_SOLID = 0;
  {$EXTERNALSYM FT_SOLID}
  FT_VERTGRADIENT = 1;
  {$EXTERNALSYM FT_VERTGRADIENT}
  FT_HORZGRADIENT = 2;
  {$EXTERNALSYM FT_HORZGRADIENT}
  FT_RADIALGRADIENT = 3;
  {$EXTERNALSYM FT_RADIALGRADIENT}
  FT_TILEIMAGE = 4;
  {$EXTERNALSYM FT_TILEIMAGE}

type
  SIZINGTYPE = Integer;
  {$EXTERNALSYM SIZINGTYPE}
const
  ST_TRUESIZE = 0;
  {$EXTERNALSYM ST_TRUESIZE}
  ST_STRETCH = 1;
  {$EXTERNALSYM ST_STRETCH}
  ST_TILE = 2;
  {$EXTERNALSYM ST_TILE}

type
  HALIGN = Integer;
  {$EXTERNALSYM HALIGN}
const
  HA_LEFT = 0;
  {$EXTERNALSYM HA_LEFT}
  HA_CENTER = 1;
  {$EXTERNALSYM HA_CENTER}
  HA_RIGHT = 2;
  {$EXTERNALSYM HA_RIGHT}

type
  CONTENTALIGNMENT = Integer;
  {$EXTERNALSYM CONTENTALIGNMENT}
const
  CA_LEFT = 0;
  {$EXTERNALSYM CA_LEFT}
  CA_CENTER = 1;
  {$EXTERNALSYM CA_CENTER}
  CA_RIGHT = 2;
  {$EXTERNALSYM CA_RIGHT}

type
  VALIGN = Integer;
  {$EXTERNALSYM VALIGN}
const
  VA_TOP = 0;
  {$EXTERNALSYM VA_TOP}
  VA_CENTER = 1;
  {$EXTERNALSYM VA_CENTER}
  VA_BOTTOM = 2;
  {$EXTERNALSYM VA_BOTTOM}

type
  OFFSETTYPE = Integer;
  {$EXTERNALSYM OFFSETTYPE}
const
  OT_TOPLEFT = 0;
  {$EXTERNALSYM OT_TOPLEFT}
  OT_TOPRIGHT = 1;
  {$EXTERNALSYM OT_TOPRIGHT}
  OT_TOPMIDDLE = 2;
  {$EXTERNALSYM OT_TOPMIDDLE}
  OT_BOTTOMLEFT = 3;
  {$EXTERNALSYM OT_BOTTOMLEFT}
  OT_BOTTOMRIGHT = 4;
  {$EXTERNALSYM OT_BOTTOMRIGHT}
  OT_BOTTOMMIDDLE = 5;
  {$EXTERNALSYM OT_BOTTOMMIDDLE}
  OT_MIDDLELEFT = 6;
  {$EXTERNALSYM OT_MIDDLELEFT}
  OT_MIDDLERIGHT = 7;
  {$EXTERNALSYM OT_MIDDLERIGHT}
  OT_LEFTOFCAPTION = 8;
  {$EXTERNALSYM OT_LEFTOFCAPTION}
  OT_RIGHTOFCAPTION = 9;
  {$EXTERNALSYM OT_RIGHTOFCAPTION}
  OT_LEFTOFLASTBUTTON = 10;
  {$EXTERNALSYM OT_LEFTOFLASTBUTTON}
  OT_RIGHTOFLASTBUTTON = 11;
  {$EXTERNALSYM OT_RIGHTOFLASTBUTTON}
  OT_ABOVELASTBUTTON = 12;
  {$EXTERNALSYM OT_ABOVELASTBUTTON}
  OT_BELOWLASTBUTTON = 13;
  {$EXTERNALSYM OT_BELOWLASTBUTTON}

type
  ICONEFFECT = Integer;
  {$EXTERNALSYM ICONEFFECT}
const
  ICE_NONE = 0;
  {$EXTERNALSYM ICE_NONE}
  ICE_GLOW = 1;
  {$EXTERNALSYM ICE_GLOW}
  ICE_SHADOW = 2;
  {$EXTERNALSYM ICE_SHADOW}
  ICE_PULSE = 3;
  {$EXTERNALSYM ICE_PULSE}
  ICE_ALPHA = 4;
  {$EXTERNALSYM ICE_ALPHA}

type
  TEXTSHADOWTYPE = Integer;
  {$EXTERNALSYM TEXTSHADOWTYPE}
const
  TST_NONE = 0;
  {$EXTERNALSYM TST_NONE}
  TST_SINGLE = 1;
  {$EXTERNALSYM TST_SINGLE}
  TST_CONTINUOUS = 2;
  {$EXTERNALSYM TST_CONTINUOUS}

type
  GLYPHTYPE = Integer;
  {$EXTERNALSYM GLYPHTYPE}
const
  GT_NONE = 0;
  {$EXTERNALSYM GT_NONE}
  GT_IMAGEGLYPH = 1;
  {$EXTERNALSYM GT_IMAGEGLYPH}
  GT_FONTGLYPH = 2;
  {$EXTERNALSYM GT_FONTGLYPH}

type
  IMAGESELECTTYPE = Integer;
  {$EXTERNALSYM IMAGESELECTTYPE}
const
  IST_NONE = 0;
  {$EXTERNALSYM IST_NONE}
  IST_SIZE = 1;
  {$EXTERNALSYM IST_SIZE}
  IST_DPI = 2;
  {$EXTERNALSYM IST_DPI}

type
  TRUESIZESCALINGTYPE = Integer;
  {$EXTERNALSYM TRUESIZESCALINGTYPE}
const
  TSST_NONE = 0;
  {$EXTERNALSYM TSST_NONE}
  TSST_SIZE = 1;
  {$EXTERNALSYM TSST_SIZE}
  TSST_DPI = 2;
  {$EXTERNALSYM TSST_DPI}

type
  GLYPHFONTSIZINGTYPE = Integer;
  {$EXTERNALSYM GLYPHFONTSIZINGTYPE}
const
  GFST_NONE = 0;
  {$EXTERNALSYM GFST_NONE}
  GFST_SIZE = 1;
  {$EXTERNALSYM GFST_SIZE}
  GFST_DPI = 2;
  {$EXTERNALSYM GFST_DPI}

type
  PropValues = Integer;
  {$EXTERNALSYM PropValues}
const
  DummyProp = 49;
  {$EXTERNALSYM DummyProp}

  TMT_RESERVEDLOW = 0; 
  {$EXTERNALSYM TMT_RESERVEDLOW}
  TMT_RESERVEDHIGH        = 7999; 
  {$EXTERNALSYM TMT_RESERVEDHIGH}

  TMT_DIBDATA     = 2; 
  {$EXTERNALSYM TMT_DIBDATA}
  TMT_GLYPHDIBDATA        = 8; 
  {$EXTERNALSYM TMT_GLYPHDIBDATA}
  TMT_ENUM        = 200; 
  {$EXTERNALSYM TMT_ENUM}
  TMT_STRING      = 201; 
  {$EXTERNALSYM TMT_STRING}
  TMT_INT = 202; 
  {$EXTERNALSYM TMT_INT}
  TMT_BOOL        = 203; 
  {$EXTERNALSYM TMT_BOOL}
  TMT_COLOR       = 204; 
  {$EXTERNALSYM TMT_COLOR}
  TMT_MARGINS     = 205; 
  {$EXTERNALSYM TMT_MARGINS}
  TMT_FILENAME    = 206; 
  {$EXTERNALSYM TMT_FILENAME}
  TMT_SIZE        = 207; 
  {$EXTERNALSYM TMT_SIZE}
  TMT_POSITION    = 208; 
  {$EXTERNALSYM TMT_POSITION}
  TMT_RECT        = 209; 
  {$EXTERNALSYM TMT_RECT}
  TMT_FONT        = 210; 
  {$EXTERNALSYM TMT_FONT}
  TMT_INTLIST     = 211; 
  {$EXTERNALSYM TMT_INTLIST}
  TMT_HBITMAP     = 212; 
  {$EXTERNALSYM TMT_HBITMAP}
  TMT_DISKSTREAM  = 213; 
  {$EXTERNALSYM TMT_DISKSTREAM}
  TMT_STREAM      = 214; 
  {$EXTERNALSYM TMT_STREAM}
  TMT_BITMAPREF   = 215; 
  {$EXTERNALSYM TMT_BITMAPREF}
  TMT_COLORSCHEMES        = 401; 
  {$EXTERNALSYM TMT_COLORSCHEMES}
  TMT_SIZES       = 402; 
  {$EXTERNALSYM TMT_SIZES}
  TMT_CHARSET     = 403; 
  {$EXTERNALSYM TMT_CHARSET}
  TMT_NAME        = 600; 
  {$EXTERNALSYM TMT_NAME}
  TMT_DISPLAYNAME = 601; 
  {$EXTERNALSYM TMT_DISPLAYNAME}
  TMT_TOOLTIP     = 602; 
  {$EXTERNALSYM TMT_TOOLTIP}
  TMT_COMPANY     = 603; 
  {$EXTERNALSYM TMT_COMPANY}
  TMT_AUTHOR      = 604; 
  {$EXTERNALSYM TMT_AUTHOR}
  TMT_COPYRIGHT   = 605; 
  {$EXTERNALSYM TMT_COPYRIGHT}
  TMT_URL = 606; 
  {$EXTERNALSYM TMT_URL}
  TMT_VERSION     = 607; 
  {$EXTERNALSYM TMT_VERSION}
  TMT_DESCRIPTION = 608; 
  {$EXTERNALSYM TMT_DESCRIPTION}
  TMT_FIRST_RCSTRING_NAME = TMT_DISPLAYNAME; 
  {$EXTERNALSYM TMT_FIRST_RCSTRING_NAME}
  TMT_LAST_RCSTRING_NAME  = TMT_DESCRIPTION; 
  {$EXTERNALSYM TMT_LAST_RCSTRING_NAME}
  TMT_CAPTIONFONT = 801; 
  {$EXTERNALSYM TMT_CAPTIONFONT}
  TMT_SMALLCAPTIONFONT    = 802; 
  {$EXTERNALSYM TMT_SMALLCAPTIONFONT}
  TMT_MENUFONT    = 803; 
  {$EXTERNALSYM TMT_MENUFONT}
  TMT_STATUSFONT  = 804; 
  {$EXTERNALSYM TMT_STATUSFONT}
  TMT_MSGBOXFONT  = 805; 
  {$EXTERNALSYM TMT_MSGBOXFONT}
  TMT_ICONTITLEFONT       = 806; 
  {$EXTERNALSYM TMT_ICONTITLEFONT}
  TMT_HEADING1FONT        = 807; 
  {$EXTERNALSYM TMT_HEADING1FONT}
  TMT_HEADING2FONT        = 808; 
  {$EXTERNALSYM TMT_HEADING2FONT}
  TMT_BODYFONT    = 809; 
  {$EXTERNALSYM TMT_BODYFONT}
  TMT_FIRSTFONT   = TMT_CAPTIONFONT; 
  {$EXTERNALSYM TMT_FIRSTFONT}
  TMT_LASTFONT    = TMT_BODYFONT; 
  {$EXTERNALSYM TMT_LASTFONT}
  TMT_FLATMENUS   = 1001; 
  {$EXTERNALSYM TMT_FLATMENUS}
  TMT_FIRSTBOOL   = TMT_FLATMENUS; 
  {$EXTERNALSYM TMT_FIRSTBOOL}
  TMT_LASTBOOL    = TMT_FLATMENUS; 
  {$EXTERNALSYM TMT_LASTBOOL}
  TMT_SIZINGBORDERWIDTH   = 1201; 
  {$EXTERNALSYM TMT_SIZINGBORDERWIDTH}
  TMT_SCROLLBARWIDTH      = 1202; 
  {$EXTERNALSYM TMT_SCROLLBARWIDTH}
  TMT_SCROLLBARHEIGHT     = 1203; 
  {$EXTERNALSYM TMT_SCROLLBARHEIGHT}
  TMT_CAPTIONBARWIDTH     = 1204; 
  {$EXTERNALSYM TMT_CAPTIONBARWIDTH}
  TMT_CAPTIONBARHEIGHT    = 1205; 
  {$EXTERNALSYM TMT_CAPTIONBARHEIGHT}
  TMT_SMCAPTIONBARWIDTH   = 1206; 
  {$EXTERNALSYM TMT_SMCAPTIONBARWIDTH}
  TMT_SMCAPTIONBARHEIGHT  = 1207; 
  {$EXTERNALSYM TMT_SMCAPTIONBARHEIGHT}
  TMT_MENUBARWIDTH        = 1208; 
  {$EXTERNALSYM TMT_MENUBARWIDTH}
  TMT_MENUBARHEIGHT       = 1209; 
  {$EXTERNALSYM TMT_MENUBARHEIGHT}
  TMT_PADDEDBORDERWIDTH   = 1210; 
  {$EXTERNALSYM TMT_PADDEDBORDERWIDTH}
  TMT_FIRSTSIZE   = TMT_SIZINGBORDERWIDTH; 
  {$EXTERNALSYM TMT_FIRSTSIZE}
  TMT_LASTSIZE    = TMT_PADDEDBORDERWIDTH; 
  {$EXTERNALSYM TMT_LASTSIZE}
  TMT_MINCOLORDEPTH       = 1301; 
  {$EXTERNALSYM TMT_MINCOLORDEPTH}
  TMT_FIRSTINT    = TMT_MINCOLORDEPTH; 
  {$EXTERNALSYM TMT_FIRSTINT}
  TMT_LASTINT     = TMT_MINCOLORDEPTH; 
  {$EXTERNALSYM TMT_LASTINT}
  TMT_CSSNAME     = 1401; 
  {$EXTERNALSYM TMT_CSSNAME}
  TMT_XMLNAME     = 1402; 
  {$EXTERNALSYM TMT_XMLNAME}
  TMT_LASTUPDATED = 1403; 
  {$EXTERNALSYM TMT_LASTUPDATED}
  TMT_ALIAS       = 1404; 
  {$EXTERNALSYM TMT_ALIAS}
  TMT_FIRSTSTRING = TMT_CSSNAME; 
  {$EXTERNALSYM TMT_FIRSTSTRING}
  TMT_LASTSTRING  = TMT_ALIAS; 
  {$EXTERNALSYM TMT_LASTSTRING}
  TMT_SCROLLBAR   = 1601; 
  {$EXTERNALSYM TMT_SCROLLBAR}
  TMT_BACKGROUND  = 1602; 
  {$EXTERNALSYM TMT_BACKGROUND}
  TMT_ACTIVECAPTION       = 1603; 
  {$EXTERNALSYM TMT_ACTIVECAPTION}
  TMT_INACTIVECAPTION     = 1604; 
  {$EXTERNALSYM TMT_INACTIVECAPTION}
  TMT_MENU        = 1605; 
  {$EXTERNALSYM TMT_MENU}
  TMT_WINDOW      = 1606; 
  {$EXTERNALSYM TMT_WINDOW}
  TMT_WINDOWFRAME = 1607; 
  {$EXTERNALSYM TMT_WINDOWFRAME}
  TMT_MENUTEXT    = 1608; 
  {$EXTERNALSYM TMT_MENUTEXT}
  TMT_WINDOWTEXT  = 1609; 
  {$EXTERNALSYM TMT_WINDOWTEXT}
  TMT_CAPTIONTEXT = 1610; 
  {$EXTERNALSYM TMT_CAPTIONTEXT}
  TMT_ACTIVEBORDER        = 1611; 
  {$EXTERNALSYM TMT_ACTIVEBORDER}
  TMT_INACTIVEBORDER      = 1612; 
  {$EXTERNALSYM TMT_INACTIVEBORDER}
  TMT_APPWORKSPACE        = 1613; 
  {$EXTERNALSYM TMT_APPWORKSPACE}
  TMT_HIGHLIGHT   = 1614; 
  {$EXTERNALSYM TMT_HIGHLIGHT}
  TMT_HIGHLIGHTTEXT       = 1615; 
  {$EXTERNALSYM TMT_HIGHLIGHTTEXT}
  TMT_BTNFACE     = 1616; 
  {$EXTERNALSYM TMT_BTNFACE}
  TMT_BTNSHADOW   = 1617; 
  {$EXTERNALSYM TMT_BTNSHADOW}
  TMT_GRAYTEXT    = 1618; 
  {$EXTERNALSYM TMT_GRAYTEXT}
  TMT_BTNTEXT     = 1619; 
  {$EXTERNALSYM TMT_BTNTEXT}
  TMT_INACTIVECAPTIONTEXT = 1620; 
  {$EXTERNALSYM TMT_INACTIVECAPTIONTEXT}
  TMT_BTNHIGHLIGHT        = 1621; 
  {$EXTERNALSYM TMT_BTNHIGHLIGHT}
  TMT_DKSHADOW3D  = 1622; 
  {$EXTERNALSYM TMT_DKSHADOW3D}
  TMT_LIGHT3D     = 1623; 
  {$EXTERNALSYM TMT_LIGHT3D}
  TMT_INFOTEXT    = 1624; 
  {$EXTERNALSYM TMT_INFOTEXT}
  TMT_INFOBK      = 1625; 
  {$EXTERNALSYM TMT_INFOBK}
  TMT_BUTTONALTERNATEFACE = 1626; 
  {$EXTERNALSYM TMT_BUTTONALTERNATEFACE}
  TMT_HOTTRACKING = 1627; 
  {$EXTERNALSYM TMT_HOTTRACKING}
  TMT_GRADIENTACTIVECAPTION       = 1628; 
  {$EXTERNALSYM TMT_GRADIENTACTIVECAPTION}
  TMT_GRADIENTINACTIVECAPTION     = 1629; 
  {$EXTERNALSYM TMT_GRADIENTINACTIVECAPTION}
  TMT_MENUHILIGHT = 1630; 
  {$EXTERNALSYM TMT_MENUHILIGHT}
  TMT_MENUBAR     = 1631; 
  {$EXTERNALSYM TMT_MENUBAR}
  TMT_FIRSTCOLOR  = TMT_SCROLLBAR; 
  {$EXTERNALSYM TMT_FIRSTCOLOR}
  TMT_LASTCOLOR   = TMT_MENUBAR; 
  {$EXTERNALSYM TMT_LASTCOLOR}
  TMT_FROMHUE1    = 1801; 
  {$EXTERNALSYM TMT_FROMHUE1}
  TMT_FROMHUE2    = 1802; 
  {$EXTERNALSYM TMT_FROMHUE2}
  TMT_FROMHUE3    = 1803; 
  {$EXTERNALSYM TMT_FROMHUE3}
  TMT_FROMHUE4    = 1804; 
  {$EXTERNALSYM TMT_FROMHUE4}
  TMT_FROMHUE5    = 1805; 
  {$EXTERNALSYM TMT_FROMHUE5}
  TMT_TOHUE1      = 1806; 
  {$EXTERNALSYM TMT_TOHUE1}
  TMT_TOHUE2      = 1807; 
  {$EXTERNALSYM TMT_TOHUE2}
  TMT_TOHUE3      = 1808; 
  {$EXTERNALSYM TMT_TOHUE3}
  TMT_TOHUE4      = 1809; 
  {$EXTERNALSYM TMT_TOHUE4}
  TMT_TOHUE5      = 1810; 
  {$EXTERNALSYM TMT_TOHUE5}
  TMT_FROMCOLOR1  = 2001; 
  {$EXTERNALSYM TMT_FROMCOLOR1}
  TMT_FROMCOLOR2  = 2002; 
  {$EXTERNALSYM TMT_FROMCOLOR2}
  TMT_FROMCOLOR3  = 2003; 
  {$EXTERNALSYM TMT_FROMCOLOR3}
  TMT_FROMCOLOR4  = 2004; 
  {$EXTERNALSYM TMT_FROMCOLOR4}
  TMT_FROMCOLOR5  = 2005; 
  {$EXTERNALSYM TMT_FROMCOLOR5}
  TMT_TOCOLOR1    = 2006; 
  {$EXTERNALSYM TMT_TOCOLOR1}
  TMT_TOCOLOR2    = 2007; 
  {$EXTERNALSYM TMT_TOCOLOR2}
  TMT_TOCOLOR3    = 2008; 
  {$EXTERNALSYM TMT_TOCOLOR3}
  TMT_TOCOLOR4    = 2009; 
  {$EXTERNALSYM TMT_TOCOLOR4}
  TMT_TOCOLOR5    = 2010; 
  {$EXTERNALSYM TMT_TOCOLOR5}
  TMT_TRANSPARENT = 2201; 
  {$EXTERNALSYM TMT_TRANSPARENT}
  TMT_AUTOSIZE    = 2202; 
  {$EXTERNALSYM TMT_AUTOSIZE}
  TMT_BORDERONLY  = 2203; 
  {$EXTERNALSYM TMT_BORDERONLY}
  TMT_COMPOSITED  = 2204; 
  {$EXTERNALSYM TMT_COMPOSITED}
  TMT_BGFILL      = 2205; 
  {$EXTERNALSYM TMT_BGFILL}
  TMT_GLYPHTRANSPARENT    = 2206; 
  {$EXTERNALSYM TMT_GLYPHTRANSPARENT}
  TMT_GLYPHONLY   = 2207; 
  {$EXTERNALSYM TMT_GLYPHONLY}
  TMT_ALWAYSSHOWSIZINGBAR = 2208; 
  {$EXTERNALSYM TMT_ALWAYSSHOWSIZINGBAR}
  TMT_MIRRORIMAGE = 2209; 
  {$EXTERNALSYM TMT_MIRRORIMAGE}
  TMT_UNIFORMSIZING       = 2210; 
  {$EXTERNALSYM TMT_UNIFORMSIZING}
  TMT_INTEGRALSIZING      = 2211; 
  {$EXTERNALSYM TMT_INTEGRALSIZING}
  TMT_SOURCEGROW  = 2212; 
  {$EXTERNALSYM TMT_SOURCEGROW}
  TMT_SOURCESHRINK        = 2213; 
  {$EXTERNALSYM TMT_SOURCESHRINK}
  TMT_DRAWBORDERS = 2214; 
  {$EXTERNALSYM TMT_DRAWBORDERS}
  TMT_NOETCHEDEFFECT      = 2215; 
  {$EXTERNALSYM TMT_NOETCHEDEFFECT}
  TMT_TEXTAPPLYOVERLAY    = 2216; 
  {$EXTERNALSYM TMT_TEXTAPPLYOVERLAY}
  TMT_TEXTGLOW    = 2217; 
  {$EXTERNALSYM TMT_TEXTGLOW}
  TMT_TEXTITALIC  = 2218; 
  {$EXTERNALSYM TMT_TEXTITALIC}
  TMT_COMPOSITEDOPAQUE    = 2219; 
  {$EXTERNALSYM TMT_COMPOSITEDOPAQUE}
  TMT_LOCALIZEDMIRRORIMAGE        = 2220; 
  {$EXTERNALSYM TMT_LOCALIZEDMIRRORIMAGE}
  TMT_IMAGECOUNT  = 2401; 
  {$EXTERNALSYM TMT_IMAGECOUNT}
  TMT_ALPHALEVEL  = 2402; 
  {$EXTERNALSYM TMT_ALPHALEVEL}
  TMT_BORDERSIZE  = 2403; 
  {$EXTERNALSYM TMT_BORDERSIZE}
  TMT_ROUNDCORNERWIDTH    = 2404; 
  {$EXTERNALSYM TMT_ROUNDCORNERWIDTH}
  TMT_ROUNDCORNERHEIGHT   = 2405; 
  {$EXTERNALSYM TMT_ROUNDCORNERHEIGHT}
  TMT_GRADIENTRATIO1      = 2406; 
  {$EXTERNALSYM TMT_GRADIENTRATIO1}
  TMT_GRADIENTRATIO2      = 2407; 
  {$EXTERNALSYM TMT_GRADIENTRATIO2}
  TMT_GRADIENTRATIO3      = 2408; 
  {$EXTERNALSYM TMT_GRADIENTRATIO3}
  TMT_GRADIENTRATIO4      = 2409; 
  {$EXTERNALSYM TMT_GRADIENTRATIO4}
  TMT_GRADIENTRATIO5      = 2410; 
  {$EXTERNALSYM TMT_GRADIENTRATIO5}
  TMT_PROGRESSCHUNKSIZE   = 2411; 
  {$EXTERNALSYM TMT_PROGRESSCHUNKSIZE}
  TMT_PROGRESSSPACESIZE   = 2412; 
  {$EXTERNALSYM TMT_PROGRESSSPACESIZE}
  TMT_SATURATION  = 2413; 
  {$EXTERNALSYM TMT_SATURATION}
  TMT_TEXTBORDERSIZE      = 2414; 
  {$EXTERNALSYM TMT_TEXTBORDERSIZE}
  TMT_ALPHATHRESHOLD      = 2415; 
  {$EXTERNALSYM TMT_ALPHATHRESHOLD}
  TMT_WIDTH       = 2416; 
  {$EXTERNALSYM TMT_WIDTH}
  TMT_HEIGHT      = 2417; 
  {$EXTERNALSYM TMT_HEIGHT}
  TMT_GLYPHINDEX  = 2418; 
  {$EXTERNALSYM TMT_GLYPHINDEX}
  TMT_TRUESIZESTRETCHMARK = 2419; 
  {$EXTERNALSYM TMT_TRUESIZESTRETCHMARK}
  TMT_MINDPI1     = 2420; 
  {$EXTERNALSYM TMT_MINDPI1}
  TMT_MINDPI2     = 2421; 
  {$EXTERNALSYM TMT_MINDPI2}
  TMT_MINDPI3     = 2422; 
  {$EXTERNALSYM TMT_MINDPI3}
  TMT_MINDPI4     = 2423; 
  {$EXTERNALSYM TMT_MINDPI4}
  TMT_MINDPI5     = 2424; 
  {$EXTERNALSYM TMT_MINDPI5}
  TMT_TEXTGLOWSIZE        = 2425; 
  {$EXTERNALSYM TMT_TEXTGLOWSIZE}
  TMT_FRAMESPERSECOND     = 2426; 
  {$EXTERNALSYM TMT_FRAMESPERSECOND}
  TMT_PIXELSPERFRAME      = 2427; 
  {$EXTERNALSYM TMT_PIXELSPERFRAME}
  TMT_ANIMATIONDELAY      = 2428; 
  {$EXTERNALSYM TMT_ANIMATIONDELAY}
  TMT_GLOWINTENSITY       = 2429; 
  {$EXTERNALSYM TMT_GLOWINTENSITY}
  TMT_OPACITY     = 2430; 
  {$EXTERNALSYM TMT_OPACITY}
  TMT_COLORIZATIONCOLOR   = 2431; 
  {$EXTERNALSYM TMT_COLORIZATIONCOLOR}
  TMT_COLORIZATIONOPACITY = 2432; 
  {$EXTERNALSYM TMT_COLORIZATIONOPACITY}
  TMT_GLYPHFONT   = 2601; 
  {$EXTERNALSYM TMT_GLYPHFONT}
  TMT_IMAGEFILE   = 3001; 
  {$EXTERNALSYM TMT_IMAGEFILE}
  TMT_IMAGEFILE1  = 3002; 
  {$EXTERNALSYM TMT_IMAGEFILE1}
  TMT_IMAGEFILE2  = 3003; 
  {$EXTERNALSYM TMT_IMAGEFILE2}
  TMT_IMAGEFILE3  = 3004; 
  {$EXTERNALSYM TMT_IMAGEFILE3}
  TMT_IMAGEFILE4  = 3005; 
  {$EXTERNALSYM TMT_IMAGEFILE4}
  TMT_IMAGEFILE5  = 3006; 
  {$EXTERNALSYM TMT_IMAGEFILE5}
  TMT_GLYPHIMAGEFILE      = 3008; 
  {$EXTERNALSYM TMT_GLYPHIMAGEFILE}
  TMT_TEXT        = 3201; 
  {$EXTERNALSYM TMT_TEXT}
  TMT_CLASSICVALUE        = 3202; 
  {$EXTERNALSYM TMT_CLASSICVALUE}
  TMT_OFFSET      = 3401; 
  {$EXTERNALSYM TMT_OFFSET}
  TMT_TEXTSHADOWOFFSET    = 3402; 
  {$EXTERNALSYM TMT_TEXTSHADOWOFFSET}
  TMT_MINSIZE     = 3403; 
  {$EXTERNALSYM TMT_MINSIZE}
  TMT_MINSIZE1    = 3404; 
  {$EXTERNALSYM TMT_MINSIZE1}
  TMT_MINSIZE2    = 3405; 
  {$EXTERNALSYM TMT_MINSIZE2}
  TMT_MINSIZE3    = 3406; 
  {$EXTERNALSYM TMT_MINSIZE3}
  TMT_MINSIZE4    = 3407; 
  {$EXTERNALSYM TMT_MINSIZE4}
  TMT_MINSIZE5    = 3408; 
  {$EXTERNALSYM TMT_MINSIZE5}
  TMT_NORMALSIZE  = 3409; 
  {$EXTERNALSYM TMT_NORMALSIZE}
  TMT_SIZINGMARGINS       = 3601; 
  {$EXTERNALSYM TMT_SIZINGMARGINS}
  TMT_CONTENTMARGINS      = 3602; 
  {$EXTERNALSYM TMT_CONTENTMARGINS}
  TMT_CAPTIONMARGINS      = 3603; 
  {$EXTERNALSYM TMT_CAPTIONMARGINS}
  TMT_BORDERCOLOR = 3801; 
  {$EXTERNALSYM TMT_BORDERCOLOR}
  TMT_FILLCOLOR   = 3802; 
  {$EXTERNALSYM TMT_FILLCOLOR}
  TMT_TEXTCOLOR   = 3803; 
  {$EXTERNALSYM TMT_TEXTCOLOR}
  TMT_EDGELIGHTCOLOR      = 3804; 
  {$EXTERNALSYM TMT_EDGELIGHTCOLOR}
  TMT_EDGEHIGHLIGHTCOLOR  = 3805; 
  {$EXTERNALSYM TMT_EDGEHIGHLIGHTCOLOR}
  TMT_EDGESHADOWCOLOR     = 3806; 
  {$EXTERNALSYM TMT_EDGESHADOWCOLOR}
  TMT_EDGEDKSHADOWCOLOR   = 3807; 
  {$EXTERNALSYM TMT_EDGEDKSHADOWCOLOR}
  TMT_EDGEFILLCOLOR       = 3808; 
  {$EXTERNALSYM TMT_EDGEFILLCOLOR}
  TMT_TRANSPARENTCOLOR    = 3809; 
  {$EXTERNALSYM TMT_TRANSPARENTCOLOR}
  TMT_GRADIENTCOLOR1      = 3810; 
  {$EXTERNALSYM TMT_GRADIENTCOLOR1}
  TMT_GRADIENTCOLOR2      = 3811; 
  {$EXTERNALSYM TMT_GRADIENTCOLOR2}
  TMT_GRADIENTCOLOR3      = 3812; 
  {$EXTERNALSYM TMT_GRADIENTCOLOR3}
  TMT_GRADIENTCOLOR4      = 3813; 
  {$EXTERNALSYM TMT_GRADIENTCOLOR4}
  TMT_GRADIENTCOLOR5      = 3814; 
  {$EXTERNALSYM TMT_GRADIENTCOLOR5}
  TMT_SHADOWCOLOR = 3815; 
  {$EXTERNALSYM TMT_SHADOWCOLOR}
  TMT_GLOWCOLOR   = 3816; 
  {$EXTERNALSYM TMT_GLOWCOLOR}
  TMT_TEXTBORDERCOLOR     = 3817; 
  {$EXTERNALSYM TMT_TEXTBORDERCOLOR}
  TMT_TEXTSHADOWCOLOR     = 3818; 
  {$EXTERNALSYM TMT_TEXTSHADOWCOLOR}
  TMT_GLYPHTEXTCOLOR      = 3819; 
  {$EXTERNALSYM TMT_GLYPHTEXTCOLOR}
  TMT_GLYPHTRANSPARENTCOLOR       = 3820; 
  {$EXTERNALSYM TMT_GLYPHTRANSPARENTCOLOR}
  TMT_FILLCOLORHINT       = 3821; 
  {$EXTERNALSYM TMT_FILLCOLORHINT}
  TMT_BORDERCOLORHINT     = 3822; 
  {$EXTERNALSYM TMT_BORDERCOLORHINT}
  TMT_ACCENTCOLORHINT     = 3823; 
  {$EXTERNALSYM TMT_ACCENTCOLORHINT}
  TMT_TEXTCOLORHINT       = 3824; 
  {$EXTERNALSYM TMT_TEXTCOLORHINT}
  TMT_HEADING1TEXTCOLOR   = 3825; 
  {$EXTERNALSYM TMT_HEADING1TEXTCOLOR}
  TMT_HEADING2TEXTCOLOR   = 3826; 
  {$EXTERNALSYM TMT_HEADING2TEXTCOLOR}
  TMT_BODYTEXTCOLOR       = 3827; 
  {$EXTERNALSYM TMT_BODYTEXTCOLOR}
  TMT_BGTYPE      = 4001; 
  {$EXTERNALSYM TMT_BGTYPE}
  TMT_BORDERTYPE  = 4002; 
  {$EXTERNALSYM TMT_BORDERTYPE}
  TMT_FILLTYPE    = 4003; 
  {$EXTERNALSYM TMT_FILLTYPE}
  TMT_SIZINGTYPE  = 4004; 
  {$EXTERNALSYM TMT_SIZINGTYPE}
  TMT_HALIGN      = 4005; 
  {$EXTERNALSYM TMT_HALIGN}
  TMT_CONTENTALIGNMENT    = 4006; 
  {$EXTERNALSYM TMT_CONTENTALIGNMENT}
  TMT_VALIGN      = 4007; 
  {$EXTERNALSYM TMT_VALIGN}
  TMT_OFFSETTYPE  = 4008; 
  {$EXTERNALSYM TMT_OFFSETTYPE}
  TMT_ICONEFFECT  = 4009; 
  {$EXTERNALSYM TMT_ICONEFFECT}
  TMT_TEXTSHADOWTYPE      = 4010; 
  {$EXTERNALSYM TMT_TEXTSHADOWTYPE}
  TMT_IMAGELAYOUT = 4011; 
  {$EXTERNALSYM TMT_IMAGELAYOUT}
  TMT_GLYPHTYPE   = 4012; 
  {$EXTERNALSYM TMT_GLYPHTYPE}
  TMT_IMAGESELECTTYPE     = 4013; 
  {$EXTERNALSYM TMT_IMAGESELECTTYPE}
  TMT_GLYPHFONTSIZINGTYPE = 4014; 
  {$EXTERNALSYM TMT_GLYPHFONTSIZINGTYPE}
  TMT_TRUESIZESCALINGTYPE = 4015; 
  {$EXTERNALSYM TMT_TRUESIZESCALINGTYPE}
  TMT_USERPICTURE = 5001; 
  {$EXTERNALSYM TMT_USERPICTURE}
  TMT_DEFAULTPANESIZE     = 5002; 
  {$EXTERNALSYM TMT_DEFAULTPANESIZE}
  TMT_BLENDCOLOR  = 5003; 
  {$EXTERNALSYM TMT_BLENDCOLOR}
  TMT_CUSTOMSPLITRECT     = 5004; 
  {$EXTERNALSYM TMT_CUSTOMSPLITRECT}
  TMT_ANIMATIONBUTTONRECT = 5005; 
  {$EXTERNALSYM TMT_ANIMATIONBUTTONRECT}
  TMT_ANIMATIONDURATION   = 5006; 
  {$EXTERNALSYM TMT_ANIMATIONDURATION}
  TMT_TRANSITIONDURATIONS = 6000; 
  {$EXTERNALSYM TMT_TRANSITIONDURATIONS}
  TMT_SCALEDBACKGROUND    = 7001; 
  {$EXTERNALSYM TMT_SCALEDBACKGROUND}
  TMT_ATLASIMAGE  = 8000; 
  {$EXTERNALSYM TMT_ATLASIMAGE}
  TMT_ATLASINPUTIMAGE     = 8001; 
  {$EXTERNALSYM TMT_ATLASINPUTIMAGE}
  TMT_ATLASRECT   = 8002; 
  {$EXTERNALSYM TMT_ATLASRECT}

const
  { For Windows >= Vista }
  {$EXTERNALSYM TMTVS_RESERVEDLOW}
  TMTVS_RESERVEDLOW       = 100000;
  {$EXTERNALSYM TMTVS_RESERVEDHIGH}
  TMTVS_RESERVEDHIGH      = 19999;


// 
//  WINDOWSTYLE class parts and states
// 
const
  {$EXTERNALSYM VSCLASS_WINDOWSTYLE}
  VSCLASS_WINDOWSTYLE     = 'WINDOWSTYLE';
  {$EXTERNALSYM VSCLASS_WINDOW}
  VSCLASS_WINDOW  = 'WINDOW';

type
  WINDOWPARTS = Integer;
  {$EXTERNALSYM WINDOWPARTS}
const
  WINDOWPartFiller0 = 0;
  {$EXTERNALSYM WINDOWPartFiller0}
  WP_CAPTION = 1;
  {$EXTERNALSYM WP_CAPTION}
  WP_SMALLCAPTION = 2;
  {$EXTERNALSYM WP_SMALLCAPTION}
  WP_MINCAPTION = 3;
  {$EXTERNALSYM WP_MINCAPTION}
  WP_SMALLMINCAPTION = 4;
  {$EXTERNALSYM WP_SMALLMINCAPTION}
  WP_MAXCAPTION = 5;
  {$EXTERNALSYM WP_MAXCAPTION}
  WP_SMALLMAXCAPTION = 6;
  {$EXTERNALSYM WP_SMALLMAXCAPTION}
  WP_FRAMELEFT = 7;
  {$EXTERNALSYM WP_FRAMELEFT}
  WP_FRAMERIGHT = 8;
  {$EXTERNALSYM WP_FRAMERIGHT}
  WP_FRAMEBOTTOM = 9;
  {$EXTERNALSYM WP_FRAMEBOTTOM}
  WP_SMALLFRAMELEFT = 10;
  {$EXTERNALSYM WP_SMALLFRAMELEFT}
  WP_SMALLFRAMERIGHT = 11;
  {$EXTERNALSYM WP_SMALLFRAMERIGHT}
  WP_SMALLFRAMEBOTTOM = 12;
  {$EXTERNALSYM WP_SMALLFRAMEBOTTOM}
  WP_SYSBUTTON = 13;
  {$EXTERNALSYM WP_SYSBUTTON}
  WP_MDISYSBUTTON = 14;
  {$EXTERNALSYM WP_MDISYSBUTTON}
  WP_MINBUTTON = 15;
  {$EXTERNALSYM WP_MINBUTTON}
  WP_MDIMINBUTTON = 16;
  {$EXTERNALSYM WP_MDIMINBUTTON}
  WP_MAXBUTTON = 17;
  {$EXTERNALSYM WP_MAXBUTTON}
  WP_CLOSEBUTTON = 18;
  {$EXTERNALSYM WP_CLOSEBUTTON}
  WP_SMALLCLOSEBUTTON = 19;
  {$EXTERNALSYM WP_SMALLCLOSEBUTTON}
  WP_MDICLOSEBUTTON = 20;
  {$EXTERNALSYM WP_MDICLOSEBUTTON}
  WP_RESTOREBUTTON = 21;
  {$EXTERNALSYM WP_RESTOREBUTTON}
  WP_MDIRESTOREBUTTON = 22;
  {$EXTERNALSYM WP_MDIRESTOREBUTTON}
  WP_HELPBUTTON = 23;
  {$EXTERNALSYM WP_HELPBUTTON}
  WP_MDIHELPBUTTON = 24;
  {$EXTERNALSYM WP_MDIHELPBUTTON}
  WP_HORZSCROLL = 25;
  {$EXTERNALSYM WP_HORZSCROLL}
  WP_HORZTHUMB = 26;
  {$EXTERNALSYM WP_HORZTHUMB}
  WP_VERTSCROLL = 27;
  {$EXTERNALSYM WP_VERTSCROLL}
  WP_VERTTHUMB = 28;
  {$EXTERNALSYM WP_VERTTHUMB}
  WP_DIALOG = 29;
  {$EXTERNALSYM WP_DIALOG}
  WP_CAPTIONSIZINGTEMPLATE = 30;
  {$EXTERNALSYM WP_CAPTIONSIZINGTEMPLATE}
  WP_SMALLCAPTIONSIZINGTEMPLATE = 31;
  {$EXTERNALSYM WP_SMALLCAPTIONSIZINGTEMPLATE}
  WP_FRAMELEFTSIZINGTEMPLATE = 32;
  {$EXTERNALSYM WP_FRAMELEFTSIZINGTEMPLATE}
  WP_SMALLFRAMELEFTSIZINGTEMPLATE = 33;
  {$EXTERNALSYM WP_SMALLFRAMELEFTSIZINGTEMPLATE}
  WP_FRAMERIGHTSIZINGTEMPLATE = 34;
  {$EXTERNALSYM WP_FRAMERIGHTSIZINGTEMPLATE}
  WP_SMALLFRAMERIGHTSIZINGTEMPLATE = 35;
  {$EXTERNALSYM WP_SMALLFRAMERIGHTSIZINGTEMPLATE}
  WP_FRAMEBOTTOMSIZINGTEMPLATE = 36;
  {$EXTERNALSYM WP_FRAMEBOTTOMSIZINGTEMPLATE}
  WP_SMALLFRAMEBOTTOMSIZINGTEMPLATE = 37;
  {$EXTERNALSYM WP_SMALLFRAMEBOTTOMSIZINGTEMPLATE}
  { For Windows >= Vista }
  WP_FRAME     = 38;
  {$EXTERNALSYM WP_FRAME}

type
  FRAMESTATES = Integer;
  {$EXTERNALSYM FRAMESTATES}
const
  FRAMEStateFiller0 = 0;
  {$EXTERNALSYM FRAMEStateFiller0}
  FS_ACTIVE = 1;
  {$EXTERNALSYM FS_ACTIVE}
  FS_INACTIVE = 2;
  {$EXTERNALSYM FS_INACTIVE}

type
  CAPTIONSTATES = Integer;
  {$EXTERNALSYM CAPTIONSTATES}
const
  CAPTIONStateFiller0 = 0;
  {$EXTERNALSYM CAPTIONStateFiller0}
  CS_ACTIVE = 1;
  {$EXTERNALSYM CS_ACTIVE}
  CS_INACTIVE = 2;
  {$EXTERNALSYM CS_INACTIVE}
  CS_DISABLED = 3;
  {$EXTERNALSYM CS_DISABLED}

type
  MAXCAPTIONSTATES = Integer;
  {$EXTERNALSYM MAXCAPTIONSTATES}
const
  MAXCAPTIONStateFiller0 = 0;
  {$EXTERNALSYM MAXCAPTIONStateFiller0}
  MXCS_ACTIVE = 1;
  {$EXTERNALSYM MXCS_ACTIVE}
  MXCS_INACTIVE = 2;
  {$EXTERNALSYM MXCS_INACTIVE}
  MXCS_DISABLED = 3;
  {$EXTERNALSYM MXCS_DISABLED}

type
  MINCAPTIONSTATES = Integer;
  {$EXTERNALSYM MINCAPTIONSTATES}
const
  MINCAPTIONStateFiller0 = 0;
  {$EXTERNALSYM MINCAPTIONStateFiller0}
  MNCS_ACTIVE = 1;
  {$EXTERNALSYM MNCS_ACTIVE}
  MNCS_INACTIVE = 2;
  {$EXTERNALSYM MNCS_INACTIVE}
  MNCS_DISABLED = 3;
  {$EXTERNALSYM MNCS_DISABLED}

type
  HORZSCROLLSTATES = Integer;
  {$EXTERNALSYM HORZSCROLLSTATES}
const
  HORZSCROLLStateFiller0 = 0;
  {$EXTERNALSYM HORZSCROLLStateFiller0}
  HSS_NORMAL = 1;
  {$EXTERNALSYM HSS_NORMAL}
  HSS_HOT = 2;
  {$EXTERNALSYM HSS_HOT}
  HSS_PUSHED = 3;
  {$EXTERNALSYM HSS_PUSHED}
  HSS_DISABLED = 4;
  {$EXTERNALSYM HSS_DISABLED}

type
  HORZTHUMBSTATES = Integer;
  {$EXTERNALSYM HORZTHUMBSTATES}
const
  HORZTHUMBStateFiller0 = 0;
  {$EXTERNALSYM HORZTHUMBStateFiller0}
  HTS_NORMAL = 1;
  {$EXTERNALSYM HTS_NORMAL}
  HTS_HOT = 2;
  {$EXTERNALSYM HTS_HOT}
  HTS_PUSHED = 3;
  {$EXTERNALSYM HTS_PUSHED}
  HTS_DISABLED = 4;
  {$EXTERNALSYM HTS_DISABLED}

type
  VERTSCROLLSTATES = Integer;
  {$EXTERNALSYM VERTSCROLLSTATES}
const
  VERTSCROLLStateFiller0 = 0;
  {$EXTERNALSYM VERTSCROLLStateFiller0}
  VSS_NORMAL = 1;
  {$EXTERNALSYM VSS_NORMAL}
  VSS_HOT = 2;
  {$EXTERNALSYM VSS_HOT}
  VSS_PUSHED = 3;
  {$EXTERNALSYM VSS_PUSHED}
  VSS_DISABLED = 4;
  {$EXTERNALSYM VSS_DISABLED}

type
  VERTTHUMBSTATES = Integer;
  {$EXTERNALSYM VERTTHUMBSTATES}
const
  VERTTHUMBStateFiller0 = 0;
  {$EXTERNALSYM VERTTHUMBStateFiller0}
  VTS_NORMAL = 1;
  {$EXTERNALSYM VTS_NORMAL}
  VTS_HOT = 2;
  {$EXTERNALSYM VTS_HOT}
  VTS_PUSHED = 3;
  {$EXTERNALSYM VTS_PUSHED}
  VTS_DISABLED = 4;
  {$EXTERNALSYM VTS_DISABLED}

type
  SYSBUTTONSTATES = Integer;
  {$EXTERNALSYM SYSBUTTONSTATES}
const
  SYSBUTTONStateFiller0 = 0;
  {$EXTERNALSYM SYSBUTTONStateFiller0}
  SBS_NORMAL = 1;
  {$EXTERNALSYM SBS_NORMAL}
  SBS_HOT = 2;
  {$EXTERNALSYM SBS_HOT}
  SBS_PUSHED = 3;
  {$EXTERNALSYM SBS_PUSHED}
  SBS_DISABLED = 4;
  {$EXTERNALSYM SBS_DISABLED}

type
  MINBUTTONSTATES = Integer;
  {$EXTERNALSYM MINBUTTONSTATES}
const
  MINBUTTONStateFiller0 = 0;
  {$EXTERNALSYM MINBUTTONStateFiller0}
  MINBS_NORMAL = 1;
  {$EXTERNALSYM MINBS_NORMAL}
  MINBS_HOT = 2;
  {$EXTERNALSYM MINBS_HOT}
  MINBS_PUSHED = 3;
  {$EXTERNALSYM MINBS_PUSHED}
  MINBS_DISABLED = 4;
  {$EXTERNALSYM MINBS_DISABLED}

type
  MAXBUTTONSTATES = Integer;
  {$EXTERNALSYM MAXBUTTONSTATES}
const
  MAXBUTTONStateFiller0 = 0;
  {$EXTERNALSYM MAXBUTTONStateFiller0}
  MAXBS_NORMAL = 1;
  {$EXTERNALSYM MAXBS_NORMAL}
  MAXBS_HOT = 2;
  {$EXTERNALSYM MAXBS_HOT}
  MAXBS_PUSHED = 3;
  {$EXTERNALSYM MAXBS_PUSHED}
  MAXBS_DISABLED = 4;
  {$EXTERNALSYM MAXBS_DISABLED}

type
  RESTOREBUTTONSTATES = Integer;
  {$EXTERNALSYM RESTOREBUTTONSTATES}
const
  RESTOREBUTTONStateFiller0 = 0;
  {$EXTERNALSYM RESTOREBUTTONStateFiller0}
  RBS_NORMAL = 1;
  {$EXTERNALSYM RBS_NORMAL}
  RBS_HOT = 2;
  {$EXTERNALSYM RBS_HOT}
  RBS_PUSHED = 3;
  {$EXTERNALSYM RBS_PUSHED}
  RBS_DISABLED = 4;
  {$EXTERNALSYM RBS_DISABLED}

type
  HELPBUTTONSTATES = Integer;
  {$EXTERNALSYM HELPBUTTONSTATES}
const
  HELPBUTTONStateFiller0 = 0;
  {$EXTERNALSYM HELPBUTTONStateFiller0}
  HBS_NORMAL = 1;
  {$EXTERNALSYM HBS_NORMAL}
  HBS_HOT = 2;
  {$EXTERNALSYM HBS_HOT}
  HBS_PUSHED = 3;
  {$EXTERNALSYM HBS_PUSHED}
  HBS_DISABLED = 4;
  {$EXTERNALSYM HBS_DISABLED}

type
  CLOSEBUTTONSTATES = Integer;
  {$EXTERNALSYM CLOSEBUTTONSTATES}
const
  CLOSEBUTTONStateFiller0 = 0;
  {$EXTERNALSYM CLOSEBUTTONStateFiller0}
  CBS_NORMAL = 1;
  {$EXTERNALSYM CBS_NORMAL}
  CBS_HOT = 2;
  {$EXTERNALSYM CBS_HOT}
  CBS_PUSHED = 3;
  {$EXTERNALSYM CBS_PUSHED}
  CBS_DISABLED = 4;
  {$EXTERNALSYM CBS_DISABLED}

  
//
//  BUTTONSTYLE class parts and states
//
const
  VSCLASS_BUTTONSTYLE     = 'BUTTONSTYLE';
  {$EXTERNALSYM VSCLASS_BUTTONSTYLE}
  VSCLASS_BUTTON  = 'BUTTON';
  {$EXTERNALSYM VSCLASS_BUTTON}

type
  BUTTONPARTS = Integer;
  {$EXTERNALSYM BUTTONPARTS}
const
  BUTTONPartFiller0 = 0;
  {$EXTERNALSYM BUTTONPartFiller0}
  BP_PUSHBUTTON = 1;
  {$EXTERNALSYM BP_PUSHBUTTON}
  BP_RADIOBUTTON = 2;
  {$EXTERNALSYM BP_RADIOBUTTON}
  BP_CHECKBOX = 3;
  {$EXTERNALSYM BP_CHECKBOX}
  BP_GROUPBOX = 4;
  {$EXTERNALSYM BP_GROUPBOX}
  BP_USERBUTTON = 5;
  {$EXTERNALSYM BP_USERBUTTON}
  { For Windows >= Vista }
  BP_COMMANDLINK = 6;
  {$EXTERNALSYM BP_COMMANDLINK}
  BP_COMMANDLINKGLYPH = 7;
  {$EXTERNALSYM BP_COMMANDLINKGLYPH}

type
  PUSHBUTTONSTATES = Integer;
  {$EXTERNALSYM PUSHBUTTONSTATES}
const
  PUSHBUTTONStateFiller0 = 0;
  {$EXTERNALSYM PUSHBUTTONStateFiller0}
  PBS_NORMAL = 1;
  {$EXTERNALSYM PBS_NORMAL}
  PBS_HOT = 2;
  {$EXTERNALSYM PBS_HOT}
  PBS_PRESSED = 3;
  {$EXTERNALSYM PBS_PRESSED}
  PBS_DISABLED = 4;
  {$EXTERNALSYM PBS_DISABLED}
  PBS_DEFAULTED = 5;
  {$EXTERNALSYM PBS_DEFAULTED}
  { For Windows >= Vista }
  PBS_DEFAULTED_ANIMATING     = 6;
  {$EXTERNALSYM PBS_DEFAULTED_ANIMATING}

type
  RADIOBUTTONSTATES = Integer;
  {$EXTERNALSYM RADIOBUTTONSTATES}
const
  RADIOBUTTONStateFiller0 = 0;
  {$EXTERNALSYM RADIOBUTTONStateFiller0}
  RBS_UNCHECKEDNORMAL = 1;
  {$EXTERNALSYM RBS_UNCHECKEDNORMAL}
  RBS_UNCHECKEDHOT = 2;
  {$EXTERNALSYM RBS_UNCHECKEDHOT}
  RBS_UNCHECKEDPRESSED = 3;
  {$EXTERNALSYM RBS_UNCHECKEDPRESSED}
  RBS_UNCHECKEDDISABLED = 4;
  {$EXTERNALSYM RBS_UNCHECKEDDISABLED}
  RBS_CHECKEDNORMAL = 5;
  {$EXTERNALSYM RBS_CHECKEDNORMAL}
  RBS_CHECKEDHOT = 6;
  {$EXTERNALSYM RBS_CHECKEDHOT}
  RBS_CHECKEDPRESSED = 7;
  {$EXTERNALSYM RBS_CHECKEDPRESSED}
  RBS_CHECKEDDISABLED = 8;
  {$EXTERNALSYM RBS_CHECKEDDISABLED}

type
  CHECKBOXSTATES = Integer;
  {$EXTERNALSYM CHECKBOXSTATES}
const
  CHECKBOXStateFiller0 = 0;
  {$EXTERNALSYM CHECKBOXStateFiller0}
  CBS_UNCHECKEDNORMAL = 1;
  {$EXTERNALSYM CBS_UNCHECKEDNORMAL}
  CBS_UNCHECKEDHOT = 2;
  {$EXTERNALSYM CBS_UNCHECKEDHOT}
  CBS_UNCHECKEDPRESSED = 3;
  {$EXTERNALSYM CBS_UNCHECKEDPRESSED}
  CBS_UNCHECKEDDISABLED = 4;
  {$EXTERNALSYM CBS_UNCHECKEDDISABLED}
  CBS_CHECKEDNORMAL = 5;
  {$EXTERNALSYM CBS_CHECKEDNORMAL}
  CBS_CHECKEDHOT = 6;
  {$EXTERNALSYM CBS_CHECKEDHOT}
  CBS_CHECKEDPRESSED = 7;
  {$EXTERNALSYM CBS_CHECKEDPRESSED}
  CBS_CHECKEDDISABLED = 8;
  {$EXTERNALSYM CBS_CHECKEDDISABLED}
  CBS_MIXEDNORMAL = 9;
  {$EXTERNALSYM CBS_MIXEDNORMAL}
  CBS_MIXEDHOT = 10;
  {$EXTERNALSYM CBS_MIXEDHOT}
  CBS_MIXEDPRESSED = 11;
  {$EXTERNALSYM CBS_MIXEDPRESSED}
  CBS_MIXEDDISABLED = 12;
  {$EXTERNALSYM CBS_MIXEDDISABLED}
  { For Windows >= Vista }
  CBS_IMPLICITNORMAL     = 13;
  {$EXTERNALSYM CBS_IMPLICITNORMAL}
  CBS_IMPLICITHOT     = 14;
  {$EXTERNALSYM CBS_IMPLICITHOT}
  CBS_IMPLICITPRESSED     = 15;
  {$EXTERNALSYM CBS_IMPLICITPRESSED}
  CBS_IMPLICITDISABLED     = 16;
  {$EXTERNALSYM CBS_IMPLICITDISABLED}
  CBS_EXCLUDEDNORMAL     = 17;
  {$EXTERNALSYM CBS_EXCLUDEDNORMAL}
  CBS_EXCLUDEDHOT     = 18;
  {$EXTERNALSYM CBS_EXCLUDEDHOT}
  CBS_EXCLUDEDPRESSED     = 19;
  {$EXTERNALSYM CBS_EXCLUDEDPRESSED}
  CBS_EXCLUDEDDISABLED     = 20;
  {$EXTERNALSYM CBS_EXCLUDEDDISABLED}

type
  GROUPBOXSTATES = Integer;
  {$EXTERNALSYM GROUPBOXSTATES}
const
  GROUPBOXStateFiller0 = 0;
  {$EXTERNALSYM GROUPBOXStateFiller0}
  GBS_NORMAL = 1;
  {$EXTERNALSYM GBS_NORMAL}
  GBS_DISABLED = 2;
  {$EXTERNALSYM GBS_DISABLED}

type
  { For Windows >= Vista }
  {$EXTERNALSYM COMMANDLINKSTATES}
  COMMANDLINKSTATES = Integer;
const
  {$EXTERNALSYM CMDLS_NORMAL}
  CMDLS_NORMAL     = 1;
  {$EXTERNALSYM CMDLS_HOT}
  CMDLS_HOT     = 2;
  {$EXTERNALSYM CMDLS_PRESSED}
  CMDLS_PRESSED     = 3;
  {$EXTERNALSYM CMDLS_DISABLED}
  CMDLS_DISABLED     = 4;
  {$EXTERNALSYM CMDLS_DEFAULTED}
  CMDLS_DEFAULTED     = 5;
  {$EXTERNALSYM CMDLS_DEFAULTED_ANIMATING}
  CMDLS_DEFAULTED_ANIMATING     = 6;

type
  { For Windows >= Vista }
  {$EXTERNALSYM COMMANDLINKGLYPHSTATES}
  COMMANDLINKGLYPHSTATES = Integer;
const
  {$EXTERNALSYM CMDLGS_NORMAL}
  CMDLGS_NORMAL     = 1;
  {$EXTERNALSYM CMDLGS_HOT}
  CMDLGS_HOT     = 2;
  {$EXTERNALSYM CMDLGS_PRESSED}
  CMDLGS_PRESSED     = 3;
  {$EXTERNALSYM CMDLGS_DISABLED}
  CMDLGS_DISABLED     = 4;
  {$EXTERNALSYM CMDLGS_DEFAULTED}
  CMDLGS_DEFAULTED     = 5;


//
//  REBARSTYLE class parts and states
//
const
  {$EXTERNALSYM VSCLASS_REBARSTYLE}
  VSCLASS_REBARSTYLE      = 'REBARSTYLE';
  {$EXTERNALSYM VSCLASS_REBAR}
  VSCLASS_REBAR   = 'REBAR';

type
  REBARPARTS = Integer;
  {$EXTERNALSYM REBARPARTS}
const
  REBARPartFiller0 = 0;
  {$EXTERNALSYM REBARPartFiller0}
  RP_GRIPPER = 1;
  {$EXTERNALSYM RP_GRIPPER}
  RP_GRIPPERVERT = 2;
  {$EXTERNALSYM RP_GRIPPERVERT}
  RP_BAND = 3;
  {$EXTERNALSYM RP_BAND}
  RP_CHEVRON = 4;
  {$EXTERNALSYM RP_CHEVRON}
  RP_CHEVRONVERT = 5;
  {$EXTERNALSYM RP_CHEVRONVERT}
  { For Windows >= Vista }
  RP_BACKGROUND     = 6;
  {$EXTERNALSYM RP_BACKGROUND}
  RP_SPLITTER     = 7;
  {$EXTERNALSYM RP_SPLITTER}
  RP_SPLITTERVERT     = 8;
  {$EXTERNALSYM RP_SPLITTERVERT}

type
  CHEVRONSTATES = Integer;
  {$EXTERNALSYM CHEVRONSTATES}
const
  CHEVRONStateFiller0 = 0;
  {$EXTERNALSYM CHEVRONStateFiller0}
  CHEVS_NORMAL = 1;
  {$EXTERNALSYM CHEVS_NORMAL}
  CHEVS_HOT = 2;
  {$EXTERNALSYM CHEVS_HOT}
  CHEVS_PRESSED = 3;
  {$EXTERNALSYM CHEVS_PRESSED}

type
  { For Windows >= Vista }
  {$EXTERNALSYM CHEVRONVERTSTATES}
  CHEVRONVERTSTATES = Integer;
const
  {$EXTERNALSYM CHEVSV_NORMAL}
  CHEVSV_NORMAL     = 1;
  {$EXTERNALSYM CHEVSV_HOT}
  CHEVSV_HOT     = 2;
  {$EXTERNALSYM CHEVSV_PRESSED}
  CHEVSV_PRESSED     = 3;

type
  { For Windows >= Vista }
  {$EXTERNALSYM SPLITTERSTATES}
  SPLITTERSTATES = Integer;
const
  {$EXTERNALSYM SPLITS_NORMAL}
  SPLITS_NORMAL     = 1;
  {$EXTERNALSYM SPLITS_HOT}
  SPLITS_HOT     = 2;
  {$EXTERNALSYM SPLITS_PRESSED}
  SPLITS_PRESSED     = 3;

type
  { For Windows >= Vista }
  {$EXTERNALSYM SPLITTERVERTSTATES}
  SPLITTERVERTSTATES = Integer;
const
  {$EXTERNALSYM SPLITSV_NORMAL}
  SPLITSV_NORMAL     = 1;
  {$EXTERNALSYM SPLITSV_HOT}
  SPLITSV_HOT     = 2;
  {$EXTERNALSYM SPLITSV_PRESSED}
  SPLITSV_PRESSED     = 3;

  
//
//  TOOLBARSTYLE class parts and states
// 
const
  {$EXTERNALSYM VSCLASS_TOOLBARSTYLE}
  VSCLASS_TOOLBARSTYLE    = 'TOOLBARSTYLE';
  {$EXTERNALSYM VSCLASS_TOOLBAR}
  VSCLASS_TOOLBAR = 'TOOLBAR';

type
  TOOLBARPARTS = Integer;
  {$EXTERNALSYM TOOLBARPARTS}
const
  TOOLBARPartFiller0 = 0;
  {$EXTERNALSYM TOOLBARPartFiller0}
  TP_BUTTON = 1;
  {$EXTERNALSYM TP_BUTTON}
  TP_DROPDOWNBUTTON = 2;
  {$EXTERNALSYM TP_DROPDOWNBUTTON}
  TP_SPLITBUTTON = 3;
  {$EXTERNALSYM TP_SPLITBUTTON}
  TP_SPLITBUTTONDROPDOWN = 4;
  {$EXTERNALSYM TP_SPLITBUTTONDROPDOWN}
  TP_SEPARATOR = 5;
  {$EXTERNALSYM TP_SEPARATOR}
  TP_SEPARATORVERT = 6;
  {$EXTERNALSYM TP_SEPARATORVERT}
  { For Windows >= Windows 7 }
	TP_DROPDOWNBUTTONGLYPH = 7;
  {$EXTERNALSYM TP_DROPDOWNBUTTONGLYPH}

type
  TOOLBARSTATES = Integer;
  {$EXTERNALSYM TOOLBARSTATES}
const
  TOOLBARStateFiller0 = 0;
  {$EXTERNALSYM TOOLBARStateFiller0}
  TS_NORMAL = 1;
  {$EXTERNALSYM TS_NORMAL}
  TS_HOT = 2;
  {$EXTERNALSYM TS_HOT}
  TS_PRESSED = 3;
  {$EXTERNALSYM TS_PRESSED}
  TS_DISABLED = 4;
  {$EXTERNALSYM TS_DISABLED}
  TS_CHECKED = 5;
  {$EXTERNALSYM TS_CHECKED}
  TS_HOTCHECKED = 6;
  {$EXTERNALSYM TS_HOTCHECKED}
  { For Windows >= Vista }
  TS_NEARHOT     = 7;
  {$EXTERNALSYM TS_NEARHOT}
  TS_OTHERSIDEHOT     = 8;
  {$EXTERNALSYM TS_OTHERSIDEHOT}

  
//
//  STATUSSTYLE class parts and states
// 
const
  {$EXTERNALSYM VSCLASS_STATUSSTYLE}
  VSCLASS_STATUSSTYLE     = 'STATUSSTYLE';
  {$EXTERNALSYM VSCLASS_STATUS}
  VSCLASS_STATUS  = 'STATUS';

type
  STATUSPARTS = Integer;
  {$EXTERNALSYM STATUSPARTS}
const
  STATUSPartFiller0 = 0;
  {$EXTERNALSYM STATUSPartFiller0}
  SP_PANE = 1;
  {$EXTERNALSYM SP_PANE}
  SP_GRIPPERPANE = 2;
  {$EXTERNALSYM SP_GRIPPERPANE}
  SP_GRIPPER = 3;
  {$EXTERNALSYM SP_GRIPPER}

  
//
//  MENUSTYLE class parts and states
//
const
  {$EXTERNALSYM VSCLASS_MENUSTYLE}
  VSCLASS_MENUSTYLE       = 'MENUSTYLE';
  {$EXTERNALSYM VSCLASS_MENU}
  VSCLASS_MENU    = 'MENU';

type
  MENUPARTS = Integer;
  {$EXTERNALSYM MENUPARTS}
const
  MENUPartFiller0 = 0;
  {$EXTERNALSYM MENUPartFiller0}
  MP_MENUITEM = 1;
  {$EXTERNALSYM MP_MENUITEM}
  MP_MENUDROPDOWN = 2;
  {$EXTERNALSYM MP_MENUDROPDOWN}
  MP_MENUBARITEM = 3;
  {$EXTERNALSYM MP_MENUBARITEM}
  MP_MENUBARDROPDOWN = 4;
  {$EXTERNALSYM MP_MENUBARDROPDOWN}
  MP_CHEVRON = 5;
  {$EXTERNALSYM MP_CHEVRON}
  MP_SEPARATOR = 6;
  {$EXTERNALSYM MP_SEPARATOR}

  { For Windows >= Vista }
  {$EXTERNALSYM MENU_MENUITEM_TMSCHEMA}
  MENU_MENUITEM_TMSCHEMA     = 1; 
  {$EXTERNALSYM MENU_MENUDROPDOWN_TMSCHEMA}
  MENU_MENUDROPDOWN_TMSCHEMA     = 2; 
  {$EXTERNALSYM MENU_MENUBARITEM_TMSCHEMA}
  MENU_MENUBARITEM_TMSCHEMA     = 3; 
  {$EXTERNALSYM MENU_MENUBARDROPDOWN_TMSCHEMA}
  MENU_MENUBARDROPDOWN_TMSCHEMA     = 4; 
  {$EXTERNALSYM MENU_CHEVRON_TMSCHEMA}
  MENU_CHEVRON_TMSCHEMA     = 5; 
  {$EXTERNALSYM MENU_SEPARATOR_TMSCHEMA}
  MENU_SEPARATOR_TMSCHEMA     = 6; 
  {$EXTERNALSYM MENU_BARBACKGROUND}
  MENU_BARBACKGROUND     = 7; 
  {$EXTERNALSYM MENU_BARITEM}
  MENU_BARITEM     = 8; 
  {$EXTERNALSYM MENU_POPUPBACKGROUND}
  MENU_POPUPBACKGROUND     = 9; 
  {$EXTERNALSYM MENU_POPUPBORDERS}
  MENU_POPUPBORDERS     = 10; 
  {$EXTERNALSYM MENU_POPUPCHECK}
  MENU_POPUPCHECK     = 11; 
  {$EXTERNALSYM MENU_POPUPCHECKBACKGROUND}
  MENU_POPUPCHECKBACKGROUND     = 12; 
  {$EXTERNALSYM MENU_POPUPGUTTER}
  MENU_POPUPGUTTER     = 13; 
  {$EXTERNALSYM MENU_POPUPITEM}
  MENU_POPUPITEM     = 14; 
  {$EXTERNALSYM MENU_POPUPSEPARATOR}
  MENU_POPUPSEPARATOR     = 15; 
  {$EXTERNALSYM MENU_POPUPSUBMENU}
  MENU_POPUPSUBMENU     = 16; 
  {$EXTERNALSYM MENU_SYSTEMCLOSE}
  MENU_SYSTEMCLOSE     = 17; 
  {$EXTERNALSYM MENU_SYSTEMMAXIMIZE}
  MENU_SYSTEMMAXIMIZE     = 18; 
  {$EXTERNALSYM MENU_SYSTEMMINIMIZE}
  MENU_SYSTEMMINIMIZE     = 19; 
  {$EXTERNALSYM MENU_SYSTEMRESTORE}
  MENU_SYSTEMRESTORE     = 20; 

type
  MENUSTATES = Integer;
  {$EXTERNALSYM MENUSTATES}
const
  MENUStateFiller0 = 0;
  {$EXTERNALSYM MENUStateFiller0}
  MS_NORMAL = 1;
  {$EXTERNALSYM MS_NORMAL}
  MS_SELECTED = 2;
  {$EXTERNALSYM MS_SELECTED}
  MS_DEMOTED = 3;
  {$EXTERNALSYM MS_DEMOTED}

type
  { For Windows >= Vista }
  {$EXTERNALSYM BARBACKGROUNDSTATES}
  BARBACKGROUNDSTATES = Integer;
const
  {$EXTERNALSYM MB_ACTIVE}
  MB_ACTIVE     = 1;
  {$EXTERNALSYM MB_INACTIVE}
  MB_INACTIVE     = 2;

type
  { For Windows >= Vista }
  {$EXTERNALSYM BARITEMSTATES}
  BARITEMSTATES = Integer;
const
  {$EXTERNALSYM MBI_NORMAL}
  MBI_NORMAL     = 1;
  {$EXTERNALSYM MBI_HOT}
  MBI_HOT     = 2;
  {$EXTERNALSYM MBI_PUSHED}
  MBI_PUSHED     = 3;
  {$EXTERNALSYM MBI_DISABLED}
  MBI_DISABLED     = 4;
  {$EXTERNALSYM MBI_DISABLEDHOT}
  MBI_DISABLEDHOT     = 5;
  {$EXTERNALSYM MBI_DISABLEDPUSHED}
  MBI_DISABLEDPUSHED     = 6;

type
  { For Windows >= Vista }
  {$EXTERNALSYM POPUPCHECKSTATES}
  POPUPCHECKSTATES = Integer;
const
  {$EXTERNALSYM MC_CHECKMARKNORMAL}
  MC_CHECKMARKNORMAL     = 1;
  {$EXTERNALSYM MC_CHECKMARKDISABLED}
  MC_CHECKMARKDISABLED     = 2;
  {$EXTERNALSYM MC_BULLETNORMAL}
  MC_BULLETNORMAL     = 3;
  {$EXTERNALSYM MC_BULLETDISABLED}
  MC_BULLETDISABLED     = 4;

type
  { For Windows >= Vista }
  {$EXTERNALSYM POPUPCHECKBACKGROUNDSTATES}
  POPUPCHECKBACKGROUNDSTATES = Integer;
const
  {$EXTERNALSYM MCB_DISABLED}
  MCB_DISABLED     = 1;
  {$EXTERNALSYM MCB_NORMAL}
  MCB_NORMAL     = 2;
  {$EXTERNALSYM MCB_BITMAP}
  MCB_BITMAP     = 3;

type
  { For Windows >= Vista }
  {$EXTERNALSYM POPUPITEMSTATES}
  POPUPITEMSTATES = Integer;
const
  {$EXTERNALSYM MPI_NORMAL}
  MPI_NORMAL     = 1;
  {$EXTERNALSYM MPI_HOT}
  MPI_HOT     = 2;
  {$EXTERNALSYM MPI_DISABLED}
  MPI_DISABLED     = 3;
  {$EXTERNALSYM MPI_DISABLEDHOT}
  MPI_DISABLEDHOT     = 4;

type
  { For Windows >= Vista }
  {$EXTERNALSYM POPUPSUBMENUSTATES}
  POPUPSUBMENUSTATES = Integer;
const
  {$EXTERNALSYM MSM_NORMAL}
  MSM_NORMAL     = 1;
  {$EXTERNALSYM MSM_DISABLED}
  MSM_DISABLED     = 2;

type
  { For Windows >= Vista }
  {$EXTERNALSYM SYSTEMCLOSESTATES}
  SYSTEMCLOSESTATES = Integer;
const
  {$EXTERNALSYM MSYSC_NORMAL}
  MSYSC_NORMAL     = 1;
  {$EXTERNALSYM MSYSC_DISABLED}
  MSYSC_DISABLED     = 2;

type
  { For Windows >= Vista }
  {$EXTERNALSYM SYSTEMMAXIMIZESTATES}
  SYSTEMMAXIMIZESTATES = Integer;
const
  {$EXTERNALSYM MSYSMX_NORMAL}
  MSYSMX_NORMAL     = 1;
  {$EXTERNALSYM MSYSMX_DISABLED}
  MSYSMX_DISABLED     = 2;

type
  { For Windows >= Vista }
  {$EXTERNALSYM SYSTEMMINIMIZESTATES}
  SYSTEMMINIMIZESTATES = Integer;
const
  {$EXTERNALSYM MSYSMN_NORMAL}
  MSYSMN_NORMAL     = 1;
  {$EXTERNALSYM MSYSMN_DISABLED}
  MSYSMN_DISABLED     = 2;

type
  { For Windows >= Vista }
  {$EXTERNALSYM SYSTEMRESTORESTATES}
  SYSTEMRESTORESTATES = Integer;
const
  {$EXTERNALSYM MSYSR_NORMAL}
  MSYSR_NORMAL     = 1;
  {$EXTERNALSYM MSYSR_DISABLED}
  MSYSR_DISABLED     = 2;
  

//
//  LISTVIEWSTYLE class parts and states
//
const
  VSCLASS_LISTVIEWSTYLE   = 'LISTVIEWSTYLE';
  {$EXTERNALSYM VSCLASS_LISTVIEWSTYLE}
  VSCLASS_LISTVIEW        = 'LISTVIEW';
  {$EXTERNALSYM VSCLASS_LISTVIEW}

type
  LISTVIEWPARTS = Integer;
  {$EXTERNALSYM LISTVIEWPARTS}
const
  LISTVIEWPartFiller0 = 0;
  {$EXTERNALSYM LISTVIEWPartFiller0}
  LVP_LISTITEM = 1;
  {$EXTERNALSYM LVP_LISTITEM}
  LVP_LISTGROUP = 2;
  {$EXTERNALSYM LVP_LISTGROUP}
  LVP_LISTDETAIL = 3;
  {$EXTERNALSYM LVP_LISTDETAIL}
  LVP_LISTSORTEDDETAIL = 4;
  {$EXTERNALSYM LVP_LISTSORTEDDETAIL}
  LVP_EMPTYTEXT = 5;
  {$EXTERNALSYM LVP_EMPTYTEXT}
  { For Windows >= Vista }
  LVP_GROUPHEADER     = 6;
  {$EXTERNALSYM LVP_GROUPHEADER}
  LVP_GROUPHEADERLINE     = 7;
  {$EXTERNALSYM LVP_GROUPHEADERLINE}
  LVP_EXPANDBUTTON     = 8;
  {$EXTERNALSYM LVP_EXPANDBUTTON}
  LVP_COLLAPSEBUTTON     = 9;
  {$EXTERNALSYM LVP_COLLAPSEBUTTON}
  LVP_COLUMNDETAIL     = 10;
  {$EXTERNALSYM LVP_COLUMNDETAIL}

type
  LISTITEMSTATES = Integer;
  {$EXTERNALSYM LISTITEMSTATES}
const
  LISTITEMStateFiller0 = 0;
  {$EXTERNALSYM LISTITEMStateFiller0}
  LIS_NORMAL = 1;
  {$EXTERNALSYM LIS_NORMAL}
  LIS_HOT = 2;
  {$EXTERNALSYM LIS_HOT}
  LIS_SELECTED = 3;
  {$EXTERNALSYM LIS_SELECTED}
  LIS_DISABLED = 4;
  {$EXTERNALSYM LIS_DISABLED}
  LIS_SELECTEDNOTFOCUS = 5;
  {$EXTERNALSYM LIS_SELECTEDNOTFOCUS}
  { For Windows >= Vista }
  LISS_HOTSELECTED     = 6;
  {$EXTERNALSYM LISS_HOTSELECTED}

type
  { For Windows >= Vista }
  {$EXTERNALSYM GROUPHEADERSTATES}
  GROUPHEADERSTATES = Integer;
const
  {$EXTERNALSYM LVGH_OPEN}
  LVGH_OPEN     = 1;
  {$EXTERNALSYM LVGH_OPENHOT}
  LVGH_OPENHOT     = 2;
  {$EXTERNALSYM LVGH_OPENSELECTED}
  LVGH_OPENSELECTED     = 3;
  {$EXTERNALSYM LVGH_OPENSELECTEDHOT}
  LVGH_OPENSELECTEDHOT     = 4;
  {$EXTERNALSYM LVGH_OPENSELECTEDNOTFOCUSED}
  LVGH_OPENSELECTEDNOTFOCUSED     = 5;
  {$EXTERNALSYM LVGH_OPENSELECTEDNOTFOCUSEDHOT}
  LVGH_OPENSELECTEDNOTFOCUSEDHOT     = 6;
  {$EXTERNALSYM LVGH_OPENMIXEDSELECTION}
  LVGH_OPENMIXEDSELECTION     = 7;
  {$EXTERNALSYM LVGH_OPENMIXEDSELECTIONHOT}
  LVGH_OPENMIXEDSELECTIONHOT     = 8;
  {$EXTERNALSYM LVGH_CLOSE}
  LVGH_CLOSE     = 9;
  {$EXTERNALSYM LVGH_CLOSEHOT}
  LVGH_CLOSEHOT     = 10;
  {$EXTERNALSYM LVGH_CLOSESELECTED}
  LVGH_CLOSESELECTED     = 11;
  {$EXTERNALSYM LVGH_CLOSESELECTEDHOT}
  LVGH_CLOSESELECTEDHOT     = 12;
  {$EXTERNALSYM LVGH_CLOSESELECTEDNOTFOCUSED}
  LVGH_CLOSESELECTEDNOTFOCUSED     = 13;
  {$EXTERNALSYM LVGH_CLOSESELECTEDNOTFOCUSEDHOT}
  LVGH_CLOSESELECTEDNOTFOCUSEDHOT     = 14;
  {$EXTERNALSYM LVGH_CLOSEMIXEDSELECTION}
  LVGH_CLOSEMIXEDSELECTION     = 15;
  {$EXTERNALSYM LVGH_CLOSEMIXEDSELECTIONHOT}
  LVGH_CLOSEMIXEDSELECTIONHOT     = 16;

type
  { For Windows >= Vista }
  {$EXTERNALSYM GROUPHEADERLINESTATES}
  GROUPHEADERLINESTATES = Integer;
const
  {$EXTERNALSYM LVGHL_OPEN}
  LVGHL_OPEN     = 1;
  {$EXTERNALSYM LVGHL_OPENHOT}
  LVGHL_OPENHOT     = 2;
  {$EXTERNALSYM LVGHL_OPENSELECTED}
  LVGHL_OPENSELECTED     = 3;
  {$EXTERNALSYM LVGHL_OPENSELECTEDHOT}
  LVGHL_OPENSELECTEDHOT     = 4;
  {$EXTERNALSYM LVGHL_OPENSELECTEDNOTFOCUSED}
  LVGHL_OPENSELECTEDNOTFOCUSED     = 5;
  {$EXTERNALSYM LVGHL_OPENSELECTEDNOTFOCUSEDHOT}
  LVGHL_OPENSELECTEDNOTFOCUSEDHOT     = 6;
  {$EXTERNALSYM LVGHL_OPENMIXEDSELECTION}
  LVGHL_OPENMIXEDSELECTION     = 7;
  {$EXTERNALSYM LVGHL_OPENMIXEDSELECTIONHOT}
  LVGHL_OPENMIXEDSELECTIONHOT     = 8;
  {$EXTERNALSYM LVGHL_CLOSE}
  LVGHL_CLOSE     = 9;
  {$EXTERNALSYM LVGHL_CLOSEHOT}
  LVGHL_CLOSEHOT     = 10;
  {$EXTERNALSYM LVGHL_CLOSESELECTED}
  LVGHL_CLOSESELECTED     = 11;
  {$EXTERNALSYM LVGHL_CLOSESELECTEDHOT}
  LVGHL_CLOSESELECTEDHOT     = 12;
  {$EXTERNALSYM LVGHL_CLOSESELECTEDNOTFOCUSED}
  LVGHL_CLOSESELECTEDNOTFOCUSED     = 13;
  {$EXTERNALSYM LVGHL_CLOSESELECTEDNOTFOCUSEDHOT}
  LVGHL_CLOSESELECTEDNOTFOCUSEDHOT     = 14;
  {$EXTERNALSYM LVGHL_CLOSEMIXEDSELECTION}
  LVGHL_CLOSEMIXEDSELECTION     = 15;
  {$EXTERNALSYM LVGHL_CLOSEMIXEDSELECTIONHOT}
  LVGHL_CLOSEMIXEDSELECTIONHOT     = 16;

type
  { For Windows >= Vista }
  {$EXTERNALSYM EXPANDBUTTONSTATES}
  EXPANDBUTTONSTATES = Integer;
const
  {$EXTERNALSYM LVEB_NORMAL}
  LVEB_NORMAL     = 1;
  {$EXTERNALSYM LVEB_HOVER}
  LVEB_HOVER     = 2;
  {$EXTERNALSYM LVEB_PUSHED}
  LVEB_PUSHED     = 3;

type
  { For Windows >= Vista }
  {$EXTERNALSYM COLLAPSEBUTTONSTATES}
  COLLAPSEBUTTONSTATES = Integer;
const
  {$EXTERNALSYM LVCB_NORMAL}
  LVCB_NORMAL     = 1;
  {$EXTERNALSYM LVCB_HOVER}
  LVCB_HOVER     = 2;
  {$EXTERNALSYM LVCB_PUSHED}
  LVCB_PUSHED     = 3;

  
//
//  HEADERSTYLE class parts and states
//
const
  VSCLASS_HEADERSTYLE     = 'HEADERSTYLE';
  {$EXTERNALSYM VSCLASS_HEADERSTYLE}
  VSCLASS_HEADER  = 'HEADER';
  {$EXTERNALSYM VSCLASS_HEADER}

type
  HEADERPARTS = Integer;
  {$EXTERNALSYM HEADERPARTS}
const
  HEADERPartFiller0 = 0;
  {$EXTERNALSYM HEADERPartFiller0}
  HP_HEADERITEM = 1;
  {$EXTERNALSYM HP_HEADERITEM}
  HP_HEADERITEMLEFT = 2;
  {$EXTERNALSYM HP_HEADERITEMLEFT}
  HP_HEADERITEMRIGHT = 3;
  {$EXTERNALSYM HP_HEADERITEMRIGHT}
  HP_HEADERSORTARROW = 4;
  {$EXTERNALSYM HP_HEADERSORTARROW}
  { For Windows >= Vista }
  HP_HEADERDROPDOWN     = 5;
  {$EXTERNALSYM HP_HEADERDROPDOWN}
  HP_HEADERDROPDOWNFILTER     = 6;
  {$EXTERNALSYM HP_HEADERDROPDOWNFILTER}
  HP_HEADEROVERFLOW     = 7;
  {$EXTERNALSYM HP_HEADEROVERFLOW}

type
  { For Windows >= Vista }
  {$EXTERNALSYM HEADERSTYLESTATES}
  HEADERSTYLESTATES = Integer;
const
  {$EXTERNALSYM HBG_DETAILS}
  HBG_DETAILS     = 1;
  {$EXTERNALSYM HBG_ICON}
  HBG_ICON     = 2;

type
  HEADERITEMSTATES = Integer;
  {$EXTERNALSYM HEADERITEMSTATES}
const
  HEADERITEMStateFiller0 = 0;
  {$EXTERNALSYM HEADERITEMStateFiller0}
  HIS_NORMAL = 1;
  {$EXTERNALSYM HIS_NORMAL}
  HIS_HOT = 2;
  {$EXTERNALSYM HIS_HOT}
  HIS_PRESSED = 3;
  {$EXTERNALSYM HIS_PRESSED}
  { For Windows >= Vista }
  HIS_SORTEDNORMAL     = 4;
  {$EXTERNALSYM HIS_SORTEDNORMAL}
  HIS_SORTEDHOT     = 5;
  {$EXTERNALSYM HIS_SORTEDHOT}
  HIS_SORTEDPRESSED     = 6;
  {$EXTERNALSYM HIS_SORTEDPRESSED}
  HIS_ICONNORMAL     = 7;
  {$EXTERNALSYM HIS_ICONNORMAL}
  HIS_ICONHOT     = 8;
  {$EXTERNALSYM HIS_ICONHOT}
  HIS_ICONPRESSED     = 9;
  {$EXTERNALSYM HIS_ICONPRESSED}
  HIS_ICONSORTEDNORMAL     = 10;
  {$EXTERNALSYM HIS_ICONSORTEDNORMAL}
  HIS_ICONSORTEDHOT     = 11;
  {$EXTERNALSYM HIS_ICONSORTEDHOT}
  HIS_ICONSORTEDPRESSED     = 12;
  {$EXTERNALSYM HIS_ICONSORTEDPRESSED}

type
  HEADERITEMLEFTSTATES = Integer;
  {$EXTERNALSYM HEADERITEMLEFTSTATES}
const
  HEADERITEMLEFTStateFiller0 = 0;
  {$EXTERNALSYM HEADERITEMLEFTStateFiller0}
  HILS_NORMAL = 1;
  {$EXTERNALSYM HILS_NORMAL}
  HILS_HOT = 2;
  {$EXTERNALSYM HILS_HOT}
  HILS_PRESSED = 3;
  {$EXTERNALSYM HILS_PRESSED}

type
  HEADERITEMRIGHTSTATES = Integer;
  {$EXTERNALSYM HEADERITEMRIGHTSTATES}
const
  HEADERITEMRIGHTStateFiller0 = 0;
  {$EXTERNALSYM HEADERITEMRIGHTStateFiller0}
  HIRS_NORMAL = 1;
  {$EXTERNALSYM HIRS_NORMAL}
  HIRS_HOT = 2;
  {$EXTERNALSYM HIRS_HOT}
  HIRS_PRESSED = 3;
  {$EXTERNALSYM HIRS_PRESSED}

type
  HEADERSORTARROWSTATES = Integer;
  {$EXTERNALSYM HEADERSORTARROWSTATES}
const
  HEADERSORTARROWStateFiller0 = 0;
  {$EXTERNALSYM HEADERSORTARROWStateFiller0}
  HSAS_SORTEDUP = 1;
  {$EXTERNALSYM HSAS_SORTEDUP}
  HSAS_SORTEDDOWN = 2;
  {$EXTERNALSYM HSAS_SORTEDDOWN}

type
  { For Windows >= Vista }
  {$EXTERNALSYM HEADERDROPDOWNSTATES}
  HEADERDROPDOWNSTATES = Integer;
const
  {$EXTERNALSYM HDDS_NORMAL}
  HDDS_NORMAL     = 1;
  {$EXTERNALSYM HDDS_SOFTHOT}
  HDDS_SOFTHOT     = 2;
  {$EXTERNALSYM HDDS_HOT}
  HDDS_HOT     = 3;

type
  { For Windows >= Vista }
  {$EXTERNALSYM HEADERDROPDOWNFILTERSTATES}
  HEADERDROPDOWNFILTERSTATES = Integer;
const
  {$EXTERNALSYM HDDFS_NORMAL}
  HDDFS_NORMAL     = 1;
  {$EXTERNALSYM HDDFS_SOFTHOT}
  HDDFS_SOFTHOT     = 2;
  {$EXTERNALSYM HDDFS_HOT}
  HDDFS_HOT     = 3;

type
  { For Windows >= Vista }
  {$EXTERNALSYM HEADEROVERFLOWSTATES}
  HEADEROVERFLOWSTATES = Integer;
const
  {$EXTERNALSYM HOFS_NORMAL}
  HOFS_NORMAL     = 1;
  {$EXTERNALSYM HOFS_HOT}
  HOFS_HOT     = 2;

  
//
//  PROGRESSSTYLE class parts and states
//
const
  VSCLASS_PROGRESSSTYLE   = 'PROGRESSSTYLE';
  {$EXTERNALSYM VSCLASS_PROGRESSSTYLE}
  VSCLASS_PROGRESS        = 'PROGRESS';
  {$EXTERNALSYM VSCLASS_PROGRESS}

type
  PROGRESSPARTS = Integer;
  {$EXTERNALSYM PROGRESSPARTS}
const
  PROGRESSPartFiller0 = 0;
  {$EXTERNALSYM PROGRESSPartFiller0}
  PP_BAR = 1;
  {$EXTERNALSYM PP_BAR}
  PP_BARVERT = 2;
  {$EXTERNALSYM PP_BARVERT}
  PP_CHUNK = 3;
  {$EXTERNALSYM PP_CHUNK}
  PP_CHUNKVERT = 4;
  {$EXTERNALSYM PP_CHUNKVERT}
  { For Windows >= Vista }
  {$EXTERNALSYM PP_FILL}
  PP_FILL     = 5;
  {$EXTERNALSYM PP_FILLVERT}
  PP_FILLVERT     = 6;
  {$EXTERNALSYM PP_PULSEOVERLAY}
  PP_PULSEOVERLAY     = 7;
  {$EXTERNALSYM PP_MOVEOVERLAY}
  PP_MOVEOVERLAY     = 8;
  {$EXTERNALSYM PP_PULSEOVERLAYVERT}
  PP_PULSEOVERLAYVERT     = 9;
  {$EXTERNALSYM PP_MOVEOVERLAYVERT}
  PP_MOVEOVERLAYVERT     = 10;
  {$EXTERNALSYM PP_TRANSPARENTBAR}
  PP_TRANSPARENTBAR     = 11;
  {$EXTERNALSYM PP_TRANSPARENTBARVERT}
  PP_TRANSPARENTBARVERT     = 12;

type
  { For Windows >= Vista }
  {$EXTERNALSYM TRANSPARENTBARSTATES}
  TRANSPARENTBARSTATES = Integer;
const
  {$EXTERNALSYM PBBS_NORMAL}
  PBBS_NORMAL     = 1;
  {$EXTERNALSYM PBBS_PARTIAL}
  PBBS_PARTIAL     = 2;

type
  { For Windows >= Vista }
  {$EXTERNALSYM TRANSPARENTBARVERTSTATES}
  TRANSPARENTBARVERTSTATES = Integer;
const
  {$EXTERNALSYM PBBVS_NORMAL}
  PBBVS_NORMAL     = 1;
  {$EXTERNALSYM PBBVS_PARTIAL}
  PBBVS_PARTIAL     = 2;

type
  { For Windows >= Vista }
  {$EXTERNALSYM FILLSTATES}
  FILLSTATES = Integer;
const
  {$EXTERNALSYM PBFS_NORMAL}
  PBFS_NORMAL     = 1;
  {$EXTERNALSYM PBFS_ERROR}
  PBFS_ERROR     = 2;
  {$EXTERNALSYM PBFS_PAUSED}
  PBFS_PAUSED     = 3;
  {$EXTERNALSYM PBFS_PARTIAL}
  PBFS_PARTIAL     = 4;

type
  { For Windows >= Vista }
  {$EXTERNALSYM FILLVERTSTATES}
  FILLVERTSTATES = Integer;
const
  {$EXTERNALSYM PBFVS_NORMAL}
  PBFVS_NORMAL     = 1;
  {$EXTERNALSYM PBFVS_ERROR}
  PBFVS_ERROR     = 2;
  {$EXTERNALSYM PBFVS_PAUSED}
  PBFVS_PAUSED     = 3;
  {$EXTERNALSYM PBFVS_PARTIAL}
  PBFVS_PARTIAL     = 4;
  

//
//  TABSTYLE class parts and states
// 
const
  {$EXTERNALSYM VSCLASS_TABSTYLE}
  VSCLASS_TABSTYLE        = 'TABSTYLE';
  {$EXTERNALSYM VSCLASS_TAB}
  VSCLASS_TAB     = 'TAB';

type
  TABPARTS = Integer;
  {$EXTERNALSYM TABPARTS}
const
  TABPartFiller0 = 0;
  {$EXTERNALSYM TABPartFiller0}
  TABP_TABITEM = 1;
  {$EXTERNALSYM TABP_TABITEM}
  TABP_TABITEMLEFTEDGE = 2;
  {$EXTERNALSYM TABP_TABITEMLEFTEDGE}
  TABP_TABITEMRIGHTEDGE = 3;
  {$EXTERNALSYM TABP_TABITEMRIGHTEDGE}
  TABP_TABITEMBOTHEDGE = 4;
  {$EXTERNALSYM TABP_TABITEMBOTHEDGE}
  TABP_TOPTABITEM = 5;
  {$EXTERNALSYM TABP_TOPTABITEM}
  TABP_TOPTABITEMLEFTEDGE = 6;
  {$EXTERNALSYM TABP_TOPTABITEMLEFTEDGE}
  TABP_TOPTABITEMRIGHTEDGE = 7;
  {$EXTERNALSYM TABP_TOPTABITEMRIGHTEDGE}
  TABP_TOPTABITEMBOTHEDGE = 8;
  {$EXTERNALSYM TABP_TOPTABITEMBOTHEDGE}
  TABP_PANE = 9;
  {$EXTERNALSYM TABP_PANE}
  TABP_BODY = 10;
  {$EXTERNALSYM TABP_BODY}
  { For Windows >= Vista }
  TABP_AEROWIZARDBODY     = 11;
  {$EXTERNALSYM TABP_AEROWIZARDBODY}

type
  TABITEMSTATES = Integer;
  {$EXTERNALSYM TABITEMSTATES}
const
  TABITEMStateFiller0 = 0;
  {$EXTERNALSYM TABITEMStateFiller0}
  TIS_NORMAL = 1;
  {$EXTERNALSYM TIS_NORMAL}
  TIS_HOT = 2;
  {$EXTERNALSYM TIS_HOT}
  TIS_SELECTED = 3;
  {$EXTERNALSYM TIS_SELECTED}
  TIS_DISABLED = 4;
  {$EXTERNALSYM TIS_DISABLED}
  TIS_FOCUSED = 5;
  {$EXTERNALSYM TIS_FOCUSED}

type
  TABITEMLEFTEDGESTATES = Integer;
  {$EXTERNALSYM TABITEMLEFTEDGESTATES}
const
  TABITEMLEFTEDGEStateFiller0 = 0;
  {$EXTERNALSYM TABITEMLEFTEDGEStateFiller0}
  TILES_NORMAL = 1;
  {$EXTERNALSYM TILES_NORMAL}
  TILES_HOT = 2;
  {$EXTERNALSYM TILES_HOT}
  TILES_SELECTED = 3;
  {$EXTERNALSYM TILES_SELECTED}
  TILES_DISABLED = 4;
  {$EXTERNALSYM TILES_DISABLED}
  TILES_FOCUSED = 5;
  {$EXTERNALSYM TILES_FOCUSED}

type
  TABITEMRIGHTEDGESTATES = Integer;
  {$EXTERNALSYM TABITEMRIGHTEDGESTATES}
const
  TABITEMRIGHTEDGEStateFiller0 = 0;
  {$EXTERNALSYM TABITEMRIGHTEDGEStateFiller0}
  TIRES_NORMAL = 1;
  {$EXTERNALSYM TIRES_NORMAL}
  TIRES_HOT = 2;
  {$EXTERNALSYM TIRES_HOT}
  TIRES_SELECTED = 3;
  {$EXTERNALSYM TIRES_SELECTED}
  TIRES_DISABLED = 4;
  {$EXTERNALSYM TIRES_DISABLED}
  TIRES_FOCUSED = 5;
  {$EXTERNALSYM TIRES_FOCUSED}

type
  TABITEMBOTHEDGESSTATES = Integer;
  {$EXTERNALSYM TABITEMBOTHEDGESSTATES}
const
  TABITEMBOTHEDGESStateFiller0 = 0;
  {$EXTERNALSYM TABITEMBOTHEDGESStateFiller0}
  TIBES_NORMAL = 1;
  {$EXTERNALSYM TIBES_NORMAL}
  TIBES_HOT = 2;
  {$EXTERNALSYM TIBES_HOT}
  TIBES_SELECTED = 3;
  {$EXTERNALSYM TIBES_SELECTED}
  TIBES_DISABLED = 4;
  {$EXTERNALSYM TIBES_DISABLED}
  TIBES_FOCUSED = 5;
  {$EXTERNALSYM TIBES_FOCUSED}

type
  TOPTABITEMSTATES = Integer;
  {$EXTERNALSYM TOPTABITEMSTATES}
const
  TOPTABITEMStateFiller0 = 0;
  {$EXTERNALSYM TOPTABITEMStateFiller0}
  TTIS_NORMAL = 1;
  {$EXTERNALSYM TTIS_NORMAL}
  TTIS_HOT = 2;
  {$EXTERNALSYM TTIS_HOT}
  TTIS_SELECTED = 3;
  {$EXTERNALSYM TTIS_SELECTED}
  TTIS_DISABLED = 4;
  {$EXTERNALSYM TTIS_DISABLED}
  TTIS_FOCUSED = 5;
  {$EXTERNALSYM TTIS_FOCUSED}

type
  TOPTABITEMLEFTEDGESTATES = Integer;
  {$EXTERNALSYM TOPTABITEMLEFTEDGESTATES}
const
  TOPTABITEMLEFTEDGEStateFiller0 = 0;
  {$EXTERNALSYM TOPTABITEMLEFTEDGEStateFiller0}
  TTILES_NORMAL = 1;
  {$EXTERNALSYM TTILES_NORMAL}
  TTILES_HOT = 2;
  {$EXTERNALSYM TTILES_HOT}
  TTILES_SELECTED = 3;
  {$EXTERNALSYM TTILES_SELECTED}
  TTILES_DISABLED = 4;
  {$EXTERNALSYM TTILES_DISABLED}
  TTILES_FOCUSED = 5;
  {$EXTERNALSYM TTILES_FOCUSED}

type
  TOPTABITEMRIGHTEDGESTATES = Integer;
  {$EXTERNALSYM TOPTABITEMRIGHTEDGESTATES}
const
  TOPTABITEMRIGHTEDGEStateFiller0 = 0;
  {$EXTERNALSYM TOPTABITEMRIGHTEDGEStateFiller0}
  TTIRES_NORMAL = 1;
  {$EXTERNALSYM TTIRES_NORMAL}
  TTIRES_HOT = 2;
  {$EXTERNALSYM TTIRES_HOT}
  TTIRES_SELECTED = 3;
  {$EXTERNALSYM TTIRES_SELECTED}
  TTIRES_DISABLED = 4;
  {$EXTERNALSYM TTIRES_DISABLED}
  TTIRES_FOCUSED = 5;
  {$EXTERNALSYM TTIRES_FOCUSED}

type
  TOPTABITEMBOTHEDGESSTATES = Integer;
  {$EXTERNALSYM TOPTABITEMBOTHEDGESSTATES}
const
  TOPTABITEMBOTHEDGESStateFiller0 = 0;
  {$EXTERNALSYM TOPTABITEMBOTHEDGESStateFiller0}
  TTIBES_NORMAL = 1;
  {$EXTERNALSYM TTIBES_NORMAL}
  TTIBES_HOT = 2;
  {$EXTERNALSYM TTIBES_HOT}
  TTIBES_SELECTED = 3;
  {$EXTERNALSYM TTIBES_SELECTED}
  TTIBES_DISABLED = 4;
  {$EXTERNALSYM TTIBES_DISABLED}
  TTIBES_FOCUSED = 5;
  {$EXTERNALSYM TTIBES_FOCUSED}

  
//
//  TRACKBARSTYLE class parts and states
//
const
  {$EXTERNALSYM VSCLASS_TRACKBARSTYLE}
  VSCLASS_TRACKBARSTYLE   = 'TRACKBARSTYLE';
  {$EXTERNALSYM VSCLASS_TRACKBAR}
  VSCLASS_TRACKBAR        = 'TRACKBAR';

type
  TRACKBARPARTS = Integer;
  {$EXTERNALSYM TRACKBARPARTS}
const
  TRACKBARPartFiller0 = 0;
  {$EXTERNALSYM TRACKBARPartFiller0}
  TKP_TRACK = 1;
  {$EXTERNALSYM TKP_TRACK}
  TKP_TRACKVERT = 2;
  {$EXTERNALSYM TKP_TRACKVERT}
  TKP_THUMB = 3;
  {$EXTERNALSYM TKP_THUMB}
  TKP_THUMBBOTTOM = 4;
  {$EXTERNALSYM TKP_THUMBBOTTOM}
  TKP_THUMBTOP = 5;
  {$EXTERNALSYM TKP_THUMBTOP}
  TKP_THUMBVERT = 6;
  {$EXTERNALSYM TKP_THUMBVERT}
  TKP_THUMBLEFT = 7;
  {$EXTERNALSYM TKP_THUMBLEFT}
  TKP_THUMBRIGHT = 8;
  {$EXTERNALSYM TKP_THUMBRIGHT}
  TKP_TICS = 9;
  {$EXTERNALSYM TKP_TICS}
  TKP_TICSVERT = 10;
  {$EXTERNALSYM TKP_TICSVERT}

type
  TRACKBARSTATES = Integer;
  {$EXTERNALSYM TRACKBARSTATES}
const
  TRACKBARStateFiller0 = 0;
  {$EXTERNALSYM TRACKBARStateFiller0}
  TKS_NORMAL = 1;
  {$EXTERNALSYM TKS_NORMAL}

type
  TRACKSTATES = Integer;
  {$EXTERNALSYM TRACKSTATES}
const
  TRACKStateFiller0 = 0;
  {$EXTERNALSYM TRACKStateFiller0}
  TRS_NORMAL = 1;
  {$EXTERNALSYM TRS_NORMAL}

type
  TRACKVERTSTATES = Integer;
  {$EXTERNALSYM TRACKVERTSTATES}
const
  TRACKVERTStateFiller0 = 0;
  {$EXTERNALSYM TRACKVERTStateFiller0}
  TRVS_NORMAL = 1;
  {$EXTERNALSYM TRVS_NORMAL}

type
  THUMBSTATES = Integer;
  {$EXTERNALSYM THUMBSTATES}
const
  THUMBStateFiller0 = 0;
  {$EXTERNALSYM THUMBStateFiller0}
  TUS_NORMAL = 1;
  {$EXTERNALSYM TUS_NORMAL}
  TUS_HOT = 2;
  {$EXTERNALSYM TUS_HOT}
  TUS_PRESSED = 3;
  {$EXTERNALSYM TUS_PRESSED}
  TUS_FOCUSED = 4;
  {$EXTERNALSYM TUS_FOCUSED}
  TUS_DISABLED = 5;
  {$EXTERNALSYM TUS_DISABLED}

type
  THUMBBOTTOMSTATES = Integer;
  {$EXTERNALSYM THUMBBOTTOMSTATES}
const
  THUMBBOTTOMStateFiller0 = 0;
  {$EXTERNALSYM THUMBBOTTOMStateFiller0}
  TUBS_NORMAL = 1;
  {$EXTERNALSYM TUBS_NORMAL}
  TUBS_HOT = 2;
  {$EXTERNALSYM TUBS_HOT}
  TUBS_PRESSED = 3;
  {$EXTERNALSYM TUBS_PRESSED}
  TUBS_FOCUSED = 4;
  {$EXTERNALSYM TUBS_FOCUSED}
  TUBS_DISABLED = 5;
  {$EXTERNALSYM TUBS_DISABLED}

type
  THUMBTOPSTATES = Integer;
  {$EXTERNALSYM THUMBTOPSTATES}
const
  THUMBTOPStateFiller0 = 0;
  {$EXTERNALSYM THUMBTOPStateFiller0}
  TUTS_NORMAL = 1;
  {$EXTERNALSYM TUTS_NORMAL}
  TUTS_HOT = 2;
  {$EXTERNALSYM TUTS_HOT}
  TUTS_PRESSED = 3;
  {$EXTERNALSYM TUTS_PRESSED}
  TUTS_FOCUSED = 4;
  {$EXTERNALSYM TUTS_FOCUSED}
  TUTS_DISABLED = 5;
  {$EXTERNALSYM TUTS_DISABLED}

type
  THUMBVERTSTATES = Integer;
  {$EXTERNALSYM THUMBVERTSTATES}
const
  THUMBVERTStateFiller0 = 0;
  {$EXTERNALSYM THUMBVERTStateFiller0}
  TUVS_NORMAL = 1;
  {$EXTERNALSYM TUVS_NORMAL}
  TUVS_HOT = 2;
  {$EXTERNALSYM TUVS_HOT}
  TUVS_PRESSED = 3;
  {$EXTERNALSYM TUVS_PRESSED}
  TUVS_FOCUSED = 4;
  {$EXTERNALSYM TUVS_FOCUSED}
  TUVS_DISABLED = 5;
  {$EXTERNALSYM TUVS_DISABLED}

type
  THUMBLEFTSTATES = Integer;
  {$EXTERNALSYM THUMBLEFTSTATES}
const
  THUMBLEFTStateFiller0 = 0;
  {$EXTERNALSYM THUMBLEFTStateFiller0}
  TUVLS_NORMAL = 1;
  {$EXTERNALSYM TUVLS_NORMAL}
  TUVLS_HOT = 2;
  {$EXTERNALSYM TUVLS_HOT}
  TUVLS_PRESSED = 3;
  {$EXTERNALSYM TUVLS_PRESSED}
  TUVLS_FOCUSED = 4;
  {$EXTERNALSYM TUVLS_FOCUSED}
  TUVLS_DISABLED = 5;
  {$EXTERNALSYM TUVLS_DISABLED}

type
  THUMBRIGHTSTATES = Integer;
  {$EXTERNALSYM THUMBRIGHTSTATES}
const
  THUMBRIGHTStateFiller0 = 0;
  {$EXTERNALSYM THUMBRIGHTStateFiller0}
  TUVRS_NORMAL = 1;
  {$EXTERNALSYM TUVRS_NORMAL}
  TUVRS_HOT = 2;
  {$EXTERNALSYM TUVRS_HOT}
  TUVRS_PRESSED = 3;
  {$EXTERNALSYM TUVRS_PRESSED}
  TUVRS_FOCUSED = 4;
  {$EXTERNALSYM TUVRS_FOCUSED}
  TUVRS_DISABLED = 5;
  {$EXTERNALSYM TUVRS_DISABLED}

type
  TICSSTATES = Integer;
  {$EXTERNALSYM TICSSTATES}
const
  TICSStateFiller0 = 0;
  {$EXTERNALSYM TICSStateFiller0}
  TSS_NORMAL = 1;
  {$EXTERNALSYM TSS_NORMAL}

type
  TICSVERTSTATES = Integer;
  {$EXTERNALSYM TICSVERTSTATES}
const
  TICSVERTStateFiller0 = 0;
  {$EXTERNALSYM TICSVERTStateFiller0}
  TSVS_NORMAL = 1;
  {$EXTERNALSYM TSVS_NORMAL}

  
//
//  TOOLTIPSTYLE class parts and states
// 
const
  {$EXTERNALSYM VSCLASS_TOOLTIPSTYLE}
  VSCLASS_TOOLTIPSTYLE    = 'TOOLTIPSTYLE';
  {$EXTERNALSYM VSCLASS_TOOLTIP}
  VSCLASS_TOOLTIP = 'TOOLTIP';

type
  TOOLTIPPARTS = Integer;
  {$EXTERNALSYM TOOLTIPPARTS}
const
  TOOLTIPPartFiller0 = 0;
  {$EXTERNALSYM TOOLTIPPartFiller0}
  TTP_STANDARD = 1;
  {$EXTERNALSYM TTP_STANDARD}
  TTP_STANDARDTITLE = 2;
  {$EXTERNALSYM TTP_STANDARDTITLE}
  TTP_BALLOON = 3;
  {$EXTERNALSYM TTP_BALLOON}
  TTP_BALLOONTITLE = 4;
  {$EXTERNALSYM TTP_BALLOONTITLE}
  TTP_CLOSE = 5;
  {$EXTERNALSYM TTP_CLOSE}
  { For Windows >= Vista }
  TTP_BALLOONSTEM = 6;
  {$EXTERNALSYM TTP_BALLOONSTEM}
  { For Windows >= Windows 7 }
	TTP_WRENCH = 7;
  {$EXTERNALSYM TTP_WRENCH}

type
  CLOSESTATES = Integer;
  {$EXTERNALSYM CLOSESTATES}
const
  CLOSEStateFiller0 = 0;
  {$EXTERNALSYM CLOSEStateFiller0}
  TTCS_NORMAL = 1;
  {$EXTERNALSYM TTCS_NORMAL}
  TTCS_HOT = 2;
  {$EXTERNALSYM TTCS_HOT}
  TTCS_PRESSED = 3;
  {$EXTERNALSYM TTCS_PRESSED}

type
  STANDARDSTATES = Integer;
  {$EXTERNALSYM STANDARDSTATES}
const
  STANDARDStateFiller0 = 0;
  {$EXTERNALSYM STANDARDStateFiller0}
  TTSS_NORMAL = 1;
  {$EXTERNALSYM TTSS_NORMAL}
  TTSS_LINK = 2;
  {$EXTERNALSYM TTSS_LINK}

type
  BALLOONSTATES = Integer;
  {$EXTERNALSYM BALLOONSTATES}
const
  BALLOONStateFiller0 = 0;
  {$EXTERNALSYM BALLOONStateFiller0}
  TTBS_NORMAL = 1;
  {$EXTERNALSYM TTBS_NORMAL}
  TTBS_LINK = 2;
  {$EXTERNALSYM TTBS_LINK}

type
  { For Windows >= Vista }
  {$EXTERNALSYM BALLOONSTEMSTATES}
  BALLOONSTEMSTATES = Integer;
const
  {$EXTERNALSYM TTBSS_POINTINGUPLEFTWALL}
  TTBSS_POINTINGUPLEFTWALL     = 1;
  {$EXTERNALSYM TTBSS_POINTINGUPCENTERED}
  TTBSS_POINTINGUPCENTERED     = 2;
  {$EXTERNALSYM TTBSS_POINTINGUPRIGHTWALL}
  TTBSS_POINTINGUPRIGHTWALL     = 3;
  {$EXTERNALSYM TTBSS_POINTINGDOWNRIGHTWALL}
  TTBSS_POINTINGDOWNRIGHTWALL     = 4;
  {$EXTERNALSYM TTBSS_POINTINGDOWNCENTERED}
  TTBSS_POINTINGDOWNCENTERED     = 5;
  {$EXTERNALSYM TTBSS_POINTINGDOWNLEFTWALL}
  TTBSS_POINTINGDOWNLEFTWALL     = 6;

  
//
//  TREEVIEWSTYLE class parts and states
//
const
  {$EXTERNALSYM VSCLASS_TREEVIEWSTYLE}
  VSCLASS_TREEVIEWSTYLE   = 'TREEVIEWSTYLE';
  {$EXTERNALSYM VSCLASS_TREEVIEW}
  VSCLASS_TREEVIEW        = 'TREEVIEW';

type
  TREEVIEWPARTS = Integer;
  {$EXTERNALSYM TREEVIEWPARTS}
const
  TREEVIEWPartFiller0 = 0;
  {$EXTERNALSYM TREEVIEWPartFiller0}
  TVP_TREEITEM = 1;
  {$EXTERNALSYM TVP_TREEITEM}
  TVP_GLYPH = 2;
  {$EXTERNALSYM TVP_GLYPH}
  TVP_BRANCH = 3;
  {$EXTERNALSYM TVP_BRANCH}
  { For Windows >= Vista }
  TVP_HOTGLYPH     = 4;
  {$EXTERNALSYM TVP_HOTGLYPH}

type
  TREEITEMSTATES = Integer;
  {$EXTERNALSYM TREEITEMSTATES}
const
  TREEITEMStateFiller0 = 0;
  {$EXTERNALSYM TREEITEMStateFiller0}
  TREIS_NORMAL = 1;
  {$EXTERNALSYM TREIS_NORMAL}
  TREIS_HOT = 2;
  {$EXTERNALSYM TREIS_HOT}
  TREIS_SELECTED = 3;
  {$EXTERNALSYM TREIS_SELECTED}
  TREIS_DISABLED = 4;
  {$EXTERNALSYM TREIS_DISABLED}
  TREIS_SELECTEDNOTFOCUS = 5;
  {$EXTERNALSYM TREIS_SELECTEDNOTFOCUS}
  { For Windows >= Vista }
  TREIS_HOTSELECTED     = 6;
  {$EXTERNALSYM TREIS_HOTSELECTED}

type
  GLYPHSTATES = Integer;
  {$EXTERNALSYM GLYPHSTATES}
const
  GLYPHStateFiller0 = 0;
  {$EXTERNALSYM GLYPHStateFiller0}
  GLPS_CLOSED = 1;
  {$EXTERNALSYM GLPS_CLOSED}
  GLPS_OPENED = 2;
  {$EXTERNALSYM GLPS_OPENED}

type
  { For Windows >= Vista }
  {$EXTERNALSYM HOTGLYPHSTATES}
  HOTGLYPHSTATES = Integer;
const
  {$EXTERNALSYM HGLPS_CLOSED}
  HGLPS_CLOSED     = 1;
  {$EXTERNALSYM HGLPS_OPENED}
  HGLPS_OPENED     = 2;

  
//
//  SPINSTYLE class parts and states
//
const
  {$EXTERNALSYM VSCLASS_SPINSTYLE}
  VSCLASS_SPINSTYLE       = 'SPINSTYLE';
  {$EXTERNALSYM VSCLASS_SPIN}
  VSCLASS_SPIN    = 'SPIN';

type
  SPINPARTS = Integer;
  {$EXTERNALSYM SPINPARTS}
const
  SPINPartFiller0 = 0;
  {$EXTERNALSYM SPINPartFiller0}
  SPNP_UP = 1;
  {$EXTERNALSYM SPNP_UP}
  SPNP_DOWN = 2;
  {$EXTERNALSYM SPNP_DOWN}
  SPNP_UPHORZ = 3;
  {$EXTERNALSYM SPNP_UPHORZ}
  SPNP_DOWNHORZ = 4;
  {$EXTERNALSYM SPNP_DOWNHORZ}

type
  UPSTATES = Integer;
  {$EXTERNALSYM UPSTATES}
const
  UPStateFiller0 = 0;
  {$EXTERNALSYM UPStateFiller0}
  UPS_NORMAL = 1;
  {$EXTERNALSYM UPS_NORMAL}
  UPS_HOT = 2;
  {$EXTERNALSYM UPS_HOT}
  UPS_PRESSED = 3;
  {$EXTERNALSYM UPS_PRESSED}
  UPS_DISABLED = 4;
  {$EXTERNALSYM UPS_DISABLED}

type
  DOWNSTATES = Integer;
  {$EXTERNALSYM DOWNSTATES}
const
  DOWNStateFiller0 = 0;
  {$EXTERNALSYM DOWNStateFiller0}
  DNS_NORMAL = 1;
  {$EXTERNALSYM DNS_NORMAL}
  DNS_HOT = 2;
  {$EXTERNALSYM DNS_HOT}
  DNS_PRESSED = 3;
  {$EXTERNALSYM DNS_PRESSED}
  DNS_DISABLED = 4;
  {$EXTERNALSYM DNS_DISABLED}

type
  UPHORZSTATES = Integer;
  {$EXTERNALSYM UPHORZSTATES}
const
  UPHORZStateFiller0 = 0;
  {$EXTERNALSYM UPHORZStateFiller0}
  UPHZS_NORMAL = 1;
  {$EXTERNALSYM UPHZS_NORMAL}
  UPHZS_HOT = 2;
  {$EXTERNALSYM UPHZS_HOT}
  UPHZS_PRESSED = 3;
  {$EXTERNALSYM UPHZS_PRESSED}
  UPHZS_DISABLED = 4;
  {$EXTERNALSYM UPHZS_DISABLED}

type
  DOWNHORZSTATES = Integer;
  {$EXTERNALSYM DOWNHORZSTATES}
const
  DOWNHORZStateFiller0 = 0;
  {$EXTERNALSYM DOWNHORZStateFiller0}
  DNHZS_NORMAL = 1;
  {$EXTERNALSYM DNHZS_NORMAL}
  DNHZS_HOT = 2;
  {$EXTERNALSYM DNHZS_HOT}
  DNHZS_PRESSED = 3;
  {$EXTERNALSYM DNHZS_PRESSED}
  DNHZS_DISABLED = 4;
  {$EXTERNALSYM DNHZS_DISABLED}

  
//
//  PAGE class parts and states
//
const
  VSCLASS_PAGE    = 'PAGE';
  {$EXTERNALSYM VSCLASS_PAGE}

type
  PAGEPARTS = Integer;
  {$EXTERNALSYM PAGEPARTS}
const
  PAGEPartFiller0 = 0;
  {$EXTERNALSYM PAGEPartFiller0}
  PGRP_UP = 1;
  {$EXTERNALSYM PGRP_UP}
  PGRP_DOWN = 2;
  {$EXTERNALSYM PGRP_DOWN}
  PGRP_UPHORZ = 3;
  {$EXTERNALSYM PGRP_UPHORZ}
  PGRP_DOWNHORZ = 4;
  {$EXTERNALSYM PGRP_DOWNHORZ}

  
//
//  SCROLLBARSTYLE class parts and states
//
const
  {$EXTERNALSYM VSCLASS_SCROLLBARSTYLE}
  VSCLASS_SCROLLBARSTYLE  = 'SCROLLBARSTYLE';
  {$EXTERNALSYM VSCLASS_SCROLLBAR}
  VSCLASS_SCROLLBAR       = 'SCROLLBAR';

type
  SCROLLBARPARTS = Integer;
  {$EXTERNALSYM SCROLLBARPARTS}
const
  SCROLLBARPartFiller0 = 0;
  {$EXTERNALSYM SCROLLBARPartFiller0}
  SBP_ARROWBTN = 1;
  {$EXTERNALSYM SBP_ARROWBTN}
  SBP_THUMBBTNHORZ = 2;
  {$EXTERNALSYM SBP_THUMBBTNHORZ}
  SBP_THUMBBTNVERT = 3;
  {$EXTERNALSYM SBP_THUMBBTNVERT}
  SBP_LOWERTRACKHORZ = 4;
  {$EXTERNALSYM SBP_LOWERTRACKHORZ}
  SBP_UPPERTRACKHORZ = 5;
  {$EXTERNALSYM SBP_UPPERTRACKHORZ}
  SBP_LOWERTRACKVERT = 6;
  {$EXTERNALSYM SBP_LOWERTRACKVERT}
  SBP_UPPERTRACKVERT = 7;
  {$EXTERNALSYM SBP_UPPERTRACKVERT}
  SBP_GRIPPERHORZ = 8;
  {$EXTERNALSYM SBP_GRIPPERHORZ}
  SBP_GRIPPERVERT = 9;
  {$EXTERNALSYM SBP_GRIPPERVERT}
  SBP_SIZEBOX = 10;
  {$EXTERNALSYM SBP_SIZEBOX}

type
  ARROWBTNSTATES = Integer;
  {$EXTERNALSYM ARROWBTNSTATES}
const
  ARROWBTNStateFiller0 = 0;
  {$EXTERNALSYM ARROWBTNStateFiller0}
  ABS_UPNORMAL = 1;
  {$EXTERNALSYM ABS_UPNORMAL}
  ABS_UPHOT = 2;
  {$EXTERNALSYM ABS_UPHOT}
  ABS_UPPRESSED = 3;
  {$EXTERNALSYM ABS_UPPRESSED}
  ABS_UPDISABLED = 4;
  {$EXTERNALSYM ABS_UPDISABLED}
  ABS_DOWNNORMAL = 5;
  {$EXTERNALSYM ABS_DOWNNORMAL}
  ABS_DOWNHOT = 6;
  {$EXTERNALSYM ABS_DOWNHOT}
  ABS_DOWNPRESSED = 7;
  {$EXTERNALSYM ABS_DOWNPRESSED}
  ABS_DOWNDISABLED = 8;
  {$EXTERNALSYM ABS_DOWNDISABLED}
  ABS_LEFTNORMAL = 9;
  {$EXTERNALSYM ABS_LEFTNORMAL}
  ABS_LEFTHOT = 10;
  {$EXTERNALSYM ABS_LEFTHOT}
  ABS_LEFTPRESSED = 11;
  {$EXTERNALSYM ABS_LEFTPRESSED}
  ABS_LEFTDISABLED = 12;
  {$EXTERNALSYM ABS_LEFTDISABLED}
  ABS_RIGHTNORMAL = 13;
  {$EXTERNALSYM ABS_RIGHTNORMAL}
  ABS_RIGHTHOT = 14;
  {$EXTERNALSYM ABS_RIGHTHOT}
  ABS_RIGHTPRESSED = 15;
  {$EXTERNALSYM ABS_RIGHTPRESSED}
  ABS_RIGHTDISABLED = 16;
  {$EXTERNALSYM ABS_RIGHTDISABLED}
  { For Windows >= Vista }
  ABS_UPHOVER     = 17;
  {$EXTERNALSYM ABS_UPHOVER}
  ABS_DOWNHOVER     = 18;
  {$EXTERNALSYM ABS_DOWNHOVER}
  ABS_LEFTHOVER     = 19;
  {$EXTERNALSYM ABS_LEFTHOVER}
  ABS_RIGHTHOVER     = 20;
  {$EXTERNALSYM ABS_RIGHTHOVER}

type
  SCROLLBARSTATES = Integer;
  {$EXTERNALSYM SCROLLBARSTATES}
const
  SCROLLBARStateFiller0 = 0;
  {$EXTERNALSYM SCROLLBARStateFiller0}
  SCRBS_NORMAL = 1;
  {$EXTERNALSYM SCRBS_NORMAL}
  SCRBS_HOT = 2;
  {$EXTERNALSYM SCRBS_HOT}
  SCRBS_PRESSED = 3;
  {$EXTERNALSYM SCRBS_PRESSED}
  SCRBS_DISABLED = 4;
  {$EXTERNALSYM SCRBS_DISABLED}
  { For Windows >= Vista }
  SCRBS_HOVER     = 5;
  {$EXTERNALSYM SCRBS_HOVER}

type
  SIZEBOXSTATES = Integer;
  {$EXTERNALSYM SIZEBOXSTATES}
const
  SIZEBOXStateFiller0 = 0;
  {$EXTERNALSYM SIZEBOXStateFiller0}
  SZB_RIGHTALIGN = 1;
  {$EXTERNALSYM SZB_RIGHTALIGN}
  SZB_LEFTALIGN = 2;
  {$EXTERNALSYM SZB_LEFTALIGN}
  { For Windows >= Vista }
  SZB_TOPRIGHTALIGN     = 3;
  {$EXTERNALSYM SZB_TOPRIGHTALIGN}
  SZB_TOPLEFTALIGN     = 4;
  {$EXTERNALSYM SZB_TOPLEFTALIGN}
  SZB_HALFBOTTOMRIGHTALIGN     = 5;
  {$EXTERNALSYM SZB_HALFBOTTOMRIGHTALIGN}
  SZB_HALFBOTTOMLEFTALIGN     = 6;
  {$EXTERNALSYM SZB_HALFBOTTOMLEFTALIGN}
  SZB_HALFTOPRIGHTALIGN     = 7;
  {$EXTERNALSYM SZB_HALFTOPRIGHTALIGN}
  SZB_HALFTOPLEFTALIGN     = 8;
  {$EXTERNALSYM SZB_HALFTOPLEFTALIGN}

  
//
//  EDITSTYLE class parts and states
//
const
  VSCLASS_EDITSTYLE       = 'EDITSTYLE';
  {$EXTERNALSYM VSCLASS_EDITSTYLE}
  VSCLASS_EDIT    = 'EDIT';
  {$EXTERNALSYM VSCLASS_EDIT}

type
  EDITPARTS = Integer;
  {$EXTERNALSYM EDITPARTS}
const
  EDITPartFiller0 = 0;
  {$EXTERNALSYM EDITPartFiller0}
  EP_EDITTEXT = 1;
  {$EXTERNALSYM EP_EDITTEXT}
  EP_CARET = 2;
  {$EXTERNALSYM EP_CARET}
  { For Windows >= Vista }
  EP_BACKGROUND     = 3;
  {$EXTERNALSYM EP_BACKGROUND}
  EP_PASSWORD     = 4;
  {$EXTERNALSYM EP_PASSWORD}
  EP_BACKGROUNDWITHBORDER     = 5;
  {$EXTERNALSYM EP_BACKGROUNDWITHBORDER}
  EP_EDITBORDER_NOSCROLL     = 6;
  {$EXTERNALSYM EP_EDITBORDER_NOSCROLL}
  EP_EDITBORDER_HSCROLL     = 7;
  {$EXTERNALSYM EP_EDITBORDER_HSCROLL}
  EP_EDITBORDER_VSCROLL     = 8;
  {$EXTERNALSYM EP_EDITBORDER_VSCROLL}
  EP_EDITBORDER_HVSCROLL     = 9;
  {$EXTERNALSYM EP_EDITBORDER_HVSCROLL}

type
  EDITTEXTSTATES = Integer;
  {$EXTERNALSYM EDITTEXTSTATES}
const
  EDITTEXTStateFiller0 = 0;
  {$EXTERNALSYM EDITTEXTStateFiller0}
  ETS_NORMAL = 1;
  {$EXTERNALSYM ETS_NORMAL}
  ETS_HOT = 2;
  {$EXTERNALSYM ETS_HOT}
  ETS_SELECTED = 3;
  {$EXTERNALSYM ETS_SELECTED}
  ETS_DISABLED = 4;
  {$EXTERNALSYM ETS_DISABLED}
  ETS_FOCUSED = 5;
  {$EXTERNALSYM ETS_FOCUSED}
  ETS_READONLY = 6;
  {$EXTERNALSYM ETS_READONLY}
  ETS_ASSIST = 7;
  {$EXTERNALSYM ETS_ASSIST}
  { For Windows >= Vista }
  ETS_CUEBANNER     = 8;
  {$EXTERNALSYM ETS_CUEBANNER}

type
  { For Windows >= Vista }
  {$EXTERNALSYM BACKGROUNDSTATES}
  BACKGROUNDSTATES = Integer;
const
  {$EXTERNALSYM EBS_NORMAL}
  EBS_NORMAL     = 1;
  {$EXTERNALSYM EBS_HOT}
  EBS_HOT     = 2;
  {$EXTERNALSYM EBS_DISABLED}
  EBS_DISABLED     = 3;
  {$EXTERNALSYM EBS_FOCUSED}
  EBS_FOCUSED     = 4;
  {$EXTERNALSYM EBS_READONLY}
  EBS_READONLY     = 5;
  {$EXTERNALSYM EBS_ASSIST}
  EBS_ASSIST     = 6;

type
  { For Windows >= Vista }
  {$EXTERNALSYM BACKGROUNDWITHBORDERSTATES}
  BACKGROUNDWITHBORDERSTATES = Integer;
const
  {$EXTERNALSYM EBWBS_NORMAL}
  EBWBS_NORMAL     = 1;
  {$EXTERNALSYM EBWBS_HOT}
  EBWBS_HOT     = 2;
  {$EXTERNALSYM EBWBS_DISABLED}
  EBWBS_DISABLED     = 3;
  {$EXTERNALSYM EBWBS_FOCUSED}
  EBWBS_FOCUSED     = 4;

type
  { For Windows >= Vista }
  {$EXTERNALSYM EDITBORDER_NOSCROLLSTATES}
  EDITBORDER_NOSCROLLSTATES = Integer;
const
  {$EXTERNALSYM EPSN_NORMAL}
  EPSN_NORMAL     = 1;
  {$EXTERNALSYM EPSN_HOT}
  EPSN_HOT     = 2;
  {$EXTERNALSYM EPSN_FOCUSED}
  EPSN_FOCUSED     = 3;
  {$EXTERNALSYM EPSN_DISABLED}
  EPSN_DISABLED     = 4;

type
  { For Windows >= Vista }
  {$EXTERNALSYM EDITBORDER_HSCROLLSTATES}
  EDITBORDER_HSCROLLSTATES = Integer;
const
  {$EXTERNALSYM EPSH_NORMAL}
  EPSH_NORMAL     = 1;
  {$EXTERNALSYM EPSH_HOT}
  EPSH_HOT     = 2;
  {$EXTERNALSYM EPSH_FOCUSED}
  EPSH_FOCUSED     = 3;
  {$EXTERNALSYM EPSH_DISABLED}
  EPSH_DISABLED     = 4;

type
  { For Windows >= Vista }
  {$EXTERNALSYM EDITBORDER_VSCROLLSTATES}
  EDITBORDER_VSCROLLSTATES = Integer;
const
  {$EXTERNALSYM EPSV_NORMAL}
  EPSV_NORMAL     = 1;
  {$EXTERNALSYM EPSV_HOT}
  EPSV_HOT     = 2;
  {$EXTERNALSYM EPSV_FOCUSED}
  EPSV_FOCUSED     = 3;
  {$EXTERNALSYM EPSV_DISABLED}
  EPSV_DISABLED     = 4;

type
  { For Windows >= Vista }
  {$EXTERNALSYM EDITBORDER_HVSCROLLSTATES}
  EDITBORDER_HVSCROLLSTATES = Integer;
const
  {$EXTERNALSYM EPSHV_NORMAL}
  EPSHV_NORMAL     = 1;
  {$EXTERNALSYM EPSHV_HOT}
  EPSHV_HOT     = 2;
  {$EXTERNALSYM EPSHV_FOCUSED}
  EPSHV_FOCUSED     = 3;
  {$EXTERNALSYM EPSHV_DISABLED}
  EPSHV_DISABLED     = 4;


//
//  COMBOBOXSTYLE class parts and states
//
const
  VSCLASS_COMBOBOXSTYLE   = 'COMBOBOXSTYLE';
  {$EXTERNALSYM VSCLASS_COMBOBOXSTYLE}
  VSCLASS_COMBOBOX        = 'COMBOBOX';
  {$EXTERNALSYM VSCLASS_COMBOBOX}

type
  COMBOBOXPARTS = Integer;
  {$EXTERNALSYM COMBOBOXPARTS}
const
  COMBOBOXPartFiller0 = 0;
  {$EXTERNALSYM COMBOBOXPartFiller0}
  CP_DROPDOWNBUTTON = 1;
  {$EXTERNALSYM CP_DROPDOWNBUTTON}
  { For Windows >= Vista }
  CP_BACKGROUND     = 2;
  {$EXTERNALSYM CP_BACKGROUND}
  CP_TRANSPARENTBACKGROUND     = 3;
  {$EXTERNALSYM CP_TRANSPARENTBACKGROUND}
  CP_BORDER     = 4;
  {$EXTERNALSYM CP_BORDER}
  CP_READONLY     = 5;
  {$EXTERNALSYM CP_READONLY}
  CP_DROPDOWNBUTTONRIGHT     = 6;
  {$EXTERNALSYM CP_DROPDOWNBUTTONRIGHT}
  CP_DROPDOWNBUTTONLEFT     = 7;
  {$EXTERNALSYM CP_DROPDOWNBUTTONLEFT}
  CP_CUEBANNER     = 8;
  {$EXTERNALSYM CP_CUEBANNER}

type
  COMBOBOXSTATES = Integer;
  {$EXTERNALSYM COMBOBOXSTATES}
const
  COMBOBOXStateFiller0 = 0;
  {$EXTERNALSYM COMBOBOXStateFiller0}
  CBXS_NORMAL = 1;
  {$EXTERNALSYM CBXS_NORMAL}
  CBXS_HOT = 2;
  {$EXTERNALSYM CBXS_HOT}
  CBXS_PRESSED = 3;
  {$EXTERNALSYM CBXS_PRESSED}
  CBXS_DISABLED = 4;
  {$EXTERNALSYM CBXS_DISABLED}

type
  { For Windows >= Vista }
  {$EXTERNALSYM DROPDOWNBUTTONRIGHTSTATES}
  DROPDOWNBUTTONRIGHTSTATES = Integer;
const
  {$EXTERNALSYM CBXSR_NORMAL}
  CBXSR_NORMAL     = 1;
  {$EXTERNALSYM CBXSR_HOT}
  CBXSR_HOT     = 2;
  {$EXTERNALSYM CBXSR_PRESSED}
  CBXSR_PRESSED     = 3;
  {$EXTERNALSYM CBXSR_DISABLED}
  CBXSR_DISABLED     = 4;

type
  { For Windows >= Vista }
  {$EXTERNALSYM DROPDOWNBUTTONLEFTSTATES}
  DROPDOWNBUTTONLEFTSTATES = Integer;
const
  {$EXTERNALSYM CBXSL_NORMAL}
  CBXSL_NORMAL     = 1;
  {$EXTERNALSYM CBXSL_HOT}
  CBXSL_HOT     = 2;
  {$EXTERNALSYM CBXSL_PRESSED}
  CBXSL_PRESSED     = 3;
  {$EXTERNALSYM CBXSL_DISABLED}
  CBXSL_DISABLED     = 4;

type
  { For Windows >= Vista }
  {$EXTERNALSYM TRANSPARENTBACKGROUNDSTATES}
  TRANSPARENTBACKGROUNDSTATES = Integer;
const
  {$EXTERNALSYM CBTBS_NORMAL}
  CBTBS_NORMAL     = 1;
  {$EXTERNALSYM CBTBS_HOT}
  CBTBS_HOT     = 2;
  {$EXTERNALSYM CBTBS_DISABLED}
  CBTBS_DISABLED     = 3;
  {$EXTERNALSYM CBTBS_FOCUSED}
  CBTBS_FOCUSED     = 4;

type
  { For Windows >= Vista }
  {$EXTERNALSYM BORDERSTATES}
  BORDERSTATES = Integer;
const
  {$EXTERNALSYM CBB_NORMAL}
  CBB_NORMAL     = 1;
  {$EXTERNALSYM CBB_HOT}
  CBB_HOT     = 2;
  {$EXTERNALSYM CBB_FOCUSED}
  CBB_FOCUSED     = 3;
  {$EXTERNALSYM CBB_DISABLED}
  CBB_DISABLED     = 4;

type
  { For Windows >= Vista }
  {$EXTERNALSYM READONLYSTATES}
  READONLYSTATES = Integer;
const
  {$EXTERNALSYM CBRO_NORMAL}
  CBRO_NORMAL     = 1;
  {$EXTERNALSYM CBRO_HOT}
  CBRO_HOT     = 2;
  {$EXTERNALSYM CBRO_PRESSED}
  CBRO_PRESSED     = 3;
  {$EXTERNALSYM CBRO_DISABLED}
  CBRO_DISABLED     = 4;

type
  { For Windows >= Vista }
  {$EXTERNALSYM CUEBANNERSTATES}
  CUEBANNERSTATES = Integer;
const
  {$EXTERNALSYM CBCB_NORMAL}
  CBCB_NORMAL     = 1;
  {$EXTERNALSYM CBCB_HOT}
  CBCB_HOT     = 2;
  {$EXTERNALSYM CBCB_PRESSED}
  CBCB_PRESSED     = 3;
  {$EXTERNALSYM CBCB_DISABLED}
  CBCB_DISABLED     = 4;

  
//
//  CLOCK class parts and states
//
const
  VSCLASS_CLOCK   = 'CLOCK';
  {$EXTERNALSYM VSCLASS_CLOCK}

type
  CLOCKPARTS = Integer;
  {$EXTERNALSYM CLOCKPARTS}
const
  CLOCKPartFiller0 = 0;
  {$EXTERNALSYM CLOCKPartFiller0}
  CLP_TIME = 1;
  {$EXTERNALSYM CLP_TIME}

type
  CLOCKSTATES = Integer;
  {$EXTERNALSYM CLOCKSTATES}
const
  CLOCKStateFiller0 = 0;
  {$EXTERNALSYM CLOCKStateFiller0}
  CLS_NORMAL = 1;
  {$EXTERNALSYM CLS_NORMAL}
  { For Windows >= Windows 7 }
  CLS_HOT = 2;
  {$EXTERNALSYM CLS_HOT}
  CLS_PRESSED = 3;
  {$EXTERNALSYM CLS_PRESSED}

  
//
//  TRAYNOTIFY class parts and states
//
const
  VSCLASS_TRAYNOTIFY      = 'TRAYNOTIFY';
  {$EXTERNALSYM VSCLASS_TRAYNOTIFY}

type
  TRAYNOTIFYPARTS = Integer;
  {$EXTERNALSYM TRAYNOTIFYPARTS}
const
  TRAYNOTIFYPartFiller0 = 0;
  {$EXTERNALSYM TRAYNOTIFYPartFiller0}
  TNP_BACKGROUND = 1;
  {$EXTERNALSYM TNP_BACKGROUND}
  TNP_ANIMBACKGROUND = 2;
  {$EXTERNALSYM TNP_ANIMBACKGROUND}

  
//
//  TASKBAR class parts and states
//
const
  VSCLASS_TASKBAR = 'TASKBAR';
  {$EXTERNALSYM VSCLASS_TASKBAR}

type
  TASKBARPARTS = Integer;
  {$EXTERNALSYM TASKBARPARTS}
const
  TASKBARPartFiller0 = 0;
  {$EXTERNALSYM TASKBARPartFiller0}
  TBP_BACKGROUNDBOTTOM = 1;
  {$EXTERNALSYM TBP_BACKGROUNDBOTTOM}
  TBP_BACKGROUNDRIGHT = 2;
  {$EXTERNALSYM TBP_BACKGROUNDRIGHT}
  TBP_BACKGROUNDTOP = 3;
  {$EXTERNALSYM TBP_BACKGROUNDTOP}
  TBP_BACKGROUNDLEFT = 4;
  {$EXTERNALSYM TBP_BACKGROUNDLEFT}
  TBP_SIZINGBARBOTTOM = 5;
  {$EXTERNALSYM TBP_SIZINGBARBOTTOM}
  TBP_SIZINGBARRIGHT = 6;
  {$EXTERNALSYM TBP_SIZINGBARRIGHT}
  TBP_SIZINGBARTOP = 7;
  {$EXTERNALSYM TBP_SIZINGBARTOP}
  TBP_SIZINGBARLEFT = 8;
  {$EXTERNALSYM TBP_SIZINGBARLEFT}

  
//
//  TASKBAND class parts and states
//
const
  VSCLASS_TASKBAND        = 'TASKBAND';
  {$EXTERNALSYM VSCLASS_TASKBAND}

type
  TASKBANDPARTS = Integer;
  {$EXTERNALSYM TASKBANDPARTS}
const
  TASKBANDPartFiller0 = 0;
  {$EXTERNALSYM TASKBANDPartFiller0}
  TDP_GROUPCOUNT = 1;
  {$EXTERNALSYM TDP_GROUPCOUNT}
  TDP_FLASHBUTTON = 2;
  {$EXTERNALSYM TDP_FLASHBUTTON}
  TDP_FLASHBUTTONGROUPMENU = 3;
  {$EXTERNALSYM TDP_FLASHBUTTONGROUPMENU}

  
//
//  STARTPANEL class parts and states
//
const
  {$EXTERNALSYM VSCLASS_STARTPANEL}
  VSCLASS_STARTPANEL      = 'STARTPANEL';

type
  STARTPANELPARTS = Integer;
  {$EXTERNALSYM STARTPANELPARTS}
const
  STARTPANELPartFiller0 = 0;
  {$EXTERNALSYM STARTPANELPartFiller0}
  SPP_USERPANE = 1;
  {$EXTERNALSYM SPP_USERPANE}
  SPP_MOREPROGRAMS = 2;
  {$EXTERNALSYM SPP_MOREPROGRAMS}
  SPP_MOREPROGRAMSARROW = 3;
  {$EXTERNALSYM SPP_MOREPROGRAMSARROW}
  SPP_PROGLIST = 4;
  {$EXTERNALSYM SPP_PROGLIST}
  SPP_PROGLISTSEPARATOR = 5;
  {$EXTERNALSYM SPP_PROGLISTSEPARATOR}
  SPP_PLACESLIST = 6;
  {$EXTERNALSYM SPP_PLACESLIST}
  SPP_PLACESLISTSEPARATOR = 7;
  {$EXTERNALSYM SPP_PLACESLISTSEPARATOR}
  SPP_LOGOFF = 8;
  {$EXTERNALSYM SPP_LOGOFF}
  SPP_LOGOFFBUTTONS = 9;
  {$EXTERNALSYM SPP_LOGOFFBUTTONS}
  SPP_USERPICTURE = 10;
  {$EXTERNALSYM SPP_USERPICTURE}
  SPP_PREVIEW = 11;
  {$EXTERNALSYM SPP_PREVIEW}
  { For Windows >= Vista }
  SPP_MOREPROGRAMSTAB     = 12;
  {$EXTERNALSYM SPP_MOREPROGRAMSTAB}
  SPP_NSCHOST     = 13;
  {$EXTERNALSYM SPP_NSCHOST}
  SPP_SOFTWAREEXPLORER     = 14;
  {$EXTERNALSYM SPP_SOFTWAREEXPLORER}
  SPP_OPENBOX     = 15;
  {$EXTERNALSYM SPP_OPENBOX}
  SPP_SEARCHVIEW     = 16;
  {$EXTERNALSYM SPP_SEARCHVIEW}
  SPP_MOREPROGRAMSARROWBACK     = 17;
  {$EXTERNALSYM SPP_MOREPROGRAMSARROWBACK}
  SPP_TOPMATCH     = 18;
  {$EXTERNALSYM SPP_TOPMATCH}
  SPP_LOGOFFSPLITBUTTONDROPDOWN     = 19;
  {$EXTERNALSYM SPP_LOGOFFSPLITBUTTONDROPDOWN}

type
  { For Windows >= Vista }
  {$EXTERNALSYM MOREPROGRAMSTABSTATES}
  MOREPROGRAMSTABSTATES = Integer;
const
  {$EXTERNALSYM SPMPT_NORMAL}
  SPMPT_NORMAL     = 1;
  {$EXTERNALSYM SPMPT_HOT}
  SPMPT_HOT     = 2;
  {$EXTERNALSYM SPMPT_SELECTED}
  SPMPT_SELECTED     = 3;
  {$EXTERNALSYM SPMPT_DISABLED}
  SPMPT_DISABLED     = 4;
  {$EXTERNALSYM SPMPT_FOCUSED}
  SPMPT_FOCUSED     = 5;
  
type
  MOREPROGRAMSARROWSTATES = Integer;
  {$EXTERNALSYM MOREPROGRAMSARROWSTATES}
const
  MOREPROGRAMSARROWStateFiller0 = 0;
  {$EXTERNALSYM MOREPROGRAMSARROWStateFiller0}
  SPS_NORMAL = 1;
  {$EXTERNALSYM SPS_NORMAL}
  SPS_HOT = 2;
  {$EXTERNALSYM SPS_HOT}
  SPS_PRESSED = 3;
  {$EXTERNALSYM SPS_PRESSED}

type
  { For Windows >= Vista }
  {$EXTERNALSYM SOFTWAREEXPLORERSTATES}
  SOFTWAREEXPLORERSTATES = Integer;
const
  {$EXTERNALSYM SPSE_NORMAL}
  SPSE_NORMAL     = 1;
  {$EXTERNALSYM SPSE_HOT}
  SPSE_HOT     = 2;
  {$EXTERNALSYM SPSE_SELECTED}
  SPSE_SELECTED     = 3;
  {$EXTERNALSYM SPSE_DISABLED}
  SPSE_DISABLED     = 4;
  {$EXTERNALSYM SPSE_FOCUSED}
  SPSE_FOCUSED     = 5;

type
  { For Windows >= Vista }
  {$EXTERNALSYM OPENBOXSTATES}
  OPENBOXSTATES = Integer;
const
  {$EXTERNALSYM SPOB_NORMAL}
  SPOB_NORMAL     = 1;
  {$EXTERNALSYM SPOB_HOT}
  SPOB_HOT     = 2;
  {$EXTERNALSYM SPOB_SELECTED}
  SPOB_SELECTED     = 3;
  {$EXTERNALSYM SPOB_DISABLED}
  SPOB_DISABLED     = 4;
  {$EXTERNALSYM SPOB_FOCUSED}
  SPOB_FOCUSED     = 5;

type
  { For Windows >= Vista }
  {$EXTERNALSYM MOREPROGRAMSARROWBACKSTATES}
  MOREPROGRAMSARROWBACKSTATES = Integer;
const
  {$EXTERNALSYM SPSB_NORMAL}
  SPSB_NORMAL     = 1;
  {$EXTERNALSYM SPSB_HOT}
  SPSB_HOT     = 2;
  {$EXTERNALSYM SPSB_PRESSED}
  SPSB_PRESSED     = 3;

type
  LOGOFFBUTTONSSTATES = Integer;
  {$EXTERNALSYM LOGOFFBUTTONSSTATES}
const
  LOGOFFBUTTONSStateFiller0 = 0;
  {$EXTERNALSYM LOGOFFBUTTONSStateFiller0}
  SPLS_NORMAL = 1;
  {$EXTERNALSYM SPLS_NORMAL}
  SPLS_HOT = 2;
  {$EXTERNALSYM SPLS_HOT}
  SPLS_PRESSED = 3;
  {$EXTERNALSYM SPLS_PRESSED}

  
//
//  EXPLORERBARSTYLE class parts and states
//
const
  VSCLASS_EXPLORERBARSTYLE        = 'EXPLORERBARSTYLE';
  {$EXTERNALSYM VSCLASS_EXPLORERBARSTYLE}
  VSCLASS_EXPLORERBAR     = 'EXPLORERBAR';
  {$EXTERNALSYM VSCLASS_EXPLORERBAR}

type
  EXPLORERBARPARTS = Integer;
  {$EXTERNALSYM EXPLORERBARPARTS}
const
  EXPLORERBARPartFiller0 = 0;
  {$EXTERNALSYM EXPLORERBARPartFiller0}
  EBP_HEADERBACKGROUND = 1;
  {$EXTERNALSYM EBP_HEADERBACKGROUND}
  EBP_HEADERCLOSE = 2;
  {$EXTERNALSYM EBP_HEADERCLOSE}
  EBP_HEADERPIN = 3;
  {$EXTERNALSYM EBP_HEADERPIN}
  EBP_IEBARMENU = 4;
  {$EXTERNALSYM EBP_IEBARMENU}
  EBP_NORMALGROUPBACKGROUND = 5;
  {$EXTERNALSYM EBP_NORMALGROUPBACKGROUND}
  EBP_NORMALGROUPCOLLAPSE = 6;
  {$EXTERNALSYM EBP_NORMALGROUPCOLLAPSE}
  EBP_NORMALGROUPEXPAND = 7;
  {$EXTERNALSYM EBP_NORMALGROUPEXPAND}
  EBP_NORMALGROUPHEAD = 8;
  {$EXTERNALSYM EBP_NORMALGROUPHEAD}
  EBP_SPECIALGROUPBACKGROUND = 9;
  {$EXTERNALSYM EBP_SPECIALGROUPBACKGROUND}
  EBP_SPECIALGROUPCOLLAPSE = 10;
  {$EXTERNALSYM EBP_SPECIALGROUPCOLLAPSE}
  EBP_SPECIALGROUPEXPAND = 11;
  {$EXTERNALSYM EBP_SPECIALGROUPEXPAND}
  EBP_SPECIALGROUPHEAD = 12;
  {$EXTERNALSYM EBP_SPECIALGROUPHEAD}

type
  HEADERCLOSESTATES = Integer;
  {$EXTERNALSYM HEADERCLOSESTATES}
const
  HEADERCLOSEStateFiller0 = 0;
  {$EXTERNALSYM HEADERCLOSEStateFiller0}
  EBHC_NORMAL = 1;
  {$EXTERNALSYM EBHC_NORMAL}
  EBHC_HOT = 2;
  {$EXTERNALSYM EBHC_HOT}
  EBHC_PRESSED = 3;
  {$EXTERNALSYM EBHC_PRESSED}

type
  HEADERPINSTATES = Integer;
  {$EXTERNALSYM HEADERPINSTATES}
const
  HEADERPINStateFiller0 = 0;
  {$EXTERNALSYM HEADERPINStateFiller0}
  EBHP_NORMAL = 1;
  {$EXTERNALSYM EBHP_NORMAL}
  EBHP_HOT = 2;
  {$EXTERNALSYM EBHP_HOT}
  EBHP_PRESSED = 3;
  {$EXTERNALSYM EBHP_PRESSED}
  EBHP_SELECTEDNORMAL = 4;
  {$EXTERNALSYM EBHP_SELECTEDNORMAL}
  EBHP_SELECTEDHOT = 5;
  {$EXTERNALSYM EBHP_SELECTEDHOT}
  EBHP_SELECTEDPRESSED = 6;
  {$EXTERNALSYM EBHP_SELECTEDPRESSED}

type
  IEBARMENUSTATES = Integer;
  {$EXTERNALSYM IEBARMENUSTATES}
const
  IEBARMENUStateFiller0 = 0;
  {$EXTERNALSYM IEBARMENUStateFiller0}
  EBM_NORMAL = 1;
  {$EXTERNALSYM EBM_NORMAL}
  EBM_HOT = 2;
  {$EXTERNALSYM EBM_HOT}
  EBM_PRESSED = 3;
  {$EXTERNALSYM EBM_PRESSED}

type
  NORMALGROUPCOLLAPSESTATES = Integer;
  {$EXTERNALSYM NORMALGROUPCOLLAPSESTATES}
const
  NORMALGROUPCOLLAPSEStateFiller0 = 0;
  {$EXTERNALSYM NORMALGROUPCOLLAPSEStateFiller0}
  EBNGC_NORMAL = 1;
  {$EXTERNALSYM EBNGC_NORMAL}
  EBNGC_HOT = 2;
  {$EXTERNALSYM EBNGC_HOT}
  EBNGC_PRESSED = 3;
  {$EXTERNALSYM EBNGC_PRESSED}

type
  NORMALGROUPEXPANDSTATES = Integer;
  {$EXTERNALSYM NORMALGROUPEXPANDSTATES}
const
  NORMALGROUPEXPANDStateFiller0 = 0;
  {$EXTERNALSYM NORMALGROUPEXPANDStateFiller0}
  EBNGE_NORMAL = 1;
  {$EXTERNALSYM EBNGE_NORMAL}
  EBNGE_HOT = 2;
  {$EXTERNALSYM EBNGE_HOT}
  EBNGE_PRESSED = 3;
  {$EXTERNALSYM EBNGE_PRESSED}

type
  SPECIALGROUPCOLLAPSESTATES = Integer;
  {$EXTERNALSYM SPECIALGROUPCOLLAPSESTATES}
const
  SPECIALGROUPCOLLAPSEStateFiller0 = 0;
  {$EXTERNALSYM SPECIALGROUPCOLLAPSEStateFiller0}
  EBSGC_NORMAL = 1;
  {$EXTERNALSYM EBSGC_NORMAL}
  EBSGC_HOT = 2;
  {$EXTERNALSYM EBSGC_HOT}
  EBSGC_PRESSED = 3;
  {$EXTERNALSYM EBSGC_PRESSED}

type
  SPECIALGROUPEXPANDSTATES = Integer;
  {$EXTERNALSYM SPECIALGROUPEXPANDSTATES}
const
  SPECIALGROUPEXPANDStateFiller0 = 0;
  {$EXTERNALSYM SPECIALGROUPEXPANDStateFiller0}
  EBSGE_NORMAL = 1;
  {$EXTERNALSYM EBSGE_NORMAL}
  EBSGE_HOT = 2;
  {$EXTERNALSYM EBSGE_HOT}
  EBSGE_PRESSED = 3;
  {$EXTERNALSYM EBSGE_PRESSED}

  
//
//  MENUBAND class parts and states
//
const
  VSCLASS_MENUBAND        = 'MENUBAND';
  {$EXTERNALSYM VSCLASS_MENUBAND}

type
  MENUBANDPARTS = Integer;
  {$EXTERNALSYM MENUBANDPARTS}
const
  MENUBANDPartFiller0 = 0;
  {$EXTERNALSYM MENUBANDPartFiller0}
  MDP_NEWAPPBUTTON = 1;
  {$EXTERNALSYM MDP_NEWAPPBUTTON}
  MDP_SEPERATOR = 2;
  {$EXTERNALSYM MDP_SEPERATOR}

type
  MENUBANDSTATES = Integer;
  {$EXTERNALSYM MENUBANDSTATES}
const
  MENUBANDStateFiller0 = 0;
  {$EXTERNALSYM MENUBANDStateFiller0}
  MDS_NORMAL = 1;
  {$EXTERNALSYM MDS_NORMAL}
  MDS_HOT = 2;
  {$EXTERNALSYM MDS_HOT}
  MDS_PRESSED = 3;
  {$EXTERNALSYM MDS_PRESSED}
  MDS_DISABLED = 4;
  {$EXTERNALSYM MDS_DISABLED}
  MDS_CHECKED = 5;
  {$EXTERNALSYM MDS_CHECKED}
  MDS_HOTCHECKED = 6;
  {$EXTERNALSYM MDS_HOTCHECKED}


// ** The following declarations require Windows >= Vista **


//
//  AEROWIZARDSTYLE class parts and states
//
const
  {$EXTERNALSYM VSCLASS_AEROWIZARDSTYLE}
  VSCLASS_AEROWIZARDSTYLE = 'AEROWIZARDSTYLE';
  {$EXTERNALSYM VSCLASS_AEROWIZARD}
  VSCLASS_AEROWIZARD      = 'AEROWIZARD';

type
  {$EXTERNALSYM AEROWIZARDPARTS}
  AEROWIZARDPARTS = Integer;
const
  {$EXTERNALSYM AW_TITLEBAR}
  AW_TITLEBAR     = 1;
  {$EXTERNALSYM AW_HEADERAREA}
  AW_HEADERAREA     = 2;
  {$EXTERNALSYM AW_CONTENTAREA}
  AW_CONTENTAREA     = 3;
  {$EXTERNALSYM AW_COMMANDAREA}
  AW_COMMANDAREA     = 4;
  {$EXTERNALSYM AW_BUTTON}
  AW_BUTTON     = 5;

type
  {$EXTERNALSYM AEROWIZARDSTYLEPARTS}
  AEROWIZARDSTYLEPARTS = AEROWIZARDPARTS;

type
  {$EXTERNALSYM TITLEBARSTATES}
  TITLEBARSTATES = Integer;
const
  {$EXTERNALSYM AW_S_TITLEBAR_ACTIVE}
  AW_S_TITLEBAR_ACTIVE     = 1;
  {$EXTERNALSYM AW_S_TITLEBAR_INACTIVE}
  AW_S_TITLEBAR_INACTIVE     = 2;

type
  {$EXTERNALSYM HEADERAREASTATES}
  HEADERAREASTATES = Integer;
const
  {$EXTERNALSYM AW_S_HEADERAREA_NOMARGIN}
  AW_S_HEADERAREA_NOMARGIN     = 1;

type
  {$EXTERNALSYM CONTENTAREASTATES}
  CONTENTAREASTATES = Integer;
const
  {$EXTERNALSYM AW_S_CONTENTAREA_NOMARGIN}
  AW_S_CONTENTAREA_NOMARGIN     = 1;


//
//  COMMUNICATIONSSTYLE class parts and states
//
const
  {$EXTERNALSYM VSCLASS_COMMUNICATIONSSTYLE}
  VSCLASS_COMMUNICATIONSSTYLE     = 'COMMUNICATIONSSTYLE';
  {$EXTERNALSYM VSCLASS_COMMUNICATIONS}
  VSCLASS_COMMUNICATIONS  = 'COMMUNICATIONS';

type
  {$EXTERNALSYM COMMUNICATIONSPARTS}
  COMMUNICATIONSPARTS = Integer;
const
  {$EXTERNALSYM CSST_TAB}
  CSST_TAB     = 1;

type
  {$EXTERNALSYM TABSTATES}
  TABSTATES = Integer;
const
  {$EXTERNALSYM CSTB_NORMAL}
  CSTB_NORMAL     = 1;
  {$EXTERNALSYM CSTB_HOT}
  CSTB_HOT     = 2;
  {$EXTERNALSYM CSTB_SELECTED}
  CSTB_SELECTED     = 3;


//
//  CONTROLPANELSTYLE class parts and states
//
const
  {$EXTERNALSYM VSCLASS_CONTROLPANELSTYLE}
  VSCLASS_CONTROLPANELSTYLE       = 'CONTROLPANELSTYLE';
  {$EXTERNALSYM VSCLASS_CONTROLPANEL}
  VSCLASS_CONTROLPANEL    = 'CONTROLPANEL';

type
  {$EXTERNALSYM CONTROLPANELPARTS}
  CONTROLPANELPARTS = Integer;
const
  {$EXTERNALSYM CPANEL_NAVIGATIONPANE}
  CPANEL_NAVIGATIONPANE     = 1;
  {$EXTERNALSYM CPANEL_CONTENTPANE}
  CPANEL_CONTENTPANE     = 2;
  {$EXTERNALSYM CPANEL_NAVIGATIONPANELABEL}
  CPANEL_NAVIGATIONPANELABEL     = 3;
  {$EXTERNALSYM CPANEL_CONTENTPANELABEL}
  CPANEL_CONTENTPANELABEL     = 4;
  {$EXTERNALSYM CPANEL_TITLE}
  CPANEL_TITLE     = 5;
  {$EXTERNALSYM CPANEL_BODYTEXT}
  CPANEL_BODYTEXT     = 6;
  {$EXTERNALSYM CPANEL_HELPLINK}
  CPANEL_HELPLINK     = 7;
  {$EXTERNALSYM CPANEL_TASKLINK}
  CPANEL_TASKLINK     = 8;
  {$EXTERNALSYM CPANEL_GROUPTEXT}
  CPANEL_GROUPTEXT     = 9;
  {$EXTERNALSYM CPANEL_CONTENTLINK}
  CPANEL_CONTENTLINK     = 10;
  {$EXTERNALSYM CPANEL_SECTIONTITLELINK}
  CPANEL_SECTIONTITLELINK     = 11;
  {$EXTERNALSYM CPANEL_LARGECOMMANDAREA}
  CPANEL_LARGECOMMANDAREA     = 12;
  {$EXTERNALSYM CPANEL_SMALLCOMMANDAREA}
  CPANEL_SMALLCOMMANDAREA     = 13;
  {$EXTERNALSYM CPANEL_BUTTON}
  CPANEL_BUTTON     = 14;
  {$EXTERNALSYM CPANEL_MESSAGETEXT}
  CPANEL_MESSAGETEXT     = 15;
  {$EXTERNALSYM CPANEL_NAVIGATIONPANELINE}
  CPANEL_NAVIGATIONPANELINE     = 16;
  {$EXTERNALSYM CPANEL_CONTENTPANELINE}
  CPANEL_CONTENTPANELINE     = 17;
  {$EXTERNALSYM CPANEL_BANNERAREA}
  CPANEL_BANNERAREA     = 18;
  {$EXTERNALSYM CPANEL_BODYTITLE}
  CPANEL_BODYTITLE     = 19;

type
  {$EXTERNALSYM HELPLINKSTATES}
  HELPLINKSTATES = Integer;
const
  {$EXTERNALSYM CPHL_NORMAL}
  CPHL_NORMAL     = 1;
  {$EXTERNALSYM CPHL_HOT}
  CPHL_HOT     = 2;
  {$EXTERNALSYM CPHL_PRESSED}
  CPHL_PRESSED     = 3;
  {$EXTERNALSYM CPHL_DISABLED}
  CPHL_DISABLED     = 4;

type
  {$EXTERNALSYM TASKLINKSTATES}
  TASKLINKSTATES = Integer;
const
  {$EXTERNALSYM CPTL_NORMAL}
  CPTL_NORMAL     = 1;
  {$EXTERNALSYM CPTL_HOT}
  CPTL_HOT     = 2;
  {$EXTERNALSYM CPTL_PRESSED}
  CPTL_PRESSED     = 3;
  {$EXTERNALSYM CPTL_DISABLED}
  CPTL_DISABLED     = 4;
  {$EXTERNALSYM CPTL_PAGE}
  CPTL_PAGE     = 5;

type
  {$EXTERNALSYM CONTENTLINKSTATES}
  CONTENTLINKSTATES = Integer;
const
  {$EXTERNALSYM CPCL_NORMAL}
  CPCL_NORMAL     = 1;
  {$EXTERNALSYM CPCL_HOT}
  CPCL_HOT     = 2;
  {$EXTERNALSYM CPCL_PRESSED}
  CPCL_PRESSED     = 3;
  {$EXTERNALSYM CPCL_DISABLED}
  CPCL_DISABLED     = 4;

type
  {$EXTERNALSYM SECTIONTITLELINKSTATES}
  SECTIONTITLELINKSTATES = Integer;
const
  {$EXTERNALSYM CPSTL_NORMAL}
  CPSTL_NORMAL     = 1;
  {$EXTERNALSYM CPSTL_HOT}
  CPSTL_HOT     = 2;


//
//  DATEPICKERSTYLE class parts and states
//
const
  {$EXTERNALSYM VSCLASS_DATEPICKERSTYLE}
  VSCLASS_DATEPICKERSTYLE = 'DATEPICKERSTYLE';
  {$EXTERNALSYM VSCLASS_DATEPICKER}
  VSCLASS_DATEPICKER      = 'DATEPICKER';

type
  {$EXTERNALSYM DATEPICKERPARTS}
  DATEPICKERPARTS = Integer; 
const
  {$EXTERNALSYM DP_DATETEXT}
  DP_DATETEXT     = 1; 
  {$EXTERNALSYM DP_DATEBORDER}
  DP_DATEBORDER     = 2; 
  {$EXTERNALSYM DP_SHOWCALENDARBUTTONRIGHT}
  DP_SHOWCALENDARBUTTONRIGHT     = 3; 

type
  {$EXTERNALSYM DATETEXTSTATES}
  DATETEXTSTATES = Integer;
const
  {$EXTERNALSYM DPDT_NORMAL}
  DPDT_NORMAL     = 1;
  {$EXTERNALSYM DPDT_DISABLED}
  DPDT_DISABLED     = 2;
  {$EXTERNALSYM DPDT_SELECTED}
  DPDT_SELECTED     = 3;

type
  {$EXTERNALSYM DATEBORDERSTATES}
  DATEBORDERSTATES = Integer;
const
  {$EXTERNALSYM DPDB_NORMAL}
  DPDB_NORMAL     = 1;
  {$EXTERNALSYM DPDB_HOT}
  DPDB_HOT     = 2;
  {$EXTERNALSYM DPDB_FOCUSED}
  DPDB_FOCUSED     = 3;
  {$EXTERNALSYM DPDB_DISABLED}
  DPDB_DISABLED     = 4;

type
  {$EXTERNALSYM SHOWCALENDARBUTTONRIGHTSTATES}
  SHOWCALENDARBUTTONRIGHTSTATES = Integer;
const
  {$EXTERNALSYM DPSCBR_NORMAL}
  DPSCBR_NORMAL     = 1;
  {$EXTERNALSYM DPSCBR_HOT}
  DPSCBR_HOT     = 2;
  {$EXTERNALSYM DPSCBR_PRESSED}
  DPSCBR_PRESSED     = 3;
  {$EXTERNALSYM DPSCBR_DISABLED}
  DPSCBR_DISABLED     = 4;


// 
//  DRAGDROPSTYLE class parts and states
//
const
  {$EXTERNALSYM VSCLASS_DRAGDROPSTYLE}
  VSCLASS_DRAGDROPSTYLE   = 'DRAGDROPSTYLE';
  {$EXTERNALSYM VSCLASS_DRAGDROP}
  VSCLASS_DRAGDROP        = 'DRAGDROP';

type
  {$EXTERNALSYM DRAGDROPPARTS}
  DRAGDROPPARTS = Integer;
const
  {$EXTERNALSYM DD_COPY}
  DD_COPY     = 1;
  {$EXTERNALSYM DD_MOVE}
  DD_MOVE     = 2;
  {$EXTERNALSYM DD_UPDATEMETADATA}
  DD_UPDATEMETADATA     = 3;
  {$EXTERNALSYM DD_CREATELINK}
  DD_CREATELINK     = 4;
  {$EXTERNALSYM DD_WARNING}
  DD_WARNING     = 5;
  {$EXTERNALSYM DD_NONE}
  DD_NONE     = 6;
  {$EXTERNALSYM DD_IMAGEBG}
  DD_IMAGEBG     = 7;
  {$EXTERNALSYM DD_TEXTBG}
  DD_TEXTBG     = 8;

type
  {$EXTERNALSYM COPYSTATES}
  COPYSTATES = Integer;
const
  {$EXTERNALSYM DDCOPY_HIGHLIGHT}
  DDCOPY_HIGHLIGHT     = 1;
  {$EXTERNALSYM DDCOPY_NOHIGHLIGHT}
  DDCOPY_NOHIGHLIGHT     = 2;

type
  {$EXTERNALSYM MOVESTATES}
  MOVESTATES = Integer;
const
  {$EXTERNALSYM DDMOVE_HIGHLIGHT}
  DDMOVE_HIGHLIGHT     = 1;
  {$EXTERNALSYM DDMOVE_NOHIGHLIGHT}
  DDMOVE_NOHIGHLIGHT     = 2;

type
  {$EXTERNALSYM UPDATEMETADATASTATES}
  UPDATEMETADATASTATES = Integer;
const
  {$EXTERNALSYM DDUPDATEMETADATA_HIGHLIGHT}
  DDUPDATEMETADATA_HIGHLIGHT     = 1;
  {$EXTERNALSYM DDUPDATEMETADATA_NOHIGHLIGHT}
  DDUPDATEMETADATA_NOHIGHLIGHT     = 2;

type
  {$EXTERNALSYM CREATELINKSTATES}
  CREATELINKSTATES = Integer;
const
  {$EXTERNALSYM DDCREATELINK_HIGHLIGHT}
  DDCREATELINK_HIGHLIGHT     = 1;
  {$EXTERNALSYM DDCREATELINK_NOHIGHLIGHT}
  DDCREATELINK_NOHIGHLIGHT     = 2;

type
  {$EXTERNALSYM WARNINGSTATES}
  WARNINGSTATES = Integer;
const
  {$EXTERNALSYM DDWARNING_HIGHLIGHT}
  DDWARNING_HIGHLIGHT     = 1;
  {$EXTERNALSYM DDWARNING_NOHIGHLIGHT}
  DDWARNING_NOHIGHLIGHT     = 2;

type
  {$EXTERNALSYM NONESTATES}
  NONESTATES = Integer;
const
  {$EXTERNALSYM DDNONE_HIGHLIGHT}
  DDNONE_HIGHLIGHT     = 1;
  {$EXTERNALSYM DDNONE_NOHIGHLIGHT}
  DDNONE_NOHIGHLIGHT     = 2;


//
//  FLYOUTSTYLE class parts and states
//
const 
  {$EXTERNALSYM VSCLASS_FLYOUTSTYLE}
  VSCLASS_FLYOUTSTYLE     = 'FLYOUTSTYLE'; 
  {$EXTERNALSYM VSCLASS_FLYOUT}
  VSCLASS_FLYOUT  = 'FLYOUT'; 

type
  {$EXTERNALSYM FLYOUTPARTS}
  FLYOUTPARTS = Integer; 
const
  {$EXTERNALSYM FLYOUT_HEADER}
  FLYOUT_HEADER     = 1; 
  {$EXTERNALSYM FLYOUT_BODY}
  FLYOUT_BODY     = 2; 
  {$EXTERNALSYM FLYOUT_LABEL}
  FLYOUT_LABEL     = 3; 
  {$EXTERNALSYM FLYOUT_LINK}
  FLYOUT_LINK     = 4; 
  {$EXTERNALSYM FLYOUT_DIVIDER}
  FLYOUT_DIVIDER     = 5; 
  {$EXTERNALSYM FLYOUT_WINDOW}
  FLYOUT_WINDOW     = 6; 
  {$EXTERNALSYM FLYOUT_LINKAREA}
  FLYOUT_LINKAREA     = 7; 
  {$EXTERNALSYM FLYOUT_LINKHEADER}
  FLYOUT_LINKHEADER     = 8; 

type
  {$EXTERNALSYM LABELSTATES}
  LABELSTATES = Integer;
const
  {$EXTERNALSYM FLS_NORMAL}
  FLS_NORMAL     = 1;
  {$EXTERNALSYM FLS_SELECTED}
  FLS_SELECTED     = 2;
  {$EXTERNALSYM FLS_EMPHASIZED}
  FLS_EMPHASIZED     = 3;
  {$EXTERNALSYM FLS_DISABLED}
  FLS_DISABLED     = 4;

type
  {$EXTERNALSYM LINKSTATES}
  LINKSTATES = Integer;
const
  {$EXTERNALSYM FLYOUTLINK_NORMAL}
  FLYOUTLINK_NORMAL     = 1;
  {$EXTERNALSYM FLYOUTLINK_HOVER}
  FLYOUTLINK_HOVER     = 2;

type
  {$EXTERNALSYM BODYSTATES}
  BODYSTATES = Integer;
const
  {$EXTERNALSYM FBS_NORMAL}
  FBS_NORMAL     = 1;
  {$EXTERNALSYM FBS_EMPHASIZED}
  FBS_EMPHASIZED     = 2;

type
  {$EXTERNALSYM LINKHEADERSTATES}
  LINKHEADERSTATES = Integer;
const
  {$EXTERNALSYM FLH_NORMAL}
  FLH_NORMAL     = 1;
  {$EXTERNALSYM FLH_HOVER}
  FLH_HOVER     = 2;


//
//  LISTBOXSTYLE class parts and states
//
const
  {$EXTERNALSYM VSCLASS_LISTBOXSTYLE}
  VSCLASS_LISTBOXSTYLE    = 'LISTBOXSTYLE';
  {$EXTERNALSYM VSCLASS_LISTBOX}
  VSCLASS_LISTBOX = 'LISTBOX';

type
  {$EXTERNALSYM LISTBOXPARTS}
  LISTBOXPARTS = Integer;
const
  {$EXTERNALSYM LBCP_BORDER_HSCROLL}
  LBCP_BORDER_HSCROLL     = 1;
  {$EXTERNALSYM LBCP_BORDER_HVSCROLL}
  LBCP_BORDER_HVSCROLL     = 2;
  {$EXTERNALSYM LBCP_BORDER_NOSCROLL}
  LBCP_BORDER_NOSCROLL     = 3;
  {$EXTERNALSYM LBCP_BORDER_VSCROLL}
  LBCP_BORDER_VSCROLL     = 4;
  {$EXTERNALSYM LBCP_ITEM}
  LBCP_ITEM     = 5;

type
  {$EXTERNALSYM BORDER_HSCROLLSTATES}
  BORDER_HSCROLLSTATES = Integer;
const
  {$EXTERNALSYM LBPSH_NORMAL}
  LBPSH_NORMAL     = 1;
  {$EXTERNALSYM LBPSH_FOCUSED}
  LBPSH_FOCUSED     = 2;
  {$EXTERNALSYM LBPSH_HOT}
  LBPSH_HOT     = 3;
  {$EXTERNALSYM LBPSH_DISABLED}
  LBPSH_DISABLED     = 4;

type
  {$EXTERNALSYM BORDER_HVSCROLLSTATES}
  BORDER_HVSCROLLSTATES = Integer;
const
  {$EXTERNALSYM LBPSHV_NORMAL}
  LBPSHV_NORMAL     = 1;
  {$EXTERNALSYM LBPSHV_FOCUSED}
  LBPSHV_FOCUSED     = 2;
  {$EXTERNALSYM LBPSHV_HOT}
  LBPSHV_HOT     = 3;
  {$EXTERNALSYM LBPSHV_DISABLED}
  LBPSHV_DISABLED     = 4;

type
  {$EXTERNALSYM BORDER_NOSCROLLSTATES}
  BORDER_NOSCROLLSTATES = Integer;
const
  {$EXTERNALSYM LBPSN_NORMAL}
  LBPSN_NORMAL     = 1;
  {$EXTERNALSYM LBPSN_FOCUSED}
  LBPSN_FOCUSED     = 2;
  {$EXTERNALSYM LBPSN_HOT}
  LBPSN_HOT     = 3;
  {$EXTERNALSYM LBPSN_DISABLED}
  LBPSN_DISABLED     = 4;

type
  {$EXTERNALSYM BORDER_VSCROLLSTATES}
  BORDER_VSCROLLSTATES = Integer;
const
  {$EXTERNALSYM LBPSV_NORMAL}
  LBPSV_NORMAL     = 1;
  {$EXTERNALSYM LBPSV_FOCUSED}
  LBPSV_FOCUSED     = 2;
  {$EXTERNALSYM LBPSV_HOT}
  LBPSV_HOT     = 3;
  {$EXTERNALSYM LBPSV_DISABLED}
  LBPSV_DISABLED     = 4;

type
  {$EXTERNALSYM ITEMSTATES}
  ITEMSTATES = Integer;
const
  {$EXTERNALSYM LBPSI_HOT}
  LBPSI_HOT     = 1;
  {$EXTERNALSYM LBPSI_HOTSELECTED}
  LBPSI_HOTSELECTED     = 2;
  {$EXTERNALSYM LBPSI_SELECTED}
  LBPSI_SELECTED     = 3;
  {$EXTERNALSYM LBPSI_SELECTEDNOTFOCUS}
  LBPSI_SELECTEDNOTFOCUS     = 4;


//
//  NAVIGATION class parts and states
//
const
  {$EXTERNALSYM VSCLASS_NAVIGATION}
  VSCLASS_NAVIGATION      = 'NAVIGATION';

type
  {$EXTERNALSYM NAVIGATIONPARTS}
  NAVIGATIONPARTS = Integer;
const
  {$EXTERNALSYM NAV_BACKBUTTON}
  NAV_BACKBUTTON     = 1;
  {$EXTERNALSYM NAV_FORWARDBUTTON}
  NAV_FORWARDBUTTON     = 2;
  {$EXTERNALSYM NAV_MENUBUTTON}
  NAV_MENUBUTTON     = 3;

type
  {$EXTERNALSYM NAV_BACKBUTTONSTATES}
  NAV_BACKBUTTONSTATES = Integer;
const
  {$EXTERNALSYM NAV_BB_NORMAL}
  NAV_BB_NORMAL     = 1;
  {$EXTERNALSYM NAV_BB_HOT}
  NAV_BB_HOT     = 2;
  {$EXTERNALSYM NAV_BB_PRESSED}
  NAV_BB_PRESSED     = 3;
  {$EXTERNALSYM NAV_BB_DISABLED}
  NAV_BB_DISABLED     = 4;

type
  {$EXTERNALSYM NAV_FORWARDBUTTONSTATES}
  NAV_FORWARDBUTTONSTATES = Integer;
const
  {$EXTERNALSYM NAV_FB_NORMAL}
  NAV_FB_NORMAL     = 1;
  {$EXTERNALSYM NAV_FB_HOT}
  NAV_FB_HOT     = 2;
  {$EXTERNALSYM NAV_FB_PRESSED}
  NAV_FB_PRESSED     = 3;
  {$EXTERNALSYM NAV_FB_DISABLED}
  NAV_FB_DISABLED     = 4;

type
  {$EXTERNALSYM NAV_MENUBUTTONSTATES}
  NAV_MENUBUTTONSTATES = Integer;
const
  {$EXTERNALSYM NAV_MB_NORMAL}
  NAV_MB_NORMAL     = 1;
  {$EXTERNALSYM NAV_MB_HOT}
  NAV_MB_HOT     = 2;
  {$EXTERNALSYM NAV_MB_PRESSED}
  NAV_MB_PRESSED     = 3;
  {$EXTERNALSYM NAV_MB_DISABLED}
  NAV_MB_DISABLED     = 4;


// 
//  TASKDIALOGSTYLE class parts and states
//
const 
  {$EXTERNALSYM VSCLASS_TASKDIALOGSTYLE}
  VSCLASS_TASKDIALOGSTYLE = 'TASKDIALOGSTYLE'; 
  {$EXTERNALSYM VSCLASS_TASKDIALOG}
  VSCLASS_TASKDIALOG      = 'TASKDIALOG'; 

type
  {$EXTERNALSYM TASKDIALOGPARTS}
  TASKDIALOGPARTS = Integer; 
const
  {$EXTERNALSYM TDLG_PRIMARYPANEL}
  TDLG_PRIMARYPANEL     = 1; 
  {$EXTERNALSYM TDLG_MAININSTRUCTIONPANE}
  TDLG_MAININSTRUCTIONPANE     = 2; 
  {$EXTERNALSYM TDLG_MAINICON}
  TDLG_MAINICON     = 3; 
  {$EXTERNALSYM TDLG_CONTENTPANE}
  TDLG_CONTENTPANE     = 4; 
  {$EXTERNALSYM TDLG_CONTENTICON}
  TDLG_CONTENTICON     = 5; 
  {$EXTERNALSYM TDLG_EXPANDEDCONTENT}
  TDLG_EXPANDEDCONTENT     = 6;
  {$EXTERNALSYM TDLG_COMMANDLINKPANE}
  TDLG_COMMANDLINKPANE     = 7; 
  {$EXTERNALSYM TDLG_SECONDARYPANEL}
  TDLG_SECONDARYPANEL     = 8; 
  {$EXTERNALSYM TDLG_CONTROLPANE}
  TDLG_CONTROLPANE     = 9; 
  {$EXTERNALSYM TDLG_BUTTONSECTION}
  TDLG_BUTTONSECTION     = 10; 
  {$EXTERNALSYM TDLG_BUTTONWRAPPER}
  TDLG_BUTTONWRAPPER     = 11; 
  {$EXTERNALSYM TDLG_EXPANDOTEXT}
  TDLG_EXPANDOTEXT     = 12; 
  {$EXTERNALSYM TDLG_EXPANDOBUTTON}
  TDLG_EXPANDOBUTTON     = 13; 
  {$EXTERNALSYM TDLG_VERIFICATIONTEXT}
  TDLG_VERIFICATIONTEXT     = 14; 
  {$EXTERNALSYM TDLG_FOOTNOTEPANE}
  TDLG_FOOTNOTEPANE     = 15; 
  {$EXTERNALSYM TDLG_FOOTNOTEAREA}
  TDLG_FOOTNOTEAREA     = 16; 
  {$EXTERNALSYM TDLG_FOOTNOTESEPARATOR}
  TDLG_FOOTNOTESEPARATOR     = 17; 
  {$EXTERNALSYM TDLG_EXPANDEDFOOTERAREA}
  TDLG_EXPANDEDFOOTERAREA     = 18;
  {$EXTERNALSYM TDLG_PROGRESSBAR}
  TDLG_PROGRESSBAR     = 19; 
  {$EXTERNALSYM TDLG_IMAGEALIGNMENT}
  TDLG_IMAGEALIGNMENT     = 20; 
  {$EXTERNALSYM TDLG_RADIOBUTTONPANE}
  TDLG_RADIOBUTTONPANE     = 21; 

type
  {$EXTERNALSYM CONTENTPANESTATES}
  CONTENTPANESTATES = Integer;
const
  {$EXTERNALSYM TDLGCPS_STANDALONE}
  TDLGCPS_STANDALONE     = 1;

type
  {$EXTERNALSYM EXPANDOBUTTONSTATES}
  EXPANDOBUTTONSTATES = Integer;
const
  {$EXTERNALSYM TDLGEBS_NORMAL}
  TDLGEBS_NORMAL     = 1;
  {$EXTERNALSYM TDLGEBS_HOVER}
  TDLGEBS_HOVER     = 2;
  {$EXTERNALSYM TDLGEBS_PRESSED}
  TDLGEBS_PRESSED     = 3;
  {$EXTERNALSYM TDLGEBS_EXPANDEDNORMAL}
  TDLGEBS_EXPANDEDNORMAL     = 4;
  {$EXTERNALSYM TDLGEBS_EXPANDEDHOVER}
  TDLGEBS_EXPANDEDHOVER     = 5;
  {$EXTERNALSYM TDLGEBS_EXPANDEDPRESSED}
  TDLGEBS_EXPANDEDPRESSED     = 6;


//
//  TEXTSTYLE class parts and states
//
const 
  {$EXTERNALSYM VSCLASS_TEXTSTYLE}
  VSCLASS_TEXTSTYLE       = 'TEXTSTYLE'; 

type
  {$EXTERNALSYM TEXTSTYLEPARTS}
  TEXTSTYLEPARTS = Integer;
const
  {$EXTERNALSYM TEXT_MAININSTRUCTION}
  TEXT_MAININSTRUCTION     = 1; 
  {$EXTERNALSYM TEXT_INSTRUCTION}
  TEXT_INSTRUCTION     = 2; 
  {$EXTERNALSYM TEXT_BODYTITLE}
  TEXT_BODYTITLE     = 3; 
  {$EXTERNALSYM TEXT_BODYTEXT}
  TEXT_BODYTEXT     = 4; 
  {$EXTERNALSYM TEXT_SECONDARYTEXT}
  TEXT_SECONDARYTEXT     = 5; 
  {$EXTERNALSYM TEXT_HYPERLINKTEXT}
  TEXT_HYPERLINKTEXT     = 6; 
  {$EXTERNALSYM TEXT_EXPANDED}
  TEXT_EXPANDED     = 7; 
  {$EXTERNALSYM TEXT_LABEL}
  TEXT_LABEL     = 8; 
  {$EXTERNALSYM TEXT_CONTROLLABEL}
  TEXT_CONTROLLABEL     = 9; 

type
  {$EXTERNALSYM HYPERLINKTEXTSTATES}
  HYPERLINKTEXTSTATES = Integer;
const
  {$EXTERNALSYM TS_HYPERLINK_NORMAL}
  TS_HYPERLINK_NORMAL     = 1;
  {$EXTERNALSYM TS_HYPERLINK_HOT}
  TS_HYPERLINK_HOT     = 2;
  {$EXTERNALSYM TS_HYPERLINK_PRESSED}
  TS_HYPERLINK_PRESSED     = 3;
  {$EXTERNALSYM TS_HYPERLINK_DISABLED}
  TS_HYPERLINK_DISABLED     = 4;

type
  {$EXTERNALSYM CONTROLLABELSTATES}
  CONTROLLABELSTATES = Integer;
const
  {$EXTERNALSYM TS_CONTROLLABEL_NORMAL}
  TS_CONTROLLABEL_NORMAL     = 1;
  {$EXTERNALSYM TS_CONTROLLABEL_DISABLED}
  TS_CONTROLLABEL_DISABLED     = 2;


//
//  LINK class parts and states
//
const
  {$EXTERNALSYM VSCLASS_LINK}
  VSCLASS_LINK    = 'LINK';

type
  {$EXTERNALSYM LINKPARTS}
  LINKPARTS = Integer;
const
  {$EXTERNALSYM LP_HYPERLINK}
  LP_HYPERLINK     = 1;

type
  {$EXTERNALSYM HYPERLINKSTATES}
  HYPERLINKSTATES = Integer;
const
  {$EXTERNALSYM HLS_NORMALTEXT}
  HLS_NORMALTEXT     = 1;
  {$EXTERNALSYM HLS_LINKTEXT}
  HLS_LINKTEXT     = 2;

  
//
//  EMPTYMARKUP class parts and states
//
const
  {$EXTERNALSYM VSCLASS_EMPTYMARKUP}
  VSCLASS_EMPTYMARKUP     = 'EMPTYMARKUP';

type
  {$EXTERNALSYM EMPTYMARKUPPARTS}
  EMPTYMARKUPPARTS = Integer;
const
  {$EXTERNALSYM EMP_MARKUPTEXT}
  EMP_MARKUPTEXT     = 1;

type
  {$EXTERNALSYM MARKUPTEXTSTATES}
  MARKUPTEXTSTATES = Integer;
const
  {$EXTERNALSYM EMT_NORMALTEXT}
  EMT_NORMALTEXT     = 1;
  {$EXTERNALSYM EMT_LINKTEXT}
  EMT_LINKTEXT     = 2;

  
//
//  STATIC class parts and states
//
const
  {$EXTERNALSYM VSCLASS_STATIC}
  VSCLASS_STATIC  = 'STATIC';

type
  {$EXTERNALSYM STATICPARTS}
  STATICPARTS = Integer;
const
  {$EXTERNALSYM STAT_TEXT}
  STAT_TEXT     = 1;

  
//
//  MONTHCAL class parts and states
//
const
  {$EXTERNALSYM VSCLASS_MONTHCAL}
  VSCLASS_MONTHCAL        = 'MONTHCAL';

type
  {$EXTERNALSYM MONTHCALPARTS}
  MONTHCALPARTS = Integer;
const
  {$EXTERNALSYM MC_BACKGROUND}
  MC_BACKGROUND     = 1;
  {$EXTERNALSYM MC_BORDERS}
  MC_BORDERS     = 2;
  {$EXTERNALSYM MC_GRIDBACKGROUND}
  MC_GRIDBACKGROUND     = 3;
  {$EXTERNALSYM MC_COLHEADERSPLITTER}
  MC_COLHEADERSPLITTER     = 4;
  {$EXTERNALSYM MC_GRIDCELLBACKGROUND}
  MC_GRIDCELLBACKGROUND     = 5;
  {$EXTERNALSYM MC_GRIDCELL}
  MC_GRIDCELL     = 6;
  {$EXTERNALSYM MC_GRIDCELLUPPER}
  MC_GRIDCELLUPPER     = 7;
  {$EXTERNALSYM MC_TRAILINGGRIDCELL}
  MC_TRAILINGGRIDCELL     = 8;
  {$EXTERNALSYM MC_TRAILINGGRIDCELLUPPER}
  MC_TRAILINGGRIDCELLUPPER     = 9;
  {$EXTERNALSYM MC_NAVNEXT}
  MC_NAVNEXT     = 10;
  {$EXTERNALSYM MC_NAVPREV}
  MC_NAVPREV     = 11;

type
  {$EXTERNALSYM GRIDCELLBACKGROUNDSTATES}
  GRIDCELLBACKGROUNDSTATES = Integer;
const
  {$EXTERNALSYM MCGCB_SELECTED}
  MCGCB_SELECTED     = 1;
  {$EXTERNALSYM MCGCB_HOT}
  MCGCB_HOT     = 2;
  {$EXTERNALSYM MCGCB_SELECTEDHOT}
  MCGCB_SELECTEDHOT     = 3;
  {$EXTERNALSYM MCGCB_SELECTEDNOTFOCUSED}
  MCGCB_SELECTEDNOTFOCUSED     = 4;
  {$EXTERNALSYM MCGCB_TODAY}
  MCGCB_TODAY     = 5;

type
  {$EXTERNALSYM GRIDCELLSTATES}
  GRIDCELLSTATES = Integer;
const
  {$EXTERNALSYM MCGC_HOT}
  MCGC_HOT     = 1;
  {$EXTERNALSYM MCGC_HASSTATE}
  MCGC_HASSTATE     = 2;
  {$EXTERNALSYM MCGC_HASSTATEHOT}
  MCGC_HASSTATEHOT     = 3;
  {$EXTERNALSYM MCGC_TODAY}
  MCGC_TODAY     = 4;

type
  {$EXTERNALSYM GRIDCELLUPPERSTATES}
  GRIDCELLUPPERSTATES = Integer;
const
  {$EXTERNALSYM MCGCU_HOT}
  MCGCU_HOT     = 1;
  {$EXTERNALSYM MCGCU_HASSTATE}
  MCGCU_HASSTATE     = 2;
  {$EXTERNALSYM MCGCU_HASSTATEHOT}
  MCGCU_HASSTATEHOT     = 3;

type
  {$EXTERNALSYM TRAILINGGRIDCELLSTATES}
  TRAILINGGRIDCELLSTATES = Integer;
const
  {$EXTERNALSYM MCTGC_HOT}
  MCTGC_HOT     = 1;
  {$EXTERNALSYM MCTGC_HASSTATE}
  MCTGC_HASSTATE     = 2;
  {$EXTERNALSYM MCTGC_HASSTATEHOT}
  MCTGC_HASSTATEHOT     = 3;
  {$EXTERNALSYM MCTGC_TODAY}
  MCTGC_TODAY     = 4;

type
  {$EXTERNALSYM TRAILINGGRIDCELLUPPERSTATES}
  TRAILINGGRIDCELLUPPERSTATES = Integer;
const
  {$EXTERNALSYM MCTGCU_HOT}
  MCTGCU_HOT     = 1;
  {$EXTERNALSYM MCTGCU_HASSTATE}
  MCTGCU_HASSTATE     = 2;
  {$EXTERNALSYM MCTGCU_HASSTATEHOT}
  MCTGCU_HASSTATEHOT     = 3;

type
  {$EXTERNALSYM NAVNEXTSTATES}
  NAVNEXTSTATES = Integer;
const
  {$EXTERNALSYM MCNN_NORMAL}
  MCNN_NORMAL     = 1;
  {$EXTERNALSYM MCNN_HOT}
  MCNN_HOT     = 2;
  {$EXTERNALSYM MCNN_PRESSED}
  MCNN_PRESSED     = 3;
  {$EXTERNALSYM MCNN_DISABLED}
  MCNN_DISABLED     = 4;

type
  {$EXTERNALSYM NAVPREVSTATES}
  NAVPREVSTATES = Integer;
const
  {$EXTERNALSYM MCNP_NORMAL}
  MCNP_NORMAL     = 1;
  {$EXTERNALSYM MCNP_HOT}
  MCNP_HOT     = 2;
  {$EXTERNALSYM MCNP_PRESSED}
  MCNP_PRESSED     = 3;
  {$EXTERNALSYM MCNP_DISABLED}
  MCNP_DISABLED     = 4;

const
  {$EXTERNALSYM OTD_FORCE_RECT_SIZING}
  OTD_FORCE_RECT_SIZING   = $00000001;          // make all parts size to rect
  {$EXTERNALSYM OTD_NONCLIENT}
  OTD_NONCLIENT           = $00000002;          // set if hTheme to be used for nonclient area
  {$EXTERNALSYM OTD_VALIDBITS}
  OTD_VALIDBITS           = OTD_FORCE_RECT_SIZING or OTD_NONCLIENT;

  
// ---------------------------------------------------------------------------
//  OpenThemeDataEx     - Open the theme data for the specified HWND and
//                        semi-colon separated list of class names.
// 
//                        OpenThemeData() will try each class name, one at
//                        a time, and use the first matching theme info
//                        found.  If a match is found, a theme handle
//                        to the data is returned.  If no match is found,
//                        a "NULL" handle is returned.
// 
//                        When the window is destroyed or a WM_THEMECHANGED
//                        msg is received, "CloseThemeData()" should be
//                        called to close the theme handle.
// 
//  hwnd                - window handle of the control/window to be themed
// 
//  pszClassList        - class name (or list of names) to match to theme data
//                        section.  if the list contains more than one name,
//                        the names are tested one at a time for a match. 
//                        If a match is found, OpenThemeData() returns a
//                        theme handle associated with the matching class.
//                        This param is a list (instead of just a single
//                        class name) to provide the class an opportunity
//                        to get the "best" match between the class and
//                        the current theme.  For example, a button might
//                        pass L"OkButton, Button" if its ID=ID_OK.  If
//                        the current theme has an entry for OkButton,
//                        that will be used.  Otherwise, we fall back on
//                        the normal Button entry.
// 
//  dwFlags              - allows certain overrides of std features
//                         (see OTD_XXX defines above)
// ---------------------------------------------------------------------------
{$EXTERNALSYM OpenThemeDataEx}
function OpenThemeDataEx(hwnd: HWND; pszClassList: LPCWSTR;
  dwFlags: DWORD): HTHEME; stdcall;

// ---- bits used in dwFlags of DTBGOPTS ----
const
  {$EXTERNALSYM DTBG_CLIPRECT}
  DTBG_CLIPRECT           = $00000001;  // rcClip has been specified
  {$EXTERNALSYM DTBG_DRAWSOLID}
  DTBG_DRAWSOLID          = $00000002;  // DEPRECATED: draw transparent/alpha images as solid
  {$EXTERNALSYM DTBG_OMITBORDER}
  DTBG_OMITBORDER         = $00000004;  // don't draw border of part
  {$EXTERNALSYM DTBG_OMITCONTENT}
  DTBG_OMITCONTENT        = $00000008;  // don't draw content area of part
  {$EXTERNALSYM DTBG_COMPUTINGREGION}
  DTBG_COMPUTINGREGION    = $00000010;  // TRUE if calling to compute region
  {$EXTERNALSYM DTBG_MIRRORDC}
  DTBG_MIRRORDC           = $00000020;  // assume the hdc is mirrorred and
                                            // flip images as appropriate (currently
                                            // only supported for bgtype=imagefile)
  {$EXTERNALSYM DTBG_NOMIRROR}
  DTBG_NOMIRROR           = $00000040;  // don't mirror the output, overrides everything else
  {$EXTERNALSYM DTBG_VALIDBITS}
  DTBG_VALIDBITS          = DTBG_CLIPRECT or
                            DTBG_DRAWSOLID or
                            DTBG_OMITBORDER or
                            DTBG_OMITCONTENT or
                            DTBG_COMPUTINGREGION or
                            DTBG_MIRRORDC or
                            DTBG_NOMIRROR;

type
  {$EXTERNALSYM PDTBGOPTS}
  PDTBGOPTS = ^DTBGOPTS;
  {$EXTERNALSYM DTBGOPTS}
  DTBGOPTS = record
    dwSize: DWORD;          // size of the struct
    dwFlags: DWORD;         // which options have been specified
    rcClip: TRect;          // clipping rectangle
  end;
  _DTBGOPTS = DTBGOPTS;
  TDTBGOpts = DTBGOPTS;

// ------------------------------------------------------------------------
//  DrawThemeBackgroundEx()
//                      - draws the theme-specified border and fill for
//                        the "iPartId" and "iStateId".  This could be
//                        based on a bitmap file, a border and fill, or
//                        other image description.  NOTE: This will be
//                        merged back into DrawThemeBackground() after
//                        BETA 2.
//
//  hTheme              - theme data handle
//  hdc                 - HDC to draw into
//  iPartId             - part number to draw
//  iStateId            - state number (of the part) to draw
//  pRect               - defines the size/location of the part
//  pOptions            - ptr to optional params
// ------------------------------------------------------------------------
{$EXTERNALSYM DrawThemeBackgroundEx}
function DrawThemeBackgroundEx(hTheme: HTHEME; hdc: HDC; iPartId: Integer;
  iStateId: Integer; const pRect: TRect; pOptions: PDTBGOPTS): HResult; stdcall;

// ---------------------------------------------------------------------------
// 
// DrawThemeTextEx
// 

// Callback function used by DrawTextWithGlow instead of DrawTextW
type
  {$EXTERNALSYM DTT_CALLBACK_PROC}
  DTT_CALLBACK_PROC = function(hdc: HDC; pszText: LPWSTR; cchText: Integer;
    prc: PRect; dwFlags: UINT; lParam: LPARAM): Integer; stdcall;
  TFNDTTCallbackProc = DTT_CALLBACK_PROC;


// ---- bits used in dwFlags of DTTOPTS ----
const
  {$EXTERNALSYM DTT_TEXTCOLOR}
  DTT_TEXTCOLOR       = 1 shl 0;        // crText has been specified
  {$EXTERNALSYM DTT_BORDERCOLOR}
  DTT_BORDERCOLOR     = 1 shl 1;        // crBorder has been specified
  {$EXTERNALSYM DTT_SHADOWCOLOR}
  DTT_SHADOWCOLOR     = 1 shl 2;        // crShadow has been specified
  {$EXTERNALSYM DTT_SHADOWTYPE}
  DTT_SHADOWTYPE      = 1 shl 3;        // iTextShadowType has been specified
  {$EXTERNALSYM DTT_SHADOWOFFSET}
  DTT_SHADOWOFFSET    = 1 shl 4;        // ptShadowOffset has been specified
  {$EXTERNALSYM DTT_BORDERSIZE}
  DTT_BORDERSIZE      = 1 shl 5;        // iBorderSize has been specified
  {$EXTERNALSYM DTT_FONTPROP}
  DTT_FONTPROP        = 1 shl 6;        // iFontPropId has been specified
  {$EXTERNALSYM DTT_COLORPROP}
  DTT_COLORPROP       = 1 shl 7;        // iColorPropId has been specified
  {$EXTERNALSYM DTT_STATEID}
  DTT_STATEID         = 1 shl 8;        // IStateId has been specified
  {$EXTERNALSYM DTT_CALCRECT}
  DTT_CALCRECT        = 1 shl 9;        // Use pRect as and in/out parameter
  {$EXTERNALSYM DTT_APPLYOVERLAY}
  DTT_APPLYOVERLAY    = 1 shl 10;       // fApplyOverlay has been specified
  {$EXTERNALSYM DTT_GLOWSIZE}
  DTT_GLOWSIZE        = 1 shl 11;       // iGlowSize has been specified
  {$EXTERNALSYM DTT_CALLBACK}
  DTT_CALLBACK        = 1 shl 12;       // pfnDrawTextCallback has been specified
  {$EXTERNALSYM DTT_COMPOSITED}
  DTT_COMPOSITED      = 1 shl 13;       // Draws text with antialiased alpha (needs a DIB section)
  {$EXTERNALSYM DTT_VALIDBITS}
  DTT_VALIDBITS       = DTT_TEXTCOLOR or
                        DTT_BORDERCOLOR or
                        DTT_SHADOWCOLOR or
                        DTT_SHADOWTYPE or
                        DTT_SHADOWOFFSET or
                        DTT_BORDERSIZE or
                        DTT_FONTPROP or
                        DTT_COLORPROP or
                        DTT_STATEID or
                        DTT_CALCRECT or
                        DTT_APPLYOVERLAY or
                        DTT_GLOWSIZE or
                        DTT_COMPOSITED;

type
  {$EXTERNALSYM PDTTOPTS}
  PDTTOPTS = ^DTTOPTS;
  {$EXTERNALSYM DTTOPTS}
  DTTOPTS = record
    dwSize: DWORD;                          // size of the struct
    dwFlags: DWORD;                         // which options have been specified
    crText: COLORREF;                       // color to use for text fill
    crBorder: COLORREF;                     // color to use for text outline
    crShadow: COLORREF;                     // color to use for text shadow
    iTextShadowType: Integer;               // TST_SINGLE or TST_CONTINUOUS
    ptShadowOffset: TPoint;                 // where shadow is drawn (relative to text)
    iBorderSize: Integer;                   // Border radius around text
    iFontPropId: Integer;                   // Font property to use for the text instead of TMT_FONT
    iColorPropId: Integer;                  // Color property to use for the text instead of TMT_TEXTCOLOR
    iStateId: Integer;                      // Alternate state id
    fApplyOverlay: BOOL;                    // Overlay text on top of any text effect?
    iGlowSize: Integer;                     // Glow radious around text
    pfnDrawTextCallback: TFNDTTCallbackProc;// Callback for DrawText
    lParam: LPARAM;                         // Parameter for callback
  end;
  _DTTOPTS = DTTOPTS;
  TDTTOpts = DTTOPTS;

{$EXTERNALSYM DrawThemeTextEx}
function DrawThemeTextEx(hTheme: HTHEME; hdc: HDC; iPartId: Integer;
  iStateId: Integer; pszText: LPCWSTR; cchText: Integer; dwTextFlags: DWORD;
  pRect: PRect; var pOptions: TDTTOpts): HResult; overload; stdcall;
{$EXTERNALSYM DrawThemeTextEx}
function DrawThemeTextEx(hTheme: HTHEME; hdc: HDC; iPartId: Integer;
  iStateId: Integer; pszText: UnicodeString; cchText: Integer; dwTextFlags: DWORD;
  var pRect: TRect; var pOptions: TDTTOpts): HResult; overload; inline;

const
  {$EXTERNALSYM WTA_NONCLIENT}
  WTA_NONCLIENT   = 1;

type
  {$EXTERNALSYM PWTA_OPTIONS}
  PWTA_OPTIONS = ^WTA_OPTIONS;
  {$EXTERNALSYM WTA_OPTIONS}
  WTA_OPTIONS = record
    dwFlags: DWORD;         // values for each style option specified in the bitmask
    dwMask: DWORD;          // bitmask for flags that are changing
                            // valid options are: WTNCA_NODRAWCAPTION, WTNCA_NODRAWICON, WTNCA_NOSYSMENU
  end;
  _WTA_OPTIONS = WTA_OPTIONS;
  TWTAOptions = WTA_OPTIONS;
  PWTAOptions = ^TWTAOptions;

const
  {$EXTERNALSYM WTNCA_NODRAWCAPTION}
  WTNCA_NODRAWCAPTION       = $00000001;    // don't draw the window caption
  {$EXTERNALSYM WTNCA_NODRAWICON}
  WTNCA_NODRAWICON          = $00000002;    // don't draw the system icon
  {$EXTERNALSYM WTNCA_NOSYSMENU}
  WTNCA_NOSYSMENU           = $00000004;    // don't expose the system menu icon functionality
  {$EXTERNALSYM WTNCA_NOMIRRORHELP}
  WTNCA_NOMIRRORHELP        = $00000008;    // don't mirror the question mark, even in RTL layout
  {$EXTERNALSYM WTNCA_VALIDBITS}
  WTNCA_VALIDBITS           = WTNCA_NODRAWCAPTION or
                              WTNCA_NODRAWICON or
                              WTNCA_NOSYSMENU or
                              WTNCA_NOMIRRORHELP;

{$EXTERNALSYM SetWindowThemeAttribute}
function SetWindowThemeAttribute(hwnd: HWND; eAttribute: Cardinal;
  pvAttribute: Pointer; cbAttribute: DWORD): HResult; stdcall;

{$EXTERNALSYM SetWindowThemeNonClientAttributes}
function SetWindowThemeNonClientAttributes(hwnd: HWND; dwMask: DWORD;
  dwAttributes: DWORD): HResult;

const
  {$EXTERNALSYM DTPB_WINDOWDC}
  DTPB_WINDOWDC           = $00000001;
  {$EXTERNALSYM DTPB_USECTLCOLORSTATIC}
  DTPB_USECTLCOLORSTATIC  = $00000002;
  {$EXTERNALSYM DTPB_USEERASEBKGND}
  DTPB_USEERASEBKGND      = $00000004;

// ---------------------------------------------------------------------------
// DrawThemeParentBackgroundEx()
//                      - used by partially-transparent or alpha-blended
//                        child controls to draw the part of their parent
//                        that they appear in front of.
//                        Sends a WM_ERASEBKGND message followed by a WM_PRINTCLIENT.
//
//  hwnd                - handle of the child control
//
//  hdc                 - hdc of the child control
//
//  dwFlags             - if 0, only returns S_OK if the parent handled
//                        WM_PRINTCLIENT.
//                      - if DTPB_WINDOWDC is set, hdc is assumed to be a window DC,
//                        not a client DC.
//                      - if DTPB_USEERASEBKGND is set, the function will return S_OK
//                        without sending a WM_CTLCOLORSTATIC message if the parent
//                        actually painted on WM_ERASEBKGND.
//                      - if DTPB_CTLCOLORSTATIC is set, the function will send
//                        a WM_CTLCOLORSTATIC message to the parent and use the
//                        brush if one is provided, else COLOR_BTNFACE.
//
//  prc                 - (optional) rect that defines the area to be
//                        drawn (CHILD coordinates)
//
//  Return value        - S_OK if something was painted, S_FALSE if not.
// ---------------------------------------------------------------------------
{$EXTERNALSYM DrawThemeParentBackgroundEx}
function DrawThemeParentBackgroundEx(hwnd: HWND; hdc: HDC; dwFlags: DWORD;
  prc: PRect): HResult; stdcall;

const
  {$EXTERNALSYM GBF_DIRECT}
  GBF_DIRECT      = $00000001;      // direct dereferencing.
  {$EXTERNALSYM GBF_COPY}
  GBF_COPY        = $00000002;      // create a copy of the bitmap
  {$EXTERNALSYM GBF_VALIDBITS}
  GBF_VALIDBITS   = GBF_DIRECT or GBF_COPY;

{$EXTERNALSYM GetThemeBitmap}
function GetThemeBitmap(hTheme: HTHEME; iPartId: Integer; iStateId: Integer;
  iPropId: Integer; dwFlags: ULONG; var phBitmap: HBITMAP): HResult; stdcall;

// -----------------------------------------------------------------------
//  GetThemeStream() - Get the value for the specified STREAM property
//
//      hTheme      - theme data handle
//      iPartId     - part number
//      iStateId    - state number of part
//      iPropId     - the property number to get the value for
//      ppvStream   - if non-null receives the value of the STREAM property (not to be freed)
//      pcbStream   - if non-null receives the size of the STREAM property
//      hInst       - NULL when iPropId==TMT_STREAM, HINSTANCE of a loaded msstyles
//                    file when iPropId==TMT_DISKSTREAM (use GetCurrentThemeName
//                    and LoadLibraryEx(LOAD_LIBRARY_AS_DATAFILE)
// -----------------------------------------------------------------------
{$EXTERNALSYM GetThemeStream}
function GetThemeStream(hTheme: HTHEME; iPartId: Integer; iStateId: Integer;
  iPropId: Integer; var ppvStream: Pointer; var pcbStream: DWORD;
  hInst: HINST): HResult; stdcall;

// ------------------------------------------------------------------------
//  BufferedPaintInit() - Initialize the Buffered Paint API.
//                        Should be called prior to BeginBufferedPaint,
//                        and should have a matching BufferedPaintUnInit.
// ------------------------------------------------------------------------
{$EXTERNALSYM BufferedPaintInit}
function BufferedPaintInit: HResult; stdcall;

// ------------------------------------------------------------------------
//  BufferedPaintUnInit() - Uninitialize the Buffered Paint API.
//                          Should be called once for each call to BufferedPaintInit,
//                          when calls to BeginBufferedPaint are no longer needed.
// ------------------------------------------------------------------------
{$EXTERNALSYM BufferedPaintUnInit}
function BufferedPaintUnInit: HResult; stdcall;

// ------------------------------------------------------------------------
//  BeginBufferedPaint() - Begins a buffered paint operation.
//
//    hdcTarget          - Target DC on which the buffer will be painted
//    rcTarget           - Rectangle specifying the area of the target DC to paint to
//    dwFormat           - Format of the buffer (see BP_BUFFERFORMAT)
//    pPaintParams       - Paint operation parameters (see BP_PAINTPARAMS)
//    phBufferedPaint    - Pointer to receive handle to new buffered paint context
// ------------------------------------------------------------------------

type
  // HPAINTBUFFER

  {$EXTERNALSYM HPAINTBUFFER}
  HPAINTBUFFER = THandle;     // handle to a buffered paint context

const
  // BP_BUFFERFORMAT

  {$EXTERNALSYM BPBF_COMPATIBLEBITMAP}
  BPBF_COMPATIBLEBITMAP = 0;    // Compatible bitmap
  {$EXTERNALSYM BPBF_DIB}
  BPBF_DIB = 1;                 // Device-independent bitmap
  {$EXTERNALSYM BPBF_TOPDOWNDIB}
  BPBF_TOPDOWNDIB = 2;          // Top-down device-independent bitmap
  {$EXTERNALSYM BPBF_TOPDOWNMONODIB}
  BPBF_TOPDOWNMONODIB = 3;      // Top-down monochrome device-independent bitmap
  {$EXTERNALSYM BPBF_COMPOSITED}
  BPBF_COMPOSITED = BPBF_TOPDOWNDIB;


  // BP_ANIMATIONSTYLE

  {$EXTERNALSYM BPAS_NONE}
  BPAS_NONE = 0;                // No animation
  {$EXTERNALSYM BPAS_LINEAR}
  BPAS_LINEAR = 1;              // Linear fade animation
  {$EXTERNALSYM BPAS_CUBIC}
  BPAS_CUBIC = 2;               // Cubic fade animation
  {$EXTERNALSYM BPAS_SINE}
  BPAS_SINE = 3;                 // Sinusoid fade animation


type
  // BP_ANIMATIONPARAMS

  {$EXTERNALSYM PBP_ANIMATIONPARAMS}
  PBP_ANIMATIONPARAMS = ^BP_ANIMATIONPARAMS;
  {$EXTERNALSYM BP_ANIMATIONPARAMS}
  BP_ANIMATIONPARAMS = record
    cbSize: DWORD;
    dwFlags: DWORD;              // BPAF_ flags
    style: Cardinal;
    dwDuration: DWORD;
  end;
  _BP_ANIMATIONPARAMS = BP_ANIMATIONPARAMS;
  TBPAnimationParams = BP_ANIMATIONPARAMS;
  PBPAnimationParams = ^TBPAnimationParams;

const
  {$EXTERNALSYM BPPF_ERASE}
  BPPF_ERASE               = $0001; // Empty the buffer during BeginBufferedPaint()
  {$EXTERNALSYM BPPF_NOCLIP}
  BPPF_NOCLIP              = $0002; // Don't apply the target DC's clip region to the double buffer
  {$EXTERNALSYM BPPF_NONCLIENT}
  BPPF_NONCLIENT           = $0004; // Using a non-client DC


type
  // BP_PAINTPARAMS

  {$EXTERNALSYM PBP_PAINTPARAMS}
  PBP_PAINTPARAMS = ^BP_PAINTPARAMS;
  {$EXTERNALSYM BP_PAINTPARAMS}
  BP_PAINTPARAMS = record
    cbSize: DWORD;
    dwFlags: DWORD;                      // BPPF_ flags
    prcExclude: PRect;
    pBlendFunction: PBLENDFUNCTION;
  end;
  _BP_PAINTPARAMS = BP_PAINTPARAMS;
  TBPPaintParams = BP_PAINTPARAMS;
  PBPPaintParams = ^TBPPaintParams;

{$EXTERNALSYM BeginBufferedPaint}
function BeginBufferedPaint(hdcTarget: HDC; const prcTarget: TRect; 
  dwFormat: DWORD; pPaintParams: PBPPaintParams; var phdc: HDC): HPAINTBUFFER; stdcall;

// ------------------------------------------------------------------------
//  EndBufferedPaint() - Ends a buffered paint operation.
//
//    hBufferedPaint   - handle to buffered paint context
//    fUpdateTarget    - update target DC
// ------------------------------------------------------------------------
{$EXTERNALSYM EndBufferedPaint}
function EndBufferedPaint(hBufferedPaint: HPAINTBUFFER;
  fUpdateTarget: BOOL): HResult; stdcall;

// ------------------------------------------------------------------------
//  GetBufferedPaintTargetRect() - Returns the target rectangle specified during BeginBufferedPaint
//
//    hBufferedPaint             - handle to buffered paint context
//    prc                        - pointer to receive target rectangle
// ------------------------------------------------------------------------
{$EXTERNALSYM GetBufferedPaintTargetRect}
function GetBufferedPaintTargetRect(hBufferedPaint: HPAINTBUFFER;
  var prc: TRect): HResult; stdcall;

// ------------------------------------------------------------------------
//  GetBufferedPaintTargetDC() - Returns the target DC specified during BeginBufferedPaint
//
//    hBufferedPaint           - handle to buffered paint context
// ------------------------------------------------------------------------
{$EXTERNALSYM GetBufferedPaintTargetDC}
function GetBufferedPaintTargetDC(hBufferedPaint: HPAINTBUFFER): HDC; stdcall;

// ------------------------------------------------------------------------
//  GetBufferedPaintDC() - Returns the same paint DC returned by BeginBufferedPaint
//
//    hBufferedPaint     - handle to buffered paint context
// ------------------------------------------------------------------------
{$EXTERNALSYM GetBufferedPaintDC}
function GetBufferedPaintDC(hBufferedPaint: HPAINTBUFFER): HDC; stdcall;

// ------------------------------------------------------------------------
//  GetBufferedPaintBits() - Obtains a pointer to the buffer bitmap, if the buffer is a DIB
// 
//    hBufferedPaint       - handle to buffered paint context
//    ppbBuffer            - pointer to receive pointer to buffer bitmap pixels
//    pcxRow               - pointer to receive width of buffer bitmap, in pixels;
//                           this value may not necessarily be equal to the buffer width
// ------------------------------------------------------------------------
{$EXTERNALSYM GetBufferedPaintBits}
function GetBufferedPaintBits(hBufferedPaint: HPAINTBUFFER;
  var ppbBuffer: PRGBQUAD; var pcxRow: Integer): HResult; stdcall;

// ------------------------------------------------------------------------
//  BufferedPaintClear() - Clears given rectangle to ARGB = {0, 0, 0, 0}
//
//    hBufferedPaint     - handle to buffered paint context
//    prc                - rectangle to clear; NULL specifies entire buffer
// ------------------------------------------------------------------------
{$EXTERNALSYM BufferedPaintClear}
function BufferedPaintClear(hBufferedPaint: HPAINTBUFFER; prc: PRect): HResult; stdcall;

// ------------------------------------------------------------------------
//  BufferedPaintSetAlpha() - Set alpha to given value in given rectangle
//
//    hBufferedPaint        - handle to buffered paint context
//    prc                   - rectangle to set alpha in; NULL specifies entire buffer
//    alpha                 - alpha value to set in the given rectangle
// ------------------------------------------------------------------------
{$EXTERNALSYM BufferedPaintSetAlpha}
function BufferedPaintSetAlpha(hBufferedPaint: HPAINTBUFFER; prc: PRect;
  alpha: Byte): HResult; stdcall;

// Macro for setting the buffer to opaque (alpha = 255)
{$EXTERNALSYM BufferedPaintMakeOpaque}
function BufferedPaintMakeOpaque(hBufferedPaint: HPAINTBUFFER; prc: PRect): HResult; inline; overload;
function BufferedPaintMakeOpaque(hBufferedPaint: HPAINTBUFFER; const prc: TRect): HResult; inline; overload;

// ------------------------------------------------------------------------
//  BufferedPaintStopAllAnimations() - Stop all buffer animations for the given window
//
//    hwnd                           - window on which to stop all animations
// ------------------------------------------------------------------------
{$EXTERNALSYM BufferedPaintStopAllAnimations}
function BufferedPaintStopAllAnimations(hwnd: HWND): HResult; stdcall;

type
  {$EXTERNALSYM HANIMATIONBUFFER}
  HANIMATIONBUFFER = THandle;     // handle to a buffered paint animation

{$EXTERNALSYM BeginBufferedAnimation}
function BeginBufferedAnimation(hwnd: HWND; hdcTarget: HDC;
  var prcTarget: TRect; dwFormat: DWORD; pPaintParams: PBPPaintParams;
  var pAnimationParams: TBPAnimationParams; var phdcFrom: HDC; 
  var phdcTo: HDC): HANIMATIONBUFFER; stdcall;

{$EXTERNALSYM EndBufferedAnimation}
function EndBufferedAnimation(hbpAnimation: HANIMATIONBUFFER; 
  fUpdateTarget: BOOL): HResult; stdcall;

{$EXTERNALSYM BufferedPaintRenderAnimation}
function BufferedPaintRenderAnimation(hwnd: HWND; hdcTarget: HDC): BOOL; stdcall;

// ----------------------------------------------------------------------------
// Tells if the DWM is running, and composition effects are possible for this
// process (themes are active).
// Roughly equivalent to "DwmIsCompositionEnabled() && IsAppthemed()"
// ----------------------------------------------------------------------------
{$EXTERNALSYM IsCompositionActive}
function IsCompositionActive: BOOL; stdcall;

// ------------------------------------------------------------------------
//  GetThemeTransitionDuration()
//                      - Gets the duration for the specified transition
//
//  hTheme              - theme data handle
//  iPartId             - part number
//  iStateIdFrom        - starting state number of part
//  iStateIdTo          - ending state number of part
//  iPropId             - property id
//  pdwDuration         - receives the transition duration
// ------------------------------------------------------------------------
{$EXTERNALSYM GetThemeTransitionDuration}
function GetThemeTransitionDuration(hTheme: HTHEME; iPartId: Integer;
  iStateIdFrom: Integer; iStateIdTo: Integer; iPropId: Integer;
  var pdwDuration: DWORD): HResult; stdcall;


implementation

uses
  System.SyncObjs;

const
  themelib = 'uxtheme.dll';

var
  ThemeLibrary: THandle;
  ReferenceCount: Integer;
  Lock: TCriticalSection = nil;

function BeginPanningFeedback; external themelib name 'BeginPanningFeedback' delayed;
function UpdatePanningFeedback; external themelib name 'UpdatePanningFeedback' delayed;
function EndPanningFeedback; external themelib name 'EndPanningFeedback' delayed;
function OpenThemeDataEx; external themelib name 'OpenThemeDataEx' delayed;
function DrawThemeBackgroundEx; external themelib name 'DrawThemeBackgroundEx' delayed;
function SetWindowThemeAttribute; external themelib name 'SetWindowThemeAttribute' delayed;

function SetWindowThemeNonClientAttributes(hwnd: HWND; dwMask: DWORD;
  dwAttributes: DWORD): HResult;
var
  WTA: TWTAOptions;
begin
  WTA.dwFlags := dwAttributes;
  WTA.dwMask := dwMask;
  Result := SetWindowThemeAttribute(hwnd, WTA_NONCLIENT, @WTA, SizeOf(WTA));
end;

function DrawThemeTextEx(hTheme: HTHEME; hdc: HDC; iPartId: Integer;
  iStateId: Integer; pszText: LPCWSTR; cchText: Integer; dwTextFlags: DWORD;
  pRect: PRect; var pOptions: TDTTOpts): HResult; stdcall; external themelib name 'DrawThemeTextEx' delayed;

function DrawThemeTextEx(hTheme: HTHEME; hdc: HDC; iPartId: Integer;
  iStateId: Integer; pszText: UnicodeString; cchText: Integer; dwTextFlags: DWORD;
  var pRect: TRect; var pOptions: TDTTOpts): HResult;
begin
  Result := DrawThemeTextEx(hTheme, hdc, iPartId, iStateId,
    PWideChar(pszText), cchText, dwTextFlags, @pRect, pOptions);
end;

function DrawThemeParentBackgroundEx; external themelib name 'DrawThemeParentBackgroundEx' delayed;
function GetThemeBitmap; external themelib name 'GetThemeBitmap' delayed;
function GetThemeStream; external themelib name 'GetThemeStream' delayed;
function BufferedPaintInit; external themelib name 'BufferedPaintInit' delayed;
function BufferedPaintUnInit; external themelib name 'BufferedPaintUnInit' delayed;
function BeginBufferedPaint; external themelib name 'BeginBufferedPaint' delayed;
function EndBufferedPaint; external themelib name 'EndBufferedPaint' delayed;
function GetBufferedPaintTargetRect; external themelib name 'GetBufferedPaintTargetRect' delayed;
function GetBufferedPaintTargetDC; external themelib name 'GetBufferedPaintTargetDC' delayed;
function GetBufferedPaintDC; external themelib name 'GetBufferedPaintDC' delayed;
function GetBufferedPaintBits; external themelib name 'GetBufferedPaintBits' delayed;

function BufferedPaintClear; external themelib name 'BufferedPaintClear' delayed;
function BufferedPaintSetAlpha; external themelib name 'BufferedPaintSetAlpha' delayed;

function BufferedPaintMakeOpaque(hBufferedPaint: HPAINTBUFFER; prc: PRect): HResult;
begin
  Result := BufferedPaintSetAlpha(hBufferedPaint, prc, 255);
end;

function BufferedPaintMakeOpaque(hBufferedPaint: HPAINTBUFFER; const prc: TRect): HResult;
begin
  Result := BufferedPaintSetAlpha(hBufferedPaint, @prc, 255);
end;

function BufferedPaintStopAllAnimations; external themelib name 'BufferedPaintStopAllAnimations' delayed;
function BeginBufferedAnimation; external themelib name 'BeginBufferedAnimation' delayed;
function EndBufferedAnimation; external themelib name 'EndBufferedAnimation' delayed;
function BufferedPaintRenderAnimation; external themelib name 'BufferedPaintRenderAnimation' delayed;

function IsCompositionActive; external themelib name 'IsCompositionActive' delayed;
function GetThemeTransitionDuration; external themelib name 'GetThemeTransitionDuration' delayed;

procedure FreeThemeLibrary;
begin
  Lock.Enter;
  try
    if ReferenceCount > 0 then
      Dec(ReferenceCount);

    if (ThemeLibrary <> 0) and (ReferenceCount = 0) then
    begin
      FreeLibrary(ThemeLibrary);
      ThemeLibrary := 0;

      OpenThemeData := nil;
      CloseThemeData := nil;
      DrawThemeBackground := nil;
      DrawThemeText := nil;
      GetThemeBackgroundContentRect := nil;
      GetThemeBackgroundExtent := nil;
      GetThemePartSize := nil;
      GetThemeTextExtent := nil;
      GetThemeTextMetrics := nil;
      GetThemeBackgroundRegion := nil;
      HitTestThemeBackground := nil;
      DrawThemeEdge := nil;
      DrawThemeIcon := nil;
      IsThemePartDefined := nil;
      IsThemeBackgroundPartiallyTransparent := nil;
      GetThemeColor := nil;
      GetThemeMetric := nil;
      GetThemeString := nil;
      GetThemeBool := nil;
      GetThemeInt := nil;
      GetThemeEnumValue := nil;
      GetThemePosition := nil;
      GetThemeFont := nil;
      GetThemeRect := nil;
      GetThemeMargins := nil;
      GetThemeIntList := nil;
      GetThemePropertyOrigin := nil;
      SetWindowTheme := nil;
      GetThemeFilename := nil;
      GetThemeSysColor := nil;
      GetThemeSysColorBrush := nil;
      GetThemeSysBool := nil;
      GetThemeSysSize := nil;
      GetThemeSysFont := nil;
      GetThemeSysString := nil;
      GetThemeSysInt := nil;
      IsThemeActive := nil;
      IsAppThemed := nil;
      GetWindowTheme := nil;
      EnableThemeDialogTexture := nil;
      IsThemeDialogTextureEnabled := nil;
      GetThemeAppProperties := nil;
      SetThemeAppProperties := nil;
      GetCurrentThemeName := nil;
      GetThemeDocumentationProperty := nil;
      DrawThemeParentBackground := nil;
      EnableTheming := nil;
    end;
  finally
    Lock.Leave;
  end;
end;

function InitThemeLibrary: Boolean;
begin
  if Lock = nil then
    Exit(False);

  Lock.Enter;
  try
    Inc(ReferenceCount);

    if ThemeLibrary = 0 then
    begin
      ThemeLibrary := LoadLibrary(themelib);
      if ThemeLibrary > 0 then
      begin
        OpenThemeData := GetProcAddress(ThemeLibrary, 'OpenThemeData');
        CloseThemeData := GetProcAddress(ThemeLibrary, 'CloseThemeData');
        DrawThemeBackground := GetProcAddress(ThemeLibrary, 'DrawThemeBackground');
        DrawThemeText := GetProcAddress(ThemeLibrary, 'DrawThemeText');
        GetThemeBackgroundContentRect := GetProcAddress(ThemeLibrary, 'GetThemeBackgroundContentRect');
        GetThemeBackgroundExtent := GetProcAddress(ThemeLibrary, 'GetThemeBackgroundExtent');
        GetThemePartSize := GetProcAddress(ThemeLibrary, 'GetThemePartSize');
        GetThemeTextExtent := GetProcAddress(ThemeLibrary, 'GetThemeTextExtent');
        GetThemeTextMetrics := GetProcAddress(ThemeLibrary, 'GetThemeTextMetrics');
        GetThemeBackgroundRegion := GetProcAddress(ThemeLibrary, 'GetThemeBackgroundRegion');
        HitTestThemeBackground := GetProcAddress(ThemeLibrary, 'HitTestThemeBackground');
        DrawThemeEdge := GetProcAddress(ThemeLibrary, 'DrawThemeEdge');
        DrawThemeIcon := GetProcAddress(ThemeLibrary, 'DrawThemeIcon');
        IsThemePartDefined := GetProcAddress(ThemeLibrary, 'IsThemePartDefined');
        IsThemeBackgroundPartiallyTransparent := GetProcAddress(ThemeLibrary, 'IsThemeBackgroundPartiallyTransparent');
        GetThemeColor := GetProcAddress(ThemeLibrary, 'GetThemeColor');
        GetThemeMetric := GetProcAddress(ThemeLibrary, 'GetThemeMetric');
        GetThemeString := GetProcAddress(ThemeLibrary, 'GetThemeString');
        GetThemeBool := GetProcAddress(ThemeLibrary, 'GetThemeBool');
        GetThemeInt := GetProcAddress(ThemeLibrary, 'GetThemeInt');
        GetThemeEnumValue := GetProcAddress(ThemeLibrary, 'GetThemeEnumValue');
        GetThemePosition := GetProcAddress(ThemeLibrary, 'GetThemePosition');
        GetThemeFont := GetProcAddress(ThemeLibrary, 'GetThemeFont');
        GetThemeRect := GetProcAddress(ThemeLibrary, 'GetThemeRect');
        GetThemeMargins := GetProcAddress(ThemeLibrary, 'GetThemeMargins');
        GetThemeIntList := GetProcAddress(ThemeLibrary, 'GetThemeIntList');
        GetThemePropertyOrigin := GetProcAddress(ThemeLibrary, 'GetThemePropertyOrigin');
        SetWindowTheme := GetProcAddress(ThemeLibrary, 'SetWindowTheme');
        GetThemeFilename := GetProcAddress(ThemeLibrary, 'GetThemeFilename');
        GetThemeSysColor := GetProcAddress(ThemeLibrary, 'GetThemeSysColor');
        GetThemeSysColorBrush := GetProcAddress(ThemeLibrary, 'GetThemeSysColorBrush');
        GetThemeSysBool := GetProcAddress(ThemeLibrary, 'GetThemeSysBool');
        GetThemeSysSize := GetProcAddress(ThemeLibrary, 'GetThemeSysSize');
        GetThemeSysFont := GetProcAddress(ThemeLibrary, 'GetThemeSysFont');
        GetThemeSysString := GetProcAddress(ThemeLibrary, 'GetThemeSysString');
        GetThemeSysInt := GetProcAddress(ThemeLibrary, 'GetThemeSysInt');
        IsThemeActive := GetProcAddress(ThemeLibrary, 'IsThemeActive');
        IsAppThemed := GetProcAddress(ThemeLibrary, 'IsAppThemed');
        GetWindowTheme := GetProcAddress(ThemeLibrary, 'GetWindowTheme');
        EnableThemeDialogTexture := GetProcAddress(ThemeLibrary, 'EnableThemeDialogTexture');
        IsThemeDialogTextureEnabled := GetProcAddress(ThemeLibrary, 'IsThemeDialogTextureEnabled');
        GetThemeAppProperties := GetProcAddress(ThemeLibrary, 'GetThemeAppProperties');
        SetThemeAppProperties := GetProcAddress(ThemeLibrary, 'SetThemeAppProperties');
        GetCurrentThemeName := GetProcAddress(ThemeLibrary, 'GetCurrentThemeName');
        GetThemeDocumentationProperty := GetProcAddress(ThemeLibrary, 'GetThemeDocumentationProperty');
        DrawThemeParentBackground := GetProcAddress(ThemeLibrary, 'DrawThemeParentBackground');
        EnableTheming := GetProcAddress(ThemeLibrary, 'EnableTheming');
      end;
    end;
    Result := ThemeLibrary > 0;
  finally
    Lock.Leave;
  end;
end;

function UseThemes: Boolean;
begin
  if (ThemeLibrary > 0) and (Lock <> nil) then
    Result := IsAppThemed and IsThemeActive
  else
    Result := False;
end;

initialization
  Lock := TCriticalSection.Create;
finalization
  while ReferenceCount > 0 do
    FreeThemeLibrary;
  Lock.Free;
  Lock := nil;
end.
