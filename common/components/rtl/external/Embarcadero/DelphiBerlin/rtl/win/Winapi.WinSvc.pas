{*******************************************************}
{                                                       }
{                Delphi Runtime Library                 }
{                                                       }
{     File: winsvc.h                                    }
{     Copyright (c) 1995-1998 Microsoft Corporation.    }
{                                                       }
{       Translator: Embarcadero Technologies, Inc.      }
{ Copyright(c) 2016 Embarcadero Technologies, Inc.      }
{              All rights reserved                      }
{                                                       }
{*******************************************************}

{*******************************************************}
{       Win32 service API interface unit                }
{*******************************************************}

unit Winapi.WinSvc;

{$ALIGN ON}
{$MINENUMSIZE 4}
{$WEAKPACKAGEUNIT}
{$HPPEMIT '#include <winsvc.h>'}

interface

uses Winapi.Windows;

// from winnt.h
const
// Service Types (Bit Mask)
//
  {$EXTERNALSYM SERVICE_KERNEL_DRIVER}
  SERVICE_KERNEL_DRIVER         = $00000001;
  {$EXTERNALSYM SERVICE_FILE_SYSTEM_DRIVER}
  SERVICE_FILE_SYSTEM_DRIVER    = $00000002;
  {$EXTERNALSYM SERVICE_ADAPTER}
  SERVICE_ADAPTER               = $00000004;
  {$EXTERNALSYM SERVICE_RECOGNIZER_DRIVER}
  SERVICE_RECOGNIZER_DRIVER     = $00000008;

  {$EXTERNALSYM SERVICE_DRIVER}
  SERVICE_DRIVER                = (SERVICE_KERNEL_DRIVER or
                                   SERVICE_FILE_SYSTEM_DRIVER or
                                   SERVICE_RECOGNIZER_DRIVER);

  {$EXTERNALSYM SERVICE_WIN32_OWN_PROCESS}
  SERVICE_WIN32_OWN_PROCESS     = $00000010;
  {$EXTERNALSYM SERVICE_WIN32_SHARE_PROCESS}
  SERVICE_WIN32_SHARE_PROCESS   = $00000020;
  {$EXTERNALSYM SERVICE_WIN32}
  SERVICE_WIN32                 = (SERVICE_WIN32_OWN_PROCESS or
                                   SERVICE_WIN32_SHARE_PROCESS);

  {$EXTERNALSYM SERVICE_INTERACTIVE_PROCESS}
  SERVICE_INTERACTIVE_PROCESS   = $00000100;

  {$EXTERNALSYM SERVICE_TYPE_ALL}
  SERVICE_TYPE_ALL              = (SERVICE_WIN32 or
                                  SERVICE_ADAPTER or
                                  SERVICE_DRIVER or
                                  SERVICE_INTERACTIVE_PROCESS);

//
// Start Type
//
  {$EXTERNALSYM SERVICE_BOOT_START}
  SERVICE_BOOT_START            = $00000000;
  {$EXTERNALSYM SERVICE_SYSTEM_START}
  SERVICE_SYSTEM_START          = $00000001;
  {$EXTERNALSYM SERVICE_AUTO_START}
  SERVICE_AUTO_START            = $00000002;
  {$EXTERNALSYM SERVICE_DEMAND_START}
  SERVICE_DEMAND_START          = $00000003;
  {$EXTERNALSYM SERVICE_DISABLED}
  SERVICE_DISABLED              = $00000004;

//
// Error control type
//
  {$EXTERNALSYM SERVICE_ERROR_IGNORE}
  SERVICE_ERROR_IGNORE          = $00000000;
  {$EXTERNALSYM SERVICE_ERROR_NORMAL}
  SERVICE_ERROR_NORMAL          = $00000001;
  {$EXTERNALSYM SERVICE_ERROR_SEVERE}
  SERVICE_ERROR_SEVERE          = $00000002;
  {$EXTERNALSYM SERVICE_ERROR_CRITICAL}
  SERVICE_ERROR_CRITICAL        = $00000003;

// From winsvc.h
//
// Constants
//

const

//
// Service database names
//
  {$EXTERNALSYM SERVICES_ACTIVE_DATABASEA}
  SERVICES_ACTIVE_DATABASEA: AnsiString     = 'ServicesActive';
  {$EXTERNALSYM SERVICES_ACTIVE_DATABASEW}
  SERVICES_ACTIVE_DATABASEW                 = 'ServicesActive';
  {$EXTERNALSYM SERVICES_ACTIVE_DATABASE}
  SERVICES_ACTIVE_DATABASE = SERVICES_ACTIVE_DATABASEW;
  {$EXTERNALSYM SERVICES_FAILED_DATABASEA}
  SERVICES_FAILED_DATABASEA: AnsiString     = 'ServicesFailed';
  {$EXTERNALSYM SERVICES_FAILED_DATABASEW}
  SERVICES_FAILED_DATABASEW                  = 'ServicesFailed';
  {$EXTERNALSYM SERVICES_FAILED_DATABASE}
  SERVICES_FAILED_DATABASE = SERVICES_FAILED_DATABASEW;

//
// Character to designate that a name is a group
//
  {$EXTERNALSYM SC_GROUP_IDENTIFIERA}
  SC_GROUP_IDENTIFIERA: AnsiChar          = '+';
  {$EXTERNALSYM SC_GROUP_IDENTIFIERW}
  SC_GROUP_IDENTIFIERW                    = '+';
  {$EXTERNALSYM SC_GROUP_IDENTIFIER}
  SC_GROUP_IDENTIFIER = SC_GROUP_IDENTIFIERW;

//
// Value to indicate no change to an optional parameter
//
  {$EXTERNALSYM SERVICE_NO_CHANGE}
  SERVICE_NO_CHANGE              = $FFFFFFFF;

//
// Service State -- for Enum Requests (Bit Mask)
//
  {$EXTERNALSYM SERVICE_ACTIVE}
  SERVICE_ACTIVE                 = $00000001;
  {$EXTERNALSYM SERVICE_INACTIVE}
  SERVICE_INACTIVE               = $00000002;
  {$EXTERNALSYM SERVICE_STATE_ALL}
  SERVICE_STATE_ALL              = (SERVICE_ACTIVE   or
                                    SERVICE_INACTIVE);

//
// Controls
//
  {$EXTERNALSYM SERVICE_CONTROL_STOP}
  SERVICE_CONTROL_STOP                   = $00000001;
  {$EXTERNALSYM SERVICE_CONTROL_PAUSE}
  SERVICE_CONTROL_PAUSE                  = $00000002;
  {$EXTERNALSYM SERVICE_CONTROL_CONTINUE}
  SERVICE_CONTROL_CONTINUE               = $00000003;
  {$EXTERNALSYM SERVICE_CONTROL_INTERROGATE}
  SERVICE_CONTROL_INTERROGATE            = $00000004;
  {$EXTERNALSYM SERVICE_CONTROL_SHUTDOWN}
  SERVICE_CONTROL_SHUTDOWN               = $00000005;
  {$EXTERNALSYM SERVICE_CONTROL_PARAMCHANGE}
  SERVICE_CONTROL_PARAMCHANGE            = $00000006;
  {$EXTERNALSYM SERVICE_CONTROL_NETBINDADD}
  SERVICE_CONTROL_NETBINDADD             = $00000007;
  {$EXTERNALSYM SERVICE_CONTROL_NETBINDREMOVE}
  SERVICE_CONTROL_NETBINDREMOVE          = $00000008;
  {$EXTERNALSYM SERVICE_CONTROL_NETBINDENABLE}
  SERVICE_CONTROL_NETBINDENABLE          = $00000009;
  {$EXTERNALSYM SERVICE_CONTROL_NETBINDDISABLE}
  SERVICE_CONTROL_NETBINDDISABLE         = $0000000A;
  {$EXTERNALSYM SERVICE_CONTROL_DEVICEEVENT}
  SERVICE_CONTROL_DEVICEEVENT            = $0000000B;
  {$EXTERNALSYM SERVICE_CONTROL_HARDWAREPROFILECHANGE}
  SERVICE_CONTROL_HARDWAREPROFILECHANGE  = $0000000C;
  {$EXTERNALSYM SERVICE_CONTROL_POWEREVENT}
  SERVICE_CONTROL_POWEREVENT             = $0000000D;
  {$EXTERNALSYM SERVICE_CONTROL_SESSIONCHANGE}
  SERVICE_CONTROL_SESSIONCHANGE          = $0000000E;
  {$EXTERNALSYM SERVICE_CONTROL_PRESHUTDOWN}
  SERVICE_CONTROL_PRESHUTDOWN            = $0000000F;
  {$EXTERNALSYM SERVICE_CONTROL_TIMECHANGE}
  SERVICE_CONTROL_TIMECHANGE             = $00000010;
  {$EXTERNALSYM SERVICE_CONTROL_TRIGGEREVENT}
  SERVICE_CONTROL_TRIGGEREVENT           = $00000020;
//
// Service State -- for CurrentState
//
  {$EXTERNALSYM SERVICE_STOPPED}
  SERVICE_STOPPED                = $00000001;
  {$EXTERNALSYM SERVICE_START_PENDING}
  SERVICE_START_PENDING          = $00000002;
  {$EXTERNALSYM SERVICE_STOP_PENDING}
  SERVICE_STOP_PENDING           = $00000003;
  {$EXTERNALSYM SERVICE_RUNNING}
  SERVICE_RUNNING                = $00000004;
  {$EXTERNALSYM SERVICE_CONTINUE_PENDING}
  SERVICE_CONTINUE_PENDING       = $00000005;
  {$EXTERNALSYM SERVICE_PAUSE_PENDING}
  SERVICE_PAUSE_PENDING          = $00000006;
  {$EXTERNALSYM SERVICE_PAUSED}
  SERVICE_PAUSED                 = $00000007;

//
// Controls Accepted  (Bit Mask)
//
  {$EXTERNALSYM SERVICE_ACCEPT_STOP}
  SERVICE_ACCEPT_STOP                    = $00000001;
  {$EXTERNALSYM SERVICE_ACCEPT_PAUSE_CONTINUE}
  SERVICE_ACCEPT_PAUSE_CONTINUE          = $00000002;
  {$EXTERNALSYM SERVICE_ACCEPT_SHUTDOWN}
  SERVICE_ACCEPT_SHUTDOWN                = $00000004;
  {$EXTERNALSYM SERVICE_ACCEPT_PARAMCHANGE}
  SERVICE_ACCEPT_PARAMCHANGE             = $00000008;
  {$EXTERNALSYM SERVICE_ACCEPT_NETBINDCHANGE}
  SERVICE_ACCEPT_NETBINDCHANGE           = $00000010;
  {$EXTERNALSYM SERVICE_ACCEPT_HARDWAREPROFILECHANGE}
  SERVICE_ACCEPT_HARDWAREPROFILECHANGE   = $00000020;
  {$EXTERNALSYM SERVICE_ACCEPT_POWEREVENT}
  SERVICE_ACCEPT_POWEREVENT              = $00000040;
  {$EXTERNALSYM SERVICE_ACCEPT_SESSIONCHANGE}
  SERVICE_ACCEPT_SESSIONCHANGE           = $00000080;
  {$EXTERNALSYM SERVICE_ACCEPT_PRESHUTDOWN}
  SERVICE_ACCEPT_PRESHUTDOWN             = $00000100;
  {$EXTERNALSYM SERVICE_ACCEPT_TIMECHANGE}
  SERVICE_ACCEPT_TIMECHANGE              = $00000200;
  {$EXTERNALSYM SERVICE_ACCEPT_TRIGGEREVENT}
  SERVICE_ACCEPT_TRIGGEREVENT            = $00000400;

//
// Service Control Manager object specific access types
//
  {$EXTERNALSYM SC_MANAGER_CONNECT}
  SC_MANAGER_CONNECT             = $0001;
  {$EXTERNALSYM SC_MANAGER_CREATE_SERVICE}
  SC_MANAGER_CREATE_SERVICE      = $0002;
  {$EXTERNALSYM SC_MANAGER_ENUMERATE_SERVICE}
  SC_MANAGER_ENUMERATE_SERVICE   = $0004;
  {$EXTERNALSYM SC_MANAGER_LOCK}
  SC_MANAGER_LOCK                = $0008;
  {$EXTERNALSYM SC_MANAGER_QUERY_LOCK_STATUS}
  SC_MANAGER_QUERY_LOCK_STATUS   = $0010;
  {$EXTERNALSYM SC_MANAGER_MODIFY_BOOT_CONFIG}
  SC_MANAGER_MODIFY_BOOT_CONFIG  = $0020;

  {$EXTERNALSYM SC_MANAGER_ALL_ACCESS}
  SC_MANAGER_ALL_ACCESS          = (STANDARD_RIGHTS_REQUIRED or
                                    SC_MANAGER_CONNECT or
                                    SC_MANAGER_CREATE_SERVICE or
                                    SC_MANAGER_ENUMERATE_SERVICE or
                                    SC_MANAGER_LOCK or
                                    SC_MANAGER_QUERY_LOCK_STATUS or
                                    SC_MANAGER_MODIFY_BOOT_CONFIG);

//
// Service object specific access type
//
  {$EXTERNALSYM SERVICE_QUERY_CONFIG}
  SERVICE_QUERY_CONFIG           = $0001;
  {$EXTERNALSYM SERVICE_CHANGE_CONFIG}
  SERVICE_CHANGE_CONFIG          = $0002;
  {$EXTERNALSYM SERVICE_QUERY_STATUS}
  SERVICE_QUERY_STATUS           = $0004;
  {$EXTERNALSYM SERVICE_ENUMERATE_DEPENDENTS}
  SERVICE_ENUMERATE_DEPENDENTS   = $0008;
  {$EXTERNALSYM SERVICE_START}
  SERVICE_START                  = $0010;
  {$EXTERNALSYM SERVICE_STOP}
  SERVICE_STOP                   = $0020;
  {$EXTERNALSYM SERVICE_PAUSE_CONTINUE}
  SERVICE_PAUSE_CONTINUE         = $0040;
  {$EXTERNALSYM SERVICE_INTERROGATE}
  SERVICE_INTERROGATE            = $0080;
  {$EXTERNALSYM SERVICE_USER_DEFINED_CONTROL}
  SERVICE_USER_DEFINED_CONTROL   = $0100;

  {$EXTERNALSYM SERVICE_ALL_ACCESS}
  SERVICE_ALL_ACCESS             = (STANDARD_RIGHTS_REQUIRED or
                                    SERVICE_QUERY_CONFIG or
                                    SERVICE_CHANGE_CONFIG or
                                    SERVICE_QUERY_STATUS or
                                    SERVICE_ENUMERATE_DEPENDENTS or
                                    SERVICE_START or
                                    SERVICE_STOP or
                                    SERVICE_PAUSE_CONTINUE or
                                    SERVICE_INTERROGATE or
                                    SERVICE_USER_DEFINED_CONTROL);

//
// Service flags for QueryServiceStatusEx
//

  {$EXTERNALSYM SERVICE_RUNS_IN_SYSTEM_PROCESS}
  SERVICE_RUNS_IN_SYSTEM_PROCESS  = $00000001;
//
// Info levels for ChangeServiceConfig2 and QueryServiceConfig2
//
  {$EXTERNALSYM SERVICE_CONFIG_DESCRIPTION}
  SERVICE_CONFIG_DESCRIPTION              = 1;
  {$EXTERNALSYM SERVICE_CONFIG_FAILURE_ACTIONS}
  SERVICE_CONFIG_FAILURE_ACTIONS          = 2;
  {$EXTERNALSYM SERVICE_CONFIG_DELAYED_AUTO_START_INFO}
  SERVICE_CONFIG_DELAYED_AUTO_START_INFO  = 3;
  {$EXTERNALSYM SERVICE_CONFIG_FAILURE_ACTIONS_FLAG}
  SERVICE_CONFIG_FAILURE_ACTIONS_FLAG     = 4;
  {$EXTERNALSYM SERVICE_CONFIG_SERVICE_SID_INFO}
  SERVICE_CONFIG_SERVICE_SID_INFO         = 5;
  {$EXTERNALSYM SERVICE_CONFIG_REQUIRED_PRIVILEGES_INFO}
  SERVICE_CONFIG_REQUIRED_PRIVILEGES_INFO = 6;
  {$EXTERNALSYM SERVICE_CONFIG_PRESHUTDOWN_INFO}
  SERVICE_CONFIG_PRESHUTDOWN_INFO         = 7;
  {$EXTERNALSYM SERVICE_CONFIG_TRIGGER_INFO}
  SERVICE_CONFIG_TRIGGER_INFO             = 8;
  {$EXTERNALSYM SERVICE_CONFIG_PREFERRED_NODE}
  SERVICE_CONFIG_PREFERRED_NODE           = 9;

//
// Info levels for NotifyServiceStatusChange
//
  {$EXTERNALSYM SERVICE_NOTIFY_STATUS_CHANGE_1}
  SERVICE_NOTIFY_STATUS_CHANGE_1          = 1;
  {$EXTERNALSYM SERVICE_NOTIFY_STATUS_CHANGE_2}
  SERVICE_NOTIFY_STATUS_CHANGE_2          = 2;
  {$EXTERNALSYM SERVICE_NOTIFY_STATUS_CHANGE}
  SERVICE_NOTIFY_STATUS_CHANGE            = SERVICE_NOTIFY_STATUS_CHANGE_2;

//
// Service notification masks
//
  {$EXTERNALSYM SERVICE_NOTIFY_STOPPED}
  SERVICE_NOTIFY_STOPPED           = $00000001;
  {$EXTERNALSYM SERVICE_NOTIFY_START_PENDING}
  SERVICE_NOTIFY_START_PENDING     = $00000002;
  {$EXTERNALSYM SERVICE_NOTIFY_STOP_PENDING}
  SERVICE_NOTIFY_STOP_PENDING      = $00000004;
  {$EXTERNALSYM SERVICE_NOTIFY_RUNNING}
  SERVICE_NOTIFY_RUNNING           = $00000008;
  {$EXTERNALSYM SERVICE_NOTIFY_CONTINUE_PENDING}
  SERVICE_NOTIFY_CONTINUE_PENDING  = $00000010;
  {$EXTERNALSYM SERVICE_NOTIFY_PAUSE_PENDING}
  SERVICE_NOTIFY_PAUSE_PENDING     = $00000020;
  {$EXTERNALSYM SERVICE_NOTIFY_PAUSED}
  SERVICE_NOTIFY_PAUSED            = $00000040;
  {$EXTERNALSYM SERVICE_NOTIFY_CREATED}
  SERVICE_NOTIFY_CREATED           = $00000080;
  {$EXTERNALSYM SERVICE_NOTIFY_DELETED}
  SERVICE_NOTIFY_DELETED           = $00000100;
  {$EXTERNALSYM SERVICE_NOTIFY_DELETE_PENDING}
  SERVICE_NOTIFY_DELETE_PENDING    = $00000200;

//
// The following defines are for service stop reason codes
//

//
// Stop reason flags. Update SERVICE_STOP_REASON_FLAG_MAX when
// new flags are added.
//
  {$EXTERNALSYM SERVICE_STOP_REASON_FLAG_MIN}
  SERVICE_STOP_REASON_FLAG_MIN                            = $00000000;
  {$EXTERNALSYM SERVICE_STOP_REASON_FLAG_UNPLANNED}
  SERVICE_STOP_REASON_FLAG_UNPLANNED                      = $10000000;
  {$EXTERNALSYM SERVICE_STOP_REASON_FLAG_CUSTOM}
  SERVICE_STOP_REASON_FLAG_CUSTOM                         = $20000000;
  {$EXTERNALSYM SERVICE_STOP_REASON_FLAG_PLANNED}
  SERVICE_STOP_REASON_FLAG_PLANNED                        = $40000000;
  {$EXTERNALSYM SERVICE_STOP_REASON_FLAG_MAX}
  SERVICE_STOP_REASON_FLAG_MAX                            = $80000000;

//
// Microsoft major reasons. Update SERVICE_STOP_REASON_MAJOR_MAX when
// new codes are added.
//

  {$EXTERNALSYM SERVICE_STOP_REASON_MAJOR_MIN}
  SERVICE_STOP_REASON_MAJOR_MIN                           = $00000000;
  {$EXTERNALSYM SERVICE_STOP_REASON_MAJOR_OTHER}
  SERVICE_STOP_REASON_MAJOR_OTHER                         = $00010000;
  {$EXTERNALSYM SERVICE_STOP_REASON_MAJOR_HARDWARE}
  SERVICE_STOP_REASON_MAJOR_HARDWARE                      = $00020000;
  {$EXTERNALSYM SERVICE_STOP_REASON_MAJOR_OPERATINGSYSTEM}
  SERVICE_STOP_REASON_MAJOR_OPERATINGSYSTEM               = $00030000;
  {$EXTERNALSYM SERVICE_STOP_REASON_MAJOR_SOFTWARE}
  SERVICE_STOP_REASON_MAJOR_SOFTWARE                      = $00040000;
  {$EXTERNALSYM SERVICE_STOP_REASON_MAJOR_APPLICATION}
  SERVICE_STOP_REASON_MAJOR_APPLICATION                   = $00050000;
  {$EXTERNALSYM SERVICE_STOP_REASON_MAJOR_NONE}
  SERVICE_STOP_REASON_MAJOR_NONE                          = $00060000;
  {$EXTERNALSYM SERVICE_STOP_REASON_MAJOR_MAX}
  SERVICE_STOP_REASON_MAJOR_MAX                           = $00070000;
  {$EXTERNALSYM SERVICE_STOP_REASON_MAJOR_MIN_CUSTOM}
  SERVICE_STOP_REASON_MAJOR_MIN_CUSTOM                    = $00400000;
  {$EXTERNALSYM SERVICE_STOP_REASON_MAJOR_MAX_CUSTOM}
  SERVICE_STOP_REASON_MAJOR_MAX_CUSTOM                    = $00ff0000;

//
// Microsoft minor reasons. Update SERVICE_STOP_REASON_MINOR_MAX when
// new codes are added.
//
  {$EXTERNALSYM SERVICE_STOP_REASON_MINOR_MIN}
  SERVICE_STOP_REASON_MINOR_MIN                           = $00000000;
  {$EXTERNALSYM SERVICE_STOP_REASON_MINOR_OTHER}
  SERVICE_STOP_REASON_MINOR_OTHER                         = $00000001;
  {$EXTERNALSYM SERVICE_STOP_REASON_MINOR_MAINTENANCE}
  SERVICE_STOP_REASON_MINOR_MAINTENANCE                   = $00000002;
  {$EXTERNALSYM SERVICE_STOP_REASON_MINOR_INSTALLATION}
  SERVICE_STOP_REASON_MINOR_INSTALLATION                  = $00000003;
  {$EXTERNALSYM SERVICE_STOP_REASON_MINOR_UPGRADE}
  SERVICE_STOP_REASON_MINOR_UPGRADE                       = $00000004;
  {$EXTERNALSYM SERVICE_STOP_REASON_MINOR_RECONFIG}
  SERVICE_STOP_REASON_MINOR_RECONFIG                      = $00000005;
  {$EXTERNALSYM SERVICE_STOP_REASON_MINOR_HUNG}
  SERVICE_STOP_REASON_MINOR_HUNG                          = $00000006;
  {$EXTERNALSYM SERVICE_STOP_REASON_MINOR_UNSTABLE}
  SERVICE_STOP_REASON_MINOR_UNSTABLE                      = $00000007;
  {$EXTERNALSYM SERVICE_STOP_REASON_MINOR_DISK}
  SERVICE_STOP_REASON_MINOR_DISK                          = $00000008;
  {$EXTERNALSYM SERVICE_STOP_REASON_MINOR_NETWORKCARD}
  SERVICE_STOP_REASON_MINOR_NETWORKCARD                   = $00000009;
  {$EXTERNALSYM SERVICE_STOP_REASON_MINOR_ENVIRONMENT}
  SERVICE_STOP_REASON_MINOR_ENVIRONMENT                   = $0000000a;
  {$EXTERNALSYM SERVICE_STOP_REASON_MINOR_HARDWARE_DRIVER}
  SERVICE_STOP_REASON_MINOR_HARDWARE_DRIVER               = $0000000b;
  {$EXTERNALSYM SERVICE_STOP_REASON_MINOR_OTHERDRIVER}
  SERVICE_STOP_REASON_MINOR_OTHERDRIVER                   = $0000000c;
  {$EXTERNALSYM SERVICE_STOP_REASON_MINOR_SERVICEPACK}
  SERVICE_STOP_REASON_MINOR_SERVICEPACK                   = $0000000d;
  {$EXTERNALSYM SERVICE_STOP_REASON_MINOR_SOFTWARE_UPDATE}
  SERVICE_STOP_REASON_MINOR_SOFTWARE_UPDATE               = $0000000e;
  {$EXTERNALSYM SERVICE_STOP_REASON_MINOR_SECURITYFIX}
  SERVICE_STOP_REASON_MINOR_SECURITYFIX                   = $0000000f;
  {$EXTERNALSYM SERVICE_STOP_REASON_MINOR_SECURITY}
  SERVICE_STOP_REASON_MINOR_SECURITY                      = $00000010;
  {$EXTERNALSYM SERVICE_STOP_REASON_MINOR_NETWORK_CONNECTIVITY}
  SERVICE_STOP_REASON_MINOR_NETWORK_CONNECTIVITY          = $00000011;
  {$EXTERNALSYM SERVICE_STOP_REASON_MINOR_WMI}
  SERVICE_STOP_REASON_MINOR_WMI                           = $00000012;
  {$EXTERNALSYM SERVICE_STOP_REASON_MINOR_SERVICEPACK_UNINSTALL}
  SERVICE_STOP_REASON_MINOR_SERVICEPACK_UNINSTALL         = $00000013;
  {$EXTERNALSYM SERVICE_STOP_REASON_MINOR_SOFTWARE_UPDATE_UNINSTALL}
  SERVICE_STOP_REASON_MINOR_SOFTWARE_UPDATE_UNINSTALL     = $00000014;
  {$EXTERNALSYM SERVICE_STOP_REASON_MINOR_SECURITYFIX_UNINSTALL}
  SERVICE_STOP_REASON_MINOR_SECURITYFIX_UNINSTALL         = $00000015;
  {$EXTERNALSYM SERVICE_STOP_REASON_MINOR_MMC}
  SERVICE_STOP_REASON_MINOR_MMC                           = $00000016;
  {$EXTERNALSYM SERVICE_STOP_REASON_MINOR_NONE}
  SERVICE_STOP_REASON_MINOR_NONE                          = $00000017;
  {$EXTERNALSYM SERVICE_STOP_REASON_MINOR_MAX}
  SERVICE_STOP_REASON_MINOR_MAX                           = $00000018;
  {$EXTERNALSYM SERVICE_STOP_REASON_MINOR_MIN_CUSTOM}
  SERVICE_STOP_REASON_MINOR_MIN_CUSTOM                    = $00000100;
  {$EXTERNALSYM SERVICE_STOP_REASON_MINOR_MAX_CUSTOM}
  SERVICE_STOP_REASON_MINOR_MAX_CUSTOM                    = $0000FFFF;

//
// Info levels for ControlServiceEx
//
  {$EXTERNALSYM SERVICE_CONTROL_STATUS_REASON_INFO}
  SERVICE_CONTROL_STATUS_REASON_INFO     = 1;

//
// Service SID types supported
//
  {$EXTERNALSYM SERVICE_SID_TYPE_NONE}
  SERVICE_SID_TYPE_NONE                                   = $00000000;
  {$EXTERNALSYM SERVICE_SID_TYPE_UNRESTRICTED}
  SERVICE_SID_TYPE_UNRESTRICTED                           = $00000001;
  {$EXTERNALSYM SERVICE_SID_TYPE_RESTRICTED}
  SERVICE_SID_TYPE_RESTRICTED  = ( $00000002 or SERVICE_SID_TYPE_UNRESTRICTED);

//
// Service trigger types
//

  {$EXTERNALSYM SERVICE_TRIGGER_TYPE_DEVICE_INTERFACE_ARRIVAL}
  SERVICE_TRIGGER_TYPE_DEVICE_INTERFACE_ARRIVAL               = 1;
  {$EXTERNALSYM SERVICE_TRIGGER_TYPE_IP_ADDRESS_AVAILABILITY}
  SERVICE_TRIGGER_TYPE_IP_ADDRESS_AVAILABILITY                = 2;
  {$EXTERNALSYM SERVICE_TRIGGER_TYPE_DOMAIN_JOIN}
  SERVICE_TRIGGER_TYPE_DOMAIN_JOIN                            = 3;
  {$EXTERNALSYM SERVICE_TRIGGER_TYPE_FIREWALL_PORT_EVENT}
  SERVICE_TRIGGER_TYPE_FIREWALL_PORT_EVENT                    = 4;
  {$EXTERNALSYM SERVICE_TRIGGER_TYPE_GROUP_POLICY}
  SERVICE_TRIGGER_TYPE_GROUP_POLICY                           = 5;
  {$EXTERNALSYM SERVICE_TRIGGER_TYPE_CUSTOM}
  SERVICE_TRIGGER_TYPE_CUSTOM                                 = 20;

//
// Service trigger data types
//
  {$EXTERNALSYM SERVICE_TRIGGER_DATA_TYPE_BINARY}
  SERVICE_TRIGGER_DATA_TYPE_BINARY                            = 1;
  {$EXTERNALSYM SERVICE_TRIGGER_DATA_TYPE_STRING}
  SERVICE_TRIGGER_DATA_TYPE_STRING                            = 2;


//
//  NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID & NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID are used with
//  SERVICE_TRIGGER_TYPE_IP_ADDRESS_AVAILABILITY trigger.
//
  {$EXTERNALSYM NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID}
  NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID: TGUID = '{4f27f2de-14e2-430b-a549-7cd48cbc8245}';

  {$EXTERNALSYM NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID}
  NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID: TGUID = '{cc4ba62a-162e-4648-847a-b6bdf993e335}';

//
//  DOMAIN_JOIN_GUID & DOMAIN_LEAVE_GUID are used with SERVICE_TRIGGER_TYPE_DOMAIN_JOIN trigger.
//
  {$EXTERNALSYM DOMAIN_JOIN_GUID}
  DOMAIN_JOIN_GUID: TGUID = '{1ce20aba-9851-4421-9430-1ddeb766e809}';

  {$EXTERNALSYM DOMAIN_LEAVE_GUID}
  DOMAIN_LEAVE_GUID: TGUID = '{ddaf516e-58c2-4866-9574-c3b615d42ea1}';

//
//  FIREWALL_PORT_OPEN_GUID & FIREWALL_PORT_CLOSE_GUID are used with
//  SERVICE_TRIGGER_TYPE_FIREWALL_PORT_EVENT trigger.
//
  {$EXTERNALSYM FIREWALL_PORT_OPEN_GUID}
  FIREWALL_PORT_OPEN_GUID: TGUID = '{b7569e07-8421-4ee0-ad10-86915afdad09}';

  {$EXTERNALSYM FIREWALL_PORT_CLOSE_GUID}
  FIREWALL_PORT_CLOSE_GUID: TGUID = '{a144ed38-8e12-4de4-9d96-e64740b1a524}';

//
//  MACHINE_POLICY_PRESENT_GUID & USER_POLICY_PRESENT_GUID are used with
//  SERVICE_TRIGGER_TYPE_GROUP_POLICY trigger.
//
  {$EXTERNALSYM MACHINE_POLICY_PRESENT_GUID}
  MACHINE_POLICY_PRESENT_GUID: TGUID = '{659FCAE6-5BDB-4DA9-B1FF-CA2A178D46E0}';

  {$EXTERNALSYM USER_POLICY_PRESENT_GUID}
  USER_POLICY_PRESENT_GUID: TGUID = '{54FB46C8-F089-464C-B1FD-59D1B62C3B50}';
//
// Service trigger actions
//
  {$EXTERNALSYM SERVICE_TRIGGER_ACTION_SERVICE_START}
  SERVICE_TRIGGER_ACTION_SERVICE_START                      = 1;
  {$EXTERNALSYM SERVICE_TRIGGER_ACTION_SERVICE_STOP}
  SERVICE_TRIGGER_ACTION_SERVICE_STOP                       = 2;

//
// argv[1] passed into ServiceMain of trigger started services
//
  {$EXTERNALSYM SERVICE_TRIGGER_STARTED_ARGUMENT}
  SERVICE_TRIGGER_STARTED_ARGUMENT               = 'TriggerStarted';

//
// Service description string
//
type
  {$EXTERNALSYM LPSERVICE_DESCRIPTIONA}
  LPSERVICE_DESCRIPTIONA = ^SERVICE_DESCRIPTIONA;
  {$EXTERNALSYM LPSERVICE_DESCRIPTIONW}
  LPSERVICE_DESCRIPTIONW = ^SERVICE_DESCRIPTIONW;
  {$EXTERNALSYM LPSERVICE_DESCRIPTION}
  LPSERVICE_DESCRIPTION = LPSERVICE_DESCRIPTIONW;
  {$EXTERNALSYM SERVICE_DESCRIPTIONA}
  SERVICE_DESCRIPTIONA = record
    lpDescription: LPSTR;
  end;
  {$EXTERNALSYM SERVICE_DESCRIPTIONW}
  SERVICE_DESCRIPTIONW = record
    lpDescription: LPWSTR;
  end;
  {$EXTERNALSYM SERVICE_DESCRIPTION}
  SERVICE_DESCRIPTION = SERVICE_DESCRIPTIONW;

//
// Actions to take on service failure
//
  {$EXTERNALSYM SC_ACTION_TYPE}
  SC_ACTION_TYPE = (SC_ACTION_NONE          = 0,
                    SC_ACTION_RESTART       = 1,
                    SC_ACTION_REBOOT        = 2,
                    SC_ACTION_RUN_COMMAND   = 3);
  {$EXTERNALSYM LPSC_ACTION}
  LPSC_ACTION = ^SC_ACTION;
  {$EXTERNALSYM SC_ACTION}
  SC_ACTION  = record
    &Type: SC_ACTION_TYPE;
    Delay: DWORD;
  end;

  {$EXTERNALSYM LPSERVICE_FAILURE_ACTIONSA}
  LPSERVICE_FAILURE_ACTIONSA = ^SERVICE_FAILURE_ACTIONSA;
  {$EXTERNALSYM LPSERVICE_FAILURE_ACTIONSW}
  LPSERVICE_FAILURE_ACTIONSW = ^SERVICE_FAILURE_ACTIONSW;
  {$EXTERNALSYM LPSERVICE_FAILURE_ACTIONS}
  LPSERVICE_FAILURE_ACTIONS = LPSERVICE_FAILURE_ACTIONSW;
  {$EXTERNALSYM SERVICE_FAILURE_ACTIONSA}
  SERVICE_FAILURE_ACTIONSA = record
    dwResetPeriod: DWORD;
    lpRebootMsg: LPSTR;
    lpCommand: LPSTR;
    cActions: DWORD;
    lpsaActions: LPSC_ACTION;
  end;
  {$EXTERNALSYM SERVICE_FAILURE_ACTIONSW}
  SERVICE_FAILURE_ACTIONSW = record
    dwResetPeriod: DWORD;
    lpRebootMsg: LPWSTR;
    lpCommand: LPWSTR;
    cActions: DWORD;
    lpsaActions: LPSC_ACTION;
  end;
  {$EXTERNALSYM SERVICE_FAILURE_ACTIONS}
  SERVICE_FAILURE_ACTIONS = SERVICE_FAILURE_ACTIONSW;

//
// Service delayed autostart info setting
//
  {$EXTERNALSYM LPSERVICE_DELAYED_AUTO_START_INFO}
  LPSERVICE_DELAYED_AUTO_START_INFO = ^SERVICE_DELAYED_AUTO_START_INFO;
  {$EXTERNALSYM SERVICE_DELAYED_AUTO_START_INFO}
  SERVICE_DELAYED_AUTO_START_INFO = record
    fDelayedAutostart: Bool;      // Delayed autostart flag
  end;

//
// Service failure actions flag setting
//
  {$EXTERNALSYM LPSERVICE_FAILURE_ACTIONS_FLAG}
  LPSERVICE_FAILURE_ACTIONS_FLAG = ^SERVICE_FAILURE_ACTIONS_FLAG;
  {$EXTERNALSYM SERVICE_FAILURE_ACTIONS_FLAG}
  SERVICE_FAILURE_ACTIONS_FLAG = record
    fFailureActionsOnNonCrashFailures:       BOOL;       // Failure actions flag
  end;

//
// Service SID info setting
//
  {$EXTERNALSYM LPSERVICE_SID_INFO}
  LPSERVICE_SID_INFO = ^SERVICE_SID_INFO;
  {$EXTERNALSYM SERVICE_SID_INFO}
  SERVICE_SID_INFO = record
    dwServiceSidType:       DWORD;    // Service SID type
  end;

//
// Service required privileges information
//
  {$EXTERNALSYM LPSERVICE_REQUIRED_PRIVILEGES_INFOA}
  LPSERVICE_REQUIRED_PRIVILEGES_INFOA = ^SERVICE_REQUIRED_PRIVILEGES_INFOA;
  {$EXTERNALSYM LPSERVICE_REQUIRED_PRIVILEGES_INFOW}
  LPSERVICE_REQUIRED_PRIVILEGES_INFOW = ^SERVICE_REQUIRED_PRIVILEGES_INFOW;
  {$EXTERNALSYM LPSERVICE_REQUIRED_PRIVILEGES_INFO}
  LPSERVICE_REQUIRED_PRIVILEGES_INFO = LPSERVICE_REQUIRED_PRIVILEGES_INFOW;
  {$EXTERNALSYM SERVICE_REQUIRED_PRIVILEGES_INFOA}
  SERVICE_REQUIRED_PRIVILEGES_INFOA = record
    pmszRequiredPrivileges:       LPSTR;            // Required privileges multi-sz
  end;
  {$EXTERNALSYM SERVICE_REQUIRED_PRIVILEGES_INFOW}
  SERVICE_REQUIRED_PRIVILEGES_INFOW = record
    pmszRequiredPrivileges:       LPWSTR;            // Required privileges multi-sz
  end;
  {$EXTERNALSYM SERVICE_REQUIRED_PRIVILEGES_INFO}
  SERVICE_REQUIRED_PRIVILEGES_INFO = SERVICE_REQUIRED_PRIVILEGES_INFOW;

//
// Service preshutdown timeout setting
//
  {$EXTERNALSYM LPSERVICE_PRESHUTDOWN_INFO}
  LPSERVICE_PRESHUTDOWN_INFO = ^SERVICE_PRESHUTDOWN_INFO;
  {$EXTERNALSYM SERVICE_PRESHUTDOWN_INFO}
  SERVICE_PRESHUTDOWN_INFO = record
    dwPreshutdownTimeout: DWORD;  // Timeout in msecs
  end;

//
//  Service trigger data item
//
  {$EXTERNALSYM PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM}
  PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM = ^SERVICE_TRIGGER_SPECIFIC_DATA_ITEM;
  {$EXTERNALSYM SERVICE_TRIGGER_SPECIFIC_DATA_ITEM}
  SERVICE_TRIGGER_SPECIFIC_DATA_ITEM = record
    dwDataType:   DWORD; // Data type -- one of SERVICE_TRIGGER_DATA_TYPE_* constants
    cbData:       DWORD; // Size of trigger specific data
    pData:        PBYTE; // Trigger specific data
  end;

//
//  Trigger-specific information
//
  {$EXTERNALSYM PSERVICE_TRIGGER}
  PSERVICE_TRIGGER = ^SERVICE_TRIGGER;
  {$EXTERNALSYM SERVICE_TRIGGER}
  SERVICE_TRIGGER = record
    dwTriggerType:              DWORD;                // One of SERVICE_TRIGGER_TYPE_* constants
    dwAction:                   DWORD;                // One of SERVICE_TRIGGER_ACTION_* constants
    pTriggerSubtype:            PGUID;                // Provider GUID if the trigger type is SERVICE_TRIGGER_TYPE_CUSTOM
                                                      // Device class interface GUID if the trigger type is
                                                      // SERVICE_TRIGGER_TYPE_DEVICE_INTERFACE_ARRIVAL
    cDataItems:                 DWORD;                // Number of data items in pDataItems array
    pDataItems:  PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM; // Trigger specific data
  end;

//
// Service trigger information
//
  {$EXTERNALSYM PSERVICE_TRIGGER_INFO}
  PSERVICE_TRIGGER_INFO = ^SERVICE_TRIGGER_INFO;
  {$EXTERNALSYM SERVICE_TRIGGER_INFO}
  SERVICE_TRIGGER_INFO = record
    cTriggers: DWORD;            // Number of triggers in the pTriggers array
    pTriggers: PSERVICE_TRIGGER; // Array of triggers
    pReserved: PBYTE;            // Reserved, must be NULL
  end;

//
// Preferred node information
//
  {$EXTERNALSYM LPSERVICE_PREFERRED_NODE_INFO}
  LPSERVICE_PREFERRED_NODE_INFO = ^SERVICE_PREFERRED_NODE_INFO;
  {$EXTERNALSYM SERVICE_PREFERRED_NODE_INFO}
  SERVICE_PREFERRED_NODE_INFO = record
    usPreferredNode: USHORT;   // Preferred node
    fDelete:         BOOLEAN;  // Delete the preferred node setting
  end;

//
// Time change information
//
  {$EXTERNALSYM PSERVICE_TIMECHANGE_INFO}
  PSERVICE_TIMECHANGE_INFO = ^SERVICE_TIMECHANGE_INFO;
  {$EXTERNALSYM SERVICE_TIMECHANGE_INFO}
  SERVICE_TIMECHANGE_INFO = record
    liNewTime:   LARGE_INTEGER;     // New time
    liOldTime:   LARGE_INTEGER;     // Old time
  end;

//
// Handle Types
//

  {$EXTERNALSYM SC_HANDLE}
  SC_HANDLE = THandle;
  {$EXTERNALSYM LPSC_HANDLE}
  LPSC_HANDLE = ^SC_HANDLE;

  {$EXTERNALSYM SERVICE_STATUS_HANDLE}
  SERVICE_STATUS_HANDLE = THandle;

//
// Info levels for QueryServiceStatusEx
//

  {$EXTERNALSYM SC_STATUS_TYPE}
  SC_STATUS_TYPE = (SC_STATUS_PROCESS_INFO    = 0);

//
// Info levels for EnumServicesStatusEx
//
  {$EXTERNALSYM SC_ENUM_TYPE}
  SC_ENUM_TYPE = (SC_ENUM_PROCESS_INFO        = 0);

//
// Service Status Structure
//

  {$EXTERNALSYM LPSERVICE_STATUS}
  LPSERVICE_STATUS = ^SERVICE_STATUS;
  {$EXTERNALSYM SERVICE_STATUS}
  SERVICE_STATUS = record
    dwServiceType:             DWORD;
    dwCurrentState:            DWORD;
    dwControlsAccepted:        DWORD;
    dwWin32ExitCode:           DWORD;
    dwServiceSpecificExitCode: DWORD;
    dwCheckPoint:              DWORD;
    dwWaitHint:                DWORD;
  end;
  {$EXTERNALSYM _SERVICE_STATUS}
  _SERVICE_STATUS = SERVICE_STATUS;
  PServiceStatus = ^TServiceStatus;
  TServiceStatus = SERVICE_STATUS;

  {$EXTERNALSYM LPSERVICE_STATUS_PROCESS}
  LPSERVICE_STATUS_PROCESS = ^SERVICE_STATUS_PROCESS;
  {$EXTERNALSYM SERVICE_STATUS_PROCESS}
  SERVICE_STATUS_PROCESS = record
    dwServiceType:             DWORD;
    dwCurrentState:            DWORD;
    dwControlsAccepted:        DWORD;
    dwWin32ExitCode:           DWORD;
    dwServiceSpecificExitCode: DWORD;
    dwCheckPoint:              DWORD;
    dwWaitHint:                DWORD;
    dwProcessId:               DWORD;
    dwServiceFlags:            DWORD;
  end;

//
// Service Status Enumeration Structure
//
  {$EXTERNALSYM LPENUM_SERVICE_STATUSA}
  LPENUM_SERVICE_STATUSA = ^ENUM_SERVICE_STATUSA;
  {$EXTERNALSYM LPENUM_SERVICE_STATUSW}
  LPENUM_SERVICE_STATUSW = ^ENUM_SERVICE_STATUSW;
  {$EXTERNALSYM LPENUM_SERVICE_STATUS}
  LPENUM_SERVICE_STATUS = LPENUM_SERVICE_STATUSW;
  {$EXTERNALSYM ENUM_SERVICE_STATUSA}
  ENUM_SERVICE_STATUSA = record
    lpServiceName: LPSTR;
    lpDisplayName: LPSTR;
    ServiceStatus: SERVICE_STATUS;
  end;
  {$EXTERNALSYM ENUM_SERVICE_STATUSW}
  ENUM_SERVICE_STATUSW = record
    lpServiceName: LPWSTR;
    lpDisplayName: LPWSTR;
    ServiceStatus: SERVICE_STATUS;
  end;
  {$EXTERNALSYM ENUM_SERVICE_STATUS}
  ENUM_SERVICE_STATUS = ENUM_SERVICE_STATUSW;
  {$EXTERNALSYM _ENUM_SERVICE_STATUSA}
  _ENUM_SERVICE_STATUSA = ENUM_SERVICE_STATUSA;
  {$EXTERNALSYM _ENUM_SERVICE_STATUSW}
  _ENUM_SERVICE_STATUSW = ENUM_SERVICE_STATUSW;
  {$EXTERNALSYM _ENUM_SERVICE_STATUS}
  _ENUM_SERVICE_STATUS = _ENUM_SERVICE_STATUSW;
  PEnumServiceStatusA = ^TEnumServiceStatusA;
  PEnumServiceStatusW = ^TEnumServiceStatusW;
  PEnumServiceStatus = PEnumServiceStatusW;
  TEnumServiceStatusA = ENUM_SERVICE_STATUSA;
  TEnumServiceStatusW = ENUM_SERVICE_STATUSW;
  TEnumServiceStatus = TEnumServiceStatusW;

  {$EXTERNALSYM LPENUM_SERVICE_STATUSA}
  LPENUM_SERVICE_STATUS_PROCESSA = ^ENUM_SERVICE_STATUS_PROCESSA;
  {$EXTERNALSYM LPENUM_SERVICE_STATUSW}
  LPENUM_SERVICE_STATUS_PROCESSW = ^ENUM_SERVICE_STATUS_PROCESSW;
  {$EXTERNALSYM LPENUM_SERVICE_STATUS_PROCESS}
  LPENUM_SERVICE_STATUS_PROCESS = LPENUM_SERVICE_STATUS_PROCESSW;
  {$EXTERNALSYM ENUM_SERVICE_STATUS_PROCESSA}
  ENUM_SERVICE_STATUS_PROCESSA = record
    lpServiceName: LPSTR;
    lpDisplayName: LPSTR;
    ServiceStatus: SERVICE_STATUS_PROCESS;
  end;
  {$EXTERNALSYM ENUM_SERVICE_STATUS_PROCESSW}
  ENUM_SERVICE_STATUS_PROCESSW = record
    lpServiceName: LPWSTR;
    lpDisplayName: LPWSTR;
    ServiceStatus: SERVICE_STATUS_PROCESS;
  end;
  {$EXTERNALSYM ENUM_SERVICE_STATUS_PROCESS}
  ENUM_SERVICE_STATUS_PROCESS = ENUM_SERVICE_STATUS_PROCESSW;
  {$EXTERNALSYM _ENUM_SERVICE_STATUS_PROCESSA}
  _ENUM_SERVICE_STATUS_PROCESSA = ENUM_SERVICE_STATUS_PROCESSA;
  {$EXTERNALSYM _ENUM_SERVICE_STATUS_PROCESSW}
  _ENUM_SERVICE_STATUS_PROCESSW = ENUM_SERVICE_STATUS_PROCESSW;
  {$EXTERNALSYM _ENUM_SERVICE_STATUS_PROCESS}
  _ENUM_SERVICE_STATUS_PROCESS = _ENUM_SERVICE_STATUS_PROCESSW;

//
// Structures for the Lock API functions
//
  {$EXTERNALSYM SC_LOCK}
  SC_LOCK = LPVOID;

  {$EXTERNALSYM LPQUERY_SERVICE_LOCK_STATUSA}
  LPQUERY_SERVICE_LOCK_STATUSA = ^QUERY_SERVICE_LOCK_STATUSA;
  {$EXTERNALSYM LPQUERY_SERVICE_LOCK_STATUSW}
  LPQUERY_SERVICE_LOCK_STATUSW = ^QUERY_SERVICE_LOCK_STATUSW;
  {$EXTERNALSYM LPQUERY_SERVICE_LOCK_STATUS}
  LPQUERY_SERVICE_LOCK_STATUS = LPQUERY_SERVICE_LOCK_STATUSW;
  {$EXTERNALSYM QUERY_SERVICE_LOCK_STATUSA}
  QUERY_SERVICE_LOCK_STATUSA = record
    fIsLocked: DWORD;
    lpLockOwner: LPSTR;
    dwLockDuration: DWORD;
  end;
  {$EXTERNALSYM QUERY_SERVICE_LOCK_STATUSW}
  QUERY_SERVICE_LOCK_STATUSW = record
    fIsLocked: DWORD;
    lpLockOwner: LPWSTR;
    dwLockDuration: DWORD;
  end;
  {$EXTERNALSYM QUERY_SERVICE_LOCK_STATUS}
  QUERY_SERVICE_LOCK_STATUS = QUERY_SERVICE_LOCK_STATUSW;
  {$EXTERNALSYM _QUERY_SERVICE_LOCK_STATUSA}
  _QUERY_SERVICE_LOCK_STATUSA = QUERY_SERVICE_LOCK_STATUSA;
  {$EXTERNALSYM _QUERY_SERVICE_LOCK_STATUSW}
  _QUERY_SERVICE_LOCK_STATUSW = QUERY_SERVICE_LOCK_STATUSW;
  {$EXTERNALSYM _QUERY_SERVICE_LOCK_STATUS}
  _QUERY_SERVICE_LOCK_STATUS = _QUERY_SERVICE_LOCK_STATUSW;
  PQueryServiceLockStatusA = ^TQueryServiceLockStatusA;
  PQueryServiceLockStatusW = ^TQueryServiceLockStatusW;
  PQueryServiceLockStatus = PQueryServiceLockStatusW;
  TQueryServiceLockStatusA = QUERY_SERVICE_LOCK_STATUSA;
  TQueryServiceLockStatusW = QUERY_SERVICE_LOCK_STATUSW;
  TQueryServiceLockStatus = TQueryServiceLockStatusW;

//
// Query Service Configuration Structure
//
  {$EXTERNALSYM LPQUERY_SERVICE_CONFIGA}
   LPQUERY_SERVICE_CONFIGA = ^QUERY_SERVICE_CONFIGA;
  {$EXTERNALSYM LPQUERY_SERVICE_CONFIGW}
   LPQUERY_SERVICE_CONFIGW = ^QUERY_SERVICE_CONFIGW;
  {$EXTERNALSYM LPQUERY_SERVICE_CONFIG}
  LPQUERY_SERVICE_CONFIG = LPQUERY_SERVICE_CONFIGW;
  {$EXTERNALSYM QUERY_SERVICE_CONFIGA}
   QUERY_SERVICE_CONFIGA = record
    dwServiceType:      DWORD;
    dwStartType:        DWORD;
    dwErrorControl:     DWORD;
    lpBinaryPathName:   LPSTR;
    lpLoadOrderGroup:   LPSTR;
    dwTagId:            DWORD;
    lpDependencies:     LPSTR;
    lpServiceStartName: LPSTR;
    lpDisplayName:      LPSTR;
  end;
  {$EXTERNALSYM QUERY_SERVICE_CONFIGW}
   QUERY_SERVICE_CONFIGW = record
    dwServiceType:      DWORD;
    dwStartType:        DWORD;
    dwErrorControl:     DWORD;
    lpBinaryPathName:   LPWSTR;
    lpLoadOrderGroup:   LPWSTR;
    dwTagId:            DWORD;
    lpDependencies:     LPWSTR;
    lpServiceStartName: LPWSTR;
    lpDisplayName:      LPWSTR;
  end;
  {$EXTERNALSYM QUERY_SERVICE_CONFIG}
  QUERY_SERVICE_CONFIG = QUERY_SERVICE_CONFIGW;
  {$EXTERNALSYM QUERY_SERVICE_CONFIGA}
  _QUERY_SERVICE_CONFIGA = QUERY_SERVICE_CONFIGA;
  {$EXTERNALSYM QUERY_SERVICE_CONFIGW}
  _QUERY_SERVICE_CONFIGW = QUERY_SERVICE_CONFIGW;
  {$EXTERNALSYM _QUERY_SERVICE_CONFIG}
  _QUERY_SERVICE_CONFIG = _QUERY_SERVICE_CONFIGW;
  PQueryServiceConfigA = LPQUERY_SERVICE_CONFIGA;
  PQueryServiceConfigW = LPQUERY_SERVICE_CONFIGW;
  PQueryServiceConfig = PQueryServiceConfigW;
  TQueryServiceConfigA = QUERY_SERVICE_CONFIGA;
  TQueryServiceConfigW = QUERY_SERVICE_CONFIGW;
  TQueryServiceConfig = TQueryServiceConfigW;

//
// Function Prototype for the Service Main Function
//

  {$EXTERNALSYM LPSERVICE_MAIN_FUNCTIONW}
  LPSERVICE_MAIN_FUNCTIONW = procedure (dwNumServicesArgs: DWORD;
    lpServiceArgVectors: PLPWSTR) stdcall;
  {$EXTERNALSYM LPSERVICE_MAIN_FUNCTIONA}
  LPSERVICE_MAIN_FUNCTIONA = procedure (dwNumServicesArgs: DWORD;
    lpServiceArgVectors: PLPSTR) stdcall;
  TServiceMainFunctionA = LPSERVICE_MAIN_FUNCTIONA;
  TServiceMainFunctionW = LPSERVICE_MAIN_FUNCTIONW;
  TServiceMainFunction = TServiceMainFunctionW;

//
// Service Start Table
//
  {$EXTERNALSYM LPSERVICE_TABLE_ENTRYA}
  LPSERVICE_TABLE_ENTRYA = ^SERVICE_TABLE_ENTRYA;
  {$EXTERNALSYM LPSERVICE_TABLE_ENTRYW}
  LPSERVICE_TABLE_ENTRYW = ^SERVICE_TABLE_ENTRYW;
  {$EXTERNALSYM LPSERVICE_TABLE_ENTRY}
  LPSERVICE_TABLE_ENTRY = LPSERVICE_TABLE_ENTRYW;
  {$EXTERNALSYM SERVICE_TABLE_ENTRYA}
  SERVICE_TABLE_ENTRYA = record
    lpServiceName: LPSTR;
    lpServiceProc: LPSERVICE_MAIN_FUNCTIONA;
  end;
  {$EXTERNALSYM SERVICE_TABLE_ENTRYW}
  SERVICE_TABLE_ENTRYW = record
    lpServiceName: LPWSTR;
    lpServiceProc: LPSERVICE_MAIN_FUNCTIONW;
  end;
  {$EXTERNALSYM SERVICE_TABLE_ENTRY}
  SERVICE_TABLE_ENTRY = SERVICE_TABLE_ENTRYW;
  {$EXTERNALSYM _SERVICE_TABLE_ENTRYA}
  _SERVICE_TABLE_ENTRYA = SERVICE_TABLE_ENTRYA;
  {$EXTERNALSYM _SERVICE_TABLE_ENTRYW}
  _SERVICE_TABLE_ENTRYW = SERVICE_TABLE_ENTRYW;
  {$EXTERNALSYM _SERVICE_TABLE_ENTRY}
  _SERVICE_TABLE_ENTRY = _SERVICE_TABLE_ENTRYW;
  PServiceTableEntryA = ^TServiceTableEntryA;
  PServiceTableEntryW = ^TServiceTableEntryW;
  PServiceTableEntry = PServiceTableEntryW;
  TServiceTableEntryA = _SERVICE_TABLE_ENTRYA;
  TServiceTableEntryW = _SERVICE_TABLE_ENTRYW;
  TServiceTableEntry = TServiceTableEntryW;

//
// Prototype for the Service Control Handler Function
//

  {$EXTERNALSYM LPHANDLER_FUNCTION}
  LPHANDLER_FUNCTION = procedure(dwControl: DWORD); stdcall;
  THandlerFunction = LPHANDLER_FUNCTION;
  {$EXTERNALSYM LPHANDLER_FUNCTION_EX}
  LPHANDLER_FUNCTION_EX = function(dwControl: DWORD; dwEventType: DWORD;
    lpEventData: LPVOID; lpContext: LPVOID): DWORD; stdcall;

//
// Service notification parameters
//
  {$EXTERNALSYM PFN_SC_NOTIFY_CALLBACK}
  PFN_SC_NOTIFY_CALLBACK = procedure(pParameter: Pointer); stdcall;

//
//  Each new notify structure is a superset of the older version
//
  {$EXTERNALSYM PSERVICE_NOTIFY_1}
  PSERVICE_NOTIFY_1 = ^SERVICE_NOTIFY_1;
  {$EXTERNALSYM SERVICE_NOTIFY_1}
  SERVICE_NOTIFY_1 = record
    dwVersion: DWORD;
    pfnNotifyCallback: PFN_SC_NOTIFY_CALLBACK;
    pContext: PVOID;
    dwNotificationStatus: DWORD;
    ServiceStatus: SERVICE_STATUS_PROCESS;
  end;

  {$EXTERNALSYM PSERVICE_NOTIFY_2A}
  PSERVICE_NOTIFY_2A = ^SERVICE_NOTIFY_2A;
  {$EXTERNALSYM PSERVICE_NOTIFY_2W}
  PSERVICE_NOTIFY_2W = ^SERVICE_NOTIFY_2W;
  {$EXTERNALSYM PSERVICE_NOTIFY_2}
  PSERVICE_NOTIFY_2 = PSERVICE_NOTIFY_2W;
  {$EXTERNALSYM SERVICE_NOTIFY_2A}
  SERVICE_NOTIFY_2A = record
    dwVersion: DWORD;
    pfnNotifyCallback: PFN_SC_NOTIFY_CALLBACK;
    pContext: PVOID;
    dwNotificationStatus: DWORD;
    ServiceStatus: SERVICE_STATUS_PROCESS;
    dwNotificationTriggered: DWORD;
    pszServiceNames: LPSTR;
  end;
  {$EXTERNALSYM SERVICE_NOTIFY_2W}
  SERVICE_NOTIFY_2W = record
    dwVersion: DWORD;
    pfnNotifyCallback: PFN_SC_NOTIFY_CALLBACK;
    pContext: PVOID;
    dwNotificationStatus: DWORD;
    ServiceStatus: SERVICE_STATUS_PROCESS;
    dwNotificationTriggered: DWORD;
    pszServiceNames: LPWSTR;
  end;
  {$EXTERNALSYM SERVICE_NOTIFY_2}
  SERVICE_NOTIFY_2 = SERVICE_NOTIFY_2W;
  {$EXTERNALSYM PSERVICE_NOTIFYA}
  PSERVICE_NOTIFYA = ^SERVICE_NOTIFYA;
  {$EXTERNALSYM PSERVICE_NOTIFYW}
  PSERVICE_NOTIFYW = ^SERVICE_NOTIFYW;
  {$EXTERNALSYM PSERVICE_NOTIFY}
  PSERVICE_NOTIFY = PSERVICE_NOTIFYW;
  {$EXTERNALSYM SERVICE_NOTIFYA}
  SERVICE_NOTIFYA = SERVICE_NOTIFY_2A;
  {$EXTERNALSYM SERVICE_NOTIFYW}
  SERVICE_NOTIFYW = SERVICE_NOTIFY_2W;
  {$EXTERNALSYM SERVICE_NOTIFY}
  SERVICE_NOTIFY = SERVICE_NOTIFYW;

//
// Service control status reason parameters
//
  {$EXTERNALSYM PSERVICE_CONTROL_STATUS_REASON_PARAMSA}
  PSERVICE_CONTROL_STATUS_REASON_PARAMSA = ^SERVICE_CONTROL_STATUS_REASON_PARAMSA;
  {$EXTERNALSYM PSERVICE_CONTROL_STATUS_REASON_PARAMSW}
  PSERVICE_CONTROL_STATUS_REASON_PARAMSW = ^SERVICE_CONTROL_STATUS_REASON_PARAMSW;
  {$EXTERNALSYM PSERVICE_CONTROL_STATUS_REASON_PARAMS}
  PSERVICE_CONTROL_STATUS_REASON_PARAMS = PSERVICE_CONTROL_STATUS_REASON_PARAMSW;
  {$EXTERNALSYM SERVICE_CONTROL_STATUS_REASON_PARAMSA}
  SERVICE_CONTROL_STATUS_REASON_PARAMSA = record
    dwReason:      DWORD;
    pszComment:    LPSTR;
    ServiceStatus: SERVICE_STATUS_PROCESS;
  end;
  {$EXTERNALSYM SERVICE_CONTROL_STATUS_REASON_PARAMSW}
  SERVICE_CONTROL_STATUS_REASON_PARAMSW = record
    dwReason:      DWORD;
    pszComment:    LPWSTR;
    ServiceStatus: SERVICE_STATUS_PROCESS;
  end;
  {$EXTERNALSYM SERVICE_CONTROL_STATUS_REASON_PARAMS}
  SERVICE_CONTROL_STATUS_REASON_PARAMS = SERVICE_CONTROL_STATUS_REASON_PARAMSW;

///////////////////////////////////////////////////////////////////////////
// API Function Prototypes
///////////////////////////////////////////////////////////////////////////

{$EXTERNALSYM ChangeServiceConfig}
function ChangeServiceConfig(hService: SC_HANDLE; dwServiceType, dwStartType,
  dwErrorControl: DWORD; lpBinaryPathName, lpLoadOrderGroup: LPCWSTR;
  lpdwTagId: LPDWORD; lpDependencies, lpServiceStartName, lpPassword,
  lpDisplayName: LPCWSTR): BOOL; stdcall;
{$EXTERNALSYM ChangeServiceConfigA}
function ChangeServiceConfigA(hService: SC_HANDLE; dwServiceType, dwStartType,
  dwErrorControl: DWORD; lpBinaryPathName, lpLoadOrderGroup: LPCSTR;
  lpdwTagId: LPDWORD; lpDependencies, lpServiceStartName, lpPassword,
  lpDisplayName: LPCSTR): BOOL; stdcall;
{$EXTERNALSYM ChangeServiceConfigW}
function ChangeServiceConfigW(hService: SC_HANDLE; dwServiceType, dwStartType,
  dwErrorControl: DWORD; lpBinaryPathName, lpLoadOrderGroup: LPCWSTR;
  lpdwTagId: LPDWORD; lpDependencies, lpServiceStartName, lpPassword,
  lpDisplayName: LPCWSTR): BOOL; stdcall;
{$EXTERNALSYM ChangeServiceConfig2}
function ChangeServiceConfig2(hService: SC_HANDLE; dwInfoLevel: DWORD;
  lpInfo: LPVOID): BOOL; stdcall;
{$EXTERNALSYM ChangeServiceConfig2A}
function ChangeServiceConfig2A(hService: SC_HANDLE; dwInfoLevel: DWORD;
  lpInfo: LPVOID): BOOL; stdcall;
{$EXTERNALSYM ChangeServiceConfig2W}
function ChangeServiceConfig2W(hService: SC_HANDLE; dwInfoLevel: DWORD;
  lpInfo: LPVOID): BOOL; stdcall;
{$EXTERNALSYM CloseServiceHandle}
function CloseServiceHandle(hSCObject: SC_HANDLE): BOOL; stdcall;
{$EXTERNALSYM ControlService}
function ControlService(hService: SC_HANDLE; dwControl: DWORD;
  var lpServiceStatus: SERVICE_STATUS): BOOL; stdcall;
{$EXTERNALSYM CreateService}
function CreateService(hSCManager: SC_HANDLE; lpServiceName, lpDisplayName: LPCWSTR;
  dwDesiredAccess, dwServiceType, dwStartType, dwErrorControl: DWORD;
  lpBinaryPathName, lpLoadOrderGroup: LPCWSTR; lpdwTagId: LPDWORD; lpDependencies,
  lpServiceStartName, lpPassword: LPCWSTR): SC_HANDLE; stdcall;
{$EXTERNALSYM CreateServiceA}
function CreateServiceA(hSCManager: SC_HANDLE; lpServiceName, lpDisplayName: LPCSTR;
  dwDesiredAccess, dwServiceType, dwStartType, dwErrorControl: DWORD;
  lpBinaryPathName, lpLoadOrderGroup: LPCSTR; lpdwTagId: LPDWORD; lpDependencies,
  lpServiceStartName, lpPassword: LPCSTR): SC_HANDLE; stdcall;
{$EXTERNALSYM CreateServiceW}
function CreateServiceW(hSCManager: SC_HANDLE; lpServiceName, lpDisplayName: LPCWSTR;
  dwDesiredAccess, dwServiceType, dwStartType, dwErrorControl: DWORD;
  lpBinaryPathName, lpLoadOrderGroup: LPCWSTR; lpdwTagId: LPDWORD; lpDependencies,
  lpServiceStartName, lpPassword: LPCWSTR): SC_HANDLE; stdcall;
{$EXTERNALSYM DeleteService}
function DeleteService(hService: SC_HANDLE): BOOL; stdcall;
{$EXTERNALSYM EnumDependentServices}
function EnumDependentServices(hService: SC_HANDLE; dwServiceState: DWORD;
  var lpServices: ENUM_SERVICE_STATUS; cbBufSize: DWORD; var pcbBytesNeeded,                   
  lpServicesReturned : DWORD): BOOL; stdcall;
{$EXTERNALSYM EnumDependentServicesA}
function EnumDependentServicesA(hService: SC_HANDLE; dwServiceState: DWORD;
  var lpServices: ENUM_SERVICE_STATUSA; cbBufSize: DWORD; var pcbBytesNeeded,                   
  lpServicesReturned : DWORD): BOOL; stdcall;
{$EXTERNALSYM EnumDependentServicesW}
function EnumDependentServicesW(hService: SC_HANDLE; dwServiceState: DWORD;
  var lpServices: ENUM_SERVICE_STATUSW; cbBufSize: DWORD; var pcbBytesNeeded,                   
  lpServicesReturned : DWORD): BOOL; stdcall;
{$EXTERNALSYM EnumServicesStatus}
function EnumServicesStatus(hSCManager: SC_HANDLE; dwServiceType,
  dwServiceState: DWORD; var lpServices: ENUM_SERVICE_STATUS; cbBufSize: DWORD;                  
  var pcbBytesNeeded, lpServicesReturned, lpResumeHandle: DWORD): BOOL; stdcall;
{$EXTERNALSYM EnumServicesStatusA}
function EnumServicesStatusA(hSCManager: SC_HANDLE; dwServiceType,
  dwServiceState: DWORD; var lpServices: ENUM_SERVICE_STATUSA; cbBufSize: DWORD;                  
  var pcbBytesNeeded, lpServicesReturned, lpResumeHandle: DWORD): BOOL; stdcall;
{$EXTERNALSYM EnumServicesStatusW}
function EnumServicesStatusW(hSCManager: SC_HANDLE; dwServiceType,
  dwServiceState: DWORD; var lpServices: ENUM_SERVICE_STATUSW; cbBufSize: DWORD;                  
  var pcbBytesNeeded, lpServicesReturned, lpResumeHandle: DWORD): BOOL; stdcall;
{$EXTERNALSYM EnumServicesStatusEx}
function EnumServicesStatusEx(hSCManager: SC_HANDLE; InfoLevel: SC_ENUM_TYPE;
  dwServiceType, dwServiceState: DWORD; lpServices: LPBYTE; cbBufSize: DWORD;
  pcbBytesNeeded, lpServicesReturned, lpResumeHandle: LPDWORD;
  pszGroupName: LPCWSTR): BOOL; stdcall;
{$EXTERNALSYM EnumServicesStatusExA}
function EnumServicesStatusExA(hSCManager: SC_HANDLE; InfoLevel: SC_ENUM_TYPE;
  dwServiceType, dwServiceState: DWORD; lpServices: LPBYTE; cbBufSize: DWORD;
  pcbBytesNeeded, lpServicesReturned, lpResumeHandle: LPDWORD;
  pszGroupName: LPCSTR): BOOL; stdcall;
{$EXTERNALSYM EnumServicesStatusExW}
function EnumServicesStatusExW(hSCManager: SC_HANDLE; InfoLevel: SC_ENUM_TYPE;
  dwServiceType, dwServiceState: DWORD; lpServices: LPBYTE; cbBufSize: DWORD;
  pcbBytesNeeded, lpServicesReturned, lpResumeHandle: LPDWORD;
  pszGroupName: LPCWSTR): BOOL; stdcall;
{$EXTERNALSYM GetServiceKeyName}
function GetServiceKeyName(hSCManager: SC_HANDLE; lpDisplayName: LPCWSTR;
  lpServiceName: LPWSTR; var lpcchBuffer: DWORD): BOOL; stdcall;
{$EXTERNALSYM GetServiceKeyNameA}
function GetServiceKeyNameA(hSCManager: SC_HANDLE; lpDisplayName: LPCSTR;
  lpServiceName: LPSTR; var lpcchBuffer: DWORD): BOOL; stdcall;
{$EXTERNALSYM GetServiceKeyNameW}
function GetServiceKeyNameW(hSCManager: SC_HANDLE; lpDisplayName: LPCWSTR;
  lpServiceName: LPWSTR; var lpcchBuffer: DWORD): BOOL; stdcall;
{$EXTERNALSYM GetServiceDisplayName}
function GetServiceDisplayName(hSCManager: SC_HANDLE; lpServiceName: LPCWSTR;
  lpDisplayName: LPWSTR; var lpcchBuffer: DWORD): BOOL; stdcall;
{$EXTERNALSYM GetServiceDisplayNameA}
function GetServiceDisplayNameA(hSCManager: SC_HANDLE; lpServiceName: LPCSTR;
  lpDisplayName: LPSTR; var lpcchBuffer: DWORD): BOOL; stdcall;
{$EXTERNALSYM GetServiceDisplayNameW}
function GetServiceDisplayNameW(hSCManager: SC_HANDLE; lpServiceName: LPCWSTR;
  lpDisplayName: LPWSTR; var lpcchBuffer: DWORD): BOOL; stdcall;
{$EXTERNALSYM LockServiceDatabase}
function LockServiceDatabase(hSCManager: SC_HANDLE): SC_LOCK; stdcall;
{$EXTERNALSYM NotifyBootConfigStatus}
function NotifyBootConfigStatus(BootAcceptable: BOOL): BOOL; stdcall;
{$EXTERNALSYM OpenSCManager}
function OpenSCManager(lpMachineName, lpDatabaseName: LPCWSTR;
  dwDesiredAccess: DWORD): SC_HANDLE; stdcall;
{$EXTERNALSYM OpenSCManagerA}
function OpenSCManagerA(lpMachineName, lpDatabaseName: LPCSTR;
  dwDesiredAccess: DWORD): SC_HANDLE; stdcall;
{$EXTERNALSYM OpenSCManagerW}
function OpenSCManagerW(lpMachineName, lpDatabaseName: LPCWSTR;
  dwDesiredAccess: DWORD): SC_HANDLE; stdcall;
{$EXTERNALSYM OpenService}
function OpenService(hSCManager: SC_HANDLE; lpServiceName: LPCWSTR;
  dwDesiredAccess: DWORD): SC_HANDLE; stdcall;
{$EXTERNALSYM OpenServiceA}
function OpenServiceA(hSCManager: SC_HANDLE; lpServiceName: LPCSTR;
  dwDesiredAccess: DWORD): SC_HANDLE; stdcall;
{$EXTERNALSYM OpenServiceW}
function OpenServiceW(hSCManager: SC_HANDLE; lpServiceName: LPCWSTR;
  dwDesiredAccess: DWORD): SC_HANDLE; stdcall;
{$EXTERNALSYM QueryServiceConfig}
function QueryServiceConfig(hService: SC_HANDLE;
  lpServiceConfig: LPQUERY_SERVICE_CONFIG; cbBufSize: DWORD;
  var pcbBytesNeeded: DWORD): BOOL; stdcall;                   
{$EXTERNALSYM QueryServiceConfigA}
function QueryServiceConfigA(hService: SC_HANDLE;
  lpServiceConfig: LPQUERY_SERVICE_CONFIGA; cbBufSize: DWORD;
  var pcbBytesNeeded: DWORD): BOOL; stdcall;                   
{$EXTERNALSYM QueryServiceConfigW}
function QueryServiceConfigW(hService: SC_HANDLE;
  lpServiceConfig: LPQUERY_SERVICE_CONFIGW; cbBufSize: DWORD;
  var pcbBytesNeeded: DWORD): BOOL; stdcall;                   
{$EXTERNALSYM QueryServiceConfig2}
function QueryServiceConfig2(hService: SC_HANDLE; dwInfoLevel: DWORD;
  lpBuffer: LPBYTE; cbBufSize: DWORD;
  pcbBytesNeeded: LPDWORD): BOOL; stdcall;
{$EXTERNALSYM QueryServiceConfig2A}
function QueryServiceConfig2A(hService: SC_HANDLE; dwInfoLevel: DWORD;
  lpBuffer: LPBYTE; cbBufSize: DWORD;
  pcbBytesNeeded: LPDWORD): BOOL; stdcall;
{$EXTERNALSYM QueryServiceConfig2W}
function QueryServiceConfig2W(hService: SC_HANDLE; dwInfoLevel: DWORD;
  lpBuffer: LPBYTE; cbBufSize: DWORD;
  pcbBytesNeeded: LPDWORD): BOOL; stdcall;
{$EXTERNALSYM QueryServiceLockStatus}
function QueryServiceLockStatus(hSCManager: SC_HANDLE;
  var lpLockStatus: QUERY_SERVICE_LOCK_STATUS; cbBufSize: DWORD;                  
  var pcbBytesNeeded: DWORD): BOOL; stdcall;
{$EXTERNALSYM QueryServiceLockStatusA}
function QueryServiceLockStatusA(hSCManager: SC_HANDLE;
  var lpLockStatus: QUERY_SERVICE_LOCK_STATUSA; cbBufSize: DWORD;                  
  var pcbBytesNeeded: DWORD): BOOL; stdcall;
{$EXTERNALSYM QueryServiceLockStatusW}
function QueryServiceLockStatusW(hSCManager: SC_HANDLE;
  var lpLockStatus: QUERY_SERVICE_LOCK_STATUSW; cbBufSize: DWORD;                  
  var pcbBytesNeeded: DWORD): BOOL; stdcall;
{$EXTERNALSYM QueryServiceObjectSecurity}
function QueryServiceObjectSecurity(hService: SC_HANDLE;
  dwSecurityInformation: SECURITY_INFORMATION;
  lpSecurityDescriptor: PSECURITY_DESCRIPTOR; cbBufSize: DWORD;
  var pcbBytesNeeded: DWORD): BOOL; stdcall;
{$EXTERNALSYM QueryServiceStatus}
function QueryServiceStatus(hService: SC_HANDLE;
  var lpServiceStatus: SERVICE_STATUS): BOOL; stdcall;
{$EXTERNALSYM QueryServiceStatusEx}
function QueryServiceStatusEx(hService: SC_HANDLE;
  InfoLevel: SC_STATUS_TYPE; lpBuffer: LPBYTE;
  cbBufSize: DWORD; var pcbBytesNeeded: DWORD): BOOL; stdcall;                  
{$EXTERNALSYM RegisterServiceCtrlHandler}
function RegisterServiceCtrlHandler(lpServiceName: LPCWSTR;
  lpHandlerProc: LPHANDLER_FUNCTION): SERVICE_STATUS_HANDLE; stdcall;
{$EXTERNALSYM RegisterServiceCtrlHandlerA}
function RegisterServiceCtrlHandlerA(lpServiceName: LPCSTR;
  lpHandlerProc: LPHANDLER_FUNCTION): SERVICE_STATUS_HANDLE; stdcall;
{$EXTERNALSYM RegisterServiceCtrlHandlerW}
function RegisterServiceCtrlHandlerW(lpServiceName: LPCWSTR;
  lpHandlerProc: LPHANDLER_FUNCTION): SERVICE_STATUS_HANDLE; stdcall;
{$EXTERNALSYM RegisterServiceCtrlHandlerEx}
function RegisterServiceCtrlHandlerEx(lpServiceName: LPCWSTR;
  lpHandlerProc: LPHANDLER_FUNCTION_EX; lpContext: LPVOID): SERVICE_STATUS_HANDLE; stdcall;
{$EXTERNALSYM RegisterServiceCtrlHandlerExA}
function RegisterServiceCtrlHandlerExA(lpServiceName: LPCSTR;
  lpHandlerProc: LPHANDLER_FUNCTION_EX; lpContext: LPVOID): SERVICE_STATUS_HANDLE; stdcall;
{$EXTERNALSYM RegisterServiceCtrlHandlerExW}
function RegisterServiceCtrlHandlerExW(lpServiceName: LPCWSTR;
  lpHandlerProc: LPHANDLER_FUNCTION_EX; lpContext: LPVOID): SERVICE_STATUS_HANDLE; stdcall;
{$EXTERNALSYM SetServiceObjectSecurity}
function SetServiceObjectSecurity(hService: SC_HANDLE;
  dwSecurityInformation: SECURITY_INFORMATION;
  lpSecurityDescriptor: PSECURITY_DESCRIPTOR): BOOL; stdcall;
{$EXTERNALSYM SetServiceStatus}
function SetServiceStatus(hServiceStatus: SERVICE_STATUS_HANDLE;
  var lpServiceStatus:SERVICE_STATUS): BOOL; stdcall;                  
{$EXTERNALSYM StartServiceCtrlDispatcher}
function StartServiceCtrlDispatcher(
  var lpServiceStartTable: SERVICE_TABLE_ENTRY): BOOL; stdcall;
{$EXTERNALSYM StartServiceCtrlDispatcherA}
function StartServiceCtrlDispatcherA(
  var lpServiceStartTable: SERVICE_TABLE_ENTRYA): BOOL; stdcall;
{$EXTERNALSYM StartServiceCtrlDispatcherW}
function StartServiceCtrlDispatcherW(
  var lpServiceStartTable: SERVICE_TABLE_ENTRYW): BOOL; stdcall;
{$EXTERNALSYM StartService}
function StartService(hService: SC_HANDLE; dwNumServiceArgs: DWORD;
  var lpServiceArgVectors: LPCWSTR): BOOL; stdcall;
{$EXTERNALSYM StartServiceA}
function StartServiceA(hService: SC_HANDLE; dwNumServiceArgs: DWORD;
  var lpServiceArgVectors: LPCSTR): BOOL; stdcall;
{$EXTERNALSYM StartServiceW}
function StartServiceW(hService: SC_HANDLE; dwNumServiceArgs: DWORD;
  var lpServiceArgVectors: LPCWSTR): BOOL; stdcall;
{$EXTERNALSYM UnlockServiceDatabase}
function UnlockServiceDatabase(ScLock: SC_LOCK): BOOL; stdcall;
{$EXTERNALSYM NotifyServiceStatusChange}
function NotifyServiceStatusChange(hService: SC_HANDLE; dwNotifyMask: DWORD;
  pNotifyBuffer: PSERVICE_NOTIFY): DWORD; stdcall;
{$EXTERNALSYM NotifyServiceStatusChangeA}
function NotifyServiceStatusChangeA(hService: SC_HANDLE; dwNotifyMask: DWORD;
  pNotifyBuffer: PSERVICE_NOTIFYA): DWORD; stdcall;
{$EXTERNALSYM NotifyServiceStatusChangeW}
function NotifyServiceStatusChangeW(hService: SC_HANDLE; dwNotifyMask: DWORD;
  pNotifyBuffer: PSERVICE_NOTIFYW): DWORD; stdcall;
{$EXTERNALSYM ControlServiceEx}
function ControlServiceEx(hService: SC_HANDLE; dwControl: DWORD;
  dwInfoLevel: DWORD; pControlParams: PVOID): DWORD; stdcall;
{$EXTERNALSYM ControlServiceExA}
function ControlServiceExA(hService: SC_HANDLE; dwControl: DWORD;
  dwInfoLevel: DWORD; pControlParams: PVOID): DWORD; stdcall;
{$EXTERNALSYM ControlServiceExW}
function ControlServiceExW(hService: SC_HANDLE; dwControl: DWORD;
  dwInfoLevel: DWORD; pControlParams: PVOID): DWORD; stdcall;

implementation

const
  advapi32 = 'advapi32.dll';

function ChangeServiceConfig;   external advapi32 name 'ChangeServiceConfigW';
function ChangeServiceConfigA;   external advapi32 name 'ChangeServiceConfigA';
function ChangeServiceConfigW;   external advapi32 name 'ChangeServiceConfigW';
function ChangeServiceConfig2;  external advapi32 name 'ChangeServiceConfig2W';
function ChangeServiceConfig2A;  external advapi32 name 'ChangeServiceConfig2A';
function ChangeServiceConfig2W;  external advapi32 name 'ChangeServiceConfig2W';
function CloseServiceHandle;       external advapi32 name 'CloseServiceHandle';
function ControlService;           external advapi32 name 'ControlService';
function CreateService;         external advapi32 name 'CreateServiceW';
function CreateServiceA;         external advapi32 name 'CreateServiceA';
function CreateServiceW;         external advapi32 name 'CreateServiceW';
function DeleteService;            external advapi32 name 'DeleteService';
function EnumDependentServices; external advapi32 name 'EnumDependentServicesW';
function EnumDependentServicesA; external advapi32 name 'EnumDependentServicesA';
function EnumDependentServicesW; external advapi32 name 'EnumDependentServicesW';
function EnumServicesStatus;    external advapi32 name 'EnumServicesStatusW';
function EnumServicesStatusA;    external advapi32 name 'EnumServicesStatusA';
function EnumServicesStatusW;    external advapi32 name 'EnumServicesStatusW';
function EnumServicesStatusEx;  external advapi32 name 'EnumServicesStatusExW';
function EnumServicesStatusExA;  external advapi32 name 'EnumServicesStatusExA';
function EnumServicesStatusExW;  external advapi32 name 'EnumServicesStatusExW';
function GetServiceKeyName;     external advapi32 name 'GetServiceKeyNameW';
function GetServiceKeyNameA;     external advapi32 name 'GetServiceKeyNameA';
function GetServiceKeyNameW;     external advapi32 name 'GetServiceKeyNameW';
function GetServiceDisplayName; external advapi32 name 'GetServiceDisplayNameW';
function GetServiceDisplayNameA; external advapi32 name 'GetServiceDisplayNameA';
function GetServiceDisplayNameW; external advapi32 name 'GetServiceDisplayNameW';
function LockServiceDatabase;      external advapi32 name 'LockServiceDatabase';
function NotifyBootConfigStatus;   external advapi32 name 'NotifyBootConfigStatus';
function OpenSCManager;         external advapi32 name 'OpenSCManagerW';
function OpenSCManagerA;         external advapi32 name 'OpenSCManagerA';
function OpenSCManagerW;         external advapi32 name 'OpenSCManagerW';
function OpenService;           external advapi32 name 'OpenServiceW';
function OpenServiceA;           external advapi32 name 'OpenServiceA';
function OpenServiceW;           external advapi32 name 'OpenServiceW';
function QueryServiceConfig;    external advapi32 name 'QueryServiceConfigW';
function QueryServiceConfigA;    external advapi32 name 'QueryServiceConfigA';
function QueryServiceConfigW;    external advapi32 name 'QueryServiceConfigW';
function QueryServiceConfig2;   external advapi32 name 'QueryServiceConfig2W';
function QueryServiceConfig2A;   external advapi32 name 'QueryServiceConfig2A';
function QueryServiceConfig2W;   external advapi32 name 'QueryServiceConfig2W';
function QueryServiceLockStatus;external advapi32 name 'QueryServiceLockStatusW';
function QueryServiceLockStatusA;external advapi32 name 'QueryServiceLockStatusA';
function QueryServiceLockStatusW;external advapi32 name 'QueryServiceLockStatusW';
function QueryServiceObjectSecurity;external advapi32 name 'QueryServiceObjectSecurity';
function QueryServiceStatus;       external advapi32 name 'QueryServiceStatus';
function QueryServiceStatusEx;       external advapi32 name 'QueryServiceStatusEx';
function RegisterServiceCtrlHandler;external advapi32 name 'RegisterServiceCtrlHandlerW';
function RegisterServiceCtrlHandlerA;external advapi32 name 'RegisterServiceCtrlHandlerA';
function RegisterServiceCtrlHandlerW;external advapi32 name 'RegisterServiceCtrlHandlerW';
function RegisterServiceCtrlHandlerEx;external advapi32 name 'RegisterServiceCtrlHandlerExW';
function RegisterServiceCtrlHandlerExA;external advapi32 name 'RegisterServiceCtrlHandlerExA';
function RegisterServiceCtrlHandlerExW;external advapi32 name 'RegisterServiceCtrlHandlerExW';
function SetServiceObjectSecurity; external advapi32 name 'SetServiceObjectSecurity';
function SetServiceStatus;         external advapi32 name 'SetServiceStatus';
function StartServiceCtrlDispatcher;external advapi32 name 'StartServiceCtrlDispatcherW';
function StartServiceCtrlDispatcherA;external advapi32 name 'StartServiceCtrlDispatcherA';
function StartServiceCtrlDispatcherW;external advapi32 name 'StartServiceCtrlDispatcherW';
function StartService;          external advapi32 name 'StartServiceW';
function StartServiceA;          external advapi32 name 'StartServiceA';
function StartServiceW;          external advapi32 name 'StartServiceW';
function UnlockServiceDatabase;    external advapi32 name 'UnlockServiceDatabase';
function NotifyServiceStatusChange; external advapi32 name 'NotifyServiceStatusChangeW' delayed;
function NotifyServiceStatusChangeA; external advapi32 name 'NotifyServiceStatusChangeA' delayed;
function NotifyServiceStatusChangeW; external advapi32 name 'NotifyServiceStatusChangeW' delayed;
function ControlServiceEx;      external advapi32 name 'ControlServiceExW' delayed;
function ControlServiceExA;      external advapi32 name 'ControlServiceExA' delayed;
function ControlServiceExW;      external advapi32 name 'ControlServiceExW' delayed;

end.
