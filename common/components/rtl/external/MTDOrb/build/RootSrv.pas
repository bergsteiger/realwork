// ***************************************************************************
//                                                                            
// Generated by the MTDORB IDL-to-Pascal Translator (1.0.1b1), 27.06.2011 16:43
//                                                                            
// Copyright (c) 2002 - 2004                                                  
// Millennium Group.                                                          
// Samara, Russia                                                             
//                                                                            
// All Rights Reserved                                                        
//                                                                            
// ***************************************************************************
// Compiled with parameters: " shura/RootSrv.idl" 
//                                                                            
unit RootSrv;

interface

uses
  Classes, orb_int, orb, req_int, code_int, env_int, stdstat, std_seq,imr, imr_int, 
  orbtypes, exceptions, except_int, RootSrv_int, poa_int, poa;

type

  TCoreSrv_NoActiveFactory_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

  {** IDL:garant.ru/CoreSrv/NoActiveFactory:1.0 } 
  TCoreSrv_NoActiveFactory = class(UserException,ICoreSrv_NoActiveFactory)
  protected
    procedure throw; override;
    function clone(): IORBException; override;
    function repoid(): RepositoryID; override;
    procedure encode(const enc: IEncoder); override;
    procedure encode_any(const a: IAny); override;
  public
    constructor Create(ex: TCoreSrv_NoActiveFactory); overload;
    constructor Create(); overload;
  end;

  TCoreSrv_ForeignObject_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

  {** IDL:garant.ru/CoreSrv/ForeignObject:1.0 } 
  TCoreSrv_ForeignObject = class(UserException,ICoreSrv_ForeignObject)
  protected
    procedure throw; override;
    function clone(): IORBException; override;
    function repoid(): RepositoryID; override;
    procedure encode(const enc: IEncoder); override;
    procedure encode_any(const a: IAny); override;
  public
    constructor Create(ex: TCoreSrv_ForeignObject); overload;
    constructor Create(); overload;
  end;

  TCoreSrv_UnknownFactoryKey_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

  {** IDL:garant.ru/CoreSrv/UnknownFactoryKey:1.0 } 
  TCoreSrv_UnknownFactoryKey = class(UserException,ICoreSrv_UnknownFactoryKey)
  protected
    procedure throw; override;
    function clone(): IORBException; override;
    function repoid(): RepositoryID; override;
    procedure encode(const enc: IEncoder); override;
    procedure encode_any(const a: IAny); override;
  public
    constructor Create(ex: TCoreSrv_UnknownFactoryKey); overload;
    constructor Create(); overload;
  end;

var
  CoreSrv_NoActiveFactory_marshaller : IStaticTypeInfo;
  CoreSrv_ForeignObject_marshaller : IStaticTypeInfo;
  CoreSrv_UnknownFactoryKey_marshaller : IStaticTypeInfo;
  _tc_CoreSrv_NoActiveFactory : ITypeCodeConst;
  _tc_CoreSrv_ForeignObject : ITypeCodeConst;
  _tc_CoreSrv_UnknownFactoryKey : ITypeCodeConst;

implementation

uses
  SysUtils, any, tcode, static, throw;

//***********************************************************
// TCoreSrv_NoActiveFactory_marshaller
//***********************************************************
function TCoreSrv_NoActiveFactory_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  repoid: RepositoryId;
begin
  result := false;
  if not dec.except_begin(repoid) then exit;
  if not dec.except_end then exit;
  result := true;
end;

procedure TCoreSrv_NoActiveFactory_marshaller.marshal(enc: IEncoder;const addr : Pointer);
begin
  enc.except_begin('IDL:garant.ru/CoreSrv/NoActiveFactory:1.0');
  enc.except_end;
end;

procedure TCoreSrv_NoActiveFactory_marshaller._free(var addr: Pointer);
begin
  ICoreSrv_NoActiveFactory(addr^) := nil;
end;

procedure TCoreSrv_NoActiveFactory_marshaller._create(var addr: Pointer);
begin
  ICoreSrv_NoActiveFactory(addr^) := TCoreSrv_NoActiveFactory.Create();
end;

procedure TCoreSrv_NoActiveFactory_marshaller._assign(dst, src: Pointer);
begin
  ICoreSrv_NoActiveFactory(dst^) := ICoreSrv_NoActiveFactory(src^);
end;

function TCoreSrv_NoActiveFactory_marshaller.typecode: ITypeCode;
begin
  result := _tc_CoreSrv_NoActiveFactory.typecode;
end;

//***********************************************************
// TCoreSrv_NoActiveFactory
//***********************************************************
constructor TCoreSrv_NoActiveFactory.Create(ex: TCoreSrv_NoActiveFactory);
begin
  inherited Create();
end;

procedure TCoreSrv_NoActiveFactory.throw;
begin
  raise TCoreSrv_NoActiveFactory.Create(self);
end;

function TCoreSrv_NoActiveFactory.clone(): IORBException;
begin
  result := TCoreSrv_NoActiveFactory.Create(self);
end;

procedure TCoreSrv_NoActiveFactory.encode(const enc: IEncoder);
var
  int : ICoreSrv_NoActiveFactory;
begin
  int := self;
  CoreSrv_NoActiveFactory_marshaller.marshal(enc,@int);
end;

procedure TCoreSrv_NoActiveFactory.encode_any(const a: IAny);
var
  stat: IStaticAny;
begin
  stat := StaticAny(CoreSrv_NoActiveFactory_marshaller, Self);
  a.from_static_any(stat);
end;

constructor TCoreSrv_NoActiveFactory.Create();
begin
  inherited Create();
end;

function TCoreSrv_NoActiveFactory.repoid(): RepositoryID;
begin
  result := 'IDL:garant.ru/CoreSrv/NoActiveFactory:1.0';
end;

//***********************************************************
// TCoreSrv_ForeignObject_marshaller
//***********************************************************
function TCoreSrv_ForeignObject_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  repoid: RepositoryId;
begin
  result := false;
  if not dec.except_begin(repoid) then exit;
  if not dec.except_end then exit;
  result := true;
end;

procedure TCoreSrv_ForeignObject_marshaller.marshal(enc: IEncoder;const addr : Pointer);
begin
  enc.except_begin('IDL:garant.ru/CoreSrv/ForeignObject:1.0');
  enc.except_end;
end;

procedure TCoreSrv_ForeignObject_marshaller._free(var addr: Pointer);
begin
  ICoreSrv_ForeignObject(addr^) := nil;
end;

procedure TCoreSrv_ForeignObject_marshaller._create(var addr: Pointer);
begin
  ICoreSrv_ForeignObject(addr^) := TCoreSrv_ForeignObject.Create();
end;

procedure TCoreSrv_ForeignObject_marshaller._assign(dst, src: Pointer);
begin
  ICoreSrv_ForeignObject(dst^) := ICoreSrv_ForeignObject(src^);
end;

function TCoreSrv_ForeignObject_marshaller.typecode: ITypeCode;
begin
  result := _tc_CoreSrv_ForeignObject.typecode;
end;

//***********************************************************
// TCoreSrv_ForeignObject
//***********************************************************
constructor TCoreSrv_ForeignObject.Create(ex: TCoreSrv_ForeignObject);
begin
  inherited Create();
end;

procedure TCoreSrv_ForeignObject.throw;
begin
  raise TCoreSrv_ForeignObject.Create(self);
end;

function TCoreSrv_ForeignObject.clone(): IORBException;
begin
  result := TCoreSrv_ForeignObject.Create(self);
end;

procedure TCoreSrv_ForeignObject.encode(const enc: IEncoder);
var
  int : ICoreSrv_ForeignObject;
begin
  int := self;
  CoreSrv_ForeignObject_marshaller.marshal(enc,@int);
end;

procedure TCoreSrv_ForeignObject.encode_any(const a: IAny);
var
  stat: IStaticAny;
begin
  stat := StaticAny(CoreSrv_ForeignObject_marshaller, Self);
  a.from_static_any(stat);
end;

constructor TCoreSrv_ForeignObject.Create();
begin
  inherited Create();
end;

function TCoreSrv_ForeignObject.repoid(): RepositoryID;
begin
  result := 'IDL:garant.ru/CoreSrv/ForeignObject:1.0';
end;

//***********************************************************
// TCoreSrv_UnknownFactoryKey_marshaller
//***********************************************************
function TCoreSrv_UnknownFactoryKey_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  repoid: RepositoryId;
begin
  result := false;
  if not dec.except_begin(repoid) then exit;
  if not dec.except_end then exit;
  result := true;
end;

procedure TCoreSrv_UnknownFactoryKey_marshaller.marshal(enc: IEncoder;const addr : Pointer);
begin
  enc.except_begin('IDL:garant.ru/CoreSrv/UnknownFactoryKey:1.0');
  enc.except_end;
end;

procedure TCoreSrv_UnknownFactoryKey_marshaller._free(var addr: Pointer);
begin
  ICoreSrv_UnknownFactoryKey(addr^) := nil;
end;

procedure TCoreSrv_UnknownFactoryKey_marshaller._create(var addr: Pointer);
begin
  ICoreSrv_UnknownFactoryKey(addr^) := TCoreSrv_UnknownFactoryKey.Create();
end;

procedure TCoreSrv_UnknownFactoryKey_marshaller._assign(dst, src: Pointer);
begin
  ICoreSrv_UnknownFactoryKey(dst^) := ICoreSrv_UnknownFactoryKey(src^);
end;

function TCoreSrv_UnknownFactoryKey_marshaller.typecode: ITypeCode;
begin
  result := _tc_CoreSrv_UnknownFactoryKey.typecode;
end;

//***********************************************************
// TCoreSrv_UnknownFactoryKey
//***********************************************************
constructor TCoreSrv_UnknownFactoryKey.Create(ex: TCoreSrv_UnknownFactoryKey);
begin
  inherited Create();
end;

procedure TCoreSrv_UnknownFactoryKey.throw;
begin
  raise TCoreSrv_UnknownFactoryKey.Create(self);
end;

function TCoreSrv_UnknownFactoryKey.clone(): IORBException;
begin
  result := TCoreSrv_UnknownFactoryKey.Create(self);
end;

procedure TCoreSrv_UnknownFactoryKey.encode(const enc: IEncoder);
var
  int : ICoreSrv_UnknownFactoryKey;
begin
  int := self;
  CoreSrv_UnknownFactoryKey_marshaller.marshal(enc,@int);
end;

procedure TCoreSrv_UnknownFactoryKey.encode_any(const a: IAny);
var
  stat: IStaticAny;
begin
  stat := StaticAny(CoreSrv_UnknownFactoryKey_marshaller, Self);
  a.from_static_any(stat);
end;

constructor TCoreSrv_UnknownFactoryKey.Create();
begin
  inherited Create();
end;

function TCoreSrv_UnknownFactoryKey.repoid(): RepositoryID;
begin
  result := 'IDL:garant.ru/CoreSrv/UnknownFactoryKey:1.0';
end;

initialization
  CoreSrv_NoActiveFactory_marshaller := TCoreSrv_NoActiveFactory_marshaller.Create();
  CoreSrv_ForeignObject_marshaller := TCoreSrv_ForeignObject_marshaller.Create();
  CoreSrv_UnknownFactoryKey_marshaller := TCoreSrv_UnknownFactoryKey_marshaller.Create();
  _tc_CoreSrv_NoActiveFactory := CreateTypeCodeConst('01000000160000004c000000010000002a00000049444c3a676172616e742e72752f436f72655372762f4e6f416374697665466163746f'+
    '72793a312e30000000100000004e6f416374697665466163746f72790000000000');
  _tc_CoreSrv_ForeignObject := CreateTypeCodeConst('010000001600000048000000010000002800000049444c3a676172616e742e72752f436f72655372762f466f726569676e4f626a656374'+
    '3a312e30000e000000466f726569676e4f626a65637400000000000000');
  _tc_CoreSrv_UnknownFactoryKey := CreateTypeCodeConst('010000001600000050000000010000002c00000049444c3a676172616e742e72752f436f72655372762f556e6b6e6f776e466163746f72'+
    '794b65793a312e300012000000556e6b6e6f776e466163746f72794b657900000000000000');
end.
