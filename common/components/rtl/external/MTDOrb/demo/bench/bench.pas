// ***************************************************************************
//                                                                            
// Generated by the MTDORB IDL-to-Pascal Translator (1.0.1b1), 21.09.2010 13:26
//                                                                            
// Copyright (c) 2002 - 2004                                                  
// Millennium Group.                                                          
// Samara, Russia                                                             
//                                                                            
// All Rights Reserved                                                        
//                                                                            
// ***************************************************************************
// Compiled with parameters: " -notabs -impl -i../..//idl -i./ ./\bench.idl" 
//                                                                            
unit bench;

interface

uses
  Classes, orb_int, orb, req_int, code_int, env_int, stdstat, std_seq,imr, imr_int, 
  orbtypes, exceptions, except_int, bench_int, poa_int, poa;

type

  {** IDL:Bench:1.0 } 
  TBench = class(TORBObject,IBench)
  protected
    procedure f; virtual; abstract;
    procedure sync; virtual; abstract;
    procedure g; virtual; abstract;
    procedure connect(const b: IBench; const level: long); virtual; abstract;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    class function _narrow(const obj : IORBObject): IBench;
    class function narrow_helper2(const obj: IORBObject): Boolean;
  end;

  {** stub for interface IDL:Bench:1.0} 
  TBench_stub = class(TBench)
  protected
    procedure f; override;
    procedure sync; override;
    procedure g; override;
    procedure connect(const b: IBench; const level: long); override;
  end;

  {** POA stub for interface IDL:Bench:1.0} 
  TBench_stub_clp = class(TPOAStub,IPOAStub,IBench)
  protected
    procedure f; virtual;
    procedure sync; virtual;
    procedure g; virtual;
    procedure connect(const b: IBench; const level: long); virtual;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  end;

  {** servant for interface IDL:Bench:1.0} 
  TBench_serv = class(TPOAStaticImplementation,IPOAStaticImplementation,IServant,IBench)
  private
    FImplementation: IBench;
  protected
    procedure f; virtual;
    procedure sync; virtual;
    procedure g; virtual;
    procedure connect(const b: IBench; const level: long); virtual;
    function _primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID; override;
    function _make_stub(const poa: IPOA; const obj : IORBObject): IORBObject; override;
    function _is_a(const repoid: RepositoryID): Boolean; override;
    procedure invoke(const serv: IStaticServerRequest); override;
    function _dispatch(const req: IStaticServerRequest): Boolean;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    constructor Create(const AImpl: IBench = nil);
    function _this(): IBench;
    class function _narrow(const srv : IServant): IBench;
  end;

  TBench_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

var
  Bench_marshaller : IStaticTypeInfo;
  _tc_Bench : ITypeCodeConst;

implementation

uses
  SysUtils, any, tcode, static, throw;

//***********************************************************
// TBench
//***********************************************************
function TBench.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:Bench:1.0' then
    begin
      result := Pointer(self as IBench);
      exit;
    end;
end;

class function TBench._narrow(const obj : IORBObject): IBench;
var
  p: Pointer;
  stub: TBench_stub;
begin
  result := nil;
  if obj = nil then exit;
  p := obj.narrow_helper('IDL:Bench:1.0');
  if p <> nil then
    result := IBench(p)
  else
    begin
      if narrow_helper2(obj) or obj._is_a_remote('IDL:Bench:1.0') then
        begin
          stub := TBench_stub.Create();
          stub.assign(obj);
          result := stub;
        end;
    end;
end;

class function TBench.narrow_helper2(const obj: IORBObject): Boolean;
begin
  result := obj._repoid = 'IDL:Bench:1.0'
end;

//***********************************************************
// TBench_stub
//***********************************************************
procedure TBench_stub.f;
var
  req: IStaticRequest;
begin
  req := StaticRequest(self,'f');
  req.invoke;
  dorb_static_throw(req);
end;

procedure TBench_stub.sync;
var
  req: IStaticRequest;
begin
  req := StaticRequest(self,'sync');
  req.invoke;
  dorb_static_throw(req);
end;

procedure TBench_stub.g;
var
  req: IStaticRequest;
begin
  req := StaticRequest(self,'g');
  req.invoke;
  dorb_static_throw(req);
end;

procedure TBench_stub.connect(const b: IBench; const level: long);
var
  req: IStaticRequest;
  _b: IStaticAny;
  _level: IStaticAny;
begin
  _b := StaticAny(Bench_marshaller,@b);
  _level := StaticAny(stat_long,@level);
  req := StaticRequest(self,'connect');
  req.add_in_arg(_b);
  req.add_in_arg(_level);
  req.invoke;
  dorb_static_throw(req);
end;

//***********************************************************
// TBench_stub_clp
//***********************************************************
function TBench_stub_clp.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:Bench:1.0' then
    begin
      result := Pointer(self as IBench);
      exit;
  end;
end;

procedure TBench_stub_clp.f;
var
  _srv: IServant;
  srv: IBench;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TBench_serv._narrow(_srv);
      if srv <> nil then
        srv.f
    end;
  _postinvoke();
end;

procedure TBench_stub_clp.sync;
var
  _srv: IServant;
  srv: IBench;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TBench_serv._narrow(_srv);
      if srv <> nil then
        srv.sync
    end;
  _postinvoke();
end;

procedure TBench_stub_clp.g;
var
  _srv: IServant;
  srv: IBench;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TBench_serv._narrow(_srv);
      if srv <> nil then
        srv.g
    end;
  _postinvoke();
end;

procedure TBench_stub_clp.connect(const b: IBench; const level: long);
var
  _srv: IServant;
  srv: IBench;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TBench_serv._narrow(_srv);
      if srv <> nil then
        srv.connect(b, level)
    end;
  _postinvoke();
end;

//***********************************************************
// TBench_serv
//***********************************************************
constructor TBench_serv.Create(const AImpl: IBench);
begin
  inherited Create();
  FImplementation := AImpl;
end;

procedure TBench_serv.f;
begin
  FImplementation.f;
end;

procedure TBench_serv.sync;
begin
  FImplementation.sync;
end;

procedure TBench_serv.g;
begin
  FImplementation.g;
end;

procedure TBench_serv.connect(const b: IBench; const level: long);
begin
  FImplementation.connect(b, level);
end;

function TBench_serv._this(): IBench;
var
  obj: IORBObject;
begin
  obj := this();
  result := TBench._narrow(obj);
end;

function TBench_serv._is_a(const repoid: RepositoryID): Boolean;
begin
  result := repoid = 'IDL:Bench:1.0';
end;

function TBench_serv._primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID;
begin
  result := 'IDL:Bench:1.0';
end;

function TBench_serv._make_stub(const poa: IPOA; const obj : IORBObject): IORBObject;
begin
  result := TBench_stub_clp.Create(poa,obj);
end;

procedure TBench_serv.invoke(const serv: IStaticServerRequest);
begin
  if not _dispatch(serv) then
    begin
      serv.set_exception(BAD_OPERATION.Create(0, COMPLETED_NO) as IORBException);
      serv.write_results();
    end;
end;

function TBench_serv.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:Bench:1.0' then
    begin
      result := Pointer(IBench(self));
      exit;
    end;
end;

class function TBench_serv._narrow(const srv : IServant): IBench;
var
  p: Pointer;
begin
  result := nil;
  if srv = nil then exit;
  p := srv.narrow_helper('IDL:Bench:1.0');
  if p <> nil then
    result := IBench(p)
end;

function TBench_serv._dispatch(const req: IStaticServerRequest): Boolean;
var
  connect_b: IBench;
  connect_level: long;
begin
  result := true;
  if req.op_name = 'f' then
    begin
      if not req.read_args() then  exit;
      f;
      req.write_results();
      exit;
    end
  else if req.op_name = 'sync' then
    begin
      if not req.read_args() then  exit;
      sync;
      req.write_results();
      exit;
    end
  else if req.op_name = 'g' then
    begin
      if not req.read_args() then  exit;
      g;
      req.write_results();
      exit;
    end
  else if req.op_name = 'connect' then
    begin
      req.add_in_arg(StaticAny(Bench_marshaller,@connect_b) as IStaticAny);
      req.add_in_arg(StaticAny(stat_long,@connect_level) as IStaticAny);
      if not req.read_args() then  exit;
      connect(connect_b, connect_level);
      req.write_results();
      exit;
    end;
  result := false;
end;

//***********************************************************
// TBench_marshaller
//***********************************************************
function TBench_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  obj: IORBObject;
begin
  result := false;
  if not stat_Object.demarshal(dec,@obj) then exit;
  IBench(addr^) := TBench._narrow(obj);
  result := (obj = nil) or (Pointer(addr^) <> nil);
end;

procedure TBench_marshaller.marshal(enc: IEncoder;const addr : Pointer);
var
  obj: IORBObject;
begin
  obj := IBench(addr^) as IORBObject;
  stat_Object.marshal(enc,@Pointer(obj));
end;

procedure TBench_marshaller._free(var addr: Pointer);
begin
  IBench(addr^) := nil;
end;

procedure TBench_marshaller._create(var addr: Pointer);
begin
  IBench(addr^) := TBench_stub.Create();
end;

procedure TBench_marshaller._assign(dst, src: Pointer);
begin
  IBench(dst^) := IBench(src^);
end;

function TBench_marshaller.typecode: ITypeCode;
begin
  result := _tc_Bench.typecode;
end;

initialization
  Bench_marshaller := TBench_marshaller.Create();
  _tc_Bench := CreateTypeCodeConst('010000000e00000022000000010000000e00000049444c3a42656e63683a312e300000000600000042656e636800');
end.
