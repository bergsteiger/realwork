// ***************************************************************************
//                                                                            
// Generated by the MTDORB IDL-to-Pascal Translator (1.0.1b1), 21.09.2010 13:26
//                                                                            
// Copyright (c) 2002 - 2004                                                  
// Millennium Group.                                                          
// Samara, Russia                                                             
//                                                                            
// All Rights Reserved                                                        
//                                                                            
// ***************************************************************************
// Compiled with parameters: " -i../..//idl -i./ ./\bidir.idl" 
//                                                                            
unit bidir;

interface

uses
  Classes, orb_int, orb, req_int, code_int, env_int, stdstat, std_seq,imr, imr_int, 
  orbtypes, exceptions, except_int, bidir_int, poa_int, poa;

type

  {** IDL:demo/bidir/ClientCallback:1.0 } 
  Tdemo_bidir_ClientCallback = class(TORBObject,Idemo_bidir_ClientCallback)
  protected
    procedure hello(const message: AnsiString); virtual; abstract;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    class function _narrow(const obj : IORBObject): Idemo_bidir_ClientCallback;
    class function narrow_helper2(const obj: IORBObject): Boolean;
  end;

  {** stub for interface IDL:demo/bidir/ClientCallback:1.0} 
  Tdemo_bidir_ClientCallback_stub = class(Tdemo_bidir_ClientCallback)
  protected
    procedure hello(const message: AnsiString); override;
  end;

  {** POA stub for interface IDL:demo/bidir/ClientCallback:1.0} 
  Tdemo_bidir_ClientCallback_stub_clp = class(TPOAStub,IPOAStub,Idemo_bidir_ClientCallback)
  protected
    procedure hello(const message: AnsiString); virtual;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  end;

  {** servant for interface IDL:demo/bidir/ClientCallback:1.0} 
  Tdemo_bidir_ClientCallback_serv = class(TPOAStaticImplementation,IPOAStaticImplementation,IServant,Idemo_bidir_ClientCallback)
  protected
    procedure hello(const message: AnsiString); virtual; abstract;
    function _primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID; override;
    function _make_stub(const poa: IPOA; const obj : IORBObject): IORBObject; override;
    function _is_a(const repoid: RepositoryID): Boolean; override;
    procedure invoke(const serv: IStaticServerRequest); override;
    function _dispatch(const req: IStaticServerRequest): Boolean;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    function _this(): Idemo_bidir_ClientCallback;
    class function _narrow(const srv : IServant): Idemo_bidir_ClientCallback;
  end;

  Tdemo_bidir_ClientCallback_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

  {** IDL:demo/bidir/Server:1.0 } 
  Tdemo_bidir_Server = class(TORBObject,Idemo_bidir_Server)
  protected
    procedure register_callback(const cc: Idemo_bidir_ClientCallback); virtual; abstract;
    procedure callback_hello(const message: AnsiString); virtual; abstract;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    class function _narrow(const obj : IORBObject): Idemo_bidir_Server;
    class function narrow_helper2(const obj: IORBObject): Boolean;
  end;

  {** stub for interface IDL:demo/bidir/Server:1.0} 
  Tdemo_bidir_Server_stub = class(Tdemo_bidir_Server)
  protected
    procedure register_callback(const cc: Idemo_bidir_ClientCallback); override;
    procedure callback_hello(const message: AnsiString); override;
  end;

  {** POA stub for interface IDL:demo/bidir/Server:1.0} 
  Tdemo_bidir_Server_stub_clp = class(TPOAStub,IPOAStub,Idemo_bidir_Server)
  protected
    procedure register_callback(const cc: Idemo_bidir_ClientCallback); virtual;
    procedure callback_hello(const message: AnsiString); virtual;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  end;

  {** servant for interface IDL:demo/bidir/Server:1.0} 
  Tdemo_bidir_Server_serv = class(TPOAStaticImplementation,IPOAStaticImplementation,IServant,Idemo_bidir_Server)
  protected
    procedure register_callback(const cc: Idemo_bidir_ClientCallback); virtual; abstract;
    procedure callback_hello(const message: AnsiString); virtual; abstract;
    function _primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID; override;
    function _make_stub(const poa: IPOA; const obj : IORBObject): IORBObject; override;
    function _is_a(const repoid: RepositoryID): Boolean; override;
    procedure invoke(const serv: IStaticServerRequest); override;
    function _dispatch(const req: IStaticServerRequest): Boolean;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    function _this(): Idemo_bidir_Server;
    class function _narrow(const srv : IServant): Idemo_bidir_Server;
  end;

  Tdemo_bidir_Server_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

var
  demo_bidir_ClientCallback_marshaller : IStaticTypeInfo;
  demo_bidir_Server_marshaller : IStaticTypeInfo;
  _tc_demo_bidir_ClientCallback : ITypeCodeConst;
  _tc_demo_bidir_Server : ITypeCodeConst;

implementation

uses
  SysUtils, any, tcode, static, throw;

//***********************************************************
// Tdemo_bidir_ClientCallback
//***********************************************************
function Tdemo_bidir_ClientCallback.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:demo/bidir/ClientCallback:1.0' then
    begin
      result := Pointer(self as Idemo_bidir_ClientCallback);
      exit;
    end;
end;

class function Tdemo_bidir_ClientCallback._narrow(const obj : IORBObject): Idemo_bidir_ClientCallback;
var
  p: Pointer;
  stub: Tdemo_bidir_ClientCallback_stub;
begin
  result := nil;
  if obj = nil then exit;
  p := obj.narrow_helper('IDL:demo/bidir/ClientCallback:1.0');
  if p <> nil then
    result := Idemo_bidir_ClientCallback(p)
  else
    begin
      if narrow_helper2(obj) or obj._is_a_remote('IDL:demo/bidir/ClientCallback:1.0') then
        begin
          stub := Tdemo_bidir_ClientCallback_stub.Create();
          stub.assign(obj);
          result := stub;
        end;
    end;
end;

class function Tdemo_bidir_ClientCallback.narrow_helper2(const obj: IORBObject): Boolean;
begin
  result := obj._repoid = 'IDL:demo/bidir/ClientCallback:1.0'
end;

//***********************************************************
// Tdemo_bidir_ClientCallback_stub
//***********************************************************
procedure Tdemo_bidir_ClientCallback_stub.hello(const message: AnsiString);
var
  req: IStaticRequest;
  _message: IStaticAny;
begin
  _message := StaticAny(stat_string,@message);
  req := StaticRequest(self,'hello');
  req.add_in_arg(_message);
  req.invoke;
  dorb_static_throw(req);
end;

//***********************************************************
// Tdemo_bidir_ClientCallback_stub_clp
//***********************************************************
function Tdemo_bidir_ClientCallback_stub_clp.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:demo/bidir/ClientCallback:1.0' then
    begin
      result := Pointer(self as Idemo_bidir_ClientCallback);
      exit;
  end;
end;

procedure Tdemo_bidir_ClientCallback_stub_clp.hello(const message: AnsiString);
var
  _srv: IServant;
  srv: Idemo_bidir_ClientCallback;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := Tdemo_bidir_ClientCallback_serv._narrow(_srv);
      if srv <> nil then
        srv.hello(message)
    end;
  _postinvoke();
end;

//***********************************************************
// Tdemo_bidir_ClientCallback_serv
//***********************************************************
function Tdemo_bidir_ClientCallback_serv._this(): Idemo_bidir_ClientCallback;
var
  obj: IORBObject;
begin
  obj := this();
  result := Tdemo_bidir_ClientCallback._narrow(obj);
end;

function Tdemo_bidir_ClientCallback_serv._is_a(const repoid: RepositoryID): Boolean;
begin
  result := repoid = 'IDL:demo/bidir/ClientCallback:1.0';
end;

function Tdemo_bidir_ClientCallback_serv._primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID;
begin
  result := 'IDL:demo/bidir/ClientCallback:1.0';
end;

function Tdemo_bidir_ClientCallback_serv._make_stub(const poa: IPOA; const obj : IORBObject): IORBObject;
begin
  result := Tdemo_bidir_ClientCallback_stub_clp.Create(poa,obj);
end;

procedure Tdemo_bidir_ClientCallback_serv.invoke(const serv: IStaticServerRequest);
begin
  if not _dispatch(serv) then
    begin
      serv.set_exception(BAD_OPERATION.Create(0, COMPLETED_NO) as IORBException);
      serv.write_results();
    end;
end;

function Tdemo_bidir_ClientCallback_serv.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:demo/bidir/ClientCallback:1.0' then
    begin
      result := Pointer(Idemo_bidir_ClientCallback(self));
      exit;
    end;
end;

class function Tdemo_bidir_ClientCallback_serv._narrow(const srv : IServant): Idemo_bidir_ClientCallback;
var
  p: Pointer;
begin
  result := nil;
  if srv = nil then exit;
  p := srv.narrow_helper('IDL:demo/bidir/ClientCallback:1.0');
  if p <> nil then
    result := Idemo_bidir_ClientCallback(p)
end;

function Tdemo_bidir_ClientCallback_serv._dispatch(const req: IStaticServerRequest): Boolean;
var
  hello_message: AnsiString;
begin
  result := true;
  if req.op_name = 'hello' then
    begin
      req.add_in_arg(StaticAny(stat_string,@hello_message) as IStaticAny);
      if not req.read_args() then  exit;
      hello(hello_message);
      req.write_results();
      exit;
    end;
  result := false;
end;

//***********************************************************
// Tdemo_bidir_ClientCallback_marshaller
//***********************************************************
function Tdemo_bidir_ClientCallback_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  obj: IORBObject;
begin
  result := false;
  if not stat_Object.demarshal(dec,@obj) then exit;
  Idemo_bidir_ClientCallback(addr^) := Tdemo_bidir_ClientCallback._narrow(obj);
  result := (obj = nil) or (Pointer(addr^) <> nil);
end;

procedure Tdemo_bidir_ClientCallback_marshaller.marshal(enc: IEncoder;const addr : Pointer);
var
  obj: IORBObject;
begin
  obj := Idemo_bidir_ClientCallback(addr^) as IORBObject;
  stat_Object.marshal(enc,@Pointer(obj));
end;

procedure Tdemo_bidir_ClientCallback_marshaller._free(var addr: Pointer);
begin
  Idemo_bidir_ClientCallback(addr^) := nil;
end;

procedure Tdemo_bidir_ClientCallback_marshaller._create(var addr: Pointer);
begin
  Idemo_bidir_ClientCallback(addr^) := Tdemo_bidir_ClientCallback_stub.Create();
end;

procedure Tdemo_bidir_ClientCallback_marshaller._assign(dst, src: Pointer);
begin
  Idemo_bidir_ClientCallback(dst^) := Idemo_bidir_ClientCallback(src^);
end;

function Tdemo_bidir_ClientCallback_marshaller.typecode: ITypeCode;
begin
  result := _tc_demo_bidir_ClientCallback.typecode;
end;

//***********************************************************
// Tdemo_bidir_Server
//***********************************************************
function Tdemo_bidir_Server.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:demo/bidir/Server:1.0' then
    begin
      result := Pointer(self as Idemo_bidir_Server);
      exit;
    end;
end;

class function Tdemo_bidir_Server._narrow(const obj : IORBObject): Idemo_bidir_Server;
var
  p: Pointer;
  stub: Tdemo_bidir_Server_stub;
begin
  result := nil;
  if obj = nil then exit;
  p := obj.narrow_helper('IDL:demo/bidir/Server:1.0');
  if p <> nil then
    result := Idemo_bidir_Server(p)
  else
    begin
      if narrow_helper2(obj) or obj._is_a_remote('IDL:demo/bidir/Server:1.0') then
        begin
          stub := Tdemo_bidir_Server_stub.Create();
          stub.assign(obj);
          result := stub;
        end;
    end;
end;

class function Tdemo_bidir_Server.narrow_helper2(const obj: IORBObject): Boolean;
begin
  result := obj._repoid = 'IDL:demo/bidir/Server:1.0'
end;

//***********************************************************
// Tdemo_bidir_Server_stub
//***********************************************************
procedure Tdemo_bidir_Server_stub.register_callback(const cc: Idemo_bidir_ClientCallback);
var
  req: IStaticRequest;
  _cc: IStaticAny;
begin
  _cc := StaticAny(demo_bidir_ClientCallback_marshaller,@cc);
  req := StaticRequest(self,'register_callback');
  req.add_in_arg(_cc);
  req.invoke;
  dorb_static_throw(req);
end;

procedure Tdemo_bidir_Server_stub.callback_hello(const message: AnsiString);
var
  req: IStaticRequest;
  _message: IStaticAny;
begin
  _message := StaticAny(stat_string,@message);
  req := StaticRequest(self,'callback_hello');
  req.add_in_arg(_message);
  req.invoke;
  dorb_static_throw(req);
end;

//***********************************************************
// Tdemo_bidir_Server_stub_clp
//***********************************************************
function Tdemo_bidir_Server_stub_clp.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:demo/bidir/Server:1.0' then
    begin
      result := Pointer(self as Idemo_bidir_Server);
      exit;
  end;
end;

procedure Tdemo_bidir_Server_stub_clp.register_callback(const cc: Idemo_bidir_ClientCallback);
var
  _srv: IServant;
  srv: Idemo_bidir_Server;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := Tdemo_bidir_Server_serv._narrow(_srv);
      if srv <> nil then
        srv.register_callback(cc)
    end;
  _postinvoke();
end;

procedure Tdemo_bidir_Server_stub_clp.callback_hello(const message: AnsiString);
var
  _srv: IServant;
  srv: Idemo_bidir_Server;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := Tdemo_bidir_Server_serv._narrow(_srv);
      if srv <> nil then
        srv.callback_hello(message)
    end;
  _postinvoke();
end;

//***********************************************************
// Tdemo_bidir_Server_serv
//***********************************************************
function Tdemo_bidir_Server_serv._this(): Idemo_bidir_Server;
var
  obj: IORBObject;
begin
  obj := this();
  result := Tdemo_bidir_Server._narrow(obj);
end;

function Tdemo_bidir_Server_serv._is_a(const repoid: RepositoryID): Boolean;
begin
  result := repoid = 'IDL:demo/bidir/Server:1.0';
end;

function Tdemo_bidir_Server_serv._primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID;
begin
  result := 'IDL:demo/bidir/Server:1.0';
end;

function Tdemo_bidir_Server_serv._make_stub(const poa: IPOA; const obj : IORBObject): IORBObject;
begin
  result := Tdemo_bidir_Server_stub_clp.Create(poa,obj);
end;

procedure Tdemo_bidir_Server_serv.invoke(const serv: IStaticServerRequest);
begin
  if not _dispatch(serv) then
    begin
      serv.set_exception(BAD_OPERATION.Create(0, COMPLETED_NO) as IORBException);
      serv.write_results();
    end;
end;

function Tdemo_bidir_Server_serv.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:demo/bidir/Server:1.0' then
    begin
      result := Pointer(Idemo_bidir_Server(self));
      exit;
    end;
end;

class function Tdemo_bidir_Server_serv._narrow(const srv : IServant): Idemo_bidir_Server;
var
  p: Pointer;
begin
  result := nil;
  if srv = nil then exit;
  p := srv.narrow_helper('IDL:demo/bidir/Server:1.0');
  if p <> nil then
    result := Idemo_bidir_Server(p)
end;

function Tdemo_bidir_Server_serv._dispatch(const req: IStaticServerRequest): Boolean;
var
  register_callback_cc: Idemo_bidir_ClientCallback;
  callback_hello_message: AnsiString;
begin
  result := true;
  if req.op_name = 'register_callback' then
    begin
      req.add_in_arg(StaticAny(demo_bidir_ClientCallback_marshaller,@register_callback_cc) as IStaticAny);
      if not req.read_args() then  exit;
      register_callback(register_callback_cc);
      req.write_results();
      exit;
    end
  else if req.op_name = 'callback_hello' then
    begin
      req.add_in_arg(StaticAny(stat_string,@callback_hello_message) as IStaticAny);
      if not req.read_args() then  exit;
      callback_hello(callback_hello_message);
      req.write_results();
      exit;
    end;
  result := false;
end;

//***********************************************************
// Tdemo_bidir_Server_marshaller
//***********************************************************
function Tdemo_bidir_Server_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  obj: IORBObject;
begin
  result := false;
  if not stat_Object.demarshal(dec,@obj) then exit;
  Idemo_bidir_Server(addr^) := Tdemo_bidir_Server._narrow(obj);
  result := (obj = nil) or (Pointer(addr^) <> nil);
end;

procedure Tdemo_bidir_Server_marshaller.marshal(enc: IEncoder;const addr : Pointer);
var
  obj: IORBObject;
begin
  obj := Idemo_bidir_Server(addr^) as IORBObject;
  stat_Object.marshal(enc,@Pointer(obj));
end;

procedure Tdemo_bidir_Server_marshaller._free(var addr: Pointer);
begin
  Idemo_bidir_Server(addr^) := nil;
end;

procedure Tdemo_bidir_Server_marshaller._create(var addr: Pointer);
begin
  Idemo_bidir_Server(addr^) := Tdemo_bidir_Server_stub.Create();
end;

procedure Tdemo_bidir_Server_marshaller._assign(dst, src: Pointer);
begin
  Idemo_bidir_Server(dst^) := Idemo_bidir_Server(src^);
end;

function Tdemo_bidir_Server_marshaller.typecode: ITypeCode;
begin
  result := _tc_demo_bidir_Server.typecode;
end;

initialization
  demo_bidir_ClientCallback_marshaller := Tdemo_bidir_ClientCallback_marshaller.Create();
  demo_bidir_Server_marshaller := Tdemo_bidir_Server_marshaller.Create();
  _tc_demo_bidir_ClientCallback := CreateTypeCodeConst('010000000e0000003f000000010000002200000049444c3a64656d6f2f62696469722f436c69656e7443616c6c6261636b3a312e300000'+
    '000f000000436c69656e7443616c6c6261636b00');
  _tc_demo_bidir_Server := CreateTypeCodeConst('010000000e0000002f000000010000001a00000049444c3a64656d6f2f62696469722f5365727665723a312e300000000700000053657276657200');
end.
