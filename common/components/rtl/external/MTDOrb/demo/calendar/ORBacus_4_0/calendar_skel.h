// **********************************************************************
//
// Generated by the ORBacus IDL-to-C++ Translator
//
// Copyright (c) 1999
// Object Oriented Concepts, Inc.
// Billerica, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.0b2
// License: non-commercial

#ifndef ___calendar_skel_h__
#define ___calendar_skel_h__

#include "calendar.h"

#ifndef OB_INTEGER_VERSION
#   error No ORBacus version defined!
#endif

#ifndef OB_NO_VERSION_CHECK
#   if (OB_INTEGER_VERSION != 3999952L)
#       error ORBacus version mismatch!
#   endif
#endif

//
// IDL:Calendar:1.0
//
class POA_Calendar : virtual public PortableServer::ServantBase
{
    POA_Calendar(const POA_Calendar&);
    void operator=(const POA_Calendar&);

protected:

    //
    // IDL:Calendar/insert:1.0
    //
    OB::DispatchStatus _OB_op_insert(OB::Upcall_ptr);

    //
    // IDL:Calendar/find_date:1.0
    //
    OB::DispatchStatus _OB_op_find_date(OB::Upcall_ptr);

    //
    // IDL:Calendar/find_note:1.0
    //
    OB::DispatchStatus _OB_op_find_note(OB::Upcall_ptr);

public:

    POA_Calendar() { }

    virtual CORBA::Boolean _is_a(const char*)
        throw(CORBA::SystemException);

    virtual CORBA::RepositoryId _primary_interface(const PortableServer::ObjectId&, PortableServer::POA_ptr);

    Calendar_ptr _this();

    virtual bool _OB_hasInterceptors();
    virtual OB::DirectStubImpl_ptr _OB_createDirectStubImpl(PortableServer::POA_ptr,
                                                            const PortableServer::ObjectId&);

    virtual OB::DispatchStatus _OB_dispatch(OB::Upcall_ptr);

    //
    // IDL:Calendar/insert:1.0
    //
    virtual void insert(date* when,
                        const char* what)
        throw(CORBA::SystemException) = 0;

    //
    // IDL:Calendar/find_date:1.0
    //
    virtual CORBA::Boolean find_date(date* when,
                                     CORBA::String_out what)
        throw(CORBA::SystemException) = 0;

    //
    // IDL:Calendar/find_note:1.0
    //
    virtual CORBA::Boolean find_note(const char* what,
                                     date*& when)
        throw(CORBA::SystemException) = 0;
};

//
// IDL:Calendar:1.0
//
class OBDirectStubImpl_Calendar : virtual public OBStubImpl_Calendar,
                                  virtual public OB::DirectStubImpl
{
    OBDirectStubImpl_Calendar(const OBDirectStubImpl_Calendar&);
    void operator=(const OBDirectStubImpl_Calendar&);

#ifdef HAVE_VCPLUSPLUS_BUGS
public:
#else
protected:
#endif

    POA_Calendar* _ob_servant_Calendar_;

#ifdef HAVE_VCPLUSPLUS_BUGS
protected:

    OBDirectStubImpl_Calendar() { }
#endif

    OBDirectStubImpl_Calendar(PortableServer::POA_ptr,
                              const PortableServer::ObjectId&,
                              POA_Calendar*);

    friend class POA_Calendar;

public:

    //
    // IDL:Calendar/insert:1.0
    //
    virtual void insert(date* when,
                        const char* what);

    //
    // IDL:Calendar/find_date:1.0
    //
    virtual CORBA::Boolean find_date(date* when,
                                     CORBA::String_out what);

    //
    // IDL:Calendar/find_note:1.0
    //
    virtual CORBA::Boolean find_note(const char* what,
                                     date*& when);
};

#endif
