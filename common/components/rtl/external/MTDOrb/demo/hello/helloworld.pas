// ***************************************************************************
//                                                                            
// Generated by the MTDORB IDL-to-Pascal Translator (1.0.1b1), 21.09.2010 13:27
//                                                                            
// Copyright (c) 2002 - 2004                                                  
// Millennium Group.                                                          
// Samara, Russia                                                             
//                                                                            
// All Rights Reserved                                                        
//                                                                            
// ***************************************************************************
// Compiled with parameters: " -i../..//idl -i./ ./\helloworld.idl" 
//                                                                            
unit helloworld;

interface

uses
  Classes, orb_int, orb, req_int, code_int, env_int, stdstat, std_seq,imr, imr_int, 
  orbtypes, exceptions, except_int, helloworld_int, poa_int, poa;

type

  {** IDL:HelloWorld:1.0 } 
  THelloWorld = class(TORBObject,IHelloWorld)
  protected
    procedure hello; virtual; abstract;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    class function _narrow(const obj : IORBObject): IHelloWorld;
    class function narrow_helper2(const obj: IORBObject): Boolean;
  end;

  {** stub for interface IDL:HelloWorld:1.0} 
  THelloWorld_stub = class(THelloWorld)
  protected
    procedure hello; override;
  end;

  {** POA stub for interface IDL:HelloWorld:1.0} 
  THelloWorld_stub_clp = class(TPOAStub,IPOAStub,IHelloWorld)
  protected
    procedure hello; virtual;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  end;

  {** servant for interface IDL:HelloWorld:1.0} 
  THelloWorld_serv = class(TPOAStaticImplementation,IPOAStaticImplementation,IServant,IHelloWorld)
  protected
    procedure hello; virtual; abstract;
    function _primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID; override;
    function _make_stub(const poa: IPOA; const obj : IORBObject): IORBObject; override;
    function _is_a(const repoid: RepositoryID): Boolean; override;
    procedure invoke(const serv: IStaticServerRequest); override;
    function _dispatch(const req: IStaticServerRequest): Boolean;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    function _this(): IHelloWorld;
    class function _narrow(const srv : IServant): IHelloWorld;
  end;

  THelloWorld_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

var
  HelloWorld_marshaller : IStaticTypeInfo;
  _tc_HelloWorld : ITypeCodeConst;

implementation

uses
  SysUtils, any, tcode, static, throw;

//***********************************************************
// THelloWorld
//***********************************************************
function THelloWorld.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:HelloWorld:1.0' then
    begin
      result := Pointer(self as IHelloWorld);
      exit;
    end;
end;

class function THelloWorld._narrow(const obj : IORBObject): IHelloWorld;
var
  p: Pointer;
  stub: THelloWorld_stub;
begin
  result := nil;
  if obj = nil then exit;
  p := obj.narrow_helper('IDL:HelloWorld:1.0');
  if p <> nil then
    result := IHelloWorld(p)
  else
    begin
      if narrow_helper2(obj) or obj._is_a_remote('IDL:HelloWorld:1.0') then
        begin
          stub := THelloWorld_stub.Create();
          stub.assign(obj);
          result := stub;
        end;
    end;
end;

class function THelloWorld.narrow_helper2(const obj: IORBObject): Boolean;
begin
  result := obj._repoid = 'IDL:HelloWorld:1.0'
end;

//***********************************************************
// THelloWorld_stub
//***********************************************************
procedure THelloWorld_stub.hello;
var
  req: IStaticRequest;
begin
  req := StaticRequest(self,'hello');
  req.invoke;
  dorb_static_throw(req);
end;

//***********************************************************
// THelloWorld_stub_clp
//***********************************************************
function THelloWorld_stub_clp.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:HelloWorld:1.0' then
    begin
      result := Pointer(self as IHelloWorld);
      exit;
  end;
end;

procedure THelloWorld_stub_clp.hello;
var
  _srv: IServant;
  srv: IHelloWorld;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := THelloWorld_serv._narrow(_srv);
      if srv <> nil then
        srv.hello
    end;
  _postinvoke();
end;

//***********************************************************
// THelloWorld_serv
//***********************************************************
function THelloWorld_serv._this(): IHelloWorld;
var
  obj: IORBObject;
begin
  obj := this();
  result := THelloWorld._narrow(obj);
end;

function THelloWorld_serv._is_a(const repoid: RepositoryID): Boolean;
begin
  result := repoid = 'IDL:HelloWorld:1.0';
end;

function THelloWorld_serv._primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID;
begin
  result := 'IDL:HelloWorld:1.0';
end;

function THelloWorld_serv._make_stub(const poa: IPOA; const obj : IORBObject): IORBObject;
begin
  result := THelloWorld_stub_clp.Create(poa,obj);
end;

procedure THelloWorld_serv.invoke(const serv: IStaticServerRequest);
begin
  if not _dispatch(serv) then
    begin
      serv.set_exception(BAD_OPERATION.Create(0, COMPLETED_NO) as IORBException);
      serv.write_results();
    end;
end;

function THelloWorld_serv.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:HelloWorld:1.0' then
    begin
      result := Pointer(IHelloWorld(self));
      exit;
    end;
end;

class function THelloWorld_serv._narrow(const srv : IServant): IHelloWorld;
var
  p: Pointer;
begin
  result := nil;
  if srv = nil then exit;
  p := srv.narrow_helper('IDL:HelloWorld:1.0');
  if p <> nil then
    result := IHelloWorld(p)
end;

function THelloWorld_serv._dispatch(const req: IStaticServerRequest): Boolean;
begin
  result := true;
  if req.op_name = 'hello' then
    begin
      if not req.read_args() then  exit;
      hello;
      req.write_results();
      exit;
    end;
  result := false;
end;

//***********************************************************
// THelloWorld_marshaller
//***********************************************************
function THelloWorld_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  obj: IORBObject;
begin
  result := false;
  if not stat_Object.demarshal(dec,@obj) then exit;
  IHelloWorld(addr^) := THelloWorld._narrow(obj);
  result := (obj = nil) or (Pointer(addr^) <> nil);
end;

procedure THelloWorld_marshaller.marshal(enc: IEncoder;const addr : Pointer);
var
  obj: IORBObject;
begin
  obj := IHelloWorld(addr^) as IORBObject;
  stat_Object.marshal(enc,@Pointer(obj));
end;

procedure THelloWorld_marshaller._free(var addr: Pointer);
begin
  IHelloWorld(addr^) := nil;
end;

procedure THelloWorld_marshaller._create(var addr: Pointer);
begin
  IHelloWorld(addr^) := THelloWorld_stub.Create();
end;

procedure THelloWorld_marshaller._assign(dst, src: Pointer);
begin
  IHelloWorld(dst^) := IHelloWorld(src^);
end;

function THelloWorld_marshaller.typecode: ITypeCode;
begin
  result := _tc_HelloWorld.typecode;
end;

initialization
  HelloWorld_marshaller := THelloWorld_marshaller.Create();
  _tc_HelloWorld := CreateTypeCodeConst('010000000e0000002b000000010000001300000049444c3a48656c6c6f576f726c643a312e3000000b00000048656c6c6f576f726c6400');
end.
