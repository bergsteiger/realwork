// ***************************************************************************
//                                                                            
// Generated by the MTDORB IDL-to-Pascal Translator (1.0.b5), 26.03.2004 15:03
//                                                                            
// Copyright (c) 2002 - 2003                                                  
// Millennium Group.                                                          
// Samara, Russia                                                             
//                                                                            
// All Rights Reserved                                                        
//                                                                            
// ***************************************************************************
unit TransactionService;

interface

uses
  Classes, orb_int, orb, req_int, code_int, imr, imr_int, env_int, stdstat, std_seq,
  orbtypes, exceptions, except_int, TransactionService_int, value_int, value, CosTransactions_int,
  CosTransactions, poa_int, poa;

type

  Torg_jboss_tm_iiop_TransactionId_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

  Torg_jboss_tm_iiop_TransactionDesc_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

  {** IDL:org/jboss/tm/iiop/TransactionFactoryExt:1.0 } 
  Torg_jboss_tm_iiop_TransactionFactoryExt = class(TTransactionFactory,Iorg_jboss_tm_iiop_TransactionFactoryExt)
  protected
    function create_transaction(const time_out: _ulong): Torg_jboss_tm_iiop_TransactionDesc; virtual; abstract;
    function narrow_helper(const str: string): Pointer; override;
  public
    class function _narrow(const obj : IORBObject): Iorg_jboss_tm_iiop_TransactionFactoryExt;
    class function narrow_helper2(const obj: IORBObject): Boolean;
  end;

  {** stub for interface IDL:org/jboss/tm/iiop/TransactionFactoryExt:1.0} 
  Torg_jboss_tm_iiop_TransactionFactoryExt_stub = class(Torg_jboss_tm_iiop_TransactionFactoryExt)
  protected
    function _create(const time_out: _ulong): IControl; override;
    function recreate(const ctx: TPropagationContext): IControl; override;
    function create_transaction(const time_out: _ulong): Torg_jboss_tm_iiop_TransactionDesc; override;
  end;

  {** POA stub for interface IDL:org/jboss/tm/iiop/TransactionFactoryExt:1.0} 
  Torg_jboss_tm_iiop_TransactionFactoryExt_stub_clp = class(TTransactionFactory_stub_clp,Iorg_jboss_tm_iiop_TransactionFactoryExt)
  protected
    function create_transaction(const time_out: _ulong): Torg_jboss_tm_iiop_TransactionDesc; virtual;
    function narrow_helper(const str: string): Pointer; override;
  end;

  {** servant for interface IDL:org/jboss/tm/iiop/TransactionFactoryExt:1.0} 
  Torg_jboss_tm_iiop_TransactionFactoryExt_serv = class(TTransactionFactory_serv,Iorg_jboss_tm_iiop_TransactionFactoryExt)
  protected
    function create_transaction(const time_out: _ulong): Torg_jboss_tm_iiop_TransactionDesc; virtual; abstract;
    function _primary_interface(const objid: ObjectID; const poa: IPOA): string; override;
    function _make_stub(const poa: IPOA; const obj : IORBObject): IORBObject; override;
    function _is_a(const repoid: RepositoryID): Boolean; override;
    procedure invoke(const serv: IStaticServerRequest); override;
    function _dispatch(const req: IStaticServerRequest): Boolean;
    function narrow_helper(const str: string): Pointer; override;
  public
    function _this(): Iorg_jboss_tm_iiop_TransactionFactoryExt;
    class function _narrow(const srv : IServant): Iorg_jboss_tm_iiop_TransactionFactoryExt;
  end;

  Torg_jboss_tm_iiop_TransactionFactoryExt_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

  {** IDL:org/jboss/tm/iiop/CoordinatorExt:1.0 } 
  Torg_jboss_tm_iiop_CoordinatorExt = class(TCoordinator,Iorg_jboss_tm_iiop_CoordinatorExt)
  protected
    function get_transaction_id: Torg_jboss_tm_iiop_TransactionId; virtual; abstract;
    function narrow_helper(const str: string): Pointer; override;
  public
    class function _narrow(const obj : IORBObject): Iorg_jboss_tm_iiop_CoordinatorExt;
    class function narrow_helper2(const obj: IORBObject): Boolean;
  end;

  {** stub for interface IDL:org/jboss/tm/iiop/CoordinatorExt:1.0} 
  Torg_jboss_tm_iiop_CoordinatorExt_stub = class(Torg_jboss_tm_iiop_CoordinatorExt)
  protected
    function get_status: TStatus; override;
    function get_parent_status: TStatus; override;
    function get_top_level_status: TStatus; override;
    function is_same_transaction(const tc: ICoordinator): boolean; override;
    function is_related_transaction(const tc: ICoordinator): boolean; override;
    function is_ancestor_transaction(const tc: ICoordinator): boolean; override;
    function is_descendant_transaction(const tc: ICoordinator): boolean; override;
    function is_top_level_transaction: boolean; override;
    function hash_transaction: _ulong; override;
    function hash_top_level_tran: _ulong; override;
    function register_resource(const r: IResource): IRecoveryCoordinator; override;
    procedure register_synchronization(const sync: ISynchronization); override;
    procedure register_subtran_aware(const r: ISubtransactionAwareResource); override;
    procedure rollback_only; override;
    function get_transaction_name: string; override;
    function create_subtransaction: IControl; override;
    function get_txcontext: TPropagationContext; override;
    function get_transaction_id: Torg_jboss_tm_iiop_TransactionId; override;
  end;

  {** POA stub for interface IDL:org/jboss/tm/iiop/CoordinatorExt:1.0} 
  Torg_jboss_tm_iiop_CoordinatorExt_stub_clp = class(TCoordinator_stub_clp,Iorg_jboss_tm_iiop_CoordinatorExt)
  protected
    function get_transaction_id: Torg_jboss_tm_iiop_TransactionId; virtual;
    function narrow_helper(const str: string): Pointer; override;
  end;

  {** servant for interface IDL:org/jboss/tm/iiop/CoordinatorExt:1.0} 
  Torg_jboss_tm_iiop_CoordinatorExt_serv = class(TCoordinator_serv,Iorg_jboss_tm_iiop_CoordinatorExt)
  protected
    function get_transaction_id: Torg_jboss_tm_iiop_TransactionId; virtual; abstract;
    function _primary_interface(const objid: ObjectID; const poa: IPOA): string; override;
    function _make_stub(const poa: IPOA; const obj : IORBObject): IORBObject; override;
    function _is_a(const repoid: RepositoryID): Boolean; override;
    procedure invoke(const serv: IStaticServerRequest); override;
    function _dispatch(const req: IStaticServerRequest): Boolean;
    function narrow_helper(const str: string): Pointer; override;
  public
    function _this(): Iorg_jboss_tm_iiop_CoordinatorExt;
    class function _narrow(const srv : IServant): Iorg_jboss_tm_iiop_CoordinatorExt;
  end;

  Torg_jboss_tm_iiop_CoordinatorExt_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

  {** IDL:org/jboss/tm/iiop/TransactionService:1.0 } 
  Torg_jboss_tm_iiop_TransactionService = class(Torg_jboss_tm_iiop_TransactionFactoryExt,Iorg_jboss_tm_iiop_TransactionService,IControl,Iorg_jboss_tm_iiop_CoordinatorExt,ITerminator)
  protected
    function get_terminator: ITerminator; virtual; abstract;
    function get_coordinator: ICoordinator; virtual; abstract;
    function get_transaction_id: Torg_jboss_tm_iiop_TransactionId; virtual; abstract;
    function get_status: TStatus; virtual; abstract;
    function get_parent_status: TStatus; virtual; abstract;
    function get_top_level_status: TStatus; virtual; abstract;
    function is_same_transaction(const tc: ICoordinator): boolean; virtual; abstract;
    function is_related_transaction(const tc: ICoordinator): boolean; virtual; abstract;
    function is_ancestor_transaction(const tc: ICoordinator): boolean; virtual; abstract;
    function is_descendant_transaction(const tc: ICoordinator): boolean; virtual; abstract;
    function is_top_level_transaction: boolean; virtual; abstract;
    function hash_transaction: _ulong; virtual; abstract;
    function hash_top_level_tran: _ulong; virtual; abstract;
    function register_resource(const r: IResource): IRecoveryCoordinator; virtual; abstract;
    procedure register_synchronization(const sync: ISynchronization); virtual; abstract;
    procedure register_subtran_aware(const r: ISubtransactionAwareResource); virtual; abstract;
    procedure rollback_only; virtual; abstract;
    function get_transaction_name: string; virtual; abstract;
    function create_subtransaction: IControl; virtual; abstract;
    function get_txcontext: TPropagationContext; virtual; abstract;
    procedure commit(const report_heuristics: boolean); virtual; abstract;
    procedure rollback; virtual; abstract;
    function narrow_helper(const str: string): Pointer; override;
  public
    class function _narrow(const obj : IORBObject): Iorg_jboss_tm_iiop_TransactionService;
    class function narrow_helper2(const obj: IORBObject): Boolean;
  end;

  {** stub for interface IDL:org/jboss/tm/iiop/TransactionService:1.0} 
  Torg_jboss_tm_iiop_TransactionService_stub = class(Torg_jboss_tm_iiop_TransactionService,IControl,Iorg_jboss_tm_iiop_CoordinatorExt,ITerminator)
  protected
    function get_terminator: ITerminator; override;
    function get_coordinator: ICoordinator; override;
    function get_transaction_id: Torg_jboss_tm_iiop_TransactionId; override;
    function get_status: TStatus; override;
    function get_parent_status: TStatus; override;
    function get_top_level_status: TStatus; override;
    function is_same_transaction(const tc: ICoordinator): boolean; override;
    function is_related_transaction(const tc: ICoordinator): boolean; override;
    function is_ancestor_transaction(const tc: ICoordinator): boolean; override;
    function is_descendant_transaction(const tc: ICoordinator): boolean; override;
    function is_top_level_transaction: boolean; override;
    function hash_transaction: _ulong; override;
    function hash_top_level_tran: _ulong; override;
    function register_resource(const r: IResource): IRecoveryCoordinator; override;
    procedure register_synchronization(const sync: ISynchronization); override;
    procedure register_subtran_aware(const r: ISubtransactionAwareResource); override;
    procedure rollback_only; override;
    function get_transaction_name: string; override;
    function create_subtransaction: IControl; override;
    function get_txcontext: TPropagationContext; override;
    procedure commit(const report_heuristics: boolean); override;
    procedure rollback; override;
    function create_transaction(const time_out: _ulong): Torg_jboss_tm_iiop_TransactionDesc; override;
    function _create(const time_out: _ulong): IControl; override;
    function recreate(const ctx: TPropagationContext): IControl; override;
  end;

  {** POA stub for interface IDL:org/jboss/tm/iiop/TransactionService:1.0} 
  Torg_jboss_tm_iiop_TransactionService_stub_clp = class(Torg_jboss_tm_iiop_TransactionFactoryExt_stub_clp,Iorg_jboss_tm_iiop_TransactionService,IControl,Iorg_jboss_tm_iiop_CoordinatorExt,ITerminator)
  protected
    function get_terminator: ITerminator; virtual;
    function get_coordinator: ICoordinator; virtual;
    function get_transaction_id: Torg_jboss_tm_iiop_TransactionId; virtual;
    function get_status: TStatus; virtual;
    function get_parent_status: TStatus; virtual;
    function get_top_level_status: TStatus; virtual;
    function is_same_transaction(const tc: ICoordinator): boolean; virtual;
    function is_related_transaction(const tc: ICoordinator): boolean; virtual;
    function is_ancestor_transaction(const tc: ICoordinator): boolean; virtual;
    function is_descendant_transaction(const tc: ICoordinator): boolean; virtual;
    function is_top_level_transaction: boolean; virtual;
    function hash_transaction: _ulong; virtual;
    function hash_top_level_tran: _ulong; virtual;
    function register_resource(const r: IResource): IRecoveryCoordinator; virtual;
    procedure register_synchronization(const sync: ISynchronization); virtual;
    procedure register_subtran_aware(const r: ISubtransactionAwareResource); virtual;
    procedure rollback_only; virtual;
    function get_transaction_name: string; virtual;
    function create_subtransaction: IControl; virtual;
    function get_txcontext: TPropagationContext; virtual;
    procedure commit(const report_heuristics: boolean); virtual;
    procedure rollback; virtual;
    function narrow_helper(const str: string): Pointer; override;
  end;

  {** servant for interface IDL:org/jboss/tm/iiop/TransactionService:1.0} 
  Torg_jboss_tm_iiop_TransactionService_serv = class(Torg_jboss_tm_iiop_TransactionFactoryExt_serv,Iorg_jboss_tm_iiop_TransactionService,IControl,Iorg_jboss_tm_iiop_CoordinatorExt,ITerminator)
  protected
    function get_terminator: ITerminator; virtual; abstract;
    function get_coordinator: ICoordinator; virtual; abstract;
    function get_transaction_id: Torg_jboss_tm_iiop_TransactionId; virtual; abstract;
    function get_status: TStatus; virtual; abstract;
    function get_parent_status: TStatus; virtual; abstract;
    function get_top_level_status: TStatus; virtual; abstract;
    function is_same_transaction(const tc: ICoordinator): boolean; virtual; abstract;
    function is_related_transaction(const tc: ICoordinator): boolean; virtual; abstract;
    function is_ancestor_transaction(const tc: ICoordinator): boolean; virtual; abstract;
    function is_descendant_transaction(const tc: ICoordinator): boolean; virtual; abstract;
    function is_top_level_transaction: boolean; virtual; abstract;
    function hash_transaction: _ulong; virtual; abstract;
    function hash_top_level_tran: _ulong; virtual; abstract;
    function register_resource(const r: IResource): IRecoveryCoordinator; virtual; abstract;
    procedure register_synchronization(const sync: ISynchronization); virtual; abstract;
    procedure register_subtran_aware(const r: ISubtransactionAwareResource); virtual; abstract;
    procedure rollback_only; virtual; abstract;
    function get_transaction_name: string; virtual; abstract;
    function create_subtransaction: IControl; virtual; abstract;
    function get_txcontext: TPropagationContext; virtual; abstract;
    procedure commit(const report_heuristics: boolean); virtual; abstract;
    procedure rollback; virtual; abstract;
    function _primary_interface(const objid: ObjectID; const poa: IPOA): string; override;
    function _make_stub(const poa: IPOA; const obj : IORBObject): IORBObject; override;
    function _is_a(const repoid: RepositoryID): Boolean; override;
    procedure invoke(const serv: IStaticServerRequest); override;
    function _dispatch(const req: IStaticServerRequest): Boolean;
    function narrow_helper(const str: string): Pointer; override;
  public
    function _this(): Iorg_jboss_tm_iiop_TransactionService;
    class function _narrow(const srv : IServant): Iorg_jboss_tm_iiop_TransactionService;
  end;

  Torg_jboss_tm_iiop_TransactionService_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

  function org_jboss_tm_iiop_TransactionId_to_any(const val: Torg_jboss_tm_iiop_TransactionId): IAny;
  function any_to_org_jboss_tm_iiop_TransactionId(const a: IAny; var val: Torg_jboss_tm_iiop_TransactionId): Boolean;

  function org_jboss_tm_iiop_TransactionDesc_to_any(const val: Torg_jboss_tm_iiop_TransactionDesc): IAny;
  function any_to_org_jboss_tm_iiop_TransactionDesc(const a: IAny; var val: Torg_jboss_tm_iiop_TransactionDesc): Boolean;

  function org_jboss_tm_iiop_TransactionFactoryExt_to_any(const val: Iorg_jboss_tm_iiop_TransactionFactoryExt): IAny;
  function any_to_org_jboss_tm_iiop_TransactionFactoryExt(const a: IAny; var val: Iorg_jboss_tm_iiop_TransactionFactoryExt): Boolean;

  function org_jboss_tm_iiop_CoordinatorExt_to_any(const val: Iorg_jboss_tm_iiop_CoordinatorExt): IAny;
  function any_to_org_jboss_tm_iiop_CoordinatorExt(const a: IAny; var val: Iorg_jboss_tm_iiop_CoordinatorExt): Boolean;

  function org_jboss_tm_iiop_TransactionService_to_any(const val: Iorg_jboss_tm_iiop_TransactionService): IAny;
  function any_to_org_jboss_tm_iiop_TransactionService(const a: IAny; var val: Iorg_jboss_tm_iiop_TransactionService): Boolean;

var
  org_jboss_tm_iiop_TransactionId_marshaller : IStaticTypeInfo;
  org_jboss_tm_iiop_TransactionDesc_marshaller : IStaticTypeInfo;
  org_jboss_tm_iiop_TransactionFactoryExt_marshaller : IStaticTypeInfo;
  org_jboss_tm_iiop_CoordinatorExt_marshaller : IStaticTypeInfo;
  org_jboss_tm_iiop_TransactionService_marshaller : IStaticTypeInfo;
  _tc_org_jboss_tm_iiop_TransactionId : ITypeCodeConst;
  _tc_org_jboss_tm_iiop_TransactionDesc : ITypeCodeConst;
  _tc_org_jboss_tm_iiop_TransactionFactoryExt : ITypeCodeConst;
  _tc_org_jboss_tm_iiop_CoordinatorExt : ITypeCodeConst;
  _tc_org_jboss_tm_iiop_TransactionService : ITypeCodeConst;

implementation

uses
  SysUtils, any, tcode, static, throw;

//***********************************************************
// Torg_jboss_tm_iiop_TransactionId_marshaller
//***********************************************************
function Torg_jboss_tm_iiop_TransactionId_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  struct: Torg_jboss_tm_iiop_TransactionId;
begin
  result := false;
  if not stat_long.demarshal(dec,@struct.formatId) then exit;
  if not stat_seq_octet.demarshal(dec,@struct.globalId) then exit;
  Torg_jboss_tm_iiop_TransactionId(addr^) := struct;
  result := true;
end;

procedure Torg_jboss_tm_iiop_TransactionId_marshaller.marshal(enc: IEncoder;const addr : Pointer);
var
  struct: Torg_jboss_tm_iiop_TransactionId;
begin
  struct := Torg_jboss_tm_iiop_TransactionId(addr^);
  stat_long.marshal(enc,@struct.formatId);
  stat_seq_octet.marshal(enc,@struct.globalId);
end;

procedure Torg_jboss_tm_iiop_TransactionId_marshaller._free(var addr: Pointer);
begin
{$HINTS OFF}
  System.Finalize(Torg_jboss_tm_iiop_TransactionId(addr^));
{$HINTS ON}
  FreeMem(addr);
end;

procedure Torg_jboss_tm_iiop_TransactionId_marshaller._create(var addr: Pointer);
begin
  addr := AllocMem(sizeOf(Torg_jboss_tm_iiop_TransactionId));
{$HINTS OFF}
  System.Initialize(Torg_jboss_tm_iiop_TransactionId(addr^));
{$HINTS ON}
end;

procedure Torg_jboss_tm_iiop_TransactionId_marshaller._assign(dst, src: Pointer);
begin
  Torg_jboss_tm_iiop_TransactionId(dst^) := Torg_jboss_tm_iiop_TransactionId(src^);
end;

function Torg_jboss_tm_iiop_TransactionId_marshaller.typecode: ITypeCode;
begin
  result := _tc_org_jboss_tm_iiop_TransactionId.typecode;
end;

//***********************************************************
// Torg_jboss_tm_iiop_TransactionDesc_marshaller
//***********************************************************
function Torg_jboss_tm_iiop_TransactionDesc_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  struct: Torg_jboss_tm_iiop_TransactionDesc;
begin
  result := false;
  if not Control_marshaller.demarshal(dec,@struct.control) then exit;
  if not PropagationContext_marshaller.demarshal(dec,@struct.propagationContext) then exit;
  Torg_jboss_tm_iiop_TransactionDesc(addr^) := struct;
  result := true;
end;

procedure Torg_jboss_tm_iiop_TransactionDesc_marshaller.marshal(enc: IEncoder;const addr : Pointer);
var
  struct: Torg_jboss_tm_iiop_TransactionDesc;
begin
  struct := Torg_jboss_tm_iiop_TransactionDesc(addr^);
  Control_marshaller.marshal(enc,@struct.control);
  PropagationContext_marshaller.marshal(enc,@struct.propagationContext);
end;

procedure Torg_jboss_tm_iiop_TransactionDesc_marshaller._free(var addr: Pointer);
begin
{$HINTS OFF}
  System.Finalize(Torg_jboss_tm_iiop_TransactionDesc(addr^));
{$HINTS ON}
  FreeMem(addr);
end;

procedure Torg_jboss_tm_iiop_TransactionDesc_marshaller._create(var addr: Pointer);
begin
  addr := AllocMem(sizeOf(Torg_jboss_tm_iiop_TransactionDesc));
{$HINTS OFF}
  System.Initialize(Torg_jboss_tm_iiop_TransactionDesc(addr^));
{$HINTS ON}
end;

procedure Torg_jboss_tm_iiop_TransactionDesc_marshaller._assign(dst, src: Pointer);
begin
  Torg_jboss_tm_iiop_TransactionDesc(dst^) := Torg_jboss_tm_iiop_TransactionDesc(src^);
end;

function Torg_jboss_tm_iiop_TransactionDesc_marshaller.typecode: ITypeCode;
begin
  result := _tc_org_jboss_tm_iiop_TransactionDesc.typecode;
end;

//***********************************************************
// Torg_jboss_tm_iiop_TransactionFactoryExt
//***********************************************************
function Torg_jboss_tm_iiop_TransactionFactoryExt.narrow_helper(const str: string): Pointer;
begin
  if str = 'IDL:org/jboss/tm/iiop/TransactionFactoryExt:1.0' then
    begin
      result := Pointer(self as Iorg_jboss_tm_iiop_TransactionFactoryExt);
      exit;
    end;
  result := inherited narrow_helper(str);
end;

class function Torg_jboss_tm_iiop_TransactionFactoryExt._narrow(const obj : IORBObject): Iorg_jboss_tm_iiop_TransactionFactoryExt;
var
  p: Pointer;
  stub: Torg_jboss_tm_iiop_TransactionFactoryExt_stub;
begin
  result := nil;
  if obj = nil then exit;
  p := obj.narrow_helper('IDL:org/jboss/tm/iiop/TransactionFactoryExt:1.0');
  if p <> nil then
    result := Iorg_jboss_tm_iiop_TransactionFactoryExt(p)
  else
    begin
      if narrow_helper2(obj) or obj._is_a_remote('IDL:org/jboss/tm/iiop/TransactionFactoryExt:1.0') then
        begin
          stub := Torg_jboss_tm_iiop_TransactionFactoryExt_stub.Create();
          stub.assign(obj);
          result := stub;
        end;
    end;
end;

class function Torg_jboss_tm_iiop_TransactionFactoryExt.narrow_helper2(const obj: IORBObject): Boolean;
begin
  result := obj.repoid = 'IDL:org/jboss/tm/iiop/TransactionFactoryExt:1.0'
end;

//***********************************************************
// Torg_jboss_tm_iiop_TransactionFactoryExt_stub
//***********************************************************
function Torg_jboss_tm_iiop_TransactionFactoryExt_stub._create(const time_out: _ulong): IControl;
var
  req: IStaticRequest;
  _time_out: IStaticAny;
  _result: IStaticAny;
begin
  _time_out := StaticAny(stat_ulong,@time_out);
  _result := StaticAny(Control_marshaller, @result);
  req := StaticRequest(self,'create');
  req.add_in_arg(_time_out);
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

function Torg_jboss_tm_iiop_TransactionFactoryExt_stub.recreate(const ctx: TPropagationContext): IControl;
var
  req: IStaticRequest;
  _ctx: IStaticAny;
  _result: IStaticAny;
begin
  _ctx := StaticAny(PropagationContext_marshaller,@ctx);
  _result := StaticAny(Control_marshaller, @result);
  req := StaticRequest(self,'recreate');
  req.add_in_arg(_ctx);
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

function Torg_jboss_tm_iiop_TransactionFactoryExt_stub.create_transaction(const time_out: _ulong): Torg_jboss_tm_iiop_TransactionDesc;
var
  req: IStaticRequest;
  _time_out: IStaticAny;
  _result: IStaticAny;
begin
  _time_out := StaticAny(stat_ulong,@time_out);
  _result := StaticAny(org_jboss_tm_iiop_TransactionDesc_marshaller, @result);
  req := StaticRequest(self,'create_transaction');
  req.add_in_arg(_time_out);
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

//***********************************************************
// Torg_jboss_tm_iiop_TransactionFactoryExt_stub_clp
//***********************************************************
function Torg_jboss_tm_iiop_TransactionFactoryExt_stub_clp.narrow_helper(const str: string): Pointer;
begin
  if str = 'IDL:org/jboss/tm/iiop/TransactionFactoryExt:1.0' then
    begin
      result := Pointer(self as Iorg_jboss_tm_iiop_TransactionFactoryExt);
      exit;
    end;
  result := inherited narrow_helper(str);
end;

function Torg_jboss_tm_iiop_TransactionFactoryExt_stub_clp.create_transaction(const time_out: _ulong): Torg_jboss_tm_iiop_TransactionDesc;
var
  _srv: IServant;
  srv: Iorg_jboss_tm_iiop_TransactionFactoryExt;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := Torg_jboss_tm_iiop_TransactionFactoryExt_serv._narrow(_srv);
      if srv <> nil then
        result := srv.create_transaction(time_out)
    end;
  _postinvoke();
end;

//***********************************************************
// Torg_jboss_tm_iiop_TransactionFactoryExt_serv
//***********************************************************
function Torg_jboss_tm_iiop_TransactionFactoryExt_serv._this(): Iorg_jboss_tm_iiop_TransactionFactoryExt;
var
  obj: IORBObject;
begin
  obj := this();
  result := Torg_jboss_tm_iiop_TransactionFactoryExt._narrow(obj);
end;

function Torg_jboss_tm_iiop_TransactionFactoryExt_serv._is_a(const repoid: string): Boolean;
begin
  result := repoid = 'IDL:org/jboss/tm/iiop/TransactionFactoryExt:1.0';
  if not result then
    result := inherited _is_a(repoid);
end;

function Torg_jboss_tm_iiop_TransactionFactoryExt_serv._primary_interface(const objid: ObjectID; const poa: IPOA): string;
begin
  result := 'IDL:org/jboss/tm/iiop/TransactionFactoryExt:1.0';
end;

function Torg_jboss_tm_iiop_TransactionFactoryExt_serv._make_stub(const poa: IPOA; const obj : IORBObject): IORBObject;
begin
  result := Torg_jboss_tm_iiop_TransactionFactoryExt_stub_clp.Create(poa,obj);
end;

procedure Torg_jboss_tm_iiop_TransactionFactoryExt_serv.invoke(const serv: IStaticServerRequest);
begin
  if not _dispatch(serv) then
    begin
      serv.set_exception(BAD_OPERATION.Create(0, COMPLETED_NO) as IORBException);
      serv.write_results();
    end;
end;

function Torg_jboss_tm_iiop_TransactionFactoryExt_serv.narrow_helper(const str: string): Pointer;
begin
  if str = 'IDL:org/jboss/tm/iiop/TransactionFactoryExt:1.0' then
    begin
      result := Pointer(Iorg_jboss_tm_iiop_TransactionFactoryExt(self));
      exit;
    end;
  result := inherited narrow_helper(str);
end;

class function Torg_jboss_tm_iiop_TransactionFactoryExt_serv._narrow(const srv : IServant): Iorg_jboss_tm_iiop_TransactionFactoryExt;
var
  p: Pointer;
begin
  result := nil;
  if srv = nil then exit;
  p := srv.narrow_helper('IDL:org/jboss/tm/iiop/TransactionFactoryExt:1.0');
  if p <> nil then
    result := Iorg_jboss_tm_iiop_TransactionFactoryExt(p)
end;

function Torg_jboss_tm_iiop_TransactionFactoryExt_serv._dispatch(const req: IStaticServerRequest): Boolean;
var
  create_transaction_result: Torg_jboss_tm_iiop_TransactionDesc;
  create_transaction_time_out: _ulong;
begin
  result := true;
  if req.op_name = 'create_transaction' then
    begin
      req.add_in_arg(StaticAny(stat_ulong,@create_transaction_time_out) as IStaticAny);
      req.set_result(StaticAny(org_jboss_tm_iiop_TransactionDesc_marshaller,@create_transaction_result) as IStaticAny);
      if not req.read_args() then  exit;
      create_transaction_result := create_transaction(create_transaction_time_out);
      req.write_results();
      exit;
    end;
  if not inherited _dispatch(req) then
    result := false;
end;

//***********************************************************
// Torg_jboss_tm_iiop_TransactionFactoryExt_marshaller
//***********************************************************
function Torg_jboss_tm_iiop_TransactionFactoryExt_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  obj: IORBObject;
begin
  result := false;
  if not stat_Object.demarshal(dec,@obj) then exit;
  Iorg_jboss_tm_iiop_TransactionFactoryExt(addr^) := Torg_jboss_tm_iiop_TransactionFactoryExt._narrow(obj);
  result := (obj = nil) or (Pointer(addr^) <> nil);
end;

procedure Torg_jboss_tm_iiop_TransactionFactoryExt_marshaller.marshal(enc: IEncoder;const addr : Pointer);
var
  obj: IORBObject;
begin
  obj := Iorg_jboss_tm_iiop_TransactionFactoryExt(addr^) as IORBObject;
  stat_Object.marshal(enc,@Pointer(obj));
end;

procedure Torg_jboss_tm_iiop_TransactionFactoryExt_marshaller._free(var addr: Pointer);
begin
  Iorg_jboss_tm_iiop_TransactionFactoryExt(addr^) := nil;
end;

procedure Torg_jboss_tm_iiop_TransactionFactoryExt_marshaller._create(var addr: Pointer);
begin
  Iorg_jboss_tm_iiop_TransactionFactoryExt(addr^) := Torg_jboss_tm_iiop_TransactionFactoryExt_stub.Create();
end;

procedure Torg_jboss_tm_iiop_TransactionFactoryExt_marshaller._assign(dst, src: Pointer);
begin
  Iorg_jboss_tm_iiop_TransactionFactoryExt(dst^) := Iorg_jboss_tm_iiop_TransactionFactoryExt(src^);
end;

function Torg_jboss_tm_iiop_TransactionFactoryExt_marshaller.typecode: ITypeCode;
begin
  result := _tc_org_jboss_tm_iiop_TransactionFactoryExt.typecode;
end;

//***********************************************************
// Torg_jboss_tm_iiop_CoordinatorExt
//***********************************************************
function Torg_jboss_tm_iiop_CoordinatorExt.narrow_helper(const str: string): Pointer;
begin
  if str = 'IDL:org/jboss/tm/iiop/CoordinatorExt:1.0' then
    begin
      result := Pointer(self as Iorg_jboss_tm_iiop_CoordinatorExt);
      exit;
    end;
  result := inherited narrow_helper(str);
end;

class function Torg_jboss_tm_iiop_CoordinatorExt._narrow(const obj : IORBObject): Iorg_jboss_tm_iiop_CoordinatorExt;
var
  p: Pointer;
  stub: Torg_jboss_tm_iiop_CoordinatorExt_stub;
begin
  result := nil;
  if obj = nil then exit;
  p := obj.narrow_helper('IDL:org/jboss/tm/iiop/CoordinatorExt:1.0');
  if p <> nil then
    result := Iorg_jboss_tm_iiop_CoordinatorExt(p)
  else
    begin
      if narrow_helper2(obj) or obj._is_a_remote('IDL:org/jboss/tm/iiop/CoordinatorExt:1.0') then
        begin
          stub := Torg_jboss_tm_iiop_CoordinatorExt_stub.Create();
          stub.assign(obj);
          result := stub;
        end;
    end;
end;

class function Torg_jboss_tm_iiop_CoordinatorExt.narrow_helper2(const obj: IORBObject): Boolean;
begin
  result := obj.repoid = 'IDL:org/jboss/tm/iiop/CoordinatorExt:1.0'
end;

//***********************************************************
// Torg_jboss_tm_iiop_CoordinatorExt_stub
//***********************************************************
function Torg_jboss_tm_iiop_CoordinatorExt_stub.get_status: TStatus;
var
  req: IStaticRequest;
  _result: IStaticAny;
begin
  _result := StaticAny(Status_marshaller, @result);
  req := StaticRequest(self,'get_status');
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

function Torg_jboss_tm_iiop_CoordinatorExt_stub.get_parent_status: TStatus;
var
  req: IStaticRequest;
  _result: IStaticAny;
begin
  _result := StaticAny(Status_marshaller, @result);
  req := StaticRequest(self,'get_parent_status');
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

function Torg_jboss_tm_iiop_CoordinatorExt_stub.get_top_level_status: TStatus;
var
  req: IStaticRequest;
  _result: IStaticAny;
begin
  _result := StaticAny(Status_marshaller, @result);
  req := StaticRequest(self,'get_top_level_status');
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

function Torg_jboss_tm_iiop_CoordinatorExt_stub.is_same_transaction(const tc: ICoordinator): boolean;
var
  req: IStaticRequest;
  _tc: IStaticAny;
  _result: IStaticAny;
begin
  _tc := StaticAny(Coordinator_marshaller,@tc);
  _result := StaticAny(stat_boolean, @result);
  req := StaticRequest(self,'is_same_transaction');
  req.add_in_arg(_tc);
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

function Torg_jboss_tm_iiop_CoordinatorExt_stub.is_related_transaction(const tc: ICoordinator): boolean;
var
  req: IStaticRequest;
  _tc: IStaticAny;
  _result: IStaticAny;
begin
  _tc := StaticAny(Coordinator_marshaller,@tc);
  _result := StaticAny(stat_boolean, @result);
  req := StaticRequest(self,'is_related_transaction');
  req.add_in_arg(_tc);
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

function Torg_jboss_tm_iiop_CoordinatorExt_stub.is_ancestor_transaction(const tc: ICoordinator): boolean;
var
  req: IStaticRequest;
  _tc: IStaticAny;
  _result: IStaticAny;
begin
  _tc := StaticAny(Coordinator_marshaller,@tc);
  _result := StaticAny(stat_boolean, @result);
  req := StaticRequest(self,'is_ancestor_transaction');
  req.add_in_arg(_tc);
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

function Torg_jboss_tm_iiop_CoordinatorExt_stub.is_descendant_transaction(const tc: ICoordinator): boolean;
var
  req: IStaticRequest;
  _tc: IStaticAny;
  _result: IStaticAny;
begin
  _tc := StaticAny(Coordinator_marshaller,@tc);
  _result := StaticAny(stat_boolean, @result);
  req := StaticRequest(self,'is_descendant_transaction');
  req.add_in_arg(_tc);
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

function Torg_jboss_tm_iiop_CoordinatorExt_stub.is_top_level_transaction: boolean;
var
  req: IStaticRequest;
  _result: IStaticAny;
begin
  _result := StaticAny(stat_boolean, @result);
  req := StaticRequest(self,'is_top_level_transaction');
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

function Torg_jboss_tm_iiop_CoordinatorExt_stub.hash_transaction: _ulong;
var
  req: IStaticRequest;
  _result: IStaticAny;
begin
  _result := StaticAny(stat_ulong, @result);
  req := StaticRequest(self,'hash_transaction');
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

function Torg_jboss_tm_iiop_CoordinatorExt_stub.hash_top_level_tran: _ulong;
var
  req: IStaticRequest;
  _result: IStaticAny;
begin
  _result := StaticAny(stat_ulong, @result);
  req := StaticRequest(self,'hash_top_level_tran');
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

function Torg_jboss_tm_iiop_CoordinatorExt_stub.register_resource(const r: IResource): IRecoveryCoordinator;
var
  req: IStaticRequest;
  _r: IStaticAny;
  _result: IStaticAny;
begin
  _r := StaticAny(Resource_marshaller,@r);
  _result := StaticAny(RecoveryCoordinator_marshaller, @result);
  req := StaticRequest(self,'register_resource');
  req.add_in_arg(_r);
  req.set_result(_result);
  req.set_exceptions_tc([_tc_Inactive.typecode]);
  req.invoke;
  dorb_static_throw(req,[Inactive_marshaller, 'IDL:omg.org/CosTransactions/Inactive:1.0']);
end;

procedure Torg_jboss_tm_iiop_CoordinatorExt_stub.register_synchronization(const sync: ISynchronization);
var
  req: IStaticRequest;
  _sync: IStaticAny;
begin
  _sync := StaticAny(Synchronization_marshaller,@sync);
  req := StaticRequest(self,'register_synchronization');
  req.add_in_arg(_sync);
  req.set_exceptions_tc([_tc_Inactive.typecode, _tc_SynchronizationUnavailable.typecode]);
  req.invoke;
  dorb_static_throw(req,[Inactive_marshaller, 'IDL:omg.org/CosTransactions/Inactive:1.0', SynchronizationUnavailable_marshaller, 'IDL:omg.org/CosTransactions/SynchronizationUnavailable:1.0']);
end;

procedure Torg_jboss_tm_iiop_CoordinatorExt_stub.register_subtran_aware(const r: ISubtransactionAwareResource);
var
  req: IStaticRequest;
  _r: IStaticAny;
begin
  _r := StaticAny(SubtransactionAwareResource_marshaller,@r);
  req := StaticRequest(self,'register_subtran_aware');
  req.add_in_arg(_r);
  req.set_exceptions_tc([_tc_Inactive.typecode, _tc_NotSubtransaction.typecode]);
  req.invoke;
  dorb_static_throw(req,[Inactive_marshaller, 'IDL:omg.org/CosTransactions/Inactive:1.0', NotSubtransaction_marshaller, 'IDL:omg.org/CosTransactions/NotSubtransaction:1.0']);
end;

procedure Torg_jboss_tm_iiop_CoordinatorExt_stub.rollback_only;
var
  req: IStaticRequest;
begin
  req := StaticRequest(self,'rollback_only');
  req.set_exceptions_tc([_tc_Inactive.typecode]);
  req.invoke;
  dorb_static_throw(req,[Inactive_marshaller, 'IDL:omg.org/CosTransactions/Inactive:1.0']);
end;

function Torg_jboss_tm_iiop_CoordinatorExt_stub.get_transaction_name: string;
var
  req: IStaticRequest;
  _result: IStaticAny;
begin
  _result := StaticAny(stat_string, @result);
  req := StaticRequest(self,'get_transaction_name');
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

function Torg_jboss_tm_iiop_CoordinatorExt_stub.create_subtransaction: IControl;
var
  req: IStaticRequest;
  _result: IStaticAny;
begin
  _result := StaticAny(Control_marshaller, @result);
  req := StaticRequest(self,'create_subtransaction');
  req.set_result(_result);
  req.set_exceptions_tc([_tc_SubtransactionsUnavailable.typecode, _tc_Inactive.typecode]);
  req.invoke;
  dorb_static_throw(req,[SubtransactionsUnavailable_marshaller, 'IDL:omg.org/CosTransactions/SubtransactionsUnavailable:1.0', Inactive_marshaller, 'IDL:omg.org/CosTransactions/Inactive:1.0']);
end;

function Torg_jboss_tm_iiop_CoordinatorExt_stub.get_txcontext: TPropagationContext;
var
  req: IStaticRequest;
  _result: IStaticAny;
begin
  _result := StaticAny(PropagationContext_marshaller, @result);
  req := StaticRequest(self,'get_txcontext');
  req.set_result(_result);
  req.set_exceptions_tc([_tc_Unavailable.typecode]);
  req.invoke;
  dorb_static_throw(req,[Unavailable_marshaller, 'IDL:omg.org/CosTransactions/Unavailable:1.0']);
end;

function Torg_jboss_tm_iiop_CoordinatorExt_stub.get_transaction_id: Torg_jboss_tm_iiop_TransactionId;
var
  req: IStaticRequest;
  _result: IStaticAny;
begin
  _result := StaticAny(org_jboss_tm_iiop_TransactionId_marshaller, @result);
  req := StaticRequest(self,'get_transaction_id');
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

//***********************************************************
// Torg_jboss_tm_iiop_CoordinatorExt_stub_clp
//***********************************************************
function Torg_jboss_tm_iiop_CoordinatorExt_stub_clp.narrow_helper(const str: string): Pointer;
begin
  if str = 'IDL:org/jboss/tm/iiop/CoordinatorExt:1.0' then
    begin
      result := Pointer(self as Iorg_jboss_tm_iiop_CoordinatorExt);
      exit;
    end;
  result := inherited narrow_helper(str);
end;

function Torg_jboss_tm_iiop_CoordinatorExt_stub_clp.get_transaction_id: Torg_jboss_tm_iiop_TransactionId;
var
  _srv: IServant;
  srv: Iorg_jboss_tm_iiop_CoordinatorExt;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := Torg_jboss_tm_iiop_CoordinatorExt_serv._narrow(_srv);
      if srv <> nil then
        result := srv.get_transaction_id
    end;
  _postinvoke();
end;

//***********************************************************
// Torg_jboss_tm_iiop_CoordinatorExt_serv
//***********************************************************
function Torg_jboss_tm_iiop_CoordinatorExt_serv._this(): Iorg_jboss_tm_iiop_CoordinatorExt;
var
  obj: IORBObject;
begin
  obj := this();
  result := Torg_jboss_tm_iiop_CoordinatorExt._narrow(obj);
end;

function Torg_jboss_tm_iiop_CoordinatorExt_serv._is_a(const repoid: string): Boolean;
begin
  result := repoid = 'IDL:org/jboss/tm/iiop/CoordinatorExt:1.0';
  if not result then
    result := inherited _is_a(repoid);
end;

function Torg_jboss_tm_iiop_CoordinatorExt_serv._primary_interface(const objid: ObjectID; const poa: IPOA): string;
begin
  result := 'IDL:org/jboss/tm/iiop/CoordinatorExt:1.0';
end;

function Torg_jboss_tm_iiop_CoordinatorExt_serv._make_stub(const poa: IPOA; const obj : IORBObject): IORBObject;
begin
  result := Torg_jboss_tm_iiop_CoordinatorExt_stub_clp.Create(poa,obj);
end;

procedure Torg_jboss_tm_iiop_CoordinatorExt_serv.invoke(const serv: IStaticServerRequest);
begin
  if not _dispatch(serv) then
    begin
      serv.set_exception(BAD_OPERATION.Create(0, COMPLETED_NO) as IORBException);
      serv.write_results();
    end;
end;

function Torg_jboss_tm_iiop_CoordinatorExt_serv.narrow_helper(const str: string): Pointer;
begin
  if str = 'IDL:org/jboss/tm/iiop/CoordinatorExt:1.0' then
    begin
      result := Pointer(Iorg_jboss_tm_iiop_CoordinatorExt(self));
      exit;
    end;
  result := inherited narrow_helper(str);
end;

class function Torg_jboss_tm_iiop_CoordinatorExt_serv._narrow(const srv : IServant): Iorg_jboss_tm_iiop_CoordinatorExt;
var
  p: Pointer;
begin
  result := nil;
  if srv = nil then exit;
  p := srv.narrow_helper('IDL:org/jboss/tm/iiop/CoordinatorExt:1.0');
  if p <> nil then
    result := Iorg_jboss_tm_iiop_CoordinatorExt(p)
end;

function Torg_jboss_tm_iiop_CoordinatorExt_serv._dispatch(const req: IStaticServerRequest): Boolean;
var
  get_transaction_id_result: Torg_jboss_tm_iiop_TransactionId;
begin
  result := true;
  if req.op_name = 'get_transaction_id' then
    begin
      req.set_result(StaticAny(org_jboss_tm_iiop_TransactionId_marshaller,@get_transaction_id_result) as IStaticAny);
      if not req.read_args() then  exit;
      get_transaction_id_result := get_transaction_id;
      req.write_results();
      exit;
    end;
  if not inherited _dispatch(req) then
    result := false;
end;

//***********************************************************
// Torg_jboss_tm_iiop_CoordinatorExt_marshaller
//***********************************************************
function Torg_jboss_tm_iiop_CoordinatorExt_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  obj: IORBObject;
begin
  result := false;
  if not stat_Object.demarshal(dec,@obj) then exit;
  Iorg_jboss_tm_iiop_CoordinatorExt(addr^) := Torg_jboss_tm_iiop_CoordinatorExt._narrow(obj);
  result := (obj = nil) or (Pointer(addr^) <> nil);
end;

procedure Torg_jboss_tm_iiop_CoordinatorExt_marshaller.marshal(enc: IEncoder;const addr : Pointer);
var
  obj: IORBObject;
begin
  obj := Iorg_jboss_tm_iiop_CoordinatorExt(addr^) as IORBObject;
  stat_Object.marshal(enc,@Pointer(obj));
end;

procedure Torg_jboss_tm_iiop_CoordinatorExt_marshaller._free(var addr: Pointer);
begin
  Iorg_jboss_tm_iiop_CoordinatorExt(addr^) := nil;
end;

procedure Torg_jboss_tm_iiop_CoordinatorExt_marshaller._create(var addr: Pointer);
begin
  Iorg_jboss_tm_iiop_CoordinatorExt(addr^) := Torg_jboss_tm_iiop_CoordinatorExt_stub.Create();
end;

procedure Torg_jboss_tm_iiop_CoordinatorExt_marshaller._assign(dst, src: Pointer);
begin
  Iorg_jboss_tm_iiop_CoordinatorExt(dst^) := Iorg_jboss_tm_iiop_CoordinatorExt(src^);
end;

function Torg_jboss_tm_iiop_CoordinatorExt_marshaller.typecode: ITypeCode;
begin
  result := _tc_org_jboss_tm_iiop_CoordinatorExt.typecode;
end;

//***********************************************************
// Torg_jboss_tm_iiop_TransactionService
//***********************************************************
function Torg_jboss_tm_iiop_TransactionService.narrow_helper(const str: string): Pointer;
begin
  if str = 'IDL:org/jboss/tm/iiop/TransactionService:1.0' then
    begin
      result := Pointer(self as Iorg_jboss_tm_iiop_TransactionService);
      exit;
    end;
  if str = 'IDL:omg.org/CosTransactions/Control:1.0' then
    begin
      result := Pointer(self as IControl);
      exit;
    end;
  if str = 'IDL:org/jboss/tm/iiop/CoordinatorExt:1.0' then
    begin
      result := Pointer(self as Iorg_jboss_tm_iiop_CoordinatorExt);
      exit;
    end;
  if str = 'IDL:omg.org/CosTransactions/Terminator:1.0' then
    begin
      result := Pointer(self as ITerminator);
      exit;
    end;
  result := inherited narrow_helper(str);
end;

class function Torg_jboss_tm_iiop_TransactionService._narrow(const obj : IORBObject): Iorg_jboss_tm_iiop_TransactionService;
var
  p: Pointer;
  stub: Torg_jboss_tm_iiop_TransactionService_stub;
begin
  result := nil;
  if obj = nil then exit;
  p := obj.narrow_helper('IDL:org/jboss/tm/iiop/TransactionService:1.0');
  if p <> nil then
    result := Iorg_jboss_tm_iiop_TransactionService(p)
  else
    begin
      if narrow_helper2(obj) or obj._is_a_remote('IDL:org/jboss/tm/iiop/TransactionService:1.0') then
        begin
          stub := Torg_jboss_tm_iiop_TransactionService_stub.Create();
          stub.assign(obj);
          result := stub;
        end;
    end;
end;

class function Torg_jboss_tm_iiop_TransactionService.narrow_helper2(const obj: IORBObject): Boolean;
begin
  result := obj.repoid = 'IDL:org/jboss/tm/iiop/TransactionService:1.0'
end;

//***********************************************************
// Torg_jboss_tm_iiop_TransactionService_stub
//***********************************************************
function Torg_jboss_tm_iiop_TransactionService_stub.get_terminator: ITerminator;
var
  req: IStaticRequest;
  _result: IStaticAny;
begin
  _result := StaticAny(Terminator_marshaller, @result);
  req := StaticRequest(self,'get_terminator');
  req.set_result(_result);
  req.set_exceptions_tc([_tc_Unavailable.typecode]);
  req.invoke;
  dorb_static_throw(req,[Unavailable_marshaller, 'IDL:omg.org/CosTransactions/Unavailable:1.0']);
end;

function Torg_jboss_tm_iiop_TransactionService_stub.get_coordinator: ICoordinator;
var
  req: IStaticRequest;
  _result: IStaticAny;
begin
  _result := StaticAny(Coordinator_marshaller, @result);
  req := StaticRequest(self,'get_coordinator');
  req.set_result(_result);
  req.set_exceptions_tc([_tc_Unavailable.typecode]);
  req.invoke;
  dorb_static_throw(req,[Unavailable_marshaller, 'IDL:omg.org/CosTransactions/Unavailable:1.0']);
end;

function Torg_jboss_tm_iiop_TransactionService_stub.get_transaction_id: Torg_jboss_tm_iiop_TransactionId;
var
  req: IStaticRequest;
  _result: IStaticAny;
begin
  _result := StaticAny(org_jboss_tm_iiop_TransactionId_marshaller, @result);
  req := StaticRequest(self,'get_transaction_id');
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

function Torg_jboss_tm_iiop_TransactionService_stub.get_status: TStatus;
var
  req: IStaticRequest;
  _result: IStaticAny;
begin
  _result := StaticAny(Status_marshaller, @result);
  req := StaticRequest(self,'get_status');
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

function Torg_jboss_tm_iiop_TransactionService_stub.get_parent_status: TStatus;
var
  req: IStaticRequest;
  _result: IStaticAny;
begin
  _result := StaticAny(Status_marshaller, @result);
  req := StaticRequest(self,'get_parent_status');
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

function Torg_jboss_tm_iiop_TransactionService_stub.get_top_level_status: TStatus;
var
  req: IStaticRequest;
  _result: IStaticAny;
begin
  _result := StaticAny(Status_marshaller, @result);
  req := StaticRequest(self,'get_top_level_status');
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

function Torg_jboss_tm_iiop_TransactionService_stub.is_same_transaction(const tc: ICoordinator): boolean;
var
  req: IStaticRequest;
  _tc: IStaticAny;
  _result: IStaticAny;
begin
  _tc := StaticAny(Coordinator_marshaller,@tc);
  _result := StaticAny(stat_boolean, @result);
  req := StaticRequest(self,'is_same_transaction');
  req.add_in_arg(_tc);
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

function Torg_jboss_tm_iiop_TransactionService_stub.is_related_transaction(const tc: ICoordinator): boolean;
var
  req: IStaticRequest;
  _tc: IStaticAny;
  _result: IStaticAny;
begin
  _tc := StaticAny(Coordinator_marshaller,@tc);
  _result := StaticAny(stat_boolean, @result);
  req := StaticRequest(self,'is_related_transaction');
  req.add_in_arg(_tc);
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

function Torg_jboss_tm_iiop_TransactionService_stub.is_ancestor_transaction(const tc: ICoordinator): boolean;
var
  req: IStaticRequest;
  _tc: IStaticAny;
  _result: IStaticAny;
begin
  _tc := StaticAny(Coordinator_marshaller,@tc);
  _result := StaticAny(stat_boolean, @result);
  req := StaticRequest(self,'is_ancestor_transaction');
  req.add_in_arg(_tc);
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

function Torg_jboss_tm_iiop_TransactionService_stub.is_descendant_transaction(const tc: ICoordinator): boolean;
var
  req: IStaticRequest;
  _tc: IStaticAny;
  _result: IStaticAny;
begin
  _tc := StaticAny(Coordinator_marshaller,@tc);
  _result := StaticAny(stat_boolean, @result);
  req := StaticRequest(self,'is_descendant_transaction');
  req.add_in_arg(_tc);
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

function Torg_jboss_tm_iiop_TransactionService_stub.is_top_level_transaction: boolean;
var
  req: IStaticRequest;
  _result: IStaticAny;
begin
  _result := StaticAny(stat_boolean, @result);
  req := StaticRequest(self,'is_top_level_transaction');
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

function Torg_jboss_tm_iiop_TransactionService_stub.hash_transaction: _ulong;
var
  req: IStaticRequest;
  _result: IStaticAny;
begin
  _result := StaticAny(stat_ulong, @result);
  req := StaticRequest(self,'hash_transaction');
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

function Torg_jboss_tm_iiop_TransactionService_stub.hash_top_level_tran: _ulong;
var
  req: IStaticRequest;
  _result: IStaticAny;
begin
  _result := StaticAny(stat_ulong, @result);
  req := StaticRequest(self,'hash_top_level_tran');
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

function Torg_jboss_tm_iiop_TransactionService_stub.register_resource(const r: IResource): IRecoveryCoordinator;
var
  req: IStaticRequest;
  _r: IStaticAny;
  _result: IStaticAny;
begin
  _r := StaticAny(Resource_marshaller,@r);
  _result := StaticAny(RecoveryCoordinator_marshaller, @result);
  req := StaticRequest(self,'register_resource');
  req.add_in_arg(_r);
  req.set_result(_result);
  req.set_exceptions_tc([_tc_Inactive.typecode]);
  req.invoke;
  dorb_static_throw(req,[Inactive_marshaller, 'IDL:omg.org/CosTransactions/Inactive:1.0']);
end;

procedure Torg_jboss_tm_iiop_TransactionService_stub.register_synchronization(const sync: ISynchronization);
var
  req: IStaticRequest;
  _sync: IStaticAny;
begin
  _sync := StaticAny(Synchronization_marshaller,@sync);
  req := StaticRequest(self,'register_synchronization');
  req.add_in_arg(_sync);
  req.set_exceptions_tc([_tc_Inactive.typecode, _tc_SynchronizationUnavailable.typecode]);
  req.invoke;
  dorb_static_throw(req,[Inactive_marshaller, 'IDL:omg.org/CosTransactions/Inactive:1.0', SynchronizationUnavailable_marshaller, 'IDL:omg.org/CosTransactions/SynchronizationUnavailable:1.0']);
end;

procedure Torg_jboss_tm_iiop_TransactionService_stub.register_subtran_aware(const r: ISubtransactionAwareResource);
var
  req: IStaticRequest;
  _r: IStaticAny;
begin
  _r := StaticAny(SubtransactionAwareResource_marshaller,@r);
  req := StaticRequest(self,'register_subtran_aware');
  req.add_in_arg(_r);
  req.set_exceptions_tc([_tc_Inactive.typecode, _tc_NotSubtransaction.typecode]);
  req.invoke;
  dorb_static_throw(req,[Inactive_marshaller, 'IDL:omg.org/CosTransactions/Inactive:1.0', NotSubtransaction_marshaller, 'IDL:omg.org/CosTransactions/NotSubtransaction:1.0']);
end;

procedure Torg_jboss_tm_iiop_TransactionService_stub.rollback_only;
var
  req: IStaticRequest;
begin
  req := StaticRequest(self,'rollback_only');
  req.set_exceptions_tc([_tc_Inactive.typecode]);
  req.invoke;
  dorb_static_throw(req,[Inactive_marshaller, 'IDL:omg.org/CosTransactions/Inactive:1.0']);
end;

function Torg_jboss_tm_iiop_TransactionService_stub.get_transaction_name: string;
var
  req: IStaticRequest;
  _result: IStaticAny;
begin
  _result := StaticAny(stat_string, @result);
  req := StaticRequest(self,'get_transaction_name');
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

function Torg_jboss_tm_iiop_TransactionService_stub.create_subtransaction: IControl;
var
  req: IStaticRequest;
  _result: IStaticAny;
begin
  _result := StaticAny(Control_marshaller, @result);
  req := StaticRequest(self,'create_subtransaction');
  req.set_result(_result);
  req.set_exceptions_tc([_tc_SubtransactionsUnavailable.typecode, _tc_Inactive.typecode]);
  req.invoke;
  dorb_static_throw(req,[SubtransactionsUnavailable_marshaller, 'IDL:omg.org/CosTransactions/SubtransactionsUnavailable:1.0', Inactive_marshaller, 'IDL:omg.org/CosTransactions/Inactive:1.0']);
end;

function Torg_jboss_tm_iiop_TransactionService_stub.get_txcontext: TPropagationContext;
var
  req: IStaticRequest;
  _result: IStaticAny;
begin
  _result := StaticAny(PropagationContext_marshaller, @result);
  req := StaticRequest(self,'get_txcontext');
  req.set_result(_result);
  req.set_exceptions_tc([_tc_Unavailable.typecode]);
  req.invoke;
  dorb_static_throw(req,[Unavailable_marshaller, 'IDL:omg.org/CosTransactions/Unavailable:1.0']);
end;

procedure Torg_jboss_tm_iiop_TransactionService_stub.commit(const report_heuristics: boolean);
var
  req: IStaticRequest;
  _report_heuristics: IStaticAny;
begin
  _report_heuristics := StaticAny(stat_boolean,@report_heuristics);
  req := StaticRequest(self,'commit');
  req.add_in_arg(_report_heuristics);
  req.set_exceptions_tc([_tc_HeuristicMixed.typecode, _tc_HeuristicHazard.typecode]);
  req.invoke;
  dorb_static_throw(req,[HeuristicMixed_marshaller, 'IDL:omg.org/CosTransactions/HeuristicMixed:1.0', HeuristicHazard_marshaller, 'IDL:omg.org/CosTransactions/HeuristicHazard:1.0']);
end;

procedure Torg_jboss_tm_iiop_TransactionService_stub.rollback;
var
  req: IStaticRequest;
begin
  req := StaticRequest(self,'rollback');
  req.invoke;
  dorb_static_throw(req);
end;

function Torg_jboss_tm_iiop_TransactionService_stub.create_transaction(const time_out: _ulong): Torg_jboss_tm_iiop_TransactionDesc;
var
  req: IStaticRequest;
  _time_out: IStaticAny;
  _result: IStaticAny;
begin
  _time_out := StaticAny(stat_ulong,@time_out);
  _result := StaticAny(org_jboss_tm_iiop_TransactionDesc_marshaller, @result);
  req := StaticRequest(self,'create_transaction');
  req.add_in_arg(_time_out);
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

function Torg_jboss_tm_iiop_TransactionService_stub._create(const time_out: _ulong): IControl;
var
  req: IStaticRequest;
  _time_out: IStaticAny;
  _result: IStaticAny;
begin
  _time_out := StaticAny(stat_ulong,@time_out);
  _result := StaticAny(Control_marshaller, @result);
  req := StaticRequest(self,'create');
  req.add_in_arg(_time_out);
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

function Torg_jboss_tm_iiop_TransactionService_stub.recreate(const ctx: TPropagationContext): IControl;
var
  req: IStaticRequest;
  _ctx: IStaticAny;
  _result: IStaticAny;
begin
  _ctx := StaticAny(PropagationContext_marshaller,@ctx);
  _result := StaticAny(Control_marshaller, @result);
  req := StaticRequest(self,'recreate');
  req.add_in_arg(_ctx);
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

//***********************************************************
// Torg_jboss_tm_iiop_TransactionService_stub_clp
//***********************************************************
function Torg_jboss_tm_iiop_TransactionService_stub_clp.narrow_helper(const str: string): Pointer;
begin
  if str = 'IDL:org/jboss/tm/iiop/TransactionService:1.0' then
    begin
      result := Pointer(self as Iorg_jboss_tm_iiop_TransactionService);
      exit;
    end
  else if str = 'IDL:omg.org/CosTransactions/Control:1.0' then
    begin
      result := Pointer(self as IControl);
      exit;
    end
  else if str = 'IDL:org/jboss/tm/iiop/CoordinatorExt:1.0' then
    begin
      result := Pointer(self as Iorg_jboss_tm_iiop_CoordinatorExt);
      exit;
    end
  else if str = 'IDL:omg.org/CosTransactions/Coordinator:1.0' then
    begin
      result := Pointer(self as ICoordinator);
      exit;
    end
  else if str = 'IDL:omg.org/CosTransactions/Terminator:1.0' then
    begin
      result := Pointer(self as ITerminator);
      exit;
    end;
  result := inherited narrow_helper(str);
end;

function Torg_jboss_tm_iiop_TransactionService_stub_clp.get_terminator: ITerminator;
var
  _srv: IServant;
  srv: IControl;
begin
  result := nil;
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TControl_serv._narrow(_srv);
      if srv <> nil then
        result := srv.get_terminator
    end;
  _postinvoke();
end;

function Torg_jboss_tm_iiop_TransactionService_stub_clp.get_coordinator: ICoordinator;
var
  _srv: IServant;
  srv: IControl;
begin
  result := nil;
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TControl_serv._narrow(_srv);
      if srv <> nil then
        result := srv.get_coordinator
    end;
  _postinvoke();
end;

function Torg_jboss_tm_iiop_TransactionService_stub_clp.get_transaction_id: Torg_jboss_tm_iiop_TransactionId;
var
  _srv: IServant;
  srv: Iorg_jboss_tm_iiop_CoordinatorExt;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := Torg_jboss_tm_iiop_CoordinatorExt_serv._narrow(_srv);
      if srv <> nil then
        result := srv.get_transaction_id
    end;
  _postinvoke();
end;

function Torg_jboss_tm_iiop_TransactionService_stub_clp.get_status: TStatus;
var
  _srv: IServant;
  srv: ICoordinator;
begin
  result := StatusActive;
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TCoordinator_serv._narrow(_srv);
      if srv <> nil then
        result := srv.get_status
    end;
  _postinvoke();
end;

function Torg_jboss_tm_iiop_TransactionService_stub_clp.get_parent_status: TStatus;
var
  _srv: IServant;
  srv: ICoordinator;
begin
  result := StatusActive;
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TCoordinator_serv._narrow(_srv);
      if srv <> nil then
        result := srv.get_parent_status
    end;
  _postinvoke();
end;

function Torg_jboss_tm_iiop_TransactionService_stub_clp.get_top_level_status: TStatus;
var
  _srv: IServant;
  srv: ICoordinator;
begin
  result := StatusActive;
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TCoordinator_serv._narrow(_srv);
      if srv <> nil then
        result := srv.get_top_level_status
    end;
  _postinvoke();
end;

function Torg_jboss_tm_iiop_TransactionService_stub_clp.is_same_transaction(const tc: ICoordinator): boolean;
var
  _srv: IServant;
  srv: ICoordinator;
begin
  result := false;
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TCoordinator_serv._narrow(_srv);
      if srv <> nil then
        result := srv.is_same_transaction(tc)
    end;
  _postinvoke();
end;

function Torg_jboss_tm_iiop_TransactionService_stub_clp.is_related_transaction(const tc: ICoordinator): boolean;
var
  _srv: IServant;
  srv: ICoordinator;
begin
  result := false;
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TCoordinator_serv._narrow(_srv);
      if srv <> nil then
        result := srv.is_related_transaction(tc)
    end;
  _postinvoke();
end;

function Torg_jboss_tm_iiop_TransactionService_stub_clp.is_ancestor_transaction(const tc: ICoordinator): boolean;
var
  _srv: IServant;
  srv: ICoordinator;
begin
  result := false;
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TCoordinator_serv._narrow(_srv);
      if srv <> nil then
        result := srv.is_ancestor_transaction(tc)
    end;
  _postinvoke();
end;

function Torg_jboss_tm_iiop_TransactionService_stub_clp.is_descendant_transaction(const tc: ICoordinator): boolean;
var
  _srv: IServant;
  srv: ICoordinator;
begin
  result := false;
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TCoordinator_serv._narrow(_srv);
      if srv <> nil then
        result := srv.is_descendant_transaction(tc)
    end;
  _postinvoke();
end;

function Torg_jboss_tm_iiop_TransactionService_stub_clp.is_top_level_transaction: boolean;
var
  _srv: IServant;
  srv: ICoordinator;
begin
  result := false;
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TCoordinator_serv._narrow(_srv);
      if srv <> nil then
        result := srv.is_top_level_transaction
    end;
  _postinvoke();
end;

function Torg_jboss_tm_iiop_TransactionService_stub_clp.hash_transaction: _ulong;
var
  _srv: IServant;
  srv: ICoordinator;
begin
  result := 0;
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TCoordinator_serv._narrow(_srv);
      if srv <> nil then
        result := srv.hash_transaction
    end;
  _postinvoke();
end;

function Torg_jboss_tm_iiop_TransactionService_stub_clp.hash_top_level_tran: _ulong;
var
  _srv: IServant;
  srv: ICoordinator;
begin
  result := 0;
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TCoordinator_serv._narrow(_srv);
      if srv <> nil then
        result := srv.hash_top_level_tran
    end;
  _postinvoke();
end;

function Torg_jboss_tm_iiop_TransactionService_stub_clp.register_resource(const r: IResource): IRecoveryCoordinator;
var
  _srv: IServant;
  srv: ICoordinator;
begin
  result := nil;
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TCoordinator_serv._narrow(_srv);
      if srv <> nil then
        result := srv.register_resource(r)
    end;
  _postinvoke();
end;

procedure Torg_jboss_tm_iiop_TransactionService_stub_clp.register_synchronization(const sync: ISynchronization);
var
  _srv: IServant;
  srv: ICoordinator;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TCoordinator_serv._narrow(_srv);
      if srv <> nil then
        srv.register_synchronization(sync)
    end;
  _postinvoke();
end;

procedure Torg_jboss_tm_iiop_TransactionService_stub_clp.register_subtran_aware(const r: ISubtransactionAwareResource);
var
  _srv: IServant;
  srv: ICoordinator;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TCoordinator_serv._narrow(_srv);
      if srv <> nil then
        srv.register_subtran_aware(r)
    end;
  _postinvoke();
end;

procedure Torg_jboss_tm_iiop_TransactionService_stub_clp.rollback_only;
var
  _srv: IServant;
  srv: ICoordinator;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TCoordinator_serv._narrow(_srv);
      if srv <> nil then
        srv.rollback_only
    end;
  _postinvoke();
end;

function Torg_jboss_tm_iiop_TransactionService_stub_clp.get_transaction_name: string;
var
  _srv: IServant;
  srv: ICoordinator;
begin
  result := '';
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TCoordinator_serv._narrow(_srv);
      if srv <> nil then
        result := srv.get_transaction_name
    end;
  _postinvoke();
end;

function Torg_jboss_tm_iiop_TransactionService_stub_clp.create_subtransaction: IControl;
var
  _srv: IServant;
  srv: ICoordinator;
begin
  result := nil;
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TCoordinator_serv._narrow(_srv);
      if srv <> nil then
        result := srv.create_subtransaction
    end;
  _postinvoke();
end;

function Torg_jboss_tm_iiop_TransactionService_stub_clp.get_txcontext: TPropagationContext;
var
  _srv: IServant;
  srv: ICoordinator;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TCoordinator_serv._narrow(_srv);
      if srv <> nil then
        result := srv.get_txcontext
    end;
  _postinvoke();
end;

procedure Torg_jboss_tm_iiop_TransactionService_stub_clp.commit(const report_heuristics: boolean);
var
  _srv: IServant;
  srv: ITerminator;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TTerminator_serv._narrow(_srv);
      if srv <> nil then
        srv.commit(report_heuristics)
    end;
  _postinvoke();
end;

procedure Torg_jboss_tm_iiop_TransactionService_stub_clp.rollback;
var
  _srv: IServant;
  srv: ITerminator;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TTerminator_serv._narrow(_srv);
      if srv <> nil then
        srv.rollback
    end;
  _postinvoke();
end;

//***********************************************************
// Torg_jboss_tm_iiop_TransactionService_serv
//***********************************************************
function Torg_jboss_tm_iiop_TransactionService_serv._this(): Iorg_jboss_tm_iiop_TransactionService;
var
  obj: IORBObject;
begin
  obj := this();
  result := Torg_jboss_tm_iiop_TransactionService._narrow(obj);
end;

function Torg_jboss_tm_iiop_TransactionService_serv._is_a(const repoid: string): Boolean;
begin
  result := repoid = 'IDL:org/jboss/tm/iiop/TransactionService:1.0';
  if repoid = 'IDL:omg.org/CosTransactions/Control:1.0' then
    begin
      result := true;
      exit;
    end;
  if repoid = 'IDL:org/jboss/tm/iiop/CoordinatorExt:1.0' then
    begin
      result := true;
      exit;
    end;
  if repoid = 'IDL:omg.org/CosTransactions/Terminator:1.0' then
    begin
      result := true;
      exit;
    end;
  if not result then
    result := inherited _is_a(repoid);
end;

function Torg_jboss_tm_iiop_TransactionService_serv._primary_interface(const objid: ObjectID; const poa: IPOA): string;
begin
  result := 'IDL:org/jboss/tm/iiop/TransactionService:1.0';
end;

function Torg_jboss_tm_iiop_TransactionService_serv._make_stub(const poa: IPOA; const obj : IORBObject): IORBObject;
begin
  result := Torg_jboss_tm_iiop_TransactionService_stub_clp.Create(poa,obj);
end;

procedure Torg_jboss_tm_iiop_TransactionService_serv.invoke(const serv: IStaticServerRequest);
begin
  if not _dispatch(serv) then
    begin
      serv.set_exception(BAD_OPERATION.Create(0, COMPLETED_NO) as IORBException);
      serv.write_results();
    end;
end;

function Torg_jboss_tm_iiop_TransactionService_serv.narrow_helper(const str: string): Pointer;
begin
  if str = 'IDL:org/jboss/tm/iiop/TransactionService:1.0' then
    begin
      result := Pointer(Iorg_jboss_tm_iiop_TransactionService(self));
      exit;
    end;
  if str = 'IDL:omg.org/CosTransactions/Control:1.0' then
    begin
      result := Pointer(self as IControl);
      exit;
    end;
  if str = 'IDL:org/jboss/tm/iiop/CoordinatorExt:1.0' then
    begin
      result := Pointer(self as Iorg_jboss_tm_iiop_CoordinatorExt);
      exit;
    end;
  if str = 'IDL:omg.org/CosTransactions/Terminator:1.0' then
    begin
      result := Pointer(self as ITerminator);
      exit;
    end;
  result := inherited narrow_helper(str);
end;

class function Torg_jboss_tm_iiop_TransactionService_serv._narrow(const srv : IServant): Iorg_jboss_tm_iiop_TransactionService;
var
  p: Pointer;
begin
  result := nil;
  if srv = nil then exit;
  p := srv.narrow_helper('IDL:org/jboss/tm/iiop/TransactionService:1.0');
  if p <> nil then
    result := Iorg_jboss_tm_iiop_TransactionService(p)
end;

function Torg_jboss_tm_iiop_TransactionService_serv._dispatch(const req: IStaticServerRequest): Boolean;
var
  get_terminator_result: ITerminator;
  get_coordinator_result: ICoordinator;
  get_transaction_id_result: Torg_jboss_tm_iiop_TransactionId;
  commit_report_heuristics: boolean;
begin
  result := true;
  if req.op_name = 'get_terminator' then
    begin
      req.set_result(StaticAny(Terminator_marshaller,@get_terminator_result) as IStaticAny);
      if not req.read_args() then  exit;
      req.set_exceptions_tc([_tc_Unavailable.typecode]);
      try
        get_terminator_result := get_terminator;
      except
        on Unavailable: TUnavailable do
          req.set_exception(TUnavailable.Create(Unavailable) as IORBException);
      end;
      req.write_results();
      exit;
    end
  else if req.op_name = 'get_coordinator' then
    begin
      req.set_result(StaticAny(Coordinator_marshaller,@get_coordinator_result) as IStaticAny);
      if not req.read_args() then  exit;
      req.set_exceptions_tc([_tc_Unavailable.typecode]);
      try
        get_coordinator_result := get_coordinator;
      except
        on Unavailable: TUnavailable do
          req.set_exception(TUnavailable.Create(Unavailable) as IORBException);
      end;
      req.write_results();
      exit;
    end
  else if req.op_name = 'get_transaction_id' then
    begin
      req.set_result(StaticAny(org_jboss_tm_iiop_TransactionId_marshaller,@get_transaction_id_result) as IStaticAny);
      if not req.read_args() then  exit;
      get_transaction_id_result := get_transaction_id;
      req.write_results();
      exit;
    end
  else if req.op_name = 'commit' then
    begin
      req.add_in_arg(StaticAny(stat_boolean,@commit_report_heuristics) as IStaticAny);
      if not req.read_args() then  exit;
      req.set_exceptions_tc([_tc_HeuristicMixed.typecode, _tc_HeuristicHazard.typecode]);
      try
        commit(commit_report_heuristics);
      except
        on HeuristicMixed: THeuristicMixed do
          req.set_exception(THeuristicMixed.Create(HeuristicMixed) as IORBException);
        on HeuristicHazard: THeuristicHazard do
          req.set_exception(THeuristicHazard.Create(HeuristicHazard) as IORBException);
      end;
      req.write_results();
      exit;
    end
  else if req.op_name = 'rollback' then
    begin
      if not req.read_args() then  exit;
      rollback;
      req.write_results();
      exit;
    end;
  if not inherited _dispatch(req) then
    result := false;
end;

//***********************************************************
// Torg_jboss_tm_iiop_TransactionService_marshaller
//***********************************************************
function Torg_jboss_tm_iiop_TransactionService_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  obj: IORBObject;
begin
  result := false;
  if not stat_Object.demarshal(dec,@obj) then exit;
  Iorg_jboss_tm_iiop_TransactionService(addr^) := Torg_jboss_tm_iiop_TransactionService._narrow(obj);
  result := (obj = nil) or (Pointer(addr^) <> nil);
end;

procedure Torg_jboss_tm_iiop_TransactionService_marshaller.marshal(enc: IEncoder;const addr : Pointer);
var
  obj: IORBObject;
begin
  obj := Iorg_jboss_tm_iiop_TransactionService(addr^) as IORBObject;
  stat_Object.marshal(enc,@Pointer(obj));
end;

procedure Torg_jboss_tm_iiop_TransactionService_marshaller._free(var addr: Pointer);
begin
  Iorg_jboss_tm_iiop_TransactionService(addr^) := nil;
end;

procedure Torg_jboss_tm_iiop_TransactionService_marshaller._create(var addr: Pointer);
begin
  Iorg_jboss_tm_iiop_TransactionService(addr^) := Torg_jboss_tm_iiop_TransactionService_stub.Create();
end;

procedure Torg_jboss_tm_iiop_TransactionService_marshaller._assign(dst, src: Pointer);
begin
  Iorg_jboss_tm_iiop_TransactionService(dst^) := Iorg_jboss_tm_iiop_TransactionService(src^);
end;

function Torg_jboss_tm_iiop_TransactionService_marshaller.typecode: ITypeCode;
begin
  result := _tc_org_jboss_tm_iiop_TransactionService.typecode;
end;

function any_to_org_jboss_tm_iiop_TransactionId(const a: IAny; var val: Torg_jboss_tm_iiop_TransactionId): Boolean;
var
  stat: IStaticAny;
begin
  stat := StaticAny(org_jboss_tm_iiop_TransactionId_marshaller,@val);
  result := a.to_static_any(stat);
end;

function org_jboss_tm_iiop_TransactionId_to_any(const val: Torg_jboss_tm_iiop_TransactionId): IAny;
var
  stat: IStaticAny;
begin
  stat := StaticAny(org_jboss_tm_iiop_TransactionId_marshaller,@val);
  result := CreateAny;
  result.from_static_any(stat);
end;

function any_to_org_jboss_tm_iiop_TransactionDesc(const a: IAny; var val: Torg_jboss_tm_iiop_TransactionDesc): Boolean;
var
  stat: IStaticAny;
begin
  stat := StaticAny(org_jboss_tm_iiop_TransactionDesc_marshaller,@val);
  result := a.to_static_any(stat);
end;

function org_jboss_tm_iiop_TransactionDesc_to_any(const val: Torg_jboss_tm_iiop_TransactionDesc): IAny;
var
  stat: IStaticAny;
begin
  stat := StaticAny(org_jboss_tm_iiop_TransactionDesc_marshaller,@val);
  result := CreateAny;
  result.from_static_any(stat);
end;

function any_to_org_jboss_tm_iiop_TransactionFactoryExt(const a: IAny; var val: Iorg_jboss_tm_iiop_TransactionFactoryExt): Boolean;
var
  stat: IStaticAny;
begin
  stat := StaticAny(org_jboss_tm_iiop_TransactionFactoryExt_marshaller,@val);
  result := a.to_static_any(stat);
end;

function org_jboss_tm_iiop_TransactionFactoryExt_to_any(const val: Iorg_jboss_tm_iiop_TransactionFactoryExt): IAny;
var
  stat: IStaticAny;
begin
  stat := StaticAny(org_jboss_tm_iiop_TransactionFactoryExt_marshaller,@val);
  result := CreateAny;
  result.from_static_any(stat);
end;

function any_to_org_jboss_tm_iiop_CoordinatorExt(const a: IAny; var val: Iorg_jboss_tm_iiop_CoordinatorExt): Boolean;
var
  stat: IStaticAny;
begin
  stat := StaticAny(org_jboss_tm_iiop_CoordinatorExt_marshaller,@val);
  result := a.to_static_any(stat);
end;

function org_jboss_tm_iiop_CoordinatorExt_to_any(const val: Iorg_jboss_tm_iiop_CoordinatorExt): IAny;
var
  stat: IStaticAny;
begin
  stat := StaticAny(org_jboss_tm_iiop_CoordinatorExt_marshaller,@val);
  result := CreateAny;
  result.from_static_any(stat);
end;

function any_to_org_jboss_tm_iiop_TransactionService(const a: IAny; var val: Iorg_jboss_tm_iiop_TransactionService): Boolean;
var
  stat: IStaticAny;
begin
  stat := StaticAny(org_jboss_tm_iiop_TransactionService_marshaller,@val);
  result := a.to_static_any(stat);
end;

function org_jboss_tm_iiop_TransactionService_to_any(const val: Iorg_jboss_tm_iiop_TransactionService): IAny;
var
  stat: IStaticAny;
begin
  stat := StaticAny(org_jboss_tm_iiop_TransactionService_marshaller,@val);
  result := CreateAny;
  result.from_static_any(stat);
end;

initialization
  org_jboss_tm_iiop_TransactionId_marshaller := Torg_jboss_tm_iiop_TransactionId_marshaller.Create();
  org_jboss_tm_iiop_TransactionDesc_marshaller := Torg_jboss_tm_iiop_TransactionDesc_marshaller.Create();
  org_jboss_tm_iiop_TransactionFactoryExt_marshaller := Torg_jboss_tm_iiop_TransactionFactoryExt_marshaller.Create();
  org_jboss_tm_iiop_CoordinatorExt_marshaller := Torg_jboss_tm_iiop_CoordinatorExt_marshaller.Create();
  org_jboss_tm_iiop_TransactionService_marshaller := Torg_jboss_tm_iiop_TransactionService_marshaller.Create();
  _tc_org_jboss_tm_iiop_TransactionId := CreateTypeCodeConst('010000000f00000080000000010000002800000049444c3a6f72672f6a626f73732f746d2f69696f702f5472616e73616374696f6e4964'+
    '3a312e30000e0000005472616e73616374696f6e49640000000200000009000000666f726d61744964000000000300000009000000676c'+
    '6f62616c496400000000130000000c000000010000000a00000000000000');
  _tc_org_jboss_tm_iiop_TransactionDesc := CreateTypeCodeConst('010000000f000000b0050000010000002a00000049444c3a6f72672f6a626f73732f746d2f69696f702f5472616e73616374696f6e4465'+
    '73633a312e30000000100000005472616e73616374696f6e44657363000200000008000000636f6e74726f6c000e0000003c0000000100'+
    '00002800000049444c3a6f6d672e6f72672f436f735472616e73616374696f6e732f436f6e74726f6c3a312e300008000000436f6e7472'+
    '6f6c001300000070726f7061676174696f6e436f6e7465787400000f000000f4040000010000003300000049444c3a6f6d672e6f72672f'+
    '436f735472616e73616374696f6e732f50726f7061676174696f6e436f6e746578743a312e3000001300000050726f7061676174696f6e'+
    '436f6e746578740000040000000800000074696d656f757400050000000800000063757272656e74000f000000e8010000010000002e00'+
    '000049444c3a6f6d672e6f72672f436f735472616e73616374696f6e732f5472616e734964656e746974793a312e300000000e00000054'+
    '72616e734964656e746974790000000300000006000000636f6f72640000000e00000044000000010000002c00000049444c3a6f6d672e'+
    '6f72672f436f735472616e73616374696f6e732f436f6f7264696e61746f723a312e30000c000000436f6f7264696e61746f7200050000'+
    '007465726d000000000e00000043000000010000002b00000049444c3a6f6d672e6f72672f436f735472616e73616374696f6e732f5465'+
    '726d696e61746f723a312e3000000b0000005465726d696e61746f720000050000006f746964000000000f000000d40000000100000027'+
    '00000049444c3a6f6d672e6f72672f436f735472616e73616374696f6e732f6f7469645f743a312e300000070000006f7469645f740000'+
    '0300000009000000666f726d6174494400000000030000000d000000627175616c5f6c656e677468000000000300000004000000746964'+
    '001500000058000000010000002900000049444c3a6f6d672e6f72672f436f735472616e73616374696f6e732f4f637465745365713a31'+
    '2e3000000000090000004f6374657453657100000000130000000c000000010000000a0000000000000008000000706172656e74730015'+
    '00000054020000010000003100000049444c3a6f6d672e6f72672f436f735472616e73616374696f6e732f5472616e734964656e746974'+
    '795365713a312e3000000000110000005472616e734964656e746974795365710000000013000000f8010000010000000f000000e80100'+
    '00010000002e00000049444c3a6f6d672e6f72672f436f735472616e73616374696f6e732f5472616e734964656e746974793a312e3000'+
    '00000e0000005472616e734964656e746974790000000300000006000000636f6f72640000000e00000044000000010000002c00000049'+
    '444c3a6f6d672e6f72672f436f735472616e73616374696f6e732f436f6f7264696e61746f723a312e30000c000000436f6f7264696e61'+
    '746f7200050000007465726d000000000e00000043000000010000002b00000049444c3a6f6d672e6f72672f436f735472616e73616374'+
    '696f6e732f5465726d696e61746f723a312e3000000b0000005465726d696e61746f720000050000006f746964000000000f000000d400'+
    '0000010000002700000049444c3a6f6d672e6f72672f436f735472616e73616374696f6e732f6f7469645f743a312e300000070000006f'+
    '7469645f7400000300000009000000666f726d6174494400000000030000000d000000627175616c5f6c656e6774680000000003000000'+
    '04000000746964001500000058000000010000002900000049444c3a6f6d672e6f72672f436f735472616e73616374696f6e732f4f6374'+
    '65745365713a312e3000000000090000004f6374657453657100000000130000000c000000010000000a00000000000000000000001d00'+
    '0000696d706c656d656e746174696f6e5f73706563696669635f64617461000000000b000000');
  _tc_org_jboss_tm_iiop_TransactionFactoryExt := CreateTypeCodeConst('010000000e00000052000000010000003000000049444c3a6f72672f6a626f73732f746d2f69696f702f5472616e73616374696f6e4661'+
    '63746f72794578743a312e3000160000005472616e73616374696f6e466163746f727945787400');
  _tc_org_jboss_tm_iiop_CoordinatorExt := CreateTypeCodeConst('010000000e00000047000000010000002900000049444c3a6f72672f6a626f73732f746d2f69696f702f436f6f7264696e61746f724578'+
    '743a312e30000000000f000000436f6f7264696e61746f7245787400');
  _tc_org_jboss_tm_iiop_TransactionService := CreateTypeCodeConst('010000000e0000004f000000010000002d00000049444c3a6f72672f6a626f73732f746d2f69696f702f5472616e73616374696f6e5365'+
    '72766963653a312e3000000000130000005472616e73616374696f6e5365727669636500');
end.
