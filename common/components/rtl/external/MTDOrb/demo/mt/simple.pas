// ***************************************************************************
//                                                                            
// Generated by the MTDORB IDL-to-Pascal Translator (1.0.1b1), 21.09.2010 13:27
//                                                                            
// Copyright (c) 2002 - 2004                                                  
// Millennium Group.                                                          
// Samara, Russia                                                             
//                                                                            
// All Rights Reserved                                                        
//                                                                            
// ***************************************************************************
// Compiled with parameters: " -i../..//idl -i./ ./\simple.idl" 
//                                                                            
unit simple;

interface

uses
  Classes, orb_int, orb, req_int, code_int, env_int, stdstat, std_seq,imr, imr_int, 
  orbtypes, exceptions, except_int, simple_int, poa_int, poa;

type

  {** IDL:simple1:1.0 } 
  Tsimple1 = class(TORBObject,Isimple1)
  protected
    procedure func(const id: AnsiChar); virtual; abstract;
    procedure flush; virtual; abstract;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    class function _narrow(const obj : IORBObject): Isimple1;
    class function narrow_helper2(const obj: IORBObject): Boolean;
  end;

  {** stub for interface IDL:simple1:1.0} 
  Tsimple1_stub = class(Tsimple1)
  protected
    procedure func(const id: AnsiChar); override;
    procedure flush; override;
  end;

  {** POA stub for interface IDL:simple1:1.0} 
  Tsimple1_stub_clp = class(TPOAStub,IPOAStub,Isimple1)
  protected
    procedure func(const id: AnsiChar); virtual;
    procedure flush; virtual;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  end;

  {** servant for interface IDL:simple1:1.0} 
  Tsimple1_serv = class(TPOAStaticImplementation,IPOAStaticImplementation,IServant,Isimple1)
  protected
    procedure func(const id: AnsiChar); virtual; abstract;
    procedure flush; virtual; abstract;
    function _primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID; override;
    function _make_stub(const poa: IPOA; const obj : IORBObject): IORBObject; override;
    function _is_a(const repoid: RepositoryID): Boolean; override;
    procedure invoke(const serv: IStaticServerRequest); override;
    function _dispatch(const req: IStaticServerRequest): Boolean;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    function _this(): Isimple1;
    class function _narrow(const srv : IServant): Isimple1;
  end;

  Tsimple1_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

  {** IDL:simple2:1.0 } 
  Tsimple2 = class(TORBObject,Isimple2)
  protected
    procedure func(const id: AnsiChar); virtual; abstract;
    procedure flush; virtual; abstract;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    class function _narrow(const obj : IORBObject): Isimple2;
    class function narrow_helper2(const obj: IORBObject): Boolean;
  end;

  {** stub for interface IDL:simple2:1.0} 
  Tsimple2_stub = class(Tsimple2)
  protected
    procedure func(const id: AnsiChar); override;
    procedure flush; override;
  end;

  {** POA stub for interface IDL:simple2:1.0} 
  Tsimple2_stub_clp = class(TPOAStub,IPOAStub,Isimple2)
  protected
    procedure func(const id: AnsiChar); virtual;
    procedure flush; virtual;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  end;

  {** servant for interface IDL:simple2:1.0} 
  Tsimple2_serv = class(TPOAStaticImplementation,IPOAStaticImplementation,IServant,Isimple2)
  protected
    procedure func(const id: AnsiChar); virtual; abstract;
    procedure flush; virtual; abstract;
    function _primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID; override;
    function _make_stub(const poa: IPOA; const obj : IORBObject): IORBObject; override;
    function _is_a(const repoid: RepositoryID): Boolean; override;
    procedure invoke(const serv: IStaticServerRequest); override;
    function _dispatch(const req: IStaticServerRequest): Boolean;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    function _this(): Isimple2;
    class function _narrow(const srv : IServant): Isimple2;
  end;

  Tsimple2_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

var
  simple1_marshaller : IStaticTypeInfo;
  simple2_marshaller : IStaticTypeInfo;
  _tc_simple1 : ITypeCodeConst;
  _tc_simple2 : ITypeCodeConst;

implementation

uses
  SysUtils, any, tcode, static, throw;

//***********************************************************
// Tsimple1
//***********************************************************
function Tsimple1.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:simple1:1.0' then
    begin
      result := Pointer(self as Isimple1);
      exit;
    end;
end;

class function Tsimple1._narrow(const obj : IORBObject): Isimple1;
var
  p: Pointer;
  stub: Tsimple1_stub;
begin
  result := nil;
  if obj = nil then exit;
  p := obj.narrow_helper('IDL:simple1:1.0');
  if p <> nil then
    result := Isimple1(p)
  else
    begin
      if narrow_helper2(obj) or obj._is_a_remote('IDL:simple1:1.0') then
        begin
          stub := Tsimple1_stub.Create();
          stub.assign(obj);
          result := stub;
        end;
    end;
end;

class function Tsimple1.narrow_helper2(const obj: IORBObject): Boolean;
begin
  result := obj._repoid = 'IDL:simple1:1.0'
end;

//***********************************************************
// Tsimple1_stub
//***********************************************************
procedure Tsimple1_stub.func(const id: AnsiChar);
var
  req: IStaticRequest;
  _id: IStaticAny;
begin
  _id := StaticAny(stat_char,@id);
  req := StaticRequest(self,'func');
  req.add_in_arg(_id);
  req.invoke;
  dorb_static_throw(req);
end;

procedure Tsimple1_stub.flush;
var
  req: IStaticRequest;
begin
  req := StaticRequest(self,'flush');
  req.invoke;
  dorb_static_throw(req);
end;

//***********************************************************
// Tsimple1_stub_clp
//***********************************************************
function Tsimple1_stub_clp.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:simple1:1.0' then
    begin
      result := Pointer(self as Isimple1);
      exit;
  end;
end;

procedure Tsimple1_stub_clp.func(const id: AnsiChar);
var
  _srv: IServant;
  srv: Isimple1;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := Tsimple1_serv._narrow(_srv);
      if srv <> nil then
        srv.func(id)
    end;
  _postinvoke();
end;

procedure Tsimple1_stub_clp.flush;
var
  _srv: IServant;
  srv: Isimple1;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := Tsimple1_serv._narrow(_srv);
      if srv <> nil then
        srv.flush
    end;
  _postinvoke();
end;

//***********************************************************
// Tsimple1_serv
//***********************************************************
function Tsimple1_serv._this(): Isimple1;
var
  obj: IORBObject;
begin
  obj := this();
  result := Tsimple1._narrow(obj);
end;

function Tsimple1_serv._is_a(const repoid: RepositoryID): Boolean;
begin
  result := repoid = 'IDL:simple1:1.0';
end;

function Tsimple1_serv._primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID;
begin
  result := 'IDL:simple1:1.0';
end;

function Tsimple1_serv._make_stub(const poa: IPOA; const obj : IORBObject): IORBObject;
begin
  result := Tsimple1_stub_clp.Create(poa,obj);
end;

procedure Tsimple1_serv.invoke(const serv: IStaticServerRequest);
begin
  if not _dispatch(serv) then
    begin
      serv.set_exception(BAD_OPERATION.Create(0, COMPLETED_NO) as IORBException);
      serv.write_results();
    end;
end;

function Tsimple1_serv.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:simple1:1.0' then
    begin
      result := Pointer(Isimple1(self));
      exit;
    end;
end;

class function Tsimple1_serv._narrow(const srv : IServant): Isimple1;
var
  p: Pointer;
begin
  result := nil;
  if srv = nil then exit;
  p := srv.narrow_helper('IDL:simple1:1.0');
  if p <> nil then
    result := Isimple1(p)
end;

function Tsimple1_serv._dispatch(const req: IStaticServerRequest): Boolean;
var
  func_id: AnsiChar;
begin
  result := true;
  if req.op_name = 'func' then
    begin
      req.add_in_arg(StaticAny(stat_char,@func_id) as IStaticAny);
      if not req.read_args() then  exit;
      func(func_id);
      req.write_results();
      exit;
    end
  else if req.op_name = 'flush' then
    begin
      if not req.read_args() then  exit;
      flush;
      req.write_results();
      exit;
    end;
  result := false;
end;

//***********************************************************
// Tsimple1_marshaller
//***********************************************************
function Tsimple1_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  obj: IORBObject;
begin
  result := false;
  if not stat_Object.demarshal(dec,@obj) then exit;
  Isimple1(addr^) := Tsimple1._narrow(obj);
  result := (obj = nil) or (Pointer(addr^) <> nil);
end;

procedure Tsimple1_marshaller.marshal(enc: IEncoder;const addr : Pointer);
var
  obj: IORBObject;
begin
  obj := Isimple1(addr^) as IORBObject;
  stat_Object.marshal(enc,@Pointer(obj));
end;

procedure Tsimple1_marshaller._free(var addr: Pointer);
begin
  Isimple1(addr^) := nil;
end;

procedure Tsimple1_marshaller._create(var addr: Pointer);
begin
  Isimple1(addr^) := Tsimple1_stub.Create();
end;

procedure Tsimple1_marshaller._assign(dst, src: Pointer);
begin
  Isimple1(dst^) := Isimple1(src^);
end;

function Tsimple1_marshaller.typecode: ITypeCode;
begin
  result := _tc_simple1.typecode;
end;

//***********************************************************
// Tsimple2
//***********************************************************
function Tsimple2.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:simple2:1.0' then
    begin
      result := Pointer(self as Isimple2);
      exit;
    end;
end;

class function Tsimple2._narrow(const obj : IORBObject): Isimple2;
var
  p: Pointer;
  stub: Tsimple2_stub;
begin
  result := nil;
  if obj = nil then exit;
  p := obj.narrow_helper('IDL:simple2:1.0');
  if p <> nil then
    result := Isimple2(p)
  else
    begin
      if narrow_helper2(obj) or obj._is_a_remote('IDL:simple2:1.0') then
        begin
          stub := Tsimple2_stub.Create();
          stub.assign(obj);
          result := stub;
        end;
    end;
end;

class function Tsimple2.narrow_helper2(const obj: IORBObject): Boolean;
begin
  result := obj._repoid = 'IDL:simple2:1.0'
end;

//***********************************************************
// Tsimple2_stub
//***********************************************************
procedure Tsimple2_stub.func(const id: AnsiChar);
var
  req: IStaticRequest;
  _id: IStaticAny;
begin
  _id := StaticAny(stat_char,@id);
  req := StaticRequest(self,'func');
  req.add_in_arg(_id);
  req.invoke;
  dorb_static_throw(req);
end;

procedure Tsimple2_stub.flush;
var
  req: IStaticRequest;
begin
  req := StaticRequest(self,'flush');
  req.invoke;
  dorb_static_throw(req);
end;

//***********************************************************
// Tsimple2_stub_clp
//***********************************************************
function Tsimple2_stub_clp.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:simple2:1.0' then
    begin
      result := Pointer(self as Isimple2);
      exit;
  end;
end;

procedure Tsimple2_stub_clp.func(const id: AnsiChar);
var
  _srv: IServant;
  srv: Isimple2;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := Tsimple2_serv._narrow(_srv);
      if srv <> nil then
        srv.func(id)
    end;
  _postinvoke();
end;

procedure Tsimple2_stub_clp.flush;
var
  _srv: IServant;
  srv: Isimple2;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := Tsimple2_serv._narrow(_srv);
      if srv <> nil then
        srv.flush
    end;
  _postinvoke();
end;

//***********************************************************
// Tsimple2_serv
//***********************************************************
function Tsimple2_serv._this(): Isimple2;
var
  obj: IORBObject;
begin
  obj := this();
  result := Tsimple2._narrow(obj);
end;

function Tsimple2_serv._is_a(const repoid: RepositoryID): Boolean;
begin
  result := repoid = 'IDL:simple2:1.0';
end;

function Tsimple2_serv._primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID;
begin
  result := 'IDL:simple2:1.0';
end;

function Tsimple2_serv._make_stub(const poa: IPOA; const obj : IORBObject): IORBObject;
begin
  result := Tsimple2_stub_clp.Create(poa,obj);
end;

procedure Tsimple2_serv.invoke(const serv: IStaticServerRequest);
begin
  if not _dispatch(serv) then
    begin
      serv.set_exception(BAD_OPERATION.Create(0, COMPLETED_NO) as IORBException);
      serv.write_results();
    end;
end;

function Tsimple2_serv.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:simple2:1.0' then
    begin
      result := Pointer(Isimple2(self));
      exit;
    end;
end;

class function Tsimple2_serv._narrow(const srv : IServant): Isimple2;
var
  p: Pointer;
begin
  result := nil;
  if srv = nil then exit;
  p := srv.narrow_helper('IDL:simple2:1.0');
  if p <> nil then
    result := Isimple2(p)
end;

function Tsimple2_serv._dispatch(const req: IStaticServerRequest): Boolean;
var
  func_id: AnsiChar;
begin
  result := true;
  if req.op_name = 'func' then
    begin
      req.add_in_arg(StaticAny(stat_char,@func_id) as IStaticAny);
      if not req.read_args() then  exit;
      func(func_id);
      req.write_results();
      exit;
    end
  else if req.op_name = 'flush' then
    begin
      if not req.read_args() then  exit;
      flush;
      req.write_results();
      exit;
    end;
  result := false;
end;

//***********************************************************
// Tsimple2_marshaller
//***********************************************************
function Tsimple2_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  obj: IORBObject;
begin
  result := false;
  if not stat_Object.demarshal(dec,@obj) then exit;
  Isimple2(addr^) := Tsimple2._narrow(obj);
  result := (obj = nil) or (Pointer(addr^) <> nil);
end;

procedure Tsimple2_marshaller.marshal(enc: IEncoder;const addr : Pointer);
var
  obj: IORBObject;
begin
  obj := Isimple2(addr^) as IORBObject;
  stat_Object.marshal(enc,@Pointer(obj));
end;

procedure Tsimple2_marshaller._free(var addr: Pointer);
begin
  Isimple2(addr^) := nil;
end;

procedure Tsimple2_marshaller._create(var addr: Pointer);
begin
  Isimple2(addr^) := Tsimple2_stub.Create();
end;

procedure Tsimple2_marshaller._assign(dst, src: Pointer);
begin
  Isimple2(dst^) := Isimple2(src^);
end;

function Tsimple2_marshaller.typecode: ITypeCode;
begin
  result := _tc_simple2.typecode;
end;

initialization
  simple1_marshaller := Tsimple1_marshaller.Create();
  simple2_marshaller := Tsimple2_marshaller.Create();
  _tc_simple1 := CreateTypeCodeConst('010000000e00000024000000010000001000000049444c3a73696d706c65313a312e30000800000073696d706c653100');
  _tc_simple2 := CreateTypeCodeConst('010000000e00000024000000010000001000000049444c3a73696d706c65323a312e30000800000073696d706c653200');
end.
