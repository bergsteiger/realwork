// This file is generated by omniidl (C++ backend)- omniORB_3_0. Do not edit.

#include "helloworld.h"
#include <omniORB3/callDescriptor.h>

static const char* _0RL_library_version = omniORB_3_0;

HelloWorld_ptr HelloWorld_Helper::_nil() {
  return HelloWorld::_nil();
}

CORBA::Boolean HelloWorld_Helper::is_nil(HelloWorld_ptr p) {
  return CORBA::is_nil(p);

}

void HelloWorld_Helper::release(HelloWorld_ptr p) {
  CORBA::release(p);
}

void HelloWorld_Helper::duplicate(HelloWorld_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t HelloWorld_Helper::NP_alignedSize(HelloWorld_ptr obj, size_t offset) {
  return HelloWorld::_alignedSize(obj, offset);
}

void HelloWorld_Helper::marshalObjRef(HelloWorld_ptr obj, NetBufferedStream& s) {
  HelloWorld::_marshalObjRef(obj, s);
}

HelloWorld_ptr HelloWorld_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return HelloWorld::_unmarshalObjRef(s);
}

void HelloWorld_Helper::marshalObjRef(HelloWorld_ptr obj, MemBufferedStream& s) {
  HelloWorld::_marshalObjRef(obj, s);
}

HelloWorld_ptr HelloWorld_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return HelloWorld::_unmarshalObjRef(s);
}

HelloWorld_ptr
HelloWorld::_duplicate(HelloWorld_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

HelloWorld_ptr
HelloWorld::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

HelloWorld_ptr
HelloWorld::_nil()
{
  static _objref_HelloWorld* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_HelloWorld;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* HelloWorld::_PD_repoId = "IDL:HelloWorld:1.0";

_objref_HelloWorld::~_objref_HelloWorld() {}

_objref_HelloWorld::_objref_HelloWorld(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   
   omniObjRef(HelloWorld::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_HelloWorld::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, HelloWorld::_PD_repoId) )
    return (HelloWorld_ptr) this;
  
  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_dd4b18c669dc14ae_00000000(omniCallDescriptor* cd, omniServant* svnt)
{
  
  _impl_HelloWorld* impl = (_impl_HelloWorld*) svnt->_ptrToInterface(HelloWorld::_PD_repoId);
  impl->hello();
}

void _objref_HelloWorld::hello()
{
  omniStdCallDesc::void_call _call_desc(_0RL_lcfn_dd4b18c669dc14ae_00000000, "hello", 6, 0);
  
  _invoke(_call_desc);
  
}

_pof_HelloWorld::~_pof_HelloWorld() {}

omniObjRef*
_pof_HelloWorld::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_HelloWorld(mdri, p, id, lid);
}

CORBA::Boolean
_pof_HelloWorld::is_a(const char* id) const
{
  if( !strcmp(id, HelloWorld::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_HelloWorld _the_pof_HelloWorld;

_impl_HelloWorld::~_impl_HelloWorld() {}

CORBA::Boolean
_impl_HelloWorld::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "hello") ) {
    
    giop_s.RequestReceived();
    
    this->hello();
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  return 0;
}

void*
_impl_HelloWorld::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, HelloWorld::_PD_repoId) )
    return (_impl_HelloWorld*) this;
  
  return 0;
}

const char*
_impl_HelloWorld::_mostDerivedRepoId()
{
  return HelloWorld::_PD_repoId;
}

POA_HelloWorld::~POA_HelloWorld() {}

