// ***************************************************************************
//                                                                            
// Generated by the MTDORB IDL-to-Pascal Translator (1.0.1b1), 21.09.2010 13:27
//                                                                            
// Copyright (c) 2002 - 2004                                                  
// Millennium Group.                                                          
// Samara, Russia                                                             
//                                                                            
// All Rights Reserved                                                        
//                                                                            
// ***************************************************************************
// Compiled with parameters: " -i../..//idl -i./ ./\PIDemo.idl" 
//                                                                            
unit PIDemo;

interface

uses
  Classes, orb_int, orb, req_int, code_int, env_int, stdstat, std_seq,imr, imr_int, 
  orbtypes, exceptions, except_int, PIDemo_int, poa_int, poa;

type

  TPIDemo_User_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

  {** IDL:PIDemo/User:1.0 } 
  TPIDemo_User = class(UserException,IPIDemo_User)
  protected
    procedure throw; override;
    function clone(): IORBException; override;
    function repoid(): RepositoryID; override;
    procedure encode(const enc: IEncoder); override;
    procedure encode_any(const a: IAny); override;
  public
    constructor Create(ex: TPIDemo_User); overload;
    constructor Create(); overload;
  end;

  {** IDL:PIDemo:1.0 } 
  TPIDemo = class(TORBObject,IPIDemo)
  protected
    procedure noargs; virtual; abstract;
    procedure noargs_oneway; virtual; abstract;
    function noargs_return: AnsiString; virtual; abstract;
    procedure withargs(const param1: AnsiString; var param2: AnsiString; out param3: AnsiString); virtual; abstract;
    procedure systemexception; virtual; abstract;
    procedure userexception; virtual; abstract;
    procedure switch_to_static_impl; virtual; abstract;
    procedure switch_to_dynamic_impl; virtual; abstract;
    procedure call_other_impl(const level: Short); virtual; abstract;
    procedure deactivate; virtual; abstract;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    class function _narrow(const obj : IORBObject): IPIDemo;
    class function narrow_helper2(const obj: IORBObject): Boolean;
  end;

  {** stub for interface IDL:PIDemo:1.0} 
  TPIDemo_stub = class(TPIDemo)
  protected
    procedure noargs; override;
    procedure noargs_oneway; override;
    function noargs_return: AnsiString; override;
    procedure withargs(const param1: AnsiString; var param2: AnsiString; out param3: AnsiString); override;
    procedure systemexception; override;
    procedure userexception; override;
    procedure switch_to_static_impl; override;
    procedure switch_to_dynamic_impl; override;
    procedure call_other_impl(const level: Short); override;
    procedure deactivate; override;
  end;

  {** POA stub for interface IDL:PIDemo:1.0} 
  TPIDemo_stub_clp = class(TPOAStub,IPOAStub,IPIDemo)
  protected
    procedure noargs; virtual;
    procedure noargs_oneway; virtual;
    function noargs_return: AnsiString; virtual;
    procedure withargs(const param1: AnsiString; var param2: AnsiString; out param3: AnsiString); virtual;
    procedure systemexception; virtual;
    procedure userexception; virtual;
    procedure switch_to_static_impl; virtual;
    procedure switch_to_dynamic_impl; virtual;
    procedure call_other_impl(const level: Short); virtual;
    procedure deactivate; virtual;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  end;

  {** servant for interface IDL:PIDemo:1.0} 
  TPIDemo_serv = class(TPOAStaticImplementation,IPOAStaticImplementation,IServant,IPIDemo)
  protected
    procedure noargs; virtual; abstract;
    procedure noargs_oneway; virtual; abstract;
    function noargs_return: AnsiString; virtual; abstract;
    procedure withargs(const param1: AnsiString; var param2: AnsiString; out param3: AnsiString); virtual; abstract;
    procedure systemexception; virtual; abstract;
    procedure userexception; virtual; abstract;
    procedure switch_to_static_impl; virtual; abstract;
    procedure switch_to_dynamic_impl; virtual; abstract;
    procedure call_other_impl(const level: Short); virtual; abstract;
    procedure deactivate; virtual; abstract;
    function _primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID; override;
    function _make_stub(const poa: IPOA; const obj : IORBObject): IORBObject; override;
    function _is_a(const repoid: RepositoryID): Boolean; override;
    procedure invoke(const serv: IStaticServerRequest); override;
    function _dispatch(const req: IStaticServerRequest): Boolean;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    function _this(): IPIDemo;
    class function _narrow(const srv : IServant): IPIDemo;
  end;

  TPIDemo_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

var
  PIDemo_User_marshaller : IStaticTypeInfo;
  PIDemo_marshaller : IStaticTypeInfo;
  _tc_PIDemo_User : ITypeCodeConst;
  _tc_PIDemo : ITypeCodeConst;

implementation

uses
  SysUtils, any, tcode, static, throw;

//***********************************************************
// TPIDemo_User_marshaller
//***********************************************************
function TPIDemo_User_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  repoid: RepositoryId;
begin
  result := false;
  if not dec.except_begin(repoid) then exit;
  if not dec.except_end then exit;
  result := true;
end;

procedure TPIDemo_User_marshaller.marshal(enc: IEncoder;const addr : Pointer);
begin
  enc.except_begin('IDL:PIDemo/User:1.0');
  enc.except_end;
end;

procedure TPIDemo_User_marshaller._free(var addr: Pointer);
begin
  IPIDemo_User(addr^) := nil;
end;

procedure TPIDemo_User_marshaller._create(var addr: Pointer);
begin
  IPIDemo_User(addr^) := TPIDemo_User.Create();
end;

procedure TPIDemo_User_marshaller._assign(dst, src: Pointer);
begin
  IPIDemo_User(dst^) := IPIDemo_User(src^);
end;

function TPIDemo_User_marshaller.typecode: ITypeCode;
begin
  result := _tc_PIDemo_User.typecode;
end;

//***********************************************************
// TPIDemo_User
//***********************************************************
constructor TPIDemo_User.Create(ex: TPIDemo_User);
begin
  inherited Create();
end;

procedure TPIDemo_User.throw;
begin
  raise TPIDemo_User.Create(self);
end;

function TPIDemo_User.clone(): IORBException;
begin
  result := TPIDemo_User.Create(self);
end;

procedure TPIDemo_User.encode(const enc: IEncoder);
var
  int : IPIDemo_User;
begin
  int := self;
  PIDemo_User_marshaller.marshal(enc,@int);
end;

procedure TPIDemo_User.encode_any(const a: IAny);
var
  stat: IStaticAny;
begin
  stat := StaticAny(PIDemo_User_marshaller, Self);
  a.from_static_any(stat);
end;

constructor TPIDemo_User.Create();
begin
  inherited Create();
end;

function TPIDemo_User.repoid(): RepositoryID;
begin
  result := 'IDL:PIDemo/User:1.0';
end;

//***********************************************************
// TPIDemo
//***********************************************************
function TPIDemo.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:PIDemo:1.0' then
    begin
      result := Pointer(self as IPIDemo);
      exit;
    end;
end;

class function TPIDemo._narrow(const obj : IORBObject): IPIDemo;
var
  p: Pointer;
  stub: TPIDemo_stub;
begin
  result := nil;
  if obj = nil then exit;
  p := obj.narrow_helper('IDL:PIDemo:1.0');
  if p <> nil then
    result := IPIDemo(p)
  else
    begin
      if narrow_helper2(obj) or obj._is_a_remote('IDL:PIDemo:1.0') then
        begin
          stub := TPIDemo_stub.Create();
          stub.assign(obj);
          result := stub;
        end;
    end;
end;

class function TPIDemo.narrow_helper2(const obj: IORBObject): Boolean;
begin
  result := obj._repoid = 'IDL:PIDemo:1.0'
end;

//***********************************************************
// TPIDemo_stub
//***********************************************************
procedure TPIDemo_stub.noargs;
var
  req: IStaticRequest;
begin
  req := StaticRequest(self,'noargs');
  req.invoke;
  dorb_static_throw(req);
end;

procedure TPIDemo_stub.noargs_oneway;
var
  req: IStaticRequest;
begin
  req := StaticRequest(self,'noargs_oneway');
  req.oneway;
  dorb_static_throw(req);
end;

function TPIDemo_stub.noargs_return: AnsiString;
var
  req: IStaticRequest;
  _result: IStaticAny;
begin
  _result := StaticAny(stat_string, @result);
  req := StaticRequest(self,'noargs_return');
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

procedure TPIDemo_stub.withargs(const param1: AnsiString; var param2: AnsiString; out param3: AnsiString);
var
  req: IStaticRequest;
  _param1: IStaticAny;
  _param2: IStaticAny;
  _param3: IStaticAny;
begin
  _param1 := StaticAny(stat_string,@param1);
  _param2 := StaticAny(stat_string,@param2);
  _param3 := StaticAny(stat_string,@param3);
  req := StaticRequest(self,'withargs');
  req.add_in_arg(_param1);
  req.add_inout_arg(_param2);
  req.add_out_arg(_param3);
  req.invoke;
  dorb_static_throw(req);
end;

procedure TPIDemo_stub.systemexception;
var
  req: IStaticRequest;
begin
  req := StaticRequest(self,'systemexception');
  req.invoke;
  dorb_static_throw(req);
end;

procedure TPIDemo_stub.userexception;
var
  req: IStaticRequest;
begin
  req := StaticRequest(self,'userexception');
  req.set_exceptions_tc([_tc_PIDemo_User.typecode]);
  req.invoke;
  dorb_static_throw(req,[PIDemo_User_marshaller, 'IDL:PIDemo/User:1.0']);
end;

procedure TPIDemo_stub.switch_to_static_impl;
var
  req: IStaticRequest;
begin
  req := StaticRequest(self,'switch_to_static_impl');
  req.invoke;
  dorb_static_throw(req);
end;

procedure TPIDemo_stub.switch_to_dynamic_impl;
var
  req: IStaticRequest;
begin
  req := StaticRequest(self,'switch_to_dynamic_impl');
  req.invoke;
  dorb_static_throw(req);
end;

procedure TPIDemo_stub.call_other_impl(const level: Short);
var
  req: IStaticRequest;
  _level: IStaticAny;
begin
  _level := StaticAny(stat_short,@level);
  req := StaticRequest(self,'call_other_impl');
  req.add_in_arg(_level);
  req.invoke;
  dorb_static_throw(req);
end;

procedure TPIDemo_stub.deactivate;
var
  req: IStaticRequest;
begin
  req := StaticRequest(self,'deactivate');
  req.invoke;
  dorb_static_throw(req);
end;

//***********************************************************
// TPIDemo_stub_clp
//***********************************************************
function TPIDemo_stub_clp.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:PIDemo:1.0' then
    begin
      result := Pointer(self as IPIDemo);
      exit;
  end;
end;

procedure TPIDemo_stub_clp.noargs;
var
  _srv: IServant;
  srv: IPIDemo;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TPIDemo_serv._narrow(_srv);
      if srv <> nil then
        srv.noargs
    end;
  _postinvoke();
end;

procedure TPIDemo_stub_clp.noargs_oneway;
var
  _srv: IServant;
  srv: IPIDemo;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TPIDemo_serv._narrow(_srv);
      if srv <> nil then
        srv.noargs_oneway
    end;
  _postinvoke();
end;

function TPIDemo_stub_clp.noargs_return: AnsiString;
var
  _srv: IServant;
  srv: IPIDemo;
begin
  result := '';
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TPIDemo_serv._narrow(_srv);
      if srv <> nil then
        result := srv.noargs_return
    end;
  _postinvoke();
end;

procedure TPIDemo_stub_clp.withargs(const param1: AnsiString; var param2: AnsiString; out param3: AnsiString);
var
  _srv: IServant;
  srv: IPIDemo;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TPIDemo_serv._narrow(_srv);
      if srv <> nil then
        srv.withargs(param1, param2, param3)
    end;
  _postinvoke();
end;

procedure TPIDemo_stub_clp.systemexception;
var
  _srv: IServant;
  srv: IPIDemo;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TPIDemo_serv._narrow(_srv);
      if srv <> nil then
        srv.systemexception
    end;
  _postinvoke();
end;

procedure TPIDemo_stub_clp.userexception;
var
  _srv: IServant;
  srv: IPIDemo;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TPIDemo_serv._narrow(_srv);
      if srv <> nil then
        srv.userexception
    end;
  _postinvoke();
end;

procedure TPIDemo_stub_clp.switch_to_static_impl;
var
  _srv: IServant;
  srv: IPIDemo;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TPIDemo_serv._narrow(_srv);
      if srv <> nil then
        srv.switch_to_static_impl
    end;
  _postinvoke();
end;

procedure TPIDemo_stub_clp.switch_to_dynamic_impl;
var
  _srv: IServant;
  srv: IPIDemo;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TPIDemo_serv._narrow(_srv);
      if srv <> nil then
        srv.switch_to_dynamic_impl
    end;
  _postinvoke();
end;

procedure TPIDemo_stub_clp.call_other_impl(const level: Short);
var
  _srv: IServant;
  srv: IPIDemo;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TPIDemo_serv._narrow(_srv);
      if srv <> nil then
        srv.call_other_impl(level)
    end;
  _postinvoke();
end;

procedure TPIDemo_stub_clp.deactivate;
var
  _srv: IServant;
  srv: IPIDemo;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TPIDemo_serv._narrow(_srv);
      if srv <> nil then
        srv.deactivate
    end;
  _postinvoke();
end;

//***********************************************************
// TPIDemo_serv
//***********************************************************
function TPIDemo_serv._this(): IPIDemo;
var
  obj: IORBObject;
begin
  obj := this();
  result := TPIDemo._narrow(obj);
end;

function TPIDemo_serv._is_a(const repoid: RepositoryID): Boolean;
begin
  result := repoid = 'IDL:PIDemo:1.0';
end;

function TPIDemo_serv._primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID;
begin
  result := 'IDL:PIDemo:1.0';
end;

function TPIDemo_serv._make_stub(const poa: IPOA; const obj : IORBObject): IORBObject;
begin
  result := TPIDemo_stub_clp.Create(poa,obj);
end;

procedure TPIDemo_serv.invoke(const serv: IStaticServerRequest);
begin
  if not _dispatch(serv) then
    begin
      serv.set_exception(BAD_OPERATION.Create(0, COMPLETED_NO) as IORBException);
      serv.write_results();
    end;
end;

function TPIDemo_serv.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:PIDemo:1.0' then
    begin
      result := Pointer(IPIDemo(self));
      exit;
    end;
end;

class function TPIDemo_serv._narrow(const srv : IServant): IPIDemo;
var
  p: Pointer;
begin
  result := nil;
  if srv = nil then exit;
  p := srv.narrow_helper('IDL:PIDemo:1.0');
  if p <> nil then
    result := IPIDemo(p)
end;

function TPIDemo_serv._dispatch(const req: IStaticServerRequest): Boolean;
var
  noargs_return_result: AnsiString;
  withargs_param1: AnsiString;
  withargs_param2: AnsiString;
  withargs_param3: AnsiString;
  call_other_impl_level: Short;
begin
  result := true;
  if req.op_name = 'noargs' then
    begin
      if not req.read_args() then  exit;
      noargs;
      req.write_results();
      exit;
    end
  else if req.op_name = 'noargs_oneway' then
    begin
      if not req.read_args() then  exit;
      noargs_oneway;
      req.write_results();
      exit;
    end
  else if req.op_name = 'noargs_return' then
    begin
      req.set_result(StaticAny(stat_string,@noargs_return_result) as IStaticAny);
      if not req.read_args() then  exit;
      noargs_return_result := noargs_return;
      req.write_results();
      exit;
    end
  else if req.op_name = 'withargs' then
    begin
      req.add_in_arg(StaticAny(stat_string,@withargs_param1) as IStaticAny);
      req.add_inout_arg(StaticAny(stat_string,@withargs_param2) as IStaticAny);
      req.add_out_arg(StaticAny(stat_string,@withargs_param3) as IStaticAny);
      if not req.read_args() then  exit;
      withargs(withargs_param1, withargs_param2, withargs_param3);
      req.write_results();
      exit;
    end
  else if req.op_name = 'systemexception' then
    begin
      if not req.read_args() then  exit;
      systemexception;
      req.write_results();
      exit;
    end
  else if req.op_name = 'userexception' then
    begin
      if not req.read_args() then  exit;
      req.set_exceptions_tc([_tc_PIDemo_User.typecode]);
      try
        userexception;
      except
        on User: TPIDemo_User do
          req.set_exception(TPIDemo_User.Create(User) as IORBException);
      end;
      req.write_results();
      exit;
    end
  else if req.op_name = 'switch_to_static_impl' then
    begin
      if not req.read_args() then  exit;
      switch_to_static_impl;
      req.write_results();
      exit;
    end
  else if req.op_name = 'switch_to_dynamic_impl' then
    begin
      if not req.read_args() then  exit;
      switch_to_dynamic_impl;
      req.write_results();
      exit;
    end
  else if req.op_name = 'call_other_impl' then
    begin
      req.add_in_arg(StaticAny(stat_short,@call_other_impl_level) as IStaticAny);
      if not req.read_args() then  exit;
      call_other_impl(call_other_impl_level);
      req.write_results();
      exit;
    end
  else if req.op_name = 'deactivate' then
    begin
      if not req.read_args() then  exit;
      deactivate;
      req.write_results();
      exit;
    end;
  result := false;
end;

//***********************************************************
// TPIDemo_marshaller
//***********************************************************
function TPIDemo_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  obj: IORBObject;
begin
  result := false;
  if not stat_Object.demarshal(dec,@obj) then exit;
  IPIDemo(addr^) := TPIDemo._narrow(obj);
  result := (obj = nil) or (Pointer(addr^) <> nil);
end;

procedure TPIDemo_marshaller.marshal(enc: IEncoder;const addr : Pointer);
var
  obj: IORBObject;
begin
  obj := IPIDemo(addr^) as IORBObject;
  stat_Object.marshal(enc,@Pointer(obj));
end;

procedure TPIDemo_marshaller._free(var addr: Pointer);
begin
  IPIDemo(addr^) := nil;
end;

procedure TPIDemo_marshaller._create(var addr: Pointer);
begin
  IPIDemo(addr^) := TPIDemo_stub.Create();
end;

procedure TPIDemo_marshaller._assign(dst, src: Pointer);
begin
  IPIDemo(dst^) := IPIDemo(src^);
end;

function TPIDemo_marshaller.typecode: ITypeCode;
begin
  result := _tc_PIDemo.typecode;
end;

initialization
  PIDemo_User_marshaller := TPIDemo_User_marshaller.Create();
  PIDemo_marshaller := TPIDemo_marshaller.Create();
  _tc_PIDemo_User := CreateTypeCodeConst('01000000160000002c000000010000001400000049444c3a504944656d6f2f557365723a312e300005000000557365720000000000000000');
  _tc_PIDemo := CreateTypeCodeConst('010000000e00000023000000010000000f00000049444c3a504944656d6f3a312e30000007000000504944656d6f00');
end.
