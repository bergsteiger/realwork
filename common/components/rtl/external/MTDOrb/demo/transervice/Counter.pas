// ***************************************************************************
//                                                                            
// Generated by the MTDORB IDL-to-Pascal Translator (1.0.1b1), 21.09.2010 13:27
//                                                                            
// Copyright (c) 2002 - 2004                                                  
// Millennium Group.                                                          
// Samara, Russia                                                             
//                                                                            
// All Rights Reserved                                                        
//                                                                            
// ***************************************************************************
// Compiled with parameters: " -without-prefix -i../..//idl -i./ ./\Counter.idl" 
//                                                                            
unit Counter;

interface

uses
  Classes, orb_int, orb, req_int, code_int, env_int, stdstat, std_seq,imr, imr_int, 
  orbtypes, exceptions, except_int, Counter_int, value_int, value, CosTransactions_int,
  CosTransactions, poa_int, poa;

type

  {** IDL:implicit/Counter:1.0 } 
  TCounter = class(TTransactionalObject,ICounter)
  protected
    procedure increment; virtual; abstract;
    procedure decrement; virtual; abstract;
    procedure shutdown; virtual; abstract;
    function _get_count: long; virtual; abstract;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    class function _narrow(const obj : IORBObject): ICounter;
    class function narrow_helper2(const obj: IORBObject): Boolean;
  end;

  {** stub for interface IDL:implicit/Counter:1.0} 
  TCounter_stub = class(TCounter)
  protected
    procedure increment; override;
    procedure decrement; override;
    procedure shutdown; override;
    function _get_count: long; override;
  end;

  {** POA stub for interface IDL:implicit/Counter:1.0} 
  TCounter_stub_clp = class(TTransactionalObject_stub_clp,ICounter)
  protected
    procedure increment; virtual;
    procedure decrement; virtual;
    procedure shutdown; virtual;
    function _get_count: long; virtual;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  end;

  {** servant for interface IDL:implicit/Counter:1.0} 
  TCounter_serv = class(TTransactionalObject_serv,ICounter)
  protected
    procedure increment; virtual; abstract;
    procedure decrement; virtual; abstract;
    procedure shutdown; virtual; abstract;
    function _get_count: long; virtual; abstract;
    function _primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID; override;
    function _make_stub(const poa: IPOA; const obj : IORBObject): IORBObject; override;
    function _is_a(const repoid: RepositoryID): Boolean; override;
    procedure invoke(const serv: IStaticServerRequest); override;
    function _dispatch(const req: IStaticServerRequest): Boolean;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    function _this(): ICounter;
    class function _narrow(const srv : IServant): ICounter;
  end;

  TCounter_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

var
  Counter_marshaller : IStaticTypeInfo;
  _tc_Counter : ITypeCodeConst;

implementation

uses
  SysUtils, any, tcode, static, throw;

//***********************************************************
// TCounter
//***********************************************************
function TCounter.narrow_helper(const str: RepositoryID): Pointer;
begin
  if str = 'IDL:implicit/Counter:1.0' then
    begin
      result := Pointer(self as ICounter);
      exit;
    end;
  result := inherited narrow_helper(str);
end;

class function TCounter._narrow(const obj : IORBObject): ICounter;
var
  p: Pointer;
  stub: TCounter_stub;
begin
  result := nil;
  if obj = nil then exit;
  p := obj.narrow_helper('IDL:implicit/Counter:1.0');
  if p <> nil then
    result := ICounter(p)
  else
    begin
      if narrow_helper2(obj) or obj._is_a_remote('IDL:implicit/Counter:1.0') then
        begin
          stub := TCounter_stub.Create();
          stub.assign(obj);
          result := stub;
        end;
    end;
end;

class function TCounter.narrow_helper2(const obj: IORBObject): Boolean;
begin
  result := obj._repoid = 'IDL:implicit/Counter:1.0'
end;

//***********************************************************
// TCounter_stub
//***********************************************************
procedure TCounter_stub.increment;
var
  req: IStaticRequest;
begin
  req := StaticRequest(self,'increment');
  req.invoke;
  dorb_static_throw(req);
end;

procedure TCounter_stub.decrement;
var
  req: IStaticRequest;
begin
  req := StaticRequest(self,'decrement');
  req.invoke;
  dorb_static_throw(req);
end;

procedure TCounter_stub.shutdown;
var
  req: IStaticRequest;
begin
  req := StaticRequest(self,'shutdown');
  req.invoke;
  dorb_static_throw(req);
end;

function TCounter_stub._get_count: long;
var
  req: IStaticRequest;
  _result: IStaticAny;
begin
  _result := StaticAny(stat_long, @result);
  req := StaticRequest(self,'_get_count');
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

//***********************************************************
// TCounter_stub_clp
//***********************************************************
function TCounter_stub_clp.narrow_helper(const str: RepositoryID): Pointer;
begin
  if str = 'IDL:implicit/Counter:1.0' then
    begin
      result := Pointer(self as ICounter);
      exit;
    end;
  result := inherited narrow_helper(str);
end;

procedure TCounter_stub_clp.increment;
var
  _srv: IServant;
  srv: ICounter;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TCounter_serv._narrow(_srv);
      if srv <> nil then
        srv.increment
    end;
  _postinvoke();
end;

procedure TCounter_stub_clp.decrement;
var
  _srv: IServant;
  srv: ICounter;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TCounter_serv._narrow(_srv);
      if srv <> nil then
        srv.decrement
    end;
  _postinvoke();
end;

procedure TCounter_stub_clp.shutdown;
var
  _srv: IServant;
  srv: ICounter;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TCounter_serv._narrow(_srv);
      if srv <> nil then
        srv.shutdown
    end;
  _postinvoke();
end;

function TCounter_stub_clp._get_count: long;
var
  _srv: IServant;
  srv: ICounter;
begin
  result := 0;
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TCounter_serv._narrow(_srv);
      if srv <> nil then
        result := srv._get_count
    end;
  _postinvoke();
end;

//***********************************************************
// TCounter_serv
//***********************************************************
function TCounter_serv._this(): ICounter;
var
  obj: IORBObject;
begin
  obj := this();
  result := TCounter._narrow(obj);
end;

function TCounter_serv._is_a(const repoid: RepositoryID): Boolean;
begin
  result := repoid = 'IDL:implicit/Counter:1.0';
  if not result then
    result := inherited _is_a(repoid);
end;

function TCounter_serv._primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID;
begin
  result := 'IDL:implicit/Counter:1.0';
end;

function TCounter_serv._make_stub(const poa: IPOA; const obj : IORBObject): IORBObject;
begin
  result := TCounter_stub_clp.Create(poa,obj);
end;

procedure TCounter_serv.invoke(const serv: IStaticServerRequest);
begin
  if not _dispatch(serv) then
    begin
      serv.set_exception(BAD_OPERATION.Create(0, COMPLETED_NO) as IORBException);
      serv.write_results();
    end;
end;

function TCounter_serv.narrow_helper(const str: RepositoryID): Pointer;
begin
  if str = 'IDL:implicit/Counter:1.0' then
    begin
      result := Pointer(ICounter(self));
      exit;
    end;
  result := inherited narrow_helper(str);
end;

class function TCounter_serv._narrow(const srv : IServant): ICounter;
var
  p: Pointer;
begin
  result := nil;
  if srv = nil then exit;
  p := srv.narrow_helper('IDL:implicit/Counter:1.0');
  if p <> nil then
    result := ICounter(p)
end;

function TCounter_serv._dispatch(const req: IStaticServerRequest): Boolean;
var
  count_get_value: long;
begin
  result := true;
  if req.op_name = 'increment' then
    begin
      if not req.read_args() then  exit;
      increment;
      req.write_results();
      exit;
    end
  else if req.op_name = 'decrement' then
    begin
      if not req.read_args() then  exit;
      decrement;
      req.write_results();
      exit;
    end
  else if req.op_name = 'shutdown' then
    begin
      if not req.read_args() then  exit;
      shutdown;
      req.write_results();
      exit;
    end
  else if req.op_name = '_get_count' then
    begin
      req.set_result(StaticAny(stat_long,@count_get_value) as IStaticAny);
      if not req.read_args() then  exit;
      count_get_value := _get_count;
      req.write_results();
      exit;
    end;
  if not inherited _dispatch(req) then
    result := false;
end;

//***********************************************************
// TCounter_marshaller
//***********************************************************
function TCounter_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  obj: IORBObject;
begin
  result := false;
  if not stat_Object.demarshal(dec,@obj) then exit;
  ICounter(addr^) := TCounter._narrow(obj);
  result := (obj = nil) or (Pointer(addr^) <> nil);
end;

procedure TCounter_marshaller.marshal(enc: IEncoder;const addr : Pointer);
var
  obj: IORBObject;
begin
  obj := ICounter(addr^) as IORBObject;
  stat_Object.marshal(enc,@Pointer(obj));
end;

procedure TCounter_marshaller._free(var addr: Pointer);
begin
  ICounter(addr^) := nil;
end;

procedure TCounter_marshaller._create(var addr: Pointer);
begin
  ICounter(addr^) := TCounter_stub.Create();
end;

procedure TCounter_marshaller._assign(dst, src: Pointer);
begin
  ICounter(dst^) := ICounter(src^);
end;

function TCounter_marshaller.typecode: ITypeCode;
begin
  result := _tc_Counter.typecode;
end;

initialization
  Counter_marshaller := TCounter_marshaller.Create();
  _tc_Counter := CreateTypeCodeConst('010000000e00000030000000010000001900000049444c3a696d706c696369742f436f756e7465723a312e300000000008000000436f756e74657200');
end.
