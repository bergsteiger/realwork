#ifndef __COSQUERYCOLLECTION_IDL
#define __COSQUERYCOLLECTION_IDL

/*
* module CosQueryCpllection.
* writeln from specifications of OMG froup for CORBA Query Service.
* (C) Ruslan Shevchenko <Ruslan@Shevchenko.Kiev.UA>
* (C) GradSoft <info@gradsoft.com.ua>
* 1998, 1999, 2000, 2001
* $Id: CosQueryCollection.idl,v 1.1 2010/09/27 16:45:55 lulin Exp $
*/ 

#ifndef __CosQueryIDLConfigV2_idl
#include <CosQueryIDLConfigV2.idl>
#endif

#ifdef HAVE_ORB_IDL
#include <orb.idl>
#endif

#pragma prefix "gradsoft.kiev.ua"

/**
 *
 **/
module UAKGQuery 
{
    ///
    /**
     * UAKGQuery sequence of octets
     **/
    typedef sequence<octet> OctSeq;

};


#include <CosQuery.idl>


#pragma prefix "omg.org"


/**
* module CosQueryCollection.
* data definitions for CORBA Query Service
* writeln from specifications of OMG group .
* (C) Ruslan Shevchenko <Ruslan@Shevchenko.Kiev.UA>
* (C) Grad-Soft ltd, Kiev, Ukraine <http://www.gradsoft.com.ua>
* 1998, 1999, 2000, 2001, 2002
**/
module CosQueryCollection {

  ///
  exception ElementInvalid {};
  ///
  exception IteratorInvalid {};
  ///
  exception PositionInvalid {};

  /**
   * possible DB field types
   **/
  enum FieldType {
     ///
     TypeBoolean, 
     ///
     TypeChar, 
     ///
     TypeOctet, 
     ///
     TypeShort,
     ///
     TypeUShort, 
     ///
     TypeLong, 
     ///
     TypeULong, 
     ///
     TypeFloat, 
     ///
     TypeDouble,
     ///
     TypeString, 
     ///
     TypeObject, 
     ///
     TypeSmallInt, 
     ///
     TypeInteger,
     ///
     TypeReal, 
     ///
     TypeDoublePrecision, 
     ///
     TypeCharacter, 
     ///
     TypeDecimal,
     ///
     TypeNumeric,
     ///
     TypeDateTime,
     ///
     TypeRaw,
     ///
     TypeWString,
     ///
     TypeBlob,
     ///
     TypeClob,
     ///
     TypeWclob
  };
 
  /**
   * decimal field.
   **/
  struct Decimal {
    /**
     * precision of number.
     **/
    long precision; 
    /**
     * scale of number
     **/
    long scale; 
    /**
     * valus in BCD format.
     **/
    sequence<octet> value;
  };

  /**
   * type, corresponding to DATE field.
   * (all values are start from 1)
   **/
  struct DateTime {
    ///
    short year;
    ///
    octet month;
    ///
    octet day;
    ///
    octet hour;
    ///
    octet minute;
    ///
    octet second;
  };
    ///
    exception ForReadingOnly {};

    ///
    exception ForWritingOnly {};

    /**
     *
     **/
    interface Blob {
        ///
        unsigned long length() raises(CosQuery::QueryProcessingError);
        ///
        UAKGQuery::OctSeq fetch_chunk(in unsigned long chunkSize
                , out boolean more)
                raises(CosQuery::QueryProcessingError, ForWritingOnly);
        ///
        void put_chunk(in UAKGQuery::OctSeq data)
                raises(CosQuery::QueryProcessingError, ForReadingOnly);

    };

    /**
     *
     **/
    interface Clob {
        ///
        unsigned long length() raises(CosQuery::QueryProcessingError);
        ///
        string fetch_chunk(in unsigned long chunkSize, out boolean more)
                raises(CosQuery::QueryProcessingError
                , ForWritingOnly);
        ///
        void put_chunk(in string data) raises(CosQuery::QueryProcessingError
                , ForReadingOnly);

    };

    /**
     *
     **/
    interface Wclob {
        ///
        unsigned long length() raises(CosQuery::QueryProcessingError);
        ///
        wstring fetch_chunk(in unsigned long chunkSize, out boolean more)
                raises(CosQuery::QueryProcessingError
                , ForWritingOnly);
        ///
        void put_chunk(in wstring data) raises(CosQuery::QueryProcessingError
                , ForReadingOnly);

    };


  /**
   * Value represent one not null field, which stored in DB
   *@class
   **/
  union Value switch(FieldType) {
      ///
      case TypeBoolean: boolean b;
      ///
      case TypeChar: char c;
      ///
      case TypeOctet: octet o;
      ///
      case TypeShort : short s;
      ///
      case TypeUShort : unsigned short us;
      ///
      case TypeLong : long l;
      ///
      case TypeULong : unsigned long ul;
      ///
      case TypeFloat : float f;
      ///
      case TypeDouble : double d;
      ///
      case TypeString : string str;
      ///
      case TypeObject : Object obj;
      ///
      case TypeSmallInt : short si;
      ///
      case TypeInteger : long i;
      ///
      case TypeReal : float r;
      ///
      case TypeDoublePrecision : double dp;
      ///
      case TypeCharacter : string ch;
      ///
      case TypeDecimal : Decimal dec;
      ///
      case TypeNumeric : Decimal n;
      ///
      case TypeDateTime   : DateTime dt;
      ///
      case TypeRaw     : sequence<octet> raw;
      /// 
      case TypeWString  : wstring wstr;
      ///
      case TypeBlob     : Blob bl;
      ///
      case TypeClob  : Clob cl;
      ///
      case TypeWclob  : Wclob wcl;

  };
 
 ///
 typedef boolean Null;

 /**
  * this union represent one field in DB.
  **/
 union FieldValue switch(Null){
        case FALSE : Value v;
 };

 /**
  * one record in DB
  **/
 typedef sequence<FieldValue> Record;

 /**
  *
  **/
 typedef string Istring;



};

#endif
