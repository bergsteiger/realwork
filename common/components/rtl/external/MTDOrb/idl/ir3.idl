
#include <mico/ir.idl>

/*
 * Warning:
 *
 * This is not official IDL. All current proposals for Component
 * representation in the Interface Repository are broken, and I
 * needed something to work on, so don't depend on it. This
 * version has been submitted to the OMG as replacement. But
 * don't depend on anything in here. -- FP
 */

module CORBA {
  module ComponentIR {

    interface ComponentDef;
    interface HomeDef;

    interface Container : CORBA::Container {
      ComponentDef
	create_component (in RepositoryId id,
			  in Identifier name,
			  in VersionSpec version,
			  in ComponentDef base_component,
			  in InterfaceDefSeq supports_interfaces);

      HomeDef
	create_home (in RepositoryId id,
		     in Identifier name,
		     in VersionSpec version,
		     in HomeDef base_home,
		     in ComponentDef managed_component,
		     in ValueDef primary_key);
    };

    interface ModuleDef : Container, CORBA::ModuleDef {
    };

    interface Repository : Container, CORBA::Repository {
    };

    /*
     * ProvidesDef
     */

    interface ProvidesDef : Contained {
      attribute InterfaceDef interface_type;
    };

    struct ProvidesDescription {
      Identifier name;
      RepositoryId id;
      RepositoryId defined_in;
      VersionSpec version;
      RepositoryId interface_type;
    };

    /*
     * UsesDef
     */

    interface UsesDef : Contained {
      attribute InterfaceDef interface_type;
      attribute boolean is_multiple;
    };

    struct UsesDescription {
      Identifier name;
      RepositoryId id;
      RepositoryId defined_in;
      VersionSpec version;
      RepositoryId interface_type;
      boolean is_multiple;
    };

    /*
     * EventDef
     */

    interface EventDef : Contained {
      boolean is_a (in RepositoryId event_id);
      attribute ValueDef event;
    };

    struct EventDescription {
      Identifier name;
      RepositoryId id;
      RepositoryId defined_in;
      VersionSpec version;
      RepositoryId event;
    };

    /*
     * EmitsDef
     */

    interface EmitsDef : EventDef {
    };

    /*
     * PublishesDef
     */

    interface PublishesDef : EventDef {
    };

    /*
     * ConsumesDef
     */

    interface ConsumesDef : EventDef {
    };

    /*
     * ComponentDef
     */

    interface ComponentDef : InterfaceDef {

      attribute ComponentDef base_component;
      attribute InterfaceDefSeq supported_interfaces;

      /*
       * provides_interfaces, uses_interfaces, emits_events,
       * publishes_events and consumes_events are not necessary,
       * information about them can be obtained with
       * CORBA::Container::describe_contents()
       */

      ProvidesDef
	create_provides (in RepositoryId id,
			 in Identifier name,
			 in VersionSpec version,
			 in InterfaceDef interface_type);

      UsesDef
	create_uses (in RepositoryId id,
		     in Identifier name,
		     in VersionSpec version,
		     in InterfaceDef interface_type,
		     in boolean is_multiple);

      EmitsDef
	create_emits (in RepositoryId id,
		      in Identifier name,
		      in VersionSpec version,
		      in ValueDef event);

      PublishesDef
	create_publishes (in RepositoryId id,
			  in Identifier name,
			  in VersionSpec version,
			  in ValueDef event);

      ConsumesDef
	create_consumes (in RepositoryId id,
			 in Identifier name,
			 in VersionSpec version,
			 in ValueDef event);
    };

    typedef sequence<ProvidesDescription> ProvidesDescriptionSeq;
    typedef sequence<UsesDescription> UsesDescriptionSeq;
    typedef sequence<EventDescription> EventDescriptionSeq;

    struct ComponentDescription {
      Identifier name;
      RepositoryId id;
      RepositoryId defined_in;
      VersionSpec version;
      RepositoryId base_component;
      RepositoryIdSeq supported_interfaces;
      ProvidesDescriptionSeq provided_interfaces;
      UsesDescriptionSeq used_interfaces;
      EventDescriptionSeq emits_events;
      EventDescriptionSeq publishes_events;
      EventDescriptionSeq consumes_events;
      TypeCode type;
    };

    /*
     * FactoryDef
     */

    interface FactoryDef : OperationDef {
    };

    /*
     * FinderDef
     */

    interface FinderDef : OperationDef {
    };

    /*
     * HomeDef
     */

    interface HomeDef : InterfaceDef {

      attribute HomeDef base_home;
      attribute ComponentDef managed_component;
      attribute ValueDef primary_key;

      FactoryDef
	create_factory (in RepositoryId id,
			in Identifier name,
			in VersionSpec version,
			in ParDescriptionSeq params,
			in ExceptionDefSeq exceptions);

      FinderDef
	create_finder (in RepositoryId id,
		       in Identifier name,
		       in VersionSpec version,
		       in ParDescriptionSeq params,
		       in ExceptionDefSeq exceptions);

    };

    struct HomeDescription {
      Identifier name;
      RepositoryId id;
      RepositoryId defined_in;
      VersionSpec version;
      RepositoryId base_home;
      RepositoryId managed_component;
      ValueDescription primary_key;
      OpDescriptionSeq factories;
      OpDescriptionSeq finders;
      OpDescriptionSeq operations;
      AttrDescriptionSeq attributes;
      TypeCode type;
    };
  };
};

