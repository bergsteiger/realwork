// **********************************************************************
//
// Copyright (c) 2001 - 2002
// MT Tools
// Samara, Russia
//
// All Rights Reserved
// 
// **********************************************************************

#ifndef __policy_idl
#define __policy_idl

#pragma prefix "omg.org"

module CORBA
{

typedef unsigned long PolicyType;
typedef sequence<PolicyType> PolicyTypeSeq;

//
// Although Policy isn't marked as local in the specification we're
// going to compile as such.
//
local interface Policy
{
    readonly attribute PolicyType policy_type;
    Policy copy();
    void destroy();
};
typedef sequence<Policy> PolicyList;

typedef short PolicyErrorCode;

const PolicyErrorCode BAD_POLICY = 0;
const PolicyErrorCode UNSUPPORTED_POLICY = 1;
const PolicyErrorCode BAD_POLICY_TYPE = 2;
const PolicyErrorCode BAD_POLICY_VALUE = 3;
const PolicyErrorCode UNSUPPORTED_POLICY_VALUE = 4;

exception PolicyError
{
    PolicyErrorCode reason;
};

local interface PolicyManager
{
    exception InvalidPolicies
    {
        sequence<unsigned short> indices;
    };
    
    Policy get_policy_override(in PolicyType t);
    PolicyList get_specific_policy_overrides(in PolicyTypeSeq ts);
    PolicyList get_all_policy_overrides();
    
    void add_policy_overrides(in PolicyList policies)
        raises (InvalidPolicies);
    void remove_policy_overrides(in PolicyTypeSeq ts);
    void replace_all_policy_overrides(in PolicyList policies)
        raises(InvalidPolicies);
};

interface InterfaceDef;

local interface DomainManager
{
    Policy get_domain_policy(in PolicyType policy_type);
};

const PolicyType SecConstruction = 11;

local interface ConstructionPolicy : Policy
{
    void make_domain_manager(
	in CORBA::InterfaceDef object_type,
	in boolean constr_policy);
};

typedef sequence<DomainManager> DomainManagersList;

}; // End module CORBA

#endif
