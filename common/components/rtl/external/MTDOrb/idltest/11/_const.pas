// ***************************************************************************
//                                                                            
// Generated by the MTDORB IDL-to-Pascal Translator (1.0.1b1), 21.09.2010 13:26
//                                                                            
// Copyright (c) 2002 - 2004                                                  
// Millennium Group.                                                          
// Samara, Russia                                                             
//                                                                            
// All Rights Reserved                                                        
//                                                                            
// ***************************************************************************
// Compiled with parameters: " -i./ ./\_const.idl" 
//                                                                            
unit _const;

interface

uses
  Classes, orb_int, orb, req_int, code_int, env_int, stdstat, std_seq,imr, imr_int, 
  orbtypes, exceptions, except_int, _const_int, poa_int, poa;

type

  TA10_Short_array_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

  TA14_AnsiString_array_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

  {** IDL:foo:1.0 } 
  Tfoo = class(TORBObject,Ifoo)
  protected
    procedure ss_in(const s: Tfoo_ss); virtual; abstract;
    function ss_out: Tfoo_ss; virtual; abstract;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    class function _narrow(const obj : IORBObject): Ifoo;
    class function narrow_helper2(const obj: IORBObject): Boolean;
  end;

  {** stub for interface IDL:foo:1.0} 
  Tfoo_stub = class(Tfoo)
  protected
    procedure ss_in(const s: Tfoo_ss); override;
    function ss_out: Tfoo_ss; override;
  end;

  {** POA stub for interface IDL:foo:1.0} 
  Tfoo_stub_clp = class(TPOAStub,IPOAStub,Ifoo)
  protected
    procedure ss_in(const s: Tfoo_ss); virtual;
    function ss_out: Tfoo_ss; virtual;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  end;

  {** servant for interface IDL:foo:1.0} 
  Tfoo_serv = class(TPOAStaticImplementation,IPOAStaticImplementation,IServant,Ifoo)
  protected
    procedure ss_in(const s: Tfoo_ss); virtual; abstract;
    function ss_out: Tfoo_ss; virtual; abstract;
    function _primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID; override;
    function _make_stub(const poa: IPOA; const obj : IORBObject): IORBObject; override;
    function _is_a(const repoid: RepositoryID): Boolean; override;
    procedure invoke(const serv: IStaticServerRequest); override;
    function _dispatch(const req: IStaticServerRequest): Boolean;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    function _this(): Ifoo;
    class function _narrow(const srv : IServant): Ifoo;
  end;

  Tfoo_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

var
  A10_Short_array_marshaller : IStaticTypeInfo;
  A14_AnsiString_array_marshaller : IStaticTypeInfo;
  foo_marshaller : IStaticTypeInfo;
  _tc_A10_Short_array : ITypeCodeConst;
  _tc_A14_AnsiString_array : ITypeCodeConst;
  _tc_foo : ITypeCodeConst;

implementation

uses
  SysUtils, any, tcode, static, throw;

//***********************************************************
// TA10_Short_array_marshaller
//***********************************************************
type 
  A10_Short_array = array [0..9] of Short;
  PA10_Short_array = ^A10_Short_array;

function TA10_Short_array_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  i: integer;
begin
  result := false;
  for i := 0 to 9 do
    if not dec.get_Short(PA10_Short_array(addr)^[i]) then exit;
  result := true;
end;

procedure TA10_Short_array_marshaller.marshal(enc: IEncoder;const addr : Pointer);
var
  i: integer;
begin
  for i := 0 to 9 do
    enc.put_Short(PA10_Short_array(addr)^[i]);
end;

procedure TA10_Short_array_marshaller._free(var addr: Pointer);
begin
  freemem(addr,sizeof(A10_Short_array));
end;

procedure TA10_Short_array_marshaller._create(var addr: Pointer);
begin
  addr := allocmem(sizeOf(A10_Short_array));
end;

procedure TA10_Short_array_marshaller._assign(dst, src: Pointer);
begin
  PA10_Short_array(dst)^ := PA10_Short_array(src)^;
end;

function TA10_Short_array_marshaller.typecode: ITypeCode;
begin
  result := _tc_A10_Short_array.typecode;
end;

//***********************************************************
// TA14_AnsiString_array_marshaller
//***********************************************************
type 
  A14_AnsiString_array = array [0..13] of AnsiString;
  PA14_AnsiString_array = ^A14_AnsiString_array;

function TA14_AnsiString_array_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  i: integer;
begin
  result := false;
  for i := 0 to 13 do
    if not dec.get_string(PA14_AnsiString_array(addr)^[i]) then exit;
  result := true;
end;

procedure TA14_AnsiString_array_marshaller.marshal(enc: IEncoder;const addr : Pointer);
var
  i: integer;
begin
  for i := 0 to 13 do
    enc.put_string(PA14_AnsiString_array(addr)^[i]);
end;

procedure TA14_AnsiString_array_marshaller._free(var addr: Pointer);
var
  i: integer;
begin
  for i := 0 to 13 do 
    string(Pointer(longint(addr)+i*4)^) := '';
  freemem(addr,sizeof(A14_AnsiString_array));
end;

procedure TA14_AnsiString_array_marshaller._create(var addr: Pointer);
begin
  addr := allocmem(sizeOf(A14_AnsiString_array));
end;

procedure TA14_AnsiString_array_marshaller._assign(dst, src: Pointer);
begin
  PA14_AnsiString_array(dst)^ := PA14_AnsiString_array(src)^;
end;

function TA14_AnsiString_array_marshaller.typecode: ITypeCode;
begin
  result := _tc_A14_AnsiString_array.typecode;
end;

//***********************************************************
// Tfoo
//***********************************************************
function Tfoo.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:foo:1.0' then
    begin
      result := Pointer(self as Ifoo);
      exit;
    end;
end;

class function Tfoo._narrow(const obj : IORBObject): Ifoo;
var
  p: Pointer;
  stub: Tfoo_stub;
begin
  result := nil;
  if obj = nil then exit;
  p := obj.narrow_helper('IDL:foo:1.0');
  if p <> nil then
    result := Ifoo(p)
  else
    begin
      if narrow_helper2(obj) or obj._is_a_remote('IDL:foo:1.0') then
        begin
          stub := Tfoo_stub.Create();
          stub.assign(obj);
          result := stub;
        end;
    end;
end;

class function Tfoo.narrow_helper2(const obj: IORBObject): Boolean;
begin
  result := obj._repoid = 'IDL:foo:1.0'
end;

//***********************************************************
// Tfoo_stub
//***********************************************************
procedure Tfoo_stub.ss_in(const s: Tfoo_ss);
var
  req: IStaticRequest;
  _s: IStaticAny;
begin
  _s := StaticAny(A14_AnsiString_array_marshaller,@s);
  req := StaticRequest(self,'ss_in');
  req.add_in_arg(_s);
  req.invoke;
  dorb_static_throw(req);
end;

function Tfoo_stub.ss_out: Tfoo_ss;
var
  req: IStaticRequest;
  _result: IStaticAny;
begin
  _result := StaticAny(A14_AnsiString_array_marshaller, @result);
  req := StaticRequest(self,'ss_out');
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

//***********************************************************
// Tfoo_stub_clp
//***********************************************************
function Tfoo_stub_clp.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:foo:1.0' then
    begin
      result := Pointer(self as Ifoo);
      exit;
  end;
end;

procedure Tfoo_stub_clp.ss_in(const s: Tfoo_ss);
var
  _srv: IServant;
  srv: Ifoo;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := Tfoo_serv._narrow(_srv);
      if srv <> nil then
        srv.ss_in(s)
    end;
  _postinvoke();
end;

function Tfoo_stub_clp.ss_out: Tfoo_ss;
var
  _srv: IServant;
  srv: Ifoo;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := Tfoo_serv._narrow(_srv);
      if srv <> nil then
        result := srv.ss_out
    end;
  _postinvoke();
end;

//***********************************************************
// Tfoo_serv
//***********************************************************
function Tfoo_serv._this(): Ifoo;
var
  obj: IORBObject;
begin
  obj := this();
  result := Tfoo._narrow(obj);
end;

function Tfoo_serv._is_a(const repoid: RepositoryID): Boolean;
begin
  result := repoid = 'IDL:foo:1.0';
end;

function Tfoo_serv._primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID;
begin
  result := 'IDL:foo:1.0';
end;

function Tfoo_serv._make_stub(const poa: IPOA; const obj : IORBObject): IORBObject;
begin
  result := Tfoo_stub_clp.Create(poa,obj);
end;

procedure Tfoo_serv.invoke(const serv: IStaticServerRequest);
begin
  if not _dispatch(serv) then
    begin
      serv.set_exception(BAD_OPERATION.Create(0, COMPLETED_NO) as IORBException);
      serv.write_results();
    end;
end;

function Tfoo_serv.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:foo:1.0' then
    begin
      result := Pointer(Ifoo(self));
      exit;
    end;
end;

class function Tfoo_serv._narrow(const srv : IServant): Ifoo;
var
  p: Pointer;
begin
  result := nil;
  if srv = nil then exit;
  p := srv.narrow_helper('IDL:foo:1.0');
  if p <> nil then
    result := Ifoo(p)
end;

function Tfoo_serv._dispatch(const req: IStaticServerRequest): Boolean;
var
  ss_in_s: Tfoo_ss;
  ss_out_result: Tfoo_ss;
begin
  result := true;
  if req.op_name = 'ss_in' then
    begin
      req.add_in_arg(StaticAny(A14_AnsiString_array_marshaller,@ss_in_s) as IStaticAny);
      if not req.read_args() then  exit;
      ss_in(ss_in_s);
      req.write_results();
      exit;
    end
  else if req.op_name = 'ss_out' then
    begin
      req.set_result(StaticAny(A14_AnsiString_array_marshaller,@ss_out_result) as IStaticAny);
      if not req.read_args() then  exit;
      ss_out_result := ss_out;
      req.write_results();
      exit;
    end;
  result := false;
end;

//***********************************************************
// Tfoo_marshaller
//***********************************************************
function Tfoo_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  obj: IORBObject;
begin
  result := false;
  if not stat_Object.demarshal(dec,@obj) then exit;
  Ifoo(addr^) := Tfoo._narrow(obj);
  result := (obj = nil) or (Pointer(addr^) <> nil);
end;

procedure Tfoo_marshaller.marshal(enc: IEncoder;const addr : Pointer);
var
  obj: IORBObject;
begin
  obj := Ifoo(addr^) as IORBObject;
  stat_Object.marshal(enc,@Pointer(obj));
end;

procedure Tfoo_marshaller._free(var addr: Pointer);
begin
  Ifoo(addr^) := nil;
end;

procedure Tfoo_marshaller._create(var addr: Pointer);
begin
  Ifoo(addr^) := Tfoo_stub.Create();
end;

procedure Tfoo_marshaller._assign(dst, src: Pointer);
begin
  Ifoo(dst^) := Ifoo(src^);
end;

function Tfoo_marshaller.typecode: ITypeCode;
begin
  result := _tc_foo.typecode;
end;

initialization
  A10_Short_array_marshaller := TA10_Short_array_marshaller.Create();
  A14_AnsiString_array_marshaller := TA14_AnsiString_array_marshaller.Create();
  foo_marshaller := Tfoo_marshaller.Create();
  _tc_A10_Short_array := CreateTypeCodeConst('01000000140000000c00000001000000020000000a000000');
  _tc_A14_AnsiString_array := CreateTypeCodeConst('0100000014000000100000000100000012000000000000000e000000');
  _tc_foo := CreateTypeCodeConst('010000000e0000001c000000010000000c00000049444c3a666f6f3a312e300004000000666f6f00');
end.
