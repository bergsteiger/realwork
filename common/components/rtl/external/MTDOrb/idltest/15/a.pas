// ***************************************************************************
//                                                                            
// Generated by the MTDORB IDL-to-Pascal Translator (1.0.1b1), 21.09.2010 13:26
//                                                                            
// Copyright (c) 2002 - 2004                                                  
// Millennium Group.                                                          
// Samara, Russia                                                             
//                                                                            
// All Rights Reserved                                                        
//                                                                            
// ***************************************************************************
// Compiled with parameters: " -i./ ./\a.idl" 
//                                                                            
unit a;

interface

uses
  Classes, orb_int, orb, req_int, code_int, env_int, stdstat, std_seq,imr, imr_int, 
  orbtypes, exceptions, except_int, a_int, b_int, b, poa_int, poa;

type

  TA_S_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

  A_S_seq = Array of TA_S;
  PA_S_seq = ^A_S_seq;

  TA_S_seq_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

  {** IDL:A/foo:1.0 } 
  TA_foo = class(TORBObject,IA_foo)
  protected
    procedure bar(const x: TA_BSSeq); virtual; abstract;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    class function _narrow(const obj : IORBObject): IA_foo;
    class function narrow_helper2(const obj: IORBObject): Boolean;
  end;

  {** stub for interface IDL:A/foo:1.0} 
  TA_foo_stub = class(TA_foo)
  protected
    procedure bar(const x: TA_BSSeq); override;
  end;

  {** POA stub for interface IDL:A/foo:1.0} 
  TA_foo_stub_clp = class(TPOAStub,IPOAStub,IA_foo)
  protected
    procedure bar(const x: TA_BSSeq); virtual;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  end;

  {** servant for interface IDL:A/foo:1.0} 
  TA_foo_serv = class(TPOAStaticImplementation,IPOAStaticImplementation,IServant,IA_foo)
  protected
    procedure bar(const x: TA_BSSeq); virtual; abstract;
    function _primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID; override;
    function _make_stub(const poa: IPOA; const obj : IORBObject): IORBObject; override;
    function _is_a(const repoid: RepositoryID): Boolean; override;
    procedure invoke(const serv: IStaticServerRequest); override;
    function _dispatch(const req: IStaticServerRequest): Boolean;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    function _this(): IA_foo;
    class function _narrow(const srv : IServant): IA_foo;
  end;

  TA_foo_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

var
  A_S_marshaller : IStaticTypeInfo;
  A_S_seq_marshaller : IStaticTypeInfo;
  A_foo_marshaller : IStaticTypeInfo;
  _tc_A_S : ITypeCodeConst;
  _tc_A_S_seq : ITypeCodeConst;
  _tc_A_foo : ITypeCodeConst;

implementation

uses
  SysUtils, any, tcode, static, throw;

//***********************************************************
// TA_S_marshaller
//***********************************************************
function TA_S_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  struct: a_int.TA_S;
begin
  result := false;
  if not stat_boolean.demarshal(dec,@struct.b) then exit;
  a_int.TA_S(addr^) := struct;
  result := true;
end;

procedure TA_S_marshaller.marshal(enc: IEncoder;const addr : Pointer);
var
  struct: a_int.TA_S;
begin
  struct := a_int.TA_S(addr^);
  stat_boolean.marshal(enc,@struct.b);
end;

procedure TA_S_marshaller._free(var addr: Pointer);
begin
{$HINTS OFF}
  System.Finalize(a_int.TA_S(addr^));
{$HINTS ON}
  FreeMem(addr);
end;

procedure TA_S_marshaller._create(var addr: Pointer);
begin
  addr := AllocMem(sizeOf(a_int.TA_S));
{$HINTS OFF}
  System.Initialize(a_int.TA_S(addr^));
{$HINTS ON}
end;

procedure TA_S_marshaller._assign(dst, src: Pointer);
begin
  a_int.TA_S(dst^) := a_int.TA_S(src^);
end;

function TA_S_marshaller.typecode: ITypeCode;
begin
  result := _tc_A_S.typecode;
end;

//***********************************************************
// TA_S_seq_marshaller
//***********************************************************

function TA_S_seq_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  len: _ulong;
  i: integer;
  val: TA_S;
begin
  result := false;
  if not dec.seq_begin(len) then exit;
  SetLength(A_S_seq(addr^),len);
  if len <> 0 then
    for i := 0 to Pred(len) do
      begin
        if not A_S_marshaller.demarshal(dec,@val) then exit;
        A_S_seq(addr^)[i] := val; 
      end;
  if not dec.seq_end() then exit;
  result := true;
end;

procedure TA_S_seq_marshaller.marshal(enc: IEncoder;const addr : Pointer);
var
  len: _ulong;
  i: integer;
begin
  len := Length(A_S_seq(addr^));
  enc.seq_begin(len);
  if len <> 0 then
    for i := 0 to Pred(len) do
      A_S_marshaller.marshal(enc,@A_S_seq(addr^)[i]);
  enc.seq_end;
end;

procedure TA_S_seq_marshaller._free(var addr: Pointer);
begin
  setLength(A_S_seq(addr^),0);
  freemem(addr);
end;

procedure TA_S_seq_marshaller._create(var addr: Pointer);
begin
  addr := allocmem(sizeOf(_ulong));
end;

procedure TA_S_seq_marshaller._assign(dst, src: Pointer);
begin
  _ulong(dst^) := _ulong(src^);
end;

function TA_S_seq_marshaller.typecode: ITypeCode;
begin
  result := _tc_A_S_seq.typecode;
end;

//***********************************************************
// TA_foo
//***********************************************************
function TA_foo.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:A/foo:1.0' then
    begin
      result := Pointer(self as IA_foo);
      exit;
    end;
end;

class function TA_foo._narrow(const obj : IORBObject): IA_foo;
var
  p: Pointer;
  stub: TA_foo_stub;
begin
  result := nil;
  if obj = nil then exit;
  p := obj.narrow_helper('IDL:A/foo:1.0');
  if p <> nil then
    result := IA_foo(p)
  else
    begin
      if narrow_helper2(obj) or obj._is_a_remote('IDL:A/foo:1.0') then
        begin
          stub := TA_foo_stub.Create();
          stub.assign(obj);
          result := stub;
        end;
    end;
end;

class function TA_foo.narrow_helper2(const obj: IORBObject): Boolean;
begin
  result := obj._repoid = 'IDL:A/foo:1.0'
end;

//***********************************************************
// TA_foo_stub
//***********************************************************
procedure TA_foo_stub.bar(const x: TA_BSSeq);
var
  req: IStaticRequest;
  _x: IStaticAny;
begin
  _x := StaticAny(B_S_seq_marshaller,@x);
  req := StaticRequest(self,'bar');
  req.add_in_arg(_x);
  req.invoke;
  dorb_static_throw(req);
end;

//***********************************************************
// TA_foo_stub_clp
//***********************************************************
function TA_foo_stub_clp.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:A/foo:1.0' then
    begin
      result := Pointer(self as IA_foo);
      exit;
  end;
end;

procedure TA_foo_stub_clp.bar(const x: TA_BSSeq);
var
  _srv: IServant;
  srv: IA_foo;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TA_foo_serv._narrow(_srv);
      if srv <> nil then
        srv.bar(x)
    end;
  _postinvoke();
end;

//***********************************************************
// TA_foo_serv
//***********************************************************
function TA_foo_serv._this(): IA_foo;
var
  obj: IORBObject;
begin
  obj := this();
  result := TA_foo._narrow(obj);
end;

function TA_foo_serv._is_a(const repoid: RepositoryID): Boolean;
begin
  result := repoid = 'IDL:A/foo:1.0';
end;

function TA_foo_serv._primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID;
begin
  result := 'IDL:A/foo:1.0';
end;

function TA_foo_serv._make_stub(const poa: IPOA; const obj : IORBObject): IORBObject;
begin
  result := TA_foo_stub_clp.Create(poa,obj);
end;

procedure TA_foo_serv.invoke(const serv: IStaticServerRequest);
begin
  if not _dispatch(serv) then
    begin
      serv.set_exception(BAD_OPERATION.Create(0, COMPLETED_NO) as IORBException);
      serv.write_results();
    end;
end;

function TA_foo_serv.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:A/foo:1.0' then
    begin
      result := Pointer(IA_foo(self));
      exit;
    end;
end;

class function TA_foo_serv._narrow(const srv : IServant): IA_foo;
var
  p: Pointer;
begin
  result := nil;
  if srv = nil then exit;
  p := srv.narrow_helper('IDL:A/foo:1.0');
  if p <> nil then
    result := IA_foo(p)
end;

function TA_foo_serv._dispatch(const req: IStaticServerRequest): Boolean;
var
  bar_x: TA_BSSeq;
begin
  result := true;
  if req.op_name = 'bar' then
    begin
      req.add_in_arg(StaticAny(B_S_seq_marshaller,@bar_x) as IStaticAny);
      if not req.read_args() then  exit;
      bar(bar_x);
      req.write_results();
      exit;
    end;
  result := false;
end;

//***********************************************************
// TA_foo_marshaller
//***********************************************************
function TA_foo_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  obj: IORBObject;
begin
  result := false;
  if not stat_Object.demarshal(dec,@obj) then exit;
  IA_foo(addr^) := TA_foo._narrow(obj);
  result := (obj = nil) or (Pointer(addr^) <> nil);
end;

procedure TA_foo_marshaller.marshal(enc: IEncoder;const addr : Pointer);
var
  obj: IORBObject;
begin
  obj := IA_foo(addr^) as IORBObject;
  stat_Object.marshal(enc,@Pointer(obj));
end;

procedure TA_foo_marshaller._free(var addr: Pointer);
begin
  IA_foo(addr^) := nil;
end;

procedure TA_foo_marshaller._create(var addr: Pointer);
begin
  IA_foo(addr^) := TA_foo_stub.Create();
end;

procedure TA_foo_marshaller._assign(dst, src: Pointer);
begin
  IA_foo(dst^) := IA_foo(src^);
end;

function TA_foo_marshaller.typecode: ITypeCode;
begin
  result := _tc_A_foo.typecode;
end;

initialization
  A_S_marshaller := TA_S_marshaller.Create();
  A_S_seq_marshaller := TA_S_seq_marshaller.Create();
  A_foo_marshaller := TA_foo_marshaller.Create();
  _tc_A_S := CreateTypeCodeConst('010000000f0000002c000000010000000c00000049444c3a412f533a312e3000020000005300000001000000020000006200000008000000');
  _tc_A_S_seq := CreateTypeCodeConst('01000000130000003c000000010000000f0000002c000000010000000c00000049444c3a412f533a312e30000200000053000000010000'+
    '0002000000620000000800000000000000');
  _tc_A_foo := CreateTypeCodeConst('010000000e00000020000000010000000e00000049444c3a412f666f6f3a312e3000000004000000666f6f00');
end.
