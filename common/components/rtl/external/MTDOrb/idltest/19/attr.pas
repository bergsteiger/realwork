// ***************************************************************************
//                                                                            
// Generated by the MTDORB IDL-to-Pascal Translator (1.0.1b1), 21.09.2010 13:26
//                                                                            
// Copyright (c) 2002 - 2004                                                  
// Millennium Group.                                                          
// Samara, Russia                                                             
//                                                                            
// All Rights Reserved                                                        
//                                                                            
// ***************************************************************************
// Compiled with parameters: " -i./ ./\attr.idl" 
//                                                                            
unit attr;

interface

uses
  Classes, orb_int, orb, req_int, code_int, env_int, stdstat, std_seq,imr, imr_int, 
  orbtypes, exceptions, except_int, attr_int, poa_int, poa;

type

  Tinf1_ex1_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

  {** IDL:inf1/ex1:1.0 } 
  Tinf1_ex1 = class(UserException,Iinf1_ex1)
  protected
    procedure throw; override;
    function clone(): IORBException; override;
    function repoid(): RepositoryID; override;
    procedure encode(const enc: IEncoder); override;
    procedure encode_any(const a: IAny); override;
  public
    constructor Create(ex: Tinf1_ex1); overload;
    constructor Create(); overload;
  end;

  Tinf1_ex2_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

  {** IDL:inf1/ex2:1.0 } 
  Tinf1_ex2 = class(UserException,Iinf1_ex2)
  protected
    procedure throw; override;
    function clone(): IORBException; override;
    function repoid(): RepositoryID; override;
    procedure encode(const enc: IEncoder); override;
    procedure encode_any(const a: IAny); override;
  public
    constructor Create(ex: Tinf1_ex2); overload;
    constructor Create(); overload;
  end;

  {** IDL:inf1:1.0 } 
  Tinf1 = class(TORBObject,Iinf1)
  protected
    function _get_attr1: long; virtual; abstract;
    procedure _set_attr2(const val: long); virtual; abstract;
    function _get_attr2: long; virtual; abstract;
    function _get_attr3: long; virtual; abstract;
    procedure _set_attr4(const val: long); virtual; abstract;
    function _get_attr4: long; virtual; abstract;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    class function _narrow(const obj : IORBObject): Iinf1;
    class function narrow_helper2(const obj: IORBObject): Boolean;
  end;

  {** stub for interface IDL:inf1:1.0} 
  Tinf1_stub = class(Tinf1)
  protected
    function _get_attr1: long; override;
    procedure _set_attr2(const val: long); override;
    function _get_attr2: long; override;
    function _get_attr3: long; override;
    procedure _set_attr4(const val: long); override;
    function _get_attr4: long; override;
  end;

  {** POA stub for interface IDL:inf1:1.0} 
  Tinf1_stub_clp = class(TPOAStub,IPOAStub,Iinf1)
  protected
    function _get_attr1: long; virtual;
    procedure _set_attr2(const val: long); virtual;
    function _get_attr2: long; virtual;
    function _get_attr3: long; virtual;
    procedure _set_attr4(const val: long); virtual;
    function _get_attr4: long; virtual;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  end;

  {** servant for interface IDL:inf1:1.0} 
  Tinf1_serv = class(TPOAStaticImplementation,IPOAStaticImplementation,IServant,Iinf1)
  protected
    function _get_attr1: long; virtual; abstract;
    procedure _set_attr2(const val: long); virtual; abstract;
    function _get_attr2: long; virtual; abstract;
    function _get_attr3: long; virtual; abstract;
    procedure _set_attr4(const val: long); virtual; abstract;
    function _get_attr4: long; virtual; abstract;
    function _primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID; override;
    function _make_stub(const poa: IPOA; const obj : IORBObject): IORBObject; override;
    function _is_a(const repoid: RepositoryID): Boolean; override;
    procedure invoke(const serv: IStaticServerRequest); override;
    function _dispatch(const req: IStaticServerRequest): Boolean;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    function _this(): Iinf1;
    class function _narrow(const srv : IServant): Iinf1;
  end;

  Tinf1_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

var
  inf1_ex1_marshaller : IStaticTypeInfo;
  inf1_ex2_marshaller : IStaticTypeInfo;
  inf1_marshaller : IStaticTypeInfo;
  _tc_inf1_ex1 : ITypeCodeConst;
  _tc_inf1_ex2 : ITypeCodeConst;
  _tc_inf1 : ITypeCodeConst;

implementation

uses
  SysUtils, any, tcode, static, throw;

//***********************************************************
// Tinf1_ex1_marshaller
//***********************************************************
function Tinf1_ex1_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  repoid: RepositoryId;
begin
  result := false;
  if not dec.except_begin(repoid) then exit;
  if not dec.except_end then exit;
  result := true;
end;

procedure Tinf1_ex1_marshaller.marshal(enc: IEncoder;const addr : Pointer);
begin
  enc.except_begin('IDL:inf1/ex1:1.0');
  enc.except_end;
end;

procedure Tinf1_ex1_marshaller._free(var addr: Pointer);
begin
  Iinf1_ex1(addr^) := nil;
end;

procedure Tinf1_ex1_marshaller._create(var addr: Pointer);
begin
  Iinf1_ex1(addr^) := Tinf1_ex1.Create();
end;

procedure Tinf1_ex1_marshaller._assign(dst, src: Pointer);
begin
  Iinf1_ex1(dst^) := Iinf1_ex1(src^);
end;

function Tinf1_ex1_marshaller.typecode: ITypeCode;
begin
  result := _tc_inf1_ex1.typecode;
end;

//***********************************************************
// Tinf1_ex1
//***********************************************************
constructor Tinf1_ex1.Create(ex: Tinf1_ex1);
begin
  inherited Create();
end;

procedure Tinf1_ex1.throw;
begin
  raise Tinf1_ex1.Create(self);
end;

function Tinf1_ex1.clone(): IORBException;
begin
  result := Tinf1_ex1.Create(self);
end;

procedure Tinf1_ex1.encode(const enc: IEncoder);
var
  int : Iinf1_ex1;
begin
  int := self;
  inf1_ex1_marshaller.marshal(enc,@int);
end;

procedure Tinf1_ex1.encode_any(const a: IAny);
var
  stat: IStaticAny;
begin
  stat := StaticAny(inf1_ex1_marshaller, Self);
  a.from_static_any(stat);
end;

constructor Tinf1_ex1.Create();
begin
  inherited Create();
end;

function Tinf1_ex1.repoid(): RepositoryID;
begin
  result := 'IDL:inf1/ex1:1.0';
end;

//***********************************************************
// Tinf1_ex2_marshaller
//***********************************************************
function Tinf1_ex2_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  repoid: RepositoryId;
begin
  result := false;
  if not dec.except_begin(repoid) then exit;
  if not dec.except_end then exit;
  result := true;
end;

procedure Tinf1_ex2_marshaller.marshal(enc: IEncoder;const addr : Pointer);
begin
  enc.except_begin('IDL:inf1/ex2:1.0');
  enc.except_end;
end;

procedure Tinf1_ex2_marshaller._free(var addr: Pointer);
begin
  Iinf1_ex2(addr^) := nil;
end;

procedure Tinf1_ex2_marshaller._create(var addr: Pointer);
begin
  Iinf1_ex2(addr^) := Tinf1_ex2.Create();
end;

procedure Tinf1_ex2_marshaller._assign(dst, src: Pointer);
begin
  Iinf1_ex2(dst^) := Iinf1_ex2(src^);
end;

function Tinf1_ex2_marshaller.typecode: ITypeCode;
begin
  result := _tc_inf1_ex2.typecode;
end;

//***********************************************************
// Tinf1_ex2
//***********************************************************
constructor Tinf1_ex2.Create(ex: Tinf1_ex2);
begin
  inherited Create();
end;

procedure Tinf1_ex2.throw;
begin
  raise Tinf1_ex2.Create(self);
end;

function Tinf1_ex2.clone(): IORBException;
begin
  result := Tinf1_ex2.Create(self);
end;

procedure Tinf1_ex2.encode(const enc: IEncoder);
var
  int : Iinf1_ex2;
begin
  int := self;
  inf1_ex2_marshaller.marshal(enc,@int);
end;

procedure Tinf1_ex2.encode_any(const a: IAny);
var
  stat: IStaticAny;
begin
  stat := StaticAny(inf1_ex2_marshaller, Self);
  a.from_static_any(stat);
end;

constructor Tinf1_ex2.Create();
begin
  inherited Create();
end;

function Tinf1_ex2.repoid(): RepositoryID;
begin
  result := 'IDL:inf1/ex2:1.0';
end;

//***********************************************************
// Tinf1
//***********************************************************
function Tinf1.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:inf1:1.0' then
    begin
      result := Pointer(self as Iinf1);
      exit;
    end;
end;

class function Tinf1._narrow(const obj : IORBObject): Iinf1;
var
  p: Pointer;
  stub: Tinf1_stub;
begin
  result := nil;
  if obj = nil then exit;
  p := obj.narrow_helper('IDL:inf1:1.0');
  if p <> nil then
    result := Iinf1(p)
  else
    begin
      if narrow_helper2(obj) or obj._is_a_remote('IDL:inf1:1.0') then
        begin
          stub := Tinf1_stub.Create();
          stub.assign(obj);
          result := stub;
        end;
    end;
end;

class function Tinf1.narrow_helper2(const obj: IORBObject): Boolean;
begin
  result := obj._repoid = 'IDL:inf1:1.0'
end;

//***********************************************************
// Tinf1_stub
//***********************************************************
function Tinf1_stub._get_attr1: long;
var
  req: IStaticRequest;
  _result: IStaticAny;
begin
  _result := StaticAny(stat_long, @result);
  req := StaticRequest(self,'_get_attr1');
  req.set_result(_result);
  req.set_exceptions_tc([_tc_inf1_ex1.typecode]);
  req.invoke;
  dorb_static_throw(req,[inf1_ex1_marshaller, 'IDL:inf1/ex1:1.0']);
end;

procedure Tinf1_stub._set_attr2(const val: long);
var
  req: IStaticRequest;
  _val: IStaticAny;
begin
  _val := StaticAny(stat_long,@val);
  req := StaticRequest(self,'_set_attr2');
  req.add_in_arg(_val);
  req.set_exceptions_tc([_tc_inf1_ex2.typecode]);
  req.invoke;
  dorb_static_throw(req,[inf1_ex2_marshaller, 'IDL:inf1/ex2:1.0']);
end;

function Tinf1_stub._get_attr2: long;
var
  req: IStaticRequest;
  _result: IStaticAny;
begin
  _result := StaticAny(stat_long, @result);
  req := StaticRequest(self,'_get_attr2');
  req.set_result(_result);
  req.set_exceptions_tc([_tc_inf1_ex1.typecode]);
  req.invoke;
  dorb_static_throw(req,[inf1_ex1_marshaller, 'IDL:inf1/ex1:1.0']);
end;

function Tinf1_stub._get_attr3: long;
var
  req: IStaticRequest;
  _result: IStaticAny;
begin
  _result := StaticAny(stat_long, @result);
  req := StaticRequest(self,'_get_attr3');
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

procedure Tinf1_stub._set_attr4(const val: long);
var
  req: IStaticRequest;
  _val: IStaticAny;
begin
  _val := StaticAny(stat_long,@val);
  req := StaticRequest(self,'_set_attr4');
  req.add_in_arg(_val);
  req.invoke;
  dorb_static_throw(req);
end;

function Tinf1_stub._get_attr4: long;
var
  req: IStaticRequest;
  _result: IStaticAny;
begin
  _result := StaticAny(stat_long, @result);
  req := StaticRequest(self,'_get_attr4');
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

//***********************************************************
// Tinf1_stub_clp
//***********************************************************
function Tinf1_stub_clp.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:inf1:1.0' then
    begin
      result := Pointer(self as Iinf1);
      exit;
  end;
end;

function Tinf1_stub_clp._get_attr1: long;
var
  _srv: IServant;
  srv: Iinf1;
begin
  result := 0;
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := Tinf1_serv._narrow(_srv);
      if srv <> nil then
        result := srv._get_attr1
    end;
  _postinvoke();
end;

procedure Tinf1_stub_clp._set_attr2(const val: long);
var
  _srv: IServant;
  srv: Iinf1;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := Tinf1_serv._narrow(_srv);
      if srv <> nil then
        srv._set_attr2(val);
    end;
  _postinvoke();
end;

function Tinf1_stub_clp._get_attr2: long;
var
  _srv: IServant;
  srv: Iinf1;
begin
  result := 0;
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := Tinf1_serv._narrow(_srv);
      if srv <> nil then
        result := srv._get_attr2
    end;
  _postinvoke();
end;

function Tinf1_stub_clp._get_attr3: long;
var
  _srv: IServant;
  srv: Iinf1;
begin
  result := 0;
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := Tinf1_serv._narrow(_srv);
      if srv <> nil then
        result := srv._get_attr3
    end;
  _postinvoke();
end;

procedure Tinf1_stub_clp._set_attr4(const val: long);
var
  _srv: IServant;
  srv: Iinf1;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := Tinf1_serv._narrow(_srv);
      if srv <> nil then
        srv._set_attr4(val);
    end;
  _postinvoke();
end;

function Tinf1_stub_clp._get_attr4: long;
var
  _srv: IServant;
  srv: Iinf1;
begin
  result := 0;
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := Tinf1_serv._narrow(_srv);
      if srv <> nil then
        result := srv._get_attr4
    end;
  _postinvoke();
end;

//***********************************************************
// Tinf1_serv
//***********************************************************
function Tinf1_serv._this(): Iinf1;
var
  obj: IORBObject;
begin
  obj := this();
  result := Tinf1._narrow(obj);
end;

function Tinf1_serv._is_a(const repoid: RepositoryID): Boolean;
begin
  result := repoid = 'IDL:inf1:1.0';
end;

function Tinf1_serv._primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID;
begin
  result := 'IDL:inf1:1.0';
end;

function Tinf1_serv._make_stub(const poa: IPOA; const obj : IORBObject): IORBObject;
begin
  result := Tinf1_stub_clp.Create(poa,obj);
end;

procedure Tinf1_serv.invoke(const serv: IStaticServerRequest);
begin
  if not _dispatch(serv) then
    begin
      serv.set_exception(BAD_OPERATION.Create(0, COMPLETED_NO) as IORBException);
      serv.write_results();
    end;
end;

function Tinf1_serv.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:inf1:1.0' then
    begin
      result := Pointer(Iinf1(self));
      exit;
    end;
end;

class function Tinf1_serv._narrow(const srv : IServant): Iinf1;
var
  p: Pointer;
begin
  result := nil;
  if srv = nil then exit;
  p := srv.narrow_helper('IDL:inf1:1.0');
  if p <> nil then
    result := Iinf1(p)
end;

function Tinf1_serv._dispatch(const req: IStaticServerRequest): Boolean;
var
  attr1_get_value: long;
  attr2_get_value: long;
  attr2_set_value: long;
  attr3_get_value: long;
  attr4_get_value: long;
  attr4_set_value: long;
begin
  result := true;
  if req.op_name = '_get_attr1' then
    begin
      req.set_result(StaticAny(stat_long,@attr1_get_value) as IStaticAny);
      if not req.read_args() then  exit;
      req.set_exceptions_tc([_tc_inf1_ex1.typecode]);
      try
        attr1_get_value := _get_attr1;
      except
        on ex1: Tinf1_ex1 do
          req.set_exception(Tinf1_ex1.Create(ex1) as IORBException);
      end;
      req.write_results();
      exit;
    end
  else if req.op_name = '_get_attr2' then
    begin
      req.set_result(StaticAny(stat_long,@attr2_get_value) as IStaticAny);
      if not req.read_args() then  exit;
      req.set_exceptions_tc([_tc_inf1_ex1.typecode]);
      try
        attr2_get_value := _get_attr2;
      except
        on ex1: Tinf1_ex1 do
          req.set_exception(Tinf1_ex1.Create(ex1) as IORBException);
      end;
      req.write_results();
      exit;
    end
  else if req.op_name = '_set_attr2' then
    begin
      req.add_in_arg(StaticAny(stat_long,@attr2_set_value) as IStaticAny);
      if not req.read_args() then  exit;
      req.set_exceptions_tc([_tc_inf1_ex2.typecode]);
      try
        _set_attr2(attr2_set_value);
      except
        on ex2: Tinf1_ex2 do
          req.set_exception(Tinf1_ex2.Create(ex2) as IORBException);
      end;
      req.write_results();
      exit;
    end
  else if req.op_name = '_get_attr3' then
    begin
      req.set_result(StaticAny(stat_long,@attr3_get_value) as IStaticAny);
      if not req.read_args() then  exit;
      attr3_get_value := _get_attr3;
      req.write_results();
      exit;
    end
  else if req.op_name = '_get_attr4' then
    begin
      req.set_result(StaticAny(stat_long,@attr4_get_value) as IStaticAny);
      if not req.read_args() then  exit;
      attr4_get_value := _get_attr4;
      req.write_results();
      exit;
    end
  else if req.op_name = '_set_attr4' then
    begin
      req.add_in_arg(StaticAny(stat_long,@attr4_set_value) as IStaticAny);
      if not req.read_args() then  exit;
      _set_attr4(attr4_set_value);
      req.write_results();
      exit;
    end;
  result := false;
end;

//***********************************************************
// Tinf1_marshaller
//***********************************************************
function Tinf1_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  obj: IORBObject;
begin
  result := false;
  if not stat_Object.demarshal(dec,@obj) then exit;
  Iinf1(addr^) := Tinf1._narrow(obj);
  result := (obj = nil) or (Pointer(addr^) <> nil);
end;

procedure Tinf1_marshaller.marshal(enc: IEncoder;const addr : Pointer);
var
  obj: IORBObject;
begin
  obj := Iinf1(addr^) as IORBObject;
  stat_Object.marshal(enc,@Pointer(obj));
end;

procedure Tinf1_marshaller._free(var addr: Pointer);
begin
  Iinf1(addr^) := nil;
end;

procedure Tinf1_marshaller._create(var addr: Pointer);
begin
  Iinf1(addr^) := Tinf1_stub.Create();
end;

procedure Tinf1_marshaller._assign(dst, src: Pointer);
begin
  Iinf1(dst^) := Iinf1(src^);
end;

function Tinf1_marshaller.typecode: ITypeCode;
begin
  result := _tc_inf1.typecode;
end;

initialization
  inf1_ex1_marshaller := Tinf1_ex1_marshaller.Create();
  inf1_ex2_marshaller := Tinf1_ex2_marshaller.Create();
  inf1_marshaller := Tinf1_marshaller.Create();
  _tc_inf1_ex1 := CreateTypeCodeConst('010000001600000028000000010000001100000049444c3a696e66312f6578313a312e3000000000040000006578310000000000');
  _tc_inf1_ex2 := CreateTypeCodeConst('010000001600000028000000010000001100000049444c3a696e66312f6578323a312e3000000000040000006578320000000000');
  _tc_inf1 := CreateTypeCodeConst('010000000e00000021000000010000000d00000049444c3a696e66313a312e300000000005000000696e663100');
end.
