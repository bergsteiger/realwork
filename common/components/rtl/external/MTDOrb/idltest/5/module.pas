// ***************************************************************************
//                                                                            
// Generated by the MTDORB IDL-to-Pascal Translator (1.0.1b1), 21.09.2010 13:26
//                                                                            
// Copyright (c) 2002 - 2004                                                  
// Millennium Group.                                                          
// Samara, Russia                                                             
//                                                                            
// All Rights Reserved                                                        
//                                                                            
// ***************************************************************************
// Compiled with parameters: " -i./ ./\module.idl" 
//                                                                            
unit module;

interface

uses
  Classes, orb_int, orb, req_int, code_int, env_int, stdstat, std_seq,imr, imr_int, 
  orbtypes, exceptions, except_int, module_int, poa_int, poa;

type

  TM_foo_E_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

  {** IDL:M/foo:1.0 } 
  TM_foo = class(TORBObject,IM_foo)
  protected
    procedure bar(const e: TM_foo_E); virtual; abstract;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    class function _narrow(const obj : IORBObject): IM_foo;
    class function narrow_helper2(const obj: IORBObject): Boolean;
  end;

  {** stub for interface IDL:M/foo:1.0} 
  TM_foo_stub = class(TM_foo)
  protected
    procedure bar(const e: TM_foo_E); override;
  end;

  {** POA stub for interface IDL:M/foo:1.0} 
  TM_foo_stub_clp = class(TPOAStub,IPOAStub,IM_foo)
  protected
    procedure bar(const e: TM_foo_E); virtual;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  end;

  {** servant for interface IDL:M/foo:1.0} 
  TM_foo_serv = class(TPOAStaticImplementation,IPOAStaticImplementation,IServant,IM_foo)
  protected
    procedure bar(const e: TM_foo_E); virtual; abstract;
    function _primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID; override;
    function _make_stub(const poa: IPOA; const obj : IORBObject): IORBObject; override;
    function _is_a(const repoid: RepositoryID): Boolean; override;
    procedure invoke(const serv: IStaticServerRequest); override;
    function _dispatch(const req: IStaticServerRequest): Boolean;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    function _this(): IM_foo;
    class function _narrow(const srv : IServant): IM_foo;
  end;

  TM_foo_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

  {** IDL:M2/foo:1.0 } 
  TM2_foo = class(TORBObject,IM2_foo)
  protected
    procedure bar(const e: TM_foo_E); virtual; abstract;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    class function _narrow(const obj : IORBObject): IM2_foo;
    class function narrow_helper2(const obj: IORBObject): Boolean;
  end;

  {** stub for interface IDL:M2/foo:1.0} 
  TM2_foo_stub = class(TM2_foo)
  protected
    procedure bar(const e: TM_foo_E); override;
  end;

  {** POA stub for interface IDL:M2/foo:1.0} 
  TM2_foo_stub_clp = class(TPOAStub,IPOAStub,IM2_foo)
  protected
    procedure bar(const e: TM_foo_E); virtual;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  end;

  {** servant for interface IDL:M2/foo:1.0} 
  TM2_foo_serv = class(TPOAStaticImplementation,IPOAStaticImplementation,IServant,IM2_foo)
  protected
    procedure bar(const e: TM_foo_E); virtual; abstract;
    function _primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID; override;
    function _make_stub(const poa: IPOA; const obj : IORBObject): IORBObject; override;
    function _is_a(const repoid: RepositoryID): Boolean; override;
    procedure invoke(const serv: IStaticServerRequest); override;
    function _dispatch(const req: IStaticServerRequest): Boolean;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    function _this(): IM2_foo;
    class function _narrow(const srv : IServant): IM2_foo;
  end;

  TM2_foo_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

var
  M_foo_E_marshaller : IStaticTypeInfo;
  M_foo_marshaller : IStaticTypeInfo;
  M2_foo_marshaller : IStaticTypeInfo;
  _tc_M_foo_E : ITypeCodeConst;
  _tc_M_foo : ITypeCodeConst;
  _tc_M2_foo : ITypeCodeConst;

implementation

uses
  SysUtils, any, tcode, static, throw;

//***********************************************************
// TM_foo_E_marshaller
//***********************************************************
function TM_foo_E_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
begin
  result := dec.get_ulong(_ulong(addr^));
end;

procedure TM_foo_E_marshaller.marshal(enc: IEncoder;const addr : Pointer);
begin
  enc.put_ulong(_ulong(addr^));
end;

procedure TM_foo_E_marshaller._free(var addr: Pointer);
begin
  freemem(addr);
end;

procedure TM_foo_E_marshaller._create(var addr: Pointer);
begin
  addr := allocmem(sizeOf(_ulong));
end;

procedure TM_foo_E_marshaller._assign(dst, src: Pointer);
begin
  TM_foo_E(dst^) := TM_foo_E(src^);
end;

function TM_foo_E_marshaller.typecode: ITypeCode;
begin
  result := _tc_M_foo_E.typecode;
end;

//***********************************************************
// TM_foo
//***********************************************************
function TM_foo.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:M/foo:1.0' then
    begin
      result := Pointer(self as IM_foo);
      exit;
    end;
end;

class function TM_foo._narrow(const obj : IORBObject): IM_foo;
var
  p: Pointer;
  stub: TM_foo_stub;
begin
  result := nil;
  if obj = nil then exit;
  p := obj.narrow_helper('IDL:M/foo:1.0');
  if p <> nil then
    result := IM_foo(p)
  else
    begin
      if narrow_helper2(obj) or obj._is_a_remote('IDL:M/foo:1.0') then
        begin
          stub := TM_foo_stub.Create();
          stub.assign(obj);
          result := stub;
        end;
    end;
end;

class function TM_foo.narrow_helper2(const obj: IORBObject): Boolean;
begin
  result := obj._repoid = 'IDL:M/foo:1.0'
end;

//***********************************************************
// TM_foo_stub
//***********************************************************
procedure TM_foo_stub.bar(const e: TM_foo_E);
var
  req: IStaticRequest;
  _e: IStaticAny;
begin
  _e := StaticAny(M_foo_E_marshaller,@e);
  req := StaticRequest(self,'bar');
  req.add_in_arg(_e);
  req.invoke;
  dorb_static_throw(req);
end;

//***********************************************************
// TM_foo_stub_clp
//***********************************************************
function TM_foo_stub_clp.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:M/foo:1.0' then
    begin
      result := Pointer(self as IM_foo);
      exit;
  end;
end;

procedure TM_foo_stub_clp.bar(const e: TM_foo_E);
var
  _srv: IServant;
  srv: IM_foo;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TM_foo_serv._narrow(_srv);
      if srv <> nil then
        srv.bar(e)
    end;
  _postinvoke();
end;

//***********************************************************
// TM_foo_serv
//***********************************************************
function TM_foo_serv._this(): IM_foo;
var
  obj: IORBObject;
begin
  obj := this();
  result := TM_foo._narrow(obj);
end;

function TM_foo_serv._is_a(const repoid: RepositoryID): Boolean;
begin
  result := repoid = 'IDL:M/foo:1.0';
end;

function TM_foo_serv._primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID;
begin
  result := 'IDL:M/foo:1.0';
end;

function TM_foo_serv._make_stub(const poa: IPOA; const obj : IORBObject): IORBObject;
begin
  result := TM_foo_stub_clp.Create(poa,obj);
end;

procedure TM_foo_serv.invoke(const serv: IStaticServerRequest);
begin
  if not _dispatch(serv) then
    begin
      serv.set_exception(BAD_OPERATION.Create(0, COMPLETED_NO) as IORBException);
      serv.write_results();
    end;
end;

function TM_foo_serv.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:M/foo:1.0' then
    begin
      result := Pointer(IM_foo(self));
      exit;
    end;
end;

class function TM_foo_serv._narrow(const srv : IServant): IM_foo;
var
  p: Pointer;
begin
  result := nil;
  if srv = nil then exit;
  p := srv.narrow_helper('IDL:M/foo:1.0');
  if p <> nil then
    result := IM_foo(p)
end;

function TM_foo_serv._dispatch(const req: IStaticServerRequest): Boolean;
var
  bar_e: TM_foo_E;
begin
  result := true;
  if req.op_name = 'bar' then
    begin
      req.add_in_arg(StaticAny(M_foo_E_marshaller,@bar_e) as IStaticAny);
      if not req.read_args() then  exit;
      bar(bar_e);
      req.write_results();
      exit;
    end;
  result := false;
end;

//***********************************************************
// TM_foo_marshaller
//***********************************************************
function TM_foo_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  obj: IORBObject;
begin
  result := false;
  if not stat_Object.demarshal(dec,@obj) then exit;
  IM_foo(addr^) := TM_foo._narrow(obj);
  result := (obj = nil) or (Pointer(addr^) <> nil);
end;

procedure TM_foo_marshaller.marshal(enc: IEncoder;const addr : Pointer);
var
  obj: IORBObject;
begin
  obj := IM_foo(addr^) as IORBObject;
  stat_Object.marshal(enc,@Pointer(obj));
end;

procedure TM_foo_marshaller._free(var addr: Pointer);
begin
  IM_foo(addr^) := nil;
end;

procedure TM_foo_marshaller._create(var addr: Pointer);
begin
  IM_foo(addr^) := TM_foo_stub.Create();
end;

procedure TM_foo_marshaller._assign(dst, src: Pointer);
begin
  IM_foo(dst^) := IM_foo(src^);
end;

function TM_foo_marshaller.typecode: ITypeCode;
begin
  result := _tc_M_foo.typecode;
end;

//***********************************************************
// TM2_foo
//***********************************************************
function TM2_foo.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:M2/foo:1.0' then
    begin
      result := Pointer(self as IM2_foo);
      exit;
    end;
end;

class function TM2_foo._narrow(const obj : IORBObject): IM2_foo;
var
  p: Pointer;
  stub: TM2_foo_stub;
begin
  result := nil;
  if obj = nil then exit;
  p := obj.narrow_helper('IDL:M2/foo:1.0');
  if p <> nil then
    result := IM2_foo(p)
  else
    begin
      if narrow_helper2(obj) or obj._is_a_remote('IDL:M2/foo:1.0') then
        begin
          stub := TM2_foo_stub.Create();
          stub.assign(obj);
          result := stub;
        end;
    end;
end;

class function TM2_foo.narrow_helper2(const obj: IORBObject): Boolean;
begin
  result := obj._repoid = 'IDL:M2/foo:1.0'
end;

//***********************************************************
// TM2_foo_stub
//***********************************************************
procedure TM2_foo_stub.bar(const e: TM_foo_E);
var
  req: IStaticRequest;
  _e: IStaticAny;
begin
  _e := StaticAny(M_foo_E_marshaller,@e);
  req := StaticRequest(self,'bar');
  req.add_in_arg(_e);
  req.invoke;
  dorb_static_throw(req);
end;

//***********************************************************
// TM2_foo_stub_clp
//***********************************************************
function TM2_foo_stub_clp.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:M2/foo:1.0' then
    begin
      result := Pointer(self as IM2_foo);
      exit;
  end;
end;

procedure TM2_foo_stub_clp.bar(const e: TM_foo_E);
var
  _srv: IServant;
  srv: IM2_foo;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TM2_foo_serv._narrow(_srv);
      if srv <> nil then
        srv.bar(e)
    end;
  _postinvoke();
end;

//***********************************************************
// TM2_foo_serv
//***********************************************************
function TM2_foo_serv._this(): IM2_foo;
var
  obj: IORBObject;
begin
  obj := this();
  result := TM2_foo._narrow(obj);
end;

function TM2_foo_serv._is_a(const repoid: RepositoryID): Boolean;
begin
  result := repoid = 'IDL:M2/foo:1.0';
end;

function TM2_foo_serv._primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID;
begin
  result := 'IDL:M2/foo:1.0';
end;

function TM2_foo_serv._make_stub(const poa: IPOA; const obj : IORBObject): IORBObject;
begin
  result := TM2_foo_stub_clp.Create(poa,obj);
end;

procedure TM2_foo_serv.invoke(const serv: IStaticServerRequest);
begin
  if not _dispatch(serv) then
    begin
      serv.set_exception(BAD_OPERATION.Create(0, COMPLETED_NO) as IORBException);
      serv.write_results();
    end;
end;

function TM2_foo_serv.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:M2/foo:1.0' then
    begin
      result := Pointer(IM2_foo(self));
      exit;
    end;
end;

class function TM2_foo_serv._narrow(const srv : IServant): IM2_foo;
var
  p: Pointer;
begin
  result := nil;
  if srv = nil then exit;
  p := srv.narrow_helper('IDL:M2/foo:1.0');
  if p <> nil then
    result := IM2_foo(p)
end;

function TM2_foo_serv._dispatch(const req: IStaticServerRequest): Boolean;
var
  bar_e: TM_foo_E;
begin
  result := true;
  if req.op_name = 'bar' then
    begin
      req.add_in_arg(StaticAny(M_foo_E_marshaller,@bar_e) as IStaticAny);
      if not req.read_args() then  exit;
      bar(bar_e);
      req.write_results();
      exit;
    end;
  result := false;
end;

//***********************************************************
// TM2_foo_marshaller
//***********************************************************
function TM2_foo_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  obj: IORBObject;
begin
  result := false;
  if not stat_Object.demarshal(dec,@obj) then exit;
  IM2_foo(addr^) := TM2_foo._narrow(obj);
  result := (obj = nil) or (Pointer(addr^) <> nil);
end;

procedure TM2_foo_marshaller.marshal(enc: IEncoder;const addr : Pointer);
var
  obj: IORBObject;
begin
  obj := IM2_foo(addr^) as IORBObject;
  stat_Object.marshal(enc,@Pointer(obj));
end;

procedure TM2_foo_marshaller._free(var addr: Pointer);
begin
  IM2_foo(addr^) := nil;
end;

procedure TM2_foo_marshaller._create(var addr: Pointer);
begin
  IM2_foo(addr^) := TM2_foo_stub.Create();
end;

procedure TM2_foo_marshaller._assign(dst, src: Pointer);
begin
  IM2_foo(dst^) := IM2_foo(src^);
end;

function TM2_foo_marshaller.typecode: ITypeCode;
begin
  result := _tc_M2_foo.typecode;
end;

initialization
  M_foo_E_marshaller := TM_foo_E_marshaller.Create();
  M_foo_marshaller := TM_foo_marshaller.Create();
  M2_foo_marshaller := TM2_foo_marshaller.Create();
  _tc_M_foo_E := CreateTypeCodeConst('01000000110000003a000000010000001000000049444c3a4d2f666f6f2f453a312e300002000000450000000300000002000000410000'+
    '000200000042000000020000004300');
  _tc_M_foo := CreateTypeCodeConst('010000000e00000020000000010000000e00000049444c3a4d2f666f6f3a312e3000000004000000666f6f00');
  _tc_M2_foo := CreateTypeCodeConst('010000000e00000020000000010000000f00000049444c3a4d322f666f6f3a312e30000004000000666f6f00');
end.
