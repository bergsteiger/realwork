// ***************************************************************************
//                                                                            
// Generated by the MTDORB IDL-to-Pascal Translator (1.0.1b1), 21.09.2010 13:26
//                                                                            
// Copyright (c) 2002 - 2004                                                  
// Millennium Group.                                                          
// Samara, Russia                                                             
//                                                                            
// All Rights Reserved                                                        
//                                                                            
// ***************************************************************************
// Compiled with parameters: " -i./ ./\sequence.idl" 
//                                                                            
unit sequence;

interface

uses
  Classes, orb_int, orb, req_int, code_int, env_int, stdstat, std_seq,imr, imr_int, 
  orbtypes, exceptions, except_int, sequence_int, poa_int, poa;

type

  TS_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

  S_seq = Array of TS;
  PS_seq = ^S_seq;

  TS_seq_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

  B10_AnsiChar_seq = Array [0..9] of AnsiChar;
  PB10_AnsiChar_seq = ^B10_AnsiChar_seq;

  TB10_AnsiChar_seq_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

  TS2_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

  {** IDL:foo:1.0 } 
  Tfoo = class(TORBObject,Ifoo)
  protected
    function bar(const s1: TS; var s2: TS; out s3: TS): TS; virtual; abstract;
    function bar2(const s1: TSSeq; var s2: TSSeq; out s3: TSSeq): TSSeq; virtual; abstract;
    procedure bar3(const s: TStringSeq); virtual; abstract;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    class function _narrow(const obj : IORBObject): Ifoo;
    class function narrow_helper2(const obj: IORBObject): Boolean;
  end;

  {** stub for interface IDL:foo:1.0} 
  Tfoo_stub = class(Tfoo)
  protected
    function bar(const s1: TS; var s2: TS; out s3: TS): TS; override;
    function bar2(const s1: TSSeq; var s2: TSSeq; out s3: TSSeq): TSSeq; override;
    procedure bar3(const s: TStringSeq); override;
  end;

  {** POA stub for interface IDL:foo:1.0} 
  Tfoo_stub_clp = class(TPOAStub,IPOAStub,Ifoo)
  protected
    function bar(const s1: TS; var s2: TS; out s3: TS): TS; virtual;
    function bar2(const s1: TSSeq; var s2: TSSeq; out s3: TSSeq): TSSeq; virtual;
    procedure bar3(const s: TStringSeq); virtual;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  end;

  {** servant for interface IDL:foo:1.0} 
  Tfoo_serv = class(TPOAStaticImplementation,IPOAStaticImplementation,IServant,Ifoo)
  protected
    function bar(const s1: TS; var s2: TS; out s3: TS): TS; virtual; abstract;
    function bar2(const s1: TSSeq; var s2: TSSeq; out s3: TSSeq): TSSeq; virtual; abstract;
    procedure bar3(const s: TStringSeq); virtual; abstract;
    function _primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID; override;
    function _make_stub(const poa: IPOA; const obj : IORBObject): IORBObject; override;
    function _is_a(const repoid: RepositoryID): Boolean; override;
    procedure invoke(const serv: IStaticServerRequest); override;
    function _dispatch(const req: IStaticServerRequest): Boolean;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    function _this(): Ifoo;
    class function _narrow(const srv : IServant): Ifoo;
  end;

  Tfoo_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

var
  S_marshaller : IStaticTypeInfo;
  S_seq_marshaller : IStaticTypeInfo;
  B10_AnsiChar_seq_marshaller : IStaticTypeInfo;
  S2_marshaller : IStaticTypeInfo;
  foo_marshaller : IStaticTypeInfo;
  _tc_S : ITypeCodeConst;
  _tc_S_seq : ITypeCodeConst;
  _tc_B10_AnsiChar_seq : ITypeCodeConst;
  _tc_S2 : ITypeCodeConst;
  _tc_foo : ITypeCodeConst;

implementation

uses
  SysUtils, any, tcode, static, throw;

//***********************************************************
// TS_marshaller
//***********************************************************
function TS_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  struct: sequence_int.TS;
begin
  result := false;
  if not stat_long.demarshal(dec,@struct.x) then exit;
  if not stat_seq_long.demarshal(dec,@struct.seq) then exit;
  sequence_int.TS(addr^) := struct;
  result := true;
end;

procedure TS_marshaller.marshal(enc: IEncoder;const addr : Pointer);
var
  struct: sequence_int.TS;
begin
  struct := sequence_int.TS(addr^);
  stat_long.marshal(enc,@struct.x);
  stat_seq_long.marshal(enc,@struct.seq);
end;

procedure TS_marshaller._free(var addr: Pointer);
begin
{$HINTS OFF}
  System.Finalize(sequence_int.TS(addr^));
{$HINTS ON}
  FreeMem(addr);
end;

procedure TS_marshaller._create(var addr: Pointer);
begin
  addr := AllocMem(sizeOf(sequence_int.TS));
{$HINTS OFF}
  System.Initialize(sequence_int.TS(addr^));
{$HINTS ON}
end;

procedure TS_marshaller._assign(dst, src: Pointer);
begin
  sequence_int.TS(dst^) := sequence_int.TS(src^);
end;

function TS_marshaller.typecode: ITypeCode;
begin
  result := _tc_S.typecode;
end;

//***********************************************************
// TS_seq_marshaller
//***********************************************************

function TS_seq_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  len: _ulong;
  i: integer;
  val: TS;
begin
  result := false;
  if not dec.seq_begin(len) then exit;
  SetLength(S_seq(addr^),len);
  if len <> 0 then
    for i := 0 to Pred(len) do
      begin
        if not S_marshaller.demarshal(dec,@val) then exit;
        S_seq(addr^)[i] := val; 
      end;
  if not dec.seq_end() then exit;
  result := true;
end;

procedure TS_seq_marshaller.marshal(enc: IEncoder;const addr : Pointer);
var
  len: _ulong;
  i: integer;
begin
  len := Length(S_seq(addr^));
  enc.seq_begin(len);
  if len <> 0 then
    for i := 0 to Pred(len) do
      S_marshaller.marshal(enc,@S_seq(addr^)[i]);
  enc.seq_end;
end;

procedure TS_seq_marshaller._free(var addr: Pointer);
begin
  setLength(S_seq(addr^),0);
  freemem(addr);
end;

procedure TS_seq_marshaller._create(var addr: Pointer);
begin
  addr := allocmem(sizeOf(_ulong));
end;

procedure TS_seq_marshaller._assign(dst, src: Pointer);
begin
  _ulong(dst^) := _ulong(src^);
end;

function TS_seq_marshaller.typecode: ITypeCode;
begin
  result := _tc_S_seq.typecode;
end;

//***********************************************************
// TB10_AnsiChar_seq_marshaller
//***********************************************************

function TB10_AnsiChar_seq_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  len: _ulong;
  i: integer;
  val: AnsiChar;
begin
  result := false;
  if not dec.seq_begin(len) then exit;
  for i := 0 to 9 do
    begin
      if not stat_char.demarshal(dec,@val) then exit;
      B10_AnsiChar_seq(addr^)[i] := val; 
    end;
  if not dec.seq_end() then exit;
  result := true;
end;

procedure TB10_AnsiChar_seq_marshaller.marshal(enc: IEncoder;const addr : Pointer);
var
  i: integer;
begin
  enc.seq_begin(10);
  for i := 0 to 9 do
    stat_char.marshal(enc,@B10_AnsiChar_seq(addr^)[i]);
  enc.seq_end;
end;

procedure TB10_AnsiChar_seq_marshaller._free(var addr: Pointer);
begin
  freemem(addr,sizeof(B10_AnsiChar_seq));
end;

procedure TB10_AnsiChar_seq_marshaller._create(var addr: Pointer);
begin
  addr := allocmem(sizeOf(B10_AnsiChar_seq));
end;

procedure TB10_AnsiChar_seq_marshaller._assign(dst, src: Pointer);
begin
  _ulong(dst^) := _ulong(src^);
end;

function TB10_AnsiChar_seq_marshaller.typecode: ITypeCode;
begin
  result := _tc_B10_AnsiChar_seq.typecode;
end;

//***********************************************************
// TS2_marshaller
//***********************************************************
function TS2_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  struct: sequence_int.TS2;
begin
  result := false;
  if not B10_AnsiChar_seq_marshaller.demarshal(dec,@struct.seq) then exit;
  sequence_int.TS2(addr^) := struct;
  result := true;
end;

procedure TS2_marshaller.marshal(enc: IEncoder;const addr : Pointer);
var
  struct: sequence_int.TS2;
begin
  struct := sequence_int.TS2(addr^);
  B10_AnsiChar_seq_marshaller.marshal(enc,@struct.seq);
end;

procedure TS2_marshaller._free(var addr: Pointer);
begin
{$HINTS OFF}
  System.Finalize(sequence_int.TS2(addr^));
{$HINTS ON}
  FreeMem(addr);
end;

procedure TS2_marshaller._create(var addr: Pointer);
begin
  addr := AllocMem(sizeOf(sequence_int.TS2));
{$HINTS OFF}
  System.Initialize(sequence_int.TS2(addr^));
{$HINTS ON}
end;

procedure TS2_marshaller._assign(dst, src: Pointer);
begin
  sequence_int.TS2(dst^) := sequence_int.TS2(src^);
end;

function TS2_marshaller.typecode: ITypeCode;
begin
  result := _tc_S2.typecode;
end;

//***********************************************************
// Tfoo
//***********************************************************
function Tfoo.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:foo:1.0' then
    begin
      result := Pointer(self as Ifoo);
      exit;
    end;
end;

class function Tfoo._narrow(const obj : IORBObject): Ifoo;
var
  p: Pointer;
  stub: Tfoo_stub;
begin
  result := nil;
  if obj = nil then exit;
  p := obj.narrow_helper('IDL:foo:1.0');
  if p <> nil then
    result := Ifoo(p)
  else
    begin
      if narrow_helper2(obj) or obj._is_a_remote('IDL:foo:1.0') then
        begin
          stub := Tfoo_stub.Create();
          stub.assign(obj);
          result := stub;
        end;
    end;
end;

class function Tfoo.narrow_helper2(const obj: IORBObject): Boolean;
begin
  result := obj._repoid = 'IDL:foo:1.0'
end;

//***********************************************************
// Tfoo_stub
//***********************************************************
function Tfoo_stub.bar(const s1: TS; var s2: TS; out s3: TS): TS;
var
  req: IStaticRequest;
  _s1: IStaticAny;
  _s2: IStaticAny;
  _s3: IStaticAny;
  _result: IStaticAny;
begin
  _s1 := StaticAny(S_marshaller,@s1);
  _s2 := StaticAny(S_marshaller,@s2);
  _s3 := StaticAny(S_marshaller,@s3);
  _result := StaticAny(S_marshaller, @result);
  req := StaticRequest(self,'bar');
  req.add_in_arg(_s1);
  req.add_inout_arg(_s2);
  req.add_out_arg(_s3);
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

function Tfoo_stub.bar2(const s1: TSSeq; var s2: TSSeq; out s3: TSSeq): TSSeq;
var
  req: IStaticRequest;
  _s1: IStaticAny;
  _s2: IStaticAny;
  _s3: IStaticAny;
  _result: IStaticAny;
begin
  _s1 := StaticAny(S_seq_marshaller,@s1);
  _s2 := StaticAny(S_seq_marshaller,@s2);
  _s3 := StaticAny(S_seq_marshaller,@s3);
  _result := StaticAny(S_seq_marshaller, @result);
  req := StaticRequest(self,'bar2');
  req.add_in_arg(_s1);
  req.add_inout_arg(_s2);
  req.add_out_arg(_s3);
  req.set_result(_result);
  req.invoke;
  dorb_static_throw(req);
end;

procedure Tfoo_stub.bar3(const s: TStringSeq);
var
  req: IStaticRequest;
  _s: IStaticAny;
begin
  _s := StaticAny(stat_seq_string,@s);
  req := StaticRequest(self,'bar3');
  req.add_in_arg(_s);
  req.invoke;
  dorb_static_throw(req);
end;

//***********************************************************
// Tfoo_stub_clp
//***********************************************************
function Tfoo_stub_clp.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:foo:1.0' then
    begin
      result := Pointer(self as Ifoo);
      exit;
  end;
end;

function Tfoo_stub_clp.bar(const s1: TS; var s2: TS; out s3: TS): TS;
var
  _srv: IServant;
  srv: Ifoo;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := Tfoo_serv._narrow(_srv);
      if srv <> nil then
        result := srv.bar(s1, s2, s3)
    end;
  _postinvoke();
end;

function Tfoo_stub_clp.bar2(const s1: TSSeq; var s2: TSSeq; out s3: TSSeq): TSSeq;
var
  _srv: IServant;
  srv: Ifoo;
begin
  result := nil;
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := Tfoo_serv._narrow(_srv);
      if srv <> nil then
        result := srv.bar2(s1, s2, s3)
    end;
  _postinvoke();
end;

procedure Tfoo_stub_clp.bar3(const s: TStringSeq);
var
  _srv: IServant;
  srv: Ifoo;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := Tfoo_serv._narrow(_srv);
      if srv <> nil then
        srv.bar3(s)
    end;
  _postinvoke();
end;

//***********************************************************
// Tfoo_serv
//***********************************************************
function Tfoo_serv._this(): Ifoo;
var
  obj: IORBObject;
begin
  obj := this();
  result := Tfoo._narrow(obj);
end;

function Tfoo_serv._is_a(const repoid: RepositoryID): Boolean;
begin
  result := repoid = 'IDL:foo:1.0';
end;

function Tfoo_serv._primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID;
begin
  result := 'IDL:foo:1.0';
end;

function Tfoo_serv._make_stub(const poa: IPOA; const obj : IORBObject): IORBObject;
begin
  result := Tfoo_stub_clp.Create(poa,obj);
end;

procedure Tfoo_serv.invoke(const serv: IStaticServerRequest);
begin
  if not _dispatch(serv) then
    begin
      serv.set_exception(BAD_OPERATION.Create(0, COMPLETED_NO) as IORBException);
      serv.write_results();
    end;
end;

function Tfoo_serv.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:foo:1.0' then
    begin
      result := Pointer(Ifoo(self));
      exit;
    end;
end;

class function Tfoo_serv._narrow(const srv : IServant): Ifoo;
var
  p: Pointer;
begin
  result := nil;
  if srv = nil then exit;
  p := srv.narrow_helper('IDL:foo:1.0');
  if p <> nil then
    result := Ifoo(p)
end;

function Tfoo_serv._dispatch(const req: IStaticServerRequest): Boolean;
var
  bar_result: TS;
  bar_s1: TS;
  bar_s2: TS;
  bar_s3: TS;
  bar2_result: TSSeq;
  bar2_s1: TSSeq;
  bar2_s2: TSSeq;
  bar2_s3: TSSeq;
  bar3_s: TStringSeq;
begin
  result := true;
  if req.op_name = 'bar' then
    begin
      req.add_in_arg(StaticAny(S_marshaller,@bar_s1) as IStaticAny);
      req.add_inout_arg(StaticAny(S_marshaller,@bar_s2) as IStaticAny);
      req.add_out_arg(StaticAny(S_marshaller,@bar_s3) as IStaticAny);
      req.set_result(StaticAny(S_marshaller,@bar_result) as IStaticAny);
      if not req.read_args() then  exit;
      bar_result := bar(bar_s1, bar_s2, bar_s3);
      req.write_results();
      exit;
    end
  else if req.op_name = 'bar2' then
    begin
      req.add_in_arg(StaticAny(S_seq_marshaller,@bar2_s1) as IStaticAny);
      req.add_inout_arg(StaticAny(S_seq_marshaller,@bar2_s2) as IStaticAny);
      req.add_out_arg(StaticAny(S_seq_marshaller,@bar2_s3) as IStaticAny);
      req.set_result(StaticAny(S_seq_marshaller,@bar2_result) as IStaticAny);
      if not req.read_args() then  exit;
      bar2_result := bar2(bar2_s1, bar2_s2, bar2_s3);
      req.write_results();
      exit;
    end
  else if req.op_name = 'bar3' then
    begin
      req.add_in_arg(StaticAny(stat_seq_string,@bar3_s) as IStaticAny);
      if not req.read_args() then  exit;
      bar3(bar3_s);
      req.write_results();
      exit;
    end;
  result := false;
end;

//***********************************************************
// Tfoo_marshaller
//***********************************************************
function Tfoo_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  obj: IORBObject;
begin
  result := false;
  if not stat_Object.demarshal(dec,@obj) then exit;
  Ifoo(addr^) := Tfoo._narrow(obj);
  result := (obj = nil) or (Pointer(addr^) <> nil);
end;

procedure Tfoo_marshaller.marshal(enc: IEncoder;const addr : Pointer);
var
  obj: IORBObject;
begin
  obj := Ifoo(addr^) as IORBObject;
  stat_Object.marshal(enc,@Pointer(obj));
end;

procedure Tfoo_marshaller._free(var addr: Pointer);
begin
  Ifoo(addr^) := nil;
end;

procedure Tfoo_marshaller._create(var addr: Pointer);
begin
  Ifoo(addr^) := Tfoo_stub.Create();
end;

procedure Tfoo_marshaller._assign(dst, src: Pointer);
begin
  Ifoo(dst^) := Ifoo(src^);
end;

function Tfoo_marshaller.typecode: ITypeCode;
begin
  result := _tc_foo.typecode;
end;

initialization
  S_marshaller := TS_marshaller.Create();
  S_seq_marshaller := TS_seq_marshaller.Create();
  B10_AnsiChar_seq_marshaller := TB10_AnsiChar_seq_marshaller.Create();
  S2_marshaller := TS2_marshaller.Create();
  foo_marshaller := Tfoo_marshaller.Create();
  _tc_S := CreateTypeCodeConst('010000000f00000048000000010000000a00000049444c3a533a312e300000000200000053000000020000000200000078000000030000'+
    '000400000073657100130000000c000000010000000300000000000000');
  _tc_S_seq := CreateTypeCodeConst('010000001300000058000000010000000f00000048000000010000000a00000049444c3a533a312e300000000200000053000000020000'+
    '000200000078000000030000000400000073657100130000000c00000001000000030000000000000000000000');
  _tc_B10_AnsiChar_seq := CreateTypeCodeConst('01000000130000000c00000001000000090000000a000000');
  _tc_S2 := CreateTypeCodeConst('010000000f0000003c000000010000000b00000049444c3a53323a312e3000000300000053320000010000000400000073657100130000'+
    '000c00000001000000090000000a000000');
  _tc_foo := CreateTypeCodeConst('010000000e0000001c000000010000000c00000049444c3a666f6f3a312e300004000000666f6f00');
end.
