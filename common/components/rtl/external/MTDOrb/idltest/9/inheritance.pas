// ***************************************************************************
//                                                                            
// Generated by the MTDORB IDL-to-Pascal Translator (1.0.1b1), 21.09.2010 13:26
//                                                                            
// Copyright (c) 2002 - 2004                                                  
// Millennium Group.                                                          
// Samara, Russia                                                             
//                                                                            
// All Rights Reserved                                                        
//                                                                            
// ***************************************************************************
// Compiled with parameters: " -i./ ./\inheritance.idl" 
//                                                                            
unit inheritance;

interface

uses
  Classes, orb_int, orb, req_int, code_int, env_int, stdstat, std_seq,imr, imr_int, 
  orbtypes, exceptions, except_int, inheritance_int, poa_int, poa;

type

  {** IDL:Base:1.0 } 
  TBase = class(TORBObject,IBase)
  protected
    procedure op1; virtual; abstract;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    class function _narrow(const obj : IORBObject): IBase;
    class function narrow_helper2(const obj: IORBObject): Boolean;
  end;

  {** stub for interface IDL:Base:1.0} 
  TBase_stub = class(TBase)
  protected
    procedure op1; override;
  end;

  {** POA stub for interface IDL:Base:1.0} 
  TBase_stub_clp = class(TPOAStub,IPOAStub,IBase)
  protected
    procedure op1; virtual;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  end;

  {** servant for interface IDL:Base:1.0} 
  TBase_serv = class(TPOAStaticImplementation,IPOAStaticImplementation,IServant,IBase)
  protected
    procedure op1; virtual; abstract;
    function _primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID; override;
    function _make_stub(const poa: IPOA; const obj : IORBObject): IORBObject; override;
    function _is_a(const repoid: RepositoryID): Boolean; override;
    procedure invoke(const serv: IStaticServerRequest); override;
    function _dispatch(const req: IStaticServerRequest): Boolean;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    function _this(): IBase;
    class function _narrow(const srv : IServant): IBase;
  end;

  TBase_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

  {** IDL:Derived:1.0 } 
  TDerived = class(TBase,IDerived)
  protected
    procedure op2; virtual; abstract;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    class function _narrow(const obj : IORBObject): IDerived;
    class function narrow_helper2(const obj: IORBObject): Boolean;
  end;

  {** stub for interface IDL:Derived:1.0} 
  TDerived_stub = class(TDerived)
  protected
    procedure op1; override;
    procedure op2; override;
  end;

  {** POA stub for interface IDL:Derived:1.0} 
  TDerived_stub_clp = class(TBase_stub_clp,IDerived)
  protected
    procedure op2; virtual;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  end;

  {** servant for interface IDL:Derived:1.0} 
  TDerived_serv = class(TBase_serv,IDerived)
  protected
    procedure op2; virtual; abstract;
    function _primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID; override;
    function _make_stub(const poa: IPOA; const obj : IORBObject): IORBObject; override;
    function _is_a(const repoid: RepositoryID): Boolean; override;
    procedure invoke(const serv: IStaticServerRequest); override;
    function _dispatch(const req: IStaticServerRequest): Boolean;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    function _this(): IDerived;
    class function _narrow(const srv : IServant): IDerived;
  end;

  TDerived_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

  {** IDL:Final:1.0 } 
  TFinal = class(TDerived,IFinal)
  protected
    procedure op3; virtual; abstract;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    class function _narrow(const obj : IORBObject): IFinal;
    class function narrow_helper2(const obj: IORBObject): Boolean;
  end;

  {** stub for interface IDL:Final:1.0} 
  TFinal_stub = class(TFinal)
  protected
    procedure op2; override;
    procedure op1; override;
    procedure op3; override;
  end;

  {** POA stub for interface IDL:Final:1.0} 
  TFinal_stub_clp = class(TDerived_stub_clp,IFinal)
  protected
    procedure op3; virtual;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  end;

  {** servant for interface IDL:Final:1.0} 
  TFinal_serv = class(TDerived_serv,IFinal)
  protected
    procedure op3; virtual; abstract;
    function _primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID; override;
    function _make_stub(const poa: IPOA; const obj : IORBObject): IORBObject; override;
    function _is_a(const repoid: RepositoryID): Boolean; override;
    procedure invoke(const serv: IStaticServerRequest); override;
    function _dispatch(const req: IStaticServerRequest): Boolean;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    function _this(): IFinal;
    class function _narrow(const srv : IServant): IFinal;
  end;

  TFinal_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

var
  Base_marshaller : IStaticTypeInfo;
  Derived_marshaller : IStaticTypeInfo;
  Final_marshaller : IStaticTypeInfo;
  _tc_Base : ITypeCodeConst;
  _tc_Derived : ITypeCodeConst;
  _tc_Final : ITypeCodeConst;

implementation

uses
  SysUtils, any, tcode, static, throw;

//***********************************************************
// TBase
//***********************************************************
function TBase.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:Base:1.0' then
    begin
      result := Pointer(self as IBase);
      exit;
    end;
end;

class function TBase._narrow(const obj : IORBObject): IBase;
var
  p: Pointer;
  stub: TBase_stub;
begin
  result := nil;
  if obj = nil then exit;
  p := obj.narrow_helper('IDL:Base:1.0');
  if p <> nil then
    result := IBase(p)
  else
    begin
      if narrow_helper2(obj) or obj._is_a_remote('IDL:Base:1.0') then
        begin
          stub := TBase_stub.Create();
          stub.assign(obj);
          result := stub;
        end;
    end;
end;

class function TBase.narrow_helper2(const obj: IORBObject): Boolean;
begin
  result := obj._repoid = 'IDL:Base:1.0'
end;

//***********************************************************
// TBase_stub
//***********************************************************
procedure TBase_stub.op1;
var
  req: IStaticRequest;
begin
  req := StaticRequest(self,'op1');
  req.invoke;
  dorb_static_throw(req);
end;

//***********************************************************
// TBase_stub_clp
//***********************************************************
function TBase_stub_clp.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:Base:1.0' then
    begin
      result := Pointer(self as IBase);
      exit;
  end;
end;

procedure TBase_stub_clp.op1;
var
  _srv: IServant;
  srv: IBase;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TBase_serv._narrow(_srv);
      if srv <> nil then
        srv.op1
    end;
  _postinvoke();
end;

//***********************************************************
// TBase_serv
//***********************************************************
function TBase_serv._this(): IBase;
var
  obj: IORBObject;
begin
  obj := this();
  result := TBase._narrow(obj);
end;

function TBase_serv._is_a(const repoid: RepositoryID): Boolean;
begin
  result := repoid = 'IDL:Base:1.0';
end;

function TBase_serv._primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID;
begin
  result := 'IDL:Base:1.0';
end;

function TBase_serv._make_stub(const poa: IPOA; const obj : IORBObject): IORBObject;
begin
  result := TBase_stub_clp.Create(poa,obj);
end;

procedure TBase_serv.invoke(const serv: IStaticServerRequest);
begin
  if not _dispatch(serv) then
    begin
      serv.set_exception(BAD_OPERATION.Create(0, COMPLETED_NO) as IORBException);
      serv.write_results();
    end;
end;

function TBase_serv.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:Base:1.0' then
    begin
      result := Pointer(IBase(self));
      exit;
    end;
end;

class function TBase_serv._narrow(const srv : IServant): IBase;
var
  p: Pointer;
begin
  result := nil;
  if srv = nil then exit;
  p := srv.narrow_helper('IDL:Base:1.0');
  if p <> nil then
    result := IBase(p)
end;

function TBase_serv._dispatch(const req: IStaticServerRequest): Boolean;
begin
  result := true;
  if req.op_name = 'op1' then
    begin
      if not req.read_args() then  exit;
      op1;
      req.write_results();
      exit;
    end;
  result := false;
end;

//***********************************************************
// TBase_marshaller
//***********************************************************
function TBase_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  obj: IORBObject;
begin
  result := false;
  if not stat_Object.demarshal(dec,@obj) then exit;
  IBase(addr^) := TBase._narrow(obj);
  result := (obj = nil) or (Pointer(addr^) <> nil);
end;

procedure TBase_marshaller.marshal(enc: IEncoder;const addr : Pointer);
var
  obj: IORBObject;
begin
  obj := IBase(addr^) as IORBObject;
  stat_Object.marshal(enc,@Pointer(obj));
end;

procedure TBase_marshaller._free(var addr: Pointer);
begin
  IBase(addr^) := nil;
end;

procedure TBase_marshaller._create(var addr: Pointer);
begin
  IBase(addr^) := TBase_stub.Create();
end;

procedure TBase_marshaller._assign(dst, src: Pointer);
begin
  IBase(dst^) := IBase(src^);
end;

function TBase_marshaller.typecode: ITypeCode;
begin
  result := _tc_Base.typecode;
end;

//***********************************************************
// TDerived
//***********************************************************
function TDerived.narrow_helper(const str: RepositoryID): Pointer;
begin
  if str = 'IDL:Derived:1.0' then
    begin
      result := Pointer(self as IDerived);
      exit;
    end;
  result := inherited narrow_helper(str);
end;

class function TDerived._narrow(const obj : IORBObject): IDerived;
var
  p: Pointer;
  stub: TDerived_stub;
begin
  result := nil;
  if obj = nil then exit;
  p := obj.narrow_helper('IDL:Derived:1.0');
  if p <> nil then
    result := IDerived(p)
  else
    begin
      if narrow_helper2(obj) or obj._is_a_remote('IDL:Derived:1.0') then
        begin
          stub := TDerived_stub.Create();
          stub.assign(obj);
          result := stub;
        end;
    end;
end;

class function TDerived.narrow_helper2(const obj: IORBObject): Boolean;
begin
  result := obj._repoid = 'IDL:Derived:1.0'
end;

//***********************************************************
// TDerived_stub
//***********************************************************
procedure TDerived_stub.op1;
var
  req: IStaticRequest;
begin
  req := StaticRequest(self,'op1');
  req.invoke;
  dorb_static_throw(req);
end;

procedure TDerived_stub.op2;
var
  req: IStaticRequest;
begin
  req := StaticRequest(self,'op2');
  req.invoke;
  dorb_static_throw(req);
end;

//***********************************************************
// TDerived_stub_clp
//***********************************************************
function TDerived_stub_clp.narrow_helper(const str: RepositoryID): Pointer;
begin
  if str = 'IDL:Derived:1.0' then
    begin
      result := Pointer(self as IDerived);
      exit;
    end;
  result := inherited narrow_helper(str);
end;

procedure TDerived_stub_clp.op2;
var
  _srv: IServant;
  srv: IDerived;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TDerived_serv._narrow(_srv);
      if srv <> nil then
        srv.op2
    end;
  _postinvoke();
end;

//***********************************************************
// TDerived_serv
//***********************************************************
function TDerived_serv._this(): IDerived;
var
  obj: IORBObject;
begin
  obj := this();
  result := TDerived._narrow(obj);
end;

function TDerived_serv._is_a(const repoid: RepositoryID): Boolean;
begin
  result := repoid = 'IDL:Derived:1.0';
  if not result then
    result := inherited _is_a(repoid);
end;

function TDerived_serv._primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID;
begin
  result := 'IDL:Derived:1.0';
end;

function TDerived_serv._make_stub(const poa: IPOA; const obj : IORBObject): IORBObject;
begin
  result := TDerived_stub_clp.Create(poa,obj);
end;

procedure TDerived_serv.invoke(const serv: IStaticServerRequest);
begin
  if not _dispatch(serv) then
    begin
      serv.set_exception(BAD_OPERATION.Create(0, COMPLETED_NO) as IORBException);
      serv.write_results();
    end;
end;

function TDerived_serv.narrow_helper(const str: RepositoryID): Pointer;
begin
  if str = 'IDL:Derived:1.0' then
    begin
      result := Pointer(IDerived(self));
      exit;
    end;
  result := inherited narrow_helper(str);
end;

class function TDerived_serv._narrow(const srv : IServant): IDerived;
var
  p: Pointer;
begin
  result := nil;
  if srv = nil then exit;
  p := srv.narrow_helper('IDL:Derived:1.0');
  if p <> nil then
    result := IDerived(p)
end;

function TDerived_serv._dispatch(const req: IStaticServerRequest): Boolean;
begin
  result := true;
  if req.op_name = 'op2' then
    begin
      if not req.read_args() then  exit;
      op2;
      req.write_results();
      exit;
    end;
  if not inherited _dispatch(req) then
    result := false;
end;

//***********************************************************
// TDerived_marshaller
//***********************************************************
function TDerived_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  obj: IORBObject;
begin
  result := false;
  if not stat_Object.demarshal(dec,@obj) then exit;
  IDerived(addr^) := TDerived._narrow(obj);
  result := (obj = nil) or (Pointer(addr^) <> nil);
end;

procedure TDerived_marshaller.marshal(enc: IEncoder;const addr : Pointer);
var
  obj: IORBObject;
begin
  obj := IDerived(addr^) as IORBObject;
  stat_Object.marshal(enc,@Pointer(obj));
end;

procedure TDerived_marshaller._free(var addr: Pointer);
begin
  IDerived(addr^) := nil;
end;

procedure TDerived_marshaller._create(var addr: Pointer);
begin
  IDerived(addr^) := TDerived_stub.Create();
end;

procedure TDerived_marshaller._assign(dst, src: Pointer);
begin
  IDerived(dst^) := IDerived(src^);
end;

function TDerived_marshaller.typecode: ITypeCode;
begin
  result := _tc_Derived.typecode;
end;

//***********************************************************
// TFinal
//***********************************************************
function TFinal.narrow_helper(const str: RepositoryID): Pointer;
begin
  if str = 'IDL:Final:1.0' then
    begin
      result := Pointer(self as IFinal);
      exit;
    end;
  result := inherited narrow_helper(str);
end;

class function TFinal._narrow(const obj : IORBObject): IFinal;
var
  p: Pointer;
  stub: TFinal_stub;
begin
  result := nil;
  if obj = nil then exit;
  p := obj.narrow_helper('IDL:Final:1.0');
  if p <> nil then
    result := IFinal(p)
  else
    begin
      if narrow_helper2(obj) or obj._is_a_remote('IDL:Final:1.0') then
        begin
          stub := TFinal_stub.Create();
          stub.assign(obj);
          result := stub;
        end;
    end;
end;

class function TFinal.narrow_helper2(const obj: IORBObject): Boolean;
begin
  result := obj._repoid = 'IDL:Final:1.0'
end;

//***********************************************************
// TFinal_stub
//***********************************************************
procedure TFinal_stub.op2;
var
  req: IStaticRequest;
begin
  req := StaticRequest(self,'op2');
  req.invoke;
  dorb_static_throw(req);
end;

procedure TFinal_stub.op1;
var
  req: IStaticRequest;
begin
  req := StaticRequest(self,'op1');
  req.invoke;
  dorb_static_throw(req);
end;

procedure TFinal_stub.op3;
var
  req: IStaticRequest;
begin
  req := StaticRequest(self,'op3');
  req.invoke;
  dorb_static_throw(req);
end;

//***********************************************************
// TFinal_stub_clp
//***********************************************************
function TFinal_stub_clp.narrow_helper(const str: RepositoryID): Pointer;
begin
  if str = 'IDL:Final:1.0' then
    begin
      result := Pointer(self as IFinal);
      exit;
    end;
  result := inherited narrow_helper(str);
end;

procedure TFinal_stub_clp.op3;
var
  _srv: IServant;
  srv: IFinal;
begin
  _srv := _preinvoke();
  if _srv <> nil then
    begin
      srv := TFinal_serv._narrow(_srv);
      if srv <> nil then
        srv.op3
    end;
  _postinvoke();
end;

//***********************************************************
// TFinal_serv
//***********************************************************
function TFinal_serv._this(): IFinal;
var
  obj: IORBObject;
begin
  obj := this();
  result := TFinal._narrow(obj);
end;

function TFinal_serv._is_a(const repoid: RepositoryID): Boolean;
begin
  result := repoid = 'IDL:Final:1.0';
  if not result then
    result := inherited _is_a(repoid);
end;

function TFinal_serv._primary_interface(const objid: ObjectID; const poa: IPOA): RepositoryID;
begin
  result := 'IDL:Final:1.0';
end;

function TFinal_serv._make_stub(const poa: IPOA; const obj : IORBObject): IORBObject;
begin
  result := TFinal_stub_clp.Create(poa,obj);
end;

procedure TFinal_serv.invoke(const serv: IStaticServerRequest);
begin
  if not _dispatch(serv) then
    begin
      serv.set_exception(BAD_OPERATION.Create(0, COMPLETED_NO) as IORBException);
      serv.write_results();
    end;
end;

function TFinal_serv.narrow_helper(const str: RepositoryID): Pointer;
begin
  if str = 'IDL:Final:1.0' then
    begin
      result := Pointer(IFinal(self));
      exit;
    end;
  result := inherited narrow_helper(str);
end;

class function TFinal_serv._narrow(const srv : IServant): IFinal;
var
  p: Pointer;
begin
  result := nil;
  if srv = nil then exit;
  p := srv.narrow_helper('IDL:Final:1.0');
  if p <> nil then
    result := IFinal(p)
end;

function TFinal_serv._dispatch(const req: IStaticServerRequest): Boolean;
begin
  result := true;
  if req.op_name = 'op3' then
    begin
      if not req.read_args() then  exit;
      op3;
      req.write_results();
      exit;
    end;
  if not inherited _dispatch(req) then
    result := false;
end;

//***********************************************************
// TFinal_marshaller
//***********************************************************
function TFinal_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  obj: IORBObject;
begin
  result := false;
  if not stat_Object.demarshal(dec,@obj) then exit;
  IFinal(addr^) := TFinal._narrow(obj);
  result := (obj = nil) or (Pointer(addr^) <> nil);
end;

procedure TFinal_marshaller.marshal(enc: IEncoder;const addr : Pointer);
var
  obj: IORBObject;
begin
  obj := IFinal(addr^) as IORBObject;
  stat_Object.marshal(enc,@Pointer(obj));
end;

procedure TFinal_marshaller._free(var addr: Pointer);
begin
  IFinal(addr^) := nil;
end;

procedure TFinal_marshaller._create(var addr: Pointer);
begin
  IFinal(addr^) := TFinal_stub.Create();
end;

procedure TFinal_marshaller._assign(dst, src: Pointer);
begin
  IFinal(dst^) := IFinal(src^);
end;

function TFinal_marshaller.typecode: ITypeCode;
begin
  result := _tc_Final.typecode;
end;

initialization
  Base_marshaller := TBase_marshaller.Create();
  Derived_marshaller := TDerived_marshaller.Create();
  Final_marshaller := TFinal_marshaller.Create();
  _tc_Base := CreateTypeCodeConst('010000000e00000021000000010000000d00000049444c3a426173653a312e3000000000050000004261736500');
  _tc_Derived := CreateTypeCodeConst('010000000e00000024000000010000001000000049444c3a446572697665643a312e3000080000004465726976656400');
  _tc_Final := CreateTypeCodeConst('010000000e00000022000000010000000e00000049444c3a46696e616c3a312e300000000600000046696e616c00');
end.
