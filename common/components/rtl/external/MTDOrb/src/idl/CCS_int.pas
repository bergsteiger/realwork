// ***************************************************************************
//                                                                            
// Generated by the MTDORB IDL-to-Pascal Translator (1.0.1b1), 21.09.2010 13:25
//                                                                            
// Copyright (c) 2002 - 2004                                                  
// Millennium Group.                                                          
// Samara, Russia                                                             
//                                                                            
// All Rights Reserved                                                        
//                                                                            
// ***************************************************************************
// Compiled with parameters: " -without-prefix -i..\..\idl ..\..\idl\CCS.idl" 
//                                                                            
unit CCS_int;

{$MINENUMSIZE 4}

interface

uses
  orbtypes, code_int, orb_int, value_int, CosTransactions_int, except_int;

type

// module CosConcurrencyControl types

  Tlock_mode = (
    read,
    write,
    upgrade,
    intention_read,
    intention_write
  );

  ILockNotHeld = interface(IUserException)
  ['{5AB67B54-5C16-41D3-968D-D2704DE261BE}']
  end;

  ILockCoordinator = interface
  ['{0B5D27C8-2A22-4CC0-B806-96AC20082430}']
    procedure drop_locks;
  end;

  ILockSet = interface
  ['{F4E6FD04-3A02-46C1-A656-C2DCDB0F1A52}']
    procedure lock(const mode: Tlock_mode);
    function try_lock(const mode: Tlock_mode): Boolean;
    procedure unlock(const mode: Tlock_mode);
    procedure change_mode(const held_mode: Tlock_mode; const new_mode: Tlock_mode);
  end;

  ITransactionalLockSet = interface
  ['{DB93739E-D424-42F1-A146-D4B871D0E007}']
    procedure lock(const current: ICoordinator; const mode: Tlock_mode);
    function try_lock(const current: ICoordinator; const mode: Tlock_mode): Boolean;
    procedure unlock(const current: ICoordinator; const mode: Tlock_mode);
    procedure change_mode(const current: ICoordinator; const held_mode: Tlock_mode; const new_mode: Tlock_mode);
    function get_coordinator(const which: ICoordinator): ILockCoordinator;
  end;

  ILockSetFactory = interface
  ['{45226FA3-99A8-4791-A230-259E76B208C5}']
    function _create: ILockSet;
    function create_related(const which: ILockSet): ILockSet;
    function create_transactional: ITransactionalLockSet;
    function create_transactional_related(const which: ITransactionalLockSet): ITransactionalLockSet;
  end;

implementation

end.
