// ***************************************************************************
//                                                                            
// Generated by the MTDORB IDL-to-Pascal Translator (1.0.1b1), 21.09.2010 13:25
//                                                                            
// Copyright (c) 2002 - 2004                                                  
// Millennium Group.                                                          
// Samara, Russia                                                             
//                                                                            
// All Rights Reserved                                                        
//                                                                            
// ***************************************************************************
// Compiled with parameters: " -i..\..\idl ..\..\idl\CosTime.idl" 
//                                                                            
unit CosTime_int;

{$MINENUMSIZE 4}

interface

uses
  orbtypes, code_int, orb_int, TimeBase_int, except_int;

type

  ICosTime_TIO = interface;

// module CosTime types

  TCosTime_TimeComparison = (
    TCEqualTo,
    TCLessThan,
    TCGreaterThan,
    TCIndeterminate
  );

  TCosTime_ComparisonType = (
    IntervalC,
    MidC
  );

  TCosTime_OverlapType = (
    OTContainer,
    OTContained,
    OTOverlap,
    OTNoOverlap
  );

  ICosTime_TimeUnavailable = interface(IUserException)
  ['{07B0E6BF-09F7-4C2D-9C02-DD7CC6303AE3}']
  end;

  ICosTime_UTO = interface
  ['{0DF55B30-2398-4645-B9CD-8747CEC8AE67}']
    function absolute_time: ICosTime_UTO;
    function compare_time(const comparison_type: TCosTime_ComparisonType; const uto: ICosTime_UTO): TCosTime_TimeComparison;
    function time_to_interval(const uto: ICosTime_UTO): ICosTime_TIO;
    function interval: ICosTime_TIO;
    function _get_time: TTimeBase_TimeT;
    function _get_inaccuracy: TTimeBase_InaccuracyT;
    function _get_tdf: TTimeBase_TdfT;
    function _get_utc_time: TTimeBase_UtcT;
    property time: TTimeBase_TimeT read _get_time;
    property inaccuracy: TTimeBase_InaccuracyT read _get_inaccuracy;
    property tdf: TTimeBase_TdfT read _get_tdf;
    property utc_time: TTimeBase_UtcT read _get_utc_time;
  end;

  ICosTime_TIO = interface
  ['{859D76A4-FDF4-4E3C-9DB2-524ADBD6BA1E}']
    function spans(const time: ICosTime_UTO; out overlap: ICosTime_TIO): TCosTime_OverlapType;
    function overlaps(const interval: ICosTime_TIO; out overlap: ICosTime_TIO): TCosTime_OverlapType;
    function time: ICosTime_UTO;
    function _get_time_interval: TTimeBase_IntervalT;
    property time_interval: TTimeBase_IntervalT read _get_time_interval;
  end;

  ICosTime_TimeService = interface
  ['{6F299989-2669-44F3-A537-70B7606BCBE8}']
    function universal_time: ICosTime_UTO;
    function secure_universal_time: ICosTime_UTO;
    function new_universal_time(const time: TTimeBase_TimeT; const inaccuracy: TTimeBase_InaccuracyT; const tdf: TTimeBase_TdfT): ICosTime_UTO;
    function uto_from_utc(const utc: TTimeBase_UtcT): ICosTime_UTO;
    function new_interval(const lower: TTimeBase_TimeT; const upper: TTimeBase_TimeT): ICosTime_TIO;
  end;

implementation

end.
