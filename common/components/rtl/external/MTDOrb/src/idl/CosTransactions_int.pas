// ***************************************************************************
//                                                                            
// Generated by the MTDORB IDL-to-Pascal Translator (1.0.1b1), 21.09.2010 13:25
//                                                                            
// Copyright (c) 2002 - 2004                                                  
// Millennium Group.                                                          
// Samara, Russia                                                             
//                                                                            
// All Rights Reserved                                                        
//                                                                            
// ***************************************************************************
// Compiled with parameters: " -any -wpCosTransactions -i..\..\idl ..\..\idl\CosTransactions.idl" 
//                                                                            
unit CosTransactions_int;

{$MINENUMSIZE 4}

interface

uses
  orbtypes, code_int, orb_int, value_int, except_int;

type

  ICoordinator = interface;

  ITerminator = interface;

  IControl = interface;

  IRecoveryCoordinator = interface;

  IResource = interface;

  ISynchronization = interface;

  ISubtransactionAwareResource = interface;

// module CosTransactions types

  TStatus = (
    StatusActive,
    StatusMarkedRollback,
    StatusPrepared,
    StatusCommitted,
    StatusRolledBack,
    StatusUnknown,
    StatusNoTransaction,
    StatusPreparing,
    StatusCommitting,
    StatusRollingBack
  );

  TVote = (
    VoteCommit,
    VoteRollback,
    VoteReadOnly
  );

  TOctetSeq = Array of octet;

  Totid_t = record
    formatID : long;
    bqual_length : long;
    tid : TOctetSeq;
  end;

  TTransIdentity = record
    coord : ICoordinator;
    term : ITerminator;
    otid : Totid_t;
  end;

  TTransIdentitySeq = Array of TTransIdentity;

  TPropagationContext = record
    timeout : _ulong;
    current : TTransIdentity;
    parents : TTransIdentitySeq;
    implementation_specific_data : IAny;
  end;

  IHeuristicRollback = interface(IUserException)
  ['{AEDCB19C-BAD8-4E2E-94B7-0DC800C12361}']
  end;

  IHeuristicCommit = interface(IUserException)
  ['{A6FD8E68-553B-4A32-9220-C5FD05A9B6D1}']
  end;

  IHeuristicMixed = interface(IUserException)
  ['{F70B87A4-4879-4C77-8EF2-230B2D8595F5}']
  end;

  IHeuristicHazard = interface(IUserException)
  ['{A971C9E5-AC7E-4F09-BAE4-6298D421231D}']
  end;

  ISubtransactionsUnavailable = interface(IUserException)
  ['{530ABABA-4403-44BC-A056-6F387B138DFA}']
  end;

  INotSubtransaction = interface(IUserException)
  ['{BA0EAAE0-CCC0-4CF1-92CC-4A42B5D1ABA7}']
  end;

  IInactive = interface(IUserException)
  ['{D8293B2C-A1D8-411B-AC0D-E1E4B612AB81}']
  end;

  INotPrepared = interface(IUserException)
  ['{8AC2407A-D8E5-4684-9CD4-A99B2FA4BEAE}']
  end;

  INoTransaction = interface(IUserException)
  ['{31692A61-624F-4A75-9B36-66ECE19559D2}']
  end;

  IInvalidControl = interface(IUserException)
  ['{7AAA1727-9FF7-4366-A964-A5A70148BB0C}']
  end;

  IUnavailable = interface(IUserException)
  ['{ED5FB4B2-251E-4F4E-8B58-6646DAECEF6F}']
  end;

  ISynchronizationUnavailable = interface(IUserException)
  ['{C3EFAE4B-68B0-4519-862E-637074E1CF21}']
  end;

  ICurrent = interface(ICORBA_Current)
  ['{11FBD27C-D8CE-4CF1-9BE2-A384D771498C}']
    procedure _begin;
    procedure commit(const report_heuristics: Boolean);
    procedure rollback;
    procedure rollback_only;
    function get_status: TStatus;
    function get_transaction_name: AnsiString;
    procedure set_timeout(const seconds: _ulong);
    function get_control: IControl;
    function suspend: IControl;
    procedure resume(const which: IControl);
  end;

  ITransactionFactory = interface
  ['{9A288577-FA51-42ED-8B8F-36B9241720E3}']
    function _create(const time_out: _ulong): IControl;
    function recreate(const ctx: TPropagationContext): IControl;
  end;

  IControl = interface
  ['{0F46EF3E-C571-4F8B-8594-0986161B0384}']
    function get_terminator: ITerminator;
    function get_coordinator: ICoordinator;
  end;

  ITerminator = interface
  ['{BA40C1B9-7FB1-470D-A279-AF863CAC5187}']
    procedure commit(const report_heuristics: Boolean);
    procedure rollback;
  end;

  ICoordinator = interface
  ['{B823B6C9-1F80-49E5-9BAE-08451B5018BC}']
    function get_status: TStatus;
    function get_parent_status: TStatus;
    function get_top_level_status: TStatus;
    function is_same_transaction(const tc: ICoordinator): Boolean;
    function is_related_transaction(const tc: ICoordinator): Boolean;
    function is_ancestor_transaction(const tc: ICoordinator): Boolean;
    function is_descendant_transaction(const tc: ICoordinator): Boolean;
    function is_top_level_transaction: Boolean;
    function hash_transaction: _ulong;
    function hash_top_level_tran: _ulong;
    function register_resource(const r: IResource): IRecoveryCoordinator;
    procedure register_synchronization(const sync: ISynchronization);
    procedure register_subtran_aware(const r: ISubtransactionAwareResource);
    procedure rollback_only;
    function get_transaction_name: AnsiString;
    function create_subtransaction: IControl;
    function get_txcontext: TPropagationContext;
  end;

  IRecoveryCoordinator = interface
  ['{CFDF6F7F-6AAA-41FB-94C3-9F5D021165B1}']
    function replay_completion(const r: IResource): TStatus;
  end;

  IResource = interface
  ['{1E3E17E3-6AEB-4CBF-A64F-697C6F1B5698}']
    function prepare: TVote;
    procedure rollback;
    procedure commit;
    procedure commit_one_phase;
    procedure forget;
  end;

  ITransactionalObject = interface
  ['{7FF70DAF-E325-49FE-82EE-B67EEBF8E404}']
  end;

  ISynchronization = interface(ITransactionalObject)
  ['{6A3B056F-F67B-4CA0-B292-5CD32718DDF2}']
    procedure before_completion;
    procedure after_completion(const status: TStatus);
  end;

  ISubtransactionAwareResource = interface(IResource)
  ['{CC6610D5-66B2-4CD8-963A-0C8BA872540C}']
    procedure commit_subtransaction(const parent: ICoordinator);
    procedure rollback_subtransaction;
  end;

implementation

end.
