// ***************************************************************************
//                                                                            
// Generated by the MTDORB IDL-to-Pascal Translator (1.0.1b1), 21.09.2010 13:25
//                                                                            
// Copyright (c) 2002 - 2004                                                  
// Millennium Group.                                                          
// Samara, Russia                                                             
//                                                                            
// All Rights Reserved                                                        
//                                                                            
// ***************************************************************************
// Compiled with parameters: " -nuorb_int -without-prefix -i..\..\idl ..\..\idl\ir.idl" 
//                                                                            
unit ir_int;

{$MINENUMSIZE 4}

interface

uses
  orbtypes, code_int, ir_base_int;



type

  IContainer = interface;

  IRepository = interface;

  IInterfaceDef = interface;

  IAbstractInterfaceDef = interface;

  ILocalInterfaceDef = interface;

  IValueDef = interface;

  IModuleDef = interface;

  IConstantDef = interface;

  IStructDef = interface;

  IExceptionDef = interface;

  IUnionDef = interface;

  IEnumDef = interface;

  IAliasDef = interface;

  IValueBoxDef = interface;

  INativeDef = interface;

  IPrimitiveDef = interface;

  IStringDef = interface;

  IWstringDef = interface;

  ISequenceDef = interface;

  IArrayDef = interface;

  IFixedDef = interface;

  TScopedName = AnsiString;

  TDescription = record
    kind : TDefinitionKind;
    value : IAny;
  end;

  IContained = interface(IIRObject)
  ['{A64ED8E8-26A4-4B6A-AD45-7FF6393411BB}']
    function describe: TDescription;
    procedure move(const new_container: IContainer; const new_name: TIdentifier; const new_version: TVersionSpec);
    procedure _set_id(const val: TRepositoryId);
    function _get_id: TRepositoryId;
    procedure _set_name(const val: TIdentifier);
    function _get_name: TIdentifier;
    procedure _set_version(const val: TVersionSpec);
    function _get_version: TVersionSpec;
    function _get_defined_in: IContainer;
    function _get_absolute_name: TScopedName;
    function _get_containing_repository: IRepository;
    property id: TRepositoryId read _get_id write _set_id;
    property name: TIdentifier read _get_name write _set_name;
    property version: TVersionSpec read _get_version write _set_version;
    property defined_in: IContainer read _get_defined_in;
    property absolute_name: TScopedName read _get_absolute_name;
    property containing_repository: IRepository read _get_containing_repository;
  end;

  TContainedSeq = Array of IContained;

  TInterfaceDefSeq = Array of IInterfaceDef;

  TAbstractInterfaceDefSeq = Array of IAbstractInterfaceDef;

  TLocalInterfaceDefSeq = Array of ILocalInterfaceDef;

  TValueDefSeq = Array of IValueDef;

  TInitializer = record
    members : TStructMemberSeq;
    name : TIdentifier;
  end;

  TInitializerSeq = Array of TInitializer;

  TDescriptionSeq = Array of TDescription;

  IContainer = interface(IIRObject)
  ['{29BFC4C6-26B0-42E4-9E2D-BC31B752E28B}']
    function lookup(const search_name: TScopedName): IContained;
    function contents(const limit_type: TDefinitionKind; const exclude_inherited: Boolean): TContainedSeq;
    function lookup_name(const search_name: TIdentifier; const levels_to_search: long; const limit_type: TDefinitionKind; const exclude_inherited: Boolean): TContainedSeq;
    function describe_contents(const limit_type: TDefinitionKind; const exclude_inherited: Boolean; const max_returned_objs: long): TDescriptionSeq;
    function create_module(const id: TRepositoryId; const name: TIdentifier; const version: TVersionSpec): IModuleDef;
    function create_constant(const id: TRepositoryId; const name: TIdentifier; const version: TVersionSpec; const _type: IIDLType; const value: IAny): IConstantDef;
    function create_struct(const id: TRepositoryId; const name: TIdentifier; const version: TVersionSpec; const members: TStructMemberSeq): IStructDef;
    function create_exception(const id: TRepositoryId; const name: TIdentifier; const version: TVersionSpec; const members: TStructMemberSeq): IExceptionDef;
    function create_union(const id: TRepositoryId; const name: TIdentifier; const version: TVersionSpec; const discriminator_type: IIDLType; const members: TUnionMemberSeq): IUnionDef;
    function create_enum(const id: TRepositoryId; const name: TIdentifier; const version: TVersionSpec; const members: TEnumMemberSeq): IEnumDef;
    function create_alias(const id: TRepositoryId; const name: TIdentifier; const version: TVersionSpec; const original_type: IIDLType): IAliasDef;
    function create_interface(const id: TRepositoryId; const name: TIdentifier; const version: TVersionSpec; const base_interfaces: TInterfaceDefSeq): IInterfaceDef;
    function create_abstract_interface(const id: TRepositoryId; const name: TIdentifier; const version: TVersionSpec; const base_interfaces: TAbstractInterfaceDefSeq): IAbstractInterfaceDef;
    function create_local_interface(const id: TRepositoryId; const name: TIdentifier; const version: TVersionSpec; const base_interfaces: TInterfaceDefSeq): ILocalInterfaceDef;
    function create_value(const id: TRepositoryId; const name: TIdentifier; const version: TVersionSpec; const is_custom: Boolean; const is_abstract: Boolean; const base_value: IValueDef; const is_truncatable: Boolean; const abstract_base_values: TValueDefSeq; const supported_interfaces: TInterfaceDefSeq; const initializers: TInitializerSeq): IValueDef;
    function create_value_box(const id: TRepositoryId; const name: TIdentifier; const version: TVersionSpec; const original_type_def: IIDLType): IValueBoxDef;
    function create_native(const id: TRepositoryId; const name: TIdentifier; const version: TVersionSpec): INativeDef;
  end;

  TPrimitiveKind = (
    pk_null,
    pk_void,
    pk_short,
    pk_long,
    pk_ushort,
    pk_ulong,
    pk_float,
    pk_double,
    pk_boolean,
    pk_char,
    pk_octet,
    pk_any,
    pk_TypeCode,
    pk_Principal,
    pk_string,
    pk_objref,
    pk_longlong,
    pk_ulonglong,
    pk_longdouble,
    pk_wchar,
    pk_wstring,
    pk_value_base
  );

  IRepository = interface(IContainer)
  ['{783BAC72-D137-4A0B-8867-EC259E580D77}']
    function lookup_id(const search_id: TRepositoryId): IContained;
    function get_primitive(const kind: TPrimitiveKind): IPrimitiveDef;
    function create_string(const bound: _ulong): IStringDef;
    function create_wstring(const bound: _ulong): IWstringDef;
    function create_sequence(const bound: _ulong; const element_type: IIDLType): ISequenceDef;
    function create_array(const length: _ulong; const element_type: IIDLType): IArrayDef;
    function create_fixed(const digits: _ushort; const scale: Short): IFixedDef;
  end;

  IModuleDef = interface(IContainer)
  ['{C9570365-34FB-4A61-9F9F-52EA26D47C94}']
  end;

  TModuleDescription = record
    name : TIdentifier;
    id : TRepositoryId;
    defined_in : TRepositoryId;
    version : TVersionSpec;
  end;

  IConstantDef = interface(IContained)
  ['{1EECC16E-B259-48E4-8BDB-9F7BAC96C7A6}']
    function _get_type: ITypeCode;
    procedure _set_type_def(const val: IIDLType);
    function _get_type_def: IIDLType;
    procedure _set_value(const val: IAny);
    function _get_value: IAny;
    property _type: ITypeCode read _get_type;
    property type_def: IIDLType read _get_type_def write _set_type_def;
    property value: IAny read _get_value write _set_value;
  end;

  TConstantDescription = record
    name : TIdentifier;
    id : TRepositoryId;
    defined_in : TRepositoryId;
    version : TVersionSpec;
    _type : ITypeCode;
    value : IAny;
  end;

  ITypedefDef = interface(IContained)
  ['{68EE7B1D-F9C2-4929-B303-1855BAF72950}']
  end;

  TTypeDescription = record
    name : TIdentifier;
    id : TRepositoryId;
    defined_in : TRepositoryId;
    version : TVersionSpec;
    _type : ITypeCode;
  end;

  IStructDef = interface(ITypedefDef)
  ['{992D9724-07CF-446C-8683-730712DA3208}']
    procedure _set_members(const val: TStructMemberSeq);
    function _get_members: TStructMemberSeq;
    property members: TStructMemberSeq read _get_members write _set_members;
  end;

  IUnionDef = interface(ITypedefDef)
  ['{1FC273EF-DB4D-4E30-8A6D-57A1F12AEF63}']
    function _get_discriminator_type: ITypeCode;
    procedure _set_discriminator_type_def(const val: IIDLType);
    function _get_discriminator_type_def: IIDLType;
    procedure _set_members(const val: TUnionMemberSeq);
    function _get_members: TUnionMemberSeq;
    property discriminator_type: ITypeCode read _get_discriminator_type;
    property discriminator_type_def: IIDLType read _get_discriminator_type_def write _set_discriminator_type_def;
    property members: TUnionMemberSeq read _get_members write _set_members;
  end;

  IEnumDef = interface(ITypedefDef)
  ['{97660220-8A66-43F4-BA9B-443D1D2CE6EB}']
    procedure _set_members(const val: TEnumMemberSeq);
    function _get_members: TEnumMemberSeq;
    property members: TEnumMemberSeq read _get_members write _set_members;
  end;

  IAliasDef = interface(ITypedefDef)
  ['{21B17EB6-878F-4A84-8236-6E6BDE047DAE}']
    procedure _set_original_type_def(const val: IIDLType);
    function _get_original_type_def: IIDLType;
    property original_type_def: IIDLType read _get_original_type_def write _set_original_type_def;
  end;

  INativeDef = interface(ITypedefDef)
  ['{B26449A6-9491-401C-9BCE-08A8261E2382}']
  end;

  IPrimitiveDef = interface(IIDLType)
  ['{4307E675-AA51-4737-9B1A-3D54D2F56598}']
    function _get_kind: TPrimitiveKind;
    property kind: TPrimitiveKind read _get_kind;
  end;

  IStringDef = interface(IIDLType)
  ['{C5311967-621B-4EDC-90C8-4A03F38D474E}']
    procedure _set_bound(const val: _ulong);
    function _get_bound: _ulong;
    property bound: _ulong read _get_bound write _set_bound;
  end;

  IWstringDef = interface(IIDLType)
  ['{19E091DB-EBF8-4418-BAFD-005D7BF4F6F0}']
    procedure _set_bound(const val: _ulong);
    function _get_bound: _ulong;
    property bound: _ulong read _get_bound write _set_bound;
  end;

  IFixedDef = interface(IIDLType)
  ['{DD625628-1BC1-454D-94A6-C620522A1CA4}']
    procedure _set_digits(const val: _ushort);
    function _get_digits: _ushort;
    procedure _set_scale(const val: Short);
    function _get_scale: Short;
    property digits: _ushort read _get_digits write _set_digits;
    property scale: Short read _get_scale write _set_scale;
  end;

  ISequenceDef = interface(IIDLType)
  ['{8E3EA2E5-A764-4283-8916-03BB7E80F4D2}']
    procedure _set_bound(const val: _ulong);
    function _get_bound: _ulong;
    function _get_element_type: ITypeCode;
    procedure _set_element_type_def(const val: IIDLType);
    function _get_element_type_def: IIDLType;
    property bound: _ulong read _get_bound write _set_bound;
    property element_type: ITypeCode read _get_element_type;
    property element_type_def: IIDLType read _get_element_type_def write _set_element_type_def;
  end;

  IArrayDef = interface(IIDLType)
  ['{B4D75A12-E3E0-4164-A840-B4CFC455E754}']
    procedure _set_length(const val: _ulong);
    function _get_length: _ulong;
    function _get_element_type: ITypeCode;
    procedure _set_element_type_def(const val: IIDLType);
    function _get_element_type_def: IIDLType;
    property length: _ulong read _get_length write _set_length;
    property element_type: ITypeCode read _get_element_type;
    property element_type_def: IIDLType read _get_element_type_def write _set_element_type_def;
  end;

  IExceptionDef = interface(IContained)
  ['{05FB5E81-249C-4326-8A94-BC9C500ABD39}']
    function _get_type: ITypeCode;
    procedure _set_members(const val: TStructMemberSeq);
    function _get_members: TStructMemberSeq;
    property _type: ITypeCode read _get_type;
    property members: TStructMemberSeq read _get_members write _set_members;
  end;

  TExceptionDescription = record
    name : TIdentifier;
    id : TRepositoryId;
    defined_in : TRepositoryId;
    version : TVersionSpec;
    _type : ITypeCode;
  end;

  TExceptionDefSeq = Array of IExceptionDef;

  TExcDescriptionSeq = Array of TExceptionDescription;

  TAttributeMode = (
    ATTR_NORMAL,
    ATTR_READONLY
  );

  IAttributeDef = interface(IContained)
  ['{A1EDAB0B-1093-4522-9C15-DF7AE1F3C7C8}']
    function _get_type: ITypeCode;
    procedure _set_type_def(const val: IIDLType);
    function _get_type_def: IIDLType;
    procedure _set_mode(const val: TAttributeMode);
    function _get_mode: TAttributeMode;
    property _type: ITypeCode read _get_type;
    property type_def: IIDLType read _get_type_def write _set_type_def;
    property mode: TAttributeMode read _get_mode write _set_mode;
  end;

  TAttributeDescription = record
    name : TIdentifier;
    id : TRepositoryId;
    defined_in : TRepositoryId;
    version : TVersionSpec;
    _type : ITypeCode;
    mode : TAttributeMode;
  end;

  TOperationMode = (
    OP_NORMAL,
    OP_ONEWAY
  );

  TParameterMode = (
    PARAM_IN,
    PARAM_OUT,
    PARAM_INOUT
  );

  TParameterDescription = record
    name : TIdentifier;
    _type : ITypeCode;
    type_def : IIDLType;
    mode : TParameterMode;
  end;

  TParDescriptionSeq = Array of TParameterDescription;

  TContextIdentifier = TIdentifier;

  TContextIdSeq = Array of TContextIdentifier;

  IOperationDef = interface(IContained)
  ['{AD20F521-9651-49EB-A1DD-337EDF30FEB5}']
    function _get_result: ITypeCode;
    procedure _set_result_def(const val: IIDLType);
    function _get_result_def: IIDLType;
    procedure _set_params(const val: TParDescriptionSeq);
    function _get_params: TParDescriptionSeq;
    procedure _set_mode(const val: TOperationMode);
    function _get_mode: TOperationMode;
    procedure _set_contexts(const val: TContextIdSeq);
    function _get_contexts: TContextIdSeq;
    procedure _set_exceptions(const val: TExceptionDefSeq);
    function _get_exceptions: TExceptionDefSeq;
    property _result: ITypeCode read _get_result;
    property result_def: IIDLType read _get_result_def write _set_result_def;
    property params: TParDescriptionSeq read _get_params write _set_params;
    property mode: TOperationMode read _get_mode write _set_mode;
    property contexts: TContextIdSeq read _get_contexts write _set_contexts;
    property exceptions: TExceptionDefSeq read _get_exceptions write _set_exceptions;
  end;

  TOperationDescription = record
    name : TIdentifier;
    id : TRepositoryId;
    defined_in : TRepositoryId;
    version : TVersionSpec;
    _result : ITypeCode;
    mode : TOperationMode;
    contexts : TContextIdSeq;
    parameters : TParDescriptionSeq;
    exceptions : TExcDescriptionSeq;
  end;

  TRepositoryIdSeq = Array of TRepositoryId;

  TOpDescriptionSeq = Array of TOperationDescription;

  TAttrDescriptionSeq = Array of TAttributeDescription;

  TFullInterfaceDescription = record
    name : TIdentifier;
    id : TRepositoryId;
    defined_in : TRepositoryId;
    version : TVersionSpec;
    operations : TOpDescriptionSeq;
    attributes : TAttrDescriptionSeq;
    base_interfaces : TRepositoryIdSeq;
    _type : ITypeCode;
  end;

  IInterfaceDef = interface(IContainer)
  ['{1216954F-953A-41EB-AAED-4CDE8094C438}']
    function is_a(const interface_id: TRepositoryId): Boolean;
    function describe_interface: TFullInterfaceDescription;
    function create_attribute(const id: TRepositoryId; const name: TIdentifier; const version: TVersionSpec; const _type: IIDLType; const mode: TAttributeMode): IAttributeDef;
    function create_operation(const id: TRepositoryId; const name: TIdentifier; const version: TVersionSpec; const _result: IIDLType; const mode: TOperationMode; const params: TParDescriptionSeq; const exceptions: TExceptionDefSeq; const contexts: TContextIdSeq): IOperationDef;
    procedure _set_base_interfaces(const val: TInterfaceDefSeq);
    function _get_base_interfaces: TInterfaceDefSeq;
    property base_interfaces: TInterfaceDefSeq read _get_base_interfaces write _set_base_interfaces;
  end;

  TInterfaceDescription = record
    name : TIdentifier;
    id : TRepositoryId;
    defined_in : TRepositoryId;
    version : TVersionSpec;
    base_interfaces : TRepositoryIdSeq;
  end;

  IAbstractInterfaceDef = interface(IInterfaceDef)
  ['{F6C6904A-3814-4EB2-B087-F00408E8A0F0}']
  end;

  ILocalInterfaceDef = interface(IInterfaceDef)
  ['{35F17721-4702-4817-B3A4-38BB8957F90C}']
  end;

  IValueMemberDef = interface(IContained)
  ['{AE9F57D3-FFCE-428A-9EC5-A2D0B2C8828E}']
    function _get_type: ITypeCode;
    procedure _set_type_def(const val: IIDLType);
    function _get_type_def: IIDLType;
    procedure _set_access(const val: TVisibility);
    function _get_access: TVisibility;
    property _type: ITypeCode read _get_type;
    property type_def: IIDLType read _get_type_def write _set_type_def;
    property access: TVisibility read _get_access write _set_access;
  end;

  TFullValueDescription = record
    name : TIdentifier;
    id : TRepositoryId;
    is_abstract : Boolean;
    is_custom : Boolean;
    defined_in : TRepositoryId;
    version : TVersionSpec;
    operations : TOpDescriptionSeq;
    attributes : TAttrDescriptionSeq;
    members : TValueMemberSeq;
    initializers : TInitializerSeq;
    supported_interfaces : TRepositoryIdSeq;
    abstract_base_values : TRepositoryIdSeq;
    is_truncatable : Boolean;
    base_value : TRepositoryId;
    _type : ITypeCode;
  end;

  IValueDef = interface(IContainer)
  ['{9E248DED-B8AF-49DE-B8E6-CD3DC6EC38F1}']
    function is_a(const value_id: TRepositoryId): Boolean;
    function describe_value: TFullValueDescription;
    function create_value_member(const id: TRepositoryId; const name: TIdentifier; const version: TVersionSpec; const _type: IIDLType; const access: TVisibility): IValueMemberDef;
    function create_attribute(const id: TRepositoryId; const name: TIdentifier; const version: TVersionSpec; const _type: IIDLType; const mode: TAttributeMode): IAttributeDef;
    function create_operation(const id: TRepositoryId; const name: TIdentifier; const version: TVersionSpec; const _result: IIDLType; const mode: TOperationMode; const params: TParDescriptionSeq; const exceptions: TExceptionDefSeq; const contexts: TContextIdSeq): IOperationDef;
    procedure _set_supported_interfaces(const val: TInterfaceDefSeq);
    function _get_supported_interfaces: TInterfaceDefSeq;
    procedure _set_initializers(const val: TInitializerSeq);
    function _get_initializers: TInitializerSeq;
    procedure _set_base_value(const val: IValueDef);
    function _get_base_value: IValueDef;
    procedure _set_abstract_base_values(const val: TValueDefSeq);
    function _get_abstract_base_values: TValueDefSeq;
    procedure _set_is_abstract(const val: Boolean);
    function _get_is_abstract: Boolean;
    procedure _set_is_custom(const val: Boolean);
    function _get_is_custom: Boolean;
    procedure _set_is_truncatable(const val: Boolean);
    function _get_is_truncatable: Boolean;
    property supported_interfaces: TInterfaceDefSeq read _get_supported_interfaces write _set_supported_interfaces;
    property initializers: TInitializerSeq read _get_initializers write _set_initializers;
    property base_value: IValueDef read _get_base_value write _set_base_value;
    property abstract_base_values: TValueDefSeq read _get_abstract_base_values write _set_abstract_base_values;
    property is_abstract: Boolean read _get_is_abstract write _set_is_abstract;
    property is_custom: Boolean read _get_is_custom write _set_is_custom;
    property is_truncatable: Boolean read _get_is_truncatable write _set_is_truncatable;
  end;

  TValueDescription = record
    name : TIdentifier;
    id : TRepositoryId;
    is_abstract : Boolean;
    is_custom : Boolean;
    defined_in : TRepositoryId;
    version : TVersionSpec;
    supported_interfaces : TRepositoryIdSeq;
    abstract_base_values : TRepositoryIdSeq;
    is_truncatable : Boolean;
    base_value : TRepositoryId;
  end;

  IValueBoxDef = interface(ITypedefDef)
  ['{A0F117A4-D28D-4747-98E1-AF4536815804}']
    procedure _set_original_type_def(const val: IIDLType);
    function _get_original_type_def: IIDLType;
    property original_type_def: IIDLType read _get_original_type_def write _set_original_type_def;
  end;

implementation

end.
