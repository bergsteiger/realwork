// ***************************************************************************
//                                                                            
// Generated by the MTDORB IDL-to-Pascal Translator (1.0.1b1), 21.09.2010 13:25
//                                                                            
// Copyright (c) 2002 - 2004                                                  
// Millennium Group.                                                          
// Samara, Russia                                                             
//                                                                            
// All Rights Reserved                                                        
//                                                                            
// ***************************************************************************
// Compiled with parameters: " -i..\..\idl ..\..\idl\pi.idl" 
//                                                                            
unit pi;

interface

uses
  Classes, orb_int, orb, req_int, code_int, env_int, stdstat, std_seq,imr, imr_int, 
  orbtypes, exceptions, except_int, pi_int, policy_int, policy, value_int, value, poa_int, poa;

type

  {** IDL:omg.org/IOP/Codec/InvalidTypeForEncoding:1.0 } 
  TInvalidTypeForEncoding = class(UserException,IInvalidTypeForEncoding)
  protected
    procedure throw; override;
    function clone(): IORBException; override;
    function repoid(): RepositoryID; override;
    procedure encode(const enc: IEncoder); override;
    procedure encode_any(const a: IAny); override;
  public
    constructor Create(ex: TInvalidTypeForEncoding); overload;
    constructor Create(); overload;
  end;

  {** IDL:omg.org/IOP/Codec/FormatMismatch:1.0 } 
  TFormatMismatch = class(UserException,IFormatMismatch)
  protected
    procedure throw; override;
    function clone(): IORBException; override;
    function repoid(): RepositoryID; override;
    procedure encode(const enc: IEncoder); override;
    procedure encode_any(const a: IAny); override;
  public
    constructor Create(ex: TFormatMismatch); overload;
    constructor Create(); overload;
  end;

  {** IDL:omg.org/IOP/Codec/TypeMismatch:1.0 } 
  TTypeMismatch = class(UserException,ITypeMismatch)
  protected
    procedure throw; override;
    function clone(): IORBException; override;
    function repoid(): RepositoryID; override;
    procedure encode(const enc: IEncoder); override;
    procedure encode_any(const a: IAny); override;
  public
    constructor Create(ex: TTypeMismatch); overload;
    constructor Create(); overload;
  end;

  {** IDL:omg.org/IOP/Codec:1.0 } 
  TCodec = class(TLocalORBObject,ICodec)
  protected
    function encode(const data: IAny): TOctetSeq; virtual; abstract;
    function decode(const data: TOctetSeq): IAny; virtual; abstract;
    function encode_value(const data: IAny): TOctetSeq; virtual; abstract;
    function decode_value(const data: TOctetSeq; const tc: ITypeCode): IAny; virtual; abstract;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    class function _narrow(const obj : IORBObject): ICodec;
    class function narrow_helper2(const obj: IORBObject): Boolean;
  end;

  TEncoding_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

  {** IDL:omg.org/IOP/CodecFactory/UnknownEncoding:1.0 } 
  TUnknownEncoding = class(UserException,IUnknownEncoding)
  protected
    procedure throw; override;
    function clone(): IORBException; override;
    function repoid(): RepositoryID; override;
    procedure encode(const enc: IEncoder); override;
    procedure encode_any(const a: IAny); override;
  public
    constructor Create(ex: TUnknownEncoding); overload;
    constructor Create(); overload;
  end;

  {** IDL:omg.org/IOP/CodecFactory:1.0 } 
  TCodecFactory = class(TLocalORBObject,ICodecFactory)
  protected
    function create_codec(const enc: TEncoding): ICodec; virtual; abstract;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    class function _narrow(const obj : IORBObject): ICodecFactory;
    class function narrow_helper2(const obj: IORBObject): Boolean;
  end;

  {** IDL:omg.org/PortableInterceptor/Interceptor:1.0 } 
  TInterceptor = class(TLocalORBObject,IInterceptor)
  protected
    procedure _destroy; virtual; abstract;
    function _get_name: AnsiString; virtual; abstract;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    class function _narrow(const obj : IORBObject): IInterceptor;
    class function narrow_helper2(const obj: IORBObject): Boolean;
  end;

  TForwardRequest_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

  {** IDL:omg.org/PortableInterceptor/ForwardRequest:1.0 } 
  TForwardRequest = class(UserException,IForwardRequest)
  private
    Fforward : IORBObject;
    Fpermanent : Boolean;
  protected
    procedure throw; override;
    function clone(): IORBException; override;
    function repoid(): RepositoryID; override;
    procedure encode(const enc: IEncoder); override;
    procedure encode_any(const a: IAny); override;
    procedure forward(const val : IORBObject); overload;
    procedure permanent(const val : Boolean); overload;
  public
    function forward: IORBObject; overload;
    function permanent: Boolean; overload;
    constructor Create(ex: TForwardRequest); overload;
    constructor Create(_forward: IORBObject = nil;_permanent: Boolean = false); overload;
  end;

  TInvalidSlot_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

  {** IDL:omg.org/PortableInterceptor/InvalidSlot:1.0 } 
  TInvalidSlot = class(UserException,IInvalidSlot)
  protected
    procedure throw; override;
    function clone(): IORBException; override;
    function repoid(): RepositoryID; override;
    procedure encode(const enc: IEncoder); override;
    procedure encode_any(const a: IAny); override;
  public
    constructor Create(ex: TInvalidSlot); overload;
    constructor Create(); overload;
  end;

  {** IDL:omg.org/PortableInterceptor/Current:1.0 } 
  TCurrent = class(TCORBA_Current,ICurrent)
  protected
    function get_slot(const id: TSlotId): IAny; virtual; abstract;
    procedure set_slot(const id: TSlotId; const data: IAny); virtual; abstract;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    class function _narrow(const obj : IORBObject): ICurrent;
    class function narrow_helper2(const obj: IORBObject): Boolean;
  end;

  {** IDL:omg.org/PortableInterceptor/RequestInfo:1.0 } 
  TRequestInfo = class(TLocalORBObject,IRequestInfo)
  protected
    function get_slot(const id: TSlotId): IAny; virtual; abstract;
    function get_request_service_context(const id: TServiceId): TServiceContext; virtual; abstract;
    function get_reply_service_context(const id: TServiceId): TServiceContext; virtual; abstract;
    function _get_request_id: _ulong; virtual; abstract;
    function _get_operation: AnsiString; virtual; abstract;
    function _get_arguments: TParameterList; virtual; abstract;
    function _get_exceptions: TExceptionList; virtual; abstract;
    function _get_contexts: TContextList; virtual; abstract;
    function _get_operation_context: TRequestContext; virtual; abstract;
    function _get_result: IAny; virtual; abstract;
    function _get_response_expected: Boolean; virtual; abstract;
    function _get_sync_scope: TSyncScope; virtual; abstract;
    function _get_reply_status: TReplyStatus; virtual; abstract;
    function _get_forward_reference: IORBObject; virtual; abstract;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    class function _narrow(const obj : IORBObject): IRequestInfo;
    class function narrow_helper2(const obj: IORBObject): Boolean;
  end;

  {** IDL:omg.org/PortableInterceptor/ClientRequestInfo:1.0 } 
  TClientRequestInfo = class(TRequestInfo,IClientRequestInfo)
  protected
    function get_effective_component(const id: TComponentId): TTaggedComponent; virtual; abstract;
    function get_effective_components(const id: TComponentId): TTaggedComponentSeq; virtual; abstract;
    function get_request_policy(const _type: TPolicyType): IPolicy; virtual; abstract;
    procedure add_request_service_context(const service_context: TServiceContext; const replace: Boolean); virtual; abstract;
    function _get_target: IORBObject; virtual; abstract;
    function _get_effective_target: IORBObject; virtual; abstract;
    function _get_effective_profile: TTaggedProfile; virtual; abstract;
    function _get_received_exception: IAny; virtual; abstract;
    function _get_received_exception_id: TRepositoryId; virtual; abstract;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    class function _narrow(const obj : IORBObject): IClientRequestInfo;
    class function narrow_helper2(const obj: IORBObject): Boolean;
  end;

  {** IDL:omg.org/PortableInterceptor/ServerRequestInfo:1.0 } 
  TServerRequestInfo = class(TRequestInfo,IServerRequestInfo)
  protected
    function get_server_policy(const _type: TPolicyType): IPolicy; virtual; abstract;
    procedure set_slot(const id: TSlotId; const data: IAny); virtual; abstract;
    function target_is_a(const id: TRepositoryId): Boolean; virtual; abstract;
    procedure add_reply_service_context(const service_context: TServiceContext; const replace: Boolean); virtual; abstract;
    function _get_sending_exception: IAny; virtual; abstract;
    function _get_object_id: TOctetSeq; virtual; abstract;
    function _get_adapter_id: TOctetSeq; virtual; abstract;
    function _get_target_most_derived_interface: TRepositoryId; virtual; abstract;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    class function _narrow(const obj : IORBObject): IServerRequestInfo;
    class function narrow_helper2(const obj: IORBObject): Boolean;
  end;

  {** IDL:omg.org/PortableInterceptor/ClientRequestInterceptor:1.0 } 
  TClientRequestInterceptor = class(TInterceptor,IClientRequestInterceptor)
  protected
    procedure send_request(const ri: IClientRequestInfo); virtual; abstract;
    procedure send_poll(const ri: IClientRequestInfo); virtual; abstract;
    procedure receive_reply(const ri: IClientRequestInfo); virtual; abstract;
    procedure receive_exception(const ri: IClientRequestInfo); virtual; abstract;
    procedure receive_other(const ri: IClientRequestInfo); virtual; abstract;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    class function _narrow(const obj : IORBObject): IClientRequestInterceptor;
    class function narrow_helper2(const obj: IORBObject): Boolean;
  end;

  {** IDL:omg.org/PortableInterceptor/ServerRequestInterceptor:1.0 } 
  TServerRequestInterceptor = class(TInterceptor,IServerRequestInterceptor)
  protected
    procedure receive_request_service_contexts(const ri: IServerRequestInfo); virtual; abstract;
    procedure receive_request(const ri: IServerRequestInfo); virtual; abstract;
    procedure send_reply(const ri: IServerRequestInfo); virtual; abstract;
    procedure send_exception(const ri: IServerRequestInfo); virtual; abstract;
    procedure send_other(const ri: IServerRequestInfo); virtual; abstract;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    class function _narrow(const obj : IORBObject): IServerRequestInterceptor;
    class function narrow_helper2(const obj: IORBObject): Boolean;
  end;

  {** IDL:omg.org/PortableInterceptor/IORInfo:1.0 } 
  TIORInfo = class(TLocalORBObject,IIORInfo)
  protected
    function get_effective_policy(const _type: TPolicyType): IPolicy; virtual; abstract;
    procedure add_ior_component(const comp: TTaggedComponent); virtual; abstract;
    procedure add_ior_component_to_profile(const comp: TTaggedComponent; const profile_id: TProfileId); virtual; abstract;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    class function _narrow(const obj : IORBObject): IIORInfo;
    class function narrow_helper2(const obj: IORBObject): Boolean;
  end;

  {** IDL:omg.org/PortableInterceptor/IORInterceptor:1.0 } 
  TIORInterceptor = class(TInterceptor,IIORInterceptor)
  protected
    procedure establish_components(const info: IIORInfo); virtual; abstract;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    class function _narrow(const obj : IORBObject): IIORInterceptor;
    class function narrow_helper2(const obj: IORBObject): Boolean;
  end;

  {** IDL:omg.org/PortableInterceptor/PolicyFactory:1.0 } 
  TPolicyFactory = class(TLocalORBObject,IPolicyFactory)
  protected
    function create_policy(const _type: TPolicyType; const value: IAny): IPolicy; virtual; abstract;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    class function _narrow(const obj : IORBObject): IPolicyFactory;
    class function narrow_helper2(const obj: IORBObject): Boolean;
  end;

  {** IDL:omg.org/PortableInterceptor/ORBInitInfo/DuplicateName:1.0 } 
  TDuplicateName = class(UserException,IDuplicateName)
  private
    Fname : AnsiString;
  protected
    procedure throw; override;
    function clone(): IORBException; override;
    function repoid(): RepositoryID; override;
    procedure encode(const enc: IEncoder); override;
    procedure encode_any(const a: IAny); override;
    procedure name(const val : AnsiString); overload;
  public
    function name: AnsiString; overload;
    constructor Create(ex: TDuplicateName); overload;
    constructor Create(_name: AnsiString = ''); overload;
  end;

  {** IDL:omg.org/PortableInterceptor/ORBInitInfo/InvalidName:1.0 } 
  TInvalidName = class(UserException,IInvalidName)
  protected
    procedure throw; override;
    function clone(): IORBException; override;
    function repoid(): RepositoryID; override;
    procedure encode(const enc: IEncoder); override;
    procedure encode_any(const a: IAny); override;
  public
    constructor Create(ex: TInvalidName); overload;
    constructor Create(); overload;
  end;

  {** IDL:omg.org/PortableInterceptor/ORBInitInfo:1.0 } 
  TORBInitInfo = class(TLocalORBObject,IORBInitInfo)
  protected
    procedure register_initial_reference(const id: TObjectId; const obj: IORBObject); virtual; abstract;
    function resolve_initial_references(const id: TObjectId): IORBObject; virtual; abstract;
    procedure add_client_request_interceptor(const interceptor: IClientRequestInterceptor); virtual; abstract;
    procedure add_server_request_interceptor(const interceptor: IServerRequestInterceptor); virtual; abstract;
    procedure add_ior_interceptor(const interceptor: IIORInterceptor); virtual; abstract;
    function allocate_slot_id: TSlotId; virtual; abstract;
    procedure register_policy_factory(const _type: TPolicyType; const policy_factory: IPolicyFactory); virtual; abstract;
    function _get_arguments: TStringSeq; virtual; abstract;
    function _get_orb_id: AnsiString; virtual; abstract;
    function _get_codec_factory: ICodecFactory; virtual; abstract;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    class function _narrow(const obj : IORBObject): IORBInitInfo;
    class function narrow_helper2(const obj: IORBObject): Boolean;
  end;

  {** IDL:omg.org/PortableInterceptor/ORBInitializer:1.0 } 
  TORBInitializer = class(TLocalORBObject,IORBInitializer)
  protected
    procedure pre_init(const info: IORBInitInfo); virtual; abstract;
    procedure post_init(const info: IORBInitInfo); virtual; abstract;
    function narrow_helper(const str: RepositoryID): Pointer; override;
  public
    class function _narrow(const obj : IORBObject): IORBInitializer;
    class function narrow_helper2(const obj: IORBObject): Boolean;
  end;

var
  Encoding_marshaller : IStaticTypeInfo;
  ForwardRequest_marshaller : IStaticTypeInfo;
  InvalidSlot_marshaller : IStaticTypeInfo;
  _tc_Encoding : ITypeCodeConst;
  _tc_ForwardRequest : ITypeCodeConst;
  _tc_InvalidSlot : ITypeCodeConst;

implementation

uses
  SysUtils, any, tcode, static, throw;

//***********************************************************
// TInvalidTypeForEncoding
//***********************************************************
constructor TInvalidTypeForEncoding.Create(ex: TInvalidTypeForEncoding);
begin
  inherited Create();
end;

procedure TInvalidTypeForEncoding.throw;
begin
  raise TInvalidTypeForEncoding.Create(self);
end;

function TInvalidTypeForEncoding.clone(): IORBException;
begin
  result := TInvalidTypeForEncoding.Create(self);
end;

procedure TInvalidTypeForEncoding.encode(const enc: IEncoder);
begin
  raise MARSHAL.Create;
end;

procedure TInvalidTypeForEncoding.encode_any(const a: IAny);
begin
  raise MARSHAL.Create;
end;

constructor TInvalidTypeForEncoding.Create();
begin
  inherited Create();
end;

function TInvalidTypeForEncoding.repoid(): RepositoryID;
begin
  result := 'IDL:omg.org/IOP/Codec/InvalidTypeForEncoding:1.0';
end;

//***********************************************************
// TFormatMismatch
//***********************************************************
constructor TFormatMismatch.Create(ex: TFormatMismatch);
begin
  inherited Create();
end;

procedure TFormatMismatch.throw;
begin
  raise TFormatMismatch.Create(self);
end;

function TFormatMismatch.clone(): IORBException;
begin
  result := TFormatMismatch.Create(self);
end;

procedure TFormatMismatch.encode(const enc: IEncoder);
begin
  raise MARSHAL.Create;
end;

procedure TFormatMismatch.encode_any(const a: IAny);
begin
  raise MARSHAL.Create;
end;

constructor TFormatMismatch.Create();
begin
  inherited Create();
end;

function TFormatMismatch.repoid(): RepositoryID;
begin
  result := 'IDL:omg.org/IOP/Codec/FormatMismatch:1.0';
end;

//***********************************************************
// TTypeMismatch
//***********************************************************
constructor TTypeMismatch.Create(ex: TTypeMismatch);
begin
  inherited Create();
end;

procedure TTypeMismatch.throw;
begin
  raise TTypeMismatch.Create(self);
end;

function TTypeMismatch.clone(): IORBException;
begin
  result := TTypeMismatch.Create(self);
end;

procedure TTypeMismatch.encode(const enc: IEncoder);
begin
  raise MARSHAL.Create;
end;

procedure TTypeMismatch.encode_any(const a: IAny);
begin
  raise MARSHAL.Create;
end;

constructor TTypeMismatch.Create();
begin
  inherited Create();
end;

function TTypeMismatch.repoid(): RepositoryID;
begin
  result := 'IDL:omg.org/IOP/Codec/TypeMismatch:1.0';
end;

//***********************************************************
// TCodec
//***********************************************************
function TCodec.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:omg.org/IOP/Codec:1.0' then
    begin
      result := Pointer(self as ICodec);
      exit;
    end;
end;

class function TCodec._narrow(const obj : IORBObject): ICodec;
var
  p: Pointer;
begin
  result := nil;
  if obj = nil then exit;
  p := obj.narrow_helper('IDL:omg.org/IOP/Codec:1.0');
  if p <> nil then
    result := ICodec(p)
end;

class function TCodec.narrow_helper2(const obj: IORBObject): Boolean;
begin
  result := obj._repoid = 'IDL:omg.org/IOP/Codec:1.0'
end;

//***********************************************************
// TEncoding_marshaller
//***********************************************************
function TEncoding_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  struct: pi_int.TEncoding;
begin
  result := false;
  if not stat_short.demarshal(dec,@struct.format) then exit;
  if not stat_octet.demarshal(dec,@struct.major_version) then exit;
  if not stat_octet.demarshal(dec,@struct.minor_version) then exit;
  pi_int.TEncoding(addr^) := struct;
  result := true;
end;

procedure TEncoding_marshaller.marshal(enc: IEncoder;const addr : Pointer);
var
  struct: pi_int.TEncoding;
begin
  struct := pi_int.TEncoding(addr^);
  stat_short.marshal(enc,@struct.format);
  stat_octet.marshal(enc,@struct.major_version);
  stat_octet.marshal(enc,@struct.minor_version);
end;

procedure TEncoding_marshaller._free(var addr: Pointer);
begin
{$HINTS OFF}
  System.Finalize(pi_int.TEncoding(addr^));
{$HINTS ON}
  FreeMem(addr);
end;

procedure TEncoding_marshaller._create(var addr: Pointer);
begin
  addr := AllocMem(sizeOf(pi_int.TEncoding));
{$HINTS OFF}
  System.Initialize(pi_int.TEncoding(addr^));
{$HINTS ON}
end;

procedure TEncoding_marshaller._assign(dst, src: Pointer);
begin
  pi_int.TEncoding(dst^) := pi_int.TEncoding(src^);
end;

function TEncoding_marshaller.typecode: ITypeCode;
begin
  result := _tc_Encoding.typecode;
end;

//***********************************************************
// TUnknownEncoding
//***********************************************************
constructor TUnknownEncoding.Create(ex: TUnknownEncoding);
begin
  inherited Create();
end;

procedure TUnknownEncoding.throw;
begin
  raise TUnknownEncoding.Create(self);
end;

function TUnknownEncoding.clone(): IORBException;
begin
  result := TUnknownEncoding.Create(self);
end;

procedure TUnknownEncoding.encode(const enc: IEncoder);
begin
  raise MARSHAL.Create;
end;

procedure TUnknownEncoding.encode_any(const a: IAny);
begin
  raise MARSHAL.Create;
end;

constructor TUnknownEncoding.Create();
begin
  inherited Create();
end;

function TUnknownEncoding.repoid(): RepositoryID;
begin
  result := 'IDL:omg.org/IOP/CodecFactory/UnknownEncoding:1.0';
end;

//***********************************************************
// TCodecFactory
//***********************************************************
function TCodecFactory.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:omg.org/IOP/CodecFactory:1.0' then
    begin
      result := Pointer(self as ICodecFactory);
      exit;
    end;
end;

class function TCodecFactory._narrow(const obj : IORBObject): ICodecFactory;
var
  p: Pointer;
begin
  result := nil;
  if obj = nil then exit;
  p := obj.narrow_helper('IDL:omg.org/IOP/CodecFactory:1.0');
  if p <> nil then
    result := ICodecFactory(p)
end;

class function TCodecFactory.narrow_helper2(const obj: IORBObject): Boolean;
begin
  result := obj._repoid = 'IDL:omg.org/IOP/CodecFactory:1.0'
end;

//***********************************************************
// TInterceptor
//***********************************************************
function TInterceptor.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:omg.org/PortableInterceptor/Interceptor:1.0' then
    begin
      result := Pointer(self as IInterceptor);
      exit;
    end;
end;

class function TInterceptor._narrow(const obj : IORBObject): IInterceptor;
var
  p: Pointer;
begin
  result := nil;
  if obj = nil then exit;
  p := obj.narrow_helper('IDL:omg.org/PortableInterceptor/Interceptor:1.0');
  if p <> nil then
    result := IInterceptor(p)
end;

class function TInterceptor.narrow_helper2(const obj: IORBObject): Boolean;
begin
  result := obj._repoid = 'IDL:omg.org/PortableInterceptor/Interceptor:1.0'
end;

//***********************************************************
// TForwardRequest_marshaller
//***********************************************************
function TForwardRequest_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  repoid: RepositoryId;
  _forward: IORBObject;
  _permanent: Boolean;
begin
  result := false;
  if not dec.except_begin(repoid) then exit;
  if not stat_object.demarshal(dec,@_forward) then exit;
  IForwardRequest(addr^).forward(_forward);
  if not stat_boolean.demarshal(dec,@_permanent) then exit;
  IForwardRequest(addr^).permanent(_permanent);
  if not dec.except_end then exit;
  result := true;
end;

procedure TForwardRequest_marshaller.marshal(enc: IEncoder;const addr : Pointer);
var
  _forward: IORBObject;
  _permanent: Boolean;
begin
  enc.except_begin('IDL:omg.org/PortableInterceptor/ForwardRequest:1.0');
  _forward:= IForwardRequest(addr^).forward;
  stat_object.marshal(enc,@_forward);
  _permanent:= IForwardRequest(addr^).permanent;
  stat_boolean.marshal(enc,@_permanent);
  enc.except_end;
end;

procedure TForwardRequest_marshaller._free(var addr: Pointer);
begin
  IForwardRequest(addr^) := nil;
end;

procedure TForwardRequest_marshaller._create(var addr: Pointer);
begin
  IForwardRequest(addr^) := TForwardRequest.Create();
end;

procedure TForwardRequest_marshaller._assign(dst, src: Pointer);
begin
  IForwardRequest(dst^) := IForwardRequest(src^);
end;

function TForwardRequest_marshaller.typecode: ITypeCode;
begin
  result := _tc_ForwardRequest.typecode;
end;

//***********************************************************
// TForwardRequest
//***********************************************************
constructor TForwardRequest.Create(ex: TForwardRequest);
begin
  Fforward:= ex.forward;
  Fpermanent:= ex.permanent;
  inherited Create();
end;

procedure TForwardRequest.throw;
begin
  raise TForwardRequest.Create(self);
end;

function TForwardRequest.clone(): IORBException;
begin
  result := TForwardRequest.Create(self);
end;

procedure TForwardRequest.encode(const enc: IEncoder);
var
  int : IForwardRequest;
begin
  int := self;
  ForwardRequest_marshaller.marshal(enc,@int);
end;

procedure TForwardRequest.encode_any(const a: IAny);
var
  stat: IStaticAny;
begin
  stat := StaticAny(ForwardRequest_marshaller, Self);
  a.from_static_any(stat);
end;

constructor TForwardRequest.Create(_forward: IORBObject;_permanent: Boolean);
begin
  Fforward := _forward;
  Fpermanent := _permanent;
  inherited Create();
end;

function TForwardRequest.repoid(): RepositoryID;
begin
  result := 'IDL:omg.org/PortableInterceptor/ForwardRequest:1.0';
end;

procedure TForwardRequest.forward(const val: IORBObject);
begin
  Fforward := val;
end;

function TForwardRequest.forward: IORBObject;
begin
  result := Fforward;
end;

procedure TForwardRequest.permanent(const val: Boolean);
begin
  Fpermanent := val;
end;

function TForwardRequest.permanent: Boolean;
begin
  result := Fpermanent;
end;

//***********************************************************
// TInvalidSlot_marshaller
//***********************************************************
function TInvalidSlot_marshaller.demarshal(dec: IDecoder;const addr : Pointer): Boolean;
var
  repoid: RepositoryId;
begin
  result := false;
  if not dec.except_begin(repoid) then exit;
  if not dec.except_end then exit;
  result := true;
end;

procedure TInvalidSlot_marshaller.marshal(enc: IEncoder;const addr : Pointer);
begin
  enc.except_begin('IDL:omg.org/PortableInterceptor/InvalidSlot:1.0');
  enc.except_end;
end;

procedure TInvalidSlot_marshaller._free(var addr: Pointer);
begin
  IInvalidSlot(addr^) := nil;
end;

procedure TInvalidSlot_marshaller._create(var addr: Pointer);
begin
  IInvalidSlot(addr^) := TInvalidSlot.Create();
end;

procedure TInvalidSlot_marshaller._assign(dst, src: Pointer);
begin
  IInvalidSlot(dst^) := IInvalidSlot(src^);
end;

function TInvalidSlot_marshaller.typecode: ITypeCode;
begin
  result := _tc_InvalidSlot.typecode;
end;

//***********************************************************
// TInvalidSlot
//***********************************************************
constructor TInvalidSlot.Create(ex: TInvalidSlot);
begin
  inherited Create();
end;

procedure TInvalidSlot.throw;
begin
  raise TInvalidSlot.Create(self);
end;

function TInvalidSlot.clone(): IORBException;
begin
  result := TInvalidSlot.Create(self);
end;

procedure TInvalidSlot.encode(const enc: IEncoder);
var
  int : IInvalidSlot;
begin
  int := self;
  InvalidSlot_marshaller.marshal(enc,@int);
end;

procedure TInvalidSlot.encode_any(const a: IAny);
var
  stat: IStaticAny;
begin
  stat := StaticAny(InvalidSlot_marshaller, Self);
  a.from_static_any(stat);
end;

constructor TInvalidSlot.Create();
begin
  inherited Create();
end;

function TInvalidSlot.repoid(): RepositoryID;
begin
  result := 'IDL:omg.org/PortableInterceptor/InvalidSlot:1.0';
end;

//***********************************************************
// TCurrent
//***********************************************************
function TCurrent.narrow_helper(const str: RepositoryID): Pointer;
begin
  if str = 'IDL:omg.org/PortableInterceptor/Current:1.0' then
    begin
      result := Pointer(self as ICurrent);
      exit;
    end;
  result := inherited narrow_helper(str);
end;

class function TCurrent._narrow(const obj : IORBObject): ICurrent;
var
  p: Pointer;
begin
  result := nil;
  if obj = nil then exit;
  p := obj.narrow_helper('IDL:omg.org/PortableInterceptor/Current:1.0');
  if p <> nil then
    result := ICurrent(p)
end;

class function TCurrent.narrow_helper2(const obj: IORBObject): Boolean;
begin
  result := obj._repoid = 'IDL:omg.org/PortableInterceptor/Current:1.0'
end;

//***********************************************************
// TRequestInfo
//***********************************************************
function TRequestInfo.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:omg.org/PortableInterceptor/RequestInfo:1.0' then
    begin
      result := Pointer(self as IRequestInfo);
      exit;
    end;
end;

class function TRequestInfo._narrow(const obj : IORBObject): IRequestInfo;
var
  p: Pointer;
begin
  result := nil;
  if obj = nil then exit;
  p := obj.narrow_helper('IDL:omg.org/PortableInterceptor/RequestInfo:1.0');
  if p <> nil then
    result := IRequestInfo(p)
end;

class function TRequestInfo.narrow_helper2(const obj: IORBObject): Boolean;
begin
  result := obj._repoid = 'IDL:omg.org/PortableInterceptor/RequestInfo:1.0'
end;

//***********************************************************
// TClientRequestInfo
//***********************************************************
function TClientRequestInfo.narrow_helper(const str: RepositoryID): Pointer;
begin
  if str = 'IDL:omg.org/PortableInterceptor/ClientRequestInfo:1.0' then
    begin
      result := Pointer(self as IClientRequestInfo);
      exit;
    end;
  result := inherited narrow_helper(str);
end;

class function TClientRequestInfo._narrow(const obj : IORBObject): IClientRequestInfo;
var
  p: Pointer;
begin
  result := nil;
  if obj = nil then exit;
  p := obj.narrow_helper('IDL:omg.org/PortableInterceptor/ClientRequestInfo:1.0');
  if p <> nil then
    result := IClientRequestInfo(p)
end;

class function TClientRequestInfo.narrow_helper2(const obj: IORBObject): Boolean;
begin
  result := obj._repoid = 'IDL:omg.org/PortableInterceptor/ClientRequestInfo:1.0'
end;

//***********************************************************
// TServerRequestInfo
//***********************************************************
function TServerRequestInfo.narrow_helper(const str: RepositoryID): Pointer;
begin
  if str = 'IDL:omg.org/PortableInterceptor/ServerRequestInfo:1.0' then
    begin
      result := Pointer(self as IServerRequestInfo);
      exit;
    end;
  result := inherited narrow_helper(str);
end;

class function TServerRequestInfo._narrow(const obj : IORBObject): IServerRequestInfo;
var
  p: Pointer;
begin
  result := nil;
  if obj = nil then exit;
  p := obj.narrow_helper('IDL:omg.org/PortableInterceptor/ServerRequestInfo:1.0');
  if p <> nil then
    result := IServerRequestInfo(p)
end;

class function TServerRequestInfo.narrow_helper2(const obj: IORBObject): Boolean;
begin
  result := obj._repoid = 'IDL:omg.org/PortableInterceptor/ServerRequestInfo:1.0'
end;

//***********************************************************
// TClientRequestInterceptor
//***********************************************************
function TClientRequestInterceptor.narrow_helper(const str: RepositoryID): Pointer;
begin
  if str = 'IDL:omg.org/PortableInterceptor/ClientRequestInterceptor:1.0' then
    begin
      result := Pointer(self as IClientRequestInterceptor);
      exit;
    end;
  result := inherited narrow_helper(str);
end;

class function TClientRequestInterceptor._narrow(const obj : IORBObject): IClientRequestInterceptor;
var
  p: Pointer;
begin
  result := nil;
  if obj = nil then exit;
  p := obj.narrow_helper('IDL:omg.org/PortableInterceptor/ClientRequestInterceptor:1.0');
  if p <> nil then
    result := IClientRequestInterceptor(p)
end;

class function TClientRequestInterceptor.narrow_helper2(const obj: IORBObject): Boolean;
begin
  result := obj._repoid = 'IDL:omg.org/PortableInterceptor/ClientRequestInterceptor:1.0'
end;

//***********************************************************
// TServerRequestInterceptor
//***********************************************************
function TServerRequestInterceptor.narrow_helper(const str: RepositoryID): Pointer;
begin
  if str = 'IDL:omg.org/PortableInterceptor/ServerRequestInterceptor:1.0' then
    begin
      result := Pointer(self as IServerRequestInterceptor);
      exit;
    end;
  result := inherited narrow_helper(str);
end;

class function TServerRequestInterceptor._narrow(const obj : IORBObject): IServerRequestInterceptor;
var
  p: Pointer;
begin
  result := nil;
  if obj = nil then exit;
  p := obj.narrow_helper('IDL:omg.org/PortableInterceptor/ServerRequestInterceptor:1.0');
  if p <> nil then
    result := IServerRequestInterceptor(p)
end;

class function TServerRequestInterceptor.narrow_helper2(const obj: IORBObject): Boolean;
begin
  result := obj._repoid = 'IDL:omg.org/PortableInterceptor/ServerRequestInterceptor:1.0'
end;

//***********************************************************
// TIORInfo
//***********************************************************
function TIORInfo.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:omg.org/PortableInterceptor/IORInfo:1.0' then
    begin
      result := Pointer(self as IIORInfo);
      exit;
    end;
end;

class function TIORInfo._narrow(const obj : IORBObject): IIORInfo;
var
  p: Pointer;
begin
  result := nil;
  if obj = nil then exit;
  p := obj.narrow_helper('IDL:omg.org/PortableInterceptor/IORInfo:1.0');
  if p <> nil then
    result := IIORInfo(p)
end;

class function TIORInfo.narrow_helper2(const obj: IORBObject): Boolean;
begin
  result := obj._repoid = 'IDL:omg.org/PortableInterceptor/IORInfo:1.0'
end;

//***********************************************************
// TIORInterceptor
//***********************************************************
function TIORInterceptor.narrow_helper(const str: RepositoryID): Pointer;
begin
  if str = 'IDL:omg.org/PortableInterceptor/IORInterceptor:1.0' then
    begin
      result := Pointer(self as IIORInterceptor);
      exit;
    end;
  result := inherited narrow_helper(str);
end;

class function TIORInterceptor._narrow(const obj : IORBObject): IIORInterceptor;
var
  p: Pointer;
begin
  result := nil;
  if obj = nil then exit;
  p := obj.narrow_helper('IDL:omg.org/PortableInterceptor/IORInterceptor:1.0');
  if p <> nil then
    result := IIORInterceptor(p)
end;

class function TIORInterceptor.narrow_helper2(const obj: IORBObject): Boolean;
begin
  result := obj._repoid = 'IDL:omg.org/PortableInterceptor/IORInterceptor:1.0'
end;

//***********************************************************
// TPolicyFactory
//***********************************************************
function TPolicyFactory.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:omg.org/PortableInterceptor/PolicyFactory:1.0' then
    begin
      result := Pointer(self as IPolicyFactory);
      exit;
    end;
end;

class function TPolicyFactory._narrow(const obj : IORBObject): IPolicyFactory;
var
  p: Pointer;
begin
  result := nil;
  if obj = nil then exit;
  p := obj.narrow_helper('IDL:omg.org/PortableInterceptor/PolicyFactory:1.0');
  if p <> nil then
    result := IPolicyFactory(p)
end;

class function TPolicyFactory.narrow_helper2(const obj: IORBObject): Boolean;
begin
  result := obj._repoid = 'IDL:omg.org/PortableInterceptor/PolicyFactory:1.0'
end;

//***********************************************************
// TDuplicateName
//***********************************************************
constructor TDuplicateName.Create(ex: TDuplicateName);
begin
  Fname:= ex.name;
  inherited Create();
end;

procedure TDuplicateName.throw;
begin
  raise TDuplicateName.Create(self);
end;

function TDuplicateName.clone(): IORBException;
begin
  result := TDuplicateName.Create(self);
end;

procedure TDuplicateName.encode(const enc: IEncoder);
begin
  raise MARSHAL.Create;
end;

procedure TDuplicateName.encode_any(const a: IAny);
begin
  raise MARSHAL.Create;
end;

constructor TDuplicateName.Create(_name: AnsiString);
begin
  Fname := _name;
  inherited Create();
end;

function TDuplicateName.repoid(): RepositoryID;
begin
  result := 'IDL:omg.org/PortableInterceptor/ORBInitInfo/DuplicateName:1.0';
end;

procedure TDuplicateName.name(const val: AnsiString);
begin
  Fname := val;
end;

function TDuplicateName.name: AnsiString;
begin
  result := Fname;
end;

//***********************************************************
// TInvalidName
//***********************************************************
constructor TInvalidName.Create(ex: TInvalidName);
begin
  inherited Create();
end;

procedure TInvalidName.throw;
begin
  raise TInvalidName.Create(self);
end;

function TInvalidName.clone(): IORBException;
begin
  result := TInvalidName.Create(self);
end;

procedure TInvalidName.encode(const enc: IEncoder);
begin
  raise MARSHAL.Create;
end;

procedure TInvalidName.encode_any(const a: IAny);
begin
  raise MARSHAL.Create;
end;

constructor TInvalidName.Create();
begin
  inherited Create();
end;

function TInvalidName.repoid(): RepositoryID;
begin
  result := 'IDL:omg.org/PortableInterceptor/ORBInitInfo/InvalidName:1.0';
end;

//***********************************************************
// TORBInitInfo
//***********************************************************
function TORBInitInfo.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:omg.org/PortableInterceptor/ORBInitInfo:1.0' then
    begin
      result := Pointer(self as IORBInitInfo);
      exit;
    end;
end;

class function TORBInitInfo._narrow(const obj : IORBObject): IORBInitInfo;
var
  p: Pointer;
begin
  result := nil;
  if obj = nil then exit;
  p := obj.narrow_helper('IDL:omg.org/PortableInterceptor/ORBInitInfo:1.0');
  if p <> nil then
    result := IORBInitInfo(p)
end;

class function TORBInitInfo.narrow_helper2(const obj: IORBObject): Boolean;
begin
  result := obj._repoid = 'IDL:omg.org/PortableInterceptor/ORBInitInfo:1.0'
end;

//***********************************************************
// TORBInitializer
//***********************************************************
function TORBInitializer.narrow_helper(const str: RepositoryID): Pointer;
begin
  result := nil;
  if str = 'IDL:omg.org/PortableInterceptor/ORBInitializer:1.0' then
    begin
      result := Pointer(self as IORBInitializer);
      exit;
    end;
end;

class function TORBInitializer._narrow(const obj : IORBObject): IORBInitializer;
var
  p: Pointer;
begin
  result := nil;
  if obj = nil then exit;
  p := obj.narrow_helper('IDL:omg.org/PortableInterceptor/ORBInitializer:1.0');
  if p <> nil then
    result := IORBInitializer(p)
end;

class function TORBInitializer.narrow_helper2(const obj: IORBObject): Boolean;
begin
  result := obj._repoid = 'IDL:omg.org/PortableInterceptor/ORBInitializer:1.0'
end;

initialization
  Encoding_marshaller := TEncoding_marshaller.Create();
  ForwardRequest_marshaller := TForwardRequest_marshaller.Create();
  InvalidSlot_marshaller := TInvalidSlot_marshaller.Create();
  _tc_Encoding := CreateTypeCodeConst('010000000f000000c4000000010000001d00000049444c3a6f6d672e6f72672f494f502f456e636f64696e673a312e3000000000090000'+
    '00456e636f64696e67000000000300000007000000666f726d617400001500000044000000010000002300000049444c3a6f6d672e6f72'+
    '672f494f502f456e636f64696e67466f726d61743a312e3000000f000000456e636f64696e67466f726d61740000020000000e0000006d'+
    '616a6f725f76657273696f6e0000000a0000000e0000006d696e6f725f76657273696f6e0000000a000000');
  _tc_ForwardRequest := CreateTypeCodeConst('010000001600000054000000010000003300000049444c3a6f6d672e6f72672f506f727461626c65496e746572636570746f722f466f72'+
    '77617264526571756573743a312e3000000f000000466f727761726452657175657374000000000000');
  _tc_InvalidSlot := CreateTypeCodeConst('01000000160000004c000000010000003000000049444c3a6f6d672e6f72672f506f727461626c65496e746572636570746f722f496e76'+
    '616c6964536c6f743a312e30000c000000496e76616c6964536c6f740000000000');
end.
