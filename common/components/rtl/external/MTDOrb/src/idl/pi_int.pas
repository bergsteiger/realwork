// ***************************************************************************
//                                                                            
// Generated by the MTDORB IDL-to-Pascal Translator (1.0.1b1), 21.09.2010 13:25
//                                                                            
// Copyright (c) 2002 - 2004                                                  
// Millennium Group.                                                          
// Samara, Russia                                                             
//                                                                            
// All Rights Reserved                                                        
//                                                                            
// ***************************************************************************
// Compiled with parameters: " -i..\..\idl ..\..\idl\pi.idl" 
//                                                                            
unit pi_int;

{$MINENUMSIZE 4}

interface

uses
  orbtypes, code_int, orb_int, policy_int, value_int, except_int;

const

  ENCODING_CDR_ENCAPS = 0;
  SUCCESSFUL = 0;
  SYSTEM_EXCEPTION = 1;
  USER_EXCEPTION = 2;
  LOCATION_FORWARD = 3;
  LOCATION_FORWARD_PERMANENT = 4;
  TRANSPORT_RETRY = 5;

type

  IInvalidTypeForEncoding = interface(IUserException)
  ['{612D8DFC-DB84-40A9-A6EE-015127F5768E}']
  end;

  IFormatMismatch = interface(IUserException)
  ['{76544119-C9C6-4819-9E22-9EC831A3139D}']
  end;

  ITypeMismatch = interface(IUserException)
  ['{749C1162-3EDB-4DE2-A829-E15E8F561A6E}']
  end;

  ICodec = interface
  ['{AB0ED334-28BC-4FA6-9F0B-397C0E46DA21}']
    function encode(const data: IAny): TOctetSeq;
    function decode(const data: TOctetSeq): IAny;
    function encode_value(const data: IAny): TOctetSeq;
    function decode_value(const data: TOctetSeq; const tc: ITypeCode): IAny;
  end;

  TEncodingFormat = Short;

  TEncoding = record
    format : TEncodingFormat;
    major_version : octet;
    minor_version : octet;
  end;

  IUnknownEncoding = interface(IUserException)
  ['{252D8EFA-0E78-4160-98C5-7921A1CF860E}']
  end;

  ICodecFactory = interface
  ['{C7FC12EE-3209-44E6-A004-7E317A367A00}']
    function create_codec(const enc: TEncoding): ICodec;
  end;

// module PortableInterceptor types

  IInterceptor = interface
  ['{E394922C-246F-441F-927A-FCB92D95CF7C}']
    procedure _destroy;
    function _get_name: AnsiString;
    property name: AnsiString read _get_name;
  end;

  IForwardRequest = interface(IUserException)
  ['{E5E5CA34-243B-45BB-ABA2-37D0B14BBF23}']
    function forward: IORBObject; overload;
    procedure forward(const val : IORBObject); overload;
    function permanent: Boolean; overload;
    procedure permanent(const val : Boolean); overload;
  end;

  TReplyStatus = Short;

  TSlotId = _ulong;

  IInvalidSlot = interface(IUserException)
  ['{17075E4B-027E-44E8-B7D2-EB05A00C9A74}']
  end;

  ICurrent = interface(ICORBA_Current)
  ['{3314DFB9-C9B8-4BCB-A8D5-68956AE6DD5B}']
    function get_slot(const id: TSlotId): IAny;
    procedure set_slot(const id: TSlotId; const data: IAny);
  end;

  IRequestInfo = interface
  ['{A5584B43-2118-44C4-B981-978D61A999CE}']
    function get_slot(const id: TSlotId): IAny;
    function get_request_service_context(const id: TServiceId): TServiceContext;
    function get_reply_service_context(const id: TServiceId): TServiceContext;
    function _get_request_id: _ulong;
    function _get_operation: AnsiString;
    function _get_arguments: TParameterList;
    function _get_exceptions: TExceptionList;
    function _get_contexts: TContextList;
    function _get_operation_context: TRequestContext;
    function _get_result: IAny;
    function _get_response_expected: Boolean;
    function _get_sync_scope: TSyncScope;
    function _get_reply_status: TReplyStatus;
    function _get_forward_reference: IORBObject;
    property request_id: _ulong read _get_request_id;
    property operation: AnsiString read _get_operation;
    property arguments: TParameterList read _get_arguments;
    property exceptions: TExceptionList read _get_exceptions;
    property contexts: TContextList read _get_contexts;
    property operation_context: TRequestContext read _get_operation_context;
    property _result: IAny read _get_result;
    property response_expected: Boolean read _get_response_expected;
    property sync_scope: TSyncScope read _get_sync_scope;
    property reply_status: TReplyStatus read _get_reply_status;
    property forward_reference: IORBObject read _get_forward_reference;
  end;

  IClientRequestInfo = interface(IRequestInfo)
  ['{394226AE-4614-48C8-A920-2EA9F7CCDC60}']
    function get_effective_component(const id: TComponentId): TTaggedComponent;
    function get_effective_components(const id: TComponentId): TTaggedComponentSeq;
    function get_request_policy(const _type: TPolicyType): IPolicy;
    procedure add_request_service_context(const service_context: TServiceContext; const replace: Boolean);
    function _get_target: IORBObject;
    function _get_effective_target: IORBObject;
    function _get_effective_profile: TTaggedProfile;
    function _get_received_exception: IAny;
    function _get_received_exception_id: TRepositoryId;
    property target: IORBObject read _get_target;
    property effective_target: IORBObject read _get_effective_target;
    property effective_profile: TTaggedProfile read _get_effective_profile;
    property received_exception: IAny read _get_received_exception;
    property received_exception_id: TRepositoryId read _get_received_exception_id;
  end;

  IServerRequestInfo = interface(IRequestInfo)
  ['{2BED7318-9A64-4971-9A0C-438B4D79A478}']
    function get_server_policy(const _type: TPolicyType): IPolicy;
    procedure set_slot(const id: TSlotId; const data: IAny);
    function target_is_a(const id: TRepositoryId): Boolean;
    procedure add_reply_service_context(const service_context: TServiceContext; const replace: Boolean);
    function _get_sending_exception: IAny;
    function _get_object_id: TOctetSeq;
    function _get_adapter_id: TOctetSeq;
    function _get_target_most_derived_interface: TRepositoryId;
    property sending_exception: IAny read _get_sending_exception;
    property object_id: TOctetSeq read _get_object_id;
    property adapter_id: TOctetSeq read _get_adapter_id;
    property target_most_derived_interface: TRepositoryId read _get_target_most_derived_interface;
  end;

  IClientRequestInterceptor = interface(IInterceptor)
  ['{78BFF3AB-E77E-4BC8-B259-D4779AA12EBA}']
    procedure send_request(const ri: IClientRequestInfo);
    procedure send_poll(const ri: IClientRequestInfo);
    procedure receive_reply(const ri: IClientRequestInfo);
    procedure receive_exception(const ri: IClientRequestInfo);
    procedure receive_other(const ri: IClientRequestInfo);
  end;

  IServerRequestInterceptor = interface(IInterceptor)
  ['{6E7DCED3-F618-429A-A50D-92D09B5D8806}']
    procedure receive_request_service_contexts(const ri: IServerRequestInfo);
    procedure receive_request(const ri: IServerRequestInfo);
    procedure send_reply(const ri: IServerRequestInfo);
    procedure send_exception(const ri: IServerRequestInfo);
    procedure send_other(const ri: IServerRequestInfo);
  end;

  IIORInfo = interface
  ['{4D42F51B-AF01-4EC2-863C-8C89B2935464}']
    function get_effective_policy(const _type: TPolicyType): IPolicy;
    procedure add_ior_component(const comp: TTaggedComponent);
    procedure add_ior_component_to_profile(const comp: TTaggedComponent; const profile_id: TProfileId);
  end;

  IIORInterceptor = interface(IInterceptor)
  ['{0494541F-B532-459B-8695-1DB35B2C6BF7}']
    procedure establish_components(const info: IIORInfo);
  end;

  IPolicyFactory = interface
  ['{AC6830C1-6B5F-43E1-A9AD-E46BC9B46907}']
    function create_policy(const _type: TPolicyType; const value: IAny): IPolicy;
  end;

  TObjectId = AnsiString;

  IDuplicateName = interface(IUserException)
  ['{35BCACBC-0423-4AF0-A4A4-FA2EB2F1EDD8}']
    function name: AnsiString; overload;
    procedure name(const val : AnsiString); overload;
  end;

  IInvalidName = interface(IUserException)
  ['{8DF6B955-4BD0-488F-A9A7-C36D3D7B5E7D}']
  end;

  IORBInitInfo = interface
  ['{8A8A0BD2-98C1-438C-BC4A-7AE55F43CDC5}']
    procedure register_initial_reference(const id: TObjectId; const obj: IORBObject);
    function resolve_initial_references(const id: TObjectId): IORBObject;
    procedure add_client_request_interceptor(const interceptor: IClientRequestInterceptor);
    procedure add_server_request_interceptor(const interceptor: IServerRequestInterceptor);
    procedure add_ior_interceptor(const interceptor: IIORInterceptor);
    function allocate_slot_id: TSlotId;
    procedure register_policy_factory(const _type: TPolicyType; const policy_factory: IPolicyFactory);
    function _get_arguments: TStringSeq;
    function _get_orb_id: AnsiString;
    function _get_codec_factory: ICodecFactory;
    property arguments: TStringSeq read _get_arguments;
    property orb_id: AnsiString read _get_orb_id;
    property codec_factory: ICodecFactory read _get_codec_factory;
  end;

  IORBInitializer = interface
  ['{639569D1-97D3-4B3F-B241-02A0C05D49C2}']
    procedure pre_init(const info: IORBInitInfo);
    procedure post_init(const info: IORBInitInfo);
  end;

implementation

end.
