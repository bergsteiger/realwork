// ***************************************************************************
//                                                                            
// Generated by the MTDORB IDL-to-Pascal Translator (1.0.b5), 12.07.2004 18:53
//                                                                            
// Copyright (c) 2002 - 2003                                                  
// Millennium Group.                                                          
// Samara, Russia                                                             
//                                                                            
// All Rights Reserved                                                        
//                                                                            
// ***************************************************************************
unit seq1_octet_org_omg_boxedRMI;

interface

uses
  Classes, orb_int, orb, req_int, code_int, imr, imr_int, env_int, stdstat, std_seq,
  orbtypes, exceptions, except_int, seq1_octet_org_omg_boxedRMI_int, value_int, value,
  poa_int, poa;

type

  {** RMI:[B:0000000000000000 } 
  Torg_omg_boxedRMI_seq1_octet = class(TValueBase,Iorg_omg_boxedRMI_seq1_octet,IValueBase)
  protected
    FValue : octet_seq;
    function _copy_value : IValueBase; override;
    function _value : octet_seq; overload;
    procedure _value(val : octet_seq); overload;
    procedure _marshal_members(const enc: IEncoder); override;
    procedure _get_marshal_info(const str: TStrings;out chunked: Boolean); override;
    function  _demarshal_members(const dec: Idecoder): Boolean; override;
    function narrow_helper(const repoid: string): Pointer; override;
  public
    constructor Create(val:octet_seq); overload;
    constructor Create(val:Iorg_omg_boxedRMI_seq1_octet); overload;
    class function _downcast(const vb : IValueBase): Iorg_omg_boxedRMI_seq1_octet;
  end;

  Torg_omg_boxedRMI_seq1_octet_marshaller = class(TAbstractStat,IStaticTypeInfo)
  protected
    procedure _assign(dst,src: Pointer); override;
    function demarshal(dec: IDecoder;const addr : Pointer): Boolean;
    procedure marshal(enc: IEncoder; const addr : Pointer);
    procedure _create(var addr: Pointer); override;
    procedure _free(var addr: Pointer);
    function typecode: ITypeCode; override;
  end;

  function org_omg_boxedRMI_seq1_octet_to_any(const val: Iorg_omg_boxedRMI_seq1_octet): IAny;
  function any_to_org_omg_boxedRMI_seq1_octet(const a: IAny; var val: Iorg_omg_boxedRMI_seq1_octet): Boolean;

var
  org_omg_boxedRMI_seq1_octet_marshaller : IStaticTypeInfo;
  _tc_org_omg_boxedRMI_seq1_octet : ITypeCodeConst;

implementation

uses
  SysUtils, any, tcode, static, throw;

//***********************************************************
// Torg_omg_boxedRMI_seq1_octet
//***********************************************************
constructor Torg_omg_boxedRMI_seq1_octet.Create(val: octet_seq);
begin
  inherited Create();
  FValue := val;
end;

constructor Torg_omg_boxedRMI_seq1_octet.Create(val: Iorg_omg_boxedRMI_seq1_octet);
begin
  inherited Create();
  FValue := val._value;
end;

function Torg_omg_boxedRMI_seq1_octet._value: octet_seq;
begin
  result := FValue;
end;

procedure Torg_omg_boxedRMI_seq1_octet._value(val : octet_seq);
begin
  FValue := val;
end;

function Torg_omg_boxedRMI_seq1_octet.narrow_helper(const repoid: string): Pointer;
begin
  result := nil;
  if strcomp(PAnsiChar(repoid),'RMI:[B:0000000000000000') = 0 then
    result := Pointer(Self as Iorg_omg_boxedRMI_seq1_octet);
end;

class function Torg_omg_boxedRMI_seq1_octet._downcast(const vb : IValueBase): Iorg_omg_boxedRMI_seq1_octet;
var
  ptr: pointer;
begin
  result := nil;
  if vb <> nil then
    begin
      ptr := vb.narrow_helper('RMI:[B:0000000000000000');
      if ptr <> nil then
        result := Iorg_omg_boxedRMI_seq1_octet(ptr);
    end;
end;

procedure Torg_omg_boxedRMI_seq1_octet._get_marshal_info(const str: TStrings; out chunked: Boolean);
begin
  str.Add('RMI:[B:0000000000000000');
  chunked := false;
end;

procedure Torg_omg_boxedRMI_seq1_octet._marshal_members(const enc: IEncoder);
begin
  stat_seq_octet.marshal(enc,@FValue);
end;

function  Torg_omg_boxedRMI_seq1_octet._demarshal_members(const dec: IDecoder): Boolean;
begin
  result := false;
  if not stat_seq_octet.demarshal(dec,@FValue) then exit;
  result := true;
end;

function  Torg_omg_boxedRMI_seq1_octet._copy_value: IValueBase;
begin
  result := Torg_omg_boxedRMI_seq1_octet.Create(self) as IValueBase;
end;

//***********************************************************
// Torg_omg_boxedRMI_seq1_octet_marshaller
//***********************************************************
procedure Torg_omg_boxedRMI_seq1_octet_marshaller._create(var addr: Pointer);
begin
  Iorg_omg_boxedRMI_seq1_octet(addr^) := Torg_omg_boxedRMI_seq1_octet.Create as Iorg_omg_boxedRMI_seq1_octet;
end;

procedure Torg_omg_boxedRMI_seq1_octet_marshaller._assign(dst, src: Pointer);
begin
  Iorg_omg_boxedRMI_seq1_octet(dst^) := Iorg_omg_boxedRMI_seq1_octet(src^);
end;

procedure Torg_omg_boxedRMI_seq1_octet_marshaller._free(var addr: Pointer);
begin
  Iorg_omg_boxedRMI_seq1_octet(addr^) := nil;
end;

function Torg_omg_boxedRMI_seq1_octet_marshaller.demarshal(dec: IDecoder;
  const addr: Pointer): Boolean;
var
  vb : IValueBase;
begin
  result := TValueBase._demarshal(dec,vb,'RMI:[B:0000000000000000');
  if not result then exit;
  Iorg_omg_boxedRMI_seq1_octet(addr^) := Torg_omg_boxedRMI_seq1_octet._downcast(vb);
  result := (vb = nil) or (vb <> nil) and (Pointer(addr^) <> nil);
end;

procedure Torg_omg_boxedRMI_seq1_octet_marshaller.marshal(enc: IEncoder; const addr: Pointer);
begin
  TValueBase._marshal(enc,Iorg_omg_boxedRMI_seq1_octet(addr^) as IValueBase);
end;

function Torg_omg_boxedRMI_seq1_octet_marshaller.typecode: ITypeCode;
begin
  result := _tc_org_omg_boxedRMI_seq1_octet.typecode;
end;

function any_to_org_omg_boxedRMI_seq1_octet(const a: IAny; var val: Iorg_omg_boxedRMI_seq1_octet): Boolean;
var
  stat: IStaticAny;
begin
  stat := StaticAny(org_omg_boxedRMI_seq1_octet_marshaller,@val);
  result := a.to_static_any(stat);
end;

function org_omg_boxedRMI_seq1_octet_to_any(const val: Iorg_omg_boxedRMI_seq1_octet): IAny;
var
  stat: IStaticAny;
begin
  stat := StaticAny(org_omg_boxedRMI_seq1_octet_marshaller,@val);
  result := CreateAny;
  result.from_static_any(stat);
end;

initialization
  org_omg_boxedRMI_seq1_octet_marshaller := Torg_omg_boxedRMI_seq1_octet_marshaller.Create();
  _tc_org_omg_boxedRMI_seq1_octet := CreateTypeCodeConst('010000001e000000440000000100000018000000524d493a5b423a30303030303030303030303030303030000b000000736571315f6f63'+
    '7465740000130000000c000000010000000a00000000000000');
end.
