unit TestASCII85Decode;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, Stream, gtObject, DecodeIntf, Classes, ASCII85Decode, gtTypes,
  FileStream, ASCII85Stream, SysUtils, DUnitAssert, Dialogs;

type
  // Test methods for class TgtASCII85Decode

    TestTgtASCII85Decode = class(TAssertTestCase)

  public
    procedure SetUp; override;
    procedure TearDown; override;
  published                     
    procedure TestLookChar;
    procedure TestGetChar;
    procedure TestGetPosition;
    procedure TestReset;
  end;

implementation
var
    FgtASCII85Decode: TgtASCII85Decode;
    FInFile, FOutFile: TFileStream;
    FgtInFile,FgtOutFile: TgtFileStream;
    FOutStream: TgtStream;
    Lbuffer : Bytes;
    OutValue,i : Integer;


procedure TestTgtASCII85Decode.SetUp;
begin
  FInFile := TFileStream.Create('Filters\ASCII85Decode\Encode.txt', fmOpenRead);
  FgtInFile := TgtFileStream.Create(FInFile, 0, 0, False);
  FgtASCII85Decode := TgtASCII85Decode.create(FgtInFile);

  FOutFile := TFileStream.Create('Filters\ASCII85Decode\Decode.txt', fmOpenRead);
  FgtOutFile := TgtFileStream.Create(FOutFile, 0, 0, False);
end;

procedure TestTgtASCII85Decode.TearDown;
begin
  FreeAndNil(FgtASCII85Decode);
  FreeAndNil(FgtInFile);
  FreeAndNil(FInFile);
  FreeAndNil(FOutFile);
  FreeAndNil(FgtOutFile);
  FreeAndNil(FOutStream);
end;

procedure TestTgtASCII85Decode.TestLookChar;
var
  ReturnValue: Integer;
  OutValue : Integer;
begin
   FgtASCII85Decode.Reset;
   ReturnValue:= FgtAscii85Decode.LookChar;
   OutValue := FgtOutFile.LookChar;
   Assert.AreEqual(ReturnValue, OutValue);
  // TODO: Validate method results
end;

procedure TestTgtASCII85Decode.TestGetChar;
var
  LSin, LSout: string;
  LI: Integer;
begin
  LSin := '';
  LSout := '';
  FgtASCII85Decode.Reset;
  for LI := 0 to 10 do
  begin
    LSin := LSin + Char(FgtASCII85Decode.GetChar);
    LSout := LSout + Char(FgtOutFile.GetChar);
  end;

  Assert.AreEqualString(LSin, LSout);
end;

procedure TestTgtASCII85Decode.TestGetPosition;
var
  ReturnValue: Int64;
  LStream: TFileStream;
  I: Integer;
  Lbuffer: Bytes;

begin
  ReturnValue := FgtASCII85Decode.GetPosition;
  Assert.AreEqual(ReturnValue,0);

  // TODO: Validate method results
end;

procedure TestTgtASCII85Decode.TestReset;
var
  Position: Integer;
  LStream: TFileStream;
  I: Integer;
  Lbuffer: Bytes;

begin
  FgtAscii85Decode.Reset;
end;

initialization
// Register any test cases with the test runner

 RegisterTest(TestTgtASCII85Decode.Suite);


end.


