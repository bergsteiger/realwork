unit TestDecodeIntf;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, gtTypes, Stream, gtObject, gtInterface, DecodeIntf;

type
  // Test methods for class IgtDecodeIntf
  
  TestIgtDecodeIntf = class(TTestCase)
  strict private
    FIgtDecodeIntf: IgtDecodeIntf;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestLookChar;
    procedure TestGetChar;
    procedure TestGetPosition;
    procedure TestReadRawChar;
    procedure TestReset;
  end;
  // Test methods for class TgtDecode
  
  TestTgtDecode = class(TTestCase)
  strict private
    FgtDecode: TgtDecode;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestLookChar;
    procedure TestGetChar;
    procedure TestGetPosition;
    procedure TestReadRawChar;
    procedure TestReset;
  end;

implementation

procedure TestIgtDecodeIntf.SetUp;
begin
  // TODO: Initialize FIgtDecodeIntf
end;

procedure TestIgtDecodeIntf.TearDown;
begin
  FIgtDecodeIntf := nil;
end;

procedure TestIgtDecodeIntf.TestLookChar;
var
  ReturnValue: Integer;
begin
  ReturnValue := FIgtDecodeIntf.LookChar;
  // TODO: Validate method results
end;

procedure TestIgtDecodeIntf.TestGetChar;
var
  ReturnValue: Integer;
begin
  ReturnValue := FIgtDecodeIntf.GetChar;
  // TODO: Validate method results
end;

procedure TestIgtDecodeIntf.TestGetPosition;
var
  ReturnValue: Int64;
begin
  ReturnValue := FIgtDecodeIntf.GetPosition;
  // TODO: Validate method results
end;

procedure TestIgtDecodeIntf.TestReadRawChar;
var
  ReturnValue: Integer;
begin
  ReturnValue := FIgtDecodeIntf.ReadRawChar;
  // TODO: Validate method results
end;

procedure TestIgtDecodeIntf.TestReset;
begin
  FIgtDecodeIntf.Reset;
  // TODO: Validate method results
end;

procedure TestTgtDecode.SetUp;
begin
  FgtDecode := TgtDecode.Create;
end;

procedure TestTgtDecode.TearDown;
begin
  FgtDecode.Free;
  FgtDecode := nil;
end;

procedure TestTgtDecode.TestLookChar;
var
  ReturnValue: Integer;
begin
  ReturnValue := FgtDecode.LookChar;
  // TODO: Validate method results
end;

procedure TestTgtDecode.TestGetChar;
var
  ReturnValue: Integer;
begin
  ReturnValue := FgtDecode.GetChar;
  // TODO: Validate method results
end;

procedure TestTgtDecode.TestGetPosition;
var
  ReturnValue: Int64;
begin
  ReturnValue := FgtDecode.GetPosition;
  // TODO: Validate method results
end;

procedure TestTgtDecode.TestReadRawChar;
var
  ReturnValue: Integer;
begin
  ReturnValue := FgtDecode.ReadRawChar;
  // TODO: Validate method results
end;

procedure TestTgtDecode.TestReset;
begin
  FgtDecode.Reset;
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestIgtDecodeIntf.Suite);
  RegisterTest(TestTgtDecode.Suite);
end.

