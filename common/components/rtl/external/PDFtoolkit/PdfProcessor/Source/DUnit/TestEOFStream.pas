unit TestEOFStream;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Classes, Stream, gtTypes, EOFStream, FilterStream,
  FileStream, SysUtils, DUnitAssert, Dialogs;

type
  // Test methods for class TgtEOFStream
  
  TestTgtEOFStream = class(TAssertTestCase)
  strict private
    FgtEOFStream: TgtEOFStream;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestReset;
    procedure TestGetChar;
    procedure TestLookChar;
    procedure TestRead;
    procedure TestWrite;
  end;

implementation
var
 InStream : TFileStream;
 FgtInStream : TgtFileStream;

procedure TestTgtEOFStream.SetUp;
begin
  InStream := TFileStream.Create('Filters\Streams\Decode.txt', fmOpenRead);
  FgtInStream := TgtFileStream.Create(InStream, 0, 0, False);

  //InStream := TgtStream.Create();
  FgtEOFStream := TgtEOFStream.Create(FgtInStream);
end;

procedure TestTgtEOFStream.TearDown;
begin
  FreeAndNil(InStream);
  FreeAndNil(FgtInStream);
  FreeAndNil(FgtEOFStream);
end;

procedure TestTgtEOFStream.TestReset;
begin
  FgtEOFStream.Reset;
  // TODO: Validate method results
end;

procedure TestTgtEOFStream.TestGetChar;
var
  ReturnValue: Integer;
begin
  ReturnValue := FgtEOFStream.GetChar;
  Assert.AreEqual(-1, ReturnValue);
  // TODO: Validate method results
end;

procedure TestTgtEOFStream.TestLookChar;
var
  ReturnValue: Integer;
begin
  ReturnValue := FgtEOFStream.LookChar;
  Assert.AreEqual(-1, ReturnValue);
  // TODO: Validate method results
end;

procedure TestTgtEOFStream.TestRead;
var
  ReturnValue: Cardinal;
  Count: Cardinal;
  Buffer: Bytes;
begin
  // TODO: Setup method call parameters
  Count := 10;
  ReturnValue := FgtEOFStream.Read(Buffer, Count);
  Assert.AreEqual(0, ReturnValue);
end;

procedure TestTgtEOFStream.TestWrite;
var
  ReturnValue: Cardinal;
  Count: Cardinal;
  Buffer: Bytes;
begin
  // TODO: Setup method call parameters
  Count := 10;
  ReturnValue := FgtEOFStream.Write(Buffer, Count);
  Assert.AreEqual(0, ReturnValue);
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTgtEOFStream.Suite);
end.

