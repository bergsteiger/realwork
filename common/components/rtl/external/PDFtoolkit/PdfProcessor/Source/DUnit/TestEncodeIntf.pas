unit TestEncodeIntf;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, gtTypes, Stream, gtObject, EncodeIntf, gtInterface;

type
  // Test methods for class IgtEncodeIntf
  
  TestIgtEncodeIntf = class(TTestCase)
  strict private
    FIgtEncodeIntf: IgtEncodeIntf;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestWrite;
  end;
  // Test methods for class TgtEncode
  
  TestTgtEncode = class(TTestCase)
  strict private
    FgtEncode: TgtEncode;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestWrite;
  end;

implementation

procedure TestIgtEncodeIntf.SetUp;
begin
  // TODO: Initialize FIgtEncodeIntf
end;

procedure TestIgtEncodeIntf.TearDown;
begin
  FIgtEncodeIntf := nil;
end;

procedure TestIgtEncodeIntf.TestWrite;
var
  ReturnValue: Cardinal;
  Count: Cardinal;
  OutStream: TgtStream;
  InStream: TgtStream;
begin
  // TODO: Setup method call parameters
  ReturnValue := FIgtEncodeIntf.Write(OutStream, Count);
  // TODO: Validate method results
end;

procedure TestTgtEncode.SetUp;
begin
  FgtEncode := TgtEncode.Create;
end;

procedure TestTgtEncode.TearDown;
begin
  FgtEncode.Free;
  FgtEncode := nil;
end;

procedure TestTgtEncode.TestWrite;
var
  ReturnValue: Cardinal;
  Count: Cardinal;
  OutStream: TgtStream;
  InStream: TgtStream;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtEncode.Write(OutStream, Count);
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestIgtEncodeIntf.Suite);
  RegisterTest(TestTgtEncode.Suite);
end.

