unit TestFileStream;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Classes, Stream, FileStream, gtTypes, BaseStream,
  SysUtils, DUnitAssert, Dialogs;

type
  // Test methods for class TgtFileStream
  
  TestTgtFileStream = class(TAssertTestCase)

  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestMakeSubStream;
    procedure TestWrite;
    procedure TestWrite1;
    procedure TestGetTStream;
    procedure TestReset;
    procedure TestClose;
    procedure TestGetChar;
    procedure TestLookChar;
    procedure TestGetPosition;
    procedure TestSetPosition;
    procedure TestGetStart;
    procedure TestMoveStart;
  end;

implementation
Var
  FgtFileStream, FgtOutFileStream: TgtFileStream;
  FTestFile, FTestOutFile : TFileStream;

procedure TestTgtFileStream.SetUp;
begin
  FTestFile := TFileStream.Create('Filters\Streams\TestFile.txt',fmOpenRead);
  FgtFileStream := TgtFileStream.Create(FTestFile, 0, 0, False);
  FTestOutFile := TFileStream.Create('Filters\Streams\TestOutFile.txt',fmCreate);
  FgtOutFileStream := TgtFileStream.Create(FTestOutFile, 0, 0, False);

end;

procedure TestTgtFileStream.TearDown;
begin
  FreeAndNil(FTestFile);
  FreeAndNil(FgtFileStream);
  FreeAndNil(FTestOutFile);
  FreeAndNil(FgtOutFileStream);
end;

procedure TestTgtFileStream.TestMakeSubStream;
var
  ReturnValue: TgtStream;
  ALimited: Boolean;
  ALength, i: System.Integer;
  AStart: System.Integer;
begin
  // TODO: Setup method call parameters
  AStart := 20;
  ALength := 10;

  ReturnValue := FgtFileStream.MakeSubStream(AStart, ALength, True);
  FgtFileStream.SetPosition(AStart, soEnd);     // Need to re-check the use of SeekOrigin Parameters. 
  for I := 0 to ALength - 1 do
    assert.AreEqual(FgtFileStream.GetChar, ReturnValue.GetChar);

  FreeAndNil(ReturnValue);
  // TODO: Validate method results
end;

procedure TestTgtFileStream.TestWrite;
var
  ReturnValue, GetVal: Cardinal;
  Count: Cardinal;
  Buffer : Bytes;
  InBuff : String;
  I: Integer;
begin
  count :=20;
  // TODO: Setup method call parameters
  SetLength(Buffer, 20);

  FgtFileStream.Read(Buffer,Count);

  ReturnValue := FgtOutFileStream.Write(Buffer, Count);

  FgtFileStream.Reset;
  FgtOutFileStream.Reset;

  for I := 0 to Count - 1 do
  begin
    Assert.AreEqual(FgtFileStream.GetChar, FgtOutFileStream.GetChar);   // Not saving the file.
//    ShowMessage(Char(FgtFileStream.LookChar) + '  ' + Char(FgtOutFileStream.LookChar));
  end;

  Finalize(Buffer);
end;

procedure TestTgtFileStream.TestWrite1;
var
  ReturnValue: Cardinal;
  AByte: Byte;
  FgtOutFileStream1: TgtFileStream;
  FTestOutFile1 : TFileStream;
begin
  // TODO: Setup method call parameters
  FTestOutFile1 := TFileStream.Create('Filters\Streams\TestOutFile1.txt',fmCreate);
  FgtOutFileStream1 := TgtFileStream.Create(FTestOutFile1, 0, 0, False);

//  FgtFileStream.Read(AByte,1);
  Abyte := FgtFileStream.GetChar;

  ReturnValue := FgtOutFileStream1.Write(AByte);

  FgtFileStream.Reset;
  FgtOutFileStream1.Reset;

  Assert.AreEqual(FgtFileStream.GetChar, FgtOutFileStream1.GetChar);

  FreeAndNil(FgtOutFileStream1);
  FreeAndNil(FTestOutFile1);
  // TODO: Validate method results
end;

procedure TestTgtFileStream.TestGetTStream;
var
  ReturnValue: TStream;
begin
  ReturnValue := FgtFileStream.GetTStream;
  Assert.AreEqual(ReturnValue.ClassName, 'TFileStream');
  // TODO: Validate method results
end;

procedure TestTgtFileStream.TestReset;
begin
  FgtFileStream.Reset;
  // TODO: Validate method results
end;

procedure TestTgtFileStream.TestClose;
begin
  FgtFileStream.Close;
  // TODO: Validate method results
end;

procedure TestTgtFileStream.TestGetChar;
var
  ReturnValue : Integer;
  LBuff: Char;
begin

  ReturnValue := FgtFileStream.GetChar;
  FTestFile.Read(LBuff,1);

  Assert.AreEqual(LBuff, Char(ReturnValue));
end;

procedure TestTgtFileStream.TestLookChar;
var
  ReturnValue, FileValue: Integer;
  LBuff : char;
begin
  ReturnValue := FgtFileStream.LookChar;
  FTestFile.Read(LBuff,1);

  Assert.AreEqual(LBuff, Char(ReturnValue));
  // TODO: Validate method results
end;

procedure TestTgtFileStream.TestGetPosition;
var
  ReturnValue: Int64;
  i : Integer;
begin
  for I := 0 to 9 do
  begin
    ReturnValue := FgtFileStream.GetPosition;
    fgtFileStream.GetChar;
    Assert.AreEqual(i, ReturnValue);
  end;
  // TODO: Validate method results
end;

procedure TestTgtFileStream.TestSetPosition;
var
  ADirection: TSeekOrigin;
  APosition, ReturnValue: System.Integer;
begin
  // TODO: Setup method call parameters
  APosition := 15;
  ADirection := soCurrent;
  FgtFileStream.SetPosition(APosition, ADirection);
  ReturnValue := FgtFileStream.GetPosition;
  Assert.AreEqual(APosition, ReturnValue);
  // TODO: Validate method results
end;

procedure TestTgtFileStream.TestGetStart;
var
  ReturnValue: System.Integer;
begin
//  FgtFileStream.Reset;
  ReturnValue := FgtFileStream.GetStart;
  Assert.AreEqual(ReturnValue, 0);
  // TODO: Validate method results
end;

procedure TestTgtFileStream.TestMoveStart;
var
  Delta: Int64;
  ReturnValue: System.Integer;
begin
  // TODO: Setup method call parameters
  Delta := 50;
  FgtFileStream.MoveStart(Delta);
  ReturnValue := FgtFileStream.GetStart;
  Assert.AreEqual(ReturnValue, 50);
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTgtFileStream.Suite);
end.

