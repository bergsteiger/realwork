unit TestFlateDecode;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Stream, gtObject, FilterStream, Classes, FlateDecode, DecodeIntf, gtTypes, 
  Predictor, FileStream, DCTStream, SysUtils, DUnitAssert, Dialogs;

type
  // Test methods for class TgtFlateDecode
  
  TestTgtFlateDecode = class(TAssertTestCase)

  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestLookChar;
    procedure TestGetChar;
    procedure TestReadRawChar;
    procedure TestReset;
  end;

implementation
var
    FgtFlateDecode: TgtFlateDecode;
    FInFile, FOutFile: TFileStream;
    FgtInFile,FgtOutFile: TgtFileStream;
    FOutStream: TgtStream;
    Lbuffer : Bytes;
    OutValue : Integer;

procedure TestTgtFlateDecode.SetUp;
begin
  //FgtFlateDecode := TgtFlateDecode.Create(nil, nil, 0, 0, 0, 0);

 FInFile := TFileStream.Create('Filters\FlateDecode\Flate.txt', fmOpenRead);
 FgtInFile := TgtFileStream.Create(FInFile, 0, 0, False);
 FgtFlateDecode := TgtFlateDecode.create(nil,FgtInFile,1,1,1,8);
 FgtFlateDecode.Reset;

 FOutFile := TFileStream.Create('Filters\FlateDecode\DFlate.txt', fmOpenRead);
 FgtOutFile := TgtFileStream.Create(FOutFile, 0, 0, False);

end;

procedure TestTgtFlateDecode.TearDown;
begin
  FreeAndNil(FgtFlateDecode);
  FreeAndNil(FgtInFile);
  FreeAndNil(FInFile);
  FreeAndNil(FOutFile);
  FreeAndNil(FgtOutFile);
  FreeAndNil(FOutStream);
end;

procedure TestTgtFlateDecode.TestLookChar;
var
  ReturnValue: Integer;
begin
  FgtFlateDecode.Reset;
  ReturnValue := FgtFlateDecode.LookChar;
  OutValue := FgtOutFile.LookChar;
  Assert.AreEqual(ReturnValue, OutValue);
  // TODO: Validate method results
end;

procedure TestTgtFlateDecode.TestGetChar;
var
  LSin, LSout: string;
  LI: Integer;
begin
  LSin := '';
  LSout := '';
  for LI := 0 to 10 do
  begin
    LSin := LSin + Char(FgtFlateDecode.GetChar);
    LSout := LSout + Char(FgtOutFile.GetChar);
  end;

  Assert.AreEqualString(LSin, LSout);
  // TODO: Validate method results
end;

procedure TestTgtFlateDecode.TestReadRawChar;
var
  ReturnValue, RawVal: Integer;
begin
  ReturnValue := FgtFlateDecode.ReadRawChar;
  RawVal:= FgtOutFile.GetChar;
  Assert.AreEqual(ReturnValue,RawVal);
  // TODO: Validate method results
end;

procedure TestTgtFlateDecode.TestReset;
begin
  FgtFlateDecode.Reset;
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTgtFlateDecode.Suite);


end.

