unit TestPDAnnot;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, PDTypes, PDOCMD, gtObject, PDAction, Contnrs, PDOCContext, PDElement, 
  PDBaseObject, PDAnnot, PDRect;

type
  // Test methods for class TgtPDAnnot
  
  TestTgtPDAnnot = class(TTestCase)
  strict private
    FgtPDAnnot: TgtPDAnnot;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestUpdate;
    procedure TestGetColor;
    procedure TestGetDate;
    procedure TestGetFlags;
    procedure TestGetOCMD;
    procedure TestGetRect;
    procedure TestGetType;
    procedure TestGetTitle;
    procedure TestGetAction;
    procedure TestGetAdditionalAction;
    procedure TestIsCurrentlyVisible;
    procedure TestIsValid;
    procedure TestRemoveOCMD;
    procedure TestSetColor;
    procedure TestSetDate;
    procedure TestSetFlags;
    procedure TestSetOCMD;
    procedure TestSetRect;
    procedure TestSetTitle;
  end;

implementation

procedure TestTgtPDAnnot.SetUp;
begin
  FgtPDAnnot := TgtPDAnnot.Create(nil, nil, nil);
end;

procedure TestTgtPDAnnot.TearDown;
begin
  FgtPDAnnot.Free;
  FgtPDAnnot := nil;
end;

procedure TestTgtPDAnnot.TestUpdate;
begin
  FgtPDAnnot.Update;
  // TODO: Validate method results
end;

procedure TestTgtPDAnnot.TestGetColor;
var
  ReturnValue: Boolean;
  Color: TgtPDColorValue;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDAnnot.GetColor(Color);
  // TODO: Validate method results
end;

procedure TestTgtPDAnnot.TestGetDate;
var
  ReturnValue: Boolean;
  Date: TgtPDDate;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDAnnot.GetDate(Date);
  // TODO: Validate method results
end;

procedure TestTgtPDAnnot.TestGetFlags;
var
  ReturnValue: Boolean;
  Flags: TgtPDAnnotFlags;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDAnnot.GetFlags(Flags);
  // TODO: Validate method results
end;

procedure TestTgtPDAnnot.TestGetOCMD;
var
  ReturnValue: TgtPDOCMD;
begin
  ReturnValue := FgtPDAnnot.GetOCMD;
  // TODO: Validate method results
end;

procedure TestTgtPDAnnot.TestGetRect;
var
  ReturnValue: Boolean;
  Rect: TgtPDRect;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDAnnot.GetRect(Rect);
  // TODO: Validate method results
end;

procedure TestTgtPDAnnot.TestGetType;
var
  ReturnValue: TgtPDAnnotType;
begin
  ReturnValue := FgtPDAnnot.GetType;
  // TODO: Validate method results
end;

procedure TestTgtPDAnnot.TestGetTitle;
var
  ReturnValue: string;
begin
  ReturnValue := FgtPDAnnot.GetTitle;
  // TODO: Validate method results
end;

procedure TestTgtPDAnnot.TestGetAction;
var
  ReturnValue: TgtPDAction;
begin
  ReturnValue := FgtPDAnnot.GetAction;
  // TODO: Validate method results
end;

procedure TestTgtPDAnnot.TestGetAdditionalAction;
var
  ReturnValue: TgtPDAction;
begin
  ReturnValue := FgtPDAnnot.GetAdditionalAction;
  // TODO: Validate method results
end;

procedure TestTgtPDAnnot.TestIsCurrentlyVisible;
var
  ReturnValue: Boolean;
  OCContext: TgtPDOCContext;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDAnnot.IsCurrentlyVisible(OCContext);
  // TODO: Validate method results
end;

procedure TestTgtPDAnnot.TestIsValid;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FgtPDAnnot.IsValid;
  // TODO: Validate method results
end;

procedure TestTgtPDAnnot.TestRemoveOCMD;
begin
  FgtPDAnnot.RemoveOCMD;
  // TODO: Validate method results
end;

procedure TestTgtPDAnnot.TestSetColor;
var
  Color: TgtPDColorValue;
begin
  // TODO: Setup method call parameters
  FgtPDAnnot.SetColor(Color);
  // TODO: Validate method results
end;

procedure TestTgtPDAnnot.TestSetDate;
var
  Date: TgtPDDate;
begin
  // TODO: Setup method call parameters
  FgtPDAnnot.SetDate(Date);
  // TODO: Validate method results
end;

procedure TestTgtPDAnnot.TestSetFlags;
var
  Flags: TgtPDAnnotFlags;
begin
  // TODO: Setup method call parameters
  FgtPDAnnot.SetFlags(Flags);
  // TODO: Validate method results
end;

procedure TestTgtPDAnnot.TestSetOCMD;
var
  OCMD: TgtPDOCMD;
begin
  // TODO: Setup method call parameters
  FgtPDAnnot.SetOCMD(OCMD);
  // TODO: Validate method results
end;

procedure TestTgtPDAnnot.TestSetRect;
var
  Box: TgtPDRect;
begin
  // TODO: Setup method call parameters
  FgtPDAnnot.SetRect(Box);
  // TODO: Validate method results
end;

procedure TestTgtPDAnnot.TestSetTitle;
var
  Title: string;
begin
  // TODO: Setup method call parameters
  FgtPDAnnot.SetTitle(Title);
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTgtPDAnnot.Suite);
end.

