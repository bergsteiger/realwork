unit TestPDArray;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Stream, PDArray, gtObject, Classes, Contnrs, PDBaseObject,
  SysUtils, DUnitAssert, Dialogs, FileStream, gtTypes, PDInteger, PDBoolean ;

type
  // Test methods for class TgtArray
  
  TestTgtArray = class(TAssertTestCase)
  strict private
    FgtArray: TgtArray;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestAdd;
    procedure TestIncRef;
    procedure TestDecRef;
    procedure TestGet;
    procedure TestGetRefObj;
    procedure TestLength;
    procedure TestSetParentDoc;
  end;
  // Test methods for class TgtPDArray
  
  TestTgtPDArray = class(TAssertTestCase)
  strict private
    FgtPDArray: TgtPDArray;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestClone;
    procedure TestSaveToStream;
    procedure TestIsArray;
    procedure TestGetLength;
    procedure TestAdd;
    procedure TestInsert;
    procedure TestRemove;
    procedure TestRemove1;
    procedure TestGetIndirectRefs;
    procedure TestAssign;
    procedure TestGet;
    procedure TestGetRefObj;
    procedure TestGetClone;
    procedure TestGetRefObjClone;
    procedure TestSetParentDoc;
  end;

implementation
{$REGION 'TgtArray'}

procedure TestTgtArray.SetUp;
begin
  FgtArray := TgtArray.Create(nil);
end;

procedure TestTgtArray.TearDown;
begin
  FreeAndNil(FgtArray);
end;

procedure TestTgtArray.TestAdd;
var
  El1: TgtPDInteger;
  El2: TgtPDBoolean;
begin
  El1:= TgtPDInteger.Create(1);
  El2:= TgtPDBoolean.Create(True);

  FgtArray.Add(El1);
  FgtArray.Add(El2);

  Assert.AreEqual(FgtArray.Length,2);

  // TODO: Validate method results
end;

procedure TestTgtArray.TestIncRef;
var
  ReturnValue: Integer;
begin
  ReturnValue := FgtArray.IncRef;

  // TODO: Validate method results
end;

procedure TestTgtArray.TestDecRef;
var
  ReturnValue: Integer;
begin
  ReturnValue := FgtArray.DecRef;
  // TODO: Validate method results
end;

procedure TestTgtArray.TestGet;
var
  El1: TgtPDInteger;
  El2: TgtPDBoolean;
  ReturnValue: TgtPDBaseObject;
begin
  // TODO: Setup method call parameters
  El1:= TgtPDInteger.Create(1);
  El2:= TgtPDBoolean.Create(True);

  FgtArray.Add(El1);
  FgtArray.Add(El2);

  ReturnValue := FgtArray.Get(0);
  Assert.AreEqual(ReturnValue.ClassName,'TgtPDInteger');

  ReturnValue := FgtArray.Get(1);
  Assert.AreEqual(ReturnValue.ClassName,'TgtPDBoolean');
  // TODO: Validate method results
end;

procedure TestTgtArray.TestGetRefObj;
var
  El1: TgtPDInteger;
  El2: TgtPDBoolean;
  ReturnValue: TgtPDBaseObject;
begin
  // TODO: Setup method call parameters
  El1:= TgtPDInteger.Create(1);
  El2:= TgtPDBoolean.Create(True);

  FgtArray.Add(El1);
  FgtArray.Add(El2);

  ReturnValue := FgtArray.GetRefObj(0);
  Assert.AreEqual(ReturnValue.ClassName,'TgtPDInteger');

  ReturnValue := FgtArray.GetRefObj(1);
  Assert.AreEqual(ReturnValue.ClassName,'TgtPDBoolean');
  // TODO: Validate method results
end;

procedure TestTgtArray.TestLength;
var
  El1: TgtPDInteger;
  El2: TgtPDBoolean;
  ReturnValue: Integer;
begin
  El1:= TgtPDInteger.Create(1);
  El2:= TgtPDBoolean.Create(True);

  FgtArray.Add(El1);
  FgtArray.Add(El2);

  ReturnValue := FgtArray.Length;
  Assert.AreEqual(ReturnValue,2);
  // TODO: Validate method results
end;

procedure TestTgtArray.TestSetParentDoc;
var
  Value: TgtObject;
begin
  // TODO: Setup method call parameters
  FgtArray.SetParentDoc(Value);
  // TODO: Validate method results
end;

{$ENDREGION}

{$REGION 'TgtPDArray'}

procedure TestTgtPDArray.SetUp;
begin
  FgtPDArray := TgtPDArray.Create(TgtObject(nil));
end;

procedure TestTgtPDArray.TearDown;
begin
  FgtPDArray.Free;
  FgtPDArray := nil;
end;

procedure TestTgtPDArray.TestClone;
var
  ReturnValue: TgtPDBaseObject;
  El1: TgtPDInteger;
  El2: TgtPDBoolean;
begin
  El1:= TgtPDInteger.Create(1);
  El2:= TgtPDBoolean.Create(True);

  FgtPDArray.Add(El1);
  FgtPDArray.Add(El2);

  ReturnValue := FgtPDArray.Clone;

  Assert.AreEqual(FgtPDArray.GetLength ,2);
  Assert.IsTrue(ReturnValue.IsArray);
  Assert.AreEqual(TgtPDArray(ReturnValue).GetLength,2);

  FreeAndNil(ReturnValue);
  
  // TODO: Validate method results
end;

procedure TestTgtPDArray.TestSaveToStream;
var
  ReturnValue: Cardinal;
  XRef: TgtObject;
  OnlyChanged: Boolean;
  Stream: TgtStream;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDArray.SaveToStream(Stream, OnlyChanged, XRef);
  // TODO: Validate method results
end;

procedure TestTgtPDArray.TestIsArray;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FgtPDArray.IsArray;
  Assert.IsTrue(ReturnValue);
  // TODO: Validate method results
end;

procedure TestTgtPDArray.TestGetLength;
var
  El1: TgtPDInteger;
  El2: TgtPDBoolean;
begin
  El1:= TgtPDInteger.Create(1);
  El2:= TgtPDBoolean.Create(True);

  FgtPDArray.Add(El1);
  FgtPDArray.Add(El2);

  Assert.AreEqual(FgtPDArray.GetLength ,2);
  // TODO: Validate method results
end;

procedure TestTgtPDArray.TestAdd;
var
  El1: TgtPDInteger;
  El2: TgtPDBoolean;
begin
  El1:= TgtPDInteger.Create(1);
  El2:= TgtPDBoolean.Create(True);

  FgtPDArray.Add(El1);
  FgtPDArray.Add(El2);

  Assert.AreEqual(FgtPDArray.GetLength ,2);
  // TODO: Validate method results
end;

procedure TestTgtPDArray.TestInsert;         // Not Implemented
//var
//  El1: TgtPDInteger;
//  El2: TgtPDBoolean;
//  El3: TgtPDInteger;
begin
//  El1:= TgtPDInteger.Create(1);
//  El2:= TgtPDBoolean.Create(True);
//  El3:= TgtPDInteger.Create(10);
//
//  FgtPDArray.Add(El1);
//  FgtPDArray.Add(El2);
//
//  FgtPDArray.Insert(El3);
//
//  Assert.AreEqual(FgtPDArray.GetLength ,3);

  // TODO: Validate method results
end;

procedure TestTgtPDArray.TestRemove;            // Not implemented
//var
//  ReturnValue: TgtPDBaseObject;
//  El1: TgtPDInteger;
//  El2: TgtPDBoolean;
//  El3: TgtPDInteger;
begin
//  El1:= TgtPDInteger.Create(1);
//  El2:= TgtPDBoolean.Create(True);
//  El3:= TgtPDInteger.Create(10);
//
//  FgtPDArray.Add(El1);
//  FgtPDArray.Add(El2);
//  FgtPDArray.Add(El3);
//
//  FgtPDArray.Remove(El2);
//
//  ReturnValue:= FgtPDArray.Get(0);
//  Assert.AreEqual(ReturnValue.ClassName,'TgtPDInteger');
//
//  ReturnValue:= FgtPDArray.Get(1);
//  Assert.AreEqual(ReturnValue.ClassName,'TgtPDInteger');
//

  // TODO: Validate method results
end;

procedure TestTgtPDArray.TestRemove1;              // Not implemented
//var
//  Index: Integer;
//  ReturnValue: TgtPDBaseObject;
//  El1: TgtPDInteger;
//  El2: TgtPDBoolean;
//  El3: TgtPDInteger;
begin
//  El1:= TgtPDInteger.Create(1);
//  El2:= TgtPDBoolean.Create(True);
//  El3:= TgtPDInteger.Create(10);
//
//  FgtPDArray.Add(El1);
//  FgtPDArray.Add(El2);
//  FgtPDArray.Add(El3);
//
//  FgtPDArray.Remove(1);
//
//  ReturnValue:= FgtPDArray.Get(0);
//  Assert.AreEqual(ReturnValue.ClassName,'TgtPDInteger');
//
//  ReturnValue:= FgtPDArray.Get(1);
//  Assert.AreEqual(ReturnValue.ClassName,'TgtPDInteger');

  // TODO: Validate method results
end;

procedure TestTgtPDArray.TestGetIndirectRefs;
var
  List: TObjectList;
begin
  // TODO: Setup method call parameters
  FgtPDArray.GetIndirectRefs(List);
  // TODO: Validate method results
end;

procedure TestTgtPDArray.TestAssign;
var
  ReturnValue: TgtPDBaseObject;
  FgtPDArraySrc: TgtPDArray;
  El1: TgtPDInteger;
  El2: TgtPDBoolean;
  El3: TgtPDInteger;
begin
  // TODO: Setup method call parameters
  FgtPDArraySrc := TgtPDArray.Create(TgtObject(nil));

  El1:= TgtPDInteger.Create(1);
  El2:= TgtPDBoolean.Create(True);
  El3:= TgtPDInteger.Create(10);

  FgtPDArraySrc.Add(El1);
  FgtPDArraySrc.Add(El2);
  FgtPDArraySrc.Add(El3);

  FgtPDArray.Assign(FgtPDArraySrc);

  ReturnValue:= FgtPDArray.Get(0);
  Assert.AreEqual(ReturnValue.ClassName,'TgtPDInteger');

  ReturnValue:= FgtPDArray.Get(1);
  Assert.AreEqual(ReturnValue.ClassName,'TgtPDBoolean');

  ReturnValue:= FgtPDArray.Get(2);
  Assert.AreEqual(ReturnValue.ClassName,'TgtPDInteger');

  FreeAndNil(FgtPDArraySrc);

  // TODO: Validate method results
end;

procedure TestTgtPDArray.TestGet;
var
  ReturnValue: TgtPDBaseObject;
  Index: Integer;
  El1: TgtPDInteger;
  El2: TgtPDBoolean;
begin
  // TODO: Setup method call parameters
  El1:= TgtPDInteger.Create(1);
  El2:= TgtPDBoolean.Create(True);

  FgtPDArray.Add(El1);
  FgtPDArray.Add(El2);

  ReturnValue := FgtPDArray.Get(0);
  Assert.AreEqual(ReturnValue.ClassName,'TgtPDInteger');

  ReturnValue := FgtPDArray.Get(1);
  Assert.AreEqual(ReturnValue.ClassName,'TgtPDBoolean');
  
end;

procedure TestTgtPDArray.TestGetRefObj;
var
  ReturnValue: TgtPDBaseObject;
  Index: Integer;
  El1: TgtPDInteger;
  El2: TgtPDBoolean;
begin
  // TODO: Setup method call parameters
  El1:= TgtPDInteger.Create(1);
  El2:= TgtPDBoolean.Create(True);

  FgtPDArray.Add(El1);
  FgtPDArray.Add(El2);

  ReturnValue := FgtPDArray.GetRefObj(0);
  Assert.AreEqual(ReturnValue.ClassName,'TgtPDInteger');

  ReturnValue := FgtPDArray.GetRefObj(1);
  Assert.AreEqual(ReturnValue.ClassName,'TgtPDBoolean');
end;

procedure TestTgtPDArray.TestGetClone;
var
  ReturnValue: TgtPDBaseObject;
  El1: TgtPDInteger;
  El2: TgtPDBoolean;
begin
  // TODO: Setup method call parameters
  El1:= TgtPDInteger.Create(1);
  El2:= TgtPDBoolean.Create(True);

  FgtPDArray.Add(El1);
  FgtPDArray.Add(El2);

  ReturnValue := FgtPDArray.GetClone(0);
  Assert.AreEqual(ReturnValue.ClassName,'TgtPDInteger');

  FreeandNil(ReturnValue);

  ReturnValue := FgtPDArray.GetClone(1);
  Assert.AreEqual(ReturnValue.ClassName,'TgtPDBoolean');

  FreeandNil(ReturnValue);

  // TODO: Validate method results
end;

procedure TestTgtPDArray.TestGetRefObjClone;
var
  ReturnValue: TgtPDBaseObject;
  Index: Integer;
  El1: TgtPDInteger;
  El2: TgtPDBoolean;
begin
  // TODO: Setup method call parameters
  El1:= TgtPDInteger.Create(1);
  El2:= TgtPDBoolean.Create(True);

  FgtPDArray.Add(El1);
  FgtPDArray.Add(El2);

  ReturnValue := FgtPDArray.GetRefObjClone(0);
  Assert.AreEqual(ReturnValue.ClassName,'TgtPDInteger');

  FreeandNil(ReturnValue);

  ReturnValue := FgtPDArray.GetRefObjClone(1);
  Assert.AreEqual(ReturnValue.ClassName,'TgtPDBoolean');

  FreeandNil(ReturnValue);

  // TODO: Validate method results
end;

procedure TestTgtPDArray.TestSetParentDoc;
var
  Value: TgtObject;
begin
  // TODO: Setup method call parameters
  FgtPDArray.SetParentDoc(Value);
  // TODO: Validate method results
end;

{$ENDREGION}

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTgtArray.Suite);
  RegisterTest(TestTgtPDArray.Suite);
end.

