unit TestPDBaseDoc;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, gtObject, PDBaseDoc, PDReader, Classes, PDWriter, PDCollection, PDDictionary, 
  PDBaseObject, SysUtils, DUnitAssert, Dialogs, gtTypes, FileStream;

type
  // Test methods for class TgtPDBaseDoc
  
  TestTgtPDBaseDoc = class(TAssertTestCase)

  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestLoadDocument;
    procedure TestLoadDocument1;
    procedure TestSaveDocument;
    procedure TestSaveDocument1;
    procedure TestSaveDocument2;
    procedure TestSaveDocument3;
    procedure TestSaveDocument4;
    procedure TestSaveDocument5;
    procedure TestCloseDocument;
    procedure TestForceIntermediateSave;
    procedure TestEnumerateObjects;
    procedure TestGetDocID;
    procedure TestGetDocInfo;
    procedure TestGetDocRoot;
    procedure TestGetEncrypt;
    procedure TestGetTrailer;
    procedure TestGetObject;
    procedure TestGetObject1;
    procedure TestIsObjectWritten;
    procedure TestAddToCollection;
    procedure TestIsFullCompressed;
    procedure TestIsPartialCompressed;
    procedure TestIsLinearized;
    procedure TestSetSaveOptions;
    procedure TestSetMaxDocStorage;
    procedure TestGetMajorVersion;
    procedure TestGetMinorVersion;
  end;

implementation
Var
  FgtPDBaseDoc: TgtPDBaseDoc;
  FInFile, FOutFile : TFileStream;
  FgtInFile : TgtFileStream;

procedure TestTgtPDBaseDoc.SetUp;
begin
//  FgtPDBaseDoc := TgtPDBaseDoc.Create;
//  FInFile := TFileStream.Create('Filters\PDF\data(115).pdf', fmOpenRead);
//  FgtInFile := TgtFileStream.Create(FInFile, 0, 0, False);
//  FOutFile := TFileStream.Create('Filters\PDF\PDFOutSave\data(115).pdf', fmCreate);

end;

procedure TestTgtPDBaseDoc.TearDown;
begin
//  FreeAndNil(FgtPDBaseDoc);
//  FreeAndNil(FInFile);
//  FreeAndNil(FgtInFile);
//  FreeAndNil(FOutFile);
end;

procedure TestTgtPDBaseDoc.TestLoadDocument;
var
  FileName: string;
begin
  // TODO: Setup method call parameters
  FgtPDBaseDoc := TgtPDBaseDoc.Create;
  FgtPDBaseDoc.LoadDocument('Filters\PDF\data(24).pdf','');
  FgtPDBaseDoc.SetSaveOptions('%PDF-1.4' + #13#10 + '%‚„œ”' + #13#10, False, True,
        False, False, False, True, False, False);
  FgtPDBaseDoc.SaveDocument('Filters\PDF\PDFOutSave\data(24)DocLoad.pdf');

  FreeAndNil(FgtPDBaseDoc);

//  FgtPDBaseDoc := TgtPDBaseDoc.Create;
//  FgtPDBaseDoc.LoadDocument('Filters\PDF\PDFOutSave\data(24)DocLoad.pdf','');
//  FreeAndNil(FgtPDBaseDoc);

end;

procedure TestTgtPDBaseDoc.TestLoadDocument1;
var
  Stream: TStream;
begin
  // TODO: Setup method call parameters

  FgtPDBaseDoc := TgtPDBaseDoc.Create;
  FInFile := TFileStream.Create('Filters\PDF\data(24).pdf', fmOpenRead);
  FOutFile := TFileStream.Create('Filters\PDF\PDFOutSave\data(24)DocLoad1.pdf', fmCreate);

  FgtPDBaseDoc.LoadDocument(FInFile, '');
  FgtPDBaseDoc.SetSaveOptions('%PDF-1.4' + #13#10 + '%‚„œ”' + #13#10, False, True,
        False, False, False, True, False, False);

  FgtPDBaseDoc.SaveDocument(FOutFile);


  FreeAndNil(FgtPDBaseDoc);
  FreeAndNil(FInFile);
  FreeAndNil(FOutFile);

//  FOutFile := TFileStream.Create('Filters\PDF\PDFOutSave\data(24)DocLoad1.pdf', fmOpenRead);
//
//  FgtPDBaseDoc := TgtPDBaseDoc.Create;
//  FgtPDBaseDoc.LoadDocument(FInFile, '');
//
//  FreeAndNil(FgtPDBaseDoc);
//  FreeAndNil(FOutFile);
  // TODO: Validate method results
end;

procedure TestTgtPDBaseDoc.TestSaveDocument;
begin
  FgtPDBaseDoc.SaveDocument;           //Not Implemented
  // TODO: Validate method results
end;

procedure TestTgtPDBaseDoc.TestSaveDocument1;
var
  Stream: TStream;
begin
  FgtPDBaseDoc := TgtPDBaseDoc.Create;
  FInFile := TFileStream.Create('Filters\PDF\data(24).pdf', fmOpenRead);
  FOutFile := TFileStream.Create('Filters\PDF\PDFOutSave\data(24)DocSave1.pdf', fmCreate);

  FgtPDBaseDoc.LoadDocument(FInFile, '');
  FgtPDBaseDoc.SetSaveOptions('%PDF-1.4' + #13#10 + '%‚„œ”' + #13#10, False, True,
        False, False, False, True, False, False);

  FgtPDBaseDoc.SaveDocument(FOutFile);

  FreeAndNil(FgtPDBaseDoc);
  FreeAndNil(FInFile);
  FreeAndNil(FOutFile);

  FgtPDBaseDoc := TgtPDBaseDoc.Create;
  FInFile := TFileStream.Create('Filters\PDF\PDFOutSave\data(24)DocSave1.pdf', fmOpenRead);

  FgtPDBaseDoc.LoadDocument(FInFile, '');

  FreeAndNil(FgtPDBaseDoc);
  FreeAndNil(FOutFile);
  
end;

procedure TestTgtPDBaseDoc.TestSaveDocument2;

begin
  // TODO: Setup method call parameters
  FgtPDBaseDoc := TgtPDBaseDoc.Create;
  FgtPDBaseDoc.LoadDocument('Filters\PDF\Data(24).pdf','');
  FgtPDBaseDoc.SetSaveOptions('%PDF-1.4' + #13#10 + '%‚„œ”' + #13#10, False, True,
        False, False, False, True, False, False);
  FgtPDBaseDoc.SaveDocument('Filters\PDF\PDFOutSave\Data(24)DocSave2.pdf');            //Load Again
  FreeAndNil(FgtPDBaseDoc);

  FgtPDBaseDoc := TgtPDBaseDoc.Create;
  FgtPDBaseDoc.LoadDocument('Filters\PDF\PDFOutSave\Data(24)DocSave2.pdf','');
  FreeAndNil(FgtPDBaseDoc);

  // TODO: Validate method results
end;

procedure TestTgtPDBaseDoc.TestSaveDocument3;
var
  ASaveOptions: TgtPDSaveOptions;
begin
  // TODO: Setup method call parameters
  FgtPDBaseDoc.SaveDocument(ASaveOptions);       //Not Implemented
  // TODO: Validate method results
end;

procedure TestTgtPDBaseDoc.TestSaveDocument4;
var
  ASaveOptions: TgtPDSaveOptions;
  Stream: TStream;
begin
  // TODO: Setup method call parameters
  FgtPDBaseDoc.SaveDocument(Stream, ASaveOptions);        //Not Implemented
  // TODO: Validate method results
end;

procedure TestTgtPDBaseDoc.TestSaveDocument5;
var
  ASaveOptions: TgtPDSaveOptions;
  Filename: string;
begin
  // TODO: Setup method call parameters
  FgtPDBaseDoc.SaveDocument(Filename, ASaveOptions);        //Not Implemented
  // TODO: Validate method results
end;

procedure TestTgtPDBaseDoc.TestCloseDocument;               //Not Implemented
begin
  FgtPDBaseDoc.CloseDocument;       
  // TODO: Validate method results
end;

procedure TestTgtPDBaseDoc.TestForceIntermediateSave;       //Not Implemented
begin
  FgtPDBaseDoc.ForceIntermediateSave;
  // TODO: Validate method results
end;

procedure TestTgtPDBaseDoc.TestEnumerateObjects;            //Not Implemented
var
  EnumObjects: TgtEnumObjectsEvent;
begin
  // TODO: Setup method call parameters
  FgtPDBaseDoc.EnumerateObjects(EnumObjects);
  // TODO: Validate method results
end;

procedure TestTgtPDBaseDoc.TestGetDocID;
var
  PermanentID: string;
  InstanceID: string;
begin
  // TODO: Setup method call parameters
  FgtPDBaseDoc := TgtPDBaseDoc.Create;
  FgtPDBaseDoc.LoadDocument('Filters\PDF\Data(24).pdf','');

  // Specific to this file as PDF may be without ID

  FgtPDBaseDoc.GetDocID(InstanceID, PermanentID);
  Assert.IsTrue(PermanentID <> '');
  Assert.IsTrue(InstanceID <> '');
  
end;

procedure TestTgtPDBaseDoc.TestGetDocInfo;
var
  ReturnValue: TgtPDBaseObject;
begin
  FgtPDBaseDoc := TgtPDBaseDoc.Create;
  FgtPDBaseDoc.LoadDocument('Filters\PDF\data(24).pdf','');

  ReturnValue := FgtPDBaseDoc.GetDocInfo;

  Assert.IsTrue(ReturnValue is TGTPDDictionary);

  FreeAndNil(FgtPDBaseDoc);
  // TODO: Validate method results
end;

procedure TestTgtPDBaseDoc.TestGetDocRoot;
var
  ReturnValue: TgtPDBaseObject;
begin
  FgtPDBaseDoc := TgtPDBaseDoc.Create;
  FgtPDBaseDoc.LoadDocument('Filters\PDF\Data(24).pdf','');

  ReturnValue := FgtPDBaseDoc.GetDocRoot;           //.IsDict('Catalog')
  Assert.IsTrue(ReturnValue.IsDict('Catalog'));

  FreeAndNil(FgtPDBaseDoc);
end;

procedure TestTgtPDBaseDoc.TestGetEncrypt;
var
  ReturnValue: TgtPDBaseObject;
begin
  FgtPDBaseDoc := TgtPDBaseDoc.Create;
  FgtPDBaseDoc.LoadDocument('Filters\PDF\11.pdf','');

  ReturnValue := FgtPDBaseDoc.GetEncrypt;             //.IsDict('Encrypt')
  Assert.IsTrue(ReturnValue.IsDict('Encrypt'));

  FreeAndNil(FgtPDBaseDoc);

  // TODO: Validate method results
end;

procedure TestTgtPDBaseDoc.TestGetTrailer;
var
  ReturnValue: TgtPDBaseObject;
begin
  FgtPDBaseDoc := TgtPDBaseDoc.Create;
  FgtPDBaseDoc.LoadDocument('Filters\PDF\Data(24).pdf','');

  ReturnValue := FgtPDBaseDoc.GetTrailer;    //Dictionary

  Assert.IsTrue(ReturnValue is TGTPDDictionary);
  FreeAndNil(FgtPDBaseDoc);
  // TODO: Validate method results
end;

procedure TestTgtPDBaseDoc.TestGetObject;                       //NotImplemented
var
  ReturnValue: TgtPDBaseObject;
  ObjectPath: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDBaseDoc.GetObject(ObjectPath);
  // TODO: Validate method results
end;

procedure TestTgtPDBaseDoc.TestGetObject1;
var
  ReturnValue, PagesRef, DocRoot: TgtPDBaseObject;
  ObjectNumber: Cardinal;
begin
  // TODO: Setup method call parameters
  FgtPDBaseDoc := TgtPDBaseDoc.Create;
  FgtPDBaseDoc.LoadDocument('Filters\PDF\Data(24).pdf','');

  DocRoot := FgtPDBaseDoc.GetDocRoot;
  PagesRef := TgtPDDictionary(DocRoot).LookupRefObj('Pages');

  ReturnValue := FgtPDBaseDoc.GetObject(PagesRef.ObjNumber);

  Assert.IsTrue(ReturnValue.IsDict('Pages'));
  FreeAndNil(FgtPDBaseDoc);

  // TODO: Validate method results
end;

procedure TestTgtPDBaseDoc.TestIsObjectWritten;
var
  ReturnValue: Boolean;
  ObjectNumber: Cardinal;
begin
  FgtPDBaseDoc := TgtPDBaseDoc.Create;
  FgtPDBaseDoc.LoadDocument('Filters\PDF\Data(24).pdf','');
  ReturnValue := FgtPDBaseDoc.IsObjectWritten(ObjectNumber);   // After Load False
  Assert.IsFalse(ReturnValue);

  FreeAndNil(FgtPDBaseDoc);
  // TODO: Validate method results
end;

procedure TestTgtPDBaseDoc.TestAddToCollection;                                   
var
  Value: TgtPDBaseObject;
begin
  // TODO: Setup method call parameters

//  FgtPDBaseDoc := TgtPDBaseDoc.Create;
//  FgtPDBaseDoc.LoadDocument('Filters\PDF\Data(24).pdf','');


  FgtPDBaseDoc.AddToCollection(Value);          // Load Doc, Add page, compare to original ++1
  // TODO: Validate method results
end;

procedure TestTgtPDBaseDoc.TestIsFullCompressed;          //Not Implemented
var
  ReturnValue: Boolean;
begin
  ReturnValue := FgtPDBaseDoc.IsFullCompressed;
  // TODO: Validate method results
end;

procedure TestTgtPDBaseDoc.TestIsPartialCompressed;        //Not Implemented
var
  ReturnValue: Boolean;
begin
  ReturnValue := FgtPDBaseDoc.IsPartialCompressed;          
  // TODO: Validate method results
end;

procedure TestTgtPDBaseDoc.TestIsLinearized;               //Not Implemented
var
  ReturnValue: Boolean;
begin
  ReturnValue := FgtPDBaseDoc.IsLinearized;                 
  // TODO: Validate method results
end;

procedure TestTgtPDBaseDoc.TestSetSaveOptions;
var
  KeepModDate: Boolean;
  Compressed: Boolean;
  UnCompressed: Boolean;
  UniDirectional: Boolean;
  Linearize: Boolean;
  Copy: Boolean;
  Full: Boolean;
  Incremental: Boolean;
  Header: string;
begin
  // TODO: Setup method call parameters
  FgtPDBaseDoc.SetSaveOptions(Header, Incremental, Full, Copy, Linearize, UniDirectional, 
      UnCompressed, Compressed, KeepModDate);
  // TODO: Validate method results
end;

procedure TestTgtPDBaseDoc.TestSetMaxDocStorage;       //Not Implemented
var
  Value: Cardinal;
begin
  // TODO: Setup method call parameters
  FgtPDBaseDoc.SetMaxDocStorage(Value);
  // TODO: Validate method results
end;

procedure TestTgtPDBaseDoc.TestGetMajorVersion;         //Not Implemented
var
  ReturnValue: Integer;
begin
  ReturnValue := FgtPDBaseDoc.GetMajorVersion;           
  // TODO: Validate method results
end;

procedure TestTgtPDBaseDoc.TestGetMinorVersion;          //Not Implemented
var
  ReturnValue: Integer;
begin
  ReturnValue := FgtPDBaseDoc.GetMinorVersion;
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTgtPDBaseDoc.Suite);

Finalization
  FreeAndNil(FgtPDBaseDoc);
  FreeAndNil(FInFile);
  FreeAndNil(FgtInFile);
  FreeAndNil(FOutFile);
end.

