unit TestPDBaseObject;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Classes, PDBaseObject, Stream, gtObject, gtInterface;

type
  // Test methods for class IgtPDBaseIntf

  TestIgtPDBaseIntf = class(TTestCase)
  strict private
    FIgtPDBaseIntf: TgtPDBaseObject;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestIsBoolean;
    procedure TestIsInteger;
    procedure TestIsReal;
    procedure TestIsString;
    procedure TestIsName;
    procedure TestIsNull;
    procedure TestIsArray;
    procedure TestIsDict;
    procedure TestIsStream;
    procedure TestIsIndirectRef;
    procedure TestIsCommand;
    procedure TestIsError;
    procedure TestIsEOF;
    procedure TestSaveToStream;
  end;
  // Test methods for class TgtPDBaseObject
  
  TestTgtPDBaseObject = class(TTestCase)
  strict private
    FgtPDBaseObject: TgtPDBaseObject;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestIsBoolean;
    procedure TestIsInteger;
    procedure TestIsReal;
    procedure TestIsNumber;
    procedure TestIsString;
    procedure TestIsName;
    procedure TestIsNull;
    procedure TestIsArray;
    procedure TestIsDict;
    procedure TestIsStream;
    procedure TestIsIndirectRef;
    procedure TestIsCommand;
    procedure TestIsError;
    procedure TestIsEOF;
    procedure TestClone;
    procedure TestAssign;
    procedure TestGetType;
    procedure TestSaveToStream;
  end;

implementation

{$REGION 'IgtPDBaseIntf'}

procedure TestIgtPDBaseIntf.SetUp;
begin
  // TODO: Initialize FIgtPDBaseIntf
end;

procedure TestIgtPDBaseIntf.TearDown;
begin
  FIgtPDBaseIntf := nil;
end;

procedure TestIgtPDBaseIntf.TestIsBoolean;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FIgtPDBaseIntf.IsBoolean;
  // TODO: Validate method results
end;

procedure TestIgtPDBaseIntf.TestIsInteger;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FIgtPDBaseIntf.IsInteger;
  // TODO: Validate method results
end;

procedure TestIgtPDBaseIntf.TestIsReal;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FIgtPDBaseIntf.IsReal;
  // TODO: Validate method results
end;

procedure TestIgtPDBaseIntf.TestIsString;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FIgtPDBaseIntf.IsString;
  // TODO: Validate method results
end;

procedure TestIgtPDBaseIntf.TestIsName;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FIgtPDBaseIntf.IsName;
  // TODO: Validate method results
end;

procedure TestIgtPDBaseIntf.TestIsNull;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FIgtPDBaseIntf.IsNull;
  // TODO: Validate method results
end;

procedure TestIgtPDBaseIntf.TestIsArray;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FIgtPDBaseIntf.IsArray;
  // TODO: Validate method results
end;

procedure TestIgtPDBaseIntf.TestIsDict;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FIgtPDBaseIntf.IsDict;
  // TODO: Validate method results
end;

procedure TestIgtPDBaseIntf.TestIsStream;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FIgtPDBaseIntf.IsStream;
  // TODO: Validate method results
end;

procedure TestIgtPDBaseIntf.TestIsIndirectRef;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FIgtPDBaseIntf.IsIndirectRef;
  // TODO: Validate method results
end;

procedure TestIgtPDBaseIntf.TestIsCommand;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FIgtPDBaseIntf.IsCommand;
  // TODO: Validate method results
end;

procedure TestIgtPDBaseIntf.TestIsError;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FIgtPDBaseIntf.IsError;
  // TODO: Validate method results
end;

procedure TestIgtPDBaseIntf.TestIsEOF;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FIgtPDBaseIntf.IsEOF;
  // TODO: Validate method results
end;

procedure TestIgtPDBaseIntf.TestSaveToStream;
var
  ReturnValue: Cardinal;
  XRef: TgtObject;
  OnlyChanged: Boolean;
  Stream: TgtStream;
begin
  // TODO: Setup method call parameters
  ReturnValue := FIgtPDBaseIntf.SaveToStream(Stream, OnlyChanged, XRef);
  // TODO: Validate method results
end;

{$ENDREGION}

{$REGION 'TgtPDBaseObject'}

procedure TestTgtPDBaseObject.SetUp;
begin
  FgtPDBaseObject := TgtPDBaseObject.Create;
end;

procedure TestTgtPDBaseObject.TearDown;
begin
  FgtPDBaseObject.Free;
  FgtPDBaseObject := nil;
end;

procedure TestTgtPDBaseObject.TestIsBoolean;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FgtPDBaseObject.IsBoolean;
  // TODO: Validate method results
end;

procedure TestTgtPDBaseObject.TestIsInteger;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FgtPDBaseObject.IsInteger;
  // TODO: Validate method results
end;

procedure TestTgtPDBaseObject.TestIsReal;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FgtPDBaseObject.IsReal;
  // TODO: Validate method results
end;

procedure TestTgtPDBaseObject.TestIsNumber;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FgtPDBaseObject.IsNumber;
  // TODO: Validate method results
end;

procedure TestTgtPDBaseObject.TestIsString;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FgtPDBaseObject.IsString;
  // TODO: Validate method results
end;

procedure TestTgtPDBaseObject.TestIsName;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FgtPDBaseObject.IsName;
  // TODO: Validate method results
end;

procedure TestTgtPDBaseObject.TestIsNull;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FgtPDBaseObject.IsNull;
  // TODO: Validate method results
end;

procedure TestTgtPDBaseObject.TestIsArray;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FgtPDBaseObject.IsArray;
  // TODO: Validate method results
end;

procedure TestTgtPDBaseObject.TestIsDict;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FgtPDBaseObject.IsDict;
  // TODO: Validate method results
end;

procedure TestTgtPDBaseObject.TestIsStream;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FgtPDBaseObject.IsStream;
  // TODO: Validate method results
end;

procedure TestTgtPDBaseObject.TestIsIndirectRef;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FgtPDBaseObject.IsIndirectRef;
  // TODO: Validate method results
end;

procedure TestTgtPDBaseObject.TestIsCommand;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FgtPDBaseObject.IsCommand;
  // TODO: Validate method results
end;

procedure TestTgtPDBaseObject.TestIsError;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FgtPDBaseObject.IsError;
  // TODO: Validate method results
end;

procedure TestTgtPDBaseObject.TestIsEOF;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FgtPDBaseObject.IsEOF;
  // TODO: Validate method results
end;

procedure TestTgtPDBaseObject.TestClone;
var
  ReturnValue: TgtPDBaseObject;
begin
  ReturnValue := FgtPDBaseObject.Clone;
  // TODO: Validate method results
end;

procedure TestTgtPDBaseObject.TestAssign;
var
  ASourceObj: TgtPDBaseObject;
begin
  // TODO: Setup method call parameters
  FgtPDBaseObject.Assign(ASourceObj);
  // TODO: Validate method results
end;

procedure TestTgtPDBaseObject.TestGetType;
var
  ReturnValue: TgtPDObjTypes;
begin
  ReturnValue := FgtPDBaseObject.GetType;
  // TODO: Validate method results
end;

procedure TestTgtPDBaseObject.TestSaveToStream;
var
  ReturnValue: Cardinal;
  XRef: TgtObject;
  OnlyChanged: Boolean;
  Stream: TgtStream;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDBaseObject.SaveToStream(Stream, OnlyChanged, XRef);
  // TODO: Validate method results
end;

{$ENDREGION}

initialization
  // Register any test cases with the test runner
  RegisterTest(TestIgtPDBaseIntf.Suite);
  RegisterTest(TestTgtPDBaseObject.Suite);
end.

