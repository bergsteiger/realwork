unit TestPDBookmark;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, PDTypes, gtObject, PDAction, PDBookmark, PDElement, PDBaseObject;

type
  // Test methods for class TgtPDBookmark
  
  TestTgtPDBookmark = class(TTestCase)
  strict private
    FgtPDBookmark: TgtPDBookmark;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestUpdate;
    procedure TestAddChild;
    procedure TestAddNewChild;
    procedure TestAddNewSibling;
    procedure TestAddNext;
    procedure TestAddPrev;
    procedure TestAddSubTree;
    procedure TestGetAction;
    procedure TestGetByTitle;
    procedure TestGetColor;
    procedure TestGetCount;
    procedure TestGetFirstChild;
    procedure TestGetFlags;
    procedure TestGetIndent;
    procedure TestGetLastChild;
    procedure TestGetNext;
    procedure TestGetParent;
    procedure TestGetPrev;
    procedure TestGetTitle;
    procedure TestHasChildren;
    procedure TestRemoveAction;
    procedure TestSetAction;
    procedure TestSetColor;
    procedure TestSetFlags;
    procedure TestSetTitle;
    procedure TestUnLink;
  end;

implementation

procedure TestTgtPDBookmark.SetUp;
begin
  FgtPDBookmark := TgtPDBookmark.Create(nil, nil, nil);
end;

procedure TestTgtPDBookmark.TearDown;
begin
  FgtPDBookmark.Free;
  FgtPDBookmark := nil;
end;

procedure TestTgtPDBookmark.TestUpdate;
begin
  FgtPDBookmark.Update;
  // TODO: Validate method results
end;

procedure TestTgtPDBookmark.TestAddChild;
var
  Bookmark: TgtPDBookmark;
begin
  // TODO: Setup method call parameters
  FgtPDBookmark.AddChild(Bookmark);
  // TODO: Validate method results
end;

procedure TestTgtPDBookmark.TestAddNewChild;
var
  ReturnValue: TgtPDBookmark;
  InitialText: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDBookmark.AddNewChild(InitialText);
  // TODO: Validate method results
end;

procedure TestTgtPDBookmark.TestAddNewSibling;
var
  ReturnValue: TgtPDBookmark;
  InitialText: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDBookmark.AddNewSibling(InitialText);
  // TODO: Validate method results
end;

procedure TestTgtPDBookmark.TestAddNext;
var
  NewNext: TgtPDBookmark;
begin
  // TODO: Setup method call parameters
  FgtPDBookmark.AddNext(NewNext);
  // TODO: Validate method results
end;

procedure TestTgtPDBookmark.TestAddPrev;
var
  NewPrev: TgtPDBookmark;
begin
  // TODO: Setup method call parameters
  FgtPDBookmark.AddPrev(NewPrev);
  // TODO: Validate method results
end;

procedure TestTgtPDBookmark.TestAddSubTree;
var
  SourceTitle: string;
  Source: TgtPDBookmark;
begin
  // TODO: Setup method call parameters
  FgtPDBookmark.AddSubTree(Source, SourceTitle);
  // TODO: Validate method results
end;

procedure TestTgtPDBookmark.TestGetAction;
var
  ReturnValue: TgtPDAction;
begin
  ReturnValue := FgtPDBookmark.GetAction;
  // TODO: Validate method results
end;

procedure TestTgtPDBookmark.TestGetByTitle;
var
  ReturnValue: TgtPDBookmark;
  MaxDepth: Integer;
  Name: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDBookmark.GetByTitle(Name, MaxDepth);
  // TODO: Validate method results
end;

procedure TestTgtPDBookmark.TestGetColor;
var
  ReturnValue: Boolean;
  Color: TgtPDColorValue;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDBookmark.GetColor(Color);
  // TODO: Validate method results
end;

procedure TestTgtPDBookmark.TestGetCount;
var
  ReturnValue: Integer;
begin
  ReturnValue := FgtPDBookmark.GetCount;
  // TODO: Validate method results
end;

procedure TestTgtPDBookmark.TestGetFirstChild;
var
  ReturnValue: TgtPDBookmark;
begin
  ReturnValue := FgtPDBookmark.GetFirstChild;
  // TODO: Validate method results
end;

procedure TestTgtPDBookmark.TestGetFlags;
var
  ReturnValue: TgtPDOutlineFlags;
begin
  ReturnValue := FgtPDBookmark.GetFlags;
  // TODO: Validate method results
end;

procedure TestTgtPDBookmark.TestGetIndent;
var
  ReturnValue: Integer;
begin
  ReturnValue := FgtPDBookmark.GetIndent;
  // TODO: Validate method results
end;

procedure TestTgtPDBookmark.TestGetLastChild;
var
  ReturnValue: TgtPDBookmark;
begin
  ReturnValue := FgtPDBookmark.GetLastChild;
  // TODO: Validate method results
end;

procedure TestTgtPDBookmark.TestGetNext;
var
  ReturnValue: TgtPDBookmark;
begin
  ReturnValue := FgtPDBookmark.GetNext;
  // TODO: Validate method results
end;

procedure TestTgtPDBookmark.TestGetParent;
var
  ReturnValue: TgtPDBookmark;
begin
  ReturnValue := FgtPDBookmark.GetParent;
  // TODO: Validate method results
end;

procedure TestTgtPDBookmark.TestGetPrev;
var
  ReturnValue: TgtPDBookmark;
begin
  ReturnValue := FgtPDBookmark.GetPrev;
  // TODO: Validate method results
end;

procedure TestTgtPDBookmark.TestGetTitle;
var
  ReturnValue: string;
begin
  ReturnValue := FgtPDBookmark.GetTitle;
  // TODO: Validate method results
end;

procedure TestTgtPDBookmark.TestHasChildren;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FgtPDBookmark.HasChildren;
  // TODO: Validate method results
end;

procedure TestTgtPDBookmark.TestRemoveAction;
begin
  FgtPDBookmark.RemoveAction;
  // TODO: Validate method results
end;

procedure TestTgtPDBookmark.TestSetAction;
var
  Action: TgtPDAction;
begin
  // TODO: Setup method call parameters
  FgtPDBookmark.SetAction(Action);
  // TODO: Validate method results
end;

procedure TestTgtPDBookmark.TestSetColor;
var
  Color: TgtPDColorValue;
begin
  // TODO: Setup method call parameters
  FgtPDBookmark.SetColor(Color);
  // TODO: Validate method results
end;

procedure TestTgtPDBookmark.TestSetFlags;
var
  Flags: TgtPDOutlineFlags;
begin
  // TODO: Setup method call parameters
  FgtPDBookmark.SetFlags(Flags);
  // TODO: Validate method results
end;

procedure TestTgtPDBookmark.TestSetTitle;
var
  Title: string;
begin
  // TODO: Setup method call parameters
  FgtPDBookmark.SetTitle(Title);
  // TODO: Validate method results
end;

procedure TestTgtPDBookmark.TestUnLink;
begin
  FgtPDBookmark.UnLink;
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTgtPDBookmark.Suite);
end.

