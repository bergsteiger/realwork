unit TestPDCollection;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Classes, PDBaseObject, gtObject, Vector, PDCollection,
  SysUtils, DUnitAssert, Dialogs, FileStream, gtTypes, PDInteger, PDBoolean;

type
  // Test methods for class TgtPDCollection
  
  TestTgtPDCollection = class(TAssertTestCase)
  strict private
    FgtPDCollection: TgtPDCollection;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestGetObject;
    procedure TestAdd;
  end;

implementation                           // To be tested later

procedure TestTgtPDCollection.SetUp;
begin
  FgtPDCollection := TgtPDCollection.Create(TgtObject(nil));
end;

procedure TestTgtPDCollection.TearDown;
begin
  FgtPDCollection.Free;
  FgtPDCollection := nil;
end;

procedure TestTgtPDCollection.TestGetObject;
var
  ReturnValue: TgtPDBaseObject;
  PDInt: TgtPDInteger;
  PDBool: TgtPDBoolean;
begin
  PDInt:= TGTPDInteger.Create(5,1,0);
  PDBool:= TgtPDBoolean.Create(True,2,0);

  FgtPDCollection.Add(PDInt);
  FgtPDCollection.Add(PDBool);

  ReturnValue := FgtPDCollection.GetObject(1);
  Assert.AreEqual(ReturnValue.ClassName, 'TgtPDInteger');
  Assert.IsTrue(ReturnValue.IsInteger);
  FreeAndNil(ReturnValue);

  ReturnValue := FgtPDCollection.GetObject(2);
  Assert.AreEqual(ReturnValue.ClassName, 'TgtPDBoolean');
  Assert.IsTrue(ReturnValue.IsBoolean);
  FreeAndNil(ReturnValue);

  FreeAndNil(PDInt);
  FreeAndNil(PDBool);

end;

procedure TestTgtPDCollection.TestAdd;
var
  ReturnValue: TgtPDBaseObject;
  PDInt: TgtPDInteger;
  PDBool: TgtPDBoolean;
begin
  PDInt:= TGTPDInteger.Create(5,1,0);
  PDBool:= TgtPDBoolean.Create(True,2,0);

  FgtPDCollection.Add(PDInt);
  FgtPDCollection.Add(PDBool);

  ReturnValue := FgtPDCollection.GetObject(1);
  Assert.AreEqual(ReturnValue.ClassName, 'TgtPDInteger');
  Assert.IsTrue(ReturnValue.IsInteger);
  FreeAndNil(ReturnValue);

  ReturnValue := FgtPDCollection.GetObject(2);
  Assert.AreEqual(ReturnValue.ClassName, 'TgtPDBoolean');
  Assert.IsTrue(ReturnValue.IsBoolean);
  FreeAndNil(ReturnValue);

  FreeAndNil(PDInt);
  FreeAndNil(PDBool);
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTgtPDCollection.Suite);
end.

