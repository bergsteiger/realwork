unit TestPDCommand;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, PDCommand, PDBaseObject, Stream,
  SysUtils, DUnitAssert, Dialogs, FileStream, gtTypes;

type
  // Test methods for class TgtPDCommand
  
  TestTgtPDCommand = class(TAssertTestCase)
  strict private
    FgtPDCommand: TgtPDCommand;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestIsCommand;
    procedure TestIsCommand1;
    procedure TestClone;
    procedure TestAssign;
    procedure TestValue;
  end;

implementation

procedure TestTgtPDCommand.SetUp;
begin
  FgtPDCommand := TgtPDCommand.Create('PDCommand Object');
end;

procedure TestTgtPDCommand.TearDown;
begin
  FgtPDCommand.Free;
  FgtPDCommand := nil;
end;

procedure TestTgtPDCommand.TestIsCommand;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FgtPDCommand.IsCommand;
  Assert.IsTrue(ReturnValue);
  // TODO: Validate method results
end;

procedure TestTgtPDCommand.TestIsCommand1;
var
  ReturnValue: Boolean;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDCommand.IsCommand('PDCommand Object');
  Assert.IsTrue(ReturnValue);
  // TODO: Validate method results
end;

procedure TestTgtPDCommand.TestClone;
var
  ReturnValue: TgtPDBaseObject;
begin
  ReturnValue := FgtPDCommand.Clone;
  Assert.IsTrue(ReturnValue.IsCommand);
  Assert.AreEqual( 'PDCommand Object', TgtPDCommand(ReturnValue).Value);

  FreeAndNil(ReturnValue);
  // TODO: Validate method results
end;

procedure TestTgtPDCommand.TestAssign;                 //Not Implemented
//var
//  ASourceObj: TgtPDCommand;
begin
//  ASourceObj:= TgtPDCommand.Create('New PDCommand Object');
//  FgtPDCommand.Assign(ASourceObj);
//  Assert.AreEqual('New PDCommand Object', FgtPDCommand.Value);
//
//  FreeAndNil(ASourceObj);
  // TODO: Validate method results
end;

procedure TestTgtPDCommand.TestValue;
var
  ReturnValue: string;
begin
  ReturnValue := FgtPDCommand.Value;
  Assert.AreEqual('PDCommand Object', ReturnValue);
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTgtPDCommand.Suite);
end.

