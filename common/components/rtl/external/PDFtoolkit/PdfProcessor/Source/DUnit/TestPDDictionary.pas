unit TestPDDictionary;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Stream, PDDictionary, gtObject, Classes, Contnrs, PDBaseObject, SysUtils,
  PDInteger, PDBoolean, PDName, PDString, PDIndirectRef, DUnitAssert;

type
  // Test methods for class TgtDict
  
  TestTgtDict = class(TAssertTestCase)
  strict private
    FgtDict: TgtDict;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestAdd;
    procedure TestAdd1;
    procedure TestIsof;
    procedure TestLookUp;
    procedure TestLookupRefObj;
    procedure TestGetValue;
    procedure TestGetValueRefObj;
    procedure TestRemove;
    procedure TestRemove1;
    procedure TestGetKey;
    procedure TestSetParentDoc;
    procedure TestIncRef;
    procedure TestDecRef;
  end;
  // Test methods for class TgtPDDictionary
  
  TestTgtPDDictionary = class(TAssertTestCase)
  strict private
    FgtPDDictionary: TgtPDDictionary;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestClone;
    procedure TestSaveToStream;
    procedure TestIsDict;
    procedure TestIsDict1;
    procedure TestAdd;
    procedure TestAdd1;
    procedure TestRemove;
    procedure TestRemove1;
    procedure TestLookUp;
    procedure TestLookupRefObj;
    procedure TestLookUpClone;
    procedure TestLookupRefObjClone;
    procedure TestGetValue;
    procedure TestGetValueRefObj;
    procedure TestGetKey;
    procedure TestGetLength;
    procedure TestGetIndirectRefs;
    procedure TestAssign;
    procedure TestSetParentDoc;
    procedure TestGetParentDoc;
  end;

implementation

{$REGION 'TgtDict'}

procedure TestTgtDict.SetUp;
begin
  FgtDict := TgtDict.Create(nil);
end;

procedure TestTgtDict.TearDown;
begin
  FgtDict.Free;
  FgtDict := nil;
end;

procedure TestTgtDict.TestAdd;
var
  Value: TgtPDBaseObject;
  Key: string;
begin
  // TODO: Setup method call parameters
  FgtDict.Add(Key, Value);
  // TODO: Validate method results
end;

procedure TestTgtDict.TestAdd1;
var
  Value: TgtPDBaseObject;
  Key: TgtPDBaseObject;
begin
  // TODO: Setup method call parameters
  FgtDict.Add(Key, Value);
  // TODO: Validate method results
end;

procedure TestTgtDict.TestIsof;
var
  ReturnValue: Boolean;
  AType: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtDict.Isof(AType);
  // TODO: Validate method results
end;

procedure TestTgtDict.TestLookUp;
var
  ReturnValue: TgtPDBaseObject;
  Key: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtDict.LookUp(Key);
  // TODO: Validate method results
end;

procedure TestTgtDict.TestLookupRefObj;
var
  ReturnValue: TgtPDBaseObject;
  Key: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtDict.LookupRefObj(Key);
  // TODO: Validate method results
end;

procedure TestTgtDict.TestGetValue;
var
  ReturnValue: TgtPDBaseObject;
  AIndex: Integer;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtDict.GetValue(AIndex);
  // TODO: Validate method results
end;

procedure TestTgtDict.TestGetValueRefObj;
var
  ReturnValue: TgtPDBaseObject;
  AIndex: Integer;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtDict.GetValueRefObj(AIndex);
  // TODO: Validate method results
end;

procedure TestTgtDict.TestRemove;
var
  Key: string;
begin
  // TODO: Setup method call parameters
  FgtDict.Remove(Key);
  // TODO: Validate method results
end;

procedure TestTgtDict.TestRemove1;
var
  Key: TgtPDBaseObject;
begin
  // TODO: Setup method call parameters
  FgtDict.Remove(Key);
  // TODO: Validate method results
end;

procedure TestTgtDict.TestGetKey;
var
  ReturnValue: string;
  AIndex: Integer;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtDict.GetKey(AIndex);
  // TODO: Validate method results
end;

procedure TestTgtDict.TestSetParentDoc;
var
  AParentDoc: TgtObject;
begin
  // TODO: Setup method call parameters
  FgtDict.SetParentDoc(AParentDoc);
  // TODO: Validate method results
end;

procedure TestTgtDict.TestIncRef;
var
  ReturnValue: Integer;
begin
  ReturnValue := FgtDict.IncRef;
  // TODO: Validate method results
end;

procedure TestTgtDict.TestDecRef;
var
  ReturnValue: Integer;
begin
  ReturnValue := FgtDict.DecRef;
  // TODO: Validate method results
end;

{$ENDREGION}

{$REGION 'TgtPDDictionary'}

procedure TestTgtPDDictionary.SetUp;
begin
  FgtPDDictionary := TgtPDDictionary.Create(TgtObject(nil));    //Length 384/C 535/Filter/FlateDecode/I 557/S 227
//  FgtPDDictionary.Add('Length', TgtPDInteger.Create(384));
//  FgtPDDictionary.Add('C', TgtPDInteger.Create(535));
//  FgtPDDictionary.Add('Filter', TgtPDName.Create('FlateDecode'));
//  FgtPDDictionary.Add('I', TgtPDInteger.Create(557));
//  FgtPDDictionary.Add('S', TgtPDInteger.Create(227));
//  FgtPDDictionary.Add('Type', TgtPDName.Create('Flate'));

end;

procedure TestTgtPDDictionary.TearDown;
begin
  FgtPDDictionary.Free;
  FgtPDDictionary := nil;
end;

procedure TestTgtPDDictionary.TestClone;
var
  ReturnValue: TgtPDBaseObject;
begin
  FgtPDDictionary.Add('Length', TgtPDInteger.Create(384));
  FgtPDDictionary.Add('C', TgtPDInteger.Create(535));
  ReturnValue := FgtPDDictionary.Clone;
  Assert.IsTrue(ReturnValue.IsDict);     
  Assert.AreEqual(TgtPDDictionary(ReturnValue).GetKey(0), 'Length');

  FreeAndNil(ReturnValue);
  // TODO: Validate method results
end;

procedure TestTgtPDDictionary.TestSaveToStream;
var
  ReturnValue: Cardinal;
  XRef: TgtObject;
  OnlyChanged: Boolean;
  Stream: TgtStream;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDDictionary.SaveToStream(Stream, OnlyChanged, XRef);
  // TODO: Validate method results
end;

procedure TestTgtPDDictionary.TestIsDict;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FgtPDDictionary.IsDict;

  Assert.IsTrue(ReturnValue);
  // TODO: Validate method results
end;

procedure TestTgtPDDictionary.TestIsDict1;
var
  ReturnValue: Boolean;
  ADictType: string;
begin
  ADictType := 'Flate';
  FgtPDDictionary.Add('Type', TgtPDName.Create(ADictType));
  ReturnValue := FgtPDDictionary.IsDict(ADictType);
  Assert.IsTrue(ReturnValue);
  // TODO: Validate method results
end;

procedure TestTgtPDDictionary.TestAdd;
var
  AValue: TgtPDBaseObject;
  Key: string;
begin
  // TODO: Setup method call parameters
  Key := 'Length';
  AValue := TgtPDInteger.Create(384);
  FgtPDDictionary.Add(Key, AValue);
  Assert.AreEqual(FgtPDDictionary.GetKey(0), 'Length');

  //FreeAndNil(AValue);

  // TODO: Validate method results
end;

procedure TestTgtPDDictionary.TestAdd1;            // Not Implemented
var
  AValue: TgtPDBaseObject;
  Key: TgtPDBaseObject;
begin
  Key := TgtPDString.Create('Length', False);
  AValue := TgtPDInteger.Create(384);

  FgtPDDictionary.Add(Key, AValue);
  
  Assert.AreEqual(FgtPDDictionary.GetKey(0), 'Length', 'Not Implemented');

//  FreeAndNil(AValue);
//  FreeAndNil(Key);

end;

procedure TestTgtPDDictionary.TestRemove;
//var
//  Key: string;
begin
  FgtPDDictionary.Add('Length', TgtPDInteger.Create(384));
  FgtPDDictionary.Add('C', TgtPDInteger.Create(535));
  FgtPDDictionary.Add('Filter', TgtPDName.Create('FlateDecode'));
  FgtPDDictionary.Add('I', TgtPDInteger.Create(557));
  FgtPDDictionary.Add('S', TgtPDInteger.Create(227));
  FgtPDDictionary.Add('Type', TgtPDName.Create('Flate'));

  FgtPDDictionary.Remove('C');

  Assert.AreEqual('Filter', FgtPDDictionary.GetKey(1) );
  Assert.AreEqual(5, FgtPDDictionary.GetLength);

  // TODO: Validate method results
end;

procedure TestTgtPDDictionary.TestRemove1;               // Not implemented
var
  Key: TgtPDBaseObject;
begin
  FgtPDDictionary.Add('Length', TgtPDInteger.Create(384));
  FgtPDDictionary.Add('C', TgtPDInteger.Create(535));
  FgtPDDictionary.Add('Filter', TgtPDName.Create('FlateDecode'));
  FgtPDDictionary.Add('I', TgtPDInteger.Create(557));
  FgtPDDictionary.Add('S', TgtPDInteger.Create(227));
  FgtPDDictionary.Add('Type', TgtPDName.Create('Flate'));

  Key := TgtPDString.Create('Length', False);

  FgtPDDictionary.Remove(Key);

  //Assert.AreEqual('C', FgtPDDictionary.GetKey(0));
  Assert.AreEqual(5, FgtPDDictionary.GetLength, 'Not Implemented');

  FreeAndNil(Key);
  // TODO: Validate method results
end;

procedure TestTgtPDDictionary.TestLookUp;
var
  ReturnValue: TgtPDBaseObject;
  Key: string;
begin
  // TODO: Setup method call parameters
  FgtPDDictionary.Add('Length', TgtPDInteger.Create(384));
  ReturnValue := FgtPDDictionary.LookUp('Length'); // Return will TGTPDInteger, cast to PD Int and .Value
  Assert.IsTrue(TgtPDDictionary(ReturnValue).IsInteger);
  Assert.AreEqual(384, TgtPDInteger(ReturnValue).GetValue);

  //FreeAndNil(ReturnValue);
  // TODO: Validate method results
end;

procedure TestTgtPDDictionary.TestLookupRefObj;
var
  ReturnValue: TgtPDBaseObject;
  Key: string;
begin
  // TODO: Setup method call parameters.
  FgtPDDictionary.Add('Length', TgtPDInteger.Create(384));
  ReturnValue := FgtPDDictionary.LookupRefObj('Length');

  Assert.IsTrue(TgtPDDictionary(ReturnValue).IsInteger);
  Assert.AreEqual(384, TgtPDInteger(ReturnValue).GetValue);

  //FreeAndNil(ReturnValue);
  // TODO: Validate method results
end;

procedure TestTgtPDDictionary.TestLookUpClone;
var
  ReturnValue: TgtPDBaseObject;
  Key: string;
begin
  FgtPDDictionary.Add('Length', TgtPDInteger.Create(384));
  ReturnValue := FgtPDDictionary.LookUpClone('Length');

  Assert.IsTrue(TgtPDDictionary(ReturnValue).IsInteger);
  Assert.AreEqual(384, TgtPDInteger(ReturnValue).GetValue);

  FreeAndNil(ReturnValue);
  // TODO: Validate method results
end;

procedure TestTgtPDDictionary.TestLookupRefObjClone;
var
  ReturnValue: TgtPDBaseObject;
  Key: string;
begin
  FgtPDDictionary.Add('Length', TgtPDInteger.Create(384));
  ReturnValue := FgtPDDictionary.LookupRefObjClone('Length');

  Assert.IsTrue(TgtPDDictionary(ReturnValue).IsInteger);
  Assert.AreEqual(384, TgtPDInteger(ReturnValue).GetValue);

  FreeAndNil(ReturnValue);
  // TODO: Validate method results
end;

procedure TestTgtPDDictionary.TestGetValue;
var
  ReturnValue: TgtPDBaseObject;
  AIndex: Integer;
begin
  FgtPDDictionary.Add('Length', TgtPDInteger.Create(384));
  ReturnValue := FgtPDDictionary.GetValue(0);

  Assert.IsTrue(ReturnValue.IsInteger);

  Assert.AreEqual(384, TgtPDInteger(ReturnValue).Value);

  //FreeAndNil(ReturnValue);
  // TODO: Validate method results
end;

procedure TestTgtPDDictionary.TestGetValueRefObj;
var
  ReturnValue: TgtPDBaseObject;
  AIndex: Integer;
begin
  FgtPDDictionary.Add('Length', TgtPDInteger.Create(384));
  ReturnValue := FgtPDDictionary.GetValueRefObj(0);

  Assert.IsTrue(ReturnValue.IsInteger);

  Assert.AreEqual(384, TgtPDInteger(ReturnValue).Value);

  //FreeAndNil(ReturnValue);
  // TODO: Validate method results
end;

procedure TestTgtPDDictionary.TestGetKey;
var
  ReturnValue: string;
  Index: Integer;
begin
  FgtPDDictionary.Add('C', TgtPDInteger.Create(535));
  ReturnValue := FgtPDDictionary.GetKey(0);
  Assert.AreEqual('C', ReturnValue);
  // TODO: Validate method results
end;

procedure TestTgtPDDictionary.TestGetLength;
var
  ReturnValue: Integer;
begin
  FgtPDDictionary.Add('Length', TgtPDInteger.Create(384));
  FgtPDDictionary.Add('C', TgtPDInteger.Create(535));
  FgtPDDictionary.Add('Filter', TgtPDName.Create('FlateDecode'));
  FgtPDDictionary.Add('I', TgtPDInteger.Create(557));
  FgtPDDictionary.Add('S', TgtPDInteger.Create(227));
  FgtPDDictionary.Add('Type', TgtPDName.Create('Flate'));

  ReturnValue := FgtPDDictionary.GetLength;

  Assert.AreEqual(6,ReturnValue);
  // TODO: Validate method results
end;

procedure TestTgtPDDictionary.TestGetIndirectRefs;
var
  List: TObjectList;
begin
  List := TObjectList.Create(False);
  FgtPDDictionary.Add('IndRef', TgtPDIndirectRef.Create(1,2));
  FgtPDDictionary.GetIndirectRefs(List);
  Assert.IsTrue(TgtPDBaseObject(List.Items[0]).IsIndirectRef);
  // TODO: Validate method results
  FreeAndNil(list);
end;

procedure TestTgtPDDictionary.TestAssign;          
var
  ASourceObj: TgtPDBaseObject;
begin
  ASourceObj := TgtPDDictionary.create(TgtObject(nil));

  TgtPDDictionary(ASourceObj).Add('Length', TgtPDInteger.Create(384));
  TgtPDDictionary(ASourceObj).Add('C', TgtPDInteger.Create(535));
  TgtPDDictionary(ASourceObj).Add('Filter', TgtPDName.Create('FlateDecode'));
  TgtPDDictionary(ASourceObj).Add('I', TgtPDInteger.Create(557));
  TgtPDDictionary(ASourceObj).Add('S', TgtPDInteger.Create(227));
  TgtPDDictionary(ASourceObj).Add('Type', TgtPDName.Create('Flate'));

  FgtPDDictionary.Assign(ASourceObj);

  Assert.AreEqual(6, FgtPDDictionary.GetLength, 6);

  Assert.AreEqual('Length', FgtPDDictionary.GetKey(0));

  FreeAndNil(ASourceObj);
  // TODO: Validate method results
end;

procedure TestTgtPDDictionary.TestSetParentDoc;  // Not to be tested
var
  AParentDoc: TgtObject;
begin
  // TODO: Setup method call parameters
  FgtPDDictionary.SetParentDoc(AParentDoc);
  // TODO: Validate method results
end;

procedure TestTgtPDDictionary.TestGetParentDoc;  // Not to be tested
var
  ReturnValue: TgtObject;
begin
  ReturnValue := FgtPDDictionary.GetParentDoc;
  // TODO: Validate method results
end;

{$ENDREGION}

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTgtDict.Suite);
  RegisterTest(TestTgtPDDictionary.Suite);
end.

