unit TestPDDocument;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, PDBaseObject, PDPageLabel, PDThread, PDColorSpace, PDBookmark, PDOCG, 
  PDOCConfig, PDFont, PDDocument, PDTypes, PDThumb, PDOCContext, gtObject, PDResource, 
  Classes, PDPage, PDCatalog, PDXObject, PDAnnot, PDPageTree, PDTextSelect, PDNameTree, 
  PDAction, PDBaseDoc, PDRect;

type
  // Test methods for class TgtPDDocument
  
  TestTgtPDDocument = class(TTestCase)
  strict private
    FgtPDDocument: TgtPDDocument;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestLoadDocument;
    procedure TestLoadDocument1;
    procedure TestSaveDocument;
    procedure TestSaveDocument1;
    procedure TestCloseDocument;
    procedure TestCopyToFile;
    procedure TestGetFileName;
    procedure TestGetPageByIndRef;
    procedure TestCreatePage;
    procedure TestDeletePages;
    procedure TestGetPageBaseObject;
    procedure TestInsertPages;
    procedure TestMovePage;
    procedure TestReplacePages;
    procedure TestRequestPages;
    procedure TestAddThread;
    procedure TestGetNumThreads;
    procedure TestGetThread;
    procedure TestRemoveThread;
    procedure TestAddWatermarkFromPage;
    procedure TestAddWatermarkFromText;
    procedure TestAuthorize;
    procedure TestGetPermissions;
    procedure TestGetInfo;
    procedure TestSetDocInfo;
    procedure TestCountXMPMetadataArrayItems;
    procedure TestGetXMPMetadataArrayItem;
    procedure TestSetXMPMetadataArrayItem;
    procedure TestGetXMPMetadataProperty;
    procedure TestSetXMPMetadataProperty;
    procedure TestGetMergedXMPKeywords;
    procedure TestMergeXMPKeywords;
    procedure TestGetTrapped;
    procedure TestSetTrapped;
    procedure TestGetXMPMetadata;
    procedure TestSetXMPMetadata;
    procedure TestCreateNameTree;
    procedure TestGetNameTree;
    procedure TestRemoveNameTree;
    procedure TestCreateTextSelect;
    procedure TestAddThumbnails;
    procedure TestDeleteThumbs;
    procedure TestEnumFonts;
    procedure TestEnumLoadedFonts;
    procedure TestEnumXObjectResources;
    procedure TestEnumColorSpaceResources;
    procedure TestEnumProcSetResources;
    procedure TestExportNotes;
    procedure TestExportSomeNotes;
    procedure TestImportNotes;
    procedure TestImportNotes1;
    procedure TestHasOC;
    procedure TestEnumOCConfigs;
    procedure TestGetOCConfig;
    procedure TestEnumOCGs;
    procedure TestGetNumOCGs;
    procedure TestGetOCGs;
    procedure TestReplaceOCG;
    procedure TestFlattenOC;
    procedure TestGetOCContext;
    procedure TestGetBookmarkRoot;
    procedure TestFindPageNumForLabel;
    procedure TestGetLabelForPage;
    procedure TestGetPageLabel;
    procedure TestSetPageLabel;
    procedure TestRemovePageLabel;
    procedure TestGetOpenAction;
    procedure TestRemoveOpenAction;
    procedure TestSetOpenAction;
    procedure TestGetLayoutMode;
    procedure TestSetLayoutMode;
    procedure TestGetPageMode;
    procedure TestSetPageMode;
    procedure TestGetDocID;
  end;

implementation

procedure TestTgtPDDocument.SetUp;
begin
  FgtPDDocument := TgtPDDocument.Create;
end;

procedure TestTgtPDDocument.TearDown;
begin
  FgtPDDocument.Free;
  FgtPDDocument := nil;
end;

procedure TestTgtPDDocument.TestLoadDocument;
var
  DoRepair: Boolean;
  AuthorizeEvent: TgtPDAuthorizeDocEvent;
  FileName: string;
begin
  // TODO: Setup method call parameters
  FgtPDDocument.LoadDocument(FileName, DoRepair);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestLoadDocument1;
var
  DoRepair: Boolean;
  AuthorizeEvent: TgtPDAuthorizeDocEvent;
  Stream: TStream;
begin
  // TODO: Setup method call parameters
  FgtPDDocument.LoadDocument(Stream, DoRepair);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestSaveDocument;
var
  SaveFlags: TgtPDSaveFlags;
  FileName: string;
begin
  // TODO: Setup method call parameters
  FgtPDDocument.SaveDocument(FileName, SaveFlags);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestSaveDocument1;
var
  SaveFlags: TgtPDSaveFlags;
  Stream: TStream;
begin
  // TODO: Setup method call parameters
  FgtPDDocument.SaveDocument(Stream, SaveFlags);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestCloseDocument;
begin
  FgtPDDocument.CloseDocument;
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestCopyToFile;
var
  CancelEvent: TgtPDCancelEvent;
  SaveChanges: Boolean;
  FileName: string;
begin
  // TODO: Setup method call parameters
  FgtPDDocument.CopyToFile(FileName, SaveChanges, CancelEvent);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestGetFileName;
var
  ReturnValue: string;
begin
  ReturnValue := FgtPDDocument.GetFileName;
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestGetPageByIndRef;
var
  ReturnValue: TgtPDPage;
  APageRef: TgtPDBaseObject;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDDocument.GetPageByIndRef(APageRef);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestCreatePage;
var
  ReturnValue: TgtPDPage;
  MediaBox: TgtPDRect;
  AfterPage: Integer;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDDocument.CreatePage(AfterPage, MediaBox);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestDeletePages;
var
  LastPage: Integer;
  FirstPage: Integer;
begin
  // TODO: Setup method call parameters
  FgtPDDocument.DeletePages(FirstPage, LastPage);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestGetPageBaseObject;
var
  ReturnValue: TgtPDBaseObject;
  PageNumber: Integer;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDDocument.GetPageBaseObject(PageNumber);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestInsertPages;
var
  InsertFlags: TgtPageInsertFlages;
  NumOfPages: Integer;
  SourceStartPage: Integer;
  SourceDoc: TgtPDDocument;
  AfterPage: Integer;
begin
  // TODO: Setup method call parameters
  FgtPDDocument.InsertPages(AfterPage, SourceDoc, SourceStartPage, NumOfPages, 
      InsertFlags);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestMovePage;
var
  PageToMove: Integer;
  MoveToAfterPage: Integer;
begin
  // TODO: Setup method call parameters
  FgtPDDocument.MovePage(MoveToAfterPage, PageToMove);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestReplacePages;
var
  MergeTextAnnots: Boolean;
  NumOfPages: Integer;
  SourceStartPage: Integer;
  SourceDoc: TgtPDDocument;
  StartPage: Integer;
begin
  // TODO: Setup method call parameters
  FgtPDDocument.ReplacePages(StartPage, SourceDoc, SourceStartPage, NumOfPages, 
      MergeTextAnnots);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestRequestPages;
var
  RequestPagesEvent: TgtRequestPagesEvent;
  NumOfPages: Integer;
  StartPage: Integer;
begin
  // TODO: Setup method call parameters
  FgtPDDocument.RequestPages(StartPage, NumOfPages, RequestPagesEvent);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestAddThread;
var
  Thread: TgtPDThread;
  AddAfterIndex: Integer;
begin
  // TODO: Setup method call parameters
  FgtPDDocument.AddThread(AddAfterIndex, Thread);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestGetNumThreads;
var
  ReturnValue: Integer;
begin
  ReturnValue := FgtPDDocument.GetNumThreads;
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestGetThread;
var
  ReturnValue: TgtPDThread;
  Index: Integer;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDDocument.GetThread(Index);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestRemoveThread;
var
  Index: Integer;
begin
  // TODO: Setup method call parameters
  FgtPDDocument.RemoveThread(Index);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestAddWatermarkFromPage;
var
  WatermarkParams: TgtPDAddWatermarkParams;
  Page: TgtPDPage;
begin
  // TODO: Setup method call parameters
  FgtPDDocument.AddWatermarkFromPage(Page, WatermarkParams);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestAddWatermarkFromText;
var
  WatermarkParams: TgtPDAddWatermarkParams;
  TextParams: TgtPDWatermarkTextParams;
begin
  // TODO: Setup method call parameters
  FgtPDDocument.AddWatermarkFromText(TextParams, WatermarkParams);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestAuthorize;
var
  ReturnValue: TgtPDPermissions;
  PermsWanted: TgtPDPermissions;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDDocument.Authorize(PermsWanted,'');
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestGetPermissions;
var
  ReturnValue: TgtPDPermissions;
begin
  ReturnValue := FgtPDDocument.GetPermissions;
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestGetInfo;
var
  Value: string;
  InfoKey: string;
begin
  // TODO: Setup method call parameters
  FgtPDDocument.GetInfo(InfoKey, Value);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestSetDocInfo;
var
  Value: string;
  InfoKey: string;
begin
  // TODO: Setup method call parameters
  FgtPDDocument.SetDocInfo(InfoKey, Value);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestCountXMPMetadataArrayItems;
var
  ReturnValue: Integer;
  Path: string;
  NameSpace: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDDocument.CountXMPMetadataArrayItems(NameSpace, Path);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestGetXMPMetadataArrayItem;
var
  ReturnValue: string;
  Index: Integer;
  Path: string;
  NameSpaceName: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDDocument.GetXMPMetadataArrayItem(NameSpaceName, Path, Index);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestSetXMPMetadataArrayItem;
var
  NewValue: string;
  Index: Integer;
  Path: string;
  NamespacePrefix: string;
  NameSpace: string;
begin
  // TODO: Setup method call parameters
  FgtPDDocument.SetXMPMetadataArrayItem(NameSpace, NamespacePrefix, Path, Index, 
      NewValue);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestGetXMPMetadataProperty;
var
  ReturnValue: string;
  Path: string;
  NameSpaceName: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDDocument.GetXMPMetadataProperty(NameSpaceName, Path);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestSetXMPMetadataProperty;
var
  NewValue: string;
  Path: string;
  NamespacePrefix: string;
  NameSpace: string;
begin
  // TODO: Setup method call parameters
  FgtPDDocument.SetXMPMetadataProperty(NameSpace, NamespacePrefix, Path, NewValue);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestGetMergedXMPKeywords;
var
  ReturnValue: string;
begin
  ReturnValue := FgtPDDocument.GetMergedXMPKeywords;
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestMergeXMPKeywords;
begin
  FgtPDDocument.MergeXMPKeywords;
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestGetTrapped;
var
  ReturnValue: TgtPDTrapped;
begin
  ReturnValue := FgtPDDocument.GetTrapped;
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestSetTrapped;
var
  Value: TgtPDTrapped;
begin
  // TODO: Setup method call parameters
  FgtPDDocument.SetTrapped(Value);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestGetXMPMetadata;
var
  ReturnValue: string;
begin
  ReturnValue := FgtPDDocument.GetXMPMetadata;
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestSetXMPMetadata;
var
  Metadata: string;
begin
  // TODO: Setup method call parameters
  FgtPDDocument.SetXMPMetadata(Metadata);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestCreateNameTree;
var
  ReturnValue: TgtPDNameTree;
  TreeName: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDDocument.CreateNameTree(TreeName);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestGetNameTree;
var
  ReturnValue: TgtPDNameTree;
  TreeName: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDDocument.GetNameTree(TreeName);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestRemoveNameTree;
var
  TreeName: string;
begin
  // TODO: Setup method call parameters
  FgtPDDocument.RemoveNameTree(TreeName);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestCreateTextSelect;
var
  ReturnValue: TgtPDTextSelect;
  BoundingRect: TgtPDRect;
  PageNum: Integer;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDDocument.CreateTextSelect(PageNum, BoundingRect);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestAddThumbnails;
var
  LookupTable: string;
  HiVal: Integer;
  BitsPerComp: Integer;
  ColorSpace: TgtPDColorSpaceType;
  Server: TgtPDThumbsCreationServer;
  LastPage: Integer;
  FirstPage: Integer;
begin
  // TODO: Setup method call parameters
  FgtPDDocument.AddThumbnails(FirstPage, LastPage, Server, ColorSpace, BitsPerComp, 
      HiVal, LookupTable);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestDeleteThumbs;
var
  LastPage: Integer;
  FirstPage: Integer;
begin
  // TODO: Setup method call parameters
  FgtPDDocument.DeleteThumbs(FirstPage, LastPage);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestEnumFonts;
var
  FontEnumEvent: TgtPDEnumFontEvent;
  LastPage: Integer;
  FirstPage: Integer;
begin
  // TODO: Setup method call parameters
  FgtPDDocument.EnumFonts(FirstPage, LastPage, FontEnumEvent);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestEnumLoadedFonts;
var
  FontEnumEvent: TgtPDEnumFontEvent;
begin
  // TODO: Setup method call parameters
  FgtPDDocument.EnumLoadedFonts(FontEnumEvent);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestEnumXObjectResources;
var
  XObjectEnumEvent: TgtPDEnumXObjectEvent;
  EndPage: Integer;
  StartPage: Integer;
begin
  // TODO: Setup method call parameters
  FgtPDDocument.EnumXObjectResources(StartPage, EndPage, XObjectEnumEvent);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestEnumColorSpaceResources;
var
  ColorSpaceEnumEvent: TgtPDEnumColorSpaceEvent;
  EndPage: Integer;
  StartPage: Integer;
begin
  // TODO: Setup method call parameters
  FgtPDDocument.EnumColorSpaceResources(StartPage, EndPage, ColorSpaceEnumEvent);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestEnumProcSetResources;
var
  ProcSetEnumEvent: TgtPDEnumProcSetEvent;
  EndPage: Integer;
  StartPage: Integer;
begin
  // TODO: Setup method call parameters
  FgtPDDocument.EnumProcSetResources(StartPage, EndPage, ProcSetEnumEvent);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestExportNotes;
var
  ReturnValue: TgtPDDocument;
begin
  ReturnValue := FgtPDDocument.ExportNotes;
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestExportSomeNotes;
var
  ReturnValue: TgtPDDocument;
  AnnotArray: TgtPDAnnotType;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDDocument.ExportSomeNotes(AnnotArray);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestImportNotes;
var
  ReturnValue: Integer;
  Color: TgtPDColorValue;
  SourceDoc: TgtPDDocument;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDDocument.ImportNotes(SourceDoc, Color);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestImportNotes1;
var
  ReturnValue: Integer;
  ImportFilterEvent: TgtPDAnnotImportFilterEvent;
  SourceDoc: TgtPDDocument;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDDocument.ImportNotes(SourceDoc, ImportFilterEvent);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestHasOC;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FgtPDDocument.HasOC;
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestEnumOCConfigs;
var
  OCConfigEnumEvent: TgtPDEnumOCConfigEvent;
begin
  // TODO: Setup method call parameters
  FgtPDDocument.EnumOCConfigs(OCConfigEnumEvent);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestGetOCConfig;
var
  ReturnValue: TgtPDOCConfig;
begin
  ReturnValue := FgtPDDocument.GetOCConfig;
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestEnumOCGs;
var
  OCGEnumEvent: TgtPDEnumOCGEvent;
begin
  // TODO: Setup method call parameters
  FgtPDDocument.EnumOCGs(OCGEnumEvent);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestGetNumOCGs;
var
  ReturnValue: Integer;
begin
  ReturnValue := FgtPDDocument.GetNumOCGs;
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestGetOCGs;
var
  ReturnValue: PDOCG.TgtPDOCGArray;
begin
  ReturnValue := FgtPDDocument.GetOCGs;
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestReplaceOCG;
var
  KeepOCG: TgtPDOCG;
  ReplaceOCG: TgtPDOCG;
begin
  // TODO: Setup method call parameters
  FgtPDDocument.ReplaceOCG(ReplaceOCG, KeepOCG);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestFlattenOC;
var
  ReturnValue: Boolean;
  OCContext: TgtPDOCContext;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDDocument.FlattenOC(OCContext);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestGetOCContext;
var
  ReturnValue: TgtPDOCContext;
begin
  ReturnValue := FgtPDDocument.GetOCContext;
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestGetBookmarkRoot;
var
  ReturnValue: TgtPDBookmark;
begin
  ReturnValue := FgtPDDocument.GetBookmarkRoot;
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestFindPageNumForLabel;
var
  ReturnValue: Integer;
  LabelStr: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDDocument.FindPageNumForLabel(LabelStr);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestGetLabelForPage;
var
  LabelStr: string;
  PageNum: Integer;
begin
  // TODO: Setup method call parameters
  FgtPDDocument.GetLabelForPage(PageNum, LabelStr);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestGetPageLabel;
var
  ReturnValue: TgtPDPageLabel;
  LastPage: Integer;
  FirstPage: Integer;
  PageNum: Integer;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDDocument.GetPageLabel(PageNum, FirstPage, LastPage);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestSetPageLabel;
var
  PageLabel: TgtPDPageLabel;
  PageNum: Integer;
begin
  // TODO: Setup method call parameters
  FgtPDDocument.SetPageLabel(PageNum, PageLabel);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestRemovePageLabel;
var
  PageNum: Integer;
begin
  // TODO: Setup method call parameters
  FgtPDDocument.RemovePageLabel(PageNum);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestGetOpenAction;
var
  ReturnValue: TgtPDAction;
begin
  ReturnValue := FgtPDDocument.GetOpenAction;
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestRemoveOpenAction;
begin
  FgtPDDocument.RemoveOpenAction;
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestSetOpenAction;
var
  Action: TgtPDAction;
begin
  // TODO: Setup method call parameters
  FgtPDDocument.SetOpenAction(Action);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestGetLayoutMode;
var
  ReturnValue: TgtPDLayoutMode;
begin
  ReturnValue := FgtPDDocument.GetLayoutMode;
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestSetLayoutMode;
var
  Mode: TgtPDLayoutMode;
begin
  // TODO: Setup method call parameters
  FgtPDDocument.SetLayoutMode(Mode);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestGetPageMode;
var
  ReturnValue: TgtPDPageMode;
begin
  ReturnValue := FgtPDDocument.GetPageMode;
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestSetPageMode;
var
  Mode: TgtPDPageMode;
begin
  // TODO: Setup method call parameters
  FgtPDDocument.SetPageMode(Mode);
  // TODO: Validate method results
end;

procedure TestTgtPDDocument.TestGetDocID;
var
  ChangingID: string;
  PermenantID: string;
begin
  // TODO: Setup method call parameters
  FgtPDDocument.GetDocID(PermenantID, ChangingID);
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTgtPDDocument.Suite);
end.

