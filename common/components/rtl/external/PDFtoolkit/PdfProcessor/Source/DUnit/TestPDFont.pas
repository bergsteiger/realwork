unit TestPDFont;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, PDTypes, PDXlateTable, gtObject, PDEncoding, PDFont, PDElement, 
  PDBaseObject, PDRect;

type
  // Test methods for class TgtPDFont
  
  TestTgtPDFont = class(TTestCase)
  strict private
    FgtPDFont: TgtPDFont;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestUpdate;
    procedure TestGetEncoding;
    procedure TestGetEncodingType;
    procedure TestGetXlateTable;
    procedure TestGetName;
    procedure TestGetBBox;
    procedure TestGetCIDSystemInfo;
    procedure TestGetCIDSystemSupplement;
    procedure TestGetCharSet;
    procedure TestGetDescendant;
    procedure TestGetFontMatrix;
    procedure TestGetSubType;
    procedure TestGetWidths;
    procedure TestIsEmbeded;
    procedure TestSetMetrics;
    procedure TestXlateString;
    procedure TestXlateToHost;
    procedure TestXlateToUCS;
    procedure TestXlateWidths;
  end;

implementation

procedure TestTgtPDFont.SetUp;
begin
  FgtPDFont := TgtPDFont.Create(nil, nil, nil);
end;

procedure TestTgtPDFont.TearDown;
begin
  FgtPDFont.Free;
  FgtPDFont := nil;
end;

procedure TestTgtPDFont.TestUpdate;
begin
  FgtPDFont.Update;
  // TODO: Validate method results
end;

procedure TestTgtPDFont.TestGetEncoding;
var
  ReturnValue: TgtPDEncoding;
begin
  ReturnValue := FgtPDFont.GetEncoding;
  // TODO: Validate method results
end;

procedure TestTgtPDFont.TestGetEncodingType;
var
  ReturnValue: TgtPDFontEncoding;
begin
  ReturnValue := FgtPDFont.GetEncodingType;
  // TODO: Validate method results
end;

procedure TestTgtPDFont.TestGetXlateTable;
var
  ReturnValue: TgtPDXlateTable;
begin
  ReturnValue := FgtPDFont.GetXlateTable;
  // TODO: Validate method results
end;

procedure TestTgtPDFont.TestGetName;
var
  ReturnValue: string;
  RemovePrefix: Boolean;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDFont.GetName(RemovePrefix);
  // TODO: Validate method results
end;

procedure TestTgtPDFont.TestGetBBox;
var
  ReturnValue: TgtPDRect;
begin
  ReturnValue := FgtPDFont.GetBBox;
  // TODO: Validate method results
end;

procedure TestTgtPDFont.TestGetCIDSystemInfo;
var
  ReturnValue: string;
begin
  ReturnValue := FgtPDFont.GetCIDSystemInfo;
  // TODO: Validate method results
end;

procedure TestTgtPDFont.TestGetCIDSystemSupplement;
var
  ReturnValue: Integer;
begin
  ReturnValue := FgtPDFont.GetCIDSystemSupplement;
  // TODO: Validate method results
end;

procedure TestTgtPDFont.TestGetCharSet;
var
  ReturnValue: TgtPDCharSet;
begin
  ReturnValue := FgtPDFont.GetCharSet;
  // TODO: Validate method results
end;

procedure TestTgtPDFont.TestGetDescendant;
var
  ReturnValue: TgtPDFont;
begin
  ReturnValue := FgtPDFont.GetDescendant;
  // TODO: Validate method results
end;

procedure TestTgtPDFont.TestGetFontMatrix;
var
  ReturnValue: TgtPDMatrix;
begin
  ReturnValue := FgtPDFont.GetFontMatrix;
  // TODO: Validate method results
end;

procedure TestTgtPDFont.TestGetSubType;
var
  ReturnValue: string;
begin
  ReturnValue := FgtPDFont.GetSubType;
  // TODO: Validate method results
end;

procedure TestTgtPDFont.TestGetWidths;
var
  ReturnValue: TgtPDFontWidthArray;
begin
  ReturnValue := FgtPDFont.GetWidths;
  // TODO: Validate method results
end;

procedure TestTgtPDFont.TestIsEmbeded;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FgtPDFont.IsEmbeded;
  // TODO: Validate method results
end;

procedure TestTgtPDFont.TestSetMetrics;
var
  Metrics: TgtPDFontMetrics;
begin
  // TODO: Setup method call parameters
  FgtPDFont.SetMetrics(Metrics);
  // TODO: Validate method results
end;

procedure TestTgtPDFont.TestXlateString;
var
  ReturnValue: Boolean;
  OutStr: string;
  InStr: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDFont.XlateString(InStr, OutStr);
  // TODO: Validate method results
end;

procedure TestTgtPDFont.TestXlateToHost;
var
  OutStr: string;
  InStr: string;
begin
  // TODO: Setup method call parameters
  FgtPDFont.XlateToHost(InStr, OutStr);
  // TODO: Validate method results
end;

procedure TestTgtPDFont.TestXlateToUCS;
var
  OutStr: string;
  InStr: string;
begin
  // TODO: Setup method call parameters
  FgtPDFont.XlateToUCS(InStr, OutStr);
  // TODO: Validate method results
end;

procedure TestTgtPDFont.TestXlateWidths;
var
  OutWidthArray: TgtPDFontWidthArray;
  InWidthArray: TgtPDFontWidthArray;
begin
  // TODO: Setup method call parameters
  FgtPDFont.XlateWidths(InWidthArray, OutWidthArray);
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTgtPDFont.Suite);
end.

