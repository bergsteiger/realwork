unit TestPDIndirectRef;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, PDIndirectRef, Stream, gtObject, PDBaseObject,
  SysUtils, DUnitAssert, Dialogs, FileStream, gtTypes;

type
  // Test methods for class TgtPDIndirectRef
  
  TestTgtPDIndirectRef = class(TAssertTestCase)
  strict private
    FgtPDIndirectRef: TgtPDIndirectRef;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestClone;
    procedure TestIsIndirectRef;
    procedure TestSaveToStream;
    procedure TestAssign;
  end;

implementation

procedure TestTgtPDIndirectRef.SetUp;
begin
  FgtPDIndirectRef := TgtPDIndirectRef.Create(0 , 0);
end;

procedure TestTgtPDIndirectRef.TearDown;
begin
  FgtPDIndirectRef.Free;
  FgtPDIndirectRef := nil;
end;

procedure TestTgtPDIndirectRef.TestClone;
var
  ReturnValue: TgtPDBaseObject;
begin
  ReturnValue := FgtPDIndirectRef.Clone;
  Assert.IsTrue(ReturnValue.IsIndirectRef);
  FreeAndNil(ReturnValue);

  // TODO: Validate method results
end;

procedure TestTgtPDIndirectRef.TestIsIndirectRef;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FgtPDIndirectRef.IsIndirectRef;
  Assert.IsTrue(ReturnValue);
  // TODO: Validate method results
end;

procedure TestTgtPDIndirectRef.TestSaveToStream;
var
  ReturnValue: Cardinal;
  XRef: TgtObject;
  OnlyChanged: Boolean;
  Stream: TgtStream;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDIndirectRef.SaveToStream(Stream, OnlyChanged, XRef);
  // TODO: Validate method results
end;

procedure TestTgtPDIndirectRef.TestAssign;
var
  FgtPDIndRefSrc : TgtPDIndirectRef;
begin
  FgtPDIndRefSrc := TgtPDIndirectRef.Create(1 , 2);
  FgtPDIndirectRef.Assign(FgtPDIndRefSrc);

  Assert.AreEqual(1, FgtPDIndirectRef.ObjNumber);
  Assert.AreEqual(2, FgtPDIndirectRef.GenNumber);

  FreeAndNil(FgtPDIndRefSrc);
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTgtPDIndirectRef.Suite);
end.

