unit TestPDInteger;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, PDBaseObject, Stream, gtObject, PDInteger,
  SysUtils, DUnitAssert, Dialogs, FileStream, gtTypes;

type
  // Test methods for class TgtPDInteger
  
  TestTgtPDInteger = class(TAssertTestCase)
  strict private
    FgtPDInteger: TgtPDInteger;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestIsInteger;
    procedure TestClone;
    procedure TestSaveToStream;
    procedure TestAssign;
  end;

implementation

procedure TestTgtPDInteger.SetUp;
begin
  FgtPDInteger := TgtPDInteger.Create;
end;

procedure TestTgtPDInteger.TearDown;
begin
  FgtPDInteger.Free;
  FgtPDInteger := nil;
end;

procedure TestTgtPDInteger.TestIsInteger;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FgtPDInteger.IsInteger;
  Assert.IsTrue(ReturnValue);
  // TODO: Validate method results
end;

procedure TestTgtPDInteger.TestClone;
var
  ReturnValue: TgtPDBaseObject;
begin
  ReturnValue := FgtPDInteger.Clone;
  Assert.IsTrue(ReturnValue.IsInteger);
  FreeAndNil(ReturnValue);
  // TODO: Validate method results
end;

procedure TestTgtPDInteger.TestSaveToStream;
var
  ReturnValue: Cardinal;
  XRef: TgtObject;
  OnlyChanged: Boolean;
  Stream: TgtStream;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDInteger.SaveToStream(Stream, OnlyChanged, XRef);
  // TODO: Validate method results
end;

procedure TestTgtPDInteger.TestAssign;
var
  FgtPDIntSrc : TgtPDInteger;
begin
  FgtPDIntSrc:= TgtPDInteger.Create(10);
  FgtPDInteger.Assign(FgtPDIntSrc);
  Assert.AreEqual(FgtPDIntSrc.Value, 10);

  FreeAndNil(FgtPDIntSrc);
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTgtPDInteger.Suite);
end.

