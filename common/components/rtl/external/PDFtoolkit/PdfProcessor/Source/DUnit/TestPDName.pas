unit TestPDName;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, PDBaseObject, Stream, gtObject, PDName,
  SysUtils, DUnitAssert, Dialogs, FileStream, gtTypes;

type
  // Test methods for class TgtPDName
  
  TestTgtPDName = class(TAssertTestCase)
  strict private
    FgtPDName: TgtPDName;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestIsName;
    procedure TestIsName1;
    procedure TestClone;
    procedure TestSaveToStream;
    procedure TestAssign;
    procedure TestValue;
  end;

implementation

procedure TestTgtPDName.SetUp;
begin
  FgtPDName := TgtPDName.Create;
end;

procedure TestTgtPDName.TearDown;
begin
  FgtPDName.Free;
  FgtPDName := nil;
end;

procedure TestTgtPDName.TestIsName;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FgtPDName.IsName;
  Assert.IsTrue(ReturnValue);

  // TODO: Validate method results
end;

procedure TestTgtPDName.TestIsName1;
var
  ReturnValue: Boolean;
  AName: string;
begin
  // TODO: Setup method call parameters
  AName := 'Name Object';
  FgtPDName.SetName(AName);
  ReturnValue := FgtPDName.IsName(AName);
  Assert.IsTrue(ReturnValue);
  // TODO: Validate method results
end;

procedure TestTgtPDName.TestClone;
var
  ReturnValue: TgtPDBaseObject;
begin
  ReturnValue := FgtPDName.Clone;
  Assert.IsTrue(ReturnValue.IsName);

  FreeAndNil(ReturnValue);
  // TODO: Validate method results
end;

procedure TestTgtPDName.TestSaveToStream;
var
  ReturnValue: Cardinal;
  XRef: TgtObject;
  OnlyChanged: Boolean;
  Stream: TgtStream;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDName.SaveToStream(Stream, OnlyChanged, XRef);
  // TODO: Validate method results
end;

procedure TestTgtPDName.TestAssign;
var
  FgtPDNameSrc : TgtPDName;
begin
  FgtPDNameSrc := TgtPDName.Create('Name Object');
  FgtPDName.Assign(FgtPDNameSrc);

  Assert.AreEqual(FgtPDName.GetValue, 'Name Object');

  FreeAndNil(FgtPDNameSrc);
  // TODO: Validate method results
end;

procedure TestTgtPDName.TestValue;
var
  ReturnValue: string;
begin
  FgtPDName.SetName('Name Object');
  ReturnValue := FgtPDName.Value;
  Assert.AreEqual(ReturnValue, 'Name Object');
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTgtPDName.Suite);
end.

