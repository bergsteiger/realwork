unit TestPDPage;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, PDTypes, PDPage, PDXObject, gtObject, PDResource, PDAction, Contnrs, 
  PDColorSpace, PDElement, PDBaseObject, PDAnnot, PDFont, PDRect;

type
  // Test methods for class TgtPDPage
  
  TestTgtPDPage = class(TTestCase)
  strict private
    FgtPDPage: TgtPDPage;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestUpdate;
    procedure TestAddAnnot;
    procedure TestAddNewAnnot;
    procedure TestCreateAnnot;
    procedure TestGetAnnots;
    procedure TestGetActions;
    procedure TestReplaceContents;
    procedure TestAddResource;
//    procedure TestSetMediaBox;
    procedure TestEnumFontResources;
    procedure TestEnumXObjectResources;
    procedure TestEnumColorSpaceResources;
    procedure TestEnumProcSetResources;
  end;

implementation

procedure TestTgtPDPage.SetUp;
begin
  FgtPDPage := TgtPDPage.Create(nil, nil, nil);
end;

procedure TestTgtPDPage.TearDown;
begin
  FgtPDPage.Free;
  FgtPDPage := nil;
end;

procedure TestTgtPDPage.TestUpdate;
begin
  FgtPDPage.Update;
  // TODO: Validate method results
end;

procedure TestTgtPDPage.TestAddAnnot;
var
  Annot: TgtPDAnnot;
  AddAfter: Integer;
begin
  // TODO: Setup method call parameters
  FgtPDPage.AddAnnot(AddAfter, Annot);
  // TODO: Validate method results
end;

procedure TestTgtPDPage.TestAddNewAnnot;
var
  ReturnValue: TgtPDAnnot;
  InitialRect: TgtPDRect;
  AnnotType: TgtPDAnnotType;
  AddAfter: Integer;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDPage.AddNewAnnot(AddAfter, AnnotType, InitialRect);
  // TODO: Validate method results
end;

procedure TestTgtPDPage.TestCreateAnnot;
var
  ReturnValue: TgtPDAnnot;
  InitialLocation: TgtPDRect;
  AnnotType: TgtPDAnnotType;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDPage.CreateAnnot(AnnotType, InitialLocation);
  // TODO: Validate method results
end;

procedure TestTgtPDPage.TestGetAnnots;
var
  ReturnValue: TgtPDAnnotList;
begin
  ReturnValue := FgtPDPage.GetAnnots;
  // TODO: Validate method results
end;

procedure TestTgtPDPage.TestGetActions;
var
  ReturnValue: TgtPDAction;
begin
  ReturnValue := FgtPDPage.GetActions;
  // TODO: Validate method results
end;

procedure TestTgtPDPage.TestReplaceContents;
var
  NewContents: TgtPDBaseObject;
begin
  // TODO: Setup method call parameters
  FgtPDPage.ReplaceContents(NewContents);
  // TODO: Validate method results
end;

procedure TestTgtPDPage.TestAddResource;
var
  ResObject: TgtPDBaseObject;
  ResName: string;
  ResType: TgtPDResourceType;
begin
  // TODO: Setup method call parameters
  FgtPDPage.AddResource(ResType, ResName, ResObject);
  // TODO: Validate method results
end;

//procedure TestTgtPDPage.TestSetMediaBox;
//var
//  MediaBox: TgtPDRect;
//begin
//  // TODO: Setup method call parameters
//  FgtPDPage.SetMediaBox(MediaBox);
//  // TODO: Validate method results
//end;

procedure TestTgtPDPage.TestEnumFontResources;
var
  FontEnumEvent: TgtPDEnumFontEvent;
begin
  // TODO: Setup method call parameters
  FgtPDPage.EnumFontResources(FontEnumEvent);
  // TODO: Validate method results
end;

procedure TestTgtPDPage.TestEnumXObjectResources;
var
  XObjectEnumEvent: TgtPDEnumXObjectEvent;
begin
  // TODO: Setup method call parameters
  FgtPDPage.EnumXObjectResources(XObjectEnumEvent);
  // TODO: Validate method results
end;

procedure TestTgtPDPage.TestEnumColorSpaceResources;
var
  ColorSpaceEnumEvent: TgtPDEnumColorSpaceEvent;
begin
  // TODO: Setup method call parameters
  FgtPDPage.EnumColorSpaceResources(ColorSpaceEnumEvent);
  // TODO: Validate method results
end;

procedure TestTgtPDPage.TestEnumProcSetResources;
var
  ProcSetEnumEvent: TgtPDEnumProcSetEvent;
begin
  // TODO: Setup method call parameters
  FgtPDPage.EnumProcSetResources(ProcSetEnumEvent);
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTgtPDPage.Suite);
end.

