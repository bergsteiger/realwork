unit TestPDPageTree;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, PDTypes, PDPage, gtObject, PDPageTree, Contnrs, PDElement, PDBaseObject, PDRect;

type
  // Test methods for class TgtPDPageTree
  
  TestTgtPDPageTree = class(TTestCase)
  strict private
    FgtPDPageTree: TgtPDPageTree;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestUpdate;
    procedure TestGetPage;
    procedure TestGetPageByIndRef;
    procedure TestCreatePage;
    procedure TestDeletePages;
    procedure TestGetPageBaseObject;
    procedure TestInsertPages;
    procedure TestMovePage;
    procedure TestReplacePages;
    procedure TestRequestPages;
  end;

implementation

procedure TestTgtPDPageTree.SetUp;
begin
  FgtPDPageTree := TgtPDPageTree.Create(nil, nil, nil);
end;

procedure TestTgtPDPageTree.TearDown;
begin
  FgtPDPageTree.Free;
  FgtPDPageTree := nil;
end;

procedure TestTgtPDPageTree.TestUpdate;
begin
  FgtPDPageTree.Update;
  // TODO: Validate method results
end;

procedure TestTgtPDPageTree.TestGetPage;
var
  ReturnValue: TgtPDPage;
  Index: Integer;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDPageTree.GetPage(Index);
  // TODO: Validate method results
end;

procedure TestTgtPDPageTree.TestGetPageByIndRef;
var
  ReturnValue: TgtPDPage;
  APageRef: TgtPDBaseObject;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDPageTree.GetPageByIndRef(APageRef);
  // TODO: Validate method results
end;

procedure TestTgtPDPageTree.TestCreatePage;
var
  ReturnValue: TgtPDPage;
  MediaBox: TgtPDRect;
  AfterPage: Integer;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDPageTree.CreatePage(AfterPage, MediaBox);
  // TODO: Validate method results
end;

procedure TestTgtPDPageTree.TestDeletePages;
var
  LastPage: Integer;
  FirstPage: Integer;
begin
  // TODO: Setup method call parameters
  FgtPDPageTree.DeletePages(FirstPage, LastPage);
  // TODO: Validate method results
end;

procedure TestTgtPDPageTree.TestGetPageBaseObject;
var
  ReturnValue: TgtPDBaseObject;
  PageNumber: Integer;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDPageTree.GetPageBaseObject(PageNumber);
  // TODO: Validate method results
end;

procedure TestTgtPDPageTree.TestInsertPages;
var
  InsertFlags: TgtPageInsertFlages;
  NumOfPages: Integer;
  SourceStartPage: Integer;
  SourceDoc: TgtObject;
  AfterPage: Integer;
begin
  // TODO: Setup method call parameters
  FgtPDPageTree.InsertPages(AfterPage, SourceDoc, SourceStartPage, NumOfPages, 
      InsertFlags);
  // TODO: Validate method results
end;

procedure TestTgtPDPageTree.TestMovePage;
var
  PageToMove: Integer;
  MoveToAfterPage: Integer;
begin
  // TODO: Setup method call parameters
  FgtPDPageTree.MovePage(MoveToAfterPage, PageToMove);
  // TODO: Validate method results
end;

procedure TestTgtPDPageTree.TestReplacePages;
var
  MergeTextAnnots: Boolean;
  NumOfPages: Integer;
  SourceStartPage: Integer;
  SourceDoc: TgtObject;
  StartPage: Integer;
begin
  // TODO: Setup method call parameters
  FgtPDPageTree.ReplacePages(StartPage, SourceDoc, SourceStartPage, NumOfPages, 
      MergeTextAnnots);
  // TODO: Validate method results
end;

procedure TestTgtPDPageTree.TestRequestPages;
var
  RequestPagesEvent: TgtRequestPagesEvent;
  NumOfPages: Integer;
  StartPages: Integer;
begin
  // TODO: Setup method call parameters
  FgtPDPageTree.RequestPages(StartPages, NumOfPages, RequestPagesEvent);
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTgtPDPageTree.Suite);
end.

