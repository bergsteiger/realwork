unit TestPDString;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Stream, gtObject, Classes, gtTypes, PDString, PDBaseObject,
  SysUtils, DUnitAssert, Dialogs, FileStream;

type
  // Test methods for class TgtPDString
  
  TestTgtPDString = class(TAssertTestCase)
  strict private
    FgtPDString: TgtPDString;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestIsString;
    procedure TestIsHexString;
    procedure TestClone;
    procedure TestGetString;
    procedure TestSaveToStream;
    procedure TestAssign;
  end;

implementation

procedure TestTgtPDString.SetUp;
begin
  FgtPDString := TgtPDString.Create('PD String Object', False);
end;

procedure TestTgtPDString.TearDown;
begin
  FgtPDString.Free;
  FgtPDString := nil;
end;

procedure TestTgtPDString.TestIsString;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FgtPDString.IsString;
  Assert.IsTrue(ReturnValue);
  // TODO: Validate method results
end;

procedure TestTgtPDString.TestIsHexString;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FgtPDString.IsHexString;
  Assert.IsFalse(ReturnValue);
  // TODO: Validate method results
end;

procedure TestTgtPDString.TestClone;
var
  ReturnValue: TgtPDBaseObject;
begin
  ReturnValue := FgtPDString.Clone;
  Assert.IsTrue(ReturnValue.IsString);

  FreeAndNil(ReturnValue);
end;

procedure TestTgtPDString.TestGetString;
var
  ReturnValue: string;
begin
  ReturnValue := FgtPDString.GetString;
  Assert.AreEqual(ReturnValue, 'PD String Object');
  // TODO: Validate method results
end;

procedure TestTgtPDString.TestSaveToStream;
var
  ReturnValue: Cardinal;
  XRef: TgtObject;
  OnlyChanged: Boolean;
  Stream: TgtStream;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDString.SaveToStream(Stream, OnlyChanged, XRef);
  // TODO: Validate method results
end;

procedure TestTgtPDString.TestAssign;
var
  FgtPDStrSrc: TgtPDString;
begin
  FgtPDStrSrc := TgtPDString.Create('Source PDStrObject', False);
  FgtPDString.Assign(FgtPDStrSrc);
  Assert.AreEqual(FgtPDString.GetString, 'Source PDStrObject');

  FreeAndNil(FgtPDStrSrc);
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTgtPDString.Suite);
end.

