unit TestPDXRef;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, PDXRefEntry, Stream, CryptStream, gtObject, Classes, Contnrs, 
  PDBaseObject, BaseStream, PDXRef, SysUtils, DUnitAssert, Dialogs, FileStream;

type
  // Test methods for class TgtPDXRef
  
  TestTgtPDXRef = class(TAssertTestCase)
  strict private
    FgtPDXRef: TgtPDXRef;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestGetSize;
    procedure TestFetch;
    procedure TestGetTrailorDict;
    procedure TestGetStartXref;
    procedure TestAddEntry;
    procedure TestAddDefaultEntries;
//    procedure TestGenerateTable;
    procedure TestSaveToStream;
    procedure TestIsEntryFree;
  end;
  // Test methods for class TgtObjectStream
  
  TestTgtObjectStream = class(TAssertTestCase)
  strict private
    FgtObjectStream: TgtObjectStream;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestGetObject;
  end;

implementation
Var
  FInFile : TFileStream;
  FgtInFile: TgtFileStream;
  
{$REGION 'TgtPDXRef'}

procedure TestTgtPDXRef.SetUp;
begin
  FInFile := TFileStream.Create('Filters\PDF\data(116).pdf', fmOpenRead);
  FgtInFile := TgtFileStream.Create(FinFile, 0, 0, False);
  FgtPDXRef := TgtPDXRef.Create(TgtObject(nil), FgtInFile);
  FgtPDXRef.GenerateTable;
end;

procedure TestTgtPDXRef.TearDown;
begin
  FgtPDXRef.Free;
  FgtPDXRef := nil;
  FreeAndNil(FgtInFile);
  FreeAndNil(Finfile);      
end;

procedure TestTgtPDXRef.TestGetSize;  // Need to get re-checked, get size returns 1024.
var
  ReturnValue: Cardinal;
begin
  //ReturnValue := FgtPDXRef.GetSize;

  Assert.AreEqual(62, FgtPDXref.LastObjectNumber);
  // TODO: Validate method results
end;

procedure TestTgtPDXRef.TestFetch;
var
  ReturnValue: TgtPDBaseObject;
  ANum: Cardinal;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDXRef.Fetch(61);
  Assert.IsTrue(ReturnValue.IsDict);
  // TODO: Validate method results
end;

procedure TestTgtPDXRef.TestGetTrailorDict;
var
  ReturnValue: TgtPDBaseObject;
begin
  ReturnValue := FgtPDXRef.GetTrailorDict;
  Assert.IsTrue(ReturnValue.IsDict);
  // TODO: Validate method results
end;

procedure TestTgtPDXRef.TestGetStartXref;
var
  ReturnValue: Cardinal;
begin
  ReturnValue := FgtPDXRef.GetStartXref;
  Assert.AreEqual(92000, ReturnValue);
  // TODO: Validate method results
end;

procedure TestTgtPDXRef.TestAddEntry;
var
  AEntry: TgtPDXRefEntry;
begin
  AEntry := TgtPDXRefEntry.Create;
  AEntry.Offset := 12345;
  AEntry.GenNum := 0;
  AEntry.EntryType := xeUnCompressed;

  FgtPDXRef.AddEntry(AEntry);
  // TODO: Validate method results
end;

procedure TestTgtPDXRef.TestAddDefaultEntries;
var
  TillCount: Integer;
  Testentry : TgtPDXRefEntry;
begin
  // TODO: Setup method call parameters
  FgtPDXRef.AddDefaultEntries(1024);
  TestEntry := FgtPDXRef.GetEntry(83);
  Assert.AreEqual($FFFFFFFF, TestEntry.Offset);
  // TODO: Validate method results
end;

//procedure TestTgtPDXRef.TestGenerateTable;
//var
//  ReturnValue: Boolean;
//begin
//  ReturnValue := FgtPDXRef.GenerateTable;
//  Assert.IsTrue(ReturnValue);
//  // TODO: Validate method results
//end;

procedure TestTgtPDXRef.TestSaveToStream;               // Not to test.
var
  ReturnValue: Boolean;
  Stream: TgtStream;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDXRef.SaveToStream(Stream);
  // TODO: Validate method results
end;

procedure TestTgtPDXRef.TestIsEntryFree;
var
  ReturnValue: Boolean;
  Index: Integer;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtPDXRef.IsEntryFree(0);
  Assert.IsTrue(ReturnValue);
  ReturnValue := FgtPDXRef.IsEntryFree(9);
  Assert.IsFalse(ReturnValue);

  // TODO: Validate method results
end;

{$ENDREGION}

{$REGION 'TgtObjectStream'}

Procedure TestTgtObjectStream.SetUp;
begin
  FgtObjectStream := TgtObjectStream.Create(nil, 0);
end;

procedure TestTgtObjectStream.TearDown;
begin
  FgtObjectStream.Free;
  FgtObjectStream := nil;
end;

procedure TestTgtObjectStream.TestGetObject;
var
  ReturnValue: TgtPDBaseObject;
  AObjNumber: Integer;
  AObjectIndex: Integer;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtObjectStream.GetObject(AObjectIndex, AObjNumber);
  // TODO: Validate method results
end;

{$ENDREGION}

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTgtPDXRef.Suite);
  RegisterTest(TestTgtObjectStream.Suite);
end.

