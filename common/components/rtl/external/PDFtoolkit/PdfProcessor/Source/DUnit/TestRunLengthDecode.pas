unit TestRunLengthDecode;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, RunLengthDecode, Stream, DecodeIntf, Classes, gtTypes,
  FileStream,  SysUtils, DUnitAssert, Dialogs;

type
  // Test methods for class TgtRunLengthDecode
  
  TestTgtRunLengthDecode = class(TAssertTestCase)
  strict private
    FgtRunLengthDecode: TgtRunLengthDecode;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestReset;
    procedure TestGetChar;
    procedure TestLookChar;
  end;

implementation
var
    FgtRunLengthDecode: TgtRunLengthDecode;
    FInFile, FOutFile: TFileStream;
    FgtInFile,FgtOutFile: TgtFileStream;
    FOutStream: TgtStream;
    Lbuffer : Bytes;
    OutValue,i : Integer;

procedure TestTgtRunLengthDecode.SetUp;
begin
  //FgtRunLengthDecode := TgtRunLengthDecode.Create(nil);
  FInFile := TFileStream.Create('Filters\RunLengthDecode\RunLengthIn.txt', fmOpenRead);
 FgtInFile := TgtFileStream.Create(FInFile, 0, 0, False);
 FgtRunLengthDecode := TgtRunLengthDecode.create(FgtInFile);

 FOutFile := TFileStream.Create('Filters\RunLengthDecode\RunLengthOut.txt', fmOpenRead);
 FgtOutFile := TgtFileStream.Create(FOutFile, 0, 0, False);
end;

procedure TestTgtRunLengthDecode.TearDown;
begin
  FreeAndNil(FgtRunLengthDecode);
  FreeAndNil(FgtInFile);
  FreeAndNil(FInFile);
  FreeAndNil(FOutFile);
  FreeAndNil(FgtOutFile);
  FreeAndNil(FOutStream);
end;

procedure TestTgtRunLengthDecode.TestReset;
var
Position: Integer;
  LStream: TFileStream;
  I: Integer;
  Lbuffer: Bytes;

begin
  FgtRunLengthDecode.Reset;
end;

procedure TestTgtRunLengthDecode.TestGetChar;
var
  LSin, LSout: string;
  LI: Integer;
begin
  LSin := '';
  LSout := '';
  //FgtASCII85Decode.Reset;
  for LI := 0 to 10 do
  begin
    LSin := LSin + Char(FgtRunLengthDecode.GetChar);
    LSout := LSout + Char(FgtOutFile.GetChar);
  end;

  Assert.AreEqualString(LSin, LSout);
end;

procedure TestTgtRunLengthDecode.TestLookChar;
var
  ReturnValue: Integer;
  OutValue : Integer;
begin
   FgtRunLengthDecode.Reset;
   ReturnValue:= FgtRunLengthDecode.LookChar;
   OutValue := FgtOutFile.LookChar;
   Assert.AreEqual(ReturnValue, OutValue);
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
 RegisterTest(TestTgtRunLengthDecode.Suite);

end.

