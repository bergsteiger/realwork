unit TestRunLengthEncode;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, RunLengthEncode, Stream, gtTypes, EncodeIntf,
  classes,Predictor, FileStream, DCTStream, SysUtils, DUnitAssert, Dialogs;

type
  // Test methods for class TgtRunLengthEncode
  
  TestTgtRunLengthEncode = class(TAssertTestCase)
  strict private
    FgtRunLengthEncode: TgtRunLengthEncode;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestWrite;
  end;

implementation
var
   FgtRunLengthDecode: TgtRunLengthEncode;
    FInFile, FOutFile: TFileStream;
    FgtInFile,FgtOutFile: TgtFileStream;
    FOutStream: TgtStream;
    Lbuffer : Bytes;
    OutValue,i : Integer;


procedure TestTgtRunLengthEncode.SetUp;
begin
  //FgtRunLengthEncode := TgtRunLengthEncode.Create(nil);
 FInFile := TFileStream.Create('Filters\RunLengthDecode\Decode.txt', fmOpenRead);
 FgtInFile := TgtFileStream.Create(FInFile, 0, 0, False);
 FgtRunLengthEncode := TgtRunLengthEncode.create(FgtInFile);

 FOutFile := TFileStream.Create('Filters\RunLengthDecode\Encode12.txt', fmCreate);
 FgtOutFile := TgtFileStream.Create(FOutFile, 0, 0, False);
end;

procedure TestTgtRunLengthEncode.TearDown;
begin
  FreeAndNil(FgtRunLengthEncode);
  FreeAndNil(FgtInFile);
  FreeAndNil(FInFile);
  FreeAndNil(FOutFile);
  FreeAndNil(FgtOutFile);
  FreeAndNil(FOutStream);

end;

procedure TestTgtRunLengthEncode.TestWrite;
var
  ReturnValue, Count: Cardinal;
  EncFileStream: TFileStream;
  TgtEncFile: TgtFileStream;
begin
  // TODO: Setup method call parameters
  
  Count := 20;
  ReturnValue := FgtRunLengthEncode.Write(FgtOutFile, Count);
  //Assert.AreEqual(30, ReturnValue);

  EncFileStream := TFileStream.Create('Filters\RunLengthDecode\Encode.txt', fmOpenRead);
  TgtEncFile := TgtFileStream.Create(EncFileStream, 0, 0, False);

  TgtEncFile.Reset;
  FgtOutFile.Reset;

  for I := 0 to ReturnValue-1 do
    Assert.AreEqual(TgtEncFile.GetChar, FgtOutFile.GetChar);

  FreeAndNil(EncFileStream);
  FreeAndNil(TgtEncFile);
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTgtRunLengthEncode.Suite);
end.

