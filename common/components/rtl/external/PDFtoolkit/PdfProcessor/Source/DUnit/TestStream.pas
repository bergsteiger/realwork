unit TestStream;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Classes, Stream, gtObject, gtInterface, gtTypes, StreamIntf,
  DUnitAssert, Dialogs;

type
  // Test methods for class IgtStream

  TestIgtStream = class(TAssertTestCase)
  strict private
    FIgtStream: IgtStream;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestWrite;
    procedure TestLookChar;
    procedure TestGetChar;
    procedure TestGetPosition;
    procedure TestReset;
    procedure TestSetPosition;
  end;
  // Test methods for class TgtStream

  TestTgtStream = class(TAssertTestCase)
  strict private
    FgtStream: TgtStream;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestWrite;
    procedure TestLookChar;
    procedure TestGetChar;
    procedure TestGetPosition;
    procedure TestGetBaseStream;
    procedure TestGetUndecodedStream;
    procedure TestReset;
    procedure TestSetPosition;
    procedure TestRead;
    procedure TestRead1;
    procedure TestRead2;
    procedure TestWrite1;
    procedure TestCopyFrom;
    procedure TestGetTStream;
    procedure TestClose;
    procedure TestReadLine;
    procedure TestReadRawChar;
    procedure TestIncRef;
    procedure TestDecRef;
  end;

implementation

{$REGION 'IgtStream'}

procedure TestIgtStream.SetUp;
begin
  // TODO: Initialize FIgtStream
end;

procedure TestIgtStream.TearDown;
begin
  FIgtStream := nil;
end;

procedure TestIgtStream.TestWrite;
var
  ReturnValue: Cardinal;
  Count: Cardinal;
  Buffer: Bytes;
begin
  // TODO: Setup method call parameters
  ReturnValue := FIgtStream.Write(Buffer, Count);
  // TODO: Validate method results
end;

procedure TestIgtStream.TestLookChar;
var
  ReturnValue: Integer;
begin
  ReturnValue := FIgtStream.LookChar;
  // TODO: Validate method results
end;

procedure TestIgtStream.TestGetChar;
var
  ReturnValue: Integer;
begin
  ReturnValue := FIgtStream.GetChar;
  // TODO: Validate method results
end;

procedure TestIgtStream.TestGetPosition;
var
  ReturnValue: Int64;
begin
  ReturnValue := FIgtStream.GetPosition;
  // TODO: Validate method results
end;

procedure TestIgtStream.TestReset;
begin
  FIgtStream.Reset;
  // TODO: Validate method results
end;

procedure TestIgtStream.TestSetPosition;
var
  ADirection: TSeekOrigin;
  APosition: System.Integer;
begin
  // TODO: Setup method call parameters
  FIgtStream.SetPosition(APosition, ADirection);
  // TODO: Validate method results
end;

{$ENDREGION}

{$REGION 'TgtStream'}

procedure TestTgtStream.SetUp;
begin
  FgtStream := TgtStream.Create;
end;

procedure TestTgtStream.TearDown;
begin
  FgtStream.Free;
  FgtStream := nil;
end;

procedure TestTgtStream.TestWrite;
var
  ReturnValue: Cardinal;
  Count: Cardinal;
  Buffer: Bytes;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtStream.Write(Buffer, Count);
  // TODO: Validate method results
end;

procedure TestTgtStream.TestLookChar;
var
  ReturnValue: Integer;
begin
  ReturnValue := FgtStream.LookChar;
  // TODO: Validate method results
end;

procedure TestTgtStream.TestGetChar;
var
  ReturnValue: Integer;
begin
  ReturnValue := FgtStream.GetChar;
  // TODO: Validate method results
end;

procedure TestTgtStream.TestGetPosition;
var
  ReturnValue: Int64;
begin
  ReturnValue := FgtStream.GetPosition;
  // TODO: Validate method results
end;

procedure TestTgtStream.TestGetBaseStream;
var
  ReturnValue: TgtStream;
begin
  ReturnValue := TgtStream(FgtStream.GetBaseStream);
  // TODO: Validate method results
end;

procedure TestTgtStream.TestGetUndecodedStream;
var
  ReturnValue: TgtStream;
begin
  ReturnValue := TgtStream(FgtStream.GetUndecodedStream);
  // TODO: Validate method results
end;

procedure TestTgtStream.TestReset;
begin
  FgtStream.Reset;
  // TODO: Validate method results
end;

procedure TestTgtStream.TestSetPosition;
var
  ADirection: TSeekOrigin;
  APosition: System.Integer;
begin
  // TODO: Setup method call parameters
  FgtStream.SetPosition(APosition, ADirection);
  // TODO: Validate method results
end;

procedure TestTgtStream.TestRead;
var
  ReturnValue: Cardinal;
  Count: Cardinal;
  Buffer: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtStream.Read(Buffer, Count);
  // TODO: Validate method results
end;

procedure TestTgtStream.TestRead1;
var
  ReturnValue: Cardinal;
  Count: Cardinal;
  OutStream: TgtStream;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtStream.Read(OutStream, Count);
  // TODO: Validate method results
end;

procedure TestTgtStream.TestRead2;
var
  ReturnValue: Cardinal;
  Count: Cardinal;
  Buffer: Bytes;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtStream.Read(Buffer, Count);
  // TODO: Validate method results
end;

procedure TestTgtStream.TestWrite1;
var
  ReturnValue: Cardinal;
  AByte: Byte;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtStream.Write(AByte);
  // TODO: Validate method results
end;

procedure TestTgtStream.TestCopyFrom;
var
  ReturnValue: Cardinal;
  Count: Cardinal;
  Stream: TgtStream;
begin
  // TODO: Setup method call parameters
  ReturnValue := FgtStream.CopyFrom(Stream, Count);
  // TODO: Validate method results
end;

procedure TestTgtStream.TestGetTStream;
var
  ReturnValue: TStream;
begin
  ReturnValue := FgtStream.GetTStream;
  // TODO: Validate method results
end;

procedure TestTgtStream.TestClose;
begin
  FgtStream.Close;
  // TODO: Validate method results
end;

procedure TestTgtStream.TestReadLine;
var
  Count: System.Integer;
  Buffer: Bytes;
begin
  // TODO: Setup method call parameters
  FgtStream.ReadLine(Buffer, Count);
  // TODO: Validate method results
end;

procedure TestTgtStream.TestReadRawChar;
var
  ReturnValue: Integer;
begin
  ReturnValue := FgtStream.ReadRawChar;
  // TODO: Validate method results
end;

procedure TestTgtStream.TestIncRef;
var
  ReturnValue: Integer;
begin
  ReturnValue := FgtStream.IncRef;
  // TODO: Validate method results
end;

procedure TestTgtStream.TestDecRef;
var
  ReturnValue: Integer;
begin
  ReturnValue := FgtStream.DecRef;
  // TODO: Validate method results
end;

{$ENDREGION}

initialization
  // Register any test cases with the test runner
  RegisterTest(TestIgtStream.Suite);
  RegisterTest(TestTgtStream.Suite);
end.

