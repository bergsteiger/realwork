USES
 axiom:Component
 axiom:Form
 axiom:StatusBar
 axiom:контрол
 
 WordsTranslation.script
 @\Controls.script
 @\ExCtrls.script
 @\Windows.script
 @\SysUtils.script
 ProjectSpecific.script
 @\EditorCommon.script
;

INTEGER FUNCTION "Количество элементов статусбара окна" OBJECT IN aWindow
 OBJECT VAR "Статусбар"
 контрол::StatusBar aWindow pop:Control:FindControlByName =: "Статусбар"
 "Статусбар" "Объект существует?" ?ASSURE 'Не удалось найти на статусбаре этот элемент '
 "Статусбар" pop:Control:ControlCount =: Result
; // "Количество элементов статусбара"

OBJECT FUNCTION "Элемент статусбара окна" INTEGER IN aItem OBJECT IN aWindow
 OBJECT VAR "Статусбар"
 контрол::StatusBar aWindow pop:Control:FindControlByName =: "Статусбар"
 aItem "Статусбар" StatusBar:OrderedControl =: Result
  Result "Объект существует?" ?ASSURE 'Не удалось найти на статусбаре этот элемент '
;

PROCEDURE "Выполнить с новым окном Гаранта и переключиться на предыдущее окно" IN aProc

 VAR l_Main
 l_Main := 0
 
 l_Main := "Сохранить активное окно"
 ( l_Main НЕРАВНО 0 ) ?ASSURE 'Не удалось сохранить активное окно'
 TRY
  "Открыть новое окно гаранта"
  "Дождаться переключения вкладок"
  "Дать системе перерисоваться"
  aProc DO
 FINALLY
  l_Main "Восстановить активное окно"
 END
; // "Выполнить с новым окном Гаранта и переключиться на предыдущее окно"

VOID WORDWORKER "Открыть новое окно Гаранта и переключиться на старое, предварительно выполнив в новом"
 "Выполнить {(@ ( WordToWork DO ) )} с новым окном Гаранта и переключиться на предыдущее окно"
;

PROCEDURE "Открыть новое окно Гаранта. Переключиться на старое. Выполнить и закрыть новое окно" IN aProc

 VAR l_Main 
 l_Main := 0
 
 : Действия
  l_Main := "Сохранить активное окно"
 ; // Действия
 
 "Выполнить {(@ Действия)} с новым окном Гаранта и переключиться на предыдущее окно"
 TRY
  OnTest
  aProc DO
 FINALLY
  l_Main !=0 ?ASSURE 'Не удалось запомнить активное окно'
  l_Main "Закрыть сохраненное окно"
 END
; // "Открыть новое окно Гаранта. Переключиться на старое. Выполнить и закрыть новое окно"

PROCEDURE "Сравнить статусбар окна с эталоном" OBJECT IN aWindow
 OBJECT VAR "Панель статусбара"
 CONST cSeparator 'Загрузка документа'
 STRING VAR str1
 STRING VAR str2
 INTEGER VAR item
 0 >>> item
 "Дождаться переключения вкладок"
 "Количество элементов статусбара окна {(aWindow)}" 1 - LOOP (
 "Элемент {(item)} статусбара окна {(aWindow)}" =: "Панель статусбара"
 Если ( "Панель статусбара" "Узнать, виден ли контрол" ) то 
  ( "Панель статусбара" pop:Control:Caption =: str1
   Если ( str1 "НЕ РАВНО" '' ) то
    ( str1 cSeparator string:Split =: str2 =: str1
    Если ( str2 "НЕ РАВНО" '' ) то
     ( 
    str2 '[' '' string:Replace ']' '' string:Replace >>> str2 
    str2 sysutils:ExtractFileName >>> str2
    [ str1 cSeparator ' ' str2 ] strings:Cat >>> str1
     )
      Если ( "Панель статусбара" pop:Control:Enabled ) то
       ( str1 . )
      иначе
       ( str1 ' [Запрещён]' Cat . )
   )
  ) 
  ++! item )
; // "Сравнить статусбар окна с эталоном"


USES
 Forms.script
;

PROCEDURE "Сравнить статусбар с эталоном"
 "Сравнить статусбар окна {( "Главное окно" )} с эталоном"
; // "Сравнить статусбар с эталоном"

PROCEDURE "Сравнить статусбар активной вкладки с эталоном"
 "Сравнить статусбар окна {( "Текущая активная вкладка" )} с эталоном"
;

PROCEDURE "Сравнить настройки шрифтов с эталоном для контрола" OBJECT IN aControl
  'Шрифт: ' aControl "Шрифт контрола" "Название шрифта" ToPrintable Cat .
  "Отделить текст в эталоне"
  'Размер шрифта: ' aControl "Шрифт контрола" "Размер шрифта" ToPrintable Cat .
  "Отделить текст в эталоне"
  'Цвет шрифта: ' aControl "Шрифт контрола" "Цвет шрифта" ToPrintable Cat .
  "Отделить текст в эталоне"
  'Шрифт наклонный: ' aControl "Шрифт контрола" "Наклонный шрифт?" ToPrintable Cat .
  "Отделить текст в эталоне"
  'Шрифт жирный: ' aControl "Шрифт контрола" "Жирный шрифт?" ToPrintable Cat .
  "Отделить текст в эталоне" 
  'Подчеркнутый шрифт: ' aControl "Шрифт контрола" "Подчеркнутый шрифт?" ToPrintable Cat .
  "Отделить текст в эталоне" 
  'Перечеркнутый шрифт: ' aControl "Шрифт контрола" "Перечеркнутый шрифт?" ToPrintable Cat .
;

PROCEDURE "Выставить форме размеры и " INTEGER IN formW INTEGER IN formH OBJECT IN aProc
 "Уменьшить окно {("Главное окно")}"
 formW "Главное окно" "Установить ширину"
 formH "Главное окно" "Установить высоту"
 TRY
  aProc DO
 FINALLY
  "Развернуть окно {("Главное окно")}"
 END
;

USES
 @\Forms.script
;

PROCEDURE "Ставим форме размеры и " STRING IN aForm INTEGER IN formW INTEGER IN formH OBJECT IN aProc
 OBJECT VAR Parent
 "Найти окно по имени {(aForm)}" >>> Parent
 INTEGER VAR W
 INTEGER VAR H
 Parent "Померить ширину" >>> W
 Parent "Померить высоту" >>> H
 formW Parent "Установить ширину"
 formH Parent "Установить высоту"
 "Дождаться переключения вкладок"
 TRY
  aProc DO
 FINALLY
  W Parent "Установить ширину"
  H Parent "Установить высоту"
 END
;

PROCEDURE "Сравнить содержимое тулбаров с эталоном расширенно" BOOLEAN IN aCheckEnabled

 PROCEDURE Действия OBJECT IN aObj
  ( aObj ЯВЛЯЕТСЯ class::TvcmToolbar ) ? (
   ( aObj "Узнать, виден ли контрол" И ( aObj pop:Control:ControlCount БОЛЬШЕ 1 ) ) ? (
    aObj .
    'Order = ' 'DockRow' aObj pop:object:GetOrdProp IntToStr Cat .
    '---------------' .
    aObj EnumerateControls ( OBJECT IN aControl
    ( aControl "НЕ ЯВЛЯЕТСЯ" class::Ttb97MoreButton ) ? (
      aControl .
      ( aControl "НЕ ЯВЛЯЕТСЯ" class::TvcmComboBox ) ? (
       aControl pop:Control:Caption .
       aCheckEnabled ? ( 'Активность:' aControl "Убедиться, что контрол активен"  ToPrintable Cat . ) 
      )
     )
    )
    '' .
   )
  )
 ;

 OnTest
 "Текущая активная вкладка" "выполнить для всех контролов" Действия
; // "Сравнить содержимое тулбаров с эталоном расширенно"



: "Перебрать иерархию вложенности контролов" OBJECT IN aControl IN aProc
 ПОКА ( aControl "Объект существует?" )
 BEGIN
  aControl aProc DO
  aControl "Родительский объект" >>> aControl
 END
; // "Перебрать иерархию вложенности контролов"

PROCEDURE "Напечатать иерархию вложенности контролов" OBJECT IN aControl

 : "Печатаем контрол" IN aControl
  [ 
   Если ( aControl ЯВЛЯЕТСЯ class::TvcmForm ) то
    // - т.к. у формы к Name могут приклеиваться циферки, которые всю малину портят
    ( aControl pop:Form:FormID )
   иначе
    ( aControl pop:Component:Name ) 
    //class::TvcmForm aControl pop:object:Inherits
   ' : ' 
   aControl pop:object:ClassName 
  ] strings:Cat .
 ;
 
 aControl @ "Печатаем контрол" "Перебрать иерархию вложенности контролов"
;

PROCEDURE "Проверить иерархию вложенности текущего контрола"
 "Напечатать иерархию вложенности контролов {(focused:control:push)}"
;

PROCEDURE "Проверить, что высоты контролов больше 0" OBJECT IN aControl

 : "Печатаем контрол" IN aControl
  aControl pop:Control:Height >0 ?ASSURE
   [ 
    'Высота контрола ' 
    aControl pop:Component:Name  ' : '
    aControl pop:object:ClassName 
    ' почему-то меньше или равна 0' 
   ]
 ;
 
 aControl @ "Печатаем контрол" "Перебрать иерархию вложенности контролов"
; // "Проверить, что высоты контролов больше 0"

PROCEDURE "Дождаться появления хинта"
// "Установить окно оболочки на передний план"
 BOOLEAN VAR Хинт_появился
 15 раз (
  100 SLEEP
  "Дать системе перерисоваться"
  Хинт_появился := "Узнать, виден ли хинт"
  Если Хинт_появился то 
   выходим
 )
 Хинт_появился ?ASSURE 'Хинт так и не появился'
; // "Дождаться появления хинта"

PROCEDURE "Сравнить содержимое тулбара объекта с эталоном" STRING IN aForm STRING IN aMainObject

 PROCEDURE Действия OBJECT IN aObj
  ( ( aObj ЯВЛЯЕТСЯ class::TvcmToolbar ) И
  ( aObj "Имя компонента" РАВНО aMainObject ) ) ? (
   ( aObj "Узнать, виден ли контрол" И ( aObj pop:Control:ControlCount БОЛЬШЕ 1 ) ) ? (
    aObj .
    'Order = ' 'DockRow' aObj pop:object:GetOrdProp IntToStr Cat .
    '---------------' .
    aObj EnumerateControls ( OBJECT IN aControl
    ( aControl "НЕ ЯВЛЯЕТСЯ" class::Ttb97MoreButton ) ? (
      aControl .
      ( aControl "НЕ ЯВЛЯЕТСЯ" class::TvcmComboBox ) ? (
       Если ( aControl ЯВЛЯЕТСЯ class::TvcmSeparatorDef ) то
        ( 'Разделитель' . )
       иначе (
        aControl pop:Control:Caption .
        'Активность:' aControl "Убедиться, что контрол активен" ToPrintable Cat .
        'Кнопка нажата: ' "Узнать численную {('Down')} переменную объекта {(aControl)}" 0 ?!= ToPrintable Cat . 
       )      
      )
     "Отделить текст в эталоне"    
     )
    )
   )
  )
 ;

 "Дождаться переключения вкладок"
 OBJECT VAR "Форма с тулбаром"
 "Найти окно по имени {(aForm)}" =: "Форма с тулбаром"  
 "Форма с тулбаром" "выполнить для всех контролов" Действия
;

VOID WORDWORKER "Подготовить главное окно к тесту (установить ему размеры ) и выполнить" INTEGER IN formW INTEGER IN formH
 PROCEDURE Действия
  "Выставить форме размеры {( formW formH )} и {(@ ( WordToWork DO ) )}"
 ; 

 "Сделать {(@ Действия )} с изменением состояния и размеров окна {("Главное окно")}"
;

VOID WORDWORKER "##Установить оболочке единые размеры и выполнить"
 "Подготовить главное окно к тесту (установить ему размеры {( 1150 800 )} ) и выполнить" (
  WordToWork DO
 )
;

PROCEDURE "Сравнить содержимое тулбаров с эталоном"
// "Подготовить главное окно к тесту (установить ему размеры {( 1400 900 )} ) и выполнить" (
  "Сравнить содержимое тулбаров с эталоном расширенно {(false)}"
// )
;

PROCEDURE "Сравнить содержимое тулбаров с эталоном полностью"
 "Сравнить содержимое тулбаров с эталоном расширенно {(true)}"
;