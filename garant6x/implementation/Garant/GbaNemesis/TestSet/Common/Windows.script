USES
 axiom:Form
 
 @\Mouse.script
 WordsTranslation.script
 @\Controls.script
 Forms.script
 ;

PROCEDURE "##Подготовить главное окно к тесту"
 "Главное окно" pop:Control:Top := 0
 "Главное окно" pop:Control:Left := 0
;

PROCEDURE "Уменьшить окно" OBJECT IN "Окно"
 CONST wsNormal 0
 wsNormal "Окно" pop:form:SetWindowState
; // "Уменьшить окно"

PROCEDURE "Развернуть окно" OBJECT IN "Окно"
 CONST wsMaximized 2
 wsMaximized "Окно" pop:form:SetWindowState
; // "Развернуть окно"

PROCEDURE "Свернуть окно" OBJECT IN "Окно"
 CONST wsMinimized 1
 wsMinimized "Окно" pop:form:SetWindowState
; // "Свернуть окно"

PROCEDURE "Сделать с изменением состояния и размеров окна" OBJECT IN aProc OBJECT IN aForm
 VAR aState
 VAR L
 VAR T
 VAR W
 VAR H
 aForm pop:form:GetWindowState >>> aState
 aForm "Померить отступ слева" >>> L
 aForm "Померить отступ сверху" >>> T
 aForm "Померить ширину" >>> W
 aForm "Померить высоту" >>> H
 TRY
  aProc DO
 FINALLY
  aState aForm pop:form:SetWindowState
  aForm pop:Control:Left := L
  aForm pop:Control:Top := T
  W aForm "Установить ширину"
  H aForm "Установить высоту"
 END
; // "Сделать с изменением состояния и размеров окна"

INTEGER FUNCTION "Сохранить активное окно"
 Если ( HasTabs ) то (
  focused:control:push pop:Control:GetTopParentForm pop:Control:GetAnotherParentForm pop:Control:Handle >>> Result 
 )
 иначе (
  focused:control:push pop:Control:GetTopParentForm pop:Control:Handle >>> Result 
 )
;

WORDWORKER "Открыть новое окно Гаранта и выполнить"
 VAR l_Main
 "Сохранить активное окно" >>> l_Main
 TRY
  "Открыть новое окно гаранта"
  "Дождаться переключения вкладок"
  ( WordToWork DO )
 FINALLY
  l_Main "Восстановить активное окно"
  "Закрыть все окна кроме текущего"
 END
;

PROCEDURE "Убедиться, что окно заменило окно" INTEGER IN aFirstWindow INTEGER IN aSecondWindow
 aFirstWindow  НЕРАВНО aSecondWindow ?ASSURE 'Новое окно не стало активным!'
;

PROCEDURE "Убедиться, что отступ слева для текущего окна такой же как " INTEGER IN aLeftInset
 "Отступ слева для" "Главное окно" РАВНО aLeftInset ?ASSURE 'Отступ слева не совпадает!'
;

PROCEDURE "Убедиться, что отступ сверху для текущего окна такой же как " INTEGER IN aTopInset
 "Отступ сверху для" "Главное окно" РАВНО aTopInset ?ASSURE 'Отступ сверху не совпадает!'
;

PROCEDURE "Учитывая и убедиться, что текущее окно открылось каскадом" INTEGER IN aLeftInset INTEGER IN aTopInset
 ( "Отступ слева для" "Главное окно" "в интервале" ( aLeftInset ( aLeftInset 100 + ) ) )
 И ( "Отступ сверху для" "Главное окно" "в интервале" ( aTopInset ( aTopInset 100 + ) ) ) ?ASSURE 'Окно открылось не каскадом!'
;

ARRAY FUNCTION "Размеры главной формы" 
 [ 
  "Главное окно" "Померить высоту"
  "Главное окно" "Померить ширину"
 ]
 >>> Result 
;

INTEGER FUNCTION "Высота главной формы"
0 "Размеры главной формы"  [i]  >>> Result 
;

INTEGER FUNCTION "Ширина главной формы"
1 "Размеры главной формы"  [i]  >>> Result 
;

PROCEDURE "Убедиться, что ширина для текущего окна такая же как " INTEGER IN aWidth
 "Ширина главной формы" РАВНО aWidth ?ASSURE 'Ширина окон не совпадает!'
;

PROCEDURE "Убедиться, что высота для текущего окна такая же как " INTEGER IN aHeight
 "Высота главной формы" РАВНО aHeight ?ASSURE 'Высота окон не совпадает!'
;

VOID WORDWORKER "После работы теста активным должно остаться окно" INTEGER IN aWindow
 TRY
  ( WordToWork DO )
 FINALLY
  "Восстановить {(aWindow)} активное окно"
  "Развернуть {("Главное окно")} окно"
  "Закрыть все окна кроме текущего"
 END
;

VOID WORDWORKER "##Восстановить после теста изначальное окно"
 INTEGER VAR "Первое"
 "Сохранить активное окно" =: "Первое" 
 "После работы теста активным должно остаться {("Первое")} окно" (
  ( WordToWork DO )
 )
;

PROCEDURE "Подвинуть левую границу главного окна на 100 пикселей вправо"
 THREAD ( 
  500 SLEEP
  "Установить курсор мыши по координатам {(100 250)} относительно контрола {("Главное окно")}"
  "Отпустить левую кнопку мыши"
 ) 
 "Установить курсор мыши по координатам {(-1 250)} относительно контрола {("Главное окно")}"
 "Зажать левую кнопку мыши"
 1000 SLEEP 
;