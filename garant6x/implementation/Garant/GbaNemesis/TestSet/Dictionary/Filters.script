USES
 axiom:Filters
 axiom:Tree
 
 F1ControlsDefinition.script
;

USES
 @\SysUtils.script
;

PROCEDURE "Установить фокус во вкладку Фильтры"
 false ANYUSERTYPE контрол::FiltersList форма::Filters TryFocusOnForm ?ASSURE
  'Не удалось установить фокус во вкладку Фильтры'
;

: "Открыть фильтры" 
 BOOLEAN VAR l_Found
 true ANYUSERTYPE контрол::FiltersList форма::Filters TryFocusOnForm =: l_Found
 l_Found ! ? filters:Open
 true ANYUSERTYPE контрол::FiltersList форма::Filters TryFocusOnForm ?ASSURE
 'Не смогли установить фокус в список фильтров'
;

: "Открыть фильтры и установить выбранность фильтра в" INTEGER IN aNode BOOLEAN IN aSelected
 : Действия
  "Открыть фильтры"
  aSelected aNode focused:control:push tree:SetSelected
  OnTest
 ;
 "Выполнить {(@ Действия)} и восстановить фокус"
;

: "Открыть фильтры и выбрать" INTEGER IN aNode
 "Открыть фильтры и установить выбранность фильтра {(aNode)} в {(true)}"
;

: "Открыть фильтры и отменить" INTEGER IN aNode
 "Открыть фильтры и установить выбранность фильтра {(aNode)} в {(false)}"
;

: "Открыть фильтры и выбрать второй"
 "Открыть фильтры и выбрать {(1)}"
;

: "Открыть фильтры и выбрать первый"
 "Открыть фильтры и выбрать {(0)}"
;

: "Открыть фильтры и выбрать третий"
 "Открыть фильтры и выбрать {(2)}"
;

: "Открыть фильтры и выбрать четвёртый"
 "Открыть фильтры и выбрать {(3)}"
;

: "Открыть фильтры и выбрать пятый"
 "Открыть фильтры и выбрать {(4)}"
;

: "Проверить, выбран ли фильтр" INTEGER IN aNode
 OBJECT VAR aTree
 "Открыть фильтры" 
 focused:control:push >>> aTree
 aTree ЯВЛЯЕТСЯ class::TnscTreeView ?ASSURE 'А все равно нет фокуса в дереве'
 aNode aTree tree:GetSelected .
;

USES
 WordsTranslation.script
;

: "Проверить, выбран ли фильтр с именем" STRING IN aStr
 "Открыть фильтры" 
 
 OBJECT VAR aTree
 aTree := контрол::FiltersList:push
 
 INTEGER VAR l_ItemIndex
 l_ItemIndex := 0
 
 "Переместиться в начало дерева"
 aTree "Количество элементов дерева" раз ( 
  Если ( ( aTree "Текущая нода дерева" "Текст ноды" ) РАВНО ( aStr ) ) то
   (
    "Проверить, выбран ли фильтр {(l_ItemIndex)}"
    Выходим
   ) 
  иначе
   (
    "Стрелка вниз"
    ++! l_ItemIndex
   )
 ) 
; // "Проверить, выбран ли фильтр с именем"

PROCEDURE "Равен ли индекс иконки в дереве числу ?" INTEGER IN aNode OBJECT IN aCtrl INTEGER IN aNum
  ( aNode "Узнать индекс иконки в дереве {( aCtrl )}" РАВНО aNum ) ?ASSURE 'Индекс иконки ноды дерева от указанного!'
;

USES
 MainBasic.script
;

BOOLEAN FUNCTION "Является ли фильтр автоприменяемым?" STRING IN aFilter
 INTEGER VAR aNode
 "Узнать номер ноды фильтра {(aFilter)} во вкладке Фильтры" >>> aNode
 ( aNode контрол::FiltersList:push tree:GetItemImageIndex РАВНО 25 ) =: Result
; // "Является ли фильтр автоприменяемым?"

PROCEDURE "Сделать фильтр автоприменяемым" STRING IN aFilter 
 INTEGER VAR aNode
 "Узнать номер ноды фильтра {(aFilter)} во вкладке Фильтры" >>> aNode
 "Установить фокус во вкладку Фильтры"
  Если ( контрол::FiltersList:push "Текущая нода дерева" "Текст ноды" РАВНО aFilter ) то
  ( "Является ли фильтр {(aFilter)} автоприменяемым?" ! ? (
    оп::Фильтр_Применять_автоматически ) 
  )
; 

PROCEDURE "Сделать фильтр НЕавтоприменяемым" STRING IN aFilter 
 INTEGER VAR aNode
 "Узнать номер ноды фильтра {(aFilter)} во вкладке Фильтры" >>> aNode
 "Установить фокус во вкладку Фильтры"
 Если ( контрол::FiltersList:push "Текущая нода дерева" "Текст ноды" РАВНО aFilter ) то
  ( "Является ли фильтр {(aFilter)} автоприменяемым?" ? (
    оп::Фильтр_Применять_автоматически ) 
  )
;

PROCEDURE "Равен ли индекс иконки фильтра в дереве числу ?" STRING IN aFilter INTEGER IN aNum
 INTEGER VAR aNode
 "Узнать номер ноды фильтра {(aFilter)} во вкладке Фильтры" >>> aNode
  ( aNode "Узнать индекс иконки в дереве {( контрол::FiltersList:push )}" РАВНО aNum ) ?ASSURE 'Индекс иконки ноды дерева от указанного!'
;

PROCEDURE "Убедиться, что фильтр автоприменяемый" STRING IN aFilter 
 "Установить фокус во вкладку Фильтры"
 "Является ли фильтр {(aFilter)} автоприменяемым?" ?ASSURE 'Фильтр не является автоприменяемым'
; 

PROCEDURE "Создать фильтр с именем и с параметром для" STRING IN aName IN aProc IN aKZ
  aKZ DO
  "Открыть фильтры"

 : Действия1

  : Действия2
   "Ввести {(aName)}"
   "Нажать Ok"
  ;

  aProc DO
  @ ( "Нажать Ok" ) MODAL ( Действия2 )
 ;

 @ оп::Фильтры_Создать_новый_фильтр MODAL ( Действия1 )
 "Дождаться переключения вкладок"
 "Закрыть фильтры"
; // "Создать фильтр с именем и с параметром"

PROCEDURE "Удалить фильтр с именем для" STRING IN aFilter IN aKZ
 "Удалить фильтр с именем {(aFilter)} для {( aKZ )} с закрытием вкладки Фильтры {(true)}"
;

PROCEDURE "Применить фильтр с именем" STRING IN aFilter
 "Открыть фильтры"
 INTEGER VAR aNode
 "Узнать номер ноды фильтра {(aFilter)} во вкладке Фильтры" >>> aNode
 Если ( контрол::FiltersList:push "Текущая нода дерева" "Текст ноды" РАВНО aFilter ) то
  ( true aNode "Контрол в фокусе" "Изменить отмеченность ноды дерева" ) 
; 

PROCEDURE "Отменить фильтр с именем" STRING IN aStr
 "Открыть фильтры"
 INTEGER VAR aNode
 "Узнать номер ноды фильтра {(aStr)} во вкладке Фильтры" >>> aNode
 Если ( контрол::FiltersList:push "Текущая нода дерева" "Текст ноды" РАВНО aStr ) то
  ( false aNode "Контрол в фокусе" "Изменить отмеченность ноды дерева" ) 
;

PROCEDURE "Применить фильтр и выполнить" STRING IN aFilter IN aProc
 "Применить фильтр с именем {(aFilter)}"
 TRY
  aProc DO
 FINALLY
  "Отменить фильтр с именем {(aFilter)}"
 END
;

PROCEDURE "Удалить фильтр с именем" STRING IN aFilter
 "Удалить фильтр с именем {(aFilter)} для {(@ NOP)} с закрытием вкладки Фильтры {(true)}"
;

PROCEDURE "Перезаписать фильтр с именем новым параметром для" STRING IN aFilter IN aProc IN aKZ
 PROCEDURE Действия
  aProc DO
  wait:Yes
  TRY
   "Нажать Ok"
  FINALLY
   waited:? ?ASSURE 'Не дождались диалога!'
  END
 ;

 aKZ DO
 "Открыть фильтры"
 INTEGER VAR aNode
 "Узнать номер ноды фильтра {(aFilter)} во вкладке Фильтры" >>> aNode
 Если ( контрол::FiltersList:push "Текущая нода дерева" "Текст ноды" РАВНО aFilter ) то 
  ( @ "Редактировать фильтр" MODAL ( Действия ) )
 "Дождаться переключения вкладок"
; // "Перезаписать фильтр с именем новым параметром"

USES
 Editor.script
;

PROCEDURE "Сравнить фильтр с именем с эталоном для" STRING IN aFilter IN aKZ
 aKZ DO
 "Открыть фильтры"
 INTEGER VAR aNode
 "Узнать номер ноды фильтра {(aFilter)} во вкладке Фильтры" >>> aNode
 Если ( контрол::FiltersList:push "Текущая нода дерева" "Текст ноды" РАВНО aFilter ) то 
  ( @ "Редактировать фильтр" MODAL ( "Сравнить текст редактора {(контрол::Editor:push)} с эталоном" ) )
 "Дождаться переключения вкладок"
 "Закрыть фильтры"
; // "Сравнить фильтр с именем с эталоном"

: "Создать фильтр и выполнить с ним , а потом удалить" OBJECT IN Действия

 : aFilter "Полный путь скрипта" "Имя скрипта" ;

  : Сохраняем_фильтр
    "Дождаться переключения вкладок"
    "Ввести строку {(aFilter)}"
    Действия DO
    "Нажать Ok"
   ; // Сохраняем_фильтр

  : Создаем_фильтр
   @ ( "Нажать Ok" ) MODAL ( Сохраняем_фильтр )
  ; // Создаем_фильтр 

  ППР
 "Открыть фильтры"
 @ ( "Создать новый фильтр" ) MODAL ( Создаем_фильтр )
 ППР
 "Дождаться переключения вкладок"
 "Открыть фильтры"
 5 раз ( 200 SLEEP OnTest )
 "Удалить фильтр с именем {(aFilter)}"
; // "Создать фильтр и выполнить с ним а потом удалить

PROCEDURE "Сравнить с эталоном состояние применённости всех фильтров"
 "Открыть фильтры" 
 "Переместиться в начало дерева"
 контрол::FiltersList:push "Количество элементов дерева" раз (
  STRING VAR "Имя фильтра"
  контрол::FiltersList:push "Текущая нода дерева" "Текст ноды" =: "Имя фильтра"
  "Имя фильтра" .
  "Проверить, выбран ли фильтр с именем {("Имя фильтра")}"
  "Стрелка вниз"
 )
;

VOID WORDWORKER "Выполнить с формой создания фильтра"
 "Создать фильтр и выполнить с ним {(@ ( WordToWork DO ) )}, а потом удалить" 
;

PROCEDURE "На вкладке 'Фильтры' отмечаем первые 5 фильтров"
 "Открыть фильтры"
 5 раз ( "Выделить текущий элемент"
  "Стрелка вниз" )
;

PROCEDURE "Снимаем отметку с 5ого фильтра"
 "Стрелка вверх"
 "Выделить текущий элемент"
;

CONST Filter_for_test_K361039829 'K361039829'

PROCEDURE "Создать новый пустой фильтр для теста K361039829"
 "Создать фильтр с именем {(Filter_for_test_K361039829)} и с параметром {(@ NOP)} для {(@ NOP)}"
 "Дать системе перерисоваться"
 "Открыть фильтры"
; // "Создать новый пустой фильтр для теста K361039829"

WORDWORKER "Сделать фильтр автоприменяемым и выполнить" STRING IN aFilter 
 "Установить фокус во вкладку Фильтры"
 "Сделать фильтр {(aFilter)} автоприменяемым"
 TRY
  ( WordToWork DO )
 FINALLY
  "Сделать фильтр {(aFilter)} НЕавтоприменяемым"
 END
;

PROCEDURE "Сравнить с эталоном является ли фильтр автоприменяемым" STRING IN aFilter 
 "Установить фокус во вкладку Фильтры"
 'Является ли фильтр автоприменяемым:' .
 "Является ли фильтр {(aFilter)} автоприменяемым?" .
;

PROCEDURE "Сравнить с эталоном выбран ли фильтр" STRING IN aNumNode
 "Установить фокус во вкладку Фильтры"
 'Стоит ли галочка у фильтра:' .
 "Проверить, выбран ли фильтр с именем {(aNumNode)}"
;

CONST Filter_for_test_K371647683_1 'K371647683_1'
CONST Filter_for_test_K371647683_2 'K371647683_2'

WORDWORKER "Создать новый пустой фильтр для теста K371647683 (ИнФарм) и выполнить"
 "Создать фильтр с именем {(Filter_for_test_K371647683_1)} и с параметром {(@ NOP)} для {(@ "Поиск лекарственного средства")}"
 ( WordToWork DO )
;

WORDWORKER "Создать новый пустой фильтр для теста K371647683 (ППР) и выполнить"
 "Создать фильтр с именем {(Filter_for_test_K371647683_2)} и с параметром {(@ NOP)} для {(@ ППР)}"
 "Дать системе перерисоваться"
 ( WordToWork DO )
;

PROCEDURE "Отменить все фильтры и проверить, остался ли выделен фильтр '16. Только действующие'"
 "Отменить все фильтры"
 "Отделить текст в эталоне"
 'Отмечен ли фильтр 16. Только действующие: ' .
 "Проверить, выбран ли фильтр с именем {('16. Только действующие')}"
;

USES
 DocumentProcessing.script
 HLTCLike.script
;

CONST Filter_for_test_K397292242 'K397292242'

PROCEDURE "Создать фильтр для ААК-списка, выполнить и удалить его" STRING IN aName IN aProc

 : Параметры
  "в поле 'Тип' ввести {('Комментарии\Решение')}" // ТАКОГО ТИПА НЕТ НА ТБ24 от 16.10.2015. испол. станд. фильтр (10.11.2015)
  "в поле 'Орган/Источник' ввести {('Компания "Гарант"')}"
 ; // 

 "Создать фильтр с именем {(aName)} и с параметром {(@ Параметры )} для {(@ ППР)}"
 TRY
  aProc DO
 FINALLY
 ОМ
 "Очистить историю для освобождения фильтров"
 "Удалить фильтр с именем {(aName)} для {(@ ППР)}"
 END
; // "Создать фильтр для ААК-списка, выполнить и удалить его"

CONST Filter_for_test_K398276192 'K398276192'

WORDWORKER "Создать фильтр с параметрами: 'Тип - Комментарии\Решение' и 'Орган/Источник - 'Компания Гарант' и выполнить"
 "Создать фильтр {(Filter_for_test_K398276192)} для ААК-списка, выполнить {(@ ( WordToWork DO ) )} и удалить его"
;

PROCEDURE "Применить созданный фильтр для получения списка с ААК-документами"
 "Применить фильтр с именем {(Filter_for_test_K398276192)}"
 "Нажать Искать"
 "Перевести фокус в список"
 "Дать системе перерисоваться"
;

PROCEDURE "##Действия для полного удаления фильтра"
 // Служебное слово для удаления фильтров из памяти
 ОМ
 "Очистить историю для освобождения фильтров"
 ППР
 "Открыть фильтры"
;

CONST Filter_for_test_K412980963 'K412980963'

CONST Filter_for_test_K454041320 'K454041320'

PROCEDURE "Нажать 'Искать', применить фильтр и удалить его" STRING IN aName
 TRY
  "Нажать Искать"  
 FINALLY
  "Дождаться переключения вкладок"
  "Применить фильтр с именем {(aName)}"
  "Удалить фильтр с именем {(aName)}"
 END
;

PROCEDURE "Сравнить с эталоном, выбран ли фильтр" STRING IN aName
 "Дождаться переключения вкладок"
 [ 'Галочка у фильтра ' aName ':' ] strings:Cat .
 "Проверить, выбран ли фильтр с именем {(aName)}"
;

CONST Filter_for_test_K458074860_1 'K458074860_1'
CONST Filter_for_test_K458074860_2 'K458074860_2'

WORDWORKER "Создать пустой фильтр (в ППР) и выполнить" STRING IN aName
 "Создать фильтр с именем {(aName)} и с параметром {(@ NOP )} для {(@ ППР)}"
 "Дать системе перерисоваться"
 TRY
  ( WordToWork DO )
 FINALLY
  "Удалить фильтр  с именем {(aName)}" 
  "##Действия для полного удаления фильтра"
 END
;

CONST Filter_for_test_K461017362_1_акт 'K461017362_1_акт'
CONST Filter_for_test_K461017362_2_документ 'K461017362_2_документ'

WORDWORKER "Создать фильтр с параметром Слова в названии ( из ППР ) и выполнить" STRING IN aName STRING IN aParam
 PROCEDURE Параметр1
  "в поле 'Слова в названии' ввести {(aParam)}"
 ;

 "Создать фильтр с именем {(aName)} и с параметром {(@ Параметр1)} для {(@ ППР)}"
 "Дать системе перерисоваться"
 TRY
  ( WordToWork DO )
 FINALLY
  ОМ
  "Очистить историю для освобождения фильтров"
  "Удалить фильтр с именем {(aName)} для {(@ ППР)}"
 END
;

CONST Filter_for_test_K397300122 'K397300122'

WORDWORKER "Создать фильтр с параметром Тип ( из ППР ) и выполнить" STRING IN aName STRING IN aParam
 PROCEDURE Параметр1
  "в поле 'Тип' ввести {(aParam)}"
 ;

 "Создать фильтр с именем {(aName)} и с параметром {(@ Параметр1)} для {(@ ППР)}"
 "Дать системе перерисоваться"
 TRY
  ( WordToWork DO )
 FINALLY
  "Удалить фильтр без закрытия вкладки с именем {(aName)} для {(@ NOP )}"
 END
;

PROCEDURE "Проверить, что у фильтра есть красный крестик" STRING IN aFilter
 TRY
 "Равен ли индекс иконки фильтра {(aFilter)} в дереве числу {(5)}?"
 FINALLY
  "##Действия для полного удаления фильтра"
 END
;

CONST Filter_for_test_K452365285 'K452365285'

PROCEDURE "Закрыть вкладку 'Фильтры'"
 "Закрыть фильтры" 
 "Дождаться переключения вкладок"
;

PROCEDURE "Перезаписать фильтр , дать ему новое имя и добавить новый параметр , сделать для" STRING IN aName STRING IN aNameNew IN aProc IN aKZ
 PROCEDURE Действия

  aProc DO
  wait:No
  TRY
  
  PROCEDURE Вводим_новое_имя_фильтра
    "Ввести {(aNameNew)}"
    "Нажать Ok"
   ;  // Вводим_новое_имя_фильтра 

  "Обработать Enter модально" ( "Нажать Нет" Вводим_новое_имя_фильтра )

  FINALLY
   waited:? ?ASSURE 'Не дождались диалога!'
  END
 ; // Действия

 aKZ DO
 "Открыть фильтры"

  Если ( контрол::FiltersList:push "Текущая нода дерева" "Текст ноды" РАВНО aName ) то 
   ( @ "Редактировать фильтр" MODAL ( Действия ) )

 "Дождаться переключения вкладок"
; // "Перезаписать фильтр , дать ему новое имя и добавить новый параметр , сделать для"

CONST Filter_for_test_K387088981 'K387088981'
CONST Filter_for_test_K387088981_new 'K387088981_new'

PROCEDURE "Применить созданный фильтр и отредактировать его: добавить 'Слова в названии - порт', перезаписать с новым именем"
 PROCEDURE Параметр2
  "в поле 'Слова в названии' ввести {('порт')}"
 ;

  PROCEDURE Действия_с_примененным_фильтром
   "Перезаписать фильтр {(Filter_for_test_K387088981)}, дать ему новое имя {(Filter_for_test_K387088981_new)} и добавить новый параметр {(@ Параметр2)}, сделать для {(@ NOP )}"
  ; // Действия_с_примененным_фильтром

  "Применить фильтр {('K387088981')} и выполнить {(@ Действия_с_примененным_фильтром )}"
;

PROCEDURE "Отменяем все фильтры"
 "Установить фокус во вкладку Фильтры"
 "Отменить все фильтры" 
;

WORDWORKER "Открыть окно создания фильтра и выполнить"
 @ "Создать новый фильтр" MODAL ( WordToWork DO )
 "Дать системе перерисоваться"
 "Дождаться переключения вкладок"
;

WORDWORKER "Сделать фильтры и автоприменяемыми и выполнить" STRING IN aFilter1 STRING IN aFilter2 
 "Убедиться, что нет лишних фильтров"
 ППР
 "Открыть фильтры" 
 "Сделать фильтр {(aFilter1)} автоприменяемым и выполнить" (
  "Сделать фильтр {(aFilter2)} автоприменяемым и выполнить" (
   TRY
    ( WordToWork DO ) 
   FINALLY
    "##Действия для полного удаления фильтра"
   END
  )
 )
;

PROCEDURE "Сравнить с эталоном имя последнего фильтра на вкладке Фильтры"
 // Проверяем, что пользовательский фильтр удалился
 ОМ
 "Очистить историю для освобождения фильтров"
 ППР
 "Открыть фильтры"
 "Перейти к концу"
 "Контрол в фокусе" "Заголовок контрола" .
;

CONST Filter_for_test_K263292056 'K263292056'

PROCEDURE "Открыть Лекарственные средства, разрешённые к применению. Создать пустой фильтр."
 "Создать фильтр с именем {(Filter_for_test_K263292056)} и с параметром {(@ NOP )} для {(@ моп::Инфарм_Список_выпускаемых_препаратов )}"
;

CONST Filter_for_test_K274848126 'K274848126'

PROCEDURE "Создать новый пустой фильтр для теста K274848126"
 "Создать фильтр с именем {(Filter_for_test_K274848126)} и с параметром {(@ NOP)} для {(@ ППР)}"
; // "Создать новый пустой фильтр для теста K274848126"

PROCEDURE "Применить фильтры: 08. Федеральные акты, 09. Письма Минфина и ФНС, 10. Региональные акты. Удалить созданный фильтр"
 PROCEDURE Действия
  "Применить фильтр с именем {('10. Региональные акты')}"  
 ;

 TRY
  "Применить фильтр с именем {('08. Федеральные акты')}"
  "Применить фильтр с именем {('09. Письма Минфина и ФНС')}"  
  "Выполнить {(@ Действия)} обработав исключение {('Не смогли восстановить фокус')}"
 FINALLY
  "Удалить фильтр с именем {(Filter_for_test_K274848126)} для {(@ NOP)}"
 END
 "Дать системе перерисоваться"
; // "Применить фильтры: 08. Федеральные акты, 09. Письма Минфина и ФНС, 10. Региональные акты. Удалить созданный фильтр"

PROCEDURE "Сравнить с эталоном, отмечены ли фильтры: 08. Федеральные акты, 09. Письма Минфина и ФНС, 10. Региональные акты"
 "Открыть фильтры"
 "Проверить, выбран ли фильтр с именем {('08. Федеральные акты')}"
 "Проверить, выбран ли фильтр с именем {('09. Письма Минфина и ФНС')}"
 "Проверить, выбран ли фильтр с именем {('10. Региональные акты')}"
; // "Сравнить с эталоном, отмечены ли фильтры: 08. Федеральные акты, 09. Письма Минфина и ФНС, 10. Региональные акты"

PROCEDURE "Создать фильтр с пустым именем в ППР"
 "Создать фильтр с именем {('')} и с параметром {(@ NOP)} для {(@ ППР)}"
;

CONST Filter_for_test_K387090473 'K387090473'

WORDWORKER "Создать фильтр с параметром 'Тип - Акт' ( из ППР ) и выполнить" STRING IN aName
 PROCEDURE Параметр1
  "в поле 'Тип' ввести {('Акт')}"
 ;

 "Создать фильтр с именем {(aName)} и с параметром {(@ Параметр1)} для {(@ ППР)}"
 "Дать системе перерисоваться"
 TRY
  ( WordToWork DO )
 FINALLY
  ОМ
  "Очистить историю для освобождения фильтров"
 END
;

PROCEDURE "Перезаписать фильтр (добавить параметр 'Слова в названии - порт') для теста K387090473 ( из ППР )"
 PROCEDURE Параметр2
  "в поле 'Слова в названии' ввести {('порт')}"
 ;

 "Перезаписать фильтр с именем {(Filter_for_test_K387090473)} новым параметром {(@ Параметр2)} для {(@ ППР)}"
;

PROCEDURE "Сравнить с эталоном заполненные поля КЗ для фильтра K387090473"
 "Сравнить фильтр с именем {(Filter_for_test_K387090473)} с эталоном для {(@ ППР)}"
;

CONST Filter_for_test_K450293671 'K450293671'

PROCEDURE "Создать пустой фильтр (в ППР)" STRING IN aName
 "Создать фильтр с именем {(aName)} и с параметром {(@ NOP )} для {(@ ППР)}"
 "Дать системе перерисоваться"
;

PROCEDURE "Сравнить с эталоном имя текущего фильтра"
 "Контрол в фокусе" "Заголовок контрола" .
;

PROCEDURE "Сравнить наличие синей галочки у удаленного фильтра с этанолом и убедиться, что у него есть красный крестик" STRING IN aName
 TRY
  'Стоит ли галочка у фильтра? ' . "Проверить, выбран ли фильтр с именем {(aName)}"
  "Равен ли индекс иконки {(16)} в дереве {(контрол::FiltersList:push)} числу {(5)}?"
 FINALLY  
  "##Действия для полного удаления фильтра"
 END 
;

PROCEDURE "Удалить фильтр без закрытия вкладки" STRING IN aName
 "Удалить фильтр без закрытия вкладки с именем {(aName)} для {(@ NOP )}"
 "Дождаться переключения вкладок" 
;

CONST Filter_for_test_K435457256 'K435457256'

PROCEDURE "Сравнить с эталоном количество фильтров на одноименной вкладке"
 "Установить фокус во вкладку Фильтры"
 контрол::FiltersList:push "Количество элементов дерева" .
;

CONST Filter_for_test_K506709931 'K506709931'
CONST Filter_for_test_K371654349 'K371654349'

PROCEDURE "Перезаписать фильтр с именем , новым параметром для КЗ ППС" STRING IN aFilter IN aProc 
 PROCEDURE Действия
  aProc DO
  // wait:Yes
  TRY
   "Нажать Ok"
  FINALLY
  // waited:? ?ASSURE 'Не дождались диалога!'
  // диалога нет
  END
 ;

 INTEGER VAR aNode
 "Узнать номер ноды фильтра {(aFilter)} во вкладке Фильтры" >>> aNode
 Если ( контрол::FiltersList:push "Текущая нода дерева" "Текст ноды" РАВНО aFilter ) то 
  ( @ "Редактировать фильтр" MODAL ( Действия ) )
 "Дождаться переключения вкладок"
;

PROCEDURE "Убедиться, что вкладка фильтры не активна"
 false ANYUSERTYPE контрол::FiltersList форма::Filters TryFocusOnForm ! ?ASSURE 'Вкладка фильтры доступна!'
;

// $Id: Filters.script,v 1.60 2016/01/13 13:48:05 a.trofimov Exp $

// $Log: Filters.script,v $
// Revision 1.60  2016/01/13 13:48:05  a.trofimov
// Добавил тест K615114152.script и эталон для него. Обновил словари
//
// Revision 1.59  2015/11/10 14:40:26  a.trofimov
// Разбор результатов автопрогона (без вкладок)
//
// Revision 1.58  2015/10/30 09:15:40  a.trofimov
// Измененные словари
//
// Revision 1.57  2015/10/07 06:47:32  a.trofimov
// Добавил тест K609140626.script и эталон для него. Обновил словари
//
// Revision 1.56  2015/07/24 13:54:18  lulin
// - готовимся к распиливанию аксиоматики на различные словари.
//
// Revision 1.55  2015/07/21 07:57:08  a.trofimov
// Заменяю ASSERT
//
// Revision 1.54  2015/07/15 17:15:26  lulin
// - каскадное использование словарей.
//
// Revision 1.53  2015/07/13 11:10:47  lulin
// - расставялем правильные USES.
//
// Revision 1.52  2015/07/10 15:32:17  lulin
// - заменяем ASSERTS на ?ASSURE.
//
// Revision 1.51  2015/01/16 12:45:08  a.trofimov
// Ревизия кода фильтров в словарях. Частично сделал: [$455098016]
//
// Revision 1.50  2015/01/16 08:46:02  a.trofimov
// Рефакторинг тестов (перевожу на параметры) и общая ревизия использования фильтров
//
// Revision 1.49  2014/12/09 13:15:02  a.trofimov
// Работа с фильтрами тоже была некорректной (как постусловие). Переделал. Теперь проверяем и удаляем лишние тесты и перед тестом (предусловие) и проверяем и удаляем ПОСЛЕ теста (как завершающее действие). Предусловие нужно для стабильности.
//
// Revision 1.48  2014/11/24 14:03:21  a.trofimov
// Рефакторинг тестов проверки форм
//
// Revision 1.47  2014/07/17 10:41:28  a.trofimov
// Поправил удаление фильтра, чтобы фильтр с пустым именем не слал исключения
//
// Revision 1.46  2014/07/17 08:42:28  a.trofimov
// Сделал постусловие на удаление пользовательских фильтров
//
// Revision 1.45  2014/07/07 08:47:46  a.trofimov
// Сделал предусловие на проверку автоприменяемых фильтров
//
// Revision 1.44  2014/03/14 06:23:40  a.trofimov
// Переписал тест ClearFilters.script и добавил эталон для него (изменилось его целевое предназначение)
//
// Revision 1.43  2014/03/13 13:15:16  a.trofimov
// Добавлена проверка на удаление невалидных фильтров
//
// Revision 1.42  2013/12/30 11:21:03  a.trofimov
// Косметические правки [$509683567]
//
// Revision 1.41  2013/12/30 08:00:16  a.trofimov
// Заменяю дублирующийся код
//
// Revision 1.39  2013/12/30 06:06:45  a.trofimov
// Удалил лишний код
//
// Revision 1.38  2013/12/27 11:23:26  a.trofimov
// Рефакторинг кода фильтров (и вернул эталон как был)
//
// Revision 1.37  2013/12/27 10:39:14  a.trofimov
// Переписано удаление фильтров (костыль в тесте 458074761)
//
// Revision 1.36  2013/12/27 06:12:52  a.trofimov
// Рефакторинг словарей, связанный с фильтрами
//
// Revision 1.35  2013/12/26 12:48:49  a.trofimov
// Переписываю фильтры (применяем по имени)
//
// Revision 1.34  2013/12/26 08:39:35  a.trofimov
// Рефакторинг фильтров (переходим к работе по имени, переносим код в нужный словарь)
//
// Revision 1.33  2013/12/18 12:56:35  lulin
// - причёсываем код тестов.
//
// Revision 1.32  2013/12/04 17:11:45  lulin
// - делаем поддержку общих словарей.
//
// Revision 1.31  2013/11/27 13:02:23  a.trofimov
// Заменяю IF, PROCEDURE
//
// Revision 1.30  2013/11/15 17:15:56  lulin
// - рефакторинг использования условных операторов.
//
// Revision 1.29  2013/09/30 10:17:05  a.trofimov
// Переписал тест K481440052.script (использую другие тесты). Обновил словари и эталон help.script
//
// Revision 1.28  2013/09/30 08:46:52  a.trofimov
// Чищу словарь (дублируется код)
//
// Revision 1.27  2013/09/30 08:29:57  a.trofimov
// Переписал тест K398276179.script (создал фильтр дл ААК). Обновил словари и эталон help.script
//
// Revision 1.26  2013/05/17 11:05:48  a.trofimov
// Дописал тест K454041320.script, обновил эталон. Поправил код словаря
//
// Revision 1.25  2013/05/16 13:41:26  a.trofimov
// Дополнил словарь
//
// Revision 1.24  2013/03/11 12:39:59  trofimov
// Добавил тест K387088981.script, эталон к нему, обновил словарик и эталон help.script
//
// Revision 1.23  2012/11/28 13:01:29  trofimov
// Добавил тест K410619503.script, 2 эталона к нему. Создал новый словарик - SysUtils.script, обновил HLTCLike.script, добавил новые слова в  Filters.script
//
// Revision 1.22  2012/11/23 11:45:36  trofimov
// обновил словарь Filters.script (для слова "Проверить, выбран ли фильтр")
//
// Revision 1.21  2012/11/23 11:31:42  trofimov
// обновил словарь Filters.script
//
// Revision 1.20  2012/11/22 13:26:02  trofimov
// Обновил словарик, HLTCLike, добавил тест K400523622 с эталоном
//
// Revision 1.19  2012/11/06 09:08:03  selyankin
// добавил K371647463 с эталоном.
//
// Revision 1.18  2012/11/06 08:18:23  selyankin
// обновил Filters.script
//
// Revision 1.17  2012/11/06 07:56:11  selyankin
// обновил Filters.script
//
// Revision 1.16  2012/11/02 17:43:18  kostitsin
// [$407750239]
//
// Revision 1.15  2012/10/24 09:05:49  lulin
// - рефакторинг.
//
// Revision 1.14  2012/10/12 10:52:23  kostitsin
// [$398280432]
//
// Revision 1.13  2012/10/08 17:13:46  kostitsin
// Убрал слова:
// -сontrol:Visible,
// -сontrol:Click,
// -сontrol:GetText,
// -сontrol:CanFocus,
// -control:GetHandle
//
// Revision 1.12  2012/10/08 12:45:57  selyankin
// обновил функцию "Открыть фильтры и выбрать"
//
// Revision 1.11  2012/10/04 09:38:11  lulin
// - разобрался с дубликатами.
//
// Revision 1.10  2012/10/03 17:25:48  lulin
// - от работы с именами контролов переходим к работе с самими контролами.
//
// Revision 1.9  2012/04/20 06:21:24  lulin
// {RequestLink:356847447}
//
// Revision 1.8  2012/03/19 09:16:06  lulin
// {RequestLink:345636914}
//
// Revision 1.7  2011/12/23 15:15:23  lulin
// {RequestLink:318374910}
//
// Revision 1.6  2011/11/30 13:20:44  lulin
// {RequestLink:307232812}.
// - правим эталоны.
//
// Revision 1.5  2011/06/26 12:57:11  lulin
// {RequestLink:269085062}.
//
// Revision 1.4  2011/05/11 11:01:27  lulin
// {RequestLink:263293374}.
// - готовим рыбу для теста.
//
// Revision 1.3  2011/05/10 14:15:49  lulin
// {RequestLink:236719181}.
// №28.
//
// Revision 1.2  2011/05/06 15:49:38  lulin
// - делаем "предложения".
//
// Revision 1.1  2011/05/06 12:28:18  lulin
// {RequestLink:265410566}.
// - выделяем общий код.
//
