USES
 axiom:Flash
 axiom:DiffIterator
 axiom:ComboTree
 axiom:TextForm
 axiom:tb97Button
 axiom:StyleTable
 axiom:Tests
 axiom:StatusBar
 axiom:Integration
 axiom:RemindersLine
 axiom:форма
 axiom:контрол
 axiom:TNewBaseSearchForm
;

CONST mbOk 1
CONST mbYes 2
CONST mbNo 3

CONST "Серый цвет" 15790320

CONST первый 1
CONST второй 2
CONST третий 3

// TnsFileFormat = (ns_ffRTF, ns_ffTxt, ns_ffHTML, ns_ffXML, ns_ffEvd, ns_ffNull);
CONST ns_ffRTF 0
CONST ns_ffTxt 1
CONST ns_ffHTML 2
CONST ns_ffXML 3
CONST ns_ffEvd 4

CONST CF_TXT 1

: " и проверить наличие диалога с кнопкой" IN aProc INTEGER IN aButton
 aButton CASE 
  mbOk 
   wait:Ok
  mbYes 
   wait:Yes
  mbNo 
   wait:No
  DEFAULT 
   ERROR 'Неизвестная кнопка диалога'
 END
 TRY
  aProc DO
 FINALLY
  TRY
   waited:? ?ASSURE 'Не дождались диалога'
   // - убеждаемся, что диалог про конец поиска таки был
  EXCEPT
   "Сравнить текущее исключение с эталоном"
   DROP
   // - удаляем результат waited:? со стека, т.к. прилетела ересь 'Нарушен баланс скобок Wait'
   RAISE
  END 
 END
;

: "и проверить наличие диалога" IN aProc
 "{(aProc)} и проверить наличие диалога с кнопкой {(mbOk)}"
; 

: " и проверить наличие диалога с кнопкой Да" IN aProc
 "{(aProc)} и проверить наличие диалога с кнопкой {(mbYes)}"
;

: " и проверить наличие диалога с кнопкой Нет" IN aProc
 "{(aProc)} и проверить наличие диалога с кнопкой {(mbNo)}"
;

: " и проверить наличие диалога с кнопкой Ok" IN aProc
 "{(aProc)} и проверить наличие диалога с кнопкой {(mbOk)}"
;

: " и проверить наличие диалога с кнопкой Ок" IN aProc
 "{(aProc)} и проверить наличие диалога с кнопкой Ok"
;

VOID WORDWORKER "Убедиться, что был диалог с кнопкой 'Да' после выполнения"
 "{(@ ( WordToWork DO ) )} и проверить наличие диалога с кнопкой Да"
;

: " и проверить отсутствие диалога" IN aProc
 TRY
  "{(aProc)} и проверить наличие диалога"
 EXCEPT
  "Сравнить текущее исключение с эталоном"
 END 
;

PROCEDURE " и проверить отсутствие диалога с кнопкой Да" IN aProc
 TRY
  "{(aProc)} и проверить наличие диалога с кнопкой {(mbYes)}"
 EXCEPT
  "Сравнить текущее исключение с эталоном"
 END 
;

USES
 WordsTranslation.script
 @\SysUtils.script
 @\Controls.script
 @\Forms.script
 Controls.script
 Editor.script
;

OBJECT FUNCTION "Найти основное меню"
 "Найти окно по имени {(форма::MainMenuNew)}" =: Result
; // "Найти основное меню"

: "Найти далее"
 "Найти далее без проверки"
 "Сравнить абзац текущего редактора с эталоном"
; 

: "Найти далее и убедиться, что ничего не нашлось"
 "{(@ "Найти далее без проверки")} и проверить наличие диалога"
;

: "Удалось перевести фокус в оглавление?"
 "Удалось перевести фокус в {(контрол::ContentsTree)}?"
; 

: "Проверить, что удалось перевести фокус в оглавление"
 "Удалось перевести фокус в оглавление?" ?ASSURE 'Не удалось перевести фокус в оглавление'
; 

PROCEDURE "Проверить, что во вкладка Структура документа неактивна (нельзя перевести фокус)"
 "Удалось перевести фокус в оглавление?" ! ?ASSURE 'Удалось перевести фокус в оглавление'
;

: "Перевести фокус в оглавление"
 "Перевести фокус в {(контрол::ContentsTree)} на форме {(форма::Contents)}"
; 

: "Перевести фокус в комментарии"
 "Перевести фокус в {(контрол::lstComments)} на форме {(форма::Contents)}"
; 

: "Перевести фокус в закладки"
 "Перевести фокус в {(контрол::lstBookmarks)} на форме {(форма::Contents)}"
; 

: "Перевести фокус в панель контекстного поиска на вкладке Структура документа" 
 "Перевести фокус в {(контрол::ContextFilter)} на форме {(форма::Contents)}"
 "Дождаться переключения вкладок"
 focused:control:push pop:Component:Name 'InternalEditor' SameStr ?ASSURE 'Не удалось поставить фокус в оглавление'
 focused:control:push pop:object:ClassName 'TnscComboBoxWithFilter' SameStr ?ASSURE 'Не смоли встать в контекстный фильтр оглавления'
 // - здесь на самом деле нужна проверка, что фокус встал во вложенный редактор
; 

: "Во время фильтрации не должно быть ошибок"
 f1::WasBeep ! ?ASSURE 'Во время фильтрации били ошибки'
; 

USES
 F1ControlsDefinition.script
;

: "Проверить активность вкладки Предупреждение"
 OnTest
 "Перевести фокус в {(контрол::Viewer)} на форме {(форма::Warning)} типа {(Простое_предупреждение)}"
 // - тут надо проверить, что предупреждение таки открылось
 "Сравнить текст редактора {(контрол::Viewer:push)} с эталоном"
;

: "А активна ли вкладка предупреждения?"
 false Простое_предупреждение контрол::Viewer форма::Warning TryFocusOnForm
;

: "Открыть вкладку Предупреждение с жёлтой медали с часами"
 оп::Предупреждение_о_неактуальной_редакции_Показать_текст_предупреждения
 "А активна ли вкладка предупреждения?" !
 ? (
  // - тут обрабатываем ситуацию, когда вкладка только что спряталась
  оп::Предупреждение_о_неактуальной_редакции_Показать_текст_предупреждения
 )
; 

: "Открыть вкладку Предупреждение с жёлтой медали с восклицательным знаком"
 OnTest
 оп::Предупреждение_(юридическое)_Показать_текст_предупреждения
 "А активна ли вкладка предупреждения?" !
 ? (
  // - тут обрабатываем ситуацию, когда вкладка только что спряталась
  оп::Предупреждение_(юридическое)_Показать_текст_предупреждения
 )
; 

: "Открыта ли форма БП?"
 false 0 контрол::ContextEdit форма::NewBaseSearch TryFocusOnForm
;

: "Проверить, что открыта форма БП"
 "Открыта ли форма БП?" ?ASSURE 'Форма БП не открыта'
;

: "Проверить, что НЕ открыта форма БП"
 "Открыта ли форма БП?" ! ?ASSURE 'Форма БП ОТКРЫТА. А не должна бы'
;

USES
 MainBasic.script
;

: "В БП ищем контекст" STRING IN aString
 "Копировать в буфер строку {(aString)}"
 Если ( "Открыта ли форма БП?" ! ) то 
 // - проверяем, что форма БП - не открыта (чтобы не сбить текущую вкладку ручным вызовом)
  ( БП )
  // - иначе - открываем её
 иначе
  ( "Выделить весь текст в текущем редакторе" )
  // - выделяем содержимое редактора, чтобы перетереть его 
 Если ( aString НЕРАВНО '*' ) то
  ( "Вставить" )
 иначе
 ( "Ввести строку {(aString)}" )
 // "Ввести строку {(aString)}" долго вводить, сделал через Копировать-Вставить, правда костыль для * потребовался
 "Очистить буфер обмена"
 "Нажать {('Enter')}"
;

: "В БП ищем контекст по типу" STRING IN aString STRING IN aType
 VAR l_VG
 Если ( "Открыта ли форма БП?" ! ) то
 // - проверяем, что форма БП - не открыта (чтобы не сбить текущую вкладку ручным вызовом)
  ( БП )
  // - иначе - открываем её
 иначе
  ( "Выделить весь текст в текущем редакторе" )
  // - выделяем содержимое редактора, чтобы перетереть его
 "Ввести строку {(aString)}"
 //[ 'Для начала поиска выбираем вид "' aType '"' ] strings:Cat ToDo 
 // - ещё бы сделать нажатие на вкладку, но для этого надо уметь искать её по имени
 aType focused:control:push pop:Control:GetParentForm pop:Control:FindVGControlByName =: l_VG
 Если ( l_VG vg:control:GetIsChecked ) то
 // - если вкладка уже выбрана, то по SetIsChecked не произойдёт OnChange
   ( "Нажать {('Enter')}" )
  //aType vg:control:Click
  // - Click в БП не обрабатывается
 иначе 
  ( true l_VG vg:control:SetIsChecked )
 // - нажимаем на кнопку, соответствующую выбраному типу
 OnTest
 200 SLEEP
 // - шаманство, чтобы выставилось правильное значение в кнопке Ещё, наверное это как-то с триггерами связано
 OnTest
 //"Нажать {('Enter')}"
;

: "Жмём кнопку Искать раз" INTEGER IN aCount
 "{(aCount)} раз {(@ "Найти далее")}"
;

PROCEDURE "Открываем новостную ленту"
 0 wait:Choice
 TRY
  моп::Мониторинги_Новостная_лента
  OnTest
 FINALLY
  waited:? ?ASSURE 'Не дождались диалога!'
 END 
 "Дождаться переключения вкладок"
;

PROCEDURE "Открыть заполнение анкеты Прайм"
 1 wait:Choice
 TRY
  моп::Мониторинги_Новостная_лента
  OnTest
 FINALLY
  waited:? ?ASSURE 'Не дождались диалога!'
 END 
 "Дождаться переключения вкладок"
;

: "Проверить вкладку документа" IN aUserType
 "Перевести фокус в {(DocumentText)} на форме {(форма::Text)} типа {(aUserType)}"
 // - тут надо проверить, что вкладка таки открылась
 "Сравнить текст с эталоном"
;

: "Открыть вкладку" IN aProc IN aUserType
 aProc DO
 "Проверить вкладку {(aUserType)} документа"
;

: "Открываем справку"
 "Открыть вкладку {(@ оп::Документ_Справка_к_документу)} {(dftRelatedDoc)}"
;

WordAlias "Открываем Справку" "Открываем справку"

: "Открываем аннотацию"
 "Открыть вкладку {(@ оп::Документ_Аннотация)} {(dftAnnotation)}"
;

USES
 @\EditorCommon.script
;

: "Ищем в названии и в тексте" STRING IN aStr1 STRING IN aStr2
 OBJECT VAR l_QC
 ППР
 "Убедиться, что фокус в редакторе"
 focused:control:push >>> l_QC
 'AT_TEXT_NAME' aStr1 l_QC pop:QueryCard:SetAttribute
 'AT_TEXT_BODY' aStr2 l_QC pop:QueryCard:SetAttribute
 "Нажать Искать"
;

: "Ищем в названии" STRING IN aStr1
 OBJECT VAR l_QC
 ППР
 "Убедиться, что фокус в редакторе"
 focused:control:push >>> l_QC
 'AT_TEXT_NAME' aStr1 l_QC pop:QueryCard:SetAttribute
 //"Ввести {(aStr1)}"
 "Нажать Искать"
;

: "Перевести фокус в список"
 focused:control:push pop:Component:Name tvList ?!= ? (
  "Перевести фокус в {(tvList)} на форме {(форма::List)}"
 ) 
;

: "Открыть текущий документ списка"
 "Перевести фокус в список"
 "Нажать {('Enter')}"
 OnTest
; 

: "Открыть текущий документ списка и сравнить его с эталоном"
 "Открыть текущий документ списка"
 "Сравнить текст с эталоном"
;

: "Сравнить текст информации о списке с эталоном"
 "Сравнить текст редактора {(контрол::ListInfoViewer:push)} с эталоном"
;

: "Открыть информацию о списке"
 оп::Список_Справка_к_списку
 OnTest
 "Дождаться переключения вкладок"
 OnTest
; // "Открыть информацию о списке"

: "Проверить информацию о списке"
 "Открыть информацию о списке"
 "Сравнить текст информации о списке с эталоном"
;

: "Проверить информацию о списке и первый документ"
 "Проверить информацию о списке"
 "Перевести фокус в список"
 "Открыть текущий документ списка и сравнить его с эталоном"
;

: "Перевести фокус в документ"
 "Перевести фокус в {(DocumentText)} на форме {(Форма_документа)}"
 OnTest
;

: "Перевести фокус в правую редакцию"
 "Перевести фокус в {(DocumentText)} на форме {(форма::RightEdition)}"
;
 
: "Перевести фокус в левую редакцию"
 "Перевести фокус в {(DocumentText)} на форме {(форма::LeftEdition)}"
;

: "Перевести фокус в список редакций левой редакции"
 "Перевести фокус в {(контрол::EditionChoose)} на форме {(форма::LeftEdition)}"
;

: "Перевести фокус в список редакций правой редакции"
 "Перевести фокус в {(контрол::EditionChoose)} на форме {(форма::RightEdition)}"
;

: "Сравнить даты обеих редакций с эталоном"
 "Перевести фокус в список редакций левой редакции"
 контрол::EditionChoose:push pop:Control:Caption .
 "Перевести фокус в список редакций правой редакции"
 контрол::EditionChoose:push pop:Control:Caption .
;

: "Прокрутить документ от конца к началу"

 : "Достигли начала документа"
  "Убедиться, что фокус в редакторе"
  focused:control:push pop:Editor:AtTop
 ; 
 
 : "Не достигли начала документа"
  "Достигли начала документа" !
 ;
  
 "Установить фокус в документ"
 ProcessMessages 
 cc:LastPage
 ProcessMessages 
 VAR "Предельное количество" 
 800 >>> "Предельное количество"
 ПОКА ( "Не достигли начала документа" И ( "Предельное количество" >0 ) )
 BEGIN
  --! "Предельное количество"
  "Установить фокус в документ"
  cc:PrevPage
  ProcessMessages
 END
 "Предельное количество" >0 ?ASSURE 'Не добежали до начала документа'
 // - проверяем, что таки добежали до начала документа
;

: "Проверить, что текущая конфигурация стандартная"
 "Открыть список конфигураций и перевести туда фокус"
 TRY
  INTERFACE VAR l_Node
  TRY
   контрол::tvConfs:push tree:CurrentNode =: l_Node
   l_Node Node:Text 'Основная (активная)' SameStr ?ASSURE
    [ 'Похоже, что конфигурация не стандартная Текст ноды: ' l_Node Node:Text ]
  FINALLY
   nil =: l_Node
  END   
 FINALLY
  "Закрыть вложенные формы"
 END
; // "Проверить, что текущая конфигурация стандартная"

: "Сравнить список с эталоном" OBJECT IN Список

 Если ( Список ЯВЛЯЕТСЯ class::TvtLister ) то 
  ( Список pop:Control:Caption . )
 иначе
  ( 
   INTEGER VAR "Количество элементов"
   "Количество элементов" := ( Список tree:GetItemsCount )

   INTEGER VAR "Индекс элемента"
   "Индекс элемента" := 0
 
   "Количество элементов" раз (
    "Индекс элемента" Список tree:GetItem Node:Text "Заменить непечатаемые символы" .
    ++! "Индекс элемента"
   )
  )
; // "Сравнить список с эталоном"

: "Сравнить текущий список с эталоном"
 "Сравнить список {(focused:control:push)} с эталоном"
;

BOOLEAN FUNCTION "Расширенно найти ссылку в дереве" BOOLEAN IN aProc STRING IN aContext STRING IN aControl

 Result := НЕТ
 
 (
  STRING VAR l_Name
 
  focused:control:push pop:Component:Name =: l_Name
  ( l_Name РАВНО aControl ) ?ASSURE
   [ 'Почему то в фокусе ' l_Name ' а не ' aControl ]
 )

 WORDWORKER "Ищем ноду по контексту"
  INTEGER VAR "Предельное количество"
  "Предельное количество" := 500
 
  BOOLEAN VAR Сделано
  Сделано := НЕТ
 
  OBJECT VAR "Операция сравнения"
  Если ( aControl РАВНО контрол::tvConfs ) то 
   ( @ StartsStr =: "Операция сравнения" )
  иначе
   ( @ SameStr =: "Операция сравнения" )
   
  WORDWORKER равен STRING IN aContext
   aContext WordToWork DO "Операция сравнения" DO
  ; // равен
 
  INTERFACE VAR l_Node
  
  TRY  
   ПОКА ( НЕ Сделано И ( "Предельное количество" >0 ) )
   (
    --! "Предельное количество"
    l_Node := ( aControl byname:control:push tree:CurrentNode )
    
    STRING VAR l_Text
    l_Text := ( l_Node Node:Text )
    
    Если ( aContext равен l_Text ) то
     ( 
      Сделано := ДА
      Result := ДА
     )
    иначе
     ( 
      TRY
       WordToWork DO
      EXCEPT
       // - наверное добежали до конца дерева
       ДА >>> Сделано
      END 
     )   
   ) // ПОКА
  
  FINALLY 
   nil =: l_Node
  END
 ; // "Ищем ноду по контексту"
 
 : "Нажать на ссылку, если надо"
   aProc ? ( "Нажать {('Enter')}" )
   OnTest 
 ; // "Нажать на ссылку, если надо"
 
 "Ищем ноду по контексту" "Стрелка вниз"
 
 Если Result то
  "Нажать на ссылку, если надо"
 иначе 
  ( 
   Если ( aControl РАВНО контрол::tvConfs ) то (
    // - Заплатка для борьбы с непереключением конфигураций
    "Ищем ноду по контексту" "Стрелка вверх"
    Если Result то
     "Нажать на ссылку, если надо"
   ) // контрол::tvConfs РАВНО aControl
  ) // Result
; // "Расширенно найти ссылку в дереве"

PROCEDURE "Найти документ в списке" STRING IN aContext
 "Расширенно {(false)} найти ссылку {(aContext)} в дереве {(контрол::tvList)}" ?ASSURE
  'Не нашли нужный документ в списке'
; // "Найти документ в списке"

PROCEDURE "Найти документ в списке и открыть его" STRING IN aContext
 Если ( "Расширенно {(false)} найти ссылку {(aContext)} в дереве {(контрол::tvList)}" ) то
  ( "Нажать {('Enter')}" )
 иначе
  ( 'Документ в списке не найден!' . )
; // "Найти документ в списке"

PROCEDURE "Найти атрибут в дереве" STRING IN aContext STRING IN aControl
 Если ( "Расширенно {(false)} найти ссылку {(aContext)} в дереве {(aControl)}" ! ) то 
  ( 'Атрибут в дереве не найден!' . )
; // "Найти атрибут в дереве"

BOOLEAN FUNCTION "Перейти по ссылке в дереве" STRING IN aContext STRING IN aControl
 false =: Result
 "Расширенно {(true)} найти ссылку {(aContext)} в дереве {(aControl)}" ? (
  true =: Result
 )
; // Перейти по ссылке в дереве"

PROCEDURE "Найти ссылку в дереве и перейти по ней" STRING IN aContext STRING IN aControl
  "Расширенно {(true)} найти ссылку {(aContext)} в дереве {(aControl)}" ?ASSURE
  'Не нашли нужную ссылку'
; //  "Найти ссылку в дереве и перейти по ней"

PROCEDURE "Переключиться на конфигурацию через вкладку Конфигурации" STRING IN aContext

 "Открыть список конфигураций и перевести туда фокус"
 
 "Переместиться в начало дерева"
 
 Если ( "Перейти по ссылке {(aContext)} в дереве {(контрол::tvConfs)}" ! ) то
  ( "Открыть список конфигураций и перевести туда фокус"
  "Переместиться в начало дерева"
  "Сравнить текущий список с эталоном"
  "Закрыть список конфигураций"
  false ?ASSURE
   [ 'Не удалось переключить конфигурацию на :' aContext ] )
 иначе
  ( "Закрыть список конфигураций" )
  // - т.к. конфигурация могла быть активной и Enter мог не срабоать
  // "Перейти по ссылке {(aContext)} в дереве {(aControl)}" !
 "Дождаться переключения вкладок"
; 

PROCEDURE "Поработать с расширенной конфигурацией (переключились с использованием вкладки Конфигурации)" IN aProc
 "Переключиться на конфигурацию {('Расширенная')} через вкладку Конфигурации"
 TRY
  aProc DO
 FINALLY
  "Открыть список конфигураций и перевести туда фокус"
  // Это для того, чтобы фокус не потерять, а то он почему-то теряется
  "Переключиться на конфигурацию {('Основная')} через вкладку Конфигурации"
 END // TRY..FINALLY
; 

PROCEDURE "Сделать в расширенной конфигурации (переключились с использованием вкладки Конфигурации)" IN aProc
 aProc "Поработать с расширенной конфигурацией (переключились с использованием вкладки Конфигурации)"
; 

: "Вернуться к найденному"
 "Вернуться к найденному без проверки"
 "Сравнить абзац текущего редактора с эталоном"
;

: "Вернуться к найденному, что ничего не нашлось"
 false ?ASSURE 'Не реализовано'
 // - по-хорошему тут видимо надо курсор запоминать и сравнивать после попытки поиска
 // т.к. код, который написан ниже - не приводит к желаемому результату
 wait:Ok
 TRY
  "Вернуться к найденному без проверки"
 FINALLY 
  waited:? ?ASSURE 'Не было диалога про конец поиска'
  // - убеждаемся, что диалог про конец поиска таки был
 END
;

CONST
 cWaitDelta 300
 // см. Diff_Form cWaitDelta

: "Следующее изменение"
 оп::Редакция_Следующее_изменение
 cWaitDelta SLEEP
 OnTest
;

: "Предыдущее изменение"
 оп::Редакция_Предыдущее_изменение
 cWaitDelta SLEEP
 OnTest
;

USES
 DocumentProcessing.script
;

: "Проверить наличие комментария и удалить его" IN aProc
 aProc CheckCommentAndDeleteIfExists
; 

: "Открываем 2006 документ" 

 : "Таки открываем"
  "Открываем {(2006)}"
  cc:Down
  //cc:Down
 ;
 
 @ "Таки открываем" "Проверить наличие комментария и удалить его"
;


: "Вставляем любой комментарий в начало документа"
 "В начало документа"
 "Ввести {('любой комментарий')}"
 Ctrl-Z
;

: "Вставляем из буфера обмена любой комментарий в начало документа"
 "В начало документа"
 //cc:Down
 cc:Down
 cc:ExtendEnd
 cc:Copy
 "В начало документа"
 cc:Paste
 //Ctrl-Z
 //Ctrl-Z
 cc:Up
 cc:Up
 "Удалить текущий комментарий и проверить что он удалился"
 // - подчищаем за собой
;

: "Установить фокус во флеш"
 OnTest
 OBJECT VAR Parent
 focused:control:push pop:Control:GetAnotherParentForm =: Parent
 "Найти контрол {(DocumentFlash)} на форме {(Parent)}" pop:Control:SetFocus ?ASSURE
  'Не удалось установить фокус во флеш'
;

: "Проверить что номер кадра флеша равен" IN aNum
 DocumentFlash byname:control:push pop:flash:GetFrame РАВНО aNum ?ASSURE 'Номера кадров не совпадают'
;

USES
 DocumentNumbers.script
;

: "Открыть Гражданский кодекс"
 "Открываем {(ГК)}"
;

: "Открыть ГК"
 "Открываем {(ГК)}"
;

: "Открыть НК"
 "Открываем {(НК)}"
;

: "Открываем НК"
 "Открываем {(НК)}"
;

: "Сравнить обе редакции с эталоном"
 "Перевести фокус в правую редакцию"
 "Сравнить текст с эталоном"
 "Перевести фокус в левую редакцию"
 "Сравнить текст с эталоном"
;

: "Сравнить текущие абзацы обеих редакций с эталоном"

"Дождаться переключения вкладок"
 "Перевести фокус в правую редакцию"
 "Сравнить абзац текущего редактора с эталоном"
"Дождаться переключения вкладок"
 "Перевести фокус в левую редакцию"
 "Сравнить абзац текущего редактора с эталоном"
;

USES
 @\Mouse.script
;

PROCEDURE "Потянуть вертикальный скроллер контрола вниз" OBJECT IN aControl
 aControl pop:Control:VScrollerVisible ?ASSURE [ 'У контрола ' aControl pop:Component:Name ' нет вертикального скроллбара' ]
 VAR X
 VAR Y
 // Получаем верхний правый угол контрола
 "Померить ширину {(aControl)}" >>> X
 0 >>> Y
 // Переводим в координаты экрана
 "Привести координаты {( @ X @ Y )} для контрола {(aControl)} к экранным"
 // поправка на размер скроллера. Надо бы GetSystemMetrics использовать...или как там его
 X 10 - >>> X
 Y 25 + >>> Y
 "Установить курсор мыши по координатам {(X Y)}"
 Y 100 + >>> Y
 THREAD (
  "Зажать левую кнопку мыши"
  "Установить курсор мыши по координатам {(X Y)}"
  "Отпустить левую кнопку мыши"
 )
 50 SLEEP
; 

: "Перевести фокус в дерево терминов"
 "Перевести фокус в {('WordsTree')} на форме {(форма::Diction)}"
 OnTest
;

: "Перевести фокус в текст"
 "Перевести фокус в документ"
;

: "Проверить, что имя комментария в оглавлении поменялось"
 "Перевести фокус в комментарии"
 "Сравнить текущий список с эталоном"
; // "Проверить, что имя комментария в оглавлении поменялось"

: "Поставить на контроль"
 wait:No
 TRY
  TRY
   оп::Документ_Поставить_на_контроль
  EXCEPT
   // - давим ошибку от диалога о том, что документ таки был поставлен на контроль
   //   а по-хорошему надо сделать слово waitforsome:No:Ok
   wait:No
   TRY
    оп::Документ_Поставить_на_контроль
   FINALLY
    waited:? ?ASSURE 'Не дождались диалога!'
   END 
   // - это такая хитрая проверка, что документ таки поставился на контроль
   //   но по-хорошему надо просто сделать ручку для того, чтобы проверить на контроле документ или нет
  END
 FINALLY
  waited:? ? (
   // - документ уже был на контроле
  )
 END 
;

: "Снять с контроля"
 wait:Yes
 TRY
  оп::Документ_Поставить_на_контроль
 FINALLY
  waited:? ?ASSURE 'Не было подтверждения про снятие с контроля'
 END 
;

PROCEDURE "Выполнить с документом установленным на контроль" IN aProc IN aDoc 
 "Открываем {(aDoc)}"
 "Поставить на контроль"
 TRY
  aProc DO
 FINALLY 
  "Открываем {(aDoc)}" "Дождаться переключения вкладок"
  "Снять с контроля"
 END
;

: "Сравнить список изменённых параграфов с эталоном"
 //OnTest
 // http://mdp.garant.ru/pages/viewpage.action?pageId=296622673&focusedCommentId=296631645#comment-296631645
 // - если раскомментировать, то разные списки будут получаться гораздо реже
 OBJECT VAR l_Editor
 "Убедиться, что фокус в редакторе"
 focused:control:push >>> l_Editor
 ПОКА ( DocumentText DiffIterator:HasNext )
 BEGIN
  VAR l_ParaNum
  DocumentText DiffIterator:Next >>> l_ParaNum
  l_ParaNum .
  Если ( /*{ DocumentText }*/ l_ParaNum l_Editor pop:editor:GetParaByID ) то
   ( Para:Text . )
  иначе
  ( 'Параграф не найден' . )
 END
; // "Сравнить список изменённых параграфов с эталоном"

PROCEDURE "В левом окне из комбобокса выбрать редакцию с текстом" STRING IN aText
 OBJECT VAR l_Tree
 "Перевести фокус в список редакций левой редакции"
 VAR "Предельное количество" 
 100 >>> "Предельное количество"
 focused:control:push >>> l_Tree
 ПОКА ( l_Tree pop:ComboTree:CurrentNode Node:Text aText SWAP StartsStr ! И ( "Предельное количество" >0 ) )
 BEGIN
  --! "Предельное количество"
  "Нажать {('Down')}"
 END
 "Нажать {('Enter')}"
 "Перевести фокус в список редакций левой редакции"
 STRING VAR l_Text
 контрол::EditionChoose:push pop:Control:Caption >>> l_Text
 aText l_Text StartsStr ?ASSURE [ 'Выбралась неверная редакция: ' l_Text ]
 "Перевести фокус в список редакций правой редакции"
;

: "В левом окне из комбобокса выбрать редакцию с 15.08.2004 по 17.08.2004"
 "В левом окне из комбобокса выбрать редакцию с текстом {('15.08.2004 - 17.08.2004')}"
;

: "Закрываем форму контекстного поиска"
 "Вызываем форму контекстного поиска"
 // - ставим фокус или открываем форму
 "Нажать {('Esc')}"
;

: "Закрываем БП"
 "Перевести фокус в {(контрол::ContextEdit)} на форме {(форма::NewBaseSearch)} типа {(0)}"
 "Нажать {('Esc')}"
// БП
// "Нажать {('Esc')}"
;

USES
 Forms.script
;

PROCEDURE "Проверить, что форма БП одна"
 PROCEDURE Действия_с_контролом OBJECT IN aCtrl
  aCtrl ЯВЛЯЕТСЯ class::TNewBaseSearchForm ? (
   aCtrl pop:Form:FormID .
  )
 ; // Действия_с_контролом

 "Выполнить для всех контролов {("Главное окно")}" Действия_с_контролом 
;

: "Проверить наличие формы БП"
 "Проверить, что открыта форма БП"
 //'Проверить наличие формы БП' ToDo
;

: "Проверить, что попали в Новости-онлайн"
 OnTest
 форма::InternetAgent byname:control:push pop:Control:CanFocus ?ASSURE
  [ 
   'Не удалось перейти по интернет-ссылке. Текущая форма: ' 
   focused:control:push pop:Control:GetAnotherParentForm pop:object:ClassName 
  ] 
; // "Проверить, что попали в Новости-онлайн"

: "Проверить, что текущий контрол - браузер"
 "Проверить, что попали в Новости-онлайн"
; // "Проверить, что текущий контрол - браузер"

: "Проверить, что находимся в ОМ"
 OnTest
 контрол::ContextEdit:push pop:Control:CanFocus ?ASSURE 'Не удалось перейти в ОМ'
;

: "Нажатием F7 открываем ППР"
 ППР
 OnTest
;

: "Открываем Конституцию"
 "Открыть Конституцию"
;

: "Открываем вкладку Справка"
 "Открываем Справку"
;

/* {
: "Выполнить и если было исключение, то выполнить" IN aProc1 IN aProc2
 TRY
  aProc1 DO
 EXCEPT
  "Сравнить текущее исключение с эталоном"
  aProc2 DO
 END
;
} */

: "Боремся с плавающим оглавлением"
 ANYUSERTYPE форма::Contents vcm:FindForm ? (
  OBJECT VAR l_ContentsForm
  >>> l_ContentsForm
  OBJECT VAR l_Form
  l_ContentsForm pop:Control:GetAnotherParentForm =: l_Form
  l_Form "Объект существует?" ? (
   l_Form pop:form:FormStyle РАВНО fsStayOnTop ? (
   // - только если оглавление в плавающем состоянии
    l_Form "Узнать, виден ли контрол" ? (
     //l_Form pop:Component:Name .
     l_Form pop:Control:Hide
     //"Закрыть текущую вкладку"
    )
   )
  )
 )
;

: "Закрыть плавающее оглавление"
 "Боремся с плавающим оглавлением"
;

: "Перевести фокус в дерево редакций"
 true ANYUSERTYPE контрол::RedactionTree форма::Redactions TryFocusOnForm ?ASSURE 'Не удалось поставить фокус в дерево редакций'
;

: "Список редакций без перевода фокуса"
 "Боремся с плавающим оглавлением" 
 оп::Редакции_документа_Список_редакций
; // "Список редакций без перевода фокуса"

: "Список редакций"
 "Список редакций без перевода фокуса"
 OnTest
 "Перевести фокус в дерево редакций"
; // "Список редакций"

PROCEDURE "Открываем вкладку 'Текст документа' в синхронном просмотре списка"
 "Дождаться переключения вкладок"
 OBJECT VAR "Нужная кнопка"
 "Найти контрол {(контрол::bt_enSynchroView_ShowText)} на форме {("Главное окно")}" =: "Нужная кнопка" 
 "Нужная кнопка" "Объект существует?" ?ASSURE 'Не нашли кнопку Текст документа'
 "Нужная кнопка" "Кликнуть"
; // "Открываем вкладку 'Текст документа' в синхронном просмотре списка"

: "Открыть вкладку синхронного просмотра текста без сравнения с эталоном"
 //"Проверить вкладку {(dftDocSynchroView)} документа"
 //"Перевести фокус в {(DocumentText)} на форме {(Форма_документа)} типа {(dftDocSynchroView)}"
 true dftDocSynchroView DocumentText Форма_документа TryFocusOnForm ! ?
  ( true тип_формы::dftAnnotationSynchroView DocumentText Форма_документа TryFocusOnForm ?ASSURE 'Не удалось переключиться на вкладку синхронного просмотра документа' )
 оп::Синхронный_просмотр_Текст_документа
 OnTest
 "Дождаться переключения вкладок"
 // "Открываем вкладку 'Текст документа' в синхронном просмотре списка"
 true dftDocSynchroView DocumentText Форма_документа TryFocusOnForm ?ASSURE 'Таки не удалось переключиться на вкладку синхронного просмотра документа'
 "Дождаться переключения вкладок"
;

: "Открыть вкладку синхронного просмотра текста"
 "Открыть вкладку синхронного просмотра текста без сравнения с эталоном"
 "Сравнить текст с эталоном"
;

: "в поле 'Утрата силы' поставить" STRING IN aStr
 "Убедиться, что фокус в редакторе"
 'AT_LC_ABOLISHED_DATE' aStr focused:control:push pop:QueryCard:SetAttribute
;

: "в поле 'Слова в названии' ввести" STRING IN aStr
 "Убедиться, что фокус в редакторе"
 'AT_TEXT_NAME' aStr focused:control:push pop:QueryCard:SetAttribute
;

: "в поле 'Слова в тексте' ввести" STRING IN aStr
 "Убедиться, что фокус в редакторе"
 'AT_TEXT_BODY' aStr focused:control:push pop:QueryCard:SetAttribute
;

: "в поле 'Тип' ввести" STRING IN aStr
 "Убедиться, что фокус в редакторе"
 'AT_TYPE' aStr focused:control:push pop:QueryCard:SetAttribute
;

: "в поле 'Орган/Источник' ввести с операцией" STRING IN aStr INTEGER IN aL
 "Убедиться, что фокус в редакторе"
 aL 'AT_SOURCE' aStr focused:control:push pop:QueryCard:Attribute:SetWithLogicOperation
;

: "в поле 'Орган/Источник' ввести" STRING IN aStr
 "Убедиться, что фокус в редакторе"
 'AT_SOURCE' aStr focused:control:push pop:QueryCard:SetAttribute
;

: "в поле 'Вступление в силу' поставить" STRING IN aStr
 'AT_LC_IN_DATE' aStr focused:control:push pop:QueryCard:SetAttribute
;

: "в поле 'Искать в недействующих редакциях' поставить" STRING IN aStr
 'AT_EDITION' aStr focused:control:push pop:QueryCard:SetAttribute
;

: "в поле 'Страна' ввести" STRING IN aStr
 'AT_PHARM_COUNTRY' aStr focused:control:push pop:QueryCard:SetAttribute
;

: "Открыть вкладку Перевод"
 true dftTranslation DocumentText Форма_документа TryFocusOnForm ?ASSURE 'Не удалось переключиться на вкладку Перевод'
 OnTest
 "Дождаться переключения вкладок"
 "Сравнить текст с эталоном"
; // "Открыть вкладку Перевод"

: БАЗА STRING IN aStr
 'Нужно взять базу из: ' aStr Cat ToDo
; // БАЗА

: "Выбрать 'Текущая страница'"
 OBJECT VAR "Текущая страница"
 контрол::rbPrintCurrent 
  focused:control:push pop:Control:GetAnotherParentForm 
   pop:Control:FindControlByName =: "Текущая страница"
 //"Текущая страница" pop:control:Click
 //"Текущая страница" pop:RadioButton:Checked !
  "Текущая страница" pop:RadioButton:Checked := true
 OnTest 
 nil =: "Текущая страница"
 //'Выбрать "Текущая страница"' ToDo
; // "Выбрать 'Текущая страница'"

WORDWORKER "Вызвать диалог печати по CTRL-P и выполнить"
 
 : Действия
  WordToWork DO
  TRY
   TRY
    оп::Завершение_работы_Ок
   EXCEPT
    оп::Завершение_работы_Отмена
    "Дать системе перерисоваться"
    RAISE
   END 
  FINALLY
   "Дать системе перерисоваться"
  END 
 ; // Действия
 
 TRY
  @ "Ctrl-P" MODAL Действия
 FINALLY
  "Дать системе перерисоваться"
 END 
;

: "Вызвать диалог печати по CTRL-P, выбрать в области печати 'Текущая страница' и нажать 'Печать'"
 
 : Действия
  "Выбрать 'Текущая страница'"
 ; // Действия
 
 "Вызвать диалог печати по CTRL-P и выполнить" Действия
;

: "Проверяем, что в кнопке Ещё выбран тип" STRING IN aType
 //[ 'Проверяем, что в кнопке Ещё выбран тип "' aType '"' ] strings:Cat ToDo
 "Открыта ли форма БП?" ! ? (
  "Дождаться переключения вкладок"
 )
 "Проверить, что открыта форма БП"
 aType focused:control:push pop:Control:GetParentForm pop:Control:FindVGControlByName vg:control:GetIsChecked ?ASSURE [ 'Не выбран тип ' aType ]
;

: "Проверяем, что тип активен в панели БП" STRING IN aType
 "Проверяем, что в кнопке Ещё выбран тип {(aType)}"
; // "Проверяем, что тип активен в панели БП"

BOOLEAN FUNCTION "Проверяем, выбран ли тип информации ?" STRING IN aType
 false =: Result
 VAR l_VG
 aType "Контрол в фокусе" "Родительская форма контрола" "Найти VG-контрол по имени" =: l_VG
 l_VG "Узнать, выбран ли VG-контрол" =: Result
;

PROCEDURE "Сбрасываем вкладку БП в умолчательное состояние"
 "Контрол в фокусе" "Имя компонента" РАВНО контрол::ContextEdit ? (
  "Проверяем, выбран ли тип информации {('Все документы')}?" ! ? (
   БП
  )
 ) 
 // - пока так, за счёт ByUser
 // http://mdp.garant.ru/pages/viewpage.action?pageId=300026165&focusedCommentId=319489482#comment-319489482
;

PROCEDURE "Установить фокус в БП и сбросить ее в умолчательное состояние"
 "Установить фокус в БП после переключения баз"
 "Сбрасываем вкладку БП в умолчательное состояние"
;

PROCEDURE "Приготовиться к выполнению следующего теста"
 ОсновноеМеню 
 "Установить фокус в БП и сбросить ее в умолчательное состояние"
;

PROCEDURE "Посчитать количество кнопок для типов БП"
 'Количество кнопок с типами БП: ' 'Все документы' focused:control:push pop:Control:GetParentForm pop:Control:FindVGControlByName vg:control:CountSiblingLikeMe ToPrintable Cat .
 "Отделить текст в эталоне"
;

: "Список всех документов"
 ППР "Нажать Искать"
 //OnTest
;

: "Открыть вкладку Список редакций"
 "Список редакций"
;

: "Поставить фокус в дерево ситуаций второго уровня в Стандартной ППС"
 true тип_формы::astNone контрол::AttributeTree форма::TreeAttributeSelect TryFocusOnForm ?ASSURE 'Поставить фокус в дерево ситуаций второго уровня в Стандартной ППС'
;

: "Открыть любую редакцию в новом окне"
 "Перевести фокус в дерево редакций"
 "Открыть текущую редакцию в новом окне"
;

: "Сравнить список документов типа с эталоном" INTEGER IN aListType
 true aListType контрол::tvList форма::List TryFocusOnForm ?ASSURE 'Не удалось поставить фокус в список для сравнения с эталоном' 
 //"Перевести фокус в список"
 "Сравнить текущий список с эталоном"
; // "Сравнить список документов с эталоном"

: "Сравнить список документов с эталоном"
 "Перевести фокус в список"
 "Сравнить текущий список с эталоном"
; // "Сравнить список документов с эталоном"

: "Открываем первую пользовательскую вкладку"
 "Дождаться переключения вкладок"
 true тип_формы::lftUserCR1 tvList форма::List TryFocusOnForm ?ASSURE
  'Не удалось открыть первую пользовательскую вкладку' 
 OnTest
 "Дождаться переключения вкладок"
;

: "Открываем вторую пользовательскую вкладку"
 "Дождаться переключения вкладок"
 true тип_формы::lftUserCR2 tvList форма::List TryFocusOnForm ?ASSURE
  'Не удалось открыть вторую пользовательскую вкладку'
 OnTest
 "Дождаться переключения вкладок"
;

: "Открываем вкладку 'Судебная практика'"
 "Открываем первую пользовательскую вкладку"
;

: "Найти в документе строку" STRING IN aText
 : Действия
  "Поиск контекста"
  "Ввести строку {(aText)}"
  "Нажать {('Enter')}"
  OnTest
 ; // Действия

 "Выполнить {(@ Действия)} и восстановить фокус"
; // "Найти в документе строку" 

: "Ищем контекст и сравниваем с эталоном найденный абзац" STRING IN aText
 "Найти в документе строку {(aText)}"
 "Сравнить абзац текущего редактора с эталоном"
;

: "Выполняем . Проверяем, что комментарий таки удалился из базы и подчищаем за собой" IN aProc
 // --------------
 "Закрыть F1."
 aProc DO
 TRY
  "Проверяем отсутствие комментария в текущем редакторе"
 EXCEPT
  "Удалить текущий комментарий и проверить что он удалился"
  // - чистим за собой, чтобы другие тесты всё же прошли
  RAISE
 END 
 // http://mdp.garant.ru/pages/viewpage.action?pageId=280009251&focusedCommentId=321990725#comment-321990725
 // Читаем ВСЮ ветку
 // --------------
;

USES
 Reminders.script
;

: "Ставим указатель мыши на ссылку в баллоне синей медали о наличии консультаций"
 "Нажать на синюю медаль о наличии консультаций и проверить наличие баллона"
 "Установить фокус в баллон синей медаль о наличии консультаций"
 "Ставим указатель мыши на конец текущего параграфа редактора {(focused:control:push)} со смещением {(-20 -10)}"
;

: "Открыть структуру документа"
 BOOLEAN VAR l_Found
 true ANYUSERTYPE контрол::ContentsTree форма::Contents TryFocusOnForm =: l_Found
 
 l_Found ! ? (
  true ANYUSERTYPE контрол::lstExternalObjects форма::Contents TryFocusOnForm =: l_Found
 )
 
 l_Found ! ? (
  оп::Документ_Структура_документа
  OnTest
 )
 
 true ANYUSERTYPE контрол::ContentsTree форма::Contents TryFocusOnForm ! ? (
  true ANYUSERTYPE контрол::lstExternalObjects форма::Contents TryFocusOnForm ?ASSURE
   'Не смогли установить фокус в структуру документа' 
 )
;

: "Закрыть структуру документа" 
 BOOLEAN VAR l_Found
 true ANYUSERTYPE контрол::ContentsTree форма::Contents TryFocusOnForm =: l_Found
 l_Found ? (
  оп::Документ_Структура_документа
  OnTest
 )
;

INTEGER VAR g_TimerNum
//[EXECUTE] 
( 0 >>> g_TimerNum )

: "Померить время" IN aProc
 ++! g_TimerNum
 VAR l_TimerNumS
 g_TimerNum IntToStr >>> l_TimerNumS
 StartTimer
 TRY
  aProc DO
  application:ActionIdle
  // - чтобы перечитались данные прецедента
 FINALLY
  '' l_TimerNumS StopTimerEx
 END 
; // "Померить время"

: "Померить время и сравнить с эталоном" IN aProc
 ++! g_TimerNum
 VAR l_TimerNumS
 g_TimerNum IntToStr >>> l_TimerNumS
// VAR l_ScriptName
// script:FileName sysutils:ExtractFileName >>> l_ScriptName
 StartTimer
 TRY
  aProc DO
  application:ActionIdle
  // - чтобы перечитались данные прецедента
 FINALLY
//  l_ScriptName l_TimerNumS StopTimerEx
  //l_TimerNumS StopTimer
  '' l_TimerNumS StopTimerEx DROP
 END 
 [ 'Замер № ' l_TimerNumS '. Померить время и сравнить с эталоном' ] strings:Cat ToDo
; // "Померить время и сравнить с эталоном"

: "Проверить навигацию по ссылкам"
 "Перейти к следующей ссылке"
 "Сравнить выделенный текст текущего редактора с эталоном"
 "Перейти к следующей ссылке"
 "Сравнить выделенный текст текущего редактора с эталоном"
 "Перейти к предыдущей ссылке"
 "Сравнить выделенный текст текущего редактора с эталоном"
 //"Перейти по текущей ссылке"
 // - ссылка там в пустоту, поэтому - закомментировано
;

: "Тут приехала эмуляция изменения документа МГО"
 true DocumentText textform:SetNeedShowIntranetWarning
 OnTest
;

: "Нажать на ссылку в баллоне медали" STRING IN medal
 OBJECT VAR "Редактор из баллона"
 medal byname:control:push pop:Reminder:FindEditor =: "Редактор из баллона"
 "Редактор из баллона" "Объект существует?" ?ASSURE 'Редактор из баллона не найден'
 "Редактор из баллона" pop:editor:NextHyperlink
 "Редактор из баллона" pop:editor:JumpToHyperlink
; // "Нажать на ссылку в баллоне медали"

: "Нажать на ссылку в баллоне МГО"
 "Нажать на ссылку в баллоне медали {("Синяя медаль МГО")}"
; // "Нажать на ссылку в баллоне МГО"

: "В БП ищем контекст по типу и проверяем получившийся список" STRING IN aContext STRING IN aType
 "В БП ищем контекст {(aContext)} по типу {(aType)}"
 "Проверяем, что в кнопке Ещё выбран тип {(aType)}"
 "Проверить информацию о списке"
;

USES
 @\CommonSystem.script
;

: "Проверить, что форма БП вставлена в нужную зону"
 "Проверить, что открыта форма БП"
 
 VAR l_Form
 0 >>> l_Form
 
 ANYUSERTYPE форма::NewBaseSearch vcm:FindForm ?ASSURE 'Не нашли форму БП!'
 >>> l_Form
 l_Form "Напечатать иерархию вложенности контролов"
 l_Form "Проверить, что высоты контролов больше 0"
;

: "Ищем контекст и проверяем, что он нашёлся" STRING IN aContext
 VAR l_WasDialog
 false =: l_WasDialog
 wait:Ok
 TRY
  "Ищем контекст {(aContext)} и сравниваем с эталоном найденный абзац"
 FINALLY 
  TRY
   waited:? ? (
   // - убеждаемся, что диалог про конец поиска таки был
    true =: l_WasDialog
   )
  EXCEPT
   "Сравнить текущее исключение с эталоном"
   DROP
   // - удаляем результат waited:? со стека, т.к. прилетела ересь 'Нарушен баланс скобок Wait'
  END 
 END
 l_WasDialog ! ?ASSURE 'Контекст не найден'
;

: "Лекарственные средства, разрешённые к применению"
 моп::Инфарм_Список_выпускаемых_препаратов
 OnTest
; // "Лекарственные средства, разрешённые к применению"

: "Кнопка автораспахивания левого навигатора"
 OnTest
  
 OBJECT VAR "Форма в которую вставлено оглавление"
  focused:control:push pop:Control:GetAnotherParentForm =: "Форма в которую вставлено оглавление"
  
 OBJECT VAR "Основная форма приложения" 
  "Форма в которую вставлено оглавление" pop:Control:GetAnotherParentForm =: "Основная форма приложения"
   
 OBJECT VAR "Левый навигатор"
  контрол::LeftNavigator "Основная форма приложения"  pop:Control:FindControlByName =: "Левый навигатор"
 "Левый навигатор" "Объект существует?" ?ASSURE 'Не удалось найти левый навигатор'
  
 OBJECT VAR "Кнопка придочивания"
 'AUTOHIDEOFF' "Левый навигатор" pop:Control:FindControlByName =: "Кнопка придочивания"
 
 "Кнопка придочивания" "Объект существует?" ?ASSURE 'Не удалось найти кнопку придочивания левого навигатора'
 "Кнопка придочивания"
; // "Кнопка автораспахивания левого навигатора"

: "Сделать левый навигатор автораспахивающимся"
 OBJECT VAR l_DockButton
 
 "Кнопка автораспахивания левого навигатора" =: l_DockButton
 l_DockButton pop:TB97Button:Down ? (
  l_DockButton pop:Control:Click
 )
 OnTest
; // "Сделать левый навигатор автораспахивающимся"

: "Сделать левый навигатор НЕавтораспахивающимся"
 OBJECT VAR l_DockButton
 
 "Кнопка автораспахивания левого навигатора" =: l_DockButton
 l_DockButton pop:TB97Button:Down ! ? (
  l_DockButton pop:Control:Click
 )
 OnTest
; // "Сделать левый навигатор Неавтораспахивающимся"

CONST cBmpClose 'CLOSE'

PROCEDURE "Проверяем отсутствие крестика"

 OBJECT VAR "Форма плавающего навигатора"
 focused:control:push 
  pop:Control:GetAnotherParentForm 
   pop:Control:GetAnotherParentForm =: "Форма плавающего навигатора"

 OBJECT VAR "Кнопка закрытия"
 cBmpClose "Форма плавающего навигатора" pop:Control:FindControlByName =: "Кнопка закрытия"

 Если ( "Кнопка закрытия" "Объект не существует?" ) то
  ( false ?ASSURE [ 'Кнопка ' cBmpClose ' не была создана' ] )
 иначе
  ( "Кнопка закрытия" "Узнать, виден ли контрол" ! ?ASSURE 'Кнопка закрытия оглавления почему-то стала видимой' )
; // "Проверяем отсутствие крестика"

PROCEDURE "Проверяем отсутствие крестика непосредственно в текущей форме"

 OBJECT VAR "Текущий контрол"
  focused:control:push =: "Текущий контрол"
  
 "Текущий контрол" "Напечатать иерархию вложенности контролов"
 
 OBJECT VAR "Форма оглавления"
  "Текущий контрол" pop:Control:GetAnotherParentForm =: "Форма оглавления"
  
 OBJECT VAR "Объект в котором ищем кнопку закрытия"
  "Форма оглавления" =: "Объект в котором ищем кнопку закрытия"
  
 "Объект в котором ищем кнопку закрытия" "Напечатать иерархию вложенности контролов" 
  
 CONST BtnClose 'BtnClose'
 OBJECT VAR "Кнопка закрытия"
 BtnClose "Объект в котором ищем кнопку закрытия" pop:Control:FindControlByName =: "Кнопка закрытия"
 
 Если ( "Кнопка закрытия" "Объект существует?" ) то
  //false ?ASSURE [ 'Кнопка ' BtnClose ' не была создана' ]
  // - типа всё хорошо, не создана, ну и хер бы с ней
  ( "Кнопка закрытия" "Узнать, виден ли контрол" ! ?ASSURE 'Кнопка закрытия оглавления почему-то стала видимой' )
; // "Проверяем отсутствие крестика непосредственно в текущей форме"

PROCEDURE "Сделать вкладку на форме плавающей" STRING IN aControl STRING IN aForm
 "Перевести фокус в {(aControl)} на форме {(aForm)}"
 OBJECT VAR "Текущий контрол"
  focused:control:push =: "Текущий контрол"
  
 OBJECT VAR "Форма вкладки"
 "Текущий контрол" pop:Control:GetAnotherParentForm =: "Форма вкладки"
 "Форма вкладки" "Объект существует?" ?ASSURE 'Не нашли форму вкладки'
 
 "Форма вкладки" pop:Form:IsFloatingState ! ? (
  "Форма вкладки" pop:Control:Undock
  OnTest
  "Перевести фокус в {(aControl)} на форме {(aForm)}"
 )
; // "Сделать вкладку на форме плавающей"

PROCEDURE "Сделать вкладку на форме неплавающей" STRING IN aControl STRING IN aForm
 "Перевести фокус в {(aControl)} на форме {(aForm)}"
 OBJECT VAR "Текущий контрол"
 focused:control:push =: "Текущий контрол"
  
 OBJECT VAR "Форма вкладки"
 "Текущий контрол" pop:Control:GetAnotherParentForm =: "Форма вкладки"
 "Форма вкладки" "Объект существует?" ?ASSURE 'Не нашли форму вкладки'
 
 "Форма вкладки" pop:Form:IsFloatingState ? (
 
  OBJECT VAR "Форма плавающего навигатора"
  "Форма вкладки" pop:Control:GetAnotherParentForm =: "Форма плавающего навигатора"
  "Форма плавающего навигатора" "Объект существует?" ?ASSURE 'Не нашли форму плавающего навиатора'
  
  OBJECT VAR "Кнопка придочивания"
  'HIDELEFT' "Форма плавающего навигатора" pop:Control:FindControlByName =: "Кнопка придочивания"
  "Кнопка придочивания" "Объект существует?" ?ASSURE 'Не нашли кнопку придочивания'
  
  "Кнопка придочивания" pop:Control:Click
  
  OnTest
  "Перевести фокус в {(aControl)} на форме {(aForm)}"
 )
; // "Сделать вкладку на форме неплавающей"

PROCEDURE "Сделать вкладку меню плавающей"
 "Сделать вкладку {(контрол::NavigatorTree)} на форме {(форма::Navigator)} плавающей"
;

PROCEDURE "Сделать вкладку меню неплавающей"
 "Сделать вкладку {(контрол::NavigatorTree)} на форме {(форма::Navigator)} неплавающей"
;

PROCEDURE "Сделать оглавление плавающим"
 : X1
  "Сделать вкладку {(контрол::ContentsTree)} на форме {(форма::Contents)} плавающей"
 ;
 
 : X2
  "Сделать вкладку {(контрол::lstExternalObjects)} на форме {(форма::Contents)} плавающей"
 ;
 
 "Выполнить {(@ X1)} и если было исключение, то выполнить {(@ X2)}"
;

PROCEDURE "Сделать оглавление неплавающим"
 : X1
  "Сделать вкладку {(контрол::ContentsTree)} на форме {(форма::Contents)} неплавающей"
 ;
 
 : X2
  "Сделать вкладку {(контрол::lstExternalObjects)} на форме {(форма::Contents)} неплавающей"
 ;
 
 "Выполнить {(@ X1)} и если было исключение, то выполнить {(@ X2)}"
;

PROCEDURE "Перевести фокус в список внешних объектов"
 "Перевести фокус в {(контрол::lstExternalObjects)} на форме {(форма::Contents)}"
; // "Перевести фокус в список внешних объектов"

/* (*
WORDWORKER "Выполнить подавив исключение"
 VAR l_WasException
 false =: l_WasException
 "Выполнить {(@ ( WordToWork DO ) )} и если было исключение, то выполнить {(@ ( true =: l_WasException ) )}"
 l_WasException
  ?ASSURE [ 'Тест ' script:FileName ' почему-то стал проходить' ]
; // "Выполнить подавив исключение"
*) */

/* (*
WORDWORKER анти-тест
 VAR l_WasException
 false =: l_WasException
 "Выполнить {(@ ( WordToWork DO ) )} и если было исключение, то выполнить {(@ ( true =: l_WasException ) )}"
 l_WasException
  ?ASSURE [ 'Тест ' script:FileName ' почему-то стал проходить' ]
; // анти-тест
*) */

PROCEDURE "Проверить, что вкладка с атрибутами документа видимая"
 OBJECT VAR "Форма с атрибутами документа"
 nil =: "Форма с атрибутами документа"

 ANYUSERTYPE форма::Attributes vcm:FindForm ?ASSURE 'Не нашли форму с атрибутами!' =: "Форма с атрибутами документа"

 "Форма с атрибутами документа" "Проверить, что высоты контролов больше 0"
; // "Проверить, что вкладка с атрибутами документа видимая"

PROCEDURE "Открыть вкладку на всё окно"
 OBJECT VAR "Текущий контрол"
 OBJECT VAR "Текущая форма"
 OBJECT VAR "Кнопка открытия в текущем окне"
 
 focused:control:push =: "Текущий контрол"
 "Текущий контрол" pop:Control:GetAnotherParentForm =: "Текущая форма"
 'BtnOpen' "Текущая форма" pop:Control:FindControlByName =: "Кнопка открытия в текущем окне"
 
 "Кнопка открытия в текущем окне" pop:Control:Click
; // "Открыть вкладку на всё окно"

: "Установить фокус в атрибуты документа"
 false ANYUSERTYPE контрол::tvAttributes форма::Attributes TryFocusOnForm ?ASSURE
  'Не удалось поставить фокус в информацию о документе'
; // "Установить фокус в атрибуты документа"

: "Проверить, что дерево атрибутов документа не пустое"
 INTERFACE VAR l_Node
  контрол::tvAttributes:push tree:CurrentNode =: l_Node
 TRY 
  l_Node nil ?!= ?ASSURE 'Дерево атрибутов пустое'
 FINALLY
  nil =: l_Node
 END 
; // "Проверить, что дерево атрибутов документа не пустое"

: "Перейти по ссылке на в области" STRING IN aContext STRING IN aControl

 ОМ
 "Перевести фокус в {(aControl)} на форме {(форма::MainMenuNew)}"
 "Переместиться в начало дерева"
 
 "Перейти по ссылке {(aContext)} в дереве {(aControl)}" ?ASSURE 'Не удалось перейти по ссылке'
; // "Перейти по ссылке на в области"

: "Сохранить таблицу стилей и сравнить с эталоном"
 STRING VAR StylesFile
 script:FileName '.evs' sysutils:ChangeFileExt sysutils:ExtractFileName =: StylesFile
 StylesFile StyleTable:SaveToFile
 StylesFile '%' tests:CheckEtalon
; // "Сохранить таблицу стилей и сравнить с эталоном"

: "Выполнить с плавающей меню во вкладке и закрыть её" IN aProc
 : Действия
   "Сделать вкладку меню плавающей"
  TRY
    aProc DO
  FINALLY
    "Сделать вкладку меню неплавающей"
  END
 ; // Действия

 "Выполнить {(@ Действия )} с меню во вкладке и закрыть её"
; // "Выполнить с плавающей меню во вкладке и закрыть её"

: "Установить фокус в меню во вкладке"
 false ANYUSERTYPE контрол::NavigatorTree форма::Navigator TryFocusOnForm ?ASSURE
  'Не удалось установить фокус в меню во вкладке'
; // "Установить фокус в меню во вкладке"

: "А активна ли вкладка Меню?"
  false 0 контрол::NavigatorTree форма::Navigator TryFocusOnForm
; // "А активна ли вкладка Меню?"

: "Закрыть меню во вкладке после проверки" 
 "А активна ли вкладка Меню?" ? (
  "Установить фокус в меню во вкладке"
  "Закрыть меню во вкладке" 
 )
; // "Закрыть меню во вкладке после проверки" 

PROCEDURE "Сворачиваем дерево оглавления"
 "Открыть структуру документа"
 "Перевести фокус в оглавление"
 оп::Дерево_Свернуть_все
 "Переместиться в начало дерева"
; // "Сворачиваем дерево оглавления"

PROCEDURE "Спускаемся в дереве на уровень вниз"
 cc:TreeExpand
 "Стрелка вниз"
; // "Спускаемся в дереве на уровень вниз"

: "При помощи Shift выделяем элементов" IN aNum
 VAR l_Finish
 focused:control:push pop:Lister:Current aNum + >>> l_Finish // Подсчитываем конец выделения
 l_Finish focused:control:push pop:Lister:SelectWithShift  // Ну и выделяем
;

WordAlias "При помощи Shift выделяем элемент" "При помощи Shift выделяем элементов"
WordAlias "При помощи Shift выделяем элемента" "При помощи Shift выделяем элементов"

: "Построить список ссылок на фрагмент и сравнить его с эталоном"
 "Выделенные элементы - Ссылки на фрагмент"
 Если ( "Контрол в фокусе" РАВНО 'tvList : TnscDocumentListTreeView' ) то
  ( "Сравнить список документов с эталоном" )
 иначе
  ( false ?ASSURE [ 'Фокус почему-то не в списке, а в ' "Контрол в фокусе" "Имя компонента" ':' "Контрол в фокусе" pop:object:ClassName ]
  )
; // "Построить список ссылок на фрагмент и сравнить его с эталоном"

: "Сравнить историю навигации с эталоном"
 VAR l_Index
 0 =: l_Index
 vcm:History:GetBackCount LOOP ( 
  l_Index vcm:History:GetBackItem .
  ++! l_Index
 )
; // "Сравнить историю навигации с эталоном"

: "Сравнить историю навигации на кнопке Вперед с эталоном"
 VAR l_Index
 0 =: l_Index
 vcm:History:GetForwardCount LOOP ( 
  l_Index vcm:History:GetForwardItem .
  ++! l_Index
 )
; // "Сравнить историю навигации на кнопке Вперед с эталоном"

OBJECT FUNCTION "Найти саб-панель"
 контрол::SubPanel focused:control:push 
 pop:Control:GetAnotherParentForm 
 pop:Control:FindControlByName =: Result
 Result "Объект существует?" ?ASSURE 'Не нашли саб-панель'
;

WordAlias "Найти панель меток" "Найти саб-панель"

: "Установить указатель мыши на точку для вызова КМ для панели меток рядом с редактором" INTEGER IN X0 INTEGER IN Y0
 VAR x
 VAR y
 focused:control:push
 pop:editor:CursorCoordsToScreen >>> y >>> x
 x X0 + >>> x
 y Y0 + >>> y
 
 x y "Найти панель меток" pop:Control:ScreenToClient
;

: "Проверить, что в контекстном меню нет операции Сравнение редакций"
 "Сравнить контекстное меню с эталоном"
; // "Проверить, что в контекстном меню нет операции Сравнение редакций"

WORDWORKER "Временно выключен"
 'Временно выключен' ToDo
; // "Временно выключен"







: "Перевести фокус в дерево медицинских терминов"
 "Перевести фокус в {('WordsTree')} на форме {(форма::CommonDiction)}"
 OnTest
;

: "Перевести фокус в последние открытые документы"
 false ANYUSERTYPE контрол::tvLastOpenDocs форма::MainMenuNew TryFocusOnForm ?ASSURE
  'Не удалось перевести фокус в последние открытые документы'
;

: "в поле 'Орган/Источник' ОИЗ ввести" STRING IN aStr
 "Убедиться, что фокус в редакторе"
 'AT_SOURCE_REVIEW' aStr focused:control:push pop:QueryCard:SetAttribute
;

: "в поле 'Дата принятия С' ввести" STRING IN aStr
 "Убедиться, что фокус в редакторе"
 'AT_PUBLISHING_DATE' aStr focused:control:push pop:QueryCard:SetAttribute 
;

: "в поле 'Дата принятия ПО' ввести" STRING IN aStr
 "Убедиться, что фокус в редакторе"
 'AT_PUBLISHING_DATE#2' aStr focused:control:push pop:QueryCard:SetAttribute
;

: "Сохранить выделенный текст в формате" STRING INTEGER IN aFormat
 STRING VAR "Выделенный текст"
 "Убедиться, что фокус в редакторе"
 aFormat focused:control:push pop:editor:GetSelectionTextInFormat =: "Выделенный текст"
;

: "в поле 'Тип' ввести с операцией" STRING IN aStr INTEGER IN aL
 "Убедиться, что фокус в редакторе"
 aL 'AT_TYPE' aStr focused:control:push pop:QueryCard:Attribute:SetWithLogicOperation
;

CONST cPagesNotFound 'Не нашли область вкладок'

OBJECT FUNCTION "Найти область вкладок"

 : Действия OBJECT IN Контрол
   ( Контрол ЯВЛЯЕТСЯ class::TnscFormsPageControl )
   И ( Контрол pop:Component:Name РАВНО контрол::ChildZone )
   И ( Контрол "Узнать, виден ли контрол" )
   И ( Контрол "Родительский объект" "Узнать, виден ли контрол" )
   И ( Контрол "Родительский объект" "Родительский объект" "Узнать, виден ли контрол" )
//   И ( Контрол pop:control:Height БОЛЬШЕ 0 )
//   И ( Контрол "Родительский объект" pop:control:Height БОЛЬШЕ 0 ) 
   ? (
     Контрол =: Result
     "Закончить перебор контролов"
   )     
 ;

 nil =: Result
 2 раза "Дождаться переключения вкладок"
 focused:control:push pop:Control:GetTopParentForm "Выполнить для всех контролов" Действия
 
 Result "Объект не существует?" ? (
  2 раза "Дождаться переключения вкладок"
  focused:control:push pop:Control:GetTopParentForm "Выполнить для всех контролов" Действия
 )
 
 Result "Объект существует?" ?ASSURE cPagesNotFound
;

/*(* "Дождаться переключения вкладок"
 OBJECT VAR "Нужная форма"
 OBJECT VAR "Форма толкового словаря"
 focused:control:push 2 раза "Получить родительскую форму" =: "Форма толкового словаря"
//   "Форма толкового словаря" .

 Если ( "Контрол {("Форма толкового словаря")} является формой с именем {(форма::DictionContainer)}?" ) то
//   "Форма толкового словаря" =: "Нужная форма"
  ( "Найти контрол {(контрол::ChildZone)} на форме {("Форма толкового словаря")}" =: "Нужная форма"
  "Нужная форма" "Объект существует?" ?ASSURE 'Не нашли ChildZone в DictionContainer'
   0 "Нужная форма" pop:Control:GetControl =: "Нужная форма"
   "Нужная форма" "Объект существует?" ?ASSURE 'Не нашли вложенный контрол в ChildZone в DictionContainer' )
 иначе
  ( "Главное окно" =: "Нужная форма" )

 контрол::ChildZone "Нужная форма" pop:Control:FindControlByName =: Result
 Result "Объект существует?" ?ASSURE 'Не нашли область вкладок'
;*)*/

OBJECT FUNCTION "Найти окно атрибутов"
 "Найти окно по имени {('cfAttributeSelect')}" =: Result
;

: "Открыть по внешнему номеру" IN aNum
 aNum 100000 - =: aNum
 "Открываем {(aNum)}"
;

STRING FUNCTION CutNumbers STRING W-STRING IN "Текущая строка"

 '' =: Result
 
 CONST "Цифры" '1234567890'
 CHAR VAR "Символ"
 
 ПОКА ( "Текущая строка" WString:IsNil ! ) ( 
  WString:[]++! "Текущая строка"
  
  =: "Символ"
  
  "Цифры" "Символ" char:ToString WString:HasAnyOf ? BREAK
   
  Result "Символ" char:ToString Cat =: Result
 )
;

: "Поставить фокус в левую половину ААК"
 "Перевести фокус в {(контрол::Text)} на форме {(форма::Text)} типа {(тип_формы::dftAACLeft)}"
;

: "Поставить фокус в правую половину ААК"
 "Перевести фокус в {(контрол::Text)} на форме {(форма::Text)} типа {(тип_формы::dftAACRight)}"
; 

WordAlias "Перевести фокус в левую половину ААК" "Поставить фокус в левую половину ААК"

WordAlias "Перевести фокус в правую половину ААК" "Поставить фокус в правую половину ААК"

PROCEDURE "См. ежедневные поступления новых документов в разделе Новости онлайн"
 ОМ
 OBJECT VAR "Рубрикатор"
 "Перейти по ссылке на {('Новые поступления')} в области {(контрол::tvLawNews)}"
 focused:control:push pop:Control:GetAnotherParentForm =: "Рубрикатор"
 'NewDocLabel' "Рубрикатор" pop:Control:FindControlByName pop:Control:SetFocus ?ASSURE 'Не смогли установить фокус в рубрикатор!'
;

PROCEDURE "Сравнить оценку документа с эталоном"
 DocumentText document:LikeState .
;

PROCEDURE "Открываем Справку из меню"
 оп::Документ_Справка_к_документу
 "Дождаться переключения вкладок"
;

CONST ActivePageProperty 'ActivePage'

PROCEDURE "Сравнить с эталоном имя активной вкладки"
 OBJECT VAR "Область вкладок"
 "Найти область вкладок" =: "Область вкладок"
 "Область вкладок" pop:object:ClassName .
 "Напечатать иерархию вложенности контролов {("Область вкладок")}"
 ActivePageProperty "Область вкладок" pop:object:GetObjProp pop:Control:Caption .
; // "Сравнить с эталоном имя активной вкладки"

PROCEDURE "В области вкладок перейти на" STRING IN aTab
 OBJECT VAR PageControl 
 OBJECT VAR Page
 INTEGER VAR i
 "Найти область вкладок" =: PageControl

 Если ( ActivePageProperty PageControl pop:object:GetObjProp pop:Control:Caption РАВНО aTab ) то
  выходим

 0 >>> i
 ПОКА ДА (
  i PageControl pop:PageControl:PageByIndex >>> Page
  Если ( Page pop:Control:Caption aTab == ) то
   (
    i 'TabIndex' PageControl pop:object:SetOrdProp
    "Дождаться переключения вкладок"
    Если ( ActivePageProperty PageControl pop:object:GetObjProp pop:Control:Caption "НЕ РАВНО" aTab ) то 
     ( 
      false ?ASSURE 'Не получилось переключить вкладку'
     )
    Выходим
   )
  ++! i
  ( i БОЛЬШЕ 20 ) ?FAIL 'Что-то многовато вкладок'
 )
;

PROCEDURE "Перевести фокус в справку"
 "Перевести фокус в {(DocumentText)} на форме {(форма::Text)} типа {(dftRelatedDoc)}"
;

PROCEDURE "Сравнить первого ребёнка дерева с эталоном" STRING IN aList
 Если ( aList byname:control:push tree:CurrentNode nil ?!= ) то
  ( ПОКА ( aList byname:control:push tree:CurrentNode:IsExpanded )
  BEGIN
   "Стрелка вниз"
  END
  aList byname:control:push tree:CurrentNode Node:Text . )
 иначе
  ( 'Журнал работы пуст' . )
;

PROCEDURE "Открыть документ через диалог ввода номера" STRING IN aDoc
 @ ( "Нажать {('Alt+N')}" ) MODAL ( "Ввести {(aDoc)}" "Нажать {('Enter')}" )
;

PROCEDURE "Сравнить заголовок контрола с эталоном" OBJECT IN aControl
 "Дождаться переключения вкладок"
 aControl pop:Control:Caption .
;

: "Сравнить заголовок текущего контрола с эталоном"
 "Сравнить заголовок контрола {("Контрол в фокусе")} с эталоном"
;

CONST DocInfoTabCaption 'Информация о документе'

: "Открыть информацию о документе"
 OBJECT VAR "Область вкладок"
 "Найти область вкладок" =: "Область вкладок"
 ( ActivePageProperty "Область вкладок" pop:object:GetObjProp pop:Control:Caption "НЕ РАВНО" DocInfoTabCaption ) ? (
  оп::Документ_Информация_о_документе
 )
;

: "Закрыть информацию о документе"
 OBJECT VAR "Область вкладок"
 "Найти область вкладок" =: "Область вкладок"
 ActivePageProperty "Область вкладок" pop:object:GetObjProp pop:Control:Caption РАВНО DocInfoTabCaption ? (
  оп::Документ_Информация_о_документе
 )
;

WordAlias "Получить оценку документа" "Сравнить оценку документа с эталоном"

: "Проверить, что скроллера в левой части ААК нет"
 OBJECT VAR "Текущая форма"
 OBJECT VAR "Скроллер"
 "Найти окно {(форма::AACContainer)} по имени" =: "Текущая форма"
 "Найти контрол {(контрол::scrLeft)} на форме {("Текущая форма")}" =: "Скроллер"
 "Скроллер" "Узнать, виден ли контрол" ! ?ASSURE 'Скроллер виден, хотя не должен.'
 
 OBJECT VAR "Текущий контрол"
 "Найти контрол {(контрол::pnLeftEx)} на форме {("Текущая форма")}" =: "Текущий контрол"
 "Текущий контрол" pop:Control:VScrollerVisible ! ?ASSURE 'Внутренний скроллер виден, хотя не должен.'
;

OBJECT FUNCTION "Найти сплиттер в ААК"
 OBJECT VAR "Текущая форма"
 "Найти окно {(форма::AACContainer)} по имени" =: "Текущая форма"
 "Текущая форма" "Объект существует?" ?ASSURE 'Форма ААК-Текст не найдена'
 "Найти контрол {(контрол::pnLeftEx)} на форме {("Текущая форма")}" =: Result
 Result "Объект существует?" ?ASSURE 'Сплиттер в ААК-Текст не найден'
;

PROCEDURE "Выставить форме размеры ширину левой части ААК в и сделать" INTEGER IN formW INTEGER IN formH INTEGER IN aW OBJECT IN aProc

 PROCEDURE Действия
  
  OBJECT VAR "Сплиттер"
  "Найти сплиттер в ААК" =: "Сплиттер"

  INTEGER VAR width_left_aak
  "Сплиттер" "Померить ширину" =: width_left_aak
  aW "Сплиттер" "Установить ширину"
  TRY
   aProc DO
  FINALLY
   width_left_aak "Сплиттер" "Установить ширину"
  END
 ; // Действия
 
 "Выставить форме размеры {(formW formH)} и {(@ Действия)}"
;

PROCEDURE "Сравнить область вкладок с эталоном"
 
 : Действия
  "Найти область вкладок" pop:PageControl:GetAllPageCaptions .
 ; 
 
 "Дождаться переключения вкладок"
 //"Выполнить {(@ Действия)} обработав исключение {(cPagesNotFound)}"
 "Выполнить {(@ Действия)} и если было исключение, то выполнить {(@ NOP)}"
;

: "Сравнить список последних открытых документов с эталоном"
 "Перевести фокус в последние открытые документы"
 "Сравнить текущий список с эталоном"
;

: "Проверить иерархию вложенности текущего контрола"
 focused:control:push "Напечатать иерархию вложенности контролов"
;

: "Выполнить с базой" OBJECT IN aProc STRING IN aBase

 STRING VAR "Предыдущая база"
 STRING VAR "Новая база"
 
 "Получить пути к старой и новой базам {(aBase)}"
  =: "Новая база"
  =: "Предыдущая база"
 "Новая база" sysutils:DirectoryExists ?ASSURE
  [ 'Директория базы не существует: ' "Новая база" ] 
   
 [ "Новая база" '\' 'data.ndt' ] strings:Cat sysutils:FileExists ?ASSURE
  [ 'Похоже, что база не существует: ' "Новая база" ] 
 "Переключить базу на {("Новая база")}"
 TRY
  //"Новая база" .
  //"Предыдущая база" .
  aProc DO
 FINALLY
  "Переключить базу на {("Предыдущая база")}"
 END
;

: "Сравнить информацию о базе с эталоном"
 "Сравнить дату базы с эталоном"
 "Сравнить имя комплекта с эталоном"
 "Сравнить владельца комплекта с эталоном"
;

: "Кликнуть по скроллеру в левой половине ААК"
 OBJECT VAR "Текущая форма"
 OBJECT VAR "Скроллер"
 "Найти окно {(форма::AACContainer)} по имени" =: "Текущая форма"
 "Найти контрол {(контрол::scrLeft)} на форме {("Текущая форма")}" =: "Скроллер"
 "Скроллер" "Кликнуть"
;

: "Проверить, что в левой половине ААК скроллер есть"
 OBJECT VAR "Текущая форма"
 OBJECT VAR "Скроллер"
 "Найти окно {(форма::AACContainer)} по имени" =: "Текущая форма"
 "Найти контрол {(контрол::scrLeft)} на форме {("Текущая форма")}" =: "Скроллер"
 "Скроллер" "Узнать, виден ли контрол" ?ASSURE 'Скроллер не виден, хотя должен быть видимым.'
;

: "Сравнить текст обоих частей ААК с эталоном"
 "Перевести фокус в левую половину ААК"
 "Выделить всё"
 "Сравнить выделенный текст текущего редактора с эталоном"
 '-------------------------------------------------------' .
 "Перевести фокус в правую половину ААК"
 "Выделить всё"
 "Сравнить выделенный текст текущего редактора с эталоном"
;

FORWARD "Проверить видимость пунктов меню связанных с комментариями"
FORWARD "Проверить видимость пунктов меню связанных с сортировкой списка"

PROCEDURE "Сравнить с эталоном пункт главного меню" STRING IN aItem
 aItem РАВНО 'Документы' ? (
  "Проверить видимость пунктов меню связанных с комментариями"
  "Проверить видимость пунктов меню связанных с сортировкой списка"
 ) 
 aItem "Текущая активная вкладка" "Найти элементы меню на форме " "Сравнить меню с эталоном"
;

PROCEDURE "Переключиться на вкладку" STRING IN aName
 OBJECT VAR l_PageControl
 OBJECT VAR "Закладка"
 INTEGER VAR Ind
 INTEGER VAR X
 INTEGER VAR Y
 "Найти область вкладок" >>> l_PageControl
 aName l_PageControl pop:PageControl:FindPageByCaption =: Ind
 Ind l_PageControl pop:PageControl:PageByIndex =: "Закладка"
 "Закладка" "Объект существует?" ?ASSURE
  [ 'Не нашли вкладку ' aName ] 
  20 >>> X
 "Померить высоту {(l_PageControl)}" >>> Y
 Y 10 - >>> Y
 "Установить курсор мыши по координатам {(X Y)} относительно контрола {("Закладка")}"
 "Клик левой кнопкой мыши"
 OnTest
 // описание работы слова [$424387103]
; // "Переключиться на вкладку"

: "Поставить фокус в левую половину ААК-Содержания"
 true тип_формы::dftAACContentsLeft контрол::Text форма::Text TryFocusOnForm ?ASSURE 'Не смогли установить фокус в левую половину ААК-Содержания!'
;

: "Поставить фокус в правую половину ААК-Содержания"
 true тип_формы::dftAACContentsRight контрол::Text форма::Text TryFocusOnForm ?ASSURE 'Не смогли установить фокус в правую половину ААК-Содержания!'
; 

OBJECT FUNCTION "Найти форму ААК"
 "Найти окно по имени {(форма::AACContainer)}" =: Result
 Result "Объект существует?" ?ASSURE 'Форма ААК не найдена'
;

OBJECT FUNCTION "Найти плашку в ААК"
 контрол::edWriteToUs "Найти форму ААК" pop:Control:FindControlByName =: Result
 Result "Объект существует?" ?ASSURE 'Плашка не найдена'
;

: "Перейти по ссылке 'Напишите нам' в ААК"
 "Найти плашку в ААК" pop:editor:NextHyperlink
 "Найти плашку в ААК" pop:editor:JumpToHyperlink
;

: "Сравнить иконку элемента в списке с эталоном" INTEGER IN aItem STRING IN aList
 aItem aList byname:control:push tree:GetItemImageIndex .
;

: "Получить список в массив" IN aMassive

 INTERFACE VAR l_Node
 INTERFACE VAR l_Node_next
 BOOLEAN VAR Сделано
 НЕТ >>> Сделано

 aMassive := [ ]
 ПОКА ( НЕ Сделано )
 BEGIN
  контрол::tvList:push tree:CurrentNode =: l_Node
  l_Node Node:Text >>>[] aMassive
  "Стрелка вниз"
  контрол::tvList:push tree:CurrentNode =: l_Node_next
  ( l_Node_next Node:Text ) РАВНО ( l_Node Node:Text ) ? (
   ДА >>> Сделано
  )
 END
;

PROCEDURE "Проверить, что массив совпадает с массивом" IN aMass1 IN aMass2
 aMass1 aMass2 ArraysAreEqual ?ASSURE 'Массивы не совпадают'
;

: "Получить имя вкладки с индексом" INTEGER IN aItem
 aItem "Найти область вкладок" pop:PageControl:PageCaptionByIndex .
;

: "Построить список по первой ветке рубрикатора с историей"
 "Меню во вкладке"
 "Свернуть текущее дерево"
 "Переместиться в начало дерева"
 "Стрелка вниз"
 "Спускаемся в дереве на уровень вниз"
 "Нажать {('Enter')}"
 "Установить фокус в меню во вкладке"
 "Стрелка вниз"
 "Нажать {('Enter')}"
 "Установить фокус в меню во вкладке"
;

: "Получить имя текущего элемента дерева" STRING IN aControl
 INTERFACE VAR l_Node
 aControl byname:control:push tree:CurrentNode =: l_Node
 l_Node Node:Text .
;

PROCEDURE "Сравнить контекстное меню для контрола с эталоном" OBJECT IN aControl
 "Сравнить контекстное меню для контрола {(aControl)} для точки {(0 0)} с эталоном"
;

PROCEDURE "Вызвать из главного меню" STRING IN aItem
 aItem "Текущая активная вкладка" pop:form:FindMenuItem menuitem:Click
 "Дать системе перерисоваться"
;

PROCEDURE "Перевести фокус в поле 'Слова в тексте' в ППР"
 "Убедиться, что фокус в редакторе"
 'AT_TEXT_BODY' focused:control:push pop:QueryCard:Attribute:SetFocus
;

PROCEDURE "Перевести фокус в поле 'Тип' в ППР"
 "Убедиться, что фокус в редакторе"
 'AT_TYPE' focused:control:push pop:QueryCard:Attribute:SetFocus
;

PROCEDURE "Перевести фокус в поле 'Номер' в ППР"
 "Убедиться, что фокус в редакторе"
 'AT_REG_NUM' focused:control:push pop:QueryCard:Attribute:SetFocus
;

PROCEDURE "Перевести фокус в поле 'Дата принятия' в ППР"
 "Убедиться, что фокус в редакторе"
 'AT_PUBLISHING_DATE' focused:control:push pop:QueryCard:Attribute:SetFocus
;

PROCEDURE "Перевести фокус в поле 'Вид правовой информации' в ППР"
 "Убедиться, что фокус в редакторе"
 'AT_PREFIX' focused:control:push pop:QueryCard:Attribute:SetFocus
;

PROCEDURE "Перевести фокус в поле 'Искать в недействующих редакциях' в ППР"
 "Убедиться, что фокус в редакторе"
 'AT_EDITION' focused:control:push pop:QueryCard:Attribute:SetFocus
;

PROCEDURE "Построить список по первой ветке рубрикатора"
 "Меню во вкладке"
 "Свернуть текущее дерево"
 "Переместиться в начало дерева"
 "Стрелка вниз"
 2 раза "Спускаемся в дереве на уровень вниз"
 "Нажать {('Enter')}"
 "Закрыть меню во вкладке"
 "Перевести фокус в список"
;

PROCEDURE "Пролистать список поэлементно вниз"

 INTERFACE VAR l_Node
 INTERFACE VAR l_Node_next
 BOOLEAN VAR Сделано
 НЕТ >>> Сделано

 ПОКА ( НЕ Сделано )
 BEGIN
  контрол::tvList:push tree:CurrentNode =: l_Node
  "Стрелка вниз"
  контрол::tvList:push tree:CurrentNode =: l_Node_next
  ( l_Node_next Node:Text ) РАВНО ( l_Node Node:Text ) ? (
   ДА >>> Сделано
  )
 END
;

PROCEDURE "Сравнить развёрнутый список с эталоном" STRING IN aList
 "Развернуть текущее дерево"
 Если ( focused:control:push pop:object:ClassName 'TvtLister' SameText ) то
  ( aList byname:control:push pop:Control:Caption . )
 иначе
  ( INTERFACE VAR l_Node
   INTERFACE VAR l_Node_next
   BOOLEAN VAR Сделано
   НЕТ >>> Сделано

   ПОКА ( НЕ Сделано )
   BEGIN
    aList byname:control:push tree:CurrentNode =: l_Node
    l_Node Node:Text .
    "Стрелка вниз"
    aList byname:control:push tree:CurrentNode =: l_Node_next
    ( l_Node_next Node:Text ) РАВНО ( l_Node Node:Text ) ? (
     ДА >>> Сделано
    )
   END
 )
; // "Сравнить развёрнутый список с эталоном"

: "Сравнить дерево атрибутов модального окна с эталоном"
 "Обработать Enter модально" ( "Сравнить развёрнутый список {(контрол::AttributeTree)} с эталоном" )
;

PROCEDURE "Перенести элемент оглавления в текст" INTEGER IN aItem
 OBJECT VAR "Элемент оглавления"
 INTEGER VAR i_left
 INTEGER VAR i_top
 INTEGER VAR i_width

 "Сделать оглавление неплавающим"
 "Открыть структуру документа"
 "Проверить, что удалось перевести фокус в оглавление"
 focused:control:push =: "Элемент оглавления"
 aItem контрол::ContentsTree:push tree:GetItem:Left =: i_left
 aItem контрол::ContentsTree:push tree:GetItem:Top =: i_top
 aItem контрол::ContentsTree:push tree:GetItem:Width =: i_width
 i_top 5 + =: i_top
 i_left 25 + =: i_left
 i_width 2 * =: i_width

 "Установить курсор мыши по координатам {(i_left i_top)} относительно контрола {("Элемент оглавления")}"
 THREAD ( 1500 SLEEP 
  //i_width i_top "Элемент оглавления" pop:control:ClientToScreen mouse:SetCursorPosition
  "Установить курсор мыши по координатам {(i_width i_top)} относительно контрола {("Элемент оглавления")}"
  "Дать системе перерисоваться"
  "Отпустить левую кнопку мыши"
  "Дать системе перерисоваться"
 )
 "Зажать левую кнопку мыши"
;

: "Переключиться на вкладку в БП" STRING IN aType
 БП
 true aType focused:control:push pop:Control:GetParentForm pop:Control:FindVGControlByName vg:control:SetIsChecked
;

: "Вызвать диалог печати по CTRL-P, в поле 'Номера страниц' ввести и нажать 'Печать'" STRING IN aSym

 : Действия
  "Перевести фокус в {(контрол::edPrintInterval)} на форме {(форма::PrintDialog)}"
  "Ввести {(aSym)}"
 ;

 "Вызвать диалог печати по CTRL-P и выполнить" Действия
;

: "Вызвать диалог печати по CTRL-P, в поле 'Сделать копий' ввести и нажать 'Печать'" STRING IN aSym

 : Действия
  "Перевести фокус в {(контрол::edCopyCount)} на форме {(форма::PrintDialog)}"
  "Ввести {(aSym)}"
 ;

 "Вызвать диалог печати по CTRL-P и выполнить" Действия
;

PROCEDURE "Проверить, что в главном окне нет скроллера"
 //true 
 "Найти основное меню" pop:Control:VScrollerVisible ! ?ASSURE 'Скроллер виден, хотя не должен'
;
 
PROCEDURE "Проверить, что в главном окне есть скроллер"
 //true 
 "Найти основное меню" pop:Control:VScrollerVisible ?ASSURE 'Скроллер не виден, хотя должен'
;

INTEGER FUNCTION "Найти максимальное значение в массиве" ARRAY IN aMass
 Result := ( 0 aMass [i] )
 @ ( INTEGER IN anItem
  Если ( Result МЕНЬШЕ anItem ) то
   ( Result := anItem )
 ) aMass ITERATE
; // "Найти максимальное значение в массиве"

INTEGER FUNCTION "Найти минимальное значение в массиве" ARRAY IN aMass
 Result := ( 0 aMass [i] )
 @ ( INTEGER IN anItem
  Если ( Result БОЛЬШЕ anItem ) то
   ( Result := anItem )
 ) aMass ITERATE
; // "Найти минимальное значение в массиве"

INTEGER FUNCTION "Найти среднее значение в массиве" ARRAY IN aMass
 INTEGER VAR sum
 INTEGER VAR aver
 0 @ + aMass ITERATE =: sum
 sum aMass Array:Count / =: aver
 aver =: Result 
;

PROCEDURE "Получить максимальное, минимальное и среднее значения для массива" IN aMass
 INTEGER VAR max
 INTEGER VAR min
 INTEGER VAR aver
 "Найти максимальное значение в массиве {(aMass)}" =: max
 "Найти минимальное значение в массиве {(aMass)}" =: min
 "Найти среднее значение в массиве {(aMass)}" =: aver
 [ 'Max = ' max IntToStr ] strings:Cat .
 [ 'Min = ' min IntToStr ] strings:Cat .
 [ 'Average = ' aver IntToStr ] strings:Cat .
; // "Получить максимальное, минимальное и среднее значения для массива"

: "Установить фокус в контекстный фильтр вкладки Меню"
 "Перевести фокус в {(контрол::ContextFilter)} на форме {(форма::Navigator)}"
;

: "Скопировать одно слово в буфер"
 cc:ExtWordRight
 "Копировать"
;

: "Переход к следующему термину с фокусом в тексте"
 "Перевести фокус в дерево терминов"
 "Переходим к следующему термину"
 "Перевести фокус в документ"
;

PROCEDURE "Сравнить заголовок окна оболочки с эталоном"
 "Сравнить с эталоном заголовок контрола {("Главное окно")}"
;

PROCEDURE "Закрыть форму по крестику" STRING IN aForm

 OBJECT VAR "Текущая форма"
 "Найти контрол {(aForm)} на форме {("Главное окно")}" =: "Текущая форма"
 "Текущая форма" "Объект существует?" ?ASSURE [ 'Не удалось найти форму ' aForm ]

 OBJECT VAR "Крестик"
 'BtnClose' "Текущая форма" pop:Control:FindControlByName =: "Крестик"
 "Крестик" "Объект существует?" ?ASSURE 'Не удалось найти кнопку закрытия'

 "Крестик" "Кликнуть"
; // "Закрыть форму по крестику"

PROCEDURE "Померить минимальную ширину правой и левой частей ААК"
 OBJECT VAR "Левая часть ААК"
 OBJECT VAR "Правая часть ААК"
 "Найти контрол {(контрол::pnLeftEx)} на форме {("Главное окно")}" =: "Левая часть ААК"
 "Левая часть ААК" "Объект существует?" ?ASSURE 'Не найдена левая часть ААК'

 "Найти контрол {(контрол::pnRightEx)} на форме {("Главное окно")}" =: "Правая часть ААК"
 "Правая часть ААК" "Объект существует?" ?ASSURE 'Не найдена правая часть ААК' 

 INTEGER VAR width_form
 "Главное окно" "Померить ширину" =: width_form
 INTEGER VAR width_aak
 "Левая часть ААК" "Померить ширину" =: width_aak

 TRY
  0 "Левая часть ААК" "Установить ширину"
  [ 'Минимальная ширина левой части ААК = ' ( "Левая часть ААК" "Померить ширину" ) IntToStr ] strings:Cat .
  width_form "Левая часть ААК" "Установить ширину"
  [ 'Минимальная ширина правой части ААК = ' ( "Правая часть ААК" "Померить ширину" ) IntToStr ] strings:Cat .
 FINALLY
  width_aak "Левая часть ААК" "Установить ширину"
 END
; // "Померить минимальную ширину правой и левой частей ААК"

: "Очистить историю"
 vcm:History:GetBackCount раз "Удалить последний элемент истории"
;

: "Поставить на контроль и выполнить" IN aProc
 "Поставить на контроль"
 TRY
  aProc DO
 FINALLY
  "Снять с контроля"
 END
;

//WordAlias "тест с падением" анти-тест

PROCEDURE "Сравнить ПЗ с эталоном"

 PROCEDURE Действия OBJECT IN aControl

  PROCEDURE Действия1 OBJECT IN aControl
   aControl ЯВЛЯЕТСЯ class::TnscTasksPanelTreeView ? (
    aControl pop:Control:SetFocus ?ASSURE 'Не смогли установить фокус в ПЗ!'
    "Переместиться в начало дерева"
    //aControl pop:control:Name .
    aControl "Сравнить список с эталоном"
   )
  ;

  '' .
  aControl pop:Control:Caption .
  '---------------' .
  aControl EnumerateControls Действия1
 ;
 
 ПЗ
 TRY
  OBJECT VAR "Панель_задач"
  форма::TasksPanel "Главное окно" pop:Control:FindControlByName =: "Панель_задач"
  контрол::tpvMain "Панель_задач" pop:Control:FindControlByName =: "Панель_задач"
  "Панель_задач" EnumerateControls Действия
 FINALLY
  "Закрыть вкладку ПЗ"
 END
; // "Сравнить ПЗ с эталоном"

: "Установить закладку на документ"
 : Действия
  OBJECT VAR "Форма сохранения в МД"
  OBJECT VAR "Кнопка ОК"
  focused:control:push 2 раза "Получить родительскую форму" =: "Форма сохранения в МД"
  "Форма сохранения в МД" "Объект существует?" ?ASSURE 'Не нашли форму сохранения в МД'
  контрол::bt_enResult_opOk "Форма сохранения в МД" pop:Control:FindControlByName =: "Кнопка ОК"
  "Кнопка ОК" "Кликнуть"
 ;

 3 раза "Дождаться переключения вкладок"
 @ ( оп::Документ_Установить_закладку... ) MODAL ( Действия )
; // "Установить закладку на документ"

PROCEDURE "Закрыть баллон медали" STRING IN aNameReminder
 ОМ
 aNameReminder byname:control:push pop:Reminder:Visible ? (
 aNameReminder byname:control:push pop:Reminder:Click
 aNameReminder byname:control:push pop:Reminder:FindEditor pop:Control:SetFocus ?ASSURE 'Не удалось поставить фокус в редактор баллона'
 OBJECT VAR "Форма баллона"
 focused:control:push 2 раза ( "Получить родительскую форму" ) =: "Форма баллона"
 OBJECT VAR "Крестик баллона"
 'CloseButton' "Форма баллона" pop:Control:FindVGControlByName =: "Крестик баллона"
 "Крестик баллона" vg:control:Click )
;

PROCEDURE "Закрыть синюю медаль документов на контроле"
 "Закрыть баллон медали {("Синяя медаль документов на контроле")}"
 "Закрыть вкладку Документы на контроле"
;

PROCEDURE "Открыть список документов с комментариями"
 "Мои документы"
 "Развернуть текущее дерево"
 TRY
  "Перейти по ссылке {('Документы с комментариями пользователя')} в дереве {(контрол::FoldersTree)}" ?ASSURE
   'Не перешли по ссылке Документы с комментариями пользователя'
  "Перевести фокус в список"
 FINALLY
  "Закрыть вкладку Мои документы"
 END
; // "Открыть список документов с комментариями"

: "Пункт меню нажат?" OBJECT IN anItem
 'Checked' anItem pop:object:GetOrdProp РАВНО 0 !
;

WORDWORKER "Выполнить с пунктом меню 'сортировка списка'"
 VAR Item
 'Документы' "Текущая активная вкладка" pop:form:FindMenuItem =: Item
 1 Item menuitem:GetItem =: Item
 application:ActionIdle
 Item "Пункт меню нажат?"
 Item
 WordToWork DO
;

: "Проверить видимость пунктов меню связанных с сортировкой списка"
 "Выполнить с пунктом меню 'сортировка списка'" ( BOOLEAN IN aVisible OBJECT IN anItem )
;

WORDWORKER "Выполнить с пунктом меню 'информация об изменениях документа'"
 VAR Item
 'Документы/Комментарии' "Текущая активная вкладка" pop:form:FindMenuItem =: Item
 1 Item menuitem:GetItem =: Item
 application:ActionIdle
 Item "Пункт меню нажат?"
 Item
 WordToWork DO
;

: "Проверить видимость пунктов меню связанных с комментариями"
 "Выполнить с пунктом меню 'информация об изменениях документа'" ( BOOLEAN IN aVisible OBJECT IN anItem )
;

: "Включить информацию об изменениях документа"
 "Выполнить с пунктом меню 'информация об изменениях документа'" ( BOOLEAN IN aVisible OBJECT IN anItem aVisible ! ? ( anItem menuitem:Click )
 'Включить информацию об изменениях документа' РАВНО ( anItem menuitem:GetCaption ) ?ASSURE 'Не правильный пункт меню (не включаем)!' )
;

: "Выключить информацию об изменениях документа"
 "Выполнить с пунктом меню 'информация об изменениях документа'" ( BOOLEAN IN aVisible OBJECT IN anItem aVisible  ? ( anItem menuitem:Click )
 'Выключить информацию об изменениях документа' РАВНО ( anItem menuitem:GetCaption ) ?ASSURE 'Не правильный пункт меню (не выключаем)!' )
;

: "Выполнить с включёнными версионными комментариями" IN aProc
 "Выполнить с пунктом меню 'информация об изменениях документа'" ( Если ( BOOLEAN IN aVisible OBJECT IN anItem aVisible ) то
  ( aProc DO )
 иначе
  ( "Включить информацию об изменениях документа"
  TRY
   aProc DO
  FINALLY
   "Перевести фокус в текст"
   "Выключить информацию об изменениях документа"
  END
 ) )
; // "Выполнить с включёнными версионными комментариями"

: "Выполнить с выключенными версионными комментариями" IN aProc
 "Выполнить с пунктом меню 'информация об изменениях документа'" ( Если ( BOOLEAN IN aVisible OBJECT IN anItem aVisible ! ) то
  ( aProc DO )
 иначе
  ( "Выключить информацию об изменениях документа"
   TRY
    aProc DO
   FINALLY
    "Перевести фокус в текст"
    "Включить информацию об изменениях документа"
   END
 ) )
; // "Выполнить с выключенными версионными комментариями"

: "Нажать в текущем редакторе на ссылку на графическую копию"
  VAR Editor
  VAR x
  VAR y
  "Стрелка вверх"
  focused:control:push >>> Editor
  Editor pop:editor:ParaCoordsToScreen >>> y >>> x
  x 5 + >>> x
  y 5 - >>> y
  x y mouse:SetCursorPosition
  "Клик левой кнопкой мыши"
;

: "Перейти на элемент свёрнутого списка" INTEGER IN aItem
 оп::Дерево_Свернуть_все
 aItem 1 - раз "Стрелка вниз"
;

: "Открываем НК из ОМ"
 ОМ
 "Перевести фокус в {(контрол::tvReferences)} на форме {(форма::MainMenuNew)}"
 "Найти ссылку {('Кодексы Российской Федерации')} в дереве {(контрол::tvReferences)} и перейти по ней"
 "Нажать {('Enter')}"
;

: "Обновить главное меню приложения"
 "Список всех документов"
 "Дать системе перерисоваться"
 "Проверить видимость пунктов меню связанных с сортировкой списка"
 // - ХАК! это чтобы пункты про сортировку обновить
;

PROCEDURE "Выставить форме размеры ширину навигатора в и сделать" INTEGER IN formW INTEGER IN formH INTEGER IN aW OBJECT IN aProc

 PROCEDURE Действия

  INTEGER VAR width_navigator
  контрол::LeftNavigator:push "Померить ширину" =: width_navigator
  aW контрол::LeftNavigator:push "Установить ширину"
  TRY
   aProc DO
  FINALLY
   width_navigator контрол::LeftNavigator:push "Установить ширину"
  END
 ; // Действия
 
 "Выставить форме размеры {(formW formH)} и {(@ Действия)}"
; // "Выставить форме размеры ширину навигатора в и сделать"

OBJECT FUNCTION "Левый навигатор"
 "Найти контрол {(контрол::LeftNavigator)} на форме {("Текущая активная вкладка")}" =: Result
 Result "Объект существует?" ?ASSURE 'Не удалось найти левый навигатор'
; // "Левый навигатор"

OBJECT FUNCTION "Правый навигатор"
 "Найти контрол {(контрол::RightNavigator)} на форме {("Главное окно")}" =: Result
 Result "Объект существует?" ?ASSURE 'Не удалось найти правый навигатор'
;

OBJECT FUNCTION "Кнопка свертывания " OBJECT IN aNavigator
 "Дать системе перерисоваться"
 'HIDELEFT' aNavigator pop:Control:FindControlByName =: Result
 Result "Объект существует?" ?ASSURE 'Не удалось найти кнопку свертывания навигатора'
;

OBJECT FUNCTION "Кнопка свертывания левого навигатора"
 "Кнопка свертывания {("Левый навигатор")}" =: Result
;

OBJECT FUNCTION "Кнопка свертывания правого навигатора"
 "Кнопка свертывания {("Правый навигатор")}" =: Result
;

PROCEDURE "Сделать левый навигатор свернутым"
 "Левый навигатор" "Померить ширину" 31 != ? (
  "Кнопка свертывания левого навигатора" "Кликнуть"
 )
 "Дать системе перерисоваться"
; // "Сделать левый навигатор свернутым"

PROCEDURE "Сделать левый навигатор развернутым"
 "Левый навигатор" "Померить ширину" 31 == ? (
  "Кнопка свертывания левого навигатора" "Кликнуть"
 )
 "Дать системе перерисоваться"
; // "Сделать левый навигатор развернутым"

PROCEDURE "Сделать правый навигатор свернутым"
 "Правый навигатор" "Померить ширину" 31 != ? (
  "Кнопка свертывания правого навигатора" "Кликнуть"
 )
 "Дать системе перерисоваться"
;

PROCEDURE "Сделать правый навигатор развернутым"
 "Правый навигатор" "Померить ширину" 31 == ? (
  "Кнопка свертывания правого навигатора" "Кликнуть"
 )
 "Дать системе перерисоваться"
;

: "Запомнить ширину левого навигатора и выполнить" IN aProc

 VAR aWidht 
 "Левый навигатор" "Померить ширину" >>> aWidht 
 TRY
   aProc DO
 FINALLY
  aWidht "Левый навигатор" "Установить ширину"
 END
; // "Запомнить ширину левого навигатора и выполнить"

: "Убедиться, что БП присутствует на форме и померить его высоту" OBJECT IN aForm

 OBJECT VAR "Базовый поиск"

 "Проверить, что открыта форма БП"
 "Найти контрол {(контрол::BaseSearchPanel)} на форме  {(aForm)}" =: "Базовый поиск"
 "Проверить, что контрол {("Базовый поиск")} видимый"
 "Базовый поиск" pop:Control:Height .
;

: "Сравнить левую часть ААК-Содержания с эталоном"
 "Поставить фокус в левую половину ААК-Содержания"
 "Выделить всё"
 "Сравнить выделенный текст текущего редактора с эталоном"
 ; // "Сравнить левую часть ААК-Содержания с эталоном"

: "Сравнить правую часть ААК-Содержания с эталоном"
 "Поставить фокус в правую половину ААК-Содержания"
 "Выделить всё"
 "Сравнить выделенный текст текущего редактора с эталоном"
 ; // "Сравнить правую часть ААК-Содержания с эталоном"

 : "Сравнить текст обеих частей ААК-Содержания с эталоном"
  "Сравнить левую часть ААК-Содержания с эталоном"
  '-------------------------------------------------------' .
  "Сравнить правую часть ААК-Содержания с эталоном"
 ; // "Сравнить текст обоих частей ААК-Содержания с эталоном"

BOOLEAN FUNCTION "Имеет ли документ на контроле статус изменён?" INTEGER IN aItem
( aItem контрол::UnderControlList:push tree:GetItemImageIndex РАВНО 8 ) =: Result
; // "Имеет ли документ на контроле статус изменён?"

: "Убедиться, что документ на контроле имеет статус изменён" INTEGER IN aItem
 "Установить фокус в {(контрол::UnderControlList:push)}"
 "Переместиться в начало дерева"
 aItem раз "Стрелка вниз"
 "Имеет ли документ {(aItem)} на контроле статус изменён?" ?ASSURE 'Документ на контроле не имеет статуса изменён'
; // "Убедиться, что документ на контроле имеет статус изменён"

: "Поставить на контроль, подавив  Нарушен баланс скобок Wait"
 TRY
   "Поставить на контроль"
 EXCEPT
   DROP
   // - удаляем результат со стека, т.к. прилетела ересь 'Нарушен баланс скобок Wait'
 END 
;  // "Поставить на контроль, подавив  Нарушен баланс скобок Wait"

: "Удалить документ с вкладки Документы на контроле, подавив  Нарушен баланс скобок Wait"
 TRY
  "Ответить один раз Да для {(@ "Нажать Del")}"
 EXCEPT
   DROP
   // - удаляем результат со стека, т.к. прилетела ересь 'Нарушен баланс скобок Wait'
 END 
; // "Удалить документ с вкладки Документы на контроле, подавив  Нарушен баланс скобок Wait"

VOID WORDWORKER "Открыть документ для установки комментария и выполнить" INTEGER IN aDoc 
 "Открываем {(aDoc)}"
 TRY
  ( WordToWork DO )
 FINALLY 
  "Открываем {(aDoc)}"
  "В документе не должно быть комментариев"
 END
;

PROCEDURE "Установить фокус в контекстный фильтр списка Инфарма"
 OBJECT VAR "Контекстный фильтр"
 "Найти контрол {('InternalEditor')} на форме {("Главное окно")}" =: "Контекстный фильтр"
 "Установить фокус в {("Контекстный фильтр")}"
 ; // "Установить фокус в контекстный фильтр списка Инфарма"

PROCEDURE "Список всех препаратов"
 "Поиск лекарственного средства"
 "Нажать Искать"
;

PROCEDURE "Проверить доступность кнопки" STRING IN aControl
 OBJECT VAR l_Control
 aControl "Главное окно" pop:Control:FindControlByName =: l_Control
 l_Control pop:Control:Enabled .
; // "Проверить доступность кнопки"

: "Установить курсор мыши на ссылку в плашке ААК"
 VAR x
 VAR y
 "Найти плашку в ААК" pop:editor:ParaEndCoordsToScreen >>> y >>> x
 x 40 - >>> x
 y 15 - >>> y
  x y mouse:SetCursorPosition
; // "Установить курсор мыши на ссылку в плашке ААК"

PROCEDURE "Клик по встроенному скроллеру редактора" OBJECT IN anEditor
 anEditor ЯВЛЯЕТСЯ class::TnscEditor ?ASSURE
  [ 'Фокус не в редакторе, а в ' anEditor pop:Component:Name ':' anEditor pop:object:ClassName ] 
 anEditor pop:Control:VScrollerVisible ? (
  VAR X
  VAR Y
  VAR W
  VAR H
  anEditor pop:Control:Width >>> W
  anEditor pop:Control:Height >>> H
  W 5 - >>> X
  H 2 / >>> Y
  //X Y anEditor pop:control:ClientToScreen >>> Y >>> X
  //X Y mouse:SetCursorPosition
  "Установить курсор мыши по координатам {(X Y)} относительно контрола {(anEditor)}"
  "Клик левой кнопкой мыши"
 )
; // "Клик по встроенному скроллеру редактора"

PROCEDURE "Клик по встроенному скроллеру редактора в фокусе"
 "Клик по встроенному скроллеру редактора {(focused:control:push)}"
;

 : "в поле 'Вид правовой информации' ввести" STRING IN aStr
  "Убедиться, что фокус в редакторе"
  'AT_PREFIX' aStr focused:control:push pop:QueryCard:SetAttribute
 ; // "в поле 'Вид правовой информации' ввести"

 : "Выполнить в списке документов с комментарями" IN aProc
  "Мои документы"
  "Развернуть текущее дерево"
   TRY 
    "Найти ссылку {('Документы с комментариями пользователя')} в дереве {(контрол::FoldersTree)} и перейти по ней"
    "Перевести фокус в список"
    aProc DO
   FINALLY
    "Закрыть вкладку Мои документы"
   END
 ; // "Выполнить в списке документов с комментарями" 

BOOLEAN FUNCTION "Имеет ли расширенная конфигурация признак измененности?"
 ( 1 контрол::tvConfs:push tree:GetItemImageIndex РАВНО 2 ) =: Result
 ; // "Имеет ли расширенная конфигурация признак измененности?"

 : "Убедиться, что расширенная конфигурация имеет признак измененности"
 "Установить фокус в {(контрол::tvConfs:push)}"
 "Имеет ли расширенная конфигурация признак измененности?" ?ASSURE 'Расширенная конфигурация не имеет признака измененности'
 ; //"Убедиться, что расширенная конфигурация имеет признак измененности"

 : "Убедиться, что расширенная конфигурация не имеет признака измененности"
 "Установить фокус в {(контрол::tvConfs:push)}"
 "Имеет ли расширенная конфигурация признак измененности?" ! ?ASSURE 'Расширенная конфигурация имеет признак измененности'
 ; //"Убедиться, что расширенная конфигурация не имеет признака измененности"

: "Перевести фокус в поле 'Запрос в службу Правовой поддержки онлайн' в ППО"
  "Убедиться, что фокус в редакторе"
  'AT_LAW_SUPPORT_TEXT' focused:control:push pop:QueryCard:Attribute:SetFocus
 ; // "Перевести фокус в поле 'Запрос в службу Правовой поддержки онлайн' в ППО"

: "Ищем в тексте КЗ Инфарма контекст" STRING IN aStr1
 "Поиск лекарственного средства"
 "Убедиться, что фокус в редакторе"
 OBJECT VAR l_QC
 focused:control:push >>> l_QC
 'AT_PHARM_TEXT' aStr1 l_QC pop:QueryCard:SetAttribute
 "Нажать Искать"
; // "Ищем в тексте КЗ Инфарма контекст" STRING IN aStr1

 : "Сохранить текущий объект в Мои документы и выполнить" IN aProc

  : Действия
   OBJECT VAR "Форма сохранения в МД"
   OBJECT VAR "Кнопка ОК"
   focused:control:push 2 раза "Получить родительскую форму" =: "Форма сохранения в МД"
   "Форма сохранения в МД" "Объект существует?" ?ASSURE 'Не нашли форму сохранения в МД'
   контрол::bt_enResult_opOk "Форма сохранения в МД" pop:Control:FindControlByName =: "Кнопка ОК"
   "Кнопка ОК" "Кликнуть"
  ; // Действия

   : Удаляем_объект
    3 раза "Дождаться переключения вкладок"
    "Дать системе перерисоваться"
    "Развернуть текущее дерево"
    "Стрелка вниз"
    "Ответить один раз Да для {(@ "Нажать Del")}"
   ; // Удаляем_список

 3 раза "Дождаться переключения вкладок"
 @ (  "Сохранить в Мои документы" ) MODAL ( Действия )
 TRY
  "Дождаться переключения вкладок"
  aProc DO
 FINALLY
  "Дать системе перерисоваться"
  "Открыть мои документы и выполнить {(@ Удаляем_объект )}"
 END
; // "Сохранить текущий объект в Мои документы и выполнить"

: "Установить фокус в контекстный фильтр ТС"
 "Перевести фокус в {(контрол::ContextFilter)} на форме {(форма::Diction)}"
; // "Установить фокус в контекстный фильтр ТС"

PROCEDURE "Проверить, что введено в контекстый фильтр"
 OBJECT VAR "Контекстный фильтр"
 "Найти контрол {('InternalEditor')} на форме {("Текущая активная вкладка")}" =: "Контекстный фильтр"
 "Контекстный фильтр" pop:Control:Caption .
; // "Проверить, что введено в контекстый фильтр"

: "Сравнить название текущего термина с эталоном"
 INTERFACE VAR l_Node
 контрол::WordsTree:push tree:CurrentNode =: l_Node
 l_Node Node:Text .
; //"Сравнить название текущего термина с эталоном"

: "Померить левые отступы для контрола" OBJECT IN aControl
 aControl pop:editor:GetLeftIndentDelta .
 aControl "Померить отступ слева" .
; // "Померить левые отступы для контрола"

: "Проверить доступность кнопки в модальном окне" STRING IN aControl
 OBJECT VAR "Модальная форма"
 focused:control:push pop:Control:GetAnotherParentForm =: "Модальная форма"
 OBJECT VAR l_Control
 aControl "Модальная форма" pop:Control:FindControlByName =: l_Control
 l_Control pop:Control:Enabled .
; // "Проверить доступность кнопки в модальном окне"
 
OBJECT FUNCTION "Видимый элемент статусбара" INTEGER IN aItem OBJECT IN aStatusBar
 OBJECT VAR l_Item
 INTEGER VAR I
 INTEGER VAR l_VisibleIndex
 
 I := 0
 l_VisibleIndex := 0
 
 aStatusBar StatusBar:OrderedControlsCount раз (
  l_Item := ( I aStatusBar StatusBar:OrderedControl )
  Если ( l_Item "Узнать, виден ли контрол" ) то
   (
    Если ( l_VisibleIndex РАВНО aItem ) то 
     (
      Result := l_Item
      Выходим
     )
    ++! l_VisibleIndex
   )
  ++! I
 )
; // "Видимый элемент статусбара"

: "в поле 'Статус регистрации' ввести с операцией" STRING IN aStr INTEGER IN aL
 "Убедиться, что фокус в редакторе"
 'AT_PHARM_REG_STATUS' focused:control:push pop:QueryCard:Attribute:SetFocus
 aL 'AT_PHARM_REG_STATUS' aStr focused:control:push pop:QueryCard:Attribute:SetWithLogicOperation
;  // "в поле 'Статус регистрации' ввести с операцией"

: "Проверить, доступно ли изменение логического условия для поля КЗ" STRING IN aStr
 "Убедиться, что фокус в редакторе"
 aStr  focused:control:push pop:QueryCard:Attribute:IsLogicOperationEnabled .
;  // "Проверить, доступно ли изменение логического условия для поля КЗ"

: "Проверить, какое логическое условие введено для поля КЗ" STRING IN aStr
 "Убедиться, что фокус в редакторе"
 aStr  focused:control:push pop:QueryCard:Attribute:GetLogicOperation .
;  //  "Проверить, какое логическое условие введено для поля КЗ"

WORDWORKER "Для всех видимых элементов статусбара выполнить" OBJECT IN "Строка статуса"
 OBJECT VAR "Элемент строки статуса"
 INTEGER VAR "Индекс элемента"
 INTEGER VAR "Число контролов"

 "Индекс элемента" := 0
 "Число контролов" := ( "Строка статуса" StatusBar:OrderedControlsCount )
// --! "Число контролов"
 "Число контролов" раз (
  "Элемент строки статуса" := ( "Индекс элемента" "Строка статуса" StatusBar:OrderedControl )
  "Элемент строки статуса" "Узнать, виден ли контрол" ? (
   "Элемент строки статуса" WordToWork DO
  )
  ++! "Индекс элемента"
 )
; // "Для всех видимых элементов статусбара выполнить"

: "Вызвать Список редакций из статусной строки и сделать" IN aProc

  : Действия
   OnTest
   "Перевести фокус в дерево редакций"
   aProc DO
   OnTest
  ; // Действия
 
  : "Открываем Список редакций из статусной строки"
    : Ищем_нужную_кнопку OBJECT IN l_It 
     l_It "Заголовок контрола" РАВНО 'Выбрать другие редакции' ? (
      @ ( l_It "Кликнуть" ) MODAL Действия
     )
    ; // Ищем_нужную_кнопку
   "Для всех видимых элементов статусбара {(контрол::StatusBar:push)} выполнить" Ищем_нужную_кнопку
  ; // "Открываем Список редакций из статусной строки"
 "Открываем Список редакций из статусной строки"
; // "Вызвать Список редакций из статусной строки и сделать"

: "Вызвать Список редакций из статусной строки"
 "Вызвать Список редакций из статусной строки и сделать {(@ NOP)}"
; // "Вызвать Список редакций из статусной строки"

PROCEDURE "Открываем вкладку 'Комментарии' в синхронном просмотре списка"
 "Дождаться переключения вкладок"
 OBJECT VAR "Нужная кнопка"
 "Найти контрол {(контрол::bt_enSynchroView_ShowUserCRList2)} на форме {("Главное окно")}" =: "Нужная кнопка" 
 "Нужная кнопка" "Объект существует?" ?ASSURE 'Не нашли кнопку Комментарии'
 "Нужная кнопка" "Кликнуть"
 OnTest
 "Дождаться переключения вкладок"
; // "Открываем вкладку 'Комментарии' в синхронном просмотре списка"

 : "Открыть сохраненный объект из Моих документов и выполнить" IN aProc
  "Мои документы"
  "Развернуть текущее дерево"
  TRY
   "Стрелка вниз"
    "Нажать {('Enter')}"
   aProc DO
  FINALLY
   "Закрыть вкладку Мои документы"
  END
 ; // "Открыть список документов с комментариями"

OBJECT FUNCTION "Найти сплиттер в ААК-содержании"
 OBJECT VAR "Текущая форма"
 "Найти окно {(форма::AACContentsContainer)} по имени" =: "Текущая форма"
 "Текущая форма" "Объект существует?" ?ASSURE 'Форма ААК-Содержание не найдена'
 "Найти контрол {(контрол::pnLeftEx)} на форме {("Текущая форма")}" =: Result
 Result "Объект существует?" ?ASSURE 'Сплиттер в ААК-Содержании не найден'
; // "Найти сплиттер в ААК-содержании"

INTEGER FUNCTION "Померить ширину левой части ААК-Содержания"
 OBJECT VAR "Сплиттер"
 "Найти сплиттер в ААК-содержании" =: "Сплиттер"
 "Сплиттер" "Померить ширину" >>> Result
;

 : "Выполнить над свернутой группой КЗ" IN aProc STRING IN aStr
  ППР
  BOOLEAN VAR l_Status
  OBJECT VAR l_QC
  "Убедиться, что фокус в редакторе"
  focused:control:push >>> l_QC
  aStr l_QC pop:QueryCard:Attribute:GetCollapsed >>> l_Status
  aStr l_QC pop:QueryCard:Attribute:GetCollapsed ? (
   aStr true l_QC pop:QueryCard:Attribute:SetCollapsed
  )
  aProc DO 
  aStr l_Status ! l_QC pop:QueryCard:Attribute:SetCollapsed
 ; // "Выполнить над свернутой группой КЗ"

VOID WORDWORKER "Открыть документ из Журнала работы и выполнить" IN aDoc
 "Очистить журнал работы"
 "Открываем {(aDoc)}"
 ОМ
 "Открыть журнал работы"
 2 раза ( "Спускаемся в дереве на уровень вниз" )
 "Нажать {('Enter')}"
 ( WordToWork DO )
;

: "Нажать кнопку Отмена в Настройке конфигурации"
 OBJECT VAR "Отмена"
 OBJECT VAR "Модальная форма"
 focused:control:push pop:Control:GetAnotherParentForm =: "Модальная форма"
 "Найти контрол {(контрол::bt_enResult_opCancel)} на форме {("Модальная форма")}" =: "Отмена"
 "Отмена" "Объект существует?" ?ASSURE 'Не нашли кнопку Отмена'
 "Отмена" "Кликнуть"
; // "Нажать кнопку Отмена в Настройке конфигурации"

PROCEDURE "Кликаем кнопку Ок мышкой"
 OBJECT VAR "Модальная форма"
 OBJECT VAR "Кнопка Ок"
 "Контрол в фокусе" "Нижняя форма" =: "Модальная форма"
 "Найти контрол {(контрол::bt_enResult_opOk)} на форме {("Модальная форма")}" =: "Кнопка Ок"
 "Установить курсор мыши по координатам {( 5 5 )} относительно контрола {("Кнопка Ок")}"
 "Клик левой кнопкой мыши"
;

: "Закрыть форму БП"
 "Открыта ли форма БП?" ? (
  "Перевести фокус в {(контрол::ContextEdit)} на форме {(форма::NewBaseSearch)} типа {(0)}"
  "Закрыть вложенные формы"
 )
; // "Закрыть форму БП"

OBJECT FUNCTION "Вкладка синхронного просмотра документа"
 "Открыть вкладку синхронного просмотра текста без сравнения с эталоном"
 "Дождаться переключения вкладок"
 контрол::ChildZonePanel "Главное окно"  pop:Control:FindControlByName =: Result
 Result "Объект существует?" ?ASSURE 'Вкладка синхронного просмотра не найдена'
; // "Вкладка синхронного просмотра документа"

PROCEDURE "Вывести окно оболочки на первый план"
 "Главное окно" pop:Control:Handle wnd:SetForeground
; // "Вывести окно оболочки на первый план"

: "Убедиться, что контрол класса" OBJECT IN aControl STRING IN aClass
 aControl ЯВЛЯЕТСЯ aClass ?ASSURE [ 'Контрол относится к другому классу: ' aControl pop:object:ClassName ', а не: ' aClass ]
; // "Убедиться, что контрол класса"

OBJECT FUNCTION "Панель задач"
 OBJECT VAR "Панель_задач"
 форма::TasksPanel "Главное окно" pop:Control:FindControlByName =: "Панель_задач"
 контрол::tpvMain "Панель_задач" pop:Control:FindControlByName =: Result
; // "Панель задач"


WORDWORKER "Выполнить с редактором стилей"
 @ "Редактор стилей" MODAL ( WordToWork DO )
 "Дать системе перерисоваться"
;

PROCEDURE "Нажать на кнопку контекстного фильтра"
 OBJECT VAR "Кнопка контекстного фильтра"
 "Найти контрол {('ContextFilterButton')} на форме {("Главное окно")}" =: "Кнопка контекстного фильтра"
 "Кнопка контекстного фильтра" "Объект существует?" ?ASSURE 'Не нашли кнопку контекстного фильтра'
 "Кнопка контекстного фильтра" "Кликнуть"
; // "Нажать на кнопку контекстного фильтра" 

INTEGER FUNCTION "Количество открытых вкладок Хрома"

0 >>> Result

 : "Перебор дочерних окон" INTEGER IN hChild
  ( 
   ( 
    ( hChild wnd:GetClassName РАВНО 'Static' ) 
    ИЛИ ( hChild wnd:GetClassName РАВНО 'Chrome_RenderWidgetHostHWND' )
    ИЛИ ( hChild wnd:GetClassName РАВНО 'Chrome_WidgetWin_0' )
   ) И 
    ( hChild wnd:GetWindowText НЕРАВНО '' )  
  ) ?
   ( ++! Result )  
 ;

: "Перебор главных окон Хрома" INTEGER IN hWnd
 STRING VAR lClass
 hWnd wnd:GetClassName >>> lClass
 ( lClass РАВНО 'Chrome_WidgetWin_0' ) ИЛИ
 ( lClass РАВНО 'Chrome_WidgetWin_1' ) ? (
  @ "Перебор дочерних окон" hWnd IterateChildWindows
 )
 ; 

 @ "Перебор главных окон Хрома" IterateWindows
; // "Количество открытых вкладок Хрома"

PROCEDURE "Выполнить и сравнить с эталоном количество вновь открытых вкладок Хрома" IN aProc
 INTEGER VAR Count_Wnd_Start
 INTEGER VAR Count_Wnd_Finish
 "Количество открытых вкладок Хрома" >>> Count_Wnd_Start
  TRY
    aProc DO
  FINALLY
   2000 SLEEP
   "Вывести окно оболочки на первый план"
   "Количество открытых вкладок Хрома" >>> Count_Wnd_Finish
   Count_Wnd_Finish Count_Wnd_Start - .
  END
; //  "Выполнить и сравнить с эталоном количество вновь открытых вкладок Хрома"

VOID WORDWORKER "Cравнить с эталоном количество вновь открытых вкладок Хрома после выполнения"
 "Выполнить {(@ ( WordToWork DO 'Количество новых вкладок Хрома:' . ) )} и сравнить с эталоном количество вновь открытых вкладок Хрома"
;

PROCEDURE "Сравнить с эталоном имя текущего контрола"
 focused:control:push  "Узнать имя контрола" .
; // "Сравнить с эталоном имя текущего контрола"

: "Перевести фокус в поле 'Орган/Источник' в ППР"
 "Убедиться, что фокус в редакторе"
 'AT_SOURCE' focused:control:push pop:QueryCard:Attribute:SetFocus
; // "Перевести фокус в поле 'Орган/Источник' в ППР"

PROCEDURE "Установить фокус в редактор отправленных сообщений"
 OBJECT VAR "Текущая форма"
 "Найти окно {(форма::ChatWindow)} по имени" =: "Текущая форма"
 "Найти контрол {( контрол::HistoryEditor)} на форме {( "Текущая форма" )}" pop:Control:SetFocus
  ?ASSURE 'Не удалось постваить фокус в редактор отправленных сообщений'
; // "Установить фокус в редактор отправленных сообщений"

: "Кликаем кнопку в окне чата" IN aControl
 OBJECT VAR "Кнопка"
 OBJECT VAR "Текущая форма"
 "Найти окно {(форма::ChatWindow)} по имени" =: "Текущая форма"
 "Найти контрол {( aControl )} на форме {( "Текущая форма" )}" =: "Кнопка"
 "Кнопка" "Объект существует?" ?ASSURE 'Не нашли кнопку Восстановить все'
 "Кнопка" "Кликнуть"
; // "Кликаем кнопку в окне чата"

 : "Отправить сообщение"
  "Кликаем кнопку {(контрол::bt_enResult_opOkExt)} в окне чата"
 ; // "Отправить сообщение"

 : "Отменить отправку сообщений"
  "Кликаем кнопку {(контрол::bt_enResult_opCancel)} в окне чата"
 ;  // "Отменить отправку сообщений"

 : "Установить фокус в список контактов"
  OBJECT VAR "Список пользователей"
  контрол::trContactList:push =: "Список пользователей"
  "Установить фокус в {("Список пользователей")}"
 ; // "Установить фокус в список контактов"

INTEGER FUNCTION "Узнать Handle диалога чата"
 "Дождаться переключения вкладок"
 0 >>> Result
 INTEGER VAR aCountDialogs
 aCountDialogs := 0
 PROCEDURE "Перебор всех окон" INTEGER IN hWnd
  ( hWnd wnd:GetClassName РАВНО 'TChatWindowForm' ) ?
   ( hWnd =: Result
   ++! aCountDialogs )
 ; 

 @ "Перебор всех окон" IterateWindows
 aCountDialogs РАВНО 1  ?ASSURE [ 'Нет одного открытого диалога чата, их ' aCountDialogs IntToStr ' !' ]
;

: "Выбрать первого пользователя, открыть диалог и выполнить" IN aProc
 @ ( "Добавить пользователя для переписки" ) MODAL ( "Нажать {('Enter')}" )
 TRY
  aProc DO
 FINALLY
  "Узнать Handle диалога чата" "Восстановить активное окно"
  "Дождаться переключения вкладок"     
  "Отменить отправку сообщений"
  "Дождаться переключения вкладок"
  "Установить фокус в список контактов"
  "Открыть историю переписки"
  "Очистить историю переписки"
  "Нажать {('Esc')}"
  "Дать системе перерисоваться"
  "Установить фокус в список контактов"
  "Нажать {('Del')}"
 END
; // "Выбрать первого пользователя, открыть диалог и выполнить"

PROCEDURE "Открываем вкладку 'Судебная практика' в синхронном просмотре списка"
 "Дождаться переключения вкладок"
 OBJECT VAR "Нужная кнопка"
 "Найти контрол {(контрол::bt_enSynchroView_ShowUserCRList1)} на форме {("Главное окно")}" =: "Нужная кнопка" 
 "Нужная кнопка" "Объект существует?" ?ASSURE 'Не нашли кнопку Судебная практика'
 "Нужная кнопка" "Кликнуть"
 OnTest
 "Дождаться переключения вкладок"
; // "Открываем вкладку 'Судебная практика' в синхронном просмотре списка"

: "Сравнить с эталоном количество найденных в документе вхождений с искомым контекстом"
 "Убедиться, что фокус в редакторе"
 "Найти далее без проверки" 
 'Text' "Форма БП" .TNewBaseSearchForm.FoundCountLabel pop:object:GetStrProp .
; // "Сравнить с эталоном количество найденных в документе вхождений с искомым контекстом"

: "Выполнить с развёрнутым полем Регистрация в МЮ" OBJECT IN aProc
 OBJECT VAR КЗ focused:control:push >>> КЗ 
 'AT_REG_IN_MU' false КЗ pop:QueryCard:Attribute:SetCollapsed
 TRY
  aProc DO
 FINALLY
  'AT_REG_IN_MU' true КЗ pop:QueryCard:Attribute:SetCollapsed
 END
; // "Выполнить с развёрнутым полем Регистрация в МЮ"

: "Удалить пользователя"
 "Установить фокус в список контактов"
 "Нажать {('Del')}"
;

: "Нажать на пункт главного меню на форме" STRING IN aStr OBJECT IN aForm
 aStr aForm pop:form:FindMenuItem menuitem:Click
;  // "Нажать на пункт главного меню на форме "

OBJECT FUNCTION "Найти пункт контекстного меню с именем" OBJECT IN aMenu STRING IN aStr
 INTEGER VAR l_ItemIndex
 l_ItemIndex := 0
 
 BOOLEAN VAR Найдено
 Найдено := НЕТ
 
 aMenu menuitem:GetCount раз (
  l_ItemIndex aMenu menuitem:GetItem >>> Result
  Найдено := ( Result menuitem:GetCaption aStr SameText )
  
  Если Найдено то 
   выходим
   
  ++! l_ItemIndex
 )

 Если ( НЕ Найдено ) то
  ( Result := nil )
;

: "Нажать на пункт контекстного меню контрола" STRING IN aStr OBJECT IN aControl
// обработки второго и глубже уровней вложенности пунктов меню нет
// при необходимости допилим
 OBJECT VAR l_Menu
 OBJECT VAR l_Item
 10 10 aControl pop:Control:GetPopupMenu >>> l_Menu
 
 "Найти пункт контекстного меню {(l_Menu)} с именем {(aStr)}" >>> l_Item
 
 ( l_Item "НЕ РАВНО" nil ) ?ASSURE 'Не нашли пункт контекстного меню'
 l_Item menuitem:Click
; //"Нажать на пункт контекстного меню контрола"

USES
 @\Windows.script
;

: "Открыть документ в новом окне, предварительно выполнив с ним и сделать" IN aDoc  IN aProc1 IN aProc2 
 VAR l_Main
 "Сохранить активное окно" >>> l_Main
 "Открываем {(aDoc)}"
 TRY
  aProc1 DO
 FINALLY
  TRY
   "Открыть в новом окне"
   "Дождаться переключения вкладок"
   aProc2 DO  
  FINALLY
   l_Main "Восстановить активное окно"
   "Закрыть все окна кроме текущего"
  END
 END
; // "Открыть документ в новом окне, предварительно выполнив с ним и сделать"

PROCEDURE "Убедиться, что индекс значения комбобокса равен " OBJECT IN aCombo INTEGER IN anIndex
 "Узнать индекс текущего значения в комбобоксе {(aCombo)}" РАВНО anIndex ?ASSURE 'Индекс значения в комбобоксе отличается от ожидаемого!'
;

PROCEDURE "Выбрать следующее значение в комбобоксе" OBJECT IN aCombo
 "Убедиться, что контрол {(aCombo)} - комбобокс"
 INTEGER VAR anIndex
 anIndex := ( "Узнать индекс текущего значения в комбобоксе {(aCombo)}" 1 + )
 "Установить значение {( anIndex )} в комбобоксе {(aCombo)}"
 "Убедиться, что индекс значения комбобокса {(aCombo)} равен {(anIndex)}"
; // "Выбрать следующее значение в комбобоксе"

: "Нажать кнопку Восстановить все в Настройке конфигурации"
 OBJECT VAR "Восстановить все"
 OBJECT VAR "Модальная форма"
 "Контрол в фокусе" pop:Control:GetAnotherParentForm =: "Модальная форма"
 "Найти контрол {(контрол::bt_enResult_opRestoreAllSettings)} по имени на форме {("Модальная форма")}" >>> "Восстановить все"
 "Восстановить все" "Кликнуть"
; // "Нажать кнопку Восстановить все в Настройке конфигурации"

: "Измерить высоту ноды дерева " OBJECT IN aControl
  aControl "Высота ноды дерева" .
; // "Измерить высоту ноды дерева " 

 : "Установить фокус в Дерево стилей"
 "Перевести фокус в {(контрол::StyleTreeView)} на форме {(форма::StyleEditorNavigator)}"
 OnTest 
 ; // "Установить фокус в Дерево стилей"

: "Сравнить контекстное меню скроллера контрола с эталоном" OBJECT IN aControl
  INTEGER VAR X
  OBJECT VAR Контрол
  aControl >>> Контрол
  Контрол "Померить ширину" =: X
  X 5 - >>> X
  "Сравнить контекстное меню для контрола {( Контрол )} для точки {( X 25 )} с эталоном"
; // "Сравнить контекстное меню скроллера контрола с эталоном"

: "Имитируя интеграцию с MS Word найти контекст в поле " STRING IN aContext STRING IN aQueryCard
 [  '<?xml version="1.0" encoding="Windows-1251" standalone="no" ?>
  <query type="QT_ATTRIBUTE">
   <attribute tag="'aQueryCard'">
     <text>'aContext'</text>
   </attribute>
  </query>'
 ] strings:Cat  integration:OpenLink
; // "Имитируя интеграцию с MS Word найти контекст в поле "

: "Выполнить и нажать Да"  IN aProc
 wait:Yes
 TRY
  aProc DO
 FINALLY
   waited:? ?ASSURE 'Не дождались диалога!'
  END
; // "Выполнить и нажать Да"

: "Получить выделенные элементы списка в формате" STRING INTEGER IN aFormat
 // cc:Copy
 // - затычка, иначе не будет правильно имя формата в код формата преобразовываться
 aFormat "Контрол в фокусе" "Сравнить выделенные элементы списка в нужном формате"
; // "Сравнить выделенные элементы списка с эталоном в формате"

: "Сравнить выделенные элементы списка с эталоном в формате RTF"
 "Получить выделенные элементы списка в формате {(ns_ffRTF)}" .
; // "Сравнить выделенные элементы списка с эталоном в формате RTF"

: "Ищем строку в эталоне списка" STRING IN aStr
 STRING VAR Etalon
 "Получить выделенные элементы списка в формате {(ns_ffRTF)}" >>> Etalon
 Если ( "Позиция строки {(aStr)} в эталоне {(Etalon)}" БОЛЬШЕ 0 ) то 
  (  
   [ ' Строка: ' aStr ' найдена. ' ] strings:Cat . 
  )
 иначе
  (  
   [ ' Строка: ' aStr ' не найдена. ' ] strings:Cat . 
  )
; // "Ищем строку в эталоне списка"

PROCEDURE "Установить курсор по координатам  относительно контрола  и сравнить с эталоном хинт и контекстное меню" INTEGER IN X INTEGER IN Y OBJECT IN aControl
 "Установить курсор мыши по координатам {( X Y )} относительно контрола {(aControl)}"
 "Дождаться появления хинта"
 "Сравнить текст хинта с эталоном"
 "Сравнить контекстное меню для контрола {(aControl)} для точки  {( X Y )} с эталоном"
;

PROCEDURE "Установить курсор по координатам  относительно контрола  и сравнить с эталоном его хинт" INTEGER IN X INTEGER IN Y OBJECT IN aControl
 "Установить курсор мыши по координатам {( X Y )} относительно контрола {(aControl)}"
 "Дождаться переключения вкладок"
 "Дождаться появления хинта"
 "Сравнить текст хинта с эталоном"
;

WORDWORKER "Выполнить с пунктом меню 'показ моих комментариев'"
 VAR Item
 'Документы/Комментарии' "Текущая активная вкладка" pop:form:FindMenuItem =: Item
 2 Item menuitem:GetItem =: Item
 application:ActionIdle
 Item "Пункт меню нажат?"
 Item
 WordToWork DO
;

: "Включить показ моих комментариев"
 "Выполнить с пунктом меню 'показ моих комментариев'" ( BOOLEAN IN aVisible OBJECT IN anItem aVisible ! ? ( anItem menuitem:Click )
 'Показать мои комментарии' РАВНО ( anItem menuitem:GetCaption ) ?ASSURE 'Не правильный пункт меню (не включить показ)!' )
;

: "Выключить показ моих комментариев"
 "Выполнить с пунктом меню 'показ моих комментариев'" ( BOOLEAN IN aVisible OBJECT IN anItem aVisible  ? ( anItem menuitem:Click )
 'Скрыть мои комментарии' РАВНО ( anItem menuitem:GetCaption ) ?ASSURE 'Не правильный пункт меню (не скрыть)!' )
;

 : "Сделать с выключенными пользовательскими комментариями" IN aProc 
  "Выключить показ моих комментариев"
  "Дать системе перерисоваться" 
   TRY
    aProc DO
   FINALLY 
    "Включить показ моих комментариев"
   END
 ; // "Сделать с выключенными пользовательскими комментариями"

: "Имитируя интеграцию с MS Word найти контекст через БП" STRING IN aContext
 [  '<?xml version="1.0" encoding="Windows-1251" standalone="no" ?>
  <query type="QT_BASE_SEARCH">
    <attribute tag="AT_TEXT_BODY">
     <text>'aContext'</text>
    </attribute>
   <attribute tag="AT_SHORT_LIST">
     <text>'aContext'</text>
   </attribute>
  </query>'
 ] strings:Cat  integration:OpenLink
; // "Имитируя интеграцию с MS Word найти контекст через БП" 

: "Перевести фокус в дерево советов дня"
 "Перевести фокус в {('WordsTree')} на форме {(форма::CommonDiction)}"
 OnTest
; // "Перевести фокус в дерево советов дня"

: "Сделать вкладку Список редакций плавающей"
 "Сделать вкладку {(контрол::RedactionTree)} на форме {(форма::Redactions)} плавающей"
;

: "Сделать вкладку Список редакций неплавающей"
 "Сделать вкладку {(контрол::RedactionTree)} на форме {(форма::Redactions)} неплавающей"
;

: "Стоит ли галочка у элемента дерева" INTEGER IN aNode OBJECT IN aControl
 INTEGER VAR l_ImageIndex 
 BOOLEAN VAR l_Checked
 aNode  "Узнать индекс иконки в дереве {(aControl)}" >>> l_ImageIndex
 Если ( ( l_ImageIndex РАВНО 11 ) ИЛИ ( l_ImageIndex РАВНО 13 ) ИЛИ ( l_ImageIndex РАВНО 15 ) ) то
  ( [ 'Галочка у редакции ' aNode IntToStr ' ЕСТЬ!' ] strings:Cat . )
 иначе
  ( [ 'Галочки у редакции ' aNode IntToStr ' НЕТ!' ] strings:Cat . )
;

: "Стоит ли галочка у верхней редакции?"
 "Стоит ли галочка у элемента {(0)} дерева {(контрол::RedactionTree:push)}"
; // "Стоит ли галочка у верхней редакции?"


: "Стоит ли галочка у нижней редакции?"
 INTEGER VAR ItemsCount 
 контрол::RedactionTree:push "Количество элементов дерева" >>> ItemsCount
 ItemsCount 1 - >>> ItemsCount
 "Стоит ли галочка у элемента {(ItemsCount)} дерева {(контрол::RedactionTree:push)}"
; // "Стоит ли галочка у нижней редакции?"

BOOLEAN FUNCTION IsEven INTEGER IN aValue
 aValue 2 / 2 * РАВНО aValue >>> Result
;

PROCEDURE "См. ежедневный мониторинг законодательства в разделе Новости онлайн"
 ОМ
 OBJECT VAR "Рубрикатор"
 "Перейти по ссылке на {('Мониторинг законодательства')} в области {(контрол::tvLawNews)}"
 "Контрол в фокусе" "Получить родительскую форму" =: "Рубрикатор"
 'NewDocLabel' "Найти контрол по имени на форме {("Рубрикатор")}" "Установить фокус"
;

PROCEDURE "Установить фокус в рубрикатор"
 контрол::RubricatorList:push "Установить фокус"
;

: "Установить фокус в контекстный фильтр"
 "Установить фокус в контекстный фильтр списка Инфарма"
; // "Установить фокус в контекстный фильтр"

: "Перевести фокус в поле 'Страна' в КЗ ИнФарма"
 "Убедиться, что фокус в редакторе"
 'AT_PHARM_COUNTRY' "Контрол в фокусе" "Установить фокус в поле КЗ"
;

: "Установить фокус в поле 'Орган/Источник' в КЗ ОИЗ"
 "Убедиться, что фокус в редакторе"
 'AT_SOURCE_REVIEW' "Контрол в фокусе" "Установить фокус в поле КЗ"
;

PROCEDURE "Узнать, были ли во время фильтрации ошибки"
 Если ( "Корректен ли контекст (был ли звуковой сигнал)" ) то
  ( 'Некорретный контекст (звуковой сигнал был)' . ) 
 иначе
  ( 'Корретный контекст (звукового сигнала не  было)' . ) 
;

: "в поле 'Раздел/Тема' ввести с операцией" STRING IN aStr INTEGER IN aL
 "Убедиться, что фокус в редакторе"
 aL 'AT_CLASS' aStr "Контрол в фокусе" "Ввести текст в поле КЗ с операцией"
;

: "Ввести контекст первого уровня" STRING IN aContext
// специальное слово для выбора контекста первого уровня (для КЗ)
"Обработать Enter модально" ( 
 OBJECT VAR Parent
 "Контрол в фокусе" "Получить родительскую форму" =: Parent
 "Найти контрол {('InternalEditor')} на форме {( Parent )}"  "Установить фокус"
 "Ввести строку {(aContext)}"
 "Дождаться переключения вкладок"
 контрол::AttributeTree:push "Установить фокус"
 "Перейти к концу"
 "Нажать {('Enter')}" ) 
; // "Ввести контекст первого уровня"

: "Узнать позицию вертикального скроллбара у текущего редактора"
 true "Контрол в фокусе" "Узнать положение скроллера"
; // "Узнать позицию вертикального скроллбара у текущего редактора"

: "Узнать позицию вертикального скроллбара у контрола" OBJECT IN aControl
 true aControl "Узнать положение скроллера"
; // "Узнать позицию вертикального скроллбара у контрола"

INTEGER FUNCTION "Позиция горизонтального скроллбара у контрола " OBJECT IN aControl
 false aControl "Узнать положение скроллера" =: Result
;

INTEGER FUNCTION "Позиция горизонтального скроллбара у текущего редактора"
 "Позиция горизонтального скроллбара у контрола {("Контрол в фокусе")}" =: Result
;

: "Узнать максимальное положение вертикального скроллбара у текущего редактора"
 true "Контрол в фокусе" "Узнать максимальное положение скроллера"
; // "Узнать позицию вертикального скроллбара у текущего редактора"

: "Убедиться, что вертикальный скроллер контрола прокручен до конца" OBJECT IN aCtrl
 INTEGER VAR l_Pos
 INTEGER VAR l_Min
 INTEGER VAR l_Max
 INTEGER VAR l_Page
 true aCtrl "Информация о скроллбаре" >>> l_Max >>> l_Min >>> l_Page >>> l_Pos
 ( l_Pos "БОЛЬШЕ ИЛИ РАВНО" ( ( l_Max  l_Min - )  l_Page - ) ) ?ASSURE 'Вертикальный скроллер не в конце!'
; // "Убедиться, что вертикальный скроллер контрола прокручен до конца"

: "Перевести фокус в поле 'Информационный блок' в ППР"
 "Убедиться, что фокус в редакторе"
 'AT_BASES' "Контрол в фокусе" "Установить фокус в поле КЗ"
; // "Перевести фокус в поле 'Информационный блок' в ППР"

PROCEDURE "Установить фокус на кнопку Типа наследования группы Цвет"
 'FontForeColorInheritanceButton' "Диалог Редактор стилей" "Найти контрол по имени на форме" "Установить фокус"
 OnTest 
; // "Установить фокус на кнопку Типа наследования группы Цвет"

PROCEDURE "Установить фокус в комбобокс выбора цвета"
 'FontForeColorBox' "Диалог Редактор стилей" "Найти контрол по имени на форме" "Установить фокус"
 OnTest 
; // "Установить фокус в комбобокс выбора цвета"

PROCEDURE "Установить фокус в комбобокс выбора цвета фона"
 'FontBackColorBox' "Диалог Редактор стилей" "Найти контрол по имени на форме" "Установить фокус"
 OnTest 
; 

PROCEDURE "Установить фокус в комбобокс выбора названия шрифта"
 'FontNameComboBox' "Диалог Редактор стилей" "Найти контрол по имени на форме" "Установить фокус"
 OnTest 
; // "Установить фокус в комбобокс выбора названия шрифта"

: "Установить фокус в поле 'E-mail' в ППО"
 "Убедиться, что фокус в редакторе"
 'AT_EMAIL' "Контрол в фокусе" "Установить фокус в поле КЗ"
; // "Установить фокус в поле 'E-mail' в ППО"

WordAlias "Перевести фокус в поле 'E-mail рассылки' в Прайме" "Установить фокус в поле 'E-mail' в ППО" 

: "Потянуть вертикальный скроллер контрола вверх" OBJECT IN aControl
 aControl pop:Control:VScrollerVisible ?ASSURE [ 'У контрола ' aControl pop:Component:Name ' нет вертикального скроллбара' ]
 VAR X
 VAR Y
 VAR Yy
 // Получаем верхний правый угол контрола
 "Померить ширину {(aControl)}" >>> X
 "Померить высоту {(aControl)}" >>> Y
 Y >>> Yy
 // Переводим в координаты экрана
 "Привести координаты {( @ X @ Y )} для контрола {(aControl)} к экранным"
 // поправка на размер скроллера. Надо бы GetSystemMetrics использовать...или как там его
 X 10 - >>> X
 Y 50 - >>> Y
 "Установить курсор мыши по координатам {(X Y)}"
 Y ( Yy 80 - ) - >>> Y
 THREAD ( "Зажать левую кнопку мыши"
  "Установить курсор мыши по координатам {(X Y)}"
  "Отпустить левую кнопку мыши" )
 50 SLEEP
; // "Потянуть вертикальный скроллер контрола вверх"

PROCEDURE "Свернуть и сразу развернуть главное окно"
 OBJECT VAR Главное_окно
 "Главное окно" =: Главное_окно
 TRY
  "Свернуть окно {(Главное_окно)}"
 FINALLY 
  "Развернуть окно {(Главное_окно)}"
 END
; 

BOOLEAN FUNCTION "Узнать, активна ли кнопка Найти в панели БП?"
 'Enabled' "Форма БП" .TNewBaseSearchForm.FindBtn pop:object:GetOrdProp РАВНО 1 >>> Result
;

BOOLEAN FUNCTION "Узнать, активна ли кнопка 'Найти предыдущий контекст' в панели БП?"
 'Enabled' "Форма БП" .TNewBaseSearchForm.FindBackBtn pop:object:GetOrdProp РАВНО 1 >>> Result
;

PROCEDURE "Сравнить с эталоном активность кнопки 'Найти предыдущий контекст' в панели БП"
 "Узнать, активна ли кнопка 'Найти предыдущий контекст' в панели БП?" .
;

: "Выделена ли нода дерева ?" INTEGER IN aNode OBJECT IN aControl
 aNode aControl "Узнать, выделена ли нода дерева?" .
; // "Выделена ли нода дерева ?"

PROCEDURE "Открыть гиперссылку в новом окне, выполнить в нём и переключиться на предыдущее окно"  IN aProc
 VAR l_Main
 "Сохранить активное окно" >>> l_Main
 TRY
  "Открыть гиперссылку в новом окне"
  aProc DO
 FINALLY
  l_Main "Восстановить активное окно"
 END
; // "Открыть гиперссылку в новом окне, выполнить в нём и переключиться на предыдущее окно"

PROCEDURE "Установить фокус в поле 'Дата принятия С' "
 "Убедиться, что фокус в редакторе"
 'AT_PUBLISHING_DATE' "Контрол в фокусе" "Установить фокус в поле КЗ"
;

PROCEDURE "в поле 'Международное наименование' ввести" STRING IN aStr
 "Убедиться, что фокус в редакторе"
 'AT_PHARM_INTERNATIONAL_NAME' aStr "Контрол в фокусе" pop:QueryCard:SetAttribute
;

PROCEDURE "Проверить, что введено в контексный фильтр левого навигатора"
 OBJECT VAR "Контекстный фильтр"
 "Найти контрол {('InternalEditor')} на форме {("Левый навигатор")}" =: "Контекстный фильтр"
 "Контекстный фильтр" "Заголовок контрола" .
; // "Проверить, что введено в контексный фильтр левого навигатора"

PROCEDURE "Проверить, выделен ли элемент в контроле класса TvtLister" IN aNum IN aControl
 OBJECT VAR Lister
 "Найти контрол {(aControl)} на форме {("Главное окно")}" >>> Lister
 Если ( "Узнать, выделен ли элемент {(aNum)} в списке {(Lister)}" ) то
  ( [ 'Элемент ' aNum IntToStr  ' выделен!' ] strings:Cat . )
 иначе
  ( [ 'Элемент ' aNum IntToStr ' не выделен!' ] strings:Cat . )
; //"Проверить, выделен ли элемент в контроле "

PROCEDURE "Выбрать в дереве атрибутов контекст" STRING IN aString
 @ ( "Нажать {('Enter')}" ) MODAL (
  ( "Перейти по ссылке {( aString )} в дереве {(контрол::AttributeTree)}" ?ASSURE 'Почему-то не перешли по ссылке' )  
 )
; // "Выбрать в дереве атрибутов контекст"

: "Установить фокус в поле 'Раздел/Тема' "
 "Убедиться, что фокус в редакторе"
 'AT_CLASS' "Контрол в фокусе" "Установить фокус в поле КЗ" 
; // "Установить фокус в поле 'Раздел/Тема' "

: "Выполнить с включёнными метками на саб-панели" IN aProc
 "Показывать метки"
 TRY
  aProc DO
 FINALLY
  "Перевести фокус в текст"
  "Показывать метки"
 END
; // "Выполнить с включёнными метками на саб-панели"

VOID WORDWORKER "Включить показ меток на саб-панели и выполнить"
 "Выполнить {(@ ( WordToWork DO ) )} с включёнными метками на саб-панели"
;

PROCEDURE "Выполнить для проверки скрипта " OBJECT IN aProc INTEGER IN aNum

 PROCEDURE Действия
  "Установить фокус в БП после переключения баз"
  "Открываем {(3000)}"
  aNum раз ( "Перейти к следующей ссылке" )
  "Перейти по текущей ссылке"
  'Запускаем скрипт по ссылке:' .
  "Сравнить текущий список с эталоном"
  "Отделить текст в эталоне"  
  "Дождаться переключения вкладок"
  
  : скрипт  
   'Запускаем скрипт вручную:' .
   aProc DO
  ; // скрипт

  @ скрипт RunSearch 
  "Сравнить текущий список с эталоном"
 ; // Действия

 "Выполнить {(@ Действия)} с базой {('scripts')}"
; // "Выполнить для проверки скрипта "

: "Проверка, закрылся ли баллон 'Информация об изменениях' "
 "Открываем НК"
 "В документе не должно быть комментариев"
 6 раза ( "Перейти на параграф вниз" )
 "Переместиться в начало строки"
 "Выделить слово справа"
 "Контрол в фокусе" "Выделенный текст редактора" "Заменить непечатаемые символы" РАВНО 'Часть ' ! ? (
  'Вероятно, не закрылся баллон Информация об изменениях!' .
 )
; // "Проверка, закрылся ли баллон 'Информация об изменениях' "

: "Установить курсор мыши на ссылку 'информация об изменениях' в НК"
 VAR Editor
  VAR x
  VAR y
  "Открываем НК"
  "Контрол в фокусе" >>> Editor
  Editor pop:editor:ParaMiddleCoordsToScreen >>> y >>> x
  y 80 + >>> y
  x y "Установить курсор мыши по координатам"
  "Узнать индекс курсора мыши" "Узнать имя индекса курсора мыши" РАВНО 'crHandPoint' ! ? (
   'Не попали на ссылку Информация об изменениях! Тест прератил работу!' .
    HALT
  )
; // "Установить курсор мыши на ссылку 'информация об изменениях' в НК"

PROCEDURE "Сравнить с эталоном курсор мыши и хинт над выделенной ссылкой"
 INTEGER VAR x
 INTEGER VAR y
 "Контрол в фокусе" pop:editor:CursorCoordsToScreen >>> y >>> x
 y 18 + >>> y
 x 30 - >>> x
 x y "Установить курсор мыши по координатам"
 "Дождаться появления хинта"
 [ 'Курсор: ' "Узнать индекс курсора мыши" "Узнать имя индекса курсора мыши" ] strings:Cat .
 [ 'Хинт: ' "Текущий хинт" ] strings:Cat .
;

: "Выполнить с зажатой клавишей"  IN aProc STRING IN aString
 TRY
  "Зажать кнопку {(aString)}"  
  aProc DO
 FINALLY
  "Отпустить кнопку {(aString)}"
 END
; // "Выполнить с зажатой клавишей"

PROCEDURE "Открываем вкладку 'Справка к документу' в синхронном просмотре списка"
 "Дождаться переключения вкладок"
 OBJECT VAR "Нужная кнопка"
 "Найти контрол {(контрол::bt_enSynchroView_ShowRelated)} на форме {("Главное окно")}" =: "Нужная кнопка" 
 "Нужная кнопка" "Объект существует?" ?ASSURE 'Не нашли кнопку Справка к документу'
 "Нужная кнопка" "Кликнуть"
; // "Открываем вкладку 'Справка к документу' в синхронном просмотре списка"

PROCEDURE "Кликаем кнопку на тулбаре" IN aControl
 "Дождаться переключения вкладок"
 OBJECT VAR "Нужная кнопка"
 "Найти контрол {(aControl)} на форме {("Главное окно")}" =: "Нужная кнопка" 
 "Нужная кнопка" "Кликнуть"
; // "Кликаем кнопку на тулбаре"

: "Сохраняем объект в папку Мои документы с именем "  STRING IN aName
  : Действия
   "Ввести строку {(aName)}"
   OBJECT VAR "Форма сохранения в МД"
   OBJECT VAR "Кнопка ОК"
   "Контрол в фокусе" 2 раза "Получить родительскую форму" =: "Форма сохранения в МД"
   "Форма сохранения в МД" "Объект существует?" ?ASSURE 'Не нашли форму сохранения в МД'
   контрол::bt_enResult_opOk "Форма сохранения в МД" "Найти контрол по имени на форме" =: "Кнопка ОК"
   "Кнопка ОК" "Кликнуть"
  ; // Действия
 3 раза "Дождаться переключения вкладок"
 @ (  "Сохранить в Мои документы" ) MODAL ( Действия )
; // "Сохраняем объект в папку Мои документы с именем "

PROCEDURE "Открыть выпадающий список комбобокса" OBJECT IN aCtrl 
 true aCtrl "Выпадающий список комбобокса"
;

PROCEDURE "Закрыть выпадающий список комбобокса" OBJECT IN aCtrl 
 false aCtrl "Выпадающий список комбобокса"
;

STRING FUNCTION "Узнать имя последнего значения комбобокса" OBJECT IN aCtrl 
 INTEGER VAR "Текущее значение"
 aCtrl "Узнать индекс текущего значения в комбобоксе" >>> "Текущее значение"
 TRY
  "Открыть выпадающий список комбобокса {(aCtrl)}"
  "Дать системе перерисоваться"
  "Нажать {('End')}" 
  "Дождаться переключения вкладок" 
  "Нажать {('Enter')}" 
  aCtrl "Заголовок контрола" >>> Result
 FINALLY
  "Дать системе перерисоваться"
  "Текущее значение" "Установить значение в комбобоксе {(aCtrl)}"
  "Дождаться переключения вкладок"
 END
; // "Узнать имя последнего значения комбобокса"

STRING FUNCTION "Узнать имя первого значения комбобокса" OBJECT IN aCtrl 
 INTEGER VAR "Текущее значение"
 aCtrl "Узнать индекс текущего значения в комбобоксе" >>> "Текущее значение"
 TRY
  "Дать системе перерисоваться"
  "Открыть выпадающий список комбобокса {(aCtrl)}"
  "Дать системе перерисоваться"
  "Нажать {('Home')}" 
  "Дождаться переключения вкладок"
  ( aCtrl ЯВЛЯЕТСЯ class::TvtColorBox ) ? (
   "Нажать {('Down')}" 
  )
  "Нажать {('Enter')}" 
   aCtrl "Заголовок контрола" >>> Result
 FINALLY
  "Дать системе перерисоваться"
  "Текущее значение" "Установить значение в комбобоксе {(aCtrl)}"
  "Дождаться переключения вкладок"
 END
;

PROCEDURE "Выбрать в комбобоксе значение " OBJECT IN aCtrl STRING IN aString 
 "Убедиться, что контрол {(aCtrl)} - комбобокс"
 INTEGER VAR "Текущее значение"
 aCtrl "Узнать индекс текущего значения в комбобоксе" >>> "Текущее значение"
 STRING VAR "Заголовок"
 Если ( aCtrl "Убедиться, что контрол активен" ) то
  (
   Если ( aCtrl ЯВЛЯЕТСЯ class::TvtColorBox ) то
    ( 1 "Установить значение в комбобоксе {(aCtrl)}" )
    // костыль, чтобы избежать появления модального диалога 'Цвет'
   иначе 
    ( 0 "Установить значение в комбобоксе {(aCtrl)}" )
   "Узнать имя последнего значения комбобокса {(aCtrl)}" >>> "Заголовок"
   200 раз (
    Если ( aCtrl "Заголовок контрола" РАВНО aString ) то
     (
      [ 'В комбобоксе выбрано значение: ' aCtrl "Заголовок контрола" ] strings:Cat .
      Выходим
     ) 
    иначе
     (
      Если ( aCtrl "Заголовок контрола" РАВНО "Заголовок" ) то 
       (
        'В комбобоксе не найдено значение: ' aString ToPrintable Cat .
        "Дать системе перерисоваться"
        "Текущее значение" "Установить значение в комбобоксе {(aCtrl)}"
        Выходим
       ) // проверка на последний пункт
      "Нажать {('Down')}" 
      "Дать системе перерисоваться"
      "Нажать {('Down')}" 
      "Дождаться переключения вкладок" 
      "Нажать {('Enter')}"
     )
   ) // 200 раз
  )  
  иначе
  ( 'Комбобокс неактивен!' . )
;

WORDWORKER "Запомнить значение комбобокса и выполнить" OBJECT IN aCtrl
 "Убедиться, что контрол {(aCtrl)} - комбобокс"
 Если ( aCtrl "Убедиться, что контрол активен" ) то
  (  INTEGER VAR "Текущее значение"
     aCtrl "Узнать индекс текущего значения в комбобоксе" >>> "Текущее значение"
    TRY
     ( WordToWork DO )
    FINALLY
     "Дать системе перерисоваться"
     "Текущее значение" "Установить значение в комбобоксе {(aCtrl)}"
     "Дождаться переключения вкладок"
    END )
  иначе
    ( 'Комбобокс неактивен!' . )
; // "Запомнить значение комбобокса и выполнить"

PROCEDURE "Установить фокус в комбобокс выбора размера шрифта в Редакторе стилей"
  'FontSizeComboBox' "Диалог Редактор стилей" "Найти контрол по имени на форме" "Установить фокус"
  OnTest 
; // "Установить фокус в комбобокс выбора размера шрифта в Редакторе стилей"

PROCEDURE "Установить фокус в комбобокс выбора размера шрифта в измененном Редакторе стилей"
  'FontSizeComboBox' "Диалог Редактор стилей" "Найти контрол по имени на форме" "Установить фокус"
  OnTest 
; // "Установить фокус в комбобокс выбора размера шрифта в Редакторе стилей"

INTEGER FUNCTION "Текущий размер текста (в Редакторе стилей с изменениями )" BOOLEAN IN aProc  
 0 >>> Result
 PROCEDURE Проверяем_размер_текста
  "Установить фокус в Дерево стилей"
  "Найти ссылку {('Текст')} в дереве {(контрол::StyleTreeView)} и перейти по ней"
  Если ( aProc ) то  
   ( "Установить фокус в комбобокс выбора размера шрифта в измененном Редакторе стилей" )
  иначе
   ( "Установить фокус в комбобокс выбора размера шрифта в Редакторе стилей" )
  "Контрол в фокусе" "Заголовок контрола" StrToInt >>> Result
 ; // Проверяем_размер_текста

 "Выполнить с редактором стилей"  ( Проверяем_размер_текста )
;

INTEGER FUNCTION "Текущий размер текста (в Редакторе стилей)" 
 "Текущий размер текста (в Редакторе стилей с изменениями {(false)})" >>> Result
; // "Текущий размер текста (в Редакторе стилей)" 

INTEGER FUNCTION "Текущий размер текста (в измененном Редакторе стилей)" 
 "Текущий размер текста (в Редакторе стилей с изменениями {(true)})" >>> Result
;

: "Сравнить с эталоном выделенные элементы списка в Txt формате"
 "Получить выделенные элементы списка в формате {(ns_ffTxt)}" .
; // "Сравнить с эталоном выделенные элементы списка в Txt формате"

: "Перевести фокус в поле 'Дата принятия: С' в ППР"
 "Перевести фокус в поле 'Дата принятия' в ППР"
; // "Перевести фокус в поле 'Дата принятия: С' в ППР"

USES
 @\ExCtrls.script
;

: "Перевести фокус в поле 'Дата принятия: По' в ППР"
 "Перевести фокус в поле 'Дата принятия: С' в ППР"
 "Нажать {('Tab')}" 
 "Узнать, в каком поле КЗ {("Контрол в фокусе")} стоит фокус" РАВНО 'AT_PUBLISHING_DATE' ?ASSURE 'Не попали в поле Дата принятия: По'
; // "Перевести фокус в поле 'Дата принятия: По' в ППР"

: "Сравнить все элементы дерева с эталоном"  BOOLEAN IN "Всё дерево" OBJECT IN aList
 Если ( aList "Текущая нода дерева" nil ?!= ) то
  (
   "Переместиться в начало дерева"
   
   Если "Всё дерево" то 
    "Развернуть текущее дерево"
    
   STRING VAR "Текущее значение ноды"
   STRING VAR "Следующее значение ноды"
   1000 раз (  
    aList "Текущая нода дерева" "Текст ноды" >>> "Текущее значение ноды"
    "Текущее значение ноды" .
    "Стрелка вниз" 
    aList "Текущая нода дерева" "Текст ноды" >>> "Следующее значение ноды"
    Если ( "Следующее значение ноды" РАВНО "Текущее значение ноды" ) то 
     выходим
   )
  ) 
 иначе
  ( 'Дерево - пустое! ' . )
; // "Сравнить все элементы дерева с эталоном" 

: "Сравнить все элементы текущего дерева с эталоном" 
 "Сравнить все {(true)} элементы дерева {("Контрол в фокусе")} с эталоном"
; // "Сравнить все элементы текущего дерева с эталоном" 

: "Сравнить элементы текущего дерева с эталоном без разворачивания папок" 
 "Сравнить все {(false)} элементы дерева {("Контрол в фокусе")} с эталоном"
; // "Сравнить все элементы текущего дерева с эталоном" 

: "Ставим комментарий"
 "Нажать {('Enter')}"
; // "Ставим комментарий"

: "Выбран ли тип информации ?" STRING IN aType
 VAR l_VG
 aType "Контрол в фокусе" "Родительская форма контрола" "Найти VG-контрол по имени" =: l_VG
 [ 'Тип ' aType ': '] strings:Cat l_VG "Узнать, выбран ли VG-контрол" ToPrintable Cat .
;

PROCEDURE "Проверить выбранность всех типов информации для БП расширенно" BOOLEAN IN anNameTestBase
 "Выбран ли тип информации {('Все документы')}?"
 "Выбран ли тип информации {('Акты органов власти')}?"
 "Выбран ли тип информации {('Судебная практика')}?"
 "Выбран ли тип информации {('Формы документов')}?"
 "Выбран ли тип информации {('Комментарии')}?"
 "Выбран ли тип информации {('Пользовательский')}?"
 "Выбран ли тип информации {('Правовой консалтинг')}?"
 "Выбран ли тип информации {('Бухгалтерские проводки')}?"
 "Выбран ли тип информации {('Региональные акты')}?"
 "Выбран ли тип информации {('Международные договоры')}?"
 Если ( anNameTestBase ) то
  ( "Выбран ли тип информации {('Проекты законов')}?"
  "Выбран ли тип информации {('Нормативно-техническая документация')}?"
  )
 иначе
  ( "Выбран ли тип информации {('Проекты правовых актов')}?" )
;

PROCEDURE "Проверить выбранность всех типов информации для БП на ТБ24"
  f1:BaseDate РАВНО '24.05.2013' ?ASSURE 'База не ТБ24!'
 "Проверить выбранность всех типов информации для БП расширенно {(true)}"
;

PROCEDURE "Проверить выбранность всех типов информации для БП на ТБ27"
 f1:BaseDate РАВНО '27.05.2013' ?ASSURE 'База не ТБ27!' 
 "Проверить выбранность всех типов информации для БП расширенно {(false)}"
;

PROCEDURE "Померить ширину контрола и сравнить ее с эталоном" STRING IN aCtrl
 OBJECT VAR "Контрол"
 "Найти контрол {(aCtrl)} на форме {("Главное окно")}" =: "Контрол"
 [ 'Ширина ' aCtrl ': ' ] strings:Cat "Померить ширину {("Контрол")}" ToPrintable Cat .
;

: "Померить ширину комбобокса tbenNewsLineTop и сравнить ее с эталоном"
 "Померить ширину контрола {('tbenNewsLineTop')} и сравнить ее с эталоном"
;

: "Померить ширину комбобокса bt_enQuery_opSearchType и сравнить ее с эталоном"
 "Померить ширину контрола {(контрол::bt_enQuery_opSearchType)} и сравнить ее с эталоном"
; // "Померить ширину комбобокса bt_enQuery_opSearchType и сравнить ее с эталоном"

: "Загрузить запрос из Журнала работы"
 "Развернуть текущее дерево"
 2 раза "Стрелка вниз"
 "Нажать {('Enter')}"
 "Дождаться переключения вкладок"
; // "Загрузить запрос из Журнала работы"

PROCEDURE "Удалить элемент, подтвердив в диалоге удаление"
 "Ответить один раз Да для {(@ "Нажать Del")}"
;

WordAlias "Снять документ с контроля путем удаления его из вкладки Документы на контроле" "Удалить элемент, подтвердив в диалоге удаление"

PROCEDURE "Установить фокус в пустой список"
 OBJECT VAR "Пустой список"
 "Найти контрол {("Информация о пустом списке")} на форме {("Текущая активная вкладка")}" =: "Пустой список"
 "Установить фокус в {("Пустой список")}"
 "Дождаться переключения вкладок"
;

: "Нажать Enter"
 "Нажать {('Enter')}"
; // "Нажать Enter"

: "Нажать Esc"
 "Нажать {('Esc')}"
; // "Нажать Esc"

: "Секундная пауза"
 1000 SLEEP
 OnTest
; // "Секундная пауза"

WORDWORKER "Обработать диалог Анализ списка модально"
 @ ( "Анализ списка" ) MODAL ( WordToWork DO )
; // "Обработать диалог Анализ списка модально"

: "Установить ширину контрола в пикселей" OBJECT IN aCtrl INTEGER IN CtrlW
 CtrlW aCtrl "Установить ширину"
;

: "Установить высоту контрола в пикселей" OBJECT IN aCtrl INTEGER IN CtrlH
 CtrlH aCtrl "Установить высоту"
;

: "Установить размеры контрола в" OBJECT IN aCtrl INTEGER IN CtrlW INTEGER IN CtrlH
 "Установить ширину контрола {(aCtrl)} в {(CtrlW)} пикселей"
 "Установить высоту контрола {(aCtrl)} в {(CtrlH)} пикселей"
; // "Установить размеры контрола в"

PROCEDURE "Сравнить с эталоном координаты и размеры форм редактора стилей"
 "Выполнить с редактором стилей" (  
  PROCEDURE Действия_с_контролом OBJECT IN aCtrl
   ( aCtrl ЯВЛЯЕТСЯ  class::TStyleEditorContainerForm ) ? (
   "Узнать имя контрола {(aCtrl)}" .
  aCtrl "Померить отступ слева" "в интервале" ( 380 656 ) ?ASSURE 'Отступ слева вышел за разрешенные границы!'
  'Left = от 414 до 656. Правильно. ' . 
  aCtrl "Померить отступ сверху" "в интервале" ( 174 324 ) ?ASSURE 'Отступ сверху вышел за разрешенные границы'
  'Top = от 174 до 324. Правильно. ' . 
   "Сравнить с эталоном размеры контрола {(aCtrl)}" 
   "Отделить текст в эталоне" ) 
   ( aCtrl ЯВЛЯЕТСЯ  class::TStyleEditorExampleForm )
   ИЛИ  ( aCtrl ЯВЛЯЕТСЯ  class::TStyleEditorFontForm )
   ИЛИ  ( aCtrl ЯВЛЯЕТСЯ  class::TStyleEditorNavigatorForm ) ? (
    "Узнать имя контрола {(aCtrl)}" .
    "Получить размеры и координаты контрола {(aCtrl)}"
    "Отделить текст в эталоне"
   )
 ; // Действия_с_контролом 
  OBJECT VAR "Модальная форма"
  "Контрол в фокусе" "Нижняя форма" >>> "Модальная форма"
  "Выполнить для всех контролов {("Модальная форма")}" Действия_с_контролом
 )
;

: "Развернуть диалог Редактора стилей во весь экран"
 "Выполнить с редактором стилей" ( 
  "Развернуть окно {("Диалог Редактор стилей")}"
  )
; 

PROCEDURE "Установить ширину навигатора с деревом стилей в , размеры диалога редактора стилей в" INTEGER IN WidthNavigatorZone INTEGER IN WidthWindow INTEGER IN HeightWindow
 "Выполнить с редактором стилей" ( 
  "Уменьшить окно {("Диалог Редактор стилей")}"
  OBJECT VAR "Текущая форма"
  OBJECT VAR "Навигатор с деревом стилей"
  "Контрол в фокусе" "Нижняя форма" >>> "Текущая форма"
  "Найти контрол {('NavigatorZone')} по имени на форме {("Текущая форма")}" >>> "Навигатор с деревом стилей"
  "Установить ширину контрола {("Навигатор с деревом стилей")} в {(WidthNavigatorZone)} пикселей"
  "Установить размеры контрола {("Диалог Редактор стилей")} в {(WidthWindow HeightWindow)}"
 )
; // "Установить ширину навигатора с деревом стилей в , размеры диалога редактора стилей в"

: "Выполнить с отдоченной вкладкой Оглавление" IN aProc
 "Сделать оглавление плавающим"
 TRY
  aProc DO
 FINALLY
  "Сделать оглавление неплавающим"
 END
; // "Выполнить с отдоченной вкладкой Оглавление"

: "Видна ли Кнопка крестик левого навигатора?"
 OBJECT VAR "Кнопка крестик"
 'CLOSE' "Левый навигатор" "Найти контрол по имени на форме" =: "Кнопка крестик"
 "Кнопка крестик" "Объект существует?" ?ASSURE 'Не удалось найти Кнопку крестик!'
 "Узнать, виден ли контрол {( "Кнопка крестик")}" . 
; // Видна ли Кнопка крестик левого навигатора

PROCEDURE "Проверить, чтобы во всех комбобоксах редактора стилей было больше одного значения"
 PROCEDURE Действия 
  OBJECT VAR Ctrl_in_focus
  "Контрол в фокусе" >>> Ctrl_in_focus
  "Убедиться, что контрол {(Ctrl_in_focus)} - комбобокс"
  Ctrl_in_focus .
  "Дождаться переключения вкладок"
  STRING VAR First_Text_Combobox
  STRING VAR Last_Text_Combobox
  "Узнать имя последнего значения комбобокса {(Ctrl_in_focus)}" >>> Last_Text_Combobox
  "Узнать имя первого значения комбобокса {(Ctrl_in_focus)}" >>> First_Text_Combobox
  Если ( Last_Text_Combobox РАВНО First_Text_Combobox ! ) то
   ( 'В комбобоксе больше одного значения.' . )
  иначе
   ( 'В комбобоксе одно или менее одного значений!' . )
 ;   

 "Вывести окно оболочки на первый план"
 "Выполнить с редактором стилей" (
  "Установить фокус в комбобокс выбора названия шрифта"
  3 раза ( 
    ( Действия )
    "Нажать {('Tab')}" 
    "Отделить текст в эталоне"
   )
  "Установить фокус в комбобокс выбора размера шрифта в измененном Редакторе стилей"
 ( Действия )
 "Кликаем кнопку Ок мышкой" )
; // "Проверить, чтобы во всех комбобоксах редактора стилей было больше одного значения"

PROCEDURE "Установить курсор по координатам относительно контрола  и сравнить с эталоном контекстное меню" INTEGER IN X INTEGER IN Y OBJECT IN aControl
 "Установить курсор мыши по координатам {( X Y )} относительно контрола {(aControl)}"
 "Дождаться появления хинта"
 "Сравнить контекстное меню для контрола {(aControl)} для точки  {( X Y )} с эталоном"
;

PROCEDURE "Сравнить контекстное меню для иконок сабпанели документа 2206727 с эталоном"
 "Отделить текст в эталоне"
 'Эталон меню операций со всем документом:' .
 "Установить курсор по координатам {( 5 5 )} относительно контрола {(контрол::SubPanel:push)} и сравнить с эталоном контекстное меню"
 "Отделить текст в эталоне"
 'Эталон меню операций для фрагмента текста:' .
 "Установить курсор по координатам {( 5 215 )} относительно контрола {(контрол::SubPanel:push)} и сравнить с эталоном контекстное меню"
;

WORDWORKER "Увеличить шрифт раз и выполнить" INTEGER IN aCount
 aCount раз ( "Увеличить шрифт" )
 TRY
   WordToWork DO
 FINALLY
  aCount раз ( "Уменьшить шрифт" )
 END
; // "Увеличить шрифт раз и выполнить"

WordAlias "Увеличить шрифт раза и выполнить" "Увеличить шрифт раз и выполнить"

WORDWORKER "Уменьшить шрифт раз и выполнить" INTEGER IN aCount
 aCount раз ( "Уменьшить шрифт" )
 TRY
   WordToWork DO
 FINALLY
  aCount раз ( "Увеличить шрифт" )
 END
; // "Уменьшить шрифт раз и выполнить"

WordAlias "Уменьшить шрифт раза и выполнить" "Уменьшить шрифт раз и выполнить"

WORDWORKER "Увеличить шрифт через главное меню раз и выполнить" INTEGER IN aCount
 aCount раз ( "Вызвать {('Вид/Увеличить шрифт')} из главного меню" )
 TRY
   WordToWork DO
 FINALLY
  aCount раз ( "Вызвать {('Вид/Уменьшить шрифт')} из главного меню" )
 END
; // "Увеличить шрифт через главное меню раз и выполнить"

WordAlias "Увеличить шрифт через главное меню раза и выполнить" "Увеличить шрифт через главное меню раз и выполнить"

ARRAY FUNCTION "Разрешение основного монитора" 
 [ 
  "Разрешение основного монитора по горизонтали"
  "Разрешение основного монитора по вертикали"
 ]
 >>> Result 
; // "Разрешение основного монитора" 

PROCEDURE "Кликаем кнопку на координатах , и кликаем выпадающий список по координатам" IN aControl  INTEGER IN X INTEGER IN Y  INTEGER IN Xx INTEGER IN Yy
 OBJECT VAR "Нужная кнопка"
 "Найти контрол {(aControl)} на форме {("Текущая активная вкладка")}" =: "Нужная кнопка" 
 "Нужная кнопка" "Объект существует?" ?ASSURE 'Не нашли кнопку'
  THREAD ( 1000 SLEEP 
   "Установить курсор мыши по координатам {( Xx Yy )} относительно контрола {("Нужная кнопка" )}"
   "Клик левой кнопкой мыши" )
    THREAD (  500 SLEEP 
      "Установить курсор мыши по координатам {( X Y )} относительно контрола {("Нужная кнопка" )}"
      "Клик левой кнопкой мыши" )
 2500 SLEEP
 "Дождаться переключения вкладок"
 "Узнать численную переменную {('Down')} объекта {("Нужная кнопка")}" 0 ?!= .
 "Проверить иерархию вложенности текущего контрола"
 OnTest
;

PROCEDURE "Перетащить отдоченную вкладку Документов на контроле в список терминов ТС"
 "Открыть вкладку Документы на контроле"
 "Сделать вкладку {(контрол::UnderControlList)} на форме {(форма::UnderControl)} плавающей"
 "Дать системе перерисоваться"
 "Установить курсор мыши по координатам {(50 -70)} относительно контрола {("Контрол в фокусе")}" // на заголовок отдоченной
 "Перевести фокус в дерево терминов"
 THREAD ( 1500 SLEEP 
  "Установить курсор мыши по координатам {(5 220)} относительно контрола {("Текущая активная вкладка")}"  // в ЛЕВУЮ часть списка
  "Отпустить левую кнопку мыши" )
 "Зажать левую кнопку мыши"
 "Дать системе перерисоваться"
 3000 SLEEP
; // "Перетащить отдоченную вкладку Документов на контроле в список терминов ТС"

PROCEDURE "Установить свернутость группы контрола КЗ в" STRING IN aName OBJECT IN aCtrl BOOLEAN IN aParam
 aName aParam aCtrl "Установить свернутость группы КЗ"
;

PROCEDURE "Не сохранять состояние редактора"
 false 'Editor' QueryCard:SetCanSaveState
;

WORDWORKER "Отключить перерисовку системы и выполнить"
 vcm:Dispatcher:Lock
 TRY
  ( WordToWork DO )
 FINALLY 
  vcm:Dispatcher:Unlock
 END
;

: "Совершить переход по Таб"
 "Нажать {('Tab')}"
; // "Совершить переход по Таб"

WORDWORKER "Выполнить поиск в ППР"
 @ ( WordToWork DO )  RunSearch
;

PROCEDURE "Перевести фокус в поле 'Слова в названии препарата' в КЗ ИнФарма"
 "Убедиться, что фокус в редакторе"
 'AT_PHARM_NAME' "Контрол в фокусе" "Установить фокус в поле КЗ"
;

PROCEDURE "Перевести фокус в поле 'Статус регистрации' в КЗ ИнФарма"
 "Убедиться, что фокус в редакторе"
 'AT_PHARM_REG_STATUS' "Контрол в фокусе" "Установить фокус в поле КЗ"
;

PROCEDURE "Нажать на кнопку в статусной строке" STRING IN aNameButton
 PROCEDURE Ищем_нужную_кнопку OBJECT IN l_It 
  l_It "Заголовок контрола" РАВНО aNameButton ? (
   l_It "Кликнуть" )
 ; 
 "Для всех видимых элементов статусбара {(контрол::StatusBar:push)} выполнить" Ищем_нужную_кнопку
 "Дождаться переключения вкладок"
;

INTEGER FUNCTION "Узнать количество открытых выпадающих списков Ещё в БП"
 0 >>> Result
 PROCEDURE "Перебор главных окон" INTEGER IN hWnd
  STRING VAR lClass
  hWnd wnd:GetClassName >>> lClass
 ( lClass РАВНО 'TvgPopupForm' ) ? (
  ( hWnd wnd:IsVisible ) ?
   ( ++! Result )
 ) 
; 

 @ "Перебор главных окон" IterateWindows
;

PROCEDURE "Убедиться, что выпадающий список 'Ещё' появился"
 "Дождаться переключения вкладок"
 "Узнать количество открытых выпадающих списков Ещё в БП" РАВНО 1 ?ASSURE 'Выпадающий список Ещё не появился!'
;

PROCEDURE "Убедиться, что выпадающий список 'Ещё' не появился"
 "Дождаться переключения вкладок"
 Если ( "Узнать количество открытых выпадающих списков Ещё в БП" РАВНО 1 ) то
 ( "Нажать Esc"
  false ?ASSURE 'Выпадающий список Ещё появился!'
 )
;

PROCEDURE "Установить фокус на кнопку Типа наследования группы Размер"
 'FontSizeInheritanceButton' "Диалог Редактор стилей" "Найти контрол по имени на форме" "Установить фокус"
 OnTest 
; 

PROCEDURE "Перевести фокус в поле 'Значимость' в ППР"
 "Убедиться, что фокус в редакторе"
 'AT_NORM' "Контрол в фокусе" pop:QueryCard:Attribute:SetFocus
;

BOOLEAN FUNCTION "Группа развернута в КЗ" STRING IN aStr 
 "Дождаться переключения вкладок"
 OBJECT VAR l_QC
 "Убедиться, что фокус в редакторе"
 "Контрол в фокусе" >>> l_QC
 aStr l_QC pop:QueryCard:Attribute:GetCollapsed =: Result 
;

WORDWORKER "Свернуть группы и выполнить" BOOLEAN IN aProc ARRAY IN aName
 ARRAY VAR Massive
 Massive := [  ]
 @ ( STRING IN aNameGroupCollapsed
 OBJECT VAR l_QC
 "Убедиться, что фокус в редакторе"
 "Контрол в фокусе" >>> l_QC
 "Группа {(aNameGroupCollapsed)} развернута в КЗ" >>>[] Massive
 Если ( aProc ) то (
  "Группа {(aNameGroupCollapsed)} развернута в КЗ" ?
   ( aNameGroupCollapsed true l_QC "Установить свернутость группы КЗ" )
 )
 иначе  (
 "Группа {(aNameGroupCollapsed)} развернута в КЗ" ! ?
   ( aNameGroupCollapsed false l_QC "Установить свернутость группы КЗ" )
 )
  ) aName ITERATE
 TRY
  ( WordToWork DO )
 FINALLY
  ППР
  INTEGER VAR Iter
  Iter := 0
  @ ( STRING IN aNameGroupReturn
   BOOLEAN VAR aStatus
   Iter Massive  [i] >>> aStatus
   aNameGroupReturn aStatus ! "Контрол в фокусе" "Установить свернутость группы КЗ"
   ++! Iter
  ) aName ITERATE
 END
;

ARRAY FUNCTION "Координаты текущего параграфа в редакторе" 
 "Убедиться, что фокус в редакторе"
 [ 
  "Контрол в фокусе" pop:editor:ParaCoordsToScreen
 ]
 >>> Result 
;

INTEGER FUNCTION "Координата X текущего параграфа"
 0 "Координаты текущего параграфа в редакторе"   [i]  >>> Result 
;

INTEGER FUNCTION "Координата Y текущего параграфа"
 1 "Координаты текущего параграфа в редакторе"   [i]  >>> Result 
;

OBJECT FUNCTION "Открытое окно"
 INTEGER FUNCTION l_Window
  "Сохранить активное окно" =: Result
 ;

 PROCEDURE "Перебор окон" INTEGER IN hWnd
  STRING VAR lClass
  hWnd РАВНО l_Window ? 
   (  
    hWnd "Найти контрол по дескриптору в стеке" =: Result
   )
 ;

  @ "Перебор окон" IterateWindows
;

PROCEDURE "Проверить активность кнопки на форме " STRING IN aControl OBJECT IN aForm
 OBJECT VAR l_Control
 aControl aForm pop:Control:FindControlByName =: l_Control
 [ 'Активность контрола ' aControl  ': ' l_Control pop:Control:Enabled ToPrintable ] strings:Cat .
;

PROCEDURE "Проверить, что контрол полностью виден" STRING IN aCtrl

 PROCEDURE "Получить окно по координатам и проверить, что оно совпадает с контролом" INTEGER IN CoordX INTEGER IN CoordY
  CoordX CoordY "Найти контрол по дескриптору в стеке {(WindowFromPoint)}" pop:Component:Name РАВНО aCtrl ?ASSURE 'По указанным координатам располагается другой контрол!'
 ;

 "Вывести окно оболочки на первый план"
 INTEGER VAR m_left 0 >>> m_left
 INTEGER VAR m_top 0 >>> m_top
 INTEGER VAR m_height
 INTEGER VAR m_width
 INTEGER VAR m_height_half
 INTEGER VAR m_width_half
 OBJECT VAR l_Ctrl
 
 aCtrl byname:control:push >>> l_Ctrl
 
 "Привести координаты {(@ m_left @ m_top)} для контрола {(l_Ctrl)} к экранным"
 
 "Померить высоту {(l_Ctrl)}" >>> m_height
 "Померить ширину {(l_Ctrl)}" >>> m_width

 m_height 2/ =: m_height_half
 m_width 2/ =: m_width_half

 INTEGER VAR X
 INTEGER VAR Y

 m_left 2 + =: X
 m_top m_height_half + =: Y
 "Получить окно по координатам {(X Y)} и проверить, что оно совпадает с контролом"

 m_left m_width_half + =: X
 m_top 1 + =: Y
 "Получить окно по координатам {(X Y)} и проверить, что оно совпадает с контролом"

 m_left m_width + 4 - =: X
 m_top m_height_half  + =: Y
 "Получить окно по координатам {(X Y)} и проверить, что оно совпадает с контролом"

 m_left m_width_half + =: X
 m_top m_height + 4 - =: Y
 "Получить окно по координатам {(X Y)} и проверить, что оно совпадает с контролом"
;

OBJECT FUNCTION "Выпадающий список Ещё в БП"
 PROCEDURE "Перебор главных окон" INTEGER IN hWnd
  STRING VAR lClass
  hWnd wnd:GetClassName >>> lClass
 ( lClass РАВНО 'TvgPopupForm' ) ? (
  ( hWnd wnd:IsVisible ) ?
   (
    OBJECT VAR l_Form
    hWnd "Найти контрол по дескриптору в стеке" =: Result
   )
  ) 
; 

 "Убедиться, что выпадающий список 'Ещё' появился"
 @ "Перебор главных окон" IterateWindows
;

PROCEDURE "Сравнить выделенный текст текущего редактора с эталоном в формате HTML"
 TRY
  "Сравнить выделенный текст текущего редактора с эталоном в формате {(CF_HTML)}"
 FINALLY
  3 раза ( "Дождаться переключения вкладок" )
  "Вывести окно оболочки на первый план"
 END
;

FORWARD "Найти все линии медалей на форме"

PROCEDURE "Найти все линии медалей на форме" OBJECT IN aForm
 VAR I
 VAR mw
 VAR comp
 I := 0
 mw := aForm
 mw pop:Component:ComponentCount раз (
  comp := ( I mw pop:Component:GetComponent )
  если ( comp ЯВЛЯЕТСЯ class::TvgRemindersLine ) (
   'Линия медалей на форме: ' mw "Узнать имя контрола" ToPrintable Cat .
   comp .
   'Visible: ' comp pop:RemindersLine:Visible ToPrintable Cat .
   "Отделить текст в эталоне"
  )
  иначе
  если ( comp ЯВЛЯЕТСЯ class::TCustomForm ) (
   "Найти все линии медалей на форме {(comp)}"
  )
  I := ( I 1 + )
 )
;

PROCEDURE "Сравнить с эталоном видимость всех линий медалей"
 "Найти все линии медалей на форме {("Текущая активная вкладка")}"
;

WORDWORKER "Убедиться, что выполнение следующих действий не превысит ms" INTEGER IN aTimeProc
 INTEGER VAR CurrentTimeResult
 "Померить время {(@ ( WordToWork DO ) )}" =: CurrentTimeResult
 CurrentTimeResult МЕНЬШЕ aTimeProc ?ASSURE [ 'Указанные действия выполняются дольше (' CurrentTimeResult IntToStr ' ms), чем это запланировано (' aTimeProc IntToStr ' ms) !' ]
;

WORDWORKER "Убедиться, что выполнение следующих действий превысит ms" INTEGER IN aTimeProc
 INTEGER VAR CurrentTimeResult
 "Померить время {(@ ( WordToWork DO ) )}" =: CurrentTimeResult
 CurrentTimeResult БОЛЬШЕ aTimeProc ?ASSURE [ 'Указанные действия выполняются быстрее (' CurrentTimeResult IntToStr ' ms), чем это запланировано (' aTimeProc IntToStr ' ms) !' ]
;

BOOLEAN FUNCTION "Проверяем, активен ли тип информации ?" STRING IN aType
 false =: Result
 VAR l_VG
 aType "Контрол в фокусе" "Родительская форма контрола" "Найти VG-контрол по имени" =: l_VG
 l_VG vg:control:Enabled =: Result
;

PROCEDURE "Сравнить с эталоном активность для типа информации" STRING IN aNameType
 [ 'Активность ' aNameType ': ' ] strings:Cat "Проверяем, активен ли тип информации {(aNameType)}?" ToPrintable Cat .
;

BOOLEAN FUNCTION "Узнать, виден ли контрол вместе со всеми его предками" OBJECT IN aCtrl
  ( aCtrl "Узнать, виден ли контрол" )
   И ( aCtrl "Родительский объект" "Узнать, виден ли контрол" )
   И ( aCtrl 2 раза ( "Родительский объект" ) "Узнать, виден ли контрол" ) =: Result
;

CONST cPagesLeftNavigatorNotFound 'Не нашли область вкладок левого навигатора'

OBJECT FUNCTION "Найти область вкладок левого навигатора"
 PROCEDURE Действия OBJECT IN Контрол
   ( Контрол ЯВЛЯЕТСЯ class::TnscNavigatorPageControl )
   И ( Контрол pop:Component:Name РАВНО контрол::LeftNavigator )
   И ( "Узнать, виден ли контрол {(Контрол)} вместе со всеми его предками" )
   ? (
     Контрол =: Result
     "Закончить перебор контролов"
   )     
 ;
 nil =: Result
 2 раза "Дождаться переключения вкладок"
 "Выполнить для всех контролов {("Левый навигатор")}" Действия
 Result "Объект не существует?" ? (
  2 раза "Дождаться переключения вкладок"
  "Выполнить для всех контролов {("Левый навигатор")}" Действия
 )
 Result "Объект существует?" ?ASSURE cPagesLeftNavigatorNotFound 
;

PROCEDURE "Сравнить заголовки открытых вкладок левого навигатора с эталоном"
 PROCEDURE Действия
  "Найти область вкладок левого навигатора" pop:PageControl:GetAllPageCaptions .
 ; 
 "Дождаться переключения вкладок"
 "Выполнить {(@ Действия)} и если было исключение, то выполнить {(@ NOP)}"
;

PROCEDURE "Установить курсор мыши на VG-контрол" STRING IN aName
 OBJECT VAR l_VG
 INTEGER VAR X
 INTEGER VAR Y
 aName focused:control:push pop:Control:GetParentForm pop:Control:FindVGControlByName =: l_VG
 l_VG vg:control:LeftInScene =: X
 l_VG vg:control:TopInScene =: Y
 Если ( aName РАВНО контрол::AreaCombo ) то
  ( X  ( l_VG vg:control:Width 25 - ) + =: X )
 иначе (
  X  ( l_VG vg:control:Width 5 - ) + =: X )
 Y ( l_VG vg:control:Height 2 / ) + =: Y 
 l_VG vg:control:Scene =: l_VG
 "Установить курсор мыши по координатам {( X Y )} относительно контрола {(l_VG)}"
;

PROCEDURE "Открываем ТК из ОМ"
 "Перевести фокус в {(контрол::tvReferences)} на форме {(форма::MainMenuNew)}"
 "Найти ссылку {('Кодексы Российской Федерации')} в дереве {(контрол::tvReferences)} и перейти по ней"
 "Найти ссылку {('Трудовой кодекс')} в дереве {(контрол::RubricatorList)} и перейти по ней"
;

PROCEDURE "Установить фокус во вкладку 'Прайм. Моя новостная лента'"
 "Перевести фокус в {(контрол::DateList)} на форме {(форма::NewsLine)}"
;

PROCEDURE "Перевести фокус в поле 'ФИО пользователя' в ППО"
 "Убедиться, что фокус в редакторе"
 'AT_USER_NAME' focused:control:push pop:QueryCard:Attribute:SetFocus
;

INTEGER FUNCTION "Высота дерева" STRING IN aTree
 "##Запомнить положение фокуса" (
 "Найти контрол {(aTree)} на форме {("Главное окно")}" "Установить фокус" 
  OBJECT VAR aObject_Tree
  aTree byname:control:push =: aObject_Tree
  STRING VAR aText_Node
  aObject_Tree "Текущая нода дерева" "Текст ноды" =: aText_Node
  0 =: Result
  "Переместиться в начало дерева"
  INTEGER VAR aNode
  0 >>> aNode
  aObject_Tree "Количество элементов дерева" раз ( 
   Result ( aNode aObject_Tree "Высота ноды дерева" ) + =: Result
   "Нажать {('Down')}"
   ++! aNode
  )
  "Переместиться в начало дерева"
  "Найти атрибут {(aText_Node)} в дереве {(aTree)}"
 )
;

PROCEDURE "Убедиться, что высота дерева оглавления больше или равна двум строкам"
 "Высота дерева {(контрол::ContentsTree)}" "БОЛЬШЕ ИЛИ РАВНО" 32 ?ASSURE 'Высота дерева оглавления меньше двух строк! Это не правильно!'
;

PROCEDURE "Удалить сохраненный объект из вкладки 'Мои документы'"
 PROCEDURE Действия
   3 раза "Дождаться переключения вкладок"
   "Дать системе перерисоваться"
  "Переместиться в начало дерева"
  "Развернуть текущее дерево"
  "Стрелка вниз"
  "Ответить один раз Да для {(@ "Нажать Del")}"
 ;

 "Открыть мои документы и выполнить {(@ Действия)}"
;

WORDWORKER "Создать папку, переместить верхнюю границу 'Свойства объекта' вплотную к FoldersTree (без появления скролла) и выполнить"
 TRY
  "Создать папку"
  INTEGER VAR Y
  "Высота дерева {(контрол::FoldersTree)}" 10 + >>> Y  
  OBJECT VAR "Дерево с Моими документами"
  "Найти контрол {(контрол::FoldersTree)} на форме {("Главное окно")}" =: "Дерево с Моими документами"
  OBJECT VAR "Окно с информацией об объекте"
  "Найти контрол {('enFoldersElementInfo')} на форме {("Главное окно")}" =: "Окно с информацией об объекте"
  "Установить курсор мыши по координатам {( 10 -5 )} относительно контрола {("Окно с информацией об объекте")}"
  THREAD ( 500 SLEEP 
   "Установить курсор мыши по координатам {(50 Y )} относительно контрола {("Дерево с Моими документами")}"  
   "Отпустить левую кнопку мыши" )
  "Зажать левую кнопку мыши"
  1000 SLEEP 
  "Дать системе перерисоваться"
  "Дождаться переключения вкладок"
  ( WordToWork DO )
 FINALLY
  "Удалить сохраненный объект из вкладки 'Мои документы'"
 END  
;

USES
 Filters.script
;

PROCEDURE "Сравнить с эталоном высоту и количество элементов дерева фильтров"
 "Установить фокус во вкладку Фильтры"
 'Общая высота дерева фильтров (в пикселях): ' "Высота дерева {(контрол::FiltersList)}" ToPrintable Cat .
 'Количество фильтров: ' "Контрол в фокусе" "Количество элементов дерева" ToPrintable Cat .
;

PROCEDURE "Проверить, что у контрола FoldersTree есть вертикальный скроллер"
 "Дождаться переключения вкладок"
 "Установить фокус во вкладку Мои документы" 
 "Проверить, что у контрола {("Контрол в фокусе")} есть вертикальный скроллер"
;

PROCEDURE "Сравнить с эталоном отступ первой ноды от верха для дерева FoldersTree"
 "Установить фокус во вкладку Мои документы"
 1 контрол::FoldersTree:push tree:GetItem:Top .
;

PROCEDURE "Потянуть вертикальный скроллер контрола вниз на пикселей с перерисовкой " OBJECT IN aControl INTEGER IN aDistanceMoveScroller BOOLEAN IN aNeedPause
 aControl pop:Control:VScrollerVisible ?ASSURE [ 'У контрола ' aControl pop:Component:Name ' нет вертикального скроллбара' ]
 INTEGER VAR X
 INTEGER VAR Y
 "Померить ширину {(aControl)}" =: X
 X 10 - =: X
 Y := 18
 "Установить курсор мыши по координатам {( X Y )} относительно контрола {("Контрол в фокусе")}"
 Y aDistanceMoveScroller + >>> Y
 THREAD (
  "Зажать левую кнопку мыши"
  "Установить курсор мыши по координатам {( X Y)} относительно контрола {("Контрол в фокусе")}"
  aNeedPause ? (
   "Дождаться переключения вкладок"
  )
  "Отпустить левую кнопку мыши"
 )
 50 SLEEP
; 

PROCEDURE "Потянуть вертикальный скроллер контрола вниз на пикселей" OBJECT IN aControl INTEGER IN aDistanceMoveScroller 
 "Потянуть вертикальный скроллер контрола {(aControl )} вниз на {(aDistanceMoveScroller )} пикселей с перерисовкой {(false)}"
;

PROCEDURE "Потянуть вертикальный скроллер текущего контрола вниз до конца"
 INTEGER VAR aHeightEditor
 "Убедиться, что фокус в редакторе"
 "Контрол в фокусе" "Померить высоту" =: aHeightEditor 
 aHeightEditor 15 - =: aHeightEditor
 "Потянуть вертикальный скроллер контрола {("Контрол в фокусе")} вниз на {(aHeightEditor)}  пикселей с перерисовкой {(true)}"
;

PROCEDURE "Убедиться, что контрол виден и активен" OBJECT IN aCtrl
 aCtrl "Объект существует?" ?ASSURE 'Контрол не найден'
 "Проверить, что контрол {(aCtrl)} видимый"
 aCtrl "Убедиться, что контрол активен" ?ASSURE 'Контрол не активен!'
;

PROCEDURE "Сравнить с эталоном ширину контрола" OBJECT IN aCtrl
 [ 'Ширина ' aCtrl "Имя компонента" ' = '  aCtrl "Померить ширину" IntToStr  ] strings:Cat .
;

VOID WORDWORKER "Убедиться, что плавающий навигатор будет виден после выполнения"
 OBJECT VAR aFloatingNavigator
 ( WordToWork DO ) 
 "Отдоченная форма" =: aFloatingNavigator
 "Дождаться переключения вкладок"
 "Проверить, что контрол {(aFloatingNavigator)} видимый"
;

VOID WORDWORKER "Установить размер кнопок и выполнить" INTEGER IN aGlyphSize
 INTEGER VAR aFirstGlyphSize
 vcm:Toolbar:GetGlyphSize =: aFirstGlyphSize
 TRY
  aGlyphSize vcm:Toolbar:SetGlyphSize
  "Дождаться переключения вкладок"
  ( WordToWork DO )
 FINALLY
  aFirstGlyphSize vcm:Toolbar:SetGlyphSize
  "Дождаться переключения вкладок"
 END
;

PROCEDURE "Перевести фокус в поле 'Ваша профессия' в Прайме"
 "Убедиться, что фокус в редакторе"
 'AT_ANNO_USER' focused:control:push pop:QueryCard:Attribute:SetFocus
;

PROCEDURE "Перевести фокус в поле 'Ваша организация' в Прайме"
 "Убедиться, что фокус в редакторе"
 'AT_ANNO_ORG' focused:control:push pop:QueryCard:Attribute:SetFocus
;

PROCEDURE "Перевести фокус в поле 'Сфера интересов' в Прайме"
 "Убедиться, что фокус в редакторе"
 'AT_ANNO_INTEREST' focused:control:push pop:QueryCard:Attribute:SetFocus
;

PROCEDURE "Перевести фокус в поле 'Самые значимые документы' в Прайме"
 "Убедиться, что фокус в редакторе"
 'AT_IMPORTANT_DOCUMENTS' focused:control:push pop:QueryCard:Attribute:SetFocus
;

PROCEDURE "Заполнить все обязательные поля Прайма"
 "Перевести фокус в поле 'Ваша профессия' в Прайме"
 "Ввести строку {('Бухгалтер, финансист')}"
 "Нажать Enter"
 "Перевести фокус в поле 'Ваша организация' в Прайме"
 "Ввести строку {('Бюджетная организация')}"
 "Нажать Enter"
 "Перевести фокус в поле 'Сфера интересов' в Прайме"
 "Ввести строку {('Банки, кредитные организации')}"
 "Нажать Enter"
;

PROCEDURE "Нажать кнопку Сохранить в Прайме"
 TRY
  OBJECT VAR "Сохранить"
  "Найти контрол {(контрол::bt_enResult_opOkExt)} на форме {("Главное окно")}" =: "Сохранить"
  "Сохранить" "Объект существует?" ?ASSURE 'Не нашли кнопку Сохранить'
  "Сохранить" "Кликнуть"
 FINALLY
  "Найти контрол {(контрол::tvPostings)} на форме {("Главное окно")}" "Установить фокус"
  "Дождаться переключения вкладок"
  ( "Заголовок текущего контрола" НЕРАВНО '' ) ? 
   ( "Ответить один раз Да для {( @ "Удалить новостную ленту" )}" )
 END
;

PROCEDURE "Установить фокус в комбобокс Отступ после текста"
 "Найти контрол {(контрол::SpaceAfterComboBox)} на форме {("Диалог Редактор стилей")}" "Установить фокус"
 OnTest 
;

WordAlias "Сравнить название текущего выделенного термина из списка терминов с эталоном" "Сравнить название текущего термина с эталоном"

PROCEDURE "Убедиться, что невозможно перевести фокус в оглавление"
 "Дождаться переключения вкладок"
 "Удалось перевести фокус в оглавление?" ! ?ASSURE 'Удалось перевести фокус в оглавление!'
;

PROCEDURE "Сравнить с эталоном пункт раздела главного меню" STRING IN aItem STRING IN aItemSection
 VAR Menu
 aItemSection "Текущая активная вкладка" "Найти элементы меню на форме " >>> Menu
 "Сравнить пункт {(aItem)} меню {(Menu)} с эталоном"
;

PROCEDURE "Добавить фильтр из сохраненных запросов с именем " STRING IN aName
  PROCEDURE Действия
   "Ввести строку {(aName)}"
   OBJECT VAR "Форма сохранения в фильтр"
   OBJECT VAR "Кнопка ОК"
   "Контрол в фокусе" "Получить родительскую форму" =: "Форма сохранения в фильтр"
   контрол::bt_enResult_opOkExt "Форма сохранения в фильтр" "Найти контрол по имени на форме" =: "Кнопка ОК"
   "Кнопка ОК" "Кликнуть"
  ;
 3 раза ( "Дождаться переключения вкладок" )
 @ ( оп::Сохраненный_запрос_Добавить_фильтр_из_сохраненных_запросов ) MODAL ( Действия )
;

INTEGER FUNCTION "Индекс иконки для вкладки" INTEGER IN NumTab
 ( NumTab 1 - ) vcm:tabs:GetIconIndex =: Result
 Result НЕРАВНО -1 ?ASSURE 'Индекс вкладки -1! Вероятно, иконки нет!'
 // Подробнее об индексах: [$596403052]
;

PROCEDURE "Сравнить индексы иконок всех вкладок окна с эталоном"
 INTEGER VAR CountTab
 CountTab := 1
 vcm:tabs:Count раз (
  [ 'Индекс иконки для ' CountTab IntToStr ' вкладки: ' "Индекс иконки для {(CountTab)} вкладки" IntToStr ] strings:Cat .
  ++! CountTab 
 )
;

PROCEDURE "Найти конфигурацию " STRING IN NameConf
 "Найти атрибут {(NameConf)} в дереве {(контрол::tvConfs)}"  
;

USES
 axiom:Logging
;

VOID WORDWORKER "Сравнить с эталоном записи в логе после выполнения"
 logging:StartListening
 TRY
  WordToWork DO
  logging:GetLogRecords .
 FINALLY
  logging:FinishListening
 END
;

PROCEDURE "Установить фокус во вкладку Конфигурации"
 "Перевести фокус в {(контрол::tvConfs)} на форме {(форма::ConfigurationList)}"
;

OBJECT FUNCTION "Плашка 'Энциклопедия решений'"
 "Найти контрол {(контрол::pbLinkToContent)} на форме {("Текущая активная вкладка")}" =: Result
;

PROCEDURE "Открыть случайный документ из массива " IN aID
 INTEGER VAR NumDoc
 ( aID Array:Count Random aID [i] ) =: NumDoc
 "Открываем {(NumDoc)}"
;

VOID WORDWORKER "Открыть поочередно документы из массива и выполнить с каждым" IN aID
 @ ( INTEGER IN NumDoc
  "Открываем {(NumDoc)}"
  ( WordToWork DO )
 ) aID ITERATE
;

WordAlias "Записать в лог количество обращений к подсказке БП без закрытия оболочки" logging:WriteCachedEvents
WordAlias "Записать в лог всю информацию, которая формируется при закрытии оболочки" logging:WriteCachedEvents

: "в поле 'Статус' ввести" STRING IN aStr
 "Убедиться, что фокус в редакторе"
 'AT_STATUS' aStr focused:control:push pop:QueryCard:SetAttribute
;

OBJECT FUNCTION "Меню выбора профессии"
 OBJECT VAR "Текущая форма"
 "Найти контрол {(контрол::lblTaxes)} на форме {("Текущая активная вкладка")}" =: Result
;

PROCEDURE "Сравнить с эталоном наличие скроллеров у контрола " OBJECT IN Ctrl
 'Вертикальный скроллер: ' Ctrl pop:Control:VScrollerVisible ToPrintable Cat .
 'Горизонтальный скроллер: ' Ctrl pop:Control:HScrollerVisible ToPrintable Cat .
;