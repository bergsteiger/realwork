///////////////////////////////////////////////////////////////////////////////

#include "lex_operator.h"
#include "lex_parser.h"

///////////////////////////////////////////////////////////////////////////////

Match::Match()
{
	m_ok = false;
	m_length = 0;
}

///////////////////////////////////////////////////////////////////////////////

Match::Match(long ok, long length)
{
	m_ok = ok;
	m_length = length;
}

///////////////////////////////////////////////////////////////////////////////

Match::~Match()
{
}

///////////////////////////////////////////////////////////////////////////////

void	Match::ok(long ok)
{
	m_ok = ok;
}

///////////////////////////////////////////////////////////////////////////////

long	Match::ok(void)
{
	return m_ok;
}

///////////////////////////////////////////////////////////////////////////////

void	Match::length(long length)
{
	m_length = length;
}

///////////////////////////////////////////////////////////////////////////////

long	Match::length(void)
{
	return m_length;
}

///////////////////////////////////////////////////////////////////////////////

Match::operator bool()
{
	return (m_ok > 0) ? true : false;
}

///////////////////////////////////////////////////////////////////////////////

bool	Match::operator==(Match &match)
{
	if( (m_ok == match.ok()) && (m_length == match.length()) ) {
		return true;
	}

	return false;
}

///////////////////////////////////////////////////////////////////////////////

Parser::Parser()
{
}

///////////////////////////////////////////////////////////////////////////////

Parser::Parser(Parser &parser)
{
	m_parser = &parser;
}

///////////////////////////////////////////////////////////////////////////////

Parser::~Parser()
{
}

///////////////////////////////////////////////////////////////////////////////

Parser	&Parser::operator[](CallAction callAction)
{
	return *(new Action(*this, callAction));
}

///////////////////////////////////////////////////////////////////////////////

Parser	&Parser::operator = (Parser &parser)
{
	m_parser = &parser;
	return *this;
}

///////////////////////////////////////////////////////////////////////////////

Match	Parser::Parse(const char *buf)
{
	return m_parser->Parse(buf);
}

///////////////////////////////////////////////////////////////////////////////
