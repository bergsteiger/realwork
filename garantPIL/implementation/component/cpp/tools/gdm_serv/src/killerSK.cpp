// This file is generated by omniidl (C++ backend)- omniORB_3_0. Do not edit.

#include "killer.h"
#include <omniORB3/callDescriptor.h>

static const char* _0RL_library_version = omniORB_3_0;

OrbKiller_ptr OrbKiller_Helper::_nil() {
  return OrbKiller::_nil();
}

CORBA::Boolean OrbKiller_Helper::is_nil(OrbKiller_ptr p) {
  return CORBA::is_nil(p);

}

void OrbKiller_Helper::release(OrbKiller_ptr p) {
  CORBA::release(p);
}

void OrbKiller_Helper::duplicate(OrbKiller_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t OrbKiller_Helper::NP_alignedSize(OrbKiller_ptr obj, size_t offset) {
  return OrbKiller::_alignedSize(obj, offset);
}

void OrbKiller_Helper::marshalObjRef(OrbKiller_ptr obj, NetBufferedStream& s) {
  OrbKiller::_marshalObjRef(obj, s);
}

OrbKiller_ptr OrbKiller_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return OrbKiller::_unmarshalObjRef(s);
}

void OrbKiller_Helper::marshalObjRef(OrbKiller_ptr obj, MemBufferedStream& s) {
  OrbKiller::_marshalObjRef(obj, s);
}

OrbKiller_ptr OrbKiller_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return OrbKiller::_unmarshalObjRef(s);
}

OrbKiller_ptr
OrbKiller::_duplicate(OrbKiller_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

OrbKiller_ptr
OrbKiller::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

OrbKiller_ptr
OrbKiller::_nil()
{
  static _objref_OrbKiller* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_OrbKiller;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* OrbKiller::_PD_repoId = "IDL:OrbKiller:1.0";

_objref_OrbKiller::~_objref_OrbKiller() {}

_objref_OrbKiller::_objref_OrbKiller(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   
   omniObjRef(OrbKiller::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_OrbKiller::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, OrbKiller::_PD_repoId) )
    return (OrbKiller_ptr) this;
  
  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_1cbcbcc6a1c035b4_00000000(omniCallDescriptor* cd, omniServant* svnt)
{
  
  _impl_OrbKiller* impl = (_impl_OrbKiller*) svnt->_ptrToInterface(OrbKiller::_PD_repoId);
  impl->kill();
}

void _objref_OrbKiller::kill()
{
  omniStdCallDesc::void_call _call_desc(_0RL_lcfn_1cbcbcc6a1c035b4_00000000, "kill", 5, 0);
  
  _invoke(_call_desc);
  
}

_pof_OrbKiller::~_pof_OrbKiller() {}

omniObjRef*
_pof_OrbKiller::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_OrbKiller(mdri, p, id, lid);
}

CORBA::Boolean
_pof_OrbKiller::is_a(const char* id) const
{
  if( !strcmp(id, OrbKiller::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_OrbKiller _the_pof_OrbKiller;

_impl_OrbKiller::~_impl_OrbKiller() {}

CORBA::Boolean
_impl_OrbKiller::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "kill") ) {
    
    giop_s.RequestReceived();
    
    this->kill();
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  return 0;
}

void*
_impl_OrbKiller::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, OrbKiller::_PD_repoId) )
    return (_impl_OrbKiller*) this;
  
  return 0;
}

const char*
_impl_OrbKiller::_mostDerivedRepoId()
{
  return OrbKiller::_PD_repoId;
}

POA_OrbKiller::~POA_OrbKiller() {}

