// This file is generated by omniidl (C++ backend)- omniORB_3_0. Do not edit.
#ifndef __merger_hh__
#define __merger_hh__

#ifndef USE_omniORB_logStream
#define USE_omniORB_logStream
#endif

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB3/CORBA.h>
#endif

#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_merger
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_merger
#endif

#ifndef __strings__struct_h_EXTERNAL_GUARD__
#define __strings__struct_h_EXTERNAL_GUARD__
#include <strings_struct.h>
#endif

#ifdef USE_stub_in_nt_dll
#ifndef USE_core_stub_in_nt_dll
#define USE_core_stub_in_nt_dll
#endif
#ifndef USE_dyn_stub_in_nt_dll
#define USE_dyn_stub_in_nt_dll
#endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif

class MemArr_var;

class MemArr : public _CORBA_Unbounded_Sequence__Octet {
public:
  typedef MemArr_var _var_type;
  inline MemArr() {}
  inline MemArr(const MemArr& s)
    : _CORBA_Unbounded_Sequence__Octet(s) {}

  inline MemArr(_CORBA_ULong _max)
    : _CORBA_Unbounded_Sequence__Octet(_max) {}
  inline MemArr(_CORBA_ULong _max, _CORBA_ULong _len, CORBA::Octet* _val, _CORBA_Boolean _rel=0)
    : _CORBA_Unbounded_Sequence__Octet(_max, _len, _val, _rel) {}

  inline MemArr& operator = (const MemArr& s) {
    _CORBA_Unbounded_Sequence__Octet::operator=(s);
    return *this;
  }
};

class MemArr_out;

class MemArr_var {
public:
  typedef MemArr T;
  typedef MemArr_var T_var;

  inline MemArr_var() : _pd_seq(0) {}
  inline MemArr_var(T* s) : _pd_seq(s) {}
  inline MemArr_var(const T_var& s) {
    if( s._pd_seq )  _pd_seq = new T(*s._pd_seq);
    else             _pd_seq = 0;
  }
  inline ~MemArr_var() { if( _pd_seq )  delete _pd_seq; }

  inline T_var& operator = (T* s) {
    if( _pd_seq )  delete _pd_seq;
    _pd_seq = s;
    return *this;
  }
  inline T_var& operator = (const T_var& s) {
    if( s._pd_seq ) {
      if( !_pd_seq )  _pd_seq = new T;
      *_pd_seq = *s._pd_seq;
    } else if( _pd_seq ) {
      delete _pd_seq;
      _pd_seq = 0;
    }
    return *this;
  }

  inline CORBA::Octet& operator [] (_CORBA_ULong s) {
    return (*_pd_seq)[s];
  }

  inline T* operator -> () { return _pd_seq; }
#if defined(__GNUG__) && __GNUG__ == 2 && __GNUC_MINOR__ == 7
  inline operator T& () const { return *_pd_seq; }
#else
  inline operator const T& () const { return *_pd_seq; }
  inline operator T& () { return *_pd_seq; }
#endif

  inline const T& in() const { return *_pd_seq; }
  inline T&       inout()    { return *_pd_seq; }
  inline T*&      out() {
    if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
    return _pd_seq;
  }
  inline T* _retn() { T* tmp = _pd_seq; _pd_seq = 0; return tmp; }

  friend class MemArr_out;

private:
  T* _pd_seq;
};

class MemArr_out {
public:
  typedef MemArr T;
  typedef MemArr_var T_var;

  inline MemArr_out(T*& s) : _data(s) { _data = 0; }
  inline MemArr_out(T_var& s)
    : _data(s._pd_seq) { s = (T*) 0; }
  inline MemArr_out(const MemArr_out& s) : _data(s._data) {}
  inline MemArr_out& operator = (const MemArr_out& s) {
    _data = s._data;
    return *this;
  }  inline MemArr_out& operator = (T* s) {
    _data = s;
    return *this;
  }
  inline operator T*&()  { return _data; }
  inline T*& ptr()       { return _data; }
  inline T* operator->() { return _data; }

  inline CORBA::Octet& operator [] (_CORBA_ULong i) {
    return (*_data)[i];
  }

  T*& _data;

private:
  MemArr_out();
  MemArr_out& operator=(const T_var&);
};

enum ExceptionType { exInvalidVersion, exInvalidSize, exUnknownError, exInvalidHeader, exDifferentRev, exDifferentClass, exMultySegs, exOverlapping, exDifferentBody, exFileOpenError, exUnexistSegs, exUnexistPeriod };
typedef ExceptionType& ExceptionType_out;

#ifndef __Merger__
#define __Merger__

class Merger;
class _objref_Merger;
class _impl_Merger;

typedef _objref_Merger* Merger_ptr;
typedef Merger_ptr MergerRef;

class Merger_Helper {
public:
  typedef Merger_ptr _ptr_type;

  static _ptr_type _nil();
  static _CORBA_Boolean is_nil(_ptr_type);
  static void release(_ptr_type);
  static void duplicate(_ptr_type);
  static size_t NP_alignedSize(_ptr_type, size_t);
  static void marshalObjRef(_ptr_type, NetBufferedStream&);
  static _ptr_type unmarshalObjRef(NetBufferedStream&);
  static void marshalObjRef(_ptr_type, MemBufferedStream&);
  static _ptr_type unmarshalObjRef(MemBufferedStream&);
};

typedef _CORBA_ObjRef_Var<_objref_Merger, Merger_Helper> Merger_var;
typedef _CORBA_ObjRef_OUT_arg<_objref_Merger,Merger_Helper > Merger_out;

#endif

class Merger {
public:
  // Declarations for this interface type.
  typedef Merger_ptr _ptr_type;
  typedef Merger_var _var_type;

  static _ptr_type _duplicate(_ptr_type);
  static _ptr_type _narrow(CORBA::Object_ptr);
  static _ptr_type _nil();

  static inline size_t _alignedSize(_ptr_type, size_t);
  static inline void _marshalObjRef(_ptr_type, NetBufferedStream&);
  static inline void _marshalObjRef(_ptr_type, MemBufferedStream&);

  static inline _ptr_type _unmarshalObjRef(NetBufferedStream& s) {
    CORBA::Object_ptr obj = CORBA::UnMarshalObjRef(_PD_repoId, s);
    _ptr_type result = _narrow(obj);
    CORBA::release(obj);
    return result;
  }

  static inline _ptr_type _unmarshalObjRef(MemBufferedStream& s) {
    CORBA::Object_ptr obj = CORBA::UnMarshalObjRef(_PD_repoId, s);
    _ptr_type result = _narrow(obj);
    CORBA::release(obj);
    return result;
  }

  static _core_attr const char* _PD_repoId;

  // Other IDL defined within this scope.
  class LoadingExcept : public CORBA::UserException {
  public:

    CORBA::String_member filename;

    ExceptionType ex_type;

    CORBA::Any ex_data;

    inline LoadingExcept() {
      pd_insertToAnyFn    = insertToAnyFn;
      pd_insertToAnyFnNCP = insertToAnyFnNCP;
    }
    LoadingExcept(const LoadingExcept&);
    LoadingExcept(const char* i_filename, ExceptionType i_ex_type, const CORBA::Any& i_ex_data);
    LoadingExcept& operator=(const LoadingExcept&);
    virtual ~LoadingExcept();
    virtual void _raise();
    static LoadingExcept* _downcast(CORBA::Exception*);
    static const LoadingExcept* _downcast(const CORBA::Exception*);
    static inline LoadingExcept* _narrow(CORBA::Exception* _e) {
      return _downcast(_e);
    }

    size_t _NP_alignedSize(size_t) const;

    void operator>>=(NetBufferedStream&) const ;
    void operator>>=(MemBufferedStream&) const ;
    void operator<<=(NetBufferedStream&) ;
    void operator<<=(MemBufferedStream&) ;

    static _core_attr insertExceptionToAny    insertToAnyFn;
    static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

    virtual CORBA::Exception* _NP_duplicate() const;

    static _core_attr const char* _PD_repoId;

  private:
    virtual const char* _NP_typeId() const;
    virtual const char* _NP_repoId(int*) const;
    virtual void _NP_marshal(NetBufferedStream&) const;
    virtual void _NP_marshal(MemBufferedStream&) const;
  };

  class AssemblingExcept : public CORBA::UserException {
  public:

    ExceptionType ex_type;

    CORBA::Any ex_data;

    inline AssemblingExcept() {
      pd_insertToAnyFn    = insertToAnyFn;
      pd_insertToAnyFnNCP = insertToAnyFnNCP;
    }
    AssemblingExcept(const AssemblingExcept&);
    AssemblingExcept(ExceptionType i_ex_type, const CORBA::Any& i_ex_data);
    AssemblingExcept& operator=(const AssemblingExcept&);
    virtual ~AssemblingExcept();
    virtual void _raise();
    static AssemblingExcept* _downcast(CORBA::Exception*);
    static const AssemblingExcept* _downcast(const CORBA::Exception*);
    static inline AssemblingExcept* _narrow(CORBA::Exception* _e) {
      return _downcast(_e);
    }

    size_t _NP_alignedSize(size_t) const;

    void operator>>=(NetBufferedStream&) const ;
    void operator>>=(MemBufferedStream&) const ;
    void operator<<=(NetBufferedStream&) ;
    void operator<<=(MemBufferedStream&) ;

    static _core_attr insertExceptionToAny    insertToAnyFn;
    static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

    virtual CORBA::Exception* _NP_duplicate() const;

    static _core_attr const char* _PD_repoId;

  private:
    virtual const char* _NP_typeId() const;
    virtual const char* _NP_repoId(int*) const;
    virtual void _NP_marshal(NetBufferedStream&) const;
    virtual void _NP_marshal(MemBufferedStream&) const;
  };

  class UnknownExcept : public CORBA::UserException {
  public:

    ExceptionType ex_type;

    inline UnknownExcept() {
      pd_insertToAnyFn    = insertToAnyFn;
      pd_insertToAnyFnNCP = insertToAnyFnNCP;
    }
    UnknownExcept(const UnknownExcept&);
    UnknownExcept(ExceptionType i_ex_type);
    UnknownExcept& operator=(const UnknownExcept&);
    virtual ~UnknownExcept();
    virtual void _raise();
    static UnknownExcept* _downcast(CORBA::Exception*);
    static const UnknownExcept* _downcast(const CORBA::Exception*);
    static inline UnknownExcept* _narrow(CORBA::Exception* _e) {
      return _downcast(_e);
    }

    size_t _NP_alignedSize(size_t) const;

    void operator>>=(NetBufferedStream&) const ;
    void operator>>=(MemBufferedStream&) const ;
    void operator<<=(NetBufferedStream&) ;
    void operator<<=(MemBufferedStream&) ;

    static _core_attr insertExceptionToAny    insertToAnyFn;
    static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

    virtual CORBA::Exception* _NP_duplicate() const;

    static _core_attr const char* _PD_repoId;

  private:
    virtual const char* _NP_typeId() const;
    virtual const char* _NP_repoId(int*) const;
    virtual void _NP_marshal(NetBufferedStream&) const;
    virtual void _NP_marshal(MemBufferedStream&) const;
  };

};

class _objref_Merger :
  public virtual CORBA::Object, public virtual omniObjRef
{
public:
  CORBA::Short loadDeltas(const StringArr& mrgFiles, CORBA::Short cl_id);
  CORBA::Short unLoadDeltas(const StrPeriod& p);
  CORBA::Short assemblingDelta(const StrSettings& settings, CORBA::String_out outname, CORBA::Short cl_id);
  ShortArr* whatForPeriod(const StrPeriod& p);
  StrPeriodArr* getAllPeriods();
  
  inline _objref_Merger() { _PR_setobj(0); }  // nil
  _objref_Merger(const char*, IOP::TaggedProfileList*, omniIdentity*, omniLocalIdentity*);

protected:
  virtual ~_objref_Merger();

private:
  virtual void* _ptrToObjRef(const char*);

  _objref_Merger(const _objref_Merger&);
  _objref_Merger& operator = (const _objref_Merger&);
  // not implemented
};

class _pof_Merger : public proxyObjectFactory {
public:
  inline _pof_Merger() : proxyObjectFactory(Merger::_PD_repoId) {}
  virtual ~_pof_Merger();

  virtual omniObjRef* newObjRef(const char*, IOP::TaggedProfileList*,
                                omniIdentity*, omniLocalIdentity*);
  virtual _CORBA_Boolean is_a(const char*) const;
};

class _impl_Merger :
  public virtual omniServant
{
public:
  virtual ~_impl_Merger();

  virtual CORBA::Short loadDeltas(const StringArr& mrgFiles, CORBA::Short cl_id) = 0;
  virtual CORBA::Short unLoadDeltas(const StrPeriod& p) = 0;
  virtual CORBA::Short assemblingDelta(const StrSettings& settings, CORBA::String_out outname, CORBA::Short cl_id) = 0;
  virtual ShortArr* whatForPeriod(const StrPeriod& p) = 0;
  virtual StrPeriodArr* getAllPeriods() = 0;
  
public:  // Really protected, workaround for xlC
  virtual _CORBA_Boolean _dispatch(GIOP_S&);

private:
  virtual void* _ptrToInterface(const char*);
  virtual const char* _mostDerivedRepoId();
};

class POA_Merger :
  public virtual _impl_Merger,
  public virtual PortableServer::ServantBase
{
public:
  virtual ~POA_Merger();

  inline Merger_ptr _this() {
    return (Merger_ptr) _do_this(Merger::_PD_repoId);
  }
};

#undef _core_attr
#undef _dyn_attr

inline void operator >>=(ExceptionType _e, NetBufferedStream& s) {
  ::operator>>=((CORBA::ULong)_e, s);
}

inline void operator <<= (ExceptionType& _e, NetBufferedStream& s) {
  CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  switch (_0RL_e) {
    case exInvalidVersion:

    case exInvalidSize:

    case exUnknownError:

    case exInvalidHeader:

    case exDifferentRev:

    case exDifferentClass:

    case exMultySegs:

    case exOverlapping:

    case exDifferentBody:

    case exFileOpenError:

    case exUnexistSegs:

    case exUnexistPeriod:

    _e = (ExceptionType) _0RL_e;
    break;
  default:
    _CORBA_marshal_error();
  }
}

inline void operator >>=(ExceptionType _e, MemBufferedStream& s) {
  ::operator>>=((CORBA::ULong)_e, s);
}

inline void operator <<= (ExceptionType& _e, MemBufferedStream& s) {
  CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  switch (_0RL_e) {
    case exInvalidVersion:

    case exInvalidSize:

    case exUnknownError:

    case exInvalidHeader:

    case exDifferentRev:

    case exDifferentClass:

    case exMultySegs:

    case exOverlapping:

    case exDifferentBody:

    case exFileOpenError:

    case exUnexistSegs:

    case exUnexistPeriod:

    _e = (ExceptionType) _0RL_e;
    break;
  default:
    _CORBA_marshal_error();
  }
}

inline size_t
Merger::_alignedSize(Merger_ptr obj, size_t offset) {
  return CORBA::AlignedObjRef(obj, _PD_repoId, 15, offset);
}

inline void
Merger::_marshalObjRef(Merger_ptr obj, NetBufferedStream& s) {
  CORBA::MarshalObjRef(obj, _PD_repoId, 15, s);
}

inline void
Merger::_marshalObjRef(Merger_ptr obj, MemBufferedStream& s) {
  CORBA::MarshalObjRef(obj, _PD_repoId, 15, s);
}

#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_merger
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_merger
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_merger
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_merger
#endif

#endif  // __merger_hh__

