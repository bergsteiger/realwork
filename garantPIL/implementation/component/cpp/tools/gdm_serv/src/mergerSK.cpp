// This file is generated by omniidl (C++ backend)- omniORB_3_0. Do not edit.

#include "merger.h"
#include <omniORB3/callDescriptor.h>

static const char* _0RL_library_version = omniORB_3_0;

CORBA::Exception::insertExceptionToAny Merger::LoadingExcept::insertToAnyFn = 0;
CORBA::Exception::insertExceptionToAnyNCP Merger::LoadingExcept::insertToAnyFnNCP = 0;

Merger::LoadingExcept::LoadingExcept(const Merger::LoadingExcept& _s) : CORBA::UserException(_s)
{
  filename = _s.filename;
  ex_type = _s.ex_type;
  ex_data = _s.ex_data;
  
}

Merger::LoadingExcept::LoadingExcept(const char* _filename, ExceptionType _ex_type, const CORBA::Any& _ex_data)
{
  pd_insertToAnyFn    = Merger::LoadingExcept::insertToAnyFn;
  pd_insertToAnyFnNCP = Merger::LoadingExcept::insertToAnyFnNCP;
  filename = _filename;
  ex_type = _ex_type;
  ex_data = _ex_data;
  
}

Merger::LoadingExcept& Merger::LoadingExcept::operator=(const Merger::LoadingExcept& _s)
{
  ((CORBA::UserException*) this)->operator=(_s);
  filename = _s.filename;
  ex_type = _s.ex_type;
  ex_data = _s.ex_data;
  
  return *this;
}

Merger::LoadingExcept::~LoadingExcept() {}

void Merger::LoadingExcept::_raise() { throw *this; }

Merger::LoadingExcept* Merger::LoadingExcept::_downcast(CORBA::Exception* _e) {
  return (LoadingExcept*) _NP_is_a(_e, "Exception/UserException/Merger::LoadingExcept");
}

const Merger::LoadingExcept* Merger::LoadingExcept::_downcast(const CORBA::Exception* _e) {
  return (const LoadingExcept*) _NP_is_a(_e, "Exception/UserException/Merger::LoadingExcept");
}

const char* Merger::LoadingExcept::_PD_repoId = "IDL:Merger/LoadingExcept:1.0";

CORBA::Exception* Merger::LoadingExcept::_NP_duplicate() const {
  return new LoadingExcept(*this);
}

const char* Merger::LoadingExcept::_NP_typeId() const {
  return "Exception/UserException/Merger::LoadingExcept";
}

const char* Merger::LoadingExcept::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:Merger/LoadingExcept:1.0");
  return "IDL:Merger/LoadingExcept:1.0";
}

void Merger::LoadingExcept::_NP_marshal(NetBufferedStream& _s) const {
  *this >>= _s;
}

void Merger::LoadingExcept::_NP_marshal(MemBufferedStream& _s) const {
  *this >>= _s;
}

size_t
Merger::LoadingExcept::_NP_alignedSize(size_t _msgsize) const
{
  _msgsize = omni::align_to(_msgsize, omni::ALIGN_4) + 4;
  _msgsize += ((const char*) filename) ? strlen((const char*) filename) + 1 : 1;
  
  _msgsize = omni::align_to(_msgsize, omni::ALIGN_4) + 4;
  
  _msgsize = ex_data._NP_alignedSize(_msgsize);
  
  return _msgsize;
}

void
Merger::LoadingExcept::operator>>= (NetBufferedStream& _n) const
{
  {
    CORBA::ULong _len = (((const char*) filename)? strlen((const char*) filename) + 1 : 1);
    
    _len >>= _n;
    if (_len > 1)
      _n.put_char_array((const CORBA::Char *)((const char*)filename),_len);
    else {
      if ((const char*) filename == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= _n;
    }
  }
  ex_type >>= _n;
  ex_data >>= _n;
  
}

void
Merger::LoadingExcept::operator<<= (NetBufferedStream& _n)
{
  {
    CORBA::String_member _0RL_str_tmp;
    _0RL_str_tmp <<= _n;
    filename = _0RL_str_tmp._ptr;
    _0RL_str_tmp._ptr = 0;
  }
  
  ex_type <<= _n;
  ex_data <<= _n;
  
}

void
Merger::LoadingExcept::operator>>= (MemBufferedStream& _n) const
{
  {
    CORBA::ULong _len = (((const char*) filename)? strlen((const char*) filename) + 1 : 1);
    
    _len >>= _n;
    if (_len > 1)
      _n.put_char_array((const CORBA::Char *)((const char*)filename),_len);
    else {
      if ((const char*) filename == 0 && omniORB::traceLevel > 1)
        _CORBA_null_string_ptr(0);
      CORBA::Char('\0') >>= _n;
    }
  }
  ex_type >>= _n;
  ex_data >>= _n;
  
}

void
Merger::LoadingExcept::operator<<= (MemBufferedStream& _n)
{
  {
    CORBA::String_member _0RL_str_tmp;
    _0RL_str_tmp <<= _n;
    filename = _0RL_str_tmp._ptr;
    _0RL_str_tmp._ptr = 0;
  }
  
  ex_type <<= _n;
  ex_data <<= _n;
  
}

CORBA::Exception::insertExceptionToAny Merger::AssemblingExcept::insertToAnyFn = 0;
CORBA::Exception::insertExceptionToAnyNCP Merger::AssemblingExcept::insertToAnyFnNCP = 0;

Merger::AssemblingExcept::AssemblingExcept(const Merger::AssemblingExcept& _s) : CORBA::UserException(_s)
{
  ex_type = _s.ex_type;
  ex_data = _s.ex_data;
  
}

Merger::AssemblingExcept::AssemblingExcept(ExceptionType _ex_type, const CORBA::Any& _ex_data)
{
  pd_insertToAnyFn    = Merger::AssemblingExcept::insertToAnyFn;
  pd_insertToAnyFnNCP = Merger::AssemblingExcept::insertToAnyFnNCP;
  ex_type = _ex_type;
  ex_data = _ex_data;
  
}

Merger::AssemblingExcept& Merger::AssemblingExcept::operator=(const Merger::AssemblingExcept& _s)
{
  ((CORBA::UserException*) this)->operator=(_s);
  ex_type = _s.ex_type;
  ex_data = _s.ex_data;
  
  return *this;
}

Merger::AssemblingExcept::~AssemblingExcept() {}

void Merger::AssemblingExcept::_raise() { throw *this; }

Merger::AssemblingExcept* Merger::AssemblingExcept::_downcast(CORBA::Exception* _e) {
  return (AssemblingExcept*) _NP_is_a(_e, "Exception/UserException/Merger::AssemblingExcept");
}

const Merger::AssemblingExcept* Merger::AssemblingExcept::_downcast(const CORBA::Exception* _e) {
  return (const AssemblingExcept*) _NP_is_a(_e, "Exception/UserException/Merger::AssemblingExcept");
}

const char* Merger::AssemblingExcept::_PD_repoId = "IDL:Merger/AssemblingExcept:1.0";

CORBA::Exception* Merger::AssemblingExcept::_NP_duplicate() const {
  return new AssemblingExcept(*this);
}

const char* Merger::AssemblingExcept::_NP_typeId() const {
  return "Exception/UserException/Merger::AssemblingExcept";
}

const char* Merger::AssemblingExcept::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:Merger/AssemblingExcept:1.0");
  return "IDL:Merger/AssemblingExcept:1.0";
}

void Merger::AssemblingExcept::_NP_marshal(NetBufferedStream& _s) const {
  *this >>= _s;
}

void Merger::AssemblingExcept::_NP_marshal(MemBufferedStream& _s) const {
  *this >>= _s;
}

size_t
Merger::AssemblingExcept::_NP_alignedSize(size_t _msgsize) const
{
  _msgsize = omni::align_to(_msgsize, omni::ALIGN_4) + 4;
  
  _msgsize = ex_data._NP_alignedSize(_msgsize);
  
  return _msgsize;
}

void
Merger::AssemblingExcept::operator>>= (NetBufferedStream& _n) const
{
  ex_type >>= _n;
  ex_data >>= _n;
  
}

void
Merger::AssemblingExcept::operator<<= (NetBufferedStream& _n)
{
  ex_type <<= _n;
  ex_data <<= _n;
  
}

void
Merger::AssemblingExcept::operator>>= (MemBufferedStream& _n) const
{
  ex_type >>= _n;
  ex_data >>= _n;
  
}

void
Merger::AssemblingExcept::operator<<= (MemBufferedStream& _n)
{
  ex_type <<= _n;
  ex_data <<= _n;
  
}

CORBA::Exception::insertExceptionToAny Merger::UnknownExcept::insertToAnyFn = 0;
CORBA::Exception::insertExceptionToAnyNCP Merger::UnknownExcept::insertToAnyFnNCP = 0;

Merger::UnknownExcept::UnknownExcept(const Merger::UnknownExcept& _s) : CORBA::UserException(_s)
{
  ex_type = _s.ex_type;
  
}

Merger::UnknownExcept::UnknownExcept(ExceptionType _ex_type)
{
  pd_insertToAnyFn    = Merger::UnknownExcept::insertToAnyFn;
  pd_insertToAnyFnNCP = Merger::UnknownExcept::insertToAnyFnNCP;
  ex_type = _ex_type;
  
}

Merger::UnknownExcept& Merger::UnknownExcept::operator=(const Merger::UnknownExcept& _s)
{
  ((CORBA::UserException*) this)->operator=(_s);
  ex_type = _s.ex_type;
  
  return *this;
}

Merger::UnknownExcept::~UnknownExcept() {}

void Merger::UnknownExcept::_raise() { throw *this; }

Merger::UnknownExcept* Merger::UnknownExcept::_downcast(CORBA::Exception* _e) {
  return (UnknownExcept*) _NP_is_a(_e, "Exception/UserException/Merger::UnknownExcept");
}

const Merger::UnknownExcept* Merger::UnknownExcept::_downcast(const CORBA::Exception* _e) {
  return (const UnknownExcept*) _NP_is_a(_e, "Exception/UserException/Merger::UnknownExcept");
}

const char* Merger::UnknownExcept::_PD_repoId = "IDL:Merger/UnknownExcept:1.0";

CORBA::Exception* Merger::UnknownExcept::_NP_duplicate() const {
  return new UnknownExcept(*this);
}

const char* Merger::UnknownExcept::_NP_typeId() const {
  return "Exception/UserException/Merger::UnknownExcept";
}

const char* Merger::UnknownExcept::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:Merger/UnknownExcept:1.0");
  return "IDL:Merger/UnknownExcept:1.0";
}

void Merger::UnknownExcept::_NP_marshal(NetBufferedStream& _s) const {
  *this >>= _s;
}

void Merger::UnknownExcept::_NP_marshal(MemBufferedStream& _s) const {
  *this >>= _s;
}

size_t
Merger::UnknownExcept::_NP_alignedSize(size_t _msgsize) const
{
  _msgsize = omni::align_to(_msgsize, omni::ALIGN_4) + 4;
  
  return _msgsize;
}

void
Merger::UnknownExcept::operator>>= (NetBufferedStream& _n) const
{
  ex_type >>= _n;
  
}

void
Merger::UnknownExcept::operator<<= (NetBufferedStream& _n)
{
  ex_type <<= _n;
  
}

void
Merger::UnknownExcept::operator>>= (MemBufferedStream& _n) const
{
  ex_type >>= _n;
  
}

void
Merger::UnknownExcept::operator<<= (MemBufferedStream& _n)
{
  ex_type <<= _n;
  
}

Merger_ptr Merger_Helper::_nil() {
  return Merger::_nil();
}

CORBA::Boolean Merger_Helper::is_nil(Merger_ptr p) {
  return CORBA::is_nil(p);

}

void Merger_Helper::release(Merger_ptr p) {
  CORBA::release(p);
}

void Merger_Helper::duplicate(Merger_ptr p) {
  if( p && !p->_NP_is_nil() )  omni::duplicateObjRef(p);
}

size_t Merger_Helper::NP_alignedSize(Merger_ptr obj, size_t offset) {
  return Merger::_alignedSize(obj, offset);
}

void Merger_Helper::marshalObjRef(Merger_ptr obj, NetBufferedStream& s) {
  Merger::_marshalObjRef(obj, s);
}

Merger_ptr Merger_Helper::unmarshalObjRef(NetBufferedStream& s) {
  return Merger::_unmarshalObjRef(s);
}

void Merger_Helper::marshalObjRef(Merger_ptr obj, MemBufferedStream& s) {
  Merger::_marshalObjRef(obj, s);
}

Merger_ptr Merger_Helper::unmarshalObjRef(MemBufferedStream& s) {
  return Merger::_unmarshalObjRef(s);
}

Merger_ptr
Merger::_duplicate(Merger_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);

  return obj;
}

Merger_ptr
Merger::_narrow(CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}

Merger_ptr
Merger::_nil()
{
  static _objref_Merger* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
  if( !_the_nil_ptr )  _the_nil_ptr = new _objref_Merger;
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
}

const char* Merger::_PD_repoId = "IDL:Merger:1.0";

_objref_Merger::~_objref_Merger() {}

_objref_Merger::_objref_Merger(const char* mdri,
   IOP::TaggedProfileList* p, omniIdentity* id, omniLocalIdentity* lid) :
   
   omniObjRef(Merger::_PD_repoId, mdri, p, id, lid)
{
  _PR_setobj(this);
}

void*
_objref_Merger::_ptrToObjRef(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (CORBA::Object_ptr) this;
  if( !strcmp(id, Merger::_PD_repoId) )
    return (Merger_ptr) this;
  
  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cshort_i_cStringArr_i_cshort_e_cMerger_mLoadingExcept_e_cMerger_mUnknownExcept
class _0RL_cd_9b77629458bc6b27_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_9b77629458bc6b27_00000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const StringArr& a_0, CORBA::Short a_1):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0),
     arg_1(a_1) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline CORBA::Short result() { return pd_result; }
  const StringArr& arg_0;
  CORBA::Short arg_1;
  CORBA::Short pd_result;
};

CORBA::ULong _0RL_cd_9b77629458bc6b27_00000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = arg_0._NP_alignedSize(msgsize);
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_2) + 2;
  
  return msgsize;
}

void _0RL_cd_9b77629458bc6b27_00000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  arg_1 >>= giop_client;
  
}

void _0RL_cd_9b77629458bc6b27_00000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result <<= giop_client;
  
}

void _0RL_cd_9b77629458bc6b27_00000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, Merger::LoadingExcept::_PD_repoId) == 0 ) {
    Merger::LoadingExcept _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else if( strcmp(repoId, Merger::UnknownExcept::_PD_repoId) == 0 ) {
    Merger::UnknownExcept _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_9b77629458bc6b27_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_9b77629458bc6b27_00000000* tcd = (_0RL_cd_9b77629458bc6b27_00000000*) cd;
  _impl_Merger* impl = (_impl_Merger*) svnt->_ptrToInterface(Merger::_PD_repoId);
  tcd->pd_result = impl->loadDeltas(tcd->arg_0, tcd->arg_1);
}

CORBA::Short _objref_Merger::loadDeltas(const StringArr& mrgFiles, CORBA::Short cl_id)
{
  _0RL_cd_9b77629458bc6b27_00000000 _call_desc(_0RL_lcfn_9b77629458bc6b27_10000000, "loadDeltas", 11, 0, mrgFiles, cl_id);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cshort_i_cStrPeriod_e_cMerger_mUnknownExcept
class _0RL_cd_9b77629458bc6b27_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_9b77629458bc6b27_20000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const StrPeriod& a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline CORBA::Short result() { return pd_result; }
  const StrPeriod& arg_0;
  CORBA::Short pd_result;
};

CORBA::ULong _0RL_cd_9b77629458bc6b27_20000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = arg_0._NP_alignedSize(msgsize);
  
  return msgsize;
}

void _0RL_cd_9b77629458bc6b27_20000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  
}

void _0RL_cd_9b77629458bc6b27_20000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result <<= giop_client;
  
}

void _0RL_cd_9b77629458bc6b27_20000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, Merger::UnknownExcept::_PD_repoId) == 0 ) {
    Merger::UnknownExcept _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_9b77629458bc6b27_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_9b77629458bc6b27_20000000* tcd = (_0RL_cd_9b77629458bc6b27_20000000*) cd;
  _impl_Merger* impl = (_impl_Merger*) svnt->_ptrToInterface(Merger::_PD_repoId);
  tcd->pd_result = impl->unLoadDeltas(tcd->arg_0);
}

CORBA::Short _objref_Merger::unLoadDeltas(const StrPeriod& p)
{
  _0RL_cd_9b77629458bc6b27_20000000 _call_desc(_0RL_lcfn_9b77629458bc6b27_30000000, "unLoadDeltas", 13, 0, p);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cshort_i_cStrSettings_o_cstring_i_cshort_e_cMerger_mAssemblingExcept_e_cMerger_mUnknownExcept
class _0RL_cd_9b77629458bc6b27_40000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_9b77629458bc6b27_40000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const StrSettings& a_0, char *& a_1, CORBA::Short a_2):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0),
     arg_1(a_1),
     arg_2(a_2) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline CORBA::Short result() { return pd_result; }
  const StrSettings& arg_0;
  char *& arg_1;
  CORBA::Short arg_2;
  CORBA::Short pd_result;
};

CORBA::ULong _0RL_cd_9b77629458bc6b27_40000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = arg_0._NP_alignedSize(msgsize);
  
  msgsize = omni::align_to(msgsize, omni::ALIGN_2) + 2;
  
  return msgsize;
}

void _0RL_cd_9b77629458bc6b27_40000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  arg_2 >>= giop_client;
  
}

void _0RL_cd_9b77629458bc6b27_40000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  char* tmp_1 = 0;
  
  pd_result <<= giop_client;
  {
    CORBA::String_member _0RL_str_tmp;
    _0RL_str_tmp <<=  giop_client;
    tmp_1 = _0RL_str_tmp._ptr;
    _0RL_str_tmp._ptr = 0;
  }
  
  arg_1 = tmp_1;
  
}

void _0RL_cd_9b77629458bc6b27_40000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, Merger::AssemblingExcept::_PD_repoId) == 0 ) {
    Merger::AssemblingExcept _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else if( strcmp(repoId, Merger::UnknownExcept::_PD_repoId) == 0 ) {
    Merger::UnknownExcept _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_9b77629458bc6b27_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_9b77629458bc6b27_40000000* tcd = (_0RL_cd_9b77629458bc6b27_40000000*) cd;
  _impl_Merger* impl = (_impl_Merger*) svnt->_ptrToInterface(Merger::_PD_repoId);
  tcd->pd_result = impl->assemblingDelta(tcd->arg_0, tcd->arg_1, tcd->arg_2);
}

CORBA::Short _objref_Merger::assemblingDelta(const StrSettings& settings, CORBA::String_out outname, CORBA::Short cl_id)
{
  _0RL_cd_9b77629458bc6b27_40000000 _call_desc(_0RL_lcfn_9b77629458bc6b27_50000000, "assemblingDelta", 16, 0, settings, outname, cl_id);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cShortArr_i_cStrPeriod_e_cMerger_mUnknownExcept
class _0RL_cd_9b77629458bc6b27_60000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_9b77629458bc6b27_60000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway, const StrPeriod& a_0):
     omniCallDescriptor(lcfn, op, oplen, oneway),
     arg_0(a_0) {}

  virtual CORBA::ULong alignedSize(CORBA::ULong size_in);
  virtual void marshalArguments(GIOP_C&);
  
  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline ShortArr* result() { return pd_result; }
  const StrPeriod& arg_0;
  ShortArr* pd_result;
};

CORBA::ULong _0RL_cd_9b77629458bc6b27_60000000::alignedSize(CORBA::ULong msgsize)
{
  msgsize = arg_0._NP_alignedSize(msgsize);
  
  return msgsize;
}

void _0RL_cd_9b77629458bc6b27_60000000::marshalArguments(GIOP_C& giop_client)
{
  arg_0 >>= giop_client;
  
}

void _0RL_cd_9b77629458bc6b27_60000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = new ShortArr;
  
  *pd_result <<= giop_client;
  
}

void _0RL_cd_9b77629458bc6b27_60000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, Merger::UnknownExcept::_PD_repoId) == 0 ) {
    Merger::UnknownExcept _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_9b77629458bc6b27_70000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_9b77629458bc6b27_60000000* tcd = (_0RL_cd_9b77629458bc6b27_60000000*) cd;
  _impl_Merger* impl = (_impl_Merger*) svnt->_ptrToInterface(Merger::_PD_repoId);
  tcd->pd_result = impl->whatForPeriod(tcd->arg_0);
}

ShortArr* _objref_Merger::whatForPeriod(const StrPeriod& p)
{
  _0RL_cd_9b77629458bc6b27_60000000 _call_desc(_0RL_lcfn_9b77629458bc6b27_70000000, "whatForPeriod", 14, 0, p);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

// Proxy call descriptor class. Mangled signature:
//  _cStrPeriodArr_e_cMerger_mUnknownExcept
class _0RL_cd_9b77629458bc6b27_80000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_9b77629458bc6b27_80000000(LocalCallFn lcfn, const char* op, size_t oplen, _CORBA_Boolean oneway):
     omniCallDescriptor(lcfn, op, oplen, oneway) {}

  virtual void unmarshalReturnedValues(GIOP_C&);
    
  virtual void userException(GIOP_C&, const char*);
  
  inline StrPeriodArr* result() { return pd_result; }
  
  StrPeriodArr* pd_result;
};

void _0RL_cd_9b77629458bc6b27_80000000::unmarshalReturnedValues(GIOP_C& giop_client)
{
  
  pd_result = new StrPeriodArr;
  
  *pd_result <<= giop_client;
  
}

void _0RL_cd_9b77629458bc6b27_80000000::userException(GIOP_C& giop_client, const char* repoId)
{
  if( strcmp(repoId, Merger::UnknownExcept::_PD_repoId) == 0 ) {
    Merger::UnknownExcept _ex;
    _ex <<= giop_client;
    giop_client.RequestCompleted();
    throw _ex;
  }
  
  else {
    giop_client.RequestCompleted(1);
    throw CORBA::MARSHAL(0, CORBA::COMPLETED_MAYBE);
  }
}

// Local call call-back function.
static void
_0RL_lcfn_9b77629458bc6b27_90000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_9b77629458bc6b27_80000000* tcd = (_0RL_cd_9b77629458bc6b27_80000000*) cd;
  _impl_Merger* impl = (_impl_Merger*) svnt->_ptrToInterface(Merger::_PD_repoId);
  tcd->pd_result = impl->getAllPeriods();
}

StrPeriodArr* _objref_Merger::getAllPeriods()
{
  _0RL_cd_9b77629458bc6b27_80000000 _call_desc(_0RL_lcfn_9b77629458bc6b27_90000000, "getAllPeriods", 14, 0);
  
  _invoke(_call_desc);
  return _call_desc.result();
}

_pof_Merger::~_pof_Merger() {}

omniObjRef*
_pof_Merger::newObjRef(const char* mdri, IOP::TaggedProfileList* p,
               omniIdentity* id, omniLocalIdentity* lid)
{
  return new _objref_Merger(mdri, p, id, lid);
}

CORBA::Boolean
_pof_Merger::is_a(const char* id) const
{
  if( !strcmp(id, Merger::_PD_repoId) )
    return 1;
  
  return 0;
}

const _pof_Merger _the_pof_Merger;

_impl_Merger::~_impl_Merger() {}

CORBA::Boolean
_impl_Merger::_dispatch(GIOP_S& giop_s)
{
  if( !strcmp(giop_s.operation(), "loadDeltas") ) {
    static const char* const _user_exns[] = {
      "IDL:Merger/LoadingExcept:1.0",
      "IDL:Merger/UnknownExcept:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 2);
    
    StringArr arg_mrgFiles;
    
    arg_mrgFiles <<= giop_s;
    CORBA::Short arg_cl_id;
    
    arg_cl_id <<= giop_s;
    
    giop_s.RequestReceived();
    CORBA::Short result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->loadDeltas(arg_mrgFiles, arg_cl_id);
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(Merger::LoadingExcept& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
    catch(Merger::UnknownExcept& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_2) + 2;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "unLoadDeltas") ) {
    static const char* const _user_exns[] = {
      "IDL:Merger/UnknownExcept:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    StrPeriod arg_p;
    
    arg_p <<= giop_s;
    
    giop_s.RequestReceived();
    CORBA::Short result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->unLoadDeltas(arg_p);
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(Merger::UnknownExcept& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_2) + 2;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "assemblingDelta") ) {
    static const char* const _user_exns[] = {
      "IDL:Merger/AssemblingExcept:1.0",
      "IDL:Merger/UnknownExcept:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 2);
    
    StrSettings arg_settings;
    
    arg_settings <<= giop_s;
    CORBA::String_var arg_outname;
    
    CORBA::Short arg_cl_id;
    
    arg_cl_id <<= giop_s;
    
    giop_s.RequestReceived();
    CORBA::Short result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->assemblingDelta(arg_settings, arg_outname.out(), arg_cl_id);
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(Merger::AssemblingExcept& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
    catch(Merger::UnknownExcept& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = omni::align_to(msgsize, omni::ALIGN_2) + 2;
      
      msgsize = omni::align_to(msgsize, omni::ALIGN_4) + 4;
      msgsize += ((const char*) arg_outname) ? strlen((const char*) arg_outname) + 1 : 1;
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      result >>= giop_s;
      
      {
        CORBA::ULong _len = (((const char*) arg_outname)? strlen((const char*) arg_outname) + 1 : 1);
        
        _len >>= giop_s;
        if (_len > 1)
          giop_s.put_char_array((const CORBA::Char *)((const char*)arg_outname),_len);
        else {
          if ((const char*) arg_outname == 0 && omniORB::traceLevel > 1)
            _CORBA_null_string_ptr(0);
          CORBA::Char('\0') >>= giop_s;
        }
      }
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "whatForPeriod") ) {
    static const char* const _user_exns[] = {
      "IDL:Merger/UnknownExcept:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    StrPeriod arg_p;
    
    arg_p <<= giop_s;
    
    giop_s.RequestReceived();
    ShortArr_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->whatForPeriod(arg_p);
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(Merger::UnknownExcept& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      *(result.operator->()) >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  if( !strcmp(giop_s.operation(), "getAllPeriods") ) {
    static const char* const _user_exns[] = {
      "IDL:Merger/UnknownExcept:1.0"
    };
    giop_s.set_user_exceptions(_user_exns, 1);
    
    giop_s.RequestReceived();
    StrPeriodArr_var result;
    
#ifndef HAS_Cplusplus_catch_exception_by_base
    try {
#endif
    
    result = this->getAllPeriods();
#ifndef HAS_Cplusplus_catch_exception_by_base
    }
    
    catch(Merger::UnknownExcept& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }
    
#endif
    
    if( giop_s.response_expected() ) {
      size_t msgsize = (size_t) GIOP_S::ReplyHeaderSize();
      msgsize = (result.operator->())->_NP_alignedSize(msgsize);
      
      giop_s.InitialiseReply(GIOP::NO_EXCEPTION, (CORBA::ULong) msgsize);
      *(result.operator->()) >>= giop_s;
      
    }
    giop_s.ReplyCompleted();
    return 1;
  }

  return 0;
}

void*
_impl_Merger::_ptrToInterface(const char* id)
{
  if( !strcmp(id, CORBA::Object::_PD_repoId) )
    return (void*) 1;
  if( !strcmp(id, Merger::_PD_repoId) )
    return (_impl_Merger*) this;
  
  return 0;
}

const char*
_impl_Merger::_mostDerivedRepoId()
{
  return Merger::_PD_repoId;
}

POA_Merger::~POA_Merger() {}

