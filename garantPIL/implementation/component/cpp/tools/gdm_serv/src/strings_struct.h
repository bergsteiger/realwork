// This file is generated by omniidl (C++ backend)- omniORB_3_0. Do not edit.
#ifndef __strings__struct_hh__
#define __strings__struct_hh__

#ifndef USE_omniORB_logStream
#define USE_omniORB_logStream
#endif

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB3/CORBA.h>
#endif

#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_strings__struct
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_strings__struct
#endif

#ifdef USE_stub_in_nt_dll
#ifndef USE_core_stub_in_nt_dll
#define USE_core_stub_in_nt_dll
#endif
#ifndef USE_dyn_stub_in_nt_dll
#define USE_dyn_stub_in_nt_dll
#endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif

_CORBA_GLOBAL_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_StrDate;

typedef char* StrDate;
typedef CORBA::String_var StrDate_var;

_CORBA_GLOBAL_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_StrTime;

typedef char* StrTime;
typedef CORBA::String_var StrTime_var;

struct StrRevision {
  typedef _CORBA_ConstrType_Variable_Var<StrRevision> _var_type;

  CORBA::String_member date;

  CORBA::String_member time;

  size_t _NP_alignedSize(size_t initialoffset) const;
  void operator>>= (NetBufferedStream &) const;
  void operator<<= (NetBufferedStream &);
  void operator>>= (MemBufferedStream &) const;
  void operator<<= (MemBufferedStream &);
};

typedef StrRevision::_var_type StrRevision_var;

typedef _CORBA_ConstrType_Variable_OUT_arg< StrRevision,StrRevision_var > StrRevision_out;

_CORBA_GLOBAL_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_StrRevision;

struct StrPeriod {
  typedef _CORBA_ConstrType_Variable_Var<StrPeriod> _var_type;

  StrRevision old_date;

  StrRevision new_date;

  size_t _NP_alignedSize(size_t initialoffset) const;
  void operator>>= (NetBufferedStream &) const;
  void operator<<= (NetBufferedStream &);
  void operator>>= (MemBufferedStream &) const;
  void operator<<= (MemBufferedStream &);
};

typedef StrPeriod::_var_type StrPeriod_var;

typedef _CORBA_ConstrType_Variable_OUT_arg< StrPeriod,StrPeriod_var > StrPeriod_out;

_CORBA_GLOBAL_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_StrPeriod;

_CORBA_GLOBAL_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_ShortArr;

class ShortArr_var;

class ShortArr : public _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::UShort, 2, 2>  {
public:
  typedef ShortArr_var _var_type;
  inline ShortArr() {}
  inline ShortArr(const ShortArr& s)
    : _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::UShort, 2, 2> (s) {}

  inline ShortArr(_CORBA_ULong _max)
    : _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::UShort, 2, 2> (_max) {}
  inline ShortArr(_CORBA_ULong _max, _CORBA_ULong _len, CORBA::UShort* _val, _CORBA_Boolean _rel=0)
    : _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::UShort, 2, 2> (_max, _len, _val, _rel) {}

  inline ShortArr& operator = (const ShortArr& s) {
    _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::UShort, 2, 2> ::operator=(s);
    return *this;
  }
};

class ShortArr_out;

class ShortArr_var {
public:
  typedef ShortArr T;
  typedef ShortArr_var T_var;

  inline ShortArr_var() : _pd_seq(0) {}
  inline ShortArr_var(T* s) : _pd_seq(s) {}
  inline ShortArr_var(const T_var& s) {
    if( s._pd_seq )  _pd_seq = new T(*s._pd_seq);
    else             _pd_seq = 0;
  }
  inline ~ShortArr_var() { if( _pd_seq )  delete _pd_seq; }

  inline T_var& operator = (T* s) {
    if( _pd_seq )  delete _pd_seq;
    _pd_seq = s;
    return *this;
  }
  inline T_var& operator = (const T_var& s) {
    if( s._pd_seq ) {
      if( !_pd_seq )  _pd_seq = new T;
      *_pd_seq = *s._pd_seq;
    } else if( _pd_seq ) {
      delete _pd_seq;
      _pd_seq = 0;
    }
    return *this;
  }

  inline CORBA::UShort& operator [] (_CORBA_ULong s) {
    return (*_pd_seq)[s];
  }

  inline T* operator -> () { return _pd_seq; }
#if defined(__GNUG__) && __GNUG__ == 2 && __GNUC_MINOR__ == 7
  inline operator T& () const { return *_pd_seq; }
#else
  inline operator const T& () const { return *_pd_seq; }
  inline operator T& () { return *_pd_seq; }
#endif

  inline const T& in() const { return *_pd_seq; }
  inline T&       inout()    { return *_pd_seq; }
  inline T*&      out() {
    if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
    return _pd_seq;
  }
  inline T* _retn() { T* tmp = _pd_seq; _pd_seq = 0; return tmp; }

  friend class ShortArr_out;

private:
  T* _pd_seq;
};

class ShortArr_out {
public:
  typedef ShortArr T;
  typedef ShortArr_var T_var;

  inline ShortArr_out(T*& s) : _data(s) { _data = 0; }
  inline ShortArr_out(T_var& s)
    : _data(s._pd_seq) { s = (T*) 0; }
  inline ShortArr_out(const ShortArr_out& s) : _data(s._data) {}
  inline ShortArr_out& operator = (const ShortArr_out& s) {
    _data = s._data;
    return *this;
  }  inline ShortArr_out& operator = (T* s) {
    _data = s;
    return *this;
  }
  inline operator T*&()  { return _data; }
  inline T*& ptr()       { return _data; }
  inline T* operator->() { return _data; }

  inline CORBA::UShort& operator [] (_CORBA_ULong i) {
    return (*_data)[i];
  }

  T*& _data;

private:
  ShortArr_out();
  ShortArr_out& operator=(const T_var&);
};

_CORBA_GLOBAL_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_StringArr;

class StringArr_var;

class StringArr : public _CORBA_Unbounded_Sequence__String {
public:
  typedef StringArr_var _var_type;
  inline StringArr() {}
  inline StringArr(const StringArr& s)
    : _CORBA_Unbounded_Sequence__String(s) {}

  inline StringArr(_CORBA_ULong _max)
    : _CORBA_Unbounded_Sequence__String(_max) {}
  inline StringArr(_CORBA_ULong _max, _CORBA_ULong _len, char** _val, _CORBA_Boolean _rel=0)
    : _CORBA_Unbounded_Sequence__String(_max, _len, _val, _rel) {}

  inline StringArr& operator = (const StringArr& s) {
    _CORBA_Unbounded_Sequence__String::operator=(s);
    return *this;
  }
};

class StringArr_out;

class StringArr_var {
public:
  typedef StringArr T;
  typedef StringArr_var T_var;

  inline StringArr_var() : _pd_seq(0) {}
  inline StringArr_var(T* s) : _pd_seq(s) {}
  inline StringArr_var(const T_var& s) {
    if( s._pd_seq )  _pd_seq = new T(*s._pd_seq);
    else             _pd_seq = 0;
  }
  inline ~StringArr_var() { if( _pd_seq )  delete _pd_seq; }

  inline T_var& operator = (T* s) {
    if( _pd_seq )  delete _pd_seq;
    _pd_seq = s;
    return *this;
  }
  inline T_var& operator = (const T_var& s) {
    if( s._pd_seq ) {
      if( !_pd_seq )  _pd_seq = new T;
      *_pd_seq = *s._pd_seq;
    } else if( _pd_seq ) {
      delete _pd_seq;
      _pd_seq = 0;
    }
    return *this;
  }

  inline _CORBA_String_element operator [] (_CORBA_ULong s) {
    return (*_pd_seq)[s];
  }

  inline T* operator -> () { return _pd_seq; }
#if defined(__GNUG__) && __GNUG__ == 2 && __GNUC_MINOR__ == 7
  inline operator T& () const { return *_pd_seq; }
#else
  inline operator const T& () const { return *_pd_seq; }
  inline operator T& () { return *_pd_seq; }
#endif

  inline const T& in() const { return *_pd_seq; }
  inline T&       inout()    { return *_pd_seq; }
  inline T*&      out() {
    if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
    return _pd_seq;
  }
  inline T* _retn() { T* tmp = _pd_seq; _pd_seq = 0; return tmp; }

  friend class StringArr_out;

private:
  T* _pd_seq;
};

class StringArr_out {
public:
  typedef StringArr T;
  typedef StringArr_var T_var;

  inline StringArr_out(T*& s) : _data(s) { _data = 0; }
  inline StringArr_out(T_var& s)
    : _data(s._pd_seq) { s = (T*) 0; }
  inline StringArr_out(const StringArr_out& s) : _data(s._data) {}
  inline StringArr_out& operator = (const StringArr_out& s) {
    _data = s._data;
    return *this;
  }  inline StringArr_out& operator = (T* s) {
    _data = s;
    return *this;
  }
  inline operator T*&()  { return _data; }
  inline T*& ptr()       { return _data; }
  inline T* operator->() { return _data; }

  inline _CORBA_String_element operator [] (_CORBA_ULong i) {
    return (*_data)[i];
  }

  T*& _data;

private:
  StringArr_out();
  StringArr_out& operator=(const T_var&);
};

_CORBA_GLOBAL_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_StrPeriodArr;

class StrPeriodArr_var;

class StrPeriodArr : public _CORBA_Unbounded_Sequence< StrPeriod>  {
public:
  typedef StrPeriodArr_var _var_type;
  inline StrPeriodArr() {}
  inline StrPeriodArr(const StrPeriodArr& s)
    : _CORBA_Unbounded_Sequence< StrPeriod> (s) {}

  inline StrPeriodArr(_CORBA_ULong _max)
    : _CORBA_Unbounded_Sequence< StrPeriod> (_max) {}
  inline StrPeriodArr(_CORBA_ULong _max, _CORBA_ULong _len, StrPeriod* _val, _CORBA_Boolean _rel=0)
    : _CORBA_Unbounded_Sequence< StrPeriod> (_max, _len, _val, _rel) {}

  inline StrPeriodArr& operator = (const StrPeriodArr& s) {
    _CORBA_Unbounded_Sequence< StrPeriod> ::operator=(s);
    return *this;
  }
};

class StrPeriodArr_out;

class StrPeriodArr_var {
public:
  typedef StrPeriodArr T;
  typedef StrPeriodArr_var T_var;

  inline StrPeriodArr_var() : _pd_seq(0) {}
  inline StrPeriodArr_var(T* s) : _pd_seq(s) {}
  inline StrPeriodArr_var(const T_var& s) {
    if( s._pd_seq )  _pd_seq = new T(*s._pd_seq);
    else             _pd_seq = 0;
  }
  inline ~StrPeriodArr_var() { if( _pd_seq )  delete _pd_seq; }

  inline T_var& operator = (T* s) {
    if( _pd_seq )  delete _pd_seq;
    _pd_seq = s;
    return *this;
  }
  inline T_var& operator = (const T_var& s) {
    if( s._pd_seq ) {
      if( !_pd_seq )  _pd_seq = new T;
      *_pd_seq = *s._pd_seq;
    } else if( _pd_seq ) {
      delete _pd_seq;
      _pd_seq = 0;
    }
    return *this;
  }

  inline StrPeriod& operator [] (_CORBA_ULong s) {
    return (*_pd_seq)[s];
  }

  inline T* operator -> () { return _pd_seq; }
#if defined(__GNUG__) && __GNUG__ == 2 && __GNUC_MINOR__ == 7
  inline operator T& () const { return *_pd_seq; }
#else
  inline operator const T& () const { return *_pd_seq; }
  inline operator T& () { return *_pd_seq; }
#endif

  inline const T& in() const { return *_pd_seq; }
  inline T&       inout()    { return *_pd_seq; }
  inline T*&      out() {
    if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
    return _pd_seq;
  }
  inline T* _retn() { T* tmp = _pd_seq; _pd_seq = 0; return tmp; }

  friend class StrPeriodArr_out;

private:
  T* _pd_seq;
};

class StrPeriodArr_out {
public:
  typedef StrPeriodArr T;
  typedef StrPeriodArr_var T_var;

  inline StrPeriodArr_out(T*& s) : _data(s) { _data = 0; }
  inline StrPeriodArr_out(T_var& s)
    : _data(s._pd_seq) { s = (T*) 0; }
  inline StrPeriodArr_out(const StrPeriodArr_out& s) : _data(s._data) {}
  inline StrPeriodArr_out& operator = (const StrPeriodArr_out& s) {
    _data = s._data;
    return *this;
  }  inline StrPeriodArr_out& operator = (T* s) {
    _data = s;
    return *this;
  }
  inline operator T*&()  { return _data; }
  inline T*& ptr()       { return _data; }
  inline T* operator->() { return _data; }

  inline StrPeriod& operator [] (_CORBA_ULong i) {
    return (*_data)[i];
  }

  T*& _data;

private:
  StrPeriodArr_out();
  StrPeriodArr_out& operator=(const T_var&);
};

_CORBA_GLOBAL_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_StrName;

typedef char* StrName;
typedef CORBA::String_var StrName_var;

struct StrSettings {
  typedef _CORBA_ConstrType_Variable_Var<StrSettings> _var_type;

  CORBA::String_member out_name;

  CORBA::Short pic_enable;

  CORBA::Short rtf_enable;

  ShortArr mrg_segs;

  StrPeriod period;

  size_t _NP_alignedSize(size_t initialoffset) const;
  void operator>>= (NetBufferedStream &) const;
  void operator<<= (NetBufferedStream &);
  void operator>>= (MemBufferedStream &) const;
  void operator<<= (MemBufferedStream &);
};

typedef StrSettings::_var_type StrSettings_var;

typedef _CORBA_ConstrType_Variable_OUT_arg< StrSettings,StrSettings_var > StrSettings_out;

_CORBA_GLOBAL_VAR _dyn_attr const CORBA::TypeCode_ptr _tc_StrSettings;

#undef _core_attr
#undef _dyn_attr

extern void operator<<=(CORBA::Any& _a, const StrRevision& _s);
extern void operator<<=(CORBA::Any& _a, StrRevision* _sp);
extern CORBA::Boolean operator>>=(const CORBA::Any& _a, StrRevision*& _sp);
extern CORBA::Boolean operator>>=(const CORBA::Any& _a, const StrRevision*& _sp);

extern void operator<<=(CORBA::Any& _a, const StrPeriod& _s);
extern void operator<<=(CORBA::Any& _a, StrPeriod* _sp);
extern CORBA::Boolean operator>>=(const CORBA::Any& _a, StrPeriod*& _sp);
extern CORBA::Boolean operator>>=(const CORBA::Any& _a, const StrPeriod*& _sp);

extern void operator <<= (CORBA::Any& _a, const ShortArr& _s);
inline void operator <<= (CORBA::Any& _a, ShortArr* _sp) {
  _a <<= *_sp;
  delete _sp;
}
extern _CORBA_Boolean operator >>= (const CORBA::Any& _a, ShortArr*& _sp);
extern _CORBA_Boolean operator >>= (const CORBA::Any& _a, const ShortArr*& _sp);

extern void operator <<= (CORBA::Any& _a, const StringArr& _s);
inline void operator <<= (CORBA::Any& _a, StringArr* _sp) {
  _a <<= *_sp;
  delete _sp;
}
extern _CORBA_Boolean operator >>= (const CORBA::Any& _a, StringArr*& _sp);
extern _CORBA_Boolean operator >>= (const CORBA::Any& _a, const StringArr*& _sp);

extern void operator <<= (CORBA::Any& _a, const StrPeriodArr& _s);
inline void operator <<= (CORBA::Any& _a, StrPeriodArr* _sp) {
  _a <<= *_sp;
  delete _sp;
}
extern _CORBA_Boolean operator >>= (const CORBA::Any& _a, StrPeriodArr*& _sp);
extern _CORBA_Boolean operator >>= (const CORBA::Any& _a, const StrPeriodArr*& _sp);

extern void operator<<=(CORBA::Any& _a, const StrSettings& _s);
extern void operator<<=(CORBA::Any& _a, StrSettings* _sp);
extern CORBA::Boolean operator>>=(const CORBA::Any& _a, StrSettings*& _sp);
extern CORBA::Boolean operator>>=(const CORBA::Any& _a, const StrSettings*& _sp);

#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_strings__struct
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_strings__struct
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_strings__struct
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_strings__struct
#endif

#endif  // __strings__struct_hh__

