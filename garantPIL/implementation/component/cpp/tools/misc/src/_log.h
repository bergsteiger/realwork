////////////////////////////////////////////////////////////////////////////////
//
//  Вывод сообщений на экран и/или в файл
//  Определение inline функций для log.h
//  _log.h
//  26/X/01 sawa
//  8/XI/01 sawa
//  CODE: Windows-1251, no tabs
//
////////////////////////////////////////////////////////////////////////////////
#if !defined(AFX__LOG_H__8BF8134C_3112_4B49_87BE_2011F341605F__INCLUDED_)
#define AFX__LOG_H__8BF8134C_3112_4B49_87BE_2011F341605F__INCLUDED_
/////// Stream /////////////////////////////////////////////////////////////////
inline Code Stream::original_code() const {
    return m_originalCode;
}
////////////////////////////////////////////////////////////////////////////////
inline Code Stream::file_code() const {
    return m_fileCode;
}
////////////////////////////////////////////////////////////////////////////////
inline Code Stream::console_code() const {
    return m_consoleCode;
}
////////////////////////////////////////////////////////////////////////////////
inline const char* Stream::file_charset() const {
    return m_fileCoder.name(m_fileCode);
}
////////////////////////////////////////////////////////////////////////////////
inline const char* Stream::console_charset() const {
    return m_consoleCoder.name(m_consoleCode);
}
////////////////////////////////////////////////////////////////////////////////
inline Stream& Stream::flush() {
    m_file.flush();
    return *this;
}
////////////////////////////////////////////////////////////////////////////////
inline Stream& Stream::operator<<(Stream& (*f)(Stream&)) {
    return f(*this);
}
/////// HELPERS ////////////////////////////////////////////////////////////////
template <class T>
inline Log::Stream::Manipulator<T>::Manipulator(Stream& (*f)(Stream&, T), T v)
    : m_f(f), m_v(v) {
}
////////////////////////////////////////////////////////////////////////////////
inline Stream& _console(Stream& s, bool on) {
    return s.set_console_echo(on);
}
////////////////////////////////////////////////////////////////////////////////
inline Stream& _file(Stream& s, bool on) {
    return s.set_file_echo(on);
}
////////////////////////////////////////////////////////////////////////////////
inline Stream& _original(Stream& s, Code c) {
    return s.set_original_code(c);
}
////////////////////////////////////////////////////////////////////////////////
inline Stream& _console(Stream& s, Code c) {
    return s.set_console_code(c);
}
////////////////////////////////////////////////////////////////////////////////
inline Stream& _file(Stream& s, Code c) {
    return s.set_file_code(c);
}
////////////////////////////////////////////////////////////////////////////////
inline Stream& _source(Stream& s, const char* src) {
    return s.set_source(src);
}
////////////////////////////////////////////////////////////////////////////////
inline Stream& _source(Stream& s, int n) {
    return s.source_line(n);
}
////////////////////////////////////////////////////////////////////////////////
inline Stream& _limit(Stream& s,WarningLevel lim) {
    return s.set_warning_limit(lim);
}
////////////////////////////////////////////////////////////////////////////////
inline Stream& _level(Stream& s,WarningLevel level) {
    return s.set_warning_level(level);
}
/////// MANIPULATORS ///////////////////////////////////////////////////////////
inline Stream& endl(Stream& s) {
    return s << '\n';
}
////////////////////////////////////////////////////////////////////////////////
inline Stream& flush(Stream& s) {
    return s.flush();
}
////////////////////////////////////////////////////////////////////////////////
inline const Stream::Manipulator<bool> console(bool on) {
    return Stream::Manipulator<bool>(_console,on);
}
////////////////////////////////////////////////////////////////////////////////
inline const Stream::Manipulator<bool> file(bool on) {
    return Stream::Manipulator<bool>(_file,on);
}
////////////////////////////////////////////////////////////////////////////////
inline const Stream::Manipulator<Code> original(Code c) {
    return Stream::Manipulator<Code>(_original,c);
}
////////////////////////////////////////////////////////////////////////////////
inline const Stream::Manipulator<Code> console(Code c) {
    return Stream::Manipulator<Code>(_console,c);
}
////////////////////////////////////////////////////////////////////////////////
inline const Stream::Manipulator<Code> file(Code c) {
    return Stream::Manipulator<Code>(_file,c);
}
////////////////////////////////////////////////////////////////////////////////
inline const Stream::Manipulator<const char*> source(const char* src) {
    return Stream::Manipulator<const char*>(_source,src);
}
////////////////////////////////////////////////////////////////////////////////
inline const Stream::Manipulator<int> source(int n) {
    return Stream::Manipulator<int>(_source,n);
}
////////////////////////////////////////////////////////////////////////////////
inline const Stream::Manipulator<WarningLevel> limit(WarningLevel lim) {
    return Stream::Manipulator<WarningLevel>(_limit,lim);
}
////////////////////////////////////////////////////////////////////////////////
inline const Stream::Manipulator<WarningLevel> level(WarningLevel level) {
    return Stream::Manipulator<WarningLevel>(_level,level);
}
////////////////////////////////////////////////////////////////////////////////
#endif // !defined(AFX__LOG_H__8BF8134C_3112_4B49_87BE_2011F341605F__INCLUDED_)
////////////////////////////////////////////////////////////////////////////////
