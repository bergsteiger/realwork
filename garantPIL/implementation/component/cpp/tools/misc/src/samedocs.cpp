#include "shared/Core/fix/mpcxc.h"

#include <cstdio>
#include <cstdlib>

#include "ace/OS.h"

#include "shared/ContextSearch/Common/Constants.h"
#include "garantCore/DBExt/Readers/StreamReader.h"
#include "garantCore/DBExt/Readers/PositionsReader.h"

#include "osdep.h"
#include "gardefs.h"
#include "stdbase.h"
#include "btiter.h"
#include "recode.h"

#include "SplayMap.h"
#include "SplaySet.h"
#include "StorableSplaySet.h"
#include "u_int32_t.caddr_t.SplayMap.h"
#include "basemask.h"
#include "long.long.SplayMap.h"

#include <utility>
#include <math.h>

Base* aBase = 0;

int main_logic ( int argc, char *argv[] );

LONG WINAPI UEF(_EXCEPTION_POINTERS *ExceptionInfo)
{
	std::cout << "Unhandle exception" << std::endl;
	exit (EXIT_FAILURE);
}

int main ( int argc, char *argv[] ) {
	SetUnhandledExceptionFilter (UEF);
	return mpcxc_run_main_stack_size (main_logic, argc, argv, MPCXC_STACK_SIZE * 2);
}

typedef std::deque<u_int64_t> lemmacounts_packed;
std::map<long,lemmacounts_packed> *doc_lemmas_counts_packed = new std::map<long,lemmacounts_packed>;
std::map<long,long> gd;
std::map< long,std::deque<long> > *map_docs_resps = new std::map< long,std::deque<long> >;
std::map< long,std::deque<u_int64_t> > *map_refs_resps = new std::map< long,std::deque<u_int64_t> >;
std::map<long, long> doc_words; //документ.сколько в нем слов
std::set<long> lemmas_to_skip; //эти леммы не будут рассматриваться при сравнении общих
std::map<long, double> lemma_idf;
std::map<long,double> tfidf;
std::deque<std::string> lemmas;
long	W = 0;
std::set<long>	year_docs;

double	calculate_w_link (long doc_id_i, long doc_id_j)
{
	double w_link = 0.0;
	if (gd.find (doc_id_i) != gd.end ()) {
		long gdi = gd.find (doc_id_i)->second;
		if (gd.find (doc_id_j) != gd.end ()) {
			long gdj = gd.find (doc_id_j)->second;
			std::map< long,std::deque<long> >::const_iterator map_docs_resps_i, map_docs_resps_j;
			std::map< long,std::deque<u_int64_t> >::const_iterator map_refs_resps_i, map_refs_resps_j;

			map_docs_resps_i = map_docs_resps->find (doc_id_i);
			map_docs_resps_j = map_docs_resps->find (doc_id_j);
			map_refs_resps_i = map_refs_resps->find (doc_id_i);
			map_refs_resps_j = map_refs_resps->find (doc_id_j);

			//надо подсчитать число общих ссылок у документов i и j
			std::deque<long>::const_iterator doc_resps_iter_i = map_docs_resps_i->second.begin(), doc_resps_iter_j = map_docs_resps_j->second.begin ();
			std::deque<long>::const_iterator doc_resps_last_i = map_docs_resps_i->second.end(),   doc_resps_last_j = map_docs_resps_j->second.end ();

			long c1ij = 0;
			while (doc_resps_iter_i != doc_resps_last_i && doc_resps_iter_j != doc_resps_last_j ) {
				if (*doc_resps_iter_i == *doc_resps_iter_j) {
					c1ij++;
					doc_resps_iter_i++;
					doc_resps_iter_j++;
				} else
				if (*doc_resps_iter_i < *doc_resps_iter_j)
					doc_resps_iter_i++;
				else
					doc_resps_iter_j++;
			}

			std::deque<u_int64_t>::const_iterator refs_resps_iter_i = map_refs_resps_i->second.begin(), refs_resps_iter_j = map_refs_resps_j->second.begin ();
			std::deque<u_int64_t>::const_iterator refs_resps_last_i = map_refs_resps_i->second.end(),   refs_resps_last_j = map_refs_resps_j->second.end ();

			long c2ij = 0;
			while (refs_resps_iter_i != refs_resps_last_i && refs_resps_iter_j != refs_resps_last_j ) {
				if (*refs_resps_iter_i == *refs_resps_iter_j) {
					c2ij++;
					refs_resps_iter_i++;
					refs_resps_iter_j++;
				} else
				if (*refs_resps_iter_i < *refs_resps_iter_j)
					refs_resps_iter_i++;
				else
					refs_resps_iter_j++;
			}

			w_link = (double) ((c1ij + 3*c2ij)) / (4*sqrt ((double) (gdi*gdj)));
		}
	}
	return w_link;
}

double	calculate_w_lem (long doc_id_i, long doc_id_j, long Wi)
{
	long Wj = doc_words.find (doc_id_j)->second;
	//printf ("\ncalulate w_lem for doc %ld (%ld words) and doc %ld (%ld words), tfidf_i: %f, tfidf_j: %f\n", doc_id_i, Wi, doc_id_j, Wj, tfidf.find (doc_id_i)->second, tfidf.find (doc_id_j)->second);

	//вычислить общие леммы
	std::map<long, lemmacounts_packed>::const_iterator doc_i = doc_lemmas_counts_packed->find (doc_id_i);
	std::map<long, lemmacounts_packed>::const_iterator doc_j = doc_lemmas_counts_packed->find (doc_id_j);
	lemmacounts_packed::const_iterator lemmas_in_i = doc_i->second.begin (), lemmas_in_j = doc_j->second.begin ();
	std::deque<long> common_lemmas, common_lemmas_count;

	long lemma_i = (long)(*lemmas_in_i >> 32), lemma_j = (long)(*lemmas_in_j >> 32);
	lemmacounts_packed::const_iterator doc_i_end = doc_i->second.end ();
	lemmacounts_packed::const_iterator doc_j_end = doc_j->second.end ();

	double sum = 0.0;
	for (;;){
		if (lemma_i == lemma_j) {
			long Nwi = (long)(*lemmas_in_i & 0xffffffff);
			long Nwj = (long)(*lemmas_in_j & 0xffffffff);
			if (lemmas_to_skip.find (lemma_i) == lemmas_to_skip.end ()) {
				double tf_i = Nwi / (Nwi + 0.5 + 1.5 * (Wi / W));
				double tf_j = Nwj / (Nwj + 0.5 + 1.5 * (Wj / W));
				double idf = lemma_idf.find (lemma_i)->second;
				sum += (0.4+0.6*tf_i*idf)*(0.4+0.6*tf_j*idf);
				//printf ("lemma %s, sum now: %f\n", lemmas.at (lemma_i).c_str (), sum);
			}

			lemmas_in_i++;
			lemmas_in_j++;
			if (lemmas_in_i == doc_i_end || lemmas_in_j == doc_j_end)
				break;
			lemma_i = (long)(*lemmas_in_i >> 32);
			lemma_j = (long)(*lemmas_in_j >> 32);
		} else if (lemma_i < lemma_j) {
			lemmas_in_i++;
			if (lemmas_in_i == doc_i_end)
				break;
			lemma_i = (long)(*lemmas_in_i >> 32);
		} else {
			lemmas_in_j++;
			if (lemmas_in_j == doc_j_end)
				break;
			lemma_j = (long)(*lemmas_in_j >> 32);
		}
	}
	//printf ("final: w_lem = %f\n", sum / (tfidf.find (doc_id_i)->second * tfidf.find (doc_id_j)->second));
	return (sum / (tfidf.find (doc_id_i)->second * tfidf.find (doc_id_j)->second));
}

template <typename T>
class IndexDataLoader {
public:
	IndexDataLoader (const bool is_array = true) : m_is_array (is_array) {
	}

	T* load (YBase* base, const long doc_id, const int tag, long& count) {
		Core::Aptr <T> ret;
		count = 0;

		if (tag == IDD2_PARAIDS) {
			ret = (T*)base->LoadAttrEx (doc_id, tag, count);
		} else {
			ret = (T*)base->LoadAttr (doc_id, tag, count);
		}

		if (ret.ptr ()) {
			if (m_is_array) {
				count = count / sizeof (T);
			}
		} else {
			count = 0;
		}

		return ret._retn ();
	}
private:
	bool m_is_array;
};

#define	MAX_THREADS	16
typedef std::deque<long> docs_vector;

struct thread_data_struct {
	long from;
	long to;
	std::map<long, std::deque<DocRele> > samedocs_map;
	volatile int done;
};

thread_data_struct thread_data [MAX_THREADS], thread_data_2 [MAX_THREADS];

DocCollection *alldocs, *new_docs = 0, *old_docs = 0;
std::set<long> part_documents;
std::map<long,long> part_documents_from, part_documents_to;
long	C;

void	calculate_samedocs (int* thread_id)
{
	int this_thread_id = *thread_id;
	long calculated = 0, skipped = 0;
	thread_data_struct* thread_data_ptr = & (thread_data [this_thread_id]);
	long prev_percent = -1, pos = 0, max_C = thread_data_ptr->to - thread_data_ptr->from;
	for (int i = thread_data_ptr->from; i < thread_data_ptr->to; i++, pos++) {
		if ((pos * 100) / max_C != prev_percent) {
			prev_percent = (pos * 100) / max_C;
			printf ("%ld.%ld%% ", this_thread_id, prev_percent); fflush (stdout);
		}
		//printf ("\rcalc: %ld, skip: %ld ", calculated, skipped);
		long doc_id_i = (*alldocs)[i];

		if (doc_words.find (doc_id_i) == doc_words.end ())
			continue;

		if (year_docs.size () && year_docs.find (doc_id_i) == year_docs.end ()) {
			skipped++;
			continue;
		}

		//ACE_hrtime_t m_start_count = Core::GDS::HiResCounterSingl::instance()->get_count ();

		calculated++;

		long Wi = doc_words.find (doc_id_i)->second;

		std::set<short> cos_set;
		std::map<short, docs_vector> map_cos;

		for (int j = 0; j < C; j++ ) {
			long doc_id_j = (*alldocs)[j];
			
			if (doc_id_i == doc_id_j || doc_words.find (doc_id_j) == doc_words.end ())
				continue;

			double w_lem = calculate_w_lem (doc_id_i, doc_id_j, Wi);
			double w_link = calculate_w_link (doc_id_i, doc_id_j);
			double cos = ( w_lem + 0.3 * w_link ) / 1.3;

			short long_cos = (short)(cos * 10000);
			cos_set.insert (long_cos);
			std::map<short,docs_vector>::iterator map_cos_iter = map_cos.insert (std::map<short,docs_vector>::value_type (long_cos,docs_vector ())).first;
			map_cos_iter->second.push_back (doc_id_j);
		}

		std::deque<DocRele> same_docs;
		for (std::set<short>::reverse_iterator cos_set_it = cos_set.rbegin (); cos_set_it != cos_set.rend (); cos_set_it++) {
			short long_cos = *cos_set_it;
			if (long_cos < 2900 || same_docs.size () == 30)
				break;
			if (long_cos) {
				std::map<short,docs_vector>::iterator map_cos_iter = map_cos.find (long_cos);
				for (docs_vector::const_iterator docs_iter = map_cos_iter->second.begin (); docs_iter != map_cos_iter->second.end (); docs_iter++) {
					DocRele doc_rele = {*docs_iter, long_cos};
					same_docs.push_back (doc_rele);
					if (same_docs.size () == 30)
						break;
				}
			}
		}
		if (same_docs.size ())
			thread_data_ptr->samedocs_map.insert (std::map<long,std::deque<DocRele> >::value_type (doc_id_i, same_docs));

		/*
		unsigned sec;
		unsigned msec;
		unsigned usec;
		Core::GDS::HiResCounterSingl::instance()->tiks_to_time(Core::GDS::HiResCounterSingl::instance()->get_count () - m_start_count, sec, msec, usec);
		if (this_thread_id == 0)
			printf ("%ld.%ld.%ld ", sec, msec, usec);
		*/
	}
	thread_data_ptr->done = 1;
}

void	calculate_samedocs_new (int* thread_id)
{
	int this_thread_id = *thread_id;
	thread_data_struct* thread_data_ptr = & (thread_data [this_thread_id]);
	long prev_percent = -1, pos = 0, max_C = thread_data_ptr->to - thread_data_ptr->from;
	for (int i = thread_data_ptr->from; i < thread_data_ptr->to; i++, pos++) {
		if ((pos * 100) / max_C != prev_percent) {
			prev_percent = (pos * 100) / max_C;
			printf ("%ld.%ld%% ", this_thread_id, prev_percent); fflush (stdout);
		}
		long doc_id_i = (*new_docs)[i];

		if (doc_words.find (doc_id_i) == doc_words.end ())
			continue;

		long Wi = doc_words.find (doc_id_i)->second;

		std::set<short> cos_set;
		std::map<short, docs_vector> map_cos;

		for (int j = 0; j < C; j++ ) {
			long doc_id_j = (*alldocs)[j];

			if (doc_id_i == doc_id_j || doc_words.find (doc_id_j) == doc_words.end ())
				continue;

			double w_lem = calculate_w_lem (doc_id_i, doc_id_j, Wi);
			double w_link = calculate_w_link (doc_id_i, doc_id_j);
			double cos = ( w_lem + 0.3 * w_link ) / 1.3;

			short long_cos = (short)(cos * 10000);
			cos_set.insert (long_cos);
			std::map<short,docs_vector>::iterator map_cos_iter = map_cos.insert (std::map<short,docs_vector>::value_type (long_cos,docs_vector ())).first;
			map_cos_iter->second.push_back (doc_id_j);
		}

		std::deque<DocRele> same_docs;
		for (std::set<short>::reverse_iterator cos_set_it = cos_set.rbegin (); cos_set_it != cos_set.rend (); cos_set_it++) {
			short long_cos = *cos_set_it;
			if (long_cos < 2900/* || same_docs.size () == 30*/)
				break;
			if (long_cos) {
				std::map<short,docs_vector>::iterator map_cos_iter = map_cos.find (long_cos);
				for (docs_vector::const_iterator docs_iter = map_cos_iter->second.begin (); docs_iter != map_cos_iter->second.end (); docs_iter++) {
					DocRele doc_rele = {*docs_iter, long_cos};
					same_docs.push_back (doc_rele);
					/*
					if (same_docs.size () == 30)
						break;
					*/
				}
			}
		}
		if (same_docs.size ())
			thread_data_ptr->samedocs_map.insert (std::map<long,std::deque<DocRele> >::value_type (doc_id_i, same_docs));
	}
	thread_data_ptr->done = 1;
}

ACE_Recursive_Thread_Mutex new_doc_mutex;
long new_doc_it = 0;
long	get_new_doc (bool next)
{
	RWRITE_GUARD (new_doc_mutex) {
		if (new_doc_it == new_docs->ItemCount)
			return 0;
		long result = (*new_docs) [new_doc_it];
		if (next)
			new_doc_it++;
		return result;
	}
}

void	calculate_samedocs_new_78 (int* thread_id)
{
	int this_thread_id = *thread_id;
	thread_data_struct* thread_data_ptr = & (thread_data [this_thread_id]);
	long prev_percent = -1, pos = 0, max_C = thread_data_ptr->to - thread_data_ptr->from;
	for (;;) {
		long doc_id_i = get_new_doc (true);
		if (!doc_id_i) {
			printf ("thread %ld finished\n", this_thread_id); fflush (stdout);
			break;
		}

		if (doc_words.find (doc_id_i) == doc_words.end ())
			continue;

		long Wi = doc_words.find (doc_id_i)->second;

		std::set<short> cos_set;
		std::map<short, docs_vector> map_cos;

		for (int j = 0; j < C; j++ ) {
			long doc_id_j = (*alldocs)[j];

			if (doc_id_i == doc_id_j || doc_words.find (doc_id_j) == doc_words.end ())
				continue;

			double w_lem = calculate_w_lem (doc_id_i, doc_id_j, Wi);
			double w_link = calculate_w_link (doc_id_i, doc_id_j);
			double cos = ( w_lem + 0.3 * w_link ) / 1.3;

			short long_cos = (short)(cos * 10000);
			cos_set.insert (long_cos);
			std::map<short,docs_vector>::iterator map_cos_iter = map_cos.insert (std::map<short,docs_vector>::value_type (long_cos,docs_vector ())).first;
			map_cos_iter->second.push_back (doc_id_j);
		}

		std::deque<DocRele> same_docs;
		for (std::set<short>::reverse_iterator cos_set_it = cos_set.rbegin (); cos_set_it != cos_set.rend (); cos_set_it++) {
			short long_cos = *cos_set_it;
			if (long_cos < 2900/* || same_docs.size () == 30*/)
				break;
			if (long_cos) {
				std::map<short,docs_vector>::iterator map_cos_iter = map_cos.find (long_cos);
				for (docs_vector::const_iterator docs_iter = map_cos_iter->second.begin (); docs_iter != map_cos_iter->second.end (); docs_iter++) {
					DocRele doc_rele = {*docs_iter, long_cos};
					same_docs.push_back (doc_rele);
					/*
					if (same_docs.size () == 30)
						break;
					*/
				}
			}
		}
		if (same_docs.size ())
			thread_data_ptr->samedocs_map.insert (std::map<long,std::deque<DocRele> >::value_type (doc_id_i, same_docs));
	}
	thread_data_ptr->done = 1;
}


void	calculate_samedocs_old (int* thread_id)
{
	int this_thread_id = *thread_id;
	thread_data_struct* thread_data_ptr = & (thread_data_2 [this_thread_id]);
	long prev_percent = 0, pos = 0, max_C = thread_data_ptr->to - thread_data_ptr->from;
	for (int i = thread_data_ptr->from; i < thread_data_ptr->to; i++, pos++) {
		if ((pos * 100) / max_C != prev_percent) {
			prev_percent = (pos * 100) / max_C;
			printf ("%ld.%ld%% ", this_thread_id, prev_percent); fflush (stdout);
		}
		long doc_id_i = (*old_docs)[i];

		if (doc_words.find (doc_id_i) == doc_words.end ())
			continue;

		long Wi = doc_words.find (doc_id_i)->second;

		std::set<short> cos_set;
		std::map<short, docs_vector> map_cos;

		for (int j = 0; j < new_docs->ItemCount; j++ ) {
			long doc_id_j = (*new_docs)[j];

			if (doc_id_i == doc_id_j || doc_words.find (doc_id_j) == doc_words.end ())
				continue;

			double w_lem = calculate_w_lem (doc_id_i, doc_id_j, Wi);
			double w_link = calculate_w_link (doc_id_i, doc_id_j);
			double cos = ( w_lem + 0.3 * w_link ) / 1.3;
			short long_cos = (short)(cos * 10000);
			cos_set.insert (long_cos);
			std::map<short,docs_vector>::iterator map_cos_iter = map_cos.insert (std::map<short,docs_vector>::value_type (long_cos,docs_vector ())).first;
			map_cos_iter->second.push_back (doc_id_j);
		}

		std::deque<DocRele> same_docs;
		for (std::set<short>::reverse_iterator cos_set_it = cos_set.rbegin (); cos_set_it != cos_set.rend (); cos_set_it++) {
			short long_cos = *cos_set_it;
			if (long_cos < 2900 || same_docs.size () == 30)
				break;
			if (long_cos) {
				std::map<short,docs_vector>::iterator map_cos_iter = map_cos.find (long_cos);
				for (docs_vector::const_iterator docs_iter = map_cos_iter->second.begin (); docs_iter != map_cos_iter->second.end (); docs_iter++) {
					DocRele doc_rele = {*docs_iter, long_cos};
					same_docs.push_back (doc_rele);
					if (same_docs.size () == 30)
						break;
				}
			}
		}
		if (same_docs.size ())
			thread_data_ptr->samedocs_map.insert (std::map<long,std::deque<DocRele> >::value_type (doc_id_i, same_docs));
		else {
			DocRele doc_rele = {0,0};
			same_docs.push_back (doc_rele);
			thread_data_ptr->samedocs_map.insert (std::map<long,std::deque<DocRele> >::value_type (doc_id_i, same_docs));
		}
	}
	thread_data_ptr->done = 1;
}

extern	void	BuildPatternM (ContextPattern&, char*);

char*	findkey_woprefix (Index* index, char* _key)
{
	char *key = strdup (_key), *token = strtok (key, "\\"), *result = (char*) malloc (1024);
	result [0] = 0;
	long par_id = 0, next_id;
	while (token) {
		bool found = false;
		for (BTIterator it(index); !it.End () && !found; ++it) {
			HIndex::HIndexKey* key = (HIndex::HIndexKey*) it.Key ();
			if (key->parent == par_id && !strcmp (key->text + 4, token)) {
				found = true;
				next_id = key->id;
				if (strlen (result))
					strcat (result, "\\");
				strcat (result, key->text);
			}
		}
		if (!found)
			return 0;
		par_id = next_id;
		token = strtok (0, "\\");
	}
	return result;
}

void get_alldocs (int run_mode, bool show_errors, bool use_turbo)
{
	part_documents.clear ();
	part_documents_from.clear ();
	part_documents_to.clear ();
	switch (run_mode) {
		case 1:
			{
			alldocs = new DocCollection ();

			DocCollection letter_docs;
			long comments_id = 0, count = 0;
			BTIterator *btit;
			for (btit = new BTIterator (aBase->FindIndex ("Type")); !btit->End () && count < 2; ++(*btit)) {
				HIndex::HIndexKey* hkey = (HIndex::HIndexKey*) btit->Key();
				if (hkey->level==0 && !strcmp (hkey->text+4, "Комментарии")) {
					comments_id = hkey->id;
					count++;
				}
				if (hkey->level==0 && !strcmp (hkey->text+4, "Письмо")) {
					Stream* str = aBase->FindIndex ("Type")->Index::OpenN (hkey,0);
					if (str) {
						letter_docs.FastLoadRefs (str);
						aBase->FindIndex ("Type")->Close (str);
					}
					count++;
				}
			}
			delete btit;
			for (btit = new BTIterator (aBase->FindIndex ("Type")); !btit->End (); ++(*btit)) {
				HIndex::HIndexKey* hkey = (HIndex::HIndexKey*) btit->Key();
				if (hkey->level==1 && hkey->parent == comments_id && !strcmp (hkey->text+4, "Вопрос-ответ")) {
					Stream* str = aBase->FindIndex ("Type")->Index::OpenN (hkey,0);
					if (str) {						
						alldocs->FastLoadRefs (str);
						aBase->FindIndex ("Type")->Close (str);
						break;
					}
				}
			}
			delete btit;
			for (btit = new BTIterator (aBase->FindIndex ("Type")); !btit->End (); ++(*btit)) {
				HIndex::HIndexKey* hkey = (HIndex::HIndexKey*) btit->Key();
				if (hkey->level==1 && hkey->parent == comments_id && (!strcmp (hkey->text+4, "Статья") || !strcmp (hkey->text+4, "Книга"))) {
					Stream* str = aBase->FindIndex ("Type")->Index::OpenN (hkey,0);
					if (str) {
						DocCollection minus_docs;
						minus_docs.FastLoadRefs (str);
						aBase->FindIndex ("Type")->Close (str);
						alldocs->Minus (minus_docs);
					}
				}
			}
			delete btit;

			char *adopteds[] = {
				"Федеральные министерства и ведомства\\Минтруд России (Министерство труда и социального развития РФ)",
				"Федеральные министерства и ведомства\\Роструд (Федеральная служба по труду и занятости)",
				"Государственные фонды\\Пенсионный Фонд России",
				"Государственные фонды\\ФСС РФ (Фонд социального страхования Российской Федерации)",
				"Органы власти г. Москвы\\Отделение ПФР по г. Москве",
				"Органы власти г. Москвы\\Отделение ПФР по г. Москве и Московской области",
				"Органы власти Московской области\\Отделение ПФР по МО (Отделение Пенсионного фонда РФ по Московской области)",
				"Органы власти Московской области\\ГУ-МОРО ФСС РФ (ГУ Московское областное Региональное отделение ФСС РФ)",
				"Органы власти г. Санкт-Петербурга\\Отделение ПФР по г. Санкт-Петербургу",
				"Органы власти Удмуртской Республики\\ГУ-РО ФСС РФ по УР",
				"Органы власти Амурской области\\ГУ Амурское региональное отделение ФСС",
				"Органы власти Архангельской области\\Отделение ПФР по Архангельской области",
				"Органы власти Костромской области\\Костромское региональное отделение ФСС РФ",
				"Органы власти Нижегородской области\\Нижегородское региональное отделение ФСС",
				"Органы власти Камчатского края\\Органы власти Камчатской области\\Камчатское региональное отделение ФСС РФ",
				"Федеральные министерства и ведомства\\Минфин России (Министерство финансов РФ)",
				"Федеральные министерства и ведомства\\ФНС России (Федеральная налоговая служба)",
				"Органы власти Удмуртской Республики\\Инспекция ФНС России по Ленинскому району г.Ижевска УР",
				"Органы власти Удмуртской Республики\\Межрайонная инспекция ФНС РФ N 8 по УР",
				"Органы власти Чувашской Республики\\Управление ФНС РФ по Чувашской Республике",
				"Органы власти Краснодарского края\\Управление ФНС РФ по Краснодарскому краю",
				"Органы власти Архангельской области\\Управление ФНС РФ по Архангельской области и Ненецкому автономному округу",
				"Органы власти Владимирской области\\Управление ФНС России по Владимирской области",
				"Органы власти Волгоградской области\\Управление ФНС России по Волгоградской области",
				"Органы власти Калининградской области\\Управление ФНС по Калининградской области",
				"Органы власти Кемеровской области\\Управление ФНС по Кемеровской области",
				"Органы власти Костромской области\\Управление ФНС РФ по Костромской области",
				"Органы власти Новосибирской области\\Управление ФНС России по Новосибирской области",
				"Органы власти Омской области\\Управление ФНС по Омской области",
				"Органы власти Ростовской области\\Управление ФНС РФ по Ростовской области",
				"Органы власти Смоленской области\\ФНС России (Федеральная налоговая служба) по Смоленской области",
				"Органы власти Томской области\\Управление ФНС по Томской области",
				"Органы власти Тульской области\\Межрайонная инспекция ФНС России по крупнейшим налогоплательщикам Тульской области",
				"Органы власти Тульской области\\Управление ФНС России по Тульской области",
				"Органы власти Тюменской области\\Управление ФНС РФ по Тюменской области",
				"Органы власти Челябинской области\\Управление ФНС РФ по Челябинской области",
				"Органы власти Ярославской области\\Управление ФНС России по Ярославской области",
				"Органы власти Ямало-Ненецкого автономного округа\\Управление ФНС по ЯНАО",
				"Органы власти Республики Карелия\\Территориальные органы федеральных органов исполнительной власти\\Управление ФНС (Федеральной налоговой службы) РФ по Республике Карелия",
				"Органы власти Республики Марий Эл\\Территориальные органы федеральных органов исполнительной власти\\Управление ФНС (Федеральной налоговой службы) РФ по Республике Марий Эл",
				"Органы власти Камчатского края\\Органы власти Камчатской области\\Управление ФНС России по Камчатской области и Корякскому АО",
				"Органы власти Свердловской области\\Министерства и ведомства Свердловской области\\Управление ФНС РФ по Свердловской области",
				"Органы власти Чувашской Республики\\Органы власти городов и районов Чувашской Республики\\г. Чебоксары\\Инспекция ФНС РФ по г. Чебоксары",
				"Органы власти Чувашской Республики\\Органы власти городов и районов Чувашской Республики\\г. Чебоксары\\Инспекция ФНС РФ по Ленинскому району г. Чебоксары",
				"Органы власти Чувашской Республики\\Органы власти городов и районов Чувашской Республики\\г. Новочебоксарск\\Инспекция ФНС РФ по г. Новочебоксарск",
				"Органы власти Чувашской Республики\\Органы власти городов и районов Чувашской Республики\\г. Алатырь\\Межрайонная инспекция ФНС РФ N 1 по ЧР",
				"Органы власти Чувашской Республики\\Органы власти городов и районов Чувашской Республики\\г. Канаш\\Межрайонная инспекция ФНС РФ N 4 по ЧР",
				"Органы власти Чувашской Республики\\Органы власти городов и районов Чувашской Республики\\г. Шумерля\\Межрайонная инспекция ФНС РФ N 8 по ЧР",
				"Органы власти Чувашской Республики\\Органы власти городов и районов Чувашской Республики\\Алатырский район\\Межрайонная инспекция ФНС РФ N 1 по ЧР",
				"Органы власти Чувашской Республики\\Органы власти городов и районов Чувашской Республики\\Аликовский район\\Межрайонная инспекция ФНС РФ N 3 по ЧР",
				"Органы власти Чувашской Республики\\Органы власти городов и районов Чувашской Республики\\Батыревский район\\Межрайонная инспекция ФНС РФ N 2 по ЧР",
				"Органы власти Чувашской Республики\\Органы власти городов и районов Чувашской Республики\\Вурнарский район\\Межрайонная инспекция ФНС РФ N 3 по ЧР",
				"Органы власти Чувашской Республики\\Органы власти городов и районов Чувашской Республики\\Ибресинский район\\Межрайонная инспекция ФНС РФ N 3 по ЧР",
				"Органы власти Чувашской Республики\\Органы власти городов и районов Чувашской Республики\\Канашский район\\Межрайонная инспекция ФНС РФ N 4 по ЧР",
				"Органы власти Чувашской Республики\\Органы власти городов и районов Чувашской Республики\\Козловский район\\Межрайонная инспекция ФНС РФ N 7 по ЧР",
				"Органы власти Чувашской Республики\\Органы власти городов и районов Чувашской Республики\\Комсомольский район\\Межрайонная инспекция ФНС РФ N 2 по ЧР",
				"Органы власти Чувашской Республики\\Органы власти городов и районов Чувашской Республики\\Красноармейский район\\Межрайонная инспекция ФНС РФ N 7 по ЧР",
				"Органы власти Чувашской Республики\\Органы власти городов и районов Чувашской Республики\\Красночетайский район\\Межрайонная инспекция ФНС РФ N 6 по ЧР",
				"Органы власти Чувашской Республики\\Органы власти городов и районов Чувашской Республики\\Мариинско-Посадский район\\Межрайонная инспекция ФНС РФ N 5 по ЧР",
				"Органы власти Чувашской Республики\\Органы власти городов и районов Чувашской Республики\\Моргаушский район\\Межрайонная инспекция ФНС РФ N 6 по ЧР",
				"Органы власти Чувашской Республики\\Органы власти городов и районов Чувашской Республики\\Порецкий район\\Межрайонная инспекция ФНС РФ N 8 по ЧР",
				"Органы власти Чувашской Республики\\Органы власти городов и районов Чувашской Республики\\Урмарский район\\Межрайонная инспекция ФНС РФ N 7 по ЧР",
				"Органы власти Чувашской Республики\\Органы власти городов и районов Чувашской Республики\\Цивильский район\\Межрайонная инспекция ФНС РФ N 7 по ЧР",
				"Органы власти Чувашской Республики\\Органы власти городов и районов Чувашской Республики\\Чебоксарский район\\Межрайонная инспекция ФНС РФ N 5 по ЧР",
				"Органы власти Чувашской Республики\\Органы власти городов и районов Чувашской Республики\\Шемуршинский район\\Межрайонная инспекция ФНС РФ N 2 по ЧР",
				"Органы власти Чувашской Республики\\Органы власти городов и районов Чувашской Республики\\Шумерлинский район\\Межрайонная инспекция ФНС РФ N 8 по ЧР",
				"Органы власти Чувашской Республики\\Органы власти городов и районов Чувашской Республики\\Ядринский район\\Межрайонная инспекция ФНС РФ N 6 по ЧР",
				"Органы власти Чувашской Республики\\Органы власти городов и районов Чувашской Республики\\Яльчикский район\\Межрайонная инспекция ФНС РФ N 2 по ЧР",
				"Органы власти Чувашской Республики\\Органы власти городов и районов Чувашской Республики\\Янтиковский район\\Межрайонная инспекция ФНС РФ N 4 по ЧР",
				"Органы власти Ставропольского края\\Органы власти городов и районов KMB\\г. Пятигорск\\Инспекция ФНС РФ по г. Пятигорску",
				"Органы власти Архангельской области\\Органы власти городов и районов Архангельской области\\г. Архангельск\\Инспекция ФНС России по г. Архангельск",
				"Органы власти Архангельской области\\Органы власти городов и районов Архангельской области\\г. Архангельск\\Межрайонная инспекция ФНС России N 7 по Архангельской области и Ненецкому АО",
				"Органы власти Архангельской области\\Органы власти городов и районов Архангельской области\\г. Новодвинск\\Межрайонная инспекция ФНС России N 3 по Архангельской области и Ненецкому АО",
				"Органы власти Архангельской области\\Органы власти городов и районов Архангельской области\\г. Северодвинск\\Инспекция ФНС России по г. Северодвинску",
				"Органы власти Ивановской области\\Управление Федеральной налоговой службы по Ивановской области",
				"Органы власти Мурманской области\\Органы власти городов и районов Мурманской области\\г. Апатиты\\Инспекция ФНС России по г. Апатиты",
				"Органы власти Мурманской области\\Органы власти городов и районов Мурманской области\\г. Мончегорск\\Инспекция ФНС России по г. Мончегорску",
				"Органы власти Мурманской области\\Органы власти городов и районов Мурманской области\\г. Мурманск\\Инспекция ФНС России по г. Мурманску",
				"Органы власти Мурманской области\\Органы власти городов и районов Мурманской области\\Печенгский район\\Инспекция ФНС России по Печенгскому району",
				"Органы власти Пензенской области\\Органы исполнительной власти Пензенской области\\Министерства и ведомства Пензенской области\\Управление ФНС России по Пензенской области",
				"Органы власти Самарской области\\Органы власти городов и районов Самарской обл.\\г.Самара\\Инспекция ФНС России по Октябрьскому району г.о. Самары",
				"Органы власти Самарской области\\Органы власти городов и районов Самарской обл.\\г.Тольятти\\Межрайонная Инспекция ФНС России N 2 по Самарской области",
				"Органы власти Ханты-Мансийского автономного округа\\Органы власти городов и районов Ханты-Мансийского автономного округа\\Город Сургут\\Инспекция ФНС России по г.Сургуту"
			};

			{
			Index* index = aBase->FindIndex ("Category");
			char* key = "Общие";
			Stream* str = index->Open (key);
			if (str) {
				DocCollection category_docs;
				category_docs.Get (str);
				index->Close (str);
				letter_docs.Intersect (category_docs);
			}
			}

			{
			DocCollection adopted_docs;
			Index* index = aBase->FindIndex ("Adopted");
			for (long i = 0; i < sizeof (adopteds) / sizeof (char*); i++) {
				char* key = findkey_woprefix (index, adopteds [i]);
				if (!key) {
					if (show_errors) printf ("ERROR: bad key %s\n", adopteds [i]);
				} else {
					Stream* str = index->Open (key);
					if (str) {
						DocCollection ado_docs;
						ado_docs.Get (str);
						index->Close (str);
						adopted_docs.Merge (ado_docs);
					}
					gk_free (key);
				}
			}
			letter_docs.Intersect (adopted_docs);

			if (use_turbo) {
				Index *swords_index = aBase->FindIndex ("SWords");			
				for (int i = 0; i < letter_docs.ItemCount; i++) {
					long doc_id = letter_docs [i];
					part_documents.insert (doc_id);

					Document* doc = aBase->GetDoc (doc_id);
					long para1 = -1, para2 = -1;
					bool b_found_text = false;
					for (int para = 0; para < doc->Stat.ParaCount && (para1 == -1 || para2 == -1); para++) {
						long flags = doc->EVDFlags (doc->GetPara (para));
						if (flags & ENDT_SBS) {
							if (para2 == -1)
								para2 = para;
						}
						else
						if (flags & ENDT_HEADER) {
							if (para1 == -1)
								para1 = para;
						}
						else
						if (para1 != -1 && !b_found_text) {
							b_found_text = true;
							para1 = para;
						}
					}
					if (para1 == -1)
						para1 = 0;
					if (para2 == -1)
						para2 = doc->Stat.ParaCount-1;
					delete doc;
					Stream *str = swords_index->Open (&doc_id);
					if (str) {
						char* swords = (char*) malloc (str->Length ()+4);
						str->Read (swords, str->Length ());
						swords_index->Close (str);
						long from = ((*(long*) (swords + 3*para1)) & 0xFFFFFF) + 1, to = ((*(long*) (swords + 3*para2)) & 0xFFFFFF) + 1;
						part_documents_to.insert (std::map<long,long>::value_type (doc_id, to));
						gk_free (swords);
					}
				}
			}
			alldocs->Merge (letter_docs);
			}

			}

			break;

		case 2:
			{
			alldocs = new DocCollection;
			Index *types_index = aBase->FindIndex ("Type"), *adopted_index = aBase->FindIndex ("Adopted"), *swords_index = aBase->FindIndex ("SWords");
			BTIterator *btit;
			DocCollection part1, part2, part3, part4, part5, part6;
			for (btit = new BTIterator (types_index); !btit->End (); ++(*btit)) {
				HIndex::HIndexKey *key = (HIndex::HIndexKey*) btit->Key ();
				if (!key->level) {
					Stream* str = types_index->Index::OpenN (key, 0);
					if (!strcmp (key->text+4, "Постановление")) {
						part1.FastLoadRefs (str);
						part2.Merge (part1);
					}
					if (!strcmp (key->text+4, "Решение"))
						part3.FastLoadRefs (str);
					if (!strcmp (key->text+4, "Решение") || !strcmp (key->text+4, "Определение") || !strcmp (key->text+4, "Постановление") || !strcmp (key->text+4, "Приговор")) {
						str->Seek (0);
						DocCollection part;
						part.FastLoadRefs (str);
						part4.Merge (part);
					}
					if (!strcmp (key->text+4, "Постановление") || !strcmp (key->text+4, "Определение")) {
						str->Seek (0);
						part6.FastLoadRefs (str);
					}
					/*
					if (!strcmp (key->text+4, "Постановление") || !strcmp (key->text+4, "Определение")) {
						str->Seek (0);
						DocCollection part;
						part.FastLoadRefs (str);
						part6.Merge (part);
					}
					if (!strcmp (key->text+4, "Постановление") || !strcmp (key->text+4, "Решение")) {
						str->Seek (0);
						DocCollection part;
						part.FastLoadRefs (str);
						part5.Merge (part);
					}
					*/
					types_index->Close (str);
				}
			}
			delete btit;
			DocCollection a_part4, a_part5, a_part6;
			bool a_part3 = false, a_part2 = false, a_part1 = false;
			for (btit = new BTIterator (adopted_index); !btit->End (); ++(*btit)) {
				HIndex::HIndexKey *key = (HIndex::HIndexKey*) btit->Key ();
				Stream* str = adopted_index->Index::OpenN (key, 0);
				DocCollection adopteds;
				adopteds.Get (str);
				adopted_index->Close (str);
				if (!strcmp (key->text+4, "Федеральные арбитражные суды округов")) {
					part1.Intersect (adopteds);
					a_part1 = true;
				}
				if (!strcmp (key->text+4, "Президиум ВАС РФ")) {
					part2.Intersect (adopteds);
					a_part2 = true;
				}
				if (!strcmp (key->text+4, "Высший Арбитражный Суд России (ВАС РФ)")) {
					part3.Intersect (adopteds);
					a_part3 = true;
				}
				if (!strcmp (key->text+4, "Президиум Верховного Суда России") || !strcmp (key->text+4, "Кассационная коллегия Верховного Суда России") || !strcmp (key->text+4, "Военная коллегия Верховного Суда России") || !strcmp (key->text+4, "Судебная коллегия по гражданским делам Верховного Суда России") || !strcmp (key->text+4, "Судебная коллегия по уголовным делам Верховного Суда России") || !strcmp (key->text+4, "Суды общей юрисдикции"))
					a_part4.Merge (adopteds);
				if (!strcmp (key->text+4, "Арбитражные суды субъектов Российской Федерации") || !strcmp (key->text+4, "Арбитражные апелляционные суды"))
					a_part5.Merge (adopteds);
				if (!strcmp (key->text+4, "Конституционный Суд России (КС РФ)") || !strcmp (key->text+4, "Конституционные и уставные Суды субъектов РФ"))
					a_part6.Merge (adopteds);
			}
			if (!a_part1) part1.FreeAll ();
			if (!a_part2) part2.FreeAll ();
			if (!a_part3) part3.FreeAll ();
			part4.Intersect (a_part4);
			part5.Intersect (a_part5);
			part6.Intersect (a_part6);

			delete btit;
			long i;
			for (i = 0; i < part1.ItemCount; i++)
				part_documents.insert (part1 [i]);
			
			/*
			DocCollection name_docs;
			char doc_name [DOC_NAME_SIZE];
			ContextPattern pattern;
			for (i = 0; i < part2.ItemCount; i++) {
				long id = part2 [i];
				aBase->FindDocName (id, doc_name);
				BuildPatternM (pattern, doc_name);
				bool contains = false;
				for (int j = 0; j < pattern.WordCount - 3 && !contains; j++)
					if (!strcmp (pattern.Word [j], "ПЛЕНУМА") && !strcmp (pattern.Word [j+1], "ВЫСШЕГО") && !strcmp (pattern.Word [j+2], "АРБИТРАЖНОГО") && !strcmp (pattern.Word [j+3], "СУДА")) {
						contains = true;
						name_docs.Collection::Add (&id);
					}
			}
			part2.Minus (name_docs);
			*/
			for (i = 0; i < part2.ItemCount; i++)
				part_documents.insert (part2 [i]);

			alldocs->Merge (part1);
			alldocs->Merge (part2);
			alldocs->Merge (part3);
			alldocs->Merge (part4);
			alldocs->Merge (part5);
			alldocs->Merge (part6);

			//проверить part_documents
			DocCollection bad_docs;
			for (std::set<long>::const_iterator it = part_documents.begin (); it != part_documents.end (); it++) {
				long id = *it, sub_count, para1 = -1, para2 = -1;
				SubDescEx *subs_ex = (SubDescEx*) aBase->LoadAttr (id, IDD_SUBS_EX, sub_count), *saved_subs_ex = subs_ex;
				sub_count /= sizeof (SubDescEx);
				if (sub_count) {
					for (i = 0; i < sub_count && (para1 == -1 || para2 == -1); i++, subs_ex++) {
						if ((subs_ex->Flags == SUBDESCEX_SUB || subs_ex->Flags == SUBDESCEX_BLOCK) && (subs_ex->Sub == 20005))
							para1 = subs_ex->Para;
						else
						if ((subs_ex->Flags == SUBDESCEX_SUB || subs_ex->Flags == SUBDESCEX_BLOCK) && (subs_ex->Sub == 30005))
							para2 = subs_ex->Para;
					}
					gk_free (saved_subs_ex);
				} else {
					SubDesc *subs = (SubDesc*) aBase->LoadAttr (id, IDD_SUBS, sub_count), *saved_subs = subs;
					sub_count /= sizeof (SubDesc);
					for (i = 0; i < sub_count && (para1 == -1 || para2 == -1); i++, subs++) {
						if (subs->Sub == 20005)
							para1 = subs->Para;
						else
						if (subs->Sub == 30005)
							para2 = subs->Para;
					}
					gk_free (saved_subs);
				}

				if (para2 == -1) {
					DocInfo docinfo;
					aBase->FindDocInfo (id, docinfo);
					para2 = docinfo.ParaCount - 1;
				}
				if (para1 == -1/* || para2 == -1*/) {
					if (show_errors)
						printf ("У документа %ld нет 20005 или 30005 саба\n", id);
					bad_docs.Collection::Add (&id);
				} else {
					//составить мапу, с какого по какое слово читать лексемы
					if (use_turbo) {
						Stream *str = swords_index->Open (&id);
						if (str) {
							char* swords = (char*) malloc (str->Length ()+4);
							str->Read (swords, str->Length ());
							swords_index->Close (str);
							long from = ((*(long*) (swords + 3*para1)) & 0xFFFFFF) + 1, to = ((*(long*) (swords + 3*para2)) & 0xFFFFFF) + 1;
							gk_free (swords);
							part_documents_from.insert (std::map<long,long>::value_type (id, from));
							part_documents_to.insert (std::map<long,long>::value_type (id, to));
						} else {
							bad_docs.Collection::Add (&id);
						}
					}
				}
			}
			alldocs->Minus (bad_docs);
			}

			break;

		case 3:
			{
			alldocs = new DocCollection;
			Index *types_index = aBase->FindIndex ("Type"), *adopted_index = aBase->FindIndex ("Adopted");
			BTIterator *btit;
			DocCollection part5;
			for (btit = new BTIterator (types_index); !btit->End (); ++(*btit)) {
				HIndex::HIndexKey *key = (HIndex::HIndexKey*) btit->Key ();
				if (!key->level) {
					Stream* str = types_index->Index::OpenN (key, 0);
					if (!strcmp (key->text+4, "Постановление") || !strcmp (key->text+4, "Решение")) {
						str->Seek (0);
						DocCollection part;
						part.FastLoadRefs (str);
						part5.Merge (part);
					}
					types_index->Close (str);
				}
			}
			delete btit;

			DocCollection a_part5;
			for (btit = new BTIterator (adopted_index); !btit->End (); ++(*btit)) {
				HIndex::HIndexKey *key = (HIndex::HIndexKey*) btit->Key ();
				if (!strcmp (key->text+4, "Арбитражные апелляционные суды")) {
					Stream* str = adopted_index->Index::OpenN (key, 0);
					a_part5.Get (str);
					adopted_index->Close (str);
				}
			}
			delete btit;
			part5.Intersect (a_part5);

			alldocs->Merge (part5);
			}

			break;
	}

	if (alldocs && alldocs->ItemCount) {
		DocCollection fresh_docs;
		date date_1_1_2011;
		date_1_1_2011.da_day = 1;
		date_1_1_2011.da_mon = 1;
		date_1_1_2011.da_year = 2011;

		Index* dates_index   = aBase->FindIndex ("Date");
		for (BTIterator it (dates_index, &date_1_1_2011); !it.End (); ++it) {
			date _date = *((date*) it.Key ());
			Stream *str = dates_index->Open (it.Key ());
			if (str) {
				DocCollection dates_docs;
				dates_docs.Get (str);
				dates_index->Close (str);
				fresh_docs.Merge (dates_docs);
			}
		}
		alldocs->Intersect (fresh_docs);
	}
}

void localrev_adddays (revision& theRev, const int days) 
{ 
	time_t atime; 
	struct tm atm; 
	struct tm *ptm; 
	memset( &atm, 0, sizeof( atm )); 
	atm.tm_year = theRev.RevisionDate.da_year - 1900; 
	atm.tm_mday = theRev.RevisionDate.da_day; 
	atm.tm_mon  = theRev.RevisionDate.da_mon - 1; 
	atime = mktime( &atm ); 
	atime += (long)days * 24l * 3600l; 
	ptm   = localtime( &atime ); 
	theRev.RevisionDate.da_year = ptm -> tm_year + 1900; 
	theRev.RevisionDate.da_day = ptm -> tm_mday; 
	theRev.RevisionDate.da_mon = ptm -> tm_mon + 1;	 
} 

int main_logic ( int argc, char *argv[] )
{
	if (argc < 3)
		exit (EXIT_FAILURE);

	int run_mode = 0;
	bool b_print_topics = false;
	bool b_merge = false;
	if (!stricmp (argv [1], "QA"))
		run_mode = 1;
	else
	if (!stricmp (argv [1], "Court"))
		run_mode = 2;
	else
	if (!stricmp (argv [1], "Apell"))
		run_mode = 3;
	else
	if (!stricmp (argv [1], "QA-read")) {
		run_mode = 1;
		b_print_topics = true;
	} else
	if (!stricmp (argv [1], "Court-read")) {
		run_mode = 2;
		b_print_topics = true;
	} else
	if (!stricmp (argv [1], "Apell-read")) {
		run_mode = 3;
		b_print_topics = true;
	} else
	if (!stricmp (argv [1], "QA-merge")) {
		run_mode = 1;
		b_merge = true;
	} else
	if (!stricmp (argv [1], "Court-merge")) {
		run_mode = 2;
		b_merge = true;
	} else
	if (!stricmp (argv [1], "Apell-merge")) {
		run_mode = 3;
		b_merge = true;
	} else
		exit (EXIT_FAILURE);

	bool two_bases = argc > 3 && !atol (argv [3]);
	aBase = new YBase (argv [2], ACE_OS_O_RDONLY);
	aBase->IsOk ();

	std::set<long> fresh_set;

	if (b_print_topics) {
		get_alldocs (run_mode, false, false);
		DocCollection *all_docs = aBase->AllDocs ();
		alldocs->Intersect (*all_docs);
		delete all_docs;

		{
		DocCollection fresh_docs;
		date date_1_1_2011;
		date_1_1_2011.da_day = 1;
		date_1_1_2011.da_mon = 1;
		date_1_1_2011.da_year = 2011;

		Index* dates_index   = aBase->FindIndex ("Date");
		for (BTIterator it (dates_index, &date_1_1_2011); !it.End (); ++it) {
			date _date = *((date*) it.Key ());
			Stream *str = dates_index->Open (it.Key ());
			if (str) {
				DocCollection dates_docs;
				dates_docs.Get (str);
				dates_index->Close (str);
				fresh_docs.Merge (dates_docs);
			}
		}
		for (int i = 0; i < fresh_docs.ItemCount; i++)
			fresh_set.insert (fresh_docs [i]);
		}

#ifndef	WIN64
		delete aBase;
#endif
		
		for (int i = 0; i < alldocs->ItemCount; i++) {
			long id = (*alldocs)[i];
			if (fresh_set.find (id) != fresh_set.end ())
				printf ("%ld\n", id);
		}
		exit (EXIT_SUCCESS);
	}

	get_alldocs (run_mode, !two_bases, b_merge ? false : true);
	if (!two_bases && !alldocs->ItemCount)
		exit (EXIT_FAILURE);

	{
	DocCollection *all_docs = aBase->AllDocs ();
	alldocs->Intersect (*all_docs);
	delete all_docs;
	}

	Base* old_base = 0;
	if (two_bases) {
		//первая база - старая, вторая база - новая
		old_base = aBase;
		old_docs = new DocCollection (*alldocs);
		if (!stricmp (argv [3], "read")) {
			char part_file_name [32], str_to_write [32];
			sprintf (part_file_name, "samedocs_%s.next_week", argv [1]);
			FILE *part_file = mpcxc_fopen (part_file_name, "w" );

			IndexLoader old_loader (old_base);
			for (int i = 0; i < old_docs->ItemCount; i++) {
				long doc_id_i = (*old_docs)[i], old_same_docs_count;
				INDEX_DATA (DocRele) old_same_docs = old_loader.load <DocRele> (doc_id_i, IDD_SAMEDOCS, old_same_docs_count, true);
				if (old_same_docs.ptr ()) {
					sprintf (str_to_write, "%ld: ", doc_id_i);
					fputs (str_to_write, part_file);
					DocRele* old_same_docs_ptr = old_same_docs.ptr ();
					for (int docs = 0; docs < old_same_docs_count; docs++, old_same_docs_ptr++ ) {
						sprintf (str_to_write, "%ld.%ld ", old_same_docs_ptr->DocId, old_same_docs_ptr->Rele);
						fputs (str_to_write, part_file);
					}
					sprintf (str_to_write, "\n");
					fputs (str_to_write, part_file);
				}
			}
			fclose (part_file);
			delete old_base;
			exit (EXIT_SUCCESS);
		}

		aBase = new YBase (argv [3], ACE_OS_O_RDONLY);
		aBase->IsOk ();
		delete alldocs;
		get_alldocs (run_mode, true, true);

		{
		DocCollection fresh_docs;
		date date_1_1_2011;
		date_1_1_2011.da_day = 1;
		date_1_1_2011.da_mon = 1;
		date_1_1_2011.da_year = 2011;

		Index* dates_index   = aBase->FindIndex ("Date");
		for (BTIterator it (dates_index, &date_1_1_2011); !it.End (); ++it) {
			date _date = *((date*) it.Key ());
			Stream *str = dates_index->Open (it.Key ());
			if (str) {
				DocCollection dates_docs;
				dates_docs.Get (str);
				dates_index->Close (str);
				fresh_docs.Merge (dates_docs);
			}
		}
		for (int i = 0; i < fresh_docs.ItemCount; i++)
			fresh_set.insert (fresh_docs [i]);
		}

		{
			DocCollection* all_docs = aBase->AllDocs ();
			alldocs->Intersect (*all_docs);
			delete all_docs;
		}

		new_docs = new DocCollection (*alldocs);
		new_docs->Minus (*old_docs);
		printf ("old_docs: %ld, new_docs: %ld, all_docs: %ld\n", old_docs->ItemCount, new_docs->ItemCount, alldocs->ItemCount);
	} else {
		printf ("all_docs: %ld\n", alldocs->ItemCount);
	}

	DocCollection *all_docs = aBase->AllDocs ();

	if (two_bases && argc == 5 && !stricmp (argv [4], "vincluded")) {
		printf ("change VINCLUDED\n");
		delete aBase;
		aBase = new StdBigBase (argv [3], ACE_OS_O_RDWR);
		Index *attrs = aBase->FindIndex ("Attrs"), *dates = aBase->FindIndex ("VIncluded");
		AttrKey included_key = {0, IDD_VINCLUDED};
		date	included_date;

		char part_file_name [32], str_to_write [32];
		sprintf (part_file_name, "vincluded_%s.lst", argv [1]);
		FILE *part_file = mpcxc_fopen (part_file_name, "w" );

		for (int i = 0; i < new_docs->ItemCount; i++) {
			long doc_id_i = (*new_docs)[i];
			included_key.DocId = doc_id_i;
			Stream *str = attrs->Open (&included_key);
			if (str) {
				sprintf (str_to_write, "%ld\n", doc_id_i);
				fputs (str_to_write, part_file);
				str->Read (&included_date, sizeof (date));
				attrs->Close (str);
				revision rev;
				gk_bzero (&rev, sizeof (rev));
				rev.RevisionDate = included_date;
				localrev_adddays (rev, -(8*7));
				aBase->ReplaceAttr (doc_id_i, IDD_VINCLUDED, &rev.RevisionDate, sizeof (date));
				str = dates->Index::OpenN (&included_date, 0);
				if (str) {
					DocCollection docs;
					docs.Get (str);
					long item = docs.IndexOf (&doc_id_i);
					if (item != -1) {
						docs.atDelete (item);
						str->Seek (0);
						docs.Put (str);
						str->Trunc ();
					}
					dates->Close (str);
					if (!docs.ItemCount)
						dates->Delete (&included_date);
				}
				str = dates->Index::OpenN (&rev.RevisionDate, 0);
				if (str) {
					DocCollection docs;
					docs.Get (str);
					docs.Insert (&doc_id_i);
					str->Seek (0);
					docs.Put (str);
					str->Trunc ();
					dates->Close (str);
				}
			}
		}
		fclose (part_file);
		delete aBase;
		exit (EXIT_SUCCESS);
	}

	if (b_merge) {
		typedef std::vector<u_int64_t> map_doc_cos;
		std::map<long,map_doc_cos*> map_doc_sames;

		FILE* out_file = mpcxc_fopen (argv [argc-1], "w");
		char str_to_write [32];

		std::set<long> new_docs;

		char* str = new char [64 * 1048576];
		printf ("read files step 1");
		std::map<long,long> map_doc_count;
		for (int afile = 4; afile < argc - 1; afile++) {
			FILE* part_file = mpcxc_fopen (argv [afile], "rt");
			if (part_file) {
				char ref_str [32];
				while (!feof (part_file)) {
					if (!fgets (str, 64 * 1048576, part_file))
						break;

					int length = strlen (str);
					while (length && (str [length-1] == 10 || str [length-1] == 13))
						str [--length] = 0;
					if (!length)
						continue;

					char* delimiter = strchr (str, ':');
					strncpy (ref_str, str, delimiter - str);
					ref_str [delimiter - str] = 0;
					long id = atol (str), size = 0;

					new_docs.insert (id);

					for (char* ptr = delimiter+2; *ptr; ) {
						Ref same_ref;
						same_ref.DocId = atol (ptr);
						same_ref.Sub = atol (strchr (ptr, '.') + 1);

						std::map<long,long>::iterator map_it = map_doc_count.find (same_ref.DocId);
						if (map_it == map_doc_count.end ()) {
							map_doc_count.insert (std::map<long,long>::value_type (same_ref.DocId, 1));
						} else {
							map_it->second++;
						}

						char* next_ptr = strchr (ptr, ' ');
						if (!next_ptr)
							break;
						ptr = next_ptr + 1;
					}
				}
			}
			fclose (part_file);
		}

		for (std::map<long,long>::const_iterator map_it = map_doc_count.begin (); map_it != map_doc_count.end (); map_it++) {
			map_doc_cos *empty = new map_doc_cos;
			empty->reserve (map_it->second);
			map_doc_sames.insert (std::map<long,map_doc_cos*>::value_type (map_it->first, empty));
		}

		printf ("read files step 2");
		for (int afile = 4; afile < argc - 1; afile++) {
			FILE* part_file = mpcxc_fopen (argv [afile], "rt");
			if (part_file) {
				char ref_str [32];
				while (!feof (part_file)) {
					if (!fgets (str, 64 * 1048576, part_file))
						break;

					int length = strlen (str);
					while (length && (str [length-1] == 10 || str [length-1] == 13))
						str [--length] = 0;
					if (!length)
						continue;

					char* delimiter = strchr (str, ':');
					strncpy (ref_str, str, delimiter - str);
					ref_str [delimiter - str] = 0;
					long id = atol (str), size = 0;

					if (fresh_set.find (id) == fresh_set.end ())
						continue;

					sprintf (str_to_write, "%ld: ", id);
					fputs (str_to_write, out_file);
					for (char* ptr = delimiter+2; *ptr; ) {
						Ref same_ref;
						same_ref.DocId = atol (ptr);
						same_ref.Sub = atol (strchr (ptr, '.') + 1);
						if (same_ref.Sub >= 2900 && size < 100) {
							if (fresh_set.find (same_ref.DocId) != fresh_set.end ()) {
								sprintf (str_to_write, "%ld.%ld ", same_ref.DocId, same_ref.Sub);
								fputs (str_to_write, out_file);
								size++;
							}
						}

						u_int64_t to_insert = (((u_int64_t) id) << 32) + same_ref.Sub;
						std::map<long,map_doc_cos*>::iterator map_it = map_doc_sames.find (same_ref.DocId);
						if (map_it != map_doc_sames.end ())
							map_it->second->push_back (to_insert);

						char* next_ptr = strchr (ptr, ' ');
						if (!next_ptr)
							break;
						ptr = next_ptr + 1;
					}

					sprintf (str_to_write, "\n");
					fputs (str_to_write, out_file);

				}
				fclose (part_file);
			}
		}
		printf ("done\n");

		IndexLoader old_loader (old_base);
		for (long i = 0; i < old_docs->ItemCount; i++) {
			long doc_id_i = (*old_docs) [i];
			if (alldocs->IndexOf (&doc_id_i) == -1 || all_docs->IndexOf (&doc_id_i) == -1)
				continue;

			if (new_docs.find (doc_id_i) != new_docs.end ())
				continue;

			if (fresh_set.find (doc_id_i) == fresh_set.end ())
				continue;

			std::set<short> cos_set;
			std::map<short, docs_vector> map_cos;
			std::set<long> _same_docs;

			long old_same_docs_count;
			INDEX_DATA (DocRele) old_same_docs = old_loader.load <DocRele> (doc_id_i, IDD_SAMEDOCS, old_same_docs_count, true);
			if (old_same_docs.ptr ()) {
				DocRele* old_same_docs_ptr = old_same_docs.ptr ();
				for (int docs = 0; docs < old_same_docs_count; docs++, old_same_docs_ptr++ ) {
					long id = old_same_docs_ptr->DocId;
					if (all_docs->IndexOf (&id) == -1 || alldocs->IndexOf (&id) == -1 || _same_docs.find (id) != _same_docs.end () || fresh_set.find (id) == fresh_set.end ())
						continue;
					_same_docs.insert (id);
					short long_cos = old_same_docs_ptr->Rele;
					cos_set.insert (long_cos);
					std::map<short,docs_vector>::iterator map_cos_iter = map_cos.insert (std::map<short,docs_vector>::value_type (long_cos,docs_vector ())).first;
					map_cos_iter->second.push_back (id);
				}
			}

			std::map<long,map_doc_cos*>::iterator same_docs_iter = map_doc_sames.find (doc_id_i);
			if (same_docs_iter != map_doc_sames.end ()) {
				std::stable_sort (same_docs_iter->second->begin (), same_docs_iter->second->end ());
				for (map_doc_cos::const_iterator it = same_docs_iter->second->begin (); it != same_docs_iter->second->end (); it++) {
					//long doc_id_j = it->first;
					long doc_id_j = (long)(*it >> 32);
					if (_same_docs.find (doc_id_j) != _same_docs.end () || fresh_set.find (doc_id_j) == fresh_set.end ())
						continue;

					//short long_cos = it->second;
					short long_cos = (short)(*it & 0xFFFF);
					cos_set.insert (long_cos);
					std::map<short,docs_vector>::iterator map_cos_iter = map_cos.insert (std::map<short,docs_vector>::value_type (long_cos,docs_vector ())).first;
					map_cos_iter->second.push_back (doc_id_j);
				}
			}

			std::deque<DocRele> same_docs;
			for (std::set<short>::reverse_iterator cos_set_it = cos_set.rbegin (); cos_set_it != cos_set.rend (); cos_set_it++) {
				short long_cos = *cos_set_it;
				if (long_cos < 2900 || same_docs.size () == 100)
					break;
				std::map<short,docs_vector>::iterator map_cos_iter = map_cos.find (long_cos);
				for (docs_vector::const_iterator docs_iter = map_cos_iter->second.begin (); docs_iter != map_cos_iter->second.end (); docs_iter++) {
					DocRele doc_rele = {*docs_iter, long_cos};
					same_docs.push_back (doc_rele);
					if (same_docs.size () == 100)
						break;
				}
			}

			if (same_docs.size ()) {
				sprintf (str_to_write, "%ld: ", doc_id_i);
				fputs (str_to_write, out_file);
				for (std::deque<DocRele>::const_iterator same_docs_iter = same_docs.begin (); same_docs_iter != same_docs.end (); same_docs_iter++) {
					sprintf (str_to_write, "%ld.%ld ", same_docs_iter->DocId, same_docs_iter->Rele);
					fputs (str_to_write, out_file);
				}
				sprintf (str_to_write, "\n");
				fputs (str_to_write, out_file);
			}
		}

		fclose (out_file);

		exit (EXIT_SUCCESS);
	}

	Index* index = aBase->FindIndex ("NWCntxt");
	std::map<long, long> lemma_in_docs; //лемма.в скольких документах встречается
	long lemma = 0;

	std::set<std::string> skip_lemmas;
#ifndef	_DEBUG
	if (run_mode == 1) {
		skip_lemmas.insert ("А");		skip_lemmas.insert ("В");		skip_lemmas.insert ("Г");		skip_lemmas.insert ("И");
		skip_lemmas.insert ("К");		skip_lemmas.insert ("О");		skip_lemmas.insert ("С");		skip_lemmas.insert ("У");
		skip_lemmas.insert ("ДО");		skip_lemmas.insert ("ЗА");		skip_lemmas.insert ("ИЗ");		skip_lemmas.insert ("ИХ");
		skip_lemmas.insert ("ЛИ");		skip_lemmas.insert ("НА");		skip_lemmas.insert ("НЕ");		skip_lemmas.insert ("НК");
		skip_lemmas.insert ("ОБ");		skip_lemmas.insert ("ОН");		skip_lemmas.insert ("ОТ");		skip_lemmas.insert ("ПО");
		skip_lemmas.insert ("РФ");		skip_lemmas.insert ("СО");		skip_lemmas.insert ("ТО");		skip_lemmas.insert ("ФЗ");
		skip_lemmas.insert ("ВИД");		skip_lemmas.insert ("ВСЕ");		skip_lemmas.insert ("ГОД");		skip_lemmas.insert ("ДЛЯ");
		skip_lemmas.insert ("ЕГО");		skip_lemmas.insert ("ИЛИ");		skip_lemmas.insert ("КАК");		skip_lemmas.insert ("ОНА");
		skip_lemmas.insert ("ОНИ");		skip_lemmas.insert ("ОНО");		skip_lemmas.insert ("ПРИ");		skip_lemmas.insert ("ТОМ");
		skip_lemmas.insert ("ТОТ");		skip_lemmas.insert ("ЧТО");		skip_lemmas.insert ("ЭТО");		skip_lemmas.insert ("БЫТЬ");
		skip_lemmas.insert ("ВЕСЬ");		skip_lemmas.insert ("ДАТЬ");		skip_lemmas.insert ("ЕСЛИ");		skip_lemmas.insert ("ИНОЙ");
		skip_lemmas.insert ("ЛИЦО");		skip_lemmas.insert ("МОЧЬ");		skip_lemmas.insert ("СВОЙ");		skip_lemmas.insert ("СЧЕТ");
		skip_lemmas.insert ("УЧЕТ");		skip_lemmas.insert ("ЦЕЛЬ");		skip_lemmas.insert ("ЭТОТ");		skip_lemmas.insert ("ЗАКОН");
		skip_lemmas.insert ("ИМЕТЬ");		skip_lemmas.insert ("КАКОЙ");		skip_lemmas.insert ("ОБРАЗ");		skip_lemmas.insert ("ОРГАН");
		skip_lemmas.insert ("ОТВЕТ");		skip_lemmas.insert ("ПРАВО");		skip_lemmas.insert ("ПУНКТ");		skip_lemmas.insert ("СВЯЗЬ");
		skip_lemmas.insert ("СУММА");		skip_lemmas.insert ("ТАКЖЕ");		skip_lemmas.insert ("ТАКОЙ");		skip_lemmas.insert ("ЧАСТЬ");
		skip_lemmas.insert ("ЧИСЛО");		skip_lemmas.insert ("ВОПРОС");		skip_lemmas.insert ("ДАННЫЙ");		skip_lemmas.insert ("ДРУГОЙ");
		skip_lemmas.insert ("КОДЕКС");		skip_lemmas.insert ("МИНФИН");		skip_lemmas.insert ("ОБЪЕКТ");		skip_lemmas.insert ("ПЕРЕТЬ");
		skip_lemmas.insert ("ПЕРИОД");		skip_lemmas.insert ("ПИСЬМО");		skip_lemmas.insert ("ПРАВЫЙ");		skip_lemmas.insert ("РОССИЯ");
		skip_lemmas.insert ("СЛУЖБА");		skip_lemmas.insert ("СЛУЧАЙ");		skip_lemmas.insert ("СТАТЬЯ");		skip_lemmas.insert ("ТОЛЬКО");
		skip_lemmas.insert ("ЯВЛЯТЬ");		skip_lemmas.insert ("ДОЛЖНЫЙ");		skip_lemmas.insert ("КОТОРЫЙ");		skip_lemmas.insert ("ПОРЯДОК");
		skip_lemmas.insert ("ПРИБЫЛЬ");		skip_lemmas.insert ("УКАЗАТЬ");		skip_lemmas.insert ("УСЛОВИЕ");		skip_lemmas.insert ("ВКЛЮЧАТЬ");
		skip_lemmas.insert ("ДОКУМЕНТ");		skip_lemmas.insert ("ОТНОСИТЬ");		skip_lemmas.insert ("ПОЛУЧИТЬ");		skip_lemmas.insert ("ПРИЗНАТЬ");
		skip_lemmas.insert ("СОГЛАСНО");		skip_lemmas.insert ("СРЕДСТВА");		skip_lemmas.insert ("СРЕДСТВО");		skip_lemmas.insert ("ОСНОВАНИЕ");
		skip_lemmas.insert ("ПОДЛЕЖАТЬ");		skip_lemmas.insert ("ПОЛОЖЕНИЕ");		skip_lemmas.insert ("СЛЕДОВАТЬ");		skip_lemmas.insert ("СЛЕДУЮЩИЙ");
		skip_lemmas.insert ("СОГЛАСНЫЙ");		skip_lemmas.insert ("УКАЗАННЫЙ");		skip_lemmas.insert ("УТВЕРДИТЬ");		skip_lemmas.insert ("УЧИТЫВАТЬ");
		skip_lemmas.insert ("ФЕДЕРАЦИЯ");		skip_lemmas.insert ("ОПРЕДЕЛЯТЬ");		skip_lemmas.insert ("ПРИЗНАВАТЬ");		skip_lemmas.insert ("ПРИМЕНЕНИЕ");
		skip_lemmas.insert ("РЕАЛИЗАЦИЯ");		skip_lemmas.insert ("РОССИЙСКИЙ");		skip_lemmas.insert ("УСТАНОВИТЬ");		skip_lemmas.insert ("ОРГАНИЗАЦИЯ");
		skip_lemmas.insert ("ПРОИЗВОДИТЬ");		skip_lemmas.insert ("ФЕДЕРАЛЬНЫЙ");		skip_lemmas.insert ("ДЕЯТЕЛЬНОСТЬ");		skip_lemmas.insert ("ОСУЩЕСТВЛЯТЬ");
		skip_lemmas.insert ("СООТВЕТСТВИЕ");		skip_lemmas.insert ("ПРЕДУСМОТРЕТЬ");		skip_lemmas.insert ("ГОСУДАРСТВЕННЫЙ");		skip_lemmas.insert ("НАЛОГООБЛОЖЕНИЕ");
		skip_lemmas.insert ("СООТВЕТСТВОВАТЬ");		skip_lemmas.insert ("СООТВЕТСТВУЮЩИЙ");		skip_lemmas.insert ("ЗАКОНОДАТЕЛЬСТВО");
	} else if (run_mode == 3) {
		skip_lemmas.insert ("А");		skip_lemmas.insert ("Б");		skip_lemmas.insert ("В");		skip_lemmas.insert ("Г");
		skip_lemmas.insert ("Д");		skip_lemmas.insert ("Е");		skip_lemmas.insert ("И");		skip_lemmas.insert ("К");
		skip_lemmas.insert ("М");		skip_lemmas.insert ("Н");		skip_lemmas.insert ("О");		skip_lemmas.insert ("Р");
		skip_lemmas.insert ("С");		skip_lemmas.insert ("Т");		skip_lemmas.insert ("У");		skip_lemmas.insert ("БЫ");
		skip_lemmas.insert ("ВО");		skip_lemmas.insert ("ГК");		skip_lemmas.insert ("ДО");		skip_lemmas.insert ("ЕЕ");
		skip_lemmas.insert ("ЖЕ");		skip_lemmas.insert ("ЗА");		skip_lemmas.insert ("ИЗ");		skip_lemmas.insert ("ИХ");
		skip_lemmas.insert ("КВ");		skip_lemmas.insert ("НА");		skip_lemmas.insert ("НЕ");		skip_lemmas.insert ("НО");
		skip_lemmas.insert ("ОБ");		skip_lemmas.insert ("ОН");		skip_lemmas.insert ("ОТ");		skip_lemmas.insert ("ПО");
		skip_lemmas.insert ("РФ");		skip_lemmas.insert ("СО");		skip_lemmas.insert ("СТ");		skip_lemmas.insert ("ТО");
		skip_lemmas.insert ("УЛ");		skip_lemmas.insert ("ФЗ");		skip_lemmas.insert ("АКТ");		skip_lemmas.insert ("БЕЗ");
		skip_lemmas.insert ("ВИД");		skip_lemmas.insert ("ВСЕ");		skip_lemmas.insert ("ГОД");		skip_lemmas.insert ("ДВА");
		skip_lemmas.insert ("ДЛЯ");		skip_lemmas.insert ("ЕГО");		skip_lemmas.insert ("ИЛИ");		skip_lemmas.insert ("ИМЯ");
		skip_lemmas.insert ("ИСК");		skip_lemmas.insert ("КАК");		skip_lemmas.insert ("КОП");		skip_lemmas.insert ("МАЙ");
		skip_lemmas.insert ("ОНА");		skip_lemmas.insert ("ОНИ");		skip_lemmas.insert ("ОНО");		skip_lemmas.insert ("ПОД");
		skip_lemmas.insert ("ПРИ");		skip_lemmas.insert ("РУБ");		skip_lemmas.insert ("САМ");		skip_lemmas.insert ("СУД");
		skip_lemmas.insert ("ТАК");		skip_lemmas.insert ("ТЕМ");		skip_lemmas.insert ("ТОМ");		skip_lemmas.insert ("ТОТ");
		skip_lemmas.insert ("ХОД");		skip_lemmas.insert ("ЧЕМ");		skip_lemmas.insert ("ЧТО");		skip_lemmas.insert ("ЭТО");
		skip_lemmas.insert ("БЫЛО");		skip_lemmas.insert ("БЫЛЬ");		skip_lemmas.insert ("БЫТЬ");		skip_lemmas.insert ("ВЕСЬ");
		skip_lemmas.insert ("ДАТА");		skip_lemmas.insert ("ДАТЬ");		skip_lemmas.insert ("ДЕЛО");		skip_lemmas.insert ("ДЕНЬ");
		skip_lemmas.insert ("ДЕТЬ");		skip_lemmas.insert ("ЕСЛИ");		skip_lemmas.insert ("ЕСТЬ");		skip_lemmas.insert ("ИНОЙ");
		skip_lemmas.insert ("ИЮЛЬ");		skip_lemmas.insert ("ИЮНЬ");		skip_lemmas.insert ("КРАЙ");		skip_lemmas.insert ("ЛИБО");
		skip_lemmas.insert ("ЛИЦО");		skip_lemmas.insert ("ЛИШЬ");		skip_lemmas.insert ("МАРТ");		skip_lemmas.insert ("МЕРА");
		skip_lemmas.insert ("МОЧЬ");		skip_lemmas.insert ("ОДИН");		skip_lemmas.insert ("ПУТЬ");		skip_lemmas.insert ("САЙТ");
		skip_lemmas.insert ("СВОЙ");		skip_lemmas.insert ("СЕБЯ");		skip_lemmas.insert ("СИЛА");		skip_lemmas.insert ("СИЛО");
		skip_lemmas.insert ("СПОР");		skip_lemmas.insert ("ТЕМА");		skip_lemmas.insert ("ТОГО");		skip_lemmas.insert ("ТЬМА");
		skip_lemmas.insert ("ФАКТ");		skip_lemmas.insert ("ЦЕЛЬ");		skip_lemmas.insert ("ЭТОТ");		skip_lemmas.insert ("БОЛЕЕ");
		skip_lemmas.insert ("ВЛЕЧЬ");		skip_lemmas.insert ("ВЫВОД");		skip_lemmas.insert ("ГЛАВА");		skip_lemmas.insert ("ДАЛЕЕ");
		skip_lemmas.insert ("ДОВОД");		skip_lemmas.insert ("ЗАКОН");		skip_lemmas.insert ("ИМЕТЬ");		skip_lemmas.insert ("ИСТЕЦ");
		skip_lemmas.insert ("КАКОЙ");		skip_lemmas.insert ("КОГДА");		skip_lemmas.insert ("КОПИЯ");		skip_lemmas.insert ("КРОМЕ");
		skip_lemmas.insert ("ЛЮБОЙ");		skip_lemmas.insert ("МАРТА");		skip_lemmas.insert ("МАЯТЬ");		skip_lemmas.insert ("МЕЖДУ");
		skip_lemmas.insert ("МЕСТО");		skip_lemmas.insert ("МОЖНО");		skip_lemmas.insert ("НОВЫЙ");		skip_lemmas.insert ("НОМЕР");
		skip_lemmas.insert ("НОРМА");		skip_lemmas.insert ("ОБРАЗ");		skip_lemmas.insert ("ОБЩИЙ");		skip_lemmas.insert ("ОКРУГ");
		skip_lemmas.insert ("ОРГАН");		skip_lemmas.insert ("ОТЗЫВ");		skip_lemmas.insert ("ПЕРЕД");		skip_lemmas.insert ("ПЛАТА");
		skip_lemmas.insert ("ПОСЛЕ");		skip_lemmas.insert ("ПОСОЛ");		skip_lemmas.insert ("ПРАВО");		skip_lemmas.insert ("ПРИЕМ");
		skip_lemmas.insert ("ПУНКТ");		skip_lemmas.insert ("ПУТЕМ");		skip_lemmas.insert ("РАЙОН");		skip_lemmas.insert ("РАМКА");
		skip_lemmas.insert ("РАНЕЕ");		skip_lemmas.insert ("РУБЛЬ");		skip_lemmas.insert ("СВЯЗЬ");		skip_lemmas.insert ("СМЫСЛ");
		skip_lemmas.insert ("СПОРА");		skip_lemmas.insert ("СТАТЬ");		skip_lemmas.insert ("СУДНО");		skip_lemmas.insert ("СУДЬЯ");
		skip_lemmas.insert ("СУММА");		skip_lemmas.insert ("СФЕРА");		skip_lemmas.insert ("СЧЕТЫ");		skip_lemmas.insert ("ТАКЖЕ");
		skip_lemmas.insert ("ТАКОЙ");		skip_lemmas.insert ("ТЕКСТ");		skip_lemmas.insert ("ФОРМА");		skip_lemmas.insert ("ЧАСТЬ");
		skip_lemmas.insert ("ЧЕРЕЗ");		skip_lemmas.insert ("ЧИСЛО");		skip_lemmas.insert ("ЯВИТЬ");		skip_lemmas.insert ("АВГУСТ");
		skip_lemmas.insert ("АПРЕЛЬ");		skip_lemmas.insert ("ВМЕСТЕ");		skip_lemmas.insert ("ВОПРОС");		skip_lemmas.insert ("ВПРАВЕ");
		skip_lemmas.insert ("ВЫДАТЬ");		skip_lemmas.insert ("ВЫСШИЙ");		skip_lemmas.insert ("ГЛАВЫЙ");		skip_lemmas.insert ("ДАННЫЕ");
		skip_lemmas.insert ("ДАННЫЙ");		skip_lemmas.insert ("ДОЛГИЙ");		skip_lemmas.insert ("ДОЛЖЕН");		skip_lemmas.insert ("ДОЛЖНО");
		skip_lemmas.insert ("ДОЛЖНЫ");		skip_lemmas.insert ("ДРУГОЙ");		skip_lemmas.insert ("ЖАЛОБА");		skip_lemmas.insert ("ЗАЩИТА");
		skip_lemmas.insert ("ИМЕННО");		skip_lemmas.insert ("КАЖДЫЙ");		skip_lemmas.insert ("КОДЕКС");		skip_lemmas.insert ("МНЕНИЕ");
		skip_lemmas.insert ("НОЯБРЬ");		skip_lemmas.insert ("ОБЪЕКТ");		skip_lemmas.insert ("ОДНАКО");		skip_lemmas.insert ("ОКРУГА");
		skip_lemmas.insert ("ОТМЕНА");		skip_lemmas.insert ("ОЦЕНКА");		skip_lemmas.insert ("ПЕРВЫЙ");		skip_lemmas.insert ("ПЕРЕТЬ");
		skip_lemmas.insert ("ПИСЬМО");		skip_lemmas.insert ("ПЛЕНУМ");		skip_lemmas.insert ("ПОДАТЬ");		skip_lemmas.insert ("ПОДАЧА");
		skip_lemmas.insert ("ПОЛНЫЙ");		skip_lemmas.insert ("ПОЛЬЗА");		skip_lemmas.insert ("ПРАВЫЙ");		skip_lemmas.insert ("ПРИДТИ");
		skip_lemmas.insert ("ПРИЙТИ");		skip_lemmas.insert ("ПРИКАЗ");		skip_lemmas.insert ("ПРОТИВ");		skip_lemmas.insert ("РОССИЯ");
		skip_lemmas.insert ("СЕВЕРО");		skip_lemmas.insert ("СЛУЖБА");		skip_lemmas.insert ("СОСТАВ");		skip_lemmas.insert ("СПОРЫЙ");
		skip_lemmas.insert ("ССЫЛКА");		skip_lemmas.insert ("СТАТЬЯ");		skip_lemmas.insert ("ТОЛЬКО");		skip_lemmas.insert ("ТРЕТЬЯ");
		skip_lemmas.insert ("ЧАСТЬЮ");		skip_lemmas.insert ("ЯВЛЯТЬ");		skip_lemmas.insert ("ЯНВАРЬ");		skip_lemmas.insert ("АВГУСТА");
		skip_lemmas.insert ("ВЫНЕСТИ");		skip_lemmas.insert ("ВЫСОКИЙ");		skip_lemmas.insert ("ДЕКАБРЬ");		skip_lemmas.insert ("ДОЛЖНЫЙ");
		skip_lemmas.insert ("ЗАЯВИТЬ");		skip_lemmas.insert ("ИЗУЧИТЬ");		skip_lemmas.insert ("ИНТЕРЕС");		skip_lemmas.insert ("ИСКОВОЙ");
		skip_lemmas.insert ("КОТОРЫЙ");		skip_lemmas.insert ("НАЗВАТЬ");		skip_lemmas.insert ("НАЛИЧИЕ");		skip_lemmas.insert ("ОБЛАСТЬ");
		skip_lemmas.insert ("ОБЯЗАТЬ");		skip_lemmas.insert ("ОКТЯБРЬ");		skip_lemmas.insert ("ОТКРЫТЬ");		skip_lemmas.insert ("ОЦЕНИТЬ");
		skip_lemmas.insert ("ПАСПОРТ");		skip_lemmas.insert ("ПОЗИЦИЯ");		skip_lemmas.insert ("ПОРЯДОК");		skip_lemmas.insert ("ПОЭТОМУ");
		skip_lemmas.insert ("ПРАВИЛО");		skip_lemmas.insert ("ПРАВИТЬ");		skip_lemmas.insert ("ПРАКТИК");		skip_lemmas.insert ("ПРЕДМЕТ");
		skip_lemmas.insert ("ПРИНЯТЬ");		skip_lemmas.insert ("ПРИЧИНА");		skip_lemmas.insert ("ПРОСИТЬ");		skip_lemmas.insert ("ПРОЦЕСС");
		skip_lemmas.insert ("РЕШЕНИЕ");		skip_lemmas.insert ("СВЯЗАТЬ");		skip_lemmas.insert ("СДЕЛАТЬ");		skip_lemmas.insert ("СПОРНЫЙ");
		skip_lemmas.insert ("СПРАВКА");		skip_lemmas.insert ("ССЫЛАТЬ");		skip_lemmas.insert ("СТОРОНА");		skip_lemmas.insert ("СУБЪЕКТ");
		skip_lemmas.insert ("СЧИТАТЬ");		skip_lemmas.insert ("ТЕЧЕНИЕ");		skip_lemmas.insert ("УКАЗАТЬ");		skip_lemmas.insert ("УЧАСТИЕ");
		skip_lemmas.insert ("ФЕВРАЛЬ");		skip_lemmas.insert ("ЧАСТИТЬ");		skip_lemmas.insert ("ВНИМАНИЕ");		skip_lemmas.insert ("ВСТУПАТЬ");
		skip_lemmas.insert ("ДЕЙСТВИЕ");		skip_lemmas.insert ("ДИРЕКТОР");		skip_lemmas.insert ("ДОКАЗАТЬ");		skip_lemmas.insert ("ДОКУМЕНТ");
		skip_lemmas.insert ("ЗАКОННЫЙ");		skip_lemmas.insert ("ЗАЯВЛЯТЬ");		skip_lemmas.insert ("ЗНАЧЕНИЕ");		skip_lemmas.insert ("ИЗЛОЖИТЬ");
		skip_lemmas.insert ("ИЗМЕНИТЬ");		skip_lemmas.insert ("ИСХОДИТЬ");		skip_lemmas.insert ("КЛЮЧЕВОЙ");		skip_lemmas.insert ("КОМПАНИЯ");
		skip_lemmas.insert ("МАТЕРИАЛ");		skip_lemmas.insert ("НАРУШАТЬ");		skip_lemmas.insert ("НАХОДИТЬ");		skip_lemmas.insert ("ОБРАТИТЬ");
		skip_lemmas.insert ("ОБЩЕСТВО");		skip_lemmas.insert ("ОБЪЯВИТЬ");		skip_lemmas.insert ("ОКАЗАНИЕ");		skip_lemmas.insert ("ОСНОВАТЬ");
		skip_lemmas.insert ("ОСНОВНОЙ");		skip_lemmas.insert ("ОСНОВНЫЙ");		skip_lemmas.insert ("ОСТАВИТЬ");		skip_lemmas.insert ("ОТВЕТЧИК");
		skip_lemmas.insert ("ОТКАЗАТЬ");		skip_lemmas.insert ("ОТКРЫТЫЙ");		skip_lemmas.insert ("ОТМЕНИТЬ");		skip_lemmas.insert ("ПОДАТЕЛЬ");
		skip_lemmas.insert ("ПОЛАГАТЬ");		skip_lemmas.insert ("ПОЛУЧИТЬ");		skip_lemmas.insert ("ПРАВОВОЙ");		skip_lemmas.insert ("ПРАКТИКА");
		skip_lemmas.insert ("ПРИВЕСТИ");		skip_lemmas.insert ("ПРИНЯТЫЙ");		skip_lemmas.insert ("ПРОВЕСТИ");		skip_lemmas.insert ("СЕНТЯБРЬ");
		skip_lemmas.insert ("СОГЛАСНО");		skip_lemmas.insert ("СРЕДСТВА");		skip_lemmas.insert ("СУДЕБНЫЙ");		skip_lemmas.insert ("СУЩЕСТВО");
		skip_lemmas.insert ("УКАЗАНИЕ");		skip_lemmas.insert ("УТОЧНИТЬ");		skip_lemmas.insert ("ХАРАКТЕР");		skip_lemmas.insert ("ВОЗМОЖНЫЙ");
		skip_lemmas.insert ("ВОЗРАЖАТЬ");		skip_lemmas.insert ("ВЫНЕСЕНИЕ");		skip_lemmas.insert ("ВЫСЛУШАТЬ");		skip_lemmas.insert ("ДОПУСКАТЬ");
		skip_lemmas.insert ("ДОПУСТИТЬ");		skip_lemmas.insert ("ЗАСЕДАНИЕ");		skip_lemmas.insert ("ЗАСЛУШАТЬ");		skip_lemmas.insert ("ЗАЯВИТЕЛЬ");
		skip_lemmas.insert ("ЗАЯВЛЕНИЕ");		skip_lemmas.insert ("ИЗВЕСТИТЬ");		skip_lemmas.insert ("ИНСТАНЦИЯ");		skip_lemmas.insert ("ИСПОЛНЯТЬ");
		skip_lemmas.insert ("НАДЛЕЖАТЬ");		skip_lemmas.insert ("НАПРАВИТЬ");		skip_lemmas.insert ("НАРУШЕНИЕ");		skip_lemmas.insert ("НАСТОЯЩЕЕ");
		skip_lemmas.insert ("НАСТОЯЩИЙ");		skip_lemmas.insert ("НЕКОТОРЫЙ");		skip_lemmas.insert ("ОБЯЗАННЫЙ");		skip_lemmas.insert ("ОБЯЗЫВАТЬ");
		skip_lemmas.insert ("ОСНОВАНИЕ");		skip_lemmas.insert ("ОСТАЛЬНОЙ");		skip_lemmas.insert ("ОТДЕЛЬНЫЙ");		skip_lemmas.insert ("ОТКЛОНИТЬ");
		skip_lemmas.insert ("ОТКЛОНЯТЬ");		skip_lemmas.insert ("ОТНОШЕНИЕ");		skip_lemmas.insert ("ПОВТОРНЫЙ");		skip_lemmas.insert ("ПОДЛЕЖАТЬ");
		skip_lemmas.insert ("ПОДПИСАТЬ");		skip_lemmas.insert ("ПОЗВОЛЯТЬ");		skip_lemmas.insert ("ПОЛОЖЕНИЕ");		skip_lemmas.insert ("ПОЛУЧЕНИЕ");
		skip_lemmas.insert ("ПОСКОЛЬКУ");		skip_lemmas.insert ("ПОСЛЕДНИЙ");		skip_lemmas.insert ("ПОСЛУЖИТЬ");		skip_lemmas.insert ("ПОСТАВИТЬ");
		skip_lemmas.insert ("ПОСТУПИТЬ");		skip_lemmas.insert ("ПРИЗНАНИЕ");		skip_lemmas.insert ("ПРИМЕНИТЬ");		skip_lemmas.insert ("ПРИМЕНЯТЬ");
		skip_lemmas.insert ("ПРИХОДИТЬ");		skip_lemmas.insert ("ПРОВЕРИТЬ");		skip_lemmas.insert ("ПРОВЕРЯТЬ");		skip_lemmas.insert ("ПРОДУКЦИЯ");
		skip_lemmas.insert ("ПРОСРОЧКА");		skip_lemmas.insert ("РЕЗУЛЬТАТ");		skip_lemmas.insert ("СВЯЗАННЫЙ");		skip_lemmas.insert ("СЕКРЕТАРЬ");
		skip_lemmas.insert ("СЛЕДОВАТЬ");		skip_lemmas.insert ("СЛЕДУЮЩИЙ");		skip_lemmas.insert ("СОВЕРШИТЬ");		skip_lemmas.insert ("СОГЛАСИТЬ");
		skip_lemmas.insert ("СОГЛАСНЫЙ");		skip_lemmas.insert ("СОДЕРЖАТЬ");		skip_lemmas.insert ("СОСТАВИТЬ");		skip_lemmas.insert ("СОСТОЯНИЕ");
		skip_lemmas.insert ("ТРЕБОВАТЬ");		skip_lemmas.insert ("УКАЗАННЫЙ");		skip_lemmas.insert ("УКАЗЫВАТЬ");		skip_lemmas.insert ("УТВЕРДИТЬ");
		skip_lemmas.insert ("ФЕДЕРАЦИЯ");		skip_lemmas.insert ("ЧАСТИЧНЫЙ");		skip_lemmas.insert ("ЧАСТНОСТЬ");		skip_lemmas.insert ("ВОЗНИКНУТЬ");
		skip_lemmas.insert ("ВОЗРАЖЕНИЕ");		skip_lemmas.insert ("ГОСПОШЛИНА");		skip_lemmas.insert ("ЗАКОННОСТЬ");		skip_lemmas.insert ("ИЗГОТОВИТЬ");
		skip_lemmas.insert ("КОЛИЧЕСТВО");		skip_lemmas.insert ("КОНКРЕТНЫЙ");		skip_lemmas.insert ("НАДЛЕЖАЩИЙ");		skip_lemmas.insert ("НАЗНАЧЕНИЕ");
		skip_lemmas.insert ("НЕЗАКОННЫЙ");		skip_lemmas.insert ("НЕОБХОДИМО");		skip_lemmas.insert ("ОБЕСПЕЧИТЬ");		skip_lemmas.insert ("ОБЖАЛОВАТЬ");
		skip_lemmas.insert ("ОБОСНОВАТЬ");		skip_lemmas.insert ("ОБЪЯСНЕНИЕ");		skip_lemmas.insert ("ОПРЕДЕЛИТЬ");		skip_lemmas.insert ("ОПРЕДЕЛЯТЬ");
		skip_lemmas.insert ("ОСПАРИВАТЬ");		skip_lemmas.insert ("ПОДДЕРЖАТЬ");		skip_lemmas.insert ("ПОДЛЕЖАЩЕЕ");		skip_lemmas.insert ("ПОДПИСАНИЕ");
		skip_lemmas.insert ("ПРАВИЛЬНЫЙ");		skip_lemmas.insert ("ПРЕКРАТИТЬ");		skip_lemmas.insert ("ПРИЗНАВАТЬ");		skip_lemmas.insert ("ПРИЛОЖЕНИЕ");
		skip_lemmas.insert ("ПРОИЗВЕСТИ");		skip_lemmas.insert ("РОССИЙСКИЙ");		skip_lemmas.insert ("СОБЛЮДЕНИЕ");		skip_lemmas.insert ("СОГЛАШЕНИЕ");
		skip_lemmas.insert ("СОДЕРЖАНИЕ");		skip_lemmas.insert ("СОСТАВЛЯТЬ");		skip_lemmas.insert ("ТРЕБОВАНИЕ");		skip_lemmas.insert ("УСТАНОВИТЬ");
		skip_lemmas.insert ("АРБИТРАЖНЫЙ");		skip_lemmas.insert ("БЕЗУСЛОВНЫЙ");		skip_lemmas.insert ("ВОЗМОЖНОСТЬ");		skip_lemmas.insert ("ГРАЖДАНСКИЙ");
		skip_lemmas.insert ("ДЕЙСТВОВАТЬ");		skip_lemmas.insert ("ДЕЙСТВУЮЩИЙ");		skip_lemmas.insert ("ДОЛЖНОСТНОЙ");		skip_lemmas.insert ("ИССЛЕДОВАТЬ");
		skip_lemmas.insert ("НЕОБХОДИМЫЙ");		skip_lemmas.insert ("НОРМАТИВНЫЙ");		skip_lemmas.insert ("ОБЕСПЕЧЕНИЕ");		skip_lemmas.insert ("ОБОСНОВАНИЕ");
		skip_lemmas.insert ("ОПРЕДЕЛЕНИЕ");		skip_lemmas.insert ("ОПРОВЕРГАТЬ");		skip_lemmas.insert ("ОРГАНИЗАЦИЯ");		skip_lemmas.insert ("ОСУЩЕСТВИТЬ");
		skip_lemmas.insert ("ПОДТВЕРДИТЬ");		skip_lemmas.insert ("ПОСЛЕДСТВИЕ");		skip_lemmas.insert ("ПОСТАНОВИТЬ");		skip_lemmas.insert ("ПРАВОМЕРНЫЙ");
		skip_lemmas.insert ("ПРЕДСТАВИТЬ");		skip_lemmas.insert ("ПРИВЛЕЧЕНИЕ");		skip_lemmas.insert ("ПРОИЗВОДИТЬ");		skip_lemmas.insert ("РАСПОЛОЖИТЬ");
		skip_lemmas.insert ("РАССМОТРЕТЬ");		skip_lemmas.insert ("СОГЛАСОВАТЬ");		skip_lemmas.insert ("ТЕХНИЧЕСКИЙ");		skip_lemmas.insert ("УВЕДОМЛЕНИЕ");
		skip_lemmas.insert ("УСМАТРИВАТЬ");		skip_lemmas.insert ("УТВЕРЖДЕНИЕ");		skip_lemmas.insert ("УЧАСТВОВАТЬ");		skip_lemmas.insert ("УЧАСТВУЮЩИЙ");
		skip_lemmas.insert ("ФЕДЕРАЛЬНЫЙ");		skip_lemmas.insert ("ХОДАТАЙСТВО");		skip_lemmas.insert ("ЦЕНТРАЛЬНЫЙ");		skip_lemmas.insert ("ЮРИДИЧЕСКИЙ");
		skip_lemmas.insert ("ДВУХМЕСЯЧНЫЙ");		skip_lemmas.insert ("ДЕЯТЕЛЬНОСТЬ");		skip_lemmas.insert ("ИЗГОТОВЛЕНИЕ");		skip_lemmas.insert ("ИСПОЛЬЗОВАТЬ");
		skip_lemmas.insert ("ИССЛЕДОВАНИЕ");		skip_lemmas.insert ("КАССАЦИОННЫЙ");		skip_lemmas.insert ("МАТЕРИАЛЬНЫЙ");		skip_lemmas.insert ("МОТИВИРОВАТЬ");
		skip_lemmas.insert ("НАПРАВЛЕННЫЙ");		skip_lemmas.insert ("НЕНАДЛЕЖАЩИЙ");		skip_lemmas.insert ("НЕПРАВИЛЬНЫЙ");		skip_lemmas.insert ("ОБОСНОВАННЫЙ");
		skip_lemmas.insert ("ОПРЕДЕЛЕННЫЙ");		skip_lemmas.insert ("ОСУЩЕСТВЛЯТЬ");		skip_lemmas.insert ("ОТНОСИТЕЛЬНО");		skip_lemmas.insert ("ПРАВИЛЬНОСТЬ");
		skip_lemmas.insert ("ПРЕДОСТАВИТЬ");		skip_lemmas.insert ("ПРЕДСТАВЛЯТЬ");		skip_lemmas.insert ("ПРИНАДЛЕЖАТЬ");		skip_lemmas.insert ("ПРОИЗВОДСТВО");
		skip_lemmas.insert ("РАССМОТРЕНИЕ");		skip_lemmas.insert ("РЕЗОЛЮТИВНЫЙ");		skip_lemmas.insert ("СОВОКУПНОСТЬ");		skip_lemmas.insert ("СООТВЕТСТВИЕ");
		skip_lemmas.insert ("УСТАНОВЛЕНИЕ");		skip_lemmas.insert ("АДМИНИСТРАЦИЯ");		skip_lemmas.insert ("АПЕЛЛЯЦИОННЫЙ");		skip_lemmas.insert ("ВЫШЕУКАЗАННЫЙ");
		skip_lemmas.insert ("ИМУЩЕСТВЕННЫЙ");		skip_lemmas.insert ("МУНИЦИПАЛЬНЫЙ");		skip_lemmas.insert ("НЕВОЗМОЖНОСТЬ");		skip_lemmas.insert ("НЕПРАВОМЕРНЫЙ");
		skip_lemmas.insert ("ОСУЩЕСТВЛЕНИЕ");		skip_lemmas.insert ("ОТНОСИТЕЛЬНЫЙ");		skip_lemmas.insert ("ПОДТВЕРЖДЕНИЕ");		skip_lemmas.insert ("ПОСТАНОВЛЕНИЕ");
		skip_lemmas.insert ("ПРАВИТЕЛЬСТВО");		skip_lemmas.insert ("ПРЕДСТАВЛЕНИЕ");		skip_lemmas.insert ("ПРЕДУСМОТРЕТЬ");		skip_lemmas.insert ("ПРОТИВОРЕЧИТЬ");
		skip_lemmas.insert ("РАСПОЛОЖЕННЫЙ");		skip_lemmas.insert ("РАССМАТРИВАТЬ");		skip_lemmas.insert ("СЛЕДОВАТЕЛЬНО");		skip_lemmas.insert ("УДОВЛЕТВОРИТЬ");
		skip_lemmas.insert ("УДОВЛЕТВОРЯТЬ");		skip_lemmas.insert ("УСТАНАВЛИВАТЬ");		skip_lemmas.insert ("ДОПОЛНИТЕЛЬНЫЙ");		skip_lemmas.insert ("ЗАИНТЕРЕСОВАТЬ");
		skip_lemmas.insert ("НЕСООТВЕТСТВИЕ");		skip_lemmas.insert ("ОБОСНОВАННОСТЬ");		skip_lemmas.insert ("ОБСТОЯТЕЛЬСТВО");		skip_lemmas.insert ("ПРАВОНАРУШЕНИЕ");
		skip_lemmas.insert ("ПРАВООТНОШЕНИЕ");		skip_lemmas.insert ("ПРЕДОСТАВЛЕНИЕ");		skip_lemmas.insert ("ПРОЦЕССУАЛЬНЫЙ");		skip_lemmas.insert ("СООТВЕТСТВЕННО");
		skip_lemmas.insert ("УДОВЛЕТВОРЕНИЕ");		skip_lemmas.insert ("УПОЛНОМОЧЕННАЯ");		skip_lemmas.insert ("ГОСУДАРСТВЕННЫЙ");		skip_lemmas.insert ("ОТВЕТСТВЕННОСТЬ");
		skip_lemmas.insert ("ПРЕДПРИНИМАТЕЛЬ");		skip_lemmas.insert ("ПРЕДУСМАТРИВАТЬ");		skip_lemmas.insert ("РАЗБИРАТЕЛЬСТВО");		skip_lemmas.insert ("РЕГИСТРАЦИОННЫЙ");
		skip_lemmas.insert ("РУКОВОДСТВОВАТЬ");		skip_lemmas.insert ("САМОСТОЯТЕЛЬНЫЙ");		skip_lemmas.insert ("СООТВЕТСТВЕННЫЙ");		skip_lemmas.insert ("СООТВЕТСТВОВАТЬ");
		skip_lemmas.insert ("СООТВЕТСТВУЮЩИЙ");		skip_lemmas.insert ("УДОВЛЕТВОРЕННЫЙ");		skip_lemmas.insert ("АДМИНИСТРАТИВНЫЙ");		skip_lemmas.insert ("ЗАИНТЕРЕСОВАННЫЙ");
		skip_lemmas.insert ("ЗАКОНОДАТЕЛЬСТВО");		skip_lemmas.insert ("ЗАРЕГИСТРИРОВАТЬ");		skip_lemmas.insert ("НЕПОСРЕДСТВЕННЫЙ");		skip_lemmas.insert ("СВИДЕТЕЛЬСТВОВАТЬ");
		skip_lemmas.insert ("ПРЕДСЕДАТЕЛЬСТВОВАТЬ");		skip_lemmas.insert ("ПРЕДСЕДАТЕЛЬСТВУЮЩИЙ");
	} if (run_mode == 2) {
		skip_lemmas.insert ("М");		skip_lemmas.insert ("Н");
		skip_lemmas.insert ("Р");		skip_lemmas.insert ("Т");
		skip_lemmas.insert ("Х");		skip_lemmas.insert ("Я");
		skip_lemmas.insert ("ГО");		skip_lemmas.insert ("КА");
		skip_lemmas.insert ("СТ");		skip_lemmas.insert ("УЖ");
		skip_lemmas.insert ("ВНЕ");		skip_lemmas.insert ("ГДЕ");
		skip_lemmas.insert ("РЯД");		skip_lemmas.insert ("УЖЕ");
		skip_lemmas.insert ("ФНС");		skip_lemmas.insert ("ЧАС");
		skip_lemmas.insert ("ВРЕД");		skip_lemmas.insert ("ГРУЗ");
		skip_lemmas.insert ("ДОЛЯ");		skip_lemmas.insert ("ДОМА");
		skip_lemmas.insert ("ИФНС");		skip_lemmas.insert ("КОАП");
		skip_lemmas.insert ("ПЛАН");		skip_lemmas.insert ("ПЯТЬ");
		skip_lemmas.insert ("САЙТ");		skip_lemmas.insert ("СЕБЕ");
		skip_lemmas.insert ("СЕТЬ");		skip_lemmas.insert ("ТЕЧЬ");
		skip_lemmas.insert ("ТРУД");		skip_lemmas.insert ("ХОТЯ");
		skip_lemmas.insert ("ЧАСЫ");		skip_lemmas.insert ("ЯВКА");
		skip_lemmas.insert ("АГЕНТ");		skip_lemmas.insert ("ВНОВЬ");
		skip_lemmas.insert ("ВОЛГО");		skip_lemmas.insert ("ВСЕГО");
		skip_lemmas.insert ("ЖИЛОЙ");		skip_lemmas.insert ("ЗЕМЛЯ");
		skip_lemmas.insert ("МЕНЕЕ");		skip_lemmas.insert ("МОЖНО");
		skip_lemmas.insert ("ОТВЕТ");		skip_lemmas.insert ("ОТЧЕТ");
		skip_lemmas.insert ("РЫНОК");		skip_lemmas.insert ("СДАЧА");
		skip_lemmas.insert ("СЕРИЯ");		skip_lemmas.insert ("ТАРИФ");
		skip_lemmas.insert ("ТОГДА");		skip_lemmas.insert ("УЗКИЙ");
		skip_lemmas.insert ("УЩЕРБ");		skip_lemmas.insert ("АНАЛИЗ");
		skip_lemmas.insert ("ВВЕСТИ");		skip_lemmas.insert ("ВЕРНЫЙ");
		skip_lemmas.insert ("ВЛИЯТЬ");		skip_lemmas.insert ("ВТОРОЕ");
		skip_lemmas.insert ("ВЫДАЧА");		skip_lemmas.insert ("ВЫПУСК");
		skip_lemmas.insert ("ДАВАТЬ");		skip_lemmas.insert ("ДОКЛАД");
		skip_lemmas.insert ("ДОЛИТЬ");		skip_lemmas.insert ("ДОРОГА");
		skip_lemmas.insert ("ЗАМЕНА");		skip_lemmas.insert ("ЗАПИСЬ");
		skip_lemmas.insert ("ИСТЕЧЬ");		skip_lemmas.insert ("ЛИЧНЫЙ");
		skip_lemmas.insert ("ЛИШИТЬ");		skip_lemmas.insert ("НАДЗОР");
		skip_lemmas.insert ("НАЧАЛО");		skip_lemmas.insert ("НАЧАТЬ");
		skip_lemmas.insert ("НОСИТЬ");		skip_lemmas.insert ("ПОДРЯД");
		skip_lemmas.insert ("ПРОЕКТ");		skip_lemmas.insert ("ПРЯМОЙ");
		skip_lemmas.insert ("РАЗДЕЛ");		skip_lemmas.insert ("РЕМОНТ");
		skip_lemmas.insert ("РЕСУРС");		skip_lemmas.insert ("РЕШИТЬ");
		skip_lemmas.insert ("СВЕРКА");		skip_lemmas.insert ("СТАТУС");
		skip_lemmas.insert ("ТЕРЕТЬ");		skip_lemmas.insert ("ТЫСЯЧА");
		skip_lemmas.insert ("ХОТЕТЬ");		skip_lemmas.insert ("ЦЕЛИТЬ");
		skip_lemmas.insert ("АДВОКАТ");		skip_lemmas.insert ("БАНКРОТ");
		skip_lemmas.insert ("ВКЛЮЧАЯ");		skip_lemmas.insert ("ВНОСИТЬ");
		skip_lemmas.insert ("ВЯТСКИЙ");		skip_lemmas.insert ("ГРАНИЦА");
		skip_lemmas.insert ("ДЕВЯТЫЙ");		skip_lemmas.insert ("ДЕЛОВОЙ");
		skip_lemmas.insert ("ДОРОГОЙ");		skip_lemmas.insert ("ЗНАЧИТЬ");
		skip_lemmas.insert ("КАПИТАЛ");		skip_lemmas.insert ("МАГАЗИН");
		skip_lemmas.insert ("НИКАКОЙ");		skip_lemmas.insert ("ОБЪЕСТЬ");
		skip_lemmas.insert ("ОБЫЧНЫЙ");		skip_lemmas.insert ("ОТМЕТКА");
		skip_lemmas.insert ("ОЧЕРЕДЬ");		skip_lemmas.insert ("ПАСПОРТ");
		skip_lemmas.insert ("ПЕРЕРЫВ");		skip_lemmas.insert ("ПЕРЕХОД");
		skip_lemmas.insert ("ПОДПИСЬ");		skip_lemmas.insert ("ПОНЯТИЕ");
		skip_lemmas.insert ("ПРАКТИК");		skip_lemmas.insert ("ПРИЕМКА");
		skip_lemmas.insert ("ПРИНЦИП");		skip_lemmas.insert ("ПРИСТАВ");
		skip_lemmas.insert ("РАБОЧИЙ");		skip_lemmas.insert ("РАЗНИЦА");
		skip_lemmas.insert ("РЕСУРСЫ");		skip_lemmas.insert ("СВОБОДА");
		skip_lemmas.insert ("СЛОЖИТЬ");		skip_lemmas.insert ("СОЗДАТЬ");
		skip_lemmas.insert ("СПОРОТЬ");		skip_lemmas.insert ("СТРАХОВ");
		skip_lemmas.insert ("ТАМОЖНЯ");		skip_lemmas.insert ("ТЕКУЩИЙ");
		skip_lemmas.insert ("УРОВЕНЬ");		skip_lemmas.insert ("УЧЕТНЫЙ");
		skip_lemmas.insert ("ФИНАНСЫ");		skip_lemmas.insert ("ФУНКЦИЯ");
		skip_lemmas.insert ("ЭНЕРГИЯ");		skip_lemmas.insert ("АРЕНДНЫЙ");
		skip_lemmas.insert ("ВЗАИМНЫЙ");		skip_lemmas.insert ("ВИНОВНЫЙ");
		skip_lemmas.insert ("ВЛАДЕЛЕЦ");		skip_lemmas.insert ("ВЛАДЕНИЕ");
		skip_lemmas.insert ("ГРУЗОВОЙ");		skip_lemmas.insert ("ГРУЗОВЫЙ");
		skip_lemmas.insert ("ДВИЖЕНИЕ");		skip_lemmas.insert ("ЗАВИСЕТЬ");
		skip_lemmas.insert ("ЗАНИМАТЬ");		skip_lemmas.insert ("ИЗЛИШНИЙ");
		skip_lemmas.insert ("ИНТЕРНЕТ");		skip_lemmas.insert ("ИСТОЧНИК");
		skip_lemmas.insert ("КАССОВЫЙ");		skip_lemmas.insert ("КЛЮЧЕВОЙ");
		skip_lemmas.insert ("КОМПЛЕКС");		skip_lemmas.insert ("МЕСЯЧНЫЙ");
		skip_lemmas.insert ("НАЧИНАТЬ");		skip_lemmas.insert ("НЕВЕРНЫЙ");
		skip_lemmas.insert ("ОБЛАГАТЬ");		skip_lemmas.insert ("ОБЛАДАТЬ");
		skip_lemmas.insert ("ОБРАТНЫЙ");		skip_lemmas.insert ("ОСТАТЬСЯ");
		skip_lemmas.insert ("ОТЧЕТНЫЙ");		skip_lemmas.insert ("ПЕРЕРЫТЬ");
		skip_lemmas.insert ("ПОГАСИТЬ");		skip_lemmas.insert ("ПОДАВАТЬ");
		skip_lemmas.insert ("ПОЛУЧАТЬ");		skip_lemmas.insert ("ПОМОЩНИК");
		skip_lemmas.insert ("ПОНИМАТЬ");		skip_lemmas.insert ("ПОЧТОВЫЙ");
		skip_lemmas.insert ("ПОЯСНИТЬ");		skip_lemmas.insert ("ПРАКТИКА");
		skip_lemmas.insert ("СОЗДАНИЕ");		skip_lemmas.insert ("СООБЩИТЬ");
		skip_lemmas.insert ("ТОВАРНЫЙ");		skip_lemmas.insert ("ТОРГОВЛЯ");
		skip_lemmas.insert ("ТРУДОВОЙ");		skip_lemmas.insert ("УСТАВНОЙ");
		skip_lemmas.insert ("УСТАВНЫЙ");		skip_lemmas.insert ("УТРАТИТЬ");
		skip_lemmas.insert ("ХРАНЕНИЕ");		skip_lemmas.insert ("ШТРАФНОЙ");
		skip_lemmas.insert ("АГЕНТСТВО");		skip_lemmas.insert ("АРЕНДАТОР");
		skip_lemmas.insert ("БЮДЖЕТНЫЙ");		skip_lemmas.insert ("ВОЗБУДИТЬ");
		skip_lemmas.insert ("ВЫПЛАТИТЬ");		skip_lemmas.insert ("ВЫПОЛНЯТЬ");
		skip_lemmas.insert ("ВЫСТУПАТЬ");		skip_lemmas.insert ("ВЫЯСНЕНИЕ");
		skip_lemmas.insert ("ЗАКЛЮЧАТЬ");		skip_lemmas.insert ("ЗАКРЕПИТЬ");
		skip_lemmas.insert ("ИЗВЕСТНЫЙ");		skip_lemmas.insert ("ИЗВЕЩЕНИЕ");
		skip_lemmas.insert ("ИСКЛЮЧАТЬ");		skip_lemmas.insert ("ИСКЛЮЧИТЬ");
		skip_lemmas.insert ("КАТЕГОРИЯ");		skip_lemmas.insert ("КВИТАНЦИЯ");
		skip_lemmas.insert ("КРЕДИТНЫЙ");		skip_lemmas.insert ("НАДЛЕЖАЩЕ");
		skip_lemmas.insert ("НАКАЗАНИЕ");		skip_lemmas.insert ("НАЧАЛЬНИК");
		skip_lemmas.insert ("НЕУСТОЙКА");		skip_lemmas.insert ("НИЧТОЖНЫЙ");
		skip_lemmas.insert ("ОКАЗЫВАТЬ");		skip_lemmas.insert ("ОТНЕСЕНИЕ");
		skip_lemmas.insert ("ОЦЕНИВАТЬ");		skip_lemmas.insert ("ПЕРЕВОЗКА");
		skip_lemmas.insert ("ПОДРЯДЧИК");		skip_lemmas.insert ("ПОЯСНЕНИЕ");
		skip_lemmas.insert ("ПРЕТЕНЗИЯ");		skip_lemmas.insert ("ПРИВОДИТЬ");
		skip_lemmas.insert ("ПРИЛОЖИТЬ");		skip_lemmas.insert ("ПРОИЗОЙТИ");
		skip_lemmas.insert ("ПУБЛИЧНЫЙ");		skip_lemmas.insert ("РАЗЛИЧНЫЙ");
		skip_lemmas.insert ("РАЗРЕШАТЬ");		skip_lemmas.insert ("СЕКРЕТАРЬ");
		skip_lemmas.insert ("СОВЕРШАТЬ");		skip_lemmas.insert ("СОГЛАШАТЬ");
		skip_lemmas.insert ("СОЗДАВАТЬ");		skip_lemmas.insert ("СООБЩЕНИЕ");
		skip_lemmas.insert ("ТРАНСПОРТ");		skip_lemmas.insert ("УВЕЛИЧИТЬ");
		skip_lemmas.insert ("УТОЧНЕНИЕ");		skip_lemmas.insert ("ХОЗЯЙСТВО");
		skip_lemmas.insert ("АРЕНДОВАТЬ");		skip_lemmas.insert ("БАНКОВСКИЙ");
		skip_lemmas.insert ("ВНУТРЕННИЙ");		skip_lemmas.insert ("ДАЛЬНЕЙШИЙ");
		skip_lemmas.insert ("ДОГОВОРНЫЙ");		skip_lemmas.insert ("ИНСТРУКЦИЯ");
		skip_lemmas.insert ("КОНКУРСНЫЙ");		skip_lemmas.insert ("КОНТРАГЕНТ");
		skip_lemmas.insert ("ЛИКВИДАЦИЯ");		skip_lemmas.insert ("НЕВОЗМОЖНО");
		skip_lemmas.insert ("ОБУСЛОВИТЬ");		skip_lemmas.insert ("ОПЛАЧИВАТЬ");
		skip_lemmas.insert ("ОСВОБОДИТЬ");		skip_lemmas.insert ("ПЕНСИОННЫЙ");
		skip_lemmas.insert ("ПОДГОТОВКА");		skip_lemmas.insert ("ПОДПИСАНИЕ");
		skip_lemmas.insert ("ПОЛЬЗОВАТЬ");		skip_lemmas.insert ("ПОСТОЯННЫЙ");
		skip_lemmas.insert ("ПРЕКРАЩАТЬ");		skip_lemmas.insert ("ПРИВЛЕКАТЬ");
		skip_lemmas.insert ("ПРИЧИНЕНИЕ");		skip_lemmas.insert ("ПРОПУСТИТЬ");
		skip_lemmas.insert ("РАЗМЕЩЕНИЕ");		skip_lemmas.insert ("СОВМЕСТНЫЙ");
		skip_lemmas.insert ("СООРУЖЕНИЕ");		skip_lemmas.insert ("СПЕЦИАЛИСТ");
		skip_lemmas.insert ("УВЕЛИЧЕНИЕ");		skip_lemmas.insert ("УСТРАНЕНИЕ");
		skip_lemmas.insert ("УТВЕРЖДАТЬ");		skip_lemmas.insert ("УЧРЕДИТЕЛЬ");
		skip_lemmas.insert ("ЭКСПЕРТИЗА");		skip_lemmas.insert ("БЕЗУСЛОВНЫЙ");
		skip_lemmas.insert ("ВОЗБУЖДЕНИЕ");		skip_lemmas.insert ("ГОСУДАРСТВО");
		skip_lemmas.insert ("ДЕПАРТАМЕНТ");		skip_lemmas.insert ("ДОСТОВЕРНЫЙ");
		skip_lemmas.insert ("ЕЖЕМЕСЯЧНЫЙ");		skip_lemmas.insert ("ИНОСТРАННЫЙ");
		skip_lemmas.insert ("КАДАСТРОВЫЙ");		skip_lemmas.insert ("КАЛЕНДАРНЫЙ");
		skip_lemmas.insert ("КОМПЕНСАЦИЯ");		skip_lemmas.insert ("КОНСТИТУЦИЯ");
		skip_lemmas.insert ("МЕРОПРИЯТИЕ");		skip_lemmas.insert ("МИНИМАЛЬНЫЙ");
		skip_lemmas.insert ("НАСТУПЛЕНИЕ");		skip_lemmas.insert ("НЕВОЗМОЖНЫЙ");
		skip_lemmas.insert ("ОГРАНИЧЕНИЕ");		skip_lemmas.insert ("ОСВОБОЖДАТЬ");
		skip_lemmas.insert ("ОСОБЕННОСТЬ");		skip_lemmas.insert ("ОСПАРИВАНИЕ");
		skip_lemmas.insert ("ПОТРЕБИТЕЛЬ");		skip_lemmas.insert ("ПРЕДЛОЖЕНИЕ");
		skip_lemmas.insert ("ПРЕПЯТСТВИЕ");		skip_lemmas.insert ("ПРИОБРЕТАТЬ");
		skip_lemmas.insert ("РАЗЪЯСНЕНИЕ");		skip_lemmas.insert ("РАСТОРЖЕНИЕ");
		skip_lemmas.insert ("СОБСТВЕННЫЙ");		skip_lemmas.insert ("ТРИНАДЦАТЫЙ");
		skip_lemmas.insert ("УПРАВЛЯЮЩИЙ");		skip_lemmas.insert ("АРЕНДОДАТЕЛЬ");
		skip_lemmas.insert ("ВОЗБУЖДЕННЫЙ");		skip_lemmas.insert ("ВПОСЛЕДСТВИИ");
		skip_lemmas.insert ("ДВУХМЕСЯЧНЫЙ");		skip_lemmas.insert ("ДОКУМЕНТАЦИЯ");
		skip_lemmas.insert ("ЗНАЧИТЕЛЬНЫЙ");		skip_lemmas.insert ("ИЗГОТОВЛЕНИЕ");
		skip_lemmas.insert ("КОММУНАЛЬНЫЙ");		skip_lemmas.insert ("НАИМЕНОВАНИЕ");
		skip_lemmas.insert ("НЕЗАКОННОСТЬ");		skip_lemmas.insert ("НЕПРИМЕНЕНИЕ");
		skip_lemmas.insert ("НЕСОБЛЮДЕНИЕ");		skip_lemmas.insert ("ОБЕСПЕЧИВАТЬ");
		skip_lemmas.insert ("ОБОРУДОВАНИЕ");		skip_lemmas.insert ("ОБСЛУЖИВАНИЕ");
		skip_lemmas.insert ("ОБЩЕСТВЕННЫЙ");		skip_lemmas.insert ("ПРЕДПОЛАГАТЬ");
		skip_lemmas.insert ("ПРЕДСЕДАТЕЛЬ");		skip_lemmas.insert ("РЕГИОНАЛЬНЫЙ");
		skip_lemmas.insert ("СВЕРДЛОВСКИЙ");		skip_lemmas.insert ("СОГЛАСОВАНИЕ");
		skip_lemmas.insert ("СТРОИТЕЛЬНЫЙ");		skip_lemmas.insert ("СУЩЕСТВОВАТЬ");
		skip_lemmas.insert ("УВЕДОМЛЕННЫЙ");		skip_lemmas.insert ("ДОСТОВЕРНОСТЬ");
		skip_lemmas.insert ("ОДНОСТОРОННИЙ");		skip_lemmas.insert ("ОКОНЧАТЕЛЬНЫЙ");
		skip_lemmas.insert ("ПЕРЕЧИСЛЕННЫЙ");		skip_lemmas.insert ("ПОДРАЗДЕЛЕНИЕ");
		skip_lemmas.insert ("ПРАВОПРЕЕМНИК");		skip_lemmas.insert ("ПРИМЕНИТЕЛЬНО");
		skip_lemmas.insert ("РАСПРЕДЕЛЕНИЕ");		skip_lemmas.insert ("РЕГУЛИРОВАНИЕ");
		skip_lemmas.insert ("СОГЛАСОВАННЫЙ");		skip_lemmas.insert ("УДОСТОВЕРЕНИЕ");
		skip_lemmas.insert ("УЧРЕДИТЕЛЬНЫЙ");		skip_lemmas.insert ("ДЕЙСТВИТЕЛЬНЫЙ");
		skip_lemmas.insert ("ИНФОРМАЦИОННЫЙ");		skip_lemmas.insert ("ИСКЛЮЧИТЕЛЬНЫЙ");
		skip_lemmas.insert ("ПЕРВОНАЧАЛЬНЫЙ");		skip_lemmas.insert ("ПРЕПЯТСТВОВАТЬ");
		skip_lemmas.insert ("ПРИНУДИТЕЛЬНЫЙ");		skip_lemmas.insert ("РАСПРОСТРАНЯТЬ");
		skip_lemmas.insert ("ФИНАНСИРОВАНИЕ");		skip_lemmas.insert ("ЖЕЛЕЗНОДОРОЖНЫЙ");
		skip_lemmas.insert ("ЗАКОНОДАТЕЛЬНЫЙ");		skip_lemmas.insert ("КВАЛИФИЦИРОВАТЬ");
		skip_lemmas.insert ("НЕОСНОВАТЕЛЬНЫЙ");		skip_lemmas.insert ("ПРЕДВАРИТЕЛЬНЫЙ");
		skip_lemmas.insert ("ПРИОСТАНОВЛЕНИЕ");		skip_lemmas.insert ("РЕГИСТРАЦИОННЫЙ");
		skip_lemmas.insert ("ЗАРЕГИСТРИРОВАННЫЙ");

		skip_lemmas.insert ("А");	skip_lemmas.insert ("В");	skip_lemmas.insert ("Г");	skip_lemmas.insert ("Д");
		skip_lemmas.insert ("Е");	skip_lemmas.insert ("И");	skip_lemmas.insert ("К");	skip_lemmas.insert ("О");
		skip_lemmas.insert ("С");	skip_lemmas.insert ("У");	skip_lemmas.insert ("ВО");	skip_lemmas.insert ("ДО");
		skip_lemmas.insert ("ЕЕ");	skip_lemmas.insert ("ЖЕ");	skip_lemmas.insert ("ЗА");	skip_lemmas.insert ("ИЗ");
		skip_lemmas.insert ("ИХ");	skip_lemmas.insert ("КВ");	skip_lemmas.insert ("ЛИ");	skip_lemmas.insert ("НА");
		skip_lemmas.insert ("НЕ");	skip_lemmas.insert ("НО");	skip_lemmas.insert ("ОБ");	skip_lemmas.insert ("ОН");
		skip_lemmas.insert ("ОТ");	skip_lemmas.insert ("ПО");	skip_lemmas.insert ("РФ");	skip_lemmas.insert ("СО");
		skip_lemmas.insert ("ТО");	skip_lemmas.insert ("УЛ");	skip_lemmas.insert ("АКТ");	skip_lemmas.insert ("БАЗ");
		skip_lemmas.insert ("БЕЗ");	skip_lemmas.insert ("ВИД");	skip_lemmas.insert ("ВСЕ");	skip_lemmas.insert ("ГОД");
		skip_lemmas.insert ("ДВА");	skip_lemmas.insert ("ДЛЯ");	skip_lemmas.insert ("ЕГО");	skip_lemmas.insert ("ЗАО");
		skip_lemmas.insert ("ИЛИ");	skip_lemmas.insert ("ИСК");	skip_lemmas.insert ("КАК");	skip_lemmas.insert ("КОП");
		skip_lemmas.insert ("НДС");	skip_lemmas.insert ("ОАО");	skip_lemmas.insert ("ОНА");	skip_lemmas.insert ("ОНИ");
		skip_lemmas.insert ("ОНО");	skip_lemmas.insert ("ООО");	skip_lemmas.insert ("ПОД");	skip_lemmas.insert ("ПРИ");
		skip_lemmas.insert ("РУБ");	skip_lemmas.insert ("САМ");	skip_lemmas.insert ("СУД");	skip_lemmas.insert ("ТАК");
		skip_lemmas.insert ("ТЕМ");	skip_lemmas.insert ("ТОМ");	skip_lemmas.insert ("ТОТ");	skip_lemmas.insert ("ТРИ");
		skip_lemmas.insert ("ХОД");	skip_lemmas.insert ("ЧЕМ");	skip_lemmas.insert ("ЧТО");	skip_lemmas.insert ("ЭТО");
		skip_lemmas.insert ("БАЗА");	skip_lemmas.insert ("БАНК");	skip_lemmas.insert ("БЫЛО");	skip_lemmas.insert ("БЫЛЬ");
		skip_lemmas.insert ("БЫТЬ");	skip_lemmas.insert ("ВЕСЬ");	skip_lemmas.insert ("ВИНА");	skip_lemmas.insert ("ВЫШЕ");
		skip_lemmas.insert ("ДАНА");	skip_lemmas.insert ("ДАТА");	skip_lemmas.insert ("ДАТЬ");	skip_lemmas.insert ("ДЕЛО");
		skip_lemmas.insert ("ДЕНЬ");	skip_lemmas.insert ("ДЕТЬ");	skip_lemmas.insert ("ДОЛГ");	skip_lemmas.insert ("ЕСЛИ");
		skip_lemmas.insert ("ЕСТЬ");	skip_lemmas.insert ("ИНОЙ");	skip_lemmas.insert ("КОПА");	skip_lemmas.insert ("ЛИБО");
		skip_lemmas.insert ("ЛИСТ");	skip_lemmas.insert ("ЛИЦО");	skip_lemmas.insert ("ЛИШЬ");	skip_lemmas.insert ("МЕРА");
		skip_lemmas.insert ("МОЧЬ");	skip_lemmas.insert ("ОДИН");	skip_lemmas.insert ("ПЛАТ");	skip_lemmas.insert ("ПУТЬ");
		skip_lemmas.insert ("СВОЙ");	skip_lemmas.insert ("СИЛА");	skip_lemmas.insert ("СИЛО");	skip_lemmas.insert ("СПОР");
		skip_lemmas.insert ("СРОК");	skip_lemmas.insert ("СЧЕТ");	skip_lemmas.insert ("ТЕМА");	skip_lemmas.insert ("ТОГО");
		skip_lemmas.insert ("ТЬМА");	skip_lemmas.insert ("УЧЕТ");	skip_lemmas.insert ("ФАКТ");	skip_lemmas.insert ("ФОНД");
		skip_lemmas.insert ("ХОДЯ");	skip_lemmas.insert ("ЦЕЛЬ");	skip_lemmas.insert ("ЦЕНА");	skip_lemmas.insert ("ЭТОТ");
		skip_lemmas.insert ("АБЗАЦ");	skip_lemmas.insert ("АДРЕС");	skip_lemmas.insert ("БАНКА");	skip_lemmas.insert ("БОЛЕЕ");
		skip_lemmas.insert ("ВИДНО");	skip_lemmas.insert ("ВЛЕЧЬ");	skip_lemmas.insert ("ВРЕМЯ");	skip_lemmas.insert ("ВЫВОД");
		skip_lemmas.insert ("ВЫЧЕТ");	skip_lemmas.insert ("ГЛАВА");	skip_lemmas.insert ("ДАЛЕЕ");	skip_lemmas.insert ("ДОВОД");
		skip_lemmas.insert ("ЗАКОН");	skip_lemmas.insert ("ЗАЧЕТ");	skip_lemmas.insert ("ИМЕТЬ");	skip_lemmas.insert ("ИСТЕЦ");
		skip_lemmas.insert ("КАКОЙ");	skip_lemmas.insert ("КОГДА");	skip_lemmas.insert ("КОПИЯ");	skip_lemmas.insert ("КРОМЕ");
		skip_lemmas.insert ("КУПЛЯ");	skip_lemmas.insert ("ЛЮБОЙ");	skip_lemmas.insert ("МЕЖДУ");	skip_lemmas.insert ("МЕСТО");
		skip_lemmas.insert ("МЕСЯЦ");	skip_lemmas.insert ("НОВОЕ");	skip_lemmas.insert ("НОВЫЙ");	skip_lemmas.insert ("НОРМА");
		skip_lemmas.insert ("ОБРАЗ");	skip_lemmas.insert ("ОБЩИЙ");	skip_lemmas.insert ("ОКРУГ");	skip_lemmas.insert ("ОРГАН");
		skip_lemmas.insert ("ОТКАЗ");	skip_lemmas.insert ("ПЕРЕД");	skip_lemmas.insert ("ПЛАТА");	skip_lemmas.insert ("ПОЛНО");
		skip_lemmas.insert ("ПОСЛЕ");	skip_lemmas.insert ("ПОСОЛ");	skip_lemmas.insert ("ПРАВО");	skip_lemmas.insert ("ПРИЕМ");
		skip_lemmas.insert ("ПУНКТ");	skip_lemmas.insert ("ПУТЕМ");	skip_lemmas.insert ("РАЙОН");	skip_lemmas.insert ("РАМКА");
		skip_lemmas.insert ("РАНЕЕ");	skip_lemmas.insert ("РЕЖИМ");	skip_lemmas.insert ("РУБЛЬ");	skip_lemmas.insert ("СВЯЗЬ");
		skip_lemmas.insert ("СМЫСЛ");	skip_lemmas.insert ("СПОРА");	skip_lemmas.insert ("СТАТЬ");	skip_lemmas.insert ("СУДНО");
		skip_lemmas.insert ("СУММА");	skip_lemmas.insert ("СЧЕТЫ");	skip_lemmas.insert ("ТАКЖЕ");	skip_lemmas.insert ("ТАКОЙ");
		skip_lemmas.insert ("ФОРМА");	skip_lemmas.insert ("ЧАСТЬ");	skip_lemmas.insert ("ЧЕРЕЗ");	skip_lemmas.insert ("ЧИСЛО");
		skip_lemmas.insert ("ЯВИТЬ");	skip_lemmas.insert ("АРЕНДА");	skip_lemmas.insert ("ВИДНЫЙ");	skip_lemmas.insert ("ВМЕСТЕ");
		skip_lemmas.insert ("ВНЕСТИ");	skip_lemmas.insert ("ВОПРОС");	skip_lemmas.insert ("ВПРАВЕ");	skip_lemmas.insert ("ВТОРОЙ");
		skip_lemmas.insert ("ВЫДАТЬ");	skip_lemmas.insert ("ВЫСШИЙ");	skip_lemmas.insert ("ДАННЫЕ");	skip_lemmas.insert ("ДАННЫЙ");
		skip_lemmas.insert ("ДОЛГИЙ");	skip_lemmas.insert ("ДОЛЖЕН");	skip_lemmas.insert ("ДОЛЖНО");	skip_lemmas.insert ("ДОЛЖНЫ");
		skip_lemmas.insert ("ДРУГОЙ");	skip_lemmas.insert ("ЕДИНЫЙ");	skip_lemmas.insert ("ЖАЛОБА");	skip_lemmas.insert ("ЗАЩИТА");
		skip_lemmas.insert ("ЗДАНИЕ");	skip_lemmas.insert ("ИМЕННО");	skip_lemmas.insert ("КАЖДЫЙ");	skip_lemmas.insert ("КОДЕКС");
		skip_lemmas.insert ("МНЕНИЕ");	skip_lemmas.insert ("МОМЕНТ");	skip_lemmas.insert ("ОБЪЕКТ");	skip_lemmas.insert ("ОДНАКО");
		skip_lemmas.insert ("ОКРУГА");	skip_lemmas.insert ("ОСНОВА");	skip_lemmas.insert ("ОТМЕНА");	skip_lemmas.insert ("ОЦЕНКА");
		skip_lemmas.insert ("ПЕРВЫЙ");	skip_lemmas.insert ("ПЕРЕТЬ");	skip_lemmas.insert ("ПЕРИОД");	skip_lemmas.insert ("ПИСЬМО");
		skip_lemmas.insert ("ПЛЕНУМ");	skip_lemmas.insert ("ПОДАТЬ");	skip_lemmas.insert ("ПОДАЧА");	skip_lemmas.insert ("ПОЛНЫЙ");
		skip_lemmas.insert ("ПОЛЬЗА");	skip_lemmas.insert ("ПРАВЫЙ");	skip_lemmas.insert ("ПРЕДЕЛ");	skip_lemmas.insert ("ПРИДТИ");
		skip_lemmas.insert ("ПРИЙТИ");	skip_lemmas.insert ("ПРИКАЗ");	skip_lemmas.insert ("РАЗМЕР");	skip_lemmas.insert ("РЕЕСТР");
		skip_lemmas.insert ("РОССИЯ");	skip_lemmas.insert ("СДЕЛКА");	skip_lemmas.insert ("СЛУЖБА");	skip_lemmas.insert ("СЛУЧАЙ");
		skip_lemmas.insert ("СОСТАВ");	skip_lemmas.insert ("СПОРЫЙ");	skip_lemmas.insert ("ССЫЛКА");	skip_lemmas.insert ("СТАВКА");
		skip_lemmas.insert ("СТАВОК");	skip_lemmas.insert ("СТАТЬЯ");	skip_lemmas.insert ("ТОЛЬКО");	skip_lemmas.insert ("ТРЕТЬЕ");
		skip_lemmas.insert ("УБЫТОК");	skip_lemmas.insert ("УЧЕСТЬ");	skip_lemmas.insert ("ЧАСТЬЮ");	skip_lemmas.insert ("ЯВЛЯТЬ");
		skip_lemmas.insert ("ЯНВАРЬ");	skip_lemmas.insert ("ВЕДЕНИЕ");	skip_lemmas.insert ("ВОЗВРАТ");	skip_lemmas.insert ("ВХОДИТЬ");
		skip_lemmas.insert ("ВЫНЕСТИ");	skip_lemmas.insert ("ВЫРУЧКА");	skip_lemmas.insert ("ВЫСОКИЙ");	skip_lemmas.insert ("ВЫЯВИТЬ");
		skip_lemmas.insert ("ДЕКАБРЬ");	skip_lemmas.insert ("ДОЛЖНИК");	skip_lemmas.insert ("ДОЛЖНЫЙ");	skip_lemmas.insert ("ЗАТРАТА");
		skip_lemmas.insert ("ЗАЯВИТЬ");	skip_lemmas.insert ("ИНТЕРЕС");	skip_lemmas.insert ("ИСКОВОЙ");	skip_lemmas.insert ("КВАРТАЛ");
		skip_lemmas.insert ("КОМИТЕТ");	skip_lemmas.insert ("КОПЕЙКА");	skip_lemmas.insert ("КОТОРЫЙ");	skip_lemmas.insert ("МЕСТНЫЙ");
		skip_lemmas.insert ("НАЗВАТЬ");	skip_lemmas.insert ("НАЛИЧИЕ");	skip_lemmas.insert ("ОБЛАСТЬ");	skip_lemmas.insert ("ОБЯЗАТЬ");
		skip_lemmas.insert ("ОТКРЫТЬ");	skip_lemmas.insert ("ОЦЕНИТЬ");	skip_lemmas.insert ("ПЛОЩАДЬ");	skip_lemmas.insert ("ПОЗДНЕЕ");
		skip_lemmas.insert ("ПОЗДНИЙ");	skip_lemmas.insert ("ПОРЯДОК");	skip_lemmas.insert ("ПОШЛИНА");	skip_lemmas.insert ("ПОЭТОМУ");
		skip_lemmas.insert ("ПРАВИЛО");	skip_lemmas.insert ("ПРАВИТЬ");	skip_lemmas.insert ("ПРЕДМЕТ");	skip_lemmas.insert ("ПРИБЫЛЬ");
		skip_lemmas.insert ("ПРИНЯТЬ");	skip_lemmas.insert ("ПРИЧИНА");	skip_lemmas.insert ("ПРОДАЖА");	skip_lemmas.insert ("ПРОСИТЬ");
		skip_lemmas.insert ("ПРОЦЕСС");	skip_lemmas.insert ("РЕШЕНИЕ");	skip_lemmas.insert ("САНКЦИЯ");	skip_lemmas.insert ("СВЯЗАТЬ");
		skip_lemmas.insert ("СДЕЛАТЬ");	skip_lemmas.insert ("СИСТЕМА");	skip_lemmas.insert ("СЛУЖИТЬ");	skip_lemmas.insert ("СОСЛАТЬ");
		skip_lemmas.insert ("СПОРНЫЙ");	skip_lemmas.insert ("ССЫЛАТЬ");	skip_lemmas.insert ("СТОРОНА");	skip_lemmas.insert ("СУБЪЕКТ");
		skip_lemmas.insert ("СЧИТАТЬ");	skip_lemmas.insert ("ТЕЧЕНИЕ");	skip_lemmas.insert ("УКАЗАТЬ");	skip_lemmas.insert ("УСЛОВИЕ");
		skip_lemmas.insert ("УЧАСТИЕ");	skip_lemmas.insert ("УЧАСТОК");	skip_lemmas.insert ("ФАКТУРА");	skip_lemmas.insert ("ЧАСТИТЬ");
		skip_lemmas.insert ("ЭКСПОРТ");		skip_lemmas.insert ("ВКЛЮЧАТЬ");	skip_lemmas.insert ("ВКЛЮЧИТЬ");	skip_lemmas.insert ("ВНЕСЕНИЕ");
		skip_lemmas.insert ("ВНИМАНИЕ");	skip_lemmas.insert ("ВСТУПИТЬ");	skip_lemmas.insert ("ВЫЕЗДНОЙ");	skip_lemmas.insert ("ДЕЙСТВИЕ");
		skip_lemmas.insert ("ДОБАВИТЬ");	skip_lemmas.insert ("ДОКАЗАТЬ");	skip_lemmas.insert ("ДОКУМЕНТ");	skip_lemmas.insert ("ЗАКОННЫЙ");
		skip_lemmas.insert ("ЗНАЧЕНИЕ");	skip_lemmas.insert ("ИЗЛОЖИТЬ");	skip_lemmas.insert ("ИСХОДИТЬ");	skip_lemmas.insert ("КАСАТЬСЯ");
		skip_lemmas.insert ("КАЧЕСТВО");	skip_lemmas.insert ("КОЛЛЕГИЯ");	skip_lemmas.insert ("КОНТРАКТ");	skip_lemmas.insert ("КОНТРОЛЬ");
		skip_lemmas.insert ("КРЕДИТОР");	skip_lemmas.insert ("МАТЕРИАЛ");	skip_lemmas.insert ("НАРУШАТЬ");	skip_lemmas.insert ("НАРУШИТЬ");
		skip_lemmas.insert ("НАХОДИТЬ");	skip_lemmas.insert ("НЕДОИМКА");	skip_lemmas.insert ("НЕПОЛНЫЙ");	skip_lemmas.insert ("НЕУПЛАТА");
		skip_lemmas.insert ("ОБРАТИТЬ");	skip_lemmas.insert ("ОБЩЕСТВО");	skip_lemmas.insert ("ОКАЗАНИЕ");	skip_lemmas.insert ("ОПЕРАЦИЯ");
		skip_lemmas.insert ("ОПЛАТИТЬ");	skip_lemmas.insert ("ОСНОВАТЬ");	skip_lemmas.insert ("ОСНОВНОЙ");	skip_lemmas.insert ("ОСНОВНЫЙ");
		skip_lemmas.insert ("ОСТАВИТЬ");	skip_lemmas.insert ("ОТВЕТЧИК");	skip_lemmas.insert ("ОТКАЗАТЬ");	skip_lemmas.insert ("ОТКРЫТЫЙ");
		skip_lemmas.insert ("ОТМЕНИТЬ");	skip_lemmas.insert ("ОТРАЗИТЬ");	skip_lemmas.insert ("ОТНОСИТЬ");	skip_lemmas.insert ("ОФОРМИТЬ");
		skip_lemmas.insert ("ПЕРЕДАТЬ");	skip_lemmas.insert ("ПЕРЕДАЧА");	skip_lemmas.insert ("ПЕРЕЧЕНЬ");	skip_lemmas.insert ("ПОДПУНКТ");
		skip_lemmas.insert ("ПОЛАГАТЬ");	skip_lemmas.insert ("ПОЛУЧИТЬ");	skip_lemmas.insert ("ПОСТАВКА");	skip_lemmas.insert ("ПРАВОВОЙ");
		skip_lemmas.insert ("ПРИВЕСТИ");	skip_lemmas.insert ("ПРИВЛЕЧЬ");	skip_lemmas.insert ("ПРИЗНАТЬ");	skip_lemmas.insert ("ПРИНЯТИЕ");
		skip_lemmas.insert ("ПРИНЯТЫЙ");	skip_lemmas.insert ("ПРОВЕСТИ");	skip_lemmas.insert ("ПРОДАВЕЦ");	skip_lemmas.insert ("ПРОТОКОЛ");
		skip_lemmas.insert ("СВЕДЕНИЕ");	skip_lemmas.insert ("СОГЛАСНО");	skip_lemmas.insert ("СОСТОЯТЬ");	skip_lemmas.insert ("СРЕДСТВА");
		skip_lemmas.insert ("СРЕДСТВО");	skip_lemmas.insert ("СУДЕБНЫЙ");	skip_lemmas.insert ("СУЩЕСТВО");	skip_lemmas.insert ("УКАЗАНИЕ");
		skip_lemmas.insert ("УЧАСТНИК");	skip_lemmas.insert ("ХАРАКТЕР");	skip_lemmas.insert ("ВОЗЛОЖИТЬ");	skip_lemmas.insert ("ВОЗМОЖНЫЙ");
		skip_lemmas.insert ("ВРЕМЕНИТЬ");	skip_lemmas.insert ("ВЫНЕСЕНИЕ");	skip_lemmas.insert ("ВЫПОЛНИТЬ");	skip_lemmas.insert ("ВЫСТАВИТЬ");
		skip_lemmas.insert ("ГРАЖДАНИН");	skip_lemmas.insert ("ДОПУСТИТЬ");	skip_lemmas.insert ("ЗАКЛЮЧИТЬ");	skip_lemmas.insert ("ЗАСЕДАНИЕ");
		skip_lemmas.insert ("ЗАЯВЛЕНИЕ");	skip_lemmas.insert ("ЗАЯВИТЕЛЬ");	skip_lemmas.insert ("ЗЕМЕЛЬНЫЙ");	skip_lemmas.insert ("ИЗМЕНЕНИЕ");
		skip_lemmas.insert ("ИНСТАНЦИЯ");	skip_lemmas.insert ("ИСПОЛНИТЬ");	skip_lemmas.insert ("ИСТЕЧЕНИЕ");	skip_lemmas.insert ("ИСЧИСЛИТЬ");
		skip_lemmas.insert ("НАПРАВИТЬ");	skip_lemmas.insert ("НАРУШЕНИЕ");	skip_lemmas.insert ("НАСТОЯЩЕЕ");	skip_lemmas.insert ("НАСТОЯЩИЙ");
		skip_lemmas.insert ("НАЧИСЛИТЬ");	skip_lemmas.insert ("НЕКОТОРЫЙ");	skip_lemmas.insert ("ОБРАЩЕНИЕ");	skip_lemmas.insert ("ОБЯЗАННЫЙ");
		skip_lemmas.insert ("ОСНОВАНИЕ");	skip_lemmas.insert ("ОТДЕЛЬНЫЙ");	skip_lemmas.insert ("ОТКЛОНИТЬ");	skip_lemmas.insert ("ОТКЛОНЯТЬ");
		skip_lemmas.insert ("ОТНОШЕНИЕ");	skip_lemmas.insert ("ОШИБОЧНЫЙ");	skip_lemmas.insert ("ПЛАТЕЖНЫЙ");	skip_lemmas.insert ("ПОДЛЕЖАТЬ");
		skip_lemmas.insert ("ПОДПИСАТЬ");	skip_lemmas.insert ("ПОЛНОСТЬЮ");	skip_lemmas.insert ("ПОЛОЖЕНИЕ");	skip_lemmas.insert ("ПОЛУЧЕНИЕ");
		skip_lemmas.insert ("ПОМЕЩЕНИЕ");	skip_lemmas.insert ("ПОРУЧЕНИЕ");	skip_lemmas.insert ("ПОСКОЛЬКУ");	skip_lemmas.insert ("ПОСЛЕДНИЙ");
		skip_lemmas.insert ("ПОСЛУЖИТЬ");	skip_lemmas.insert ("ПОСТАВИТЬ");	skip_lemmas.insert ("ПОСТАВЩИК");	skip_lemmas.insert ("ПОСТУПИТЬ");
		skip_lemmas.insert ("ПРИЗНАНИЕ");	skip_lemmas.insert ("ПРИМЕНИТЬ");	skip_lemmas.insert ("ПРИМЕНЯТЬ");	skip_lemmas.insert ("ПРИНИМАТЬ");
		skip_lemmas.insert ("ПРОВЕРИТЬ");	skip_lemmas.insert ("ПРОВЕРЯТЬ");	skip_lemmas.insert ("ПРОДУКЦИЯ");	skip_lemmas.insert ("РАСЧЕТНЫЙ");
		skip_lemmas.insert ("РЕЗУЛЬТАТ");	skip_lemmas.insert ("СВЯЗАННЫЙ");	skip_lemmas.insert ("СЛЕДОВАТЬ");	skip_lemmas.insert ("СЛЕДУЮЩИЙ");
		skip_lemmas.insert ("СОВЕРШИТЬ");	skip_lemmas.insert ("СОГЛАСИТЬ");	skip_lemmas.insert ("СОГЛАСНЫЙ");	skip_lemmas.insert ("СОДЕРЖАТЬ");
		skip_lemmas.insert ("СОСТАВИТЬ");	skip_lemmas.insert ("СОСТОЯНИЕ");	skip_lemmas.insert ("ТРЕБОВАТЬ");	skip_lemmas.insert ("УКАЗАННЫЙ");
		skip_lemmas.insert ("УКАЗЫВАТЬ");	skip_lemmas.insert ("УМЕНЬШИТЬ");	skip_lemmas.insert ("УТВЕРДИТЬ");	skip_lemmas.insert ("УЧИТЫВАТЬ");
		skip_lemmas.insert ("ФЕДЕРАЦИЯ");	skip_lemmas.insert ("ЧАСТИЧНЫЙ");	skip_lemmas.insert ("ЧАСТНОСТЬ");	skip_lemmas.insert ("ВОЗВРАТИТЬ");
		skip_lemmas.insert ("ВОЗМЕЩЕНИЕ");	skip_lemmas.insert ("ВОЗНИКНУТЬ");	skip_lemmas.insert ("ВОЗРАЖЕНИЕ");	skip_lemmas.insert ("ВЫПОЛНЕНИЕ");
		skip_lemmas.insert ("ДЕКЛАРАЦИЯ");	skip_lemmas.insert ("ЗАКЛЮЧЕНИЕ");	skip_lemmas.insert ("ЗАКОННОСТЬ");	skip_lemmas.insert ("ИНФОРМАЦИЯ");
		skip_lemmas.insert ("ИСКЛЮЧЕНИЕ");	skip_lemmas.insert ("ИСПОЛНЕНИЕ");	skip_lemmas.insert ("ИСЧИСЛЕНИЕ");	skip_lemmas.insert ("КОЛИЧЕСТВО");
		skip_lemmas.insert ("КОНКРЕТНЫЙ");	skip_lemmas.insert ("НАДЛЕЖАЩИЙ");	skip_lemmas.insert ("НАЧИСЛЕНИЕ");	skip_lemmas.insert ("НАЗНАЧЕНИЕ");
		skip_lemmas.insert ("НЕЗАКОННЫЙ");	skip_lemmas.insert ("НЕОБХОДИМО");	skip_lemmas.insert ("ОБЖАЛОВАТЬ");	skip_lemmas.insert ("ОБОСНОВАТЬ");
		skip_lemmas.insert ("ОГРАНИЧИТЬ");	skip_lemmas.insert ("ОПРЕДЕЛИТЬ");	skip_lemmas.insert ("ОПРЕДЕЛЯТЬ");	skip_lemmas.insert ("ОСПАРИВАТЬ");
		skip_lemmas.insert ("ОТКАЗЫВАТЬ");	skip_lemmas.insert ("ОТСУТСТВИЕ");	skip_lemmas.insert ("ОФОРМЛЕНИЕ");	skip_lemmas.insert ("ПЕРЕОЦЕНКА");
		skip_lemmas.insert ("ПЛАТЕЛЬЩИК");	skip_lemmas.insert ("ПОДЛЕЖАЩЕЕ");	skip_lemmas.insert ("ПОКУПАТЕЛЬ");	skip_lemmas.insert ("ПОЛНОМОЧИЕ");
		skip_lemmas.insert ("ПРАВИЛЬНЫЙ");	skip_lemmas.insert ("ПРЕДЛОЖИТЬ");	skip_lemmas.insert ("ПРЕДЪЯВИТЬ");	skip_lemmas.insert ("ПРИЗНАВАТЬ");
		skip_lemmas.insert ("ПРИЗНАННЫЙ");	skip_lemmas.insert ("ПРИЛОЖЕНИЕ");	skip_lemmas.insert ("ПРИМЕНЕНИЕ");	skip_lemmas.insert ("ПРИОБРЕСТИ");
		skip_lemmas.insert ("ПРОВЕДЕНИЕ");	skip_lemmas.insert ("ПРОИЗВЕСТИ");	skip_lemmas.insert ("РАЗРЕШЕНИЕ");	skip_lemmas.insert ("РЕАЛИЗАЦИЯ");
		skip_lemmas.insert ("РЕСПУБЛИКА");	skip_lemmas.insert ("РОССИЙСКИЙ");	skip_lemmas.insert ("СОБЛЮДЕНИЕ");	skip_lemmas.insert ("СОВЕРШЕНИЕ");
		skip_lemmas.insert ("СОГЛАШЕНИЕ");	skip_lemmas.insert ("СОДЕРЖАНИЕ");	skip_lemmas.insert ("СОСТАВЛЯТЬ");	skip_lemmas.insert ("СОЦИАЛЬНЫЙ");
		skip_lemmas.insert ("ТАМОЖЕННЫЙ");	skip_lemmas.insert ("ТЕРРИТОРИЯ");	skip_lemmas.insert ("ТРЕБОВАНИЕ");	skip_lemmas.insert ("УПЛАЧИВАТЬ");
		skip_lemmas.insert ("УСТАНОВИТЬ");	skip_lemmas.insert ("УЧРЕЖДЕНИЕ");	skip_lemmas.insert ("ФИЗИЧЕСКИЙ");	skip_lemmas.insert ("ФИНАНСОВЫЙ");
		skip_lemmas.insert ("АРБИТРАЖНЫЙ");	skip_lemmas.insert ("ВОЗМОЖНОСТЬ");	skip_lemmas.insert ("ВСЕСТОРОННЕ");	skip_lemmas.insert ("ГРАЖДАНСКИЙ");
		skip_lemmas.insert ("ДЕЙСТВОВАТЬ");	skip_lemmas.insert ("ДЕЙСТВУЮЩИЙ");	skip_lemmas.insert ("ДОЛЖНОСТНОЙ");	skip_lemmas.insert ("ДОСТАТОЧНЫЙ");
		skip_lemmas.insert ("ЗАКЛЮЧЕННАЯ");	skip_lemmas.insert ("ЗАКЛЮЧЕННЫЙ");	skip_lemmas.insert ("ИССЛЕДОВАТЬ");	skip_lemmas.insert ("КАМЕРАЛЬНЫЙ");
		skip_lemmas.insert ("НАПРАВЛЕНИЕ");	skip_lemmas.insert ("НЕОБХОДИМЫЙ");	skip_lemmas.insert ("НОРМАТИВНЫЙ");	skip_lemmas.insert ("ОБЕСПЕЧЕНИЕ");
		skip_lemmas.insert ("ОБОСНОВАНИЕ");	skip_lemmas.insert ("ОБРАЗОВАНИЕ");	skip_lemmas.insert ("ОБЯЗАННОСТЬ");	skip_lemmas.insert ("ОПРЕДЕЛЕНИЕ");
		skip_lemmas.insert ("ОРГАНИЗАЦИЯ");	skip_lemmas.insert ("ОСУЩЕСТВИТЬ");	skip_lemmas.insert ("ПЕРЕЧИСЛИТЬ");	skip_lemmas.insert ("ПОДТВЕРДИТЬ");
		skip_lemmas.insert ("ПОЛЬЗОВАНИЕ");	skip_lemmas.insert ("ПОСЛЕДСТВИЕ");	skip_lemmas.insert ("ПОСТУПЛЕНИЕ");	skip_lemmas.insert ("ПРАВОМЕРНЫЙ");
		skip_lemmas.insert ("ПРЕДСТАВИТЬ");	skip_lemmas.insert ("ПРЕКРАЩЕНИЕ");	skip_lemmas.insert ("ПРИВЛЕЧЕНИЕ");	skip_lemmas.insert ("ПРОИЗВОДИТЬ");
		skip_lemmas.insert ("РАСПОЛОЖИТЬ");	skip_lemmas.insert ("РАССМОТРЕТЬ");	skip_lemmas.insert ("РЕАЛИЗОВАТЬ");	skip_lemmas.insert ("РЕГИСТРАЦИЯ");
		skip_lemmas.insert ("СОБСТВЕННИК");	skip_lemmas.insert ("ТЕХНИЧЕСКИЙ");	skip_lemmas.insert ("УСМАТРИВАТЬ");	skip_lemmas.insert ("УТВЕРЖДЕНИЕ");
		skip_lemmas.insert ("УЧАСТВОВАТЬ");	skip_lemmas.insert ("УЧАСТВУЮЩИЙ");	skip_lemmas.insert ("ФАКТИЧЕСКИЙ");	skip_lemmas.insert ("ФЕДЕРАЛЬНЫЙ");
		skip_lemmas.insert ("ХОДАТАЙСТВО");		skip_lemmas.insert ("ЮРИДИЧЕСКИЙ");		skip_lemmas.insert ("ДЕЯТЕЛЬНОСТЬ");	skip_lemmas.insert ("ДОБРОВОЛЬНЫЙ");
		skip_lemmas.insert ("ДОНАЧИСЛЕНИЕ");	skip_lemmas.insert ("ИСПОЛЬЗОВАТЬ");	skip_lemmas.insert ("ИССЛЕДОВАНИЕ");	skip_lemmas.insert ("КАССАЦИОННЫЙ");
		skip_lemmas.insert ("МАТЕРИАЛЬНЫЙ");	skip_lemmas.insert ("НАПРАВЛЕННЫЙ");	skip_lemmas.insert ("НЕИСПОЛНЕНИЕ");	skip_lemmas.insert ("НЕНАДЛЕЖАЩИЙ");
		skip_lemmas.insert ("НЕПРАВИЛЬНЫЙ");	skip_lemmas.insert ("ОБОСНОВАННЫЙ");	skip_lemmas.insert ("ОБЯЗАТЕЛЬНЫЙ");	skip_lemmas.insert ("ОГРАНИЧЕННЫЙ");
		skip_lemmas.insert ("ОПРЕДЕЛЕННЫЙ");	skip_lemmas.insert ("ОСУЩЕСТВЛЯТЬ");	skip_lemmas.insert ("ПЕРЕЧИСЛЕНИЕ");	skip_lemmas.insert ("ПОДТВЕРЖДАТЬ");
		skip_lemmas.insert ("ПРАВИЛЬНОСТЬ");	skip_lemmas.insert ("ПРЕДОСТАВИТЬ");	skip_lemmas.insert ("ПРЕДСТАВЛЯТЬ");	skip_lemmas.insert ("ПРЕДЪЯВЛЕНИЕ");
		skip_lemmas.insert ("ПРИНАДЛЕЖАТЬ");	skip_lemmas.insert ("ПРИОБРЕТЕНИЕ");	skip_lemmas.insert ("ПРОИЗВОДСТВО");	skip_lemmas.insert ("РАСПОРЯЖЕНИЕ");
		skip_lemmas.insert ("РАССМОТРЕНИЕ");	skip_lemmas.insert ("РЕГУЛИРОВАТЬ");	skip_lemmas.insert ("РУКОВОДИТЕЛЬ");	skip_lemmas.insert ("СОВОКУПНОСТЬ");
		skip_lemmas.insert ("СООТВЕТСТВИЕ");	skip_lemmas.insert ("СУЩЕСТВЕННЫЙ");	skip_lemmas.insert ("ТРАНСПОРТНЫЙ");	skip_lemmas.insert ("УПОЛНОМОЧИТЬ");
		skip_lemmas.insert ("УСТАНОВЛЕНИЕ");	skip_lemmas.insert ("АДМИНИСТРАЦИЯ");	skip_lemmas.insert ("АПЕЛЛЯЦИОННЫЙ");	skip_lemmas.insert ("БУХГАЛТЕРСКИЙ");
		skip_lemmas.insert ("ВЫШЕУКАЗАННЫЙ");	skip_lemmas.insert ("ИСПОЛЬЗОВАНИЕ");	skip_lemmas.insert ("МУНИЦИПАЛЬНЫЙ");	skip_lemmas.insert ("НЕОБХОДИМОСТЬ");
		skip_lemmas.insert ("НЕПРАВОМЕРНЫЙ");	skip_lemmas.insert ("ОБЯЗАТЕЛЬСТВО");	skip_lemmas.insert ("ОСУЩЕСТВЛЕНИЕ");	skip_lemmas.insert ("ОТСУТСТВОВАТЬ");
		skip_lemmas.insert ("ПОДТВЕРЖДЕНИЕ");	skip_lemmas.insert ("ПОСТАНОВЛЕНИЕ");	skip_lemmas.insert ("ПРАВИТЕЛЬСТВО");	skip_lemmas.insert ("ПРАВОМЕРНОСТЬ");
		skip_lemmas.insert ("ПРЕДОСТАВЛЯТЬ");	skip_lemmas.insert ("ПРЕДСТАВИТЕЛЬ");	skip_lemmas.insert ("ПРЕДСТАВЛЕНИЕ");	skip_lemmas.insert ("ПРЕДУСМОТРЕТЬ");
		skip_lemmas.insert ("ПРОТИВОРЕЧИТЬ");	skip_lemmas.insert ("РАСПОЛОЖЕННЫЙ");	skip_lemmas.insert ("РАССМАТРИВАТЬ");	skip_lemmas.insert ("СЛЕДОВАТЕЛЬНО");
		skip_lemmas.insert ("СОБСТВЕННОСТЬ");	skip_lemmas.insert ("УДОВЛЕТВОРИТЬ");	skip_lemmas.insert ("УДОВЛЕТВОРЯТЬ");	skip_lemmas.insert ("УСТАНАВЛИВАТЬ");
		skip_lemmas.insert ("ХОЗЯЙСТВЕННЫЙ");	skip_lemmas.insert ("ЭКОНОМИЧЕСКИЙ");	skip_lemmas.insert ("ДОКАЗАТЕЛЬСТВО");	skip_lemmas.insert ("ДОКУМЕНТАЛЬНЫЙ");
		skip_lemmas.insert ("ДОПОЛНИТЕЛЬНЫЙ");	skip_lemmas.insert ("ИНДИВИДУАЛЬНЫЙ");	skip_lemmas.insert ("ИСПОЛНИТЕЛЬНЫЙ");	skip_lemmas.insert ("НЕОБОСНОВАННЫЙ");
		skip_lemmas.insert ("ОБОСНОВАННОСТЬ");	skip_lemmas.insert ("ОБСТОЯТЕЛЬСТВО");	skip_lemmas.insert ("ПРАВОНАРУШЕНИЕ");	skip_lemmas.insert ("ПРАВООТНОШЕНИЕ");
		skip_lemmas.insert ("ПРЕДОСТАВЛЕНИЕ");	skip_lemmas.insert ("ПРОЦЕССУАЛЬНЫЙ");	skip_lemmas.insert ("САМОУПРАВЛЕНИЕ");	skip_lemmas.insert ("СООТВЕТСТВЕННО");
		skip_lemmas.insert ("УДОВЛЕТВОРЕНИЕ");	skip_lemmas.insert ("УПОЛНОМОЧЕННЫЙ");	skip_lemmas.insert ("ГОСУДАРСТВЕННЫЙ");	skip_lemmas.insert ("НАЛОГООБЛОЖЕНИЕ");
		skip_lemmas.insert ("НЕСВОЕВРЕМЕННЫЙ");	skip_lemmas.insert ("НЕСОСТОЯТЕЛЬНЫЙ");	skip_lemmas.insert ("ОТВЕТСТВЕННОСТЬ");	skip_lemmas.insert ("ПРЕДПРИНИМАТЕЛЬ");
		skip_lemmas.insert ("ПРЕДУСМАТРИВАТЬ");	skip_lemmas.insert ("РУКОВОДСТВОВАТЬ");	skip_lemmas.insert ("САМОСТОЯТЕЛЬНЫЙ");	skip_lemmas.insert ("СООТВЕТСТВЕННЫЙ");
		skip_lemmas.insert ("СООТВЕТСТВОВАТЬ");	skip_lemmas.insert ("СООТВЕТСТВУЮЩИЙ");	skip_lemmas.insert ("АДМИНИСТРАТИВНЫЙ");			skip_lemmas.insert ("ЗАКОНОДАТЕЛЬСТВО");
		skip_lemmas.insert ("ЗАРЕГИСТРИРОВАТЬ");	skip_lemmas.insert ("НЕДЕЙСТВИТЕЛЬНЫЙ");	skip_lemmas.insert ("НЕПОСРЕДСТВЕННЫЙ");	skip_lemmas.insert ("СВИДЕТЕЛЬСТВОВАТЬ");
		skip_lemmas.insert ("ПРЕДПРИНИМАТЕЛЬСКИЙ");	skip_lemmas.insert ("ТРЕТИЙ");				skip_lemmas.insert ("ДОМ");					skip_lemmas.insert ("ИЮЛЬ");
		skip_lemmas.insert ("МАРТ");				skip_lemmas.insert ("ДОЛЖНА");				skip_lemmas.insert ("ОКТЯБРЬ");				skip_lemmas.insert ("НАКЛАДНАЯ");
		skip_lemmas.insert ("НАКЛАДНОЙ");			skip_lemmas.insert ("НАКЛАДНЫЙ");			skip_lemmas.insert ("ПОГАШЕНИЕ");			skip_lemmas.insert ("РАЗРЕШИТЬ");
		skip_lemmas.insert ("ОСТАВЛЕНИЕ");			skip_lemmas.insert ("ПИСЬМЕННЫЙ");			skip_lemmas.insert ("БЕЗДЕЙСТВИЕ");			skip_lemmas.insert ("ВОЗНИКНОВЕНИЕ");

		skip_lemmas.insert ("Б");		skip_lemmas.insert ("БЫ");		skip_lemmas.insert ("ГК");		skip_lemmas.insert ("КГ");
		skip_lemmas.insert ("НИ");		skip_lemmas.insert ("НК");		skip_lemmas.insert ("СМ");		skip_lemmas.insert ("ФЗ");
		skip_lemmas.insert ("ИМЯ");		skip_lemmas.insert ("ЛЕТ");		skip_lemmas.insert ("МАЙ");		skip_lemmas.insert ("МНС");
		skip_lemmas.insert ("НЕТ");		skip_lemmas.insert ("ОБА");		skip_lemmas.insert ("ВИНО");		skip_lemmas.insert ("ИМНС");
		skip_lemmas.insert ("ИТОГ");		skip_lemmas.insert ("ИЮНЬ");		skip_lemmas.insert ("КРАЙ");		skip_lemmas.insert ("ЛЕТА");
		skip_lemmas.insert ("СЕБЯ");		skip_lemmas.insert ("ТОМА");		skip_lemmas.insert ("ЧЕГО");		skip_lemmas.insert ("ВВИДУ");
		skip_lemmas.insert ("ВЕСТИ");		skip_lemmas.insert ("ВЗНОС");		skip_lemmas.insert ("ЗАВОД");		skip_lemmas.insert ("МАРТА");
		skip_lemmas.insert ("МАЯТЬ");		skip_lemmas.insert ("МОТИВ");		skip_lemmas.insert ("НАЙТИ");		skip_lemmas.insert ("НЕМОЙ");
		skip_lemmas.insert ("НЕСТИ");		skip_lemmas.insert ("НОМЕР");		skip_lemmas.insert ("ОТДЕЛ");		skip_lemmas.insert ("ОТЗЫВ");
		skip_lemmas.insert ("РСФСР");		skip_lemmas.insert ("САМЫЙ");		skip_lemmas.insert ("САНКТ");		skip_lemmas.insert ("СОБОЙ");
		skip_lemmas.insert ("СОВЕТ");		skip_lemmas.insert ("СУДЬЯ");		skip_lemmas.insert ("СФЕРА");		skip_lemmas.insert ("ТЕКСТ");
		skip_lemmas.insert ("УСТАВ");		skip_lemmas.insert ("ФИРМА");		skip_lemmas.insert ("ЦЕЛЫЙ");		skip_lemmas.insert ("ЦЕНТР");
		skip_lemmas.insert ("ЧУЖАЯ");		skip_lemmas.insert ("ЧУЖОЙ");		skip_lemmas.insert ("АВГУСТ");		skip_lemmas.insert ("АПРЕЛЬ");
		skip_lemmas.insert ("БАЛАНС");		skip_lemmas.insert ("ВЛАСТЬ");		skip_lemmas.insert ("ГЛАВЫЙ");		skip_lemmas.insert ("ЛЬГОТА");
		skip_lemmas.insert ("МЕРЕТЬ");		skip_lemmas.insert ("НЕЛЬЗЯ");		skip_lemmas.insert ("НОЯБРЬ");		skip_lemmas.insert ("ОБОРОТ");
		skip_lemmas.insert ("ПЕРВОЕ");		skip_lemmas.insert ("ПРОТИВ");		skip_lemmas.insert ("РАВНЫЙ");		skip_lemmas.insert ("СЕВЕРО");
		skip_lemmas.insert ("СПОСОБ");		skip_lemmas.insert ("ТРЕТЬЯ");		skip_lemmas.insert ("ФИЛИАЛ");		skip_lemmas.insert ("АВГУСТА");
		skip_lemmas.insert ("ВЫПИСКА");		skip_lemmas.insert ("ВЫПЛАТА");		skip_lemmas.insert ("ГЛАВНОЕ");		skip_lemmas.insert ("ГЛАВНЫЙ");
		skip_lemmas.insert ("ЗАКРЫТЬ");		skip_lemmas.insert ("ЗАПАДНО");		skip_lemmas.insert ("ИЗУЧИТЬ");		skip_lemmas.insert ("НЕЖИЛОЙ");
		skip_lemmas.insert ("ОКАЗАТЬ");		skip_lemmas.insert ("ОТНЕСТИ");		skip_lemmas.insert ("ПОВЛЕЧЬ");		skip_lemmas.insert ("ПОЗИЦИЯ");
		skip_lemmas.insert ("ПОНЕСТИ");		skip_lemmas.insert ("ПРИБЫТЬ");		skip_lemmas.insert ("ПРИЗНАК");		skip_lemmas.insert ("ПРОПУСК");
		skip_lemmas.insert ("СПРАВКА");		skip_lemmas.insert ("СТАВИТЬ");		skip_lemmas.insert ("ФЕВРАЛЬ");		skip_lemmas.insert ("ВВЕДЕНИЕ");
		skip_lemmas.insert ("ВОСТОЧНО");		skip_lemmas.insert ("ВСТУПАТЬ");		skip_lemmas.insert ("ВЫРАЗИТЬ");		skip_lemmas.insert ("ВЫТЕКАТЬ");
		skip_lemmas.insert ("ВЫЯСНИТЬ");		skip_lemmas.insert ("ДАВНОСТЬ");		skip_lemmas.insert ("ДИРЕКТОР");		skip_lemmas.insert ("ЗАКАЗЧИК");
		skip_lemmas.insert ("ЗАКРЫТЫЙ");		skip_lemmas.insert ("ЗАПАДНЫЙ");		skip_lemmas.insert ("ЗАЯВЛЯТЬ");		skip_lemmas.insert ("ИЗМЕНИТЬ");
		skip_lemmas.insert ("КОМИССИЯ");		skip_lemmas.insert ("КОМПАНИЯ");		skip_lemmas.insert ("ОБРАЩАТЬ");		skip_lemmas.insert ("ОБСУДИТЬ");
		skip_lemmas.insert ("ОБЪЯВИТЬ");		skip_lemmas.insert ("ОБЯЗАНИЕ");		skip_lemmas.insert ("ОПЕЧАТКА");		skip_lemmas.insert ("ОСПОРИТЬ");
		skip_lemmas.insert ("ОТВЕЧАТЬ");		skip_lemmas.insert ("ОТМЕТИТЬ");		skip_lemmas.insert ("ПОДАТЕЛЬ");		skip_lemmas.insert ("ПРИСЛАТЬ");
		skip_lemmas.insert ("ПРОКУРОР");		skip_lemmas.insert ("РАБОТНИК");		skip_lemmas.insert ("РАЙОННЫЙ");		skip_lemmas.insert ("РЕАЛЬНЫЙ");
		skip_lemmas.insert ("РЕДАКЦИЯ");		skip_lemmas.insert ("СЕНТЯБРЬ");		skip_lemmas.insert ("СЛУШАНИЕ");		skip_lemmas.insert ("СОБЛЮСТИ");
		skip_lemmas.insert ("СОБРАНИЕ");		skip_lemmas.insert ("СОГЛАСИЕ");		skip_lemmas.insert ("ТОРГОВЫЙ");		skip_lemmas.insert ("УТОЧНИТЬ");
		skip_lemmas.insert ("ВЕРХОВНЫЙ");		skip_lemmas.insert ("ВКЛЮЧЕНИЕ");		skip_lemmas.insert ("ВОЗЛАГАТЬ");		skip_lemmas.insert ("ВОЗНИКАТЬ");
		skip_lemmas.insert ("ВОЗРАЖАТЬ");		skip_lemmas.insert ("ВРЕМЕННОЙ");		skip_lemmas.insert ("ВРЕМЕННЫЙ");		skip_lemmas.insert ("ВСТРЕЧНЫЙ");
		skip_lemmas.insert ("ВЫСЛУШАТЬ");		skip_lemmas.insert ("ГОРОДСКОЙ");		skip_lemmas.insert ("ДОПУСКАТЬ");		skip_lemmas.insert ("ЗАНИЖЕНИЕ");
		skip_lemmas.insert ("ЗАСЛУШАТЬ");		skip_lemmas.insert ("ИЗВЕСТИТЬ");		skip_lemmas.insert ("ИСПОЛНЯТЬ");		skip_lemmas.insert ("ИСЧИСЛЯТЬ");
		skip_lemmas.insert ("НАДЛЕЖАТЬ");		skip_lemmas.insert ("НАЗНАЧИТЬ");		skip_lemmas.insert ("НАЛОЖЕНИЕ");		skip_lemmas.insert ("НАСЕЛЕНИЕ");
		skip_lemmas.insert ("ОБЛАСТНОЙ");		skip_lemmas.insert ("ОБЯЗЫВАТЬ");		skip_lemmas.insert ("ОКОНЧАНИЕ");		skip_lemmas.insert ("ОСТАЛЬНОЙ");
		skip_lemmas.insert ("ОТДЕЛЕНИЕ");		skip_lemmas.insert ("ПЕРВИЧНЫЙ");		skip_lemmas.insert ("ПЕТЕРБУРГ");		skip_lemmas.insert ("ПОВТОРНЫЙ");
		skip_lemmas.insert ("ПОЗВОЛЯТЬ");		skip_lemmas.insert ("ПОСЧИТАТЬ");		skip_lemmas.insert ("ПРЕВЫШАТЬ");		skip_lemmas.insert ("ПРЕЗИДИУМ");
		skip_lemmas.insert ("ПРИХОДИТЬ");		skip_lemmas.insert ("ПРИЧИНИТЬ");		skip_lemmas.insert ("ПРОВОДИТЬ");		skip_lemmas.insert ("ПРОСРОЧКА");
		skip_lemmas.insert ("ПРОЦЕДУРА");		skip_lemmas.insert ("СИБИРСКИЙ");		skip_lemmas.insert ("СТРАХОВОЙ");		skip_lemmas.insert ("УВЕДОМИТЬ");
		skip_lemmas.insert ("УНИТАРНЫЙ");		skip_lemmas.insert ("УПРАВЛЯТЬ");		skip_lemmas.insert ("УРАЛЬСКИЙ");		skip_lemmas.insert ("УСТРАНИТЬ");
		skip_lemmas.insert ("ВЗЫСКИВАТЬ");		skip_lemmas.insert ("ВОЗМЕСТИТЬ");		skip_lemmas.insert ("ВСЛЕДСТВИЕ");		skip_lemmas.insert ("ВСТУПЛЕНИЕ");
		skip_lemmas.insert ("ГОСПОШЛИНА");		skip_lemmas.insert ("ДОПОЛНЕНИЕ");		skip_lemmas.insert ("ИЗВЛЕЧЕНИЕ");		skip_lemmas.insert ("ИЗГОТОВИТЬ");
		skip_lemmas.insert ("КАВКАЗСКИЙ");		skip_lemmas.insert ("НАПРАВЛЯТЬ");		skip_lemmas.insert ("НАХОЖДЕНИЕ");		skip_lemmas.insert ("НЕДВИЖИМЫЙ");
		skip_lemmas.insert ("ОБЕСПЕЧИТЬ");		skip_lemmas.insert ("ОБРАЗОВАТЬ");		skip_lemmas.insert ("ОБЪЯСНЕНИЕ");		skip_lemmas.insert ("ОТКЛОНЕНИЕ");
		skip_lemmas.insert ("ОТЧЕТНОСТЬ");		skip_lemmas.insert ("ПЕРЕДАВАТЬ");		skip_lemmas.insert ("ПОВОЛЖСКИЙ");		skip_lemmas.insert ("ПОДДЕРЖАТЬ");
		skip_lemmas.insert ("ПРЕДЫДУЩИЙ");		skip_lemmas.insert ("ПРЕКРАТИТЬ");		skip_lemmas.insert ("РАЗЪЯСНИТЬ");		skip_lemmas.insert ("ТОЛКОВАНИЕ");
		skip_lemmas.insert ("УМЕНЬШЕНИЕ");		skip_lemmas.insert ("АНАЛОГИЧНЫЙ");		skip_lemmas.insert ("БАНКРОТСТВО");		skip_lemmas.insert ("ГЕНЕРАЛЬНЫЙ");
		skip_lemmas.insert ("ДОКАЗЫВАНИЕ");		skip_lemmas.insert ("ДОНАЧИСЛИТЬ");		skip_lemmas.insert ("ЗАВИСИМОСТЬ");		skip_lemmas.insert ("ЗАМЕСТИТЕЛЬ");
		skip_lemmas.insert ("ИСПОЛНИТЕЛЬ");		skip_lemmas.insert ("КОМПЕТЕНЦИЯ");		skip_lemmas.insert ("МЕЖРАЙОННЫЙ");		skip_lemmas.insert ("НЕЗАВИСИМЫЙ");
		skip_lemmas.insert ("ОБЖАЛОВАНИЕ");		skip_lemmas.insert ("ОБЪЕКТИВНЫЙ");		skip_lemmas.insert ("ОПРОВЕРГАТЬ");		skip_lemmas.insert ("ПОСЛЕДУЮЩИЙ");
		skip_lemmas.insert ("ПОСТАНОВИТЬ");		skip_lemmas.insert ("ПРЕДЪЯВЛЯТЬ");		skip_lemmas.insert ("СОВЕРШЕННЫЙ");		skip_lemmas.insert ("СОГЛАСОВАТЬ");
		skip_lemmas.insert ("СОСТАВЛЕНИЕ");		skip_lemmas.insert ("СПЕЦИАЛЬНЫЙ");		skip_lemmas.insert ("СТРАХОВАНИЕ");		skip_lemmas.insert ("УВЕДОМЛЕНИЕ");
		skip_lemmas.insert ("ЦЕНТРАЛЬНЫЙ");		skip_lemmas.insert ("ВСЕСТОРОННИЙ");		skip_lemmas.insert ("КОММЕРЧЕСКИЙ");		skip_lemmas.insert ("МОТИВИРОВАТЬ");
		skip_lemmas.insert ("НЕДВИЖИМОСТЬ");		skip_lemmas.insert ("ОСВОБОЖДЕНИЕ");		skip_lemmas.insert ("ОТНОСИТЕЛЬНО");		skip_lemmas.insert ("РЕЗОЛЮТИВНЫЙ");
		skip_lemmas.insert ("ЭКСПЛУАТАЦИЯ");		skip_lemmas.insert ("ВЫШЕНАЗВАННЫЙ");		skip_lemmas.insert ("ИМУЩЕСТВЕННЫЙ");		skip_lemmas.insert ("ЛЕНИНГРАДСКИЙ");
		skip_lemmas.insert ("НЕВОЗМОЖНОСТЬ");		skip_lemmas.insert ("НЕНОРМАТИВНЫЙ");		skip_lemmas.insert ("ОДНОВРЕМЕННЫЙ");		skip_lemmas.insert ("ОТНОСИТЕЛЬНЫЙ");
		skip_lemmas.insert ("СВИДЕТЕЛЬСТВО");		skip_lemmas.insert ("СВОЕВРЕМЕННЫЙ");		skip_lemmas.insert ("СТРОИТЕЛЬСТВО");		skip_lemmas.insert ("ВОССТАНОВЛЕНИЕ");
		skip_lemmas.insert ("ВЫШЕИЗЛОЖЕННЫЙ");		skip_lemmas.insert ("ЗАИНТЕРЕСОВАТЬ");		skip_lemmas.insert ("МОТИВИРОВАННЫЙ");		skip_lemmas.insert ("НЕДОКАЗАННОСТЬ");
		skip_lemmas.insert ("НЕСООТВЕТСТВИЕ");		skip_lemmas.insert ("УПОЛНОМОЧЕННАЯ");		skip_lemmas.insert ("ДАЛЬНЕВОСТОЧНЫЙ");		skip_lemmas.insert ("КОНСТИТУЦИОННЫЙ");
		skip_lemmas.insert ("НЕПРЕДСТАВЛЕНИЕ");		skip_lemmas.insert ("РАЗБИРАТЕЛЬСТВО");		skip_lemmas.insert ("ТЕРРИТОРИАЛЬНЫЙ");		skip_lemmas.insert ("УДОВЛЕТВОРЕННЫЙ");
		skip_lemmas.insert ("ЗАИНТЕРЕСОВАННЫЙ");		skip_lemmas.insert ("НЕОБОСНОВАННОСТЬ");		skip_lemmas.insert ("ПРОИЗВОДСТВЕННЫЙ");		skip_lemmas.insert ("НЕСОСТОЯТЕЛЬНОСТЬ");
		skip_lemmas.insert ("НЕДЕЙСТВИТЕЛЬНОСТЬ");		skip_lemmas.insert ("ПРЕДСЕДАТЕЛЬСТВОВАТЬ");		skip_lemmas.insert ("ПРЕДСЕДАТЕЛЬСТВУЮЩИЙ");
	}
#endif

	std::set<std::string> remain_lemmas;

#ifndef	_DEBUG
	//Список от 23 августа 2011г.
	remain_lemmas.insert ("АГЕНТ");
	remain_lemmas.insert ("АДРЕС");
	remain_lemmas.insert ("АКЦИОНЕРНЫЙ");
	remain_lemmas.insert ("АРЕНДА");
	remain_lemmas.insert ("АРЕНДАТОР");
	remain_lemmas.insert ("АРЕНДНЫЙ");
	remain_lemmas.insert ("АРЕНДОВАТЬ");
	remain_lemmas.insert ("АРЕНДОДАТЕЛЬ");
	remain_lemmas.insert ("БАЛАНС");
	remain_lemmas.insert ("БАНК");
	remain_lemmas.insert ("БАНКОВСКИЙ");
	remain_lemmas.insert ("БАНКРОТ");
	remain_lemmas.insert ("БАНКРОТСТВО");
	remain_lemmas.insert ("БЕЗДЕЙСТВИЕ");
	remain_lemmas.insert ("БЮДЖЕТ");
	remain_lemmas.insert ("БЮДЖЕТНЫЙ");
	remain_lemmas.insert ("ВЕДЕНИЕ");
	remain_lemmas.insert ("ВЗАИМНЫЙ");
	remain_lemmas.insert ("ВЗНОС");
	remain_lemmas.insert ("ВЗЫСКАНИЕ");
	remain_lemmas.insert ("ВЗЫСКАТЬ");
	remain_lemmas.insert ("ВИНА");
	remain_lemmas.insert ("ВИНО");
	remain_lemmas.insert ("ВИНОВНЫЙ");
	remain_lemmas.insert ("ВКЛЮЧАТЬ");
	remain_lemmas.insert ("ВЛАДЕЛЕЦ");
	remain_lemmas.insert ("ВЛАДЕНИЕ");
	remain_lemmas.insert ("ВОЗВРАТ");
	remain_lemmas.insert ("ВОЗВРАТИТЬ");
	remain_lemmas.insert ("ВОЗМЕЩЕНИЕ");
	remain_lemmas.insert ("ВОЗНИКНОВЕНИЕ");
	remain_lemmas.insert ("ВОССТАНОВЛЕНИЕ");
	remain_lemmas.insert ("ВРЕД");
	remain_lemmas.insert ("ВРЕМЕННЫЙ");
	remain_lemmas.insert ("ВСТРЕЧНЫЙ");
	remain_lemmas.insert ("ВСТУПИТЬ");
	remain_lemmas.insert ("ВСТУПЛЕНИЕ");
	remain_lemmas.insert ("ВЫДАТЬ");
	remain_lemmas.insert ("ВЫДАЧА");
	remain_lemmas.insert ("ВЫЕЗДНОЙ");
	remain_lemmas.insert ("ВЫПЛАТИТЬ");
	remain_lemmas.insert ("ВЫПОЛНЕНИЕ");
	remain_lemmas.insert ("ВЫПОЛНЯТЬ");
	remain_lemmas.insert ("ВЫПУСК");
	remain_lemmas.insert ("ВЫРУЧКА");
	remain_lemmas.insert ("ВЫСТАВИТЬ");
	remain_lemmas.insert ("ВЫЧЕТ");
	remain_lemmas.insert ("ГЕНЕРАЛЬНЫЙ");
	remain_lemmas.insert ("ГОСПОШЛИНА");
	remain_lemmas.insert ("ГОСУДАРСТВО");
	remain_lemmas.insert ("ГРАЖДАНИН");
	remain_lemmas.insert ("ГРАНИЦА");
	remain_lemmas.insert ("ГРУЗ");
	remain_lemmas.insert ("ГРУЗОВОЙ");
	remain_lemmas.insert ("ДАВНОСТЬ");
	remain_lemmas.insert ("ДВИЖЕНИЕ");
	remain_lemmas.insert ("ДЕКЛАРАЦИЯ");
	remain_lemmas.insert ("ДЕЛОВОЙ");
	remain_lemmas.insert ("ДЕНЕЖНЫЙ");
	remain_lemmas.insert ("ДИРЕКТОР");
	remain_lemmas.insert ("ДОБРОВОЛЬНЫЙ");
	remain_lemmas.insert ("ДОВЕРЕННОСТЬ");
	remain_lemmas.insert ("ДОГОВОР");
	remain_lemmas.insert ("ДОГОВОРНЫЙ");
	remain_lemmas.insert ("ДОКАЗАТЕЛЬСТВО");
	remain_lemmas.insert ("ДОКАЗЫВАНИЕ");
	remain_lemmas.insert ("ДОКУМЕНТАЦИЯ");
	remain_lemmas.insert ("ДОЛГ");
	remain_lemmas.insert ("ДОЛЖНИК");
	remain_lemmas.insert ("ДОЛЖНОСТНОЙ");
	remain_lemmas.insert ("ДОНАЧИСЛЕНИЕ");
	remain_lemmas.insert ("ДОРОГА");
	remain_lemmas.insert ("ДОСТОВЕРНОСТЬ");
	remain_lemmas.insert ("ДОСТОВЕРНЫЙ");
	remain_lemmas.insert ("ДОХОД");
	remain_lemmas.insert ("ЕДИНЫЙ");
	remain_lemmas.insert ("ЕЖЕМЕСЯЧНЫЙ");
	remain_lemmas.insert ("ЖЕЛЕЗНОДОРОЖНЫЙ");
	remain_lemmas.insert ("ЖИЛОЙ");
	remain_lemmas.insert ("ЗАВИСЕТЬ");
	remain_lemmas.insert ("ЗАДОЛЖЕННОСТЬ");
	remain_lemmas.insert ("ЗАИНТЕРЕСОВАННЫЙ");
	remain_lemmas.insert ("ЗАИНТЕРЕСОВАТЬ");
	remain_lemmas.insert ("ЗАКАЗЧИК");
	remain_lemmas.insert ("ЗАКЛЮЧАТЬ");
	remain_lemmas.insert ("ЗАКЛЮЧЕНИЕ");
	remain_lemmas.insert ("ЗАКЛЮЧЕННАЯ");
	remain_lemmas.insert ("ЗАКЛЮЧЕННЫЙ");
	remain_lemmas.insert ("ЗАКРЕПИТЬ");
	remain_lemmas.insert ("ЗАМЕНА");
	remain_lemmas.insert ("ЗАНИЖЕНИЕ");
	remain_lemmas.insert ("ЗАНИМАТЬ");
	remain_lemmas.insert ("ЗАПИСЬ");
	remain_lemmas.insert ("ЗАРЕГИСТРИРОВАННЫЙ");
	remain_lemmas.insert ("ЗАРЕГИСТРИРОВАТЬ");
	remain_lemmas.insert ("ЗАТРАТА");
	remain_lemmas.insert ("ЗАЧЕТ");
	remain_lemmas.insert ("ЗДАНИЕ");
	remain_lemmas.insert ("ЗЕМЕЛЬНЫЙ");
	remain_lemmas.insert ("ЗЕМЛЯ");
	remain_lemmas.insert ("ЗНАЧИТЕЛЬНЫЙ");
	remain_lemmas.insert ("ИЗГОТОВИТЬ");
	remain_lemmas.insert ("ИЗГОТОВЛЕНИЕ");
	remain_lemmas.insert ("ИЗЛИШНИЙ");
	remain_lemmas.insert ("ИЗМЕНЕНИЕ");
	remain_lemmas.insert ("ИМУЩЕСТВЕННЫЙ");
	remain_lemmas.insert ("ИМУЩЕСТВО");
	remain_lemmas.insert ("ИМЯ");
	remain_lemmas.insert ("ИНДИВИДУАЛЬНЫЙ");
	remain_lemmas.insert ("ИНОСТРАННЫЙ");
	remain_lemmas.insert ("ИНСПЕКЦИЯ");
	remain_lemmas.insert ("ИНСТРУКЦИЯ");
	remain_lemmas.insert ("ИНТЕРЕС");
	remain_lemmas.insert ("ИНТЕРНЕТ");
	remain_lemmas.insert ("ИНФОРМАЦИЯ");
	remain_lemmas.insert ("ИСКЛЮЧЕНИЕ");
	remain_lemmas.insert ("ИСКЛЮЧИТЕЛЬНЫЙ");
	remain_lemmas.insert ("ИСПОЛНЕНИЕ");
	remain_lemmas.insert ("ИСПОЛНИТЕЛЬ");
	remain_lemmas.insert ("ИСПОЛНИТЕЛЬНЫЙ");
	remain_lemmas.insert ("ИСПОЛНИТЬ");
	remain_lemmas.insert ("ИСПОЛЬЗОВАНИЕ");
	remain_lemmas.insert ("ИСТЕЧЕНИЕ");
	remain_lemmas.insert ("ИСТОЧНИК");
	remain_lemmas.insert ("ИСЧИСЛИТЬ");
	remain_lemmas.insert ("КАДАСТРОВЫЙ");
	remain_lemmas.insert ("КАЛЕНДАРНЫЙ");
	remain_lemmas.insert ("КАМЕРАЛЬНЫЙ");
	remain_lemmas.insert ("КАПИТАЛ");
	remain_lemmas.insert ("КАССОВЫЙ");
	remain_lemmas.insert ("КАТЕГОРИЯ");
	remain_lemmas.insert ("КАЧЕСТВО");
	remain_lemmas.insert ("КВАРТАЛ");
	remain_lemmas.insert ("КВИТАНЦИЯ");
	remain_lemmas.insert ("КЛЮЧЕВОЙ");
	remain_lemmas.insert ("КОАП");
	remain_lemmas.insert ("КОММУНАЛЬНЫЙ");
	remain_lemmas.insert ("КОМПЕНСАЦИЯ");
	remain_lemmas.insert ("КОМПЛЕКС");
	remain_lemmas.insert ("КОНКУРСНЫЙ");
	remain_lemmas.insert ("КОНСТИТУЦИОННЫЙ");
	remain_lemmas.insert ("КОНСТИТУЦИЯ");
	remain_lemmas.insert ("КОНТРАГЕНТ");
	remain_lemmas.insert ("КОНТРОЛЬ");
	remain_lemmas.insert ("КРЕДИТНЫЙ");
	remain_lemmas.insert ("КРЕДИТОР");
	remain_lemmas.insert ("КУПЛЯ");
	remain_lemmas.insert ("ЛИКВИДАЦИЯ");
	remain_lemmas.insert ("ЛИЧНЫЙ");
	remain_lemmas.insert ("ЛЬГОТА");
	remain_lemmas.insert ("МАТЕРИАЛЬНЫЙ");
	remain_lemmas.insert ("МЕРОПРИЯТИЕ");
	remain_lemmas.insert ("МЕСТНЫЙ");
	remain_lemmas.insert ("МЕСЯЦ");
	remain_lemmas.insert ("МЕСЯЧНЫЙ");
	remain_lemmas.insert ("МИНИМАЛЬНЫЙ");
	remain_lemmas.insert ("МИНИСТЕРСТВО");
	remain_lemmas.insert ("МОМЕНТ");
	remain_lemmas.insert ("МОТИВ");
	remain_lemmas.insert ("МУНИЦИПАЛЬНЫЙ");
	remain_lemmas.insert ("НАДЗОР");
	remain_lemmas.insert ("НАИМЕНОВАНИЕ");
	remain_lemmas.insert ("НАКАЗАНИЕ");
	remain_lemmas.insert ("НАКЛАДНАЯ");
	remain_lemmas.insert ("НАКЛАДНОЙ");
	remain_lemmas.insert ("НАКЛАДНЫЙ");
	remain_lemmas.insert ("НАЛОГ");
	remain_lemmas.insert ("НАЛОГОВЫЙ");
	remain_lemmas.insert ("НАЛОГООБЛОЖЕНИЕ");
	remain_lemmas.insert ("НАЛОГОПЛАТЕЛЬЩИК");
	remain_lemmas.insert ("НАПРАВЛЕННЫЙ");
	remain_lemmas.insert ("НАРУШЕНИЕ");
	remain_lemmas.insert ("НАРУШИТЬ");
	remain_lemmas.insert ("НАСЕЛЕНИЕ");
	remain_lemmas.insert ("НАСТУПЛЕНИЕ");
	remain_lemmas.insert ("НДС");
	remain_lemmas.insert ("НЕВЕРНЫЙ");
	remain_lemmas.insert ("НЕВОЗМОЖНОСТЬ");
	remain_lemmas.insert ("НЕДВИЖИМОСТЬ");
	remain_lemmas.insert ("НЕДВИЖИМЫЙ");
	remain_lemmas.insert ("НЕДЕЙСТВИТЕЛЬНОСТЬ");
	remain_lemmas.insert ("НЕДЕЙСТВИТЕЛЬНЫЙ");
	remain_lemmas.insert ("НЕДОИМКА");
	remain_lemmas.insert ("НЕЖИЛОЙ");
	remain_lemmas.insert ("НЕЗАКОННЫЙ");
	remain_lemmas.insert ("НЕИСПОЛНЕНИЕ");
	remain_lemmas.insert ("НЕНАДЛЕЖАЩИЙ");
	remain_lemmas.insert ("НЕОБОСНОВАННЫЙ");
	remain_lemmas.insert ("НЕОБХОДИМОСТЬ");
	remain_lemmas.insert ("НЕОСНОВАТЕЛЬНЫЙ");
	remain_lemmas.insert ("НЕПОЛНЫЙ");
	remain_lemmas.insert ("НЕПОСРЕДСТВЕННЫЙ");
	remain_lemmas.insert ("НЕПРАВОМЕРНЫЙ");
	remain_lemmas.insert ("НЕПРИМЕНЕНИЕ");
	remain_lemmas.insert ("НЕСОБЛЮДЕНИЕ");
	remain_lemmas.insert ("НЕСООТВЕТСТВИЕ");
	remain_lemmas.insert ("НЕСОСТОЯТЕЛЬНОСТЬ");
	remain_lemmas.insert ("НЕСОСТОЯТЕЛЬНЫЙ");
	remain_lemmas.insert ("НЕУПЛАТА");
	remain_lemmas.insert ("НЕУСТОЙКА");
	remain_lemmas.insert ("НИЧТОЖНЫЙ");
	remain_lemmas.insert ("НК");
	remain_lemmas.insert ("ОБЛАГАТЬ");
	remain_lemmas.insert ("ОБЛАДАТЬ");
	remain_lemmas.insert ("ОБОРОТ");
	remain_lemmas.insert ("ОБОРУДОВАНИЕ");
	remain_lemmas.insert ("ОБРАЗ");
	remain_lemmas.insert ("ОБРАЩЕНИЕ");
	remain_lemmas.insert ("ОБСЛУЖИВАНИЕ");
	remain_lemmas.insert ("ОБЩЕСТВЕННЫЙ");
	remain_lemmas.insert ("ОБЪЕКТ");
	remain_lemmas.insert ("ОБЪЕМ");
	remain_lemmas.insert ("ОБЫЧНЫЙ");
	remain_lemmas.insert ("ОБЯЗАННОСТЬ");
	remain_lemmas.insert ("ОБЯЗАТЕЛЬНЫЙ");
	remain_lemmas.insert ("ОБЯЗАТЕЛЬСТВО");
	remain_lemmas.insert ("ОГРАНИЧЕНИЕ");
	remain_lemmas.insert ("ОГРАНИЧЕННЫЙ");
	remain_lemmas.insert ("ОГРАНИЧИТЬ");
	remain_lemmas.insert ("ОДНОСТОРОННИЙ");
	remain_lemmas.insert ("ОКАЗАНИЕ");
	remain_lemmas.insert ("ОКАЗЫВАТЬ");
	remain_lemmas.insert ("ОПЕЧАТКА");
	remain_lemmas.insert ("ОПЛАТА");
	remain_lemmas.insert ("ОПЛАТИТЬ");
	remain_lemmas.insert ("ОПЛАЧИВАТЬ");
	remain_lemmas.insert ("ОПРЕДЕЛИТЬ");
	remain_lemmas.insert ("ОСВОБОДИТЬ");
	remain_lemmas.insert ("ОСВОБОЖДАТЬ");
	remain_lemmas.insert ("ОСНОВНОЙ");
	remain_lemmas.insert ("ОТЗЫВ");
	remain_lemmas.insert ("ОТКАЗ");
	remain_lemmas.insert ("ОТМЕТКА");
	remain_lemmas.insert ("ОТСУТСТВИЕ");
	remain_lemmas.insert ("ОТСУТСТВОВАТЬ");
	remain_lemmas.insert ("ОТЧЕТНОСТЬ");
	remain_lemmas.insert ("ОТЧЕТНЫЙ");
	remain_lemmas.insert ("ОФОРМИТЬ");
	remain_lemmas.insert ("ОЦЕНКА");
	remain_lemmas.insert ("ОЧЕРЕДЬ");
	remain_lemmas.insert ("ОШИБОЧНЫЙ");
	remain_lemmas.insert ("ПАСПОРТ");
	remain_lemmas.insert ("ПЕНИ");
	remain_lemmas.insert ("ПЕНСИОННЫЙ");
	remain_lemmas.insert ("ПЕНЯ");
	remain_lemmas.insert ("ПЕРВИЧНЫЙ");
	remain_lemmas.insert ("ПЕРВОЕ");
	remain_lemmas.insert ("ПЕРВОНАЧАЛЬНЫЙ");
	remain_lemmas.insert ("ПЕРЕВОЗКА");
	remain_lemmas.insert ("ПЕРЕДАТЬ");
	remain_lemmas.insert ("ПЕРЕДАЧА");
	remain_lemmas.insert ("ПЕРЕОЦЕНКА");
	remain_lemmas.insert ("ПЕРЕХОД");
	remain_lemmas.insert ("ПЕРЕЧИСЛИТЬ");
	remain_lemmas.insert ("ПЕРИОД");
	remain_lemmas.insert ("ПИСЬМЕННЫЙ");
	remain_lemmas.insert ("ПЛАН");
	remain_lemmas.insert ("ПЛАТА");
	remain_lemmas.insert ("ПЛАТЕЖ");
	remain_lemmas.insert ("ПЛАТЕЖНЫЙ");
	remain_lemmas.insert ("ПЛАТЕЛЬЩИК");
	remain_lemmas.insert ("ПЛОЩАДЬ");
	remain_lemmas.insert ("ПОГАСИТЬ");
	remain_lemmas.insert ("ПОГАШЕНИЕ");
	remain_lemmas.insert ("ПОДАЧА");
	remain_lemmas.insert ("ПОДГОТОВКА");
	remain_lemmas.insert ("ПОДПИСАНИЕ");
	remain_lemmas.insert ("ПОДПИСАТЬ");
	remain_lemmas.insert ("ПОДПИСЬ");
	remain_lemmas.insert ("ПОДРАЗДЕЛЕНИЕ");
	remain_lemmas.insert ("ПОДРЯД");
	remain_lemmas.insert ("ПОДРЯДЧИК");
	remain_lemmas.insert ("ПОДТВЕРДИТЬ");
	remain_lemmas.insert ("ПОДТВЕРЖДАТЬ");
	remain_lemmas.insert ("ПОДТВЕРЖДЕНИЕ");
	remain_lemmas.insert ("ПОЗИЦИЯ");
	remain_lemmas.insert ("ПОКУПАТЕЛЬ");
	remain_lemmas.insert ("ПОЛНОМОЧИЕ");
	remain_lemmas.insert ("ПОЛНОСТЬЮ");
	remain_lemmas.insert ("ПОЛНЫЙ");
	remain_lemmas.insert ("ПОЛЬЗОВАНИЕ");
	remain_lemmas.insert ("ПОМЕЩЕНИЕ");
	remain_lemmas.insert ("ПОРУЧЕНИЕ");
	remain_lemmas.insert ("ПОРЯДОК");
	remain_lemmas.insert ("ПОСТАВИТЬ");
	remain_lemmas.insert ("ПОСТАВКА");
	remain_lemmas.insert ("ПОСТАВЩИК");
	remain_lemmas.insert ("ПОСТОЯННЫЙ");
	remain_lemmas.insert ("ПОТРЕБИТЕЛЬ");
	remain_lemmas.insert ("ПОЧТОВЫЙ");
	remain_lemmas.insert ("ПОШЛИНА");
	remain_lemmas.insert ("ПРАВИТЕЛЬСТВО");
	remain_lemmas.insert ("ПРАВИТЬ");
	remain_lemmas.insert ("ПРАВОПРЕЕМНИК");
	remain_lemmas.insert ("ПРЕДЕЛ");
	remain_lemmas.insert ("ПРЕДПРИНИМАТЕЛЬ");
	remain_lemmas.insert ("ПРЕДПРИНИМАТЕЛЬСКИЙ");
	remain_lemmas.insert ("ПРЕДСТАВИТЕЛЬ");
	remain_lemmas.insert ("ПРЕДУСМОТРЕТЬ");
	remain_lemmas.insert ("ПРЕДЪЯВИТЬ");
	remain_lemmas.insert ("ПРЕДЪЯВЛЕНИЕ");
	remain_lemmas.insert ("ПРЕКРАЩЕНИЕ");
	remain_lemmas.insert ("ПРЕПЯТСТВИЕ");
	remain_lemmas.insert ("ПРЕПЯТСТВОВАТЬ");
	remain_lemmas.insert ("ПРЕТЕНЗИЯ");
	remain_lemmas.insert ("ПРИБЫЛЬ");
	remain_lemmas.insert ("ПРИВЛЕЧЬ");
	remain_lemmas.insert ("ПРИЕМ");
	remain_lemmas.insert ("ПРИЕМКА");
	remain_lemmas.insert ("ПРИЗНАНИЕ");
	remain_lemmas.insert ("ПРИЗНАННЫЙ");
	remain_lemmas.insert ("ПРИЗНАТЬ");
	remain_lemmas.insert ("ПРИНАДЛЕЖАТЬ");
	remain_lemmas.insert ("ПРИНУДИТЕЛЬНЫЙ");
	remain_lemmas.insert ("ПРИНЦИП");
	remain_lemmas.insert ("ПРИОБРЕТЕНИЕ");
	remain_lemmas.insert ("ПРИОСТАНОВЛЕНИЕ");
	remain_lemmas.insert ("ПРИЧИНА");
	remain_lemmas.insert ("ПРИЧИНЕНИЕ");
	remain_lemmas.insert ("ПРОВЕДЕНИЕ");
	remain_lemmas.insert ("ПРОВЕРКА");
	remain_lemmas.insert ("ПРОДАВЕЦ");
	remain_lemmas.insert ("ПРОДАЖА");
	remain_lemmas.insert ("ПРОДУКЦИЯ");
	remain_lemmas.insert ("ПРОЕКТ");
	remain_lemmas.insert ("ПРОИЗВОДСТВО");
	remain_lemmas.insert ("ПРОПУСК");
	remain_lemmas.insert ("ПРОПУСТИТЬ");
	remain_lemmas.insert ("ПРОСРОЧКА");
	remain_lemmas.insert ("ПРОТОКОЛ");
	remain_lemmas.insert ("ПРОЦЕДУРА");
	remain_lemmas.insert ("ПРОЦЕНТ");
	remain_lemmas.insert ("ПРОЦЕСС");
	remain_lemmas.insert ("ПУБЛИЧНЫЙ");
	remain_lemmas.insert ("РАБОТА");
	remain_lemmas.insert ("РАБОТНИК");
	remain_lemmas.insert ("РАБОЧИЙ");
	remain_lemmas.insert ("РАЗБИРАТЕЛЬСТВО");
	remain_lemmas.insert ("РАЗМЕР");
	remain_lemmas.insert ("РАЗМЕЩЕНИЕ");
	remain_lemmas.insert ("РАЗНИЦА");
	remain_lemmas.insert ("РАЗРЕШЕНИЕ");
	remain_lemmas.insert ("РАМКА");
	remain_lemmas.insert ("РАСПРЕДЕЛЕНИЕ");
	remain_lemmas.insert ("РАСТОРЖЕНИЕ");
	remain_lemmas.insert ("РАСХОД");
	remain_lemmas.insert ("РАСЧЕТ");
	remain_lemmas.insert ("РАСЧЕТНЫЙ");
	remain_lemmas.insert ("РЕАЛИЗАЦИЯ");
	remain_lemmas.insert ("РЕАЛИЗОВАТЬ");
	remain_lemmas.insert ("РЕАЛЬНЫЙ");
	remain_lemmas.insert ("РЕГИСТРАЦИОННЫЙ");
	remain_lemmas.insert ("РЕГИСТРАЦИЯ");
	remain_lemmas.insert ("РЕГУЛИРОВАНИЕ");
	remain_lemmas.insert ("РЕЕСТР");
	remain_lemmas.insert ("РЕЖИМ");
	remain_lemmas.insert ("РЕЗУЛЬТАТ");
	remain_lemmas.insert ("РЕМОНТ");
	remain_lemmas.insert ("РУКОВОДИТЕЛЬ");
	remain_lemmas.insert ("САМОУПРАВЛЕНИЕ");
	remain_lemmas.insert ("САНКЦИЯ");
	remain_lemmas.insert ("СБОР");
	remain_lemmas.insert ("СБОРЫ");
	remain_lemmas.insert ("СВЕРКА");
	remain_lemmas.insert ("СВИДЕТЕЛЬСТВО");
	remain_lemmas.insert ("СВОБОДА");
	remain_lemmas.insert ("СДАЧА");
	remain_lemmas.insert ("СДЕЛКА");
	remain_lemmas.insert ("СЛУЧАЙ");
	remain_lemmas.insert ("СОБРАНИЕ");
	remain_lemmas.insert ("СОБСТВЕННИК");
	remain_lemmas.insert ("СОБСТВЕННОСТЬ");
	remain_lemmas.insert ("СОБСТВЕННЫЙ");
	remain_lemmas.insert ("СОВЕРШЕНИЕ");
	remain_lemmas.insert ("СОВМЕСТНЫЙ");
	remain_lemmas.insert ("СОГЛАСОВАНИЕ");
	remain_lemmas.insert ("СОГЛАШЕНИЕ");
	remain_lemmas.insert ("СОДЕРЖАНИЕ");
	remain_lemmas.insert ("СОДЕРЖАТЬ");
	remain_lemmas.insert ("СООРУЖЕНИЕ");
	remain_lemmas.insert ("СОЦИАЛЬНЫЙ");
	remain_lemmas.insert ("СПЕЦИАЛИСТ");
	remain_lemmas.insert ("СПРАВКА");
	remain_lemmas.insert ("СРЕДСТВА");
	remain_lemmas.insert ("СРЕДСТВО");
	remain_lemmas.insert ("СРОК");
	remain_lemmas.insert ("СТАВКА");
	remain_lemmas.insert ("СТАТУС");
	remain_lemmas.insert ("СТОИМОСТЬ");
	remain_lemmas.insert ("СТРАХОВАНИЕ");
	remain_lemmas.insert ("СТРАХОВОЙ");
	remain_lemmas.insert ("СТРОИТЕЛЬНЫЙ");
	remain_lemmas.insert ("СТРОИТЕЛЬСТВО");
	remain_lemmas.insert ("СУЩЕСТВЕННЫЙ");
	remain_lemmas.insert ("СФЕРА");
	remain_lemmas.insert ("СЧЕТ");
	remain_lemmas.insert ("ТАМОЖЕННЫЙ");
	remain_lemmas.insert ("ТАМОЖНЯ");
	remain_lemmas.insert ("ТАРИФ");
	remain_lemmas.insert ("ТЕРРИТОРИЯ");
	remain_lemmas.insert ("ТЕХНИЧЕСКИЙ");
	remain_lemmas.insert ("ТОВАР");
	remain_lemmas.insert ("ТОВАРНЫЙ");
	remain_lemmas.insert ("ТОРГОВЛЯ");
	remain_lemmas.insert ("ТРАНСПОРТ");
	remain_lemmas.insert ("ТРАНСПОРТНЫЙ");
	remain_lemmas.insert ("ТРЕТИЙ");
	remain_lemmas.insert ("ТРЕТЬЕ");
	remain_lemmas.insert ("ТРЕТЬЯ");
	remain_lemmas.insert ("ТРУД");
	remain_lemmas.insert ("ТРУДОВОЙ");
	remain_lemmas.insert ("УБЫТОК");
	remain_lemmas.insert ("УВЕЛИЧЕНИЕ");
	remain_lemmas.insert ("УДОСТОВЕРЕНИЕ");
	remain_lemmas.insert ("УКАЗАНИЕ");
	remain_lemmas.insert ("УМЕНЬШЕНИЕ");
	remain_lemmas.insert ("УМЕНЬШИТЬ");
	remain_lemmas.insert ("УНИТАРНЫЙ");
	remain_lemmas.insert ("УПЛАТА");
	remain_lemmas.insert ("УПЛАТИТЬ");
	remain_lemmas.insert ("УПОЛНОМОЧЕННАЯ");
	remain_lemmas.insert ("УПОЛНОМОЧЕННЫЙ");
	remain_lemmas.insert ("УПОЛНОМОЧИТЬ");
	remain_lemmas.insert ("УПРАВЛЯЮЩИЙ");
	remain_lemmas.insert ("УСЛОВИЕ");
	remain_lemmas.insert ("УСЛУГА");
	remain_lemmas.insert ("УСТАВ");
	remain_lemmas.insert ("УСТАВНОЙ");
	remain_lemmas.insert ("УСТАВНЫЙ");
	remain_lemmas.insert ("УЧАСТНИК");
	remain_lemmas.insert ("УЧАСТОК");
	remain_lemmas.insert ("УЧЕСТЬ");
	remain_lemmas.insert ("УЧЕТ");
	remain_lemmas.insert ("УЧЕТНЫЙ");
	remain_lemmas.insert ("УЧИТЫВАТЬ");
	remain_lemmas.insert ("УЧРЕДИТЕЛЬ");
	remain_lemmas.insert ("УЧРЕДИТЕЛЬНЫЙ");
	remain_lemmas.insert ("УЧРЕЖДЕНИЕ");
	remain_lemmas.insert ("УЩЕРБ");
	remain_lemmas.insert ("ФАКТ");
	remain_lemmas.insert ("ФАКТИЧЕСКИЙ");
	remain_lemmas.insert ("ФАКТУРА");
	remain_lemmas.insert ("ФИЗИЧЕСКИЙ");
	remain_lemmas.insert ("ФИНАНСИРОВАНИЕ");
	remain_lemmas.insert ("ФИНАНСОВЫЙ");
	remain_lemmas.insert ("ФИНАНСЫ");
	remain_lemmas.insert ("ХОДАТАЙСТВО");
	remain_lemmas.insert ("ХОЗЯЙСТВЕННЫЙ");
	remain_lemmas.insert ("ХОЗЯЙСТВО");
	remain_lemmas.insert ("ХРАНЕНИЕ");
	remain_lemmas.insert ("ЦЕНА");
	remain_lemmas.insert ("ЧАС");
	remain_lemmas.insert ("ЧУЖАЯ");
	remain_lemmas.insert ("ЧУЖОЙ");
	remain_lemmas.insert ("ШТРАФ");
	remain_lemmas.insert ("ШТРАФНОЙ");
	remain_lemmas.insert ("ЭКОНОМИЧЕСКИЙ");
	remain_lemmas.insert ("ЭКСПЕРТИЗА");
	remain_lemmas.insert ("ЭКСПЛУАТАЦИЯ");
	remain_lemmas.insert ("ЭКСПОРТ");
	remain_lemmas.insert ("ЭНЕРГИЯ");
	remain_lemmas.insert ("ЯВКА");
#endif

	for (std::set<std::string>::const_iterator it = remain_lemmas.begin (); it != remain_lemmas.end (); it++)
		skip_lemmas.erase (*it);

	if (!two_bases && argc == 7) {
		long year = atol (argv [6]);
		for (int i = 0; i < alldocs->ItemCount; i++) {
			long doc_id_i = (*alldocs)[i];
			DocInfo docinfo;
			aBase->FindDocInfo (doc_id_i, docinfo);
			if (docinfo.FirstDate.da_year == year)
				year_docs.insert (doc_id_i);
		}
		printf ("year %ld docs: %ld\n", year, year_docs.size ());
	}

	bool b_calc = (two_bases && new_docs->ItemCount) || !two_bases;
	int i;
	if (b_calc) {
		for (BTIterator btit (index); !btit.End (); ++btit) {
			const char* key = (const char*)btit.Key ();
			if (key[0] & 0x80)
				break;
			if (skip_lemmas.find (key+1) != skip_lemmas.end ())
				continue;
			Stream *str0 = index->Open (key), *str1 = index->OpenN (key, 1), *str2 = index->OpenN (key, 2);
			char *qqq = strdup (key+1);
			Recoding (cd_win, cd_dos, qqq);
			printf ("%s\r", qqq); fflush (stdout);
			free (qqq);
			if (str0) {
				lemmas.push_back (key+1);

				DBCore::IDataStream_var pos_reader = new DBExt::PositionsReader (str2, -1, DBExt::Def::dt_Text, str1->Length () > 32, 0);
				DBCore::IRefStream_var str_reader = new DBExt::StreamReader (str0, 0);

				DBCore::Ref_ ref = {0,0,0};
				DBCore::ExtrPair extr;

				long docs = 0;

				while (str_reader->get_next (ref, 0)) {
					long id = ref.doc_id, from, to;
					if (alldocs->IndexOf (&id) == -1 || all_docs->IndexOf (&id) == -1)
						continue;

					bool b_part_document = part_documents.find (id) != part_documents.end ();
					if (b_part_document) {
						from = part_documents_from.find (id)->second;
						to = part_documents_to.find (id)->second; 
					}

					DBCore::ULongVector positions;
					pos_reader->get (positions, ref, extr);
					long count_in_doc = 0;
					for (DBCore::ULongVector::const_iterator pos_it = positions.begin (); pos_it != positions.end (); pos_it++) {
						long pos = *pos_it;
						if ((pos & ContextSearch::POS_INVISIBLE_BLOCK) == ContextSearch::POS_INVISIBLE_BLOCK)
							continue;
						if ((pos & ContextSearch::POS_INVISIBLE) == ContextSearch::POS_INVISIBLE)
							continue;
						pos &= ContextSearch::POS_TEXT;
						if (b_part_document && (pos < from || pos >= to))
							continue;
						count_in_doc++;
					}
					docs++;
					std::map<long, lemmacounts_packed>::iterator it = doc_lemmas_counts_packed->find (id);
					if (it == doc_lemmas_counts_packed->end ())
						it = doc_lemmas_counts_packed->insert (std::map<long,lemmacounts_packed>::value_type (id, lemmacounts_packed ())).first;
					u_int64_t put = ((u_int64_t)lemma << 32) + count_in_doc;
					it->second.push_back (put);
				}

				if (docs)
					lemma_in_docs.insert (std::map<long,long>::value_type (lemma, docs));

				index->Close (str2);
				index->Close (str1);
				index->Close (str0);
				
				lemma++;
			}
		}
		printf ("\n");

		for (std::map<long,long>::const_iterator lemma_in_docs_it = lemma_in_docs.begin (); lemma_in_docs_it != lemma_in_docs.end (); lemma_in_docs_it++) {
			if (lemma_in_docs_it->second > 40000) {
				long lemma = lemma_in_docs_it->first;
				std::string lemma_str = lemmas.at (lemma);
				if (remain_lemmas.find (lemma_str) == remain_lemmas.end ()) {
					lemmas_to_skip.insert (lemma);
					printf ("исключаем %s\n", lemma_str.c_str ());
					fflush (stdout);
				}
			}
		}

		for (std::map<long, lemmacounts_packed>::const_iterator doc_lemmas_counts_it = doc_lemmas_counts_packed->begin (); doc_lemmas_counts_it != doc_lemmas_counts_packed->end (); doc_lemmas_counts_it++) {
			long doc_id = doc_lemmas_counts_it->first;
			std::map<long,long>::iterator doc_words_it = doc_words.insert (std::map<long,long>::value_type (doc_id, 0)).first;
			lemmacounts_packed::const_iterator it = doc_lemmas_counts_it->second.begin ();
			if (it != doc_lemmas_counts_it->second.end ()) for (it++; it != doc_lemmas_counts_it->second.end (); it++)
				doc_words_it->second++;
		}

		C = alldocs->ItemCount;
		double log_C_plus_1 = log (C+1.0);
		for (std::map<long,long>::const_iterator doc_words_it = doc_words.begin (); doc_words_it != doc_words.end (); doc_words_it++) {
			long doc_id = doc_words_it->first, plus_w = doc_words_it->second;
			W += plus_w;
		}
		W /= C;
		printf ("W = %ld\n", W);
		W = 380; //Добров

		for (std::map<long,long>::const_iterator lemmas_in_docs_it = lemma_in_docs.begin (); lemmas_in_docs_it != lemma_in_docs.end (); lemmas_in_docs_it++ ) {
			long lemma = lemmas_in_docs_it->first;
			if (lemmas_to_skip.find (lemma) == lemmas_to_skip.end ()) {
				long Cw = lemmas_in_docs_it->second;
				//double idf = log((C+0.5)/Cw)/log_C_plus_1;
				double idf = 1 - 0.16 * log ((double)Cw); //Добров
				lemma_idf.insert (std::map<long,double>::value_type (lemma, idf));
			}
		}
		printf ("idf calculated\n");

		IndexLoader loader (aBase);

		std::map<u_int64_t, long> refs;
		for (i = 0; i < C; i++) {
			long id = (*alldocs)[i];

			long gdi;
			INDEX_DATA (RespRef) doc_i_refs = loader.load <RespRef> (id, IDD_REFS, gdi, true);
			if (doc_i_refs.ptr ()) {
				RespRef* refs_ptr = doc_i_refs.ptr ();
				for (int ref = 0; ref < gdi; ref++, refs_ptr++ ) {
					u_int64_t aref = (((u_int64_t)refs_ptr->DocId) << 32) + refs_ptr->Sub;
					std::map<u_int64_t,long>::iterator it = refs.find (aref);
					if (it==refs.end ())
						refs.insert (std::map<u_int64_t,long>::value_type (aref, 1));
					else
						it->second++;					
				}
			}
		}

		for (i = 0; i < C; i++) {
			long id = (*alldocs)[i];
			if (doc_words.find (id) == doc_words.end ())
				continue;
			long Wi = doc_words.find (id)->second;
			std::map<long, lemmacounts_packed>::const_iterator doc_i = doc_lemmas_counts_packed->find (id);
			double sum = 0.0;
			for (lemmacounts_packed::const_iterator lemmas_in_i = doc_i->second.begin (); lemmas_in_i != doc_i->second.end (); lemmas_in_i++) {
				u_int64_t at_it = *lemmas_in_i;
				long lemma = (long) (at_it >> 32);
				if (lemmas_to_skip.find (lemma) == lemmas_to_skip.end ()) {
					long Nwi = (long)(at_it & 0xffffffff);
					double tf = Nwi / (Nwi + 0.5 + 1.5 * (Wi / W));
					double idf = lemma_idf.find (lemma)->second;
					double tfidf = 0.4+0.6*tf*idf;
					sum += tfidf*tfidf;
				}
			}
			tfidf.insert (std::map<long,double>::value_type (id,sqrt (sum)));

			//прочитать ссылки
			long refs_in_i = 0, gdi;
			INDEX_DATA (RespRef) doc_i_refs = loader.load <RespRef> (id, IDD_REFS, gdi, true);
			std::deque<long> doc_resps_in;
			std::deque<u_int64_t> refs_resps_in;
			if (doc_i_refs.ptr ()) {
				RespRef* refs_ptr = doc_i_refs.ptr ();
				for (int ref = 0; ref < gdi; ref++, refs_ptr++ ) {
					long ref_doc = refs_ptr->DocId;
					if (ref_doc == 12127526 || ref_doc == 3961642 || ref_doc == 10100950)
						continue;
					long ref_sub = refs_ptr->Sub;
					if ( !ref_sub && (ref_doc == 10164072 || ref_doc == 10900200))
						continue;
					u_int64_t aref = (((u_int64_t)ref_doc) << 32) + ref_sub;
					if (refs.find (aref)->second < 10000) {
						refs_in_i++;
						refs_resps_in.push_back (aref);
						doc_resps_in.push_back (ref_doc);
					}
				}
			}

			if (refs_in_i) {
				std::sort (doc_resps_in.begin (), doc_resps_in.end ());
				std::sort (refs_resps_in.begin (), refs_resps_in.end ());
				gd.insert (std::map<long,long>::value_type (id,gdi));
				map_docs_resps->insert (std::map< long,std::deque<long> >::value_type (id, doc_resps_in));
				map_refs_resps->insert (std::map< long,std::deque<u_int64_t> >::value_type (id, refs_resps_in));
			}
		}
		printf ("tfidf calculated\n");
		
	} else {
		printf ("No new docs, skip reading data from indexes\n");
	}

#ifndef	WIN64
	delete aBase;
#endif
	aBase = 0;

	if (two_bases) {
		int threads_count = 1;
		if (argv [4]) {
			threads_count = atol (argv [4]);
			if (threads_count > MAX_THREADS)
				threads_count = MAX_THREADS;
		}

		bool multy_part_work = false;
		long total_parts = 1, from_part = 0, dones = 0;
		if (argc > 6) {
			multy_part_work = true;
			total_parts = atol (argv [5]);
			from_part = atol (argv [6]);
		} else {
			multy_part_work = true;
			total_parts = threads_count;
		}
		long step = new_docs->ItemCount / total_parts, pos = 0, thread_id = 0, from = from_part * step, to = from + threads_count * step;
		if (from_part + threads_count == total_parts) {
			to = new_docs->ItemCount;
			step += total_parts;
		}

		//сначала посчитаем для новых документов
		//long step = new_docs->ItemCount / threads_count, pos = 0, thread_id;
		for (thread_id = 0; thread_id < threads_count; thread_id++) {
			thread_data [thread_id].from = from;
			thread_data [thread_id].to   = to;
			thread_data [thread_id].done = 0;
		}
		for (thread_id = 0, i = from; i < to; i++, pos++) if (pos == step) {
			thread_data [thread_id].to = i;
			thread_data [++thread_id].from = i;
			pos = 0;
		}

		if (b_calc) {
			printf ("Calculate samedocs for new docs\n");
			long ok_threads = 0;
			for (thread_id = 0; thread_id < threads_count; thread_id++) {
				ACE_Thread_Manager* inst = ACE_Thread_Manager::instance ();
				inst->spawn ((ACE_THR_FUNC)calculate_samedocs_new_78, &thread_id, THR_DETACHED);
				ok_threads++;
				ACE_OS::sleep (1);
			}
			for (;;) {
				long id = get_new_doc (false);
				if (id) {
					printf ("threads checked, %ld%%\n", (new_doc_it * 100) / new_docs->ItemCount);
					ACE_OS::sleep (10);
				} else {
					int dones = 0;
					for (thread_id = 0; thread_id < threads_count; thread_id++)
						if (thread_data [thread_id].done)
							dones++;
					if (dones == ok_threads)
						break;
					else
						ACE_OS::sleep (10);
				}
			}
			printf ("\ndelete threads"); fflush (stdout);
		}

		//теперь для старых
		step = old_docs->ItemCount / total_parts, pos = 0, from = from_part * step, to = from + threads_count * step;
		if (from_part + threads_count == total_parts) {
			to = old_docs->ItemCount;
			step += total_parts;
		}
		//step = old_docs->ItemCount / threads_count, pos = 0;

		for (thread_id = 0; thread_id < threads_count; thread_id++) {
			thread_data_2 [thread_id].from = from;
			thread_data_2 [thread_id].to   = to;
			thread_data_2 [thread_id].done = 0;
		}
		for (thread_id = 0, i = from; i < to; i++, pos++) if (pos == step) {
			thread_data_2 [thread_id].to = i;
			thread_data_2 [++thread_id].from = i;
			pos = 0;
		}

		printf ("\nWriting samedocs. Please wait...\n");
		char part_file_name [32], str_to_write [32];
		if (multy_part_work)
			sprintf (part_file_name, "samedocs_%s_part%ld.next_week", argv [1], from_part);
		else
			sprintf (part_file_name, "samedocs_%s.next_week", argv [1]);
		FILE *part_file = mpcxc_fopen (part_file_name, "w" );

		for (thread_id = 0; thread_id < threads_count; thread_id++) {
			for (std::map<long, std::deque<DocRele> >::const_iterator it = thread_data [thread_id].samedocs_map.begin (); it != thread_data [thread_id].samedocs_map.end (); it++) {
				long doc_id_i = it->first, to_put_size = sizeof (DocRele) * it->second.size ();
				if (alldocs->IndexOf (&doc_id_i) == -1 || all_docs->IndexOf (&doc_id_i) == -1)
					continue;
				sprintf (str_to_write, "%ld: ", doc_id_i);
				fputs (str_to_write, part_file);
				bool b_writed = false;
				std::deque<DocRele>::const_iterator same_docs_iter;
				for (same_docs_iter = it->second.begin (); same_docs_iter != it->second.end (); same_docs_iter++) {
					long doc_id_iter = same_docs_iter->DocId;
					if (alldocs->IndexOf (&doc_id_iter) == -1 || all_docs->IndexOf (&doc_id_iter) == -1)
						continue;
					b_writed = true;
					sprintf (str_to_write, "%ld.%ld ", doc_id_iter, same_docs_iter->Rele);
					fputs (str_to_write, part_file);
				}
				if (!b_writed) {
					sprintf (str_to_write, "%ld.%ld ", it->second.begin ()->DocId, it->second.begin ()->Rele);
					fputs (str_to_write, part_file);
				}
				sprintf (str_to_write, "\n");
				fputs (str_to_write, part_file);
			}
		}

		fclose (part_file);
	} else {
		int threads_count = 1;
		if (argv [3]) {
			threads_count = atol (argv [3]);
			if (threads_count > MAX_THREADS)
				threads_count = MAX_THREADS;
		}

		bool multy_part_work = false;
		long total_parts = 1, from_part = 0;
		if (argc > 5) {
			multy_part_work = true;
			total_parts = atol (argv [4]);
			from_part = atol (argv [5]);
		}

		long step = alldocs->ItemCount / total_parts, pos = 0, thread_id = 0, from = from_part * step, to = from + threads_count * step;
		for (thread_id = 0; thread_id < threads_count; thread_id++) {
			thread_data [thread_id].from = from;
			thread_data [thread_id].to   = to;
			thread_data [thread_id].done = 0;
		}
		for (thread_id = 0, i = from; i < to; i++, pos++)
			if (pos == step) {
				thread_data [thread_id].to = i;
				thread_data [++thread_id].from = i;
				pos = 0;
			}
		for (thread_id = 0; thread_id < threads_count; thread_id++) {
			ACE_Thread_Manager* inst = ACE_Thread_Manager::instance ();
			inst->spawn ((ACE_THR_FUNC)calculate_samedocs, &thread_id, THR_DETACHED);
			ACE_OS::sleep (1);
		}
		int dones; do {
			dones = 0;
			for (thread_id = 0; thread_id < threads_count; thread_id++)
				dones += thread_data [thread_id].done;
			ACE_OS::sleep (5);
		} while (dones < threads_count);
		printf ("\nWriting samedocs. Please wait...\n");
		if (aBase)
			delete aBase;
		FILE *part_file;
		char str_to_write [32];
		if (multy_part_work) {
			char part_file_name [32];
			sprintf (part_file_name, "samedocs_%s_%ld.part", argv [1], from_part);
			part_file = mpcxc_fopen (part_file_name, "w" );
			aBase = 0;
		} else {
			aBase = new StdBigBase (argv [2], ACE_OS_O_RDWR);
		}
		for (thread_id = 0; thread_id < threads_count; thread_id++) {
			for (std::map<long, std::deque<DocRele> >::const_iterator it = thread_data [thread_id].samedocs_map.begin (); it != thread_data [thread_id].samedocs_map.end (); it++) {
				long doc_id_i = it->first;
				if (multy_part_work) {
					sprintf (str_to_write, "%ld: ", doc_id_i);
					fputs (str_to_write, part_file);
					for (std::deque<DocRele>::const_iterator same_docs_iter = it->second.begin (); same_docs_iter != it->second.end (); same_docs_iter++) {
						sprintf (str_to_write, "%ld.%ld ", same_docs_iter->DocId, same_docs_iter->Rele);
						fputs (str_to_write, part_file);
					}
					sprintf (str_to_write, "\n");
					fputs (str_to_write, part_file);
				} else {
					long to_put_size = sizeof (DocRele) * it->second.size ();
					DocRele *to_put = (DocRele*) malloc (to_put_size), *to_put_ptr = to_put;
					printf ("same docs for %ld: ", doc_id_i);
					for (std::deque<DocRele>::const_iterator same_docs_iter = it->second.begin (); same_docs_iter != it->second.end (); same_docs_iter++, to_put_ptr++) {
						to_put_ptr->DocId = same_docs_iter->DocId;
						to_put_ptr->Rele  = same_docs_iter->Rele;
						printf ("%ld ",same_docs_iter->DocId);
					}
					printf ("\n"); fflush (stdout);
					aBase->ReplaceAttr (doc_id_i, IDD_SAMEDOCS, to_put, to_put_size);
					free (to_put);
				}
			}
		}
		if (multy_part_work)
			fclose (part_file);
	}

#ifndef	WIN64
	if (old_base)
		delete old_base;
	if (aBase)
		delete aBase;
#endif

	return 0;
}

int MemoryError ( )
{
	printf ( "Memory error" );
	exit (EXIT_FAILURE);
	return 0;
}

void cdecl OkBox ( char *s1, char *s2, ... )
{
	printf ( "OkBox:\n%s\n%s", s1, s2 );
	exit (EXIT_FAILURE);

}

void cdecl OkBox ( const char *s1, const char *s2, ... )
{
	printf ( "OkBox:\n%s\n%s", s1, s2 );
	exit (EXIT_FAILURE);
}
