<HTML>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=WIN1251">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title> Описать программную архитектуру </title>
<link rel="stylesheet" href="../../css/project.css" type="text/css">
</head>
<body>

<h2 class="banner"><a name="Top"></a><a name="XE_use_case__analysis"></a>Активность: Описать программную архитектуру</h2>
<div align="center"><center>

<table border="1" width="85%" cellspacing="0" cellpadding="2">
  <tr>
    <td colspan="2" valign="top" bordercolor="#808080"><small><strong><font face="Arial">Цель</font></strong></small>
    <ul>
      <li>Выбрать архитектуру системы.</li>
      <li>Создать документ Программная архитектура.</li>
    </ul>
    </td>
  </tr>
  <tr>
    <td width="255" height="25" valign="top" bordercolor="#808080"><small><font face="Arial"><strong>Входные артефакты:</strong></font></small>
    <ul>
      <li><a href="../../artifacts/environment/pa_design.htm">Инструкция проектирования</a></li>
      <li><a href="../../artifacts/analysisndesign/pa_desmod.htm">Проектная модель</a></li>
      <li><a href="../../artifacts/requirements/pa_supspec.htm">Дополнительные спецификации</a></li>
    </ul>
    </td>
    <td width="255" height="25" valign="top" bordercolor="#808080"><small><font face="Arial"><strong>Результирующие артефакты:</strong></font></small>
    <ul>
      <li><a href="../../artifacts/analysisndesign/pa_sad.htm">Шаблон и Документ Программная Архитектура</a></li>
    </ul>
    </td>
  </tr>
  <tr>
    <td width="510" valign="top" colspan="2" style="text-indent: 4px" bordercolor="#808080"><small><strong><font face="Arial">Роль:
    </font></strong></small><a href="../../workers/wk_archi.htm"><font size="3">Архитектор</font></a></td>
  </tr>
</table>
</center></div>

<h3><a name="Create template">Создать шаблон документа</a> <a href="#Top"><img src="../../images/top.gif" border="0" alt="To Top of Page" width="26" height="20"></a></h3>
Как только подготовлена <a href="../../artifacts/environment/pa_design.htm">Инструкция проектирования</a>
и в ней описаны основные принципы формирования и структуризации <a href="../../artifacts/analysisndesign/pa_desmod.htm">Проектной модели</a>,
создается шаблон Документа Программная Архитектура, представляющий собой автоматизированный скрипт-шаблон
Rational SoDA
<p>
При использовании SoDA, из шаблона будет формироваться сам документ Программная Архитектура.
<p>
Шаблон должен быть разработан таким образом, чтобы соблюсти основной принцип &quot;4+1&quot;, который
подразумевает, что Архитектура состоит из четырех проектных частей:
<ul>
<li>Модель прецедентов</li>	
<li>Логическая модель</li>	
<li>Модель процессов</li>	
<li>Модель распределения</li>	
</ul>
и одной реализующей:
<ul>
<li>Модель реализации</li>	
</ul>
Шаблон должен быть составлен таким образом, чтобы окончательный документ помогал сотрудникам понять проектные решения, содержал 
описание проектных решений и служил своеобразным справочником по модели проекта, выполненной в 
Rational Rose. Документ Программная Архитектура фиксирует наиболее важные концептуальные проектные решения.

<h3><a name="View patterns">Рассмотреть шаблонные решения</a> <a href="#Top"><img src="../../images/top.gif" border="0" alt="To Top of Page" width="26" height="20"></a></h3>
<p>Перед тем, как зафиксировать архитектуру, проводятся работы по рассмотрению возможных вариантов из числа уже 
существующих решений. В ходе рассмотрения обычно выявляется наиболее подходящий вариант, который берется за основу,
в дальнейшем производится его постепенное преобразование под нужды проекта, в ходе которых возможно появление доработок
для шаблонного решения. В этом случае, шаблонное решение отдельно сохраняется в целях дальнейшего вторичного 
использования.
<p><a href="../../artifacts/requirements/pa_supspec.htm">Дополнительные спецификации</a> могут содержать
ограничения на принимаемое решение по выбору архитектуры.
<p>Шаблонные решения могут быть как <b>архитектурными паттернами</b>, так и <b>архитектурными механизмами</b>, и <b>framework</b>ами.
<p>Шаблонные решения не включают специфичных для проекта решений, они универсальные, и это их отличительная черта.

<h3>Проработать отдельные вопросы</h3>
<h4>Управление памятью</h4>
<p>При проектировании архитектуры системы, необходимо опираясь на эту архитектуру, выработать стратегию управления памятью. 
Так, если используется распределенная архитектура, то для каждого распределенного интерфейса, который используется 
клиентом на сервере, существует объект (сервант), который реализует функциональность этого интерфейса. 
При этом клиент не знает, как устроена реализация и не может в общем случае управлять ее временем жизни. Поэтому 
в модели должен быть показан механизм, который позволяет управлять временем жизни таких объектов.
<p>В общем случае нельзя привести общие правила управления памятью, т.к. они достаточно сильно зависят от конечного 
языка реализации. Так существуют языки программирования, в которых память возвращается системе автоматически после 
прекращения ее использования, в других языках таких механизмов нет.
<h4>Распределение ПО</h4>
<p>В силу того, что система проектируется с учетом клиент-серверной архитектуры, выделяются две части: 
клиентскую  и серверную (при необходимости также можно выделить отдельно сервер баз данных). При этом в общем 
случае серверная часть может быть рассосредоточена в сети и не функционировать на одиночном компьютере. 
Она может быть представлена в виде набора сервисов, которые обеспечивают необходимую функциональность работы проектируемой 
системы.
<p>Стратегия распределения программного обеспечения должна базироваться на требованиях, предъявляемых к проектируемой системе. 
Благодаря CORBA-архитектуре, распределение сервисов по компьютерам прозрачно для клиентской части проектируемой системы. 
Это позволяет на более поздних этапах, таких как нагрузочное тестирование, более точно определить наиболее 
благоприятную конфигурацию распределения ПО.
<p>Распределение ПО должно быть описано в представлении развертывания модели системы
<h4>Вторично-используемые компоненты</h4>
<p>В ходе проектирования системы могут быть использованы компоненты, которые поставляют другие производители 
или которые были разработаны в ходе проектирования других систем. Если используется компоненты, которые 
поставляются внешними производителями (как правило, это библиотеки), то такие компоненты должны быть оформлены 
в модели, как отдельные пакеты и они должны находится в корневом уровне логического представления системы. 
Если используются компоненты, которые были разработаны при проектировании предыдущих систем (как правило, это подсистемы), 
то они должны быть расположены также в логическом представлении, но в соответствующем архитектурном слое. 
Ответственность за "перенос" таких компонент в другую проектируемую систему возлагается на архитектора 
(впоследствии с выделением таких вторично-используемых компонент необходимо создать репозитарий для их сохранения, 
в котором каждая подсистема будет представлена в виде отдельного cat-файла, содержащего эту подсистему).
<p>Также к вторично используемым компонентам можно отнести дополнительные сервисы, расширяющие функциональность 
брокера объектных запросов (ORB). Описание таких сервисов доступно на сайте OMG (www.omg.org)

<h3><a name="Create document">Создать и подготовить документ Программная архитектура к обзору</a> <a href="#Top"><img src="../../images/top.gif" border="0" alt="To Top of Page" width="26" height="20"></a></h3>
Документ Программная архитектура создается на основе созданного шаблона и Модели проекта в Rational Rose
путем автоматической генерации отчета. По окончании генерации, документ доводится до приемлемого вида (исправляются 
ошибки генерации). При необходимости, вносятся изменения в шаблон и/или модель проекта.
<p>
<h3><a name="Create document">Провести обзор</a> <a href="#Top"><img src="../../images/top.gif" border="0" alt="To Top of Page" width="26" height="20"></a></h3>
Обзор Документа Программная Архитектура проводится не менее 1 раза в полгода, и по настоянию Архитектора.
Ответственность за организацию обзоров лежит на Менеджере проекта.
<br>
<p><font face="Arial"><a href="../../copyrite/copyrite.htm"><small><small>Copyright&nbsp;
© 1987 - 2002 Отдел информационных технологий</small></small></a></font>
<!--msnavigation--></td><td valign="top" width="24"></td><td valign="top" width="1%">
<p><a href="../../index.htm"></a></p>
<script language="JavaScript">
<!--
function loadTop()
{
  if(parent.frames.length!=0 && parent.frames[1].name=="ory_toc")
  {
     alert("The Rational Unified Process is already displayed using frames");
  }
  else
  {
    if(window.name=="ory_doc")
    {
      window.name = "xyz1234";
    }
    var expires = new Date();
    expires.setTime (expires.getTime() + (1000 * 20));
    document.cookie = "rup_ory_doc=" + escape (document.URL) +
    "; expires=" + expires.toUTCString() +  "; path=/";

    var new_ory_doc_loc = null;

    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href;
         break;
       }
    }

    if(new_ory_doc_loc!=null)
    {
       top.location = new_ory_doc_loc;
    }
   }
}
// -->
</script>
<script language="JavaScript">
<!--
  function getImageUrl(image)
  {
    var new_ory_doc_loc=null;
    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href.substring(0,document.links[i].href.lastIndexOf("/"));
         new_ory_doc_loc = new_ory_doc_loc + "" + image;
         return new_ory_doc_loc;
       }
    }
    return null;
  }
// -->
</script>
<script
language="JavaScript">
<!--
MSFPhover =
(((navigator.appName == "Netscape") &&
  (parseInt(navigator.appVersion) >= 3 )) ||
  ((navigator.appName == "Microsoft Internet Explorer") &&
  (parseInt(navigator.appVersion) >= 4 )));

  function MSFPpreload(img)
  {
     var a=new Image();
     a.src=img;
     return a;
  }
// -->
</script>
<script language="JavaScript">
<!--
    if(MSFPhover)
    {
        RupGray=MSFPpreload(getImageUrl('/images/rup1.gif'));
        RupBlue=MSFPpreload(getImageUrl('/images/rup1_a.gif'));
    }
// -->
</script>
<a href="JavaScript:loadTop();" onmouseover="if(MSFPhover) document['Home'].src=RupBlue.src; self.status='Display Rational Unified Process using frames'; return true" onmouseout="if(MSFPhover) document['Home'].src=RupGray.src; self.status= ' ';return true"></body>

</html>
