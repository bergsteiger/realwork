<HTML>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=WIN1251">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title> Провести анализ прецедента </title>
<link rel="stylesheet" href="../../css/project.css" type="text/css">
</head>
<body>

<h2 class="banner"><a name="Top"></a><a name="XE_use_case__analysis"></a>Активность: Провести анализ прецедента</h2>
<div align="center"><center>

<table border="1" width="85%" cellspacing="0" cellpadding="2">
  <tr>
    <td colspan="2" valign="top" bordercolor="#808080"><small><strong><font face="Arial">Цель</font></strong></small>
    <ul>
      <li>Выделить классы, реализующие поток событий прецедента.</li>
      <li>Распределить поведение прецедентов по классам.</li>
      <li>Определить ответственности, атрибуты и связи классов.</li>
      <li>Описать применение архитектурных механизмов</li>
    </ul>
    </td>
  </tr>
  <tr>
    <td colspan="2" height="35" valign="top" bordercolor="#808080"><small><strong><font face="Arial">Шаги</font></strong></small>
    <ul>
      <li><a href="#Supplement the use-case descriptions">Дополнить описания прецедентов</a></li>
      <li><a href="#Realizations">Создать реализации прецедентов</a></li>
      <li>Для каждого прецедента
        <ul>
          <li><a href="#Find Classes from Use-Case Behavior">Исходя из поведения прецедента,
выделить классы анализа.</a></li>
          <li><a href="#Distribute behavior to analysis classes">Распределить поведение по классам анализа</a></li>
        </ul>
      </li>
      <li>Для каждого класса анализа
        <ul>
          <li><a href="#Describe responsibilities">Определить ответственности</a></li>
          <li><a href="#Describe attributes and associations">Описать атрибуты и связи</a></li>
          <li><a href="#Define Attributes">Задать атрибуты</a></li>
          <li><a href="#Establish associations between analysis classes">Установить взаимосвязи
между классами анализа</a></li>
        </ul>
      </li>
      <li><a href="#Evaluate the results">Оценить результаты Анализа прецедента</a></li>
    </ul>
    </td>
  </tr>
  <tr>
    <td width="255" height="25" valign="top" bordercolor="#808080"><small><font face="Arial"><strong>
Входные артефакты:</strong></font></small>
    <ul>
      <li><a href="../../artifacts/requirements/pa_supspec.htm">Дополнительные спецификации</a></li>
      <li><a href="../../artifacts/requirements/pa_ucmod.htm">Модель прецедентов</a></li>
      <li><a href="../../artifacts/requirements/pa_ucspec.htm">Спецификация прецедента</a></li>
      <li><a href="../../artifacts/requirements/pa_ucstbd.htm">Раскадровки прецедентов</a></li>
      <li><a href="../../artifacts/requirements/pa_bdcl.htm">Граничные классы</a>, представляющие окна в пользовательском интерфейсе </li>
      <li><a href="../../artifacts/environment/pa_design.htm">Инструкция проектирования</a></li>
    </ul>
    </td>
    <td width="255" height="25" valign="top" bordercolor="#808080"><small><font face="Arial"><strong>Результирующие артефакты:</strong></font></small>
    <ul>
      <li><a href="../../artifacts/analysisndesign/pa_anmod.htm">Модель анализа</a> и представленные на ней классы анализа</li>
    </ul>
    </td>
  </tr>
  <tr>
    <td width="510" valign="top" colspan="2" style="text-indent: 4px" bordercolor="#808080"><small><strong><font face="Arial">Роль:
    </font></strong></small><a href="../../workers/wk_dsgnr.htm"><font size="3">Проектировщик</font></a></td>
  </tr>
</table>
</center></div>

<h3><a name="Supplement the use-case descriptions">Дополнить описание прецедента</a> <a href="#Top"><img src="../../images/top.gif" border="0" alt="To Top of Page" width="26" height="20"></a></h3>
<div align="center"><center>

<table width="85%" border="1" cellspacing="0" cellpadding="2" style="border: 1px solid rgb(128,128,128)">
  <tr>
    <td height="1" valign="top" bordercolor="#808080"><small><strong><font face="Arial">Цель</font></strong></small>
    <ul>
      <li>Понять требуемое внутреннее поведение системы, которое может быть опущено в описании 
прецедента.</li>
    </ul>
    </td>
  </tr>
</table>
</center></div>

<p>Не всегда достаточно описания прецедента для выделения классов анализа и их объектов. 
Обычно с точки зрения пользователя не важно, что происходит внутри системы, и такая информация 
опускается. Для нахождения объектов, которые выполняют прецедент, необходимо полное 
понимание системы с внутренних позиций.

<p>Проверьте, что внутреннее описание прецедента четко, однозначно. Не стоит выделять 
объекты - только действия.</p>

<p>Есть следующие альтернативы для выполнения этой работы:
<ul>
  <li><strong>Не описывать все</strong>. В случае если вы считаете диаграммы взаимодействия 
самодостаточными или Поток событий хорошо проработан.</li>
  <li><strong>Доработать существующий поток</strong>. Добавить необходимые сведения 
там где текст не ясен.</li>
</ul>


<h3><a name="Realizations">Создать реализации прецедентов</a> <a href="#Top"><img src="../../images/top.gif" border="0" alt="To Top of Page" width="26" height="20"></a></h3>
<p>Перед началом построения модели анализа необходимо построить &quot;каркас&quot; реализации прецедентов. 
Для построения такого каркаса, в пакете ответственном за представление реализации прецедентов, необходимо 
создать элементы модели - классы со стереотипом &quot;use-case realization&quot;. Каждый такой элемент 
должен быть связан отношением реализации с соответствующим прецедентом. Отношение 
реализации должно быть показано на основной диаграмме пакета, содержащего элементы модели со стереотипом 
реализации прецедента. Имя реализации прецедента должно соответствовать имени прецедента, который он реализует.
<p>Реализации прецедентов располагаются в рамках Логического представления
модели и показываются связанными с соответствующими прецедентами отношением реализации на диаграммах
прецедентов. 
<img src="../images/ucrealz.gif">
<p>Таким образом, организуется переход от модели прецедентов, которая располагается в прецедентном представлении 
системы к реализации этих прецедентов, которые в свою очередь располагается в логическом представлении системы. 

<h3><a name="Find Classes from Use-Case Behavior">Найти классы анализа в поведении системы</a> <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<div align="center"><center>

<table border="1" width="85%" cellspacing="0" cellpadding="2" style="border: 1px solid rgb(128,128,128)">
  <tr>
    <td width="510" valign="top" bordercolor="#808080"><small><strong><font face="Arial">Цель</font></strong></small>
    <ul>
      <li>Определить набор элементов модели, которые выполнят поведение, описанное прецедентом.</li>
    </ul>
    </td>
  </tr>
</table>
</center></div>
<p>Идентификация классов подразумевает их определение, именование и краткое описание в одно-два предложения.
<p>Классы анализа бывают: граничными, контроллерами и сущностями. Граничные классы выделяются на раскадровках 
прецедентов, классы-сущности по сути являют собой сохраняемые объекты, классы-контроллеры управляют сущностями,
генерируя необходимые сообщения для обеспечения выполнения прецедента.
<p>Выявление классов анализа должно производится по спецификации прецедента и в результате исследования 
диаграмм прецедентов. В общем случае процесс выделения и детализации классов анализа должен происходить итеративно: 
в начале выделяются классы без спецификации их ответственностей, а затем на каждой новой итерации происходит 
уточнение и согласование таких классов между собой, т.е. появляются ответственности и строятся (обновляются) 
диаграммы последовательности.
<p>Процесс работы с разными прецедентами может быть распараллелен, т.е. при необходимости несколько человек могут 
работать с разными прецедентами. Для этого менеджер проекта должен закрепить конкретные прецеденты за 
аналитиками (например, пользуясь группировкой прецедентов по функциональности). 
В рамках одного прецедента работа может вестись только последовательно.

<h4>Сущности</h4>
<p>Как правило, к сущностям относятся объекты проектируемой системы, 
которые могут сохранять и восстанавливать свои данные, т.е. обладают механизмом сериализации [serialize]. 
При этом сущности не имеют ответственностей, отвечающих за бизнес-поведение проектируемой системы.
<p>На этапе анализа не стоит без необходимости детализировать и дробить сущности на более мелкие составляющие. 
Необходимо лишь выявить круг ответственности каждой из сущностей и убедиться в том, что этот набор 
действительно семантически однороден (т.е. не противоречит описанию и смыслу, заложенному в сущность). 
Позже, на этапе проектирования, каждая из сущностей должна быть необходимым образом детализирована 
для реализации заложенной в нее функциональности.
<p>Есть смысл проводить анализ предметной области (т.е. выявление сущностей) в два этапа. 
На первом этапе рекомендуется выявить лишь основные сущности и построить граф их взаимодействия и 
подчиненности, при этом построение диаграмм последовательности не происходит.
<p>На втором этапе, по полученным от дизайнера граничным классам стоит провести уточнение, а возможно и 
детализацию модели сущностей, до полного удовлетворения нужд граничных классов или контроллеров. 
Также на этом этапе возможно уточнение и коррекция граничных классов и сущностей, для получения 
общей непротиворечивой объектной модели как внутри системы, так и с точки зрения пользователей. 
Для этого необходимо построить диаграммы последовательности и проконтролировать динамику реализации прецедента.

<h4>Контроллеры</h4>
Внутренняя архитектура системы строится по своим законам (исходя из удобства хранения или других 
специфических принципов) и часто просто не в состоянии точно соответствовать внешнему представлению 
проектируемой системы. Как правило, многие пользовательские функции охватывают одновременно 
целый спектр сущностей и взаимодействий между ними, поэтому для разрешения подобного рода коллизий и 
организации сложной функциональности (обладающей внутренней логикой взаимодействия сущностей) вводятся контроллеры. 
По своей сути контроллеры являются &quot;обертками&quot; вокруг сущности, которые могут менять логику взаимодействия 
с ней (сущности отвечают за сохранение данных и логику сохранения таких данных, а контроллеры 
добавляют бизнес-логику при работе с такими данными).
<p>Контроллеры не могут содержать какие-либо сохраняемые [persistence] данные, 
они могут только управлять потоком таких данных, поэтому ответственности, отвечающие за бизнес-поведение 
проектируемой системы, должны быть только у них.

<h4>Пример</h4>
<p>Рассмотрим пример построения модели анализа для прецедента и его реализации, описывающего 
поведение проектируемой системы при запросе пользователя - &quot;Показать документ, без служебных комментариев&quot;.
<p>Для такого прецедента мы можем выделить три класса анализа: граничный класс <i>Окно показа документа</i> 
(визуальный объект проектируемой системы, участвующий в прецеденте), сущность <i>Документ</i> 
(объект проектируемой системы, обладающий свойством сохраняемости) и контроллер 
<i>Контроллер документа</i> (объект проектируемой системы, реализующий бизнес-логику, 
связанную с поведением прецедента). Для каждого из таких классов выделим ответственности и построим диаграмму 
последовательности, которая показывает динамику поведения прецедента.
<img src="../images/seqexam.gif">
<p>Следует отметить, что для этого примера ответственность <i>Спрятать комментарии в документе</i> была 
вынесена на контроллер <i>Контроллер документа</i>, т.к. она не связана с хранением сущности <i>Документ</i>, 
а представляет собой бизнес-операцию, проводимую над сущностью.


<h3><a name="Distribute behavior to analysis classes">Распределить поведение по классам анализа</a> <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<div align="center"><center>

<table border="1" width="85%" cellspacing="0" cellpadding="2" style="border: 1px solid rgb(128,128,128)">
  <tr>
    <td height="1" valign="top" bordercolor="#808080"><small><strong><font face="Arial">Цель</font></strong></small>
    <ul>
      <li><font size="3">Описать поведение прецедента в терминах взаимодействия классов анализа.</font></li>
      <li><font size="3">Определить ответственности классов анализа.</font></li>
    </ul>
    </td>
  </tr>
</table>
</center></div>

<p>Для каждого отдельного подпотока:
<ul>
  <li><strong>Создайте одну или более диаграмм взаимодействия (последовательности)</strong>. Для основного потока
и каждого альтернативного создается своя диаграмма последовательности и связывается с реализацией 
прецедента. Как правило, количество диаграмм зависит от сложности реализации прецедента. Если 
реализация прецедента достаточно сложна (т.е. диаграмма последовательности слишком большая и 
достаточно сложна для восприятия), то необходимо разбить такую диаграмму на несколько (например, 
пользуясь правилом - одна диаграмма последовательности описывает только одну операцию, производимую пользователем).</li>
  <li><strong>Определить классы анализа</strong>, ответственные за требуемое поведение, шагая 
по потоку событий.</li>
  <li><strong>Проиллюстрировать взаимодействие между классами анализа в диаграмме взаимодействия.</strong>
Диаграмма должна также показывать взаимодействие системы и актеров, начинаться с того, что актер 
запускает прецедент. Актеры могут взаимодействовать только с <i>граничными классами</i>, которые, в свою очередь, 
уже взаимодействуют с другими классами анализа. Для классов <i>сущностей</i> есть ограничение - они 
не могут инициировать действия, а для классов <i>контроллеров</i> - они не могут 
определять сохраняемых [persistence] данных</li>
</ul>
<p>Раскадровки прецедентов и спецификации прецедентов содержат важнейшую информацию для проведения этих работ.
<p>Следует отметить, что каждая реализация прецедента всегда связана с одним граничным классом, 
который является точкой входа в прецедент. Прецеденты могут взаимодействовать с друг другом 
только через граничные классы. При этом разрешается, чтобы граничный класс мог напрямую обратиться 
к граничному классу из другого прецедента или к граничному классу, находящемуся в том же прецеденте.

<h3><a name="Describe responsibilities">Опишите ответственности</a> <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<div align="center"><center>

<table border="1" width="85%" cellspacing="0" cellpadding="2" style="border: 1px solid rgb(128,128,128)">
  <tr>
    <td height="1" valign="top" bordercolor="#808080"><small><strong><font face="Arial">Цель</font></strong></small>
    <ul>
      <li><font size="3">Описать ответственности класса объектов, выделенных из описания поведения прецедента.</font></li>
    </ul>
    </td>
  </tr>
</table>
</center></div>

<p>Ответственность - это утверждение, что объект обеспечивает некоторый ответ по запросу. Ответственности при проектировании преобразуются в одну или чаще несколько операций класса и могут быть
охарактеризованы как:
<ul>
  <li>Действия, производимые объектом.</li>
  <li>Знания, которые объект поддерживает и обеспечивает для функционирования других объектов.</li>
</ul>
<p>Каждый класс анализа имеет несколько ответственностей; классы с одной ответственностью, вероятно, слишком упрощены,
в то же время классы с большим списком ответственностей - потенциальные претенденты на разделение.

<h4>Нахождение ответственностей</h4>
<p>Ответственности наследуются от сообщений на диаграммах взаимодействия. Для каждого сообщения, проверьте 
класс объектов, к которому оно посылается. Если ответственность еще не назначена, создайте новую ответственность, 
обеспечивающую требуемое поведение.</p>
<p>Часть ответственностей идет от нефункциональных требований. Когда создается новая ответственность, 
проверьте все нефункциональные требования, относящиеся к ней. Возможно, необходимо изменить формулировку ответственности или
создать новую ответственность в связи с нефункциональным требованием.</p>

<h4>Опишите ответственности</h4>
<p>Для каждой ответственности определите название и дайте описание в нескольких словах  о том, что объект делает для
выполнения ответственности и какой результат выдается при вызове ответственности.
<p>В связи с тем, что имена ответственностей для класса анализа могут задаваться произвольным образом, 
и это впоследствии может сказаться на переходе от модели проектирования к модели реализации, необходимо задавать 
имена ответственностей, начиная их с двойного символа косой черты ("//") (или другого символа комментария 
для языка проектирования).

<h3><a name="Describe attributes and associations"></a><a name="XE_attribute_on_object__describing">Опишите атрибуты и связи</a> <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<div align="center"><center>

<table border="1" width="85%" cellspacing="0" cellpadding="2" style="border: 1px solid rgb(128,128,128)">
  <tr>
    <td height="1" valign="top" bordercolor="#808080"><small><strong><font face="Arial">Цель</font></strong></small>
    <ul>
      <li>Задать классы, от которых зависит данный класс анализа</li>
      <li>Описать события в других классах, о которых должен знать данный класс</li>
      <li>Задать информация, за поддержку которой ответственен класс анализа</li>
    </ul>
    </td>
  </tr>
</table>
</center></div>

<p>Классы чато зависят друг от друга для того, чтобы обеспечить необходимое поведение. Ассоцияции закрепляют
межклассовые связи и помогают понять стыковку между собой. Лучшее понимание связанности классов и где возможно, 
уменьшение связанности поможет строить лучшие, более жизнестойкие системы.

<h3><a name="Define Attributes">Задать атрибуты</a><a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>Атрибуты используются для хранения информации.
<p>Если информация имеет сложную структуру, поделена между несколькими объектами, или передается по ссылке 
между двумя или более объектами, информация должны быть смоделирована как отдельный класс.</p>
<p>Имя атрибута должно быть существительным и ясно указывать, что за информацию хранит атрибут.</p>
<p>Описание атрибута должно описывать, какую информацию хранить в атрибуте, но оно не приводится, если имя атрибута 
четко описывает это.</p>
<p>Каждому атрибуту должен быть указан его тип.</p>

<h3><a name="Establish associations between analysis classes">Указать связи между классами анализа</a> <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>Для отображения связей между классами анализа используют диаграммы взаимодействия (диаграммы последовательностей и кооперации).
Диаграммы последовательностей создаются для каждого специфицированного потока прецедента.
<p>На диаграмме взаимодействия ссылки показывают, что объекты взаимодействуют друг с другом в ходе выполнения
прецедента. Связи могут быть установлены в следующих случаях:
<ul>
  <li>Объект может иметь глобальное значение, и любой объект системы может послать ему сообщение</li>
  <li>Один объект может быть передан второму как параметр, а тот может посылать сообщения переданному объекту</li>
  <li>Объект может иметь постоянную связь с другим ообектом, которому он посылает сообщения.</li>
  <li>Объект может быть создан или уничтожен в ходе операции (временный объект) - такие объекты называются локальными
для операции.</li>
</ul>
<p>На анализе создаются ассоциации и агрегации, чтобы показать передачу любых сообщений, пересылаемых между классами.
(Агрегация, как специальная форма ассоциации, показывает, что объект участвует в связи часть-целое). Такие отношения показывают на диаграммах классов. 
При проектировании будут уточнены эти связи. Дайте имена ролям в ассоциации и покажите отношение множественности. 
<ul>
  <li>Роль должна быть существительным, показывающим чем выступает класс в связи.</li>
</ul>

<h3>Сохранить в системе конфигурационного контроля</h3>
<p>В качестве инструмента по диагностике модели системы должен быть использован продукт Rational Rose, 
который позволяет проверить модель на противоречия и логическую целостность. Для этого используется 
операция <i>Check Model</i> [Проверить модель].
<p>Если в ходе выполнения проверки модели обнаружены ошибки, то они должны быть исправлены. 
В общем случае можно сказать, что модель всегда должна находиться в непротиворечивом состоянии, 
поэтому НЕ РАЗРЕШАЕТСЯ производить сохранение модели в системе конфигурационного контроля, 
если в ней содержаться ошибки. В таких случаях они должны быть исправлены, 
и только после этого изменения могут быть сохранены.
<p>Модель всегда должна проверяться на содержащиеся в ней ошибки перед проведением 
операции <i>commit</i> и помещаться в CVS в логически непротиворечивом состоянии.

<h3><a name="Evaluate the results">Оценить результаты</a> анализа прецедента<a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<div align="center"><center>

<table border="1" width="85%" cellspacing="0" cellpadding="2" style="border: 1px solid rgb(128,128,128)">
  <tr>
    <td height="1" valign="top" bordercolor="#808080"><small><strong><font face="Arial">Цель</font></strong></small>
    <ul>
      <li>Удостовериться, что объекты анализа соответствуют функциональным требованиям системы.</li>
      <li>Проверить, что объекты анализа и взаимосвязи приемлемы</li>
    </ul>
    </td>
  </tr>
</table>
</center></div>
Обзор анализа прецедента осуществляется согласно <a href="ac_rvdes.htm">Активности: Провести обзор анализа/проектирования</a>
<br>
<p><font face="Arial"><a href="../../copyrite/copyrite.htm"><small><small>Copyright&nbsp;
© 1987 - 2002 Отдел информационных технологий</small></small></a></font>
<!--msnavigation--></td><td valign="top" width="24"></td><td valign="top" width="1%">
<p><a href="../../index.htm"></a></p>
<script language="JavaScript">
<!--
function loadTop()
{
  if(parent.frames.length!=0 && parent.frames[1].name=="ory_toc")
  {
     alert("The Rational Unified Process is already displayed using frames");
  }
  else
  {
    if(window.name=="ory_doc")
    {
      window.name = "xyz1234";
    }
    var expires = new Date();
    expires.setTime (expires.getTime() + (1000 * 20));
    document.cookie = "rup_ory_doc=" + escape (document.URL) +
    "; expires=" + expires.toUTCString() +  "; path=/";

    var new_ory_doc_loc = null;

    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href;
         break;
       }
    }

    if(new_ory_doc_loc!=null)
    {
       top.location = new_ory_doc_loc;
    }
   }
}
// -->
</script>
<script language="JavaScript">
<!--
  function getImageUrl(image)
  {
    var new_ory_doc_loc=null;
    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href.substring(0,document.links[i].href.lastIndexOf("/"));
         new_ory_doc_loc = new_ory_doc_loc + "" + image;
         return new_ory_doc_loc;
       }
    }
    return null;
  }
// -->
</script>
<script
language="JavaScript">
<!--
MSFPhover =
(((navigator.appName == "Netscape") &&
  (parseInt(navigator.appVersion) >= 3 )) ||
  ((navigator.appName == "Microsoft Internet Explorer") &&
  (parseInt(navigator.appVersion) >= 4 )));

  function MSFPpreload(img)
  {
     var a=new Image();
     a.src=img;
     return a;
  }
// -->
</script>
<script language="JavaScript">
<!--
    if(MSFPhover)
    {
        RupGray=MSFPpreload(getImageUrl('/images/rup1.gif'));
        RupBlue=MSFPpreload(getImageUrl('/images/rup1_a.gif'));
    }
// -->
</script>
<a href="JavaScript:loadTop();" onmouseover="if(MSFPhover) document['Home'].src=RupBlue.src; self.status='Display Rational Unified Process using frames'; return true" onmouseout="if(MSFPhover) document['Home'].src=RupGray.src; self.status= ' ';return true"></body>

</html>
