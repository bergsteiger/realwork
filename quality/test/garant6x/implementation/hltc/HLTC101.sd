////////////////////////////////////////////////////////////////////////////////
/////////////////////// HLTC101: Настройка тулбаров ////////////////////////////
////////////////////////////////////////////////////////////////////////////////

uses States, common, RunPrograms, SettingsWork, MenuWork, FoldersWork, DocumentWork, Clicks,
  ListWork;

////////////////////////////////////HLTC101_2_1_2////////////////////////////////////////////
//////////////////// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ ///////////////////////////////////
////////////////////////////////////////////////////////////////////////////////







const
  TB_SET_ICON = 'Значок';
  TB_SET_TEXT_AND_ICON = 'Текст и значок';
{
  TYPE: Общие
  DESC: Ф-ция считывает в результирующий массив список с "теущими операциями" для конкретного тулбара и соответствующие
    значение "значёк\текст и значёк" для каждой операции(кнопки на тулбаре) из формы настроек тулбара.
  RESULT: 
    массив вида: [ 
      (['Основное меню, 'текст и значёк']),
      (['Назад, 'текст и значёк']),
      (['Вперёд, 'значёк']),
      .................
    ]    
    
  REMARK: Все элементы "-Разделитель-" отбрасываются 
}    
function GetListOperationsFromTbSetting : OleVariant;
var
  tree, radioBtnIcon;
  currentNode;
  previousNode;
  subResult;  
  i; 
begin
try
  tree := GetFromTbSettings('СПИСОК "ТЕКУЩИЕ ОПЕРАЦИИ"');
  if NOT IsExists(tree) then Raise('Дерево СПИСОК "ТЕКУЩИЕ ОПЕРАЦИИ" не существует!');
  radioBtnIcon := GetFromTbSettings('РАДИОКНОПКА "ЗНАЧОК"');
  if NOT IsExists(radioBtnIcon) then Raise('РАДИОКНОПКА "ЗНАЧОК" не существует!'); 
  
  
  tree.SetFocus;
  Sys.Keys('[Home][Home]');
  result := CreateVariantArray(0,0);
  subResult := CreateVariantArray(0,1); 
  i := 0;    
  repeat
    currentNode := common.GetWindowText(tree.handle);
    if ( currentNode <> '- Разделитель -' ) then
    begin 
      VarArrayRedim(result, i);
      subResult[0] := currentNode;
      if radioBtnIcon.Checked then subResult[1] := TB_SET_ICON else subResult[1] := TB_SET_TEXT_AND_ICON;          
      result[i] := subResult;
      inc(i);
    end;      
    Sys.Keys('[Down]');
    previousNode := currentNode;
    currentNode := common.GetWindowText(tree.handle);
  until (previousNode = currentNode);
    
except
  Log.Message('GetListOperationsFromTbSetting: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := nil; 
  CommonExceptionHandler;  
end;
end;

{
  TYPE: Общие
  DESC: Ф-ция заполняет считываеи в массив список "текущих операций" для соответствующего тулбара
  из настройки панелей инструментов
  RESULT: массив вида 
  REMARK: 
}    
function SetArrayFromTbSetting(
  listCurrentOperations : OleVariant //объект "СПИСОК "ТЕКУЩИЕ НАСТРОЙКИ"
): OleVariant;
begin
try
  if NOT IsExists(listCurrentOperations) then Raise('Переданный тулбар не существует');
  result := GetElementsFromTree (listCurrentOperations);  
except
  Log.Message('SetArrayFromTbSetting: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION')); 
  CommonExceptionHandler;  
end;
end;


{
  TYPE: Общие
  DESC: Перетаскивает тулбар в то место, куда задано и проверяет, перетащился ли он.
  RESULT: 
  REMARK: 
}         
function DragToolbar(
  var toolBar : OleVariant;
  targetZone  : OleVariant;
  const where : String;
  const dx : integer = 0; 
  const dy : integer = 0; 
  const dragPointX : integer = 5;
  const dragPointY : integer = 5
) : boolean;
var
  x1, y1 : integer;
  x2, y2 : integer; 
  tbClass, tbCaption, tbName;
  tbParent;
  dockedName;
begin
try
  if NOT IsExists(toolBar) then Raise('Переданный ТУЛБАР не удалось обнаружить!');
  if NOT IsExists(targetZone) then Raise('Не удалось получить объект targetZone');
  x1 := dragPointX; 
  y1 := dragPointY; // таскаем тулбар за точку с этими координатами (относительно левого верхнего угла) 
  tbClass := toolBar.WndClass; // запоминаем класс, чтобы потом его если что найти
  tbCaption := toolBar.WndCaption; // аналогично с Caption
  tbName := toolBar.Name; // аналогично с Name
  tbParent := GetParentObject(toolBar);//.ParentObject;
  common.ClientToScreen(toolBar, x1, y1);
  case where of // определяем, а куда собственно надо его утащить
  	'left' :
    begin
			x2 := targetZone.ScreenLeft;
		  y2 := targetZone.ScreenTop  + targetZone.Height div 3;
	  end;
    'right' :
    begin
			x2 := targetZone.ScreenLeft + targetZone.Width - 1;
		  y2 := targetZone.ScreenTop  + targetZone.Height div 3;
	  end;    
    'down' : 
    begin
			x2 := targetZone.ScreenLeft + targetZone.Width div 2;
		  y2 := targetZone.ScreenTop  + targetZone.Height - 1;
	  end;
    'up' : 
    begin
			x2 := targetZone.ScreenLeft + targetZone.Width div 2;
		  y2 := targetZone.ScreenTop - 1;
	  end;
  else
      Raise('Переданный параметр where не распознан!');
  end;//case where of
  
  x2 := x2 + dx; y2 := y2 + dy;
  if NOT DragExt(nil, x1, y1, x2 - x1, y2 - y1, '', 30) then 
    Raise('Не удалось перетянуть ТУЛБАР при помощи DragExt');//перетаскиваем Тулбар

  // теперь проверяем, перетащился ли ТУЛБАР туда куда надо и что он не отклеился
  //Проверяем по старому пути
  toolBar := FindWindowByPath(tbParent, 'NAME:=' + tbName + ';WNDCLASS:=' + tbClass + ';WNDCAPTION:=' + tbCaption, false);
  if NOT IsExists(toolBar) then
  begin
    //Если тулбар поменял свой путь, тогда ищем его от процесса
    toolBar := FindWindowByPath(GetF1ShellProcess, 'WNDCLASS:='+tbClass+';WNDCAPTION:='+ tbCaption+';VISIBLE:=true;MAXDEPTH:=20', false);
    //toolBar := FindWindow(GetF1ShellProcess, tbClass, tbCaption);
    if NOT IsExists(toolBar) then Raise('Не удалось обнаружить ТУЛБАР (даже пытались искать от процесса)');
  end;
  if NOT IsExists(targetZone) then Raise('Не удалось обнаружить targetZone');
  // проверяем, что он приклеился (соответствующие координаты и размеры совпадают)
  try
    dockedName := toolBar.DockedTo.Name;
  except
    dockedName := '';
  end;
  case where of 
  	'left' :    
      if NOT ( (abs((toolBar.ScreenLeft + toolBar.Width) - targetZone.ScreenLeft) <= 3)  AND 
               (dockedName = 'LeftDock') )then
        Raise('ТУЛБАР <' + toolBar.Name + '> после перетаскивания в зону LEFT не прилеплен либо его координаты не эталонны');
    'right' :
    	if NOT ( (abs(toolBar.ScreenLeft - (targetZone.ScreenLeft + targetZone.Width)) <= 5) AND //В 6_5 стало проверяться, что <=2, т.к. добавился промежуточный контрол, шириной 1 пиксел 
               (dockedName = 'RightDock') ) then
        Raise('ТУЛБАР <' + toolBar.Name + '> после перетаскивания в зону RIGHT не прилеплен либо его координаты не эталонны');
    'down' :
      if NOT ( (abs(toolBar.ScreenTop - (targetZone.ScreenTop + targetZone.Height)) <= 1) AND
               (dockedName = 'BottomDock') ) then
        Raise('ТУЛБАР <' + toolBar.Name + '> после перетаскивания в зону DOWN не прилеплен либо его координаты не эталонны');    
    'up' :
      if NOT  {(toolBar.STop + toolBar.Height = targetZone.STop) AND} (dockedName = 'TopDock')  then
        Raise('ТУЛБАР <' + toolBar.Name + '> после перетаскивания в зону UP не прилеплен либо его координаты не эталонны');
  end;//case where of
  result := true;
except
  Log.Message('DragToolbar: ' + ExceptionMessage, '',  pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;  
end;

// Возвращает значение в битах (16 - для полноцветной).
// Чисто локальная функция.
function GetIconColorDepth( 
  targetRegion : OleVariant = nil
) : integer;
const
  ICON_COLOR_16 = '16_color_icon.bmp';
  ICON_COLOR_256 = '256_color_icon.bmp';
  ICON_COLOR_FULL = 'full_color_icon.bmp';
var
  x, y;
begin
try 
  if targetRegion = nil then
  begin  
    OpenTasksPanel;
    targetRegion := GetFromTasksPanel('ДЕРЕВО "ПУТЕВОДИТЕЛЬ"');    
   end; 
  
  if NOT IsExists(targetRegion) then Raise('Не удалось открыть ПанельЗадач, что бы считать с неё цветность иконки "Документы на котроле"'); 
   
  if  FindPicture(targetRegion, ICON_COLOR_16, x, y) then Result := 4 
  else if FindPicture(targetRegion, ICON_COLOR_256, x, y) then Result := 8
  else if FindPicture(targetRegion, ICON_COLOR_FULL, x, y) then Result := 16
  else result := -1;
  CloseTasksPanel;
except
  CloseTasksPanel;
  result := -1;
  
end;  
end;

// возвращает текущую глубину цвета в битах или -1 если не определилась.
function GetColorDepth : integer;	
var 
  DesktopDC, BitsPerPixel: OleVariant; 
begin
   DesktopDC    := GetDC(0);
   BitsPerPixel := GetDeviceCaps(DesktopDC, BITSPIXEL);
   ReleaseDC(0, DesktopDC);
   result := BitsPerPixel;
end;

// тащит тулбар куда сказано и говорит, задочился ли он там.
function _______DragToolbar(
  var toolBar : OleVariant;
  targetZone : OleVariant;
  const where : String;
  const dx : integer = 0;
  const dy : integer = 0;
  const dragPointX : integer = 5;
  const dragPointY : integer = 5
) : boolean;
var
   x, y : integer;
   strToolBar, strTargetZone, tbClass, tbCaption : String;
   p : OleVariant;
begin
try
	p := Sys.Process('F1Shell');
	Result := false;
  x := dragPointX; y := dragPointY; // таскаем тулбар за точку с этими координатами (относительно левого верхнего угла) 
  strToolBar := GetObjectPath(toolBar, false, true);
  tbClass := toolBar.WndClass; // запоминаем класс, чтобы потом его если что найти
  tbCaption := toolBar.WndCaption; // аналогично с названием
  strTargetZone := GetObjectPath(targetZone, false, true); // запоминаем, чтобы потом обновлять объект
  toolBar := GetWindow(p, strToolBar); 
  targetZone := GetWindow(p, strTargetZone);
  common.ClientToScreen(toolBar, x, y);
  Sys.Desktop.MouseDown(VK_LBUTTON, x, y); // начинаем тащить
  case where of // определяем, а куда собственно надо его утащить
  	'left' : begin
			x := targetZone.ScreenLeft;
		  y := targetZone.ScreenTop  + targetZone.Height div 2;
	  end;
    'right' : begin
			x := targetZone.ScreenLeft + targetZone.Width - 1;
		  y := targetZone.ScreenTop  + targetZone.Height div 2;
	  end;
    'up' : begin
			x := targetZone.ScreenLeft + targetZone.Width div 2;
		  y := targetZone.ScreenTop - 1;
	  end;
    'down' : begin
			x := targetZone.ScreenLeft + targetZone.Width div 2;
		  y := targetZone.ScreenTop + targetZone.Height - 1;
	  end;  
    'center' : begin
		  x := targetZone.ScreenLeft + targetZone.Width div 2;
		  y := targetZone.ScreenTop + targetZone.Height div 2;
	  end;  
  end;
  x := x + dx; y := y + dy;
  Sys.Desktop.MouseUp(VK_LBUTTON, x, y); // отпускаем
  // теперь проверяем, притащился ли туда куда надо
  	// проверяем, что он не отклеился


  toolBar := GetWindow(p, strToolBar); 
  if NOT IsWindowExists(toolBar) then // мы его нашли?
  begin // нет, мы его потеряли :-(
    toolBar := FindWindowByPath(GetF1ShellProcess, 'WNDCLASS:='+tbClass+';WNDCAPTION:='+ tbCaption+';MAXDEPTH:=50', false);
  	//toolBar := FindWindow(Sys.Process('F1Shell') , tbClass, tbCaption); // ищем его
    if NOT toolBar.Exists then
     	Exit; // совсем пропал
  end;
  	
  targetZone := GetWindow(p, strTargetZone);
  case where of // проверяем, что он приклеился (соответствующие координаты и размеры совпадают)
  	'left' : 
    	Result := ( toolBar.ScreenLeft + toolBar.Width = targetZone.ScreenLeft ) AND ( toolBar.ScreenTop = targetZone.ScreenTop );
    'right' : 
    	Result := ( toolBar.ScreenLeft = targetZone.ScreenLeft + targetZone.Width ) AND ( toolBar.ScreenTop = targetZone.ScreenTop );
    'up' :
      Result := ( toolBar.ScreenLeft = targetZone.ScreenLeft ) AND ( toolBar.ScreenTop + toolBar.Height = targetZone.ScreenTop );
    'down' :
      Result := ( toolBar.ScreenLeft = targetZone.ScreenLeft ) AND ( toolBar.ScreenTop = targetZone.ScreenTop + targetZone.Height );
    else
    	Result := false; // center не проверяем
  end;
  Delay(0);
except

  result := false;
end;  
end;

// координаты даются экранные
procedure DragByMouse(const srcWnd : OleVariant; srcX, srcY, dstX, dstY : integer);
begin
	common.ScreenToClient(srcWnd, srcX, srcY);
  common.ScreenToClient(srcWnd, dstX, dstY);
	srcWnd.Drag(srcX, srcY, dstX - srcX, dstY - srcY);
end;

// Возвращает индекс элемента в массиве. 
function GetElementIndex(const arr, value : OleVariant;
												 const startPos : integer = 0; // откуда начинаем искать
                         const indexFromZero : boolean = false // true - возвращаем индекс элемента от начала массива (нумерация с 0)
                         ) : integer;
	var i : integer;
begin
	Result := -1;
	for i := VarArrayLowBound(arr,1) + startPos to VarArrayHighBound(arr,1) do
  	if ( VarType(arr[i]) <> varEmpty ) then
    	if ( arr[i] = value ) then
      begin
      	Result := i;
        if indexFromZero then
        	Result := Result - VarArrayLowBound(arr,1);
        break;
      end;
end;


////////////////////////////////////////////////////////////////////////////////
/////////////////////////// СКРИПТЫ ////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
{
HLTC101: Настройка тулбаров
	HLTC101.1: Изменение положения тулбаров
		HLTC101.1.1: Проверить, что есть возможность перетаскивать тулбары с одной
    зоны докинга (область, которым может «приклеиваться панель инструментов \ 
    тулбар») в другую, но в пределах одной области (например, тулбар для документов
    можно прикреплять только в области отображения документа).
}
function HLTC101_1_1_Execute(var  current_state: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;
  PREF = 'HLTC101_1_1';  
var 
	toolBar, targetZone : OleVariant;
  count;  
begin
try  
  count := 5;
  RestartF1Shell(count, Options.Run.Timeout div 6, PREF, PREF);
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  if NOT SetDefaultToolBarSettings then 
    Log.Warning('Не удалось установить настройки Тулбара по умолчанию');
  if NOT UnlockToolbars then Raise('Не удалось разлочить ТУЛБАР');
  // теперь начинаем таскать тулбар
  targetZone := GetFromEditor('ЗАКЛАДКИ');
  if NOT IsExists(targetZone) then Raise('Не удалось получить ЗАКЛАДКИ');  
  toolBar := GetFromEditor('ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');
  if NOT isExists(toolBar) then Raise('Не удалось получить ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');
  if NOT DragToolbar(toolBar, targetZone,  'down') then
  begin
    Log.Error('Не удалось корректно перетащить тулбар в зону Докинга: ВНИЗ');
    Raise;
  end;
  if NOT IsExists(toolBar) then
    toolBar := GetFromEditor('ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');    
  targetZone := GetFromFolderForm('ДЕРЕВО ПАПОК', OpenMyDocTab);
  if NOT IsExists(targetZone) then Raise('Не удалось получить ДЕРЕВО ПАПОК');
  if DragToolbar(toolBar, targetZone,  'left') then
  begin
    Log.Error('Тулбар "Текст документа" переместился в зону Докинга Моих документов: ВЛЕВО, хотя категорически не должен был');
    Raise;
  end;
  if DragToolbar(toolBar, targetZone,  'up') then
  begin
    Log.Error('Тулбар "Текст документа" переместился в зону Докинга Моих документов: ВВЕРХ, хотя категорически не должен был');
    Raise;
  end;  
  result := true;  
  CloseF1Shell;
except
  Log.Message('HLTC101_1_1_Execute: ' + ExceptionMessage, '',  pmNormal, GetLogAttr('EXCEPTION'));
  CloseF1Shell;
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC101: Настройка тулбаров
	HLTC101.1: Изменение положения тулбаров
		HLTC101.1.2: Проверить, что на формах есть несколько зон докинга (область,
    которым может «приклеиваться панель инструментов»):
			HLTC101.1.2.1: В основной области (документ, список, ППР, ППС,ОМ, Словарь)
      – 4 области (справа, слева, вверху. внизу)
}
function HLTC101_1_2_1_Execute(var  current_state: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;
  PREF = 'HLTC101_1_2_1';   
var 
  obj; 
  toolBar;
  targetZoneLeft, targetZoneRight, targetZoneTop, targetZoneBot ;
  targetZone;
  i, j;  
  str;
  dx;
  dy;
  strIdTargetZone;
  formFromContextSearch;
  LIST_PATH;
  count;
begin
try
  count := 5;
  RestartF1Shell(count, Options.Run.Timeout div 6, PREF, PREF);
  LIST_PATH := LIST_MAIN;
  if NOT SetDefaultToolBarSettings then 
    Log.Warning('Не удалось установить настройки Тулбара по умолчанию');
      
  obj := GoToMainMenu('', true);  
  if NOT IsExists(obj) then Raise('Не удалось получить ОБЛАСТЬ ОСНОВНОГО МЕНЮ'); 
  for i := 1 to 6 do 
  begin  
    case i of      
      1: begin//ОМ
           targetZoneLeft := GetFromNavigator('ЗАКЛАДКИ ЛЕВОГО НАВИГАТОРА');
           targetZoneRight := obj;
           targetZoneTop   := GetFromMainWindow('ОБЛАСТЬ ОСНОВНОГО МЕНЮ');
           targetZoneBot   := obj;
           strIdTargetZone := 'ОМ';
         end;
      2: begin//Документ
           if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');           
           CloseContextSearchForm;//Если открыта форма контекстного поиска- тогда закрываем её
           targetZoneLeft := GetFromNavigator('ЗАКЛАДКИ ЛЕВОГО НАВИГАТОРА');
           targetZoneRight := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
           targetZoneTop   := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
           targetZoneBot   := GetFromEditor('ЗАКЛАДКИ');
           strIdTargetZone := 'Документ';
         end;
      3: begin//Список
           if NOT OpenObjectFromFolder(LIST_PATH, OpenMenuTab) then 
             Raise('Не удалось открыть объект из Моих документов');
           targetZoneLeft := GetFromNavigator('ЗАКЛАДКИ ЛЕВОГО НАВИГАТОРА');
           targetZoneRight := GetFromList('СПИСОК ДОКУМЕНТОВ');
           targetZoneTop   := GetFromList('СПИСОК ДОКУМЕНТОВ');
           targetZoneBot   := GetFromList('ЗАКЛАДКИ');
           strIdTargetZone := 'Список'; 
         end;  
      4: begin//ППР
           if NOT GoToPPR then Raise('Не удалось открыть ППР');
           targetZoneLeft := GetFromNavigator('ЗАКЛАДКИ ЛЕВОГО НАВИГАТОРА');
           targetZoneRight := GetFromPPR('КАРТОЧКА ЗАПРОСА');
           targetZoneTop   := GetFromPPR('ВЕРХНЯЯ ФОРМА НАЗВАНИЯ КЗ');
           targetZoneBot   := GetFromPPR('НИЖНИЙ ТУЛБАР КАРТОЧКИ ЗАПРОСА');
           strIdTargetZone := 'ППР';
         end;
      5: begin//ППС
           if NOT GoToPPS then Raise('Не удалось открыть ППC');
           targetZoneLeft := GetFromNavigator('ЗАКЛАДКИ ЛЕВОГО НАВИГАТОРА');
           targetZoneRight := GetFromPPS('ВЫБРАННЫЕ СИТУАЦИИ');
           targetZoneTop   := GetFromPPS('ВЕРХНЯЯ ФОРМА НАЗВАНИЯ КЗ');
           targetZoneBot   := GetFromPPS('НИЖНИЙ ТУЛБАР');
           strIdTargetZone := 'ППС';
         end; 
      6: begin//Словарь
           if NOT GoToDictionary then Raise('Не удалось перейти в ТС');
           targetZoneLeft := GetFromNavigator('ЗАКЛАДКИ ЛЕВОГО НАВИГАТОРА');
           targetZoneRight := GetFromDictionary('ТЕКСТ СТАТЬИ');
           targetZoneTop   := GetFromDictionary('ВЕРХНЯЯ ФОРМА НАЗВАНИЯ');
           targetZoneBot   := GetFromDictionary('ТУЛБАР ВЫБОРА ЯЗЫКА ТЕРМИНА');
           strIdTargetZone := 'Словарь';          
         end;  
    end;//case      
    
    if NOT IsExists(targetZoneLeft)  then Raise('Не удалось обнаружить "targetZoneLeft" для: '  + strIdTargetZone);
    if NOT IsExists(targetZoneRight) then Raise('Не удалось обнаружить "targetZoneRight" для: ' + strIdTargetZone);
    if NOT IsExists(targetZoneTop)   then Raise('Не удалось обнаружить "targetZoneTop" для: '   + strIdTargetZone);
    if NOT IsExists(targetZoneBot)   then Raise('Не удалось обнаружить "targetZoneBot" для: '   + strIdTargetZone);
            
    if i = 1 then
      if NOT UnlockToolbars then Raise('Не удалось разлочить ТУЛБАР');
    // тащим тулбар
     
    for j := 1 to 4 do
    begin
      toolBar := GetFromMainWindow('ТУЛБАР');
      if NOT IsExists(toolBar) then Raise('Не удалось получить ТУЛБАР');  
      case j of 
        1: begin  str := 'left';  targetZone := targetZoneLeft;  end;
        2: begin  str := 'right'; targetZone := targetZoneRight; end;
        3: begin  str := 'down';  targetZone := targetZoneBot;   end;
        4: begin  str := 'up';    targetZone := targetZoneTop;   end;
      end;//case       
      
      //заточка для ППС
      {if ( i = 5 ) AND ( j = 1 ) then  dx := -1 else dx:= 0;            
      if ( i = 5 ) AND ( j = 4 ) then  dy := -2 else dy:= 0;}
      //Тащим
      Indicator.Hide; 
      if NOT DragToolbar(toolBar, targetZone,  str, dx, dy) then
      begin
        Log.Error('Не удалось корректно перетащить тулбар в зону Докинга', str);
        Raise;
      end;
      
    end;//for j := 1 to 4
    // делаем как было
    if NOT SetDefaultToolBarSettings then 
      Log.Warning('Не удалось установить настройки Тулбара по умолчанию');
  end;//for
  Indicator.Show;  
  if NOT UnlockToolbars(false) then Raise('Не удалось залочить ТУЛБАР');  
  result := true;  
  CloseF1Shell;
except
  Log.Message('HLTC101_1_2_1_Execute: ' + ExceptionMessage, '',  pmNormal, GetLogAttr('EXCEPTION'));
  CloseF1Shell;
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC101: Настройка тулбаров
	HLTC101.1: Изменение положения тулбаров
		HLTC101.1.2: Проверить, что на формах есть несколько зон докинга (область,
    которым может «приклеиваться панель инструментов»):
			HLTC101.1.2.2: В области навигатора (на вкладке «Мои документы») -2 
      (сверху и снизу)
}
function HLTC101_1_2_2_Execute(var  current_state: OleVariant): OleVariant;
const
  PREF = 'HLTC101_1_2_2'; 
var 
  obj; 
  toolBar;
  targetZone;
  i;  
  str;
  count; 
begin
try
  count := 5;
  RestartF1Shell(count, Options.Run.Timeout div 6, PREF, PREF);
  obj := OpenMyDocTab;  
  toolBar := GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', obj);
  if NOT IsExists(toolBar) then Raise('Не удалось получить вкладку ТУЛБАР "МОИ ДОКУМЕНТЫ"');
  if NOT ClickToolBarButton(toolBar, 'Свойства', 'SetToState:=released') then
    Raise('Не удалось отжать кнопку');
    
  targetZone := GetFromFolderForm('ДЕРЕВО ПАПОК', obj);
  if NOT IsExists(targetZone) then Raise('Не удалось получить ДЕРЕВО ПАПОК');
  if NOT UnlockToolbars then Raise('Не удалось разлочить ТУЛБАРЫ');
  // тащим тулбар
  //Проверяем, что можно задочить сверху, снизу, слева и справа
  for i := 1 to 4 do
  begin  
    case i of
      1: str := 'down';
      2: str := 'up';
      3: str := 'left';
      4: str := 'right';
    end;  
      
    toolBar := GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', obj);
    if NOT IsExists(toolBar) then Raise('Не удалось получить вкладку ТУЛБАР "МОИ ДОКУМЕНТЫ"');
 
    if NOT DragToolbar(toolBar, targetZone, str) then
    begin
      Log.Error('Не удалось корректно перетащить тулбар в зону Докинга', str);
      Raise;
    end;    
  end;//for
  // делаем как было
  if NOT SetDefaultToolBarSettings then
    Log.Warning('Не удалось установить настройки Тулбара по умолчанию');
  if NOT UnlockToolbars(false) then Raise('Не удалось залочить ТУЛБАР');  
  result := true;
  CloseF1Shell; 
except
  Log.Message('HLTC101_1_2_2_Execute: ' + ExceptionMessage, '',  pmNormal, GetLogAttr('EXCEPTION'));
  CloseF1Shell;
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC101: Настройка тулбаров
	HLTC101.1: Изменение положения тулбаров
		HLTC101.1.2: Проверить, что на формах есть несколько зон докинга (область,
    которым может «приклеиваться панель инструментов»):
    	HLTC101.1.2.3: В модальных окнах (контекстный поиск, редактирование
      конфигурации) - 1 (только снизу)
}
function HLTC101_1_2_3_Execute(var  current_state: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;
  PREF = 'HLTC101_1_2_3'; 
var 
  obj; 
  toolBar;
  targetZone;
  parent;
  j;  
  str;   
  tbClass, tbName, tbCaption;
  count;
begin
try
    count := 5;
    RestartF1Shell(count, Options.Run.Timeout div 6, PREF, PREF);
    SetDefaultSettings;
    if NOT UnlockToolbars then Raise('Не удалось разлочить ТУЛБАРЫ');
    parent := GoToSettings;
    targetZone := parent.WorkFrame;
    if NOT IsExists(targetZone) then Raise('Не удалось получить ФОРМА "НАСТРОЙКИ"');
    toolBar := GetFromSettings('НИЖНИЙ ТУЛБАР');
    if NOT IsExists(targetZone) then Raise('Не удалось получить НИЖНИЙ ТУЛБАР панели настроек конфигурации');       
        
    tbClass := toolBar.WndClass; 
    tbCaption := toolBar.WndCaption;
    tbName := toolBar.Name;
      
    //Проверяем, что можно задочить снизу, сверху, слева, справа
    for j := 1 to 4 do
    begin
      case j of 
        1: str := 'up';
        2: str := 'right';
        3: str := 'left';
        4: str := 'down';
      end;
      if j <> 1 then
      begin 
        toolBar := FindWindowByPath(GetF1ShellProcess, 'WNDCLASS:='+tbClass+';WNDCAPTION:='+ tbCaption+';MAXDEPTH:=15', false);
        if NOT IsExists(toolBar) then Raise('Не удалось найти Нижний тулбар от процесса');
      end;
   
      if NOT DragToolbar(toolBar, targetZone, str) then
      begin
        Log.Error('Не удалось корректно перетащить тулбар в зону Докинга', str);
        Raise('Не удалось корректно перетащить тулбар в зону Докинга');
      end;
      
    end;//for
    
    //parent.Click(parent.Width -10, 10);
    Sys.Keys('[Esc]');    
  
  // делаем как было
  if NOT SetDefaultSettings then
    Log.Warning('Не удалось установить настройки Тулбара по умолчанию');
  if NOT UnlockToolbars(false) then Raise('Не удалось залочить ТУЛБАР');  
  result := true;  
  CloseF1Shell;
except
  Log.Message('HLTC101_1_2_3_Execute: ' + ExceptionMessage, '',  pmNormal, GetLogAttr('EXCEPTION'));
  Sys.Keys('[Esc]');
  CloseF1Shell;
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC101: Настройка тулбаров
	HLTC101.1: Изменение положения тулбаров
		HLTC101.1.2: Проверить, что на формах есть несколько зон докинга (область,
    которым может «приклеиваться панель инструментов»):
    	HLTC101.1.2.4: В дополнительной области (справка, атрибуты, СКР, синхронный
      просмотр, английское толкование в словаре,) – 1 (сверху.
}
function HLTC101_1_2_4_Execute(var  current_state: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;
  PREF = 'HLTC101_1_2_4';   
var 
  obj; 
  toolBar;
  targetZoneLeft, targetZoneRight, targetZoneTop, targetZoneBot ;
  targetZone;
  i, j;  
  str;
  tbClass;
  tbCaption;
  tbNameInLog;
  LIST_PATH;
  count;
begin
try
  count := 5;
  RestartF1Shell(count, Options.Run.Timeout div 6, PREF, PREF);
  LIST_PATH := LIST_MAIN;
  if NOT GoToMainMenu then Raise('Не удалось перейти в ОМ');
  if NOT UnlockToolbars then Raise('Не удалось разлочить ТУЛБАРЫ');
  
  for i := 1 to 5 do  
  begin
    case i of
      1: begin//СКР
           if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');           
           obj := OpenInDocument('ССЫЛКИ НА ДОКУМЕНТ');
           targetZoneLeft  := obj;
           targetZoneRight := obj;
           targetZoneTop   := obj;           
           targetZoneBot   := obj; 
         end;

      2: begin//атрибуты      
           if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');           
           obj := OpenInDocument('ИНФОРМАЦИЯ О ДОКУМЕНТЕ');
           targetZoneLeft  := obj;
           targetZoneRight := obj;
           targetZoneTop   := obj;           
           targetZoneBot   := obj;
         end;
      3: begin//справка
           if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');           
           obj := OpenInDocument('СПРАВКА');
           targetZoneLeft  := obj;           
           targetZoneRight := obj;
           targetZoneTop   := obj;           
           targetZoneBot   := obj;
         end;        
      4: begin//синхронный просмотр
           if NOT OpenObjectFromFolder(LIST_PATH, OpenMenuTab) then Raise('Не удалось открыть список');
           targetZoneTop := OpenInList('СИНХРОННЫЙ ПРОСМОТР');
           obj := GetFromSynchroView('ОБЛАСТЬ РЕДАКТОРА');
           targetZoneLeft  := obj;   
           targetZoneRight := obj;          
           targetZoneBot   := obj;
         end;
      5: begin//английское толкование в словаре
           if NOT GoToDictionary then Raise('Не удалось перейти в ТС');
           if NOT Position_Internal(GetFromDictionary('СПИСОК ТЕРМИНОВ'), 'Q Тобина') then Raise('Не удалось споцизионироваться на термин, у которго есть перевод');
           obj := GetFromDictionary('ПЕРЕВОД СТАТЬИ');           
           targetZoneLeft  := obj;
           targetZoneRight := obj;
           targetZoneTop   := obj;           
           targetZoneBot   := obj;          
         end; 
      
    end;//case    
    if NOT ( IsExists(targetZoneLeft) AND IsExists(targetZoneRight) AND
             IsExists(targetZoneTop) AND IsExists(targetZoneBot) ) then
      Raise('Не удалось обнаружить targetZone');
            
    //Проверяем, что нельзя задочить снизу, слевва и справа
    for j := 1 to 4 do
    begin
      if j =1 then
        case i of
          1:  begin tbNameInLog := 'ТУЛБАР "СПИСОК: ССЫЛКИ НА ДОКУМЕНТ"'; toolBar := GetFromEditor(tbNameInLog); end;
          2:  begin tbNameInLog := 'ТУЛБАР "ДОКУМЕНТ: ИНФОРМАЦИЯ О ДОКУМЕНТЕ"'; toolBar := GetFromEditor(tbNameInLog); end;
          3:  begin tbNameInLog := 'ТУЛБАР "ДОКУМЕНТ: СПРАВКА К ДОКУМЕНТУ"'; toolBar := GetFromEditor(tbNameInLog);end;
          4:  begin tbNameInLog := 'ТУЛБАР "СИНХРОННЫЙ ПРОСМОТР"'; toolBar := GetFromSynchroView(tbNameInLog); end; 
          5:  begin tbNameInLog := 'ТУЛБАР ПЕРЕВОД СТАТЬИ'; toolBar := GetFromDictionary(tbNameInLog);end;         
        end;//case              
      if NOT IsExists(toolBar) then 
        toolBar := FindWindowByPath(GetF1ShellProcess, 'WNDCLASS:=' + tbClass + ';WNDCAPTION:=' + tbCaption + ';MAXDEPTH:=2', false);
      if NOT IsExists(toolBar) then Raise('Не удалось получить ТУЛБАР даже после его поиска от процесса');
      case j of 
        1: begin 
             str := 'down';
             targetZone := targetZoneBot;   
             //После первого нахождения тулбара запоминаем его св-ва, что бы потом если он изменит путь, найти его через FindWindow
             tbClass := toolBar.WndClass;
             tbCaption := toolBar.WndCaption;
           end;
        2: begin str := 'right'; targetZone := targetZoneRight; end;
        3: begin str := 'left';  targetZone := targetZoneLeft;  end;
        4: begin str := 'up';    targetZone := targetZoneTop;  end; 
      end; //case
      
      if NOT IsExists(toolBar) then
        toolBar := FindWindowByPath(GetF1ShellProcess, 'WNDCLASS:=' + tbClass + ';WNDCAPTION:=' + tbCaption+';MAXDEPTH:=50', false);
      if NOT IsExists(toolBar) then Raise('Не удалось получить ТУЛБАР даже после его поиска от процесса');     
    //  targetZone := targetZoneTop;
      if NOT DragToolbar(toolBar, targetZone, str) then
      begin
        Log.Error('Тулбар "' + tbNameInLog + '" не перетащился в зону Докинга', str);
        Raise('Тулбар "' + tbNameInLog + '" не перетащился в зону Докинга');
      end;
       
    end;//for j := 1 to 4
  end;//for i := 1 to 6
  
  
  // делаем как было
  if NOT SetDefaultToolBarSettings then
    Log.Warning('Не удалось установить настройки Тулбара по умолчанию');
  if NOT UnlockToolbars(false) then Raise('Не удалось залочить ТУЛБАР');  
  result := true;  
  CloseF1Shell;
except
  Log.Message('HLTC101_1_2_4_Execute: ' + ExceptionMessage, '',  pmNormal, GetLogAttr('EXCEPTION'));
  CloseF1Shell;
  result := false;
  CommonExceptionHandler;
end;
end;


{
HLTC101: Настройка тулбаров
	HLTC101.1: Изменение положения тулбаров
		HLTC101.1.3: Должна быть возможность менять положение тулбара и их
    последовательность в пределах одной зоны докинга (например в документе 2-а 
    тулбара – их можно расположить в 2-а ряда, в 1-ин ряд).
}
function HLTC101_1_3_Execute(var  current_state: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;
  PREF = 'HLTC101_1_3';
var  
  toolBar1;
  toolBar2;
  x1, y1, x2, y2;
  count;
begin
try
  count := 5;
  RestartF1Shell(count, Options.Run.Timeout div 6, PREF, PREF);  
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  if NOT UnlockToolbars then Raise('Не удалось разлочить ТУЛБАРЫ');
  
  toolBar1 := GetFromMainWindow('ТУЛБАР');  
  toolBar2 := GetFromEditor('ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');   
  if NOT ( IsExists(toolBar1) AND IsExists(toolBar2) ) then
    Raise('Не удалось получить ТУЛБАР');
  //перетаскиваем Тулбар2 на одну строку к тулбару1   
  x1 := toolBar2.ScreenLeft + 5;
  y1 := toolBar2.ScreenTop  + 5;
  x2 := toolBar1.ScreenLeft + toolBar1.Width;
  y2 := toolBar1.ScreenTop + toolBar1.Height div 4;
  if NOT DragExt(nil, x1, y1, x2 - x1, y2 - y1, '', 30) then 
    Raise('Не удалось перетянуть ТУЛБАР при помощи DragExt');
  //Проверяем
  if NOT ( IsExists(toolBar1) AND IsExists(toolBar2) ) then
    Raise('Не удалось получить ТУЛБАР после его перетаскивания');
  if NOT ( (toolBar1.ScreenTop = toolBar2.ScreenTop) AND ((toolBar1.ScreenLeft + toolBar1.Width) = toolBar2.ScreenLeft) ) then
  begin
    Log.Error('После попытке поставить тулбары в одну строчку координаты 2-го тулбара не эталонны.');  
    Raise;
  end;
  //перетаскиваем Тулбар2 на одну строку ниже тулбара1   
  x1 := toolBar2.ScreenLeft + 5;
  y1 := toolBar2.ScreenTop  + 5;
  x2 := toolBar1.ScreenLeft + 5;
  y2 := toolBar1.ScreenTop + toolBar1.Height - 2;
  if NOT DragExt(nil, x1, y1, x2 - x1, y2 - y1, '', 30) then 
    Raise('Не удалось перетянуть ТУЛБАР при помощи DragExt');
  //Проверяем
  if NOT ( IsExists(toolBar1) AND IsExists(toolBar2) ) then
    Raise('Не удалось получить ТУЛБАР после его перетаскивания');
  if NOT ( (toolBar1.ScreenLeft = toolBar2.ScreenLeft) AND ((toolBar1.ScreenTop + toolBar1.Height) = toolBar2.ScreenTop) ) then
  begin
    Log.Error('После попытке поставить тулбары в две строчки координаты 2-го тулбара не эталонны.');  
    Raise;
  end;
  
  if NOT SetDefaultToolBarSettings then
    Log.Warning('Не удалось установить настройки Тулбара по умолчанию');
  if NOT UnlockToolbars(false) then Raise('Не удалось залочить ТУЛБАР');  
  result := true;  
  GoToMainMenu;
  CloseF1Shell;
except
  Log.Message('HLTC101_1_3_Execute: ' + ExceptionMessage, '',  pmNormal, GetLogAttr('EXCEPTION'));
  CloseF1Shell;
  result := false;
  CommonExceptionHandler;
end;
end;


{
HLTC101: Настройка тулбаров
	HLTC101.1: Изменение положения тулбаров
  	HLTC101.1.4: Проверить, что есть возможность переводить в состояние pop-up
    (состояние, когда панель инструментов представлена в отдельном окне, т.е у 
    него есть заголовок, есть «крестик» для закрытия этого окна)
			HLTC101.1.4.1: При этом в качестве заголовка окна должно использоваться 
      имя тулбара
}
function HLTC101_1_4_1_Execute(var  current_state: OleVariant): OleVariant;
const
  TB_CAPTION = 'Главное окно';
  PREF = 'HLTC101_1_4_1';
var   
  toolBar; 
  targetZone;
  x, y;
  dX, dY;
  delta;
  count;
begin
try
  count := 5;
  RestartF1Shell(count, Options.Run.Timeout div 6, PREF, PREF);
  GoToMainMenu;
  targetZone := GetFromMainWindow('ОБЛАСТЬ ОСНОВНОГО МЕНЮ');
  if NOT IsExists(targetZone) then Raise('Не удалось получить ОБЛАСТЬ ОСНОВНОГО МЕНЮ');

  if NOT UnlockToolbars then Raise('Не удалось разлочить ТУЛБАР');
  toolBar := GetFromMainWindow('ТУЛБАР');
  if NOT IsExists(toolBar) then Raise('Не удалось получить ТУЛБАР');
  // тащим тулбар  
  dX := 20;
  dY := 0;
  if DragToolbar(toolBar, targetZone,  'left', dX, dY) then
  begin
    Log.Error('Тулбар задочился, хотя не должен', 'left');
    Raise;
  end;
  //если тулбар вылезает за границы окна, перетягиваем его так, что б он целиком вместился в окно
  delta := (targetZone.ScreenLeft + targetZone.Width) - (toolBar.ScreenLeft + toolBar.Width);  
  if  delta < 0 then
    if DragToolbar(toolBar, targetZone,  'left', delta, dY) then
    begin
      Log.Error('Тулбар задочился, хотя не должен', 'left');
      Raise;
    end;
  //toolBar := GetFromMainWindow('ТУЛБАР');
  toolBar := FindWindowByPath(GetF1ShellProcess, 'NAME:=tbnsMainWindowTop;WNDCLASS:=TvcmToolbar;MAXDEPTH:=10');  
  if NOT IsExists(toolBar) then Raise('Не удалось получить ТУЛБАР от процесса в тот момент, когда он отлеплен');
  if NOT StringCompare(toolBar.Caption, TB_CAPTION) then
  begin
    Log.Error('Caption тулбара после его перетаскивания в popup состояние не эталонный', toolBar.Caption);
    Raise;  
  end;
  //Кликаем по крестику(что б закрыть)
  toolBar.Click(toolBar.Width - 10, 10);
  //Проверяем, что тулбар после закрытия вернулся на предъидущее место 
  toolBar := GetFromMainWindow('ТУЛБАР "ГЛАВНАЯ ПАНЕЛЬ ИНСТРУМЕНТОВ"');
  if NOT IsExists(toolBar) then
  begin
    Log.Error('После закрытия тулбара(кликаки по "крестику"), тулбар не вернулся на предидущее место');
    Raise;
  end;      
  // делаем как было
  if NOT SetDefaultToolBarSettings then 
    Log.Warning('Не удалось установить настройки Тулбара по умолчанию');
  if NOT UnlockToolbars(false) then Raise('Не удалось залочить ТУЛБАР');  
  result := true;  
  CloseF1Shell;
except
  Log.Message('HLTC101_1_4_1_Execute: ' + ExceptionMessage, '',  pmNormal, GetLogAttr('EXCEPTION'));
  CloseF1Shell;
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC101: Настройка тулбаров
	HLTC101.1: Изменение положения тулбаров
  	HLTC101.1.4: Проверить, что есть возможность переводить в состояние pop-up
    (состояние, когда панель инструментов представлена в отдельном окне, т.е у 
    него есть заголовок, есть «крестик» для закрытия этого окна)
			HLTC101.1.4.2: При нажати на «крестик» тулбар должен дочиться в предыдущее
      место в зоне докинга
}
function HLTC101_1_4_2_Execute(var  current_state: OleVariant): OleVariant;
const
  PREF = 'HLTC101_1_4_2';
var   
  toolBar; 
  targetZone;
  dockedName;
  tbName, tbClass, tbCaption;
  count;
begin
try
  count := 5;
  RestartF1Shell(count, Options.Run.Timeout div 6, PREF, PREF);
  GoToMainMenu;
  targetZone := GetFromNavigator('ЗАКЛАДКИ ЛЕВОГО НАВИГАТОРА');
  if NOT IsExists(targetZone) then Raise('Не удалось получить область ЗАКЛАДКИ ЛЕВОГО НАВИГАТОРА');
  if NOT UnlockToolbars then Raise('Не удалось разлочить ТУЛБАР');
  toolBar := GetFromMainWindow('ТУЛБАР "ГЛАВНАЯ ПАНЕЛЬ ИНСТРУМЕНТОВ"');
  if NOT IsExists(toolBar) then Raise('Не удалось получить ТУЛБАР');
  tbName    := toolBar.Name;
  tbClass   := toolBar.WndClass;
  tbCaption := toolBar.WndCaption;
  // дочим тулбар слева
  if NOT DragToolbar(toolBar, targetZone,  'left') then
  begin
    Log.Error('Тулбар не задочился после перетаскивания', 'left');
    Raise;
  end;   
  toolBar := GetFromMainWindow('ТУЛБАР "ГЛАВНАЯ ПАНЕЛЬ ИНСТРУМЕНТОВ"');
  if NOT IsExists(toolBar) then Raise('Не удалось обнаружить ТУЛБАР ');
  // тащим тулбар в состояние popup
  if DragToolbar(toolBar, targetZone,  'left', 20, 20) then
  begin
    Log.Error('Тулбар задочился, хотя не должен', 'left');
    Raise;
  end;
  toolBar := FindWindowByPath(GetF1ShellProcess, 'NAME:=' + tbName + ';WNDCLASS:=' + tbClass + ';WNDCAPTION:=' + tbCaption, false);
  if NOT IsExists(toolBar) then Raise('Не удалось получить ТУЛБАР от процесса');
  toolBar.Click(toolBar.Width - 10, 10);
  Delay(Options.Run.TimeOut div 30);
  toolBar := GetFromMainWindow('ТУЛБАР');
  if NOT IsExists(toolBar) then Raise('Не удалось обнаружить ТУЛБАР');
  try
    dockedName := toolBar.DockedTo.Name;
  except
    dockedName := '';
  end;  
  if NOT ( (abs((toolBar.ScreenLeft + toolBar.Width) - targetZone.ScreenLeft) <= 1)  AND 
               (dockedName = 'LeftDock') )then       
  begin
    Log.Error('Тулбар не задочился в предъидущую зону докинга после клика по "крестику"', dochedName);
    Raise;
  end;
  // делаем как было
  if NOT SetDefaultToolBarSettings then
    Log.Warning('Не удалось установить настройки Тулбара по умолчанию');
  if NOT UnlockToolbars(false) then Raise('Не удалось залочить ТУЛБАР');
  result := true;
  CloseF1Shell;
except
  Log.Message('HLTC101_1_4_2_Execute: ' + ExceptionMessage, '',  pmNormal, GetLogAttr('EXCEPTION'));
  CloseF1Shell;
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC101: Настройка тулбаров
	HLTC101.1: Изменение положения тулбаров
  	HLTC101.1.4: Проверить, что есть возможность переводить в состояние pop-up
    (состояние, когда панель инструментов представлена в отдельном окне, т.е у 

    него есть заголовок, есть «крестик» для закрытия этого окна)
			HLTC101.1.4.3: 1.Вытаскиваем навигатор в отдельное окно 2. Делаем так, чтобы кнопки тулбара в
      навигаторе не влезали в область и был значок показа оставшихся кнопок (>>) 3. Нажимаем на >>, 
      проверить, что при этом не пропадает сам навигатор.
}
function HLTC101_1_4_3_Execute(var  current_state: OleVariant): OleVariant;
const
  PREF = 'HLTC101_1_4_3';
var     
  navigator;
  toolBar;
  x1, y1;
  isNeedsExcept;
  count;
begin
try
  count := 5;
  RestartF1Shell(count, Options.Run.Timeout div 6, PREF, PREF);
  isNeedsExcept := true;
  OpenMyDocTab;                
  navigator := GetFromNavigator('ФОРМА ЛЕВОГО НАВИГАТОРА');
  if NOT IsExists(navigator) then Raise('Не удалось получить ФОРМА ЛЕВОГО НАВИГАТОРА');
  //Вытаскиваем навигатор в отдельное окно
  x1 := navigator.ScreenLeft + navigator.Width div 2;
  y1 := navigator.ScreenTop + 10;  
  if NOT DragExt(nil, x1, y1, navigator.Width, 0, '', 30) then 
    Raise('Не удалось перетянуть навигатор при помощи DragExt');
  //Сужаем навигатор
  navigator := GetFromNavigator(NAV_FLOATING + 'ВКЛАДКА НАВИГАТОРА "МОИ ДОКУМЕНТЫ"');
  if NOT IsExists(navigator) then 
    Raise('Не удалось получить ВКЛАДКА НАВИГАТОРА "МОИ ДОКУМЕНТЫ" (плавающего навигатора) после её перетаск.');
  x1 := navigator.ScreenLeft + navigator.Width +1;
  y1 := navigator.ScreenTop + navigator.Height div 2;
  if NOT DragExt(nil, x1, y1, - navigator.Width div 2, 0, '', 5) then 
    Raise('Не удалось сузить навигатор при помощи DragExt');
    
  toolBar := GetFromNavigator(NAV_FLOATING + 'ТУЛБАР "МОИ ДОКУМЕНТЫ"');
  if NOT IsExists(toolBar) then Raise('Не удалось получить ТУЛБАР "МОИ ДОКУМЕНТЫ" на плавающем навигаторе');
  toolBar.Ttb97MoreButton.Click(2, 2);
  if NOT ( IsExists(navigator) AND navigator.Visible ) then
  begin
    Log.Error('Навигатор исчез из области видимости');
    Raise;
  end;  
  // делаем как было
  isNeedsExcept := false;
  if NOT SetDefaultSettings then 
    Raise('Не удалось установить настройки по умолчанию');  
  result := true;
  CloseF1Shell;
except
  Log.Message('HLTC101_1_4_3_Execute: ' + ExceptionMessage, '',  pmNormal, GetLogAttr('EXCEPTION'));
  CloseF1Shell;
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC101: Настройка тулбаров
	HLTC101.1: Изменение положения тулбаров
  	HLTC101.1.4: Проверить, что есть возможность переводить в состояние pop-up
    (состояние, когда панель инструментов представлена в отдельном окне, т.е у 
    него есть заголовок, есть «крестик» для закрытия этого окна)
			HLTC101.1.5: Проверить, что для настроек по умолчанию все тулбары группируются по принципу «один на
      всю форму»: Тулбары от нескольких форм (от нескольких объектов, например «список» + «основное меню»
      + «история навигации») должны располагаться слева направо, сверху вниз, так чтобы уместилось
      максимальное количество элементов.
//проверяем положение тулбаров в списке: «список» + «основное меню» по умолчанию
}
function HLTC101_1_5_Execute(var  current_state: OleVariant): OleVariant;
const
  PREF = 'HLTC101_1_5';  
var     
  toolBarOM;
  toolBarList;
  LIST_PATH;
  count;  
begin
try
  count := 5;
  RestartF1Shell(count, Options.Run.Timeout div 6, PREF, PREF);
  LIST_PATH := LIST_MAIN;
  if NOT OpenObjectFromFolder(LIST_PATH, OpenMenuTab) then Raise('Не удалось открыть список');
  if NOT SetDefaultToolBarSettings then
    Log.Warning('Не удалось установить настройки Тулбара по умолчанию');
  toolBarOM := GetFromMainWindow('ТУЛБАР "ГЛАВНАЯ ПАНЕЛЬ ИНСТРУМЕНТОВ"');
  toolBarList := GetFromList('ТУЛБАР "СПИСОК"');
  if NOT ( IsExists(toolBarOM) AND IsExists(toolBarList) ) then Raise('Не удалось получить ТУЛБАР');
// The following line was changed by TestComplete:
//   if NOT ( (toolBarOM.SLeft = toolBarList.SLeft) AND
  if NOT ( (toolBarOM.ScreenLeft = toolBarList.ScreenLeft) AND
// The following line was changed by TestComplete:
//           ((toolBarOM.STop + toolBarOM.Height) = toolBarList.STop) )then
          ((toolBarOM.ScreenTop + toolBarOM.Height) = toolBarList.ScreenTop) )then
  begin
    Log.Error('Координаты тулбаров: "тулбар ОМ" и "тулбар список" по умолчанию не эталонны');
    Raise;
  end;
  result := true;
  CloseF1Shell;
except
  Log.Message('HLTC101_1_5_Execute: ' + ExceptionMessage, '',  pmNormal, GetLogAttr('EXCEPTION'));
  CloseF1Shell;
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC101: Настройка тулбаров
	HLTC101.1: Изменение положения тулбаров
  	HLTC101.1.6: Проверить, что в контекстном меню к любой зоне докинга или тулбару есть 
    операция (checkbox) «Закрепить панель инструментов»
}
function HLTC101_1_6_Execute(var  current_state: OleVariant): OleVariant;
const
  PREF = 'HLTC101_1_6';
const
  CAPTION = 'Закрепить панели инструментов';
var     
  toolBar1;
  toolBar2;
  toolBar3;
  toolBar;
  targetZoneL;
  targetZoneR;
  targetZoneT;
  targetZoneB;
  targetZone;
  i;
  obj;
  count;
begin
try
  count := 5;
  RestartF1Shell(count, Options.Run.Timeout div 6, PREF, PREF);
  if NOT GoToPPR then Raise('Не удалось перейти в ППР');
  if NOT UnlockToolbars then Raise('Не удалось разлочить ТУЛБАР');
  if NOT SetDefaultToolBarSettings then
    Log.Warning('Не удалось установить настройки Тулбара по умолчанию');    
  toolBar1 := GetFromMainWindow('ТУЛБАР "ГЛАВНАЯ ПАНЕЛЬ ИНСТРУМЕНТОВ"');  
  toolBar2 := GetFromPPR('НИЖНИЙ ТУЛБАР КАРТОЧКИ ЗАПРОСА');
  if NOT ( IsExists(toolBar1) AND IsExists(toolBar2) ) then 
    Raise('Не удалось получить ТУЛБАР');
  for i := 1 to 2 do
  begin
    case i of
      1: toolBar := toolBar1;
      2: toolBar := toolBar2;
    end;
    toolBar.ClickR(toolBar.Width div 2, toolBar.Height div 2);
    if NOT IsPopupMenuItemExists(toolBar, CAPTION, true) then
    begin
      Log.Error('У тулбара: "' + toolBar.Caption + '" нет контекстной операции "' + CAPTION + '"');
      Raise;
    end;
  end;
  targetZoneT := GetFromMainWindow('ВЕРХНЯЯ ЗОНА ДОКИНГА');
  if NOT IsExists(targetZoneT) then Raise('Не удалось получить ВЕРХНЯЯ ЗОНА ДОКИНГА');
  targetZoneT.ClickR(targetZoneT.Width - 3, 3);
  if NOT IsPopupMenuItemExists(targetZoneT, CAPTION, true) then
  begin
    Log.Error('У верхней зоны докинга нет контекстной операции "' + CAPTION + '"');
    Raise;
  end;
  // тащим тулбар в нижнюю зону докинга, чтоб получить эту зону
  if NOT DragToolbar(toolBar1, toolBar2,  'down') then Raise('Не Удалось задочить тулбар снизу');
  targetZoneB := GetFromMainWindow('НИЖНЯЯ ЗОНА ДОКИНГА');
  if NOT IsExists(targetZoneB) then Raise('Не удалось получить НИЖНЯЯ ЗОНА ДОКИНГА');
  targetZoneB.ClickR(targetZoneB.Width - 100, 3);
  if NOT IsPopupMenuItemExists(targetZoneB, CAPTION, true) then
  begin
    Log.Error('У нижней зоны докинга нет контекстной операции "' + CAPTION + '"');
    Raise;
  end;
  // тащим тулбар в левую зону докинга, чтоб получить эту зону
  obj := GetFromMainWindow('ROOT OBJECT');
  targetZone := Sys.ObjectFromPoint(obj.ScreenLeft + 2, obj.Height div 2);  
  if NOT IsExists(targetZone) then Raise('Не удалось объект, прижатый к левому краю основной области');
  if NOT DragToolbar(toolBar1, targetZone,  'left', -2, 0) then Raise('Не Удалось задочить тулбар слева');
  targetZoneL := GetFromMainWindow('ЛЕВАЯ ЗОНА ДОКИНГА');
  if NOT IsExists(targetZoneL) then Raise('Не удалось получить ЛЕВАЯ ЗОНА ДОКИНГА');
  targetZoneL.ClickR(targetZoneL.Width div 2, targetZoneL.Height - 5);
  if NOT IsPopupMenuItemExists(targetZoneL, CAPTION, true) then
  begin
    Log.Error('У левой зоны докинга нет контекстной операции "' + CAPTION + '"');
    Raise;
  end;
  // тащим тулбар в правую зону докинга, чтоб получить эту зону
  targetZone := GetFromPPR('КАРТОЧКА ЗАПРОСА');
  if NOT IsExists(targetZone) then Raise('Не удалось получить КАРТОЧКА ЗАПРОСА'); 
  if NOT DragToolbar(toolBar1, targetZone,  'right') then Raise('Не Удалось задочить тулбар справа');
  targetZoneR := GetFromMainWindow('ПРАВАЯ ЗОНА ДОКИНГА');
  if NOT IsExists(targetZoneR) then Raise('Не удалось получить ПРАВАЯ ЗОНА ДОКИНГА');
  toolBar1.Refresh;
  targetZoneR.ClickR(targetZoneR.Width - 5, targetZoneR.ScreenTop + toolBar1.Height + 10);//что б не попасть в медальку
  if NOT IsPopupMenuItemExists(targetZoneR, CAPTION, true) then
  begin
    Log.Error('У правой зоны докинга нет контекстной операции "' + CAPTION + '"');
    Raise;
  end;  
  if NOT SetDefaultToolBarSettings then
    Log.Warning('Не удалось установить настройки Тулбара по умолчанию');    
  result := true;
  CloseF1Shell;
except
  Log.Message('HLTC101_1_6_Execute: ' + ExceptionMessage, '',  pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CloseF1Shell;
  CommonExceptionHandler;
end;
end;

{
HLTC101: Настройка тулбаров
 HLTC101.1: Изменение положения тулбаров
  HLTC101.1.6: Проверить, что в контекстном меню к любой зоне докинга или тулбару есть операция
   (checkbox) «Закрепить панель инструментов»
    HLTC101.1.6.1: При выборе этой операции запрещаются какие-либо изменения положения всех тулбаров при 
    помощи мыши.(используется  для предотвращения случайного изменения положения тулбаров при работе мышью).
}
function HLTC101_1_6_1_Execute(var  current_state: OleVariant): OleVariant;
const
  PREF = 'HLTC101_1_6_1';
var  
  toolBar1;
  toolBar2;
  tb1l, tb1t, tb1w, tb1h;
  tb2l, tb2t, tb2w, tb2h;
  count;  
begin
try
  count := 5;
  RestartF1Shell(count, Options.Run.Timeout div 6, PREF, PREF);  
  if NOT GoToPPR then Raise('Не удалось открыть документ по Alt+N');
  if NOT UnlockToolbars(false) then Raise('Не удалось разлочить ТУЛБАРЫ');
  toolBar1 := GetFromMainWindow('ТУЛБАР');  
  toolBar2 := GetFromPPR('НИЖНИЙ ТУЛБАР КАРТОЧКИ ЗАПРОСА');   
  if NOT ( IsExists(toolBar1) AND IsExists(toolBar2) ) then
    Raise('Не удалось получить ТУЛБАР');
    
  tb1l := toolBar1.ScreenLeft;
  tb1t := toolBar1.ScreenTop;
  tb1h := toolBar1.Height;
  tb1w := toolBar1.Width;
  
  tb2l := toolBar2.ScreenLeft;
  tb2t := toolBar2.ScreenTop;
  tb2h := toolBar2.Height;
  tb2w := toolBar2.Width;
  
  if NOT DragExt(nil, tb1l, tb1t, 50, tb1h + 50, '', 10) then 
    Raise('Не удалось перетянуть ТУЛБАР при помощи DragExt');
  if NOT( IsExists(toolBar1) AND (tb1l = toolBar1.ScreenLeft) AND (tb1t = toolBar1.ScreenTop) AND
        (tb1w = toolBar1.Width) AND (tb1h = toolBar1.Height) ) then
  begin
    Log.Error('Тулбар1 изменил координаты!');
    Raise;
  end;  
  if NOT DragExt(nil, tb2l, tb2t, 50, -tb2h, '', 10) then 
    Raise('Не удалось перетянуть ТУЛБАР при помощи DragExt');  
  if NOT(IsExists(toolBar2) AND (tb2l = toolBar2.ScreenLeft) AND (tb2t = toolBar2.ScreenTop) AND
        (tb2w = toolBar2.Width) AND (tb2h = toolBar2.Height) ) then
  begin
    Log.Error('Тулбар2 изменил координаты!');
    Raise;
  end;        
  result := true;  
  CloseF1Shell;
except
  Log.Message('HLTC101_1_6_1_Execute: ' + ExceptionMessage, '',  pmNormal, GetLogAttr('EXCEPTION'));
  CloseF1Shell;
  result := false;         
  CommonExceptionHandler;
end;
end;

{
HLTC101.2: Диалог настройки
 	HLTC101.2.1: Диалог должен вызываться из контекстного меню:
  	HLTC101.2.1.1: При вызове контекстного меню для конкретного тулбара (клик правой кнопкой мыши по
     тулбару) система открывает диалог настроек тулбара В верхней части формы отображается название тулбара 
}
function HLTC101_2_1_1_Execute(var  current_state: OleVariant): OleVariant;
const
  TB_NAME = 'Главная панель инструментов - Главное окно';  
var  
  tbName;
  tbSettings;  
begin
try  
  if NOT GoToPPR then Raise('Не удалось открыть документ по Alt+N');
  tbSettings := OpenTbSettings(true);
  if NOT IsExists(tbSettings) then Raise('Не удалось получить "Настройка панели инструментов"');
  tbName := common.GetWindowText(GetFromTBSettings('КОМБОБОКС ВЫБОРА ТУЛБАРА').Handle);
  if NOT StringCompare(tbName, TB_NAME) then
  begin
    Log.Error('По умолчанию в комбобоксе выбора тулбара стоит не эталонный тулбар', tbName);
    Raise;
  end;
  tbSettings.Close;
  result := true;  
  GoToMainMenu;
except
  Log.Message('HLTC101_2_1_1_Execute: ' + ExceptionMessage, '',  pmNormal, GetLogAttr('EXCEPTION'));
  result := false;         
  CommonExceptionHandler;
end;
end;

{
HLTC101.2: Диалог настройки
 	HLTC101.2.1: Диалог должен вызываться из контекстного меню:
   	HLTC101.2.1.2: При вызове диалога настройки из контекстного меню зоны докинга, из комбобокса «объект
    системы» в верхней части формы можно выбирать любой тулбар доступный в системе.
}
function HLTC101_2_1_2_Execute(var  current_state: OleVariant): OleVariant;
var  
  listEtalon;
  listCurrent;
  tbSettings;
  comboBox;
begin
try
  listEtalon := [    
    'Выпускаемые препараты',
    'Главная панель инструментов',
    'Дерево пользователей и групп',
    'Документ: Дополнительная информация',
    'Документ: Консультация',
    'Документ: Перевод',
    'Документ: ПРАЙМ. Моя новостная лента',
    'Документ: ПРАЙМ. Обзор изменений законодательства',
    'Документ: Предупреждение',
    'Документ: Просмотр графического объекта',
    'Документ: Редакции (вкладка)',
    'Документ: Структура (вкладка)',
    'Документ: Текст документа',
    'Документы на контроле (вкладка)',
    'Конфигурации (вкладка)',
    'Меню (вкладка)',
    'Мои документы',
    'Настройка конфигурации',
    'Описание препарата',
    'Описание фирмы',
    'Поиск лекарственного препарата',
    'Поиск: Выбор реквизита',
    'Поиск: Выбранные значения реквизита',
    'Поиск: По источнику опубликования',
    'Поиск: По реквизитам',
    'Поиск: По ситуации',
    'Поиск: По ситуации (Преемственный)',
    'Поиск: ПРАЙМ. Обзор изменений законодательства',
    'Поиск: Ситуации первого уровня (вкладка)',
    'Правовой навигатор',
    'ПРАЙМ. Моя новостная лента (вкладка)',
    'Предварительный просмотр печати',
    'Препарат: Структура (вкладка)',
    'Свойства пользователя',
    'Синонимы по международному названию',
    'Синхронный просмотр: Вторая пользовательская вкладка списка ссылкок на документ\из документа',
    'Синхронный просмотр: Выпускаемые препараты',
    'Синхронный просмотр: Дополнительная информация',
    'Синхронный просмотр: Описание препарата',
    'Синхронный просмотр: Описание фирмы',
    'Синхронный просмотр: Первая пользовательская вкладка списка ссылкок на документ\из документа',
    'Синхронный просмотр: Похожие документы',
    'Синхронный просмотр: Синонимы по международному названию',
    'Синхронный просмотр: Списки ссылок из документа',
    'Синхронный просмотр: Списки ссылок из документа/на документ',
    'Синхронный просмотр: Списки ссылок на документ',
    'Синхронный просмотр: Схема',
    'Синхронный просмотр: Текст документа',
    'Словарь медицинских терминов: Описание медицинского термина',
    'Словарь медицинских терминов: Список терминов (вкладка)',
    'Совет дня: Список советов (вкладка)',
    'Совет дня: Текст совета',
    'Список',
    'Список препаратов',
    'Список: Консультация',
    'Список: Похожие документы',
    'Список: Справка к списку',
    'Список: Ссылки из документа (вид информации)/Ссылки на документ (вид информации)',
    'Список: Ссылки из документа (все)/Ссылки на документ (все)',
    'справочник ГАРАНТ-ИнФарм: Лекарства и фирмы',
    'Схема',
    'Толковый словарь: Перевод словарной статьи',
    'Толковый словарь: Список терминов (вкладка)',
    'Толковый словарь: Текст словарной статьи',
    'Фармацевтические фирмы (полный список)',
    'Фильтры (вкладка)'
  ];
    
  if NOT GoToPPR then Raise('Не удалось открыть документ по Alt+N');
  tbSettings := OpenTbSettings(true);
  if NOT IsExists(tbSettings) then Raise('Не удалось получить "Настройка панели инструментов"');
  comboBox := GetFromTbSettings('КОМБОБОКС ВЫБОРА ТУЛБАРА');
  if NOT IsExists(comboBox) then Raise('Не удалось получить КОМБОБОКС ВЫБОРА ТУЛБАРА');
  listCurrent := GetElementsFromCombobox(comboBox);
  if NOT CompareArray(listCurrent, listEtalon) then
  begin
    Log.Error('Состав комбобокса "КОМБОБОКС ВЫБОРА ТУЛБАРА" не эталонен', listCurrent);
    Raise;
  end;  
  tbSettings.Close;
  result := true;  
  GoToMainMenu;
except
  Log.Message('HLTC101_2_1_2_Execute: ' + ExceptionMessage, '',  pmNormal, GetLogAttr('EXCEPTION'));
  result := false;         
  CommonExceptionHandler;
end;
end;

{
HLTC101.2: Диалог настройки
 	HLTC101.2.1: Диалог должен вызываться из контекстного меню:
  	HLTC101.2.1.3: Вызвать диалог настройки тулбара из зоны докинга, выбрать какой-либо тулбар, который не
    отображен в данном окне (например, мы находимся в ОМ и в диалоге настройки тулбара выбрали настройку
    тулбара ППР). Поменять настройку тулбара для выбранного объекта и закрыть диалог клавишей «ОК». Перейти
    в объект для которого мы редактировали тулбар и убедиться что тулбар изменен в соответствии с
    проведенными действиями. Проделать аналогичную операцию, но после изменения тулбара нажать кнопку
    «Применить» и закрыть окно диалога настройки тулбара крестиком  - кнопкой «Х». 
}
function HLTC101_2_1_3_Execute(var  current_state: OleVariant): OleVariant;
const
  PREF = 'HLTC101_2_1_3';
  PATH_PPR = 'История запросов';
  PATH_DOC = 'Предварительный просмотр';
  DOC_NUM  = 10003000;
var  
  comboBox;  
  list;
  button;
  arrayTbSetPPR, arrayTbSetDoc;
  arrayTbPPR, arrayTbDoc;
  tbSettings;

  toolBar;
begin
try  
  GoToPPR;
  if NOT SetDefaultToolBarSettings then
    Log.Warning('Не удалось установить настройки Тулбара по умолчанию');
  toolBar := GetFromPPR('НИЖНИЙ ТУЛБАР КАРТОЧКИ ЗАПРОСА');
  if NOT IsExists(toolBar) then Raise('Не удалось получить НИЖНИЙ ТУЛБАР КАРТОЧКИ ЗАПРОСА');
  //Сначала выставляем доступные операции для тулбарв по дефолту а потом добавляем нужные операции  
  DeleteAllAccessibleOperation(toolBar);
  AddNewAccessibleOperation(toolBar, PREF, '* Поиск: По реквизитам\' + PATH_PPR);  
  if NOT GoToMainMenu then Raise('Не удалось перейти в ОМ!');
    
  tbSettings := OpenTbSettings(true);
  if NOT IsExists(tbSettings) then Raise('Не удалось получить "Настройка панели инструментов"');
  comboBox := GetFromTbSettings('КОМБОБОКС ВЫБОРА ТУЛБАРА');
  if NOT IsExists(comboBox) then Raise('Не удалось получить КОМБОБОКС ВЫБОРА ТУЛБАРА');
  if NOT SelectInComboBox(comboBox, 'Поиск: По реквизитам') then
    Raise('Не удалось изменить значение в комбобоксе');
    
  list := GetFromTbSettings('СПИСОК "ДОСТУПНЫЕ ОПЕРАЦИИ"');
  if NOT IsExists(list) then Raise('Не удалось получить СПИСОК "ДОСТУПНЫЕ ОПЕРАЦИИ"');
  if NOT Position_Internal(list, PATH_PPR, '\', false, 'isPressHome:=true') then 
    Raise('Не удалось в СПИСОКЕ "ДОСТУПНЫЕ ОПЕРАЦИИ"  спозиционироваться на элементе: "' + PATH_PPR + '"');
  button := GetFromTbSettings('КНОПКА "СТРЕЛКА ВПРАВО"');
  if NOT IsExists(button) then Raise('Не удалось получить КНОПКА "СТРЕЛКА ВПРАВО"');
  button.Click;  
  
  list := GetFromTbSettings('СПИСОК "ТЕКУЩИЕ ОПЕРАЦИИ"');
  if NOT IsExists(list) then Raise('Не удалось получить СПИСОК "ТЕКУЩИЕ ОПЕРАЦИИ"');  
  arrayTbSetPPR := SetArrayFromTbSetting(list);
  GetFromTbSettings('КНОПКА "ОК"').Click;
  //Проверяем аналогичную ситуацию, но при нажатии "Применить"
  if NOT OpenDocByNumber(10003000) then Raise('Не удалось открыть документ по Alt+N');
  toolBar := GetFromEditor('ТУЛБАР ТЕКСТА ДОКУМЕНТА');
  if NOT IsExists(toolBar) then Raise('Не удалось получить ТУЛБАР ТЕКСТА ДОКУМЕНТА');
  //Сначала выставляем доступные операции для тулбарв по дефолту а потом добавляем нужные операции  
  DeleteAllAccessibleOperation(toolBar);
  AddNewAccessibleOperation(toolBar,PREF, '* Документ: Текст документа\' + PATH_DOC);
  if NOT GoToMainMenu then Raise('Не удалось перейти в ОМ!');
  
  tbSettings := OpenTbSettings(true);
  if NOT IsExists(tbSettings) then Raise('Не удалось получить "Настройка панели инструментов"');
  comboBox := GetFromTbSettings('КОМБОБОКС ВЫБОРА ТУЛБАРА');
  if NOT IsExists(comboBox) then Raise('Не удалось получить КОМБОБОКС ВЫБОРА ТУЛБАРА');
  if NOT SelectInComboBox(comboBox, 'Документ: Текст документа') then
    Raise('Не удалось изменить значение в комбобоксе');
  list := GetFromTbSettings('СПИСОК "ТЕКУЩИЕ ОПЕРАЦИИ"');
  if NOT IsExists(list) then Raise('Не удалось получить СПИСОК "ТЕКУЩИЕ ОПЕРАЦИИ"');
  if NOT Position_Internal(list, PATH_DOC, '\', false, 'isPressHome:=true') then 
    Raise('Не удалось спозиционироваться на элементе: "' + PATH_DOC + '"');
  button := GetFromTbSettings('КНОПКА "СТРЕЛКА ВЛЕВО"');
  if NOT IsExists(button) then Raise('Не удалось получить КНОПКА "СТРЕЛКА ВЛЕВО"');
  button.Click;
  arrayTbSetDoc := SetArrayFromTbSetting(list);
  GetFromTbSettings('КНОПКА "ПРИМЕНИТЬ"').Click;
  tbSettings.Click(tbSettings.Width - 15, 15);
  //Сравнение
  if NOT GoToPPR then Raise('Не удалось открыть в ППР');
  arrayTbPPR := SetArrayFromTb(GetFromPPR('ТУЛБАР "ПОИСК: ПО РЕКВИЗИТАМ"'));
  if NOT CompareArray( arrayTbPPR, arrayTbSetPPR) then
  begin
    Log.Error('Тулбар после его изменения не Эталонный');
    Raise;
  end;
  
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  arrayTbDoc := SetArrayFromTb(GetFromEditor('ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"'));
  if NOT CompareArray( arrayTbDoc, arrayTbSetDoc) then
  begin
    Log.Error('Тулбар после его изменения не Эталонный');
    Raise;
  end;
  //Восстанавливаем все нас настройки по дефолту
  GoToPPR;  
  DeleteAllAccessibleOperation(GetFromPPR('НИЖНИЙ ТУЛБАР КАРТОЧКИ ЗАПРОСА'));
  OpenDocByNumber(10003000);
  DeleteAllAccessibleOperation;
  SetDefaultToolBarSettings;
  result := true;  
  GoToMainMenu;
except  
  Log.Message('HLTC101_2_1_3_Execute: ' + ExceptionMessage, '',  pmNormal, GetLogAttr('EXCEPTION'));  
  if IsExists(tbSettings) then tbSettings.Close;
  //Восстанавливаем все нас настройки по дефолту
  GoToPPR;  
  DeleteAllAccessibleOperation(GetFromPPR('НИЖНИЙ ТУЛБАР КАРТОЧКИ ЗАПРОСА'));
  OpenDocByNumber(10003000);
  DeleteAllAccessibleOperation;
  SetDefaultToolBarSettings; 
  result := false;         
  CommonExceptionHandler;
end;
end;

{
HLTC101.2: Диалог настройки
 HLTC101.2.1: Диалог должен вызываться из контекстного меню:
  HLTC101.2.1.4: Вызвать диалог настройки конкретного тулбара. Изменить что
  либо в данном тулбаре. Нажать кнопку «Отмена». Убедиться, что никаких 
  изменений свойств тулбара не произошло. 
}
function HLTC101_2_1_4_Execute(var  current_state: OleVariant): OleVariant;
const
  PATH = 'Основное меню';  
var  
  list;
  button;
  arrayTbBefore;
  arrayTbAfter;
  tbSettings;
  toolBar;
begin
try  
  if NOT SetDefaultToolBarSettings then
    Log.Warning('Не удалось установить настройки Тулбара по умолчанию');
  toolBar := GetFromMainWindow('ТУЛБАР "ГЛАВНАЯ ПАНЕЛЬ ИНСТРУМЕНТОВ"');
  if NOT IsExists(toolBar) then Raise('Не удалось получить ТУЛБАР "ГЛАВНАЯ ПАНЕЛЬ ИНСТРУМЕНТОВ"');
  arrayTbBefore := SetArrayFromTb(toolBar);  
  
  if NOT GoToMainMenu then Raise('Не удалось перейти в ОМ');
  
  tbSettings := OpenTbSettings(true, toolBar);
  if NOT IsExists(tbSettings) then Raise('Не удалось получить "Настройка панели инструментов"');
  list := GetFromTbSettings('СПИСОК "ТЕКУЩИЕ ОПЕРАЦИИ"');
  if NOT IsExists(list) then Raise('Не удалось получить СПИСОК "ТЕКУЩИЕ ОПЕРАЦИИ"');
  if NOT Position_Internal(list, PATH, '\', false, 'isPressHome:=true') then 
    Raise('Не удалось спозиционироваться на элементе: "' + PATH + '"');
  button := GetFromTbSettings('КНОПКА "СТРЕЛКА ВЛЕВО"');
  if NOT IsExists(button) then Raise('Не удалось получить КНОПКА "СТРЕЛКА ВЛЕВО"');
  button.Click;  
  GetFromTbSettings('КНОПКА "ОТМЕНА"').Click;    

  arrayTbAfter := SetArrayFromTb(toolBar);
  if NOT CompareArray( arrayTbAfter, arrayTbBefore) then
  begin
    Log.Error('Тулбар после его изменения и нажатия "Отмена" не Эталонный');
    Raise;
  end; 
  result := true;  
  GoToMainMenu;
except
  Log.Message('HLTC101_2_1_4_Execute: ' + ExceptionMessage, '',  pmNormal, GetLogAttr('EXCEPTION'));
  if IsExists(tbSettings) then tbSettings.Close;
  result := false;         
  CommonExceptionHandler;
end;
end;

{
HLTC101.2: Диалог настройки
 HLTC101.2.1: Диалог должен вызываться из контекстного меню:
  HLTC101.2.1.6: Выбрать тулбар, который в данный момент не отображается в текущем окне, провести какие
   либо изменения свойств тулбара. Нажать кнопку «Отмена». Перейти на форму где присутствует данный тулбар.
    Убедиться, что никаких изменений не применилось 
}
function HLTC101_2_1_6_Execute(var  current_state: OleVariant): OleVariant;
const
  PATH = 'Предварительный просмотр';  
var  
  comboBox;  
  list;
  button;
  arrayTbBefore;
  arrayTbAfter;
  tbSettings;
  toolBar;
begin
try
  if NOT OpenDocByNumber(10003000) then Raise('Не удалось открыть документ по Alt+N');
  if NOT SetDefaultToolBarSettings then
    Log.Warning('Не удалось установить настройки Тулбара по умолчанию');
  toolBar := GetFromEditor('ТУЛБАР ТЕКСТА ДОКУМЕНТА');
  if NOT IsExists(toolBar) then Raise('Не удалось получить ТУЛБАР ТЕКСТА ДОКУМЕНТА');
  arrayTbBefore := SetArrayFromTb(toolBar);
  if NOT GoToMainMenu then Raise('Не удалось перейти в Основное меню');
  tbSettings := OpenTbSettings(true);
  if NOT IsExists(tbSettings) then Raise('Не удалось получить "Настройка панели инструментов"');
  comboBox := GetFromTbSettings('КОМБОБОКС ВЫБОРА ТУЛБАРА');
  if NOT IsExists(comboBox) then Raise('Не удалось получить КОМБОБОКС ВЫБОРА ТУЛБАРА');
  if NOT SelectInComboBox(comboBox, 'Документ: Текст документа') then
    Raise('Не удалось изменить значение в комбобоксе');
  list := GetFromTbSettings('СПИСОК "ТЕКУЩИЕ ОПЕРАЦИИ"');
  if NOT IsExists(list) then Raise('Не удалось получить СПИСОК "ТЕКУЩИЕ ОПЕРАЦИИ"');
  if NOT Position_Internal(list, PATH, '\', false, 'isPressHome:=true') then 
    Raise('Не удалось спозиционироваться на элементе: "' + PATH + '"');

  button := GetFromTbSettings('КНОПКА "СТРЕЛКА ВЛЕВО"');
  if NOT IsExists(button) then Raise('Не удалось получить КНОПКА "СТРЕЛКА ВЛЕВО"');
  button.Click;  
  GetFromTbSettings('КНОПКА "ОТМЕНА"').Click;    
  
  if NOT OpenDocByNumber(10003000) then Raise('Не удалось открыть документ по Alt+N');
  toolBar := GetFromEditor('ТУЛБАР ТЕКСТА ДОКУМЕНТА');
  if NOT IsExists(toolBar) then Raise('Не удалось получить ТУЛБАР ТЕКСТА ДОКУМЕНТА');
  arrayTbAfter := SetArrayFromTb(toolBar);
  if NOT CompareArray( arrayTbAfter, arrayTbBefore) then
  begin
    Log.Error('Тулбар после его изменения и нажатия "Отмена" не Эталонный');
    Raise;
  end; 
  result := true;  
  GoToMainMenu;
except
  Log.Message('HLTC101_2_1_6_Execute: ' + ExceptionMessage, '',  pmNormal, GetLogAttr('EXCEPTION'));
  if IsExists(tbSettings) then tbSettings.Close;
  result := false;         
  CommonExceptionHandler;
end;
end;


{
HLTC101.2: Диалог настройки
 HLTC101.2.3: В окне настроек тулбара на вкладке «Панели инструментов» должно быть две области:
  HLTC101.2.3.1: Текущие операции – операции, которые на данный момент отражены в тулбаре (сам тулбар 
  выбирается из списка «Объекты системы»). Проверить для всех тулбаров системы, что кнопки отображаемые 
  на них соответствуют набору операций в списке «текущие операции».  
}
//Сделаем проверку только для некоторых тулбаров
function HLTC101_2_3_1_Execute(var  current_state: OleVariant): OleVariant;
const
  PATH = 'История запросов';  
  DOC_NUM = 1055132;  
var  
  tbSettings;
  listTbSet;  
  listTb;  
  arrayTbSet;
  tempArr;  
  list;
  comboBox;
  toolBar;
  i, j;
  LIST_PATH;
begin
try
  LIST_PATH := LIST_MAIN;
  listTbSet := [
    //'Главная панель инструментов',
    //'Дерево пользователей и групп', 
    //'Документ: Аннотация к документу',
    //'Документ: Консультация}
    //'Документ: Обзор изменений законодательства',
    //'Документ: Предупреждение',
    //Документ: Просмотр графического объекта
    //Документ: Редакции (вкладка)
    //'Документ: Дополнительная информация',
    //Документ: Структура (вкладка)}
    'Документ: Текст документа',
    //Документы на контроле (вкладка)
    //Карточка Фильтров (5.x)
    //Конфигурации (вкладка)
    'Меню (вкладка)',
    //'Мои документы (вкладка)',
    //Моя новостная лента (вкладка)
    //Настройка конфигурации
    //Поиск: Выбор реквизита
    //Поиск: Выбранные значения реквизита}
    //'Поиск: Обзор изменений законодательства',
    //'Поиск: По источнику опубликования',
    //'Поиск: По реквизитам',
    //Поиск: По реквизитам (стиль ГАРАНТ 5.x)
    //'Поиск: По ситуации',
    //Поиск: По ситуации (стиль ГАРАНТ 5.x)
    //Поиск: С правовой поддержкой
    //Поиск: Ситуации первого уровня (вкладка)
    //'Правовой навигатор',
    'Предварительный просмотр печати',
    //Свойства пользователя
    //Синхронный просмотр: Списки корреспондентов/респондентов
    //Синхронный просмотр: Справка к документу
    'Синхронный просмотр: Текст документа',
    'Список',
    //'Список: Консультация',
    //'Список: Ссылки из документа', 
    //Список: Корреспонденты/респонденты для фрагмента
    //Список: Пользовательская вкладка Корреспонденты (респонденты) 1
    //Список: Пользовательская вкладка Корреспонденты (респонденты) 2
    //'Список: Ссылки на документ',
    //Список: Справка к списку
    //'Толковый словарь: Перевод словарной статьи',
    //'Толковый словарь: Список терминов (вкладка)'
    'Толковый словарь: Текст словарной статьи'
    //'Фильтры (вкладка)'
  ];  
  arrayTbSet := CreateVariantArray(VarArrayLowBound(listTbSet, 1), VarArrayHighBound(listTbSet, 1));
  GoToMainMenu;
  tbSettings := OpenTbSettings(true);
  if NOT IsExists(tbSettings) then Raise('Не удалось получить "Настройка панели инструментов"');
  comboBox := GetFromTbSettings('КОМБОБОКС ВЫБОРА ТУЛБАРА');
  if NOT IsExists(comboBox) then Raise('Не удалось получить КОМБОБОКС ВЫБОРА ТУЛБАРА');
  list := GetFromTbSettings('СПИСОК "ТЕКУЩИЕ ОПЕРАЦИИ"');
  if NOT IsExists(list) then Raise('Не удалось получить СПИСОК "ТЕКУЩИЕ ОПЕРАЦИИ"');

  for i := VarArrayLowBound(listTbSet, 1) to VarArrayHighBound(listTbSet, 1) do
  begin  
    if NOT SelectInComboBox(comboBox, listTbSet[i]) then Raise('Не удалось изменить значение комбобокса');    
    arrayTbSet[i] := SetArrayFromTbSetting(list);
    if i = VarArrayHighBound(listTbSet, 1) then GetFromTbSettings('КНОПКА "ОТМЕНА"').Click;
  end;

  listTb := CreateVariantArray(VarArrayLowBound(listTbSet, 1), VarArrayHighBound(listTbSet, 1));
  
  for i := VarArrayLowBound(listTbSet, 1) to VarArrayHighBound(listTbSet, 1) do
  begin
    case listTbSet[i] of
      'Главная панель инструментов':
        begin
          if NOT GoToMainMenu then Raise('Не удалось перейти в ОМ');
          toolBar := GetFromMainWindow('ТУЛБАР "ГЛАВНАЯ ПАНЕЛЬ ИНСТРУМЕНТОВ"');
        end;      
      {'Документ: Обзор изменений законодательства':
        begin
          if NOT ClickToolBarButton(GetFromMainWindow('ТУЛБАР'), 'Моя новостная лента') then 
            Raise('Не удалось открыть "Моя новостная лента"');
          toolBar := GetFromAnalyticReview('ТУЛБАР "ПОИСК: ПО РЕКВИЗИТАМ"');
          if NOT IsExists(toolBar) then Raise('Не удалось получить ТУЛБАР "ПОИСК: ПО РЕКВИЗИТАМ"'); 
          listTb := SetArrayFromTb(toolBar);
        end;}
      'Документ: Справка к документу':
        begin
          if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
          OpenInDocument('СПРАВКА');
          toolBar := GetFromEditor('ТУЛБАР "ДОКУМЕНТ: СПРАВКА К ДОКУМЕНТУ"');
        end;
      'Документ: Текст документа':
        begin
          if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
          toolBar := GetFromEditor('ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');
        end;
      'Меню (вкладка)':
        begin
          OpenMenuTab;
          toolBar := GetFromNavigator('ТУЛБАР "МЕНЮ"');
        end;
      'Мои документы (вкладка)':
        begin
          toolBar := GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', OpenMyDocTab);
          if NOT IsExists(toolBar) then Raise('Не удалось получить ТУЛБАР "МОИ ДОКУМЕНТЫ"'); 
          listTb := SetArrayFromTb(toolBar);
        end;      
      'Поиск: По источнику опубликования':
        begin
          if NOT GoToPPIO then Raise('Не удалось открыть ППИО');
          toolBar := GetFromPPIO('ТУЛБАР "ПОИСК: ПО ИСТОЧНИКУ ОПУБЛИКОВАНИЯ"');
        end;
      'Поиск: По реквизитам':
        begin
          if NOT GoToPPR then Raise('Не удалось открыть ППР');
          toolBar := GetFromPPR('ТУЛБАР "ПОИСК: ПО РЕКВИЗИТАМ"');
        end;
      'Поиск: По ситуации':
        begin
          if NOT GoToPPS then Raise('Не удалось открыть ППР');
          toolBar := GetFromPPS('ТУЛБАР "ПОИСК: ПО СИТУАЦИИ"');
        end;      
      'Предварительный просмотр печати':
        begin
          if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
          if NOT ClickToolBarButton(GetFromEditor('ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"'),
                                    'Предварительный просмотр') then 
            Raise('Не удалось открыть предварительный просмотр');
            
          toolBar := GetFromPreview('ТУЛБАР "ПРЕДВАРИТЕЛЬНЫЙ ПРОСМОТР ПЕЧАТИ"');
        end;
      'Синхронный просмотр: Текст документа':
        begin
          if NOT OpenObjectFromFolder(LIST_PATH, OpenMenuTab) then Raise('Не удалось открыть список');
          OpenInList('СИНХРОННЫЙ ПРОСМОТР');
          toolBar := GetFromSynchroView('ТУЛБАР "ТЕКСТ ДОКУМЕНТА"');
        end;
      'Список':
        begin
          if NOT OpenObjectFromFolder(LIST_PATH, OpenMenuTab) then Raise('Не удалось открыть список');          
          toolBar := GetFromList('ТУЛБАР "СПИСОК"');
        end;
      'Список: Ссылки из документа':
        begin
          if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
          OpenInDocument('ССЫЛКИ ИЗ ДОКУМЕНТА');
          toolBar := GetFromEditor('ТУЛБАР "СПИСОК: ССЫЛКИ ИЗ ДОКУМЕНТА"');
        end;
      'Список: Ссылки на документ':
        begin
          if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
          OpenInDocument('ССЫЛКИ НА ДОКУМЕНТ');
          toolBar := GetFromEditor('ТУЛБАР "СПИСОК: ССЫЛКИ НА ДОКУМЕНТ"');
        end;
      {'Толковый словарь: Перевод словарной статьи':
        begin
          if NOT GoToDictionary then Raise('Не удалось перейти в Толковый словарь');
          toolBar := GetFromDictionary('ТУЛБАР ПЕРЕВОД СТАТЬИ');
          if NOT IsExists(toolBar) then Raise('Не удалось получить ТУЛБАР ПЕРЕВОД СТАТЬИ'); 
          listTb := SetArrayFromTb(toolBar);
        end;}
      'Толковый словарь: Текст словарной статьи':
        begin
          if NOT GoToDictionary then Raise('Не удалось перейти в Толковый словарь');
          toolBar := GetFromDictionary('ТУЛБАР ТЕКСТ СТАТЬИ');          
        end;
    end;//case
     
    if NOT IsExists(toolBar) then Raise('Не удалось получить Тулбар для:' +  listTbSet[i]);
    if listTbSet[i] = 'Главная панель инструментов' then 
      listTb := SetArrayFromTb(toolBar)
    else
      listTb := SetArrayFromTb(toolBar, true, false);
    
    //if listTbSet[i] = 'Главная панель инструментов' then
    //begin    
    //  tempArr := arrayTbSet[i]; 
    //  VarArrayRedim(tempArr, VarArrayHighBound(tempArr, 1) - 2); 
    //  arrayTbSet[i] := tempArr;
    //end;
    if NOT CompareArray(listTb, arrayTbSet[i]) then 
    begin
      Log.Error('Состав тулбара "' + listTbSet[i] + '" не равен эталонному в диалоге настроек тулбаров');
      Raise;
    end;
  end;//for    
  result := true;  
  GoToMainMenu;
except
  Log.Message('HLTC101_2_3_1_Execute: ' + ExceptionMessage, '',  pmNormal, GetLogAttr('EXCEPTION'));
  if IsExists(tbSettings) then tbSettings.Close;
  result := false;         
  CommonExceptionHandler;
end;
end;



{
HLTC101.2: Диалог настройки
 HLTC101.2.3: В окне настроек тулбара на вкладке «Панели инструментов» должно быть две области:
   HLTC101.2.3.2: Доступные операции – операции, которые можно добавить в данный тулбар (кроме тех,
   которые уже добавлены, т.е присутствуют в Текущих опрерациях)
 
}
function HLTC101_2_3_2_Execute(var  current_state: OleVariant): OleVariant;
var  
  etalonSettings;
  list;
  listArray;
  comboBox;
  tbSettings;
  tempTimeOut;
  i;
begin
try  
  etalonSettings :=
  [
    ([ 'Главная панель инструментов', (['- Разделитель -', 'Меню (вкладка)', 'Информация о комплекте', 'Правовой навигатор', 'Справочная информация', 'Список конфигураций', 'Настройка конфигурации...', 'Выбор конфигурации', 'Поиск по реквизитам', 'Поиск по ситуации', 'Поиск по источнику опубликования', 'Толковый словарь', 'Обзор изменений законодательства', 'Список открытых окон', 'Упорядочить каскадом', 'Упорядочить по горизонтали', 'Упорядочить по вертикали', 'Гарант в Интернет', 'Список закладок...', 'Отмена'])]), 
    ([ 'Дерево пользователей и групп', (['- Разделитель -'])]), 
    ([ 'Документ: Аннотация к документу', (['- Разделитель -', 'Печать', 'Отмена изменений', 'Возврат изменений', 'Копировать', 'Вырезать', 'Вставить', 'Поиск контекста...', 'Установить закладку...', 'Поставить ссылку...', 'Найти в Толковом словаре', 'Вставить таблицу', 'Вставить строку', 'Удалить строку', 'Вставить колонку', 'Удалить колонку', 'Жирный', 'Курсив', 'Подчеркнутый', 'Перечеркнутый'])]), 
    ([ 'Документ: Консультация', (['- Разделитель -', 'Печать'])]), 
    ([ 'Документ: Обзор изменений законодательства', (['- Разделитель -', 'Печать', 'Вырезать', 'Показать/скрыть мои комментарии', 'Найти в Толковом словаре', 'Вставить таблицу', 'Вставить строку', 'Удалить строку', 'Вставить колонку', 'Удалить колонку', 'Жирный', 'Курсив', 'Подчеркнутый', 'Перечеркнутый'])]), 
    ([ 'Документ: Перевод', (['- Разделитель -', 'Печать', 'Отмена изменений', 'Возврат изменений', 'Копировать', 'Вырезать', 'Вставить', 'Установить закладку...', 'Поставить ссылку...', 'Найти в Толковом словаре', 'Вставить таблицу', 'Вставить строку', 'Удалить строку', 'Вставить колонку', 'Удалить колонку', 'Жирный', 'Курсив', 'Подчеркнутый', 'Перечеркнутый'])]),     
    ([ 'Документ: Предупреждение', (['- Разделитель -', 'Открыть полный текст', 'Выключить Машину времени и перейти в актуальную редакцию', 'Открыть актуальную редакцию', 'Выключить Машину времени', 'Копировать', 'Отмена изменений', 'Возврат изменений', 'Печать', 'Печать...', 'Предварительный просмотр'])]), 
    ([ 'Документ: Просмотр графического объекта', (['- Разделитель -', 'Печать', 'Копировать'])]), 
    ([ 'Документ: Редакции (вкладка)', (['- Разделитель -', 'Развернуть все', 'Свернуть все', 'Перенос по словам'])]), 
    ([ 'Документ: Справка к документу', (['- Разделитель -', 'Печать', 'Отмена изменений', 'Возврат изменений', 'Копировать', 'Вырезать', 'Вставить', 'Поиск контекста...', 'Показать/скрыть комментарии ГАРАНТа', 'Показать/скрыть мои комментарии', 'Установить закладку...', 'Поставить ссылку...', 'Найти в Толковом словаре', 'Вставить таблицу', 'Вставить строку', 'Удалить строку', 'Вставить колонку', 'Удалить колонку', 'Жирный', 'Курсив', 'Подчеркнутый', 'Перечеркнутый'])]), 
    ([ 'Документ: Структура (вкладка)', (['- Разделитель -', 'Копировать', 'Печать', 'Печать...', 'Предварительный просмотр', 'Экспорт в MS-Word', 'Респонденты к пункту оглавления', 'Корреспонденты к пункту оглавления', 'Установить закладку', {'Развернуть все', 'Свернуть все',} 'Перенос по словам'])]), 
    ([ 'Документ: Текст документа', (['- Разделитель -', 'Печать', 'Отмена изменений', 'Возврат изменений', 'Копировать', 'Вырезать', 'Вставить', 'Включить/Выключить Машину времени', 'Предыдущая редакция', 'Актуальная редакция', 'Следующая редакция', 'Список редакций', 'Справка к документу', 'Аннотация', 'Корреспонденты', 'Респонденты', 'Информация о документе', 'Перейти на закладку', 'Предыдущее извлечение в документе', 'Следующее извлечение в документе', 'Установить закладку...', 'Пользовательские корреспонденты (респонденты) 1', 'Пользовательские корреспонденты (респонденты) 2', 'Респонденты к фрагменту', 'Корреспонденты к фрагменту', 'Поставить ссылку...', 'Найти в Толковом словаре', 'Способ сброса статуса "изменен"', 'Вставить таблицу', 'Вставить строку', 'Удалить строку', 'Вставить колонку', 'Удалить колонку', 'Жирный', 'Курсив', 'Подчеркнутый', 'Перечеркнутый'])]), 
    ([ 'Документы на контроле (вкладка)', (['- Разделитель -', 'Развернуть все', 'Свернуть все', 'Перенос по словам'])]), 
    ([ 'Карточка Фильтров (5.x)', (['- Разделитель -', 'Ок', 'Отмена', 'Очистить'])]), 
    ([ 'Конфигурации (вкладка)', (['- Разделитель -', 'Восстановить', 'Развернуть все', 'Свернуть все', 'Перенос по словам'])]), 
    ([ 'Меню (вкладка)', (['- Разделитель -', 'Информация об элементе', 'Положение контекста', 'Порядок слов', 'Область поиска', 'Развернуть все', 'Свернуть все'])]),
    ([ 'Мои документы', (['- Разделитель -', 'Очистить Журнал работы', 'Загрузить из файла...', 'Показать свойства', 'Развернуть все', 'Свернуть все', 'Перенос по словам', 'Импортировать...', 'Экспортировать...'])]), 
    ([ 'Мои документы (вкладка)', (['- Разделитель -', 'Очистить Журнал работы', 'Загрузить из файла...', 'Показать свойства', 'Развернуть все', 'Свернуть все', 'Перенос по словам', 'Импортировать...', 'Экспортировать...'])]), 
    ([ 'Моя новостная лента (вкладка)', (['- Разделитель -'])]), 
    ([ 'Настройка конфигурации', (['- Разделитель -', 'Восстановить'])]), 
    ([ 'Поиск: Выбор реквизита', (['- Разделитель -', 'Удалить', 'Положение контекста', 'Порядок слов', 'Область поиска', 'И', 'КРОМЕ', 'Очистить условия', 'Ок', 'Развернуть все', 'Свернуть все', 'Перенос по словам'])]), 
    ([ 'Поиск: Выбранные значения реквизита', (['- Разделитель -', 'Развернуть все', 'Свернуть все', 'Перенос по словам'])]), 
    ([ 'Поиск: Обзор изменений законодательства', (['- Разделитель -', 'Ок', 'Отмена', 'Очистить'])]), 
    ([ 'Поиск: По источнику опубликования', (['- Разделитель -', 'Ок', 'Отмена', 'Очистить', 'Тип поиска'])]), 
    ([ 'Поиск: По реквизитам', (['- Разделитель -', 'Ок', 'Отмена', 'Очистить', 'Тип поиска'])]), 
    ([ 'Поиск: По реквизитам (стиль ГАРАНТ 5.x)', (['- Разделитель -', 'Ок', 'Отмена', 'Очистить'])]), 
    ([ 'Поиск: По ситуации', (['- Разделитель -', 'Ок', 'Отмена', 'Очистить', 'Ситуации первого уровня /Запрос/', 'Фильтры (вкладка)'])]), 
    ([ 'Поиск: По ситуации (стиль ГАРАНТ 5.x)', (['- Разделитель -', 'Ок', 'Отмена', 'Очистить', 'Положение контекста', 'Порядок слов', 'Область поиска'])]), 
    ([ 'Поиск: Ситуации первого уровня (вкладка)', (['- Разделитель -', 'Развернуть все', 'Свернуть все', 'Перенос по словам'])]), 
    ([ 'Правовой навигатор', (['- Разделитель -', 'Развернуть все', 'Свернуть все', 'Перенос по словам'])]), 
    ([ 'Предварительный просмотр печати', (['- Разделитель -', 'Печать...', 'Ок', 'Отмена'])]), 
    ([ 'Свойства пользователя', (['- Разделитель -', 'Вставить', 'Копировать', 'Вырезать', 'Удалить'])]), 
    ([ 'Синхронный просмотр: Списки корреспондентов/респондентов', (['- Разделитель -', 'Печать', 'Отмена изменений', 'Возврат изменений', 'Копировать', 'Вставить', 'Удалить', 'Сортировать', 'Установить направление сортировки', 'Дополнить список...', 'Пересечь со списком...', 'Вычесть список...', 'Экспорт списка в XML', 'Искать по реквизитам в текущем списке', 'Искать по источнику опубликования в текущем списке', 'Открыть в извлечениях', 'Печать... /Документ/', 'Предварительный просмотр печати', 'Сохранить (экспорт)...', 'Установить закладку...', 'Поставить на контроль', 'Печать... /Выделенные документы/', 'Сохранить (экспорт)... /Выделенные документы/',  'Сохранить в один файл (экспорт)...', 'Сохранить в Мои документы... /Выделенные документы/', 'Развернуть все', 'Свернуть все', 'Перенос по словам'])]), 
    ([ 'Синхронный просмотр: Справка к документу', (['- Разделитель -', 'Печать', 'Отмена изменений', 'Возврат изменений', 'Вырезать', 'Вставить', 'Установить закладку...', 'Поставить ссылку...', 'Вставить таблицу', 'Вставить строку', 'Удалить строку', 'Вставить колонку', 'Удалить колонку', 'Жирный', 'Курсив', 'Подчеркнутый', 'Перечеркнутый'])]), 
    ([ 'Синхронный просмотр: Текст документа', (['- Разделитель -', 'Печать', 'Отмена изменений', 'Возврат изменений', 'Копировать', 'Вырезать', 'Вставить', 'Перейти на закладку', 'Установить закладку...', 'Поставить ссылку...', 'Вставить таблицу', 'Вставить строку', 'Удалить строку', 'Вставить колонку', 'Удалить колонку', 'Жирный', 'Курсив', 'Подчеркнутый', 'Перечеркнутый'])]), 
    ([ 'Список', (['- Разделитель -', 'Печать', 'Отмена изменений', 'Возврат изменений', 'Копировать', 'Вставить', 'Удалить', 'Включить Машину времени с календарной даты', 'Выключить Машину времени и перейти в актуальную редакцию', 'Справка к списку', 'Дополнить список...', 'Пересечь со списком...', 'Вычесть список...', 'Экспорт списка в XML', 'Фильтры (вкладка)', 'Фильтры', 'Отменить все фильтры', 'Искать по реквизитам в текущем списке', 'Искать по источнику опубликования в текущем списке', 'Открыть в извлечениях', 'Справка к документу', 'Корреспонденты', 'Респонденты', 'Информация о документе', 'Печать... /Документ/', 'Предварительный просмотр печати', 'Сохранить (экспорт)...', 'Установить закладку...', 'Поставить на контроль', 'Печать... /Выделенные документы/', 'Сохранить (экспорт)... /Выделенные документы/',  'Сохранить в один файл (экспорт)...', 'Сохранить в Мои документы... /Выделенные документы/', 'Развернуть все', 'Свернуть все', 'Перенос по словам'])]), 
    ([ 'Список: Консультация', (['- Разделитель -', 'Печать', 'Выбрать из Моих документов...', 'Отмена изменений', 'Возврат изменений', 'Копировать', 'Вставить', 'Удалить', 'Открывать документы в извлечениях', 'Дополнить список...', 'Пересечь со списком...', 'Вычесть список...', 'Экспорт списка в XML', 'Фильтры (вкладка)', 'Фильтры', 'Отменить все фильтры', 'Искать по реквизитам в текущем списке', 'Искать по источнику опубликования в текущем списке', 'Открыть в извлечениях', 'Печать... /Документ/', 'Предварительный просмотр печати', 'Сохранить (экспорт)...', 'Установить закладку...', 'Поставить на контроль', 'Печать... /Выделенные документы/', 'Сохранить (экспорт)... /Выделенные документы/',  'Сохранить в один файл (экспорт)...', 'Сохранить в Мои документы... /Выделенные документы/', 'Развернуть все', 'Свернуть все', 'Перенос по словам'])]), 
    ([ 'Список: Корреспонденты', (['- Разделитель -', 'Печать', 'Отмена изменений', 'Возврат изменений', 'Копировать', 'Вставить', 'Удалить', 'Сортировать', 'Установить направление сортировки', 'Дополнить список...', 'Пересечь со списком...', 'Вычесть список...', 'Экспорт списка в XML', 'Искать по реквизитам в текущем списке', 'Искать по источнику опубликования в текущем списке', 'Открыть в извлечениях', 'Печать... /Документ/', 'Предварительный просмотр печати', 'Сохранить (экспорт)...', 'Установить закладку...', 'Поставить на контроль', 'Печать... /Выделенные документы/', 'Сохранить (экспорт)... /Выделенные документы/',  'Сохранить в один файл (экспорт)...', 'Сохранить в Мои документы... /Выделенные документы/', 'Развернуть все', 'Свернуть все', 'Перенос по словам'])]), 
    ([ 'Список: Корреспонденты/респонденты для фрагмента', (['- Разделитель -', 'Печать', 'Отмена изменений', 'Возврат изменений', 'Копировать', 'Вставить', 'Удалить', 'Сортировать', 'Установить направление сортировки', 'Дополнить список...', 'Пересечь со списком...', 'Вычесть список...', 'Экспорт списка в XML', 'Искать по реквизитам в текущем списке', 'Искать по источнику опубликования в текущем списке', 'Открыть в извлечениях', 'Печать... /Документ/', 'Предварительный просмотр печати', 'Сохранить (экспорт)...', 'Установить закладку...', 'Поставить на контроль', 'Печать... /Выделенные документы/', 'Сохранить (экспорт)... /Выделенные документы/',  'Сохранить в один файл (экспорт)...', 'Сохранить в Мои документы... /Выделенные документы/', 'Развернуть все', 'Свернуть все', 'Перенос по словам'])]), 
    ([ 'Список: Пользовательская вкладка корреспонденты (респонденты) 1', (['- Разделитель -', 'Печать', 'Отмена изменений', 'Возврат изменений', 'Копировать', 'Вставить', 'Удалить', 'Сортировать', 'Установить направление сортировки', 'Дополнить список...', 'Пересечь со списком...', 'Вычесть список...', 'Экспорт списка в XML', 'Искать по реквизитам в текущем списке', 'Искать по источнику опубликования в текущем списке', 'Открыть в извлечениях', 'Печать... /Документ/', 'Предварительный просмотр печати', 'Сохранить (экспорт)...', 'Установить закладку...', 'Поставить на контроль', 'Печать... /Выделенные документы/', 'Сохранить (экспорт)... /Выделенные документы/',  'Сохранить в один файл (экспорт)...', 'Сохранить в Мои документы... /Выделенные документы/', 'Развернуть все', 'Свернуть все', 'Перенос по словам'])]), 
    ([ 'Список: Пользовательская вкладка корреспонденты (респонденты) 2', (['- Разделитель -', 'Печать', 'Отмена изменений', 'Возврат изменений', 'Копировать', 'Вставить', 'Удалить', 'Сортировать', 'Установить направление сортировки', 'Дополнить список...', 'Пересечь со списком...', 'Вычесть список...', 'Экспорт списка в XML', 'Искать по реквизитам в текущем списке', 'Искать по источнику опубликования в текущем списке', 'Открыть в извлечениях', 'Печать... /Документ/', 'Предварительный просмотр печати', 'Сохранить (экспорт)...', 'Установить закладку...', 'Поставить на контроль', 'Печать... /Выделенные документы/', 'Сохранить (экспорт)... /Выделенные документы/',  'Сохранить в один файл (экспорт)...', 'Сохранить в Мои документы... /Выделенные документы/', 'Развернуть все', 'Свернуть все', 'Перенос по словам'])]), 
    ([ 'Список: Респонденты', (['- Разделитель -', 'Печать', 'Отмена изменений', 'Возврат изменений', 'Копировать', 'Вставить', 'Удалить', 'Сортировать', 'Установить направление сортировки', 'Дополнить список...', 'Пересечь со списком...', 'Вычесть список...', 'Экспорт списка в XML', 'Искать по реквизитам в текущем списке', 'Искать по источнику опубликования в текущем списке', 'Открыть в извлечениях', 'Печать... /Документ/', 'Предварительный просмотр печати', 'Сохранить (экспорт)...', 'Установить закладку...', 'Поставить на контроль', 'Печать... /Выделенные документы/', 'Сохранить (экспорт)... /Выделенные документы/',  'Сохранить в один файл (экспорт)...', 'Сохранить в Мои документы... /Выделенные документы/', 'Развернуть все', 'Свернуть все', 'Перенос по словам'])]), 
    ([ 'Список: Справка к списку', (['- Разделитель -', 'Копировать /Правка/', 'Отмена изменений', 'Возврат изменений', 'Печать /Файл/', 'Печать...', 'Предварительный просмотр'])]), 
    ([ 'Толковый словарь: Перевод словарной статьи', (['- Разделитель -', 'Печать', 'Отмена изменений', 'Возврат изменений', 'Вырезать', 'Вставить', 'Поставить ссылку...', 'Вставить таблицу', 'Вставить строку', 'Удалить строку', 'Вставить колонку', 'Удалить колонку', 'Жирный', 'Курсив', 'Подчеркнутый', 'Перечеркнутый'])]), 
    ([ 'Толковый словарь: Список терминов (вкладка)', (['- Разделитель -', 'Русский язык', 'Английский язык', 'Немецкий язык', 'Французский язык', 'Испанский язык', 'Итальянский язык', 'Положение контекста', 'Порядок слов', 'Область поиска', 'Развернуть все', 'Свернуть все', 'Перенос по словам'])]), 
    ([ 'Толковый словарь: Текст словарной статьи', (['- Разделитель -', 'Сохранить в Мои документы...', 'Выбрать из Моих документов...', 'Печать', 'Отмена изменений', 'Возврат изменений', 'Вырезать', 'Вставить', 'Термины Толкового словаря', 'Перейти на закладку', 'Установить закладку...', 'Поставить ссылку...', 'Найти в Толковом словаре', 'Вставить таблицу', 'Вставить строку', 'Удалить строку', 'Вставить колонку', 'Удалить колонку', 'Жирный', 'Курсив', 'Подчеркнутый', 'Перечеркнутый'])]), 
    ([ 'Фильтры (вкладка)', (['- Разделитель -', 'Отменить все фильтры', 'Применить фильтры заново', 'Фильтры (вкладка)', 'Удалить', 'Применить фильтр', 'Развернуть все', 'Свернуть все', 'Перенос по словам'])]) 
  ];
  
  GoToMainMenu;
  if NOT SetDefaultToolBarSettings then
  Log.Warning('Не удалось установить настройки Тулбара по умолчанию');
  tbSettings := OpenTbSettings(true);
  if NOT IsExists(tbSettings) then Raise('Не удалось получить "Настройка панели инструментов"');
  comboBox := GetFromTbSettings('КОМБОБОКС ВЫБОРА ТУЛБАРА');
  if NOT IsExists(comboBox) then  Raise('Не удалось получить комбобокс');
  list := GetFromTbSettings('СПИСОК "ДОСТУПНЫЕ ОПЕРАЦИИ"');
  if NOT IsExists(list) then Raise('Не удалдось получить список');
  tempTimeOut := Options.Run.Delay;
  Options.Run.Delay := 0;
  for i := VarArrayLowBound(etalonSettings, 1) to VarArrayHighBound(etalonSettings, 1) do
  begin  
    if NOT SelectInComboBox(comboBox, etalonSettings[i][0]) then Raise('Не удалось переключить комбобокс');
    listArray :=  SetArrayFromTbSetting(list);
    if NOT CompareArray(listArray, etalonSettings[i][1]) then
    begin
      Log.Error('Доступные операции для Тулбара " ' + etalonSettings[i][0] + 'не равны эталонным');
      Raise;
    end;  
  end;//for
  Options.Run.Delay := tempTimeOut;
  tbSettings.Close;
  result := true;  
  GoToMainMenu;
except
  Log.Message('HLTC101_2_3_2_Execute: ' + ExceptionMessage, '',  pmNormal, GetLogAttr('EXCEPTION'));
  result := false;         
  CommonExceptionHandler;
end;
end;

{
HLTC101.2: Диалог настройки
 HLTC101.2.3: В окне настроек тулбара на вкладке «Панели инструментов» должно быть две области:
  HLTC101.2.3.3: Порядок операций \ кнопок на тулбаре можно менять при промощи кнопок со стрелками 
  «вверх \ вниз», при этом изменения должны отражаться в списке текущих операций тулбара. Убедиться, что
  порядок операций на тулбаре меняется и при нажатии кнопки «Применить» и при нажатии кнопки «Ок»,
  находящейся внизу диалога настройки тулбара.
  
  !!В логе этого скрипта будут варнинги "Массивы не равны" 
}
function HLTC101_2_3_3_Execute(var  current_state: OleVariant): OleVariant;
const
  OPER = 'Печать...';   
  ITEM_TOOLBAR = 'Документ: Текст документа';
var
  
  tbSettings;
  arrayCurerntSettings;
  arrayCurerntSettingsAfterEdit;  
  buttonsOnToolBar;
  button;
  listCurerntSettings;
  comboBoxObjectSystem;
  toolBar;
begin
try  
  GoToMainMenu;
  if NOT SetDefaultToolBarSettings then
    Log.Warning('Не удалось установить настройки Тулбара по умолчанию');
  //Проверяем изменился ли порядок элементов Тулбара после перемещения одной из текущих операций Вниз
  //в окне настройки тулбаров.
  tbSettings := OpenTbSettings(true);
  if NOT IsExists(tbSettings) then Raise('Не удалось получить "Настройка панели инструментов"');
  comboBoxObjectSystem := GetFromTbSettings('КОМБОБОКС ВЫБОРА ТУЛБАРА');  
  if NOT SelectInComboBox(comboBoxObjectSystem, ITEM_TOOLBAR) then Raise('Не удалось изменить значение комбобокса');    
  listCurerntSettings := GetFromTbSettings('СПИСОК "ТЕКУЩИЕ ОПЕРАЦИИ"');
  arrayCurerntSettings := SetArrayFromTbSetting(listCurerntSettings);
  if NOT Position_Internal(listCurerntSettings, OPER, '\', false, 'isPressHome:=true') then
    Raise('Не удалось спозиционироваться на операцию:' + OPER);
  button := GetFromTbSettings('КНОПКА "СТРЕЛКА ВНИЗ"');
  if NOT button.Enabled then Raise('Кнопка "со стрелкой вниз" не активна');
  button.Click;
  arrayCurerntSettingsAfterEdit := SetArrayFromTbSetting(listCurerntSettings);
  if CompareArray(arrayCurerntSettings, arrayCurerntSettingsAfterEdit) then
  begin
    Log.Error('После нажатия кнопки "со стрелкой вниз" список Текущих операций не изменился');
    Raise;
  end;
  GetFromTbSettings('КНОПКА "ОК"').Click;
  if NOT OpenDocByNumber(10003000) then Raise('Не удалось открыть документ по номеру');
  toolBar := GetFromEditor('ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');
  if NOT IsExists(toolBar) then Raise ('Не удалось получить ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');  
  buttonsOnToolBar := SetArrayFromTb(toolBar);
  //VarArrayRedim(arrayCurerntSettingsAfterEdit, VarArrayHighBound(arrayCurerntSettingsAfterEdit, 1) - 2);
  
  if NOT CompareArray(buttonsOnToolBar, arrayCurerntSettingsAfterEdit) then
  begin
    Log.Error('Состав тулбара не эталонный');
    Raise;
  end;
  //Проверяем изменился ли порядок элементов Тулбара после перемещения одной из текущих операций Вверх
  //в окне настройки тулбаров
  tbSettings := OpenTbSettings(true);
  if NOT IsExists(tbSettings) then Raise('Не удалось получить "Настройка панели инструментов"');
  comboBoxObjectSystem := GetFromTbSettings('КОМБОБОКС ВЫБОРА ТУЛБАРА');  
  if NOT SelectInComboBox(comboBoxObjectSystem, ITEM_TOOLBAR) then Raise('Не удалось изменить значение комбобокса');    
  listCurerntSettings := GetFromTbSettings('СПИСОК "ТЕКУЩИЕ ОПЕРАЦИИ"');
  arrayCurerntSettings := SetArrayFromTbSetting(listCurerntSettings);
  if NOT Position_Internal(listCurerntSettings, OPER, '\', false, 'isPressHome:=true') then
    Raise('Не удалось спозиционироваться на операцию:' + OPER);
  button := GetFromTbSettings('КНОПКА "СТРЕЛКА ВВЕРХ"');
  if NOT button.Enabled then Raise('Кнопка "со стрелкой вверх" не активна');
  button.Click;
  arrayCurerntSettingsAfterEdit := SetArrayFromTbSetting(listCurerntSettings);
  if CompareArray(arrayCurerntSettings, arrayCurerntSettingsAfterEdit) then
  begin
    Log.Error('После нажатия кнопки "со стрелкой вверх" список Текущих операций не изменился');
    Raise;
  end;
  GetFromTbSettings('КНОПКА "ОК"').Click;
  if NOT OpenDocByNumber(10003000) then Raise('Не удалось открыть документ по номеру');
  toolBar := GetFromEditor('ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');
  if NOT IsExists(toolBar) then Raise ('Не удалось получить ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');
  buttonsOnToolBar := SetArrayFromTb(toolBar);
  //VarArrayRedim(arrayCurerntSettingsAfterEdit, VarArrayHighBound(arrayCurerntSettingsAfterEdit, 1) - 2);
   
  if NOT CompareArray(buttonsOnToolBar, arrayCurerntSettingsAfterEdit) then
  begin
    Log.Error('Состав тулбара не эталонный');
    Raise;
  end;
  //Проверяем изменился ли порядок элементов Тулбара после перемещения одной из текущих операций Вниз
  //в окне настройки тулбаров. Только в конце нажимаем не OK, а ПРИМЕНИТЬ.
  tbSettings := OpenTbSettings(true);
  if NOT IsExists(tbSettings) then Raise('Не удалось получить "Настройка панели инструментов"');
  comboBoxObjectSystem := GetFromTbSettings('КОМБОБОКС ВЫБОРА ТУЛБАРА');  
  if NOT SelectInComboBox(comboBoxObjectSystem, ITEM_TOOLBAR) then Raise('Не удалось изменить значение комбобокса');    
  listCurerntSettings := GetFromTbSettings('СПИСОК "ТЕКУЩИЕ ОПЕРАЦИИ"');
  arrayCurerntSettings := SetArrayFromTbSetting(listCurerntSettings);
  if NOT Position_Internal(listCurerntSettings, OPER, '\', false, 'isPressHome:=true') then
    Raise('Не удалось спозиционироваться на операцию:' + OPER);
  button := GetFromTbSettings('КНОПКА "СТРЕЛКА ВНИЗ"');
  if NOT button.Enabled then Raise('Кнопка "со стрелкой вниз" не активна');
  button.Click;
  arrayCurerntSettingsAfterEdit := SetArrayFromTbSetting(listCurerntSettings);
  if CompareArray(arrayCurerntSettingsAfterEdit, arrayCurerntSettings) then
  begin
    Log.Error('После нажатия кнопки "со стрелкой вниз" список Текущих операций не изменился');
    Raise;
  end;
  GetFromTbSettings('КНОПКА "ПРИМЕНИТЬ"').Click;
  GetFromTbSettings('КНОПКА "ОТМЕНА"').Click;
  if NOT OpenDocByNumber(10003000) then Raise('Не удалось открыть документ по номеру');
  toolBar := GetFromEditor('ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');
  if NOT IsExists(toolBar) then Raise ('Не удалось получить ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');
  buttonsOnToolBar := SetArrayFromTb(toolBar);
  //VarArrayRedim(arrayCurerntSettingsAfterEdit, VarArrayHighBound(arrayCurerntSettingsAfterEdit, 1) - 2);
  
  if NOT CompareArray(buttonsOnToolBar, arrayCurerntSettingsAfterEdit) then
  begin
    Log.Error('Состав тулбара не эталонный');
    Raise;
  end;
  if NOT SetDefaultToolBarSettings then
    Log.Warning('Не удалось установить настройки Тулбара по умолчанию');
  result := true;  
  GoToMainMenu;
except
  Log.Message('HLTC101_2_3_3_Execute: ' + ExceptionMessage, '',  pmNormal, GetLogAttr('EXCEPTION'));
  result := false;         
  CommonExceptionHandler;
end;
end;

{
HLTC101.2: Диалог настройки
 HLTC101.2.3: В окне настроек тулбара на вкладке «Панели инструментов» должно быть две области:
  HLTC101.2.3.4: Проверить, что есть возможность перемещать элементы списков «Текущие операции» и 
  «Доступные операции» между собой при помощи кнопок со стрелками «влево \ вправо». Убедиться, операции
  доступные на тулбаре изменяются при нажатии кнопки «Применить» и при нажатии кнопки «Ок», находящейся
  внизу диалога настройки тулбара.
 
}
function HLTC101_2_3_4_Execute(var  current_state: OleVariant): OleVariant;
const
  PATH_TEST = 'Моя новостная лента';
  PATH_LIST_CURENT_OPER_1 = 'Назад';
  PATH_LIST_CURENT_OPER_2 = 'Мои документы';
  PATH_LIST_FREE_OPER_1   = 'Информация о комплекте';
  PATH_LIST_FREE_OPER_2   = 'Гарант в Интернет';
var  
  listCurrentOper, listFreeOper;
  buttonLeft, buttonRight;
  i;
  arrayTb, arrayTbSet;
  tbSettings;
begin
try  
  GoToMainMenu;
  if NOT SetDefaultToolBarSettings then
    Log.Warning('Не удалось установить настройки Тулбара по умолчанию');
  tbSettings := OpenTbSettings(true);
  if NOT IsExists(tbSettings) then Raise('Не удалось получить "Настройка панели инструментов"');  
  listCurrentOper := GetFromTbSettings('СПИСОК "ТЕКУЩИЕ ОПЕРАЦИИ"');
  if NOT IsExists(listCurrentOper) then Raise('Не удалось получить СПИСОК "ТЕКУЩИЕ ОПЕРАЦИИ"');  
  listFreeOper := GetFromTbSettings('СПИСОК "ДОСТУПНЫЕ ОПЕРАЦИИ"');
  if NOT IsExists(listCurrentOper) then Raise('Не удалось получить СПИСОК "ДОСТУПНЫЕ ОПЕРАЦИИ"');

  buttonLeft := GetFromTbSettings('КНОПКА "СТРЕЛКА ВЛЕВО"');
  if NOT IsExists(buttonLeft) then Raise('Не удалось получить КНОПКА "СТРЕЛКА ВЛЕВО"');
  buttonRight := GetFromTbSettings('КНОПКА "СТРЕЛКА ВПРАВО"');
  if NOT IsExists(buttonRight) then Raise('Не удалось получить КНОПКА "СТРЕЛКА ВПРАВО"');
  
  if NOT Position_Internal(listCurrentOper, PATH_TEST, '\', false, 'isPressHome:=true') then 
    Raise('Не удалось спозиционироваться на элементе: "' + PATH_TEST + '"');
  buttonLeft.Click;
  if Position_Internal(listCurrentOper, PATH_TEST, '\', false, 'isPressHome:=true') then 
    Raise('Элемент не перемещён в список "Доступные операции"');
  //Что б Моя новостная лента добавилась не в самый конец
  listCurrentOper.SetFocus;
  Sys.Keys('[Home]');  
  if NOT Position_Internal(listFreeOper, PATH_TEST, '\', false, 'isPressHome:=true') then 
    Raise('Не удалось спозиционироваться на элементе: "' + PATH_TEST + '"');    
  buttonRight.Click;
  if Position_Internal(listFreeOper, PATH_TEST, '\', false, 'isPressHome:=true') then 
    Raise('Элемент не перемещён в список "Текущие операции"');
    
  if NOT Position_Internal(listCurrentOper, PATH_TEST, '\', false, 'isPressHome:=true') then 
    Raise('Не удалось спозиционироваться на элементе: "' + PATH_TEST + '"');  
  //Проверяем, что перемещение элементов правильно отражается на тулбе
  if NOT Position_Internal(listCurrentOper, PATH_LIST_CURENT_OPER_1, '\', false, 'isPressHome:=true') then 
    Raise('Не удалось спозиционироваться на элементе: "' + PATH_LIST_CURENT_OPER_1 + '"');      
  buttonLeft.Click;    
  if NOT Position_Internal(listCurrentOper, PATH_LIST_CURENT_OPER_2, '\', false, 'isPressHome:=true') then 
    Raise('Не удалось спозиционироваться на элементе: "' + PATH_LIST_CURENT_OPER_2 + '"');
  buttonLeft.Click;
  
  if NOT Position_Internal(listFreeOper, PATH_LIST_FREE_OPER_1, '\', false, 'isPressHome:=true') then 
    Raise('Не удалось спозиционироваться на элементе: "' + PATH_LIST_FREE_OPER_1 + '"');    
  buttonRight.Click;    
  if NOT Position_Internal(listFreeOper, PATH_LIST_FREE_OPER_2, '\', false, 'isPressHome:=true') then 
    Raise('Не удалось спозиционироваться на элементе: "' + PATH_LIST_FREE_OPER_2 + '"');
  buttonRight.Click;
  
  arrayTbSet := SetArrayFromTbSetting(listCurrentOper);
  GetFromTbSettings('КНОПКА "ОК"').Click;  
  arrayTb := SetArrayFromTb(GetFromMainWindow('ТУЛБАР "ГЛАВНАЯ ПАНЕЛЬ ИНСТРУМЕНТОВ"'));
  VarArrayRedim(arrayTbSet, VarArrayHighBound(arrayTbSet, 1) - 2);
  
  if NOT CompareArray( arrayTb, arrayTbSet) then
  begin
    Log.Error('Тулбар, после его изменения(перемещения элементов вверх\вниз) не Эталонный');
    Raise;
  end;
  
  //Проверяем аналогичную ситуацию, но при нажатии "Применить"
  tbSettings := OpenTbSettings(true);
  if NOT IsExists(tbSettings) then Raise('Не удалось получить "Настройка панели инструментов"');  
  listCurrentOper := GetFromTbSettings('СПИСОК "ТЕКУЩИЕ ОПЕРАЦИИ"');
  if NOT IsExists(listCurrentOper) then Raise('Не удалось получить СПИСОК "ТЕКУЩИЕ ОПЕРАЦИИ"');  
  listFreeOper := GetFromTbSettings('СПИСОК "ДОСТУПНЫЕ ОПЕРАЦИИ"');
  if NOT IsExists(listCurrentOper) then Raise('Не удалось получить СПИСОК "ДОСТУПНЫЕ ОПЕРАЦИИ"');  
  
  if NOT Position_Internal(listFreeOper, PATH_LIST_CURENT_OPER_1, '\', false, 'isPressHome:=true') then 
    Raise('Не удалось спозиционироваться на элементе: "' + PATH_LIST_CURENT_OPER_1 + '"');    
  buttonRight := GetFromTbSettings('КНОПКА "СТРЕЛКА ВПРАВО"');
  if NOT IsExists(buttonRight) then Raise('Не удалось получить КНОПКА "СТРЕЛКА ВПРАВО"');
  buttonRight.Click;    
  if NOT Position_Internal(listFreeOper, PATH_LIST_CURENT_OPER_2, '\', false, 'isPressHome:=true') then 

    Raise('Не удалось спозиционироваться на элементе: "' + PATH_LIST_CURENT_OPER_2 + '"');
  buttonRight.Click;
  
  if NOT Position_Internal(listCurrentOper, PATH_LIST_FREE_OPER_1, '\', false, 'isPressHome:=true') then 
    Raise('Не удалось спозиционироваться на элементе: "' + PATH_LIST_FREE_OPER_1 + '"');    
  buttonLeft := GetFromTbSettings('КНОПКА "СТРЕЛКА ВЛЕВО"');
  if NOT IsExists(buttonLeft) then Raise('Не удалось получить КНОПКА "СТРЕЛКА ВЛЕВО"');
  buttonLeft.Click;    
  if NOT Position_Internal(listCurrentOper, PATH_LIST_FREE_OPER_2, '\', false, 'isPressHome:=true') then 
    Raise('Не удалось спозиционироваться на элементе: "' + PATH_LIST_FREE_OPER_2 + '"');
  buttonLeft.Click;
  
  arrayTbSet := SetArrayFromTbSetting(listCurrentOper);
  GetFromTbSettings('КНОПКА "ПРИМЕНИТЬ"').Click;
  tbSettings.Click(tbSettings.Width - 15,  15);//Закрываем окно с настройками  
  arrayTb := SetArrayFromTb(GetFromMainWindow('ТУЛБАР "ГЛАВНАЯ ПАНЕЛЬ ИНСТРУМЕНТОВ"'));
  VarArrayRedim(arrayTbSet, VarArrayHighBound(arrayTbSet, 1) - 2);
  
  if NOT CompareArray( arrayTb, arrayTbSet) then
  begin
    Log.Error('Тулбар, после его изменения(перемещения элементов вверх\вниз) не Эталонный');
    Raise;
  end;
  
  if NOT SetDefaultToolBarSettings then
    Log.Warning('Не удалось установить настройки Тулбара по умолчанию');
  result := true;  
  GoToMainMenu;
except
  Sys.Keys('[Esc]');
  Log.Message('HLTC101_2_3_4_Execute: ' + ExceptionMessage, '',  pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  if NOT SetDefaultToolBarSettings then
    Log.Warning('Не удалось установить настройки Тулбара по умолчанию');         
  CommonExceptionHandler;
end;
end;


{
HLTC101.2: Диалог настройки
 HLTC101.2.3: В окне настроек тулбара на вкладке «Панели инструментов» должно быть две области:
  HLTC101.2.3.5: Убедиться, что перемещать элементы как внутри списков, так и между ними можно
  при помощи операций Drag’n’drop (перетаскивание элементов мышью). 
}
function HLTC101_2_3_5_Execute(var  current_state: OleVariant): OleVariant;
const
  OPER_START = 'Назад';
  OPER_END   = 'Уменьшить шрифт';
  OPER_TEST  = 'Информация о комплекте';
var  
  listCurrentOper, listFreeOper;
  buttonDown;
  i;
  arrayTbSettingStart,arrayTbSettingEnd;
  tbSettings;
  x1, y1, x2, y2;
begin
try
  GoToMainMenu;
  if NOT SetDefaultToolBarSettings then
    Log.Warning('Не удалось установить настройки Тулбара по умолчанию');
  tbSettings := OpenTbSettings(true);
  if NOT IsExists(tbSettings) then Raise('Не удалось получить "Настройка панели инструментов"');
  listCurrentOper := GetFromTbSettings('СПИСОК "ТЕКУЩИЕ ОПЕРАЦИИ"');
  if NOT IsExists(listCurrentOper) then Raise('Не удалось получить СПИСОК "ТЕКУЩИЕ ОПЕРАЦИИ"');  
  listFreeOper := GetFromTbSettings('СПИСОК "ДОСТУПНЫЕ ОПЕРАЦИИ"');
  if NOT IsExists(listCurrentOper) then Raise('Не удалось получить СПИСОК "ДОСТУПНЫЕ ОПЕРАЦИИ"');
  
  if NOT Position_Internal(listCurrentOper, OPER_START, '\', false, 'isPressHome:=true') then 
    Raise('Не удалось спозиционироваться на элементе: "' + OPER_START + '"');
  buttonDown := GetFromTbSettings('КНОПКА "СТРЕЛКА ВНИЗ"');
  if NOT IsExists(buttonDown) then Raise('Не удалось получить КНОПКА "СТРЕЛКА ВНИЗ"');  
  for i := 1 to 7 do
    buttonDown.Click;
  arrayTbSettingStart := SetArrayFromTbSetting(listCurrentOper);
  GetFromTbSettings('КНОПКА "ВОССТАНОВИТЬ ВСЁ"').Click;
  WaitForConfirmationWindow(Options.Run.Timeout div 15, 'Да');
  Delay(1000 * 5);//Пока форма очухаится после "Восстановить всё
  
  if NOT Position_Internal(listCurrentOper, OPER_START, '\', false, 'isPressHome:=true') then 
    Raise('Не удалось спозиционироваться на элементе: "' + OPER_START + '"');
  x1 := 0; y1 := 0;  
  if NOT FindPicture(listCurrentOper, 'start_selection.bmp', x1, y1) then Raise('Не удалось найти выделенный элемент в списке Текущих операций');
  if NOT Position_Internal(listCurrentOper, OPER_END, '\', false, 'isPressHome:=true') then 
    Raise('Не удалось спозиционироваться на элементе: "' + OPER_END + '"');
  x2 := 0; y2 := 0;  
  if NOT FindPicture(listCurrentOper, 'start_selection.bmp', x2, y2) then Raise('Не удалось найти выделенный элемент в списке Текущих операций');
  if NOT DragExt(listCurrentOper, x1, y1, x2-x1, y2-y1, '', 10) then Raise('Не удалось перетянуть при помощи DragExt');
  arrayTbSettingEnd := SetArrayFromTbSetting(listCurrentOper);
  if NOT CompareArray(arrayTbSettingStart, arrayTbSettingEnd) then
  begin
    Log.Error('После перетаскивания элемента в списке "Текущие операции" окне настройки Тулбаров, порядок элементов в списке не эталонный');
    Raise;
  end;
  
  GetFromTbSettings('КНОПКА "ВОССТАНОВИТЬ ВСЁ"').Click;
  WaitForConfirmationWindow(Options.Run.Timeout div 15, 'Да');
  Delay(1000 * 5);//Пока форма очухаится после "Восстановить всё
  //Перетягиваем элемент из одного списка в другой  
  if NOT Position_Internal(listCurrentOper, OPER_START, '\', false, 'isPressHome:=true') then 
    Raise('Не удалось спозиционироваться на элементе: "' + OPER_START + '"');
  if NOT FindPicture(listCurrentOper, 'start_selection.bmp', x1, y1) then Raise('Не удалось найти выделенный элемент в списке Текущих операций');
  common.ClientToScreen(listCurrentOper, x1, y1);
  if NOT Position_Internal(listFreeOper, OPER_TEST, '\', false, 'isPressHome:=true') then 
    Raise('Не удалось спозиционироваться на элементе: "' + OPER_START + '"');
  if NOT FindPicture(listFreeOper, 'start_selection.bmp', x2, y2) then Raise('Не удалось найти выделенный элемент в списке Текущих операций');
  common.ClientToScreen(listFreeOper, x2, y2);
  if NOT DragExt(nil, x1, y1, x2-x1, y2-y1, '', 10) then Raise('Не удалось перетянуть при помощи DragExt');
  //Проверяем, утянулся ли элемент из списка, в котором он находился
  if Position_Internal(listCurrentOper, OPER_START, '\', false, 'isPressHome:=true') then 
  begin
    Log.Error('После попытки перетянуть элемент "' + OPER_START + '" из списка Текущих операций в Доступные, он почему то остался в Текущих');
    Raise;
  end;
  //Проверяем, перетянулся ли элемент в нужный список и на нужную позицию
  if NOT Position_Internal(listFreeOper, OPER_TEST, '\', false, 'isPressHome:=true') then 
    Raise('Не удалось спозиционироваться на элементе: "' + OPER_START + '"');
  Sys.Keys('[Up]');
  if NOT StringCompare(common.GetWindowText(ListFreeOper.Handle), OPER_START) then
  begin
    Log.Error('В списке "Доступные операции" в нужном месте не эталонный элемент');
    Raise;
  end; 
  tbSettings.Close;  
  if NOT SetDefaultToolBarSettings then
  Log.Warning('Не удалось установить настройки Тулбара по умолчанию');
  result := true;  
  GoToMainMenu;
except
  Sys.Keys('[Esc]');
  Log.Message('HLTC101_2_3_5_Execute: ' + ExceptionMessage, '',  pmNormal, GetLogAttr('EXCEPTION'));
  SetDefaultToolBarSettings;
  result := false;         
  CommonExceptionHandler;
end;
end;

{
HLTC101.2: Диалог настройки
 HLTC101.2.3: В окне настроек тулбара на вкладке «Панели инструментов» должно быть две области:
  HLTC101.2.3.7: Должна быть возможность выбора способа отображения операций:
    HLTC101.2.3.7.1: Значок – операции на тулбаре отображаются в виде значков.    
    HLTC101.2.3.7.2: Значок и подпись - операции на тулбаре отображаются в виде значков с подписью.
}
//Проверяем для 3-х кнопок: Меню, Правовая поддержка, Журнал Работы
function HLTC101_2_3_7_Execute(var  current_state: OleVariant): OleVariant;
const
  OPER_1 = 'Увеличить шрифт';
  OPER_2 = 'Правовая поддержка';
  OPER_3 = 'Журнал работы';
var  
  listOper;
  tbSettings;
  radioButton;//Значок \Значок и подпись
  toolBar;
  iconButton;
  buttonCoord;
  button;
  x, y;
  i;
begin
try  
  GoToPPR;
  tbSettings := OpenTbSettings(true);
  if NOT IsExists(tbSettings) then Raise('Не удалось получить "Настройка панели инструментов"');
  radioButton := GetFromTbSettings('РАДИОКНОПКА "ЗНАЧОК"');
  if NOT IsExists(radioButton) then Raise('Не удалось получить РАДИОКНОПКА "ЗНАЧОК"');  
  listOper := GetFromTbSettings('СПИСОК "ТЕКУЩИЕ ОПЕРАЦИИ"');
  if NOT IsExists(listOper) then Raise('Не удалось получить СПИСОК "ТЕКУЩИЕ ОПЕРАЦИИ"'); 
  //Устанавливаем для 1-ой операци "Значок"
  if NOT Position_Internal(listOper, OPER_1, '\', false, 'isPressHome:=true') then 
    Raise('Не удалось спозиционироваться на элементе: "' + OPER_1 + '"');    
  radioButton.Click;
  if NOT radioButton.Checked then Raise('РадиКнопка не стала выбранной');  
  //Устанавливаем для 2-ой операци "Значок"
  if NOT Position_Internal(listOper, OPER_2, '\', false, 'isPressHome:=true') then 
    Raise('Не удалось спозиционироваться на элементе: "' + OPER_2 + '"');    
  radioButton.Click;
  if NOT radioButton.Checked then Raise('РадиКнопка не стала выбранной');  
  //Устанавливаем для 3-ей операци "Значок"
  if NOT Position_Internal(listOper, OPER_3, '\', false, 'isPressHome:=true') then 
    Raise('Не удалось спозиционироваться на элементе: "' + OPER_3 + '"');    
  radioButton.Click;
  if NOT radioButton.Checked then Raise('РадиКнопка не стала выбранной');  
  GetFromTbSettings('КНОПКА "ОК"').Click;
  //Проверяем, что действительно кнопки на тулбаре отображаются, как "Значёк"
  toolBar := GetFromMainWindow('ТУЛБАР "ГЛАВНАЯ ПАНЕЛЬ ИНСТРУМЕНТОВ"');
  if NOT IsExists(toolBar) then Raise('Не удалось получить ТУЛБАР "ГЛАВНАЯ ПАНЕЛЬ ИНСТРУМЕНТОВ"');
  for i := 1 to 2  do
  begin
    case i of
      0: begin
           button := GetToolBarObject(toolBar, 'BUTTON', OPER_1);
           iconButton := 'large_font.BIG.bmp';
         end;
      1: begin
           button := GetToolBarObject(toolBar, 'BUTTON', OPER_2);
           iconButton := 'PravPod_Button.bmp';
         end;  
      2: begin
           button := GetToolBarObject(toolBar, 'BUTTON', OPER_3);
           iconButton := 'journal.bmp';
         end;  
    end;//case
    if NOT IsExists(button) then Raise ('Не удалось получить кнопку:' + OPER_1);
    if NOT FindPicture(button, iconButton, x, y) then
    begin
      Log.Error('Не удалось найти на кнопке "' + button.Caption + '" её иконку при состоянии Отображения кнопки- "Значок"');
      Raise;
    end;
    AddToArray(buttonCoord, [button.Height, button.Width]);    
  end;//for
  //Выставляем для кнопок отображение "Значок и подпись"
  tbSettings := OpenTbSettings(true);
  if NOT IsExists(tbSettings) then Raise('Не удалось получить "Настройка панели инструментов"');
  radioButton := GetFromTbSettings('РАДИОКНОПКА "ЗНАЧОК И ПОДПИСЬ"');
  if NOT IsExists(radioButton) then Raise('Не удалось получить РАДИОКНОПКА "ЗНАЧОК И ПОДПИСЬ"');    
  listOper := GetFromTbSettings('СПИСОК "ТЕКУЩИЕ ОПЕРАЦИИ"');
  if NOT IsExists(listOper) then Raise('Не удалось получить СПИСОК "ТЕКУЩИЕ ОПЕРАЦИИ"'); 
  //Устанавливаем для 1-ой операци "Значок и подпись"
  if NOT Position_Internal(listOper, OPER_1, '\', false, 'isPressHome:=true') then 
    Raise('Не удалось спозиционироваться на элементе: "' + OPER_1 + '"');    
  radioButton.Click;
  if NOT radioButton.Checked then Raise('РадиКнопка не стала выбранной');  
  //Устанавливаем для 2-ой операци "Значок и подпись"
  if NOT Position_Internal(listOper, OPER_2, '\', false, 'isPressHome:=true') then 
    Raise('Не удалось спозиционироваться на элементе: "' + OPER_2 + '"');    
  radioButton.Click;
  if NOT radioButton.Checked then Raise('РадиКнопка не стала выбранной');
  //Устанавливаем для 3-ей операци "Значок и подпись"
  if NOT Position_Internal(listOper, OPER_3, '\', false, 'isPressHome:=true') then 
    Raise('Не удалось спозиционироваться на элементе: "' + OPER_3 + '"');    
  radioButton.Click;
  if NOT radioButton.Checked then Raise('РадиКнопка не стала выбранной');  
  GetFromTbSettings('КНОПКА "ОК"').Click;
  //Проверяем, что действительно кнопки на тулбаре отображаются, как "Значёк и подпись"
  toolBar := GetFromMainWindow('ТУЛБАР "ГЛАВНАЯ ПАНЕЛЬ ИНСТРУМЕНТОВ"');
  if NOT IsExists(toolBar) then Raise('Не удалось получить ТУЛБАР "ГЛАВНАЯ ПАНЕЛЬ ИНСТРУМЕНТОВ"');
  for i := 1 to 2 do
  begin
    case i of
      0: begin
           button := GetToolBarObject(toolBar, 'BUTTON', OPER_1);
           iconButton := 'large_font.BIG.bmp';
         end;
      1: begin
           button := GetToolBarObject(toolBar, 'BUTTON', OPER_2);
           iconButton := 'PravPod_Button.bmp';
         end;  
      2: begin
           button := GetToolBarObject(toolBar, 'BUTTON', OPER_3);
           iconButton := 'journal.bmp';
         end;  
    end;//case
    if NOT FindPicture(button, iconButton, x, y) then
    begin
      Log.Error('Не удалось найти на кнопке "' + button.Caption + '" её иконку при состоянии Отображения кнопки- "Значок и Подпись"');
      Raise;
    end;
    if NOT ( (button.Width >= (2*buttonCoord[i-1][1]) ) AND (button.Height = buttonCoord[i-1][0]) ) then
    begin
      Log.Error('После изменения отображения кнопки: ' + button.Caption + 'на "Значок и подпись" её размеры не эталонны');
      Raise;
    end;    
  end;//for
   
  if NOT SetDefaultToolBarSettings then
  Log.Warning('Не удалось установить настройки Тулбара по умолчанию');
  result := true;  
  GoToMainMenu;
except
  Log.Message('HLTC101_2_3_7_Execute: ' + ExceptionMessage, '',  pmNormal, GetLogAttr('EXCEPTION'));
  result := false;         
  CommonExceptionHandler;

end;
end;

{
HLTC101.2: Диалог настройки
 HLTC101.2.4: Вкладка быстрый вызов:
   HLTC101.2.4.1: В списке операций должны быть показаны текущие операции тулбара
   HLTC101.2.4.2: Для выделенной операции должен отображаться список клавиш – быстрых вызовов.   
    
}
function HLTC101_2_4_1_Execute(var  current_state: OleVariant): OleVariant;
var
  etalonSettings;
  str, substr;
  i, j, k;
  pageControl;
  list;
  comboBox;
  listShortCuts;
  wndTbSettings;
  timeOut;
  tbSet;
  opName;  
  arrayShortCut;
  arrayOp;
  arrayOpGlob;
  arrayTb;
  arrayGlobal;
begin
try
{Перед тем как править, надо посмотреть файл сравнения d:\araxis\101_2_4_1...}
  
  etalonSettings :=
  [ 
    ([ 'Главная панель инструментов',([(['Настройка...',([''])]),(['Большие иконки',([''])]),(['Закрепить панели инструментов',([''])]),(['Меню',(['F2'])]),(['Меню (вкладка)',([''])]),(['Информация о комплекте',(['Ctrl+Shift+I'])]),(['Настройка страницы...',([''])]),(['Список конфигураций',([''])]),(['Редактор стилей...',([''])]),(['Автоматический вход в систему',([''])]),(['Настройка конфигурации...',([''])]),(['Поиск по реквизитам',(['F7'])]),(['Поиск по ситуации',(['F5'])]),(['Поиск по источнику опубликования',(['F6'])]),(['Правовая поддержка',(['Alt+F1'])]),(['Поиск',([''])]),(['Мои документы',([''])]),(['Документы на контроле',([''])]),(['Журнал работы',([''])]),(['Мои консультации',([''])]),(['Толковый словарь',([''])]),(['Список пользователей и групп',([''])]),(['Моя новостная лента',([''])]),(['Обзор изменений законодательства',(['F9'])]),(['Назад',(['Alt+Left'])]),(['Вперед',(['Alt+Right'])]),(['Увеличить шрифт',(['Ctrl+=','Ctrl+Num +'])]),(['Уменьшить шрифт',(['Ctrl+-','Ctrl+Num -'])]),(['Новое',(['Ctrl+N'])]),(['Выход',([''])]),(['Список открытых окон',([''])]),(['Упорядочить каскадом',([''])]),(['Упорядочить по горизонтали',([''])]),(['Упорядочить по вертикали',([''])]),(['Закрыть все кроме текущего',([''])]),(['Спрятать левый навигатор',([''])]),(['Спрятать правый навигатор',([''])]),(['Руководство пользователя',(['F1'])]),(['Горячие клавиши',([''])]),(['Новые возможности',([''])]),(['Контактная информация',([''])]),(['Книга отзывов и предложений',([''])]),(['Гарант в Интернет',([''])]),(['О программе...',([''])]),(['Список закладок...',(['Alt+Ins'])]),(['Отмена',(['Esc'])])])]), 
     
    ([ 'Поиск: Выбор реквизита',([(['Удалить',(['Del'])]),(['Включить контекстный фильтр',([''])]),(['ИЛИ',([''])]),(['И',([''])]),(['КРОМЕ',([''])]),(['ИЛИ (shortcut)',(['Ins'])]),(['Очистить условия',([''])]),(['Развернуть',([''])]),(['Свернуть',([''])]),(['Сместиться к первому выбранному',([''])]),(['Ок',(['Enter'])]),(['Развернуть все',([''])]),(['Свернуть все',([''])]),(['Перенос по словам',([''])])])]), 
     
    ([ 'Фильтры (вкладка)',([(['Создать новый фильтр',([''])]),(['Отменить все фильтры',([''])]),(['Применить фильтры заново',([''])]),(['Фильтры (вкладка)',([''])]),(['Удалить',(['Del'])]),(['Применить фильтр',([''])]),(['Редактировать фильтр',([''])]),(['Добавить фильтр из сохраненных запросов',([''])]),(['Удалить фильтр из папок',([''])]),(['Развернуть все',([''])]),(['Свернуть все',([''])]),(['Перенос по словам',([''])])])]) 
  ]; 
  GoToMainMenu;
  if NOT SetDefaultToolBarSettings then
    Log.Warning('Не удалось установить настройки Тулбара по умолчанию');  
  tbSet := OpenTbSettings(true); 
  GetFromTbSettings('ЗАКЛАДКИ').TabIndex := 1;
  
  comboBox := GetFromTbSettings('КОМБОБОКС ВЫБОРА ТУЛБАРА');
  listShortCuts := GetFromTbSettings('ВКЛАДКА БЫСТРЫЙ ВЫЗОВ: "СПИСОК ШОТКАТОВ"');
  list := GetFromTbSettings('ВКЛАДКА БЫСТРЫЙ ВЫЗОВ: ОПЕРАЦИИ');
  for i := VarArrayLowBound(etalonSettings, 1) to VarArrayHighBound(etalonSettings, 1) do
  begin      
    timeOut := Options.Run.Delay;
    Options.Run.Delay := 0;
    if NOT SelectInComboBox(comboBox, etalonSettings[i][0]) then Raise('Не удалось переключить комбобокс');
    VarClear(arrayTb);
    ///////////////////////////
    j := 0;
    list.SetFocus;
    Sys.Keys('[Home]');
    opName := '';    
    VarClear(arrayOpGlob);
    while true do
    begin
      VarClear(arrayOp);
      list.SetFocus;
      if j <> 0 then Sys.Keys('[Down]');      
      if common.GetWindowText(list.Handle) = opName then break;
      opName := common.GetWindowText(list.Handle);      
      inc(j);
      VarClear(arrayShortCut);
      if listShortCuts.wItemCount <> 0 then
        for k := 0 to listShortCuts.wItemCount -1 do
        begin
          listShortCuts.SetFocus;
          if k = 0 then Sys.Keys('[Home]');
          AddToArray(arrayShortCut, listShortCuts.wSelectedItems);
          Sys.Keys('[Down]');
        end//for k
      else// if listShotCuts.wItemCount <> 0
        AddToArray(arrayShortCut, '');
      
      AddToArray(arrayOp, opName);
      AddToArray(arrayOp, arrayShortCut);
      
      AddToArray(arrayOpGlob, arrayOp);
    end;//while     
    AddToArray(arrayTb, etalonSettings[i][0]);
    AddToArray(arrayTb, arrayOpGlob);
    
    AddToArray(arrayGlobal, arrayTb);
  end;//FOR  
  Options.Run.Delay := TimeOut;
  tbSet.Close;
  
  if NOT CompareArray(arrayGlobal, etalonSettings) then
  begin
    Log.Error('"Большой" массив(Все тулбары\операции\шоткаты) (Первый) НЕ равен эталонному (Второму)');
    Raise;
  end;
 // Log.Message('', convertArrayToString(arrayGlobal));
  result := true;  
  GoToMainMenu;
except
  Log.Message('HLTC101_2_4_1_Execute: ' + ExceptionMessage, '',  pmNormal, GetLogAttr('EXCEPTION'));
  result := false;         
  CommonExceptionHandler;
end;
end;

{
HLTC101.2: Диалог настройки
 HLTC101.2.4: Вкладка быстрый вызов:
  HLTC101.2.4.3: Должна быть возможность назначать клавиши быстрого вызова (В поле нажть комбинацию клавиш,
  она должна отобразиться, затем нажать кнопку «Добавить» - введённое сочетание клавиш отобразится в списке
  клавиш для быстрого вызова). Проверить назначение клавиш быстрого доступа и их функционирование  
}
function HLTC101_2_4_3_Execute(var  current_state: OleVariant): OleVariant;
const
  OPER = 'Поиск по ситуации';
  SHORTCUT = 'F5';
  NEW_SHORTCUT = 'Left';
var
  obj;
  listShortCut;
  editShortCut;
  buttonAdd;
  tempString;
  i;  
begin
try  
  GoToMainMenu;
  if NOT SetDefaultToolBarSettings then
    Log.Warning('Не удалось установить настройки Тулбара по умолчанию');
  obj := OpenTbSettings(true);
  if NOT IsExists(obj) then Raise('Не удалось получить "Настройка панели инструментов"');
  obj := GetFromTbSettings('ЗАКЛАДКИ');  
  if NOT IsExists(obj) then Raise('Не удалось получить PageControl');  
  if NOT SwitchToPage(obj, 'Быстрый вызов', false) then Raise('Не удалось переключить вкладку на: Быстрый вызов');
  obj := GetFromTbSettings('ВКЛАДКА БЫСТРЫЙ ВЫЗОВ: ОПЕРАЦИИ');
  if NOT IsExists(obj) then Raise('Не удалось получить ВКЛАДКА БЫСТРЫЙ ВЫЗОВ: ОПЕРАЦИИ');
  if NOT Position_Internal(obj, OPER, '\', true) then Raise('Не удалось спозиционироваться на :' + OPER);
  editShortCut := GetFromTbSettings('ВКЛАДКА БЫСТРЫЙ ВЫЗОВ: "ШОТКАТ"');
  if NOT IsExists(editShortCut) then Raise('Не удалось получить ВКЛАДКА БЫСТРЫЙ ВЫЗОВ: "ШОТКАТ"');
  editShortCut.SetFocus;
  //PressKeyWithCheck(['[' + NEW_SHORTCUT + ']']);
  for i := 1 to 3 do
    Sys.Keys('[' + NEW_SHORTCUT + ']');
  tempString := editShortCut.Text;
  if NOT StringCompare(tempString, NEW_SHORTCUT) then
  begin
    Log.Error('В поле ВКЛАДКА БЫСТРЫЙ ВЫЗОВ: "ШОТКАТ" прописан не тот шоткат, который был введён!', tempString);
    Raise;
  end;
  buttonAdd := GetFromTbSettings('ВКЛАДКА БЫСТРЫЙ ВЫЗОВ: КНОПКА "ДОБАВИТЬ"');
  if NOT IsExists(buttonAdd) then Raise('Не удалось получить ВКЛАДКА БЫСТРЫЙ ВЫЗОВ: КНОПКА "ДОБАВИТЬ"');
  if NOT buttonAdd.Enabled then
  begin
    Log.Error('Кнопка "Добавить" не вктивна, хотя поле "Шоткат" заполнено');
    Raise;
  end;
  buttonAdd.Click;      
  listShortCut := GetFromTbSettings('ВКЛАДКА БЫСТРЫЙ ВЫЗОВ: "СПИСОК ШОТКАТОВ"');
  if NOT IsExists(listShortCut) then Raise('Не удалось получить ВКЛАДКА БЫСТРЫЙ ВЫЗОВ: "СПИСОК ШОТКАТОВ"');
  listShortCut.SetFocus;
  Sys.Keys('[Down]' + keyPause + '[End]');
  tempString := listShortCut.wSelectedItems;
  if NOT StringCompare(tempString, NEW_SHORTCUT) then
  begin
    Log.Error('В списке Шоткатов последним прописан не тот шоткат, который был введён!', tempString);
    Raise;
  end;  
  obj := GetFromTbSettings('КНОПКА "ОК"');
  if NOT IsExists(obj) then Raise('Не удалось получить КНОПКА "ОК"');
  obj.Click;
  for i := 1 to 5 do//Нажимаем 5 раз шоткат для того, чтобы потом проверить его НЕработоспособность 
    Sys.Keys('[' + NEW_SHORTCUT + ']' + keyPause);
  if NOT IsExists(GetFromPPS('СИТУАЦИИ ДОПОЛНИТЕЛЬНОГО УРОВНЯ')) then
  begin
    Log.Error('После добавления шотката в Быстрый запуск, а затем при его нажатии, ничего не происходит');
    Raise;
  end;   
  if NOT SetDefaultToolBarSettings then
    Log.Warning('Не удалось установить настройки Тулбара по умолчанию');
  result := true;  
  GoToMainMenu;
except
  Log.Message('HLTC101_2_4_3_Execute: ' + ExceptionMessage, '',  pmNormal, GetLogAttr('EXCEPTION'));
  SetDefaultToolBarSettings;
  result := false;         
  CommonExceptionHandler;
end;
end;

{
HLTC101.2: Диалог настройки
 HLTC101.2.4: Вкладка быстрый вызов: 
  HLTC101.2.4.4: Должна быть возможность удалять клавиши быстрого вызова (кнопка «Удалить»). 
  Проверить удаление.
}
function HLTC101_2_4_4_Execute(var  current_state: OleVariant): OleVariant;
const
  OPER = 'Поиск по реквизитам';
  SHOTCUT = '[F7]';
var
  obj;
  listShotCut;
  i;  
begin
try  
  GoToMainMenu;
  obj := OpenTbSettings(true);
  if NOT IsExists(obj) then Raise('Не удалось получить "Настройка панели инструментов"');
  obj := GetFromTbSettings('ЗАКЛАДКИ');  
  if NOT IsExists(obj) then Raise('Не удалось получить PageControl');  
  if NOT SwitchToPage(obj, 'Быстрый вызов', false) then Raise('Не удалось переключить вкладку на: Быстрый вызов');
  obj := GetFromTbSettings('ВКЛАДКА БЫСТРЫЙ ВЫЗОВ: ОПЕРАЦИИ');
  if NOT IsExists(obj) then Raise('Не удалось получить ВКЛАДКА БЫСТРЫЙ ВЫЗОВ: ОПЕРАЦИИ');
  if NOT Position_Internal(obj, OPER, '\', true) then Raise('Не удалось спозиционироваться на :' + OPER);
  listShotCut := GetFromTbSettings('ВКЛАДКА БЫСТРЫЙ ВЫЗОВ: "СПИСОК ШОТКАТОВ"');
  if NOT IsExists(listShotCut) then Raise('Не удалось получить ВКЛАДКА БЫСТРЫЙ ВЫЗОВ: "СПИСОК ШОТКАТОВ"');
  listShotCut.SetFocus;
  Sys.Keys('[Down]');
  obj := GetFromTbSettings('ВКЛАДКА БЫСТРЫЙ ВЫЗОВ: КНОПКА "УДАЛИТЬ"');
  if NOT IsExists(obj) then Raise('Не удалось получить ВКЛАДКА БЫСТРЫЙ ВЫЗОВ: КНОПКА "УДАЛИТЬ"');
  obj.Click;
  if listShotCut.wItemCount <> 0 then
  begin
    Log.Error('Список шоткатов не пустой после удаления шотката');
    Raise;
  end;
  obj := GetFromTbSettings('КНОПКА "ОК"');
  if NOT IsExists(obj) then Raise('Не удалось получить КНОПКА "ОК"');
  obj.Click;
  for i := 1 to 5 do//Нажимаем 5 раз шоткат для того, чтобы потом проверить его НЕработоспособность 
    Sys.Keys(SHOTCUT + keyPause);
  if IsExists(GetFromPPR('КАРТОЧКА ЗАПРОСА')) then
  begin
    Log.Error('После удаления шотката из Быстрого запуска он всё равно работает');
    Raise;
  end;   
  if NOT SetDefaultToolBarSettings then
    Log.Warning('Не удалось установить настройки Тулбара по умолчанию');
  result := true;  
  GoToMainMenu;
except
  Log.Message('HLTC101_2_4_4_Execute: ' + ExceptionMessage, '',  pmNormal, GetLogAttr('EXCEPTION'));
  SetDefaultToolBarSettings; 
  result := false;  
  CommonExceptionHandler;
end;
end;

{
HLTC101.2: Диалог настройки
 HLTC101.2.5: Вкладка Дополнительные настройки:
  HLTC101.2.5.1: Изменить размер кнопок:
   HLTC101.2.5.1.1: Большие – все кнопки на всех тулбарах будут большие
   HLTC101.2.5.1.2: Маленькие – все кнопки на всех тулбарах будут маленькие
   HLTC101.2.5.1.3: Проверить, что при изменении настройки размера кнопока на вкладке, соответственно 
    снимается или ставится галка в контекстном меню тулбара или зоны докинга.
}
function HLTC101_2_5_1_1_Execute(var  current_state: OleVariant): OleVariant;
const 
  BUTTON_1 = 'Увеличить шрифт';
  BUTTON_2 = 'Искать';
  BUTTON_HEIGHT_BIG  = 48;
  BUTTON_HEIGHT_SMAL = 22;  
  BUTTON_ICON_SMAL_1 = 'large_font.SMALL.bmp';
  BUTTON_ICON_BIG_1  = 'large_font.BIG.bmp';
  BUTTON_ICON_SMAL_2 = 'ok.SMALL.bmp';
  BUTTON_ICON_BIG_2  = 'ok.big.bmp';
var
  obj;  
  toolBar;
  x, y;  
begin
try  
  GoToMainMenu;
  if NOT SetDefaultToolBarSettings then
    Log.Warning('Не удалось установить настройки Тулбара по умолчанию');
  obj := OpenTbSettings(true);
  if NOT IsExists(obj) then Raise('Не удалось получить "Настройка панели инструментов"');
  obj := GetFromTbSettings('ЗАКЛАДКИ');  
  if NOT IsExists(obj) then Raise('Не удалось получить PageControl');
  obj.TabIndex := 2;//Жёстко переключаем PageControl на 3-ю вкладку(Дополнительные настройки), 
  //потому что дефолту в дереве объектов объект этой вкладки отсутствует и создается динамически только после переключения на неё руками 
  //http://mdp.garant.ru/pages/viewpage.action?pageId=457099749&focusedCommentId=457101227#comment-457101227  
  if NOT SwitchToPage(obj, 'Дополнительные настройки', false) then Raise('Не удалось переключить вкладку на: Дополнительные настройки');
  obj := GetFromTbSettings('ВКЛАДКА ДОПОЛНИТЕЛЬНЫЕ НАСТРОЙКИ: РАДИОКНОПКА "БОЛЬШИЕ"');
  if NOT IsExists(obj) then Raise('Не удалось получить ВКЛАДКА ДОПОЛНИТЕЛЬНЫЕ НАСТРОЙКИ: РАДИОКНОПКА "БОЛЬШИЕ"');
  if obj.Checked then Raise('По умолчанию значение Размер кнопок равен "Большие"');
  obj.Click;
  if NOT obj.Checked then Raise('Значение "Размер кнопок" не изменилось на "Большие"');
  GetFromTbSettings('КНОПКА "ОК"').Click;
  //Проверяем, что на тулбаре кнопки действительно стали большими 
  if NOT GoToPPR then Raise('Не удалось перейти в ППР');
  toolBar := GetFromMainWindow('ТУЛБАР "ГЛАВНАЯ ПАНЕЛЬ ИНСТРУМЕНТОВ"');
  obj := GetToolBarObject(toolBar, 'BUTTON', BUTTON_1);
  if NOT FindPicture(obj, BUTTON_ICON_BIG_1, x, y) then
  begin
    Log.Error('Не удалось найти на кнопке "' + obj.Caption + '" её иконку при значение "Размер кнопок = Большие"');
    Raise;
  end;
  if NOT (obj.Height = BUTTON_HEIGHT_BIG) then
  begin
    Log.Error('Высота "Большой" кнопки не равна эталонной', obj.Height);
    Raise;
  end;
  toolBar.ClickR(toolBar.Width div 2, toolBar.Height div 2);
  if NOT IsMenuItemChecked(toolBar.QCPopupMenu, 'Большие иконки') then
  begin
    Log.Error('На пункте контекстного меню "Большие иконки" для тулбара не стоит галочка');
    Raise;
  end;
  ClosePopUpMenu(toolBar);
  toolBar := GetFromPPR('НИЖНИЙ ТУЛБАР КАРТОЧКИ ЗАПРОСА');
  obj := GetToolBarObject(toolBar, 'BUTTON', BUTTON_2);
  if NOT FindPicture(obj, BUTTON_ICON_BIG_2, x, y) then
  begin
    Log.Error('Не удалось найти на кнопке "' + obj.Caption + '" её иконку при значение "Размер кнопок = Большие"');
    Raise;
  end;
  if NOT (obj.Height = BUTTON_HEIGHT_BIG) then
  begin
    Log.Error('Высота "Большой" кнопки не равна эталонной', obj.Height);
    Raise;
  end;
  toolBar.ClickR(toolBar.Width div 2, toolBar.Height div 2);
  if NOT IsMenuItemChecked(toolBar.QCPopupMenu, 'Большие иконки') then
  begin
    Log.Error('На пункте контекстного меню "Большие иконки" для тулбара не стоит галочка');
    Raise;
  end;
  ClosePopUpMenu(toolBar);
  obj := GetFromMainWindow('ВЕРХНЯЯ ЗОНА ДОКИНГА');
  if NOT IsExists(obj) then Raise('Не удалось получить ВЕРХНЯЯ ЗОНА ДОКИНГА');
  obj.ClickR(obj.Width - 3, 3);
  if NOT IsMenuItemChecked(toolBar.QCPopupMenu, 'Большие иконки') then
  begin
    Log.Error('На пункте контекстного меню "Большие иконки" для тулбара не стоит галочка');
    Raise;
  end;
  ClosePopUpMenu(toolBar);
  obj := GetFromMainWindow('НИЖНЯЯ ЗОНА ДОКИНГА');
  if NOT IsExists(obj) then Raise('Не удалось получить НИЖНЯЯ ЗОНА ДОКИНГА');
  obj.ClickR(obj.Width - 100, 3);
  if NOT IsMenuItemChecked(toolBar.QCPopupMenu, 'Большие иконки') then
  begin
    Log.Error('На пункте контекстного меню "Большие иконки" для тулбара не стоит галочка');
    Raise;
  end;
  ClosePopUpMenu(toolBar);
  //Делаем кнопки маленькими
  obj := OpenTbSettings(true);
  if NOT IsExists(obj) then Raise('Не удалось получить "Настройка панели инструментов"');
  obj := GetFromTbSettings('ЗАКЛАДКИ');  
  if NOT IsExists(obj) then Raise('Не удалось получить PageControl');  
  obj.TabIndex := 2;//Жёстко переключаем PageControl на 3-ю вкладку(Дополнительные настройки), 
  //потому что дефолту в дереве объектов объект этой вкладки отсутствует и создается динамически только после переключения на неё руками 
  //http://mdp.garant.ru/pages/viewpage.action?pageId=457099749&focusedCommentId=457101227#comment-457101227
  if NOT SwitchToPage(obj, 'Дополнительные настройки', false) then Raise('Не удалось переключить вкладку на: Дополнительные настройки');
  obj := GetFromTbSettings('ВКЛАДКА ДОПОЛНИТЕЛЬНЫЕ НАСТРОЙКИ: РАДИОКНОПКА "МАЛЕНЬКИЕ"');
  if NOT IsExists(obj) then Raise('Не удалось получить ВКЛАДКА ДОПОЛНИТЕЛЬНЫЕ НАСТРОЙКИ: РАДИОКНОПКА "МАЛЕНЬКИЕ"');
  if obj.Checked then Raise('значение Размер кнопок равен "Маленькие"');
  obj.Click;
  if NOT obj.Checked then Raise('Значение "Размер кнопок" не изменилось на "Маленькие"');

  GetFromTbSettings('КНОПКА "ОК"').Click;
  //Проверяем, что на тулбаре кнопки действительно стали маленькими 
  if NOT GoToPPR then Raise('Не удалось перейти в ППР');
  toolBar := GetFromMainWindow('ТУЛБАР "ГЛАВНАЯ ПАНЕЛЬ ИНСТРУМЕНТОВ"');
  obj := GetToolBarObject(toolBar, 'BUTTON', BUTTON_1);
  if NOT FindPicture(obj, BUTTON_ICON_SMAL_1, x, y) then
  begin
    Log.Error('Не удалось найти на кнопке "' + obj.Caption + '" её иконку при значение "Размер кнопок = Маленькие"');
    Raise;
  end;
  if NOT (obj.Height = BUTTON_HEIGHT_SMAL) then
  begin
    Log.Error('Высота "Маленькой" кнопки не равна эталонной', obj.Height);
    Raise;
  end;
  toolBar.ClickR(toolBar.Width div 2, toolBar.Height div 2);
  if IsMenuItemChecked(toolBar.QCPopupMenu, 'Большие иконки') then
  begin
    Log.Error('На пункте контекстного меню "Большие иконки" для тулбара стоит галочка');
    Raise;
  end;
  ClosePopUpMenu(toolBar);
  toolBar := GetFromPPR('НИЖНИЙ ТУЛБАР КАРТОЧКИ ЗАПРОСА');
  obj := GetToolBarObject(toolBar, 'BUTTON', BUTTON_2);
  if NOT FindPicture(obj, BUTTON_ICON_SMAL_2, x, y) then
  begin
    Log.Error('Не удалось найти на кнопке "' + obj.Caption + '" её иконку при значение "Размер кнопок = Маленькие"');
    Raise;
  end;
    if NOT (obj.Height = BUTTON_HEIGHT_SMAL) then
  begin
    Log.Error('Высота "Маленькой" кнопки не равна эталонной', obj.Height);
    Raise;
  end;
  toolBar.ClickR(toolBar.Width div 2, toolBar.Height div 2);
  if IsMenuItemChecked(toolBar.QCPopupMenu, 'Большие иконки') then
  begin
    Log.Error('На пункте контекстного меню "Большие иконки" для тулбара стоит галочка');
    Raise;
  end;
  ClosePopUpMenu(toolBar);
  obj := GetFromMainWindow('ВЕРХНЯЯ ЗОНА ДОКИНГА');
  if NOT IsExists(obj) then Raise('Не удалось получить ВЕРХНЯЯ ЗОНА ДОКИНГА');
  obj.ClickR(obj.Width - 3, 3);
  if IsMenuItemChecked(toolBar.QCPopupMenu, 'Большие иконки') then
  begin
    Log.Error('На пункте контекстного меню "Большие иконки" для тулбара стоит галочка');
    Raise;
  end;
  ClosePopUpMenu(toolBar);
  obj := GetFromMainWindow('НИЖНЯЯ ЗОНА ДОКИНГА');
  if NOT IsExists(obj) then Raise('Не удалось получить НИЖНЯЯ ЗОНА ДОКИНГА');
  obj.ClickR(obj.Width - 100, 3);
  if IsMenuItemChecked(toolBar.QCPopupMenu, 'Большие иконки') then
  begin
    Log.Error('На пункте контекстного меню "Большие иконки" для тулбара стоит галочка');
    Raise;
  end;
  ClosePopUpMenu(toolBar);   
  if NOT SetDefaultToolBarSettings then
    Log.Warning('Не удалось установить настройки Тулбара по умолчанию');
  result := true;  
  GoToMainMenu;
except
  Log.Message('HLTC101_2_5_1_1_Execute: ' + ExceptionMessage, '',  pmNormal, GetLogAttr('EXCEPTION'));
  result := false;         
  CommonExceptionHandler;
end;
end;

{
HLTC101: Настройка тулбаров
	HLTC101.2: Диалог настройки
		HLTC101.2.5: Вкладка Дополнительные настройки:
			HLTC101.2.5.2: Цветность изображения:
				HLTC101.2.5.2.1: Автоматически – цветность кнопок будет автоматически 
        подбираться системой (максимально)
}                      
function HLTC101_2_5_2_1_Execute(var  current_state: OleVariant): OleVariant;
var 
  myRegion;
  obj;
  sysColorDepth, iconColorDepth : integer;
begin
try
  GoToMainMenu;
  //
  obj := OpenTbSettings(true);
  if NOT IsExists(obj) then Raise('Не удалось получить "Настройка панели инструментов"');
  obj := GetFromTbSettings('ЗАКЛАДКИ');
  if NOT IsExists(obj) then Raise('Не удалось получить ЗАКЛАДКИ');
  obj.TabIndex := 2;//Жёстко переключаем PageControl на 3-ю вкладку(Дополнительные настройки), 
  //потому что дефолту в дереве объектов объект этой вкладки отсутствует и создается динамически только после переключения на неё руками 
  //http://mdp.garant.ru/pages/viewpage.action?pageId=457099749&focusedCommentId=457101227#comment-457101227
  if NOT SwitchToPage(obj, 'Дополнительные настройки', false) then Raise('Не удалось переключить вкладку на: Дополнительные настройки');
  obj := GetFromTbSettings('ВКЛАДКА ДОПОЛНИТЕЛЬНЫЕ НАСТРОЙКИ: РАДИОКНОПКА "АВТОМАТИЧЕСКИ"');
  if NOT IsExists(obj) then Raise('Не удалось получить ВКЛАДКА ДОПОЛНИТЕЛЬНЫЕ НАСТРОЙКИ: РАДИОКНОПКА "АВТОМАТИЧЕСКИ"');
  obj.Click;
  if NOT obj.Checked then Raise('Значение "Цветность изображения" не изменилось на "Автоматически"');
  GetFromTbSettings('КНОПКА "ОК"').Click;
  
  sysColorDepth := GetColorDepth;
  iconColorDepth := GetIconColorDepth;
  if NOT ((( sysColorDepth >= 16 ) AND ( iconColorDepth = 16 )) OR (( sysColorDepth = iconColorDepth ))) then
  begin
    Log.Error('Глубина цвета при значении "автоматически" не равна эталонной: ' + intToStr(sysColorDepth) + ' \ ' + intToStr(iconColorDepth));
    Raise('Глубина цвета при значении "автоматически" не равна эталонной: ' + intToStr(sysColorDepth) + ' \ ' + intToStr(iconColorDepth));
  end;  
  if NOT SetDefaultToolBarSettings then
    Log.Warning('Не удалось установить настройки Тулбара по умолчанию');
  result := true;  
  GoToMainMenu;
except
  Log.Message('HLTC101_2_5_2_1_Execute: ' + ExceptionMessage, '',  pmNormal, GetLogAttr('EXCEPTION'));
  result := false;         
  CommonExceptionHandler;
end;
end;

{
HLTC101: Настройка тулбаров
	HLTC101.2: Диалог настройки
		HLTC101.2.5: Вкладка Дополнительные настройки:
			HLTC101.2.5.2: Цветность изображения:
				HLTC101.2.5.2.2: 16 цветов
}                      
function HLTC101_2_5_2_2_Execute(var  current_state: OleVariant): OleVariant;
var 
  myRegion;
  obj;
  sysColorDepth, iconColorDepth : integer;
begin
try
  GoToMainMenu;  
  //
  obj := OpenTbSettings(true);
  if NOT IsExists(obj) then Raise('Не удалось получить "Настройка панели инструментов"');
  obj := GetFromTbSettings('ЗАКЛАДКИ');
  if NOT IsExists(obj) then Raise('Не удалось получить ЗАКЛАДКИ');
  obj.TabIndex := 2;//Жёстко переключаем PageControl на 3-ю вкладку(Дополнительные настройки), 
  //потому что дефолту в дереве объектов объект этой вкладки отсутствует и создается динамически только после переключения на неё руками 
  //http://mdp.garant.ru/pages/viewpage.action?pageId=457099749&focusedCommentId=457101227#comment-457101227
  if NOT SwitchToPage(obj, 'Дополнительные настройки', false) then Raise('Не удалось переключить вкладку на: Дополнительные настройки');
  obj := GetFromTbSettings('ВКЛАДКА ДОПОЛНИТЕЛЬНЫЕ НАСТРОЙКИ: РАДИОКНОПКА "16 ЦВЕТОВ"');
  if NOT IsExists(obj) then Raise('Не удалось получить ВКЛАДКА ДОПОЛНИТЕЛЬНЫЕ НАСТРОЙКИ: РАДИОКНОПКА "16 ЦВЕТОВ"');
  obj.Click;
  if NOT obj.Checked then Raise('Значение "Цветность изображения" не изменилось на "16 Цветов"');
  GetFromTbSettings('КНОПКА "ОК"').Click;

  iconColorDepth := GetIconColorDepth;
  if NOT ( iconColorDepth = 4 ) then
  begin
    Log.Error('Глубина цвета при значении "16 цветов" не равна эталонной: '  + intToStr(iconColorDepth));
    Log.Error('Глубина цвета при значении "16 цветов" не равна эталонной: '  + intToStr(iconColorDepth));
    Raise;
  end;  
  if NOT SetDefaultToolBarSettings then
    Log.Warning('Не удалось установить настройки Тулбара по умолчанию');
  result := true;  
  GoToMainMenu;
except
  Log.Message('HLTC101_2_5_2_2_Execute: ' + ExceptionMessage, '',  pmNormal, GetLogAttr('EXCEPTION'));
  result := false;         
  CommonExceptionHandler;
end;
end;

{
HLTC101: Настройка тулбаров
	HLTC101.2: Диалог настройки
		HLTC101.2.5: Вкладка Дополнительные настройки:
			HLTC101.2.5.2: Цветность изображения:
				HLTC101.2.5.2.3: 256 цветов
}                      
function HLTC101_2_5_2_3_Execute(var  current_state: OleVariant): OleVariant;
var 
  myRegion;
  obj;
  sysColorDepth, iconColorDepth : integer;
begin
try
  GoToMainMenu;  
  //
  obj := OpenTbSettings(true);
  if NOT IsExists(obj) then Raise('Не удалось получить "Настройка панели инструментов"');
  obj := GetFromTbSettings('ЗАКЛАДКИ');
  if NOT IsExists(obj) then Raise('Не удалось получить ЗАКЛАДКИ');
  obj.TabIndex := 2;//Жёстко переключаем PageControl на 3-ю вкладку(Дополнительные настройки), 
  //потому что дефолту в дереве объектов объект этой вкладки отсутствует и создается динамически только после переключения на неё руками 
  //http://mdp.garant.ru/pages/viewpage.action?pageId=457099749&focusedCommentId=457101227#comment-457101227     
  if NOT SwitchToPage(obj, 'Дополнительные настройки', false) then Raise('Не удалось переключить вкладку на: Дополнительные настройки');
  
  obj := GetFromTbSettings('ВКЛАДКА ДОПОЛНИТЕЛЬНЫЕ НАСТРОЙКИ: РАДИОКНОПКА "256 ЦВЕТОВ"');
  if NOT IsExists(obj) then Raise('Не удалось получить ВКЛАДКА ДОПОЛНИТЕЛЬНЫЕ НАСТРОЙКИ: РАДИОКНОПКА "256 ЦВЕТОВ"');
  obj.Click;
  if NOT obj.Checked then Raise('Значение "Цветность изображения" не изменилось на "256 Цветов"');
  GetFromTbSettings('КНОПКА "ОК"').Click;

  iconColorDepth := GetIconColorDepth;
  if NOT ( iconColorDepth = 8 ) then
  begin
    Log.Error('Глубина цвета при значении "256 цветов" не равна эталонной: '  + intToStr(iconColorDepth));
    Log.Error('Глубина цвета при значении "256 цветов" не равна эталонной: '  + intToStr(iconColorDepth));
    Raise;
  end;  
  if NOT SetDefaultToolBarSettings then
    Log.Warning('Не удалось установить настройки Тулбара по умолчанию');
  result := true;  
  GoToMainMenu;
except
  Log.Message('HLTC101_2_5_2_3_Execute: ' + ExceptionMessage, '',  pmNormal, GetLogAttr('EXCEPTION'));
  result := false;         
  CommonExceptionHandler;
end;
end;

{
HLTC101: Настройка тулбаров
	HLTC101.2: Диалог настройки
		HLTC101.2.5: Вкладка Дополнительные настройки:
			HLTC101.2.5.2: Цветность изображения:
				HLTC101.2.5.2.4: Полноцветные – максимально возбожная глубина цветов, 
        поддерживаемая видеокартой.
} // фигня какая-то, чем это отличается от автоматически? буду проверять тем же скриптом.
function HLTC101_2_5_2_4_Execute(var  current_state: OleVariant): OleVariant;
var 
  myRegion;
  obj;
  sysColorDepth, iconColorDepth : integer;
begin
try
  GoToMainMenu;
  //
  obj := OpenTbSettings(true);
  if NOT IsExists(obj) then Raise('Не удалось получить "Настройка панели инструментов"');
  obj := GetFromTbSettings('ЗАКЛАДКИ');
  if NOT IsExists(obj) then Raise('Не удалось получить ЗАКЛАДКИ');
  obj.TabIndex := 2;//Жёстко переключаем PageControl на 3-ю вкладку(Дополнительные настройки), 
  //потому что дефолту в дереве объектов объект этой вкладки отсутствует и создается динамически только после переключения на неё руками 
  //http://mdp.garant.ru/pages/viewpage.action?pageId=457099749&focusedCommentId=457101227#comment-457101227
  if NOT SwitchToPage(obj, 'Дополнительные настройки', false) then Raise('Не удалось переключить вкладку на: Дополнительные настройки');
  obj := GetFromTbSettings('ВКЛАДКА ДОПОЛНИТЕЛЬНЫЕ НАСТРОЙКИ: РАДИОКНОПКА "ПОЛНОЦВЕТНЫЕ"');
  if NOT IsExists(obj) then Raise('Не удалось получить ВКЛАДКА ДОПОЛНИТЕЛЬНЫЕ НАСТРОЙКИ: РАДИОКНОПКА "ПОЛНОЦВЕТНЫЕ"');
  obj.Click;
  if NOT obj.Checked then Raise('Значение "Цветность изображения" не изменилось на "Полноцветные"');
  GetFromTbSettings('КНОПКА "ОК"').Click;
  
  sysColorDepth := GetColorDepth;
  iconColorDepth := GetIconColorDepth;
  if NOT ((( sysColorDepth >= 16 ) AND ( iconColorDepth = 16 )) OR (( sysColorDepth = iconColorDepth ))) then
  begin
    Log.Error('Глубина цвета при значении "Полноцветные" не равна эталонной: ' + intToStr(sysColorDepth) + ' \ ' + intToStr(iconColorDepth));
    Raise('Глубина цвета при значении "Полноцветные" не равна эталонной: ' + intToStr(sysColorDepth) + ' \ ' + intToStr(iconColorDepth));
  end;  
  if NOT SetDefaultToolBarSettings then
    Log.Warning('Не удалось установить настройки Тулбара по умолчанию');
  result := true;  
  GoToMainMenu;
except
  Log.Message('HLTC101_2_5_2_4_Execute: ' + ExceptionMessage, '',  pmNormal, GetLogAttr('EXCEPTION'));
  result := false;         
  CommonExceptionHandler;
end;
end;

{
HLTC101: Настройка тулбаров
	HLTC101.3: Проверить, что расположение и состав тулбаров запоминается. 
  Проверить возврат по истории, вход/выход.
}                      
function HLTC101_3_Execute(var  current_state: OleVariant): OleVariant;
const
  REMOVE_OPER = 'Отмена';
  DELETE_OPER_1 = 'Тип поиска';
  DELETE_OPER_2 = 'Ок';
  PREF = 'HLTC101_3';
var 
  toolBar;
  obj;
  arrayTbSetPPR;
  arrayTbPPR;
  list;
  targetZone;
  login, pass, count;
begin
try
  login := PREF;
  pass  := PREF;
  count := 5;
  RestartF1Shell(count, Options.Run.Timeout div 6, login, pass);
  
  targetZone := GoToPPR('', true);
  if NOT IsExists(targetZone) then Raise('Не удалось получить targetZone=Карточка запроса');
  if NOT SetDefaultToolBarSettings then
    Log.Warning('Не удалось установить настройки Тулбара по умолчанию');
  toolBar := GetFromPPR('НИЖНИЙ ТУЛБАР КАРТОЧКИ ЗАПРОСА');
  if NOT IsExists(toolBar) then Raise('Не удалось получить НИЖНИЙ ТУЛБАР КАРТОЧКИ ЗАПРОСА');
  obj := OpenTbSettings(true, toolBar);
  if NOT IsExists(obj) then Raise('Не удалось получить "Настройка панели инструментов"');  
  list := GetFromTbSettings('СПИСОК "ТЕКУЩИЕ ОПЕРАЦИИ"');
  //Одну операцию удаляем из "Текущих", для второй операции меняем её порядок
  if NOT Position_Internal(list, DELETE_OPER_1, '\', true, 'isPressHome:=true' ) then 
    Raise('Не удалось спозиционироваться  в Списке текущих операций на "' + DELETE_OPER_1 + '"');
  GetFromTbSettings('КНОПКА "СТРЕЛКА ВЛЕВО"').Click;

  if NOT Position_Internal(list, DELETE_OPER_2, '\', true, 'isPressHome:=true' ) then 
    Raise('Не удалось спозиционироваться  в Списке текущих операций на "' + DELETE_OPER_2 + '"');
  GetFromTbSettings('КНОПКА "СТРЕЛКА ВЛЕВО"').Click;

  if NOT Position_Internal(list, REMOVE_OPER, '\', true, 'isPressHome:=true' ) then 
    Raise('Не удалось спозиционироваться  в Списке текущих операций на "' + REMOVE_OPER + '"');
  GetFromTbSettings('КНОПКА "СТРЕЛКА ВНИЗ"').Click;
  arrayTbSetPPR := SetArrayFromTbSetting(list);
  GetFromTbSettings('КНОПКА "ОК"').Click;
  //Перетягиваем Тулбар
  if NOT UnlockToolbars then Raise('Не удалось разлочить ТУЛБАР');
  toolBar := GetFromPPR('НИЖНИЙ ТУЛБАР КАРТОЧКИ ЗАПРОСА');
  if NOT IsExists(toolBar) then Raise('Не удалось получить НИЖНИЙ ТУЛБАР КАРТОЧКИ ЗАПРОСА');
  if NOT DragToolbar(toolBar, targetZone, 'left') then
  begin
    Log.Error('Не удалось корректно перетащить тулбар в зону Докинга', 'LEFT');
    Raise;
  end; 
  //Делаем какие то действия и возвращаемся назад по истории
  GoToMainMenu('3');
  if NOT GoByHistory('НАЗАД') then Raise('Не удалось вернуться НАЗАД по истории');
  //Проверяем ,что: порядок, состав операций на Тулбаре
  toolBar := GetFromPPR('НИЖНИЙ ТУЛБАР КАРТОЧКИ ЗАПРОСА');
  if NOT IsExists(toolBar) then Raise('Не удалось получить НИЖНИЙ ТУЛБАР КАРТОЧКИ ЗАПРОСА');
  targetZone := GetFromPPR('КАРТОЧКА ЗАПРОСА');
  if NOT IsExists(targetZone) then Raise('Не удалось получить КАРТОЧКА ЗАПРОСА');
  arrayTbPPR := SetArrayFromTb(toolBar);
  if NOT CompareArray( arrayTbPPR, arrayTbSetPPR) then
  begin
    Log.Error('Тулбар после перехода "НАЗАД" по истории не Эталонный');
    Raise;

  end;
  //Проверяем, что тулбар остался задочен Слева
// The following line was changed by TestComplete:
//   if NOT ( (abs((toolBar.SLeft + toolBar.Width) - targetZone.SLeft) <= 1)  AND 
  if NOT ( (abs((toolBar.ScreenLeft + toolBar.Width) - targetZone.ScreenLeft) <= 1)  AND 
               (toolBar.DockedTo.Name = 'LeftDock') )then
    Raise('ТУЛБАР после возврата по истории "НАЗАД" не задочен в зоне Left');  
  //Перелогиниваемся....
  count := 5;
  RestartF1Shell(count, Options.Run.Timeout div 6, login, pass);
  //Проверяем ,что: порядок, состав операций на Тулбаре
  targetZone := GoToPPR('', true);
  if NOT IsExists(targetZone) then Raise('Не удалось получить targetZone=Карточка запроса');
  toolBar := GetFromPPR('НИЖНИЙ ТУЛБАР КАРТОЧКИ ЗАПРОСА');
  if NOT IsExists(toolBar) then Raise('Не удалось получить НИЖНИЙ ТУЛБАР КАРТОЧКИ ЗАПРОСА');
  arrayTbPPR := SetArrayFromTb(toolBar);
  if NOT CompareArray( arrayTbPPR, arrayTbSetPPR) then
  begin
    Log.Error('Тулбар после перехода "НАЗАД" по истории не Эталонный');
    Raise;
  end;
  //Проверяем, что тулбар остался задочен Слева
// The following line was changed by TestComplete:
//   if NOT ( (abs((toolBar.SLeft + toolBar.Width) - targetZone.SLeft) <= 1)  AND 
  if NOT ( (abs((toolBar.ScreenLeft + toolBar.Width) - targetZone.ScreenLeft) <= 1)  AND 
               (toolBar.DockedTo.Name = 'LeftDock') )then
    Raise('ТУЛБАР после возврата по истории "НАЗАД" не задочен в зоне Left');
  //Делаем как было      
  if NOT SetDefaultToolBarSettings then
    Log.Warning('Не удалось установить настройки Тулбара по умолчанию');
  result := true;  
  GoToMainMenu('3');
except
  Log.Message('HLTC101_3_Execute: ' + ExceptionMessage, '',  pmNormal, GetLogAttr('EXCEPTION'));
  result := false;         
  CommonExceptionHandler;
end;
end;

{
HHLTC101.4: Проверить, что в контекстном меню к любой зоне докинга или тулбару есть выбор размера кнопок:
   HLTC101.4.1: Выбрать каждую из них(большие, маленькие, средние, автоматически) и проверить, что размер иконок 
   изменяется в зависимости от выбранного типа.
   
   HLTC101.4.2:  При изменинии размера в диалоге настройки тулбаров (на вкладке «Дополнительные настройки»)
   должна соответствующе измениться настройка «Размер кнопок».
}
function HLTC101_4_Execute(var  current_state: OleVariant): OleVariant;
const 
  BUTTON_1 = 'Увеличить шрифт';
  BUTTON_2 = 'Искать';
  
  BUTTON_HEIGHT_BIG  = 48;
  BUTTON_HEIGHT_SMAL = 22;  
  
  BUTTON_ICON_SMAL_1 = 'large_font.SMALL.bmp';
  BUTTON_ICON_BIG_1  = 'large_font.BIG.bmp';
  
  BUTTON_ICON_SMAL_2 = 'ok.SMALL.bmp';
  BUTTON_ICON_BIG_2  = 'ok.big.bmp';
var
  obj;  
  toolBar;
  targetZone;
  myObject;  
  x, y;  
  i;
  operations;
  countOp;
  button;
  buttonIcon;
  buttonHight;
begin
try  
  operations := ['Большие', 'Маленькие', 'Средние' ,'Автоматически'];
{  
  if NOT GoToPPR then Raise('Не удалось перейти в ППР');
  if NOT SetDefaultToolBarSettings then
    Log.Warning('Не удалось установить настройки Тулбара по умолчанию');
  // Проверяем, что есть контекстная опервция "Большие кнопки" для некотоых тулбаров и зон докинга
  for i := 1 to 3 do
  begin
    case i of 
      1: myObject := GetFromMainWindow('ВЕРХНЯЯ ЗОНА ДОКИНГА');
      2: myObject := GetFromMainWindow('НИЖНЯЯ ЗОНА ДОКИНГА');
      3: myObject := GetFromMainWindow('ТУЛБАР "ГЛАВНАЯ ПАНЕЛЬ ИНСТРУМЕНТОВ"');      
    end;  
    if NOT IsExists(myObject) then Raise('Не удалось получить объект при i=' + IntToStr(i));
        
    //Перетягиваем тулбар вниз, что б получить нижнюю зону докинга
    if i = 2 then
    begin
      toolBar := GetFromMainWindow('ТУЛБАР "ГЛАВНАЯ ПАНЕЛЬ ИНСТРУМЕНТОВ"');             
      targetZone := GetFromPPR('НИЖНИЙ ТУЛБАР КАРТОЧКИ ЗАПРОСА');
      if NOT UnlockToolbars then Raise('Не удалось разлочить ТУЛБАР');
      if NOT DragToolbar(toolBar, targetZone,  'down') then 
        Raise('Не Удалось задочить тулбар снизу');
    end;
    //Вызываем контекстное меню
    if (i = 1) or (i = 2) then myObject.ClickR(myObject.Width - 100, myObject.Height div 2) else
      myObject.ClickR(myObject.Width div 2, myObject.Height div 2);
    //Проверяем наличие опеарции в контекстном меню  
    for countOp := VarArrayLowBound(operations, 1) to VarArrayHighBound(operations, 1) do     
      if NOT IsPopupMenuItemExists(myObject, 'Размер кнопок\' + operations[countOp], true) then 
      begin
        Log.Error('Контекстная операция "Размер кнопок\' + operations[countOp] + '" к одной из зон не существует');
        Raise;
      end;    
  end;//for
  
  
  
  
  for i := 1 to 3 do
  begin
    case i of
      1: begin
               
         end;  
      2: begin
           toolBarName := 'ТУЛБАР "ПОИСК: ПО РЕКВИЗИТАМ"'; 
           toolBar := GetFromPPR('ТУЛБАР "ПОИСК: ПО РЕКВИЗИТАМ"');
           button := BUTTON_2;
         end;
      3:
    end;
    
     toolBarName := 'ТУЛБАР "ГЛАВНАЯ ПАНЕЛЬ ИНСТРУМЕНТОВ"'; 
     toolBar := GetFromMainWindow(toolBarName);
     button := BUTTON_1;
    //Проверяем, что на тулбаре кнопки действительно стали соответствующего размера  
    for countOp := VarArrayLowBound(operations, 1) to VarArrayHighBound(operations, 1) do
    begin
      case countOp of
        0: begin
             buttonHight := BUTTON_HEIGHT_BIG; 
             if button = BUTTON_1 then buttonIcon := BUTTON_ICON_BIG_1 else buttonIcon := BUTTON_ICON_BIG_2;
           end;
        1: begin
             buttonHight := BUTTON_HEIGHT_SMAL; 
             if button = BUTTON_1 then buttonIcon := BUTTON_ICON_SMAL_1 else buttonIcon := BUTTON_ICON_SMAL_2;
           end;
        2:
        3:        
      end;    
      toolBar.ClickR(toolBar.Width div 2, toolBar.Height div 2);
      if NOT ClickByPopUpMenuItem(toolBar, 'Размер кнопок\' + operations[countOp]) then 
        Raise('Не удалось кликнуть по пункту контекстного меню к тулбару "Размер кнопок\' + operations[countOp] + '"');    
    end;  
    //Проверяем, что соответствующая иконка находится 
    obj := GetToolBarObject(toolBar, 'BUTTON', button);
    if NOT FindPicture(obj, buttonIcon, x, y) then
    begin
      Log.Error('Не удалось найти на кнопке "' + obj.Caption + '" её иконку при значение "Размер иконки = ' +  operations[countOp] + '" на тулбаре :' + toolBarName);
      Raise('Не удалось найти на кнопке "' + obj.Caption + '" её иконку при значение "Размер иконки = ' +  operations[countOp] + '" на тулбаре :' + toolBarName);
    end;
    //Проверяем, что изменился размер
    if NOT (obj.Height = buttonHight) then
    begin
      Log.Error('Высота "' + operations[countOp] + '" иконки не равна эталонной на тулбаре :' + toolBarName , obj.Height);
      Raise('Высота "' + operations[countOp] + '" иконки не равна эталонной на тулбаре :' + toolBarName);
    end;
    //Проверяем, что на соответстующем пункте контекестного меню стоит галка 
    toolBar.ClickR(toolBar.Width div 2, toolBar.Height div 2);
    if NOT IsMenuItemChecked(toolBar.QCPopupMenu, 'Размер кнопок\' + operations[countOp]) then
    begin
      Log.Error('На пункте контекстного меню "Размер кнопок\' + operations[countOp] + '" для тулбара ' + toolBarName + 'не стоит галочка');
      Raise('На пункте контекстного меню "Размер кнопок\' + operations[countOp] + '" для тулбара ' + toolBarName + 'не стоит галочка');
    end;
    ClosePopUpMenu(toolBar);
    
  
  //obj := GetToolBarObject(toolBar, 'BUTTON', BUTTON_2);
  //if NOT FindPicture(obj, BUTTON_ICON_BIG_2, x, y) then
  //begin
  //  Log.Error('Не удалось найти на кнопке "' + obj.Caption + '" её иконку при значение "Размер кнопок = Большие"');
  //  Raise;
  //end;
  //if NOT (obj.Height = BUTTON_HEIGHT_BIG) then
  //begin
  // Log.Error('Высота "Большой" кнопки не равна эталонной', obj.Height);
  //  Raise;
  //end;
  toolBar.ClickR(toolBar.Width div 2, toolBar.Height div 2);
  if NOT IsMenuItemChecked(toolBar.QCPopupMenu, 'Большие иконки') then
  begin
    Log.Error('На пункте контекстного меню "Большие иконки" для тулбара не стоит галочка');
    Raise;
  end;
  ClosePopUpMenu(toolBar);
  obj := GetFromMainWindow('ВЕРХНЯЯ ЗОНА ДОКИНГА');
  if NOT IsExists(obj) then Raise('Не удалось получить ВЕРХНЯЯ ЗОНА ДОКИНГА');
  obj.ClickR(obj.Width - 3, 3);
  if NOT IsMenuItemChecked(toolBar.QCPopupMenu, 'Размер кнопок\Большие') then
  begin
    Log.Error('На пункте контекстного меню "Размер кнопок\Большие" для тулбара не стоит галочка');
    Raise;
  end;
  ClosePopUpMenu(toolBar);
  
  obj := GetFromMainWindow('НИЖНЯЯ ЗОНА ДОКИНГА');
  if NOT IsExists(obj) then Raise('Не удалось получить НИЖНЯЯ ЗОНА ДОКИНГА');
  obj.ClickR(obj.Width - 100, 3);
  if NOT IsMenuItemChecked(toolBar.QCPopupMenu, 'Размер кнопок\Большие') then
  begin
    Log.Error('На пункте контекстного меню "Размер кнопок\Большие" для тулбара не стоит галочка');
    Raise;
  end;
  ClosePopUpMenu(toolBar);
  //Проверяем, что в настройках панели инструментов "Размер кнопок" выставлен как большие.
  obj := OpenTbSettings(true);
  if NOT IsExists(obj) then Raise('Не удалось получить "Настройка панели инструментов"');
  obj := GetFromTbSettings('ЗАКЛАДКИ');  
  if NOT IsExists(obj) then Raise('Не удалось получить PageControl');
  obj.TabIndex := 2;//Жёстко переключаем PageControl на 3-ю вкладку(Дополнительные настройки), 
  //потому что дефолту в дереве объектов объект этой вкладки отсутствует и создается динамически только после переключения на неё руками 
  //http://mdp.garant.ru/pages/viewpage.action?pageId=457099749&focusedCommentId=457101227#comment-457101227  
  if NOT SwitchToPage(obj, 'Дополнительные настройки', false) then Raise('Не удалось переключить вкладку на: Дополнительные настройки');
  obj := GetFromTbSettings('ВКЛАДКА ДОПОЛНИТЕЛЬНЫЕ НАСТРОЙКИ: РАДИОКНОПКА "БОЛЬШИЕ"');
  if NOT IsExists(obj) then Raise('Не удалось получить ВКЛАДКА ДОПОЛНИТЕЛЬНЫЕ НАСТРОЙКИ: РАДИОКНОПКА "БОЛЬШИЕ"');
  if NOT obj.Checked then 
  begin
    Log.Error('После изменения Размера кнопок контекстной операцией к тулбару на "Большие", в настройки панели инструментов они всё равно "маленькие"');
    Raise;
  end;
  GetFromTbSettings('КНОПКА "ОТМЕНА"').Click;
  //Делаем иконки Маленькими(Снимаем галку на контекстной операции к тулбару "Большие иконки")
  toolBar := GetFromMainWindow('ТУЛБАР "ГЛАВНАЯ ПАНЕЛЬ ИНСТРУМЕНТОВ"');
  toolBar.ClickR(toolBar.Width div 2, toolBar.Height div 2);
  if NOT ClickByPopUpMenuItem(toolBar, 'Большие иконки') then 
    Raise('Не удалось кликнуть по пункту контекстного меню к тулбару "Большие иконки"');    
  //Проверяем, что на тулбаре кнопки действительно стали маленькими 
  if NOT GoToPPR then Raise('Не удалось перейти в ППР');
  toolBar := GetFromMainWindow('ТУЛБАР "ГЛАВНАЯ ПАНЕЛЬ ИНСТРУМЕНТОВ"');
  obj := GetToolBarObject(toolBar, 'BUTTON', BUTTON_1);
  if NOT FindPicture(obj, BUTTON_ICON_SMAL_1, x, y) then
  begin
    Log.Error('Не удалось найти на кнопке "' + obj.Caption + '" её иконку при значение "Размер кнопок = Маленькие"');
    Raise;
  end;
  if NOT (obj.Height = BUTTON_HEIGHT_SMAL) then
  begin
    Log.Error('Высота "Маленькой" кнопки не равна эталонной', obj.Height);
    Raise;
  end;
  toolBar.ClickR(toolBar.Width div 2, toolBar.Height div 2);
  if IsMenuItemChecked(toolBar.QCPopupMenu, 'Большие иконки') then
  begin
    Log.Error('На пункте контекстного меню "Большие иконки" для тулбара стоит галочка');
    Raise;
  end;
  ClosePopUpMenu(toolBar);
  toolBar := GetFromPPR('ТУЛБАР "ПОИСК: ПО РЕКВИЗИТАМ"');
 // obj := GetToolBarObject(toolBar, 'BUTTON', BUTTON_2);
 // if NOT FindPicture(obj, BUTTON_ICON_SMAL_2, x, y) then
 // begin
 //   Log.Error('Не удалось найти на кнопке "' + obj.Caption + '" её иконку при значение "Размер кнопок = Маленькие"');
 //   Raise;
 // end;
 //   if NOT (obj.Height = BUTTON_HEIGHT_SMAL) then
 // begin
 //   Log.Error('Высота "Маленькой" кнопки не равна эталонной', obj.Height);
 //   Raise;
 // end;
  toolBar.ClickR(toolBar.Width div 2, toolBar.Height div 2);
  if IsMenuItemChecked(toolBar.QCPopupMenu, 'Большие иконки') then
  begin
    Log.Error('На пункте контекстного меню "Большие иконки" для тулбара стоит галочка');
    Raise;
  end;
  ClosePopUpMenu(toolBar);
  obj := GetFromMainWindow('ВЕРХНЯЯ ЗОНА ДОКИНГА');
  if NOT IsExists(obj) then Raise('Не удалось получить ВЕРХНЯЯ ЗОНА ДОКИНГА');
  obj.ClickR(obj.Width - 3, 3);
  if IsMenuItemChecked(toolBar.QCPopupMenu, 'Большие иконки') then
  begin
    Log.Error('На пункте контекстного меню "Большие иконки" для тулбара стоит галочка');
    Raise;
  end;
  ClosePopUpMenu(toolBar);
  obj := GetFromMainWindow('НИЖНЯЯ ЗОНА ДОКИНГА');
  if NOT IsExists(obj) then Raise('Не удалось получить НИЖНЯЯ ЗОНА ДОКИНГА');
  obj.ClickR(obj.Width - 100, 3);
  if IsMenuItemChecked(toolBar.QCPopupMenu, 'Большие иконки') then
  begin
    Log.Error('На пункте контекстного меню "Большие иконки" для тулбара стоит галочка');
    Raise;
  end;
  ClosePopUpMenu(toolBar);
    //Проверяем, что в настройках панели инструментов "Размер кнопок" выставлен как маленькие.
  obj := OpenTbSettings(true);
  if NOT IsExists(obj) then Raise('Не удалось получить "Настройка панели инструментов"');
  obj := GetFromTbSettings('ЗАКЛАДКИ');  
  if NOT IsExists(obj) then Raise('Не удалось получить PageControl');
  obj.TabIndex := 2;//Жёстко переключаем PageControl на 3-ю вкладку(Дополнительные настройки), 
  //потому что дефолту в дереве объектов объект этой вкладки отсутствует и создается динамически только после переключения на неё руками 
  //http://mdp.garant.ru/pages/viewpage.action?pageId=457099749&focusedCommentId=457101227#comment-457101227  
  if NOT SwitchToPage(obj, 'Дополнительные настройки', false) then Raise('Не удалось переключить вкладку на: Дополнительные настройки');
  obj := GetFromTbSettings('ВКЛАДКА ДОПОЛНИТЕЛЬНЫЕ НАСТРОЙКИ: РАДИОКНОПКА "БОЛЬШИЕ"');
  if NOT IsExists(obj) then Raise('Не удалось получить ВКЛАДКА ДОПОЛНИТЕЛЬНЫЕ НАСТРОЙКИ: РАДИОКНОПКА "БОЛЬШИЕ"');
  if obj.Checked then 
  begin
    Log.Error('После изменения Размера кнопок контекстной операцией к тулбару на "Маленькие", в настройки панели инструментов они всё равно "Большие"');
    Raise;
  end;
  GetFromTbSettings('КНОПКА "ОТМЕНА"').Click;
  
  }
  //Делаем всё как было
  if NOT SetDefaultToolBarSettings then
    Log.Warning('Не удалось установить настройки Тулбара по умолчанию');
  result := true;  
  GoToMainMenu;
except
  SetDefaultToolBarSettings;
  Log.Message('HLTC101_4_Execute: ' + ExceptionMessage, '',  pmNormal, GetLogAttr('EXCEPTION'));
  result := false;         
  CommonExceptionHandler;
end;
end;

{
  DESK: Функция предназначена для проверки умолчательных операций на заданном тулбаре
  Вообщем используется во всей ветки: HLTC101.9: Состав тулбаров по умолчанию. 
}
function CheckedDefaultTbSettings (
  tbName : string;//имя тулбара
  defaultTbSettings : OleVariant //Еталонные умолчательные операции на тулбаре 
): boolean;
var
  tbSettingsWnd;
  comboBox;
  operations;
begin
try
  GoToMainMenu;
  if NOT SetDefaultToolBarSettings then
    Log.Warning('Не удалось установить настройки Тулбара по умолчанию');
  tbSettingsWnd := OpenTbSettings(true);
  if NOT IsExists(tbSettingsWnd) then Raise('Не удалось получить "Настройка панели инструментов"');
  comboBox := GetFromTbSettings('КОМБОБОКС ВЫБОРА ТУЛБАРА');
  if NOT IsExists(comboBox) then  Raise('Не удалось получить комбобокс');
  if NOT SelectInComboBox(comboBox, tbName) then
    Raise('В настройках панели инструментов не удалось изменить значение комбобокса "Объекты системы" на "' + tbName + '"');
  operations :=  GetListOperationsFromTbSetting;
  tbSettingsWnd.Close;
  if NOT CompareArray(defaultTbSettings, operations) then
  begin
    Log.Error('По дефолту состав операций на тулбаре "' + tbName + '" не эталонен');
    Raise('По дефолту состав операций тулбаре "' + tbName + '" не эталонен');
  end;
  result := true;
except
  Log.Message( 'CheckedDefaultTbSettings: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  if tbSettingsWnd.Exists then tbSettingsWnd.Close; 
  result := false;
  CommonExceptionHandler; 
end;
end; 
                          

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.1: Главная панель инструментов    
        Основное меню(+текст)
        Назад(+текст)
        Вперед
        Поиск(+текст)
        Увеличить шрифт
        Уменьшить шрифт
        Моя информация(+текст)
        Панель задач(+текст)
        Список открытых окон(+текст)
}
function HLTC101_9_1_1_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Главная панель инструментов',
    [
      (['Основное меню',                 TB_SET_TEXT_AND_ICON]),
      (['Назад',                         TB_SET_TEXT_AND_ICON]),
      (['Вперед',                        TB_SET_ICON]),
      (['Поиск',                         TB_SET_TEXT_AND_ICON]),      
      (['Увеличить шрифт',               TB_SET_ICON]),
      (['Уменьшить шрифт',               TB_SET_ICON]),
      (['Моя информация',                TB_SET_TEXT_AND_ICON]),
      (['Панель задач',                  TB_SET_TEXT_AND_ICON])                  
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Главная панель инструментов" не равен эталонному');
    Raise('Умолчательны состав тулбара "Главная панель инструментов" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_1_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.2: Дерево пользователей и групп(только для администратора)
    Создать нового пользователя
    Отключить пользователя
    Фильтр пользователей
    Запретить всем использование услуги правового консалтинга
    Разрешить всем использование услуги правового консалтинга
    Разрешить/Запретить вновь созданным пользователям использование услуги правового консалтинга
    Удалить
    Разрешить/Запретить авторегистрацию
}
function HLTC101_9_1_2_Execute (var  CurrentState: OleVariant): OleVariant;
var
  countOfAttempts;  
begin
try
  if NOT RestartF1ShellByAdmin then Raise('Не удалось перелогиниться в оболочку Админом');
  Log.Message('Зашли админом'); 
  if NOT CheckedDefaultTbSettings(
    'Дерево пользователей и групп',
    [
      (['Создать нового пользователя',                                                                  TB_SET_TEXT_AND_ICON]),
      (['Отключить пользователя',                                                                       TB_SET_TEXT_AND_ICON]),
      (['Удалить',                                                                                      TB_SET_TEXT_AND_ICON]),
      (['Фильтр пользователей',                                                                         TB_SET_ICON]),
      (['Запретить всем использование услуги Правового консалтинга',                                    TB_SET_ICON]),
      (['Разрешить всем использование услуги Правового консалтинга',                                    TB_SET_ICON]),
      (['Разрешить/Запретить вновь созданным пользователям использование услуги Правового консалтинга', TB_SET_ICON]),
      (['Разрешить/Запретить авторегистрацию новых пользователей',                                                          TB_SET_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Дерево пользователей и групп" не равен эталонному');
    Raise('Умолчательны состав тулбара "Дерево пользователей и групп" не равен эталонному');
  end;  
  Log.Message('Считали и проверили настройки');
  countOfAttempts := 3;    
  CloseF1Admin(countOfAttempts, Options.Run.Timeout div 6);
  result := true;
except
  Log.Message( 'HLTC101_9_1_2_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  countOfAttempts := 3;    
  CloseF1Admin(countOfAttempts, Options.Run.Timeout div 6);  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.3: Документ: Аннотация к документу
    Сохранить в файл
    Экспорт в MS-Word(+текст)
    Печать(+текст)
    Предварительный просмотр
    Поиск контекста(+текст)
}
function HLTC101_9_1_3_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Документ: Аннотация к документу',
    [
      (['Сохранить в файл...',      TB_SET_ICON]),
      (['Экспорт в MS-Word',        TB_SET_TEXT_AND_ICON]),
      (['Печать...',                TB_SET_TEXT_AND_ICON]),
      (['Предварительный просмотр', TB_SET_ICON]),
      (['Поиск контекста...',       TB_SET_TEXT_AND_ICON])      
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Документ: Аннотация к документу" не равен эталонному');
    Raise('Умолчательны состав тулбара "Документ: Аннотация к документу" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_3_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.4: Документ: Консультация
    Сохранить в файл
    Переслать по E-mail
    Экспорт в MS-Word(+текст)
    Печать(+текст)
    Предварительный просмотр
    Поиск контекста(+текст)
}
function HLTC101_9_1_4_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(  
    'Документ: Консультация',
    [
      (['Сохранить в файл...',      TB_SET_ICON]),
      (['Переслать по E-mail',      TB_SET_ICON]),
      (['Экспорт в MS-Word',        TB_SET_TEXT_AND_ICON]),
      (['Печать...',                TB_SET_TEXT_AND_ICON]),
      (['Предварительный просмотр', TB_SET_ICON]),
      (['Поиск контекста...',       TB_SET_TEXT_AND_ICON])      
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Документ: Консультация" не равен эталонному');
    Raise('Умолчательны состав тулбара "Документ: Консультация" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_4_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.5: Документ: Перевод
    Сохранить в файл
    Переслать по E-mail
    Экспорт в MS-Word(+текст)
    Установить закладку(+текст)
    Печать(+текст)
    Предварительный просмотр
    Поиск контекста(+текст)
}
function HLTC101_9_1_5_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Документ: Перевод',
    [
      (['Сохранить в файл...',      TB_SET_ICON]),
      (['Переслать по E-mail',      TB_SET_ICON]),
      (['Экспорт в MS-Word',        TB_SET_TEXT_AND_ICON]),
      (['Установить закладку...',   TB_SET_TEXT_AND_ICON]),
      (['Печать...',                TB_SET_TEXT_AND_ICON]),
      (['Предварительный просмотр', TB_SET_ICON]),
      (['Поиск контекста...',       TB_SET_TEXT_AND_ICON]) 
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Документ: Перевод" не равен эталонному');
    Raise('Умолчательны состав тулбара "Документ: Перевод" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_5_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.6: Документ: ПРАЙМ. Обзор изменений законодательства
    Сохранить в файл
    Экспорт в MS-Word(+текст)
    Печать(+текст)
    Предварительный просмотр
    Поиск контекста(+текст)
}
function HLTC101_9_1_6_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Документ: ПРАЙМ. Обзор изменений законодательства',
    [
      (['Сохранить в файл...',      TB_SET_ICON]),
      (['Переслать по E-mail',      TB_SET_ICON]),
      (['Экспорт в MS-Word',        TB_SET_TEXT_AND_ICON]),      
      (['Печать...',                TB_SET_TEXT_AND_ICON]),
      (['Предварительный просмотр', TB_SET_ICON]),
      (['Поиск контекста...',       TB_SET_TEXT_AND_ICON])      
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Документ: ПРАЙМ. Обзор изменений законодательства" не равен эталонному');
    Raise('Умолчательны состав тулбара "Документ: ПРАЙМ. Обзор изменений законодательства" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_6_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.7: Документ: Предупреждение
    Нет вынесенных кнопок
}
function HLTC101_9_1_7_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Документ: Предупреждение',
    [
      (['', TB_SET_TEXT_AND_ICON])      
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Документ: Предупреждение" не равен эталонному');
    Raise('Умолчательны состав тулбара "Документ: Предупреждение" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_7_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.8: Документ: Просмотр графического объекта
    Сохранить в файл
    Печать(+текст)
    Предварительный просмотр
    Увеличить(+текст)
    Уменьшить(+текст)
    Во все окно(+текст)
    Изменить масштаб
}
function HLTC101_9_1_8_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Документ: Просмотр графического объекта',
    [
      (['Сохранить в файл...',      TB_SET_ICON]),            
      (['Печать...',                TB_SET_TEXT_AND_ICON]),
      (['Предварительный просмотр', TB_SET_ICON]),
      (['Увеличить',                TB_SET_TEXT_AND_ICON]),
      (['Уменьшить',                TB_SET_TEXT_AND_ICON]),
      (['Во все окно',              TB_SET_TEXT_AND_ICON]),
      (['Изменить масштаб',         TB_SET_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Документ: Просмотр графического объекта" не равен эталонному');
    Raise('Умолчательны состав тулбара "Документ: Просмотр графического объекта" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_8_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.9: Документ: Редакции(вкладка)
    Нет вынесенных кнопок
}
function HLTC101_9_1_9_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Документ: Редакции (вкладка)',
    [
      (['Сравнить редакции',                TB_SET_TEXT_AND_ICON]),
      (['Построить обзор изменений',        TB_SET_TEXT_AND_ICON])      
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Документ: Редакции (вкладка)" не равен эталонному');
    Raise('Умолчательны состав тулбара "Документ: Редакции (вкладка)" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_9_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.10: Документ: Справка к документу
    Сохранить в файл
    Экспорт в MS-Word(+текст)
    Печать(+текст)
    Предварительный просмотр
    Поиск контекста(+текст)
}
function HLTC101_9_1_10_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Документ: Справка к документу',
    [
      (['Сохранить в файл...',      TB_SET_ICON]),
      (['Экспорт в MS-Word',        TB_SET_TEXT_AND_ICON]),      
      (['Печать...',                TB_SET_TEXT_AND_ICON]),
      (['Предварительный просмотр', TB_SET_ICON]),
      (['Поиск контекста...',       TB_SET_TEXT_AND_ICON])      
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Документ: Справка к документу" не равен эталонному');
    Raise('Умолчательны состав тулбара "Документ: Справка к документу" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_10_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.11: Документ: Структура (вкладка)
    Развернуть все
    Свернуть все
    Экспорт в MS-Word
    Печать
    Ссылки на фрагмент(вид информации)
    Ссылки из фрагмента(вид информации)
}
function HLTC101_9_1_11_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Документ: Структура (вкладка)',
    [
      (['Развернуть все',                      TB_SET_ICON]),
      (['Свернуть все',                        TB_SET_ICON]),
      (['Экспорт в MS-Word',                   TB_SET_ICON]),      
      (['Печать...',                           TB_SET_ICON]),
      (['Ссылки на фрагмент (вид информации)', TB_SET_ICON]),
      (['Ссылки из фрагмента (вид информации)',TB_SET_ICON]),
      (['Перенос по словам',                   TB_SET_ICON]),
      (['Похожие к фрагменту',                 TB_SET_ICON])      
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Документ: Структура (вкладка)" не равен эталонному');
    Raise('Умолчательны состав тулбара "Документ: Структура (вкладка)" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_11_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.12: Документ: Текст документа
    Сохранить в файл
    Переслать по E-mail
    Экспорт в MS-Word(+текст)
    Установить закладку(+текст)
    Печать(+текст)
    Предварительный просмотр
    Поиск контекста(+текст)
    Поставить на контроль(+текст)
    Изменения в документе(+текст)
        
}
function HLTC101_9_1_12_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Документ: Текст документа',
    [
      (['Сохранить в файл...',      TB_SET_ICON]),
      (['Переслать по E-mail',      TB_SET_ICON]),
      (['Экспорт в MS-Word',        TB_SET_TEXT_AND_ICON]),            
      (['Установить закладку...',   TB_SET_TEXT_AND_ICON]),
      (['Печать...',                TB_SET_TEXT_AND_ICON]),
      (['Предварительный просмотр', TB_SET_ICON]),
      (['Поиск контекста...',       TB_SET_TEXT_AND_ICON]),
      (['Поставить на контроль',    TB_SET_TEXT_AND_ICON]),
      (['Изменения в документе',    TB_SET_TEXT_AND_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Документ: Текст документа" не равен эталонному');
    Raise('Умолчательны состав тулбара "Документ: Текст документа" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_12_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.13: Документы на контроле (вкладка)
    Удалить
    Список изменившихся документов на контроле
    Сбросить статус «изменен»
}
function HLTC101_9_1_13_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Документы на контроле (вкладка)',
    [
      (['Удалить',                                    TB_SET_ICON]),
      (['Список изменившихся документов на контроле', TB_SET_ICON]),            
      (['Сбросить статус "изменен"',                  TB_SET_TEXT_AND_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Документы на контроле (вкладка)" не равен эталонному');
    Raise('Умолчательны состав тулбара "Документы на контроле (вкладка)" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_13_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.14: Конфигурации (вкладка)
    Сделать активной
    Редактировать
    Копировать    
    Восстановить все
    Записать по умолчанию
    Удалить
}
function HLTC101_9_1_14_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Конфигурации (вкладка)',
    [
      (['Сделать активной',      TB_SET_ICON]),
      (['Редактировать',         TB_SET_ICON]),
      (['Копировать',            TB_SET_ICON]),      
      (['Восстановить все',      TB_SET_ICON]),
      (['Записать по умолчанию', TB_SET_ICON]),            
      (['Удалить',               TB_SET_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Конфигурации (вкладка)" не равен эталонному');
    Raise('Умолчательны состав тулбара "Конфигурации (вкладка)" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_14_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.15: Меню (вкладка)
    Развернуть все
    Свернуть все
    Перенос по словам
}
function HLTC101_9_1_15_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Меню (вкладка)',
    [
      (['Развернуть все',    TB_SET_ICON]),
      (['Свернуть все',      TB_SET_ICON]),            
      (['Перенос по словам', TB_SET_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Меню (вкладка)" не равен эталонному');
    Raise('Умолчательны состав тулбара "Меню (вкладка)" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_15_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.16: Мои документы (вкладка)
    Создать папку
    Удалить
    Фильтрация элементов папок
    Свойства
}
function HLTC101_9_1_16_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Мои документы (вкладка)',
    [                                           
      (['Создать папку',                      TB_SET_ICON]),
      (['Удалить',                            TB_SET_ICON]),            
      (['Фильтрация элементов папок по типу', TB_SET_ICON]),
      (['Свойства',                           TB_SET_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Мои документы (вкладка)" не равен эталонному');
    Raise('Умолчательны состав тулбара "Мои документы (вкладка)" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_16_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end; 

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.17: Настройка конфигурации
    Ок(+текст)
    Отмена(+текст)
    Записать по умолчанию(+текст)
    Восстановить все(+текст)
}
function HLTC101_9_1_17_Execute (var  CurrentState: OleVariant): OleVariant;
var
  settingsWnd;
  toolBar;
  tbSettings;
  defaultTbSettings;
  operations;
begin
try
  defaultTbSettings := [
      (['Ок',                    TB_SET_TEXT_AND_ICON]),
      (['Отмена',                TB_SET_TEXT_AND_ICON]),            
      (['Записать по умолчанию', TB_SET_TEXT_AND_ICON]),
      (['Восстановить все',      TB_SET_TEXT_AND_ICON])
    ];
  GoToMainMenu;
  if NOT SetDefaultToolBarSettings then
    Log.Warning('Не удалось установить настройки Тулбара по умолчанию');   
  settingsWnd := GoToSettings;
  if NOT IsExists(settingsWnd) then Raise('Не удалось открыть окно "Настройки конфигурации"'); 
  toolBar := GetFromSettings('НИЖНИЙ ТУЛБАР');
  if NOT IsExists(toolBar) then Raise('Не удалось получить НИЖНИЙ ТУЛБАР в настройках конфигурации');
  toolBar.ClickR(toolBar.Width div 2, toolBar.Height div 2);
  if NOT ClickByPopUpMenuItem(toolBar, 'Настройка...') then 
    Raise('Не удалось вызвать контекстную операцию "Настройка..."');
  tbSettings := GetFromShell('НАСТРОЙКА ПАНЕЛЕЙ ИНСТРУМЕНТОВ', -1);
  if NOT IsExists(tbSettings) then Raise('Не удлаось получить НАСТРОЙКА ПАНЕЛЕЙ ИНСТРУМЕНТОВ');
  operations :=  GetListOperationsFromTbSetting;
  tbSettings.Close;
  settingsWnd.Close;
  if NOT CompareArray(defaultTbSettings, operations) then
  begin
    Log.Error('По дефолту состав операций на тулбаре "Настройка конфигурации" не эталонен');
    Raise('По дефолту состав операций тулбаре "Настройка конфигурации" не эталонен');
  end;    
  result := true;
except
  Log.Message( 'HLTC101_9_1_17_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  if tbSettings.Exists then tbSettings.Close;  
  if settingsWnd.Exists then settingsWnd.Close;
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.19: Поиск: Выбор реквизита
    Нет вынесенных кнопок
}
function HLTC101_9_1_19_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Поиск: Выбор реквизита',
    [
      (['', TB_SET_TEXT_AND_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Поиск: Выбор реквизита" не равен эталонному');
    Raise('Умолчательны состав тулбара "Поиск: Выбор реквизита" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_19_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end; 

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.20: Поиск: По источнику опубликования
    Нет вынесенных кнопок
}
function HLTC101_9_1_20_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Поиск: По источнику опубликования',
    [
      (['', TB_SET_TEXT_AND_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Поиск: По источнику опубликования" не равен эталонному');
    Raise('Умолчательны состав тулбара "Поиск: По источнику опубликования" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_20_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end; 

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.21: Поиск: По реквизитам
    Нет вынесенных кнопок
}
function HLTC101_9_1_21_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Поиск: По реквизитам',
    [
      (['', TB_SET_TEXT_AND_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Поиск: По реквизитам" не равен эталонному');
    Raise('Умолчательны состав тулбара "Поиск: По реквизитам" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_21_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end; 

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.22: Поиск: По ситуации
    Нет вынесенных кнопок
}
function HLTC101_9_1_22_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Поиск: По ситуации',
    [
      (['', TB_SET_TEXT_AND_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Поиск: По ситуации" не равен эталонному');
    Raise('Умолчательны состав тулбара "Поиск: По ситуации" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_22_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end; 

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.23: Поиск: По ситуации(преемственный)
    Нет вынесенных кнопок
}
function HLTC101_9_1_23_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Поиск: По ситуации (Преемственный)',
    [
      (['', TB_SET_TEXT_AND_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Поиск: По ситуации (Преемственный)" не равен эталонному');
    Raise('Умолчательны состав тулбара "Поиск: По ситуации (Преемственный)" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_23_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end; 

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.24: Поиск: ПРАЙМ. Обзор изменений законодательства
    Нет вынесенных кнопок
}
function HLTC101_9_1_24_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Поиск: ПРАЙМ. Обзор изменений законодательства',
    [
      (['', TB_SET_TEXT_AND_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Поиск: ПРАЙМ. Обзор изменений законодательства" не равен эталонному');
    Raise('Умолчательны состав тулбара "Поиск: ПРАЙМ. Обзор изменений законодательства" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_24_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.25: Поиск: Ситуации первого уровня(вкладка)
    Нет вынесенных кнопок
}
function HLTC101_9_1_25_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Поиск: Ситуации первого уровня (вкладка)',
    [
      (['', TB_SET_TEXT_AND_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Поиск: Ситуации первого уровня (вкладка)" не равен эталонному');
    Raise('Умолчательны состав тулбара "Поиск: Ситуации первого уровня (вкладка)" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_25_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end; 
 
{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.26: Правовой навигатор
    Нет вынесенных кнопок
}
function HLTC101_9_1_26_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Правовой навигатор',
    [
      (['', TB_SET_TEXT_AND_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Правовой навигатор" не равен эталонному');
    Raise('Умолчательны состав тулбара "Правовой навигатор" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_26_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end; 

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.27: ПРАЙМ. Моя новостная лента(вкладка)
    Все поступления в продукт ПРАЙМ
}
function HLTC101_9_1_27_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'ПРАЙМ. Моя новостная лента (вкладка)',
    [
      (['Все поступления в продукт ПРАЙМ', TB_SET_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "ПРАЙМ. Моя новостная лента (вкладка)" не равен эталонному');
    Raise('Умолчательны состав тулбара "ПРАЙМ. Моя новостная лента (вкладка)" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_27_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.29: Предварительный просмотр печати
    Приблизить
    Отдалить
    По ширине листа
    Страница целиком
    Показывать выделенный фрагмент
    Показывать цветным
    Печатать документ/справку
}
function HLTC101_9_1_29_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Предварительный просмотр печати',
    [
      (['Приблизить',                     TB_SET_ICON]),
      (['Отдалить',                       TB_SET_ICON]),
      (['По ширине листа ',               TB_SET_ICON]),
      (['Страница целиком',               TB_SET_ICON]),
      (['Показывать выделенный фрагмент', TB_SET_ICON]),
      (['Показывать цветным',             TB_SET_ICON]),
      (['Печатать документ/справку',      TB_SET_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Предварительный просмотр печати" не равен эталонному');
    Raise('Умолчательны состав тулбара "Предварительный просмотр печати" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_29_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end; 

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
   HLTC101.9.1.30: Свойства пользователя(только для администратора)
    Сохранить(+текст)
    Отмена(+текст)
}
function HLTC101_9_1_30_Execute (var  CurrentState: OleVariant): OleVariant;
var  
  toolBar;
  tbSettings;
  defaultTbSettings;
  operations;
  countOfAttempts;
begin  
try  
  defaultTbSettings := [
      (['Сохранить',  TB_SET_TEXT_AND_ICON]),
      (['Отмена',     TB_SET_TEXT_AND_ICON])
    ];
  countOfAttempts := 3;
  if NOT RestartF1ShellByAdmin then Raise('Не удалось перелогиниться в оболочку Админом');  
  
 
  if NOT SetDefaultToolBarSettings then
    Log.Warning('Не удалось установить настройки Тулбара по умолчанию');
       
  toolBar := GetFromAdmin('НИЖНИЙ ТУЛБАР'); 
  if NOT IsExists(toolBar) then Raise('Не удалось получить НИЖНИЙ ТУЛБАР');
  toolBar.ClickR(toolBar.Width div 2, toolBar.Height div 2);
  if NOT ClickByPopUpMenuItem(toolBar, 'Настройка...') then 
    Raise('Не удалось вызвать контекстную операцию "Настройка..."');
  tbSettings := GetFromShell('НАСТРОЙКА ПАНЕЛЕЙ ИНСТРУМЕНТОВ', -1);
  if NOT IsExists(tbSettings) then Raise('Не удлаось получить НАСТРОЙКА ПАНЕЛЕЙ ИНСТРУМЕНТОВ');
  operations :=  GetListOperationsFromTbSetting;
  tbSettings.Close;  
  if NOT CompareArray(defaultTbSettings, operations) then
  begin
    Log.Error('По дефолту состав операций на тулбаре "Свойства пользователя" не эталонен');
    Raise('По дефолту состав операций тулбаре "Свойства пользователя" не эталонен');
  end;    
  CloseF1Shell(countOfAttempts, Options.Run.Timeout div 6);
  result := true;
except
  Log.Message( 'HLTC101_9_1_30_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;
 
{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.31: Синхронный просмотр: Аннотация
    Сохранить в файл
    Экспорт в MS-Word
    Печать
    Предварительный просмотр
    Поиск контекста
}
function HLTC101_9_1_31_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Синхронный просмотр: Аннотация',
    [
      (['Сохранить в файл...',      TB_SET_ICON]),
      (['Экспорт в MS-Word',        TB_SET_ICON]),
      (['Печать...',                TB_SET_ICON]),
      (['Предварительный просмотр', TB_SET_ICON]),
      (['Поиск контекста...',       TB_SET_ICON])      
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Синхронный просмотр: Аннотация" не равен эталонному');
    Raise('Умолчательны состав тулбара "Синхронный просмотр: Аннотация" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_31_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.32: Синхронный просмотр: Списки ссылок на документ/из документа
    Сохранить в файл
    Переслать по E-mail
    Экспорт в MS-Word
    Печать
    Предварительный просмотр
    Выбрать тип
}
function HLTC101_9_1_32_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Синхронный просмотр: Списки ссылок из документа/на документ',
    [
      (['Сохранить в файл...',      TB_SET_ICON]),
      (['Переслать по E-mail',      TB_SET_ICON]),
      (['Экспорт в MS-Word',        TB_SET_ICON]),
      (['Печать...',                TB_SET_ICON]),
      (['Предварительный просмотр', TB_SET_ICON]),
      (['Выбрать тип',              TB_SET_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Синхронный просмотр: Списки ссылок из документа/на документ" не равен эталонному');
    Raise('Умолчательны состав тулбара "Синхронный просмотр: Списки ссылок из документа/на документ" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_32_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end; 

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.33: Синхронный просмотр: Справка к документу
    Сохранить в файл
    Экспорт в MS-Word
    Печать
    Предварительный просмотр
    Поиск контекста
}
function HLTC101_9_1_33_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Синхронный просмотр: Справка к документу',
    [
      (['Сохранить в файл...',      TB_SET_ICON]),
      (['Экспорт в MS-Word',        TB_SET_ICON]),
      (['Печать...',                TB_SET_ICON]),
      (['Предварительный просмотр', TB_SET_ICON]),
      (['Поиск контекста...',       TB_SET_ICON])      
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Синхронный просмотр: Справка к документу" не равен эталонному');
    Raise('Умолчательны состав тулбара "Синхронный просмотр: Справка к документу" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_33_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end; 

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.34: Синхронный просмотр: Текст документа
    Сохранить в файл
    Переслать по E-mail
    Экспорт в MS-Word
    Печать
    Предварительный просмотр
    Поиск контекста
}
function HLTC101_9_1_34_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Синхронный просмотр: Текст документа',
    [
      (['Сохранить в файл...',      TB_SET_ICON]),
      (['Переслать по E-mail',      TB_SET_ICON]),
      (['Экспорт в MS-Word',        TB_SET_ICON]),
      (['Печать...',                TB_SET_ICON]),
      (['Предварительный просмотр', TB_SET_ICON]),
      (['Поиск контекста...',       TB_SET_ICON])      
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Синхронный просмотр: Текст документа" не равен эталонному');
    Raise('Умолчательны состав тулбара "Синхронный просмотр: Текст документа" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_34_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.35: Список
    Сохранить в файл
    Переслать по E-mail
    Экспорт в MS-Word(+текст)
    Сохранить в мои документы(+текст)
    Печать(+текст)
    Предварительный просмотр
    Поиск контекста(+текст)
    Работа со списком(+текст) 
    
}
function HLTC101_9_1_35_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Список',
    [
      (['Сохранить в файл...',                          TB_SET_ICON]),
      (['Переслать по E-mail',      TB_SET_ICON]),
      (['Экспорт в MS-Word',                            TB_SET_TEXT_AND_ICON]),
      (['Сохранить в Мои документы...',                 TB_SET_TEXT_AND_ICON]),
      (['Печать...',                                    TB_SET_TEXT_AND_ICON]),
      (['Предварительный просмотр',                     TB_SET_ICON]),
      (['Поиск контекста...',                           TB_SET_TEXT_AND_ICON]),            
      (['Поставить на контроль',                        TB_SET_TEXT_AND_ICON]),
      (['Работа со списком',                            TB_SET_TEXT_AND_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Список" не равен эталонному');
    Raise('Умолчательны состав тулбара "Список" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_35_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.36: Список: Консультация
    Сохранить в файл
    Переслать по E-mail
    Экспорт в MS-Word
    Сохранить в мои документы(+текст)
    Печать(+текст)
    Предварительный просмотр
}
function HLTC101_9_1_36_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Список: Консультация',
    [
      (['Сохранить в файл...',          TB_SET_ICON]),
      (['Переслать по E-mail',      TB_SET_ICON]),
      (['Экспорт в MS-Word',            TB_SET_ICON]),
      (['Сохранить в Мои документы...', TB_SET_TEXT_AND_ICON]),
      (['Печать...',                    TB_SET_TEXT_AND_ICON]),
      (['Предварительный просмотр',     TB_SET_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Список: Консультация" не равен эталонному');
    Raise('Умолчательны состав тулбара "Список: Консультация" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_36_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.37: Список: Ссылки на документ
    Сохранить в файл
    Экспорт в MS-Word
    Сохранить в мои документы(+текст)
    Печать(+текст)
    Предварительный просмотр
    Выбрать тип
}
function HLTC101_9_1_37_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Список: Ссылки на документ',
    [
      (['Сохранить в файл...',          TB_SET_ICON]),
      (['Экспорт в MS-Word',            TB_SET_ICON]),
      (['Сохранить в Мои документы...', TB_SET_TEXT_AND_ICON]),
      (['Печать...',                    TB_SET_TEXT_AND_ICON]),
      (['Предварительный просмотр',     TB_SET_ICON]),
      (['Выбрать тип',                  TB_SET_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Список: Ссылки на документ" не равен эталонному');
    Raise('Умолчательны состав тулбара "Список: Ссылки на документ" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_37_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;


{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.38: Список: Ссылки на фрагмент/ссылки из фрагмента
    Сохранить в файл
    Экспорт в MS-Word
    Сохранить в мои документы(+текст)
    Печать(+текст)
    Предварительный просмотр
    Выбрать тип
}
function HLTC101_9_1_38_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Список: Ссылки из фрагмента/Ссылки на фрагмент',
    [
      (['Сохранить в файл...',          TB_SET_ICON]),
      (['Экспорт в MS-Word',            TB_SET_ICON]),
      (['Сохранить в Мои документы...', TB_SET_TEXT_AND_ICON]),
      (['Печать...',                    TB_SET_TEXT_AND_ICON]),
      (['Предварительный просмотр',     TB_SET_ICON]),
      (['Выбрать тип',                  TB_SET_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Список: Ссылки из фрагмента/Ссылки на фрагмент" не равен эталонному');
    Raise('Умолчательны состав тулбара "Список: Ссылки из фрагмента/Ссылки на фрагмент" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_38_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.39: Список: пользовательская вкладка ссылки на документ(ссылки из документа) 1
    Сохранить в файл
    Экспорт в MS-Word
    Сохранить в мои документы(+текст)
    Печать(+текст)
    Предварительный просмотр
}
function HLTC101_9_1_39_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Список: Пользовательская вкладка ссылки на документ (ссылки из документа) 1',
    [
      (['Сохранить в файл...',          TB_SET_ICON]),
      (['Экспорт в MS-Word',            TB_SET_ICON]),
      (['Сохранить в Мои документы...', TB_SET_TEXT_AND_ICON]),
      (['Печать...',                    TB_SET_TEXT_AND_ICON]),
      (['Предварительный просмотр',     TB_SET_ICON])    
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Список: Пользовательская вкладка ссылки на документ (ссылки из документа) 1" не равен эталонному');
    Raise('Умолчательны состав тулбара "Список: Пользовательская вкладка ссылки на документ (ссылки из документа) 1" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_39_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.40: Список: пользовательская вкладка ссылки на документ(ссылки из документа) 2
    Сохранить в файл
    Экспорт в MS-Word
    Сохранить в мои документы(+текст)
    Печать(+текст)
    Предварительный просмотр
}
function HLTC101_9_1_40_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Список: Пользовательская вкладка ссылки на документ (ссылки из документа) 2',
    [
      (['Сохранить в файл...',          TB_SET_ICON]),
      (['Экспорт в MS-Word',            TB_SET_ICON]),
      (['Сохранить в Мои документы...', TB_SET_TEXT_AND_ICON]),
      (['Печать...',                    TB_SET_TEXT_AND_ICON]),
      (['Предварительный просмотр',     TB_SET_ICON])    
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Список: Пользовательская вкладка ссылки на документ (ссылки из документа) 2" не равен эталонному');
    Raise('Умолчательны состав тулбара "Список: Пользовательская вкладка ссылки на документ (ссылки из документа) 2" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_40_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.41: Список: Похожие документы
    Сохранить в файл
    Переслать по E-mail
    Экспорт в MS-Word
    Сохранить в мои документы(+текст)
    Печать(+текст)
    Предварительный просмотр
    Выбрать тип
}
function HLTC101_9_1_41_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Список: Похожие документы',
    [
      (['Сохранить в файл...',          TB_SET_ICON]),
      (['Переслать по E-mail',          TB_SET_ICON]),
      (['Экспорт в MS-Word',            TB_SET_ICON]),
      (['Сохранить в Мои документы...', TB_SET_TEXT_AND_ICON]),
      (['Печать...',                    TB_SET_TEXT_AND_ICON]),
      (['Предварительный просмотр',     TB_SET_ICON])          
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Список: Похожие документы" не равен эталонному');
    Raise('Умолчательны состав тулбара "Список: Похожие документы" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_41_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.42: Список: Ссылки из документа
    Сохранить в файл
    Экспорт в MS-Word
    Сохранить в мои документы(+текст)
    Печать(+текст)
    Предварительный просмотр
    Выбрать тип
}
function HLTC101_9_1_42_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Список: Ссылки из документа',
    [
      (['Сохранить в файл...',          TB_SET_ICON]),
      (['Экспорт в MS-Word',            TB_SET_ICON]),
      (['Сохранить в Мои документы...', TB_SET_TEXT_AND_ICON]),
      (['Печать...',                    TB_SET_TEXT_AND_ICON]),
      (['Предварительный просмотр',     TB_SET_ICON]),
      (['Выбрать тип',                  TB_SET_ICON])    
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Список: Ссылки из документа" не равен эталонному');
    Raise('Умолчательны состав тулбара "Список: Ссылки из документа" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_42_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.43: Список: Справка к списку
    Нет вынесенных кнопок
}
function HLTC101_9_1_43_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Список: Справка к списку',
    [
      (['', TB_SET_TEXT_AND_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Список: Справка к списку" не равен эталонному');
    Raise('Умолчательны состав тулбара "Список: Справка к списку" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_43_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.44: Толковый словарь: Перевод словарной статьи
    Сохранить в файл
    Переслать по E-mail
    Экспорт в MS-Word(+текст)
    Печать(+текст)
    Предварительный просмотр
    Поиск контекст(+текст)
}
function HLTC101_9_1_44_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Толковый словарь: Перевод словарной статьи',
    [
      (['Сохранить в файл...',           TB_SET_ICON]),
      (['Переслать по E-mail',           TB_SET_ICON]),
      (['Экспорт в MS-Word',             TB_SET_TEXT_AND_ICON]),      
      (['Печать...',                     TB_SET_TEXT_AND_ICON]),
      (['Предварительный просмотр',      TB_SET_ICON]),
      (['Поиск контекста...',            TB_SET_TEXT_AND_ICON])          
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Толковый словарь: Перевод словарной статьи" не равен эталонному');
    Raise('Умолчательны состав тулбара "Толковый словарь: Перевод словарной статьи" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_44_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.45: Толковый словарь: Список терминов(вкладка)
      Нет вынесенных кнопок
}
function HLTC101_9_1_45_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Толковый словарь: Список терминов (вкладка)',
    [
      (['', TB_SET_TEXT_AND_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Толковый словарь: Список терминов (вкладка)" не равен эталонному');
    Raise('Умолчательны состав тулбара "Толковый словарь: Список терминов (вкладка)" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_45_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.46: Толковый словарь: Текст словарной статьи
    Сохранить в файл
    Переслать по E-mail
    Экспорт в MS-Word(+текст)
    Установить закладку...
    Печать(+текст)
    Предварительный просмотр
    Поиск контекст(+текст)
    Список литературы
}
function HLTC101_9_1_46_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Толковый словарь: Текст словарной статьи',
    [
      (['Сохранить в файл...',        TB_SET_ICON]),
      (['Переслать по E-mail',        TB_SET_ICON]),
      (['Экспорт в MS-Word',          TB_SET_TEXT_AND_ICON]),
      (['Установить закладку...',     TB_SET_TEXT_AND_ICON]),     
      (['Печать...',                  TB_SET_TEXT_AND_ICON]),
      (['Предварительный просмотр',   TB_SET_ICON]),
      (['Поиск контекста...',         TB_SET_TEXT_AND_ICON]),
      (['Список литературы',          TB_SET_ICON])      
    ]                             
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Толковый словарь: Текст словарной статьи" не равен эталонному');
    Raise('Умолчательны состав тулбара "Толковый словарь: Текст словарной статьи" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_46_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.47: Фильтры(вкладка)
    Редактировать фильтр
    Добавить фильтр из сохраненных запросов
    Удалить
    Создать новый фильтр
}
function HLTC101_9_1_47_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Фильтры (вкладка)',
    [
      (['Редактировать фильтр',                    TB_SET_ICON]),
      (['Добавить фильтр из сохраненных запросов', TB_SET_ICON]),      
      (['Удалить',                 TB_SET_ICON]),
      (['Создать новый фильтр',                    TB_SET_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Фильтры (вкладка)" не равен эталонному');
    Raise('Умолчательны состав тулбара "Фильтры (вкладка)" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_47_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.48: Мои документы
    Создать папку
    Удалить
    Фильтрация элементов папок по типу
    Свойства
}
function HLTC101_9_1_48_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Мои документы',
    [
      (['Создать папку',                      TB_SET_ICON]),
      (['Удалить',                            TB_SET_ICON]),      
      (['Фильтрация элементов папок по типу', TB_SET_ICON]),
      (['Свойства',                           TB_SET_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Мои документы" не равен эталонному');
    Raise('Умолчательны состав тулбара "Мои документы" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_48_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;
{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.49: Основное меню
    Нет вынесенных кнопок
}
function HLTC101_9_1_49_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Основное меню',
    [
      (['',  TB_SET_TEXT_AND_ICON])      
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Основное меню" не равен эталонному');
    Raise('Умолчательны состав тулбара "Основное меню" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_49_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;
{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.50: Поиск: Выбранные значения реквизита
    Нет вынесенных кнопок
}
function HLTC101_9_1_50_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Поиск: Выбранные значения реквизита',
    [
      (['',  TB_SET_TEXT_AND_ICON])      
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Поиск: Выбранные значения реквизита" не равен эталонному');
    Raise('Умолчательны состав тулбара "Поиск: Выбранные значения реквизита" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_50_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;
{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.51: Простое основное меню
    Нет вынесенных кнопок
}
function HLTC101_9_1_51_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Простое Основное меню',
    [
      (['',  TB_SET_TEXT_AND_ICON])      
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Простое основное меню" не равен эталонному');
    Raise('Умолчательны состав тулбара "Простое основное меню" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_51_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;
{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.1: Конфигурация «Основная»
    HLTC101.9.1.52: Синхронный просмотр: Похожие документы
    Сохранить в файл
    Переслать по E-mail
    Экспорт в MS-Word
    Сохранить в мои документы
    Печать...
    Предварительный просмотр
}
function HLTC101_9_1_52_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Синхронный просмотр: Похожие документы',
    [
      (['Сохранить в файл...',      TB_SET_ICON]),
      (['Переслать по E-mail',           TB_SET_ICON]),
      (['Экспорт в MS-Word',        TB_SET_ICON]),
      (['Сохранить в Мои документы...', TB_SET_ICON]),
      (['Печать...',                TB_SET_ICON]),
      (['Предварительный просмотр', TB_SET_ICON])      
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Синхронный просмотр: Похожие документы" не равен эталонному');
    Raise('Умолчательны состав тулбара "Синхронный просмотр: Похожие документы" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_1_52_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.1: Главная панель инструментов
      Основное меню(+текст)
      Назад(+текст)
      Вперед
      Поиск(+текст)
      Увеличить шрифт
      Уменьшить шрифт
      Моя информация(+текст)
      Список открытых окон(+текст)    
}
function HLTC101_9_2_1_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Главная панель инструментов',
    [
      (['Основное меню',                 TB_SET_TEXT_AND_ICON]),
      (['Назад',                         TB_SET_TEXT_AND_ICON]),
      (['Вперед',                        TB_SET_ICON]),
      (['Поиск',                         TB_SET_TEXT_AND_ICON]),      
      (['Увеличить шрифт',               TB_SET_ICON]),
      (['Уменьшить шрифт',               TB_SET_ICON]),
      (['Моя информация',                TB_SET_TEXT_AND_ICON])                  
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Главная панель инструментов" не равен эталонному');
    Raise('Умолчательны состав тулбара "Главная панель инструментов" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_1_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  if IsExists(tbSettingsWnd) then tbSettingsWnd.Close;
  result := false;
  CommonExceptionHandler; 
end;
end;

{
{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.3: Документ: Аннотация к документу
    Сохранить в файл
    Экспорт в MS-Word
    Печать
    Предварительный просмотр
    Поиск контекста
}
function HLTC101_9_2_3_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Документ: Аннотация к документу',
    [
      (['Сохранить в файл...',      TB_SET_ICON]),
      (['Экспорт в MS-Word',        TB_SET_ICON]),
      (['Печать...',                TB_SET_ICON]),
      (['Предварительный просмотр', TB_SET_ICON]),
      (['Поиск контекста...',       TB_SET_ICON])      
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Документ: Аннотация к документу" не равен эталонному');
    Raise('Умолчательны состав тулбара "Документ: Аннотация к документу" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_3_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.4: Документ: Консультация
    Сохранить в файл
    Переслать по E-mail
    Экспорт в MS-Word
    Печать
    Предварительный просмотр
    Поиск контекста
}
function HLTC101_9_2_4_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Документ: Консультация',
    [
      (['Сохранить в файл...',      TB_SET_ICON]),
      (['Переслать по E-mail',           TB_SET_ICON]),
      (['Экспорт в MS-Word',        TB_SET_TEXT_AND_ICON]),
      (['Печать...',                TB_SET_TEXT_AND_ICON]),
      (['Предварительный просмотр', TB_SET_ICON]),
      (['Поиск контекста...',       TB_SET_TEXT_AND_ICON])      
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Документ: Консультация" не равен эталонному');
    Raise('Умолчательны состав тулбара "Документ: Консультация" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_4_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.5: Документ: Перевод
    Сохранить в файл
    Переслать по E-mail
    Экспорт в MS-Word
    Установить закладку(+текст)
    Печать(+текст)
    Предварительный просмотр
    Поиск контекста(+текст)
    Показать/скрыть комментарии ГАРАНТа
    Показать/скрыть мои комментарии
}
function HLTC101_9_2_5_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Документ: Перевод',
    [
      (['Сохранить в файл...',                 TB_SET_ICON]),
      (['Переслать по E-mail',                 TB_SET_ICON]),
      (['Экспорт в MS-Word',                   TB_SET_ICON]),
      (['Установить закладку...',              TB_SET_TEXT_AND_ICON]),
      (['Печать...',                           TB_SET_TEXT_AND_ICON]),
      (['Предварительный просмотр',            TB_SET_ICON]),
      (['Поиск контекста...',                  TB_SET_TEXT_AND_ICON]),
      (['Показать/скрыть комментарии ГАРАНТа', TB_SET_ICON]),
      (['Показать/скрыть мои комментарии',     TB_SET_ICON])      
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Документ: Перевод" не равен эталонному');
    Raise('Умолчательны состав тулбара "Документ: Перевод" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_5_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.6: Документ: ПРАЙМ. Обзор изменений законодательства
    Сохранить в файл
    Переслать по E-mail
    Экспорт в MS-Word(+текст)
    Печать(+текст)
    Предварительный просмотр
    Поиск контекста(+текст)
}
function HLTC101_9_2_6_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Документ: ПРАЙМ. Обзор изменений законодательства',
    [
      (['Сохранить в файл...',      TB_SET_ICON]),
      (['Переслать по E-mail',      TB_SET_ICON]),
      (['Экспорт в MS-Word',        TB_SET_TEXT_AND_ICON]),      
      (['Печать...',                TB_SET_TEXT_AND_ICON]),
      (['Предварительный просмотр', TB_SET_ICON]),
      (['Поиск контекста...',       TB_SET_TEXT_AND_ICON])      
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Документ: ПРАЙМ. Обзор изменений законодательства" не равен эталонному');
    Raise('Умолчательны состав тулбара "Документ: ПРАЙМ. Обзор изменений законодательства" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_6_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.7: Документ: Предупреждение
    Нет вынесенных кнопок
}
function HLTC101_9_2_7_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Документ: Предупреждение',
    [
      (['', TB_SET_TEXT_AND_ICON])      
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Документ: Предупреждение" не равен эталонному');
    Raise('Умолчательны состав тулбара "Документ: Предупреждение" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_7_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.8: Документ: Просмотр графического объекта
    Сохранить в файл
    Печать(+текст)
    Предварительный просмотр
    Увеличить(+текст)
    Уменьшить(+текст)
    Во все окно(+текст)
    Изменить масштаб
}
function HLTC101_9_2_8_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Документ: Просмотр графического объекта',
    [
      (['Сохранить в файл...',      TB_SET_ICON]),            
      (['Печать...',                TB_SET_TEXT_AND_ICON]),
      (['Предварительный просмотр', TB_SET_ICON]),
      (['Увеличить',                TB_SET_TEXT_AND_ICON]),
      (['Уменьшить',                TB_SET_TEXT_AND_ICON]),
      (['Во все окно',              TB_SET_TEXT_AND_ICON]),
      (['Изменить масштаб',         TB_SET_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Документ: Просмотр графического объекта" не равен эталонному');
    Raise('Умолчательны состав тулбара "Документ: Просмотр графического объекта" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_8_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.9: Документ: Редакции(вкладка)
      Сравнить редакции(+текст)
      Построить обзор изменений(+текст)
}
function HLTC101_9_2_9_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Документ: Редакции (вкладка)',
    [
      (['Сравнить редакции',                TB_SET_TEXT_AND_ICON]),
      (['Построить обзор изменений',        TB_SET_TEXT_AND_ICON])      
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Документ: Редакции (вкладка)" не равен эталонному');
    Raise('Умолчательны состав тулбара "Документ: Редакции (вкладка)" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_9_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.10: Документ: Справка к документу
    Сохранить в файл
    Экспорт в MS-Word
    Печать
    Предварительный просмотр
    Поиск контекста
}
function HLTC101_9_2_10_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Документ: Справка к документу',
    [
      (['Сохранить в файл...',      TB_SET_ICON]),
      (['Экспорт в MS-Word',        TB_SET_ICON]),      
      (['Печать...',                TB_SET_ICON]),
      (['Предварительный просмотр', TB_SET_ICON]),
      (['Поиск контекста...',       TB_SET_ICON])      
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Документ: Справка к документу" не равен эталонному');
    Raise('Умолчательны состав тулбара "Документ: Справка к документу" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_10_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.11: Документ: Структура(вкладка)
    Развернуть все
    Свернуть все
    Экспорт в MS-Word
    Печать
    Ссылки на фрагмент(вид информации)
    Ссылки из фрагмента(вид информации)
}
function HLTC101_9_2_11_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Документ: Структура (вкладка)',
    [
      (['Развернуть все',                      TB_SET_ICON]),
      (['Свернуть все',                        TB_SET_ICON]),
      (['Экспорт в MS-Word',                   TB_SET_ICON]),      
      (['Печать...',                           TB_SET_ICON]),
      (['Ссылки на фрагмент (вид информации)', TB_SET_ICON]),
      (['Ссылки из фрагмента (вид информации)',TB_SET_ICON]),
      (['Перенос по словам',                   TB_SET_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Документ: Структура (вкладка)" не равен эталонному');
    Raise('Умолчательны состав тулбара "Документ: Структура (вкладка)" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_11_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.12: Документ: Текст документа
    Сохранить в файл
    Переслать по E-mail
    Экспорт в MS-Word
    Сохранить в мои документы
    Выбрать из моих документов
    Печать
    Предварительный просмотр
    Поиск контекста(+текст)
    Поставить на контроль(+текст)
    Ссылки на документ(вид информации)
    Ссылки из документа (вид информации)
    Включить Машину времени(+текст)    
    Показать/скрыть комментарии ГАРАНТа
    Показать/скрыть мои комментарии
    Графическая копия официальной публикации
    Изменения в документе (+ текст)
}
function HLTC101_9_2_12_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Документ: Текст документа',
    [
      (['Сохранить в файл...',                                      TB_SET_ICON]),
      (['Переслать по E-mail',                                      TB_SET_ICON]),
      (['Экспорт в MS-Word',                                        TB_SET_ICON]), 
      (['Сохранить в Мои документы...',                             TB_SET_ICON]),
      (['Выбрать из Моих документов...',                            TB_SET_ICON]),      
      (['Печать...',                                                TB_SET_ICON]),
      (['Предварительный просмотр',                                 TB_SET_ICON]),
      (['Поиск контекста...',                                       TB_SET_ICON]),      
      (['Поставить на контроль',                                    TB_SET_ICON]),
      (['Ссылки на документ (вид информации)',                      TB_SET_ICON]),
      (['Ссылки из документа (вид информации)',                     TB_SET_ICON]),
      (['Включить Машину времени',                                  TB_SET_ICON]),      
      (['Показать/скрыть комментарии ГАРАНТа',                      TB_SET_ICON]),
      (['Показать/скрыть мои комментарии',                          TB_SET_ICON]),      
      (['Графическая копия официальной публикации',                 TB_SET_ICON]),
      (['Изменения в документе',                                    TB_SET_TEXT_AND_ICON])      
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Документ: Текст документа" не равен эталонному');
    Raise('Умолчательны состав тулбара "Документ: Текст документа" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_12_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.13: Документы на контроле(вкладка)
    Удалить
    Список изменившихся документов на контроле
    Сбросить статус «изменен»
    Сбросить статус «изменен» у всех объектов
    Сортировать
}
function HLTC101_9_2_13_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Документы на контроле (вкладка)',
    [
      (['Удалить',                                    TB_SET_ICON]),
      (['Список изменившихся документов на контроле', TB_SET_ICON]),            
      (['Сбросить статус "изменен"',                  TB_SET_ICON]),
      (['Сбросить статус "изменен" у всех объектов',  TB_SET_ICON]),
      (['Сортировать',                                TB_SET_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Документы на контроле (вкладка)" не равен эталонному');
    Raise('Умолчательны состав тулбара "Документы на контроле (вкладка)" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_13_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.14: Конфигурации(вкладка)
    Сделать активной
    Редактировать
    Копировать    
    Восстановить все
    Записать по умолчанию
    Удалить
}
function HLTC101_9_2_14_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Конфигурации (вкладка)',
    [
      (['Сделать активной',      TB_SET_ICON]),
      (['Редактировать',         TB_SET_ICON]),
      (['Копировать',            TB_SET_ICON]),      
      (['Восстановить все',      TB_SET_ICON]),
      (['Записать по умолчанию', TB_SET_ICON]),            
      (['Удалить',               TB_SET_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Конфигурации (вкладка)" не равен эталонному');
    Raise('Умолчательны состав тулбара "Конфигурации (вкладка)" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_14_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.15: Меню(вкладка)
    Развернуть все
    Свернуть все
    Перенос по словам
}
function HLTC101_9_2_15_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Меню (вкладка)',
    [
      (['Развернуть все',    TB_SET_ICON]),
      (['Свернуть все',      TB_SET_ICON]),            
      (['Перенос по словам', TB_SET_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Меню (вкладка)" не равен эталонному');
    Raise('Умолчательны состав тулбара "Меню (вкладка)" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_15_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.16: Мои документы(вкладка)
    Создать папку
    Удалить
    Фильтрация элементов папок
    Свойства
}
function HLTC101_9_2_16_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Мои документы (вкладка)',
    [                                           
      (['Создать папку',                      TB_SET_ICON]),
      (['Удалить',                            TB_SET_ICON]),            
      (['Фильтрация элементов папок по типу', TB_SET_ICON]),
      (['Свойства',                           TB_SET_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Мои документы (вкладка)" не равен эталонному');
    Raise('Умолчательны состав тулбара "Мои документы (вкладка)" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_16_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end; 

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.17: Настройка конфигурации
    Ок(+текст)
    Отмена(+текст)
    Записать по умолчанию(+текст)
    Восстановить все(+текст)
}
function HLTC101_9_2_17_Execute (var  CurrentState: OleVariant): OleVariant;
var
  settingsWnd;
  toolBar;
  tbSettings;
  defaultTbSettings;
  operations;
begin
try
  defaultTbSettings := [
      (['Ок',                    TB_SET_TEXT_AND_ICON]),
      (['Отмена',                TB_SET_TEXT_AND_ICON]),            
      (['Записать по умолчанию', TB_SET_TEXT_AND_ICON]),
      (['Восстановить все',      TB_SET_TEXT_AND_ICON])
    ];
  GoToMainMenu;
  if NOT SetDefaultToolBarSettings then
    Log.Warning('Не удалось установить настройки Тулбара по умолчанию');   
  settingsWnd := GoToSettings;
  if NOT IsExists(settingsWnd) then Raise('Не удалось открыть окно "Настройки конфигурации"'); 
  toolBar := GetFromSettings('НИЖНИЙ ТУЛБАР');
  if NOT IsExists(toolBar) then Raise('Не удалось получить НИЖНИЙ ТУЛБАР в настройках конфигурации');
  toolBar.ClickR(toolBar.Width div 2, toolBar.Height div 2);
  if NOT ClickByPopUpMenuItem(toolBar, 'Настройка...') then 
    Raise('Не удалось вызвать контекстную операцию "Настройка..."');
  tbSettings := GetFromShell('НАСТРОЙКА ПАНЕЛЕЙ ИНСТРУМЕНТОВ', -1);
  if NOT IsExists(tbSettings) then Raise('Не удлаось получить НАСТРОЙКА ПАНЕЛЕЙ ИНСТРУМЕНТОВ');
  operations :=  GetListOperationsFromTbSetting;
  tbSettings.Close;
  settingsWnd.Close;
  if NOT CompareArray(defaultTbSettings, operations) then
  begin
    Log.Error('По дефолту состав операций на тулбаре "Настройка конфигурации" не эталонен');
    Raise('По дефолту состав операций тулбаре "Настройка конфигурации" не эталонен');
  end;    
  result := true;
except
  Log.Message( 'HLTC101_9_2_17_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  if tbSettings.Exists then tbSettings.Close;  
  if settingsWnd.Exists then settingsWnd.Close;
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.19: Поиск: Выбор реквизита
    Нет вынесенных кнопок
}
function HLTC101_9_2_19_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Поиск: Выбор реквизита',
    [
      (['', TB_SET_TEXT_AND_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Поиск: Выбор реквизита" не равен эталонному');
    Raise('Умолчательны состав тулбара "Поиск: Выбор реквизита" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_19_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end; 

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.20: Поиск: Выбранные значения реквизита
    Нет вынесенных кнопок
}
function HLTC101_9_2_20_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Поиск: Выбранные значения реквизита',
    [
      (['',  TB_SET_TEXT_AND_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Поиск: Выбранные значения реквизита" не равен эталонному');
    Raise('Умолчательны состав тулбара "Поиск: Выбранные значения реквизита" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_20_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.21: Поиск: По источнику опубликования
    Сохранить в Мои документы
    Выбрать из Моих документов
    История запросов
    Фильтры(вкладка)
}
function HLTC101_9_2_21_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Поиск: По источнику опубликования',
    [
      //(['Сохранить в Мои документы...',  TB_SET_TEXT_AND_ICON]),
      (['Сохранить в Мои документы...',  TB_SET_TEXT_AND_ICON]),      
      (['Выбрать из Моих документов...', TB_SET_TEXT_AND_ICON]),
      (['История запросов',              TB_SET_TEXT_AND_ICON]),
      (['Фильтры (вкладка)',             TB_SET_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Поиск: По источнику опубликования" не равен эталонному');
    Raise('Умолчательны состав тулбара "Поиск: По источнику опубликования" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_21_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end; 

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.22: Поиск: По реквизитам
    Сохранить в Мои документы
    Выбрать из Моих документов
    История запросов
    Фильтры(вкладка)
}
function HLTC101_9_2_22_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Поиск: По реквизитам',
    [
      (['Сохранить в Мои документы...',  TB_SET_TEXT_AND_ICON]),
      (['Выбрать из Моих документов...', TB_SET_TEXT_AND_ICON]),
      (['История запросов',              TB_SET_TEXT_AND_ICON]),
      (['Фильтры (вкладка)',             TB_SET_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Поиск: По реквизитам" не равен эталонному');
    Raise('Умолчательны состав тулбара "Поиск: По реквизитам" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_22_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end; 

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.23: Поиск: По ситуации
    Сохранить в Мои документы
    Выбрать из Моих документов
    История запросов
}
function HLTC101_9_2_23_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Поиск: По ситуации',
    [
      (['Сохранить в Мои документы...',  TB_SET_TEXT_AND_ICON]),
      (['Выбрать из Моих документов...', TB_SET_TEXT_AND_ICON]),
      (['История запросов',              TB_SET_TEXT_AND_ICON])      
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Поиск: По ситуации" не равен эталонному');
    Raise('Умолчательны состав тулбара "Поиск: По ситуации" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_23_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.24: Поиск: По ситуации(преемственный)
    Сохранить в Мои документы
    Выбрать из Моих документов
    История запросов
    ИЛИ
}
function HLTC101_9_2_24_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Поиск: По ситуации (Преемственный)',
    [
      (['Сохранить в Мои документы...',  TB_SET_TEXT_AND_ICON]),
      (['Выбрать из Моих документов...', TB_SET_TEXT_AND_ICON]),
      (['История запросов',              TB_SET_TEXT_AND_ICON]),
      (['ИЛИ',                           TB_SET_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Поиск: По ситуации (Преемственный)" не равен эталонному');
    Raise('Умолчательны состав тулбара "Поиск: По ситуации (Преемственный)" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_24_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end; 

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.25: Поиск: ПРАЙМ. Обзор изменений законодательства
      Нет вынесенных кнопок
}
function HLTC101_9_2_25_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Поиск: ПРАЙМ. Обзор изменений законодательства',
    [
      (['Сохранить в Мои документы...',  TB_SET_TEXT_AND_ICON]),
      (['Выбрать из Моих документов...', TB_SET_TEXT_AND_ICON]),
      (['История запросов',              TB_SET_TEXT_AND_ICON])      
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Поиск: ПРАЙМ. Обзор изменений законодательства" не равен эталонному');
    Raise('Умолчательны состав тулбара "Поиск: ПРАЙМ. Обзор изменений законодательства" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_25_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.26: Поиск: Ситуации первого уровня(вкладка)
    Нет вынесенных кнопок
}
function HLTC101_9_2_26_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Поиск: Ситуации первого уровня (вкладка)',
    [
      (['', TB_SET_TEXT_AND_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Поиск: Ситуации первого уровня (вкладка)" не равен эталонному');
    Raise('Умолчательны состав тулбара "Поиск: Ситуации первого уровня (вкладка)" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_26_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.27: Правовой навигатор
    Нет вынесенных кнопок
}
function HLTC101_9_2_27_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Правовой навигатор',
    [
      (['', TB_SET_TEXT_AND_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Правовой навигатор" не равен эталонному');
    Raise('Умолчательны состав тулбара "Правовой навигатор" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_27_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end; 

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.28: ПРАЙМ. Моя новостная лента(вкладка)
    Выбор индивидуальной ленты новостей
}
function HLTC101_9_2_28_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'ПРАЙМ. Моя новостная лента (вкладка)',
    [
      (['Все поступления в продукт ПРАЙМ', TB_SET_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "ПРАЙМ. Моя новостная лента (вкладка)" не равен эталонному');
    Raise('Умолчательны состав тулбара "ПРАЙМ. Моя новостная лента (вкладка)" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_28_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
   HLTC101.9.2.29: Предварительный просмотр печати
    Приблизить
    Отдалить
    По ширине листа
    Страница целиком
    Показывать выделенный фрагмент
    Показывать цветным
    Печатать документ/справку
}
function HLTC101_9_2_29_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Предварительный просмотр печати',
    [
      (['Приблизить',                     TB_SET_ICON]),
      (['Отдалить',                       TB_SET_ICON]),
      (['По ширине листа ',               TB_SET_ICON]),
      (['Страница целиком',               TB_SET_ICON]),
      (['Показывать выделенный фрагмент', TB_SET_ICON]),
      (['Показывать цветным',             TB_SET_ICON]),
      (['Печатать документ/справку',      TB_SET_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Предварительный просмотр печати" не равен эталонному');
    Raise('Умолчательны состав тулбара "Предварительный просмотр печати" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_29_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;




{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.31: Синхронный просмотр: Аннотация
    Сохранить в файл
    Экспорт в MS-Word
    Печать
    Предварительный просмотр
    Поиск контекста
}
function HLTC101_9_2_31_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Синхронный просмотр: Аннотация',
    [
      (['Сохранить в файл...',      TB_SET_ICON]),
      (['Экспорт в MS-Word',        TB_SET_ICON]),
      (['Печать...',                TB_SET_ICON]),
      (['Предварительный просмотр', TB_SET_ICON]),
      (['Поиск контекста...',       TB_SET_ICON])      
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Синхронный просмотр: Аннотация" не равен эталонному');
    Raise('Умолчательны состав тулбара "Синхронный просмотр: Аннотация" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_31_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.32: Синхронный просмотр: Списки ссылок на документ/из документа
    Сохранить в файл
    Переслать по E-mail
    Экспорт в MS-Word
    Сохранить в Мои документы
    Печать
    Предварительный просмотр
    Поиск контекста
    Уточнить список    
    Выбрать тип    
}
function HLTC101_9_2_32_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Синхронный просмотр: Списки ссылок из документа/на документ',
    [
      (['Сохранить в файл...',                          TB_SET_ICON]),
      (['Переслать по E-mail',                          TB_SET_ICON]),
      (['Экспорт в MS-Word',                            TB_SET_ICON]),
      (['Сохранить в Мои документы...',                 TB_SET_ICON]),      
      (['Печать...',                                    TB_SET_ICON]),
      (['Предварительный просмотр',                     TB_SET_ICON]),
      (['Поиск контекста...',                           TB_SET_ICON]),
      (['Уточнить список',                              TB_SET_ICON]),            
      (['Выбрать тип',                                  TB_SET_ICON])      
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Синхронный просмотр: Списки ссылок из документа/на документ" не равен эталонному');
    Raise('Умолчательны состав тулбара "Синхронный просмотр: Списки ссылок из документа/на документ" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_32_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end; 

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.33: Синхронный просмотр: Справка к документу
    Сохранить в файл
    Экспорт в MS-Word
    Печать
    Предварительный просмотр
    Поиск контекста
}
function HLTC101_9_2_33_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Синхронный просмотр: Справка к документу',
    [
      (['Сохранить в файл...',      TB_SET_ICON]),
      (['Экспорт в MS-Word',        TB_SET_ICON]),
      (['Печать...',                TB_SET_ICON]),
      (['Предварительный просмотр', TB_SET_ICON]),
      (['Поиск контекста...',       TB_SET_ICON])      
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Синхронный просмотр: Справка к документу" не равен эталонному');
    Raise('Умолчательны состав тулбара "Синхронный просмотр: Справка к документу" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_33_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end; 

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.34: Синхронный просмотр: Текст документа
    Сохранить в файл
    Переслать по E-mail
    Экспорт в MS-Word
    Установить закладку(+текст)
    Печать
    Предварительный просмотр
    Поиск контекста 
    Показать/скрыть комментарии ГАРАНТа
    Показать/скрыть мои комментарии
    Найти в Толковом словаре    
}
function HLTC101_9_2_34_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Синхронный просмотр: Текст документа',
    [
      (['Сохранить в файл...',                      TB_SET_ICON]),
      (['Переслать по E-mail',                      TB_SET_ICON]),
      (['Экспорт в MS-Word',                        TB_SET_ICON]),
      (['Установить закладку...',                   TB_SET_TEXT_AND_ICON]),            
      (['Печать...',                                TB_SET_ICON]),
      (['Предварительный просмотр',                 TB_SET_ICON]),
      (['Поиск контекста...',                       TB_SET_ICON]),      
      (['Показать/скрыть комментарии ГАРАНТа',      TB_SET_ICON]),
      (['Показать/скрыть мои комментарии',          TB_SET_ICON]),
      (['Найти в Толковом словаре',                 TB_SET_ICON])            
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Синхронный просмотр: Текст документа" не равен эталонному');
    Raise('Умолчательны состав тулбара "Синхронный просмотр: Текст документа" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_34_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.35: Список
    Сохранить в файл
    Переслать по E-mail
    Экспорт в MS-Word
    Сохранить в мои документы
    Выбрать из Моих документов
    Печать(+текст)
    Предварительный просмотр
    Поиск контекста(+текст)
    Уточнить список(+текст)    
    Сортировать список
    Установить направление сортировки
    Открывать документы в извлечениях
}
function HLTC101_9_2_35_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Список',
    [
      (['Сохранить в файл...',                          TB_SET_ICON]),
      (['Переслать по E-mail',                          TB_SET_ICON]),
      (['Экспорт в MS-Word',                            TB_SET_ICON]),
      (['Сохранить в Мои документы...',                 TB_SET_ICON]),
      (['Выбрать из Моих документов...',                TB_SET_ICON]),
      (['Печать...',                                    TB_SET_TEXT_AND_ICON]),
      (['Предварительный просмотр',                     TB_SET_ICON]),
      (['Поиск контекста...',                           TB_SET_TEXT_AND_ICON]), 
      (['Поставить на контроль',                        TB_SET_ICON]),
      (['Уточнить список',                              TB_SET_TEXT_AND_ICON]),
      (['Сортировать список',                           TB_SET_ICON]),
      (['Установить направление сортировки',            TB_SET_ICON]),      
      (['Работа со списком',                            TB_SET_TEXT_AND_ICON])      
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Список" не равен эталонному');
    Raise('Умолчательны состав тулбара "Список" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_35_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.36: Список: Консультация
    Сохранить в файл
    Переслать по E-mail
    Экспорт в MS-Word
    Сохранить в мои документы
    Печать
    Предварительный просмотр 
    Поиск контекста
    Уточнить список    
    Сортировать список
    Установить направление сортировки
}
function HLTC101_9_2_36_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Список: Консультация',
    [
      (['Сохранить в файл...',                          TB_SET_ICON]),
      (['Переслать по E-mail',                          TB_SET_ICON]),
      (['Экспорт в MS-Word',                            TB_SET_ICON]),
      (['Сохранить в Мои документы...',                 TB_SET_ICON]),      
      (['Печать...',                                    TB_SET_ICON]),
      (['Предварительный просмотр',                     TB_SET_ICON]),
      (['Поиск контекста...',                           TB_SET_ICON]),
      (['Уточнить список',                              TB_SET_ICON]),      
      (['Поставить на контроль',                        TB_SET_ICON]),
      (['Сортировать список',                           TB_SET_ICON]),
      (['Установить направление сортировки',            TB_SET_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Список: Консультация" не равен эталонному');
    Raise('Умолчательны состав тулбара "Список: Консультация" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_36_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.37: Список: Ссылки на документ
    Сохранить в файл
    Экспорт в MS-Word
    Сохранить в мои документы(+текст)
    Печать
    Предварительный просмотр 
    Поиск контекста
    Уточнить список
    Поставить на контроль /Выделенные документы/
    Выбрать тип
    Открывать документы в извлечениях
}
function HLTC101_9_2_37_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Список: Ссылки на документ',
    [
      (['Сохранить в файл...',                          TB_SET_ICON]),
      (['Экспорт в MS-Word',                            TB_SET_ICON]),
      (['Сохранить в Мои документы...',                 TB_SET_TEXT_AND_ICON]),      
      (['Печать...',                                    TB_SET_ICON]),
      (['Предварительный просмотр',                     TB_SET_ICON]),
      (['Поиск контекста...',                           TB_SET_ICON]),
      (['Уточнить список',                              TB_SET_ICON]),
      (['Поставить на контроль /Выделенные документы/', TB_SET_ICON]),      
      (['Выбрать тип',                                  TB_SET_ICON]),
      (['Открывать документы в извлечениях',            TB_SET_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Список: Ссылки на документ" не равен эталонному');
    Raise('Умолчательны состав тулбара "Список: Ссылки на документ" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_37_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;


{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.38: Список: Ссылки на фрагмент/ссылки из фрагмента
    Сохранить в файл
    Экспорт в MS-Word
    Сохранить в мои документы(+текст)
    Печать
    Предварительный просмотр
    Поиск контекста
    Уточнить список
    Поставить на контроль /Выделенные документы/
    Выбрать тип
    Открывать документы в извлечениях
}
function HLTC101_9_2_38_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Список: Ссылки из фрагмента/Ссылки на фрагмент',
    [
      (['Сохранить в файл...',                          TB_SET_ICON]),
      (['Экспорт в MS-Word',                            TB_SET_ICON]),
      (['Сохранить в Мои документы...',                 TB_SET_TEXT_AND_ICON]),      
      (['Печать...',                                    TB_SET_ICON]),
      (['Предварительный просмотр',                     TB_SET_ICON]),
      (['Поиск контекста...',                           TB_SET_ICON]),
      (['Уточнить список',                              TB_SET_ICON]),
      (['Поставить на контроль /Выделенные документы/', TB_SET_ICON]),      
      (['Выбрать тип',                                  TB_SET_ICON]),
      (['Открывать документы в извлечениях',            TB_SET_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Список: Ссылки из фрагмента/Ссылки на фрагмент" не равен эталонному');
    Raise('Умолчательны состав тулбара "Список: Ссылки из фрагмента/Ссылки на фрагмент" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_38_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.39: Список: пользовательская вкладка ссылки на документ(ссылки из документа) 1
    Сохранить в файл
    Экспорт в MS-Word
    Сохранить в мои документы(+текст)
    Печать(+текст)
    Предварительный просмотр
    Поиск контекста
    Уточнить список
    Поставить на контроль /Выделенные документы/
    Открывать документы в извлечениях
}
function HLTC101_9_2_39_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Список: Пользовательская вкладка ссылки на документ (ссылки из документа) 1',
    [
      (['Сохранить в файл...',                          TB_SET_ICON]),
      (['Экспорт в MS-Word',                            TB_SET_ICON]),
      (['Сохранить в Мои документы...',                 TB_SET_TEXT_AND_ICON]),      
      (['Печать...',                                    TB_SET_TEXT_AND_ICON]),
      (['Предварительный просмотр',                     TB_SET_ICON]),
      (['Поиск контекста...',                           TB_SET_ICON]),
      (['Уточнить список',                              TB_SET_ICON]),
      (['Поставить на контроль /Выделенные документы/', TB_SET_ICON]),   
      (['Открывать документы в извлечениях',            TB_SET_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Список: Пользовательская вкладка ссылки на документ (ссылки из документа) 1" не равен эталонному');
    Raise('Умолчательны состав тулбара "Список: Пользовательская вкладка ссылки на документ (ссылки из документа) 1" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_39_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.40: Список: пользовательская вкладка ссылки на документ(ссылки из документа) 2
    Сохранить в файл
    Экспорт в MS-Word
    Сохранить в мои документы(+текст)
    Печать(+текст)
    Предварительный просмотр
    Поиск контекста
    Уточнить список
    Поставить на контроль /Выделенные документы/
    Открывать документы в извлечениях
}
function HLTC101_9_2_40_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Список: Пользовательская вкладка ссылки на документ (ссылки из документа) 2',
    [
      (['Сохранить в файл...',                          TB_SET_ICON]),
      (['Экспорт в MS-Word',                            TB_SET_ICON]),
      (['Сохранить в Мои документы...',                 TB_SET_TEXT_AND_ICON]),      
      (['Печать...',                                    TB_SET_TEXT_AND_ICON]),
      (['Предварительный просмотр',                     TB_SET_ICON]),
      (['Поиск контекста...',                           TB_SET_ICON]),
      (['Уточнить список',                              TB_SET_ICON]),
      (['Поставить на контроль /Выделенные документы/', TB_SET_ICON]),   
      (['Открывать документы в извлечениях',            TB_SET_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Список: Пользовательская вкладка ссылки на документ (ссылки из документа) 2" не равен эталонному');
    Raise('Умолчательны состав тулбара "Список: Пользовательская вкладка ссылки на документ (ссылки из документа) 2" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_40_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;


{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.41: Список: Похожие документы
    Сохранить в файл
    Переслать по E-mail
    Экспорт в MS-Word
    Сохранить в мои документы(+текст)
    Печать
    Предварительный просмотр
    Поиск контекста
    Уточнить список
    Поставить на контроль
}
function HLTC101_9_2_41_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Список: Похожие документы',
    [
      (['Сохранить в файл...',                          TB_SET_ICON]),
      (['Переслать по E-mail',                          TB_SET_ICON]),
      (['Экспорт в MS-Word',                            TB_SET_ICON]),
      (['Сохранить в Мои документы...',                 TB_SET_TEXT_AND_ICON]),      
      (['Печать...',                                    TB_SET_TEXT_AND_ICON]),
      (['Предварительный просмотр',                     TB_SET_ICON]),
      (['Поиск контекста...',                           TB_SET_ICON]),
      (['Уточнить список',                              TB_SET_ICON]),
      (['Поставить на контроль',                        TB_SET_ICON])         
      
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Список: Похожие документы" не равен эталонному');
    Raise('Умолчательны состав тулбара "Список: Похожие документы" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_41_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.42: Список: Ссылки из документа
    Сохранить в файл
    Экспорт в MS-Word
    Сохранить в мои документы(+текст)
    Печать
    Предварительный просмотр
    Поиск контекста
    Уточнить список
    Поставить на контроль /Выделенные документы/
    Выбрать тип
    Открывать документы в извлечениях
}
function HLTC101_9_2_42_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Список: Ссылки из документа',
    [
      (['Сохранить в файл...',                          TB_SET_ICON]),
      (['Экспорт в MS-Word',                            TB_SET_ICON]),
      (['Сохранить в Мои документы...',                 TB_SET_TEXT_AND_ICON]),      
      (['Печать...',                                    TB_SET_ICON]),
      (['Предварительный просмотр',                     TB_SET_ICON]),
      (['Поиск контекста...',                           TB_SET_ICON]),
      (['Уточнить список',                              TB_SET_ICON]),
      (['Поставить на контроль /Выделенные документы/', TB_SET_ICON]),   
      (['Выбрать тип',                                  TB_SET_ICON]),
      (['Открывать документы в извлечениях',            TB_SET_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Список: Ссылки из документа" не равен эталонному');
    Raise('Умолчательны состав тулбара "Список: Ссылки из документа" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_42_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.43: Список: Справка к списку
    Нет вынесенных кнопок
}
function HLTC101_9_2_43_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Список: Справка к списку',
    [
      (['', TB_SET_TEXT_AND_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Список: Справка к списку" не равен эталонному');
    Raise('Умолчательны состав тулбара "Список: Справка к списку" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_43_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.44: Толковый словарь: Перевод словарной статьи
    Сохранить в файл
    Переслать по E-mail
    Экспорт в MS-Word
    Печать
    Предварительный просмотр
    Поиск контекста
    Показать/скрыть мои комментарии
    Найти в Толковом словаре
}
function HLTC101_9_2_44_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Толковый словарь: Перевод словарной статьи',
    [
      (['Сохранить в файл...',                          TB_SET_ICON]),
      (['Переслать по E-mail',                          TB_SET_ICON]),
      (['Экспорт в MS-Word',                            TB_SET_ICON]),            
      (['Печать...',                                    TB_SET_ICON]),
      (['Предварительный просмотр',                     TB_SET_ICON]),
      (['Поиск контекста...',                           TB_SET_ICON]),
      (['Показать/скрыть мои комментарии',              TB_SET_ICON]),
      (['Найти в Толковом словаре',                     TB_SET_ICON])         
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Толковый словарь: Перевод словарной статьи" не равен эталонному');
    Raise('Умолчательны состав тулбара "Толковый словарь: Перевод словарной статьи" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_44_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.45: Толковый словарь: Список терминов(вкладка)
    Нет вынесенных кнопок
}
function HLTC101_9_2_45_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Толковый словарь: Список терминов (вкладка)',
    [
      (['', TB_SET_TEXT_AND_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Толковый словарь: Список терминов (вкладка)" не равен эталонному');
    Raise('Умолчательны состав тулбара "Толковый словарь: Список терминов (вкладка)" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_45_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.46: Толковый словарь: Текст словарной статьи
    Сохранить в файл
    Переслать по E-mail
    Экспорт в MS-Word(+текст)
    Печать(+текст)
    Предварительный просмотр
    Поиск контекста(+текст)
    Показать/скрыть мои комментарии
    Список литературы
}
function HLTC101_9_2_46_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Толковый словарь: Текст словарной статьи',
    [
      (['Сохранить в файл...',            TB_SET_ICON]),
      (['Переслать по E-mail',            TB_SET_ICON]),
      (['Экспорт в MS-Word',              TB_SET_TEXT_AND_ICON]),      
      (['Установить закладку...',         TB_SET_TEXT_AND_ICON]),
      (['Печать...',                      TB_SET_TEXT_AND_ICON]),
      (['Предварительный просмотр',       TB_SET_ICON]),
      (['Поиск контекста...',             TB_SET_TEXT_AND_ICON]),
      (['Показать/скрыть мои комментарии',TB_SET_ICON]),
      (['Список литературы',              TB_SET_ICON])      
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Толковый словарь: Текст словарной статьи" не равен эталонному');
    Raise('Умолчательны состав тулбара "Толковый словарь: Текст словарной статьи" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_46_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.47: Фильтры(вкладка)
    Редактировать фильтр
    Добавить фильтр из сохраненных запросов
    Удалить
    Создать новый фильтр
}
function HLTC101_9_2_47_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Фильтры (вкладка)',
    [
      (['Редактировать фильтр',                    TB_SET_ICON]),
      (['Добавить фильтр из сохраненных запросов', TB_SET_ICON]),      
      (['Удалить',                 TB_SET_ICON]),
      (['Создать новый фильтр',                    TB_SET_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Фильтры (вкладка)" не равен эталонному');
    Raise('Умолчательны состав тулбара "Фильтры (вкладка)" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_47_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.48: Мои документы
    Создать папку
    Удалить
    Фильтрация элементов папок по типу
    Свойства
}
function HLTC101_9_2_48_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Мои документы',
    [
      (['Создать папку',                      TB_SET_ICON]),
      (['Удалить',                            TB_SET_ICON]),      
      (['Фильтрация элементов папок по типу', TB_SET_ICON]),
      (['Свойства',                           TB_SET_ICON])
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Мои документы" не равен эталонному');
    Raise('Умолчательны состав тулбара "Мои документы" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_48_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;
{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.49: Основное меню
    Нет вынесенных кнопок
}
function HLTC101_9_2_49_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Основное меню',
    [
      (['',  TB_SET_TEXT_AND_ICON])      
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Основное меню" не равен эталонному');
    Raise('Умолчательны состав тулбара "Основное меню" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_49_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;
{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.50: Поиск: Выбранные значения реквизита
    Нет вынесенных кнопок
}
function HLTC101_9_2_50_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Поиск: Выбранные значения реквизита',
    [
      (['',  TB_SET_TEXT_AND_ICON])      
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Поиск: Выбранные значения реквизита" не равен эталонному');
    Raise('Умолчательны состав тулбара "Поиск: Выбранные значения реквизита" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_50_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;
{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.51: Простое основное меню
    Нет вынесенных кнопок
}
function HLTC101_9_2_51_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Простое Основное меню',
    [
      (['',  TB_SET_TEXT_AND_ICON])      
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Простое основное меню" не равен эталонному');
    Raise('Умолчательны состав тулбара "Простое основное меню" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_51_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;
{
HLTC101.9: Состав тулбаров по умолчанию.
Проверить состав и работу вынесенных на тулбар кнопок во всех конфигурациях.
  HLTC101.9.2: Конфигурация «Расширенная»
    HLTC101.9.2.52: Синхронный просмотр: Похожие документы
    Сохранить в файл
    Переслать по E-mail
    Экспорт в MS-Word
    Сохранить в мои документы
    Печать...
    Предварительный просмотр
    Поиск контекста
    Уточнить список
}
function HLTC101_9_2_52_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT CheckedDefaultTbSettings(
    'Синхронный просмотр: Похожие документы',
    [
      (['Сохранить в файл...',          TB_SET_ICON]),
      (['Переслать по E-mail',          TB_SET_ICON]),
      (['Экспорт в MS-Word',            TB_SET_ICON]),
      (['Сохранить в Мои документы...', TB_SET_ICON]),
      (['Печать...',                    TB_SET_ICON]),
      (['Предварительный просмотр',     TB_SET_ICON]),
      (['Поиск контекста...',           TB_SET_ICON]),
      (['Уточнить список',              TB_SET_ICON])      
    ]
  ) then
  begin
    Log.Error('Умолчательны состав тулбара "Синхронный просмотр: Похожие документы" не равен эталонному');
    Raise('Умолчательны состав тулбара "Синхронный просмотр: Похожие документы" не равен эталонному');
  end;  
  result := true;
except
  Log.Message( 'HLTC101_9_2_52_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;
////////////////////////////////////////////////////////////////////////////////

procedure test; //Загоняет все Доступные операции для всех 46 Тулбаров в массив

var
  tbSettings;
  str, substr;
  comboText;
  i, j;
  list;
  tbSetting;
  comboBox;
  res;
begin

  GoToMainMenu;
  tbSetting := OpenTbSettings(true);  
  comboBox := GetFromTbSettings('КОМБОБОКС ВЫБОРА ТУЛБАРА');
  list := GetFromTbSettings('СПИСОК "ДОСТУПНЫЕ ОПЕРАЦИИ"');
  for i := 1 to 46 do
  begin  
    case i of
        1: comboText := 'Главная панель инструментов';
        2: comboText := 'Дерево пользователей и групп';
        3: comboText := 'Документ: Аннотация к документу';
        4: comboText := 'Документ: Консультация';
        5: comboText := 'Документ: Обзор изменений законодательства';
        6: comboText := 'Документ: Предупреждение';
        7: comboText := 'Документ: Просмотр графического объекта';
        8: comboText := 'Документ: Редакции (вкладка)';
        9: comboText := 'Документ: Справка к документу';
        10: comboText := 'Документ: Структура (вкладка)';
        11: comboText := 'Документ: Текст документа';
        12: comboText := 'Документы на контроле (вкладка)';
        13: comboText := 'Карточка Фильтров (5.x)';
        14: comboText := 'Конфигурации (вкладка)';
        15: comboText := 'Меню (вкладка)';
        16: comboText := 'Мои документы (вкладка)';
        17: comboText := 'Моя новостная лента (вкладка)';
        18: comboText := 'Настройка конфигурации';
        19: comboText := 'Поиск: Выбор реквизита';
        20: comboText := 'Поиск: Выбранные значения реквизита';
        21: comboText := 'Поиск: Обзор изменений законодательства';
        22: comboText := 'Поиск: По источнику опубликования';

        23: comboText := 'Поиск: По реквизитам';
        24: comboText := 'Поиск: По реквизитам (стиль ГАРАНТ 5.x)';
        25: comboText := 'Поиск: По ситуации';
        26: comboText := 'Поиск: По ситуации (стиль ГАРАНТ 5.x)';
        27: comboText := 'Поиск: С правовой поддержкой';
        28: comboText := 'Поиск: Ситуации первого уровня (вкладка)';
        29: comboText := 'Правовой навигатор';
        30: comboText := 'Предварительный просмотр печати';
        31: comboText := 'Свойства пользователя';
        32: comboText := 'Синхронный просмотр: Списки корреспондентов/респондентов';
        33: comboText := 'Синхронный просмотр: Справка к документу';
        34: comboText := 'Синхронный просмотр: Текст документа';
        35: comboText := 'Список';
        36: comboText := 'Список: Консультация';
        37: comboText := 'Список: Корреспонденты';
        38: comboText := 'Список: Корреспонденты/респонденты для фрагмента';
        39: comboText := 'Список: Пользовательская вкладка корреспонденты (респонденты) 1';
        40: comboText := 'Список: Пользовательская вкладка корреспонденты (респонденты) 2';
        41: comboText := 'Список: Респонденты';
        42: comboText := 'Список: Справка к списку';
        43: comboText := 'Толковый словарь: Перевод словарной статьи';
        44: comboText := 'Толковый словарь: Список терминов (вкладка)';
        45: comboText := 'Толковый словарь: Текст словарной статьи';
        46: comboText := 'Фильтры (вкладка)';
    end;//caes    
    SelectInComboBox(comboBox, comboText);
     
    if i = 1 then 
      str := '[ ([ ''' + comboText  + ''', '
    else  
      str := str + ', ([ ''' + comboText  + ''', '; 
    ///////////////////////////// 
    
    
    str := str + '([';
    
    res := true;
    j := 0;
    list.SetFocus;
    substr := '';
    while true do
    begin
      Sys.Keys('[Down]');
      if common.GetWindowText(list.Handle) = substr then break;
      substr := common.GetWindowText(list.Handle);
      if j = 0 then 
        str := str + '''' + subStr + '''' 
      else
        str := str + ', ''' + subStr + '''';
      
      inc(j);
    end;//while 

    str := str + '])';
    //////////////////////////////////////////////////

    if i = 46 then
      str := str + ']) ]'
    else
      str := str + '])';
  end;  
  
    Log.Message('', str);
end;


procedure testQuickCall; //Загоняет все Операции и соответствующие им Шоткаты со вкладки
// "Быстрый вызов"  для всех 46 Тулбаров в массив.
//Массив имеет вид: [ ([TulBar1..TulbarN, ([ Oper1..OperN, ([Shorkat1..ShotkatN]) ]) ]) ]

//для HLTC101_2_4_1
//1.В выведенном в лог массиве заменить символы <'])> на <'])]),> 
//2. Во всех 46 элементов  добавить <([> ...<]> , было 
// <([ 'Главная панель инструментов',(['Настройка...',([''])]),...(['Отмена',(['Esc'])])]), >, а станет
// <([ 'Главная панель инструментов',([(['Настройка...',([''])]),...(['Отмена',(['Esc'])])])]), >,
//А затем  массив вставлять, как эталонный в скрипт HLTC101_2_4_1
const
  MaxCount = 66;
var
  tbSettings;
  str, substr;
  comboText;
  i, j, k;
  pageControl;
  list;
  tbSetting;
  comboBox;
  listShotCuts;
  timeOut;
  res;             
  begin
 ///////////
 ////////////
  GoToMainMenu;
  
  tbSetting := OpenTbSettings(true); 
  GetFromTbSettings('ЗАКЛАДКИ').TabIndex := 1;
  
  comboBox := GetFromTbSettings('КОМБОБОКС ВЫБОРА ТУЛБАРА');
  listShotCuts := GetFromTbSettings('ВКЛАДКА БЫСТРЫЙ ВЫЗОВ: "СПИСОК ШОТКАТОВ"');
  list := GetFromTbSettings('ВКЛАДКА БЫСТРЫЙ ВЫЗОВ: ОПЕРАЦИИ');
  for i := 0 to MaxCount do
  begin  
    case i of              
      0:  comboText := 'Выпускаемые препараты';
      1:  comboText := 'Главная панель инструментов';
      2:  comboText := 'Дерево пользователей и групп';
      3:  comboText := 'Документ: Дополнительная информация';
      4:  comboText := 'Документ: Консультация';
      5:  comboText := 'Документ: Перевод';
      6:  comboText := 'Документ: ПРАЙМ. Моя новостная лента';
      7:  comboText := 'Документ: ПРАЙМ. Обзор изменений законодательства';
      8:  comboText := 'Документ: Предупреждение';
      9:  comboText := 'Документ: Просмотр графического объекта';
      10:  comboText := 'Документ: Редакции (вкладка)';
      11:  comboText := 'Документ: Структура (вкладка)';
      12:  comboText := 'Документ: Текст документа';
      13:  comboText := 'Документы на контроле (вкладка)';
      14:  comboText := 'Конфигурации (вкладка)';
      15:  comboText := 'Меню (вкладка)';
      16:  comboText := 'Мои документы';
      17:  comboText := 'Настройка конфигурации';
      18:  comboText := 'Описание препарата';
      19:  comboText := 'Описание фирмы';
      20:  comboText := 'Поиск лекарственного препарата';
      21:  comboText := 'Поиск: Выбор реквизита';
      22:  comboText := 'Поиск: Выбранные значения реквизита';
      23:  comboText := 'Поиск: По источнику опубликования';
      24:  comboText := 'Поиск: По реквизитам';
      25:  comboText := 'Поиск: По ситуации';
      26:  comboText := 'Поиск: По ситуации (Преемственный)';
      27:  comboText := 'Поиск: ПРАЙМ. Обзор изменений законодательства';
      28:  comboText := 'Поиск: Ситуации первого уровня (вкладка)';
      29:  comboText := 'Правовой навигатор';
      30:  comboText := 'ПРАЙМ. Моя новостная лента (вкладка)';
      31:  comboText := 'Предварительный просмотр печати';
      32:  comboText := 'Препарат: Структура (вкладка)';
      33:  comboText := 'Свойства пользователя';
      34:  comboText := 'Синонимы по международному названию';
      35:  comboText := 'Синхронный просмотр: Вторая пользовательская вкладка списка ссылкок на документ\из документа';
      36:  comboText := 'Синхронный просмотр: Выпускаемые препараты';
      37:  comboText := 'Синхронный просмотр: Дополнительная информация';
      38:  comboText := 'Синхронный просмотр: Описание препарата';
      39:  comboText := 'Синхронный просмотр: Описание фирмы';
      40:  comboText := 'Синхронный просмотр: Первая пользовательская вкладка списка ссылкок на документ\из документа';
      41:  comboText := 'Синхронный просмотр: Похожие документы';
      42:  comboText := 'Синхронный просмотр: Синонимы по международному названию';
      43:  comboText := 'Синхронный просмотр: Списки ссылок из документа';
      44:  comboText := 'Синхронный просмотр: Списки ссылок из документа/на документ';
      45:  comboText := 'Синхронный просмотр: Списки ссылок на документ';
      46:  comboText := 'Синхронный просмотр: Схема';
      47:  comboText := 'Синхронный просмотр: Текст документа';
      48:  comboText := 'Словарь медицинских терминов: Описание медицинского термина';
      49:  comboText := 'Словарь медицинских терминов: Список терминов (вкладка)';
      50:  comboText := 'Совет дня: Список советов (вкладка)';
      51:  comboText := 'Совет дня: Текст совета';
      52:  comboText := 'Список';
      53:  comboText := 'Список препаратов';
      54:  comboText := 'Список: Консультация';
      55:  comboText := 'Список: Похожие документы';
      56:  comboText := 'Список: Справка к списку';
      57:  comboText := 'Список: Ссылки из документа (вид информации)/Ссылки на документ (вид информации)';
      58:  comboText := 'Список: Ссылки из документа (все)/Ссылки на документ (все)';
      59:  comboText := 'справочник ГАРАНТ-ИнФарм: Лекарства и фирмы';
      60:  comboText := 'Схема';
      61:  comboText := 'Толковый словарь: Перевод словарной статьи';
      62:  comboText := 'Толковый словарь: Список терминов (вкладка)';
      63:  comboText := 'Толковый словарь: Текст словарной статьи';
      64:  comboText := 'Фармацевтические фирмы (полный список)';
      65:  comboText := 'Фильтры (вкладка)';
    end;//case    
    timeOut := Options.Run.Delay;
    Options.Run.Delay := 0;
//[ ([ 'Главная панель инструментов',(['Настройка...',([']),(['Большие иконки',([']),(['Закрепить панели инструментов',([']),(['Меню',(['','F2']),(['Меню (вкладка)',([']),(['Информация о комплекте',(['','Ctrl+Shift+I']),(['Настройка страницы...',([']),(['Список конфигураций',([']),(['Редактор стилей...',([']),(['Автоматический вход в систему',([']),(['Настройка конфигурации...',([']),(['Поиск по реквизитам',(['','F7']),(['Поиск по ситуации',(['','F5']),(['Поиск по источнику опубликования',(['','F6']) ,(['Правовая поддержка',(['','Alt+F1']),(['Поиск',([']),(['Мои документы',([']),(['Документы на контроле',([']),(['Журнал работы',([']),(['Мои консультации',([']),(['Толковый словарь',([']),(['Список пользователей и групп',([']),(['Моя новостная лента',([']),(['Обзор изменений законодательства',([']),(['Назад',(['','Alt+Left']),(['Вперед',(['','Alt+Right']),(['Увеличить 
    SelectInComboBox(comboBox, comboText);
    /////////////////////////// 
    if i = 0 then 
      str := '[ ([ '''
    else  
      str := str + ', '+ endOfLine + '([ ''';
    str := str + comboText  + '''';
    /////////////////////////////      

    j := 0;
    list.SetFocus;
    Sys.Keys('[Home]');
    substr := '';
    while true do
    begin
      list.SetFocus;
      if j <> 0 then Sys.Keys('[Down]');      
      if common.GetWindowText(list.Handle) = substr then break;
      substr := common.GetWindowText(list.Handle);
      str := str + ',([''' + substr + '''';
      inc(j);
      /////////////////////////////////////  
      if listShotCuts.wItemCount <> 0 then
        for k := 0 to listShotCuts.wItemCount -1 do
        begin          
          if k = 0 then 
          begin
            listShotCuts.SetFocus;
            Sys.Keys('[Home]');
            str := str + ',([''' + listShotCuts.wSelectedItems;
          end  
          else
            str := str + ',''' + listShotCuts.wSelectedItems;
          str := str + '''';  
          Sys.Keys('[Down]');
        end//for k
      else// if listShotCuts.wItemCount <> 0
        str := str + ',([''''';
      str := str + '])';  
    end;//while 

    str := str + '])';
    //////////////////////////////////////////////////

    if i = MaxCount then
      str := str + ']) ]'
    else
      str := str + '])';
  end;  
    Options.Run.Delay := TimeOut;
    Log.Message('', str);
end;

//Заполняем массивы для скрипта   HLTC101_2_3_2_Execute
procedure test1;
var
  comboBox;
  list;
  i;
  arr;
  subArr;  
  str;
  subStr;
  res;
  j;
  tempArr;
begin
  OpenTbSettings(true);  
  comboBox := GetFromTbSettings('КОМБОБОКС ВЫБОРА ТУЛБАРА');  
  list := GetFromTbSettings('СПИСОК "ДОСТУПНЫЕ ОПЕРАЦИИ"');
  
  //for i := 0 to comboBox.wItemCount do
  for i := 0 to 2 do
  begin    
    comboBox.ItemIndex := i;
    list.SetFocus;
    Sys.Keys('[Home]');
    j := 0;
    subArr := '';    
    substr := '';
    while true do
    begin
      list.SetFocus;
      if j <> 0 then Sys.Keys('[Down]');      
      if common.GetWindowText(list) = substr then break;
      substr := common.GetWindowText(list.Handle);  
      AddToArray(subArr,  substr);
      inc(j);
    end;
    tempArr := [comboBox.Text, subArr];
    
    AddToArray(arr,  tempArr);        
  end;
  Log.Message(Array2String(arr));
end; 


///////////////////////////////
procedure RykovTest101;
var
  cur;
  i;
begin  
gbl_F1ShellTabsEnabled := true;
// --24.08.2006--------------------- 
  {Log.Message( HLTC101_1_1_Execute(cur)); 
  Log.Message( HLTC101_1_2_1_Execute(cur));
  Log.Message( HLTC101_1_2_2_Execute(cur));
  Log.Message( HLTC101_1_2_3_Execute(cur));
  Log.Message( HLTC101_1_2_4_Execute(cur));
  Log.Message( HLTC101_1_3_Execute(cur)); 
  Log.Message( HLTC101_1_4_1_Execute(cur));
  Log.Message( HLTC101_1_4_2_Execute(cur));
  Log.Message( HLTC101_1_4_3_Execute(cur));
  Log.Message( HLTC101_1_5_Execute(cur)); 
  Log.Message( HLTC101_1_6_Execute(cur)); 
  Log.Message( HLTC101_1_6_1_Execute(cur));
  //-------------------------------  
  Log.Message( HLTC101_2_1_1_Execute(cur));                                  
  Log.Message( HLTC101_2_1_2_Execute(cur));
  Log.Message( HLTC101_2_1_3_Execute(cur));
  Log.Message( HLTC101_2_1_4_Execute(cur));
  Log.Message( HLTC101_2_1_6_Execute(cur));                                   
  Log.Message( HLTC101_2_3_1_Execute(cur));      
  Log.Message( HLTC101_2_3_3_Execute(cur));
  Log.Message( HLTC101_2_3_4_Execute(cur));                                   
  Log.Message( HLTC101_2_3_2_Execute(cur));
  Log.Message( HLTC101_2_3_5_Execute(cur)); 
  Log.Message( HLTC101_2_3_7_Execute(cur));  
  Log.Message( HLTC101_2_4_1_Execute(cur));
  Log.Message( HLTC101_2_4_3_Execute(cur));
  Log.Message( HLTC101_2_4_4_Execute(cur));
  Log.Message( HLTC101_2_5_1_1_Execute(cur)); 
  Log.Message( HLTC101_2_5_2_1_Execute(cur)); 
  Log.Message( HLTC101_2_5_2_2_Execute(cur));
  Log.Message( HLTC101_2_5_2_3_Execute(cur)); 
  Log.Message( HLTC101_2_5_2_4_Execute(cur));
  Log.Message( HLTC101_3_Execute(cur));                                    
  Log.Message( HLTC101_4_Execute(cur));
  
  //--Настройки тулбаров по дефолту-----------
                                              
  Log.Message( HLTC101_9_1_1_Execute(cur));  
  Log.Message( HLTC101_9_1_2_Execute(cur));
  Log.Message( HLTC101_9_1_3_Execute(cur));
  Log.Message( HLTC101_9_1_4_Execute(cur));
  Log.Message( HLTC101_9_1_5_Execute(cur));
  Log.Message( HLTC101_9_1_6_Execute(cur));
  Log.Message( HLTC101_9_1_7_Execute(cur));
  Log.Message( HLTC101_9_1_8_Execute(cur));
  Log.Message( HLTC101_9_1_9_Execute(cur));  
  Log.Message( HLTC101_9_1_10_Execute(cur));}  
  Log.Message( HLTC101_9_1_11_Execute(cur));
  {Log.Message( HLTC101_9_1_12_Execute(cur));
  Log.Message( HLTC101_9_1_13_Execute(cur));
  Log.Message( HLTC101_9_1_14_Execute(cur));
  Log.Message( HLTC101_9_1_15_Execute(cur));
  Log.Message( HLTC101_9_1_16_Execute(cur));
  Log.Message( HLTC101_9_1_17_Execute(cur));  
  Log.Message( HLTC101_9_1_19_Execute(cur));
  Log.Message( HLTC101_9_1_20_Execute(cur));
  Log.Message( HLTC101_9_1_21_Execute(cur));
  Log.Message( HLTC101_9_1_22_Execute(cur));
  Log.Message( HLTC101_9_1_23_Execute(cur));
  Log.Message( HLTC101_9_1_24_Execute(cur));
  Log.Message( HLTC101_9_1_25_Execute(cur));
  Log.Message( HLTC101_9_1_26_Execute(cur));
  Log.Message( HLTC101_9_1_27_Execute(cur));
  Log.Message( HLTC101_9_1_29_Execute(cur));}
  //Log.Message( HLTC101_9_1_30_Execute(cur));   //Надо доделывать работу с f1admin.run
  {Log.Message( HLTC101_9_1_31_Execute(cur));  
  Log.Message( HLTC101_9_1_32_Execute(cur));
  Log.Message( HLTC101_9_1_33_Execute(cur));
  Log.Message( HLTC101_9_1_34_Execute(cur));
  Log.Message( HLTC101_9_1_35_Execute(cur));
  Log.Message( HLTC101_9_1_36_Execute(cur));
  Log.Message( HLTC101_9_1_37_Execute(cur));
  Log.Message( HLTC101_9_1_38_Execute(cur));
  Log.Message( HLTC101_9_1_39_Execute(cur));
  Log.Message( HLTC101_9_1_40_Execute(cur));  
  Log.Message( HLTC101_9_1_41_Execute(cur));
  Log.Message( HLTC101_9_1_42_Execute(cur));
  Log.Message( HLTC101_9_1_43_Execute(cur));
  Log.Message( HLTC101_9_1_44_Execute(cur));
  Log.Message( HLTC101_9_1_45_Execute(cur));
  Log.Message( HLTC101_9_1_46_Execute(cur));
  Log.Message( HLTC101_9_1_47_Execute(cur));                                            
  Log.Message( HLTC101_9_1_48_Execute(cur));
  Log.Message( HLTC101_9_1_49_Execute(cur));
  Log.Message( HLTC101_9_1_50_Execute(cur));
  Log.Message( HLTC101_9_1_51_Execute(cur));
  Log.Message( HLTC101_9_1_52_Execute(cur));
  
  Log.Message( HLTC101_9_2_1_Execute(cur));  
  Log.Message( HLTC101_9_2_2_Execute(cur));
  Log.Message( HLTC101_9_2_3_Execute(cur));
  Log.Message( HLTC101_9_2_4_Execute(cur));
  Log.Message( HLTC101_9_2_5_Execute(cur));
  Log.Message( HLTC101_9_2_6_Execute(cur));  
  Log.Message( HLTC101_9_2_7_Execute(cur));
  Log.Message( HLTC101_9_2_8_Execute(cur));
  Log.Message( HLTC101_9_2_9_Execute(cur));
  Log.Message( HLTC101_9_2_10_Execute(cur));
  Log.Message( HLTC101_9_2_11_Execute(cur));
  Log.Message( HLTC101_9_2_12_Execute(cur));
  Log.Message( HLTC101_9_2_13_Execute(cur));
  Log.Message( HLTC101_9_2_14_Execute(cur));
  Log.Message( HLTC101_9_2_15_Execute(cur));
  Log.Message( HLTC101_9_2_16_Execute(cur));
  Log.Message( HLTC101_9_2_17_Execute(cur));  
  Log.Message( HLTC101_9_2_19_Execute(cur));
  Log.Message( HLTC101_9_2_20_Execute(cur));
  Log.Message( HLTC101_9_2_21_Execute(cur));
  Log.Message( HLTC101_9_2_22_Execute(cur));
  Log.Message( HLTC101_9_2_23_Execute(cur));
  Log.Message( HLTC101_9_2_24_Execute(cur));
  Log.Message( HLTC101_9_2_25_Execute(cur));
  Log.Message( HLTC101_9_2_26_Execute(cur));
  Log.Message( HLTC101_9_2_27_Execute(cur));
  Log.Message( HLTC101_9_2_28_Execute(cur));
  Log.Message( HLTC101_9_2_29_Execute(cur));
  Log.Message( HLTC101_9_2_30_Execute(cur));
  Log.Message( HLTC101_9_2_31_Execute(cur)); 
  Log.Message( HLTC101_9_2_32_Execute(cur));
  Log.Message( HLTC101_9_2_33_Execute(cur));
  Log.Message( HLTC101_9_2_34_Execute(cur));
  Log.Message( HLTC101_9_2_35_Execute(cur));  
  Log.Message( HLTC101_9_2_36_Execute(cur));
  Log.Message( HLTC101_9_2_37_Execute(cur));
  Log.Message( HLTC101_9_2_38_Execute(cur));
  Log.Message( HLTC101_9_2_39_Execute(cur));
  Log.Message( HLTC101_9_2_40_Execute(cur));   
  Log.Message( HLTC101_9_2_41_Execute(cur));
  Log.Message( HLTC101_9_2_42_Execute(cur));
  Log.Message( HLTC101_9_2_43_Execute(cur));
  Log.Message( HLTC101_9_2_44_Execute(cur));
  Log.Message( HLTC101_9_2_45_Execute(cur));
  Log.Message( HLTC101_9_2_46_Execute(cur));
  Log.Message( HLTC101_9_2_47_Execute(cur));                                            
  Log.Message( HLTC101_9_2_48_Execute(cur));
  Log.Message( HLTC101_9_2_49_Execute(cur));
  Log.Message( HLTC101_9_2_50_Execute(cur));
  Log.Message( HLTC101_9_2_51_Execute(cur));
  Log.Message( HLTC101_9_2_52_Execute(cur));}                                          
end;

procedure ine;
begin

  //Log.Message( CloseTasksPanel ); 
  
end;