uses common, RunPrograms, States, FoldersWork, MenuWork, DocumentWork, SettingsWork, Clicks, ListWork, Filework, SearchWork, DocumentWork;

const
  ex_endofln=#13#10#13#10;  
  ex_endofstr=#13#10#32;

//////////////////////////////////////////////////////////////////////////////
//  Набор тест-кейсов
//
//////////////////////////////////////////////////////////////////////////////
{
HLTC72 Просмотр списка 
  HLTC72.1 Заголовок вкладки со списком всегда содержит иконку списка, и текст: "Список документов", отличаются лишь хинты
    HLTC72.1.1 При поиске: 
      HLTC72.1.1.1 начинается с текста: Список : По запросу:  
}
function HLTC72_1_1_1_Execute(var  current_state: OleVariant): OleVariant;
const
  TEXT = 'Список : По запросу:';
begin
	Result := false;
  if GoToPPR and PositionInPPR(FD_WORDS_IN_CAPTION) then
  begin
    Sys.Keys('1234^[Enter]');
    GetFromList('СПИСОК ДОКУМЕНТОВ');
    Result := StringCompare(TEXT + '*', GetMainWindow.Caption);
    if not Result then
      Log.Error('Название окна НЕ содержит: ' + TEXT);
  end
  else
  	Log.Error('Не получилось перейти к полю "' + FD_WORDS_IN_CAPTION + '" в ППР');
  GoToMainMenu;
end;

{
  HLTC72.1.1.2: содержит в себе параметры поиска, в результате которого получился этот список.
  HLTC72.1.1.3: между значениями показаны операции отношения типа И ИЛИ КРОМЕ(кроме ППП)
  HLTC72.1.1.4: если для словарного атрибута выбрано несколько значений, и первое из них имеет префикс «ИЛИ», то это значение не предваряется логическим префиксом.
}
function HLTC72_1_1_2_Execute(var current_state: OleVariant): OleVariant;
var 
  i, caption, pprData, textData;
begin
	Result := false;
  textData :=
    ['Список', 
     'По запросу',
     'Тип - Бухгалтерские проводки',
     'ИЛИ СНиП',
     'И Акт',
     'КРОМЕ ВН;',
     'Слова в названии - нормы;',
     'Слова в тексте - правила'
    ];
  pprData :=
    [
    	CARD_PPR, ([([
    	FD_WORDS_IN_CAPTION, ([
    		'нормы']) ]),([
    	FD_WORDS_IN_TEXT, ([
    		'правила']) ]),([
    	FD_TYPE, ([
    		'[И]Акт',
    		'[ИЛИ]СНиП',
    		'[ИЛИ]Бухгалтерские проводки',
    		'[КРОМЕ]ВН']) ])
         ]) 
    ];
  if SearchInPPR(pprData) then
  begin
    GetList.SetFocus;
    caption := GetMainWindow.Caption;
    Result := true;
    for i := VarArrayLowBound(textData,1) to VarArrayHighBound(textData,1) do
    if not StringCompare('*' + textData[i] + '*', caption) then
    begin
      Result := false;
    	Log.Error('Строка заголовка окна не содержит параметры поиска ППР: "' + textData[i] + '"');
    end;
  end
  else
    Log.Error('Не получилось произвести поиск ППР');
  GoToMainMenu;
end;

{
  HLTC72.1.1: При поиске
    HLTC72.1.1.5: Проверить когда не было выбранно ни одного атрибута, тогда будет (нзвание:Список всех документов)
}   
function HLTC72_1_1_5_Execute(var  current_state: OleVariant): OleVariant;
const
  TEXT='Список : Список всех документов';
var
  w: OleVariant;
begin
	Result := False;
  w := GetMainWindow;
  GetListOfAllDocuments;
  Result := StringCompare(TEXT, w.Caption);
  if not Result then
    Log.Error('Название окна НЕ содержит: ' + TEXT);
  GoToMainMenu;
end;

{
  HLTC72.1.1.6: Проверить, когда все КРОМЕ
}
function HLTC72_1_1_6_Execute(var  current_state: OleVariant): OleVariant;
var 
  i, caption, pprData, textData;
begin
	Result := false;
  textData :=
    ['Список', 'По запросу',
     'КРОМЕ Акт',
     'КРОМЕ СНиП;',
     'КРОМЕ Бухгалтерские проводки',
     'КРОМЕ ВН',
     'Слова в названии - нормы;',
     'Слова в тексте - правила'
    ];
  pprData :=
    [
    	CARD_PPR, ([([
    	FD_WORDS_IN_CAPTION, ([
    		'нормы']) ]),([
    	FD_WORDS_IN_TEXT, ([
    		'правила']) ]),([
    	FD_TYPE, ([
    		'[КРОМЕ]Акт',
    		'[КРОМЕ]СНиП',
    		'[КРОМЕ]Бухгалтерские проводки',
    		'[КРОМЕ]ВН']) ])
         ]) 
    ];
  if SearchInPPR(pprData) then
  begin
    GetList.SetFocus;
    caption := GetMainWindow.Caption;
    Result := true;
    for i := VarArrayLowBound(textData,1) to VarArrayHighBound(textData,1) do
    if not StringCompare('*' + textData[i] + '*', caption) then
    begin
      Result := false;
    	Log.Error('Строка заголовка окна не содержит параметры поиска ППР: "' + textData[i] + '"');
    end;
  end
  else
    Log.Error('Не получилось произвести поиск ППР');
  GoToMainMenu;
end;

{
	HLTC72.1.2: При переходе по рубрикатору
  	HLTC72.1.2.1: Хинт начинается с «Тематика:», далее содержит в себе путь в рубрикаторе до списка    
}
function  HLTC72_1_2_1_Execute(var  current_state: OleVariant): OleVariant;
var
  w, rubricatorTree, listname;
begin
	Result := false;
  rubricatorTree := OpenMenuTab;    	
  if (common.Position_Internal(rubricatorTree, LIST_MAIN)) then
  begin
		Sys.Keys('[Enter]');

    w := GetMainWindow;
    listname := 'Тематика: ' + LIST_MAIN;
		Result := StringCompare(listname, w.Caption);
    if not Result then
    	Log.Error('Название окна: "' + w.Caption + '" не содержит название списка: ' + listname);
  end
  else
		Log.Error('Не найден элемент: "' + LIST_MAIN + '"');  

  CollapseTreeInNavigator(LIST_MAIN);
  GoToMainMenu;
end;

{
	HLTC72.1.3: При выборе списка из папки
		HLTC72.1.3.1: Название списка соответствует сохраненному в папке    
}
function HLTC72_1_3_1_Execute(var  current_state: OleVariant): OleVariant;
const
  SavedName = 'Список131';
var
  w, CurrentElementName: String;
begin 
	Result := false;
  w := GetMainWindow;
  w.SetFocus;
  if (common.Position_Internal(OpenMenuTab, LIST_MAIN)) then
  begin
		Sys.Keys('[Enter]');
    GetList.SetFocus;
    if not SimpleSaveToFolders(SavedName) then
    	Log.Error('Не удалось сохранить список в папку, список с таким именем уже существует')
    else
    begin
      CollapseTreeInNavigator(LIST_MAIN);

      GoToMainMenu;
      OpenMyDocTab;
      if (common.Position_Internal(GetFolderTree, MY_DOCS_PATH + SavedName)) then
      begin
      	Sys.Keys('[Enter]');	
        Result := StringCompare('*Сохраненный в "Мои документы" : ' + SavedName + '*', w.Caption);
        if not Result then
        	Log.Error('Название окна: "' + w.Caption + '" не содержит названия списка "Сохраненный в "Мои документы" : ' + SavedName + '"');
				DeleteObjectFromFolder(MY_DOCS_PATH + SavedName);
				Sys.Keys('[End]');	                  
        CollapseTree(GetFolderTree, 'Мои документы');
      end
      else
      	Log.Error('Не найден элемент: "' + MY_DOCS_PATH + SavedName + '"');      	
    end;
  end
  else
		Log.Error('Не найден элемент: "' + LIST_MAIN + '"');      	
  GoToMainMenu;
end;

{
 	HLTC72.1.5: Списки корреспондентов и респондентов: в рубрикаторе до списка 
  	HLTC72.1.5.1: начинаются со слов ССЫЛКИ ... и показано 
    имя документа, к которому построен список. Проверить для документов, в 
    названии которых содержатся
    	HLTC72.1.5.1.1: прямые слеши. Например документ 10002866 
      HLTC72.1.5.1.2: кавычки. Например документ 10002866    
}
function  HLTC72_1_5_1_Execute(var  current_state: OleVariant): OleVariant;
const
	NEED_CAPTION = 'Ссылки из документа: Письмо ГТК РФ от 2 июня 1995 г. N 01-01/7810 "О пропуске г*';
  DOC_NUMBER = 10002866;
var
	w, respList;
begin
try
	Result := true;
  OpenDocByNumber(DOC_NUMBER); 
  respList := OpenInDocument('ССЫЛКИ ИЗ ДОКУМЕНТА');
  if NOT IsExists(respList) then
    Raise('Не получилось открыть ССЫЛКИ ИЗ ДОКУМЕНТА ' + IntToStr(DOC_NUMBER));
  if not OpenCurrentList(respList) then
  	Raise('Не получилось открыть СКРы в текущем окне');
  w := GetMainWindow;  
  if not StringCompare(NEED_CAPTION, w.Caption) then
  	Raise('Название окна: "' + w.Caption + '" не содержит названия списка "' + NEED_CAPTION + '"');
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenu;
end;

{
  HLTC72.2.2: Проверить, что количество документов, отображаемое в статусной строке, соответствует  
    HLTC72.2.2.1: Количество элементов в свернутом списке
    HLTC72.2.2.3: Количество выделенных элементов
  HLTC72.2.4.5: Проверить, что правильно отображается количество выделенных элементов списка    
}
function  HLTC72_2_2_1_Execute(var  current_state: OleVariant): OleVariant;
const
  NUM = 9;
  NUM_COL = NUM;
  NUM_EXP = 11;
var
  i, w, list1;
begin  
try
	Result := true;
  list1 := LIST_RUBR_LEGISLATION + '\Общие положения';
  
  if not OpenObjectFromFolder(list1, OpenMenuTab) then
    Raise('Не получилось открыть "' + list1 + '"');

  // считаем список свернутым по умолчанию
{  
  if not OpenAndClickByPopupMenuItem(GetList, 'Свернуть все') then
    Raise('Не получилось кликнуть по пункту "Свернуть все" в списке');
}

  if not PressKeyWithCheck(['^a']) then
    Raise('Не получилось "Выделить все" в списке');
  if CountElementInList(GetList) <> NUM then
    Result := ErrorResult('Отличается общее количество документов в свернутом списке, есть ' + IntToStr(CountElementInList(GetList)) + ', должно быть ' + IntToStr(NUM));
  if CountSelectedElementInList(GetList) <> NUM_COL then
    Result := ErrorResult('Отличается количество выделенных элементов в свернутом списке, есть ' + IntToStr(CountSelectedElementInList(GetList)) + ', должно быть ' + IntToStr(NUM_COL));

  // пунктов попап меню больше нет
{
  if not OpenAndClickByPopupMenuItem(GetList, 'Развернуть все') then
    Raise('Не получилось кликнуть по пункту "Развернуть все" в списке');
}
  w := GetList; 
  w.Keys('[End]');
  for i := 1 to NUM do
  begin
    w.Keys('[Right][Up]');
    Delay(Options.Run.Timeout div 30);
  end;
  //

  if not PressKeyWithCheck(['^a']) then
    Raise('Не получилось "Выделить все" в списке');
  if CountElementInList(GetList) <> NUM then
    Result := ErrorResult('Отличается общее количество документов в развенутом списке, есть ' + IntToStr(CountElementInList(GetList)) + ', должно быть ' + IntToStr(NUM));
  if CountSelectedElementInList(GetList) <> NUM_EXP then
    Result := ErrorResult('Отличается количество выделенных элементов в развенутом списке, есть ' + IntToStr(CountSelectedElementInList(GetList)) + ', должно быть ' + IntToStr(NUM_EXP));
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  CollapseTreeInNavigator(list1);
  GoToMainMenu;
end;

{
  HLTC72.2.5: Проверить правильность отображения порядкового номера активного документа в статусной строке:
    HLTC72.2.5.1: Когда список свернут – для первого и последнего элементов
    HLTC72.2.5.2: Когда список развернут – для первого и последнего элементов
}
function  HLTC72_2_5_1_Execute(var  current_state: OleVariant): OleVariant;
const
  NUM_IN = 1;
  NUM_OUT = 9;
var
  i, w, list1;
begin  
try
	Result := true;
  list1 := LIST_RUBR_LEGISLATION + '\Общие положения';
  
  if not OpenObjectFromFolder(list1, OpenMenuTab) then
    Raise('Не получилось открыть "' + list1 + '"');

  if not PressKeyWithCheck(['[Home]']) then
    Raise('Не получилось переместиться к первому документу списка');
  if GetCurrentElementNumberInList(GetList) <> NUM_IN then
    Result := ErrorResult('Отличается номер активного (первого) документа ' + IntToStr(GetCurrentElementNumberInList(GetList)) + ', должно быть ' + IntToStr(NUM_IN));
  if not PressKeyWithCheck(['[End]']) then
    Raise('Не получилось переместиться к последнему документу списка');
  if GetCurrentElementNumberInList(GetList) <> NUM_OUT then
    Result := ErrorResult('Отличается номер активного (последнего) документа ' + IntToStr(GetCurrentElementNumberInList(GetList)) + ', должно быть ' + IntToStr(NUM_OUT));

  // пунктов попап меню больше нет
{
  if not OpenAndClickByPopupMenuItem(GetList, 'Развернуть все') then
    Raise('Не получилось кликнуть по пункту "Развернуть все" в списке');
}
  w := GetList; 
  w.Keys('[End]');
  for i := NUM_IN to NUM_OUT do
  begin
    w.Keys('[Right][Up]');
    Delay(Options.Run.Timeout div 30);
  end;
  w.Keys('[End]');
  //
  
  if not PressKeyWithCheck(['[Home]']) then
    Raise('Не получилось переместиться к первому документу выделенного списка');
  if GetCurrentElementNumberInList(GetList) <> NUM_IN then
    Result := ErrorResult('Отличается номер активного (первого) документа выделеного списка ' + IntToStr(GetCurrentElementNumberInList(GetList)) + ', должно быть ' + IntToStr(NUM_IN));
  if not PressKeyWithCheck(['[End]']) then
    Raise('Не получилось переместиться к последнему документу выделенного списка');
  if GetCurrentElementNumberInList(GetList) <> NUM_OUT then
    Result := ErrorResult('Отличается номер активного (последнего) документа выделеного списка ' + IntToStr(GetCurrentElementNumberInList(GetList)) + ', должно быть ' + IntToStr(NUM_OUT));
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  CollapseTreeInNavigator(list1);
  GoToMainMenu;
end;

{
HLTC72.3: Удаление элемента
	HLTC72.3.1: Удалить элемент, входящий в узел    
}
function  HLTC72_3_1_Execute(var  current_state: OleVariant): OleVariant;
const
  DocPath = 'Конституция Российской Федерации (принята на всенародном голосовании 12 декабря 1993 г.)*\*Глава 1';
var
  w;                           	
  rubricatorTree;
  listTree;
  currentElementName: String;
begin
	Result := false;
  //Находимся в ОМ, фокус в плоском классификаторе
  //текущий элемент "Документы"
  RubricatorTree := OpenMenuTab;
  if (common.Position_Internal(RubricatorTree, LIST_MAIN)) then
  begin
		Sys.Keys('[Enter]');
    ListTree := GetFromList('СПИСОК ДОКУМЕНТОВ');
    ListTree.SetFocus;
    Sys.Keys('[Home]');
		if (common.Position_Internal(ListTree, DocPath, DELIM_CHAR, true)) then
  	begin    
    	DelWithConfirm;
      Sys.Keys('[Home]');
      Result := not (common.Position_Internal(ListTree, DocPath, DELIM_CHAR, true));
      if not Result then
      	Log.Error('Элемент "' + DocPath + '" не удалён');
    end
    else
    	Log.Error('Не найден элемент: "' + DocPath + '"');
    OpenMenuTab.SetFocus;
    CollapseTreeInNavigator(LIST_MAIN);
  end
  else
		Log.Error('Не найден элемент: "' + LIST_MAIN + '"');      	
  GoToMainMenu;
end;

{
HLTC72.3: Удаление элемента
	HLTC72.3.2: Удалить узел из списка
  HLTC72.3.4: Удалить из контекстного меню   
}
function  HLTC72_3_2_Execute(var  current_state: OleVariant): OleVariant;
const
  DocPath = 'Письмо департамента строительства Краснодарского края от 11 ноября 2003 г. N 07.6.04/3822 "О порядке включения в сметную стоимость строительства транспортно-заготовительно-складских расходов по объектам, финансируемым из краевого бюджета"';
var
  RubricatorTree;
  ListTree;
  CurrentElementName: String;
  CountElemBeforDel, CountElemAfterDel: integer;
begin
	Result := false;
  //Находимся в ОМ, фокус в плоском классификаторе
  //текущий элемент "Документы"
  RubricatorTree := OpenMenuTab;
  if (common.Position_Internal(RubricatorTree, LIST_MAIN)) then
  begin
		Sys.Keys('[Enter]');
    ListTree := GetList;
    ListTree.SetFocus;
    Sys.Keys('[Home]');
    CountElemBeforDel := CountElementInTree(ListTree);
    Sys.Keys('[Home]');
		if (common.Position_by_Text(ListTree, DocPath)) then
  	begin    
    	DelWithConfirm(True, ListTree);
      Sys.Keys('[Home]');
      CountElemAfterDel := CountElementInTree(ListTree);
    	Sys.Keys('[Home]');
      if (CountElemAfterDel <> (CountElemBeforDel - 1)) then
      	Log.Error('Неверное количество элементов в списке, должно быть: ' + IntToStr(CountElemBeforDel - 1) + ', имеется ' + IntToStr(CountElemAfterDel));
      Result := (not (common.Position_by_Text(ListTree, DocPath)));
      if not Result then
      	Log.Error('Элемент "' + DocPath + '" не удалён');
			Result := Result and (CountElemAfterDel = (CountElemBeforDel - 1));
    end
    else
    	Log.Error('Не найден элемент: "' + DocPath + '"');
    OpenMenuTab.SetFocus;
  	Sys.Keys('[End]');
		CollapseTree(RubricatorTree, LIST_MAIN);
  end
  else
		Log.Error('Не найден элемент: "' + LIST_MAIN + '"');      	
  GoToMainMenu;
end;

{
HLTC72.3: Удаление элемента
	HLTC72.3.3: Удалить все элементы из списка (по одному)
  HLTC72.3.5: Удалить при использовании клавиши DEL клавиатуры (отдельно проверить сразу после загрузки в первом же полученном списке)   
  HLTC72.3.7: Удалить все элементы в списке, который содержит свертываемые элементы
}
function  HLTC72_3_3_Execute(var  current_state: OleVariant): OleVariant;
var
  RubricatorTree;
  ListTree;
  CurrentElementName: String;
  CountElem, i: integer;
begin
	Result := false;
  //Находимся в ОМ, фокус в плоском классификаторе
  //текущий элемент "Документы"
  RubricatorTree := OpenMenuTab;
  if (common.Position_Internal(RubricatorTree, LIST_MAIN)) then
  begin
		Sys.Keys('[Enter]');
    ListTree := GetList;
    ListTree.SetFocus;
    Sys.Keys('[Home]');
    CountElem := CountElementInTree(ListTree);
    Sys.Keys('[Home]');
    for i:= 1 to CountElem do
    	DelWithConfirm;
    Sys.Keys('[Home]');
    CountElem := CountElementInTree(ListTree);
  	Sys.Keys('[Home]');
    if (CountElem <> 0) then
    	Log.Error('Неверное количество элементов в списке, должно быть: 0, имеется ' + IntToStr(CountElem));
		Result := (CountElem = 0);
    OpenMenuTab.SetFocus;
    CollapseTreeInNavigator(LIST_MAIN);
  end
  else
		Log.Error('Не найден элемент: "' + LIST_MAIN + '"');      	
  GoToMainMenu;
end;

{
HLTC72.3: Удаление элемента
	HLTC72.3.8: Удалить все элементы в списке, который не содержит свертываемых элементов
}
function  HLTC72_3_8_Execute(var  current_state: OleVariant): OleVariant;
var
  RubricatorTree;
  ListTree;
  CurrentElementName: String;
  CountElem, i: integer;
begin
	Result := false;
  RubricatorTree := OpenMenuTab;
  if (common.Position_Internal(RubricatorTree, LIST_INTERNATIONAL)) then
  begin         
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
    Sys.Keys('[Home]');
    CountElem := CountElementInTree(ListTree);
	  Sys.Keys('[Home]'+keypause+'^a');
   	DelWithConfirm;
    Sys.Keys('[Home]');
    listTree.SetFocus;
    CountElem := CountElementInTree(ListTree);
  	Sys.Keys('[Home]');
		Result := CountElem = 0;
    if not Result then
    	Log.Error('Неверное количество элементов в списке, должно быть: 0, имеется ' + IntToStr(CountElem));
    OpenMenuTab.SetFocus;
    CollapseTreeInNavigator(LIST_INTERNATIONAL);
  end
  else
		Log.Error('Не найден элемент: "' + LIST_INTERNATIONAL + '"');      	
  GoToMainMenu;
end;

{
HLTC72.4: Копирование в буфер
	HLTC72.4.1: Проверить, что текст, положенный в буфер, корректен. Должен копироваться текст активного элемента списка:
		HLTC72.4.1.1: Проверить, когда текст названия содержит кавычки
}
function  HLTC72_4_1_1_Execute(var  current_state: OleVariant): OleVariant;
const
  DocPath = 'Договор "О создании Союзного государства" (Москва, 8 декабря 1999 г.)';
var       
  clipboard;
  rubricatorTree;
  listTree;
begin
	Result := false;
  //Находимся в ОМ, фокус в плоском классификаторе
  rubricatorTree:= OpenMenuTab;
  //переходим из плоского классификатора на ветку рубрикатора
  if (common.Position_Internal(RubricatorTree, LIST_MAIN)) then
  begin
		Sys.Keys('[Enter]');
    ListTree := GetList;
    ListTree.SetFocus;
    Sys.Keys('[Home]');
   	if (Position_by_Text(ListTree, DocPath)) then
    begin
    	clipboard := Copy2Clipboard;
      Result := (clipboard = DocPath);
      if not Result then
      	Log.Error('В буфере обмена находится: "' + clipboard + '", а должен: "' + DocPath + '"');
    end
    else
    	Log.Error('Не найден элемент: "' + DocPath + '"');

    CollapseTreeInNavigator(LIST_MAIN);
  end
  else
		Log.Error('Не найден элемент: "' + LIST_MAIN + '"');
  GoToMainMenu;
end;

{
HLTC72.4: Копирование в буфер
	HLTC72.4.1: Проверить, что текст, положенный в буфер, корректен. Должен 
  копироваться текст активного элемента списка:
		HLTC72.4.1.3: Проверить, когда текст названия содержит символ /. 
    Документ можно найти в сиске по первой ветке рубрикатора 
}
function HLTC72_4_1_3_Execute(var  current_state: OleVariant): OleVariant;
const
  DocPath = 'Документ с нормальной цепочкой редакций. ACTIVE 21/04/2003';
var       
  clipboard;
  rubricatorTree;
  listTree;
begin
	Result := false;
  //Находимся в ОМ, фокус в плоском классификаторе
  rubricatorTree:= OpenMenuTab;
  //переходим из плоского классификатора на ветку рубрикатора: 
  if (common.Position_Internal(RubricatorTree, LIST_MAIN)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
    Sys.Keys('[Home]');
   	if (Position_Internal(ListTree, DocPath)) then
    begin
    	clipboard := Copy2Clipboard;
      Result := StringCompare(DocPath, clipboard);
      if not Result then
      	Log.Error('В буфере обмена находится: "' + clipboard + '", а должен: "' + DocPath + '"');
    end
    else
    	Log.Error('Не найден элемент: "' + DocPath + '"');

    CollapseTreeInNavigator(LIST_MAIN);
  end
  else
		Log.Error('Не найден элемент: "' + LIST_MAIN + '"');
  GoToMainMenu;
end;

{
HLTC72.4: Копирование в буфер
	HLTC72.4.1: Проверить, что текст, положенный в буфер, корректен. Должен 
  копироваться текст активного элемента списка:
		HLTC72.4.1.4: Проверить, когда элемент ссылает на именованный саб. 
    Вхождение к Письму департамента строительства (документ в списке по первой 
    ветке рубрикатора)
    HLTC72.4.1.4.1: Если в настройках конфигурации стоит галка «Экспортировать 
    и печатать списки без вхождений», то в ворд будет копироваться только название документа.
}
function  HLTC72_4_1_4_1_Execute(var  current_state: OleVariant): OleVariant;
const
  docName = 'Письмо департамента строительства Краснодарского края от 11 ноября 2003 г. N 07.6.04/3822 "О порядке включения в сметную стоимость строительства транспортно-заготовительно-складских расходов по объектам, финансируемым из краевого бюджета"';
  intName = 'Это блок 10';
  docPath = docName + '\' + intName;
  docClip = docName + #13#10 + intName;
var       
  clipboard, rubricatorTree, listTree;
begin
try
  try
  	Result := false;
    rubricatorTree:= OpenMenuTab;
    if not SetSettings([ (['СПИСКИ ДОКУМЕНТОВ', 'ЭКСПОРТИРОВАТЬ БЕЗ ВХОЖДЕНИЙ\ДОКУМЕНТЫ [CHECKBOX]', true]) ]) then
      Raise('Не получилось поставить чекбокс в настройках "СПИСКИ ДОКУМЕНТОВ\ЭКСПОРТИРОВАТЬ БЕЗ ВХОЖДЕНИЙ\ДОКУМЕНТЫ [CHECKBOX]"');

    if (common.Position_Internal(RubricatorTree, LIST_MAIN)) then
    begin
  		Sys.Keys('[Enter]');
      listTree := GetList;
      listTree.SetFocus;
      Sys.Keys('[Home]');
     	if (Position_Internal(listTree, docPath)) then
      begin
        Result := ExportToWord(GetList, (['*' + docName + '*'])) and (not ExportToWord(GetList, (['*' + intName + '*'])));
        if not Result then 
          Log.Error('Проверка экспорта в Word, чекбокс «Экспортировать и печатать списки без вхождений\документы» стоит. Должен экспортироваться только документ "' + docName + '" без вхождения "' + intName + '". Видимо вхождение экспортировалось тоже!');
      end                                                                                                                                                            
      else
      	Log.Error('Не найден элемент: "' + DocPath + '"');

      CollapseTreeInNavigator(LIST_MAIN);
    end
    else
  		Log.Error('Не найден элемент: "' + LIST_MAIN + '"');
  finally
    SetDefaultSettings;
    GoToMainMenu;  
  end;    
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
end;

{
HLTC72.4: Копирование в буфер
	HLTC72.4.1: Проверить, что текст, положенный в буфер, корректен. Должен 
  копироваться текст активного элемента списка:
		HLTC72.4.1.4: Проверить, когда элемент ссылает на именованный саб. 
    Вхождение к Письму департамента строительства (документ в списке по первой 
    ветке рубрикатора)
    HLTC72.4.1.4.2: Если в настройках конфигурации не стоит галка «Экспортировать и печатать
    списки без вхождений», то в ворд будет копироваться и название документа и выделенное 
    вхождение, если стоим на вхождении, и все вхождения, если стоим на названии документа.
}
function  HLTC72_4_1_4_2_Execute(var  current_state: OleVariant): OleVariant;
const
  docList = 'Письмо департамента строительства Краснодарского края от 11 ноября 2003 г. N 07.6.04/3822*';
  DOCNAME = 'Это блок 10';
  docPath = docList + '*\*' + DOCNAME;
  docClip = docList + #13#10 + DOCNAME;
var       
  clipboard;
  rubricatorTree;
  listTree;
begin
try
	Result := false;
  rubricatorTree:= OpenMenuTab;
  if not SetSettings([ (['СПИСКИ ДОКУМЕНТОВ', 'ЭКСПОРТИРОВАТЬ БЕЗ ВХОЖДЕНИЙ\ДОКУМЕНТЫ [CHECKBOX]', false]) ]) then
  begin 
    Log.Error('Не получилось снять чекбокс в настройках "СПИСКИ ДОКУМЕНТОВ\ЭКСПОРТИРОВАТЬ БЕЗ ВХОЖДЕНИЙ\ДОКУМЕНТЫ [CHECKBOX]"');
    Raise;
  end;
  
  if (common.Position_Internal(RubricatorTree, LIST_MAIN)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.Keys('[Home]');
   	if Position_Internal(listTree, docPath, DELIM_CHAR, true) then
    begin
      Result := ExportToWord(GetList, (['*' + docList + '*' + DOCNAME + '*']));
      if not Result then 
        Log.Error('Проверка экспорта в Word, чекбокс «Экспортировать и печатать списки без вхождений\документы» НЕ стоит. Должен экспортироваться документ "' + docList + '" и вхождение "' + DOCNAME + '". Видимо вхождение не экспортировалось!');
    end
    else
    	Log.Error('Не найден элемент: "' + DocPath + '"');
    CollapseTreeInNavigator(LIST_MAIN);
  end
  else
		Log.Error('Не найден элемент: "' + LIST_MAIN + '"');
finally
  SetDefaultSettings;
end;    
  GoToMainMenu;
end;

{
  HLTC72.4.1.4.3: В пределах оболочки(т.е. из одного списка в другой) документ будет копироваться с вхождениями независимо от настроек.
}
function  HLTC72_4_1_4_3_Execute(var  current_state: OleVariant): OleVariant;
const
  DOCNAME = 'Письмо департамента строительства Краснодарского края от 11 ноября 2003 г. N 07.6.04/3822*';
  INNAME = 'Вхождение 2';
begin  
try
	Result := true;
  
  if not OpenObjectFromFolder(LIST_MAIN, OpenMenuTab) then
    Raise('Не получилось открыть "' + LIST_MAIN + '"');
  if not Position_Internal(GetList, DOCNAME, DELIM_CHAR, true) then
    Raise('Не получилось найти "' + DOCNAME + '"');
  if CopyToClipboard(GetList, '','IsCleanClipboard := false') = '' then
    Raise('Не получилось скопировать в буфер "' + DOCNAME + '"');

  if not OpenObjectFromFolder(LIST_LANG, OpenMenuTab) then
    Raise('Не получилось открыть "' + LIST_LANG + '"');
  if not PasteFromClipboard(GetList) then
    Raise('Не получилось вставить документ из буфера "' + DOCNAME + '"');
  if not Position_Internal(GetList, DOCNAME + '\' + INNAME, DELIM_CHAR, true) then
    Raise('Не найден "' + DOCNAME + '" с вхождением "' + INNAME + '", возможно документ вставляется без Вхождения');
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenu;
end;

{
HLTC72.4: Копирование в буфер
  HLTC72.3.9: Когда из списка удаляется/отфильтровывается последний элемент, в основном окне должна появиться фраза:
  "Все документы удалены, список пуст."
  И ссылка "Справка к списку", открывающая одноимённую вкладку.

  HLTC72.9.16: Проверить, что Искать дальше недоступна, если недоступен и сам 
  Поиск контекста(например, во вкладке СКР Судебная практика документа 2002) 
  
  HLTC72.9.5.1: Проверить контекстный поиск после удаления элементов из списка.
}
function  HLTC72_3_9_Execute(var  current_state: OleVariant): OleVariant;
var       
  list, x, y;
begin
try
	Result := true;

  if not OpenObjectFromFolder(LIST_MAIN, OpenMenuTab) then
    Raise('Не получилось открыть "' + LIST_MAIN + '"');
  PressKeyWithCheck(['^a'], GetList);
  DelWithConfirm;

  list := GetFromList('ПУСТОЙ СПИСОК ДОКУМЕНТОВ');
  if not IsExists(list) then
    Raise('ПУСТОЙ СПИСОК ДОКУМЕНТОВ не найден');
  if IsExists(GetFromList('СПРАВКА К СПИСКУ')) then
    Result := ErrorResult('Вкладка "СПРАВКА К СПИСКУ" открыта по умолчанию на пустом списке');

  // ссылка "Справка к списку", открывающая одноимённую вкладку
  list.Keys('^[End][Home]![Right]');
  if not GetTextSelectionCoords(list, x, y, true) then
    Raise('Не получилось кликнуть по выделенной ссылке "СПРАВКА К СПИСКУ"');
  if not IsExists(GetFromList('СПРАВКА К СПИСКУ')) then
    Result := ErrorResult('Вкладка "СПРАВКА К СПИСКУ" не открылась после клика по ссылке');
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenu;
end;

{
	HLTC72.4.2: Проверить, что получится, когда из списка удалены все документы 
    (не должна быть активна кнопка копирования в буфер и гор. клавиша, а также не должно вызываться контекстное меню через кл. и мышь)
}
function  HLTC72_4_2_Execute(var  current_state: OleVariant): OleVariant;
var       
  list;
begin
try
	Result := true;

  if not OpenObjectFromFolder(LIST_MAIN, OpenMenuTab) then
    Raise('Не получилось открыть "' + LIST_MAIN + '"');
  PressKeyWithCheck(['^a'], GetList);
  DelWithConfirm;

  list := GetFromList('ПУСТОЙ СПИСОК ДОКУМЕНТОВ');
  if not IsExists(list) then
    Raise('ПУСТОЙ СПИСОК ДОКУМЕНТОВ не найден');

  //Проверка существования попап меню
  if list.QCPopupMenu <> nil then
    Result := ErrorResult('Попап меню существует у пустого списка!');
  //Проверка существования и видимости элемента попапменю Копировать
  Sys.Keys('[Apps]');   
  if IsMenuItemEnabled(list.QCPopupMenu, 'Копировать') then 
    Result := ErrorResult('Пункт попап меню Правка\Копировать активен');
  ClosePopupMenu(list);

  //Проверка существования и видимости элементов меню Правка
  if IsMenuItemEnabled(GetMainWindow.Menu, 'Правка\Копировать') then
    Result := ErrorResult('Пункт меню Правка\Копировать активен');
  if IsMenuItemEnabled(GetMainWindow.Menu, 'Правка\Поиск контекста...') then
    Result := ErrorResult('Пункт меню Правка\Поиск контекста... активен');
  if IsMenuItemEnabled(GetMainWindow.Menu, 'Правка\Найти далее') then
    Result := ErrorResult('Пункт меню Правка\Найти далее активен');
  if IsMenuItemEnabled(GetMainWindow.Menu, 'Правка\Предыдущий найденный') then
    Result := ErrorResult('Пункт меню Правка\Предыдущий найденный активен');
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenu;
end;

{
HLTC72.5: История/справка к списку
	HLTC72.5.1: Проверить информацию, приводящуюся в справке к списку:
		HLTC72.5.1.1: После формирования списка в результате навигации
}
function  HLTC72_5_1_1_Execute(var  current_state: OleVariant): OleVariant;
var              
  clipboard, countElem, rubricatorTree, listTree, helpText;
begin        
	Result := false;
  helpText := 'Тематика: ' + LIST_MAIN;
    
  rubricatorTree:= OpenMenuTab;
  if (common.Position_Internal(rubricatorTree, LIST_MAIN)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;    
    clipboard := CopyToClipboard(OpenListHelpTab, 'ALL');
   	Result := StringCompare(helpText, Trim(clipboard));
    if not Result then
    	Log.Error('В буфере обмена находится: "' + clipboard + '", а должен: "' + HelpText + '"');

    CollapseTreeInNavigator(LIST_MAIN);
  end
  else
		Log.Error('Не найден элемент: "' + LIST_MAIN + '"');
  GoToMainMenu;
end;

{
  HLTC72.5.1.2.1: После поиска по ППР. Также проверить правильность названий типов поисковых атрибутов, отображаемых в окне информации о списке
}
function  HLTC72_5_1_2_1_Execute(var  current_state: OleVariant): OleVariant;
const
  HELPTEXT = 'Результат Поиска по реквизитам:*[И] СТАТУС*Действующие*[И] СТАТУС В МЮ*Зарегистрированные*[И] Дата*с 01.01.1900 по 01.01.2099*[И] ТИП*Форма документа*[И] НОМЕР*131*[И] ДАТА В МЮ*с 01.01.1900 по 01.01.2099*[И] НОМЕР В МЮ*2949*[И] ВИД ИНФОРМАЦИИ*Акты органов власти*[И] ТЕРРИТОРИЯ*Российская Федерация*[И] ЗНАЧИМОСТЬ*Общие*[И] БЛОК*Международное право (Россия - СНГ)*[И] ОРГАН*Федеральные министерства и ведомства*[И] РАЗДЕЛ*Таможенное законодательство, внешнеэкономическая деятельность*[И] Искать в недействующих редакциях*Нет*[И] СЛОВА В НАЗВАНИИ*приказ*[И] СЛОВА В ТЕКСТЕ*приказ*';
var
  clipboard;
begin  
try
	Result := true;

  if not SearchInPPR(
    [
    	CARD_PPR, ([([
    	FD_WORDS_IN_CAPTION, ([
    		'приказ']) ]),([
    	FD_WORDS_IN_TEXT, ([
    		'приказ']) ]),([
    	FD_TYPE, ([
    		'[ИЛИ]Форма документа']) ]),([
    	FD_SOURCE, ([
    		'[ИЛИ]Федеральные министерства и ведомства']) ]),([
    	FD_THEME, ([
    		'[ИЛИ]Таможенное законодательство, внешнеэкономическая деятельность']) ]),([
    	FD_ACCEPTANCE_DATE_FROM, ([
    		'01.01.1900']) ]),([
    	FD_ACCEPTANCE_DATE_TO, ([
    		'01.01.2099']) ]),([
    	FD_NUMBER, ([
    		'131']) ]),([
    	FD_MU_REG_DATE_FROM, ([
    		'01.01.1900']) ]),([
    	FD_MU_REG_DATE_TO, ([
    		'01.01.2099']) ]),([
    	FD_MU_REG_NUMBER, ([
    		'2949']) ]),([
    	FD_MU_REG_STATUS, ([
    		'Зарегистрированные']) ]),([
    	FD_MEANING, ([
    		'Общие']) ]),([
    	FD_STATUS, ([
    		'Действующие']) ]),([
    	FD_INOPERATIVE_EDITION, ([
    		'Нет']) ]),([
    	FD_KIND_OF_INFORMATION, ([
    		'[ИЛИ]Акты органов власти']) ]),([
    	FD_REGULATION_TERRITORY, ([
    		'[ИЛИ]Российская Федерация']) ]),([
    	FD_INFORMATIONAL_BLOCK, ([
    		'Международное право (Россия - СНГ)']) ]) ]) 
    ]  
  ) then Raise('Не получилось произвести ППР');

  clipboard := CopyToClipboard(OpenListHelpTab, 'ALL');
  if clipboard = '' then
    Raise('Не получилось скопировать содержимое вкладки "СПРАВКА К СПИСКУ"');       
 	if not StringCompare(HELPTEXT, Trim(clipboard)) then
  	Raise('Содержимое вкладки "СПРАВКА К СПИСКУ" отличается: "' + clipboard + '", а должно быть: "' + HELPTEXT + '"');
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenu;
end;

{
  HLTC72.5.1.2.2: После базового поиска. Также проверить, что отображается тип списка – базовый или полный.
}
function  HLTC72_5_1_2_2_Execute(var  current_state: OleVariant): OleVariant;
const
  HELPTEXT = 'Результат Базового поиска:*Базовый список*[И]*СЛОВА В ТЕКСТЕ*12345*';
var
  clipboard;
begin  
try
	Result := true;
  if not BaseSearch(nil, '12345') then 
    Raise('Не получилось произвести БП');
    
  clipboard := CopyToClipboard(OpenListHelpTab, 'ALL');
  if clipboard = '' then
    Raise('Не получилось скопировать содержимое вкладки "СПРАВКА К СПИСКУ"');       
 	if not StringCompare(HELPTEXT, Trim(clipboard)) then
  	Raise('Содержимое вкладки "СПРАВКА К СПИСКУ" отличается: "' + clipboard + '", а должно быть: "' + HELPTEXT + '"');
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenu;
end;

{
  HLTC72.5.1.2.3: После поиска по ППС
}
function  HLTC72_5_1_2_3_Execute(var  current_state: OleVariant): OleVariant;
const
  HELPTEXT = 'Результат Поиска по ситуации:*Авария общая*';
var
  clipboard;
begin  
try
	Result := true;
  if not SearchInPPS(['Авария общая']) then
    Raise('Не получилось произвести ППС');
    
  clipboard := CopyToClipboard(OpenListHelpTab, 'ALL');
  if clipboard = '' then
    Raise('Не получилось скопировать содержимое вкладки "СПРАВКА К СПИСКУ"');       
 	if not StringCompare(HELPTEXT, Trim(clipboard)) then
  	Raise('Содержимое вкладки "СПРАВКА К СПИСКУ" отличается: "' + clipboard + '", а должно быть: "' + HELPTEXT + '"');
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenu;
end;

{
HLTC72.5: История/справка к списку
	HLTC72.5.1: Проверить информацию, приводящуюся в справке к списку:
  	HLTC72.5.1.5: После удаления элементов из списка (название должно быть то же, 
    при этом на каждую совершенную операцию в истории списка должна приходиться 
    отдельная строка)   
}
function  HLTC72_5_1_5_Execute(var  current_state: OleVariant): OleVariant;
var
  rubricatorTree, listTree;
  helpText, clipboard;
begin
	Result := false;
  helpText := 'Тематика: ' + LIST_MAIN + ex_endofln + 'Количество удаленных элементов: 2' + ex_endofln + 'Количество удаленных элементов: 1';

  rubricatorTree:= OpenMenuTab;
  if (common.Position_Internal(rubricatorTree, LIST_MAIN)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;        
    listTree.SetFocus;

    Sys.Keys('[Home]');  
   	DelWithConfirm;
    Sys.Keys('[End]');
   	DelWithConfirm;

    clipboard := CopyToClipboard(OpenListHelpTab, 'ALL');
    Result := StringCompare(clipboard, helpText);
    if not Result then
    	Log.Error('В буфере обмена находится: "' + clipboard + '", а должен: "' + helpText + '"');
    CollapseTreeInNavigator(LIST_MAIN);
  end
  else
		Log.Error('Не найден элемент: "' + LIST_MAIN + '"');
  GoToMainMenu;
end;

{
HLTC72.5: История/справка к списку
	HLTC72.5.1: Проверить информацию, приводящуюся в справке к списку:
		HLTC72.5.1.6.5: Сохранить список и дать ему имя, отличное от умолчательного. Проверить сохраненное имя списка после загрузки из папки.   
}
function  HLTC72_5_1_6_5_Execute(var  current_state: OleVariant): OleVariant;
const
  savedName = 'HLTC72_5_1_6_5';             
var
  clipboard;
  RubricatorTree;
  ListTree;
  helpText;
begin
  helpText := 'Тематика: ' + LIST_MAIN;

	Result := false;
  rubricatorTree:= OpenMenuTab;
  if (common.Position_Internal(rubricatorTree, LIST_MAIN)) then
  begin
		Sys.Keys('[Enter]');
    GetList.SetFocus;
    if not SimpleSaveToFolders(SavedName) then
    	Log.Error('Не удалось сохранить список в папку, список с таким именем уже существует');

    OpenMyDocTab;
    if (common.Position_Internal(GetFolderTree, MY_DOCS_PATH + SavedName)) then
    begin
      Sys.Keys('[Enter]');	     
      clipboard := CopyToClipboard(OpenListHelpTab, 'ALL');
      Result := StringCompare(clipboard, helpText);
      if not Result then
        Log.Error('В буфере обмена находится: "' + clipboard + '", а должен: "' + helpText + '"');
      DeleteObjectFromFolder(MY_DOCS_PATH + SavedName);
      CollapseTreeInNavigator(LIST_MAIN);
    end;
  end
  else
    Log.Error('Не найден элемент: "' + LIST_MAIN + '"');
  GoToMainMenu;
end;

{
  HLTC72.5.1.6.6: Сохранить список с большой историей (100 элементов или больше). Проверить, что при загрузке из папки история будет обрезана.
}
function  HLTC72_5_1_6_6_Execute(var  current_state: OleVariant): OleVariant;
const
  SAVEDNAME = 'HLTC72_5_1_6_6';             
var
  i, helpText, clipboard;
begin  
try
  Result := true;
  if not IsExists(GetListOfAllDocuments) then
    Raise('Не получилось построить список всех документов!');

  for i := 1 to 50 do DelWithConfirm;

  helpText := 'Список всех документов*'; 
  for i := 1 to 24 do helpText := helpText + 'Количество удаленных элементов: 1*'; 
  helpText := helpText + '...*';

  if not SimpleSaveToFolders(SAVEDNAME) then
  	Raise('Не удалось сохранить список в папку или список с таким именем уже существует');
  if not OpenObjectFromFolder(MY_DOCS_PATH + SAVEDNAME) then
    Raise('Не получилось открыть сохраненный список "' + SAVEDNAME + '"');

  clipboard := CopyToClipboard(OpenListHelpTab, 'ALL');
  if clipboard = '' then
    Raise('Не получилось скопировать содержимое вкладки "СПРАВКА К СПИСКУ"');       
 	if not StringCompare(helpText, Trim(clipboard)) then
  	Raise('Содержимое вкладки "СПРАВКА К СПИСКУ" отличается: "' + clipboard + '", а должно быть: "' + helpText + '"');
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  DeleteAllInMyDoc;
  GoToMainMenu;
end;

{
HLTC72.5: История/справка к списку
	HLTC72.5.1: Проверить информацию, приводящуюся в справке к списку:
  	HLTC72.5.1.4: При списках, сформированных копированием части элементов из другого списка
    HLTC72.5.1.8: При копировании нескольких элементов списка в новый список. Должно быть "Количество добавленных элементов: X".
    HLTC72.2.4.3: Используя SHIFT   
}
function  HLTC72_5_1_4_Execute(var  current_state: OleVariant): OleVariant;
var
  rubricatorTree, listTree;
  clipboard, helpText, listPath2;
begin
  listPath2 := LIST_RUBR_MAIN + '\Государственный язык, языки народов Российской Федерации';
  helpText := 'Тематика: '+ LIST_MAIN + ex_endofln + 'Количество добавленных элементов: 8';

	Result := false;
  rubricatorTree:= OpenMenuTab;
  if (common.Position_Internal(rubricatorTree, listPath2)) then
  begin
		Sys.Keys('[Enter]');     
    GetList.SetFocus;
    PressKeyWithCheck(['![Down]'], GetList, 'Count:=3');
    CopyToClipboard(nil, '','IsCleanClipboard := false');
  end
    else
    begin  
   		Log.Error('Не найден элемент: "' + listPath2 + '"');
      GoToMainMenu;
    end;  

  rubricatorTree:= OpenMenuTab;
  if (common.Position_Internal(rubricatorTree, LIST_MAIN)) then
  begin
		Sys.Keys('[Enter]');     
    GetList.SetFocus;
    PasteFromClipboard;

    OpenListHelpTab;
    clipboard := CopyToClipboard(nil, 'ALL');
    Result := StringCompare(helpText, clipboard);
    if not Result then
      Log.Error('В буфере обмена находится: "' + clipboard + '", а должен: "' + helpText + '"');

    CollapseTreeInNavigator(LIST_MAIN);
  end
  else
		Log.Error('Не найден элемент: "' + LIST_MAIN + '"');
  GoToMainMenu;
end;

{
HLTC72.5: История/справка к списку
  HLTC72.5.2: Проверить, что если открыт фрейм СПРАВКА К СПИСКУ, то при следующих операциях он не должен закрыться:
  	HLTC72.5.2.1: Сортировка   
}
function  HLTC72_5_2_1_Execute(var  current_state: OleVariant): OleVariant;
var
  p, w,w1;                                
  RubricatorTree;
  ListTree;
begin
	Result := false;
  w := GetMainWindow;
  rubricatorTree:= OpenMenuTab;
  if (common.Position_Internal(rubricatorTree, LIST_MAIN)) then
  begin
		Sys.Keys('[Enter]');
    GetList.SetFocus;
    w1:=GetFromList('ЗАКЛАДКИ');
    SwitchToPage(w1,'СПРАВКА К СПИСКУ');
    if IsMenuItemEnabled(w.Menu, 'Документы\Сортировать список') then 
    begin
      ClickToolbarButton(GetFromList('ТУЛБАР "СПИСОК"'),'Отсортировано по*');
      w1:=GetFromList('СПРАВКА К СПИСКУ');
  		Result := IsExists(w1) and w1.VisibleOnScreen;
      ClickToolbarButton(GetFromList('ТУЛБАР "СПИСОК"'),'Отсортировано по*');
      w1:=GetFromList('СПРАВКА К СПИСКУ');        
  		Result := IsExists(w1) and Result and w1.VisibleOnScreen;
      if not Result then
          Log.Error('Не отображается окно "СПРАВКА К СПИСКУ" при изменении направления сортировки');
    end
      else
      		Log.Error('Невозможно включить сортировку.');
    CollapseTreeInNavigator(LIST_MAIN);
  end
  else
		Log.Error('Не найден элемент: "' + LIST_MAIN + '"');
  GoToMainMenu;
end;

{
HLTC72.5: История/справка к списку
  HLTC72.5.2: Проверить, что если открыт фрейм СПРАВКА К СПИСКУ, то при следующих операциях он не должен закрыться:
  LTC72.5.2.3: Удаление элемента   
}
function  HLTC72_5_2_3_Execute(var  current_state: OleVariant): OleVariant;
var
  w;                                
  rubricatorTree;
  listTree;
begin
	Result := false;
  //Находимся в ОМ, фокус в плоском классификаторе
  rubricatorTree:= OpenMenuTab;
  //переходим из плоского классификатора на ветку рубрикатора: 
  if (common.Position_Internal(rubricatorTree, LIST_MAIN)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;        
    listTree.SetFocus;
    //Открываем закладку 'СПРАВКА К СПИСКУ'
    w:=GetFromList('ЗАКЛАДКИ');
    SwitchToPage(w,'СПРАВКА К СПИСКУ');
    //Удаляем два документа
   	DelWithConfirm;
   	DelWithConfirm;
    Delay(Options.Run.Timeout div 10);      
    //Проверяем видимость окна 
    w:=GetFromList('СПРАВКА К СПИСКУ');        
		Result := IsExists(w) and w.VisibleOnScreen;
    
    if not Result then
      Log.Error('Не отображается окно "СПРАВКА К СПИСКУ" при удалении элементов списка');
    CollapseTreeInNavigator(LIST_MAIN);
  end
  else
		Log.Error('Не найден элемент: "' + LIST_MAIN + '"');
  GoToMainMenu;
end;

{
HLTC72.5: История/справка к списку
  HLTC72.5.2: Проверить, что если открыт фрейм СПРАВКА К СПИСКУ, то при следующих операциях он не должен закрыться:
  	HLTC72.5.2.5: Контекстный поиск   
}
function  HLTC72_5_2_5_Execute(var  current_state: OleVariant): OleVariant;
var
  w, rubricatorTree, listTree;
begin
	Result := false;
  //Находимся в ОМ, фокус в плоском классификаторе
  rubricatorTree:= OpenMenuTab;
  //переходим из плоского классификатора на ветку рубрикатора: 
  if (common.Position_Internal(rubricatorTree, LIST_MAIN1)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;        
    listTree.SetFocus;
    //Открываем закладку 'СПРАВКА К СПИСКУ'
    w:=GetFromList('ЗАКЛАДКИ');
    SwitchToPage(w,'СПРАВКА К СПИСКУ');
    //Осуществляем контекстный поиск
    BaseSearchInList(listTree, 'Решение Совета Глав Государств');
    //Проверяем видимость окна 
    w:=GetFromList('СПРАВКА К СПИСКУ');        
		Result:=IsExists(w) and w.VisibleOnScreen and w.Visible;

    if not Result then
        Log.Error('Не отображается окно "СПРАВКА К СПИСКУ" после контекстного поиска');
    CollapseTreeInNavigator(LIST_MAIN1);
  end
  else
		Log.Error('Не найден элемент: "' + LIST_MAIN1 + '"');
  GoToMainMenu;
end;

{
HLTC72.5: История/справка к списку
	HLTC72.5.3: Проверить, что при переходе на другой список открытый фрейм «СПРАВКА К СПИСКУ» закрывается.
}
function  HLTC72_5_3_Execute(var  current_state: OleVariant): OleVariant;
var
  w;                                
  rubricatorTree;
  listTree;
begin
	Result := false;
  //Находимся в ОМ, фокус в плоском классификаторе
  rubricatorTree:= OpenMenuTab;
  //переходим из плоского классификатора на ветку рубрикатора
  if (common.Position_Internal(rubricatorTree, LIST_MAIN)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;        
    listTree.SetFocus;
    //Открываем закладку 'СПРАВКА К СПИСКУ'
    w:=GetFromList('ЗАКЛАДКИ');
    SwitchToPage(w,'СПРАВКА К СПИСКУ');
    //Открываем другой список
    rubricatorTree:= OpenMenuTab;
    //переходим из плоского классификатора на ветку рубрикатора
    if (common.Position_Internal(rubricatorTree, LIST_MAIN1)) then
     		Sys.Keys('[Enter]')
      else        
        Log.Error('Не найден элемент: "' + LIST_MAIN1 + '"');		
    //Проверяем видимость окна 
    w:=GetFromList('СПРАВКА К СПИСКУ');
		Result:=not (IsExists(w) and w.Visible);
    //    
    if not Result then
        Log.Error('Отображается окно "СПРАВКА К СПИСКУ" после открытия другого списка');
    CollapseTreeInNavigator(LIST_MAIN);
  end
  else
		Log.Error('Не найден элемент: "' + LIST_MAIN + '"');
  GoToMainMenu;
end;

{
HLTC72.8: Сортировка
	HLTC72.8.1: Сортировать список и сравнить сортировку в Немезис и Гарант5х 
  (Немезис при этом не сортирует по алфавиту).Список получен по рубрикатору: 
  Законодательство об обороне – Общие вопросы обороны (Тестовая база) 
  	HLTC72.8.1.2: дате издания, возрастание:
    Закон РСФСР от 19 декабря 1991 г. N 2060-I "Об охране окружающей природной среды" (с изм. и доп. от 21 февраля 1992 г. и 2 июня 1993 г., 27 декабря 2000 г., 10 июля 2001 г., 30 декабря 2001 г.) 
    Соглашение об обеспечении радиолокационного опознавания воздушных, надводных и наземных объектов, оснащенных ответчиками опознавания системы "Пароль" (Минск, 26 июня 1992 г.) (с изменениями от 4 июня 1999 г.)
    Федеральный закон от 23 июня 1995 г. N 93-ФЗ "О порядке предоставления Российской Федерацией военного и гражданского персонала для участия в деятельности по поддержанию или восстановлению международного мира и безопасности"
    Воздушный кодекс РФ от 19 марта 1997 г. N 60-ФЗ (с изм. и доп. от 8 июля 1999 г.)
    Федеральный закон от 26 мая 1997 г. N 85-ФЗ "О ратификации Договора между Российской Федерацией и Республикой Армения о российской военной базе на территории Республики Армения"
    Протокол к Соглашению об обеспечении радиолокационного опознавания воздушных, надводных и наземных объектов, оснащенных ответчиками опознавания системы "Пароль", от 26 июня 1992 года (Минск, 4 июня 1999 г.)
    Программа действий Российской Федерации и Республики Беларусь по реализации положений Договора о создании Союзного государства (Москва, 8 декабря 1999 г.)
    Земельный кодекс Российской Федерации от 25 октября 2001 г. N 136-ФЗ
}
function  HLTC72_8_1_2_Execute(var  current_state: OleVariant): OleVariant;
var 
  rubricatorTree;
  listTree;
  listDefaultArray: array [0..7] of String;
  listCurrentArray;
  LISTPATH1;
begin
	LISTPATH1 := PNAV + '\Законодательство об обороне\Общие вопросы обороны';

  listDefaultArray[0] := 'Закон РСФСР от 19 декабря 1991 г. N 2060-I "Об охране окружающей природной среды" (с изм. и доп. от 21 февраля 1992 г. и 2 июня 1993 г., 27 декабря 2000 г., 10 июля 2001 г., 30 декабря 2001 г.)';
  listDefaultArray[1] := 'Соглашение об обеспечении радиолокационного опознавания воздушных, надводных и наземных объектов, оснащенных ответчиками опознавания системы "Пароль" (Минск, 26 июня 1992 г.) (с изменениями от 4 июня 1999 г.)';
  listDefaultArray[2] := 'Федеральный закон от 23 июня 1995 г. N 93-ФЗ "О порядке предоставления Российской Федерацией военного и гражданского персонала для участия в деятельности по поддержанию или восстановлению международного мира и безопасности"';
  listDefaultArray[3] := 'Воздушный кодекс РФ от 19 марта 1997 г. N 60-ФЗ (с изм. и доп. от 8 июля 1999 г.)';
  listDefaultArray[4] := 'Федеральный закон от 26 мая 1997 г. N 85-ФЗ "О ратификации Договора между Российской Федерацией и Республикой Армения о российской военной базе на территории Республики Армения"';
  listDefaultArray[5] := 'Протокол к Соглашению об обеспечении радиолокационного опознавания воздушных, надводных и наземных объектов, оснащенных ответчиками опознавания системы "Пароль", от 26 июня 1992 года (Минск, 4 июня 1999 г.)';
  listDefaultArray[6] := 'Программа действий Российской Федерации и Республики Беларусь по реализации положений Договора о создании Союзного государства (Москва, 8 декабря 1999 г.)';
  listDefaultArray[7] := 'Земельный кодекс Российской Федерации от 25 октября 2001 г. N 136-ФЗ';
  
	Result := false;
  //Находимся в ОМ, фокус в плоском классификаторе
  rubricatorTree:= OpenMenuTab;
  //переходим из плоского классификатора на ветку рубрикатора
  if (common.Position_Internal(rubricatorTree, listPath1)) then
  begin
		Sys.Keys('[Enter]');
    ListTree := GetList;
    ListTree.SetFocus;
    //Включаем сортировку По дате издания, возраст.
    if not SetSortParams(SORT_BY_PUBLICATION_DATE, SORT_ASCENDING) then
    	Log.Error('Невозможно включить нужный тип сортировки');   
    //Сравниваем списки
    ListCurrentArray := GetElementsFromTree(ListTree);		
    Result := CompareArray(listDefaultArray, ListCurrentArray, false);
    //    
    if not Result then
    	Log.Error('Неправильно работает СОРТИРОВКА списка');

    CollapseTreeInNavigator(listPath1);
  end
  else
		Log.Error('Не найден элемент: "' + ListPath1 + '"');      	
  GoToMainMenu;
end;

{
HLTC72.8.1.4: По юридической силе (по убыванию):
  Протокол к Соглашению об обеспечении радиолокационного опознавания воздушных, надводных и наземных объектов, оснащенных ответчиками опознавания системы "Пароль", от 26 июня 1992 года (Минск, 4 июня 1999 г.)
  Соглашение об обеспечении радиолокационного опознавания воздушных, надводных и наземных объектов, оснащенных ответчиками опознавания системы "Пароль" (Минск, 26 июня 1992 г.) (с изменениями от 4 июня 1999 г.)
  Воздушный кодекс РФ от 19 марта 1997 г. N 60-ФЗ (с изм. и доп. от 8 июля 1999 г.)
  Земельный кодекс Российской Федерации от 25 октября 2001 г. N 136-ФЗ
  Федеральный закон от 26 мая 1997 г. N 85-ФЗ "О ратификации Договора между Российской Федерацией и Республикой Армения о российской военной базе на территории Республики Армения"
  Федеральный закон от 23 июня 1995 г. N 93-ФЗ "О порядке предоставления Российской Федерацией военного и гражданского персонала для участия в деятельности по поддержанию или восстановлению международного мира и безопасности"
  Закон РСФСР от 19 декабря 1991 г. N 2060-I "Об охране окружающей природной среды" (с изм. и доп. от 21 февраля 1992 г. и 2 июня 1993 г., 27 декабря 2000 г., 10 июля 2001 г., 30 декабря 2001 г.)
  Программа действий Российской Федерации и Республики Беларусь по реализации положений Договора о создании Союзного государства (Москва, 8 декабря 1999 г.)
}
function  HLTC72_8_1_4_Execute(var  current_state: OleVariant): OleVariant;
var 
  list1, listDefaultArray;
begin
try
	Result := true;
  listDefaultArray := [
    'Протокол к Соглашению об*',
    'Соглашение об обеспечении*',
    'Воздушный кодекс РФ от 19 марта 1997 г. N 60-ФЗ*',
    'Земельный кодекс Российской Федерации от 25 октября 2001 г. N 136-ФЗ*',
    'Федеральный закон от 26 мая 1997 г. N 85-ФЗ*',
    'Федеральный закон от 23 июня 1995 г. N 93-ФЗ*',
    'Закон РСФСР от 19 декабря 1991 г. N 2060-I*',
    'Программа действий Российской Федерации и Республики Беларусь*'  
  ];
  list1 := PNAV + '\Законодательство об обороне\Общие вопросы обороны';
  
  if not OpenObjectFromFolder(list1, OpenMenuTab) then
    Raise('Не получилось открыть "' + list1 + '"');
  if not SetSortParams(SORT_BY_JUROR_STRENGTH, SORT_DESCENDING) then
  	Raise('Невозможно включить нужный тип сортировки');
  if not CompareArray(listDefaultArray, GetElementsFromTree(GetList), true, true) then
    Raise('Список после сортировки не соответствует эталону');
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  CollapseTreeInNavigator(list1);
  GoToMainMenu;
end;

{
HLTC72.8.1.4.1: В ППС по ключевому слову "А это специальный ключ\Документы с разными периодами активности и разной юр силой. 
  Для проверки сортировки по ЮС" построить список документов. При сортировке по юридической силе по убыванию (по умолчанию) порядок документов в списке должен быть следующим:
    Документ 7909100
    Документ 7909200
    Документ 7909300
    Документ 7909301
    Документ 7909201
    Документ 7909101
    Документ 7909401
    Документ 7909501
    Документ 7909400
    Документ 7909500(текст для noactive)
}
function HLTC72_8_1_4_1_Execute(var  current_state: OleVariant): OleVariant;
var 
  listDefaultArray;
begin
try
	Result := true;
  listDefaultArray := [
    'Документ 7909100.', 
    'Документ 7909200.',
    'Документ 7909300.',
    'Документ 7909301',
    'Документ 7909201.',
    'Документ 7909101.',
    'Документ 7909401',
    'Документ 7909501',
    'Документ 7909400.',
    'Документ 7909500 (текст для noactive).'
  ];
  if not SearchInPPS(['А это специальный ключ\Документы с разными периодами активности и разной юр силой. Для проверки сортировки по ЮС']) then
    Raise('Не получилось произвести ППС');
  if not SetSortParams(SORT_BY_JUROR_STRENGTH, SORT_DESCENDING) then
  	Raise('Невозможно включить нужный тип сортировки');
  if not CompareArray(listDefaultArray, GetElementsFromTree(GetList)) then
    Raise('Список после сортировки не соответствует эталону');
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenu;
end;

{
HLTC72.8: Сортировка
	HLTC72.8.1: Сортировать список и сравнить сортировку в Немезис и Гарант5х 
  (Немезис при этом не сортирует по алфавиту).Список получен по рубрикатору: 
  Документы – Законодательство об обороне – Общие вопросы обороны (Тестовая база) 
    HLTC72.8.1.6: По дате последнего изменения (по убыванию): 
}
function HLTC72_8_1_6_Execute(var  current_state: OleVariant): OleVariant;
var 
  rubricatorTree;
  listTree;
  listDefaultArray: array [0..7] of String;
  listCurrentArray;
  LISTPATH1;
begin
	LISTPATH1 := PNAV + '\Законодательство об обороне\Общие вопросы обороны';
  //
  listDefaultArray[0] := 'Земельный кодекс Российской Федерации от 25 октября 2001 г. N 136-ФЗ';
  listDefaultArray[1] := 'Программа действий Российской Федерации и Республики Беларусь по реализации положений Договора о создании Союзного государства (Москва, 8 декабря 1999 г.)';
  listDefaultArray[2] := 'Протокол к Соглашению об обеспечении радиолокационного опознавания воздушных, надводных и наземных объектов, оснащенных ответчиками опознавания системы "Пароль", от 26 июня 1992 года (Минск, 4 июня 1999 г.)';
  listDefaultArray[3] := 'Федеральный закон от 26 мая 1997 г. N 85-ФЗ "О ратификации Договора между Российской Федерацией и Республикой Армения о российской военной базе на территории Республики Армения"';
  listDefaultArray[4] := 'Воздушный кодекс РФ от 19 марта 1997 г. N 60-ФЗ (с изм. и доп. от 8 июля 1999 г.)';
  listDefaultArray[5] := 'Федеральный закон от 23 июня 1995 г. N 93-ФЗ "О порядке предоставления Российской Федерацией военного и гражданского персонала для участия в деятельности по поддержанию или восстановлению международного мира и безопасности"';
  listDefaultArray[6] := 'Закон РСФСР от 19 декабря 1991 г. N 2060-I "Об охране окружающей природной среды" (с изм. и доп. от 21 февраля 1992 г. и 2 июня 1993 г., 27 декабря 2000 г., 10 июля 2001 г., 30 декабря 2001 г.)';
  listDefaultArray[7] := 'Соглашение об обеспечении радиолокационного опознавания воздушных, надводных и наземных объектов, оснащенных ответчиками опознавания системы "Пароль" (Минск, 26 июня 1992 г.) (с изменениями от 4 июня 1999 г.)';
  //  
	Result := false;
  //Находимся в ОМ, фокус в плоском классификаторе
  rubricatorTree:= OpenMenuTab;
  //переходим из плоского классификатора на ветку рубрикатора
  if (common.Position_Internal(rubricatorTree, listPath1)) then
  begin
		Sys.Keys('[Enter]');
    ListTree := GetList;
    ListTree.SetFocus;
    //Включаем сортировку По дате посл. изм., убыван.
    if not SetSortParams(SORT_BY_EDITION_DATE, SORT_DESCENDING) then
    	Log.Error('Невозможно включить нужный тип сортировки');
    //Сравниваем списки
    listCurrentArray := GetElementsFromTree(ListTree);		
    Result := CompareArray(listDefaultArray, listCurrentArray, false);
    //    
    if not Result then
    	Log.Error('Неправильно работает СОРТИРОВКА списка');
    CollapseTreeInNavigator(listPath1);
  end
  else
		Log.Error('Не найден элемент: "' + ListPath1 + '"');      	
  GoToMainMenu;
end;

{
  HLTC72.8.7: Открыть список по рубрикатору "Тестовый класс для скриптов\Документы для проверки сортировки".
    HLTC72.8.7.1: Сортировка «По дате издания»: 58022, 58010.100, 58010.20, 58014, 58018, 58020, 58012, 58016, 58010.100, 58010.20, 58010.100, 58010.20
}
function HLTC72_8_7_1_Execute(var  current_state: OleVariant): OleVariant;
var 
  listDefaultArray;
begin
try
	Result := true;
  listDefaultArray := [
    'Документ 58022*', 
    'Документ 58010*Блок 100*',
    'Блок 20*',
    'Документ 58014*',
    'Документ 58018*',
    'Документ 58020*',
    'Документ 58012*',
    'Документ 58016*',
    'Документ 58010*Блок 100*',
    'Блок 20*',
    'Документ 58010*Блок 100*',
    'Блок 20*'
  ];
  if not OpenObjectFromFolder(LIST_TEST_SORT, OpenMenuTab) then
    Raise('Не получилось открыть "' + LIST_TEST_SORT + '"');
  if not SetSortParams(SORT_BY_PUBLICATION_DATE, SORT_DESCENDING) then
  	Raise('Невозможно включить нужный тип сортировки');
  if not CompareArray(listDefaultArray, GetElementsFromTree(GetList, true), true, true) then
    Raise('Список после сортировки не соответствует эталону');
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenu;
end;

{
  HLTC72.8.7.2: Сортировка «По юридической силе»: 58022, 58010.100, 58010.20, 58014, 58012, 58016, 58010.100, 58010.20, 58018, 58020
}
function HLTC72_8_7_2_Execute(var  current_state: OleVariant): OleVariant;
var 
  listDefaultArray;
begin
try
	Result := true;
  listDefaultArray := [
    'Документ 58022*', 
    'Документ 58010*Блок 100*',
    'Блок 20*',
    'Документ 58014*',
    'Документ 58012*',
    'Документ 58016*',
    'Документ 58010*Блок 100*',
    'Блок 20*',
    'Документ 58010*Блок 100*',
    'Блок 20*',
    'Документ 58018*',
    'Документ 58020*'
  ];
  if not OpenObjectFromFolder(LIST_TEST_SORT, OpenMenuTab) then
    Raise('Не получилось открыть "' + LIST_TEST_SORT + '"');
  if not SetSortParams(SORT_BY_JUROR_STRENGTH, SORT_DESCENDING) then
  	Raise('Невозможно включить нужный тип сортировки');
  if not CompareArray(listDefaultArray, GetElementsFromTree(GetList, true), true, true) then
    Raise('Список после сортировки не соответствует эталону');
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenu;
end;

{
  HLTC72.8.7.3: Сортировка «По дате последнего изменения»: 58018, 58014, 58020, 58016, 58022, 58010.100, 58010.20, 58012, 58010.100, 58010.20, 58010.100, 58010.20
}
function HLTC72_8_7_3_Execute(var  current_state: OleVariant): OleVariant;
var 
  listDefaultArray;
begin
try
	Result := true;

  listDefaultArray := [
    'Документ 58018*', 
    'Документ 58014*',
    'Документ 58020*',
    'Документ 58016*',
    'Документ 58022*',
    'Документ 58010*Блок 100*',
    'Блок 20*',
    'Документ 58012*',
    'Документ 58010*Блок 100*',
    'Блок 20*',
    'Документ 58010*Блок 100*',
    'Блок 20*'    
  ];
  if not OpenObjectFromFolder(LIST_TEST_SORT, OpenMenuTab) then
    Raise('Не получилось открыть "' + LIST_TEST_SORT + '"');
  if not SetSortParams(SORT_BY_EDITION_DATE, SORT_DESCENDING) then
  	Raise('Невозможно включить нужный тип сортировки');
  if not CompareArray(listDefaultArray, GetElementsFromTree(GetList, true), true, true) then
    Raise('Список после сортировки не соответствует эталону');
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenu;
end;

{
HLTC72.14.6: Загрузка из папки
	HLTC72.14.6.1: Проверить, что список загружается с тем порядком сортировки, 
  который был на момент его сохранения в папку, не смотря на текущие пользовательские настройки:
  	HLTC72.14.6.1.1: Загрузка списка, сохраненного с сортировкой по убыванию юр
    силы, при настройках убывание юр силы
}
function  HLTC72_14_6_1_1_Execute(var  current_state: OleVariant): OleVariant;
const
	SAVEDNAME     = 'Список611';
  SETTINGS_DIR  = 'по убыванию значений';
  SETTINGS_TYPE = 'по юридической силе';
var 
  RubricatorTree;
  LISTPATH1;
begin
	LISTPATH1 := LIST_RUBR_MAIN + '\Порядок организации и проведения массовых мероприятий';
  //
	Result := false;
  SetSettings([ (['СПИСКИ ДОКУМЕНТОВ', 'СОРТИРОВКА ПО УМОЛЧАНИЮ\ТИП СОРТИРОВКИ [COMBOBOX]', SETTINGS_TYPE]) ]);
  SetSettings([ (['СПИСКИ ДОКУМЕНТОВ', 'СОРТИРОВКА ПО УМОЛЧАНИЮ\ПОРЯДОК СОРТИРОВКИ [COMBOBOX]', SETTINGS_DIR]) ]);  
  //
  RubricatorTree := OpenMenuTab; 
  if (common.Position_Internal(RubricatorTree, LISTPATH1)) then
  begin
		Sys.Keys('[Enter]');
    GetList.SetFocus;
    SetSortParams(SORT_BY_JUROR_STRENGTH,SORT_DESCENDING);
    if not SimpleSaveToFolders(SAVEDNAME) then
    	Log.Warning('Не удалось сохранить список в папку, список с таким именем уже существует');
    //Открываем Мои документы
    OpenMyDocTab;
    if (common.Position_Internal(GetFolderTree, MY_DOCS_PATH + SAVEDNAME)) then
    begin
    	Sys.Keys('[Enter]');
      GetList.SetFocus;
      Result := (GetSortType = SORT_BY_JUROR_STRENGTH);
      Result := Result and (GetSortDirection = SORT_DESCENDING);
      if not Result then
        Log.Error('Неверный тип сортировки сохранненного списка');
      DeleteObjectFromFolder(MY_DOCS_PATH + SAVEDNAME);
    end;
    CollapseTreeInNavigator(listPath1);
  end
  else
   	Log.Error('Не найден элемент: "' + LISTPATH1 + '"');
  SetDefaultSettings;
  GoToMainMenu;
end;

{
HLTC72.8: Сортировка
	HLTC72.8.1: Сортировать список и сравнить сортировку в Немезис и Гарант5х 
  (Немезис при этом не сортирует по алфавиту).Список получен по рубрикатору: 
  Документы – Законодательство об обороне – Общие вопросы обороны (Тестовая база) 
    HLTC72.8.1.7: По дате издания (по убыванию): 
    Земельный кодекс Российской Федерации от 25 октября 2001 г. N 136-ФЗ
    Программа действий Российской Федерации и Республики Беларусь по реализации положений Договора о создании Союзного государства (Москва, 8 декабря 1999 г.)
    Протокол к Соглашению об обеспечении радиолокационного опознавания воздушных, надводных и наземных объектов, оснащенных ответчиками опознавания системы "Пароль", от 26 июня 1992 года (Минск, 4 июня 1999 г.)
    Федеральный закон от 26 мая 1997 г. N 85-ФЗ "О ратификации Договора между Российской Федерацией и Республикой Армения о российской военной базе на территории Республики Армения"
    Воздушный кодекс РФ от 19 марта 1997 г. N 60-ФЗ (с изм. и доп. от 8 июля 1999 г.)
    Федеральный закон от 23 июня 1995 г. N 93-ФЗ "О порядке предоставления Российской Федерацией военного и гражданского персонала для участия в деятельности по поддержанию или восстановлению международного мира и безопасности"
    Соглашение об обеспечении радиолокационного опознавания воздушных, надводных и наземных объектов, оснащенных ответчиками опознавания системы "Пароль" (Минск, 26 июня 1992 г.) (с изменениями от 4 июня 1999 г.)
    Закон РСФСР от 19 декабря 1991 г. N 2060-I "Об охране окружающей природной среды" (с изм. и доп. от 21 февраля 1992 г. и 2 июня 1993 г., 27 декабря 2000 г., 10 июля 2001 г., 30 декабря 2001 г.)
}
function  HLTC72_8_1_7_Execute(var  current_state: OleVariant): OleVariant;
var 
  rubricatorTree;
  listTree;
  listDefaultArray: array [0..7] of String;
  listCurrentArray;
  LISTPATH1;
begin
  LISTPATH1 := PNAV + '\Законодательство об обороне\Общие вопросы обороны';
  //
  listDefaultArray[7] := 'Закон РСФСР от 19 декабря 1991 г. N 2060-I "Об охране окружающей природной среды" (с изм. и доп. от 21 февраля 1992 г. и 2 июня 1993 г., 27 декабря 2000 г., 10 июля 2001 г., 30 декабря 2001 г.)';
  listDefaultArray[6] := 'Соглашение об обеспечении радиолокационного опознавания воздушных, надводных и наземных объектов, оснащенных ответчиками опознавания системы "Пароль" (Минск, 26 июня 1992 г.) (с изменениями от 4 июня 1999 г.)';
  listDefaultArray[5] := 'Федеральный закон от 23 июня 1995 г. N 93-ФЗ "О порядке предоставления Российской Федерацией военного и гражданского персонала для участия в деятельности по поддержанию или восстановлению международного мира и безопасности"';
  listDefaultArray[4] := 'Воздушный кодекс РФ от 19 марта 1997 г. N 60-ФЗ (с изм. и доп. от 8 июля 1999 г.)';
  listDefaultArray[3] := 'Федеральный закон от 26 мая 1997 г. N 85-ФЗ "О ратификации Договора между Российской Федерацией и Республикой Армения о российской военной базе на территории Республики Армения"';
  listDefaultArray[2] := 'Протокол к Соглашению об обеспечении радиолокационного опознавания воздушных, надводных и наземных объектов, оснащенных ответчиками опознавания системы "Пароль", от 26 июня 1992 года (Минск, 4 июня 1999 г.)';
  listDefaultArray[1] := 'Программа действий Российской Федерации и Республики Беларусь по реализации положений Договора о создании Союзного государства (Москва, 8 декабря 1999 г.)';
  listDefaultArray[0] := 'Земельный кодекс Российской Федерации от 25 октября 2001 г. N 136-ФЗ';
  //  
	Result := false;
  //Находимся в ОМ, фокус в плоском классификаторе
  rubricatorTree:= OpenMenuTab;
  //переходим из плоского классификатора на ветку рубрикатора
  if (common.Position_Internal(rubricatorTree, listPath1)) then
  begin
		Sys.Keys('[Enter]');
    ListTree := GetList;
    ListTree.SetFocus;
    //Включаем сортировку По дате издания, убыван.
    if not SetSortParams(SORT_BY_PUBLICATION_DATE, SORT_DESCENDING) then
    	Log.Error('Невозможно включить нужный тип сортировки');   
    //Сравниваем списки
    ListCurrentArray := GetElementsFromTree(ListTree);		
    Result := CompareArray(listDefaultArray, ListCurrentArray, false);
    //    
    if not Result then
    	Log.Error('Неправильно работает СОРТИРОВКА списка');
    CollapseTreeInNavigator(listPath1);
  end
  else
		Log.Error('Не найден элемент: "' + ListPath1 + '"');      	
  GoToMainMenu;
end;

{
HLTC72.8: Сортировка
HLTC72.8.3: Проверить, что после пересортировки текущий элемент списка не изменился и
 находится в видимой зоне списка.
}
function  HLTC72_8_3_Execute(var  current_state: OleVariant): OleVariant;
var 
  rubricatorTree;
  listTree;
  elem;
  sorttype, sortdirection;
begin
	Result := false;
  rubricatorTree:= OpenMenuTab;
//переходим из плоского классификатора на ветку рубрикатора
  if (common.Position_Internal(rubricatorTree, LIST_MAIN)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
    sorttype := GetSortType;
    sortdirection := GetSortDirection;    
    elem := common.GetWindowText(listTree.Handle);
    Result := SetSortParams(SORT_BY_EDITION_DATE, SORT_ASCENDING);
    if not Result then 
    	Log.Error('Не смогли включить нужный тип сортировки ' + '"' +  SORT_BY_EDITION_DATE + '", ' + '"' + SORT_ASCENDING + '"')
    else
    begin
      listTree.SetFocus;
      Result := Result and (common.GetWindowText(listTree.Handle) = elem);
      Result := Result and SetSortParams(sorttype, sortdirection);
      listTree.SetFocus;
      Result := Result and (common.GetWindowText(listTree.Handle) = elem);
      if not Result then
      	Log.Error('После сортировки изменяется текущий элемент списка!', 'Был "' + elem +
        '", стал "' + common.GetWindowText(listTree.Handle) + '"');
      CollapseTreeInNavigator(LIST_MAIN);
    end;
  end
  else
		Log.Error('Не найден элемент: "' + LIST_MAIN + '"');
  GoToMainMenu;
end;

{
	HLTC72.12: Копирование части элементов списка в новый список
  	HLTC72.12.1: Провести копирование выделенных элементов в новый список (затем
    сравнить, что именно выделенные элементы скопировались):
    	HLTC72.12.1.1: когда выделены все элементы списка
      HLTC72.21.1: Проверить копирование из непустого списка в непустой список
      HLTC72.21.6: Проверить копирование элементов в список, когда в нём уже 
      есть такие элементы.
      HLTC72.21.8: Проверить копирование нескольких элементов списка.
}     
function  HLTC72_12_1_1_Execute(var  current_state: OleVariant): OleVariant;
var
  rubricatorTree, listTree;
  LISTPATH1, LISTPATH2;
  docsArr, resDocsArr;
  check, i;            
begin
	LISTPATH1 := LIST_RUBR_MAIN + '\Порядок организации и проведения массовых мероприятий';
  LISTPATH2 := LIST_RUBR_MAIN + '\Государственный язык, языки народов Российской Федерации';
  //
	Result := false;
  rubricatorTree:= OpenMenuTab;
  //переходим из плоского классификатора на ветку рубрикатора
  if (common.Position_Internal(rubricatorTree, LISTPATH1)) then
  begin
		Sys.Keys('[Enter]');     
    listTree := GetList;
    listTree.SetFocus;
    //в буфер
    Sys.Keys('[Home]');
    CopyToClipboard(listTree, 'ALL','IsCleanClipboard := false');
    docsArr := GetElementsFromTree(listTree);
    //Сворачиваем дерево рубрикатора
    rubricatorTree:= OpenMenuTab;
    CollapseTreeInNavigator(LISTPATH1);
    //переходим из плоского классификатора на ветку рубрикатора: 
    if (common.Position_Internal(rubricatorTree, LISTPATH2)) then
    begin
  		Sys.Keys('[Enter]');     
      listTree := GetList;
    	listTree.SetFocus;
      //
      PasteFromClipboard(listTree);
      resDocsArr := GetElementsFromTree(listTree);
      //
      check := true;
      for i := VarArrayLowBound(docsArr,1) to VarArrayHighBound(docsArr,1) do
        if not FindElement(resdocsArr, docsArr[i]) then
        begin
        	Log.Error('Не найден документ "' + docsArr[i]+ '" в скопированом списке');
          check := false;
        end;
      Result := check;
      if not Result then
      	Log.Error('Некорректно копируются элементы списка');
      CollapseTreeInNavigator(LISTPATH2);
    end
    else
  		Log.Error('Не найден элемент: "' + LISTPATH2+ '"');     
  end
  else
  	Log.Error('Не найден элемент: "' + LISTPATH1 + '"');
  //
  GoToMainMenu;
end;

{
HLTC72.14: Работа со списками в папках
	HLTC72.14.1: Проверить, что список, сохраненный в папку, содержит то же количество и те документы, что нужно.
}
function  HLTC72_14_1_Execute(var  current_state: OleVariant): OleVariant;
const
  SAVEDNAME = 'Список2141';
var
  docs_count;   
  LISTPATH1, LISTPATH2;
begin
	Result := false;	
  LISTPATH1 := LIST_RUBR_MAIN + '\Порядок организации и проведения массовых мероприятий';
  LISTPATH2 := LIST_RUBR_MAIN + '\Государственный язык, языки народов Российской Федерации';
  
  if OpenObjectFromFolder(LISTPATH1, OpenMenuTab) then
  begin   
    CopyToClipboard(GetList, 'ALL','IsCleanClipboard := false');

    if OpenObjectFromFolder(LISTPATH2, OpenMenuTab) then
    begin  
      PasteFromClipBoard(GetList);
      docs_count := CountElementInList(GetList);

      if not SimpleSaveToFolders(SAVEDNAME) then
      	Log.Warning('Не удалось сохранить список в папку или список с таким именем уже существует');

      if OpenObjectFromFolder(MY_DOCS_PATH + SAVEDNAME) then	
      begin
        Result := FindInList( [([FL_NUMBER, docs_count])] );
        if not Result then
          Log.Error('Сохраненный список не соответствует эталону');
		    DeleteObjectFromFolder(MY_DOCS_PATH + SAVEDNAME);
      end;

      CollapseTreeInNavigator(LISTPATH2);
    end   
    else
      Log.Error('Не найден элемент: "' + LISTPATH2+ '"');     
  end
  else
  	Log.Error('Не найден элемент: "' + LISTPATH1 + '"');
  GoToMainMenu;
end;

{
HLTC72.14: Работа со списками в папках
	HLTC72.14.2: Проверить, что название, предлагаемое по умолчанию для сохранения 
  списка, полностью совпадает с названием списка.
}
function  HLTC72_14_2_Execute(var  current_state: OleVariant): OleVariant;
var 
  w;
  rubricatorTree;
  LISTPATH1;
begin
	LISTPATH1 := LIST_RUBR_MAIN + '\Порядок организации и проведения массовых мероприятий';
  //
	Result := false;
  //Находимся в ОМ, фокус в плоском классификаторе
  rubricatorTree:= OpenMenuTab;
  //переходим из плоского классификатора на ветку рубрикатора
  if (common.Position_Internal(rubricatorTree, LISTPATH1)) then
  begin
		Sys.Keys('[Enter]');
    GetList.SetFocus;
    OpenSaveToFolderDialog;//		Sys.Keys('^[F11]');
    //
    GetFromFolderForm('ПОЛЕ "ИМЯ"', GetFromShell('ДИАЛОГ СОХРАНЕНИЯ В ПАПКИ')).SetFocus;
    CopyToClipboard(nil, '','IsCleanClipboard := false');    
		Sys.Keys('[Esc]');    
    w:=GetMainWindow;
    //
    Result:=StringCompare('*'+Sys.Clipboard, w.Caption);
    if not Result then
    	Log.Error('Название сохраняемого списка '+Sys.Clipboard+'отличается от действительного');
    CollapseTreeInNavigator(LISTPATH1);
  end
  else
		Log.Error('Не найден элемент: "' + LISTPATH1 + '"');      	
  GoToMainMenu;
end;


{
HLTC72.14.6: Загрузка из папки
	HLTC72.14.6.1: Проверить, что список загружается с тем порядком сортировки, 
  который был на момент его сохранения в папку, не смотря на текущие пользовательские настройки:
		HLTC72.14.6.1.2: Загрузка списка, сохраненного с сортировкой по убыванию юр 
    силы, при настройках возрастание юр силы
}
function  HLTC72_14_6_1_2_Execute(var  current_state: OleVariant): OleVariant;
const
	SAVEDNAME     = 'Список612';
  SETTINGS_DIR  = 'по возрастанию значений';
  SETTINGS_TYPE = 'по юридической силе';
var 
  RubricatorTree;
  LISTPATH1;
begin
	LISTPATH1 := LIST_RUBR_MAIN + '\Порядок организации и проведения массовых мероприятий';
  //
	Result := false;
  SetSettings([ (['СПИСКИ ДОКУМЕНТОВ', 'СОРТИРОВКА ПО УМОЛЧАНИЮ\ТИП СОРТИРОВКИ [COMBOBOX]', SETTINGS_TYPE]) ]);
  SetSettings([ (['СПИСКИ ДОКУМЕНТОВ', 'СОРТИРОВКА ПО УМОЛЧАНИЮ\ПОРЯДОК СОРТИРОВКИ [COMBOBOX]', SETTINGS_DIR]) ]);  
  //
  RubricatorTree := OpenMenuTab; 
  if (common.Position_Internal(RubricatorTree, LISTPATH1)) then
  begin
		Sys.Keys('[Enter]');
    GetList.SetFocus;
    SetSortParams(SORT_BY_JUROR_STRENGTH,SORT_DESCENDING);
    if not SimpleSaveToFolders(SAVEDNAME) then
    	Log.Warning('Не удалось сохранить список в папку, список с таким именем уже существует');
    //Открываем Мои документы
    OpenMyDocTab;
    if (common.Position_Internal(GetFolderTree, MY_DOCS_PATH + SAVEDNAME)) then
    begin
    	Sys.Keys('[Enter]');
      GetList.SetFocus;
      Result := (GetSortType = SORT_BY_JUROR_STRENGTH);
      Result := Result and (GetSortDirection = SORT_DESCENDING);
      if not Result then
        Log.Error('Неверный тип сортировки сохранненного списка');
      DeleteObjectFromFolder(MY_DOCS_PATH + SAVEDNAME);
    end;
    CollapseTreeInNavigator(LISTPATH1);
  end
  else
   	Log.Error('Не найден элемент: "' + LISTPATH1 + '"');
  SetDefaultSettings;
  GoToMainMenu;
end;

{
HLTC72.14.6: Загрузка из папки
	HLTC72.14.6.1: Проверить, что список загружается с тем порядком сортировки, 
  который был на момент его сохранения в папку, не смотря на текущие пользовательские настройки:
		HLTC72.14.6.1.3: Загрузка списка, сохраненного с сортировкой по убыванию 
    даты изменения, при настройках убывание даты создания
}
function  HLTC72_14_6_1_3_Execute(var  current_state: OleVariant): OleVariant;
const
	SAVEDNAME     = 'Список613';
  SETTINGS_DIR  = 'по убыванию значений';
  SETTINGS_TYPE = 'по дате издания';
var 
  RubricatorTree;
  LISTPATH1;
begin
	LISTPATH1 := LIST_RUBR_MAIN + '\Порядок организации и проведения массовых мероприятий';
  //
	Result := false;    
  SetSettings([ (['СПИСКИ ДОКУМЕНТОВ', 'СОРТИРОВКА ПО УМОЛЧАНИЮ\ТИП СОРТИРОВКИ [COMBOBOX]', SETTINGS_TYPE]) ]);
  SetSettings([ (['СПИСКИ ДОКУМЕНТОВ', 'СОРТИРОВКА ПО УМОЛЧАНИЮ\ПОРЯДОК СОРТИРОВКИ [COMBOBOX]', SETTINGS_DIR]) ]);  
  //
  RubricatorTree := OpenMenuTab; 
  if (common.Position_Internal(RubricatorTree, LISTPATH1)) then
  begin
		Sys.Keys('[Enter]');
    GetList.SetFocus;
    SetSortParams(SORT_BY_EDITION_DATE,SORT_DESCENDING);
    if not SimpleSaveToFolders(SAVEDNAME) then
    	Log.Warning('Не удалось сохранить список в папку, список с таким именем уже существует');
    //Открываем Мои документы
    OpenMyDocTab;
    if (common.Position_Internal(GetFolderTree, MY_DOCS_PATH + SAVEDNAME)) then
    begin
    	Sys.Keys('[Enter]');
      GetList.SetFocus;
      Result := (GetSortType = SORT_BY_EDITION_DATE);
      Result := Result and (GetSortDirection = SORT_DESCENDING);
      if not Result then
        Log.Error('Неверный тип сортировки сохранненного списка');
      DeleteObjectFromFolder(MY_DOCS_PATH + SAVEDNAME);
    end;
    CollapseTreeInNavigator(LISTPATH1);
  end
  else
   	Log.Error('Не найден элемент: "' + LISTPATH1 + '"');
  SetDefaultSettings;
  GoToMainMenu;
end;


{
HLTC72.14.6: Загрузка из папки
	HLTC72.14.6.1: Проверить, что список загружается с тем порядком сортировки, 
  который был на момент его сохранения в папку, не смотря на текущие пользовательские настройки:
		HLTC72.14.6.1.4: Загрузка списка, сохраненного с сортировкой по возрастанию 
    даты издания, при настройках убывание юр силы.
}
function  HLTC72_14_6_1_4_Execute(var  current_state: OleVariant): OleVariant;
const
	SAVEDNAME     = 'Список614';
  SETTINGS_DIR  = 'по убыванию значений';
  SETTINGS_TYPE = 'по юридической силе';
var 
  RubricatorTree;
  LISTPATH1;
begin
	LISTPATH1 := LIST_RUBR_MAIN + '\Порядок организации и проведения массовых мероприятий';
  //
	Result := false;    
  SetSettings([ (['СПИСКИ ДОКУМЕНТОВ', 'СОРТИРОВКА ПО УМОЛЧАНИЮ\ТИП СОРТИРОВКИ [COMBOBOX]', SETTINGS_TYPE]) ]);
  SetSettings([ (['СПИСКИ ДОКУМЕНТОВ', 'СОРТИРОВКА ПО УМОЛЧАНИЮ\ПОРЯДОК СОРТИРОВКИ [COMBOBOX]', SETTINGS_DIR]) ]);  
  //
  RubricatorTree := OpenMenuTab; 
  if (common.Position_Internal(RubricatorTree, LISTPATH1)) then
  begin
		Sys.Keys('[Enter]');
    GetList.SetFocus;
    SetSortParams(SORT_BY_PUBLICATION_DATE,SORT_ASCENDING);  
    if not SimpleSaveToFolders(SAVEDNAME) then
    	Log.Warning('Не удалось сохранить список в папку, список с таким именем уже существует');
    //Открываем Мои документы
    OpenMyDocTab;
    if (common.Position_Internal(GetFolderTree, MY_DOCS_PATH + SAVEDNAME)) then
    begin
    	Sys.Keys('[Enter]');
      GetList.SetFocus;
      Result := (GetSortType = SORT_BY_PUBLICATION_DATE);
      Result := Result and (GetSortDirection = SORT_ASCENDING);
      if not Result then
        Log.Error('Неверный тип сортировки сохранненного списка');
      DeleteObjectFromFolder(MY_DOCS_PATH + SAVEDNAME);
    end;
    CollapseTreeInNavigator(LISTPATH1);
  end
  else
   	Log.Error('Не найден элемент: "' + LISTPATH1 + '"');
  SetDefaultSettings;
  GoToMainMenu;
end;

{
HLTC72.19: Фильтрация
	HLTC72.19.1: проверить, что если в результате получается пустой список, то 
  система предупреждает пользователя и показывает ему список до фильтрации
}
function  HLTC72_19_1_Execute(var  current_state: OleVariant): OleVariant;
const
	FILTERNAME = '*формы документов*';
var 
  RubricatorTree;
  ListTree;
  ListName;
  FilterTree;
  ListBeforeFiltrate;
  LISTPATH1;
begin
	LISTPATH1 := LIST_RUBR_MAIN + '\Порядок организации и проведения массовых мероприятий';
  //
	Result := false; 
  rubricatorTree:= OpenMenuTab;
  //переходим из плоского классификатора на ветку рубрикатора
  if (common.Position_Internal(rubricatorTree, LISTPATH1)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
    listBeforeFiltrate := GetElementsFromTree(listTree);
		if OpenFilterTab then
    begin
      if not Position_Internal(GetFilterTree, FILTERNAME, DELIM_CHAR, true) then
        Log.Error('Не найден фильтр "' + FILTERNAME + '"')
      else
      begin 
  		  WorkWithFilters(GetFilterTree, 'set', '+' + FILTERNAME);
        if IsExists(GetFromList('ОБЛАСТЬ ПУСТОГО РЕЗУЛЬТАТА ФИЛЬТРА')) then
        begin
          WorkWithFilters(GetFilterTree, 'set', '-' + FILTERNAME);
          listTree.SetFocus;
          Result := CompareArray(GetElementsFromTree(listTree), listBeforeFiltrate);
          if not Result then
            Log.Error('Разные списки до и после фильтрации');        
        end
      	else
        	Log.Error('Не найдено окно пустого результата фильтрации');
      end;            
    end
    else
    	Log.Error('Не получилось открыть вкладку фильтры: "' + FILTERNAME + '"');
    CollapseTreeInNavigator(LISTPATH1);
  end
  else
		Log.Error('Не найден элемент: "' + LISTPATH1 + '"');   
  GoToMainMenu;
end;

{
HLTC72.19: Фильтрация
	HLTC72.19.6: Проверить фильтрацию несколькими фильтрами.
  HLTC72.5.1.7: После фильтрации одним или несколькими фильтрами, после снятия фильтрации
}
function HLTC72_19_6_Execute(var  current_state: OleVariant): OleVariant;
const
	FILTERNAME1 = '*действующие*';
  FILTERNAME2 = '*федеральные акты*';
var
  clipboard, filterTree;
  docsName, listAfterFiltrate, LISTPATH1;
begin
try	
	Result := true;
  
  LISTPATH1 := LIST_RUBR_MAIN + '\Порядок организации и проведения массовых мероприятий';
  docsName := 
    [
      ([FL_EXISTS_INT, 'Кодекс Российской Федерации об административных правонарушениях*']),
      ([FL_EXISTS_INT, 'Уголовный кодекс*N 63-ФЗ*']),
      ([FL_EXISTS_INT, 'Кодекс РСФСР об административных правонарушениях*'])
    ];  

  if not OpenObjectFromFolder(LISTPATH1, OpenMenuTab) then
    Raise('Не открылся список: "' + LISTPATH1 + '"');
  GetList.SetFocus;
  OpenFilterTab;
  filterTree := GetFilterTree;
  if not (WorkWithFilters(filterTree, 'set', '+' + FILTERNAME1) and WorkWithFilters(filterTree, 'set', '+' + FILTERNAME2)) then
    Raise('Не получилось применить фильтры ' + FILTERNAME1 + ' и ' + FILTERNAME2);

  if not FindInList(docsName) then
  	Result := ErrorResult('Некорректно фильтруется список');

  clipboard := CopyToClipboard(OpenListHelpTab, 'ALL');
  Result := Result and StringCompare('*'+LISTPATH1+'*',clipboard);
  Result := Result and StringCompare('*'+FILTERNAME1+'*',clipboard);
  Result := Result and StringCompare('*'+FILTERNAME2+'*',clipboard);
  if not Result then
    Log.Error('В буфере обмена находится некорректная СПРАВКА К СПИСКУ: "' + clipboard + '"');
except
  Result := false;  
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
  CommonExceptionHandler;
end;
  GoToMainMenu;
end;

{
  HLTC72.19 Фильтрация
    HLTC72.19.3 Проверить, что корректно отображается количество документов в отфильтрованном списке
}
function  HLTC72_19_3_Execute(var  current_state: OleVariant): OleVariant;
const
	FILTERNAME = '*действующие*';
begin
  try
  	Result := true; 

    if not OpenObjectFromFolder(LIST_MAIN, OpenMenuTab) then
      Raise('Не получилось открыть список "' + LIST_MAIN + '"');
    if not OpenFilterTab then
      Raise('Не получилось открыть список фильтров');
    if not WorkWithFilters(GetFilterTree, 'set', '+' + FILTERNAME) then
      Raise('Не получилось применить фильтр "' + FILTERNAME + '"');
    if CountElementInList(GetList) <> CountElementInTree(GetList) then
      Raise('Количество элементов отфильтрованного списка в статусбаре не соответствует количеству в списке');
  except
    Result := False;
    Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
  end;
  GoToMainMenu;
end;

{
HLTC72.21: Копирование между списками
	HLTC72.21.2: Проверить копирование из пустого списка в непустой список 
  (в одном списке выделить элемент, отправить в буфер, а затем удалить все элементы)
}             
function  HLTC72_21_2_Execute(var  current_state: OleVariant): OleVariant;
const
  DOCNAME = 'Уголовный кодекс*N 63-ФЗ*';
var 
  rubricatorTree;
  listTree;
  LISTPATH1, LISTPATH2;
  docsArr, resDocsArr;
begin
	LISTPATH1 := LIST_RUBR_MAIN + '\Порядок организации и проведения массовых мероприятий';
  LISTPATH2 := LIST_RUBR_MAIN + '\Государственный язык, языки народов Российской Федерации';
  //  
	Result := false; 
  rubricatorTree := OpenMenuTab;
  //переходим из плоского классификатора на ветку рубрикатора: 
  if (common.Position_Internal(rubricatorTree, LISTPATH1)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
    if common.Position_by_Text(listTree, DOCNAME, false, true) then
    begin
      //копируем элемент в буфер и выделяем все элементы
      CopyToClipboard(listTree, '','IsCleanClipboard := false');
      docsArr := common.GetWindowText(listTree.Handle);
      //удаляем все
      Sys.Keys(keypause+'^a'+keypause);      
      DelWithConfirm;
      rubricatorTree := OpenMenuTab;
      if (common.Position_Internal(rubricatorTree, LISTPATH2)) then
  	  begin
    		Sys.Keys('[Enter]');     
        listTree := GetList;
      	listTree.SetFocus;
        //
        PasteFromClipboard(listTree);
        resDocsArr := GetElementsFromTree(listTree);
        //
        Result := true;
        if not FindElement(resdocsArr, docsArr) then
        begin
        	Log.Error('Не найден скопированный документ "' + docsArr + '" после вставки');
          Log.Error('Некорректно копируется элемент из пустого в непустой список');
          Result := false;
        end;
      end
      else
    		Log.Error('Не найден список: "' + LISTPATH2 + '"');
      CollapseTreeInNavigator(LISTPATH1);
    end
    else
			Log.Error('Не найден документ: "' + DOCNAME + '"');
  end
  else
		Log.Error('Не найден список: "' + LISTPATH1 + '"');
  GoToMainMenu;
end;

{
HLTC72.21: Копирование между списками
	HLTC72.21.3: Проверить копирование из пустого списка в пустой список
}     


function  HLTC72_21_3_Execute(var  current_state: OleVariant): OleVariant;
const
  DOCNAME = 'Уголовный кодекс*N 63-ФЗ*';
var 
  rubricatorTree;
  listTree;
	listArray: array [0..0] of String;
  LISTPATH1, LISTPATH2;
begin
	LISTPATH1 := LIST_RUBR_MAIN + '\Порядок организации и проведения массовых мероприятий';
  LISTPATH2 := LIST_RUBR_MAIN + '\Государственный язык, языки народов Российской Федерации';
  //
	listArray[0] := DOCNAME;
  //  
	Result := false; 
  rubricatorTree := OpenMenuTab;
  //переходим из плоского классификатора на ветку рубрикатора: 
  if (common.Position_Internal(rubricatorTree, LISTPATH1)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
    if common.Position_by_Text(listTree, DOCNAME, false, true) then
    begin
      //копируем элемент в буфер и выделяем все элементы
      CopyToClipboard(listTree, '','IsCleanClipboard := false');
      //удаляем всё
      PressKeyWithCheck(['^a']);      
      DelWithConfirm; 
      rubricatorTree := OpenMenuTab;
      if (common.Position_Internal(rubricatorTree, LISTPATH2)) then
  	  begin
      	Sys.Keys('[Enter]');
      	listTree.SetFocus;
        //удаляем всё
        PressKeyWithCheck(['^a']);      
        DelWithConfirm; 
        //
        PasteFromClipboard(listTree);
        Sys.Keys('[Home]');
  			Result := CompareArray(GetElementsFromTree(listTree), listArray);
        if not Result then
          Log.Error('Некорректно копируется элемент из пустого в пустой список');
      end
      else
    		Log.Error('Не найден список: "' + LISTPATH2 + '"');
      CollapseTreeInNavigator(LISTPATH1);
    end
    else
			Log.Error('Не найден документ: "' + DOCNAME + '"');
  end
  else
		Log.Error('Не найден список: "' + LISTPATH1 + '"');
  GoToMainMenu;
end;

{
HLTC72.21: Копирование между списками
	HLTC72.21.4: Проверить копирование из непустого списка в пустой список 
}     
function  HLTC72_21_4_Execute(var  current_state: OleVariant): OleVariant;
const
  DOCNAME = 'Уголовный кодекс*N 63-ФЗ*';
var 
  rubricatorTree;
  listTree;
	listArray: array [0..0] of String;
  LISTPATH1, LISTPATH2;
begin
	LISTPATH1 := LIST_RUBR_MAIN + '\Порядок организации и проведения массовых мероприятий';
  LISTPATH2 := LIST_RUBR_MAIN + '\Государственный язык, языки народов Российской Федерации';
  //
	listArray[0] := DOCNAME;
  //  
	Result := false; 
  rubricatorTree := OpenMenuTab;
  //переходим из плоского классификатора на ветку рубрикатора: 
  if (common.Position_Internal(rubricatorTree, LISTPATH1)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
    if common.Position_by_Text(listTree, DOCNAME, false, true) then
    begin
      //копируем элемент в буфер
      CopyToClipboard(listTree, '','IsCleanClipboard := false');
      rubricatorTree := OpenMenuTab;
      if (common.Position_Internal(rubricatorTree, LISTPATH2)) then
  	  begin
      	Sys.Keys('[Enter]');
      	listTree.SetFocus;
        //удаляем всё
        PressKeyWithCheck(['^a']);
      	DelWithConfirm; 
        //
        PasteFromClipboard(listTree);
        Sys.Keys('[Home]');
  			Result := CompareArray(GetElementsFromTree(listTree), listArray);
        if not Result then
          Log.Error('Некорректно копируется элемент из пустого в пустой список');
      end
      else
    		Log.Error('Не найден список: "' + LISTPATH2 + '"');
      CollapseTreeInNavigator(LISTPATH1);
    end
    else
			Log.Error('Не найден документ: "' + DOCNAME + '"');
  end
  else
		Log.Error('Не найден список: "' + LISTPATH1 + '"');
  GoToMainMenu;
end;


{
HLTC72.21: Копирование между списками
	HLTC72.21.5: Проверить копирование элементов, имеющих вложения (проверить как 
  в развёрнутом, так и в свёрнутом состоянии)
}     
function  HLTC72_21_5_Execute(var  current_state: OleVariant): OleVariant;
const
  DOCNAME = 'Уголовный кодекс*N 63-ФЗ*';
var 
  rubricatorTree;
  listTree;
	listArray: array [0..1] of String;
  LISTPATH1, LISTPATH2;
begin
  LISTPATH1 := PNAV + '\Основы государственно-правового устройства\Порядок организации и проведения массовых мероприятий';
  LISTPATH2 := PNAV + '\Основы государственно-правового устройства\Государственный язык, языки народов Российской Федерации';

	listArray[0] := DOCNAME;
  listArray[1] := 'Статья 149*';
 
	Result := false; 
  rubricatorTree := OpenMenuTab;
  //переходим из плоского классификатора на ветку рубрикатора: 
  if common.Position_Internal(rubricatorTree, LISTPATH1) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
    if common.Position_by_Text(listTree, DOCNAME, false, true) then
    begin
      CopyToClipboard(nil, '', 'IsCleanClipboard := false');
      rubricatorTree := OpenMenuTab;
      if common.Position_Internal(rubricatorTree, LISTPATH2) then
  	  begin
      	Sys.Keys('[Enter]');
      	listTree.SetFocus;

        PasteFromClipboard(listTree);
  			Result := Position_Internal(listTree, listArray[0] + '\*' + listArray[1], DELIM_CHAR, true);
        if not Result then
          Log.Error('Не найден вставляемый документ в пустой список: "' + listArray[0] + '\' + listArray[1] + '"');
      end
      else
    		Log.Error('Не найден список: "' + LISTPATH2 + '"');
      CollapseTreeInNavigator(LISTPATH1);
    end
    else
			Log.Error('Не найден документ: "' + DOCNAME + '"');
  end
  else
		Log.Error('Не найден список: "' + LISTPATH1 + '"');
  GoToMainMenu;
end;

{
HLTC72.21: Копирование между списками
	HLTC72.21.7: Проверить копирование большого списка(построить список всех 
  документов по пустой КЗ)
}     
function  HLTC72_21_7_Execute(var  current_state: OleVariant): OleVariant;
var 
  rubricatorTree;
  listTree;
  docsName;
  LISTPATH1;
begin
	LISTPATH1 := LIST_RUBR_MAIN + '\Порядок организации и проведения массовых мероприятий';
  //
	Result := false; 
  //строим список всех документов и копируем его в буфер
  GetListOfAllDocuments;
  listTree := GetList;
  docsName :=
    [    
    ([FL_NUMBER_BIG, IntToStr(common.CountElementInList(listTree))])
    ];
  CopyToClipboard(listTree, 'ALL','HowToCopy:=mainmenu;IsCleanClipboard := false');
  BuiltIn.Delay(Options.Run.Timeout div 3);
  rubricatorTree := OpenMenuTab;
  //переходим из плоского классификатора на ветку рубрикатора:
  if (common.Position_Internal(rubricatorTree, LISTPATH1)) then
  begin
		Sys.Keys('[Enter]');
    PasteFromClipboard(listTree, 'IsCleanClipboard:=true');
    Result := FindInList(docsName);
    if not Result then
      Log.Error('Некорректно копируется список всех документов в непустой список');
    CollapseTreeInNavigator(LISTPATH1);
  end
  else
		Log.Error('Не найден список: "' + LISTPATH1 + '"');
  GoToMainMenu;
end;

{
  HLTC72.24.7.1: Размер экспортируемого списка ограничен 10000 элементами, если элементов списка больше, то выдаётся сообщение:
    "Список состоит из более чем 10000 документов, сохранение списка невозможно!"
}
function  HLTC72_24_7_1_Execute(var  current_state: OleVariant): OleVariant;
const
  LIST_NAME = 'HLTC72_24_7_1';
begin  
try
	Result := true;
  if not IsExists(GetListOfAllDocuments) then
    Raise('Не получилось построить список всех документов!');
  if SaveDocToFile(GetList, IncludeTrailingBackslash(GetTempDirectory) + LIST_NAME) then
    Raise('Предупреждения не было, получилось сохранить в файл список всех документов!');
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenu;
end;

{
  HLTC72.24.7.1.1.1: Проверить работу чекбокса, если он взведён – ограничение должно сниматься и наоборот.
}
function  HLTC72_24_7_1_1_1_Execute(var  current_state: OleVariant): OleVariant;
const
  LIST_NAME = 'HLTC72_24_7_1_1_1';
begin  
try
  try
  	Result := true;
    if not SetSettings([ (['СПИСКИ ДОКУМЕНТОВ', 'ЭКСПОРТИРОВАТЬ СПИСКИ ПОЛНОСТЬЮ [CHECKBOX]', true]) ]) then
      Raise('Не получилось поставить чекбокс в настройках "СПИСКИ ДОКУМЕНТОВ\ЭКСПОРТИРОВАТЬ СПИСКИ ПОЛНОСТЬЮ [CHECKBOX]"');
    if not IsExists(GetListOfAllDocuments) then
      Raise('Не получилось построить список всех документов!');
    if not SaveDocToFile(GetList, IncludeTrailingBackslash(GetTempDirectory) + LIST_NAME) then
      Raise('Не получилось сохранить в файл список всех документов при выставленном !');
  finally
    SetDefaultSettings;
    GoToMainMenu;  
  end;    
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
end;

{
HLTC72.25: Синхронный просмотр списка и документа
	HLTC72.25.1: Открыть список, включить режим синхронного просмотра, походить по 
    1, 2, 4, последнему элементам списка и проверить, что одновременно отображается 
    список и текст документа, который является текущим в списке.
  HLTC72.25.8.5: Аннотаций. Режим включается автоматически, если у документа есть аннотация.  
}     
function  HLTC72_25_1_Execute(var  current_state: OleVariant): OleVariant;
const
  COUNTCHECK = 4;
var 
  i;
  listTree;
  sStr, currentListElem: String;
  LISTPATH1;
begin
  LISTPATH1 := LIST_ALLCODES;
   
	Result := true;
  if OpenEtalonList(LISTPATH1) then
  begin
    listTree := GetList;
    for i:= 1 to COUNTCHECK do
    begin
      currentListElem := Utilities.AnsiLowerCase(common.GetWindowText(ListTree.Handle));
      ShowSynchroView;
              
      if i = COUNTCHECK then //Гражданский кодекс
      begin 
        //проверка автопереключения на аннотацию
        sStr := Utilities.AnsiLowerCase(CopyToClipboard(GetFromSynchroView('ТЕКСТ АННОТАЦИИ'), 'ALL'));
        Result := (sStr <> '') and StringCompare('*Аннотация к Гражданскому кодексу*', sStr);
      end
      else
      begin
        sStr := Utilities.AnsiLowerCase(CopyToClipboard(GetEditorInSynchroView,'ПЕРВАЯ СТРОКА В ДОКУМЕНТЕ'));
        Result := (sStr <> '') and StringCompare(sStr+'*', currentListElem);      
      end;
      if not Result then
      	Log.Error('Текущий элемент списка: "' + currentListElem + '", не соответствует документу в окне синхронного просмотра');
      listTree.SetFocus;
      if i = COUNTCHECK-1 then Sys.Keys('[End]') else Sys.Keys('[Down]');
    end;
  end
  else
  begin
		Log.Error('Не получилось открыть список: "' + LISTPATH1 + '"');
  	Result := false;     
  end;
  GoToMainMenu;
end;

{
HLTC72.25: Синхронный просмотр списка и документа
	HLTC72.25.2: Включить режим просмотра - перейти на другой элемент - выключить 
  - перейти на другой элемент - включить - выключить.
  HLTC72.25.5: Проверить, что режим синхронного просмотра завершается, когда:
  	HLTC72.25.5.1: Напрямую отказываются от этого режима, изменив закладку на другую
}     
function  HLTC72_25_2_Execute(var  current_state: OleVariant): OleVariant;
var 
  listTree;
  sStr, currentListElem: String;
  LISTPATH1;
begin
	Result := false;
  LISTPATH1 := LIST_ALLCODES;
   
  if OpenEtalonList(LISTPATH1) then
  begin
    listTree := GetList;
    currentListElem := Utilities.AnsiLowerCase(common.GetWindowText(ListTree.Handle));
    ShowSynchroView;
    sStr := Utilities.AnsiLowerCase(CopyToClipboard(GetEditorInSynchroView, 'ПЕРВАЯ СТРОКА В ДОКУМЕНТЕ'));
    Result := (sStr <> '') and StringCompare(sStr + '*', currentListElem);
    if not Result then
    	Log.Error('Текущий элемент списка: "' + currentListElem + '", не соответствует документу в окне синхронного просмотра, первой строке в документе: "' + sStr + '"');
    //Скрываем синхр. просмотр на след. документе
    ListTree.SetFocus;
		Sys.Keys('[Down]');        
    ShowSynchroView(True);
    if (GetEditorInSynchroView.Exists and GetEditorInSynchroView.Visible) then
    begin
      Result := false;
    	Log.Error('Окно синхронного просмотра не закрылось');    
    end;

    //Открываем синхр. просмотр на след. документе
    ListTree.SetFocus;
		Sys.Keys('[Down]');  
    currentListElem := Utilities.AnsiLowerCase(common.GetWindowText(ListTree.Handle));
    ShowSynchroView;
    sStr := Utilities.AnsiLowerCase(CopyToClipboard(GetEditorInSynchroView, 'ПЕРВАЯ СТРОКА В ДОКУМЕНТЕ'));
    if not ((sStr <> '') and StringCompare(sStr+'*', currentListElem)) then
      Result := ErrorResult('Текущий элемент списка: "' + currentListElem + '", не соответствует документу в окне синхронного просмотра, первой строке в документе: "' + sStr + '"');

    //Скрываем синхр. просмотр на текущем документе
    ShowSynchroView(True); 
    if (GetEditorInSynchroView.Exists and GetEditorInSynchroView.Visible) then
    begin
      Result := false;
    	Log.Error('Окно синхронного просмотра не закрылось');
    end;
  end
  else
		Log.Error('Не найден список: "' + LISTPATH1 + '"');
  GoToMainMenu;
end;

{
  HLTC72.25.3.1: Проверить, переход из синхронного просмотра документа по внешней гиперссылке
}
function  HLTC72_25_3_1_Execute(var  current_state: OleVariant): OleVariant;
const
  DOCNAME = 'Конституция*';
  LINKNAME = 'минимальный размер оплаты труда';
  PARAGRAPH_NAME = '*ГАРАНТ*(информация приведена по состоянию на 2*';
var 
  text;
begin
try
	Result := true;
  if not OpenObjectFromFolder(LIST_MAIN, OpenMenuTab) then
    Raise('Не получилось открыть "' + LIST_MAIN + '"');
  if not Position_Internal(GetList, DOCNAME, DELIM_CHAR, true) then
    Raise('Не получилось спозиционироваться на документе "' + DOCNAME + '"');
  if not IsExists(OpenInSynhroView('ТЕКСТ ДОКУМЕНТА')) then
    Raise('Не получилось открыть "ТЕКСТ ДОКУМЕНТА" в синхронном просмотре');
  if not ClickByHyperLink(GetEditorInSynchroView, LINKNAME) then
    Raise('Не получилось кликнуть по ссылке "' + LINKNAME + '" в документе синхронного просмотра');

  if not IsExists(GetEditor) then
    Raise('Текст документа не найден после перехода по внутренней гиперссылке "' + LINKNAME + '"');
  text := CopyToClipboard(GetEditor, 'СТРОКА В ДОКУМЕНТЕ');
  if not StringCompare(PARAGRAPH_NAME, text) then
    Raise('После перехода по ссылке "' + LINKNAME + '", попали в неправильную позицию: "' + text + '", ожидалось: "' + PARAGRAPH_NAME + '"');
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenu;
end;

{
  HLTC72.25.3.2: Проверить, переход из синхронного просмотра документа по внутренней гиперссылке
}
function  HLTC72_25_3_2_Execute(var  current_state: OleVariant): OleVariant;
const
  DOCNAME = 'Конституция*';
  LINKNAME = ' глав 1, 2 и 9 ';
  PARAGRAPH_NAME = 'Глава 1. Основы конституционного строя';
var 
  text;
begin
try
	Result := true;
  if not OpenObjectFromFolder(LIST_MAIN, OpenMenuTab) then
    Raise('Не получилось открыть "' + LIST_MAIN + '"');
  if not Position_Internal(GetList, DOCNAME, DELIM_CHAR, true) then
    Raise('Не получилось спозиционироваться на документе "' + DOCNAME + '"');
  if not IsExists(OpenInSynhroView('ТЕКСТ ДОКУМЕНТА')) then
    Raise('Не получилось открыть "ТЕКСТ ДОКУМЕНТА" в синхронном просмотре');
  if not ClickByHyperLink(GetEditorInSynchroView, LINKNAME) then
    Raise('Не получилось кликнуть по ссылке "' + LINKNAME + '" в документе синхронного просмотра');

  if not IsExists(GetEditor) then
    Raise('Текст документа не найден после перехода по внутренней гиперссылке "' + LINKNAME + '"');
  text := CopyToClipboard(GetEditor, 'СТРОКА В ДОКУМЕНТЕ');
  if not StringCompare(PARAGRAPH_NAME, text) then
    Raise('После перехода по ссылке "' + LINKNAME + '", попали в неправильную позицию: "' + text + '", ожидалось: "' + PARAGRAPH_NAME + '"');
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenu;
end;

{
HLTC72.25: Синхронный просмотр списка и документа
	HLTC72.25.5: Проверить, что режим синхронного просмотра завершается, когда:
  	HLTC72.25.5.2: Закрывают окно документа кнопкой <Х> во фрейме синхронного 
    просмотра  документа - верхний правый угол	
}     
function  HLTC72_25_5_2_Execute(var  current_state: OleVariant): OleVariant;
var 
  listTree;
  sStr, currentListElem: String;
  LISTPATH1;
begin
	Result := false;
  LISTPATH1 := LIST_ALLCODES;
   
  if OpenEtalonList(LISTPATH1) then
  begin
    listTree := GetList;
    currentListElem := Utilities.AnsiLowerCase(common.GetWindowText(ListTree.Handle));
    ShowSynchroView;
    sStr := Utilities.AnsiLowerCase(CopyToClipboard(GetEditorInSynchroView, 'ПЕРВАЯ СТРОКА В ДОКУМЕНТЕ'));
    Result := (sStr <> '') and StringCompare(sStr + '*', currentListElem);
    if not Result then
    	Log.Error('Текущий элемент списка: "' + currentListElem + '", не соответствует документу в окне синхронного просмотра, первой строке в документе: "' + sStr + '"');
    //Кликаем на закрыть окно
  	ClickToolbarButton(GetFromSynchroView('ТУЛБАР ВЕРХНИЙ ПРАВЫЙ'),'Закрыть');
    if (GetEditorInSynchroView.Exists and GetEditorInSynchroView.Visible) then
    begin
      Result := false;
    	Log.Error('Окно синхронного просмотра не закрылось');    
    end;
  end
  else
		Log.Error('Не найден список: "' + LISTPATH1 + '"');
  GoToMainMenu;
end;

{
HLTC72.25: Синхронный просмотр списка и документа
	HLTC72.25.5: Проверить, что режим синхронного просмотра завершается, когда:
  	HLTC72.25.5.3: Загружают в окно документа другой объект (при выполнении 
    навигации или выбора из папки)
}     
function  HLTC72_25_5_3_Execute(var  current_state: OleVariant): OleVariant;
var 
  rubricatorTree;
  listTree;
  LISTPATH1, LISTPATH2;
begin
	LISTPATH1 := LIST_RUBR_MAIN + '\Порядок организации и проведения массовых мероприятий';
  LISTPATH2 := LIST_RUBR_MAIN + '\Государственный язык, языки народов Российской Федерации';
  //
	Result := false;
  rubricatorTree := OpenMenuTab;
  if (common.Position_Internal(rubricatorTree, LISTPATH1)) then
  begin
		Sys.Keys('[Enter]');
    GetList.SetFocus;

    ShowSynchroView;
    GetEditorInSynchroView.SetFocus;

    //Открываем второй список
    rubricatorTree := OpenMenuTab;
    if (common.Position_Internal(rubricatorTree, LISTPATH2)) then
    begin
  		Sys.Keys('[Enter]');
      GetList.SetFocus;
      Result := not (GetEditorInSynchroView.Exists and GetEditorInSynchroView.Visible);
      if not Result then
      	Log.Error('Окно синхронного просмотра не закрылось');    
    end
    else
  		Log.Error('Не найден список: "' + LISTPATH2 + '"');
    CollapseTreeInNavigator(LISTPATH1);
  end
  else
		Log.Error('Не найден список: "' + LISTPATH1 + '"');
  GoToMainMenu;
end;

{
HLTC72.25: Синхронный просмотр списка и документа
	HLTC72.25.8: Проверить, что можно переключать режим синхронного просмотра на:
  	HLTC72.25.8.1: Синхронный просмотр справки далее последовательное переключение вкладок
    HLTC72.25.8.2: Синхронный просмотр Судебная практика
  	HLTC72.25.8.3: Синхронный просмотр Комментарии
    HLTC72.25.8.4: Синхронный просмотр атрибутов
}     
function  HLTC72_25_8_1_Execute(var  current_state: OleVariant): OleVariant;
const
  DOCNAME = 'Кодекс РСФСР об административных*';
var 
  w, rubricatorTree, listTree;
  LISTPATH1, currentListElem : String;
begin
	LISTPATH1 := LIST_RUBR_MAIN + '\Порядок организации и проведения массовых мероприятий';
  //
	Result := false;
  rubricatorTree := OpenMenuTab;
  if (common.Position_Internal(rubricatorTree, LISTPATH1)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
    if common.Position_by_Text(listTree, DOCNAME, false, true) then
    begin
      ShowSynchroView;
      currentListElem := CopyToClipboard(GetEditorInSynchroView, 'ПЕРВАЯ СТРОКА В ДОКУМЕНТЕ');
      Result := StringCompare(DOCNAME, currentListElem);
      if not Result then
      	Log.Error('Текущий элемент списка: "' + DOCNAME + '", не соответствует документу в окне синхронного просмотра, первой строке в документе: "' + currentListElem + '"');
        
      ClickToolbarButton(GetFromSynchroView('ТУЛБАР "СИНХРОННЫЙ ПРОСМОТР"'), 'Справка к документу');
      w :=GetFromSynchroView('СПРАВКА К ДОКУМЕНТУ');
      if not (IsExists(w) and w.Visible)  then
      	Result := ErrorResult('Не получилось открыть СПРАВКА ДОКУМЕНТА');

      ClickToolbarButton(GetFromSynchroView('ТУЛБАР "СИНХРОННЫЙ ПРОСМОТР"'), 'Судебная практика*');
      w :=GetFromSynchroView('СПИСОК ССЫЛОК НА ДОКУМЕНТ');
      if not (IsExists(w) and w.Visible)  then
        Result := ErrorResult('Не получилось открыть СУДЕБНАЯ ПРАКТИКА');

      ClickToolbarButton(GetFromSynchroView('ТУЛБАР "СИНХРОННЫЙ ПРОСМОТР"'), 'Комментарии*');
      w := GetFromSynchroView('СПИСОК ССЫЛОК НА ДОКУМЕНТ');
      if not (IsExists(w) and w.Visible)  then
        Result := ErrorResult('Не получилось открыть КОММЕНТАРИИ');
            
      ClickToolbarButton(GetFromSynchroView('ТУЛБАР "СИНХРОННЫЙ ПРОСМОТР"'), 'Информация о документе');
      w :=GetFromSynchroView('АТТРИБУТЫ');
      if not (IsExists(w) and w.Visible)  then
        Result := ErrorResult('Не получилось открыть ИНФОРМАЦИЯ О ДОКУМЕНТЕ');
    end
    else
      Log.Error('Не найден документ: "' + DOCNAME + '"');
      
    CollapseTreeInNavigator(LISTPATH1);
  end
  else
		Log.Error('Не найден список: "' + LISTPATH1 + '"');
  GoToMainMenu;
end;

{
HLTC72.25: Синхронный просмотр списка и документа
	HLTC72.25.8: Проверить, что можно переключать режим синхронного просмотра на:
  	HLTC72.25.8.2: Синхронный просмотр Судебная практика
}     
function  HLTC72_25_8_2_Execute(var  current_state: OleVariant): OleVariant;
const
  DOCNAME = 'Уголовный кодекс*';
  NUM_OFDOCS = 1;
var 
  w, rubricatorTree, listTree, realNum;
  LISTPATH1, currentListElem: String;
begin
	LISTPATH1 := LIST_RUBR_MAIN + '\Порядок организации и проведения массовых мероприятий';
  //
	Result := false;
  rubricatorTree := OpenMenuTab;
  if (common.Position_Internal(rubricatorTree, LISTPATH1)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
    if common.Position_by_Text(listTree, DOCNAME, false, true) then
    begin
      ShowSynchroView;
      currentListElem := CopyToClipboard(GetEditorInSynchroView,'ПЕРВАЯ СТРОКА В ДОКУМЕНТЕ');
      Result := StringCompare(DOCNAME, currentListElem);
      if not Result then
      	Log.Error('Текущий элемент списка: "' + DOCNAME + '", не соответствует документу в окне синхронного просмотра, первой строке в документе: "' + currentListElem + '"');

      ClickToolbarButton(GetFromSynchroView('ТУЛБАР "СИНХРОННЫЙ ПРОСМОТР"'), 'Судебная практика*');
      w :=GetFromSynchroView('СПИСОК ССЫЛОК НА ДОКУМЕНТ');
      realNum := common.CountElementInList(w);
      if not (w.Exists and w.Visible and realNum = NUM_OFDOCS) then
      	Result := ErrorResult('Не получилось открыть СПИСОК ССЫЛОК НА ДОКУМЕНТ (Судебная практика) или неверное количество корреспондентов. Должно быть ' +
                  IntToStr(NUM_OFDOCS) + ', есть ' + IntToStr(realNum));
    end
    else
      Log.Error('Не найден документ: "' + DOCNAME + '"');
    CollapseTreeInNavigator(LISTPATH1);
  end
  else
		Log.Error('Не найден список: "' + LISTPATH1 + '"');
  GoToMainMenu;
end;

{
HLTC72.25: Синхронный просмотр списка и документа
	HLTC72.25.8: Проверить, что можно переключать режим синхронного просмотра на:
  	HLTC72.25.8.3: Синхронный просмотр Комментарии
}     
function  HLTC72_25_8_3_Execute(var  current_state: OleVariant): OleVariant;
const
  DOCNAME = 'Уголовный кодекс*N 63-ФЗ*';
var 
  w, listTree;
  LISTPATH1: String;
begin
try
	LISTPATH1 := LIST_RUBR_MAIN + '\Порядок организации и проведения массовых мероприятий';
  //
	Result := true;

  if not common.Position_Internal(OpenMenuTab, LISTPATH1) then
    Raise('Не найден список: "' + LISTPATH1 + '"');  
	Sys.Keys('[Enter]');

  listTree := GetList;
  listTree.SetFocus;
  if not common.Position_by_Text(listTree, DOCNAME, false, true) then
    Raise('Не найден документ: "' + DOCNAME + '"');  

  ShowSynchroView;
  ClickToolbarButton(GetFromSynchroView('ТУЛБАР "СИНХРОННЫЙ ПРОСМОТР"'), 'Комментарии*');
  w := GetFromSynchroView('СПИСОК ССЫЛОК НА ДОКУМЕНТ');    
  if not IsExists(w) then
  	Raise('Не получилось открыть СПИСОК ССЫЛОК НА ДОКУМЕНТ (Комментарии)');
except
  Result := false;  
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
  CommonExceptionHandler;
end;
  GoToMainMenu;
end;

{
HLTC72.25: Синхронный просмотр списка и документа
	HLTC72.25.8: Проверить, что можно переключать режим синхронного просмотра на:
  	HLTC72.25.8.4: Синхронный просмотр атрибутов
}     
function  HLTC72_25_8_4_Execute(var  current_state: OleVariant): OleVariant;
const
  DOCNAME = 'Уголовный кодекс*N 63-ФЗ*';
var 
  w,rubricatorTree;
  listTree;
  currentListElem: String;
  LISTPATH1;
begin
	LISTPATH1 := LIST_RUBR_MAIN + '\Порядок организации и проведения массовых мероприятий';
  //
	Result := false;
  rubricatorTree := OpenMenuTab;
  if (common.Position_Internal(rubricatorTree, LISTPATH1)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
    if common.Position_by_Text(listTree, DOCNAME, false, true) then
    begin
      currentListElem := Utilities.AnsiLowerCase(common.GetWindowText(ListTree.Handle));

      ShowSynchroView;
      GetEditorInSynchroView.SetFocus;

      ClickToolbarButton(GetFromSynchroView('ТУЛБАР "СИНХРОННЫЙ ПРОСМОТР"'), 'Информация о документе');
      w :=GetFromSynchroView('АТТРИБУТЫ');
      w.SetFocus;
      Result := StringCompare('Имя' + '*' + DOCNAME+'*', CopyToClipboard(w));
      if not Result then
       	Log.Error('ИНФОРМАЦИЯ О ДОКУМЕНТЕ не содержит название документа или отображается некорректно', CopyToClipboard(w));
      if not (IsExists(w) and w.Visible)  then
      begin
      	Result := false;
       	Log.Error('Не получилось открыть ИНФОРМАЦИЮ О ДОКУМЕНТЕ');
      end;
    end
    else
      Log.Error('Не найден документ: "' + DOCNAME + '"');

    CollapseTreeInNavigator(LISTPATH1);
  end
  else
		Log.Error('Не найден список: "' + LISTPATH1 + '"');
  GoToMainMenu;
end;

{
HLTC72.25: Синхронный просмотр списка и документа
	HLTC72.25.9: Проверить открытие СКР, открытие в новом окне из синхронного
  просмотра (специальные кнопки)
}
function  HLTC72_25_9_Execute(var  current_state: OleVariant): OleVariant;
const
  DOCNAME = 'Уголовный кодекс*N 63-ФЗ*';
var 
  LISTPATH1; 
  i, w, w1;
begin
try
	Result := true;
	LISTPATH1 := LIST_RUBR_MAIN + '\Порядок организации и проведения массовых мероприятий';

  if not common.Position_Internal(OpenMenuTab, LISTPATH1) then
		Raise('Не найден список: "' + LISTPATH1 + '"');  
	Sys.Keys('[Enter]');
  if not common.Position_by_Text(GetList, DOCNAME, false, true) then
    Raise('Не получилось открыть документ: "' + DOCNAME + '"');

  ShowSynchroView;
  GetEditorInSynchroView.SetFocus;

  ClickToolbarButton(GetFromSynchroView('ТУЛБАР "СИНХРОННЫЙ ПРОСМОТР"'), 'Комментарии*');
  w := GetFromSynchroView('СПИСОК ССЫЛОК НА ДОКУМЕНТ');
  if not IsExists(w) then
    Raise('Не получилось открыть СПИСОК ССЫЛОК НА ДОКУМЕНТ');

  if not ClickToolbarButton(GetFromSynchroView('ТУЛБАР ВЕРХНИЙ ПРАВЫЙ'), 'Открыть в новом окне') then
    Raise('Не получилось кликнуть по кнопке "Открыть в новом окне"');

  for i := 1 to 2 do
  begin
    w1 := GetMainWindow('ContainerIndex:=' + IntToStr(i));
    if not IsExists(w1) then
      Raise('Не найдено окно с ContainerIndex:=' + IntToStr(i));
    w := GetFromList('СПИСОК ДОКУМЕНТОВ', nil, w1);
    if not IsExists(w) then    
      Raise('Не найден Список документов в окне с ContainerIndex:=' + IntToStr(i));
  end;
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  CloseF1Shell;
end;

{
  HLTC72.25.10: Проверить, что при синхронном просмотре списка информация в статус-баре соответствует тому объекту, 
    который сейчас сфокусирован (когда фокус в основной области в списке – приводится информация для списка, 
    когда фокус в дополнительной области – информация приводится для загруженного в нее объекта (документа, СКР и т.д.)
}
function  HLTC72_25_10_Execute(var  current_state: OleVariant): OleVariant;
const
  DOCNAME = 'Договор "О создании Союзного государства"*';
  TEXT = 'Документ*1*1*1*0*';
var 
  st_text;
begin
try
	Result := true;
  if not OpenObjectFromFolder(LIST_MAIN, OpenMenuTab) then
    Raise('Не получилось открыть "' + LIST_MAIN + '"');
  if not Position_Internal(GetList, DOCNAME, DELIM_CHAR, true) then
    Raise('Не получилось спозиционироваться на документе "' + DOCNAME + '"');
  if not IsExists(OpenInSynhroView('СПИСОК ССЫЛОК НА ДОКУМЕНТ')) then
    Raise('Не получилось открыть "СПИСОК ССЫЛОК НА ДОКУМЕНТ" в синхронном просмотре');
  st_text := common.GetWindowText(GetFromMainWindow('СТАТУСБАР'));
  if not StringCompare(TEXT, st_text) then
   Raise('Содержимое статусбара, когда фокус в списке синхронного просмотра отличается: "' + st_text + '", ожидалось: "' + TEXT + '"');
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenu;
end;

{
HLTC72.25: Синхронный просмотр списка и документа
	HLTC72.25.12: Ситуации с Пустым списком при синхронном просмотре
		HLTC72.25.12.1: Открываем список, включаем синхронный просмотр, удаляем все 
    элементы из списка, щёлкаем два раза мышой в окне синхронного просмотра  - 
    не должно упасть.
    HLTC72.25.12.2: В пустом списке при открытии закладки Синхронного просмотра 
    в окне Синхронного просмотра показывается пустое окно без текста.  
}     
function  HLTC72_25_12_1_Execute(var  current_state: OleVariant): OleVariant;
var 
  rubricatorTree;
  listTree, tnscEditorWindow;
  sStr: String;
  LISTPATH1;
begin
	LISTPATH1 := LIST_RUBR_MAIN + '\Порядок организации и проведения массовых мероприятий';

	Result := false;
  rubricatorTree := OpenMenuTab;
  if common.Position_Internal(rubricatorTree, LISTPATH1) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
	  Sys.Keys('^a');
   	DelWithConfirm;
                 
    ShowSynchroView;
    sStr := CopyToClipboard(GetEditorInSynchroView,'ПЕРВАЯ СТРОКА В ДОКУМЕНТЕ');
    Result := sStr = '';
    if not Result then
    	Log.Error('В окне синхронного просмотра найден текст: "' + sStr + '"');

    tnscEditorWindow := GetEditorInSynchroView;
    if IsExists(tnscEditorWindow) then
    begin
    	tnscEditorWindow.Click(tnscEditorWindow.Width div 2, tnscEditorWindow.Height div 2);
      tnscEditorWindow.DblClick(tnscEditorWindow.Width div 2, tnscEditorWindow.Height div 2);
    end;
    if not (IsExists(tnscEditorWindow) and tnscEditorWindow.Focused) then
      Result := ErrorResult('После двойного клика окно синхронного просмотра не в фокусе или не найдено!');
    CollapseTreeInNavigator(LISTPATH1);
  end
  else
		Log.Error('Не найден список: "' + LISTPATH1 + '"');
  GoToMainMenu;
end;

{
HLTC72.25: Синхронный просмотр списка и документа
	HLTC72.25.12: Ситуации с Пустым списком при синхронном просмотре
		HLTC72.25.12.3: В пустом списке при открытии закладки Синхронного просмотра 
    не должны работать кнопки <открыть в новом окне> и <открыть в текущем окне>:
    	HLTC72.25.12.3.1: Проверить, когда окно синхронного просмотра находится в 
      режиме показа текста документа
}
function  HLTC72_25_12_3_1_Execute(var  current_state: OleVariant): OleVariant;
var 
  rubricatorTree, listTree, i;
  b_new, b_this: boolean;
begin
  //
	Result := false;
  rubricatorTree := OpenMenuTab;
  if (common.Position_Internal(rubricatorTree, LIST_MAIN)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
    Sys.Keys('^a');
  	DelWithConfirm;
   
    ShowSynchroView;
    //Проверяем кнопку ОТКРЫТЬ В ТЕКУЩЕМ ОКНЕ
    if ClickToolbarButton(GetFromSynchroView('ТУЛБАР ВЕРХНИЙ ПРАВЫЙ'),'Открыть в текущем окне') then
    begin
      b_this := IsExists(GetList);
      if not b_this then
        Log.Error('По нажатию кнопки "Открыть в текущем окне" в пустом списке что-то открылось!');
    end
    else
      Log.Error('Кнопка "Открыть в текущем окне" НЕ активна');
    
    //Проверяем кнопку ОТКРЫТЬ В НОВОМ ОКНЕ
    b_new := true;
    if b_this then
    begin 
      if ClickToolbarButton(GetFromSynchroView('ТУЛБАР ВЕРХНИЙ ПРАВЫЙ'),'Открыть в новом окне') then
      begin
        for i:=1 to 2 do
          b_new := b_new and IsExists(GetF1ShellProcess.WaitWindow(GetMainWindow.WndClass, '*',i,Options.Run.Timeout div 15));
        if b_new then
        begin
          Log.Error('По нажатию кнопки "Открыть в новом окне" в пустом списке, открылось новое окно!');
          GetMainWindow.Close;
        end;
      end
      else    
        Log.Error('Кнопка "Открыть в новом окне" НЕ активна');    
    end;
    
    Result := (not b_new) and (b_this);
    CollapseTreeInNavigator(LIST_MAIN);
  end
  else
		Log.Error('Не найден список: "' + LIST_MAIN + '"');
  GoToMainMenu;
end;

{
HLTC72.25: Синхронный просмотр списка и документа
	HLTC72.25.12: Ситуации с Пустым списком при синхронном просмотре
		HLTC72.25.12.3: В пустом списке при открытии закладки Синхронного просмотра 
    не должны работать кнопки <открыть в новом окне> и <открыть в текущем окне>:
			HLTC72.25.12.3.2: Проверить, когда окно синхронного просмотра находится 
      в режиме показа СКР
}     
function  HLTC72_25_12_3_2_Execute(var  current_state: OleVariant): OleVariant;
var 
  rubricatorTree, listTree, i;
  b_new, b_this: boolean;
begin
  //
	Result := false;
  rubricatorTree := OpenMenuTab;
  if (common.Position_Internal(rubricatorTree, LIST_MAIN)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    ShowSynchroView;
    //СКР
    ClickToolbarButton(GetFromSynchroView('ТУЛБАР "СИНХРОННЫЙ ПРОСМОТР"'), 'Судебная практика*');
    if IsExists(GetFromSynchroView('СПИСОК ССЫЛОК НА ДОКУМЕНТ')) then
    begin
      listTree.SetFocus;
      Sys.Keys('^a');
    	DelWithConfirm;

      //Проверяем кнопку ОТКРЫТЬ В ТЕКУЩЕМ ОКНЕ
      if ClickToolbarButton(GetFromSynchroView('ТУЛБАР ВЕРХНИЙ ПРАВЫЙ'),'Открыть в текущем окне') then
      begin
        b_this := IsExists(GetList);
        if not b_this then
          Log.Error('По нажатию кнопки "Открыть в текущем окне" в пустом списке что-то открылось!');
      end
      else
        Log.Error('Кнопка "Открыть в текущем окне" НЕ активна');

      //Проверяем кнопку ОТКРЫТЬ В НОВОМ ОКНЕ
      if ClickToolbarButton(GetFromSynchroView('ТУЛБАР ВЕРХНИЙ ПРАВЫЙ'),'Открыть в новом окне') then
      begin
        b_new := true;
        for i:=1 to 2 do
          b_new := b_new and IsExists(GetF1ShellProcess.WaitWindow(GetMainWindow.WndClass, '*',i,Options.Run.Timeout div 15));
        if b_new then
        begin
          Log.Error('По нажатию кнопки "Открыть в новом окне" в пустом списке, открылось новое окно!');
          GetMainWindow.Close;
        end;
      end
      else
        Log.Error('Кнопка "Открыть в новом окне" НЕ активна');
      //
      Result := (not b_new) and (b_this);
    end
    else
     	Log.Error('Не получилось открыть СКР "Судебная практика" для документа');
    CollapseTreeInNavigator(LIST_MAIN);
  end
  else
		Log.Error('Не найден список: "' + LIST_MAIN + '"');
  GoToMainMenu;
end;

{
  HLTC72.25.12.4: Открыть список (непустой), просмотреть в синхронном просмотре СКР к документу из списка.
    Удалить все элементы списка. Проверить, что в окне синхронного просмотра будет пустой список.
}
function  HLTC72_25_12_4_Execute(var  current_state: OleVariant): OleVariant;
const
  DOCNAME = 'Конституция*';
begin
try
	Result := true;
  if not OpenObjectFromFolder(LIST_MAIN, OpenMenuTab) then
    Raise('Не получилось открыть "' + LIST_MAIN + '"');
  if not Position_Internal(GetList, DOCNAME, DELIM_CHAR, true) then
    Raise('Не получилось спозиционироваться на документе "' + DOCNAME + '"');
  if not IsExists(OpenInSynhroView('СПИСОК ССЫЛОК НА ДОКУМЕНТ')) then
    Raise('Не получилось открыть "СПИСОК ССЫЛОК НА ДОКУМЕНТ" в синхронном просмотре');
  
  if not PressKeyWithCheck(['^a'], GetFromSynchroView('СПИСОК')) then
    Raise('Не получилось "Выделить все" в списке синхронного просмотра');
  DelWithConfirm(false, GetFromSynchroView('СПИСОК'));    
  if not IsExists(GetFromSynchroView('ПУСТОЙ СПИСОК ДОКУМЕНТОВ')) then
    Raise('Не найден ПУСТОЙ СПИСОК ДОКУМЕНТОВ в синхронном просмотре');
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenu;
end;

{
  HLTC72.34.1: Для внутренней версии должны быть доступны следующие пункты меню Анализ:
    HLTC72.34.1.1: Документы без Class
    HLTC72.34.1.2: Документы без KW
    HLTC72.34.1.3: Документы с Vanonsed, но без Vincluded
}
function  HLTC72_34_1_Execute(var  current_state: OleVariant): OleVariant;
var
  i, items;
begin
try
	Result := true;
  items := [
            'Документы без Class', 
            'Документы без KW', 
            'Документы с Vanonsed, но без Vincluded'
  ];

  for i := VarArrayLowBound(items, 1) to VarArrayHighBound(items, 1) do
  begin
    if not GoToMainMenu then
      Raise('Не получилось перейти в ОМ');
    if not ClickByMainMenuItem('Анализ\' + items[i]) then
      Raise('Не получилось кликнуть по пункту главного меню "Анализ\' + items[i] + '"');
    if not IsExists(GetList) then
      Raise('Не найден список после вызова "Анализ\' + items[i] + '"');
  end; 
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenu;
end;

{
HLTC72.25: Синхронный просмотр списка и документа
	HLTC72.35: Проверить правильность формирования имён элементов в списке:
		HLTC72.35.1: Если это документ без вхождений (нет вложенных элементов), то имя в списке - ИМЯ ДОКУМЕНТА ИЗ БАЗЫ (должно совпадать с параметром <Имя> в атрибутах этого документа).
}
function  HLTC72_35_1_Execute(var  current_state: OleVariant): OleVariant;
const
  DOCNAME = 'Договор "О создании Союзного государства" (Москва, 8 декабря 1999 г.)';
var 
  w,rubricatorTree;
  listTree;
begin
	Result := false;
  rubricatorTree := OpenMenuTab;
  if (common.Position_Internal(rubricatorTree, LIST_MAIN)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
    if (common.Position_by_Text(listTree, DOCNAME)) then
    begin
      ShowSynchroView;
      GetEditorInSynchroView.SetFocus;
      //
      ClickToolbarButton(GetFromSynchroView('ТУЛБАР "СИНХРОННЫЙ ПРОСМОТР"'), 'Информация о документе');
      w :=GetFromSynchroView('АТТРИБУТЫ');
      if (w.Exists and w.Visible) then
      begin
        w.SetFocus;
        if (common.Position_by_Text(w, 'Имя')) then
        begin
        	Sys.Keys('[Right]');
          Result := (common.GetWindowText(w.Handle) = DOCNAME);
        end
        else
        	Log.Error('Не найден элемент в ИНФОРМАЦИЯ О ДОКУМЕНТЕ : "' + 'Имя' + '"');
      end
      else
       	Log.Error('Не получилось открыть вкладку ИНФОРМАЦИЮ О ДОКУМЕНТЕ');
    end
    else
  		Log.Error('Не найден документ: "' + DOCNAME + '"');
    if not Result then
     	Log.Error('Имя документа "' + DOCNAME + '" в ИНФОРМАЦИЯ О ДОКУМЕНТЕ отличается от имени в списке');
    CollapseTreeInNavigator(LIST_MAIN);
  end
  else
		Log.Error('Не найден список: "' + LIST_MAIN + '"');
  GoToMainMenu;
end;

{
HLTC72.25: Синхронный просмотр списка и документа
	HLTC72.35: Проверить правильность формирования имён элементов в списке:
		HLTC72.35.2: Если это группирующий элемент, т.е с вхожденяими - ИМЯ ДОКУМЕНТА 
    ИЗ БАЗЫ (должно совпадать с параметром <Имя> в атрибутах этого документа).
}     
function  HLTC72_35_2_Execute(var  current_state: OleVariant): OleVariant;
const
  DOCNAME = 'Конституция Российской Федерации (принята на всенародном голосовании 12 декабря 1993 г.)';
var 
  w,rubricatorTree;
  listTree;
begin
	Result := false;
  rubricatorTree := OpenMenuTab;
  if (common.Position_Internal(rubricatorTree, LIST_MAIN)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
    if (common.Position_by_Text(listTree, DOCNAME)) then
    begin
      //Включаем синхронный просмотр
      ShowSynchroView;
      GetEditorInSynchroView.SetFocus;
      //
      ClickToolbarButton(GetFromSynchroView('ТУЛБАР "СИНХРОННЫЙ ПРОСМОТР"'), 'Информация о документе');
      w :=GetFromSynchroView('АТТРИБУТЫ');
      if IsExists(w) and w.Visible then
        begin
          w.SetFocus;
          if (common.Position_by_Text(w, 'Имя')) then
          begin
          	Sys.Keys('[Right]');           
            Result := (common.GetWindowText(w.Handle) = DOCNAME);
          end
          else
          	Log.Error('Не найден элемент в ИНФОРМАЦИЯ О ДОКУМЕНТЕ : "' + 'Имя' + '"');
        end
        else
         	Log.Error('Не получилось открыть вкладку ИНФОРМАЦИЮ О ДОКУМЕНТЕ');
    end
    else
      Log.Error('Не найден документ: "' + DOCNAME + '"');

    if not Result then
     	Log.Error('Имя документа в ИНФОРМАЦИЯ О ДОКУМЕНТЕ отличается от имени в списке');
    CollapseTreeInNavigator(LIST_MAIN);
  end
  else
		Log.Error('Не найден список: "' + LIST_MAIN + '"');
  GoToMainMenu;
end;

{
HLTC72.35: Проверить правильность формирования имён элементов в списке:
	HLTC72.35.3: Если это вхождение (ссылка на именованный саб) - ИМЯ САБА. 
  Например, в тестовой базе, если перейти по первой ветке классификатора до 
  списка, то пример можно найти у первого элемента (Конституция РФ):
     
   Конституция Российской Федерации (принята на всенародном голосовании 
   12 декабря 1993 г.)  
    Глава 1 
}     
function  HLTC72_35_3_Execute(var  current_state: OleVariant): OleVariant;
const
  DOCNAME = 'Конституция Российской Федерации (принята на всенародном голосовании 12 декабря 1993 г.)';
  DOCPATH = DOCNAME + '*\*Глава 1';
var 
  w,rubricatorTree;
  listTree;
begin
	Result := false;
  rubricatorTree := OpenMenuTab;
  if (common.Position_Internal(rubricatorTree, LIST_MAIN)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
    if (common.Position_Internal(listTree, DOCPATH, DELIM_CHAR, true)) then
    begin
      //Включаем синхронный просмотр
      ShowSynchroView;
      GetEditorInSynchroView.SetFocus;
      //
      ClickToolbarButton(GetFromSynchroView('ТУЛБАР "СИНХРОННЫЙ ПРОСМОТР"'), 'Информация о документе');
      w := GetFromSynchroView('АТТРИБУТЫ');
      if (w.Exists and w.Visible) then
        begin
          w.SetFocus;
          if (common.Position_by_Text(w, 'Имя')) then
          begin
          	Sys.Keys('[Right]');
            Result := (common.GetWindowText(w.Handle) = DOCNAME);
          end
          else
          	Log.Error('Не найден элемент в ИНФОРМАЦИЯ О ДОКУМЕНТЕ : "' + 'Имя' + '"');
        end
        else
         	Log.Error('Не получилось открыть вкладку ИНФОРМАЦИЮ О ДОКУМЕНТЕ');
    end
    else
  		Log.Error('Не найден документ с вложением,' + DOCPATH);
    if not Result then
     	Log.Error('Имя документа в ИНФОРМАЦИЯ О ДОКУМЕНТЕ отличается от имени в списке');
    CollapseTreeInNavigator(LIST_MAIN);
  end
  else
		Log.Error('Не найден список: "' + LIST_MAIN + '"');
  GoToMainMenu;
end;

{
HLTC72.25: Синхронный просмотр списка и документа
	HLTC72.35: Проверить правильность формирования имён элементов в списке:
    HLTC72.35.4: Если это вхождение (ссылка на НЕ именованный саб) - текст ("Вхождение N". N - номер вхождения (с единицы). Пример в тестовой базе: переходим в список по первой ветке классификатора к документу "Письмо департамента строительства Краснодарского края от 11 ноября 2003 г. N 07.6.04/3822...".
      У него должно быть 2 вхождения "Это блок 10" и "Вхождение 2".
}                   
function  HLTC72_35_4_Execute(var  current_state: OleVariant): OleVariant;
var 
  w,rubricatorTree;
  listTree;
  i:integer;
  docName : array[0..1] of string;
begin
  docName[0] := 'Письмо департамента строительства Краснодарского края от 11 ноября 2003 г. N 07.6.04/3822*\*Вхождение 2';
  docName[1] := 'Письмо департамента строительства Краснодарского края от 11 ноября 2003 г. N 07.6.04/3822*\*Это блок 10';
	Result := false;
  rubricatorTree := OpenMenuTab;
  if OpenObjectFromFolder(LIST_MAIN, rubricatorTree) then
  begin
    listTree := GetList;
    listTree.SetFocus;
  	Result := true;
    for i := 0 to 1 do
    begin                   
      if not common.Position_Internal(listTree, docName[i], DELIM_CHAR, true) then
       	Result := ErrorResult('Неправильное название документа с вложением в списке "'+docName[i]+'"');
   		Sys.Keys('[Home]');
    end;
    CollapseTreeInNavigator(LIST_MAIN);
  end
  else
		Log.Error('Не получилось открыть список: "' + LIST_MAIN + '"');
  GoToMainMenu;
end;

{
HLTC72.25: Синхронный просмотр списка и документа
	HLTC72.35: Проверить правильность формирования имён элементов в списке:
		HLTC72.35.5: Если это вхождение - САБ (БЛОК), вложенный в другой блок, то 
    имя элемента расширяется полным путем из блоков, в которых они лежат: в 
    тестовой базе в тестовой базе список
    Правовой навигатор\Бухгалтерский учет, аудит, статистическая отчетность\Аудит\Лицензирование аудиторской деятельности
    ДОКУМЕНТ 2002 с 10 командами NAME по 73 символа каждая. Это команда 1. ыыыыыыы1 Это команда 2. ыыыыыыыыыыыы ыыыыыыыыыыыы ыыыыыыыыыыыыыыы ы ыыыыыыы ыыыыыы2 Это команда 3. ыыыыыыыыыыыы ыыыыыыыыыыыы ыыыыыыыыыыыыыыы ы ыыыыыыы ыыыыыы3 Это команда 4. ыыыыыыыыыыыы ыыыыыыыыыыыы ыыыыыыыыыыыыыыы ы ыыыыыыы ыыыыыы4 Это команда 5. ыыыыыыыыыыыы ыыыыыыыыыыыы ыыыыыыыыыыыыыыы ы ыыыыыыы ыыыыыы5 Это команда 6. ыыыыыыыыыыыы ыыыыыыыыыыыы ыыыыыыыыыыыыыыы ы ыыыыыыы ыыыыыы6 Это команда 7. ыыыыыыыыыыыы ыыыыыыыыыыыы ыыыыыыыыыыыыыыы ы ыыыыыыы ыыыыыы7 Это команда 8. ыыыыыыыыыыыы ыыыыыыыыыыыы ыыыыыыыыыыыыыыы ы ыыыыыыы ыыыыыы8 Это команда 9. ыыыыыыыыыыыы ыыыыыыыыыыыы ыыыыыыыыыыыыыыы ы ыыыыыыы ыыыыыы9 Это команда 10. ыыыыыыыыыыы ыыыыыыыыыыыы ыыыыыыыыыыыыыыы ы ыыыыыыы ыыыыы10
      BLOCK 310. Вложен в BLOCK 300 и Состоит только из BLOCK 311 и BLOCK 312 /BLOCK 300. Состоит только из BLOCK 310 и BLOCK 320/
}     
function  HLTC72_35_5_Execute(var  current_state: OleVariant): OleVariant;
const
  DOCNAME = 'ДОКУМЕНТ 2002 с 10 командами NAME по 73 символа каждая*\*BLOCK 310. Вложен в BLOCK 300 и Состоит только из BLOCK 311 и BLOCK 312 /BLOCK 300*';
var 
  rubricatorTree;
  listTree;
  listpath1;
begin
	Result := false;
  listpath1 := LIST_RUBR_BUH_AUDIT + '\Аудит\Лицензирование аудиторской деятельности';
  rubricatorTree := OpenMenuTab;
  if (common.Position_Internal(rubricatorTree, listpath1)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
  	Result := common.Position_Internal(listTree, DOCNAME, DELIM_CHAR, true);
    if not Result then
      Log.Error('Документ с вложением не найден или НЕПРАВИЛЬНО называется в списке "' + DOCNAME + '"');
    CollapseTreeInNavigator(listpath1);
  end
  else
		Log.Error('Не найден список: "' + listpath1 + '"');
  GoToMainMenu;
end;

{
HLTC72.8: Сортировка
	HLTC72.8.11: Начальная сортировка списка
  	HLTC72.8.11.3: Проверить, что при изменении критерия сортировки эти изменения 
    влияют только на вновь создаваемые списки:
    	HLTC72.8.11.3.1: Проверить, что при возврате к списку по истории у него не изменилсиь параметры сортировки
}
function  HLTC72_8_11_3_1_Execute(var  current_state: OleVariant): OleVariant;
var
  SORTTYPE1, SORTDIRECTION1, SORTTYPE2, SORTDIRECTION2;
  //
  rubricatorTree;
  listTree;
  listDefaultArray;
  listCurrentArray;
  sortTypeBefore, sortTypeAfter;
  LISTPATH1;
begin
  LISTPATH1 := PNAV + '\Законодательство об обороне\Общие вопросы обороны';
  //
  //Константы описаны в MenuWork
  SORTTYPE1:= SORT_BY_EDITION_DATE;
  SORTDIRECTION1:= SORT_ASCENDING + ' значений';
  SORTTYPE2:= SORT_BY_PUBLICATION_DATE;
  SORTDIRECTION2:= SORT_DESCENDING + ' значений';
	Result := false;
  //устанавливаем параметры сортировки
  SetSettings([ (['СПИСКИ ДОКУМЕНТОВ', 'СОРТИРОВКА ПО УМОЛЧАНИЮ\ТИП СОРТИРОВКИ [COMBOBOX]', SORTTYPE1]) ]);
  SetSettings([ (['СПИСКИ ДОКУМЕНТОВ', 'СОРТИРОВКА ПО УМОЛЧАНИЮ\ПОРЯДОК СОРТИРОВКИ [COMBOBOX]', SORTDIRECTION1]) ]);  
  //
  RubricatorTree := OpenMenuTab; 
  if (common.Position_Internal(RubricatorTree, LISTPATH1)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
    listDefaultArray := GetElementsFromTree(listTree);
    sortTypeBefore := GetSortType;
    GoByHistory('НАЗАД');
    //меняем параметры сортировки
    SetSettings([ (['СПИСКИ ДОКУМЕНТОВ', 'СОРТИРОВКА ПО УМОЛЧАНИЮ\ТИП СОРТИРОВКИ [COMBOBOX]', SORTTYPE2]) ]);
    SetSettings([ (['СПИСКИ ДОКУМЕНТОВ', 'СОРТИРОВКА ПО УМОЛЧАНИЮ\ПОРЯДОК СОРТИРОВКИ [COMBOBOX]', SORTDIRECTION2]) ]);  
    GoByHistory('ВПЕРЕД');
    listTree := GetList;
    //проверям, что список не пересортировался
    listCurrentArray := GetElementsFromTree(listTree);		
    Result := CompareArray(listDefaultArray, listCurrentArray);
    if not Result  then
    	Log.Error('Список пересортировлся');
    //  
    sortTypeAfter := GetSortType;
    //проверям что параметры сортировки остались прежние
    Result := Result and (sortTypeAfter = sortTypeBefore);
    if (sortTypeAfter <> sortTypeBefore) then
    	Log.Error('Меняется тип сортировки, был: "' + sortTypeBefore + '", стал: "' + sortTypeAfter + '"');
    CollapseTreeInNavigator(LISTPATH1);
  end
  else
   	Log.Error('Не найден элемент: "' + LISTPATH1 + '"');
  SetDefaultSettings;
  GoToMainMenu;
end;

{
HLTC72.8: Сортировка
	HLTC72.8.11: Начальная сортировка списка
  	HLTC72.8.11.3: Проверить, что при изменении критерия сортировки эти изменения 
    влияют только на вновь создаваемые списки:
			HLTC72.8.11.3.2: Перейти в список по рубрикатору, перейти к настройкам и 
      изменить критерий сортировки, применть изменения - список не должен 
      пересортироваться.
}
function  HLTC72_8_11_3_2_Execute(var  current_state: OleVariant): OleVariant;
var
  SORTTYPE1, SORTDIRECTION1, SORTTYPE2, SORTDIRECTION2;
  rubricatorTree;
  listTree;
  listDefaultArray;
  listCurrentArray;
  sortTypeBefore, sortTypeAfter;
  LISTPATH1;
begin
	LISTPATH1 := PNAV + '\Законодательство об обороне\Общие вопросы обороны';
  //
  //Константы описаны в MenuWork
  SORTTYPE1:= SORT_BY_EDITION_DATE;
  SORTDIRECTION1:= SORT_ASCENDING + ' значений';
  SORTTYPE2:= SORT_BY_PUBLICATION_DATE;
  SORTDIRECTION2:= SORT_DESCENDING + ' значений';
	Result := false;
  //устанавливаем параметры сортировки
  SetSettings([ (['СПИСКИ ДОКУМЕНТОВ', 'СОРТИРОВКА ПО УМОЛЧАНИЮ\ТИП СОРТИРОВКИ [COMBOBOX]', SORTTYPE1]) ]);
  SetSettings([ (['СПИСКИ ДОКУМЕНТОВ', 'СОРТИРОВКА ПО УМОЛЧАНИЮ\ПОРЯДОК СОРТИРОВКИ [COMBOBOX]', SORTDIRECTION1]) ]);  
  //
  RubricatorTree := OpenMenuTab; 
  if (common.Position_Internal(RubricatorTree, LISTPATH1)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
    listDefaultArray := GetElementsFromTree(listTree);
    sortTypeBefore := GetSortType;
    //меняем параметры сортировки
    SetSettings([ (['СПИСКИ ДОКУМЕНТОВ', 'СОРТИРОВКА ПО УМОЛЧАНИЮ\ТИП СОРТИРОВКИ [COMBOBOX]', SORTTYPE2]) ]);
    SetSettings([ (['СПИСКИ ДОКУМЕНТОВ', 'СОРТИРОВКА ПО УМОЛЧАНИЮ\ПОРЯДОК СОРТИРОВКИ [COMBOBOX]', SORTDIRECTION2]) ]);  
    listTree := GetList;
    //проверям, что список не пересортировался
    listCurrentArray := GetElementsFromTree(listTree);
    Result := CompareArray(listDefaultArray, listCurrentArray);
    if not Result  then
    	Log.Error('Список пересортировлся');
    //  
    sortTypeAfter := GetSortType;
    //проверям что параметры сортировки остались прежние
    Result := Result and (sortTypeAfter = sortTypeBefore);
    if (sortTypeAfter <> sortTypeBefore) then
    	Log.Error('Меняется тип сортировки, был: "' + sortTypeBefore + '", стал: "' + sortTypeAfter + '"');
    CollapseTreeInNavigator(LISTPATH1);
  end
  else
   	Log.Error('Не найден элемент: "' + LISTPATH1 + '"');
  SetDefaultSettings;
  GoToMainMenu;
end;

{
HLTC72.8: Сортировка
	HLTC72.8.11: Начальная сортировка списка
  	HLTC72.8.11.3: Проверить, что при изменении критерия сортировки эти изменения 
    влияют только на вновь создаваемые списки:
			HLTC72.8.11.3.3: Перейти в список по рубрикатору, перейти к настройкам и
      изменить критерий сортировки, применить изменения. Снова войти в список по 
      рубрикатору – критерии сортировки должны браться из настроек.
}
function  HLTC72_8_11_3_3_Execute(var  current_state: OleVariant): OleVariant;
var
  SORTTYPE1, SORTDIRECTION1, SORTTYPE2, SORTDIRECTION2;
  rubricatorTree;
  listTree;
  listDefaultArray: array [0..7] of String;
  listCurrentArray;
  sortTypeAfter;
  LISTPATH1;
begin
	Result := false;
  //
	LISTPATH1 := PNAV + '\Законодательство об обороне\Общие вопросы обороны';
  //
  listDefaultArray[7] := 'Закон РСФСР от 19 декабря 1991 г. N 2060-I "Об охране окружающей природной среды" (с изм. и доп. от 21 февраля 1992 г. и 2 июня 1993 г., 27 декабря 2000 г., 10 июля 2001 г., 30 декабря 2001 г.)';
  listDefaultArray[6] := 'Соглашение об обеспечении радиолокационного опознавания воздушных, надводных и наземных объектов, оснащенных ответчиками опознавания системы "Пароль" (Минск, 26 июня 1992 г.) (с изменениями от 4 июня 1999 г.)';
  listDefaultArray[5] := 'Федеральный закон от 23 июня 1995 г. N 93-ФЗ "О порядке предоставления Российской Федерацией военного и гражданского персонала для участия в деятельности по поддержанию или восстановлению международного мира и безопасности"';
  listDefaultArray[4] := 'Воздушный кодекс РФ от 19 марта 1997 г. N 60-ФЗ (с изм. и доп. от 8 июля 1999 г.)';
  listDefaultArray[3] := 'Федеральный закон от 26 мая 1997 г. N 85-ФЗ "О ратификации Договора между Российской Федерацией и Республикой Армения о российской военной базе на территории Республики Армения"';
  listDefaultArray[2] := 'Протокол к Соглашению об обеспечении радиолокационного опознавания воздушных, надводных и наземных объектов, оснащенных ответчиками опознавания системы "Пароль", от 26 июня 1992 года (Минск, 4 июня 1999 г.)';
  listDefaultArray[1] := 'Программа действий Российской Федерации и Республики Беларусь по реализации положений Договора о создании Союзного государства (Москва, 8 декабря 1999 г.)';
  listDefaultArray[0] := 'Земельный кодекс Российской Федерации от 25 октября 2001 г. N 136-ФЗ';
  //Константы описаны в MenuWork
  SORTTYPE1:= SORT_BY_EDITION_DATE;
  SORTDIRECTION1:= SORT_ASCENDING + ' значений';
  SORTTYPE2:= SORT_BY_PUBLICATION_DATE;
  SORTDIRECTION2:= SORT_DESCENDING + ' значений';
  //устанавливаем параметры сортировки
  SetSettings([ (['СПИСКИ ДОКУМЕНТОВ', 'СОРТИРОВКА ПО УМОЛЧАНИЮ\ТИП СОРТИРОВКИ [COMBOBOX]', SORTTYPE1]) ]);
  SetSettings([ (['СПИСКИ ДОКУМЕНТОВ', 'СОРТИРОВКА ПО УМОЛЧАНИЮ\ПОРЯДОК СОРТИРОВКИ [COMBOBOX]', SORTDIRECTION1]) ]);  
  //
  rubricatorTree := OpenMenuTab; 
  if (common.Position_Internal(rubricatorTree, LISTPATH1)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
    //меняем параметры сортировки
    SetSettings([ (['СПИСКИ ДОКУМЕНТОВ', 'СОРТИРОВКА ПО УМОЛЧАНИЮ\ТИП СОРТИРОВКИ [COMBOBOX]', SORTTYPE2]) ]);
    SetSettings([ (['СПИСКИ ДОКУМЕНТОВ', 'СОРТИРОВКА ПО УМОЛЧАНИЮ\ПОРЯДОК СОРТИРОВКИ [COMBOBOX]', SORTDIRECTION2]) ]);  
  end
  else
   	Log.Error('Не найден элемент: "' + LISTPATH1 + '"');
  rubricatorTree := OpenMenuTab;
  if (common.Position_Internal(rubricatorTree, LISTPATH1)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
    //проверям, что список пересортировался
    Result := CompareArray(listDefaultArray, GetElementsFromTree(listTree));
    if not Result  then
    	Log.Error('Список отсортирован неправильно');
    //  
    sortTypeAfter := GetSortType;
    //проверям что параметры сортировки остались прежние
    Result := Result and (sortTypeAfter = SORTTYPE2);
    if (sortTypeAfter <> SORTTYPE2) then
    	Log.Error('Меняется тип сортировки, был: "' + SORTTYPE2 + '", стал: "' + sortTypeAfter + '"');
    CollapseTreeInNavigator(LISTPATH1);
  end
  else          
   	Log.Error('Не найден элемент: "' + LISTPATH1 + '"');
  SetDefaultSettings;
  GoToMainMenu;
end;

{
HLTC72.8: Сортировка
	HLTC72.8.11: Начальная сортировка списка
  	HLTC72.8.11.3: Проверить, что при изменении критерия сортировки эти изменения 
    влияют только на вновь создаваемые списки:
			HLTC72.8.11.1: Проверить, что после построения списка система изначально 
      сортирует его по критерию, заданному в настройках.
}
function  HLTC72_8_11_1_Execute(var  current_state: OleVariant): OleVariant;
var
  rubricatorTree, listTree;
  LISTPATH1, sets;
begin
	LISTPATH1 := PNAV + '\Законодательство об обороне\Общие вопросы обороны';
  //
	Result := false;
  //
  RubricatorTree := OpenMenuTab; 
  if (common.Position_Internal(RubricatorTree, LISTPATH1)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
    //
    sets := GetSettings([ (['СПИСКИ ДОКУМЕНТОВ', 'СОРТИРОВКА ПО УМОЛЧАНИЮ\ТИП СОРТИРОВКИ [COMBOBOX]']) ]);
    Result := (GetSortType = GetFromSettingsArr(sets, 'СПИСКИ ДОКУМЕНТОВ', 'СОРТИРОВКА ПО УМОЛЧАНИЮ\ТИП СОРТИРОВКИ [COMBOBOX]'));
    if not Result then
    	Log.Error('Тип сортировки списка отличается от настроек');
    CollapseTreeInNavigator(LISTPATH1);
  end
  else
   	Log.Error('Не найден элемент: "' + LISTPATH1 + '"');
  GoToMainMenu;
end;

{
HLTC72.11: Логические операции
	HLTC72.11.2: Объединение
		HLTC72.11.2.1: Объединить список, состоящий из 1 элемента со списком, 
    состоящим из 1 другого документа. Проверить, что в результате будет 2 
    документа в списке
HLTC72.11.1: Проверить, что после совершения логической операции, результирующий список полностью заменяет текущий
}
function  HLTC72_11_2_1_Execute(var  current_state: OleVariant): OleVariant;
const
  LISTNAME = 'Список1121';  
var 
  w;                                
  rubricatorTree;   
  listTree;
  list1, list2;
  compositeList;
  LISTPATH1, LISTPATH2;
begin
	LISTPATH1 := PNAV + '\Налоговое законодательство\Основы налоговой системы';
	LISTPATH2 := PNAV + '\Налоговое законодательство\Учет налогоплательщиков';
  //
	Result := false;
  //
  rubricatorTree := OpenMenuTab; 
  if (common.Position_Internal(rubricatorTree, 	LISTPATH1)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
    PressKeyWithCheck(['[Down]', '![End]']);
		DelWithConfirm;
    list1 := common.GetWindowText(listTree.Handle);
		if not SimpleSaveToFolders(LISTNAME) then
    	Log.Warning('Не удалось сохранить список в папку, список с таким именем уже существует')
    else
    begin
      rubricatorTree := OpenMenuTab;
      if (common.Position_Internal(rubricatorTree, 	LISTPATH2)) then
  		begin
      	Sys.Keys('[Enter]');       
        listTree := GetList;
    	  listTree.SetFocus;
        PressKeyWithCheck(['[Down]', '![End]']);
  			DelWithConfirm;
        list2 := common.GetWindowText(listTree.Handle);
        //
        if ListLogicalOperation('ДОПОЛНИТЬ', MY_DOCS_PATH + LISTNAME) then
        begin
          compositeList := common.GetElementsFromTree(listTree);
          Result := true;
          if not FindElement(compositeList, list1, true) then
          begin
            Result := false;
            Log.Error('ДОБАВЛЕНИЕ списка прошло НЕПРАВИЛЬНО! Список не включает "' + VarToStr(list1)  + '"');
          end;
          if not FindElement(compositeList, list2, true) then
          begin
            Result := false;
            Log.Error('ДОБАВЛЕНИЕ списка прошло НЕПРАВИЛЬНО! Список не включает "' + VarToStr(list2)  + '"');
          end;
          if common.CountElementInTree(listTree) <> 2 then
          begin
            Result := false;
            Log.Error('Список содержит более 2-х документов');
          end;
        end;
      end
      else
       	Log.Error('Не найден элемент: "' + LISTPATH2 + '"');
      OpenMyDocTab;
      if DeleteObjectFromFolder(MY_DOCS_PATH + LISTNAME) then
      begin
				Sys.Keys('[End]');
        CollapseTree(GetFolderTree, 'Мои документы');
      end
      else
      	Log.Error('Не найден элемент: "' + MY_DOCS_PATH + LISTNAME + '"');
    end;
    CollapseTreeInNavigator(LISTPATH1);
  end
  else
   	Log.Error('Не найден элемент: "' + LISTPATH1 + '"');
  GoToMainMenu;
end;

{function  HLTC72_11_2_2_Execute(var  current_state: OleVariant): OleVariant;
const
	LISTPATH1 = 'Правовой навигатор\Документы\Основы государственно-правового устройства\Основы конституционного строя';
  LISTPATH2 = 'Правовой навигатор\Документы\Основы государственно-правового устройства\Разграничение компетенции между органами власти РФ и ее субъектов';
  LISTNAME = 'Список1122';  
var 
  w;                                
  rubricatorTree;
  listTree;
  list1, list2;
  compositeList;
begin
	Result := false;
  //
  rubricatorTree := OpenMenuTab; 
  if (common.Position_Internal(rubricatorTree, 	LISTPATH1)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
    Sys.Keys('[Down]' + KeyPause + '![End]' + KeyPause);
		DelWithConfirm;    
    Sys.Keys(KEY_EXPAND_FOLDER  + KeyPause);
    list1 := common.GetElementsFromTree(listTree);
    DeleteElementFromArray(list1, VarArrayLowBound(list1, 1));
		if not SimpleSaveToFolders(LISTNAME) then
    	Log.Warning('Не удалось сохранить список в папку, список с таким именем уже существует')
    else
    begin
      rubricatorTree := OpenMenuTab;
      if (common.Position_Internal(rubricatorTree, 	LISTPATH2)) then
  		begin
      	Sys.Keys('[Enter]');
        listTree := GetList;
    	  listTree.SetFocus;
        Sys.Keys('[Down]' + KeyPause + '![End]'  + KeyPause);
  			DelWithConfirm;
        Sys.Keys(KEY_EXPAND_FOLDER + KeyPause);
        list2 := common.GetElementsFromTree(listTree);
    		DeleteElementFromArray(list2, VarArrayLowBound(list2, 1));
        list1 := AddArrays(list1, list2);
        SortArray(list1);        
        //
        if ListLogicalOperation('ДОПОЛНИТЬ', MY_DOCS_PATH + LISTNAME) then
        begin
          Sys.Keys(KEY_EXPAND_FOLDER  + KeyPause);
          compositeList := common.GetElementsFromTree(listTree); 
          DeleteElementFromArray(compositeList, VarArrayLowBound(compositeList, 1));
          SortArray(compositeList);
          Result := (common.CountElementInTree(listTree) = 4 and CompareArray(compositeList, list1));
        end;
        if not Result then
         	Log.Error('ДОБАВЛЕНИЕ списка прошло НЕПРАВИЛЬНО');
      end
      else
       	Log.Error('Не найден элемент: "' + LISTPATH2 + '"');
      OpenMyDocTab;
      if DeleteObjectFromFolder(MY_DOCS_PATH + LISTNAME) then
      begin
				Sys.Keys('[End]');
        CollapseTree(GetFolderTree, 'Мои документы');
      end
      else
      	Log.Error('Не найден элемент: "' + MY_DOCS_PATH + LISTNAME + '"');
    end;
    CollapseTreeInNavigator(LISTPATH1);
  end
  else
   	Log.Error('Не найден элемент: "' + LISTPATH1 + '"');
  GoToMainMenu;
end;

}

{
HLTC72.11: Логические операции
	HLTC72.11.2: Объединение
		HLTC72.11.2.3: Объединить список из всех документов со списком из всех 
    документов. Должен опять получиться список из всех документов
}
function  HLTC72_11_2_3_Execute(var  current_state: OleVariant): OleVariant;
const
  LISTNAME = 'Список1123';
var 
  w;                                
  listTree;
	listAllDoc: String;
begin
	Result := false;
  //
 	GoToMainMenu;
  GetListOfAllDocuments;
  listTree := GetList;
  listAllDoc := CopyToClipboard(listTree, 'ALL');
  if not SimpleSaveToFolders(LISTNAME) then
    	Log.Warning('Не удалось сохранить список в папку, список с таким именем уже существует')
  else
  begin
  	GoToMainMenu;
    GetListOfAllDocuments;
    if ListLogicalOperation('ДОПОЛНИТЬ', MY_DOCS_PATH + LISTNAME) then
    begin
      listTree := GetList;
      listTree.SetFocus;
      //проверяем, что список остался прежним
      Result := (StringCompare(CopyToClipboard(listTree, 'ALL'), listAllDoc) and (Length(listAllDoc) <> 0));
    end;
    if not Result then
    	Log.Error('Добавление Списка всех документов прошло НЕПРАВИЛЬНО');
    OpenMyDocTab;
    if DeleteObjectFromFolder(MY_DOCS_PATH + LISTNAME) then
    begin
    	Sys.Keys('[End]');
      CollapseTree(GetFolderTree, 'Мои документы');
    end
    else
    	Log.Error('Не найден элемент: "' + MY_DOCS_PATH + LISTNAME + '"');
  end;
  common.ClipboardClean;
  GoToMainMenu;
end;

{
HLTC72.11: Логические операции
	HLTC72.11.2: Объединение
		HLTC72.11.2.5: Объединить список, состоящий из 1 элемента с таким же списком. 
    В результате должен получиться список из 1 элемента без вхождений
}
function  HLTC72_11_2_5_Execute(var  current_state: OleVariant): OleVariant;
const
  LISTNAME = 'Список1125';  
var 
  w;                                
  rubricatorTree;
  listTree;
  list1;
  LISTPATH1;
begin
	LISTPATH1 := PNAV + '\Банковская деятельность\Общие вопросы банковской деятельности';
  //
	Result := false;
  //
  rubricatorTree := OpenMenuTab; 
  if (common.Position_Internal(rubricatorTree, 	LISTPATH1)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
   	PressKeyWithCheck(['[Down]','![End]']);
		DelWithConfirm;
    list1 := common.GetElementsFromTree(listTree);
		if not SimpleSaveToFolders(LISTNAME) then
    	Log.Warning('Не удалось сохранить список в папку, список с таким именем уже существует')
    else
    begin
      rubricatorTree := OpenMenuTab;
      if (common.Position_Internal(rubricatorTree, 	LISTPATH1)) then
  		begin
    		Sys.Keys('[Enter]');
        listTree := GetList;
        listTree.SetFocus;
      	PressKeyWithCheck(['[Down]','![End]']);
    		DelWithConfirm;
        //
        if ListLogicalOperation('ДОПОЛНИТЬ', MY_DOCS_PATH + LISTNAME) then
        begin
          Result := (common.CountElementInTree(listTree) = 1 and CompareArray(list1,common.GetElementsFromTree(listTree)));
        end;
        if not Result then
         	Log.Error('ДОБАВЛЕНИЕ списка прошло НЕПРАВИЛЬНО');
      end
      else
       	Log.Error('Не найден элемент: "' + LISTPATH1 + '"');
      OpenMyDocTab;
      if DeleteObjectFromFolder(MY_DOCS_PATH + LISTNAME) then
      begin
				Sys.Keys('[End]');
        CollapseTree(GetFolderTree, 'Мои документы');
      end
      else
      	Log.Error('Не найден элемент: "' + Y_DOCS_PATH + LISTNAME + '"');
    end;
    CollapseTreeInNavigator(LISTPATH1);
  end
  else
   	Log.Error('Не найден элемент: "' + LISTPATH1 + '"');
  GoToMainMenu;
end;

{
HLTC72.11: Логические операции
	HLTC72.11.3: Пересечение
		HLTC72.11.3.1: Пересечь список, состоящий из 1 элемента со списком, состоящим 
    из 1 другого документа. Проверить, что в результате список будет пустым 
    (выдается предупреждение)
    
    HLTC72.11.3.5: Проверить, что если в результате операции получается пустой 
    список, то система сообщает об этом и выводит исходный список.
}
function  HLTC72_11_3_1_Execute(var  current_state: OleVariant): OleVariant;
const
  LISTNAME = 'Список1131';  
var 
  res, list2;
  rubricatorTree, listTree;
  LISTPATH1, LISTPATH2;
begin
	LISTPATH1 := PNAV + '\Налоговое законодательство\Основы налоговой системы';
	LISTPATH2 := PNAV + '\Налоговое законодательство\Учет налогоплательщиков';
  //
	Result := false;
  //
  rubricatorTree := OpenMenuTab; 
  if (common.Position_Internal(rubricatorTree, 	LISTPATH1)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
  	PressKeyWithCheck(['[Down]![End]']);
		DelWithConfirm;
		if not SimpleSaveToFolders(LISTNAME) then
    	Log.Warning('Не удалось сохранить список в папку, список с таким именем уже существует')
    else
    begin
      rubricatorTree := OpenMenuTab;
      if (common.Position_Internal(rubricatorTree, 	LISTPATH2)) then
  		begin
      	Sys.Keys('[Enter]');       
        listTree := GetList;
    	  listTree.SetFocus;
      	PressKeyWithCheck(['[Down]![End]']);
  			DelWithConfirm;
        list2 := common.GetElementsFromTree(listTree);
        //                                      
        res := ListLogicalOperation('ПЕРЕСЕЧЬ', MY_DOCS_PATH + LISTNAME, nil, 'IsExtendedResult:=true');
        if GetParam(res, 'Result', false) then
        begin
          Result := GetParam(res, 'IsResultIsEmptyList', false);
          if not Result then
          	Log.Error('Не найдено окно Предупреждение о результирующем пустом списке');
          if not (common.CountElementInTree(listTree) = 1 and CompareArray(list2,common.GetElementsFromTree(listTree))) then
            Result := ErrorResult('Список после ПЕРЕСЕЧЬ отличается от настоящего');
        end
        else
          Log.Error('Не получилось выполнить лог. операцию ПЕРЕСЕЧЬ');
      end
      else
       	Log.Error('Не найден элемент: "' + LISTPATH2 + '"');
      DeleteAllInMyDoc;
    end;
    CollapseTreeInNavigator(LISTPATH1);
  end
  else
   	Log.Error('Не найден элемент: "' + LISTPATH1 + '"');
  GoToMainMenu;
end;

{
HLTC72.11: Логические операции
	HLTC72.11.3: Пересечение
		HLTC72.11.3.2: Пересечь список, состоящий из 1 элемента со списком, состоящим 
    из того же документа. Проверить, что в результате будет 1 документ в списке
}
function  HLTC72_11_3_2_Execute(var  current_state: OleVariant): OleVariant;
const
  LISTNAME = 'Список1132';  
var 
  w;                                
  rubricatorTree;
  listTree;
  list1;
  LISTPATH1;
begin
	LISTPATH1 := PNAV + '\Банковская деятельность\Общие вопросы банковской деятельности';
  //
	Result := false;
  //
  rubricatorTree := OpenMenuTab; 
  if (common.Position_Internal(rubricatorTree, 	LISTPATH1)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
   	PressKeyWithCheck(['[Down]','![End]']);
		DelWithConfirm;
    list1 := common.GetElementsFromTree(listTree);
		if not SimpleSaveToFolders(LISTNAME) then
    	Log.Warning('Не удалось сохранить список в папку, список с таким именем уже существует')
    else
    begin
      rubricatorTree := OpenMenuTab;
      if (common.Position_Internal(rubricatorTree, 	LISTPATH1)) then
  		begin
    		Sys.Keys('[Enter]');
        listTree := GetList;
        listTree.SetFocus;
      	PressKeyWithCheck(['[Down]','![End]']);
    		DelWithConfirm;
        //
        if ListLogicalOperation('ПЕРЕСЕЧЬ', MY_DOCS_PATH + LISTNAME) then
        begin
          Result := (common.CountElementInTree(listTree) = 1 and CompareArray(list1,common.GetElementsFromTree(listTree)));
        end;
        if not Result then
         	Log.Error('ПЕРЕСЕЧЕНИЕ со списком прошло НЕПРАВИЛЬНО');
      end
      else
       	Log.Error('Не найден элемент: "' + LISTPATH1 + '"');
      OpenMyDocTab;
      if DeleteObjectFromFolder(MY_DOCS_PATH + LISTNAME) then
      begin
				Sys.Keys('[End]');
        CollapseTree(GetFolderTree, 'Мои документы');
      end
      else
      	Log.Error('Не найден элемент: "' + MY_DOCS_PATH + LISTNAME + '"');
    end;
    CollapseTreeInNavigator(LISTPATH1);
  end
  else
   	Log.Error('Не найден элемент: "' + LISTPATH1 + '"');
  GoToMainMenu;
end;


{
HLTC72.11: Логические операции
	HLTC72.11.3: Пересечение
		HLTC72.11.3.3: Пересечь список из всех документов со списком из всех документов.
    Должен опять получиться список из всех документов
}
function  HLTC72_11_3_3_Execute(var  current_state: OleVariant): OleVariant;
const
  LISTNAME = 'Список1133';
var 
  w;                                
  listTree;
	listAllDoc: String;
begin
	Result := false;
  //
 	GoToMainMenu;
  GetListOfAllDocuments;
  listTree := GetList;
  listAllDoc := CopyToClipboard(listTree, 'ALL', 'HowToCopy:=popupmenu');
  if not SimpleSaveToFolders(LISTNAME) then
    	Log.Warning('Не удалось сохранить список в папку, список с таким именем уже существует')
  else
  begin
  	GoToMainMenu;
    GetListOfAllDocuments;
    if ListLogicalOperation('ПЕРЕСЕЧЬ', MY_DOCS_PATH + LISTNAME) then
    begin
      listTree := GetList;
      //проверяем, что список остался прежним
      Result := ((CopyToClipboard(listTree, 'ALL', 'HowToCopy:=popupmenu') = listAllDoc) and (Length(listAllDoc) <> 0));
    end;
    if not Result then
    	Log.Error('ПЕРЕСЕЧЕНИЕ со списком всех документов прошло НЕПРАВИЛЬНО');
    //
    OpenMyDocTab;
    if DeleteObjectFromFolder(MY_DOCS_PATH + LISTNAME) then
    begin
    	Sys.Keys('[End]');
      CollapseTree(GetFolderTree, 'Мои документы');
    end
    else
    	Log.Error('Не найден элемент: "' + YDOCS_PATH + LISTNAME + '"');
  end;
  common.ClipboardClean;
  GoToMainMenu;
end;

{
HLTC72.11: Логические операции
	HLTC72.11.4: Вычитание
		HLTC72.11.4.1: Вычесть список, состоящий из 1 элемента из списка, состоящим 
    из 1 другого документа. Проверить, что в результате не изменится список, 
    <из которого вычитали>
}
function  HLTC72_11_4_1_Execute(var  current_state: OleVariant): OleVariant;
const
  LISTNAME = 'Список1141';  
var 
  w;                                
  rubricatorTree;
  listTree;
  list2;
  LISTPATH1, LISTPATH2;
begin
	LISTPATH1 := PNAV + '\Налоговое законодательство\Основы налоговой системы';
	LISTPATH2 := PNAV + '\Налоговое законодательство\Учет налогоплательщиков';
  //
	Result := false;
  //
  rubricatorTree := OpenMenuTab; 
  if (common.Position_Internal(rubricatorTree, 	LISTPATH1)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
   	PressKeyWithCheck(['[Down]','![End]']);
		DelWithConfirm;
		if not SimpleSaveToFolders(LISTNAME) then
    	Log.Warning('Не удалось сохранить список в папку, список с таким именем уже существует')
    else
    begin
      rubricatorTree := OpenMenuTab;
      if (common.Position_Internal(rubricatorTree, 	LISTPATH2)) then
  		begin
      	Sys.Keys('[Enter]');       
        listTree := GetList;
    	  listTree.SetFocus;
      	PressKeyWithCheck(['[Down]','![End]']);
  			DelWithConfirm;
        list2 := common.GetElementsFromTree(listTree);
        //
        if ListLogicalOperation('ВЫЧЕСТЬ', MY_DOCS_PATH + LISTNAME) then
        begin
          listTree.SetFocus;
          Result := common.CountElementInTree(listTree) = 1 and CompareArray(list2,common.GetElementsFromTree(listTree));
          if not Result then
            Log.Error('Список после ВЫЧЕСТЬ отличается от настоящего');
        end;
      end
      else
       	Log.Error('Не найден элемент: "' + LISTPATH2 + '"');
      OpenMyDocTab;
      if DeleteObjectFromFolder(MY_DOCS_PATH + LISTNAME) then
      begin
				Sys.Keys('[End]');
        CollapseTree(GetFolderTree, 'Мои документы');
      end
      else
      	Log.Error('Не найден элемент: "' + Y_DOCS_PATH + LISTNAME + '"');
    end;
    CollapseTreeInNavigator(LISTPATH1);
  end
  else
   	Log.Error('Не найден элемент: "' + LISTPATH1 + '"');
  GoToMainMenu;
end;

{
HLTC72.11: Логические операции
	HLTC72.11.4: Вычитание
  	HLTC72.11.4.2: Вычесть список, состоящий из 1 элемента из списка, состоящего 
    из того же документа. Проверить, что в результате будет пустой список
}
function  HLTC72_11_4_2_Execute(var  current_state: OleVariant): OleVariant;
const
  LISTNAME = 'Список1142';  
var 
  w, res;
  rubricatorTree;
  listTree;
  list1;
  LISTPATH1;
begin
	LISTPATH1 := PNAV + '\Банковская деятельность\Общие вопросы банковской деятельности';
  //
	Result := false;
  //
  rubricatorTree := OpenMenuTab; 
  if (common.Position_Internal(rubricatorTree, 	LISTPATH1)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
  	PressKeyWithCheck(['[Down]','![End]']);
		DelWithConfirm;
    list1 := common.GetElementsFromTree(listTree);
		if not SimpleSaveToFolders(LISTNAME) then
    	Log.Warning('Не удалось сохранить список в папку, список с таким именем уже существует')
    else
    begin
      rubricatorTree := OpenMenuTab;
      if (common.Position_Internal(rubricatorTree, 	LISTPATH1)) then
  		begin
    		Sys.Keys('[Enter]');
        listTree := GetList;
        listTree.SetFocus;
      	PressKeyWithCheck(['[Down]','![End]']);
    		DelWithConfirm;
        //
        res := ListLogicalOperation('ВЫЧЕСТЬ', MY_DOCS_PATH + LISTNAME, nil, 'IsExtendedResult:=true');
        if GetParam(res, 'Result', false) then
        begin
          Result := GetParam(res, 'IsResultIsEmptyList', false);
          if not Result then
          	Log.Error('Не найдено окно Предупреждение о результирующем пустом списке');
        end
        else
          Log.Error('Не получилось выполнить лог. операцию ВЫЧЕСТЬ');
      end
      else
       	Log.Error('Не найден элемент: "' + LISTPATH1 + '"');
      DeleteObjectFromFolder(MY_DOCS_PATH + LISTNAME);
    end;
    CollapseTreeInNavigator(LISTPATH1);
  end
  else
   	Log.Error('Не найден элемент: "' + LISTPATH1 + '"');
  GoToMainMenu;
end;


{
HLTC72.11: Логические операции
	HLTC72.11.4: Вычитание
  	HLTC72.11.4.3: Вычесть список всех документов из списка всех документов. 
    Должен получиться пустой список

    HLTC72.11.4.6: Проверить, что если в результате операции получается пустой 
    список, то система сообщает об этом и выводит исходный.
}
function  HLTC72_11_4_3_Execute(var  current_state: OleVariant): OleVariant;
const
  LISTNAME = 'Список1143';
var 
  w, res;                                
  listTree;
	listAllDoc: String;
begin
	Result := false;
  //
 	GoToMainMenu;
  GetListOfAllDocuments;
  listTree := GetList;
  listTree.SetFocus;
  listAllDoc := CopyToClipboard(listTree, 'ALL', 'MaxDelay:=10000');
  if not SimpleSaveToFolders(LISTNAME) then
    Log.Error('Не удалось сохранить список в папку, список с таким именем уже существует')
  else
  begin
    listTree := GetListOfAllDocuments;
    res := ListLogicalOperation('ВЫЧЕСТЬ', MY_DOCS_PATH + LISTNAME, nil, 'IsExtendedResult:=true');
    if GetParam(res, 'Result', false) then
    begin
      Result := GetParam(res, 'IsResultIsEmptyList', false);
      if not Result then
      	Log.Error('Не найдено окно Предупреждение о результирующем пустом списке');
    end
    else
      Log.Error('Не получилось выполнить лог. операцию ВЫЧЕСТЬ');
    if CopyToClipboard(listTree, 'ALL', 'MaxDelay:=10000') <> listAllDoc then
    begin
      Result := false;
    	Log.Error('Список всех документов изменился после лог. операции ВЫЧЕСТЬ');
    end;
    DeleteObjectFromFolder(MY_DOCS_PATH + LISTNAME);
  end;
  GoToMainMenu;
end;

{
HLTC72.12: Копирование части элементов списка в новый список
	HLTC72.12.1: Провести копирование выделенных элементов в новый список (затем 
 	сравнить, что именно выделенные элементы скопировались):
 		HLTC72.12.1.3: когда выделен первый, средний и последний элементы списка.
}     
function  HLTC72_12_1_3_Execute(var  current_state: OleVariant): OleVariant;
var 
  rubricatorTree;
  listTree;
	listArray: array [0..2] of String;
  compositeList;
  listForPaste;
  summArray;
  LISTPATH1, LISTPATH2;
begin
	LISTPATH1 := PNAV + '\Банковская деятельность\Организация и регулирование денежного обращения';
	LISTPATH2 := PNAV + '\Банковская деятельность\Общие вопросы банковской деятельности';
  //
	Result := false;
  rubricatorTree := OpenMenuTab;
  if (common.Position_Internal(rubricatorTree, LISTPATH1)) then
  begin
		Sys.Keys('[Enter]');
    ListTree := GetList;
    ListTree.SetFocus;
    //выделяем элементы в списке
    Sys.Keys('[Home]');
    listArray[0] := common.GetWindowText(listTree.Handle);
    SelectItemInList(listTree, 4);
    listArray[1] := common.GetWindowText(listTree.Handle);
    SelectItemInList(listTree, 7);
    listArray[2] := common.GetWindowText(listTree.Handle);
    //
    CopyToClipboard(nil, '','IsCleanClipboard := false');
    rubricatorTree := OpenMenuTab;
    if (common.Position_Internal(rubricatorTree, LISTPATH2)) then
	  begin
    	Sys.Keys('[Enter]');
      listTree := GetList;
    	listTree.SetFocus;
      summArray := AddArrays(GetElementsFromTree(listTree), listArray);
      SortArray(summArray);
      PasteFromClipboard(listTree, 'IsCleanClipboard:=true');
			Sys.Keys('[Home]');
      compositeList := GetElementsFromTree(listTree);
			SortArray(compositeList);
			Result := CompareArray(compositeList, summArray);
      if not Result then
      	Log.Error('Список выделенных документов был некорректно скопирован');
    end
    else
  		Log.Error('Не найден элемент: "' + LISTPATH2 + '"');
    CollapseTreeInNavigator(LISTPATH1);
  end
  else
		Log.Error('Не найден элемент: "' + LISTPATH1 + '"');      	
  GoToMainMenu;
end;

{
HLTC72.16: Отображение статусов документов
	HLTC72.16.1: Проверить, что визуально показаны:
  	HLTC72.16.1.1: Утратившие силу документы
}     
function  HLTC72_16_1_1_Execute(var  current_state: OleVariant): OleVariant;
const
  DOCNAME = 'Земельный кодекс РСФСР от 25 апреля 1991 г. (с изм. и доп. от 28 апреля, 24 декабря 1993 г.) (утратил силу)';
var
  rubricatorTree;
  listTree;
  LISTPATH1;
begin
	LISTPATH1 := PNAV + '\Гражданское законодательство, приватизация\Наследственное право';
  //
	Result := false;
  SetDefaultSettings;
  rubricatorTree := OpenMenuTab;  
  if (common.Position_Internal(rubricatorTree, LISTPATH1)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
		Sys.Keys('[Down]');    
    if MoveMouseToObject(listTree, Left_Strength, 2, 0, true) then    
    begin
      Result := (common.GetWindowText(listTree.Handle) = DocName);
    end;
    if not Result then
    	Log.Error('В списке не найдена иконка УТРАТИВШЕГО СИЛУ документа');
    CollapseTreeInNavigator(LISTPATH1);
  end
  else
		Log.Error('Не найден элемент: "' + LISTPATH1 + '"');      	
  GoToMainMenu;
end;

{
  HLTC72.16: Отображение статусов документов
  	HLTC72.16.1: Проверить, что визуально показаны:
    	HLTC72.16.1.2: Не вступившие в силу
}     
function  HLTC72_16_1_2_Execute(var  current_state: OleVariant): OleVariant;
const
  DOCNAME = 'Кодекс Российской Федерации об административных правонарушениях (КоАП РФ) от 30 декабря 2001 г. N 195-ФЗ (не вступил в силу)';
var
  rubricatorTree;
  listTree;
  LISTPATH1;
begin
	LISTPATH1 := LIST_RUBR_MAIN + '\Права и свободы человека и гражданина, гражданство\Беженцы и вынужденные переселенцы';

	Result := false;
  SetDefaultSettings;  
  rubricatorTree := OpenMenuTab;  
  if (common.Position_Internal(rubricatorTree, LISTPATH1)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
    listTree.Keys('[Home][Down][Down][Down][Down]'); // чтобы не стоять на первом элементе
    if MoveMouseToObject(listTree, Not_Enter_In_Strength, 2, 2, true) then
      Result := common.GetWindowText(listTree.Handle) = DocName;
    if not Result then
    	Log.Error('В списке не найдена иконка НЕ ВСТУПИВШЕГО В СИЛУ документа');
    CollapseTreeInNavigator(LISTPATH1);
  end
  else
		Log.Error('Не найден элемент: "' + LISTPATH1 + '"');
  GoToMainMenu;
end;

{
  HLTC72.16: Отображение статусов документов
  	HLTC72.16.1: Проверить, что визуально показаны:
    	HLTC72.16.1.3: действующие
}     
function  HLTC72_16_1_3_Execute(var  current_state: OleVariant): OleVariant;
const
  DOCNAME = 'Документ 580*';
var
  rubricatorTree;
  listTree, docNameinList;
begin
try
	Result := false;
  SetDefaultSettings;
  rubricatorTree := OpenMenuTab;
  if (common.Position_Internal(rubricatorTree, LIST_TEST_MYCLASS_A)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
    if not SelectItemInList(listTree, 4, false) then
      Raise('Не получилось выделить документ списка');

    docNameinList := common.GetWindowText(listTree.Handle);
    Result := StringCompare(DOCNAME, docNameinList);
    if not Result then
    	Log.Error('В списке не найден документ "' + DOCNAME + '" с иконкой ДЕЙСТВУЮЩЕГО документа. Текущий элемент списка "' + docNameinList + '"');

    CollapseTreeInNavigator(LIST_TEST_MYCLASS_A);
  end
  else
		Log.Error('Не найден элемент: "' + LIST_TEST_MYCLASS_A + '"');
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenu;
end;

{
  HLTC72.16.2: Проверить, что ссылки на редакции документов отображаются с собственной иконкой(документ 8801000)
}
function  HLTC72_16_2_Execute(var  current_state: OleVariant): OleVariant;
const
  DOC_NUM = 8801000;
var
  i, red_list;
begin
try
	Result := true;
  red_list := [ (['будет действовать*', 'redaction_future.bmp']),
                (['02.08.2003*', 'redaction_active.bmp']),
                (['01.04.2003*первоначальная*', 'redaction_inactive.bmp'])
              ];
  if not OpenDocByNumber(DOC_NUM) then
    Raise('Не получилось открыть документ "' + IntToStr(DOC_NUM) + '"');

  for i := VarArrayLowBound(red_list, 1) to VarArrayHighBound(red_list, 1) do
  begin
    if not SelectRedaction(red_list[i][0]) then
      Result := ErrorResult('Не получилось открыть редакцию "' + red_list[i][0] + '"')
    else
    if not CheckCurrentRedaction(red_list[i][1], red_list[i][0]) then
      Raise('Отличается эталонная иконка "' + red_list[i][1] + '", для редакции "' + red_list[i][0] + '"');
  end;   
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenu;
end;

{
	HLTC72.1.4: При переходе из документа по гиперссылке на список (мультиссылке) 
  начинается с текста: "Ссылка из документа".
		HLTC72.1.4.2: (в тестовой базе есть документ 12024178, в середине есть ссылка "МУЛЬТИССЫЛКА НА VANONCED" 
    Имя списка будет: "Ссылка из документа: ПРИКАЗ МИНТРАНСА РФ ОТ 14.05.2001 N 84"
}
function  HLTC72_1_4_2_Execute(var  current_state: OleVariant): OleVariant;
const
	TESTEDCAPTION = 'Ссылка из документа: Приказ Минтранса РФ от 14 мая 2001 г. N 84 "Об утверждении *...';
var 
  w;
begin
	Result := false;
  if OpenDocByNumber(12024178) and IsExists(GetEditor) then 
  begin
    w := GetMainWindow;
    if ClickByHyperLink(GetEditor, 'МУЛЬТИССЫЛКА НА VANONCED') then
    begin
      GetList;
      Result := StringCompare(TESTEDCAPTION, w.Caption);
      if not Result then
      	Log.Error('Название окна неверно: "' + w.Caption + '", а должно включать "' + TESTEDCAPTION + '"');
    end;
  end
  else
    Log.Error('Не получилось открыть документ по номеру!');
  GoToMainMenu;
end;

{
HLTC72.2: Количество элементов в списке, текущий элемент, выделение элементов, скроллинг
	HLTC72.2.4: Проверить выделение
  	HLTC72.2.4.1: Выделить в разнобой все элементы списка, используя CTRL
    HLTC72.2.4.4: Используя выделение мышью
}     
function  HLTC72_2_4_1_Execute(var  current_state: OleVariant): OleVariant;
var 
  i;
  rubricatorTree; listTree; compositeList;
  countElem;
begin
try
	Result := false;
  rubricatorTree := OpenMenuTab;
  if (common.Position_Internal(rubricatorTree, LIST_ORG_MASS)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;

  	compositeList := String2Array(CopyToClipboard(listTree, 'ALL'));
		PressKeyWithCheck(['[End][Home][Home]']);

    //выделяем элементы в списке
    countElem := CountElementInList(listTree);
    if countElem = 0 then
      Raise('Неправильно получено число элементов в списке!');      
    for i := 2 to countElem do // первый уже выделен
      if not SelectItemInList(listTree, i) then
        Raise('Не получилось выделить ' + IntToStr(i) + '-элемент списка');
    
    Result := CompareArray(compositeList, String2Array(Copy2Clipboard)) and (IsArray(compositeList));
    if not Result then
    	Log.Error('Список произвольно выделенных документов был некорректно скопирован');
  end
  else
		Log.Error('Не найден элемент: "' + LIST_LANG + '"');
except
  Result := False;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;      	
  GoToMainMenu;
end;

{
HLTC72.2: Количество элементов в списке, текущий элемент, выделение элементов, скроллинг
	HLTC72.2.4: Проверить выделение
  	HLTC72.2.4.2: Выделить все элементы списка по CTRL-A,  используя функцию 
    командного меню Правка - Выделить все и с помощью пункта контекстного меню 
    (прaвый клик мышью) <Выделить все>
}     
function  HLTC72_2_4_2_Execute(var  current_state: OleVariant): OleVariant;
var 
  rubricatorTree;
  listTree;
  allListBuffer;
  arrayFromBuffer;
  listArray;
  bCheckCtrlA, bCheckMainMenu, bCheckPopupMenu: Boolean;
begin
	Result := false;
  rubricatorTree := OpenMenuTab; 
  if (common.Position_Internal(rubricatorTree, 	LIST_LANG)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;                       //настройки по умолчанию, вхождения не копируются
    listArray := common.GetElementsFromTree(listTree, false);
    //
    PressKeyWithCheck(['^a']);
		arrayFromBuffer := String2Array(Copy2Clipboard);
    bCheckCtrlA := CompareArray(arrayFromBuffer, listArray);
    if (not bCheckCtrlA) then
    	Log.Error('При нажатии CTRL-A выделены не все элементы');
    PressKeyWithCheck(['^!a']);
    //
    ClickByMainMenuItem('Правка\Выделить все');
		arrayFromBuffer := String2Array(Copy2Clipboard);
    bCheckMainMenu := CompareArray(arrayFromBuffer, listArray);
    if (not bCheckMainMenu) then
    	Log.Error('При выборе пункта "Правка\Выделить все", выделены не все элементы');
    PressKeyWithCheck(['^!a']);
    //    
		Sys.Keys('[Apps]');    
    ClickByPopUpMenuItem(listTree, 'Выделить все');        
		arrayFromBuffer := String2Array(Copy2Clipboard);
    bCheckPopupMenu := CompareArray(arrayFromBuffer, listArray);
    if (not bCheckPopupMenu) then
    	Log.Error('При выборе пункта контекстного меню "Выделить все", выделены не все элементы');       
    Result := (bCheckMainMenu and bCheckCtrlA and bCheckPopupMenu);
    CollapseTreeInNavigator(LIST_LANG);
  end
  else
		Log.Error('Не найден элемент: "' + LIST_LANG + '"');
  GoToMainMenu;
end;

{
HLTC72.3: Удаление элемента
	HLTC72.3.6: Перейти по рубрикатору в список, удалить все его элементы, перейти 
  в другой список по рубрикатору, и обратно в тот список, из которого удалили 
  элементы (тоже по рубрикатору). Список должен стать не пустым. Также проверить, 
  когда удаляется часть элементов, а не все.   
}
function  HLTC72_3_6_Execute(var  current_state: OleVariant): OleVariant;
var 
  rubricatorTree;
  listTree;
  listBeforeDel;
begin
	Result := false;
 	rubricatorTree := OpenMenuTab;
  if (common.Position_Internal(rubricatorTree, 	LIST_MAIN)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
    listBeforeDel := common.GetElementsFromTree(listTree);
  	Sys.Keys('^a');
    common.DelWithConfirm;
   	rubricatorTree := OpenMenuTab;
    if (common.Position_Internal(rubricatorTree, 	LIST_LANG)) then
	  begin
    	Sys.Keys('[Enter]');
      rubricatorTree := OpenMenuTab;
      if (common.Position_Internal(rubricatorTree, 	LIST_MAIN)) then
		  begin
      	Sys.Keys('[Enter]');
        listTree := GetList;
    		listTree.SetFocus;
    		Result := CompareArray(listBeforeDel, common.GetElementsFromTree(listTree));
      end;
    end
    else
  		Log.Error('Не найден элемент: "' + LIST_LANG + '"');
    CollapseTreeInNavigator(LIST_MAIN);
  end
  else
		Log.Error('Не найден элемент: "' + LIST_MAIN + '"');      	
  GoToMainMenu;
end;

{
HLTC72.5: История/справка к списку
	HLTC72.5.1: Проверить информацию, приводящуюся в справке к списку:
		HLTC72.5.1.3: При переходе по мультиссылке.
}
function  HLTC72_5_1_3_Execute(var  current_state: OleVariant): OleVariant;
const
  GLINK = 'МУЛЬТИССЫЛКА НА VANONCED';
  HELPTEXT = 'Ссылка из документа: Приказ Минтранса РФ от 14 мая 2001 г. N 84 "Об утверждении И...';
var
  w, clipboard;
  editor, rubricatorTree;
begin
	Result := false;
  OpenDocByNumber(12024178);
  editor := GetEditor;
  if IsExists(editor) then
  begin
    if ClickByHyperLink(editor, GLINK) then
    begin
      GetList.SetFocus;    
      clipboard := CopyToClipboard(OpenListHelpTab, 'ALL');
      w := GetMainWindow;
     	Result := StringCompare(HELPTEXT, clipboard);         
      if not Result then
      	Log.Error('Справка для МУЛЬТИССЫЛКИ НЕ правильная. В буфере обмена находится: "' + clipboard + '", а должно: "' + HELPTEXT + '"');
    end
    else
  		Log.Error('Не получилось перейти по гиперссылке "' + GLINK + '"');
  end
  else
    Log.Error('Окно редактора не найдено, открыть документ по номеру !');
  GoToMainMenu;
end;

{
HLTC72.6: Свертывание-развертывание
	HLTC72.6.1: Проверить, что если в списке текущим был элемент, входящий в 
  подгруппу, то при свертывании текущим будет группирующий элемент
}
function  HLTC72_6_1_Execute(var  current_state: OleVariant): OleVariant;
const
	ELEMPATH = 'Конституция Российской Федерации (принята на всенародном голосовании 12 декабря 1993 г.)';
  ENTRY = '*\*Глава 1';
var 
  rubricatorTree, listTree;
begin
	Result := false;
 	rubricatorTree := OpenMenuTab;
  if (common.Position_Internal(rubricatorTree, LIST_MAIN)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
    if common.Position_Internal(listTree, ELEMPATH + ENTRY, DELIM_CHAR, true) then
  	begin
      if MoveMouseToObject(listTree, Node_Minus, 2, 0, true) then
      begin
        Result := StringCompare(common.GetWindowText(listTree.Handle), ELEMPATH);
        if not Result then
        	Log.Error('Группирующий элемент "' + docName + '"НЕ является текущим.');
      end
      else 
       	Log.Error('Не получилось кликнуть по Свернуть');
   	end
    else
    	Log.Error('Не найден элемент: "' + ELEMPATH + ENTRY + '"');
    CollapseTreeInNavigator(LIST_MAIN);
  end
  else
		Log.Error('Не найден элемент: "' + LIST_MAIN + '"');      	
  GoToMainMenu;
end;

{
HLTC72.6: Свертывание-развертывание
	HLTC72.6.3: Проверить, что при операции развертывания узла дерева текущий 
  элемент не изменяется: 
  	HLTC72.6.3.1: если текущий элемент - разворачиваемый узел дерева
}
function  HLTC72_6_3_1_Execute(var  current_state: OleVariant): OleVariant;
const
	ELEMPATH = 'Письмо департамента строительства Краснодарского края от 11 ноября 2003 г. N 07.6.04/3822 "О порядке включения в сметную стоимость строительства транспортно-заготовительно-складских расходов по объектам, финансируемым из краевого бюджета"';
  H_STR_LIST = 23;
var 
  rubricatorTree;
  listTree;
  findRes;
begin
	Result := false;
 	rubricatorTree := OpenMenuTab;
  if (common.Position_Internal(rubricatorTree, LIST_MAIN)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
    if common.Position_by_Text(listTree, ELEMPATH) then
  	begin
      if Assign(findRes, Regions.Find(listTree, Node_Plus, 0, H_STR_LIST)) <> nil then
      begin
        listTree.Click(findRes.Left, findRes.Top);
        Result := StringCompare(ELEMPATH + '*', common.GetWindowText(listTree.Handle));
        if not Result then 
        	Log.Error('Группирующий элемент "' + ELEMPATH + '"НЕ является текущим');
      end
      else 
       	Log.Error('Не получилось кликнуть по Развернуть');
   	end
    else
    	Log.Error('Не найден элемент: "' + ELEMPATH + '"');
    CollapseTreeInNavigator(LIST_MAIN);
  end
  else
		Log.Error('Не найден элемент: "' + LIST_MAIN + '"');      	
  GoToMainMenu;
end;

{
HLTC72.6: Свертывание-развертывание
	HLTC72.6.3: Проверить, что при операции развертывания узла дерева текущий 
  элемент не изменяется: 
	  HLTC72.6.3.2: если текущий элемент - лист другого дерева
}
function  HLTC72_6_3_2_Execute(var  current_state: OleVariant): OleVariant;
const
	ELEMPATH = 'Письмо департамента строительства Краснодарского края от 11 ноября 2003 г. N 07.6.04/3822 "О порядке включения в сметную стоимость строительства транспортно-заготовительно-складских расходов по объектам, финансируемым из краевого бюджета"';
var 
  rubricatorTree;
  listTree;
begin
	Result := false;
 	rubricatorTree := OpenMenuTab;
  if (common.Position_Internal(rubricatorTree, LIST_MAIN)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
    if common.Position_by_Text(listTree, ELEMPATH) then
  	begin
      if MoveMouseToObject(listTree, Node_Plus, 2, 0, true) then
      begin
        Result := StringCompare(ELEMPATH + '*', common.GetWindowText(listTree.Handle));
        if not Result then 
        	Log.Error('Группирующий элемент "' + ELEMPATH + '"НЕ является текущим');
      end
      else 
       	Log.Error('Не получилось кликнуть по Развернуть');
   	end
    else
    	Log.Error('Не найден элемент: "' + ELEMPATH + '"');
    CollapseTreeInNavigator(LIST_MAIN);
  end
  else
		Log.Error('Не найден элемент: "' + LIST_MAIN + '"');      	
  GoToMainMenu;
end;

{
HLTC72.6: Свертывание-развертывание
	HLTC72.6.4: Проверить, что при свертывании-развертывании не изменяются выделенные 
  элементы 
}
function  HLTC72_6_4_Execute(var  current_state: OleVariant): OleVariant;
var 
  rubricatorTree;
  listTree;
  listBeforeExpand;
	checkExpand, checkCollapse: Boolean;
begin
	Result := false;	checkExpand := false; checkCollapse := false;
 	rubricatorTree := OpenMenuTab;
  if (common.Position_Internal(rubricatorTree, LIST_MAIN)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
    PressKeyWithCheck(['![Down]'], GetList, 'Count:=4');
    listBeforeExpand := Copy2Clipboard;
    common.ClipboardClean;
    if MoveMouseToObject(listTree, Node_Plus, 2, 0, true) then
    begin
      checkExpand := (listBeforeExpand = Copy2Clipboard);
      if not CheckExpand then
      	Log.Error('После разворачивания выделенные элементы изменились');
      common.ClipboardClean;     
      if not MoveMouseToObject(listTree, Node_Minus, 2, 0, true) then
       	Log.Error('Не получилось кликнуть по Свернуть');
      checkCollapse := ((listBeforeExpand = Copy2Clipboard) and (listBeforeExpand <> ''));
      if not CheckCollapse then
      	Log.Error('После сворачивания выделенные элементы изменились');
      common.ClipboardClean;     
    end  
    else 
     	Log.Error('Не получилось кликнуть по Развернуть');
    Result := (CheckCollapse and CheckExpand);
    CollapseTreeInNavigator(LIST_MAIN);
  end
  else
		Log.Error('Не найден элемент: "' + LIST_MAIN + '"');      	
  GoToMainMenu;
end;

{
  HLTC72.6.5: Проверить, что все фрагменты одного документа, представленные в списке, 
    сгруппированы как «листьевые объекты» в ветке с названием документа.
}
function  HLTC72_6_5_Execute(var  current_state: OleVariant): OleVariant;
const
	DOCNAME = 'Договор "О создании Союзного государства" (Москва, 8 декабря 1999 г.)';
  ENTERING ='Вхождение 1';
var 
  rubricatorTree;
  listTree;
  LISTPATH1;
begin
try
	Result := true;
	LISTPATH1 := PNAV + '\Гражданское законодательство, приватизация\Общие положения';  
 	rubricatorTree := OpenMenuTab;
  if not common.Position_Internal(rubricatorTree, LISTPATH1) then
		Raise('Не найден элемент: "' + LISTPATH1 + '"');
	
  Sys.Keys('[Enter]');
  listTree := GetList;
  listTree.SetFocus;
  
  if common.Position_by_Text(listTree, ENTERING) then
    Raise('При открытия списка, сразу отображаются вхождения, найдено вхождение "' + ENTERING + '"');
    
  Sys.Keys('[Home]');
  if not common.Position_Internal(listTree, DOCNAME + '*\*' + ENTERING, DELIM_CHAR, true) then
    Raise('Не найден тестовый документ с вхождением "' + DOCNAME + '*\*' + ENTERING + '"');
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenu;
end;

{
HLTC72.10: Переход в документ
	HLTC72.10.1: Проверить переход в документ и сравнить с Гарантом по:
  	HLTC72.10.1.1: ссылке верхнего уровня списка
}
function  HLTC72_10_1_1_Execute(var  current_state: OleVariant): OleVariant;
const
  DOCNAME = 'Договор "О создании Союзного государства" (Москва, 8 декабря 1999 г.)';
var 
  clipboard;
  selectedText;
begin
  try
  	Result := true;
    
	  selectedText := 'Договор*о создании Союзного государства*(Москва, 8 декабря 1999 г.)*';
  
    if not OpenObjectFromFolder(LIST_MAIN, OpenMenuTab) then
      Raise('Не получилось открыть список "' + LIST_MAIN + '"');

    if not OpenDocFromList(DOCNAME, GetList) then
      Raise('Не получилось открыть документ: "' + DOCNAME + '"');

    if not IsExists(GetEditor) then
      Raise('Не найден текст документа: "' + DOCNAME + '"');
    PressKeyWithCheck(['![Down]'], GetEditor, 'Count:=3');
    clipboard := Copy2Clipboard;

    if not StringCompare(selectedText, clipboard) then
      Result := ErrorResult('В буфере обмена находится: "' + clipboard + '", а должен: "' + SelectedText + '"');

    CloseTabIfNeeded;
    CollapseTreeInNavigator(LIST_MAIN);
except
  Result := False;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenuWithCloseTabsExceptOne;
end;

{
HLTC72.10: Переход в документ
	HLTC72.10.1: Проверить переход в документ и сравнить с Гарантом по:
  	HLTC72.10.1.2: ссылке элемента развернутого списка (переход должен осуществляться на специфический саб)
}
function  HLTC72_10_1_2_Execute(var  current_state: OleVariant): OleVariant;
const
	LISTPATH1 = 'Правовой навигатор\Законодательство об административных правонарушениях\Формы документов';
  DOCNAME = 'Приказ Госстроя РФ от 2 августа 1999 г. N 18 "О утверждении Инструкции о порядке осуществления государственного контроля за использованием и охраной земель в городских и сельских поселениях. МДС 15-2.99"';
var 
  clipboard;
  SelectedText;
begin
  try
  	Result := true;
    
  	selectedText := 'Приложение 3' + EndOfLine +
  								 'к Инструкции о порядке' + EndOfLine +
  								 'осуществления государственного' + EndOfLine +
  								 'контроля за использованием' + EndOfLine +
  								 'и охраной земель в городских' + EndOfLine +
  								 'и сельских поселениях' + EndOfLine + EndOfLine;

    if not OpenObjectFromFolder(LISTPATH1, OpenMenuTab) then
      Raise('Не получилось открыть список "' + LISTPATH1 + '"');

    if not OpenDocFromList(DOCNAME, GetList) then
      Raise('Не получилось открыть документ: "' + DOCNAME + '"');

    if not IsExists(GetEditor) then
      Raise('Не найден текст документа : "' + DOCNAME + '"');
    PressKeyWithCheck(['![Down]'], GetEditor, 'Count:=6');
    clipboard := Copy2Clipboard;

    if not StringCompare(selectedText, clipboard) then
      Result := ErrorResult('В буфере обмена находится: "' + clipboard + '", а должен: "' + SelectedText + '"');

    CloseTabIfNeeded;
    CollapseTreeInNavigator(LISTPATH1);
except
  Result := False;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenuWithCloseTabsExceptOne;
end;

{
  HLTC72.10.4: Проверить открытие документа в новом окне комбинацией клавиш Alt+Shift+Enter.
}
function  HLTC72_10_4_Execute(var  current_state: OleVariant): OleVariant;
var
  i, w;
begin
try
	Result := true;  
  if not OpenObjectFromFolder(LIST_MAIN, OpenMenuTab) then
    Raise('Не получилось открыть "' + LIST_MAIN + '"');
  if not IsExists(GetList) then
    Raise('Список не найден');
  GetList.Keys('~![Enter]');
     
  for i := 1 to 2 do
  begin
    w := GetF1ShellProcess.WaitWindow(GetMainWindow.WndClass, '*', i, Options.Run.Timeout div 15);
    if not w.Exists then
      Raise('Окно оболочки №' + IntToStr(i) + ' не найдено');
    w.SetFocus;
    if IsExists(GetFromEditor('ТЕКСТ ДОКУМЕНТА', nil, w)) then
    begin
      Log.Message('Найден документ в оболочке №' + IntToStr(i));
      w.Close;
      break;
    end
    else
      Raise('Не найдено новое окно с открытым документом после нажатия "Alt+Shift+Enter" в списке');
  end;
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenu;
end;

{
  	HLTC72.10.5.1: Проверить открытие документа в извлечении.
    HLTC72.10.5.4: Проверить, что можно выбрать режим открытия документов - 
      целиком или в извлечениях специальная кнопка на тулбаре списка.
    HLTC73.23.1.1: В списке нажать соответствующую кнопку на тулбаре и перейти 
      из списка к просмотру документа - он должен быть в извлечениях 
    HLTC73.23.6.1: из списка
}
function  HLTC72_10_5_Execute(var  current_state: OleVariant): OleVariant;
const
  DOCNAME = 'Письмо департамента строительства Краснодарского края от 11 ноября 2003 г. N 07.6.04/3822 "О порядке включения в сметную стоимость строительства транспортно-заготовительно-складских расходов по объектам, финансируемым из краевого бюджета"';
var
  i, ls, rs;
  rubricatorTree;
  listTree;
  clipboard;
  enteringStr: array[0..3] of String;
begin
  enteringStr[0] := DOCNAME;
  enteringStr[1] := 'В соответствии с пунктом 7 Положения об Экономическом Суде Содружества Независимых Государств, утвержденного Соглашением о статусе Экономического Суда Содружества Независимых Государств 6 июля 1992 года, Совет Федерации Федерального Собрания Российской Федерации постановляет:';
  enteringStr[2] := '1. Назначить Запольского Сергея Васильевича на должность судьи Экономического Суда Содружества Независимых Государств.';  
  enteringStr[3] := '2. Настоящее постановление вступает в силу со дня его принятия.';
	Result := false;
 	rubricatorTree := OpenMenuTab;
  if OpenObjectFromFolder(LIST_MAIN, rubricatorTree) then
  begin
    ListTree := GetList;
    ListTree.SetFocus;
    if common.Position_by_Text(listTree, DOCNAME) then
    begin
      SelectMainMenuOpenDocPart;
    	Sys.Keys('[Enter]');
      clipboard := CopyToClipboard(GetEditor, 'ALL', 'HowToCopy:=mainmenu');

    	Result := true;
      for i := 0 to 3 do
      begin
        if i = 0 then ls :='' else ls :='*';
        if i = 3 then rs :='' else rs :='*';
        Result := Result and StringCompare(ls + enteringStr[i] + rs, clipboard);
      end;
      if not Result then
        Log.Error('Документ в извлечениях открыт неправильно!', clipboard);
    end
    else
			Log.Error('Не найден документ: "' + DOCNAME + '"');	

    CollapseTreeInNavigator(LIST_MAIN);
  end
  else
		Log.Error('Не получилось открыть список: "' + LIST_MAIN + '"');      	
  GoToMainMenu;
end;

{
  HLTC72.10 Переход в документ 
    HLTC72.10.5.4 Проверить, что можно выбрать режим открытия документов – целиком или в извлечениях специальная кнопка на тулбаре списка.
}
function  HLTC72_10_5_4_Execute(var  current_state: OleVariant): OleVariant;
var
  button, rez,
  listRubr;
begin
	Result := false;
  GetListOfAllDocuments;  
  button := GetToolbarObject(GetFromList('ТУЛБАР "СПИСОК"'), 'BUTTON', 'Открывать документы в извлеч*');
  if IsExists(button) and IsSupported(button, 'Down')  then
  begin
    rez := button.Down;
    button.Down := not rez;
    button := GetToolbarObject(GetFromList('ТУЛБАР "СПИСОК"'), 'BUTTON', 'Открывать документы в извлеч*');
    Result := button.Down <> rez;
    if not Result then
    	Log.Error('Кнопка "Открывать документы в извлечениях" не изменяет свое состояние')
    else
    button.Down := rez;
  end
  else
  	Log.Error('Кнопка "Открывать документы в извлечениях" не существует');
  GoToMainMenu;
end;

{
  HLTC72.10 Переход в документ 
    HLTC72.10.5.3 Проверить, когда в списке документ с несколькими вхождениями – эти вхождения должны быть отображены в документе (например «Договор о создании союзного госыдарства...» в списке, полученным по поиску в ППР: Рездел\Тема = «Банковская деятельность»). 
}
function HLTC72_10_5_3_Execute(var  current_state: OleVariant): OleVariant;
var
  docName, docsName, cardData;
begin
try	
  Result := true;
  
  cardData := 
  [
    CARD_PPR,
      ([ ([FD_THEME, (['[ИЛИ]Банковская деятельность'])]) ])
  ];
  
  docName := 'Договор "О создании Союзного государства"*';
  docsName := 
  [
    ([FL_EXISTS_CONTEXT_IN_2STRING, docName + '\*Вхождение 1', (['*Статья 13*'])]),
    ([FL_EXISTS_CONTEXT_IN_2STRING, docName + '\Статья 22', (['*Статья 22*'])]),
    ([FL_EXISTS_CONTEXT_IN_2STRING, docName + '\Вхождение 3', (['*Статья 25*'])])    
  ];
  if not SearchInPPR(cardData) then
  	Raise('Не получилось выполнить поиск ППР');
  if not FindInList(docsName) then
  	Raise('Список неверен, видимо вхождения в списке или внутри документа не соответсвует ожидаемым.');
except
  Result := False;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenu;
end;

{
HLTC72.10: Переход в документ
  HLTC72.10.6: Вкладки и окна (настройки)
  Документ открывается из списка(двойным кликом мыши, или Enter), в зависимости от настроек:
  Настройки конфигурации - Настройка интерфейса - Вкладки Основного окна - Открывать документы из списков:
  	HLTC72.10.6.1: В текущей вкладке
      HLTC72.10.6.1.1: Откроется в той же вкладке, что и список 
      HLTC72.10.6.1.2: Новых не появится
      HLTC72.10.6.1.3: Спозиционироваться должны на нужном фрагменте
}
function  HLTC72_10_6_1_Execute(var  current_state: OleVariant): OleVariant;
const
  LOGINNAME = 'HLTC72_10_6_1';
  DOCNAME = 'Налоговый кодекс*';
  CONTEXT = 'Раздел VII. Обжалование актов налоговых органов*';
var 
  docText, tabsCount;
begin
try
  try
  	Result := true;
    if not RestartF1Shell(3, Options.Run.Timeout div 5, LOGINNAME, LOGINNAME) then
      Raise('Не получилось перезапустить оболочку под пользователем "' + LOGINNAME + '"');

    if not SetSettings ([(['НАСТРОЙКИ ИНТЕРФЕЙСА', 'ВКЛАДКИ ОСНОВНОГО ОКНА\ОТКРЫВАТЬ ДОКУМЕНТЫ ИЗ СПИСКОВ\В ТЕКУЩЕЙ ВКЛАДКЕ [GROUPBUTTON]', true])]) then
      Raise('Не удалось в Настройках включить открытие документа В ТЕКУЩЕЙ ВКЛАДКЕ!');            
  
    if not OpenObjectFromFolder(LIST_MAIN, OpenMenuTab) then
      Raise('Не получилось открыть список: "' + LIST_MAIN + '"');
    if not OpenDocFromList(DOCNAME) then
    	Raise('Не найден документ: "' + DOCNAME + '"');

    tabsCount := GetTabsCount;
    if tabsCount <> 1 then
      Raise('Ожидали одну вкладку после открытия документа "' + DOCNAME + '", а открыто ' + IntToStr(tabsCount));

    docText := CopyToClipboard(GetEditor, 'STRING');
    if not StringCompare(CONTEXT, docText) then 
      Raise('Спозиционировались на неправильной строке документа "' + DOCNAME + '"' +  EndOfLine + 'Ожидали строку: "' + CONTEXT + '", а спозиционировались на: "' + docText + '"');
  finally
    //SetDefaultSettings;
    CloseF1Shell;
  end;
except
  Result := False;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
end;

{
	HLTC72.10.6.2: В новой вкладке
    HLTC72.10.6.2.1: Откроется в новой вкладке
    HLTC72.10.6.2.2: Вкладка с документом сразу становится активной
    HLTC72.10.6.2.3: Вкладка со списком не меняется
    HLTC72.10.6.2.4: Спозиционироваться должны на нужном фрагменте
    HLTC72.10.6.2.5: Настройка выбрана по умолчанию
}
function  HLTC72_10_6_2_Execute(var  current_state: OleVariant): OleVariant;
const
  LOGINNAME = 'HLTC72_10_6_2';
  DOCNAME = 'Налоговый кодекс*';
  CONTEXT = 'Раздел VII. Обжалование актов налоговых органов*';
  PAGENAME = 'НАСТРОЙКИ ИНТЕРФЕЙСА';
  PARAMNAME = 'ВКЛАДКИ ОСНОВНОГО ОКНА\ОТКРЫВАТЬ ДОКУМЕНТЫ ИЗ СПИСКОВ\В НОВОЙ ВКЛАДКЕ [GROUPBUTTON]';
var 
  sets, res, docText, tabsCount;
begin
try
  try
  	Result := true;

    if not RestartF1Shell(3, Options.Run.Timeout div 5, LOGINNAME, LOGINNAME) then
      Raise('Не получилось перезапустить оболочку под пользователем "' + LOGINNAME + '"');

    sets := GetSettings([ ([PAGENAME, PARAMNAME]) ]);
    res := GetFromSettingsArr(sets, PAGENAME, PARAMNAME);
    if not res then
    	Raise('По умолчанию в настройках не выбрано открытие документа В НОВОЙ ВКЛАДКЕ !');

    if not OpenObjectFromFolder(LIST_MAIN, OpenMenuTab) then
      Raise('Не получилось открыть список: "' + LIST_MAIN + '"');
    if not OpenDocFromList(DOCNAME) then
    	Raise('Не найден документ: "' + DOCNAME + '"');

    tabsCount := GetTabsCount;
    if tabsCount <> 2 then
      Raise('Ожидали 2 вкладки после открытия документа "' + DOCNAME + '", а открыто ' + IntToStr(tabsCount));

    docText := CopyToClipboard(GetEditor, 'STRING');
    if not StringCompare(CONTEXT, docText) then
      Raise('Спозиционировались на неправильной строке документа "' + DOCNAME + '"' +  EndOfLine + 'Ожидали строку: "' + CONTEXT + '", а спозиционировались на: "' + docText + '"');
    
    if not CloseTab then
      Raise('Не получилось закрыть вкладку с документом "' + DOCNAME + '"');
    if not IsExists(GetList) then
      Raise('Не найден список документов после закрытия вкладки с документом');
  finally
    //SetDefaultSettings;
    CloseF1Shell;
  end;
except
  Result := False;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
end;

{
	HLTC72.10.6.3: В новом окне
    HLTC72.10.6.3.1: Откроется в новом окне, в единственной вкладке
    HLTC72.10.6.3.2: В первом окне вкладка со списком не меняется
    HLTC72.10.6.3.3: В первом окне не появляется новых вкладок
    HLTC72.10.6.3.4: Спозиционироваться должны на нужном фрагменте
}
function  HLTC72_10_6_3_Execute(var  current_state: OleVariant): OleVariant;
const
  LOGINNAME = 'HLTC72_10_6_3';
  DOCNAME = 'Налоговый кодекс*';
  CONTEXT = 'Раздел VII. Обжалование актов налоговых органов*';
var 
  docText, tabsCount;
begin
try
  try
  	Result := true;

    if not RestartF1Shell(3, Options.Run.Timeout div 5, LOGINNAME, LOGINNAME) then
      Raise('Не получилось перезапустить оболочку под пользователем "' + LOGINNAME + '"');

    if not SetSettings ([(['НАСТРОЙКИ ИНТЕРФЕЙСА', 'ВКЛАДКИ ОСНОВНОГО ОКНА\ОТКРЫВАТЬ ДОКУМЕНТЫ ИЗ СПИСКОВ\В НОВОМ ОКНЕ [GROUPBUTTON]', true])]) then
      Raise('Не удалось в Настройках включить открытие документа В НОВОМ ОКНЕ!');

    if not OpenObjectFromFolder(LIST_MAIN, OpenMenuTab) then
      Raise('Не получилось открыть список: "' + LIST_MAIN + '"');
    if not OpenDocFromList(DOCNAME) then
    	Raise('Не найден документ: "' + DOCNAME + '"');

    tabsCount := GetContainerWindowCount;
    if tabsCount <> 2 then
      Raise('Ожидали 2 окна после открытия документа в новом окне, а открыто ' + IntToStr(tabsCount));
    tabsCount := GetTabsCount('ContainerIndex:=1');
    if tabsCount <> 1 then
      Raise('Ожидали одну вкладку в новом окне с документом, а открыто ' + IntToStr(tabsCount));
    tabsCount := GetTabsCount('ContainerIndex:=2');
    if tabsCount <> 1 then
      Raise('Ожидали одну вкладку в окне со списком, а открыто ' + IntToStr(tabsCount));
            
    // закрываем активное окно с документом
    if not CloseContainerWindow('ContainerIndex:=1') then
      Raise('Не получилось закрыть новое окно с документом "' + DOCNAME + '"');
    if not IsExists(GetList) then
      Raise('Не найден список документов после закрытия нового окна с документом');
  finally
    //SetDefaultSettings;
    CloseF1Shell;
  end;
except
  Result := False;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
end;

{
  HLTC72.10.8: Автоматический переход (Настройки конфигурации - Списки документов - Автоматический переход)
    HLTC72.10.8.1: Списки из одного документа не показываются
      1. Открываем КЗ ППР
      2. Выбираем какой-нибудь номер
      3. Жмём Искать
      Получим список из одного документа
      (если нет, то надо выбрать другой номер)

      4. Возвращаемся в КЗ
      5. В настройках включаем автоматический переход:
      Настройки конфигурации - Списки документов - Автоматический переход

      6. Снова жмём Искать
      Теперь, откроется сразу документ. Список показан не будет.
}
function  HLTC72_10_8_1_Execute(var  current_state: OleVariant): OleVariant;
var
  cardData;
begin
try
  try
  	Result := true;
    
    // по умолчанию отключенный АВТОМАТИЧЕСКИЙ ПЕРЕХОД проверяется во всех остальных скриптах
    
    if not SetSettings([ (['СПИСКИ ДОКУМЕНТОВ', 'АВТОМАТИЧЕСКИЙ ПЕРЕХОД [CHECKBOX]', true]) ]) then
      Raise('Не получилось поставить чекбокс в настройках "СПИСКИ ДОКУМЕНТОВ\АВТОМАТИЧЕСКИЙ ПЕРЕХОД [CHECKBOX]"');

    cardData :=
      [
    	CARD_PPR, ([([
    	FD_NUMBER, ([
    		'01-04-81']) ]),([
    	FD_INOPERATIVE_EDITION, ([
    		'Нет']) ]) ])
      ];
    if not SearchInPPR(cardData, 'Expectation:=DOCUMENT') then
      Raise('Не получилось произвести ППР или текст документа не открылся');
  finally
    SetDefaultSettings;
    GoToMainMenu;  
  end;    
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
end;

{
  HLTC72.10.8: Автоматический переход (Настройки конфигурации - Списки документов - Автоматический переход)
    HLTC72.10.8.2:
      Документ открывается всегда в той же вкладке
      1. Включить автоматический переход:
      Настройки конфигурации - Списки документов - Автоматический переход

      2. Построить список из одного документа (например, в ППР выбрать какой-нибудь номер)
      Должны сразу попасть в документ. Список не покажется.
      Документ открывается в той же вкладке, где заполняли КЗ.

      Убедиться, что так происходит вне зависимости от настроек:
      Настройки конфигурации - Настройки интерфейса - Вкладки основного окна - Открывать документы из списков
        HLTC72.10.8.2.1: В текущей вкладке
        HLTC72.10.8.2.2: В новой вкладке
        HLTC72.10.8.2.3: В новом окне
}
function  HLTC72_10_8_2_Execute(var  current_state: OleVariant): OleVariant;
const
  LOGINNAME = 'HLTC72_10_8_2';
var
  i, wndCount, setsName, cardData;
begin
try
  try
  	Result := true;
    
    cardData :=
      [
    	CARD_PPR, ([([
    	FD_NUMBER, ([
    		'01-04-81']) ]),([
    	FD_INOPERATIVE_EDITION, ([
    		'Нет']) ]) ])
      ];

    if not RestartF1Shell(3, Options.Run.Timeout div 5, LOGINNAME, LOGINNAME) then
      Raise('Не получилось перезапустить оболочку под пользователем и паролем "' + LOGINNAME + '"');
    if not SetSettings([ (['СПИСКИ ДОКУМЕНТОВ', 'АВТОМАТИЧЕСКИЙ ПЕРЕХОД [CHECKBOX]', true]) ]) then
      Raise('Не получилось поставить чекбокс в настройках "СПИСКИ ДОКУМЕНТОВ\АВТОМАТИЧЕСКИЙ ПЕРЕХОД [CHECKBOX]"');

    for i := 1 to 3 do 
    begin
      setsName := 'ВКЛАДКИ ОСНОВНОГО ОКНА\ОТКРЫВАТЬ ДОКУМЕНТЫ ИЗ СПИСКОВ\'; 
      case i of
        1: setsName := setsName + 'В ТЕКУЩЕЙ ВКЛАДКЕ [GROUPBUTTON]';
        2: setsName := setsName + 'В НОВОЙ ВКЛАДКЕ [GROUPBUTTON]';
        3: setsName := setsName + 'В НОВОМ ОКНЕ [GROUPBUTTON]';
      end;        

      if not SetSettings ([(['НАСТРОЙКИ ИНТЕРФЕЙСА', setsName, true])]) then
        Raise('Не удалось в Настройках включить "' + setsName + '"');
      if not SearchInPPR(cardData, 'Expectation:=DOCUMENT') then
        Raise('Не получилось произвести ППР или текст документа не открылся');

      wndCount := GetContainerWindowCount;
      if wndCount > 1 then
        Raise('Ожидали 1 окно, а открылось ' + IntToStr(wndCount) + ' окон(а) при включенной настройки "' + setsName + '"');
    end;
  finally
    //SetDefaultSettings;
    CloseF1Shell;  
  end;    
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
end;

{
  HLTC72.10.8.3: Списки не попадают в историю навигации
    1. В настройках включаем автоматический переход:
    Настройки конфигурации - Списки документов - Автоматический переход

    2. Открываем КЗ ППР
    3. Выбираем какой-нибудь номер
    4. Жмём Искать
    Откроется сразу документ. Список показан не будет.

    5. Возвращаемся назад по истории
    Должны попасть в КЗ, не в список.
}
function  HLTC72_10_8_3_Execute(var  current_state: OleVariant): OleVariant;
const
  LOGINNAME = 'HLTC72_10_8_3';
var
  cardData;
begin
try
  try
  	Result := true;
    
    cardData :=
      [
    	CARD_PPR, ([([
    	FD_NUMBER, ([
    		'01-04-81']) ]),([
    	FD_INOPERATIVE_EDITION, ([
    		'Нет']) ]) ])
      ];

    if not RestartF1Shell(3, Options.Run.Timeout div 5, LOGINNAME, LOGINNAME) then
      Raise('Не получилось перезапустить оболочку под пользователем и паролем "' + LOGINNAME + '"');
    if not SetSettings([ (['СПИСКИ ДОКУМЕНТОВ', 'АВТОМАТИЧЕСКИЙ ПЕРЕХОД [CHECKBOX]', true]) ]) then
      Raise('Не получилось поставить чекбокс в настройках "СПИСКИ ДОКУМЕНТОВ\АВТОМАТИЧЕСКИЙ ПЕРЕХОД [CHECKBOX]"');

    if not SearchInPPR(cardData, 'Expectation:=DOCUMENT') then
      Raise('Не получилось произвести ППР или текст документа не открылся');
    if not GoByHistory('НАЗАД') then
      Raise('Не получилось вернуться НАЗАД по истории');
    if not IsExists(GetFromPPR('КАРТОЧКА ЗАПРОСА')) then
      Raise('КЗ ППР не найдена после возврата по истории НАЗАД');
  finally
    //SetDefaultSettings;
    CloseF1Shell;  
  end;    
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
end;

{
  HLTC72.10.8.4: Документ с несколькими вхождениями
    Если в результате поиска получаем документ с 2+ вхождениями, то список показывается.

    1. В ППР вбиваем:
    Тип: Договор
    Раздел/Тема: Банковская деятельность\Организация и регулирование денежного обращения

    2. Жмём Искать
    Получаем список из одного документа, но с двумя вхождениями.
}
function  HLTC72_10_8_4_Execute(var  current_state: OleVariant): OleVariant;
const
  LOGINNAME = 'HLTC72_10_8_4';
var
  cardData;
begin
try
  try
  	Result := true;

  cardData := 
    [
  	CARD_PPR, ([([
  	FD_TYPE, ([
  		'[ИЛИ]Договор']) ]),([
  	FD_THEME, ([
  		'[ИЛИ]Банковская деятельность\Организация и регулирование денежного обращения']) ]),([
  	FD_INOPERATIVE_EDITION, ([
  		'Нет']) ]) ]) 
    ];

    if not RestartF1Shell(3, Options.Run.Timeout div 5, LOGINNAME, LOGINNAME) then
      Raise('Не получилось перезапустить оболочку под пользователем и паролем "' + LOGINNAME + '"');
    if not SetSettings([ (['СПИСКИ ДОКУМЕНТОВ', 'АВТОМАТИЧЕСКИЙ ПЕРЕХОД [CHECKBOX]', true]) ]) then
      Raise('Не получилось поставить чекбокс в настройках "СПИСКИ ДОКУМЕНТОВ\АВТОМАТИЧЕСКИЙ ПЕРЕХОД [CHECKBOX]"');
    if not SearchInPPR(cardData, 'Expectation:=LIST') then
      Raise('Не получилось произвести ППР или не открылся список с 2мя вхождениями (в настройках включена опция "АВТОМАТИЧЕСКИЙ ПЕРЕХОД")');
  finally
    //SetDefaultSettings;
    CloseF1Shell;  
  end;    
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
end;

{
  HLTC72.10.8.5: Документ с одним вхождением на нём и открывается
    1. В настройках включаем автоматический переход:
    Настройки конфигурации - Списки документов - Автоматический переход

    2. В БП ищем контекст:
    Виды налогов и сборов в Российской Федерации. Полномочия законодательных (представительных) органов государственной власти субъектов Российской Федерации и представительных органов

    Должны попасть на Статью 12 Налогового кодекса.
}
function  HLTC72_10_8_5_Execute(var  current_state: OleVariant): OleVariant;
const
  LOGINNAME = 'HLTC72_10_8_5';
  CONTEXT = 'Виды налогов и сборов в Российской Федерации. Полномочия законодательных (представительных) органов государственной власти субъектов Российской Федерации и представительных органов';
  RES_STRING = 'Статья 12. Виды налогов*';
var
  docText;
begin
try
  try
  	Result := true;

    if not RestartF1Shell(3, Options.Run.Timeout div 5, LOGINNAME, LOGINNAME) then
      Raise('Не получилось перезапустить оболочку под пользователем и паролем "' + LOGINNAME + '"');
    if not SetSettings([ (['СПИСКИ ДОКУМЕНТОВ', 'АВТОМАТИЧЕСКИЙ ПЕРЕХОД [CHECKBOX]', true]) ]) then
      Raise('Не получилось поставить чекбокс в настройках "СПИСКИ ДОКУМЕНТОВ\АВТОМАТИЧЕСКИЙ ПЕРЕХОД [CHECKBOX]"');

    if not BaseSearch(nil, CONTEXT) then
      Raise('Не получилось произвести БП по контексту: ' + CONTEXT);

    if not IsExists(GetEditor) then
      Raise('Документ не открылся!');
    docText := CopyToClipboard(GetEditor, 'STRING');
    if not StringCompare(RES_STRING, docText) then
      Raise('Спозиционировались на неправильной строке: "' + docText + '", ожидали: "' + RES_STRING + '"');
  finally
    //SetDefaultSettings;
    CloseF1Shell;  
  end;    
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
end;

{
  HLTC72.10.8.6: Два и более документов
    1. В настройках включаем автоматический переход:
    Настройки конфигурации - Списки документов - Автоматический переход
    2. В БП ищем контекст:
    Виды налогов и сборов в Российской Федерации. Полномочия законодательных

    Получаем список из 2х или более документов.
}
function  HLTC72_10_8_6_Execute(var  current_state: OleVariant): OleVariant;
const
  LOGINNAME = 'HLTC72_10_8_6';
  CONTEXT = 'Виды налогов и сборов в Российской Федерации. Полномочия законодательных';
begin
try
  try
  	Result := true;

    if not RestartF1Shell(3, Options.Run.Timeout div 5, LOGINNAME, LOGINNAME) then
      Raise('Не получилось перезапустить оболочку под пользователем и паролем "' + LOGINNAME + '"');
    if not SetSettings([ (['СПИСКИ ДОКУМЕНТОВ', 'АВТОМАТИЧЕСКИЙ ПЕРЕХОД [CHECKBOX]', true]) ]) then
      Raise('Не получилось поставить чекбокс в настройках "СПИСКИ ДОКУМЕНТОВ\АВТОМАТИЧЕСКИЙ ПЕРЕХОД [CHECKBOX]"');

    if not BaseSearch(nil, CONTEXT) then
      Raise('Не получилось произвести БП по контексту: ' + CONTEXT);
    if not FindInList([ ([FL_NUMBER_BIG_MORE, '2']) ]) then
     	Raise('Открылось не более 2х документов или случилась непредвиденная ошибка');
  finally
    //SetDefaultSettings;
    CloseF1Shell;  
  end;    
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
end;

{
  HLTC72.10.9.1: Из отфильтрованного списка перейти в первый документ. Нажать несколько раз кнопку следующий документ в списке. Нажать кнопку вернуться в список.
}
function  HLTC72_10_9_1_Execute(var  current_state: OleVariant): OleVariant;
const
  DOCNAME = 'Конституция*';
  COUNT = 9;
var
  i, text;
begin
try
	Result := true;  
  if not OpenObjectFromFolder(LIST_MAIN, OpenMenuTab) then
    Raise('Не получилось открыть "' + LIST_MAIN + '"');
  if not OpenDocFromList(DOCNAME, GetList) then
    Raise('Не открылся документ "' + DOCNAME + '" из списка!');

  text := CopyToClipboard(GetEditor, 'ALL');
  if text = '' then
    Raise('Не получилось скопировать содержимое документа в буфер');
  for i := 1 to COUNT do
    if not ClickStatusBarButton('СЛЕДУЮЩИЙ ДОКУМЕНТ В СПИСКЕ') then
      Raise('Не получилось перейти к следующему документу в списке');  
  if text = CopyToClipboard(GetEditor, 'ALL') then
    Raise('После перехода к следующим документам списка, содержимое скопированного текста документа не изменилось');
  for i := 1 to COUNT do
    if not ClickStatusBarButton('ПРЕДЫДУЩИЙ ДОКУМЕНТ В СПИСКЕ') then
      Raise('Не получилось перейти к предыдущему документу в списке');
  if text <> CopyToClipboard(GetEditor, 'ALL') then
    Raise('После возврата к начальному документу списка, содержимое скопированного текста документа отличается');
  Delay(Options.Run.Timeout div 5);
  if not ClickStatusBarButton('ВЕРНУТЬСЯ В СПИСОК') then
    Raise('Не получилось вернуться в список через кнопку "ВЕРНУТЬСЯ В СПИСОК"');
  Delay(Options.Run.Timeout div 3);
  if not IsExists(GetList) then    
    Raise('Список не найден после нажатия кнопки "ВЕРНУТЬСЯ В СПИСОК"');    
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenuWithCloseTabsExceptOne;
end;

{
  HLTC72.10.9.2: Из пересортированного списка перейти в документ из середины списка. Нажать несколько раз кнопку предудыщий документ в списке. Нажать кнопку вернуться в список.
}
function  HLTC72_10_9_2_Execute(var  current_state: OleVariant): OleVariant;
const
  DOCNAME = 'Документ 2005';
  COUNT = 16;
var
  i, text;
begin
try
	Result := true;  
  if not OpenObjectFromFolder(LIST_MAIN, OpenMenuTab) then
    Raise('Не получилось открыть "' + LIST_MAIN + '"');
  if not SetSortParams(SORT_BY_PUBLICATION_DATE, SORT_ASCENDING) then
  	Raise('Не получилось включить нужный тип сортировки');
  if not OpenDocFromList(DOCNAME, GetList) then
    Raise('Не открылся документ "' + DOCNAME + '" из списка!');
  
  for i := 1 to COUNT do
    if not ClickStatusBarButton('ПРЕДЫДУЩИЙ ДОКУМЕНТ В СПИСКЕ') then
      Raise('Не получилось перейти к предыдущему документу в списке');
  if not (ClickStatusBarButton('ВЕРНУТЬСЯ В СПИСОК') and IsExists(GetList)) then
    Raise('Не получилось вернуться в список через кнопку "ВЕРНУТЬСЯ В СПИСОК"');
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenuWithCloseTabsExceptOne;
end;

{
  HLTC72.10.9.3: Проверить возврат в список из документа, открытого из того же списка. Список получать следующими способами:
    HLTC72.10.9.3.1: Базовый поиск, короткий список  
}
function  HLTC72_10_9_3_1_Execute(var  current_state: OleVariant): OleVariant;
begin
try
	Result := true;  
  if not BaseSearch(nil, '12345') then 
    Raise('Не получилось произвести БП');
  if not OpenDocFromList('*', GetList) then
    Raise('Не получилось открыть первый документ в списке');
  if not (ClickStatusBarButton('ВЕРНУТЬСЯ В СПИСОК') and IsExists(GetList)) then
    Raise('Не получилось вернуться в список, построенный из БП (короткий), через кнопку "ВЕРНУТЬСЯ В СПИСОК"');
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenuWithCloseTabsExceptOne;
end;

{
  HLTC72.10.9.3.2: Базовый поиск, полный список
}
function  HLTC72_10_9_3_2_Execute(var  current_state: OleVariant): OleVariant;
begin
try
	Result := true;  
  if not BaseSearch(nil, '1') then 
    Raise('Не получилось произвести БП');
  GetList.Keys('[End][Down][Enter]');
  Delay(Options.Run.Timeout div 5);
  if not IsExists(GetList) then
    Raise('Полный список не найден!');    

  if not OpenDocFromList('*', GetList) then
    Raise('Не получилось открыть первый документ в списке');
  if not (ClickStatusBarButton('ВЕРНУТЬСЯ В СПИСОК') and IsExists(GetList)) then
    Raise('Не получилось вернуться в список, построенный из БП (полный), через кнопку "ВЕРНУТЬСЯ В СПИСОК"');
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenuWithCloseTabsExceptOne;
end;

{
  HLTC72.10.9.3.3: ППР
}
function  HLTC72_10_9_3_3_Execute(var  current_state: OleVariant): OleVariant;
begin
try
	Result := true;  
  if not IsExists(GetListOfAllDocuments) then 
    Raise('Не получилось произвести ППР');
  if not OpenDocFromList('*', GetList) then
    Raise('Не получилось открыть первый документ в списке');
  if not (ClickStatusBarButton('ВЕРНУТЬСЯ В СПИСОК') and IsExists(GetList)) then
    Raise('Не получилось вернуться в список, построенный из ППР, через кнопку "ВЕРНУТЬСЯ В СПИСОК"');
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenuWithCloseTabsExceptOne;
end;

{
  HLTC72.10.9.3.4: ППС
}
function  HLTC72_10_9_3_4_Execute(var  current_state: OleVariant): OleVariant;
begin
try
	Result := true;  
  if not SearchInPPS(['*']) then
    Raise('Не получилось выполнить ППC');
  if not OpenDocFromList('*', GetList) then
    Raise('Не получилось открыть первый документ в списке');
  if not (ClickStatusBarButton('ВЕРНУТЬСЯ В СПИСОК') and IsExists(GetList)) then
    Raise('Не получилось вернуться в список, построенный из ППС, через кнопку "ВЕРНУТЬСЯ В СПИСОК"');
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenuWithCloseTabsExceptOne;
end;

{
  HLTC72.10.9.3.5: ППИО
}
function  HLTC72_10_9_3_5_Execute(var  current_state: OleVariant): OleVariant;
begin
try
	Result := true;  
  if not SearchInPPIO(['*']) then
    Raise('Не получилось выполнить ППИО');
  if not OpenDocFromList('*', GetList) then
    Raise('Не получилось открыть первый документ в списке');
  if not (ClickStatusBarButton('ВЕРНУТЬСЯ В СПИСОК') and IsExists(GetList)) then
    Raise('Не получилось вернуться в список, построенный из ППИО, через кнопку "ВЕРНУТЬСЯ В СПИСОК"');
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenuWithCloseTabsExceptOne;
end;

{
  HLTC72.10.9.3.6: Рубрикатор
}
function  HLTC72_10_9_3_6_Execute(var  current_state: OleVariant): OleVariant;
begin
try
	Result := true;  
  if not OpenObjectFromFolder(LIST_MAIN, OpenMenuTab) then
    Raise('Не получилось открыть "' + LIST_MAIN + '"');
  if not OpenDocFromList('*', GetList) then
    Raise('Не получилось открыть первый документ в списке');
  if not (ClickStatusBarButton('ВЕРНУТЬСЯ В СПИСОК') and IsExists(GetList)) then
    Raise('Не получилось вернуться в список из рубрикатора, через кнопку "ВЕРНУТЬСЯ В СПИСОК"');
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenuWithCloseTabsExceptOne;
end;

{
  HLTC72.10.9.3.7: Мультиссылка (есть в документе 2001)
}
function  HLTC72_10_9_3_7_Execute(var  current_state: OleVariant): OleVariant;
begin
try
	Result := true;  
  if not OpenDocByNumber(2001) then
    Raise('Не получилось открыть по номеру документ "2001"');   
  if not ClickByHyperLink(GetEditor, 'Мультиссылка на все книги') then
    Raise('Не получилось кликнуть по ссылке "Мультиссылка на все книги"');
  if not OpenDocFromList('*', GetList) then
    Raise('Не получилось открыть первый документ в списке');
  Delay(Options.Run.Timeout div 3);
  if not (ClickStatusBarButton('ВЕРНУТЬСЯ В СПИСОК') and IsExists(GetList)) then
    Raise('Не получилось вернуться в список МУЛЬТИССЫЛКИ, через кнопку "ВЕРНУТЬСЯ В СПИСОК"');
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenuWithCloseTabsExceptOne;
end;

{
  HLTC72.10.9.3.8: Списки корреспондентов (ссылки на документ)
}
function  HLTC72_10_9_3_8_Execute(var  current_state: OleVariant): OleVariant;
var
  list;
begin
try
	Result := true;  
  OpenDocByNumber(10003000); 
  list := OpenInDocument('ССЫЛКИ НА ДОКУМЕНТ');
  if not IsExists(list) then
    Raise('Не получилось открыть ССЫЛКИ НА ДОКУМЕНТ №10003000');
  if not OpenDocFromList('*', list) then
    Raise('Не получилось открыть первый документ в списке');
  if not (ClickStatusBarButton('ВЕРНУТЬСЯ В СПИСОК') and IsExists(GetList)) then
    Raise('Не получилось вернуться в список КОРРЕСПОНДЕНТОВ, через кнопку "ВЕРНУТЬСЯ В СПИСОК"');
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenuWithCloseTabsExceptOne;
end;

{
  HLTC72.10.9.3.9: Списки респондентов (ссылки из документа)
}
function  HLTC72_10_9_3_9_Execute(var  current_state: OleVariant): OleVariant;
var
  list;
begin
try
	Result := true;  
  OpenDocByNumber(10003000); 
  list := OpenInDocument('ССЫЛКИ ИЗ ДОКУМЕНТА');
  if not IsExists(list) then
    Raise('Не получилось открыть ССЫЛКИ ИЗ ДОКУМЕНТА №10003000');
  if not OpenDocFromList('*', list) then
    Raise('Не получилось открыть первый документ в списке');
  if not (ClickStatusBarButton('ВЕРНУТЬСЯ В СПИСОК') and IsExists(GetList)) then
    Raise('Не получилось вернуться в список РЕСПОНДЕНТОВ, через кнопку "ВЕРНУТЬСЯ В СПИСОК"');
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenuWithCloseTabsExceptOne;
end;

{
HLTC72.32: Работа мышью
	HLTC72.32.1: Переход в документы из списка осуществляется после того, как 
  нужный элемент списка выделен (первый клик) и еще раз нажат на нем клик.
}     
function HLTC72_32_1_Execute(var  current_state: OleVariant): OleVariant;
var
  rubricatorTree;
  clipboard, docName;
  LISTPATH1;
begin
	LISTPATH1 := LIST_RUBR_MAIN + '\Порядок организации и проведения массовых мероприятий';
  //
	Result := false;
  rubricatorTree := OpenMenuTab;
  if (common.Position_Internal(rubricatorTree, LISTPATH1)) then
  begin
		Sys.Keys('[Enter]');
    PressKeyWithCheck(['[Down]'], GetList);

    if MoveMouseToObject(GetList, LIST_PATTERN, 2, 0, true) then
    begin
      docName := common.GetWindowText(GetList);
      OpenDocFromList('', nil, 'How:=CLICK_BY_LIST_PATTERN');
      Result := IsExists(GetEditor);
      if not Result then 
        Log.Error('Окно редактора не открылось!')
      else
      begin
        clipboard := CopyToClipboard(GetEditor,'ПЕРВАЯ СТРОКА В ДОКУМЕНТЕ');
        Result := Result and (clipboard <> '') and StringCompare (clipboard + '*', docName);
        if not Result then 
          Log.Error('Имя открытого документа не верно: "' + clipboard + '"');
        CloseTabIfNeeded;
      end;
    end
    else
      Log.Error('В списке не найдена иконка ДЕЙСТВУЮЩЕГО документа');
    CollapseTreeInNavigator(LISTPATH1);
  end
  else
		Log.Error('Не найден элемент: "' + LISTPATH1 + '"');
  GoToMainMenuWithCloseTabsExceptOne;
end;

{
HLTC72.9: Контекстный поиск в списке
	HLTC72.9.3: Поиск с начала/текущей позиции и в выделенной части списка
  	HLTC72.9.3.5: Проверить поиск одного слова (не словосочетания):
    	HLTC72.9.3.5.1:  с текущей позиции
      	HLTC72.9.3.5.1.1: слово находится выше текущей позиции
}
function  HLTC72_9_3_5_1_1_Execute(var  current_state: OleVariant): OleVariant;
const
  CONTEXT = 'голосовании';
var 
  rubricatorTree;
  listTree;
begin
	Result := false;
 	rubricatorTree := OpenMenuTab;
  if (common.Position_Internal(rubricatorTree, LIST_MAIN)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
    Sys.Keys('[Down][Down][Down]');        
    Result := BaseSearchInDocNames(listTree, CONTEXT)
             	and StringCompare('*' + CONTEXT + '*', common.GetWindowText(listTree.Handle));
    if not Result then
    	Log.Error('Искомый текст "' + CONTEXT + '" НЕ найден');
    CollapseTreeInNavigator(LIST_MAIN);
  end
  else
		Log.Error('Не найден элемент: "' + LIST_MAIN + '"');      	
  GoToMainMenu;
end;

{
HLTC72.9: Контекстный поиск в списке
	HLTC72.9.3: Поиск с начала/текущей позиции и в выделенной части списка
  	HLTC72.9.3.5: Проверить поиск одного слова (не словосочетания):
    	HLTC72.9.3.5.1: с текущей позиции
      	HLTC72.9.3.5.1.2: слово находится ниже текущей позиции
}
function  HLTC72_9_3_5_1_2_Execute(var  current_state: OleVariant): OleVariant;
const
  CONTEXT = 'приказ';
var 
  rubricatorTree;
  listTree;
begin
	Result := false;
 	rubricatorTree := OpenMenuTab;
  if (common.Position_Internal(rubricatorTree, LIST_MAIN)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
    Sys.Keys('[Down][Down]');                     //2 раза, т.к. первый документ находится из-за синонима 1
    Result := (BaseSearchInList(listTree, CONTEXT, 'IsCloseWindow:=false') 
              and BaseSearchInList(listTree, CONTEXT, 'IsContinueSearch:=true'))
              and (StringCompare('*Приказ Минтранса РФ от 14 мая 2001*', common.GetWindowText(ListTree.Handle)));
    if not Result then
    	Log.Error('Не найден документ, содержащий слова "' + CONTEXT + '"');
    CollapseTreeInNavigator(LIST_MAIN);
  end
  else
		Log.Error('Не найден элемент: "' + LIST_MAIN + '"');      	
  GoToMainMenu;
end;

{
HLTC72.9: Контекстный поиск в списке
	HLTC72.9.3: Поиск с начала/текущей позиции и в выделенной части списка
  	HLTC72.9.3.5: Проверить поиск одного слова (не словосочетания):
    	HLTC72.9.3.5.2: с начала документа
      	HLTC72.9.3.5.2.1: слово находится выше текущей позиции
}
function  HLTC72_9_3_5_2_1_Execute(var  current_state: OleVariant): OleVariant;
const
  CONTEXT = 'голосовании';
var 
  rubricatorTree;
  listTree;
begin
	Result := false;
 	rubricatorTree := OpenMenuTab;
  if (OpenObjectFromFolder(LIST_MAIN, rubricatorTree)) then
  begin
    listTree := GetList;
    listTree.SetFocus;
    Sys.Keys('[Down][Down]');        
    Result := (BaseSearchInList(listTree, CONTEXT))
              	and (StringCompare('*' + CONTEXT + '*', common.GetWindowText(ListTree.Handle)));
    if not Result then
    	Log.Error('Искомый текст "' + CONTEXT + '" НЕ найден');
    CollapseTreeInNavigator(LIST_MAIN);
  end
  else
		Log.Error('Не найден элемент: "' + LIST_MAIN + '"');      	
  GoToMainMenu;
end;

{
HLTC72.9: Контекстный поиск в списке
	HLTC72.9.3: Поиск с начала/текущей позиции и в выделенной части списка
  	HLTC72.9.3.5: Проверить поиск одного слова (не словосочетания):
    	HLTC72.9.3.5.2: с начала документа
      	HLTC72.9.3.5.2.2: слово находится ниже текущей позиции
}
function  HLTC72_9_3_5_2_2_Execute(var  current_state: OleVariant): OleVariant;
const
  CONTEXT = 'приказ';
var 
  rubricatorTree;
  listTree;
begin
	Result := false;
 	rubricatorTree := OpenMenuTab;
  if (common.Position_Internal(rubricatorTree, LIST_MAIN)) then
  begin
    common.ClipboardClean;
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
    Sys.Keys('[Down][Down]');
    Result := (BaseSearchInList(listTree, CONTEXT, 'IsCloseWindow:=false') and BaseSearchInList(listTree, CONTEXT, 'IsContinueSearch:=true'))
              	and (StringCompare('*Приказ Минтранса РФ от 14 мая 2001*', common.GetWindowText(ListTree.Handle)));
    if not Result then
    	Log.Error('Искомый текст "' + CONTEXT + '" НЕ найден');
    CollapseTreeInNavigator(LIST_MAIN);
  end
  else
		Log.Error('Не найден элемент: "' + LIST_MAIN + '"');      	
  GoToMainMenu;
end;

{
  HLTC72.9.9: Проверить, что когда поле «Искать текст» пусто, начать контекстный поиск невозможно
}
function  HLTC72_9_9_Execute(var  current_state: OleVariant): OleVariant;
const
  INFO = 'Введите*описание*своего*вопроса*поиска*';
begin
try
	Result := true;  
  if not OpenObjectFromFolder(LIST_MAIN, OpenMenuTab) then
    Raise('Не получилось открыть "' + LIST_MAIN + '"');
  if not IsExists(GetList) then
    Raise('Список почему-то не открылся');
  if not StringCompare(INFO, GetParam(BaseSearch(GetList, ' ', 'IsExtendedResult:=true;searchType:=' + SRCH_IN_LIST_DOC_NAMES), 'InfoMsgText', '')) then
    Raise('Сообщение о поиске пустого контекста не найдено');
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenu;
end;

{
  HLTC72.9.18 Проверить морфологический поиск в списке:
    HLTC72.9.18.1: Открыть список по первой ветке рубрикатора, сделать поиск в названиях по контексту «утверждение».
                   Проверить, что найдутся 6 документов.
}
function  HLTC72_9_18_1_Execute(var  current_state: OleVariant): OleVariant;
const
  CONTEXT = 'утверждение';
  COUNT = '6';
var 
  rubricatorTree;
  docsName;
begin
	Result := false;
  if OpenObjectFromFolder(LIST_MAIN, OpenMenuTab) then
  begin
    if not BaseSearchInDocNames(GetList, CONTEXT) then
      Result := ErrorResult('Не получилось провести поиск контекста "' + CONTEXT + '"')
    else
    begin
      docsName := 
        [
        ([FL_NUMBER, COUNT])
        ];
      Result := FindInList(docsName);
      if not Result then
      	Log.Error('Неверное количество документов в результате поиска по "' + CONTEXT + '", должно быть ' + COUNT);
    end;
    CollapseTreeInNavigator(LIST_MAIN);
  end
  else
		Log.Error('Не найден элемент: "' + LISTPATH1 + '"');      	
  GoToMainMenu;
end;

{
  HLTC72.9.18 Проверить морфологический поиск в списке:  
    HLTC72.9.18.2: Открыть список по первой ветке рубрикатора, вызвать окно контекстного поиска, 
      ввести «письмо суда». Проверить, что найдутся 2 документа,
      содержащие в названии этот контекст в различных словоформах.
}
function  HLTC72_9_18_2_Execute(var  current_state: OleVariant): OleVariant;
const
  CONTEXT = 'письмо суда';
  COUNT = '2';
var 
  rubricatorTree;
  docsName;
begin
	Result := false;
  if (OpenObjectFromFolder(LIST_MAIN, OpenMenuTab)) then
  begin
    if not BaseSearchInDocNames(GetList, CONTEXT) then
      Result := ErrorResult('Не получилось провести поиск контекста "' + CONTEXT + '"')
    else
    begin
      docsName := 
        [
        ([FL_NUMBER, COUNT]),
        ([FL_EXISTS, 'Информационное письмо Президиума Высшего Арбитражного Суда РФ от 28 января 2005 г. N 90*']),
        ([FL_EXISTS, 'Информационное письмо Президиума Высшего Арбитражного Суда РФ от 20 января 2005 г. N 89*'])
        ];
      Result := FindInList(docsName);
      if not Result then
      	Log.Error('Неверное количество документов в результате поиска по "' + CONTEXT + '", должно быть ' + COUNT);
    end;
    CollapseTreeInNavigator(LIST_MAIN);
  end
  else
		Log.Error('Не найден элемент: "' + LISTPATH1 + '"');      	
  GoToMainMenu;
end;

{
  HLTC72.9.18 Проверить морфологический поиск в списке:  
    HLTC72.9.18.3: Открыть список по первой ветке рубрикатора, вызвать окно контекстного поиска, ввести «обзор ипотеки».
      Проверить, что найдется документ «Информационное письмо Президиума Высшего Арбитражного Суда РФ от 28 января 2005 г. N 90».
}
function  HLTC72_9_18_3_Execute(var  current_state: OleVariant): OleVariant;
const
  CONTEXT = 'обзор ипотеки';
var 
  rubricatorTree;
  docsName;
begin
	Result := false;
  if (OpenObjectFromFolder(LIST_MAIN, OpenMenuTab)) then
  begin
    if not BaseSearchInList(GetList, CONTEXT) then
      Result := ErrorResult('Не получилось провести поиск контекста "' + CONTEXT + '"')
    else
    begin
      docsName := 
        [
          ([FL_EXISTS, 'Информационное письмо Президиума Высшего Арбитражного Суда РФ от 28 января 2005 г. N 90*'])
        ];
      Result := FindInList(docsName);
      if not Result then
      	Log.Error('Неверный результат поиска по контексту: ' + CONTEXT);
    end;
    CollapseTreeInNavigator(LIST_MAIN);
  end
  else
		Log.Error('Не найден элемент: "' + LISTPATH1 + '"');      	
  GoToMainMenu;
end;

{
  HLTC72.9.18 Проверить морфологический поиск в списке:  
    HLTC72.9.18.4: Проверить также морфопоиск для СКР: открыть список респондентов к конституции, сделать поиск по контексту «редакции». 
      Должно найтись 9 документов, среди них "Уголовный кодекс РФ от 13 июня 1996 г. N 63-ФЗ (действующая редакция)".
}
function  HLTC72_9_18_4_Execute(var  current_state: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;
  CONTEXT = 'редакции';
  COUNT = '9';
var 
  rubricatorTree;
  corrWnd;
  docsName;
begin
	Result := false;
  if (OpenDocByNumber(DOC_NUM)) then
  begin
    corrWnd := OpenInDocument('ССЫЛКИ НА ДОКУМЕНТ');
    if not IsExists(corrWnd) then
      Result := ErrorResult('Не получилось открыть "ССЫЛКИ НА ДОКУМЕНТ"')
    else
    if not BaseSearchInDocNames(corrWnd, CONTEXT) then
      Result := ErrorResult('Не получилось провести поиск контекста "' + CONTEXT + '"')
    else
    begin
      docsName := 
        [
        ([FL_NUMBER, COUNT]),
        ([FL_EXISTS, 'Уголовный кодекс*N 63-ФЗ*'])
        ];
      Result := FindInList(docsName);
      if not Result then
      	Log.Error('Неверное количество документов в результате поиска по "' + CONTEXT + '", должно быть ' + COUNT);
    end;
  end
  else
    Log.Error('Не получилось открыть Документ по номеру ' + IntToStr(DOC_NUM));      	
  GoToMainMenu;
end;

{
  HLTC72.9.5 Специальные тесты 
    HLTC72.9.5.6 Проверить открытие документа после пересортировки. 
                  Зайти в список по первой ветке, отсортировать его по дате издания, 
                  потом по юридической силе, зайти в конституцию из этого списка. Не должно быть ошибок.
}
function  HLTC72_9_5_6_Execute(var  current_state: OleVariant): OleVariant;
const
  DOCNAME = 'Конституция Российской Федерации (принята на всенародном голосовании 12 декабря 1993 г.)';
var 
  rubricatorTree; 
  listTree;
  opendoc;
begin
	Result := false;
  rubricatorTree:= OpenMenuTab;
  if (common.Position_Internal(rubricatorTree, LIST_MAIN)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
    //Включаем сортировку
    if SetSortParams(SORT_BY_PUBLICATION_DATE, '') and SetSortParams(SORT_BY_JUROR_STRENGTH, '') then
    begin
      if OpenDocFromList(DOCNAME, listTree) then
      begin
        opendoc := CopyToClipboard(GetEditor ,'ПЕРВАЯ СТРОКА В ДОКУМЕНТЕ');
        Result :=(opendoc <>'') and StringCompare(opendoc + '*', DOCNAME);
        if not Result then
        	Log.Error('После пересортировки спика, не открывается документ "' + DOCNAME + '"');
        CloseTabIfNeeded;
      end
      else
      	Log.Error('Не получилось открыть: "' + DOCNAME + '"');
    end
    else
    	Log.Error('Невозможно включить нужный тип сортировки');
    CollapseTreeInNavigator(LIST_MAIN);
  end
  else
		Log.Error('Не найден элемент: "' + LIST_MAIN + '"');
  GoToMainMenuWithCloseTabsExceptOne;
end;

{
  HLTC72.9.5 Специальные тесты 
    HLTC72.9.5.7 Проверить открытие документа после установки закладки. 
    Открыть список по первой ветке, из списка поставить закладку на конституцию,
    закрыть оболочку и снова открыть, через список по первой ветке открыть конституцию.
    Не должно быть ошибок. 
}
function  HLTC72_9_5_7_Execute(var  current_state: OleVariant): OleVariant;
const
  DOCNAME = 'Конституция Российской Федерации (принята на всенародном голосовании 12 декабря 1993 г.)';
  SAVEDNAME = 'HLTC72_9_5_7';
var 
  rubricatorTree; 
  listTree;
  opendoc, i;
begin
	Result := false;
  if RestartF1Shell(3,Options.Run.Timeout div 6,SAVEDNAME,SAVEDNAME) then
  for i := 1 to 2 do
  begin
    GoToMainMenu;
    rubricatorTree:= OpenMenuTab;
    if (common.Position_Internal(rubricatorTree, LIST_MAIN)) then
    begin
  		Sys.Keys('[Enter]');
      listTree := GetList;
      listTree.SetFocus;
      if common.Position_by_Text(listTree, DOCNAME) then
      case i of
        1:
        begin
   				DeleteObjectFromFolder(DOCS_PATH + SAVEDNAME);
          listTree.SetFocus;
          if not SetBookmark(SAVEDNAME, SAVEDNAME)
             and RestartF1Shell(3,Options.Run.Timeout div 6,SAVEDNAME,SAVEDNAME) then
          begin
            Log.Error('Не получилось установить закладку на документ в списке: "' + DOCNAME + '" и перезапустить оболочку');
            break;
          end;
        end;
        2: 
        begin
          OpenDocFromList;

          opendoc := CopyToClipboard(GetEditor ,'ПЕРВАЯ СТРОКА В ДОКУМЕНТЕ');
          Result :=(opendoc <>'') and StringCompare(opendoc + '*', DOCNAME);
          if not Result then
          	ErrorResult('Не открывается документ после установки закладки и перезапуска оболочки "' + DOCNAME + '"','В буфере "' + opendoc + '"');
          if not DeleteObjectFromFolder(MY_DOCS_PATH + SAVEDNAME) then
            Result := ErrorResult('Не найдена закладка: "' + SAVEDNAME + '"');
          
          CloseTabIfNeeded;          
          CollapseTreeInNavigator(LIST_MAIN);
        end;
      end
      else
      	Log.Error('Не найден документ: "' + DOCNAME + '"');      	
    end
    else      
  		Log.Error('Не найден элемент: "' + LIST_MAIN + '"');
  end
  else
  	Log.Error('Не удалось перезапустить оболочку под логином: "' + SAVEDNAME + '"');
  //
  DeleteObjectFromFolder(MY_DOCS_PATH + SAVEDNAME);  
  GoToMainMenuWithCloseTabsExceptOne;
end;

{
HLTC72.9: Контекстный поиск в списке
  HLTC72.9.10: Проверить, что при нахождении контекста строится новый список
}
function  HLTC72_9_10_Execute(var  current_state: OleVariant): OleVariant;
const
  CONTEXT = '2001';
var
  rubricatorTree;
  docsName;
begin
	Result := false;
 	rubricatorTree := OpenMenuTab;
  if (common.Position_Internal(rubricatorTree, LIST_MAIN)) then
  begin
		Sys.Keys('[Enter]');
    if not BaseSearchInDocNames(GetList, CONTEXT) then
      Result := ErrorResult('Не получилось провести поиск контекста "' + CONTEXT + '"')
    else
    begin
      docsName := 
        [
          ([FL_NUMBER, '4'])
        ];
      Result := FindInList(docsName);
      if not Result then
      	Log.Error('Результат поиска в названиях документов не соответствует эталону');
    end;
    CollapseTreeInNavigator(LIST_MAIN);
  end
  else
		Log.Error('Не найден элемент: "' + LIST_MAIN + '"');
  GoToMainMenu;
end;

{
HLTC72.9: Контекстный поиск в списке
	HLTC72.9.5: Специальные тесты
		HLTC72.9.5.2: Проверить, что ранее введенные контексты для поиска сохраняются и могут быть выбраны для последующих поисков
}
function  HLTC72_9_5_2_Execute(var  current_state: OleVariant): OleVariant;
const
  CONTEXT = 'решение';  
  CONTEXT1 = 'протокол';
var 
  rubricatorTree, listTree, w;
begin
	Result := false;
 	rubricatorTree := OpenMenuTab;
  if (common.Position_Internal(rubricatorTree, LIST_MAIN)) then
  begin
		Sys.Keys('[Enter]');
    listTree := GetList;
    listTree.SetFocus;
    Result := BaseSearchInList(listTree, CONTEXT);
    if not Result then
    	Log.Error('Искомый текст "' + CONTEXT + '" НЕ найден');
    
    Sys.Keys('[Home]');
      
    if not BaseSearchInList(listTree, CONTEXT1, 'IsCloseWindow:=false') then
    	Result := ErrorResult('Искомый текст "' + CONTEXT1 + '" НЕ найден');
    
    w := GetFromBaseSearch('КОМБОБОКС "БАЗОВЫЙ ПОИСК"');
    if IsExists(w) then
    begin
      w.Keys('^[Down]');
      if not SelectInCombobox(w, CONTEXT) then
      	Result := ErrorResult('Ранее введенный контекст "' + CONTEXT + '" НЕ сохранился');     
      w.Keys('[Esc]');
    end
    else
    	Result := ErrorResult('КОМБОБОКС "БАЗОВЫЙ ПОИСК" не найден!');                                                                    
    CollapseTreeInNavigator(LIST_MAIN);
  end
  else
		Log.Error('Не найден элемент: "' + LIST_MAIN + '"');      	
  GoToMainMenu;
end;

{
HLTC72.9: Контекстный поиск в списке
	HLTC72.9.11: Проверить, что при отсутствии контекста система предлагает провести поиск по всей базе
}
function  HLTC72_9_11_Execute(var  current_state: OleVariant): OleVariant;
const
  CONTEXT = 'ппц';
  INFO = '*в*списке*нет*документов*провести*поиск*по*всему*?*';
var 
  rubricatorTree;
  listTree;
begin
	Result := false;  
	rubricatorTree := OpenMenuTab;
  if (common.Position_Internal(rubricatorTree, LIST_MAIN)) then
  begin
		Sys.Keys('[Enter]');
    Result := StringCompare(INFO,
                            GetParam(BaseSearchInList(GetList, CONTEXT, 'IsExtendedResult:=true'), 'InfoMsgText', '')
                            );
    if not Result then
    	Log.Error('Информационное окно не найдено, или сообщение в окне некоррекно, после поиска контекста "' + CONTEXT + '"');
    CollapseTreeInNavigator(LIST_MAIN);
  end
  else
		Log.Error('Не найден элемент: "' + LIST_MAIN + '"');      	
  GoToMainMenu;
end;

{
HLTC72.9: Контекстный поиск в списке
  HLTC72.9.12: По рубрикатору дойти до списка (Правовой навигатор\Банковская деятельность\Организация и регулирование денежного обращения). 
  Вызвать контекстный поиск и набрать «договора»(без кавычек). Нажать искать. 
  Проверить, что найдется 6 документов.
}
function  HLTC72_9_12_Execute(var  current_state: OleVariant): OleVariant;
const
  CONTEXT = 'договора';
  COUNT = '6';
var 
  rubricatorTree;
  docsName;
  LISTPATH1;
begin
	LISTPATH1 := PNAV + '\Банковская деятельность\Организация и регулирование денежного обращения';
  //
	Result := false;
 	rubricatorTree := OpenMenuTab;
  if (common.Position_Internal(rubricatorTree, LISTPATH1)) then
  begin
		Sys.Keys('[Enter]');
    if not BaseSearchInDocNames(GetList, CONTEXT) then
      Result := ErrorResult('Не получилось провести поиск контекста "' + CONTEXT + '"')
    else
    begin
      docsName := 
        [
        ([FL_NUMBER, COUNT])
        ];
      Result := FindInList(docsName);
      if not Result then
      	Log.Error('Неверное количество документов в результате поиска по "' + CONTEXT + '", должно быть ' + COUNT);
    end;
    CollapseTreeInNavigator(LISTPATH1);
  end
  else
		Log.Error('Не найден элемент: "' + LISTPATH1 + '"');      	
  GoToMainMenu;
end;

{
HLTC72.36: Поиск в списке
  HLTC72.36.1: Проверить, что есть возможность искать в текущем списке с помощью операции «Уточнить список»
    HLTC72.36.1.1: В расширенной конфигурации должна быть кнопка на тулбаре
    HLTC72.36.1.2: Должен быть соответствующий пункт в меню Анализ
}
function  HLTC72_36_1_Execute(var  current_state: OleVariant): OleVariant;
const
  CONTEXT = 'конституция с поправками';
  DOC_NUM = 4;
var 
  rubricatorTree;
  LISTPATH1;
begin
	LISTPATH1 := PNAV + '\Банковская деятельность\Организация и регулирование денежного обращения';

	Result := false;
 	rubricatorTree := OpenMenuTab;
  if (common.Position_Internal(rubricatorTree, LISTPATH1)) then
  begin
		Sys.Keys('[Enter]');
    GetList.SetFocus;

    if ClickToolbarButton(GetFromList('ТУЛБАР "СПИСОК"'),'Уточнить список') then
  		Result := BaseSearchInList(GetList, CONTEXT, 'IsOpenWindow:=false') and (CountElementInList(GetList) = DOC_NUM)
    else
     	Log.Error('Не получилось кликнуть по кнопке на тулбаре "Уточнить список"');
      
    if not Result then 
     	Log.Error('Неправильно работает Уточнить список (кнопка на тулбаре). Количество элементов списка: ' + IntToStr(CountElementInList(GetList)) + '. Должно быть: ' + IntToStr(DOC_NUM))
    else
    begin
      if ClickByMainMenuItem('Анализ\Уточнить список') then
        Result := BaseSearchInList(GetList, CONTEXT, 'IsOpenWindow:=false') and (CountElementInList(GetList) = DOC_NUM)
      else
       	Log.Error('Не получилось кликнуть по пункту меню "Анализ\Уточнить список"');
        
      if not Result then 
        Log.Error('Неправильно работает Уточнить список (элемент главного меню). Количество элементов списка: ' + IntToStr(CountElementInList(GetList)) + '. Должно быть: ' + IntToStr(DOC_NUM));
    end;
    CollapseTreeInNavigator(LISTPATH1);
  end
  else
		Log.Error('Не найден элемент: "' + LISTPATH1 + '"');      	
  GoToMainMenu;
end;

{
  HLTC72.36.1.3: В расширенной конфигурации:
    1. Зайти в конституцию 
    2. Построить список всех корреспондентов к ней
    3. Нажать кнопку «Уточнить список» на тулбаре корреспондентов 
    4. Выбрать «список: в названиях» 
    5. Ввести название документа, например, «Устав Читинской области (в редакции от 30 мая 2001 г.)» 
    6. Выбрать вид правовой информации «Акты органов власти»
    Проверить, что в полученном списке найден один документ с вхождениями.
}
function  HLTC72_36_1_3_Execute(var  current_state: OleVariant): OleVariant;
const
  DOCNUM = 10003000;
  CONTEXT = 'Устав Читинской области (в редакции от 30 мая 2001 г.)';
  DOC1 = 'Устав Чит*\*Вхождение 1';
  DOC2 = 'Устав Чит*\*Вхождение 26';
var
  list1;
begin
try
  Result := true;
  if not OpenDocByNumber(DOCNUM) then
    Raise('Не получилось открыть документ №' + IntToStr(DOCNUM));
  list1 := OpenInDocument('ССЫЛКИ НА ДОКУМЕНТ');
  if not IsExists(list1) then
    Raise('Не получилось открыть ССЫЛКИ НА ДОКУМЕНТ для документа ' + IntToStr(DOCNUM));

  if not IsExists(OpenBaseSearch(SRCH_IN_LIST_REFINE_LIST)) then
    Raise('Не получилось Уточнить список Cсылок на документ');
  if not SelectInCombobox(GetFromBaseSearch('КОМБОБОКС "ОБЛАСТЬ ПОИСКА"'), SRCH_IN_LIST_DOC_NAMES) then
    Raise('Не получилось выбрать нужную область поиска "' + SRCH_IN_LIST_DOC_NAMES + '"');
  if not BaseSearch(list1, CONTEXT, 'IsOpenWindow:=false') then
    Raise('Не получилось сделать поиск "' + CONTEXT + '" в названиях документов списка');

  if not FindInList([
                      ([FL_NUMBER, 2]),
                      ([FL_EXISTS_INT, DOC1]), 
                      ([FL_EXISTS_INT, DOC2]) 
                    ]) then
    Raise('Не найден документ или его вхождения: "' + DOC1 + '" или "' + DOC2 + '"');  
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenu;
end;

{
  HLTC72.37: Экспорт cписков в xml. Количество документов в xml = количеству документов в списке + вхождения, начиная со второго. Для документов с вхождениями в параметре point указывается номер саба, на который ссылается документ. 
    HLTC72.37.1: В контексном меню списка должен быть пункт Экспорт списка в xml с подпунктами Весь список и Выделенные документы.
    HLTC72.37.2: Проэкспортировать небольшой список(до 10 документов) в xml. Проверить, что экспорт прошел корректно и в файле присутствуют все проэкспортированные документы. Проверить правильность сохранения сабов.
    HLTC72.37.4: Проэкспортировать один документ. Проверить правильность сохранения сабов.
}
function  HLTC72_37_1_Execute(var  current_state: OleVariant): OleVariant;
const
  DOCNAME = 'Конституция*';
begin
try
  Result := true;
  if not OpenObjectFromFolder(LIST_LANG, OpenMenuTab) then
    Raise('Не получилось открыть "' + LIST_LANG + '"');

  Result := SaveAndCompareFiles(GetList, SAVE_EXPORT_XML_ALL, 'list_xml_all.xml') and Result;

  if not Position_Internal(GetList, DOCNAME, DELIM_CHAR, true) then
    Raise('Не найден документ "' + DOCNAME + '"');
  Result := SaveAndCompareFiles(GetList, SAVE_EXPORT_XML_SELECTED, 'list_xml_selected.xml') and Result;
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenu;
end;

{
  HLTC72.37.3: Проэкспортировать список всех документов. Т.к. этот список не содержит документов с вхождениями, то все сабы должны быть нулевыми.
}
function  HLTC72_37_3_Execute(var  current_state: OleVariant): OleVariant;
const
  STR1 = 'point="0"';
  STR2 = 'point="';
var
  filePos, fileBody, pathTofile;
begin
try
  Result := true;
  if not IsExists(GetListOfAllDocuments) then
    Raise('Не получилось построить список всех документов');
  pathTofile := GetTempDirectory + 'list_all_xml.xml';
  if not SaveDocToFile(GetList, pathTofile, SAVE_EXPORT_XML_ALL) then
    Raise('Не получилось сделать экспорт списка в файл "' + pathTofile + '"');
  
  fileBody := GetFileBody(pathTofile);
  if fileBody = '' then 
    Raise('Файл "' + pathTofile + '" пустой');
  while true do
  begin
    filePos := Pos(STR1, fileBody);
    if filePos <> 0 then
      Delete(fileBody, filePos, Length(STR1))
    else
      break;
  end;    
    
  if Pos(STR2, fileBody) <> 0 then
  begin
    Log.File(pathTofile, 'Файл с экспортированным XML-списком всех документов');
    Raise('Файл с экспортированным XML-списком всех документов содержит не нулевой САБ (point="!=0")');
  end;
except
  Result := False;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenu;
end;

{
  HLTC72.37.5:  Проэкспортировать список корреспондентов. 
}
function  HLTC72_37_5_Execute(var  current_state: OleVariant): OleVariant;
const
  DOCNUM = 2009;
var
  list1;
begin
try
  Result := true;
  if not OpenDocByNumber(DOCNUM) then
    Raise('Не получилось открыть документ №' + IntToStr(DOCNUM));
  list1 := OpenInDocument('ССЫЛКИ НА ДОКУМЕНТ');
  if not IsExists(list1) then
    Raise('Не получилось открыть ССЫЛКИ НА ДОКУМЕНТ для документа ' + IntToStr(DOCNUM));
  Result := SaveAndCompareFiles(list1, SAVE_EXPORT_XML_ALL, 'list_xml_corr.xml') and Result;
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenu;
end;

{
  HLTC72.37.6: Проэкспортировать список респондентов.
}
function  HLTC72_37_6_Execute(var  current_state: OleVariant): OleVariant;
const
  DOCNUM = 2006;
var
  list1;
begin
try
  Result := true;
  if not OpenDocByNumber(DOCNUM) then
    Raise('Не получилось открыть документ №' + IntToStr(DOCNUM));
  list1 := OpenInDocument('ССЫЛКИ ИЗ ДОКУМЕНТА');
  if not IsExists(list1) then
    Raise('Не получилось открыть ССЫЛКИ ИЗ ДОКУМЕНТА для документа ' + IntToStr(DOCNUM));
  Result := SaveAndCompareFiles(list1, SAVE_EXPORT_XML_ALL, 'list_xml_resp.xml') and Result;
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenu;
end;

{
  HLTC72.37.7: Проверить, что при смене типа и направления сортировки это отражается в соответствующих параметрах sort_order и sort_type.
}
function  HLTC72_37_7_Execute(var  current_state: OleVariant): OleVariant;
const
  STR1 = '*<list sort_order="so_ascending" sort_type="st_CreateDate" xml_version="1">*';
var
  fileBody, pathTofile;
begin
try
  Result := true;
  if not IsExists(GetListOfAllDocuments) then
    Raise('Не получилось построить список всех документов');
  if not SetSortParams(SORT_BY_PUBLICATION_DATE, SORT_ASCENDING) then
  	Raise('Невозможно включить нужный тип сортировки');

  pathTofile := GetTempDirectory + 'list_xml_sort.xml';
  if not SaveDocToFile(GetList, pathTofile, SAVE_EXPORT_XML_ALL) then
    Raise('Не получилось сделать экспорт списка в файл "' + pathTofile + '"');
  fileBody := GetFileBody(pathTofile);
  if fileBody = '' then 
    Raise('Файл "' + pathTofile + '" пустой');

  if not StringCompare(STR1, fileBody) then
  begin
    Log.File(pathTofile, 'Файл с экспортированным XML-списком с записью о сортировке');
    Raise('В XML-файле не найдена запись о сортировке: "' + STR1 + '"');
  end;
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenu;
end;

{
  HLTC72.39.1: Проверить, что на базовом и полном списках документов доступна опция анализа списка(в правом нижнем углу окна, из пункта главного меню Анализ, тулбара и контекстного меню).
}
function  HLTC72_39_1_Execute(var  current_state: OleVariant): OleVariant;
var
  i;
begin
try
  Result := true;
  if not BaseSearch(nil, 'приказ') then
    Raise('Не получилось построить короткий список через БП');
  for i := 1 to 3 do
    if not OpenAnalysisList(IntToStr(i)) then
      Result := ErrorResult('Не получилось открыть Анализ списка через способ "' + IntToStr(i) + '"')
    else
      if not CloseAnalysisList then 
        Raise('Не получилось закрыть окно "Анализ списка"');

  if not IsExists(GetListOfAllDocuments) then
    Raise('Не получилось построить полный список документов');
  for i := 1 to 3 do
    if not OpenAnalysisList(IntToStr(i)) then
      Result := ErrorResult('Не получилось открыть Анализ списка через способ "' + IntToStr(i) + '"')
    else
      if not CloseAnalysisList then 
        Raise('Не получилось закрыть окно "Анализ списка"');
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenu;
end;

{
  HLTC72.39.2: Открыть список из "Правовой навигатор\My Class A", вызвать операцию анализа списка. Должно появиться окно со следующими видами информации:
}
function  HLTC72_39_2_Execute(var  current_state: OleVariant): OleVariant;
var
  aList;
begin
try
  Result := true;
  if not OpenObjectFromFolder(LIST_TEST_MYCLASS_A, OpenMenuTab) then
    Raise('Не получилось открыть список "' + LIST_TEST_MYCLASS_A + '"');
  try
    aList := OpenAnalysisList('', true);
    if not IsExists(aList) then
      Raise('Не получилось открыть "Анализ списка"');
    if not CompareArray(
        [
          'Акты органов власти (20)',
            'Федеральные акты (7)',
            'Региональные акты (13)',

          'Судебная практика (18)',
            'Федеральные арбитражные суды округов (8)',
            'Федеральные суды общей юрисдикции (1)',
            'Мировые судьи (9)',

          'Комментарии (12)',
            'Вопрос-ответы (9)',
            'Статьи (2)',
            'Книги (5)'
        ], GetElementsFromTree(aList), true, true) then
      Raise('Список видов информации в "Анализ списка" отличается от ожидаемого');
  finally
    CloseAnalysisList;
  end;
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenu;
end;

{
  HLTC72.39.3: Построить список из ППР по контексту «нк», применить фильтр «09. Письма Минфина России и ФНС России», вызвать операцию анализа списка.
    Проверить, что в появившемся окне есть только 1 документа у вида информации «Акты органов власти».
}
function  HLTC72_39_3_Execute(var  current_state: OleVariant): OleVariant;
const
  CONTEXT = 'нк';
  FILTERNAME = '*письма минфина*';
var
  aList;
begin
try
  Result := true; 
  if not SearchInPPR( [CARD_PPR, ([ ([FD_WORDS_IN_TEXT, ([CONTEXT]) ]) ]) ]) then
    Raise('Не получилось произвести ППР');
  if not OpenFilterTab then
    Raise('Не получилось открыть список фильтров');
  if not WorkWithFilters(GetFilterTree, 'set', '+' + FILTERNAME) then
    Raise('Не получилось применить фильтр "' + FILTERNAME + '"');
  try
    aList := OpenAnalysisList('', true);
    if not IsExists(aList) then
      Raise('Не получилось открыть "Анализ списка"');
    if not CompareArray(
        [
          'Акты органов власти (1)',
            'Федеральные акты (1)',
            'Разъяснения Минфина и ФНС (1)'
        ], GetElementsFromTree(aList), true, true) then
      Raise('Список видов информации в "Анализ списка" отличается от ожидаемого');
  finally
    CloseAnalysisList;
  end;
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenu;
end;

{
  HLTC72.39.4: Построить список по ситуации «АПК», вызвать опцию анализа списка, выбрать международные договоры, нажать кнопку Построить.
    Проверить, что новый список состоит из 4 элементов, а в информации о списке есть запись «Анализ по виду правовой информации: Международные договоры».
}
function  HLTC72_39_4_Execute(var  current_state: OleVariant): OleVariant;
const
  DOC_COUNT = '4';
  LIST_TYPE = 'Международные договоры*';
  HELPTEXT = '*Результат Поиска по ситуации:*АПК*Анализ по виду правовой информации: Международные договоры*';
var
  aList, clipboard;
begin
try
  Result := true;
  if not SearchInPPS(['АПК']) then
    Raise('Не получилось произвести ППС');
  try
    aList := OpenAnalysisList('', true);
    if not IsExists(aList) then
      Raise('Не получилось открыть "Анализ списка"');
    if not OpenObjectFromFolder(LIST_TYPE, aList) then
      Raise('Не получилось открыть из анализа списка "' + LIST_TYPE + '"');
    if not FindInList( [([FL_NUMBER_BIG, DOC_COUNT])] ) then
      Result := ErrorResult('Список после открытия из "Анализ списка" не соответствует эталонному');

    clipboard := CopyToClipboard(OpenListHelpTab, 'ALL');
    if clipboard = '' then
      Raise('Не получилось скопировать содержимое вкладки "СПРАВКА К СПИСКУ"');
   	if not StringCompare(HELPTEXT, Trim(clipboard)) then
    	Result := ErrorResult('Содержимое вкладки "СПРАВКА К СПИСКУ" отличается: "' + clipboard + '", а должно быть: "' + HELPTEXT + '"');
  finally
    CloseAnalysisList;
  end;
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenu;
end;

{
  HLTC72.39.5: Проверить, что если из окна анализа списка построить новый список по виду информации, то в новом списке сохранятся переходы в найденное место документа.
}
function  HLTC72_39_5_Execute(var  current_state: OleVariant): OleVariant;
const
  DOCNAME = 'Налоговый кодекс*';
  CONTEXT = 'приказ документ НК';
  LIST_TYPE = 'Акты органов власти*';
var
  clipboard1, clipboard2, aList;
begin
try
  Result := true;
  if not BaseSearch(nil, CONTEXT) then
    Raise('Не получилось произвести БП');
  if not OpenDocFromList(DOCNAME, GetList) then
    Raise('Не получилось открыть документ: "' + DOCNAME + '" после поиска контекста "' + CONTEXT + '"');
  clipboard1 := CopyToClipboard(GetEditor, 'СТРОКА В ДОКУМЕНТЕ');
  if clipboard1 = '' then
    Raise('Не получилось скопировать "СТРОКУ В ДОКУМЕНТЕ"');
  if not CloseTabOrGoBackByHistory then
    Raise('Не получилось вернуться в список из документа');

  aList := OpenAnalysisList('', true);
  if not IsExists(aList) then
    Raise('Не получилось открыть "Анализ списка"');
  if not OpenObjectFromFolder(LIST_TYPE, aList) then
    Raise('Не получилось открыть из анализа списка "' + LIST_TYPE + '"');
  if not OpenDocFromList(DOCNAME, GetList) then
    Raise('Не получилось открыть документ: "' + DOCNAME + '" после уточнения списка через Анализ списка по типу "' + LIST_TYPE + '"');
  clipboard2 := CopyToClipboard(GetEditor, 'СТРОКА В ДОКУМЕНТЕ');
  if clipboard2 = '' then
    Raise('Не получилось скопировать "СТРОКУ В ДОКУМЕНТЕ"');

  if not StringCompare(clipboard1, clipboard2) then
    Raise('Строка на которой открывается документ после "Анализа списка": "' + clipboard2 + '" отличается от строки без вызова "Анализа списка": "' + clipboard1 + '"');
except
  Result := false;
  Log.Error(ExceptionMessage, '' ,  pmNormal, GetLogAttr('EXCEPTION'));
end;
  GoToMainMenuWithCloseTabsExceptOne;
end;

{}
procedure RunMyTests;
var i,p:oleVariant;
begin
//  HLTC72_1_1_5_Execute(p);
//  HLTC72_1_1_2_Execute(p);
//  HLTC72_1_1_6_Execute(p);
//  HLTC72_1_2_1_Execute(p);
//  HLTC72_1_3_1_Execute(p);
//  HLTC72_1_4_2_Execute(p);  //ошибка в оболочке
//  HLTC72_1_5_1_Execute(p);
//  HLTC72_1_6_2_Execute(p);
//  HLTC72_1_6_3_Execute(p);
//  HLTC72_2_2_1_Execute(p);  
//  HLTC72_2_4_1_Execute(p);
//  HLTC72_2_4_2_Execute(p);
//  HLTC72_2_5_1_Execute(p);
//  HLTC72_3_1_Execute(p);
//  HLTC72_3_2_Execute(p);
//  HLTC72_3_3_Execute(p);
//  HLTC72_3_6_Execute(p);
//  HLTC72_3_8_Execute(p);  
//  HLTC72_3_9_Execute(p);
//  
//  HLTC72_4_1_1_Execute(p);
//  HLTC72_4_1_3_Execute(p);
//  HLTC72_4_1_4_Execute(p);
//  HLTC72_4_1_4_1_Execute(p);  
//  HLTC72_4_1_4_2_Execute(p);
//  HLTC72_4_1_4_3_Execute(p);
//  HLTC72_4_2_Execute(p);
//
//  HLTC72_5_1_1_Execute(p);
//  HLTC72_5_1_2_1_Execute(p);
//  HLTC72_5_1_2_2_Execute(p);  
//  HLTC72_5_1_2_3_Execute(p);  
//  HLTC72_5_1_3_Execute(p);  //ошибка в оболочке
//  HLTC72_5_1_5_Execute(p);
//  HLTC72_5_1_6_5_Execute(p);
//  HLTC72_5_1_6_6_Execute(p);  
//  HLTC72_5_1_4_Execute(p);
//  HLTC72_5_2_1_Execute(p);
//  HLTC72_5_2_3_Execute(p);
//  HLTC72_5_2_5_Execute(p);
//  HLTC72_5_3_Execute(p);
//  HLTC72_6_1_Execute(p);
//  HLTC72_6_3_1_Execute(p);
//  HLTC72_6_3_2_Execute(p);
//  HLTC72_6_4_Execute(p);
//  HLTC72_6_5_Execute(p);
//  HLTC72_8_1_2_Execute(p);
//  HLTC72_8_1_4_Execute(p);
//  HLTC72_8_1_4_1_Execute(p);
//  HLTC72_8_1_6_Execute(p);
//  HLTC72_8_1_7_Execute(p);
//  HLTC72_8_3_Execute(p);
//  HLTC72_8_7_1_Execute(p);
//  HLTC72_8_7_2_Execute(p);
//  HLTC72_8_7_2_1_Execute(p);  
//  HLTC72_8_7_3_Execute(p);
//  HLTC72_8_11_3_1_Execute(p);
//  HLTC72_8_11_3_2_Execute(p);
//  HLTC72_8_11_3_3_Execute(p);
//  HLTC72_8_11_1_Execute(p);
//  HLTC72_9_3_5_1_1_Execute(p);
//  HLTC72_9_3_5_1_2_Execute(p);  
//  HLTC72_9_3_5_2_1_Execute(p);
//  HLTC72_9_3_5_2_2_Execute(p);  
//  HLTC72_9_5_2_Execute(p);
//  HLTC72_9_5_6_Execute(p);
//  HLTC72_9_5_7_Execute(p);    
//  HLTC72_9_9_Execute(p);
//  HLTC72_9_11_Execute(p);
//  HLTC72_9_12_Execute(p);
//  HLTC72_9_14_Execute(p);
//  HLTC72_9_15_Execute(p);
//  HLTC72_9_18_1_Execute(p);
//  HLTC72_9_18_2_Execute(p);
//  HLTC72_9_18_3_Execute(p);  
//  HLTC72_9_18_4_Execute(p);
//
//  HLTC72_10_1_2_Execute(p);
//  HLTC72_10_1_1_Execute(p);
//  HLTC72_10_4_Execute(p);
//  HLTC72_10_5_Execute(p);
//  HLTC72_10_5_4_Execute(p);
//  HLTC72_10_5_3_Execute(p);
//  HLTC72_10_6_1_Execute(p);
//  HLTC72_10_6_2_Execute(p);
//  HLTC72_10_6_3_Execute(p);

//  HLTC72_10_8_1_Execute(p);
//  HLTC72_10_8_2_Execute(p);
//  HLTC72_10_8_3_Execute(p);
//  HLTC72_10_8_4_Execute(p);
//  HLTC72_10_8_5_Execute(p);
//  HLTC72_10_8_6_Execute(p);

//  HLTC72_10_9_1_Execute(p);  
//  HLTC72_10_9_2_Execute(p);  
//  HLTC72_10_9_3_1_Execute(p);
//  HLTC72_10_9_3_2_Execute(p);
//  HLTC72_10_9_3_3_Execute(p);
//  HLTC72_10_9_3_4_Execute(p);
//  HLTC72_10_9_3_5_Execute(p);
//  HLTC72_10_9_3_6_Execute(p);
//  HLTC72_10_9_3_7_Execute(p);
//  HLTC72_10_9_3_8_Execute(p);
//  HLTC72_10_9_3_9_Execute(p);
//  HLTC72_11_2_1_Execute(p);
//  HLTC72_11_2_2_Execute(p);
//  HLTC72_11_2_3_Execute(p);  
//  HLTC72_11_2_5_Execute(p);
//  HLTC72_11_3_1_Execute(p);   //ошибка в оболочке
//  HLTC72_11_3_2_Execute(p);  
//  HLTC72_11_3_3_Execute(p);
//  HLTC72_11_4_1_Execute(p);
//  HLTC72_11_4_2_Execute(p); //ошибка в оболочке
//  HLTC72_11_4_3_Execute(p); //ошибка в оболочке
//  HLTC72_12_1_1_Execute(p);
//  HLTC72_12_1_3_Execute(p);
//  HLTC72_14_1_Execute(p);
//  HLTC72_14_2_Execute(p);
//  HLTC72_14_6_1_1_Execute(p);
//  HLTC72_14_6_1_2_Execute(p);
//  HLTC72_14_6_1_3_Execute(p);
//  HLTC72_14_6_1_4_Execute(p);
//  HLTC72_16_1_1_Execute(p);
//  HLTC72_16_1_2_Execute(p);    
//  HLTC72_16_1_3_Execute(p);
//  HLTC72_16_2_Execute(p);
//  HLTC72_19_1_Execute(p);
//  HLTC72_19_6_Execute(p);
//
//  HLTC72_21_2_Execute(p);
//  HLTC72_21_3_Execute(p);
//  HLTC72_21_4_Execute(p);
//  HLTC72_21_5_Execute(p);
//  HLTC72_21_7_Execute(p);
//  HLTC72_24_7_1_Execute(p);
//  HLTC72_24_7_1_1_1_Execute(p);  
//  HLTC72_25_1_Execute(p);
//  HLTC72_25_2_Execute(p);
//  HLTC72_25_3_1_Execute(p);
//  HLTC72_25_3_2_Execute(p);
//
//  HLTC72_25_5_2_Execute(p);
//  HLTC72_25_5_3_Execute(p);
//  HLTC72_25_8_1_Execute(p); 
//  HLTC72_25_8_2_Execute(p);
//  HLTC72_25_8_3_Execute(p);  
//  HLTC72_25_8_4_Execute(p);  
//  HLTC72_25_9_Execute(p);
//  HLTC72_25_10_Execute(p);
//  HLTC72_25_12_1_Execute(p);      //ошибка в оболочке
//  HLTC72_25_12_3_1_Execute(p);   //ошибка в оболочке CQ20148
//  HLTC72_25_12_3_2_Execute(p);  //отъехало   //ошибка в оболочке CQ20148
//  HLTC72_25_12_4_Execute(p);    
//
//  HLTC72_32_1_Execute(p);
//  HLTC72_33_Execute(p);
//  HLTC72_34_1_Execute(p);
//  HLTC72_35_1_Execute(p);
//  HLTC72_35_2_Execute(p);
//  HLTC72_35_3_Execute(p);
//  HLTC72_35_4_Execute(p);
//  HLTC72_35_5_Execute(p);
//  HLTC72_36_1_Execute(p);
//  HLTC72_36_1_3_Execute(p);
//  HLTC72_37_1_Execute(p);
//  HLTC72_37_3_Execute(p);
//  HLTC72_37_5_Execute(p);
//  HLTC72_37_6_Execute(p);
//  HLTC72_37_7_Execute(p);
//  HLTC72_39_1_Execute(p);
//  HLTC72_39_2_Execute(p);
//  HLTC72_39_3_Execute(p);
//  HLTC72_39_4_Execute(p);
//  HLTC72_39_5_Execute(p);
////////////////////////////
  HLTC72_19_6_Execute(p);

  

 
  
    


  


  
end;
