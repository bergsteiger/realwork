uses States
		, Clicks
    , common
    , RunPrograms
    , SettingsWork
    , MenuWork
    , FoldersWork
    , DocumentWork
    , HLTC76, HLTC77, HLTC74, HLTC72, HLTC147, HLTC252 
		, FileWork, ListWork, SearchWork;  
    
    
////////////////////////////////////////////////////////////////////////////////    
/////////////////////////  Общие функции  //////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


////
function  SelectItemInList(var listTree; const index : integer): boolean;
const 
  H = 20;           //высота элемента списка
var
  curList;
  i, s;
  findRes;
begin
try
 Result:=false;
  //
 s := 0;
 if IsExists(listTree) then
 begin
  listTree.Color := clWhite;
  for i := 1 to index do 
    if Assign( findRes, Regions.Find(listTree.Rect(H, s, 2*H, listTree.Height-s), LIST_PATTERN)) <> nil then
    begin
     	s := findRes.Top{Regions.FoundY} + s + H;
      if i=index then 
      begin
        listTree.SetFocus;
        listTree.Click(2*H, s - H div 2, skCtrl);
        Result:=true;          
        break;
      end;
    end
    else 
    begin
      Log.Error('SelectItemInList: Не получилось найти нужный элемент, или индекс вне диапазона');
      break;
    end;
 end
 else  
   Log.Error('SelectItemInList: Не существует окна списка!');
except
  Log.Message('SelectItemInList: ' + ExceptionMessage, '', pmNormal, GetLogAttr('EXCEPTION'));
  result := true;
  CommonExceptionHandler;
end;
end;



{
  TYPE: Документ
  DESC: Ставится закладка на указанный контекст
  RESULT:
  REMARK: 
} 
function SetBookMarkOnContext(
  const obj : OleVariant; //Объект, на котором вызывается ф-ция 
  const context : String; //Искомый контекст
  const bookmarkName : String; // имя закладки
  const bookmarkNote : String = ''; // примечание к закладке
  const pathToSave : String = 'Мои документы';
  const isUsePopupMenu : boolean = false; // использовать попап-меню
  const wndWithPopupMenu : OleVariant = nil // объект окна, на котором есть попап-меню
): boolean;
begin                                   
try         
  result := IsExists(obj) AND obj.Visible;
  if NOT result then Raise('Переданный объект не существует');
  result := context <> '';
  if NOT result then Raise('Переданный контекст- пустая строка');
  result := ClickOnContext(obj, context);
  if NOT result then Raise('Не удалось кликнуть по искомому контексту');
  result := SetBookMark(bookmarkName, bookmarkNote, pathToSave, isUsePopupMenu, wndWithPopupMenu);
  if NOT result then Raise('Не удалось установить закладку');
except  
  Log.Message('SetBookMarkOnContext: ' + ExceptionMessage, '', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;



{
  TYPE: Документ
  DESC: Устанавливается режим показа в извлечениях в списке
  RESULT: false\true. Удалось ли включить режим показа в извлечениях
  REMARK: 
}
function SetExtractionsModeInList(
  const whatToDo : string; //Включить\Выключить режим показа извлечений  
        obj : OleVariant  //Объект списка
): boolean;
var
  toolbar;
begin                                   
try 
  result := IsExists(obj) AND (obj.WndClass = 'TnscTreeView');
  if NOT result then Raise('Передан неправильный объект');
  toolbar := GetFromList('ТУЛБАР "СПИСОК"', GetParentObject(obj));
  result := IsExists(toolbar);
  if NOT result then Raise('Не удалось получить ТУЛБАР "СПИСОК"');
  obj := GetToolBarObject(toolbar, 'BUTTON', 'Открывать документы в извлечениях');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить кнопку: "Открывать документы в извлечениях"');
  case AnsiUpperCase(whatToDo) of
    'ON', 'ПОКАЗАТЬ ИЗВЛЕЧЕНИЯ':
      begin        
        result := ClickToolbarButton (toolbar, 'Открывать документы в извлечениях', 'SetToState:=pressed');
        if NOT result then Raise('Не удалось нажать кнопку "Открывать документы в извлечениях"');
      end;
    'OFF', 'СКРЫТЬ ИЗВЛЕЧЕНИЯ':
      begin
        result := ClickToolbarButton (toolbar, 'Открывать документы в извлечениях', 'SetToState:=released');
        if NOT result then Raise('Не удалось отжать кнопку "Открывать документы в извлечениях"');      
      end;
    else
      Raise('Передан неправильный параметр whatToGet');
  end; 
except    
  Log.Message('SetExtractionsModeInList: ' + ExceptionMessage, '', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;


{
  TYPE: Работа с контекстным поиском в документе
  DESC: Функция  нажимает кнопку Искать(на нижнем тулбаре Диалога контекстного поиска) [если IsClick = true] и смотрит,
  какая из radioButton группы "Начать поиск" является checked (с начала/ с текущей позиции);
  RESULT: true- если checked "с начала", false- если checked "с текущей позиции";
  REMARK:   После работы Закрывает диалог контекстного поиска, если IsClose = true
}
const
  FROM_BEGINNING = 'с начала';
  FROM_CURRENT = 'с текущей позиции';
  FROM_UNDEFINED = 'направление не определено';
  
function GetDirectionSearch(
  const searchWnd : OleVariant;
  const IsClick : boolean = true;  
  const IsClose : boolean = true 
): OleVariant;
const
  TEST_WORD = 'Поиск*заверш*';
var
  radioButton_1, radioButton_2; 
  str;
begin
  try
    if NOT IsExists(searchWnd) then Raise('Переданное окно не существует');
    searchWnd.SetFocus;
    if IsClick then
    begin
      if NOT ClickToolbarButton( GetFromContextSearch('НИЖНИЙ ТУЛБАР', searchWnd), 'Искать') then 
        Raise('Не удалось нажать "Искать"!');  
      str := WaitForInfoWindow;
      if NOT StringCompare(TEST_WORD, str) then 
        Log.Warning('Текст информационного окна не Эталонный', str);      
    end;  
    radioButton_1 := GetFromContextSearch('РАДИОКНОПКА "НАЧАТЬ ПОИСК : С НАЧАЛА"');
    radioButton_2 := GetFromContextSearch('РАДИОКНОПКА "НАЧАТЬ ПОИСК : С ТЕКУЩЕЙ ПОЗИЦИИ"');
    if NOT (IsExists(radioButton_1) AND IsExists(radioButton_2)) then
      Raise('Одна из радиокнопок не существует, хотя обязательно должна');
      
    if radioButton_1.Checked AND (NOT radioButton_2.Checked) then result := FROM_BEGINNING
    else
      if (NOT radioButton_1.Checked) AND radioButton_2.Checked then result := FROM_CURRENT
      else result := FROM_UNDEFINED;
    if IsClose then
    begin  
      if NOT ClickToolbarButton( GetFromContextSearch('НИЖНИЙ ТУЛБАР', searchWnd), 'Закрыть') then 
        Log.Warning('Не удалось нажать "Закрыть"!');  
    end;    
  except
    Log.Message('GetDirectionSearch: ' + ExceptionMessage, '', pmNormal, GetLogAttr('EXCEPTION'));
    result := FROM_UNDEFINED;
  CommonExceptionHandler;
  end;
end;
//Функция выделяет слово, в котором находится курсор

function SelectWord:boolean;
var
  x, y: integer;
begin
try
  result := false;  
  Sys.Keys('^~[Right]');//идем в конец слова + пробел
  Sys.Keys('[Left]');//перемещаемся в конец слова
  Sys.Keys('!^[Left]');//выделяем слово целиком    
  result := true;  
except
  Log.Message('SelectWord: ' + ExceptionMessage, '', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;  
end;

//Функция выделяет слово целиком, в которое входит выделенный фрагмет.

function SelectWordOnContext(
  const obj : OleVariant
):boolean;
var
  x, y: integer;
begin
try
  result := false;
  if NOT IsExists(obj) then Raise('Окно не существует!');
  if NOT GetTextSelectionCoords(obj, x, y) then Raise('Выделение не найдено.');
  x := x + 7;
  if NOT (x >= 0) AND (y >= 0) then Raise('Координаты отрицательные либо не корректного типа.');  
  obj.ClickR(x, y);
  if NOT ClickByPopupMenuItem(obj, 'Снять выделение') then 
    Raise('Не удалось вызвать пункт контекстного меню "Снять выделение"');       
  result := SelectWord;  
except
  Log.Message('SelectWordOnContext: ' + ExceptionMessage, '', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;  
end;

{
  TYPE: Работа c Пайджконтролом
  DESC: расчитывает координаты Tab в зависимости от разположения (TabPosition) на пайждконтроле
  RESULT: X1, Y1, X2, Y2
  REMARK:   Если Tab расположен вертикально(TabPosition = 2, TabPosition = 3) --> ....
    Если Tab расположен горизонтально(TabPosition = 0, TabPosition = 1) -->....
}
function GetCoordsTabInPageControl(
  const pageControl : OleVariant;
  var x1 : integer;
  var y1 : integer;  
  var x2 : integer;
  var y2 : integer
): boolean;
var
  pos;
begin
try  
  if NOT IsExists(pageControl) then Raise('Переданный PageControl не существует!');
  pos := pageControl.TabPosition;
// The following line was changed by TestComplete:
//   x1 := pageControl.SLeft;
  x1 := pageControl.ScreenLeft;
// The following line was changed by TestComplete:
//   y1 := pageControl.STop;  
  y1 := pageControl.ScreenTop;  
  case pos of
    0: begin
         x1 := pageControl.Left;
         x2 := x1 + pageControl.Width;
         y1 := pageControl.Top;
         y2 := y1 + 27;                      
       end;
    1: begin 
         x1 := pageControl.Left;
         x2 := x1 + pageControl.Width;
         y1 := pageControl.Top + pageControl.Height - 27;
         y2 := pageControl.Top + pageControl.Height;                      
       end;
    2: begin
         x1 := pageControl.Left;
         x2 := x1 + 27;
         y1 := pageControl.Top;
         y2 := y1 + pageControl.Height;                      
       end;
    3: begin 
         x1 := pageControl.Left + pageControl.Width -27;
         x2 := pageControl.Left + pageControl.Width;
         y1 := pageControl.Top;
         y2 := y1 + pageControl.Height;
       end;
  end;
  result := true;
except
  Log.Message('GetCoordsTabInPageControl: ' + ExceptionMessage, '', pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler;
end;  
end;

function GetWORDPADProcess;
begin
  result := Sys.WaitProcess('WORDPAD', Options.Run.Timeout); 
end;
//DESCR: Возвращает текст из открытого окна WORDPAD
function GetTextFromWORDPAD: OleVariant;
var
  p;
  w;
begin
try  
  p := GetWORDPADProcess;
  if NOT IsExists(p) then Raise('Не удалось получить процесс WORDPAD');
  w := p.WaitWindow('WordPadClass', '*',-1, Options.Run.Timeout div 4).WaitWindow('RICHEDIT50W', '*', -1, Options.Run.Timeout div 4);
  if NOT IsExists(w) then Raise('Не удалось получить окно редактора WORDPAD');
  result := w.wText;  
except
  Log.Message('GetTextFromWORDPAD: ' + ExceptionMessage, '', pmNormal, GetLogAttr('EXCEPTION'));  
  result := '';
  CommonExceptionHandler;
end;
end;

//////////////////////////////////////////////////////////////////////////////////////
////////////////////           HLTC73               //////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////
{
HLTC73.1: Корректно отображается текст документа
	HLTC73.1.4: Открыть в тестовой базе документ по номеру (Alt+N 8901010), должно 
  появиться предупреждение (желтый значок) сообщающий, что редакция недействительна.
}

function HLTC73_1_4_Execute (var  CurrentState: OleVariant): OleVariant;
begin
  try
    result := OpenDocByNumber(8901010); 
    if NOT result then
      Raise('Не удалось открыть документ по Alt+N');
    result := IsExists(GetFromEditor('ЗНАЧОК: РЕДАКЦИЯ НЕ ДЕЙСТВУЕТ'));
    if NOT result then
      Log.Error('Не удалось обнаружить "ЗНАЧОК: РЕДАКЦИЯ НЕ ДЕЙСТВУЕТ"');
    GoToMainMenu;  
  except
    Log.Message('HLTC73_1_4_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
    result := false;
    CommonExceptionHandler;
  end;
end;



{

!!! Скрпит не выполняется
HLTC73.3: Форматирование текста
  HLTC73.3.1: Проверить, что при изменении размеров окна текст корректно отображается
}
{function HLTC73_3_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;
  TEMP_FILE_BEFORE = 'BlaBlaBefore.bmp';
  TEMP_FILE_AFTER = 'BlaBlaAfter.bmp';
var     
  document;
  mainWnd;
  pathToImageBefore;
  pathToImageAfter;
begin                                   
try
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  mainWnd := GetMainWindow;     
  mainWnd.Restore;
  document := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(document) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  pathToImageBefore := GetTempDirectory + '\' + TEMP_FILE_BEFORE;  
  Log.Picture(document, '1.скрин документа ДО изменения размеров');
  document.Picture.SaveToFile(pathToImageBefore);    
  mainWnd.Maximize;
// The following line was changed by TestComplete:
//   Sys.Delay(Options.Run.Timeout div 60);
  Delay(Options.Run.Timeout div 60);
  mainWnd.Restore;   
  pathToImageAfter := GetTempDirectory + '\' + TEMP_FILE_AFTER;
  Log.Picture(document, '2.скрин документа ПОСЛЕ изменения размеров');
  document.Picture.SaveToFile(pathToImageAfter);   
  result := Regions.Compare(pathToImageBefore, pathToImageAfter, false, true, false, 0);
  if NOT result then
    Log.Error('Скриншот области ТЕКСТ ДОКУМЕНТА после изменения и возврата размера окна не эталонный');
  mainWnd.Maximize;  
  GoToMainMenu;
except  
  Log.Message('HLTC73_3_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;
}

{
HLTC73.3: Форматирование текста
 HLTC73.3.3: Проверить. что при изменении размеров окна верхний параграф текста 
   остается тем же самым.
}

function HLTC73_3_3_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;
var
  obj;
  str, etalon;
  main;
	copy_attempts;
begin
try
  if NOT OpenDocByNumber(10003000) then Raise('Не удалось открыть документ по Alt+N'); 
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  obj.SetFocus;
  Sys.Keys('^[End]');
  PressKeyNCount('[PageUp]', 1);
  obj.Click(1, 1);
  etalon := CopyToClipboard(obj, 'STRING', 'Trim := true');

	copy_attempts := 0;
  while (etalon = '') and (copy_attempts < MAX_COPY_ATTEMPTS) do
  begin
		Inc(copy_attempts);
    Sys.Keys('[PageUp]');
    etalon := CopyToClipboard(obj,'STRING','Trim := true');
  end;
  
  main := GetMainWindow;     
  main.Restore;
  
  obj.Click(1,1);
  str := CopyToClipboard(obj,'STRING','Trim := true');
  if NOT StringCompare(str + '*', etalon) then
  begin
    Log.Error('После Изменения размеров окна верхняя строчка не эталонна', str);
    Raise('После Изменения размеров окна верхняя строчка не эталонна');
  end;
  main.Maximize;  
  result := true;
  GoToMainMenu;
except
  Log.Message('HLTC73_3_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));

  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.3: Форматирование текста
  HLTC73.3.4: Зайти в документ со структурой(например, в конституцию) и перенести границу навигатора до
  упора вправо, перенести назад, текст должен корректно отформатироваться.
}
function HLTC73_3_4_Execute (var  CurrentState: OleVariant): OleVariant;

const
  DOC_NUM = 10800200;
  TEMP_FILE_BEFORE = 'BlaBlaBefore.bmp';
  TEMP_FILE_AFTER = 'BlaBlaAfter.bmp';
var     
  document, structure;
  dX;
  x, y;
  pathToImageBefore;
  pathToImageAfter;
begin                                   
try
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  document := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(document) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  structure := GetFromEditor('СТРУКТУРА ДОКУМЕНТА');
  if NOT IsExists(structure) then Raise('Не удалось получить СТРУКТУРА ДОКУМЕНТА');

  x := structure.ScreenLeft + structure.Width;
  y := structure.Height div 2;  
  pathToImageBefore := GetTempDirectory + '\' + TEMP_FILE_BEFORE;
  Sys.Desktop.MouseX := 1;
  Sys.Desktop.MouseY := 1;
  document.Picture.SaveToFile(pathToImageBefore);
 
  Log.Message('Координата Х до перемещения равна: ' + IntToStr(x));
  if NOT DragExt(nil, x, y, document.Width, 0) then 
    Raise('Не удалось перетянуть при помощи DragExt');    

  dX := structure.ScreenLeft + structure.Width -x - 4{-4 для того, что б картинки совпадали по ширине};
  x := structure.ScreenLeft + structure.Width;
  y := structure.Height div 2;
  Log.Message('Координата Х после перемещения равна: ' + IntToStr(x-dX));
  if NOT DragExt(nil, x, y, -dX, 0) then 
    Raise('Не удалось перетянуть при помощи DragExt');
    
  pathToImageAfter := GetTempDirectory + '\' + TEMP_FILE_AFTER;
  document.Picture.SaveToFile(pathToImageAfter); 
  Sys.Desktop.MouseX := 1;
  Sys.Desktop.MouseY := 1;  
  if NOT Regions.Compare(pathToImageBefore, pathToImageAfter, false, true, false, 0) then
  begin
    Log.Error('Скриншот области ТЕКСТ ДОКУМЕНТА после изменения и возврата границы документа не эталонный');
    Raise;
  end;      
  result := true;
  GoToMainMenu;
except  
  Log.Message('HLTC73_3_4_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;

{
HLTC73.4: Вид окна
  HLTC73.4.1: Проверить, что горизонтальная и вертикальная полосы прокрутки появляются только
  тогда, когда они нужны.
}
function HLTC73_4_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM_1 = 10064306;
  DOC_NUM_2 = 2001;
var     
  document;
  
begin                                   
try
  if NOT OpenDocByNumber(DOC_NUM_1) then Raise('Не удалось открыть документ по Alt+N');
  document := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(document) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  if IsExistsScrollBar(document, VSCROLLBAR) then 
  begin
    Log.Error('Вертикальный скрол есть в документе, где его быть не должно');
    Raise;
  end;
  if IsExistsScrollBar(document, HSCROLLBAR) then  
  begin
    Log.Error('Горизонтальный скрол есть в документе, где его быть не должно');
    Raise;
  end;
  if NOT OpenDocByNumber(DOC_NUM_2) then Raise('Не удалось открыть документ по Alt+N');
  document := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  document.SetFocus;
  Sys.Keys('^[End]' + keyPause + '[PageUp]' + keyPause + '[PageUp]');
  if NOT IsExists(document) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  if NOT IsExistsScrollBar(document, VSCROLLBAR) then 
  begin
    Log.Error('Вертикального скрола нет в документе, где он должен быть');
    Raise;
  end;
  if NOT IsExistsScrollBar(document, HSCROLLBAR) then  
  begin
    Log.Error('Горизонтального скрола нет в документе, где он должен быть');
    Raise;
  end;
  result := true;
  GoToMainMenu;
except  
  Log.Message('HLTC73_4_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;

{
HLTC73.4: Вид окна
	HLTC73.4.3: Проверить, сообщение <Cannot convert <NULL> to Tobject>  не лезет 
  при любом переходе из списка в документ. А именно при:
		HLTC73.4.3.1: DoubleClick.
} 
function HLTC73_4_3_1_Execute (var  CurrentState: OleVariant): OleVariant;
var 
  obj;
  x,y; 
begin
  try
    result := false;    
    if NOT OpenObjectFromFolder(LIST_MAIN,OpenMenuTab) then Raise('Не удалось открыть список '+ LIST_PATH );
    obj := GetFromList('СПИСОК ДОКУМЕНТОВ');    
    if NOT IsExists(obj) then Raise('Не удалось получить список');    
    Sys.Keys('^[Home]');    
    //if NOT MoveMouseToObject(obj,'list_pattern.bmp', 2, 0) then
    //  Raise('Не удалось найти иконку списка');
    //x := Sys.Desktop.MouseX;
    //y := Sys.Desktop.MouseY;    
    if NOT OpenDocFromList('', nil, 'How:=DBL_CLICK_BY_LIST_PATTERN') then
      Raise('Не удалось открыть документ из списка по DBL Click');
    obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');    
    if NOT (IsExists(obj) AND obj.Visible) then
      Log.Error('Не удалось осуществить переход на документ из списка по DoubleClick');
    result := true;
    CloseTabIfNeeded;      
  except
    Log.Message('HLTC73_4_3_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
    result := false;
    CommonExceptionHandler;
  end;
  GoToMainMenuWithCloseTabsExceptOne;
end;

{
HLTC73.4: Вид окна
	HLTC73.4.3: Проверить, сообщение <Cannot convert <NULL> to Tobject>  не лезет 
  при любом переходе из списка в документ. А именно при:
		HLTC73.4.3.2: Enter 
} 
function HLTC73_4_3_2_Execute (var  CurrentState: OleVariant): OleVariant;
var 
  obj; 
begin
  try
  OpenObjectFromFolder(LIST_MAIN,OpenMenuTab);
    obj := OpenInList('СПИСОК');     
    if NOT IsExists(obj) then
      Raise('Не удалось получить список');
    OpenDocFromList;//Enter
    result := IsExists(OpenInDocument('ТЕКСТ'));
    if NOT result then
      Log.Error('Не удалось корректно открыть документ из списка по нажатии Enter');      
    CloseTabIfNeeded;
  except
    Log.Message('HLTC73_4_3_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
    result := false;
    CommonExceptionHandler;
  end;
  GoToMainMenuWithCloseTabsExceptOne;
end;


{
HLTC73.4: Вид окна
	HLTC73.4.3: Проверить, сообщение <Cannot convert <NULL> to Tobject>  не лезет 
  при любом переходе из списка в документ. А именно при:
		HLTC73.4.3.4: Пункт контекстного меню <Открыть в новом окне>
    
    
  HLTC73.8: Открытие документа в новом окне
  HLTC73.8.3: Открыть документ в новом окне из списка  
}

function HLTC73_4_3_4_Execute (var  CurrentState: OleVariant): OleVariant;
const    
  DOC_NAME = 'Конституция Российской Федерации ';
var 
  obj; 
  addWnd;
  res1,res2;
  i:integer;
  w,w1,p;
begin
  try
    result := false;
    OpenObjectFromFolder(LIST_MAIN,OpenMenuTab);      
    obj := OpenInList('СПИСОК');
    if NOT IsExists(obj) then Raise('Не удалось получить список');    
    Sys.Keys('[Apps]');
    if NOT ClickByPopupMenuItem(obj, 'Открыть документ в новом окне') then 
      Raise('Не удалось вызвать пункт контекстного меню "Открыть документ  в новом окне"');
      
    for i := 1 to 2 do
    begin
      w1 := GetMainWindow('ContainerIndex:=' + IntToStr(i));
      if not IsExists(w1) then
        Raise('Не найдено окно с ContainerIndex:=' + IntToStr(i));
      if (i = 2) then
      begin   
        w := GetFromList('СПИСОК ДОКУМЕНТОВ', nil, w1);     
        if NOT IsExists(w) then
        begin    
          Log.Error('Не найден СПИСОК ДОКУМЕНТОВ в окне с ContainerIndex:=' + IntToStr(i));
          Raise;
        end;
      end;
      if (i = 1) then
      begin   
        w := GetFromEditor('ТЕКСТ ДОКУМЕНТА', nil, w1);     
        if NOT IsExists(w) then
        begin    
          Log.Error('Не найден ТЕКСТ ДОКУМЕНТА в окне с ContainerIndex:=' + IntToStr(i));
          Raise;
        end;
      end;              
    end;//for    
    result := true;
  except                                                         
    Log.Message('HLTC73_4_3_4_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
    result := false;    
    CommonExceptionHandler;
  end;
  CloseF1Shell;
end;
 
{
HLTC73.4: Вид окна
	HLTC73.4.4: Проверить, что фокус переходит в документ, и доступны пункты меню 
  <Документ> при переходе:	
		HLTC73.4.4.1: Из списка   
}  
function HLTC73_4_4_1_Execute (var  CurrentState: OleVariant): OleVariant;
var
 obj;
 menu;
 menuItem1, menuItem2, menuItem3;
begin
  try
  	result := false;
    if OpenObjectFromFolder(LIST_MAIN,OpenMenuTab) then
      Raise('Не удалось открыть список из навигатора');
    obj := OpenInList('СПИСОК ДОКУМЕНТОВ');    
    obj.SetFocus;
    Sys.Keys('[Home]');
    OpenDocFromList;  	
    if NOT IsExists(OpenInDocument('ТЕКСТ')) then
      Raise('Не удалось открыть документ');    
    menu := GetFromMainWindow('ГЛАВНОЕ МЕНЮ');
    //проверяем, что доступны пункты меню: //Документы\Информация о документе
                                          //Документы\Установить закладку...
                                         //Документы\Список закладок...
    menuItem1 := IsMenuItemEnabled(menu, 'Документы\Информация о документе');
    menuItem2 := IsMenuItemEnabled(menu, 'Документы\Установить закладку...');
    menuItem3 := IsMenuItemEnabled(menu, 'Документы\Список закладок...');
    result := menuItem1 
      AND MenuItem2
      AND MenuItem3;   
    if NOT result then
      Log.Error('Не доступен какой то пункт из меню <Документ>');    
    CloseTabIfNeeded;  
  except
    Log.Message('HLTC73_4_4_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
    result := false;
    CommonExceptionHandler;
  end;
  GoToMainMenuWithCloseTabsExceptOne;
end;
{
HLTC73.4: Вид окна
	HLTC73.4.4: Проверить, что фокус переходит в документ, и доступны пункты меню 
  <Документ> при переходе:	
		HLTC73.4.4.2: По ссылке  
}   
function HLTC73_4_4_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
	CONTEXT = 'Уставом';
  DOC_NUM = 1055132;
var
  obj;
  menu;
  menuItem1, menuItem2, menuItem3;
  x,y: integer;
begin
  try
  	result := OpenDocByNumber(DOC_NUM);
    if NOT result then Raise('Не удалось открыть документ по Alt+N');
    obj := OpenInDocument('ТЕКСТ');
    result := GetCoordsSearchContext(obj, CONTEXT, x, y);
    if NOT result then Raise('Не удалось получить координаты искомого контекста');  
    obj.Click(x + 10, y);        
    menu := GetFromMainWindow('ГЛАВНОЕ МЕНЮ');     
    menuItem1 := IsMenuItemEnabled(menu, 'Документы\Информация о документе');
    menuItem2 := IsMenuItemEnabled(menu, 'Документы\Установить закладку...');
    menuItem3 := IsMenuItemEnabled(menu, 'Документы\Список закладок...');
    result := menuItem1 
      AND MenuItem2
      AND MenuItem3;   
    if NOT result then
      Log.Error('Не доступен какой то пункт из меню <Документ>');  
    GoToMainMenu;  
  except
    Log.Message('HLTC73_4_4_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
    result := false;
  CommonExceptionHandler;
  end;
end;
{
HLTC73.4: Вид окна
	HLTC73.4.4: Проверить, что фокус переходит в документ, и доступны пункты меню 
  <Документ> при переходе:	
		HLTC73.4.4.3: По Истории навигации           

}         
function HLTC73_4_4_3_Execute (var  CurrentState: OleVariant): OleVariant;
var
 obj;
 menu;
 menuItem1, menuItem2, menuItem3;
begin
  try
    result := OpenObjectFromFolder(LIST_MAIN,OpenMenuTab);
    if NOT result then Raise('Не удалось открыть список из навигатора');
    obj := OpenInList('СПИСОК ДОКУМЕНТОВ');    
    obj.SetFocus;
    Sys.Keys('[Home][Enter]');
  	result := IsExists(OpenInDocument('ТЕКСТ'));
    if NOT result then Raise('Не удалось открыть документ');    
    if NOT GoToPPR then Raise('Не удалось перейти в ППР');
    if NOT GoByHistory('НАЗАД') then Raise('Не удалось перейти по истории назад');  
    menu := GetFromMainWindow('ГЛАВНОЕ МЕНЮ');    
    menuItem1 := IsMenuItemEnabled(menu, 'Документы\Информация о документе');
    menuItem2 := IsMenuItemEnabled(menu, 'Документы\Установить закладку...');
    menuItem3 := IsMenuItemEnabled(menu, 'Документы\Список закладок...');
    result := menuItem1 
      AND MenuItem2
      AND MenuItem3;   
    if NOT result then
      Log.Error('Не доступен какой то пункт из меню <Документ>');  
    CloseTabIfNeeded;  
  except
    Log.Message('HLTC73_4_4_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
    result := false;
    CommonExceptionHandler;
  end;
  GoToMainMenuWithCloseTabsExceptOne;
end;

{
HLTC73.4: Вид окна
	HLTC73.4.7: Имя документа выводится в заголовок окна
  Оно не должно обрезаться, если достаточно свободного места.
}

function HLTC73_4_7_Execute (var  CurrentState: OleVariant): OleVariant;
var  
  wnd;
  str;
  etalon;
  i;
begin
  try
    etalon := [
      ([1055132,  'Договор "О создании Союзного государства" (Москва, 8 декабря 1999 г.)']),
      ([10003000, 'Конституция Российской Федерации (принята на всенародном голосовании 12 декабря 1993 г.)']),
      ([10004543, 'Федеральный закон от 22 августа 1995 г. N 151-ФЗ "Об аварийно-спасательных службах и статусе спасателей" (с изменениями и дополнениями)'])      
    ];
    for i := VarArrayLowBound(etalon, 1) to VarArrayHighBound(etalon, 1) do
    begin
      if NOT OpenDocByNumber(etalon[i][0]) then Raise('Не удалось открыть документ по Alt+N');   
      wnd := GetMainWindow;
      str := wnd.Caption; 
      if NOT StringCompare('Текст : ' + etalon[i][1], str) then
      begin
        Log.Error('в заголовке окна пишется не название документа :' + str);
        Raise('в заголовке окна пишется не название документа');        
      end;
    end;//for    
    GoToMainMenu;
    result := true;      
  except
    Log.Message('HLTC73_4_7_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
    result := false;
  CommonExceptionHandler;
  end;  
end;
 
{
HLTC73.6: Выделение фрагмента текста
	HLTC73.6.1: Проверить возможность легко выделить фрагмент с точностью:  	
  	HLTC73.6.1.1: До целого слова
} 
function HLTC73_6_1_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
	DOC_NUM = 1019714; 
	TEST_WORLD = 'Соглашение';
var
  obj;
begin
try                       
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N'); 
  obj := OpenInDocument('ТЕКСТ');    
  obj.SetFocus;
  Sys.Keys('[Right]');
  SelectWord;  
  result := CopyToClipboard(obj,'','Trim := true') = TEST_WORLD;
  if NOT result then
    Log.Error('Выделенное слово не равно тестовому слову');  
  GoToMainMenu;  
except
  Log.Message('HLTC73_6_1_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.6: Выделение фрагмента текста
	HLTC73.6.1: Проверить возможность легко выделить фрагмент с точностью:  	
  	HLTC73.6.1.2: До целого абзаца
}   
function HLTC73_6_1_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
	DOC_NUM = 10003790;     
  TEST_WORD = 'Международные договоры образуют правовую основу межгосударственных отношений, '+
    'содействуют поддержанию всеобщего мира и безопасности, развитию международного сотрудничества '+
    'в соответствии с целями и принципами Устава Организации Объединенных Наций. Международным договорам '+
    'принадлежит важная роль в защите основных прав и свобод человека, в обеспечении законных интересов государств.';
  CONTEXT_START = 'Международные договоры образуют';  
  CONTEXT_END = 'государств.';
var
  obj;  
  str;
  testWord;
  x1, y1, x2, y2: integer;
begin
try 
  testWord := TEST_WORD + EndOfLine;
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');    
  obj := OpenInDocument('ТЕКСТ');  
  if NOT GetCoordsSearchContext(obj, CONTEXT_START, x1, y1) then Raise ('Не удалось найти координаты искомого START контекста');
  if NOT GetCoordsSearchContext(obj, CONTEXT_END, x2, y2) then Raise ('Не удалось найти координаты искомого END контекста');
  //Выделяем абзац  
  if NOT DragExt(obj, x1, y1, x2-x1, y2-y1, '', 5) then
    Raise('Не удалось выделить мышкой текст');
  Sys.Keys('![End]');//дотягиваем  выделение до конца абзаца
  //Копируем абзац
  str := CopyToClipboard(obj, '', 'Trim := true');
  if NOT StringCompare(str, TEST_WORD) then
  begin
    Log.Error('Выделенный абзац не равно тестовому абзацу', str);  
    Raise;
  end;  
  result := true;  
except
  Log.Message('HLTC73_6_1_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.6: Выделение фрагмента текста
	HLTC73.6.1: Проверить возможность легко выделить фрагмент с точностью:  	
  	HLTC73.6.1.3: Весь документ целиком
}

function HLTC73_6_1_3_Execute (var  CurrentState: OleVariant): OleVariant;
const
	DOC_NUM = 1019714; 
  TEST_WORLD = 
    'Соглашение*убежище, было вынуждено покинуть место своего постоянного жительства на территории другой*' + 
    'Стороны вследствие совершенного в отношении него*' +
    'За Республику Молдова*';    
var
  obj;
  testWorlds;
begin
try                       
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N'); 
  obj := OpenInDocument('ТЕКСТ');    
  obj.SetFocus;    
  testWorlds := CopyToClipboard(obj,'ALL','Trim := true');
  result := StringCompare(TEST_WORLD,testWorlds);
  if NOT result then
    Log.Error('Весь текс не равен эталонному');  
  GoToMainMenu;  
except
  Log.Message('HLTC73_6_1_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;
 
{
HLTC73.6: Выделение фрагмента текста
	HLTC73.6.2: Проверить возможность и корректность выделения при помощи клавиатуры (запрос 4129):  	
  	HLTC73.6.2.1: Выделение всего текста документа (Ctrl+A). 
}
function HLTC73_6_2_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
	DOC_NUM = 1019714; 
  TEST_WORLD_1 = 'Соглашение';
  TEST_WORLD_2 = 'убежище, было вынуждено покинуть место своего постоянного жительства на территории другой Стороны вследствие совершенного в отношении него ';
  TEST_WORLD_3 = 'Соглашение ратифицировано Российской Федерацией Федеральным законом от 22 ноября 1994 г. N 40-ФЗ';    
var
  obj;
  testWorlds;
begin
try                       
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N'); 
  obj := OpenInDocument('ТЕКСТ');    
  obj.SetFocus;
  Sys.Keys('^a');   
  testWorlds := CopyToClipboard(obj,'','Trim := true');
  result := StringCompare(TEST_WORLD_1+'*'+TEST_WORLD_2+'*'+TEST_WORLD_3,testWorlds);
  if NOT result then
    Log.Error('В тексте всего документа, выделенного при Ctl+A, не удалось найти искомые слова');  
  GoToMainMenu;  
except
  Log.Message('HLTC73_6_2_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;
{
HLTC73.6: Выделение фрагмента текста
	HLTC73.6.2: Проверить возможность и корректность выделения при помощи клавиатуры (запрос 4129):  	
  	HLTC73.6.2.2: Выделение нескольких фрагментов (мультивыделение)
      HLTC73.6.2.2.1: При настройках системы  не «Постоянное выделение текста» множественное
        выделение осуществляется при помощи комбинации Ctrl+мышь 
}
function HLTC73_6_2_2_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
	DOC_NUM = 10003000;   
var
  obj;
  str1, str2, str: string; 
  x1, y1, x2, y2: integer;
	copy_attempts;
begin
try          
  x1 := 0; x2 := 0;
  y1 := 0; y2 := 0;
  result := SetDefaultSettings;
  if NOT result  then Raise('Не удалось установить настройки по умолчанию');
    if NOT SetDefaultSettings then Raise('Не удалось установить настройки по умолчанию');  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N'); 
  obj := OpenInDocument('ТЕКСТ');
  Sys.Keys('^[Home]');
  randomize;   
  PressKeyNCount('[Down]', 2 + random(5));

  Delay(Options.Run.Timeout div 10);
  str1 := CopyToClipboard(obj,'STRING','Trim := true');

	copy_attempts := 0;
  while (str1 = '') and (copy_attempts < MAX_COPY_ATTEMPTS) do
  begin
		Inc(copy_attempts);
    Sys.Keys('[Down]');
    str1 := CopyToClipboard(obj,'STRING','Trim := true');
  end;
  result := GetTextSelectionCoords(obj,x1,y1);
  if NOT result then Raise('Не удалось найти выделенный текст');  
  Sys.Keys('^[Home]');    
  PressKeyNCount('[Down]', 8 + random(4));
// The following line was changed by TestComplete:
//   Sys.Delay(Options.Run.Timeout div 10);   
  Delay(Options.Run.Timeout div 10);   
  str2 := CopyToClipboard(obj,'STRING','Trim := true');

	copy_attempts := 0;
  while (str2 = '') and (copy_attempts < MAX_COPY_ATTEMPTS) do
  begin
		Inc(copy_attempts);
    Sys.Keys('[Down]');
    str2 := CopyToClipboard(obj,'STRING','Trim := true');
  end;
  result := GetTextSelectionCoords(obj,x2,y2);
  if NOT result then Raise('Не удалось найти выделенный текст');                         
  result := DragExt(obj, x1, y1, obj.Width-x1-20, 0 );   
  if NOT result then Raise ('Не удалось выделить текст начиная с координат x1, y1 при помощи DragExt');
  result := DragExt(obj, x2, y2, obj.Width-x2-20, 0, 'skCtrl');
  if NOT result then Raise ('Не удалось выделить текст начиная с координат x2, y2 при помощи DragExt');  
  str := CopyToClipboard(obj,'','Trim := true');
  result := str = (str1 + EndOfLine+ str2);
  if NOT result then
    Log.Error('Текст некорректно выделился при помощи комбинации Ctrl+мышь ',str);
  GoToMainMenu;  
except
  Log.Message('HLTC73_6_2_2_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end; 

{
HLTC73.6: Выделение фрагмента текста
	HLTC73.6.2: Проверить возможность и корректность выделения при помощи клавиатуры (запрос 4129):  	
  	HLTC73.6.2.2: Выделение нескольких фрагментов (мультивыделение)
      HHLTC73.6.2.2.2: При настройке «Постоянное выделение текста» множественное выделение осуществляется 
      автоматически, при этом комбинация Ctrl+мышь должна сбрасывать все предыдущее выделение и начинает новое.
}
function HLTC73_6_2_2_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
	DOC_NUM = 2002;   
var
  obj;
  str;
  strAll;
begin
try  
   if NOT SetSettings([    (['ДОКУМЕНТ', 'ВЫДЕЛЕНИЕ ТЕКСТА [COMBOBOX]', 'Постоянное'])  ]) then
     Raise('Не получилось изменить Настройки');   
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Altt+N');   
  obj := OpenInDocument('ТЕКСТ');       
  obj.Drag(30,40,200,0);
  str := CopyToClipboard(obj,'','Trim := true');   
  obj.Drag(20,100,500,0);  
  strAll :=  CopyToClipboard(obj,'','Trim := true');
  if (strAll = str) then
  begin
    Log.Error('После вторичного выделения (мультивыделения) выделенный фрагмент не изменился');
    Raise('После вторичного выделения (мультивыделения) выделенный фрагмент не изменился');
  end;
  
  if NOT  StringCompare(str + '*',strAll) then
  begin
    Log.Error ('Первоначально выделенный текст не попал в общее выделение');
    Raise('Первоначально выделенный текст не попал в общее выделение');
  end;  
  Sys.Clipboard := '';  
  obj.Click(1,1,skCtrl);
  strAll := CopyToClipboard(obj,'','Trim := true');    
  if NOT (strAll = '') then
  begin
    Log.Error('Выделение не сбросилось');
    Raise('Выделение не сбросилось');
  end;
  SetDefaultSettings; 
  GoToMainMenu;
  result : = true;
except
  Log.Message('HLTC73_6_2_2_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  SetDefaultSettings;
  CommonExceptionHandler;
end;
end; 

{
HLTC73.6: Выделение фрагмента текста
	HLTC73.6.2: Проверить возможность и корректность выделения при помощи клавиатуры (запрос 4129):  	
  	HLTC73.6.2.3: Выделение от конца уже выделенного фрагмента до курсора (Shift+мышь)   
}
function HLTC73_6_2_3_Execute (var  CurrentState: OleVariant): OleVariant;
const
	DOC_NUM = 10003000;     
  TEST_WORD = 'Мы';  
var
  obj;
  str;
  x,y: integer;
begin
try                                   
  result := OpenDocByNumber (DOC_NUM);
  if NOT result then Raise ('Не удалось открыть документ по Alt+N'); 
  obj := OpenInDocument ('ТЕКСТ');
  result := GetCoordsSearchContext(obj, 'Мы многонациональный', x, y);
  if NOT result then Raise('Не удалось получить координаты искомого контекста');
        
  result := DragExt(obj, obj.Width-x-20, y, 0, 0, 'skShift');   
  if NOT result then Raise ('Не сработала  DragExt');    
  str := CopyToClipboard(obj, '', 'Trim := true');    
  result := str = TEST_WORD;
  if NOT result then
    Log.Error('Выделение от конца уже выделенного фрагмента до курсора (Shift+мышь) не правильное',str);  
  GoToMainMenu;  
except
  Log.Message('HLTC73_6_2_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end; 

{
HLTC73.6: Выделение фрагмента текста
	HLTC73.6.5: Проверить выделение фрагмента, когда в настройках указано:
  	HLTC73.6.5.1: Постоянное
       Выделенные фрагменты текста остаются таковыми при любом перемещении курсора или кликах мышью.
       Снять такое выделение можно:
       1. Командой контекстного меню «Снять выделение»
       2. Нажатием Сtrl+левая кнопка мыши вне выделенного текста
       3. Горячей клавишей Ctrl+Shift+A
}

function HLTC73_6_5_1_Execute (var  CurrentState: OleVariant): OleVariant;
var  
 editorWnd; 
 selectedText;
begin
try
  if NOT SetSettings([    (['ДОКУМЕНТ', 'ВЫДЕЛЕНИЕ ТЕКСТА [COMBOBOX]', 'Постоянное'])  ]) then
    Raise('Не получилось изменить Настройки');    
  if NOT OpenDocByNumber(10003000) then Raise('Не удалось открыть документ по Alt+N');
  editorWnd := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(editorWnd) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');   
  Sys.Keys('^[Home]');
  Delay(1000);
  Sys.Keys('!^[Down]');
  Delay(1000);
  Sys.Keys('^c');  
  selectedText := Sys.Clipboard;
  common.ClipboardClean;
  //Проверяем, что выделение не сбросилось при клике в тексте документа
  editorWnd.Click(editorWnd.Width -20, editorWnd.Height div 2); //кликаем в правый угол, что бы случайно не попасть в ссылку
  Sys.Keys('^c');
  if NOT CompareString2Log(Sys.Clipboard, selectedText) then
  begin
    Log.Error('Постоянное выделение сбросилось при клике на ТЕКСТЕ ДОКУМЕНТА');
    Raise('Постоянное выделение сбросилось при клике на ТЕКСТЕ ДОКУМЕНТА');
  end;
  //Проверяем, что выделение не сбросилось при клике по выделенной области
  common.ClipboardClean;
  editorWnd.Click(EditorWnd.Width div 2, 10);
  Sys.Keys('^c');   
  if NOT CompareString2Log(Sys.Clipboard, selectedText) then
  begin
    Log.Error('Постоянное выделение сбросилось при клике на выделенной строке');
    Raise('Постоянное выделение сбросилось при клике на выделенной строке');
  end;  
  //1.Проверяем что выделение сбрасывается после команды контекстного меню "Снять выделение"
  common.ClipboardClean;  
  Sys.Keys('[Apps]');
  if NOT ClickByPopUpMenuItem(editorWnd, 'Снять выделение') then 
    Raise('Не удалось вызвать контекстную операцию "Снять выделение"');        
  Sys.Keys('^c');
  if (Sys.Clipboard <> nil) then
  begin
    Log.Error('Выделение не сбросилось после команды контекстного меню "Снять выделение"');  
    Raise('Выделение не сбросилось после команды контекстного меню "Снять выделение"');
  end;
  //2.Проверяем что выделение сбрасывается при клике с Ctrl
  common.ClipboardClean;  
  editorWnd.SetFocus;
  Sys.Keys('^[Home]!^[Down]');
	editorWnd.Click(EditorWnd.Width - 20, EditorWnd.Height div 2, skCtrl);      
  Sys.Keys('^c');
  if (Sys.Clipboard <> nil) then
  begin
    Log.Error('Выделение не сбросилось при клике с Ctrl');  
    Raise('Выделение не сбросилось при клике с Ctrl');
  end;
  //3.Проверяем, что выделение сбрасывается при Ctrl+Shift+A
  common.ClipboardClean;  
  editorWnd.SetFocus;
  Sys.Keys('^[Home]!^[Down]');  
  common.ClipboardClean;
  Sys.Keys('^!a');
  Sys.Keys('^c');
  if (Sys.Clipboard <> nil) then
  begin
    Log.Error('Выделение не сбросилось при хоткее Ctrl+Shift+A');
    Raise('Выделение не сбросилось при хоткее Ctrl+Shift+A'); 
  end;
  SetDefaultSettings;    
  result := true;  
  GoToMainMenu;	
except
  SetDefaultSettings;  
  Log.Message('HLTC73_6_5_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.6: Выделение фрагмента текста
	HLTC73.6.5: Проверить выделение фрагмента, когда в настройках указано:
  	HLTC73.6.5.2: Сбрасываемое - выделенные фрагменты текста сбрасываются при 
    любом перемещении курсора или клике мышью.
}    
function HLTC73_6_5_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
	DOC_NUM = 10003000;   
  CONTEXT = 'КОНСТИТУЦИЮ РОССИЙСКОЙ ФЕДЕРАЦИИ';
var
  obj;
  str;
begin
try
  if NOT SetSettings([    (['ДОКУМЕНТ', 'ВЫДЕЛЕНИЕ ТЕКСТА [COMBOBOX]', 'Сбрасываемое'])  ]) then
    Raise('Не получилось изменить Настройки');  
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N'); 
  obj := OpenInDocument('ТЕКСТ');  
  if NOT BaseSearchInDocument(obj, CONTEXT) then Raise('Не удалось найти искомый контекст');  
  obj.Click(1,1);
  str := CopyToClipboard(obj,'','Trim := true');  
  if NOT (str = '') then
  begin
    Log.Error('выделенный фрагмент текста не сбросился после клика');
    Raise('выделенный фрагмент текста не сбросился после клика');
  end;
  GoToMainMenu;
  result : = true;  
except
  Log.Message('HLTC73_6_5_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;             
end; 

{
HLTC73.6: Выделение фрагмента текста
	HLTC73.6.6: Проверить выделение текста в верхнем из отображаемых на экране абзацев, когда начало
  этого абзаца находится за пределами отображаемой области экрана (часть текста абзаца находится выше,
  а отображаемый текст – начинается со второй-Nной строки верхнего абзаца):
    HLTC73.6.6.1: Попробовать выделить текст с первого из отображаемых слов – текст документа не должен 
    проскроллироваться.
}    
function HLTC73_6_6_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
	DOC_NUM = 10003790;      
var
  obj; 
  str;
  x,y: integer;
begin
try                                   
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N'); 
  obj := OpenInDocument('ТЕКСТ');   
  result := GetCoordsSearchContext(obj, 'Международные договоры образуют', x, y);
  if NOT result then Raise('Не удалось получить координаты искомого контекста');    
  while y > 10 do
  begin
    if NOT ScrollBarClick(obj, 'ВНИЗ') then Raise('Не удалось кликнуть на скроллБаре Вниз');
    result := GetTextSelectionCoords(obj,x,y);      
    if NOT result then Raise ('Не удалось найти выделенный текст');
    Log.Message('Координата Y : ' + IntToStr(y));     
  end;
  if NOT ScrollBarClick(obj, 'ВНИЗ') then Raise('Не удалось кликнуть на скроллБаре Вниз');
  obj.Click(1,1);        
  Delay(Options.Run.Timeout div 10);    
  str := CopyToClipboard(obj,'STRING','Trim := true'); 
  obj.Click(1,1); 
  Delay(Options.Run.Timeout div 10); 
  result := CopyToClipboard(obj,'STRING','Trim := true') = str;
  if NOT result then
    Log.Error('Текс документа проскроллировался');   
  GoToMainMenu;  
except
  Log.Message('HLTC73_6_6_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;             
end; 

{
HLTC73.6: Выделение фрагмента текста
	HLTC73.6.6: Проверить выделение текста в верхнем из отображаемых на экране абзацев, когда начало
  этого абзаца находится за пределами отображаемой области экрана (часть текста абзаца находится выше,
  а отображаемый текст – начинается со второй-Nной строки верхнего абзаца):
    HLTC73.6.6.2: Попробовать  выделить текст, начиная со второй-Nной отображаемой строки
}    
function HLTC73_6_6_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
	DOC_NUM = 10003790;      
var
  obj; 
  str;
  x,y: integer;
begin
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N'); 
  obj := OpenInDocument('ТЕКСТ');   
  result := GetCoordsSearchContext(obj, 'Международные договоры образуют', x, y);
  if NOT result then Raise ('Не удалось найти координаты искомого контекста');
      
  while y > 20 do
  begin   
    if NOT ScrollBarClick(obj, 'ВНИЗ') then Raise('Не удалось кликнуть на скроллБаре Вниз');
    result := GetTextSelectionCoords(obj, x, y);      
    if NOT result then Raise ('Не удалось найти выделенный текст: y=' + IntToStr(y));      
  end;
  if NOT ScrollBarClick(obj, 'ВНИЗ') then Raise('Не удалось кликнуть на скроллБаре Вниз');
  if NOT ScrollBarClick(obj, 'ВНИЗ') then Raise('Не удалось кликнуть на скроллБаре Вниз');
  obj.Click(1,1);        
  Sys.Keys('[Down]');
  str := CopyToClipboard(obj,'STRING','Trim := true');   
  obj.Click(1,1); 
  Sys.Keys('[Down]'); 
  result := CopyToClipboard(obj,'STRING','Trim := true') = str;
  if NOT result then
    Log.Error('Текс документа проскроллировался');   
  GoToMainMenu;  
except
  Log.Message('HLTC73_6_6_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;             
end;

{
HLTC73.6: Выделение фрагмента текста
	HLTC73.6.7: Проверить, что есть возможность быстрого выделения абзацев. Первый клик выделяет слово, 
  второй клик – абзац.
}    
function HLTC73_6_7_Execute (var  CurrentState: OleVariant): OleVariant;
const
	DOC_NUM = 10003000;
  CONTEXT = 'Признание';
  PARAGRAF = 'Человек, его права и свободы являются высшей ценностью. Признание, соблюдение и защита ' +
    'прав и свобод человека и гражданина - обязанность государства.';
var
  document;  
  str;
  x, y;
begin
try
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  document := OpenInDocument('ТЕКСТ');
  if NOT GetCoordsSearchContext(document, CONTEXT, x, y) then Raise ('Не удалось найти координаты искомого контекста');
  Sys.Keys('[Apps]');
  if NOT ClickByPopUpMenuItem(document, 'Снять выделение') then 
    Raise('Не удалось вызвать контекстную операцию "Снять выделение"');
  document.DblClick(x + 10, y);
  str := CopyToClipBoard(document, '', 'Trim:=true');
  if NOT StringCompare(str, CONTEXT) then 
  begin
    Log.Error('После двойного клика не выделилось эталонное слово', str);
    Raise;
  end;
  
  {Sys.Keys('[Apps]');
  if NOT ClickByPopUpMenuItem(document, 'Снять выделение') then 
    Raise('Не удалось вызыать контекстную операцию "Снять выделение"');
  document.DblClick(x + 10, y);    
  document.Click(x + 10, y);
  str := CopyToClipBoard(document, '', 'Trim:=true');
  if NOT StringCompare(str, PARAGRAF) then 
  begin
    Log.Error('После тройного клика не выделился эталонный абзац', str);
    Raise;
  end;
  Sys.Keys('[Apps]');
  if NOT ClickByPopUpMenuItem(document, 'Снять выделение') then 
    Raise('Не удалось вызыать контекстную операцию "Снять выделение"');    
    }
  result := true;   
  GoToMainMenu;  
except
  Log.Message('HLTC73_6_7_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;             
end; 

{
HLTC73.6: Выделение фрагмента текста
	HLTC73.6.8: Есть возможность переходить от слова к слову с помощью Ctrl+Alt+вправо и Ctrl+Alt+влево.
}    
function HLTC73_6_8_Execute (var  CurrentState: OleVariant): OleVariant;
const
	DOC_NUM = 10003000;
  CONTEXT = 'сохраняя';
var
  document;  
  arrayWords; 
  str;
  i;
begin
try
  arrayWords := ['сохраняя', 'исторически', 'сложившееся', 'государственное']; 
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  document := OpenInDocument('ТЕКСТ');
  if NOT ClickOnContext (document, CONTEXT) then Raise('Не удалось кликнуть по искомому контексту');
  for i := (VarArrayLowBound(arrayWords, 1) + 1) to VarArrayHighBound(arrayWords, 1) do
  begin
    Sys.Keys(keyPause + '^~[Right]');
    Sys.Keys(keyPause + '[Left]');//учитываем пробел
    SelectWord;    
    str := CopyToClipBoard(document, '', 'Trim:=true');
    if NOT StringCompare(str, arrayWords[i]) then 
    begin
      Log.Error('После Нажатия Ctrl+Alt+Right на '+IntToStr(i)+' итерации курсор не переместился на эталонное слово', str);
      Raise;
    end;
    Sys.Keys('[Apps]');
    if NOT ClickByPopUpMenuItem(document, 'Снять выделение') then 
      Raise('Не удалось вызыать контекстную операцию "Снять выделение"');
  end;//for
  for i := (VarArrayHighBound(arrayWords, 1) -1) downto VarArrayLowBound(arrayWords, 1) do
  begin
    Sys.Keys(keyPause + '^~[Left]');
    SelectWord;  
    str := CopyToClipBoard(document, '', 'Trim:=true');
    if NOT StringCompare(str, arrayWords[i]) then 
    begin
      Log.Error('После Нажатия Ctrl+Alt+Left на '+IntToStr(i)+' итерации курсор не переместился на эталонное слово', str);
      Raise;
    end;
    Sys.Keys('[Apps]');
    if NOT ClickByPopUpMenuItem(document, 'Снять выделение') then 
      Raise('Не удалось вызыать контекстную операцию "Снять выделение"'); 
  end;//for
  
  result := true;   
  GoToMainMenu;  
except
  Log.Message('HLTC73_6_8_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;             
end;

{
HLTC73.7: Позиционирование при открытии документа
	HLTC73.7.1: В случае, если у документа есть вхождение, то при его открытии 
  система должна позиционироваться точно на этом вхождении.  
}

function HLTC73_7_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
	DOC_NAME = 'Конституция Российской Федерации (принята на всенародном голосовании 12 декабря 1993 г.)';
  TEST_WORD = 'Глава 1. Основы конституционного строя';
var
 obj;
begin
try
result := OpenObjectFromFolder(	LIST_MAIN,OpenMenuTab);
  if NOT result then Raise('Не удалось открыть список из навигатора');
  obj := OpenInList('СПИСОК ДОКУМЕНТОВ');     
  result := Position_Internal(obj,DOC_NAME);
  if NOT result then Raise('Не удалось спозиционироваться на документе');
  OpenDocFromList;
  obj := OpenInDocument('ТЕКСТ');
  result := CopyToClipboard(obj,'STRING','Trim := true') = TEST_WORD; 
  if NOT result then
    Log.Error('При открытии документа позиция курсора находится не на вхождении');
  CloseTabIfNeeded;   
except
  Log.Message('HLTC73_7_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
  GoToMainMenuWithCloseTabsExceptOne;
end;

{
HLTC73.7: Позиционирование при открытии документа
	HLTC73.7.2: Проверить, что при синхронном просмотре текста документа в списке 
  этот документ открывается в том месте, на которое указывает ссылка из списка, 
  а не всегда с начала документа (запрос 4138) 
}

function HLTC73_7_2_Execute (var  CurrentState: OleVariant): OleVariant;
const 
	DOC_NAME = 'Конституция Российской Федерации (принята на всенародном голосовании 12 декабря 1993 г.)';
  TEST_WORD = 'Глава 1. Основы конституционного строя';
var
 obj;
 str;
begin
try
  result := OpenObjectFromFolder(	LIST_MAIN,OpenMenuTab);
  if NOT result then Raise('Не удалось открыть список из навигатора');
  obj := OpenInList('СПИСОК ДОКУМЕНТОВ');     
  result := Position_Internal(obj,DOC_NAME);      
  if NOT result then Raise('Не удалось спозиционироваться на документе'); 
  obj := OpenInList('СИНХРОННЫЙ ПРОСМОТР');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить вкладку синхронного просмотра');
  obj := GetFromSynchroView('ТЕКСТ ДОКУМЕНТА'); 
  result := IsExists(obj);
  if NOT result then  Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА на вкладке синхронного просмотра');    
  str := CopyToClipboard(obj,'STRING','Trim := true');
  result := str = TEST_WORD; 
  if NOT result then
    Log.Error('Документ во вкладке синхронный просмотр открылся не на его вхождение',str);
  GoToMainMenu;  
except
  Log.Message('HLTC73_7_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.8: Открытие документа в новом окне
	HLTC73.8.1: Войти в документ, навести курсор на ссылку, выбрать пункт 
  контекстного меню <Открыть гиперссылку в новом окне>.
}  
function HLTC73_8_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
	DOC_NUM = 1055132;
  CONTEXT = 'Уставом';  
  DOC_NAME = 'Устав Союза Беларуси и России (Москва, 23 мая 1997 г.)';  
var
  obj; 
  addWnd;
  res1,res2;
  i:integer;
  w,w1,p; 
  x,y:integer;
begin
try
 	result := false;
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('ТЕКСТ');  
  if NOT GetCoordsSearchContext(obj, CONTEXT, x, y) then Raise ('Не удалось найти координаты искомого контекста');  
  obj.ClickR (x + 10, y);        
  if NOT ClickByPopupMenuItem(obj, 'Открыть ссылку в новом окне') then Raise('Не удалось вызвать пункт контекстного меню "Открыть ссылку в новом окне"');
  
  for i := 1 to 2 do
  begin
    w1 := GetMainWindow('ContainerIndex:=' + IntToStr(i));
    if not IsExists(w1) then
      Raise('Не найдено окно с ContainerIndex:=' + IntToStr(i));
    w := GetFromEditor('ТЕКСТ ДОКУМЕНТА', nil, w1);     
    if NOT IsExists(w) then    
      Log.Error('Не найден ТЕКСТ ДОКУМЕНТА в окне с ContainerIndex:=' + IntToStr(i));      
  end;
  result := true;  
  CloseF1Shell;   
except
  Log.Message('HLTC73_8_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CloseF1Shell;
  CommonExceptionHandler;
end;
  
end;

{
HLTC73.8: Открытие документа в новом окне
	HLTC73.8.2: Войти в документ (в базе Супер Максимум -  Конституция РФ, в 
  тестовой базе - документ №12024178), навести курсор на <b>мультиссылку</b>, 
  выбрать пункт контекстного меню <Гиперссылка - Открыть в новом окне>.
}

function HLTC73_8_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 12024178;                                
  CONTEXT = 'МУЛЬТИССЫЛКА НА VANONCED';
  DOC_NAME = 'Ссылка из документа: Приказ Минтранса РФ от 14 мая 2001 г. N 84 "Об утверждении';
var
  obj; 
  addWnd;
  res1,res2;
  i:integer;
  w,w1,p; 
  x,y:integer;
begin
try
  result := false; 	
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');  
  if NOT GetCoordsSearchContext(obj, CONTEXT, x, y) then Raise ('Не удалось найти координаты искомого контекста');  
  obj.ClickR (x + 10, y);        
  if NOT ClickByPopupMenuItem(obj, 'Открыть ссылку в новом окне') then 
    Raise('Не удалось вызвать пункт контекстного меню "Открыть ссылку в новом окне"');
  for i := 1 to 2 do
  begin
    w1 := GetMainWindow('ContainerIndex:=' + IntToStr(i));
    if not IsExists(w1) then
      Raise('Не найдено окно с ContainerIndex:=' + IntToStr(i));
    if (i = 1) then
    begin   
      w := GetFromList('СПИСОК ДОКУМЕНТОВ', nil, w1);     
      if NOT IsExists(w) then
      begin    
        Log.Error('Не найден СПИСОК ДОКУМЕНТОВ в окне с ContainerIndex:=' + IntToStr(i));
        Raise;
      end;
    end;
    if (i = 2) then
    begin   
      w := GetFromEditor('ТЕКСТ ДОКУМЕНТА', nil, w1);     
      if NOT IsExists(w) then
      begin    
        Log.Error('Не найден ТЕКСТ ДОКУМЕНТА в окне с ContainerIndex:=' + IntToStr(i));
        Raise;
      end;
    end;              
  end;//for
  result := true;
  CloseF1Shell; 
except
  Log.Message('HLTC73_8_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CloseF1Shell;
  CommonExceptionHandler;
end;
end;

{
 HLTC73.9: Отображение поставленных на документ закладок
   HLTC73.9.1: Система должна отображать те позиции в документе, на которые 
   установлены закладки.. Визуально закладки отображаются в виде иконок на 
   специальной панели.
   
   HLTC73.9.3: Проверить, показ закладки сразу после её установки
}

function HLTC73_9_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
	DOC_NUM = 10003000;
  FOLDER_PREF = 'HLTC73_9_1_';
var
 obj;
 sub;
 str;
 x,y:integer;
 copy_attempts;
begin
try
  if NOT DeleteAllInMyDoc then                    
    Log.Warning('Не удалить все объекты из моих документов');  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N'); 
  obj := OpenInDocument('ТЕКСТ');
  Sys.Keys('^[Home]');
  randomize;   
  PressKeyNCount('[Down]', 3 + random(3));
  Delay(Options.Run.Timeout div 10);   
  str := CopyToClipboard(obj,'STRING','Trim := true');
	copy_attempts := 0;
  while (str = '') and (copy_attempts < MAX_COPY_ATTEMPTS) do
  begin
		Inc(copy_attempts);
    Sys.Keys('[Down]');
    str := CopyToClipboard(obj,'STRING', 'Trim := true');
  end;
  str := FOLDER_PREF + str;  
  result := SetBookmark(str,'','Мои документы',true,obj);
  if NOT result then Raise('Не удалось установить закладку');
  sub := GetFromEditor('САБ ПАНЕЛЬ');
  result := MoveMouseToObject(sub,'Bookmark.bmp',0,0,true);
  if NOT result then Raise('Не удалось найти иконку закладки на СУБ панели');
  y := Sys.Desktop.MouseY;
  x := 1;
  common.ScreenToClient(obj, x, y);
  obj.Click(1,y);
  result := (FOLDER_PREF + CopyToClipboard(obj,'STRING','Trim := true')) = str;
  if NOT result then
    Log.Error('Иконка находится не на той позиции, где ставилась закладка');
  if NOT DeleteAllInMyDoc then                    
    Log.Warning('Не удалить все объекты из моих документов');   
  GoToMainMenu;  
except
  Log.Message('HLTC73_9_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.9: Отображение поставленных на документ закладок
	HLTC73.9.2: Проверить, что при наведении на иконку закладки, в качестве hint’а (всплывающей подсказки) показывается:
 «Закладка: <имя закладки в папке>» 
}                                                           
function HLTC73_9_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
	DOC_NUM = 10003000;
  FOLDER_PREF = 'HLTC73_9_2_';
var
  obj;
  sub;
  str;   
	copy_attempts;
begin
try
  if NOT DeleteAllInMyDoc then                    
    Log.Warning('Не удалить все объекты из моих документов');  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N'); 
  obj := OpenInDocument('ТЕКСТ');
  Sys.Keys('^[Home]');
  randomize;   
  PressKeyNCount('[Down]', 3 + random(8));
  Delay(Options.Run.Timeout div 10);   
  str := CopyToClipboard(obj,'STRING','Trim := true');
	copy_attempts := 0;
  while (str = '') and (copy_attempts < MAX_COPY_ATTEMPTS) do
  begin
		Inc(copy_attempts);
    Sys.Keys('[Down]');
    str := CopyToClipboard(obj,'STRING','Trim := true');
  end;
  str := FOLDER_PREF + str;  
  result := SetBookmark(str,'','Мои документы',true,obj);
  if NOT result then Raise('Не удалось установить закладку');
  sub := GetFromEditor('САБ ПАНЕЛЬ');
  result := MoveMouseToObject(sub,'Bookmark.bmp',5,5,false);
  if NOT result then Raise('Не удалось найти иконку закладки на СУБ панели');
  obj := GetFromShell('ОКНО ХИНТА');
  result := isExists(obj);
  if NOT result then
  begin
    Log.Picture(sub, 'Не удалось найти окно Хинта'); 
    Raise('Не удалось найти окно Хинта');
  end;  
  result := obj.wndCaption = ('Закладка: ' + str);
  if NOT result then
    Log.Error('Имя хинта не равно имени закладки в папке',obj.WndCaption);  
  if NOT DeleteAllInMyDoc then                    
    Log.Warning('Не удалить все объекты из моих документов');   
  GoToMainMenu;  
except
  Log.Message('HLTC73_9_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.9: Отображение поставленных на документ закладок
	HLTC73.9.4: Проверить, что установленные закладки показываются каждый раз при 
  просмотре документа (пока не удалят)
}                                                           
function HLTC73_9_4_Execute (var  CurrentState: OleVariant): OleVariant;
const
	DOC_NUM = 10003000;
  FOLDER_PREF = 'HLTC73_9_4_';
var
  obj;
  sub;
  str;
  x,y;    
	copy_attempts;
begin
try
  if NOT DeleteAllInMyDoc then                    
    Log.Warning('Не удалось все объекты из моих документов');  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N'); 
  obj := OpenInDocument('ТЕКСТ');
  Sys.Keys('^[Home]');
  randomize;   
  PressKeyNCount('[Down]', 3 + random(8));
  Delay(Options.Run.Timeout div 10);   
  str := CopyToClipboard(obj,'STRING','Trim := true');
	copy_attempts := 0;
  while (str = '') and (copy_attempts < MAX_COPY_ATTEMPTS) do
  begin
		Inc(copy_attempts);
    Sys.Keys('[Down]');
    str := CopyToClipboard(obj,'STRING','Trim := true');
  end;
  str := FOLDER_PREF + str;  
  result := SetBookmark(str,'','Мои документы',true,obj);
  if NOT result then Raise('Не удалось установить закладку');
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N'); 
  sub := GetFromEditor('САБ ПАНЕЛЬ');
  result := MoveMouseToObject(sub,'Bookmark.bmp',0,0,true);
  if NOT result then Raise('Не удалось найти иконку закладки на СУБ панели');
  y := Sys.Desktop.MouseY;
  x := 1;
  common.ScreenToClient(obj, x, y);  
  obj.Click(1,y);
  result := (FOLDER_PREF + CopyToClipboard(obj,'STRING','Trim := true')) = str;
  if NOT result then
    Log.Error('Иконка находится не на той позиции, где ставилась закладка');
  if NOT DeleteAllInMyDoc then                    
    Log.Warning('Не удалось все объекты из моих документов');   
  result := NOT MoveMouseToObject(sub,'Bookmark.bmp',0,0,true);
  if NOT result then 
    Log.Error('Иконка закладки не удалилась с СУБ панели');     
  GoToMainMenu;  
except
  Log.Message('HLTC73_9_4_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.9: Отображение поставленных на документ закладок
	HLTC73.9.5: Проверить, что закладки сохраняются при завершении работы с системой. 
  При следующем сеансе они должны быть вновь доступны.  
}                                                           
function HLTC73_9_5_Execute (var  CurrentState: OleVariant): OleVariant;
const
	DOC_NUM = 10003000;
  FOLDER_PREF = 'HLTC73_9_5_';
var
  obj;
  sub;
  str;    
  count,login,pass;
  x,y;
	copy_attempts;
begin
try
  count := 5; 
  login := FOLDER_PREF+'user1';
  pass := FOLDER_PREF;
  RestartF1Shell(count,Options.Run.Timeout div 6,login,pass);  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N'); 
  obj := OpenInDocument('ТЕКСТ');
  Sys.Keys('^[Home]');
  randomize;   
  PressKeyNCount('[Down]', 2 + random(3));
  Delay(Options.Run.Timeout div 10);   
  str := CopyToClipboard(obj,'STRING','Trim := true');
	copy_attempts := 0;
  while (str = '') and (copy_attempts < MAX_COPY_ATTEMPTS) do
  begin
		Inc(copy_attempts);
    Sys.Keys('[Down]');
    str := CopyToClipboard(obj,'STRING','Trim := true');
  end;
  str := FOLDER_PREF + str;               
  result := SetBookmark(str,'','Мои документы', true, obj);
  if NOT result then Raise('Не удалось установить закладку');
  count := 5;  
  RestartF1Shell(count,Options.Run.Timeout div 6,login,pass);   
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N'); 
  sub := GetFromEditor('САБ ПАНЕЛЬ');
  obj := OpenInDocument('ТЕКСТ');     
  result := MoveMouseToObject(sub,'Bookmark.bmp',0,0);
  if NOT result then Raise('Не удалось найти иконку закладки на СУБ панели');
  y := Sys.Desktop.MouseY;
  x := 1;
  common.ScreenToClient(obj, x, y);
  obj.Click(1,y);
  result := (FOLDER_PREF + CopyToClipboard(obj,'STRING','Trim := true')) = str;
  if NOT result then
    Log.Error('Иконка находится не на той позиции, где ставилась закладка');
  if NOT DeleteAllInMyDoc then                    
    Log.Warning('Не удалось все объекты из моих документов');   
  GoToMainMenu;  
except
  Log.Message('HLTC73_9_5_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.9: Отображение поставленных на документ закладок
	HLTC73.9.6: Проверить, что все установленные в документе закладки отображаются 
  в навигаторе на вкладке <Структура документа>. 
}  
function HLTC73_9_6_Execute (var  CurrentState: OleVariant): OleVariant;
const
	DOC_NUM = 10003000;
  FOLDER_PREF = 'HLTC73_9_6_';
var
  obj;
  structura_doc;
  testWord;
  i:integer; 
begin
try    
  testWord := [
    'КОНСТИТУЦИЯ РОССИЙСКОЙ ФЕДЕРАЦИИ', 'Депутаты Совета Федерации первого созыва осуществляют'
    ];      
  if NOT DeleteAllInMyDoc then                    
    Log.Warning('Не удалось все объекты из моих документов');  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N'); 
  obj := OpenInDocument('ТЕКСТ');  
  Sys.Keys('^[Home]');
  result := SetBookmark(FOLDER_PREF + 'закладка1', '', 'Мои документы', true, obj);  
  if NOT result then Raise('Не удалось установить 1-ю закладку');
  obj.SetFocus;
  result := ClickOnContext(obj, testWord[1]);
  if NOT result then Raise('Не удалось кликнуть по искомому контексту');
  result := SetBookmark(FOLDER_PREF + 'закладка2', '', 'Мои документы', true, obj);  
  if NOT result then Raise('Не удалось установить 2-ю закладку');    
  for i := 1 to 2 do
  begin
    structura_doc := OpenInDocument('ДЕРЕВО "ЗАКЛАДКИ"');
    result := IsExists(structura_doc);
    if NOT result then Raise('Не удалось открыть вкладку ДЕРЕВО "ЗАКЛАДКИ"');
    structura_doc.SetFocus;
    Sys.Keys('[Home]');
    result :=  OpenObjectFromFolder (FOLDER_PREF + 'закладка' + IntToStr[i], structura_doc); 
    if NOT result then 
      Raise('Не удалось открыть ' + IntToStr(i) + '-ю закладку с вкладки ДЕРЕВО "ЗАКЛАДКИ"');      
    obj := OpenInDocument('ТЕКСТ');  
    result := StringCompare(testWord[i-1] + '*', CopyToClipboard(obj,'STRING','Trim := true'));
    if NOT result then
    begin
      Log.Error('В документе '+inttostr(i)+'-я закладка сохранилась не на той позиции, где ставилась');
      break;
    end;  
  end;  
  if NOT DeleteAllInMyDoc then                    
    Log.Warning('Не удалось все объекты из моих документов');     
  GoToMainMenu;    
except
  Log.Message('HLTC73_9_6_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.10: Показ предупреждения
	HLTC73.10.1: Если к документу в открываемой редакции имеется предупреждение и 
  в настройках разрешен их показ, то: 
		HLTC73.10.1.1: При открытии документа в нижнем фрейме становится активна 
    вкладка <Предупреждение>, в которой написан сам текст предупреждения      
} 
function HLTC73_10_1_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
	DOC_NUM = 8901010;
var
	obj;
  str;
  warningText;
begin
try
  warningText := 'Это предупреждение для действующей редакции "Документа с нормальной цепочкой редакций"*'+EndOfLine+
                 'Редакция не действует*'+EndOfLine+
                 'Диапазон действия редакции: c 01.04.2003 по 20.04.2003'+EndOfLine+
                 'Изменяющий документ: от 30.03.2003*'+EndOfLine+
                 'Переключиться в актуальную редакцию документа';                 
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');     
  obj := GetFromEditor('ВКЛАДКА "ПРЕДУПРЕЖДЕНИЕ"');
  result := IsExists(obj) AND obj.Visible;
  if NOT result then
  begin
    Log.Error('Не удалось обнаружить вкладку с ПРЕДУПРЕЖДЕНИЕМ');
    Raise('Не удалось обнаружить вкладку с ПРЕДУПРЕЖДЕНИЕМ');
  end;
  obj.SetFocus;  
  str := CopyToClipboard(obj,'ALL','Trim := true');
  result := StringCompare(warningText, str);  
  if NOT result then
    Log.Error('Текс во вкладки "ПРЕДУПРЕЖДЕНИЕ" не является самим текстом предупреждения', str);
  GoToMainMenu;  
except
  Log.Message('HLTC73_10_1_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.10: Показ предупреждения
	HLTC73.10.1: Если к документу в открываемой редакции имеется предупреждение и 
  в настройках разрешен их показ, то: 
		HLTC73.10.1.2: В окне документа появляется значок <Внимание> с всплывающей 
    подсказкой соответствующей тексту предупреждения. Этот значок не прокручивается 
    вместе с текстом.
} 
function HLTC73_10_1_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
	DOC_NUM = 3809867;
  WARNING_HINT = 'Внимание! Настоящий документ утратил силу. Подробнее см. в справке к документу';
var
	obj;
  document;
  hint; 
  x,y;
  x1,y1;
  str:string;
begin
try             
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');    
  obj := GetFromEditor('ЗНАЧОК: НАСТОЯЩИЙ ДОКУМЕНТ УТРАТИЛ СИЛУ');
  result := IsExists(obj);
  if NOT result then
  begin
    Log.Error('Не удалось обнаружить ЗНАЧОК: ЗНАЧОК: НАСТОЯЩИЙ ДОКУМЕНТ УТРАТИЛ СИЛУ');
    Raise('Не удалось обнаружить ЗНАЧОК: НАСТОЯЩИЙ ДОКУМЕНТ УТРАТИЛ СИЛУ');
  end;

  str := GetHintTextByCoords(obj.ScreenLeft + obj.Width div 2, obj.ScreenTop + obj.Height div 2);
  
  result := StringCompare(WARNING_HINT, str);
  if NOT result then
  begin
    Log.Error('Текст хинта не соответствует тексту предупреждения',str);
    Raise('Текст хинта не соответствует тексту предупреждения');
  end;
  document := OpenInDocument('ТЕКСТ');
  Sys.Keys('^[End]');
  x1 := obj.Width div 2;
  y1 := obj.Height div 2;
  common.ClientToScreen(obj, x1, y1);
  result := (x=x1) AND (y=y1);
  if NOT result then
    Log.Error('Координаты центра значка "НАСТОЯЩИЙ ДОКУМЕНТ УТРАТИЛ СИЛУ" изменились после скроллирования документа');
  GoToMainMenu;  
except
  Log.Message('HLTC73_10_1_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.10: Показ предупреждения
  HLTC73.10.1: Если к документу в открываемой редакции имеется предупреждение и в настройках разрешен их показ, то: 
    HLTC73.10.1.4: Проверить, что показывается 2 значка предупреждения, если для него имеется предупреждение юристов (команда Warning в nsr’ах), и если просматривается недействующая редакция документа. 

    1. В ТБ24 открываем документ 8901001
     Есть одна жёлтая медалька с восклицательным знаком:
     «Это предупреждение для действующей редакции «Документа с нормальной цепочкой редакций».
     Открыть список редакций по скрипту.»

    2. Переходим в предыдущую редакцию
     Появляется ещё одна жёлтая медалька с часами:
     «Настоящая редакция документа не действует на момент выхода установленной у вас версии системы ГАРАНТ
     Диапазон действия редакции: с 01.04.2003 по 20.04.2003
     Переключиться в актуальную редакцию документа»
} 
function HLTC73_10_1_4_Execute (var  CurrentState: OleVariant): OleVariant;
const    
  DOC_NAME = 'Документ с нормальной цепочкой редакций. ACTIVE*';
  ETALON_TEXT_ONE =  'Есть одна жёлтая медалька*';
var
	obj;
  balonWnd;
  curText;
begin
try  
if NOT OpenObjectFromFolder(LIST_TEST_MYCLASS_B,OpenMenuTab) then 
    Raise('Не удалось открыть список из навигатора');          
  obj := OpenInList('СПИСОК ДОКУМЕНТОВ');    
  if NOT Position_Internal(obj, DOC_NAME, '\', true) then 
    Raise('Не удалось спозиционироваться на : ' + DOC_NAME);
  Sys.Keys('[Enter]');  
  if NOT IsExists(OpenInDocument('ТЕКСТ')) then Raise('Не удалось открыть документ');
  obj := GetFromEditor('ЗНАЧОК: ПРЕДУПРЕЖДЕНИЕ ДЛЯ ДЕЙСТВУЮЩЕЙ РЕДАКЦИИ');
  if NOT IsExists(obj) then
  begin
    Log.Error('Для документа 8901001 не удалось обнаружить ЗНАЧОК: ПРЕДУПРЕЖДЕНИЕ ДЛЯ ДЕЙСТВУЮЩЕЙ РЕДАКЦИИ');
    Raise('Для документа 8901001 не удалось обнаружить ЗНАЧОК: ПРЕДУПРЕЖДЕНИЕ ДЛЯ ДЕЙСТВУЮЩЕЙ РЕДАКЦИИ');
  end;  
  obj.Click();
  // Ищем балон и считываем его текст
  balonWnd := GetFromMainWindow('ОКНО СООБЩЕНИЯ ЗНАЧКА ПРЕДУПРЕЖДЕНИЕ ДЛЯ ДЕЙСТВУЮЩЕЙ РЕДАКЦИИ');
  if NOT IsExists(balonWnd) then Raise('Не удалось получить ОКНО СООБЩЕНИЯ ЗНАЧКА ПРЕДУПРЕЖДЕНИЕ ДЛЯ ДЕЙСТВУЮЩЕЙ РЕДАКЦИИ');  
  curText := balonWnd.Selection.CurrentObjectText;  
  if NOT StringCompare(curText, ETALON_TEXT_ONE) then
  begin
    Log.Error('Текст английского предупреждения не эталонный', curText);
    Raise('Текст английского предупреждения не эталонный');      
  end;
  
  //Доделать после того, как Дима ответит
  //http://mdp.garant.ru/pages/viewpage.action?pageId=420416142&focusedCommentId=467283687#comment-467283687
  
  
  obj := GetFromMainWindow('ОКНО СООБЩЕНИЯ ЗНАЧКА ПРЕДУПРЕЖДЕНИЯ');
  if NOT IsExists(obj) then Raise('Не удалось получить ОКНО СООБЩЕНИЯ ЗНАЧКА ПРЕДУПРЕЖДЕНИЯ');
  text_balon :=  common.GetWindowText(obj.Handle);
  Log.Message('warning: ' + text_balon,'', pmNormal, GetLogAttr('EXCEPTION'));
 
  //считать текст балона
  //сравнить текст 
      
  result := ClickByMainMenuItem('Документы\Предыдущая редакция'); 
  if NOT result then Raise('Не могу кликнуть по пункту меню: "Документы\Предыдущая редакция"');    
  obj := GetFromEditor('ЗНАЧОК: РЕДАКЦИЯ НЕ ДЕЙСТВУЕТ');
  res1 := IsExists(obj); 
  obj := GetFromEditor('ЗНАЧОК: ПРЕДУПРЕЖДЕНИЕ ДЛЯ ДЕЙСТВУЮЩЕЙ РЕДАКЦИИ');
  res2 := IsExists(obj);  
  result := res1 AND res2;
  if NOT result then
  begin
    if NOT res1 then Log.Error('Не удалось обнаружить ЗНАЧОК: РЕДАКЦИЯ НЕ ДЕЙСТВУЕТ');
    if NOT res2 then Log.Error('Не удалось обнаружить ЗНАЧОК: ПРЕДУПРЕЖДЕНИЕ ДЛЯ ДЕЙСТВУЮЩЕЙ РЕДАКЦИИ');    
  end;
  
  //Доделать после того, как Дима ответит
  //http://mdp.garant.ru/pages/viewpage.action?pageId=420416142&focusedCommentId=467283687#comment-467283687
  //до этого момента скрипт выпрлняться не будет, что бы не забыть
  result := false; 
  CloseTabIfNeeded; 
except
  Log.Message('HLTC73_10_1_4_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
  GoToMainMenuWithCloseTabsExceptOne;
end;

{
HLTC73.10: Показ предупреждения
	HLTC73.10.2: Просмотреть документ в неактуальной редакции (например, Alt+N 8901010 (внут.номер) 
  - к этому документу показывается 2 значка предупреждения)
} 
function HLTC73_10_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
	DOC_NUM = 8901010;  
var
	obj;  
begin
try             
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');  
  obj := GetFromEditor('ЗНАЧОК: РЕДАКЦИЯ НЕ ДЕЙСТВУЕТ');
  result := IsExists(obj); 
  if NOT result then
  begin
    Log.Error('Не удалось обнаружить ЗНАЧОК: РЕДАКЦИЯ НЕ ДЕЙСТВУЕТ');
    Raise('Не удалось обнаружить ЗНАЧОК: РЕДАКЦИЯ НЕ ДЕЙСТВУЕТ');
  end;
  obj := GetFromEditor('ЗНАЧОК: ПРЕДУПРЕЖДЕНИЕ ДЛЯ ДЕЙСТВУЮЩЕЙ РЕДАКЦИИ');
  result := IsExists(obj);
  if NOT result then
  begin
    Log.Error('Не удалось обнаружить ЗНАЧОК: РЕДАКЦИЯ НЕ ДЕЙСТВУЕТ');
    Raise('Не удалось обнаружить ЗНАЧОК: РЕДАКЦИЯ НЕ ДЕЙСТВУЕТ');
  end;  
  GoToMainMenu;
except
  Log.Message('HLTC73_10_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.1: Справка
  	HLTC73.11.1.1: В нижней части окна отображается справка к документу: 
			HLTC73.11.1.1.1: При выборе вкладки <Справка>.
}   
function HLTC73_11_1_1_1_Execute (var  CurrentState: OleVariant): OleVariant;
const 
	DOC_NUM = 1055132;
var
	obj;  
begin
try             
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');  
  result := SwitchToPage(GetFromEditor('ЗАКЛАДКИ'),'Справка');
  if NOT result then Raise ('Не удалось открыть вкладку "Справка" ');   
  obj := GetFromEditor('ВКЛАДКА "СПРАВКА"');
  result := IsExists(obj) AND obj.Visible;
  if NOT result then
    Log.Error('Вкладка "Справка" не отобразилась.');
  GoToMainMenu;  
except
  Log.Message('HLTC73_11_1_1_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.1: Справка
  	HLTC73.11.1.1: В нижней части окна отображается справка к документу: 
			HLTC73.11.1.1.2: При нажатии на кнопку <Справка> панели инструментов.
}      
function HLTC73_11_1_1_2_Execute (var  CurrentState: OleVariant): OleVariant;
const 
	DOC_NUM = 1055132;
var
	obj;   
begin
try             
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');  
  obj := OpenInDocument('ТЕКСТ');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить документ');     
  result := NOT IsMenuItemChecked(GetFromMainWindow('ГЛАВНОЕ МЕНЮ'),'Документы\Справка к документу',true);
  if NOT result then Raise('Почему то пункт меню "Документы\Справка к документу" почему то нажат');
  result := ClickByMainMenuItem('Документы\Справка к документу'); 
  if NOT result then Raise('Не могу кликнуть по пункту меню: "Документы\Справка к документу"');  
  obj := GetFromEditor('ВКЛАДКА "СПРАВКА"');
  result := IsExists(obj) AND obj.Visible;
  if NOT result then
    Log.Error('Вкладка "Справка" не отобразилась.');
  GoToMainMenu;  
except
  Log.Message('HLTC73_11_1_1_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.1: Справка
  	HLTC73.11.1.3: Проверить, что для вкладки «Справка» система поддерживает те
    же операции, что описаны для текста документа: 
      HLTC73.11.1.3.1: Переход по ссылкам. 
}      
function HLTC73_11_1_3_1_Execute (var  CurrentState: OleVariant): OleVariant;
const 
	DOC_NUM = 1055132;
  CONTEXT = 'Федеральным законом';
  CAPTION = '*Федеральный закон от 2 января 2000 г. N 25-ФЗ*';
var
	reference;  
  wndCaption;
begin
try             
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');  
  reference := OpenInDocument('СПРАВКА');
  if NOT IsExists(reference) then Raise('Не удалось получить вкладку "СПРАВКА"');
  if NOT ClickByHyperLink(reference, CONTEXT) then Raise('Не удалось кликнуть по искомой гиперссылки');
  wndCaption := GetMainWindow.Caption;
  if NOT StringCompare(CAPTION, wndCaption) then
  begin
    Log.Error('После попытки перехода по гиперссылке Caption окна не эталонный', wndCaption);
    Raise;
  end;
  result := true;    
  GoToMainMenu;  
except
  Log.Message('HLTC73_11_1_3_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.1: Справка
  	HLTC73.11.1.3: Проверить, что для вкладки «Справка» система поддерживает те
    же операции, что описаны для текста документа: 
      HLTC73.11.1.3.2: Установка закладки (пункт контекстного меню) и переход к ней.
}      
function HLTC73_11_1_3_2_Execute (var  CurrentState: OleVariant): OleVariant;
const 
	DOC_NUM = 1055132;
  FOLDER_PREF = 'HLTC73_11_1_3_2_';
var
	obj;  
  str,str1;
	copy_attempts;
begin
try             
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');  
  obj := OpenInDocument('СПРАВКА');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить вкладку "СПРАВКА"');     
  Sys.Keys('^[Home]');
  Delay(Options.Run.Timeout div 10);   
  str := CopyToClipboard(obj,'STRING','Trim := true');
	copy_attempts := 0;
  while (str = '') and (copy_attempts < MAX_COPY_ATTEMPTS) do
  begin
		Inc(copy_attempts);
    Sys.Keys('[Down]');
    Delay(Options.Run.Timeout div 10);   
    str := CopyToClipboard(obj,'STRING','Trim := true');
  end;
  str := FOLDER_PREF + str;  
  result := SetBookmark(str,'','Мои документы',true,obj);  
  if NOT result then Raise('Не удалось установить закладку');
  result := OpenObjectFromFolder(MY_DOCS_PATH+str);
  if NOT result then Raise('Не удалось открыть закладку из моих документов');
  obj := OpenInDocument('ТЕКСТ');
  str1 := FOLDER_PREF + CopyToClipboard(obj,'STRING','Trim := true') + '*';
  result := StringCompare(str1, str);
  if NOT result then
    Log.Error('Закладка находится не на той позиции, где ставилась',str1);
  if NOT DeleteAllInMyDoc then                    
    Log.Warning('Не удалось все объекты из моих документов');    
  GoToMainMenu;  
except
  Log.Message('HLTC73_11_1_3_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.1: Справка
  	HLTC73.11.1.3: Проверить, что для вкладки «Справка» система поддерживает те
    же операции, что описаны для текста документа: 
      HLTC73.11.1.3.3: Выделение
        HLTC73.11.1.3.3.1: Слова 
}
function HLTC73_11_1_3_3_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;  
  CONTEXT = 'Договор';  
var
  obj;
  str;
  x,y: integer;
begin
try                                   
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');  
  obj := OpenInDocument('СПРАВКА');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить вкладку "СПРАВКА"');  
  result := GetCoordsSearchContext(obj, CONTEXT, x, y,true);
  if NOT result then Raise ('Не удалось найти координаты искомого контекста');     
  obj.DblClick(x+10, y);//выделяем слово  
  str := CopyToClipboard(obj, '', 'Trim := true');    
  result := str = CONTEXT;
  if NOT result then
    Log.Error('Текущее слово выделилось неправильно',str);  
  GoToMainMenu;  
except
  Log.Message('HLTC73_11_1_3_3_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end; 

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.1: Справка
  	HLTC73.11.1.3: Проверить, что для вкладки «Справка» система поддерживает те
    же операции, что описаны для текста документа: 
      HLTC73.11.1.3.3: Выделение
        HLTC73.11.1.3.3.2: Абзаца
}
function HLTC73_11_1_3_3_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;  
  CONTEXT = 'Договор "О создании';  
  TEST_WORDS = 'Договор "О создании Союзного государства" (Москва, 8 декабря 1999 г.)';
var
  obj;
  str;
  x,y: integer;
begin
try                                  
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');  
  obj := OpenInDocument('СПРАВКА');
  if NOT IsExists(obj) then Raise('Не удалось получить вкладку "СПРАВКА"');  
  if NOT GetCoordsSearchContext(obj, CONTEXT, x, y, true) then Raise('Не удалось получить координаты искомого контекста');     
  obj.Click(x+10, y);
  Sys.Keys('[Home]![End]');  
  str := CopyToClipboard(obj, '', 'Trim := true');    
  result := str = TEST_WORDS;
  if NOT result then
    Log.Error('Текущий абзац выделился неправильно', str);  
  GoToMainMenu;  
except
  Log.Message('HLTC73_11_1_3_3_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end; 

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.1: Справка
  	HLTC73.11.1.3: Проверить, что для вкладки «Справка» система поддерживает те
    же операции, что описаны для текста документа: 
      HLTC73.11.1.3.3: Выделение
        HLTC73.11.1.3.3.3: Нескольких абзацев
}
function HLTC73_11_1_3_3_3_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;     
  WORD_START = 'Договор "О создании';
  WORD_END =  '26 января 2000 г.'; 
var
  obj;
  str;
  i;
begin
try                                   
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');  
  obj := OpenInDocument('СПРАВКА');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить вкладку "СПРАВКА"');  
  obj.SetFocus;
  Sys.Keys('^[Home]');
  Delay(Options.Run.Timeout div 60);  
  for i := 1 to 4 do  
    PressKeyWithCheck(['![Down]']);
   
  str := CopyToClipboard(obj, '', 'Trim := true');    
  result := StringCompare (WORD_START+ '*' + WORD_END + '*',str);     
  if NOT result then
    Log.Error('Текст выделился неправильно, должно было выделится несколько абзацев',str);  
  GoToMainMenu;  
except
  Log.Message('HLTC73_11_1_3_3_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end; 

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.1: Справка
  	HLTC73.11.1.3: Проверить, что для вкладки «Справка» система поддерживает те
    же операции, что описаны для текста документа: 
      HLTC73.11.1.3.3: Выделение
        HLTC73.11.1.3.3.4: Всего текста
}
function HLTC73_11_1_3_3_4_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;     
  WORD_START = 'Договор "О создании';
  WORD_MIDLE = '26 января 2000 г.';
  WORD_END =  'от 29 января 2000 г., N 21'; 
var
  obj;
  str;
  x,y: integer;
begin
try                                   
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');  
  obj := OpenInDocument('СПРАВКА');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить вкладку "СПРАВКА"');  
  obj.SetFocus;
  PressKeyWithCheck(['^a']);
  str := CopyToClipboard(obj, '', 'Trim := true');    
  result := StringCompare ('*' + WORD_START + '*' + WORD_MIDLE + '*' + WORD_END + '*', str);     
  if NOT result then
    Log.Error('Текст выделился неправильно',str);  
  GoToMainMenu;  
except
  Log.Message('HLTC73_11_1_3_3_4_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end; 

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.1: Справка
  	HLTC73.11.1.3: Проверить, что для вкладки «Справка» система поддерживает те
    же операции, что описаны для текста документа: 
      HLTC73.11.1.3.3: Выделение
        HLTC73.11.1.3.3.5: Мульти выделение – несколько слов в пределах одного абзаца
}
function HLTC73_11_1_3_3_5_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;     
  WORD_START = 'Союзного';  
  WORD_END = 'декабря 1999 г'; 
var
  obj;
  str;  
  x1, y1: integer;
  x2, y2: integer;
  i;
begin
try                                
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('СПРАВКА');
  if NOT IsExists(obj) then Raise('Не удалось получить вкладку "СПРАВКА"');  
  if NOT GetCoordsSearchContext(obj, WORD_END, x2, y2) then Raise('Не удалось получить координаты искомого контекста');     
  Sys.Keys('^[Home]');  
  if NOT BaseSearchInDocument (obj, WORD_START) then Raise ('Не удалось найти искомый контекст');  
  if NOT SelectWordOnContext(obj) then Raise('Не удалось выделить слово целиком из контекстного меню');  
  if NOT DragExt(obj, x2, y2, obj.Width-x2-20, 0, 'skCtrl') then 
    Raise ('Не удалось выделить текст начиная с координат x2, y2 при помощи DragExt');  
  str := CopyToClipboard(obj, '', 'Trim := true');    
  result := StringCompare (WORD_START + '*' + WORD_END + '*', str);     
  if NOT result then
    Log.Error('Текст после мультивыделения выделился неправильно',str);  
  GoToMainMenu;  
except
  Log.Message('HLTC73_11_1_3_3_5_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end; 

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.1: Справка
  	HLTC73.11.1.3: Проверить, что для вкладки «Справка» система поддерживает те
    же операции, что описаны для текста документа: 
      HLTC73.11.1.3.3: Выделение
        HLTC73.11.1.3.3.6: Мульти выделение – несколько слов из разных абзацев
}
function HLTC73_11_1_3_3_6_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;     
  WORD_START = 'Союзного';  
  WORD_END = 'вступил'; 
var
  obj;
  str;  
  x1, y1: integer;
  x2, y2: integer;
  i;
begin
try                                   
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');  
  obj := OpenInDocument('СПРАВКА');
  if NOT IsExists(obj) then Raise('Не удалось получить вкладку "СПРАВКА"');    
  if NOT GetCoordsSearchContext(obj, WORD_END, x2, y2) then Raise('Не удалось получить координаты искомого контекста');  
  obj.SetFocus;
  Sys.Keys('^[Home]');
  if NOT BaseSearchInDocument (obj, WORD_START) then Raise ('Не удалось найти искомый контекст');  
  if NOT SelectWordOnContext(obj) then Raise('Не удалось выделить слово целиком из контекстного меню');  
  if NOT DragExt(obj, x2, y2, obj.Width-x2-20, 0, 'skCtrl') then
    Raise ('Не удалось выделить текст начиная с координат x2, y2 при помощи DragExt');  
  str := CopyToClipboard(obj, '', 'Trim := true');    
  result := StringCompare (WORD_START + '*' + WORD_END + '*', str);     
  if NOT result then
    Log.Error('Текст выделился неправильно', str);  
  GoToMainMenu;  
except
  Log.Message('HLTC73_11_1_3_3_6_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end; 

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.1: Справка
  	HLTC73.11.1.3: Проверить, что для вкладки «Справка» система поддерживает те
    же операции, что описаны для текста документа: 
      HLTC73.11.1.3.5: Предварительный просмотр
       печати
}
function HLTC73_11_1_3_5_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;     
var
  obj;  
begin                                  
try
  result := OpenDocByNumber(DOC_NUM);    
  if NOT result then Raise('Не удалось открыть документ по Alt+N');  
  obj := OpenInDocument('СПРАВКА');
  result := IsExists(obj); 
  if NOT result then Raise('Не удалось получить вкладку "СПРАВКА"');
  obj := GetFromEditor ('ТУЛБАР "ДОКУМЕНТ: СПРАВКА К ДОКУМЕНТУ"');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить тулбар к справке');  
  result := ClickToolbarButton (obj, 'Предварительный просмотр');   
  if NOT result then Raise('Не удалось кликнуть на тулбаре по кнопке "Предварительный просмотр"');
  result := IsCorrectPreview;
  if NOT result then
    Log.Error('окно Предварительного просмотра не корректно');
  GoToMainMenu;  
except
  Log.Message('HLTC73_11_1_3_5_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end; 

{
HLTC73 : Просмотр документа
  HLTC73.11 : Справочная информация к документу
    HLTC73.11.1 : Справка
      HLTC73.11.1.4 : Просмотреть справки
        HLTC73.11.1.4.1 : для юр. документа
        
      HLTC73.11.1.3 : Проверить, что для вкладки «Справка» система поддерживает те же операции, что описаны для текста документа: 
        HLTC73.11.1.3.6 : Копирование в буфер 

      HLTC73.11.1.3 : Проверить, что для вкладки «Справка» система поддерживает те же операции, что описаны для текста документа: 
        HLTC73.11.1.3.13 : Поиск контекста

}
function HLTC73_11_1_3_6_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;     
  CONTEXT = 'Москва';
var
  obj; 
  x,y: integer; 
begin                                  
try
  Sys.Clipboard := '';
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');  
  obj := OpenInDocument('СПРАВКА');
  result := IsExists(obj); 
  if NOT result then Raise('Не удалось получить вкладку "СПРАВКА"');  
  result := GetCoordsSearchContext(obj, CONTEXT, x, y);
  if NOT result then Raise ('Не удалось найти координаты искомого контекста');  
  obj.ClickR (x + 10, y);
  result := ClickByPopupMenuItem(obj, 'Копировать');      
  if NOT result then Raise('Не удалось вызвать пункт контекстного меню "Копировать"');   
  result := Sys.Clipboard = CONTEXT; 
  if NOT result then
    Log.Error('Текс в буфере не равен исходному');
  GoToMainMenu;  
except
  Log.Message('HLTC73_11_1_3_6_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end; 

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.1: Справка
  	HLTC73.11.1.3: Проверить, что для вкладки «Справка» система поддерживает те
    же операции, что описаны для текста документа: 
      HLTC73.11.1.3.11: Мои комментарии
}
function HLTC73_11_1_3_11_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;     
  FOLDER_PREF = 'HLTC73_11_1_3_11';
var
  obj, sub; 
  x,y: integer; 
  str;
begin                                  
try 
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');  
  obj := OpenInDocument('СПРАВКА');
  result := IsExists(obj); 
  if NOT result then Raise('Не удалось получить вкладку "СПРАВКА"');  
  obj.SetFocus;
  Sys.Keys('[Down]');
  result :=  InsertComment(obj, FOLDER_PREF);
  if NOT result then Raise('Не удалось установить комментарий');
  str:= SelectTextComment(obj, 1);
  result := StringCompare(str, FOLDER_PREF);
  if NOT result then
    Log.Error('Неправильный текст комментария');
  Sys.Keys('[Del]');
  GoToMainMenu;
except
  Log.Message('HLTC73_11_1_3_11_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end; 

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.1: Справка
  	HLTC73.11.1.3: Проверить, что для вкладки «Справка» система поддерживает те
    же операции, что описаны для текста документа: 
      HLTC73.11.1.3.12: Пользовательские гиперссылки
}
function HLTC73_11_1_3_12_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;     
  FOLDER_PREF = 'HLTC73_11_1_3_12';
var
  obj; 
  x,y: integer; 
begin                                  
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');  
  obj := OpenInDocument('СПРАВКА');
  result := IsExists(obj); 
  if NOT result then Raise('Не удалось получить вкладку "СПРАВКА"');  
  obj.SetFocus;
  Sys.Keys('[Down] [Enter]' + FOLDER_PREF + '[Left][Apps]');
  result := ClickByPopupMenuItem(obj, 'Поставить ссылку...');        
  if NOT result then Raise('Не удалось вызвать пункт контекстного меню "Поставить ссылку..."'); 
  
  //.....
except
  Log.Message('HLTC73_11_1_3_12_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end; 

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.2: СПИСОК ССЫЛОК ИЗ ДОКУМЕНТА/ССЫЛОК НА ДОКУМЕНТ
    HLTC73.11.2.1: Проверить, что по умолчанию вкладка «ССЫЛКИ ИЗ ДОКУМЕНТА» в документе отсутствует. 
     Проверить, что в нижней части окна показывается СПИСОК ССЫЛОК ИЗ ДОКУМЕНТА
      HLTC73.11.2.1.2: При нажатии кнопки «ССЫЛКИ ИЗ ДОКУМЕНТА» панели инструментов  
}
function HLTC73_11_2_1_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;      
var
  obj; 
begin                                  
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');  
  obj := GetFromEditor('ВКЛАДКА "ССЫЛКИ ИЗ ДОКУМЕНТА"');
  result := NOT IsExists(obj);
  if NOT result then
  begin
    Log.Error('по умолчанию вкладка «ССЫЛКИ ИЗ ДОКУМЕНТА» в документе не отсутствует ');
    Raise('по умолчанию вкладка «ССЫЛКИ ИЗ ДОКУМЕНТА» в документе не отсутствует ');
  end;
  obj := GetFromEditor ('ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить тулбар документа');  
  result:=ClickToolBarButton(obj, 'Ссылки из документа (вид информации)', 'SetToState:=pressed'); 
  if NOT result then Raise ('Не удалось нажать на кнопку "ССЫЛКИ ИЗ ДОКУМЕНТА к документу" ');
  obj := GetFromEditor('ВКЛАДКА "ССЫЛКИ ИЗ ДОКУМЕНТА"');
  result := IsExists(obj) AND obj.Visible; 
  if NOT result then
    Log.Error('Не удалось получить вкладку "ССЫЛКИ ИЗ ДОКУМЕНТА"');
  GoToMainMenu;
except
  Log.Message('HLTC73_11_2_1_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end; 

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.2: СПИСОК ССЫЛОК ИЗ ДОКУМЕНТА/ССЫЛОК НА ДОКУМЕНТ
    HLTC73.11.2.1: Проверить, что по умолчанию вкладка «ССЫЛКИ ИЗ ДОКУМЕНТА» в документе отсутствует. 
     Проверить, что в нижней части окна показывается СПИСОК ССЫЛОК ИЗ ДОКУМЕНТА
      HLTC73.11.2.1.3: При выборе пункта «Документ – ССЫЛКИ ИЗ ДОКУМЕНТА» командного меню 
}
function HLTC73_11_2_1_3_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;      
  PATH = 'Документы\ССЫЛКИ ИЗ ДОКУМЕНТА';
var
  obj;   
begin                                  
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');  
  obj := GetFromEditor('ВКЛАДКА "ССЫЛКИ ИЗ ДОКУМЕНТА"');
  result := NOT IsExists(obj);
  if NOT result then
  begin
    Log.Error('по умолчанию вкладка «ССЫЛКИ ИЗ ДОКУМЕНТА» в документе не отсутствует ');
    Raise('по умолчанию вкладка «ССЫЛКИ ИЗ ДОКУМЕНТА» в документе не отсутствует ');
  end;
  result := ClickByMainMenuItem(PATH);
  if NOT result then Raise('Не удалось кликнуть по пункту меню:' + PATH);  
  obj := GetFromEditor('ВКЛАДКА "ССЫЛКИ ИЗ ДОКУМЕНТА"');
  result := IsExists(obj) AND obj.Visible; 
  if NOT result then
    Log.Error('Не удалось получить вкладку "ССЫЛКИ ИЗ ДОКУМЕНТА"');
  GoToMainMenu;  
except
  Log.Message('HLTC73_11_2_1_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end; 

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.2: СПИСОК ССЫЛОК ИЗ ДОКУМЕНТА/ССЫЛОК НА ДОКУМЕНТ
    HLTC73.11.2.2: Проверить, что по умолчанию вкладка «ССЫЛКИ НА ДОКУМЕНТ» в документе отсутствует.
     Проверить, что в нижней части окна показывается СПИСОК ССЫЛОК НА ДОКУМЕНТ
      HLTC73.11.2.2.2: При нажатии кнопки «ССЫЛКИ НА ДОКУМЕНТ» панели инструментов
}
function HLTC73_11_2_2_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003790;      
var
  obj;
  pageControl;
begin                                  
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');  
  pageControl := GetFromEditor('ЗАКЛАДКИ');
  if NOT IsExists(pageControl) then Raise('Не удалось получить вкладку ЗАКЛАДКИ');
  result := NOT SwitchToPage(pageControl, 'ССЫЛКИ НА ДОКУМЕНТ');
  if NOT result then 
  begin
    Log.Error('По умолчанию присутствует вкладка "ССЫЛКИ НА ДОКУМЕНТ"');
    Raise;
  end;
  obj := GetFromEditor('ВКЛАДКА "ССЫЛКИ НА ДОКУМЕНТ"');
  result := NOT IsExists(obj);
  if NOT result then
  begin
    Log.Error('по умолчанию вкладка «ССЫЛКИ НА ДОКУМЕНТ» в документе не отсутствует ');
    Raise('по умолчанию вкладка «ССЫЛКИ НА ДОКУМЕНТ» в документе не отсутствует ');
  end;  
  obj := GetFromEditor ('ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить тулбар документа');  
  result:=ClickToolBarButton(obj, 'Ссылки на документ (вид информации)', 'SetToState:=pressed');
  if NOT result then Raise ('Не удалось нажать на кнопку "ССЫЛКИ НА ДОКУМЕНТ (вид информации)" ');
  obj := GetFromEditor('ВКЛАДКА "ССЫЛКИ НА ДОКУМЕНТ"');     
  result := IsExists(obj) AND obj.Visible; 
  if NOT result then
    Log.Error('Не удалось получить вкладку "ССЫЛКИ НА ДОКУМЕНТ"');
  GoToMainMenu;
except
  Log.Message('HLTC73_11_2_2_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end; 

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.2: СПИСОК ССЫЛОК ИЗ ДОКУМЕНТА/ССЫЛОК НА ДОКУМЕНТ
    HLTC73.11.2.2: Проверить, что по умолчанию вкладка «ССЫЛКИ НА ДОКУМЕНТ» в документе отсутствует.
     Проверить, что в нижней части окна показывается СПИСОК ССЫЛОК НА ДОКУМЕНТ
      HLTC73.11.2.2.3: При выборе пункта «Документ – ССЫЛКИ НА ДОКУМЕНТ» командного меню
}
function HLTC73_11_2_2_3_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003790;      
  PATH = 'Документы\ССЫЛКИ НА ДОКУМЕНТ';
var
  obj;   
begin                                  
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');  
  obj := GetFromEditor('ВКЛАДКА "ССЫЛКИ НА ДОКУМЕНТ"');
  result := NOT IsExists(obj);
  if NOT result then
  begin
    Log.Error('по умолчанию вкладка «ССЫЛКИ НА ДОКУМЕНТ» в документе не отсутствует ');
    Raise('по умолчанию вкладка «ССЫЛКИ НА ДОКУМЕНТ» в документе не отсутствует ');
  end;
  result := ClickByMainMenuItem(PATH);
  if NOT result then Raise('Не удалось кликнуть по пункту меню:' + PATH);  
  obj := GetFromEditor('ВКЛАДКА "ССЫЛКИ НА ДОКУМЕНТ"');
  result := IsExists(obj) AND obj.Visible; 
  if NOT result then
    Log.Error('Не удалось получить вкладку "ССЫЛКИ НА ДОКУМЕНТ"');
  GoToMainMenu;  
except
  Log.Message('HLTC73_11_2_2_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end; 

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.2: СПИСОК ССЫЛОК ИЗ ДОКУМЕНТА/ССЫЛОК НА ДОКУМЕНТ
    HHLTC73.11.2.4: Проверить, что в нижней части окна показывается СПИСОК ССЫЛОК ИЗ ДОКУМЕНТА к 
    выделенному фрагменту
      HLTC73.11.2.4.1: При выборе пункта «Показать ССЫЛОК ИЗ ДОКУМЕНТОВ/ССЫЛОК НА ДОКУМЕНТ к фрагменту»
       контекстного меню
}
function HLTC73_11_2_4_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;   
  CONTEXT = 'Декларации';   
var
  obj; 
  x,y;
begin                                  
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N'); 
  obj := OpenInDocument('ТЕКСТ');
    
  result := GetCoordsSearchContext(obj, CONTEXT, x, y);
  if NOT result then Raise ('Не удалось найти координаты искомого контекста');  
  obj.ClickR (x + 10, y);
  result := ClickByPopupMenuItem(obj, 'ССЫЛКИ ИЗ ФРАГМЕНТА\Все документы');      
  if NOT result then Raise('Не удалось вызвать пункт контекстного меню "ССЫЛКИ ИЗ ФРАГМЕНТА\Все документы"');    
  obj := GetFromEditor('ВКЛАДКА "ССЫЛКИ ИЗ ФРАГМЕНТА"');
  result := IsExists(obj) AND obj.Visible; 
  if NOT result then
    Log.Error('Не удалось получить вкладку "ССЫЛКИ ИЗ ФРАГМЕНТА"');
  GoToMainMenu;
except
  Log.Message('HLTC73_11_2_4_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end; 

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.2: СПИСОК ССЫЛОК ИЗ ДОКУМЕНТА/ССЫЛОК НА ДОКУМЕНТ
    HHLTC73.11.2.4: Проверить, что в нижней части окна показывается СПИСОК ССЫЛОК ИЗ ДОКУМЕНТА к выделенному фрагменту
      HLTC73.11.2.4.2: Сравнить документ №1055132. Выделить текст комментария в статье 17 и получить 
      ССЫЛОК ИЗ ДОКУМЕНТОВ (должны быть):
}
function HLTC73_11_2_4_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;   
  CONTEXT = 'Постановление Госстандарта Республики Беларусь и Госстандарта РФ от 17 марта';   
  TEST_WORDS = 'Постановление * и Госстандарта РФ от 17 марта 2000 г. N 4/15 О '+
    'проведении * соответствия в рамках Программы * Договора о создании Союзного государства';
var
  obj; 
  x,y;
  str;
begin                                  
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N'); 
  obj := OpenInDocument('ТЕКСТ');  
  result := GetCoordsSearchContext(obj, CONTEXT, x, y);
  if NOT result then Raise ('Не удалось найти координаты искомого контекста'); 
  obj.ClickR (x + 10, y);
  result := ClickByPopupMenuItem(obj, 'ССЫЛКИ ИЗ ФРАГМЕНТА\Все документы');      
  if NOT result then Raise('Не удалось вызвать пункт контекстного меню "ССЫЛКИ ИЗ ФРАГМЕНТА\Все документы"');    
  obj := GetFromEditor('ВКЛАДКА "ССЫЛКИ ИЗ ФРАГМЕНТА"');
  result := IsExists(obj) AND obj.Visible; 
  if NOT result then Raise('Не удалось получить вкладку "ССЫЛКИ ИЗ ФРАГМЕНТА"');
  str := common.GetWindowText(obj.Handle);
  result := StringCompare(TEST_WORDS, str);
  if NOT result then
  begin
    Log.Error('СПИСОК ССЫЛОК ИЗ ДОКУМЕНТА не равен исходному', str);
    Raise;
  end;  
  obj.SetFocus;
  Sys.Keys('[Down]');
  str := common.GetWindowText(obj.Handle);
  result := StringCompare(TEST_WORDS, str);
  if NOT result then
    Log.Error('СПИСОК ССЫЛОК ИЗ ДОКУМЕНТА не равен исходному', str);
  GoToMainMenu;
except
  Log.Message('HLTC73_11_2_4_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end; 

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.2: СПИСОК ССЫЛОК ИЗ ДОКУМЕНТА/ССЫЛОК НА ДОКУМЕНТ
    HLTC73.11.2.6: Типизированные ССЫЛКИ НА ДОКУМЕНТ/ССЫЛКИ ИЗ ДОКУМЕНТА (типизация проводится 
    выбор необходимого типа из выпадающего списка на соответствующей вкладке.)
      HLTC73.11.2.6.1: ССЫЛКИ НА ДОКУМЕНТ(ССЫЛКИ ИЗ ДОКУМЕНТА) к документу не имеют вида правовой информации.
        HLTC73.11.2.6.1.1: Построить корреспондентов к документу Alt+N 4540. При попытке их типизировать выдается сообщение:
        «Документы выбранного вида информации (<выбранный тип>), ссылающиеся на документ, отсутствуют. Построить список всех документов, ссылающихся на данный?
        Да, Нет»
        
        Проверить для всех видов правовой информации, кроме «Акты органов власти».
        
        Проверить корректную работу кнопок Да и Нет.
}
function HLTC73_11_2_6_1_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 4540;     
var
  obj;
  tmpObj;
  comboBox;  
  str, str1, midleWord: string;
  i: integer;
  comboStr;
begin                                  
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N'); 
  
  obj := OpenInDocument('ССЫЛКИ НА ДОКУМЕНТ');
  result := IsExists(obj) AND obj.Visible; 
  if NOT result then Raise('Не удалось получить вкладку "ССЫЛКИ НА ДОКУМЕНТ"');
  comboBox := GetToolBarObject(GetFromEditor('ТУЛБАР "СПИСОК: ССЫЛКИ НА ДОКУМЕНТ"'), 'COMBOBOX', 'Выбрать тип');
  result := IsExists(comboBox);
  if NOT result then Raise('Не удалось получить комбобокс "ВЫБРАТЬ ТИП" на тулбаре ТУЛБАР "СПИСОК: ССЫЛКИ НА ДОКУМЕНТ"');
  for i := 1 to 6 do
  begin           
    case i of
      1 : midleWord := 'Судебная практика';
      2 : midleWord := 'Комментарии';
      3 : midleWord := 'Формы документов';
      4 : midleWord := 'Международные договоры';
      5 : midleWord := 'Проекты законов';
      6 : midleWord := 'Отраслевая информация';
    end;  
        
    comboBox.Click(comboBox.Width div 2, comboBox.Height div 2);
    tmpObj := GetFromShell('ВЫПАДАЮЩИЙ СПИСОК КОМБОБОКСА НА ВКЛАДКЕ ССЫЛКИ НА ДОКУМЕНТ');
    result := IsExists(tmpObj); 
    if NOT result then Raise('Не удалось получить ВЫПАДАЮЩИЙ СПИСОК КОМБОБОКСА НА ВКЛАДКЕ ССЫЛКИ НА ДОКУМЕНТ');    
    PressKeyNCount('[Up]', 7); //Заменяет нажатие [Home]
    result := Position_Internal(tmpObj, midleWord,'\', false, 'isFocusFolderTree:=false');
    if NOT result then 
      Raise('Не удалось выбрать тип :' + midleWord + ' из выпадающего списка типизации ССЫЛОК НА ДОКУМЕНТ');
    Sys.Keys('[Enter]');  
    str := 'Документы выбранного вида информации (' + midleWord +')' +
          '*Построить список всех документов, ссылающихся на данный?*';
    str1 := WaitForConfirmationWindow;
    result := StringCompare(str, str1);
    if NOT result then
    begin
      Log.Error('Некорректное сообщение в окне "Подтверждения"', str1);
      Raise('Некорректное сообщение в окне "Подтверждения"');
    end;
  end;    
  //Теперь проверям  корректную работу кнопок Да и Нет.
  comboBox.Click(comboBox.Width div 2, comboBox.Height div 2);          
  PressKeyNCount('[Up]', 7); //Заменяет нажатие [Home]      
  if NOT Position_Internal(GetFromShell('ВЫПАДАЮЩИЙ СПИСОК КОМБОБОКСА НА ВКЛАДКЕ ССЫЛКИ НА ДОКУМЕНТ'), 'Акты органов власти','\', false, 'isFocusFolderTree:=false') then 
    Raise ('Не удалось в комбобоксе выбрать Акты органов власти');
  Sys.Keys('[Enter]');
  
  comboBox.Click(comboBox.Width div 2, comboBox.Height div 2);          
  PressKeyNCount('[Up]', 7); //Заменяет нажатие [Home]      
  if NOT Position_Internal(GetFromShell('ВЫПАДАЮЩИЙ СПИСОК КОМБОБОКСА НА ВКЛАДКЕ ССЫЛКИ НА ДОКУМЕНТ'), 'Комментарии','\', false, 'isFocusFolderTree:=false') then 
    Raise ('Не удалось в комбобоксе выбрать Комментарии');
  Sys.Keys('[Enter]');
    
  WaitForConfirmationWindow;
  comboStr := common.GetWindowText(combobox.handle);
  if NOT StringCompare('Все документы', comboStr) then 
  begin
    Log.Error('После выбора ДА в диалоге подтверждения типизированных СКР, при отсутствии таковых, НЕ построился список Всех документов');
    Raise('После выбора ДА в диалоге подтверждения типизированных СКР, при отсутствии таковых, НЕ построился список Всех документов');
  end;
  
  comboBox.Click(comboBox.Width div 2, comboBox.Height div 2);          
  PressKeyNCount('[Up]', 7); //Заменяет нажатие [Home]      
  if NOT Position_Internal(GetFromShell('ВЫПАДАЮЩИЙ СПИСОК КОМБОБОКСА НА ВКЛАДКЕ ССЫЛКИ НА ДОКУМЕНТ'), 'Акты органов власти','\', false, 'isFocusFolderTree:=false') then 
    Raise ('Не удалось в комбобоксе выбрать Акты органов власти');
  Sys.Keys('[Enter]');
  
  comboBox.Click(comboBox.Width div 2, comboBox.Height div 2);          
  PressKeyNCount('[Up]', 7); //Заменяет нажатие [Home]      
  if NOT Position_Internal(GetFromShell('ВЫПАДАЮЩИЙ СПИСОК КОМБОБОКСА НА ВКЛАДКЕ ССЫЛКИ НА ДОКУМЕНТ'), 'Комментарии','\', false, 'isFocusFolderTree:=false') then 
    Raise ('Не удалось в комбобоксе выбрать Комментарии');
  Sys.Keys('[Enter]');
  
  WaitForConfirmationWindow(-1, 'Нет');
  comboStr := common.GetWindowText(combobox.handle);
  if NOT StringCompare('Акты органов власти', comboStr) then 
  begin
    Log.Error('После выбора НЕТ в диалоге подтверждения типизированных СКР, при отсутствии таковых, построился список Всех документов');
    Raise('После выбора НЕТ в диалоге подтверждения типизированных СКР, при отсутствии таковых, построился список Всех документов');
  end;        
  result := true;
  GoToMainMenu;  
except
  Log.Message('HLTC73_11_2_6_1_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end; 

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.2: СПИСОК ССЫЛОК ИЗ ДОКУМЕНТА/ССЫЛОК НА ДОКУМЕНТ
    HLTC73.11.2.6: Типизированные ССЫЛКИ НА ДОКУМЕНТ/ССЫЛКИ ИЗ ДОКУМЕНТА (типизация проводится 
    выбор необходимого типа из выпадающего списка на соответствующей вкладке.)
      К документу «Договор о создании союзного государства» (находится по первой ветке классификатора) 
      корреспондентов типа «Акты органов власти» - 12 штук, среди которых ДОЛЖНО БЫТЬ «Постановление 
      Правительства РФ от 17 декабря 2001 года N 869...» 
}                                                                      
function HLTC73_11_2_6_5_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;     
  DOC_NAME = 'Постановление Правительства РФ от 17 декабря 2001 г. N 869';
  PATH = 'Акты органов власти';
  ETALON_COUNT = 23;
var
  obj;  
  tmpObj;
  count; 
begin                                  
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');  
  obj := OpenInDocument('ССЫЛКИ НА ДОКУМЕНТ');
  result := IsExists(obj) AND obj.Visible; 
  if NOT result then Raise('Не удалось получить вкладку "ССЫЛКИ НА ДОКУМЕНТ"');
  //Работа с извратным комбобоксом
  tmpObj := GetToolBarObject(GetFromEditor('ТУЛБАР "СПИСОК: ССЫЛКИ НА ДОКУМЕНТ"'), 'COMBOBOX', 'Выбрать тип');
  result := IsExists(tmpObj);
  if NOT result then Raise('Не удалось получить комбобокс "ВЫБРАТЬ ТИП" на тулбаре ТУЛБАР "СПИСОК: ССЫЛКИ НА ДОКУМЕНТ"');
  tmpObj.Click(tmpObj.Width div 2, tmpObj.Height div 2);
  tmpObj := GetFromShell('ВЫПАДАЮЩИЙ СПИСОК КОМБОБОКСА НА ВКЛАДКЕ ССЫЛКИ НА ДОКУМЕНТ');
  result := IsExists(tmpObj); 
  if NOT result then Raise('Не удалось получить ВЫПАДАЮЩИЙ СПИСОК КОМБОБОКСА НА ВКЛАДКЕ ССЫЛКИ НА ДОКУМЕНТ');
  result := OpenObjectFromFolder(PATH, tmpObj, 'isFocusFolderTree:=false'); 
  if NOT result then 
    Raise('Не удалось выбрать тип :' + PATH +'из выпадающего списка типизации ССЫЛОК НА ДОКУМЕНТ'); 
  //////////////////////////////////
  count := CountElementInTree(obj);
  result := count = ETALON_COUNT;
  if NOT result then
  begin
    Log.Error('Количество ССЫЛОК НА ДОКУМЕНТ типа «' + PATH + '» НЕ ' + IntToStr(ETALON_COUNT) + ' штук, а :' + IntToStr(count));
    Raise;
  end;
  obj.SetFocus;
  Sys.Keys('[Home]');
  result := Position_Internal(obj, DOC_NAME +  '*', '\', true);
  if NOT result then
    Log.Error('Не найден документ в списке ССЫЛОК НА ДОКУМЕНТ', DOC_NAME + '...');
  GoToMainMenu;   
except
  Log.Message('HLTC73_11_2_6_5_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end; 

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.2: СПИСОК ССЫЛОК ИЗ ДОКУМЕНТА/ССЫЛОК НА ДОКУМЕНТ
    HLTC73.11.2.6: Типизированные ССЫЛКИ НА ДОКУМЕНТ/ССЫЛКИ ИЗ ДОКУМЕНТА (типизация проводится 
    выбор необходимого типа из выпадающего списка на соответствующей вкладке.)
      HLTC73.11.2.6.6: ССЫЛКИ ИЗ ДОКУМЕНТА/ССЫЛКИ НА ДОКУМЕНТ. только типа «Акты органов власти»:
        Респонденты (ссылки из) документа Alt+N 2005:
          Документ 2002 
            Block 312
          Документ 2004 
            Block 100 документа 2004
          Постановление Правительства РФ от 6 декабря 2001 г. N 865 "О подписании Соглашения между Правительством Российской Федерации и Правительством Туркменистана о сотрудничестве в газовой отрасли" 
            Вхождение 1
          Документ 2009 
            Это блок 11 /Это блок 10/
          Документ 2001.
}
function HLTC73_11_2_6_6_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 102005;
  PATH = 'Акты органов власти';  
var    
  tmpObj;        
  list;
  curList, etalonList;
begin                                  
try  
  etalonList := [
    'Документ 2002*Block 312*',
    'Документ 2004*Block 100 документа 2004',
    'Постановление Правительства РФ от 6 декабря 2001 г. N 865 "О подписании '+ 
      'Соглашения между Правительством Российской Федерации и Правительством Туркменистана о сотрудничестве '+ 
      'в газовой отрасли"'+ endOfLine +'Вхождение 1',
    'Документ 2009*Это блок 11 /Это блок 10/',
    'Документ 2001.*'
   ];  
  if NOT OpenDocByNumber(DOC_NUM, false, false) then 
    Raise('Не удалось открыть документ по Alt+N');  
  list := OpenInDocument('ССЫЛКИ ИЗ ДОКУМЕНТА');   
  if NOT (IsExists(list) AND list.Visible) then 
    Raise('Не удалось получить вкладку "ССЫЛКИ ИЗ ДОКУМЕНТА"');
  //Работа с извратным комбобоксом
  tmpObj := GetToolBarObject(GetFromEditor('ТУЛБАР "СПИСОК: ССЫЛКИ ИЗ ДОКУМЕНТА"'), 'COMBOBOX', 'Выбрать тип');  
  if NOT IsExists(tmpObj) then Raise('Не удалось получить комбобокс "ВЫБРАТЬ ТИП" на тулбаре ТУЛБАР "СПИСОК: ССЫЛКИ ИЗ ДОКУМЕНТА"');
  tmpObj.Click(tmpObj.Width div 2, tmpObj.Height div 2);
  tmpObj := GetFromShell('ВЫПАДАЮЩИЙ СПИСОК КОМБОБОКСА НА ВКЛАДКЕ ССЫЛКИ ИЗ ДОКУМЕНТА');   
  if NOT IsExists(tmpObj) then Raise('Не удалось получить ВЫПАДАЮЩИЙ СПИСОК КОМБОБОКСА НА ВКЛАДКЕ ССЫЛКИ ИЗ ДОКУМЕНТА');   
  if NOT OpenObjectFromFolder(PATH, tmpObj, 'isFocusFolderTree:=false') then 
    Raise('Не удалось выбрать тип :' + PATH +'из выпадающего списка типизации ССЫЛОК НА ДОКУМЕНТ'); 
  //////////////////////////////////
  list := GetFromEditor('ВКЛАДКА "ССЫЛКИ ИЗ ДОКУМЕНТА"');
  //Разворачиваем все вхождения
  //list.setFocus;
  //Sys.Keys('[Apps]');
  //if NOT ClickByPopUpMenuItem(list, 'Развернуть все') then Raise('Не удалось вызвать из контекстного меню "Развернуть все"');
  //Вытаскиваем все элементы списка в массив
  curList := GetElementsFromTree(list);
  if NOT CompareArray(etalonList, curList, true, true) then
  begin
    Log.Error('Список ссылок на документ по типу Акты органов власти не Эталонен', curList);
    Raise('Список ссылок на документ по типу Акты органов власти не Эталонен');
  end;  
  GoToMainMenu;
  result := true;     
except
  Log.Message('HLTC73_11_2_6_6_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end; 

{
HLTC73.11: Справочная информация к документу
 HLTC73.11.2: СПИСОК ССЫЛОК ИЗ ДОКУМЕНТА/ССЫЛОК НА ДОКУМЕНТ
  HLTC73.11.2.6: Типизированные ССЫЛКИ НА ДОКУМЕНТ/ССЫЛКИ ИЗ ДОКУМЕНТА (типизация проводится 
  выбор необходимого типа из выпадающего списка на соответствующей вкладке.)
   HLTC73.11.2.6.6: ССЫЛКИ ИЗ ДОКУМЕНТА/ССЫЛКИ НА ДОКУМЕНТ. только типа «Акты органов власти»:
    HLTC73.11.2.6.6.2: ССЫЛКИ НА ДОКУМЕНТ к документу Alt+N 12022630 <br/>
    <i><li/>Письмо Госстроя РФ от 28 февраля 1999 г. N 10-56 О Концепции ценовой и тарифной политики в 
    жилищно-коммунальном хозяйстве РФ</i>
}
function HLTC73_11_2_6_6_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 12022630;
  RESPONDENT_NAME = 'Письмо Госстроя РФ от 28 февраля 1999 г. N 10-56 О Концепции ценовой и тарифной ' + 
    'политики в жилищно-коммунальном хозяйстве РФ';
  RESPONDENT_START_TEXT = 'ГАРАНТ:*См. Методические рекомендации по финансовому обоснованию*';
  PATH = 'Акты органов власти';
var
  obj;
  tmpObj;   
  str;  
begin                                  
try
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  
  obj := OpenInDocument('ССЫЛКИ НА ДОКУМЕНТ');
  result := IsExists(obj) AND obj.Visible; 
  if NOT result then Raise('Не удалось получить вкладку "ССЫЛКИ НА ДОКУМЕНТ"');
  //Работа с извратным комбобоксом
  tmpObj := GetToolBarObject(GetFromEditor('ТУЛБАР "СПИСОК: ССЫЛКИ НА ДОКУМЕНТ"'), 'COMBOBOX', 'Выбрать тип');
  result := IsExists(tmpObj);
  if NOT result then Raise('Не удалось получить комбобокс "ВЫБРАТЬ ТИП" на тулбаре ТУЛБАР "СПИСОК: ССЫЛКИ НА ДОКУМЕНТ"');
  tmpObj.Click(tmpObj.Width div 2, tmpObj.Height div 2);
  tmpObj := GetFromShell('ВЫПАДАЮЩИЙ СПИСОК КОМБОБОКСА НА ВКЛАДКЕ ССЫЛКИ НА ДОКУМЕНТ');
  result := IsExists(tmpObj); 
  if NOT result then Raise('Не удалось получить ВЫПАДАЮЩИЙ СПИСОК КОМБОБОКСА НА ВКЛАДКЕ ССЫЛКИ НА ДОКУМЕНТ');
  result := OpenObjectFromFolder(PATH, tmpObj, 'isFocusFolderTree:=false'); 
  if NOT result then 
    Raise('Не удалось выбрать тип :' + PATH +'из выпадающего списка типизации ССЫЛОК НА ДОКУМЕНТ'); 
  //////////////////////////////////
  if NOT CountElementInTree(obj) = 1 then
  begin
    Log.Error('Количество "ССЫЛКИ НА ДОКУМЕНТ\Акты органов власти" для этого документа (12022630) не равно 1 Штука!');
    Raise;
  end;
  obj.SetFocus;
  Sys.Keys('[Up]');//7.4:Что бы подняться над ссылкой "Показать полный список", а то Position_Internal на таком дереве не праильно отработает
  if NOT OpenObjectFromFolder(RESPONDENT_NAME, obj) then
  begin
    Log.Error('Список "ССЫЛКИ НА ДОКУМЕНТ\Акты органов власти" для этого документа (12022630) не эталонен, должен быть всего один документ' + RESPONDENT_NAME);
    Raise;
  end;  
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  obj.SetFocus;
  str := CopyToClipboard(obj, 'STRING', 'Trim := true');    
  if NOT StringCompare(RESPONDENT_START_TEXT, str) then  
  begin
    Log.Error('Переход по документу(Корреспонденту) осуществился на неправильный параграф', str);
    Raise;
  end;
  result := true;
  GoToMainMenu;   
except
  Log.Message('HLTC73_11_2_6_6_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.2: СПИСОК ССЫЛОК ИЗ ДОКУМЕНТА/ССЫЛОК НА ДОКУМЕНТ
    HLTC73.11.2.6: Типизированные ССЫЛКИ НА ДОКУМЕНТ/ССЫЛКИ ИЗ ДОКУМЕНТА (типизация проводится 
      HLTC73.11.2.6.9: ССЫЛКИ НА ДОКУМЕНТ к выделенному фрагменту: в конституции выделить статью 2 и построить
      ССЫЛОК НА ДОКУМЕНТ к этой статье. В полученном списке перейти в документ, а из него по ссылке опять на 
      конституцию. Затем сделать 2 шага назад по истории и проверить что вкладка ССЫЛКИ НА ФРАГМЕНТ актив
}
function HLTC73_11_2_6_9_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;   
  CONTEXT = 'Статья 2';  
  CONTEXT_1 = 'ст.2'; 
var
  obj; 
  x, y, i: integer;
  str : string;
begin                                  
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N'); 
  obj := OpenInDocument('ТЕКСТ');  
  result := GetCoordsSearchContext(obj, CONTEXT, x, y);
  if NOT result then Raise ('Не удалось найти координаты искомого контекста');  
  obj.ClickR (x + 10, y);
  result := ClickByPopupMenuItem(obj, 'ССЫЛКИ НА ФРАГМЕНТ\Все документы');      
  if NOT result then Raise('Не удалось вызвать пункт контекстного меню "ССЫЛКИ ИЗ ФРАГМЕНТА\Все документы"');    
  obj := GetFromEditor('ВКЛАДКА "ССЫЛКИ НА ФРАГМЕНТ"');
  result := IsExists(obj) AND obj.Visible; 
  if NOT result then
    Log.Error('Не удалось получить вкладку "ССЫЛКИ НА ФРАГМЕНТ"');
  obj := GetFromList('ТУЛБАР ВЕРХНИЙ ПРАВЫЙ', obj);  
  if NOT IsExists(obj) then Raise('Не удалось получиь ТУЛБАР ВЕРХНИЙ ПРАВЫЙ на вкладке "ССЫЛКИ НА ФРАГМЕНТ"');
  if NOT ClickToolBarButton(obj, 'Открыть в текущем окне') then Raise('Не удалось кликнуть по кнопке "Открыть в текущем окне"'); 
  obj := OpenInList('СПИСОК'); 
  if NOT IsExists(obj) then Raise('Не удалось получить список развернутый в текущем окне');
  OpenDocFromList;
  obj := OpenInDocument('ТЕКСТ');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКС ДОКУМЕНТА');
  result := ClickByHyperLink(obj, CONTEXT_1);  
  if NOT result then Raise('Не удалось кликнуть по искомой гиперссылке');
  
  result := GoByHistory('НАЗАД');
  if NOT result then Raise('Не удалось перейти по истории назад');
  
  CloseTabIfNeeded;//заменяет второй шаг по истории, 
  GoByHistory('НАЗАД');//что бы вернуться во вкладку
  obj := GetFromEditor('ВКЛАДКА "ССЫЛКИ НА ФРАГМЕНТ"');
  result := IsExists(obj) AND obj.Visible;
  if NOT result then
    Log.Error('Не удалось получить вкладку "ССЫЛКИ НА ФРАГМЕНТ"');
  
  GoToMainMenu;
except
  Log.Message('HLTC73_11_2_6_9_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
  GoToMainMenuWithCloseTabsExceptOne;
end; 

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.2: СПИСОК ССЫЛОК ИЗ ДОКУМЕНТА/ССЫЛОК НА ДОКУМЕНТ
    HLTC73.11.2.7: Проверить удаление документов из СКР. В этом случае в СКР должен 
    появиться знак «Список изменен»     
}
function HLTC73_11_2_7_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003790;      
var
  obj; 
begin                                  
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('ССЫЛКИ НА ДОКУМЕНТ');
  result := ( IsExists(obj) AND obj.Visible );      
  if NOT result then Raise('Не удалось получить вкладку "ССЫЛКИ НА ДОКУМЕНТ"');
  obj.SetFocus;
  DelWithConfirm; 
  obj := GetFromList('ЗНАЧОК: СПИСОК БЫЛ ИЗМЕНЕН', obj);
  result := IsExists(obj);
  if NOT result then
    Log.Error('Не удалось найти: ЗНАЧОК: СПИСОК БЫЛ ИЗМЕНЕН');
  GoToMainMenu;
except
  Log.Message('HLTC73_11_2_7_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end; 
  
{
HLTC73.11: Справочная информация к документу
	HLTC73.11.2: СПИСОК ССЫЛОК ИЗ ДОКУМЕНТА/ССЫЛОК НА ДОКУМЕНТ
    HLTC73.11.2.8: Проверить логические операции с СКР (появление значка «Список изменен»)
      HLTC73.11.2.8.1: Объединение
}
function HLTC73_11_2_8_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC73_11_2_8_1';
  DOC_NUM = 1055132;
var
  obj; 
begin                                  
try
  result := OpenObjectFromFolder(LIST_MAIN,OpenMenuTab); 
  if NOT result then Raise('Не удалось открыть список по верхней ветки рубрикатора');    
  result := SaveToFoldersExt('Мои документы',FOLDER_PREF,'','Сохранить');
  if NOT result then Raise('Не удалось сохранить список в Мои документы');
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');    
  obj := OpenInDocument('ССЫЛКИ НА ДОКУМЕНТ');
  result := ( IsExists(obj) AND obj.Visible );      
  if NOT result then Raise('Не удалось получить вкладку "ССЫЛКИ НА ДОКУМЕНТ"');
  obj.SetFocus;
  result := ListLogicalOperation('ДОПОЛНИТЬ',MY_DOCS_PATH+FOLDER_PREF, obj);
  if NOT result then  Raise('Не удалось выполнить логическую операцию "Дополнить список"');  
  obj := GetFromList('ЗНАЧОК: СПИСОК БЫЛ ИЗМЕНЕН', obj);
  result := IsExists(obj);
  if NOT result then
    Log.Error('Не удалось найти: ЗНАЧОК: СПИСОК БЫЛ ИЗМЕНЕН');
  if NOT DeleteAllInMyDoc then                    
    Log.Warning('Не удалось все объекты из моих документов');   
  GoToMainMenu;
except
  Log.Message('HLTC73_11_2_8_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end; 
 
{
HLTC73.11: Справочная информация к документу
	HLTC73.11.2: СПИСОК ССЫЛОК ИЗ ДОКУМЕНТА/ССЫЛОК НА ДОКУМЕНТ
    HLTC73.11.2.8: Проверить логические операции с СКР (появление значка «Список изменен»)
      HLTC73.11.2.8.2: Пересечение
}
function HLTC73_11_2_8_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC73_11_2_8_2';
  DOC_NUM = 1055132;
var
  obj; 
begin                                  
try
  result := OpenObjectFromFolder(LIST_MAIN,OpenMenuTab); 
  if NOT result then Raise('Не удалось открыть список по верхней ветки рубрикатора');    
  result := SaveToFoldersExt('Мои документы',FOLDER_PREF,'','Сохранить');
  if NOT result then Raise('Не удалось сохранить список в Мои документы');
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');    
  obj := OpenInDocument('ССЫЛКИ НА ДОКУМЕНТ');
  result := ( IsExists(obj) AND obj.Visible );      
  if NOT result then Raise('Не удалось получить вкладку "ССЫЛКИ НА ДОКУМЕНТ"');
  obj.SetFocus;
  result := ListLogicalOperation('ПЕРЕСЕЧЬ',MY_DOCS_PATH+FOLDER_PREF, obj);
  if NOT result then  Raise('Не удалось выполнить логическую операцию "Дополнить список"');  
  obj := GetFromList('ЗНАЧОК: СПИСОК БЫЛ ИЗМЕНЕН', obj);
  result := IsExists(obj);
  if NOT result then
    Log.Error('Не удалось найти: ЗНАЧОК: СПИСОК БЫЛ ИЗМЕНЕН');
  if NOT DeleteAllInMyDoc then                    
    Log.Warning('Не удалось все объекты из моих документов');   
  GoToMainMenu;
except
  Log.Message('HLTC73_11_2_8_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end; 

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.2: СПИСОК ССЫЛОК ИЗ ДОКУМЕНТА/ССЫЛОК НА ДОКУМЕНТ
    HLTC73.11.2.8: Проверить логические операции с СКР (появление значка «Список изменен»)
      HLTC73.11.2.8.3: Вычитание
}
function HLTC73_11_2_8_3_Execute (var  CurrentState: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC73_11_2_8_3';
  DOC_NUM = 1055132;
var
  obj; 
begin                                  
try
  result := OpenObjectFromFolder(LIST_MAIN,OpenMenuTab); 
  if NOT result then Raise('Не удалось открыть список по верхней ветки рубрикатора');    
  result := SaveToFoldersExt('Мои документы',FOLDER_PREF,'','Сохранить');
  if NOT result then Raise('Не удалось сохранить список в Мои документы');
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('ССЫЛКИ НА ДОКУМЕНТ');
  result := ( IsExists(obj) AND obj.Visible );      
  if NOT result then Raise('Не удалось получить вкладку "ССЫЛКИ НА ДОКУМЕНТ"');
  obj.SetFocus;
  result := ListLogicalOperation('ВЫЧЕСТЬ',MY_DOCS_PATH+FOLDER_PREF, obj);
  if NOT result then  Raise('Не удалось выполнить логическую операцию "Дополнить список"');  
  obj := GetFromList('ЗНАЧОК: СПИСОК БЫЛ ИЗМЕНЕН', obj);
  result := IsExists(obj);
  if NOT result then
    Log.Error('Не удалось найти: ЗНАЧОК: СПИСОК БЫЛ ИЗМЕНЕН');
  if NOT DeleteAllInMyDoc then                    
    Log.Warning('Не удалось все объекты из моих документов');   
  GoToMainMenu;
except
  Log.Message('HLTC73_11_2_8_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end; 

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.2: СПИСОК ССЫЛОК ИЗ ДОКУМЕНТА/ССЫЛОК НА ДОКУМЕНТ
    HLTC73.11.2.9: Проверить, что измененный СКР при разворачивании на весь экран содержит
    те же документы, что и не развернутый.
}
function HLTC73_11_2_9_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;     
var
  obj;  
  list;
begin                                  
try  
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');    
  obj := OpenInDocument('ССЫЛКИ НА ДОКУМЕНТ');     
  if NOT ( IsExists(obj) AND obj.Visible ) then Raise('Не удалось получить вкладку "ССЫЛКИ НА ДОКУМЕНТ"');
  list := GetFromList('СПИСОК ДОКУМЕНТОВ', obj);  
  if NOT IsExists(list) then Raise('Не удалось найти список на вкладке "ССЫЛКИ НА ДОКУМЕНТ"');
  list := GetElementsFromTree(list);
  obj := GetFromList('ТУЛБАР ВЕРХНИЙ ПРАВЫЙ', obj);  
  if NOT IsExists(obj) then Raise('Не удалось получиь ТУЛБАР ВЕРХНИЙ ПРАВЫЙ на вкладке "ССЫЛКИ НА ДОКУМЕНТ"');
  if NOT ClickToolBarButton(obj, 'Открыть в текущем окне') then Raise('Не удалось кликнуть по кнопке "Открыть в текущем окне"'); 
  obj := OpenInList('СПИСОК');
  if NOT IsExists(obj) then Raise('Не удалось получить список, открыв его в текущем окне"');  
  result := CompareArray(GetElementsFromTree(obj),list); 
  if NOT result then
    Log.Error('СКР при разворачивании на весь экран не содержит те же документы, что и не развернутый');
  GoToMainMenu; 
except
  Log.Message('HLTC73_11_2_9_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end; 

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.2: СПИСОК ССЫЛОК ИЗ ДОКУМЕНТА/ССЫЛОК НА ДОКУМЕНТ
    HLTC73.11.2.11: В стандартной конфигурации выделить часть текста и попытаться построить списки
    ССЫЛОК НА ДОКУМЕНТ и ССЫЛОК ИЗ ДОКУМЕНТОВ. Проверить, что в кнопке на тулбаре сначала появляется менюшка 
    выбора области поиска (к тексту, к фрагменту), а затем – уже стандартная для данной базы типизация СКР.
     Проверить так же вызов просмотра СКР через контекстное меню документа.
      HLTC73.11.2.11.1: для ССЫЛОК НА ДОКУМЕНТ
}
function HLTC73_11_2_11_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;  
var
  obj;  
  x, y;
  typeSKR;
  i;
  etalonSKR;
begin                                  
try
  typeSKR := [
    'Все документы', 
    'Акты органов власти',
    'Комментарии',
    'Формы документов',
    'Проекты законов',
    'Судебная практика',
    'Международные договоры'
  ];
  etalonSKR := 'Постановление Правительства РФ от 28 ноября 2000*';
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N'); 
  obj := OpenInDocument('ТЕКСТ');  
  obj.SetFocus;
  Sys.Keys('^[Home]'+keyPause+'[Down]'+keyPause+'!^[End]'+keyPause+'[Apps]');
  obj := GetFromEditor ('ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');
  if NOT IsExists(obj) then Raise('Не удалось получить тулбар документа');     
  obj := ClickToolBarButton(obj, 'Ссылки на документ (вид информации)','ClickForPopupMenu := true');   
  if NOT IsExists(obj) then
  begin 
    Log.Error('Не удалось получить попап-меню нажатием на кнопку Прокрутки (стрелка вниз) для ССЫЛКИ НА ДОКУМЕНТ ');
    Raise;
  end;
  //Проверяем, что в менюшке есть пункты : К тексту\ К фрагменту
  if NOT (IsPopupMenuItemExists(obj, 'К тексту')) AND (IsPopupMenuItemExists(obj, 'К фрагменту')) then
  begin  
    Log.Error('Состав контекстного меню для менюшки выбора области поиска(ССЫЛКИ НА ДОКУМЕНТ К тексту\Всему документу) не эталонный');
    obj.Close;
    Raise;    
  end;
  for i :=  VarArrayLowBound(typeSKR, 1) to VarArrayHighBound(typeSKR, 1) do
  begin
    if NOT IsPopupMenuItemExists(obj, 'К тексту\' + typeSKR[i]) then
    begin
      Log.Error('Не удалось найти пункт контекстного меню "К тексту\' + typeSKR[i] + '"');
      obj.Close;
      Raise;
    end;    
  end;//for
  //Вызываем из менюшки просмотр: К фрагменту\Судебная практика
  if NOT ClickByPopupMenuItem(obj, 'К фрагменту\Все документы') then 
  begin
    Log.Error('Не удалось вызвать пункт контекстного меню: К фрагменту\Все документы');
    Raise;
  end;
  //Проверяем, что открылся СКР к Фрагменту
  obj := GetFromEditor('ВКЛАДКА "ССЫЛКИ НА ФРАГМЕНТ"');
  if NOT ( IsExists(obj) AND obj.Visible ) then
  begin
    Log.Error('Не удалось получить вкладку "ССЫЛКИ НА ФРАГМЕНТ"');
    Raise;
  end;
  //Проверяем, что можно вызвать просмотра СКР через контекстное меню документа.
  GoToMainMenu;
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N'); 
  obj := OpenInDocument('ТЕКСТ');
  obj.SetFocus;  
  Sys.Keys('^[Home]'+keyPause+'!^[End]'+'[Apps]');  
  for i :=  VarArrayLowBound(typeSKR, 1) to VarArrayHighBound(typeSKR, 1) do
  begin
    if NOT IsPopupMenuItemExists(obj, 'ССЫЛКИ НА ФРАГМЕНТ\' + typeSKR[i]) then
    begin
      Log.Error('Не удалось найти пункт контекстного меню "ССЫЛКИ НА ФРАГМЕНТ\' + typeSKR[i] + '"');
      obj.Close;
      Raise;
    end;    
  end;//for
  if NOT ClickByPopupMenuItem(obj, 'ССЫЛКИ НА ФРАГМЕНТ\Акты органов власти\Федеральные акты') then
  begin
    Log.Error('Не удалось вызвать пункт контекстного меню "ССЫЛКИ НА ФРАГМЕНТ\Акты органов власти\Федеральные акты"');
    Raise;
  end;
  //Проверяем, что открылся СКР к Фрагменту
  obj := GetFromEditor('ВКЛАДКА "ССЫЛКИ НА ФРАГМЕНТ"');
  if NOT (IsExists(obj) AND obj.Visible) then
  begin
    Log.Error('Не удалось получить вкладку "ССЫЛКИ НА ФРАГМЕНТ"');
    Raise;
  end;
  obj.SetFocus;
  if NOT StringCompare(etalonSKR, common.GetWindowText(obj.Handle))  then
  begin
    Log.Error('Документв в списке "ССЫЛКИ НА ФРАГМЕНТ" не эталонен, должен быть: ' + etalonSKR);
    Raise('Документв в списке "ССЫЛКИ НА ФРАГМЕНТ" не эталонен, должен быть: ' + etalonSKR);
  end;
  result := true;
  GoToMainMenu;  
except
  Log.Message('HLTC73_11_2_11_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end; 


{
HLTC73.11: Справочная информация к документу
	HLTC73.11.2: СПИСОК ССЫЛОК ИЗ ДОКУМЕНТА/ССЫЛОК НА ДОКУМЕНТ
    LTC73.11.2.11: В стандартной конфигурации выделить часть текста и попытаться построить списки
    ССЫЛОК НА ДОКУМЕНТ и ССЫЛОК ИЗ ДОКУМЕНТОВ. Проверить, что в кнопке на тулбаре сначала появляется менюшка 
    выбора области поиска (к тексту, к фрагменту), а затем – уже стандартная для данной базы типизация СКР.
     Проверить так же вызов просмотра СКР через контекстное меню документа.
      HLTC73.11.2.11.2: для ССЫЛОК ИЗ ДОКУМЕНТОВ
}
function HLTC73_11_2_11_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;   
  CONTEXT = 'Уставом';   
var
  obj; 
  x,y;
begin                                  
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N'); 
  obj := OpenInDocument('ТЕКСТ');  
  result := BaseSearchInDocument(obj, CONTEXT);
  if NOT result then Raise ('Не удалось найти искомый контекст');   
  //Проверяем, что в кнопке на тулбаре сначала появляется менюшка выбора области поиска
  obj := GetFromEditor ('ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить тулбар документа');     
  obj := ClickToolBarButton(obj,'Ссылки из документа (вид информации)','ClickForPopupMenu := true');   
  result := IsExists(obj);
  if NOT result then Raise ('Не удалось получить попап-меню нажатием на кнопку Прокрутки (стрелка вниз) для ССЫЛКИ ИЗ ДОКУМЕНТА ');
  //Проверяем, что в менюшке есть пункты : К тексту\ К фрагменту
  result := (IsPopupMenuItemExists(obj, 'К тексту')) AND (IsPopupMenuItemExists(obj, 'К фрагменту'));
  if NOT result then
  begin  
    Log.Error('Состав контекстного меню для менюшки выбора области поиска(ССЫЛКИ ИЗ ДОКУМЕНТА К тексту\Всему документу) не эталонный');
    obj.Close;
    Raise;
  end;
  //Вызываем из менюшки просмотр: К фрагменту\Все документы 
  result := ClickByPopupMenuItem(obj, 'К фрагменту\Все Документы');      
  if NOT result then 
  begin
    Log.Error('Не удалось вызвать пункт контекстного меню: К фрагменту\Все документы');
    Raise('Не удалось вызвать пункт контекстного меню: К фрагменту\Все документы');
  end;
  //Проверяем, что открылся СКР к фрагменту
  obj := GetFromEditor('ВКЛАДКА "ССЫЛКИ ИЗ ФРАГМЕНТА"');
  result := IsExists(obj);
  if NOT result then
  begin
    Log.Error('Не удалось получить вкладку "ССЫЛКИ ИЗ ФРАГМЕНТА"');
    Raise;
  end;
  //Проверяем, что можно вызвать просмотра СКР через контекстное меню документа.
  GoToMainMenu;
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N'); 
  obj := OpenInDocument('ТЕКСТ');  
  result := GetCoordsSearchContext(obj, CONTEXT, x, y);
  if NOT result then Raise ('Не удалось найти координаты искомого контекста');  
  obj.ClickR (x + 10, y);
  result := ClickByPopupMenuItem(obj, 'ССЫЛКИ ИЗ ФРАГМЕНТА\Все документы'); 
  if NOT result then
  begin
    Log.Error('Не удалось вызвать пункт контекстного меню "ССЫЛКИ ИЗ ФРАГМЕНТА\Все документы"');
    Raise('Не удалось вызвать пункт контекстного меню "ССЫЛКИ ИЗ ФРАГМЕНТА\Все документы"');
  end;
  //Проверяем, что открылся СКР к фрагменту
  obj := GetFromEditor('ВКЛАДКА "ССЫЛКИ ИЗ ФРАГМЕНТА"');
  result := IsExists(obj);
  if NOT result then
  begin
    Log.Error('Не удалось получить вкладку "ССЫЛКИ ИЗ ФРАГМЕНТА"');
    Raise;
  end;
  GoToMainMenu;  
except
  Log.Message('HLTC73_11_2_11_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end; 

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.2: СПИСОК ССЫЛОК ИЗ ДОКУМЕНТА/ССЫЛОК НА ДОКУМЕНТ
    HLTC73.11.2.12: При нажатии на [x] в правом верхнем углу вкладок «ССЫЛКИ ИЗ ДОКУМЕНТА»
    или «ССЫЛКИ НА ДОКУМЕНТ» они физически закрываются.
}
function HLTC73_11_2_12_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;     
var
  obj;  
begin                                  
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');   
  obj := OpenInDocument('ССЫЛКИ НА ДОКУМЕНТ');     
  result := IsExists(obj) AND obj.Visible; 
  if NOT result then Raise('Не удалось получить вкладку "ССЫЛКИ НА ДОКУМЕНТ"');
  
  obj := GetFromList('ТУЛБАР ВЕРХНИЙ ПРАВЫЙ', obj);  
  result := IsExists(obj);  
  if NOT result then Raise('Не удалось получиь тулбар на вкладке "ССЫЛКИ НА ДОКУМЕНТ"');
  result:=ClickToolBarButton(obj, 'Закрыть'); 
  obj := GetFromEditor('ЗАКЛАДКИ');
  result := IsExists(obj);   
  if NOT result then Raise('Не удалось получить PageControl');  
  
  result := NOT SwitchToPage(obj, 'ССЫЛКИ НА ДОКУМЕНТ');
  if NOT result then 
  begin
    Log.Error('ВКЛАДКА "ССЫЛКИ НА ДОКУМЕНТ" не закрылась');
    Raise('ВКЛАДКА "ССЫЛКИ НА ДОКУМЕНТ" не закрылась');  
  end;  
  obj := OpenInDocument('ССЫЛКИ ИЗ ДОКУМЕНТА');     
  result := IsExists(obj) AND obj.Visible; 
  if NOT result then Raise('Не удалось получить вкладку "ССЫЛКИ ИЗ ДОКУМЕНТА"');
  obj := GetFromList('ТУЛБАР ВЕРХНИЙ ПРАВЫЙ', obj);  
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получиь тулбар на вкладке ССЫЛКИ ИЗ ДОКУМЕНТА');
  result:=ClickToolBarButton(obj, 'Закрыть'); 
  obj := GetFromEditor('ЗАКЛАДКИ');
  result := IsExists(obj);   
  if NOT result then Raise('Не удалось получить PageControl');  
  result := NOT SwitchToPage(obj, 'ССЫЛКИ ИЗ ДОКУМЕНТА');    
  if NOT result then 
  begin
    Log.Error('ВКЛАДКА "ССЫЛКИ ИЗ ДОКУМЕНТА" не закрылась');
    Raise('ВКЛАДКА "ССЫЛКИ ИЗ ДОКУМЕНТА" не закрылась');  
  end;
  GoToMainMenu; 
except
  Log.Message('HLTC73_11_2_12_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end; 

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.2: СПИСОК ССЫЛОК ИЗ ДОКУМЕНТА/ССЫЛОК НА ДОКУМЕНТ
    HLTC73.11.2.13: Активировать вкладки «ССЫЛКИ НА ДОКУМЕНТ и «ССЫЛКИ ИЗ ДОКУМЕНТА» в документе, перейти в 
    любой другой документ, имеющий ССЫЛОК НА ДОКУМЕНТ и ССЫЛОК ИЗ ДОКУМЕНТОВ, убедиться, что вкладки «ССЫЛКИ НА ДОКУМЕНТ
     и «ССЫЛКИ ИЗ ДОКУМЕНТА» закрылись.
}
function HLTC73_11_2_13_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM_1 = 1055132;  
  DOC_NUM_2 = 10003000;   
var
  obj;  
begin                                  
try
  result := OpenDocByNumber(DOC_NUM_1);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');    
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  result := IsExists(obj); 
  if NOT result then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  obj.SetFocus;
  obj := OpenInDocument('ССЫЛКИ НА ДОКУМЕНТ');     
  result := IsExists(obj) AND obj.Visible; 
  if NOT result then Raise('Не удалось получить вкладку "ССЫЛКИ НА ДОКУМЕНТ"');
  result := OpenDocByNumber(DOC_NUM_2);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');    
  obj := GetFromEditor('ВКЛАДКА "ССЫЛКИ НА ДОКУМЕНТ"');     
  result := NOT ( IsExists(obj) AND obj.Visible );
  if NOT result then 
  begin
    Log.Error('ВКЛАДКА "ССЫЛКИ НА ДОКУМЕНТ" не закрылась');
    Raise;  
  end;
  result := OpenDocByNumber(DOC_NUM_1);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');    
  
  obj := OpenInDocument('ССЫЛКИ ИЗ ДОКУМЕНТА');     
  result := IsExists(obj) AND obj.Visible; 
  if NOT result then Raise('Не удалось получить вкладку "ССЫЛКИ ИЗ ДОКУМЕНТА"');
  result := OpenDocByNumber(DOC_NUM_2);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');    
  obj := GetFromEditor('ВКЛАДКА "ССЫЛКИ ИЗ ДОКУМЕНТА"');     
  result := NOT ( IsExists(obj) AND obj.Visible );
  if NOT result then 
  begin
    Log.Error('ВКЛАДКА "ССЫЛКИ ИЗ ДОКУМЕНТА" не закрылась');
    Raise('ВКЛАДКА "ССЫЛКИ ИЗ ДОКУМЕНТА" не закрылась');  
  end;
  GoToMainMenu; 
except
  Log.Message('HLTC73_11_2_13_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end; 

{
HLTC73.11: Справочная информация к документу
 HLTC73.11.2: СПИСОК ССЫЛОК ИЗ ДОКУМЕНТА/ССЫЛОК НА ДОКУМЕНТ
  HLTC73.11.2.14: Вкладки типизированных СКР
   HLTC73.11.2.14.1: Проверить, что при переходе в документ открываются вкладки СКР, согласно настройкам
   (Документ\ПОКАЗ ССЫЛОК НА ДОКУМЕНТ/ССЫЛОК ИЗ ДОКУМЕНТА)
}
function HLTC73_11_2_14_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;  
  ICON_CORRESP = 'correspondents.bmp';
  ICON_RESPOND = 'respondents.bmp';
var
  pageControl;
  x, y;
  x1, x2, y1, y2;
  j;  
  delta;
  str;
  icon;
begin                                  
try  
  
  if NOT SetSettings( [
            (['ДОКУМЕНТ', 'ПОКАЗ ССЫЛОК НА ДОКУМЕНТ/ССЫЛОК ИЗ ДОКУМЕНТА\ПЕРВАЯ ВКЛАДКА [COMBOBOX]', 'Ссылки на документ']),
            (['ДОКУМЕНТ', 'ПОКАЗ ССЫЛОК НА ДОКУМЕНТ/ССЫЛОК ИЗ ДОКУМЕНТА\ПЕРВАЯ ВКЛАДКА\ТИП [COMBOBOX]', 'Формы документов']),
            (['ДОКУМЕНТ', 'ПОКАЗ ССЫЛОК НА ДОКУМЕНТ/ССЫЛОК ИЗ ДОКУМЕНТА\ВТОРАЯ ВКЛАДКА [COMBOBOX]', 'Ссылки из документа']),
            (['ДОКУМЕНТ', 'ПОКАЗ ССЫЛОК НА ДОКУМЕНТ/ССЫЛОК ИЗ ДОКУМЕНТА\ВТОРАЯ ВКЛАДКА\ТИП [COMBOBOX]', 'Акты органов власти'])
          ] ) then Raise('Не удалось установить настройки как понравилось!');
          
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  pageControl := GetFromEditor('ЗАКЛАДКИ');
  if NOT IsExists(pageControl) then Raise('Не удалось получить Пайджконтрол');  
  delta := 0;
  for j := 0 to 1 do
  begin
    if NOT GetCoordsTabInPageControl(pageControl, x1, y1, x2, y2) then Raise('Не удалось расчитать координаты Tab');
    if j = 0 then icon := ICON_CORRESP else icon := ICON_RESPOND;
    if NOT FindPicture(pageControl, icon, x, y, x1+delta, y1, x2-x1-delta, y2-y1) then//Учитывается, что пайдж контрол расположен горизонтально(по умолчанию)
    begin
      Log.Error('Не удалось найти иконку ' + icon + ' на ПайджКонтроле, хотя вкладка должна быть!');
      Raise;
    end;
    delta := x + 20;
    pageControl.Click(x, y);
    if j = 0 then str := 'Формы документов' else str := 'Акты органов власти';
    if NOT StringCompare( GetActivePageName(pageControl), str )then
    begin
      Log.Error('После клика по TabShet с иконкой ' + icon + ' имя активной вкладки не эталонно');
      Raise;
    end;
  end;//for j   
  if NOT SetDefaultSettings then Raise('Не удалось установить настройки по умолчанию');  
  result := true;
  GoToMainMenu; 
except
  Log.Message('HLTC73_11_2_14_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.2: СПИСОК ССЫЛОК ИЗ ДОКУМЕНТА/ССЫЛОК НА ДОКУМЕНТ
    HLTC73.11.2.14: Вкладки типизированных СКР
      HLTC73.11.2.14.2: Проверить, что каждая из вкладок имеет иконку, отображающую вид – ССЫЛКИ НА ДОКУМЕНТ 
      или ССЫЛКИ ИЗ ДОКУМЕНТА и имя, совпадающее с выбранной типизацией
        HLTC73.11.2.14.2.1: Проверить для типа: «Все документы»
        HLTC73.11.2.14.2.2: Проверить для типа: «Комментарии»
        HLTC73.11.2.14.2.3: Проверить для типа: «Формы документов»
        HLTC73.11.2.14.2.4: Проверить для типа: «Проекты законов»
        HLTC73.11.2.14.2.5: Проверить для типа: «Судебная практика»
        HLTC73.11.2.14.2.6: Проверить для типа: «Международные договоры»
}
function HLTC73_11_2_14_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM_CORRESP = 10003000;  
  DOC_NUM_RESPOND = 10064072;
  ICON_CORRESP = 'correspondents.bmp';
  ICON_RESPOND = 'respondents.bmp';
var
  pageControl;
  x, y;
  x1, x2, y1, y2;
  i, iEnd, j, glob;
  typeCorrespondentArray;
  delta;
  str, etalon_str;
  icon, doc_num, typeSKR;
begin                                  
try  
  typeCorrespondentArray := [(['Все документы', 'Комментарии']), 
                             (['Формы документов', 'Судебная практика']),
                             (['Проекты законов', 'Международные договоры'])];
  for glob := 0 to 1 do//0- проверяются ССЫЛКИ НА ДОКУМЕНТ, 1- проверяются ССЫЛКИ ИЗ ДОКУМЕНТА
  begin
    if glob = 0 then
    begin
      icon := ICON_CORRESP; doc_num := DOC_NUM_CORRESP; iEnd := 2; typeSKR := 'Ссылки на документ';
    end  
    else 
    begin 
      icon := ICON_RESPOND; doc_num := DOC_NUM_RESPOND; iEnd := 1; typeSKR := 'Ссылки из документа'; 
    end;
    
    for i := 0 to iEnd do
    begin    
      case i of
        0: if NOT SetSettings( [
              (['ДОКУМЕНТ', 'ПОКАЗ ССЫЛОК НА ДОКУМЕНТ/ССЫЛОК ИЗ ДОКУМЕНТА\ПЕРВАЯ ВКЛАДКА [COMBOBOX]', typeSKR]),
              (['ДОКУМЕНТ', 'ПОКАЗ ССЫЛОК НА ДОКУМЕНТ/ССЫЛОК ИЗ ДОКУМЕНТА\ПЕРВАЯ ВКЛАДКА\ТИП [COMBOBOX]', typeCorrespondentArray[i][0] ]),
              (['ДОКУМЕНТ', 'ПОКАЗ ССЫЛОК НА ДОКУМЕНТ/ССЫЛОК ИЗ ДОКУМЕНТА\ВТОРАЯ ВКЛАДКА [COMBOBOX]', typeSKR]),
              (['ДОКУМЕНТ', 'ПОКАЗ ССЫЛОК НА ДОКУМЕНТ/ССЫЛОК ИЗ ДОКУМЕНТА\ВТОРАЯ ВКЛАДКА\ТИП [COMBOBOX]', typeCorrespondentArray[i][1]])
            ] ) then Raise('Не удалось установить настройки как понравилось!');
        1: if NOT SetSettings( [             
              (['ДОКУМЕНТ', 'ПОКАЗ ССЫЛОК НА ДОКУМЕНТ/ССЫЛОК ИЗ ДОКУМЕНТА\ПЕРВАЯ ВКЛАДКА\ТИП [COMBOBOX]', typeCorrespondentArray[i][0]]),
              (['ДОКУМЕНТ', 'ПОКАЗ ССЫЛОК НА ДОКУМЕНТ/ССЫЛОК ИЗ ДОКУМЕНТА\ВТОРАЯ ВКЛАДКА\ТИП [COMBOBOX]', typeCorrespondentArray[i][1]])
            ] ) then Raise('Не удалось установить настройки как понравилось!');
        2: if NOT SetSettings( [             
              (['ДОКУМЕНТ', 'ПОКАЗ ССЫЛОК НА ДОКУМЕНТ/ССЫЛОК ИЗ ДОКУМЕНТА\ПЕРВАЯ ВКЛАДКА\ТИП [COMBOBOX]', typeCorrespondentArray[i][0]]),
              (['ДОКУМЕНТ', 'ПОКАЗ ССЫЛОК НА ДОКУМЕНТ/ССЫЛОК ИЗ ДОКУМЕНТА\ВТОРАЯ ВКЛАДКА\ТИП [COMBOBOX]', typeCorrespondentArray[i][1]])
            ] ) then Raise('Не удалось установить настройки как понравилось!');
      end;//case
      //if NOT GoToMainMenu then Raise('Не удалось перейти в Главное меню');    
      if NOT OpenDocByNumber(doc_num) then Raise('Не удалось открыть документ по Alt+N');
      pageControl := GetFromEditor('ЗАКЛАДКИ');
      if NOT IsExists(pageControl) then Raise('Не удалось получить Пайджконтрол');
      
      delta := 0;
      for j := 0 to 1 do
      begin
        if NOT GetCoordsTabInPageControl(pageControl, x1, y1, x2, y2) then Raise('Не удалось расчитать координаты Tab');
        if NOT FindPicture(pageControl, icon, x, y, x1+delta, y1, x2-x1-delta, y2-y1) then//Учитывается, что пайдж контрол расположен горизонтально(по умолчанию)
        begin
          Log.Error('Не удалось найти иконку ' + icon + ' на ПайджКонтроле, хотя вкладка должна быть!');
          Raise;
        end;
        delta := x + 20;
        pageControl.Click(x, y);
        str := GetActivePageName(pageControl);
        etalon_str := typeCorrespondentArray[i][j]; 
        if ((etalon_str = 'Все документы') AND (j=0)) then etalon_str: = 'Ссылки на документ';// Заточка
        if ((etalon_str = 'Все документы') AND (j=1)) then etalon_str: = 'Ссылки из документа';// Заточка        
        if NOT StringCompare(etalon_str, str )then
        begin
          Log.Error('После клика по TabShet с иконкой ' + icon + ' имя активной вкладки не эталонно. Итерации: i='+IntToStr(i)+'; j='+ IntToStr(j), str);
          Raise;
        end;
      end;//for j  
    end;//for i
  end;//for glob    
  result := true;
  GoToMainMenu; 
except
  Log.Message('HLTC73_11_2_14_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler;
end;
  SetDefaultSettings;
end;

{
HLTC73.11: Справочная информация к документу
 HLTC73.11.2: СПИСОК ССЫЛОК ИЗ ДОКУМЕНТА/ССЫЛОК НА ДОКУМЕНТ
  HLTC73.11.2.14: Вкладки типизированных СКР
   HLTC73.11.2.14.3: Проверить, что указанные в настройках вкладки СКР появляются ВСЕГДА при открытии
   документа, если такие СКР есть в базе максимум 
    HLTC73.11.2.14.3.2: Проверить если ССЫЛКИ НА ДОКУМЕНТ или ССЫЛКИ ИЗ ДОКУМЕНТА, выбранного типа отсутствуютдля 
    данного документа, то во вкладке появляется надпись: «В установленном у вас информационном комплекте 
    отсутствуют документы, отвечающие данному запросу». Например, для документа 1019002 отсутствуют 
    ССЫЛКИ ИЗ ДОКУМЕНТА типа международные договоры.
}
function HLTC73_11_2_14_3_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1019002;
  ICON_RESPOND = 'respondents.bmp';
  TYPE_SKR = 'Международные договоры';
  TEST_WORDS = 'В установленном у Вас информационном комплекте отсутствуют документы, отвечающие данному запросу.*';
var
  pageControl;
  x, y;
  x1, x2, y1, y2; 
  str;
  obj; 
begin                                  
try  
  if NOT SetSettings( [
            (['ДОКУМЕНТ', 'ПОКАЗ ССЫЛОК НА ДОКУМЕНТ/ССЫЛОК ИЗ ДОКУМЕНТА\ПЕРВАЯ ВКЛАДКА [COMBOBOX]', 'Ссылки из документа']),
            (['ДОКУМЕНТ', 'ПОКАЗ ССЫЛОК НА ДОКУМЕНТ/ССЫЛОК ИЗ ДОКУМЕНТА\ПЕРВАЯ ВКЛАДКА\ТИП [COMBOBOX]', TYPE_SKR])
          ] ) then Raise('Не удалось установить настройки как понравилось!');
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  pageControl := GetFromEditor('ЗАКЛАДКИ');
  if NOT IsExists(pageControl) then Raise('Не удалось получить Пайджконтрол');
  if NOT GetCoordsTabInPageControl(pageControl, x1, y1, x2, y2) then Raise('Не удалось расчитать координаты Tab');
  
  if NOT FindPicture(pageControl, ICON_RESPOND, x, y, x1, y1, x2-x1, y2-y1) then//Учитывается, что пайдж контрол расположен горизонтально(по умолчанию)
  begin
    Log.Error('Не удалось найти иконку ' + ICON_RESPOND + ' на ПайджКонтроле, хотя вкладка должна быть!');
    Raise;
  end;
  pageControl.Click(x, y);
  if NOT StringCompare( GetActivePageName(pageControl), TYPE_SKR ) then
  begin
    Log.Error('После клика по нужной иконке на TabShet имя активной вкладки не эталонно', ICON_RESPOND);
    Raise;
  end;
  pageControl.Click(pageControl.Width div 2, pageControl.Height div 2);
  
  obj := GetFromEditor('ПУСТОЙ СПИСОК СКР');
  if NOT IsExists(obj) then
  begin
    Log.Error('Не удалось получить ПУСТОЙ СПИСОК СКР');
    Raise;
  end;
  //После исправления запроса $344130593 должно зарабоатать
  //str := common.GetWindowText(obj.Handle);
  str := CopyToClipboard(obj,'ALL','Trim := true');    
  if NOT StringCompare(TEST_WORDS, str) then
  begin
    Log.Error('Текст на вкладке ССЫЛКИ ИЗ ДОКУМЕНТА, при их отсутствии, не эталонный', str);
    Raise;
  end;
  result := true;
  GoToMainMenu; 
except
  Log.Message('HLTC73_11_2_14_3_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.11: Справочная информация к документу
 HLTC73.11.2: СПИСОК ССЫЛОК ИЗ ДОКУМЕНТА/ССЫЛОК НА ДОКУМЕНТ
  HLTC73.11.2.14: Вкладки типизированных СКР
    HLTC73.11.2.14.4: Проверить, что просмотр вкладок можно инициировать нажатием на соответствующую закладку,  
    выбором специальной операции на панели инструментов или в панели задач(в зависимости от конфигурации). В меню никаких 
    дополнительных операций не добавляется   
}
function HLTC73_11_2_14_4_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;
  SHEET_1 = 'Судебная практика';
  SHEET_2 = 'Комментарии';
  
var
  pageControl;  
  i;
  sheet;
  typeSKR;
  obj;
begin                                  
try  
  typeSKR := [
    'Все документы', 
    'Акты органов власти',    
    'Формы документов',
    'Проекты законов', 
    'Судебная практика', 
    'Международные договоры'
  ];
  if NOT SetDefaultSettings then Raise('Не удалось установить настройки по умолчанию');
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  pageControl := GetFromEditor('ЗАКЛАДКИ');
  if NOT IsExists(pageControl) then Raise('Не удалось получить Пайджконтрол');
  for i := 1 to 2 do
  begin
    if i = 1 then sheet := SHEET_1 else sheet := SHEET_2;
    if NOT SwitchToPage(pageControl, sheet) then
    begin
      Log.Error('Не удалось переключится на вкладку типизированных ССЫЛОК НА ДОКУМЕНТ "' + sheet+ '"');
      Raise;
    end;
  end;//for
  obj := GetFromEditor ('ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');
  if NOT IsExists(obj) then Raise('Не удалось получить тулбар документа');
       
  obj := ClickToolBarButton(obj, 'Ссылки на документ (вид информации)','ClickForPopupMenu := true');   
  if NOT IsExists(obj) then Raise ('Не удалось получить попап-меню нажатием на кнопку Прокрутки (стрелка вниз) для ССЫЛКИ НА ДОКУМЕНТ ');
  for i :=  VarArrayLowBound(typeSKR, 1) to VarArrayHighBound(typeSKR, 1) do
  begin
    if NOT IsPopupMenuItemExists(obj, typeSKR[i]) then
    begin
      Log.Error('Не удалось найти пункт контекстного меню "' + typeSKR[i] + '"');      
      
      Raise;
    end;//if    
  end;//for  
  if NOT ClickByPopupMenuItem(obj, 'Формы документов') then 
  begin
    Log.Error('Не удалось вызвать пункт контекстного меню: Формы документов');
    Raise;
  end;
  obj := GetFromEditor('ВКЛАДКА "ССЫЛКИ НА ДОКУМЕНТ"');
  result := IsExists(obj) AND obj.Visible;
  if NOT result then
  begin
    Log.Error('Не удалось получить вкладку "ССЫЛКИ НА ДОКУМЕНТ"');
    Raise;
  end;
  obj := GetFromMainWindow('ГЛАВНОЕ МЕНЮ');
  for i :=  VarArrayLowBound(typeSKR, 1) to VarArrayHighBound(typeSKR, 1) do
    if IsMenuItemEnabled(obj, 'Документы\' + typeSKR[i]) then
    begin
      Log.Error('Удалось найти пункт меню "Документы\' + typeSKR[i] + '"!');      
      Raise;
    end;//if 
  result := true;
  GoToMainMenu; 
except
  Log.Message('HLTC73_11_2_14_4_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.11: Справочная информация к документу
 HLTC73.11.2: СПИСОК ССЫЛОК ИЗ ДОКУМЕНТА/ССЫЛОК НА ДОКУМЕНТ
  HLTC73.11.2.14: Вкладки типизированных СКР
   HLTC73.11.2.14.7: При нажатии на [x] в правом верхнем углу этих вкладок они физически НЕ закрываются,
   а происходит переход на основную вкладку «Текст»
    HLTC73.11.2.14.7.1: Проверить для Первой вкладки
    HLTC73.11.2.14.7.2: Проверить для Второй вкладки
}
function HLTC73_11_2_14_7_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;
  SHEET_0 = 'Текст';
  SHEET_1 = 'Судебная практика';
  SHEET_2 = 'Комментарии';  
var
  pageControl;
  sheetObject;
  sheet;
  i;
  toolBar;
begin                                  
try
  if NOT SetDefaultToolBarSettings then Log.Warning('Не удалось установить настройки по умолчанию');
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  pageControl := GetFromEditor('ЗАКЛАДКИ');
  if NOT IsExists(pageControl) then Raise('Не удалось получить Пайджконтрол');
  //Проверяем для второй вкладки(ССЫЛКИ НА ДОКУМЕНТ - Комментарии)
  for i := 1 to 2 do
  begin
    if i = 1 then sheet := SHEET_2 else sheet := SHEET_1;
    if NOT SwitchToPage(pageControl, sheet) then 
    begin
      Log.Error('Не удалось переключится на вкладку', sheet);
      Raise;
    end;
    if i = 1 then 
      sheetObject := GetFromEditor('ВКЛАДКА "ССЫЛКИ НА ДОКУМЕНТ КОММЕНТАРИИ"') 
    else
      sheetObject := GetFromEditor('ВКЛАДКА "ССЫЛКИ НА ДОКУМЕНТ СУДЕБНАЯ ПРАКТИКА"');    
    if NOT (IsExists(sheetObject) AND sheetObject.Visible AND StringCompare(GetActivePageName(pageControl), sheet) )then
      Raise('ВКЛАДКА ' + sheet + ' не получена, либо не равна эталонной');
    toolBar := GetFromList('ТУЛБАР ВЕРХНИЙ ПРАВЫЙ', sheetObject);
    //Кликаем по "крестику"
    if NOT ClickToolBarButton(toolBar, 'Закрыть') then  Raise('Не удалось кликнуть по "крестику", закрывающему вкладку');
    //Проверяем, что Открылась вкладка "Текст" и Не удалилась вкладка "Комментарии"
    if NOT StringCompare(GetActivePageName(pageControl), SHEET_0) then
    begin
      Log.Error('Вкладка "Текст" не стала активной');
      Raise;
    end;
    if NOT SwitchToPage(pageControl, sheet) then 
    begin
      Log.Error('Не удалось переключится на вкладку: ' + sheet + ', видимо она не существует');
      Raise;
    end;
  end;//for
  result := true;
  GoToMainMenu; 
except
  Log.Message('HLTC73_11_2_14_7_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;


{
  HLTC73.11.2.14: Вкладки типизированных СКР
   HLTC73.11.2.14.8: Проверить, что на этих вкладках недоступна операция «Сменить тип».
   
//В логе будет "WARNING Комбобокс не найден!" - это так должно быть
}
function HLTC73_11_2_14_8_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;
  SHEET_2 = 'Судебная практика';
  SHEET_1 = 'Комментарии';  
var
  pageControl;
  sheetObject;
  sheet;
  i;
  toolBar;
  comboBox;
begin                                  
try
  
  if NOT SetDefaultToolBarSettings then Log.Warning('Не удалось установить настройки по умолчанию');
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  pageControl := GetFromEditor('ЗАКЛАДКИ');
  if NOT IsExists(pageControl) then Raise('Не удалось получить Пайджконтрол');
  //Проверяем для второй вкладки(ССЫЛКИ НА ДОКУМЕНТ - Комментарии)
  for i := 1 to 2 do
  begin
    if i = 1 then sheet := SHEET_1 else sheet := SHEET_2;
    if NOT SwitchToPage(pageControl, sheet) then 
    begin
      Log.Error('Не удалось переключится на вкладку', sheet);
      Raise('Не удалось переключится на вкладку: ' + sheet);
    end;
    if i = 1 then sheetObject := GetFromEditor('ВКЛАДКА "ССЫЛКИ НА ДОКУМЕНТ КОММЕНТАРИИ"');
    if i = 2 then sheetObject := GetFromEditor('ВКЛАДКА "ССЫЛКИ НА ДОКУМЕНТ СУДЕБНАЯ ПРАКТИКА"'); 
        
    if NOT (IsExists(sheetObject) AND sheetObject.Visible AND StringCompare(GetActivePageName(pageControl), sheet) )then
      Raise('ВКЛАДКА ' + sheet + ' не получена, либо не равна эталонной');
    toolBar := GetFromEditor('ТУЛБАР "СПИСОК: ССЫЛКИ НА ДОКУМЕНТ КОММЕНТАРИИ"');
    if NOT IsExists(toolBar) then Raise('Не удалось получить ТУЛБАР "СПИСОК: ССЫЛКИ НА ДОКУМЕНТ КОММЕНТАРИИ"');
    comboBox := GetToolBarObject(toolBar, 'COMBOBOX', 'Выбрать тип');
    if ( IsExists(comboBox) AND comboBox.Visible )then
    begin
      Log.Error('Комбобокс "Сменить тип" доступен на тулбаре, хотя его не должно быть!');
      Raise;
    end;  
  end;//for  
  result := true;
  GoToMainMenu; 
except
  Log.Message('HLTC73_11_2_14_8_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.11: Справочная информация к документу
 HLTC73.11.2: СПИСОК ССЫЛОК ИЗ ДОКУМЕНТА/ССЫЛОК НА ДОКУМЕНТ
  HLTC73.11.2.16 Проверить, что по умолчанию вкладка «ССЫЛКИ ИЗ ДОКУМЕНТА»/«ССЫЛКИ НА ДОКУМЕНТ» в документе 
  отсутствует если: 1. Перейти в Гражданский кодекс (по второй ветке рубрикатора) - вкладки  
  «ССЫЛКИ ИЗ ДОКУМЕНТА»/«ССЫЛКИ НА ДОКУМЕНТ» не должно быть 2. На вкладке "Редакции" переключаемся на другую редакцию -
  вкладка «ССЫЛКИ ИЗ ДОКУМЕНТА»/«ССЫЛКИ НА ДОКУМЕНТ» не должна появиться.  
}
function HLTC73_11_2_16_Execute (var  CurrentState: OleVariant): OleVariant;
const  
  DOC_NAME = 'Гражданский кодекс*';
  SHEET_1 = 'ССЫЛКИ НА ДОКУМЕНТ*';
  SHEET_2 = 'ССЫЛКИ ИЗ ДОКУМЕНТА*';  
var  
  obj;
  i,
  sheet;
  path;
begin                                  
try
  path := LIST_ALLCODES;
  if NOT OpenEtalonList(PATH) then 
    Raise('Не удалось открыть список Всех кодексов');
  obj := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT OpenDocFromList(DOC_NAME, obj) then 
    Raise('Не удалось открыть документ "' + DOC_NAME + '" из списка');  
  obj := GetFromEditor('ЗАКЛАДКИ');
  if NOT IsExists(obj) then Raise('Не удалось получить ЗАКЛАДКИ');
  for i := 0 to 1 do
  begin
    if i = 0 then sheet := SHEET_1 else sheet := SHEET_2;
    if SwitchToPage(obj, sheet) then
    begin
      Log.Error('Вкладка ' + sheet + 'по умолчанию существует, хотя не должна');
      Raise;
    end;
  end;//for
  if NOT ClickByMainMenuItem('Документы\Предыдущая редакция') then 
    Raise('Не удалось переключиться на Предыдущую редакцию');
  
  obj := GetFromEditor('ЗАКЛАДКИ');    
  if NOT IsExists(obj) then Raise('Не удалось получить ЗАКЛАДКИ');
  for i := 0 to 1 do
  begin
    if i = 0 then sheet := SHEET_1 else sheet := SHEET_2;
    if SwitchToPage(obj, sheet) then
    begin
      Log.Error('Вкладка ' + sheet + 'по умолчанию существует, хотя не должна');
      Raise;
    end;
  end;//for
  result := true;
  CloseTabIfNeeded; 
except
  Log.Message('HLTC73_11_2_16_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
  GoToMainMenuWithCloseTabsExceptOne;
end;


{
HLTC73.11: Справочная информация к документу
  HLTC73.11.2: СПИСОК ССЫЛОК ИЗ ДОКУМЕНТА/ССЫЛОК НА ДОКУМЕНТ
    HLTC73.11.2.17: Сообщения при большом и малом количестве документов в СКР  
      HLTC73.11.2.17.1: Если размер списка ССЫЛОК НА ДОКУМЕНТ/ССЫЛОК ИЗ ДОКУМЕНТОВ (ко всему документу) превышает  50 
      элементов, то: 
        HLTC73.11.2.17.1.1: При построении списка нетипизированных КР ко всему документу (при вызове
        операций «ССЫЛКИ НА ДОКУМЕНТ» или «ССЫЛКИ ИЗ ДОКУМЕНТА») выдаем сообщение: "Размер списка превышает 50 документов,
        что может затруднить изучение связей документа. Вы можете уточнить свой запрос, построив список связей 
        только определенного вида информации построив список связей к фрагменту документа. Продолжить 
        построение списка связей?<чекбокс>больше не показывать это сообщение ДА, НЕТ”  
}
function HLTC73_11_2_17_1_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;  
  TEST_WORD_1 = 'Больше не показывать это сообщение.';
var
  TEST_WORD;  
  str;
  check;  
  obj;
begin                                  
try
  TEST_WORD := 
    'Размер списка превышает 50 документов, что может затруднить изучение связей документа.*'+
    'Вы можете уточнить свой запрос:*'+
    '- построив список связей только определенного вида информации;*'+
    '- построив список связей к фрагменту документа.*'+
    'Продолжить построение списка связей?*';
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  if NOT ClickByMainMenuItem('Документы\ССЫЛКИ НА ДОКУМЕНТ') then Raise('Не удалось вызвать пункт главного меню ""');  
  obj := WaitForAnyMessageWindow;
  check := GetParam(obj, WFMF_RES_CHECKBOX_WINDOW);
  if NOT IsExists(check) then Raise('Не удалось получить ЧекБокс в окне предупреждения');
  str := GetParam(obj, WFMF_RES_CHECKBOX_TEXT);
  if NOT StringCompare(TEST_WORD_1, str) then
  begin
    Log.Error('Название ЧекБокса не равно эталонному', str);
    Raise('Название ЧекБокса не равно эталонному');
  end; 
  str := WaitForConfirmationWindow(Options.Run.Timeout div 6,'Да'); 
  result := StringCompare(TEST_WORD, str);  
  if NOT result then
    Log.Error('Текст в окне Предупреждения не Эталонный', str);
  GoToMainMenu; 
except
  Log.Message('HLTC73_11_2_17_1_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.11: Справочная информация к документу
  HLTC73.11.2: СПИСОК ССЫЛОК ИЗ ДОКУМЕНТА/ССЫЛОК НА ДОКУМЕНТ
    HLTC73.11.2.17: Сообщения при большом и малом количестве документов в СКР  
      HLTC73.11.2.17.1: Если размер списка ССЫЛОК НА ДОКУМЕНТ/ССЫЛОК ИЗ ДОКУМЕНТОВ (ко всему документу) превышает  50 
      элементов, то: 
        HLTC73.11.2.17.1.2: При построении списка типизированных КР ко всему документу выдаем Сообщение:
       «Размер списка превышает 50 документов, что может затруднить изучение связей документа. Вы можете уточнить
       свой запрос, построив список связей к фрагменту документа. Продолжить построение списка связей? <чекбокс>
       больше не показывать это сообщение ДА, НЕТ»  
}
function HLTC73_11_2_17_1_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;
  TEST_WORD = 
    'Размер списка превышает 50 документов, что может затруднить изучение связей документа.*'+
    'Вы можете уточнить свой запрос:*'+
    '- построив список связей только определенного вида информации;*'+
    '- построив список связей к фрагменту документа.*'+
    'Продолжить построение списка связей?*';
  TEST_WORD_1 = 'Больше не показывать это сообщение.';  
var
  obj;
  str;
  check;
begin                                  
try
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenTasksPanel; 
  if NOT IsExists(obj) then Raise('Не удалось открыть Панель Задач');  
  obj := OpenItemInTasksPanel('Документ', 'ССЫЛКИ НА ДОКУМЕНТ', 'OpenForPopupMenu:=true');
  if NOT IsExists(obj) then Raise('Не удалось получить PopUp меню');  
  if NOT ClickByPopupMenuItem(obj, 'Все документы') then Raise('Не удалось кликнуть в контекстном меню "Все документы"');
  obj := WaitForAnyMessageWindow;
  check := GetParam(obj, WFMF_RES_CHECKBOX_WINDOW);
  if NOT IsExists(check) then Raise('Не удалось получить ЧекБокс в окне предупреждения');
  str := GetParam(obj, WFMF_RES_CHECKBOX_TEXT);
  if NOT StringCompare(TEST_WORD_1, str) then
  begin
    Log.Error('Название ЧекБокса не равно эталонному', str);
    Raise('Название ЧекБокса не равно эталонному');
  end;
  str := WaitForConfirmationWindow(Options.Run.Timeout div 6,'Да'); 
  result := StringCompare(TEST_WORD, str);  
  if NOT result then
    Log.Error('Текст в окне Предупреждения не Эталонный', str);
  GoToMainMenu; 
except
  Log.Message('HLTC73_11_2_17_1_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;


{
HLTC73.11.2.17: Сообщения при большом и малом количестве документов в СКР  
  HLTC73.11.2.17.3: При построении СКР к части документа не выдаем никакого сообщения. Проверить для
  ситуации, когда получаем СКР: 
    HLTC73.11.2.17.3.1: превышающие 50 документов 
}
function HLTC73_11_2_17_3_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;   
var
  obj;
  str;  
begin                                  
try
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');    
  obj := GetFromEditor ('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  obj.SetFocus;
  Sys.Keys('^[Home]!^[End]![Up]');
  Sys.Keys('[Apps]');  
  if NOT ClickByPopupMenuItem(obj, 'ССЫЛКИ НА ФРАГМЕНТ\Все документы') then Raise('Не удалось кликнуть в контекстном меню "ССЫЛКИ НА ФРАГМЕНТ\Все документы"');   
  str := WaitForConfirmationWindow(Options.Run.Timeout div 6,'Да'); 
  result := str = '';
  if NOT result then
    Log.Error('Обнаружилось окно Предупреждения', str);
  GoToMainMenu;
except
  Log.Message('HLTC73_11_2_17_3_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;



/////////////////////////////////////////////////////////////////////////////////
{
HLTC73.11: Справочная информация к документу
	HLTC73.11.3: Список атрибутов
    HLTC73.11.3.1: Проверить, что в нижней части окна показываются атрибуты документа, 
    показываются правильно (сравнить с «Гарантом»), иерархические атрибуты показываются в виде дерева
      HLTC73.11.3.1.3: Пункт меню Документ - Информация о документе
}
function HLTC73_11_3_1_3_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;     
var
  obj;   
begin                                  
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');   
  if NOT IsMenuItemChecked(GetFromMainWindow('ГЛАВНОЕ МЕНЮ'),'Документы\Информация о документе',true) then
  begin
    result := ClickByMainMenuItem('Документы\Информация о документе'); 
    if NOT result then Raise('Не могу кликнуть по пункту меню: "Документы\Информация о документе"');   
  end;
  obj := GetFromEditor('ВКЛАДКА "ИНФОРМАЦИЯ О ДОКУМЕНТЕ"');
  result := IsExists(obj) AND obj.Visible; 
  if NOT result then
    Log.Error('Не удалось получить вкладку "ИНФОРМАЦИЯ О ДОКУМЕНТЕ"');
  GoToMainMenu; 
except
  Log.Message('HLTC73_11_3_1_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end; 

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.3: Список атрибутов
    HLTC73.11.3.1: Проверить, что в нижней части окна показываются атрибуты документа, 
    показываются правильно (сравнить с «Гарантом»), иерархические атрибуты показываются в виде дерева
      HLTC73.11.3.1.4: Комбинация клавиш Alt+I
}
function HLTC73_11_3_1_4_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;     
var
  obj;   
begin                                  
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');   
  Delay(Options.Run.Timeout div 20);
  Sys.Keys('~i');
  obj := GetFromEditor('ВКЛАДКА "ИНФОРМАЦИЯ О ДОКУМЕНТЕ"');
  result := IsExists(obj) AND obj.Visible; 
  if NOT result then
    Log.Error('Не удалось получить вкладку "ИНФОРМАЦИЯ О ДОКУМЕНТЕ"');
  GoToMainMenu; 
except
  Log.Message('HLTC73_11_3_1_4_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;
 
{
HLTC73.11: Справочная информация к документу
	HLTC73.11.3: Список атрибутов
  	HLTC73.11.3.3: Проверить, что доступны операции:
      HLTC73.11.3.3.1: Свернуть/развернуть дерево атрибутов
}
function HLTC73_11_3_3_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;       
  TEST_STRING = 'Договор "О создании Союзного государства" (Москва, 8 декабря 1999 г.)';
var
  obj;   
begin                                  
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');  
  obj := OpenInDocument('ТЕКСТ'); 
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ');
  if NOT IsMenuItemChecked(GetFromMainWindow('ГЛАВНОЕ МЕНЮ'),'Документы\Информация о документе',true) then
  begin
    result := ClickByMainMenuItem('Документы\Информация о документе'); 
    if NOT result then Raise('Не могу кликнуть по пункту меню: "Документы\Информация о документе"');   
  end;
  obj := GetFromEditor('ВКЛАДКА "ИНФОРМАЦИЯ О ДОКУМЕНТЕ"');
  result := IsExists(obj) AND obj.Visible; 
  if NOT result then Raise('Не удалось получить вкладку "ИНФОРМАЦИЯ О ДОКУМЕНТЕ"');
  Sys.Keys('[Home]');
  result := Position_Internal(obj, 'Имя');
  if NOT result then Raise('Не удалось спозиционироваться на атрибут "Имя"');
  Sys.Keys('[Apps]');
  result := ClickByPopupMenuItem(obj, 'Свернуть');  
  if NOT result then Raise('Не удалось вызвать из конт-го меню "Свернуть, возможно атрибут уже свёрнут"');
  Sys.Keys('[Down]');  
  result := common.GetWindowText(obj.Handle) <> TEST_STRING;  
  if NOT result then 
  begin  
    Log.Error('атрибут не свернулся',str);
    Raise('атрибут не свернулся');
  end;  
  Sys.Keys('[Home]');
  result := Position_Internal(obj, 'Имя');
  if NOT result then Raise('Не удалось спозиционироваться на атрибут "Имя"');
  Sys.Keys('[Apps]');
  result := ClickByPopupMenuItem(obj, 'Развернуть');  
  if NOT result then
    Raise('Не удалось вызвать пункт контекстного меню "Развернуть"');
  Sys.Keys('[Down]');  
  result := common.GetWindowText(obj.Handle) = TEST_STRING;  
  if NOT result then 
  begin  
    Log.Error('атрибут не развернулся',str);
    Raise('атрибут не развернулся');
  end;  
  GoToMainMenu;  
except
  Log.Message('HLTC73_11_3_3_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.3: Список атрибутов
  	HLTC73.11.3.3: Проверить, что доступны операции:
      HLTC73.11.3.3.3: Копировать текущий атрибут(контекстное меню)
}
function HLTC73_11_3_3_3_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;     
  TEST_STRING = 'Имя\Договор "О создании Союзного государства" (Москва, 8 декабря 1999 г.)';  
var
  obj;   
  str;
begin                                  
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');   
  obj := OpenInDocument('ТЕКСТ'); 
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ');
  if NOT IsMenuItemChecked(GetFromMainWindow('ГЛАВНОЕ МЕНЮ'),'Документы\Информация о документе',true) then
  begin
    result := ClickByMainMenuItem('Документы\Информация о документе'); 
    if NOT result then Raise('Не могу кликнуть по пункту меню: "Документы\Информация о документе"');   
  end;
  obj := GetFromEditor('ВКЛАДКА "ИНФОРМАЦИЯ О ДОКУМЕНТЕ"');
  result := IsExists(obj) AND obj.Visible; 
  if NOT result then Raise('Не удалось получить вкладку "ИНФОРМАЦИЯ О ДОКУМЕНТЕ"');
  obj.SetFocus;  
  Sys.Keys('[Home][Apps]');  
  result := ClickByPopupMenuItem(obj, 'Копировать текущий атрибут');  
  if NOT result then
    Raise('Не удалось вызвать пункт контекстного меню "Копировать текущий атрибут"');
  str := Sys.Clipboard;
  result := str = TEST_STRING;  
  if NOT result then 
    Log.Error('Скопированный атрибут не равен исходному',str);
  GoToMainMenu;  
except
  Log.Message('HLTC73_11_3_3_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.3: Список атрибутов
  	HLTC73.11.3.3: Проверить, что доступны операции:
      HLTC73.11.3.3.4: Предварительный просмотр
}
function HLTC73_11_3_3_4_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;     
var
  obj;  
begin                                  
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');   
  obj := OpenInDocument('ТЕКСТ'); 
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ');
  if NOT IsMenuItemChecked(GetFromMainWindow('ГЛАВНОЕ МЕНЮ'),'Документы\Информация о документе',true) then
  begin
    result := ClickByMainMenuItem('Документы\Информация о документе'); 
    if NOT result then Raise('Не могу кликнуть по пункту меню: "Документы\Информация о документе"');   
  end;
  obj := GetFromEditor('ВКЛАДКА "ИНФОРМАЦИЯ О ДОКУМЕНТЕ"');
  result := IsExists(obj) AND obj.Visible; 
  if NOT result then Raise('Не удалось получить вкладку "ИНФОРМАЦИЯ О ДОКУМЕНТЕ"');
  obj := GetFromEditor ('ТУЛБАР "ДОКУМЕНТ: ИНФОРМАЦИЯ О ДОКУМЕНТЕ"');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить тулбар ДОКУМЕНТ: ИНФОРМАЦИЯ О ДОКУМЕНТЕ');  
  result := ClickToolbarButton (obj, 'Предварительный просмотр');   
  if NOT result then Raise('Не удалось кликнуть на тулбаре по кнопке "Предварительный просмотр"');
  result := IsCorrectPreview;
  if NOT result then
    Log.Error('окно Предварительного просмотра не корректно');
  GoToMainMenu;  
except
  Log.Message('HLTC73_11_3_3_4_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.25: Навигация в документе
 	HLTC73.25.5: Дублирование подписей при скроллировании
     1. Переходим по первой ветке рубрикатора в документ "Договор о созаднии союзного государства"
     2. Не скроллируя текста, открываем предварительный просмотр документа
     3. Жмём на тулбаре «Назад»
     Возвращаемся в документ
     4. Скроллируем документ до конца
     В подписи не должно встречаться\дублироваться имя 2 раза.
}
function HLTC73_25_5_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;     
  TEST_WORD_1 = 'Б.Ельцин';
  TEST_WORD_2 = 'А.Лукашенко';  
var
  obj;   
  str;
begin                                  
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');       
  obj := GetFromEditor('ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');
  result := IsExists(obj); 
  if NOT result then Raise('Не удалось получить ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');
  result:=ClickToolBarButton(obj,'Предварительный просмотр');
  if NOT result then Raise ('Не удалось кликнуть "Предварительный просмотр"');        
  Delay(Options.Run.Timeout div 15); 
  if NOT GoByHistory('НАЗАД') then Raise('Не удалось перейти по истории назад');    
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  result := IsExists(obj); 
  if NOT result then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');  
  result := ScrollAllDoc(obj);
  if NOT result then Raise('Не коректно сработала ScrollAllDoc');
  obj.SetFocus;
  PressKeyNCount('^[End]', 3);
  Delay(Options.Run.Timeout div 60); 
  Sys.Keys('![PageUp]');
  str := CopyToClipboard(obj,'','Trim := true');
  result := StringCompare('*Б.Ельцин*', str) AND (NOT StringCompare('*Б.Ельцин*Б.Ельцин*',str)) AND
  StringCompare('*А.Лукашенко*', str) AND (NOT StringCompare('*А.Лукашенко*А.Лукашенко*',str));
  if NOT result then
    Log.Error('В подписи встречается имя 2 раза или вообще ни разу.');
  GoToMainMenu;  
except
  Log.Message('HLTC73_25_5_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.11.3: Список атрибутов
 HLTC73.11.3.6: Поверить отображения статуса регистрации в Минюсте
  HLTC73.11.3.6.2: Найти все документы, имеющие статус «Отказано в регистрации» (ППР, 
  «Статус регистрации» = «Отказано в регистрации»). Войти в любой найденный документ, открыть вкладку
  «Информация о документе», убедиться, что: 
   HLTC73.11.3.6.2.1: в поле «Статус регистрации» написано «Отказано в регистрации»
}
function HLTC73_11_3_6_2_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  PATH = 'Статус регистрации\Отказано в регистрации';
var
  obj;  
  carddata;
begin                                  
try
  carddata:=
    [
    	CARD_PPR, ([([
    	FD_MU_REG_STATUS, ([
    		'Отказано в регистрации']) ]),([
    	FD_INOPERATIVE_EDITION, ([
    		'Да']) ]) ]) 
    ];    
  SearchInPPR(carddata);
  obj := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(obj) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');
  if NOT OpenDocFromList('Документ*', obj) then 
    Raise('Не удалось открыть документ из списка: Документ*');
  obj := OpenInDocument('ИНФОРМАЦИЯ О ДОКУМЕНТЕ');
  if NOT IsExists(obj) then Raise('Не удалось открыть и получить ИНФОРМАЦИЯ О ДОКУМЕНТЕ');
  if NOT Position_Internal(obj, PATH, '\', false, 'isPressHome:=true') then
  begin
    Log.Error('Не удалось найти в Поле "Статус регистрации" значение "Отказано в регистрации"');
    Raise;
  end;
  result := true;  
  CloseTabIfNeeded;  
except
  Log.Message('HLTC73_11_3_6_2_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
  GoToMainMenuWithCloseTabsExceptOne;
end; 

{
HLTC73.11.3: Список атрибутов
 HLTC73.11.3.6: Поверить отображения статуса регистрации в Минюсте
  HLTC73.11.3.6.2: Найти ССЫЛКИ НА ДОКУМЕНТ, имеющие статус «Отказано в регистрации» (ППР, 
  «Статус регистрации» = «Отказано в регистрации»). Войти в любой найденный документ, открыть вкладку
  «Информация о документе», убедиться, что: 
   HLTC73.11.3.6.2.2: на вкладке нет поля «Номер регистрации в Минюсте».
}
function HLTC73_11_3_6_2_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  PATH = 'Номер регистрации в МинЮсте*';
var
  obj;  
  carddata;
begin                                  
try
  carddata:=
    [
    	CARD_PPR, ([([
    	FD_MU_REG_STATUS, ([
    		'Отказано в регистрации']) ]),([
    	FD_INOPERATIVE_EDITION, ([
    		'Да']) ]) ]) 
    ];    
  SearchInPPR(carddata);
  obj := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(obj) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');  
  if NOT OpenDocFromList('Документ*', obj) then 
    Raise('Не удалось открыть документ "Документ*" из списка');  
  obj := OpenInDocument('ИНФОРМАЦИЯ О ДОКУМЕНТЕ');
  if NOT IsExists(obj) then Raise('Не удалось открыть и получить ИНФОРМАЦИЯ О ДОКУМЕНТЕ');
  if Position_Internal(obj, PATH, '\', false, 'isPressHome:=true') then
  begin
    Log.Error('Удалось найти поле "Номер регистрации в МинЮсте", хотя оно быть не должно');
    Raise;
  end;
  result := true;  
  CloseTabIfNeeded;  
except
  Log.Message('HLTC73_11_3_6_2_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
  GoToMainMenuWithCloseTabsExceptOne
end;

{
HLTC73.11.3: Список атрибутов
 HLTC73.11.3.6: Поверить отображения статуса регистрации в Минюсте   
    HLTC73.11.3.6.3: Найти ССЫЛКИ НА ДОКУМЕНТ, имеющие статус «Иные» (ППР, «Статус регистрации» = «Иные»). Войти 
    в любой найденный документ, открыть вкладку «Информация о документе», убедиться, что на вкладке нет 
    поля «Статус регистрации».
}
function HLTC73_11_3_6_3_Execute (var  CurrentState: OleVariant): OleVariant;
const
  PATH = 'Статус регистрации*';
var
  obj;  
  carddata;
begin                                  
try
  carddata:=
    [
    	CARD_PPR, ([([
    	FD_MU_REG_STATUS, ([
    		'Иные']) ]),([
    	FD_INOPERATIVE_EDITION, ([
    		'Да']) ]) ]) 
    ];    
  SearchInPPR(carddata);
  obj := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(obj) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');
  if NOT OpenDocFromList('Документ*', obj) then 
    Raise('Не удалось открыть документ "Документ*" из списка');    
  obj := OpenInDocument('ИНФОРМАЦИЯ О ДОКУМЕНТЕ');
  if NOT IsExists(obj) then Raise('Не удалось открыть и получить ИНФОРМАЦИЯ О ДОКУМЕНТЕ');
  if Position_Internal(obj, PATH, '\', false, 'isPressHome:=true') then
  begin
    Log.Error('Удалось найти поле "Статус регистрации", хотя оно быть не должно');
    Raise;
  end;
  result := true;  
  CloseTabIfNeeded;  
except
  Log.Message('HLTC73_11_3_6_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
  GoToMainMenuWithCloseTabsExceptOne;
end;

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.3: Список атрибутов   
    HLTC73.11.3.7: Отображение дат в поле «Дата принятия»
     1 Открыть Гражданский кодекс (Alt+N 10064072)
     2. Нажать Alt+I
     2. Убедиться, что на вкладке «Информация о документе» в поле «Дата принятия», в хронологическом порядке указаны три даты:
     30.11.1994
     26.01.1996
     26.11.2001
}
function HLTC73_11_3_7_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10064072;     
  TEST_WORD_1 = '30.11.1994';
  TEST_WORD_2 = '26.01.1996';
  TEST_WORD_3 = '26.11.2001';
var
  obj;                         
  str: array [1..3] of integer;
  i;
begin                                  
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');  
  obj := OpenInDocument('ТЕКСТ'); 
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ');
  if NOT IsMenuItemChecked(GetFromMainWindow('ГЛАВНОЕ МЕНЮ'),'Документы\Информация о документе',true) then
  begin
    result := ClickByMainMenuItem('Документы\Информация о документе'); 
    if NOT result then Raise('Не могу кликнуть по пункту меню: "Документы\Информация о документе"');   
  end;
  obj := GetFromEditor('ВКЛАДКА "ИНФОРМАЦИЯ О ДОКУМЕНТЕ"');
  result := IsExists(obj) AND obj.Visible; 
  if NOT result then Raise('Не удалось получить вкладку "ИНФОРМАЦИЯ О ДОКУМЕНТЕ"');
  Sys.Keys('[Home]');
  result := Position_Internal(obj, 'Дата принятия');
  if NOT result then Raise('Не удалось спозиционироваться на атрибут "Дата принятия"');
  for i := 1 to 3 do
  begin
    Sys.Keys('[Down]');
    str[i] := common.GetWindowText(obj.Handle);
  end;
  result := (str[1] = TEST_WORD_1) AND (str[2] = TEST_WORD_2) AND (str[3] = TEST_WORD_3);
  if NOT result then
    Log.Error('Дети Атрибута «Дата принятия» не эталонны или расположены не в хронологическом порядке',
      str[1] + ' | ' + str[2] + ' | ' + str[3]);
  GoToMainMenu;  
except
  Log.Message('HLTC73_11_3_7_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.11: Справочная информация к документу
 HLTC73.11.4: Специальные тесты
  HLTC73.11.4.1: Проверить, что нельзя посмотреть (отстутствуют соответствующие вкладки) следующие 
  объекты справку, СПИСОК ССЫЛОК НА ДОКУМЕНТ и СПИСОК ССЫЛОК ИЗ ДОКУМЕНТА для документов:
    HLTC73.11.4.1.2: к которым нельзя построить ССЫЛОК НА ДОКУМЕНТ, ССЫЛОК ИЗ ДОКУМЕНТОВ и получить справку - можно 
    проверить для документа №49997 (с установленной галкой).
}
function HLTC73_11_4_1_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 49997;
var
  obj;
  button;
begin
try
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  if IsMenuItemEnabled(GetFromMainWindow('ГЛАВНОЕ МЕНЮ'),'Документы\Справка к документу') then
    Raise('Элемент меню "Документы\Справка к документу" активен, хотя у этого документа нет СПРАВКИ');
  if IsMenuItemEnabled(GetFromMainWindow('ГЛАВНОЕ МЕНЮ'),'Документы\ССЫЛКИ НА ДОКУМЕНТ') then
    Raise('Элемент меню "Документы\ССЫЛКИ НА ДОКУМЕНТ" активен, хотя у этого документа нет ССЫЛОК НА ДОКУМЕНТ');  
  if IsMenuItemEnabled(GetFromMainWindow('ГЛАВНОЕ МЕНЮ'),'Документы\ССЫЛКИ ИЗ ДОКУМЕНТА') then
    Raise('Элемент меню "Документы\ССЫЛКИ ИЗ ДОКУМЕНТА" активен, хотя у этого документа нет ССЫЛОК ИЗ ДОКУМЕНТОВ');    
    
   
  result := true;
  GoToMainMenu;  
except
  Log.Message('HLTC73_11_4_1_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.4: Специальные тесты
    HLTC73.11.4.1: Проверить, что нельзя посмотреть (отстутствуют соответствующие вкладки) следующие 
    объекты справку, СПИСОК ССЫЛОК НА ДОКУМЕНТ и СПИСОК ССЫЛОК ИЗ ДОКУМЕНТА для документов:
      HLTC73.11.4.1.3: когда нет справки – Для этого перейти в Конституцию РФ по перевой ветке рубрикатора
}
function HLTC73_11_4_1_3_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;
var
  obj;                         
begin                                  
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');  
  obj := GetFromEditor('ЗАКЛАДКИ');
  result := IsExists(obj);   
  if NOT result then Raise('Не удалось получить PageControl');  
  result := NOT SwitchToPage(obj, 'Справка');  
  if NOT result then 
  begin
    Log.Error('Вкладка Справка существует');
    Raise('Вкладка Справка существует');
  end;
  obj := OpenInDocument('ТЕКСТ');   
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ');
  result := NOT IsMenuItemEnabled(GetFromMainWindow('ГЛАВНОЕ МЕНЮ'),'Документы\Справка к документу');  
  if NOT result then
    Log.Error('Пункт меню Документы\Справка к документу виден');
  GoToMainMenu;  
except
  Log.Message('HLTC73_11_4_1_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.4: Специальные тесты
    HLTC73.11.4.1: Проверить, что нельзя посмотреть (отстутствуют соответствующие вкладки) следующие 
    объекты справку, СПИСОК ССЫЛОК НА ДОКУМЕНТ и СПИСОК ССЫЛОК ИЗ ДОКУМЕНТА для документов:
      HLTC73.11.4.1.4: Когда нет корреспондентов (ссылок на документ)
      Можно проверить на документе 20072
}
function HLTC73_11_4_1_4_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 20072;
var
  obj;                         
begin                                  
try
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  //Проверям что пункт меню не доступен  
  if IsMenuItemEnabled(GetFromMainWindow('ГЛАВНОЕ МЕНЮ'),'Документы\ССЫЛКИ НА ДОКУМЕНТ') then  
  begin
    Log.Error('Пункт меню "Документы\ССЫЛКИ НА ДОКУМЕНТ" виден');
    Raise('Пункт меню "Документы\ССЫЛКИ НА ДОКУМЕНТ" виден');
  end;
  //Проверям, что на пейджконтроле нет вкладок с иконкой корреспондентов    
  obj := GetFromEditor('ЗАКЛАДКИ');     
  if NOT IsExists(obj) then Raise('Не удалось получить PageControl');    
  if MoveMouseToObject(obj,'correspondents.bmp') then
  begin
    Raise('На PageControl-е нашли иконку корреспондентов');
    Log.Error('На PageControl-е нашли иконку корреспондентов');
  end;  
  GoToMainMenu;
  result := true;
except
  Log.Message('HLTC73_11_4_1_4_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.4: Специальные тесты
    HLTC73.11.4.1: Проверить, что нельзя посмотреть (отстутствуют соответствующие вкладки) следующие 
    объекты справку, СПИСОК ССЫЛОК НА ДОКУМЕНТ и СПИСОК ССЫЛОК ИЗ ДОКУМЕНТА для документов:
      HLTC73.11.4.1.5: Когда нет респондентов (ссылок из документа)
        Можно проверить на документе 10001873
}
function HLTC73_11_4_1_5_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10001873;
var
  obj;                         
begin                                  
try
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  //Проверям что пункт меню не доступен  
  if IsMenuItemEnabled(GetFromMainWindow('ГЛАВНОЕ МЕНЮ'),'Документы\ССЫЛКИ ИЗ ДОКУМЕНТА') then  
  begin
    Log.Error('Пункт меню "Документы\ССЫЛКИ ИЗ ДОКУМЕНТА" виден');
    Raise('Пункт меню "Документы\ССЫЛКИ ИЗ ДОКУМЕНТА" виден');
  end;
  //Проверям, что на пейджконтроле нет вкладок с иконкой корреспондентов    
  obj := GetFromEditor('ЗАКЛАДКИ');     
  if NOT IsExists(obj) then Raise('Не удалось получить PageControl');    
  if MoveMouseToObject(obj,'respondents.bmp') then
  begin
    Raise('На PageControl-е нашли иконку респондентов');
    Log.Error('На PageControl-е нашли иконку респондентов');
  end;  
  GoToMainMenu;
  result := true;  
except
  Log.Message('HLTC73_11_4_1_5_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.5: Аннотация
    HLTC73.11.5.1: Проверить, что у документов, имеющих аннотацию, присутствует вкладка «Аннотация»:
      HLTC73.11.5.1.1: У «обычных» документов, например № 12038456; 12038678; 1677887; 6070001; 12038599;
      485203; 6070024; 12038602;12038613; 12038614; 87813; 12038600; 2223371
}
function HLTC73_11_5_1_1_Execute (var  CurrentState: OleVariant): OleVariant;
var
  obj;   
  docNum;
  strArray;
  str: Integer;
  i: integer;
begin                                  
try
  docNum := [
    12038456, 12038678, 1677887, 6070001, 12038599, 485203, 6070024, 12038602, 
    12038613, 12038614, 87813, 12038600, 2223371
    ];
  strArray := [
    '*Пленума Высшего*должника*банкротства*','* обзор практики*имущества*арендатора*',
    '*Разъясняются отдельные*правоотношений.*сторон*','*Правительства*проведенную*5000 руб.*',
    '*Указание*ЦБР*инвестициях* Регистрационный*','*Методические рекомендации*фиксирования*путем*',
    '*Постановление*окладов*увеличиваются*','*специальными*ношения*связи*',
    '*Генеральное соглашение*протоколе*месяц*','*системам*Рекомендации*восемнадцатого*',
    '*Министерства*регулируются*Регистрационный*','*утверждении*Минрегион*коммунальные*',
    '*агентства*ЕСН*накладных расходов)*'
    ];  
  for i := VarArrayLowBound(strArray, 1) to VarArrayHighBound(strArray, 1) do
  begin
    result := OpenDocByNumber(docNum[i]);
    if NOT result then Raise('Не удалось открыть документ по Alt+N');  
    obj := GetFromEditor('ЗАКЛАДКИ');
    result := IsExists(obj);
    if NOT result then Raise('Не удалось найти PageControl');
    result := SwitchToPage(obj,'Аннотация');
    if NOT result then 
    begin
      Log.Error('Не найдена вкладка "Аннотация"');
      Raise('Не найдена вкладка "Аннотация"');
    end;
    obj := GetFromEditor('ВКЛАДКА "АННОТАЦИЯ"');
    result := IsExists(obj);
    if NOT result then Raise('Не удалось получить вкладку "Аннотация"');
    str := CopyToClipboard(obj,'ALL');
    result := StringCompare(strArray[i], str);
    if NOT result then
    begin
      Log.Error('Вкладка "Аннотация " для документа не эталонная: ' + strArray[i], IntToStr(i));
      Raise('Вкладка "Аннотация " для документа не эталонная');
    end;      
  end;                                                       
  GoToMainMenu;
except  
  Log.Message('HLTC73_11_5_1_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.5: Аннотация
    HLTC73.11.5.1: Проверить, что у документов, имеющих аннотацию, присутствует вкладка «Аннотация»:
      HLTC73.11.5.1.2: Проверить, что если у документа есть аннотация и есть редакции, то при просмотре 
      редакций вкладка «Аннотация» показывается (т.к аннотация одна на весь документ вместе с редакциями)
}
function HLTC73_11_5_1_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 9001;
  TEST_STRING = 
    '*Аннотация к топику 9001*Это просто текст аннотации к топику 9001.*Тут есть ссылка и на*сам топик.*';
var
  obj;   
  str;
begin                                  
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');    
  obj := GetFromEditor('ЗАКЛАДКИ');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось найти PageControl');
  result := SwitchToPage(obj,'Аннотация');
  if NOT result then 
  begin
    Log.Error('Не найдена вкладка "Аннотация"');
    Raise('Не найдена вкладка "Аннотация"');
  end;  
  obj := GetFromEditor('ВКЛАДКА "АННОТАЦИЯ"');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить вкладку "Аннотация"');
  str := CopyToClipboard(obj, 'ALL', 'Trim := true');
  result := StringCompare(TEST_STRING, str);
  if NOT result then
  begin
    Log.Error('Вкладка "Аннотация " для документа не эталонная', str);
    Raise('Вкладка "Аннотация " для документа не эталонная');
  end;  
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');      
  obj.SetFocus;
  if IsMenuItemEnabled(GetFromMainWindow('ГЛАВНОЕ МЕНЮ'),'Документы\Предыдущая редакция') then
  begin
    result := ClickByMainMenuItem('Документы\Предыдущая редакция'); 
    if NOT result then Raise('Не могу кликнуть по пункту меню: "Документы\Предыдущая редакция"');   
  end
  else
  begin
    result := ClickByMainMenuItem('Документы\Следущая редакция'); 
    if NOT result then Raise('Не могу кликнуть по пункту меню: "Документы\Следущая редакция"');   
  end;
  obj := GetFromEditor('ЗАКЛАДКИ');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось найти PageControl');
  result := SwitchToPage(obj,'Аннотация');
  if NOT result then 
  begin
    Log.Error('Не найдена вкладка "Аннотация"');
    Raise('Не найдена вкладка "Аннотация"');
  end;  
  obj := GetFromEditor('ВКЛАДКА "АННОТАЦИЯ"');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить вкладку "Аннотация"');
  str := CopyToClipboard(obj,'ALL');
  result := StringCompare(TEST_STRING, str);
  if NOT result then
    Log.Error('Вкладка "Аннотация " для документа не эталонная', str);
  GoToMainMenu;
except  
  Log.Message('HLTC73_11_5_1_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.5: Аннотация
    HLTC73.11.5.1: Проверить, что у документов, имеющих аннотацию, присутствует вкладка «Аннотация»:
      HLTC73.11.5.1.3: Проверить, что на этой вкладке доступны те же операции, что и на вкладке <Справка>.
}
function HLTC73_11_5_1_3_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 9001;
  CONTEXT = 'Аннотация';
var
  obj;   
  strArray;
  i;
  isClose;
  x, y;  
begin                                  
try  
  strArray := [
   'Копировать', 'Вставить', 'Выделить все', 'Снять выделение','Поиск контекста...',
    'Найти далее', 'Установить закладку...', 'Добавить мой комментарий', 'Найти в толковом словаре'
   ];
   isClose := false;
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');    
  obj := GetFromEditor('ЗАКЛАДКИ');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось найти PageControl');
  result := SwitchToPage(obj,'Аннотация');
  if NOT result then 
  begin
    Log.Error('Не найдена вкладка "Аннотация"');
    Raise('Не найдена вкладка "Аннотация"');
  end;  
  obj := GetFromEditor('ВКЛАДКА "АННОТАЦИЯ"');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить вкладку "Аннотация"');
  obj.SetFocus;
  result := GetCoordsSearchContext(obj, CONTEXT, x, y);
  if NOT result then Raise ('Не удалось найти координаты искомого контекста');  
  result :=  CopyToClipboard(obj, '', 'Trim := true; IsCleanClipboard := false') <> ''; //Что бы проверить, что есть пункт "Вставить"
  if NOT result then Raise ('Не удалось ничего скопировать');
  obj.ClickR (x + 10, y);
  for i := VarArrayLowBound(strArray, 1) to VarArrayHighBound(strArray, 1) do
  begin
    if i = VarArrayHighBound(strArray, 1) then isClose := true;    
    result := IsPopupMenuItemExists(obj, strArray[i], isClose);
    if NOT result then
    begin
      Log.Error('В контекстном меню нет операции', strArray[i]);
      Raise('В контекстном меню нет операции');
    end;
  end;  
  ClosePopUpMenu(obj);
  GoToMainMenu;
except  
  Log.Message('HLTC73_11_5_1_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.5: Аннотация
    HLTC73.11.5.2: Проверить, что у документов, не имеющих аннотации, вкладка «Аннотация» отсутствует.
}
function HLTC73_11_5_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000; 
var
  obj;   
  str;
begin                                  
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');    
  obj := GetFromEditor('ЗАКЛАДКИ');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось найти PageControl');
  result := NOT SwitchToPage(obj,'Аннотация');
  if NOT result then 
  begin
    Log.Error('Найдена вкладка "Аннотация"');
    Raise('Найдена вкладка "Аннотация"');
  end;    
  GoToMainMenu;
except  
  Log.Message('HLTC73_11_5_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.11: Справочная информация к документу
	HLTC73.11.5: Аннотация
    HLTC73.11.5.3: Проверить, что к аннотациям можно ставить комментарии, и эти комментарии
    будут потом найдены при нажатии на «Документы с комментариями пользователя » в моих документах.
}
function HLTC73_11_5_3_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 12038600;
  FOLDER_PREF = 'HLTC73_11_5_2';
  DOC_NAME = 'Утверждено положение о Министерстве регионального развития Российской Федерации';
var
  obj;   
  str;
  sub;
  x, y;
begin                                  
try
  result := SetSettings ([(['ДОКУМЕНТ\МЕТКИ НА ПОЛЯХ', 'КОММЕНТРАРИИ ПОЛЬЗОВАТЕЛЯ [CHECKBOX]', true])]); 
  if NOT result  then 
    Raise('Не удалось в настройках включить показ КОММЕНТРАРИИ ПОЛЬЗОВАТЕЛЯ [CHECKBOX');
    
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');    
  obj := GetFromEditor('ЗАКЛАДКИ');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось найти PageControl');
  result := SwitchToPage(obj,'Аннотация');
  if NOT result then 
  begin
    Log.Error('Не Найдена вкладка "Аннотация"');
    Raise('Не Найдена вкладка "Аннотация"');
  end;    
  obj := GetFromEditor('ВКЛАДКА "АННОТАЦИЯ"');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить вкладку "Аннотация"');
  obj.SetFocus;
  Sys.Keys('[Down][Down][Enter]' + FOLDER_PREF);
  result := OpenObjectFromFolder('Мои комментарии\Документы с комментариями пользователя');
  if NOT result then 
  begin
    Log.Error('Не удалось открыть объект из Моих комментариев', DOC_NAME);
    Raise('Не удалось открыть объект из Моих комментариев');
  end;
  obj := OpenInList('СПИСОК ДОКУМЕНТОВ');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить список');
  result := Position_Internal(obj, DOC_NAME);
  if NOT result then Raise('Не удалось спозиционироваться на нужный элемент в списке');
  OpenDocFromList;
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ Документа');
  sub := GetFromEditor('САБ ПАНЕЛЬ');
  result := MoveMouseToObject(sub,'User_Comments.bmp');
  if NOT result then Raise('Не удалось найти иконку польз. комментария на СУБ панели');
  y := Sys.Desktop.MouseY;
  x := 1;
  common.ScreenToClient(obj, x, y);
  obj.Click(1,y);
  result := (CopyToClipboard(obj,'STRING','Trim := true')) = FOLDER_PREF;
  if NOT result then
    Log.Error('Комментарий не идентичен изначальному');
  if DeleteAllUserCommentsFromContents < 1 then
    Log.Warning('Не было удалено ни одного комментария');
  CloseTabIfNeeded;
except  
  Log.Message('HLTC73_11_5_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
  GoToMainMenuWithCloseTabsExceptOne;
end; 

{
HLTC73.12: Копирование в буфер обмена
  HLTC73.12.1: Проверить, что в буфер корректно копируется. 
    HLTC73.12.1.1: Слово
}
function HLTC73_12_1_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 20072;
  CONTEXT = 'Содружества';  
var
  obj;   
  str;
  x,y : integer;
begin                                  
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');    
  obj := OpenInDocument('ТЕКСТ');
  result := GetCoordsSearchContext(obj, CONTEXT, x, y);
  if NOT result then Raise ('Не удалось найти координаты искомого контекста'); 
  obj.DblClick (x + 10, y);
  //obj.ClickR (x + 10, y);
  //result := ClickByPopupMenuItem(obj, 'Выделить текущее слово');      
  //if NOT result then Raise('Не удалось вызвать пункт контекстного меню "Выделить текущее слово"');
  obj.ClickR (x + 10, y);
  result := ClickByPopupMenuItem(obj, 'Копировать');      
  if NOT result then Raise('Не удалось вызвать пункт контекстного меню "Копировать"');
  str := Sys.Clipboard;
  result := str = CONTEXT;
  if NOT result then
    Log.Error('Текст в буфере не равнен исходному слову');
  GoToMainMenu;
except  
  Log.Message('HLTC73_12_1_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.12: Копирование в буфер обмена
  HLTC73.12.1: Проверить, что в буфер корректно копируется. 
    HLTC73.12.1.2: Абзац
}
function HLTC73_12_1_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 20072;
  CONTEXT_START = 'В соответствии';
  CONTEXT_END = 'постановляет:';
    
var
  obj;   
  str, testWord;  
  x1,y1, x2,y2 : integer;  
begin                                  
try  
  testWord := 'В соответствии*Положения об Экономическом* Независимых*Федерального Собрания*постановляет:' +
    EndOfLine;
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');    
  obj := OpenInDocument('ТЕКСТ');  
  if NOT GetCoordsSearchContext(obj, CONTEXT_START, x1, y1) then Raise ('Не удалось найти координаты искомого START контекста');
  if NOT GetCoordsSearchContext(obj, CONTEXT_END, x2, y2) then Raise ('Не удалось найти координаты искомого END контекста');
  //Выделяем абзац  
  if NOT DragExt(obj, x1, y1, x2-x1+5, y2-y1, '', 5) then
    Raise('Не удалось выделить мышкой текст');
  Sys.Keys('![End]');//дотягиваем  выделение до конца абзаца
  //Копируем абзац
  obj.ClickR (x1 + 10, y1);
  result := ClickByPopupMenuItem(obj, 'Копировать');      
  if NOT result then Raise('Не удалось вызвать пункт контекстного меню "Копировать"');
  str := Sys.Clipboard;
  result :=  StringCompare(testWord, str);
  if NOT result then
    Log.Error('Текст в буфере не равно исходному абзацу');
  GoToMainMenu;
except  
  Log.Message('HLTC73_12_1_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.12: Копирование в буфер обмена
  HLTC73.12.1: Проверить, что в буфер корректно копируется. 
    HLTC73.12.1.3: Весь текст
}
function HLTC73_12_1_3_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 20072;
  CONTEXT = 'содружества';  
var
  obj;   
  str, testWord;  
begin                                  
try  
  testWord := 'Письмо департамента*заковыристым именем* Федерального Собрания*постановляет:*' +
    'Федерального Собрания*Е.С.Строев*';
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');    
  obj := OpenInDocument('ТЕКСТ');
  obj.ClickR (10, 10); 
  result := ClickByPopupMenuItem(obj, 'Выделить все');      
  if NOT result then Raise('Не удалось вызвать пункт контекстного меню "Выделить все"');
  obj.ClickR (10, 10);
  result := ClickByPopupMenuItem(obj, 'Копировать');      
  if NOT result then Raise('Не удалось вызвать пункт контекстного меню "Копировать"');
  str := Sys.Clipboard;
  result :=  StringCompare(testWord, str);
  if NOT result then
    Log.Error('Текст в буфере не равно исходному тексту документа');
  GoToMainMenu;
except  
  Log.Message('HLTC73_12_1_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
  HLTC73.12: Копирование в буфер обмена
    HLTC73.12.3: Проверить копирование в буфер при множественном выделении текста (должны все 
    выделенные фрагменты текста попасть в буфер) 
}
function HLTC73_12_3_Execute (var  CurrentState: OleVariant): OleVariant;
const
	DOC_NUM = 10003000;   
var
  obj;
  str1, str2, str: string;
  x1, y1, x2, y2: integer;
	copy_attempts;
begin
try          
  x1 := 0; x2 := 0;
  y1 := 0; y2 := 0;            
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N'); 
  obj := OpenInDocument('ТЕКСТ');
  Sys.Keys('^[Home]');
  randomize;   
  PressKeyNCount('[Down]', 2 + random(5));
  Delay(Options.Run.Timeout div 10);   
  str1 := CopyToClipboard(obj, 'STRING', 'Trim := true');
	copy_attempts := 0;
  while (str1 = '') and (copy_attempts < MAX_COPY_ATTEMPTS) do
  begin
		Inc(copy_attempts);
    Sys.Keys('[Down]');
    str1 := CopyToClipboard(obj, 'STRING', 'Trim := true');
  end;
  result := GetTextSelectionCoords(obj, x1, y1);
  if NOT result then Raise('Не удалось найти выделенный текст');  
  Sys.Keys('^[Home]');    
  PressKeyNCount('[Down]', 8 + random(4));
  Delay(Options.Run.Timeout div 10);   
  str2 := CopyToClipboard(obj, 'STRING', 'Trim := true');
	copy_attempts := 0;
  while (str2 = '') and (copy_attempts < MAX_COPY_ATTEMPTS) do
  begin
		Inc(copy_attempts);
    Sys.Keys('[Down]');
    str2 := CopyToClipboard(obj, 'STRING', 'Trim := true');
  end;
  result := GetTextSelectionCoords(obj, x2, y2);
  if NOT result then Raise('Не удалось найти выделенный текст');                         
  result := DragExt(obj, x1, y1, obj.Width-x1-20, 0 );   
  if NOT result then Raise ('Не удалось выделить текст начиная с координат x1, y1 при помощи DragExt');
  result := DragExt(obj, x2, y2, obj.Width-x2-20, 0, 'skCtrl');
  if NOT result then Raise ('Не удалось выделить текст начиная с координат x2, y2 при помощи DragExt');  
  str := CopyToClipboard(obj, '', 'Trim := true');
  result := str = (str1 + EndOfLine + str2);
  if NOT result then
    Log.Error('Текст некорректно выделился при помощи комбинации Ctrl+мышь ',str);
  GoToMainMenu;
except
  Log.Message('HLTC73_12_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end; 

{
HLTC73.14: Контекстный поиск в документе
  HLTC73.14.1: При нажатии кнопки «Поиск контекста» панели инструментов выводится диалог «Поиск контекста»  
}
function HLTC73_14_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 20072;    
var
  obj;   
begin                                  
try
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  obj := GetFromEditor('ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');
  if NOT IsExists(obj) then Raise('Не удалось получить Тулбар документа');
  if IsExists( GetFromBaseSearch('КОМБОБОКС "БАЗОВЫЙ ПОИСК"') ) then
    GetFromBaseSearch('КНОПКА "ЗАКРЫТЬ"').Click;
  if NOT ClickToolBarButton(obj, 'Поиск контекста...') then
  begin
    Log.Error('Не удалось на тулбаре документа кликнуть по кнопке "Поиск контекста..."!');
    Raise('Не удалось на тулбаре документа кликнуть по кнопке "Поиск контекста..."!');
  end;
  if NOT IsExists(GetFromBaseSearch('КОМБОБОКС "БАЗОВЫЙ ПОИСК"')) then
  begin
    Log.Error('Не удалось получить КОМБОБОКС "БАЗОВЫЙ ПОИСК" при вызове контекстного поиска');
    Raise('Не удалось получить КОМБОБОКС "БАЗОВЫЙ ПОИСК" при вызове контекстного поиска!');
  end;
  GetFromBaseSearch('КНОПКА "ЗАКРЫТЬ"').Click;
  GoToMainMenu;
  result := true;
except  
  Log.Message('HLTC73_14_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  if IsExists( GetFromBaseSearch('КОМБОБОКС "БАЗОВЫЙ ПОИСК"') ) then
    GetFromBaseSearch('КНОПКА "ЗАКРЫТЬ"').Click;
  result := false;
  CommonExceptionHandler;             
end;
end; 



{
HLTC73.14: Контекстный поиск в документе
  HLTC73.14.11: Проверить, что в поле «Введите Ваш запрос» запоминаются искомые ранее контексты.
  }
function HLTC73_14_11_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 20072;  
var
  obj;
  contexts;     
  i;  
begin
try
  contexts := [
    'Письмо департамента строительства Краснодарского',
    'Председатель',
    'Документ',
    'Суда'
  ];  
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N'); 
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  for i := VarArrayLowBound(contexts, 1) to VarArrayHighBound(contexts, 1) do    
    if NOT BaseSearchInDocument(obj, contexts[i]) then Raise('Не удалось найти контекст :' + contexts[i]);      
  Sys.Keys('^[Home]');  
  if NOT ClickToolBarButton(GetFromEditor('ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"'), 'Поиск контекста...') then 
    Raise('Не удалось кликнуть по кнопке "Поиск контекста"');     
  obj := GetFromBaseSearch('КОМБОБОКС "БАЗОВЫЙ ПОИСК"');
  if NOT IsExists(obj) then Raise('Не удалось получить КОМБОБОКС "БАЗОВЫЙ ПОИСК"');
  for i := VarArrayLowBound(contexts, 1) to VarArrayHighBound(contexts, 1) do
  if NOT SelectInCombobox(obj, contexts[i]) then
  begin
    Log.Error('Не удалось из комбобокса "БАЗОВЫЙ ПОИСК" выбрать ранее введённый элемент: ' + contexts[i]);
    Raise('Не удалось из комбобокса "БАЗОВЫЙ ПОИСК" выбрать ранее введённый элемент: ' + contexts[i]);
  end;        
  GoToMainMenu;
  result := true;
except  
  Log.Message('HLTC73_14_11_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  if IsExists( GetFromBaseSearch('КНОПКА "ЗАКРЫТЬ"') ) then GetFromBaseSearch('КНОПКА "ЗАКРЫТЬ"').Click;
  result := false;
  CommonExceptionHandler;             
end;
end;




{
HLTC73.14: Контекстный поиск в документе
  HLTC73.14.15: Провести контекстный поиск в документе, закрыть окно контекстного поиска, опять открыть 
  окно контекстного поиска – контекст в поле «искать текст» должен быть выделен.
  }
  
function HLTC73_14_15_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 20072;
  CONTEXT = 'Председатель';  
var
  obj;
  str;
  searchWnd;
begin
try
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N'); 
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  if NOT BaseSearchInDocument(obj, CONTEXT) then Raise('Не удалось найти искомый контекст');  
  Sys.Keys('^[Home]');
  obj := GetFromEditor('ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');
  if NOT IsExists(obj) then Raise('Не удалось получить ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');
  if NOT ClickToolBarButton(obj, 'Поиск контекста...') then 
    Raise('Не удалось кликнуть по кнопке "Поиск контекста"');
  searchWnd := GetFromBaseSearch('КОМБОБОКС "БАЗОВЫЙ ПОИСК"');
  if NOT IsExists(searchWnd) AND searchWnd.Visible then Raise('Не могу найти КОМБОБОКС "БАЗОВЫЙ ПОИСК"!');  
  searchWnd.SetFocus;
  Delay(Options.Run.TimeOut div 30);  
  Sys.Keys('^c');
  str :=  Sys.Clipboard;
  result := StringCompare(str, CONTEXT);
  if NOT result then
    Log.Error('Подставленный текст в окно контекстного не равен эталонному', str);  
  GoToMainMenu;
except  
  Log.Message('HLTC73_14_15_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  if IsExists(GetFromBaseSearch('КНОПКА "ЗАКРЫТЬ"')) then GetFromBaseSearch('КНОПКА "ЗАКРЫТЬ"').Click;
  result := false;
  CommonExceptionHandler;             
end;
end;

{
HLTC73.14.18: Проверить контекстный поиск с различной степенью точности и с различным значением 
параметра Направление:
  HLTC73.14.18.2: В пределах абзаца (в документе Договор о Создании союзного государства #1055132)
    Контекст: погашения
   В результате контекстного поиска, должно выделиться слово «погашения» в статье 26 договора.
   При продолжении поиска не должно ничего найтись (сообщение «Поиск завершен»)
}
function HLTC73_14_18_2_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;
  CONTEXT = 'погашения';     
var
  obj;
  str;
  etalonParagraf;
begin                                  
try
  etalonParagraf := 'В Союзном государстве создается и действует единое законодательство в части обслуживания и погашения внешнего*';  
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N'); 
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  if NOT BaseSearchInDocument(obj, CONTEXT) then
  begin
    Log.Error('Не удалось найти искомый контекст'); 
    Raise('Не удалось найти искомый контекст');
  end;  
   
  obj.SetFocus;
  str := CopyToClipboard(obj, '', 'Trim := true');
  if NOT StringCompare(str, CONTEXT) then
  begin  
    Log.Error('Найденный контекст не равен эталонному', str);
    Raise('Найденный контекст не равен эталонному');
  end;
  obj.SetFocus;
  Sys.Keys('[Left][Up][Home]![Down]![Down]![Down]');//Выделяем начало параграфа  
  str := CopyToClipboard(obj, '', 'Trim := true');
  if NOT StringCompare(etalonParagraf, str) then
  begin  
    Log.Error('Контекст, который был найден, находится не в эталонном параграфе', str);
    Raise('Контекст, который был найден, находится не в эталонном параграфе');
  end;
      
  result := true;
  GoToMainMenu;
except  
  Log.Message('HLTC73_14_18_2_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;



{
HLTC73.14.18: Проверить контекстный поиск с различной степенью точности и с различным значением 
параметра Направление:
  HLTC73.14.18.2: В пределах абзаца (в документе Договор о Создании союзного государства #1055132)
    HLTC73.14.18.2.3: Контекст «опора ООН» (без кавычек). Не должен найтись, после чего должна выставиться 
    опция Направление: с начала документа
}
function HLTC73_14_18_2_3_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;
  CONTEXT = 'опора ООН';
var
  obj;  
begin                                  
try  
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N'); 
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  if BaseSearchInDocument(obj, CONTEXT) then
  begin
    Log.Error('Контекст нашёлся, хотя не должен был!'); 
    Raise('Контекст нашёлся, хотя не должен был!');
  end;
  result := true; 
  GoToMainMenu;
except  
  Log.Message('HLTC73_14_18_2_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;

{
HLTC73.14.18: Проверить контекстный поиск с различной степенью точности и с различным значением 
параметра Направление:
  HLTC73.14.18.2: В пределах абзаца (в документе Договор о Создании союзного государства #1055132)
    HLTC73.14.18.2.4: Контекст «опираясь ООН». Не должен найтись, после чего должна выставиться опция Направление:
    с начала документа
}
function HLTC73_14_18_2_4_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;
  CONTEXT = 'опираясь ООН';
var
  obj;  
begin                                  
try  
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N'); 
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  if BaseSearchInDocument(obj, CONTEXT) then
  begin
    Log.Error('Контекст нашёлся, хотя не должен был!'); 
    Raise('Контекст нашёлся, хотя не должен был!');
  end;
  result := true; 
  GoToMainMenu;
except  
  Log.Message('HLTC73_14_18_2_4_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;






{
HLTC73.14.21: Проверить контекстный поиск в комментариях:
  HLTC73.14.21.1: Проверить, что контекстным поиском можно найти текст, 
  расположенный в комментариях ГАРАНТа при режиме отображения комментариев: показываются.  
}
function HLTC73_14_21_1_Execute (var  CurrentState: OleVariant): OleVariant;
const 
  CONTEXT = 'Постановление Госстандарта Республики Беларусь и Госстандарта РФ от 17 марта 2000 г';
  DOC_NUM = 1055132;
var
  obj;
begin                                  
try  
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N'); 
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  if NOT SetCommentsMode(obj, JUROR_COMMENTS, MODE_SHOWN) then Raise('Не удалось вкл. показ юр. комментариев');  
  if NOT BaseSearchInDocument(obj, CONTEXT) then
  begin 
    Log.Error('Не удалось найти контекст, расположенный в комментариях ГАРАНТа при включенном режиме показа');
    Raise('Не удалось найти контекст, расположенный в комментариях ГАРАНТа при включенном режиме показа');
  end;
  result := true;  
  GoToMainMenu;
except  
  Log.Message('HLTC73_14_21_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;

{
HLTC73.14.21: Проверить контекстный поиск в комментариях:
   HLTC73.14.21.2: Проверить, что контекстным поиском можно найти текст, расположенный в комментариях ГАРАНТа 
    при режиме отображения комментариев: скрыты.  При этом их показ должен включиться.
}
function HLTC73_14_21_2_Execute (var  CurrentState: OleVariant): OleVariant;
const 
  CONTEXT = 'Постановление Госстандарта Республики Беларусь и Госстандарта РФ от 17 марта 2000';
  DOC_NUM = 1055132;
var
  obj;
begin                                  
try  
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N'); 
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  if NOT SetCommentsMode(obj, JUROR_COMMENTS, MODE_HIDDEN) then Raise('Не удалось выкл. показ юр. комментариев');
  if NOT BaseSearchInDocument(obj, CONTEXT) then
  begin 
    Log.Error('Не нашёлся контекст в комментариях ГАРАНТа при скрытом показе');
    Raise('Не нашёлся контекст в комментариях ГАРАНТа при скрытом показе');
  end;  
  if NOT (GetCommentsMode(obj, JUROR_COMMENTS) = MODE_SHOWN) then
  begin
    Log.Error('Режим просмотра комментариях ГАРАНТа не включился при нажоднеии в них контекста');
    Raise('Режим просмотра комментариях ГАРАНТа не включился при нажоднеии в них контекста');
  end;
  result := true;  
  GoToMainMenu;
except
  SetCommentsMode(obj, JUROR_COMMENTS, MODE_SHOWN);  
  Log.Message('HLTC73_14_21_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;

{
HLTC73.14.22: Операции с масками. Если пользователь в строке запроса указывает фрагмент с использованием
 символов <!> или <*>, то для этих фрагментов игнорируются опции, выставленные в дополнительных 
 параметрах (искать с начала слова, искать в любом месте слова, искать слова целиком), и поиск идет ровно 
 по маске, указанной пользователем.
  HLTC73.14.22.1: Восклицательный знак
    HLTC73.14.22.1.1: Открыть документ Договор о Создании Союзного Государства #1055132, проверить поиск 
    контекста «дел!» (без кавычек) Должно найтись                                      
}
function HLTC73_14_22_1_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;
  CONTEXT = 'дел!';
  TEST_WORD = 'дел';
var
  obj;
  str;  
begin                                  
try  
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N'); 
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  if NOT BaseSearchInDocument(obj, CONTEXT) then
  begin
    Log.Error('Не удалось найти искомый контекст!');
    Raise('Не удалось найти искомый контекст!');
  end;
  str := CopyToClipboard(obj, '', 'Trim := true');
  if NOT StringCompare(TEST_WORD, str) then
  begin
    Log.Error('При проверки контекстного поиска найден НЕ эталонный контекст', str);
    Raise('При проверки контекстного поиска найден НЕ эталонный контекст');
  end;
  
  result := true;  
  GoToMainMenu;
except  
  Log.Message('HLTC73_14_22_1_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;

{
HLTC73.14.22: Операции с масками. Если пользователь в строке запроса указывает фрагмент с использованием
 символов <!> или <*>, то для этих фрагментов игнорируются опции, выставленные в дополнительных 
 параметрах (искать с начала слова, искать в любом месте слова, искать слова целиком), и поиск идет ровно 
 по маске, указанной пользователем.
  HLTC73.14.22.1: Восклицательный знак
    HLTC73.14.22.1.2: Проверить поиск контекста «ин дел!» (без кавычек в Договоре о Создании Союзного 
    Государства #1055132.                                      
                                      }
function HLTC73_14_22_1_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;
  CONTEXT = 'иностранный дел!';
  TEST_WORD = 'иностранных дел';
var
  obj;
  str;
begin                                  
try  
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N'); 
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  if NOT BaseSearchInDocument(obj, CONTEXT) then
  begin
    Log.Error('Не удалось найти искомый контекст!');
    Raise('Не удалось найти искомый контекст!');
  end;
  str := CopyToClipboard(obj, '', 'Trim := true');
  if NOT StringCompare(TEST_WORD, str) then
  begin
    Log.Error('При проверки контекстного поиска найден НЕ эталонный контекст', str);
    Raise('При проверки контекстного поиска найден НЕ эталонный контекст');
  end;
except  
  Log.Message('HLTC73_14_22_1_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;

{
  HLTC73.14.22.2: Звездочка
    HLTC73.14.22.2.1: В конституции вводим «науч*» (без кавычек). Найдутся слова, начинающиеся на «науч».              
}
function HLTC73_14_22_2_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;
  CONTEXT = 'науч*';
var
  obj;
  str;
  searchParam;
  etalonContexts;
  param, i;
begin                                  
try
  etalonContexts := ['научным', 'научного', 'научной'];  
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N'); 
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');  
  for i := VarArrayLowBound(etalonContexts, 1) to VarArrayHighBound(etalonContexts, 1) do
  begin
    if i = VarArrayLowBound(etalonContexts, 1) then      
      param := 'isCloseWindow:=false'         
    else      
      param := 'isCloseWindow:=false;IsContinueSearch:=true';   
    if NOT BaseSearchInDocument(obj, CONTEXT, param) then 
    begin
      Log.Error('Не удалось найти искомый контекст');
      Raise('Не удалось найти искомый контекст');
    end;
    obj.SetFocus;
    str := CopyToClipboard(obj, '', 'Trim := true');
    //Проверяем, что нашлось то, что надо
    if NOT StringCompare(etalonContexts[i], str) then
    begin
      Log.Erorr('Найден не эталонный контекст: ' + str, 'должен был найтись: ' + etalonContexts[i]);
      Raise;
    end;    
  end;
  //Провеярем, что на i+i поиске ничего не нашлось
  if BaseSearchInDocument(obj, CONTEXT, param) then
  begin
    Log.Message('Поиск отработал третьий раз, хотя должне был всего 2 раза!');
    Raise;      
  end;  
  result := true;
  GoToMainMenu;
except  
  Log.Message('HLTC73_14_22_2_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;

{
HLTC73.14.22.2: Звездочка
  HLTC73.14.22.2.2: В конституции вводим "минимальных раз*" (с кавычками).
  Должны найтись словосочетания «минимальный размер» и «минимального размера»
}
function HLTC73_14_22_2_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;
  CONTEXT = '"минимальных раз*"';  
var
  obj;
  str;
  param;
  etalon;
  i;
begin
try
  etalon := ['минимальный размер', 'минимального размера'];  
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  
  
  for i := VarArrayLowBound(etalon, 1) to VarArrayHighBound(etalon, 1) do
  begin
    if i = VarArrayLowBound(etalon, 1) then      
      param := 'isCloseWindow:=false'         
    else      
      param := 'isCloseWindow:=false;IsContinueSearch:=true';   
    if NOT BaseSearchInDocument(obj, CONTEXT, param) then 
    begin
      Log.Error('Не удалось найти искомый контекст');
      Raise;
    end;
    obj.SetFocus;
    str := CopyToClipboard(obj, '', 'Trim := true');
    //Проверяем, что нашлось то, что надо
    if NOT StringCompare(etalon[i], str) then
    begin
      Log.Erorr('Найден не эталонный контекст: ' + str, 'должен был найтись: ' + etalon[i]);
      Raise;
    end;    
  end;
  //Провеярем, что на i+i поиске ничего не нашлось
  if BaseSearchInDocument(obj, CONTEXT, param) then
  begin
    Log.Message('Поиск отработал третьий раз, хотя должне был всего 2 раза!');
    Raise;      
  end;  
  result := true;
  GoToMainMenu;
except
  Log.Message('HLTC73_14_22_2_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

////////////////////////////////////////////////////////////////////////////////
{
HLTC73.15: Работа контекстного меню
  HLTC73.15.1: Выделить фрагмент текста документа (но не пользовательского комментария) и проверить работу
  пунктовконтекстного меню, вызванного кликом по правой кнопке над выделенным фрагментом:
    HLTC73.15.1.1: Установить закладку
}
function HLTC73_15_1_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;
  FOLDER_PREF = '73_15_1_1';
var
  obj;   
  str, str1;
begin                                  
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N'); 
  obj := OpenInDocument('ТЕКСТ');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить текст документа');  
  PressKeyNCount('[Down]', 3 + random(4));  
  str := CopyToClipboard(obj,'STRING','Trim := true'); 
  result := SetBookMark(FOLDER_PREF, str, 'Мои документы', true, obj);
  if NOT result then
  begin
    Log.Error('Не удалось установить закладку из контекстного меню');
    Raise('Не удалось установить закладку из контекстного меню');
  end;  
  result := OpenObjectFromFolder(MY_DOCS_PATH + FOLDER_PREF, OpenMyDocTab );
  if NOT result then Raise('Не удалось открыть объект из Моих документов');
  obj := OpenInDocument('ТЕКСТ');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить текст документа');  
  obj.SetFocus;
  str1 := CopyToClipboard(obj,'STRING','Trim := true');
  Delay(Options.Run.Timeout div 60);
  result := StringCompare(str1 + '*', str);
  if NOT result then 
    Log.Error('Закладка находится не на том месте, где ставилась', str1);
  if NOT DeleteAllInMyDoc then                    
    Log.Warning('Не удалось все объекты из моих документов');     
 GoToMainMenu;
except  
  Log.Message('HLTC73_15_1_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.15: Работа контекстного меню
  HLTC73.15.1: Выделить фрагмент текста документа (но не пользовательского комментария) и проверить работу
  пунктовконтекстного меню, вызванного кликом по правой кнопке над выделенным фрагментом:
    HLTC73.15.1.2: Добавить мой комментарий
}
function HLTC73_15_1_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;
  FOLDER_PREF = '73_15_1_2';
var
  obj;
  sub;   
  str;
  x, y;
begin                                  
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N'); 
  obj := OpenInDocument('ТЕКСТ');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить текст документа');  
  PressKeyNCount('[Down]', 3 + random(4));
  Sys.Keys('![End][Apps]');  
  result := ClickByPopupMenuItem(obj,'Добавить мой комментарий');  
  if NOT result then
  begin
    Log.Error('Не удалось из контекстного меню Добавить мой комментарий');
    Raise('Не удалось из контекстного меню Добавить мой комментарий');
  end;
  Sys.Keys(FOLDER_PREF);
  str:= SelectTextComment(obj, 1);
  result := StringCompare(str, FOLDER_PREF);
  if NOT result then
    Log.Error('Неправильный текст комментария');
  Sys.Keys('[Del]');
  GoToMainMenu;
except  
  Log.Message('HLTC73_15_1_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.15: Работа контекстного меню
  HLTC73.15.1: Выделить фрагмент текста документа (но не пользовательского комментария) и проверить работу
  пунктовконтекстного меню, вызванного кликом по правой кнопке над выделенным фрагментом:
    HLTC73.15.1.3: Копировать
    HLTC73.15.1.20: Вставить
}
function HLTC73_15_1_3_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;
  CONTEXT = 'утверждая';
var
  obj;
  str;
  x, y;
  sub;
begin                                  
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N'); 
  obj := OpenInDocument('ТЕКСТ');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить текст документа');  
  result := GetCoordsSearchContext(obj, CONTEXT, x, y);
  if NOT result then Raise ('Не удалось найти координаты искомого контекста');   
  obj.ClickR(x + 10, y);     
  result := ClickByPopupMenuItem(obj,'Копировать');  
  if NOT result then
  begin
    Log.Error('Не удалось из контекстного меню вызвать пункт КОПИРОВАТЬ');
    Raise('Не удалось из контекстного меню вызвать пункт КОПИРОВАТЬ');
  end;
  str := Sys.Clipboard;
  result := str = CONTEXT;  
  if NOT result then
  begin
    Log.Error('Текст в буфере не равен изначальному', str);
    Raise('Текст в буфере не равен изначальному');
  end;  
  obj.ClickR(x + 10, y);
  result := ClickByPopupMenuItem(obj,'Вставить');  
  if NOT result then
  begin
    Log.Error('Не удалось из контекстного меню вызвать пункт ВСТАВИТЬ');
    Raise('Не удалось из контекстного меню вызвать пункт ВСТАВИТЬ');
  end;  
  str:= SelectTextComment(obj, 1);
  result := StringCompare(str, CONTEXT);
  if NOT result then
    Log.Error('Вставленный текст не равен изначальному');
  Sys.Keys('[Del]');  
  GoToMainMenu;
except  
  Log.Message('HLTC73_15_1_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.15: Работа контекстного меню
  HLTC73.15.1: Выделить фрагмент текста документа (но не пользовательского комментария) и проверить работу
  пунктовконтекстного меню, вызванного кликом по правой кнопке над выделенным фрагментом:
    HLTC73.15.1.4: респонденты к фрагменту
}
function HLTC73_15_1_4_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;
  CONTEXT = 'Декларации';
var
  obj;
  x, y;
begin                                  
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N'); 
  obj := OpenInDocument('ТЕКСТ');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить текст документа');  
  result := GetCoordsSearchContext(obj, CONTEXT, x, y);  
  if NOT result then Raise ('Не удалось найти координаты искомого контекста');
  obj.ClickR(x, y);     
  result := ClickByPopupMenuItem(obj, 'ССЫЛКИ ИЗ ФРАГМЕНТА\Все документы');      
  if NOT result then 
  begin
    Log.Error('Не удалось вызвать пункт контекстного меню "ССЫЛКИ ИЗ ФРАГМЕНТА\Все документы"');
    Raise('Не удалось вызвать пункт контекстного меню "ССЫЛКИ ИЗ ФРАГМЕНТА\Все документы"');    
  end;
  obj := GetFromEditor('ВКЛАДКА "ССЫЛКИ ИЗ ФРАГМЕНТА"');
  result := IsExists(obj) AND obj.Visible; 
  if NOT result then
    Log.Error('Не удалось получить вкладку "ССЫЛКИ ИЗ ФРАГМЕНТА"');
  GoToMainMenu;
except  
  Log.Message('HLTC73_15_1_4_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.15: Работа контекстного меню
  HLTC73.15.1: Выделить фрагмент текста документа (но не пользовательского комментария) и проверить работу
  пунктовконтекстного меню, вызванного кликом по правой кнопке над выделенным фрагментом:
    HLTC73.15.1.5: ССЫЛКИ на ФРАГМЕНТ
}
function HLTC73_15_1_5_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;  
var
  obj;
  x, y;
begin                                  
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('ТЕКСТ');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить текст документа');   
  obj.SetFocus;
  Sys.Keys('^[Home]'+keyPause+'[Down]'+keyPause+'!^[End]'+keyPause+'[Apps]');     
  result := ClickByPopupMenuItem(obj, 'ССЫЛКИ НА ФРАГМЕНТ\Все документы');
  if NOT result then 
  begin
    Log.Error('Не удалось вызвать пункт контекстного меню "ССЫЛКИ НА ФРАГМЕНТ\Все документы"');
    Raise('Не удалось вызвать пункт контекстного меню "ССЫЛКИ НА ФРАГМЕНТ\Все документы"');    
  end;
  obj := GetFromEditor('ВКЛАДКА "ССЫЛКИ НА ФРАГМЕНТ"');
  result := IsExists(obj) AND obj.Visible; 
  if NOT result then
    Log.Error('Не удалось получить вкладку "ССЫЛКИ НА ФРАГМЕНТ"');
  GoToMainMenu;
except  
  Log.Message('HLTC73_15_1_5_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.15: Работа контекстного меню
  HLTC73.15.1: Выделить фрагмент текста документа (но не пользовательского комментария) и проверить работу
  пунктовконтекстного меню, вызванного кликом по правой кнопке над выделенным фрагментом:
    HLTC73.15.1.6: Найти в Толковом словаре
}
function HLTC73_15_1_6_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;
  CONTEXT = 'Федерации';
var
  obj;
  x, y;
begin                                  
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('ТЕКСТ');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить текст документа');  
  result := GetCoordsSearchContext(obj, CONTEXT, x, y);
  if NOT result then Raise ('Не удалось найти координаты искомого контекста');
  obj.ClickR(x + 10, y);
  result := ClickByPopupMenuItem(obj, 'Найти в Толковом словаре');      
  if NOT result then 
  begin
    Log.Error('Не удалось вызвать пункт контекстного меню "Найти в Толковом словаре"');
    Raise('Не удалось вызвать пункт контекстного меню "Найти в Толковом словаре"');    
  end;
  obj := GetFromDictionary('РЕДАКТОР'); 
  result := IsExists(obj) AND obj.Visible;
  if NOT result then 
    Log.Error('Не произошёл переход в ТС');
  GoToMainMenu;
except  
  Log.Message('HLTC73_15_1_6_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 



{
HLTC73.15: Работа контекстного меню
  HLTC73.15.1: Выделить фрагмент текста документа (но не пользовательского комментария) и проверить работу
  пунктовконтекстного меню, вызванного кликом по правой кнопке над выделенным фрагментом:
    HLTC73.15.1.8: Выделить всё
}
function HLTC73_15_1_8_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 12017850;
  TEST_WORDS = 'Федеральный закон*Исполняющий обязанности*В.Путин*N 25-ФЗ*';  
var
  obj;
  str;
begin                                  
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  DeleteAllUserCommentsFromContents;
  obj := OpenInDocument('ТЕКСТ');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить текст документа');  
  obj.Click(1, 1);
  Sys.Keys('![End][Apps]');  
  result := ClickByPopupMenuItem(obj, 'Выделить все');      
  if NOT result then 
  begin
    Log.Error('Не удалось вызвать пункт контекстного меню "Выделить всё"');
    Raise('Не удалось вызвать пункт контекстного меню "Выделить всё"');    
  end;
  str := CopyToClipboard(obj, '', 'Trim := true');
  result := StringCompare(TEST_WORDS, str);
  if NOT result then 
    Log.Error('Выделенный текст не равен исходному');
  GoToMainMenu;
except  
  Log.Message('HLTC73_15_1_8_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.15: Работа контекстного меню
  HLTC73.15.1: Выделить фрагмент текста документа (но не пользовательского комментария) и проверить работу
  пунктовконтекстного меню, вызванного кликом по правой кнопке над выделенным фрагментом:
    HLTC73.15.1.9: Поиск контекста
}
function HLTC73_15_1_9_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 12017850;  
var
  obj;
begin
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  CloseContextSearchForm;  
  obj := OpenInDocument('ТЕКСТ');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить текст документа');  
  obj.Click(1, 1);
  Sys.Keys('![End][Apps]');  
  result := ClickByPopupMenuItem(obj, 'Поиск контекста...');      
  if NOT result then 
  begin
    Log.Error('Не удалось вызвать пункт контекстного меню "Поиск контекста..."');
    Raise('Не удалось вызвать пункт контекстного меню "Поиск контекста..."'); 
  end;
  obj := GetFromBaseSearch('ПАНЕЛЬ "БАЗОВЫЙ ПОИСК"');
  result := IsExists(obj);
  if NOT result then 
    Log.Error('Не удалось найти ПАНЕЛЬ "БАЗОВЫЙ ПОИСК" после вызова крнтекстной операции "Поиск контекста..."');
  Sys.Keys('[Esc]');  
  GoToMainMenu;
except  
  Log.Message('HLTC73_15_1_9_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.15: Работа контекстного меню
  HLTC73.15.1: Выделить фрагмент текста документа (но не пользовательского комментария) и проверить работу
  пунктовконтекстного меню, вызванного кликом по правой кнопке над выделенным фрагментом:
    HLTC73.15.1.10: Снять выделение
}
function HLTC73_15_1_10_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 12017850;  
var
  obj;
  str;
begin
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('ТЕКСТ');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить текст документа');  
  obj.Click(1, 1);
  Sys.Keys('![End]');
  Delay(Options.Run.Timeout div 60);
  Sys.Keys('[Apps]');    
  result := ClickByPopupMenuItem(obj, 'Снять выделение');      
  if NOT result then 
  begin
    Log.Error('Не удалось вызвать пункт контекстного меню "Снять выделение"');
    Raise('Не удалось вызвать пункт контекстного меню "Снять выделение"'); 
  end;
  str := CopyToClipboard(obj, '', 'Trim := true');
  result := str = '';
  if NOT result then 
    Log.Error('В буфере есть текст после копирования после "Снять выделение"', str);
  GoToMainMenu;
except  
  Log.Message('HLTC73_15_1_10_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.15: Работа контекстного меню
  HLTC73.15.1: Выделить фрагмент текста документа (но не пользовательского комментария) и проверить работу
  пунктовконтекстного меню, вызванного кликом по правой кнопке над выделенным фрагментом:
    HLTC73.15.1.11: Поставить на контроль
}
function HLTC73_15_1_11_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 12017850;  
var
  obj;
  str;
begin
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('ТЕКСТ');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить текст документа');  
  obj.Click(1, 1);
  Sys.Keys('![End]');
  Delay(Options.Run.Timeout div 60);
  Sys.Keys('[Apps]');
  result := ClickByPopupMenuItem(obj, 'Поставить на контроль');
  if NOT result then 
  begin
    Log.Error('Не удалось вызвать пункт контекстного меню "Поставить на контроль"');
    Raise('Не удалось вызвать пункт контекстного меню "Поставить на контроль"'); 
  end;
  WaitForInfoWindow;
  obj.SetFocus;
  Sys.Keys('[Apps]');
  result := IsMenuItemChecked(obj.QCPopupMenu, 'Снять с контроля');  
  if NOT result then 
  begin  
    ClosePopUpMenu(obj);
    Log.Error('В контекстном меню не нажат пункт "снять с сконтроля", значит документ не поставился на контроль');
    Raise('В контекстном меню не нажат пункт "снять с сконтроля", значит документ не поставился на контроль');    
  end
  else
  begin  
    result := ClickByPopupMenuItem(obj, 'Снять с контроля');      
    if NOT result then 
      Log.Error('Не удалось кликнуть по пункту в контекстном меню "Снять с контроля"');
    WaitForConfirmationWindow(Options.Run.Timeout div 6,'Да');
  end;  
  GoToMainMenu;
except  
  Log.Message('HLTC73_15_1_11_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.15: Работа контекстного меню
  HLTC73.15.1: Выделить фрагмент текста документа (но не пользовательского комментария) и проверить работу
  пунктовконтекстного меню, вызванного кликом по правой кнопке над выделенным фрагментом:
    HLTC73.15.1.14: Включить машину времени
}
function HLTC73_15_1_14_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;
  CONTEXT = 'Конституция';
var
  obj;
begin                                  
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('ТЕКСТ');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить текст документа');  
  result := BaseSearchInDocument(obj, CONTEXT);
  if NOT result then Raise ('Не удалось найти искомый контекст');  
  Sys.Keys('[Apps]');  
   
  result := ClickByPopupMenuItem(obj, 'Включить Машину времени');
  if NOT result then 
  begin
    Log.Error('Не удалось вызвать пункт контекстного меню "Включить Машину времени"');
    Raise('Не удалось вызвать пункт контекстного меню "Включить Машину времени"');
  end;  
  obj := GetFromShell('ФОРМА МАШИНЫ ВРЕМЕНИ');
  result := IsExists(obj);    
  if NOT result then 
    Log.Error('После контекстной операции "Включить Машину времени" не обнаружилось окно ФОРМА МАШИНЫ ВРЕМЕНИ')
  else
    obj.Close;  
  GoToMainMenu;
except  
  Log.Message('HLTC73_15_1_14_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.15: Работа контекстного меню
    HLTC73.15.1: Выделить фрагмент текста документа (но не пользовательского комментария) и проверить работу
    пунктовконтекстного меню, вызванного кликом по правой кнопке над выделенным фрагментом:
      HLTC73.15.1.16: Выключить Машину времени/Изменить дату
       Пункт появляется только если Машина времени включена.
       Заменяет собой «Включить машину времени»     
}
function HLTC73_15_1_16_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 8901001;
  CONTEXT = 'Конституция';
var
  obj;
begin                                  
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');  
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  obj.SetFocus;
  Sys.Keys('[Apps]');       
  if IsPopupMenuItemExists(obj, 'Выключить машину времени и перейти в актуальную редакцию', true) then
  begin 
    Log.Error('Пункт контекстного меню "Выключить машину времени и перейти в актуальную редакцию" доступен, хотя не должен');
    Raise;
  end;  
  result := true; 
  GoToMainMenu;
except  
  Log.Message('HLTC73_15_1_16_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.15: Работа контекстного меню
    HLTC73.15.1: Выделить фрагмент текста документа (но не пользовательского комментария) и проверить работу
    пунктов контекстного меню, вызванного кликом по правой кнопке над выделенным фрагментом:
      HLTC73.15.1.21: Найти далее
}
function HLTC73_15_1_21_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;
  CONTEXT = 'России';
  TEST_WORDS = 'Мы, многонациональный народ Российской Федерации,';
var
  obj;
  x, y;
  str;
begin                                  
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('ТЕКСТ');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить текст документа');
  result := BaseSearchInDocument(obj, CONTEXT);
  if NOT result then Raise ('Не удалось найти искомый контекст');
  Sys.Keys('[Apps]');
  result := ClickByPopupMenuItem(obj, 'Найти далее');
  if NOT result then 
  begin
    Log.Error('Не удалось вызвать пункт контекстного меню "Найти далее"');
    Raise('Не удалось вызвать пункт контекстного меню "Найти далее"');
  end;  
  GetTextSelectionCoords (obj, x, y);
  obj.Click(x + 10, y);
  Delay(Options.Run.Timeout div 60); 
  str := CopyToClipboard(obj, 'STRING', 'Trim := true'); 
  result := StringCompare(TEST_WORDS, str);
  if NOT result then 
    Log.Error('После контекстной операции "Найти далее" курсор не переместился в нужное место', str);
  GoToMainMenu;
except  
  Log.Message('HLTC73_15_1_21_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.15: Работа контекстного меню
  HLTC73.15.2: Выделить фрагмент текста справки к документу (но не пользовательского комментария) и 
  проверить работу пунктовконтекстного меню, вызванного кликом по правой кнопке над выделенным фрагментом:
      HLTC73.15.2.1: Установить закладку 
}
function HLTC73_15_2_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;
  FOLDER_PREF = '73_15_2_1';
  CONTEXT = 'Москва';
var
  obj;   
  str, str1;
  x, y;
begin                                  
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N'); 
  obj := OpenInDocument('СПРАВКА');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить вкладку Справка к документу');    
  result := GetCoordsSearchContext(obj, CONTEXT, x, y);
  if NOT result then Raise ('Не удалось найти координаты искомого контекста');  
  obj.Click (x + 10, y);                                            
  str := CopyToClipboard(obj,'STRING','Trim := true'); 
  result := SetBookMark(FOLDER_PREF, str, 'Мои документы', true, obj);
  if NOT result then
  begin
    Log.Error('Не удалось установить закладку из контекстного меню');
    Raise('Не удалось установить закладку из контекстного меню');
  end;  
  result := OpenObjectFromFolder(MY_DOCS_PATH + FOLDER_PREF, OpenMyDocTab );
  if NOT result then Raise('Не удалось открыть объект из Моих документов');
  obj := OpenInDocument('ТЕКСТ');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить текст документа');  
  obj.SetFocus;
  str1 := CopyToClipboard(obj,'STRING','Trim := true');
  Delay(Options.Run.Timeout div 60);
  result := StringCompare(str1+'*', str);
  if NOT result then 
    Log.Error('Закладка находится не на том месте, где ставилась', str1);
  if NOT DeleteAllInMyDoc then                    
    Log.Warning('Не удалось все объекты из моих документов');     
 GoToMainMenu;
except  
  Log.Message('HLTC73_15_2_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.15: Работа контекстного меню
  HLTC73.15.2: Выделить фрагмент текста справки к документу (но не пользовательского комментария) и 
  проверить работу пунктовконтекстного меню, вызванного кликом по правой кнопке над выделенным фрагментом:
    HLTC73.15.2.2: Добавить комментарий пользователя
}
function HLTC73_15_2_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;
  FOLDER_PREF = '73_15_2_2';
  CONTEXT = 'Москва';
var
  obj;
  sub;   
  str;
  x, y;
begin                                  
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N'); 
  obj := OpenInDocument('СПРАВКА');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить вкладку Справка к документу');  
  result := GetCoordsSearchContext(obj, CONTEXT, x, y);
  if NOT result then Raise ('Не удалось найти координаты искомого контекста');  
  obj.ClickR (x + 10, y); 
  result := ClickByPopupMenuItem(obj,'Добавить мой комментарий');  
  if NOT result then
  begin
    Log.Error('Не удалось из контекстного меню Добавить мой комментарий');
    Raise('Не удалось из контекстного меню Добавить мой комментарий');
  end;
  Sys.Keys(FOLDER_PREF);
  str:= SelectTextComment(obj, 1);
  result := StringCompare(str, FOLDER_PREF);
  if NOT result then
    Log.Error('Неправильный текст комментария');
  Sys.Keys('[Del]');
  GoToMainMenu;
except  
  Log.Message('HLTC73_15_2_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.15: Работа контекстного меню
  HLTC73.15.2: Выделить фрагмент текста справки к документу (но не пользовательского комментария) и 
  проверить работу пунктовконтекстного меню, вызванного кликом по правой кнопке над выделенным фрагментом:
    HLTC73.15.2.3: Копировать
    HLTC73.15.2.15: Вставить
}
function HLTC73_15_2_3_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;
  CONTEXT = 'Москва';
var
  obj;
  str;
  sub;
  x, y;
begin                                  
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N'); 
  obj := OpenInDocument('СПРАВКА');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить вкладку Справка к документу');  
  result := GetCoordsSearchContext(obj, CONTEXT, x, y);
  if NOT result then Raise ('Не удалось найти координаты искомого контекста');
  obj.ClickR(x + 10, y);
  result := ClickByPopupMenuItem(obj, 'Копировать');
  if NOT result then
  begin
    Log.Error('Не удалось из контекстного меню вызвать пункт КОПИРОВАТЬ');
    Raise('Не удалось из контекстного меню вызвать пункт КОПИРОВАТЬ');
  end;
  str := Sys.Clipboard;
  result := str = CONTEXT;
  if NOT result then
  begin
    Log.Error('Текст в буфере не равен эталонному', str);
    Raise;
  end;
  obj.ClickR(x + 10, y);
  result := ClickByPopupMenuItem(obj, 'Вставить');  
  if NOT result then
  begin
    Log.Error('Не удалось из контекстного меню вызвать пункт ВСТАВИТЬ');
    Raise;
  end;  
  str:= SelectTextComment(obj, 1);
  result := StringCompare(str, CONTEXT);
  if NOT result then
    Log.Error('Вставленный текст не равен изначальному');
  Sys.Keys('[Del]');
  GoToMainMenu;  
except  
  Log.Message('HLTC73_15_2_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.15: Работа контекстного меню
  HLTC73.15.2: Выделить фрагмент текста справки к документу (но не пользовательского комментария) и 
  проверить работу пунктовконтекстного меню, вызванного кликом по правой кнопке над выделенным фрагментом:
    HLTC73.15.2.6: Найти в Толковом словаре
}
function HLTC73_15_2_6_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;
  CONTEXT = 'Москва';
var
  obj;
  x, y;
begin                                  
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('СПРАВКА');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить вкладку Справка к документу');  
  result := GetCoordsSearchContext(obj, CONTEXT, x, y);
  if NOT result then Raise ('Не удалось найти координаты искомого контекста');
  obj.ClickR(x + 10, y);
  result := ClickByPopupMenuItem(obj, 'Найти в Толковом словаре');      
  if NOT result then 
  begin
    Log.Error('Не удалось вызвать пункт контекстного меню "Найти в Толковом словаре"');
    Raise('Не удалось вызвать пункт контекстного меню "Найти в Толковом словаре"');    
  end;
  obj := GetFromDictionary('РЕДАКТОР'); 
  result := IsExists(obj) AND obj.Visible;
  if NOT result then 
    Log.Error('Не произошёл переход в ТС');
  GoToMainMenu;
except  
  Log.Message('HLTC73_15_2_6_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.15: Работа контекстного меню
  HLTC73.15.2: Выделить фрагмент текста справки к документу (но не пользовательского комментария) и 
  проверить работу пунктовконтекстного меню, вызванного кликом по правой кнопке над выделенным фрагментом:
    HLTC73.15.2.8: Выделить всё
}
function HLTC73_15_2_8_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;
  TEST_WORDS = 'Договор "О создании Союзного*ратифицировала* в "Российской газете" от 29 января 2000 г., N 2*';  
var
  obj;
  str;
begin                                  
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('СПРАВКА');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить вкладку Справка к документу');  
  obj.Click(1, 1);
  Sys.Keys('![End][Apps]');  
  result := ClickByPopupMenuItem(obj, 'Выделить все');      
  if NOT result then 
  begin
    Log.Error('Не удалось вызвать пункт контекстного меню "Выделить всё"');
    Raise('Не удалось вызвать пункт контекстного меню "Выделить всё"');    
  end;
  str := CopyToClipboard(obj, '', 'Trim := true');
  result := StringCompare(TEST_WORDS, str);
  if NOT result then 
    Log.Error('Выделенный текст не равен исходному');
  GoToMainMenu;
except  
  Log.Message('HLTC73_15_2_8_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.15: Работа контекстного меню
  HLTC73.15.2: Выделить фрагмент текста справки к документу (но не пользовательского комментария) и 
  проверить работу пунктов контекстного меню, вызванного кликом по правой кнопке над выделенным фрагментом:
    HLTC73.15.2.9: Поиск контекста
}
function HLTC73_15_2_9_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;  
var
  obj;
begin
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  //Сначала смотрим, если открыта форма контекстного поиска- тогда закрываем её
  CloseContextSearchForm;  
  obj := OpenInDocument('СПРАВКА');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить вкладку Справка к документу');  
  obj.Click(1, 1);
  Sys.Keys('![End]');
  PressKeyWithCheck(['[Apps]']);   
  result := ClickByPopupMenuItem(obj, 'Поиск контекста...');      
  if NOT result then 
  begin
    Log.Error('Не удалось вызвать пункт контекстного меню "Поиск контекста..."');
    Raise('Не удалось вызвать пункт контекстного меню "Поиск контекста..."'); 
  end;
  
  obj := GetFromBaseSearch('ПАНЕЛЬ "БАЗОВЫЙ ПОИСК"');
  result := IsExists(obj);
  if NOT result then 
    Log.Error('Не удалось найти ПАНЕЛЬ "БАЗОВЫЙ ПОИСК" после вызова крнтекстной операции "Поиск контекста..."');
  Sys.Keys('[Esc]');  
  GoToMainMenu;
except  
  Log.Message('HLTC73_15_2_9_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.15: Работа контекстного меню
  HLTC73.15.2: Выделить фрагмент текста справки к документу (но не пользовательского комментария) и 
  проверить работу пунктовконтекстного меню, вызванного кликом по правой кнопке над выделенным фрагментом:
    HLTC73.15.2.10: Снять выделение
}
function HLTC73_15_2_10_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;  
var
  obj;
  str;
begin
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('СПРАВКА');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить вкладку Справка к документу');  
  obj.Click(1, 1);
  Sys.Keys('[Down]![End]');
  Delay(Options.Run.Timeout div 60);
  Sys.Keys('[Apps]');    
  result := ClickByPopupMenuItem(obj, 'Снять выделение');      
  if NOT result then 
  begin
    Log.Error('Не удалось вызвать пункт контекстного меню "Снять выделение"');
    Raise('Не удалось вызвать пункт контекстного меню "Снять выделение"'); 
  end;
  str := CopyToClipboard(obj, '', 'Trim := true');
  result := str = '';
  if NOT result then 
    Log.Error('В буфере есть текст после копирования после "Снять выделение"', str);
  GoToMainMenu;
except  
  Log.Message('HLTC73_15_2_10_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.15: Работа контекстного меню
  HLTC73.15.2: Выделить фрагмент текста справки к документу (но не пользовательского комментария) и 
  проверить работу пунктовконтекстного меню, вызванного кликом по правой кнопке над выделенным фрагментом:
    HLTC73.15.2.16: Найти далее
}
function HLTC73_15_2_16_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;
  CONTEXT = ' Договор';
  TEST_WORDS = 'Договор вступил в силу 26 января 2000 г.';
var
  obj;
  x, y;
  str;
begin
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('СПРАВКА');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить вкладку Справка к документу');
  
  result := GetCoordsSearchContext(obj, CONTEXT, x, y, false, 'isCloseWindow:=false');
  if NOT result then Raise ('Не удалось найти координаты искомого контекста');
  obj.SetFocus;  
  Sys.Keys('[Apps]');
  result := ClickByPopupMenuItem(obj, 'Найти далее');
     
  if NOT result then 
  begin
    Log.Error('Не удалось вызвать пункт контекстного меню "Найти далее"');
    Raise('Не удалось вызвать пункт контекстного меню "Найти далее"');
  end;  
  GetTextSelectionCoords (obj, x, y);
  obj.Click(x + 10, y);
  Delay(Options.Run.Timeout div 60); 
  str := CopyToClipboard(obj, 'STRING', 'Trim := true'); 
  result := StringCompare(TEST_WORDS, str);
  if NOT result then 
    Log.Error('После контекстной операции "Найти далее" курсор не переместился в нужное место', str);
  CloseBaseSearch;  
  GoToMainMenu;
except  
  Log.Message('HLTC73_15_2_16_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  CloseBaseSearch;
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.15: Работа контекстного меню
  HLTC73.15.3: Проверить, что если открыть документ из списка, из него открыть какой-либо документ в новом окне,
  в первом окне вернуться в список и нажать правую кнопку мыши – получим корректное контекстное меню списка,
  а не Access violation.
}
function HLTC73_15_3_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NAME = 'Договор "О создании Союзного государства" (Москва, 8 декабря 1999 г.)';
  CONTEXT = 'Декларации';
  DOC_NAME_MAIN = 'Договор "О создании';
  DOC_NAME_ADD = 'Декларация о дальнейшем единении ';
var 
  obj, obj1; 
  addWnd;
  wnd, mainWnd;
  res1,res2;
  i:integer;
  w,w1,p;
  menuTab;
begin
try
  result := false;
  menuTab := OpenMenuTab;
  if NOT IsExists(menuTab) then Raise('Не удалось открыть вкладку Меню');     
  if NOT OpenObjectFromFolder(LIST_MAIN, menuTab) then 
    Raise('Не удалось открыть список по первой ветки рубрикатора!');
  obj := GetFromList('СПИСОК ДОКУМЕНТОВ'); 
  if NOT IsExists(obj) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');
  if NOT OpenDocFromList(DOC_NAME, obj) then Raise('Не удалось открыть список документ из списка!');  
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  if NOT ClickOnContext(obj, CONTEXT, true) then
    Raise('Не удалось вызвать контекстное меню на искомом контексте');
  if NOT ClickByPopupMenuItem(obj, 'Открыть ссылку в новом окне') then
    Raise('Не удалось вызвать пункт контекстного меню "Открыть ссылку в новом окне"');
    
  for i := 1 to 2 do
  begin
    w1 := GetMainWindow('ContainerIndex:=' + IntToStr(i));
    if not IsExists(w1) then
      Raise('Не найдено окно с ContainerIndex:=' + IntToStr(i));
    w := GetFromEditor('ТЕКСТ ДОКУМЕНТА', nil, w1);     
    if NOT IsExists(w) then
    begin    
      Log.Error('Не найден ТЕКСТ ДОКУМЕНТА в окне с ContainerIndex:=' + IntToStr(i));
      Raise;
    end;
    if (i=1) AND (NOT StringCompare('*'+DOC_NAME_ADD+'*', GetTabCaption('ContainerIndex:=1'))) then
    begin
      Log.Error('В новом окне открылся не эталонный документ');
      Raise;
    end;
    if (i=2) AND (NOT StringCompare('*'+DOC_NAME_MAIN+'*', GetTabCaption('ContainerIndex:=2'))) then
    begin
      Log.Error('Во втором (старом) окне открыт не эталонный документ');
      Raise;
    end;     
    if (i=2) then
    begin 
      wnd := w;
      mainWnd := w1;
    end; 
  end;  
  w.SetFocus;  
  if NOT CloseTabIfNeeded then Raise('Не удалось закрыть текущую вкладку');
  obj:= GetFromList('СПИСОК ДОКУМЕНТОВ');  
  if NOT IsExists(obj) then Raise('После перехода по Истории не удалось получить СПИСОК ДОКУМЕНТОВ');
  obj.SetFocus;
  Sys.Keys('[Apps]');
  Delay(Options.Run.Timeout div 30);
  if NOT IsPopupMenuExists then
  begin
    Log.Error('Не удалось получить PopUp меню!');
    Raise;
  end;
  ClosePopupMenu(obj);
  result := true;  
  CloseF1Shell;  
except                                                         
  Log.Message('HLTC73_15_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CloseF1Shell;
  CommonExceptionHandler;
end;
end;

{
HLTC73.15: Работа контекстного меню
  HLTC73.15.4: Если в документе нет выделенного фрагмента, то проверить, что корректно работают 
  пункты контекстного меню, открываемого кликом по правой кнопке мыши в тексте документа, но не в
  пользовательском комментарии (и в меню нет других пунктов):
    HLTC73.15.4.1: Копировать (неактивен) 
}
function HLTC73_15_4_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;
var
  obj;
begin                                  
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('ТЕКСТ');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить текст документа');  
  obj.ClickR(5, 5);  
  result := NOT IsPopupMenuItemExists(obj, 'Копировать', true);
  if NOT result then 
    Log.Error('Активен пункт контекстного меню "КОПИРОВАТЬ" на невыделенном фрагменте');
  GoToMainMenu;
except  
  Log.Message('HLTC73_15_4_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.15: Работа контекстного меню
  HLTC73.15.4: Если в документе нет выделенного фрагмента, то проверить, что корректно работают 
  пункты контекстного меню, открываемого кликом по правой кнопке мыши в тексте документа, но не в
  пользовательском комментарии (и в меню нет других пунктов):
    HLTC73.15.4.2: Добавить мой комментарий
}
function HLTC73_15_4_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;
  FOLDER_PREF = '73_15_4_2';
var
  obj;
  sub;   
  str;
  x, y;
begin                                  
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N'); 
  obj := OpenInDocument('ТЕКСТ');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить текст документа');  
  PressKeyNCount('[Down]', 3 + random(8));
  Sys.Keys('[Apps]');  
  result := ClickByPopupMenuItem(obj,'Добавить мой комментарий');  
  if NOT result then
  begin
    Log.Error('Не удалось из контекстного меню Добавить мой комментарий');
    Raise('Не удалось из контекстного меню Добавить мой комментарий');
  end;
  Sys.Keys(FOLDER_PREF);
  
  result := ClickNearIconOnSubInDocument(obj, 'КОММЕНТАРИЙ ПОЛЬЗОВАТЕЛЯ'); 
  if NOT result then
  begin
    Log.Error('Не удалось кликнуть в докумнете возле иконки КОММЕНТАРИЙ ГАРАНТА на САб панели');
    Raise;
  end;
  
  result := CopyToClipboard(obj,'STRING','Trim := true') = FOLDER_PREF;
  if NOT result then
    Log.Error('Неправильный текст комментария');
  Sys.Keys('[Del]');
  GoToMainMenu;
except  
  Log.Message('HLTC73_15_4_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 



{
HLTC73.15: Работа контекстного меню
  HLTC73.15.4: Если в документе нет выделенного фрагмента, то проверить, что корректно работают 
  пункты контекстного меню, открываемого кликом по правой кнопке мыши в тексте документа, но не в
  пользовательском комментарии (и в меню нет других пунктов):
    HLTC73.15.4.5: Выделить всё
}
function HLTC73_15_4_5_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 12017850;
  TEST_WORDS = 'Федеральный закон*Исполняющий обязанности*В.Путин*N 25-ФЗ*';  
var
  obj;
  str;
begin                                  
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  DeleteAllUserCommentsFromContents;
  obj := OpenInDocument('ТЕКСТ');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить текст документа');  
  obj.ClickR(5, 5);   
  result := ClickByPopupMenuItem(obj, 'Выделить все');      
  if NOT result then 
  begin
    Log.Error('Не удалось вызвать пункт контекстного меню "Выделить всё"');
    Raise('Не удалось вызвать пункт контекстного меню "Выделить всё"');    
  end;
  str := CopyToClipboard(obj, '', 'Trim := true');
  result := StringCompare(TEST_WORDS, str);
  if NOT result then 
    Log.Error('Выделенный текст не равен исходному');
  GoToMainMenu;
except  
  Log.Message('HLTC73_15_4_5_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.15: Работа контекстного меню
  HLTC73.15.4: Если в документе нет выделенного фрагмента, то проверить, что корректно работают 
  пункты контекстного меню, открываемого кликом по правой кнопке мыши в тексте документа, но не в
  пользовательском комментарии (и в меню нет других пунктов):
    HLTC73.15.4.6: Включить машину времени с календарной даты
}
function HLTC73_15_4_6_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;
var
  obj;
begin                                  
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('ТЕКСТ');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить текст документа');  
  obj.ClickR(5, 5);   
  result := ClickByPopupMenuItem(obj, 'Включить Машину времени');
  if NOT result then 
  begin
    Log.Error('Не удалось вызвать пункт контекстного меню "Включить Машину времени"');
    Raise('Не удалось вызвать пункт контекстного меню "Включить Машину времени"');
  end;  
  obj := GetFromShell('ФОРМА МАШИНЫ ВРЕМЕНИ');
  result := IsExists(obj);    
  if NOT result then 
    Log.Error('После контекстной операции "Включить Машину времени" не обнаружилось окно ФОРМА МАШИНЫ ВРЕМЕНИ')
  else
    obj.Close;  
  GoToMainMenu;
except  
  Log.Message('HLTC73_15_4_6_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 


{
HLTC73.15: Работа контекстного меню
  HLTC73.15.4: Если в документе нет выделенного фрагмента, то проверить, что корректно работают 
  пункты контекстного меню, открываемого кликом по правой кнопке мыши в тексте документа, но не в
  пользовательском комментарии (и в меню нет других пунктов):
    HLTC73.15.4.8: Поиск контекста
}
function HLTC73_15_4_8_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 12017850;  
var
  obj;
begin
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');  
  //Если открыта форма контекстного поиска, тогда её закрываем
  CloseContextSearchForm;
  obj := OpenInDocument('ТЕКСТ');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить текст документа');  
  obj.ClickR(5, 5);  
  result := ClickByPopupMenuItem(obj, 'Поиск контекста...');      
  if NOT result then 
  begin
    Log.Error('Не удалось вызвать пункт контекстного меню "Поиск контекста..."');
    Raise('Не удалось вызвать пункт контекстного меню "Поиск контекста..."'); 
  end;
  obj := GetFromBaseSearch('ПАНЕЛЬ "БАЗОВЫЙ ПОИСК"');
  result := IsExists(obj) AND obj.Visible AND StringCompare('Базовый поиск', obj.Caption);
  if NOT result then
    Log.Error('Не удалось обнаружить форму Контекстного поиска или у неё неправильный Caption');
  Sys.Keys('[Esc]');  
  GoToMainMenu;
except  
  Log.Message('HLTC73_15_4_8_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.15: Работа контекстного меню
  HLTC73.15.4: Если в документе нет выделенного фрагмента, то проверить, что корректно работают 
  пункты контекстного меню, открываемого кликом по правой кнопке мыши в тексте документа, но не в
  пользовательском комментарии (и в меню нет других пунктов):
    HLTC73.15.4.10: Снять выделение (неактивен)
}
function HLTC73_15_4_10_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;
var
  obj;
begin                                  
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('ТЕКСТ');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить текст документа');  
  obj.ClickR(5, 5);  
  result := NOT IsPopupMenuItemExists(obj, 'Снять выделение', true);
  if NOT result then 
    Log.Error('Активен пункт контекстного меню "Снять выделение" на невыделенном фрагменте');
  GoToMainMenu;
except  
  Log.Message('HLTC73_15_4_10_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.15: Работа контекстного меню
  HLTC73.15.4: Если в документе нет выделенного фрагмента, то проверить, что корректно работают 
  пункты контекстного меню, открываемого кликом по правой кнопке мыши в тексте документа, но не в
  пользовательском комментарии (и в меню нет других пунктов):
    HLTC73.15.4.12: Найти в толкованиях (неактивен)
}
function HLTC73_15_4_12_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;
var
  obj;
begin                                                          
try  
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('ТЕКСТ');
  if NOT IsExists(obj) then Raise('Не удалось получить текст документа');  
  obj.ClickR(5, 5);  
  if NOT IsPopupMenuItemExists(obj, 'Найти в Толковом словаре', true) then
  begin
    Log.Error('Активен пункт контекстного меню "Найти в Толковом словаре" на невыделенном фрагменте');
    Raise('Активен пункт контекстного меню "Найти в Толковом словаре" на невыделенном фрагменте');
  end;  
  result := true;  
  GoToMainMenu;
except  
  Log.Message('HLTC73_15_4_12_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.15: Работа контекстного меню
  HLTC73.15.4: Если в документе нет выделенного фрагмента, то проверить, что корректно работают 
  пункты контекстного меню, открываемого кликом по правой кнопке мыши в тексте документа, но не в
  пользовательском комментарии (и в меню нет других пунктов):
    HLTC73.15.4.13: Поставить на контроль
}
function HLTC73_15_4_13_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 12017850;  
var
  obj;
  str;
begin
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('ТЕКСТ');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить текст документа');  
  obj.ClickR(5, 5);     
  result := ClickByPopupMenuItem(obj, 'Поставить на контроль');      
  if NOT result then 
  begin
    Log.Error('Не удалось вызвать пункт контекстного меню "Поставить на контроль"');
    Raise('Не удалось вызвать пункт контекстного меню "Поставить на контроль"'); 
  end;
  WaitForInfoWindow;
  obj.SetFocus;
  Sys.Keys('[Apps]');
  result := IsMenuItemChecked(obj.QCPopupMenu, 'Снять с контроля');  
  if NOT result then 
  begin  
    ClosePopUpMenu(obj);
    Log.Error('В контекстном меню не нажат пункт "снять с сконтроля", значит документ не поставился на контроль');
    Raise('В контекстном меню не нажат пункт "снять с сконтроля", значит документ не поставился на контроль');    
  end
  else
  begin  
    result := ClickByPopupMenuItem(obj, 'Снять с контроля');      
    if NOT result then 
      Log.Error('Не удалось кликнуть по пункту в контекстном меню "Снять с контроля"');
    WaitForConfirmationWindow(Options.Run.Timeout div 6,'Да');  
  end;  
  GoToMainMenu;
except  
  Log.Message('HLTC73_15_4_13_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{

{
HLTC73.15: Работа контекстного меню
  HLTC73.15.4: Если в документе нет выделенного фрагмента, то проверить, что корректно работают 
  пункты контекстного меню, открываемого кликом по правой кнопке мыши в тексте документа, но не в
  пользовательском комментарии (и в меню нет других пунктов):
    HLTC73.15.4.18: Выключить машину (неактивен)    
}
function HLTC73_15_4_18_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 8901001;
var
  obj;  
begin                                  
try  
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');  
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');   
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  obj.SetFocus; 
  Sys.Keys('[Apps]');
  if IsPopupMenuItemExists(obj, 'Выключить Машину времени', true) then
  begin 
    Log.Error('Пункт контекстного меню "Включить Машину времени" активен, хотя не должен быть');
    Raise;
  end;  
  result := true;  
  GoToMainMenu;
except  
  Log.Message('HLTC73_15_4_18_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.15: Работа контекстного меню
  HLTC73.15.4: Если в документе нет выделенного фрагмента, то проверить, что корректно работают 
  пункты контекстного меню, открываемого кликом по правой кнопке мыши в тексте документа, но не в
  пользовательском комментарии (и в меню нет других пунктов):
    HLTC73.15.4.19: Вставить
}
function HLTC73_15_4_19_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;
  CONTEXT = 'утверждая';
var
  obj;
  str;
  x, y;
  sub;
begin                                  
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N'); 
  obj := OpenInDocument('ТЕКСТ');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить текст документа');  
  result := GetCoordsSearchContext(obj, CONTEXT, x, y);
  if NOT result then Raise ('Не удалось найти координаты искомого контекста');
  obj.ClickR(x + 10, y);     
  result := ClickByPopupMenuItem(obj,'Копировать');  
  if NOT result then
  begin
    Log.Error('Не удалось из контекстного меню вызвать пункт КОПИРОВАТЬ');
    Raise('Не удалось из контекстного меню вызвать пункт КОПИРОВАТЬ');
  end;
  str := Sys.Clipboard;
  result := str = CONTEXT;  
  if NOT result then
  begin
    Log.Error('Текст в буфере не равен изначальному', str);
    Raise('Текст в буфере не равен изначальному');
  end;  
  obj.Click(x + 10, y);
  obj.ClickR(x + 10, y);
  result := ClickByPopupMenuItem(obj,'Вставить');  
  if NOT result then
  begin
    Log.Error('Не удалось из контекстного меню вызвать пункт ВСТАВИТЬ');
    Raise('Не удалось из контекстного меню вызвать пункт ВСТАВИТЬ');
  end;  
  str:= SelectTextComment(obj, 1);
  result := StringCompare(str, CONTEXT);
  if NOT result then
    Log.Error('Вставленный текст не равен изначальному');
  Sys.Keys('[Del]');  
  GoToMainMenu;
except  
  Log.Message('HLTC73_15_4_19_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.15: Работа контекстного меню
  HLTC73.15.4: Если в документе нет выделенного фрагмента, то проверить, что корректно работают 
  пункты контекстного меню, открываемого кликом по правой кнопке мыши в тексте документа, но не в
  пользовательском комментарии (и в меню нет других пунктов):
    HLTC73.15.4.20: Найти далее
}
function HLTC73_15_4_20_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;
  CONTEXT = 'Российской';
  TEST_WORDS = 'Мы, многонациональный народ Российской Федерации,';
var
  obj;
  x, y;
  str;
begin                                  
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('ТЕКСТ');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить текст документа');  
  result := BaseSearchInDocument(obj, CONTEXT);
  if NOT result then Raise ('Не удалось найти искомый контекст');  
  obj.SetFocus;
  Sys.Keys('[Down]' + keyPause + '[Apps]');  
  result := ClickByPopupMenuItem(obj, 'Найти далее');      
  if NOT result then 
  begin
    Log.Error('Не удалось вызвать пункт контекстного меню "Найти далее"');
    Raise('Не удалось вызвать пункт контекстного меню "Найти далее"');
  end;  
  GetTextSelectionCoords (obj, x, y);
  obj.Click(x + 10, y);
  Delay(Options.Run.Timeout div 60); 
  str := CopyToClipboard(obj, 'STRING', 'Trim := true'); 
  result := StringCompare(TEST_WORDS, str);
  if NOT result then 
    Log.Error('После контекстной операции "Найти далее" курсор не переместился в нужное место', str);
  GoToMainMenu;
except  
  Log.Message('HLTC73_15_4_20_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.15: Работа контекстного меню
  HLTC73.15.5: Если в Справке к документу нет выделенного фрагмента, то проверить, что корректно работают 
  пункты контекстного меню, открываемого кликом по правой кнопке мыши в тексте справки, но не 
  в пользовательском комментарии (и в меню нет других пунктов)
    HLTC73.15.5.1: Установить закладку
}
function HLTC73_15_5_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;
  FOLDER_PREF = '73_15_5_1';
var
  obj;   
  str, str1;
  x, y;
begin                                  
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N'); 
  obj := OpenInDocument('СПРАВКА');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить вкладку Справка к документу');      
  obj.Click (5, 5); 
  Sys.Keys('[Down]');
  str := CopyToClipboard(obj,'STRING','Trim := true'); 
  result := SetBookMark(FOLDER_PREF, str, 'Мои документы', true, obj);
  if NOT result then
  begin
    Log.Error('Не удалось установить закладку из контекстного меню');
    Raise('Не удалось установить закладку из контекстного меню');
  end;  
  result := OpenObjectFromFolder(MY_DOCS_PATH + FOLDER_PREF, OpenMyDocTab );
  if NOT result then Raise('Не удалось открыть объект из Моих документов');
  obj := OpenInDocument('ТЕКСТ');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить текст документа');  
  obj.SetFocus;
  str1 := CopyToClipboard(obj,'STRING','Trim := true');
  Delay(Options.Run.Timeout div 60);
  result := StringCompare(str1+'*',  str);
  if NOT result then 
    Log.Error('Закладка находится не на том месте, где ставилась', str1);
  if NOT DeleteAllInMyDoc then                    
    Log.Warning('Не удалось все объекты из моих документов');     
 GoToMainMenu;
except  
  Log.Message('HLTC73_15_5_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.15: Работа контекстного меню
  HLTC73.15.5: Если в Справке к документу нет выделенного фрагмента, то проверить, что корректно работают 
  пункты контекстного меню, открываемого кликом по правой кнопке мыши в тексте справки, но не 
  в пользовательском комментарии (и в меню нет других пунктов)
    HLTC73.15.5.2: Добавить мой комментарий
}
function HLTC73_15_5_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;
  FOLDER_PREF = '73_15_5_2';
  CONTEXT = 'Москва';
var
  obj;
  sub;   
  str;
  x, y;
begin                                  
try  
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N'); 
  obj := OpenInDocument('СПРАВКА');
  if NOT IsExists(obj) then Raise('Не удалось получить вкладку Справка к документу');  
  if NOT GetCoordsSearchContext(obj, CONTEXT, x, y) then Raise('Не удалось получить координаты искомого контекста');  
  obj.Click (x + 10, y);
  obj.ClickR (x + 10, y); 
  if NOT ClickByPopupMenuItem(obj,'Добавить мой комментарий') then
  begin
    Log.Error('Не удалось из контекстного меню Добавить мой комментарий');
    Raise;
  end;
  Sys.Keys(FOLDER_PREF);
  obj := GetFromEditor('ВКЛАДКА "СПРАВКА"');
  if NOT IsExists(obj) then Raise('Не удалось получить ВКЛАДКА "СПРАВКА"');
  str:= SelectTextComment(obj, 1); 
  if NOT StringCompare(FOLDER_PREF, str) then
    Log.Error('Неправильный текст комментария');
  Sys.Keys('[Del]');
  result := true;
  GoToMainMenu;
except  
  Log.Message('HLTC73_15_5_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 



{
HLTC73.15: Работа контекстного меню
  HLTC73.15.5: Если в Справке к документу нет выделенного фрагмента, то проверить, что корректно работают 
  пункты контекстного меню, открываемого кликом по правой кнопке мыши в тексте справки, но не 
  в пользовательском комментарии (и в меню нет других пунктов)
    HLTC73.15.5.5: Выделить всё
}
function HLTC73_15_5_5_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;
  TEST_WORDS = 'Договор "О создании Союзного*ратифицировала* в "Российской газете" от 29 января 2000 г., N 2*';  
var
  obj;
  str;
begin                                  
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('СПРАВКА');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить вкладку Справка к документу');  
  obj.ClickR(5, 5);  
  result := ClickByPopupMenuItem(obj, 'Выделить все');      
  if NOT result then 
  begin
    Log.Error('Не удалось вызвать пункт контекстного меню "Выделить всё"');
    Raise('Не удалось вызвать пункт контекстного меню "Выделить всё"');    
  end;
  str := CopyToClipboard(obj, '', 'Trim := true');
  result := StringCompare(TEST_WORDS, str);
  if NOT result then 
    Log.Error('Выделенный текст не равен исходному');
  GoToMainMenu;
except  
  Log.Message('HLTC73_15_5_5_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 


{
HLTC73.15: Работа контекстного меню
  HLTC73.15.5: Если в Справке к документу нет выделенного фрагмента, то проверить, что корректно работают 
  пункты контекстного меню, открываемого кликом по правой кнопке мыши в тексте справки, но не 
  в пользовательском комментарии (и в меню нет других пунктов)
    HLTC73.15.5.7: Найти в Толковом словаре
}
function HLTC73_15_5_7_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;  
var
  obj;
  x, y;
  str;
begin
try     
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('СПРАВКА');  
  if NOT IsExists(obj) then Raise('Не удалось получить вкладку Справка к документу');  
  if NOT GetCoordsSearchContext(obj, 'Договор', x, y) then 
    Raise ('Не удалось найти координаты искомого контекста');    
  obj.Click (x + 10, y);  
  obj.ClickR (x + 10, y);   
  if NOT ClickByPopupMenuItem(obj, 'Найти в толковом словаре') then  
  begin
    Log.Error('Не удалось из контекстного меню вызвать операцию : Найти в толковом словаре');
    Raise('Не удалось из контекстного меню вызвать операцию : Найти в толковом словаре');
  end;
  
  obj := GetFromDictionary('РЕДАКТОР');  
  if NOT (IsExists(obj) AND obj.Visible) then Raise('Не произошёл переход в ТС');   
  str := CopyToClipboard(obj, 'ALL', 'Trim := true');
  if NOT StringCompare('Авторский договор*Соглашение об условиях использования охраняемых*декоративно-прикладного искусства.', str) then
  begin
    Log.Error('Перешли НЕ на эталонный термин в ТС', str);  
    Raise('Перешли НЕ на эталонный термин в ТС');
  end;  
  result := true;  
except                      
  Log.Message('HLTC73_15_5_7_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 


{
HLTC73.15: Работа контекстного меню
  HLTC73.15.5: Если в Справке к документу нет выделенного фрагмента, то проверить, что корректно работают 
  пункты контекстного меню, открываемого кликом по правой кнопке мыши в тексте справки, но не 
  в пользовательском комментарии (и в меню нет других пунктов)
    HLTC73.15.5.8: Поиск контекста
}
function HLTC73_15_5_8_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;  
var
  obj;
begin
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := GetFromBaseSearch('ПАНЕЛЬ "БАЗОВЫЙ ПОИСК"');
  //Если открыта форма контекстного поиска, тогда её закрываем
  CloseContextSearchForm;
  obj := OpenInDocument('СПРАВКА');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить вкладку Справка к документу');  
  obj.ClickR(5, 5); 
  result := ClickByPopupMenuItem(obj, 'Поиск контекста...');      
  if NOT result then 
  begin
    Log.Error('Не удалось вызвать пункт контекстного меню "Поиск контекста..."');
    Raise('Не удалось вызвать пункт контекстного меню "Поиск контекста..."'); 
  end;
  obj := GetFromBaseSearch('ПАНЕЛЬ "БАЗОВЫЙ ПОИСК"');
  result := IsExists(obj) AND obj.Visible AND StringCompare('Базовый поиск', obj.Caption);
  if NOT result then
    Log.Error('Не удалось обнаружить форму Контекстного поиска или у неё неправильный Caption');
  Sys.Keys('[Esc]');  
  GoToMainMenu;
except  
  Log.Message('HLTC73_15_5_8_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 
 
{
HLTC73.15: Работа контекстного меню
  HLTC73.15.5: Если в Справке к документу нет выделенного фрагмента, то проверить, что корректно работают 
  пункты контекстного меню, открываемого кликом по правой кнопке мыши в тексте справки, но не 
  в пользовательском комментарии (и в меню нет других пунктов)
    HLTC73.15.5.9: Копировать (неактивен)
}
function HLTC73_15_5_9_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;
  CONTEXT = 'Москва';
var
  obj;
  x, y;
begin                                  
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('СПРАВКА');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить вкладку Справка к документу'); 
  result := GetCoordsSearchContext(obj, CONTEXT, x, y);
  if NOT result then Raise ('Не удалось найти координаты искомого контекста');
  obj.Click (x + 10, y);
  obj.ClickR (x + 10, y);   
  result := NOT IsPopupMenuItemExists(obj, 'Копировать', true);
  if NOT result then 
    Log.Error('Активен пункт контекстного меню "КОПИРОВАТЬ" на невыделенном фрагменте');
  GoToMainMenu;
except  
  Log.Message('HLTC73_15_5_9_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.15: Работа контекстного меню
  HLTC73.15.5: Если в Справке к документу нет выделенного фрагмента, то проверить, что корректно работают 
  пункты контекстного меню, открываемого кликом по правой кнопке мыши в тексте справки, но не 
  в пользовательском комментарии (и в меню нет других пунктов)
    HLTC73.15.5.10: Вставить
}
function HLTC73_15_5_10_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;
  CONTEXT = 'Москва';
var
  obj;
  str;
  x, y;
  sub;
begin                                  
try    
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N'); 
  obj := OpenInDocument('СПРАВКА');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить вкладку Справка к документу');  
  result := GetCoordsSearchContext(obj, CONTEXT, x, y);
  if NOT result then Raise ('Не удалось найти координаты искомого контекста');
  obj.ClickR(x + 10, y);     
  result := ClickByPopupMenuItem(obj,'Копировать');  
  if NOT result then
  begin
    Log.Error('Не удалось из контекстного меню вызвать пункт КОПИРОВАТЬ');
    Raise('Не удалось из контекстного меню вызвать пункт КОПИРОВАТЬ');
  end;
  str := Sys.Clipboard;
  result := str = CONTEXT;  
  if NOT result then
  begin
    Log.Error('Текст в буфере не равен изначальному', str);
    Raise('Текст в буфере не равен изначальному');
  end;  
  obj.Click(x + 10, y);
  obj.ClickR(x + 10, y);
  result := ClickByPopupMenuItem(obj,'Вставить');  
  if NOT result then
  begin
    Log.Error('Не удалось из контекстного меню вызвать пункт ВСТАВИТЬ');
    Raise('Не удалось из контекстного меню вызвать пункт ВСТАВИТЬ');
  end;  
  str:= SelectTextComment(obj, 1);
  result := StringCompare(str, CONTEXT);
  if NOT result then
    Log.Error('Вставленный текст не равен изначальному');
  Sys.Keys('[Del]');  
  GoToMainMenu;
except  
  Log.Message('HLTC73_15_5_10_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.15: Работа контекстного меню
  HLTC73.15.5: Если в Справке к документу нет выделенного фрагмента, то проверить, что корректно работают 
  пункты контекстного меню, открываемого кликом по правой кнопке мыши в тексте справки, но не 
  в пользовательском комментарии (и в меню нет других пунктов)
    HLTC73.15.5.11: Снять выделение(неактивен)
}
function HLTC73_15_5_11_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;
  CONTEXT = 'Москва';
var
  obj;
  x, y;
begin                                  
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('СПРАВКА');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить вкладку Справка к документу'); 
  result := GetCoordsSearchContext(obj, CONTEXT, x, y);
  if NOT result then Raise ('Не удалось найти координаты искомого контекста');
  obj.Click (x + 10, y);
  obj.ClickR (x + 10, y);   
  result := NOT IsPopupMenuItemExists(obj, 'Снять выделение', true);
  if NOT result then 
    Log.Error('Активен пункт контекстного меню "Снять выделение" на невыделенном фрагменте');
  GoToMainMenu;
except  
  Log.Message('HLTC73_15_5_11_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.15: Работа контекстного меню
  HLTC73.15.5: Если в Справке к документу нет выделенного фрагмента, то проверить, что корректно работают 
  пункты контекстного меню, открываемого кликом по правой кнопке мыши в тексте справки, но не 
  в пользовательском комментарии (и в меню нет других пунктов)
    HLTC73.15.5.12: Теперь "Найти далее"
}
function HLTC73_15_5_12_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;
  CONTEXT = ' Договор';
  TEST_WORDS = 'Договор вступил в силу 26 января 2000 г.';
var
  obj;
  x, y;
  str;
begin                                  
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('СПРАВКА');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить вкладку Справка к документу');  
  result := GetCoordsSearchContext(obj, CONTEXT, x, y, false, 'isCloseWindow:=false');
  if NOT result then Raise ('Не удалось найти координаты искомого контекста');  
  obj.ClickR(x + 10, y);
  result := ClickByPopupMenuItem(obj, 'Найти далее');      
  if NOT result then 
  begin
    Log.Error('Не удалось вызвать пункт контекстного меню "Найти далее"');
    Raise('Не удалось вызвать пункт контекстного меню "Найти далее"');
  end;  
  GetTextSelectionCoords (obj, x, y);
  obj.Click(x + 10, y);
  Delay(Options.Run.Timeout div 60); 
  str := CopyToClipboard(obj, 'STRING', 'Trim := true'); 
  result := StringCompare(TEST_WORDS, str);
  if NOT result then 
    Log.Error('После контекстной операции "Найти далее" курсор не переместился в нужное место', str);
  CloseBaseSearch;  
  GoToMainMenu;
except  
  Log.Message('HLTC73_15_5_12_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  CloseBaseSearch;  
  result := false;  
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.15: Работа контекстного меню
  HLTC73.15.6: Проверить, что в окне атрибутов корректно работают пункты контекстного меню 
  (и в меню нет других пунктов):   
}
function HLTC73_15_6_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;  
  COUNT_ITEMS = 9;
var
  obj;  
  count;
  countSeparators;
  i;
begin                                  
try  
  countSeparators := 0;
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');   
  obj := OpenInDocument('ТЕКСТ'); 
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ');
  if NOT IsMenuItemChecked(GetFromMainWindow('ГЛАВНОЕ МЕНЮ'),'Документы\Информация о документе',true) then
  begin
    result := ClickByMainMenuItem('Документы\Информация о документе'); 
    if NOT result then 
    begin
      Log.Error('Не могу кликнуть по пункту меню: "Документы\Информация о документе"');
      Raise('Не могу кликнуть по пункту меню: "Документы\Информация о документе"');   
    end;  
  end;
  obj := GetFromEditor('ВКЛАДКА "ИНФОРМАЦИЯ О ДОКУМЕНТЕ"');
  result := IsExists(obj) AND obj.Visible;
  if NOT result then Raise('Не удалось получить вкладку "ИНФОРМАЦИЯ О ДОКУМЕНТЕ"');  
  obj.SetFocus;
  Sys.Keys('[Home][Apps]');
  //obj := GetMainWindow;
  count := obj.PopupMenu.Count;
  for i:= 0 to count-1  do
    if obj.PopupMenu.Items[i].IsSeparator then inc(countSeparators);
  count := count - countSeparators;   
  result := COUNT_ITEMS = count;
  ClosePopupMenu(obj);
  if NOT result then
    Log.Error('Количество элементов попап меню не равно: ' + IntToStr(COUNT_ITEMS) + ', а равно: ' + IntToStr(count));
  GoToMainMenu;
except  
  Log.Message('HLTC73_15_6_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.15: Работа контекстного меню
  HLTC73.15.6: Проверить, что в окне атрибутов корректно работают пункты контекстного меню 
  (и в меню нет других пунктов):
    HLTC73.15.6.3: Печать
}
function HLTC73_15_6_3_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;  
var
  obj;  
begin                                  
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');   
  obj := OpenInDocument('ТЕКСТ'); 
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ');
  if NOT IsMenuItemChecked(GetFromMainWindow('ГЛАВНОЕ МЕНЮ'),'Документы\Информация о документе',true) then
  begin
    result := ClickByMainMenuItem('Документы\Информация о документе'); 
    if NOT result then
    begin
      Log.Error('Не могу кликнуть по пункту меню: "Документы\Информация о документе"');
      Raise('Не могу кликнуть по пункту меню: "Документы\Информация о документе"');   
    end;  
  end;
  obj := GetFromEditor('ВКЛАДКА "ИНФОРМАЦИЯ О ДОКУМЕНТЕ"');
  result := IsExists(obj) AND obj.Visible; 
  if NOT result then Raise('Не удалось получить вкладку "ИНФОРМАЦИЯ О ДОКУМЕНТЕ"');
  obj.SetFocus;  
  Sys.Keys('[Home][Apps]');  
  result := IsPopupMenuItemExists(obj, 'Печать', true);
  if NOT result then 
    Log.Error('Не активен пункт контекстного меню "Печать" на вкладке "Информация о документе"');
  GoToMainMenu;
except  
  Log.Message('HLTC73_15_6_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.15: Работа контекстного меню
  HLTC73.15.6: Проверить, что в окне атрибутов корректно работают пункты контекстного меню 
  (и в меню нет других пунктов):
    HLTC73.15.6.4: Предварительный просмотр
}
function HLTC73_15_6_4_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;     
var
  obj;  
begin                                  
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');   
  obj := OpenInDocument('ТЕКСТ'); 
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ');
  if NOT IsMenuItemChecked(GetFromMainWindow('ГЛАВНОЕ МЕНЮ'),'Документы\Информация о документе',true) then
  begin
    result := ClickByMainMenuItem('Документы\Информация о документе'); 
    if NOT result then
    begin
      Log.Error('Не могу кликнуть по пункту меню: "Документы\Информация о документе"');
      Raise('Не могу кликнуть по пункту меню: "Документы\Информация о документе"');   
    end;  
  end;  
  obj := GetFromEditor('ВКЛАДКА "ИНФОРМАЦИЯ О ДОКУМЕНТЕ"');
  result := IsExists(obj) AND obj.Visible; 
  if NOT result then Raise('Не удалось получить вкладку "ИНФОРМАЦИЯ О ДОКУМЕНТЕ"');
  obj.SetFocus;
  Sys.Keys('[Home][Apps]');
  result := ClickByPopupMenuItem(obj, 'Предварительный просмотр');  
  if NOT result then
  begin
    Log.Error('Не удалось вызвать пункт контекстного меню "Предварительный просмотр"');
    Raise('Не удалось вызвать пункт контекстного меню "Предварительный просмотр"');
  end;    
  result := IsCorrectPreview;
  if NOT result then
    Log.Error('окно Предварительного просмотра не корректно');       
  GoToMainMenu;  
except
  Log.Message('HLTC73_15_6_4_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
  HLTC73.15: Работа контекстного меню
  HLTC73.15.6: Проверить, что в окне атрибутов корректно работают пункты контекстного меню 
  (и в меню нет других пунктов):
    HLTC73.15.6.5: Копировать
    HLTC73.15.6.6: Копировать текущий атрибут
}
function HLTC73_15_6_5_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;     
  TEST_STRING = 
    '*Имя*Договор "О создании*Раздел/Тема*Основы государственно-правового*Ситуации*Валюта. СНГ*Размер документа*байт*';  
  TEST_STRING_1 = 'Имя\Договор "О создании Союзного государства" (Москва, 8 декабря 1999 г.)';  
var
  obj;   
  str;
begin                                  
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');   
  obj := OpenInDocument('ТЕКСТ'); 
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ');
  if NOT IsMenuItemChecked(GetFromMainWindow('ГЛАВНОЕ МЕНЮ'),'Документы\Информация о документе',true) then
  begin
    result := ClickByMainMenuItem('Документы\Информация о документе'); 
    if NOT result then 
    begin
      Log.Error('Не могу кликнуть по пункту меню: "Документы\Информация о документе"');   
      Raise('Не могу кликнуть по пункту меню: "Документы\Информация о документе"');   
    end;  
  end;
  obj := GetFromEditor('ВКЛАДКА "ИНФОРМАЦИЯ О ДОКУМЕНТЕ"');
  result := IsExists(obj) AND obj.Visible; 
  if NOT result then Raise('Не удалось получить вкладку "ИНФОРМАЦИЯ О ДОКУМЕНТЕ"');
  obj.SetFocus;  
  Sys.Keys('[Home][Apps]');  
  result := ClickByPopupMenuItem(obj, 'Копировать все атрибуты документа в буфер обмена');  
  if NOT result then
  begin
    Log.Error('Не удалось вызвать пункт контекстного меню "Копировать');
    Raise('Не удалось вызвать пункт контекстного меню "Копировать"');
  end;  
  str := Sys.Clipboard;
  result := StringCompare(TEST_STRING, str);
  if NOT result then 
  begin
    Log.Error('Скопированные атрибуты не равны исходным', str);
    Raise('Скопированные атрибуты не равны исходным');
  end;  
  obj.SetFocus;  
  Sys.Keys('[Home][Apps]');  
  result := ClickByPopupMenuItem(obj, 'Копировать текущий атрибут');  
  if NOT result then
  begin
    Log.Error('Не удалось вызвать пункт контекстного меню "Копировать текущий атрибут"');
    Raise('Не удалось вызвать пункт контекстного меню "Копировать текущий атрибут"');
  end;  
  str := Sys.Clipboard;
  result := StringCompare(TEST_STRING_1, str);
  if NOT result then 
    Log.Error('Скопированный атрибут не равн эталонному',str);  
  GoToMainMenu;  
except
  Log.Message('HLTC73_15_6_5_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 


{
HLTC73.15: Работа контекстного меню
  HLTC73.15.6: Проверить, что в окне атрибутов корректно работают пункты контекстного меню 
  (и в меню нет других пунктов):
    HLTC73.15.6.7: Перенос по словам
}
function HLTC73_15_6_7_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;     
  X = 0;
  Y = 43;
  DX = 100;
  DY = 36;
var
  obj;  
  y1, y2;

begin                                  
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');   
  obj := OpenInDocument('ТЕКСТ'); 
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ');
  if NOT IsMenuItemChecked(GetFromMainWindow('ГЛАВНОЕ МЕНЮ'),'Документы\Информация о документе',true) then
  begin
    result := ClickByMainMenuItem('Документы\Информация о документе'); 
    if NOT result then Raise('Не могу кликнуть по пункту меню: "Документы\Информация о документе"');   
  end;  
  obj := GetFromEditor('ВКЛАДКА "ИНФОРМАЦИЯ О ДОКУМЕНТЕ"');
  result := IsExists(obj) AND obj.Visible; 
  if NOT result then Raise('Не удалось получить вкладку "ИНФОРМАЦИЯ О ДОКУМЕНТЕ"');
  obj.SetFocus;
  //Ищется 1-й и 2-ой маркер
 { result := MoveMouseToObject(obj,'marker.bmp', 2, 0);
  if NOT result then
    Raise('Не удалось найти иконку маркера');  
  y1 := Sys.Desktop.MouseY;  }
  
  Regions.Find(obj.Rect(X, Y, DX, DY), 'marker.bmp');
  y2 := Sys.Desktop.MouseY;

  
  {Sys.Keys('[Home][Apps]');
  result := ClickByPopupMenuItem(obj, 'Перенос по словам');  
  if NOT result then
  begin
    Log.Error('Не удалось вызвать пункт контекстного меню "Перенос по словам"');
    Raise('Не удалось вызвать пункт контекстного меню "Перенос по словам"');
  end;  
  result := MoveMouseToObject(obj,'marker.bmp', 2, 0);
  if NOT result then
    Raise('Не удалось найти иконку маркера');  
                 }
  
  GoToMainMenu;  
except
  Log.Message('HLTC73_15_6_7_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 




{
HLTC73.8: Открытие документа в новом окне
	HLTC73.15.8: Проверить в окне справки, что если курсор стоит на ссылке, то в контекстное меню, 
  открывающееся по правой кнопке мыши, добавляются (относительно состава меню для обычного текста) и 
  корректно работают пункты
    HLTC73.15.8.2: «Открыть ссылку в новом окне» 
}  
function HLTC73_15_8_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
	DOC_NUM = 1055132;
  CONTEXT = 'Федеральным законом';  
  DOC_NAME = 'Федеральный закон от 2 января 2000 г. N 25-ФЗ';  
var
  obj; 
  addWnd;
  res1,res2;
  i:integer;
  w,w1,p; 
  x,y:integer;
begin
try
  result := false; 	
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('СПРАВКА');
  if NOT IsExists(obj) then Raise('Не удалось получить СПРАВКА');  
  if NOT GetCoordsSearchContext(obj, CONTEXT, x, y) then Raise ('Не удалось найти координаты искомого контекста'); 
  obj.Click(5, 5); 
  obj.ClickR (x + 10, y);
  if NOT ClickByPopupMenuItem(obj, 'Открыть ссылку в новом окне') then
  begin
    Log.Error('Не удалось вызвать пункт контекстного меню "Открыть ссылку в новом окне"');
    Raise('Не удалось вызвать пункт контекстного меню "Открыть ссылку в новом окне"');
  end;
  
  for i := 1 to 2 do
  begin
    w1 := GetMainWindow('ContainerIndex:=' + IntToStr(i));
    if not IsExists(w1) then
      Raise('Не найдено окно с ContainerIndex:=' + IntToStr(i));
    w := GetFromEditor('ТЕКСТ ДОКУМЕНТА', nil, w1);     
    if NOT IsExists(w) then
    begin    
      Log.Error('Не найден ТЕКСТ ДОКУМЕНТА в окне с ContainerIndex:=' + IntToStr(i));
      Raise;
    end;        
    if (i=1) AND (NOT StringCompare('*'+DOC_NAME+'*', GetTabCaption('ContainerIndex:=1'))) then
    begin
      Log.Error('В новом окне открылся не эталонный документ');
      Raise;
    end;
  end;
  CloseF1Shell;      
  result := true; 
except
  Log.Message('HLTC73_15_8_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.15: Работа контекстного меню
	HLTC73.15.9: Проверить в окне документа, что если курсор стоит в моём комментарии, то в контекстное меню, 
  открывающееся по правой кнопке мыши, добавляются (относительно состава меню для обычного текста) и 
  корректно работают пункты:
		HLTC73.15.9.1: Работы с таблицами:
    	HLTC73.15.9.1.1: Вставить таблицу
}
function HLTC73_15_9_1_1_Execute (var  CurrentState: OleVariant): OleVariant;
const 
	DOC_NUM = 2223371;
var
  obj;
  str;
  tableText;
begin
  try
	  tableText := 'Г—————————*—————————T—————————*—————————T—————————*—————————¬' + EndOfLine +
							   '|         *         |         *         |         *         |' + EndOfLine +
                 '+—————————*—————————+—————————*—————————+—————————*—————————+' + EndOfLine +
                 '|         *         |         *         |         *         |' + EndOfLine +
                 '+—————————*—————————+—————————*—————————+—————————*—————————+' + EndOfLine +
                 '|         *         |         *         |         *         |' + EndOfLine +
                 '+—————————*—————————+—————————*—————————+—————————*—————————+';               
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');   
  obj := OpenInDocument('ТЕКСТ'); 
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ'); 
  Sys.Keys('[Enter][Apps]');
  result := ClickByPopupMenuItem(obj,'Вставить таблицу');  
  if NOT result then
  begin
    Log.Error('Не удалось из контекстного меню вызвать пункт ВСТАВИТЬ ТАБЛИЦУ');
    Raise('Не удалось из контекстного меню вызвать пункт ВСТАВИТЬ ТАБЛИЦУ');
  end;  
  PressKeyNCount('![Right]', 9);
  str := CopyToClipboard(obj,'','Trim := true'); 
  result := StringCompare(tableText, str);
  if NOT result then
    Log.Error('Таблица не вставлена или не равна эталонной', str);
  if DeleteAllUserCommentsFromContents < 1 then
    Log.Warning('Не было удалено ни одного комментария');
  GoToMainMenu;
except
  Log.Message('HLTC73_15_9_1_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.15: Работа контекстного меню
	HLTC73.15.9: Проверить в окне документа, что если курсор стоит в комментарии 
  пользователя, то в контекстное меню, открывающееся по правой кнопке мыши, 
  добавляются (относительно состава меню для обычного текста) и корректно 
  работают пункты:
		HLTC73.15.9.1: Работы с таблицами:
    	HHLTC73.15.9.1.2: Вставить строку (при нахождении курсора в таблице)
}
function HLTC73_15_9_1_2_Execute (var  CurrentState: OleVariant): OleVariant;
const 
	DOC_NUM = 2223371;
var
  obj, sub;
  str;
  tableText;
  x, y;
begin
  try
  result := SetSettings ([(['ДОКУМЕНТ\МЕТКИ НА ПОЛЯХ', 'КОММЕНТРАРИИ ПОЛЬЗОВАТЕЛЯ [CHECKBOX]', true])]);  
  if NOT result then 
    Raise('Не удалось в настройках включить показ КОММЕНТРАРИИ ПОЛЬЗОВАТЕЛЯ [CHECKBOX');
	  tableText := 'Г—————————*—————————T—————————*—————————T—————————*—————————¬' + EndOfLine +
			           '|         *         |         *         |         *         |' + EndOfLine +
                 '+—————————*—————————+—————————*—————————+—————————*—————————+' + EndOfLine +
                 '|         *         |         *         |         *         |' + EndOfLine +
                 '+—————————*—————————+—————————*—————————+—————————*—————————+' + EndOfLine +
                 '|         *         |         *         |         *         |' + EndOfLine +
                 '+—————————*—————————+—————————*—————————+—————————*—————————+' + EndOfLine +
                 '|         *         |         *         |         *         |' + EndOfLine +
                 '+—————————*—————————+—————————*—————————+—————————*—————————+';               
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');   
  obj := OpenInDocument('ТЕКСТ'); 
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ'); 
  Sys.Keys('[Enter][Apps]');
  result := ClickByPopupMenuItem(obj,'Вставить таблицу');  
  if NOT result then
  begin
    Log.Error('Не удалось из контекстного меню вызвать пункт ВСТАВИТЬ ТАБЛИЦУ');
    Raise('Не удалось из контекстного меню вызвать пункт ВСТАВИТЬ ТАБЛИЦУ');
  end;  
  Sys.Keys('[Apps]');
  result := ClickByPopupMenuItem(obj,'Вставить строку');
  if NOT result then
  begin
    Log.Error('Не удалось из контекстного меню вызвать пункт ВСТАВИТЬ СТРОКУ');
    Raise('Не удалось из контекстного меню вызвать пункт ВСТАВИТЬ СТРОКУ');
  end;  
  str:= SelectTextComment(obj, 14, '![Right]');  
  result := StringCompare(tableText, str);
  if NOT result then
    Log.Error('Таблица не равна эталонной', str);
  if DeleteAllUserCommentsFromContents < 1 then
    Log.Warning('Не было удалено ни одного комментария');  
  GoToMainMenu;
except
  Log.Message('HLTC73_15_9_1_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;


{
HLTC73.15: Работа контекстного меню
	HLTC73.15.9: Проверить в окне документа, что если курсор стоит в комментарии 
  пользователя, то в контекстное меню, открывающееся по правой кнопке мыши, 
  добавляются (относительно состава меню для обычного текста) и корректно 
  работают пункты:
		HLTC73.15.9.1: Работы с таблицами:
			HLTC73.15.9.1.3: Удалить строку (при нахождении курсора в таблице)
}
function HLTC73_15_9_1_3_Execute (var  CurrentState: OleVariant): OleVariant;
const 
	DOC_NUM = 2223371;
var
  obj, sub;
  str;
  tableText;
  x, y;
begin
  try
  result := SetSettings ([(['ДОКУМЕНТ\МЕТКИ НА ПОЛЯХ', 'КОММЕНТРАРИИ ПОЛЬЗОВАТЕЛЯ [CHECKBOX]', true])]);  
  if NOT result then 
    Raise('Не удалось в настройках включить показ КОММЕНТРАРИИ ПОЛЬЗОВАТЕЛЯ [CHECKBOX');
	  tableText := 'Г—————————*—————————T—————————*—————————T—————————*—————————¬' + EndOfLine +
							   '|         *         |         *         |         *         |' + EndOfLine +
                 '+—————————*—————————+—————————*—————————+—————————*—————————+' + EndOfLine +
                 '|         *         |         *         |         *         |' + EndOfLine +
                 '+—————————*—————————+—————————*—————————+—————————*—————————+';               
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');   
  obj := OpenInDocument('ТЕКСТ'); 
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ'); 
  Sys.Keys('[Enter][Apps]');
  result := ClickByPopupMenuItem(obj,'Вставить таблицу');  
  if NOT result then
  begin
    Log.Error('Не удалось из контекстного меню вызвать пункт ВСТАВИТЬ ТАБЛИЦУ');
    Raise('Не удалось из контекстного меню вызвать пункт ВСТАВИТЬ ТАБЛИЦУ');
  end;  
  Sys.Keys('[Apps]');
  result := ClickByPopupMenuItem(obj,'Удалить строку');
  if NOT result then
  begin
    Log.Error('Не удалось из контекстного меню вызвать пункт УДАЛИТЬ СТРОКУ');
    Raise('Не удалось из контекстного меню вызвать пункт УДАЛИТЬ СТРОКУ');
  end;  
  str:= SelectTextComment(obj, 6, '![Right]');  
  result := StringCompare(tableText, str);
  if NOT result then
    Log.Error('Таблица не равна эталонной', str);
  if DeleteAllUserCommentsFromContents < 1 then
    Log.Warning('Не было удалено ни одного комментария');  
  GoToMainMenu;
except
  Log.Message('HLTC73_15_9_1_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.15: Работа контекстного меню
	HLTC73.15.9: Проверить в окне документа, что если курсор стоит в комментарии 
  пользователя, то в контекстное меню, открывающееся по правой кнопке мыши, 
  добавляются (относительно состава меню для обычного текста) и корректно 
  работают пункты:
		HLTC73.15.9.1: Работы с таблицами:
    	HLTC73.15.9.1.4: Вставить колонку (при нахождении курсора в таблице)
}
function HLTC73_15_9_1_4_Execute (var  CurrentState: OleVariant): OleVariant;
const 
	DOC_NUM = 2223371;
var
  obj, sub;
  str;
  tableText;
  x, y;
begin
  try
  result := SetSettings ([(['ДОКУМЕНТ\МЕТКИ НА ПОЛЯХ', 'КОММЕНТРАРИИ ПОЛЬЗОВАТЕЛЯ [CHECKBOX]', true])]);  
  if NOT result then 
    Raise('Не удалось в настройках включить показ КОММЕНТРАРИИ ПОЛЬЗОВАТЕЛЯ [CHECKBOX');
	tableText := 'Г—————————*—————————T—————————*—————————T—————————*—————————T—————————*—————————¬' + EndOfLine +
							 '|         *         |         *         |         *         |         *         |' + EndOfLine +
               '+—————————*—————————+—————————*—————————+—————————*—————————+—————————*—————————+' + EndOfLine +
               '|         *         |         *         |         *         |         *         |' + EndOfLine +
               '+—————————*—————————+—————————*—————————+—————————*—————————+—————————*—————————+' + EndOfLine +
               '|         *         |         *         |         *         |         *         |' + EndOfLine +
               '+—————————*—————————+—————————*—————————+—————————*—————————+—————————*—————————+';                   
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');   
  obj := OpenInDocument('ТЕКСТ'); 
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ'); 
  Sys.Keys('[Enter][Apps]');
  result := ClickByPopupMenuItem(obj,'Вставить таблицу');  
  if NOT result then
  begin
    Log.Error('Не удалось из контекстного меню вызвать пункт ВСТАВИТЬ ТАБЛИЦУ');
    Raise('Не удалось из контекстного меню вызвать пункт ВСТАВИТЬ ТАБЛИЦУ');
  end;  
  Sys.Keys('[Apps]');
  result := ClickByPopupMenuItem(obj,'Вставить колонку');
  if NOT result then
  begin
    Log.Error('Не удалось из контекстного меню вызвать пункт ВСТАВИТЬ КОЛОНКУ');
    Raise('Не удалось из контекстного меню вызвать пункт ВСТАВИТЬ КОЛОНКУ');
  end;  
  str:= SelectTextComment(obj, 12, '![Right]');  
  result := StringCompare(tableText, str);
  if NOT result then
    Log.Error('Таблица не равна эталонной', str);
  if DeleteAllUserCommentsFromContents < 1 then
    Log.Warning('Не было удалено ни одного комментария');  
  GoToMainMenu;
except
  Log.Message('HLTC73_15_9_1_4_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.15: Работа контекстного меню
	HLTC73.15.9: Проверить в окне документа, что если курсор стоит в комментарии 
  пользователя, то в контекстное меню, открывающееся по правой кнопке мыши, 
  добавляются (относительно состава меню для обычного текста) и корректно 
  работают пункты:
		HLTC73.15.9.1: Работы с таблицами:
			HLTC73.15.9.1.5: Удалить колонку (при нахождении курсора в таблице)      
}
function HLTC73_15_9_1_5_Execute (var  CurrentState: OleVariant): OleVariant;
const 
	DOC_NUM = 2223371;
var
  obj, sub;
  str;
  tableText;
  x, y;
begin
  try
  result := SetSettings ([(['ДОКУМЕНТ\МЕТКИ НА ПОЛЯХ', 'КОММЕНТРАРИИ ПОЛЬЗОВАТЕЛЯ [CHECKBOX]', true])]);  
  if NOT result then 
    Raise('Не удалось в настройках включить показ КОММЕНТРАРИИ ПОЛЬЗОВАТЕЛЯ [CHECKBOX');
	 tableText :='Г—————————*—————————T—————————*—————————¬' + EndOfLine +
							 '|         *         |         *         |' + EndOfLine +
               '+—————————*—————————+—————————*—————————+' + EndOfLine +
               '|         *         |         *         |' + EndOfLine +
               '+—————————*—————————+—————————*—————————+' + EndOfLine +
               '|         *         |         *         |' + EndOfLine +
               '+—————————*—————————+—————————*—————————+';                   
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');   
  obj := OpenInDocument('ТЕКСТ'); 
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ'); 
  Sys.Keys('[Enter][Apps]');
  result := ClickByPopupMenuItem(obj,'Вставить таблицу');
  if NOT result then
  begin
    Log.Error('Не удалось из контекстного меню вызвать пункт ВСТАВИТЬ ТАЛИЦУ');
    Raise('Не удалось из контекстного меню вызвать пункт ВСТАВИТЬ ТАЛИЦУ');
  end;  
  Sys.Keys('[Apps]');
  result := ClickByPopupMenuItem(obj,'Удалить колонку');
  if NOT result then
  begin
    Log.Error('Не удалось из контекстного меню вызвать пункт УДАЛИТЬ КОЛОНКУ');
    Raise('Не удалось из контекстного меню вызвать пункт УДАЛИТЬ КОЛОНКУ');
  end;  
  str:= SelectTextComment(obj, 6, '![Right]');
  result := StringCompare(tableText, str);
  if NOT result then
    Log.Error('Таблица не равна эталонной', str);
  if DeleteAllUserCommentsFromContents < 1 then
    Log.Warning('Не было удалено ни одного комментария');  
  GoToMainMenu;
except
  Log.Message('HLTC73_15_9_1_5_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.15: Работа контекстного меню
	HLTC73.15.9: Проверить в окне документа, что если курсор стоит в комментарии 
  пользователя, то в контекстное меню, открывающееся по правой кнопке мыши, 
  добавляются (относительно состава меню для обычного текста) и корректно 
  работают пункты:
		HLTC73.15.9.2: Формативание шрифта
			HLTC73.15.9.2.1: Жирный
      HLTC73.15.9.2.2: Курсив
      HLTC73.15.9.2.3: Подчеркнутый
      HLTC73.15.9.2.4: Перечеркнутый
}
function HLTC73_15_9_2_Execute (var  CurrentState: OleVariant): OleVariant;
const 
	DOC_NUM = 10003000;
  TEST_WORD = 'Проверки работы контекстного меню';
var
	obj;
  str;
  i;
  namesOper;
  picture;
  x, y;
  settings;
begin            
try
  SetDefaultSettingsInStyleEditor;
  //Так как цвет комментария может изменяться от настроек к настройкам, перед скриптом выставляем его принудительно
  settings := [    
    (['ТЕКСТ\ТЕКСТ (СПРАВКА)\КОММЕНТАРИЙ\КОММЕНТАРИЙ ПОЛЬЗОВАТЕЛЯ', 'КОМБОБОКС "ЦВЕТ"', clNavy])    
  ];
  if NOT SetSettingsInStyleEditor( settings ) then 
    Raise('Не удалось установить настройки в Редакторе стилей!');  
  namesOper := ['Жирный', 'Подчеркнутый', 'Перечеркнутый', 'Курсив'];	
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');   
  obj := OpenInDocument('ТЕКСТ'); 
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ');
  if NOT InsertComment(obj, TEST_WORD) then Raise('Не удалось установить комментарий'); 
  Sys.Keys('![Home]');
  //Проверяем, когда все атрибуты (Жирный, курсив,....) выставлены
  for i :=  VarArrayLowBound(namesOper, 1) to VarArrayHighBound(namesOper, 1) do
  begin
    Sys.Keys('[Apps]');
    if NOT IsMenuItemChecked(obj.QCPopupMenu,namesOper[i]) then
      ClickByPopupMenuItem(obj, namesOper[i]);
  end;
  //Если вдруг не закрылось попап меню - прибиваем его
  ClosePopUpMenu(obj);	
  Sys.Keys('[Home]');
  picture := RenderTextToPicture(TEST_WORD, 'Arial', 13, 
    'textColor:=clNavy;isBold:=true; isItalic:=true; isUnderline:=true; isStrikeout:=true'); 
  if NOT FindPicture(
          obj, 
          picture,
          x, y
  ) then
  begin
    Log.Picture(picture, 'Картинка отрендереного шрифта');
    Log.Picture(obj, 'Картинка объекта, на котором ищется шрифт');
    
    Log.Error('Не удалось в Комментарии найти фрагмент текста с ЭТАЛОННОЙ ГАРНИТУРОЙ Шрифта!');
    Raise('Не удалось в Комментарии найти фрагмент текста с ЭТАЛОННОЙ ГАРНИТУРОЙ Шрифта!');    
  end;
  //Проверяем, когда все атрибуты (Жирный, курсив,....) сняты
  obj.SetFocus;
  Sys.Keys('[End]![Home]');
  for i :=  VarArrayLowBound(namesOper, 1) to VarArrayHighBound(namesOper, 1) do
  begin
    Sys.Keys('[Apps]');
    if IsMenuItemChecked(obj.QCPopupMenu,namesOper[i]) then
      ClickByPopupMenuItem(obj, namesOper[i]);
  end;  
  ClosePopUpMenu(obj);                             
  Sys.Keys('[Home]');	
  picture := RenderTextToPicture(TEST_WORD, 'Arial', 13, 
    'textColor:=clNavy;isBold:=false; isItalic:=false; isUnderline:=false; isStrikeout:=false'); 
  if NOT FindPicture(
          obj, 
          picture,
          x, y
  ) then
  begin
    Log.Picture(picture, 'Картинка отрендереного шрифта');
    Log.Picture(obj, 'Картинка объекта, на котором ищется шрифт');
    
    Log.Error('Не удалось в Комментарии найти фрагмент текста с ЭТАЛОННОЙ ГАРНИТУРОЙ Шрифта!');
    Raise('Не удалось в Комментарии найти фрагмент текста с ЭТАЛОННОЙ ГАРНИТУРОЙ Шрифта!');    
  end;
    
  if DeleteAllUserCommentsFromContents < 1 then
    Log.Warning('Не было удалено ни одного комментария');
  GoToMainMenu;
  SetDefaultSettingsInStyleEditor;
  result := true;
except
  DeleteAllUserCommentsFromContents;
  SetDefaultSettingsInStyleEditor;
  Log.Message('HLTC73_15_9_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.15: Работа контекстного меню
	HLTC73.15.10: Проверить в окне справки, что если курсор стоит в комментарии пользователя, то в 
  контекстное меню, открывающееся по правой кнопке мыши, добавляются (относительно состава меню для 
  обычного текста) и корректно работают пункты:
		HLTC73.15.10.1: Работы с таблицами:
    	HLTC73.15.10.1.1: Вставить таблицу
}
function HLTC73_15_10_1_1_Execute (var  CurrentState: OleVariant): OleVariant;
const 
	DOC_NUM = 1055132;
var
  obj;
  str;
  tableText;
begin
try
  result := SetSettings ([(['ДОКУМЕНТ\МЕТКИ НА ПОЛЯХ', 'КОММЕНТРАРИИ ПОЛЬЗОВАТЕЛЯ [CHECKBOX]', true])]); 
  if NOT result then   
    Raise('Не удалось в настройках включить показ КОММЕНТРАРИИ ПОЛЬЗОВАТЕЛЯ [CHECKBOX');
      
  tableText := 'Г—————————*—————————T—————————*—————————T—————————*—————————¬' + EndOfLine +
							 '|         *         |         *         |         *         |' + EndOfLine +
               '+—————————*—————————+—————————*—————————+—————————*—————————+' + EndOfLine +
               '|         *         |         *         |         *         |' + EndOfLine +
               '+—————————*—————————+—————————*—————————+—————————*—————————+' + EndOfLine +
               '|         *         |         *         |         *         |' + EndOfLine +
               '+—————————*—————————+—————————*—————————+—————————*—————————+';              
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');   
  obj := OpenInDocument('СПРАВКА'); 
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить СПРАВКА'); 
  obj.SetFocus;
  Sys.Keys('[Down][Enter][Apps]');
  result := ClickByPopupMenuItem(obj,'Вставить таблицу');  
  if NOT result then
  begin
    Log.Error('Не удалось из контекстного меню вызвать пункт ВСТАВИТЬ ТАБЛИЦУ');
    Raise('Не удалось из контекстного меню вызвать пункт ВСТАВИТЬ ТАБЛИЦУ');
  end;
  Sys.Keys('[Up]');  
  PressKeyNCount('![Down]', 4);
  str := CopyToClipboard(obj,'','Trim := true'); 
  result := StringCompare(tableText, str);
  if NOT result then
    Log.Error('Таблица не вставлена или не равна эталонной', str);
  Sys.Keys('[Del]');
  GoToMainMenu;
except
  Log.Message('HLTC73_15_10_1_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.15: Работа контекстного меню
	HLTC73.15.10: Проверить в окне справки, что если курсор стоит в комментарии пользователя, то в 
  контекстное меню, открывающееся по правой кнопке мыши, добавляются (относительно состава меню для 
  обычного текста) и корректно работают пункты:
		HLTC73.15.10.1: Работы с таблицами:
    	HHLTC73.15.10.1.2: Вставить строку (при нахождении курсора в таблице)
}
function HLTC73_15_10_1_2_Execute (var  CurrentState: OleVariant): OleVariant;
const 
	DOC_NUM = 1055132;
var
  obj, sub;
  str;
  tableText;
  x, y;
begin
  try
  result := SetSettings ([(['ДОКУМЕНТ\МЕТКИ НА ПОЛЯХ', 'КОММЕНТРАРИИ ПОЛЬЗОВАТЕЛЯ [CHECKBOX]', true])]);  
  if NOT result then 
    Raise('Не удалось в настройках включить показ КОММЕНТРАРИИ ПОЛЬЗОВАТЕЛЯ [CHECKBOX');
   
  
  tableText := 'Г—————————*—————————T—————————*—————————T—————————*—————————¬' + EndOfLine +
							 '|         *         |         *         |         *         |' + EndOfLine +
               '+—————————*—————————+—————————*—————————+—————————*—————————+' + EndOfLine +
               '|         *         |         *         |         *         |' + EndOfLine +
               '+—————————*—————————+—————————*—————————+—————————*—————————+' + EndOfLine +
               '|         *         |         *         |         *         |' + EndOfLine +
               '+—————————*—————————+—————————*—————————+—————————*—————————+' + EndOfLine +
               '|         *         |         *         |         *         |' + EndOfLine +
               '+—————————*—————————+—————————*—————————+—————————*—————————+';  
                           
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');   
  obj := OpenInDocument('СПРАВКА'); 
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить СПРАВКА'); 
  obj.SetFocus;
  Sys.Keys('[Down][Enter][Apps]');
  result := ClickByPopupMenuItem(obj,'Вставить таблицу');  
  if NOT result then
  begin
    Log.Error('Не удалось из контекстного меню вызвать пункт ВСТАВИТЬ ТАБЛИЦУ');
    Raise('Не удалось из контекстного меню вызвать пункт ВСТАВИТЬ ТАБЛИЦУ');
  end;  
  Sys.Keys('[Apps]');
  result := ClickByPopupMenuItem(obj,'Вставить строку');
  if NOT result then
  begin
    Log.Error('Не удалось из контекстного меню вызвать пункт ВСТАВИТЬ СТРОКУ');
    Raise('Не удалось из контекстного меню вызвать пункт ВСТАВИТЬ СТРОКУ');
  end;
  str:= SelectTextComment(obj, 5);
  result := StringCompare(tableText, str);
  if NOT result then
    Log.Error('Таблица не равна эталонной', str);
  Sys.Keys('[Del]');       
  GoToMainMenu;
except
  Log.Message('HLTC73_15_10_1_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;


{
HLTC73.15: Работа контекстного меню
	HLTC73.15.10: Проверить в окне справки, что если курсор стоит в комментарии пользователя, то в 
  контекстное меню, открывающееся по правой кнопке мыши, добавляются (относительно состава меню для 
  обычного текста) и корректно работают пункты:
		HLTC73.15.10.1: Работы с таблицами:
			HLTC73.15.10.1.3: Удалить строку (при нахождении курсора в таблице)
}
function HLTC73_15_10_1_3_Execute (var  CurrentState: OleVariant): OleVariant;
const 
	DOC_NUM = 1055132;
var
  obj, sub;
  str;
  tableText;
  x, y;
begin
  try
  result := SetSettings ([(['ДОКУМЕНТ\МЕТКИ НА ПОЛЯХ', 'КОММЕНТРАРИИ ПОЛЬЗОВАТЕЛЯ [CHECKBOX]', true])]);  
  if NOT result then 
    Raise('Не удалось в настройках включить показ КОММЕНТРАРИИ ПОЛЬЗОВАТЕЛЯ [CHECKBOX');
    
  tableText := 'Г—————————*—————————T—————————*—————————T—————————*—————————¬' + EndOfLine +
							 '|         *         |         *         |         *         |' + EndOfLine +
               '+—————————*—————————+—————————*—————————+—————————*—————————+' + EndOfLine +
               '|         *         |         *         |         *         |' + EndOfLine +
               '+—————————*—————————+—————————*—————————+—————————*—————————+';              
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');   
  obj := OpenInDocument('СПРАВКА'); 
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить СПРАВКА'); 
  obj.SetFocus;
  Sys.Keys('[Down][Enter][Apps]');
  result := ClickByPopupMenuItem(obj,'Вставить таблицу');  
  if NOT result then
  begin
    Log.Error('Не удалось из контекстного меню вызвать пункт ВСТАВИТЬ ТАБЛИЦУ');
    Raise('Не удалось из контекстного меню вызвать пункт ВСТАВИТЬ ТАБЛИЦУ');
  end;  
  Sys.Keys('[Apps]');
  result := ClickByPopupMenuItem(obj,'Удалить строку');
  if NOT result then
  begin
    Log.Error('Не удалось из контекстного меню вызвать пункт УДАЛИТЬ СТРОКУ');
    Raise('Не удалось из контекстного меню вызвать пункт УДАЛИТЬ СТРОКУ');
  end;  
  str:= SelectTextComment(obj, 4); 
  result := StringCompare(tableText, str);
  if NOT result then
    Log.Error('Таблица не равна эталонной', str);
  Sys.Keys('[Del]'); 
except
  Log.Message('HLTC73_15_10_1_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.15: Работа контекстного меню
  HLTC73.15.10: Проверить в окне справки, что если курсор стоит в комментарии пользователя, то в 
  контекстное меню, открывающееся по правой кнопке мыши, добавляются (относительно состава меню для 
  обычного текста) и корректно работают пункты:
		HLTC73.15.10.1: Работы с таблицами:
    	HLTC73.15.10.1.4: Вставить колонку (при нахождении курсора в таблице)
}
function HLTC73_15_10_1_4_Execute (var  CurrentState: OleVariant): OleVariant;
const 
	DOC_NUM = 1055132;
var
  obj, sub;
  str;
  tableText;
  x, y;
begin
  try
  result := SetSettings ([(['ДОКУМЕНТ\МЕТКИ НА ПОЛЯХ', 'КОММЕНТРАРИИ ПОЛЬЗОВАТЕЛЯ [CHECKBOX]', true])]); 
  if NOT result then   
    Raise('Не удалось в настройках включить показ КОММЕНТРАРИИ ПОЛЬЗОВАТЕЛЯ [CHECKBOX');
  
  tableText := 'Г—————————*—————————T—————————*—————————T—————————*—————————T—————————*—————————¬' + EndOfLine +
							 '|         *         |         *         |         *         |         *         |' + EndOfLine +
               '+—————————*—————————+—————————*—————————+—————————*—————————+—————————*—————————+' + EndOfLine +
               '|         *         |         *         |         *         |         *         |' + EndOfLine +
               '+—————————*—————————+—————————*—————————+—————————*—————————+—————————*—————————+' + EndOfLine +
               '|         *         |         *         |         *         |         *         |' + EndOfLine +
               '+—————————*—————————+—————————*—————————+—————————*—————————+—————————*—————————+';                              
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');   
  obj := OpenInDocument('СПРАВКА'); 
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить СПРАВКА'); 
  obj.SetFocus;
  Sys.Keys('[Down][Enter][Apps]');
  result := ClickByPopupMenuItem(obj,'Вставить таблицу');  
  if NOT result then
  begin
    Log.Error('Не удалось из контекстного меню вызвать пункт ВСТАВИТЬ ТАБЛИЦУ');
    Raise('Не удалось из контекстного меню вызвать пункт ВСТАВИТЬ ТАБЛИЦУ');
  end;  
  Sys.Keys('[Apps]');
  result := ClickByPopupMenuItem(obj,'Вставить колонку');
  if NOT result then
  begin
    Log.Error('Не удалось из контекстного меню вызвать пункт ВСТАВИТЬ КОЛОНКУ');
    Raise('Не удалось из контекстного меню вызвать пункт ВСТАВИТЬ КОЛОНКУ');
  end;  
  str:= SelectTextComment(obj, 5);
  str := CopyToClipboard(obj,'','Trim := true'); 
  result := StringCompare(tableText, str);
  if NOT result then
    Log.Error('Таблица не равна эталонной', str);
  Sys.Keys('[Del]');     
  GoToMainMenu;
except
  Log.Message('HLTC73_15_10_1_4_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.15: Работа контекстного меню
	HLTC73.15.10: Проверить в окне справки, что если курсор стоит в комментарии пользователя, то в 
  контекстное меню, открывающееся по правой кнопке мыши, добавляются (относительно состава меню для 
  обычного текста) и корректно работают пункты:
		HLTC73.15.10.1: Работы с таблицами:
			HLTC73.15.10.1.5: Удалить колонку (при нахождении курсора в таблице)      
}
function HLTC73_15_10_1_5_Execute (var  CurrentState: OleVariant): OleVariant;
const 
	DOC_NUM = 1055132;
var
  obj, sub;
  str;
  tableText;
  x, y;
begin
  try
  result := SetSettings ([(['ДОКУМЕНТ\МЕТКИ НА ПОЛЯХ', 'КОММЕНТРАРИИ ПОЛЬЗОВАТЕЛЯ [CHECKBOX]', true])]); 
  if NOT result then   
    Raise('Не удалось в настройках включить показ КОММЕНТРАРИИ ПОЛЬЗОВАТЕЛЯ [CHECKBOX');
    
  
  tableText := 'Г—————————*—————————T—————————*—————————¬' + EndOfLine +
							 '|         *         |         *         |' + EndOfLine +
               '+—————————*—————————+—————————*—————————+' + EndOfLine +
               '|         *         |         *         |' + EndOfLine +
               '+—————————*—————————+—————————*—————————+' + EndOfLine +
               '|         *         |         *         |' + EndOfLine +
               '+—————————*—————————+—————————*—————————+';                             
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');   
  obj := OpenInDocument('СПРАВКА'); 
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить СПРАВКА');
  obj.SetFocus;
  Sys.Keys('[Down][Enter][Apps]');
  result := ClickByPopupMenuItem(obj,'Вставить таблицу');
  if NOT result then
  begin
    Log.Error('Не удалось из контекстного меню вызвать пункт ВСТАВИТЬ ТАЛИЦУ');
    Raise('Не удалось из контекстного меню вызвать пункт ВСТАВИТЬ ТАЛИЦУ');
  end;  
  Sys.Keys('[Apps]');
  result := ClickByPopupMenuItem(obj,'Удалить колонку');
  if NOT result then
  begin
    Log.Error('Не удалось из контекстного меню вызвать пункт УДАЛИТЬ КОЛОНКУ');
    Raise('Не удалось из контекстного меню вызвать пункт УДАЛИТЬ КОЛОНКУ');
  end;  
  str:= SelectTextComment(obj, 4); 
  result := StringCompare(tableText, str);
  if NOT result then
    Log.Error('Таблица не равна эталонной', str);
  Sys.Keys('[Del]'); 
  GoToMainMenu;
except
  Log.Message('HLTC73_15_10_1_5_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.15: Работа контекстного меню
  HLTC73.15.10: Проверить в окне справки, что если курсор стоит в комментарии пользователя, то в 
  контекстное меню, открывающееся по правой кнопке мыши, добавляются (относительно состава меню для 
  обычного текста) и корректно работают пункты:
		HLTC73.15.10.2: Формативание шрифта
			HLTC73.15.10.2.1: Жирный
      HLTC73.15.10.2.2: Курсив
      HLTC73.15.10.2.3: Подчеркнутый
      HLTC73.15.10.2.4: Перечеркнутый
}
function HLTC73_15_10_2_Execute (var  CurrentState: OleVariant): OleVariant;
const 
	DOC_NUM = 1055132;
  TEST_WORD = 'Для проверки работы контекстного меню';
var
	obj;
  str;
  i;
  namesOper;
  picture;
  x, y;
  settings;
begin            
try
  SetDefaultSettingsInStyleEditor;
  //Так как цвет комментария может изменяться от настроек к настройкам, перед скриптом выставляем его принудительно
  settings := [    
    (['ТЕКСТ\ТЕКСТ (СПРАВКА)\КОММЕНТАРИЙ\КОММЕНТАРИЙ ПОЛЬЗОВАТЕЛЯ', 'КОМБОБОКС "ЦВЕТ"', clNavy])    
  ];
  if NOT SetSettingsInStyleEditor( settings ) then 
    Raise('Не удалось установить настройки в Редакторе стилей!');
  namesOper := ['Жирный', 'Подчеркнутый', 'Перечеркнутый', 'Курсив'];	
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');   
  obj := OpenInDocument('СПРАВКА'); 
  if NOT IsExists(obj) then Raise('Не удалось получить СПРАВКА');
  if NOT InsertComment(obj, TEST_WORD) then Raise('Не удалось установить комментарий'); 
  Sys.Keys('![Home]');
  //Проверяем, когда все атрибуты (Жирный, курсив,....) выставлены
  for i :=  VarArrayLowBound(namesOper, 1) to VarArrayHighBound(namesOper, 1) do
  begin
    Sys.Keys('[Apps]');
    if NOT IsMenuItemChecked(obj.QCPopupMenu,namesOper[i]) then
      ClickByPopupMenuItem(obj, namesOper[i]);
  end;
  //Если вдруг не закрылось попап меню - прибиваем его
  ClosePopUpMenu(obj);	
  Sys.Keys('[Home]');
  picture := RenderTextToPicture(TEST_WORD, 'Arial', 13, 
    'textColor:=clNavy;isBold:=true; isItalic:=true; isUnderline:=true; isStrikeout:=true'); 
  if NOT FindPicture(
          obj, 
          picture,
          x, y
  ) then
  begin
    Log.Picture(picture, 'Картинка отрендереного шрифта');
    Log.Picture(obj, 'Картинка объекта, на котором ищется шрифт');
    
    Log.Error('Не удалось в Комментарии найти фрагмент текста с ЭТАЛОННОЙ ГАРНИТУРОЙ Шрифта!');
    Raise('Не удалось в Комментарии найти фрагмент текста с ЭТАЛОННОЙ ГАРНИТУРОЙ Шрифта!');    
  end;
  //Проверяем, когда все атрибуты (Жирный, курсив,....) сняты
  obj.SetFocus;
  Sys.Keys('[End]![Home]');
  for i :=  VarArrayLowBound(namesOper, 1) to VarArrayHighBound(namesOper, 1) do
  begin
    Sys.Keys('[Apps]');
    if IsMenuItemChecked(obj.QCPopupMenu,namesOper[i]) then
      ClickByPopupMenuItem(obj, namesOper[i]);
  end;  
  ClosePopUpMenu(obj);
  Sys.Keys('[Home]');	
  picture := RenderTextToPicture(TEST_WORD, 'Arial', 13, 
    'textColor:=clNavy;isBold:=false; isItalic:=false; isUnderline:=false; isStrikeout:=false'); 
  if NOT FindPicture(
          obj, 
          picture,
          x, y
  ) then
  begin
    Log.Picture(picture, 'Картинка отрендереного шрифта');
    Log.Picture(obj, 'Картинка объекта, на котором ищется шрифт');
    
    Log.Error('Не удалось в Комментарии найти фрагмент текста с ЭТАЛОННОЙ ГАРНИТУРОЙ Шрифта!');
    Raise('Не удалось в Комментарии найти фрагмент текста с ЭТАЛОННОЙ ГАРНИТУРОЙ Шрифта!');    
  end;     
  Sys.Keys('[Home]![End][Del]');//Удаляем комментарий       
  if DeleteAllUserCommentsFromContents < 1 then
    Log.Warning('Не было удалено ни одного комментария');
  GoToMainMenu;
  SetDefaultSettingsInStyleEditor;
  result := true;
except
  DeleteAllUserCommentsFromContents;
  SetDefaultSettingsInStyleEditor;
  Log.Message('HLTC73_15_10_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;
 
{
HLTC73.16: Работа командного меню
  HLTC73.16.1: Проверить, что в документе корректно работают пункты меню «Документы» (и нет других пунктов) 
}
function HLTC73_16_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;  
  COUNT_ITEMS = 17;    
   
var
  obj;
  mainWnd;  
  item;
  count;
  countSeparators;
  i;
begin                                  
try  
  countSeparators := 0;  
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');   
  obj := OpenInDocument('ТЕКСТ');
  if NOT IsExists(obj) then 
    Raise('Не удалось получить ТЕКСТ');  
  if NOT  ClickByMainMenuItem('Документы') then
    Raise('Не удалось вызвать пункт главного меню "Документы"');
  mainWnd := GetMainWindow;
  if NOT IsExists(mainWnd) then Raise('Не удалось получить mainWnd');     
  count: = mainWnd.Menu.Items.Items[4].Count;
  //Отбрасываем разделители
  for i:= 0 to count-1 do
    if (mainWnd.Menu.Items.Items[4].Items[i].name='') then inc(countSeparators);
  count := count - countSeparators;      
  result := COUNT_ITEMS = count;  
  if NOT result then
    Log.Error('Количество элементов пункта главного меню "Документы" не равно эталонному: '+ IntToStr(count) );
  GoToMainMenu;
except  
  Log.Message('HLTC73_16_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.16: Работа командного меню
  HLTC73.16.1: Проверить, что в документе корректно работают пункты меню «Документы» (и нет других пунктов) 
    HLTC73.16.1.5: Справка к документу
}
function HLTC73_16_1_5_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;  
var
  obj;  
begin                                  
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');   
  obj := OpenInDocument('ТЕКСТ'); 
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ'); 
  result := ClickByMainMenuItem('Документы\Справка к документу');   
  if NOT result then
  begin
    Log.Error('Не могу кликнуть по пункту меню: "Документы\Справка к документу"');
    Raise('Не могу кликнуть по пункту меню: "Документы\Справка к документу"');
  end; 
  obj := GetFromEditor('ВКЛАДКА "СПРАВКА"');
  result := IsExists(obj) AND obj.Visible AND (GetFromEditor('ЗАКЛАДКИ').ActivePage.Caption = 'Справка');
  if NOT result then  
    Log.Error('ВКЛАДКА "СПРАВКА" не получена, либо не равна эталонной'); 
  GoToMainMenu;
except  
  Log.Message('HLTC73_16_1_5_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.16: Работа командного меню
  HLTC73.16.1: Проверить, что в документе корректно работают пункты меню «Документы» (и нет других пунктов) 
    HLTC73.16.1.6: «Аннотация» (между «Справка к документу» и «ССЫЛКИ НА ДОКУМЕНТ» (документы, у которых есть
    аннотации: № 12038456; 12038678; 1677887; 6070001; 12038599; 485203; 6070024; 12038602;12038613; 
    12038614; 87813; 12038600; 2223371)
}
function HLTC73_16_1_6_Execute (var  CurrentState: OleVariant): OleVariant;
const
  TEST_WORD = '*Аннотация к топику 2001*Это просто текст аннотации к топику 2001. Тут есть ссылка и на сам топик.*';
var
  obj;
  str;
  docNum;
  i;
begin                                  
try     
  docNum := 
    [2001, 12038456, 12038678, 1677887, 6070001, {12038599,} 485203, 6070024, 12038602, 
    12038613, 12038614, 87813, 12038600, 2223371]; 
 	for i:= VarArrayLowBound(docNum, 1) to VarArrayHighBound(docNum, 1) do
  begin
    result := OpenDocByNumber(docNum[i]);
    if NOT result then Raise('Не удалось открыть документ по Alt+N');   
    obj := OpenInDocument('ТЕКСТ'); 
    result := IsExists(obj);
    if NOT result then Raise('Не удалось получить ТЕКСТ'); 
    result := ClickByMainMenuItem('Документы\Аннотация');   
    if NOT result then
    begin
      Log.Error('Не могу кликнуть по пункту меню: "Документы\Аннотация"', IntToStr(i));
      Raise('Не могу кликнуть по пункту меню: "Документы\Аннотация"');
    end; 
    obj := GetFromEditor('ВКЛАДКА "АННОТАЦИЯ"');
    obj.SetFocus;
    if i = VarArrayLowBound(docNum, 1) then//Если документ 2001, тогда проверяем и соответствие текста Аннотации к оригиналу
    begin
      str := CopyToClipBoard(obj ,'ALL', 'Trim := true'); 
      result := 
        IsExists(obj) AND obj.Visible AND (GetFromEditor('ЗАКЛАДКИ').ActivePage.Caption = 'Аннотация') AND
        StringCompare(TEST_WORD, str);
    end    
    else   //Иначе(если документ не 2001), то просто проверяем что вкладка  Аннотация существует и активна 
      result := IsExists(obj) AND obj.Visible AND (GetFromEditor('ЗАКЛАДКИ').ActivePage.Caption = 'Аннотация');
    if NOT result then  
    begin    
      Log.Error('ВКЛАДКА "АННОТАЦИЯ" не получена, либо не равна эталонной', IntToStr(i));
      Raise('ВКЛАДКА "АННОТАЦИЯ" не получена, либо не равна эталонной');
    end;
  end;  
  GoToMainMenu;
except  
  Log.Message('HLTC73_16_1_6_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.16: Работа командного меню
  HLTC73.16.1: Проверить, что в документе корректно работают пункты меню «Документы» (и нет других пунктов) 
    HLTC73.16.1.7: ССЫЛКИ НА ДОКУМЕНТ
}
function HLTC73_16_1_7_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;  
var
  obj;  
  respondentsList: array [0..26] of string;
begin                                  
try
  respondentsList[0] := 'Постановление Правительства РФ от 28 ноября 2000 г. N 900 "О представлении Президенту Российской Федерации предложения о подписании Соглашения между Российской Федерацией и Республикой Белоруссия о введении единой денежной единицы и формировании единого эмиссионного центра Союзного государства"';
  respondentsList[1] := 'Соглашение между Российской Федерацией и Республикой Белоруссия об урегулировании вопросов, связанных с прекращением деятельности органов Союза Беларуси и России (Москва, 14 ноября 2000 г.)';
  respondentsList[2] := 'Соглашение между Российской Федерацией и Республикой Белоруссия о введении единой денежной единицы и формировании единого эмиссионного центра Союзного государства (Минск, 30 ноября 2000 г.)';
  respondentsList[3] := 'Постановление Правительства РФ от 11 ноября 2000 г. N 851 "О подписании Соглашения между Российской Федерацией и Республикой Белоруссия об урегулировании вопросов, связанных с прекращением деятельности органов Союза Беларуси и России"';
	respondentsList[4] := 'Федеральный закон от 2 января 2000 г. N 25-ФЗ "О ратификации Договора о создании Союзного государства"';
	respondentsList[5] := 'Постановление Правительства РФ от 4 декабря 2000 г. N 923 "О подписании Соглашения между Правительством Российской Федерации и Правительством Республики Белоруссия об условиях учреждения и деятельности Российско-Белорусского университета"';
	respondentsList[6] := 'Соглашение между Правительством Республики Беларусь, Национальным банком Республики Беларусь и Правительством Российской Федерации, Центральным банком Российской Федерации о мерах по созданию условий по введению единой денежной единицы (г. Минск, 30 ноября 2000 г.)';
	respondentsList[7] := 'Распоряжение Правительства РФ от 1 сентября 2000 г. N 1237-р О подписании Соглашения между администрацией Челябинской области РФ и Правительством Республики Белоруссия о торгово-экономическом, научно-техническом и культурном сотрудничестве';
	respondentsList[8] := 'Соглашение между Правительством Российской Федерации и Правительством Республики Беларусь о порядке взаимодействия при осуществлении экспорта продукции военного назначения в третьи страны (Москва, 6 июля 2000 г.)';
	respondentsList[9] := 'Постановление Правительства РФ от 3 января 2002 г. N 2 "О представлении Президенту Российской Федерации предложения о подписании Соглашения между Российской Федерацией и Республикой Белоруссия о регулировании вопросов собственности Союзного государства"';
	respondentsList[10] := 'Постановление Правительства РФ от 17 декабря 2001 г. N 869 "О заключении Соглашения между Правительством Российской Федерации и Правительством Республики Белоруссия о регулировании тарифов на услуги связи"';
	respondentsList[11] := 'Постановление Правительства РФ от 5 июля 2001 г. N 496 "О подписании Соглашения между Правительством Российской Федерации и Правительством Республики Белоруссия о принципах взимания косвенных налогов при реализации товаров (работ, услуг) хозяйствующими субъектами на территории Союзного государства"';
	respondentsList[12] := 'Постановление Правительства РФ от 3 мая 2001 г. N 343 "О заключении Соглашения между Правительством Российской Федерации и Правительством Республики Белоруссия о сотрудничестве в области охраны и рационального использования трансграничных водных объектов"';
	respondentsList[13] := 'Постановление Правительства РФ от 15 февраля 2001 г. N 113 "О подписании Соглашения между Правительством Российской Федерации и Правительством Республики Белоруссия о завершении унификации и создании единой системы тарифного и нетарифного регулирования в Союзном государстве"';
	respondentsList[14] := 'Постановление Правительства РФ от 11 января 2001 г. N 24 "О подписании Соглашения между Правительством Российской Федерации и Правительством Республики Белоруссия о создании межгосударственной финансово-промышленной группы "Аэрокосмическое оборудование"';	
	respondentsList[15] := 'Постановление Правительства РФ от 15 апреля 2000 г. N 342 "О порядке выдвижения кандидатов на должности членов Постоянного комитета Союзного государства"';
	respondentsList[16] := 'Постановление Правительства РФ от 24 марта 2000 г. N 254 "О внесении изменения в постановление Правительства Российской Федерации от 23 июня 1995 г. N 583"';
	respondentsList[17] := 'Постановление Правительства РФ от 8 декабря 1999 г. N 1355 "Об одобрении и представлении Президенту Российской Федерации для внесения на ратификацию Договора о создании Союзного государства"';
	RespondentsList[18] := 'Постановление Правительства РФ от 25 ноября 1999 г. N 1299 "Об одобрении и представлении Президенту Российской Федерации предложения о подписании Договора о создании Союзного государства и Программы действий Российской Федерации и Республики Белоруссия по реализации положений Договора о создании Союзного государства"';
	respondentsList[19] := 'Приказ ГТК РФ от 27 октября 2000 г. N 968 "О транзите товаров, происходящих из третьих стран и вывозимых с таможенной территории Российской Федерации через российско-белорусский участок государственной границы Российской Федерации"';
	respondentsList[20] := 'Постановление Госстандарта Республики Беларусь и Госстандарта РФ от 17 марта 2000 г. N 4/15 О проведении единой политики в области стандартизации, метрологии и оценки соответствия в рамках Программы действий Республики Беларусь и Российской Федерации по реализации положений Договора о создании Союзного государства';
	respondentsList[21] := 'Письмо ГТК РФ от 19 июля 2000 г. N 14-58/20076 "О копии постановления Президиума Верховного Суда Российской Федерации от 04.07.2000 по делу N 53пв-2000"';
	respondentsList[22] := 'Информационное письмо Генеральной прокуратуры РФ от 6 октября 2000 г. N 8-15-00 "О применении законодательства, регулирующего порядок таможенного оформления транспортных средств, выпущенных для свободного обращения на территории Республики Беларусь и впоследствии перемещаемых на территорию Российской Федерации"';
	respondentsList[23] := 'Решение Верховного Суда РФ от 7 декабря 2000 г. N ГКПИ 99-881 Об отказе в удовлетворении жалобы о признании недействительными абзаца 4 пункта 4 и пункта 5 Указания ГТК РФ от 28 ноября 1996 г. N 01-14/1310 "О таможенном оформлении товаров"';
	respondentsList[24] := 'Программа действий Российской Федерации и Республики Беларусь по реализации положений Договора о создании Союзного государства (Москва, 8 декабря 1999 г.)';
	respondentsList[25] := 'Договор об образовании Сообщества России и Белоруссии (Москва, 2 апреля 1996 г.) (прекратил действие)';
	respondentsList[26] := 'Договор о Союзе Беларуси и России (Москва, 2 апреля 1997 г.) (прекратил действие)'; 
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');   
  obj := OpenInDocument('ТЕКСТ'); 
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ'); 
  if NOT ClickByMainMenuItem('Документы\ССЫЛКИ НА ДОКУМЕНТ') then
  begin
    Log.Error('Не могу кликнуть по пункту меню: "Документы\ССЫЛКИ НА ДОКУМЕНТ"');
    Raise('Не могу кликнуть по пункту меню: "Документы\ССЫЛКИ НА ДОКУМЕНТ"');
  end; 
  obj := GetFromEditor('ВКЛАДКА "ССЫЛКИ НА ДОКУМЕНТ"');
  if NOT ( IsExists(obj) AND obj.Visible AND (GetFromEditor('ЗАКЛАДКИ').ActivePage.Caption = 'Ссылки на документ') ) then 
    Raise('Не удалось получить ВКЛАДКА "ССЫЛКИ НА ДОКУМЕНТ"');
  if NOT CompareArray(respondentsList, GetElementsFromTree(obj)) then
  begin
    Log.Error('ВКЛАДКА "ССЫЛКИ НА ДОКУМЕНТ"  не равна эталонной');
    Raise('ВКЛАДКА "ССЫЛКИ НА ДОКУМЕНТ"  не равна эталонной');
  end;
  result := true;  
  GoToMainMenu;
except  
  Log.Message('HLTC73_16_1_7_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.16: Работа командного меню
  HLTC73.16.1: Проверить, что в документе корректно работают пункты меню «Документы» (и нет других пунктов) 
    HLTC73.16.1.8: ССЫЛКИ ИЗ ДОКУМЕНТА
}
function HLTC73_16_1_8_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;  
var
  obj;
  respondentsList: array [0..10] of string;
  realRespondentsList;
begin                                  
try
  respondentsList[0] := 'Постановление Правительства РФ от 3 мая 2001 г. N 343 "О заключении Соглашения между Правительством Российской Федерации и Правительством Республики Белоруссия о сотрудничестве в области охраны и рационального использования трансграничных водных объектов"';
    
  respondentsList[1] := 'Декларация о дальнейшем единении России и Беларуси (Москва, 25 декабря 1998 г.)';
	respondentsList[2] := 'Договор между Российской Федерацией и Республикой Беларусь о совместных усилиях в охране Государственной границы Республики Беларусь (Минск, 21 февраля 1995 г.)';
	respondentsList[3] := 'Федеральный закон от 2 января 2000 г. N 25-ФЗ "О ратификации Договора о создании Союзного государства"';
	respondentsList[4] := 'Устав Союза Беларуси и России (Москва, 23 мая 1997 г.)';
	respondentsList[5] := 'Соглашение между Российской Федерацией и Республикой Белоруссия о введении единой денежной единицы и формировании единого эмиссионного центра Союзного государства (Минск, 30 ноября 2000 г.)';
	
	respondentsList[6] := 'Постановление Правительства РФ от 15 апреля 2000 г. N 342 "О порядке выдвижения кандидатов на должности членов Постоянного комитета Союзного государства"';
	respondentsList[7] := 'Постановление Госстандарта Республики Беларусь и Госстандарта РФ от 17 марта 2000 г. N 4/15 О проведении единой политики в области стандартизации, метрологии и оценки соответствия в рамках Программы действий Республики Беларусь и Российской Федерации по реализации положений Договора о создании Союзного государства';
	respondentsList[8] := 'Программа действий Российской Федерации и Республики Беларусь по реализации положений Договора о создании Союзного государства (Москва, 8 декабря 1999 г.)';
	respondentsList[9] := 'Договор об образовании Сообщества России и Белоруссии (Москва, 2 апреля 1996 г.) (прекратил действие)';
	respondentsList[10] := 'Договор о Союзе Беларуси и России (Москва, 2 апреля 1997 г.) (прекратил действие)';  
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');   
  obj := OpenInDocument('ТЕКСТ');  
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ');     
  if NOT ClickByMainMenuItem('Документы\ССЫЛКИ ИЗ ДОКУМЕНТА') then
  begin
    Log.Error('Не могу кликнуть по пункту меню: "Документы\ССЫЛКИ ИЗ ДОКУМЕНТА"');
    Raise('Не могу кликнуть по пункту меню: "Документы\ССЫЛКИ ИЗ ДОКУМЕНТА"');
  end; 
  obj := GetFromEditor('ВКЛАДКА "ССЫЛКИ ИЗ ДОКУМЕНТА"');
  if NOT IsExists(obj) AND obj.Visible AND (GetFromEditor('ЗАКЛАДКИ').ActivePage.Caption = 'Ссылки из документа') then  
  begin  
    Log.Error('Не удалось получить ВКЛАДКА "ССЫЛКИ ИЗ ДОКУМЕНТА"');
    Raise('Не удалось получить ВКЛАДКА "ССЫЛКИ ИЗ ДОКУМЕНТА"');
  end;
  
  realRespondentsList := GetElementsFromTree(obj);      
  if NOT  CompareArray(respondentsList, realRespondentsList) then
  begin 
    Log.Error('СПИСОК ССЫЛОК ИЗ ДОКУМЕНТА не равен эталонному');
    Raise('СПИСОК ССЫЛОК ИЗ ДОКУМЕНТА не равен эталонному');
  end;
  result := true;      
  GoToMainMenu;
except  
  Log.Message('HLTC73_16_1_8_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;  

{
HLTC73.16: Работа командного меню
  HLTC73.16.1: Проверить, что в документе корректно работают пункты меню «Документы» (и нет других пунктов) 
    HLTC73.16.1.9: Информация о документе
}
function HLTC73_16_1_9_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;  
var
  obj;
begin                                  
try     
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');   
  obj := OpenInDocument('ТЕКСТ'); 
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ'); 
  result := ClickByMainMenuItem('Документы\Информация о документе');   
  if NOT result then
  begin
    Log.Error('Не могу кликнуть по пункту меню: "Документы\Информация о документе"');
    Raise('Не могу кликнуть по пункту меню: "Документы\Информация о документе"');
  end; 
  obj := GetFromEditor('ВКЛАДКА "ИНФОРМАЦИЯ О ДОКУМЕНТЕ"');
  result := 
    IsExists(obj) AND obj.Visible AND (GetFromEditor('ЗАКЛАДКИ').ActivePage.Caption = 'Информация о документе');
  if NOT result then  
    Log.Error('ВКЛАДКА "ИНФОРМАЦИЯ О ДОКУМЕНТЕ" не получена, либо не равна эталонной');
  GoToMainMenu;
except  
  Log.Message('HLTC73_16_1_9_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 


{
HLTC73.16: Работа командного меню
	HLTC73.16.1: Проверить, что в документе корректно работают пункты меню 
  <Документы> (и нет других пунктов) 
		HLTC73.16.1.11: Графическая копия официальной публикации (может быть не всегда
     - только когда документ с графическим образом, в тестовой базе - документ с 
     внутренним номером 2001
}
function HLTC73_16_1_11_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 2001;  
  URL = 'http://mirror2.garant.ru/webclient/index.dsp*';
var
  obj;
  ieAgent;
begin                                  
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');   
  obj := OpenInDocument('ТЕКСТ'); 
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ'); 
  result := ClickByMainMenuItem('Документы\Графическая копия официальной публикации');   
  if NOT result then
  begin
    Log.Error('Не могу кликнуть по пункту меню: "Документы\Графическая копия официальной публикации"');
    Raise('Не могу кликнуть по пункту меню: "Документы\Графическая копия официальной публикации"');
  end;
  ieAgent := GetFromInternetAgent('ОСНОВНАЯ ОБЛАСТЬ');
  Result := IsExists(ieAgent) AND ieAgent.Visible AND (stringCompare('*'+ URL +'*', GetMainWindow.Caption));        
  if NOT Result then
   Log.Error('Не удалось обнаружить активное окно IE_AGENT');   
  GoToMainMenu;
except  
  Log.Message('HLTC73_16_1_11_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;

{
HLTC73.16: Работа командного меню
  HLTC73.16.1: Проверить, что в документе корректно работают пункты меню «Документы» (и нет других пунктов) 
    HLTC73.16.1.16: Актуальная редакция
}
function HLTC73_16_1_16_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 8901010;  
  TEST_WORD = '*(от 20.04.2003)*';
var
  obj;
  str;
begin
try                                                        
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');   
  
  result := ClickByMainMenuItem('Документы\Актуальная редакция');
  if NOT result then
  begin
    Log.Error('Не могу кликнуть по пункту меню: "Документы\Актуальная редакция"');
    Raise('Не могу кликнуть по пункту меню: "Документы\Актуальная редакция"');
  end;
  result := ClickByMainMenuItem('Документы\Список редакций');
  if NOT result then    Raise('Не могу кликнуть по пункту меню: "Документы\Список редакций"');  
  
  obj := GetFromEditor('ВКЛАДКА НАВИГАТОРА "РЕДАКЦИИ"');
  result := IsExists(obj) AND obj.Visible;
  if NOT result then  Raise('ВКЛАДКА НАВИГАТОРА "РЕДАКЦИИ" не получена');
  obj.SetFocus;
  str := common.GetWindowText(obj.Handle); 
  result :=  StringCompare(TEST_WORD, str);  
  if NOT result then 
    Log.Error('Актуальная редакция не является эталонной', str);    
  GoToMainMenu;
except  
  Log.Message('HLTC73_16_1_16_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;

{
HLTC73.16: Работа командного меню
  HLTC73.16.1: Проверить, что в документе корректно работают пункты меню «Документы» (и нет других пунктов) 
    HLTC73.16.1.18: Предыдущая редакция(у которых есть редакции – документ № 9001001
}
function HLTC73_16_1_18_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 8901001;  
  TEST_WORD = '*(от 30.03.2003)*';
var
  obj;
  str;
begin
try                                                        
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('ТЕКСТ'); 
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ'); 
  result := ClickByMainMenuItem('Документы\Список редакций');
  if NOT result then    Raise('Не могу кликнуть по пункту меню: "Документы\Список редакций"');
  obj.SetFocus;
  result := ClickByMainMenuItem('Документы\Предыдущая редакция');
  if NOT result then
  begin
    Log.Error('Не могу кликнуть по пункту меню: "Документы\Предыдущая редакция"');
    Raise('Не могу кликнуть по пункту меню: "Документы\Предыдущая редакция"');
  end;
  obj := GetFromEditor('ВКЛАДКА НАВИГАТОРА "РЕДАКЦИИ"');
  result := IsExists(obj) AND obj.Visible;
  if NOT result then  Raise('ВКЛАДКА НАВИГАТОРА "РЕДАКЦИИ" не получена');
  obj.SetFocus;
  str := common.GetWindowText(obj.Handle); 
  result :=  StringCompare(TEST_WORD, str);  
  if NOT result then 
    Log.Error('Предыдущая редакция не является эталонной', str);    
  GoToMainMenu;
except  
  Log.Message('HLTC73_16_1_18_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;

{
HLTC73.16: Работа командного меню
  HLTC73.16.1: Проверить, что в документе корректно работают пункты меню «Документы» (и нет других пунктов) 
    HLTC73.16.1.20: Список закладок
}
function HLTC73_16_1_20_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 8901001;  
  FOLDER_PREF = 'HLTC73_16_1_20';
var
  obj;
  str;
  dialog;
begin
try                                                        
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('ТЕКСТ'); 
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ'); 
  result := SetBookMark(FOLDER_PREF, '');
  if NOT result then Raise('Не удалось установить закладку');
  result := ClickByMainMenuItem('Документы\Список закладок...');
  if NOT result then
  begin
    Log.Error('Не могу кликнуть по пункту меню: "Документы\Список закладок..."');
    Raise('Не могу кликнуть по пункту меню: "Документы\Список закладок..."');
  end;  
  dialog := GetFromShell('ДИАЛОГ ОТКРЫТИЯ ИЗ ПАПОК');
  result := IsExists(dialog);
  if NOT result then Raise('Не удалось найти диалог сохранения в папки');
  obj := GetFromFolderForm('ДЕРЕВО ПАПОК', dialog);
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить Дерево папок в Списке закладок');
  result := Position_Internal(obj, MY_DOCS_PATH + FOLDER_PREF);
  if NOT result then 
  begin
    Log.Error('На установленную закладку не удалось спозиционироваться в Списке закладок');
    Raise('На установленную закладку не удалось спозиционироваться в Списке закладок');
  end;
  if NOT ClickToolBarButton(GetFromFolderForm('НИЖНИЙ ТУЛБАР', dialog), 'Отмена') then
    Log.Warning('Не удалось закрыть список закладок при на нажатии кнопки "отмена" на нижнем тулбаре');
  if NOT DeleteAllInMyDoc then                    
    Log.Warning('Не удалось удалить все объекты из моих документов');  
  GoToMainMenu;
except  
  Log.Message('HLTC73_16_1_20_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.16: Работа командного меню
  HLTC73.16.1: Проверить, что в документе корректно работают пункты меню «Документы» (и нет других пунктов) 
    HLTC73.16.1.23: Следующая редакция
}
function HLTC73_16_1_23_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 8901001;  
  TEST_WORD = '* (от 21.04.2003, 31.12.2019)*'; 
var
  obj;
  str;
begin
try                                                        
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('ТЕКСТ'); 
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ'); 
  result := ClickByMainMenuItem('Документы\Список редакций');
  if NOT result then    Raise('Не могу кликнуть по пункту меню: "Документы\Список редакций"');
  obj.SetFocus;
  result := ClickByMainMenuItem('Документы\Следующая редакция');
  if NOT result then
  begin
    Log.Error('Не могу кликнуть по пункту меню: "Документы\Следующая редакция"');
    Raise('Не могу кликнуть по пункту меню: "Документы\Следующая редакция"');
  end;
  obj := GetFromEditor('ВКЛАДКА НАВИГАТОРА "РЕДАКЦИИ"');
  result := IsExists(obj) AND obj.Visible;
  if NOT result then  Raise('ВКЛАДКА НАВИГАТОРА "РЕДАКЦИИ" не получена');
  obj.SetFocus;
  str := common.GetWindowText(obj.Handle); 
  result :=  StringCompare(TEST_WORD, str);  
  if NOT result then 
    Log.Error('Следующая редакция не является эталонной', str);    
  GoToMainMenu;
except  
  Log.Message('HLTC73_16_1_23_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.16: Работа командного меню
  HLTC73.16.1: Проверить, что в документе корректно работают пункты меню «Документы» (и нет других пунктов) 
    HLTC73.16.1.24: Список редакций
}
function HLTC73_16_1_24_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 8901001;  
var
  obj, doc;  
  i;
  str;
  redactionList;  
begin
try
  redactionList := [     
    '(от 21.04.2003, 11.01.2020)',
    '(от 21.04.2003, 31.12.2019)',	
	  '(от 20.04.2003)',  
    '(от 30.03.2003)',
	  '(первоначальная)'
  ];
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  doc := OpenInDocument('ТЕКСТ'); 
  result := IsExists(doc);
  if NOT result then Raise('Не удалось получить ТЕКСТ');
  if NOT IsMenuItemChecked(GetFromMainWindow('ГЛАВНОЕ МЕНЮ'), 'Документы\Список редакций') then   
    ClickByMainMenuItem('Документы\Список редакций');
  
  obj := GetFromEditor('ВКЛАДКА НАВИГАТОРА "РЕДАКЦИИ"');
  doc.SetFocus;
  result := 
    IsExists(obj) AND obj.Visible AND 
    IsMenuItemChecked(GetFromMainWindow('ГЛАВНОЕ МЕНЮ'), 'Документы\Список редакций', true);  
  if NOT result then  
  begin
    Log.Error('ВКЛАДКА НАВИГАТОРА "РЕДАКЦИИ" не получена');
    Raise('ВКЛАДКА НАВИГАТОРА "РЕДАКЦИИ" не получена');
  end;  
  obj.SetFocus;
  Sys.Keys('[Home]');
  for i := VarArrayLowBound(redactionList, 1) to VarArrayHighBound(redactionList, 1) do  
  begin
    str := common.GetWindowText(obj.Handle); 
    result :=  StringCompare('*' + redactionList[i] + '*', str);
    if NOT result then break;
    Sys.Keys('[Down]');
  end;
  if NOT result then 
    Log.Error('ВКЛАДКА НАВИГАТОРА "РЕДАКЦИИ" не эталонная', str);    
  GoToMainMenu;
except  
  Log.Message('HLTC73_16_1_24_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.18: Работа панели инструментов (набор операции актуален для дефолтных настроек)
  HLTC73.18.1: Проверить, что в документе корректно работают кнопки панели инструментов (их состав по умолчанию): 
    HLTC73.18.1.3: Печать
}
function HLTC73_18_1_3_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;  
var
  obj; 
begin
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('ТЕКСТ'); 
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ'); 
  obj := GetFromEditor('ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТУЛБАР документа'); 
  result := ClickToolBarButton(obj, 'Печать...');
  if NOT result then
  begin
    Log.Error('Не могу кликнуть по кнопке на тулбаре: "Печать"');
    Raise('Не могу кликнуть по кнопке на тулбаре: "Печать"');
  end;
  obj := GetFromShell('ДИАЛОГ ПЕЧАТИ');
  result := IsExists(obj) AND obj.Visible AND (obj.Caption = 'Печать');
  if NOT result then 
    Log.Error('Не удалось обнаружить диалог печати или он имеет неправильный Caption');
  if obj.Exists then obj.Close;
  GoToMainMenu;
except  
  Log.Message('HLTC73_18_1_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 


{
HLTC73.18: Работа панели инструментов (набор операции актуален для дефолтных настроек)
  HLTC73.18.1: Проверить, что в документе корректно работают кнопки панели инструментов (их состав по умолчанию): 
    HLTC73.18.1.5: Установить закладку
}
function HLTC73_18_1_5_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 12017850;  
var
  obj;
  folderForm; 
begin
try  
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('ТЕКСТ');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ');
  if NOT  ClickToolbarButton(GetFromEditor('ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"'), 'Установить закладку...') then
  begin
    Log.Error('Не удалось на тулбаре документа нажать кнопку "Установить закладку..."');
    Raise('Не удалось на тулбаре документа нажать кнопку "Установить закладку..."');
  end;  
  folderForm := GetFromShell('ДИАЛОГ УСТАНОВКИ ЗАКЛАДКИ');
  if NOT IsExists(folderForm) then
  begin
    Log.Error('Не удалось обнаружить диалог сохранения закладки!');
    Raise('Не удалось обнаружить диалог сохранения закладки!');    
  end; 
  Sys.Keys('[Esc]');//закрываем диалог "Сохранить Как..."  
  GoToMainMenu;
  result := true;
except  
  Log.Message('HLTC73_18_1_5_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  Sys.Keys('[Esc]');  
  result := false;
  CommonExceptionHandler;             
end;
end; 



{
HLTC73.18: Работа панели инструментов (набор операции актуален для дефолтных настроек)
  HLTC73.18.1: Проверить, что в документе корректно работают кнопки панели инструментов (их состав по умолчанию): 
    HLTC73.18.1.8: Найти контекст
}
function HLTC73_18_1_8_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 12017850;  
var
  obj; 
begin
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('ТЕКСТ'); 
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ');
  //Если открыта форма контекстного поиска, тогда её закрываем
  CloseContextSearchForm;
  obj := GetFromEditor('ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТУЛБАР документа'); 
  result := ClickToolbarButton (obj, 'Поиск контекста...');
  if NOT result then Raise('Не удалось кликнуть на тулбаре по кнопке "Поиск контекста..."');
  obj := GetFromBaseSearch('ПАНЕЛЬ "БАЗОВЫЙ ПОИСК"');
  result := IsExists(obj) AND obj.Visible AND StringCompare('Базовый поиск', obj.Caption);
  if NOT result then
    Log.Error('Не удалось обнаружить форму Контекстного поиска или у неё неправильный Caption');
  PressKeyWithCheck(['[Esc]']);
  GoToMainMenu;
except  
  Log.Message('HLTC73_18_1_8_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.18: Работа панели инструментов (набор операции актуален для дефолтных настроек)
  HLTC73.18.1: Проверить, что в документе корректно работают кнопки панели инструментов (их состав по умолчанию): 
    HLTC73.18.1.9: Предварительный просмотр
}
function HLTC73_18_1_9_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 12017850;  
var
  obj; 
begin
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('ТЕКСТ'); 
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ'); 
  obj := GetFromEditor('ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТУЛБАР документа'); 
  result := ClickToolbarButton (obj, 'Предварительный просмотр');
  if NOT result then Raise('Не удалось кликнуть на тулбаре по кнопке "Предварительный просмотр"');
  result := IsCorrectPreview;
  if NOT result then
    Log.Error('окно Предварительного просмотра не корректно');       
  GoToMainMenu;
except  
  Log.Message('HLTC73_18_1_9_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.18: Работа панели инструментов (набор операции актуален для дефолтных настроек)
  HLTC73.18.1: Проверить, что в документе корректно работают кнопки панели инструментов (их состав по умолчанию): 
    HLTC73.18.1.10: Поставить на контроль
}
function HLTC73_18_1_10_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 12017850;  
  TEST_WORD_1 = 'Документ поставлен на контроль*';
  TEST_WORD_2 = 'Вы уверены, что хотите снять текущий документ с контроля?*';
var
  obj; 
  str;
begin
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('ТЕКСТ'); 
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ'); 
  obj := GetFromEditor('ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТУЛБАР документа');   
  result := ClickToolbarButton (obj, 'Поставить на контроль', 'SetToState:=pressed');   
  if NOT result then
  begin
    Log.Error('Не удалось  на тулбаре нажать кнопку "Поставить на контроль" либо она уже нажата');
    Raise('Не удалось  на тулбаре нажать кнопку "Поставить на контроль" либо она уже нажата');
  end;
  str := WaitForInfoWindow;
  result := StringCompare(TEST_WORD_1, str);
  if NOT result then Raise('Не обнаружилось "Подтверждение" или его текст не равен эталонному');
  result := ClickToolbarButton (obj, 'Снять с контроля');   
  if NOT result then Raise('Не удалось  на тулбаре отжать кнопку "Снять с контроля"');
  str := WaitForConfirmationWindow;      
  result := StringCompare(TEST_WORD_2, str);
  if NOT result then Raise('Не обнаружилось "Подтверждение" или его текст не равен эталонному: ' + str);  
  obj := GetToolBarObject(obj, 'BUTTON', 'Поставить на контроль');
  result := IsExists(obj) and (NOT obj.Down);
  if NOT result then
    Log.Error('Кнопка "Поставить на контроль" нажата, хотя не должна');
  GoToMainMenu;
except  
  Log.Message('HLTC73_18_1_10_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.18: Работа панели инструментов (набор операции актуален для дефолтных настроек)
  HLTC73.18.1: Проверить, что в документе корректно работают кнопки панели инструментов (их состав по умолчанию): 
    HLTC73.18.1.11: Поиск\Толковый словарь(при выделенном фрагменте)
}
function HLTC73_18_1_11_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;
  CONTEXT = 'Договор';
  ETALON_TERMIN = 'Авторский договор*Соглашение*искусства.';
var
  obj;
  text; 
begin
try
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('ТЕКСТ');  
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ');
  if NOT BaseSearchInDocument (obj, CONTEXT) then Raise ('Не удалось найти искомый контекст: ' + CONTEXT);
  
  if NOT GoToDictionary('КНОПКА НА ТУЛБАРЕ') then Raise('Не удалось перейти в ТС');  
  obj := GetFromDictionary('ТЕКСТ СТАТЬИ');
  if NOT ( IsExists(obj) AND obj.Visible ) then
  begin
    Log.Error('Не удалось найти текст статьи в Толковом словаре');
    Raise('Не удалось найти текст статьи в Толковом словаре');
  end;
  text := CopyToClipboard(obj, 'ALL', 'Trim := true'); 
  if NOT StringCompare(ETALON_TERMIN, text) then
  begin 
    Log.Error('Переход в ТС произошёл на НЕ эталонный термин');
    Raise('Переход в ТС произошёл на НЕ эталонный термин');
  end;  
  GoToMainMenu;
  result := true;
except  
  Log.Message('HLTC73_18_1_11_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 


{
HLTC73.18: Работа панели инструментов (набор операции актуален для дефолтных настроек)
  HLTC73.18.2: Проверить, что в справке 
    HLTC73.18.2.1: Печать
}
function HLTC73_18_2_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;  
var
  obj; 
begin
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('СПРАВКА'); 
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить СПРАВКА'); 
  obj := GetFromEditor('ТУЛБАР "ДОКУМЕНТ: СПРАВКА К ДОКУМЕНТУ"');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТУЛБАР справки');
  result := ClickToolBarButton(obj, 'Печать...');
  if NOT result then
  begin
    Log.Error('Не могу кликнуть по кнопке на тулбаре: "Печать"');
    Raise('Не могу кликнуть по кнопке на тулбаре: "Печать"');
  end;
  obj := GetFromShell('ДИАЛОГ ПЕЧАТИ');
  result := IsExists(obj) AND obj.Visible AND (obj.Caption = 'Печать');
  if NOT result then 
    Log.Error('Не удалось обнаружить диалог печати или он имеет неправильный Caption');
  if obj.Exists then obj.Close;
  GoToMainMenu;
except  
  Log.Message('HLTC73_18_2_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.18: Работа панели инструментов (набор операции актуален для дефолтных настроек)
  HLTC73.18.2: Проверить, что в справке
    HLTC73.18.2.10: Предварительный просмотр
}
function HLTC73_18_2_10_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;  
var
  obj; 
begin
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('СПРАВКА'); 
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить СПРАВКА'); 
  obj := GetFromEditor('ТУЛБАР "ДОКУМЕНТ: СПРАВКА К ДОКУМЕНТУ"');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТУЛБАР справки'); 
  result := ClickToolbarButton (obj, 'Предварительный просмотр');
  if NOT result then Raise('Не удалось кликнуть на тулбаре по кнопке "Предварительный просмотр"');
  result := IsCorrectPreview;
  if NOT result then
    Log.Error('окно Предварительного просмотра не корректно');
  GoToMainMenu;
except  
  Log.Message('HLTC73_18_1_9_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.18: Работа панели инструментов (набор операции актуален для дефолтных настроек)
  HLTC73.18.3: Проверить, что в окне атрибутов
    HLTC73.18.3.2: Печать
}
function HLTC73_18_3_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;  
var
  obj; 
begin
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('ИНФОРМАЦИЯ О ДОКУМЕНТЕ'); 
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ИНФОРМАЦИЯ О ДОКУМЕНТЕ'); 
  obj := GetFromEditor('ТУЛБАР "ДОКУМЕНТ: ИНФОРМАЦИЯ О ДОКУМЕНТЕ"');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТУЛБАР Информации о документе');
  result := ClickToolBarButton(obj, 'Печать...');
  if NOT result then
  begin
    Log.Error('Не могу кликнуть по кнопке на тулбаре: "Печать"');
    Raise('Не могу кликнуть по кнопке на тулбаре: "Печать"');
  end;
  obj := GetFromShell('ДИАЛОГ ПЕЧАТИ');
  result := IsExists(obj) AND obj.Visible AND (obj.Caption = 'Печать');
  if NOT result then 
    Log.Error('Не удалось обнаружить диалог печати или он имеет неправильный Caption');
  if obj.Exists then obj.Close;
  GoToMainMenu;
except  
  Log.Message('HLTC73_18_3_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.18: Работа панели инструментов (набор операции актуален для дефолтных настроек)
  HLTC73.18.3: Проверить, что в окне атрибутов
    HLTC73.18.3.3: Копировать
}
function HLTC73_18_3_3_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;  
  TEST_STRING = '*Имя*Договор "О создании Союзного государства*Ценные бумаги, рынок ценных бумаг*Общие вопросы*Ситуации*Размер документа*'; 
var
  obj; 
  str;
begin
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('ИНФОРМАЦИЯ О ДОКУМЕНТЕ'); 
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ИНФОРМАЦИЯ О ДОКУМЕНТЕ'); 
  obj := GetFromEditor('ТУЛБАР "ДОКУМЕНТ: ИНФОРМАЦИЯ О ДОКУМЕНТЕ"');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТУЛБАР Информации о документе');
  result := ClickToolBarButton(obj, 'Копировать все атрибуты документа в буфер обмена*');
  if NOT result then
  begin
    Log.Error('Не могу кликнуть по кнопке на тулбаре: "Копировать"');
    Raise('Не могу кликнуть по кнопке на тулбаре: "Копировать"');
  end;
  Delay(Options.Run.Timeout div 60);
  str := Sys.Clipboard;
  result := StringCompare(TEST_STRING, str); 
  if NOT result then
    Log.Error('Скопированный текст с вкладки "Информация о документе" не равен эталонному', str);
  GoToMainMenu;
except  
  Log.Message('HLTC73_18_3_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.18: Работа панели инструментов (набор операции актуален для дефолтных настроек)
  HLTC73.18.3: Проверить, что в окне атрибутов
    HLTC73.18.3.4: Предварительный просмотр
}
function HLTC73_18_3_4_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;  
var
  obj; 
begin
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('ИНФОРМАЦИЯ О ДОКУМЕНТЕ'); 
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ИНФОРМАЦИЯ О ДОКУМЕНТЕ'); 
  obj := GetFromEditor('ТУЛБАР "ДОКУМЕНТ: ИНФОРМАЦИЯ О ДОКУМЕНТЕ"');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТУЛБАР Информации о документе'); 
  result := ClickToolbarButton (obj, 'Предварительный просмотр');
  if NOT result then Raise('Не удалось кликнуть на тулбаре по кнопке "Предварительный просмотр"');  
  result := IsCorrectPreview;
  if NOT result then
    Log.Error('окно Предварительного просмотра не корректно');       
  GoToMainMenu;
except  
  Log.Message('HLTC73_18_3_4_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.19: Переход по ссылке
  HLTC73.19.1: Пользователь активирует переход по гипертекстовой ссылке. Система проверяет наличие документа,
  на который указывает ссылка. Система отображает текст нового документа с позиции, на которую указывает ссылка
}
function HLTC73_19_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;  
  CONTEXT = 'Декларации';
  TEST_WORD = 'Декларация';
var
  obj;   
  x, y;
  str;
begin
try
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('ТЕКСТ');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ');
  if NOT GetCoordsSearchContext(obj, CONTEXT, x, y) then Raise ('Не удалось найти координаты искомого контекста');  
  obj.Click(x + 10, y);
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  obj.SetFocus;          
  Sys.Keys('[Right]');
  str := CopyToClipboard(obj, 'STRING', 'Trim := true'); 
  if NOT StringCompare(str, TEST_WORD) then
  begin 
    Log.Error('Переход по гиперссылке произошёл не в эталонное место');
    Raise('Переход по гиперссылке произошёл не в эталонное место');
  end;
  result := true;  
except  
  Log.Message('HLTC73_19_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.19: Переход по ссылке
  HLTC73.19.2: Проверить правильность позиционирования при переходах по «Структуре документа». Причем как «вниз», так и «вверх». 
  Переходим в документ с внутренним номером 12025268. Во вкладке "Структура документа" раскрываем все 
  элементы, и начинаем с первого бежать до самого низа. Документ при этом правильно переходит на нужный саб.
  Теперь бежим снизу вверх.
}
function HLTC73_19_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 12025268;  
var
  obj, doc; 
  strTest;
  str;
  strTree;
  i;
begin
try
  strTest := [
    '\Часть первая', '\Часть первая\Раздел I',
    '\Часть вторая', '\Часть вторая\Раздел II',     
    '\Часть третья', '\Часть третья\Раздел III', '\Часть третья\Раздел IV', '\Часть третья\Раздел V', '\Часть третья\Раздел VI', '\Часть третья\Раздел VII', 
      '\Часть третья\Раздел VIII', '\Часть третья\Раздел IX', '\Часть третья\Раздел X', '\Часть третья\Раздел XI', 
    '\Часть четвертая', '\Часть четвертая\Раздел XII', 
    '\Часть пятая', '\Часть пятая\Раздел XIII', 
    '\Часть шестая', '\Часть шестая\Раздел XIV'  
    ];  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  doc := OpenInDocument('ТЕКСТ');
  result := IsExists(doc);
  if NOT result then Raise('Не удалось получить ТЕКСТ'); 
  obj := GetFromEditor('ВКЛАДКА НАВИГАТОРА "СТРУКТУРА ДОКУМЕНТА"');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить вкладку "структура документа"');  
  for i := VarArrayLowBound(strTest, 1) to VarArrayHighBound(strTest, 1) do 
  begin     
    strTree := AnsiStrRScan(strTest[i], '\');
    strTree := GetSubStr(strTree, '\', '');
    strTree := strTree + '*';
    obj.SetFocus;
    Sys.Keys('[Home]');
    if NOT Position_Internal(obj, 'Оглавление' + strTest[i]) then
      Raise('Не удалось спозиционироваться на нужный элемент: ' + strTest[i]);
    doc.Click(1, 1);
    str := CopyToClipboard(doc, 'STRING', 'Trim := true');
    result := StringCompare(strTree, str);
    if NOT result then
    begin
      Log.Error('Документ не спозиционировался на нужный саб:' + strTree, str);
      Raise('Документ не спозиционировался на нужный саб');      
    end;
  end;                                     
  for i :=  VarArrayHighBound(strTest, 1) downto VarArrayLowBound(strTest, 1) do 
  begin     
    strTree := AnsiStrRScan(strTest[i], '\'); 
    strTree := GetSubStr(strTree, '\', '');
    strTree := strTree + '*';
    obj.SetFocus;  
    Sys.Keys('[Home]');
    if NOT  Position_Internal(obj, 'Оглавление' + strTest[i]) then
      Raise('Не удалось спозиционироваться на нужный элемент: ' + strTest[i]);        
    doc.Click(1, 1);
    str := CopyToClipboard(doc, 'STRING', 'Trim := true');
    result := StringCompare(strTree, str);
    if NOT result then
    begin
      Log.Error('Документ не спозиционировался на нужный саб:' + strTree, str);
      Raise('Документ не спозиционировался на нужный саб');      
    end;
  end;  
  GoToMainMenu;
except  
  Log.Message('HLTC73_19_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.19: Переход по ссылке
  HLTC73.19.3: Проверить, что корректно осуществляется переход по ссылке из режима
   синхронного просмотра документа.  
}
function HLTC73_19_3_Execute (var  CurrentState: OleVariant): OleVariant;
const
  CONTEXT = 'Декларации';
  TEST_WORD = 'Декларация';
var
  obj;   
  x, y;
  str;
begin
try
  result :=OpenObjectFromFolder(LIST_MAIN, OpenMenuTab);       
  if NOT result then Raise('Не удалось открыть список из навигатора');  
  obj := GetFromList('СПИСОК ДОКУМЕНТОВ');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить список');
  result := Position_Internal(obj, 'Договор "О создании Союзного государства" (Москва, 8 декабря 1999 г.)');
  if NOT result then Raise('Не удалось спозиционироваться в списке на "Договор ..."');
  obj := OpenInList('СИНХРОННЫЙ ПРОСМОТР');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить вкладку СИНХРОННЫЙ ПРОСМОТР');
  obj := GetFromSynchroView('ТЕКСТ ДОКУМЕНТА');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить текст со вскладки СИНХРОННЫЙ ПРОСМОТР');  
  result := GetCoordsSearchContext(obj, CONTEXT, x, y);
  if NOT result then Raise ('Не удалось найти координаты искомого контекста');  
  obj.Click(x + 10, y);    
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  result := IsExists(obj); 
  if NOT result then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  obj.SetFocus;
  Sys.Keys('[Right]');
  str := CopyToClipboard(obj, 'STRING', 'Trim := true'); 
  result := StringCompare(str, TEST_WORD);  
  if NOT result then 
    Log.Error('Переход по гиперссылке произошёл не в эталонное место');
  GoToMainMenu;
except  
  Log.Message('HLTC73_19_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.19: Переход по ссылке
  HLTC73.19.4: Мультиссылка
    HLTC73.19.4.1: Система строит список документов, по данным из мультиссылки.
    Документ (внутренний номер) 12124178 – в документе ссылка с контекстом «мультиссылка на vanonced»
}
function HLTC73_19_4_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 12124178;  
  CONTEXT = 'МУЛЬТИССЫЛКА НА VANONCED';
var
  obj;   
  x, y;
  str;
  list;
begin
try
  list := [
    'Picture 2101', 'Picture 2102', 'Picture 2103', 'Picture 2104', 'Picture 2105', 'Picture 2106', 
    'Picture 2107', 'Picture 2108', 'Picture 2109', 'Picture 2110'
    ];
  result := OpenDocByNumber(DOC_NUM, false, false);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  result := GetCoordsSearchContext(obj, CONTEXT, x, y);
  if NOT result then Raise ('Не удалось найти координаты искомого контекста');  
  obj.Click(x + 10, y);          
  obj := GetFromList('СПИСОК ДОКУМЕНТОВ');
  result := IsExists(obj) AND obj.Visible;
  if NOT result then Raise('Не удалось получить список документов');
  result := CompareArray(GetElementsFromTree(obj),list); 
  if NOT result then 
    Log.Error('Список не равен эталонному');
  GoToMainMenu;
except  
  Log.Message('HLTC73_19_4_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.19: Переход по ссылке
  HLTC73.19.5: Документ по ссылке не найден
    HLTC73.19.5.1: Система сообщает пользователю об отсутствии документа в базе
      HLTC73.19.5.1.1: Проверить правильность текста сообщения. Должно быть: Данный документ содержится в информационном блоке, который не включен в состав Вашего комплекта.
      Для расширения информационного банка или индивидуального запроса текста данного документа обращайтесь в службу Правовой поддержки онлайн обслуживающей Вас организации 				(в тестовой базе - статья 4 Конституции РФ, ссылка на декларацию)
}
function HLTC73_19_5_1_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;  
  CONTEXT = 'Декларацию';
  TEST_WORD = 'Данный документ не включён в состав вашего комплекта.';    
var
  obj;   
  x, y;
  str;
begin
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('ТЕКСТ');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ');
  if NOT SetCommentsMode(obj ,JUROR_COMMENTS, MODE_SHOWN) then
    Raise('Не удалось включить режим показа юр. комментариев');
  result := GetCoordsSearchContext(obj, CONTEXT, x, y);
  if NOT result then Raise ('Не удалось найти координаты искомого контекста');  
  obj.Click(x + 10, y);
  str := WaitForWarningWindow(Options.Run.Timeout div 6, '', true, '#Вернуться*');
  result := StringCompare(TEST_WORD, str);
  if NOT result then
    Log.Error('Текст предупреждения не эталонный', str);
  GoToMainMenu;
except  
  Log.Message('HLTC73_19_5_1_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.19: Переход по ссылке
  HLTC73.19.5: Документ по ссылке не найден
    HLTC73.19.5.1: Система сообщает пользователю об отсутствии документа в базе
      HLTC73.19.5.1.2: Проверить корректность сообщения в случае, если не найден не документ, а объект, 
      например картинка  (документ с внутренним номером 3822781, в нем первая ссылка с текстом «графический объект» 
      указывает на отсутвующую картинку).
}
function HLTC73_19_5_1_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 3822781;  
  CONTEXT = 'графический объект';
  TEST_WORD = 'Данный документ не включён в состав вашего комплекта.'; 
var
  obj;   
  x, y;
  str;
begin
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('ТЕКСТ');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ');
  result := ClickOnContext(obj, Context);
  if NOT result then Raise('Не удалось кликнуть по искомому контексту');           
  str := WaitForWarningWindow(Options.Run.Timeout div 6, '', true, '#Вернуться*');
  result := StringCompare(TEST_WORD, str);
  if NOT result then
    Log.Error('Текст предупреждения не эталонный', str);
  GoToMainMenu;
except  
  Log.Message('HLTC73_19_5_1_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.19: Переход по ссылке
  HLTC73.19.5: Документ по ссылке не найден
    HLTC73.19.5.2: Если база соответствующим образом обработана (на базе, из которой выливали текущую, отработал gl с 
    параметром «-а»), то система (в том же сообщении) предоставляет дополнительную информацию о местонахождении 
    отсутствующего документа (документ с внутренним номером 10003790, в нем по ссылкам расположенным в начале 
    документа «Устава» и «См. Комментарий к преамбуле настоящего Федерального закона» предоставляется полная 
    информация об отсутствующих документах).
}
function HLTC73_19_5_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003790;  
  CONTEXT = 'Устава';
var
  obj;   
  str;
  mess;
begin
try
  mess := 
    'Данный документ не включён в состав вашего комплекта.*'+
    'Документ содержится в информационных блоках:*'+
    'Формы правовых документов*'+
    'Законодательство Тульской области*'+
    'Контактная информация:*'+
    'Контактная информация отсутствует';
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('ТЕКСТ');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ');
  if NOT ClickOnContext(obj, CONTEXT) then Raise('Не удалось кликнуть по искомому контексту');  
  str := WaitForWarningWindow(Options.Run.Timeout div 6, '', true, '#Вернуться*', true);
  if NOT StringCompare(mess, str) then
  begin
    Log.Error('Текст предупреждения не эталонный', str);
    Raise;
  end;
  result := true;
  GoToMainMenu;
except  
  Log.Message('HLTC73_19_5_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;


{
HLTC73.19: Переход по ссылке
  HLTC73.19.7: Проверить переход по ссылке из справки к документу:
    HLTC73.19.7.2: В другой документ
}
function HLTC73_19_7_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;  
  CONTEXT = 'Федеральным законом';
  TEST_WORD = 'Федеральный закон от 2 января 2000 г. N 25-ФЗ';
var
  obj;   
  x, y;
  str;
begin
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('СПРАВКА');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить СПРАВКА');
  result := GetCoordsSearchContext(obj, CONTEXT, x, y);
  if NOT result then Raise ('Не удалось найти координаты искомого контекста');
  obj.Click(x + 10, y);
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ');
  obj.SetFocus;
  Sys.Keys('[Right]');
  str := CopyToClipboard(obj, 'STRING', 'Trim := true');
  result := StringCompare(str, TEST_WORD);
  if NOT result then 
    Log.Error('Переход по гиперссылке произошёл не в эталонное место');
  GoToMainMenu;
except  
  Log.Message('HLTC73_19_7_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.19: Переход по ссылке
  HLTC73.19.8: Проверить переход по ссылке на объекты:
    HLTC73.19.8.5: картинку (ТБ: номер 2305932 – галку внутренний номер ставить не надо, на картинку можно 
    попасть из оглавления на вкладке «Структура документа»)
}
function HLTC73_19_8_5_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 2305932;  
  CONTEXT = 'чертеже';
var
  obj;   
  x, y;
  str;
begin
try
  result := OpenDocByNumber(DOC_NUM, false, false);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('ТЕКСТ');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить СПРАВКА');
  result := GetCoordsSearchContext(obj, CONTEXT, x, y);
  if NOT result then Raise ('Не удалось найти координаты искомого контекста');  
  obj.Click(x + 10, y);  
  obj := GetFromMainWindow('ГРАФИЧЕСКИЙ ОБЪЕКТ');
  result := IsExists(obj) AND obj.Visible;
  if NOT result then Raise('Не удалось получить ФОРМА КАРТИНКИ');
  GoToMainMenu;
except  
  Log.Message('HLTC73_19_8_5_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.19: Переход по ссылке
  HLTC73.19.9: Проверить переход по ссылке:
    HLTC73.19.9.1: Внутри документа
}
function HLTC73_19_9_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;  
  CONTEXT = 'Преамбула';
  TEST_WORD = 'Российская Федерация и Республика Беларусь,';
var
  obj;   
  x, y;
  str;
begin
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('ТЕКСТ');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ');
  result := GetCoordsSearchContext(obj, CONTEXT, x, y);
  if NOT result then Raise ('Не удалось найти координаты искомого контекста'); 
  obj.Click(x + 10, y);          
  str := CopyToClipboard(obj, 'STRING', 'Trim := true'); 
  result := StringCompare(str, TEST_WORD);  
  if NOT result then 
    Log.Error('Переход по гиперссылке произошёл не в эталонное место');
  GoToMainMenu;
except  
  Log.Message('HLTC73_19_9_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.19: Переход по ссылке
  HLTC73.19.12: Проверить переход по ссылке из контекстного меню:
    HLTC73.19.12.1: Операция «Перейти по гиперссылке» – документ, на который указывает ссылка открывается в 
    текущем окне. При этом позиционирование происходит на нужном параграфе
}
function HLTC73_19_12_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;  
  CONTEXT = 'Федеральным законом';
  TEST_WORD = 'Федеральный закон от 2 января 2000 г. N 25-ФЗ';
var
  obj;   
  x, y;
  str;
begin
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('ТЕКСТ');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ');  
  result := GetCoordsSearchContext(obj, CONTEXT, x, y);
  if NOT result then Raise ('Не удалось найти координаты искомого контекста');  
  obj.ClickR(x + 10, y);
  
  if NOT GoByHyperLink(obj) then Raise('Не удалось перейти по гиперссылке');
            
  //result := ClickByPopupMenuItem(obj, 'Перейти по гиперссылке');      
  if NOT result then Raise('Не удалось вызвать пункт контекстного меню "Перейти по гиперссылке"');
  obj := OpenInDocument('ТЕКСТ');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ');
  obj.SetFocus;
  Sys.Keys('[Right]');
  str := CopyToClipboard(obj, 'STRING', 'Trim := true'); 
  result := StringCompare(str, TEST_WORD);  
  if NOT result then 
    Log.Error('Переход по гиперссылке произошёл не в эталонное место');
  GoToMainMenu;
except  
  Log.Message('HLTC73_19_12_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.19: Переход по ссылке
  HLTC73.19.14: Проверить переход по ссылкам с клавиатуры:
    HLTC73.19.14.1: Alt+Enter открывает ссылку в этом же окне
}
function HLTC73_19_14_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 9001;
  CONTEXT = 'NOTTM';  
  DOC_ADD_NAME = '*Документ 9003*';
  ETALON = '*Документ 9003*Документ имеет команды NOTTM*Старый параграф*';
var
  obj;     
  str;
  i;
begin
try
  for i := 1 to 2 do //Проверям 2 раза: 1-й раз нажимаем Alt+Enter, когда ссылка выделена, а второй раз - когда нет.
  begin
    if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
    obj := OpenInDocument('ТЕКСТ');
    if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ');
    if NOT BaseSearchInDocument(obj, CONTEXT) then Raise('Не удалось найти искомый контекст');  
    if i = 2 then PressKeyNCount('[Left]', 2);//Жмём Alt+Enter когда ссылка не вывелена
    Delay(Options.Run.Timeout div 60);
    Sys.Keys('~[Enter]');
    Delay(Options.Run.Timeout div 60);
    obj := OpenInDocument('ТЕКСТ');
    if NOT IsExists(obj) then
    begin
      Log.Error('Не удалось получить ТЕКСТ после перехода по гиперссылки');
      Raise;
    end;  
    str := CopyToClipBoard(obj, 'ALL', 'Trim:=true');
    if NOT (StringCompare(ETALON, str) AND StringCompare(DOC_ADD_NAME, GetMainWindow.Caption))then
    begin
      Log.Error('Не удалось перейти по гиперссылке в эталонный документ по Alt+Enter');
      Raise;
    end;
  end;//for
  result := true;
  GoToMainMenu;
except  
  Log.Message('HLTC73_19_14_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;

{
HLTC73.19: Переход по ссылке
  HLTC73.19.14: Проверить переход по ссылкам с клавиатуры:
    HLTC73.19.14.2: Alt+Shift+Enter открывает ссылку в новом окне
}
function HLTC73_19_14_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM  = 9001;
  DOC_NAME = 'Документ 9001';
  DOC_ADD_NAME = 'Документ 9003'; 
  CONTEXT = 'NOTTM';
var
  obj;     
  str;
  res1, res2;
  p, w, w1;
  addWnd;
  i;
begin
try    
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('ТЕКСТ');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ');
  if NOT BaseSearchInDocument(obj, CONTEXT) then Raise('Не удалось найти искомый контекст');  
  Delay(Options.Run.Timeout div 60);
  Sys.Keys('!~[Enter]');
  Delay(Options.Run.Timeout div 60);
  
 for i := 1 to 2 do
  begin
    w1 := GetMainWindow('ContainerIndex:=' + IntToStr(i));
    if NOT IsExists(w1) then
      Raise('Не найдено окно с ContainerIndex:=' + IntToStr(i));
    w := GetFromEditor('ТЕКСТ ДОКУМЕНТА', nil, w1);     
    if NOT IsExists(w) then
    begin    
      Log.Error('Не найден ТЕКСТ ДОКУМЕНТА в окне с ContainerIndex:=' + IntToStr(i));
      Raise;
    end;
    if (i=1) AND (NOT StringCompare('*'+DOC_ADD_NAME+'*', GetTabCaption('ContainerIndex:=1'))) then
    begin
      Log.Error('В новом окне открылся не эталонный документ');
      Raise;
    end;
    if (i=2) AND (NOT StringCompare('*'+DOC_NAME+'*', GetTabCaption('ContainerIndex:=2'))) then
    begin
      Log.Error('Во втором (старом) окне открыт не эталонный документ');
      Raise;
    end;     
  end;
  result := true;  
except  
  Log.Message('HLTC73_19_14_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
  CloseF1Shell;
end;

{
HLTC73.19: Переход по ссылке
  HLTC73.19.14: Проверить переход по ссылкам с клавиатуры:
    HLTC73.19.14.3: Alt+Вниз переходит к следующей ссылке
}
function HLTC73_19_14_3_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM  = 2004;  
var
  obj;     
  arrayLinks;
  i;
  str;
begin
try    
  arrayLinks := [
    'саб 20 документа в www-образом',
    'Ссылка на 2002.100',
    'Ссылка на 2002.312',
    '2005.0',
    '2005.113',
    '2005.100',
    'ссылка на 2002.0',
    'ссылка на 2009.10',
    'начало топика 2004'
  ];
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('ТЕКСТ');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ');
  obj.SetFocus;
  PressKeyNCount('^[Home]', 2);
  PressKeyNCount('[Down]', 2);//Т.к. в начале документа есть ссылка "см.Графическую копию...", нам надо её игнорировать
  //Проверяем, что при нажатии Alt+Down мы переходим на следующую ссылку
  for i := VarArrayLowBound(arrayLinks, 1) to VarArrayHighBound(arrayLinks, 1) do
  begin      
    Delay(Options.Run.Timeout div 120);
    PressKeyWithCheck(['~[Down]']);
    Delay(Options.Run.Timeout div 120);
    str := CopyToClipBoard(obj, '', 'Trim:=true');
    if NOT StringCompare(arrayLinks[i], str) then
    begin
      Log.Error('После выполнения шотката Alt+Down - мы не перешли на следующую ссылку ', arrayLinks[i]);
      Raise('После выполнения шотката Alt+Down - мы не перешли на следующую ссылку');
    end;
  end;//for
  //Проверяем, что находясь на последней ссылке и нажав при этом Alt+Down мы никуда не переходим
  Delay(Options.Run.Timeout div 120);
  Sys.Keys('~[Down]');
  Delay(Options.Run.Timeout div 120);
  str := CopyToClipBoard(obj, '', 'Trim:=true');
  if NOT StringCompare(arrayLinks[VarArrayHighBound(arrayLinks, 1)], str) then
  begin
    Log.Error('После выполнения шотката Alt+Down(находясь на последней ссылки)- мы куда то перешли, хотя не должны были', arrayLinks[VarArrayHighBound(arrayLinks, 1)]);
    Raise;
  end;
  result := true;
  GoToMainMenu;
except  
  Log.Message('HLTC73_19_14_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;

{
HLTC73.19: Переход по ссылке
  HLTC73.19.14: Проверить переход по ссылкам с клавиатуры:
    HLTC73.19.14.4: Alt+Вверх переходит к предыдущей ссылке
}
function HLTC73_19_14_4_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM  = 2004;  
var
  obj;     
  arrayLinks;
  i;
  str;
begin
try    
  arrayLinks := [    
    'саб 20 документа в www-образом',
    'Ссылка на 2002.100',
    'Ссылка на 2002.312',
    '2005.0',
    '2005.113',
    '2005.100',
    'ссылка на 2002.0',
    'ссылка на 2009.10',
    'начало топика 2004'
  ];
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('ТЕКСТ');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ');
  obj.SetFocus;
  PressKeyNCount('^[End]', 2);
  //Проверяем, что при нажатии Alt+Up мы переходим на предидущую ссылку
  for i := VarArrayHighBound(arrayLinks, 1) downto VarArrayLowBound(arrayLinks, 1) do
  begin   
    PressKeyWithCheck(['~[Up]']);
    str := CopyToClipBoard(obj, '', 'Trim:=true');
    if NOT StringCompare(arrayLinks[i], str) then
    begin
      Log.Error('После выполнения шотката Alt+Up - мы не перешли на предидущую ссылку ', arrayLinks[i]);
      Raise;
    end;
  end;//for
  //Проверяем, что находясь на последней ссылке и нажав при этом Alt+Up мы никуда не переходим
  Delay(Options.Run.Timeout div 60);
  Sys.Keys('~[Up]');
  Delay(Options.Run.Timeout div 60);
  str := CopyToClipBoard(obj, '', 'Trim:=true');
  if NOT StringCompare(arrayLinks[VarArrayLowBound(arrayLinks, 1)], str) then
  begin
    Log.Error('После выполнения шотката Alt+Up (находясь на первой ссылки)- мы куда то перешли, хотя не должны были',arrayLinks[VarArrayLowBound(arrayLinks, 1)]);
    Raise('После выполнения шотката Alt+Up (находясь на первой ссылки)- мы куда то перешли, хотя не должны были');
  end;
  result := true;
  GoToMainMenu;
except  
  Log.Message('HLTC73_19_14_4_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;


{
HLTC73.20: Показ комментариев
  HLTC73.20.3: Проверить для документа Толкового Словаря
    HLTC73.20.3.2: скрытие/показ моих комментариев
}
function HLTC73_20_3_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  TEST_WORD = 'Тест Показать/Скрыть комментарии пользователя в ТС';
var
  str;
  obj;
  doc;    
  sub;
  button;
begin                                   
try  
  if NOT GoToDictionary then Raise('Не удалось перейти в ТС');
  doc := GetFromDictionary('ТЕКСТ СТАТЬИ');
  if NOT IsExists(doc) then Raise('Не удалось получить статью из ТС');  
  if NOT InsertComment(doc, TEST_WORD) then Raise('Не удалось установить комментарий');  
  if NOT SelectComment(doc) then Raise('Не удалось найти и выделить пользовательский комментарий!');    
  str := CopyToClipboard(doc, '', 'Trim:=true');
  if NOT StringCompare(TEST_WORD, str) then
  begin
    Log.Error('Комментарий не эталонный', str);
    Raise;
  end;
  //Выключаем режим просмотра польз. комментариев
  if NOT ClickByMainMenuItem('Документы\Комментарии\Скрыть мои комментарии') then Raise('Не удалось кликнуть в главном меню "Документы\Комментарии\Скрыть мои комментарии"');    
  if SelectComment(doc) then
  begin
    Log.Error('После выключения режима показа Моих комментарий всё равно отображён');
    Raise;
  end;
  //Включаем режим просмотра польз. комментариев
  if NOT ClickByMainMenuItem('Документы\Комментарии\Показать мои комментарии') then Raise('Не удалось кликнуть в главном меню "Документы\Комментарии\Показать мои комментарии"');      
  str := CopyToClipboard(doc, '', 'Trim:=true');
  if NOT StringCompare(TEST_WORD, str) then
  begin
    Log.Error('Комментарий не эталонный при ВКЛ режиме показа', str);
    Raise;
  end;
  Sys.Keys('[Del]');  
  result := true;
  GoToMainMenu;
except  
  Log.Message('HLTC73_20_3_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.20: Показ комментариев
  HLTC73.20.8: Проверить, что по умолчанию, комментарии ГАРАНТа показываются и режим показа включен
}
function HLTC73_20_8_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;  
  TEST_WORD = '*См. комментарий к преамбуле*';
var
  obj, doc;   
  x, y;
  str;
begin
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  doc := OpenInDocument('ТЕКСТ');
  result := IsExists(doc);
  if NOT result then Raise('Не удалось получить ТЕКСТ'); 
  obj := GetFromEditor('ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"'); 
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"'); 
  obj := GetToolBarObject(obj, 'BUTTON', 'Скрыть комментарии гаранта');
  result := IsExists(obj) and obj.Down;
  if NOT result then
  begin
    Log.Error('Кнопка "Скрыть комментарии гаранта" по умолчанию нажата, хотя не должна');  
    Raise('Кнопка "Скрыть комментарии гаранта" по умолчанию нажата, хотя не должна');
  end; 
  if NOT ClickNearIconOnSubInDocument(doc, 'КОММЕНТАРИЙ ГАРАНТА') then
  Raise('Не удалось кликнуть в докумнете возле иконки КОММЕНТАРИЙ ГАРАНТА');
  str := CopyToClipboard(doc, 'STRING', 'Trim := true');
  result := StringCompare(TEST_WORD, str);
  if NOT result then
  begin
    Log.Error('Текст комментарии ГАРАНТа при включенном режиме просмотра комментарии ГАРАНТа не равен эталонному', str);
    Raise('Текст комментарии ГАРАНТа при включенном режиме просмотра комментарии ГАРАНТа не равен эталонному');
  end;                           
  GoToMainMenu;                
except  
  Log.Message('HLTC73_20_8_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.20: Показ комментариев
	HLTC73.20.9: Проверить изменение режима показа комментариев:
		HLTC73.20.9.1: выключить ранее включенный режим показа комментариев ГАРАНТа, проверить, что   
			
      HLTC73.20.9.1.1: нопка режима показа комментариев ГАРАНТа стала отжатой
      HLTC73.20.9.1.2: комментарии ГАРАНТа стали скрыты в тексте документа.
      HLTC73.20.9.1.3: на полях документа появилась иконка о наличии комментария
      HLTC73.20.9.1.5: хинт к иконке о наличии комментария выполнен в стиле:
         «Комментарий ГАРАНТа:
         <текст комментария>»  
}
function HLTC73_20_9_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;  
  TEST_WORD = 'См. комментарий к преамбуле Конституции РФ';
  TEST_HINT = 
    'Комментарий Гаранта:*' + 
    'См. комментарий к преамбуле Конституции РФ*';    
  TEST_WORD_1 = 'принимаем КОНСТИТУЦИЮ РОССИЙСКОЙ ФЕДЕРАЦИИ.';  
var
  obj;
  sub, doc, toolbar;
  x, y;
  str;
begin                                   
try
  if NOT SetDefaultSettings then 
    Raise('Не удалось установить настройки по Дефолту!');
  result := false;
  //if NOT SetSettings ([(['ДОКУМЕНТ\МЕТКИ НА ПОЛЯХ', 'КОММЕНТАРИИ ГАРАНТА [CHECKBOX]', true])]) then 
  //  Raise('Не удалось в настройках включить показ КОММЕНТАРИИ ГАРАНТА [CHECKBOX');  
  if NOT OpenDocByNumber(DOC_NUM) then 
    Raise('Не удалось открыть документ по Alt+N');   
  doc := OpenInDocument('ТЕКСТ');  
  if NOT IsExists(doc) then Raise('Не удалось получить ТЕКСТ');   
  toolbar := GetFromEditor('ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');  
  if NOT IsExists(toolbar) then Raise('Не удалось получить ТУЛБАР документа'); 
  obj := GetToolBarObject(toolbar, 'BUTTON', 'Показать комментарии гаранта');
  //Если комментарии ВЫКЛючены, принудителшьно их включаем
  if IsExists(obj) AND obj.Visible then    
    if NOT ClickToolbarButton (toolbar, 'Показать комментарии Гаранта', 'SetToState:=pressed') then 
      Raise('Не удалось нажать (включить режим показа комментариев ГАРАНТа)');  
  //Комментарии ВКЛючены, проверяем что в этом момент на саб панели нет иконки
  sub := GetFromEditor('САБ ПАНЕЛЬ');  
  if NOT IsExists(sub) then Raise('Не удалось найти САБ панель');    
  if  MoveMouseToObject(sub, 'Juridical_Comments.bmp') then
  begin
    Log.Error('При ВКЛюченном режиме показа юр комментариев на саб панели ЕСТЬ иконка комментариев ГАРАНТа, хотя её быть не должно!');
    Raise('При ВКЛюченном режиме показа юр комментариев на саб панели ЕСТЬ иконка комментариев ГАРАНТа, хотя её быть не должно!');
  end;
  //Выключаем    
  if NOT ClickToolbarButton (toolbar, 'Скрыть комментарии Гаранта', 'SetToState:=released') then
  begin
    Log.Error('Не удалось отажать кнопку Показать\Скрыть комментарии Гаранта');
    Raise('Не удалось отжать кнопку Показать\Скрыть комментарии Гаранта');
  end;
  obj := GetToolBarObject(toolbar, 'BUTTON', 'Показать комментарии гаранта');  
  if NOT (IsExists(obj) and (NOT obj.Down)) then
  begin
    Log.Error('Кнопка "Показать комментарии гаранта" не отжата');  
    Raise('Кнопка "Показать комментарии гаранта" не отжата');
  end;  
  //Проверяем, что при ВЫКЛючениии показа иконка появилась
  if NOT MoveMouseToObject(sub, 'Juridical_Comments.bmp', 7, 9) then 
  begin
    Log.Error('Не удалось найти иконку комментариев ГАРАНТа на САБ панели');
    Raise('Не удалось найти иконку комментариев ГАРАНТа на САБ панели');
  end;    
  obj := GetFromShell('ОКНО ХИНТА');
  str := obj.wndCaption;  
  if NOT (isExists(obj) AND StringCompare(TEST_HINT, str) ) then
  begin
    Log.Error('Хинт не найден или его текст не равен эталонному: ' + str);
    Raise('Хинт не найден или его текст не равен эталонному'); 
  end;
  y := Sys.Desktop.MouseY;  
  x := Sys.Desktop.MouseX;
  common.ScreenToClient(doc, x, y);
  doc.Click(1,y);
  str := CopyToClipboard(doc, 'STRING', 'Trim := true');  
  if StringCompare(TEST_WORD, str) then
  begin
    Log.Error('юр. комментарий не скрылся, после отключения режима показа комментариев ГАРАНТа', str);
    Raise('юр. комментарий не скрылся, после отключения режима показа комментариев ГАРАНТа');
  end;    
  //Включаем режим просмотра юр. комментариев  
  if NOT ClickToolbarButton (toolbar, 'Показать комментарии Гаранта', 'SetToState:=pressed') then 
    Raise('Не удалось нажать кнопку Показать\Скрыть комментарии Гаранта');
  GoToMainMenu;
  result := true;
except  
  Log.Message('HLTC73_20_9_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 


{
HLTC73.20: Показ комментариев
	HLTC73.20.9: Проверить изменение режима показа комментариев:
		HLTC73.20.9.2: включить ранее выключенный режим показа комментариев ГАРАНТа, проверить, что:
			HLTC73.20.9.2.1: кнопка режима показа комментариев ГАРАНТа стала нажатой
      HLTC73.20.9.2.2: юридические комментарии стали показываться в тексте документа.
      HLTC73.20.9.2.3: на полях документа пропала иконка о наличии комментария             
}
function HLTC73_20_9_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;  
  TEST_WORD = '*См. комментарий к преамбуле*';
  TEST_HINT = 'Комментарий Гаранта';  
var
  obj;
  sub, doc;
  x, y;
  str;
  toolbar;
begin                                   
try
  result := false;
  if NOT SetDefaultSettings then 
    Raise('Не удалось установить настройки по Дефолту!');
  if NOT OpenDocByNumber(DOC_NUM) then 
    Raise('Не удалось открыть документ по Alt+N');   
  doc := OpenInDocument('ТЕКСТ');  
  if NOT IsExists(doc) then Raise('Не удалось получить ТЕКСТ');   
  toolbar := GetFromEditor('ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');  
  if NOT IsExists(toolbar) then Raise('Не удалось получить ТУЛБАР документа'); 
  obj := GetToolBarObject(toolbar, 'BUTTON', 'Скрыть комментарии гаранта');
  //Если комментарии ВКЛючены, принудителшьно их выключаем
  if IsExists(obj) AND obj.Visible then    
    if NOT ClickToolbarButton (toolbar, 'Скрыть комментарии Гаранта', 'SetToState:=released') then 
      Raise('Не удалось нажать (выключить режим показа комментариев ГАРАНТа)');  
  //Комментарии ВЫКЛючены, проверяем что в этом момент на саб панели ЕСТЬ иконка
  sub := GetFromEditor('САБ ПАНЕЛЬ');  
  if NOT IsExists(sub) then Raise('Не удалось найти САБ панель');
  //Проверяем, что при выключениии показа иконка появилась
  if NOT MoveMouseToObject(sub, 'Juridical_Comments.bmp', 7, 9) then 
  begin
    Log.Error('Не удалось найти иконку комментариев ГАРАНТа на САБ панели');
    Raise('Не удалось найти иконку комментариев ГАРАНТа на САБ панели');
  end;  
  //ВКЛючаем  
  if NOT ClickToolbarButton (toolbar, 'Показать комментарии Гаранта', 'SetToState:=pressed') then
  begin
    Log.Error('Не удалось отажать кнопку Показать\Скрыть комментарии Гаранта');
    Raise('Не удалось отжать кнопку Показать\Скрыть комментарии Гаранта');
  end;
  obj := GetToolBarObject(toolbar, 'BUTTON', 'Скрыть комментарии гаранта');  
  if NOT (IsExists(obj) and (obj.Down)) then
  begin
    Log.Error('Кнопка "Скрыть комментарии гаранта" не нажата');  
    Raise('Кнопка "Скрыть комментарии гаранта" не нажата');
  end;
  //Проверяем, что текст комментариев показывается, предварительно включив в настройках показ иконки на полях
  if NOT ClickNearIconOnSubInDocument(doc, 'КОММЕНТАРИЙ ГАРАНТА', sub) then
  begin
    Log.Error('Не удалось кликнуть в докумнете возле иконки КОММЕНТАРИЙ ГАРАНТА');
    Raise;
  end;     
  str := CopyToClipboard(doc, 'STRING', 'Trim := true');
  if NOT StringCompare(TEST_WORD, str) then
  begin  
    Log.Error('юр. комментарий не показывается, после вкл. режима показа комментариев ГАРАНТа или его текст не равен эталонному', str);
    Raise('юр. комментарий не показывается, после вкл. режима показа комментариев ГАРАНТа или его текст не равен эталонному');
  end;
  //Восстанавливаем настройки. что бы сбросить показ иконки на полях
  if NOT SetDefaultSettings then 
    Raise('Не удалось установить настройки по Дефолту!');
  //Проверяем, что иконки нет    
  if  MoveMouseToObject(sub, 'Juridical_Comments.bmp') then
  begin
    Log.Error('При ВКЛюченном режиме показа комментариев ГАРАНТа на саб панели ЕСТЬ иконка юр коментариев, хотя её быть не должно!');
    Raise('При ВКЛюченном режиме показа комментариев ГАРАНТа на саб панели ЕСТЬ иконка юр коментариев, хотя её быть не должно!');
  end;   
  result := true;
except  
  Log.Message('HLTC73_20_9_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.20: Показ комментариев
	HLTC73.20.9: Проверить изменение режима показа комментариев:
		HLTC73.20.9.3: выключить ранее включенный режим показа моих комментариев, проверить, что
    
			HLTC73.20.9.3.1: кнопка режима показа моих комментариев стала отжатой
      HLTC73.20.9.3.2: мои комментарии стали скрыты в тексте документа.
      HLTC73.20.9.3.3: на полях документа появилась иконка о наличии комментария      
      HLTC73.20.9.3.5: хинт к иконке о наличии комментария выполнен в стиле:
       «Мой комментарий:
       <текст комментария>»
}
function HLTC73_20_9_3_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;  
  TEST_WORD = 'Тест работы пользовательских комментариев HLTC73.20.9.3';
  TEST_WORD_1 = 'Мы, многонациональный народ';  
var
  obj;
  sub, doc, toolbar;
  x, y;
  str;
begin                                   
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');   
  doc := OpenInDocument('ТЕКСТ'); 
  result := IsExists(doc);
  if NOT result then Raise('Не удалось получить ТЕКСТ'); 
  Sys.Keys('^[Home][Enter]');
  WaitForConfirmationWindow(Options.Run.Timeout div 30, 'Да');
  Delay(Options.Run.Timeout div 60);
  Sys.Keys(TEST_WORD);  
  toolbar := GetFromEditor('ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');
  result := IsExists(toolbar);
  if NOT result then Raise('Не удалось получить ТУЛБАР документа');   
  result := ClickToolbarButton (toolbar, 'Скрыть мои комментарии', 'SetToState:=released');  
  if NOT result then
  begin
    Log.Error('Не удалось отажать кнопку Показать\Скрыть мои комментарии');
    Raise('Не удалось отжать кнопку Показать\Скрыть мои комментарии');
  end;
  obj := GetToolBarObject(toolbar, 'BUTTON', 'Показать мои комментарии');
  result := IsExists(obj) and (NOT obj.Down);
  if NOT result then
  begin
    Log.Error('Кнопка "Показать мои комментарии" не отжата');  
    Raise('Кнопка "Показать мои комментарии" не отжата');
  end;
  sub := GetFromEditor('САБ ПАНЕЛЬ'); 
  result := IsExists(sub);
  if NOT result then Raise('Не удалось найти САБ панель');
  result := MoveMouseToObject(sub, 'User_Comments.bmp', 5, 5);
  if NOT result then 
  begin
    Log.Error('Не удалось найти иконку моих комментариев на САБ панели');
    Raise('Не удалось найти иконку моих комментариев на САБ панели');
  end;  
  obj := GetFromShell('ОКНО ХИНТА');
  str := obj.wndCaption;
  result := isExists(obj) AND StringCompare('Мой комментарий:*' + TEST_WORD + '*', str);
  if NOT result then
  begin
    Log.Error('Хинт не найден или его текст не равен эталонному : ' + str);
    Raise('Хинт не найден или его текст не равен эталонному :' + str); 
  end;
  y := Sys.Desktop.MouseY;
  x := Sys.Desktop.MouseX;
  common.ScreenToClient(doc, x, y);
  doc.Click(1,y);
  str := CopyToClipboard(doc, 'STRING', 'Trim := true');
  result := NOT StringCompare(TEST_WORD, str);
  if NOT result then
  begin
    Log.Error('мой комментарий не скрылся, после отключения режима показа моих комментариев', str);
    Raise('мой комментарий не скрылся, после отключения режима показа моих комментариев');
  end;  
  //Включаем режим просмотра польз. комментариев
  if NOT ClickToolbarButton (toolbar, 'Показать мои комментарии', 'SetToState:=pressed') then
    Raise('Не удалось нажать кнопку Показать\Скрыть мои комментарии');
  if DeleteAllUserCommentsFromContents < 1 then
    Log.Warning('Не было удалено ни одного комментария');
  GoToMainMenu;
except
  Log.Message('HLTC73_20_9_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  DeleteAllUserCommentsFromContents;                              
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.20: Показ комментариев
	HLTC73.20.9: включить ранее выключенный режим показа моих комментариев, проверить, что:
		HLTC73.20.9.4: включить ранее выключенный режим показа пользовательских комментариев, проверить, что:
			HLTC73.20.9.4.1: кнопка режима показа пользовательских комментариев стала нажатой
      HLTC73.20.9.4.2: мои комментарии стали показываться в тексте документа.
      HLTC73.20.9.4.3: на полях документа пропала иконка о наличии комментария          
}
function HLTC73_20_9_4_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;  
  TEST_WORD = 'Тест пользов. комментариев HLTC73.20.9.4';
  TEST_WORD_1 = 'КОНСТИТУЦИЯ РОССИЙСКОЙ ФЕДЕРАЦИИ'; 
  CONFIRMATION = 'Показ*комментариев сейчас выключен, Вы хотите его включить?*';
var
  obj;
  sub, doc, toolbar;
  x, y;
  str;
begin                                   
try  
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');   
  doc := OpenInDocument('ТЕКСТ'); 
  result := IsExists(doc);
  if NOT result then Raise('Не удалось получить ТЕКСТ'); 
  toolbar := GetFromEditor('ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');
  result := IsExists(toolbar);
  if NOT result then Raise('Не удалось получить ТУЛБАР документа'); 
  obj := GetToolBarObject(toolbar, 'BUTTON', 'Скрыть мои комментарии');
  if IsExists(obj) AND obj.Visible then
  begin
    result := ClickToolbarButton (toolbar, 'Скрыть мои комментарии', 'SetToState:=released');
    if NOT result then Raise('Не удалось отжать (выключить режим показа моих комментариев)');  
  end;
  doc.SetFocus;
  Sys.Keys('^[Home][Enter]');
  str := WaitForConfirmationWindow(Options.Run.Timeout div 30, 'Да');
  result := StringCompare(CONFIRMATION, str);
  if NOT result then
  begin
    Log.Error('Текст подтверждения не равен эталонному', str);
    Raise('Текст подтверждения не равен эталонному');
  end;
  Delay(Options.Run.Timeout div 60);
  Sys.Keys(TEST_WORD);         
  obj := GetToolBarObject(toolbar, 'BUTTON', 'Скрыть мои комментарии');
  result := IsExists(obj) and (obj.Down);
  if NOT result then
  begin
    Log.Error('Кнопка "Показать мои комментарии" не нажата');  
    Raise('Кнопка "Показать мои комментарии" не нажата');
  end; 
  sub := GetFromEditor('САБ ПАНЕЛЬ'); 
  result := IsExists(sub);
  if NOT result then Raise('Не удалось найти САБ панель');
  result := NOT MoveMouseToObject(sub, 'User_Comments.bmp', 5, 7);
  if NOT result then 
  begin
    Log.Error('Удалось найти иконку  моих комментариев на САБ панели');
    Raise('Удалось найти иконку  моих комментариев на САБ панели');
  end;
  str:= SelectTextComment(doc);
  result := StringCompare(TEST_WORD, str);
  if NOT result then
    Log.Error('Мой комментарий не показывается, после вкл. режима показа  моих комментариев или его текст не равен эталонному', str);
  if DeleteAllUserCommentsFromContents < 1 then
    Log.Warning('Не было удалено ни одного комментария');
  GoToMainMenu;
except  
  Log.Message('HLTC73_20_9_4_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  DeleteAllUserCommentsFromContents;  
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.20: Показ комментариев(для стандартной конфигурации)
	HLTC73.20.10: Проверить, что отключенный режим показа комментариев ГАРАНТа:
		 HLTC73.20.10.1: включается при переходе по ссылке в другие документы, в которых есть комментарии ГАРАНТа
     В документе 2002 есть ссылка на 2001 (в начале). И там и там есть комментарии ГАРАНТа.
}
function HLTC73_20_10_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 2002;  
  CONTEXT = 'ССЫЛКА НА 2001';
  TEST_CAPTION = '*Документ 2001*';
var
  obj;
  str;
begin                                   
try
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');        
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  if NOT SetCommentsMode(obj, JUROR_COMMENTS, MODE_HIDDEN) then 
    Raise('Не удалось выключить режим показа комментариев ГАРАНТа'); 
  if NOT ClickByHyperLink(obj, CONTEXT) then Raise('Не удалось кликнуть по искомой гиперссылке');  
  str := GetMainWindow.Caption;
  if NOT StringCompare(TEST_CAPTION, str) then Raise('Caption окна не эталонный: ' + str);
  
  if NOT (GetCommentsMode(obj, JUROR_COMMENTS) = MODE_SHOWN) then
  begin
    Log.Error('Режим просмотра комментариев ГАРАНТа не включился при переходе по ссылке в другой документ');
    Raise('Режим просмотра комментариев ГАРАНТа не включился при переходе по ссылке в другой документ');
  end;   
  result := true;  
  GoToMainMenu;
except  
  Log.Message('HLTC73_20_10_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  if IsExists(obj) then SetCommentsMode(obj, JUROR_COMMENTS, MODE_SHOWN);
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.20: Показ комментариев(для стандартной конфигурации)
	HLTC73.20.10: Проверить, что отключенный режим показа комментариев ГАРАНТа:
		 HLTC73.20.10.2: включается при переходе по ссылке в другие документы, в которых нет комментариев ГАРАНТа

    Проверить можно на документе 2001
     Ближе к середине документа, будет заголовок "Ссылки на книги".
     Под ним ссылка "Смешанная вина и ст. 683 т. Х ч. 1" ведёт на документ, где нет комментариев ГАРАНТа.
}
function HLTC73_20_10_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 2001;  
  CONTEXT = 'Смешанная вина и ст. 683 т.';
  TEST_CAPTION = '*Смешанная вина и ст. 683 т.*';
var
  obj;
  str;
begin                                   
try
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');        
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  if NOT SetCommentsMode(obj, JUROR_COMMENTS, MODE_HIDDEN) then 
    Raise('Не удалось выключить режим показа комментариев ГАРАНТа'); 
  if NOT ClickByHyperLink(obj, CONTEXT) then Raise('Не удалось кликнуть по искомой гиперссылке');  
  str := GetMainWindow.Caption;
  if NOT StringCompare(TEST_CAPTION, str) then Raise('Caption окна не эталонный: ' + str);
  
  if NOT (GetCommentsMode(obj, JUROR_COMMENTS) = MODE_SHOWN) then
  begin
    Log.Error('Режим просмотра комментариев ГАРАНТа. не включился при переходе по ссылке в другой документ');
    Raise('Режим просмотра комментариев ГАРАНТа. не включился при переходе по ссылке в другой документ');
  end; 
   
  result := true;  
  GoToMainMenu;
except  
  Log.Message('HLTC73_20_10_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  if IsExists(obj) then SetCommentsMode(obj, JUROR_COMMENTS, MODE_SHOWN);
  result := false;
  CommonExceptionHandler;             
end;
end;  

{
HLTC73.20: Показ комментариев(для стандартной конфигурации)
	HLTC73.20.10: Проверить, что отключенный режим показа комментариев ГАРАНТа:
		 HLTC73.20.10.3: не включается при переходе по истории в другие документы, в которых есть комментарии ГАРАНТа
}
function HLTC73_20_10_3_Execute (var  CurrentState: OleVariant): OleVariant;
const
  TEST_CAPTION = '*Договор "О создании*';
  DOC_NUM = 1055132;
  DOC_NUM_1 = 10003000;  
var
  obj;
  sub,toolbar;
  str;
begin                                   
try
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');        
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  if NOT SetCommentsMode(obj, JUROR_COMMENTS, MODE_HIDDEN) then 
    Raise('Не удалось выключить режим показа комментариев ГАРАНТа');
    
  if NOT OpenDocByNumber(DOC_NUM_1) then Raise('Не удалось открыть документ по Alt+N');
  if NOT GoByHistory('НАЗАД') then Raise('Не удалось перейти по истории назад'); 
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА после перехода по истории');
    
  str := GetMainWindow.Caption;
  if NOT StringCompare(TEST_CAPTION, str) then Raise('Caption окна не эталонный: ' + str);
  
  
  if NOT (GetCommentsMode(obj, JUROR_COMMENTS) = MODE_HIDDEN) then
  begin
    Log.Error('Режим просмотра комментариев ГАРАНТа Включился при переходе по истории');
    Raise('Режим просмотра комментариев ГАРАНТа Включился при переходе по истории');
  end; 
   
  result := true;  
  GoToMainMenu;
except  
  Log.Message('HLTC73_20_10_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  if IsExists(obj) then SetCommentsMode(obj, JUROR_COMMENTS, MODE_SHOWN);
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.20: Показ комментариев(для стандартной конфигурации)
	HLTC73.20.10: Проверить, что отключенный режим показа комментариев ГАРАНТа:
		 HLTC73.20.10.4: не включается при переходе по истории в другие документы, в которых нет комментариев ГАРАНТа
        Документ 6085115 не содержит таких комментариев
}
function HLTC73_20_10_4_Execute (var  CurrentState: OleVariant): OleVariant;
const      
  TEST_CAPTION = '*Смешанная вина и ст. 683 т.*';
  DOC_NUM = 6085115;
  DOC_NUM_1 = 10003000;  
var
  obj;
  sub,toolbar;
  str;
begin                                   
try
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');        
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  if NOT SetCommentsMode(obj, JUROR_COMMENTS, MODE_HIDDEN) then 
    Raise('Не удалось выключить режим показа комментариев ГАРАНТа');
    
  if NOT OpenDocByNumber(DOC_NUM_1) then Raise('Не удалось открыть документ по Alt+N');
  if NOT GoByHistory('НАЗАД') then Raise('Не удалось перейти по истории назад'); 
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА после перехода по истории');
    
  str := GetMainWindow.Caption;
  if NOT StringCompare(TEST_CAPTION, str) then Raise('Caption окна не эталонный: ' + str);
  
  
  if NOT (GetCommentsMode(obj, JUROR_COMMENTS) = MODE_HIDDEN) then
  begin
    Log.Error('Режим просмотра комментариев ГАРАНТа Включился при переходе по истории');
    Raise('Режим просмотра комментариев ГАРАНТа Включился при переходе по истории');
  end; 
   
  result := true;  
  GoToMainMenu;
except  
  Log.Message('HLTC73_20_10_4_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  if IsExists(obj) then SetCommentsMode(obj, JUROR_COMMENTS, MODE_SHOWN);
  result := false;
  CommonExceptionHandler;             
end;
end;

{
HLTC73.20: Показ комментариев(для стандартной конфигурации)
	HLTC73.20.10: Проверить, что отключенный режим показа комментариев ГАРАНТа:
		 HLTC73.20.10.5: ключается при переходе по CTRL+LEFT/CTRL+RIGHT в другие документы, в которых есть комментарии ГАРАНТа
}
function HLTC73_20_10_5_Execute (var  CurrentState: OleVariant): OleVariant;
const  
  DOC_NAME = 'Налоговый кодекс Российской Федерации*';  
  DOC_NAME_WITH_JUROR_COMMENT = '*Воздушный кодекс РФ*'; //сначало * - потому что, сравниваем в Caption
var
  obj;
  str;
begin                                   
try
  if NOT OpenObjectFromFolder(LIST_ALLCODES, OpenMenuTab) then Raise('Не удалось открыть список из навигатора');
  obj := OpenInList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(obj) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');
  if NOT OpenDocFromList(DOC_NAME, obj) then 
    Raise('Не удалось открыть документ "' + DOC_NAME + '" из списка');
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  if NOT SetCommentsMode(obj, JUROR_COMMENTS, MODE_HIDDEN) then 
    Raise('Не удалось выключить режим показа комментариев ГАРАНТа');
    
  if NOT PressKeyWithCheck(['^[Right]']) then Raise('Не удалось переключиться на Следующий документ в списке но нажатию Ctr+Right');   
  str := GetMainWindow.Caption;
  if NOT StringCompare(DOC_NAME_WITH_JUROR_COMMENT, str) then Raise('Caption окна не эталонный: ' + str);
  if NOT (GetCommentsMode(obj, JUROR_COMMENTS) = MODE_SHOWN) then
  begin
    Log.Error('Режим просмотра комментариев ГАРАНТа не включился при переходе к следующему документу по Ctrl+Right');
    Raise('Режим просмотра комментариев ГАРАНТа не включился при переходе к следующему документу по Ctrl+Right');
  end;
  
  if NOT PressKeyWithCheck(['^[Right]']) then Raise('Не удалось переключиться на Следующий документ в списке но нажатию Ctr+Right');
  if NOT SetCommentsMode(obj, JUROR_COMMENTS, MODE_HIDDEN) then 
    Raise('Не удалось выключить режим показа юр. комментариев');
  if NOT PressKeyWithCheck(['^[Left]']) then Raise('Не удалось переключиться на Предидущий документ в списке но нажатию Ctr+Left');
  str := GetMainWindow.Caption;
  if NOT StringCompare(DOC_NAME_WITH_JUROR_COMMENT, str) then Raise('Caption окна не эталонный: ' + str);
  if NOT (GetCommentsMode(obj, JUROR_COMMENTS) = MODE_SHOWN) then
  begin
    Log.Error('Режим просмотра юр.коммент. не включился при переходе к следующему документу по Ctrl+Right');
    Raise('Режим просмотра юр.коммент. не включился при переходе к следующему документу по Ctrl+Right');
  end;
  result := true;  
  CloseTabIfNeeded;
except  
  Log.Message('HLTC73_20_10_5_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  if IsExists(obj) then SetCommentsMode(obj, JUROR_COMMENTS, MODE_SHOWN);
  result := false;
  CommonExceptionHandler;             
end;
  GoToMainMenuWithCloseTabsExceptOne;
end;

{
HLTC73.20: Показ комментариев(для стандартной конфигурации)
	HLTC73.20.10: Проверить, что отключенный режим показа комментариев ГАРАНТа:
		 HLTC73.20.10.6: включается при переходе по CTRL+LEFT/CTRL+RIGHT в другие документы, в которых нет комментариев ГАРАНТа
}
function HLTC73_20_10_6_Execute (var  CurrentState: OleVariant): OleVariant;
const  
  DOC_NAME = 'Документ 58015*';  
  DOC_NAME_WITHOUT_JUROR_COMMENT = '*Документ 5801*';
var
  obj;
  str;
begin                                   
try
  if NOT OpenObjectFromFolder(LIST_SUDEBN_PRACTICE, OpenMenuTab) then Raise('Не удалось открыть список из навигатора');
  obj := OpenInList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(obj) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');  
  if NOT OpenDocFromList(DOC_NAME, obj) then 
    Raise('Не удалось открыть документ "' + DOC_NAME + '" из списка');      
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  if NOT SetCommentsMode(obj, JUROR_COMMENTS, MODE_HIDDEN) then 
    Raise('Не удалось выключить режим показа комментариев ГАРАНТа');
    
  if NOT PressKeyWithCheck(['^[Right]']) then Raise('Не удалось переключиться на Следующий документ в списке но нажатию Ctr+Right');   
  str := GetMainWindow.Caption;
  if NOT StringCompare(DOC_NAME_WITHOUT_JUROR_COMMENT, str) then Raise('Caption окна не эталонный: ' + str);
  if NOT (GetCommentsMode(obj, JUROR_COMMENTS) = MODE_SHOWN) then
  begin
    Log.Error('Режим просмотра комментариев ГАРАНТа не включился при переходе к следующему документу по Ctrl+Right');
    Raise('Режим просмотра комментариев ГАРАНТа не включился при переходе к следующему документу по Ctrl+Right');
  end; 
  
  if NOT PressKeyWithCheck(['^[Right]']) then Raise('Не удалось переключиться на Следующий документ в списке но нажатию Ctr+Right');
  if NOT SetCommentsMode(obj, JUROR_COMMENTS, MODE_HIDDEN) then 
    Raise('Не удалось выключить режим показа комментариев ГАРАНТа');
  if NOT PressKeyWithCheck(['^[Left]']) then Raise('Не удалось переключиться на Предидущий документ в списке но нажатию Ctr+Left');
  str := GetMainWindow.Caption;
  if NOT StringCompare(DOC_NAME_WITHOUT_JUROR_COMMENT, str) then Raise('Caption окна не эталонный: ' + str);
  if NOT (GetCommentsMode(obj, JUROR_COMMENTS) = MODE_SHOWN) then
  begin
    Log.Error('Режим просмотра комментариев ГАРАНТа не включился при переходе к следующему документу по Ctrl+Right');
    Raise('Режим просмотра комментариев ГАРАНТа не включился при переходе к следующему документу по Ctrl+Right');
  end;
  result := true;  
  CloseTabIfNeeded;
except  
  Log.Message('HLTC73_20_10_6_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  if IsExists(obj) then SetCommentsMode(obj, JUROR_COMMENTS, MODE_SHOWN);
  result := false;
  CommonExceptionHandler;             
end;
  GoToMainMenuWithCloseTabsExceptOne;
end;

{
HLTC73.20: Показ комментариев(для стандартной конфигурации)
	HLTC73.20.10: Проверить, что отключенный режим показа комментариев ГАРАНТа:
		 HLTC73.20.10.7: включается при следующих действиях:
       1. Перейти из документа в ОМ
       2. Открыть ППР
       3. Построить список 
       4. Открыть документ
}
function HLTC73_20_10_7_Execute (var  CurrentState: OleVariant): OleVariant;
const      
  DOC_NUM = 1055132;
  DOC_NAME = 'Конституция Российской Федерации (принята на всенародном*';
var
  obj;
  str;
begin                                   
try       
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  if NOT SetCommentsMode(obj, JUROR_COMMENTS, MODE_HIDDEN) then 
    Raise('Не удалось выключить режим показа комментариев ГАРАНТа');
  if NOT GoToMainMenu then Raise('Не удалось перейти в ОМ');
  if NOT GoToPPR then Raise('Не удалось получить ППР');
  Sys.Keys('Конституция Российской Федерации [Enter]');
  obj := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(obj) then Raise('Не удалось получить список после ППР');  
  
  if NOT OpenDocFromList(DOC_NAME, obj) then 
    Raise('Не удалось открыть документ "' + DOC_NAME + '" из списка');
      
  str := GetMainWindow.Caption;
  if NOT StringCompare('*' + DOC_NAME, str) then Raise('Caption окна не эталонный: ' + str);    
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');  
  if NOT (GetCommentsMode(obj, JUROR_COMMENTS) = MODE_SHOWN) then
  begin
    Log.Error('Режим просмотра комментариев ГАРАНТа не включился');
    Raise('Режим просмотра комментариев ГАРАНТа не включился');
  end;
  result := true;  
  CloseTabIfNeeded;
except  
  Log.Message('HLTC73_20_10_7_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
  GoToMainMenuWithCloseTabsExceptOne;
end; 


{
HLTC73.20: Показ комментариев(для стандартной конфигурации)
	HLTC73.20.11: Проверить, что включенный режим показа комментариев ГАРАНТа не отключается автоматически при переходе:
		 HLTC73.20.11.1: по ссылке в другие документы, в которых есть комментарии ГАРАНТа
}
function HLTC73_20_11_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;  
  CONTEXT = 'Уставом';
  TEST_CAPTION = '*Устав Союза Беларуси и России (Москва, 23 мая 1997 г.)';
var
  obj;
  str;
begin                                   
try
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');        
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  if NOT SetCommentsMode(obj, JUROR_COMMENTS, MODE_SHOWN) then 
    Raise('Не удалось включить режим показа комментарии ГАРАНТа'); 
  if NOT ClickByHyperLink(obj, CONTEXT) then Raise('Не удалось кликнуть по искомой гиперссылке');  
  str := GetMainWindow.Caption;
  if NOT StringCompare(TEST_CAPTION, str) then Raise('Caption окна не эталонный: ' + str);
  
  if NOT (GetCommentsMode(obj, JUROR_COMMENTS) = MODE_SHOWN) then
  begin
    Log.Error('Режим просмотра комментарии ГАРАНТа не включился при переходе по ссылке в другой документ');
    Raise('Режим просмотра комментарии ГАРАНТа не включился при переходе по ссылке в другой документ');
  end; 
   
  result := true;  
  GoToMainMenu;
except  
  Log.Message('HLTC73_20_11_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  if IsExists(obj) then SetCommentsMode(obj, JUROR_COMMENTS, MODE_SHOWN);
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.20: Показ комментариев(для стандартной конфигурации)
	HLTC73.20.11: Проверить, что включенный режим показа комментариев ГАРАНТа не отключается автоматически при переходе:
		 HLTC73.20.11.2: по ссылке в другие документы, в которых нет комментариев ГАРАНТа
        Проверить можно на документе 2001
        Ближе к середине документа, будет заголовок «Ссылки на книги».
        Под ним ссылка «Смешанная вина и ст. 683 т. Х ч. 1» ведёт на документ, где нет комментариев ГАРАНТа.
}
function HLTC73_20_11_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 2001;  
  CONTEXT = 'Смешанная вина и ст. 683 т. Х ч. 1';
  TEST_CAPTION = '*Смешанная вина и ст. 683 т. Х ч. 1,*';
var
  obj;
  str;
begin                                   
try
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');        
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  if NOT SetCommentsMode(obj, JUROR_COMMENTS, MODE_SHOWN) then 
    Raise('Не удалось включить режим показа комментариев ГАРАНТа'); 
  if NOT ClickByHyperLink(obj, CONTEXT) then Raise('Не удалось кликнуть по искомой гиперссылке');  
  str := GetMainWindow.Caption;
  if NOT StringCompare(TEST_CAPTION, str) then Raise('Caption окна не эталонный: ' + str);
  
  if NOT (GetCommentsMode(obj, JUROR_COMMENTS) = MODE_SHOWN) then
  begin
    Log.Error('Режим просмотра комментариев ГАРАНТа не включился при переходе по ссылке в другой документ');
    Raise('Режим просмотра комментариев ГАРАНТа не включился при переходе по ссылке в другой документ');
  end; 
   
  result := true;  
  GoToMainMenu;
except  
  Log.Message('HLTC73_20_11_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  if IsExists(obj) then SetCommentsMode(obj, JUROR_COMMENTS, MODE_SHOWN);
  result := false;
  CommonExceptionHandler;             
end;
end;  

{
HLTC73.20: Показ комментариев(для стандартной конфигурации)
	HLTC73.20.11: Проверить, что включенный режим показа комментариев ГАРАНТа не отключается автоматически при переходе:
		 HLTC73.20.11.3: по истории в другие документы, в которых есть комментарии ГАРАНТа
}
function HLTC73_20_11_3_Execute (var  CurrentState: OleVariant): OleVariant;
const
  TEST_CAPTION = '*Договор "О создании*';
  DOC_NUM = 1055132;
  DOC_NUM_1 = 10003000;  
var
  obj;
  sub,toolbar;
  str;
begin                                   
try
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');        
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  if NOT SetCommentsMode(obj, JUROR_COMMENTS, MODE_SHOWN) then 
    Raise('Не удалось включить режим показа комментариев ГАРАНТа');
    
  if NOT OpenDocByNumber(DOC_NUM_1) then Raise('Не удалось открыть документ по Alt+N');
  if NOT GoByHistory('НАЗАД') then Raise('Не удалось перейти по истории назад'); 
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА после перехода по истории');
    
  str := GetMainWindow.Caption;
  if NOT StringCompare(TEST_CAPTION, str) then Raise('Caption окна не эталонный: ' + str);
  
  
  if NOT (GetCommentsMode(obj, JUROR_COMMENTS) = MODE_SHOWN) then
  begin
    Log.Error('Режим просмотра комментариев ГАРАНТа Выключился при переходе по истории');
    Raise('Режим просмотра  комментариев ГАРАНТа Выключился при переходе по истории');
  end; 
   
  result := true;  
  GoToMainMenu;
except  
  Log.Message('HLTC73_20_11_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  if IsExists(obj) then SetCommentsMode(obj, JUROR_COMMENTS, MODE_SHOWN);
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.20: Показ комментариев(для стандартной конфигурации)
	HLTC73.20.11: Проверить, что включенный режим показа комментариев ГАРАНТа не отключается автоматически при переходе:
		 HLTC73.20.11.4: по истории в другие документы, в которых нет комментариев ГАРАНТа
     В документе 6085115 нет комментариев ГАРАНТа.
}
function HLTC73_20_11_4_Execute (var  CurrentState: OleVariant): OleVariant;
const      
  TEST_CAPTION = '*Смешанная вина и ст. 683 т. Х ч. 1,*';
  DOC_NUM = 6085115;
  DOC_NUM_1 = 10003000;  
var
  obj;
  sub,toolbar;
  str;
begin                                   
try
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');        
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  if NOT SetCommentsMode(obj, JUROR_COMMENTS, MODE_SHOWN) then 
    Raise('Не удалось включить режим показа комментариев ГАРАНТа');
    
  if NOT OpenDocByNumber(DOC_NUM_1) then Raise('Не удалось открыть документ по Alt+N');
  if NOT GoByHistory('НАЗАД') then Raise('Не удалось перейти по истории назад'); 
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА после перехода по истории');
    
  str := GetMainWindow.Caption;
  if NOT StringCompare(TEST_CAPTION, str) then Raise('Caption окна не эталонный: ' + str);
  
  
  if NOT (GetCommentsMode(obj, JUROR_COMMENTS) = MODE_SHOWN) then
  begin
    Log.Error('Режим просмотра комментариев ГАРАНТа Выключился при переходе по истории');
    Raise('Режим просмотра комментариев ГАРАНТа Выключился при переходе по истории');
  end; 
   
  result := true;  
  GoToMainMenu;
except  
  Log.Message('HLTC73_20_11_4_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  if IsExists(obj) then SetCommentsMode(obj, JUROR_COMMENTS, MODE_SHOWN);
  result := false;
  CommonExceptionHandler;             
end;
end;

{
HLTC73.20: Показ комментариев(для стандартной конфигурации)
	HLTC73.20.11: Проверить, что включенный режим показа комментариев ГАРАНТа не отключается автоматически при переходе:
		 HLTC73.20.11.5: через список (CTRL-LEFT, CTRL-RIGHT) в другие документы, в которых есть комментарии ГАРАНТа
}
function HLTC73_20_11_5_Execute (var  CurrentState: OleVariant): OleVariant;
const  
  DOC_NAME = 'Налоговый кодекс Российской Федерации*';  
  DOC_NAME_WITH_JUROR_COMMENT = '*Воздушный кодекс РФ*'; //сначало * - потому что, сравниваем в Caption
var
  obj;
  str;
begin                                   
try
  if NOT OpenObjectFromFolder(LIST_ALLCODES, OpenMenuTab) then Raise('Не удалось открыть список из навигатора');
  obj := OpenInList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(obj) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');
  if NOT OpenDocFromList(DOC_NAME, obj) then 
    Raise('Не удалось открыть документ "' + DOC_NAME + '" из списка');  
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  if NOT SetCommentsMode(obj, JUROR_COMMENTS, MODE_SHOWN) then 
    Raise('Не удалось включить режим показа комментариев ГАРАНТа');
    
  if NOT PressKeyWithCheck(['^[Right]']) then Raise('Не удалось переключиться на Следующий документ в списке но нажатию Ctr+Right');   
  str := GetMainWindow.Caption;
  if NOT StringCompare(DOC_NAME_WITH_JUROR_COMMENT, str) then Raise('Caption окна не эталонный: ' + str);
  if NOT (GetCommentsMode(obj, JUROR_COMMENTS) = MODE_SHOWN) then
  begin
    Log.Error('Режим просмотра комментариев ГАРАНТа не включился при переходе к следующему документу по Ctrl+Right');
    Raise('Режим просмотра комментариев ГАРАНТа не включился при переходе к следующему документу по Ctrl+Right');
  end; 
  
  if NOT PressKeyWithCheck(['^[Right]']) then Raise('Не удалось переключиться на Следующий документ в списке но нажатию Ctr+Right');
  if NOT SetCommentsMode(obj, JUROR_COMMENTS, MODE_SHOWN) then 
    Raise('Не удалось включить режим показа комментариев ГАРАНТа');
  if NOT PressKeyWithCheck(['^[Left]']) then Raise('Не удалось переключиться на Предидущий документ в списке но нажатию Ctr+Left');
  str := GetMainWindow.Caption;
  if NOT StringCompare(DOC_NAME_WITH_JUROR_COMMENT, str) then Raise('Caption окна не эталонный: ' + str);
  if NOT (GetCommentsMode(obj, JUROR_COMMENTS) = MODE_SHOWN) then
  begin
    Log.Error('Режим просмотра комментариев ГАРАНТа не включился при переходе к следующему документу по Ctrl+Right');
    Raise('Режим просмотра комментариев ГАРАНТа не включился при переходе к следующему документу по Ctrl+Right');
  end;
  result := true;  
  CloseTabIfNeeded; ;
except  
  Log.Message('HLTC73_20_11_5_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  if IsExists(obj) then SetCommentsMode(obj, JUROR_COMMENTS, MODE_SHOWN);
  result := false;
  CommonExceptionHandler;             
end;
  GoToMainMenuWithCloseTabsExceptOne;
end;

{
HLTC73.20: Показ комментариев(для стандартной конфигурации)
	HLTC73.20.11: Проверить, что включенный режим показа комментариев ГАРАНТа не отключается автоматически при переходе:
    HLTC73.20.11.6: через список (CTRL-LEFT, CTRL-RIGHT) в другие документы, в которых нет комментариев ГАРАНТа
}
function HLTC73_20_11_6_Execute (var  CurrentState: OleVariant): OleVariant;
const  
  DOC_NAME = 'Документ 58017*';  
  DOC_NAME_WITHOUT_JUROR_COMMENT = '*Документ 58015*';
var
  obj;
  str;
begin                                   
try
  if NOT OpenObjectFromFolder(LIST_SUDEBN_PRACTICE, OpenMenuTab) then Raise('Не удалось открыть список из навигатора');
  obj := OpenInList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(obj) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');
  if NOT OpenDocFromList(DOC_NAME, obj) then 
    Raise('Не удалось открыть документ "' + DOC_NAME + '" из списка');
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  if NOT SetCommentsMode(obj, JUROR_COMMENTS, MODE_SHOWN) then 
    Raise('Не удалось включить режим показа комментариев ГАРАНТа');
    
  if NOT PressKeyWithCheck(['^[Left]']) then Raise('Не удалось переключиться на Следующий документ в списке но нажатию Ctr+Right');   
  str := GetMainWindow.Caption;
  if NOT StringCompare(DOC_NAME_WITHOUT_JUROR_COMMENT, str) then Raise('Caption окна не эталонный: ' + str);
  if NOT (GetCommentsMode(obj, JUROR_COMMENTS) = MODE_SHOWN) then
  begin
    Log.Error('Режим просмотра комментариев ГАРАНТа не включился при переходе к следующему документу по Ctrl+Left');
    Raise('Режим просмотра комментариев ГАРАНТа не включился при переходе к следующему документу по Ctrl+Leftt');
  end; 
  
  if NOT PressKeyWithCheck(['^[Left]']) then Raise('Не удалось переключиться на Следующий документ в списке но нажатию Ctr+Left');
  if NOT SetCommentsMode(obj, JUROR_COMMENTS, MODE_SHOWN) then 
    Raise('Не удалось включить режим показа комментариев ГАРАНТа');
  if NOT PressKeyWithCheck(['^[Right]']) then Raise('Не удалось переключиться на Предидущий документ в списке но нажатию Ctr+Right');
  str := GetMainWindow.Caption;
  if NOT StringCompare(DOC_NAME_WITHOUT_JUROR_COMMENT, str) then Raise('Caption окна не эталонный: ' + str);
  if NOT (GetCommentsMode(obj, JUROR_COMMENTS) = MODE_SHOWN) then
  begin
    Log.Error('Режим просмотра комментариев ГАРАНТа не включился при переходе к следующему документу по Ctrl+Right');
    Raise('Режим просмотра комментариев ГАРАНТа не включился при переходе к следующему документу по Ctrl+Right');
  end;
  result := true;  
  CloseTabIfNeeded;
except  
  Log.Message('HLTC73_20_11_6_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  if IsExists(obj) then SetCommentsMode(obj, JUROR_COMMENTS, MODE_SHOWN);
  result := false;
  CommonExceptionHandler;             
end;
  GoToMainMenuWithCloseTabsExceptOne
end;

{
HLTC73.20: Показ комментариев(для стандартной конфигурации)
	HLTC73.20.11: Проверить, что включенный режим показа комментариев ГАРАНТа не отключается автоматически при переходе:
		Режим показа должен остаться включенным при следующих действиях:
     1. Перейти из документа в ОМ
     2. Открыть ППР
     3. Сделать поиск
     4. Построить список
     5. Открыть документ.

    Проверить, что режим показа комментариев ГАРАНТа остался прежним - включенным.
}
function HLTC73_20_11_7_Execute (var  CurrentState: OleVariant): OleVariant;
const      
  DOC_NUM = 1055132;
  DOC_NAME = 'Конституция Российской Федерации (принята на всенародном*';
var
  obj;
  str;
begin                                   
try       
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');        
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  if NOT SetCommentsMode(obj, JUROR_COMMENTS, MODE_SHOWN) then 
    Raise('Не удалось включить режим показа комментариев ГАРАНТа');
  if NOT GoToMainMenu then Raise('Не удалось перейти в ОМ');
  if NOT GoToPPR then Raise('Не удалось получить ППР');
  Sys.Keys('Конституция Российской Федерации [Enter]');
  obj := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(obj) then Raise('Не удалось получить список после ППР');  
  if NOT OpenDocFromList(DOC_NAME, obj) then 
    Raise('Не удалось открыть документ "' + DOC_NAME + '" из списка');
    
  str := GetMainWindow.Caption;
  if NOT StringCompare('*' + DOC_NAME, str) then Raise('Caption окна не эталонный: ' + str);
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  if NOT (GetCommentsMode(obj, JUROR_COMMENTS) = MODE_SHOWN) then
  begin
    Log.Error('Режим просмотра комментариев ГАРАНТа не включился');
    Raise('Режим просмотра комментариев ГАРАНТа не включился');
  end;
  result := true;  
  CloseTabIfNeeded;
except  
  Log.Message('HLTC73_20_11_7_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
  GoToMainMenuWithCloseTabsExceptOne;
end;
////////////////////////////////////////////////////////////////////////////////
{
HLTC73.20: Показ комментариев(для стандартной конфигурации)
	HLTC73.20.12: Проверить, что отключенный режим показа моих комментариев:
		HLTC73.20.12.1: включается при переходе по ссылке в другие документы, в которых есть мои комментарии

     1. В документе 2002 ставим Мой комментарий
     2. Открываем документ 2003
     3. Скрываем Мои комментарии
     4. Переходим по ссылке в 2002 (в начале страницы, перед картинкой, ссылка «Ссылка на 2002.101»)
     Откроется документ
     Показ Моих комментариев должен включиться
}
function HLTC73_20_12_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 2002;
  DOC_NUM_1 = 2003;  
  CONTEXT = 'Ссылка на 2002.101';
  TEST_CAPTION = '*ДОКУМЕНТ 2002*';
var
  obj;
  str;
begin                                   
try
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  obj.SetFocus;
  Sys.Keys('^[Home][Enter]HLTC73_20_12_1');
  
  if NOT OpenDocByNumber(DOC_NUM_1) then Raise('Не удалось открыть документ по Alt+N');        
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  if NOT SetCommentsMode(obj, USER_COMMENTS, MODE_HIDDEN) then 
    Raise('Не удалось выключить режим показа моих комментариев'); 
  if NOT ClickByHyperLink(obj, CONTEXT) then Raise('Не удалось кликнуть по искомой гиперссылке');  
  str := GetMainWindow.Caption;
  if NOT StringCompare(TEST_CAPTION, str) then Raise('Caption окна не эталонный: ' + str);
  
  if NOT (GetCommentsMode(obj, USER_COMMENTS) = MODE_SHOWN) then
  begin
    Log.Error('Режим просмотра моих коммент. не включился при переходе по ссылке в другой документ');
    Raise('Режим просмотра моих коммент. не включился при переходе по ссылке в другой документ');
  end; 
  if DeleteAllUserCommentsFromContents < 1 then
    Log.Warning('Не было удалено ни одного комментария'); 
  result := true;  
  GoToMainMenu;
except  
  Log.Message('HLTC73_20_12_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  if IsExists(obj) then SetCommentsMode(obj, USER_COMMENTS, MODE_SHOWN);
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.20: Показ комментариев(для стандартной конфигурации)
	HLTC73.20.12: Проверить, что отключенный режим показа пользовательских комментариев:
		HLTC73.20.12.2: включается при переходе по ссылке в другие документы, в которых нет моих комментариев
     1. Открываем документ 2003
     2. Отключаем Мои комментарии
     3. Переходим по ссылке в начале документа «саб 10 документа с www-образом»
     Откроется документ
     Показ Моих комментариев должен включиться, хотя в документе их и нет.
}
function HLTC73_20_12_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 2003;  
  CONTEXT = 'саб 10 документа с www-образом';
  TEST_CAPTION = '*Постановление Правительства РФ от 6 декабря 2001*';
var
  obj;
  str;
begin                                   
try
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');        
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  if NOT SetCommentsMode(obj, USER_COMMENTS, MODE_HIDDEN) then 
    Raise('Не удалось выключить режим показа моих комментариев'); 
  if NOT ClickByHyperLink(obj, CONTEXT) then Raise('Не удалось кликнуть по искомой гиперссылке');  
  str := GetMainWindow.Caption;
  if NOT StringCompare(TEST_CAPTION, str) then Raise('Caption окна не эталонный: ' + str);
  
  if NOT (GetCommentsMode(obj, USER_COMMENTS) = MODE_SHOWN) then
  begin
    Log.Error('Режим просмотра моих коммент. не включился при переходе по ссылке в другой документ');
    Raise('Режим просмотра моих коммент. не включился при переходе по ссылке в другой документ');
  end; 
   
  result := true;  
  GoToMainMenu;
except  
  Log.Message('HLTC73_20_12_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  if IsExists(obj) then SetCommentsMode(obj, USER_COMMENTS, MODE_SHOWN);
  result := false;
  CommonExceptionHandler;             
end;
end;  

{
HLTC73.20: Показ комментариев(для стандартной конфигурации)
	HLTC73.20.12: Проверить, что отключенный режим показа пользовательских комментариев:
		HLTC73.20.12.3:не включается при переходе по истории в другие документы, в которых есть мои комментарии, но их показ был отключён
       1. Открываем документ 2002
       2. Ставим Мой комментарий
       3. Выключаем показ Моих комментариев
       4. Открываем документ 2003
       (Показ комментариев включен)

      5. Возвращаемся назад по истории в 2002й документ
       Показ моих комментариев должны быть выключен   
     
}
function HLTC73_20_12_3_Execute (var  CurrentState: OleVariant): OleVariant;
const
  TEST_CAPTION = '*ДОКУМЕНТ 2002*';
  DOC_NUM = 2002;
  DOC_NUM_1 = 2003;  
var
  obj;
  sub,toolbar;
  str;
begin                                   
try
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');        
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');  
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  obj.SetFocus;
  Sys.Keys('^[Home][Enter]HLTC73_20_12_3');
  if NOT SetCommentsMode(obj, USER_COMMENTS, MODE_HIDDEN) then 
    Raise('Не удалось выключить режим показа моих комментариев');
    
  if NOT OpenDocByNumber(DOC_NUM_1) then Raise('Не удалось открыть документ по Alt+N');
  if NOT GoByHistory('НАЗАД') then Raise('Не удалось перейти по истории назад'); 
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА после перехода по истории');
    
  str := GetMainWindow.Caption;
  if NOT StringCompare(TEST_CAPTION, str) then Raise('Caption окна не эталонный: ' + str);
  
  
  if NOT (GetCommentsMode(obj, USER_COMMENTS) = MODE_HIDDEN) then
  begin
    Log.Error('Режим просмотра моих коммент. Включился при переходе по истории');
    Raise('Режим просмотра моих коммент. Включился при переходе по истории');
  end; 
  if DeleteAllUserCommentsFromContents < 1 then
    Log.Warning('Не было удалено ни одного комментария'); 
  result := true;  
  GoToMainMenu;
except  
  Log.Message('HLTC73_20_12_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  if IsExists(obj) then SetCommentsMode(obj, USER_COMMENTS, MODE_SHOWN);
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.20: Показ комментариев(для стандартной конфигурации)
	HLTC73.20.12: Проверить, что отключенный режим показа пользовательских комментариев:
		HLTC73.20.12.4:не включается при переходе по истории в другие документы, в которых нет моих комментариев, и их показ был отключён
     1. Открываем документ 2001
     2. Выключаем показ Моих комментариев
     3. Открываем документ 2003
     Показ Моих комментариев включен
     4. Возвращаемся назад по истории в 2001й документ
     Показ Моих комментариев должен быть выключен
}
function HLTC73_20_12_4_Execute (var  CurrentState: OleVariant): OleVariant;
const      
  TEST_CAPTION = '*Документ 2001*';
  DOC_NUM = 2001;
  DOC_NUM_1 = 2003;  
var
  obj;
  sub,toolbar;
  str;
begin                                   
try
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');        
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  if NOT SetCommentsMode(obj, USER_COMMENTS, MODE_HIDDEN) then 
    Raise('Не удалось выключить режим показа моих комментариев');
    
  if NOT OpenDocByNumber(DOC_NUM_1) then Raise('Не удалось открыть документ по Alt+N');
  if NOT GoByHistory('НАЗАД') then Raise('Не удалось перейти по истории назад'); 
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА после перехода по истории');
    
  str := GetMainWindow.Caption;
  if NOT StringCompare(TEST_CAPTION, str) then Raise('Caption окна не эталонный: ' + str);
  
  
  if NOT (GetCommentsMode(obj, USER_COMMENTS) = MODE_HIDDEN) then
  begin
    Log.Error('Режим просмотра моих коммент. Включился при переходе по истории');
    Raise('Режим просмотра моих коммент. Включился при переходе по истории');
  end; 
   
  result := true;  
  GoToMainMenu;
except  
  Log.Message('HLTC73_20_12_4_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  if IsExists(obj) then SetCommentsMode(obj, USER_COMMENTS, MODE_SHOWN);
  result := false;
  CommonExceptionHandler;             
end;
end;

{
HLTC73.20: Показ комментариев(для стандартной конфигурации)
	HLTC73.20.12: Проверить, что отключенный режим показа пользовательских комментариев:
		включается при переходе по CTRL+LEFT/CTRL+RIGHT в другие документы, в которых есть мои комментарии
}
function HLTC73_20_12_5_Execute (var  CurrentState: OleVariant): OleVariant;
const  
  DOC_NAME = 'Налоговый кодекс Российской Федерации*';  
  DOC_NAME_WITH_USER_COMMENT = '*Воздушный кодекс РФ*'; //сначало * - потому что, сравниваем в Caption
  DOC_NUM_WITH_USER_COMMENT = 10100300;
var
  obj;
  str;
begin                                   
try  
  if NOT OpenDocByNumber(DOC_NUM_WITH_USER_COMMENT) then Raise('Не удалось открыть документ по Alt+N');
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  obj.SetFocus;
  Sys.Keys('^[Home][Enter]HLTC73_20_12_5');
  if NOT OpenObjectFromFolder(LIST_ALLCODES, OpenMenuTab) then  Raise('Не удалось открыть список из навигатора');
  obj := OpenInList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(obj) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');
  
  //if NOT OpenObjectFromFolder(DOC_NAME, obj) then 
  //  Raise('Не удалось открыть документ "' + DOC_NAME + '" из списка');
  if NOT OpenDocFromList(DOC_NAME, obj) then 
    Raise('Не удалось открыть документ "' + DOC_NAME + '" из списка'); 
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');  
  if NOT IsExists(obj) then
    Raise('Не найден текст документа : "' + DOC_NAME + '"');     
  
  if NOT SetCommentsMode(obj, USER_COMMENTS, MODE_HIDDEN) then 
    Raise('Не удалось выключить режим показа моих комментариев');
    
  if NOT PressKeyWithCheck(['^[Right]']) then Raise('Не удалось переключиться на Следующий документ в списке но нажатию Ctr+Right');   
  str := GetMainWindow.Caption;
  if NOT StringCompare(DOC_NAME_WITH_USER_COMMENT, str) then Raise('Caption окна не эталонный: ' + str);
  if NOT (GetCommentsMode(obj, USER_COMMENTS) = MODE_SHOWN) then
  begin
    Log.Error('Режим просмотра моих коммент. не включился при переходе к следующему документу по Ctrl+Right');
    Raise('Режим просмотра моих коммент. не включился при переходе к следующему документу по Ctrl+Right');
  end; 
  
  if NOT PressKeyWithCheck(['^[Right]']) then Raise('Не удалось переключиться на Следующий документ в списке но нажатию Ctr+Right');
  if NOT SetCommentsMode(obj, USER_COMMENTS, MODE_HIDDEN) then 
    Raise('Не удалось выключить режим показа моих комментариев');
  if NOT PressKeyWithCheck(['^[Left]']) then Raise('Не удалось переключиться на Предидущий документ в списке но нажатию Ctr+Left');
  str := GetMainWindow.Caption;
  if NOT StringCompare(DOC_NAME_WITH_USER_COMMENT, str) then Raise('Caption окна не эталонный: ' + str);
  if NOT (GetCommentsMode(obj, USER_COMMENTS) = MODE_SHOWN) then
  begin
    Log.Error('Режим просмотра моих коммент. не включился при переходе к следующему документу по Ctrl+Right');
    Raise('Режим просмотра моих коммент. не включился при переходе к следующему документу по Ctrl+Right');
  end;
  if DeleteAllUserCommentsFromContents < 1 then
    Log.Warning('Не было удалено ни одного комментария');
  CloseTabIfNeeded;  
  result := true;
except  
  Log.Message('HLTC73_20_12_5_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  if IsExists(obj) then SetCommentsMode(obj, USER_COMMENTS, MODE_SHOWN);
  result := false;
  CommonExceptionHandler;               
end;
  GoToMainMenuWithCloseTabsExceptOne;   
end;

{
HLTC73.20: Показ комментариев(для стандартной конфигурации)
	HLTC73.20.12: Проверить, что отключенный режим показа пользовательских комментариев:
		HLTC73.20.12.6: включается при переходе по CTRL+LEFT/CTRL+RIGHT в другие документы, в которых нет моих комментариев
}
function HLTC73_20_12_6_Execute (var  CurrentState: OleVariant): OleVariant;
const  
  DOC_NAME = 'Воздушный кодекс РФ*';  
  DOC_NAME_WITHOUT_USER_COMMENT = '*Трудовой кодекс Российской Федерации*'; //сначало * - потому что, сравниваем в Caption  
var
  obj;
  str;
begin                                   
try
  if NOT OpenObjectFromFolder(LIST_ALLCODES, OpenMenuTab) then Raise('Не удалось открыть список из навигатора');
  obj := OpenInList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(obj) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');  
  if NOT OpenDocFromList(DOC_NAME, obj) then 
    Raise('Не удалось открыть документ "' + DOC_NAME + '" из списка');    
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  if NOT SetCommentsMode(obj, USER_COMMENTS, MODE_HIDDEN) then 
    Raise('Не удалось выключить режим показа моих комментариев');

  if NOT PressKeyWithCheck(['^[Right]']) then Raise('Не удалось переключиться на Следующий документ в списке но нажатию Ctr+Right');
  str := GetMainWindow.Caption;
  if NOT StringCompare(DOC_NAME_WITHOUT_USER_COMMENT, str) then Raise('Caption окна не эталонный: ' + str);
  if NOT (GetCommentsMode(obj, USER_COMMENTS) = MODE_SHOWN) then
  begin
    Log.Error('Режим просмотра моих.коммент. не включился при переходе к следующему документу по Ctrl+Right');
    Raise('Режим просмотра моих.коммент. не включился при переходе к следующему документу по Ctrl+Right');
  end; 
  
  if NOT PressKeyWithCheck(['^[Right]']) then Raise('Не удалось переключиться на Следующий документ в списке но нажатию Ctr+Right');
  if NOT SetCommentsMode(obj, USER_COMMENTS, MODE_HIDDEN) then 
    Raise('Не удалось выключить режим показа моих комментариев');
  if NOT PressKeyWithCheck(['^[Left]']) then Raise('Не удалось переключиться на Предидущий документ в списке но нажатию Ctr+Left');
  str := GetMainWindow.Caption;
  if NOT StringCompare(DOC_NAME_WITHOUT_USER_COMMENT, str) then Raise('Caption окна не эталонный: ' + str);
  if NOT (GetCommentsMode(obj, USER_COMMENTS) = MODE_SHOWN) then
  begin
    Log.Error('Режим просмотра моих. коммент. не включился при переходе к следующему документу по Ctrl+Right');
    Raise('Режим просмотра моих. коммент. не включился при переходе к следующему документу по Ctrl+Right');
  end;
  result := true;  
  CloseTabIfNeeded;
except  
  Log.Message('HLTC73_20_12_6_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  if IsExists(obj) then SetCommentsMode(obj, USER_COMMENTS, MODE_SHOWN);
  result := false;
  CommonExceptionHandler;             
end;
  GoToMainMenuWithCloseTabsExceptOne;
end;

{
HLTC73.20: Показ комментариев(для стандартной конфигурации)
	HLTC73.20.12: Проверить, что отключенный режим показа пользовательских комментариев:
		 HLTC73.20.12.7:включается при следующих действиях: перейти из документа в ОМ, затем в ППР, сделать поиск, построить список и открыть документ

       1. Открываем НК
       2. Жмём «Скрыть мои комментарии»
       3. Идём в ОМ
       4. ППР – список всех документов
       5. Открываем НК
       Показ Моих комментариев должен быть включен 
     
}
function HLTC73_20_12_7_Execute (var  CurrentState: OleVariant): OleVariant;
const      
  DOC_NUM = 10800200;
  DOC_NAME = 'Налоговый кодекс Российской Федерации*';
var
  obj;
  str;
begin                                   
try       
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');        
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  if NOT SetCommentsMode(obj, USER_COMMENTS, MODE_HIDDEN) then 
    Raise('Не удалось выключить режим показа моих комментариев');
  if NOT GoToMainMenu then Raise('Не удалось перейти в ОМ');
  if NOT GoToPPR then Raise('Не удалось получить ППР');
  Sys.Keys('нк[Enter]');
  obj := GetFromList('СПИСОК ДОКУМЕНТОВ');    
  if NOT IsExists(obj) then Raise('Не удалось получить список после ППР');
  if NOT OpenDocFromList(DOC_NAME, obj) then 
    Raise('Не удалось открыть документ "' + DOC_NAME + '" из списка');
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');  
  str := GetMainWindow.Caption;
  if NOT StringCompare('*'+DOC_NAME, str) then Raise('Caption окна не эталонный: ' + str);
  if NOT (GetCommentsMode(obj, USER_COMMENTS) = MODE_SHOWN) then
  begin
    Log.Error('Режим просмотра моих коммент. не включился');
    Raise('Режим просмотра моих коммент. не включился');
  end;
  result := true;  
  CloseTabIfNeeded;
except  
  Log.Message('HLTC73_20_12_7_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
  GoToMainMenuWithCloseTabsExceptOne;
end; 


{
HLTC73.20: Показ комментариев(для стандартной конфигурации)
	HLTC73.20.13: Проверить, что включенный режим показа моих комментариев не отключается автоматически при переходе:
		HLTC73.20.13.1: по ссылке в другие документы, в которых есть мои комментарии
}
function HLTC73_20_13_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;  
  CONTEXT = 'Уставом';
  TEST_CAPTION = '*Устав Союза Беларуси и России (Москва, 23 мая 1997 г.)';
var
  obj;
  str;
begin                                   
try
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  obj.SetFocus;
  Sys.Keys('^[Home][Enter]HLTC73_20_13_1');
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');        
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  if NOT SetCommentsMode(obj, USER_COMMENTS, MODE_SHOWN) then 
    Raise('Не удалось включить режим показа Моих комментариев'); 
  if NOT ClickByHyperLink(obj, CONTEXT) then Raise('Не удалось кликнуть по искомой гиперссылке');  
  str := GetMainWindow.Caption;
  if NOT StringCompare(TEST_CAPTION, str) then Raise('Caption окна не эталонный: ' + str);
  
  if NOT (GetCommentsMode(obj, USER_COMMENTS) = MODE_SHOWN) then
  begin
    Log.Error('Режим просмотра Моих коммент. не включился при переходе по ссылке в другой документ');
    Raise('Режим просмотра Моих коммент. не включился при переходе по ссылке в другой документ');
  end; 
  if DeleteAllUserCommentsFromContents < 1 then
    Log.Warning('Не было удалено ни одного комментария'); 
  result := true;  
  GoToMainMenu;
except  
  Log.Message('HLTC73_20_13_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  if IsExists(obj) then SetCommentsMode(obj, USER_COMMENTS, MODE_SHOWN);
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.20: Показ комментариев(для стандартной конфигурации)
	HLTC73.20.13: Проверить, что включенный режим показа моих комментариев не отключается автоматически при переходе:
		HLTC73.20.13.2: по ссылке в другие документы, в которых нет моих комментариев
}
function HLTC73_20_13_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;  
  CONTEXT = 'Декларации';
  TEST_CAPTION = '*Декларация о дальнейшем единении России и Беларуси*';
var
  obj;
  str;
begin                                   
try
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');        
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  if NOT SetCommentsMode(obj, USER_COMMENTS, MODE_SHOWN) then 
    Raise('Не удалось включить режим показа польз. комментариев'); 
  if NOT ClickByHyperLink(obj, CONTEXT) then Raise('Не удалось кликнуть по искомой гиперссылке');  
  str := GetMainWindow.Caption;
  if NOT StringCompare(TEST_CAPTION, str) then Raise('Caption окна не эталонный: ' + str);
  
  if NOT (GetCommentsMode(obj, USER_COMMENTS) = MODE_SHOWN) then
  begin
    Log.Error('Режим просмотра Моих коммент. не включился при переходе по ссылке в другой документ');
    Raise('Режим просмотра Моих коммент. не включился при переходе по ссылке в другой документ');
  end; 
   
  result := true;  
  GoToMainMenu;
except  
  Log.Message('HLTC73_20_13_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  if IsExists(obj) then SetCommentsMode(obj, USER_COMMENTS, MODE_SHOWN);
  result := false;
  CommonExceptionHandler;             
end;
end;  

{
HLTC73.20: Показ комментариев(для стандартной конфигурации)
	HLTC73.20.13: Проверить, что включенный режим показа моих комментариев не отключается автоматически при переходе:
		HLTC73.20.13.3: по истории в другие документы, в которых есть мои комментарии
}
function HLTC73_20_13_3_Execute (var  CurrentState: OleVariant): OleVariant;
const
  TEST_CAPTION = '*Договор "О создании*';
  DOC_NUM = 1055132;
  DOC_NUM_1 = 10003000;  
var
  obj;
  sub,toolbar;
  str;
begin                                   
try
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');        
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  obj.SetFocus;
  Sys.Keys('^[Home][Enter]HLTC73_20_13_3');
  if NOT SetCommentsMode(obj, USER_COMMENTS, MODE_SHOWN) then 
    Raise('Не удалось включить режим показа Моих комментариев');    
  if NOT OpenDocByNumber(DOC_NUM_1) then Raise('Не удалось открыть документ по Alt+N');
  if NOT GoByHistory('НАЗАД') then Raise('Не удалось перейти по истории назад'); 
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА после перехода по истории');
    
  str := GetMainWindow.Caption;
  if NOT StringCompare(TEST_CAPTION, str) then Raise('Caption окна не эталонный: ' + str);  
  if NOT (GetCommentsMode(obj, USER_COMMENTS) = MODE_SHOWN) then
  begin
    Log.Error('Режим просмотра Моих коммент. Выключился при переходе по истории');
    Raise('Режим просмотра Моих коммент. Выключился при переходе по истории');
  end; 
  if DeleteAllUserCommentsFromContents < 1 then
    Log.Warning('Не было удалено ни одного комментария'); 
  result := true;  
  GoToMainMenu;
except  
  Log.Message('HLTC73_20_13_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  if IsExists(obj) then SetCommentsMode(obj, USER_COMMENTS, MODE_SHOWN);
  result := false;
  CommonExceptionHandler;             
end;
end; 

{
HLTC73.20: Показ комментариев(для стандартной конфигурации)
	HLTC73.20.13: Проверить, что включенный режим показа моих комментариев не отключается автоматически при переходе:
		HLTC73.20.13.4: по истории в другие документы, в которых нет моих комментариев
}
function HLTC73_20_13_4_Execute (var  CurrentState: OleVariant): OleVariant;
const      
  TEST_CAPTION = '*Договор "О создании*';
  DOC_NUM = 1055132;
  DOC_NUM_1 = 10003000;  
var
  obj;
  sub,toolbar;
  str;
begin                                   
try
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');        
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  if NOT SetCommentsMode(obj, USER_COMMENTS, MODE_SHOWN) then 
    Raise('Не удалось включить режим показа Моих комментариев');
    
  if NOT OpenDocByNumber(DOC_NUM_1) then Raise('Не удалось открыть документ по Alt+N');
  if NOT GoByHistory('НАЗАД') then Raise('Не удалось перейти по истории назад'); 
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА после перехода по истории');
    
  str := GetMainWindow.Caption;
  if NOT StringCompare(TEST_CAPTION, str) then Raise('Caption окна не эталонный: ' + str);  
  
  if NOT (GetCommentsMode(obj, USER_COMMENTS) = MODE_SHOWN) then
  begin
    Log.Error('Режим просмотра Моих коммент. Выключился при переходе по истории');
    Raise('Режим просмотра Моих коммент. Выключился при переходе по истории');
  end; 
   
  result := true;  
  GoToMainMenu;
except  
  Log.Message('HLTC73_20_13_4_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  if IsExists(obj) then SetCommentsMode(obj, USER_COMMENTS, MODE_SHOWN);
  result := false;
  CommonExceptionHandler;             
end;
end;

{
HLTC73.20: Показ комментариев(для стандартной конфигурации)
	HLTC73.20.13: Проверить, что включенный режим показа моих комментариев не отключается автоматически при переходе:
		HLTC73.20.13.5: через список (CTRL-LEFT, CTRL-RIGHT) в другие документы, в которых есть мои комментарии
}
function HLTC73_20_13_5_Execute (var  CurrentState: OleVariant): OleVariant;
const  
  DOC_NAME = 'Налоговый кодекс Российской Федерации*';  
  DOC_NAME_WITH_USER_COMMENT = '*Воздушный кодекс РФ*'; //сначало * - потому что, сравниваем в Caption
  DOC_NUM_WITH_USER_COMMENT = 10100300;
var
  obj;
  str;
begin                                   
try
  if NOT OpenDocByNumber(DOC_NUM_WITH_USER_COMMENT) then Raise('Не удалось открыть документ по Alt+N');
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  obj.SetFocus;
  Sys.Keys('^[Home][Down][Down][Enter]HLTC73_20_13_5');
  if NOT OpenObjectFromFolder(LIST_ALLCODES, OpenMenuTab) then Raise('Не удалось открыть список из навигатора');
  obj := OpenInList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(obj) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');  
  if NOT OpenDocFromList(DOC_NAME, obj) then 
    Raise('Не удалось открыть документ "' + DOC_NAME + '" из списка');  
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  if NOT SetCommentsMode(obj, USER_COMMENTS, MODE_SHOWN) then 
    Raise('Не удалось включить режим показа Моих комментариев');
    
  if NOT PressKeyWithCheck(['^[Right]']) then Raise('Не удалось переключиться на Следующий документ в списке но нажатию Ctr+Right');   
  str := GetMainWindow.Caption;
  if NOT StringCompare(DOC_NAME_WITH_USER_COMMENT, str) then Raise('Caption окна не эталонный: ' + str);
  if NOT (GetCommentsMode(obj, USER_COMMENTS) = MODE_SHOWN) then
  begin
    Log.Error('Режим просмотра Моих коммент. не включился при переходе к следующему документу по Ctrl+Right');
    Raise('Режим просмотра Моих коммент. не включился при переходе к следующему документу по Ctrl+Right');
  end; 
  
  if NOT PressKeyWithCheck(['^[Right]']) then Raise('Не удалось переключиться на Следующий документ в списке но нажатию Ctr+Right');
  if NOT SetCommentsMode(obj, USER_COMMENTS, MODE_SHOWN) then 
    Raise('Не удалось включить режим показа Моих комментариев');
  if NOT PressKeyWithCheck(['^[Left]']) then Raise('Не удалось переключиться на Предидущий документ в списке но нажатию Ctr+Left');
  str := GetMainWindow.Caption;
  if NOT StringCompare(DOC_NAME_WITH_USER_COMMENT, str) then Raise('Caption окна не эталонный: ' + str);
  if NOT (GetCommentsMode(obj, USER_COMMENTS) = MODE_SHOWN) then
  begin
    Log.Error('Режим просмотра Моих коммент. не включился при переходе к следующему документу по Ctrl+Right');
    Raise('Режим просмотра Моих коммент. не включился при переходе к следующему документу по Ctrl+Right');
  end;
  if DeleteAllUserCommentsFromContents < 1 then
    Log.Warning('Не было удалено ни одного комментария');
  result := true;  
  CloseTabIfNeeded;
except  
  Log.Message('HLTC73_20_13_5_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  if IsExists(obj) then SetCommentsMode(obj, USER_COMMENTS, MODE_SHOWN);
  result := false;
  CommonExceptionHandler;             
end;
  GoToMainMenuWithCloseTabsExceptOne;
end;

{
HLTC73.20: Показ комментариев(для стандартной конфигурации)
	HLTC73.20.13: Проверить, что включенный режим показа моих комментариев не отключается автоматически при переходе:
    HLTC73.20.13.6: через список (CTRL-LEFT, CTRL-RIGHT) в другие документы, в которых нет моих комментариев
}
function HLTC73_20_13_6_Execute (var  CurrentState: OleVariant): OleVariant;
const  
  DOC_NAME = 'Воздушный кодекс РФ*';  
  DOC_NAME_WITHOUT_USER_COMMENT = '*Трудовой кодекс Российской Федерации*'; //сначало * - потому что, сравниваем в Caption
var
  obj;
  str;
begin                                   
try
  if NOT OpenObjectFromFolder(LIST_ALLCODES, OpenMenuTab) then Raise('Не удалось открыть список из навигатора');
  obj := OpenInList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(obj) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');
  
  if NOT OpenDocFromList(DOC_NAME, obj) then 
    Raise('Не удалось открыть документиз списка');	
  
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  if NOT SetCommentsMode(obj, USER_COMMENTS, MODE_SHOWN) then 
    Raise('Не удалось включить режим показа Моих комментариев');
    
  if NOT PressKeyWithCheck(['^[Right]']) then Raise('Не удалось переключиться на Следующий документ в списке но нажатию Ctr+Right');   
  str := GetMainWindow.Caption;
  if NOT StringCompare(DOC_NAME_WITHOUT_USER_COMMENT, str) then Raise('Caption окна не эталонный: ' + str);
  if NOT (GetCommentsMode(obj, USER_COMMENTS) = MODE_SHOWN) then
  begin
    Log.Error('Режим просмотра Моих коммент. не включился при переходе к следующему документу по Ctrl+Right');
    Raise('Режим просмотра Моих коммент. не включился при переходе к следующему документу по Ctrl+Right');
  end; 
  
  if NOT PressKeyWithCheck(['^[Right]']) then Raise('Не удалось переключиться на Следующий документ в списке но нажатию Ctr+Right');
  if NOT SetCommentsMode(obj, USER_COMMENTS, MODE_SHOWN) then 
    Raise('Не удалось включить режим показа Моих комментариев');
  if NOT PressKeyWithCheck(['^[Left]']) then Raise('Не удалось переключиться на Предидущий документ в списке но нажатию Ctr+Left');
  str := GetMainWindow.Caption;
  if NOT StringCompare(DOC_NAME_WITHOUT_USER_COMMENT, str) then Raise('Caption окна не эталонный: ' + str);
  if NOT (GetCommentsMode(obj, USER_COMMENTS) = MODE_SHOWN) then
  begin
    Log.Error('Режим просмотра Моих коммент. не включился при переходе к следующему документу по Ctrl+Right');
    Raise('Режим просмотра Моих коммент. не включился при переходе к следующему документу по Ctrl+Right');
  end;
  result := true;  
  CloseTabIfNeeded;
except  
  Log.Message('HLTC73_20_13_6_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  if IsExists(obj) then SetCommentsMode(obj, USER_COMMENTS, MODE_SHOWN);
  result := false;
  CommonExceptionHandler;             
end;
  GoToMainMenuWithCloseTabsExceptOne;
end;

{
HLTC73.20: Показ комментариев(для стандартной конфигурации)
	HLTC73.20.13: Проверить, что включенный режим показа моих комментариев не отключается автоматически при переходе:
		 HLTC73.20.13.7: Режим показа должен остаться включенным при следующих действиях:
       1. Перейти из документа в ОМ
       2. Открыть ППР
       3. Сделать поиск
       4. Построить список
       5. Открыть документ.
      Проверить, что режим показа моих комментариев остался прежним - включенным.
}
function HLTC73_20_13_7_Execute (var  CurrentState: OleVariant): OleVariant;
const      
  DOC_NUM = 1055132;
  DOC_NAME = '*Конституция Российской Федерации (принята на*';
var
  obj;
  str;
begin                                   
try       
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');        
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  if NOT SetCommentsMode(obj, USER_COMMENTS, MODE_SHOWN) then 
    Raise('Не удалось включить режим показа польз. комментариев');
  if NOT GoToMainMenu then Raise('Не удалось перейти в ОМ');
  if NOT GoToPPR then Raise('Не удалось получить ППР');
  Sys.Keys('Конституция Российской Федерации [Enter]');
  obj := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(obj) then Raise('Не удалось получить список после ППР');
  Sys.Keys('[Home]');
  OpenDocFromList; 
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');  
  str := GetMainWindow.Caption;
  if NOT StringCompare(DOC_NAME, str) then Raise('Caption окна не эталонный: ' + str);
  if NOT (GetCommentsMode(obj, USER_COMMENTS) = MODE_SHOWN) then
  begin
    Log.Error('Режим просмотра Моих коммент. не остался включенным');
    Raise('Режим просмотра Моих коммент. не остался включенным');
  end;
  result := true;
  CloseTabIfNeeded; 
except  
  Log.Message('HLTC73_20_13_7_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
  GoToMainMenuWithCloseTabsExceptOne;
end;
///////////////////////////////////////////////////////////////////////////////////

{
HLTC73.21: Работа с закладками
  HLTC73.21.1: Проверить, что в документе можно установить закладку. При этом закладка
  ставится на конкретный абзац документа 
}
function HLTC73_21_1_Execute (var  CurrentState: OleVariant): OleVariant;
const      
  DOC_NUM = 20072;
  CONTEXT = 'постановляет';
  TEST_WORD = 'В соответствии с пунктом 7 Положения об Экономическом*';
  FOLDER_PREF = 'HLTC73_21_1';
var
  obj;
  str;
begin                                   
try       
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N'); 
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  result := ClickOnContext(obj, CONTEXT);
  if NOT result then Raise('Не удалось кликнуть по искомому контексту');
  result := SetBookMark(FOLDER_PREF);
  if NOT result then Raise('Не удалось установить закладку');
  result := ClickNearIconOnSubInDocument(obj, 'ЗАКЛАДКА');
  if NOT result then Raise('Не удалось кликнуть в тексте документа возле иконки на саб панели');
  str := CopyToClipboard(obj,'STRING','Trim := true');
  result := StringCompare(TEST_WORD, str);
  if NOT result then
    Log.Error('Иконка находится не на той позиции, где ставилась закладка', str);
  if NOT DeleteAllInMyDoc then                    
    Log.Warning('Не удалось удалить все объекты из моих документов');     
  GoToMainMenu;
except  
  Log.Message('HLTC73_21_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;

{
HLTC73.21: Работа с закладками
  HLTC73.21.3: Проверить, что при выборе действия «Установить закладку» из контекстного
  меню, закладка ставится на тот абзац, для которого было вызвано это меню 
}
function HLTC73_21_3_Execute (var  CurrentState: OleVariant): OleVariant;
const      
  DOC_NUM = 20072;
  CONTEXT = 'постановляет';
  TEST_WORD = 'В соответствии с пунктом 7 Положения об Экономическом*';
  FOLDER_PREF = 'HLTC73_21_3';
var
  obj;
  str;
begin                                   
try       
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N'); 
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  result := ClickOnContext(obj, CONTEXT);
  if NOT result then Raise('Не удалось кликнуть по искомому контексту');
  result := SetBookMark(FOLDER_PREF, '', 'Мои документы', true, obj);
  if NOT result then Raise('Не удалось установить закладку из контекстного меню');  
  
  result := ClickNearIconOnSubInDocument(obj, 'ЗАКЛАДКА');
  if NOT result then Raise('Не удалось кликнуть в тексте документа возле иконки на саб панели');
  str := CopyToClipboard(obj,'STRING','Trim := true');
  result := StringCompare(TEST_WORD, str);
  if NOT result then
    Log.Error('Иконка находится не на той позиции, где ставилась закладка', str);
  if NOT DeleteAllInMyDoc then                    
    Log.Warning('Не удалось удалить все объекты из моих документов');     
  GoToMainMenu;
except  
  Log.Message('HLTC73_21_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;

{
HLTC73.21: Работа с закладками
  HLTC73.21.4: Проверить, действие «Перейти на закладку»
    HLTC73.21.4.1: При нажатии на кнопку на тулбаре(эту кнопку можно добавить с помощью
    настройки тулбара, щелкнув правой кнопкой мыши на нужном тулбаре) система переходит к
    следующей по порядку в тексте закладке.
}
function HLTC73_21_4_1_Execute (var  CurrentState: OleVariant): OleVariant;
const      
  DOC_NUM = 10003000;
  CONTEXT_1 = 'Статья 3';
  CONTEXT_2 = 'Статья 9';
  FOLDER_PREF = 'HLTC73_21_4_1';
var
  obj, toolBar;
  str;
  addButton;
begin                                   
try    
  addButton := ['Перейти на закладку'];
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N'); 
  DeleteAllInMyDoc;
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  toolBar := GetFromEditor('ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');
  result := IsExists(toolBar);
  if NOT result then Raise('Не удалось получить ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');
  //DeleteAllAccessibleOperation(toolBar);
  AddOPerationsToToolBar(
    'Документ: Текст документа', addButton, toolBar    
  );
  result := SetBookMarkOnContext(obj, CONTEXT_1, FOLDER_PREF + '(1)');
  if NOT result then Raise('Не удалось установить закладку  на искомый контекст');  
  result := SetBookMarkOnContext(obj, CONTEXT_2, FOLDER_PREF + '(2)');
  if NOT result then Raise('Не удалось установить закладку  на искомый контекст');
  obj.SetFocus;
  Sys.Keys('^[Home]');
  toolBar := GetFromEditor('ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');
  result := IsExists(toolBar);
  if NOT result then Raise('Не удалось получить ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');
  result := ClickToolbarButton (toolBar, 'Перейти на закладку');
  if NOT result then Raise('Не удалось кликнуть на тулбаре по кнопке "Перейти на закладку"');
  str := CopyToClipboard(obj,'STRING','Trim := true');
  result := StringCompare(CONTEXT_1, str);
  if NOT result then
  begin
    Log.Error('Нажатие "Перейти на закладку" привело к переходу не в эталонное место', str); 
    Raise('Нажатие "Перейти на закладку" привело к переходу не в эталонное место');
  end;  
  result := ClickToolbarButton (toolBar, 'Перейти на закладку');
  if NOT result then Raise('Не удалось кликнуть на тулбаре по кнопке "Перейти на закладку"');
  str := CopyToClipboard(obj,'STRING','Trim := true');  
  result := StringCompare(CONTEXT_2, str);
  if NOT result then
  begin
    Log.Error('Нажатие "Перейти на закладку" привело к переходу не в эталонное место', str); 
    Raise('Нажатие "Перейти на закладку" привело к переходу не в эталонное место');
  end;
  result := ClickToolbarButton (toolBar, 'Перейти на закладку');
  if NOT result then Raise('Не удалось кликнуть на тулбаре по кнопке "Перейти на закладку"');
  str := CopyToClipboard(obj,'STRING','Trim := true');  
  result := StringCompare(CONTEXT_1, str);
  if NOT result then
  begin
    Log.Error('Нажатие "Перейти на закладку" привело к переходу не в эталонное место', str); 
    Raise('Нажатие "Перейти на закладку" привело к переходу не в эталонное место');
  end;
  if NOT SetDefaultToolBarSettings then
    Log.Warning('Не удалось восстановить настройки тулбара по умолчанию');
  //if NOT DeleteAllAccessibleOperation then
  //  Log.Warning('Не удалить все группы из настройки Текущих операций тулбара ');    
  if NOT DeleteAllInMyDoc then                    
    Log.Warning('Не удалось удалить все объекты из моих документов');     
  GoToMainMenu;
except
  DeleteAllInMyDoc;
  SetDefaultToolBarSettings;
  //DeleteAllAccessibleOperation;  
  Log.Message('HLTC73_21_4_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;


{
HLTC73.21: Работа с закладками
  HLTC73.21.4: Проверить, действие «Перейти на закладку»
    HHLTC73.21.4.2: Проверить, что система может отображать список установленных 
    закладок (выпадающий список по кнопке на тулбаре).
}
function HLTC73_21_4_2_Execute (var  CurrentState: OleVariant): OleVariant;
const      
  DOC_NUM = 10003000;
  CONTEXT_1 = 'Статья 3';
  CONTEXT_2 = 'Статья 9';
  FOLDER_PREF = 'HLTC73_21_4_2';
var
  obj, toolBar;
  str;
  addButton;
  count;
begin                                   
try    
  addButton := ['Перейти на закладку'];
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N'); 
  DeleteAllInMyDoc;
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  toolBar := GetFromEditor('ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');
  result := IsExists(toolBar);
  if NOT result then Raise('Не удалось получить ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');
  //DeleteAllAccessibleOperation(toolBar);  
  AddOPerationsToToolBar(
    'Документ: Текст документа', addButton, toolBar
  );
  result := SetBookMarkOnContext(obj, CONTEXT_1, FOLDER_PREF + '(1)');
  if NOT result then Raise('Не удалось установить закладку  на искомый контекст');  
  result := SetBookMarkOnContext(obj, CONTEXT_2, FOLDER_PREF + '(2)');
  if NOT result then Raise('Не удалось установить закладку  на искомый контекст');
  toolBar := GetFromEditor('ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');
  result := IsExists(toolBar);
  if NOT result then Raise('Не удалось получить ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');
  obj := ClickToolbarButton (toolBar, 'Перейти на закладку', 'ClickForPopupMenu := true');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить попап меню при клике по выпадающему списку  "Перейти на закладку"');
  count := obj.Items.Count;
  result := count = 2;
  if NOT result then 
  begin
    Log.Warning('Количество закладок в выпадающем списке не эталонно (должно быть 2)', IntToStr(count));
    Raise('Количество закладок в выпадающем списке не эталонно (должно быть 2)');
  end;
  result := 
    StringCompare('*(1)', obj.Items.Items[0].Caption) AND
    StringCompare('*(2)', obj.Items.Items[1].Caption);    
  if NOT result then 
    Log.Error('Закладки в выпадающем списке: <'  + obj.Items.Items[0].Caption + '> и <' + obj.Items.Items[1].Caption + '> не эталонные');  
  if NOT ClosePopUpMenu(toolBar) then
    Log.Warning('Не удалось закрыть контекстное меню');
  if NOT SetDefaultToolBarSettings then
    Log.Warning('Не удалось восстановить настройки тулбара по умолчанию');
  //if NOT DeleteAllAccessibleOperation then
  //  Log.Warning('Не удалить все группы из настройки Текущих операций тулбара ');  
  if NOT DeleteAllInMyDoc then                    
    Log.Warning('Не удалось удалить все объекты из моих документов');     
  GoToMainMenu;
except  
  Log.Message('HLTC73_21_4_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  SetDefaultToolBarSettings;
  DeleteAllInMyDoc;
  //DeleteAllAccessibleOperation;
  result := false;
  CommonExceptionHandler;             
end;
end;

{
HLTC73.21: Работа с закладками
  HLTC73.21.4: Проверить, действие «Перейти на закладку»
    HLTC73.21.4.3: При выборе из списка нужной закладки система переходит по ней.
}
function HLTC73_21_4_3_Execute (var  CurrentState: OleVariant): OleVariant;
const      
  DOC_NUM = 10003000;
  CONTEXT_1 = 'Статья 3';
  CONTEXT_2 = 'Статья 9';
  FOLDER_PREF = 'HLTC73_21_4_3';
var
  obj, doc, toolBar;
  str;
  addButton;  
begin                                   
try    
  addButton := ['Перейти на закладку'];
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  DeleteAllInMyDoc;
  doc := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  result := IsExists(doc);
  if NOT result then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  toolBar := GetFromEditor('ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');
  result := IsExists(toolBar);
  if NOT result then Raise('Не удалось получить ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');
  //DeleteAllAccessibleOperation(toolBar);
  AddOPerationsToToolBar(
    'Документ: Текст документа', addButton, toolBar    
  );
  result := SetBookMarkOnContext(doc, CONTEXT_1, FOLDER_PREF + '(1)');
  if NOT result then Raise('Не удалось установить закладку  на искомый контекст');  
  result := SetBookMarkOnContext(doc, CONTEXT_2, FOLDER_PREF + '(2)');
  if NOT result then Raise('Не удалось установить закладку  на искомый контекст');
  toolBar := GetFromEditor('ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');
  result := IsExists(toolBar);
  if NOT result then Raise('Не удалось получить ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');
  obj := ClickToolbarButton (toolBar, 'Перейти на закладку', 'ClickForPopupMenu := true');
  result := IsExists(obj);  
  if NOT result then Raise('Не удалось получить попап меню при клике по выпадающему списку  "Перейти на закладку"');
  result := ClickByPopUpMenuItem(obj, FOLDER_PREF + '(1)');
  if NOT result then Raise('Не удалось кликнуть по закладке из выпадающего списка "Перейти на закладку"');  
  str := CopyToClipboard(doc, 'STRING', 'Trim := true');  
  result := StringCompare(CONTEXT_1, str);
  if NOT result then
  begin
    Log.Error('Переход из выпадающего списка "Перейти на закладку" произошол не в эталонное место', str); 
    Raise;
  end;
  obj := ClickToolbarButton (toolBar, 'Перейти на закладку', 'ClickForPopupMenu := true');
  result := IsExists(obj);  
  if NOT result then Raise('Не удалось получить попап меню при клике по выпадающему списку  "Перейти на закладку"');
  result := ClickByPopUpMenuItem(obj, FOLDER_PREF + '(2)');
  if NOT result then Raise('Не удалось кликнуть по закладке из выпадающего списка "Перейти на закладку"');  
  str := CopyToClipboard(doc, 'STRING', 'Trim := true');  
  result := StringCompare(CONTEXT_2, str);
  if NOT result then
    Log.Error('Переход из выпадающего списка "Перейти на закладку" произошол не в эталонное место', str); 
  if NOT SetDefaultToolBarSettings then
    Log.Warning('Не удалось восстановить настройки тулбара по умолчанию');
  //if NOT DeleteAllAccessibleOperation then
  //  Log.Warning('Не удалить все группы из настройки Текущих операций тулбара ');  
  if NOT DeleteAllInMyDoc then                    
    Log.Warning('Не удалось удалить все объекты из моих документов');     
  GoToMainMenu;
except  
  Log.Message('HLTC73_21_4_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  //DeleteAllAccessibleOperation;
  SetDefaultToolBarSettings;
  DeleteAllInMyDoc;
  result := false;
  CommonExceptionHandler;             
end;
end;

{
HLTC73.21: Работа с закладками
  HLTC73.21.4: Проверить, действие «Перейти на закладку»
    HLTC73.21.4.4: Проверить, что перейти на нужную закладку можно и из дерева на вкладке «Структура документа»
}
function HLTC73_21_4_4_Execute (var  CurrentState: OleVariant): OleVariant;
const      
  DOC_NUM = 10003000;
  CONTEXT_1 = 'Статья 3';
  CONTEXT_2 = 'Статья 9';
  FOLDER_PREF = 'HLTC73_21_4_4';
var
  obj, doc;
  str;  
begin                                   
try    
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  doc := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  result := IsExists(doc);
  if NOT result then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  result := SetBookMarkOnContext(doc, CONTEXT_1, FOLDER_PREF + '(1)');
  if NOT result then Raise('Не удалось установить закладку  на искомый контекст');  
  result := SetBookMarkOnContext(doc, CONTEXT_2, FOLDER_PREF + '(2)');
  if NOT result then Raise('Не удалось установить закладку  на искомый контекст');
  obj := GetFromNavigator('ДЕРЕВО "ЗАКЛАДКИ" СО ВКЛАДКИ НАВИГАТОРА "СТРУКТУРА ДОКУМЕНТА"');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ДЕРЕВО "ЗАКЛАДКИ" СО ВКЛАДКИ НАВИГАТОРА "СТРУКТУРА ДОКУМЕНТА"');
  obj.SetFocus;
  Sys.Keys('[Home]');
  result := OpenObjectFromFolder(FOLDER_PREF + '(1)', obj);
  if NOT result then Raise('Не удалось открыть элементе с вкладки навигатора ЗАКЛАДКИ "СТРУКТУРА ДОКУМЕНТА"');  
  {result := Position_Internal(obj, 'Закладки\' + FOLDER_PREF + '(1)');  
  if NOT result then Raise('Не удалось спозиционироваться на элементе вкладки НАВИГАТОРА "СТРУКТУРА ДОКУМЕНТА"');}  
  str := CopyToClipboard(doc, 'STRING', 'Trim := true');  
  result := StringCompare(CONTEXT_1, str);
  if NOT result then
  begin
    Log.Error('Переход со вкладки Структура документа произошол не в эталонное место', str); 
    Raise('Переход со вкладки Структура документа произошол не в эталонное место');
  end;
  obj := GetFromNavigator('ДЕРЕВО "ЗАКЛАДКИ" СО ВКЛАДКИ НАВИГАТОРА "СТРУКТУРА ДОКУМЕНТА"');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ДЕРЕВО "ЗАКЛАДКИ" СО ВКЛАДКИ НАВИГАТОРА "СТРУКТУРА ДОКУМЕНТА"');
  obj.SetFocus;
  Sys.Keys('[Home]');
  result := OpenObjectFromFolder(FOLDER_PREF + '(2)', obj);
  if NOT result then Raise('Не удалось открыть элементе с вкладки навигатора ЗАКЛАДКИ "СТРУКТУРА ДОКУМЕНТА"');
  str := CopyToClipboard(doc, 'STRING', 'Trim := true');  
  result := StringCompare(CONTEXT_2, str);
  if NOT result then
    Log.Error('Переход со вкладки Структура документа произошол не в эталонное место', str);   
  if NOT DeleteAllInMyDoc then                    
    Log.Warning('Не удалось удалить все объекты из моих документов');     
  GoToMainMenu;
except  
  Log.Message('HLTC73_21_4_4_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;

{
HLTC73.21: Работа с закладками
  HLTC73.21.5: Проверить удаление закладки:
    HLTC73.21.5.1: При удалении их из папки должна удалится соответствующая иконка и элемент из дерева на вкладке «Структура документа»
    (должны удаляться все связанные с этой закладкой). 
}
function HLTC73_21_5_1_Execute (var  CurrentState: OleVariant): OleVariant;
const      
  DOC_NUM = 10003000;
  FOLDER_PREF = 'HLTC73_21_5_1';
  CONTEXT = 'Статья 1';
var
  obj, doc, sub;  
begin                                   
try    
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  DeleteAllInMyDoc;
  doc := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  result := IsExists(doc);
  if NOT result then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  result := SetBookMarkOnContext(doc, CONTEXT, FOLDER_PREF);
  if NOT result then Raise('Не удалось установить закладку  на искомый контекст');  
  result := DeleteObjectFromFolder(MY_DOCS_PATH + FOLDER_PREF);
  if NOT result then Raise('Не удалось открыть закладку из Моих документов');
  
  obj := GetFromNavigator('ДЕРЕВО "ЗАКЛАДКИ" СО ВКЛАДКИ НАВИГАТОРА "СТРУКТУРА ДОКУМЕНТА"');  
  result := NOT IsExists(obj);
  if NOT result then Raise('В структуре документа не удалилось ДЕРЕВО "ЗАКЛАДКИ"');    
  sub := GetFromEditor('САБ ПАНЕЛЬ'); 
  result := IsExists(sub);
  if NOT result then Raise('Не удалось обнаружить САБ панель');
  result := NOT MoveMouseToObject(sub, 'BookMark.bmp', 0, 0);
  if NOT result then 
    Log.Error('Иконка с САБ панели не удалилась');  
  GoToMainMenu;
except  
  Log.Message('HLTC73_21_5_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;

{
HLTC73.21: Работа с закладками
  HLTC73.21.5: Проверить удаление закладки:
    HLTC73.21.5.2: Проверить, что удалить закладку можно и путём выбора соответстующего
    пункта контекстного меню для иконки закладки на специальной панели. 
}
function HLTC73_21_5_2_Execute (var  CurrentState: OleVariant): OleVariant;
const      
  DOC_NUM = 10003000;
  FOLDER_PREF = 'HLTC73_21_5_2';
  CONTEXT = 'Статья 1';
var
  obj, doc, sub;
  x, y;
begin
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  DeleteAllInMyDoc;
  doc := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  result := IsExists(doc);
  if NOT result then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  result := SetBookMarkOnContext(doc, CONTEXT, FOLDER_PREF);
  if NOT result then Raise('Не удалось установить закладку на искомый контекст');  
  sub := GetFromEditor('САБ ПАНЕЛЬ');
  result := IsExists(sub);
  if NOT result then Raise('Не удалось обнаружить САБ ПАНЕЛЬ');
  result := MoveMouseToObject(sub,'Bookmark.bmp' ,0 , 0, true);
  if NOT result then Raise('Не удалось найти иконку закладки на СУБ панели');
  y := Sys.Desktop.MouseY;
  x := Sys.Desktop.MouseX;
  common.ScreenToClient(sub, x, y);
  sub.ClickR(x, y);
  result := ClickByPopupMenuItem(sub, 'Удалить закладку');      
  if NOT result then Raise('Не удалось вызвать пункт контекстного меню "Удалить закладку"'); 
  WaitForConfirmationWindow(Options.Run.Timeout div 6,'Да');     
  sub := GetFromEditor('САБ ПАНЕЛЬ'); 
  result := IsExists(sub);
  if NOT result then Raise('Не удалось обнаружить САБ панель');
  result := NOT MoveMouseToObject(sub, 'BookMark.bmp', 0, 0);
  if NOT result then
  begin
    Log.Error('Иконка с САБ панели не удалилась');
    Raise('Иконка с САБ панели не удалилась');
  end;  
  result := NOT Position_Internal(OpenMyDocTab, MY_DOCS_PATH + FOLDER_PREF);
  if NOT result then 
  begin
    Log.Error('Закладка не удалилась из Моих документов');
    Raise('Закладка не удалилась из Моих документов');
  end;
  obj := GetFromNavigator('ДЕРЕВО "ЗАКЛАДКИ" СО ВКЛАДКИ НАВИГАТОРА "СТРУКТУРА ДОКУМЕНТА"');
  result := NOT IsExists(obj);
  if NOT result then Raise('Удалось получить ДЕРЕВО "ЗАКЛАДКИ", хотя его быть не должно!');  
  GoToMainMenu;
except
  Log.Message('HLTC73_21_5_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.21: Работа с закладками
  HLTC73.21.5: Проверить удаление закладки:
    HLTC73.21.5.3: Проверить, что удалённая закладка не появляется при дальнейшей работе 
}
function HLTC73_21_5_3_Execute (var  CurrentState: OleVariant): OleVariant;
const      
  DOC_NUM = 10003000;
  FOLDER_PREF = 'HLTC73_21_5_3';
  CONTEXT = 'Статья 1';
var                         
  obj, doc, sub;  
  x, y;
begin                                   
try    
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  DeleteAllInMyDoc;
  doc := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  result := IsExists(doc);
  if NOT result then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  result := SetBookMarkOnContext(doc, CONTEXT, FOLDER_PREF);
  if NOT result then Raise('Не удалось установить закладку на искомый контекст');  
  sub := GetFromEditor('САБ ПАНЕЛЬ');
  result := IsExists(sub);
  if NOT result then Raise('Не удалось обнаружить САБ ПАНЕЛЬ');
  result := MoveMouseToObject(sub,'Bookmark.bmp' ,0 , 0, true);
  if NOT result then Raise('Не удалось найти иконку закладки на СУБ панели');
  y := Sys.Desktop.MouseY;
  x := Sys.Desktop.MouseX;
  common.ScreenToClient(sub, x, y);
  sub.ClickR(x, y);
  result := ClickByPopupMenuItem(sub, 'Удалить закладку');      
  if NOT result then Raise('Не удалось вызвать пункт контекстного меню "Удалить закладку"'); 
  WaitForConfirmationWindow(Options.Run.Timeout div 6,'Да');  
  //Заходим  в документ по номеру
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  result := NOT Position_Internal(OpenMyDocTab, MY_DOCS_PATH + FOLDER_PREF);
  if NOT result then 
  begin
    Log.Error('Закладка не удалилась из Моих документов');
    Raise('Закладка не удалилась из Моих документов');
  end;
  sub := GetFromEditor('САБ ПАНЕЛЬ'); 
  result := IsExists(sub);
  if NOT result then Raise('Не удалось обнаружить САБ панель');
  result := NOT MoveMouseToObject(sub, 'BookMark.bmp', 0, 0);
  if NOT result then 
  begin
    Log.Error('Иконка с САБ панели не удалилась');
    Raise('Иконка с САБ панели не удалилась');
  end;
  obj := OpenInDocument('ДЕРЕВО "ЗАКЛАДКИ"');
  result := NOT IsExists(obj);  
  if NOT result then
  begin
    Log.Error('Закладка не удалилась, так как существует ДЕРЕВО "ЗАКЛАДКИ"');
    Raise('Закладка не удалилась, так как существует ДЕРЕВО "ЗАКЛАДКИ"');  
  end;    
  //Заходим  в документ через рубрикатор
  OpenObjectFromFolder(LIST_MAIN,OpenMenuTab);
  obj := OpenInList('СПИСОК'); 
  result := IsExists(obj);
  if NOT result then Raise('Не удалось открыть список из рубрикатора');
  result := OpenObjectFromFolder('Конституция Российской Федерации (принята на всенародном голосовании 12 декабря 1993 г.)', obj);
  if NOT result then Raise('Не удалось открыть документ из списка');  
  result := NOT Position_Internal(OpenMyDocTab, MY_DOCS_PATH + FOLDER_PREF);
  if NOT result then 
  begin
    Log.Error('Закладка не удалилась из Моих документов');
    Raise('Закладка не удалилась из Моих документов');
  end;
  sub := GetFromEditor('САБ ПАНЕЛЬ'); 
  result := IsExists(sub);
  if NOT result then Raise('Не удалось обнаружить САБ панель');
  result := NOT MoveMouseToObject(sub, 'BookMark.bmp', 0, 0);
  if NOT result then 
  begin
    Raise('Иконка с САБ панели не удалилась');
    Log.Error('Иконка с САБ панели не удалилась');
  end;  
  obj := OpenInDocument('ДЕРЕВО "ЗАКЛАДКИ"');
  result := NOT IsExists(obj);  
  if NOT result then
  begin
    Log.Error('Закладка не удалилась, так как существует ДЕРЕВО "ЗАКЛАДКИ"');
    Raise('Закладка не удалилась, так как существует ДЕРЕВО "ЗАКЛАДКИ"');  
  end;
  result := true;
  GoToMainMenu;
except  
  Log.Message('HLTC73_21_5_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;

{
HLTC73.21: Работа с закладками
  HLTC73.21.6: Проверить, что система позволяет поставить несколько закладок на один параграф. 
  (под разными именами закладок)
}
function HLTC73_21_6_Execute (var  CurrentState: OleVariant): OleVariant;
const      
  DOC_NUM = 10003000;
  FOLDER_PREF = 'HLTC73_21_6';
  CONTEXT = 'Статья 1';
var
  obj, doc, sub;
  x, y;
begin
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  DeleteAllInMyDoc;
  doc := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  result := IsExists(doc);
  if NOT result then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  result := SetBookMarkOnContext(doc, CONTEXT, FOLDER_PREF + '(1)');
  if NOT result then Raise('Не удалось установить закладку на искомый контекст');
  result := SetBookMark(FOLDER_PREF + '(2)');
  if NOT result then Raise('Не удалось установить закладку на искомый контекст');
  obj := OpenMyDocTab;
  obj.SetFocus;
  Sys.Keys('[Home]');
  result := Position_Internal(obj, MY_DOCS_PATH + FOLDER_PREF + '(1)');
  if NOT result then 
  begin
    Log.Error('Закладка не обнаружилась в Моих документов');
    Raise('Закладка не обнаружилась в Моих документов');
  end;
  obj.SetFocus;
  Sys.Keys('[Home]');
  result := Position_Internal(obj, MY_DOCS_PATH + FOLDER_PREF + '(2)');
  if NOT result then 
    Log.Error('Закладка не обнаружилась в Моих документов');
  if NOT DeleteAllInMyDoc then                    
    Log.Warning('Не удалось все объекты из моих документов'); 
  GoToMainMenu;
except  
  Log.Message('HLTC73_21_6_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;


{
HLTC73.22: Оглавление
  HLTC73.22.1: Оглавление должно формироваться (т.е именно оглавление, а не встроенные объекты) 
  только у документов, со специальной командой. В базе строй-максимум это:
      (Для тестовой базы проверяем для документов: 12025268, 10800200, 10064072).  
    HLTC73.22.5: Проверить, что название группы: Оглавление.
    HLTC73.22.6: Название остальных вершин должно формироваться из саб-неймов 
    (имена блоков, например <Раздел I>).

}
function HLTC73_22_1_Execute (var  CurrentState: OleVariant): OleVariant;
const      
  DOC_NUM_WITHOUT_CONTENTS = 1055132;//Для этого документа проверяем, что у него нет оглавления  
  DOC_NUM_1 = 12025268;
  DOC_NUM_2 = 10003000;
var
  obj;
  doc_num_with_contents;
  pointsContents, contentsName;  
  i;
begin
try
  doc_num_with_contents := [12025268, 10800200, 10064072];  
  pointsContents := [    
      'Часть первая',
        'Часть первая\Раздел *',
      'Часть вторая',
        'Часть вторая*\Раздел*',
      'Часть третья',
        'Часть третья*\Раздел II*', 'Часть тр*\Раздел IV', 'Часть тр*\Раздел V','Часть тр*\Раздел VI',
        'Часть третья*\Раздел VII', 'Часть тр*\Раздел VIII', 'Часть тр*\Раздел IX','Часть тр*\Раздел X',
        'Часть третья*\Раздел XI',
      'Часть четвертая',
        'Часть четвертая*\Раздел XII',
      'Часть пятая',
        'Часть пятая*\Раздел XIII',
      'Часть шестая',
        'Часть шестая*\Раздел XIV'
  ];
  //Проверяем что у этих документов на вкладке структура документа вершиной дерева является пункт <Оглавление>  
  for i:= VarArrayLowBound(doc_Num_with_contents, 1) to VarArrayHighBound(doc_Num_with_contents, 1) do  
  begin
    if NOT OpenDocByNumber(doc_num_with_contents[i]) then Raise('Не удалось открыть документ по Alt+N');
    obj := GetFromEditor('ВКЛАДКА НАВИГАТОРА "СТРУКТУРА ДОКУМЕНТА"');
    if NOT IsExists(obj) then 
    begin
      Log.Error('Не удалось получить ВКЛАДКА НАВИГАТОРА "СТРУКТУРА ДОКУМЕНТА"');
      Raise;
    end;
    obj :=GetFromNavigator('БЛОК НАВИГАТОРА "ОГЛАВЛЕНИЕ"');
    if NOT IsExists(obj) then Raise('Не удалось получить БЛОК НАВИГАТОРА "ОГЛАВЛЕНИЕ"');  
    if NOT StringCompare('Оглавление', obj.Caption) then 
    begin
      Log.Error('Заголовком группы на вкладке Структура документа не является "ОГЛАВЛЕНИЕ"', obj.Caption);
      Raise;
    end;
  end;
  //Проверяем, что у соответствующего документа на вкладке <Структура документа> нет пункта <Оглавление>
  if NOT OpenDocByNumber(DOC_NUM_WITHOUT_CONTENTS) then Raise('Не удалось открыть документ по Alt+N');
  obj := GetFromEditor('ВКЛАДКА НАВИГАТОРА "СТРУКТУРА ДОКУМЕНТА"');  
  if IsExists(obj) then
  begin
    Log.Error('Удалось найти ВКЛАДКА НАВИГАТОРА "СТРУКТУРА ДОКУМЕНТА" там, где "ОГЛАВЛЕНИЕ" быть не должно!');
    Raise;
  end;  
  //Проверяем, что у соответствующего документа пункты оглавления совпадают с эталонными
  if NOT OpenDocByNumber(12025268) then Raise('Не удалось открыть документ по Alt+N');  //Трудовой кодекс
  obj := GetFromNavigator('ВКЛАДКА НАВИГАТОРА "СТРУКТУРА ДОКУМЕНТА"');
  if NOT IsExists(obj) then 
    Raise('Не удалось получить ВКЛАДКА НАВИГАТОРА "СТРУКТУРА ДОКУМЕНТА"');
  //Разворачиваем оглавление
  obj.setFocus;
  Sys.Keys('[Apps]');
  if NOT ClickByPopUpMenuItem(obj, 'Развернуть все') then Raise('Не удалось вызвать из контекстного меню "Развернуть все"');
   
  for i:= VarArrayLowBound(pointsContents, 1) to VarArrayHighBound(pointsContents, 1) do 
  begin    
    if NOT Position_Internal (obj, pointsContents[i], '\', true, 'IsPressHome:=true;ExpandKey:=[NumMinus][NumPlus]') then
    begin
      Log.Error('Не удалось спозиционироваться на эталонный элемент оглавления', pointsContents[i]);
      Raise;
    end; 
  end;
  result := true;
  GoToMainMenu;
except  
  Log.Message('HLTC73_22_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;

{

HLTC73.22: Оглавление
	HLTC73.22.2: Проверить, что специальное оглавление формируется всегда, если в 
  документе есть:
		HLTC73.22.2.1: Закладки		
}
function HLTC73_22_2_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
	DOC_NUM = 1055133;
  CONTEXT = 'Принять';
  PREF = 'HLTC73_22_2_1';
var
  obj;
begin
try
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');  
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  if NOT SetBookMarkOnContext(obj, CONTEXT, PREF) then Raise('Не удалось установить закладку на искомый контекст');
  obj := GetFromNavigator('ДЕРЕВО "ЗАКЛАДКИ" СО ВКЛАДКИ НАВИГАТОРА "СТРУКТУРА ДОКУМЕНТА"');
  if NOT IsExists(obj) then
  begin
    Log.Error('Не удалось получить ДЕРЕВО "ЗАКЛАДКИ" СО ВКЛАДКИ НАВИГАТОРА "СТРУКТУРА ДОКУМЕНТА" при надичие установленной закладки');
    Raise;
  end;  
  if NOT Position_Internal(obj, PREF, '\', true, 'IsPressHome:=true') then
  begin
    Log.Error('На вкладке "Структура документа" не удалось найти пункт оглавления ЗАКЛАДКИ\ '+ PREF);
    Raise;
  end;
  if NOT DeleteAllInMyDoc then Log.Warning('Не удалось все объекты из моих документов');
  result := true;
  GoToMainMenu;
except  
  Log.Message( 'HLTC73_22_2_1_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;

{
HLTC73.22: Оглавление
	HLTC73.22.2: Проверить, что специальное оглавление формируется всегда, если в 
  документе есть:
		HLTC73.22.2.2: Картинки (и ссылки на них)
		
}
function HLTC73_22_2_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM_WITH_PICTURE = 2001;
  DOC_NUM_WITH_LINK_ON_PICTURE = 2206415;
var
	obj;
begin
try
  if NOT OpenDocByNumber(DOC_NUM_WITH_PICTURE) then Raise('Не удалось открыть документ по Alt+N');  
  obj := GetFromNavigator('ДЕРЕВО "ВСТРОЕННЫЕ ОБЪЕКТЫ" СО ВКЛАДКИ НАВИГАТОРА "СТРУКТУРА ДОКУМЕНТА"');
  if NOT IsExists(obj) then Raise('Не удалось получить ДЕРЕВО "ВСТРОЕННЫЕ ОБЪЕКТЫ" СО ВКЛАДКИ НАВИГАТОРА "СТРУКТУРА ДОКУМЕНТА при наличие картинки'); 
  if NOT ( Position_Internal (obj, 'Чертеж*','\', true, 'IsPressHome:=true') AND
           Position_Internal (obj, 'Эта*',   '\', true, 'IsPressHome:=true') )then
  begin
    Log.Error('На вкладке "Структура документа" не удалось найти подпункты в группе РИСУНКИ');
    Raise;
  end;

  if NOT OpenDocByNumber(DOC_NUM_WITH_LINK_ON_PICTURE) then Raise('Не удалось открыть документ по Alt+N');  
  obj := GetFromNavigator('ДЕРЕВО "ВСТРОЕННЫЕ ОБЪЕКТЫ" СО ВКЛАДКИ НАВИГАТОРА "СТРУКТУРА ДОКУМЕНТА"');
  if NOT IsExists(obj) then Raise('Не удалось получить ДЕРЕВО "ВСТРОЕННЫЕ ОБЪЕКТЫ" СО ВКЛАДКИ НАВИГАТОРА "СТРУКТУРА ДОКУМЕНТА при наличие картинки');
  
  if NOT ( Position_Internal(obj, 'Приложение*','\', true, 'IsPressHome:=true') AND 
           Position_Internal(obj, 'Формулы*','\', true, 'IsPressHome:=true') )then
  begin
    Log.Error('На вкладке "Структура документа" не удалось найти подпункты в группе ВСТРОЕННЫЕ ОБЪЕКТЫ');
    Raise;
  end;
  result := true;
  GoToMainMenu;
except  
  Log.Message( 'HLTC73_22_2_2_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;

{
HLTC73.22: Оглавление
	HLTC73.22.2: Проверить, что специальное оглавление формируется всегда, если в 
  документе есть:
		HLTC73.22.2.3: Встроенные обекты (и просто ссылки на них)
		
}
function HLTC73_22_2_3_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM= 2001;
var
	obj;
begin
try
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');  
  obj := GetFromNavigator('ДЕРЕВО "ВСТРОЕННЫЕ ОБЪЕКТЫ" СО ВКЛАДКИ НАВИГАТОРА "СТРУКТУРА ДОКУМЕНТА"');
  if NOT IsExists(obj) then Raise('Не удалось получить ДЕРЕВО "ВСТРОЕННЫЕ ОБЪЕКТЫ" СО ВКЛАДКИ НАВИГАТОРА "СТРУКТУРА ДОКУМЕНТА" при наличие сылки на встроенные объекты');
  if NOT ( Position_Internal(obj, 'Приложение*', '\', true, 'IsPressHome:=true') AND
           Position_Internal(obj, 'Заявление*',  '\', true, 'IsPressHome:=true') AND
           Position_Internal(obj, 'Государственный гимн*', '\', true, 'IsPressHome:=true') AND
           Position_Internal(obj, 'Чертеж*', '\', true, 'IsPressHome:=true')  AND           
           Position_Internal(obj, 'Эта картинка принадлежит*', '\', true, 'IsPressHome:=true') AND           
           Position_Internal(obj, 'Эта картинка с несовпадающим размером*', '\', true, 'IsPressHome:=true')) then
  begin
    Log.Error('На дереве "ВСТРОЕННЫЕ ОБЪЕКТЫ" не удалось найти подпункты один из подпунктов оглавления');
    Raise;
  end;
  result := true;
  GoToMainMenu;
except  
  Log.Message( 'HLTC73_22_2_3_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;

{
HLTC73.22: Оглавление
  HLTC73.22.1: Оглавление должно формироваться (т.е именно оглавление, а не встроенные объекты) только у документов, со специальной командой:
  	HLTC73.22.1.5: Нет команды !CONTENTS – нет оглавления
       В документах:
       1055134 
       650000
       2004
      Не должно быть оглавления, т.к, в них нет команды !CONTENTS.		
}
function HLTC73_22_1_5_Execute (var  CurrentState: OleVariant): OleVariant;
const  
  LOGIN = 'HLTC73_22_1_5';
var
	obj;
  count;
  paswd;
  docs_without_contents;
  i; 
begin
try
  docs_without_contents := [1055134, 650000, 2004];
  count := 5;
  paswd := LOGIN;  
  //Перелогиниваемся, для того что бы быть уверенным, что в этом докуменет нет ранее установленных закладок
  // и комментариев(т.е. нет вкладки Структура документа)
  RestartF1Shell(count, Options.Run.Timeout div 6, LOGIN, paswd);  
  for i := VarArrayLowBound(docs_without_contents, 1) to VarArrayHighBound(docs_without_contents, 1) do
  begin  
    if NOT OpenDocByNumber(docs_without_contents[i]) then 
      Raise('Не удалось открыть документ: ' + docs_without_contents[i] + ' по Alt+N');
    obj := GetFromEditor('ВКЛАДКА НАВИГАТОРА "СТРУКТУРА ДОКУМЕНТА"');
    if IsExists(obj) then    
    begin
      Log.Error('У документа ' + docs_without_contents[i] + ' Существет ОГЛАВЛЕНИЕ, так как есть вкладкаСТРУКТУРА ДОКУМЕНТА!');
      Raise('У документа ' + docs_without_contents[i] + ' Существет ОГЛАВЛЕНИЕ, так как есть вкладкаСТРУКТУРА ДОКУМЕНТА!');
    end;
  end;
  GoToMainMenu;
  result := true;  
except  
  Log.Message( 'HLTC73_22_3_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;

{
HLTC73.22: Оглавление
  HLTC73.22.8: Проверить, что при добавлении моего комментария, соответствующая ссылка на него формируется в структуре документа.
}
function HLTC73_22_8_Execute (var  CurrentState: OleVariant): OleVariant;
const
	DOC_NUM = 1055135;  
  COMMENT = 'HLTC73_22_8';
var
  obj;
begin
try
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');  
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  if NOT InsertComment(obj, COMMENT) then Raise('Не удалось установить комментарий');
  obj := GetFromNavigator('ДЕРЕВО "МОИ КОММЕНТАРИИ" СО ВКЛАДКИ НАВИГАТОРА "СТРУКТУРА ДОКУМЕНТА"');
  if NOT IsExists(obj) then
  begin
    Log.Error('Не удалось получить ДЕРЕВО "МОИ КОММЕНТАРИИ" СО ВКЛАДКИ НАВИГАТОРА "СТРУКТУРА ДОКУМЕНТА" при наличие установленного комментария');
    Raise;
  end;  
  if NOT Position_Internal(obj, COMMENT, '\', true, 'IsPressHome:=true') then
  begin
    Log.Error('На вкладке "Структура документа" не удалось найти пункт оглавления Мои комментарии\ '+ COMMENT);
    Raise;
  end;
  if DeleteAllUserCommentsFromContents < 1 then
    Log.Warning('Не было удалено ни одного комментария');
  result := true;
  GoToMainMenu;
except  
  Log.Message( 'HLTC73_22_8_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;

{
  HLTC73.24: Просмотр графического образа документа
    HLTC73.24.1: Проверить, что для следующих документов активируются переходы 
    на показ графического образа документа (находящийся на сайте компании Гарант) через кнопку 
    на тулбаре(для конфигурации расширенная) и через ссылку в тексте документа:
     HLTC73.24.1.1: 1055606 – тестовая база
}
function HLTC73_24_1_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055606;
  URL = 'http://mirror2.garant.ru/webclient/index.dsp*';
  CONFIGURATION = 'Основная';
var
  obj;
  ieAgent;
begin                                  
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  //открытие через ПЗ - временное решение
  result := OpenGraphicMode(obj); 
  if NOT result then    
  begin
    Log.Error('Не удалось  на тулбаре нажать кнопку "Графическая копия официальной публикации"');
    Raise('Не удалось  на тулбаре нажать кнопку "Графическая копия официальной публикации"');
  end; 
  ieAgent := GetFromInternetAgent('ОСНОВНАЯ ОБЛАСТЬ');
  Result := IsExists(ieAgent) AND ieAgent.Visible AND (stringCompare('*'+ URL +'*', GetMainWindow.Caption));      
  if NOT Result then
  begin
   Log.Error('Не удалось обнаружить активное окно IE_AGENT');
   Raise('Не удалось обнаружить активное окно IE_AGENT');
  end;        
  
  if NOT SelectConfiguration(CONFIGURATION) then  
    Raise('Не удалось переключится на конфигурацию: ' + CONFIGURATION); 
  //Для ссылки
  GoToMainMenu;
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  result := IsExists(obj);    
  if NOT result then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  Sys.Keys('^[Home][Up][Up]');
  if NOT MoveMouseToObject(obj,'Juridical_Comments_in_text.bmp',0,0,true) then
    Raise('Не удалось кликнуть по исконке Юридического комментария со ссылкой на графический образ');
  ieAgent := GetFromInternetAgent('ОСНОВНАЯ ОБЛАСТЬ');
  Result := IsExists(ieAgent) AND ieAgent.Visible AND (stringCompare('*'+ URL +'*', GetMainWindow.Caption));      
  if NOT Result then  
   Log.Error('Не удалось обнаружить активное окно IE_AGENT');    
  GoToMainMenu;
except
  Log.Message('HLTC73_24_1_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;


{
  HLTC73.24: Просмотр графического образа документа
    HLTC73.24.2: Проверить, что возможность перехода на графический образ отсутствует для
     HLTC73.24.2.1: Конституции РФ
}
function HLTC73_24_2_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;
var
  obj;
begin
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := GetFromEditor('ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТУЛБАР документа');
  obj := GetToolBarObject(obj, 'BUTTON', 'Графическая копия официальной публикации');
  result := obj.Exists AND (NOT obj.NativeDelphiObject.Enabled);
  if NOT result then 
    Log.Error('кнопка "Графическая копия официальной публикации" НЕ Disable '); 
  GoToMainMenu;
except
  Log.Message('HLTC73_24_2_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
  HLTC73.24: Просмотр графического образа документа
    HLTC73.25.1: При скроллировании документа (фокус документа) курсор всегда должен быть виден, проверить при скроллировании при помощи:
     HLTC73.25.1.1: PgDwn
     HLTC73.25.1.2: PgUp
}
function HLTC73_25_1_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10004543;
var
  obj;
  str;
  resStr;
begin
try  
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');  
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  obj.Click(1,obj.Height-1);//Идём вниз 1-ой страницы  
  PressKeyNCount('[Up]', 5);//выделяем диапазон +5/- 10 строк
  PressKeyNCount('![Down]', 10);  
  str := CopyToClipboard(obj,'','Trim := true');
  Sys.Keys('^[Home]');
  Sys.Keys('[PageDown]');
  resStr := CopyToClipboard(obj,'STRING','Trim := true'); 
  if NOT StringCompare('*'+resStr+'*', str) then
  begin
    Log.Error('После нажатия PageDown перешли в НЕ эталонное место докуимента:' + resStr);
    Raise('После нажатия PageDown перешли в НЕ эталонное место докуимента:' + resStr);  
  end;
  Sys.Keys('[PageDown]');
  Sys.Keys('[PageUp]');
  resStr := CopyToClipboard(obj,'STRING','Trim := true'); 
  if NOT StringCompare('*'+resStr+'*', str) then
  begin
    Log.Error('После нажатия PageUp перешли в НЕ эталонное место докуимента:' + resStr);
    Raise('После нажатия PageUp перешли в НЕ эталонное место докуимента:' + resStr);  
  end;    
  GoToMainMenu;
  result := true;
except
  Log.Message('HLTC73_25_1_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.25: Навигация в документе
  HLTC73.25.2: Нажатие правой кнопки мыши над текстом документа должно приводить к перемещению 
  курсора на эту позицию и последующему вызову контекстного меню.
}
function HLTC73_25_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000;
  CONTEXT = 'Родину';
var
  obj;
  x, y;
  cursorX;
  cursorY;
begin
try
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  obj := OpenInDocument('ТЕКСТ');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ');
  if NOT GetCoordsSearchContext(obj, CONTEXT, x, y) then Raise ('Не удалось найти координаты искомого контекста');
  Sys.Keys('^[Home]');
  obj.ClickR(x, y);
  Delay(Options.Run.Timeout div 60);
  if NOT IsPopupMenuExists then
  begin
    Log.Error('После клика правой кнопкой в документе не открылось контекстное меню!');
    Raise;
  end;
  Sys.Keys('[Esc]');
  if NOT GetCaretCoord(obj, cursorX, cursorY) then Raise('Не удалось получить координаты курсора');
  if NOT ((cursorX < x + 10) AND (cursorX > x - 10)) then
  begin
    Log.Error('Координата курсора X = '+ IntToStr(cursorX) +' не попадает в координаты эталонного диапазона "'+IntToStr(x)+'+/- 10"');
    Raise;
  end;
  if NOT ((cursorY < y + 10) AND (cursorY > y - 10)) then
  begin
    Log.Error('Координата курсора Y = '+ IntToStr(cursorY) +' не попадает в координаты эталонного диапазона "'+IntToStr(y)+'+/- 10"');
    Raise;
  end;
  result := true;
  GoToMainMenu;
except
  Log.Message('HLTC73_25_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.26: Просмотр картинки..
  HLTC73.26.1: Открытие режима просмотра картинки. Перейти в документ с внутренним номером 3822606, 
  перейти к любой картинке из оглавления. Перейти в режим просмотра картинки:
    HLTC73.26.1.2: Пункт контекстного меню «Открыть в текущем окне». В основной области  должна загрузиться картинка
}
function HLTC73_26_1_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 3822606;
  CONTEXT = 'Рисунок Г.3. "Расположение крепежных деталей"*';
  CONTEXT_1 = '"Рисунок Г 3 Расположение крепежных деталей"';
var
  obj;  
begin                                  
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := GetFromNavigator('ДЕРЕВО "ВСТРОЕННЫЕ ОБЪЕКТЫ" СО ВКЛАДКИ НАВИГАТОРА "СТРУКТУРА ДОКУМЕНТА"');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ДЕРЕВО "ВСТРОЕННЫЕ ОБЪЕКТЫ" СО ВКЛАДКИ НАВИГАТОРА "СТРУКТУРА ДОКУМЕНТА" ');
  result := OpenObjectFromFolder(CONTEXT , obj);
  if NOT result then Raise('Не удалось картинку с вкладки "Структура документа"');
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  result := ClickOnContext(obj, CONTEXT_1, true, obj.Width div 2, -10, 'isScrollUp:=true');
  if NOT result then Raise('Не удалось кликнуть правой кнопкой по графическому объекту'); 
  result := ClickByPopupMenuItem(obj, 'Открыть в текущем окне');      
  if NOT result then Raise('Не удалось вызвать пункт контекстного меню "Открыть в текущем окне"');   
  obj := GetFromMainWindow('ГРАФИЧЕСКИЙ ОБЪЕКТ');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ГРАФИЧЕСКИЙ ОБЪЕКТ');      
  GoToMainMenu;
except
  Log.Message('HLTC73_26_1_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.26: Просмотр картинки..
  HLTC73.26.1: Открытие режима просмотра картинки. Перейти в документ с внутренним номером 3822606, 
  перейти к любой картинке из оглавления. Перейти в режим просмотра картинки:
    HLTC73.26.1.3: Пункт контекстного меню «Открыть в новом окне». Должно открыться новое окно 
    системы и в нем в основной области  должна загрузиться картинка.
}
function HLTC73_26_1_3_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 3822606;
  CONTEXT = 'Рисунок Г.3. "Расположение крепежных деталей"*';
  CONTEXT_1 = '"Рисунок Г 3 Расположение крепежных деталей"';
  DOC_NAME = '*Рисунок из документа*';
var
  obj; 
  addWnd;
  res1,res2;
  i:integer;
  w,w1,p; 
begin                                  
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := GetFromNavigator('ДЕРЕВО "ВСТРОЕННЫЕ ОБЪЕКТЫ" СО ВКЛАДКИ НАВИГАТОРА "СТРУКТУРА ДОКУМЕНТА"');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ДЕРЕВО "ВСТРОЕННЫЕ ОБЪЕКТЫ" СО ВКЛАДКИ НАВИГАТОРА "СТРУКТУРА ДОКУМЕНТА" ');
  result := OpenObjectFromFolder(CONTEXT , obj);
  if NOT result then Raise('Не удалось картинку с вкладки "Структура документа"');
  obj := OpenInDocument('ТЕКСТ');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  result := ClickOnContext(obj, CONTEXT_1, true, obj.Width div 2, -10, 'isScrollUp:=true');
  if NOT result then Raise('Не удалось кликнуть правой кнопкой по графическому объекту'); 
  result := ClickByPopupMenuItem(obj, 'Открыть в новом окне');      
  if NOT result then Raise('Не удалось вызвать пункт контекстного меню "Открыть"');  
  
  for i := 1 to 2 do
  begin
    w1 := GetMainWindow('ContainerIndex:=' + IntToStr(i));
    if not IsExists(w1) then
      Raise('Не найдено окно с ContainerIndex:=' + IntToStr(i));
    if (i=1) then w := GetFromMainWindow('ФОРМА ПРОСМОТРА ГРАФИЧЕСКОГО ОБЪЕКТА', 'ContainerIndex:=1');     
    if (i=2) then w := GetFromEditor('ТЕКСТ ДОКУМЕНТА', nil, w1);
    if NOT IsExists(w) then
    begin    
      Log.Error('Не найден ТЕКСТ ДОКУМЕНТА в окне с ContainerIndex:=' + IntToStr(i));
      Raise;
    end;
    if (i=1) AND (NOT StringCompare('*'+DOC_NAME+'*', GetTabCaption('ContainerIndex:=1'))) then
    begin
      Log.Error('В новом окне открылся не эталонный документ');
      Raise;
    end;
  end;      
  result := true;               
except
  Log.Message('HLTC73_26_1_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;  
end;
  CloseF1Shell;
end;

{
HLTC73.26: Просмотр картинки..
  HLTC73.26.2: Масштабирование картинки.
    HLTC73.26.2.1: Проверить, что при изменении масштаба картинка корректно показывается. 
    Масштаб картинки может быть изменен:
      HLTC73.26.2.1.1: Комбобокс «Изменить масштаб» Панели инструментов

      HLTC73.26.2.2: Проверить, что если картинка непосредственно встроена в текст документа, то должна 
      существовать возможность поработать с ней аналогично простой ссылке на встроенный объект (т.е. 
      «открыть» ее независимо). Документ с картинками можно найти по контекстному поиску в ППР «графический 
      объект». Документ со встроенными картинками в тестовой базе имеет внутренний номер 3822606.
}
function HLTC73_26_2_1_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 3822606;
  CONTEXT = 'Рисунок Г.3. "Расположение крепежных деталей"*';
  CONTEXT_1 = '"Рисунок Г 3 Расположение крепежных деталей"';
var
  obj;
  comboBox, doc, toolBar;
begin                                  
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := GetFromNavigator('ДЕРЕВО "ВСТРОЕННЫЕ ОБЪЕКТЫ" СО ВКЛАДКИ НАВИГАТОРА "СТРУКТУРА ДОКУМЕНТА"');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ДЕРЕВО "ВСТРОЕННЫЕ ОБЪЕКТЫ" СО ВКЛАДКИ НАВИГАТОРА "СТРУКТУРА ДОКУМЕНТА" ');
  result := OpenObjectFromFolder(CONTEXT , obj);
  if NOT result then Raise('Не удалось картинку с вкладки "Структура документа"');
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  result := ClickOnContext(obj, CONTEXT_1, false, obj.Width div 2, -10, 'isScrollUp:=true');
  if NOT result then Raise('Не удалось кликнуть по графическому объекту');
  doc := GetFromMainWindow('ГРАФИЧЕСКИЙ ОБЪЕКТ');
  result := IsExists(doc) AND doc.Visible;
  if NOT result then 
  begin
    Log.Error('Не удалось получить ГРАФИЧЕСКИЙ ОБЪЕКТ');
    Raise('Не удалось получить ГРАФИЧЕСКИЙ ОБЪЕКТ');  
  end;
  toolBar := GetFromMainWindow('ТУЛБАР "ДОКУМЕНТ: ГРАФИЧЕСКИЙ ОБЪЕКТ"');
  result := IsExists(toolBar);
  if NOT result then Raise('Не удалось получить ТУЛБАР "ДОКУМЕНТ: ГРАФИЧЕСКИЙ ОБЪЕКТ"');
  comboBox := GetToolBarObject(toolBar, 'COMBOBOX', 'Изменить масштаб');
  result := IsExists(comboBox);
  if NOT result then Raise('Не удалось получить ComboBox "Изменить масштаб"');
  result := SelectInCombobox(comboBox, '50 %');
  if NOT result then Raise('Не удалось изменить значение в комбобоксе');  
  result := MoveMouseToObject(doc, 'picture_scale_50.bmp',0,0);
  if NOT result then 
  begin
    Log.Error('Картинка при масштабе 50% не равна эталонной');
    Raise('Картинка при масштабе 50% не равна эталонной');
  end;
  result := SelectInCombobox(comboBox, '200 %');
  if NOT result then Raise('Не удалось изменить значение в комбобоксе');  
  doc := GetFromMainWindow('ГРАФИЧЕСКИЙ ОБЪЕКТ');
  result := IsExists(doc);
  if NOT result then Raise('Не удалось получить ГРАФИЧЕСКИЙ ОБЪЕКТ');
  {doc.VScroll.Pos := 0;
  doc.HScroll.Pos := 0;
  result := MoveMouseToObject(doc, 'picture_scale_200.bmp',0,0);
  if NOT result then 
  begin  
    Log.Error('Картинка при масштабе 200 % не равна эталонной');
    Raise('Картинка при масштабе 200 % не равна эталонной');
  end;}
  result := SelectInCombobox(comboBox, '100 %');
  if NOT result then Raise('Не удалось изменить значение в комбобоксе');
  doc := GetFromMainWindow('ГРАФИЧЕСКИЙ ОБЪЕКТ');
  result := IsExists(doc);
  if NOT result then Raise('Не удалось получить ГРАФИЧЕСКИЙ ОБЪЕКТ');  
  result := MoveMouseToObject(doc, 'picture_scale_100.bmp',0,0);
  if NOT result then 
    Log.Error('Картинка при масштабе 100 % не равна эталонной');  
  GoToMainMenu;
except
  Log.Message('HLTC73_26_2_1_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;


{
HLTC73.26: Просмотр картинки..
  HLTC73.26.2: Масштабирование картинки.
    HLTC73.26.2.1: Проверить, что при изменении масштаба картинка корректно показывается. 
    Масштаб картинки может быть изменен:
      HLTC73.26.2.1.2: Кнопки «Увеличить», «Уменьшить», «Во все окно» Панели инструментов.
}
function HLTC73_26_2_1_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 3822606;
  CONTEXT = 'Рисунок Г.3. "Расположение крепежных деталей"*';
  CONTEXT_1 = '"Рисунок Г 3 Расположение крепежных деталей"';
var
  obj;
  comboBox, doc, toolBar;
  i;
begin                                  
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := GetFromNavigator('ДЕРЕВО "ВСТРОЕННЫЕ ОБЪЕКТЫ" СО ВКЛАДКИ НАВИГАТОРА "СТРУКТУРА ДОКУМЕНТА"');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ДЕРЕВО "ВСТРОЕННЫЕ ОБЪЕКТЫ" СО ВКЛАДКИ НАВИГАТОРА "СТРУКТУРА ДОКУМЕНТА" ');
  result := OpenObjectFromFolder(CONTEXT , obj);
  if NOT result then Raise('Не удалось картинку с вкладки "Структура документа"');
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  result := ClickOnContext(obj, CONTEXT_1, false, obj.Width div 2, -10, 'isScrollUp:=true');
  if NOT result then Raise('Не удалось кликнуть по графическому объекту'); 
  toolBar := GetFromMainWindow('ТУЛБАР "ДОКУМЕНТ: ГРАФИЧЕСКИЙ ОБЪЕКТ"');
  result := IsExists(toolBar);
  if NOT result then Raise('Не удалось получить ТУЛБАР "ДОКУМЕНТ: ГРАФИЧЕСКИЙ ОБЪЕКТ"');
  //Кликаем 2 раза уменьшить, что б сделать масштаб 50 %
  for i := 1 to 2 do
    if NOT ClickToolBarButton(toolBar, 'Уменьшить') then 
    begin
      Log.Error('Не удалось кликнуть по кнопке "Уменьшить"');
      Raise('Не удалось кликнуть по кнопке "Уменьшить"');
    end;   
  doc := GetFromMainWindow('ГРАФИЧЕСКИЙ ОБЪЕКТ');
  result := IsExists(doc);
  if NOT result then Raise('Не удалось получить ГРАФИЧЕСКИЙ ОБЪЕКТ');  
  result := MoveMouseToObject(doc, 'picture_scale_50.bmp',0,0);
  if NOT result then 
  begin
    Log.Error('Картинка при масштабе 50% не равна эталонной');
    Raise('Картинка при масштабе 50% не равна эталонной');
  end;
  //Кликаем 5 раз увеличить, что б сделать масштаб 200 %
  for i := 1 to 5 do
    if NOT ClickToolBarButton(toolBar, 'Увеличить') then 
    begin
      Log.Error('Не удалось кликнуть по кнопке "Уменьшить"');
      Raise('Не удалось кликнуть по кнопке "Уменьшить"');
    end;
  doc := GetFromMainWindow('ГРАФИЧЕСКИЙ ОБЪЕКТ');
  result := IsExists(doc);
  if NOT result then Raise('Не удалось получить ГРАФИЧЕСКИЙ ОБЪЕКТ');  
  
  //Выбираем из комбококса максимальное значение 2000 %(что б появились скролл бары)
  //Кликаем по кнопке "во всё окно", должны исчезнуть скроллбары
  comboBox := GetToolBarObject(toolBar, 'COMBOBOX', 'Изменить масштаб');
  if NOT IsExists(comboBox) then Raise('Не удалось получить ComboBox "Изменить масштаб"');
  result := SelectInCombobox(comboBox, '2000 %');
  if NOT result then Raise('Не удалось изменить значение в комбобоксе');
  if NOT ClickToolBarButton(toolBar, 'Во все окно') then 
  begin
    Log.Error('Не удалось кликнуть по кнопке "Во все окно"');
    Raise('Не удалось кликнуть по кнопке "Во все окно"');
  end;
  doc := GetFromMainWindow('ГРАФИЧЕСКИЙ ОБЪЕКТ');
  if NOT IsExists(doc) then Raise('Не удалось получить ГРАФИЧЕСКИЙ ОБЪЕКТ');  
  if IsExistsScrollBar(doc, HSCROLLBAR) AND IsExistsScrollBar(doc, VSCROLLBAR) then
    Log.Error('Скролл бар существует, значит картинка открыта НЕ во всё окно'); 
  GoToMainMenu;
except
  Log.Message('HLTC73_26_2_1_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.26: Просмотр картинки..
  HLTC73.26.2: Масштабирование картинки.
    HLTC73.26.2.1: Проверить, что при изменении масштаба картинка корректно показывается. 
    Масштаб картинки может быть изменен:
      HLTC73.26.2.1.3: Кнопки «Увеличить», «Уменьшить», «Во все окно» Контекстного меню.
}
function HLTC73_26_2_1_3_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 3822606;
  CONTEXT = 'Рисунок Г.3. "Расположение крепежных деталей"*';
  CONTEXT_1 = '"Рисунок Г 3 Расположение крепежных деталей"';
var
  obj;
  comboBox, doc, toolBar;
  i;
begin                                  
try
  result := OpenDocByNumber(DOC_NUM);
  if NOT result then Raise('Не удалось открыть документ по Alt+N');
  obj := GetFromNavigator('ДЕРЕВО "ВСТРОЕННЫЕ ОБЪЕКТЫ" СО ВКЛАДКИ НАВИГАТОРА "СТРУКТУРА ДОКУМЕНТА"');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ДЕРЕВО "ВСТРОЕННЫЕ ОБЪЕКТЫ" СО ВКЛАДКИ НАВИГАТОРА "СТРУКТУРА ДОКУМЕНТА" ');
  result := OpenObjectFromFolder(CONTEXT , obj);      
  if NOT result then Raise('Не удалось открыть картинку с вкладки "Структура документа"');
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  result := IsExists(obj);
  if NOT result then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  result := ClickOnContext(obj, CONTEXT_1, false, obj.Width div 2, -10, 'isScrollUp:=true');
  if NOT result then Raise('Не удалось кликнуть по графическому объекту'); 
  //Кликаем 2 раза контекстную операцию уменьшить, что б сделать масштаб 50 %
  for i := 1 to 2 do
  begin
    doc := GetFromMainWindow('ГРАФИЧЕСКИЙ ОБЪЕКТ');
    if NOT IsExists(doc) then Raise('Не удалось получить ГРАФИЧЕСКИЙ ОБЪЕКТ');      
    doc.SetFocus;
    Sys.Keys('[Apps]');
    if NOT ClickByPopupMenuItem(doc,'Уменьшить') then
    begin
      Log.Error('Не удалось кликнуть по контекстной операции "Уменьшить"');
      Raise('Не удалось кликнуть по контекстной операции "Уменьшить"');
    end;   
  end;  
  result := MoveMouseToObject(doc, 'picture_scale_50.bmp',0,0);
  if NOT result then 
  begin
    Log.Error('Картинка при масштабе 50% не равна эталонной');
    Raise('Картинка при масштабе 50% не равна эталонной');
  end;
  //Кликаем 5 раз увеличить, что б сделать масштаб 200 %
  for i := 1 to 5 do
  begin
    doc := GetFromMainWindow('ГРАФИЧЕСКИЙ ОБЪЕКТ');
    if NOT IsExists(doc) then Raise('Не удалось получить ГРАФИЧЕСКИЙ ОБЪЕКТ');      
    doc.SetFocus;
    Sys.Keys('[Apps]');
    if NOT ClickByPopupMenuItem(doc,'Увеличить') then
    begin
      Log.Error('Не удалось кликнуть по контекстной операции "Увеличить"');
      Raise('Не удалось кликнуть по контекстной операции "Увеличить"');
    end;   
  end;  
  //Кликаем по кнопке контекстного меню "Во всё окно", должны исчезнуть скроллбары
  doc := GetFromMainWindow('ГРАФИЧЕСКИЙ ОБЪЕКТ');
  if NOT IsExists(doc) then Raise('Не удалось получить ГРАФИЧЕСКИЙ ОБЪЕКТ');  
  doc.SetFocus;
  Sys.Keys('[Apps]');
  if NOT ClickByPopupMenuItem(doc,'Во все окно') then
  begin
    Log.Error('Не удалось кликнуть по контекстной операции "Во все окно"');
    Raise('Не удалось кликнуть по контекстной операции "Во все окно"');
  end;
  if IsExistsScrollBar(doc, HSCROLLBAR) AND IsExistsScrollBar(doc, VSCROLLBAR) then  
    Log.Error('Скролл бар существует, значит картинка открыта НЕ во всё окно'); 
  GoToMainMenu;
except
  Log.Message('HLTC73_26_2_1_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.26: Просмотр картинки..
  HLTC73.26.2: Масштабирование картинки.
    HLTC73.26.2.3: Проверить, что картинка, встроенная в текст автоматически масштабируется 
    по текущей видимой области, т.е окна того документа, в котрый она встроена. Документ со встроенными
    картинками в тестовой базе имеет внутренний номер 3822606.
}
function HLTC73_26_2_3_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 2001;
  CONTEXT = 'СЕЙЧАС';
var
  obj;
  doc;
  i;
  x, y;
  xPict, yPict;
  pict; 
begin                                  
try
  pict := 'pictureFrom2001.bmp';
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');  
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');  
  if NOT GetCoordsSearchContext(obj, CONTEXT, x, y) then Raise('Не удалось найти выделенный фрагмент');
  x := obj.Width-20;
  obj.Click(x, y + 25);  
  doc := GetFromMainWindow('ГРАФИЧЕСКИЙ ОБЪЕКТ');
  if NOT IsExists(doc) then 
  begin
    Log.Error('Не удалось получить ГРАФИЧЕСКИЙ ОБЪЕКТ');
    Raise('Не удалось получить ГРАФИЧЕСКИЙ ОБЪЕКТ');
  end;
  //Надо проверить, что смаштабировались по ширине (ширина картинки 255*65)
  if NOT FindPicture(doc, pict, xPict, yPict, doc.Width div 2 -135, doc.Height div 2 -40, 270, 80) then
  begin
    Sys.Keys('[Esc]');
    Log.Error('Не удалось найти картинку по центру, видимо она не смаштабировалась по ширине');
    Raise;
  end;    
  Sys.Keys('[Esc]');
  result := true;
  GoToMainMenu;
except
  Log.Message('HLTC73_26_2_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.27: Откат и возвращение изменений в документе 
Undo-Redo
  HLTC73.27.1: 
  Удаление и возврат комментария
   1. Открыть любой документ
   2. Добавить мой комментарий
   3. Нажать Ctrl+Z (отмена изменений)
   Комментарий должен пропасть
  4. Нажать Ctrl+Shift+Z (возврат изменений)
   Комментарий должен появиться вновь.
}
function HLTC73_27_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 1055132;
  PREF = 'HLTC73_27_1';
var
  obj;
begin                                   
try
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');   
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  DeleteAllUserCommentsFromContents;
  obj.SetFocus;
  PressKeyNCount('[Down]', 3);//   из за ошибки $480804910
  Sys.Keys('[Enter]' + keyPause + PREF + keyPause) ;    
  Sys.Keys('^z');
  if NOT IsNotExistsComment(PREF) then 
  begin
    Log.Error('После ^z Удалось найти польз. комментарий, хотя его быть не должно');
    Raise('После ^z Удалось найти польз. комментарий, хотя его быть не должно');
  end;  
  Sys.Keys('!^z');   
  result := IsExistsComment(PREF);
  if NOT result then   
  begin
    Log.Error('НЕ удалось найти польз.комментарий после !^z');
    Raise('НЕ удалось найти польз.комментарий после !^z');
  end;                      
  if DeleteAllUserCommentsFromContents < 1 then
    Log.Warning('Не было удалено ни одного комментария');
  GoToMainMenu;
except  
  Log.Message('HLTC73_27_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  if DeleteAllUserCommentsFromContents < 1 then
    Log.Warning('Не было удалено ни одного комментария');
  result := false;
  CommonExceptionHandler;             
end;
end;

{
HLTC73.27: Откат и возвращение изменений в документе 
Undo-Redo
  HLTC73.27.2: Дополнить комментарий каким либо текстом и нажать сочетание клавш 
  Ctrl+Z – добавленный текст должен пропасть. Нажать сочетание клавиш Shift+Ctrl+Z – изменения
  должны вернуться.		
}
function HLTC73_27_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000; 
  FOLDER_PREF = 'HLTC73_27_2';
var
  obj;
  str;
  x, y1, y2;
begin                                   
try
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');   
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  DeleteAllUserCommentsFromContents;
  obj.SetFocus;  
  Sys.Keys('^[Home][Enter]');
  Sys.Keys(FOLDER_PREF);
  Delay(Options.Run.TimeOut div 30);
  Sys.Keys('^z');
  if NOT ClickNearIconOnSubInDocument(obj, 'КОММЕНТАРИЙ ПОЛЬЗОВАТЕЛЯ') then
    Raise('Не удалось кликнуть в докумнете возле иконки комментария');
  x := 0; y1 := 0; y2 := 0;  
  if NOT GetCaretCoord(obj, x, y1) then Raise('Не удалось получить координаты коретки');
  Sys.Keys('[Right]');  
  if NOT GetCaretCoord(obj, x, y2) then Raise('Не удалось получить координаты коретки');
  if y1 = y2 then    
  begin
    Log.Error('Текст комментария после Ctrl+Z не удалился');
    Raise('Текст комментария после Ctrl+Z не удалился');
  end;
    
  DeleteAllUserCommentsFromContents;
  obj.SetFocus;  
  Sys.Keys('^[Home][Enter]');
  Sys.Keys(FOLDER_PREF);
  Delay(Options.Run.TimeOut div 30);
  Sys.Keys('^z');
  Delay(Options.Run.TimeOut div 30);
  Sys.Keys('!^z');
  if NOT ClickNearIconOnSubInDocument(obj, 'КОММЕНТАРИЙ ПОЛЬЗОВАТЕЛЯ') then
    Raise('Не удалось кликнуть в докумнете возле иконки комментария');
  str := CopyToClipboard(obj, 'STRING', 'Trim := true'); 
  result :=  StringCompare(str, FOLDER_PREF);
  if NOT result then
    Log.Error('Текст комментария после Shift+Ctrl+Z не эталонный', str);
  if DeleteAllUserCommentsFromContents < 1 then
    Log.Warning('Не было удалено ни одного комментария');
  GoToMainMenu;
except  
  Log.Message('HLTC73_27_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;


{
HLTC73.27: Откат и возвращение изменений в документе 
Undo-Redo
  HLTC73.27.3: Отмена ссылки, комментария и закладки
     1. В любом документе поставить мой комментарий
     2. Поставить закладку в том же документе на несколько экранов ниже или выше моего комментария
     3. Выделить часть моего комментария
     4. Вызвать контекстное меню для выделенной области
     5. Выбрать пункт «Поставить ссылку»
     6. В диалоге выбрать только что поставленную закладку
     7. Жать сочетание клавиш Ctrl+Z пока не пропадет ссылка в пользовательском комментарии и сама закладка.
  		
}
function HLTC73_27_3_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000; 
  FOLDER_PREF = 'HLTC73_27_3';
  CONTEXT = 'Статья 10';
var
  obj, sub;
  i;
begin                                   
try
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');   
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  DeleteAllUserCommentsFromContents;
  obj.SetFocus;  
  Sys.Keys('^[Home][Enter]');
  Sys.Keys(FOLDER_PREF);
  Delay(Options.Run.TimeOut div 30);
  if NOT  SetBookMarkOnContext(obj, CONTEXT, FOLDER_PREF) then
    Raise('Не удалось установить закладку  на искомый контекст');
  Sys.Keys('^[Home]');  
  if NOT ClickNearIconOnSubInDocument(obj, 'КОММЕНТАРИЙ ПОЛЬЗОВАТЕЛЯ') then
    Raise('Не удалось кликнуть в докумнете возле иконки комментария');
  if NOT SetHyperLink(obj, MY_DOCS_PATH + FOLDER_PREF) then
    Raise('Не удалось установить ссылку');
  for i := 1 to 6 do
  begin  
    Sys.Keys('^z');  
    Delay(Options.Run.TimeOut div 60);
  end;  
  Sys.Keys('^[Home]');
  sub := GetFromEditor('САБ ПАНЕЛЬ');
  if NOT IsExists(sub) then Raise('Не удалось получить САБ ПАНЕЛЬ');
  if MoveMouseToObject(sub,'User_Comments.bmp' ,0 , 0, true) then   
    Raise('Иконка польз. комментария найдена ');
    
  result := ClickOnContext(obj, CONTEXT);
  if NOT result then Raise('Не удалось кликнуть по искомому контексту');
  if MoveMouseToObject(sub,'BookMark.bmp' ,0 , 0, true) then 
  begin
    Log.Error('Иконка закладки найдена после Ctrl+Z, хотя не должна была');
    Raise('Иконка закладки найдена после Ctrl+Z, хотя не должна была');
  end;
  result := NOT Position_Internal(OpenMyDocTab, MY_DOCS_PATH + FOLDER_PREF);
  if NOT result then 
    Log.Error('Закладка в Моих документах не удалилась');
  DeleteAllUserCommentsFromContents;
  DeleteAllInMyDoc;
  GoToMainMenu;
except  
  DeleteAllUserCommentsFromContents;
   DeleteAllUserCommentsFromContents;  DeleteAllInMyDoc;
  Log.Message('HLTC73_27_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;

{
HLTC73.27: Откат и возвращение изменений в документе 
Undo-Redo
  HLTC73.27.4: 
  Удаление комментария
     Выполнять удобней в расширенной конфигурации
     1. Заходим в документ, без комментариев. 
     2. Ставим мой комментарий с любым текстом
     3. Жмём "Скрыть мои комментарии"
     4. Жмём "Показать мои комментарии" 
     5. Через контекстное меню удаляем комментарий
     6. В документе жмём Ctrl+Z
     Комментарий должен появиться вновь

    7. Жмём "Скрыть мои комментарии"
     8. В контекстом меню на человечке выбираем "Удалить комментарий"
     9. В документе жмём Ctrl+Z
     Оболочка не должна зависнуть.		
}
function HLTC73_27_4_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DOC_NUM = 10003000; 
  FOLDER_PREF = 'HLTC73_27_4';
  CONTEXT = 'Статья 10';
var
  obj, sub;
  x, y;
begin                                   
try
  if NOT SetSettings ([(['ДОКУМЕНТ\МЕТКИ НА ПОЛЯХ', 'КОММЕНТРАРИИ ПОЛЬЗОВАТЕЛЯ [CHECKBOX]', true])]) then 
    Raise('Не удалось в настройках включить показ КОММЕНТРАРИИ ПОЛЬЗОВАТЕЛЯ [CHECKBOX');
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');   
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  DeleteAllUserCommentsFromContents;
  obj.SetFocus;  
  Sys.Keys('^[Home][Enter]');
  Sys.Keys(FOLDER_PREF);
  Delay(Options.Run.TimeOut div 30);
  if NOT SetCommentsMode(obj ,USER_COMMENTS, MODE_HIDDEN) then
    Raise('Не удалось выкл. режим показа польз. комментариев');
  if NOT SetCommentsMode(obj ,USER_COMMENTS, MODE_SHOWN) then
    Raise('Не удалось включить режим показа польз. комментариев');
  sub := GetFromEditor('САБ ПАНЕЛЬ');
  if NOT IsExists(sub) then Raise('Не удалось получить САБ ПАНЕЛЬ');
  if NOT MoveMouseToObject(sub,'User_Comments.bmp' ,0 , 0, true) then   
    Raise('Иконка польз. комментария не найдена');
  y := Sys.Desktop.MouseY;
  x := Sys.Desktop.MouseX;
  common.ScreenToClient(sub, x, y);
  sub.ClickR(x, y);
  result := ClickByPopupMenuItem(sub, 'Удалить комментарий');      
  if NOT result then Raise('Не удалось вызвать пункт контекстного меню "Удалить комментарий"'); 
  Delay(Options.Run.Timeout div 60);
  Sys.Keys('^z');
  if NOT SetCommentsMode(obj ,USER_COMMENTS, MODE_HIDDEN) then
    Raise('Не удалось выкл. режим показа польз. комментариев');
  if NOT MoveMouseToObject(sub,'User_Comments.bmp' ,0 , 0, true) then   
    Raise('Иконка польз. комментария не найдена');
  y := Sys.Desktop.MouseY;
  x := Sys.Desktop.MouseX;
  common.ScreenToClient(sub, x, y);
  sub.ClickR(x, y);
  result := ClickByPopupMenuItem(sub, 'Удалить комментарий');      
  if NOT result then Raise('Не удалось вызвать пункт контекстного меню "Удалить комментарий"'); 
  Delay(Options.Run.Timeout div 60);
  Sys.Keys('^z');
  result := MoveMouseToObject(sub,'User_Comments.bmp', 0 , 0, true);
  if NOT result then 
    Log.Error('Иконка польз. комментария не найдена после манипуляций с Ctrl+Z');      
  if NOT SetCommentsMode(obj ,USER_COMMENTS, MODE_SHOWN) then
    Log.Warning('Не удалось включить режим показа польз. комментариев');
  if DeleteAllUserCommentsFromContents < 1 then
    Log.Warning('Не было удалено ни одного комментария');
  GoToMainMenu;
except  
  Log.Message('HLTC73_27_4_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;

{
HLTC73.28: Книги. Проверить функционирование электронных книг. Они находятся в тестовой базе поППС 
«Электронные книги (графические образы)»
  HLTC73.28.1: Текст книги генерируется оболочкой на лету и включает в себя: Название, далее – текст 
  аннотации, и ссылки на графические образы страниц книги.
}
function HLTC73_28_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  PATH = 'Электронные книги (графические образы)\Книга, имеющаяся только в старой базе';
  TEST_WORDS = 
    'Сравнительный очерк горного законодательства в России и Западной Европе.*' +
    'Автор видел свою задачу в написании учебного пособия, дающего представление*' +
    'особый раздел - анализ соляных законов.*' +
    'От автора.*Глава I. Краткий очерк горного права в западной Европе до конца 18-го века.*' +
    'а) Общие условия.*Глава XIII. (продолжение). II. В России.*';
var
  obj;
  str;
begin                                   
try
  if NOT SearchInPPS([PATH]) then Raise('Не удалось выполнить ППС (м.б. в связи с тем, что сейчас стоит НОВАЯ база)');
  obj := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(obj) then Raise('Не удалось получить список документов');
  OpenDocFromList;
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  str := CopyToClipBoard(obj ,'ALL', 'Trim := true');
  result := StringCompare(TEST_WORDS, str);
  if NOT result then 
    Log.Error('Текст электронной книги не эталонный', str);
  CloseTabIfNeeded;
except  
  Log.Message('HLTC73_28_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
  GoToMainMenuWithCloseTabsExceptOne
end;

{
HLTC73.28: Книги. Проверить функционирование электронных книг. Они находятся в тестовой базе поППС 
«Электронные книги (графические образы)»
  HLTC73.28.2: Проверить в документе-электронной книге (например, для тестовой базы в документе 
  «Сравнительный очерк горного законодательства в России и Западной Европе», открытом из ППС Электронные
  книги (графические образы)\Книга, имеющаяся только в старой базе):
    HLTC73.28.2.1: Переход по ссылке на графический образ в Интернет Эксплорере
    HLTC73.28.2.2: Контекстный поиск
    HLTC73.28.2.4: Хинты к ссылкам на графические образы должны корректно отображать название книги.
}
function HLTC73_28_2_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  PATH = 'Сравнительный очерк горного законодательства в России и Западной Европе';  
  URL = 'Классика российского правового наследия*';
  CONTEXT = 'От автора';
  HINT = 'Ссылка на Сравнительный очерк горного законодательства в России и Западной Европе.*От автора.';
var     
  obj;
  ieAgent;
  x, y;
  str;
begin                                   
try
  if NOT GoToPPR then Raise('Не удалось открыть ППР');  
  Sys.Keys(PATH + '[Enter]'); 
  obj := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(obj) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');
  if NOT Position_Internal(obj, PATH + '*', '\', true) then Raise('Не удалось спозиционироваться на документе в списке');
  OpenDocFromList;
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  result := BaseSearchInDocument(obj, CONTEXT);
  if NOT result then
  begin
    Log.Error('Не удалось найти искомый контекст');
    Raise('Не удалось найти искомый контекст');
  end;
  x := 1;
  y := 1;
  result := GetTextSelectionCoords(obj,x,y);   
  if NOT result then Raise('Не удалось найти выделенный текст');
  str := GetHintTextByCoords(x, y, obj);
  if NOT StringCompare(HINT, str) then
  begin
    Log.Error('Хинт не равен эталонному', str);
    Raise('Хинт не равен эталонному');
  end;
  if NOT ClickByHyperLink(obj, CONTEXT) then
  begin
    Log.Error('Не удалось кликнуть по гиперссылке');
    Raise('Не удалось кликнуть по гиперссылке');
  end;
  ieAgent := GetFromInternetAgent('ОСНОВНАЯ ОБЛАСТЬ');
  Result := IsExists(ieAgent) AND ieAgent.Visible;        
  if NOT Result then
   Log.Error('Не удалось обнаружить активное окно IE_AGENT');       
  CloseTabIfNeeded;
except  
  Log.Message('HLTC73_28_2_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
  GoToMainMenuWithCloseTabsExceptOne;
end;

{
HLTC73.28: Книги. Проверить функционирование электронных книг. Они находятся в тестовой базе поППС 
«Электронные книги (графические образы)»
  HLTC73.28.2: Проверить в документе-электронной книге (например, для тестовой базы в документе 
  «Сравнительный очерк горного законодательства в России и Западной Европе», открытом из ППС Электронные
  книги (графические образы)\Книга, имеющаяся только в старой базе):
    HLTC73.28.2.3: Печать/Предварительный просмотр
}
function HLTC73_28_2_3_Execute (var  CurrentState: OleVariant): OleVariant;
const
  PATH = 'Сравнительный очерк горного законодательства в России и Западной Европе';  
var     
  obj, toolbar;  
begin                                   
try
  if NOT GoToPPR then Raise('Не удалось открыть ППР');
  Sys.Keys(PATH + '[Enter]'); 
  obj := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(obj) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');
  OpenDocFromList;   
  toolbar := GetFromEditor ('ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');
  if NOT IsExists(toolbar) then Raise('Не удалось получить ТУЛБАР "ДОКУМЕНТ: ТЕКСТ ДОКУМЕНТА"');    
  if NOT ClickToolBarButton(toolbar, 'Печать...') then
  begin
    Log.Error('Не могу кликнуть по кнопке на тулбаре: "Печать"');
    Raise('Не могу кликнуть по кнопке на тулбаре: "Печать"');
  end;
  obj := GetFromShell('ДИАЛОГ ПЕЧАТИ');
  if NOT IsExists(obj) AND obj.Visible AND (obj.Caption = 'Печать') then 
  begin
    Log.Error('Не удалось обнаружить диалог печати или он имеет неправильный Caption');
    Raise('Не удалось обнаружить диалог печати или он имеет неправильный Caption');
  end;  
  obj.Close;  
  result := ClickToolbarButton (toolbar, 'Предварительный просмотр');   
  if NOT result then Raise('Не удалось кликнуть на тулбаре по кнопке "Предварительный просмотр"');  
  result := IsCorrectPreview;
  if NOT result then
    Log.Error('окно Предварительного просмотра не корректно');
  CloseTabIfNeeded;
except  
  Log.Message('HLTC73_28_2_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
  GoToMainMenuWithCloseTabsExceptOne;
end;

{
HLTC73.28: Книги. Проверить функционирование электронных книг. Они находятся в тестовой базе поППС 
«Электронные книги (графические образы)»
  HLTC73.28.2: Проверить в документе-электронной книге (например, для тестовой базы в документе 
  «Сравнительный очерк горного законодательства в России и Западной Европе», открытом из ППС Электронные
  книги (графические образы)\Книга, имеющаяся только в старой базе):
    HLTC73.28.2.5: Открытие вкладки Аннотации
    HLTC73.28.2.6: Контекстный поиск в Аннотации
}
function HLTC73_28_2_5_Execute (var  CurrentState: OleVariant): OleVariant;
const
  PATH = 'Сравнительный очерк горного законодательства в России и Западной Европе';  
  TEST_WORDS = 'Автор видел свою задачу*Европе до конца XVIII века* анализ соляных законов.*';
  CONTEXT = 'Царстве';
var     
  obj, toolbar;  
  str;
begin                                   
try
  if NOT GoToPPR then Raise('Не удалось открыть ППР');
  Sys.Keys(PATH + '[Enter]'); 
  obj := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(obj) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');
  OpenDocFromList;   
  obj := OpenInDocument('АННОТАЦИЯ');
  if NOT IsExists(obj) then 
  begin
    Log.Error('Не удалось открыть вкладку АННОТАЦИЯ');
    Raise('Не удалось открыть вкладку АННОТАЦИЯ');
  end;
  str := CopyToClipBoard(obj ,'ALL', 'Trim := true');
  if NOT StringCompare(TEST_WORDS, str) then 
  begin
    Log.Error('Текст Аннотации электронной книги не эталонный', str);
    Raise('Текст Аннотации электронной книги не эталонный');
  end;
  Sys.Keys('^[Home]');
  result := BaseSearchInDocument(obj, CONTEXT);
  if NOT result then 
    Log.Error('Не удалось найти искомый контекст на вкладке Аннотация к электронной книге');  
  CloseTabIfNeeded;
except  
  Log.Message('HLTC73_28_2_5_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
  GoToMainMenuWithCloseTabsExceptOne;
end;


{
HLTC73.28: Книги. Проверить функционирование электронных книг. Они находятся в тестовой базе поППС 
«Электронные книги (графические образы)»
  HLTC73.28.2: Проверить в документе-электронной книге (например, для тестовой базы в документе 
  «Сравнительный очерк горного законодательства в России и Западной Европе», открытом из ППС Электронные
  книги (графические образы)\Книга, имеющаяся только в старой базе):
    HLTC73.28.2.7: Отключение комментариев ГАРАНТа и моих (для расширенной конфигурации)
    HLTC73.28.2.8: Установку закладки и комментариев на ссылки на графические образы
}
function HLTC73_28_2_7_Execute (var  CurrentState: OleVariant): OleVariant;
const
  PATH = 'Сравнительный очерк горного законодательства в России и Западной Европе';  
  CONTEXT = 'Группа первая.';
  FOLDER_PREF = 'HLTC73_28_2_7';
var     
  obj, sub;
  x, y;
  str;  
begin                                   
try
  if NOT GoToPPR then Raise('Не удалось открыть ППР');
  Sys.Keys(PATH + '[Enter]');
  obj := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(obj) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');
  OpenDocFromList;
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  //Ставим комментарий на ссылки на графические образы
  obj.SetFocus;  
  Sys.Keys('^[Home]');
  PressKeyNCount('[Down]', 9 + random(15));  
  Sys.Keys('[Enter]' + FOLDER_PREF);    
  //Выключаем режим показа польз. и юр. коммент
  if NOT SetCommentsMode(obj ,JUROR_COMMENTS, MODE_HIDDEN) then
    Raise('Не удалось выкл режим показа комментариев ГАРАНТа ');      
  if NOT SetCommentsMode(obj ,USER_COMMENTS, MODE_HIDDEN) then
    Raise('Не удалось выкл режим показа Моих комментариев');   
 //Проверяем, что от комментария осталась одна иконка на САб панели  
  if NOT ClickNearIconOnSubInDocument(obj, 'КОММЕНТАРИЙ ПОЛЬЗОВАТЕЛЯ') then
    Raise('Не удалось кликнуть в докумнете возле иконки комментария');
  str := CopyToClipboard(obj,'STRING','Trim := true');
  if StringCompare(FOLDER_PREF, str) then
    Raise('Мой комментарий показывается в выключенном режиме просмотра Моих комментариев');
  //Включаем режим показа польз. и юр. коммент 
  if NOT SetCommentsMode(obj ,JUROR_COMMENTS, MODE_SHOWN) then
    Raise('Не удалось вкл режим показа комментариев ГАРАНТа ');      
  if NOT SetCommentsMode(obj ,USER_COMMENTS, MODE_SHOWN) then
    Raise('Не удалось вкл режим показа Моих комментариев');      
  //Проверяем текст комментария, должен быть эталонный   
  if NOT ClickNearIconOnSubInDocument(obj, 'КОММЕНТАРИЙ ПОЛЬЗОВАТЕЛЯ') then
    Raise('Не удалось кликнуть в докумнете возле иконки комментария');
  str := CopyToClipboard(obj,'STRING','Trim := true');
  if NOT StringCompare(FOLDER_PREF, str) then
    Raise('Польз. комментарий не показывается в выключенном режиме просмотра Моих комментариев'); 
 //Ставим закладку на ссылки на графические образы 
  obj.SetFocus;
  Sys.Keys('^[Home]');
  PressKeyNCount('[Down]', 9 + random(3));  
  Sys.Keys(FOLDER_PREF);  
  if NOT SetBookMark(FOLDER_PREF) then Raise ('Не удалось установить закладку'); 
  sub := GetFromEditor('САБ ПАНЕЛЬ'); 
  if NOT IsExists(sub) then Raise('Не удалось обнаружить САБ панель');
  result := MoveMouseToObject(sub, 'BookMark.bmp', 0, 0);
  if NOT result then
  begin 
    Log.Error('Не удалось найти на САБ панели иконку польз. закладки');
    Raise;
  end;
  result := MoveMouseToObject(sub, 'User_Comments.bmp', 0, 0);
  if NOT result then   
    Log.Error('Не удалось найти на САБ панели иконку польз. комментария или закладки');
  x := Sys.Desktop.MouseX;       
  y := Sys.Desktop.MouseY;
  common.ScreenToClient(sub, x, y);
  sub.ClickR(x, y);
  if NOT ClickByPopupMenuItem(sub, 'Удалить комментарий') then Log.Warning('Не удалось вызвать пункт контекстного меню "Удалить комментарий"');  
  DeleteAllInMyDoc;   
  CloseTabIfNeeded;
except  
  Log.Message('HLTC73_28_2_7_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
  GoToMainMenuWithCloseTabsExceptOne;
end;


{
HLTC73: Просмотр документа
HLTC73.10: Показ предупреждения
  HLTC73.10.3: Просмотр предупреждений во вкладке с переводом.
    HLTC73.10.3.1  В топике (это редакция) 20071 
    1. Открываем документ 20071
    2. Открываем вкладку Перевод
    3. Щёлкаем по медали во вкладке
    Должен появиться баллон с текстом «It is ENGLISH warning».
}
function HLTC73_10_3_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  ETALON_TEXT = 'It is ENGLISH warning'; 
var
  sheetWnd;
  medalWnd;
  pageControl;
  balonWnd;
  curText;
begin
try  
  if NOT OpenDocByNumber(20071) then Raise('Не удалось открыть документ по Alt+N');
  pageControl := GetFromEditor('ЗАКЛАДКИ');
  if NOT IsExists(pageControl) then Raise('Не удалось найти PageControl');  
  if NOT SwitchToPage(pageControl,'Перевод') then Raise('Не удалось переключиться на вкладку "Перевод"');  
  
  sheetWnd := GetFromEditor('ВКЛАДКА "ПЕРЕВОД"');
  if NOT IsExists(sheetWnd) then Raise('Не удалось получить вкладку ПЕРЕВОД');   
  medalWnd := GetFromEditor('ЗНАЧОК: ПРЕДУПРЕЖДЕНИЕ ДЛЯ ДЕЙСТВУЮЩЕЙ РЕДАКЦИИ', GetParentObject(sheetWnd));
  if NOT IsExists(medalWnd) then Raise('Не удалось получить Медаль предупреждения на вкладке ПЕРЕВОД');
  medalWnd.Click();
  // Ищем балон и считываем его текст
  balonWnd := GetFromMainWindow('ОКНО СООБЩЕНИЯ ЗНАЧКА ЮРИДИЧЕСКОЕ ПРЕДУПРЕЖДЕНИЕ');
  if NOT IsExists(balonWnd) then Raise('Не удалось получить ОКНО СООБЩЕНИЯ ЗНАЧКА ЮРИДИЧЕСКОЕ ПРЕДУПРЕЖДЕНИЕ');  
  curText := balonWnd.Selection.CurrentObjectText;  
  if NOT StringCompare(curText, ETALON_TEXT) then
  begin
    Log.Error('Текст английского предупреждения не эталонный', curText);
    Raise('Текст английского предупреждения не эталонный');      
  end;  
  result := true; 
except
  Log.Message( 'HLTC73_10_3_1_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC73: Просмотр документа
HLTC73.10: Показ предупреждения
  HLTC73.10.3: Просмотр предупреждений во вкладке с переводом.
    HLTC73.10.3.2: В топиках 8901001 и 8901010
    1. Открываем документ 8901001
    2. Открываем вкладку Перевод
    3. Щёлкаем по медали во вкладке
    Должен появиться баллон с текстом «It is ENGLISH warning».
    Аналогично для 8901010.
}
function HLTC73_10_3_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  ETALON_TEXT = 'It is ENGLISH warning'; 
var
  sheetWnd;
  medalWnd;
  pageControl;
  balonWnd;
  curText;
  docs;
  i;
begin
try
  docs := [8901001, 8901010];
  for i := VarArrayLowBound(docs, 1) to VarArrayHighBound(docs, 1) do
  begin  
    if NOT OpenDocByNumber(docs[i]) then Raise('Не удалось открыть документ по Alt+N');
    pageControl := GetFromEditor('ЗАКЛАДКИ');
    if NOT IsExists(pageControl) then Raise('Не удалось найти PageControl');  
    if NOT SwitchToPage(pageControl,'Перевод') then Raise('Не удалось переключиться на вкладку "Перевод"');  
  
    sheetWnd := GetFromEditor('ВКЛАДКА "ПЕРЕВОД"');
    if NOT IsExists(sheetWnd) then Raise('Не удалось получить вкладку ПЕРЕВОД');   
    medalWnd := GetFromEditor('ЗНАЧОК: ПРЕДУПРЕЖДЕНИЕ ДЛЯ ДЕЙСТВУЮЩЕЙ РЕДАКЦИИ', GetParentObject(sheetWnd));
    if NOT IsExists(medalWnd) then Raise('Не удалось получить Медаль предупреждения на вкладке ПЕРЕВОД');
    medalWnd.Click();
    // Ищем балон и считываем его текст
    balonWnd := GetFromMainWindow('ОКНО СООБЩЕНИЯ ЗНАЧКА ЮРИДИЧЕСКОЕ ПРЕДУПРЕЖДЕНИЕ');
    if NOT IsExists(balonWnd) then Raise('Не удалось получить ОКНО СООБЩЕНИЯ ЗНАЧКА ЮРИДИЧЕСКОЕ ПРЕДУПРЕЖДЕНИЕ');    
    curText := balonWnd.Selection.CurrentObjectText;  
    if NOT StringCompare(curText, ETALON_TEXT) then
    begin
      Log.Error('Текст английского предупреждения не эталонный', curText);
      Raise('Текст английского предупреждения не эталонный');      
    end;
  end;  
  result := true; 
except
  Log.Message( 'HLTC73_10_3_2_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC73: Просмотр документа
HLTC73.10: Показ предупреждения
  HLTC73.10.3: Просмотр предупреждений во вкладке с переводом.
    HLTC73.10.3.3: В топике 2001 на ТБ24 и 27
     ТБ24
     1. Открываем документ 2001
     2. Открываем вкладку Перевод
     3. Щёлкаем по медали во вкладке
     Должен появиться баллон с текстом "It is ENGLISH warning"

    На ТБ27 текст того же баллона будет "It is NEW ENGLISH warning".
    
!!!Старая база    
}
function HLTC73_10_3_3_Execute (var  CurrentState: OleVariant): OleVariant;
const
  ETALON_TEXT_TB24 = 'It is ENGLISH warning'; 
  ETALON_TEXT_TB27 = 'It is NEW ENGLISH warning';

var
  sheetWnd;
  medalWnd;
  pageControl;
  balonWnd;
  curText;  
begin
try  
    if NOT OpenDocByNumber(2001) then Raise('Не удалось открыть документ по Alt+N');
    pageControl := GetFromEditor('ЗАКЛАДКИ');
    if NOT IsExists(pageControl) then Raise('Не удалось найти PageControl');  
    if NOT SwitchToPage(pageControl,'Перевод') then Raise('Не удалось переключиться на вкладку "Перевод"');  
  
    sheetWnd := GetFromEditor('ВКЛАДКА "ПЕРЕВОД"');
    if NOT IsExists(sheetWnd) then Raise('Не удалось получить вкладку ПЕРЕВОД');   
    medalWnd := GetFromEditor('ЗНАЧОК: ПРЕДУПРЕЖДЕНИЕ ДЛЯ ДЕЙСТВУЮЩЕЙ РЕДАКЦИИ', GetParentObject(sheetWnd));
    if NOT IsExists(medalWnd) then Raise('Не удалось получить Медаль предупреждения на вкладке ПЕРЕВОД');
    medalWnd.Click();
    // Ищем балон и считываем его текст
    balonWnd := GetFromMainWindow('ОКНО СООБЩЕНИЯ ЗНАЧКА ЮРИДИЧЕСКОЕ ПРЕДУПРЕЖДЕНИЕ');
    if NOT IsExists(balonWnd) then Raise('Не удалось получить ОКНО СООБЩЕНИЯ ЗНАЧКА ЮРИДИЧЕСКОЕ ПРЕДУПРЕЖДЕНИЕ');    
    curText := balonWnd.Selection.CurrentObjectText;  
    if NOT StringCompare(curText, ETALON_TEXT_TB24) then
    begin
      Log.Error('Текст английского предупреждения  на ТБ24 не эталонный', curText);
      Raise('Текст английского предупреждения на ТБ24 не эталонный');      
    end;
    //Переключаем базу
    if NOT SwitchDataBase(DBT_OTHER, 'IsSwitchOnTheFly:=true') then Raise('Не удалось переключить базу на DBT_OTHER');
    pageControl := GetFromEditor('ЗАКЛАДКИ');
    if NOT IsExists(pageControl) then Raise('Не удалось найти PageControl');  
    if NOT SwitchToPage(pageControl,'Перевод') then Raise('Не удалось переключиться на вкладку "Перевод"');
    sheetWnd := GetFromEditor('ВКЛАДКА "ПЕРЕВОД"');
    if NOT IsExists(sheetWnd) then Raise('Не удалось получить вкладку ПЕРЕВОД');   
    medalWnd := GetFromEditor('ЗНАЧОК: ПРЕДУПРЕЖДЕНИЕ ДЛЯ ДЕЙСТВУЮЩЕЙ РЕДАКЦИИ', GetParentObject(sheetWnd));
    if NOT IsExists(medalWnd) then Raise('Не удалось получить Медаль предупреждения на вкладке ПЕРЕВОД');
    medalWnd.Click();
    // Ищем балон и считываем его текст
    balonWnd := GetFromMainWindow('ОКНО СООБЩЕНИЯ ЗНАЧКА ЮРИДИЧЕСКОЕ ПРЕДУПРЕЖДЕНИЕ');
    if NOT IsExists(balonWnd) then Raise('Не удалось получить ОКНО СООБЩЕНИЯ ЗНАЧКА ЮРИДИЧЕСКОЕ ПРЕДУПРЕЖДЕНИЕ');    
    curText := balonWnd.Selection.CurrentObjectText;  
    if NOT StringCompare(curText, ETALON_TEXT_TB27) then
    begin
      Log.Error('Текст английского предупреждения  на ТБ27 не эталонный', curText);
      Raise('Текст английского предупреждения на ТБ27 не эталонный');      
    end;
  result := true;
except
  Log.Message( 'HLTC73_10_3_3_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler; 
end;
end;

{
HLTC73: Просмотр документа
HLTC73.10: Показ предупреждения
  HLTC73.10.3: Просмотр предупреждений во вкладке с переводом.     
    HLTC73.10.3.4: Есть перевод к топику 2005. В базе от 24.09 варнинга нет, а в базе от 27.09 - появляется варнинг.
    
!!!НОВАЯ база    
}
function HLTC73_10_3_4_Execute (var  CurrentState: OleVariant): OleVariant;
var
  warningWnd;
  pageContr;
  toolBar;
  textWarning;  
begin
try
  if NOT OpenDocByNumber(2005) then Raise('Не удалось открыть документ по Alt+N');
  pageContr := GetFromEditor('ЗАКЛАДКИ');
  if NOT IsExists(pageContr) then Raise('Не удалось найти PageControl "ЗАКЛАДКИ"');
  if NOT SwitchToPage(pageContr,'Перевод') then Raise('Не удалось переключиться на вкладку "Перевод"');
  
  toolBar := GetFromEditor('ТУЛБАР ВЕРХНИЙ ПРАВЫЙ ВКЛАДКА "ПЕРЕВОД"'); 
  if NOT IsExists(toolBar) then Raise('Не удалось получить ТУЛБАР ВЕРХНИЙ ПРАВЫЙ на вкладке "ПЕРЕВОД"');
  if NOT ClickToolBarButton(toolBar, 'Открыть в текущем окне') then 
    Raise('Не удалось кликнуть по кнопке "Открыть в текущем окне"');
    
  warningWnd := GetFromEditor('ВКЛАДКА "ПРЕДУПРЕЖДЕНИЕ"');
  if NOT ( IsExists(warningWnd) AND warningWnd.Visible ) then 
    Raise('Не удалось получить активную вкладку: ВКЛАДКА "ПРЕДУПРЕЖДЕНИЕ" для ПЕРЕВОДА');
  warningWnd.SetFocus;
  textWarning := CopyToClipboard(warningWnd,'ALL','Trim := true'); 
  if NOT StringCompare('It is ENGLISH warning', textWarning) then
  begin
    Log.Error('Текст английского предупреждения на базе от 27.09: "' + textWarning + '" не эталонен'); 
    Raise('Текст английского предупреждения на базе от 27.09: "' + textWarning + '" не эталонен');
  end;         
  if NOT SwitchDataBase(DBT_OTHER, 'IsSwitchOnTheFly:=true') then Raise('Не удалось переключить базу на DBT_OTHER');
    
  if ( IsExists(warningWnd) AND warningWnd.Visible ) then    
  begin
    Log.Error('Вкладка предупреждение для английского перевода на базе от 24.09 существует, хотя её быть не должно!'); 
    Raise('Вкладка предупреждение для английского перевода на базе от 24.09 существует, хотя её быть не должно!');
  end;
  result := true;
except
  Log.Message( 'HLTC73_10_3_4_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler; 
end;
end; 

{
HLTC73.14: Контекстный поиск в документе
  HLTC73.14.25: Проверить, что в базе с морфологическим индексом:
    HLTC73.14.25.1: При поиске в Контитуции РФ слова «свобода» находятся все однокоренные слова
    свобода, свободный, свободно...)
    
47 вхождений    
}
function HLTC73_14_25_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  CONTEXT = 'Свобода';
var
  etalonContexts;
  foundContext;
  i;
  doc;
  paramString;
begin
try
  etalonContexts := [
    'свободы',    
    'свободы',
    'свобод',
    'свободные',
    'свободами',
	  'свободное',
	  'свободное',
    'свобода',
    '*свободе',
    'свободы',
    'свободы',
    'свободы',
    'свободы',
    'свобод',
    'свободы',
    'свободы',
    'свобод',
    'свободы',
    'свободу',
    'свободы',
	  'свободный',
	  'свободно',
	  'свободно',
    'свобода',
    'свобода',
	  'свободно',
    '*свободе',    
    'свобода',
	  'свободно',
    'свобода',
    'Свобода',
    'свободы',
	  'свободное',
	  'свободно',
	  'свободен',
	  'свободно',
    'свобода',
    'свобод',
    'свободы',
    'свобод',
    '*свободы',
    'свобод',
    'свобод',
    'свобод',
    'свободы',
    'свободы',
    'свобод',
    'свободы',    
    'свобод',
    'свобод',
    'свобод',
	  'свободного',
    'свобод',
    'свобод',
    'свободы',
    'свобод',
    'свобод',
    'свобод'
  ];
  if NOT OpenDocByNumber(10003000) then Raise('Не удалось открыть документ по Alt+N');
  doc := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(doc) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  
  for i := VarArrayLowBound(etalonContexts, 1) to VarArrayHighBound(etalonContexts, 1) do
  begin
    if i = VarArrayLowBound(etalonContexts, 1) then  
      paramString := 'isCloseWindow:=false'       
    else 
      paramString := 'isCloseWindow:=false;IsContinueSearch:=true'; 
    if NOT BaseSearchInDocument(doc, CONTEXT, paramString) then 
      Raise ('Не удалось на ' + IntToStr(i) + '-ой операции найти контекст');
          
    foundContext := CopyToClipBoard(doc, '', 'Trim:=true');
    if NOT StringCompare('*' + etalonContexts[i], foundContext) then
    begin
      Log.Error('Найденный контекст "' + foundContext + '" не равен эталонному "' + etalonContexts[i] + '" на ' + IntToStr(i)+ '-ой операции');
      Raise('Найденный контекст "' + foundContext + '" не равен эталонному "' + etalonContexts[i] + '" на ' + IntToStr(i)+ '-ой операции');
    end;
      
  end;
  if BaseSearchInDocument(doc, CONTEXT, 'IsContinueSearch:=true') then 
    Raise('Контекст нашёлся ещё раз, хотя больше уже не долже был!');  
  
  result := true;
except
  Log.Message( 'HLTC73_14_25_1_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;


{
HLTC73.14: Контекстный поиск в документе
  HLTC73.14.25: Проверить, что в базе с морфологическим индексом:
    HLTC73.14.25.2: При поиске фразы «свобода граждан» в Конституции будут найдены фрагменты текста, начинающиеся с одного,
    и заканчивающиеся другим словом. Будут последовательно найдены контексты:
      «свободы граждан»
      «свобод граждан» - 2 раза
      «свободы гражданина»
      «свободы человека и гражданина»
      «свобод человека и гражданина» и тд
}
function HLTC73_14_25_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  CONTEXT = 'свобода граждан';
var
  etalonContexts;
  foundContext;
  i;
  doc;
  paramString;
begin
try
  etalonContexts := [
    'свободы граждан',
    'свобод граждан',
    'свобод граждан',
    'свободы гражданина',
    'свободы человека и гражданина',
    'свобод человека и гражданина' 
  ];
  if NOT OpenDocByNumber(10003000) then Raise('Не удалось открыть документ по Alt+N');
  doc := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(doc) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  
  for i := VarArrayLowBound(etalonContexts, 1) to VarArrayHighBound(etalonContexts, 1) do
  begin
    if i = VarArrayLowBound(etalonContexts, 1) then  
      paramString := 'isCloseWindow:=false'       
    else 
      paramString := 'isCloseWindow:=false;IsContinueSearch:=true'; 
    if NOT BaseSearchInDocument(doc, CONTEXT, paramString) then 
      Raise ('Не удалось на ' + IntToStr(i) + '-ой операции найти контекст');
          
    foundContext := CopyToClipBoard(doc, '', 'Trim:=true');
    if NOT (foundContext = etalonContexts[i]) then
    begin
      Log.Error('Найденный контекст "' + foundContext + '" не равен эталонному "' + etalonContexts[i] + '" на ' + IntToStr(i)+ '-ой операции');
      Raise('Найденный контекст "' + foundContext + '" не равен эталонному "' + etalonContexts[i] + '" на ' + IntToStr(i)+ '-ой операции');
    end;
      
  end;
  if BaseSearchInDocument(doc, CONTEXT, 'IsContinueSearch:=true') then 
    Raise('Контекст нашёлся ещё раз, хотя больше уже не долже был!');  
  
  result := true;
except
  Log.Message( 'HLTC73_14_25_2_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.14: Контекстный поиск в документе
  HLTC73.14.25: Проверить, что в базе с морфологическим индексом:
    HLTC73.14.25.3: Сначала должны показываться фрагменты, в которых введденые пользователем слова встречаются 
    друг за другом, потом - все остальные. Порядок - сверху вниз. 
    
    
    В Конституции ищем Каждому гарантируется свобода.
     Получаем:
    "Каждому гарантируется свобода" в Статье 28
    "Каждому гарантируется свобода" в Статье 29
    "Каждому гарантируется свобода" в Статье 44
    "Гарантируется свобода каждый" в Статье 29-30
    "гарантируется Каждый свободы" в Статье 45
    "Каждому гарантируется свобод" в Статье 46    
}
function HLTC73_14_25_3_Execute (var  CurrentState: OleVariant): OleVariant;
const
  CONTEXT = 'Каждому гарантируется свобода';
var
  etalonContexts;
  foundContext;
  i, j;
  doc;
  x, y;
  paramString;    
begin
try
  etalonContexts := [
    (['Каждому гарантируется свобода', 'Статья 28']),
    (['Каждому гарантируется свобода', 'Статья 29']),
    (['Каждому гарантируется свобода', 'Статья 44']),
    (['гарантируются свободы*каждому', 'Статья 17']),
    (['Гарантируется свобода*Каждый',  'Статья 30']),
    (['гарантируется*Каждый свободы',  'Статья 45']),
    (['Каждому гарантируется свобод',  'Статья 46'])         
  ];
  if NOT OpenDocByNumber(10003000) then Raise('Не удалось открыть документ по Alt+N');
  doc := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(doc) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');  
  for i := VarArrayLowBound(etalonContexts, 1) to VarArrayHighBound(etalonContexts, 1) do
  begin     
    for j:= 0 to i do
    begin
      if j = 0 then
        paramString := 'isCloseWindow:=false'         
      else 
        paramString := 'isCloseWindow:=false;IsContinueSearch:=true';
      if NOT BaseSearchInDocument(doc, CONTEXT, paramString) then 
        Raise ('Не удалось на ' + IntToStr(i+1) + '-ой операции найти контекст. Должны были найти: ' + etalonContexts[i][0]);
    end;        
      
    foundContext := CopyToClipBoard(doc, '', 'Trim:=true');    
    if NOT StringCompare(etalonContexts[i][0] + '*', foundContext) then
    begin
      Log.Error('На ' + IntToStr(i)+ '-ой операции нашёлся не эталонный контекст', foundContext);
      Raise('На ' + IntToStr(i)+ '-ой операции нашёлся не эталонный контекст');
    end;    
    if NOT GetTextSelectionCoords (doc, x, y, true) then Raise('Не удалось найти выделенный текст');
    //Выделяем текст    
    if  etalonContexts[i][1] <> 'Статья 30' then
      PressKeyNCount('![Up]', 3)//идём 3 раза вверх, что бы захватить заголовок статьи
    else
      PressKeyNCount('![Down]', 7);
    foundContext := CopyToClipBoard(doc, '', 'Trim:=true');             
    doc.SetFocus;
    Sys.Keys('^[Home]');
    if NOT StringCompare('*' + etalonContexts[i][1] + '*', foundContext) then
    begin
      Log.Error('На ' + IntToStr(i)+ '-ой операции контекст нашелся не в эталонной статье', foundContext);
      Raise('На ' + IntToStr(i)+ '-ой операции контекст нашелся не в эталонной статье');
    end;      
  end;//for

  //Выполеям все поиски заново, что бы дойти до последнего и проверить что i+1 уже не найдётся
  for i := VarArrayLowBound(etalonContexts, 1) to VarArrayHighBound(etalonContexts, 1) do
  begin
    if i = VarArrayLowBound(etalonContexts, 1) then      
      BaseSearchInDocument(doc, CONTEXT, 'isCloseWindow:=false')         
    else      
      BaseSearchInDocument(doc, CONTEXT, 'isCloseWindow:=false;IsContinueSearch:=true');      
  end;
  //проверяем i+1 поиск, что не найдётся
  if BaseSearchInDocument(doc, CONTEXT, 'IsContinueSearch:=true') then 
    Raise('Контекст нашёлся ещё раз, хотя больше уже не долже был!');  
  
  result := true;
except
  Log.Message( 'HLTC73_14_25_3_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end; 

{
HLTC73.14: Контекстный поиск в документе
  HLTC73.14.25: Проверить, что в базе с морфологическим индексом:
    При поиске в неиндексированных документах (справках, аннотациях, авторефератах), не должны учитываться спецсимволы: “ * !

   1. Открываем любую справку/аннотацию/автореферат
   2. Ищем там контекст, например:
   налог”
   налог!
   налог*
   налог

Во всех случаях, число найдённых совпадений должно быть одинаковым.
}
function HLTC73_14_25_4_Execute (var  CurrentState: OleVariant): OleVariant;
var
  context;
  foundContext;  
  wnd;    
begin
try
  //Проверям для справки
  if NOT OpenDocByNumber(1055132) then Raise('Не удалось открыть документ по Alt+N');
  wnd := OpenInDocument('СПРАВКА');
  context := 'феврал';
  if NOT BaseSearchInDocument(wnd, context + '*', 'isCloseWindow:=false') then 
    Raise ('Не удалось найти контекст: ' + context);
  foundContext := CopyToClipBoard(wnd, '', 'Trim:=true');
  if NOT (foundContext = context) then
  begin
    Log.Error('Найден не эталонный контекст :' + foundContext);
    Raise('Найден не эталонный контекст :' + foundContext);    
  end;
  if BaseSearchInDocument(wnd, context + '*', 'IsContinueSearch:=true') then 
    Raise ('Контекст нашёлся ещё раз, хотя не должен был!');
  wnd.SetFocus;
  Sys.Keys('^[Home]');
  if BaseSearchInDocument(wnd, context + 'ь*') then
    Raise ('Контекст нашёлся, хотя не должен был!');
  //Проверям для аннотации  
  if NOT OpenDocByNumber(2001) then Raise('Не удалось открыть документ по Alt+N');
  wnd := OpenInDocument('АННОТАЦИЯ');
  context := 'файл';
  if NOT BaseSearchInDocument(wnd, context + '*', 'isCloseWindow:=false') then 
    Raise ('Не удалось найти контекст: ' + context);
  foundContext := CopyToClipBoard(wnd, '', 'Trim:=true');
  if NOT (foundContext = context) then
  begin
    Log.Error('Найден не эталонный контекст :' + foundContext);
    Raise('Найден не эталонный контекст :' + foundContext);    
  end;
  if BaseSearchInDocument(wnd, context + '*', 'IsContinueSearch:=true') then 
    Raise ('Контекст нашёлся ещё раз, хотя не должен был!');
  wnd.SetFocus;
  Sys.Keys('^[Home]');  
  if BaseSearchInDocument(wnd, context + 'а*') then 
    Raise ('Контекст нашёлся, хотя не должен был!');
  //проверям для автореферата  
  wnd := GoToPrime('', true);
  context := 'лент';
  if NOT BaseSearchInDocument(wnd, context + '*', 'isCloseWindow:=false') then 
    Raise ('Не удалось найти контекст: ' + context);
  foundContext := CopyToClipBoard(wnd, '', 'Trim:=true');
  if NOT (foundContext = context) then
  begin
    Log.Error('Найден не эталонный контекст :' + foundContext);
    Raise('Найден не эталонный контекст :' + foundContext);    
  end;
  if BaseSearchInDocument(wnd, context + '*', 'IsContinueSearch:=true') then 
    Raise ('Контекст нашёлся ещё раз, хотя не должен был!');
  wnd.SetFocus;
  Sys.Keys('^[Home]');  
  if BaseSearchInDocument(wnd, context + 'ы*') then 
    Raise ('Контекст нашёлся, хотя не должен был!');    
  
  result := true;
except
  Log.Message( 'HLTC73_14_25_4_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.14: Контекстный поиск в документе
  HLTC73.11: Справочная информация к документу
    Похожие документы
      HLTC73.11.7.2: Проверить, что для документа 58011 похожие документы будут: 
       – 58017
       – 58013
       – 58015
       – 58019
       И именно в этом порядке.

      А для документа 58010: 
       – 58014
       – 58016
       – 18012.
 }
function HLTC73_11_7_2_Execute (var  CurrentState: OleVariant): OleVariant;
var  
  pageControl;    
  listSimilarDocs;
  etalonSimilarDocs;
  docs;
  i;
begin
try
  etalonSimilarDocs := ([ 
    ([
      'Документ 58017. Учитываемая часть совпадает с 58011, значит релевантность - максимальная.',
      'Документ 58013. Тип на блоке. Релевантность совпадает 58015.',
      'Документ 58015. Релевантность совпадает с 58013.',
      'Документ 58019. С точностью до одного слова текст и блоки совпадают с 58015 (и 58013), но тип и орган таковы, что считается не часть с 20005 по 30005 сабы, а весь топик. Из-за этого релевантность должна быть меньше, чем у топиков 58013 и 58015.'
    ]),
    ([
      'Документ 58014. С 58010 совпадают 3 слова. И появилось одно лишнее, т.е. изменилась длина документа.',
      'Документ 58016. С 58010 совпадает 2 слова. Длина документа не изменилась.',      
      'Документ 58012. С 58010 совпадает 1 слово. Длина документа не изменилась.'
    ])        
  ]);
  docs := [58011, 58010];
  for i :=  VarArrayLowBound(docs, 1) to VarArrayHighBound(docs, 1) do
  begin 
    if NOT OpenDocByNumber(docs[i]) then Raise('Не удалось открыть документ по Alt+N');
    pageControl := GetFromEditor('ЗАКЛАДКИ');
    if NOT IsExists(pageControl) then
    begin
      Log.Error('Не удалось получить Пайджконтрол, возможно вкладка ПОХОЖИЕ ДОКУМЕНТЫ отсутствует'); 
      Raise('Не удалось получить Пайджконтрол, возможно вкладка ПОХОЖИЕ ДОКУМЕНТЫ отсутствует');
    end;  
    if NOT SwitchToPage(pageControl, 'Похожие документы') then 
    begin
      Log.Error('Не удалось переключится на вкладку ПОХОЖИЕ ДОКУМЕНТЫ, возможно она отсутствует!');
      Raise('Не удалось переключится на вкладку ПОХОЖИЕ ДОКУМЕНТЫ, возможно она отсутствует!');
    end;
    listSimilarDocs := GetFromEditor('ВКЛАДКА "ПОХОЖИЕ ДОКУМЕНТЫ"');
    if NOT ( IsExists(listSimilarDocs) AND listSimilarDocs.Visible) then
      Raise('Не удалось получить ВКЛАДКА "ПОХОЖИЕ ДОКУМЕНТЫ"');  
    if NOT CompareArray(GetElementsFromTree(listSimilarDocs), etalonSimilarDocs[i]) then
    begin
      Log.Error('Список похожих документов для документа ' + IntToStr(docs[i])+ ' не эталонен!');  
      Raise('Список похожих документов для документа ' + IntToStr(docs[i])+ ' не эталонен!');
    end; 
  end;//for  
  
  result := true;
except
  Log.Message( 'HLTC73_11_7_2_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
  HLTC73.1.9: Открыть документ 12058199. Нажать Ctrl+End. Потом поскроллировать его. Не должно быть подвисания оболочки.
}
function HLTC73_1_9_Execute (var  CurrentState: OleVariant): OleVariant;
var  
  docWnd;  
  endLine;
  line;  
begin
try  
  endLine := '*Федерации.';

  if NOT OpenDocByNumber(12058199) then Raise('Не удалось открыть документ по Alt+N');  
  docWnd := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(docWnd) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  docWnd.SetFocus;
  Sys.Keys('^[End]');   
  if NOT IsExists(docWnd) then
  begin
    Log.Error('После скроллирования большого документа ТЕКСТ ДОКУМЕНТА не существует');
    Raise('После скроллирования большого документа ТЕКСТ ДОКУМЕНТА не существует');
  end;
  line := CopyToClipboard(docWnd,'STRING','Trim := true');  
  if NOT StringCompare(endLine, line) then
  begin
    Log.Error('Скопированная строка (последняя в документе) - не эталонная!');
    Raise('Скопированная строка (последняя в документе) - не эталонная!');
  end;      
  result := true;
except
  Log.Message( 'HLTC73_1_9_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.14: Контекстный поиск в документе
  HLTC73.30: Документы с flash
    HLTC73.30.7: Экспорт и сохранение в файл должны быть недоступны.
    
!! Проверяем, что операций нет как в Главном меню, так и на тулбаре документа    
}
function HLTC73_30_7_Execute (var  CurrentState: OleVariant): OleVariant;
var  
  docWnd;
  mainMenu;
  operations;
  toolBar;
  operationsOnTb;
  i, j;
  
begin
try  
  operations := [
    'Сохранить в файл...',
    'Экспорт в MS-Word',
    'Переслать по E-mail'
  ];
   
  if NOT OpenDocByNumber(5421002) then Raise('Не удалось открыть документ по Alt+N');
    
  docWnd := GetFromFlashEditor('ТЕКСТ ДОКУМЕНТА "ФЛЭШ"');
  if NOT IsExists(docWnd) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА "ФЛЭШ"');
  
  mainMenu := GetFromMainWindow('ГЛАВНОЕ МЕНЮ');   
  for i :=  VarArrayLowBound(operations, 1) to VarArrayHighBound(operations, 1) do
  begin
    if IsMenuItemEnabled(mainMenu,'Файл\' + operations[i]) then    
    begin
      Log.Error('Для ФЛЭШТОПИКА доступен один запрещённых элементов меню: Файл\' + operations[i]);
      Raise('Для ФЛЭШТОПИКА доступен один запрещённых элементов меню: ' + operations[i]);
    end;
  end;
  toolBar := GetFromFlashEditor('ТУЛБАР ТЕКСТА ДОКУМЕНТА "ФЛЭШ"'); 
  if NOT IsExists(toolBar) then Raise('Не удалось получить ТУЛБАР ТЕКСТА ДОКУМЕНТА "ФЛЭШ"');
  operationsOnTb := SetArrayFromTb(toolBar);
  //Проверяем, что на тулбаре нет запрещённых кнопок
  for i :=  VarArrayLowBound(operationsOnTb, 1) to VarArrayHighBound(operationsOnTb, 1) do
  begin
    for j := VarArrayLowBound(operations, 1) to VarArrayHighBound(operations, 1) do
    begin
      if operationsOnTb[i] = operations[j] then  
      begin
        Log.Error('На ТУЛБАРе ТЕКСТА ДОКУМЕНТА "ФЛЭШ" доступна одна из запрещённых кнопок:' + operationsOnTb[i]);
        Raise('На ТУЛБАРе ТЕКСТА ДОКУМЕНТА "ФЛЭШ" доступна одна из запрещённых кнопок:' + operationsOnTb[i]);
      end;
    end; 
  end;
  
  result := true;
except
  Log.Message( 'HLTC73_30_7_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.14: Контекстный поиск в документе
  HLTC73.30: Документы с flash
    HLTC73.30.8: Проверить сохранение закладки, сохранение в журнале работы и последних открытых документах.
    
}
function HLTC73_30_8_Execute (var  CurrentState: OleVariant): OleVariant;
var  
  docWnd;
  bookmark;  
begin
try  
  bookmark := 'ФЛЭШТОПИК';  
  if NOT OpenDocByNumber(5421044) then Raise('Не удалось открыть документ по Alt+N');
    
  docWnd := GetFromFlashEditor('ТЕКСТ ДОКУМЕНТА "ФЛЭШ"');
  if NOT IsExists(docWnd) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА "ФЛЭШ"');
  
  if NOT SaveToFoldersExt('Мои документы', bookMark, '', 'Сохранить') then
  begin
    Log.Error('Не удалось сохранить закладку на ФЛЭШТОПИК в Мои документы');
    Raise('Не удалось сохранить закладку на ФЛЭШТОПИК в Мои документы');
  end;
  //проверяем открытие из моих документов    
  GoToMainMenu;    
  if NOT OpenObjectFromFolder(MY_DOCS_PATH + bookMark, OpenMyDocTab) then  
    Raise('Не удалось из Моих документов открыть закладку на ФЛЭШТОПИК');
  docWnd := GetFromFlashEditor('ТЕКСТ ДОКУМЕНТА "ФЛЭШ"');
  if NOT IsExists(docWnd) then
  begin 
    Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА "ФЛЭШ" после открытия закладки из Моих документов');
    Log.Error('Не удалось получить ТЕКСТ ДОКУМЕНТА "ФЛЭШ" после открытия закладки из Моих документов');  
  end;
  //проверяем открытие из Журнала работы
  GoToMainMenu;
  bookMark := DateTimeToStr(Utilities.Date)+ '\Просмотренные документы\Это флэштопик 5421044. Файл sample.swf.*';
  if NOT OpenObjectFromFolder(bookMark, OpenJurnalTab) then    
    Raise('Не удалось из Журнала работы открыть ФЛЭШТОПИК');
  docWnd := GetFromFlashEditor('ТЕКСТ ДОКУМЕНТА "ФЛЭШ"');
  if NOT IsExists(docWnd) then
  begin 
    Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА "ФЛЭШ" после его открытия из Журнала работы');
    Log.Error('Не удалось получить ТЕКСТ ДОКУМЕНТА "ФЛЭШ" после его открытия из Журнала работы');  
  end;
  //проверяем открытие из последнихоткрытых документов ОМ  
  bookMark := 'Это флэштопик 5421044. Файл sample.swf.*'; 
  GoToMainMenu;
  if NOT OpenObjectFromFolder(bookMark, GetFromMainMenu('СПИСОК: ПОСЛЕДНИЕ ОТКРЫТЫЕ ДОКУМЕНТЫ')) then  
    Raise('Не удалось из СПИСОК: ПОСЛЕДНИЕ ОТКРЫТЫЕ ДОКУМЕНТЫ открыть ФЛЭШТОПИК');
  docWnd := GetFromFlashEditor('ТЕКСТ ДОКУМЕНТА "ФЛЭШ"');
  if NOT IsExists(docWnd) then
  begin 
    Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА "ФЛЭШ" после его открытия из СПИСОК: ПОСЛЕДНИЕ ОТКРЫТЫЕ ДОКУМЕНТЫ');
    Log.Error('Не удалось получить ТЕКСТ ДОКУМЕНТА "ФЛЭШ" после его открытия из СПИСОК: ПОСЛЕДНИЕ ОТКРЫТЫЕ ДОКУМЕНТЫ');  
  end;
  
  DeleteAllInMyDoc;  
  result := true;
except
  DeleteAllInMyDoc;
  Log.Message( 'HLTC73_30_8_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.30.9: Открыть документ 5421030, вбить в строку ввода номер 7909600 и нажать кнопку перейти.
  Должно показаться сообщение об отсутствующем документе со списком блоков, в которых он содержится.    
}
function HLTC73_30_9_Execute (var  CurrentState: OleVariant): OleVariant;
var  
  docWnd;
  x, y;
  mess, str;  
begin
try
  mess := 
    'Данный документ не включён в состав вашего комплекта.*'+
    'Документ содержится в информационном блоке:*'+    
    'Презентационная версия. ЮРИСТ*'+
    'Контактная информация:*'+
    'Контактная информация отсутствует';
  if NOT OpenDocByNumber(5421030) then Raise('Не удалось открыть документ по Alt+N');
  docWnd := GetFromFlashEditor('ТЕКСТ ДОКУМЕНТА "ФЛЭШ"');
  if NOT IsExists(docWnd) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА "ФЛЭШ"');
  docWnd.SetFocus;
  Sys.Keys('[Tab]');
  Sys.Keys('7909600');    
  if NOT FindPicture(docWnd, 'partFlashButton.bmp', x, y) then
  begin
    Log.Picture(docWnd, 'Картинка ФЛЭШТОПИКа');
    Raise('Не удалось во ФЛЭШТОПИКе найти картинку кнопки ввода!' );
  end;  
  docWnd.Click(x + 10, y + 10);    
  str := WaitForWarningWindow(Options.Run.Timeout div 6, '', true, '#Вернуться*', true);
  result := StringCompare(mess, str); 
  if NOT result then  
    Log.Error('Текст предупреждения не эталонный : '+ str);
except
  Sys.Keys('[Esc]');  
  Log.Message( 'HLTC73_30_9_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.30.2: В ППР в поле слова в названии ввести «флэштопик» и провести поиск. 
  Открыть найденный документ и проверить, что он корректно отображается.      
}
function HLTC73_30_2_Execute (var  CurrentState: OleVariant): OleVariant;
var
  cardData;
  docWnd;
  listWnd;  
  x, y;      
begin
try
  cardData := 
    [
    	CARD_PPR, ([([
    	FD_WORDS_IN_CAPTION, ([
    		'флэштопик']) ]),([
    	FD_INOPERATIVE_EDITION, ([
    		'Да']) ]) ]) 
    ];    
  SearchInPPR(carddata);
  listWnd := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(listWnd) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');
  
  if NOT OpenDocFromList('Флэштопик со строкой ввода', listWnd) then 
    Raise('Не удалось открыть искомый документ из списка, полученного по ППР слова в названии = флэштопик');
    
  docWnd := GetFromFlashEditor('ТЕКСТ ДОКУМЕНТА "ФЛЭШ"');
  if NOT IsExists(docWnd) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА "ФЛЭШ"');
  docWnd.SetFocus;
      
  if NOT FindPicture(docWnd, 'partFlashButton.bmp', x, y) then
  begin
    Log.Error('Не удалось найти эталонный фрагмент при отображении ФЛЭШТОПИКА');
    Raise('Не удалось найти эталонный фрагмент при отображении ФЛЭШТОПИКА');
  end;
  result := true;
  CloseTabIfNeeded;
except   
  Log.Message( 'HLTC73_30_2_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
  GoToMainMenuWithCloseTabsExceptOne;
end;

{
HLTC73.30.3: В ППР выбрать блок «Консультации демо» и провести поиск. Должны найтись 4 документа с флэш.      
}
function HLTC73_30_3_Execute (var  CurrentState: OleVariant): OleVariant;
var
  cardData;  
  listWnd;        
  etalonList;
begin
try
  etalonList := [ 
    'Это флэштопик 5421002. Файл 5421308.swf. Есть контексты: флэш, трудовое законодательство При обновлении меняется флэш (на 5421309), тип, класс, NAME, текст.',
    'Это флэштопик 5421003. Файл 5421310.swf. Есть контексты: флэш, социальное паптнерство При обновлении удаляется.',
    'Флэштопик со строкой ввода',
    'Это флэштопик 5421044. Файл sample.swf. Есть контексты: флэш, налогоплательщик, НДС, учет. Из текста (НЕ из самого флэша) ссылка на 2001, 2001.200, 2006, 8901004. В блок 10 этого топика есть ссылка из таблицы топика 2006. В блок 20 этого топика есть ссылка из удаляемого при обновлении топика 8901004.',
    'Picture 2101'
  ];

  cardData := [
  	CARD_PPR, ([
      ([    FD_INOPERATIVE_EDITION, (['Да'])                   ]),
      ([    FD_INFORMATIONAL_BLOCK, ([ 'Консультации Демо'])   ])
     ]) 
  ];     
  SearchInPPR(carddata);
  listWnd := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(listWnd) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');
  
  if NOT CompareArray(etalonList, GetElementsFromTree(listWnd)) then
  begin
    Log.Error('Результирующий список не равен списку документов с эталонным количеством ФЛЭШТОПИКОВ' );
    Raise('Результирующий список не равен списку документов с эталонным количеством ФЛЭШТОПИКОВ' );  
  end; 
  result := true;
except   
  Log.Message( 'HLTC73_30_3_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;


{
HLTC73.30.5: Проверить, что у документа есть справка, информация о документе,  СКР.      
}
function HLTC73_30_5_Execute (var  CurrentState: OleVariant): OleVariant;
var  
  docWnd;
  addWnd;
  tab;        
  i;
begin
try
  if NOT OpenDocByNumber(5421030) then Raise('Не удалось открыть документ по Alt+N');
  docWnd := GetFromFlashEditor('ТЕКСТ ДОКУМЕНТА "ФЛЭШ"');
  if NOT IsExists(docWnd) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА "ФЛЭШ"');  
  
  for i := 1 to 3 do
  begin
    docWnd.SetFocus;
    case i of
      2:  begin
            tab := 'ВКЛАДКА "СПРАВКА"';
            if NOT ClickByMainMenuItem('Документы\Справка к документу') then 
              Raise('Не удалось вызвать пункт меню : Документы\Справка к документу');         
          end;
      1:  begin
            tab := 'ВКЛАДКА "ИНФОРМАЦИЯ О ДОКУМЕНТЕ"';      
            if NOT ClickByMainMenuItem('Документы\Информация о документе') then
              Raise('Не удалось вызвать пункт меню : Документы\Информация о документе'); 
          end; 
      3:  begin
            tab := 'ВКЛАДКА "ССЫЛКИ НА ДОКУМЕНТ"';      
            if NOT ClickByMainMenuItem('Документы\ССЫЛКИ НА ДОКУМЕНТ') then
              Raise('Не удалось вызвать пункт меню : Документы\ССЫЛКИ НА ДОКУМЕНТ'); 
          end;
    end;
      
    addWnd :=  GetFromFlashEditor(tab);      
    if NOT ( IsExists(addWnd) AND addWnd.Visible) then
    begin
      Log.Error('У ФЛЭШТОПИКА не удалось открыть вкладку : ' + tab);
      Raise('У ФЛЭШТОПИКА не удалось открыть вкладку : ' + tab);
    end; 
  end;
    
  
  result := true;
except   
  Log.Message( 'HLTC73_30_5_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
  HLTC73.30.10: Проверить, что на приватной версии на машине без установленного флэш-плеера при 
  открытии таких документов выдается сообщение о неустановленном Adobe Flash со ссылкой
  на сайт adobe.com для установки.      
}
function HLTC73_30_10_Execute (var  CurrentState: OleVariant): OleVariant;
var  
  docWnd;
  text;
  etalonText;
begin
try
  etalonText := 'На Вашем компьютере не установлены средства отображения мультимедиа-файлов в формате Adobe flash. Для просмотра данного документа, установите, пожалуйста, проигрыватель, который можно бесплатно загрузить с сайта Adobe.';
  if NOT OpenDocByNumber(5421030) then Raise('Не удалось открыть документ по Alt+N');
  docWnd := GetFromFlashEditor('ТЕКСТ ДОКУМЕНТА "ФЛЭШ" ПРИ ОТСУТСТВИИ ФЛЭШ ПЛЕЕРА');
  if NOT IsExists(docWnd) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА "ФЛЭШ" ПРИ ОТСУТСТВИИ ФЛЭШ ПЛЕЕРА (Флэштопика) когда отсутствует Флэш плеер');  
  docWnd.SetFocus;
  Sys.Keys('^[Home] ' + keyPause + '!^[End]' + keyPause + '!^[End]');    //Выделяем текст сообщения, так на нём нети контекстного меню
  text := CopyToClipboard(docWnd, '', 'Trim := true');
  if NOT StringCompare(etalonText, text) then
  begin
    Log.Error('Сообщение при отсутсвии флэшПлеера не соответствует эталонному!', text);
    Raise('Сообщение при отсутсвии флэшПлеера не соответствует эталонному: ' + text);
  end;  
  
  result := true;
except   
  Log.Message( 'HLTC73_30_10_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.29: Отправка по e-mail
  HLTC73.29.1: Отправка всего документа
     1. В документе из главного меню Файл выбрать «Переслать по E-mail»
     В почтовой программе откроется новое письмо с приложенным документом в формате rtf и заголовком «Система ГАРАНТ: <имя документа.rtf>».
    2. Открыть документ и проверить, что его содержимое корректно.
    P.S.
     Имя документа должно быть таким же, как при сохранении в файл.
     В конце могут добавляться «странные» символы. Этим достигается уникальность – не ошибка.
   
}
function HLTC73_29_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  ETALON_CAPTION = 'Система ГАРАНТ: Конституция Российской Федерации (принята на всенародном*.rtf';
  ETALON_ATTACH_NAME = 'Конституция Российской Федерации (принята на всенародном*.rtf (1* KB)';
  
var 
  toolBar;
  w;
  processWordPad;
  caption;
  atachWnd;
  atachText;
  etalonAtachText;
  curAttachName;  
    
begin
try
  etalonAtachText := 
    '*КОНСТИТУЦИЯ РОССИЙСКОЙ ФЕДЕРАЦИИ*' +
    'Мы, многонациональный народ Российской Федерации,*' +                                                          
    'Глава 1. Основы конституционного строя*' +
    'Глава 2. Права и свободы человека и гражданина*' +
    'Статья 17*' +     
    'Глава 4. Президент Российской Федерации*' +
    'Статья 80*' +    
    'Депутаты Совета Федерации первого созыва осуществляют свои полномочия на непостоянной основе.*' +    
    'См. комментарии к разделу второму Конституции РФ*';
  
  if NOT OpenDocByNumber(10003000) then Raise('Не удалось открыть документ по Alt+N');
  DeleteAllUserCommentsFromContents;
  if NOT ClickByMainMenuItem('Файл\Переслать по E-mail') then
    Raise('Не удалось вызвать рункт главного меню Файл\Переслать по E-mail');    
  //Ловим окно outlook
  w := GetFromOutlookExpress('ОСНОВНОЕ ОКНО');
  if NOT IsExists(w) then Raise('Не удалось получить окно OutlookExpress!');
  caption := w.WndCaption;  
  if NOT StringCompare(ETALON_CAPTION, caption) then
  begin
    Log.Error('Имя окна OutlookExpress не эталонно: ' + caption);
    Raise('Имя окна OutlookExpress не эталонно: ' + caption);
  end;
  atachWnd := GetFromOutlookExpress('ПОЛЕ "ВЛОЖЕНИЕ"');
  if NOT IsExists(atachWnd) then Raise('Не удалось получить ПОЛЕ "ВЛОЖЕНИЕ"');
  //Проверяем, что имя файла во вложении эталонено  
  curAttachName := atachWnd.wSelectedItems;
  if NOT StringCompare(ETALON_ATTACH_NAME, curAttachName) then
  begin
    Log.Error('Имя документа во вложении не эталонно: ' + curAttachName);
    Raise('Имя документа во вложении не эталонно: ' + curAttachName);
  end;
  //Если есть какие то левые wodpad-ы, грохаем их
  processWordPad := GetWordPadProcess;
  if IsExists(processWordPad) then processWordPad.Terminate;
  //Открываем документ    
  atachWnd.DblClick();
  //Заточка: На живую прибиваем Outlook-овское подтверждение  "Always ask before opening this type of file"
  Sys.Keys('[Left]');Sys.Keys('[Enter]');
  processWordPad := GetWordPadProcess;      
  if NOT IsExists(processWordPad) then Raise('Не удалось получить WORDPAD процесс');
  atachText := GetTextFromWORDPAD;
  if NOT StringCompare(etalonAtachText, atachText) then
  begin
    Log.Error('Содержимое файла из атача не эталонно: ' + atachText);
    Raise('Содержимое файла из атача не эталонно: ' + atachText);  
  end;
  if IsExists(w) then w.Close;
  if IsExists(processWordPad) then processWordPad.Terminate;  
  result := true;
except   
  Log.Message( 'HLTC73_29_1_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  if IsExists(w) then w.Close;
  if IsExists(processWordPad) then processWordPad.Terminate;
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.29: Отправка по e-mail
  HLTC73.29.2: Отправка фрагмента
   1. Выделить часть текста в документе 
   2. Нажать «Переслать по E-mail»
   3. В появившемся окне выбрать «Выделенный фрагмент»
   Проверить, что в приложенном к письму файле содержится именно выделенный в документе текст.   
  }
function HLTC73_29_2_Execute (var  CurrentState: OleVariant): OleVariant;
var 
  toolBar;
  w;
  processWordPad;
  atachWnd;
  atachText;
  etalonAtachText;
  obj;    
begin
try
  etalonAtachText := 
  '*Конституция Российской Федерации (принята на всенародном голосовании 12 декабря 1993 г.)'+ endOfLine +
  'HYPERLINK "garantF1://10003000.2000"Глава 2' + endOfLine +
  'HYPERLINK "garantF1://10003000.37"Статья 37' + endOfLine +
  'дискриминации';    
  if NOT OpenDocByNumber(10003000) then Raise('Не удалось открыть документ по Alt+N');
  //Выделяем фрагмент
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT BaseSearchInDocument(obj, 'дискриминации') then Raise ('Не удалось найти искомый контекст');  
  
  toolBar := GetFromEditor('ТУЛБАР ТЕКСТА ДОКУМЕНТА');
  if NOT ClickToolBarButton(toolBar, 'Переслать по E-Mail') then
    Raise('Не удалось на тулбаре кликнуть "Переслать по E-Mail"');    
  obj := GetFromOutlookExpressConfirmationForm('КОНТРОЛ "ВЫДЕЛЕННЫЙ ФРАГМЕНТ"');
  if NOT IsExists(obj) then Raise('Не удалось найти КОНТРОЛ "ВЫДЕЛЕННЫЙ ФРАГМЕНТ"');  
  obj.Click;
  //Если есть какие то левые wodpad-ы, грохаем их
  processWordPad := GetWordPadProcess;
  if IsExists(processWordPad) then processWordPad.Terminate;  
  //Ловим окно outlook
  w := GetFromOutlookExpress('ОСНОВНОЕ ОКНО');
  if NOT IsExists(w) then Raise('Не удалось получить окно OutlookExpress!');  
  atachWnd := GetFromOutlookExpress('ПОЛЕ "ВЛОЖЕНИЕ"');
  if NOT IsExists(atachWnd) then Raise('Не удалось получить ПОЛЕ "ВЛОЖЕНИЕ"');
  atachWnd.DblClick();
  //Заточка: На живую прибиваем Outlook-овское подтверждение  "Always ask before opening this type of file"
  Sys.Keys('[Left]');Sys.Keys('[Enter]');
  processWordPad := GetWordPadProcess;      
  if NOT IsExists(processWordPad) then Raise('Не удалось получить WORDPAD процесс');
  atachText := GetTextFromWORDPAD;
  if NOT StringCompare(etalonAtachText, atachText) then
  begin
    Log.Error('Содержимое файла из атача не эталонно: ' + atachText);
    Raise('Содержимое файла из атача не эталонно!');  
  end;
  if IsExists(w) then w.Close;
  if IsExists(processWordPad) then processWordPad.Terminate;  
  result := true;
except   
  Log.Message( 'HLTC73_29_2_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  if IsExists(w) then w.Close;
  if IsExists(processWordPad) then processWordPad.Terminate;
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.29: Отправка по e-mail
  HLTC73.29.3: Отправка всего документа при наличии выделенного фрагмента
   1. Выделить часть текста в документе
   2. Нажать «Переслать по E-mail»
   3. В появившемся окне выбрать «Документ целиком»
   Проверить, что в приложенном к письму файле содержится полный текст документа.
  }
function HLTC73_29_3_Execute (var  CurrentState: OleVariant): OleVariant;
var 
  toolBar;
  w;
  processWordPad;
  atachWnd;
  atachText;
  etalonAtachText;
  obj;    
begin
try
  etalonAtachText := 
    '*КОНСТИТУЦИЯ РОССИЙСКОЙ ФЕДЕРАЦИИ*' +
    'Мы, многонациональный народ Российской Федерации,*' +                                                          
    'Глава 1. Основы конституционного строя*' +
    'Глава 2. Права и свободы человека и гражданина*' +
    'Статья 17*' +     
    'Глава 4. Президент Российской Федерации*' +
    'Статья 80*' +    
    'Депутаты Совета Федерации первого созыва осуществляют свои полномочия на непостоянной основе.*' +    
    'См. комментарии к разделу второму Конституции РФ*';    
  if NOT OpenDocByNumber(10003000) then Raise('Не удалось открыть документ по Alt+N');
  DeleteAllUserCommentsFromContents;
  //Выделяем фрагмент
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT BaseSearchInDocument(obj, 'основы') then Raise ('Не удалось найти искомый контекст');  
  
  toolBar := GetFromEditor('ТУЛБАР ТЕКСТА ДОКУМЕНТА');
  if NOT ClickToolBarButton(toolBar, 'Переслать по E-Mail') then
    Raise('Не удалось на тулбаре кликнуть "Переслать по E-Mail"');    
  obj := GetFromOutlookExpressConfirmationForm('КОНТРОЛ "ДОКУМЕНТ ЦЕЛИКОМ"');
  if NOT IsExists(obj) then Raise('Не удалось найти КОНТРОЛ "ДОКУМЕНТ ЦЕЛИКОМ"');  
  obj.Click;  
  //Если есть какие то левые wodpad-ы, грохаем их
  processWordPad := GetWordPadProcess;
  if IsExists(processWordPad) then processWordPad.Terminate;
  //Ловим окно outlook
  w := GetFromOutlookExpress('ОСНОВНОЕ ОКНО');
  if NOT IsExists(w) then Raise('Не удалось получить окно OutlookExpress!');  
  atachWnd := GetFromOutlookExpress('ПОЛЕ "ВЛОЖЕНИЕ"');
  if NOT IsExists(atachWnd) then Raise('Не удалось получить ПОЛЕ "ВЛОЖЕНИЕ"');
  atachWnd.DblClick();
  //Заточка: На живую прибиваем Outlook-овское подтверждение  "Always ask before opening this type of file"
  Sys.Keys('[Left]');Sys.Keys('[Enter]');
  processWordPad := GetWordPadProcess;      
  if NOT IsExists(processWordPad) then Raise('Не удалось получить WORDPAD процесс');
  atachText := GetTextFromWORDPAD;
  if NOT StringCompare(etalonAtachText, atachText) then
  begin
    Log.Error('Содержимое файла из атача не эталонно: ' + atachText);
    Raise('Содержимое файла из атача не эталонно: ' + atachText);  
  end;
  if IsExists(w) then w.Close;
  if IsExists(processWordPad) then processWordPad.Terminate;  
  result := true;
except   
  Log.Message( 'HLTC73_29_3_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  if IsExists(w) then w.Close;
  if IsExists(processWordPad) then processWordPad.Terminate;
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.20.9: Проверить изменение режима показа комментариев:
  HLTC73.20.9.5: выключить ранее включенный режим показа информации об изменениях, проверить, что 
    кнопка режима показа информации об изменениях стала отжатой
  HLTC73.20.9.6: включить ранее выключенный режим показа информации об изменениях, проверить, что:
    HLTC73.20.9.6.1: кнопка режима показа информации об изменениях стала нажатой  
  }
function HLTC73_20_9_5_1_Execute (var  CurrentState: OleVariant): OleVariant;  
begin
try
  if NOT OpenDocByNumber(10800200) then Raise('Не удалось открыть документ по Alt+N');
  OpenChangesInDocument('', false);
  if NOT OpenChangesInDocument then
  begin
    Log.Error('Не удалось ВКЛючить режим показа информации об изменениях');
    Raise('Не удалось ВКЛючить режим показа информации об изменениях');    
  end;  
  if NOT OpenChangesInDocument('', false) then
  begin
    Log.Error('Не удалось ВЫКЛючить режим показа информации об изменениях');
    Raise('Не удалось ВЫКЛючить режим показа информации об изменениях');    
  end;  
  Result := true;
except   
  Log.Message( 'HLTC73_20_9_5_1_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.20.9: Проверить изменение режима показа комментариев:
  HLTC73.20.9.5: выключить ранее включенный режим показа информации об изменениях, проверить, что     
    HLTC73.20.9.5.3: на полях документа (справа от иконок блоков на сабпанели) осталась иконка о наличии информации об изменениях
  HLTC73.20.9.6: включить ранее выключенный режим показа информации об изменениях, проверить, что     
    HLTC73.20.9.6.3: на полях документа (справа от иконок блоков на сабпанели) осталась иконка о наличии информации об изменениях
    
  HLTC73.20.9.7: Проверить, что можно показать/скрыть информацию об изменениях несколькими способами:
    HLTC73.20.9.7.1: Контекстное меню к иконке на полях
    HLTC73.20.9.7.2: Главное меню – Документы – Комментарии – Включить информацию об изменениях документа
    HLTC73.20.9.7.3: Кнопка на тулбаре: Изменения в документе – Информация об изменениях       
  }
function HLTC73_20_9_5_3_Execute (var  CurrentState: OleVariant): OleVariant;  
begin
try
  if NOT OpenDocByNumber(10800200) then Raise('Не удалось открыть документ по Alt+N');
  //ВЫКЛючаем
  OpenChangesInDocument('', false);
  //Проверяем что иконка есть  
  if NOT MoveMouseToObject(GetFromEditor('САБ ПАНЕЛЬ'), 'Ver_Comments_off.bmp') then
  begin
    Log.Error('Не удалось найти иконку информации об изменениях на САБ панели');
    Raise('Не удалось найти иконку информации об изменениях на САБ панели');
  end;
  //ВКЛлючаем
  OpenChangesInDocument();  
  //Проверяем что иконка есть
  if NOT MoveMouseToObject(GetFromEditor('САБ ПАНЕЛЬ'), 'Ver_Comments_off.bmp') then
  begin
    Log.Error('Не удалось найти иконку информации об изменениях на САБ панели');
    Raise('Не удалось найти иконку информации об изменениях на САБ панели');
  end;
  //Проверяем что можно ВЫКЛючить через тулбар
  if NOT OpenChangesInDocument('КНОПКА НА ТУЛБАРЕ', false) then
  begin
    Log.Error('Не удалось ВЫКЛючить режим показа информации об изменениях с КНОПКА НА ТУЛБАРЕ');
    Raise('Не удалось ВЫКЛючить режим показа информации об изменениях с КНОПКА НА ТУЛБАРЕ');    
  end;  
  //Проверяем что можно ВКЛючить через тулбар
  if NOT OpenChangesInDocument('КНОПКА НА ТУЛБАРЕ') then
  begin
    Log.Error('Не удалось ВКЛючить режим показа информации об изменениях с КНОПКА НА ТУЛБАРЕ');
    Raise('Не удалось ВКЛючить режим показа информации об изменениях с КНОПКА НА ТУЛБАРЕ');    
  end;
  //Проверяем что можно ВЫКЛючить через САБ    
  if NOT OpenChangesInDocument('САБ ПАНЕЛЬ', false) then
  begin
    Log.Error('Не удалось ВЫКЛючить режим показа информации об изменениях с ИКОНКА');
    Raise('Не удалось ВЫКЛючить режим показа информации об изменениях с ИКОНКА');    
  end;
  //Проверяем что можно ВКЛючить через САБ  
  if NOT OpenChangesInDocument('САБ ПАНЕЛЬ') then
  begin
    Log.Error('Не удалось ВКЛючить режим показа информации об изменениях с ИКОНКА');
    Raise('Не удалось ВКЛючить режим показа информации об изменениях с ИКОНКА');    
  end;
  //Проверяем что можно ВЫКЛючить через Меню
  if NOT OpenChangesInDocument('МЕНЮ', false) then
  begin
    Log.Error('Не удалось ВЫКЛючить режим показа информации об изменениях через МЕНЮ');
    Raise('Не удалось ВЫКЛючить режим показа информации об изменениях через МЕНЮ');    
  end;
  //Проверяем что можно ВКЛючить через Меню
  if NOT OpenChangesInDocument('МЕНЮ') then
  begin
    Log.Error('Не удалось ВКЛючить режим показа информации об изменениях через МЕНЮ');
    Raise('Не удалось ВКЛючить режим показа информации об изменениях через МЕНЮ');    
  end;
  Result := true;
except   
  Log.Message( 'HLTC73_20_9_5_3_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.20.9: Проверить изменение режима показа комментариев:
  HLTC73.20.9.5: выключить ранее включенный режим показа информации об изменениях, проверить, что 
    HLTC73.20.9.5.2: информация об изменениях стала скрыта в тексте документа
    HLTC73.20.9.5.4: иконка расположена на той же строке, что и информация об измененияхй  
  }
function HLTC73_20_9_5_2_Execute (var  CurrentState: OleVariant): OleVariant;
var
  str;  
  doc;
begin
try
  if NOT OpenDocByNumber(10800200) then Raise('Не удалось открыть документ по Alt+N');
  doc:= GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  OpenChangesInDocument;    
  if NOT OpenChangesInDocument('', false) then Raise('Не удалось ВЫКЛючить режим показа информации об изменениях');  
  if NOT ClickNearIconOnSubInDocument( doc, 'ВЕРСИОННЫЕ КОММЕНТАРИИ') then
    Raise('Не удалось кликнуть в докумнете возле иконки информации об изменениях');
  str := CopyToClipboard(doc, 'STRING', 'Trim := true'); 
  result :=  StringCompare(str, 'Часть первая');//Если режим выключен, то под иконкой должен быть такой текст
  if NOT result then
    Log.Error('Текст информации об изменениях показывается', str);  
except   
  Log.Message( 'HLTC73_20_9_5_2_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.20.9: Проверить изменение режима показа комментариев:
  HLTC73.20.9.6: включить ранее выключенный режим показа информации об изменениях, проверить, что:   
    HLTC73.20.9.6.2: информация об изменениях стала показываться в тексте документа  
  }
function HLTC73_20_9_6_2_Execute (var  CurrentState: OleVariant): OleVariant;
var
  str;  
  doc;
begin
try
  if NOT OpenDocByNumber(10800200) then Raise('Не удалось открыть документ по Alt+N');
  doc:= GetFromEditor('ТЕКСТ ДОКУМЕНТА');      
  if NOT OpenChangesInDocument then Raise('Не удалось ВКЛючить режим показа информации об изменениях');  
  if NOT ClickNearIconOnSubInDocument( doc, 'ВЕРСИОННЫЕ КОММЕНТАРИИ') then
    Raise('Не удалось кликнуть в докумнете возле иконки информации об изменениях');
  str := CopyToClipboard(doc, 'STRING', 'Trim := true'); 
  result :=  StringCompare('*Федеральным законом от 9 июля 1999 г.*', str);//Если режим включен, то под иконкой должен быть такой текст
  if NOT result then
    Log.Error('Текст информации об изменениях НЕ показывается', str);  
except   
  Log.Message( 'HLTC73_20_9_6_2_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.20.9: Проверить изменение режима показа комментариев:
  HLTC73.20.9.5: выключить ранее включенный режим показа информации об изменениях, проверить, что 
    HLTC73.20.9.5.5: хинт к иконке:
     «Информация об изменениях в документе: 
     <текст комментария>»  
  }
function HLTC73_20_9_5_5_Execute (var  CurrentState: OleVariant): OleVariant;
var
  hint;
  str;
  subPanel;
begin
try
  if NOT OpenDocByNumber(10800200) then Raise('Не удалось открыть документ по Alt+N');
  subPanel := GetFromEditor('САБ ПАНЕЛЬ');      
  OpenChangesInDocument('', false);  
  MoveMouseToObject(subPanel,'Ver_Comments_off.bmp',5,5);  
  hint := GetFromShell('ОКНО ХИНТА');  
  if NOT IsExists(hint) then Raise('Не найдено окно ХИНТА');  
  str := hint.wndCaption;
  result := StringCompare('Информация об изменениях в документе:*Федеральным законом от 9 июля 1999 г. N 154-ФЗ в часть*', str);
  if NOT result then
  begin
    Log.Error('Текст хинта не эталонен',str);
    Raise('Текст хинта не эталонен');
  end;
except   
  Log.Message( 'HLTC73_20_9_5_5_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.20.9: Проверить изменение режима показа комментариев:
  HLTC73.20.9.6: включить ранее выключенный режим показа информации об изменениях, проверить, что: 
    HLTC73.20.9.6.4: хинт к иконке: «Информация об изменениях в документе»  
  }
function HLTC73_20_9_6_4_Execute (var  CurrentState: OleVariant): OleVariant;
var
  hint;
  str;
  subPanel;
begin
try
  if NOT OpenDocByNumber(10800200) then Raise('Не удалось открыть документ по Alt+N');
  subPanel := GetFromEditor('САБ ПАНЕЛЬ');      
  OpenChangesInDocument;  
  if NOT MoveMouseToObject(subPanel,'Ver_Comments_off.bmp',7,7) then Raise('Не удалось переместить мыш на иконку Ver_Comments_off.bmp');  
  hint := GetFromShell('ОКНО ХИНТА');  
  if NOT IsExists(hint) then Raise('Не найдено окно ХИНТА');  
  str := hint.wndCaption;
  result := StringCompare(str, 'Информация об изменениях в документе');
  if NOT result then
  begin
    Log.Error('Текст хинта не эталонен',str);
    Raise('Текст хинта не эталонен');
  end;
except   
  Log.Message( 'HLTC73_20_9_6_4_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.20.9: Проверить изменение режима показа комментариев:
  HLTC73.20.9.6: включить ранее выключенный режим показа информации об изменениях, проверить, что: 
    HLTC73.20.9.6.5: Текст информации предваряется словами: «Информация об изменениях:»
      
  }
function HLTC73_20_9_6_5_Execute (var  CurrentState: OleVariant): OleVariant;
var
  hint;
  str;
  subPanel;
  x, y, x1,y1;
begin
try
  if NOT OpenDocByNumber(800200) then Raise('Не удалось открыть документ по Alt+N');
  if NOT OpenChangesInDocument then Raise('Не удалось включить показ информации об изменениях!');    
  subPanel := GetFromEditor('САБ ПАНЕЛЬ');    
  if NOT MoveMouseToObject(subPanel,'Ver_Comments_off.bmp',0,0) then
  begin
    Log.Error('Не удалось найти иконку "информация об изменениях"');
    Raise('Не удалось найти иконку "информация об изменениях"');  
  end;  
  x := Sys.Desktop.MouseX;       
  y := Sys.Desktop.MouseY;  
  if NOT FindPicture(Sys.Desktop, 'Ver_Comments.bmp', x1, y1, x-5, y-5, 400, 50 ) then
  begin
    Log.Error('Не удалось найти шапку «Информация об изменениях» с иконкой "информация об изменениях"');  
    Raise('Не удалось найти шапку «Информация об изменениях» с иконкой "информация об изменениях"');
  end;  
  Result := true;          
except   
  Log.Message( 'HLTC73_20_9_6_5_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.4.8: На саб-панели должны быть иконки для тех блоков, которые попадают в оглавление
HLTC73.4.8.1: В контекстном меню к ним содержатся следующие операции к данному фрагменту(проверить их порядок следования и корректную работу):
HLTC73.4.8.1.1: Скопировать позицию
  
  }
function HLTC73_4_8_1_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  PARAGRAF='2003.1';
var
  str;
  subPanel;  
begin
try
  if NOT OpenDocByNumber(2003) then Raise('Не удалось открыть документ по Alt+N');
  subPanel := GetFromEditor('САБ ПАНЕЛЬ');
  if NOT IsExists(subPanel) then Raise('Не удалось получить САБ ПАНЕЛЬ');    
  if NOT MoveMouseToObject(subPanel,'block.bmp',1,1, true,0) then
    Raise('Не удалось вызвать контекстное меню к блоку на саб панели');
  if NOT ClickByPopUpMenuItem(subPanel, 'Скопировать позицию') then 
    Raise('Не удалось вызвать контекстную операцию "Скопировать позицию"');
  str := Sys.Clipboard;  
  if NOT StringCompare(str, PARAGRAF) then
  begin
    Log.Error('После выполнения операцию "Скопировать позицию" на блоке в буфер попал не эталонный параграф: '+ str);
    Raise('После выполнения операцию "Скопировать позицию" на блоке в буфер попал не эталонный параграф: '+ str);
  end;  
  Result := true;  
except   
  Log.Message( 'HLTC73_4_8_1_1_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
end;


{
HLTC73.4.8: На саб-панели должны быть иконки для тех блоков, которые попадают в оглавление
HLTC73.4.8.1: В контекстном меню к ним содержатся следующие операции к данному фрагменту(проверить их порядок следования и корректную работу):
HLTC73.4.8.1.2: Короткое имя фрагмента, к которому относятся эти операции
  
  }
function HLTC73_4_8_1_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  PARAGRAF='2003.1';
  PARAGRAF_TEXT='Это ссылка на саб 10 документа с www-образом';
  OPERATION='BLOCK 1';
  TEST_WORD='Меню операций с фрагментом "BLOCK 1".';
var
  str;
  subPanel; 
  doc; 
begin
try
  if NOT OpenDocByNumber(2003) then Raise('Не удалось открыть документ по Alt+N');
  subPanel := GetFromEditor('САБ ПАНЕЛЬ');
  if NOT IsExists(subPanel) then Raise('Не удалось получить САБ ПАНЕЛЬ');    
  if NOT MoveMouseToObject(subPanel,'block.bmp',1,1, true,0) then
    Raise('Не удалось вызвать контекстное меню к блоку на саб панели');
  if NOT ClickByPopUpMenuItem(subPanel, OPERATION) then
    Raise('Не удалось вызвать контекстную операцию: ' + OPERATION); 
  str := WaitForInfoWindow;
  if NOT StringCompare(TEST_WORD, str) then 
    Raise('Текст информационного окна не Эталонный' + str);  
  doc := GetFromEditor('ТЕКСТ ДОКУМЕНТА');  
  str := CopyToClipboard(doc, '', 'Trim := true');
  if NOT StringCompare(str, PARAGRAF_TEXT) then
  begin
    Log.Error('Выделился не эталонный блок:'+ str);  
    Raise('Выделился не эталонный блок:'+ str);
  end;
  Result := true;  
except   
  Log.Message( 'HLTC73_4_8_1_2_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
end;


{
HLTC73.4.8: На саб-панели должны быть иконки для тех блоков, которые попадают в оглавление
HLTC73.4.8.1: В контекстном меню к ним содержатся следующие операции к данному фрагменту(проверить их порядок следования и корректную работу):
HLTC73.4.8.1.6: Установить закладку на фрагмент
  
  }
function HLTC73_4_8_1_6_Execute (var  CurrentState: OleVariant): OleVariant;
const
  PREF='HLTC73_4_8_1_6';
  OPERATION='Установить закладку на фрагмент'; 
  PARAGRAF_TEXT='Это ссылка на саб 10 документа с www-образом'; 
var
  str;
  subPanel;     
begin
try
  if NOT OpenDocByNumber(2003) then Raise('Не удалось открыть документ по Alt+N');
  subPanel := GetFromEditor('САБ ПАНЕЛЬ');
  if NOT IsExists(subPanel) then Raise('Не удалось получить САБ ПАНЕЛЬ');    
  if NOT MoveMouseToObject(subPanel,'block.bmp',1,1, true,0) then
    Raise('Не удалось вызвать контекстное меню к блоку на саб панели');
  if NOT ClickByPopUpMenuItem(subPanel, OPERATION) then
    Raise('Не удалось вызвать контекстную операцию: ' + OPERATION);
  if NOT SaveToFoldersExt('Мои документы', PREF,'','Сохранить', true) then
    Raise('Не удалось сохранить закладку на Фрагмент');
  GoToMainMenu;
  if NOT OpenObjectFromFolder(MY_DOCS_PATH+PREF, OpenMyDocTab) then
    Raise('Не удалось открыть сохранённую закладку: ' + MY_DOCS_PATH + PREF);      
  str := CopyToClipboard(GetFromEditor('ТЕКСТ ДОКУМЕНТА'),'STRING','Trim := true');    
  if NOT StringCompare(PARAGRAF_TEXT, str) then
  begin
    Log.Error('С закладки на фрагмент перешли на НЕ эталонный параграф: ' + str);
    Raise('С закладки на фрагмент перешли на НЕ эталонный параграф: ' + str);
  end;
  DeleteAllInMyDoc;
  Result := true;  
except
  DeleteAllInMyDoc;   
  Log.Message( 'HLTC73_4_8_1_6_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
end;


{
HLTC73.4.8: На саб-панели должны быть иконки для тех блоков, которые попадают в оглавление
HLTC73.4.8.1: В контекстном меню к ним содержатся следующие операции к данному фрагменту(проверить их порядок следования и корректную работу):
HLTC73.4.8.1.9: Копировать фрагмент
  
  }
function HLTC73_4_8_1_9_Execute (var  CurrentState: OleVariant): OleVariant;
const  
  OPERATION='Копировать фрагмент'; 
  PARAGRAF_TEXT='Это ссылка на саб 10 документа с www-образом'; 
var
  str;
  subPanel;     
begin
try
  if NOT OpenDocByNumber(2003) then Raise('Не удалось открыть документ по Alt+N');
  subPanel := GetFromEditor('САБ ПАНЕЛЬ');
  if NOT IsExists(subPanel) then Raise('Не удалось получить САБ ПАНЕЛЬ');    
  if NOT MoveMouseToObject(subPanel,'block.bmp',1,1, true,0) then
    Raise('Не удалось вызвать контекстное меню к блоку на саб панели');
  if NOT ClickByPopUpMenuItem(subPanel, OPERATION) then
    Raise('Не удалось вызвать контекстную операцию: ' + OPERATION);  
  str := Sys.Clipboard;    
  if NOT StringCompare(str, PARAGRAF_TEXT) then
  begin
    Log.Error('Скопировался не эталонный фрагмент:'+ str);  
    Raise('Скопировался не эталонный фрагмент:'+ str);
  end;
  Result := true;  
except
  DeleteAllInMyDoc;   
  Log.Message( 'HLTC73_4_8_1_9_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.4.8: На саб-панели должны быть иконки для тех блоков, которые попадают в оглавление
HLTC73.4.8.1: В контекстном меню к ним содержатся следующие операции к данному фрагменту(проверить их порядок следования и корректную работу):
HLTC73.4.8.1.10: Показывать технические комментарии
  
  }
function HLTC73_4_8_1_10_Execute (var  CurrentState: OleVariant): OleVariant;
const  
  OPERATION='Показывать технические комментарии'; 
  PARAGRAF_TEXT='Это блок 10. Тип = Закон. Сюда есть ссылка из 2004.201 (Вид правовой информации - Судебная практика)*';
  PARAGRAF_TEXT_WITH_TEHNICAL_COMMENTS='<10>Это блок 10*Тип:*Закон*Это блок 10. Тип = Закон. Сюда есть ссылка из 2004.201 (Вид правовой информации - Судебная практика)*';   
var
  str;
  subPanel;
  doc;  
  i;  
begin
try
  if NOT OpenDocByNumber(2009) then Raise('Не удалось открыть документ по Alt+N');
  subPanel := GetFromEditor('САБ ПАНЕЛЬ');
  if NOT IsExists(subPanel) then Raise('Не удалось получить САБ ПАНЕЛЬ');
  subPanel.ClickR(1,1);
  if IsMenuItemChecked(subPanel.QCPopupMenu, OPERATION) then
  begin
    Sys.Keys['[Esc]'];  
    Raise('По умолчанию технические комментарии оказались ВКЛючены');
  end;
  Sys.Keys['[Esc]'];   
  doc := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT ClickNearIconOnSubInDocument(doc, 'ФРАГМЕНТ ДОКУМЕТА', subPanel) then
    Raise('Не удалось кликнуть в докумнете возле иконки ФРАГМЕНТ ДОКУМЕТА');
  str := CopyToClipboard(doc,'STRING','Trim := true');
  if NOT StringCompare(str+'*', PARAGRAF_TEXT) then
  begin
    Log.Error('При ВЫКЛ технических комментариях скопировался не эталонный параграф:'+ str);  
    Raise('При ВЫКЛ технических комментариях скопировался не эталонный параграф:'+ str);
  end;
  //Включаем показ технических комментариев        
  if NOT MoveMouseToObject(subPanel,'block.bmp',1,1, true,0) then
    Raise('Не удалось вызвать контекстное меню к блоку на саб панели');      
  if NOT ClickByPopUpMenuItem(subPanel, OPERATION) then
    Raise('Не удалось вызвать контекстную операцию: ' + OPERATION);
  if NOT ClickNearIconOnSubInDocument(doc, 'ФРАГМЕНТ ДОКУМЕТА', subPanel) then
    Raise('Не удалось кликнуть в докумнете возле иконки ФРАГМЕНТ ДОКУМЕТА');
  for i := 1 to 6 do  
    Sys.Keys['![Down]'];                
  str := CopyToClipboard(doc,'','Trim := true');    
  if NOT StringCompare(PARAGRAF_TEXT_WITH_TEHNICAL_COMMENTS, str) then
  begin
    Log.Error('При ВКЛ технических комментариях скопировался не эталонный параграф:'+ str);  
    Raise('При ВКЛ технических комментариях скопировался не эталонный параграф:'+ str);
  end;
  //Отключаем показ технических комментариев
  if NOT MoveMouseToObject(subPanel,'block.bmp',1,1, true,0) then
    Raise('Не удалось вызвать контекстное меню к блоку на саб панели');
  if NOT ClickByPopUpMenuItem(subPanel, OPERATION) then
    Raise('Не удалось вызвать контекстную операцию: ' + OPERATION);
  if NOT ClickNearIconOnSubInDocument(doc, 'ФРАГМЕНТ ДОКУМЕТА', subPanel) then
    Raise('Не удалось кликнуть в докумнете возле иконки ФРАГМЕНТ ДОКУМЕТА');
  str := CopyToClipboard(doc,'STRING','Trim := true');
  if NOT StringCompare(str + '*', PARAGRAF_TEXT) then
  begin
    Log.Error('При ВЫКЛ технических комментариях скопировался не эталонный параграф:'+ str);  
    Raise('При ВЫКЛ технических комментариях скопировался не эталонный параграф:'+ str);
  end;    
  Result := true;  
except  
  Log.Warning('Следим за тем, чтобы после работы скрипта Технические комментарии не остались Включенными');
  subPanel := GetFromEditor('САБ ПАНЕЛЬ');
  subPanel.ClickR(1,1);    
  if IsMenuItemChecked(subPanel.QCPopupMenu, OPERATION) then        
    ClickByPopUpMenuItem(subPanel, OPERATION);     
  Log.Message( 'HLTC73_4_8_1_10_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.4.8: На саб-панели должны быть иконки для тех блоков, которые попадают в оглавление
  HLTC73.4.8.1: В контекстном меню к ним содержатся следующие операции к данному фрагменту(проверить их порядок следования и корректную работу):
    HLTC73.4.8.1.11: Показывать метки
  
  }
function HLTC73_4_8_1_11_Execute (var  CurrentState: OleVariant): OleVariant;
const  
  OPERATION='Показывать метки';   
  TEST_WORD='10';  
var  
  subPanel;  
  picture;
  x, y;
  doc;
begin
try
  if NOT OpenDocByNumber(2009) then Raise('Не удалось открыть документ по Alt+N');
  subPanel := GetFromEditor('САБ ПАНЕЛЬ');
  if NOT IsExists(subPanel) then Raise('Не удалось получить САБ ПАНЕЛЬ');
  subPanel.ClickR(1,1);
  if IsMenuItemChecked(subPanel.QCPopupMenu, OPERATION) then
  begin
    Sys.Keys['[Esc]'];  
    Raise('По умолчанию Метки оказались ВКЛючены');
  end;
  Sys.Keys['[Esc]'];   
  doc := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  doc.SetFocus;
  //Sys.Keys('[PageDown]');  //Чтобы спустится вниз, где есть блоки
  //Включаем показ Меток        
  if NOT MoveMouseToObject(subPanel,'block.bmp',1,1, true,0) then
    Raise('Не удалось вызвать контекстное меню к блоку на саб панели');      
  if NOT ClickByPopUpMenuItem(subPanel, OPERATION) then
    Raise('Не удалось вызвать контекстную операцию: ' + OPERATION);
  
  picture := RenderTextToPicture(TEST_WORD, 'MS Sans Serif', 9, 
    'textColor:=clNavy'); 
  if NOT FindPicture(
          subPanel, 
          picture,
          x, y
  ) then
  begin
    Log.Picture(picture, 'Картинка отрендереного шрифта');
    Log.Picture(subPanel, 'Картинка объекта, на котором ищется шрифт');
    
    Log.Error('Не удалось на САБ панели найти метку: ' + TEST_WORD);
    Raise('Не удалось на САБ панели найти метку: ' + TEST_WORD);    
  end;
  //Выключаем показ Меток
  if NOT MoveMouseToObject(subPanel,'block.bmp',1,1, true,0) then
    Raise('Не удалось вызвать контекстное меню к блоку на саб панели');      
  if NOT ClickByPopUpMenuItem(subPanel, OPERATION) then
    Raise('Не удалось вызвать контекстную операцию: ' + OPERATION);  
  
  if FindPicture(
          subPanel, 
          picture,
          x, y
  ) then
  begin
    Log.Picture(picture, 'Картинка отрендереного шрифта');
    Log.Picture(subPanel, 'Картинка объекта, на котором ищется шрифт');
    
    Log.Error('При ВЫКЛ показе меток на САБ панели найти нашлась иконка метка, хотя не должна: ' + TEST_WORD);
    Raise('При ВЫКЛ показе меток на САБ панели найти нашлась иконка метка, хотя не должна: ' + TEST_WORD);    
  end;
    
  Result := true;  
except  
  Log.Warning('Следим за тем, чтобы после работы скрипта Метки не остались Включенными');
  subPanel := GetFromEditor('САБ ПАНЕЛЬ');
  subPanel.ClickR(1,1);    
  if IsMenuItemChecked(subPanel.QCPopupMenu, OPERATION) then        
    ClickByPopUpMenuItem(subPanel, OPERATION);     
  Log.Message( 'HLTC73_4_8_1_11_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.4.8: На саб-панели должны быть иконки для тех блоков, которые попадают в оглавление
  HLTC73.4.8.1: В контекстном меню к ним содержатся следующие операции к данному фрагменту(проверить их порядок следования и корректную работу):
    HLTC73.4.8.1.12: Показывать блоки в тексте
  
  }
function HLTC73_4_8_1_12_Execute (var  CurrentState: OleVariant): OleVariant;
const  
  OPERATION='Показывать блоки в тексте';
var  
  subPanel;
  doc;  
  x, y;  
begin
try
  if NOT OpenDocByNumber(2009) then Raise('Не удалось открыть документ по Alt+N');
  subPanel := GetFromEditor('САБ ПАНЕЛЬ');
  if NOT IsExists(subPanel) then Raise('Не удалось получить САБ ПАНЕЛЬ');
  subPanel.ClickR(1,1);
  if IsMenuItemChecked(subPanel.QCPopupMenu, OPERATION) then    
    Raise('По умолчанию ' + OPERATION +' оказалася ВКЛючены');  
  Sys.Keys['[Esc]'];   
  doc := GetFromEditor('ТЕКСТ ДОКУМЕНТА');  
  //Включаем показ        
  if NOT MoveMouseToObject(subPanel,'block.bmp',1,1, true,0) then
    Raise('Не удалось вызвать контекстное меню к блоку на саб панели');      
  if NOT ClickByPopUpMenuItem(subPanel, OPERATION) then
    Raise('Не удалось вызвать контекстную операцию: ' + OPERATION);    
  if NOT FindPicture(doc, 'blockInText.bmp', x, y) then
  begin
    Log.Error('При ВКЛ ' + OPERATION + ' не удалось найти картинку рамки, показывающей блоки в тексте');  
    Raise('При ВКЛ ' + OPERATION + ' не удалось найти картинку рамки, показывающей блоки в тексте');
  end;
  //Отключаем показ
  if NOT MoveMouseToObject(subPanel,'block.bmp',1,1, true,0) then
    Raise('Не удалось вызвать контекстное меню к блоку на саб панели');
  if NOT ClickByPopUpMenuItem(subPanel, OPERATION) then
    Raise('Не удалось вызвать контекстную операцию: ' + OPERATION);
  if FindPicture(doc, 'blockInText.bmp', x, y) then
  begin
    Log.Error('При ВЫКЛ ' + OPERATION + ' рамкf, показывающая блоки в тексте, по прежднему показывается!');  
    Raise('При ВЫКЛ ' + OPERATION + ' рамкf, показывающая блоки в тексте, по прежднему показывается!');
  end;        
  Result := true;  
except  
  Log.Warning('Следим за тем, чтобы после работы скрипта ' + OPERATION + ' не остались Включенными');
  subPanel := GetFromEditor('САБ ПАНЕЛЬ');
  subPanel.ClickR(1,1);    
  if IsMenuItemChecked(subPanel.QCPopupMenu, OPERATION) then        
    ClickByPopUpMenuItem(subPanel, OPERATION);     
  Log.Message( 'HLTC73_4_8_1_12_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.4.8: На саб-панели должны быть иконки для тех блоков, которые попадают в оглавление
  HLTC73.4.8.1: В контекстном меню к ним содержатся следующие операции к данному фрагменту(проверить их порядок следования и корректную работу):
    HLTC73.4.9.1.13: Показывать спецсимволы
  
  }
function HLTC73_4_8_1_13_Execute (var  CurrentState: OleVariant): OleVariant;
const  
  OPERATION='Показывать спецсимволы';   
  TEST_WORD='¶';  
var  
  subPanel;
  doc;
  picture;
  x, y;
begin
try
  if NOT SetDefaultSettings then 
    Raise('Не удалось установить настройки по Дефолту!');
  if NOT OpenDocByNumber(2009) then Raise('Не удалось открыть документ по Alt+N');
  subPanel := GetFromEditor('САБ ПАНЕЛЬ');
  if NOT IsExists(subPanel) then Raise('Не удалось получить САБ ПАНЕЛЬ');
  subPanel.ClickR(1,1);
  if IsMenuItemChecked(subPanel.QCPopupMenu, OPERATION) then      
    Raise('По умолчанию Cпецсимволы оказались ВКЛючены');  
  Sys.Keys['[Esc]'];
  doc := GetFromEditor('ТЕКСТ ДОКУМЕНТА');  
  //Включаем показ Спецсимволов        
  if NOT MoveMouseToObject(subPanel,'blockFromAllDoc.bmp',3,3, true,0) then
    Raise('Не удалось изначально  вызвать контекстное меню к блоку на саб панели');
  Delay(Options.Run.Timeout div 10);  
  if NOT ClickByPopUpMenuItem(subPanel, OPERATION) then
    Raise('Не удалось изначально вызвать контекстную операцию: ' + OPERATION);
  
  picture := RenderTextToPicture(TEST_WORD, 'Arial', 13, 
    'textColor:=clBlack'); 
  if NOT FindPicture(
          doc, 
          picture,
          x, y
  ) then
  begin
    Log.Picture(picture, 'Картинка отрендереного шрифта');
    Log.Picture(subPanel, 'Картинка объекта, на котором ищется шрифт');
    
    Log.Error('Не удалось в документе найти Спецсимвол: ' + TEST_WORD);
    Raise('Не удалось в документе найти Спецсимвол: ' + TEST_WORD);    
  end;
  //Выключаем показ Спецсимволов
  if NOT MoveMouseToObject(subPanel,'blockFromAllDoc.bmp',3,3, true,0) then
    Raise('Не удалось вызвать контекстное меню к блоку на саб панели');      
  if NOT ClickByPopUpMenuItem(subPanel, OPERATION) then
    Raise('Не удалось вызвать контекстную операцию: ' + OPERATION);  
  
  if FindPicture(
          doc, 
          picture,
          x, y
  ) then
  begin
    Log.Picture(picture, 'Картинка отрендереного шрифта');
    Log.Picture(subPanel, 'Картинка объекта, на котором ищется шрифт');
    
    Log.Error('При ВЫКЛ показе Спецсимволов удалось найти Спецсимвол тексте: ' + TEST_WORD);
    Raise('При ВЫКЛ показе Спецсимволов удалось найти Спецсимвол тексте: ' + TEST_WORD);    
  end;
    
  Result := true;  
except  
  Log.Warning('Следим за тем, чтобы после работы скрипта Спецсимволы не остались Включенными');
  subPanel := GetFromEditor('САБ ПАНЕЛЬ');
  subPanel.ClickR(1,1);    
  if IsMenuItemChecked(subPanel.QCPopupMenu, OPERATION) then        
    ClickByPopUpMenuItem(subPanel, OPERATION);     
  Log.Message( 'HLTC73_4_8_1_13_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
end;


{
HLTC73.4.8: На саб-панели должны быть иконки для тех блоков, которые попадают в оглавление
HLTC73.4.8.4: Операции корреспондентов и их типизация показаны только тех видов, для которых есть корреспонденты в этом комплекте или для данного фрагмента.
HLTC73.4.8.4.1: В документе 2009 
  
  В документе 2009
 К блоку 10 есть корреспонденты:
 – «Все – Судебная практика – Мировые судьи» – в списке документ 2004;
 – «Все – Комментарии – Энциклопедии, путеводители, схемы» – в списке документ 2005;
 – «Все – Формы документов» - в списке документ 2007;

К блоку 11, вложенному в блок 10 есть корреспонденты:
 – «Все – Комментарии – Энциклопедии, путеводители, схемы» - в списке документ 2005;

К блоку 12, вложенному в блок 10 есть корреспонденты:
 – «Все – Формы документов» - в списке документ 2007.  
  }
function HLTC73_4_8_4_1_Execute (var  CurrentState: OleVariant): OleVariant;
const  
  CONTEXT_ONE='Это блок 10';   
  CONTEXT_TWO='Это блок 11';
  CONTEXT_THREE='Это блок 12';
var
  str;
  doc;
  x, y;
  subPanel;
  listOne_One, listOne_Two, listOne_Three, listTwo, listThree;
  list;
  operation;
begin
try
  //Написал в отъехавшие, так так теперь виды правовой информации другие
  listOne_One := [
    'Документ 2004. Вот тут: неразрывный пробел.'        
    ];
  listOne_Two := [    
    'Документ 2005'
    ];    
  listOne_Three := [    
    'Документ 2007 из сегмента 21 и 22 (Налоги, бухучет, предпринимательство. Москва и Архивы ГАРАНТа. Москва)'
    ];  
  listTwo := [    
    'Документ 2005'
    ];
  listThree := [    
    'Документ 2007 из сегмента 21 и 22 (Налоги, бухучет, предпринимательство. Москва и Архивы ГАРАНТа. Москва)'
    ];
        
  if NOT OpenDocByNumber(2009) then Raise('Не удалось открыть документ по Alt+N');
  subPanel := GetFromEditor('САБ ПАНЕЛЬ');  
  doc := GetFromEditor('ТЕКСТ ДОКУМЕНТА');  
  //Ищем первый сверху фрагмент   
  operation := 'Все\Судебная практика\Мировые судьи';
  if NOT GetCoordsSearchContext(doc, CONTEXT_ONE, x, y) then
    Raise('Не удалось получить координаты искомого контекста');         
  if NOT MoveMouseToObject(subPanel,'block.bmp',1,1, true,0, 0, y-20) then
    Raise('Не удалось вызвать контекстное меню к блоку на саб панели');
  if NOT ClickByPopUpMenuItem(subPanel, OPERATION) then
    Raise('Не удалось вызвать контекстную операцию: ' + OPERATION);  
  list := GetFromEditor('ВКЛАДКА "ССЫЛКИ НА ФРАГМЕНТ"');
  list := GetElementsFromTree(list);  
  if NOT CompareArray(list,listOne_One) then
  begin   
    Log.Error('СКР к фрагменту ' + CONTEXT_ONE + ' не равен эталонному');
    Raise('СКР к фрагменту ' + CONTEXT_ONE + ' не равен эталонному');
  end;
  
  operation := 'Все\Комментарии\Энциклопедии, путеводители, схемы';
  GoToMainMenu();
  if NOT OpenDocByNumber(2009) then Raise('Не удалось открыть документ по Alt+N');
  subPanel := GetFromEditor('САБ ПАНЕЛЬ');  
  doc := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT GetCoordsSearchContext(doc, CONTEXT_ONE, x, y) then
    Raise('Не удалось получить координаты искомого контекста');  
  if NOT MoveMouseToObject(subPanel,'block.bmp',1,1, true,0, 0, y-20) then
    Raise('Не удалось вызвать контекстное меню к блоку на саб панели');
  if NOT ClickByPopUpMenuItem(subPanel, OPERATION) then
    Raise('Не удалось вызвать контекстную операцию: ' + OPERATION);  
  list := GetFromEditor('ВКЛАДКА "ССЫЛКИ НА ФРАГМЕНТ"');
  list := GetElementsFromTree(list);  
  if NOT CompareArray(list,listOne_Two) then
  begin   
    Log.Error('СКР к фрагменту ' + CONTEXT_ONE + ' не равен эталонному');
    Raise('СКР к фрагменту ' + CONTEXT_ONE + ' не равен эталонному');
  end;
    
  operation := 'Все\Формы документов';
  GoToMainMenu();
  if NOT OpenDocByNumber(2009) then Raise('Не удалось открыть документ по Alt+N');
  subPanel := GetFromEditor('САБ ПАНЕЛЬ');  
  doc := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT GetCoordsSearchContext(doc, CONTEXT_ONE, x, y) then
    Raise('Не удалось получить координаты искомого контекста');
  if NOT MoveMouseToObject(subPanel,'block.bmp',1,1, true,0, 0, y-20) then
    Raise('Не удалось вызвать контекстное меню к блоку на саб панели');
  if NOT ClickByPopUpMenuItem(subPanel, OPERATION) then
    Raise('Не удалось вызвать контекстную операцию: ' + OPERATION);  
  list := GetFromEditor('ВКЛАДКА "ССЫЛКИ НА ФРАГМЕНТ"');
  list := GetElementsFromTree(list);  
  if NOT CompareArray(list,listOne_Three) then
  begin   
    Log.Error('СКР к фрагменту ' + CONTEXT_ONE + ' не равен эталонному');
    Raise('СКР к фрагменту ' + CONTEXT_ONE + ' не равен эталонному');
  end;
    
  //Ищем 2-ой фрагмент  
  operation := 'Все\Комментарии\Энциклопедии, путеводители, схемы';
  GoToMainMenu();
  if NOT OpenDocByNumber(2009) then Raise('Не удалось открыть документ по Alt+N');
  subPanel := GetFromEditor('САБ ПАНЕЛЬ');  
  doc := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT GetCoordsSearchContext(doc, CONTEXT_TWO, x, y) then
    Raise('Не удалось получить координаты искомого контекста');    
  if NOT MoveMouseToObject(subPanel,'block.bmp',1,1, true,0, 0, y-20) then
    Raise('Не удалось вызвать контекстное меню к блоку на саб панели');
  if NOT ClickByPopUpMenuItem(subPanel, OPERATION) then
    Raise('Не удалось вызвать контекстную операцию: ' + OPERATION);
  list := GetFromEditor('ВКЛАДКА "ССЫЛКИ НА ФРАГМЕНТ"');
  if NOT CompareArray(GetElementsFromTree(list),listTwo) then
  begin   
    Log.Error('СКР к фрагменту ' + CONTEXT_TWO + ' не равен эталонному');
    Raise('СКР к фрагменту ' + CONTEXT_TWO + ' не равен эталонному');
  end;  
    
  //Ищем 3-й фрагмент
  operation := 'Формы документов';
  GoToMainMenu();
  if NOT OpenDocByNumber(2009) then Raise('Не удалось открыть документ по Alt+N');
  subPanel := GetFromEditor('САБ ПАНЕЛЬ');  
  doc := GetFromEditor('ТЕКСТ ДОКУМЕНТА');    
  if NOT GetCoordsSearchContext(doc, CONTEXT_THREE, x, y) then
    Raise('Не удалось получить координаты искомого контекста');       
  if NOT MoveMouseToObject(subPanel,'block.bmp',1,1, true,0, 0, y-20) then
    Raise('Не удалось вызвать контекстное меню к блоку на саб панели');
  if NOT ClickByPopUpMenuItem(subPanel, OPERATION) then
    Raise('Не удалось вызвать контекстную операцию: ' + OPERATION);    
  list := GetFromEditor('ВКЛАДКА "ССЫЛКИ НА ФРАГМЕНТ"');
  if NOT CompareArray(GetElementsFromTree(list),listThree) then
  begin   
    Log.Error('СКР к фрагменту ' + CONTEXT_THREE + ' не равен эталонному');
    Raise('СКР к фрагменту ' + CONTEXT_THREE + ' не равен эталонному');
  end;  
    
  Result := true;  
except   
  Log.Message( 'HLTC73_4_8_4_1_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.4.9: На саб-панели в начале документа должна быть иконка, относящаяся ко всему документу(только для документов с оглавлением).
  HLTC73.4.9.1: В контекстном меню к ней содержатся следующие операции (проверить их порядок следования и корректную работу):
    HLTC73.4.9.1.1: Скопировать позицию
}
function HLTC73_4_9_1_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  PARAGRAF='2009.0';
var
  str;
  subPanel;  
begin
try
  if NOT OpenDocByNumber(2009) then Raise('Не удалось открыть документ по Alt+N');
  subPanel := GetFromEditor('САБ ПАНЕЛЬ');
  if NOT IsExists(subPanel) then Raise('Не удалось получить САБ ПАНЕЛЬ');    
  if NOT MoveMouseToObject(subPanel,'blockFromAllDoc.bmp',3,3, true,0) then
    Raise('Не удалось вызвать контекстное меню к блоку на саб панели');
  if NOT ClickByPopUpMenuItem(subPanel, 'Скопировать позицию') then 
    Raise('Не удалось вызвать контекстную операцию "Скопировать позицию"');
  str := Sys.Clipboard;  
  if NOT StringCompare(str, PARAGRAF) then
  begin
    Log.Error('После выполнения операцию "Скопировать позицию" на блоке в буфер попал не эталонный параграф: '+ str);
    Raise('После выполнения операцию "Скопировать позицию" на блоке в буфер попал не эталонный параграф: '+ str);
  end;  
  Result := true;  
except   
  Log.Message( 'HLTC73_4_9_1_1_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
end;
{
HLTC73.4.9: На саб-панели в начале документа должна быть иконка, относящаяся ко всему документу(только для документов с оглавлением).
  HLTC73.4.9.1: В контекстном меню к ней содержатся следующие операции (проверить их порядок следования и корректную работу):
    HLTC73.4.9.1.5: Установить закладку на документ...
  
  }
function HLTC73_4_9_1_5_Execute (var  CurrentState: OleVariant): OleVariant;
const
  PREF='HLTC73_4_9_1_5';
  OPERATION='Установить закладку на документ...'; 
  PARAGRAF_TEXT='Документ 2003. С неправильными блоками';
var
  str;
  subPanel;     
begin
try
  if NOT OpenDocByNumber(2003) then Raise('Не удалось открыть документ по Alt+N');
  subPanel := GetFromEditor('САБ ПАНЕЛЬ');
  if NOT IsExists(subPanel) then Raise('Не удалось получить САБ ПАНЕЛЬ');    
  if NOT MoveMouseToObject(subPanel,'blockFromAllDoc.bmp',3,3, true,0) then
    Raise('Не удалось вызвать контекстное меню к блоку на саб панели');
  if NOT ClickByPopUpMenuItem(subPanel, OPERATION) then
    Raise('Не удалось вызвать контекстную операцию: ' + OPERATION);
  if NOT SaveToFoldersExt('Мои документы', PREF,'','Сохранить', true) then
    Raise('Не удалось сохранить закладку на Фрагмент');
  GoToMainMenu;
  if NOT OpenObjectFromFolder(MY_DOCS_PATH+PREF, OpenMyDocTab) then
    Raise('Не удалось открыть сохранённую закладку: ' + MY_DOCS_PATH + PREF);      
  str := CopyToClipboard(GetFromEditor('ТЕКСТ ДОКУМЕНТА'),'STRING','Trim := true');    
  if NOT StringCompare(PARAGRAF_TEXT, str) then
  begin
    Log.Error('С закладки на фрагмент перешли на НЕ эталонный параграф: ' + str);
    Raise('С закладки на фрагмент перешли на НЕ эталонный параграф: ' + str);
  end;
  DeleteAllInMyDoc;
  Result := true;  
except
  DeleteAllInMyDoc;   
  Log.Message( 'HLTC73_4_9_1_5_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
end;



{
HLTC73.4.9: На саб-панели в начале документа должна быть иконка, относящаяся ко всему документу(только для документов с оглавлением).
  HLTC73.4.9.1: В контекстном меню к ней содержатся следующие операции (проверить их порядок следования и корректную работу):
    HLTC73.4.9.1.8: Показывать технические комментарии
  
  }
function HLTC73_4_9_1_8_Execute (var  CurrentState: OleVariant): OleVariant;
const  
  OPERATION='Показывать технические комментарии'; 
  PARAGRAF_TEXT='Документ 2009. Тип = Кодекс. Имеет корреспондентов к блокам с разными видами правовой информации.';
  PARAGRAF_TEXT_WITH_TEHNICAL_COMMENTS='<0>Документ 2009. Имеет корреспондентов к блокам с разными видами правовой информации. TextOnlyInName*Класс:*';   
var
  str;
  subPanel;
  doc;  
  i;  
begin
try
  if NOT OpenDocByNumber(2009) then Raise('Не удалось открыть документ по Alt+N');
  subPanel := GetFromEditor('САБ ПАНЕЛЬ');
  if NOT IsExists(subPanel) then Raise('Не удалось получить САБ ПАНЕЛЬ');
  subPanel.ClickR(1,1);
  if IsMenuItemChecked(subPanel.QCPopupMenu, OPERATION) then
  begin
    Sys.Keys['[Esc]'];  
    Raise('По умолчанию технические комментарии оказались ВКЛючены');
  end;
  Sys.Keys['[Esc]'];   
  doc := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  doc.SetFocus;
  Sys.Keys['^[Home]'];
  if NOT ClickNearIconOnSubInDocument(doc, 'ОПЕРАЦИИ КО ВСЕМ ДОКУМЕНТОМ', subPanel) then
    Raise('Не удалось кликнуть в докумнете возле иконки ОПЕРАЦИИ КО ВСЕМ ДОКУМЕНТОМ');
  str := CopyToClipboard(doc,'STRING','Trim := true');
  if NOT StringCompare(str+'*', PARAGRAF_TEXT) then
  begin
    Log.Error('При ВЫКЛ технических комментариях скопировался не эталонный параграф:'+ str);  
    Raise('При ВЫКЛ технических комментариях скопировался не эталонный параграф:'+ str);
  end;
  //Включаем показ технических комментариев        
  if NOT MoveMouseToObject(subPanel,'blockFromAllDoc.bmp',3,3, true,0) then
    Raise('Не удалось вызвать контекстное меню к блоку на саб панели');      
  if NOT ClickByPopUpMenuItem(subPanel, OPERATION) then
    Raise('Не удалось вызвать контекстную операцию: ' + OPERATION);  
  Sys.Keys['^[Home]'];  
  if NOT ClickNearIconOnSubInDocument(doc, 'ОПЕРАЦИИ КО ВСЕМ ДОКУМЕНТОМ', subPanel) then
    Raise('Не удалось кликнуть в докумнете возле иконки ОПЕРАЦИИ КО ВСЕМ ДОКУМЕНТОМ');
  for i := 1 to 6 do  
    Sys.Keys['![Down]'];                
  str := CopyToClipboard(doc,'','Trim := true');    
  if NOT StringCompare(PARAGRAF_TEXT_WITH_TEHNICAL_COMMENTS, str) then
  begin
    Log.Error('При ВКЛ технических комментариях скопировался не эталонный параграф:'+ str);  
    Raise('При ВКЛ технических комментариях скопировался не эталонный параграф:'+ str);
  end;
  //Отключаем показ технических комментариев
  if NOT MoveMouseToObject(subPanel,'blockFromAllDoc.bmp',3,3, true,0) then
    Raise('Не удалось вызвать контекстное меню к блоку на саб панели');
  if NOT ClickByPopUpMenuItem(subPanel, OPERATION) then
    Raise('Не удалось вызвать контекстную операцию: ' + OPERATION);
  Sys.Keys['^[Home]'];  
  if NOT ClickNearIconOnSubInDocument(doc, 'ОПЕРАЦИИ КО ВСЕМ ДОКУМЕНТОМ', subPanel) then
    Raise('Не удалось кликнуть в докумнете возле иконки ОПЕРАЦИИ КО ВСЕМ ДОКУМЕНТОМ');
  str := CopyToClipboard(doc,'STRING','Trim := true');
  if NOT StringCompare(str + '*', PARAGRAF_TEXT) then
  begin
    Log.Error('При ВЫКЛ технических комментариях скопировался не эталонный параграф:'+ str);  
    Raise('При ВЫКЛ технических комментариях скопировался не эталонный параграф:'+ str);
  end;    
  Result := true;  
except  
  Log.Warning('Следим за тем, чтобы после работы скрипта Технические комментарии не остались Включенными');
  subPanel := GetFromEditor('САБ ПАНЕЛЬ');
  subPanel.ClickR(1,1);    
  if IsMenuItemChecked(subPanel.QCPopupMenu, OPERATION) then        
    ClickByPopUpMenuItem(subPanel, OPERATION);     
  Log.Message( 'HLTC73_4_9_1_8_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
end;
{
HLTC73.4.9: На саб-панели в начале документа должна быть иконка, относящаяся ко всему документу(только для документов с оглавлением).
  HLTC73.4.9.1: В контекстном меню к ней содержатся следующие операции (проверить их порядок следования и корректную работу):
    HLTC73.4.9.1.9: Показывать метки
  
  }
function HLTC73_4_9_1_9_Execute (var  CurrentState: OleVariant): OleVariant;
const  
  OPERATION='Показывать метки';   
  TEST_WORD='0';  
var  
  subPanel;
  doc;
  picture;
  x, y;
begin
try
  if NOT OpenDocByNumber(2009) then Raise('Не удалось открыть документ по Alt+N');
  subPanel := GetFromEditor('САБ ПАНЕЛЬ');
  if NOT IsExists(subPanel) then Raise('Не удалось получить САБ ПАНЕЛЬ');
  subPanel.ClickR(1,1);
  if IsMenuItemChecked(subPanel.QCPopupMenu, OPERATION) then
  begin
    Sys.Keys['[Esc]'];  
    Raise('По умолчанию Метки оказались ВКЛючены');
  end;
  Sys.Keys['[Esc]'];   
  doc := GetFromEditor('ТЕКСТ ДОКУМЕНТА');  
  //Включаем показ Меток        
  if NOT MoveMouseToObject(subPanel,'blockFromAllDoc.bmp',3,3, true,0) then
    Raise('Не удалось вызвать контекстное меню к блоку на саб панели');      
  if NOT ClickByPopUpMenuItem(subPanel, OPERATION) then
    Raise('Не удалось вызвать контекстную операцию: ' + OPERATION);
  
  picture := RenderTextToPicture(TEST_WORD, 'MS Sans Serif', 9, 
    'textColor:=clNavy'); 
  if NOT FindPicture(
          subPanel, 
          picture,
          x, y
  ) then
  begin
    Log.Picture(picture, 'Картинка отрендереного шрифта');
    Log.Picture(subPanel, 'Картинка объекта, на котором ищется шрифт');
    
    Log.Error('Не удалось на САБ панели найти метку: ' + TEST_WORD);
    Raise('Не удалось на САБ панели найти метку: ' + TEST_WORD);    
  end;
  //Выключаем показ Меток
  if NOT MoveMouseToObject(subPanel,'blockFromAllDoc.bmp',3,3, true,0) then
    Raise('Не удалось вызвать контекстное меню к блоку на саб панели');      
  if NOT ClickByPopUpMenuItem(subPanel, OPERATION) then
    Raise('Не удалось вызвать контекстную операцию: ' + OPERATION);  
  
  if FindPicture(
          subPanel, 
          picture,
          x, y
  ) then
  begin
    Log.Picture(picture, 'Картинка отрендереного шрифта');
    Log.Picture(subPanel, 'Картинка объекта, на котором ищется шрифт');
    
    Log.Error('При ВЫКЛ показе меток на САБ панели найти нашлась иконка метка, хотя не должна: ' + TEST_WORD);
    Raise('При ВЫКЛ показе меток на САБ панели найти нашлась иконка метка, хотя не должна: ' + TEST_WORD);    
  end;
    
  Result := true;  
except  
  Log.Warning('Следим за тем, чтобы после работы скрипта Метки не остались Включенными');
  subPanel := GetFromEditor('САБ ПАНЕЛЬ');
  subPanel.ClickR(1,1);    
  if IsMenuItemChecked(subPanel.QCPopupMenu, OPERATION) then        
    ClickByPopUpMenuItem(subPanel, OPERATION);     
  Log.Message( 'HLTC73_4_9_1_9_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.4.9: На саб-панели в начале документа должна быть иконка, относящаяся ко всему документу(только для документов с оглавлением).
  HLTC73.4.9.1: В контекстном меню к ней содержатся следующие операции (проверить их порядок следования и корректную работу):
    HLTC73.4.9.1.10: Показывать блоки в тексте
  
  }
function HLTC73_4_9_1_10_Execute (var  CurrentState: OleVariant): OleVariant;
const  
  OPERATION='Показывать блоки в тексте';
var  
  subPanel;
  doc;  
  x, y;  
begin
try
  if NOT OpenDocByNumber(2009) then Raise('Не удалось открыть документ по Alt+N');
  subPanel := GetFromEditor('САБ ПАНЕЛЬ');
  if NOT IsExists(subPanel) then Raise('Не удалось получить САБ ПАНЕЛЬ');
  subPanel.ClickR(1,1);
  if IsMenuItemChecked(subPanel.QCPopupMenu, OPERATION) then    
    Raise('По умолчанию ' + OPERATION +' оказалася ВКЛючены');  
  Sys.Keys['[Esc]'];   
  doc := GetFromEditor('ТЕКСТ ДОКУМЕНТА');  
  //Включаем показ        
  if NOT MoveMouseToObject(subPanel,'blockFromAllDoc.bmp',3,3, true,0) then
    Raise('Не удалось вызвать контекстное меню к блоку на саб панели');      
  if NOT ClickByPopUpMenuItem(subPanel, OPERATION) then
    Raise('Не удалось вызвать контекстную операцию: ' + OPERATION);    
  if NOT FindPicture(doc, 'blockInText.bmp', x, y) then
  begin
    Log.Error('При ВКЛ ' + OPERATION + ' не удалось найти картинку рамки, показывающей блоки в тексте');  
    Raise('При ВКЛ ' + OPERATION + ' не удалось найти картинку рамки, показывающей блоки в тексте');
  end;
  //Отключаем показ
  if NOT MoveMouseToObject(subPanel,'blockFromAllDoc.bmp',3,3, true,0) then
    Raise('Не удалось вызвать контекстное меню к блоку на саб панели');
  if NOT ClickByPopUpMenuItem(subPanel, OPERATION) then
    Raise('Не удалось вызвать контекстную операцию: ' + OPERATION);
  if FindPicture(doc, 'blockInText.bmp', x, y) then
  begin
    Log.Error('При ВЫКЛ ' + OPERATION + ' рамка, показывающая блоки в тексте, по прежднему показывается!');  
    Raise('При ВЫКЛ ' + OPERATION + ' рамка, показывающая блоки в тексте, по прежднему показывается!');
  end;        
  Result := true;  
except  
  Log.Warning('Следим за тем, чтобы после работы скрипта ' + OPERATION + ' не остались Включенными');
  subPanel := GetFromEditor('САБ ПАНЕЛЬ');
  subPanel.ClickR(1,1);    
  if IsMenuItemChecked(subPanel.QCPopupMenu, OPERATION) then        
    ClickByPopUpMenuItem(subPanel, OPERATION);     
  Log.Message( 'HLTC73_4_9_1_10_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.4.9: На саб-панели в начале документа должна быть иконка, относящаяся ко всему документу(только для документов с оглавлением).
  HLTC73.4.9.1: В контекстном меню к ней содержатся следующие операции (проверить их порядок следования и корректную работу):
    HLTC73.4.9.1.11: Показывать спецсимволы
  
  }
function HLTC73_4_9_1_11_Execute (var  CurrentState: OleVariant): OleVariant;
const  
  OPERATION='Показывать спецсимволы';   
  TEST_WORD='¶';  
var  
  subPanel;
  doc;
  picture;
  x, y;
begin
try
  if NOT SetDefaultSettings then 
    Raise('Не удалось установить настройки по Дефолту!');
  if NOT OpenDocByNumber(2009) then Raise('Не удалось открыть документ по Alt+N');
  subPanel := GetFromEditor('САБ ПАНЕЛЬ');
  if NOT IsExists(subPanel) then Raise('Не удалось получить САБ ПАНЕЛЬ');
  subPanel.ClickR(1,1);
  if IsMenuItemChecked(subPanel.QCPopupMenu, OPERATION) then
  begin
    Sys.Keys['[Esc]'];  
    Raise('По умолчанию Cпецсимволы оказались ВКЛючены');
  end;
  Sys.Keys['[Esc]'];   
  doc := GetFromEditor('ТЕКСТ ДОКУМЕНТА');  
  //Включаем показ Спецсимволов        
  if NOT MoveMouseToObject(subPanel,'blockFromAllDoc.bmp',7,7, true,0) then  //Используем смещение 7, 7 что бы более мене попасть в центр иконки
    Raise('Не удалось вызвать контекстное меню к блоку на саб панели');      
  if NOT ClickByPopUpMenuItem(subPanel, OPERATION) then
    Raise('Не удалось вызвать контекстную операцию: ' + OPERATION);
  
  picture := RenderTextToPicture(TEST_WORD, 'Arial', 13, 
    'textColor:=clBlack'); 
  if NOT FindPicture(
          doc, 
          picture,
          x, y
  ) then
  begin
    Log.Picture(picture, 'Картинка отрендереного шрифта');
    Log.Picture(doc, 'Картинка объекта, на котором ищется шрифт');
    
    Log.Error('Не удалось в документе найти Спецсимвол: ' + TEST_WORD);
    Raise('Не удалось в документе найти Спецсимвол: ' + TEST_WORD);    
  end;
  //Выключаем показ Спецсимволов
  if NOT MoveMouseToObject(subPanel,'blockFromAllDoc.bmp',3,3, true,0) then
    Raise('Не удалось вызвать контекстное меню к блоку на саб панели');      
  if NOT ClickByPopUpMenuItem(subPanel, OPERATION) then
    Raise('Не удалось вызвать контекстную операцию: ' + OPERATION);  
  
  if FindPicture(
          doc, 
          picture,
          x, y
  ) then
  begin
    Log.Picture(picture, 'Картинка отрендереного шрифта');
    Log.Picture(subPanel, 'Картинка объекта, на котором ищется шрифт');
    
    Log.Error('При ВЫКЛ показе Спецсимволов удалось найти Спецсимвол тексте: ' + TEST_WORD);
    Raise('При ВЫКЛ показе Спецсимволов удалось найти Спецсимвол тексте: ' + TEST_WORD);    
  end;
    
  Result := true;  
except  
  Log.Warning('Следим за тем, чтобы после работы скрипта Спецсимволы не остались Включенными');
  subPanel := GetFromEditor('САБ ПАНЕЛЬ');
  subPanel.ClickR(1,1);    
  if IsMenuItemChecked(subPanel.QCPopupMenu, OPERATION) then        
    ClickByPopUpMenuItem(subPanel, OPERATION);     
  Log.Message( 'HLTC73_4_9_1_11_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.31: ААК (Актуальная аналитика/Энциклопедия решений)
  HLTC73.31.1: ААК-Содержание
  Это документ с постоянным номером: 57970000
    HLTC73.31.1.1: Соотношение сторон между левой и правой частями: 1/3 к 2/3
  
  }
function HLTC73_31_1_1_Execute (var  CurrentState: OleVariant): OleVariant;
var  
  leftPart;
  rightPart;
  mainWnd;  
  koef;
begin
try
  if NOT OpenDocByNumber(57970000) then Raise('Не удалось открыть документ по Alt+N');
  mainWnd := GetFromAAK('ФОРМА ААК');
  leftPart := GetFromAAK('ОГЛАВЛЕНИЕ ААК ЛЕВАЯ ЧАСТЬ');
  if NOT IsExists(leftPart) then Raise('Не удалось найти ОГЛАВЛЕНИЕ ААК ЛЕВАЯ ЧАСТЬ');        
  rightPart := GetFromAAK('ОГЛАВЛЕНИЕ ААК ПРАВАЯ ЧАСТЬ');
  if NOT IsExists(rightPart) then Raise('Не удалось найти ОГЛАВЛЕНИЕ ААК ПРАВАЯ ЧАСТЬ');
  koef := rightPart.Width / mainWnd.Width;  
  if NOT ( (koef > 0.64) AND (koef < 0.666) ) then
  begin
    Log.Error('Соотношение ПРАВОЙ стороны оглавления ААК не равно 2/3:' + FloatToStr(koef));
    Raise('Соотношение ПРАВОЙ стороны оглавления ААК не равно 2/3:' + FloatToStr(koef));  
  end;  
  koef := LeftPart.Width /  mainWnd.Width;
  if NOT ( (koef >0.29) AND (koef < 0.333) ) then
  begin
    Log.Error('Соотношение ЛЕВОЙ стороны оглавления ААК не равно 1/3:' + FloatToStr(koef));
    Raise('Соотношение ЛЕВОЙ стороны оглавления ААК не равно 1/3:' + FloatToStr(koef));  
  end;  
  Result := true;  
except
  Log.Message( 'HLTC73_31_1_1_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
end;
{
HLTC73.31: ААК (Актуальная аналитика/Энциклопедия решений)
  HLTC73.31.1: ААК-Содержание
  Это документ с постоянным номером: 57970000
    HLTC73.31.1.2: При входе, фокус слева
  
  }
function HLTC73_31_1_2_Execute (var  CurrentState: OleVariant): OleVariant;
var  
  leftPart;
  rightPart;
  textBefore;
  textAfter;  
begin
try
  if NOT OpenDocByNumber(57970000) then Raise('Не удалось открыть документ по Alt+N');  
  leftPart := GetFromAAK('ОГЛАВЛЕНИЕ ААК ЛЕВАЯ ЧАСТЬ');
  if NOT IsExists(leftPart) then Raise('Не удалось найти ОГЛАВЛЕНИЕ ААК ЛЕВАЯ ЧАСТЬ');        
  textBefore := GetTextLeftPanelAAK(leftPart);
  Sys.Keys('[Down]');
  textAfter := GetTextLeftPanelAAK(leftPart);
  if StringCompare(textBefore, textAfter) then
  begin
    Log.Error('После нажатия [Down] состояние левой части не изменилось, значит считаем что левая часть не была сфокусирована');
    Raise('После нажатия [Down] состояние левой части не изменилось, значит считаем что левая часть не была сфокусирована');  
  end;    
  Result := true;  
except
  Log.Message( 'HLTC73_31_1_2_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.31: ААК (Актуальная аналитика/Энциклопедия решений)
  HLTC73.31.1: ААК-Содержание
  Это документ с постоянным номером: 57970000
    HLTC73.31.1.3: Навигация по ссылкам
      HLTC73.31.1.3.1: Перемещаться по ссылкам вверх/вниз можно с помощью клавиатуры.
      Активная ссылка, при этом, подсвечивается синей плашкой.
        HLTC73.31.1.3.1.1: Стрелки вверх/влево – перемещают курсор вверх.
        HLTC73.31.1.3.1.2: Стрелки вниз/вправо – перемещают курсор вниз.
        HLTC73.31.1.3.1.3: Кнопки Home/End и Ctrl+Home/Ctrl+End – перемещают курсор на первую/последнюю ссылку документа.
  
  }
function HLTC73_31_1_3_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  ONE_LINK = 'Энциклопедия решений';
  TWO_LINK = 'Налоги и взносы';
  THREE_LINK = 'Договоры и иные сделки';
var  
  leftPart;
  ankorLink;
  x, y, y1, y2, y3;
begin
try
  if NOT OpenDocByNumber(57970000) then Raise('Не удалось открыть документ по Alt+N');  
  leftPart := GetFromAAK('ОГЛАВЛЕНИЕ ААК ЛЕВАЯ ЧАСТЬ');
  if NOT IsExists(leftPart) then Raise('Не удалось найти ОГЛАВЛЕНИЕ ААК ЛЕВАЯ ЧАСТЬ');          
  ankorLink := GetTextLeftPanelAAK(leftPart);
  if NOT StringCompare(ankorLink, ONE_LINK) then
    Raise('По умолчанию в оглавлении ААК активна не первая ссылка:' + ankorLink);
  if NOT GetTextSelectionCoords(leftPart,x,y1) then
    Raise('Не удалось найти синюю плашку в Оглавлении ААК');    
  Sys.Keys('[Down]');
  ankorLink := GetTextLeftPanelAAK(leftPart);  
  if NOT StringCompare(ankorLink, TWO_LINK) then
  begin
    Log.Error('После нажатия [Down] вторая ссылка не стала активной: ' + ankorLink);
    Raise('После нажатия [Down] вторая ссылка не стала активной: ' + ankorLink);  
  end;
  if NOT GetTextSelectionCoords(leftPart,x,y2) then
    Raise('Не удалось найти синюю плашку в Оглавлении ААК');
  if (y2 <= y1) then
  begin
    Raise('Координата Y синей плашки не увеличилась после нажатия [Down](было y1='+IntToStr(y1)+', стало y2='+IntToStr(y2)+'), считаем что плашка не переместиласт вниз');
    Log.Error('Координата Y синей плашки не увеличилась после нажатия [Down](было y1='+IntToStr(y1)+', стало y2='+IntToStr(y2)+'), считаем что плашка не переместиласт вниз');  
  end; 
  
  Sys.Keys('[Right]');
  ankorLink := GetTextLeftPanelAAK(leftPart);  
  if NOT StringCompare(ankorLink, THREE_LINK) then
  begin
    Log.Error('После нажатия [Right] третья ссылка не стала активной: ' + ankorLink);
    Raise('После нажатия [Right] третья ссылка не стала активной: ' + ankorLink);  
  end;
  if NOT GetTextSelectionCoords(leftPart,x,y3) then
    Raise('Не удалось найти синюю плашку в Оглавлении ААК');
  if (y3 <= y2) then
  begin
    Raise('Координата Y синей плашки не увеличилась после нажатия [Down](было y2='+IntToStr(y2)+', стало y3='+IntToStr(y3)+'), считаем что плашка не переместиласт вниз');
    Log.Error('Координата Y синей плашки не увеличилась после нажатия [Down](было y2='+IntToStr(y2)+', стало y3='+IntToStr(y3)+'), считаем что плашка не переместиласт вниз');  
  end; 
  
  Sys.Keys('[Up]');
  ankorLink := GetTextLeftPanelAAK(leftPart);  
  if NOT StringCompare(ankorLink, TWO_LINK) then
  begin
    Log.Error('После нажатия [Up] вторая ссылка не стала активной: ' + ankorLink);
    Raise('После нажатия [Down] вторая ссылка не стала активной: ' + ankorLink);  
  end;
  if NOT GetTextSelectionCoords(leftPart,x,y) then
    Raise('Не удалось найти синюю плашку в Оглавлении ААК');
  if NOT (y = y2) then
  begin
    Raise('Координата Y синей плашки не увеличилась после нажатия [Down](было y2='+IntToStr(y2)+', стало y='+IntToStr(y)+'), считаем что плашка не переместиласт вниз');
    Log.Error('Координата Y синей плашки не увеличилась после нажатия [Down](было y2='+IntToStr(y2)+', стало y='+IntToStr(y)+'), считаем что плашка не переместиласт вниз');  
  end;
  
  Sys.Keys('[Left]');
  ankorLink := GetTextLeftPanelAAK(leftPart);  
  if NOT StringCompare(ankorLink, ONE_LINK) then
  begin
    Log.Error('После нажатия [Left] первая ссылка не стала активной: ' + ankorLink);
    Raise('После нажатия [Left] первая ссылка не стала активной: ' + ankorLink);  
  end;
  if NOT GetTextSelectionCoords(leftPart,x,y) then
    Raise('Не удалось найти синюю плашку в Оглавлении ААК');
  if NOT (y = y1) then
  begin
    Raise('Координата Y синей плашки не увеличилась после нажатия [Down](было y1='+IntToStr(y1)+', стало y='+IntToStr(y)+'), считаем что плашка не переместиласт вниз');
    Log.Error('Координата Y синей плашки не увеличилась после нажатия [Down](было y1='+IntToStr(y1)+', стало y='+IntToStr(y)+'), считаем что плашка не переместиласт вниз');  
  end;
     
  Result := true;  
except
  Log.Message( 'HLTC73_31_1_3_1_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
end;


{
HLTC73.31: ААК (Актуальная аналитика/Энциклопедия решений)
  HLTC73.31.1: ААК-Содержание
  Это документ с постоянным номером: 57970000
    HLTC73.31.1.3: Навигация по ссылкам
      HLTC73.31.1.3.2: Каждую ссылку можно активировать мышью
      Активная ссылка, при этом, подсвечивается синей плашкой.
      HLTC73.31.1.3.3: При хождении клавиатурой, курсор(плашка) 
      должен перемещаться только между ссылками, игнорируя обычный текст.
  
  }
function HLTC73_31_1_3_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  ONE_LINK = 'Энциклопедия решений';
  TWO_LINK = 'Налоги и взносы';
  THREE_LINK = 'Договоры и иные сделки';
  LAST_LINK = 'Бюджетная сфера';
  LAST_BUT_ONE = 'Трудовые отношения, кадры';
var  
  leftPart;           
  i;
  link;
  param, addparam;
begin
try
  if NOT OpenDocByNumber(57970000) then Raise('Не удалось открыть документ по Alt+N');  
  leftPart := GetFromAAK('ОГЛАВЛЕНИЕ ААК ЛЕВАЯ ЧАСТЬ');
  for i := 1 to 7 do
  begin
    case i of 
      1: begin param := 'DOWN'; addParam := 'FROM_BOUNDS_POINT'; link:= ONE_LINK;    end; // Кликаем на 1-ой ссылке сверху 
      2: begin param := 'DOWN'; addParam := 'FROM_CURRENT_POINT'; link:= TWO_LINK;   end; // Кликаем на 2-ой ссылке сверху 
      3: begin param := 'DOWN'; addParam := 'FROM_CURRENT_POINT'; link:= THREE_LINK; end; // Кликаем на 3-й ссылке сверху
      4: begin param := 'UP'; addParam := 'FROM_CURRENT_POINT'; link:= TWO_LINK;     end; // Кликаем на 2-ой ссылке сверху
      5: begin param := 'UP'; addParam := 'FROM_CURRENT_POINT'; link:= ONE_LINK;     end; // Кликаем на 1-ой ссылке сверху
      6: begin param := 'UP'; addParam := 'FROM_BOUNDS_POINT'; link:= LAST_LINK;     end; // Кликаем на последней  ссылке
      7: begin param := 'UP'; addParam := 'FROM_CURRENT_POINT'; link:= LAST_BUT_ONE; end; // Кликаем на предпоследней ссылке     
    end;//case
    if NOT (ClickOnNextLinkInLeftPanelAAK(leftPart, param , addParam)= link) then
    begin
      Log.Message(IntToStr(i) + ': Не удалось в левом оглавлениии ААК кликнуть мышкой на ссылку: ' + link);
      Log.Picture(leftPart, 'Картинка оглавления ААК, на котором не удалось кликнуть по ссылке');
      Raise(IntToStr(i) + ': Не удалось в левом оглавлениии ААК кликнуть мышкой на ссылку: ' + link);
    end;    
  end;//for
  
  Result := true;  
except
  Log.Message( 'HLTC73_31_1_3_2_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.31: ААК (Актуальная аналитика/Энциклопедия решений)
  HLTC73.31.1: ААК-Содержание
  Это документ с постоянным номером: 57970000
    HLTC73.31.1.3: Навигация по ссылкам
      HLTC73.31.1.3.3: При хождении клавиатурой, курсор(плашка) должен перемещаться только между ссылками, игнорируя обычный текст.
  
  }
function HLTC73_31_1_3_3_Execute (var  CurrentState: OleVariant): OleVariant;
const
  LINK = 'Ссылка на блок 100 (правый)';
  TEXT = 'Ссылка на блок 100 (правый) этого же топика, в котором есть другие ссылки.';
  
var  
  leftPart; 
  x, y;
  picture; 
begin
try
  if NOT OpenDocByNumber(57970000) then Raise('Не удалось открыть документ по Alt+N');  
  leftPart := GetFromAAK('ОГЛАВЛЕНИЕ ААК ЛЕВАЯ ЧАСТЬ');
  Sys.Keys('^[End]');
  Sys.Keys('[Up]');
  Sys.Keys('[Up]');
  
 

  Result := true;  
except
  Log.Message( 'HLTC73_31_1_3_3_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
end;


{
HLTC73.32  Оценка документа
Доступна для документов типа Комментарии (ППР – Тип - Комментарии)
  HLTC73.32.1  Кнопки оценки
    HLTC73.32.1.1  Располагаются в статусной строке, слева от кнопок перехода между документами в списке. 
    Представляют собой две иконки в виде рук зелёного и красного цвета. 
    У зелёной палец поднят вверх, у красной – опущен вниз. 
    Предваряются фразой «Полезен ли документ?»
  
  }
function HLTC73_32_1_1_Execute (var  CurrentState: OleVariant): OleVariant;  
var  
  like_button, dislike_button;
  nextDoc, prevDoc;
  statusBar;
  x, y;
  x_like, x_dislike, x_inscription;   
begin
try
  if NOT OpenDocByNumber(58012) then Raise('Не удалось открыть документ по Alt+N');
  like_button := GetFromMainWindow('СТАТУСБАР: КНОПКА НРАВИТСЯ');
  if NOT IsExists(like_button) then Raise('Не удалось найти "СТАТУСБАР: КНОПКА НРАВИТСЯ"');  
  dislike_button := GetFromMainWindow('СТАТУСБАР: КНОПКА НЕ НРАВИТСЯ');
  if NOT IsExists(like_button) then Raise('Не удалось найти "СТАТУСБАР: КНОПКА НЕ НРАВИТСЯ"');
  //проверяем что Like отжата   
  if NOT FindPicture(like_button, 'like_released.bmp', x, y) then
  begin
    Log.Error('Не удалось найти иконку like_released.bmp на "СТАТУСБАР: КНОПКА НРАВИТСЯ", значит кнопка не отжата!');
    Raise;
  end;
  //проверяем что disLike отжата
  if NOT FindPicture(dislike_button, 'dislike_released.bmp', x, y) then
  begin
    Log.Error('Не удалось найти иконку dislike_released.bmp на "СТАТУСБАР: КНОПКА НЕ НРАВИТСЯ", значит кнопка не отжата!');
    Raise;
  end;
  //Проверяем, что Like находится левее DisLike
  if (like_button.Left >= dislike_button.Left) then
  begin
    Log.Error('Like по координатам НЕ находится левее disLike!');
    Raise;
  end;  
  //Проверяем, что кнопки like\dislike предваряются фразой «Полезен ли документ?»
  statusBar := GetFromMainWindow('СТАТУСБАР');  
  if NOT IsExists(statusBar) then Raise('Не удалось получить СТАТУСБАР');
  
  if NOT FindPicture(statusBar, 'inscription_like_statusbar.bmp', x_inscription, y) then
  begin
    Log.Error('Не удалось найти надпись «Полезен ли документ?» - иконку inscription_like_statusbar.bmp на "СТАТУСБАР"');
    Raise;
  end;
  if NOT FindPicture(statusBar, 'like_released.bmp', x_like, y) then
  begin
    Log.Error('Не удалось найти иконку like_released.bmp на "СТАТУСБАР"');
    Raise;
  end;
  if NOT FindPicture(statusBar, 'dislike_released.bmp', x_dislike, y) then
  begin
    Log.Error('Не удалось найти иконку dislike_released.bmp на "СТАТУСБАР"');
    Raise;
  end;
  if ((x_inscription >= x_like) OR (x_inscription >= x_like) ) then
  begin
    Log.Error('Иконка «Полезен ли документ?» (inscription_like_statusbar.bmp) НЕ левее иконок like и disLike');
    Raise;  
  end;   
  //Проверяем, что кнопки like\dislike  располагаются в статусной строке, слева от кнопок перехода между документами в списке.
  prevDoc := GetFromMainWindow('СТАТУСБАР: КНОПКА ПРЕДЫДУЩИЙ ДОКУМЕНТ В СПИСКЕ');
  if NOT IsExists(prevDoc) then Raise('Не удалось получить СТАТУСБАР: КНОПКА ПРЕДЫДУЩИЙ ДОКУМЕНТ В СПИСКЕ');
  
  nextDoc := GetFromMainWindow('СТАТУСБАР: КНОПКА СЛЕДУЮЩИЙ ДОКУМЕНТ В СПИСКЕ');
  if NOT IsExists(nextDoc) then Raise('Не удалось получить СТАТУСБАР: КНОПКА СЛЕДУЮЩИЙ ДОКУМЕНТ В СПИСКЕ');

  if ((like_button.Left >= prevDoc.Left) OR (like_button.Left >= nextDoc.Left) )then
  begin
    Log.Error('Like по координатам НЕ находится левее prevDoc и nextDoc!');
    Raise;
  end;
  if ((dislike_button.Left >= prevDoc.Left) OR (dislike_button.Left >= nextDoc.Left) )then
  begin
    Log.Error('disLike по координатам НЕ находится левее prevDoc и nextDoc!');
    Raise;
  end;
  
  Result := true;  
except
  Log.Message( 'HLTC73_32_1_1_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.32  Оценка документа
Доступна для документов типа Комментарии (ППР – Тип - Комментарии)
  HLTC73.32.1  Кнопки оценки
    HLTC73.32.1.2  Хинт к зелёной кнопке – Нравится.  
  }
function HLTC73_32_1_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  LIKE_HINT = 'Нравится';  
var  
  like_button;
  hintWnd;
  hintStr;    
begin
try
  if NOT OpenDocByNumber(58012) then Raise('Не удалось открыть документ по Alt+N');
  like_button := GetFromMainWindow('СТАТУСБАР: КНОПКА НРАВИТСЯ');
  if NOT IsExists(like_button) then Raise('Не удалось найти "СТАТУСБАР: КНОПКА НРАВИТСЯ"');  
    
  if NOT MoveMouseToObject(like_button,'like_released.bmp', 2, 2) then
  begin
      Log.Error('Не удалось навести мышку на like_released.bmp');
      Raise;
  end;
      
  hintWnd := GetFromShell('ОКНО ХИНТА');  
  if NOT IsExists(hintWnd) then Raise('Не найдено окно ХИНТА');  
  hintStr := hintWnd.wndCaption;
  if NOT StringCompare(LIKE_HINT, hintStr) then  
  begin
    Log.Error('Текст хинта не соответствует эталону Like',hintStr);
    Raise;
  end;
        
  Result := true;  
except
  Log.Message( 'HLTC73_32_1_2_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.32  Оценка документа
Доступна для документов типа Комментарии (ППР – Тип - Комментарии)
  HLTC73.32.1  Кнопки оценки
    HLTC73.32.1.3   Хинт к красной кнопке – Не нравится.  
  }
function HLTC73_32_1_3_Execute (var  CurrentState: OleVariant): OleVariant;
const
  DISLIKE_HINT = 'Не нравится';  
var  
  dislike_button;
  hintWnd;
  hintStr;    
begin
try
  if NOT OpenDocByNumber(58012) then Raise('Не удалось открыть документ по Alt+N');
  dislike_button := GetFromMainWindow('СТАТУСБАР: КНОПКА НЕ НРАВИТСЯ');
  if NOT IsExists(dislike_button) then Raise('Не удалось найти "СТАТУСБАР: КНОПКА НЕ НРАВИТСЯ"');  
    
  if NOT MoveMouseToObject(dislike_button,'dislike_released.bmp', 2, 2) then
  begin
      Log.Error('Не удалось навести мышку на dislike_released.bmp');
      Raise;
  end;
      
  hintWnd := GetFromShell('ОКНО ХИНТА');  
  if NOT IsExists(hintWnd) then Raise('Не найдено окно ХИНТА');  
  hintStr := hintWnd.wndCaption;
  if NOT StringCompare(DISLIKE_HINT, hintStr) then  
  begin
    Log.Error('Текст хинта не соответствует эталону disLike',hintStr);
    Raise;
  end;
        
  Result := true;  
except
  Log.Message( 'HLTC73_32_1_3_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
end; 

{
HLTC73.32  Оценка документа
Доступна для документов типа Комментарии (ППР – Тип - Комментарии)
  HLTC73.32.3  Наличие кнопок оценки при переходе из разных мест 
  Убедиться, что кнопки оценки есть в документе, при переходе в него (например 58010) из:
    HLTC73.32.3.1  Документа без возможности оценки (например, 10003000)  
  }
function HLTC73_32_3_1_Execute (var  CurrentState: OleVariant): OleVariant; 
      
begin
try
  if NOT OpenDocByNumber(10003000) then Raise('Не удалось открыть документ по Alt+N');
  if NOT OpenDocByNumber(58010) then Raise('Не удалось открыть документ по Alt+N');
  if NOT IsExistsLikesButtonsOnStatusbar then
  begin
    Log.Error('После перехода в документ не удалось обнаружить дефолтные кнопки Оценки документа в статусбаре');
    Raise;  
  end;        
  Result := true;  
except
  Log.Message( 'HLTC73_32_3_1_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.32  Оценка документа
Доступна для документов типа Комментарии (ППР – Тип - Комментарии)
  HLTC73.32.3  Наличие кнопок оценки при переходе из разных мест 
  Убедиться, что кнопки оценки есть в документе, при переходе в него (например 58010) из:
    HLTC73.32.3.2  КЗ  
  }
function HLTC73_32_3_2_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT GoToPPR then Raise('Не удалось получить ППР');
  if NOT OpenDocByNumber(58010) then Raise('Не удалось открыть документ по Alt+N');
  if NOT IsExistsLikesButtonsOnStatusbar then
  begin
    Log.Error('После перехода в документ не удалось обнаружить дефолтные кнопки Оценки документа в статусбаре');
    Raise;  
  end;        
  Result := true;  
except
  Log.Message( 'HLTC73_32_3_2_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.32  Оценка документа
Доступна для документов типа Комментарии (ППР – Тип - Комментарии)
  HLTC73.32.3  Наличие кнопок оценки при переходе из разных мест 
  Убедиться, что кнопки оценки есть в документе, при переходе в него (например 58010) из:
    HLTC73.32.3.3  ОМ  
  }
function HLTC73_32_3_3_Execute (var  CurrentState: OleVariant): OleVariant;
begin
try
  if NOT GoToMainMenu then Raise('Не удалось открыть ОМ');
  if NOT OpenDocByNumber(58010) then Raise('Не удалось открыть документ по Alt+N');
  if NOT IsExistsLikesButtonsOnStatusbar then
  begin
    Log.Error('После перехода в документ не удалось обнаружить дефолтные кнопки Оценки документа в статусбаре');
    Raise;  
  end;        
  Result := true;  
except
  Log.Message( 'HLTC73_32_3_3_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.32  Оценка документа
Доступна для документов типа Комментарии (ППР – Тип - Комментарии)
  HLTC73.32.3  Наличие кнопок оценки при переходе из разных мест 
  Убедиться, что кнопки оценки есть в документе, при переходе в него (например 58010) из:
    HLTC73.32.3.4  Списка  
  }
function HLTC73_32_3_4_Execute (var  CurrentState: OleVariant): OleVariant;
var
  carddata;
  list;
begin
try  
  carddata:=
    [
    	CARD_PPR, ([([
    	FD_NUMBER, ([
    		'58010']) ]),([
    	FD_INOPERATIVE_EDITION, ([
    		'Да']) ]) ]) 
    ];       
  SearchInPPR(carddata);
  list := OpenInList('СПИСОК');    
  if NOT IsExists(list) then Raise('Не удалось получить список');
  if NOT OpenDocFromList('Документ 58010', list) then 
    Raise('Не удалось открыть документ "Документ 58010" из списка');  
  if NOT IsExistsLikesButtonsOnStatusbar then
  begin
    Log.Error('После перехода в документ из списка не удалось обнаружить дефолтные кнопки Оценки документа в статусбаре');
    Raise;  
  end;        
  Result := true;
  CloseTabIfNeeded;
except
  Log.Message( 'HLTC73_32_3_4_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
  GoToMainMenuWithCloseTabsExceptOne;
end;

{
HLTC73.32  Оценка документа
Доступна для документов типа Комментарии (ППР – Тип - Комментарии)
  HLTC73.32.4  Состояние нажатой кнопки запоминается на время «жизни» этого документа. 
  Если выйти из документа, и потом открыть его вновь (не по истории) -- состояние кнопок
  оценки должно быть найтральным, т.е ни одна не нажата.  
  }
function HLTC73_32_4_Execute (var  CurrentState: OleVariant): OleVariant;
var
  like_button;
  x, y;
begin
try
  if NOT OpenDocByNumber(58010) then Raise('Не удалось открыть документ по Alt+N');  
  like_button := GetFromMainWindow('СТАТУСБАР: КНОПКА НРАВИТСЯ');
  if NOT IsExists(like_button) then Raise('Не удалось найти "СТАТУСБАР: КНОПКА НРАВИТСЯ"');
  //Лайкаем
  if NOT MoveMouseToObject(like_button,'like_released.bmp', 2, 2, true) then
  begin
      Log.Error('Не удалось навести мышку и кликнуть на Like');
      Raise;
  end;    
  //проверяем что Like нажата   
  if NOT FindPicture(like_button, 'like_pressed.bmp', x, y) then
  begin
    Log.Error('Не удалось найти иконку like_pressed.bmp на "СТАТУСБАР: КНОПКА НРАВИТСЯ", значит кнопка НЕ нажата!');
    Raise;
  end;
  //Заново открываем документ(Не по истории) 
  if NOT GoToMainMenu then Raise('Не удалось открыть ОМ');
  if NOT OpenDocByNumber(58010) then Raise('Не удалось открыть документ по Alt+N');
  //проверяем что Like НЕ нажата
  if NOT FindPicture(like_button, 'like_released.bmp', x, y) then
  begin
    Log.Error('Не удалось найти иконку like_released.bmp на "СТАТУСБАР: КНОПКА НРАВИТСЯ", значит кнопка НЕ отжата!');
    Raise;
  end;          
  Result := true;  
except
  Log.Message( 'HLTC73_32_4_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.32  Оценка документа
Доступна для документов типа Комментарии (ППР – Тип - Комментарии)
  HLTC73.32.6  При переходе по истории, оценка сохраняется. 
  Если вернуться в уже оценённый документ по истории, то поставленная оценка должна сохраниться.
    HLTC73.32.6.1  Переход из документа с возможностью оценки 
    1. Открываем документ с возможностью оценки (например 455501) 
    2. Ставим оценку 
    3. Открываем другой документ с возможностью оценки (например 421200) 
    Проставленных оценок быть не должно.
    
    4. Ставим/не ставим оценку 
    5. Возвращаемся по истории в первый документ 
    Оценка должна стоять та же, что поставили в п.2
    
    6. Переходим по истории во второй документ 
    Оценка должна стоять та же, что поставили в п.4.  
  }
function HLTC73_32_6_1_Execute (var  CurrentState: OleVariant): OleVariant;
var
  like_button,
  x, y;
begin
try
  if NOT OpenDocByNumber(455501) then Raise('Не удалось открыть документ по Alt+N');  
  like_button := GetFromMainWindow('СТАТУСБАР: КНОПКА НРАВИТСЯ');
  if NOT IsExists(like_button) then Raise('Не удалось найти "СТАТУСБАР: КНОПКА НРАВИТСЯ"');
  //Лайкаем
  if NOT MoveMouseToObject(like_button,'like_released.bmp', 2, 2, true) then
  begin
      Log.Error('Не удалось навести мышку и кликнуть на Like');
      Raise;
  end;    
  //Проверяем что Like нажата   
  if NOT FindPicture(like_button, 'like_pressed.bmp', x, y) then
  begin
    Log.Error('Не удалось найти иконку like_pressed.bmp на "СТАТУСБАР: КНОПКА НРАВИТСЯ", значит кнопка НЕ нажата!');
    Raise;
  end;
  //Открываем другой документ  
  if NOT OpenDocByNumber(421200) then Raise('Не удалось открыть документ по Alt+N');
  like_button := GetFromMainWindow('СТАТУСБАР: КНОПКА НРАВИТСЯ');
  if NOT IsExists(like_button) then Raise('Не удалось найти "СТАТУСБАР: КНОПКА НРАВИТСЯ"');
  //проверяем что по дефолту в новом документе Like НЕ нажата
  if NOT FindPicture(like_button, 'like_released.bmp', x, y) then
  begin
    Log.Error('Не удалось найти иконку like_released.bmp на "СТАТУСБАР: КНОПКА НРАВИТСЯ", значит кнопка НЕ отжата!');
    Raise;
  end;
  //Возвращаем в предыдущий документ и проверяем что оценка Like сохранилась нажатой
  if NOT GoByHistory('НАЗАД') then Raise('Не удалось перейти по истории назад');
  like_button := GetFromMainWindow('СТАТУСБАР: КНОПКА НРАВИТСЯ');
  if NOT IsExists(like_button) then Raise('Не удалось найти "СТАТУСБАР: КНОПКА НРАВИТСЯ"');
  if NOT FindPicture(like_button, 'like_pressed.bmp', x, y) then
  begin
    Log.Error('Не удалось найти иконку like_pressed.bmp на "СТАТУСБАР: КНОПКА НРАВИТСЯ", значит кнопка НЕ нажата!');
    Raise;
  end;
  //Возвращаем в следующий документ и проверяем что оценка Like сохранилась НЕ нажатой
  if NOT GoByHistory('ВПЕРЕД') then Raise('Не удалось перейти по истории вперед');
  if NOT FindPicture(like_button, 'like_released.bmp', x, y) then
  begin
    Log.Error('Не удалось найти иконку like_released.bmp на "СТАТУСБАР: КНОПКА НРАВИТСЯ", значит кнопка НЕ отжата!');
    Raise;
  end;          
  Result := true;  
except
  Log.Message( 'HLTC73_32_6_1_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
end;


{
HLTC73.32  Оценка документа
Доступна для документов типа Комментарии (ППР – Тип - Комментарии)
  HLTC73.32.6  При переходе по истории, оценка сохраняется. 
  Если вернуться в уже оценённый документ по истории, то поставленная оценка должна сохраниться.
    HLTC73.32.6.2  Переход из документа без возможности оценки 
    1. Открываем документ с возможностью оценки (например 455501) 
    2. Ставим оценку 
    3. Открываем документ без возможности оценки (например 10800200) 
    4. Возвращаемся по истории в первый документ 
    Оценка должна стоять та же, что поставили в п.2  
  }
function HLTC73_32_6_2_Execute (var  CurrentState: OleVariant): OleVariant;
var
  like_button,
  x, y;
begin
try  
  if NOT OpenDocByNumber(455501) then Raise('Не удалось открыть документ по Alt+N');  
  like_button := GetFromMainWindow('СТАТУСБАР: КНОПКА НРАВИТСЯ');
  if NOT IsExists(like_button) then Raise('Не удалось найти "СТАТУСБАР: КНОПКА НРАВИТСЯ"');
  //Лайкаем
  if NOT MoveMouseToObject(like_button,'like_released.bmp', 2, 2, true) then
  begin
      Log.Error('Не удалось навести мышку и кликнуть на Like');
      Raise;
  end;    
  //Проверяем что Like нажата   
  if NOT FindPicture(like_button, 'like_pressed.bmp', x, y) then
  begin
    Log.Error('Не удалось найти иконку like_pressed.bmp на "СТАТУСБАР: КНОПКА НРАВИТСЯ", значит кнопка НЕ нажата!');
    Raise;
  end;
  //Открываем другой документ  
  if NOT OpenDocByNumber(10800200) then Raise('Не удалось открыть документ по Alt+N');  
  //Возвращаем в предыдущий документ и проверяем что оценка Like сохранилась нажатой
  if NOT GoByHistory('НАЗАД') then Raise('Не удалось перейти по истории назад');
  like_button := GetFromMainWindow('СТАТУСБАР: КНОПКА НРАВИТСЯ');
  if NOT IsExists(like_button) then Raise('Не удалось найти "СТАТУСБАР: КНОПКА НРАВИТСЯ"');
  if NOT FindPicture(like_button, 'like_pressed.bmp', x, y) then
  begin
    Log.Error('Не удалось найти иконку like_pressed.bmp на "СТАТУСБАР: КНОПКА НРАВИТСЯ", значит кнопка НЕ нажата!');
    Raise;
  end;            
  Result := true;  
except
  Log.Message( 'HLTC73_32_6_2_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
end;


{
HLTC73.32  Оценка документа
Доступна для документов типа Комментарии (ППР – Тип - Комментарии)
  HLTC73.32.7  Записи в логе
    HLTC73.32.7.1  При нажатии кнопки «Нравится», в лог пишется: 
    -LM_GARANT: LIKE [логин пользователя][номер документа]\[1]  
  }
function HLTC73_32_7_1_Execute (var  CurrentState: OleVariant): OleVariant;
const  
  LOGIN = 'HLTC73_32_7_1'; 
  DOC_NUM = '158010';
var
  str_in_log;
  count, paswd;
  like_button;
  x, y;
begin
try
  str_in_log := '-LM_GARANT: LIKE [' + LOGIN + '][' + DOC_NUM + '][1]';
  
  count := 5;
  paswd := LOGIN;
  RestartF1Shell(count, Options.Run.Timeout div 6, LOGIN, paswd);
   
  if NOT OpenDocByNumber(DOC_NUM, false, false) then Raise('Не удалось открыть документ по Alt+N');
  //Проверяем, что в N последних строках лога нет записи
  if IsStringIncludeInLogByNumber(str_in_log, 10) then
  begin  
    Log.Error('В логе есть запись о лайке -LM_GARANT: LIKE, хотя лайка еще не было!');
    Raise;  
  end;     
  //Лайкаем   
  like_button := GetFromMainWindow('СТАТУСБАР: КНОПКА НРАВИТСЯ');
  if NOT IsExists(like_button) then Raise('Не удалось найти "СТАТУСБАР: КНОПКА НРАВИТСЯ"');  
  if NOT MoveMouseToObject(like_button,'like_released.bmp', 2, 2, true) then
  begin
      Log.Error('Не удалось навести мышку и кликнуть на Like');
      Raise;
  end;    
  //Проверяем что Like нажата   
  if NOT FindPicture(like_button, 'like_pressed.bmp', x, y) then
  begin
    Log.Error('Не удалось найти иконку like_pressed.bmp на "СТАТУСБАР: КНОПКА НРАВИТСЯ", значит кнопка НЕ нажата!');
    Raise;
  end;
  //Проверяем что в конце логе появилась запись
  if  NOT IsStringIncludeInLogByNumber(str_in_log, 10) then
  begin  
    Log.Error('После лайка в логе НЕ Появилась соответствующая запись о лайке -LM_GARANT: LIKE');
    Raise;  
  end;
  Result := true;  
except
  Log.Message( 'HLTC73_32_7_1_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.32  Оценка документа
Доступна для документов типа Комментарии (ППР – Тип - Комментарии)
  HLTC73.32.7  Записи в логе
    HLTC73.32.7.2  При нажатии кнопки «Не нравится», в лог пишется: 
    -LM_GARANT: LIKE \[логин пользователя\]\[номер документа\]\[0\]  
  }
function HLTC73_32_7_2_Execute (var  CurrentState: OleVariant): OleVariant;
const  
  LOGIN = 'HLTC73_32_7_2'; 
  DOC_NUM = '158010';
var
  str_in_log;
  count, paswd;
  dislike_button;
  x, y;
begin
try
  str_in_log := '-LM_GARANT: LIKE [' + LOGIN + '][' + DOC_NUM + '][0]';
  
  count := 5;
  paswd := LOGIN;
  RestartF1Shell(count, Options.Run.Timeout div 6, LOGIN, paswd);
   
  if NOT OpenDocByNumber(DOC_NUM, false, false) then Raise('Не удалось открыть документ по Alt+N');
  //Проверяем, что в N последних строках лога нет записи
  if IsStringIncludeInLogByNumber(str_in_log, 10) then
  begin  
    Log.Error('В логе есть запись о лайке -LM_GARANT: LIKE, хотя лайка еще не было!');
    Raise;  
  end;     
  //Диз Лайкаем   
  disLike_button := GetFromMainWindow('СТАТУСБАР: КНОПКА НЕ НРАВИТСЯ');
  if NOT IsExists(disLike_button) then Raise('Не удалось найти "СТАТУСБАР: КНОПКА НЕ НРАВИТСЯ"');  
  if NOT MoveMouseToObject(disLike_button,'dislike_released.bmp', 2, 2, true) then
  begin
      Log.Error('Не удалось навести мышку и кликнуть на disLike');
      Raise;
  end;    
  //Проверяем что Like нажата   
  if NOT FindPicture(disLike_button, 'dislike_pressed.bmp', x, y) then
  begin
    Log.Error('Не удалось найти иконку dislike_pressed.bmp на "СТАТУСБАР: КНОПКА НЕ НРАВИТСЯ", значит кнопка НЕ нажата!');
    Raise;
  end;
  //Проверяем что в конце логе появилась запись
  if  NOT IsStringIncludeInLogByNumber(str_in_log, 10) then
  begin  
    Log.Error('После дизлайка в логе НЕ Появилась соответствующая запись о дизлайке -LM_GARANT: LIKE');
    Raise;  
  end;
  Result := true;  
except
  Log.Message( 'HLTC73_32_7_2_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC73.32  Оценка документа
Доступна для документов типа Комментарии (ППР – Тип - Комментарии)
  HLTC73.32.7  Записи в логе
    HLTC73.32.7.3  Если оценка уже произведена, кнопка нажата, то повторные нажатия на неё, не должны логироваться.
  }
function HLTC73_32_7_3_Execute (var  CurrentState: OleVariant): OleVariant;
const  
  LOGIN = 'HLTC73_32_7_3'; 
  DOC_NUM = '158010';
var
  str_in_log;
  count, paswd;
  like_button;
  x, y;
  i;
begin
try
  str_in_log := '-LM_GARANT: LIKE [' + LOGIN + '][' + DOC_NUM + '][1]';
  
  count := 5;
  paswd := LOGIN;
  RestartF1Shell(count, Options.Run.Timeout div 6, LOGIN, paswd);
   
  if NOT OpenDocByNumber(DOC_NUM, false, false) then Raise('Не удалось открыть документ по Alt+N');
  //Проверяем, что в N последних строках лога нет записи
  if IsStringIncludeInLogByNumber(str_in_log, 10) then
  begin  
    Log.Error('В логе есть запись о лайке -LM_GARANT: LIKE, хотя лайка еще не было!');
    Raise;  
  end;      
  //Лайкаем   
  like_button := GetFromMainWindow('СТАТУСБАР: КНОПКА НРАВИТСЯ');
  if NOT IsExists(like_button) then Raise('Не удалось найти "СТАТУСБАР: КНОПКА НРАВИТСЯ"');  
  if NOT MoveMouseToObject(like_button,'like_released.bmp', 2, 2, true) then
  begin
      Log.Error('Не удалось навести мышку и кликнуть на Like');
      Raise;
  end;    
  //Проверяем что Like нажата   
  if NOT FindPicture(like_button, 'like_pressed.bmp', x, y) then
  begin
    Log.Error('Не удалось найти иконку like_pressed.bmp на "СТАТУСБАР: КНОПКА НРАВИТСЯ", значит кнопка НЕ нажата!');
    Raise;
  end;
//Проверяем что в конце логе появилась запись
  if  NOT IsStringIncludeInLogByNumber(str_in_log, 10) then
  begin  
    Log.Error('После лайка в логе НЕ Появилась соответствующая запись о лайке -LM_GARANT: LIKE');
    Raise;  
  end;
  //Ждем 2 минутки, что бы в лог написось как минимум 2 строчки
   Delay(60*2000);
  //Лайкаем 3 раза уже по нажатой кнопке и проверяем что после каждого лайка в лог НЕ пишется Новое событие о лайке
   for i := 1 to 3 do
   begin
    if NOT MoveMouseToObject(like_button,'like_pressed.bmp', 2, 2, true) then
    begin
        Log.Error('Не удалось навести мышку и кликнуть на Like');
        Raise;
    end;
    //Проверяем что в конце логе не появляется запись
    if IsStringIncludeInLogByNumber(str_in_log, 3) then
    begin  
      Log.Error('После повторного лайка в логе Появилась соответствующая о лайке -LM_GARANT: LIKE, хотя не должна была!');
      Raise;  
    end;   
   end;  
   //Лайкаем уже по нажатой кнопке 3 раза и проверяем, что после каждого лайка кнопка остается нажатой
    for i := 1 to 3 do
      begin
      if NOT MoveMouseToObject(like_button,'like_pressed.bmp', 2, 2, true) then
      begin
        Log.Error('Не удалось навести мышку и кликнуть на Like');
        Raise;
      end;   
      //Проверяем что Like осталась нажата   
      if NOT FindPicture(like_button, 'like_pressed.bmp', x, y) then
      begin
        Log.Error('Не удалось найти иконку like_pressed.bmp на "СТАТУСБАР: КНОПКА НРАВИТСЯ", значит кнопка НЕ нажата!');
        Raise;
      end;
    end;
  
  Result := true; 
except
  Log.Message( 'HLTC73_32_7_3_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
end;



{
HLTC73.32  Оценка документа
Доступна для документов типа Комментарии (ППР – Тип - Комментарии)
  HLTC73.32.7  Записи в логе
    HLTC73.32.7.4  Если оценка уже произведена, её можно сменить на противоположную. 
    Делать это можно сколько угодно раз. 
    И каждая новая оценка должна попадать в лог.  
  }
function HLTC73_32_7_4_Execute (var  CurrentState: OleVariant): OleVariant;
const  
  LOGIN = 'HLTC73_32_7_4'; 
  DOC_NUM = '158010';
var
  str_like_in_log, str_disLike_in_log;
  count, paswd;
  like_button, dislike_button;
  x, y;
  i;
begin
try
  str_like_in_log := '-LM_GARANT: LIKE [' + LOGIN + '][' + DOC_NUM + '][1]';
  str_disLike_in_log := '-LM_GARANT: LIKE [' + LOGIN + '][' + DOC_NUM + '][0]';
  
  count := 5;
  paswd := LOGIN;
  RestartF1Shell(count, Options.Run.Timeout div 6, LOGIN, paswd);   
  if NOT OpenDocByNumber(DOC_NUM, false, false) then Raise('Не удалось открыть документ по Alt+N');
  
  like_button := GetFromMainWindow('СТАТУСБАР: КНОПКА НРАВИТСЯ');
  if NOT IsExists(like_button) then Raise('Не удалось найти "СТАТУСБАР: КНОПКА НРАВИТСЯ"');
  disLike_button := GetFromMainWindow('СТАТУСБАР: КНОПКА НЕ НРАВИТСЯ');
  if NOT IsExists(disLike_button) then Raise('Не удалось найти "СТАТУСБАР: КНОПКА НЕ НРАВИТСЯ"');
  for i:= 1 to 3 do
  begin  
    //Диз Лайкаем      
    if NOT MoveMouseToObject(disLike_button,'dislike_released.bmp', 2, 2, true) then
    begin
        Log.Error('Не удалось навести мышку и кликнуть на disLike');
        Raise;
    end;    
    //Проверяем что disLike нажата, а Like отжата   
    if NOT FindPicture(disLike_button, 'dislike_pressed.bmp', x, y) then
    begin
      Log.Error('Не удалось найти иконку dislike_pressed.bmp на "СТАТУСБАР: КНОПКА НЕ НРАВИТСЯ", значит кнопка НЕ нажата!');
      Raise;
    end;
    if NOT FindPicture(like_button, 'like_released.bmp', x, y) then
    begin
      Log.Error('Не удалось найти иконку like_released.bmp на "СТАТУСБАР: КНОПКА НРАВИТСЯ", значит кнопка нажата!');
      Raise;
    end;
    //Проверяем что в конце логе появилась запись о дизлайке
    if  NOT IsStringIncludeInLogByNumber(str_disLike_in_log, 10) then
    begin  
      Log.Error('После дизлайка в логе НЕ Появилась соответствующая запись о дизлайке -LM_GARANT: LIKE');
      Raise;  
    end;
    //-------------------
    //Лайкаем
    if NOT MoveMouseToObject(like_button,'like_released.bmp', 2, 2, true) then
    begin
        Log.Error('Не удалось навести мышку и кликнуть на Like');
        Raise;
    end;    
    //Проверяем что Like нажатата, а disLike отжата
    if NOT FindPicture(like_button, 'like_pressed.bmp', x, y) then
    begin
      Log.Error('Не удалось найти иконку like_pressed.bmp на "СТАТУСБАР: КНОПКА НРАВИТСЯ", значит кнопка НЕ нажата!');
      Raise;
    end;
    if NOT FindPicture(disLike_button, 'dislike_released.bmp', x, y) then
    begin
      Log.Error('Не удалось найти иконку dislike_released.bmp на "СТАТУСБАР: КНОПКА НЕ НРАВИТСЯ", значит кнопка нажата!');
      Raise;
    end;
    //Проверяем что в конце логе появилась запись о лайке
    if  NOT IsStringIncludeInLogByNumber(str_like_in_log, 10) then
    begin  
      Log.Error('После лайка в логе НЕ Появилась соответствующая запись о лайке -LM_GARANT: LIKE');
      Raise;  
    end;  
  end;  
  Result := true;  
except
  Log.Message( 'HLTC73_32_7_4_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
end;
 
/////////////////////////////////////////////////////////////////////////////////
 ///////////////////////                            /////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////
  


 
procedure RykovTest73;
var cur;
carddata;
i:integer;
begin                        
 gbl_F1ShellTabsEnabled := true; //Начиная с 7.10 появился режим работы с вкладками
 {Log.Message( HLTC73_1_4_Execute(cur));
 Log.Message( HLTC73_3_3_Execute(cur));   
 Log.Message( HLTC73_4_3_1_Execute(cur));
 Log.Message( HLTC73_4_3_2_Execute(cur));
 Log.Message( HLTC73_4_3_3_Execute(cur));      
 Log.Message( HLTC73_4_3_4_Execute(cur));    
//--26.04.2006----------------------------
  Log.Message(  HLTC73_4_4_1_Execute(cur));              
  Log.Message(  HLTC73_4_4_2_Execute(cur)); 
  Log.Message(  HLTC73_4_4_3_Execute(cur));
  Log.Message( HLTC73_4_7_Execute(cur));
  Log.Message( HLTC73_6_1_1_Execute(cur));  
  Log.Message( HLTC73_6_1_2_Execute(cur)); 
  Log.Message( HLTC73_6_1_3_Execute(cur)); 
  Log.Message( HLTC73_6_2_1_Execute(cur));     
//--27.04.2006----------------------------
  Log.Message( HLTC73_6_2_2_1_Execute(cur));    
  Log.Message( HLTC73_6_2_2_2_Execute(cur));  
  Log.Message( HLTC73_6_2_3_Execute(cur));     //Shift + Mouse
  Log.Message( HLTC73_6_5_1_Execute(cur));                                            
  Log.Message( HLTC73_6_5_2_Execute(cur));                  
  Log.Message( HLTC73_6_6_1_Execute(cur));
  Log.Message( HLTC73_6_6_2_Execute(cur));  
//--28.04.2006----------------------------
  Log.Message( HLTC73_7_1_Execute(cur));    
  Log.Message( HLTC73_7_2_Execute(cur));      
  Log.Message( HLTC73_8_1_Execute(cur));
  Log.Message( HLTC73_8_2_Execute(cur));     
  Log.Message( HLTC73_9_1_Execute(cur));     
  Log.Message( HLTC73_9_2_Execute(cur));    
  Log.Message( HLTC73_9_4_Execute(cur));
  Log.Message( HLTC73_9_5_Execute(cur));
  Log.Message(HLTC73_9_6_Execute(cur));        
  Log.Message(HLTC73_9_8_Execute(cur));  
  Log.Message(HLTC73_10_1_1_Execute(cur));
  Log.Message(HLTC73_10_1_2_Execute(cur));      
  Log.Message(HLTC73_10_2_Execute(cur));   
//--03.05.2006----------------------------
  Log.Message (HLTC73_10_1_4_Execute(cur));    //Надо доделать, что бы корректно считывался текст с балонов и сравнивался с эталонным
  Log.Message (HLTC73_11_1_1_1_Execute(cur));
  Log.Message (HLTC73_11_1_1_2_Execute(cur));    
  Log.Message (HLTC73_11_1_3_2_Execute(cur));   
  Log.Message (HLTC73_11_1_3_3_1_Execute(cur));
  Log.Message (HLTC73_11_1_3_3_2_Execute(cur)); 
  Log.Message (HLTC73_11_1_3_3_3_Execute(cur));
  Log.Message (HLTC73_11_1_3_3_4_Execute(cur));
  Log.Message (HLTC73_11_1_3_3_5_Execute(cur));
  Log.Message (HLTC73_11_1_3_3_6_Execute(cur));
//--06.05.2006----------------------------
  Log.Message (HLTC73_11_1_3_5_Execute(cur)); 
  Log.Message (HLTC73_11_1_3_6_Execute(cur));
  Log.Message (HLTC73_11_1_3_11_Execute(cur));     
 Log.Message (HLTC73_11_1_3_12_Execute(cur)); //Надо сделать ф-цию установки гиперссылки (потом записать в реквизит)  
  Log.Message (HLTC73_11_2_1_2_Execute(cur));
  Log.Message (HLTC73_11_2_1_3_Execute(cur));
  Log.Message (HLTC73_11_2_2_2_Execute(cur));
  Log.Message (HLTC73_11_2_2_3_Execute(cur));       
  Log.Message (HLTC73_11_2_4_1_Execute(cur));
  Log.Message (HLTC73_11_2_4_2_Execute(cur));  
//--11.05.2006----------------------------     
  Log.Message (HLTC73_11_2_6_1_1_Execute(cur));       
  Log.Message (HLTC73_11_2_6_3_1_Execute(cur)); //Надо посоветоваться с Сашей Д 
  Log.Message (HLTC73_11_2_6_5_Execute(cur));   
  Log.Message (HLTC73_11_2_6_6_1_Execute(cur));  
  Log.Message (HLTC73_11_2_6_9_Execute(cur));
  Log.Message (HLTC73_11_2_7_Execute(cur));    
  Log.Message (HLTC73_11_2_8_1_Execute(cur)); 
  Log.Message (HLTC73_11_2_8_2_Execute(cur));
  Log.Message (HLTC73_11_2_8_3_Execute(cur));    
//--12.05.2006----------------------------
  Log.Message (HLTC73_11_2_9_Execute(cur));  
  Log.Message (HLTC73_11_2_11_1_Execute(cur));
  Log.Message (HLTC73_11_2_11_2_Execute(cur));
  Log.Message (HLTC73_11_2_12_Execute(cur));              
  Log.Message (HLTC73_11_2_13_Execute(cur));
  Log.Message (HLTC73_11_3_1_3_Execute(cur));
  Log.Message (HLTC73_11_3_1_4_Execute(cur));
//--15.05.2006----------------------------   
  Log.Message (HLTC73_11_3_3_1_Execute(cur));
  Log.Message (HLTC73_11_3_3_3_Execute(cur)); 
  Log.Message (HLTC73_11_3_3_4_Execute(cur));
  Log.Message (HLTC73_25_5_Execute(cur));  
  Log.Message (HLTC73_11_3_6_1_Execute (cur)):  //Надо сделать, после того как заработает заполнение ППР..
  Log.Message (HLTC73_11_3_7_Execute(cur));
  Log.Message (HLTC73_11_4_1_3_Execute(cur));
  Log.Message (HLTC73_11_4_1_4_Execute(cur));
  Log.Message (HLTC73_11_4_1_5_Execute(cur)); 
  Log.Message (HLTC73_11_5_1_1_Execute(cur));    
  Log.Message (HLTC73_11_5_1_2_Execute(cur));
  Log.Message (HLTC73_11_5_1_3_Execute(cur));  
  Log.Message (HLTC73_11_5_2_Execute(cur));  
  Log.Message (HLTC73_11_5_3_Execute(cur));    
//--17.05.2006----------------------------
  Log.Message (HLTC73_12_1_1_Execute(cur)); 
  Log.Message (HLTC73_12_1_2_Execute(cur)); 
  Log.Message (HLTC73_12_1_3_Execute(cur));  
  Log.Message (HLTC73_12_3_Execute(cur));
  Log.Message (HLTC73_14_1_Execute(cur));     
//--22.05.2006----------------------------
  Log.Message (HLTC73_15_1_1_Execute(cur));    
  Log.Message (HLTC73_15_1_2_Execute(cur));
  Log.Message (HLTC73_15_1_3_Execute(cur));   
  Log.Message (HLTC73_15_1_4_Execute(cur));  
  Log.Message (HLTC73_15_1_5_Execute(cur));        
  Log.Message (HLTC73_15_1_6_Execute(cur)); 
  Log.Message (HLTC73_15_1_7_Execute(cur));    
  Log.Message (HLTC73_15_1_8_Execute(cur));
  Log.Message (HLTC73_15_1_9_Execute(cur)); 
  Log.Message (HLTC73_15_1_10_Execute(cur));
  Log.Message (HLTC73_15_1_11_Execute(cur));   
//--23.05.2006----------------------------         
  Log.Message (HLTC73_15_1_14_Execute(cur));       
  Log.Message (HLTC73_15_1_15_Execute(cur));
  Log.Message (HLTC73_15_1_16_Execute(cur));
  Log.Message (HLTC73_15_1_21_Execute(cur));
  Log.Message(HLTC73_15_2_1_Execute (cur));
  Log.Message(HLTC73_15_2_2_Execute (cur));   
  Log.Message(HLTC73_15_2_3_Execute (cur)); 
  Log.Message(HLTC73_15_2_6_Execute (cur));
  Log.Message(HLTC73_15_2_8_Execute (cur));
  Log.Message(HLTC73_15_2_9_Execute (cur));    
  Log.Message(HLTC73_15_2_10_Execute (cur));    
  Log.Message(HLTC73_15_2_10_Execute (cur));
   Log.Message(HLTC73_15_2_16_Execute (cur));       
//--24.05.2006----------------------------    
  Log.Message(HLTC73_15_4_1_Execute (cur));     
  Log.Message(HLTC73_15_4_2_Execute (cur));
  Log.Message(HLTC73_15_4_3_Execute (cur));} 
  //Log.Message(HLTC73_15_4_4_Execute (cur)); 
  {Log.Message(HLTC73_15_4_5_Execute (cur));
  Log.Message(HLTC73_15_4_6_Execute (cur));
  Log.Message(HLTC73_15_4_7_Execute (cur));   
  Log.Message(HLTC73_15_4_8_Execute (cur));
  Log.Message(HLTC73_15_4_10_Execute (cur));
  Log.Message(HLTC73_15_4_12_Execute (cur));
  Log.Message(HLTC73_15_4_13_Execute (cur)); 
  Log.Message(HLTC73_15_4_17_Execute (cur));
  Log.Message(HLTC73_15_4_18_Execute (cur));     
  Log.Message(HLTC73_15_4_19_Execute (cur));
  Log.Message(HLTC73_15_4_20_Execute (cur));     
//--25.05.2006----------------------------
  Log.Message(HLTC73_15_5_1_Execute (cur));  
  Log.Message(HLTC73_15_5_2_Execute (cur));  
  Log.Message(HLTC73_15_5_3_Execute (cur));
  Log.Message(HLTC73_15_5_4_Execute (cur));
  Log.Message(HLTC73_15_5_5_Execute (cur));
  Log.Message(HLTC73_15_5_7_Execute (cur));
  Log.Message(HLTC73_15_5_8_Execute (cur));
  Log.Message(HLTC73_15_5_9_Execute (cur));
  Log.Message(HLTC73_15_5_10_Execute (cur));   
  Log.Message(HLTC73_15_5_11_Execute (cur));
  Log.Message(HLTC73_15_5_12_Execute (cur)); 
  Log.Message(HLTC73_15_6_3_Execute (cur));
  Log.Message(HLTC73_15_6_4_Execute (cur));
  Log.Message(HLTC73_15_6_5_Execute (cur));       
//--26.05.2006----------------------------
  Log.Message(HLTC73_15_6_Execute (cur));
  Log.Message(HLTC73_18_1_5_Execute (cur));
  Log.Message(HLTC73_18_1_6_Execute (cur));
  Log.Message(HLTC73_18_1_8_Execute (cur));
  Log.Message(HLTC73_18_1_9_Execute (cur));
  Log.Message(HLTC73_18_1_10_Execute (cur)); 
  Log.Message(HLTC73_18_1_11_Execute (cur));
  Log.Message(HLTC73_18_1_13_Execute (cur));
  Log.Message(HLTC73_18_1_24_Execute (cur));  
//--2.06.2006----------------------------   
  Log.Message(HLTC73_18_1_17_Execute (cur)); 
  Log.Message(HLTC73_18_1_18_Execute (cur));    
  Log.Message(HLTC73_18_1_19_Execute (cur)); 
  Log.Message(HLTC73_18_1_25_Execute (cur));
  Log.Message(HLTC73_18_2_1_Execute (cur));     
  Log.Message(HLTC73_18_2_10_Execute (cur));
  Log.Message(HLTC73_18_3_2_Execute (cur));
  Log.Message(HLTC73_18_3_3_Execute (cur)); 
  Log.Message(HLTC73_18_3_4_Execute (cur));     
  Log.Message(HLTC73_19_2_Execute (cur));   //Ignored    
//--5.06.2006----------------------------
  Log.Message(HLTC73_19_1_Execute (cur));
  Log.Message(HLTC73_19_3_Execute (cur));
  Log.Message(HLTC73_19_4_1_Execute (cur));
  Log.Message(HLTC73_19_5_1_1_Execute (cur));
  Log.Message(HLTC73_19_5_1_2_Execute (cur)); 
  Log.Message(HLTC73_19_7_2_Execute (cur));  
  Log.Message(HLTC73_19_8_5_Execute (cur));  
  Log.Message(HLTC73_19_9_1_Execute (cur));
  Log.Message(HLTC73_19_12_1_Execute (cur));      
//--06.06.06----------------------------    
  Log.Message(HLTC73_20_3_2_Execute (cur));
  Log.Message(HLTC73_20_8_Execute (cur));
  Log.Message(HLTC73_20_9_1_Execute (cur)); 
  Log.Message(HLTC73_20_9_2_Execute (cur));  
  Log.Message(HLTC73_20_9_3_Execute (cur));
  Log.Message(HLTC73_20_9_4_Execute (cur)); 
//--07.06.06----------------------------    
  Log.Message(HLTC73_20_10_1_Execute (cur));
  Log.Message(HLTC73_20_10_2_Execute (cur));
  Log.Message(HLTC73_20_10_3_Execute (cur));}
//  Log.Message(HLTC73_20_10_4_Execute (cur));
  {Log.Message(HLTC73_20_10_5_Execute (cur));
  Log.Message(HLTC73_20_10_6_Execute (cur));
  Log.Message(HLTC73_20_10_7_Execute (cur));  
  Log.Message(HLTC73_20_11_1_Execute (cur));
  Log.Message(HLTC73_20_11_2_Execute (cur));
  Log.Message(HLTC73_20_11_3_Execute (cur));  
  Log.Message(HLTC73_20_11_4_Execute (cur));
  Log.Message(HLTC73_20_11_5_Execute (cur));
  Log.Message(HLTC73_20_11_6_Execute (cur));
  Log.Message(HLTC73_20_11_7_Execute (cur)); 
  Log.Message(HLTC73_20_12_1_Execute (cur)); 
  Log.Message(HLTC73_20_12_2_Execute (cur));
  Log.Message(HLTC73_20_12_3_Execute (cur));
  Log.Message(HLTC73_20_12_4_Execute (cur));
  Log.Message(HLTC73_20_12_5_Execute (cur));
  Log.Message(HLTC73_20_12_6_Execute (cur));
  Log.Message(HLTC73_20_12_7_Execute (cur));  
  Log.Message(HLTC73_20_13_1_Execute (cur));
  Log.Message(HLTC73_20_13_2_Execute (cur));
  Log.Message(HLTC73_20_13_3_Execute (cur));  
  Log.Message(HLTC73_20_13_4_Execute (cur));
  Log.Message(HLTC73_20_13_5_Execute(cur));  
  Log.Message(HLTC73_15_7_1_Execute (cur));
  Log.Message(HLTC73_15_8_1_Execute (cur));
  Log.Message(HLTC73_15_8_2_Execute (cur));     
  Log.Message(HLTC73_15_9_1_1_Execute (cur));
  Log.Message(HLTC73_15_9_1_2_Execute (cur));   
  Log.Message(HLTC73_16_1_5_Execute (cur));
  Log.Message(HLTC73_16_1_6_Execute (cur));
  Log.Message(HLTC73_16_1_7_Execute (cur));       
//--29.05.2006---------------------------- 
  Log.Message(HLTC73_15_9_1_3_Execute (cur));
  Log.Message(HLTC73_15_9_1_4_Execute (cur));   
  Log.Message(HLTC73_15_9_1_5_Execute (cur));
  Log.Message(HLTC73_15_9_2_Execute (cur)); 
  Log.Message(HLTC73_15_10_1_1_Execute (cur)); 
  Log.Message(HLTC73_15_10_1_2_Execute (cur));
  Log.Message(HLTC73_15_10_1_3_Execute (cur));
  Log.Message(HLTC73_15_10_1_4_Execute (cur));
  Log.Message(HLTC73_15_10_1_5_Execute (cur)); 
  Log.Message(HLTC73_15_10_2_Execute (cur));   
//--30.05.2006---------------------------- 
  Log.Message(HLTC73_16_1_8_Execute (cur));
  Log.Message(HLTC73_16_1_9_Execute (cur));
  Log.Message(HLTC73_16_1_10_Execute (cur));   
  Log.Message(HLTC73_16_1_11_Execute (cur)); 
  Log.Message(HLTC73_16_1_16_Execute (cur));
  Log.Message(HLTC73_16_1_18_Execute (cur));
  Log.Message(HLTC73_16_1_20_Execute (cur));  
  Log.Message(HLTC73_16_1_23_Execute (cur));
  Log.Message(HLTC73_16_1_24_Execute (cur));     
//--31.05.2006----------------------------  
  Log.Message(HLTC73_16_1_Execute (cur));       
  Log.Message(HLTC73_18_1_3_Execute (cur));
  Log.Message(HLTC73_18_1_5_Execute  (cur));
  Log.Message(HLTC73_20_13_6_Execute (cur));
  Log.Message(HLTC73_20_13_7_Execute (cur));
//--08.06.06----------------------------    
  Log.Message(HLTC73_21_1_Execute (cur));
  Log.Message(HLTC73_21_3_Execute (cur));
  Log.Message(HLTC73_21_4_1_Execute (cur)); 
//--08.06.06---------------------------- 
//--08.06.06----------------------------   
  Log.Message(HLTC73_21_4_2_Execute (cur));
  Log.Message(HLTC73_21_4_3_Execute (cur)); 
  Log.Message(HLTC73_21_4_4_Execute (cur)); 
  Log.Message(HLTC73_21_5_1_Execute (cur));
  Log.Message(HLTC73_21_5_2_Execute (cur));
  Log.Message(HLTC73_21_5_3_Execute (cur));
  Log.Message(HLTC73_21_6_Execute (cur));    
//--13.06.06----------------------------  
  Log.Message(HLTC73_21_7_Execute (cur));
  Log.Message(HLTC73_22_1_Execute (cur));  //запрос 460264719
  Log.Message(HLTC73_24_1_1_Execute (cur));
  Log.Message(HLTC73_24_2_1_Execute (cur));
  Log.Message(HLTC73_26_1_2_Execute (cur));
  Log.Message(HLTC73_26_1_3_Execute (cur));  
  Log.Message(HLTC73_26_2_1_1_Execute (cur));
//--16.06.06----------------------------   
  Log.Message(HLTC73_26_2_1_2_Execute (cur)); 
  Log.Message(HLTC73_26_2_1_3_Execute (cur)); 
  Log.Message(HLTC73_27_1_Execute (cur));
  Log.Message(HLTC73_27_2_Execute (cur));  
  Log.Message(HLTC73_27_3_Execute (cur));//После Ctrl+Z из Моих документов не удаляется закладка
//--21.06.06----------------------------    
  Log.Message(HLTC73_27_4_Execute (cur)); 
  Log.Message(HLTC73_28_1_Execute (cur));} 
  Log.Message(HLTC73_28_2_1_Execute (cur));
  {Log.Message(HLTC73_28_2_3_Execute (cur));                   
  Log.Message(HLTC73_28_2_5_Execute (cur)); 
  Log.Message(HLTC73_28_2_7_Execute (cur));
//--23.06.06----------------------------    
  Log.Message(HLTC73_14_2_Execute (cur));
  Log.Message(HLTC73_14_11_Execute (cur));
  Log.Message(HLTC73_14_14_Execute (cur));
  Log.Message(HLTC73_14_15_Execute (cur)); 
  Log.Message(HLTC73_14_16_Execute (cur));
//--26.06.06----------------------------   
  Log.Message(HLTC73_14_17_1_1_Execute (cur));
  Log.Message(HLTC73_14_17_2_Execute (cur));  
  Log.Message(HLTC73_14_17_3_Execute (cur));
  Log.Message(HLTC73_14_18_2_1_Execute (cur));  
  Log.Message(HLTC73_14_18_2_3_Execute (cur));
  {Log.Message(HLTC73_14_18_2_4_Execute (cur)); 
  Log.Message(HLTC73_14_20_1_1_Execute (cur));  
  Log.Message(HLTC73_14_20_1_2_Execute (cur)); 
  Log.Message(HLTC73_14_20_1_3_Execute (cur));
//--27.06.06----------------------------  
  Log.Message(HLTC73_14_21_1_Execute (cur));
  Log.Message(HLTC73_14_21_2_Execute (cur)); 
  Log.Message(HLTC73_14_22_1_1_Execute (cur));
  Log.Message(HLTC73_14_22_1_2_Execute (cur));
  Log.Message(HLTC73_14_22_2_1_Execute (cur));
  Log.Message(HLTC73_14_22_2_2_Execute (cur));
//--28.06.06----------------------------     
  Log.Message(HLTC73_14_23_1_Execute (cur));
  Log.Message(HLTC73_14_23_2_Execute (cur));
//--29.06.06----------------------------
  Log.Message(HLTC73_14_23_4_1_Execute (cur));
  Log.Message(HLTC73_14_23_5_Execute (cur)); 
  Log.Message(HLTC73_14_24_Execute (cur));
//--30.06.06-----------------------------------
  Log.Message(HLTC73_11_2_17_1_1_Execute (cur)); 
  Log.Message(HLTC73_11_2_17_1_2_Execute (cur));  
  Log.Message(HLTC73_11_2_17_3_1_Execute (cur));  
  Log.Message(HLTC73_11_2_15_1_Execute (cur));
//--4.07.06-----------------------------------
  Log.Message(HLTC73_26_2_3_Execute (cur));   
//--21.09.06----------------------------------- 
  Log.Message(HLTC73_3_4_Execute (cur));          
//--22.09.06-----------------------------------    
  Log.Message(HLTC73_3_1_Execute (cur));
  Log.Message(HLTC73_4_1_Execute (cur));
  Log.Message(HLTC73_6_7_Execute (cur));  //Доделать тройной клик
  Log.Message(HLTC73_6_8_Execute (cur));
  Log.Message(HLTC73_11_1_3_1_Execute (cur)); 
//--25.09.06-----------------------------------       
  Log.Message(HLTC73_11_2_14_2_Execute (cur));
//--26.09.06----------------------------------- 
  Log.Message(HLTC73_11_2_14_1_Execute (cur));
  Log.Message(HLTC73_11_2_14_3_2_Execute (cur));   //Проверить После исправления запроса $344130593
  Log.Message(HLTC73_11_2_14_7_Execute (cur));
  Log.Message(HLTC73_11_2_14_8_Execute (cur)); 
  Log.Message(HLTC73_11_3_6_2_1_Execute (cur));
  Log.Message(HLTC73_11_3_6_2_2_Execute (cur));
  Log.Message(HLTC73_11_3_6_3_Execute (cur));    
  Log.Message(HLTC73_11_4_1_2_Execute (cur)); 
//--03.10.06-----------------------------------
  Log.Message(HLTC73_11_2_14_4_Execute (cur));
//--04.10.06-----------------------------------
  Log.Message(HLTC73_11_2_6_6_2_Execute (cur));
  Log.Message(HLTC73_11_2_16_Execute (cur));    
//--09.10.06-----------------------------------
  Log.Message(HLTC73_25_1_1_Execute (cur));
  Log.Message(HLTC73_25_2_Execute (cur)); 
//--16.01.07-----------------------------------
  Log.Message(HLTC73_22_2_1_Execute (cur));
  Log.Message(HLTC73_22_2_2_Execute (cur)); 
  Log.Message(HLTC73_22_2_3_Execute (cur));
//--далее Все скрипты идут подряд--------------- 
   
  Log.Message(HLTC73_22_8_Execute (cur));
  Log.Message(HLTC73_19_14_1_Execute (cur));
  Log.Message(HLTC73_19_14_2_Execute (cur));
  Log.Message(HLTC73_19_14_3_Execute (cur)); 
  Log.Message(HLTC73_19_14_4_Execute (cur));    
  Log.Message(HLTC73_19_5_2_Execute (cur));
  Log.Message(HLTC73_20_14_1_Execute (cur));
  Log.Message(HLTC73_20_14_2_Execute (cur));  
  Log.Message(HLTC73_14_18_1_1_Execute (cur));  
  Log.Message(HLTC73_14_18_1_2_Execute (cur));
  Log.Message(HLTC73_14_18_1_3_Execute (cur));      
  Log.Message(HLTC73_14_18_3_1_Execute (cur));
  Log.Message(HLTC73_14_18_3_2_Execute (cur));
  Log.Message(HLTC73_14_18_3_3_Execute (cur));
  Log.Message(HLTC73_14_18_3_4_Execute (cur));
  Log.Message(HLTC73_14_18_3_5_Execute (cur));
Log.Message(HLTC73_15_3_Execute (cur));  
  Log.Message(HLTC73_10_3_1_Execute (cur));
  Log.Message(HLTC73_10_3_2_Execute (cur));
  Log.Message(HLTC73_10_3_3_Execute (cur));
  Log.Message(HLTC73_10_3_4_Execute (cur));
  Log.Message(HLTC73_14_25_1_Execute (cur));   
  Log.Message(HLTC73_14_25_3_Execute (cur)); 
  //Log.Message(HLTC73_14_25_4_Execute (cur));
  //Log.Message(HLTC73_11_7_2_Execute (cur));
  //Log.Message(HLTC73_1_9_Execute (cur));
  //Log.Message(HLTC73_30_7_Execute (cur));    
  Log.Message(HLTC73_30_8_Execute (cur));
  Log.Message(HLTC73_30_9_Execute (cur));
  Log.Message(HLTC73_30_2_Execute (cur));
  Log.Message(HLTC73_30_3_Execute (cur));  
  //Log.Message(HLTC73_30_5_Execute (cur));
  //Log.Message(HLTC73_30_10_Execute (cur));
  Log.Message(HLTC73_29_1_Execute (cur));
  Log.Message(HLTC73_29_2_Execute (cur)); 
  Log.Message(HLTC73_29_3_Execute (cur));  
  //Log.Message(HLTC73_20_9_5_1_Execute (cur));  
  Log.Message(HLTC73_20_9_5_3_Execute (cur));
  Log.Message(HLTC73_20_9_5_2_Execute (cur));
  Log.Message(HLTC73_20_9_6_2_Execute (cur));
  //Log.Message(HLTC73_20_9_5_5_Execute (cur));  
  Log.Message(HLTC73_20_9_6_4_Execute (cur)); 
  Log.Message(HLTC73_20_9_6_5_Execute (cur));  
  //Log.Message(HLTC73_4_8_1_1_Execute (cur));
  //Log.Message(HLTC73_4_8_1_2_Execute (cur));
  //Log.Message(HLTC73_4_8_1_6_Execute (cur));
  Log.Message(HLTC73_4_8_1_9_Execute (cur));  
  //Log.Message(HLTC73_4_8_1_10_Execute (cur));
  Log.Message(HLTC73_4_8_1_11_Execute (cur));
  //Log.Message(HLTC73_4_8_1_12_Execute (cur));
  Log.Message(HLTC73_4_8_1_13_Execute (cur));
  Log.Message(HLTC73_4_8_4_1_Execute (cur));
  //Log.Message(HLTC73_4_9_1_1_Execute (cur));
  Log.Message(HLTC73_4_9_1_5_Execute (cur));
  //Log.Message(HLTC73_4_9_1_8_Execute (cur));
  //Log.Message(HLTC73_4_9_1_9_Execute (cur));
  Log.Message(HLTC73_4_9_1_10_Execute (cur));
  Log.Message(HLTC73_4_9_1_11_Execute (cur));  

  Log.Message(HLTC73_31_1_1_Execute (cur));   
  //Log.Message(HLTC73_31_1_2_Execute (cur));
  //Log.Message(HLTC73_31_1_3_1_Execute (cur));
  //Log.Message(HLTC73_31_1_3_2_Execute (cur));
  //Log.Message(HLTC73_31_1_3_3_Execute (cur));
  
  //Log.Message(HLTC73_32_1_1_Execute (cur));
  //Log.Message(HLTC73_32_1_2_Execute (cur));
  //Log.Message(HLTC73_32_1_3_Execute (cur));
  //Log.Message(HLTC73_32_3_1_Execute (cur));
  //Log.Message(HLTC73_32_3_2_Execute (cur));
  //Log.Message(HLTC73_32_3_3_Execute (cur));
  //Log.Message(HLTC73_32_3_4_Execute (cur));
  //Log.Message(HLTC73_32_4_Execute (cur));
  //Log.Message(HLTC73_32_6_1_Execute (cur));
  //Log.Message(HLufTC73_32_6_2_Execute (cur));
  //Log.Message(HLTC73_32_7_1_Execute (cur));
  //Log.Message(HLTC73_32_7_2_Execute (cur));
  //Log.Message(HLTC73_32_7_3_Execute (cur));
  //Log.Message(HLTC73_32_7_4_Execute (cur));
  
 { Log.Message(HLTC77_1_1_24_25_16_Execute (cur));
  Log.Message(HLTC74_2_3_2_3_Execute (cur));
  Log.Message(HLTC77_2_1_17_2_3_Execute (cur));
  Log.Message(HLTC74_3_9_3_6_Execute (cur));
  Log.Message(HLTC77_2_1_18_2_Execute (cur));
  Log.Message(HLTC73_20_11_7_Execute (cur));
  Log.Message(HLTC72_4_1_1_Execute (cur));
  Log.Message(HLTC74_2_1_3_11_Execute (cur));
  Log.Message(HLTC76_5_1_2_2_Execute (cur)); 
  Log.Message(HLTC74_1_2_1_1_Execute (cur));
  Log.Message(HLTC73_15_1_3_Execute (cur));
  

  
  Log.Message(HLTC73_11_2_14_1_Execute (cur));
}
end;