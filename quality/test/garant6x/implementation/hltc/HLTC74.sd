//  Тест-кейсы по работе с папками
/////////////////////////////////////////////////////////////////////////////

uses States, Clicks, common, FoldersWork, DocumentWork, MenuWork, ListWork, RunPrograms, 
     SearchWork, SettingsWork, FileWork, Administrator ;

////////////////////////      Общие функции       //////////////////////////////
{
DESK: Функция для проверки 
  HLTC74.14: Backup/Restore данных пользователя
  
  Функция создаёт пользовательские настройки
  !!!Используется в паре с функцией CheckXmlBackup     
}
function MakeXmlBackup( 
  pref : string;
  var cardData : OleVariant;//кар
  var listArray : OleVariant   
) : boolean;
var
  docWnd, listWnd;
  context;
  cardDataFromList;  
begin
try
  //Создаём папки, закладки, запросы, списки, комментарии, документы на контроле, консультации...
  OpenMyDocTab;
  if NOT CreateFolderFrom (true, 'Мои документы', PREF, PREF + 'примечание') then
    Raise('Не удалось создать папку в моих документах');

  if NOT OpenDocByNumber(10003000) then Raise('Не удалось открыть документ по Alt+N');
  docWnd := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(docWnd) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  context := 'Статья 73';
  if NOT ClickOnContext(docWnd, context) then Raise('Не удалось кликнуть по искомому контексту');
  if NOT InsertComment( docWnd, 'comment' + PREF ) then Raise('Не удалось установить комментарий');
  context := 'Статья 107';
  if NOT ClickOnContext(docWnd, context) then Raise('Не удалось кликнуть по искомому контексту'); 
  if NOT SaveToFoldersExt(MY_DOCS_PATH + PREF, 'bookmark' + PREF, '') then Raise('Не удалось сохранить закладку');
  
  if NOT SetDocOnControlState(ONCONTROL_STATE_ON, 1055132) then 
    Raise('Не удалось поставить документ на контроль');
  
  if NOT FillPPRCard(carddata) then
    Raise('Не могу заполнить карточку ППР!');
  if NOT SaveToFoldersExt(MY_DOCS_PATH + PREF, 'query' + PREF, '') then Raise('Не удалось сохранить запрос');
  cardDataFromList :=
    [
    	CARD_PPR, 
      ([
        ([ FD_WORDS_IN_CAPTION,   ([ 'Конституция']) ]),        
        ([ FD_INOPERATIVE_EDITION,([ 'Да']) ])
      ])
    ];
  SearchInPPR(carddataFromList);  
  listWnd := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(listWnd) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');
  if NOT SaveToFoldersExt(MY_DOCS_PATH + PREF, 'list' + PREF, '') then Raise ('Не удалось сохранить запрос');
  listArray := GetElementsFromTree(listWnd);
                                                    
  if NOT SendConsultation (
           [
             CARD_LAW_SUPPORT, 
             ([
               ([FD_USER_NAME,        ([PREF]) ]),
               ([FD_CITY_CODE,        (['1']) ]),
               ([FD_USER_PHONE,       (['1']) ]),
               ([FD_USER_EMAIL,       ([PREF + '@garant.ru']) ]),
               ([FD_LAW_SUPPORT_TEXT, (['consulting'+PREF]) ]) 
             ])
           ]
         ) then Raise('Не удалось отправить КОНСУЛЬТАЦИЮ');
  result := true;       
except
  Log.Message('MakeXmlBackup:' + ExceptionMessage,'',pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;         
end;

{
DESK: Функция для проверки 
  HLTC74.14: Backup/Restore данных пользователя
  
  Функция проверяет, что пользовательские настройки корректно залились
  !!!Используется в паре с функцией MakeXmlBackup     
}
function CheckXmlBackup( 
  pref : string;
  cardData : OleVariant;
  listArray : OleVariant
     
) : boolean;
var
  myDocWnd, docWnd, listWnd, queryWnd;
  context;
  cardDataFromList;  
  logMsg, str;
begin
try
  logMsg := 'ПОСЛЕ ПРОЦЕДУРЫ ВОССТАНОВЛЕНИЯ НАСТРОЕК ИЗ БЭКАПА : ';
  myDocWnd := OpenMyDocTab;
  if NOT Position_Internal(myDocWnd, MY_DOCS_PATH + PREF, '\', false, 'IsPressHome:=true') then
  begin
    Log.Error(logMsg + 'папка не существует');
    Raise(logMsg + 'папка не существует');
  end;
  //
  if NOT OpenObjectFromFolder(MY_DOCS_PATH + PREF + '\bookmark' + PREF, myDocWnd) then
  begin
    Log.Error(logMsg + 'закладка не существует');
    Raise(logMsg + 'закладка не существует');
  end;
  docWnd := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(docWnd) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  str := CopyToClipBoard(docWnd, 'STRING', 'Trim:=true');
  if NOT StringCompare(str, 'Статья 107') then
  begin
    Log.Error(logMsg + 'закладка не на эталонном месте');
    Raise(logMsg + 'закладка не на эталонном месте');
  end;
  if NOT ( GetDocOnControlState(1055132) = ONCONTROL_STATE_ON ) then
  begin
    Log.Error(logMsg + 'документ не на контроле');
    Raise(logMsg + 'документ не на контроле');
  end;
  if NOT OpenObjectFromFolder('Мои комментарии\Документы*', myDocWnd) then
    Raise('Не удалось открыть : "Мои комментарии\Документы*"');
   
  if NOT OpenDocFromList('Конституция*', GetFromList('СПИСОК ДОКУМЕНТОВ')) then 
    Raise('Не удалось открыть документ с комментариями из списка');     
    
  docWnd := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(docWnd) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');  
  str := CopyToClipBoard(docWnd, 'STRING', 'Trim:=true');
  if NOT StringCompare(str, 'Статья 73') then
  begin
    Log.Error(logMsg + 'комментарий не на эталонном месте');
    Raise(logMsg + 'комментарий не на эталонном месте');    
  end;
  PressKeyWithCheck(['[Down]']);
  str := CopyToClipBoard(docWnd, 'STRING', 'Trim:=true');
  if NOT StringCompare(str, 'comment' + PREF) then
  begin
    Log.Error(logMsg + 'комментарий не на эталонном месте');
    Raise(logMsg + 'комментарий не на эталонном месте');    
  end;                                             
  if NOT OpenObjectFromFolder(MY_DOCS_PATH + PREF + '\query' + PREF, OpenMyDocTab) then
    Raise('Не удалось открыть : ' + MY_DOCS_PATH + PREF + '\query' + PREF);    
  queryWnd := GetFromPPR('КАРТОЧКА ЗАПРОСА');
  if NOT CompareQueryCardData(cardData, ExtractQueryCardData(queryWnd)) then
  begin
    Log.Error(logMsg + 'КЗ заполнена не эталонными данными');
    Raise(logMsg + 'КЗ заполнена не эталонными данными');
  end;
     
  if NOT OpenObjectFromFolder(MY_DOCS_PATH + PREF + '\list' + PREF, OpenMyDocTab) then
    Raise('Не удалось открыть : ' + MY_DOCS_PATH + PREF + '\list' + PREF);
  listWnd := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(listWnd) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');   
  if NOT CompareArray(GetElementsFromTree(listWnd), listArray) then
  begin
    Log.Error(logMsg + 'список не эталонный');
    Raise(logMsg + 'список не эталонный');
  end;
  
  if NOT ( OpenObjectFromFolder('Мои консультации\Запросы в обработке\Консультация: consulting' + PREF + '*', 
                                OpenMyDocTab) OR
           OpenObjectFromFolder('Мои консультации\Ответы\Консультация: consulting' + PREF + '*', 
                                OpenMyDocTab) ) then
  begin                             
    Log.Error(logMsg + 'консультация не существует');
    Raise(logMsg + 'консультация не существует');
  end;
  result := true;
except
  Log.Message('CheckXmlBackup:' + ExceptionMessage,'',pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

////////////////////////////////////////////////////////////////////////////////

{HLTC74.1.1: Проверить создание папки в панели навигатора «Мои документы» 
 Создать папки (используя поочередно «тулбар» и контекстное меню):
  HLTC74.1.1.1: с разными именами на одном уровне иерархии
}
function  HLTC74_1_1_1_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF='HLTC74_1_1_1 Папка_';
var 
  i: Integer;  
begin
  MenuWork.OpenMyDocTab;
  Result := FoldersWork.CreateFolderFrom (true, 'Мои документы', FOLDER_PREF+'1')
    AND FoldersWork.CreateFolderFrom (false, 'Мои документы', FOLDER_PREF+'2')
    AND FoldersWork.CreateFolderFrom (true, 'Мои документы', FOLDER_PREF+'3');
  for i := 1 to 3 do
    if NOT FoldersWork.DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF+ Utilities.IntToStr(i)) then
      Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+ Utilities.IntToStr(i)+'не удалён!'); 
  GoToMainMenu;
  current_state := ST_MAIN_MENU;
end;    
{HLTC74.1.1: Проверить создание папки в панели навигатора «Мои документы» 
 Создать папки (используя поочередно «тулбар» и контекстное меню):
  HLTC74.1.1.2: с одинаковыми именами в корневой папке и папке,
  находящейся в корневой с тем же именем:
  Мои документы \ Новая папка 1 \ Новая папка 1 
}     
function  HLTC74_1_1_2_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF='HLTC74_1_1_2 Папка_';
begin
  MenuWork.OpenMyDocTab;
  Result:=FoldersWork.CreateFolderFrom (true, 'Мои документы',FOLDER_PREF)
    AND FoldersWork.CreateFolderFrom (false, MY_DOCS_PATH+FOLDER_PREF, FOLDER_PREF);  
  if NOT FoldersWork.DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF)then
    Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');  
  GoToMainMenu;
  current_state := ST_MAIN_MENU;
end;

{HLTC74.1.1: Проверить создание папки в панели навигатора «Мои документы» 
 Создать папки (используя поочередно «тулбар» и контекстное меню):
  HLTC74.1.1.3: с одинаковым именем и одинаковыми свойствами
  (здесь и далее, св-во папки это ее имя и коментарий)
  в корне (Личные) – система должна запретить это действие.
}
function  HLTC74_1_1_3_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF='HLTC74_1_1_3';   
begin
  MenuWork.OpenMyDocTab;
  Result := FoldersWork.CreateFolderFrom (true, 'Мои документы',FOLDER_PREF, FOLDER_PREF+'примечание');
  if Result then
  begin
    Result:= NOT FoldersWork.CreateFolderFrom (false, 'Мои документы',FOLDER_PREF, FOLDER_PREF+'примечание');   
    if Result then 
      if NOT FoldersWork.DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF) then
        Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');
  end;        
  GoToMainMenu;
  current_state := ST_MAIN_MENU;    
end;
{HLTC74.1.1: Проверить создание папки в панели навигатора «Мои документы» 
 Создать папки (используя поочередно «тулбар» и контекстное меню):
  HLTC74.1.1.4: с одинаковым именем и разными свойствами 
  в корне (Личные) – система должна запретить это действие.
}
function  HLTC74_1_1_4_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF='HLTC74_1_1_4';   
begin
  MenuWork.OpenMyDocTab;
  Result := FoldersWork.CreateFolderFrom (true, 'Мои документы',FOLDER_PREF, FOLDER_PREF+'Примечание');
  if Result then
  begin
    Result:= NOT FoldersWork.CreateFolderFrom (false, 'Мои документы',FOLDER_PREF, FOLDER_PREF+'Другое примечание');   
    if Result then
      if NOT FoldersWork.DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF)then
        Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');
  end;        
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
end;
{HLTC74.1.1: Проверить создание папки в панели навигатора «Мои документы» 
 Создать папки (используя поочередно «тулбар» и контекстное меню):
  HLTC74.1.1.5: с одинаковым именем и одинаковыми свойствами
  не в корневой папке – система должна запретить это действие.
}
function  HLTC74_1_1_5_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF='HLTC74_1_1_5';  
begin 
  MenuWork.OpenMyDocTab;                 
  Result:= FoldersWork.CreateFolderFrom (true, 'Мои документы', FOLDER_PREF+'_Не корневая папка');
  if Result then
  begin   
    Result := FoldersWork.CreateFolderFrom (false,MY_DOCS_PATH+FOLDER_PREF+'_Не корневая папка',FOLDER_PREF, FOLDER_PREF+'примечание');
    if Result then
    begin
      Result:= NOT FoldersWork.CreateFolderFrom (true,MY_DOCS_PATH+FOLDER_PREF+'_Не корневая папка',FOLDER_PREF, FOLDER_PREF+'примечание');   
      if Result then 
        if NOT FoldersWork.DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF+'_Не корневая папка') then
           Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'_Не корневая папка не удалён!'); 
    end;   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
end;
{HLTC74.1.1: Проверить создание папки в панели навигатора «Мои документы» 
 Создать папки (используя поочередно «тулбар» и контекстное меню):
  HLTC74.1.1.6: с одинаковым именем и разными свойствами 
  не в корневой папке – система должна запретить это действие.
}
function  HLTC74_1_1_6_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF='HLTC74_1_1_6';  
begin 
  MenuWork.OpenMyDocTab;
  Result:= FoldersWork.CreateFolderFrom (true, 'Мои документы', FOLDER_PREF+'_Не корневая папка');
  if Result then
  begin   
    Result := FoldersWork.CreateFolderFrom (false,MY_DOCS_PATH+FOLDER_PREF+'_Не корневая папка',FOLDER_PREF, FOLDER_PREF+'примечание');
    if Result then
    begin
      Result:= NOT FoldersWork.CreateFolderFrom (true,MY_DOCS_PATH+FOLDER_PREF+'_Не корневая папка',FOLDER_PREF, FOLDER_PREF+'Другое примечание');   
      if Result then 
        if NOT FoldersWork.DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF+'_Не корневая папка') then
          Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'_Не корневая папка не удалён!'); 
    end;   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
end;

{HLTC74.1.1.7: с именем, совпадающим с именем одного из сохраненных в этой же папке
 (операция разрешена):
  HLTC74.1.1.7.1: закладкой
}
function  HLTC74_1_1_7_1_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF='HLTC74_1_1_7_1';     
var
  res: Boolean;
begin  
  Result:= DocumentWork.OpenDocByNumber(1055132); //Договор о создании созного ...
  if Result then
  begin
    Result:= FoldersWork.SimpleSaveToFolders(FOLDER_PREF);
    if Result then
    begin
      MenuWork.OpenMyDocTab;
      Result:= FoldersWork.CreateFolderFrom (true, 'Мои документы',FOLDER_PREF);
      if Result then
      begin
        if NOT FoldersWork.DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF)then
          Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');        
        if NOT FoldersWork.DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF) then
          Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!'); 
      end;
    end;
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU;
end;

{HLTC74.1.1.7: с именем, совпадающим с именем одного из сохраненных в этой же папке
 (операция разрешена):
  HLTC74.1.1.7.2: списком
!Предусловие 'КЗ ППР'
}
function  HLTC74_1_1_7_2_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF='HLTC74_1_1_7_2';
var
  w;  
begin
  Result := false;
  w:=GetListOfAllDocuments;
  if IsExists(w) then 
  begin 
    Result := FoldersWork.SimpleSaveToFolders(FOLDER_PREF);
    if Result then
    begin
      MenuWork.OpenMyDocTab;
      Result:= FoldersWork.CreateFolderFrom (true, 'Мои документы',FOLDER_PREF);
      if Result then
      begin
        if NOT FoldersWork.DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF) then       
          Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');         
        if NOT FoldersWork.DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF) then
          Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');
      end;
    end;    
  end
  else
    Log.Error('Список всех документов не получен');
  GoToMainMenu;
  current_state := ST_MAIN_MENU;    
end;

{HLTC74.1.1.7: с именем, совпадающим с именем одного из сохраненных в этой же папке
 (операция разрешена):
  HLTC74.1.1.7.3: запросом
!!!Предусловие: ППР
}
function  HLTC74_1_1_7_3_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF='HLTC74_1_1_7_3';
var 
  w;
begin
  Result := false;
  w:=GotoPPR('',true);//Возвращается объект КЗ  
  if IsExists(w) then
  begin
    Result:=FoldersWork.SimpleSaveToFolders(FOLDER_PREF);    
    if Result then
    begin
      MenuWork.OpenMyDocTab;
      Result:= FoldersWork.CreateFolderFrom (true, 'Мои документы',FOLDER_PREF);
      if Result then
      begin
        if NOT FoldersWork.DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF) then       
          Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');         
        if NOT FoldersWork.DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF) then
          Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');
      end;
    end;    
  end
  else
    Log.Error('КЗ не получена');
  GoToMainMenu;
  current_state := ST_MAIN_MENU;     
end;
{HLTC74.1.1: Проверить создание папки в панели навигатора «Мои документы» 
 Создать папки (используя поочередно «тулбар» и контекстное меню):
  HLTC74.1.1.8: на 20-ом уровне вложенности иерархии 
}
function  HLTC74_1_1_8_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_1_1_8';
var
  res: Boolean;
  i: integer;
  addPath: String;
begin
  Result := false;
  res:=false;
  addPath:='';
  MenuWork.OpenMyDocTab;
  for i:=1 to 20 do
  begin        
    result := FoldersWork.CreateFolderFrom(i mod 2 = 0,'Мои документы'+addPath,FOLDER_PREF+'_вложенность_'+inttostr(i));
    if result AND i =1 then
      res := true;
    if NOT result then    
    begin
      Log.Error('Не удалось создать папку на ' + IntToStr(i) + '-ом уровне вложенности');
      break;
    end;        
    addPath:=addPath+'\'+FOLDER_PREF+'_вложенность_'+inttostr(i);  
  end;  
  if res then
    if NOT FoldersWork.DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF+'_вложенность_1') then
      Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'вложенность_1 не удалён!');  
  GoToMainMenu;
  current_state := ST_MAIN_MENU;     
end;

{HLTC74.1.1: Проверить создание папки в панели навигатора «Мои документы» 
 Создать папки (используя поочередно «тулбар» и контекстное меню):
  HLTC74.1.1.9: с длинным именем
  (около 320-330 символов –должно быть возможно)
}
function  HLTC74_1_1_9_Execute(var  current_state: OleVariant): OleVariant;
var
  symbols: String;
  i,j: Integer;
begin
  Result := false;
  symbols:='';
  for i:=1 to 33 do                                             
    for j:=0 to 9 do 
      symbols:=symbols+inttostr(j);
  MenuWork.OpenMyDocTab;    
  Result:=FoldersWork.CreateFolderFrom (false, 'Мои документы', symbols);
  if result then
    if NOT FoldersWork.DeleteObjectFromFolder(MY_DOCS_PATH+symbols) then
      Log.Warning('Объект ' + MY_DOCS_PATH+symbols+'не удалён');  
  GoToMainMenu;
  current_state := ST_MAIN_MENU; 
end;

{HLTC74.1.1.10: проверить, что указана правильная дата создания папки
}
function HLTC74_1_1_10_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_1_1_10';
var 
  folderTree;
  date: string;
begin
  result:=false;
  folderTree:=MenuWork.OpenMyDocTab;
  FoldersWork.CreateFolderFrom (false, 'Мои документы', FOLDER_PREF);
  if Position_Internal (folderTree,MY_DOCS_PATH+FOLDER_PREF) then
  begin
    if ClickToolbarButton(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', folderTree),'Свойства')then
    begin
      date:=GetSubStr(GetFromFolderForm('ДАТА СОЗДАНИЯ',folderTree).Caption,'Дата создания: ','');//Получает дату и преобразует её формат к виду: 01.01.2006    
      result := date = Utilities.DateTimeToStr(Utilities.Date);   //сравнивается Дата создания папки и системная дата 
    end;
  end;  
  if result then
    if NOT FoldersWork.DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF) then
      Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён');  
  GoToMainMenu;
  current_state := ST_MAIN_MENU;              
end;

{HLTC74.1.1.11: по умолчанию Имя папки формируется по шаблону «Новая папка X»,
 а в комментариях добавляется слово «Папка».
}
function  HLTC74_1_1_11_Execute(var  current_state: OleVariant): OleVariant;
var  
  folderTree;
begin                                                 
  result:=false;
  folderTree:=OpenMyDocTab;  
  if ClickToolbarButton(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', folderTree),'Создать папку')then     
    result :=  (common.GetWindowText(GetFromFolderForm('ПОЛЕ "ИМЯ"',folderTree).Handle) = common.GetWindowText(folderTree.Handle))  AND
      (common.GetWindowText(GetFromFolderForm('ПОЛЕ "ПРИМЕЧАНИЕ"',folderTree).Handle) = 'Папка')
  else    
    Log.Warning('Не удалось кликнуть на кнопку "Создать папку" '); 
  if result then
    if NOT ClickToolbarButton(GetFromFolderForm('НИЖНИЙ ТУЛБАР', folderTree),'Отмена') then
      Log.Warning('Не удалось кликнуть на кнопку "Отмена"');
  GoToMainMenu;
  current_state := ST_MAIN_MENU;         
end;

{HLTC74.1.1.12: Проверить, что при создании папки
 все типизированные фильтры показа в папках сбрасываются
}

//В данный текущий момент HLTC установлено в Inactive
function  HLTC74_1_1_12_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF='HLTC74_1_1_12';
var
  folderTree;  
  comboBox; 
begin  
  result := DocumentWork.OpenDocByNumber(1055132);
  if result then
  begin
    result := SimpleSaveToFolders(FOLDER_PREF);
    if result then
    begin
      folderTree := OpenMyDocTab;        
      comboBox := GetToolbarObject(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"',folderTree),'COMBOBOX','Фильтрация элементов папок по типу');            
      result := SelectInComboBox(ComboBox,'Закладки');                                                                                                           
      if result then
      begin
        result := CreateFolderFrom(false,'Мои документы',FOLDER_PREF);
        if result then          
        begin
          if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF) then                
            Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён');                
          result := common.GetWindowText(comboBox.Handle) = 'Все объекты';
          if NOT Result then Log.Error('Значение типизированных фильтров не сбросилось на "Все объекты" ');                                                         
        end  
        else                  
          Log.Message('Папка'+FOLDER_PREF+'не создана' );                  
        if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF) then                
            Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён');  
      end
      else
      begin
        SelectInComboBox(ComboBox,'Все объекты');                                                                                                           
        Log.Warning('Значение comobox "Фильтрация папок по типу" с itemIndex 1 не является "Закладки"');
      end;  
    end;
  end;       
  GoToMainMenu;
  current_state := ST_MAIN_MENU;
END;

{HLTC74.1.2: Проверить создание папки при сохранении запроса/списка (в отдельном диалоге)
  HLTC74.1.2.1: Создать папки:
    HLTC74.1.2.1.1: с разными именами на одном уровне иерархии
 !Предусловие: ППР
}
function  HLTC74_1_2_1_1_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_1_2_1_1';
var
  folderTree;  
begin
  result := false;
  GoTOPPR;
  folderTree:=OpenSaveToFolderDialog;    
  result := 
    CreateFolderFrom(true,'Мои документы',FOLDER_PREF,'',folderTree)  AND
    CreateFolderFrom(true,'Мои документы',FOLDER_PREF+'_1','',folderTree);
  if result then
  begin
    if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF,folderTree) then
      Log.Warning('Не удалось удалить папку из отдельного диалога.') ;    
    if NOT  DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF+'_1',folderTree)then
      Log.Warning('Не удалось удалить папку из отдельного диалога.') ;
  end
  else
    Log.Error('Папка не создалась в отдельном диалоге.');
  Sys.Keys('[Esc]');
  GoToMainMenu;
  current_state := ST_MAIN_MENU; 
end;

{HLTC74.1.2: Проверить создание папки при сохранении запроса/списка (в отдельном диалоге)
  HLTC74.1.2.1: Создать папки:
    HLTC74.1.2.1.2: с одинаковыми именами в корневой папке и папке, 
    находящейся в корневой с тем же именем: Мои документы \ Новая папка 1 \ Новая папка 1
!!!Предусловие: ППИО
}
function  HLTC74_1_2_1_2_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF='HLTC74_1_2_1_2';
var
  folderTree;
begin
  result := false;
  GoTOPPIO;
  folderTree:=OpenSaveToFolderDialog;    
  result := CreateFolderFrom(true,'Мои документы',FOLDER_PREF,'',folderTree) AND
     CreateFolderFrom(true,'Мои документы'+'\'+FOLDER_PREF,FOLDER_PREF,'',folderTree);
  if result then
  begin
    if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF,folderTree) then
      Log.Warning('Не удалось удалить папку из отдельного диалога.') ;
  end
  else
    Log.Error('Папка не создалась в отдельном диалоге.');
  Sys.Keys('[Esc]');
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
end;

{HLTC74.1.2: Проверить создание папки при сохранении запроса/списка (в отдельном диалоге)
  HLTC74.1.2.1: Создать папки:
  HLTC74.1.2.1.3: с одинаковым именем и одинаковыми свойствами
  в корне (Мои документы) – система должна запретить это действие.
!!!Предусловие: ППC
}
function  HLTC74_1_2_1_3_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC74_1_2_1_3';
var
  folderTree;
begin
try
  if NOT GoTOPPS then Raise('Не удалось перейти в ППС');
  folderTree := OpenSaveToFolderDialog;    
  if NOT CreateFolderFrom(true, 'Мои документы', FOLDER_PREF, FOLDER_PREF+'_Note', folderTree) then
  begin
    Log.Error('Папка не создалась в отдельном диалоге.');
    Raise;
  end;
  if CreateFolderFrom(false,'Мои документы',FOLDER_PREF,FOLDER_PREF+'_Note', folderTree) then
  begin
    Log.Error('Папка создалась, хотя уже существует папка с т.ж. именем');
    Raise;
  end;
  Sys.Keys('[Esc]');
  if NOT DeleteAllInMyDoc then                    
    Log.Warning('Не удалось удалить все объекты из моих документов');   
  result := true;  
  GoToMainMenu;
  current_state := ST_MAIN_MENU;
except
  Log.Message( 'HLTC74_1_2_1_3_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;  
end;

{HLTC74.1.2: Проверить создание папки при сохранении запроса/списка (в отдельном диалоге)
  HLTC74.1.2.1: Создать папки:
HLTC74.1.2.1.4: с одинаковым именем и разными свойствами 
в корне (Мои документы) – система должна запретить это действие.
!!!Предусловие: Основное Меню
}
function  HLTC74_1_2_1_4_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF='HLTC74_1_2_1_4';
var
  folderTree;
begin
  result := DocumentWork.OpenDocByNumber(1055132); 
  if result then
  begin
    folderTree := OpenSaveToFolderDialog;    
    result := CreateFolderFrom(true,'Мои документы',FOLDER_PREF,FOLDER_PREF+'_Note',folderTree);
    if result then
    begin
      result := NOT CreateFolderFrom(false,'Мои документы',FOLDER_PREF,FOLDER_PREF+'_Note_1',folderTree);
      if result then 
        if NOT FoldersWork.DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF,folderTree) then
          Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');
    end
    else
      Log.Error('Папка не создалась в отдельном диалоге.');
    Sys.Keys('[Esc]');       
  end
  else
    Log.Message('Не удалось открыть документ  по Alt+N 1055132');  
  GoToMainMenu;
  current_state := ST_MAIN_MENU; 
end;

{HLTC74.1.2: Проверить создание папки при сохранении запроса/списка (в отдельном диалоге)
  HLTC74.1.2.1: Создать папки:
  HLTC74.1.2.1.5: с одинаковым именем и одинаковыми свойствами
  не в корневой папке – система должна запретить это действие.
!!!Предусловие: 'Толковый Словарь'
}
function  HLTC74_1_2_1_5_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF='HLTC74_1_2_1_5';
var
  folderTree;
begin
  result := false;
  GoToDictionary;
  folderTree := OpenSaveToFolderDialog;  
  result := CreateFolderFrom (true, 'Мои документы', FOLDER_PREF+'_Не корневая папка','',folderTree);
  if result then
  begin   
    result := CreateFolderFrom (false,MY_DOCS_PATH+FOLDER_PREF+'_Не корневая папка',FOLDER_PREF, FOLDER_PREF+'_Note',folderTree);
    if result then
    begin
      result := NOT CreateFolderFrom (true,MY_DOCS_PATH+FOLDER_PREF+'_Не корневая папка',FOLDER_PREF, FOLDER_PREF+'_Note',folderTree);   
      if result then 
        if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF+'_Не корневая папка',folderTree) then
           Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'_Не корневая папка не удалён!'); 
    end
    else   
      Log.Error('Папка не создалась в отдельном диалоге.');
  end
  else
    Log.Error('Папка не создалась в отдельном диалоге.');
  Sys.Keys('[Esc]');
  GoToMainMenu;
  current_state := ST_MAIN_MENU;     
end;

{HLTC74.1.2: Проверить создание папки при сохранении запроса/списка (в отдельном диалоге)
  HLTC74.1.2.1: Создать папки:
    HLTC74.1.2.1.6: с одинаковым именем и разными свойствами не в корневой папке
    – система должна запретить это действие.
!!!Предусловие: 'Аналитический Обзор' изменил на ППР
}
function  HLTC74_1_2_1_6_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC74_1_2_1_6';
var
  folderTree;
  path;
begin
try
  if NOT GoToPPR then Raise('Не удалось перейти в ППР');
  folderTree := OpenSaveToFolderDialog;  
  path := MY_DOCS_PATH + FOLDER_PREF + '_Не корневая папка';
  if NOT ( CreateFolderFrom (true, 'Мои документы', FOLDER_PREF+'_Не корневая папка', '', folderTree) AND 
           CreateFolderFrom (false, path, FOLDER_PREF, FOLDER_PREF+'_Note', folderTree) ) then
    Raise('Папка не создалась в отдельном диалоге.');
    
  if CreateFolderFrom (true, path, FOLDER_PREF, FOLDER_PREF+'_Note_1', folderTree) then
  begin
    Log.Error('Удалось создать папку, хотя папка с таким именем уже существует!');
    Raise;
  end;
  Sys.Keys('[Esc]');
  if NOT DeleteAllInMyDoc then                    
    Log.Warning('Не удалось удалить все объекты из моих документов');
  result := true;
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
except
  Log.Message( 'HLTC74_1_2_1_6_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;  
end;  

{HLTC74.1.2: Проверить создание папки при сохранении запроса/списка (в отдельном диалоге)
  HLTC74.1.2.1: Создать папки:
    HLTC74.1.2.1.7: с именем, совпадающим с именем одного из сохраненных
    в этой же папке элементов (операция разрешена):
      HLTC74.1.2.1.7.1: закладкой
!!!Предусловие: 'Основное меню'
} 
function  HLTC74_1_2_1_7_1_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF='HLTC74_1_2_1_7_1';
var
  folderTree;
begin
  result := DocumentWork.OpenDocByNumber(10003000); 
  if result then
  begin
    result := SimpleSaveToFolders(FOLDER_PREF);
    if result then
    begin
      folderTree := OpenSaveToFolderDialog;  
      result := CreateFolderFrom (true, 'Мои документы',FOLDER_PREF,'',folderTree);                                                                                    
      if result then
      begin
        if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF,folderTree)then
          Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');        
        if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF,folderTree) then
          Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!'); 
      end
      else
        Log.Error('Папка не создалась в отдельном диалоге.');
      Sys.Keys('[Esc]');        
    end
    else
      Log.Message('Не удалось поставить закладку');
  end
  else
    Log.Message('Не удалось открыть документ по Alt+N 10003000');
  GoToMainMenu;
  current_state := ST_MAIN_MENU;
end;

{HLTC74.1.2: Проверить создание папки при сохранении запроса/списка (в отдельном диалоге)
  HLTC74.1.2.1: Создать папки:
    HLTC74.1.2.1.7: с именем, совпадающим с именем одного из сохраненных
    в этой же папке элементов (операция разрешена):
      HLTC74.1.2.1.7.2: списком 
!!!Предусловие: 'КЗ ППР'
} 
function  HLTC74_1_2_1_7_2_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF='HLTC74_1_2_1_7_2';
var
  folderTree;
  allDoc;
begin               
  allDoc:=GetListOfAllDocuments;
  if IsExists(allDoc) then
  begin
    result := SimpleSaveToFolders(FOLDER_PREF);
    if result then
    begin
      folderTree := OpenSaveToFolderDialog;  
      result := CreateFolderFrom (true, 'Мои документы',FOLDER_PREF,'',folderTree);                                                                                    
      if result then
      begin
        if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF,folderTree)then
          Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');        
        if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF,folderTree) then
          Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!'); 
      end
      else
        Log.Error('Папка не создалась в отдельном диалоге.');
      Sys.Keys('[Esc]');        
    end
    else
      Log.Message('Не удалось поставить закладку');         
  end
  else
    Log.Message('Не удалось получить список всех документов');
  GoToMainMenu;
  current_state := ST_MAIN_MENU;
end;

{HLTC74.1.2: Проверить создание папки при сохранении запроса/списка (в отдельном диалоге)
  HLTC74.1.2.1: Создать папки:
    HLTC74.1.2.1.7: с именем, совпадающим с именем одного из сохраненных
    в этой же папке элементов (операция разрешена):
      HLTC74.1.2.1.7.3: запросом
!!!Предусловие: 'КЗ ППР'
}
function  HLTC74_1_2_1_7_3_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF='HLTC74_1_2_1_7_3';
var
  folderTree;
  ppr;
begin               
  GoToPPR;  
  result := SimpleSaveToFolders(FOLDER_PREF);
  if result then
  begin
    folderTree := OpenSaveToFolderDialog;  
    result := CreateFolderFrom (true, 'Мои документы',FOLDER_PREF,'',folderTree);                                                                                    
    if result then
    begin
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF,folderTree)then
        Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');        
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF,folderTree) then
        Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!'); 
    end
    else
      Log.Error('Папка не создалась в отдельном диалоге.');
    Sys.Keys('[Esc]');        
  end
  else
    Log.Message('Не удалось поставить закладку');           
  GoToMainMenu;
  current_state := ST_MAIN_MENU;
end;

{HLTC74.1.2: Проверить создание папки при сохранении запроса/списка (в отдельном диалоге)
  HLTC74.1.2.1: Создать папки:
    HLTC74.1.2.1.8: на 32 уровне вложенности иерархии
    (на 31 должно быть все ок, 32 – должен запрещать)
!!!Предусловие: 'КЗ ППР'
}
function  HLTC74_1_2_1_8_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_1_2_1_8';
var
  res: Boolean;
  i: integer;
  addPath: String;
  folderTree;
begin
  result := false;
  GoToPPR;
  folderTree := OpenSaveToFolderDialog; 
  res := false;
  addPath:='';
  for i:=1 to 30 do
  begin
    result := CreateFolderFrom(i mod 2 = 0,'Мои документы'+addPath,FOLDER_PREF+'_влож_'+inttostr(i),'',folderTree);
    addPath := addPath+'\'+FOLDER_PREF+'_влож_'+inttostr(i);  
    if NOT result then                                        
      break;                                                      
  end;
  if result then
  begin
    result := NOT CreateFolderFrom(true,'Мои документы'+addPath,FOLDER_PREF+'_влож_'+inttostr(i),'',folderTree);     
    if NOT result then
      Log.Error('Папка с 32-м уровнем вложенности создалась');
  end
  else    
    Log.Error('Папка не создалась');
  if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF+'_влож_1',folderTree) then
      Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'влож_1 не удалён!');  
  Sys.Keys('[Esc]');    
  GoToMainMenu;
  current_state := ST_MAIN_MENU;     
end;

{HLTC74.1.2: Проверить создание папки при сохранении запроса/списка (в отдельном диалоге)
  HLTC74.1.2.1: Создать папки:
    HLTC74.1.2.1.9: с длинным именем (более 300 символов)
!!!Предусловие: 'КЗ ППС'
}
function  HLTC74_1_2_1_9_Execute(var  current_state: OleVariant): OleVariant;
var
  symbols: String;
  i,j: Integer;
  folderTree;
begin
  result := false;
  symbols := '';
  for i:=1 to 32 do                                             
    for j:=0 to 9 do 
      symbols:=symbols+inttostr(j);     
  GoToPPS;
  folderTree := OpenSaveToFolderDialog;
  result := CreateFolderFrom (false, 'Мои документы', symbols,'',folderTree);
  if result then
  begin
    if NOT DeleteObjectFromFolder(MY_DOCS_PATH+symbols,folderTree) then
      Log.Warning('Объект ' + MY_DOCS_PATH+symbols+'не удалён');
  end    
  else
    Log.Error('Папка '+symbols+' не создана');     
  Sys.Keys('[Esc]');    
  GoToMainMenu;
  current_state := ST_MAIN_MENU; 
end;

{HLTC74.1.2.1.10: проверить, что указана правильная дата создания папки 
}
function  HLTC74_1_2_1_10_Execute(var  current_state: OleVariant): OleVariant;
var 
  folderTree;
  date: string;
begin
  result := false;
  GoToPPS;
  folderTree := OpenSaveToFolderDialog;
  if ClickToolbarButton(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', folderTree),'Создать папку')then
  begin
    date := GetSubStr(GetFromFolderForm('ДАТА СОЗДАНИЯ',folderTree).Caption,'Дата создания: ','');
    result := date = Utilities.DateTimeToStr(Utilities.Date);
  end
  else
    Log.Warning('Не удалось кликнуть по кнопке "Создать папку"');
  Sys.Keys('[Esc][Esc]');  
  GoToMainMenu;
  current_state := ST_MAIN_MENU;       
end;  

{HLTC74.1.2: Проверить создание папки при сохранении запроса/списка (в отдельном диалоге)
  HLTC74.1.2.1: Создать папки:    
      HLTC74.1.2.1.11: по умолчанию Имя папки формируется по шаблону
      «Новая папка X», а в примечании добавляется слово «Папка».
!!!Предусловие: КЗ ППИО
}
function  HLTC74_1_2_1_11_Execute(var  current_state: OleVariant): OleVariant;
var 
  folderTree; 
begin
  result := false;  
  GoToPPIO;
  folderTree := OpenSaveToFolderDialog;
  if ClickToolbarButton(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', folderTree),'Создать папку')then
  begin
    result :=  (common.GetWindowText(GetFromFolderForm('ПОЛЕ "ИМЯ"',folderTree).Handle) = common.GetWindowText(folderTree.Handle))  AND
      (common.GetWindowText(GetFromFolderForm('ПОЛЕ "ПРИМЕЧАНИЕ"',folderTree).Handle) = 'Папка');
  end
  else
    Log.Warning('Не удалось кликнуть по кнопке "Создать папку"');
  Sys.Keys('[Esc][Esc]');  
  GoToMainMenu;
  current_state := ST_MAIN_MENU ;      
end;  

{HLTC74.2: Выбор из папки
  HLTC74.2.1: Переход по закладке
    HLTC74.2.1.1: Перейти по закладке, установленной на середину документа, в то время как:
      HLTC74.2.1.1.1: просматривается начало этого же документа
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_1_1_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_2_1_1_1'; 
var
  str:string;
  folderTree;  
  document;
  resultStr;
	copy_attempts;
begin 
  result := DocumentWork.OpenDocByNumber(10003000);  
  if result then
  begin
    document:=OpenInDocument('ТЕКСТ');
    document.VScroll.Pos:=(document.VScroll.Max-document.VScroll.Min) div 2;
    PositionCursorInHomeUpperString(document);
    Delay(Options.Run.Timeout div 10);   
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;    
    end;
    str := StringReplace(str, endOfLine, '*', 1);    
    result := SimpleSaveToFolders(str);    
    if result then
    begin
      Sys.Keys('^[Home]');
      folderTree := OpenMyDocTab;
      OpenObjectFromFolder(MY_DOCS_PATH+str);     
      document:=OpenInDocument('ТЕКСТ');
      resultStr := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
      Result := StringCompare(str, resultStr);       
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ;    
end;

{HLTC74.2: Выбор из папки
  HLTC74.2.1: Переход по закладке
    HLTC74.2.1.1: Перейти по закладке, установленной на середину документа, в то время как:
HLTC74.2.1.1.2: просматривается середина этого же документа
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_1_2_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_2_1_1_2'; 
  DOC_NUM = 1055132;
var
  str:string;
  folderTree;  
  document;  
	copy_attempts;
begin
try
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  document:=OpenInDocument('ТЕКСТ');
  document.VScroll.Pos:=(document.VScroll.Max-document.VScroll.Min) div 2;
  PositionCursorInHomeUpperString(document);
  Delay(Options.Run.Timeout div 30);      
  str := CopyToClipboard(document, 'STRING', 'Trim := true');
	copy_attempts := 0;
  while (str = '') and (copy_attempts < MAX_COPY_ATTEMPTS) do
  begin
		Inc(copy_attempts);
    Sys.Keys('[Down]');
    str := CopyToClipboard(document,'STRING','Trim := true');
  end;
  str := str + FOLDER_PREF;  
  if NOT SimpleSaveToFolders(str) then Raise('Не удалось установить закладку');
  if NOT OpenObjectFromFolder(MY_DOCS_PATH + str) then Raise('Не удалось открыть объект из Моих документов');    
  document:=OpenInDocument('ТЕКСТ');    
  if NOT StringCompare( CopyToClipboard(document, 'STRING', 'Trim := true') + '*' +FOLDER_PREF , str) then
  begin
    Log.Error('Переход по закладке, установленной на средину документа, произошёл не в эталонное место');
    Raise;
  end;  
  if NOT DeleteAllInMyDoc then
    Log.Warning('Не удалось удалить все объекты из моих документов');
  result := true;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ;   
except
  Log.Message('HLTC74_2_1_1_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;  
end;

{HLTC74.2: Выбор из папки
  HLTC74.2.1: Переход по закладке
    HLTC74.2.1.1: Перейти по закладке, установленной на середину документа, в то время как:
      HLTC74.2.1.1.3: просматривается конец этого же документа
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_1_3_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_2_1_1_3'; 
var
  str:string;    
  document;  
begin
try
  if NOT OpenDocByNumber(10003000) then Raise('Не удалось открвыть документ по Alt+N');
  document:=OpenInDocument('ТЕКСТ');
  if NOT ClickOnContext(document, 'избирается на четыре года') then
    Raise('Не удалось кликнуть по искомому контексту!');       
  str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;    
  if NOT SimpleSaveToFolders(str) then Raise('Не удалось установить закладку!');
  document.VScroll.Pos:=document.VScroll.Max;  
  if NOT OpenObjectFromFolder(MY_DOCS_PATH+str) then Raise('Не открыть закладку из Моих документов!');     
  document:=OpenInDocument('ТЕКСТ');   
  if NOT StringCompare(CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF, str) then
  begin
    Log.Error('Перешли по закладке не в эталонное место!');
    Raise('Перешли по закладке не в эталонное место!');  
  end;
  DeleteAllInMyDoc;
  result := true;
except
  Log.Message( FOLDER_PREF + ': ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  DeleteAllInMyDoc;
  result := false;
  CommonExceptionHandler;
end;     
end;

{HLTC74.2.1.1: Перейти по закладке, установленной на середину документа, в то время как:
  HLTC74.2.1.1.4: открыто у этого же документа
    HLTC74.2.1.1.4.1: атрибуты
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_1_4_1_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_2_1_1_4_1'; 
var
  str:string;
  folderTree;  
  document;
	copy_attempts;
begin 
  result := DocumentWork.OpenDocByNumber(10003000);  
  if result then
  begin
    document:=OpenInDocument('ТЕКСТ');
    document.VScroll.Pos:=(document.VScroll.Max-document.VScroll.Min) div 2;
    PositionCursorInHomeUpperString(document);
    Delay(Options.Run.Timeout div 10);   
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    str := StringReplace(str, endOfLine, '*', 1);
    result := SimpleSaveToFolders(str);
    if result then
    begin
      OpenInDocument('ИНФОРМАЦИЯ О ДОКУМЕНТЕ');
      folderTree := OpenMyDocTab;
      OpenObjectFromFolder(MY_DOCS_PATH+str);   
      document:=OpenInDocument('ТЕКСТ');     
      Result := StringCompare(str, CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF); 
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ;  
end;

{HLTC74.2.1.1: Перейти по закладке, установленной на середину документа, в то время как:
  HLTC74.2.1.1.4: открыто у этого же документа
    HLTC74.2.1.1.4.2: справка
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_1_4_2_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_2_1_1_4_2'; 
var
  str:string;
  folderTree;  
  document;
  endStr;
	copy_attempts;
begin 
  result := DocumentWork.OpenDocByNumber(1055132);  
  if result then
  begin
    OpenMyDocTab; //Чтобы окно сразу сузилось
    document:=OpenInDocument('ТЕКСТ');
    document.VScroll.Pos:=(document.VScroll.Max-document.VScroll.Min) div 2;
    PositionCursorInHomeUpperString(document);
    Delay(Options.Run.Timeout div 10);   
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    result := SimpleSaveToFolders(str);
    if result then
    begin
      OpenInDocument('СПРАВКА');
      folderTree := OpenMyDocTab;
      OpenObjectFromFolder(MY_DOCS_PATH+str); 
      document:=OpenInDocument('ТЕКСТ');
      endStr := CopyToClipboard(document,'STRING','Trim := true')+'*'+FOLDER_PREF;  
      result :=  StringCompare(endStr, str);
      if NOT result then Log.Error('Скопировали не эталонную строку :"' + endStr + '", должна быть :' + str); 
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ;   
end;

{HLTC74.2.1.1: Перейти по закладке, установленной на середину документа, в то время как:
  HLTC74.2.1.1.4: открыто у этого же документа
    HLTC74.2.1.1.4.3: ССЫЛКИ ИЗ ДОКУМЕНТА
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_1_4_3_Execute(var  current_state: OleVariant): OleVariant; 
var
  str:string;
  res;    
  document;  
begin
try
  if NOT OpenDocByNumber(10003000) then Raise('Не удалось открвыть документ по Alt+N');
  document:=OpenInDocument('ТЕКСТ');
  if NOT ClickOnContext(document, 'избирается на четыре года') then
    Raise('Не удалось кликнуть по искомому контексту!');       
  str := CopyToClipboard(document,'STRING','Trim := true');    
  if NOT SimpleSaveToFolders(str) then Raise('Не удалось установить закладку!');
  if NOT IsExists (OpenInDocument('ССЫЛКИ ИЗ ДОКУМЕНТА') ) then Raise('Не удалось открыть ССЫЛКИ ИЗ ДОКУМЕНТА');
  if NOT OpenObjectFromFolder(MY_DOCS_PATH+str) then Raise('Не открыть закладку из Моих документов!');     
  document:=OpenInDocument('ТЕКСТ');
  res := CopyToClipboard(document,'STRING','Trim := true') + '*';
  if NOT StringCompare(res, str) then
  begin
    Log.Error('Перешли по закладке не в эталонное место:' + str + ' | ' + res );
    Raise('Перешли по закладке не в эталонное место!');  
  end;
  DeleteAllInMyDoc;
  result := true;
except
  Log.Message( FOLDER_PREF + ': ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  DeleteAllInMyDoc;
  result := false;
  CommonExceptionHandler;
end;     
end;
 
 

{HLTC74.2.1.1: Перейти по закладке, установленной на середину документа, в то время как:
  HLTC74.2.1.1.4: открыто у этого же документа
    HLTC74.2.1.1.4.4: ССЫЛКИ НА ДОКУМЕНТ
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_1_4_4_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_2_1_1_4_4'; 
var
  str:string;
  folderTree;  
  document;  
	copy_attempts;
begin 
  result := DocumentWork.OpenDocByNumber(10003000);  
  if result then
  begin
    document:=OpenInDocument('ТЕКСТ');
    document.VScroll.Pos:=(document.VScroll.Max-document.VScroll.Min) div 2;
    PositionCursorInHomeUpperString(document);
    Delay(Options.Run.Timeout div 10);   
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    str := StringReplace(str, endOfLine, '*', 1);
    result := SimpleSaveToFolders(str);
    if result then
    begin
      OpenInDocument('ССЫЛКИ НА ДОКУМЕНТ');
      folderTree := OpenMyDocTab;
      OpenObjectFromFolder(MY_DOCS_PATH+str);
      document:=OpenInDocument('ТЕКСТ');        
      Result := StringCompare(str, CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF); 
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ;  
end;

{HLTC74.2.1.1: Перейти по закладке, установленной на середину документа, в то время как:
  HLTC74.2.1.1.5: открыт другой документ:
    HLTC74.2.1.1.5.1: содержащий рисунки
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_1_5_1_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_2_1_1_5_1'; 
var
  str:string;
  folderTree;  
  document;  
	copy_attempts;
begin 
  result := DocumentWork.OpenDocByNumber(10003000);  
  if result then
  begin
    document:=OpenInDocument('ТЕКСТ');
    document.VScroll.Pos:=(document.VScroll.Max-document.VScroll.Min) div 2;
    PositionCursorInHomeUpperString(document);
    Delay(Options.Run.Timeout div 10);   
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;    
    str := StringReplace(str, endOfLine, '*', 1);
    result := SimpleSaveToFolders(str);
    if result then
    begin
      result := DocumentWork.OpenDocByNumber(3822469);
      if result then
      begin       
        folderTree := OpenMyDocTab;
        OpenObjectFromFolder(MY_DOCS_PATH+str);         
        document:=OpenInDocument('ТЕКСТ');
        result := StringCompare(str, CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF);
      end
      else
        Log.Warning('Не удалось открыть документ по Alt+N 3822469');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU;
end;

{HLTC74.2.1.1: Перейти по закладке, установленной на середину документа, в то время как:
  HLTC74.2.1.1.5: открыт другой документ:
    HLTC74.2.1.1.5.2: без рисунков
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_1_5_2_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_2_1_1_5_2'; 
var
  str:string;
  folderTree;  
  document;  
	copy_attempts;
begin 
  result := DocumentWork.OpenDocByNumber(10003000);  
  if result then
  begin
    document:=OpenInDocument('ТЕКСТ');
    document.VScroll.Pos:=(document.VScroll.Max-document.VScroll.Min) div 2;
    PositionCursorInHomeUpperString(document);
    Delay(Options.Run.Timeout div 10);   
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    str := StringReplace(str, endOfLine, '*', 1);
    result := SimpleSaveToFolders(str);
    if result then
    begin
      result := DocumentWork.OpenDocByNumber(1055132);
      if result then 
      begin       
        folderTree := OpenMyDocTab;
        OpenObjectFromFolder(MY_DOCS_PATH+str);  
        document:=OpenInDocument('ТЕКСТ');        
        Result := StringCompare(str, CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF); 
      end
      else
        Log.Warning('Не удалось открыть документ по Alt+N 1055132');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ; 
end;

{HLTC74.2.1.1: Перейти по закладке, установленной на середину документа, в то время как:
  HLTC74.2.1.1.5: открыт другой документ:
    HLTC74.2.1.1.5.3: атрибуты
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_1_5_3_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_2_1_1_5_3'; 
var
  str:string;
  folderTree;  
  document;  
begin
try 
  if NOT OpenDocByNumber(10003000) then Raise('Не удалось открвыть документ по Alt+N');
  document:=OpenInDocument('ТЕКСТ');
  if NOT ClickOnContext(document, 'избирается на четыре года') then
    Raise('Не удалось кликнуть по искомому контексту!');       
  str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;    
  if NOT SimpleSaveToFolders(str) then Raise('Не удалось установить закладку!');
  if NOT OpenDocByNumber(1055132) then Raise('Не удалось открыть документ по Alt+N');
  if NOT IsExists( OpenInDocument('ИНФОРМАЦИЯ О ДОКУМЕНТЕ') ) then Raise('Не удалось получить ИНФОРМАЦИЯ О ДОКУМЕНТЕ');
  
  if NOT OpenObjectFromFolder(MY_DOCS_PATH+str) then Raise('Не открыть закладку из Моих документов!');     
  document:=OpenInDocument('ТЕКСТ');   
  if NOT StringCompare(CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF, str) then
  begin
    Log.Error('Перешли по закладке не в эталонное место!');
    Raise('Перешли по закладке не в эталонное место!');  
  end;
  DeleteAllInMyDoc;
  result := true;
except
  Log.Message( FOLDER_PREF + ': ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  DeleteAllInMyDoc;
  result := false;
  CommonExceptionHandler;
end;     
end;


{HLTC74.2.1.1: Перейти по закладке, установленной на середину документа, в то время как:
  HLTC74.2.1.1.5: открыт другой документ:
    HLTC74.2.1.1.5.4: справка
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_1_5_4_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_2_1_1_5_4'; 
var
  str:string;
  folderTree;  
  document;  
	copy_attempts;
begin 
  result := DocumentWork.OpenDocByNumber(10003000);  
  if result then
  begin
    document:=OpenInDocument('ТЕКСТ');
    document.VScroll.Pos:=(document.VScroll.Max-document.VScroll.Min) div 2;
    PositionCursorInHomeUpperString(document);
    Delay(Options.Run.Timeout div 10);   
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    str := StringReplace(str, endOfLine, '*', 1);
    result := SimpleSaveToFolders(str);
    if result then
    begin
      result := DocumentWork.OpenDocByNumber(1055132);
      if result then 
      begin    
        OpenInDocument('СПРАВКА');   
        folderTree := OpenMyDocTab;
        OpenObjectFromFolder(MY_DOCS_PATH+str); 
        document:=OpenInDocument('ТЕКСТ');         
        Result := StringCompare(str, CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF); 
      end
      else
        Log.Warning('Не удалось открыть документ по Alt+N 1055132');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ; 
end;

{HLTC74.2.1.1: Перейти по закладке, установленной на середину документа, в то время как:
  HLTC74.2.1.1.5: открыт другой документ:
    HLTC74.2.1.1.5.5: ССЫЛКИ ИЗ ДОКУМЕНТА
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_1_5_5_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_2_1_1_5_5'; 
var
  str:string;
  folderTree;  
  document;  
	copy_attempts;
begin 
  result := DocumentWork.OpenDocByNumber(10003000);  
  if result then
  begin
    document:=OpenInDocument('ТЕКСТ');
    document.VScroll.Pos:=(document.VScroll.Max-document.VScroll.Min) div 2;
    PositionCursorInHomeUpperString(document);
    Delay(Options.Run.Timeout div 10);   
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    str := StringReplace(str, endOfLine, '*', 1);
    result := SimpleSaveToFolders(str);
    if result then
    begin
      result := DocumentWork.OpenDocByNumber(1055132);
      if result then 
      begin    
        if NOT IsExists(OpenInDocument('ССЫЛКИ ИЗ ДОКУМЕНТА')) then Log.Warning('Не удалось открыть ССЫЛКИ ИЗ ДОКУМЕНТА');  
        
        folderTree := OpenMyDocTab;
        OpenObjectFromFolder(MY_DOCS_PATH+str); 
        document:=OpenInDocument('ТЕКСТ');         
        Result := StringCompare(str, CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF); 
      end
      else
        Log.Warning('Не удалось открыть документ по Alt+N 1055132');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ; 
end;

{HLTC74.2.1.1: Перейти по закладке, установленной на середину документа, в то время как:
  HLTC74.2.1.1.5: открыт другой документ:
    HLTC74.2.1.1.5.6: ССЫЛКИ НА ДОКУМЕНТ
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_1_5_6_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_2_1_1_5_6'; 
var
  str:string;
  folderTree;  
  document;  
	copy_attempts;
begin 
  result := DocumentWork.OpenDocByNumber(10003000);  
  if result then
  begin
    document:=OpenInDocument('ТЕКСТ');
    document.VScroll.Pos:=(document.VScroll.Max-document.VScroll.Min) div 2;
    PositionCursorInHomeUpperString(document);
    Delay(Options.Run.Timeout div 10);   
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    str := StringReplace(str, endOfLine, '*', 1);
    result := SimpleSaveToFolders(str);
    if result then
    begin
      result := DocumentWork.OpenDocByNumber(1055132);
      if result then 
      begin    
        OpenInDocument('ССЫЛКИ НА ДОКУМЕНТ');   
        folderTree := OpenMyDocTab;
        OpenObjectFromFolder(MY_DOCS_PATH+str); 
        document:=OpenInDocument('ТЕКСТ');
        result := StringCompare(str, CopyToClipboard(document,'STRING','Trim := true' ) + FOLDER_PREF);       
        if NOT Result then Log.Error('По закладке перешли не в этплонное место:' + str);
      end
      else
        Log.Warning('Не удалось открыть документ по Alt+N 1055132');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ;  
end;

{HLTC74.2.1.1: Перейти по закладке, установленной на середину документа, в то время как:
  HLTC74.2.1.1.6: просматривается список, в котором есть документ
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_1_6_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_2_1_1_6'; 
var
  str:string;
  folderTree;  
  document;  
  allDoc;
	copy_attempts;
begin 
  result := DocumentWork.OpenDocByNumber(10003000);  
  if result then
  begin
    document:=OpenInDocument('ТЕКСТ');
    document.VScroll.Pos:=(document.VScroll.Max-document.VScroll.Min) div 2;
    PositionCursorInHomeUpperString(document);
    Delay(Options.Run.Timeout div 10);   
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    str := StringReplace(str, endOfLine, '*', 1);
    result := SimpleSaveToFolders(str);
    if result then
    begin
      allDoc:=GetListOfAllDocuments;
      result := IsExists(allDoc);
      if result then 
      begin             
        folderTree := OpenMyDocTab;
        OpenObjectFromFolder(MY_DOCS_PATH+str); 
        document:=OpenInDocument('ТЕКСТ');           
        Result := StringCompare(str, CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF); 
      end
      else
        Log.Warning('Не удалось построить список всех документов');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ; 
end;

{HLTC74.2.1.1: Перейти по закладке, установленной на середину документа, в то время как:
  HLTC74.2.1.1.7: просматривается список, в котором нет документа
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_1_7_Execute(var  current_state: OleVariant): OleVariant;
const	
  FOLDER_PREF='HLTC74_2_1_1_7'; 
var
  str:string;
  folderTree;  
  document;  
  List;
	copy_attempts;
begin 
  result := DocumentWork.OpenDocByNumber(10003000);  
  if result then
  begin
    document:=OpenInDocument('ТЕКСТ');
    document.VScroll.Pos:=(document.VScroll.Max-document.VScroll.Min) div 2;
    PositionCursorInHomeUpperString(document);
    Delay(Options.Run.Timeout div 10);   
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    str := StringReplace(str, endOfLine, '*', 1);
    result := SimpleSaveToFolders(str);
    if result then
    begin      
      result := OpenEtalonList(LIST_ALLCODES);
      if result then 
      begin             
        folderTree := OpenMyDocTab;
        OpenObjectFromFolder(MY_DOCS_PATH+str); 
        document:=OpenInDocument('ТЕКСТ');           
        Result := StringCompare(str, CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF); 
      end
      else
        Log.Warning('Не удалось открыть список всех кодексов');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ;    
end;

{HLTC74.2.1.1: Перейти по закладке, установленной на середину документа, в то время как:
  HLTC74.2.1.1.8: просматривается список, в котором есть документ, 
                  и он открыт на синхронном просмотре
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_1_8_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_2_1_1_8'; 
var
  str:string;
  folderTree;  
  document;  
  allDoc;
  resultStr;
	copy_attempts;
begin
try
  if NOT OpenDocByNumber(10003000) then Raise('Не удалось открыть документ по Alt+N'); 
  document := OpenInDocument('ТЕКСТ');
  if NOT IsExists(document) then Raise('Не удалось получить ТЕКСТ');
  document.VScroll.Pos:=(document.VScroll.Max-document.VScroll.Min) div 2;
  PositionCursorInHomeUpperString(document);
  Delay(Options.Run.Timeout div 10);   
  str := CopyToClipboard(document,'STRING','Trim := true') + FOLDER_PREF;
	copy_attempts := 0;
	while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
  begin
		Inc(copy_attempts);
    Sys.Keys('[Down]');
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
  end;
  str := StringReplace(str, endOfLine, '*', 1);
  if NOT SimpleSaveToFolders(str) then Raise('Не удалось сохранить закладку');
  allDoc:=GetListOfAllDocuments;
  if NOT IsExists(allDoc) then Raise('Не удалось получить список всех документов'); 
  if NOT Position_Internal(allDoc,'Конституция Российской Федерации*', '\', true, 'IsPressHome:=true') then
    Raise('В списке не удалось спозиционироваться на "Конституция Российской Федерации*"');
  OpenInList('СИНХРОННЫЙ ПРОСМОТР');      
  folderTree := OpenMyDocTab;
  if NOT IsExists(folderTree) then Raise('Не удалось получить вкладку "Мои документы"');          
  if NOT OpenObjectFromFolder(MY_DOCS_PATH+str) then Raise('Не удалось открыть объект из моих документов'); 
  document:=OpenInDocument('ТЕКСТ');
  if NOT IsExists(document) then Raise('Не удалось получить ТЕКСТ');
  resultStr := CopyToClipboard(document,'STRING','Trim := true')+ FOLDER_PREF;              
  if NOT StringCompare( str,  resultStr) then
  begin
    Log.Error('Закладка стоит не в эталонном месте:' + str);
    Raise('Закладка стоит не в эталонном месте!');
  end;
  if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
  result := true;    
except  
  Log.Message('HLTC74_2_1_1_8_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  DeleteAllInMyDoc;
  result := false;
  CommonExceptionHandler; 
  
end;    
end;

{HLTC74.2.1.1: Перейти по закладке, установленной на середину документа, в то время как:
HLTC74.2.1.1.9: просматривается список, в котором нет документа,
                список открыт с синхронным просмотром
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_1_9_Execute(var  current_state: OleVariant): OleVariant;
const	
  FOLDER_PREF='HLTC74_2_1_1_9'; 
var
  str:string;
  folderTree;  
  document; 
begin
try 
  if NOT OpenDocByNumber(10003000) then Raise('Не удалось открвыть документ по Alt+N');
  document:=OpenInDocument('ТЕКСТ');
  if NOT ClickOnContext(document, 'избирается на четыре года') then
    Raise('Не удалось кликнуть по искомому контексту!');       
  str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
      
  if NOT SimpleSaveToFolders(str) then Raise('Не удалось установить закладку!');
  
  if NOT OpenEtalonList(LIST_ALLCODES) then Raise('Не удалось открыть список!');      
  if NOT IsExists( OpenInList('СИНХРОННЫЙ ПРОСМОТР') ) then Raise('Не удалось открыть синхроный просмотр!');
  
  folderTree := OpenMyDocTab;
  if NOT OpenObjectFromFolder(MY_DOCS_PATH+str) then Raise('Не открыть закладку из Моих документов!');     
  document:=OpenInDocument('ТЕКСТ');   
  if NOT StringCompare(CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF, str) then
  begin
    Log.Error('Перешли по закладке не в эталонное место!');
    Raise('Перешли по закладке не в эталонное место!');  
  end;
  DeleteAllInMyDoc;
  result := true;
except
  Log.Message( FOLDER_PREF + ': ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  DeleteAllInMyDoc;
  result := false;
  CommonExceptionHandler;
end;
end; 


{HLTC74.2.1.1: Перейти по закладке, установленной на середину документа, в то время как:
  HLTC74.2.1.1.10: просматривается список, с открытым фреймом справка к списку
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_1_10_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_2_1_1_10'; 
var
  str:string;
  folderTree;  
  document;  
  allDoc;
	copy_attempts;
begin 
  result := DocumentWork.OpenDocByNumber(10003000);  
  if result then
  begin
    document:=OpenInDocument('ТЕКСТ');
    document.VScroll.Pos:=(document.VScroll.Max-document.VScroll.Min) div 2;
    PositionCursorInHomeUpperString(document);
    Delay(Options.Run.Timeout div 10);   
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    Log.Picture(Sys.Desktop.Picture, 'Начало!');
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
     Log.Picture(Sys.Desktop.Picture, 'Перед Down!');                  
      Sys.Keys('[Down]');
      Log.Picture(Sys.Desktop.Picture, 'После Down!');
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    str := StringReplace(str, endOfLine, '*', 1);
    result := SimpleSaveToFolders(str);
    if result then
    begin
      allDoc:=GetListOfAllDocuments;
      result := IsExists(allDoc);
      if result then 
      begin             
        OpenInList('СПРАВКА К СПИСКУ');
        folderTree := OpenMyDocTab;
        OpenObjectFromFolder(MY_DOCS_PATH+str); 
        document:=OpenInDocument('ТЕКСТ');
        Result := StringCompare(str, CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF);     
      end
      else
        Log.Warning('Не удалось построить список всех документов');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ; 
end;

{HLTC74.2.1.1: Перейти по закладке, установленной на середину документа, в то время как:
  HLTC74.2.1.1.11: просматривается основное меню
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_1_11_Execute(var  current_state: OleVariant): OleVariant;
const	
  FOLDER_PREF='HLTC74_2_1_1_11'; 
var
  curStr, str;
  folderTree;  
  document;  
	copy_attempts;
begin
try 
  if NOT OpenDocByNumber(10003000) then Raise('Не удалось открыть документ по номеру');  
  document:=OpenInDocument('ТЕКСТ');
  document.VScroll.Pos:=(document.VScroll.Max-document.VScroll.Min) div 2;  
  PositionCursorInHomeUpperString(document);
  Delay(Options.Run.Timeout div 10);   
  str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
	copy_attempts := 0;
  while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
  begin
		Inc(copy_attempts);
    Sys.Keys('[Down]');
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
  end;
  str := StringReplace(str, endOfLine, '*', 1);
  if NOT SimpleSaveToFolders(str) then Raise('Не удалось сохранить закладку');
  GoToMainMenu;      
  folderTree := OpenMyDocTab;
  OpenObjectFromFolder(MY_DOCS_PATH+str); 
  document:=OpenInDocument('ТЕКСТ');
  curStr := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;                       
  if NOT StringCompare(str, curStr) then
  begin      
    Log.Error('По закладке перешли не в эталонное место : ' + curStr);
    Raise('По закладке перешли не в эталонное место');
  end;     
  if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
    Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');  
  GoToMainMenu;
  result := true;
except
  Log.Message('HLTC74_2_1_1_11_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;


{HLTC74.2.1.1: Перейти по закладке, установленной на середину документа, в то время как:
  HLTC74.2.1.1.12: просматривается рубрикатор
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_1_12_Execute(var  current_state: OleVariant): OleVariant;
const	
  FOLDER_PREF='HLTC74_2_1_1_12'; 
var
  str:string;
  folderTree;  
  document;           
	copy_attempts;
begin 
 result := DocumentWork.OpenDocByNumber(10003000);  
  if result then
  begin
    document:=OpenInDocument('ТЕКСТ');
    document.VScroll.Pos:=(document.VScroll.Max-document.VScroll.Min) div 2;
    document.Click(1,1);
    PositionCursorInHomeUpperString(document);
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    str := StringReplace(str, endOfLine, '*', 1);
    result := SimpleSaveToFolders(str);
    if result then
    begin           
      result := OpenObjectFromFolder(LIST_RUBR_MAIN, OpenMenuTab);
      if result then
      begin     
        folderTree := OpenMyDocTab;
        OpenObjectFromFolder(MY_DOCS_PATH+str); 
        document:=OpenInDocument('ТЕКСТ');           
        Result := StringCompare(str, CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF);             
      end
      else
        Log.Warning('Не открылся объект : ' + LIST_RUBR_MAIN);
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ;   
end;

{HLTC74.2.1.1: Перейти по закладке, установленной на середину документа, в то время как:
  HLTC74.2.1.1.13: просматривается ППС
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_1_13_Execute(var  current_state: OleVariant): OleVariant;
const	
  FOLDER_PREF='HLTC74_2_1_1_13'; 
var
  str:string;
  folderTree;  
  document;  
begin
try 
  if NOT OpenDocByNumber(10003000) then Raise('Не удалось открвыть документ по Alt+N');
  document:=OpenInDocument('ТЕКСТ');
  if NOT ClickOnContext(document, 'избирается на четыре года') then
    Raise('Не удалось кликнуть по искомому контексту!');       
  str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;    
  if NOT SimpleSaveToFolders(str) then Raise('Не удалось установить закладку!');
  if NOT GoToPPS then Raise('Не удалось открыть ППС!');  
  if NOT OpenObjectFromFolder(MY_DOCS_PATH+str) then Raise('Не открыть закладку из Моих документов!');     
  document:=OpenInDocument('ТЕКСТ');   
  if NOT StringCompare(CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF, str) then
  begin
    Log.Error('Перешли по закладке не в эталонное место!');
    Raise('Перешли по закладке не в эталонное место!');  
  end;
  DeleteAllInMyDoc;
  result := true;
except
  Log.Message( FOLDER_PREF + ': ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  DeleteAllInMyDoc;
  result := false;
  CommonExceptionHandler;
end;     
end;



{HLTC74.2.1.1: Перейти по закладке, установленной на середину документа, в то время как:
  HLTC74.2.1.1.14: просматривается ППР
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_1_14_Execute(var  current_state: OleVariant): OleVariant;
const	
  FOLDER_PREF='HLTC74_2_1_1_14'; 
var
  str:string;
  folderTree;  
  document;  
	copy_attempts;
begin 
  result := DocumentWork.OpenDocByNumber(10003000);  
  if result then
  begin
    document:=OpenInDocument('ТЕКСТ');
    document.VScroll.Pos:=(document.VScroll.Max-document.VScroll.Min) div 2;
    PositionCursorInHomeUpperString(document);
    Delay(Options.Run.Timeout div 10);   
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    str := StringReplace(str, endOfLine, '*', 1);
    result := SimpleSaveToFolders(str);
    if result then
    begin      
      GoToPPR;      
      folderTree := OpenMyDocTab;
      result := OpenObjectFromFolder(MY_DOCS_PATH+str); 
      if result then
      begin      
        document:=OpenInDocument('ТЕКСТ');          
        Result := StringCompare(str, CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF);
      end
      else
        Log.Warning('Не удалось открыть объект: ' + MY_DOCS_PATH+str);      
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ;  
end;

{HLTC74.2.1.2: Перейти по закладке, установленной на начало документа, в то время как:
  HLTC74.2.1.2.1: просматривается начало этого же документа
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_2_1_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_2_1_2_1'; 
var
  str:string;  
  document;  
	copy_attempts;
begin 
  result := DocumentWork.OpenDocByNumber(10003000,true);  
  if result then
  begin
    document:=OpenInDocument('ТЕКСТ'); 
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;     
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');       
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    result := SimpleSaveToFolders(str);    
    if result then
    begin
      Sys.Keys('^[Home]');      
      OpenObjectFromFolder(MY_DOCS_PATH+str); 
      document:=OpenInDocument('ТЕКСТ');
      result := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF = str;
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ;     
end;

{HLTC74.2.1.2: Перейти по закладке, установленной на начало документа, в то время как:
  HLTC74.2.1.2.2: просматривается середина этого же документа
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_2_2_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_2_1_2_2'; 
var
  str:string;   
  document;  
	copy_attempts;
begin 
  result := DocumentWork.OpenDocByNumber(1055132,true);  
  if result then
  begin
    document:=OpenInDocument('ТЕКСТ'); 
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;     
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');       
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    result := SimpleSaveToFolders(str);
    if result then
    begin
      document.VScroll.Pos:=(document.VScroll.Max-document.VScroll.Min) div 2;      
      OpenObjectFromFolder(MY_DOCS_PATH+str); 
      document:=OpenInDocument('ТЕКСТ');
      result := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF = str;
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ;   
end;

{HLTC74.2.1.2: Перейти по закладке, установленной на начало документа, в то время как:
  HLTC74.2.1.2.3: просматривается конец этого же документа
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_2_3_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_2_1_2_3'; 
var
  str:string;  
  document;  
	copy_attempts;
begin 
  result := DocumentWork.OpenDocByNumber(10003000,true);  
  if result then
  begin
    document:=OpenInDocument('ТЕКСТ'); 
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;     
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');       
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    result := SimpleSaveToFolders(str);
    if result then
    begin      
      document.VScroll.Pos:=document.VScroll.Max;       
      OpenObjectFromFolder(MY_DOCS_PATH+str); 
      document:=OpenInDocument('ТЕКСТ');
      result := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF = str;
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ;   
end;

{HLTC74.2.1.2: Перейти по закладке, установленной на начало документа, в то время как:
  HLTC74.2.1.2.4: открыто у этого же документа:
    HLTC74.2.1.2.4.5: атрибуты
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_2_4_5_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_2_1_2_4_5'; 
var
  str:string;  
  document;  
	copy_attempts;
begin 
  result := DocumentWork.OpenDocByNumber(10003000,true);  
  if result then
  begin
    document:=OpenInDocument('ТЕКСТ'); 
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;     
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');       
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    result := SimpleSaveToFolders(str);
    if result then
    begin
      OpenInDocument('ИНФОРМАЦИЯ О ДОКУМЕНТЕ');     
      OpenObjectFromFolder(MY_DOCS_PATH+str); 
      document:=OpenInDocument('ТЕКСТ');
      result := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF = str;
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ;  
end;

{HLTC74.2.1.2: Перейти по закладке, установленной на начало документа, в то время как:
  HLTC74.2.1.2.4: открыто у этого же документа:
    HLTC74.2.1.2.4.6: справка
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_2_4_6_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_2_1_2_4_6'; 
var
  str:string; 
  document;  
	copy_attempts;
begin 
  result := DocumentWork.OpenDocByNumber(1055132,true);  
  if result then
  begin
    document:=OpenInDocument('ТЕКСТ'); 
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;     
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');       
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    result := SimpleSaveToFolders(str);
    if result then
    begin
      OpenInDocument('СПРАВКА');          
      OpenObjectFromFolder(MY_DOCS_PATH+str); 
      document := OpenInDocument('ТЕКСТ');
      result := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF = str;
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ;   
end;

{HLTC74.2.1.2: Перейти по закладке, установленной на начало документа, в то время как:
  HLTC74.2.1.2.4: открыто у этого же документа:
    HLTC74.2.1.2.4.7: ССЫЛКИ ИЗ ДОКУМЕНТА
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_2_4_7_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_2_1_2_4_7'; 
var
  str:string; 
  document;  
	copy_attempts;
begin 
  result := DocumentWork.OpenDocByNumber(10003000,true);  
  if result then
  begin
    document:=OpenInDocument('ТЕКСТ'); 
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;     
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');       
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    result := SimpleSaveToFolders(str);
    if result then
    begin
      OpenInDocument('ССЫЛКИ ИЗ ДОКУМЕНТА');                                         
      OpenObjectFromFolder(MY_DOCS_PATH+str); 
      document := OpenInDocument('ТЕКСТ');
      result := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF = str;
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ; 
end;

{HLTC74.2.1.2: Перейти по закладке, установленной на начало документа, в то время как:
  HLTC74.2.1.2.4: открыто у этого же документа:
    HLTC74.2.1.2.4.8: ССЫЛКИ НА ДОКУМЕНТ
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_2_4_8_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_2_1_2_4_8'; 
var
  str:string;  
  document;  
begin
try 
  if NOT OpenDocByNumber(10003000) then Raise('Не удалось открвыть документ по Alt+N');
  document:=OpenInDocument('ТЕКСТ');
  if NOT ClickOnContext(document, 'конституция') then
    Raise('Не удалось кликнуть по искомому контексту!');       
  str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;    
  if NOT SimpleSaveToFolders(str) then Raise('Не удалось установить закладку!');
  if NOT IsExists(OpenInDocument('ССЫЛКИ НА ДОКУМЕНТ') ) then Raise('Не удалось открыть вкладку "ССЫЛКИ НА ДОКУМЕНТ"'); 
  if NOT OpenObjectFromFolder(MY_DOCS_PATH+str) then Raise('Не открыть закладку из Моих документов!');     
  document:=OpenInDocument('ТЕКСТ');   
  if NOT StringCompare(CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF, str) then
  begin
    Log.Error('Перешли по закладке не в эталонное место!');
    Raise('Перешли по закладке не в эталонное место!');  
  end;
  DeleteAllInMyDoc;
  result := true;
except
  Log.Message( FOLDER_PREF + ': ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  DeleteAllInMyDoc;
  result := false;
  CommonExceptionHandler;
end;

 
end;

{HLTC74.2.1.2: Перейти по закладке, установленной на начало документа, в то время как:
  HLTC74.2.1.2.5: открыт другой документ:
    HLTC74.2.1.2.5.1: содержащий рисунки
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_2_5_1_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_2_1_2_5_1'; 
var
  str:string;  
  document;  
	copy_attempts;
begin 
  result := DocumentWork.OpenDocByNumber(10003000,true);  
  if result then
  begin
    document:=OpenInDocument('ТЕКСТ'); 
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;     
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');       
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    result := SimpleSaveToFolders(str);
    if result then
    begin
      result := DocumentWork.OpenDocByNumber(3822469);
      if result then
      begin       
        OpenObjectFromFolder(MY_DOCS_PATH+str); 
        document := OpenInDocument('ТЕКСТ');
        result := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF = str; 
      end
      else
        Log.Warning('Не удалось открыть документ по Alt+N 3822469');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ; 
end;

{HLTC74.2.1.2: Перейти по закладке, установленной на начало документа, в то время как:
  HLTC74.2.1.2.5: открыт другой документ:
    HLTC74.2.1.2.5.2: без рисунков
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_2_5_2_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_2_1_2_5_2'; 
var
  str:string;    
  document;  
	copy_attempts;
begin 
  result := DocumentWork.OpenDocByNumber(10003000,true);  
  if result then
  begin
    document:=OpenInDocument('ТЕКСТ'); 
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;     
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');       
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    result := SimpleSaveToFolders(str);
    if result then
    begin
      result := DocumentWork.OpenDocByNumber(1055132);
      if result then 
      begin        
        OpenObjectFromFolder(MY_DOCS_PATH+str); 
        document := OpenInDocument('ТЕКСТ');
        result := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF = str;
      end
      else
        Log.Warning('Не удалось открыть документ по Alt+N 1055132');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ; 
end;

{HLTC74.2.1.2: Перейти по закладке, установленной на начало документа, в то время как:
  HLTC74.2.1.2.5: открыт другой документ:
    HLTC74.2.1.2.5.7: атрибуты
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_2_5_7_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_2_1_2_5_7'; 
var
  str:string; 
  document;  
	copy_attempts;
begin 
  result := DocumentWork.OpenDocByNumber(10003000,true);  
  if result then
  begin
    document:=OpenInDocument('ТЕКСТ'); 
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;     
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');       
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    result := SimpleSaveToFolders(str);
    if result then
    begin
      result := DocumentWork.OpenDocByNumber(1055132);
      if result then 
      begin    
        OpenInDocument('ИНФОРМАЦИЯ О ДОКУМЕНТЕ');        
        OpenObjectFromFolder(MY_DOCS_PATH+str); 
        document := OpenInDocument('ТЕКСТ');
        result := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF = str;
      end
      else
        Log.Warning('Не удалось открыть документ по Alt+N 1055132');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ; 
end;

{HLTC74.2.1.2: Перейти по закладке, установленной на начало документа, в то время как:
  HLTC74.2.1.2.5: открыт другой документ:
    HLTC74.2.1.2.5.8: справка
!!!Предусловие Основное Меню}
function  HLTC74_2_1_2_5_8_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_2_1_2_5_8'; 
var
  str:string;  
  document;  
	copy_attempts;
begin 
  result := DocumentWork.OpenDocByNumber(10003000,true);  
  if result then
  begin
    document:=OpenInDocument('ТЕКСТ'); 
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;     
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');       
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    result := SimpleSaveToFolders(str);
    if result then
    begin
      result := DocumentWork.OpenDocByNumber(1055132);
      if result then 
      begin    
        OpenInDocument('СПРАВКА');     
        OpenObjectFromFolder(MY_DOCS_PATH+str); 
        document := OpenInDocument('ТЕКСТ');
        result := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF = str;
      end
      else
        Log.Warning('Не удалось открыть документ по Alt+N 1055132');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ; 
end;

{HLTC74.2.1.2: Перейти по закладке, установленной на начало документа, в то время как:
  HLTC74.2.1.2.5: открыт другой документ:
    HLTC74.2.1.2.5.9: ССЫЛКИ ИЗ ДОКУМЕНТА
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_2_5_9_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_2_1_2_5_9'; 
var
  str:string;  
  document;  
  str1;
	copy_attempts;
begin 
  result := OpenDocByNumber(10003000,true);  
  if result then
  begin
    document:=OpenInDocument('ТЕКСТ'); 
    document.SetFocus;
    str := CopyToClipboard(document,'STRING','Trim := true') + FOLDER_PREF; 
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');       
      str := CopyToClipboard(document,'STRING','Trim := true') + FOLDER_PREF;
    end;
    result := SimpleSaveToFolders(str);
    if result then
    begin
      result := DocumentWork.OpenDocByNumber(1055132);
      if result then 
      begin    
        result := IsExists(OpenInDocument('ССЫЛКИ ИЗ ДОКУМЕНТА'));
        if result then
        begin    
          result := OpenObjectFromFolder(MY_DOCS_PATH+str); 
          if result then
          begin
            document := OpenInDocument('ТЕКСТ');
            Delay(Options.Run.Timeout div 60);
            str1 := CopyToClipboard(document,'STRING','Trim := true') + FOLDER_PREF;
            Delay(Options.Run.Timeout div 60);
            result := StringCompare(str1, str);
            if NOT result then
              Log.Error('Сохранённая закладка не равна эталонной', str1);
          end
          else
            Log.Warning('Не удалось згрузить объект из Моих документов');
        end
        else
          Log.Warning('Не удалось открыть вкладку ССЫЛКИ ИЗ ДОКУМЕНТА');
      end
      else
        Log.Warning('Не удалось открыть документ по Alt+N 1055132');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ; 
end;

{HLTC74.2.1.2: Перейти по закладке, установленной на начало документа, в то время как:
  HLTC74.2.1.2.5: открыт другой документ:
    HLTC74.2.1.2.5.10: ССЫЛКИ НА ДОКУМЕНТ
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_2_5_10_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_2_1_2_5_10'; 
var
  str:string;
  document;  
	copy_attempts;
begin 
  result := DocumentWork.OpenDocByNumber(10003000,true);  
  if result then
  begin
    document:=OpenInDocument('ТЕКСТ'); 
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;     
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');       
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    result := SimpleSaveToFolders(str);
    if result then
    begin
      result := DocumentWork.OpenDocByNumber(1055132);
      if result then 
      begin    
        OpenInDocument('ССЫЛКИ НА ДОКУМЕНТ');     
        OpenObjectFromFolder(MY_DOCS_PATH+str); 
        document := OpenInDocument('ТЕКСТ');
        result := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF = str; 
      end
      else
        Log.Warning('Не удалось открыть документ по Alt+N 1055132');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ;  
end;

{HLTC74.2.1.2: Перейти по закладке, установленной на начало документа, в то время как:
  HLTC74.2.1.2.6: просматривается список, в котором есть документ
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_2_6_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_2_1_2_6'; 
var
  str:string;  
  document;  
  allDoc;
	copy_attempts;
begin 
  result := DocumentWork.OpenDocByNumber(10003000, true);  
  if result then
  begin
    document:=OpenInDocument('ТЕКСТ'); 
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;     
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');       
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    result := SimpleSaveToFolders(str);
    if result then
    begin
      allDoc:=GetListOfAllDocuments;
      result := IsExists(allDoc);
      if result then 
      begin     
        OpenObjectFromFolder(MY_DOCS_PATH+str);        
        document := OpenInDocument('ТЕКСТ');
        result := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF = str;
      end
      else
        Log.Warning('Не удалось построить список всех документов');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ; 
end;

{HLTC74.2.1.2: Перейти по закладке, установленной на начало документа, в то время как:
  HLTC74.2.1.2.7: просматривается список, в котором нет документа
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_2_7_Execute(var  current_state: OleVariant): OleVariant;
const	
  FOLDER_PREF='HLTC74_2_1_2_7'; 
var
  str:string;  
  document;  
  List;
begin 
  result := OpenDocByNumber(10003000);  
  if result then
  begin
    document:=OpenInDocument('ТЕКСТ');
    document.SetFocus;
    Sys.Keys('^[Home]');
    if NOT ClickOnContext(document, 'КОНСТИТУЦИЯ РОССИЙСКОЙ ФЕДЕРАЦИИ') then Raise('Не удалось кликнуть на искомый контекст');
    str := CopyToClipboard(document,'STRING','Trim := true') + FOLDER_PREF;    
    result := SimpleSaveToFolders(str);
    if result then
    begin      
      result := OpenEtalonList(LIST_ALLCODES);
      if result then
      begin
        OpenObjectFromFolder(MY_DOCS_PATH + str); 
        document := OpenInDocument('ТЕКСТ');
        result := StringCompare(CopyToClipboard(document, 'STRING', 'Trim := true') +'*'+ FOLDER_PREF , str);
      end
      else
        Log.Warning('Не удалось открыть список всех кодексов');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end;
  
  GoToMainMenu;
  current_state := ST_MAIN_MENU ;    
end;

{HLTC74.2.1.2: Перейти по закладке, установленной на начало документа, в то время как:
  HLTC74.2.1.2.8: просматривается список, в котором есть документ,
  и он открыт на синхронном просмотре
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_2_8_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_2_1_2_8'; 
var
  str:string; 
  document;  
  allDoc;
	copy_attempts;
begin 
  result := DocumentWork.OpenDocByNumber(10003000);  
  if result then
  begin
    document:=OpenInDocument('ТЕКСТ'); 
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;     
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');       
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    result := SimpleSaveToFolders(str);
    if result then
    begin
      allDoc:=GetListOfAllDocuments;
      result := IsExists(allDoc);
      if result then 
      begin
        result := Position_Internal(allDoc,'Конституция Российской Федерации (принята на всенародном голосовании 12 декабря 1993 г.)');
        if result then
        begin
          OpenInList('СИНХРОННЫЙ ПРОСМОТР');   
          OpenObjectFromFolder(MY_DOCS_PATH+str); 
          document := OpenInDocument('ТЕКСТ');
          result := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF = str;
        end
        else Log.Warning('Не удалось спозиционироваться в списке на документе "конституция РФ"');
      end
      else
        Log.Warning('Не удалось построить список всех документов');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ;  
end;

{HLTC74.2.1.2: Перейти по закладке, установленной на начало документа, в то время как:
  HLTC74.2.1.2.9: просматривается список, в котором нет документа,
  список открыт с синхронным просмотром
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_2_9_Execute(var  current_state: OleVariant): OleVariant;
const	
  FOLDER_PREF='HLTC74_2_1_2_9'; 
var
  str:string; 
  document;   
	copy_attempts;
begin 
  result := DocumentWork.OpenDocByNumber(10003000);  
  if result then
  begin
    document:=OpenInDocument('ТЕКСТ'); 
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;     
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');       
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    result := SimpleSaveToFolders(str);
    if result then
    begin      
      result := OpenEtalonList(LIST_ALLCODES);
      if result then 
      begin    
        OpenInList('СИНХРОННЫЙ ПРОСМОТР');    
        OpenObjectFromFolder(MY_DOCS_PATH+str); 
        document := OpenInDocument('ТЕКСТ');
        result := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF = str;
      end
      else
        Log.Warning('Не удалось открыть список всех кодексов');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ;     
end;

{HLTC74.2.1.2: Перейти по закладке, установленной на начало документа, в то время как:
  HLTC74.2.1.2.10: просматривается список, с открытым фреймом справка к списку
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_2_10_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_2_1_2_10'; 
var
  str:string; 
  document;  
  allDoc;
	copy_attempts;
begin 
  result := DocumentWork.OpenDocByNumber(10003000);  
  if result then
  begin
    document:=OpenInDocument('ТЕКСТ'); 
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;     
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');       
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    result := SimpleSaveToFolders(str);
    if result then
    begin
      allDoc:=GetListOfAllDocuments;
      result := IsExists(allDoc);
      if result then 
      begin             
        OpenInList('СПРАВКА К СПИСКУ');       
        OpenObjectFromFolder(MY_DOCS_PATH+str); 
        document := OpenInDocument('ТЕКСТ');
        result := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF = str;
      end
      else
        Log.Warning('Не удалось построить список всех документов');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ; 
end;

{HLTC74.2.1.2: Перейти по закладке, установленной на начало документа, в то время как:
  HLTC74.2.1.2.11: просматривается основное меню
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_2_11_Execute(var  current_state: OleVariant): OleVariant;
const	
  FOLDER_PREF='HLTC74_2_1_2_11'; 
var
  str:string; 
  document;  
	copy_attempts;
begin 
  result := DocumentWork.OpenDocByNumber(10003000);  
  if result then
  begin
    document:=OpenInDocument('ТЕКСТ'); 
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;     
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');       
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    result := SimpleSaveToFolders(str);
    if result then
    begin      
      GoToMainMenu;   
      OpenObjectFromFolder(MY_DOCS_PATH+str); 
      document := OpenInDocument('ТЕКСТ');
      result := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF = str;
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ;  
end;

{HLTC74.2.1.2: Перейти по закладке, установленной на начало документа, в то время как:
  HLTC74.2.1.2.12: просматривается рубрикатор
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_2_12_Execute(var  current_state: OleVariant): OleVariant;
const	
  FOLDER_PREF = 'HLTC74_2_1_2_12'; 
  DOC_NUM = 10003000;
var
  str:string; 
  document;           
	copy_attempts;
begin 
  try
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  document:=GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(document) then Raise('Не удалосоь получить ТЕКСТ ДОКУМЕНТА');
  str := CopyToClipboard(document, 'STRING','Trim := true') + FOLDER_PREF;     
	copy_attempts := 0;
  while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
  begin
		Inc(copy_attempts);
    Sys.Keys('[Down]');       
    str := CopyToClipboard(document,'STRING','Trim := true') + FOLDER_PREF;
  end;
  if NOT SimpleSaveToFolders(str) then Raise('Не удалось сохранить закладку');
  if NOT OpenObjectFromFolder(LIST_RUBR_MAIN, OpenMenuTab) then Raise('Не удалось открыть: ' + LIST_RUBR_MAIN);
  if NOT OpenObjectFromFolder(MY_DOCS_PATH+str) then Raise('Не удалось открыть закладку из Моих документов');
  document := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT ( (CopyToClipboard(document,'STRING','Trim := true') + FOLDER_PREF) = str ) then
  begin
    Log.Error('Переход по закладке произошёл не в эталонное место');
    Raise;
  end;
  if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
    Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
  result := true;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ;
except  
  Log.Message( 'HLTC74_2_1_2_12_Execute: ' + ExceptionMessage , '', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;  
end;
end;
{HLTC74.2.1.2: Перейти по закладке, установленной на начало документа, в то время как:
  HLTC74.2.1.2.13: просматривается ППС
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_2_13_Execute(var  current_state: OleVariant): OleVariant;
const	
  FOLDER_PREF='HLTC74_2_1_2_13'; 
var
  str:string;  
  document;  
	copy_attempts;
begin 
  result := DocumentWork.OpenDocByNumber(10003000);  
  if result then
  begin
    document:=OpenInDocument('ТЕКСТ'); 
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;     
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');       
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    result := SimpleSaveToFolders(str);
    if result then
    begin      
      GoToPPS;     
      result := OpenObjectFromFolder(MY_DOCS_PATH+str); 
      if result then
      begin
        document := OpenInDocument('ТЕКСТ');
        result := (CopyToClipboard(document,'STRING','Trim := true') + FOLDER_PREF) = str;     
      end
      else
        Log.Warning('Не удалось открыть объект: ' + MY_DOCS_PATH+str);
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ;  
end;

{HLTC74.2.1.2: Перейти по закладке, установленной на начало документа, в то время как:
  HLTC74.2.1.2.14: просматривается ППР
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_2_14_Execute(var  current_state: OleVariant): OleVariant;
const	
  FOLDER_PREF='HLTC74_2_1_2_14'; 
var
  str:string;    
  document;  
	copy_attempts;
begin 
  result := DocumentWork.OpenDocByNumber(10003000);  
  if result then
  begin
    document:=OpenInDocument('ТЕКСТ'); 
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;     
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');       
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    result := SimpleSaveToFolders(str);
    if result then
    begin      
      GoToPPR;      
      result := OpenObjectFromFolder(MY_DOCS_PATH+str); 
      if result then
      begin      
        document := OpenInDocument('ТЕКСТ');
        result := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF = str;
      end
      else
        Log.Warning('Не удалось открыть объект: ' + MY_DOCS_PATH+str);      
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ;  
end;

{HLTC74.2.1.3: Перейти по закладке, установленной на справку к документу, когда:
  HLTC74.2.1.3.1: открыт документ, к которому относится справка:
    HLTC74.2.1.3.1.1: в режиме просмотра текста
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_3_1_1_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC74_2_1_3_1_1';
var
  str: string;  
  document;    
	copy_attempts;
begin
try
  if NOT OpenDocByNumber(1055132) then Raise('Не удалось открвыть документ по Alt+N');  
  document:=OpenInDocument('СПРАВКА'); 
  str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;     
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');       
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;  
  if NOT SetBookmark(str) then Raise('Не удалось установить закладку на "СПРАВКУ к документу"');
  if NOT OpenDocByNumber(1055132) then Raise('Не удалось открыть документ по Alt+N');  
  if NOT IsExists (OpenInDocument('ТЕКСТ') ) then Raise('Не удалось открыть ТЕКСТ');

  if NOT OpenObjectFromFolder(MY_DOCS_PATH+str) then Raise('Не открыть закладку из Моих документов!');     
  document:=GetFromEditor('СПРАВКА ВО ВСЕ ОКНО');   
  if NOT StringCompare(CopyToClipboard(document,'STRING','Trim := true')+'*'+FOLDER_PREF, str) then
  begin
    Log.Error('Перешли по закладке не в эталонное место!');
    Raise('Перешли по закладке не в эталонное место!');  
  end;
  DeleteAllInMyDoc;
  result := true;
except
  Log.Message( FOLDER_PREF + ': ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  DeleteAllInMyDoc;
  result := false;
  CommonExceptionHandler;
end;     
end;


{HLTC74.2.1.3: Перейти по закладке, установленной на справку к документу, когда:
  HLTC74.2.1.3.1: открыт документ, к которому относится справка:
    HLTC74.2.1.3.1.2: в режиме просмотра справки
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_3_1_2_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC74_2_1_3_1_2';
var
  str: string;  
  document;    
	copy_attempts;
begin
try
  if NOT OpenDocByNumber(1055132) then Raise('Не удалось открвыть документ по Alt+N');  
  document:=OpenInDocument('СПРАВКА'); 
  str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;     
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');       
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;  
  if NOT SetBookMark(str) then Raise('Не удалось установить закладку на "СПРАВКА к документу"');
  if NOT OpenDocByNumber(1055132) then Raise('Не удалось открыть документ по Alt+N');  
  if NOT IsExists (OpenInDocument('СПРАВКА') ) then Raise('Не удалось открыть СПРАВКА');

  if NOT OpenObjectFromFolder(MY_DOCS_PATH+str) then Raise('Не открыть закладку из Моих документов!');     
  document:=GetFromEditor('СПРАВКА ВО ВСЕ ОКНО');   
  if NOT StringCompare(CopyToClipboard(document,'STRING','Trim := true')+'*'+FOLDER_PREF, str) then
  begin
    Log.Error('Перешли по закладке не в эталонное место!');
    Raise('Перешли по закладке не в эталонное место!');  
  end;
  DeleteAllInMyDoc;
  result := true;
except
  Log.Message( FOLDER_PREF + ': ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  DeleteAllInMyDoc;
  result := false;
  CommonExceptionHandler;
end;     
end;


{HLTC74.2.1.3: Перейти по закладке, установленной на справку к документу, когда:
  HLTC74.2.1.3.1: открыт документ, к которому относится справка:
    HLTC74.2.1.3.1.3: в режиме просмотра атрибутов
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_3_1_3_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC74_2_1_3_1_3';
var
  str: string;
  document;    
	copy_attempts;
begin
  result := OpenDocByNumber(1055132);  
  if result then
  begin
    document:=OpenInDocument('СПРАВКА'); 
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;     
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');       
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    result := SetBookmark(str);
    if result then
    begin     
      result := OpenDocByNumber(1055132);  
      if result then
      begin
        OpenInDocument('ИНФОРМАЦИЯ О ДОКУМЕНТЕ');            
        result := OpenObjectFromFolder(MY_DOCS_PATH+str); 
        if result then
        begin 
          document := GetFromEditor('СПРАВКА ВО ВСЕ ОКНО');     
          result := StringCompare(CopyToClipboard(document,'STRING','Trim := true')+'*'+FOLDER_PREF , str); 
        end
        else
          Log.Warning('Не удалось открыть объект: ' + MY_DOCS_PATH+str);     
      end
      else
        Log.Warning('Не удалоссь открыть документ по Alt+N 1055132');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');
  end;  
  GoToMainMenu;
  current_state := ST_MAIN_MENU;
end;

{HLTC74.2.1.3: Перейти по закладке, установленной на справку к документу, когда:
  HLTC74.2.1.3.1: открыт документ, к которому относится справка:
    HLTC74.2.1.3.1.4: в режиме просмотра ССЫЛОК ИЗ ДОКУМЕНТОВ
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_3_1_4_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC74_2_1_3_1_4';
var
  str: string;
  strAfter; 
  document;    
	copy_attempts;
begin
try
  if NOT OpenDocByNumber(1055132) then Raise('Не удалось открыть документ по Alt+N');
  document := OpenInDocument('СПРАВКА');
  if NOT IsExists(document) then Raise('Не удалось открыть СПРАВКА');
  str := CopyToClipboard(document, 'STRING','Trim := true') + FOLDER_PREF;     
	copy_attempts := 0;
  while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
  begin
		Inc(copy_attempts);
    Sys.Keys('[Down]');       
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
  end;
  if NOT SetBookmark(str) then Raise('Не удалось установить закладку на строку :' + str);
  
  if NOT IsExists( OpenInDocument('ССЫЛКИ ИЗ ДОКУМЕНТА') ) then Raise('Не удалось открыть ССЫЛКИ ИЗ ДОКУМЕНТА');   
  if NOT OpenObjectFromFolder(MY_DOCS_PATH+str) then
  begin
    Log.Error('Не удалось открыть закладку из Моих документов :' + str);
    Raise('Не удалось открыть закладку из Моих документов :' + str);  
  end;
  document := GetFromEditor('СПРАВКА ВО ВСЕ ОКНО');
  if NOT IsExists(document) then Raise('Не удалось получить СПРАВКА ВО ВСЕ ОКНО');
  strAfter := CopyToClipboard(document,'STRING','Trim := true') + '*' + FOLDER_PREF; 
  if NOT StringCompare(strAfter, str ) then
  begin
    Log.Error('По закладки перешли не в эталонное место :' + strAfter);
    Raise('По закладки перешли не в эталонное место :' + strAfter);  
  end;
  result := true;
  DeleteAllInMyDoc;  
  GoToMainMenu;
  current_state := ST_MAIN_MENU;
except
  DeleteAllInMyDoc;  
  Log.Message('HLTC74_2_1_3_1_4: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{HLTC74.2.1.3: Перейти по закладке, установленной на справку к документу, когда:
  HLTC74.2.1.3.1: открыт документ, к которому относится справка:
    HLTC74.2.1.3.1.5: в режиме просмотра ССЫЛОК НА ДОКУМЕНТ
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_3_1_5_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC74_2_1_3_1_5';
var
  str: string; 
  document;    
	copy_attempts;
begin
  result := OpenDocByNumber(1055132);  
  if result then
  begin
    document:=OpenInDocument('СПРАВКА'); 
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;     
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');       
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    result := SetBookmark(str);
    if result then
    begin     
      result := OpenDocByNumber(1055132);  
      if result then
      begin
        OpenInDocument('ССЫЛКИ НА ДОКУМЕНТ');          
        result := OpenObjectFromFolder(MY_DOCS_PATH+str); 
        if result then
        begin      
          document := GetFromEditor('СПРАВКА ВО ВСЕ ОКНО');
          result := StringCompare(CopyToClipboard(document,'STRING','Trim := true')+'*'+FOLDER_PREF, str); 
        end
        else
          Log.Warning('Не удалось открыть объект: ' + MY_DOCS_PATH+str);     
      end
      else
        Log.Warning('Не удалоссь открыть документ по Alt+N 1055132');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');
  end;  
  GoToMainMenu;
  current_state := ST_MAIN_MENU;
end;

{HLTC74.2.1.3: Перейти по закладке, установленной на справку к документу, когда:
  HLTC74.2.1.3.2: открыт другой документ (не имеющий отношения к справке):
    HLTC74.2.1.3.2.1: в режиме просмотра текста
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_3_2_1_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC74_2_1_3_2_1';
var
  str: string; 
  document;    
	copy_attempts;
begin
  result := OpenDocByNumber(1055132);  
  if result then
  begin
    document:=OpenInDocument('СПРАВКА'); 
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;     
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');       
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    result := SetBookmark(str);
    if result then
    begin     
      result := OpenDocByNumber(10064306);  
      if result then
      begin
        OpenInDocument('ТЕКСТ');            
        result := OpenObjectFromFolder(MY_DOCS_PATH+str); 
        if result then
        begin     
          document := GetFromEditor('СПРАВКА ВО ВСЕ ОКНО'); 
          result := StringCompare(CopyToClipboard(document,'STRING','Trim := true')+'*'+FOLDER_PREF, str); 
        end
        else
          Log.Warning('Не удалось открыть объект: ' + MY_DOCS_PATH+str);     
      end
      else
        Log.Warning('Не удалось открыть документ по Alt+N 1055132');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');
  end;  
  GoToMainMenu;
  current_state := ST_MAIN_MENU;
end;

{HLTC74.2.1.3: Перейти по закладке, установленной на справку к документу, когда:
  HLTC74.2.1.3.2: открыт другой документ (не имеющий отношения к справке):
    HLTC74.2.1.3.2.2: в режиме просмотра справки
!!!Предусловие Основное Меню}
function  HLTC74_2_1_3_2_2_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC74_2_1_3_2_2';
var
  str: string;
  document;    
	copy_attempts;
begin
  result := OpenDocByNumber(1055132);  
  if result then
  begin
    document:=OpenInDocument('СПРАВКА'); 
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;     
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');       
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    result := SetBookmark(str);
    if result then
    begin     
      result := OpenDocByNumber(10064306);  
      if result then
      begin
        OpenInDocument('СПРАВКА');             
        result := OpenObjectFromFolder(MY_DOCS_PATH+str); 
        if result then
        begin  
          document := GetFromEditor('СПРАВКА ВО ВСЕ ОКНО');    
          result := StringCompare(CopyToClipboard(document,'STRING','Trim := true')+ '*' + FOLDER_PREF, str); 
        end
        else
          Log.Warning('Не удалось открыть объект: ' + MY_DOCS_PATH+str);     
      end
      else
        Log.Warning('Не удалоссь открыть документ по Alt+N 1055132');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');
  end;  
  GoToMainMenu;
  current_state := ST_MAIN_MENU;
end;

{HLTC74.2.1.3: Перейти по закладке, установленной на справку к документу, когда:
  HLTC74.2.1.3.2: открыт другой документ (не имеющий отношения к справке):
    HLTC74.2.1.3.2.3: в режиме просмотра атрибутов
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_3_2_3_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC74_2_1_3_2_3';
var
  str: string;
  document;    
	copy_attempts;
begin
  result := OpenDocByNumber(1055132);  
  if result then
  begin
    document:=OpenInDocument('СПРАВКА'); 
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;     
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');       
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    result := SetBookmark(str);
    if result then
    begin     
      result := OpenDocByNumber(10064306);  
      if result then
      begin
        OpenInDocument('ИНФОРМАЦИЯ О ДОКУМЕНТЕ');             
        result := OpenObjectFromFolder(MY_DOCS_PATH+str); 
        if result then
        begin      
          document := GetFromEditor('СПРАВКА ВО ВСЕ ОКНО');
          result := StringCompare(CopyToClipboard(document,'STRING','Trim := true')+'*'+FOLDER_PREF, str);
        end
        else
          Log.Warning('Не удалось открыть объект: ' + MY_DOCS_PATH+str);     
      end
      else
        Log.Warning('Не удалоссь открыть документ по Alt+N 1055132');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');
  end;  
  GoToMainMenu;
  current_state := ST_MAIN_MENU;
end;

{HLTC74.2.1.3: Перейти по закладке, установленной на справку к документу, когда:
  HLTC74.2.1.3.2: открыт другой документ (не имеющий отношения к справке):
    HLTC74.2.1.3.2.4: в режиме просмотра ССЫЛОК ИЗ ДОКУМЕНТОВ
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_3_2_4_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC74_2_1_3_2_4';
var
  str: string;
  document;    
	copy_attempts;
begin
  result := OpenDocByNumber(1055132);  
  if result then
  begin
    document:=OpenInDocument('СПРАВКА'); 
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;     
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');       
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    result := SetBookmark(str);
    if result then
    begin     
      result := OpenDocByNumber(10064306);  
      if result then
      begin
        OpenInDocument('ССЫЛКИ ИЗ ДОКУМЕНТА');             
        result := OpenObjectFromFolder(MY_DOCS_PATH+str); 
        if result then
        begin    
          document := GetFromEditor('СПРАВКА ВО ВСЕ ОКНО');  
          result := StringCompare(CopyToClipboard(document,'STRING','Trim := true')+'*'+FOLDER_PREF, str); 
        end
        else
          Log.Warning('Не удалось открыть объект: ' + MY_DOCS_PATH+str);     
      end
      else
        Log.Warning('Не удалоссь открыть документ по Alt+N 1055132');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');
  end;  
  GoToMainMenu;
  current_state := ST_MAIN_MENU;
end;

{HLTC74.2.1.3: Перейти по закладке, установленной на справку к документу, когда:
  HLTC74.2.1.3.2: открыт другой документ (не имеющий отношения к справке):
    HLTC74.2.1.3.2.5: в режиме просмотра ССЫЛОК НА ДОКУМЕНТ
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_3_2_5_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC74_2_1_3_2_5';
var
  str: string;  
  document;    
	copy_attempts;
begin
try
  if NOT OpenDocByNumber(1055132) then Raise('Не удалось открвыть документ по Alt+N');
  document:=OpenInDocument('СПРАВКА');
  str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;     
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');       
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;  
  if NOT SetBookMark(str) then Raise('Не удалось установить закладку на "СПРАВКА к документу"');  
  if NOT OpenDocByNumber(10064306) then Raise('Не удалось открыть документ по Alt+N');  
  if NOT IsExists(  OpenInDocument('ССЫЛКИ НА ДОКУМЕНТ') ) then Raise('Не удалось получить ССЫЛКИ НА ДОКУМЕНТ');  
  if NOT OpenObjectFromFolder(MY_DOCS_PATH+str) then Raise('Не открыть закладку из Моих документов!');     
  document:=OpenInDocument('ТЕКСТ');   
  if NOT StringCompare(CopyToClipboard(document,'STRING','Trim := true')+'*'+FOLDER_PREF, str) then
  begin
    Log.Error('Перешли по закладке не в эталонное место!');
    Raise('Перешли по закладке не в эталонное место!');  
  end;
  DeleteAllInMyDoc;
  result := true;
except
  Log.Message( FOLDER_PREF + ': ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  DeleteAllInMyDoc;
  result := false;
  CommonExceptionHandler;
end;
end;
{HLTC74.2.1.3: Перейти по закладке, установленной на справку к документу, когда:
  HLTC74.2.1.3.3: просматривается список, в котором есть документ
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_3_3_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_2_1_3_3'; 
var
  str:string;
  document;  
	copy_attempts;
begin 
  result := OpenDocByNumber(1055132);  
  if result then
  begin
    document:=OpenInDocument('СПРАВКА'); 
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;     
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');       
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    result := SetBookmark(str);
    if result then
    begin
      result := OpenObjectFromFolder(LIST_MAIN, OpenMenuTab);       
      if result then 
      begin                  
        result := OpenObjectFromFolder(MY_DOCS_PATH+str); 
        if result then
        begin
          document := GetFromEditor('СПРАВКА ВО ВСЕ ОКНО');
          result := StringCompare(CopyToClipboard(document,'STRING','Trim := true')+'*'+FOLDER_PREF,  str); 
        end
        else
          Log.Warning('Не удалось открыть объект: ' + MY_DOCS_PATH+str);
      end
      else
        Log.Warning('Не удалось открыть список по верхней ветки рубрикатора');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ; 
end;

{HLTC74.2.1.3: Перейти по закладке, установленной на справку к документу, когда:
  HLTC74.2.1.3.4: просматривается список, в котором нет документа
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_3_4_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_2_1_3_4'; 
var
  str:string;
  document;  
	copy_attempts;
begin 
  result := OpenDocByNumber(1055132);  
  if result then
  begin
    document:=OpenInDocument('СПРАВКА'); 
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;     
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');       
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    result := SetBookmark(str);
    if result then
    begin
      result := OpenEtalonList(LIST_ALLCODES);
      if result then 
      begin             
        result := OpenObjectFromFolder(MY_DOCS_PATH+str); 
        if result then
        begin
          document := GetFromEditor('СПРАВКА ВО ВСЕ ОКНО');
          result := StringCompare(CopyToClipboard(document,'STRING','Trim := true')+'*'+FOLDER_PREF , str);
        end
        else
          Log.Warning('Не удалось открыть объект: ' + MY_DOCS_PATH+str);
      end
      else
        Log.Warning('Не удалось открыть список всех кодексов');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ; 
end;

{HLTC74.2.1.3: Перейти по закладке, установленной на справку к документу, когда:
  HLTC74.2.1.3.5: просматривается список, в котором есть документ,
  и он открыт на синхронном просмотре
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_3_5_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_2_1_3_5'; 
var
  str:string;
  document;  
	copy_attempts;
begin 
  result := OpenDocByNumber(1055132);  
  if result then
  begin
    document:=OpenInDocument('СПРАВКА'); 
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;     
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');       
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    result := SetBookmark(str);
    if result then
    begin
      result := OpenObjectFromFolder(LIST_MAIN, OpenMenuTab);       
      if result then 
      begin      
        OpenInList('СИНХРОННЫЙ ПРОСМОТР');
        result := OpenObjectFromFolder(MY_DOCS_PATH+str); 
        if result then
        begin
          document := GetFromEditor('СПРАВКА ВО ВСЕ ОКНО');
          result := StringCompare(CopyToClipboard(document,'STRING','Trim := true')+'*'+FOLDER_PREF , str);
        end
        else
          Log.Warning('Не удалось открыть объект: ' + MY_DOCS_PATH+str);
      end
      else
        Log.Warning('Не удалось открыть список по верхней ветки рубрикатора');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ; 
end;

{HLTC74.2.1.3: Перейти по закладке, установленной на справку к документу, когда:
  HLTC74.2.1.3.6: просматривается список, в котором нет документа,
  список открыт с синхронным просмотром
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_3_6_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_2_1_3_6'; 
var
  str:string;
  document;  
	copy_attempts;
begin 
  result := OpenDocByNumber(1055132);  
  if result then
  begin
    document:=OpenInDocument('СПРАВКА'); 
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;     
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');       
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    result := SetBookmark(str);
    if result then
    begin
      result := OpenEtalonList(LIST_ALLCODES); 
      if result then 
      begin      
        OpenInList('СИНХРОННЫЙ ПРОСМОТР');
        result := OpenObjectFromFolder(MY_DOCS_PATH+str); 
        if result then
        begin
          document := GetFromEditor('СПРАВКА ВО ВСЕ ОКНО');
          result := StringCompare(CopyToClipboard(document,'STRING','Trim := true')+'*'+FOLDER_PREF , str); 
        end
        else
          Log.Warning('Не удалось открыть объект: ' + MY_DOCS_PATH+str);
      end
      else
        Log.Warning('Не удалось открыть список Всех кодексов'); 
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ; 
end;

{HLTC74.2.1.3: Перейти по закладке, установленной на справку к документу, когда:
  HLTC74.2.1.3.7: просматривается список, с открытым фреймом справка к списку
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_3_7_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_2_1_3_7'; 
var
  str:string;
  document;  
	copy_attempts;
begin 
  result := OpenDocByNumber(1055132);  
  if result then
  begin
    document:=OpenInDocument('СПРАВКА'); 
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;     
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');       
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    result := SetBookmark(str);
    if result then
    begin
      result := OpenObjectFromFolder(LIST_MAIN, OpenMenuTab);       
      if result then 
      begin      
        OpenInList('СПРАВКА К СПИСКУ');        
        result := OpenObjectFromFolder(MY_DOCS_PATH+str); 
        if result then
        begin
          document := GetFromEditor('СПРАВКА ВО ВСЕ ОКНО');
          result := StringCompare(CopyToClipboard(document,'STRING','Trim := true')+'*'+FOLDER_PREF , str);  
        end
        else
          Log.Warning('Не удалось открыть объект: ' + MY_DOCS_PATH+str);
      end
      else
        Log.Warning('Не удалось открыть список по верхней ветки рубрикатора');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ; 
end;

{HLTC74.2.1.3: Перейти по закладке, установленной на справку к документу, когда:
  HLTC74.2.1.3.8: просматривается основное меню
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_3_8_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_2_1_3_8'; 
var
  str:string;
  document;  
	copy_attempts;
begin 
  result := OpenDocByNumber(1055132);  
  if result then
  begin
    document:=OpenInDocument('СПРАВКА'); 
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;     
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');       
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    result := SetBookmark(str);
    if result then
    begin
      GoToMainMenu;          
      result := OpenObjectFromFolder(MY_DOCS_PATH+str); 
      if result then
      begin
        document := GetFromEditor('СПРАВКА ВО ВСЕ ОКНО');
        result := StringCompare(CopyToClipboard(document,'STRING','Trim := true')+'*'+FOLDER_PREF , str);  
      end
      else
        Log.Warning('Не удалось открыть объект: ' + MY_DOCS_PATH+str);      
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ; 
end;

{HLTC74.2.1.3: Перейти по закладке, установленной на справку к документу, когда:
  HLTC74.2.1.3.9: просматривается рубрикатор
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_3_9_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_2_1_3_9'; 
var
  str:string;
  document;  
	copy_attempts;
begin 
  result := OpenDocByNumber(1055132);  
  if result then
  begin
    document:=OpenInDocument('СПРАВКА');         
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;     
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');            
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    result := SetBookmark(str);
    if result then
    begin
      result := OpenObjectFromFolder(LIST_RUBR_MAIN, OpenMenuTab); 
      if result then
      begin         
        result := OpenObjectFromFolder(MY_DOCS_PATH+str); 
        if result then
        begin
          document := GetFromEditor('СПРАВКА ВО ВСЕ ОКНО');
          result := StringCompare(CopyToClipboard(document, 'STRING', 'Trim := true') + '*'+FOLDER_PREF , str);  
        end
        else
          Log.Warning('Не удалось открыть объект: ' + MY_DOCS_PATH+str);      
      end
      else
        Log.Warning('Не удалось открыть: ' + LIST_RUBR_MAIN);        
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ; 
end;

{HLTC74.2.1.3: Перейти по закладке, установленной на справку к документу, когда:
  HLTC74.2.1.3.10: просматривается ППС
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_3_10_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_2_1_3_10'; 
var
  str:string;
  document;  
	copy_attempts;
begin 
  result := OpenDocByNumber(1055132);  
  if result then
  begin
    document:=OpenInDocument('СПРАВКА'); 
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;     
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');       
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    result := SetBookmark(str);
    if result then
    begin
      GoToPPS;          
      result := OpenObjectFromFolder(MY_DOCS_PATH+str); 
      if result then
      begin
        document := GetFromEditor('СПРАВКА ВО ВСЕ ОКНО');
        result := StringCompare(CopyToClipboard(document,'STRING','Trim := true')+'*'+FOLDER_PREF, str);  
        if NOT result then Log.Error('По закладке перешли не в эталонное место : ' + str);
      end
      else
        Log.Warning('Не удалось открыть объект: ' + MY_DOCS_PATH+str);      
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ; 
end;

{HLTC74.2.1.3: Перейти по закладке, установленной на справку к документу, когда:
  HLTC74.2.1.3.11: просматривается ППР
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_3_11_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_2_1_3_11'; 
var
  str:string;
  document;  
	copy_attempts;
begin 
  result := OpenDocByNumber(1055132);  
  if result then
  begin
    document:=OpenInDocument('СПРАВКА'); 
    str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;     
		copy_attempts := 0;
    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
    begin
			Inc(copy_attempts);
      Sys.Keys('[Down]');       
      str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
    end;
    result := SetBookmark(str);
    if result then
    begin
      GoToPPR;          
      result := OpenObjectFromFolder(MY_DOCS_PATH+str); 
      if result then
      begin
        document := GetFromEditor('СПРАВКА ВО ВСЕ ОКНО');       
        result := StringCompare(CopyToClipboard(document,'STRING','Trim := true')+'*'+FOLDER_PREF, str);  
      end
      else
        Log.Warning('Не удалось открыть объект: ' + MY_DOCS_PATH+str);      
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ str +'не удалён');
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ; 
end;

{HLTC74.2.1.4: Перейти по закладке, установленной на комментарий
  в тексте документа, при просмотре в режиме отключенных комментариев (документ должен быть с комментариями):
  HLTC74.2.1.4.1: этого же документа
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_4_1_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_2_1_4_1'; 
  DOC_NUM = 10003000;
  CONTEXT = 'принимаем КОНСТИТУЦИЮ РОССИЙСКОЙ ФЕДЕРАЦИИ';
var
  str:string;
  doc;  
  i:integer;
  obj;
begin 
try
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  doc := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(doc) then Raise('Не удалось обнаружить ТЕКСТ ДОКУМЕНТА');
  if NOT ClickOnContext(doc, CONTEXT) then
    Raise('Не удалось кликнуть по искомому контектсу');    
  Sys.Keys('[Enter]' + keyPause + ' комментарий'+ keyPause+ '[Apps]');
  if NOT SetBookmark('закладка к комментарию ' + FOLDER_PREF, '', 'Мои документы', true, doc) then
    Raise('Не удалось установить закладку');
  if NOT SetCommentsMode ( doc, USER_COMMENTS, MODE_HIDDEN ) then
    Raise ('Не удалось выключить режим показа польз. комментариев');
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');  
  if NOT OpenObjectFromFolder(MY_DOCS_PATH + 'закладка к комментарию '+FOLDER_PREF) then
  begin
    Log.Error('Не удалось открыть объект из Моих документов', str);
    Raise('Не удалось открыть объект из Моих документов');
  end;
  doc := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(doc) then Raise('Не удалось обнаружить ТЕКСТ ДОКУМЕНТА');
  str := CopyToClipboard ( doc, 'STRING', 'Trim:=true' );
  if NOT StringCompare (CONTEXT + '*', str) then
  begin
    Log.Error('Переход по закладке произошёл не в эталонное место', str);  
    Raise('Переход по закладке произошёл не в эталонное место');
  end;
  if DeleteAllUserCommentsFromContents < 1 then
    Log.Warning('Не было удалено ни одного комментария');
  if NOT SetCommentsMode ( doc, USER_COMMENTS, MODE_SHOWN ) then
    Log.Warning('Не удалось выключить режим показа польз. комментариев');
  if NOT DeleteAllInMyDoc then 
    Log.Warning('Не удалось удалить все объекты из моих документов');
  result := true;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ;    
except
  Log.Message ( 'HLTC74_2_1_4_1_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;  
end;

{HLTC74.2.1.4: Перейти по закладке, установленной на комментарий
  в тексте документа, при просмотре в режиме отключенных комментариев (документ должен быть с комментариями):
  HLTC74.2.1.4.2: другого документа
!!!Предусловие Основное Меню
}
function  HLTC74_2_1_4_2_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_2_1_4_2'; 
  DOC_NUM_1 = 10003000;
  DOC_NUM_2 = 1055132;
  CONTEXT = 'память предков';
var
  str:string;
  doc;  
  i:integer;
  obj;
begin 
try
  if NOT OpenDocByNumber(DOC_NUM_1) then Raise('Не удалось открыть документ по Alt+N');
  doc := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(doc) then Raise('Не удалось обнаружить ТЕКСТ ДОКУМЕНТА');
  if NOT ClickOnContext(doc, CONTEXT) then
    Raise('Не удалось кликнуть по искомому контектсу');    
  Sys.Keys('[Enter]' + keyPause + ' комментарий'+ keyPause+ '[Apps]');
  if NOT SetBookmark('закладка к комментарию ' + FOLDER_PREF, '', 'Мои документы', true, doc) then
    Raise('Не удалось установить закладку');
  if NOT SetCommentsMode (doc, USER_COMMENTS, MODE_HIDDEN) then
    Raise ('Не удалось выключить режим показа польз. комментариев');
  if NOT OpenDocByNumber(DOC_NUM_2) then Raise('Не удалось открыть документ по Alt+N');  
  if NOT OpenObjectFromFolder(MY_DOCS_PATH + 'закладка к комментарию ' + FOLDER_PREF) then
  begin
    Log.Error('Не удалось открыть объект из Моих документов', str);
    Raise;
  end;
  doc := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(doc) then Raise('Не удалось обнаружить ТЕКСТ ДОКУМЕНТА');
  str := CopyToClipboard ( doc, 'STRING', 'Trim:=true' );
  if NOT StringCompare ('*' + CONTEXT + '*', str ) then
  begin
    Log.Error('Переход по закладке произошёл не в эталонное место', str);  
    Raise('Переход по закладке произошёл не в эталонное место');
  end;
  if NOT OpenDocByNumber(DOC_NUM_1) then Raise('Не удалось открыть документ по Alt+N');
  doc := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(doc) then Raise('Не удалось обнаружить ТЕКСТ ДОКУМЕНТА');
  if DeleteAllUserCommentsFromContents < 1 then
    Log.Warning('Не было удалено ни одного комментария');
  if NOT SetCommentsMode ( doc, USER_COMMENTS, MODE_SHOWN ) then
    Log.Warning('Не удалось включить режим показа польз. комментариев');
  if NOT DeleteAllInMyDoc then 
    Log.Warning('Не удалось удалить все объекты из моих документов');
  result := true;
  GoToMainMenu;
  current_state := ST_MAIN_MENU ;    
except
  Log.Message ( 'HLTC74_2_1_4_2_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;  
end;

{HLTC74.2.2: Загрузка списка
  HLTC74.2.2.4: загрузить список, состоящий из всех документов базы.
!!!Предусловие КЗ ППР
}
function  HLTC74_2_2_4_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC74_2_2_4';
var
  allDoc;   
begin
	result := False;
  allDoc := GetListOfAllDocuments;
  if IsExists(allDoc) then
  begin
    result := SimpleSaveToFolders('Список всех документов_'+FOLDER_PREF);
    if result then
    begin     
      result := OpenObjectFromFolder(MY_DOCS_PATH + 'Список всех документов_'+FOLDER_PREF);
      if result then
      begin
        result := IsExists(GetFromList('СПИСОК ДОКУМЕНТОВ'));
        if NOT result then     
          Log.Error('объект "Мои документы\Список всех документов_'+FOLDER_PREF+'"');
      end
      else
        Log.Warning('Не удалось открыть объект "Мои документы\Список всех документов_'+FOLDER_PREF+'"');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH + 'Список всех документов_'+FOLDER_PREF) then
          Log.Warning('Объект Мои документы\Список всех документов_'+ FOLDER_PREF +'не удалён'); 
    end
    else
      Log.Warning('Не удалось сохранить закладку на список всех документов');
  end
  else
    Log.Warning('Не удалось построить Список всех документов');
  GoToMainMenu;
  current_state := ST_MAIN_MENU ;      
end;

{HLTC74.2.2.5: загрузить список, когда:
  HLTC74.2.2.5.7: просматривается список, с открытым фреймом справка к списку
!!!Предусловие КЗ ППР
}
function HLTC74_2_2_5_7_Execute (var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC74_2_2_5_7';
var
  allDoc;   
begin
	result := False;
  allDoc := GetListOfAllDocuments;
  if IsExists(allDoc) then
  begin
    result := SimpleSaveToFolders('Список всех документов_'+FOLDER_PREF);
    if result then
    begin  
      OpenInList('СПРАВКА К СПИСКУ');   
      result := OpenObjectFromFolder(MY_DOCS_PATH + 'Список всех документов_'+FOLDER_PREF);
      if result then
      begin
        result := IsExists(GetFromList('СПИСОК ДОКУМЕНТОВ'));
        if NOT result then     
          Log.Error('объект "Мои документы\Список всех документов_'+FOLDER_PREF+'"');
      end
      else
        Log.Warning('Не удалось открыть объект "Мои документы\Список всех документов_'+FOLDER_PREF+'"');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH + 'Список всех документов_'+FOLDER_PREF) then
          Log.Warning('Объект Мои документы\Список всех документов_'+ FOLDER_PREF +'не удалён'); 
    end
    else
      Log.Warning('Не удалось сохранить закладку на список всех документов');
  end
  else
    Log.Warning('Не удалось построить Список всех документов');
  GoToMainMenu;
  current_state := ST_MAIN_MENU ;      
end;

{HLTC74.2.2.5: загрузить список, когда:
  HLTC74.2.2.5.8: просматривается основное меню
!!!Предусловие КЗ ППР
}
function HLTC74_2_2_5_8_Execute (var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC74_2_2_5_8';
var
  allDoc;   
begin
	result := False;
  allDoc := GetListOfAllDocuments;
  if IsExists(allDoc) then
  begin
    result := SimpleSaveToFolders('Список всех документов_'+FOLDER_PREF);
    if result then
    begin  
      GoToMainMenu;   
      result := OpenObjectFromFolder(MY_DOCS_PATH + 'Список всех документов_'+FOLDER_PREF);
      if result then
      begin
        result := IsExists(GetFromList('СПИСОК ДОКУМЕНТОВ'));
        if NOT result then     
          Log.Error('объект "Мои документы\Список всех документов_'+FOLDER_PREF+'"');
      end
      else
        Log.Warning('Не удалось открыть объект "Мои документы\Список всех документов_'+FOLDER_PREF+'"');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH + 'Список всех документов_'+FOLDER_PREF) then
          Log.Warning('Объект Мои документы\Список всех документов_'+ FOLDER_PREF +'не удалён'); 
    end
    else
      Log.Warning('Не удалось сохранить закладку на список всех документов');
  end
  else
    Log.Warning('Не удалось построить Список всех документов');
  GoToMainMenu;
  current_state := ST_MAIN_MENU ;      
end;

{HLTC74.2.2.5: загрузить список, когда:
  HLTC74.2.2.5.9: просматривается рубрикатор
!!!Предусловие КЗ ППР
}
function HLTC74_2_2_5_9_Execute (var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC74_2_2_5_9';
var
  allDoc;   
begin
	result := False;
  allDoc := GetListOfAllDocuments;
  if IsExists(allDoc) then
  begin
    result := SimpleSaveToFolders('Список всех документов_'+FOLDER_PREF);
    if result then
    begin  
      result := OpenObjectFromFolder(LIST_RUBR_MAIN ,OpenMenuTab);    
      if result then
      begin
        result := OpenObjectFromFolder(MY_DOCS_PATH + 'Список всех документов_'+FOLDER_PREF);
        if result then
        begin
          result := IsExists(GetFromList('СПИСОК ДОКУМЕНТОВ'));
          if NOT result then     
            Log.Error('объект "Мои документы\Список всех документов_'+FOLDER_PREF+'"');
        end
        else
          Log.Warning('Не удалось открыть объект "Мои документы\Список всех документов_'+FOLDER_PREF+'"');
      end
      else
        Log.Warning('Не удалось открыть объект : ' + LIST_RUBR_MAIN);
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH + 'Список всех документов_'+FOLDER_PREF) then
          Log.Warning('Объект Мои документы\Список всех документов_'+ FOLDER_PREF +'не удалён'); 
    end
    else
      Log.Warning('Не удалось сохранить закладку на список всех документов');
  end
  else
    Log.Warning('Не удалось построить Список всех документов');
  GoToMainMenu;
  current_state := ST_MAIN_MENU ;      
end;

{HLTC74.2.2.5: загрузить список, когда:
  HLTC74.2.2.5.10: просматривается ППС
!!!Предусловие КЗ ППР
}
function HLTC74_2_2_5_10_Execute (var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC74_2_2_5_10';
var
  allDoc;   
begin
	result := False;
  allDoc := GetListOfAllDocuments;
  if IsExists(allDoc) then
  begin
    result := SimpleSaveToFolders('Список всех документов_'+FOLDER_PREF);
    if result then
    begin  
      GoToPPS;   
      result := OpenObjectFromFolder(MY_DOCS_PATH + 'Список всех документов_'+FOLDER_PREF);
      if result then
      begin
        result := IsExists(GetFromList('СПИСОК ДОКУМЕНТОВ'));
        if NOT result then     
          Log.Error('объект "Мои документы\Список всех документов_'+FOLDER_PREF+'"');
      end
      else
        Log.Warning('Не удалось открыть объект "Мои документы\Список всех документов_'+FOLDER_PREF+'"');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH + 'Список всех документов_'+FOLDER_PREF) then
          Log.Warning('Объект Мои документы\Список всех документов_'+ FOLDER_PREF +'не удалён'); 
    end
    else
      Log.Warning('Не удалось сохранить закладку на список всех документов');
  end
  else
    Log.Warning('Не удалось построить Список всех документов');
  GoToMainMenu;
  current_state := ST_MAIN_MENU ;      
end;

{HLTC74.2.2.5: загрузить список, когда:
  HLTC74.2.2.5.11: просматривается ППР
!!!Предусловие КЗ ППР
}
function HLTC74_2_2_5_11_Execute (var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC74_2_2_5_11';
var
  allDoc;   
begin
	result := False;
  allDoc := GetListOfAllDocuments;
  if IsExists(allDoc) then
  begin
    result := SimpleSaveToFolders('Список всех документов_'+FOLDER_PREF);
    if result then
    begin  
      GoToPPR;   
      result := OpenObjectFromFolder(MY_DOCS_PATH + 'Список всех документов_'+FOLDER_PREF);
      if result then
      begin
        result := IsExists(GetFromList('СПИСОК ДОКУМЕНТОВ'));
        if NOT result then     
          Log.Error('объект "Мои документы\Список всех документов_'+FOLDER_PREF+'"');
      end
      else
          Log.Warning('Не удалось открыть объект "Мои документы\Список всех документов_'+FOLDER_PREF+'"');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH + 'Список всех документов_'+FOLDER_PREF) then
          Log.Warning('Объект Мои документы\Список всех документов_'+ FOLDER_PREF +'не удалён'); 
    end
    else
      Log.Warning('Не удалось сохранить закладку на список всех документов');
  end
  else
    Log.Warning('Не удалось построить Список всех документов');
  GoToMainMenu;
  current_state := ST_MAIN_MENU ;      
end;

{HLTC74.2.2.5: загрузить список, когда:
  HLTC74.2.2.5.12: просматривается список, открытый с синхронным просмотром
!!!Предусловие КЗ ППР
}
function HLTC74_2_2_5_12_Execute (var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC74_2_2_5_12';
var
  allDoc;   
begin
	result := False;
  allDoc := GetListOfAllDocuments;
  if IsExists(allDoc) then
  begin
    result := SimpleSaveToFolders('Список всех документов_'+FOLDER_PREF);
    if result then
    begin  
      OpenInList('СИНХРОННЫЙ ПРОСМОТР');   
      result := OpenObjectFromFolder(MY_DOCS_PATH + 'Список всех документов_'+FOLDER_PREF);
      if result then
      begin
        result := IsExists(GetFromList('СПИСОК ДОКУМЕНТОВ'));
        if NOT result then     
          Log.Error('объект "Мои документы\Список всех документов_'+FOLDER_PREF+'"');
      end
      else
          Log.Warning('Не удалось открыть объект "Мои документы\Список всех документов_'+FOLDER_PREF+'"');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH + 'Список всех документов_'+FOLDER_PREF) then
          Log.Warning('Объект Мои документы\Список всех документов_'+ FOLDER_PREF +'не удалён'); 
    end
    else
      Log.Warning('Не удалось сохранить закладку на список всех документов');
  end
  else
    Log.Warning('Не удалось построить Список всех документов');
  GoToMainMenu;
  current_state := ST_MAIN_MENU ;      
end;

{HLTC74.2.2.5: загрузить список, когда:
  HLTC74.2.2.5.13: открыт документ
!!!Предусловие КЗ ППР
}
function HLTC74_2_2_5_13_Execute (var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC74_2_2_5_13';
var
  allDoc;   
begin
	result := False;
  allDoc := GetListOfAllDocuments;
  if IsExists(allDoc) then
  begin
    result := SimpleSaveToFolders('Список всех документов_'+FOLDER_PREF);
    if result then
    begin  
      result := DocumentWork.OpenDocByNumber(10003000);
      if result then
      begin   
        result := OpenObjectFromFolder(MY_DOCS_PATH + 'Список всех документов_'+FOLDER_PREF);
        if result then
        begin
          result := IsExists(GetFromList('СПИСОК ДОКУМЕНТОВ'));
          if NOT result then     
            Log.Error('объект "Мои документы\Список всех документов_'+FOLDER_PREF+'"');
        end
        else
          Log.Warning('Не удалось открыть объект "Мои документы\Список всех документов_'+FOLDER_PREF+'"');
      end
      else  
        Log.Warning('Не удалось открыть документ по Alt+N 10003000');  
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH + 'Список всех документов_'+FOLDER_PREF) then
          Log.Warning('Объект Мои документы\Список всех документов_'+ FOLDER_PREF +'не удалён'); 
    end
    else
      Log.Warning('Не удалось сохранить закладку на список всех документов');
  end
  else
    Log.Warning('Не удалось построить Список всех документов');
  GoToMainMenu;
  current_state := ST_MAIN_MENU ;      
end;

{HLTC74.2.3: Загрузка запроса
  HLTC74.2.3.1: Загрузка запроса в КЗ
    HLTC74.2.3.1.2: Войти в ППР и попробовать загрузить запросы:
      HLTC74.2.3.1.2.4: Запрос по ППР
!!!Предусловие КЗ ППР
}
function HLTC74_2_3_1_2_4_Execute (var  current_state: OleVariant): OleVariant;
const
  PREF = '(HLTC74_2_3_1_2_4)';
var
  obj;
  cardData;
begin
try
  cardData := [
  	CARD_PPR, ([([
  	FD_WORDS_IN_CAPTION, ([
  		'конституция']) ]),([
  	FD_WORDS_IN_TEXT, ([
  		'россия']) ]),([
  	FD_TYPE, ([
  		'[ИЛИ]Комментарии',
  		'[ИЛИ]Акт']) ]),([
  	FD_SOURCE, ([
  		'[ИЛИ]Президент России и СССР\Президент России']) ]),([
  	FD_THEME, ([
  		'[ИЛИ]Основы государственно-правового устройства\Основы конституционного строя']) ]),([
  	FD_ACCEPTANCE_DATE_FROM, ([
  		'01.10.2006']) ]),([
  	FD_ACCEPTANCE_DATE_TO, ([
  		'31.10.2006']) ]),([
  	FD_NUMBER, ([
  		'01-01/1302']) ]),([
  	FD_MU_REG_DATE_FROM, ([
  		'11.10.2006']) ]),([
  	FD_MU_REG_DATE_TO, ([
  		'11.10.2006']) ]),([
  	FD_MU_REG_NUMBER, ([
  		'1012']) ]),([
  	FD_MU_REG_STATUS, ([
  		'Зарегистрированные']) ]),([
  	FD_MEANING, ([
  		'Индивидуальные']) ]),([
  	FD_STATUS, ([
  		'Действующие']) ]),([
  	FD_INOPERATIVE_EDITION, ([
  		'Нет']) ]),([
  	FD_KIND_OF_INFORMATION, ([
  		'[ИЛИ]Акты органов власти']) ]),([
  	FD_REGULATION_TERRITORY, ([
  		'[ИЛИ]Субъекты Российской Федерации\Москва',
  		'[ИЛИ]Субъекты Российской Федерации\Читинская область\Читинская область']) ]),([
  	FD_INFORMATIONAL_BLOCK, ([
  		'Международное право (Россия - СНГ)']) ]) ]) 
  ];
  if NOT FillPPRCard(cardData) then Raise('Не удалось заполнить КЗ ППР');
  if NOT SimpleSaveToFolders('Запрос' + PREF) then Raise('Не удалось сохранить запрос');
  if NOT OpenObjectFromFolder(MY_DOCS_PATH + 'Запрос' + PREF) then
  begin  
    Log.Error('Не удалось открыть запрос из Моих документов');
    Raise;
  end;  
  obj :=  GetFromPPR('КАРТОЧКА ЗАПРОСА');
  if NOT IsExists(obj) then Raise('Не удалось получить КЗ');
  if NOT CompareQueryCardData(cardData, ExtractQueryCardData(obj)) then
  begin
    Log.Error('КЗ после загрузки из моих документов не равна эталонной');
    Raise;
  end;
  if NOT DeleteAllInMyDoc then                    
    Log.Warning('Не удалось удалить все объекты из моих документов');
  result := true;
  GoToMainMenu;
except
  Log.Message('HLTC74_2_3_1_2_4_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{HLTC74.2.3.1.3: Загрузить запрос сразу после сохранения
!!!Предусловие КЗ ППР
}
function HLTC74_2_3_1_3_Execute (var  current_state: OleVariant): OleVariant;
const
  PREF = '(HLTC74_2_3_1_3)';
var
  obj;  
  cardData;
begin                                  
try
  cardData := [
  	CARD_PPR, ([([
  	FD_WORDS_IN_CAPTION, ([
  		'конституция']) ]),([
  	FD_WORDS_IN_TEXT, ([
  		'россия']) ]),([
  	FD_TYPE, ([
  		'[ИЛИ]Комментарии',
  		'[ИЛИ]Акт']) ]),([
  	FD_SOURCE, ([
  		'[ИЛИ]Президент России и СССР\Президент России']) ]),([
  	FD_THEME, ([
  		'[ИЛИ]Основы государственно-правового устройства\Основы конституционного строя']) ]),([
  	FD_ACCEPTANCE_DATE_FROM, ([
  		'01.10.2006']) ]),([
  	FD_ACCEPTANCE_DATE_TO, ([
  		'31.10.2006']) ]),([
  	FD_NUMBER, ([
  		'01-01/1302']) ]),([
  	FD_MU_REG_DATE_FROM, ([
  		'11.10.2006']) ]),([
  	FD_MU_REG_DATE_TO, ([
  		'11.10.2006']) ]),([
  	FD_MU_REG_NUMBER, ([
  		'1012']) ]),([
  	FD_MU_REG_STATUS, ([
  		'Зарегистрированные']) ]),([
  	FD_MEANING, ([
  		'Индивидуальные']) ]),([
  	FD_STATUS, ([
  		'Действующие']) ]),([
  	FD_INOPERATIVE_EDITION, ([
  		'Нет']) ]),([
  	FD_KIND_OF_INFORMATION, ([
  		'[ИЛИ]Акты органов власти']) ]),([
  	FD_REGULATION_TERRITORY, ([
  		'[ИЛИ]Субъекты Российской Федерации\Москва',
  		'[ИЛИ]Субъекты Российской Федерации\Читинская область\Читинская область']) ]),([
  	FD_INFORMATIONAL_BLOCK, ([
  		'Международное право (Россия - СНГ)']) ]) ]) 
  ];
  if NOT FillPPRCard(cardData) then Raise('Не удалось заполнить КЗ ППР');
  if NOT SimpleSaveToFolders('Запрос' + PREF) then Raise('Не удалось сохранить запрос');
  GoToMainMenu;
  if NOT OpenObjectFromFolder(MY_DOCS_PATH + 'Запрос' + PREF) then   
    Raise('Не удалось открыть запрос из Моих документов');
  obj :=  GetFromPPR('КАРТОЧКА ЗАПРОСА');
  if NOT IsExists(obj) then Raise('Не удалось получить КЗ');
  if NOT CompareQueryCardData(cardData, ExtractQueryCardData(obj)) then
  begin
    Log.Error('КЗ после загрузки из моих документов не равна эталонной');
    Raise;
  end;
  if NOT DeleteAllInMyDoc then                    
    Log.Warning('Не удалось удалить все объекты из моих документов');
  result := true;
  GoToMainMenu;
except
  Log.Message('HLTC74_2_3_1_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{HLTC74.2.3.2: Загрузка запроса с выполнением
  HLTC74.2.3.2.1: Войти в папки и загрузить-выполнить запрос:
!!!Предусловие КЗ ППР
}
function HLTC74_2_3_2_1_Execute (var  current_state: OleVariant): OleVariant;
const

  PREF = '(HLTC74_2_3_2_1)';
var
  obj;
  listArray;
  cardData;
begin                                  
try
  cardData :=
    [
    	CARD_PPR, 
      ([
        ([ FD_WORDS_IN_CAPTION,   ([ 'конституция']) ]),        
        ([ FD_INOPERATIVE_EDITION,([ 'Да']) ])
      ])
    ];
  if NOT FillPPRCard(cardData) then
    Raise('Не получилось заполнить карточку ППР!');
  
  if NOT SimpleSaveToFolders('Запрос' + PREF) then Raise('Не удалось сохранить запрос');
  Sys.Keys('^[Enter]');
  obj := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(obj) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ после поиска по реквизитам');
  listArray := GetElementsFromTree(obj);    
  GoToMainMenu;
  obj := OpenMyDocTab;
  if NOT Position_Internal(obj, MY_DOCS_PATH + 'Запрос' + PREF, '\', false, 'isPressHome:=true') then
    Raise('Не удалось спозиционироваться на  запрос в Моих документов');
  Delay(Options.Run.Timeout div 6)  ;
  Sys.Keys('[Apps]');
  if NOT ClickByPopupMenuItem(obj, 'Выполнить запрос') then 
    Raise('Не удалось вызвать пункт контекстного меню "Выпонить запрос" для запроса в Моих документах');
  obj := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(obj) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ после поиска по реквизитам');
  if NOT CompareArray(listArray, GetElementsFromTree(obj)) then
  begin
    Log.Error('После выполнения запроса, полученный список не равен эталонному');
    Raise;
  end;
  if NOT DeleteAllInMyDoc then                    
    Log.Warning('Не удалось удалить все объекты из моих документов');
  result := true;
  GoToMainMenu;
except
  Log.Message('HLTC74_2_3_2_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{HLTC74.2.3.2: Загрузка запроса с выполнением
   HLTC74.2.3.2.2: Загрузить-выполнить запрос в другой базе, часть поисковых атрибутов
   которого отсутствует в текущей базе
!!!По умолчанию запускаемся со старой базой.
}
function HLTC74_2_3_2_2_Execute (var  current_state: OleVariant): OleVariant;
const
  PREF = '(HLTC74_2_3_2_2)';
var
  obj;  
  login;
  pass;
  count;
  cardData;
  listArray;
  listArrayEtalon;
begin                                  
try
  cardData := [
  	CARD_PPR, ([([
	  FD_THEME, ([
		  '[ИЛИ]Еще один класс. Верхний уровень\Еще один класс. Нижний уровень 3',
      '[ИЛИ]My Class C',
		  '[ИЛИ]My Class D']) ]),([
  	FD_INOPERATIVE_EDITION, ([
		  'Да']) ]) ]) 
  ];  
  listArrayEtalon := ['Документ с нормальной цепочкой редакций. ACTIVE 21/04/2003'];
  //Логинимся пользователем ..user
  login := PREF + '_user';
  pass  := PREF;
  count := 5;
  RestartF1Shell(count, Options.Run.Timeout div 6, login, pass);
  if NOT FillPPRCard(cardData) then Raise('Не удалось заполнить КЗ ППР');
  if NOT SimpleSaveToFolders('Запрос' + PREF) then Raise('Не удалось сохранить запрос');
  if NOT SwitchDataBase(DBT_NEW) then Raise('Не удалось переключить базу на DBT_NEW');
  LoginAnyhow(login, pass);
  obj := OpenMyDocTab;
  if NOT Position_Internal(obj, MY_DOCS_PATH + 'Запрос' + PREF, '\', true, 'isPressHome:=true') then
  begin  
    Log.Error('Не удалось спозиционироваться на запрос c частично отсутствующими поисковыми реквизитами в текущей базе');
    Raise;
  end;
  Sys.Keys('[Apps]');
  if NOT ClickByPopupMenuItem(obj, 'Выполнить запрос') then 
    Raise('Не удалось вызвать пункт контекстного меню "Выпонить запрос" для запроса c частично отсутствующими поисковыми реквизитами в текущей базе');
  obj :=  GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(obj) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');
  listArray := GetElementsFromTree(obj);
  if NOT CompareArray(listArray, listArrayEtalon) then
  begin
    Log.Error('Список, построенный по запросу с частично отсутствующими поисковыми атрибутами в текуще базе не равен эталонному');
    Raise;
  end;
  if NOT DeleteAllInMyDoc then                    
    Log.Warning('Не удалось удалить все объекты из моих документов');     
  result := true; 
  GoToMainMenu; 
except
  Log.Message('HLTC74_2_3_2_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{HLTC74.2.3.2: Загрузка запроса с выполнением
  HLTC74.2.3.2.3: Загрузить запрос из папки сразу после сохранения
!!!Предусловие КЗ ППР
}
function HLTC74_2_3_2_3_Execute (var  current_state: OleVariant): OleVariant;
const  
  PREF = '(HLTC74_2_3_2_3)';
var
  obj;
  listArray;
  cardData;
begin                                  
try
	cardData :=
    [
    	CARD_PPR, 
      ([
        ([ FD_WORDS_IN_CAPTION,   ([ 'конституция']) ]),        
        ([ FD_INOPERATIVE_EDITION,([ 'Да']) ])
      ])
    ];
  if NOT FillPPRCard(cardData) then
    Raise('Не получилось заполнить карточку ППР!');
  
  Sys.Keys('^[Enter]');
  obj := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(obj) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ после поиска по реквизитам');
  listArray := GetElementsFromTree(obj);  
  if NOT GoToPPR then Raise('Не удалось открыть ППР');
  if NOT FillPPRCard(cardData) then
    Raise('Не получилось заполнить карточку ППР!');
  if NOT SimpleSaveToFolders('Запрос' + PREF) then Raise('Не удалось сохранить запрос');
  obj := OpenMyDocTab;
  if NOT Position_Internal(obj, MY_DOCS_PATH + 'Запрос' + PREF, '\', false, 'isPressHome:=true') then
    Raise('Не удалось спозиционироваться на  запрос в Моих документов');
  Delay(Options.Run.Timeout div 6)  ;
  Sys.Keys('[Apps]');
  if NOT ClickByPopupMenuItem(obj, 'Выполнить запрос') then 
    Raise('Не удалось вызвать пункт контекстного меню "Выпонить запрос" для запроса в Моих документах');
  obj := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(obj) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ после поиска по реквизитам');
  if NOT CompareArray(listArray, GetElementsFromTree(obj)) then
  begin
    Log.Error('После выполнения запроса, полученный список не равен эталонному');
    Raise;
  end;
  if NOT DeleteAllInMyDoc then                    
    Log.Warning('Не удалось удалить все объекты из Моих документов');
  result := true;
  GoToMainMenu;
except
  Log.Message('HLTC74_2_3_2_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC74.2.4: Просмотр пустой папки
  HLTC74.2.4.1: При клике на пустую папку должно выдаваться сообщение "В папке «ИМЯ ПАПКИ» не содержится 
  ни одного элемента".
}
function HLTC74_2_4_1_Execute (var  current_state: OleVariant): OleVariant;
var
  myDocWnd;
  x, y;
  info;
begin                                  
try  
  myDocWnd := OpenMyDocTab;
  if NOT DeleteAllInMyDoc then
    Raise('Не удалось удалить все объекты из Моих документов!');    
  if NOT Position_Internal(myDocWnd, 'Мои документы', '\', true, 'IsPressHome:=true') then  
    Raise('Не удалось спозиционироваться на Моих документах');
  if NOT GetTextSelectionCoords(myDocWnd, x, y) then
    Raise('Не удалось найти выделенный элемент в Моих Документах');      
  myDocWnd.Click(x, y);  
  
  info := WaitForInfoWindow;
  if NOT StringCompare('В папке "Мои документы" не содержится ни одного элемента.', info) then
  begin
    Log.Error('При клике по пустой папке не появилось эталонное предупреждение', str);
    Raise('При клике по пустой папке не появилось эталонное предупреждение');
  end;
  
  result := true;
  GoToMainMenu;
except
  Log.Message('HLTC74_2_4_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{HLTC74.3: Сохранение в папку
  HLTC74.3.1: Сохранение списка
    HLTC74.3.1.1: Сохранить список, содержащий один документ
!!!Предусловие КЗ ППР
}
function HLTC74_3_1_1_Execute (var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF ='HLTC74_3_1_1';  
begin
  result := OpenObjectFromFolder(LIST_MAIN, OpenMenuTab); 
  if result then
  begin 
    GetFromList('СПИСОК ДОКУМЕНТОВ').SetFocus;       
    Sys.Keys('[Home][Down]![End]');
    DelWithConfirm;                             //Удаляем и Гасим подтверждение 
    result := SimpleSaveToFolders('Список из одного документа_'+FOLDER_PREF); 
    if result then
    begin
      result := OpenObjectFromFolder(MY_DOCS_PATH + 'Список из одного документа_'+FOLDER_PREF);  
      if NOT result then      
        Log.Error('Не удалось найти и открыть сохранённый объект "Список из одного документа_'+FOLDER_PREF+'"');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH + 'Список из одного документа_'+FOLDER_PREF) then
        Log.Warning('Объект Мои документы\Список из одного документа_'+FOLDER_PREF +'не удалён');  
    end
    else
      Log.Error('Не удалось сохранить список из одного документа');    
  end
  else 
    Log.Warning('Не удалось открыть объект:'+ LIST_MAIN);  
  GoToMainMenu;
  current_state := ST_MAIN_MENU;     
end;

{HLTC74.3.1: Сохранение списка
  HLTC74.3.1.2: Сохранить список, дав ему название длиннее 300 символов 
}
function HLTC74_3_1_2_Execute (var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF ='HLTC74_3_1_2';  
var
  str:string;
  i,j:integer;  
begin
  result := OpenObjectFromFolder(LIST_MAIN, OpenMenuTab); 
  if result then
  begin 
    GetFromList('СПИСОК ДОКУМЕНТОВ').SetFocus; 
    str := '';   
    for i:=1 to 30 do
      for j:= 0 to 9 do 
        str := str + inttostr(j)     ;
    result := SimpleSaveToFolders(str+'_'+FOLDER_PREF); 
    if result then
    begin
      result := OpenObjectFromFolder(MY_DOCS_PATH+str+'_'+FOLDER_PREF);  
      if NOT result then      
        Log.Error('Не удалось найти и открыть сохранённый объект "'+str+'_'+FOLDER_PREF+'"');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+str+'_'+FOLDER_PREF) then
        Log.Warning('Объект ' + MY_DOCS_PATH+str+'_'+FOLDER_PREF +'не удалён');  
    end
    else
      Log.Error('Не удалось сохранить список c 300 символами в названии');    
  end
  else 
    Log.Warning('Не удалось открыть: '+ LIST_MAIN);     
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
end;

{HLTC74.3.1: Сохранение списка
  HLTC74.3.1.3: Сохранить список, содержащий все документы базы
  (список можно получить проведя поиск без параметров – т.е. по пустой КЗ ППР или ППС).
    HLTC74.3.1.3.1: Имя такого списка по умолчанию должно быть
    «По запросу: список всех документов».
!!!Предусловие КЗ ППР
}
function HLTC74_3_1_3_1_Execute (var  current_state: OleVariant): OleVariant;
var
  list;
begin
  list := GetListOfAllDocuments;
  if IsExists(list) then 
  begin 
    list.SetFocus;           
    result := SimpleSaveToFolders(''); 
    if result then
    begin
      result := OpenObjectFromFolder(MY_DOCS_PATH + 'Список всех документов');  
      if NOT result then      
        Log.Error('Не удалось найти "Список всех документов"');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH + 'Список всех документов') then
        Log.Warning('Объект "Мои документы\Список всех документов" не удалён');
    end
    else
      Log.Error('Не удалось сохранить список с именем по умолчанию');    
  end
  else 
    Log.Warning('Не удалось построить список всех документов');     
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
end;

{HLTC74.3.1: Сохранение списка
  HLTC74.3.1.4: При сохранении списка выбрать другой сохраненный в папке элемент. Проверить:
    HLTC74.3.1.4.1: При сохранении списка выбрать другой список. Нажать кнопку «Сохранить» - список
    заменится списком (результирующий список будет таким же как сохраняемый)
!!!Предусловие КЗ ППР
}
function HLTC74_3_1_4_1_Execute (var  current_state: OleVariant): OleVariant;
const FOLDER_PREF ='HLTC74_3_1_4_1';
var
  list,listTo,listFree;
  listArray;
begin
  list := GetListOfAllDocuments;
  if IsExists(list) then 
  begin 
    list.SetFocus;           
    result := SimpleSaveToFolders('Список_'+FOLDER_PREF); 
    if result then
    begin    
      result := OpenObjectFromFolder(LIST_MAIN, OpenMenuTab);      
      if result then  
      begin
        listTo := GetFromList('СПИСОК ДОКУМЕНТОВ');
        listTo.SetFocus;
        listArray := GetElementsFromTree(listTo);  
        result := SaveToFoldersExt(MY_DOCS_PATH + 'Список_'+FOLDER_PREF,'Список_'+FOLDER_PREF,''); 
        if result then
        begin
          result := OpenObjectFromFolder(MY_DOCS_PATH + 'Список_'+FOLDER_PREF);
          if result then
          begin
            listFree := GetFromList('СПИСОК ДОКУМЕНТОВ');
            listFree.SetFocus;
            result := CompareArray(GetElementsFromTree(listFree),listArray);
            if NOT result then
              Log.Error('Результирующий список не равен исходному списку');
          end
          else
            Log.Warning('Не удалось открыть объект "Мои документы\Список_'+FOLDER_PREF);  
        end
        else
          Log.Warning('Не удалось перезаписать список');
      end
      else
        Log.Warning('Не удалось открыть список по первой ветки рубрикатора');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH + 'Список_'+FOLDER_PREF) then
        Log.Warning('Объект "Мои документы\Список_'+FOLDER_PREF+'" не удалён');
    end
    else
      Log.Error('Не удалось сохранить список_'+FOLDER_PREF);    
  end
  else 
    Log.Warning('Не удалось построить список всех документов');     
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
end;

{HLTC74.3.1: Сохранение списка
  HLTC74.3.1.4: При сохранении списка выбрать другой сохраненный в папке элемент. Проверить:
    HLTC74.3.1.4.2: При сохранении списка выбрать другой список.
    Функция «Добавить» - список объединится со списком
    (результирующий список будет состоять из элементов,
    бывших как в первом, так и втором списках)
!!!Предусловие Основное меню
}
function HLTC74_3_1_4_2_Execute (var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF ='HLTC74_3_1_4_2';  
var
  list,listTo;
  listArray;  
  i,j:integer;      
begin
  result := OpenObjectFromFolder(LIST_MAIN, OpenMenuTab); 
  if result then
  begin 
    list := GetFromList('СПИСОК ДОКУМЕНТОВ');
    list.SetFocus;
    listArray := GetElementsFromTree(list);           
    randomize;
    i := random(35)+5;
    Sys.Keys('[Home]');
    for j:= 0 to i do
      Sys.Keys('[Down]');
    Sys.Keys('![End]');
    DelWithConfirm;                             //Удаляем и Гасим подтверждение 
    result := SimpleSaveToFolders('Список_'+FOLDER_PREF); 
    if result then
    begin
      result := OpenObjectFromFolder(LIST_MAIN, OpenMenuTab); 
      if result then
      begin
        GetFromList('СПИСОК ДОКУМЕНТОВ').SetFocus;
        for j:= 0 to i-1 do
          Sys.Keys('[Down]');
        Sys.Keys('![Home]');
        DelWithConfirm;  
        result := SaveToFoldersExt(MY_DOCS_PATH + 'Список_'+FOLDER_PREF,'Список_'+FOLDER_PREF,'','Добавить');
        if result then
        begin
          result := OpenObjectFromFolder(MY_DOCS_PATH + 'Список_'+FOLDER_PREF);
          if result then
          begin
            listTo := GetFromList('СПИСОК ДОКУМЕНТОВ');
            listTo.SetFocus;
            result := CompareArray(GetElementsFromTree(listTo),listArray);
            if NOT result then
              Log.Error('Объединенный список не равен исходному списку');
          end
          else
            Log.Warning('Не удалось открыть объект "Мои документы\Список_'+FOLDER_PREF);  
        end
        else
          Log.Warning('Не удалось добавить к списку');
      end
      else
        Log.Warning('Не удалось открыть объект: '+ LIST_MAIN);
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH + 'Список_'+FOLDER_PREF) then
        Log.Warning('Объект Мои документы\Список_'+FOLDER_PREF +'не удалён');   
    end
    else
      Log.Error('Не удалось сохранить список');    
  end
  else 
    Log.Warning('Не удалось открыть объект: ' + LIST_MAIN);     
  GoToMainMenu;
  current_state := ST_MAIN_MENU;      
end;


{HLTC74.3.1.5: Проверить, что название, предлагаемое по умолчанию
 для сохраняемого списка, совпадает с названием самого списка.
 Проверить для случаев когда список получен следующими способами:
 через ППР, через ППС, как СКР к документу, через навигацию по классификатору.
!!!Предусловие Карточка ППР
}
function HLTC74_3_1_5_Execute (var  current_state: OleVariant): OleVariant;
const
 FOLDER_PREF = 'HLTC74_3_1_5';      
var
  wndCap:string;
  wnd;
  folderTree;
  listCoresp;
  pps;
  str;
  testStr;
begin
  wnd := GetMainWindow;    
  //Через ППР  
  result := GoToPPR;
  if result then
  begin 
    Sys.Keys('конституция^[Enter]');   
    Delay(Options.Run.Timeout div 6);
    wndCap := wnd.Caption;
    if wndCap = '' then Raise('Не удалось считать Caption окна');
    testStr := wndCap; 
    wndCap := GetSubStr(wndCap, 'Список : ', '');
    if wndCap = '' then Raise('Не удалось вычленить из Caption "' + testStr + '" окна ту часть, которая идёт после "Список : "');
    
    folderTree := OpenSaveToFolderDialog;
    str := common.GetWindowText(GetFromFolderForm('ПОЛЕ "ИМЯ"',folderTree).Handle); 
    result := StringCompare(str, wndCap);
    if NOT FillObjectInfoDialog(folderTree,'OkButtonName := Отмена')then
      Log.Warning('Не удалось закрыть окно диалога сохранения');
    if NOT result then        
      Log.Error('Имя, предлогаемое списку по умолчанию: "'+str+ '" не совпадает с названием самого списка: "'+ wndCap +'"') ;   
  end
  else 
    Log.Warning('Не удалось открыть ППР');     
  if NOT result then exit;  
  //Через ППС  
  pps := GoToPPS('',true);
  if IsExists(pps) then
  begin 
    pps.SetFocus;
    Sys.Keys('[Apps]');
    result := ClickByPopupMenuItem(pps,'ИЛИ');
    if result then
    begin
      result := ClickToolbarButton(GetFromPPS('НИЖНИЙ ТУЛБАР'),'Искать');           
      if result then 
      begin
        wndCap := GetSubStr(wnd.Caption,'Список : ','');
        folderTree := OpenSaveToFolderDialog;
        str := common.GetWindowText(GetFromFolderForm('ПОЛЕ "ИМЯ"',folderTree).Handle); 
        result := StringCompare(str, wndCap);
        if NOT FillObjectInfoDialog(folderTree,'OkButtonName := Отмена')then
          Log.Warning('Не удалось закрыть окно диалога сохранения');
        if NOT result then        
          Log.Error('Имя, предлогаемое списку по умолчанию: "'+str+'" не совпадает с названием самого списка: "'+ wndCap +'"') ;          
      end
      else
        Log.Warning('Не удалось кликнуть на Нижнем Тулбаре в ППС на ОК');
    end
    else
      Log.Warning('Не удалось кликнути в popup меню к СКР по пункту "Открыть текущий список"');
  end
  else
    Log.Warning('Не удалось открыть ППС');
  if NOT result then exit;
  //Как СКР к документу    
  result := OpenDocByNumber(10003000);     
  if result then      
  begin      
     listCoresp := OpenInDocument('ССЫЛКИ НА ДОКУМЕНТ');     
     result: = ClickToolBarButton(GetFromList('ТУЛБАР ВЕРХНИЙ ПРАВЫЙ', listCoresp), 'Открыть в текущем окне');
     if result then     
     begin
       folderTree := OpenSaveToFolderDialog;
       str := common.GetWindowText(GetFromFolderForm('ПОЛЕ "ИМЯ"',folderTree).Handle); 
       result := StringCompare(str, wnd.Caption);
       if NOT FillObjectInfoDialog(folderTree,'OkButtonName := Отмена')then
         Log.Warning('Не удалось закрыть окно диалога сохранения');
       if NOT result then        
         Log.Error('Имя, предлогаемое списку по умолчанию: "'+common.GetWindowText(GetFromFolderForm('ПОЛЕ "ИМЯ"',folderTree).Handle)+
         '" не совпадает с названием самого списка: "'+ wndCap +'"') ;
     end
     else
      Log.Warning('Не удалось СКР Открыть в текущем окне'); 
  end
  else
    Log.Warning('Не удалось открыть Документ по Alt+N 10003000');   
  if NOT result then exit;    
  //Через навигацию по классификатору
  result := OpenObjectFromFolder(LIST_MAIN , OpenMenuTab);     
  if result then     
  begin
    wndCap := 'Тематика: '+GetSubStr(wnd.Caption,'Тематика: ','');
    folderTree := OpenSaveToFolderDialog;
    str := common.GetWindowText(GetFromFolderForm('ПОЛЕ "ИМЯ"',folderTree).Handle); 
    result := StringCompare(str, wndCap);
    if NOT FillObjectInfoDialog(folderTree,'OkButtonName := Отмена')then
         Log.Warning('Не удалось закрыть окно диалога сохранения');
    if NOT result then
      Log.Error('Имя, предлогаемое списку по умолчанию: "'+str+ '" не совпадает с названием самого списка: "'+ wndCap +'"') ;
  end
  else
    Log.Warning('Не удалось открыть список по верхней ветки рубрикатора');    
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
end;

{HLTC74.3.1.6: Проверить, что если список уже сохранен, при последующем
  сохранении в папку предлагается то же самое имя.
!!!Предусловие Основное меню
}
function HLTC74_3_1_6_Execute (var  current_state: OleVariant): OleVariant;
const                                                                      
  FOLDER_PREF = 'HLTC74_3_1_6';  
var
  folderTree;        
begin
  result := OpenObjectFromFolder(LIST_MAIN , OpenMenuTab);     
  if result then     
  begin  
    result := SimpleSaveToFolders('Список_'+FOLDER_PREF);
    if result then
      begin
      folderTree := OpenSaveToFolderDialog;
      result := common.GetWindowText(GetFromFolderForm('ПОЛЕ "ИМЯ"',folderTree).Handle)='Список_'+FOLDER_PREF;
      if NOT FillObjectInfoDialog(folderTree,'OkButtonName := Отмена')then
           Log.Warning('Не удалось закрыть окно диалога сохранения');
      if NOT result then
        Log.Error('Имя, предлогаемое списку по умолчанию: "'+common.GetWindowText(GetFromFolderForm('ПОЛЕ "ИМЯ"',folderTree).Handle)+
        '" не совпадает с названием сохранённого до этого списка: "Список_'+ FOLDER_PREF +'"') ;
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH + 'Список_'+FOLDER_PREF)then
        Log.Warning('Объект Мои документы\Список'+FOLDER_PREF+'не удалён!');   
    end
    else
      Log.Warning('Не удалось сохранить Список_'+FOLDER_PREF); 
  end
  else
    Log.Warning('Не удалось открыть список по верхней ветки рубрикатора');    
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
end;

{HLTC74.3.1: Сохранение списка
  HLTC74.3.1.8: Совпадение имени:
    HLTC74.3.1.8.1: Проверить, что при сохранении списка под именем списка, уже существующего
    в выбранной папке, выдается диалог с предложением перезаписать существующий список.  
!!!Предусловие Основное меню
}
function HLTC74_3_1_8_1_Execute (var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC74_3_1_8_1'; 
var
  folderTree;
  confirmationMsg;
  toolBar;
begin
try
  confirmationMsg := '*Вы действительно хотите перезаписать*';
  if NOT OpenObjectFromFolder(LIST_MAIN , OpenMenuTab) then  
    Raise('Не удалось открыть список по верхней ветки рубрикатора');
  folderTree := OpenSaveToFolderDialog;
  if NOT CreateFolderFrom (true, 'Мои документы',FOLDER_PREF,'',folderTree) then
    Raise('Не удалось создаить папку в Моих документах');
  if NOT FillObjectInfoDialog(folderTree,'OkButtonName := Отмена')then
    Raise('Не удалось закрыть окно диалога сохранения');  
  if NOT SaveToFoldersExt(MY_DOCS_PATH+FOLDER_PREF,FOLDER_PREF, '', 'Сохранить') then
    Raise('Не удалось сохранить закладку в Моих документах');
  folderTree := OpenSaveToFolderDialog;
  if NOT Position_Internal(folderTree, MY_DOCS_PATH+FOLDER_PREF, '\', true, 'isPressHome:=true') then 
    Raise('Не могу спозиционироваться в диалоге Сохранения по указанному пути!');  
  if NOT FillObjectInfoDialog(
           folderTree,
           'Name:=' + FOLDER_PREF + ';IsCloseDialog:=false'
         ) then
    Raise('Не удалось заполнить окно диалога сохранения');
  toolBar := GetFromFolderForm('НИЖНИЙ ТУЛБАР' , folderTree);
  if NOT ClickToolbarButton( toolBar, 'Сохранить') then
    Raise('Не могу кликнуть по указанной кнопке(Сохранить)!');  
    
  if WaitForConfirmationWindow(Options.Run.Timeout div 30, 'Да', confirmationMsg) = ''  then
  begin   
    Log.Error('После попытке перезаписать уже существующий запрос нам Не выдано эталонного подтверждение');
    Raise('После попытке перезаписать уже существующий запрос нам Не выдано эталонного подтверждение');
  end;
  if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF)then
    Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');
  Result := true;            
except
  Log.Message('HLTC74_3_1_8_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler;
end;    
end;

{HLTC74.3.1: Сохранение списка
  HLTC74.3.1.8.2: Выбрать папку для сохранения. Проверить возможность сохранения
  списка под именем, совпадающим с именем уже существующей подпапки в данной папке.
!!!Предусловие Основное Меню
}
function HLTC74_3_1_8_2_Execute (var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC74_3_1_8_2';  
begin
  result := OpenObjectFromFolder(LIST_MAIN , OpenMenuTab);     
  if result then 
  begin       
    result := CreateFolderFrom (true, 'Мои документы',FOLDER_PREF,'');  
    if result then
    begin       
      result := CreateFolderFrom (true, MY_DOCS_PATH+FOLDER_PREF,FOLDER_PREF,'');
      if result then
      begin
        OpenInList('СПИСОК ДОКУМЕНТОВ').SetFocus;
        result := SaveToFoldersExt(MY_DOCS_PATH+FOLDER_PREF,FOLDER_PREF,'','Сохранить');
        if NOT result then
          Log.Error('Не Удалось сохранить список с именем уже существующей подпапки в папке');
      end
      else
        Log.Warning('Не удалось создать папку');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF)then
        Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');    
    end
    else
      Log.Warning('Не удалось создать папку в Моих документах');
  end
  else
    Log.Warning('Не удалось открыть список по верхней ветки рубрикатора') ;
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
end;

{HLTC74.3.1: Сохранение списка
  HLTC74.3.1.8.3: Выбрать папку для сохранения. Проверить возможность сохранения 
  списка под именем, совпадающим с именем уже существующего запроса в данной папке.
}  
function HLTC74_3_1_8_3_Execute (var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC74_3_1_8_3';    
begin
  result := CreateFolderFrom (true, 'Мои документы',FOLDER_PREF,'');  
  if result then 
  begin       
    result := GoToPPR;    
    if result then
    begin       
      result := SaveToFoldersExt(MY_DOCS_PATH+FOLDER_PREF,FOLDER_PREF,'','Сохранить');
      if result then
      begin
        result := OpenObjectFromFolder(LIST_MAIN , OpenMenuTab);     
        if result then 
        begin
          OpenInList('СПИСОК ДОКУМЕНТОВ').SetFocus;
          result := SaveToFoldersExt(MY_DOCS_PATH+FOLDER_PREF,FOLDER_PREF,'','Сохранить');
          if NOT result then
            Log.Error('Не Удалось сохранить список с именем уже существующего запроса в папке');
        end
        else
          Log.Warning('Не удалось открыть список по верхней ветки рубрикатора');
      end
      else
        Log.Warning('Не удалось сохранить запрос');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF)then
        Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');    
    end
    else
      Log.Warning('Не удалось открыть ППР');
  end
  else
    Log.Warning('Не удалось создать папку в моих документах') ;
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
end;

{HLTC74.3.1: Сохранение списка
  HLTC74.3.1.8.4: Выбрать папку для сохранения. Проверить возможность сохранения 
  списка под именем, совпадающим с именем уже существующей закладки в данной папке.
}  
function HLTC74_3_1_8_4_Execute (var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC74_3_1_8_4';  
begin 
  result := OpenDocByNumber(10003000);    
  if result then 
  begin       
    result := CreateFolderFrom (true, 'Мои документы',FOLDER_PREF,'');
    if result then
    begin       
      OpenInDocument('ТЕКСТ').SetFocus;
      result := SaveToFoldersExt(MY_DOCS_PATH+FOLDER_PREF,FOLDER_PREF,'','Сохранить');
      if result then
      begin
        result := OpenObjectFromFolder(LIST_MAIN , OpenMenuTab);     
        if result then 
        begin
          OpenInList('СПИСОК ДОКУМЕНТОВ').SetFocus;
          result := SaveToFoldersExt(MY_DOCS_PATH+FOLDER_PREF,FOLDER_PREF,'','Сохранить');
          if NOT result then
            Log.Error('Не Удалось сохранить список с именем уже существующего запроса в папке');
        end
        else
          Log.Warning('Не удалось открыть список по верхней ветки рубрикатора');
      end
      else
        Log.Warning('Не удалось сохранить закладку');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF)then
        Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');    
    end
    else
      Log.Warning('Не удалось создать папку в моих документах');
  end
  else           
    Log.Warning('Не удалось открыть документ по Alt+N 10003000') ;
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
end;

{HLTC74.3.1: Сохранение списка
  HLTC74.3.1.9:  Проверить, что для сохранённого запроса списка система 
  запоминает текущий порядок сортировки. И при последующей загрузки из папки он
   будет отсортирован так, как был до сохранения, независимо от настроек системы.
}  
function HLTC74_3_1_9_Execute (var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC74_3_1_9';  
begin
  result := OpenEtalonList(LIST_ALLCODES);    
  if result then
  begin
    result := SetSortParams(SORT_BY_PUBLICATION_DATE, '' );
    if result then
    begin
      result := SaveToFoldersExt('Мои документы',FOLDER_PREF,'','Сохранить');
      if result then
      begin
        result := OpenEtalonList(LIST_ALLCODES); 
        if result then
        begin
          result := OpenObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF,OpenMyDocTab);
          if result then
          begin
            result := GetSortType = 'по дате издания';
            if NOT result then
              Log.Error('Текущий порядок сортировки не равен порядку сортировки списка до его сохранения');
          end
          else
            Log.Warning('Не удалось открыть объект: "' + MY_DOCS_PATH+FOLDER_PREF+'"');
        end
        else
          Log.Warning('Не удалось открыть список Всех кодексов по рубрикатору');
        if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF)then
        Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');  
      end  
      else
        Log.Warning('Не удалось сохранить список');
    end                                                           
    else
      Log.Warning('Не удалось отсортировать список по дате издания');
  end
  else
    Log.Warning('Не удалось открыть список Всех Кодексов!');
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
end;

{
HLTC74.3: Сохранение в папку
  HLTC74.3.1: Сохранение списка 
  HLTC74.3.1.10: Проверить, что если в списке выделено больше одного документа, то при сохранении этого
  списка(кнопкой на тулбаре или шоткатом) будут сохранены только выделенные документы. В конце имени
  такого списка в скобках добавляется количество документов в нем.
}
function HLTC74_3_1_10_Execute (var  current_state: OleVariant): OleVariant;
var
  listWnd;
  arrXCoords;
  arrYCoords;
  x, y;
  documents;
  i;
  countDocInList;       
begin                                  
try
  documents := ['Конституция Российской*', 'Договор "О создании*', 'Документ 2002*'];
  arrXCoords := [0, 0, 0];
  arrYCoords := [0, 0, 0];
  if NOT OpenObjectFromFolder(LIST_MAIN,
                               OpenMenuTab) then
    Raise('Не удалось открыть список по первой ветке!');
  listWnd := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(listWnd) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');
  for i := (VarArrayLowBound(documents, 1) + 1) to VarArrayHighBound(documents, 1) do
  begin
    if NOT Position_Internal(listWnd, documents[i], '\', true, 'IsPressHome:=true') then  
      Raise('Не удалось спозиционироваться в списке на :' + documents[i]);
    if NOT GetTextSelectionCoords(listWnd, x, y) then
      Raise('Не удалось в списке найти выделенный элемент :' + documents[i]);
    arrXCoords[i] := x;
    arrYCoords[i] := y;      
  end;//for
  if NOT Position_Internal(listWnd, documents[VarArrayLowBound(documents, 1)], '\', true, 'IsPressHome:=true') then  
      Raise('Не удалось спозиционироваться в списке на :' + documents[VarArrayLowBound(documents, 1)]);
      
  for i := (VarArrayLowBound(documents, 1) + 1) to VarArrayHighBound(documents, 1) do          
    listWnd.Click(arrXCoords[i], arrYCoords[i], skCtrl);
    
  if NOT SimpleSaveToFolders('HLTC74_3_1_10') then    
    Raise('Не удалось сохранить список в Мои документы!');
  if NOT GoToMainMenu then Raise('Не удалось открыть Главное Меню!');  
  if NOT OpenObjectFromFolder(MY_DOCS_PATH + 'HLTC74_3_1_10', OpenMyDocTab ) then
    Raise('Не удалось открыть ранее сохранённый список в Моих документах!');    
  listWnd := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(listWnd) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');
  countDocInList := CountElementInList(listWnd); 
  if NOT ( countDocInList = ( VarArrayHighBound(documents, 1) + 1) ) then
  begin
    Log.Error('Количество элементов в сохранённом ранее списке не равно эталонному:' + IntToStr(countDocInList) );
    Raise('Количество элементов в сохранённом ранее списке не равно эталонному:' + IntToStr(countDocInList) );  
  end;  
  for i := VarArrayLowBound(documents, 1) to VarArrayHighBound(documents, 1) do
  begin
    if NOT Position_Internal(listWnd, documents[i], '\', true, 'IsPressHome:=true') then
    begin
      Log.Error('В сохранённом ранее списке не удалось обнаружить элемент: ' + documents[i]);  
      Raise('В сохранённом ранее списке не удалось обнаружить элемент: ' + documents[i]);
    end;
  end;//for      
  
  DeleteAllInMyDoc;
  result := true;
  GoToMainMenu;
except
  DeleteAllInMyDoc;
  Log.Message('HLTC74_3_1_10_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;


{ HLTC74.3.9: Сохранение запроса
   HLTC74.3.9.1: Сохранить непустой запрос из карточек запроса (Переключение между карточками запроса 
   стандартного вида и 5.х можно сделать через настройки. Пункт главного меню Файл\Выбор конфигурации, далее
   выбрать необходимую конфигурацию и сделать ее активной):
    HLTC74.3.9.1.4: Из ППР 5.х
}  
{function HLTC74_3_9_1_4_Execute (var  current_state: OleVariant): OleVariant;
const
  PREF = '(HLTC74_3_9_1_4)';
  PATH_FIVE = 'Файл\Выбор конфигурации\Гарант*';
  PATH_STAND = 'Файл\Выбор конфигурации\Стандартная';
  CONTEXT = '10102000';
  CONTEXT_ETALON = '10.10.2000';
var
  obj;  
  cardData;
  str;
begin                                  
try
  GoToMainMenu;
  if NOT GoToPPR then Raise('Не удалось перейти в ППР');
  if NOT ClickByMainMenuItem(PATH_FIVE) then Raise('Не удалось вызвать пункт контекстного меню ' + PATH);
  PressKeyNCount('[Tab]', 3);
  Delay(Options.Run.Delay div 6);
  Sys.Keys(CONTEXT);
  if NOT SimpleSaveToFolders('Запрос5х' + PREF) then Raise('Не удалось сохранить запрос');
  GoToMainMenu;
  if NOT OpenObjectFromFolder(MY_DOCS_PATH + 'Запрос5х' + PREF) then   
    Raise('Не удалось открыть запрос из Моих документов');
  obj := GetFromPPR('КАРТОЧКА ЗАПРОСА 5.X');
  if NOT IsExists(obj) then
  begin
    Log.Error('Не удалось получить КЗ 5.х после загрузки запроса 5х из Моих документов');
    Raise;
  end;
  PressKeyNCount('[Tab]', 3);
  Delay(Options.Run.Delay div 6);
  Sys.Clipboard := '';
  PressKeyNCount('^c' + keyPause, 3);  
  str := Sys.Clipboard;
  if str = '' then Raise('В буфер ничего не скопировалось');
  if NOT StringCompare(str, CONTEXT_ETALON) then
  begin
    Log.Error('Значение поля <С:> в КЗ 5х не равно эталонному значению, т.е. после загрузки КЗ не эталонна', str);
    Raise;
  end;
  if NOT ClickByMainMenuItem(PATH_STAND) then 
    Log.Warning('Не удалось восстановить конфигурацию на Стандартная');
  if NOT DeleteAllInMyDoc then                    
    Log.Warning('Не удалось удалить все объекты из моих документов');
  result := true;
  GoToMainMenu;
except
  Log.Message('HLTC74_3_9_1_4_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  ClickByMainMenuItem(PATH_STAND);
  result := false;
  CommonExceptionHandler;
end;
end;}

{ HLTC74.3.9: Сохранение запроса
   HLTC74.3.9.2: Сохранить «пустой запрос»
    HLTC74.3.9.2.2: Из стандартной ППР
}  
function HLTC74_3_9_2_2_Execute (var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC74_3_9_2_2';
begin
  result := GoToPPR;
  if result then
  begin
    result := SimpleSaveToFolders(FOLDER_PREF);  
    if result then
    begin
      result := OpenObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF);
      if NOT result then
        Log.Error('Не удалось открыть объект "' + MY_DOCS_PATH+FOLDER_PREF+'"');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF)then
        Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');  
    end
    else
      Log.Error('Не удалось сохранить пустой запрос');
  end
  else
    Log.Warning('Не удалось открыть ППР');
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
end;

{ HLTC74.3.9: Сохранение запроса
   HLTC74.3.9.2: Сохранить «пустой запрос»
    HLTC74.3.9.2.4: Из ППР 5.х
}  
{function HLTC74_3_9_2_4_Execute (var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC74_3_9_2_4';
  path = 'Файл\Выбор конфигурации\Гарант*';
  pathTo='Файл\Выбор конфигурации\Стандартная';
begin
  GoToMainMenu;
  result := ClickByMainMenuItem(path);
  if result then
  begin
    result := GoToPPR('',false,true);
    if result then
    begin
      result := SimpleSaveToFolders(FOLDER_PREF);  
      if result then
      begin
        result := OpenObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF);
        if NOT result then
          Log.Error('Не удалось открыть объект "' + MY_DOCS_PATH+FOLDER_PREF+'"');
        if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF)then
          Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');  
      end
      else
        Log.Error('Не удалось сохранить пустой запрос');
    end
    else
      Log.Warning('Не удалось открыть ППР');
    if NOT ClickByMainMenuItem(pathTo) then
      Log.Warning('Не удалось кликнуть по пункту меню "'+pathTo+'"');
  end
  else
    Log.Warning('Не удалось кликнуть по пункту меню "'+path+'"');    
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
end;
}
{ HLTC74.3.9: Сохранение запроса
   HLTC74.3.9.3: Проверить формирование имени запроса по умолчанию («тип запроса» + дата):
    HLTC74.3.9.3.1: Запрос в карточке ППР
}  
function HLTC74_3_9_3_1_Execute (var  current_state: OleVariant): OleVariant;
const 
  tipZapr = 'Запрос на поиск по реквизитам';
var
  folderTree;  
begin  
  result := GoToPPR;
  if result then
  begin
    folderTree := OpenSaveToFolderDialog;
    result := StringCompare(
      tipZapr+' ('+DateTimeToStr(Date)+' *:*:*)',
      common.GetWindowText(GetFromFolderForm('ПОЛЕ "ИМЯ"',folderTree).Handle)

    );   
    if NOT result then
      Log.Error('имя запроса по умолчантю не равно("тип запроса"+ дата)');
    if NOT FillObjectInfoDialog(folderTree,'OkButtonName := Отмена')then
      Log.Warning('Не удалось закрыть окно диалога сохранения');  
  end
  else
    Log.Warning('Не удалось открыть ППР');    
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
end;

{ HLTC74.3.9: Сохранение запроса
   HLTC74.3.9.3: Проверить формирование имени запроса по умолчанию («тип запроса» + дата):
    HLTC74.3.9.3.3:  Запрос в карточке ППП (поиск по источнику опубликования)
}  
function HLTC74_3_9_3_3_Execute (var  current_state: OleVariant): OleVariant;
const   
  tipZapr = 'Запрос на поиск по источнику опубликования';
var
  folderTree;  
begin  
  result := GoToPPIO;
  if result then
  begin
    folderTree := OpenSaveToFolderDialog;
    result := StringCompare(
      tipZapr+' ('+DateTimeToStr(Date)+' *:*:*)',
      common.GetWindowText(GetFromFolderForm('ПОЛЕ "ИМЯ"',folderTree).Handle)
    );   
    if NOT result then
      Log.Error('имя запроса по умолчантю не равно("тип запроса"+ дата)');
    if NOT FillObjectInfoDialog(folderTree,'OkButtonName := Отмена')then
      Log.Warning('Не удалось закрыть окно диалога сохранения');  
  end
  else
    Log.Warning('Не удалось открыть ППИО');    
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
end;


{ HLTC74.3.9: Сохранение запроса
   HLTC74.3.9.3: Проверить формирование имени запроса по умолчанию («тип запроса» + дата):
    HLTC74.3.9.3.5: Запрос в карточке ППС преемственная
}  
function HLTC74_3_9_3_5_Execute (var  current_state: OleVariant): OleVariant;
const 
  tipZapr = 'Запрос на поиск по ситуации';  
var
  folderTree;    
  defaultName;
begin  
  result := GoToPPS;
  if result then
  begin
    folderTree := OpenSaveToFolderDialog;
    defaultName := common.GetWindowText(GetFromFolderForm('ПОЛЕ "ИМЯ"',folderTree).Handle); 
    result := StringCompare(
      tipZapr + ' ('+DateTimeToStr(Date)+' *:*:*)',
      defaultName
    );   
    if NOT result then
      Log.Error('имя запроса по умолчантю не равно("тип запроса"+ дата)', defaultName);
    if NOT FillObjectInfoDialog(folderTree,'OkButtonName := Отмена')then
      Log.Warning('Не удалось закрыть окно диалога сохранения');  
  end
  else
    Log.Warning('Не удалось открыть ППС');    
  GoToMainMenu;
  current_state := ST_MAIN_MENU;    
end;

{ HLTC74.3.9: Сохранение запроса
   HLTC74.3.9.3: Проверить формирование имени запроса по умолчанию («тип запроса» + дата):
    HLTC74.3.9.3.6: Запрос в карточке ППС стандартная
}  
function HLTC74_3_9_3_6_Execute (var  current_state: OleVariant): OleVariant;
const 
  tipZapr = 'Запрос на поиск по ситуации';  
var
  folderTree;    
  defaultName;
begin  
  result := GoToPPS;
  if result then
  begin
    folderTree := OpenSaveToFolderDialog;
    defaultName := common.GetWindowText(GetFromFolderForm('ПОЛЕ "ИМЯ"',folderTree).Handle); 
    result := StringCompare(
      tipZapr + ' ('+DateTimeToStr(Date)+' *:*:*)',
      defaultName
    );   
    if NOT result then
      Log.Error('имя запроса по умолчантю не равно("тип запроса"+ дата)', defaultName);
    if NOT FillObjectInfoDialog(folderTree,'OkButtonName := Отмена')then
      Log.Warning('Не удалось закрыть окно диалога сохранения');  
  end
  else
    Log.Warning('Не удалось открыть ППС');    
  GoToMainMenu;
  current_state := ST_MAIN_MENU;    
end;


{ HLTC74.3.9: Сохранение запроса
   HLTC74.3.9.4: Совпадение имени:
    HLTC74.3.9.4.1: Проверить, что невозможно сохранить запрос под 
     именем запроса (или фильтра), уже существующего в выбранной папке.
}  
function HLTC74_3_9_4_1_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_3_9_4_1';
var 
  confirmationMsg;
  folderTree;
  toolBar;    
begin
try
  confirmationMsg := '*Вы действительно хотите перезаписать*';
  OpenMyDocTab;
  if NOT CreateFolderFrom (true, 'Мои документы','папка_' + FOLDER_PREF) then 
    Raise('Не удалось создать папку в Моих документах');
  if NOT GoToPPR then Raise('Не перейти в ППР');
  PressKeyWithCheck(['Конституция']);  
  if NOT SaveToFoldersExt(MY_DOCS_PATH + 'папка_' + FOLDER_PREF, FOLDER_PREF, '', 'Сохранить') then
    Raise('Не удалось сохранить запрос');
  folderTree := OpenSaveToFolderDialog;
  if NOT Position_Internal(folderTree, MY_DOCS_PATH + 'папка_'+FOLDER_PREF, '\', true, 'isPressHome:=true') then 
    Raise('Не могу спозиционироваться в диалоге Сохранения по указанному пути!');  
  if NOT FillObjectInfoDialog(
           folderTree,
           'Name:=' + FOLDER_PREF + ';IsCloseDialog:=false'
         ) then
    Raise('Не удалось заполнить окно диалога сохранения');
  toolBar := GetFromFolderForm('НИЖНИЙ ТУЛБАР' , folderTree);
  if NOT ClickToolbarButton( toolBar, 'Сохранить') then
    Raise('Не могу кликнуть по указанной кнопке(Сохранить)!');  
    
  if WaitForConfirmationWindow(Options.Run.Timeout div 30, 'Да', confirmationMsg) = ''  then
  begin   
    Log.Error('После попытке перезаписать уже существующий запрос нам Не выдано эталонного подтверждение');
    Raise('После попытке перезаписать уже существующий запрос нам Не выдано эталонного подтверждение');
  end;
  if NOT DeleteObjectFromFolder(MY_DOCS_PATH + 'папка_'+FOLDER_PREF)then
    Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');
  Result := true;            
except
  Log.Message('HLTC74_3_9_4_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler;
end;    
end;
 

{ HLTC74.3.9: Сохранение запроса
   HLTC74.3.9.4: Совпадение имени:
    HLTC74.3.9.4.2: Проверить возможность сохранения запроса под именем,
     совпадающим с именем уже существующей подпапки в данной папке.
}                      
function HLTC74_3_9_4_2_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_3_9_4_2';
var
  ppr;  
begin  
try
  if NOT GoToPPR then Raise('Не удалось перейти в ППР');
  if NOT ( CreateFolderFrom (false, 'Мои документы', FOLDER_PREF) AND
           CreateFolderFrom (false, MY_DOCS_PATH+FOLDER_PREF,FOLDER_PREF) ) then
    Raise('Не удалось создать две папки');
  if NOT GoToPPR then Raise('Не удалось перейти в ППР');  
  Sys.Keys('конституция');
  if NOT SaveToFoldersExt(MY_DOCS_PATH + FOLDER_PREF, FOLDER_PREF, '', 'Сохранить') then
  begin
    Log.Error('Не удалось сохранить запрос под именем, совпадающим '+
                    'с именем уже существующей подпапки в данной папки');
    Raise;                    
  end;        
  if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF)then
    Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');        
  GoToMainMenu;
  result := true;
  current_state := ST_MAIN_MENU;  
except
  Log.Message('HLTC74_3_9_4_2_Execute: ' + ExceptionMessage, '', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;  
end;

{ HLTC74.3.9: Сохранение запроса
   HLTC74.3.9.4: Совпадение имени:
    HLTC74.3.9.4.3: Проверить возможность сохранения запроса под именем, 
    совпадающим с именем уже существующей закладки в данной папке.
}                      
function HLTC74_3_9_4_3_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_3_9_4_3';
var
  document;
begin  
  result := OpenDocByNumber(10003000);    
  if result then  
  begin      
    document:=OpenInDocument('ТЕКСТ');        
    result := SimpleSaveToFolders(FOLDER_PREF);
    if result then
    begin
      result := GoToPPR;
      if result then 
      begin        
        result := SimpleSaveToFolders(FOLDER_PREF);
        if result then
        begin
          if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF)then
            Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');
        end    
        else
          Log.Error('Не удалось сохранить запрос под именем, совпадающим '+
                    'с именем уже существующей закладки в данной папки');             
      end
      else
        Log.Warning('Не удалось открыть ППР');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF)then
        Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');      
    end
    else
      Log.Error('Не удалось сохранить закладку');
  end
  else
    Log.Warning('Не удалось открыть документ по Alt+N 10003000');    
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
end;

{ HLTC74.3.9: Сохранение запроса
   HLTC74.3.9.4: Совпадение имени:
    HLTC74.3.9.4.4: Проверить возможность сохранения запроса под именем, 
    совпадающим с именем уже существующего списка в данной папке.
}                      
function HLTC74_3_9_4_4_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_3_9_4_4';
var
  allDoc;
begin  
  allDoc := GetListOfAllDocuments;
  if IsExists(allDoc) then  
  begin                 
    result := SimpleSaveToFolders(FOLDER_PREF);
    if result then
    begin
      result := GoToPPR;
      if result then 
      begin        
        result := SimpleSaveToFolders(FOLDER_PREF);
        if result then
        begin
          if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF)then
            Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');
        end    
        else
          Log.Error('Не удалось сохранить запрос под именем, совпадающим '+
                    'с именем уже существующей закладки в данной папки');             
      end
      else
        Log.Warning('Не удалось открыть ППР');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF)then
        Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');      
    end
    else
      Log.Error('Не удалось сохранить список');
  end
  else
    Log.Warning('Не удалось получить список всех документов');    
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
end;

{ HLTC74.3.9: Сохранение запроса
   HLTC74.3.9.5: При сохранении запроса выбрать другой 
   сохраненный в папке элемент. Проверить:
    HLTC74.3.9.5.1: При сохранении запроса выбрать другой запрос. Нажать кнопку «Сохранить» - 
    при ее выборе под именем ранее сохраненного запроса запишется сохраняемый. Старый потеряется.
}  
function HLTC74_3_9_5_1_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_3_9_5_1';
begin  
  //Написать, когда номально начнёт работать КЗ
end;

{ HLTC74.3.10: Сохранение закладки
   HLTC74.3.10.1: Сохранить закладки на документ без картинок :
   HLTC74.3.10.1.1: на начало документа
}  
function HLTC74_3_10_1_1_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_3_10_1_1';
var
  document;
begin  
  result := OpenDocByNumber(10003000);    
  if result then  
  begin      
    document:=OpenInDocument('ТЕКСТ');        
    Sys.Keys('^[Home]');
    result := SimpleSaveToFolders(FOLDER_PREF);
    if result then
    begin      
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF)then
        Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');      
    end
    else
      Log.Error('Не удалось поставить закладку в начале документа');
  end
  else
    Log.Warning('Не удалось открыть документ по Alt+N 10003000');    
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
end;

{ HLTC74.3.10: Сохранение закладки
   HLTC74.3.10.1: Сохранить закладки на документ без картинок :
   HLTC74.3.10.1.2: на середину документа
}  
function HLTC74_3_10_1_2_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_3_10_1_2';
var
  document;
begin  
  result := OpenDocByNumber(10003000);    
  if result then  
  begin      
    document:=OpenInDocument('ТЕКСТ');        
    document.VScroll.Pos:=(document.VScroll.Max-document.VScroll.Min) div 2;
    document.Click(1,1);
    Delay(Options.Run.Timeout div 10);       
    result := SimpleSaveToFolders(FOLDER_PREF);
    if result then
    begin      
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF)then
        Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');      
    end
    else
      Log.Error('Не удалось поставить закладку в средине документа');
  end
  else
    Log.Warning('Не удалось открыть документ по Alt+N 10003000');    
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
end;

{ HLTC74.3.10: Сохранение закладки
   HLTC74.3.10.1: Сохранить закладки на документ без картинок :
   HLTC74.3.10.1.3: на конец документа
}  
function HLTC74_3_10_1_3_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_3_10_1_3';
var
  document;
begin  
  result := OpenDocByNumber(10003000);    
  if result then  
  begin      
    document:=OpenInDocument('ТЕКСТ');        
    Sys.Keys('^[End]');
    result := SimpleSaveToFolders(FOLDER_PREF);
    if result then
    begin      
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF)then
        Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');      
    end
    else
      Log.Error('Не удалось поставить закладку в конце документа');
  end
  else
    Log.Warning('Не удалось открыть документ по Alt+N 10003000');    
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
end;

{ HLTC74.3.10: Сохранение закладки
   HLTC74.3.10.2: Сохранить закладки на документ c картинками (документ с 
   картинками можно найти в списке полученном через контекстный поиск ППР 
   в тексте документа. Контекст = «Графический объект»):
   HLTC74.3.10.2.1: на начало документа
}  
function HLTC74_3_10_2_1_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_3_10_2_1';
var
  document;
begin  
  result := OpenDocByNumber(3822469);    
  if result then  
  begin      
    document:=OpenInDocument('ТЕКСТ');        
    Sys.Keys('^[Home]');
    result := SimpleSaveToFolders(FOLDER_PREF);
    if result then
    begin      
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF)then
        Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');      
    end
    else
      Log.Error('Не удалось поставить закладку в начале документа');
  end
  else
    Log.Warning('Не удалось открыть документ по Alt+N 3822469');    
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
end;

{ HLTC74.3.10: Сохранение закладки
   HLTC74.3.10.2: Сохранить закладки на документ c картинками (документ с 
   картинками можно найти в списке полученном через контекстный поиск ППР 
   в тексте документа. Контекст = «Графический объект»):
   HLTC74.3.10.2.2: на середину документа
}  
function HLTC74_3_10_2_2_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_3_10_2_2';
var
  document;
begin  
  result := OpenDocByNumber(3822469);    
  if result then  
  begin      
    document:=OpenInDocument('ТЕКСТ');        
    document.VScroll.Pos:=(document.VScroll.Max-document.VScroll.Min) div 2;
    document.ClickR(1,1); Sys.Keys('[Esc]');//Что бы случайно не кликнуть по картинке и не активировать её, затем сразу закрываем popUpMenu
    Delay(Options.Run.Timeout div 10);       
    result := SimpleSaveToFolders(FOLDER_PREF);
    if result then
    begin      
      if NOT DeleteAllInMyDoc then                    
        Log.Warning('Не удалось удалить все объекты из моих документов');      
    end
    else
      Log.Error('Не удалось поставить закладку в средине документа');
  end
  else
    Log.Warning('Не удалось открыть документ по Alt+N 3822469');    
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
end;

{ HLTC74.3.10: Сохранение закладки
   HLTC74.3.10.2: Сохранить закладки на документ c картинками (документ с 
   картинками можно найти в списке полученном через контекстный поиск ППР 
   в тексте документа. Контекст = «Графический объект»):
     HLTC74.3.10.2.3: на конец документа
}  
function HLTC74_3_10_2_3_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_3_10_2_3';
var
  document;
begin  
  result := OpenDocByNumber(3822469);    
  if result then  
  begin      
    document:=OpenInDocument('ТЕКСТ');        
    Sys.Keys('^[End]');
    result := SimpleSaveToFolders(FOLDER_PREF);
    if result then
    begin      
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF)then
        Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');      
    end
    else
      Log.Error('Не удалось поставить закладку в конце документа');
  end
  else
    Log.Warning('Не удалось открыть документ по Alt+N 3822469');    
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
end;

{ HLTC74.3.10: Сохранение закладки
   HLTC74.3.10.3: Сохранить в документе закладки на:
     HLTC74.3.10.3.1: таблицу (нажать на клавиатуре Alt+N ввести номер 455333 ! 
     «галка» внутренний номер документа в базе должна быть выставлена)
}  
function HLTC74_3_10_3_1_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_3_10_3_1';
var
  document;
begin  
  result := OpenDocByNumber(455333);      
  if result then  
  begin          
    document:=OpenInDocument('ТЕКСТ');        
    result := BaseSearchInDocument(document,'КОРСЧЕТ');
    if result then
    begin
      result := SaveToFoldersExt('Мои документы',FOLDER_PREF,'','Сохранить');
      if result then
      begin      
        if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF)then
          Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');      
      end
      else
        Log.Error('Не удалось поставить закладку в конце документа');
    end    
    else
      Log.Warning('Не удалось найти контекст');
  end
  else
    Log.Warning('Не удалось открыть документ по Alt+N 455333');    
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
end;

{ HLTC74.3.10: Сохранение закладки
   HLTC74.3.10.3: Сохранить в документе закладки на:
     HLTC74.3.10.3.2: юридический комментарий
}  
function HLTC74_3_10_3_2_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_3_10_3_2';
  CONTEXT = 'См комментарии к статье 7 Конституции РФ';
var
  document;
begin  
  result := OpenDocByNumber(10003000);      
  if result then  
  begin           
    document:=OpenInDocument('ТЕКСТ');        
    if GetCommentsMode(document,JUROR_COMMENTS) <> 'Показан' then    
      SetCommentsMode(document,JUROR_COMMENTS,MODE_SHOWN) ;
    result := BaseSearchInDocument(document, CONTEXT);
    if result then
    begin
      result := SimpleSaveToFolders(FOLDER_PREF);
      if result then
      begin      
        if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF)then
          Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');      
      end
      else
        Log.Error('Не удалось поставить закладку в конце документа');
    end    
    else
      Log.Warning('Не удалось найти контекст');
  end
  else
    Log.Warning('Не удалось открыть документ по Alt+N 10003000');    
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
end;

{ HLTC74.3.10: Сохранение закладки
   HLTC74.3.10.3: Сохранить в документе закладки на:
     HLTC74.3.10.3.3: картинку   
} 
function HLTC74_3_10_3_3_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_3_10_3_3';
var
  document;
begin  
  result := OpenDocByNumber(3822469);      
  if result then  
  begin          
    document:=OpenInDocument('ТЕКСТ');        
    result := BaseSearchInDocument(document, '"Конструктивные схемы каркасно-обшивных перегородок" ');
    if result then
    begin
      Sys.Keys('[Up]');
      result := SimpleSaveToFolders(FOLDER_PREF);
      if result then
      begin      
        if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF)then
          Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');      
      end
      else
        Log.Error('Не удалось поставить закладку на картинку');
    end    
    else
      Log.Warning('Не удалось найти контекст');
  end
  else
    Log.Warning('Не удалось открыть документ по Alt+N 3822469');    
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
end;

{ HLTC74.3.10: Сохранение закладки
   HLTC74.3.10.4: Сохранить закладку на справку к документу     
} 
function HLTC74_3_10_4_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_3_10_4';
var
  document;
begin  
  result := OpenDocByNumber(1055132);      
  if result then  
  begin          
    document:=OpenInDocument('СПРАВКА');    
    document.SetFocus;            
    result := SetBookmark(FOLDER_PREF);
    if result then
    begin            
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF)then
        Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');      
    end
    else
      Log.Error('Не удалось поставить закладку в справке к документу');    
  end
  else
    Log.Warning('Не удалось открыть документ по Alt+N 1055132');    
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
end;

{ HLTC74.3.10: Сохранение закладки
   HLTC74.3.10.5: Совпадение имени:
     HLTC74.3.10.5.1:  Проверить, что при сохранении закладки под именем закладки, уже существующей в
     выбранной папке, выдается диалог с предложением перезаписать существующую закладку.    
} 
function HLTC74_3_10_5_1_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_3_10_5_1';
var
  document;
  confirmationMsg;
  folderTree;
  toolBar;
begin
try
  confirmationMsg := '*Вы действительно хотите перезаписать*';
  OpenMyDocTab;
  if NOT CreateFolderFrom (true, 'Мои документы','папка_' + FOLDER_PREF) then 
    Raise('Не удалось создать папку в Моих документах');
  if NOT OpenDocByNumber(1055132) then Raise('Не удалось открыть документ по Alt+N');
  document:=OpenInDocument('ТЕКСТ');    
  document.SetFocus;
  if NOT SaveToFoldersExt(MY_DOCS_PATH + 'папка_' + FOLDER_PREF, FOLDER_PREF, '', 'Сохранить') then
    Raise('Не удалось посьавить закладку в документе');
  folderTree := OpenSaveToFolderDialog;
  if NOT Position_Internal(folderTree, MY_DOCS_PATH + 'папка_'+FOLDER_PREF, '\', true, 'isPressHome:=true') then 
    Raise('Не могу спозиционироваться в диалоге Сохранения по указанному пути!');  
  if NOT FillObjectInfoDialog(
           folderTree,
           'Name:=' + FOLDER_PREF + ';IsCloseDialog:=false'
         ) then
    Raise('Не удалось заполнить окно диалога сохранения');
  toolBar := GetFromFolderForm('НИЖНИЙ ТУЛБАР' , folderTree);
  if NOT ClickToolbarButton( toolBar, 'Сохранить') then
    Raise('Не могу кликнуть по указанной кнопке(Сохранить)!');  
    
  if WaitForConfirmationWindow(Options.Run.Timeout div 30, 'Да', confirmationMsg) = ''  then
  begin   
    Log.Error('После попытке перезаписать уже существующий запрос нам Не выдано эталонного подтверждение');
    Raise('После попытке перезаписать уже существующий запрос нам Не выдано эталонного подтверждение');
  end;
  if NOT DeleteObjectFromFolder(MY_DOCS_PATH + 'папка_'+FOLDER_PREF)then
    Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');
  Result := true;            
except
  Log.Message('HLTC74_3_10_5_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler;
end;    
end;
   

{ HLTC74.3.10: Сохранение закладки
   HLTC74.3.10.5: Совпадение имени:
     HLTC74.3.10.5.2: Проверить возможность сохранения закладки под именем, 
       совпадающим с именем уже существующей подпапки в данной папке.  
} 
function HLTC74_3_10_5_2_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_3_10_5_2';
var
  document;
begin  
  OpenMyDocTab;
  result := CreateFolderFrom (true, 'Мои документы','папка_'+FOLDER_PREF);
  if result then  
  begin          
    result := OpenDocByNumber(1055132);    
    if result then
    begin                                   
      result := CreateFolderFrom (true, MY_DOCS_PATH + 'папка_'+FOLDER_PREF,FOLDER_PREF);
      if result then
      begin   
        document:=OpenInDocument('ТЕКСТ');
        document.SetFocus; 
        result := SaveToFoldersExt(MY_DOCS_PATH + 'папка_'+FOLDER_PREF,FOLDER_PREF,'','Сохранить');      
        if NOT result then
          Log.Error('Не удалось сохранить закладку под именем, совпадающим с именем уже '+
            'существующей подпапки в данной папки');
      end
      else
        Log.Error('Не удалось создать папку по пути: Мои документы\папка_'+FOLDER_PREF);        
    end  
    else
      Log.Warning('Не удалось открыть документ по Alt+N 1055132');
    if NOT DeleteObjectFromFolder(MY_DOCS_PATH + 'папка_'+FOLDER_PREF)then
      Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');          
  end
  else
    Log.Warning('Не удалось создать папку в моих документах');    
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
end;

{ HLTC74.3.10: Сохранение закладки
   HLTC74.3.10.5: Совпадение имени:
     HLTC74.3.10.5.3: Проверить возможность сохранения закладки под именем
      запроса (или фильтра), уже существующего в выбранной папке.  
} 
function HLTC74_3_10_5_3_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_3_10_5_3';
var
  document;
begin  
  OpenMyDocTab;
  result := CreateFolderFrom (true, 'Мои документы',FOLDER_PREF);
  if result then  
  begin          
    result := GoToPPR;    
    if result then
    begin                                   
      result := SaveToFoldersExt(MY_DOCS_PATH+FOLDER_PREF,FOLDER_PREF,'','Сохранить');
      if result then
      begin   
        result := OpenDocByNumber(1055132); 
        if result then
        begin
          document:=OpenInDocument('ТЕКСТ');
          document.SetFocus; 
          result := SetBookmark(FOLDER_PREF,'',MY_DOCS_PATH+FOLDER_PREF);      
          if NOT result then
            Log.Error('Удалось сохранить закладку под именем, совпадающим с именем'+ 
              'уже существующей закладки в данной папки');
        end
        else
          Log.Warning('Не удалось открыть документ по Alt+N 1055132');
      end
      else
        Log.Error('Не удалось сохранить запрос');        
    end  
    else
      Log.Warning('Не удалось открыть ППР');
    if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF)then
      Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');          
  end
  else
    Log.Warning('Не удалось создать папку в моих документах');    
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
end;

{ HLTC74.3.10: Сохранение закладки
   HLTC74.3.10.5: Совпадение имени:
     HLTC74.3.10.5.4: Проверить возможность сохранения закладки под именем, 
       совпадающим с именем уже существующего списка в данной папке.  
} 
function HLTC74_3_10_5_4_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_3_10_5_4';
var
  document;
  allDoc;
begin  
  OpenMyDocTab;
  result := CreateFolderFrom (true, 'Мои документы',FOLDER_PREF);
  if result then  
  begin          
    allDoc := GetListOfAllDocuments;
    result := IsExists(allDoc);
    if result then
    begin                                   
      result := SaveToFoldersExt(MY_DOCS_PATH+FOLDER_PREF,FOLDER_PREF,'','Сохранить');
      if result then
      begin   
        result := OpenDocByNumber(1055132); 
        if result then
        begin
          document:=OpenInDocument('ТЕКСТ');
          document.SetFocus; 
          result := SetBookmark(FOLDER_PREF,'',MY_DOCS_PATH+FOLDER_PREF);      
          if NOT result then
            Log.Error('Удалось сохранить закладку под именем, совпадающим с именем'+ 
              'уже существующей закладки в данной папки');
        end
        else
          Log.Warning('Не удалось открыть документ по Alt+N 1055132');
      end
      else
        Log.Error('Не удалось сохранить список всех документов');        
    end  
    else
      Log.Warning('Не удалось открыть список всех документов');
    if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF)then
      Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');          
  end
  else
    Log.Warning('Не удалось создать папку в моих документах');    
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
end;

{ HLTC74.3.10: Сохранение закладки
   HLTC74.3.10.6: При сохранении закладки выбрать другой сохраненный в папке элемент. Проверить:
     TC74.3.10.6.1: При сохранении закладки выбрать другую закладку. Нажать кнопку «Сохранить» - 
     при ее выборе под именем ранее сохраненной закладки запишется сохраняемая. Старая потеряется.
}                                  
function HLTC74_3_10_6_1_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_3_10_6_1';
var
  str:string;  
  document;  
	copy_attempts;
begin 
  result := OpenDocByNumber(10003000);  
  if result then
  begin
    document:=OpenInDocument('ТЕКСТ');     
    result := SaveToFoldersExt('Мои документы',FOLDER_PREF,'','Сохранить');
    if result then
    begin
      result := OpenDocByNumber(1055132);  
      if result then
      begin
        document:=OpenInDocument('ТЕКСТ'); 
        str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;     
				copy_attempts := 0;
		    while (str = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
		    begin
					Inc(copy_attempts);
          Sys.Keys('[Down]');       
          str := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;
        end;
        result := SaveToFoldersExt(MY_DOCS_PATH+FOLDER_PREF,FOLDER_PREF,'','Сохранить'); 
        if result then
        begin        
          OpenObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF); 
          document:=OpenInDocument('ТЕКСТ');
          result := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF = str;
          if NOT result then
            Log.Error('Закладка не перезаписалась');
        end
        else
          Log.Warning('Не удалось перезаписать закладку');
      end
      else
        Log.Warning('Не удалось открыть документ по номеру')  ;
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ FOLDER_PREF +'не удалён'); 
    end
    else
      Log.Warning('Не удалось сохранить закладку');   
  end
  else
    Log.Warning('Не удалось открыть документ по Alt+N 10003000');
  GoToMainMenu;
  current_state := ST_MAIN_MENU ;   
end;

{ HLTC74.3.10: Сохранение закладки
   HLTC74.3.10.6: При сохранении закладки выбрать другой сохраненный в папке элемент. Проверить:
     HLTC74.3.10.6.2: При сохранении закладки выбрать список. Функция
      «Добавить» - при ее выборе к ранее сохраненному списку добавится документ, 
        на который проставляется закладка.
}                                  
function HLTC74_3_10_6_2_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_3_10_6_2';  
  docName = 'Конституция Российской Федерации (принята на всенародном голосовании 12 декабря 1993 г.)';
var
  document;  
  listObj;
  list;
begin
  list := LIST_ALLCODES;
  result := OpenEtalonList(list);     
  if result then 
  begin       
    OpenInList('СПИСОК').SetFocus;
    result := SaveToFoldersExt('Мои документы',FOLDER_PREF,'','Сохранить');
    if result then
    begin
      result := OpenDocByNumber(10003000);  
      if result then
      begin
        document:=OpenInDocument('ТЕКСТ');          
        result := SaveToFoldersExt(MY_DOCS_PATH+FOLDER_PREF,FOLDER_PREF,'','Добавить'); 
        if result then
        begin        
          OpenObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF); 
          listObj := OpenInList('СПИСОК');
          result := Position_Internal(listObj,docName );            
          if NOT result then
            Log.Error('Не удалось найти добаленный документ в списке');
        end
        else
          Log.Warning('Не удалось добавить документ к списку');
      end
      else
        Log.Warning('Не удалось открыть документ по номеру')  ;
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF) then
        Log.Warning('Объект ' + MY_DOCS_PATH+ FOLDER_PREF +'не удалён'); 
    end
    else
      Log.Warning('Не удалось сохранить список');   
  end
  else
    Log.Warning('Не удалось открыть список: всех кодексов');
  GoToMainMenu;
  current_state := ST_MAIN_MENU ;   
end;

{ HLTC74.3.10: Сохранение закладки
   HLTC74.3.10.7: Проверить, что при сохранении закладки  на документ система
    автоматически формирует её имя– краткое имя документа + имя (или номер) блока.
    При этом в хинте к сохраненной закладке должно показываться полное имя документа.
}  
function HLTC74_3_10_7_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_3_10_7';
var  
  folderTree;
  etalonName,  currentName;
  etalonHint, currentHint;  
  hint;
begin
try
  DeleteAllInMyDoc;
  etalonName := 'Конституция Российской Федерации (принята на всенародном гол... (параграф 1)';
  etalonHint := 'Закладка на документ "Конституция Российской Федерации (принята на всенародном голосовании 12 декабря 1993 г.)"';  
  if NOT OpenDocByNumber(10003000) then Raise('Не удалось открыть документ по Alt+N');
  folderTree := OpenSaveToFolderDialog;    
  currentName := common.GetWindowText(GetFromFolderForm('ПОЛЕ "ИМЯ"',folderTree).Handle);    
  if NOT StringCompare(etalonName, currentName) then
  begin
      Log.Error('Имя по умолчанию "' + currentName + '" не равно : "' + etalonName + '"');
      Raise('Имя по умолчанию "' + currentName + '" не равно : "' + etalonName + '"');
  end;
  if NOT FillObjectInfoDialog(folderTree,'OkButtonName := Сохранить')then
    Raise('Не удалось Сохранить закладку');
  folderTree := OpenMyDocTab;           
  if NOT Position_Internal (folderTree, MY_DOCS_PATH+etalonName) then 
    Raise('Не удалось спозиционироваться на закладку : "' + etalonName + '" в Моих документах');  
  if NOT MoveMouseToObject(folderTree,'Saved_Bookmark.bmp',0,0,false) then 
    Raise('Не удалось навести мышь на иконку закладки в Моих документах');      
  hint := GetFromShell('ОКНО ХИНТА');              
  if NOT IsExists(hint) then
    Raise ('Не удалось обнаружить ОКНО ХИНТА на закладке в моих документах');
  hint := hint.wndCaption;
  if NOT StringCompare(hint, etalonHint) then
  begin
    Log.Error('Хинт :' + hint + ' на закладке в моих документах не эталонен, должен быть : ' + etalonHint);
    Raise('Хинт :' + hint + ' на закладке в моих документах не эталонен, должен быть : ' + etalonHint);
  end;
  DeleteAllInMyDoc;
  result := true;
except  
  Log.Message('HLTC74_3_10_7: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  DeleteAllInMyDoc;
  result := false;
  CommonExceptionHandler;             
end;
end;



{ HLTC74.3.10: Сохранение закладки
   HLTC74.3.10.8: Проверить функцию установки закладки при просмотре списка 
   документов. Сохранить закладку на:
     HLTC74.3.10.8.1: документ
} 
function HLTC74_3_10_8_1_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_3_10_8_1';  
  docName = 'Конституция Российской Федерации (принята на всенародном голосовании 12 декабря 1993 г.)';
var
  document;  
  listObj;
begin 
  result := OpenObjectFromFolder(LIST_MAIN,OpenMenuTab);     
  if result then 
  begin      
    listObj := OpenInList('СПИСОК');
    listObj.SetFocus;
    result := Position_Internal(listObj,docName );        
    if result then
    begin
      result := SetBookmark(FOLDER_PREF);
      if NOT result then
        Log.Error('Не удалось поставить закладку на элемент списка')
      else
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF)then
        Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');    
    end
    else
      Log.Warning('Не удалось спозиционироваться на нужном элементе в списке');     
  end
  else
    Log.Warning('Не удалось открыть первую ветку рубрикатора!');
  GoToMainMenu;
  current_state := ST_MAIN_MENU ;   
end; 

{ HLTC74.3.10: Сохранение закладки
   HLTC74.3.10.8: Проверить функцию установки закладки при просмотре списка 
   документов. Сохранить закладку на:
     HLTC74.3.10.8.2: вхождение в документ
} 
function HLTC74_3_10_8_2_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_3_10_8_2';  
  docName = 'Конституция Российской Федерации (принята на всенародном голосовании 12 декабря 1993 г.)*\*Глава 1';
  ENTRY = 'Глава 1. Основы конституционного строя';
var
  document;  
  listObj;
  str;
begin
try
  if NOT OpenObjectFromFolder(LIST_MAIN,OpenMenuTab) then 
    Raise('Не удалось открыть первую ветку рубрикатора!');        
  listObj := OpenInList('СПИСОК');
  listObj.SetFocus;
  if NOT Position_Internal(listObj,docName,'\', true ) then
    Raise('Не удалось спозиционироваться на нужном элементе в списке');          
  if NOT ClickByMainMenuItem('Документы\Установить закладку...') then
      Raise('Не удалось вызвать пункт главного меню <Документы\Установить закладку...>');
  //Sys.Keys('[Apps]');
  //if NOT ClickByPopupMenuItem(listObj, 'Документ\Установить закладку...') then
  //  Raise('Не удалось вызвать пункт контекстного меню Документ\Установить закладку...');
  if NOT SaveToFoldersExt('Мои документы',FOLDER_PREF,'','Сохранить', true) then
    Raise('Не удалось сохранить закладку');
  if NOT OpenObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF) then
    Raise('Не удалось открыть закладку из Моих документов');
  str := CopyToClipBoard(GetFromEditor('ТЕКСТ ДОКУМЕНТА'), 'STRING', 'Trim:=true');
  if NOT StringCompare(str, ENTRY) then
  begin
    Log.Error('закладка не на эталонном месте: ' + str);
    Raise('закладка не на эталонном месте: ' + str);
  end;              
  if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF)then
    Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');    
  result := true;  
  current_state := ST_MAIN_MENU ;   
except   
  Log.Message( 'HLTC74_3_10_8_2_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  Result := false;
  CommonExceptionHandler;
end;
end; 

{ HLTC74.3.11: Спецтесты
    HLTC74.3.11.1: - Делаем любую папку и сохраняем в нее список. Удаляем 
      папку с данным списком. Жмем опять кнопку "сохранить в папку". Не должно 
      выдаться сообщения о том, что список сохранен.
}    
function HLTC74_3_11_1_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_3_11_1';
var
  folderTree;     
begin  
  OpenMyDocTab;
  result := CreateFolderFrom (true, 'Мои документы', FOLDER_PREF);
  if result then
  begin   
    result := GoToPPR; 
    if result then   
    begin                    
      result := SaveToFoldersExt(MY_DOCS_PATH+FOLDER_PREF,'запрос_'+FOLDER_PREF,'','Сохранить');  
      if result then
      begin
        result := DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF);
        if result then
        begin          
          result := GoToPPR;
          if result then
          begin
            folderTree:=OpenSaveToFolderDialog;
            result := isExists(folderTree);
            if result then 
            begin
              if NOT FillObjectInfoDialog(folderTree,'OkButtonName := Отмена') then
                Log.Warning('Не удалось закрыть диалог сохранения');
            end  
            else
              Log.Error('Не удалось открыть диалог сохранения');            
          end
          else
            Log.Warning('Не удалось открыть ППР');   
        end
        else
          Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');              
      end
      else
        Log.Warning('Не удалось сохранить запрос');
    end
    else
      Log.Warning('Не удалось открыть ППР');    
  end
  else
    Log.Warning('Не удалось создать папку');
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
end; 

{ HLTC74.3.11: Спецтесты
   HLTC74.3.11.2: Проверить, что при сохранении в папку любого объекта система 
    автоматически позиционируется на папку (делая ее текущей), использованную 
    в предыдущем вызове данного прецедента.
     HLTC74.3.11.2.1: Проверить, что если использованная в предыдущем сеансе папка
       была удалена, переименована или перемещена, то система позиционируется на
       корневой папке для данного пользователя.          
}     
function HLTC74_3_11_2_1_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_3_11_2_1';
var
  folderTree;   
  str:string;
begin  
  OpenMyDocTab;
  result := CreateFolderFrom (true, 'Мои документы', '1_папка_'+FOLDER_PREF);
  if result then
  begin
    result := CreateFolderFrom (true, MY_DOCS_PATH + '1_папка_'+FOLDER_PREF,'2_папка_'+FOLDER_PREF);
    if result then
    begin
      result := GoToPPR; 
      if result then   
      begin                    
        result := SaveToFoldersExt(MY_DOCS_PATH + '1_папка_'+FOLDER_PREF+'\2_папка_'+FOLDER_PREF,FOLDER_PREF,'','Сохранить');  
        if result then
        begin
          result := GoToPPR;
          if result then
          begin
            folderTree:=OpenSaveToFolderDialog('','IsPressHome:=false');          
            result := common.GetWindowText(folderTree.Handle) = '2_папка_'+FOLDER_PREF ;                        
            if result then
            begin
              result := FillObjectInfoDialog(folderTree,'OkButtonName := Отмена');
              if result then
              begin
                result := DeleteObjectFromFolder(MY_DOCS_PATH + '1_папка_'+FOLDER_PREF+'\2_папка_'+FOLDER_PREF);               
                if result then
                begin
                  result := GoToPPR;
                  if result then
                  begin
                    folderTree:=OpenSaveToFolderDialog('','IsPressHome:=false');
                    result := common.GetWindowText(folderTree.Handle) = 'Мои документы' ;     
                    if NOT result then                       
                      Log.Error('Система автоматически не спозиционировалась на корневую папку');
                    if NOT FillObjectInfoDialog(folderTree,'OkButtonName := Отмена') then                  
                      Log.Warning('Не удалось закрыть окно диалога сохранения');       
                  end
                  else
                    Log.Warning('Не удалось открыть ППР');
                end
                else
                  Log.Warning('Не удалось удалить папку :Мои документы\1_папка_'+FOLDER_PREF+'\2_папка_'+FOLDER_PREF);
              end
              else
                Log.Warning('Не удалось закрыть окно диалога сохранения');
            end
            else
              Log.Error('Система автоматически не спозиционировалась на папку, использованную в предидущем преценденте ');              
          end
          else
            Log.Warning('Не удалось открыть ППР');            
        end
        else
          Log.Warning('Не удалось сохранить запрос');
      end
      else
        Log.Warning('Не удалось открыть ППР');    
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH + '1_папка_'+FOLDER_PREF)then
        Log.Warning('Объект Мои документы\1_папка_'+FOLDER_PREF+'не удалён!');   
    end    
    else
    Log.Warning('Не удалось создать папку');
  end
  else
    Log.Warning('Не удалось создать папку');
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
end; 

{ HLTC74.3.11: Спецтесты
    HLTC74.3.11.3: Проверить , что при сохранении объекта (запроса или списка), 
    ранее загруженного из папки, предлагаемое системой имя совпадает с именем 
    загруженного объекта (т.е если загрузили запрос «мой запрос», то при сохранении 
    подставляется имя – «мой запрос»)
}  
function HLTC74_3_11_3_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_3_11_3';
var
  folderTree;
  obj;   
begin  
  result := GoToPPR; 
  if result then   
  begin                    
    result := SimpleSaveToFolders(FOLDER_PREF); 
    if result then
    begin      
      result := OpenObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF);
      if result then
      begin
        obj := GetFromPPR('ФОРМА КАРТОЧКИ ЗАПРОСА');
        if NOT IsExists(obj) then Log.Error('Не удалось получить ФОРМА КАРТОЧКИ ЗАПРОСА');
        obj.SetFocus;
        folderTree := OpenSaveToFolderDialog;
        result := common.GetWindowText(GetFromFolderForm('ПОЛЕ "ИМЯ"',folderTree).Handle) = FOLDER_PREF;
        if NOT result then
          Log.Error('Имя поумолчани не равно имени загружаемого объекта');
        if NOT FillObjectInfoDialog(folderTree,'OkButtonName := Отмена')then
          Log.Warning('Не удалось закрыть окно диалога сохранения');  
      end
      else
        Log.Warning('Не удалось открыть объект : ' + MY_DOCS_PATH+FOLDER_PREF);
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF)then
        Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');     
    end
    else
      Log.Warning('Не удалось сохранить запрос');
  end
  else
    Log.Warning('Не удалось открыть ППР');    
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
end; 

{ HLTC74.3.11: Спецтесты
    HLTC74.3.11.4: Проверить, что для всех сохраняемых объектов запоминается
     дата сохранения (отображается в свойствах объекта)
}  
function HLTC74_3_11_4_Execute(var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF='HLTC74_3_11_4';
var 
  folderTree;
  date: string;
begin
  result := GoToPPR; 
  if result then   
  begin                    
    result := SimpleSaveToFolders(FOLDER_PREF); 
    if result then
    begin  
      folderTree := OpenMyDocTab; 
      if Position_Internal (folderTree,MY_DOCS_PATH+FOLDER_PREF) then
      begin
        if NOT GetToolbarObject(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', folderTree),'BUTTON','Свойства').Down then 
          ClickToolbarButton(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', folderTree),'Свойства');
        date:=GetSubStr(GetFromFolderForm('ДАТА СОЗДАНИЯ',folderTree).Caption,'Дата создания: ','');
        result := date = DateTimeToStr(Utilities.Date);
        if NOT result then
          Log.Error('Дата создания объекта не является действительной датой на момент создания');                
        if NOT ClickToolbarButton(GetFromFolderForm('НИЖНИЙ ТУЛБАР', folderTree),'Отмена')then    
          Log.Warning('Не удалось кликнуть на НИЖНЕМ ТУЛБАРЕ на кнопку отмена');        
      end  
      else
        Log.Warning('Не удалось споциционироваться на объекте: ' + MY_DOCS_PATH+FOLDER_PREF);
      if NOT FoldersWork.DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF) then
        Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён');  
    end
    else
      Log.Warning('Не удалось сохранить запрос');
  end
  else
    Log.Warning('Не удалось открыть ППР');      
  GoToMainMenu;
  current_state := ST_MAIN_MENU;              
end;

{ HLTC74.3.11: Спецтесты
    HLTC74.3.11.5: Проверить, что к любому сохраняемому объекту можно написать комментарий.
}  
function HLTC74_3_11_5_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_3_11_5';
var
  folderTree;   
begin  
  result := GoToPPR; 
  if result then   
  begin                    
    result := SaveToFoldersExt('Мои документы',FOLDER_PREF,'комментарии_'+FOLDER_PREF,'Сохранить');
    if result then
    begin
      folderTree := OpenMyDOcTab;
      result := Position_Internal (folderTree,MY_DOCS_PATH+FOLDER_PREF);
      if result then
      begin
        result := ClickToolbarButton(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', folderTree),'Свойства');
        if result then
        begin          
          result :=(common.GetWindowText(GetFromFolderForm('ПОЛЕ "ПРИМЕЧАНИЕ"',folderTree).Handle) = 'комментарии_'+FOLDER_PREF);
          if NOT result then
            Log.Error('Текст поля "примечание" не соответствует заданному при создании объекта ');
        end
        else
          Log.Warning('Не удалось открыть свойства объекта');
      end
      else
        Log.Warning('Не удалось спозиционироваться на объекте : ' + MY_DOCS_PATH+FOLDER_PREF);
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF)then
        Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');     
    end
    else
      Log.Warning('Не удалось сохранить запрос');
  end
  else
    Log.Warning('Не удалось открыть ППР');   
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
end;      

{ HLTC74.4: Удаление объектов из папки
    HLTC74.4.1: Удалить закладку
      HLTC74.4.1.1: Удалить закладку на документ в базе
}
function HLTC74_4_1_1_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_4_1_1';
var
  document;
begin    
    result := OpenDocByNumber(10003000);    
    if result then  
    begin      
      document:=OpenInDocument('ТЕКСТ');        
      result := SimpleSaveToFolders(FOLDER_PREF);
      if result then
      begin      
        result := DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF);
        if NOT result then
          Log.Error('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');      
      end
      else
      Log.Warning('Не удалось сохранить закладку');
    end
    else
      Log.Warning('Не удалось открыть документ по Alt+N 10003000');   
  GoToMainMenu;
  current_state := ST_MAIN_MENU;     
end;

{ HLTC74.4: Удаление объектов из папки
    HLTC74.4.1: Удалить закладку
      HLTC74.4.1.2: Удалить закладку на документ, отсутствующий в активной базе      
!!!По умолчанию запускаемся с новой базой.
}
function HLTC74_4_1_2_Execute (var  current_state: OleVariant): OleVariant;
const
  DOC_NUM = 8901044;  //документ имеется только в новой ТБ
  PREF = '(HLTC74_4_1_2)';
  TEST_WORDS = 'Данный документ*не включен в состав Вашего комплекта.*Для расширения*Вас организацию:*Контактная*';
var
  obj;  
  login;
  pass;
  count;
  str;
begin                                  
try
  //Логинимся пользователем ..user
  login := PREF + '_user';
  pass  := PREF;
  count := 5;
  RestartF1Shell(count, Options.Run.Timeout div 6, login, pass);
  
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  if NOT SetBookMark('Закладка' + PREF) then Raise('Не удалось установить закладку');
  if NOT SwitchDataBase(DBT_OLD, 'IsSwitchOnTheFly:=false') then Raise('Не удалось переключить базу на DBT_OLD');
  LoginAnyhow(login, pass);  
  if OpenDocByNumber(DOC_NUM) then Raise('Удалось открыть документ, хотя его не должно быть в данной базе');
  if NOT OpenObjectFromFolder(MY_DOCS_PATH + 'Закладка' + PREF, OpenMyDocTab) then 
    Raise('Не удалось открыть закладку на документ, отсутствующий в текущей базе');
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  str := CopyToClipboard(obj, 'ALL', 'Trim := true');
  if NOT StringCompare(TEST_WORDS, str) then
  begin
    Log.Error('При открытии закладки на несущ. в текущей базе документ, предупреждение не Эталонно', str);
    Raise;
  end;
  if NOT DeleteObjectFromFolder(MY_DOCS_PATH + 'Закладка' + PREF) then
  begin
    Log.Warning('Не удалось удалить закладку на несуществующий документ в текущей базе: Мои документы\Закладка' + PREF);
    Raise;
  end;  
  result := true; 
  GoToMainMenu; 
except
  Log.Message('HLTC74_4_1_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{ HLTC74.4: Удаление объектов из папки
    HLTC74.4.1: Удалить закладку
      HLTC74.4.1.3: Удалить закладку, имя которой совпадает с именем запроса, 
      списка, папки, также находящихся в данной папке
}
function HLTC74_4_1_3_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_4_1_3';
var
  document;
  allDoc;
begin    
  OpenMyDocTab;
  result := CreateFolderFrom (true, 'Мои документы', 'папка_'+FOLDER_PREF);
  if result then
  begin
    result := OpenDocByNumber(10003000);    
    if result then  
    begin      
      document:=OpenInDocument('ТЕКСТ');        
      result := SaveToFoldersExt(MY_DOCS_PATH + 'папка_'+FOLDER_PREF,FOLDER_PREF,'','Сохранить'); 
      if result then
      begin      
        result := GoToPPR;
        if result then
        begin
          result := SaveToFoldersExt(MY_DOCS_PATH + 'папка_'+FOLDER_PREF,FOLDER_PREF,'','Сохранить'); 
          if result then
          begin 
            allDoc := GetListOfAllDocuments;  
            result := IsExists(allDoc);
            if result then
            begin
              result := SaveToFoldersExt(MY_DOCS_PATH + 'папка_'+FOLDER_PREF,FOLDER_PREF,'','Сохранить'); 
              if result then
              begin
                OpenMyDocTab;
                result := CreateFolderFrom (true, MY_DOCS_PATH + 'папка_'+FOLDER_PREF, FOLDER_PREF);
                if result then
                begin
                  result := DeleteObjectFromFolder(MY_DOCS_PATH + 'папка_'+FOLDER_PREF+'\'+FOLDER_PREF);
                  if NOT result then
                     Log.Error('Не удалось удалить закладку, имя которой совпадает с именем других объектов в данной папке');
                end
                else 
                  Log.Warning('Не удалось создать папку');
              end
              else
                Log.Warning('Не удалось сохранить список');
            end
            else
              Log.Warning('Не удалось получить список всех документов') ;
          end                                       
          else
            Log.Warning('Не удалось сохранить запрос');
        end
        else
          Log.Warning('Не удалось открыть ППР');    
      end
      else
        Log.Warning('Не удалось сохранить закладку');
    end
    else
      Log.Warning('Не удалось открыть документ по Alt+N 10003000');   
    if NOT DeleteObjectFromFolder(MY_DOCS_PATH + 'папка_'+FOLDER_PREF)then
      Log.Warning('Объект Мои документы\папка_'+FOLDER_PREF+'не удалён!');     
  end
  else
    Log.Warning('Не удалось создать папку');    
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
end;  

{ HLTC74.4: Удаление объектов из папки
    HLTC74.4.2: Удалить запрос
      HLTC74.4.2.1: Удалить запрос, все поисковые атрибуты которого присутствуют в данной базе      
}
function HLTC74_4_2_1_Execute (var  current_state: OleVariant): OleVariant;
const
  PREF = '(HLTC74_4_2_1)';
var
  obj;  
  cardData;
begin                                  
try
  cardData := [
  	CARD_PPR, ([([
	  FD_THEME, ([
		  '[ИЛИ]Еще один класс. Верхний уровень\Еще один класс. Нижний уровень 1',
		  '[ИЛИ]Еще один класс. Верхний уровень\Еще один класс. Нижний уровень 2']) ]),([
  	FD_INOPERATIVE_EDITION, ([
		  'Да']) ]) ]) 
  ];
  if NOT FillPPRCard(cardData) then Raise('Не удалось заполнить КЗ ППР');
  if NOT SimpleSaveToFolders('Запрос' + PREF) then Raise('Не удалось сохранить запрос');
  GoToMainMenu;
  if NOT OpenObjectFromFolder(MY_DOCS_PATH + 'Запрос' + PREF) then
  begin  
    Log.Error('Не удалось открыть запрос со всеми присутствующими поисковыми реквизитами в текущей базе');
    Raise;
  end;
  obj :=  GetFromPPR('КАРТОЧКА ЗАПРОСА');
  if NOT IsExists(obj) then Raise('Не удалось получить КЗ');
  if NOT CompareQueryCardData(cardData, ExtractQueryCardData(obj)) then
  begin
    Log.Error('Запрос со всеми присутствующими поисковыми реквизитами  не равен эталонному');
    Raise;
  end;
  if NOT DeleteObjectFromFolder(MY_DOCS_PATH + 'Запрос' + PREF) then
  begin
    Log.Warning('Не удалось удалить запрос со всеми присутствующими поисковыми реквизитами в текущей базе: Мои документы\Запрос' + PREF);
    Raise;
  end;  
  result := true; 
  GoToMainMenu; 
except
  Log.Message('HLTC74_4_2_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{ HLTC74.4: Удаление объектов из папки
    HLTC74.4.2: Удалить запрос
      HLTC74.4.2.2: Удалить запрос, часть значений поисковых атрибутов которого отсутствует, 
      а часть – присутствует в данной базе      
По умолчанию запускаемся со старой базой.
}
function HLTC74_4_2_2_Execute (var  current_state: OleVariant): OleVariant;
const
  PREF = '(HLTC74_4_2_2)';
var
  obj;  
  login;
  pass;
  count;
  cardData;
  cardDataNew;
begin                                  
try
  cardData := [
  	CARD_PPR, ([([
	  FD_THEME, ([
		  '[ИЛИ]Еще один класс. Верхний уровень\Еще один класс. Нижний уровень 1',
		  '[ИЛИ]Еще один класс. Верхний уровень\Еще один класс. Нижний уровень 2',
		  '[ИЛИ]Еще один класс. Верхний уровень\Еще один класс. Нижний уровень 3',
		  '[ИЛИ]My Class D']) ]),([
  	FD_INOPERATIVE_EDITION, ([
		  'Да']) ]) ]) 
  ];
  cardDataNew := [
  	CARD_PPR, ([([
	  FD_THEME, ([
		  '[ИЛИ]Еще один класс. Верхний уровень\Еще один класс. Нижний уровень 1',
		  '[ИЛИ]Еще один класс. Верхний уровень\Еще один класс. Нижний уровень 2']) ]),([
  	FD_INOPERATIVE_EDITION, ([
		  'Да']) ]) ]) 
  ];
  //Логинимся пользователем ..user
  login := PREF + '_user';
  pass  := PREF;
  count := 5;
  RestartF1Shell(count, Options.Run.Timeout div 6, login, pass);
  if NOT FillPPRCard(cardData) then Raise('Не удалось заполнить КЗ ППР');
  if NOT SimpleSaveToFolders('Запрос' + PREF) then Raise('Не удалось сохранить запрос');
  if NOT SwitchDataBase(DBT_NEW, 'IsSwitchOnTheFly:=true') then Raise('Не удалось переключить базу на DBT_NEW');
  //LoginAnyhow(login, pass);
  if NOT OpenObjectFromFolder(MY_DOCS_PATH + 'Запрос' + PREF) then
  begin  
    Log.Error('Не удалось открыть запрос c частично отсутствующими поисковыми реквизитами в текущей базе');
    Raise;
  end;
  obj :=  GetFromPPR('КАРТОЧКА ЗАПРОСА');
  if NOT IsExists(obj) then Raise('Не удалось получить КЗ');
  if NOT CompareQueryCardData(cardDataNew, ExtractQueryCardData(obj)) then
  begin
    Log.Error('Запрос с частично отсутствующими поисковыми реквизитами  не равен эталонному');
    Raise;
  end;
  if NOT DeleteObjectFromFolder(MY_DOCS_PATH + 'Запрос' + PREF) then
  begin
    Log.Warning('Не удалось удалить запрос с частично отсутствующими поисковыми реквизитами в текущей базе: Мои документы\Запрос' + PREF);
    Raise;
  end;  
  result := true; 
  GoToMainMenu; 
except
  Log.Message('HLTC74_4_2_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{ HLTC74.4: Удаление объектов из папки
    HLTC74.4.2: Удалить запрос
      HLTC74.4.2.3: Удалить запрос, все поисковые атрибуты которого отсутствуют в данной базе      
По умолчанию запускаемся со старой базой.
}
function HLTC74_4_2_3_Execute (var  current_state: OleVariant): OleVariant;
const
  PREF = '(HLTC74_4_2_3)';
var
  obj;  
  login;
  pass;
  count;
  cardData;
  cardDataNew;
begin                                  
try
  cardData := [
  	CARD_PPR, ([([
	  FD_THEME, ([
		  '[ИЛИ]Еще один класс. Верхний уровень\Еще один класс. Нижний уровень 3',
		  '[ИЛИ]My Class D']) ]),([
  	FD_INOPERATIVE_EDITION, ([
		  'Да']) ]) ]) 
  ];
  cardDataNew := [
  	CARD_PPR, ([([
  	FD_INOPERATIVE_EDITION, ([
		  'Да']) ]) ]) 
  ];
  //Логинимся пользователем ..user
  login := PREF + '_user';
  pass  := PREF;
  count := 5;
  RestartF1Shell(count, Options.Run.Timeout div 6, login, pass);
  if NOT FillPPRCard(cardData) then Raise('Не удалось заполнить КЗ ППР');
  if NOT SimpleSaveToFolders('Запрос' + PREF) then Raise('Не удалось сохранить запрос');
  if NOT SwitchDataBase(DBT_NEW) then Raise('Не удалось переключить базу на DBT_NEW');
  LoginAnyhow(login, pass);
  if NOT OpenObjectFromFolder(MY_DOCS_PATH + 'Запрос' + PREF) then
  begin  
    Log.Error('Не удалось открыть запрос cо всеми отсутствующими поисковыми реквизитами в текущей базе');
    Raise;
  end;
  obj :=  GetFromPPR('КАРТОЧКА ЗАПРОСА');
  if NOT IsExists(obj) then Raise('Не удалось получить КЗ');
  if NOT CompareQueryCardData(cardDataNew, ExtractQueryCardData(obj)) then
  begin
    Log.Error('Запрос со всеми отсутствующими поисковыми реквизитами  не равен эталонному');
    Raise;
  end;
  if NOT DeleteObjectFromFolder(MY_DOCS_PATH + 'Запрос' + PREF) then
  begin
    Log.Warning('Не удалось удалить запрос со всеми отсутствующими поисковыми реквизитами в текущей базе: Мои документы\Запрос' + PREF);
    Raise;
  end;  
  result := true; 
  GoToMainMenu; 
except
  Log.Message('HLTC74_4_2_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{ HLTC74.4: Удаление объектов из папки
    HLTC74.4.2: Удалить запрос
      oldRevision:HLTC74.4.2.4: Удалить запрос, являющийся не примененным фильтром
      
      newRevision:HLTC74.4.2.4: Создать запрос.
 На основе него сделать фильтр по операции "Добавить фильтр из сохранённых запросов".
 Удалить запрос, проверить что запрос удалился а фильтр остался и не возникло ошибок.
       
}
function HLTC74_4_2_4_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_4_2_4';
var  
  folderTree;  
begin          
try
  GoToPPR;                         
  Sys.Keys('конституция');
  if NOT SaveToFoldersExt('Мои документы',FOLDER_PREF,'','Сохранить') then Raise('Не удалось сохранить запрос в Мои документы.');        
  folderTree := OpenMyDocTab;      
  if NOT Position_Internal (folderTree,MY_DOCS_PATH+FOLDER_PREF) then Raise('Не удалось спозиционироваться на запроск в Моих документах');
  Sys.Keys('[Apps]');       
  if NOT ClickByPopupMenuItem(folderTree,'Добавить фильтр из сохраненных запросов') then Raise('Не удалось вызвать контекстную операцию "Добавить фильтр из сохраненных запросов"');
  GetFromShell('КНОПКА "ОК" ДИАЛОГА СОХРАНЕНИЯ ФИЛЬТРА').Click;                
  if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF) then Raise('Не удалось удалить запрос из Моих документов');
  OpenInList('СПИСОК ФИЛЬТРОВ');
  if NOT DeleteFilter(FOLDER_PREF) then
  begin
    Log.Error('С вкладки Фильтры не удалось удалить Фильтр :' + FOLDER_PREF);
    Raise('С вкладки Фильтры не удалось удалить Фильтр :' + FOLDER_PREF);          
  end;  
  GoToMainMenu;
  result := true;  
except  
  Log.Message( FOLDER_PREF + '_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;    
end;  

{ HLTC74.4: Удаление объектов из папки
    HLTC74.4.2: Удалить запрос
      oldRevision:HLTC74.4.2.5: Удалить запрос, являющийся примененным фильтром для текущего списка
      
      newRevision:HLTC74.4.2.5: Создать запрос.
      На основе него сделать фильтр по операции "Добавить фильтр из сохранённых запросов".
       Применить фильтр к какому либо списку.
      Удалить запрос, проверить что запрос удалился а фильтр остался и не возникло ошибок.
}
function HLTC74_4_2_5_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_4_2_5';
var  
  folderTree;  
  filterList;
begin          
try
  GoToPPR;                         
  Sys.Keys('конституция');
  if NOT SaveToFoldersExt('Мои документы',FOLDER_PREF,'','Сохранить') then Raise('Не удалось сохранить запрос в Мои документы.');        
  folderTree := OpenMyDocTab;      
  if NOT Position_Internal (folderTree,MY_DOCS_PATH+FOLDER_PREF) then Raise('Не удалось спозиционироваться на запроск в Моих документах');
  Sys.Keys('[Apps]');       
  if NOT ClickByPopupMenuItem(folderTree,'Добавить фильтр из сохраненных запросов') then Raise('Не удалось вызвать контекстную операцию "Добавить фильтр из сохраненных запросов"');
  GetFromShell('КНОПКА "ОК" ДИАЛОГА СОХРАНЕНИЯ ФИЛЬТРА').Click;
  GetListOfAllDocuments;
  filterList := OpenInList('СПИСОК ФИЛЬТРОВ');
  if NOT WorkWithFilters(filterList, 'set', '+' + FOLDER_PREF) then
    Raise('Не удалось применить фильтр :' + FOLDER_PREF);     
  if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF) then Raise('Не удалось удалить запрос из Моих документов');
  OpenInList('СПИСОК ФИЛЬТРОВ');  
  if NOT DeleteFilter(FOLDER_PREF) then
  begin
    Log.Error('С вкладки Фильтры не удалось удалить Фильтр :' + FOLDER_PREF);
    Raise('С вкладки Фильтры не удалось удалить Фильтр :' + FOLDER_PREF);          
  end;  
  GoToMainMenu;
  result := true;  
except  
  Log.Message( FOLDER_PREF + '_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;    
end;

{ HLTC74.4: Удаление объектов из папки
    HLTC74.4.2: Удалить запрос
      HLTC74.4.2.6: Удалить запрос, загруженный в КЗ, и попытаться его снова сохранить.
}
function HLTC74_4_2_6_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_4_2_6';
var  
  folderTree;    
begin          
  result := GoToPPR;         
  if result then  
  begin                      
    Sys.Keys('конституция');
    result := SaveToFoldersExt('Мои документы',FOLDER_PREF,'','Сохранить'); 
    if result then
    begin      
      folderTree := OpenMyDocTab;      
      result := Position_Internal (folderTree,MY_DOCS_PATH+FOLDER_PREF);
      if result then
      begin
        Sys.Keys('[Apps]');          
        result := ClickByPopupMenuItem(folderTree,'Открыть карточку запроса');  
        if result then
        begin    
          result := DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF);
          if result then
          begin               
            GetFromPPR('КАРТОЧКА ЗАПРОСА').SetFocus;
            result := SaveToFoldersExt('Мои документы',FOLDER_PREF,'','Сохранить');
            if NOT result then
              Log.Error('Не удалось сохранить запрос');                
          end
          else
            Log.Error('Не удалось удалить открытый запрос');             
        end
        else
          Log.Warning('Не удалось открыть карточку запроса');      
      end
      else
        Log.Warning('Не удалось спозиционироваться на элементе:'+FOLDER_PREF);           
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF)then
        Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');    
    end      
    else
      Log.Warning('Не удалось сохранить запрос');       
  end
  else
    Log.Warning('Не удалось открыть ППР');    
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
end;  

{ HLTC74.4: Удаление объектов из папки
    HLTC74.4.2: Удалить запрос
      HLTC74.4.2.7: Удалить запрос, имя которого совпадает с именем 
       закладки, списка, папки, также находящихся в данной папке
}
function HLTC74_4_2_7_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_4_2_7';
var
  document;
  allDoc;
begin        
  OpenMyDocTab;
  result := CreateFolderFrom (true, 'Мои документы', 'папка_'+FOLDER_PREF);
  if result then
  begin
    result := GoToPPR;         
    if result then  
    begin                    
      result := SaveToFoldersExt(MY_DOCS_PATH + 'папка_'+FOLDER_PREF,FOLDER_PREF,'','Сохранить'); 
      if result then
      begin      
        result := OpenDocByNumber(10003000); 
        if result then
        begin
          document:=OpenInDocument('ТЕКСТ');
          result := SaveToFoldersExt(MY_DOCS_PATH + 'папка_'+FOLDER_PREF,FOLDER_PREF,'','Сохранить'); 
          if result then
          begin 
            allDoc := GetListOfAllDocuments;  
            result := IsExists(allDoc);
            if result then
            begin
              result := SaveToFoldersExt(MY_DOCS_PATH + 'папка_'+FOLDER_PREF,FOLDER_PREF,'','Сохранить'); 
              if result then
              begin
                OpenMyDocTab;
                result := CreateFolderFrom (true, MY_DOCS_PATH + 'папка_'+FOLDER_PREF, FOLDER_PREF);
                if result then
                begin
                  result := DeleteObjectFromFolder(MY_DOCS_PATH + 'папка_'+FOLDER_PREF+'\'+FOLDER_PREF);
                  if NOT result then
                     Log.Error('Не удалось удалить запрос, имя которого совпадает с именем других объектов в данной папке');
                end
                else 
                  Log.Warning('Не удалось создать папку');
              end
              else
                Log.Warning('Не удалось сохранить список');
            end
            else
              Log.Warning('Не удалось получить список всех документов') ;
          end                                       
          else
            Log.Warning('Не удалось сохранить запрос');
        end
        else
          Log.Warning('Не удалось открыть документ по Alt+N 10003000');    
      end
      else
        Log.Warning('Не удалось сохранить закладку');       
    end
    else
      Log.Warning('Не удалось открыть ППР');   
    if NOT DeleteObjectFromFolder(MY_DOCS_PATH + 'папка_'+FOLDER_PREF)then
      Log.Warning('Объект Мои документы\папка_'+FOLDER_PREF+'не удалён!');     
  end
  else
    Log.Warning('Не удалось создать папку');   
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
end;  

{ HLTC74.4: Удаление объектов из папки
    HLTC74.4.3: Удалить список
      HLTC74.4.3.1: Удалить список, имя которого совпадает с именем  закладки,
       запроса, папки, также находящихся в данной папке
}
function HLTC74_4_3_1_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_4_3_1';
var
  document;
  allDoc;
begin        
  OpenMyDocTab;
  result := CreateFolderFrom (true, 'Мои документы', 'папка_'+FOLDER_PREF);
  if result then
  begin
    allDoc := GetListOfAllDocuments;  
    result := IsExists(allDoc);    
    if result then  
    begin                    
      result := SaveToFoldersExt(MY_DOCS_PATH + 'папка_'+FOLDER_PREF,FOLDER_PREF,'','Сохранить'); 
      if result then
      begin      
        result := OpenDocByNumber(10003000); 
        if result then
        begin
          document:=OpenInDocument('ТЕКСТ');
          result := SaveToFoldersExt(MY_DOCS_PATH + 'папка_'+FOLDER_PREF,FOLDER_PREF,'','Сохранить'); 
          if result then
          begin 
            result := GoToPPR;         
            if result then
            begin
              result := SaveToFoldersExt(MY_DOCS_PATH + 'папка_'+FOLDER_PREF,FOLDER_PREF,'','Сохранить'); 
              if result then
              begin
                OpenMyDocTab;
                result := CreateFolderFrom (true, MY_DOCS_PATH + 'папка_'+FOLDER_PREF, FOLDER_PREF);
                if result then
                begin
                  result := DeleteObjectFromFolder(MY_DOCS_PATH + 'папка_'+FOLDER_PREF+'\'+FOLDER_PREF);
                  if NOT result then
                     Log.Error('Не удалось удалить запрос, имя которого совпадает с именем других объектов в данной папке');
                end
                else 
                  Log.Warning('Не удалось создать папку');
              end
              else
                Log.Warning('Не удалось сохранить список');
            end
            else
              Log.Warning('Не удалось открыть ППР') ;
          end                                       
          else
            Log.Warning('Не удалось сохранить запрос');
        end
        else
          Log.Warning('Не удалось открыть документ по Alt+N 10003000');    
      end
      else
        Log.Warning('Не удалось сохранить закладку');       
    end
    else
      Log.Warning('Не удалось получить список всех документов');   
    if NOT DeleteObjectFromFolder(MY_DOCS_PATH + 'папка_'+FOLDER_PREF)then
      Log.Warning('Объект Мои документы\папка_'+FOLDER_PREF+'не удалён!');     
  end
  else
    Log.Warning('Не удалось создать папку');    
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
end;  

{ HLTC74.4: Удаление объектов из папки
    HLTC74.4.3: Удалить список
      HLTC74.4.3.2: Удалить список, часть документов из которого отсутствует в текущей базе.
!!! Запукаемся на старой базе  БЕЗ Морфологии    
}
function HLTC74_4_3_2_Execute (var  current_state: OleVariant): OleVariant;
const      
  PREF = 'HLTC74_4_3_2';
  CONTEXT = 'председательстве';
  COUNT_ELEMENT_IN_LIST = 5;//Количество элементов в списке: на новой базе должно быть 5!
var
  obj;    
  listArray; 
  countElement;
  str;
begin
try
  if NOT GoTOPPR then Raise('Не удалось перейти в ППР');
  Sys.Keys(CONTEXT + keypause + '^[Enter]');
  obj := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(obj) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');
  if NOT SimpleSaveToFolders('Список' + PREF) then Raise('Не удалось сохранить список');
  if NOT SwitchDataBase(DBT_OTHER, 'IsSwitchOnTheFly:=true') then Raise('Не удалось переключить базу на DBT_OTHER');
  Delay(Options.Run.Timeout div 10);  
  if NOT OpenObjectFromFolder(MY_DOCS_PATH + 'Список' + PREF) then
  begin  
    Log.Error('Не удалось открыть список c частично отсутствующими документами в текущей базе');
    Raise;
  end;
  obj := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(obj) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');
  countElement := CountElementInList(obj);
  str := IntToStr(countElement);
  if NOT (COUNT_ELEMENT_IN_LIST = countElement) then
  begin
    Log.Error('Кол-во эл. в списке с частично отсутств. документами в текуще базе не равно эталонному,должно быть 5', str);
    Raise;
  end;
  if NOT DeleteObjectFromFolder(MY_DOCS_PATH + 'Список' + PREF) then
  begin
    Log.Warning('Не удалось удалить список с частично отсутствующими документами в текущей базе: Мои документы\Список' + PREF);
    Raise;
  end;  
  result := true; 
  GoToMainMenu;
except
  Log.Message('HLTC74_4_3_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{ HLTC74.4: Удаление объектов из папки
    HLTC74.4.3: Удалить список
      HLTC74.4.3.3: Удалить загруженный на экран список.
}
function HLTC74_4_3_3_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_4_3_3';
var    
  allDoc;
  isDel;  
begin          
  isDel := false;
  allDoc := GetListOfAllDocuments;  
  result := IsExists(allDoc);           
  if result then  
  begin                          
    result := SaveToFoldersExt('Мои документы',FOLDER_PREF,'','Сохранить'); 
    if result then
    begin               
      result := OpenObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF);              
      if result then
      begin
        result := DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF);
        if result then
          isDel := True
        else
          Log.Error('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');    
      end
      else 
        Log.Warning('Не удалось открыть объект ' + MY_DOCS_PATH+FOLDER_PREF);
      if NOT isDel then
        if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF)then
          Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');    
    end      
    else
      Log.Warning('Не удалось сохранить список');       
  end
  else
    Log.Warning('Не удалось построить список всех документов');    
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
end;  

{ HLTC74.4: Удаление объектов из папки
    HLTC74.4.3: Удалить список
      HLTC74.4.3.4: Удалить список, все документы из которого есть в текущей базе.
}
function HLTC74_4_3_4_Execute (var  current_state: OleVariant): OleVariant;
const      
  PREF = 'HLTC74_4_3_4';
  CONTEXT = 'Решение о председательстве';
var        
  countElement;
  obj;
begin
try
  if NOT GoTOPPR then Raise('Не удалось перейти в ППР');
  Sys.Keys(CONTEXT + keypause + '^[Enter]');
  obj := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(obj) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');
  countElement := CountElementInList(obj);
  if NOT SimpleSaveToFolders('Список' + PREF) then Raise('Не удалось сохранить список');
  if NOT GoToMainMenu then Raise('Не удалось перейти в ОМ');
  if NOT OpenObjectFromFolder(MY_DOCS_PATH + 'Список' + PREF) then
  begin  
    Log.Error('Не удалось открыть список из Моих документов');
    Raise;
  end;
  obj := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(obj) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');
  if NOT (CountElementInList(obj) = countElement) then
  begin
    Log.Error('Количество элементов в списке не равно эталонному');
    Raise;
  end;
  if NOT DeleteObjectFromFolder(MY_DOCS_PATH + 'Список' + PREF) then
  begin
    Log.Warning('Не удалось удалить список : Мои документы\Список' + PREF);
    Raise;
  end;  
  result := true; 
  GoToMainMenu;
except
  Log.Message('HLTC74_4_3_4_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{ HLTC74.4: Удаление объектов из папки
    HLTC74.4.3: Удалить список
      HLTC74.4.3.6: Удалить список, созданный при использовании  логических операций.
}
function HLTC74_4_3_6_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_4_3_6';
  FOLDER_PREF_TEMP = 'HLTC74_4_3_6_TEMP';             
var    
  list;
begin  
  GetListOfAllDocuments;
  result := SaveToFoldersExt('Мои документы', FOLDER_PREF_TEMP, '', 'Сохранить');
  if result then
  begin
    result := OpenObjectFromFolder(LIST_MAIN,OpenMenuTab);    
    if result then  
    begin 
      list := OpenInList('СПИСОК ДОКУМЕНТОВ');
      result := IsExists(list);
      if result then
      begin
        result := ListLogicalOperation('ДОПОЛНИТЬ',MY_DOCS_PATH + FOLDER_PREF_TEMP);
        if result then
        begin
          list := OpenInList('СПИСОК ДОКУМЕНТОВ');
          list.SetFocus;
          result := SaveToFoldersExt('Мои документы',FOLDER_PREF,'','Сохранить');
          if result then
          begin
            result := DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF);
            if NOT result then
              Log.Error('Не удалось удалить список');
          end
          else
            Log.Warning('Не удалось сохранить список');
        end
        else                         
          Log.Warning('Не удалось выполнить логическую операцию: "Дополнить список"');
      end
      else
        Log.Warning('Объект списка не существует');    
    end
    else
      Log.Warning('Не удалось открыть список по первой ветки рубрикатора');
  end
  else
    Log.Warning('Не удалось сохранить список в Мои документы');
  if NOT DeleteAllInMyDoc then
    Log.Warning('Не удалось удалить все объекты из моих документов');  
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
end;  

{ HLTC74.4: Удаление объектов из папки
    HLTC74.4.4: Проверить, что  удалить объект из папки можно при сохранении 
      запроса/списка (в отдельном диалоге) или установке закладки.
}

function HLTC74_4_4_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_4_4';   
var    
  list;
  folderTree;
begin          
  result := OpenObjectFromFolder(LIST_MAIN,OpenMenuTab);  
  if result then  
  begin        
    list := OpenInList('СПИСОК ДОКУМЕНТОВ');
    result := SaveToFoldersExt('Мои документы',FOLDER_PREF,'','Сохранить');    
    if result then
    begin
      folderTree:=OpenSaveToFolderDialog;
      result := isExists(folderTree);
      if result then
      begin
        result := DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF,folderTree);
        if NOT result then
          Log.Error('Не удалось удалить список из диалога сохранения');
        if NOT FillObjectInfoDialog(folderTree,'OkButtonName := Отмена')then
          Log.Warning('Не удалось закрыть окно диалога сохранения');  
      end
      else
        Log.Warning('Не удалось открыть диалог сохранения');
    end
    else
      Log.Warning('Не удалось сохранить список');    
  end
  else
    Log.Warning('Не удалось открыть список по первой ветки рубрикатора');
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
end;  

{ HLTC74.4: Удаление объектов из папки
    HLTC74.4.5: Удалить папку (использовать каждый способ: клавиша Del, контекстное меню, командное меню,
     HLTC74.4.5.1: Удалить пустую папку       
}
function HLTC74_4_5_1_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_4_5_1'; 
var
  i:integer;  
begin          
  OpenMyDocTab;
  for i := 1 to 3 do
  begin
    result := CreateFolderFrom (i mod 2 = 0, 'Мои документы', FOLDER_PREF); 
    if result then
    begin
      case i of
        1:
        begin                                              
          result := DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF,nil,'HowToDel :=keyboard');
        end;
        2:
        begin
          result := DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF,nil,'HowToDel :=popupmenu');
        end;
        3: 
        begin
          result := DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF,nil,'HowToDel :=mainmenu');
        end;          
      end;    
      if NOT result then
      begin
        Log.Error('Не удалось удалить папку  '+ IntToStr(i) +'-ым методом');
        break;
      end;  
    end
    else
      Log.Warning('Не удалось создать папку');
  end;   
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
end;  

{ HLTC74.4: Удаление объектов из папки
    HLTC74.4.5: Удалить папку (использовать каждый способ: клавиша Del, контекстное меню, командное меню,
     HLTC74.4.5.2: Удалить папку, в которой содержатся только другие пустые подпапки.     
}

function HLTC74_4_5_2_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_4_5_2'; 
var
  i:integer;  
begin          
  OpenMyDocTab;
  for i := 1 to 3 do
  begin
    result := CreateFolderFrom (i mod 2 = 0, 'Мои документы', FOLDER_PREF) AND
              CreateFolderFrom (i mod 2 = 0, MY_DOCS_PATH+FOLDER_PREF, '1_папка_'+FOLDER_PREF) AND
              CreateFolderFrom (i mod 2 = 0, MY_DOCS_PATH+FOLDER_PREF, '2_папка_'+FOLDER_PREF);
    if result then
    begin
      case i of
        1:
        begin                                              
          result := DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF,nil,'HowToDel :=keyboard');
        end;
        2:
        begin
          result := DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF,nil,'HowToDel :=popupmenu');
        end;
        3: 
        begin
          result := DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF,nil,'HowToDel :=mainmenu');
        end;          
      end;    
      if NOT result then
      begin
        Log.Error('Не удалось удалить папку  '+ i +'-ым методом');
        break;
      end;  
    end
    else
      Log.Warning('Не удалось создать папку');
  end;   
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
end;  

{ HLTC74.4: Удаление объектов из папки
    HLTC74.4.5: Удалить папку (использовать каждый способ: клавиша Del, контекстное меню, командное меню,
      HLTC74.4.5.3: Удалить папку, в которой содержится многоуровневая структура подпапок, 
      с сохраненными списками, запросами и закладками. Удаляемые папки в т.ч. должны содержать 
      на одном уровне запросы, папки, закладки списки имеющими одинаковые имена.
}
function HLTC74_4_5_3_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_4_5_3'; 
var
  i:integer; 
  allDoc; 
  isDel : boolean;
  document;
begin        
  isDel := false;  
  OpenMyDocTab;
  for i := 1 to 3 do
  begin
    result := CreateFolderFrom (i mod 2 = 0, 'Мои документы', FOLDER_PREF) AND
          CreateFolderFrom (i mod 2 = 0, MY_DOCS_PATH+FOLDER_PREF, '1_папка_'+FOLDER_PREF) AND
          CreateFolderFrom (i mod 2 = 0, MY_DOCS_PATH+FOLDER_PREF+'\1_папка_'+FOLDER_PREF, '2_папка_'+FOLDER_PREF);
    if result then
    begin
      result := OpenDocByNumber(10003000);    
      if result then  
      begin      
        document:=OpenInDocument('ТЕКСТ');        
        result := SaveToFoldersExt(MY_DOCS_PATH+FOLDER_PREF+'\1_папка_'+FOLDER_PREF+'\2_папка_'+FOLDER_PREF,FOLDER_PREF,'','Сохранить'); 
        if result then
        begin      
          result := GoToPPR;
          if result then
          begin
            result := SaveToFoldersExt(MY_DOCS_PATH+FOLDER_PREF+'\1_папка_'+FOLDER_PREF+'\2_папка_'+FOLDER_PREF,FOLDER_PREF,'','Сохранить'); 
            if result then
            begin 
              allDoc := GetListOfAllDocuments;  
              result := IsExists(allDoc);
              if result then
              begin
                result := SaveToFoldersExt(MY_DOCS_PATH+FOLDER_PREF+'\1_папка_'+FOLDER_PREF+'\2_папка_'+FOLDER_PREF,FOLDER_PREF,'','Сохранить'); 
                if result then
                begin
                  case i of
                    1:
                    begin                          
                      result := DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF,nil,'HowToDel :=keyboard');
                    end;
                    2:
                    begin                
                      result := DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF,nil,'HowToDel :=popupmenu');
                    end;
                    3: 
                    begin
                      result := DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF,nil,'HowToDel :=mainmenu');
                    end;          
                  end;
                  if NOT result then
                  begin
                    isDel := True;
                    Log.Error('Не удалось удалить папку  '+ IntToStr(i) +'-ым методом');
                    break;
                  end;  
                end
                else
                  Log.Warning('Не удалось сохранить список');
              end
              else
                Log.Warning('Не удалось получить список всех документов') ;
            end                                       
            else
              Log.Warning('Не удалось сохранить запрос');
          end
          else
            Log.Warning('Не удалось открыть ППР');    
        end
        else
          Log.Warning('Не удалось сохранить закладку');
      end
      else
        Log.Warning('Не удалось открыть документ по Alt+N 10003000');        
      if isDel then
        if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF)then
          Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+' не удалён!');       
    end
    else
      Log.Warning('Не удалось создать папку');
  end;   
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
end;  

{ HLTC74.4: Удаление объектов из папки
    HLTC74.4.5: Удалить папку (использовать каждый способ: клавиша Del, контекстное меню, командное меню,
      HLTC74.4.5.4: Удалить папку, имя которой совпадает с именем  закладки, списка, запроса, 
       находящихся в данной папке на одном уровне..
}
function HLTC74_4_5_4_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_4_5_4'; 
var
  i:integer; 
  allDoc; 
  document;
begin        
  OpenMyDocTab;
  for i := 1 to 3 do
  begin
    result := CreateFolderFrom (i mod 2 = 0, 'Мои документы', FOLDER_PREF) AND
          CreateFolderFrom (i mod 2 = 0, MY_DOCS_PATH+FOLDER_PREF, '1_папка_'+FOLDER_PREF);
    if result then
    begin
      result := OpenDocByNumber(10003000);    
      if result then  
      begin      
        document:=OpenInDocument('ТЕКСТ');        
        result := SaveToFoldersExt(MY_DOCS_PATH+FOLDER_PREF+'\1_папка_'+FOLDER_PREF,FOLDER_PREF,'','Сохранить'); 
        if result then
        begin      
          result := GoToPPR;
          if result then
          begin
            result := SaveToFoldersExt(MY_DOCS_PATH+FOLDER_PREF+'\1_папка_'+FOLDER_PREF,FOLDER_PREF,'','Сохранить'); 
            if result then
            begin 
              allDoc := GetListOfAllDocuments;  
              result := IsExists(allDoc);
              if result then
              begin
                result := SaveToFoldersExt(MY_DOCS_PATH+FOLDER_PREF+'\1_папка_'+FOLDER_PREF,FOLDER_PREF,'','Сохранить'); 
                if result then
                begin
                  case i of
                    1:
                    begin                                                                 
                      result := DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF+'\1_папка_'+FOLDER_PREF,nil,'HowToDel :=keyboard');
                    end;
                    2:
                    begin                     
                      result := DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF+'\1_папка_'+FOLDER_PREF,nil,'HowToDel :=popupmenu');
                    end;
                    3: 
                    begin                      
                      result := DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF+'\1_папка_'+FOLDER_PREF,nil,'HowToDel :=mainmenu');
                    end;          
                  end;
                  if NOT result then
                  begin
                    Log.Error('Не удалось удалить папку  '+ IntToStr(i) +'-ым методом');
                    break;
                  end;  
                end
                else
                  Log.Warning('Не удалось сохранить список');
              end
              else
                Log.Warning('Не удалось получить список всех документов') ;
            end                                       
            else
              Log.Warning('Не удалось сохранить запрос');
          end
          else
            Log.Warning('Не удалось открыть ППР');    
        end
        else
          Log.Warning('Не удалось сохранить закладку');
      end
      else
        Log.Warning('Не удалось открыть документ по Alt+N 10003000');              
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF)then
        Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');       
    end
    else
      Log.Warning('Не удалось создать папку');
  end;   
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
end;  

{HLTC74.6: Изменение/просмотр свойств объектов
    HLTC74.6.1: Изменить примечания к объектам:   
      HLTC74.6.1.1: Закладка
}
function HLTC74_6_1_1_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_6_1_1'; 
var
  folderTree;
  field;
  document;
begin          
  result := OpenDocByNumber(10003000); 
  if result then
  begin
    document:=OpenInDocument('ТЕКСТ');
    result := SaveToFoldersExt('Мои документы',FOLDER_PREF,'','Сохранить');           
    if result then
    begin  
      folderTree := OpenMyDocTab;
      result := Position_Internal (folderTree,MY_DOCS_PATH+FOLDER_PREF); 
      if result then
      begin
        result := ClickToolbarButton(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', folderTree),'Свойства');
        if result then
        begin
          field := GetFromFolderForm('ПОЛЕ "ПРИМЕЧАНИЕ"',folderTree);
          result := IsExists(field);
          if result then
          begin
            field.SetFocus;
            Sys.Keys('Изменённое примечание');        
            result := ClickToolbarButton(GetFromFolderForm('НИЖНИЙ ТУЛБАР', folderTree),'Ок');
            if result then
            begin              
              folderTree := OpenMyDocTab;        
              result := Position_Internal (folderTree,MY_DOCS_PATH+FOLDER_PREF);   
              if result then
              begin
                result := ClickToolbarButton(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', folderTree),'Свойства');
                if result then
                begin                    
                  result := common.GetWindowText(GetFromFolderForm('ПОЛЕ "ПРИМЕЧАНИЕ"',folderTree).Handle) = 'Изменённое примечание';            
                  if NOT result then
                    Log.Warning('Не удалось изменить примечание объекта');
                  if NOT ClickToolbarButton(GetFromFolderForm('НИЖНИЙ ТУЛБАР', folderTree),'Отмена') then
                    Log.Warning('Не удалось кликнуть по кнопке Отмена');
                end
                else
                  Log.Warning('Не удалось вызвать свойства объекта');
              end
              else
                Log.Warning('Не удалось спозиционироваться элемент');
            end
            else
              Log.Warning('Не удалось кликнуть по кнопке Ок');
          end
          else
            Log.Warning('Не удалось получить объект поля "ПРИМЕЧАНИЕ"');
        end
        else
          Log.Warning('Не удалось вызвать свойства объекта');
      end
      else
        Log.Warning('Не удалось спозиционироваться на объекте');      
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF)then
        Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');      
    end                                  
    else
      Log.Warning('Не удалось сохранить закладку');      
  end
  else
    Log.Warning('Не удалось открыть документ по номеру');
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
end;  

{HLTC74.6: Изменение/просмотр свойств объектов
    HLTC74.6.1: Изменить примечания к объектам:   
      HLTC74.6.1.2: Список
}
function HLTC74_6_1_2_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_6_1_2';
  NOTE = 'Изменённое примечание';
var  
  field;
  obj;  
  str;
begin          
try
  obj := GetListOfAllDocuments;
  if NOT IsExists(obj) then Raise('Не удалось получить список всех документов');
  obj.SetFocus;  
  if NOT SaveToFoldersExt('Мои документы' ,FOLDER_PREF,'','Сохранить') then
    Raise('Не удалось сохранить список');
  obj := OpenMyDocTab;
  if NOT Position_Internal (obj, MY_DOCS_PATH+FOLDER_PREF, '\', false, 'isPressHome:=true') then
    Raise('Не удалось спозиционирваться на элемент');
  if NOT ClickToolbarButton(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', obj), 
                            'Свойства', 'SetToState:=pressed') then 
    Raise('Не удалось нажать кнопку "Свойства"');    
      
  field := GetFromFolderForm('ПОЛЕ "ПРИМЕЧАНИЕ"', obj);  
  if NOT IsExists(field) then Raise('Не удалось получить ПОЛЕ "ПРИМЕЧАНИЕ"');
  field.SetFocus;  
  Sys.Keys(NOTE);
  if NOT ClickToolbarButton(GetFromFolderForm('НИЖНИЙ ТУЛБАР', obj),'Ок') then 
    Raise('Не удалось кликнуть Ок');
  
  if NOT Position_Internal (obj, MY_DOCS_PATH+FOLDER_PREF, '\', false, 'isPressHome:=true') then
    Raise('Не удалось спозиционирваться на элемент');
  if NOT ClickToolbarButton(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', obj), 
                            'Свойства', 'SetToState:=pressed') then 
    Raise('Не удалось нажать кнопку "Свойства"');
  str := common.GetWindowText(GetFromFolderForm('ПОЛЕ "ПРИМЕЧАНИЕ"',obj).Handle);
  if NOT StringCompare(str, NOTE) then
  begin
    Log.Error('Изменённое примечание не равно эталонному', str);
    Raise('Изменённое примечание не равно эталонному');
  end;
  if NOT ClickToolbarButton(GetFromFolderForm('НИЖНИЙ ТУЛБАР', obj),'Отмена') then
    Log.Warning('Не удалось кликнуть по кнопке Отмена');
        
  if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF)then
    Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');      
  result := true;
  GoToMainMenu;
  current_state := ST_MAIN_MENU;
except
  Log.Message('HLTC74_6_1_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;  
end;  

{HLTC74.6: Изменение/просмотр свойств объектов
    HLTC74.6.1: Изменить примечания к объектам:   
      HLTC74.6.1.3: Запрос
}
function HLTC74_6_1_3_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_6_1_3'; 
var
  folderTree;
  field;  
begin          
  result := GoToPPR; 
  if result then
  begin    
    result := SaveToFoldersExt('Мои документы',FOLDER_PREF,'','Сохранить');           
    if result then
    begin  
      folderTree := OpenMyDocTab;
      result := Position_Internal (folderTree,MY_DOCS_PATH+FOLDER_PREF); 
      if result then
      begin
        result := ClickToolbarButton(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', folderTree), 'Свойства', 'SetToState:=pressed');
        if result then
        begin
          field := GetFromFolderForm('ПОЛЕ "ПРИМЕЧАНИЕ"',folderTree);
          result := IsExists(field);
          if result then
          begin
            field.SetFocus;
            Sys.Keys('Изменённое примечание');        
            result := ClickToolbarButton(GetFromFolderForm('НИЖНИЙ ТУЛБАР', folderTree),'Ок');
            if result then
            begin              
              folderTree := OpenMyDocTab;        
              result := Position_Internal (folderTree,MY_DOCS_PATH+FOLDER_PREF);   
              if result then
              begin
                result := ClickToolbarButton(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', folderTree),'Свойства', 'SetToState:=pressed');
                if result then
                begin                    
                  result := common.GetWindowText(GetFromFolderForm('ПОЛЕ "ПРИМЕЧАНИЕ"',folderTree).Handle) = 'Изменённое примечание';            
                  if NOT result then
                    Log.Warning('Не удалось изменить примечание объекта');
                  if NOT ClickToolbarButton(GetFromFolderForm('НИЖНИЙ ТУЛБАР', folderTree),'Отмена') then
                    Log.Warning('Не удалось кликнуть по кнопке Отмена');
                end
                else
                  Log.Warning('Не удалось вызвать свойства объекта');
              end
              else
                Log.Warning('Не удалось спозиционироваться элемент');
            end
            else
              Log.Warning('Не удалось кликнуть по кнопке Ок');
          end
          else
            Log.Warning('Не удалось получить объект поля "ПРИМЕЧАНИЕ"');
        end
        else
          Log.Warning('Не удалось вызвать свойства объекта');
      end
      else
        Log.Warning('Не удалось спозиционироваться на объекте');      
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF)then
        Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');      
    end                                  
    else
      Log.Warning('Не удалось сохранить запрос');      
  end
  else
    Log.Warning('Не удалось открыть ППР');
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
end;  

{HLTC74.6: Изменение/просмотр свойств объектов
    HLTC74.6.1: Изменить примечания к объектам:   
      HLTC74.6.1.4: Папка 
}
function HLTC74_6_1_4_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_6_1_4'; 
var
  folderTree;
  field;
begin          
  folderTree := OpenMyDocTab; 
  result := CreateFolderFrom (true, 'Мои документы', FOLDER_PREF);
  if result then
  begin  
    result := Position_Internal (folderTree,MY_DOCS_PATH+FOLDER_PREF); 
    if result then
    begin
      result := ClickToolbarButton(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', folderTree),'Свойства');
      if result then
      begin
        field := GetFromFolderForm('ПОЛЕ "ПРИМЕЧАНИЕ"',folderTree);
        result := IsExists(field);
        if result then
        begin
          field.SetFocus;
          Sys.Keys('Изменённое примечание');        
          result := ClickToolbarButton(GetFromFolderForm('НИЖНИЙ ТУЛБАР', folderTree),'Ок');
          if result then
          begin              
            folderTree := OpenMyDocTab;        
            result := Position_Internal (folderTree,MY_DOCS_PATH+FOLDER_PREF);   
            if result then
            begin
              result := ClickToolbarButton(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', folderTree),'Свойства');
              if result then
              begin                    
                result := common.GetWindowText(GetFromFolderForm('ПОЛЕ "ПРИМЕЧАНИЕ"',folderTree).Handle) = 'Изменённое примечание';            
                if NOT result then
                  Log.Warning('Не удалось изменить примечание объекта');
                if NOT ClickToolbarButton(GetFromFolderForm('НИЖНИЙ ТУЛБАР', folderTree),'Отмена') then
                  Log.Warning('Не удалось кликнуть по кнопке Отмена');
              end
              else
                Log.Warning('Не удалось вызвать свойства объекта');
            end
            else
              Log.Warning('Не удалось спозиционироваться элемент');
          end
          else
            Log.Warning('Не удалось кликнуть по кнопке Ок');
        end
        else
          Log.Warning('Не удалось получить объект поля "ПРИМЕЧАНИЕ"');
      end
      else
        Log.Warning('Не удалось вызвать свойства объекта');
    end
    else
      Log.Warning('Не удалось спозиционироваться на объекте');      
    if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF)then
      Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');      
  end                                  
  else
    Log.Warning('Не удалось создать папку');      
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
end;  

{HLTC74.6: Изменение/просмотр свойств объектов
    HLTC74.6.2: Проверить запоминание многострочных примечаний (была ошибка, 
    что примечание к одному объекту вводишь, а строки у всех появляются)
}
function HLTC74_6_2_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_6_2'; 
  NOTE_NAME_DEFAULT = 'Папка';
var
  folderTree;
  field;
  toolBar;
  tbBottom;
  i;
  str;
  path;
begin
try
  folderTree := OpenMyDocTab;
  if NOT 
    (  
      CreateFolderFrom (true, 'Мои документы', FOLDER_PREF) AND
      CreateFolderFrom (true, MY_DOCS_PATH + FOLDER_PREF, '1_папка_' + FOLDER_PREF) AND
      CreateFolderFrom (true, MY_DOCS_PATH + FOLDER_PREF, '2_папка_' + FOLDER_PREF) AND
      CreateFolderFrom (true, MY_DOCS_PATH + FOLDER_PREF, '3_папка_' + FOLDER_PREF) 
    ) then
    Raise('Не удалось создать папку!');
  toolBar := GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', folderTree);
  //Меняем прмечания
  for i := 1 to 3 do
  begin
    if NOT ClickToolbarButton(toolBar, 'Свойства', 'SetToState:=pressed') then 
      Raise('Не удалось нажать кнопку "Свойства"');
    path := MY_DOCS_PATH + FOLDER_PREF + '\' + IntToStr(i) + '_папка_'+FOLDER_PREF;  
    if NOT Position_Internal (folderTree, path, '\', false, 'isPressHome:=true') then
      Raise('Не удалось спозиционироваться на элементе :' + path);
    field := GetFromFolderForm('ПОЛЕ "ПРИМЕЧАНИЕ"',folderTree);  
    if NOT IsExists(field) then Raise('Не удалось получить ПОЛЕ "ПРИМЕЧАНИЕ"');
    field.SetFocus;
    str := CopyToClipBoard(field, 'ALL', 'Trim:=true');
    if NOT StringCompare(str, NOTE_NAME_DEFAULT) then
    begin
      Log.Error('Примечание не равно эталонному!');
      Raise;
    end;
    field.SetFocus;
    PressKeyNCount('^a' + keyPause + '[Del]', 2);
    Sys.Keys('Изменённое' + keyPause + '[Enter]' + keyPause + 'примечание ' + IntToStr(i));
    tbBottom := GetFromFolderForm('НИЖНИЙ ТУЛБАР', folderTree);
    if NOT ClickToolbarButton(tbBottom,'Ок') then Raise('Не удалось кликнуть на нижнем тулбаре на Ок');    
  end;          
  //Проверяем, что примечания поменялись
  if NOT ClickToolbarButton(toolBar, 'Свойства', 'SetToState:=pressed') then 
    Raise('Не удалось нажать кнопку "Свойства"');
  for i := 1 to 3 do
  begin    
    path := MY_DOCS_PATH + FOLDER_PREF + '\' + IntToStr(i) + '_папка_'+FOLDER_PREF;  
    if NOT Position_Internal (folderTree, path, '\', false, 'isPressHome:=true') then
      Raise('Не удалось спозиционироваться на элементе :' + path);    
    field := GetFromFolderForm('ПОЛЕ "ПРИМЕЧАНИЕ"',folderTree);  
    if NOT IsExists(field) then Raise('Не удалось получить ПОЛЕ "ПРИМЕЧАНИЕ"');
    str := common.GetWindowText(field.Handle);
    if NOT StringCompare(str, 'Изменённое' + endOfLine + 'примечание ' + IntToStr(i)) then
    begin
      Log.Error('Примечание не эталонно', str);
      Raise;
    end;    
  end;
  if NOT ClickToolbarButton(tbBottom,'Отмена') then Log.Warning('Не удалось кликнуть на нижнем тулбаре на Отмена');
  if NOT DeleteAllInMyDoc then                    
    Log.Warning('Не удалось удалить все объекты из моих документов');   
  result := true;  
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
except  
  Log.Message('HLTC74_6_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;

{HLTC74.6: Изменение/просмотр свойств объектов
    HLTC74.6.3: Изменить имя объекта:
      HLTC74.6.3.1: Закладки
}
function HLTC74_6_3_1_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_6_3_1';
  DOC_NUM = 10003000;
var
  folderTree;
  obj;
  name;
begin
try
  name := 'Изменённое_' + FOLDER_PREF;
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
  if NOT SaveToFoldersExt('Мои документы', FOLDER_PREF, '', 'Сохранить') then 
    Raise('Не удалось установить закладку');
  folderTree := OpenMyDocTab;
  if NOT Position_Internal (folderTree, MY_DOCS_PATH + FOLDER_PREF) then 
    Raise('Не удалось спозиционироваться на элементе');
  obj := GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', folderTree);
  if NOT IsExists(obj) then Raise('Не удалось получить ТУЛБАР "МОИ ДОКУМЕНТЫ"');
  if NOT ClickToolbarButton(obj, 'Свойства', 'SetToState:=pressed') then 
    Raise('Не удалось кликнуть по кнопке "Свойства" на тулбаре');
  obj := GetFromFolderForm('ПОЛЕ "ИМЯ"', folderTree);
  if NOT IsExists(obj) then Raise('Не удалось получить ПОЛЕ "ИМЯ"');
  obj.SetFocus;
  Sys.Keys(name);
  obj := GetFromFolderForm('НИЖНИЙ ТУЛБАР', folderTree);
  if NOT ClickToolbarButton(obj, 'Ок') then Raise('Не удалось кликнуть по кнопке ОК на нижнем тулбаре');
  folderTree := OpenMyDocTab;
  if NOT Position_Internal(folderTree, MY_DOCS_PATH + name, '\', false, 'isPressHome:=true') then 
  begin
    Log.Error('Не удалось спозиционироваться на элементе с Изменённым именем');
    Raise;
  end;
  if NOT DeleteAllInMyDoc then                    
    Log.Warning('Не удалось удалить все объекты из моих документов');
  result := true;
  GoToMainMenu;    
except  
  Log.Message('HLTC74_6_3_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  current_state := ST_MAIN_MENU;
end;  
end;  

{HLTC74.6: Изменение/просмотр свойств объектов
    HLTC74.6.3: Изменить имя объекта:   
      HLTC74.6.3.2: Списка
}
function HLTC74_6_3_2_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_6_3_2'; 
var
  folderTree;
  field;
  allDoc;
  name;
  isDel;
begin          
  isDel :=False;
  name := 'Изменённое_'+FOLDER_PREF;          
  allDoc := GetListOfAllDocuments;
  result := IsExists(allDoc); 
  if result then
  begin
    OpenInList('СПИСОК ДОКУМЕНТОВ');
    result := SaveToFoldersExt('Мои документы',FOLDER_PREF,'','Сохранить'); 
    if result then
    begin  
      folderTree := OpenMyDocTab;
      result := Position_Internal (folderTree,MY_DOCS_PATH+FOLDER_PREF); 
      if result then
      begin
        result := ClickToolbarButton(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', folderTree),'Свойства');
        if result then
        begin
          field := GetFromFolderForm('ПОЛЕ "ИМЯ"',folderTree);
          result := IsExists(field);
          if result then
          begin
            field.SetFocus;
            Sys.Keys(name);        
            result := ClickToolbarButton(GetFromFolderForm('НИЖНИЙ ТУЛБАР', folderTree),'Ок');
            if result then
            begin        
              isDel := True;    
              folderTree := OpenMyDocTab;        
              result := Position_Internal (folderTree,MY_DOCS_PATH+name);   
              if result then
              begin
                result := ClickToolbarButton(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', folderTree),'Свойства');
                if result then
                begin                    
                  result := common.GetWindowText(GetFromFolderForm('ПОЛЕ "ИМЯ"',folderTree).Handle) = name;            
                  if NOT result then
                    Log.Warning('Не удалось изменить имя объекта');
                  if NOT ClickToolbarButton(GetFromFolderForm('НИЖНИЙ ТУЛБАР', folderTree),'Отмена') then
                    Log.Warning('Не удалось кликнуть по кнопке Отмена');
                end
                else
                  Log.Warning('Не удалось вызвать свойства объекта');
              end
              else
                Log.Warning('Не удалось спозиционироваться элемент');
            end
            else
              Log.Warning('Не удалось кликнуть по кнопке Ок');
          end
          else
            Log.Warning('Не удалось получить объект поля  "ИМЯ"');
        end
        else
          Log.Warning('Не удалось вызвать свойства объекта');
      end
      else
        Log.Warning('Не удалось спозиционироваться на объекте');   
      if isDel then     
      begin
        if NOT DeleteObjectFromFolder(MY_DOCS_PATH+name)then
          Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');
      end    
      else
        if NOT DeleteObjectFromFolder(MY_DOCS_PATH+name)then
          Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');
    end                                  
    else
      Log.Warning('Не удалось сохранить список');      
  end
  else
    Log.Warning('Не удалось построить список всех документов');
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
end;  

{HLTC74.6: Изменение/просмотр свойств объектов
    HLTC74.6.3: Изменить имя объекта:   
      HLTC74.6.3.3: Запрос
}
function HLTC74_6_3_3_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_6_3_3'; 
var
  folderTree;
  field;  
  name;
  isDel;
begin          
  isDel :=False;
  name := 'Изменённое_' + FOLDER_PREF;         
  result := GoToPPR; 
  if result then
  begin    
    result := SaveToFoldersExt('Мои документы',FOLDER_PREF,'','Сохранить');           
    if result then
    begin  
      folderTree := OpenMyDocTab;
      result := Position_Internal (folderTree,MY_DOCS_PATH+FOLDER_PREF); 
      if result then
      begin
        result := ClickToolbarButton(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', folderTree),'Свойства', 'SetToState:=pressed');
        if result then
        begin
          field := GetFromFolderForm('ПОЛЕ "ИМЯ"', folderTree);
          result := IsExists(field);
          if result then
          begin
            field.SetFocus;
            PressKeyWithCheck([name]);        
            result := ClickToolbarButton(GetFromFolderForm('НИЖНИЙ ТУЛБАР', folderTree),'Ок');
            if result then
            begin        
              isDel := True;    
              folderTree := OpenMyDocTab;        
              result := Position_Internal (folderTree,MY_DOCS_PATH+name);   
              if result then
              begin
                result := ClickToolbarButton(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', folderTree),'Свойства');
                if result then
                begin                    
                  result := common.GetWindowText(GetFromFolderForm('ПОЛЕ "ИМЯ"',folderTree).Handle) = name;            
                  if NOT result then
                    Log.Warning('Не удалось изменить имя объекта');
                  if NOT ClickToolbarButton(GetFromFolderForm('НИЖНИЙ ТУЛБАР', folderTree),'Отмена') then
                    Log.Warning('Не удалось кликнуть по кнопке Отмена');
                end
                else
                  Log.Warning('Не удалось вызвать свойства объекта');
              end
              else
                Log.Warning('Не удалось спозиционироваться элемент');
            end
            else
              Log.Warning('Не удалось кликнуть по кнопке Ок');
          end
          else
            Log.Warning('Не удалось получить объект поля  "ИМЯ"');
        end
        else
          Log.Warning('Не удалось вызвать свойства объекта');
      end
      else
        Log.Warning('Не удалось спозиционироваться на объекте');   
      if isDel then     
      begin
        if NOT DeleteObjectFromFolder(MY_DOCS_PATH+name)then
          Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');
      end    
      else
        if NOT DeleteObjectFromFolder(MY_DOCS_PATH+name)then
          Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');
    end                                  
    else
      Log.Warning('Не удалось сохранить запрос');  
  end
  else
    Log.Warning('Не удалось открыть ППР');
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
end;  

{HLTC74.6: Изменение/просмотр свойств объектов
    HLTC74.6.3: Изменить имя объекта:
      HLTC74.6.3.4: Папка 
}
function HLTC74_6_3_4_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_6_3_4'; 
var
  folderTree;
  field;
  name;
  isDel;
begin          
  isDel :=False;
  name := 'Изменённое_'+FOLDER_PREF;         
  folderTree := OpenMyDocTab; 
  result := CreateFolderFrom (true, 'Мои документы', FOLDER_PREF);
  if result then
  begin  
    folderTree := OpenMyDocTab;
    result := Position_Internal (folderTree,MY_DOCS_PATH+FOLDER_PREF); 
    if result then
    begin
      result := ClickToolbarButton(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', folderTree),'Свойства');
      if result then
      begin
        field := GetFromFolderForm('ПОЛЕ "ИМЯ"',folderTree);
        result := IsExists(field);
        if result then
        begin
          field.SetFocus;
          Sys.Keys(name);        
          result := ClickToolbarButton(GetFromFolderForm('НИЖНИЙ ТУЛБАР', folderTree),'Ок');
          if result then
          begin        
            isDel := True;    
            folderTree := OpenMyDocTab;        
            result := Position_Internal (folderTree,MY_DOCS_PATH+name);   
            if result then
            begin
              result := ClickToolbarButton(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', folderTree),'Свойства');
              if result then
              begin                    
                result := common.GetWindowText(GetFromFolderForm('ПОЛЕ "ИМЯ"',folderTree).Handle) = name;            
                if NOT result then
                  Log.Warning('Не удалось изменить имя объекта');
                if NOT ClickToolbarButton(GetFromFolderForm('НИЖНИЙ ТУЛБАР', folderTree),'Отмена') then
                  Log.Warning('Не удалось кликнуть по кнопке Отмена');
              end
              else
                Log.Warning('Не удалось вызвать свойства объекта');
            end
            else
              Log.Warning('Не удалось спозиционироваться элемент');
          end
          else
            Log.Warning('Не удалось кликнуть по кнопке Ок');
        end
        else
          Log.Warning('Не удалось получить объект поля  "ИМЯ"');
      end
      else
        Log.Warning('Не удалось вызвать свойства объекта');
    end
    else
      Log.Warning('Не удалось спозиционироваться на объекте');   
    if isDel then     
    begin
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+name)then
        Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');
    end    
    else
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+name)then
        Log.Warning('Объект ' + MY_DOCS_PATH+FOLDER_PREF+'не удалён!');
  end                                  
  else
    Log.Warning('Не удалось создать папку');        
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
end;  

{HLTC74.7: Логические операции со списками
    HLTC74.7.1: Объединение
      HLTC74.7.1.1: Объединить два одинаковых списка. Результатом должен стать тот же список
}
function HLTC74_7_1_1_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_7_1_1';   
var
  folderTree; 
  list;
  listArray;
  list_Pref;
begin
  list_Pref := LIST_ALLCODES; 
  result := OpenEtalonList(LIST_PREF);
  if result then
  begin
    list := OpenInList('СПИСОК ДОКУМЕНТОВ');
    list.SetFocus;
    listArray := GetElementsFromTree(list);
    result := SaveToFoldersExt('Мои документы',FOLDER_PREF,'','Сохранить');
    if result then
    begin
      result := OpenEtalonList(LIST_PREF);
      if result then 
      begin
        list := OpenInList('СПИСОК ДОКУМЕНТОВ');
        list.SetFocus;
        result := ListLogicalOperation('ДОПОЛНИТЬ',MY_DOCS_PATH+FOLDER_PREF);
        if result then
        begin
          list := OpenInList('СПИСОК ДОКУМЕНТОВ');         
          list.SetFocus;              
          result := CompareArray(GetElementsFromTree(list),listArray);
          if NOT result then
            Log.Error('Результирующий список не равен исходному');
        end
        else
          Log.Warning('Не удалось выполнить для списка операцию "ДОПОЛНИТЬ"');
      end
      else
        Log.Warning('Не удалось открыть список: все кодексы' );
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF) then
        Log.Warning('Объект "' + MY_DOCS_PATH+FOLDER_PREF+'" не удалён');
    end
    else
      Log.Warning('Не удалось сохранить список');
  end
  else
    Log.Warning('Не удалось открыть список: все кодексы');
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
end;

{HLTC74.7: Логические операции со списками
    HLTC74.7.1: Объединение
      HLTC74.7.1.2: Объединить список из 1 док-та со списком. Результат: список + 1 документ
}
function HLTC74_7_1_2_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_7_1_2';
var
  folderTree; 
  listArrayOne; //массив списока из 1 док-та 
  listArray;   //массив списка 
  list;
  listArrayTo; //массив списка результирующего
  list_Pref_To;
begin
  list_Pref_To := LIST_ALLCODES;   
  result := OpenObjectFromFolder(LIST_MAIN,OpenMenuTab);
  if result then
  begin
    list := OpenInList('СПИСОК ДОКУМЕНТОВ');
    list.SetFocus;
    Sys.Keys('[Home][Down][P200]');
    Sys.Keys('![End][P200]');
    Sys.Keys('[Del]');  
    DelWithConfirm;     
    listArrayOne := GetElementsFromTree(list);
    result := SaveToFoldersExt('Мои документы',FOLDER_PREF,'','Сохранить');
    if result then
    begin
      result := OpenEtalonList(LIST_PREF_TO);
      if result then 
      begin
        list := OpenInList('СПИСОК ДОКУМЕНТОВ');
        list.SetFocus;
        listArray := AddArrays(ListArrayOne,GetElementsFromTree(list));         
        result := ListLogicalOperation('ДОПОЛНИТЬ',MY_DOCS_PATH+FOLDER_PREF);
        if result then
        begin           
          listArrayTo := GetElementsFromTree(OpenInList('СПИСОК ДОКУМЕНТОВ'));   
          SortArray(listArray);
          SortArray(listArrayTo);
          result := CompareArray(listArrayTo,listArray);
          if NOT result then
            Log.Error('Результирующий список не равен списку: 1 документ + список');
        end
        else
          Log.Warning('Не удалось выполнить для списка операцию "ДОПОЛНИТЬ"');
      end
      else
        Log.Warning('Не удалось открыть список: все кодексы' );
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF) then
        Log.Warning('Объект "' + MY_DOCS_PATH+FOLDER_PREF+'" не удалён');
    end
    else
      Log.Warning('Не удалось сохранить список');
  end
  else
    Log.Warning('Не удалось открыть список:' + LIST_MAIN);
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
end;
     
{HLTC74.7: Логические операции со списками
    HLTC74.7.1: Объединение
      HLTC74.7.1.3: Объединить список всех документов со списком из 1 док-та. Результат: список всех документов
}
function HLTC74_7_1_3_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_7_1_3';
var                                                                                              
  allDoc; 
  listCount: integer;
  list;
  list_Pref;
begin
  list_Pref := LIST_ALLCODES;   
  allDoc := GetListOfAllDocuments;
  result := IsExists(allDoc);
  if result then
  begin  
    listCount := CountElementInList(OpenInList('СПИСОК ДОКУМЕНТОВ'));
    result := SaveToFoldersExt('Мои документы',FOLDER_PREF,'','Сохранить');
    if result then
    begin
      result := OpenEtalonList(LIST_PREF);
      if result then 
      begin
        list := OpenInList('СПИСОК ДОКУМЕНТОВ');
        list.SetFocus;
        Sys.Keys('[Home][Down][P200]');
        Sys.Keys('![End][P200]');
        Sys.Keys('[Del]');   
        DelWithConfirm;        
        result := ListLogicalOperation('ДОПОЛНИТЬ',MY_DOCS_PATH+FOLDER_PREF);
        if result then
        begin        
          result := listCount = CountElementInList(OpenInList('СПИСОК ДОКУМЕНТОВ')); 
          if NOT result then
            Log.Error('Кол-во элементов результирующего списка не равно кол-ву элементов списка всех документов');
        end
        else
          Log.Warning('Не удалось выполнить для списка операцию "ДОПОЛНИТЬ"');
      end
      else
        Log.Warning('Не удалось открыть список: Все кодексы');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF) then
        Log.Warning('Объект "' + MY_DOCS_PATH+FOLDER_PREF+'" не удалён');
    end
    else
      Log.Warning('Не удалось сохранить список');
  end
  else
    Log.Warning('Не удалось построить список всех документов');
  GoToMainMenu;
  current_state := ST_MAIN_MENU; 
end;

{HLTC74.7: Логические операции со списками
    HLTC74.7.2: Пересечение
      HLTC74.7.2.1: Пересечь два одинаковых списка. Результатом должен стать тот же список
}
function HLTC74_7_2_1_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_7_2_1'; 
var     
  list;
  listArray;
  list_Pref;
begin
  list_Pref := LIST_ALLCODES;   
  result := OpenEtalonList(LIST_PREF);
  if result then
  begin
    list := OpenInList('СПИСОК ДОКУМЕНТОВ');
    list.SetFocus;
    listArray := GetElementsFromTree(list);
    result := SaveToFoldersExt('Мои документы',FOLDER_PREF,'','Сохранить');
    if result then
    begin
      result := OpenEtalonList(LIST_PREF);
      if result then 
      begin
        list := OpenInList('СПИСОК ДОКУМЕНТОВ');
        list.SetFocus;
        result := ListLogicalOperation('ПЕРЕСЕЧЬ',MY_DOCS_PATH+FOLDER_PREF);
        if result then
        begin
          list := OpenInList('СПИСОК ДОКУМЕНТОВ');         
          list.SetFocus;              
          result := CompareArray(GetElementsFromTree(list),listArray);
          if NOT result then
            Log.Error('Результирующий список не равен исходному');
        end
        else
          Log.Warning('Не удалось выполнить для списка операцию "ПЕРЕСЕЧЬ"');
      end
      else
        Log.Warning('Не удалось открыть список: Все кодексы' );
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF) then
        Log.Warning('Объект "' + MY_DOCS_PATH+FOLDER_PREF+'" не удалён');
    end
    else
      Log.Warning('Не удалось сохранить список');
  end
  else
    Log.Warning('Не удалось открыть список: Все кодексы' );
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
end;

{HLTC74.7: Логические операции со списками
    HLTC74.7.2: Пересечение
      HLTC74.7.2.2: Пересечь список всех документов со списком из 1 док-та. Результат: список из 1 док-та
}
function HLTC74_7_2_2_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_7_2_2';
var                                                                                              
  allDoc;  
  list;
  listArray;
  list_Pref;
begin
  list_Pref := LIST_ALLCODES;
  allDoc := GetListOfAllDocuments;
  result := IsExists(allDoc);
  if result then
  begin     
    result := SaveToFoldersExt('Мои документы',FOLDER_PREF,'','Сохранить');
    if result then
    begin
      result := OpenEtalonList(LIST_PREF);
      if result then 
      begin
        list := OpenInList('СПИСОК ДОКУМЕНТОВ');
        list.SetFocus;
        Sys.Keys('[Home][Down][P200]');
        Sys.Keys('![End][P200]');
        Sys.Keys('[Del]');   
        DelWithConfirm;
        listArray := GetElementsFromTree(list); 
        result := ListLogicalOperation('ПЕРЕСЕЧЬ',MY_DOCS_PATH+FOLDER_PREF);
        if result then
        begin      
          result := CompareArray(GetElementsFromTree(OpenInList('СПИСОК ДОКУМЕНТОВ')),listArray);          
          if NOT result then
            Log.Error('Результирующий список не равен списку из одного документа');
        end
        else
          Log.Warning('Не удалось выполнить для списка операцию "ПЕРЕСЕЧЬ"');
      end
      else
        Log.Warning('Не удалось открыть список: Все кодексы' );
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF) then
        Log.Warning('Объект "' + MY_DOCS_PATH+FOLDER_PREF+'" не удалён');
    end
    else
      Log.Warning('Не удалось сохранить список');
  end
  else
    Log.Warning('Не удалось построить список всех документов');
  GoToMainMenu;
  current_state := ST_MAIN_MENU; 
end;

{HLTC74.7: Логические операции со списками
 HLTC74.7.2: Пересечение
  HLTC74.7.2.3: Пересечь список, состоящий из отсутствующих в базе документов, со списком из 
   документов базы. Должно появиться сообщение о том, что такого списка нет в данном комплекте.
   
  HLTC74.7.3.5: Вычесть из списка документов базы список, состоящий из отсутствующих в базе документов.
   Должно появиться сообщение о том, что такого списка нет в данном комплекте.
  
!!!С начала загружаемся на старой базе  
}
function HLTC74_7_2_3_Execute (var  current_state: OleVariant): OleVariant;
const      
  PREF = 'HLTC74_7_2_3';
  CONTEXT = 'Сравнительный очерк горного';
  ETALON_MESSAGE = 'Сохраненный список*отсутствует в установленном у Вас информационном комплекте.';
var
  obj;
  login, pass, count;  
  folderForm;
  list;
  str;
begin
try
  login := PREF + '_user';
  pass  := PREF;
  count := 5;
  RestartF1Shell(count, Options.Run.Timeout div 6, login, pass);
  if NOT GoTOPPR then Raise('Не удалось перейти в ППР');
  Sys.Keys(CONTEXT + keypause + '^[Enter]');
  obj := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(obj) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');
  if NOT SimpleSaveToFolders('Список' + PREF) then Raise('Не удалось сохранить список');
  if NOT SwitchDataBase(DBT_NEW) then Raise('Не удалось переключить базу на DBT_NEW');
  LoginAnyhow(login, pass);  
  if NOT Position_Internal(OpenMyDocTab, MY_DOCS_PATH + 'Список' + PREF) then
  begin  
    Log.Error('Не удалось спозиционироваться на список c отсутствующими документами в текущей базе');
    Raise;
  end;
  Sys.Keys('[Enter]');
  str := WaitForInfoWindow;
  if NOT StringCompare(ETALON_MESSAGE ,str) then
  begin
    Log.Error('При открытии списка с отсутствующими документами в текущей базе не выдалось эталооное окно с предупреждением', str);
    Raise;
  end;
  if NOT GoToPPR then Raise('Не удалось открыть ППР');
  Sys.Keys('^[Enter]');
  list := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(list) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');
  list.SetFocus;
  if NOT ClickByMainMenuItem('Анализ\Пересечь со списком...') then
    Raise('Не удалось вызвать пункт главного меню <Анализ\Пересечь со списком...>');
  folderForm := GetFromShell('ДИАЛОГ "ПЕРЕСЕЧЬ СО СПИСКОМ"');
  if NOT IsExists(folderForm) then Raise('Не удалось получить ДИАЛОГ "ПЕРЕСЕЧЬ СО СПИСКОМ"');
  obj := GetFromFolderForm('ДЕРЕВО ПАПОК', folderForm);
  if NOT Position_Internal(obj, MY_DOCS_PATH + 'Список' + PREF) then
  begin  
    Log.Error('Не удалось спозиционироваться на список c отсутствующими документами в текущей базе');
    Raise;
  end;
  Sys.Keys('[Enter]');
  str := WaitForInfoWindow;
  if NOT StringCompare(ETALON_MESSAGE ,str) then
  begin
    Log.Error('При открытии списка с отсутствующими документами в текущей базе не выдалось эталооное окно с предупреждением', str);
    Raise;
  end;
  if NOT ClickToolBarButton(GetFromFolderForm('НИЖНИЙ ТУЛБАР', folderForm), 'Отмена') then Raise('Не удалось нажать кнопку "Отмена" в модальном окне');
  list.SetFocus;
  if NOT ClickByMainMenuItem('Анализ\Вычесть список...') then
    Raise('Не удалось вызвать пункт главного меню <Анализ\Вычесть список...>');
  folderForm := GetFromShell('ДИАЛОГ "ВЫЧЕСТЬ СПИСОК"');
  if NOT IsExists(folderForm) then Raise('Не удалось получить ДИАЛОГ "ВЫЧЕСТЬ СПИСОК"');
  obj := GetFromFolderForm('ДЕРЕВО ПАПОК', folderForm);
  if NOT Position_Internal(obj, MY_DOCS_PATH + 'Список' + PREF) then
  begin  
    Log.Error('Не удалось спозиционироваться на список c отсутствующими документами в текущей базе');
    Raise;
  end;
  Sys.Keys('[Enter]');
  str := WaitForInfoWindow;
  if NOT StringCompare(ETALON_MESSAGE ,str) then
  begin
    Log.Error('При открытии списка с отсутствующими документами в текущей базе не выдалось эталооное окно с предупреждением', str);
    Raise;
  end;
  if NOT ClickToolBarButton(GetFromFolderForm('НИЖНИЙ ТУЛБАР', folderForm), 'Отмена') then 
    Log.Warning('Не удалось нажать кнопку "Отмена" в модальном окне');
  if NOT DeleteAllInMyDoc then                    
    Log.Warning('Не удалось удалить все объекты из моих документов');  
  result := true; 
  GoToMainMenu;
except
  Log.Message('HLTC74_7_2_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  if NOT DeleteAllInMyDoc then                    
    Log.Warning('Не удалось удалить все объекты из моих документов');  
  CommonExceptionHandler;
end;
end;

{HLTC74.7: Логические операции со списками
    HLTC74.7.3: Вычитание
      HLTC74.7.3.1: Вычесть одинаковые списки друг из друга. Результатом должен стать пустой список
}
function HLTC74_7_3_1_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_7_3_1'; 
  TEST_WORD = 'Результат операции - пустой список!';
var
  str;  
  list_Pref;
begin
  list_Pref := LIST_ALLCODES;   
  result := OpenEtalonList(LIST_PREF);
  if result then
  begin
    OpenInList('СПИСОК ДОКУМЕНТОВ');    
    result := SaveToFoldersExt('Мои документы',FOLDER_PREF,'','Сохранить');
    if result then
    begin
      result := OpenEtalonList(LIST_PREF);
      if result then 
      begin
        OpenInList('СПИСОК ДОКУМЕНТОВ');        
        result := ListLogicalOperation('ВЫЧЕСТЬ',MY_DOCS_PATH+FOLDER_PREF);
        if NOT result then
          Log.Error('Не удалось корректно выполнить логическую операцию "Вычесть"');
      end
      else
        Log.Warning('Не удалось открыть список: Все кодексы');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF) then
        Log.Warning('Объект "' + MY_DOCS_PATH+FOLDER_PREF+'" не удалён');
    end
    else
      Log.Warning('Не удалось сохранить список');
  end
  else
    Log.Warning('Не удалось открыть список: Все кодексы' );
  GoToMainMenu;
  current_state := ST_MAIN_MENU;
end;

{HLTC74.7: Логические операции со списками
    HLTC74.7.3: Вычитание
      HLTC74.7.3.2: Вычесть из списка 1 док-та непустой список, не содержащий 
      этого документа. Результат: список 1 док-та 
}
function HLTC74_7_3_2_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_7_3_2';    
var    
  listArray;  
  list;  
  list_Pref;
begin
  list_Pref := LIST_ALLCODES;
  result := OpenObjectFromFolder(LIST_MAIN,OpenMenuTab);  
  if result then
  begin
    OpenInList('СПИСОК ДОКУМЕНТОВ');    
    result := SaveToFoldersExt('Мои документы',FOLDER_PREF,'','Сохранить');
    if result then
    begin
      result := OpenEtalonList(LIST_PREF);
      if result then 
      begin
        list := OpenInList('СПИСОК ДОКУМЕНТОВ');
        list.SetFocus;
        Sys.Keys('[Home][Down][P200]');
        Sys.Keys('![End][P200]');
        Sys.Keys('[Del]'); 
        DelWithConfirm;        
        listArray := GetElementsFromTree(list);
        result := ListLogicalOperation('ВЫЧЕСТЬ',MY_DOCS_PATH+FOLDER_PREF);
        if result then
        begin           
          result := CompareArray(GetElementsFromTree(OpenInList('СПИСОК ДОКУМЕНТОВ')),listArray);
          if NOT result then
            Log.Error('Результирующий список не равен списку из одного документа');
        end
        else
          Log.Warning('Не удалось выполнить для списка операцию "ВЫЧЕСТЬ"');
      end
      else
        Log.Warning('Не удалось открыть список: Все кодексы' );
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF) then
        Log.Warning('Объект "' + MY_DOCS_PATH+FOLDER_PREF+'" не удалён');
    end
    else
      Log.Warning('Не удалось сохранить список');
  end
  else
    Log.Warning('Не удалось открыть список:' + LIST_MAIN);
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
end;

{HLTC74.7: Логические операции со списками
    HLTC74.7.3: Вычитание
      HLTC74.7.3.3: Вычесть из списка всех документов список 1-го документа.
       Результат: список из всех документов без 1-го.
       
       HLTC74.7.4: При выполнении логических операций со списками появляется 
       предупреждение «Список был изменен».
}
function HLTC74_7_3_3_Execute (var  current_state: OleVariant): OleVariant;
const 
  FOLDER_PREF = 'HLTC74_7_3_3'; 
var                                                                                              
  allDoc; 
  listCount,listCountOne: integer;
  list;
  list_Pref;
begin
  list_Pref := LIST_ALLCODES;   
  result := OpenEtalonList(LIST_PREF );
  if result then 
  begin
    list := OpenInList('СПИСОК ДОКУМЕНТОВ');
    list.SetFocus;
    Sys.Keys('[Home][Down][P200]');
    Sys.Keys('![End][P200]');
    Sys.Keys('[Del]'); 
    DelWithConfirm;     
    listCountOne := CountElementInList(list);
    result := SaveToFoldersExt('Мои документы',FOLDER_PREF,'','Сохранить');
    if result then
    begin
      allDoc := GetListOfAllDocuments;
      result := IsExists(allDoc);
      if result then 
      begin
        listCount := CountElementInList(OpenInList('СПИСОК ДОКУМЕНТОВ'));      
        result := ListLogicalOperation('ВЫЧЕСТЬ',MY_DOCS_PATH+FOLDER_PREF);
        if result then
        begin                        
          result := ( listCount-listCountOne = CountElementInList(OpenInList('СПИСОК ДОКУМЕНТОВ')) )AND 
            IsExists( GetFromList('ЗНАЧОК: СПИСОК БЫЛ ИЗМЕНЕН')); 
          if NOT result then          
          begin
            if NOT IsExists( GetFromList('ЗНАЧОК: СПИСОК БЫЛ ИЗМЕНЕН')) then
              Log.Error('После выполнения логической операции над списком не появилось предупреждение "Список был изменён"')
            else  
              Log.Error('Кол-во элементов результирующего списка не равно кол-ву элементов списка всех документов,'+
                ' минус кол-во элементов вычтенного списка');
          end;      
        end
        else
          Log.Warning('Не удалось выполнить для списка операцию "ВЫЧЕСТЬ"');
      end
      else
        Log.Warning('Не удалось построить список всех документов');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF) then
        Log.Warning('Объект "' + MY_DOCS_PATH+FOLDER_PREF+'" не удалён');
    end
    else
      Log.Warning('Не удалось сохранить список');
  end
  else
    Log.Warning('Не удалось открыть список: Все кодексы' );
  GoToMainMenu;
  current_state := ST_MAIN_MENU; 
end;

{HLTC74.8: Типизированная фильтрация
   HLTC74.8.1: HLTC74.8.1: Произвести фильтрацию и проверить, что папки, не содержащие объектов, 
   удовлетворяющих условию типизированного фильтра,  показываются пустыми:
     HLTC74.8.1.1: закладки     
}
function  HLTC74_8_1_1_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF='HLTC74_8_1_1';
var
  folderTree;  
  comboBox; 
  allDoc;
  document;
  res : boolean;
begin  
  res := false; 
  folderTree := OpenMyDocTab; 
  result := CreateFolderFrom (true,  'Мои документы', 'закладки_' + FOLDER_PREF) AND
            CreateFolderFrom (false, 'Мои документы', 'списки_'   +  FOLDER_PREF) AND  
            CreateFolderFrom (true,  'Мои документы', 'запросы_'  + FOLDER_PREF) AND
            CreateFolderFrom (false, 'Мои документы', 'фильтры_'  + FOLDER_PREF);            
  if result then
  begin  
    result := OpenDocByNumber(10003000);    
    if result then  
    begin      
      document:=OpenInDocument('ТЕКСТ');        
      result := SaveToFoldersExt(MY_DOCS_PATH + 'закладки_'+FOLDER_PREF,FOLDER_PREF,'','Сохранить'); 
      if result then  
      begin
        allDoc := GetListOfAllDocuments;  
        result := IsExists(allDoc);
        if result then
        begin
          result := SaveToFoldersExt(MY_DOCS_PATH + 'списки_'+FOLDER_PREF,FOLDER_PREF,'','Сохранить'); 
          if result then
          begin
            result := GoToPPR;
            if result then
            begin
              result := SaveToFoldersExt(MY_DOCS_PATH + 'запросы_'+FOLDER_PREF,FOLDER_PREF,'','Сохранить'); 
              if result then
              begin 
                result := GoToPPR;
                if result then
                begin
                  result := SaveToFoldersExt(MY_DOCS_PATH + 'фильтры_'+FOLDER_PREF,FOLDER_PREF,'','Сохранить'); 
                  if result then
                  begin                     
                    folderTree := OpenMyDocTab;
                    result := Position_Internal (folderTree,MY_DOCS_PATH + 'фильтры_'+FOLDER_PREF+'\'+FOLDER_PREF);
                    if result then
                    begin
                      Sys.Keys('[Apps]');
                      result := ClickByPopupMenuItem(folderTree,'Добавить фильтр из сохраненных запросов');
                      GetFromShell('КНОПКА "ОК" ДИАЛОГА СОХРАНЕНИЯ ФИЛЬТРА').Click;  
                      if result then
                      begin        
                        folderTree := OpenMyDocTab;        
                        comboBox := GetToolbarObject(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"',folderTree),'COMBOBOX','Фильтрация элементов папок по типу');            
                        result := SelectInComboBox(ComboBox,'Закладки');                                                                                                           
                        if result then
                        begin
                          res := Position_Internal (folderTree,MY_DOCS_PATH + 'закладки_'+FOLDER_PREF+'\'+FOLDER_PREF,'\', true, 'IsPressHome:=true');
                          result := res AND
                              NOT Position_Internal (folderTree,MY_DOCS_PATH + 'списки_'+FOLDER_PREF+'\'+FOLDER_PREF,'\', true, 'IsPressHome:=true') AND
                              NOT Position_Internal (folderTree,MY_DOCS_PATH + 'запросы_'+FOLDER_PREF+'\'+FOLDER_PREF,'\', true, 'IsPressHome:=true') AND
                              NOT Position_Internal (folderTree,MY_DOCS_PATH + 'фильтры_'+FOLDER_PREF+'\'+FOLDER_PREF,'\', true, 'IsPressHome:=true');
                          if NOT result then
                          begin
                            if NOT res then
                              Log.Error('Папка, содержащие элементв, удовлетворяющий условию типизированного фильтра -не показываются')
                            else  
                              Log.Error('Папки, не содержащие эл-тов, удовлетворяющих условию типизированного фильтра - показываются');                                      
                          end;                                         
                          if NOT SelectInComboBox(comboBox,'Все объекты')then
                            Log.Warning('Не удалось установить значение типизированного фильтра как "Все объекты"');
                        end                        
                        else
                          Log.Warning('Не удалось установить значение типизированного фильтра как "ЗАКЛАДКИ"');
                      end
                      else
                        Log.Warning('Не удалось использовать запрос как фильтр');        
                    end
                    else
                      Log.Warning('Не удалось спозиционироваться на элементе');    
                    if NOT DeleteObjectFromFolder(MY_DOCS_PATH + 'фильтры_'+FOLDER_PREF) then
                      Log.Warning('Объект "Мои документы\фильтры_'+FOLDER_PREF+'" не удалён');
                  end
                  else
                    Log.Warning('Не удалось сохранить запрос');
                end  
                else
                  Log.Warning('Не удалось открыть ППР');
                if NOT DeleteObjectFromFolder(MY_DOCS_PATH + 'запросы_'+FOLDER_PREF) then
                  Log.Warning('Объект "Мои документы\запросы_'+FOLDER_PREF+'" не удалён');
              end
              else
                Log.Warning('Не удалось сохранить запрос');
            end  
            else
              Log.Warning('Не удалось открыть ППР');
            if NOT DeleteObjectFromFolder(MY_DOCS_PATH + 'списки_'+FOLDER_PREF) then
              Log.Warning('Объект "Мои документы\списки_'+FOLDER_PREF+'" не удалён');
          end
          else
            Log.Warning('Не удалось сохранить список');
        end
        else
          Log.Warning('Не удалось построить список всех документов');
        if NOT DeleteObjectFromFolder(MY_DOCS_PATH + 'закладки_'+FOLDER_PREF) then
          Log.Warning('Объект "Мои документы\закладки_'+FOLDER_PREF+'" не удалён');    
      end
      else
        Log.Warning('Не удалось сохранить закладку');
    end
    else
      Log.Warning('Не удалось открыть документ по номеру');
  end
  else
    Log.Warning('Не удалось создать одну из папкок');
  folderTree := OpenMyDocTab;        
  comboBox := GetToolbarObject(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"',folderTree),'COMBOBOX','Фильтрация элементов папок по типу');            
  SelectInComboBox(ComboBox,'Все объекты');
  DeleteFilter(FOLDER_PREF);  
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
end;

{HLTC74.8: Типизированная фильтрация
   HLTC74.8.1: HLTC74.8.1: Произвести фильтрацию и проверить, что папки, не содержащие объектов, 
   удовлетворяющих условию типизированного фильтра,  показываются пустыми:
     HLTC74.8.1.2: списки  
}
function  HLTC74_8_1_2_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF='HLTC74_8_1_2';
var
  folderTree;  
  comboBox; 
  allDoc;
  document;
  res : boolean;
begin  
  res := false; 
  folderTree := OpenMyDocTab; 
  result := CreateFolderFrom (true,  'Мои документы', 'закладки_' + FOLDER_PREF) AND
            CreateFolderFrom (false, 'Мои документы', 'списки_'   +  FOLDER_PREF) AND  
            CreateFolderFrom (true,  'Мои документы', 'запросы_'  + FOLDER_PREF) AND
            CreateFolderFrom (false, 'Мои документы', 'фильтры_'  + FOLDER_PREF);            
  if result then
  begin  
    result := OpenDocByNumber(10003000);    
    if result then  
    begin      
      document:=OpenInDocument('ТЕКСТ');        
      result := SaveToFoldersExt(MY_DOCS_PATH + 'закладки_'+FOLDER_PREF,FOLDER_PREF,'','Сохранить'); 
      if result then  
      begin
        allDoc := GetListOfAllDocuments;  
        result := IsExists(allDoc);
        if result then
        begin
          result := SaveToFoldersExt(MY_DOCS_PATH + 'списки_'+FOLDER_PREF,FOLDER_PREF,'','Сохранить'); 
          if result then
          begin
            result := GoToPPR;
            if result then
            begin
              result := SaveToFoldersExt(MY_DOCS_PATH + 'запросы_'+FOLDER_PREF,FOLDER_PREF,'','Сохранить'); 
              if result then
              begin 
                result := GoToPPR;
                if result then
                begin
                  result := SaveToFoldersExt(MY_DOCS_PATH + 'фильтры_'+FOLDER_PREF,FOLDER_PREF,'','Сохранить'); 
                  if result then
                  begin                     
                    folderTree := OpenMyDocTab;
                    result := Position_Internal (folderTree,MY_DOCS_PATH + 'фильтры_'+FOLDER_PREF+'\'+FOLDER_PREF);
                    if result then
                    begin
                      Sys.Keys('[Apps]');
                      result := ClickByPopupMenuItem(folderTree,'Добавить фильтр из сохраненных запросов');
                      GetFromShell('КНОПКА "ОК" ДИАЛОГА СОХРАНЕНИЯ ФИЛЬТРА').Click;  
                      if result then
                      begin        
                        folderTree := OpenMyDocTab;        
                        comboBox := GetToolbarObject(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"',folderTree),'COMBOBOX','Фильтрация элементов папок по типу');            
                        result := SelectInComboBox(ComboBox,'Списки');                                                                                                           
                        if result then
                        begin
                          res := Position_Internal (folderTree,MY_DOCS_PATH + 'списки_'+FOLDER_PREF+'\'+FOLDER_PREF,'\', true, 'IsPressHome:=true');
                          result := res AND
                              NOT Position_Internal (folderTree,MY_DOCS_PATH + 'закладки_'+FOLDER_PREF+'\'+FOLDER_PREF,'\', true, 'IsPressHome:=true') AND
                              NOT Position_Internal (folderTree,MY_DOCS_PATH + 'запросы_'+FOLDER_PREF+'\'+FOLDER_PREF,'\', true, 'IsPressHome:=true') AND
                              NOT Position_Internal (folderTree,MY_DOCS_PATH + 'фильтры_'+FOLDER_PREF+'\'+FOLDER_PREF,'\', true, 'IsPressHome:=true');
                          if NOT result then
                          begin
                            if NOT res then
                              Log.Error('Папка, содержащие элементв, удовлетворяющий условию типизированного фильтра -не показываются')
                            else  
                              Log.Error('Папки, не содержащие эл-тов, удовлетворяющих условию типизированного фильтра - показываются');                                      
                          end;                                         
                          if NOT SelectInComboBox(comboBox,'Все объекты')then
                            Log.Warning('Не удалось установить значение типизированного фильтра как "Все объекты"');
                        end                        
                        else
                          Log.Warning('Не удалось установить значение типизированного фильтра как "СПИСКИ"');
                      end
                      else
                        Log.Warning('Не удалось использовать запрос как фильтр');        
                    end
                    else
                      Log.Warning('Не удалось спозиционироваться на элементе');    
                    if NOT DeleteObjectFromFolder(MY_DOCS_PATH + 'фильтры_'+FOLDER_PREF) then
                      Log.Warning('Объект "Мои документы\фильтры_'+FOLDER_PREF+'" не удалён');
                  end
                  else
                    Log.Warning('Не удалось сохранить запрос');
                end  
                else
                  Log.Warning('Не удалось открыть ППР');
                if NOT DeleteObjectFromFolder(MY_DOCS_PATH + 'запросы_'+FOLDER_PREF) then
                  Log.Warning('Объект "Мои документы\запросы_'+FOLDER_PREF+'" не удалён');
              end
              else
                Log.Warning('Не удалось сохранить запрос');
            end  
            else
              Log.Warning('Не удалось открыть ППР');
            if NOT DeleteObjectFromFolder(MY_DOCS_PATH + 'списки_'+FOLDER_PREF) then
              Log.Warning('Объект "Мои документы\списки_'+FOLDER_PREF+'" не удалён');
          end
          else
            Log.Warning('Не удалось сохранить список');
        end
        else
          Log.Warning('Не удалось построить список всех документов');
        if NOT DeleteObjectFromFolder(MY_DOCS_PATH + 'закладки_'+FOLDER_PREF) then
          Log.Warning('Объект "Мои документы\закладки_'+FOLDER_PREF+'" не удалён');    
      end
      else
        Log.Warning('Не удалось сохранить закладку');
    end
    else
      Log.Warning('Не удалось открыть документ по номеру');
  end
  else
    Log.Warning('Не удалось создать одну из папкок');
  folderTree := OpenMyDocTab;        
  comboBox := GetToolbarObject(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"',folderTree),'COMBOBOX','Фильтрация элементов папок по типу');            
  SelectInComboBox(ComboBox,'Все объекты');
  
  DeleteFilter(FOLDER_PREF);
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
end;

{HLTC74.8: Типизированная фильтрация
   HLTC74.8.1: HLTC74.8.1: Произвести фильтрацию и проверить, что папки, не содержащие объектов, 
   удовлетворяющих условию типизированного фильтра,  показываются пустыми:
     HLTC74.8.1.3: запросы
}
function  HLTC74_8_1_3_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF='HLTC74_8_1_3';
var
  folderTree;  
  comboBox; 
  allDoc;
  document;
  res : boolean;
begin  
  res := false; 
  folderTree := OpenMyDocTab; 
  result := CreateFolderFrom (true,  'Мои документы', 'закладки_' + FOLDER_PREF) AND
            CreateFolderFrom (false, 'Мои документы', 'списки_'   +  FOLDER_PREF) AND  
            CreateFolderFrom (true,  'Мои документы', 'запросы_'  + FOLDER_PREF) AND
            CreateFolderFrom (false, 'Мои документы', 'фильтры_'  + FOLDER_PREF);            
  if result then
  begin  
    result := OpenDocByNumber(10003000);    
    if result then  
    begin      
      document:=OpenInDocument('ТЕКСТ');        
      result := SaveToFoldersExt(MY_DOCS_PATH + 'закладки_'+FOLDER_PREF,FOLDER_PREF,'','Сохранить'); 
      if result then  
      begin
        allDoc := GetListOfAllDocuments;  
        result := IsExists(allDoc);
        if result then
        begin
          result := SaveToFoldersExt(MY_DOCS_PATH + 'списки_'+FOLDER_PREF,FOLDER_PREF,'','Сохранить'); 
          if result then
          begin
            result := GoToPPR;
            if result then
            begin
              result := SaveToFoldersExt(MY_DOCS_PATH + 'запросы_'+FOLDER_PREF,FOLDER_PREF,'','Сохранить'); 
              if result then
              begin 
                result := GoToPPR;
                if result then
                begin
                  result := SaveToFoldersExt(MY_DOCS_PATH + 'фильтры_'+FOLDER_PREF,FOLDER_PREF,'','Сохранить'); 
                  if result then
                  begin                     
                    folderTree := OpenMyDocTab;
                    result := Position_Internal (folderTree,MY_DOCS_PATH + 'фильтры_'+FOLDER_PREF+'\'+FOLDER_PREF);
                    if result then
                    begin
                      Sys.Keys('[Apps]');
                      result := ClickByPopupMenuItem(folderTree,'Добавить фильтр из сохраненных запросов');
                      GetFromShell('КНОПКА "ОК" ДИАЛОГА СОХРАНЕНИЯ ФИЛЬТРА').Click;  
                      if result then
                      begin        
                        folderTree := OpenMyDocTab;        
                        comboBox := GetToolbarObject(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"',folderTree),'COMBOBOX','Фильтрация элементов папок по типу');            
                        result := SelectInComboBox(ComboBox,'Запросы');                                                                                                           
                        if result then
                        begin
                          res := Position_Internal (folderTree,MY_DOCS_PATH + 'запросы_'+FOLDER_PREF+'\'+FOLDER_PREF,'\', true, 'IsPressHome:=true');
                          result := res AND
                              NOT Position_Internal (folderTree,MY_DOCS_PATH + 'закладки_'+FOLDER_PREF+'\'+FOLDER_PREF,'\', true, 'IsPressHome:=true') AND
                              NOT Position_Internal (folderTree,MY_DOCS_PATH + 'списки_'+FOLDER_PREF+'\'+FOLDER_PREF,'\', true, 'IsPressHome:=true');
                              
                          if NOT result then
                          begin
                            if NOT res then
                              Log.Error('Папка, содержащие элементв, удовлетворяющий условию типизированного фильтра -не показываются')
                            else  
                              Log.Error('Папки, не содержащие эл-тов, удовлетворяющих условию типизированного фильтра - показываются');                                      
                          end;                                         
                          if NOT SelectInComboBox(comboBox,'Все объекты')then
                            Log.Warning('Не удалось установить значение типизированного фильтра как "Все объекты"');
                        end                        
                        else
                          Log.Warning('Не удалось установить значение типизированного фильтра как "ЗАПРОСЫ"');
                      end
                      else
                        Log.Warning('Не удалось использовать запрос как фильтр');        
                    end
                    else
                      Log.Warning('Не удалось спозиционироваться на элементе');    
                    if NOT DeleteObjectFromFolder(MY_DOCS_PATH + 'фильтры_'+FOLDER_PREF) then
                      Log.Warning('Объект "Мои документы\фильтры_'+FOLDER_PREF+'" не удалён');
                  end
                  else
                    Log.Warning('Не удалось сохранить запрос');
                end  
                else
                  Log.Warning('Не удалось открыть ППР');
                if NOT DeleteObjectFromFolder(MY_DOCS_PATH + 'запросы_'+FOLDER_PREF) then
                  Log.Warning('Объект "Мои документы\запросы_'+FOLDER_PREF+'" не удалён');
              end
              else
                Log.Warning('Не удалось сохранить запрос');
            end  
            else
              Log.Warning('Не удалось открыть ППР');
            if NOT DeleteObjectFromFolder(MY_DOCS_PATH + 'списки_'+FOLDER_PREF) then
              Log.Warning('Объект "Мои документы\списки_'+FOLDER_PREF+'" не удалён');
          end
          else
            Log.Warning('Не удалось сохранить список');
        end
        else
          Log.Warning('Не удалось построить список всех документов');
        if NOT DeleteObjectFromFolder(MY_DOCS_PATH + 'закладки_'+FOLDER_PREF) then
          Log.Warning('Объект "Мои документы\закладки_'+FOLDER_PREF+'" не удалён');    
      end
      else
        Log.Warning('Не удалось сохранить закладку');
    end
    else
      Log.Warning('Не удалось открыть документ по номеру');
  end
  else
    Log.Warning('Не удалось создать одну из папкок');
      folderTree := OpenMyDocTab;        
  comboBox := GetToolbarObject(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"',folderTree),'COMBOBOX','Фильтрация элементов папок по типу');            
  SelectInComboBox(ComboBox,'Все объекты');
  OpenInList('СПИСОК ФИЛЬТРОВ');  
  DeleteFilter(FOLDER_PREF); 
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
end;

{HLTC74.8: Типизированная фильтрация
   HLTC74.8.1: HLTC74.8.1: Произвести фильтрацию и проверить, что папки, не содержащие объектов, 
   удовлетворяющих условию типизированного фильтра,  показываются пустыми:
     HLTC74.8.1.5: списки и закладки
}
function  HLTC74_8_1_5_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF='HLTC74_8_1_5';
var
  folderTree;  
  comboBox; 
  allDoc;
  document;
  res : boolean;
begin  
  res := false; 
  folderTree := OpenMyDocTab; 
  result := CreateFolderFrom (true,  'Мои документы', 'закладки_' + FOLDER_PREF) AND
            CreateFolderFrom (false, 'Мои документы', 'списки_'   +  FOLDER_PREF) AND  
            CreateFolderFrom (true,  'Мои документы', 'запросы_'  + FOLDER_PREF) AND
            CreateFolderFrom (false, 'Мои документы', 'фильтры_'  + FOLDER_PREF);            
  if result then
  begin  
    result := OpenDocByNumber(10003000);    
    if result then  
    begin      
      document:=OpenInDocument('ТЕКСТ');        
      result := SaveToFoldersExt(MY_DOCS_PATH + 'закладки_'+FOLDER_PREF,FOLDER_PREF,'','Сохранить'); 
      if result then  
      begin
        allDoc := GetListOfAllDocuments;  
        result := IsExists(allDoc);
        if result then
        begin
          result := SaveToFoldersExt(MY_DOCS_PATH + 'списки_'+FOLDER_PREF,FOLDER_PREF,'','Сохранить'); 
          if result then
          begin
            result := GoToPPR;            
            if result then
            begin
              Sys.Keys('закон');
              result := SaveToFoldersExt(MY_DOCS_PATH + 'запросы_'+FOLDER_PREF,FOLDER_PREF,'','Сохранить'); 
              if result then
              begin 
                result := GoToPPR;
                if result then
                begin
                  result := SaveToFoldersExt(MY_DOCS_PATH + 'фильтры_'+FOLDER_PREF,FOLDER_PREF,'','Сохранить'); 
                  if result then
                  begin                     
                    folderTree := OpenMyDocTab;
                    result := Position_Internal (folderTree,MY_DOCS_PATH + 'фильтры_'+FOLDER_PREF+'\'+FOLDER_PREF);
                    if result then
                    begin
                      Sys.Keys('[Apps]');
                      result := ClickByPopupMenuItem(folderTree,'Добавить фильтр из сохраненных запросов');
                      GetFromShell('КНОПКА "ОК" ДИАЛОГА СОХРАНЕНИЯ ФИЛЬТРА').Click;  
                      if result then
                      begin        
                        folderTree := OpenMyDocTab;        
                        comboBox := GetToolbarObject(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"',folderTree),'COMBOBOX','Фильтрация элементов папок по типу');            
                        result := SelectInComboBox(ComboBox,'Списки и закладки');                                                                                                           
                        if result then
                        begin
                        res :=  Position_Internal (folderTree,MY_DOCS_PATH + 'закладки_'+FOLDER_PREF+'\'+FOLDER_PREF,'\', true, 'IsPressHome:=true') AND
                          Position_Internal (folderTree,MY_DOCS_PATH + 'списки_'+FOLDER_PREF+'\'+FOLDER_PREF,'\', true, 'IsPressHome:=true');                          
                          result := res AND                              
                              NOT Position_Internal (folderTree,MY_DOCS_PATH + 'запросы_'+FOLDER_PREF+'\'+FOLDER_PREF,'\', true, 'IsPressHome:=true') AND
                              NOT Position_Internal (folderTree,MY_DOCS_PATH + 'фильтры_'+FOLDER_PREF+'\'+FOLDER_PREF,'\', true, 'IsPressHome:=true');
                          if NOT result then
                          begin
                            if NOT res then
                              Log.Error('Папка, содержащие элементв, удовлетворяющий условию типизированного фильтра -не показываются')
                            else  
                              Log.Error('Папки, не содержащие эл-тов, удовлетворяющих условию типизированного фильтра - показываются');                                      
                          end;                                         
                          if NOT SelectInComboBox(comboBox,'Все объекты')then
                            Log.Warning('Не удалось установить значение типизированного фильтра как "Все объекты"');
                        end                        
                        else
                          Log.Warning('Не удалось установить значение типизированного фильтра как "СПИСКИ И ЗАКЛАДКИ"');
                      end
                      else
                        Log.Warning('Не удалось использовать запрос как фильтр');        
                    end
                    else
                      Log.Warning('Не удалось спозиционироваться на элементе');    
                    if NOT DeleteObjectFromFolder(MY_DOCS_PATH + 'фильтры_'+FOLDER_PREF) then
                      Log.Warning('Объект "Мои документы\фильтры_'+FOLDER_PREF+'" не удалён');
                  end
                  else
                    Log.Warning('Не удалось сохранить запрос');
                end  
                else
                  Log.Warning('Не удалось открыть ППР');
                if NOT DeleteObjectFromFolder(MY_DOCS_PATH + 'запросы_'+FOLDER_PREF) then
                  Log.Warning('Объект "Мои документы\запросы_'+FOLDER_PREF+'" не удалён');
              end
              else
                Log.Warning('Не удалось сохранить запрос');
            end  
            else
              Log.Warning('Не удалось открыть ППР');
            if NOT DeleteObjectFromFolder(MY_DOCS_PATH + 'списки_'+FOLDER_PREF) then
              Log.Warning('Объект "Мои документы\списки_'+FOLDER_PREF+'" не удалён');
          end
          else
            Log.Warning('Не удалось сохранить список');
        end
        else
          Log.Warning('Не удалось построить список всех документов');
        if NOT DeleteObjectFromFolder(MY_DOCS_PATH + 'закладки_'+FOLDER_PREF) then
          Log.Warning('Объект "Мои документы\закладки_'+FOLDER_PREF+'" не удалён');    
      end
      else
        Log.Warning('Не удалось сохранить закладку');
    end
    else
      Log.Warning('Не удалось открыть документ по номеру');
  end
  else
    Log.Warning('Не удалось создать одну из папкок');
  folderTree := OpenMyDocTab;        
  comboBox := GetToolbarObject(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"',folderTree),'COMBOBOX','Фильтрация элементов папок по типу');            
  SelectInComboBox(ComboBox,'Все объекты');
   
  DeleteFilter(FOLDER_PREF); 
  GoToMainMenu;
  current_state := ST_MAIN_MENU;  
end;


{HLTC74.8: Типизированная фильтрация
   HLTC74.8.1: HLTC74.8.1: Произвести фильтрацию и проверить, что папки, не содержащие объектов, 
   удовлетворяющих условию типизированного фильтра,  показываются пустыми:
     HLTC74.8.1.6: Проверить, когда папка вообще несодержит запросов, закладок, списков
}
function  HLTC74_8_1_6_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF='HLTC74_8_1_6';
var
  folderTree;  
  comboBox;
  comboBoxType;
  currentPath; 
  i;  
begin  
try
  DeleteAllInMyDoc;   
  folderTree := OpenMyDocTab; 
  if NOT CreateFolderFrom (true,  'Мои документы', FOLDER_PREF) then
    Raise('Не удалось создать папку в Моих докудокументах');            
  comboBox := GetToolbarObject(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"',folderTree),'COMBOBOX','Фильтрация элементов папок по типу');
  for i := 1 to 5 do
  begin
    case i of
      1: comboBoxType := 'Закладки';    
      2: comboBoxType := 'Списки';
      3: comboBoxType := 'Запросы';      
      4: comboBoxType := 'Списки и закладки';
      5: comboBoxType := 'Все объекты';
    end;
    if NOT SelectInComboBox(ComboBox, comboBoxType) then 
      Raise('В моих документах не удалось установить типизированный фильтр :' + comboBoxType);
    if NOT Position_Internal (folderTree,MY_DOCS_PATH+FOLDER_PREF,'\', true, 'IsPressHome:=true') then
      Raise('Не удалось спозиционироваться на ' + MY_DOCS_PATH+FOLDER_PREF);
    Sys.Keys('[Right][Right]');
    currentPath := common.GetWindowText(folderTree.Handle);
    if NOT StringCompare(currentPath, FOLDER_PREF) then
    begin
      Log.Error('После нажатия [Right][Right] вышли за границу папки ' + FOLDER_PREF + ', значит в ней что то есть после типизированого фильтра: ' + comboBoxType);
      Raise('После нажатия [Right][Right] вышли за границу папки ' + FOLDER_PREF + ', значит в ней что то есть после типизированого фильтра: ' + comboBoxType);
    end;
  end;                                                 
  result := true;
  DeleteAllInMyDoc;
except
  DeleteAllInMyDoc;  
  Log.Message( FOLDER_PREF + ': ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;

{HLTC74.8: Типизированная фильтрация 
     HLTC74.8.2: Проверить, что фильтр по умолчанию – «Все объекты».
}
function  HLTC74_8_2_Execute(var  current_state: OleVariant): OleVariant;
const
  DEFAULT_FILTR = 'Все объекты';
  PREF = 'HLTC74_8_2';
var
  obj;
  str;
  login;
  pass;
  count;
begin
try
  login :=  PREF + '_user';
  pass := PREF + '_user';
  count := 5;
  RestartF1Shell(count, Options.Run.Timeout div 6, login, pass);
  
  obj := OpenMyDocTab;
  if NOT IsExists(obj) then Raise('Не удалось открыть Мои документы');
  obj := GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', obj);
  if NOT IsExists(obj) then Raise('Не удалось получить ТУЛБАР "МОИ ДОКУМЕНТЫ"');
  obj := GetToolbarObject(obj, 'COMBOBOX', 'Фильтрация элементов папок по типу');
  str := common.GetWindowText(obj.Handle);
  if NOT StringCompare(str, DEFAULT_FILTR) then
  begin
    Log.Error('По умолчанию значение комбобокса "Фильтрация элементов папок по типу" с тулбара Моих документов не равно <Все объекты>', str);
    Raise;
  end;
  result := true;
  GoToMainMenu;
except  
  Log.Message('HLTC74_8_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;
         
{HLTC74.8: Типизированная фильтрация
   HLTC74.8.3: Проверить, что при вызове дилога загрузки запроса из папки (например,
    в ППР при закрузке запроса, при добавлении фильтра на вкладке «Фильтры») автоматически 
    выставлен фильтр – «Запрос
      HLTC74.8.3.1: Проверить, что в этом случае нет возможности изменить фильтр»
}
function  HLTC74_8_3_1_Execute(var  current_state: OleVariant): OleVariant;
var
  folderTree;
  comboBox;
begin
  result := GoToPPR;
  if result then
  begin
    folderTree := OpenLoadFromFolderDialog; 
    comboBox := GetToolbarObject(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"',folderTree),'COMBOBOX','Фильтрация элементов папок по типу');
    result := (common.GetWindowText(comboBox.Handle) = 'Запросы') AND NOT comboBox.Enabled;
    if NOT result then 
    begin
      if comboBox.Enabled then 
        Log.Error('Есть возможность изменить фильтр') 
      else
        Log.Error('По умолчанию не выставлен фильтр "Запрос"') ;
    end;    
    if NOT FillObjectInfoDialog(folderTree,'OkButtonName := Отмена')then
      Log.Warning('Не удалось закрыть окно диалога ');
  end  
  else
    Log.Warning('Не Удалось открыть ППР');
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
end;

{HLTC74.8: Типизированная фильтрация
  HLTC74.8.4: При фильтрации объектов по типу, во вкладке "Мои документы", папка
  "Мои документы" никогда не фильтруется (всегда остается видимой)
}
function  HLTC74_8_4_Execute(var  current_state: OleVariant): OleVariant;
const
  DOC_NUM = '10003000';
var          
  obj;
  combobox;
  toolBar;
  doc;
  filtrs;
  i;
begin
try
  filtrs := ['Все объекты', 'Закладки', 'Списки', 'Запросы'];
  if NOT OpenDocByNumber(DOC_NUM) then Log.Warning('Не удалось открыть документ по Alt+N');
  doc := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  obj := OpenMyDocTab;
  toolBar := GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', obj);
  if NOT IsExists(toolBar) then Raise('Не удалось получить ТУЛБАР "МОИ ДОКУМЕНТЫ"');
  comboBox := GetToolbarObject(toolBar, 'COMBOBOX', 'Фильтрация элементов папок по типу');
  obj := GetFromFolderForm('ДЕРЕВО ПАПОК', obj);
  if NOT IsExists(obj) then Raise('Не удалось получить ДЕРЕВО ПАПОК');
  for i := VarArrayLowBound(filtrs, 1) to VarArrayHighBound(filtrs, 1) do
  begin
    if NOT SelectInComboBox(ComboBox, filtrs[i]) then 
      Raise('Не удалось переключить комбобокс на значение: ' + filtrs[i]);
    if NOT Position_Internal(obj, 'Мои документы', '\', true, 'isPressHome:=true') then
    begin
      Log.Error('При включееной фильтрации элементов по типу Не удалось спозиционироваться на "Мои документы"!!!');
      Raise;
    end;//if
  end;//for
  if NOT SelectInComboBox(ComboBox, filtrs[0]) then 
      Raise('Не удалось переключить комбобокс на первое значение: ' + filtrs[i]);
  //Проверяем т.ж. самое в модальном диалоге
  doc.SetFocus;
  obj := OpenSaveToFolderDialog;
  if NOT IsExists(obj) then Raise('Не удалось модальный диалог..');
  toolBar := GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', obj);
  if NOT IsExists(toolBar) then Raise('Не удалось получить ТУЛБАР "МОИ ДОКУМЕНТЫ"');
  comboBox := GetToolbarObject(toolBar, 'COMBOBOX', 'Фильтрация элементов папок по типу');
  obj := GetFromFolderForm('ДЕРЕВО ПАПОК', obj);
  if NOT IsExists(obj) then Raise('Не удалось получить ДЕРЕВО ПАПОК');
  for i := VarArrayLowBound(filtrs, 1) to VarArrayHighBound(filtrs, 1) do
  begin
    if NOT SelectInComboBox(ComboBox, filtrs[i]) then 
      Raise('Не удалось переключить комбобокс на значение: ' + filtrs[i]);
    if NOT Position_Internal(obj, 'Мои документы', '\', true, 'isPressHome:=true') then
    begin
      Log.Error('При включееной фильтрации элементов по типу Не удалось спозиционироваться на "Мои документы"!!!');
      Raise;
    end;//if
  end;//for
  if NOT ClickToolBarButton(GetFromFolderForm('НИЖНИЙ ТУЛБАР', obj), 'Отмена') then
    Log.Warning('Не удалось кликнуть по кнопке Отмена');
  result := true; 
  GoToMainMenu;
except
  Log.Message('HLTC74_8_4_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{HLTC74.8: Типизированная фильтрация
  HLTC74.8.5: При сохранении объектов в «Мои документы» пользователю доступна только папка 
  «Мои документы» и ее вложенные, остальные системные папки (Журнал, Общие, Мои консультации и т.п.)
  скрываются
}
function  HLTC74_8_5_Execute(var  current_state: OleVariant): OleVariant;
const
  DOC_NUM = '10003000';
var          
  obj;
  count;
begin
try
  if NOT DeleteAllInMyDoc then
    Log.Warning('Не удалось удалить все объекты из моих документов');
  if NOT OpenDocByNumber(DOC_NUM) then Log.Warning('Не удалось открыть документ по Alt+N'); 
  obj := OpenSaveToFolderDialog;
  if NOT IsExists(obj) then Raise('Не удалось модальный диалог..'); 
  obj := GetFromFolderForm('ДЕРЕВО ПАПОК', obj);
  if NOT IsExists(obj) then Raise('Не удалось получить ДЕРЕВО ПАПОК');
  if NOT Position_Internal(obj, 'Мои документы', '\', true, 'isPressHome:=true') then
  begin
    Log.Error('Не удалось спозиционироваться на "Мои документы"!!!');
    Raise;
  end;//if
  count := CountElementInTree(obj);
  if NOT (count = 1) then
  begin
    Log.Error('В диалоге сохранения пользователю доступно больше, чем 1 папка!!!');
    Raise;
  end;//if
  if NOT ClickToolBarButton(GetFromFolderForm('НИЖНИЙ ТУЛБАР', obj), 'Отмена') then
    Log.Warning('Не удалось кликнуть по кнопке Отмена');
  result := true; 
  GoToMainMenu;
except
  Log.Message('HLTC74_8_5_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{HLTC74.9: Интерфейс
   HLTC74.9.2: Загрузить запрос, когда:
      HLTC74.9.2.1: открыт документ (должна загружаться карточка запроса):
        HLTC74.9.2.1.1: в режиме просмотра текста         
}
function  HLTC74_9_2_1_1_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC74_9_2_1_1';
var 
  document;
begin
  result := GoToPPR;
  if result then
  begin
    result := SaveToFoldersExt('Мои документы',FOLDER_PREF,'','Сохранить'); 
    if result then
    begin             
      result := OpenDocByNumber(10003000);    
      if result then  
      begin      
        document:=OpenInDocument('ТЕКСТ');        
        document.SetFocus;
        result := OpenObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF, OpenMyDocTab);
        if result then
        begin
          result := IsExists(GetFromPPR('КАРТОЧКА ЗАПРОСА'));
          if NOT result then
            Log.Error('Не удалось загрузить запрос');
        end
        else
          Log.Warning('Не удалось открыть объект');
      end 
      else
        Log.Warning('Не удалось открыть документ по номеру');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF) then
          Log.Warning('Объект "' + MY_DOCS_PATH+FOLDER_PREF+'" не удалён');  
    end
    else
      Log.Warning('Не удалось сохранить запрос');
  end  
  else
    Log.Warning('Не удалось открыть ППР');
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
end;

{HLTC74.9: Интерфейс
   HLTC74.9.2: Загрузить запрос, когда:
      HLTC74.9.2.1: открыт документ (должна загружаться карточка запроса):
        HLTC74.9.2.1.1: в режиме просмотра текста
          HLTC74.9.2.1.1.1: в режиме просмотра справки (фокус в справке)
}
function  HLTC74_9_2_1_1_1_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC74_9_2_1_1_1';
var
  folderTree;
  comboBox;
  document;
begin
  result := GoToPPR;
  if result then
  begin
    result := SaveToFoldersExt('Мои документы',FOLDER_PREF,'','Сохранить'); 
    if result then
    begin             
      result := OpenDocByNumber(1055132);    
      if result then  
      begin      
        document:=OpenInDocument('СПРАВКА');        
        document.SetFocus;
        result := OpenObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF, OpenMyDocTab);
        if result then
        begin
          result := IsExists(GetFromPPR('КАРТОЧКА ЗАПРОСА'));
          if NOT result then
            Log.Error('Не удалось загрузить запрос');
        end
        else
          Log.Warning('Не удалось открыть объект');
      end 
      else
        Log.Warning('Не удалось открыть документ по номеру');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF) then
          Log.Warning('Объект "' + MY_DOCS_PATH+FOLDER_PREF+'" не удалён');  
    end
    else
      Log.Warning('Не удалось сохранить запрос');
  end  
  else
    Log.Warning('Не удалось открыть ППР');
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
end;

{HLTC74.9: Интерфейс
   HLTC74.9.2: Загрузить запрос, когда:
      HLTC74.9.2.1: открыт документ (должна загружаться карточка запроса):
        HLTC74.9.2.1.2: в режиме просмотра атрибутов (фокус в атрибутах)     
}
function  HLTC74_9_2_1_2_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC74_9_2_1_2';
var 
  document;
begin
  result := GoToPPR;
  if result then
  begin
    result := SaveToFoldersExt('Мои документы',FOLDER_PREF,'','Сохранить'); 
    if result then
    begin             
      result := OpenDocByNumber(1055132);    
      if result then  
      begin      
        document:=OpenInDocument('ИНФОРМАЦИЯ О ДОКУМЕНТЕ');        
        document.SetFocus;
        result := OpenObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF, OpenMyDocTab);
        if result then
        begin
          result := IsExists(GetFromPPR('КАРТОЧКА ЗАПРОСА'));
          if NOT result then
            Log.Error('Не удалось загрузить запрос');
        end
        else
          Log.Warning('Не удалось открыть объект');
      end 
      else
        Log.Warning('Не удалось открыть документ по номеру');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF) then
          Log.Warning('Объект "' + MY_DOCS_PATH+FOLDER_PREF+'" не удалён');  
    end
    else
      Log.Warning('Не удалось сохранить запрос');
  end  
  else
    Log.Warning('Не удалось открыть ППР');
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
end;

{HLTC74.9: Интерфейс
   HLTC74.9.2: Загрузить запрос, когда:
      HLTC74.9.2.1: открыт документ (должна загружаться карточка запроса):
        HLTC74.9.2.1.3: в режиме просмотра ССЫЛОК ИЗ ДОКУМЕНТОВ (фокус в СКР)  
}
function  HLTC74_9_2_1_3_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC74_9_2_1_3';
var 
  document;
begin
  result := GoToPPR;
  if result then
  begin
    result := SaveToFoldersExt('Мои документы',FOLDER_PREF,'','Сохранить'); 
    if result then
    begin             
      result := OpenDocByNumber(1055132);    
      if result then  
      begin      
        document:=OpenInDocument('ССЫЛКИ ИЗ ДОКУМЕНТА');        
        document.SetFocus;
        result := OpenObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF, OpenMyDocTab);
        if result then
        begin
          result := IsExists(GetFromPPR('КАРТОЧКА ЗАПРОСА'));
          if NOT result then
            Log.Error('Не удалось загрузить запрос');
        end
        else
          Log.Warning('Не удалось открыть объект');
      end 
      else
        Log.Warning('Не удалось открыть документ по номеру');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF) then
          Log.Warning('Объект "' + MY_DOCS_PATH+FOLDER_PREF+'" не удалён');  
    end
    else
      Log.Warning('Не удалось сохранить запрос');
  end  
  else
    Log.Warning('Не удалось открыть ППР');
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
end;

{HLTC74.9: Интерфейс
   HLTC74.9.2: Загрузить запрос, когда:
      HLTC74.9.2.1: открыт документ (должна загружаться карточка запроса):
        HLTC74.9.2.1.4: в режиме просмотра ССЫЛОК НА ДОКУМЕНТ (фокус в СКР)
}
function  HLTC74_9_2_1_4_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC74_9_2_1_4';
var 
  document;
begin
  result := GoToPPR;
  if result then
  begin
    result := SaveToFoldersExt('Мои документы',FOLDER_PREF,'','Сохранить'); 
    if result then
    begin             
      result := OpenDocByNumber(1055132);    
      if result then  
      begin      
        document:=OpenInDocument('ССЫЛКИ НА ДОКУМЕНТ');        
        document.SetFocus;
        result := OpenObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF, OpenMyDocTab);
        if result then
        begin
          result := IsExists(GetFromPPR('КАРТОЧКА ЗАПРОСА'));
          if NOT result then
            Log.Error('Не удалось загрузить запрос');
        end
        else
          Log.Warning('Не удалось открыть объект');
      end 
      else
        Log.Warning('Не удалось открыть документ по номеру');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF) then
          Log.Warning('Объект "' + MY_DOCS_PATH+FOLDER_PREF+'" не удалён');  
    end
    else
      Log.Warning('Не удалось сохранить запрос');
  end  
  else
    Log.Warning('Не удалось открыть ППР');
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
end;

{HLTC74.9: Интерфейс
   HLTC74.9.2: Загрузить запрос, когда:
      HLTC74.9.2.2: просматривается список
}
function  HLTC74_9_2_2_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC74_9_2_2';  
var
  list;    
begin
  result := GoToPPR;
  if result then
  begin
    result := SaveToFoldersExt('Мои документы',FOLDER_PREF,'','Сохранить'); 
    if result then
    begin             
      result := OpenObjectFromFolder(LIST_MAIN,OpenMenuTab);    
      if result then  
      begin      
        list := OpenInList('СПИСОК ДОКУМЕНТОВ');
        result := IsExists(list);
        if result then
        begin
          list.SetFocus;
          result := OpenObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF, OpenMyDocTab);
          if result then
          begin
            result := IsExists(GetFromPPR('КАРТОЧКА ЗАПРОСА'));
            if NOT result then
              Log.Error('Не удалось загрузить запрос');
          end
          else
            Log.Warning('Не удалось открыть объект');
        end
        else
          Log.Warning('Не удалось получить объект списка');
      end 
      else
        Log.Warning('Не удалось открыть первую ветку рубрикатора');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF) then
          Log.Warning('Объект "' + MY_DOCS_PATH+FOLDER_PREF+'" не удалён');  
    end
    else
      Log.Warning('Не удалось сохранить запрос');
  end  
  else
    Log.Warning('Не удалось открыть ППР');
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
end;

{HLTC74.9: Интерфейс
   HLTC74.9.2: Загрузить запрос, когда:
      HLTC74.9.2.3: просматривается список, в котором один из документов открыт на синхронном просмотре
}
function  HLTC74_9_2_3_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC74_9_2_3'; 
var
  list;    
begin
  result := GoToPPR;
  if result then
  begin
    result := SaveToFoldersExt('Мои документы',FOLDER_PREF,'','Сохранить'); 
    if result then
    begin             
      result := OpenObjectFromFolder(LIST_MAIN,OpenMenuTab);    
      if result then  
      begin      
        list := OpenInList( 'СИНХРОННЫЙ ПРОСМОТР');
        result := IsExists(list);
        if result then
        begin
          list.SetFocus;
          result := OpenObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF, OpenMyDocTab);
          if result then
          begin
            result := IsExists(GetFromPPR('КАРТОЧКА ЗАПРОСА'));
            if NOT result then
              Log.Error('Не удалось загрузить запрос');
          end
          else
            Log.Warning('Не удалось открыть объект');
        end
        else
          Log.Warning('Не удалось получить объект списка');
      end 
      else
        Log.Warning('Не удалось открыть первую ветку рубрикатора');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF) then
          Log.Warning('Объект "' + MY_DOCS_PATH+FOLDER_PREF+'" не удалён');  
    end
    else
      Log.Warning('Не удалось сохранить запрос');
  end  
  else
    Log.Warning('Не удалось открыть ППР');
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
end;

{HLTC74.9: Интерфейс
   HLTC74.9.2: Загрузить запрос, когда:
      HLTC74.9.2.4: просматривается список, с открытым фреймом информация о списке (фокус в информации)
}
function  HLTC74_9_2_4_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC74_9_2_4';  
var
  list;    
begin
  result := GoToPPR;
  if result then
  begin
    result := SaveToFoldersExt('Мои документы',FOLDER_PREF,'','Сохранить'); 
    if result then
    begin             
      result := OpenObjectFromFolder(LIST_MAIN,OpenMenuTab);    
      if result then  
      begin      
        list := OpenInList( 'СПРАВКА К СПИСКУ');
        result := IsExists(list);
        if result then
        begin
          list.SetFocus;
          result := OpenObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF, OpenMyDocTab);
          if result then
          begin
            result := IsExists(GetFromPPR('КАРТОЧКА ЗАПРОСА'));
            if NOT result then
              Log.Error('Не удалось загрузить запрос');
          end
          else
            Log.Warning('Не удалось открыть объект');
        end
        else
          Log.Warning('Не удалось получить объект списка');
      end 
      else
        Log.Warning('Не удалось открыть первую ветку рубрикатора!');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF) then
          Log.Warning('Объект "' + MY_DOCS_PATH+FOLDER_PREF+'" не удалён');  
    end
    else
      Log.Warning('Не удалось сохранить запрос');
  end  
  else
    Log.Warning('Не удалось открыть ППР');
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
end;

{HLTC74.9: Интерфейс
   HLTC74.9.2: Загрузить запрос, когда:
     HLTC74.9.2.5: просматривается основное меню
}
function  HLTC74_9_2_5_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC74_9_2_5';    
begin
  result := GoToPPR;
  if result then
  begin
    result := SaveToFoldersExt('Мои документы',FOLDER_PREF,'','Сохранить'); 
    if result then
    begin             
      result := GoToMainMenu;    
      if result then  
      begin      
        result := OpenObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF, OpenMyDocTab);
        if result then
        begin
          result := IsExists(GetFromPPR('КАРТОЧКА ЗАПРОСА'));
          if NOT result then
            Log.Error('Не удалось загрузить запрос');
        end
        else
          Log.Warning('Не удалось открыть объект');        
      end 
      else
        Log.Warning('Не удалось открыть основное меню');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF) then
          Log.Warning('Объект "' + MY_DOCS_PATH+FOLDER_PREF+'" не удалён');  
    end
    else
      Log.Warning('Не удалось сохранить запрос');
  end  
  else
    Log.Warning('Не удалось открыть ППР');
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
end;

{HLTC74.9: Интерфейс
   HLTC74.9.2: Загрузить запрос, когда:
     HLTC74.9.2.6: просматривается рубрикатор
}
function  HLTC74_9_2_6_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC74_9_2_6';
begin
  result := GoToPPR;
  if result then
  begin
    result := SaveToFoldersExt('Мои документы',FOLDER_PREF,'','Сохранить'); 
    if result then
    begin             
      result := OpenObjectFromFolder(LIST_RUBR_MAIN, OpenMenuTab);   
      if result then  
      begin      
        result := OpenObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF, OpenMyDocTab);
        if result then
        begin
          result := IsExists(GetFromPPR('КАРТОЧКА ЗАПРОСА'));
          if NOT result then
            Log.Error('Не удалось загрузить запрос');
        end
        else
          Log.Warning('Не удалось открыть объект');        
      end 
      else
        Log.Warning('Не удалось открыть рубрикатор');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF) then
          Log.Warning('Объект "' + MY_DOCS_PATH+FOLDER_PREF+'" не удалён');  
    end
    else
      Log.Warning('Не удалось сохранить запрос');
  end  
  else
    Log.Warning('Не удалось открыть ППР');
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
end;

{HLTC74.9: Интерфейс
   HLTC74.9.2: Загрузить запрос, когда:
     HLTC74.9.2.7: просматривается ППС
}
function  HLTC74_9_2_7_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC74_9_2_7';      
begin
  result := GoToPPR;
  if result then
  begin
    result := SaveToFoldersExt('Мои документы',FOLDER_PREF,'','Сохранить'); 
    if result then
    begin             
      result := GoToPPS;   
      if result then  
      begin      
        result := OpenObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF, OpenMyDocTab);
        if result then
        begin
          result := IsExists(GetFromPPR('КАРТОЧКА ЗАПРОСА'));
          if NOT result then
            Log.Error('Не удалось загрузить запрос');
        end
        else
          Log.Warning('Не удалось открыть объект');        
      end 
      else
        Log.Warning('Не удалось открыть ППС');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF) then
          Log.Warning('Объект "' + MY_DOCS_PATH+FOLDER_PREF+'" не удалён');  
    end
    else
      Log.Warning('Не удалось сохранить запрос');
  end  
  else
    Log.Warning('Не удалось открыть ППР');
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
end;

{HLTC74.9: Интерфейс
   HLTC74.9.2: Загрузить запрос, когда:
     HLTC74.9.2.8: просматривается ППР
}
function  HLTC74_9_2_8_Execute(var  current_state: OleVariant): OleVariant;
const
  FOLDER_PREF = 'HLTC74_9_2_8';      
begin
  result := GoToPPR;
  if result then
  begin
    result := SaveToFoldersExt('Мои документы',FOLDER_PREF,'','Сохранить'); 
    if result then
    begin             
      result := GoToPPR;   
      if result then  
      begin      
        result := OpenObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF, OpenMyDocTab);
        if result then
        begin
          result := IsExists(GetFromPPR('КАРТОЧКА ЗАПРОСА'));
          if NOT result then
            Log.Error('Не удалось загрузить запрос');
        end
        else
          Log.Warning('Не удалось открыть объект');        
      end 
      else
        Log.Warning('Не удалось открыть ППР');
      if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF) then
          Log.Warning('Объект "' + MY_DOCS_PATH+FOLDER_PREF+'" не удалён');  
    end
    else
      Log.Warning('Не удалось сохранить запрос');
  end  
  else
    Log.Warning('Не удалось открыть ППР');
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
end;

{HLTC74.9: Интерфейс
   HLTC74.9.3: Интерфейс окошка создания папки
     HLTC74.9.3.1: Проверить, что при создании папки окошко имеет правильное название
}
function  HLTC74_9_3_1_Execute(var  current_state: OleVariant): OleVariant;    
var
  folderTree;
  obj;  
begin
  folderTree := OpenMyDocTab;
  result := ClickToolbarButton(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', folderTree),'Создать папку');
  if result then
  begin
    obj := GetFromFolderForm('ЗАГОЛОВОК', folderTree);
    if NOT IsExists(obj) then Log.Error('Не удалось получить заголовок');     
    result := obj.Caption = 'Новая папка';
    if NOT result then
      Log.Error('Название окна "создания папки" не правильно');
    if NOT ClickToolbarButton(GetFromFolderForm('НИЖНИЙ ТУЛБАР', folderTree),'Отмена')then
      Log.Warning('Не удалось кликнуть по кнопке на тулбаре');
  end
  else
    Log.Warning('Не удалось кликнуть по кнопке на тулбаре');     
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
end;

{HLTC74.9: Интерфейс
   HLTC74.9.3: Интерфейс окошка создания папки
     HLTC74.9.3.2: Проверить, что можно изменять его размеры.
}
function  HLTC74_9_3_2_Execute(var  current_state: OleVariant): OleVariant;    
var
  folderTree;  
  folderNew;
  oldY : integer; 
begin
try
  folderTree := OpenMyDocTab;
  if NOT ClickToolbarButton(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', folderTree),'Создать папку') then
    Raise('Не удалось кликнуть по кнопке "Создать папку" на тулбаре');
  folderNew := GetFromFolderForm('ЗАГОЛОВОК', folderTree);    
// The following line was changed by TestComplete:
//   oldY := folderNew.STop;
  oldY := folderNew.ScreenTop;
// The following line was changed by TestComplete:
//   if NOT DragExt(nil, folderNew.SLeft + 10, folderNew.STop - 2, 0, -40, '', 10) then 
  if NOT DragExt(nil, folderNew.ScreenLeft + 10, folderNew.ScreenTop - 2, 0, -40, '', 10) then 
    Raise('Не удалось перетянуть при помощи DragExt');  
// The following line was changed by TestComplete:
//   result := (folderNew.STop = (oldY - 40) );
  result := (folderNew.ScreenTop > (oldY - 40 -2) ) AND (folderNew.ScreenTop < (oldY - 40 + 2));
  if NOT result then
    Log.Error('Размер окна не изменился');
// The following line was changed by TestComplete:
//   if NOT DragExt(nil, folderNew.SLeft + 10, folderNew.STop - 2, 0, 40, '', 10) then 
  if NOT DragExt(nil, folderNew.ScreenLeft + 10, folderNew.ScreenTop - 2, 0, 40, '', 10) then 
    Raise('Не удалось перетянуть при помощи DragExt');
  if NOT ClickToolbarButton(GetFromFolderForm('НИЖНИЙ ТУЛБАР', folderTree),'Отмена')then
    Log.Warning('Не удалось кликнуть по кнопке на тулбаре');
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
except
  Log.Message('HLTC74_9_3_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler; 
end;  
end;

{HLTC74.9: Интерфейс
 HLTC74.9.4: Работа мышью
  HLTC74.9.4.1: Загрузка элементов, хранящихся в папках, осуществляется после того, как 
  элемент выделен (первый клик) и еще раз нажат на нем клик.  
}
function  HLTC74_9_4_1_Execute(var  current_state: OleVariant): OleVariant;  
const  
  PREF = '(HLTC_74_9_4_1)';
var
  obj;   
  x, y;
begin
try
  if NOT OpenObjectFromFolder(LIST_MAIN, OpenMenuTab) then Raise('Не удалось открыть список по первой ветки');
  obj := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(obj) then Raise('Не удалось открыть список документов');
  if NOT SaveToFoldersExt('Мои документы', 'Список' + PREF, '', 'Сохранить') then 
    Raise('Не удалось сохранить список');
  if NOT GoToMainMenu then Raise('Не удалось перейти в ОМ');
  obj := OpenMyDocTab;
  if NOT Position_Internal(obj, MY_DOCS_PATH + 'Список' + PREF , '\', true, 'isPressHome:=true') then
    Raise('Не удалось спозиционироваться в Моих документах на элемент :' + elementEnd);  
  if NOT  GetTextSelectionCoords(obj, x, y) then Raise('Не удалось найти выделенный элемент в Моих документах');
  obj.Click(x + 10, y + 2);
  obj := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT (IsExists(obj) AND obj.Visible) then
  begin
    Log.Error('Не удалось загрузить Список из моих документов после клика по нему!');
    Raise;
  end;
  if NOT DeleteAllInMyDoc then
    Log.Warning('Не удалось удалить все объекты из моих документов');
  result := true;
  GoToMainMenu;
  current_state := ST_MAIN_MENU;
except
  Log.Message('HLTC74_9_4_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler; 
end;
end;

{HLTC74.9: Интерфейс
 HLTC74.9.4: Работа мышью
  HLTC74.9.4.2: Проверить механизм Drag’n’Drop (перетащить элемент из одной папки в другую):
   HLTC74.9.4.2.1: Список – элемент должен переместиться из одной папки в другую   
}
function  HLTC74_9_4_2_1_Execute(var  current_state: OleVariant): OleVariant;  
const  
  PREF = '(HLTC_74_9_4_2_1)';
var
  obj;   
begin
try
  if NOT (CreateFolderFrom (true, 'Мои документы', 'Папка_1' + PREF) AND
          CreateFolderFrom (true, 'Мои документы', 'Папка_2' + PREF) ) then
    Raise('Не удалось создать папку');
  if NOT OpenObjectFromFolder(LIST_MAIN, OpenMenuTab) then Raise('Не удалось открыть список по первой ветки');
  obj := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(obj) then Raise('Не удалось открыть список документов');
  if NOT SaveToFoldersExt(MY_DOCS_PATH + 'Папка_1' + PREF, 'Список' + PREF, '', 'Сохранить') then 
    Raise('Не удалось сохранить список');
  if NOT DragElementInFolder(MY_DOCS_PATH + 'Папка_1' + PREF + '\Список' + PREF, 
                             MY_DOCS_PATH + 'Папка_2' + PREF) then
  begin
    Log.Error('Не удалось перетащить элемент из папки в папку');
    Raise;
  end;
  if NOT DeleteAllInMyDoc then
    Log.Warning('Не удалось удалить все объекты из моих документов');
  result := true;
  GoToMainMenu;
  current_state := ST_MAIN_MENU;
except
  Log.Message('HLTC74_9_4_2_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler; 
end;
end;

{HLTC74.9: Интерфейс
 HLTC74.9.4: Работа мышью
  HLTC74.9.4.2: Проверить механизм Drag’n’Drop (перетащить элемент из одной папки в другую):
   HLTC74.9.4.2.2: Закладку– элемент должен переместиться из одной папки в другую
}
function  HLTC74_9_4_2_2_Execute(var  current_state: OleVariant): OleVariant;  
const
  DOC_NAME = 2001;
  PREF = '(HLTC74_9_4_2_2)';
var
  obj;
begin
try
  if NOT (CreateFolderFrom (true, 'Мои документы', 'Папка_1' + PREF) AND
          CreateFolderFrom (true, 'Мои документы', 'Папка_2' + PREF) ) then
    Raise('Не удалось создать папку');
  if NOT OpenDocByNumber(DOC_NAME) then Raise('Не удалось открыть документ по Alt+N');
  obj := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
  if NOT IsExists(obj) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');  
  if NOT SaveToFoldersExt(MY_DOCS_PATH + 'Папка_1' + PREF, 'Закладка' + PREF, '', 'Сохранить') then 
    Raise('Не удалось сохранить закладку');
  if NOT DragElementInFolder(MY_DOCS_PATH + 'Папка_1' + PREF + '\Закладка' +PREF, 
                             MY_DOCS_PATH + 'Папка_2' + PREF) then
  begin
    Log.Error('Не удалось перетащить элемент из папки в папку');
    Raise;
  end;
  if NOT DeleteAllInMyDoc then
    Log.Warning('Не удалось удалить все объекты из моих документов');
  result := true;
  GoToMainMenu;
  current_state := ST_MAIN_MENU;
except
  Log.Message('HLTC74_9_4_2_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler; 
end;  
end;

{HLTC74.9: Интерфейс
 HLTC74.9.4: Работа мышью
  HLTC74.9.4.2: Проверить механизм Drag’n’Drop (перетащить элемент из одной папки в другую):
   HLTC74.9.4.2.3: Запрос– элемент должен переместиться из одной папки в другую
}
function  HLTC74_9_4_2_3_Execute(var  current_state: OleVariant): OleVariant;  
const
  PREF = '(HLTC74_9_4_2_3)';
var
  obj;
begin
try
  if NOT (CreateFolderFrom (true, 'Мои документы', 'Папка_1' + PREF) AND
          CreateFolderFrom (true, 'Мои документы', 'Папка_2' + PREF) ) then
    Raise('Не удалось создать папку');
  if NOT GoToPPR then Raise('Не удалось перейти в ППР');
  Sys.Keys('Конституция');
  if NOT SaveToFoldersExt(MY_DOCS_PATH + 'Папка_1' + PREF, 'Запрос' + PREF, '', 'Сохранить') then 
    Raise('Не удалось сохранить запрос');
  if NOT DragElementInFolder(MY_DOCS_PATH + 'Папка_1' + PREF + '\Запрос' +PREF, 
                             MY_DOCS_PATH + 'Папка_2' + PREF) then
  begin
    Log.Error('Не удалось перетащить элемент из папки в папку');
    Raise;
  end;
  if NOT DeleteAllInMyDoc then
    Log.Warning('Не удалось удалить все объекты из моих документов');
  result := true;
  GoToMainMenu;
  current_state := ST_MAIN_MENU;
except
  Log.Message('HLTC74_9_4_2_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler; 
end;  
end;

{HLTC74.9: Интерфейс
 HLTC74.9.4: Работа мышью
  HLTC74.9.4.2: Проверить механизм Drag’n’Drop (перетащить элемент из одной папки в другую):
   HLTC74.9.4.2.4: Фильтр– элемент должен переместиться из одной папки в другую
}
function  HLTC74_9_4_2_4_Execute(var  current_state: OleVariant): OleVariant;  
const
  PREF = '(HLTC74_9_4_2_4)';
var
  obj;
begin
try
  if NOT (CreateFolderFrom (true, 'Мои документы', 'Папка_1' + PREF) AND
          CreateFolderFrom (true, 'Мои документы', 'Папка_2' + PREF) ) then
    Raise('Не удалось создать папку');
  if NOT GoToPPR then Raise('Не удалось перейти в ППР');
  Sys.Keys('Конституция'); 
  if NOT SaveToFoldersExt(MY_DOCS_PATH + 'Папка_1' + PREF, 'Фильтр' + PREF, '', 'Сохранить') then 
    Raise('Не удалось сохранить фильтр');
  obj := OpenMyDocTab;
  if NOT Position_Internal(obj, MY_DOCS_PATH + 'Папка_1' + PREF + '\Фильтр' + PREF, '\', true, 'isPressHome:=true') then
    Raise('Не удалось спозиционироваться на элементе в Моих документах');  
  Sys.Keys('[Apps]');  
  if NOT ClickByPopUpMenuItem(obj, 'Использовать как фильтр') then Raise('Не удалось вызвать контекстную операцию "Использовать как фильтр"');
  if NOT DragElementInFolder(MY_DOCS_PATH + 'Папка_1' + PREF + '\Фильтр' + PREF, 
                             MY_DOCS_PATH + 'Папка_2' + PREF) then
  begin
    Log.Error('Не удалось перетащить элемент из папки в папку');
    Raise;
  end;
  if NOT DeleteAllInMyDoc then
    Log.Warning('Не удалось удалить все объекты из моих документов');
  result := true;
  GoToMainMenu;
  current_state := ST_MAIN_MENU;
except
  Log.Message('HLTC74_9_4_2_4_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler; 
end;  
end;

{
HLTC74.9.4: Работа мышью
 HLTC74.9.4.2: Проверить механизм Drag’n’Drop (перетащить элемент из одной папки в другую):
  HLTC74.9.4.2.5: Проверить «перетаскивание» элементов из/в общих(ие) папок(ки):
   HLTC74.9.4.2.5.1: Для папок, на которые пользователь имеет права Чтение (не должна быть возможность 
    перетащить)
   
   HLTC74.9.4.2.5.3: Корневую общую папку – нельзя перетаскивать. 
}
function  HLTC74_9_4_2_5_Execute(var  current_state: OleVariant): OleVariant;  
const
  PREF = '(HLTC74_9_4_2_5)';
  DOC_NUM = 10003000;  
var
  obj;
  login, pass, count;
  folderRead;
  folderReadAndWrite;
  folderRoot;
begin
try
  folderRoot := 'Общие\User_1' + PREF;
  folderRead := folderRoot + '\folderRead';
  folderReadAndWrite := folderRoot + '\folderReadAndWrite';
  login := 'User_1' + PREF;
  pass  := PREF;
  count := 5;
  RestartF1Shell(count, Options.Run.Timeout div 6, login, pass);
  if NOT CreateFolderFrom (true, 'Мои документы', 'folderRead')  then         
    Raise('Не удалось создать папку');
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  if NOT SaveToFoldersExt(MY_DOCS_PATH + 'folderRead', 'Закладка' + PREF, '', 'Сохранить') then 
    Raise('Не удалось сохранить закладку');    
  if NOT RightAccess(MY_DOCS_PATH + 'folderRead',        'SET', 'Все', RIGHT_READ) then         
    Raise ('Не удалось установить права доступа для одной из папок');
    
  login := 'User_2' + PREF;
  count := 5;
  RestartF1Shell(count, Options.Run.Timeout div 6, login, pass);
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  if NOT SaveToFoldersExt('Мои документы', 'Тест' + PREF, '', 'Сохранить') then 
    Raise('Не удалось сохранить закладку');
  if DragElementInFolder(folderRead + '\Закладка' + PREF, 'Мои документы') then
  begin
    Log.Error('Удалось перетащить ' + folderRead + '\Закладка' + PREF + 'в Мои документы');
    Raise;
  end;
    
  if DragElementInFolder(MY_DOCS_PATH + 'Тест' + PREF, folderRead) then
  begin
    Log.Error('Удалось перетащить Мои документы\Тест' + PREF + ' в ' + folderRead);
    Raise;
  end;
  
  if DragElementInFolder(folderRoot, 'Мои документы' ) then
  begin
    Log.Error('Удалось перетащить ' + folderRoot + ' в Мои документы');
    Raise;
  end;  
  if NOT DeleteAllInMyDoc then
    Log.Warning('Не удалось удалить все объекты из моих документов');
  login := 'User_1' + PREF;
  count := 5;
  RestartF1Shell(count, Options.Run.Timeout div 6, login, pass);        
  if NOT DeleteAllInMyDoc then
    Log.Warning('Не удалось удалить все объекты из моих документов');
  result := true;
  GoToMainMenu;
  current_state := ST_MAIN_MENU;
except
  Log.Message('HLTC74_9_4_2_5_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler; 
end;  
end;

{HLTC74.9: Интерфейс
  HLTC74.9.5: Проверить «стандартные» для древовидных структур операции:
    HLTC74.9.5.1: Свернуть Всё
    HLTC74.9.5.2: Развернуть Всё 
}
function  HLTC74_9_5_1_Execute(var  current_state: OleVariant): OleVariant;
const
  COUNT_ELLEMENTS_EXPEND = 78;
  COUNT_ELLEMENTS_COLLAPSE = 8;
var
 tree;
 count;
begin
try
  tree := GoToPPIO('', true);
  if NOT IsExists(tree) then Raise('Не удалось открыть ППИО');
  tree.SetFocus;
  Sys.Keys('[Apps]');
  if NOT ClickByPopUpMenuItem(tree, 'Свернуть все') then 
  begin
    Log.Error('Не удалось вызвать из контекстного меню операцию "Свернуть все"');  
    Raise;
  end;
  count := CountElementInTree(tree);
  if NOT (count = COUNT_ELLEMENTS_COLLAPSE) then 
  begin
    Log.Error('Количество элементов в Свёрнутом дереве не равно эталонному', IntToStr(count));
    Raise;
  end;
  //Смотрим, что всё развернулось
  tree.SetFocus;
  Sys.Keys('[Apps]');
  if NOT ClickByPopUpMenuItem(tree, 'Развернуть все') then
  begin
    Log.Error('Не удалось вызвать из контекстного меню операцию "Развернуть все"');
    Raise;
  end;
  count := CountElementInTree(tree);
  if NOT (count = COUNT_ELLEMENTS_EXPEND) then 
  begin
    Log.Error('Количество элементов в Развёрнутом дереве не равно эталонному', IntToStr(count));
    Raise;
  end;
  // Ещё раз смотрим, что всё свернулось
  tree.SetFocus;
  Sys.Keys('[Apps]');
  if NOT ClickByPopUpMenuItem(tree, 'Свернуть все') then 
  begin
    Log.Error('Не удалось вызвать из контекстного меню операцию "Свернуть все"');  
    Raise;
  end;
  count := CountElementInTree(tree);
  if NOT (count = COUNT_ELLEMENTS_COLLAPSE) then 
  begin
    Log.Error('Количество элементов в Свёрнутом дереве не равно эталонному', IntToStr(count));
    Raise;
  end;
  result := true;
  GoToMainMenu;
  current_state := ST_MAIN_MENU;
except
  Log.Message('HLTC74_9_5_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler; 
end;  
end;

{HLTC74.9: Интерфейс
  HLTC74.9.5: Проверить «стандартные» для древовидных структур операции:
    HLTC74.9.5.3: Свернуть ветку – проверить, как команду контекстного меню, так и с помощью клавиатуры
    HLTC74.9.5.4: Развернуть ветку – проверить, как команду контекстного меню, так и с помощью клавиатуры
}
function  HLTC74_9_5_3_Execute(var  current_state: OleVariant): OleVariant;
var
 obj;
 count;
 str;
begin
try
  if NOT DeleteAllInMyDoc then                    
    Log.Warning('Не удалось удалить все объекты из Моих документов');
  if NOT (CreateFolderFrom (true, 'Мои документы', 'Папка_1') AND
          CreateFolderFrom (true, MY_DOCS_PATH + 'Папка_1', 'Папка_2') ) then
    Raise('Не удалось создать папку');         
  obj := OpenMyDocTab;  
  //Проверяем при помощи контекстных операций
  if NOT Position_Internal(obj, MY_DOCS_PATH + 'Папка_1', '\', false, 'IsPressHome:=true') then 
    Raise('Не удалось спозиционироваться "Мои документы\Папка_1"');
  Sys.Keys('[Apps]');
  if NOT ClickByPopUpMenuItem(obj, 'Свернуть') then Raise('Не удалось вызвать из контекстного меню "Свернуть"');
  PressKeyWithCheck(['[Down]']);
  str := common.GetWindowText(obj.Handle);
  if NOT StringCompare(str, 'Журнал работы') then
  begin
    Log.Error('Элемент свернулся не корректно');
    Raise;
  end;
  if NOT Position_Internal(obj, MY_DOCS_PATH + 'Папка_1', '\', false, 'IsPressHome:=true') then 
    Raise('Не удалось спозиционироваться "Мои документы\Папка_1"');  
  Sys.Keys('[Apps]');
  if NOT ClickByPopUpMenuItem(obj, 'Развернуть') then Raise('Не удалось вызвать из контекстного меню "Развернуть"');
  PressKeyWithCheck(['[Down]']);
  str := common.GetWindowText(obj.Handle);
  if NOT StringCompare(str, 'Папка_2') then
  begin
    Log.Error('Элемент развернулся не корректно');
    Raise;
  end;
  //Проверяем при помощи клавиатуры
  if NOT Position_Internal(obj, MY_DOCS_PATH + 'Папка_1', '\', false, 'IsPressHome:=true')
    then Raise('Не удалось спозиционироваться "Мои документы\Папка_1"');  
  Sys.Keys('[Left]');
  PressKeyWithCheck(['[Down]']);
  str := common.GetWindowText(obj.Handle);
  if NOT StringCompare(str, 'Журнал работы') then
  begin
    Log.Error('Элемент свернулся не корректно');
    Raise;
  end;
  if NOT Position_Internal(obj, MY_DOCS_PATH + 'Папка_1', '\', false, 'IsPressHome:=true') 
    then Raise('Не удалось спозиционироваться "Мои документы\Папка_1"');  
  Sys.Keys('[Right]');
  PressKeyWithCheck(['[Down]']);
  str := common.GetWindowText(obj.Handle);
  if NOT StringCompare(str, 'Папка_2') then
  begin
    Log.Error('Элемент развернулся не корректно');
    Raise;
  end;
  if NOT DeleteAllInMyDoc then                    
    Log.Warning('Не удалось удалить все объекты из Моих документов');   
  result := true;
  GoToMainMenu;
  current_state := ST_MAIN_MENU;
except
  Log.Message('HLTC74_9_5_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler; 
end;  
end;

{HLTC74.10: Общий доступ
   HLTC74.10.1: Проверить возможность простановки общего доступа для папки, не 
     являющейся вложенной
}
function  HLTC74_10_1_Execute(var  current_state: OleVariant): OleVariant;    
const
  FOLDER_PREF = 'HLTC74_10_1';
var
  folderTree;   
begin  
  folderTree := OpenMyDocTab;
  result := CreateFolderFrom (true, 'Мои документы', FOLDER_PREF);
  if result then
  begin
    result := Position_Internal(folderTree,MY_DOCS_PATH+FOLDER_PREF);
    if result then
    begin
      Sys.Keys('[Apps]');
      result := NOT IsMenuItemChecked(folderTree.QCPopupMenu,'Открыть общий доступ');
      ClosePopupMenu(folderTree);
      if result then
      begin
        Sys.Keys('[Apps]'); 
        result := ClickByPopupMenuItem(folderTree,'Открыть общий доступ');  
        if result then
        begin
          Sys.Keys('[Apps]'); 
          result := IsMenuItemChecked(folderTree.QCPopupMenu,'Открыть общий доступ');
          ClosePopupMenu(folderTree);
          if NOT result then          
            Log.Error('Общий доступ для папки не установлен');
          Sys.Keys('[Apps]');   
          if NOT ClickByPopupMenuItem(folderTree,'Открыть общий доступ') then
            Log.Warning('Не удалось кликнуть в контекстном меню по пункту "Общий доступ"');
          Sys.Keys('[Apps]');   
          if IsMenuItemChecked(folderTree.QCPopupMenu,'Открыть общий доступ') then 
            Log.Warning('Общий доступ для папки остался установленным, хотя должен был сняться');
          ClosePopupMenu(folderTree);  
        end
        else
          Log.Warning('Не удалось кликнуть в контекстном меню по пункту "Общий доступ"');        
      end
      else
        Log.Warning('Почему то для элемента уже установлен общий доступ');
    end 
    else
      Log.Warning('Не удалось спозиционироваться на элементе');
    if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF) then
      Log.Warning('Объект "' + MY_DOCS_PATH+FOLDER_PREF+'" не удалён');   
  end
  else
    Log.Warning('Не удалось создать папку');
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
end;

{HLTC74.10: Общий доступ
   HLTC74.10.2: Проверить возможность простановки общего доступа для папки, 
    являющейся вложенной в другую , не открытую на общий доступ,папку
}
function  HLTC74_10_2_Execute(var  current_state: OleVariant): OleVariant;    
const
  FOLDER_PREF = 'HLTC74_10_2';
var
  folderTree;   
begin  
  folderTree := OpenMyDocTab;
  result := CreateFolderFrom (true, 'Мои документы', FOLDER_PREF) AND
            CreateFolderFrom (true, MY_DOCS_PATH+FOLDER_PREF, FOLDER_PREF);
  if result then
  begin
    result := Position_Internal(folderTree,MY_DOCS_PATH+FOLDER_PREF);
    if result then
    begin
      Sys.Keys('[Apps]');
      result := NOT IsMenuItemChecked(folderTree.QCPopupMenu,'Открыть общий доступ');
      ClosePopupMenu(folderTree);
      if result then
      begin
        folderTree := OpenMyDocTab;
        result := Position_Internal(folderTree,MY_DOCS_PATH+FOLDER_PREF+'\'+FOLDER_PREF);
        if result then
        begin
          Sys.Keys('[Apps]');
          result := NOT IsMenuItemChecked(folderTree.QCPopupMenu,'Открыть общий доступ');
          ClosePopupMenu(folderTree);
          if result then
          begin
            Sys.Keys('[Apps]'); 
            result := ClickByPopupMenuItem(folderTree,'Открыть общий доступ');  
            if result then
            begin
              Sys.Keys('[Apps]'); 
              result := IsMenuItemChecked(folderTree.QCPopupMenu,'Открыть общий доступ');
              ClosePopupMenu(folderTree);
              if NOT result then          
                Log.Error('Общий доступ для папки не установлен');
              Sys.Keys('[Apps]');   
              if NOT ClickByPopupMenuItem(folderTree,'Открыть общий доступ') then
                Log.Warning('Не удалось кликнуть в контекстном меню по пункту "Общий доступ"');
              Sys.Keys('[Apps]');   
              if IsMenuItemChecked(folderTree.QCPopupMenu,'Открыть общий доступ') then 
                Log.Warning('Общий доступ для папки остался установленным, хотя должен был сняться');
              ClosePopupMenu(folderTree);  
            end
            else
              Log.Warning('Не удалось кликнуть в контекстном меню по пункту "Общий доступ"');        
          end
          else
            Log.Warning('Почему то для элемента уже установлен общий доступ');
        end 
        else
          Log.Warning('Не удалось спозиционироваться на элементе');
      end
      else
        Log.Warning('Почему то элемент является открытым на общий доступ');
    end
    else
      Log.Warning('Не удалось спозиционироваться на элементе');
    if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF) then
      Log.Warning('Объект "' + MY_DOCS_PATH+FOLDER_PREF+'" не удалён');   
  end
  else
    Log.Warning('Не удалось создать папку');
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
end;

{HLTC74.10: Общий доступ
   HLTC74.10.3: Проверить возможность простановки общего доступа для папки, в 
   которой имеются вложеннные элементы:
     HLTC74.10.3.1: Списки
     
    HLTC74.10.4: Проверить, что включить/выключить статус «Общий доступ» можно:  
    HLTC74.10.4.1 : Через контекстное меню 
}
function  HLTC74_10_3_1_Execute(var  current_state: OleVariant): OleVariant;    
const
  FOLDER_PREF = 'HLTC74_10_3_1';
var
  folderTree;   
  allDoc;
begin  
  folderTree := OpenMyDocTab;
  result := CreateFolderFrom (true, 'Мои документы', FOLDER_PREF);
  if result then
  begin
    allDoc := GetListOfAllDocuments;
    result := IsExists(allDoc);
    if result then
    begin
      result := SaveToFoldersExt(MY_DOCS_PATH+FOLDER_PREF,FOLDER_PREF,'','Сохранить');
      if result then
      begin
        folderTree := OpenMyDocTab;
        result := Position_Internal(folderTree,MY_DOCS_PATH+FOLDER_PREF);
        if result then
        begin
          Sys.Keys('[Apps]');
          result := NOT IsMenuItemChecked(folderTree.QCPopupMenu,'Открыть общий доступ');
          ClosePopupMenu(folderTree);
          if result then
          begin
            Sys.Keys('[Apps]'); 
            result := ClickByPopupMenuItem(folderTree,'Открыть общий доступ');  
            if result then
            begin
              Sys.Keys('[Apps]'); 
              result := IsMenuItemChecked(folderTree.QCPopupMenu,'Открыть общий доступ');
              ClosePopupMenu(folderTree);

              if NOT result then          
                Log.Error('Общий доступ для папки не установлен');
              Sys.Keys('[Apps]');   
              if NOT ClickByPopupMenuItem(folderTree,'Открыть общий доступ') then
                Log.Warning('Не удалось кликнуть в контекстном меню по пункту "Общий доступ"');
              Sys.Keys('[Apps]');   
              if IsMenuItemChecked(folderTree.QCPopupMenu,'Открыть общий доступ') then 
                Log.Warning('Общий доступ для папки остался установленным, хотя должен был сняться');
              ClosePopupMenu(folderTree);  
            end
            else
              Log.Warning('Не удалось кликнуть в контекстном меню по пункту "Общий доступ"');        
          end
          else
            Log.Warning('Почему то для элемента уже установлен общий доступ');
        end 
        else
          Log.Warning('Не удалось спозиционироваться на элементе');
      end    
      else
        Log.Warning('Не удалось сохранить список');
    end
    else
      Log.Warning('Не удалось получить список всех документов');
    if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF) then
      Log.Warning('Объект "' + MY_DOCS_PATH+FOLDER_PREF+'" не удалён');   
  end
  else
    Log.Warning('Не удалось создать папку');
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
end;

{HLTC74.10: Общий доступ
   HLTC74.10.3: Проверить возможность простановки общего доступа для папки, в 
   которой имеются вложеннные элементы:
     HLTC74.10.3.2: Другие папки (не открытые на общий доступ)
}
function  HLTC74_10_3_2_Execute(var  current_state: OleVariant): OleVariant;    
const
  FOLDER_PREF = 'HLTC74_10_3_2';
var
  folderTree;     
begin  
  folderTree := OpenMyDocTab;
  result := CreateFolderFrom (true, 'Мои документы', FOLDER_PREF) AND
            CreateFolderFrom (true, MY_DOCS_PATH+FOLDER_PREF, FOLDER_PREF);
  if result then
  begin
    result := Position_Internal(folderTree,MY_DOCS_PATH+FOLDER_PREF+'\'+FOLDER_PREF);
    if result then
    begin
      Sys.Keys('[Apps]');
      result := NOT IsMenuItemChecked(folderTree.QCPopupMenu,'Открыть общий доступ');
      ClosePopupMenu(folderTree);
      if result then
      begin
        folderTree := OpenMyDocTab;
        result := Position_Internal(folderTree,MY_DOCS_PATH+FOLDER_PREF);
        if result then
        begin
          Sys.Keys('[Apps]');
          result := NOT IsMenuItemChecked(folderTree.QCPopupMenu,'Открыть общий доступ');
          ClosePopupMenu(folderTree);
          if result then
          begin
            Sys.Keys('[Apps]'); 
            result := ClickByPopupMenuItem(folderTree,'Открыть общий доступ');  
            if result then
            begin
              Sys.Keys('[Apps]'); 
              result := IsMenuItemChecked(folderTree.QCPopupMenu,'Открыть общий доступ');
              ClosePopupMenu(folderTree);
              if NOT result then          
                Log.Error('Общий доступ для папки не установлен');
              Sys.Keys('[Apps]');   
              if NOT ClickByPopupMenuItem(folderTree,'Открыть общий доступ') then
                Log.Warning('Не удалось кликнуть в контекстном меню по пункту "Общий доступ"');
              Sys.Keys('[Apps]');   
              if IsMenuItemChecked(folderTree.QCPopupMenu,'Открыть общий доступ') then 
                Log.Warning('Общий доступ для папки остался установленным, хотя должен был сняться');
              ClosePopupMenu(folderTree);
            end
            else
              Log.Warning('Не удалось кликнуть в контекстном меню по пункту "Общий доступ"');        
          end
          else
            Log.Warning('Почему то для элемента уже установлен общий доступ');
        end 
        else
          Log.Warning('Не удалось спозиционироваться на элементе');
      end
      else
        Log.Warning('Почему то элемент является открытым на общий доступ');
    end
    else
      Log.Warning('Не удалось спозиционироваться на элементе');
    if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF) then
      Log.Warning('Объект "' + MY_DOCS_PATH+FOLDER_PREF+'" не удалён');   
  end
  else
    Log.Warning('Не удалось создать папку');
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
end;

{HLTC74.10: Общий доступ
   HLTC74.10.3: Проверить возможность простановки общего доступа для папки, в 
   которой имеются вложеннные элементы:
     HLTC74.10.3.3: Закладки
}
function  HLTC74_10_3_3_Execute(var  current_state: OleVariant): OleVariant;    
const
  FOLDER_PREF = 'HLTC74_10_3_3';
var
  folderTree;   
begin  
  folderTree := OpenMyDocTab;
  result := CreateFolderFrom (true, 'Мои документы', FOLDER_PREF);
  if result then
  begin
    result := OpenDocByNumber(1055132);
    if result then
    begin
      OpenInDocument('ТЕКСТ');
      result := SaveToFoldersExt(MY_DOCS_PATH+FOLDER_PREF,FOLDER_PREF,'','Сохранить');
      if result then
      begin
        folderTree := OpenMyDocTab;
        result := Position_Internal(folderTree,MY_DOCS_PATH+FOLDER_PREF);
        if result then
        begin
          Sys.Keys('[Apps]');
          result := NOT IsMenuItemChecked(folderTree.QCPopupMenu,'Открыть общий доступ');
          ClosePopupMenu(folderTree);
          if result then
          begin
            Sys.Keys('[Apps]'); 
            result := ClickByPopupMenuItem(folderTree,'Открыть общий доступ');  
            if result then
            begin
              Sys.Keys('[Apps]'); 
              result := IsMenuItemChecked(folderTree.QCPopupMenu,'Открыть общий доступ');
              ClosePopupMenu(folderTree);
              if NOT result then          
                Log.Error('Общий доступ для папки не установлен');
              Sys.Keys('[Apps]');   
              if NOT ClickByPopupMenuItem(folderTree,'Открыть общий доступ') then
                Log.Warning('Не удалось кликнуть в контекстном меню по пункту "Общий доступ"');
              Sys.Keys('[Apps]');   
              if IsMenuItemChecked(folderTree.QCPopupMenu,'Открыть общий доступ') then 
                Log.Warning('Общий доступ для папки остался установленным, хотя должен был сняться');
              ClosePopupMenu(folderTree);  
            end
            else
              Log.Warning('Не удалось кликнуть в контекстном меню по пункту "Общий доступ"');        
          end
          else
            Log.Warning('Почему то для элемента уже установлен общий доступ');
        end 
        else
          Log.Warning('Не удалось спозиционироваться на элементе');
      end    
      else
        Log.Warning('Не удалось сохранить закладку');
    end
    else
      Log.Warning('Не удалось открыть документ по номеру');
    if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF) then
      Log.Warning('Объект "' + MY_DOCS_PATH+FOLDER_PREF+'" не удалён');   
  end
  else
    Log.Warning('Не удалось открыть документ по номеру');
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
end;

{HLTC74.10: Общий доступ
   HLTC74.10.3: Проверить возможность простановки общего доступа для папки, в 
   которой имеются вложеннные элементы:
     HLTC74.10.3.4: Запросы
}
function  HLTC74_10_3_4_Execute(var  current_state: OleVariant): OleVariant;    
const
  FOLDER_PREF = 'HLTC74_10_3_4';
var
  folderTree;   
begin  
  folderTree := OpenMyDocTab;
  result := CreateFolderFrom (true, 'Мои документы', FOLDER_PREF);
  if result then
  begin
    result := GoToPPR;
    if result then
    begin
      result := SaveToFoldersExt(MY_DOCS_PATH+FOLDER_PREF,FOLDER_PREF,'','Сохранить');
      if result then
      begin
        folderTree := OpenMyDocTab;
        result := Position_Internal(folderTree,MY_DOCS_PATH+FOLDER_PREF);
        if result then
        begin
          Sys.Keys('[Apps]');
          result := NOT IsMenuItemChecked(folderTree.QCPopupMenu,'Открыть общий доступ');
          ClosePopupMenu(folderTree);
          if result then
          begin
            Sys.Keys('[Apps]'); 
            result := ClickByPopupMenuItem(folderTree,'Открыть общий доступ');  
            if result then
            begin
              Sys.Keys('[Apps]'); 
              result := IsMenuItemChecked(folderTree.QCPopupMenu,'Открыть общий доступ');
              ClosePopupMenu(folderTree);
              if NOT result then          
                Log.Error('Общий доступ для папки не установлен');
              Sys.Keys('[Apps]');   
              if NOT ClickByPopupMenuItem(folderTree,'Открыть общий доступ') then
                Log.Warning('Не удалось кликнуть в контекстном меню по пункту "Общий доступ"');
              Sys.Keys('[Apps]');   
              if IsMenuItemChecked(folderTree.QCPopupMenu,'Открыть общий доступ') then 
                Log.Warning('Общий доступ для папки остался установленным, хотя должен был сняться');
              ClosePopupMenu(folderTree);  
            end
            else
              Log.Warning('Не удалось кликнуть в контекстном меню по пункту "Общий доступ"');        
          end
          else
            Log.Warning('Почему то для элемента уже установлен общий доступ');
        end 
        else
          Log.Warning('Не удалось спозиционироваться на элементе');
      end    
      else
        Log.Warning('Не удалось сохранить запрос');
    end
    else
      Log.Warning('Не удалось открыть ППР');
    if NOT DeleteObjectFromFolder(MY_DOCS_PATH+FOLDER_PREF) then
      Log.Warning('Объект "' + MY_DOCS_PATH+FOLDER_PREF+'" не удалён');   
  end
  else
    Log.Warning('Не удалось открыть ППР');
  GoToMainMenu;
  current_state := ST_MAIN_MENU;   
end;

{HLTC74.10: Общий доступ
   HLTC74.10.3: Проверить возможность простановки общего доступа для папки, в 
   которой имеются вложеннные элементы:
     HLTC74.10.3.5: Запрос, являющийся неприменённым фильтром
}
function  HLTC74_10_3_5_Execute(var  current_state: OleVariant): OleVariant;    
const
  FOLDER_PREF = 'HLTC74_10_3_5';
var
  folderTree;   
begin
try  
  folderTree := OpenMyDocTab;
  if NOT CreateFolderFrom (true, 'Мои документы', FOLDER_PREF) then Raise('Не удалось создать папку');
  GoToPPR;
  Sys.Keys('конституция');
  if NOT SaveToFoldersExt(MY_DOCS_PATH+FOLDER_PREF,FOLDER_PREF,'','Сохранить') then Raise('Не удалось сохранить запрос');
  folderTree := OpenMyDocTab;
  if NOT Position_Internal (folderTree,MY_DOCS_PATH+FOLDER_PREF+'\'+FOLDER_PREF, '\', true, 'IsPressHome:=true') then Raise('Не удалось спозиционироваться в моих документах на запросе');
  Sys.Keys('[Apps]');
  if NOT ClickByPopupMenuItem(folderTree,'Добавить фильтр из сохраненных запросов') then Raise('Не удалось вызватьконтекстную  операцию Добавить фильтр из сохраненных запросов');
  GetFromShell('КНОПКА "ОК" ДИАЛОГА СОХРАНЕНИЯ ФИЛЬТРА').Click;
  if NOT Position_Internal (folderTree,MY_DOCS_PATH+FOLDER_PREF, '\', true, 'IsPressHome:=true') then Raise('Не удалось спозиционироваться в моих документах на папке');
  Sys.Keys('[Apps]');
  if IsMenuItemChecked(folderTree.QCPopupMenu,'Открыть общий доступ') then Raise('Контекстная операци "Отркыть общий доступ" уже активирована');
  ClosePopupMenu(folderTree);  
  Sys.Keys('[Apps]'); 
  if NOT ClickByPopupMenuItem(folderTree,'Открыть общий доступ') then Raise('Не удалось вызвать контекстную операцию "Открыть общий доступ"');  
  Sys.Keys('[Apps]'); 
  if NOT IsMenuItemChecked(folderTree.QCPopupMenu,'Открыть общий доступ') then
  begin
    Log.Error('Контекстная операци "Отркыть общий доступ" НЕ активирована'); 
    Raise('Контекстная операци "Отркыть общий доступ" НЕ активирована');
  end;
  ClosePopupMenu(folderTree);  
  Sys.Keys('[Apps]');   
  if NOT ClickByPopupMenuItem(folderTree,'Открыть общий доступ') then Raise('Не удалось вызвать контекстную операцию "Открыть общий доступ"');
  Sys.Keys('[Apps]');   
  if IsMenuItemChecked(folderTree.QCPopupMenu,'Открыть общий доступ') then Raise('Контекстная операци "Отркыть общий доступ" активирована, хотя не должна');
  ClosePopupMenu(folderTree);  
  DeleteAllInMyDoc;
  OpenInList('СПИСОК ФИЛЬТРОВ');
  DeleteFilter(FOLDER_PREF);  
  GoToMainMenu; 
  result := true;
except  
  Log.Message( FOLDER_PREF + ': ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;

{HLTC74.10: Общий доступ
   HLTC74.10.3: Проверить возможность простановки общего доступа для папки, в 
   которой имеются вложеннные элементы:
     HLTC74.10.3.6: Запрос, являющийся применённым фильтром
}
function  HLTC74_10_3_6_Execute(var  current_state: OleVariant): OleVariant;    
const
  FOLDER_PREF = 'HLTC74_10_3_6';
var
  folderTree;
  filterList;  
begin
try  
  folderTree := OpenMyDocTab;
  if NOT CreateFolderFrom (true, 'Мои документы', FOLDER_PREF) then Raise('Не удалось создать папку');
  GoToPPR;
  Sys.Keys('конституция');
  if NOT SaveToFoldersExt(MY_DOCS_PATH+FOLDER_PREF,FOLDER_PREF,'','Сохранить') then Raise('Не удалось сохранить запрос');
  folderTree := OpenMyDocTab;
  if NOT Position_Internal (folderTree,MY_DOCS_PATH+FOLDER_PREF+'\'+FOLDER_PREF, '\', true, 'IsPressHome:=true') then Raise('Не удалось спозиционироваться в моих документах на запросе');
  Sys.Keys('[Apps]');
  if NOT ClickByPopupMenuItem(folderTree,'Добавить фильтр из сохраненных запросов') then Raise('Не удалось вызватьконтекстную  операцию Добавить фильтр из сохраненных запросов');
  GetFromShell('КНОПКА "ОК" ДИАЛОГА СОХРАНЕНИЯ ФИЛЬТРА').Click;
  GetListOfAllDocuments;
  filterList := OpenInList('СПИСОК ФИЛЬТРОВ');
  if NOT WorkWithFilters(filterList, 'set', '+' + FOLDER_PREF) then
    Raise('Не удалось применить фильтр :' + FOLDER_PREF);
  folderTree := OpenMyDocTab;  
  if NOT Position_Internal (folderTree,MY_DOCS_PATH+FOLDER_PREF, '\', true, 'IsPressHome:=true') then Raise('Не удалось спозиционироваться в моих документах на папке');
  Sys.Keys('[Apps]');
  if IsMenuItemChecked(folderTree.QCPopupMenu,'Открыть общий доступ') then Raise('Контекстная операци "Отркыть общий доступ" уже активирована');
  ClosePopupMenu(folderTree);  
  Sys.Keys('[Apps]'); 
  if NOT ClickByPopupMenuItem(folderTree,'Открыть общий доступ') then Raise('Не удалось вызвать контекстную операцию "Открыть общий доступ"');  
  Sys.Keys('[Apps]'); 
  if NOT IsMenuItemChecked(folderTree.QCPopupMenu,'Открыть общий доступ') then
  begin
    Log.Error('Контекстная операци "Отркыть общий доступ" НЕ активирована'); 
    Raise('Контекстная операци "Отркыть общий доступ" НЕ активирована');
  end;
  ClosePopupMenu(folderTree);  
  Sys.Keys('[Apps]');   
  if NOT ClickByPopupMenuItem(folderTree,'Открыть общий доступ') then Raise('Не удалось вызвать контекстную операцию "Открыть общий доступ"');
  Sys.Keys('[Apps]');   
  if IsMenuItemChecked(folderTree.QCPopupMenu,'Открыть общий доступ') then Raise('Контекстная операци "Отркыть общий доступ" активирована, хотя не должна');
  ClosePopupMenu(folderTree);  
  DeleteAllInMyDoc;
  OpenInList('СПИСОК ФИЛЬТРОВ');
  DeleteFilter(FOLDER_PREF);  
  GoToMainMenu; 
  result := true;
except  
  Log.Message( FOLDER_PREF + ': ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;

{HLTC74.10: Общий доступ
   HLTC74.10.3: Проверить возможность простановки общего доступа для папки, в 
   которой имеются вложеннные элементы:
     HLTC74.10.3.7: Все, вышеперечисленные элементы     
}
function  HLTC74_10_3_7_Execute(var  current_state: OleVariant): OleVariant;    
const
  FOLDER_PREF = 'HLTC74_10_3_7';
var
  folderTree;   
  filterList;
begin
try  
  folderTree := OpenMyDocTab;
  if NOT CreateFolderFrom (true, 'Мои документы', FOLDER_PREF) then Raise('Не удалось создать папку');
  GoToPPR;
  Sys.Keys('конституция');
  if NOT SaveToFoldersExt(MY_DOCS_PATH+FOLDER_PREF,'запрос_'+FOLDER_PREF,'','Сохранить') then Raise('Не удалось сохранить запрос');
  if NOT SaveToFoldersExt(MY_DOCS_PATH+FOLDER_PREF,'фильтр_'+FOLDER_PREF,'','Сохранить') then Raise('Не удалось сохранить запрос');
  if NOT SaveToFoldersExt(MY_DOCS_PATH+FOLDER_PREF,'фильтр_применён_'+FOLDER_PREF,'','Сохранить') then Raise('Не удалось сохранить запрос');
  if NOT OpenDocByNumber(10003000) then Raise('Не удалось открыть документ по Alt+N');
  if NOT SaveToFoldersExt(MY_DOCS_PATH+FOLDER_PREF,'закладка_'+FOLDER_PREF,'','Сохранить') then Raise('Не удалось сохранмтьсохранить закладку');
  GetListofAllDocuments;                            
  if NOT SaveToFoldersExt(MY_DOCS_PATH+FOLDER_PREF,'список_'+FOLDER_PREF,'','Сохранить') then Raise('Не удалось сохранить список');
  
  folderTree := OpenMyDocTab;
  if NOT Position_Internal (folderTree,MY_DOCS_PATH+FOLDER_PREF+'\фильтр_'+FOLDER_PREF, '\', true, 'IsPressHome:=true') then Raise('Не удалось спозиционироваться в моих документах на запросе');
  Sys.Keys('[Apps]');
  if NOT ClickByPopupMenuItem(folderTree,'Добавить фильтр из сохраненных запросов') then Raise('Не удалось вызватьконтекстную  операцию Добавить фильтр из сохраненных запросов');
  GetFromShell('КНОПКА "ОК" ДИАЛОГА СОХРАНЕНИЯ ФИЛЬТРА').Click;
  
  if NOT Position_Internal (folderTree,MY_DOCS_PATH+FOLDER_PREF+'\фильтр_применён_'+FOLDER_PREF, '\', true, 'IsPressHome:=true') then Raise('Не удалось спозиционироваться в моих документах на запросе');
  Sys.Keys('[Apps]');
  if NOT ClickByPopupMenuItem(folderTree,'Добавить фильтр из сохраненных запросов') then Raise('Не удалось вызватьконтекстную  операцию Добавить фильтр из сохраненных запросов');
  GetFromShell('КНОПКА "ОК" ДИАЛОГА СОХРАНЕНИЯ ФИЛЬТРА').Click;
  GetListOfAllDocuments;
  filterList := OpenInList('СПИСОК ФИЛЬТРОВ');
  if NOT WorkWithFilters(filterList, 'set', '+' + 'фильтр_применён_'+FOLDER_PREF) then
    Raise('Не удалось применить фильтр :' + 'фильтр_применён_'+FOLDER_PREF);
  folderTree := OpenMyDocTab;  
  if NOT Position_Internal (folderTree,MY_DOCS_PATH+FOLDER_PREF, '\', true, 'IsPressHome:=true') then Raise('Не удалось спозиционироваться в моих документах на папке');
  Sys.Keys('[Apps]');
  if IsMenuItemChecked(folderTree.QCPopupMenu,'Открыть общий доступ') then Raise('Контекстная операци "Отркыть общий доступ" уже активирована');
  ClosePopupMenu(folderTree);  
  Sys.Keys('[Apps]'); 
  if NOT ClickByPopupMenuItem(folderTree,'Открыть общий доступ') then Raise('Не удалось вызвать контекстную операцию "Открыть общий доступ"');  
  Sys.Keys('[Apps]'); 
  if NOT IsMenuItemChecked(folderTree.QCPopupMenu,'Открыть общий доступ') then
  begin
    Log.Error('Контекстная операци "Отркыть общий доступ" НЕ активирована'); 
    Raise('Контекстная операци "Отркыть общий доступ" НЕ активирована');
  end;
  ClosePopupMenu(folderTree);  
  Sys.Keys('[Apps]');   
  if NOT ClickByPopupMenuItem(folderTree,'Открыть общий доступ') then Raise('Не удалось вызвать контекстную операцию "Открыть общий доступ"');
  Sys.Keys('[Apps]');   
  if IsMenuItemChecked(folderTree.QCPopupMenu,'Открыть общий доступ') then Raise('Контекстная операци "Отркыть общий доступ" активирована, хотя не должна');
  ClosePopupMenu(folderTree);  
  DeleteAllInMyDoc;
  OpenInList('СПИСОК ФИЛЬТРОВ');
  DeleteFilter('фильтр_применён_'+FOLDER_PREF);  
  DeleteFilter('фильтр_'+FOLDER_PREF);
  GoToMainMenu; 
  result := true;
except  
  Log.Message( FOLDER_PREF + ': ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;             
end;
end;  
 

{HLTC74.10: Общий доступ
   HLTC74.10.4: Проверить, что включить/выключить статус «Общий доступ» можно:
     HLTC74.10.4.2: Через свойства папки на закладке «Доступ». По умолчанию сразу 
      должны выставлятся параметры:
       HLTC74.10.4.2.1: Только на чтение
         
}
function  HLTC74_10_4_2_1_Execute(var  current_state: OleVariant): OleVariant;    
const
  FOLDER_PREF = 'HLTC74_10_4_2_1';
var
  folderTree;   
begin
try  
  folderTree := OpenMyDocTab;  
  if NOT CreateFolderFrom (true, 'Мои документы', FOLDER_PREF) then
    Raise('Не удалось создать новую папку');
  
  if NOT RightAccess(MY_DOCS_PATH + FOLDER_PREF) then
  begin
    Log.Error('Не удалось открыть папку на общий доступ');
    Raise('Не удалось открыть папку на общий доступ');    
  end;  
        
  if NOT (MoveMouseToObject(folderTree,'access_folder.bmp',0,0,false) ) AND //проверяем, есть ли иконка
    (common.GetWindowText(folderTree.Handle) = FOLDER_PREF) then
    begin
      Log.Error('Не удалось найти соответствующую иконку на папке с общим доступом');
      Raise('Не удалось найти соответствующую иконку на папке с общим доступом');  
    end;
  DeleteAllInMyDoc;  
  result := true;
except
  DeleteAllInMyDoc;
  Log.Message( 'HLTC74_10_4_2_1: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));  
  result := false;
  CommonExceptionHandler; 
end;
end;

{HLTC74.10: Общий доступ   
   HLTC74.10.5: Проверить, что все личные папки пользователя, имеющие статус 
   «Общий доступ», отображаются специальной иконкой.   
}
function  HLTC74_10_5_Execute(var  current_state: OleVariant): OleVariant;    
const
  FOLDER_PREF = 'HLTC74_10_5';
var
  folderTree;   
begin
  try  
    folderTree := OpenMyDocTab;
    if NOT CreateFolderFrom (true, 'Мои документы', FOLDER_PREF) then
      Raise('Не удалось создать папку');
    if NOT RightAccess(MY_DOCS_PATH+FOLDER_PREF,'SET','Все',RIGHT_READ) then//Ставим доступ для всех на папку
      Raise('Не удалось выставить права доступа "Все" для папки');
    if NOT (MoveMouseToObject(folderTree,'access_folder.bmp',0,0,false) ) AND //проверяем, есть ли иконка
      (common.GetWindowText(folderTree.Handle) = FOLDER_PREF) then
    begin
      Log.Error('Не удалось найти соответствующую иконку на папке с общим доступом');
      Raise('Не удалось найти соответствующую иконку на папке с общим доступом');  
    end;
    result := true;
    DeleteAllInMyDoc;
  except
    result := false;
    Log.Message('HLTC74_10_5_Execute: ' + ExceptionMessage,'',pmNormal, GetLogAttr('EXCEPTION'));
    DeleteAllInMyDoc;
    CommonExceptionHandler; 
  end;  
     
end;


{ HLTC74.10.11: Проверить, что нельзя открыть общий доступ для папки, которая
 вложена в другую папку, уже открытую на общий доступ
}
function  HLTC74_10_11_Execute(var  current_state: OleVariant): OleVariant;    
const
  FOLDER_PREF = 'HLTC74_10_11';
var
  folderTree;                                     
begin 
  try    
    folderTree := OpenMyDocTab;      
    result := 
      CreateFolderFrom (true, 'Мои документы', FOLDER_PREF) AND
      CreateFolderFrom (true, MY_DOCS_PATH+FOLDER_PREF, FOLDER_PREF);
    if NOT result then
      Raise('Не удалось создать папку');    
    result := RightAccess(MY_DOCS_PATH+FOLDER_PREF,'SET','Все',RIGHT_READ); 
    if NOT result then
      Raise('Не удалось поставить доступ к папке');
    folderTree.SetFocus;
    Sys.Keys('[Home]');  
    if NOT Position_Internal(folderTree,MY_DOCS_PATH+FOLDER_PREF+'\'+FOLDER_PREF) then
      Raise('Не удалось спозиционироваться на элементе');
    if NOT ClickToolbarButton(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', folderTree),'Свойства','SetToState := pressed') then
      Raise('Не удалось нажать на кнопку "Свойства"');
    result := NOT SwitchToPage(GetFromFolderForm('ЗАКЛАДКИ', folderTree),'Доступ');
    if NOT result then
      Log.Error('Почему то можно открыть доступ к папке, СУЩЕСТВУЕТ ВКЛАДКА ДОСТУП');          
      
    if NOT ClickToolbarButton(GetFromFolderForm('НИЖНИЙ ТУЛБАР', folderTree),'Отмена') then
      Log.Warning('Не удалось кликнуть по кнопке "Отмена"');           
    if NOT DeleteAllInMyDoc then
      Log.Warning('Не удалось удалить все объекты из моих документов');   
    GoToMainMenu;
    current_state := ST_MAIN_MENU;   
  except
    Log.Message('HLTC74_10_11_Execute: ' + ExceptionMessage,'',pmNormal, GetLogAttr('EXCEPTION')); 
    result := false;
  CommonExceptionHandler;
  end;  
end;



{ HLTC74.10.14: Проверить, что по умолчанию (т.е при создании папки) на закладке
 «Доступ» не установлена опция «Открыть общий доступ»
  }
function  HLTC74_10_14_Execute(var  current_state: OleVariant): OleVariant;    
const
  FOLDER_PREF = 'HLTC74_10_14';
var
  folderTree;       
  checkBox;                              
begin 
  try    
    folderTree := OpenMyDocTab;      
    if NOT CreateFolderFrom (true, 'Мои документы', FOLDER_PREF) then
      Raise('Не удалось создать папку');              
    if NOT Position_Internal(folderTree,MY_DOCS_PATH+FOLDER_PREF) then
      Raise('Не удалось спозиционироваться на элементе');
    if NOT ClickToolbarButton(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', folderTree),'Свойства','SetToState := pressed') then
      Raise('Не удалось нажать на кнопку "Свойства"');
      
    checkBox := GetFromFolderForm('ЧЕКБОКС "ОТКРЫТЬ ОБЩИЙ ДОСТУП"',  folderTree);
    if NOT IsExists(checkBox) then Raise('Не удалось получить ЧЕКБОКС "ОТКРЫТЬ ОБЩИЙ ДОСТУП"');   
          
    result := NOT checkBox.Checked; 
    if NOT result then
      Log.Error('По умолчанию для новой папки установлен ЧЕКБОКС "ОТКРЫТЬ ОБЩИЙ ДОСТУП"!');   
    
    if NOT ClickToolbarButton(GetFromFolderForm('НИЖНИЙ ТУЛБАР', folderTree),'Отмена') then
      Log.Warning('Не удалось кликнуть по кнопке "Отмена"');    
    if NOT DeleteAllInMyDoc then
      Log.Warning('Не удалось удалить все объекты из моих документов');
  except
    Log.Message('HLTC74_10_14_Execute: ' + ExceptionMessage,'',pmNormal, GetLogAttr('EXCEPTION')); 
    result := false;
  CommonExceptionHandler;
  end;  
end;

{ HLTC74.10.16: Проверить, что операция «Общий доступ» контекстного меню на папке 
отсутствует, если папка вложена в другую, открытую на общий доступ папку.
  }
function  HLTC74_10_16_Execute(var  current_state: OleVariant): OleVariant;    
const
  FOLDER_PREF = 'HLTC74_10_16';
var
  folderTree;       
  checkBoks;                              
begin 
  try    
    folderTree := OpenMyDocTab;      
    if NOT ((CreateFolderFrom (true, 'Мои документы', FOLDER_PREF)) AND 
           (CreateFolderFrom (true, MY_DOCS_PATH+FOLDER_PREF, FOLDER_PREF)))then
      Raise('Не удалось создать папку');     
    if NOT RightAccess(MY_DOCS_PATH+FOLDER_PREF,'SET','Все',RIGHT_READ) then
      Raise('Не удалось поставить доступ к папке');                 
    folderTree.SetFocus;
    Sys.Keys('[Home]');  
    if NOT Position_Internal(folderTree,MY_DOCS_PATH+FOLDER_PREF+'\'+FOLDER_PREF) then
      Raise('Не удалось спозиционироваться на элементе');
    Sys.Keys('[Apps]');
    result := NOT ClickByPopupMenuItem(folderTree,'Открыть общий доступ');         
    if NOT result then
      Log.Error('Операция «Общий доступ» контекстного меню на папке, вложенной в открытую на общ доступ папку, существует');        
    if NOT DeleteAllInMyDoc then
      Log.Warning('Не удалось удалить все объекты из моих документов');   
    GoToMainMenu;
    current_state := ST_MAIN_MENU;   
  except
    Log.Message('HLTC74_10_16_Execute: ' + ExceptionMessage,'',pmNormal, GetLogAttr('EXCEPTION')); 
    result := false;
  CommonExceptionHandler;
  end;  
end;


{
HLTC74.10.18: Проверить, что невозможно отркыть на общий доступ «журнал работы
}
function  HLTC74_10_18_Execute(var  current_state: OleVariant): OleVariant;
var
  folderTree;
  toolBarMyDoc;
  checkBox;
begin
try
  folderTree := OpenMyDocTab;  
  if NOT Position_Internal(folderTree, 'Журнал работы', '\', true, 'IsPressHome:=true') then
    Raise('Не удалось спозиционироваться на папку : Журнал работы');
  toolBarMyDoc := GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', folderTree);
    if NOT IsExists(toolBarMyDoc) then Raise('Не удалось получить ТУЛБАР "МОИ ДОКУМЕНТЫ"');  
  if NOT ClickToolbarButton(toolBarMyDoc,'Свойства','SetToState := pressed') then    
      Raise('Не удалось нажать кнопку "Свойства" ');
  checkBox := GetFromFolderForm('ЧЕКБОКС "ОТКРЫТЬ ОБЩИЙ ДОСТУП"',  folderTree);
  if IsExists(checkBox) then
  begin
    Log.Error('Для Журнала работы существует ЧЕКБОКС "ОТКРЫТЬ ОБЩИЙ ДОСТУП"!'); 
    Raise('Для Журнала работы существует ЧЕКБОКС "ОТКРЫТЬ ОБЩИЙ ДОСТУП"!');
  end;  
  ClickToolbarButton(GetFromFolderForm('НИЖНИЙ ТУЛБАР', folderTree),'Отмена');  
  result := true;
except
  Log.Message('HLTC74_10_18_Execute: ' + ExceptionMessage,'',pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;            
end;

{
HLTC74.10: Общий доступ
  HLTC74.10.7: Проверить, что все изменения статуса «Общий доступ» отображаются у остальных пользователей 
    (проверить снятие и установку общего доступа)
  HLTC74.10.8: Проверить, что папки, для которых у пользователя есть права на доступ, отображаются в папке «Общие»          
  HLTC74.10.10.4: Проверить, что право на изменение прав имеет только владелец папки.
}
function  HLTC74_10_7_Execute(var  current_state: OleVariant): OleVariant;
const 
  SCRIPT_PREF = 'HLTC74_10_7';
var
  folderTree;
  login, count, pass;
  folderName;
  i;  
  checkBox;
  
begin
try
  
  //Логинимся юзером 2(что бы он создался)
  login := '2userFromScript'+SCRIPT_PREF; count := 5; 
  pass := SCRIPT_PREF;
  RestartF1Shell(count, Options.Run.Timeout div 6, login, pass);
  //Логинимся дефолтным юзером, у которого будем создавать папку  
  login := 'DefUserFromScript'+SCRIPT_PREF; count := 5;  
  RestartF1Shell(count, Options.Run.Timeout div 6, login, pass);    
  folderTree := OpenMyDocTab;
  if NOT (  CreateFolderFrom (true, 'Мои документы', SCRIPT_PREF+'_folder') ) then 
    Raise('Не удалось создать одну из папок в Моих документах!');

  if NOT (  RightAccess(MY_DOCS_PATH+SCRIPT_PREF+'_folder',         
                'SET'  ,'2userFromScript'+SCRIPT_PREF+' (2userFromScript'+SCRIPT_PREF+')',RIGHT_READ) ) then 
    Raise('Не удалось установить права доступа для одной из папок');
  //Логинимся юзерами 1 и 2, что бы проверить, действительно ли для эталонной папки установлен нужный доступ
  
  login := '2userFromScript'+SCRIPT_PREF;
  count := 5;    
  RestartF1Shell(count, Options.Run.Timeout div 6, login, pass);
  //Проверяем, что общедоступная папка присутствует в "Общие\..." 
  folderTree := OpenMyDocTab;
  folderName := 'Общие\DefUserFromScript'+SCRIPT_PREF + '\' + SCRIPT_PREF+'_folder';  
  if NOT Position_Internal(folderTree, folderName, '\', true, 'IsPressHome:=true') then
  begin
    Log.Error('Не удалось спозиционироваться на общедоступную папку : ' + folderName);
    Raise('Не удалось спозиционироваться на общедоступную папку : ' + folderName);
  end;
  //Проверяем, что у папки, находящейся в общем доступе "Общие\..." нет контекстной операции открытия общего доступа
  folderTree.ClickR;   
  if IsPopupMenuItemExists(folderTree, 'Открыть общий доступ') then   
  begin
    Log.Error('Для папки из Общих документов существует контекстная операция "Открыть общий доступ"');
    Raise('Для папки из Общих документов существует контекстная операция "Открыть общий доступ"');
  end;                                                   
  Sys.Keys('[Esc]');  
  //Проверяем, что общедоступной папки нет в Моих документов(Мои документы пустые)
  folderTree := OpenMyDocTab;    
  if NOT Position_Internal(folderTree, 'Мои документы', '\', true, 'IsPressHome:=true') then                                                                                                
    Raise('Не удалось спозиционироваться на  папку : Мои документы');
  Sys.Keys('[Right][Right]');
  if NOT StringCompare(common.GetWindowText(folderTree), 'Мои документы') then  
    Raise('Папка Мои документы имеет вложения, хотя этого быть не должно ');      
      
  //Логинимся дефолтным юзером и снимаем общий доступ с эталонной папки
  login := 'DefUserFromScript'+SCRIPT_PREF; count := 5;
  RestartF1Shell(count, Options.Run.Timeout div 6, login, pass);               
  folderTree := OpenMyDocTab;
  folderName := MY_DOCS_PATH + SCRIPT_PREF+'_folder';
  if NOT Position_Internal(folderTree, folderName, '\', true, 'IsPressHome:=true') then
    Raise('Не удалось спозиционироваться на  папку : ' + folderName);    
  if NOT ClickToolbarButton(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', folderTree),'Свойства','SetToState := pressed') then    
      Raise('Не удалось нажать кнопку "Свойства" ');        
  checkBox := GetFromFolderForm('ЧЕКБОКС "ОТКРЫТЬ ОБЩИЙ ДОСТУП"',  folderTree);
  if NOT IsExists(checkBox) then Raise('Не удалось получить ЧЕКБОКС "ОТКРЫТЬ ОБЩИЙ ДОСТУП"');   
  if checkBox.Checked then checkBox.Click;//Снимаем галку  
  ClickToolbarButton(GetFromFolderForm('НИЖНИЙ ТУЛБАР', folderTree), 'Ок');  
  //Логинимся юзером 2, что бы проверить, что действительно  для эталонной папки общий доступ снялся  
  login := '2userFromScript'+SCRIPT_PREF;   
  count := 5;    
  RestartF1Shell(count, Options.Run.Timeout div 6, login, pass);
  //Проверяем, что эталонная папка отсутствует в "Общие\..."     
  folderTree := OpenMyDocTab;
  folderName := 'Общие\DefUserFromScript' + SCRIPT_PREF;     
  if Position_Internal(folderTree, folderName, '\', true, 'IsPressHome:=true') then
  begin                                                                                                
    Log.Error('Эталонная папка находится в директории в "Общие" - значит общий доступ не снялся!');
    Raise('Эталонная папка находится в директории в "Общие" - значит общий доступ не снялся!');
  end;  
   //Логинимся дефолтным юзером, что бы ещё раз установить доступ для эталонной папке
  login := 'DefUserFromScript'+SCRIPT_PREF; count := 5;
  RestartF1Shell(count, Options.Run.Timeout div 6, login, pass);    
  folderTree := OpenMyDocTab;  
  if NOT (  RightAccess(MY_DOCS_PATH+SCRIPT_PREF+'_folder',         
                'SET'  ,'2userFromScript'+SCRIPT_PREF+' (2userFromScript'+SCRIPT_PREF+')',RIGHT_READ) ) then 
    Raise('Не удалось установить права доступа для одной из папок');    
  //Логинимся опять юзером 2, что бы проверить, что действительно ли для эталонной папки установлен нужный доступ
  login := '2userFromScript'+SCRIPT_PREF;  
  count := 5;    
  RestartF1Shell(count, Options.Run.Timeout div 6, login, pass);
  //Проверяем, что общедоступная папка присутствует в "Общие\..." 
  folderTree := OpenMyDocTab;
  folderName := 'Общие\DefUserFromScript'+SCRIPT_PREF + '\' + SCRIPT_PREF+'_folder';  
  if NOT Position_Internal(folderTree, folderName, '\', true, 'IsPressHome:=true') then
  begin
    Log.Error('Не удалось спозиционироваться на общедоступную папку : ' + folderName);
    Raise('Не удалось спозиционироваться на общедоступную папку : ' + folderName);
  end;  
  //Проверяем, что у папки, находящейся в общем доступе "Общие\..." нет контекстной операции открытия общего доступа
  folderTree.ClickR;   
  if IsPopupMenuItemExists(folderTree, 'Открыть общий доступ') then   
  begin
    Log.Error('Для папки из Общих документов существует контекстная операция "Открыть общий доступ"');
    Raise('Для папки из Общих документов существует контекстная операция "Открыть общий доступ"');
  end;                                                   
  Sys.Keys('[Esc]');
  //Проверяем, что общедоступной папки нет в Моих документов(Мои документы пустые)
  folderTree := OpenMyDocTab;    
  if NOT Position_Internal(folderTree, 'Мои документы', '\', true, 'IsPressHome:=true') then                                                                                                
    Raise('Не удалось спозиционироваться на  папку : Мои документы');
  Sys.Keys('[Right][Right]');
  if NOT StringCompare(common.GetWindowText(folderTree), 'Мои документы') then  
    Raise('Папка Мои документы имеет вложения, хотя этого быть не должно ');
  
  //Логинимся дефолтным юзером что бы почистить Мои документы  
  login := 'DefUserFromScript'+SCRIPT_PREF; count := 5;
  RestartF1Shell(count, Options.Run.Timeout div 6, login, pass);
  DeleteAllInMyDoc;    
  result := true;
except
  Log.Message('HLTC74_10_7_Execute: ' + ExceptionMessage,'',pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;            
end;

{
   HLTC74.10.10: Проверка прав доступа:
     HLTC74.10.10.1: Проверить права Чтение:
       +HLTC74.10.10.1.1: Пользователь не может изменять содержимое папки (удалять, изменять элементы)
       +HLTC74.10.10.1.2: Не может удалять саму папку
       +HLTC74.10.10.1.3: Не может изменять свойства папки
       HLTC74.10.10.1.4: Пользователь может просматривать элементы в папке:  
        +HLTC74.10.10.1.4.1: Другие папки (их содержимое, свойства)
      +HLTC74.10.10.1.4.2: Списки (загружать, просматривать свойства)
       +HLTC74.10.10.1.4.3: Закладки (загружать, просматривать свойства)
        +HLTC74.10.10.1.4.4: Запросы (загружать, просматривать свойства)
        
    HLTC74.10.10.3: Проверить, что права установленные на папку, действуют на все
     сохранённые в ней элементы (папки, списки, закладки, фильтры, запросы)         
}

function  HLTC74_10_10_1_4_Execute(var  current_state: OleVariant): OleVariant;    
const
  FOLDER_PREF = 'HLTC74_10_10_1_4';    
var
  i:integer;
  folderTree;   
  count:integer;
  login,pass : string;
  resArray: array [1..5] of boolean;   //Массив с результатом пройденных и непройденных тесткейсов по 
                                       // HLTC74.10.10.1.4: Пользователь может просматривать элементы в папке:
                                       //(1:Подпапка, 2:Список, 3:Закладка, 4:Запрос, 5:Фильтр)   
  res:boolean;                         //Результат тесткейсов по HLTC74.10.10.1.1,HLTC74.10.10.1.2,HLTC74.10.10.1.3                                                 
  obj;
  objPath:string;
  listArray,listArrayTo;
  listName,listNote:string;
  folderName,folderNote:string;
  bookmarkName,bookmarkNote:string;
  queryName,queryNote:string;
  filterName,filterNote:string;
	copy_attempts;
begin
  try
  //Заполняем массив результатов по значениями умолчанию
    for i := 1 to 4 do resArray[i] := true;    
    res := true;  
    //Итоговый результат
    result := false;
  //Логинимся пользователем ..user1  
    count := 5; 
    login := FOLDER_PREF+'_user1';
    pass := FOLDER_PREF;
    RestartF1Shell(count,Options.Run.Timeout div 6,login,pass);    
    //Логинимся пользователем ..user2
    login := FOLDER_PREF+'_user2';
    RestartF1Shell(count,Options.Run.Timeout div 6,login,pass); 
    //Создаём под пользователем user2 папку "..r" и вложенную в ней подппаку     
    folderTree := OpenMyDocTab;  
    folderName := 'папка_'+FOLDER_PREF;
    folderNote := 'папка_r';
    result := 
      CreateFolderFrom (true, 'Мои документы', FOLDER_PREF+'_r') AND
      CreateFolderFrom (true, MY_DOCS_PATH+FOLDER_PREF+'_r',folderName,folderNote);                 
    if NOT result then   
    begin
      for i := 1 to 5 do resArray[i] := false;
      res := false;
      result := false;  
      Raise('Не удалось создать одну из папок, находясь в системе под пользователем ..user1');  
    end;  
    //БЛОК сохранения СПИСКА 
    //Сохраняем под пользователем user2  в папке "..r" список    
    if resArray[2] then
    begin
      resArray[2] := OpenObjectFromFolder(LIST_MAIN, OpenMenuTab);  
      if resArray[2] then
      begin
        listArray := GetElementsFromTree(OpenInList('СПИСОК ДОКУМЕНТОВ'));  
        listName := 'список_'+FOLDER_PREF;
        listNote := 'Note_r'; 
        resArray[2] := SaveToFoldersExt(MY_DOCS_PATH+FOLDER_PREF+'_r',listName,listNote,'Сохранить');
        if NOT resArray[2] then Log.Warning('Не удалось сохранить список');                       
      end
      else
        Log.Warning('Не удалось открыть первую ветку рубрикатора');    
    end;  
    //БЛОК сохранения ЗАКЛАДКИ  
    if resArray[3] then
    begin
      resArray[3] := OpenDocByNumber(10003000);
      if resArray[3] then
      begin
        obj := OpenInDocument('ТЕКСТ');       
        obj.SetFocus;
        Sys.Keys('^[Home]');
        Delay(Options.Run.Timeout div 10);   
        bookmarkName := CopyToClipboard(obj,'STRING','Trim := true')+FOLDER_PREF;
        bookmarkNote := 'Note_r'; 

				copy_attempts := 0;
		    while (bookmarkName = FOLDER_PREF) and (copy_attempts < MAX_COPY_ATTEMPTS) do
        begin
					Inc(copy_attempts);
          Sys.Keys('[Down]');
          bookmarkName := CopyToClipboard(document,'STRING','Trim := true')+FOLDER_PREF;    
        end;        
        resArray[3] := SaveToFoldersExt(MY_DOCS_PATH+FOLDER_PREF+'_r',bookmarkName,BookmarkNote,'Сохранить');
        if NOT resArray[3] then Log.Warning('Не удалось сохранить закладку');                       
      end
      else
        Log.Warning('Не удалось открыть документ по Alt+N'); 
    end;  
    //БЛОК сохранения ЗАПРОСА  
    if resArray[4] then
    begin
      resArray[4] := GoToPPR;
      if resArray[4] then
      begin        
        queryName := 'запрос_'+FOLDER_PREF;
        queryNote := 'Note_r'; 
        resArray[4] := SaveToFoldersExt(MY_DOCS_PATH+FOLDER_PREF+'_r',queryName,queryNote,'Сохранить');
        if NOT resArray[4] then Log.Warning('Не удалось сохранить запрос');                       
      end
      else
        Log.Warning('Не удалось открыть ППР'); 
    end;
    //БЛОК сохранения ФИЛЬТРА  
    {if resArray[5] then
    begin
      resArray[5] := GoToPPR;
      if resArray[5] then
      begin        
        filterName := 'фильтр_'+FOLDER_PREF;
        filterNote := 'Note_r'; 
        resArray[5] := SaveToFoldersExt(MY_DOCS_PATH+FOLDER_PREF+'_r',filterName,filterNote,'Сохранить');
        if resArray[5] then 
        begin
          obj := OpenMyDocTab;
          resArray[5] := Position_Internal (obj,MY_DOCS_PATH+FOLDER_PREF+'_r\'+filterName);
          if resArray[5] then
          begin
            Sys.Keys('[Apps]');
            if NOT IsMenuItemChecked(obj.QCPopupMenu,'Использовать как фильтр') then      
            result := ClickByPopupMenuItem(obj,'Использовать как фильтр');            
            ClosePopupMenu(obj);
          end
          else
            Log.Warning('Не удалось спозиционироваться на элементе "' + MY_DOCS_PATH+FOLDER_PREF+'_r\'+filterName+'"');          
        end
        else
          Log.Warning('Не удалось сохранить запрос');  
      end
      else
        Log.Warning('Не удалось открыть ППР'); 
    end;}      
    //Устанавливаем папку "..r" на доступ "Только чтение" для пользователю ..user1
    result := RightAccess(MY_DOCS_PATH+FOLDER_PREF+'_r','SET',FOLDER_PREF+'_user1*',RIGHT_READ);                  
    if NOT result then
      Raise('Не удалось установить доступ "Только чтение" для элемента "' + MY_DOCS_PATH+FOLDER_PREF+'_r"');
    //Логинимся пользователем ..user1        
    login := FOLDER_PREF+'_user1';
    RestartF1Shell(count,Options.Run.Timeout div 6,login,pass);       
    //БЛОК Проверки Тесткейсов по HLTC74.10.10.1.1,HLTC74.10.10.1.2,HLTC74.10.10.1.3
    {   HLTC74.10.10.1.1: Пользователь не может изменять содержимое папки (удалять, изменять элементы)
        HLTC74.10.10.1.2: Не может удалять саму папку
        HLTC74.10.10.1.3: Не может изменять свойства папки
    }
    if res then
    begin      
      objPath := 'Общие\'+FOLDER_PREF+'_user2\'+FOLDER_PREF+'_r';      
      res := NOT DeleteObjectFromFolder(objPath);
      if res then
      begin
        folderTree := OpenMyDocTab;
        res := Position_Internal (folderTree,objPath);        
        if res then
        begin        
          res := ClickToolbarButton(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', folderTree),'Свойства','SetToState := pressed');  
          if res then
          begin              
            res :=
              (NOT GetFromFolderForm('ПОЛЕ "ИМЯ"',folderTree).Enabled) AND
              (GetFromFolderForm('ПОЛЕ "ПРИМЕЧАНИЕ"',folderTree).ReadOnly );    
            if res then
            begin
              folderTree.SetFocus;
              Sys.Keys('[Home]'); 
              res := Position_Internal (folderTree,objPath+'\'+folderName);        
              if res then
              begin        
                res := ClickToolbarButton(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', folderTree),'Свойства','SetToState := pressed');  
                if res then
                begin  
                  res :=
                    (NOT GetFromFolderForm('ПОЛЕ "ИМЯ"',folderTree).Enabled) AND
                    (GetFromFolderForm('ПОЛЕ "ПРИМЕЧАНИЕ"',folderTree).ReadOnly ) AND
                    (NOT DeleteObjectFromFolder(objPath+'/'+folderName)) AND   
                    (NOT DeleteObjectFromFolder(objPath+'/'+listName)) AND   
                    (NOT DeleteObjectFromFolder(objPath+'/'+bookMarkName)) AND   
                    (NOT DeleteObjectFromFolder(objPath+'/'+queryName));   
                   // (NOT DeleteObjectFromFolder(objPath+'/'+filterName));
                  if NOT res then
                    Log.Error('Есть возможность изменять свойства элемента папки или'+                       
                      'удалился какой либо элемент из этой папки с правами "Только на чтение"'+
                      'при проверки "HLTC74.10.10.1.1: Пользователь не может изменять содержимое папки" ');
                end
                else
                  Log.Warning('Не удалось нажать кнопку "Свойства"');
              end
              else
                Log.Warning('Не удалось спозиционироваться на элементе "'+objPath+'\'+folderName+'"');     
            end
            else            
              Log.Error('Есть возможность изменять свойства папки, при проверки "HLTC74.10.10.1.3: Не может изменять свойства папки"');
          end    
          else
            Log.Warning('Не удалось нажать кнопку "Свойства"');            
        end
        else
          Log.Warning('Не удалось спозиционироваться на элементе "'+objPath+'"');      
      end
      else
        Log.Error('Удалилась папка с правами "Только на чтение" при проверки "HLTC74.10.10.1.2: Не может удалять саму папку"');    
    end;    
    //БЛОК Проверки Папки на "Только на чтение"
    if resArray[1] then
    begin
      objPath := 'Общие\'+FOLDER_PREF+'_user2\'+FOLDER_PREF+'_r\'+folderName;      
      folderTree := OpenMyDocTab;
      resArray[1] := Position_Internal (folderTree,objPath);        
      if resArray[1]then
      begin        
        resArray[1] := ClickToolbarButton(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', folderTree),'Свойства','SetToState := pressed');  
        if resArray[1]then
        begin              
          resArray[1] :=
            (common.GetWindowText(GetFromFolderForm('ПОЛЕ "ИМЯ"',folderTree).Handle) = folderName) AND
            (common.GetWindowText(GetFromFolderForm('ПОЛЕ "ПРИМЕЧАНИЕ"',folderTree).Handle) = folderNote);    
          if NOT resArray[1] then            
            Log.Error('Папка "'+objPath+'"не идентичен папке, сохранёной пользователем "..user2"');
        end    
        else
          Log.Warning('Не удалось нажать кнопку "Свойства"');
          
      end
      else
        Log.Warning('Не удалось спозиционироваться на элементе "'+objPath+'"');      
    end;     
    
    //БЛОК Проверки Списка на "Только на чтение"
    if resArray[2] then
    begin
      objPath := 'Общие\'+FOLDER_PREF+'_user2\'+FOLDER_PREF+'_r\'+listName;
      resArray[2] := OpenObjectFromFolder(objPath, OpenMyDocTab);        
      if resArray[2] then
      begin  
        listArrayTo := GetElementsFromTree(OpenInList('СПИСОК ДОКУМЕНТОВ')); 
        folderTree := OpenMyDocTab;
        resArray[2] := Position_Internal (folderTree,objPath);        
        if resArray[2]then
        begin  
          resArray[2] := ClickToolbarButton(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', folderTree),'Свойства','SetToState := pressed');  
          if resArray[2]then
          begin  
            SortArray(listArray); 
            SortArray(listArrayTo);            
            resArray[2] :=
              (CompareArray(listArrayTo,listArray)) AND
              (common.GetWindowText(GetFromFolderForm('ПОЛЕ "ИМЯ"',folderTree).Handle) = listName) AND
              (common.GetWindowText(GetFromFolderForm('ПОЛЕ "ПРИМЕЧАНИЕ"',folderTree).Handle) = listNote);    
            if NOT resArray[2] then            
              Log.Error('Список "'+objPath+'" не идентичен списку, сохранённому пользователем "..user2"');
          end
          else
            Log.Warning('Не удалось нажать кнопку "Свойства"');
        end
        else
          Log.Warning('Не удалось спозиционироваться на элементе "'+objPath+'"');
      end
      else
        Log.Warning('Не удалось открыть список "'+objPath+'"');               
    end;  
    //БЛОК Проверки Закладки на "Только на чтение"
    if resArray[3] then
    begin
      objPath := 'Общие\'+FOLDER_PREF+'_user2\'+FOLDER_PREF+'_r\'+bookmarkName;
      resArray[3] := OpenObjectFromFolder(objPath, OpenMyDocTab);        
      if resArray[3] then
      begin          
        obj := OpenInDocument('ТЕКСТ');
        obj.SetFocus;
        Delay(Options.Run.Timeout div 10);        
        resArray[3] := (CopyToClipboard(obj,'STRING','Trim := true')+FOLDER_PREF) = bookmarkName;
        if resArray[3] then
        begin                       
          folderTree := OpenMyDocTab;
          resArray[3] := Position_Internal (folderTree,objPath);        
          if resArray[3]then
          begin  
            resArray[3] := ClickToolbarButton(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', folderTree),'Свойства','SetToState := pressed');  
            if resArray[3]then
            begin                          
              resArray[3] :=
                (common.GetWindowText(GetFromFolderForm('ПОЛЕ "ИМЯ"',folderTree).Handle) = bookmarkName) AND
                (common.GetWindowText(GetFromFolderForm('ПОЛЕ "ПРИМЕЧАНИЕ"',folderTree).Handle) = bookmarkNote);    
              if NOT resArray[3] then            
                Log.Error('Закладка "'+objPath+'" не идентична закладке, сохранённой пользователем "..user2"');
            end
            else
              Log.Warning('Не удалось нажать кнопку "Свойства"');
          end
          else
            Log.Warning('Не удалось спозиционироваться на элементе "'+objPath+'"');
        end
        else
          Log.Error('Закладка "'+objPath+'" не идентична закладке, сохранённой пользователем "..user2"');
      end
      else
        Log.Warning('Не удалось открыть закладку "'+objPath+'"');               
    end;                                                          
    //БЛОК Проверки Запроса на "Только на чтение"
    if resArray[4] then
    begin    
      objPath := 'Общие\'+FOLDER_PREF+'_user2\'+FOLDER_PREF+'_r\'+queryName;
      resArray[4] := OpenObjectFromFolder(objPath, OpenMyDocTab);        
      if resArray[2] then      
      begin  
        resArray[4] := IsExists(GetFromPPR('КАРТОЧКА ЗАПРОСА'));
        if resArray[4] then
        begin          
          folderTree := OpenMyDocTab;
          resArray[4] := Position_Internal (folderTree,objPath);        
          if resArray[4]then
          begin  
            resArray[4] := ClickToolbarButton(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', folderTree),'Свойства','SetToState := pressed');  
            if resArray[4]then
            begin                
              resArray[4] :=
                (common.GetWindowText(GetFromFolderForm('ПОЛЕ "ИМЯ"',folderTree).Handle) = queryName) AND
                (common.GetWindowText(GetFromFolderForm('ПОЛЕ "ПРИМЕЧАНИЕ"',folderTree).Handle) = queryNote);    
              if NOT resArray[4] then            
                Log.Error('Запрос "'+objPath+'" не идентичен запросу, сохранённому пользователем "..user2"');
            end
            else
              Log.Warning('Не удалось нажать кнопку "Свойства"');
          end
          else
            Log.Warning('Не удалось спозиционироваться на элементе "'+objPath+'"');
        end
        else
          Log.Warning('Не удалось обнаружить КЗ , созданную пользователем ..user2');
      end
      else
        Log.Warning('Не удалось открыть запрос "'+objPath+'"');               
    end;  
    //БЛОК Проверки Фильтра на "Только на чтение"
    {if resArray[5] then      
    begin   
      objPath := 'Общие\'+FOLDER_PREF+'_user2\'+FOLDER_PREF+'_r\'+filterName;
      resArray[5] := OpenObjectFromFolder(objPath, OpenMyDocTab);        
      if resArray[5] then
      begin  
        resArray[5] := IsExists(GetFromShell('СОХРАНЕНИЕ ФИЛЬТРА'));
        if resArray[5] then
        begin              
          GetFromShell('СОХРАНЕНИЕ ФИЛЬТРА').Close;                                                     
          folderTree := OpenMyDocTab;
          resArray[5] := Position_Internal (folderTree,objPath);        
          if resArray[5]then
          begin  
            resArray[5] := ClickToolbarButton(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', folderTree),'Свойства','SetToState := pressed');  
            if resArray[5]then
            begin                
              resArray[5] :=
                (common.GetWindowText(GetFromFolderForm('ПОЛЕ "ИМЯ"',folderTree).Handle) = filterName) AND
                (common.GetWindowText(GetFromFolderForm('ПОЛЕ "ПРИМЕЧАНИЕ"',folderTree).Handle) = filterNote);    
              if NOT resArray[5] then            
                Log.Error('Фильтр "'+objPath+'" не идентичен фильтру, сохранённому пользователем "..user2"');
            end
            else
              Log.Warning('Не удалось нажать кнопку "Свойства"');
          end
          else
            Log.Warning('Не удалось спозиционироваться на элементе "'+objPath+'"');
        end
        else
          Log.Warning('Не удалось обнаружить окно "Фильтр"');
      end
      else
        Log.Warning('Не удалось открыть фильтр "'+objPath+'"');
                       
    end;}     
    //Логинимся пользователем ..user1        
    login := FOLDER_PREF+'_user2';
    RestartF1Shell(count,Options.Run.Timeout div 6,login,pass);
    //Удаляем все объекты их Моих документов.
    if NOT DeleteAllInMyDoc then
      Log.Warning('Не удалось удалить все объекты из моих документов');
    //Выводим в лог промежуточные результаты     
    if res then 
      Log.Message('Проверка HLTC74.10.10.1.1;HLTC74.10.10.1.2;HLTC74.10.10.1.3 - True') 
    else
       Log.Message('Проверка HLTC74.10.10.1.1;HLTC74.10.10.1.2;HLTC74.10.10.1.3 - False');
    if resArray[1] then 
      Log.Message('Проверка Папок на доступ "Только на чтение"- True') 
    else
       Log.Message('Проверка Папок на доступ "Только на чтение" - False');
    if resArray[2] then  
      Log.Message('Проверка Списков на доступ "Только на чтение" - True') 
    else
       Log.Message('Проверка Списков на доступ "Только на чтение" - False');    
    if resArray[3] then
       Log.Message('Проверка Закладкок на доступ "Только на чтение" - True') 
    else 
      Log.Message('Проверка Закладок на доступ "Только на чтение" - False');    
    if resArray[4] then 
      Log.Message('Проверка Запросов на доступ "Только на чтение" - True') 
    else
       Log.Message('Проверка Запросов на доступ "Только на чтение" - False');    
   // if resArray[5] then 
   //   Log.Message('Проверка Фильтров на доступ "Только на чтение" - True') 
   // else
   //    Log.Message('Проверка Фильтров на доступ "Только на чтение" - False');   
    //Считается общий результат    
    result := res AND resArray[1] AND resArray[2] AND resArray[3] AND resArray[4] AND resArray[5];  
  except
    Log.Message('HLTC74_10_10_1_4_Execute: ' + ExceptionMessage,'',pmNormal, GetLogAttr('EXCEPTION')); 
    result := false;
  CommonExceptionHandler;
  end;
end;


{
HLTC74.11: Перемещение объектов в папках.
Проверить возможность перемещения  мышью (посредством drag-n-drop) элементов, сохраненных в папках:
 
 HLTC74.11.5: списка/закладки/запроса/фильтра в папку другого пользователя, отданную в общий доступ с правами
 чтения (операция запрещена)
 HLTC74.11.6: списка/закладки/запроса/фильтра в папку другого пользователя, отданную в общий доступ с правами
 чтения, в которой элемент этого же типа с таким же именем уже есть (операция запрещена).
}
function  HLTC74_11_2_Execute(var  current_state: OleVariant): OleVariant;  
const
  PREF = '(HLTC74_11_2)';
  DOC_NUM = 10003000;  
var
  obj;
  login, pass, count;
  i, j;
  folderName;
  startPath, endPath;
  elementName;
  folderRoot;
begin
try
  folderRoot := 'Общие\User_1' + PREF;
  //Заходим пользователем User1
  login := 'User_1' + PREF;
  pass  := PREF;
  count := 5;
  RestartF1Shell(count, Options.Run.Timeout div 6, login, pass);
  //
  if NOT ( CreateFolderFrom (true, 'Мои документы', 'emptyRead') AND
           CreateFolderFrom (true, 'Мои документы', 'alreadyExistElementsRead')  )then
    Raise('Не удалось создать папку');
      
  folderName := 'alreadyExistElementsRead';    
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  if NOT SaveToFoldersExt(MY_DOCS_PATH + folderName, 'Закладка' + PREF, '', 'Сохранить') then
    Raise('Не удалось сохранить закладку');
  if NOT OpenObjectFromFolder(LIST_MAIN, OpenMenuTab) then Raise('Не удалось открыть список по первой ветки');
  obj := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(obj) then Raise('Не удалось открыть список документов');
  if NOT SaveToFoldersExt(MY_DOCS_PATH + folderName, 'Список' + PREF, '', 'Сохранить') then 
    Raise('Не удалось сохранить список');
  if NOT GoToPPR then Raise('Не удалось перейти в ППР');
  Sys.Keys('Конституция');
  if NOT SaveToFoldersExt(MY_DOCS_PATH + folderName, 'Запрос' + PREF, '', 'Сохранить') then 
    Raise('Не удалось сохранить запрос');
  if NOT SaveToFoldersExt(MY_DOCS_PATH + folderName, 'Фильтр' + PREF, '', 'Сохранить') then 
  Raise('Не удалось сохранить фильтр');
  obj := OpenMyDocTab;
  if NOT Position_Internal(obj, MY_DOCS_PATH + folderName + '\Фильтр' + PREF, '\', true, 'isPressHome:=true') then
    Raise('Не удалось спозиционироваться на элементе в Моих документах');  
  Sys.Keys('[Apps]');       
  if NOT ClickByPopupMenuItem(obj,'Добавить фильтр из сохраненных запросов') then Raise('Не удалось вызвать контекстную операцию "Добавить фильтр из сохраненных запросов"');
  GetFromShell('КНОПКА "ОК" ДИАЛОГА СОХРАНЕНИЯ ФИЛЬТРА').Click;                
    
  
  //Устанавливаем права доступа для папок
  if NOT ( RightAccess(MY_DOCS_PATH + 'emptyRead',                 'SET', 'Все', RIGHT_READ) AND
           RightAccess(MY_DOCS_PATH + 'alreadyExistElementsRead',  'SET', 'Все', RIGHT_READ)   ) then         
    Raise ('Не удалось установить права доступа для одной из папок');
  //Заходим пользователем User2..  
  login := 'User_2' + PREF;
  count := 5;
  RestartF1Shell(count, Options.Run.Timeout div 6, login, pass);
  //
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  if NOT SaveToFoldersExt('Мои документы', 'Закладка' + PREF, '', 'Сохранить') then
    Raise('Не удалось сохранить закладку');
  if NOT OpenObjectFromFolder(LIST_MAIN, OpenMenuTab) then Raise('Не удалось открыть список по первой ветки');
  obj := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(obj) then Raise('Не удалось открыть список документов');
  if NOT SaveToFoldersExt('Мои документы', 'Список' + PREF, '', 'Сохранить') then 
    Raise('Не удалось сохранить список');
  if NOT GoToPPR then Raise('Не удалось перейти в ППР');
  Sys.Keys('Конституция');
  if NOT SaveToFoldersExt('Мои документы', 'Запрос' + PREF, '', 'Сохранить') then 
    Raise('Не удалось сохранить запрос');
  if NOT SaveToFoldersExt('Мои документы', 'Фильтр' + PREF, '', 'Сохранить') then 
  Raise('Не удалось сохранить фильтр');
  obj := OpenMyDocTab;
  if NOT Position_Internal(obj, MY_DOCS_PATH + 'Фильтр' + PREF, '\', true, 'isPressHome:=true') then
    Raise('Не удалось спозиционироваться на элементе в Моих документах');  
  Sys.Keys('[Apps]');
  if NOT ClickByPopupMenuItem(obj,'Добавить фильтр из сохраненных запросов') then Raise('Не удалось вызвать контекстную операцию "Добавить фильтр из сохраненных запросов"');
  GetFromShell('КНОПКА "ОК" ДИАЛОГА СОХРАНЕНИЯ ФИЛЬТРА').Click;
  
  //HLTC74.11.5.Пробуем, что нельзя перетянуть в пустую папку с правами Read
  //HLTC74.11.6.Пробуем, что нельзя перетянуть в папку с правами Read( в папке уже существуют элементы)
  for j := 1 to 2 do
  begin
    case j of 
        1: endPath := folderRoot + '\emptyRead';
        2: endPath := folderRoot + '\alreadyExistElementsRead';        
    end;//case
    for i := 1 to 4 do
    begin
      case i of 
        1: startPath := MY_DOCS_PATH + 'Закладка' + PREF;
        2: startPath := MY_DOCS_PATH + 'Список'   + PREF;
        3: startPath := MY_DOCS_PATH + 'Запрос'   + PREF;
        4: startPath := MY_DOCS_PATH + 'Фильтр'   + PREF;
      end;//case
      if DragElementInFolder(startPath, endPath) then
      begin
        Log.Error('Удалось перетащить "' + startPath + '" в "' + endPath + '"');
        Raise;
      end;
    end;//for i
  end;//for j  
   
  login := 'User_1' + PREF;
  count := 5;
  RestartF1Shell(count, Options.Run.Timeout div 6, login, pass);
  //Проверяем, что в папка alredyExist.. существуют элементы
  obj := OpenMyDocTab;  
  folderName := 'alreadyExistElementsRead';      
  for j := 1 to 4 do
  begin
    case j of
      1: elementName := MY_DOCS_PATH + folderName + '\Закладка' + PREF;
      2: elementName := MY_DOCS_PATH + folderName + '\Список'   + PREF;
      3: elementName := MY_DOCS_PATH + folderName + '\Запрос'   + PREF;
      4: elementName := MY_DOCS_PATH + folderName + '\Фильтр'   + PREF;
    end;  
    if NOT Position_Internal(obj, elementName, '\', true, 'isPressHome:=true') then
    begin
      Log.Error('Исчес элемент ' + elementName);
      Raise;
    end;  
  end;//for j
  //Проверяем, что папкв empty пустая
  folderName := 'emptyRead';  
  for j := 1 to 4 do
    begin
      case j of
        1: elementName := MY_DOCS_PATH + folderName + '\Закладка' + PREF;
        2: elementName := MY_DOCS_PATH + folderName + '\Список'   + PREF;
        3: elementName := MY_DOCS_PATH + folderName + '\Запрос'   + PREF;
        4: elementName := MY_DOCS_PATH + folderName + '\Фильтр'   + PREF;
      end;  
      if Position_Internal(obj, elementName, '\', true, 'isPressHome:=true') then
      begin
        Log.Error('В расшаренной на чтение папки Появился элемент ' + elementName);
        Raise;
      end;  
    end;//for j  
    
  if NOT DeleteAllInMyDoc then
    Log.Warning('Не удалось удалить все объекты из моих документов');
  result := true;
  GoToMainMenu;
  current_state := ST_MAIN_MENU;
except
  Log.Message('HLTC74_11_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler; 
end;  
end;

{
HLTC74.11: Перемещение объектов в папках.
Проверить возможность перемещения  мышью (посредством drag-n-drop) элементов, сохраненных в папках:
 HLTC74.11.3: списка/закладки/запроса/фильтра из одной папки в другую, в которой элемент этого же типа
 с таким же именем уже есть (операция запрещена).
}
function HLTC74_11_3_Execute(var  current_state: OleVariant): OleVariant;  
const
  PREF = '(HLTC74_11_3)';
  DOC_NUM = 10003000;  
var
  obj;
  i;
  folderName;
  startPath, endPath;
begin
try
 
  if NOT ( CreateFolderFrom (true, 'Мои документы', 'startFolder') AND
           CreateFolderFrom (true, 'Мои документы', 'alreadyExistElements') ) then
    Raise('Не удалось создать папку');
  for i := 1 to 2 do    
  begin
    case i of       
      1: folderName := 'startFolder';
      2: folderName := 'alreadyExistElements';
    end;//case  
  if NOT OpenDocByNumber(DOC_NUM) then Raise('Не удалось открыть документ по Alt+N');
  if NOT SaveToFoldersExt(MY_DOCS_PATH + folderName, 'Закладка' + PREF, '', 'Сохранить') then
    Raise('Не удалось сохранить закладку');
  if NOT OpenObjectFromFolder(LIST_MAIN, OpenMenuTab) then Raise('Не удалось открыть список по первой ветки');
  obj := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(obj) then Raise('Не удалось открыть список документов');
  if NOT SaveToFoldersExt(MY_DOCS_PATH + folderName, 'Список' + PREF, '', 'Сохранить') then 
    Raise('Не удалось сохранить список');
  if NOT GoToPPR then Raise('Не удалось перейти в ППР');
  Sys.Keys('Конституция');
  if NOT SaveToFoldersExt(MY_DOCS_PATH + folderName, 'Запрос' + PREF, '', 'Сохранить') then 
    Raise('Не удалось сохранить запрос');    
  end;
  //for i
  //Пробуем, что нельзя перетянуть в папку( в папке уже существуют элементы)
  endPath := MY_DOCS_PATH + 'alreadyExistElements';
  for i := 1 to 4 do
  begin
    case i of 
      1: startPath := MY_DOCS_PATH + 'startFolder\Закладка' + PREF;
      2: startPath := MY_DOCS_PATH + 'startFolder\Список'   + PREF;
      3: startPath := MY_DOCS_PATH + 'startFolder\Запрос'   + PREF;
      4: startPath := MY_DOCS_PATH + 'startFolder\Фильтр'   + PREF;
    end;//case
    if DragElementInFolder(startPath, endPath) then
    begin
      Log.Error('Удалось перетащить "' + startPath + '" в "' + endPath + '"');
      Raise;
    end;
  end;//for i
  if NOT DeleteAllInMyDoc then
    Log.Warning('Не удалось удалить все объекты из моих документов');    
  result := true;
  GoToMainMenu;
  current_state := ST_MAIN_MENU;
  
except
  Log.Message('HLTC74_11_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  DeleteAllInMyDoc;
  result := false;
  CommonExceptionHandler; 
end;  
end;

{ HLTC74.12: Быстрый поиск в папках
    HLTC74.12.1: Проверить, что при вводе букв система позиционируется на сохраненном 
     элементе, имя которого начинается с введенных символов, при этом система в виде
      всплывающей подсказки показывает набранную последовательность букв.
  }
function  HLTC74_12_1_Execute(var  current_state: OleVariant): OleVariant;    
const
  FOLDER_PREF = 'HLTC74_12_1';
var
  folderTree;
  hint;
begin
  try
    folderTree := OpenMyDocTab;      
    if NOT CreateFolderFrom (true, 'Мои документы', 'AAAA_'+FOLDER_PREF) then
      Raise('Не удалось создать папку');     
    folderTree.SetFocus;
    Sys.Keys('[Home]AA');  
    Delay(Options.Run.Timeout div 30);
    
    hint := GetFromShell('ОКНО ХИНТА');            
    if NOT IsExists(hint) then
      Raise ('Не удалось обнаружить ОКНО ХИНТА');
         
    result := hint.wndCaption = 'AA';          
    if NOT result then
    begin
      Log.Error('Хинт не совпадает с введённой последовательностью букв');
      Raise;
    end;
    result := common.GetWindowText(folderTree.Handle) = ('AAAA_'+FOLDER_PREF);   
    if NOT result then
      Log.Error('При вводе букв система автоматически не спозиционировалась на нужном элементе');
            
    if NOT DeleteAllInMyDoc then                    
       Log.Warning('Не удалось удалить все объекты из моих документов');   
    GoToMainMenu;
    current_state := ST_MAIN_MENU;   
  except
    Log.Message('HLTC74_12_1_Execute: ' + ExceptionMessage,'',pmNormal, GetLogAttr('EXCEPTION')); 
    result := false;
  CommonExceptionHandler;
  end;  
end;

{ HLTC74.12: Быстрый поиск в папках
    HLTC74.12.2: Проверить, что быстрый поиск осуществляется только среди элементов,
     показываемых на экране (не будут находиться элементы, расположенные в свернутых папках)
  }
function  HLTC74_12_2_Execute(var  current_state: OleVariant): OleVariant;    
const
  FOLDER_PREF = 'HLTC74_12_2';
var
  folderTree;                       
begin 
  try    
    folderTree := OpenMyDocTab;      
    if NOT CreateFolderFrom (true, 'Мои документы', 'AAAA_'+FOLDER_PREF) then           
      Raise('Не удалось создать папку');     
    folderTree.SetFocus;
    Sys.Keys('[Home]'+KEY_EXPAND_FOLDER+'');   
    Sys.Keys('AA');
    result := common.GetWindowText(folderTree.Handle) <> ('AAAA_'+FOLDER_PREF);
    if NOT result then    
      Log.Error('Быстрый поиск сработал на элементе в свёрнутой папке');
    if NOT DeleteAllInMyDoc then                    
      Log.Warning('Не удалось удалить все объекты из моих документов');   
    GoToMainMenu;
    current_state := ST_MAIN_MENU;   
  except
    Log.Message('HLTC74_12_2_Execute: ' + ExceptionMessage,'',pmNormal, GetLogAttr('EXCEPTION')); 
    result := false;
  CommonExceptionHandler;
  end;  
end;

{ HLTC74.12: Быстрый поиск в папках
    HLTC74.12.3: Проверить, что если текущим элементом в списке сохраненных является 
    элемент из середины дерева, а  быстрым поиском вводят последовательность символов, 
    которая есть только в именах элементов, расположенных выше по дереву, система спозиционируется на таких элементах.
  }
function  HLTC74_12_3_Execute(var  current_state: OleVariant): OleVariant;    
const
  FOLDER_PREF = 'HLTC74_12_3';
var
  folderTree;                       
begin 
  try    
    folderTree := OpenMyDocTab;
          
    if NOT CreateFolderFrom (true, 'Мои документы', 'AAAA_'+FOLDER_PREF) then
      Raise('Не удалось создать папку');     
    if NOT Position_Internal(folderTree,'Мои комментарии\Документы с комментариями пользователя') then
      Raise('Не удалось спозиционироваться на элементе');
      
    folderTree.SetFocus;  
    Sys.Keys('AAAA');
    result := common.GetWindowText(folderTree.Handle) = ('AAAA_'+FOLDER_PREF);
    if NOT result then
      Log.Error('Система не спозиционировалась на элементе с введённой последовательностью символов');    
    if NOT DeleteAllInMyDoc then                    
      Log.Warning('Не удалось удалить все объекты из моих документов');   
    GoToMainMenu;
    current_state := ST_MAIN_MENU;   
  except
    Log.Message('HLTC74_12_3_Execute: ' + ExceptionMessage,'',pmNormal, GetLogAttr('EXCEPTION')); 
    result := false;
  CommonExceptionHandler;
  end;  
end;
{ HLTC74.12: Быстрый поиск в папках
    HLTC74.12.4: Проверить, что быстрый поиск прекращается как только введена буква, 
    составляющая с ранее введенными буквами последовательность, на которую не начинается
     название ни одного из сохраненных элементов.
  }
function  HLTC74_12_4_Execute(var  current_state: OleVariant): OleVariant;    
const
  FOLDER_PREF = 'HLTC74_12_4';
var
  folderTree;                       
begin 
  try    
    folderTree := OpenMyDocTab;      
    if NOT CreateFolderFrom (true, 'Мои документы', 'AAAA_'+FOLDER_PREF) then
      Raise('Не удалось создать папку');     
    folderTree.SetFocus;  
    Sys.Keys('AA1');
    result := NOT IsExists(GetFromShell('ОКНО ХИНТА'));
    if NOT result then
      Log.Error('Быстрый поиск не прекратился(хинт не исчез) при вводе несуществующей последовательности букв');    
    if NOT DeleteAllInMyDoc then                    
      Log.Warning('Не удалось удалить все объекты из моих документов');   
    GoToMainMenu;
    current_state := ST_MAIN_MENU;   
  except
    Log.Message('HLTC74_12_4_Execute: ' + ExceptionMessage,'',pmNormal, GetLogAttr('EXCEPTION')); 
    result := false;
  CommonExceptionHandler;
  end;  
end;

{ HLTC74.12: Быстрый поиск в папках
    HLTC74.12.5: Проверить, что быстрый поиск завершается, если перевести фокус 
    мыши куда-либо или если ввести на клавиатуре любую клавишу, кроме цифр и букв, 
    а также иных действий, отличных от ввода символов для быстрого поиска. При этом 
    следующий быстрый поиск начинается с пустого контекста и хинт, его отображающий, исчезает из видимости.
  }
function  HLTC74_12_5_Execute(var  current_state: OleVariant): OleVariant;    
const
  FOLDER_PREF = 'HLTC74_12_5';
var
  folderTree;   
  hint;            
  str;        
begin 
  try    
    folderTree := OpenMyDocTab;      
    if NOT CreateFolderFrom (true, 'Мои документы', 'AAAA_'+FOLDER_PREF) then
      Raise('Не удалось создать папку');        
    folderTree.SetFocus;  
    Sys.Keys('AA[Down]');   
    hint := GetFromShell('ОКНО ХИНТА');
    if IsExists(hint) AND hint.Visible then
      Raise('Быстрый поиск не прекратился(хинт не исчез) при вводе несуществующей последовательности букв');   
    folderTree.SetFocus;  
    Sys.Keys('AA');
    Delay(Options.Run.TimeOut div 60);
    hint := GetFromShell('ОКНО ХИНТА'); 
    if NOT IsExists(hint) then
      Raise ('Не удалось обнаружить хинт');   
    str := hint.wndCaption;
    if str = '' then Raise('Хинт не считался');
    result := str = 'AA';
    if NOT result then
      Log.Error('Хинт не совпадает с введённой последовательностью букв', str);      
    if NOT ClickToolbarButton(GetFromFolderForm('ТУЛБАР "МОИ ДОКУМЕНТЫ"', folderTree),'Свойства','SetToState := released') then
      Log.Warning('Не удалось отжать кнопку свойства');  
    if NOT DeleteAllInMyDoc then                    
      Log.Warning('Не удалось удалить все объекты из моих документов');   
    GoToMainMenu;
    current_state := ST_MAIN_MENU;   
  except
    Log.Message('HLTC74_12_5_Execute: ' + ExceptionMessage,'',pmNormal, GetLogAttr('EXCEPTION')); 
    result := false;
    CommonExceptionHandler;
  end;  
end;

{
HLTC74.13: Экспорт/импорт в xml
  HLTC74.13.1: Экспорт
    HLTC74.13.1.1: Операция "Экспорт информации из папки" доступна только на папке "Мои документы" или любой её подпапке
}
function HLTC74_13_1_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  PREF = 'HLTC74_13_1_1';
var
  myDocWnd;
  operation;
  i;
  folderName;
  path;
begin
try
  operation := 'Экспорт информации из папки*'; 
  myDocWnd := OpenMyDocTab;
  if NOT IsExists(myDocWnd) then Raise('Не удалось получить вкладку МОИ ДОКУМЕНТЫ');
  //Очищаем папку Мои документы
  if NOT DeleteAllInMyDoc then Raise('Не удалось удалить все объекты из моих документов');  
  if NOT Position_Internal(myDocWnd, 'Мои документы', '\', true ,'IsPressHome:=true') then 
    Raise('Не удалось споциционироваться на вкладке МОИ ДОКУМЕНТЫ на "Мои документы"');
  PressKeyWithCheck(['[Apps]']);
  if IsPopupMenuItemExists(myDocWnd, operation, true) then
  begin
    Log.Error('Для пустой папки "Мои документы" существует операция "Экспорт информации из папки"');
    Raise('Для пустой папки "Мои документы" существует операция "Экспорт информации из папки"');
  end;
  //Создаём в Моих документах папку и проверяем, что на ней нет операции "Экспорт..."
  if NOT CreateFolderFrom (true, 'Мои документы', PREF, PREF) then
    Raise('Не удалось создать папку в моих документах');
  if NOT Position_Internal(myDocWnd, MY_DOCS_PATH + PREF, '\', true ,'IsPressHome:=true') then 
    Raise('Не удалось споциционироваться на вкладке МОИ ДОКУМЕНТЫ на "' + MY_DOCS_PATH + PREF + '"');
  PressKeyWithCheck(['[Apps]']);    
  if IsPopupMenuItemExists(myDocWnd, operation, true) then
  begin
    Log.Error('Для пустой папки "' + MY_DOCS_PATH + PREF + '" существует операция "Экспорт информации из папки"');
    Raise('Для пустой папки "' + MY_DOCS_PATH + PREF + '" существует операция "Экспорт информации из папки"');
  end;
  //Проверяем, что теперь на непустой папке "Мои документы" появилась контекстная операция "Экспорт..."  
  if NOT Position_Internal(myDocWnd, 'Мои документы', '\', true ,'IsPressHome:=true') then 
    Raise('Не удалось споциционироваться на вкладке МОИ ДОКУМЕНТЫ на "Мои документы"');
  PressKeyWithCheck(['[Apps]']);    
  if NOT IsPopupMenuItemExists(myDocWnd, operation, true) then
  begin
    Log.Error('Для не пустой папки "Мои документы" НЕ существует операция "Экспорт информации из папки"');
    Raise('Для пустой папки "Мои документы" НЕ существует операция "Экспорт информации из папки"');
  end;
  //Сохраняем объект в папку, например Закладку 
  if NOT OpenDocByNumber(10003000) then Raise('Не удалось открыть документ по Alt+N');
  if NOT SaveToFoldersExt(MY_DOCS_PATH + PREF, PREF, '', 'Сохранить') then Raise('Не удалось сохранить закладку');
  //Проверяем, что теперь на папке с закладкой появилась операция "Экспорт..."
  if NOT Position_Internal(myDocWnd, MY_DOCS_PATH + PREF, '\', true ,'IsPressHome:=true') then 
    Raise('Не удалось споциционироваться на вкладке МОИ ДОКУМЕНТЫ на "' + MY_DOCS_PATH + PREF + '"');
  PressKeyWithCheck(['[Apps]']);    
  if NOT IsPopupMenuItemExists(myDocWnd, operation, true) then
  begin
    Log.Error('Для не пустой папки "' + MY_DOCS_PATH + PREF + '" НЕ существует операция "Экспорт информации из папки"');
    Raise('Для не пустой папки "' + MY_DOCS_PATH + PREF + '" НЕ существует операция "Экспорт информации из папки"');
  end;
  //Проверяем, что на самой закладке не операции "Экспорт..."
  if NOT Position_Internal(myDocWnd, MY_DOCS_PATH + PREF + '\' + PREF, '\', true ,'IsPressHome:=true') then 
    Raise('Не удалось споциционироваться на вкладке МОИ ДОКУМЕНТЫ на "' + MY_DOCS_PATH + PREF + '\' + PREF + '"');
  PressKeyWithCheck(['[Apps]']);    
  if IsPopupMenuItemExists(myDocWnd, operation, true) then
  begin
    Log.Error('Для объекта "' + MY_DOCS_PATH + PREF + '\' + PREF + '" существует операция "Экспорт информации из папки"');
    Raise('Для объекта "' + MY_DOCS_PATH + PREF + '\' + PREF + '" существует операция "Экспорт информации из папки"');
  end;
  //Проверяем, что на группе папок на вкладке "мои документы" нет операции "Экспорт информации из папки"
  for i := 1 to 4 do
  begin
    case i of
      1:  folderName := 'Журнал работы';
      2:  folderName := 'Общие';
      3:  folderName := 'Мои комментарии';
      4:  folderName := 'Мои консультации';
    end;//case
      
    if NOT Position_Internal(myDocWnd, folderName, '\', true ,'IsPressHome:=true') then 
      Raise('Не удалось споциционироваться на вкладке МОИ ДОКУМЕНТЫ на "' + folderName + '"');      
    PressKeyWithCheck(['[Apps]']);    
    if IsPopupMenuItemExists(myDocWnd, operation, true) then
    begin
      Log.Error('Для папки "' + folderName + '" существует операция "Экспорт информации из папки"');
      Raise('Для папки "' + folderName + '" существует операция "Экспорт информации из папки"');
    end;  
  end;//for
  //Создаём в моих документах древовидную структуру папок, и проверяем, что на не пустых папках есть операцмя "Экспорт"
  //а на последней не пустой папке - нет соответствующей операции  
  path := 'Мои документы';
  for i := 1 to 5 do
  begin    
    if NOT CreateFolderFrom (true, path, IntToStr(i), '') then
      Raise('Не удалось создать папку в моих документах');
    path := path + '\' + IntToStr(i);     
  end;//for
  path := 'Мои документы';
  for i := 1 to 5 do
  begin
    path := path + '\' + IntToStr(i); 
    if NOT Position_Internal(myDocWnd, path, '\', true ,'IsPressHome:=true') then 
      Raise('Не удалось споциционироваться на вкладке МОИ ДОКУМЕНТЫ на "' + path + '"');
    PressKeyWithCheck(['[Apps]']);
    if i <> 5 then
    begin    
      if NOT IsPopupMenuItemExists(myDocWnd, operation, true) then
      begin
        Log.Error('Для не пустой папки "' + path + '" не существует операция "Экспорт информации из папки"');
        Raise('Для не пустой папки "' + path + '" не существует операция "Экспорт информации из папки"');
      end;
    end
    else//i=5
      if IsPopupMenuItemExists(myDocWnd, operation, true) then
      begin
        Log.Error('Для пустой папки "' + path + '" существует операция "Экспорт информации из папки"');
        Raise('Для пустой папки "' + path + '" существует операция "Экспорт информации из папки"');
      end
  end;
  if NOT DeleteAllInMyDoc then Log.Warning('Не удалось удалить все объекты из моих документов');
  result := true;
except
  Log.Message( 'HLTC74_13_1_1_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler; 
end;
end; 

{
HLTC74.13: Экспорт/импорт в xml
  HLTC74.13.1.2: Проверить, что экспортируются закладки, списки, запросы и структура папок. 
  При этом сама папка, на которой вызвали операцию, не экспортируется.
  HLTC74.13.1.3: Должна быть возможность изменить путь к экспортируемому файлу и его имя. Имя по умолчанию - <Содержимое папки <имя папки>.xml>
  HLTC74.13.2.2: При вызове операции импорта появляется диалог для выбора xml-файла с настройками  
  HLTC74.13.2.3: Для разных пользователей проверить, что импортируются закладки, списки, 
  запросы и структура папок, как в папку <мои документы>, так и в другую пустую папку.  
}
function HLTC74_13_1_2_Execute (var  CurrentState: OleVariant): OleVariant;
const
  PREF = 'HLTC74_13_1_2';
var
  myDocWnd;
  operation;
  i;  
  path;
  cardData;
  listWnd;
  listArray;
  context;
  cardWnd;
  fileName;
begin
try
  operation := 'Экспорт информации из папки*';
  fileName :=  'c:\' + PREF + '.xml';      
  myDocWnd := OpenMyDocTab;
  if NOT IsExists(myDocWnd) then Raise('Не удалось получить вкладку МОИ ДОКУМЕНТЫ');
  //Очищаем папку Мои документы
  if NOT DeleteAllInMyDoc then Raise('Не удалось удалить все объекты из моих документов'); 
  //Создаём в Моих документах папку
  if NOT CreateFolderFrom (true, 'Мои документы', PREF, PREF) then
    Raise('Не удалось создать папку в моих документах'); 
  //Сохраняем объекты(спсики, закладки, запросы) в папку
  //Сохраняем закладку 
  if NOT OpenDocByNumber(10003000) then Raise('Не удалось открыть документ по Alt+N');
  context := 'День всенародного голосования';
  if NOT ClickOnContext(GetFromEditor('ТЕКСТ ДОКУМЕНТА'), context) then Raise('Не удалось кликнуть по искомому контексту!');
  if NOT SaveToFoldersExt(MY_DOCS_PATH + PREF, 'bookmark' + PREF, '', 'Сохранить') then Raise('Не удалось сохранить закладку');
  //Сохраняем список
  cardData :=
    [
    	CARD_PPR, 
      ([
        ([ FD_WORDS_IN_CAPTION,   ([ 'Конституция Чеченской']) ]),        
        ([ FD_INOPERATIVE_EDITION,([ 'Да']) ])
      ])
    ];    
  SearchInPPR(cardData);  
  listWnd := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(listWnd) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');
  listArray := GetElementsFromTree(listWnd);
  if NOT SaveToFoldersExt(MY_DOCS_PATH + PREF, 'list' + PREF, '') then Raise ('Не удалось сохранить список');  
  //Сохраняем запрос
  cardWnd := GoToPPR('', true);
  if NOT IsExists(cardWnd) then Raise('Не удалось открыть КЗ ППР!');
  if NOT FillQueryCard(cardWnd, cardData) then Raise('Не удалось заполнить КЗ ППР!');
  if NOT SaveToFoldersExt(MY_DOCS_PATH + PREF, 'query' + PREF, '') then Raise ('Не удалось сохранить запрос');  
  //Создаём в папке древовидную структуру папок    
  path := MY_DOCS_PATH + PREF;
  for i := 1 to 2 do
  begin
    if NOT CreateFolderFrom (true, path, IntToStr(i), '') then
      Raise('Не удалось создать папку в моих документах');
    path := path + '\' + IntToStr(i);
  end;//for      
  //Выполняем экспорт
  if Utilities.FileExists(fileName) then
    if NOT Utilities.DeleteFile(fileName) then Raise('Не удалось  удалить файл: ' + fileName);
  if NOT ExportObjectsFromFolder(MY_DOCS_PATH + PREF, fileName) then
    Raise('Не удалось выполнить экспорт Информации из Папки!');    
   //Очищаем содержимое Моих документов
   if NOT DeleteAllInMyDoc then Raise('Не удалось удалить все объекты из моих документов');  
  //Выполняем импорт в Мои документы
  if NOT ImportObjectsFromFolder('Мои документы', fileName) then 
    Raise('Не удалось выполнить импорт Информации в Папку Мои документы!');
  //Выполняем импорт в другую пустую папку
  if NOT CreateFolderFrom (true, 'Мои документы', PREF, '') then
    Raise('Не удалось создать папку в моих документах!');
  if NOT ImportObjectsFromFolder(MY_DOCS_PATH + PREF, fileName) then 
    Raise('Не удалось выполнить импорт Информации в пустую Папку!');  
  //Проверяем, что все объекты проимпортировались корректно
  for i := 1 to 2 do
  begin
    case i of
      1: path := 'Мои документы';
      2: path := MY_DOCS_PATH + PREF;  
    end;    
    if NOT OpenObjectFromFolder(path + '\list' + PREF, myDocWnd) then//Проверяем список 
      Raise('Не удалось открыть проимпортированный список : ' + path + '\list' + PREF);
    if NOT CompareArray(GetElementsFromTree(OpenInList('СПИСОК ДОКУМЕНТОВ')),listArray) then
      Raise('После импорта список не эталонный!');
    if NOT OpenObjectFromFolder(path + '\bookmark' + PREF, myDocWnd) then//Проверяем закладку 
      Raise('Не удалось открыть проимпортиррованную закладку : ' + path + '\bookmark' + PREF);    
    if NOT StringCompare(context + '*', CopyToClipBoard(GetFromEditor('ТЕКСТ ДОКУМЕНТА'), 'STRING', 'Trim:=true')) then
      Log.Warning('После импорта позиция закладки не эталонна!');//Пока есть такая ошибка на оболочке, поэтому просто сообщаел варнинг
    if NOT OpenObjectFromFolder(path + '\query' + PREF, myDocWnd) then//Проверяем запрос 
      Raise('Не удалось открыть проимпортиррованный запрос : ' + path + '\query' + PREF);
    if NOT CompareQueryCardData(cardData, ExtractQueryCardData(GetFromPPR('КАРТОЧКА ЗАПРОСА'))) then
      Raise('После импорта КЗ ППР не эталонна!');    
    if NOT (Position_Internal(myDocWnd, path + '\1', '\', true, 'IsPressHome:=true') AND //Проверяем папки 
            Position_Internal(myDocWnd, path + '\1\2', '\', true, 'IsPressHome:=true')) then
      Raise('После импорта не удалось обнаружить одну из папок');  
  end;
  //Удаляем всё за собой
  DeleteAllInMyDoc;
  if Utilities.FileExists(fileName) then
    Utilities.DeleteFile(fileName);  
  result := true;
except
  Log.Message( 'HLTC74_13_1_2_Execute: ' + ExceptionMessage , '' , pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  DeleteAllInMyDoc;
  if Utilities.FileExists(fileName) then
    Utilities.DeleteFile(fileName);
  CommonExceptionHandler; 
end;
end; 

{
  HLTC74.13.2.1: Операция "Импорт информации в папку" доступна только на пустой НЕ расшаренной папке для избежания 
  именных конфликтов при импорте.
}
function HLTC74_13_2_1_Execute (var  CurrentState: OleVariant): OleVariant;
const
  PREF = 'HLTC74_13_2_1';
var
  myDocWnd;   
  operation;
begin
try
  operation := 'Импорт информации в папку*';
  if NOT DeleteAllInMyDoc then Log.Warning('Не удалось удалить все объекты из моих документов');
  if NOT CreateFolderFrom (true, 'Мои документы', PREF, PREF) then
    Raise('Не удалось создать папку в моих документах');
  if NOT RightAccess(MY_DOCS_PATH + PREF, 'SET', 'Все', RIGHT_READ) then
    Raise('Не удалось поставить общий доступ к папке!');
  myDocWnd := OpenMyDocTab;   
  if NOT Position_Internal(myDocWnd, MY_DOCS_PATH + PREF, '\', true, 'IsPressHome:=true') then
    Raise('Не удалось спозиционироваться на папку в моих документах!');
  PressKeyWithCheck(['[Apps]']);
  if IsPopupMenuItemExists(myDocWnd, operation, true) then
  begin
    Log.Error('Для расшаренной  папки "' + MY_DOCS_PATH + PREF + '" существует операция "Импорт информации в папку"');
    Raise('Для расшаренной  папки "' + MY_DOCS_PATH + PREF + '" существует операция "Импорт информации в папку"');
  end;
  result := true;
  DeleteAllInMyDoc;       
except
  Log.Message('HLTC74_13_2_1: ' + ExceptionMessage,'',pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  DeleteAllInMyDoc;
  CommonExceptionHandler;
end;
end;


{
HLTC74.14: Backup/Restore данных пользователя
Включение механизма резервного копирования осуществляется с помощью опции -XMLBackupEnable в секции [F1Server Params].
Backup'ы будут складываться в заранее заданный каталог. Путь к этому каталогу указывается с помощью опции 
-XMLBackupPath в секции [F1Server Params].
Для восстановления бэкапа нужно подложить чистые настрйки, запустить сервер, предварительно установив значение
переменной -XMLRestoreBackup в 1. В момент своего старта сервер загрузит сохраненные данные из Backup'ов пользователей
из указанного каталога, после чего установит значение переменной - XMLRestoreBackup в 0. Для ФС версии необходимо 
будет прописать значение опции -XMLRestoreBackup в реестре, так как инишник один общий для всех.
  HLTC74.14.1: Прописать в инишнике все нужные для бэкапа параметры. Создать пользователя. Создать у него папки,
  закладки, списки, запросы, документы на контроле, комментарии, консультации. Выйти. Подложить чистые настройки.
  Зайти. Проверить, что присутствует сам пользователь и у него сохранились все данные.
  
  HLTC74.14.4: Проверить бэкап на локальной версии.
  
!!!Десктоп

}
function HLTC74_14_1_Execute (var  current_state: OleVariant): OleVariant;
const
  PREF = 'HLTC74_14_1';
var
  countOfAttempts;    
  login, pass;
  logMsg;
  listArray;
  cardData;
begin
try
  //Закрываем оболочку
  countOfAttempts := 3;
  CloseF1Shell(countOfAttempts, Options.Run.Timeout div 6);
  //Создаём нового пользователя и логигимся им
  StartF1Shell;
  login := PREF;
  pass := PREF;
  LoginAnyhow(login, pass);  
  //Создаём папки, закладки, запросы, списки, комментарии, документы на контроле, консультации...
  cardData :=
    [
    	CARD_PPR, 
      ([
        ([ FD_WORDS_IN_CAPTION,   ([ 'Конституция']) ]),
        ([ FD_THEME,              (['[ИЛИ]Основы государственно-правового устройства\Основы конституционного строя']) ]),
        ([ FD_INOPERATIVE_EDITION,([ 'Да']) ])
      ])
    ];
    
  if NOT MakeXmlBackup(PREF, cardData, listArray) then 
  begin
    Log.Error('Не удалось корректно создать настройки пользователя');
    Raise('Не удалось корректно создать настройки пользователя');
  end;  
  //Подкладываем чистые настройки, оставляем папочку с бэкапными настройками xmlbackup
  if NOT SetCleanSettings then Raise('Не удалось подкласть чистые настройки');
  //Правим в инишнике XMLRestoreBackup=1  
  if NOT SetValueToGarantINI('F1Server Params', '-XMLRestoreBackup', '1', true ) then
    Raise('Не удалось корректно изменить значение garant.ini');
  //Логинимся нашим пользователем 
  StartF1Shell;        
  LoginAnyhow(login, pass);
  //Проверяем, что параметр в инишнике XMLRestoreBackup сбросился в ноль.  
  if NOT ( GetValueFromGarantINI('F1Server Params', '-XMLRestoreBackup') = 0 ) then
  begin
    Log.Error('параметр XMLRestoreBackup в garant.ini не сбросился в ноль');
    Raise('параметр XMLRestoreBackup в garant.ini не сбросился в ноль');
  end;
  //...и проверяем, что все его настройки сохранились
  if NOT CheckXmlBackup(PREF, cardData, listArray) then
  begin
    Log.Error('Настойки не корректно восстановились из бэкапа');
    Raise('Настойки не корректно восстановились из бэкапа');
  end;
  result := true;
except
  Log.Message('HLTC74_14_1_Execute: ' + ExceptionMessage,'',pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;


{
HLTC74.14: Backup/Restore данных пользователя
Включение механизма резервного копирования осуществляется с помощью опции -XMLBackupEnable в секции [F1Server Params].
Backup'ы будут складываться в заранее заданный каталог. Путь к этому каталогу указывается с помощью опции 
-XMLBackupPath в секции [F1Server Params].
Для восстановления бэкапа нужно подложить чистые настрйки, запустить сервер, предварительно установив значение
переменной -XMLRestoreBackup в 1. В момент своего старта сервер загрузит сохраненные данные из Backup'ов пользователей
из указанного каталога, после чего установит значение переменной - XMLRestoreBackup в 0. Для ФС версии необходимо 
будет прописать значение опции -XMLRestoreBackup в реестре, так как инишник один общий для всех.

  HLTC74.14.2: В инишнике убрать все нужные для бэкапа параметры. Создать пользователя. Выйти. 
  Прописать в инишнике все нужные для бэкапа параметры. Создать у пользователя папки, закладки, списки,
  запросы, документы на контроле, комментарии, консультации. Выйти. Подложить чистые настройки. Зайти.
  Проверить, что присутствует сам пользователь и у него сохранились все данные.
  
!!!КС                              
}

function HLTC74_14_2_Execute (var  current_state: OleVariant): OleVariant;
const
  PREF = 'HLTC74_14_2';
var
  countOfAttempts;
  context;
  cardData, cardDataFromList;
  docWnd, listWnd, myDocWnd, queryWnd;
  login, pass;
  logMsg, str, xmlPath;
  listArray;
begin
try
  //Закрываем оболочку
  countOfAttempts := 3;
  if NOT StopF1Server then Raise('Не удалось остановить сервер');
  CloseF1Shell(countOfAttempts, Options.Run.Timeout div 6);
  //Убираем из инишника необходимые параметры и чистим xmlBackup
  if NOT SetValueToGarantINI('F1Server Params', '-XMLBackupEnable', '0', true ) then
    Raise('Не удалось корректно изменить значение параметра "-XMLBackupEnable" в файле garant.ini');    
  if NOT SetValueToGarantINI('F1Server Params', '-XMLRestoreBackup', '0', true ) then
    Raise('Не удалось корректно изменить значение параметра "-XMLRestoreBackup" в файле garant.ini');
  xmlPath := GetValueFromGarantINI('F1Server Params', '-XMLBackupPath') + '\';   
  if NOT EmptyFolder(xmlPath) then Raise('Не удалось очисть папку : ' + xmlPath);  
  //Создаём нового пользователя и логигимся им
  if NOT StartF1Server then Raise('Не удалось запустить сервер');
  StartF1Shell;
  login := PREF;
  pass := PREF;
  LoginAnyhow(login, pass);
  //Выходим из оболочки  и проверяем, что xmlBackup пуста
  if NOT StopF1Server then Raise('Не удалось остановить сервер');
  countOfAttempts := 3;
  CloseF1Shell(countOfAttempts, Options.Run.Timeout div 6);
  if NOT IsFolderEmpty(xmlPath) then
  begin
    Log.Error('Папка "' + xmlPath + '" не пустая, хотя у нас отключён xmlBackup');
    Raise('Папка "' + xmlPath + '" не пустая, хотя у нас отключён xmlBackup');
  end;
  //Прописываем в инишнике все нужные параметры
  if NOT SetValueToGarantINI('F1Server Params', '-XMLBackupEnable', '1', true ) then
    Raise('Не удалось корректно изменить значение параметра "-XMLBackupEnable" в файле garant.ini');    
  if NOT SetValueToGarantINI('F1Server Params', '-XMLRestoreBackup', '1', true ) then
    Raise('Не удалось корректно изменить значение параметра "-XMLRestoreBackup" в файле garant.ini');
  //Логинимся нашем пользователем
  if NOT StartF1Server then Raise('Не удалось запустить сервер');
  StartF1Shell;  
  LoginAnyhow(login, pass);
  //Создаём папки, закладки, запросы, списки, комментарии, документы на контроле, консультации...
  cardData :=
    [
    	CARD_PPR, 
      ([
        ([ FD_WORDS_IN_CAPTION,   ([ 'Конституция']) ]),
        ([ FD_THEME,              (['[ИЛИ]Основы государственно-правового устройства\Основы конституционного строя']) ]),
        ([ FD_INOPERATIVE_EDITION,([ 'Да']) ])
      ])
    ];
  if NOT MakeXmlBackup(PREF, cardData, listArray) then 
  begin
    Log.Eror('Не удалось корректно создать настройки пользователя');
    Raise('Не удалось корректно создать настройки пользователя');
  end;
  //Подкладываем чистые настройки, оставляем папочку с бэкапными настройками xmlbackup
  //if NOT SetCleanSettings then Raise('Не удалось подкласть чистые настройки');
  SetCleanSettings;
  //Логинимся нашим пользователем 
  StartF1Shell;        
  LoginAnyhow(login, pass);
  //Проверяем, что параметр в инишнике XMLRestoreBackup сбросился в ноль.  
  if NOT ( GetValueFromGarantINI('F1Server Params', '-XMLRestoreBackup') = 0 ) then
  begin
    Log.Error('параметр XMLRestoreBackup в garant.ini не сбросился в ноль');
    Raise('параметр XMLRestoreBackup в garant.ini не сбросился в ноль');
  end;
  //...и проверяем, что все его настройки сохранились
  if NOT CheckXmlBackup(PREF, cardData, listArray) then 
  begin
    Log.Error('Настойки не корректно восстановились из бэкапа');
    Raise('Настойки не корректно восстановились из бэкапа');
  end;
  result := true;
except
  Log.Message('HLTC74_14_2_Execute: ' + ExceptionMessage,'',pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC74.14.3: В инишнике убрать все нужные для бэкапа параметры. Зайти админом. Изменить права на работу с консультациями
  у пользователей. Выйти. Прописать в инишнике все нужные для бэкапа параметры. Зайти и выйти админом. Проверить, что
  в момент выхода администратора выливается список пользователей(users.xml) и права для каждого пользователя
  (..\security.xml). Подложить чистые настройки. Зайти и проверить, что все корректно восстановилось. 
}

function HLTC74_14_3_Execute (var  current_state: OleVariant): OleVariant;
const
  PREF = 'HLTC74_14_3';
var
  countOfAttempts;    
  login, pass;
  logMsg;
  listArray;
  cardData;
  paramList;
  treeWnd;
  xmlPath;
  CheckBox, toolBar;
  
  section, root, path, regExp;
begin
try
  //Закрываем оболочку
  countOfAttempts := 3;  
  CloseF1Shell(countOfAttempts, Options.Run.Timeout div 6);
  //Убираем из инишника необходимые параметры и чистим xmlBackup
  if NOT SetValueToGarantINI('F1Server Params', '-XMLBackupEnable', '0', true ) then
    Raise('Не удалось корректно изменить значение параметра "-XMLBackupEnable" в файле garant.ini');    
  if NOT SetValueToGarantINI('F1Server Params', '-XMLRestoreBackup', '0', true ) then
    Raise('Не удалось корректно изменить значение параметра "-XMLRestoreBackup" в файле garant.ini');
    
  if getProductType = PT_SERVER then
    root := HKEY_LOCAL_MACHINE
  else
    root := HKEY_CURRENT_USER;     
  Section := Storages.Registry(F1REGBRANCH, root);  
  path := Section.GetOption(F1REGKEY_CLIENT, '');    
  regExp := HISUtils.RegExpr; 
  regExp.Expression := '(?-g)-XMLBackupPath "(.*\\xmlbackup)"';
  if regExp.Exec(path) then
    xmlPath := regExp.Match[1]
  else      
   Raise('В реестре не удалось считать значение параметра -XMLBackupPath'); 
     
  if NOT EmptyFolder(xmlPath) then Raise('Не удалось очисть папку : ' + xmlPath);  
  //Заходим Админом и создаём там пару пользователей
  StartF1Admin;
  if NOT LoginByAdmin then Raise('Не удалось залогиниться Админом');
  if NOT CreateNewUserInAdmin(ADM_NAME + ':=' +  PREF + ';' +
                              ADM_PWD + ':=pwd' +  PREF + ';' + 
                              ADM_CONFIRM_PWD + ':=pwd' +  PREF + ';' +
                              ADM_USER_FIO + ':=user' +  PREF + ';' +
                              ADM_E_MAIL + ':=' +  PREF + '@garant.ru;' +
                              ADM_CONSULTING_ACCESS + ':=разрешено') then
    Raise('Не удалось создать нового пользователя в Админе');
  //Выходим из оболочки  и проверяем, что xmlBackup пуста
  countOfAttempts := 3;
  CloseF1Admin(countOfAttempts, Options.Run.Timeout div 6);
  if NOT IsFolderEmpty(xmlPath) then
  begin
    Log.Error('Папка "' + xmlPath + '" не пустая, хотя у нас отключён xmlBackup');
    Raise('Папка "' + xmlPath + '" не пустая, хотя у нас отключён xmlBackup');
  end;
  //Прописываем в инишнике все нужные параметры
  if NOT SetValueToGarantINI('F1Server Params', '-XMLBackupEnable', '1', true ) then
    Raise('Не удалось корректно изменить значение параметра "-XMLBackupEnable" в файле garant.ini');    
  if NOT SetValueToGarantINI('F1Server Params', '-XMLRestoreBackup', '1', true ) then
    Raise('Не удалось корректно изменить значение параметра "-XMLRestoreBackup" в файле garant.ini');
  //Логинимся Админом
  StartF1Admin;
  if NOT LoginByAdmin then Raise('Не удалось залогиниться Админом');
  //Меняем права на консалтинг для наших пользователей
  treeWnd := GetFromAdmin('ДЕРЕВО ПОЛЬЗОВАТЕЛЕЙ');
  if NOT IsExists(treeWnd) then Raise('Не удалось получить ДЕРЕВО ПОЛЬЗОВАТЕЛЕЙ');    
  if NOT Position_Internal(treeWnd, 'user' + PREF + ' (' + PREF + ')', '\', true, 'IsPressHome := true') then 
    Raise('Не удалось спозиционироваться на пользователе в дереве пользователей');
  checkBox := GetFromAdmin('ЧЕКБОКС "РАЗРЕШЕНО ИСПОЛЬЗОВАНИЕ УСЛУГИ ПРАВОВОГО КОНСАЛТИНГА"');
  if NOT IsExists(checkBox) then Raise('Не удалось получить ЧЕКБОКС "РАЗРЕШЕНО ИСПОЛЬЗОВАНИЕ УСЛУГИ ПРАВОВОГО КОНСАЛТИНГА"');  
  if NOT checkBox.Checked then 
  begin
    Log.Error('ЧЕКБОКС "РАЗРЕШЕНО ИСПОЛЬЗОВАНИЕ УСЛУГИ ПРАВОВОГО КОНСАЛТИНГА" выключен');
    Raise('ЧЕКБОКС "РАЗРЕШЕНО ИСПОЛЬЗОВАНИЕ УСЛУГИ ПРАВОВОГО КОНСАЛТИНГА" выключен');
  end;
  checkBox.Click;
  if checkBox.Checked then Raise('Не удалось выключить ЧЕКБОКС "РАЗРЕШЕНО ИСПОЛЬЗОВАНИЕ УСЛУГИ ПРАВОВОГО КОНСАЛТИНГА"');
  toolBar := GetFromAdmin('НИЖНИЙ ТУЛБАР');
  if NOT IsExists(toolBar) then Raise('не удалось получить НИЖНИЙ ТУЛБАР');
  if NOT ClickToolbarButton(toolBar, 'Сохранить') then
    Raise('Не удалось кликнуть по кнопке "Сохранить"');
  //Выходим
  countOfAttempts := 3;  
  CloseF1Admin(countOfAttempts, Options.Run.Timeout div 6);
  //Подкладываем чистые настройки, оставляем папочку с бэкапными настройками xmlbackup
  if NOT SetCleanSettings then Raise('Не удалось подкласть чистые настройки');
  //Логинимся Админом
  StartF1Admin; 
  if NOT LoginByAdmin then Raise('Не удалось залогиниться Админом');
  //Проверяем, что параметр в инишнике XMLRestoreBackup сбросился в ноль.  
  if NOT ( GetValueFromGarantINI('F1Server Params', '-XMLRestoreBackup') = 0 ) then
  begin
    Log.Error('параметр XMLRestoreBackup в garant.ini не сбросился в ноль');
    Raise('параметр XMLRestoreBackup в garant.ini не сбросился в ноль');
  end;
  //...и проверяем, что права на консалтинг у наших пользователей сохранились
  
  treeWnd := GetFromAdmin('ДЕРЕВО ПОЛЬЗОВАТЕЛЕЙ');
  if NOT IsExists(treeWnd) then Raise('Не удалось получить ДЕРЕВО ПОЛЬЗОВАТЕЛЕЙ');    
  if NOT Position_Internal(treeWnd, 'user' + PREF + ' (' + PREF + ')', '\', true, 'IsPressHome := true') then 
    Raise('Не удалось спозиционироваться на пользователе в дереве пользователей');    
  if NOT ReadUserDataInAdmin(paramList) then Raise('Не удалось считать данные пользователя');  
  if NOT ( GetParam(paramList, ADM_CONSULTING_ACCESS, '' ) = 'запрещено' ) then
  begin
    Log.Error('Права на консалтинг после заливки бэкапных настроек не эталонные');
    Raise('Права на консалтинг после заливки бэкапных настроек не эталонные');
  end;
      
  result := true;
except
  Log.Message('HLTC74_14_3_Execute: ' + ExceptionMessage,'',pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;


{
  HLTC74.14.8: Проверить, что список пользователей(users.xml) и права для каждого пользователя(..\security.xml) также
  выливаются, если с момента их последнего обновления прошло больше недели. Этот срок также может регулировать
  параметр -XMLBackupDelay, который задает время в сутках, по прошествии которого общая информация считается устаревшей.
  Если установить значение этой опции в 0, то сохранение общей информации будет происходить при выходе из системы
  любого пользователя.
!!!Десктоп  
}

function HLTC74_14_8_Execute (var  current_state: OleVariant): OleVariant;
const
  PREF = 'HLTC74_14_8';
var
  countOfAttempts;
  xmlPath;
  fileArray;
  pathToDesktopSettings;
begin
try
  //Закрываем оболочку
  pathToDesktopSettings := IncludeTrailingBackslash( GetPathToDesktopSettings) + 'settings\xmlbackup';
  countOfAttempts := 3;
  CloseF1Shell(countOfAttempts, Options.Run.Timeout div 6);
  //проверяем, что в garant.ini параметр -XMLBackupDelay по умолчанию равен 7
  
  if NOT ( GetValueFromGarantINI('F1Server Params', '-XMLBackupDelay') = 7 ) then
  begin
    Log.Error('параметр XMLBackupDelay в garant.ini по умолчанию не равен 7');
    Raise('параметр XMLBackupDelay в garant.ini по умолчанию не равен 7');
  end;
  //Очищаем папку xmlBackup
  if NOT EmptyFolder(pathToDesktopSettings) then 
    Raise('Не удалось очисть папку : ' + pathToDesktopSettings);  
  //Логинимся админом, создаём нового пользователя и выходим
  if NOT RestartF1ShellByAdmin then Raise('Не удалось перелогиниться в оболочку Админом');  
  if NOT CreateNewUserInAdmin(ADM_NAME + ':=' +  PREF + ';' + ADM_USER_FIO + ':=user' +  PREF) then
    Raise('Не удалось создать нового пользователя в Админе');
  countOfAttempts := 3;
  CloseF1Admin(countOfAttempts, Options.Run.Timeout div 6);
  //Проверяем, что создались файлы ..\security.xml и users.xml  
  fileArray := GetFileList(pathToDesktopSettings, '*.xml', 0);
  if NOT IsArray(fileArray) then Raise('Не удалось обнаружить файлы *.xml по пути: ' + pathToDesktopSettings);   
  xmlPath := fileArray[VarArrayLowBound(fileArray, 1)];  
  xmlPath := Utilities.ChangeFileExt(xmlPath, '');      
  if NOT Utilities.FileExists(IncludeTrailingBackslash(xmlPath) + 'security.xml') then  
    Raise('Не вылился файл ' + xmlPath + '\security.xml');
  if NOT Utilities.FileExists(IncludeTrailingBackslash(xmlPath) + 'users.xml') then  
    Raise('Не вылился файл ' + xmlPath + '\users.xml'); 
  //Удаляем файлы ..\security.xml и users.xml
  if NOT Utilities.DeleteFile(IncludeTrailingBackslash(xmlPath) + 'security.xml') then 
    Raise('Не удалось удалить файл ' + xmlPath + '\security.xml');
  if NOT Utilities.DeleteFile(IncludeTrailingBackslash(xmlPath) + 'users.xml') then 
    Raise('Не удалось удалить файл ' + xmlPath + '\users.xml');  
  //Заходим и выходим нашим пользователем
  StartF1Shell;
  if NOT LoginExistingUser(PREF, '') then 
    Raise('Не удалось залогиниться пользователем "'+ PREF +'"');
  countOfAttempts := 3;  
  CloseF1Shell(countOfAttempts, Options.Run.Timeout div 6);   
  //Проверяем, что файлы ..\security.xml и users.xml Не появились
  if Utilities.FileExists(IncludeTrailingBackslash(xmlPath) + 'security.xml') then  
    Raise('Файл ' + xmlPath + '\security.xml Вылился при значении параметра XMLBackupDelay=7, хотя не должен был');
  if Utilities.FileExists(IncludeTrailingBackslash(xmlPath) + 'users.xml') then  
    Raise('Файл ' + xmlPath + '\users.xml Вылился при значении параметра XMLBackupDelay=7, хотя не должен был');  
  //Устанавливаем в garant.ini параметр -XMLBackupDelay равный 0
  if NOT SetValueToGarantINI('F1Server Params', '-XMLBackupDelay', '0', true ) then
    Raise('Не удалось корректно изменить значение параметра "-XMLBackupDelay" в файле garant.ini');
  //Заходим и выходим нашим пользователем
  StartF1Shell;
  if NOT LoginExistingUser(PREF, '') then 
    Raise('Не удалось залогиниться пользователем "'+ PREF +'"');
  countOfAttempts := 3;  
  CloseF1Shell(countOfAttempts, Options.Run.Timeout div 6);  
  //Проверяем, что файлы ..\security.xml и users.xml появились
  if NOT Utilities.FileExists(IncludeTrailingBackslash(xmlPath) + 'security.xml') then
  begin
    Log.Error('Файл ' + xmlPath + '\security.xml не вылился при значении параметра XMLBackupDelay=0');
    Raise('Файл ' + xmlPath + '\security.xml не вылился при значении параметра XMLBackupDelay=0');
  end;  
  if NOT Utilities.FileExists(IncludeTrailingBackslash(xmlPath) + 'users.xml') then  
  begin
    Log.Error('Файл ' + xmlPath + '\users.xml не вылился при значении параметра XMLBackupDelay=0');
    Raise('Файл ' + xmlPath + '\users.xml не вылился при значении параметра XMLBackupDelay=0');
  end;
  result := true;    
except
  Log.Message('HLTC74_14_8_Execute: ' + ExceptionMessage,'',pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC74.3: Сохранение в папку
  HLTC74.3.1: Сохранение списка
    HLTC74.3.1.11: Drag and Drop 
      HLTC74.3.1.11.1: Перетащить один элемент из списка в папку Мои документы. Проверить, что сохранилась 
      закладка на этот документ. Проверить также для документов с вхождениями(сохраненная закладка и исходный 
      элемент списка должны указывать на одно и то же место в документе).
}
function HLTC74_3_1_11_1_Execute (var  current_state: OleVariant): OleVariant;
var
  listWnd;
  myDocTabWnd;  
  x1, y1, x2, y2, dX, dY;  
  countDocInList;
  docWnd;
  str;
  i;       
  documents;
  pointsInDoc;
begin                                  
try
  documents := ['Конституция*', 'Договор "О создании*'];
  pointsInDoc := ['Глава 1. Основы конституционного строя', 'Договор'];
  for i := 0 to 1 do
  begin
    DeleteAllInMyDoc;
    if NOT OpenObjectFromFolder(LIST_MAIN, OpenMenuTab) then
      Raise('Не удалось открыть список по первой ветке!');
    listWnd := GetFromList('СПИСОК ДОКУМЕНТОВ');
    if NOT IsExists(listWnd) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');
    if NOT Position_Internal(listWnd, documents[i], '\', true, 'IsPressHome:=true') then  
      Raise('Не удалось спозиционироваться в списке на :' + documents[i]);
    if NOT GetTextSelectionCoords(listWnd, x1, y1) then
      Raise('Не удалось в списке найти координаты выделенного элемента');
    common.ClientToScreen(listWnd, x1, y1);
    myDocTabWnd := OpenMyDocTab;
    if NOT IsExists(myDocTabWnd) then Raise('Не удалось получить вкладку МОИ ДОКУМЕНТЫ'); 
    if NOT Position_Internal(myDocTabWnd, 'Мои документы', '\', true, 'IsPressHome:=true') then  
      Raise('Не удалось спозиционироваться в списке на :' + documents[i]);  
    if NOT GetTextSelectionCoords(myDocTabWnd, x2, y2) then
      Raise('Не удалось в Моих документах найти координыт выделенного элемента');
    common.ClientToScreen(myDocTabWnd, x2, y2);    
    dX := x2 - x1;
    dY := y2 - y1;
    if NOT DragExt(nil, x1 , y1, dX, dY) then Raise('Не удалось перетенуть элемент при помощи DragExt'); 
    if NOT OpenObjectFromFolder(MY_DOCS_PATH + documents[i], myDocTabWnd) then
    begin
      Log.Error('Не удалось открыть объект из моих документов, видимо он туда не перетащился!');
      Raise('Не удалось открыть объект из моих документов, видимо он туда не перетащился!');
    end;  
    docWnd := GetFromEditor('ТЕКСТ ДОКУМЕНТА');
    if NOT IsExists(docWnd) then Raise('Не удалось получить ТЕКСТ ДОКУМЕНТА');
    str := CopyToClipBoard(docWnd, 'STRING', 'Trim:=true');
    if NOT StringCompare(str, pointsInDoc[i]) then
    begin
      Log.Error('Закладка не на эталонном месте: ' + str);
      Raise('Закладка не на эталонном месте: ' + str);
    end;
    if NOT ClickNearIconOnSubInDocument(docWnd, 'ЗАКЛАДКА') then
    begin
      Log.Error('Не удалось кликнуть в тексте документа возле иконки закладки на саб панели');
      Raise('Не удалось кликнуть в тексте документа возле иконки закладки на саб панели');
    end;  
    str := CopyToClipBoard(docWnd, 'STRING', 'Trim:=true');  
    if NOT StringCompare(str, pointsInDoc[i]) then  
      Raise('Иконка находится не на той позиции, где стоит закладка : ' + str);
  end;//for  
  
  DeleteAllInMyDoc;
  result := true;
  GoToMainMenu;
except
  DeleteAllInMyDoc;
  Log.Message('HLTC74_3_1_11_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;


{
HLTC74.3: Сохранение в папку
  HLTC74.3.1: Сохранение списка
    HLTC74.3.1.11: Drag and Drop 
      HLTC74.3.1.11.2: Перетащить несколько выделенных элементов списка в новую папку в Моих документах.
      Должен сохранится список выделенных элементов. Проверить также, когда элементы выделены не подряд,
      и когда выделены только вхождения.
}
function HLTC74_3_1_11_2_Execute (var  current_state: OleVariant): OleVariant;
var
  listWnd;
  myDocTabWnd;  
  x1, y1, x2, y2, dX, dY;  
  countDocInList;
  docWnd;
  str;
  pointsInDoc;
begin                                  
try
  
  DeleteAllInMyDoc;
  if NOT OpenObjectFromFolder(LIST_MAIN, OpenMenuTab) then
    Raise('Не удалось открыть список по первой ветке!');     
  listWnd := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(listWnd) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');
    
   if NOT Position_Internal(listWnd, 'Конституция Российской*\Глава 1', '\', true, 'IsPressHome:=true') then  
    Raise('Не удалось спозиционироваться в списке на : Конституция Российской*\Глава 1');
  if NOT GetTextSelectionCoords(listWnd, x1, y1) then
    Raise('Не удалось в списке найти выделенный элемент : Договор "О создании...');    
  if NOT Position_Internal(listWnd, 'Документ 2002*\SUB 200*', '\', true, 'IsPressHome:=true') then  
    Raise('Не удалось спозиционироваться в списке на : Документ 2002*\SUB 200*');
  listWnd.Click(x1, y1, skCtrl);
  common.ClientToScreen(listWnd, x1, y1); 
    
  myDocTabWnd := OpenMyDocTab;
  if NOT IsExists(myDocTabWnd) then Raise('Не удалось получить вкладку МОИ ДОКУМЕНТЫ'); 
  if NOT Position_Internal(myDocTabWnd, 'Мои документы', '\', true, 'IsPressHome:=true') then  
    Raise('Не удалось спозиционироваться на Мои документы');  
  if NOT GetTextSelectionCoords(myDocTabWnd, x2, y2) then
    Raise('Не удалось в Моих документах найти координыт выделенного элемента');
  common.ClientToScreen(myDocTabWnd, x2, y2);    
  dX := x2 - x1;
  dY := y2 - y1;
  if NOT DragExt(nil, x1 , y1, dX, dY) then Raise('Не удалось перетенуть элемент при помощи DragExt'); 
  if NOT OpenObjectFromFolder(MY_DOCS_PATH + 'Тематика: Правовой навигатор*', myDocTabWnd) then
  begin
    Log.Error('Не удалось открыть объект из моих документов, видимо он туда не перетащился!');
    Raise('Не удалось открыть объект из моих документов, видимо он туда не перетащился!');
  end;
  countDocInList := CountElementInList(listWnd);
  if CountElementInList(listWnd) <> 2 then
  begin
    Log.Error('В загруженном списке количество элементов не эталонно: ' + countDocInList);
    Raise('В загруженном списке количество элементов не эталонно: ' + countDocInList);  
  end;   
  listWnd := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(listWnd) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');
  
  if NOT Position_Internal(listWnd, 'Конституция Российской*\Глава 1', '\', true, 'IsPressHome:=true') then
  begin
    Log.Error('Не удалось в загруженном списке споциционироваться на : Конституция Российской*\Глава 1');
    Raise('Не удалось в загруженном списке споциционироваться на : Конституция Российской*\Глава 1');
  end;   
  if NOT Position_Internal(listWnd, 'Документ 2002*\SUB 200*', '\', true, 'IsPressHome:=true') then
  begin
    Log.Error('Не удалось в загруженном списке споциционироваться на : Документ 2002*\SUB 200*');
    Raise('Не удалось в загруженном списке споциционироваться на : Документ 2002*\SUB 200*');
  end;  
    
  DeleteAllInMyDoc;
  result := true;
  GoToMainMenu;
except
  DeleteAllInMyDoc;
  Log.Message('HLTC74_3_1_11_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC74.3: Сохранение в папку
 HLTC74.3.1: Сохранение списка
  HLTC74.3.1.11: Drag and Drop 
   HLTC74.3.1.11.3: Перетащить документы из списка в:
    HLTC74.3.1.11.3.1: синхронный просмотр справки(должен вставиться комментарий из названий переносимых документов)
}
function HLTC74_3_1_11_3_1_Execute (var  current_state: OleVariant): OleVariant;
var     
  x1, y1, x2, y2, dX, dY;
  listWnd;   
  synhroViewWnd;
  str;
  etalonComment;
  toolbar;
begin                                  
try
  etalonComment := 
    'Конституция Российской Федерации (принята на всенародном голосовании 12 декабря 1993 г.)' + endOfLine +
    'Договор "О создании Союзного государства" (Москва, 8 декабря 1999 г.)';  
  if NOT OpenObjectFromFolder(LIST_MAIN, OpenMenuTab) then
    Raise('Не удалось открыть список по первой ветке!');
  listWnd := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(listWnd) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');
  
  if NOT Position_Internal(listWnd, 'Договор "О создании*', '\', true, 'IsPressHome:=true') then  
    Raise('Не удалось спозиционироваться в списке на : Договор "О создании...');
  if NOT GetTextSelectionCoords(listWnd, x1, y1) then
    Raise('Не удалось в списке найти выделенный элемент : Договор "О создании...');    
  if NOT Position_Internal(listWnd, 'Конституция Российской Федерации (принята на всенародном голосовании 12 декабря 1993 г.)', '\', true, 'IsPressHome:=true') then  
    Raise('Не удалось спозиционироваться в списке на : Конституция Российской');
  listWnd.Click(x1, y1, skCtrl);          
  synhroViewWnd := OpenInSynhroView('СПРАВКА К ДОКУМЕНТУ');
  if NOT IsExists(synhroViewWnd) then Raise('В синхронном просмотре не удалось получить СПРАВКА К ДОКУМЕНТУ');  
  x2 := synhroViewWnd.Width div 2;
  y2 := 3;
  common.ClientToScreen(synhroViewWnd, x2, y2);         
  common.ClientToScreen(listWnd, x1, y1);
  dX := x2 - x1;
  dY := y2 - y1;
  if NOT DragExt(nil, x1 , y1, dX, dY) then Raise('Не удалось перетенуть элемент при помощи DragExt');
  //Растягиваем зону синхронный просмотр, что бы комментарий влез
  toolBar := GetFromSynchroView('ТУЛБАР "СИНХРОННЫЙ ПРОСМОТР"');
  x1 := 10;
  y1 := 0;
  common.ClientToScreen(toolBar, x1, y1);  
  if NOT DragExt(nil, x1 , y1-2, 0, -30) then Raise('Не удалось перетенуть элемент при помощи DragExt');
      
  if NOT SelectComment(synhroViewWnd) then//Проверяем, что документы перенеслись и вставился комментарий
  begin
    Log.Error('Не удалось на вкладке СПРАВКА К ДОКУМЕНТУ обнаружить комментарий'); 
    Raise('Не удалось на вкладке СПРАВКА К ДОКУМЕНТУ обнаружить комментарий');
  end;
  str := CopyToClipBoard(synhroViewWnd, '', 'Trim:=true');
  if NOT StringCompare(str, etalonComment) then
  begin
    Log.Error('После Dtag&Drop документа - Текст комментария сформировался неправильно :' + str);
    Raise('После Dtag&Drop документа - Текст комментария сформировался неправильно :' + str);    
  end;
  Sys.Keys('[Del]');//Пытаемся удалить комментарий  
  result := true;
  GoToMainMenu;
except
  Sys.Keys('[Del]');//Пытаемся удалить комментарий  
  Log.Message('HLTC74_3_1_11_3_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC74.3: Сохранение в папку
 HLTC74.3.1: Сохранение списка
  HLTC74.3.1.11: Drag and Drop 
   HLTC74.3.1.11.3: Перетащить документы из списка в:
    HLTC74.3.1.11.3.2: синхронный просмотр аннотации(должен вставиться комментарий из названий переносимых документов)
}
function HLTC74_3_1_11_3_2_Execute (var  current_state: OleVariant): OleVariant;
var     
  x1, y1, x2, y2, dX, dY;
  listWnd;   
  synhroViewWnd;
  str;
  etalonComment;
  toolBar;
begin                                  
try
  etalonComment := 'Воздушный кодекс РФ*Гражданский кодекс*';  
  if NOT OpenObjectFromFolder(LIST_ALLCODES, OpenMenuTab) then
    Raise('Не удалось открыть список Всех кодексов!');
  listWnd := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(listWnd) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');
  
  if NOT Position_Internal(listWnd, 'Гражданский кодекс*', '\', true, 'IsPressHome:=true') then  
    Raise('Не удалось спозиционироваться в списке на : Гражданский кодекс*');
  if NOT GetTextSelectionCoords(listWnd, x1, y1) then
    Raise('Не удалось в списке найти выделенный элемент : Гражданский кодекс*');    
  if NOT Position_Internal(listWnd, 'Воздушный кодекс*', '\', true, 'IsPressHome:=true') then  
    Raise('Не удалось спозиционироваться в списке на : Воздушный кодекс*');
  listWnd.Click(x1, y1, skCtrl);
  OpenInSynhroView('СПРАВКА К ДОКУМЕНТУ');//Аннаотация сразу не открывается - чё то глючит          
  synhroViewWnd := OpenInSynhroView('ТЕКСТ АННОТАЦИИ');
  if NOT IsExists(synhroViewWnd) then Raise('В синхронном просмотре не удалось получить ТЕКСТ АННОТАЦИИ');  
  x2 := synhroViewWnd.Width div 2;
  y2 := synhroViewWnd.Height div 2;
  common.ClientToScreen(synhroViewWnd, x2, y2);         
  common.ClientToScreen(listWnd, x1, y1);
  dX := x2 - x1;
  dY := y2 - y1;
  if NOT DragExt(nil, x1 , y1, dX, dY) then Raise('Не удалось перетенуть элемент при помощи DragExt');
  
  //Растягиваем зону синхронный просмотр, что бы комментарий влез
  toolBar := GetFromSynchroView('ТУЛБАР "СИНХРОННЫЙ ПРОСМОТР"');
  x1 := 10;
  y1 := 0;
  common.ClientToScreen(toolBar, x1, y1);  
  if NOT DragExt(nil, x1 , y1-2, 0, -30) then Raise('Не удалось перетенуть элемент при помощи DragExt');
    
  if NOT SelectComment(synhroViewWnd) then//Проверяем, что документы перенеслись и вставился комментарий
  begin
    Log.Error('Не удалось на вкладке ТЕКСТ АННОТАЦИИ обнаружить комментарий'); 
    Raise('Не удалось на вкладке ТЕКСТ АННОТАЦИИ обнаружить комментарий');
  end;
  str := CopyToClipBoard(synhroViewWnd, '', 'Trim:=true');
  if NOT StringCompare(etalonComment, str) then
  begin
    Log.Error('После Drag&Drop документа - Текст комментария сформировался неправильно :' + str);
    Raise('После Drag&Drop документа - Текст комментария сформировался неправильно :' + str);    
  end;
  synhroViewWnd.SetFocus;
  Sys.Keys('[Del]');//Пытаемся удалить комментарий  
  result := true;  
except  
  Log.Message('HLTC74_3_1_11_3_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;


{
HLTC74.3: Сохранение в папку
 HLTC74.3.1: Сохранение списка
  HLTC74.3.1.11: Drag and Drop 
   HLTC74.3.1.11.3: Перетащить документы из списка в:
    HLTC74.3.1.11.3.3: синхронный просмотр атрибутов(не должны перетащиться)
}
function HLTC74_3_1_11_3_3_Execute (var  current_state: OleVariant): OleVariant;
const
  TEMP_FILE = 'HLTC74_3_1_11_3_3.bmp';  
var     
  x1, y1, x2, y2, dX, dY;
  listWnd;   
  synhroViewWnd;
  str;
  pathToImage;
begin                                  
try
  pathToImage := GetTempDirectory + '\' + TEMP_FILE;
  if NOT OpenObjectFromFolder(LIST_MAIN, OpenMenuTab) then
    Raise('Не удалось открыть список по первой ветке!');
  listWnd := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(listWnd) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');
  
  if NOT Position_Internal(listWnd, 'Договор "О создании*', '\', true, 'IsPressHome:=true') then  
    Raise('Не удалось спозиционироваться в списке на : Договор "О создании...');
  if NOT GetTextSelectionCoords(listWnd, x1, y1) then
    Raise('Не удалось в списке найти выделенный элемент : Договор "О создании...');    
  if NOT Position_Internal(listWnd, 'Конституция Российской*', '\', true, 'IsPressHome:=true') then  
    Raise('Не удалось спозиционироваться в списке на : Конституция Российской');
  listWnd.Click(x1, y1, skCtrl);          
  synhroViewWnd := OpenInSynhroView('АТТРИБУТЫ');
  if NOT IsExists(synhroViewWnd) then Raise('В синхронном просмотре не удалось получить АТТРИБУТЫ');  
  x2 := synhroViewWnd.Width div 2;
  y2 := synhroViewWnd.Height div 2;
  common.ClientToScreen(synhroViewWnd, x2, y2);         
  common.ClientToScreen(listWnd, x1, y1);
  dX := x2 - x1;
  dY := y2 - y1;
  SlideMouse(10, 10);//Убираем мышь, что бы не мешала
  synhroViewWnd.SetFocus;      
  synhroViewWnd.Picture.SaveToFile(pathToImage);  
  if NOT DragExt(nil, x1 , y1, dX, dY) then Raise('Не удалось перетенуть элемент при помощи DragExt');
  synhroViewWnd.SetFocus;  
  if NOT Regions.Compare(synhroViewWnd, pathToImage, false, false, false, 0) then
  begin
    Log.Error('После Dtag&Drop документа - вкладка Атрибуты изменилась, хотя ничего не должно было проихойти');
    Raise('После Dtag&Drop документа - вкладка Атрибуты изменилась, хотя ничего не должно было проихойти');
  end;  
  result := true;
  GoToMainMenu;
except  
  Log.Message('HLTC74_3_1_11_3_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC74.3: Сохранение в папку
 HLTC74.3.1: Сохранение списка
  HLTC74.3.1.11: Drag and Drop 
   HLTC74.3.1.11.3: Перетащить документы из списка в:
    HLTC74.3.1.11.3.4: синхронный просмотр СКР(должны вставиться переносимые документы)
}
function HLTC74_3_1_11_3_4_Execute (var  current_state: OleVariant): OleVariant;
const
  TEMP_FILE = 'HLTC74_3_1_11_3_4.bmp';  
var     
  x1, y1, x2, y2, dX, dY;
  listWnd;   
  synhroViewWnd;
  str;
begin                                  
try
  if NOT OpenObjectFromFolder(LIST_MAIN, OpenMenuTab) then
    Raise('Не удалось открыть список по первой ветке!');
  listWnd := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(listWnd) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');
  
  if NOT Position_Internal(listWnd, 'Договор "О создании*', '\', true, 'IsPressHome:=true') then  
    Raise('Не удалось спозиционироваться в списке на : Договор "О создании...');
  if NOT GetTextSelectionCoords(listWnd, x1, y1) then
    Raise('Не удалось в списке найти выделенный элемент : Договор "О создании...');    
  if NOT Position_Internal(listWnd, 'Конституция Российской*', '\', true, 'IsPressHome:=true') then  
    Raise('Не удалось спозиционироваться в списке на : Конституция Российской');
  listWnd.Click(x1, y1, skCtrl);          
  synhroViewWnd := OpenInSynhroView('СПИСОК ССЫЛОК НА ДОКУМЕНТ');
  if NOT IsExists(synhroViewWnd) then Raise('В синхронном просмотре не удалось получить СПИСОК ССЫЛОК НА ДОКУМЕНТ');  
  x2 := synhroViewWnd.Width div 2;
  y2 := synhroViewWnd.Height div 2;
  common.ClientToScreen(synhroViewWnd, x2, y2);         
  common.ClientToScreen(listWnd, x1, y1);
  dX := x2 - x1;
  dY := y2 - y1;
  synhroViewWnd.SetFocus;   
  if NOT DragExt(nil, x1 , y1, dX, dY) then Raise('Не удалось перетенуть элемент при помощи DragExt');  
  if NOT Position_Internal(synhroViewWnd, 'Договор "О создании*', '\', true, 'IsPressHome:=true') then
  begin
    Log.Error('Не удалось спозиционироваться в списке СКР на : Договор "О создании..., видимо он не перетянулся Drag&Drop');    
    Raise('Не удалось спозиционироваться в списке СКР на : Договор "О создании..., видимо он не перетянулся Drag&Drop');
  end;    
  if NOT Position_Internal(synhroViewWnd, 'Конституция Российской*', '\', true, 'IsPressHome:=true') then
  begin
    Log.Error('Не удалось спозиционироваться в списке СКР на : Конституция Российской..., видимо он не перетянулся Drag&Drop');    
    Raise('Не удалось спозиционироваться в списке СКР на : Конституция Российской..., видимо он не перетянулся Drag&Drop');
  end;    
    
  result := true;
  GoToMainMenu;
except  
  Log.Message('HLTC74_3_1_11_3_4_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;


{
HLTC74.3: Сохранение в папку
 HLTC74.3.1: Сохранение списка
  HLTC74.3.1.11: Drag and Drop 
   HLTC74.3.1.11.3: Перетащить документы из списка в:
    HLTC74.3.1.11.3.5: вкладку информации о списке(не должны перетащиться)
}
function HLTC74_3_1_11_3_5_Execute (var  current_state: OleVariant): OleVariant;
const
  TEMP_FILE = 'HLTC74_3_1_11_3_5.bmp';  
var     
  x1, y1, x2, y2, dX, dY;
  listWnd;   
  helpForListWnd;
  str;
  pathToImage;
begin                                  
try
  pathToImage := GetTempDirectory + '\' + TEMP_FILE;
  if NOT OpenObjectFromFolder(LIST_MAIN, OpenMenuTab) then
    Raise('Не удалось открыть список по первой ветке!');
  listWnd := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(listWnd) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');
  
  if NOT Position_Internal(listWnd, 'Договор "О создании*', '\', true, 'IsPressHome:=true') then  
    Raise('Не удалось спозиционироваться в списке на : Договор "О создании...');
  if NOT GetTextSelectionCoords(listWnd, x1, y1) then
    Raise('Не удалось в списке найти выделенный элемент : Договор "О создании...');    
  if NOT Position_Internal(listWnd, 'Конституция Российской*', '\', true, 'IsPressHome:=true') then  
    Raise('Не удалось спозиционироваться в списке на : Конституция Российской');
  listWnd.Click(x1, y1, skCtrl);          
  helpForListWnd := OpenInList('СПРАВКА К СПИСКУ');
  if NOT IsExists(helpForListWnd) then Raise('В синхронном просмотре не удалось получить СПРАВКА К СПИСКУ');  
  x2 := helpForListWnd.Width div 2;
  y2 := helpForListWnd.Height div 2;
  common.ClientToScreen(helpForListWnd, x2, y2);         
  common.ClientToScreen(listWnd, x1, y1);
  dX := x2 - x1;
  dY := y2 - y1;
  SlideMouse(10, 10);//Убираем мышь, что бы не мешала
  helpForListWnd.SetFocus;      
  helpForListWnd.Picture.SaveToFile(pathToImage);  
  if NOT DragExt(nil, x1 , y1, dX, dY) then Raise('Не удалось перетенуть элемент при помощи DragExt');
  helpForListWnd.SetFocus;  
  if NOT Regions.Compare(helpForListWnd, pathToImage, false, false, false, 0) then
  begin
    Log.Error('После Dtag&Drop документа - вкладка СПРАВКА К СПИСКУ изменилась, хотя ничего не должно было проихойти');
    Raise('После Dtag&Drop документа - вкладка СПРАВКА К СПИСКУ изменилась, хотя ничего не должно было проихойти');
  end;  
  result := true;
  GoToMainMenu;
except  
  Log.Message('HLTC74_3_1_11_3_5_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC74.3: Сохранение в папку
 HLTC74.3.1: Сохранение списка
  HLTC74.3.1.11: Drag and Drop 
   HLTC74.3.1.11.3: Перетащить документы из списка в:
    HLTC74.3.1.11.3.6: папку журнал работы(не должны перетащиться)
}
function HLTC74_3_1_11_3_6_Execute (var  current_state: OleVariant): OleVariant;
const
  TEMP_FILE = 'HLTC74_3_1_11_3_6.bmp';  
var     
  x1, y1, x2, y2, dX, dY;
  listWnd;   
  targerWnd;
  str;
  pathToImage;
begin                                  
try
  pathToImage := GetTempDirectory + '\' + TEMP_FILE;
  if NOT OpenObjectFromFolder(LIST_MAIN, OpenMenuTab) then
    Raise('Не удалось открыть список по первой ветке!');
  listWnd := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(listWnd) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');
  listWnd.SetFocus;  
  if NOT GetTextSelectionCoords(listWnd, x1, y1) then
    Raise('Не удалось в списке найти выделенный документ!');            
  targerWnd := OpenMyDocTab;
  if NOT IsExists(targerWnd) then Raise('Не удалось открыть вкладку Мои документы');
  if NOT Position_Internal(targerWnd, 'Журнал работы', '\', true, 'IsPressHome:=true') then
    Raise('Не удалось спозиционироваться на Журнал Работы');  
  Sys.Keys('[Apps]');
  if NOT ClickByPopupMenuItem(targerWnd, 'Свернуть все') then 
    Raise('Не удалось вызвать контекстную операцию "Свернуть все"');
  if NOT GetTextSelectionCoords(targerWnd, x2, y2) then
    Raise('Не удалось на вкладке "Мои документы" найти выделенный элемент "Журнал работы"');               
  Sys.Keys('[Right]' + keyPause + '[Home]');
  common.ClientToScreen(targerWnd, x2, y2);         
  common.ClientToScreen(listWnd, x1, y1);
  dX := x2 - x1;
  dY := y2 - y1;        
  targerWnd.Picture.SaveToFile(pathToImage);  
  if NOT DragExt(nil, x1 , y1, dX, dY, '' ,1, true) then 
    Raise('Не удалось перетенуть элемент при помощи DragExt');    
  targerWnd.SetFocus;
  SlideMouse(10, 10);  
  if NOT Regions.Compare(targerWnd, pathToImage, false, false, false, 0) then
  begin
    Log.Error('После Dtag&Drop документа в Журнал работы- вкладка "Мои документы" изменилась, хотя ничего не должно было проихойти');
    Raise('После Dtag&Drop документа в Журнал работы- вкладка "Мои документы" изменилась, хотя ничего не должно было проихойти');
  end;  
  result := true;
  GoToMainMenu;
except  
  Log.Message('HLTC74_3_1_11_3_6_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;
{
HLTC74.3: Сохранение в папку
 HLTC74.3.1: Сохранение списка
  HLTC74.3.1.11: Drag and Drop 
   HLTC74.3.1.11.3: Перетащить документы из списка в:
    HLTC74.3.1.11.3.7: папку мои консультации(не должны перетащиться)
}
function HLTC74_3_1_11_3_7_Execute (var  current_state: OleVariant): OleVariant;
const
  TEMP_FILE = 'HLTC74_3_1_11_3_7.bmp';  
var     
  x1, y1, x2, y2, dX, dY;
  listWnd;   
  targerWnd;
  str;
  pathToImage;
begin                                  
try
  pathToImage := GetTempDirectory + '\' + TEMP_FILE;
  if NOT OpenObjectFromFolder(LIST_MAIN, OpenMenuTab) then
    Raise('Не удалось открыть список по первой ветке!');
  listWnd := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(listWnd) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');
  listWnd.SetFocus;  
  if NOT GetTextSelectionCoords(listWnd, x1, y1) then
    Raise('Не удалось в списке найти выделенный документ!');            
  targerWnd := OpenMyDocTab;
  if NOT IsExists(targerWnd) then Raise('Не удалось открыть вкладку Мои документы');
  if NOT Position_Internal(targerWnd, 'Мои консультации', '\', true, 'IsPressHome:=true') then
    Raise('Не удалось спозиционироваться на Мои консультации');  
  Sys.Keys('[Apps]');
  if NOT ClickByPopupMenuItem(targerWnd, 'Свернуть все') then 
    Raise('Не удалось вызвать контекстную операцию "Свернуть все"');
  if NOT GetTextSelectionCoords(targerWnd, x2, y2) then
    Raise('Не удалось на вкладке "Мои документы" найти выделенный элемент "Мои консультации"');               
  Sys.Keys('[Right]' + keyPause + '[Home]');
  common.ClientToScreen(targerWnd, x2, y2);         
  common.ClientToScreen(listWnd, x1, y1);
  dX := x2 - x1;
  dY := y2 - y1;        
  targerWnd.Picture.SaveToFile(pathToImage);  
  if NOT DragExt(nil, x1 , y1, dX, dY, '' ,1, true) then 
    Raise('Не удалось перетенуть элемент при помощи DragExt');    
  targerWnd.SetFocus;
  SlideMouse(10, 10);  
  if NOT Regions.Compare(targerWnd, pathToImage, false, false, false, 0) then
  begin
    Log.Error('После Dtag&Drop документа в Мои консультации - вкладка "Мои документы" изменилась, хотя ничего не должно было проихойти');
    Raise('После Dtag&Drop документа в Мои консультации - вкладка "Мои документы" изменилась, хотя ничего не должно было проихойти');
  end;  
  result := true;
  GoToMainMenu;
except  
  Log.Message('HLTC74_3_1_11_3_7_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC74.3: Сохранение в папку
 HLTC74.3.1: Сохранение списка
  HLTC74.3.1.11: Drag and Drop 
   HLTC74.3.1.11.3: Перетащить документы из списка в:
    HLTC74.3.1.11.3.8: папку мои комментарии(не должны перетащиться)
}
function HLTC74_3_1_11_3_8_Execute (var  current_state: OleVariant): OleVariant;
const
  TEMP_FILE = 'HLTC74_3_1_11_3_8.bmp';  
var     
  x1, y1, x2, y2, dX, dY;
  listWnd;   
  targerWnd;
  str;
  pathToImage;
begin                                  
try
  pathToImage := GetTempDirectory + '\' + TEMP_FILE;
  if NOT OpenObjectFromFolder(LIST_MAIN, OpenMenuTab) then
    Raise('Не удалось открыть список по первой ветке!');
  listWnd := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(listWnd) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');
  listWnd.SetFocus;  
  if NOT GetTextSelectionCoords(listWnd, x1, y1) then
    Raise('Не удалось в списке найти выделенный документ!');            
  targerWnd := OpenMyDocTab;
  if NOT IsExists(targerWnd) then Raise('Не удалось открыть вкладку Мои документы');
  if NOT Position_Internal(targerWnd, 'Мои комментарии', '\', true, 'IsPressHome:=true') then
    Raise('Не удалось спозиционироваться на Мои комментарии');  
  Sys.Keys('[Apps]');
  if NOT ClickByPopupMenuItem(targerWnd, 'Свернуть все') then 
    Raise('Не удалось вызвать контекстную операцию "Свернуть все"');
  if NOT GetTextSelectionCoords(targerWnd, x2, y2) then
    Raise('Не удалось на вкладке "Мои документы" найти выделенный элемент "Мои комментарии"');               
  Sys.Keys('[Right]' + keyPause + '[Home]');
  common.ClientToScreen(targerWnd, x2, y2);         
  common.ClientToScreen(listWnd, x1, y1);
  dX := x2 - x1;
  dY := y2 - y1;        
  targerWnd.Picture.SaveToFile(pathToImage);  
  if NOT DragExt(nil, x1 , y1, dX, dY, '' ,1, true) then 
    Raise('Не удалось перетенуть элемент при помощи DragExt');    
  targerWnd.SetFocus;
  SlideMouse(10, 10);  
  if NOT Regions.Compare(targerWnd, pathToImage, false, false, false, 0) then
  begin
    Log.Error('После Dtag&Drop документа в Мои комментарии - вкладка "Мои документы" изменилась, хотя ничего не должно было проихойти');
    Raise('После Dtag&Drop документа в Мои комментарии - вкладка "Мои документы" изменилась, хотя ничего не должно было проихойти');
  end;  
  result := true;
  GoToMainMenu;
except  
  Log.Message('HLTC74_3_1_11_3_8_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC74.8: Типизированная фильтрация
  HLTC74.8.2: Проверить фильтры по умолчанию:
    HLTC74.8.2.1: При загрузке/сохранении запроса – запросы
}
function HLTC74_8_2_1_Execute (var  current_state: OleVariant): OleVariant;
const
  FILTER = 'Запросы';
var
  folderDialog;
  comboBox;
  defaulFilter;
begin                                    
try
  if NOT GoToPPR then Raise('Не удалось открыть ППР');
  Sys.Keys('конституция');
  folderDialog := OpenSaveToFolderDialog;
  if NOT IsExists(folderDialog) then Raise('Не удалось открыть "диалог сохранения в папки"');
  
  comboBox := GetFromFolderForm('КОМБОБОКС "ТИПИЗИРОВАННЫЙ ФИЛЬТР"', folderDialog);
  if NOT IsExists(comboBox) then Raise('Не удалось получить КОМБОБОКС "ТИПИЗИРОВАННЫЙ ФИЛЬТР"');
  defaulFilter := comboBox.wText; 
  if NOT StringCOmpare(defaulFilter, FILTER) then
  begin
    Log.Error('Дефолтный типизированный фильтр при сохранении объекта "' + defaulFilter + '" не равен эталонному, должен быть: ' + FILTER );  
    Raise('Дефолтный типизированный фильтр при сохранении объекта "' + defaulFilter + '" не равен эталонному, должен быть: ' + FILTER );
  end;
  folderDialog.SetFocus;
  Sys.Keys('[Esc]');
  folderDialog := OpenLoadFromFolderDialog;
  if NOT IsExists(folderDialog) then Raise('Не удалось открыть "диалог загрузки из папки"');
  
  comboBox := GetFromFolderForm('КОМБОБОКС "ТИПИЗИРОВАННЫЙ ФИЛЬТР"', folderDialog);
  if NOT IsExists(comboBox) then Raise('Не удалось получить КОМБОБОКС "ТИПИЗИРОВАННЫЙ ФИЛЬТР"');
  defaulFilter := comboBox.wText; 
  if NOT StringCOmpare(defaulFilter, FILTER) then
  begin
    Log.Error('Дефолтный типизированный фильтр при загрузки объекта "' + defaulFilter + '" не равен эталонному, должен быть: ' + FILTER );  
    Raise('Дефолтный типизированный фильтр при загрузки объекта "' + defaulFilter + '" не равен эталонному, должен быть: ' + FILTER );
  end;
  folderDialog.SetFocus;
  Sys.Keys('[Esc]');  
  result := true;
  GoToMainMenu;
except
  Sys.Keys('[Esc]');
  Log.Message('HLTC74_8_2_1_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC74.8: Типизированная фильтрация
  HLTC74.8.2: Проверить фильтры по умолчанию:
    HLTC74.8.2.2: При сохранении списка – списки и закладки                                          
}
function HLTC74_8_2_2_Execute (var  current_state: OleVariant): OleVariant;
const
  FILTER = 'Списки и закладки';
var
  folderDialog;
  comboBox;
  defaulFilter;
begin                                    
try
  if NOT IsExists(GetListOfAllDocuments) then Raise('Не удалось получить список всех документов');
  folderDialog := OpenSaveToFolderDialog;
  if NOT IsExists(folderDialog) then Raise('Не удалось открыть "диалог сохранения в папки"');
  
  comboBox := GetFromFolderForm('КОМБОБОКС "ТИПИЗИРОВАННЫЙ ФИЛЬТР"', folderDialog);
  if NOT IsExists(comboBox) then Raise('Не удалось получить КОМБОБОКС "ТИПИЗИРОВАННЫЙ ФИЛЬТР"');
  defaulFilter := comboBox.wText; 
  if NOT StringCOmpare(defaulFilter, FILTER) then
  begin
    Log.Error('Дефолтный типизированный фильтр при сохранении объекта "' + defaulFilter + '" не равен эталонному, должен быть: ' + FILTER );  
    Raise('Дефолтный типизированный фильтр при сохранении объекта "' + defaulFilter + '" не равен эталонному, должен быть: ' + FILTER );
  end;
  folderDialog.SetFocus;
  Sys.Keys('[Esc]');
  //Раньше надо было проверять и загрузку
  //folderDialog := OpenLoadFromFolderDialog;
  //if NOT IsExists(folderDialog) then Raise('Не удалось открыть "диалог загрузки из папки"');
  
  //comboBox := GetFromFolderForm('КОМБОБОКС "ТИПИЗИРОВАННЫЙ ФИЛЬТР"', folderDialog);
  //if NOT IsExists(comboBox) then Raise('Не удалось получить КОМБОБОКС "ТИПИЗИРОВАННЫЙ ФИЛЬТР"');
  //defaulFilter := comboBox.wText; 
  //if NOT StringCOmpare(defaulFilter, FILTER) then
  //begin
  //  Log.Error('Дефолтный типизированный фильтр при загрузки объекта "' + defaulFilter + '" не равен эталонному, должен быть: ' + FILTER );  
  //  Raise('Дефолтный типизированный фильтр при загрузки объекта "' + defaulFilter + '" не равен эталонному, должен быть: ' + FILTER );
  //end;
  //folderDialog.SetFocus;
  //Sys.Keys('[Esc]');  
  result := true;
  GoToMainMenu;
except
  Sys.Keys('[Esc]');
  Log.Message('HLTC74_8_2_2_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;     

{
HLTC74.8: Типизированная фильтрация
  HLTC74.8.2: Проверить фильтры по умолчанию:
    HLTC74.8.2.3: При сохранении закладки – списки и закладки                                             
}
function HLTC74_8_2_3_Execute (var  current_state: OleVariant): OleVariant;
const
  FILTER = 'Списки и закладки';
var
  folderDialog;
  comboBox;
  defaulFilter;
begin                                    
try  
  if NOT OpenDocByNumber(1055132)then Raise('Не удалось открыть документ по Alt+N');
  folderDialog := OpenSaveToFolderDialog;
  if NOT IsExists(folderDialog) then Raise('Не удалось открыть "диалог сохранения в папки"');
  
  comboBox := GetFromFolderForm('КОМБОБОКС "ТИПИЗИРОВАННЫЙ ФИЛЬТР"', folderDialog);
  if NOT IsExists(comboBox) then Raise('Не удалось получить КОМБОБОКС "ТИПИЗИРОВАННЫЙ ФИЛЬТР"');
  defaulFilter := comboBox.wText; 
  if NOT StringCOmpare(defaulFilter, FILTER) then
  begin
    Log.Error('Дефолтный типизированный фильтр при сохранении объекта "' + defaulFilter + '" не равен эталонному, должен быть: ' + FILTER );  
    Raise('Дефолтный типизированный фильтр при сохранении объекта "' + defaulFilter + '" не равен эталонному, должен быть: ' + FILTER );
  end;
  folderDialog.SetFocus;
  Sys.Keys('[Esc]');  
  //Раньше надо было проверять и загрузку
  //folderDialog := OpenLoadFromFolderDialog;
  //if NOT IsExists(folderDialog) then Raise('Не удалось открыть "диалог загрузки из папки"');
  
  //comboBox := GetFromFolderForm('КОМБОБОКС "ТИПИЗИРОВАННЫЙ ФИЛЬТР"', folderDialog);
  //if NOT IsExists(comboBox) then Raise('Не удалось получить КОМБОБОКС "ТИПИЗИРОВАННЫЙ ФИЛЬТР"');
  //defaulFilter := comboBox.wText; 
  //if NOT StringCOmpare(defaulFilter, FILTER) then
  //begin
  //  Log.Error('Дефолтный типизированный фильтр при загрузки объекта "' + defaulFilter + '" не равен эталонному, должен быть: ' + FILTER );  
  //  Raise('Дефолтный типизированный фильтр при загрузки объекта "' + defaulFilter + '" не равен эталонному, должен быть: ' + FILTER );
  //end;
  //folderDialog.SetFocus;
  //Sys.Keys('[Esc]');  
  result := true;
  GoToMainMenu;
except
  Sys.Keys('[Esc]');
  Log.Message('HLTC74_8_2_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC74.8: Типизированная фильтрация
  HLTC74.8.2: Проверить фильтры по умолчанию:
    HLTC74.8.2.4: При загрузке фильтра – запросы                                             
}
function HLTC74_8_2_4_Execute (var  current_state: OleVariant): OleVariant;
const
  FILTER = 'Запросы';
var
  folderDialog;
  comboBox;
  defaulFilter;
  toolBar;
begin                                    
try  
  if NOT GoToPPR then Raise('Не удалось открыть ППР');
  if NOT IsMenuItemChecked(GetFromMainWindow('ГЛАВНОЕ МЕНЮ'),'Вид\Фильтры (вкладка)',true) then
  begin    
    if NOT ClickByMainMenuItem('Вид\Фильтры (вкладка)') then
      Raise('Не удалось вызвать пункт главного меню <Вид\Фильтры (вкладка)>');
  end;
  toolBar := GetFromNavigator('ТУЛБАР "ФИЛЬТРЫ (ВКЛАДКА)"');  
  if NOT IsExists(toolBar) then Raise('Не удалось получить ТУЛБАР "ФИЛЬТРЫ (ВКЛАДКА)"');
  if NOT ClickToolBarButton(toolBar, 'Добавить фильтр из сохраненных запросов') then Raise('Не удалось кликнуть по кнопке "Добавить фильтр из сохраненных запросов" на тулбаре');
   
  folderDialog := GetFromShell('ДИАЛОГ ОТКРЫТИЯ ИЗ ПАПОК');
  if NOT IsExists(folderDialog) then Raise('Не удалось найти "ДИАЛОГ ОТКРЫТИЯ ИЗ ПАПОК"');
  
  comboBox := GetFromFolderForm('КОМБОБОКС "ТИПИЗИРОВАННЫЙ ФИЛЬТР"', folderDialog);
  if NOT IsExists(comboBox) then Raise('Не удалось получить КОМБОБОКС "ТИПИЗИРОВАННЫЙ ФИЛЬТР"');
  defaulFilter := comboBox.wText; 
  if NOT StringCOmpare(defaulFilter, FILTER) then
  begin
    Log.Error('Дефолтный типизированный фильтр при сохранении объекта "' + defaulFilter + '" не равен эталонному, должен быть: ' + FILTER );  
    Raise('Дефолтный типизированный фильтр при сохранении объекта "' + defaulFilter + '" не равен эталонному, должен быть: ' + FILTER );
  end;
  folderDialog.SetFocus;
  Sys.Keys('[Esc]');    
  result := true;
  GoToMainMenu;
except
  Sys.Keys('[Esc]');
  Log.Message('HLTC74_8_2_4_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC74.8: Типизированная фильтрация
  HLTC74.8.6: Элементы в папках "Мои документы" и "Общие" автоматически сортируются. При сортировке на одном 
  уровне в начале элементы группируются по типу и внутри одного типа сортируются по алфавиту. 
  Порядок расположения типов такой:
    папки
    запросы
    списки
    закладки                                             
}
function HLTC74_8_6_Execute (var  current_state: OleVariant): OleVariant;
const
  PREF = 'HLTC74_8_6';
var
  objectName;
  i;
  myDocWnd;
begin
try
  if NOT DeleteAllInMyDoc then Raise('Не удалось удалить все объекты из моих документов');
  objectName := 'папка' + PREF;
  if NOT IsExists( OpenMyDocTab ) then Raise('Не удалось открыть вкалдку мои документы');
  if NOT (
    CreateFolderFrom (true, 'Мои документы', 'а_' + objectName) AND
    CreateFolderFrom (true, 'Мои документы', 'б_' + objectName)
  ) then
    Raise('Не удалось создать папку');
    
  for i :=1 to 3 do
  begin
    case i of
      1:  begin
            if NOT GoToPPR then 
              Raise('Не удалось открыть ППР');
            Sys.Keys('конституция');
            objectName := 'запрос' + PREF;    
          end;
      2:  begin
            if NOT OpenObjectFromFolder( LIST_MAIN, OpenMenuTab) then
              Raise('Не удалось открыть список по первой ветки');
            objectName := 'список' + PREF;      
          end;
      3:  begin
            if NOT OpenDocByNumber(10003000) then
              Raise('Не удалось открыть документ по Alt+N');            
            objectName := 'закладка' + PREF;    
          end;      
    end;//case
    if NOT ( 
      SimpleSaveToFolders('а_' + objectName) AND    
      SimpleSaveToFolders('б_' + objectName)
    ) then
      Raise('Не удалось сохранить "' + objectName + '" !');    
  end;//for

  myDocWnd := OpenMyDocTab;
  if NOT IsExists(myDocWnd) then Raise('Не удалось открыть вкладку Мои документы');
  if NOT Position_Internal(myDocWnd, 'Мои документы', '\', true ,'IsPressHome:=true') then 
    Raise('Не удалось споциционироваться на вкладке МОИ ДОКУМЕНТЫ на "Мои документы"');
  Sys.Keys('[Apps]');
  if NOT ClickByPopupMenuItem(myDocWnd, 'Развернуть все') then 
    Raise('Неудалось вызвать контекстную операцию "Развернуть всё" ');    
  for i :=1 to 8 do
  begin
    myDocWnd.SetFocus;
    Sys.Keys('[Down]');  
    case i of
      1:  objectName := 'а_папка' + PREF;
      2:  objectName := 'б_папка' + PREF;
      3:  objectName := 'а_запрос' + PREF;
      4:  objectName := 'б_запрос' + PREF;
      5:  objectName := 'а_список' + PREF;
      6:  objectName := 'б_список' + PREF;
      7:  objectName := 'а_закладка' + PREF; 
      8:  objectName := 'б_закладка' + PREF;
    end;//case
      
    if NOT ( common.GetWindowText(myDocWnd) = objectName) then
    begin
      Log.Error('По иерархии должен идти элемент "' + objectName + '" а идёт "' + common.GetWindowText(myDocWnd) + '" !');
      Raise('По иерархии должен идти элемент "' + objectName + '" а идёт "' + common.GetWindowText(myDocWnd) + '" !');    
    end;
  end;//for
  
  DeleteAllInMyDoc;
  
  result := true;
  GoToMainMenu;
except
  DeleteAllInMyDoc;  
  Log.Message('HLTC74_8_6_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

{
HLTC74.3.1.4.3: При сохранении списка, найденного по  базовому поиску, выбрать в качестве сохраняемого
 другой списк, найденный по базовому поиску. Функция «Добавить» - список объединится со списком
  (результирующий список будет состоять из элементов, бывших как в первом, так и втором списках)                                         
}
function HLTC74_3_1_4_3_Execute (var  current_state: OleVariant): OleVariant;
const
  PREF = 'HLTC74_3_1_4_3';
var
  etalonList;
  listWnd;
begin                                    
try
  etalonList :=  [
    'Приказ Госстроя РФ от 20 августа 2001 г. N 189 "Об Уставе Дятьковского индустриального техникума"',    
    'Конституция Чеченской Республики'
  ];            
  GoToMainMenu;
  if NOT BaseSearch(nil, 'Приказ Госстроя РФ от 20 августа 2001 г. 189') then
    Raise('Не удалось выполнить базовый поиск контекста: "Приказ Госстроя РФ от 20 августа 2001 г. 189"');   
  if NOT SaveToFoldersExt('Мои документы', PREF,'','Сохранить') then
    Raise('Не удалось сохранить список , полученный после БП');      
  GoToMainMenu;
  if NOT BaseSearch(nil, 'конституция чеченской') then
    Raise('Не удалось выполнить базовый поиск контекста: "конституция чеченской"');  
  if NOT SaveToFoldersExt(MY_DOCS_PATH + PREF, PREF,'','Добавить') then
    Raise('Не удалось объединить список с сохраненным в Моих документах!'); 
  if NOT OpenObjectFromFolder(MY_DOCS_PATH + PREF, OpenMyDocTab) then
    Raise('Не удалось открыть объект из Моих документов');
 
  listWnd := GetFromList('СПИСОК ДОКУМЕНТОВ');
  if NOT IsExists(listWnd) then Raise('Не удалось получить СПИСОК ДОКУМЕНТОВ');
  
  if NOT CompareArray(etalonList, GetElementsFromTree(listWnd)) then
  begin
    Log.Error('Результирующий список не равен эталонному списку (состоящему из объединённыч списков)');
    Raise('Результирующий список не равен эталонному списку (состоящему из объединённыч списков)');  
  end;         
  DeleteAllInMyDoc;
  result := true;
  GoToMainMenu;
except
  DeleteAllInMyDoc;
  Log.Message('HLTC74_3_1_4_3_Execute: ' + ExceptionMessage,'', pmNormal, GetLogAttr('EXCEPTION'));
  result := false;
  CommonExceptionHandler;
end;
end;

/////////////////////////////////////////////////////////////////////////////////
///////////                          Отладка                        /////////////
/////////////////////////////////////////////////////////////////////////////////

 
procedure test;
var
  synhroViewWnd;                        
begin
 Log.Message(RightAccess(MY_DOCS_PATH + '1', 'SET'  ,'1 (1)',RIGHT_READ_AND_WRITE) );
end;

procedure RykovTest;
var cur;
i:integer;
begin
  gbl_F1ShellTabsEnabled := true;     //Начиная с 7.10 появился режим работы с вкладками
// --14.03.2006--------------------- 
 { Log.Message( HLTC74_1_1_1_Execute(cur));
  Log.Message(  HLTC74_1_1_2_Execute(cur));
  Log.Message(  HLTC74_1_1_3_Execute(cur));
  Log.Message(  HLTC74_1_1_4_Execute(cur));
  Log.Message(  HLTC74_1_1_5_Execute(cur));
  Log.Message(  HLTC74_1_1_6_Execute(cur));
  Log.Message(  HLTC74_1_1_7_1_Execute(cur));
  Log.Message(  HLTC74_1_1_7_2_Execute(cur));
// --15.03.2006---------------------
  Log.Message(HLTC74_1_1_7_3_Execute(cur));
  Log.Message(  HLTC74_1_1_8_Execute(cur));  
  Log.Message(  HLTC74_1_1_9_Execute(cur));  
  Log.Message(  HLTC74_1_1_10_Execute(cur));             
  Log.Message(  HLTC74_1_1_11_Execute(cur));       
 //16.03.2006----------------------            
  Log.Message(  HLTC74_1_1_12_Execute(cur));   
  Log.Message(  HLTC74_1_2_1_1_Execute(cur));
  Log.Message(  HLTC74_1_2_1_2_Execute(cur));
  Log.Message(  HLTC74_1_2_1_3_Execute(cur));   
  Log.Message(  HLTC74_1_2_1_4_Execute(cur));   
//17.03.2006----------------------  
  Log.Message(  HLTC74_1_2_1_5_Execute(cur));
  Log.Message(  HLTC74_1_2_1_6_Execute(cur));  
  Log.Message(  HLTC74_1_2_1_7_1_Execute(cur));
  Log.Message(  HLTC74_1_2_1_7_2_Execute(cur));
  Log.Message(  HLTC74_1_2_1_7_3_Execute(cur));    
  Log.Message(  HLTC74_1_2_1_8_Execute(cur));   
  Log.Message(  HLTC74_1_2_1_9_Execute(cur));  
  Log.Message(  HLTC74_1_2_1_10_Execute(cur));}    
  //Log.Message(  HLTC74_1_2_1_11_Execute(cur)); 
  {Log.Message(  HLTC74_2_1_1_1_Execute(cur));     
//20.03.2006----------------------}           
  //Log.Message(  HLTC74_2_1_1_2_Execute(cur));  
  {Log.Message(  HLTC74_2_1_1_3_Execute(cur));}
  //Log.Message(  HLTC74_2_1_1_4_1_Execute(cur));
  //Log.Message(  HLTC74_2_1_1_4_2_Execute(cur));   
  //Log.Message(  HLTC74_2_1_1_4_3_Execute(cur));
  //Log.Message(  HLTC74_2_1_1_4_4_Execute(cur));  
  //Log.Message(  HLTC74_2_1_1_5_1_Execute(cur));
  //Log.Message(  HLTC74_2_1_1_5_2_Execute(cur));
  {Log.Message(  HLTC74_2_1_1_5_3_Execute(cur));}
 { Log.Message(  HLTC74_2_1_1_5_4_Execute(cur));
  Log.Message(  HLTC74_2_1_1_5_5_Execute(cur));
  Log.Message(  HLTC74_2_1_1_5_6_Execute(cur));  
  Log.Message(  HLTC74_2_1_1_6_Execute(cur)); 
  Log.Message(  HLTC74_2_1_1_7_Execute(cur));  
  Log.Message(  HLTC74_2_1_1_8_Execute(cur));
  Log.Message(  HLTC74_2_1_1_9_Execute(cur)); 
  Log.Message(  HLTC74_2_1_1_10_Execute(cur));   
  Log.Message(  HLTC74_2_1_1_11_Execute(cur));   
  {Log.Message(  HLTC74_2_1_1_12_Execute(cur));  
  Log.Message(  HLTC74_2_1_1_13_Execute(cur));}
  //Log.Message(  HLTC74_2_1_1_14_Execute(cur));
{//21.03.2006----------------------            
  Log.Message( HLTC74_2_1_2_1_Execute(cur));    
  Log.Message(  HLTC74_2_1_2_2_Execute(cur));  
  Log.Message(  HLTC74_2_1_2_3_Execute(cur));
  Log.Message(  HLTC74_2_1_2_4_5_Execute(cur));   
  Log.Message(  HLTC74_2_1_2_4_6_Execute(cur));   
  Log.Message(  HLTC74_2_1_2_4_7_Execute(cur));
  Log.Message(  HLTC74_2_1_2_4_8_Execute(cur));  
  Log.Message(  HLTC74_2_1_2_5_1_Execute(cur));    
  Log.Message(  HLTC74_2_1_2_5_2_Execute(cur));
  Log.Message(  HLTC74_2_1_2_5_7_Execute(cur));   
  Log.Message(  HLTC74_2_1_2_5_8_Execute(cur));     
  Log.Message(  HLTC74_2_1_2_5_9_Execute(cur));
  Log.Message(  HLTC74_2_1_2_5_10_Execute(cur));    
  Log.Message(  HLTC74_2_1_2_6_Execute(cur));      
//22.03.2006----------------------   
  Log.Message(  HLTC74_2_1_2_7_Execute(cur));
  Log.Message(  HLTC74_2_1_2_8_Execute(cur)); 
  Log.Message(  HLTC74_2_1_2_9_Execute(cur));    
  Log.Message( HLTC74_2_1_2_10_Execute(cur));
  Log.Message(  HLTC74_2_1_2_11_Execute(cur));       
  Log.Message(  HLTC74_2_1_2_12_Execute(cur));
  Log.Message(  HLTC74_2_1_2_13_Execute(cur));      
  Log.Message(  HLTC74_2_1_2_14_Execute(cur));      
  Log.Message(  HLTC74_2_1_3_1_1_Execute(cur));   
  Log.Message(  HLTC74_2_1_3_1_2_Execute(cur));  
  Log.Message(  HLTC74_2_1_3_1_3_Execute(cur)); 
  Log.Message(  HLTC74_2_1_3_1_4_Execute(cur));
  Log.Message(  HLTC74_2_1_3_1_5_Execute(cur));  
  Log.Message(  HLTC74_2_1_3_2_1_Execute(cur));
  Log.Message(  HLTC74_2_1_3_2_2_Execute(cur));
  Log.Message(  HLTC74_2_1_3_2_3_Execute(cur));
  Log.Message(  HLTC74_2_1_3_2_4_Execute(cur));
  Log.Message( HLTC74_2_1_3_2_5_Execute(cur)); 
 //23.03.2006----------------------  
  Log.Message( HLTC74_2_1_3_3_Execute(cur));
  Log.Message( HLTC74_2_1_3_4_Execute(cur));
  Log.Message( HLTC74_2_1_3_5_Execute(cur));
  Log.Message( HLTC74_2_1_3_6_Execute(cur));
  Log.Message( HLTC74_2_1_3_7_Execute(cur));
  Log.Message( HLTC74_2_1_3_8_Execute(cur));  
  Log.Message( HLTC74_2_1_3_9_Execute(cur));
  Log.Message( HLTC74_2_1_3_10_Execute(cur));   
  Log.Message( HLTC74_2_1_3_11_Execute(cur));
  Log.Message(HLTC74_2_1_4_1_Execute(cur)); 
  Log.Message(HLTC74_2_1_4_2_Execute(cur));  
//24.03.2006----------------------  
  Log.Message( HLTC74_2_2_4_Execute(cur));
  Log.Message( HLTC74_2_2_5_7_Execute(cur));
  Log.Message( HLTC74_2_2_5_8_Execute(cur));
  Log.Message( HLTC74_2_2_5_9_Execute(cur));
  Log.Message( HLTC74_2_2_5_10_Execute(cur));
  Log.Message( HLTC74_2_2_5_11_Execute(cur));
  Log.Message( HLTC74_2_2_5_12_Execute(cur));
  Log.Message( HLTC74_2_2_5_13_Execute(cur));                                                      
  Log.Message( HLTC74_2_3_1_2_4_Execute(cur));  
  Log.Message( HLTC74_3_1_1_Execute(cur));  
  Log.Message( HLTC74_3_1_2_Execute(cur));  
  Log.Message( HLTC74_3_1_3_1_Execute(cur)); 
  Log.Message( HLTC74_3_1_4_1_Execute(cur));  
  Log.Message(  HLTC74_3_1_4_2_Execute(cur));    
  Log.Message(  HLTC74_3_1_4_3_Execute(cur));
  Log.Message(  HLTC74_3_1_5_Execute (cur));        
//27.03.2006----------------------      
  Log.Message( HLTC74_3_1_6_Execute (cur));    
  Log.Message( HLTC74_3_1_8_1_Execute (cur));   
  Log.Message( HLTC74_3_1_8_2_Execute (cur)); 
  Log.Message( HLTC74_3_1_8_3_Execute (cur));
  Log.Message( HLTC74_3_1_8_4_Execute (cur));
  Log.Message( HLTC74_3_1_9_Execute (cur)); 
//28.03.2006----------------------         
  Log.Message( HLTC74_3_9_2_2_Execute (cur));   
  Log.Message( HLTC74_3_9_2_4_Execute (cur));    
  Log.Message( HLTC74_3_9_3_1_Execute (cur));    
  Log.Message( HLTC74_3_9_3_1_Execute (cur));   
  Log.Message( HLTC74_3_9_3_3_Execute (cur));   
  Log.Message( HLTC74_3_9_3_4_Execute (cur));  
  Log.Message( HLTC74_3_9_3_5_Execute (cur));      
  Log.Message( HLTC74_3_9_3_6_Execute (cur));    
  Log.Message( HLTC74_3_9_4_1_Execute (cur));     
  Log.Message( HLTC74_3_9_4_2_Execute (cur));  
  Log.Message( HLTC74_3_9_4_3_Execute (cur));
  Log.Message( HLTC74_3_9_4_4_Execute (cur));   
  Log.Message( HLTC74_3_9_5_1_Execute (cur));       //Надо написать, когда станет нормально работать КЗ
  Log.Message( HLTC74_3_9_5_2_Execute (cur));   
  Log.Message( HLTC74_3_10_1_1_Execute (cur));   
  Log.Message( HLTC74_3_10_1_2_Execute (cur));  
  Log.Message( HLTC74_3_10_1_3_Execute (cur));   
  Log.Message( HLTC74_3_10_2_1_Execute (cur));
  Log.Message( HLTC74_3_10_2_2_Execute (cur)); 
  Log.Message( HLTC74_3_10_2_3_Execute (cur));
  Log.Message( HLTC74_3_10_3_1_Execute (cur)); 
  Log.Message( HLTC74_3_10_3_2_Execute (cur)); 
  Log.Message( HLTC74_3_10_3_3_Execute (cur)); 
//29.03.2006----------------------   
  Log.Message( HLTC74_3_10_4_Execute (cur));
  Log.Message( HLTC74_3_10_5_1_Execute (cur)); 
  Log.Message( HLTC74_3_10_5_2_Execute (cur));    
  Log.Message( HLTC74_3_10_5_3_Execute (cur));
  Log.Message( HLTC74_3_10_5_4_Execute (cur));
  Log.Message( HLTC74_3_10_6_1_Execute (cur));  
  Log.Message( HLTC74_3_10_6_2_Execute (cur));  
  Log.Message( HLTC74_3_10_6_3_Execute (cur));
  Log.Message( HLTC74_3_10_7_Execute (cur));
  Log.Message( HLTC74_3_10_8_1_Execute (cur)); 
  Log.Message( HLTC74_3_10_8_2_Execute (cur)); 
//30.03.2006----------------------        
  Log.Message( HLTC74_3_11_1_Execute (cur));        
  Log.Message( HLTC74_3_11_2_1_Execute (cur));      
  Log.Message( HLTC74_3_11_3_Execute  (cur));   
  Log.Message( HLTC74_3_11_4_Execute  (cur));   
  Log.Message( HLTC74_3_11_5_Execute  (cur));         
 //31.03.2006----------------------     
  Log.Message( HLTC74_4_1_1_Execute  (cur));
  Log.Message( HLTC74_4_1_3_Execute  (cur));     //Работает, НО закладка удаляется только потому, что она первая в очереди...
  Log.Message( HLTC74_4_2_4_Execute  (cur));
  Log.Message( HLTC74_4_2_5_Execute  (cur));  
  Log.Message( HLTC74_4_2_6_Execute  (cur)); 
  Log.Message( HLTC74_4_2_7_Execute  (cur));     //Работает, НО запрос удаляется только потому, что он первый в очереди...      
  Log.Message( HLTC74_4_3_1_Execute  (cur));     //Работает, НО запрос удаляется только потому, что он первый в очереди...      
  Log.Message( HLTC74_4_3_3_Execute  (cur));
//03.03.2006----------------------         
  Log.Message( HLTC74_4_3_6_Execute  (cur));   
  Log.Message( HLTC74_4_4_Execute  (cur));    
  Log.Message( HLTC74_4_5_1_Execute  (cur));      
  Log.Message( HLTC74_4_5_2_Execute  (cur));   
  Log.Message( HLTC74_4_5_3_Execute  (cur));     
  Log.Message( HLTC74_4_5_4_Execute  (cur)); 
//04.03.2006----------------------          
  Log.Message( HLTC74_6_1_1_Execute  (cur));
  Log.Message( HLTC74_6_1_2_Execute  (cur));  
  Log.Message( HLTC74_6_1_3_Execute  (cur));  
  Log.Message( HLTC74_6_1_4_Execute  (cur));   
  Log.Message( HLTC74_6_2_Execute  (cur));
  Log.Message( HLTC74_6_3_1_Execute  (cur));   
  Log.Message( HLTC74_6_3_2_Execute  (cur));    
  Log.Message( HLTC74_6_3_3_Execute  (cur)); 
  Log.Message( HLTC74_6_3_4_Execute  (cur)); 
  Log.Message( HLTC74_7_1_1_Execute  (cur));  
  Log.Message( HLTC74_7_1_2_Execute  (cur));             
//05.03.2006----------------------          
  Log.Message( HLTC74_7_1_3_Execute  (cur));  
  Log.Message( HLTC74_7_2_1_Execute  (cur));  
  Log.Message( HLTC74_7_2_2_Execute  (cur));
  Log.Message( HLTC74_7_3_1_Execute  (cur));
  Log.Message( HLTC74_7_3_2_Execute  (cur));   
  Log.Message( HLTC74_7_3_3_Execute  (cur));
  //05.03.2006----------------------  
  Log.Message( HLTC74_8_1_1_Execute  (cur)); 
  Log.Message( HLTC74_8_1_2_Execute  (cur));
  Log.Message( HLTC74_8_1_3_Execute  (cur));     
  Log.Message( HLTC74_8_1_5_Execute  (cur));  
  Log.Message( HLTC74_8_1_6_Execute  (cur));  
//07.03.2006----------------------         
  Log.Message( HLTC74_8_2_Execute  (cur));
  Log.Message( HLTC74_8_3_1_Execute  (cur));  
  Log.Message( HLTC74_9_2_1_1_Execute  (cur));
  Log.Message( HLTC74_9_2_1_1_1_Execute  (cur)); 
  Log.Message( HLTC74_9_2_1_2_Execute  (cur));  
  Log.Message( HLTC74_9_2_1_3_Execute  (cur));  
  Log.Message( HLTC74_9_2_1_4_Execute  (cur));      
  Log.Message( HLTC74_9_2_2_Execute  (cur));      
  Log.Message( HLTC74_9_2_3_Execute  (cur));
  Log.Message( HLTC74_9_2_4_Execute  (cur));     
  Log.Message( HLTC74_9_2_5_Execute  (cur));   
  Log.Message( HLTC74_9_2_6_Execute  (cur));
  Log.Message( HLTC74_9_2_7_Execute  (cur)); 
  Log.Message( HLTC74_9_2_8_Execute  (cur)); 
  Log.Message( HLTC74_9_3_1_Execute  (cur));
  Log.Message( HLTC74_9_3_2_Execute  (cur));        
  Log.Message( HLTC74_9_4_Execute  (cur));// Пока эти тест кейсы(работа с мышью) трудно автоматизировать.                                                          
  Log.Message( HLTC74_10_1_Execute  (cur));        
  Log.Message( HLTC74_10_2_Execute  (cur));
  Log.Message( HLTC74_10_3_1_Execute  (cur));
  Log.Message( HLTC74_10_3_2_Execute  (cur)); 
  Log.Message( HLTC74_10_3_3_Execute  (cur)); 
  Log.Message( HLTC74_10_3_4_Execute  (cur));    
  Log.Message( HLTC74_10_3_5_Execute  (cur));  
  Log.Message( HLTC74_10_3_6_Execute  (cur));   
  Log.Message( HLTC74_10_3_7_Execute  (cur));     
//12.03.2006----------------------         
  Log.Message( HLTC74_10_4_2_1_Execute  (cur)); 
  Log.Message( HLTC74_10_5_Execute  (cur));  
  Log.Message( HLTC74_10_9_1_Execute  (cur)); 
  Log.Message( HLTC74_10_9_2_1_Execute  (cur));      
  Log.Message( HLTC74_10_9_2_2_1_Execute (cur));
  Log.Message( HLTC74_10_9_2_2_2_Execute (cur));
  Log.Message( HLTC74_10_9_4_Execute (cur));// Написать после того, как поправят требования}      
  //Log.Message( HLTC74_10_10_1_4_Execute  (cur));//Написать после исправления    
  {Log.Message( HLTC74_10_10_2_4_Execute  (cur));  
  Log.Message( HLTC74_10_11_Execute  (cur));    
  Log.Message( HLTC74_10_12_Execute  (cur));
  Log.Message( HLTC74_10_14_Execute  (cur)); 
  Log.Message( HLTC74_10_16_Execute  (cur));   
  Log.Message( HLTC74_10_17_1_Execute  (cur));
  Log.Message( HLTC74_10_17_3_Execute  (cur));
  Log.Message( HLTC74_10_18_Execute  (cur));   
  Log.Message( HLTC74_10_7_Execute  (cur));
  Log.Message( HLTC74_12_1_Execute  (cur));  
  Log.Message( HLTC74_12_2_Execute  (cur)); 
  Log.Message( HLTC74_12_3_Execute  (cur));
  Log.Message( HLTC74_12_4_Execute  (cur)); 
  Log.Message( HLTC74_12_5_Execute  (cur)); 
//5.10.2006----------------------         
  Log.Message( HLTC74_9_5_1_Execute (cur));  
  Log.Message( HLTC74_9_5_3_Execute (cur)); 
//6.10.2006---------------------- 
  Log.Message( HLTC74_9_4_2_1_Execute (cur));
  Log.Message( HLTC74_9_4_2_2_Execute (cur));
  Log.Message( HLTC74_9_4_2_3_Execute (cur));
  Log.Message( HLTC74_9_4_2_4_Execute (cur));
  Log.Message( HLTC74_9_4_2_5_Execute (cur));
//9.10.2006----------------------      
  Log.Message( HLTC74_11_2_Execute (cur)); 
  Log.Message( HLTC74_11_3_Execute (cur)); 
//11.10.2006----------------------            
  Log.Message( HLTC74_2_3_1_3_Execute (cur)); 
  Log.Message( HLTC74_2_3_2_1_Execute (cur)); 
  Log.Message( HLTC74_2_3_2_3_Execute (cur));  
  Log.Message( HLTC74_3_9_1_4_Execute (cur)); 
//12.10.2006----------------------      
  Log.Message( HLTC74_4_1_2_Execute (cur));    //New Base
  Log.Message( HLTC74_4_2_1_Execute (cur)); 
  Log.Message( HLTC74_4_2_2_Execute (cur));    //Old Base
  Log.Message( HLTC74_4_2_3_Execute (cur));    //Old Base
  Log.Message( HLTC74_2_3_2_2_Execute (cur));  //Old Base
//13.10.2006----------------------
  Log.Message( HLTC74_4_3_2_Execute (cur));    //Old Base
  Log.Message( HLTC74_4_3_4_Execute (cur));
  Log.Message( HLTC74_8_4_Execute (cur)); 
  Log.Message( HLTC74_7_2_3_Execute (cur));    //Old Base 
//13.10.2006----------------------
}
  //Log.Message( HLTC74_9_4_1_Execute (cur));
  {Log.Message( HLTC74_8_5_Execute (cur));
//---HLTC74.13: Экспорт/импорт в xml----------------
  Log.Message( HLTC74_13_1_1_Execute (cur));}
//---HLTC74.14: Backup/Restore данных пользователя----------------
  //Log.Message( HLTC74_14_1_Execute (cur));
  //Log.Message( HLTC74_14_2_Execute (cur));
  //Log.Message( HLTC74_14_3_Execute (cur));
  //Log.Message( HLTC74_14_8_Execute (cur));  
  //Log.Message( HLTC74_2_4_1_Execute (cur));     
  //Log.Message( HLTC74_3_1_10_Execute (cur));
  //Log.Message( HLTC74_3_1_11_1_Execute (cur));
  //Log.Message( HLTC74_3_1_11_2_Execute (cur));  
  //Log.Message( HLTC74_3_1_11_3_1_Execute (cur));
  //Log.Message( HLTC74_3_1_11_3_2_Execute (cur));
  //Log.Message( HLTC74_3_1_11_3_3_Execute (cur));
  //Log.Message( HLTC74_3_1_11_3_4_Execute (cur));
  //Log.Message( HLTC74_3_1_11_3_5_Execute (cur));
  //Log.Message( HLTC74_3_1_11_3_6_Execute (cur));
  //Log.Message( HLTC74_3_1_11_3_7_Execute (cur));
  //Log.Message( HLTC74_3_1_11_3_8_Execute (cur));
  
  //Log.Message( HLTC74_8_2_1_Execute (cur));
  //Log.Message( HLTC74_8_2_2_Execute (cur));
  //Log.Message( HLTC74_8_2_3_Execute (cur));
  //Log.Message( HLTC74_8_2_4_Execute (cur));   
  //Log.Message( HLTC74_8_6_Execute (cur));
  Log.Message( HLTC74_3_1_4_3_Execute (cur));
  //Log.Message(HLTC74_13_1_2_Execute(cur));  
  //Log.Message(HLTC74_13_2_1_Execute(cur));
//------------------------------------------------------------------------------- 
end;

procedure test1;
var
i;
begin    
  OpenDocByNumber(10003000);
  for i := 115 to 210 do
  begin  
    if NOT SaveToFoldersExt('Мои документы', IntToStr(i), '') then 
      Raise('Не удалось сохранить закладку:' + IntToStr(i));
  end;   
end;