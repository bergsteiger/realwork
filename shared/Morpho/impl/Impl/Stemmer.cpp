////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Модуль: "w:/shared/Morpho/impl/Impl/Stemmer.cpp"
// генератор файлов реализации C++ (.cpp)
// Generated from UML model, root element: <<UtilityClass::Class>> shared::Morpho::Impl::Stemmer
//
// Стеммер
//
//
// Все права принадлежат ООО НПП "Гарант-Сервис".
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "shared/Core/sys/std_inc.h"
#include "shared/Morpho/impl/Impl/Stemmer.h"

//#UC START# *51B1E9C003AA_CUSTOM_INCLUDES*
#include "shared/GCL/str/str_conv.h"
//#UC END# *51B1E9C003AA_CUSTOM_INCLUDES*

namespace Morpho {
namespace Impl {

//#UC START# *51B1E9C003AA*
// Окончания русских слов. Отсортированы в лексикографическом порядке.
static const char* RUS_ENDINGS [] = {
	"а","ав","авал","авала","авая","аев","аем","аема","аемой","ает","ал","ала","али",
	"ало","ам","ами","ан","ана","ание","аний","анин","ано","аном","ась","ат","атся",
	"ать","ах","ашей","ащая","аще","ащим","ащих","ают","аяся","бой","бу","в","вал",
	"вала","ват","ватой","ватом","вка","вке","вки","вкой","вое","вок","вшая","вшей",
	"вшейся","вшем","вшему","вши","вшим","вших","вшую","вым","гли","дшей","дши","е",
	"еала","ев","евал","евала","евая","евой","его","егося","ее","еев","ееся","ей",
	"ел","ели","ело","ем","емая","емо","емой","емом","емся","емуся","емы","ен","ена",
	"енем","ение","ений","енно","енного","енный","ено","еной","еном","ены","ести","ете",
	"ется","еть","ец","ешь","ещей","ею","еюся","жий","зли","зм","зма","зме","змом","зму",
	"зти","и","иала","ив","ивал","ивала","ивая","ие","иев","ией","ием","иеся","ии","ий",
	"ийся","ил","ила","или","илий","ило","им","има","имая","ими","имо","имой","имы","ина",
	"иная","ино","иной","ином","ирую","ируя","истой","ись","ит","ите","ится","ить","их",
	"ихся","иче","ишей","ишь","ию","ия","й","йка","йке","йки","йкой","йной","йся","йте",
	"йти","йше","йшей","йшим","ка","кам","ке","ки","кие","кий","кими","кли","кой","ку",
	"л","ла","лен","лена","ли","лива","ливой","ливы","ло","лось","лся","льно","ми",
	"мися","мое","мым","мя","н","на","ная","него","нее","нему","ние","нием","нии","ний",
	"ним","ними","нию","ниях","нна","ннем","нние","нний","нной","нном","нняя","но",
	"ного","ное","ной","ном","нута","нутом","нуты","нуть","ный","ным","о","ов","овав",
	"овал","овала","ован","ована","ованно","овано","ованы","овая","овли","овной","овой",
	"овом","ого","ое","оев","ой","ок","ока","оки","ола","оли","ом","омая","ому","она",
	"оний","онно","оном","ости","ость","ою","ск","ская","ские","ский","ским","ских",
	"ского","ское","ской","ском","ств","ства","стве","ство","ством","ству","стей","сти",
	"стью","сь","та","тая","тесь","ти","тивы","тие","тием","тии","тое","том","тся","тым",
	"ть","ться","у","уала","ув","уемой","ует","ул","ула","ули","уло","ум","уном","усь",
	"ут","утой","утся","уты","ух","ушая","ушей","ущая","уще","ущим","ущих","ую","уюся",
	"уют","ца","цев","ции","ций","цию","ция","чатой","че","чен","чески","чива","чивы",
	"чии","чий","чли","чна","чно","чти","чь","чье","чьей","чьи","чься","шего","шее",
	"шей","шемся","шему","шен","ши","шие","ший","шийся","шими","шимся","ших","шли","шься",
	"щего","щее","щей","щейся","щемся","щему","щен","щие","щий","щийся","щими","щимся",
	"щих","щую","ы","ывал","ывала","ые","ый","ыл","ыли","ыло","ым","ыми","ыт","ытий","ыть",
	"ых","ышей","ь","ье","ьев","ьего","ьей","ьем","ьему","ьи","ьим","ьими","ьми","ьна",
	"ьной","ьном","ьте","ьше","ья","ьям","ьях","ю","юсь","ются","ющая","юще","ющем","ющим",
	"ющих","юю","я","яв","яев","яем","яема","яемой","яет","ял","яла","яли","яло","ям",
	"ями","яние","яний","яной","ясь","ят","яте","ятой","ятся","ять","ях","ящая","яще",
	"ящем","ящим","ящих","яю","яют", ""
};

// Компаратор
struct TermComparator : public std::binary_function <char*, char*, bool> {
	bool operator () (const char* x, const char* y) const {
		return (strcmp (x, y) < 0);
	}
};
//#UC END# *51B1E9C003AA*

//////////////////////////////////////////////////////////////////////////////////////////
// self implementation

// выполнить
size_t Stemmer::execute (const std::string& word) {
	//#UC START# *51B1EBB60117*
	size_t word_len = word.size ();

	if (word_len >= 3) { // слова длиной меньше 3 символов не рассматриваем
		size_t i = 0;

		bool is_lexeme = false, has_vowel = false, has_consonant = false;

		// ищем лексему (в левом остатке должна быть одна гласная и одна согласная)
		for (; i < word_len && is_lexeme == false; ++i) {
			char ch = word [i];

			if (ch == 'О'
				|| ch == 'У'
				|| ch == 'А'
				|| ch == 'Е'
				|| ch == 'И'
				|| ch == 'Э'
				|| ch == 'Ю'
				|| ch == 'Я'
			) {
				has_vowel = true; // содержит гласную
			} else {
				has_consonant = true; // содержит согласную
			}

			is_lexeme = (has_consonant && has_vowel);
		}

		// если слово является лексемой, то пытаемся отбросить окончание
		if (is_lexeme && i != word_len) {
			std::string str_word = word;

			GCL::to_lower (str_word);

			size_t sz = sizeof (RUS_ENDINGS) / sizeof (char*);

			const char* ptr = str_word.c_str ();

			const char** RUS_ENDINGS_END = RUS_ENDINGS + sz - 1;

			for (; i < word_len; ++i) {
				if (std::binary_search (RUS_ENDINGS, RUS_ENDINGS_END, ptr + i, TermComparator ())) {
					word_len = i;
					break;
				}
			}
		}
	}

	size_t max_val = std::numeric_limits <char>::max ();

	if (word_len >= max_val) {
		word_len = max_val - 1;
	}

	return word_len;
	//#UC END# *51B1EBB60117*
}

} // namespace Impl
} // namespace Morpho

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

