
(object Petal
    version    	50
    _written   	"Rose 2006.0.0.061205"
    charSet    	204)

(object Class_Category "BaseFunctionImpl"
    is_unit    	TRUE
    is_loaded  	TRUE
    attributes 	(list Attribute_Set
	(object Attribute
	    tool       	"MDA Generator"
	    name       	"AbstarctOperation"
	    value      	"regular")
	(object Attribute
	    tool       	"MDA Generator"
	    name       	"IsNative"
	    value      	"false")
	(object Attribute
	    tool       	"MDA Generator"
	    name       	"WikiPageID (wiki)"
	    value      	(value Text 
|MDProcess,key:MDP,guid:456C0DD70110/Home/Ìîäåëü ïðîåêòà "MDProcess"/MDAModel/BaseFunctionImpl|4A2CE0E2012E
	    ))
	(object Attribute
	    tool       	"MDA Generator"
	    name       	"SourceType (wiki)"
	    value      	"wiki")
	(object Attribute
	    tool       	"MDA Generator"
	    name       	"GlobalLocally"
	    value      	"false")
	(object Attribute
	    tool       	"MDA Generator"
	    name       	"VisabilityType"
	    value      	"ImplementationAccess")
	(object Attribute
	    tool       	"MDA Generator"
	    name       	"ElementCreationOrder"
	    value      	"19031084848"))
    quid       	"4A2CE0E2012E"
    documentation 	"ïàêåò ñ áàçîâé ðåàëèçàöèåé èíòåðôåéñà ôóêíöèé"
    stereotype 	"Impl"
    visible_categories 	(list visibility_relationship_list
	(object Visibility_Relationship
	    quid       	"4A2CE1150179"
	    supplier   	"Logical View::MDProcess::MDAModel::TemplateFunctions"
	    quidu      	"4A2CB63F01FA")
	(object Visibility_Relationship
	    quid       	"4A2CE14A008B"
	    supplier   	"Logical View::MDProcess::MDAModel::AbstractDumpers"
	    quidu      	"4571A092005D"))
    exportControl 	"Public"
    logical_models 	(list unit_reference_list
	(object Class "InternalFunctionBase"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"AbstarctOperation"
		    value      	"abstract")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsNative"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (cpp)"
		    value      	"w:/MDProcess/MDAModel/impl/BaseFunctionImpl/InternalFunctionBase.cpp")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (cpp)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (h)"
		    value      	"w:/MDProcess/MDAModel/impl/BaseFunctionImpl/InternalFunctionBase.h")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (h)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*4A2CE15C003D_DESTR_BODY*"
		    value      	(value Text 
|//#UC START# *4A2CE15C003D_DESTR_BODY*¤	//#UC END# *4A2CE15C003D_DESTR_BODY*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"WikiPageID (wiki)"
		    value      	(value Text 
|MDProcess,key:MDP,guid:456C0DD70110/Home/Ìîäåëü ïðîåêòà "MDProcess"/MDAModel/BaseFunctionImpl/InternalFunctionBase|4A2CE15C003D
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (wiki)"
		    value      	"wiki")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ElementCreationOrder"
		    value      	"19031087892"))
	    quid       	"4A2CE15C003D"
	    documentation 	"áàçîâàÿ ðåàëèçàöèÿ âñòðîåííîé ôóíêöèè øàáëîíà"
	    stereotype 	"Servant"
	    superclasses 	(list inheritance_relationship_list
		(object Inheritance_Relationship
		    quid       	"4B602C3F010B"
		    supplier   	"Logical View::MDProcess::MDAModel::BaseFunctionImpl::ListOperationBase"
		    quidu      	"4B581BCD0399"))
	    realized_interfaces 	(list realize_rel_list
		(object Realize_Relationship
		    quid       	"4A2CE1780323"
		    supplier   	"Logical View::MDProcess::MDAModel::TemplateFunctions::InternalFunction"
		    quidu      	"4A2CBBEB0257"))
	    operations 	(list Operations
		(object Operation "execute_impl"
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"AbstarctOperation"
			    value      	"abstract")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"TargetStereotype"
			    value      	"const")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"IsNative"
			    value      	"false")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CDC4B0370*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CDC4B0370*¤	if (params.size () < 2) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 2, params.size ());¤	}¤¤	std::string var_id (TemplatePainter::resolve_exp (params[0], painter));¤¤	ContainerOperations::ContainerTemplateOperationsFactory::get ().add (¤		this->get_container (var_id)¤		, params[1]¤		, painter¤	);¤¤	return std::string ();¤	//#UC END# *4A2CE18202C1_4A2CDC4B0370*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CDC760216*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CDC760216*¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤	std::string var_id = TemplatePainter::resolve_exp(params[0], painter);¤	get_container (var_id)->clear ();¤	¤	return std::string ();¤	//#UC END# *4A2CE18202C1_4A2CDC760216*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CDCB00068*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CDCB00068*¤	if (params.size () < 2) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 2, params.size ());¤	}¤¤	std::string var_id (TemplatePainter::resolve_exp (params[0], painter));¤	¤	TemplatePainter::ContainerDumper* cont = this->get_container_if_exists (var_id);¤	if (cont) {¤		return ContainerOperations::ContainerTemplateOperationsFactory::get ().count (¤			cont¤			, params[1]¤			, painter¤		);¤	}¤¤	return std::string ("0");¤	//#UC END# *4A2CE18202C1_4A2CDCB00068*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CDCF90061*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CDCF90061*¤	if (params.size () < 2) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 2, params.size ());¤	}¤	std::string source_list_id = TemplatePainter::resolve_exp(params[0], painter);¤	std::string dest_list_id = TemplatePainter::resolve_exp(params[1], painter);¤	¤	if (source_list_id.empty () == false && dest_list_id.empty () == false) {¤		TemplatePainter::ContainerDumper* dest_container = get_container (dest_list_id);¤		dest_container->clear ();¤		dest_container->add (get_container (source_list_id)->get_items ());¤	}¤	return std::string ();¤	//#UC END# *4A2CE18202C1_4A2CDCF90061*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CDD1F00DD*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CDD1F00DD*¤	if (params.size () < 2) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 2, params.size ());¤	}¤	TemplateFunctions::InternalFunction& func = TemplateFunctions::InternalFunctionFactory::make ("_count_in_list");¤¤	std::string count = func.execute (params, painter);¤	return count == "0" ? "false" : "true";¤	//#UC END# *4A2CE18202C1_4A2CDD1F00DD*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CDD4503B2*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CDD4503B2*¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤	std::string var_id = TemplatePainter::resolve_exp(params[0], painter);		¤	¤	std::string ret = "true";¤	TemplatePainter::ContainerDumper* cont = get_container_if_exists (var_id);¤	if (cont) {¤		bool is_empty = cont->size () == 0;¤		ret = is_empty ? "true" : "false";¤	}¤	return ret;¤	//#UC END# *4A2CE18202C1_4A2CDD4503B2*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CDD9B015C*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CDD9B015C*¤	if (params.size () < 2) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 2, params.size ());¤	}¤	std::string res ("false");¤	std::string first_id = TemplatePainter::resolve_exp(params[0], painter);¤	std::string second_id = TemplatePainter::resolve_exp(params[1], painter);¤	¤	const TemplatePainter::ContainerDumper* first_cont = get_container_if_exists (first_id);¤	const TemplatePainter::ContainerDumper* second_cont = get_container_if_exists (second_id);¤	¤	if (¤		first_cont¤		&& second_cont¤	) {¤		if (first_cont->is_equal (second_cont)) {¤			res = "true";¤		}¤	} else {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += ": Can't find list: ";		¤		if (!first_cont) {¤			mess += first_id;¤			if (!second_cont) {¤				mess += ", ";¤				mess += second_id;¤			}¤		} else {¤			mess += first_id;¤		}¤	}¤	return res;¤	//#UC END# *4A2CE18202C1_4A2CDD9B015C*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CDDDE02A3*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CDDDE02A3*¤	if (params.size () < 2) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 2, params.size ());¤	}¤	std::string list_id = TemplatePainter::resolve_exp(params[0], painter);¤	std::string var_id = TemplatePainter::resolve_exp(params[1], painter);¤	¤	TemplatePainter::ContainerDumper* cont = get_container_if_exists (list_id);¤	if (cont) {¤		ContainerOperations::ContainerTemplateOperationsFactory::get ().pop_first_to_var (¤			cont¤			, var_id¤		);¤	}¤¤	return std::string ();¤	//#UC END# *4A2CE18202C1_4A2CDDDE02A3*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CDE0D015D*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CDE0D015D*¤	if (params.size () < 2) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 2, params.size ());¤	}¤	std::string list_id = TemplatePainter::resolve_exp(params[0], painter);¤	std::string var_id = TemplatePainter::resolve_exp(params[1], painter);¤	¤	TemplatePainter::ContainerDumper* cont = get_container_if_exists (list_id);¤	if (cont) {¤		ContainerOperations::ContainerTemplateOperationsFactory::get ().pop_last_to_var (¤			cont¤			, var_id¤		);¤	}¤¤	return std::string ();¤	//#UC END# *4A2CE18202C1_4A2CDE0D015D*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CDE3D00A2*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CDE3D00A2*¤	if (params.size () < 2) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 2, params.size ());¤	}¤¤	std::string var_id = TemplatePainter::resolve_exp(params[0], painter);¤¤	TemplatePainter::ContainerDumper* cont = get_container_if_exists (var_id);¤	¤	if (cont) {¤¤		ContainerOperations::ContainerTemplateOperationsFactory::get ().remove (¤			cont¤			, params[1]¤			, painter¤		);¤	}¤¤	return std::string ();¤	//#UC END# *4A2CE18202C1_4A2CDE3D00A2*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CDE9903E3*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CDE9903E3*¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤	std::string res;¤	std::string list_id = TemplatePainter::resolve_exp(params[0], painter);¤¤	TemplatePainter::ContainerDumper* cont = get_container_if_exists (list_id);¤	if (cont) {¤		res = boost::lexical_cast<std::string> (cont->size ());¤	} else {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - can't find list with id: ";¤		mess += list_id;¤		throw Base::FatalError (mess);¤	}¤¤	return res;¤	//#UC END# *4A2CE18202C1_4A2CDE9903E3*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CDEDA0203*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CDEDA0203*¤	¤¤	if (params.size () < 2) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 2, params.size ());¤	}¤	std::string var_id = TemplatePainter::resolve_exp(params[0], painter);¤¤	TemplatePainter::ContainerDumper* cont = get_container_if_exists (var_id);¤	if (cont) {¤		if (cont->size () > 0) {¤			TemplatePainter::ContainerDumper* key_list = 0;¤			if (params.size() > 2) {¤				std::string key_list_id = TemplatePainter::resolve_exp(params[2], painter);¤¤				key_list = get_container_if_exists (key_list_id);¤				if (!key_list) {¤					std::string mess (GDS_CURRENT_FUNCTION);¤					mess += " - can't find key list with id: ";¤					mess += key_list_id;							¤					throw Base::FatalError (mess);¤				}¤			}¤¤			ContainerOperations::ContainerTemplateOperationsFactory::get ().sort (¤				cont¤				, params[1]¤				, painter¤				, key_list¤			);			¤		}¤	}¤	¤	return std::string ();¤	//#UC END# *4A2CE18202C1_4A2CDEDA0203*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CDF1A03B3*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CDF1A03B3*¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤	std::string var_id = TemplatePainter::resolve_exp(params[0], painter);		¤	¤	TemplatePainter::ContainerDumper* cont = get_container_if_exists (var_id);¤	if (cont) {¤		std::string command;¤		if (params.size() > 1) {¤			std::string param1 = params[1];¤			if (GCL::border_with (param1.data(), '"')) {¤				command.assign (param1, 1, param1.size () - 2);							¤			} else {¤				command = param1;¤			}¤		}¤		ContainerOperations::ContainerTemplateOperationsFactory::get ().unique (cont, command, painter);¤	}¤	return std::string ();¤	//#UC END# *4A2CE18202C1_4A2CDF1A03B3*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CDF41025C*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CDF41025C*¤	if (params.size () < 2) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 2, params.size ());¤	}¤	std::string var_id = TemplatePainter::resolve_exp(params[0], painter);¤	std::string param (params[1]);¤	if (GCL::border_with (param.data(), "\"")) {¤		param = TemplatePainter::resolve_exp (param, painter);¤		std::string text (param.begin () + 1, param.end () - 1);¤		AbstractDumperBase_var arg = new TemplatePainter::TextDumper (text.data());¤		¤		TemplatePainter::set_var_dumper (var_id, arg.ptr ());¤	} else {¤		std::string::const_iterator it = param.begin();¤		const AbstractDumperBase* dumper = painter->get_dumper_by_template(it, param.end ());¤¤		////íóæíî ïðîâåðèòü, åñëè ýòî òåêñòîâûé äàìïåð - íóæíî óâåëè÷èòü íà íåì ñ÷åò÷èê ññûëîê,¤		////èíà÷å îí ìîæåò ïðîòóõíóòü¤		//const TemplatePainter::TextDumper* text_dumper = dynamic_cast<const TemplatePainter::TextDumper*> (dumper);¤		//if (text_dumper) {¤		//	text_dumper->addref ();¤		//	TemplatePainter::dumpers_heap ().push_back (const_cast<TemplatePainter::TextDumper*> (text_dumper));¤		//}¤¤		TemplatePainter::set_var_dumper (var_id, dumper);¤	}¤	return std::string ();¤	//#UC END# *4A2CE18202C1_4A2CDF41025C*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CDF6F01D4*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CDF6F01D4*¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤¤	std::string var_id = TemplatePainter::resolve_exp(params[0], painter);¤	TemplatePainter::delete_var_dumper (var_id);¤¤	return std::string ();¤	//#UC END# *4A2CE18202C1_4A2CDF6F01D4*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CE8150126*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CE8150126*¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤	std::string dbg_id = TemplatePainter::resolve_exp (params[0], painter);¤	TRACE ("DEBUG POINT: %s\n", dbg_id.data());¤	return std::string ();¤	//#UC END# *4A2CE18202C1_4A2CE8150126*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CE8B80202*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CE8B80202*¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤	std::string str = TemplatePainter::resolve_exp(params[0], painter);¤	int i = atoi (str.c_str()+1);¤	char buf[32];¤	std::string ret = itoa (i, buf, 16);¤¤	int length = atoi (params[1].c_str());¤¤	while (length - (int)ret.size() > 0) {¤		ret = "0" + ret;¤	}¤	return ret;¤	//#UC END# *4A2CE18202C1_4A2CE8B80202*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CE8E50142*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CE8E50142*¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤	std::string::const_iterator it = params[0].begin();¤	const AbstractDumperBase* dumper = painter->get_dumper_by_template(it, params[0].end ());		¤	if (¤		dumper != 0¤		&& (¤			dumper->get_model_class_str () == "ClassDiagram"¤			|| dumper->get_model_class_str () == "ScenarioDiagram"¤			|| dumper->get_model_class_str () == "StateDiagram"¤		)¤	) {¤¤		AbstractDumperBase::DiagramItemCollection items;¤													¤		std::string diag_uid = dumper->get_model_unique_id_str () + ".jpg";¤¤		std::string new_hash_str;¤		Core::Aptr<CxMemFile> picture = const_cast<AbstractDumperBase*>(dumper)->dump_diagram (items, new_hash_str);¤		if (¤			picture.ptr () != 0 ¤			&& painter->get_main_scope ()->get_source_type () == AbstractDumperBase::GST_WIKI¤		) {	¤			//ñîîáùàåì î íà÷àëå òðàíçàêöèè¤			AbstractDumper::on_start_wiki_generation ();¤			std::string uid = painter->get_main_scope ()->get_model_unique_id_str ();¤¤			GenSupport::PageProxy& page = GenSupport::PageProxyFactory::get (uid.c_str ());¤			¤			if (page.is_new_page () == true) {¤				AbstractDumperBase::GenSourceInfo srs;¤				srs.source.wiki_page (&page);¤				AbstractDumperBase::TransactionContainer::instance ()->add_source (srs);¤			}¤			ServerGate::GenerationContents::Diagram diag;				¤			¤			size_t len = picture->Size ();				¤			if (len <= AbstractDumperBase::MAX_PICTURE_SIZE) {¤				if (len != 0) {					¤					diag.picture.replace (len, len, picture->GetBuffer (false), false);					¤				}					¤			} else {¤				std::string mess ("Diagram is very big (more than");¤				mess += boost::lexical_cast<std::string> (AbstractDumperBase::MAX_PICTURE_SIZE);¤				mess += "b) and we can't transfer it to Confluence";¤				painter->get_main_scope ()->write_warning_log (¤					mess¤				);¤				return std::string ();¤			}¤¤			std::string owner_uid (painter->get_owner ()->get_model_unique_id_str ());¤¤			AbstractDumperBase::DiagramItemCollection fixed_items;¤			for (¤				AbstractDumperBase::DiagramItemCollection::iterator it = items.begin ()¤				; it != items.end ()¤				; ++it¤			) {¤				if (!it->uid/*.get ()*/.empty () && it->uid != owner_uid) {¤					fixed_items.push_back (*it);¤				}¤			}¤			size_t items_size = fixed_items.size ();¤			diag.map.length (items_size);¤							¤			std::string guid_hash = boost::lexical_cast<std::string> (items_size);¤			for (size_t i = 0; i < items_size; ++i) {¤				diag.map[i].x1 = fixed_items[i].x1;¤				diag.map[i].y1 = fixed_items[i].y1;¤									¤				diag.map[i].x2 = fixed_items[i].x2;¤				diag.map[i].y2 = fixed_items[i].y2;¤¤				diag.map[i].x3 = fixed_items[i].x3;¤				diag.map[i].y3 = fixed_items[i].y3;¤¤				diag.map[i].x4 = fixed_items[i].x4;¤				diag.map[i].y4 = fixed_items[i].y4;¤¤				diag.map[i].guid = fixed_items[i].uid/*.get ()*/.c_str ();¤				guid_hash += fixed_items[i].uid;¤			}¤			boost::hash<std::string> str_hash;		¤			new_hash_str += ", image map guids: " + boost::lexical_cast<std::string> (str_hash (guid_hash));¤			CORBA::String_var old_hash = page.get_diagram_hash (diag_uid.c_str ());¤			¤			if (¤				ACE_OS::strcmp (old_hash.in (), new_hash_str.c_str ()) != 0¤				|| dumper->is_changed ()¤			) {¤				//äîáàâëÿåì äèàãðàììó ê ñòðàíèöå¤				diag.hash = new_hash_str.c_str ();¤				¤				AbstractDumperBase::GenSourceInfo srs;¤				srs.source.wiki_page (&page);¤				AbstractDumperBase::TransactionContainer::instance ()->add_source (srs);¤				try {¤					page.add_diagram (diag_uid.c_str (), diag);	¤					AbstractDumperBase::get_source_to_dumpers ()[srs].push_back (dumper);¤				} catch (ServerGate::GenerationContents::TransactionConflict&) {¤					painter->get_main_scope ()->write_warning_log ("TransactionConflict");¤				} catch (ServerGate::GenerationContents::ReadOnlyContent&) {¤					painter->get_main_scope ()->write_warning_log ("ReadOnlyContent");¤				} catch (CORBA::Exception& ex) {¤					std::string mess = "Exception in dump_diagram: ";¤					mess += ex._info ().c_str ();¤					painter->get_main_scope ()->write_error_log (mess, true);¤				}¤			}¤		}¤	} else {¤		std::string mess (params[0]);¤		mess += " is not a diagram, it is: \"";¤		mess += dumper ? dumper->get_model_class_str () : "null";¤		mess += "\"";¤		¤		throw Base::FatalError (mess);¤	}¤	return std::string ();¤	//#UC END# *4A2CE18202C1_4A2CE8E50142*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CE90803BA*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CE90803BA*¤	if (params.size () < 2) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 2, params.size ());¤	}¤	std::string counter_id = TemplatePainter::resolve_exp(params[0], painter);¤¤	AbstractDumperBase::CodeTemplate::const_iterator it = params[1].begin ();¤	AbstractDumperBase::CodeTemplate::const_iterator it_end = params[1].end ();¤¤	const AbstractDumperBase* adb = painter->get_dumper_by_template (it, it_end);¤	if (!adb) {¤		throw Base::FatalError (¤			std::string ("Íå óäàëîñü íàéòè ýëåìåíò \"") ¤			+ params[1]¤			+ std::string ("\"")¤		);¤	}¤	return adb->element_counter (counter_id);¤	//#UC END# *4A2CE18202C1_4A2CE90803BA*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CE92600B3*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CE92600B3*¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤	¤	std::string message = TemplatePainter::resolve_exp(params[0], painter);¤	const AbstractDumperBase* adb = painter->get_owner () ? painter->get_owner () : painter->get_main_scope ();¤	¤	if (adb) {¤		adb->write_template_error_log(message.c_str ());¤	} else {¤		GDS_ASSERT_MSG(adb !=0,("Ïîïûòêà âûçûâàòü ôóíêöèè %%f_error ïðè 0-îì %%S è %%B"));¤		throw Base::FatalError ("Ïîïûòêà âûçûâàòü ôóíêöèè %f_error ïðè 0-îì %S è %B");¤	}¤	return std::string ();¤	//#UC END# *4A2CE18202C1_4A2CE92600B3*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CEB2C0373*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CEB2C0373*¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤	std::string expression = TemplatePainter::resolve_exp(params[0], painter);¤	try {¤		double res = GCI::Math::CalculatorFactory::make ().evaluate (expression);¤		std::string result = boost::lexical_cast<std::string> (res);¤		return result;¤	} catch (GCI::Math::BadExpression&) {¤		std::string mess("Can't parse expression: ");¤		mess += expression;¤		throw Base::FatalError (mess);¤	} catch (...) {¤		std::string mess("Exception, when evaluate expression: ");¤		mess += expression;¤		throw Base::FatalError (mess);¤	}¤	//#UC END# *4A2CE18202C1_4A2CEB2C0373*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CEB4801A1*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CEB4801A1*¤	if (params.size () < 2) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 2, params.size ());¤	}¤	std::string ret ("false");¤	std::string dumper = TemplatePainter::resolve_exp(params[0], painter);¤	AbstractDumperBase::GenID gen_id = TemplatePainter::resolve_exp(params[1], painter);¤	¤	std::string::const_iterator it = dumper.begin();¤	const AbstractDumperBase* adb = painter->get_dumper_by_template(it, dumper.end ());¤	if (adb) {¤		const AbstractDumperBase::StereotypeID& model_stereotype (adb->get_model_stereotype_str());¤		AbstractDumperBase::Templates::iterator f = AbstractDumperBase::s_templates.find (model_stereotype);¤¤		if (f != AbstractDumperBase::s_templates.end()) {¤			AbstractDumperBase::GT_map::iterator gen = f->second.generators.find(gen_id);¤			if (¤				gen != f->second.generators.end()¤				&& gen->second.code_template.empty () == false¤			) {¤				ret = "true";¤			}¤		}¤	}	¤	return ret;¤	//#UC END# *4A2CE18202C1_4A2CEB4801A1*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CEB690080*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CEB690080*¤	if (params.size () < 2) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 2, params.size ());¤	}¤	std::string dumper_id = TemplatePainter::resolve_exp (params[0], painter);¤	std::string::const_iterator it = dumper_id.begin();¤	const AbstractDumperBase* adb = painter->get_dumper_by_template(it, dumper_id.end ());¤	if (adb) {¤		AbstractDumperBase::StereotypeID meta_class (TemplatePainter::resolve_exp (params[1], painter));¤		const AbstractDumperBase::StereotypeID& adb_meta_class (adb->get_model_stereotype_str());¤		¤		class local {¤		public:¤			static bool is_kind_of_impl (const AbstractDumperBase::StereotypeID& source_meta_class, const AbstractDumperBase::StereotypeID& kind) {¤				if (source_meta_class == kind) {¤					return true;¤				}¤				¤				AbstractDumperBase::Template& tpl = AbstractDumperBase::get_template (source_meta_class);¤				for (¤					AbstractDumperBase::StereotypeSet::const_iterator it = tpl.base_stereotypes.begin ()¤					; it != tpl.base_stereotypes.end ()¤					; ++it¤				) {¤					if (is_kind_of_impl (*it, kind)) {¤						return true;¤					}¤				}¤¤				return false;¤			}¤		};¤		¤		if (local::is_kind_of_impl (adb_meta_class, meta_class)) {¤			return std::string ("true");¤		}¤	}¤	return std::string ("false");¤	//#UC END# *4A2CE18202C1_4A2CEB690080*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CEB8F0250*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CEB8F0250*¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤	std::string dumper_id = TemplatePainter::resolve_exp (params[0], painter);¤	std::string::const_iterator it = dumper_id.begin();¤	const AbstractDumperBase* adb = painter->get_dumper_by_template(it, dumper_id.end ());¤	std::string res;¤	if (adb) {¤		static std::string java_substr ("java/src/java");¤		static size_t java_substr_len (java_substr.length ());¤¤		res = adb->get_root_dir (true);¤		res += "/";¤		res += adb->create_relative_file_name_with_parent();¤		std::string::size_type pos = res.find (java_substr);¤		if (pos != std::string::npos) {¤			res = res.substr (0, pos + java_substr_len);¤		}¤	} else {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += ": dumper ";¤		mess += dumper_id;¤		mess += " is null";¤		throw Base::FatalError (mess);¤	}¤	return res;¤	//#UC END# *4A2CE18202C1_4A2CEB8F0250*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CEBB60378*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CEBB60378*¤	class local {¤	public:¤		static const std::string make_path (const std::string& file_path) {¤			static std::string java_substr ("java/src/java/");¤			static size_t java_substr_len (java_substr.length ());¤			¤			std::string res (file_path);			¤			std::string::size_type pos = res.find (java_substr);¤			if (pos != std::string::npos) {¤				res = res.substr (pos + java_substr_len);¤			}¤			return res;¤		}¤	};¤¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤¤	std::string dumper_id = TemplatePainter::resolve_exp (params[0], painter);¤	std::string::const_iterator it = dumper_id.begin();¤	const AbstractDumperBase* adb = painter->get_dumper_by_template(it, dumper_id.end ());¤	std::string res;¤	if (adb) {¤		¤		std::string file_name = adb->create_file_name ();¤		bool has_self_output = file_name.empty () == false;¤		const AbstractDumperBase* parent_with_output = adb;¤		if (!has_self_output) {			¤			while (¤				(parent_with_output = parent_with_output->parent ())¤				&& file_name.empty ()¤			) {¤				file_name = parent_with_output->create_file_name ();¤			}¤		}¤		if (file_name.empty () == false) {¤			std::string drive;¤			std::string dir;¤			std::string fname;¤			std::string ext;¤			¤			if (file_name.find ("/") != std::string::npos) {¤			¤				GCL::FileOp::splitpath (file_name, drive, dir, fname, ext, false);¤				res = drive;¤				res += dir;¤				res += fname;¤				res = local::make_path (res);¤				GCL::str_replace (res, "/", ".");¤			} else {¤				res = file_name;¤			}¤			if (!has_self_output && parent_with_output) {¤				GCL::StrVector path_to_parent;¤				const AbstractDumperBase* parent = adb;¤				path_to_parent.insert (path_to_parent.begin (), adb->get_name_str ());¤				while (¤					(parent = parent->parent ())¤					&& parent != parent_with_output¤				) {¤					path_to_parent.insert (path_to_parent.begin (), parent->get_name_str ());¤				}¤				std::string temp = GCL::join (path_to_parent, ".");¤				if (temp.empty () == false) {¤					res += ".";¤					res += temp;¤				}¤			}¤		}¤	} else {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += ": dumper ";¤		mess += dumper_id;¤		mess += " is null";¤		throw Base::FatalError (mess);¤	}¤	return res;¤	//#UC END# *4A2CE18202C1_4A2CEBB60378*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CEBE3020D*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CEBE3020D*¤	if (params.size () < 2) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 2, params.size ());¤	}¤	AbstractDumperBase::GenID tmp = AbstractDumperBase::s_current_map;¤	AbstractDumperBase::s_current_map = TemplatePainter::resolve_exp(params[0], painter);¤		¤	std::string::const_iterator it = params[1].begin();		¤	const AbstractDumperBase* adb = painter->get_dumper_by_template(it, params[1].end ());¤	¤	std::string target_path;¤	std::string target_root;¤	if (adb) {¤		target_path = adb->create_relative_dir_name();¤		target_root = adb->get_root_dir (false);¤	}¤	¤	AbstractDumperBase::s_current_map = tmp;¤¤	if (target_path != "") {¤		return painter->get_main_scope ()->create_normolized_path (target_path.data(), target_root.data());¤	} else {¤		return std::string ();¤	}¤	//#UC END# *4A2CE18202C1_4A2CEBE3020D*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CEC0801DE*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CEC0801DE*¤	if (params.size () < 2) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 2, params.size ());¤	}¤	AbstractDumperBase::GenID tmp = AbstractDumperBase::s_current_map;¤	AbstractDumperBase::s_current_map = TemplatePainter::resolve_exp(params[0], painter);¤	¤	std::string::const_iterator it = params[1].begin();		¤	const AbstractDumperBase* adb = painter->get_dumper_by_template(it, params[1].end ());¤	¤	std::string target_path;¤	std::string target_root;¤	if (adb) {¤		target_path = adb->create_relative_file_name();¤		target_root = adb->get_root_dir (false);¤	}¤	¤	AbstractDumperBase::s_current_map = tmp;¤¤	if (target_path != "") {¤		return painter->get_main_scope ()->create_normolized_path (target_path.data(), target_root.data());¤	} else {¤		return std::string ();¤	}¤	//#UC END# *4A2CE18202C1_4A2CEC0801DE*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CEC230045*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CEC230045*¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤	¤	std::string new_gen_id = TemplatePainter::resolve_exp(params[0], painter);¤¤	AbstractDumperBase::s_current_map = new_gen_id;¤¤	return std::string ();¤	//#UC END# *4A2CE18202C1_4A2CEC230045*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CEC450138*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CEC450138*¤	if (params.size () < 2) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 2, params.size ());¤	}¤	std::string prop_id = TemplatePainter::resolve_exp(params[0], painter);¤	std::string prop_val = TemplatePainter::resolve_exp(params[1], painter);¤	AbstractDumperBase::s_gen_infos[AbstractDumperBase::s_current_map]->set_property (prop_id, prop_val);¤¤	return std::string ();¤	//#UC END# *4A2CE18202C1_4A2CEC450138*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CEC5F02EA*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CEC5F02EA*¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤	std::string value = TemplatePainter::resolve_exp(params[0], painter);¤	AbstractDumperBase::s_intend_shift += atoi(value.c_str());¤	return std::string ();¤	//#UC END# *4A2CE18202C1_4A2CEC5F02EA*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CEC790020*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CEC790020*¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤	std::string param = TemplatePainter::resolve_exp(params[0], painter);¤	AbstractDumperBase::s_shift_scope = (param == "true");¤	return std::string ();¤	//#UC END# *4A2CE18202C1_4A2CEC790020*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CECA2024F*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CECA2024F*¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤	std::string ret = TemplatePainter::resolve_exp(params[0], painter);¤	return GCL::convert_to_borland_style(ret, GCL::CI_FUNCTION);¤	//#UC END# *4A2CE18202C1_4A2CECA2024F*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CECBF0234*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CECBF0234*¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤	std::string ret = TemplatePainter::resolve_exp(params[0], painter);¤	return GCL::convert_to_java_style(ret, GCL::CI_FUNCTION);¤	//#UC END# *4A2CE18202C1_4A2CECBF0234*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CECE100F9*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CECE100F9*¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤	std::string ret = TemplatePainter::resolve_exp(params[0], painter);¤	return GCL::convert_to_omg_style(ret, GCL::CI_FUNCTION);¤	//#UC END# *4A2CE18202C1_4A2CECE100F9*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CECFB01DE*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CECFB01DE*¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤	std::string colorref_str = TemplatePainter::resolve_exp(params[0], painter);¤	std::string delimetr (",");¤	if (params.size () >= 2) {¤		delimetr = TemplatePainter::resolve_exp(params[1], painter);¤	}¤	std::string ret;¤	if (colorref_str.empty () == false) {			¤		try {¤			unsigned long color = boost::lexical_cast<unsigned long> (colorref_str);			¤			ret = boost::lexical_cast<std::string> ((unsigned long)GetRValue (color));¤			ret += delimetr;¤			ret += boost::lexical_cast<std::string> ((unsigned long)GetGValue (color));¤			ret += delimetr;¤			ret += boost::lexical_cast<std::string> ((unsigned long)GetBValue (color));			¤		} catch (boost::bad_lexical_cast&) {¤			std::string mess ("Bad param in function: ");¤			mess += GDS_CURRENT_FUNCTION;¤			mess += " (";¤			mess += colorref_str;¤			mess += ")";¤¤			throw Base::FatalError (mess);¤		}¤	}¤	return ret;¤	//#UC END# *4A2CE18202C1_4A2CECFB01DE*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CED120031*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CED120031*¤	class local {¤	public:¤		static const std::string quote_string (const std::string& source) {¤			std::string res (source);			¤			GCL::str_replace (res, "\"", "\\\"");¤			GCL::str_replace (res, "\\", "\\\\");¤			res.insert (0, "\"");¤			res.append ("\"");¤¤			return res;¤		}¤	};¤	if (params.size () < 2) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 2, params.size ());¤	}¤	std::string dumper_id = TemplatePainter::resolve_exp (params[0], painter);¤	std::string::const_iterator it = dumper_id.begin();¤	const AbstractDumperBase* adb = painter->get_dumper_by_template(it, dumper_id.end ());¤	¤	if (adb != 0) {¤		std::string var_id = TemplatePainter::resolve_exp(params[1], painter);¤		¤		TemplatePainter::ContainerDumper* container = get_container (var_id);¤		container->clear ();¤¤		const AbstractDumperBase::Template& tpl = adb->get_template ();¤		if (tpl.user_properties_group.is_nil () == false) {¤			const AbstractDumperBase::UserPropertyMap& props = tpl.user_properties_group->get_properties ();¤			AbstractDumperBase::UserPropertyMap::const_iterator it = props.begin ();¤			AbstractDumperBase::UserPropertyMap::const_iterator it_end = props.end ();¤			for (; it != it_end; ++it) {¤				std::string up_name = local::quote_string (it->first);¤				std::string up_value = adb->get_user_property_str (it->first);¤				if (up_value.empty ()) {¤					up_value = "\"\"";¤				} else {¤					up_value = local::quote_string (up_value);¤				}¤				std::string str (up_name + " = " + up_value);¤				AbstractDumperBase_cvar arg = new TemplatePainter::TextDumper (str.data());¤				container->add (arg.ptr ());¤¤			}			¤		}¤	}¤	return std::string ("");¤	//#UC END# *4A2CE18202C1_4A2CED120031*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CED2C0317*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CED2C0317*¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤¤	std::string message = TemplatePainter::resolve_exp(params[0], painter);¤	const AbstractDumperBase* adb = painter->get_owner () ? painter->get_owner () : painter->get_main_scope ();¤¤	if (adb) {¤		adb->write_template_warning_log(message.c_str ());¤	} else {¤		GDS_ASSERT_MSG(adb !=0,("Ïîïûòêà âûçûâàòü ôóíêöèè %%f_warning ïðè 0-îì %%S è %%B"));¤		throw Base::FatalError ("Ïîïûòêà âûçûâàòü ôóíêöèè %f_warning ïðè 0-îì %S è %B");¤	}¤¤	return std::string ();¤	//#UC END# *4A2CE18202C1_4A2CED2C0317*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CED5602EA*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CED5602EA*¤	if (params.size () < 2) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 2, params.size ());¤	}¤	AbstractDumperBase::GenID tmp = AbstractDumperBase::s_current_map;¤	std::string new_gen_id = TemplatePainter::resolve_exp(params[0], painter);¤	¤	AbstractDumperBase::s_current_map = new_gen_id;¤	std::string ret = TemplatePainter::resolve_exp(params[1], painter);¤	AbstractDumperBase::s_current_map = tmp;¤	return ret;¤	//#UC END# *4A2CE18202C1_4A2CED5602EA*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CE2440012*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CE2440012*¤	if (params.size () < 2) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 2, params.size ());¤	}¤¤	std::string res = TemplatePainter::resolve_exp (params[0], painter);¤	std::string prefix = TemplatePainter::resolve_exp (params[1], painter);¤	¤	if (prefix.empty () == false) {¤		std::string::size_type off = res.length () - prefix.length ();¤		if (off >= 0 && res.substr (off) == prefix) {¤			res.erase (off);¤		}¤	}¤	return res;¤	//#UC END# *4A2CE18202C1_4A2CE2440012*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CE2CF0035*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CE2CF0035*¤	if (params.size () < 2) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 2, params.size ());¤	}¤	std::string res = TemplatePainter::resolve_exp (params[0], painter);¤	std::string prefix = TemplatePainter::resolve_exp (params[1], painter);¤	¤	if (prefix.empty () == false) {¤		if (res.substr (0, prefix.length ()) == prefix) {¤			res.erase (0,  prefix.length ());¤		}¤	}¤	return res;¤	//#UC END# *4A2CE18202C1_4A2CE2CF0035*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CE3B603C9*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CE3B603C9*¤	if (params.size () < 2) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 2, params.size ());¤	}¤¤	std::string source_str = TemplatePainter::resolve_exp(params[0], painter);¤	std::string::size_type symbols_count = boost::lexical_cast<long> (TemplatePainter::resolve_exp(params[1], painter));¤	if (symbols_count > source_str.size ()) {//åñëè ïðîñÿò ñèìâîëîâ áîëüøå ÷åì åñòü - óäàëÿåì âñþ ñòðîêó¤		symbols_count = source_str.size ();¤	}	¤¤	return source_str.substr (symbols_count);¤	//#UC END# *4A2CE18202C1_4A2CE3B603C9*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CE3E900D7*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CE3E900D7*¤	if (params.size () < 2) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 2, params.size ());¤	}¤	std::string source_str = TemplatePainter::resolve_exp(params[0], painter);¤	long symbols_count = boost::lexical_cast<long> (TemplatePainter::resolve_exp(params[1], painter));		¤	long skip_symbols = source_str.size () - symbols_count;¤	if (skip_symbols < 0) {//åñëè ïðîñÿò ñèìâîëîâ áîëüøå ÷åì åñòü - óäàëÿåì âñþ ñòðîêó¤		skip_symbols = source_str.size ();¤	}		¤	return source_str.substr (0, skip_symbols);¤	//#UC END# *4A2CE18202C1_4A2CE3E900D7*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CE43F03D6*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CE43F03D6*¤	if (params.size () < 2) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 2, params.size ());¤	}¤	std::string source_str = TemplatePainter::resolve_exp (params[0], painter);¤	std::string prefix = TemplatePainter::resolve_exp (params[1], painter);¤¤	if (GCL::start_with (source_str.c_str (), prefix.c_str ())) {¤		return prefix;¤	}¤	return source_str;¤	//#UC END# *4A2CE18202C1_4A2CE43F03D6*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CE46B00AF*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CE46B00AF*¤	if (params.size () < 3) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 3, params.size ());¤	}¤	std::string list_id = TemplatePainter::resolve_exp(params[0], painter);¤	std::string str = TemplatePainter::resolve_exp(params[1], painter);¤	std::string separator = TemplatePainter::resolve_exp(params[2], painter);¤	¤	GCL::StrVector splited = GCL::split_string_by_sub_string (str.c_str (), separator.c_str ());¤	¤	TemplatePainter::ContainerDumper* container = get_container (list_id);¤	container->clear ();¤¤	for (¤		GCL::StrVector::iterator it = splited.begin ()¤		; it != splited.end ()¤		; ++it¤	) {¤		AbstractDumperBase_cvar arg = new TemplatePainter::TextDumper (it->data());¤		container->add (arg.ptr ());¤	}¤	return std::string ();¤	//#UC END# *4A2CE18202C1_4A2CE46B00AF*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CE49001EC*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CE49001EC*¤	if (params.size () < 3) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 3, params.size ());¤	}¤	std::string str (params[0].begin()+1, params[0].end()-1);¤	str = TemplatePainter::resolve_exp(str, painter);¤	std::string in_format (params[1].begin()+1, params[1].end()-1);¤	std::string out_format (params[2].begin()+1, params[2].end()-1);¤¤	GCL::convert_to_scanf_format (in_format);¤	GCL::convert_to_scanf_format (out_format);¤¤	return GCL::string_converter(str, in_format, out_format);¤	//#UC END# *4A2CE18202C1_4A2CE49001EC*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CE4C401E7*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CE4C401E7*¤	if (params.size () < 2) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 2, 3, params.size ());¤	}¤¤	std::string ret = TemplatePainter::resolve_exp(params[0], painter);¤	std::string source_substr = TemplatePainter::resolve_exp(params[1], painter);¤¤	std::string target_substr;¤	if (params.size() > 2) {¤		target_substr = TemplatePainter::resolve_exp(params[2], painter);¤	}¤			¤	GCL::str_replace (ret, source_substr.data(), target_substr.data());¤	return ret;¤	//#UC END# *4A2CE18202C1_4A2CE4C401E7*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CE4E70116*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CE4E70116*¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, 4, params.size ());¤	}¤	std::string ret = TemplatePainter::resolve_exp(params[0], painter);¤	¤	size_t split_len = 100;¤	std::string prefix;¤¤	if (params.size() > 1) {¤		prefix = TemplatePainter::resolve_exp(params[1], painter);¤	}¤	¤	if (params.size() > 3) {¤		std::string param = TemplatePainter::resolve_exp(params[3], painter);¤		try {¤			split_len = boost::lexical_cast<size_t> (param);¤		} catch (boost::bad_lexical_cast&) {¤			LOG_E (("Wrong split size param: %s", param.c_str ()));¤		}¤	}¤	split_len -= prefix.size ();¤	GCL::StrVector strs = GCL::split_string_format (ret.c_str(), split_len);¤	¤	std::string sep;¤	if (params.size() > 2) {¤		sep = TemplatePainter::resolve_exp(params[2], painter);¤	} else {¤		sep = "\n";¤	}¤			¤	ret = "";¤	for (GCL::StrVector::iterator it = strs.begin(); it != strs.end(); it++) {¤		ret += prefix + GCL::trim_ws(it->c_str ());¤		if (std::distance (it, strs.end()) > 1) {¤			ret += sep;¤		}¤	}¤	return ret;¤	//#UC END# *4A2CE18202C1_4A2CE4E70116*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CE50C0124*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CE50C0124*¤	class StringQuoter : public std::unary_function <std::string, std::string> {¤	public:¤		std::string operator () (const std::string& source) {¤			std::string ret ("\"");¤			ret += source;¤			ret += "\"";¤¤			return ret;¤		}¤	};¤¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤	std::string source_str = TemplatePainter::resolve_exp (params[0], painter);¤	¤	std::string result;¤	if (source_str.empty () == false) {¤		GCL::StrVector ws_items = GCL::split_string_by (source_str.c_str (), ' ');¤		GCL::StrVector res_ws_items;¤		std::string local_result;¤		for (¤			GCL::StrVector::iterator it = ws_items.begin ()¤			; it != ws_items.end ()¤			; ++it¤		) {¤			//ñïèñîê ýëåìåíòîâ, îáúåäèí¸ííûõ ïî ÈËÈ¤			GCL::StrVector or_items = GCL::split_string_by (it->c_str (), '|');¤			if (or_items.size () == 1) {¤				//ñïèñîê ýëåìåíòîâ, îáúåäèí¸ííûõ ïî ÍÅ¤				StringQuoter quoter;¤				local_result = quoter (*it);¤			} else {¤				StringQuoter quoter;¤				std::transform (or_items.begin (), or_items.end (), or_items.begin (), quoter);¤¤				std::string res ("(");¤				res += GCL::join (or_items, "|");¤				res += ")";¤				local_result = res;¤			}¤			res_ws_items.push_back (local_result);¤		}¤		result = GCL::join (res_ws_items, " ");¤	}¤	return result;¤	//#UC END# *4A2CE18202C1_4A2CE50C0124*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CE590011F*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CE590011F*¤	if (params.size () < 3) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 3, params.size ());¤	}¤	std::string first = TemplatePainter::resolve_exp(params[0], painter);¤	std::string second = TemplatePainter::resolve_exp(params[1], painter);¤	std::string op = TemplatePainter::resolve_exp(params[2], painter);¤¤	std::string ret;¤	if (op == "\"<\"") {¤		ret = boost::lexical_cast<std::string> (first < second);¤	} else if (op == "\"<=\"") {¤		ret = boost::lexical_cast<std::string> (first <= second);¤	} else if (op == "\">\"") {¤		ret = boost::lexical_cast<std::string> (first > second);¤	} else if (op == "\">=\"") {¤		ret = boost::lexical_cast<std::string> (first >= second);¤	} else if (op == "\"==\"") {¤		ret = boost::lexical_cast<std::string> (first == second);¤	} else if (op == "\"!=\"") {¤		ret = boost::lexical_cast<std::string> (first != second);¤	} else {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += ", unknown compare operation: ";¤		mess += op;¤		throw Base::FatalError (mess);¤	}¤	return ret;¤	//#UC END# *4A2CE18202C1_4A2CE590011F*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CE5AC037A*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CE5AC037A*¤	if (params.size () < 2) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 2, params.size ());¤	}¤	std::string str = TemplatePainter::resolve_exp(params[0], painter);¤	std::string substr = TemplatePainter::resolve_exp(params[1], painter);¤	¤	std::string::size_type pos = str.find (substr);¤	std::string res ("-1");¤	if (pos != std::string::npos) {		¤		res = boost::lexical_cast<std::string> (pos);¤	}¤	return res;¤	//#UC END# *4A2CE18202C1_4A2CE5AC037A*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CE6BB0290*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CE6BB0290*¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤	std::string source_str = TemplatePainter::resolve_exp(params[0], painter);¤	boost::hash<std::string> str_hash;		¤	std::string ret = boost::lexical_cast<std::string> (str_hash (source_str));¤	return ret;¤	//#UC END# *4A2CE18202C1_4A2CE6BB0290*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CE6DB00A0*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CE6DB00A0*¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤	std::string source_str = TemplatePainter::resolve_exp(params[0], painter);		¤	std::string ret = boost::lexical_cast<std::string> (source_str.length ());¤	return ret;¤	//#UC END# *4A2CE18202C1_4A2CE6DB00A0*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CE6FA00E6*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CE6FA00E6*¤	if (params.size () < 2) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 2, params.size ());¤	}¤	std::string source_str = TemplatePainter::resolve_exp(params[0], painter);¤	std::string::size_type symbols_count = boost::lexical_cast<long> (TemplatePainter::resolve_exp(params[1], painter));¤	if (symbols_count > source_str.size ()) {//åñëè ïðîñÿò ñèìâîëîâ áîëüøå ÷åì åñòü - îòäàåì âñþ ñòðîêó¤		symbols_count = source_str.size ();¤	}¤	std::string ret (¤		source_str.begin () ¤		, source_str.begin () + symbols_count¤	);¤	return ret;	¤	//#UC END# *4A2CE18202C1_4A2CE6FA00E6*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CE72302CC*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CE72302CC*¤	if (params.size () < 2) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 2, params.size ());¤	}	¤	std::string source_str = TemplatePainter::resolve_exp(params[0], painter);¤	long symbols_count = boost::lexical_cast<long> (TemplatePainter::resolve_exp(params[1], painter));¤	long skip_symbols = source_str.size () - symbols_count;¤	if (skip_symbols < 0) {//åñëè ïðîñÿò ñèìâîëîâ áîëüøå ÷åì åñòü - îòäàåì âñþ ñòðîêó¤		skip_symbols = 0;¤	}¤	std::string ret (¤		source_str.begin () + skip_symbols¤		, source_str.end ()¤	);¤	return ret;¤	//#UC END# *4A2CE18202C1_4A2CE72302CC*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CE74F00FF*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CE74F00FF*¤	if (params.size () < 2) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 2, params.size ());¤	}¤	std::string source_str = TemplatePainter::resolve_exp (params[0], painter);¤	std::string suffix = TemplatePainter::resolve_exp (params[1], painter);¤¤	if (GCL::end_with (source_str.c_str (), suffix.c_str ())) {¤		return suffix;¤	}¤	return source_str;¤	//#UC END# *4A2CE18202C1_4A2CE74F00FF*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CE768013F*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CE768013F*¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤	std::string ret = TemplatePainter::resolve_exp(params[0], painter);¤	GCL::to_lower(ret);¤	return ret;¤	//#UC END# *4A2CE18202C1_4A2CE768013F*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CE7B40017*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CE7B40017*¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤	std::string ret = TemplatePainter::resolve_exp(params[0], painter);¤	GCL::to_upper(ret);¤	return ret;¤	//#UC END# *4A2CE18202C1_4A2CE7B40017*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CE7DA02AD*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CE7DA02AD*¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, 4, params.size ());¤	}¤	std::string ret = TemplatePainter::resolve_exp(params[0], painter);¤	char prefix = 0;¤	char open = 0;¤	char close = 0;¤	bool keep_eng = false;¤	¤	if (params.size() > 1) {¤		prefix = params[1][0];¤	}¤¤	if (params.size() > 2) {¤		open = params[2][0];¤		keep_eng = true;¤	}¤¤	if (params.size() > 3 && !params[3].empty ()) {¤		close = params[3][0];¤	}¤¤	return GCL::multibyte_to_str (ret, prefix, keep_eng, open, close);¤	//#UC END# *4A2CE18202C1_4A2CE7DA02AD*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CDB090196*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CDB090196*¤	if (params.size () < 3) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw Base::FatalError (mess);¤	}¤	std::string var_id = TemplatePainter::resolve_exp(params[0], painter);¤	std::string::const_iterator var_id_it = var_id.begin();¤	AbstractDumperBase* adb = const_cast<AbstractDumperBase*> (¤		painter->get_dumper_by_template(var_id_it, var_id.end ())¤	);¤¤	if (adb) {¤		std::string list_id_or_metadata = TemplatePainter::resolve_exp(params[2], painter);¤		const TemplatePainter::ContainerDumper* container = get_container_if_exists (list_id_or_metadata);¤¤		std::string key = TemplatePainter::resolve_exp(params[1], painter);¤		if (container) {¤			if (container->size () > 0) {¤				for (¤					AbstractDumperBase::VarList::const_iterator it = container->get_items ().begin ()¤					; it != container->get_items ().end ()¤					; ++it¤				) {¤					adb->add_metadata (key, (*it)->get_name_str ());¤				}¤			} else {¤				std::string mess (GDS_CURRENT_FUNCTION);¤				mess += " - can't add empty metadata";¤				throw Base::FatalError (mess);¤			}¤		} else {¤			adb->add_metadata (key, list_id_or_metadata);¤		}		¤	} else {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - can't find dumper: ";¤		mess += var_id;¤		throw Base::FatalError (mess);¤	}¤	return std::string ();¤¤	//#UC END# *4A2CE18202C1_4A2CDB090196*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CF2F20307*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CF2F20307*¤	if (params.size () < 3) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 3, params.size ());¤	}¤	std::string first_str = TemplatePainter::resolve_exp(params[0], painter);¤	std::string second_str = TemplatePainter::resolve_exp(params[1], painter);¤	std::string op = TemplatePainter::resolve_exp(params[2], painter);¤¤	first_str = first_str.substr (1, first_str.length () - 2);¤	second_str = second_str.substr (1, second_str.length () - 2);		¤¤	long first;¤	long second;¤¤	try {¤		first = boost::lexical_cast<long> (¤			first_str¤		);¤		second = boost::lexical_cast<long> (¤			second_str¤		);¤	} catch (boost::bad_lexical_cast&) {¤		std::string mess ("Bad params in function: ");¤		mess += GDS_CURRENT_FUNCTION;¤		mess += " (";¤		mess += first_str;¤		mess += ", ";¤		mess += second_str;¤		mess += ", ";¤		mess += op;¤		¤		throw Base::FatalError (mess);¤	}		¤¤	bool res;¤	if (op == "\"<\"") {¤		res = first < second;¤	} else if (op == "\"<=\"") {¤		res = first <= second;¤	} else if (op == "\">\"") {¤		res = first > second;¤	} else if (op == "\">=\"") {¤		res = first >= second;¤	} else if (op == "\"==\"") {¤		res = first == second;¤	} else if (op == "\"!=\"") {¤		res = first != second;¤	} else {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += ", unknown comapre operation: ";¤		mess == op;¤		throw Base::FatalError (mess);¤	}¤	return res ? "1" : "0";¤	//#UC END# *4A2CE18202C1_4A2CF2F20307*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A2CF65700DE*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A2CF65700DE*¤	if (params.size () < 2) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 2, params.size ());¤	}¤¤	std::string source_str = TemplatePainter::resolve_exp (params[0], painter);¤	std::string symbols_str = TemplatePainter::resolve_exp (params[1], painter);¤¤	std::string res ("true");¤	¤	std::string::const_iterator it = source_str.begin ();¤	std::string::const_iterator it_end = source_str.end ();¤¤	for (; it != it_end; ++it) {¤		if (symbols_str.find (*it) == std::string::npos) {¤			//íå íàøëè ñèìâîë - âûõîäèì¤			res = "false";¤			break;¤		}¤	}¤	return res;¤	//#UC END# *4A2CE18202C1_4A2CF65700DE*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4A9367B90020*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4A9367B90020*¤	if (params.size () < 2) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 2, params.size ());¤	}¤	¤	std::string uid = TemplatePainter::resolve_exp(params[0], painter);¤¤	if (uid.empty ()) {¤		throw Base::FatalError ("Íå çàäàí èäåíòèôèêàòîð (èëè èìÿ) ýëåìåíòà äëÿ ïîèñêà");¤	}¤¤	std::string var_id = TemplatePainter::resolve_exp(params[1], painter);¤	¤	EmptyDumper empty (uid);¤	ObjectTreeResolver::ObjectTree::Item_ptr it =  ObjectTreeResolver::s_tree->find (&empty);¤¤	const AbstractDumperBase* result = 0;¤	if (it) {¤		result = dynamic_cast<const AbstractDumperBase*> (*it);¤	} else {¤		//èùåì ïî èìåíè¤		Core::Aptr<ObjectTreeResolver::OTRVector> elements = ObjectTreeResolver::find_by_name (uid);¤¤		if (elements->size () > 1) {¤			throw Base::FatalError (¤				std::string ("Íàéäåíî áîëåå îäíîãî ýëåìåíòà ñ èìåíåì: ")¤				+ uid¤			);¤		}¤¤		if (!elements->empty ()) {¤			result = dynamic_cast<const AbstractDumperBase*>((*elements)[0]);¤		}¤	}¤	¤	if (!result) {¤		throw Base::FatalError (¤			std::string ("Íå óäàëîñü íàéòè ýëåìåíò: ")¤			+ uid¤		);¤	}¤¤	TemplatePainter::set_var_dumper (var_id, result);¤¤	return std::string ();¤	//#UC END# *4A2CE18202C1_4A9367B90020*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ResolvedTypeGuid"
			    value      	"452257A0036F")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4B012E130384*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4B012E130384*¤	if (params.size () > 0) {¤		std::string code = TemplatePainter::resolve_exp(params[0], painter);¤		std::string resolved_code = TemplatePainter::resolve_exp(code, painter);¤¤		return resolved_code;¤	}¤¤	return std::string ();¤	//#UC END# *4A2CE18202C1_4B012E130384*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4B2F858E02D3*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4B2F858E02D3*¤	std::string mess;¤	if (!params.empty ()) {¤		mess = "(" + TemplatePainter::resolve_exp (params[0], painter) + ") ";¤	}¤¤	mess += "Ñòýê âûçîâà ôóíêöèé:\r\n\t ";¤¤	Core::Aptr<GCL::StrVector> functions_stack (painter->get_stack ());¤	if (!functions_stack.is_nil () && !functions_stack->empty ()) {¤		mess += GCL::join (*functions_stack.ptr (), "\r\n\t ");¤	} else {¤		mess += "EMPTY";¤	}¤¤	mess += "\r\n";¤¤	const AbstractDumperBase* adb = painter->get_owner () ? painter->get_owner () : painter->get_main_scope ();¤¤	if (adb) {¤		adb->write_template_warning_log(mess.c_str ());¤	} else {¤		GDS_ASSERT_MSG(adb !=0,("Ïîïûòêà âûçûâàòü ôóíêöèè %%f_warning ïðè 0-îì %%S è %%B"));¤		throw Base::FatalError ("Ïîïûòêà âûçûâàòü ôóíêöèè %f_print_stack ïðè 0-îì %S è %B");¤	}¤¤	return std::string ();¤	//#UC END# *4A2CE18202C1_4B2F858E02D3*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4B4F4487039E*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4B4F4487039E*¤	return FilePathBase::execute_impl (params, painter, FilePathBase::PT_DRIVE);¤	//#UC END# *4A2CE18202C1_4B4F4487039E*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4B4F45340275*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4B4F45340275*¤	return FilePathBase::execute_impl (params, painter, FilePathBase::PT_EXT);¤	//#UC END# *4A2CE18202C1_4B4F45340275*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4B4F445201A1*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4B4F445201A1*¤	return FilePathBase::execute_impl (params, painter, FilePathBase::PT_NAME);¤	//#UC END# *4A2CE18202C1_4B4F445201A1*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4B4F463D036A*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4B4F463D036A*¤	return FilePathBase::execute_impl (params, painter, FilePathBase::PT_DIR);¤	//#UC END# *4A2CE18202C1_4B4F463D036A*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"GetRaises"
			    value      	"4BE0F2D30271")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2CE18202C1_4BD6DC17000F*"
			    value      	(value Text 
|//#UC START# *4A2CE18202C1_4BD6DC17000F*¤	if (!painter->dereference ()) {¤		throw TemplatePainter::TemplateBadSyntax ("Îïåðàöèÿ ìîæåò áûòü âûçâàíà òîëüêî âíóòðè öèêëà");¤	}¤	¤	throw TemplatePainter::TemplateCycleIterationBreak ();¤¤	return std::string ();¤	//#UC END# *4A2CE18202C1_4BD6DC17000F*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ElementCreationOrder"
			    value      	"19070233977"))
		    quid       	"4A2CE18202C1"
		    documentation 	"Ñîáñòâåííî ðåàëèçàöèè âñòðîåííîé ôóíêöèè. Êàæäûé êîíêðåòíûé ñåðâàíò ðåàëèçóåò ýòî ìåòîä"
		    parameters 	(list Parameters
			(object Parameter "params"
			    attributes 	(list Attribute_Set
				(object Attribute
				    tool       	"MDA Generator"
				    name       	"ResolvedTypeGuid"
				    value      	"494F2FE400B1")
				(object Attribute
				    tool       	"MDA Generator"
				    name       	"ElementCreationOrder"
				    value      	"19013849499"))
			    quid       	"4A2CE18202D0"
			    type       	"FunctionParams"
			    quidu      	"494F2FE400B1")
			(object Parameter "inout painter"
			    attributes 	(list Attribute_Set
				(object Attribute
				    tool       	"MDA Generator"
				    name       	"ResolvedTypeGuid"
				    value      	"477606D700B4")
				(object Attribute
				    tool       	"MDA Generator"
				    name       	"ElementCreationOrder"
				    value      	"19013849873"))
			    quid       	"4A2CF81700DC"
			    type       	"TemplatePainter"
			    quidu      	"477606D700B4"))
		    result     	"a-string"
		    concurrency 	"Sequential"
		    opExportControl 	"Public"
		    uid        	0
		    quidu      	"452257A0036F"))
	    language   	"MDA Generator"
	    abstract   	TRUE)
	(object Class "InternalStereotypeFunctionBase"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"AbstarctOperation"
		    value      	"abstract")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsNative"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (cpp)"
		    value      	"w:/MDProcess/MDAModel/impl/BaseFunctionImpl/InternalStereotypeFunctionBase.cpp")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (cpp)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (h)"
		    value      	"w:/MDProcess/MDAModel/impl/BaseFunctionImpl/InternalStereotypeFunctionBase.h")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (h)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*4A2DFD580067_DESTR_BODY*"
		    value      	(value Text 
|//#UC START# *4A2DFD580067_DESTR_BODY*¤	//#UC END# *4A2DFD580067_DESTR_BODY*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"WikiPageID (wiki)"
		    value      	(value Text 
|MDProcess,key:MDP,guid:456C0DD70110/Home/Ìîäåëü ïðîåêòà "MDProcess"/MDAModel/BaseFunctionImpl/InternalStereotypeFunctionBase|4A2DFD580067
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (wiki)"
		    value      	"wiki")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ElementCreationOrder"
		    value      	"19031108135"))
	    quid       	"4A2DFD580067"
	    documentation 	"áàçîâàÿ ðåàëèçàöèÿ âñòðîåííîé ôóíêöèè ñòåðåîòèïà"
	    stereotype 	"Servant"
	    superclasses 	(list inheritance_relationship_list
		(object Inheritance_Relationship
		    quid       	"4B602C3902A7"
		    supplier   	"Logical View::MDProcess::MDAModel::BaseFunctionImpl::ListOperationBase"
		    quidu      	"4B581BCD0399"))
	    realized_interfaces 	(list realize_rel_list
		(object Realize_Relationship
		    quid       	"4A2DFD750203"
		    supplier   	"Logical View::MDProcess::MDAModel::TemplateFunctions::InternalStereotypeFunction"
		    quidu      	"4A2CBBFC0343"))
	    operations 	(list Operations
		(object Operation "execute_impl"
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"AbstarctOperation"
			    value      	"abstract")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"TargetStereotype"
			    value      	"const")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"IsNative"
			    value      	"false")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CDC4B0370*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CDC4B0370*¤	if (params.size () < 2) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string var_id = TemplatePainter::resolve_exp(params[0], painter);¤	std::string param = TemplatePainter::resolve_exp(params[1], painter);¤	const AbstractDumperBase* ad = 0;¤	if (GCL::start_with(param.data(), "\"") && GCL::end_with(param.data(), "\"")) {¤		std::string text (param.begin () + 1, param.end () - 1);¤		AbstractDumperBase* arg = new TemplatePainter::TextDumper (text.data());¤		ad = arg;¤		TemplatePainter::dumpers_heap ().push_back (arg);¤	} else {¤		std::string::const_iterator it = param.begin();¤		ad = painter.get_dumper_by_template(it);¤	}¤	if (ad) {¤		TemplatePainter::var_list_of_dumpers ()[var_id].push_back (ad);¤	} else {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - can't add null dumper (";¤		mess += param;¤		mess += ")";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4A2CDC4B0370*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CDC760216*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CDC760216*¤	if (params.size () < 1) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string var_id = TemplatePainter::resolve_exp(params[0], painter);		¤	TemplatePainter::VarListOfDumpers::iterator map_it = TemplatePainter::var_list_of_dumpers ().find (var_id);¤	if (map_it != TemplatePainter::var_list_of_dumpers ().end ()) {¤		map_it->second.clear ();				¤	}¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4A2CDC760216*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CDCB00068*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CDCB00068*¤	if (params.size () < 2) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string var_id = TemplatePainter::resolve_exp(params[0], painter);¤	std::string param = TemplatePainter::resolve_exp(params[1], painter);¤	¤	long count = 0;¤	if (GCL::start_with(param.data(), "\"") && GCL::end_with(param.data(), "\"")) {¤		std::string text (param.begin () + 1, param.end () - 1);¤		Core::Var<TemplatePainter::TextDumper> temp = new TemplatePainter::TextDumper (text.data());¤		TemplatePainter::VarListOfDumpers::iterator map_it = TemplatePainter::var_list_of_dumpers ().find (var_id);¤		if (map_it != TemplatePainter::var_list_of_dumpers ().end ()) {¤			for (¤				TemplatePainter::VarListOfDumpers::mapped_type::iterator it = map_it->second.begin ()¤				; it != map_it->second.end ()¤				; ++it¤			) {¤				if (*temp.ptr () == *(*it)) {¤					//return "true";¤					count++;¤				}¤			}¤		}¤	} else {¤		std::string::const_iterator it = param.begin();¤		const AbstractDumperBase* ad = painter.get_dumper_by_template(it);¤		TemplatePainter::VarListOfDumpers::iterator map_it = TemplatePainter::var_list_of_dumpers ().find (var_id);¤		if (map_it != TemplatePainter::var_list_of_dumpers ().end ()) {¤			for (¤				TemplatePainter::VarListOfDumpers::mapped_type::iterator it = map_it->second.begin ()¤				; it != map_it->second.end ()¤				; ++it¤			) {¤				if (ad == (*it)) {¤					count++;¤				}¤			}¤		}¤	}¤	return boost::lexical_cast<std::string> (count);	¤	//#UC END# *4A2DFD7B0291_4A2CDCB00068*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CDCF90061*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CDCF90061*¤	if (params.size () < 2) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string source_list_id = TemplatePainter::resolve_exp(params[0], painter);¤	std::string dest_list_id = TemplatePainter::resolve_exp(params[1], painter);¤	¤	if (source_list_id.empty () == false && dest_list_id.empty () == false) {¤		TemplatePainter::VarListOfDumpers::iterator map_it = TemplatePainter::var_list_of_dumpers ().find (source_list_id);¤		if (map_it != TemplatePainter::var_list_of_dumpers ().end () && map_it->second.empty () == false) {¤			TemplatePainter::var_list_of_dumpers ()[dest_list_id].assign (map_it->second.begin (), map_it->second.end ());¤		}¤	}¤	return "";¤	//#UC END# *4A2DFD7B0291_4A2CDCF90061*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CDD1F00DD*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CDD1F00DD*¤	if (params.size () < 2) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	TemplateFunctions::InternalFunction_var func = TemplateFunctions::InternalFunctionFactory::make ("_count_in_list");¤¤	std::string count = func->execute (params, painter);¤	return count == "0" ? "false" : "true";¤	//#UC END# *4A2DFD7B0291_4A2CDD1F00DD*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CDD4503B2*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CDD4503B2*¤	if (params.size () < 1) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string var_id = TemplatePainter::resolve_exp(params[0], painter);		¤	TemplatePainter::VarListOfDumpers::iterator map_it = TemplatePainter::var_list_of_dumpers ().find (var_id);¤	std::string ret = "true";¤	if (map_it != TemplatePainter::var_list_of_dumpers ().end ()) {¤		bool is_empty = map_it->second.empty ();¤		ret = is_empty ? "true" : "false";¤	}¤	return ret;¤	//#UC END# *4A2DFD7B0291_4A2CDD4503B2*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CDD9B015C*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CDD9B015C*¤	class is_equal: ¤		public std::binary_function<const AbstractDumperBase*, const AbstractDumperBase*, bool>¤	{¤	public:¤		bool operator () (const AbstractDumperBase* first, const AbstractDumperBase* second) const {¤			return *first == *second;¤		}¤	};¤	if (params.size () < 2) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string res ("false");¤	std::string first_id = TemplatePainter::resolve_exp(params[0], painter);¤	std::string second_id = TemplatePainter::resolve_exp(params[1], painter);¤	TemplatePainter::VarListOfDumpers::iterator first_map_it = TemplatePainter::var_list_of_dumpers ().find (first_id);¤	TemplatePainter::VarListOfDumpers::iterator second_map_it = TemplatePainter::var_list_of_dumpers ().find (second_id);¤¤	bool find_first = first_map_it != TemplatePainter::var_list_of_dumpers ().end ();¤	bool find_second = second_map_it != TemplatePainter::var_list_of_dumpers ().end ();¤	if (¤		find_first¤		&& find_second¤	) {¤		if (¤			first_map_it->second.size () == second_map_it->second.size ()¤			&& std::equal (¤				first_map_it->second.begin ()¤				, first_map_it->second.end ()¤				, second_map_it->second.begin ()¤				, is_equal ()¤			)¤		) {¤			res = "true";¤		}¤	} else {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += ": Can't find list: ";		¤		if (!find_first) {¤			mess += first_id;¤			if (!find_second) {¤				mess += ", ";¤				mess += second_id;¤			}¤		} else {¤			mess += first_id;¤		}¤	}¤	return res;¤	//#UC END# *4A2DFD7B0291_4A2CDD9B015C*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CDDDE02A3*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CDDDE02A3*¤	if (params.size () < 2) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string list_id = TemplatePainter::resolve_exp(params[0], painter);¤	std::string var_id = TemplatePainter::resolve_exp(params[1], painter);¤			¤	TemplatePainter::VarListOfDumpers::iterator map_it = TemplatePainter::var_list_of_dumpers ().find (list_id);¤	if (map_it != TemplatePainter::var_list_of_dumpers ().end ()) {¤		¤		if (map_it->second.empty () == false) {¤			const AbstractDumperBase* ad = 0;¤			ad = map_it->second.front ();¤			map_it->second.pop_front ();¤			if (ad != 0) {¤				TemplatePainter::set_var_dumper (var_id, ad); ¤			}¤		}¤	}¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4A2CDDDE02A3*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CDE0D015D*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CDE0D015D*¤	if (params.size () < 2) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string list_id = TemplatePainter::resolve_exp(params[0], painter);¤	std::string var_id = TemplatePainter::resolve_exp(params[1], painter);¤			¤	TemplatePainter::VarListOfDumpers::iterator map_it = TemplatePainter::var_list_of_dumpers ().find (list_id);¤	if (map_it != TemplatePainter::var_list_of_dumpers ().end ()) {¤		¤		if (map_it->second.empty () == false) {¤			const AbstractDumperBase* ad = 0;¤			ad = map_it->second.back ();¤			map_it->second.pop_back ();¤			if (ad != 0) {¤				TemplatePainter::set_var_dumper (var_id, ad); ¤			}¤		}¤	}¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4A2CDE0D015D*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CDE3D00A2*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CDE3D00A2*¤	class is_equal: public std::unary_function<const AbstractDumperBase*, bool> {¤	public:¤		is_equal (const AbstractDumperBase* adb)¤			: m_adb (adb)¤		{¤		}¤¤		bool operator( ) (const AbstractDumperBase*& val) {¤			return *m_adb == *val;¤		}¤	¤	private:¤		const AbstractDumperBase* m_adb;¤	};¤¤	if (params.size () < 2) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string var_id = TemplatePainter::resolve_exp(params[0], painter);¤	std::string param = TemplatePainter::resolve_exp(params[1], painter);¤	if (GCL::start_with(param.data(), "\"") && GCL::end_with(param.data(), "\"")) {¤		std::string text (param.begin () + 1, param.end () - 1);¤		Core::Var<TemplatePainter::TextDumper> temp = new TemplatePainter::TextDumper (text.data());¤		TemplatePainter::VarListOfDumpers::iterator map_it = TemplatePainter::var_list_of_dumpers ().find (var_id);¤		if (map_it != TemplatePainter::var_list_of_dumpers ().end ()) {¤			map_it->second.remove_if (is_equal (temp.ptr ()));¤			/*bool erased = false;¤			for (¤				VarListOfDumpers::mapped_type::iterator it = map_it->second.begin ()¤				; it != map_it->second.end ()¤				; erased = false¤			) {¤				if (*temp.ptr () == *(*it)) {¤					map_it->second.erase (it++);¤					erased = true;¤				}¤				if (erased == false) {¤					++it;¤				}¤			}*/¤		}¤	} else {¤		std::string::const_iterator it = param.begin();¤		const AbstractDumperBase* ad = painter.get_dumper_by_template(it);¤		TemplatePainter::VarListOfDumpers::iterator map_it = TemplatePainter::var_list_of_dumpers ().find (var_id);¤		if (map_it != TemplatePainter::var_list_of_dumpers ().end ()) {¤			map_it->second.remove_if (is_equal (ad));¤		}¤	}¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4A2CDE3D00A2*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CDE9903E3*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CDE9903E3*¤	if (params.size () < 1) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string res;¤	std::string list_id = TemplatePainter::resolve_exp(params[0], painter);¤	TemplatePainter::VarListOfDumpers::iterator list_it = TemplatePainter::var_list_of_dumpers ().find (list_id);¤	if (list_it != TemplatePainter::var_list_of_dumpers ().end ()) {¤		res = boost::lexical_cast<std::string> (list_it->second.size ());¤	} else {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - can't find list with id: ";¤		mess += list_id;¤		throw AbstractDumperBase::FatalError (mess);¤	}¤¤	return res;¤	//#UC END# *4A2DFD7B0291_4A2CDE9903E3*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CDEDA0203*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CDEDA0203*¤	if (params.size () < 2) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string var_id = TemplatePainter::resolve_exp(params[0], painter);		¤	TemplatePainter::VarListOfDumpers::iterator map_it = TemplatePainter::var_list_of_dumpers ().find (var_id);¤	if (map_it != TemplatePainter::var_list_of_dumpers ().end () && map_it->second.empty () == false) {¤		std::string param1 = params[1];¤		if (GCL::border_with (param1.data(), '"')) {¤			std::string command (param1, 1, param1.size () - 2);			¤			map_it->second.sort (LessByTemplateCommand (command));¤¤		} else {¤			std::string sorting_type_str = TemplatePainter::resolve_exp(param1, painter);¤			if (sorting_type_str.empty () == false) {¤				char sorting_type = *sorting_type_str.begin ();¤				switch (sorting_type) {¤					case SX_4_ST_BY_NAME:¤						map_it->second.sort (AbstractDumperBase::SortByName());¤						break;¤					case SX_4_ST_BY_GUID:¤						map_it->second.sort (AbstractDumperBase::SortByUID());¤						break;¤					case SX_4_ST_BY_PARENT_AND_NAME:¤						map_it->second.sort (AbstractDumperBase::SortByParentAndName());¤						break;¤					case SX_4_ST_BY_POSITION:¤						{¤							std::vector<TemplatePainter::VarListOfDumpers::mapped_type::value_type> var_vector (¤								map_it->second.begin ()¤								, map_it->second.end ()¤							);¤							GCL::uqsort (¤								&var_vector[0]¤								, var_vector.size()¤								, sizeof(var_vector[0])¤								, odp_compare_adapter¤							);¤							map_it->second.assign (var_vector.begin (), var_vector.end ());				¤						}¤						break;¤					case 'k': //ñîðòèðîâêà ïî âíåøíèì êëþ÷àì¤						{¤							//ïîëó÷àåì ñïèñîê êëþ÷åé êàê äîïîëíèòåëüíûé ñïèñîê¤							if (params.size() < 3) {¤								std::string mess (GDS_CURRENT_FUNCTION);¤								mess += " - wrong parametr count, need key list for sorting by external keys";¤								throw AbstractDumperBase::FatalError (mess);¤							}¤¤							std::string key_list_id = TemplatePainter::resolve_exp(params[2], painter);¤							TemplatePainter::VarListOfDumpers::iterator key_list_it = TemplatePainter::var_list_of_dumpers ().find (key_list_id);¤							if (¤								key_list_it == TemplatePainter::var_list_of_dumpers ().end () ¤							) {¤								std::string mess (GDS_CURRENT_FUNCTION);¤								mess += " - can't find key list with id: ";¤								mess += key_list_id;							¤								throw AbstractDumperBase::FatalError (mess);¤							} else if (key_list_it->second.size () != map_it->second.size ()) {¤								std::string mess (GDS_CURRENT_FUNCTION);¤								mess += " - key list size must be equal source list size";¤								throw AbstractDumperBase::FatalError (mess);¤							}¤¤							struct ADBWithKey {¤								ADBWithKey (const AbstractDumperBase* key_adb_, const AbstractDumperBase* adb_) ¤									: key_adb (key_adb_), adb (adb_)¤								{¤								};¤¤								const AbstractDumperBase* key_adb;¤								const AbstractDumperBase* adb;¤¤								bool operator < (const ADBWithKey& rhs) const {¤									return this->key_adb->get_name_str() < rhs.key_adb->get_name_str();¤								}¤							};¤							std::vector<TemplatePainter::VarListOfDumpers::mapped_type::value_type> adb_vector (¤								map_it->second.begin ()¤								, map_it->second.end ()¤							);¤¤							std::vector<TemplatePainter::VarListOfDumpers::mapped_type::value_type> key_vector (¤								key_list_it->second.begin ()¤								, key_list_it->second.end ()¤							);¤							//ñîðòèðîâàííîå ìíîæåñòâî¤							std::set<ADBWithKey> adb_set;¤							std::vector<TemplatePainter::VarListOfDumpers::mapped_type::value_type> sorted_adb_vector;¤¤							for (size_t i = 0; i < key_vector.size (); ++i) {¤								adb_set.insert (ADBWithKey (key_vector[i], adb_vector[i]));¤							}¤							if (adb_set.size () != key_vector.size ()) {¤								//ñïèñîê êëþ÷åé îêàçàëñÿ íåóíèêàëüíûì¤								std::string mess (GDS_CURRENT_FUNCTION);¤								mess += " - key list must be unique";¤								LOG_D (("Key list size = %d, sorted source list size = %d", key_vector.size (), adb_set.size ()));¤								throw AbstractDumperBase::FatalError (mess);¤							}¤¤							std::set<ADBWithKey>::iterator it = adb_set.begin ();¤							std::set<ADBWithKey>::iterator it_end = adb_set.end ();¤							¤							for (; it != it_end; ++it) {¤								sorted_adb_vector.push_back ((*it).adb);¤							}¤							¤							map_it->second.assign (sorted_adb_vector.begin (), sorted_adb_vector.end ());¤¤						}¤						break;					¤				}¤			}¤		}¤	}¤	return "";¤	//#UC END# *4A2DFD7B0291_4A2CDEDA0203*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CDF1A03B3*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CDF1A03B3*¤	class is_equal: ¤		public std::binary_function<const AbstractDumperBase*, const AbstractDumperBase*, bool>¤	{¤	public:¤		bool operator () (const AbstractDumperBase*& first, const AbstractDumperBase*& second) const {¤			return *first == *second;¤		}¤	};¤¤	if (params.size () < 1) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string var_id = TemplatePainter::resolve_exp(params[0], painter);		¤	TemplatePainter::VarListOfDumpers::iterator map_it = TemplatePainter::var_list_of_dumpers ().find (var_id);¤	if (map_it != TemplatePainter::var_list_of_dumpers ().end ()) {¤		std::string command;¤		if (params.size() > 1) {¤			std::string param1 = params[1];¤			if (GCL::border_with (param1.data(), '"')) {¤				command.assign (param1, 1, param1.size () - 2);							¤			} else {¤				command = param1;¤			}¤		}¤		if (!command.empty ()) {¤			map_it->second.sort (LessByTemplateCommand (command));¤			map_it->second.unique (EqualByTemplateCommand (command));¤		} else {¤			map_it->second.sort (AbstractDumperBase::SortByUIDAndName ());¤			map_it->second.unique (is_equal ());¤		}¤¤	}¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4A2CDF1A03B3*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CDF41025C*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CDF41025C*¤	if (params.size () < 2) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string var_id = TemplatePainter::resolve_exp(params[0], painter);¤	std::string param = TemplatePainter::resolve_exp(params[1], painter);¤	if (GCL::start_with(param.data(), "\"") && GCL::end_with(param.data(), "\"")) {¤		std::string text (param.begin () + 1, param.end () - 1);¤		AbstractDumperBase* arg = new TemplatePainter::TextDumper (text.data());¤		TemplatePainter::dumpers_heap ().push_back (arg);¤		TemplatePainter::set_var_dumper (var_id, arg);¤	} else {¤		std::string::const_iterator it = param.begin();¤		TemplatePainter::set_var_dumper (var_id, painter.get_dumper_by_template(it));¤	}¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4A2CDF41025C*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CDF6F01D4*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CDF6F01D4*¤	throw Core::Root::MDAGenNotImplemented(GDS_CURRENT_FUNCTION);¤	//#UC END# *4A2DFD7B0291_4A2CDF6F01D4*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CE8150126*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CE8150126*¤	if (params.size () < 1) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string dbg_id = TemplatePainter::resolve_exp (params[0], painter);¤	TRACE ("DEBUG POINT: %s\n", dbg_id.data());¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4A2CE8150126*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CE8B80202*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CE8B80202*¤	if (params.size () < 1) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string str = TemplatePainter::resolve_exp(params[0], painter);¤	int i = atoi (str.c_str()+1);¤	char buf[32];¤	std::string ret = itoa (i, buf, 16);¤¤	int length = atoi (params[1].c_str());¤¤	while (length - (int)ret.size() > 0) {¤		ret = "0" + ret;¤	}¤	return ret;¤	//#UC END# *4A2DFD7B0291_4A2CE8B80202*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CE8E50142*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CE8E50142*¤	if (params.size () < 1) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string::const_iterator it = params[0].begin();¤	const AbstractDumperBase* dumper = painter.get_dumper_by_template(it);		¤	if (¤		dumper != 0¤		&& (¤			dumper->get_model_class_str () == "ClassDiagram"¤			|| dumper->get_model_class_str () == "ScenarioDiagram"¤			|| dumper->get_model_class_str () == "StateDiagram"¤		)¤	) {¤¤		AbstractDumperBase::DiagramItemCollection items;¤													¤		std::string diag_uid = dumper->get_model_unique_id_str () + ".jpg";¤¤		std::string new_hash_str;¤		Core::Aptr<CxMemFile> picture = const_cast<AbstractDumperBase*>(dumper)->dump_diagram (items, new_hash_str);¤		if (¤			picture.ptr () != 0 ¤			&& painter.get_main_scope ()->get_source_type () == AbstractDumperBase::GST_WIKI¤		) {	¤			//ñîîáùàåì î íà÷àëå òðàíçàêöèè¤			AbstractDumper::on_start_wiki_generation ();¤			std::string uid = painter.get_main_scope ()->get_model_unique_id_str ();¤			ServerGate::GenerationContents::Page& page ¤				= ServerGate::GenerationContents::PageFactory::get (uid.c_str ());¤			¤			if (page.is_new_page () == true) {¤				AbstractDumperBase::GenSourceInfo srs;¤				srs.source.wiki_page (&page);¤				AbstractDumperBase::TransactionContainer::instance ()->add_source (srs);¤			}¤			ServerGate::GenerationContents::Diagram diag;				¤			¤			size_t len = picture->Size ();				¤			if (len <= AbstractDumperBase::MAX_PICTURE_SIZE) {¤				if (len != 0) {					¤					diag.picture.replace (len, len, picture->GetBuffer (false), false);					¤				}					¤			} else {¤				std::string mess ("Diagram is very big (more than");¤				mess += boost::lexical_cast<std::string> (AbstractDumperBase::MAX_PICTURE_SIZE);¤				mess += "b) and we can't transfer it to Confluence";¤				painter.get_main_scope ()->write_warning_log (¤					mess¤				);¤				return std::string ();¤			}¤			std::string owner_uid = painter.get_owner ()->get_model_unique_id_str ();¤¤			AbstractDumperBase::DiagramItemCollection fixed_items;¤			for (¤				AbstractDumperBase::DiagramItemCollection::iterator it = items.begin ()¤				; it != items.end ()¤				; ++it¤			) {¤				if (it->uid != "" && it->uid != owner_uid) {¤					fixed_items.push_back (*it);¤				}¤			}¤			size_t items_size = fixed_items.size ();¤			diag.map.length (items_size);¤							¤			std::string guid_hash = boost::lexical_cast<std::string> (items_size);¤			for (size_t i = 0; i < items_size; ++i) {¤				diag.map[i].x1 = fixed_items[i].x1;¤				diag.map[i].y1 = fixed_items[i].y1;¤									¤				diag.map[i].x2 = fixed_items[i].x2;¤				diag.map[i].y2 = fixed_items[i].y2;¤¤				diag.map[i].x3 = fixed_items[i].x3;¤				diag.map[i].y3 = fixed_items[i].y3;¤¤				diag.map[i].x4 = fixed_items[i].x4;¤				diag.map[i].y4 = fixed_items[i].y4;¤¤				diag.map[i].guid = fixed_items[i].uid.c_str ();¤				guid_hash += fixed_items[i].uid;¤			}¤			boost::hash<std::string> str_hash;		¤			new_hash_str += ", image map guids: " + boost::lexical_cast<std::string> (str_hash (guid_hash));¤			CORBA::String_var old_hash = page.get_diagram_hash (diag_uid.c_str ());¤			¤			if (¤				ACE_OS::strcmp (old_hash.in (), new_hash_str.c_str ()) != 0¤				|| dumper->is_changed ()¤			) {¤				//äîáàâëÿåì äèàãðàììó ê ñòðàíèöå¤				diag.hash = new_hash_str.c_str ();¤				¤				AbstractDumperBase::GenSourceInfo srs;¤				srs.source.wiki_page (&page);¤				AbstractDumperBase::TransactionContainer::instance ()->add_source (srs);¤				try {¤					page.add_diagram (diag_uid.c_str (), diag);	¤					AbstractDumperBase::get_source_to_dumpers ()[srs].push_back (dumper);¤				} catch (ServerGate::GenerationContents::TransactionConflict&) {¤					painter.get_main_scope ()->write_warning_log ("TransactionConflict");¤				} catch (ServerGate::GenerationContents::ReadOnlyContent&) {¤					painter.get_main_scope ()->write_warning_log ("ReadOnlyContent");¤				} catch (CORBA::Exception& ex) {¤					std::string mess = "Exception in dump_diagram: ";¤					mess += ex._info ().c_str ();¤					painter.get_main_scope ()->write_error_log (mess, true);¤					//throw AbstractDumperBase::FatalError (mess);¤				}¤			}¤		}¤	} else {¤		char mess [128];¤		sprintf (mess, "%s is not a diagram, it is: \"%s\"", params[0].c_str (), dumper ? dumper->get_model_class_str ().c_str () : "null");¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4A2CE8E50142*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CE90803BA*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CE90803BA*¤		if (params.size () < 2) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string counter_id = TemplatePainter::resolve_exp(params[0], painter);¤	std::string::const_iterator it = params[1].begin();¤	return painter.get_dumper_by_template(it)->element_counter (counter_id);¤	//#UC END# *4A2DFD7B0291_4A2CE90803BA*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CE92600B3*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CE92600B3*¤	if (params.size () < 1) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	¤	std::string message = TemplatePainter::resolve_exp(params[0], painter);¤	const AbstractDumperBase* adb = painter.get_owner () ? painter.get_owner () : painter.get_main_scope ();¤	¤	if (adb) {¤		adb->write_template_error_log(message.c_str ());¤	} else {¤		GDS_ASSERT_MSG(adb !=0,("Ïîïûòêà âûçûâàòü ôóíêöèè %f_error ïðè 0-îì %S è %B"));¤		throw AbstractDumperBase::FatalError ("Ïîïûòêà âûçûâàòü ôóíêöèè %f_error ïðè 0-îì %S è %B");¤	}¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4A2CE92600B3*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CEB2C0373*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CEB2C0373*¤	if (params.size () < 1) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string expression = TemplatePainter::resolve_exp(params[0], painter);¤	try {¤		double res = GCI::Math::CalculatorFactory::make ().evaluate (expression);¤		std::string result = boost::lexical_cast<std::string> (res);¤		return result;¤	} catch (GCI::Math::BadExpression&) {¤		std::string mess("Can't parse expression: ");¤		mess += expression;¤		throw AbstractDumperBase::FatalError (mess);¤	} catch (...) {¤		std::string mess("Exception, when evaluate expression: ");¤		mess += expression;¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	//#UC END# *4A2DFD7B0291_4A2CEB2C0373*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CEB4801A1*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CEB4801A1*¤	if (params.size () < 2) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string ret ("false");¤	std::string dumper = TemplatePainter::resolve_exp(params[0], painter);¤	AbstractDumperBase::GenID gen_id = TemplatePainter::resolve_exp(params[1], painter);¤	¤	std::string::const_iterator it = dumper.begin();¤	const AbstractDumperBase* adb = painter.get_dumper_by_template(it);¤	if (adb) {¤		AbstractDumperBase::Templates::iterator f = AbstractDumperBase::s_templates.find (¤			adb->get_model_stereotype_str()¤		);¤		if (f != AbstractDumperBase::s_templates.end()) {¤			AbstractDumperBase::GT_map::iterator gen = f->second.generators.find(gen_id);¤			if (¤				gen != f->second.generators.end()¤				&& gen->second.code_template.empty () == false¤			) {¤				ret = "true";¤			}¤		}¤	}	¤	return ret;¤	//#UC END# *4A2DFD7B0291_4A2CEB4801A1*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CEB690080*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CEB690080*¤	if (params.size () < 2) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string dumper_id = TemplatePainter::resolve_exp (params[0], painter);¤	std::string::const_iterator it = dumper_id.begin();¤	const AbstractDumperBase* adb = painter.get_dumper_by_template(it);¤	if (adb) {¤		std::string meta_class = TemplatePainter::resolve_exp (params[1], painter);¤		std::string adb_meta_class = adb->get_model_stereotype_str();¤		¤		class local {¤		public:¤			static bool is_kind_of_impl (const std::string& source_meta_class, const std::string& kind) {¤				if (source_meta_class == kind) {¤					return true;¤				}¤				¤				AbstractDumperBase::Template& tpl = AbstractDumperBase::get_template (source_meta_class);¤				for (¤					GCL::StrSet::const_iterator it = tpl.base_stereotypes.begin ()¤					; it != tpl.base_stereotypes.end ()¤					; ++it¤				) {¤					if (is_kind_of_impl (*it, kind)) {¤						return true;¤					}¤				}¤¤				return false;¤			}¤		};¤		¤		if (local::is_kind_of_impl (adb_meta_class, meta_class)) {¤			return std::string ("true");¤		}¤	}¤	return std::string ("false");¤	//#UC END# *4A2DFD7B0291_4A2CEB690080*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CEB8F0250*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CEB8F0250*¤	if (params.size () < 1) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string dumper_id = TemplatePainter::resolve_exp (params[0], painter);¤	std::string::const_iterator it = dumper_id.begin();¤	const AbstractDumperBase* adb = painter.get_dumper_by_template(it);¤	std::string res;¤	if (adb) {¤		static std::string java_substr ("java/src/java");¤		static size_t java_substr_len (java_substr.length ());¤¤		res = adb->get_root_dir (true);¤		res += "/";¤		res += adb->create_relative_file_name_with_parent();¤		std::string::size_type pos = res.find (java_substr);¤		if (pos != std::string::npos) {¤			res = res.substr (0, pos + java_substr_len);¤		}¤	} else {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += ": dumper ";¤		mess += dumper_id;¤		mess += " is null";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	return res;¤	//#UC END# *4A2DFD7B0291_4A2CEB8F0250*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CEBB60378*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CEBB60378*¤	class local {¤	public:¤		static const std::string make_path (const std::string& file_path) {¤			static std::string java_substr ("java/src/java/");¤			static size_t java_substr_len (java_substr.length ());¤			¤			std::string res (file_path);			¤			std::string::size_type pos = res.find (java_substr);¤			if (pos != std::string::npos) {¤				res = res.substr (pos + java_substr_len);¤			}¤			return res;¤		}¤	};¤¤	if (params.size () < 1) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤¤	std::string dumper_id = TemplatePainter::resolve_exp (params[0], painter);¤	std::string::const_iterator it = dumper_id.begin();¤	const AbstractDumperBase* adb = painter.get_dumper_by_template(it);¤	std::string res;¤	if (adb) {¤		¤		std::string file_name = adb->create_file_name ();¤		bool has_self_output = file_name.empty () == false;¤		const AbstractDumperBase* parent_with_output = adb;¤		if (!has_self_output) {			¤			while (¤				(parent_with_output = parent_with_output->parent ())¤				&& file_name.empty ()¤			) {¤				file_name = parent_with_output->create_file_name ();¤			}¤		}¤		if (file_name.empty () == false) {¤			std::string drive;¤			std::string dir;¤			std::string fname;¤			std::string ext;¤			¤			if (file_name.find ("/") != std::string::npos) {¤			¤				GCL::FileOp::splitpath (file_name, drive, dir, fname, ext, false);¤				res = drive;¤				res += dir;¤				res += fname;¤				res = local::make_path (res);¤				GCL::str_replace (res, "/", ".");¤			} else {¤				res = file_name;¤			}¤			if (!has_self_output && parent_with_output) {¤				GCL::StrVector path_to_parent;¤				const AbstractDumperBase* parent = adb;¤				path_to_parent.insert (path_to_parent.begin (), adb->get_name_str ());¤				while (¤					(parent = parent->parent ())¤					&& parent != parent_with_output¤				) {¤					path_to_parent.insert (path_to_parent.begin (), parent->get_name_str ());¤				}¤				std::string temp = GCL::join (path_to_parent, ".");¤				if (temp.empty () == false) {¤					res += ".";¤					res += temp;¤				}¤			}¤		} else {¤			/*std::string mess (GDS_CURRENT_FUNCTION);¤			mess += " - Can't create type path for dumper: ";¤			mess += adb->get_name_str ();¤			throw AbstractDumperBase::FatalError (mess);*/¤		}¤	} else {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += ": dumper ";¤		mess += dumper_id;¤		mess += " is null";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	return res;¤	//#UC END# *4A2DFD7B0291_4A2CEBB60378*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CEBE3020D*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CEBE3020D*¤	if (params.size () < 2) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	AbstractDumperBase::GenID tmp = AbstractDumperBase::s_current_map;¤	AbstractDumperBase::s_current_map = TemplatePainter::resolve_exp(params[0], painter);¤		¤	std::string::const_iterator it = params[1].begin();		¤	const AbstractDumperBase* adb = painter.get_dumper_by_template(it);¤	¤	std::string target_path;¤	std::string target_root;¤	if (adb) {¤		target_path = adb->create_relative_dir_name();¤		target_root = adb->get_root_dir (false);¤	}¤	¤	AbstractDumperBase::s_current_map = tmp;¤¤	if (target_path != "") {¤		return painter.get_main_scope ()->create_normolized_path (target_path.data(), target_root.data());¤	} else {¤		return std::string ();¤	}¤	//#UC END# *4A2DFD7B0291_4A2CEBE3020D*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CEC0801DE*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CEC0801DE*¤	if (params.size () < 2) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	AbstractDumperBase::GenID tmp = AbstractDumperBase::s_current_map;¤	AbstractDumperBase::s_current_map = TemplatePainter::resolve_exp(params[0], painter);¤	¤	std::string::const_iterator it = params[1].begin();		¤	const AbstractDumperBase* adb = painter.get_dumper_by_template(it);¤	¤	std::string target_path;¤	std::string target_root;¤	if (adb) {¤		target_path = adb->create_relative_file_name();¤		target_root = adb->get_root_dir (false);¤	}¤	¤	AbstractDumperBase::s_current_map = tmp;¤¤	if (target_path != "") {¤		return painter.get_main_scope ()->create_normolized_path (target_path.data(), target_root.data());¤	} else {¤		return std::string ();¤	}¤	//#UC END# *4A2DFD7B0291_4A2CEC0801DE*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CEC230045*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CEC230045*¤	if (params.size () < 1) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	AbstractDumperBase::s_current_map = TemplatePainter::resolve_exp(params[0], painter);¤¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4A2CEC230045*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CEC450138*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CEC450138*¤	if (params.size () < 2) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string prop_id = TemplatePainter::resolve_exp(params[0], painter);¤	std::string prop_val = TemplatePainter::resolve_exp(params[1], painter);¤	AbstractDumperBase::s_gen_infos[AbstractDumperBase::s_current_map]->set_property (prop_id, prop_val);¤¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4A2CEC450138*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CEC5F02EA*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CEC5F02EA*¤	if (params.size () < 1) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string value = TemplatePainter::resolve_exp(params[0], painter);¤	AbstractDumperBase::s_intend_shift += atoi(value.c_str());¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4A2CEC5F02EA*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CEC790020*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CEC790020*¤	if (params.size () < 1) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string param = TemplatePainter::resolve_exp(params[0], painter);¤	AbstractDumperBase::s_shift_scope = (param == "true");¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4A2CEC790020*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CECA2024F*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CECA2024F*¤	if (params.size () < 1) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string ret = TemplatePainter::resolve_exp(params[0], painter);¤	return GCL::convert_to_borland_style(ret, GCL::CI_FUNCTION);¤	//#UC END# *4A2DFD7B0291_4A2CECA2024F*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CECBF0234*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CECBF0234*¤	if (params.size () < 1) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string ret = TemplatePainter::resolve_exp(params[0], painter);¤	return GCL::convert_to_java_style(ret, GCL::CI_FUNCTION);¤	//#UC END# *4A2DFD7B0291_4A2CECBF0234*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CECE100F9*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CECE100F9*¤	if (params.size () < 1) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string ret = TemplatePainter::resolve_exp(params[0], painter);¤	return GCL::convert_to_omg_style(ret, GCL::CI_FUNCTION);¤	//#UC END# *4A2DFD7B0291_4A2CECE100F9*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CECFB01DE*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CECFB01DE*¤	if (params.size () < 1) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string colorref_str = TemplatePainter::resolve_exp(params[0], painter);¤	std::string delimetr (",");¤	if (params.size () >= 2) {¤		delimetr = TemplatePainter::resolve_exp(params[1], painter);¤	}¤	std::string ret;¤	if (colorref_str.empty () == false) {			¤		try {¤			unsigned long color = boost::lexical_cast<unsigned long> (colorref_str);			¤			ret = boost::lexical_cast<std::string> ((unsigned long)GetRValue (color));¤			ret += delimetr;¤			ret += boost::lexical_cast<std::string> ((unsigned long)GetGValue (color));¤			ret += delimetr;¤			ret += boost::lexical_cast<std::string> ((unsigned long)GetBValue (color));			¤		} catch (boost::bad_lexical_cast&) {¤			char mess [128];¤			sprintf (¤				mess¤				, "Bad param in function: %s (%s)"¤				, GDS_CURRENT_FUNCTION¤				, colorref_str.c_str ()				¤			);¤			throw AbstractDumperBase::FatalError (mess);¤		}¤	}¤	return ret;¤	//#UC END# *4A2DFD7B0291_4A2CECFB01DE*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CED120031*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CED120031*¤	class local {¤	public:¤		static const std::string quote_string (const std::string& source) {¤			std::string res (source);			¤			GCL::str_replace (res, "\"", "\\\"");¤			GCL::str_replace (res, "\\", "\\\\");¤			res.insert (0, "\"");¤			res.append ("\"");¤¤			return res;¤		}¤	};¤	if (params.size () < 2) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string dumper_id = TemplatePainter::resolve_exp (params[0], painter);¤	std::string::const_iterator it = dumper_id.begin();¤	const AbstractDumperBase* adb = painter.get_dumper_by_template(it);¤	¤	if (adb != 0) {¤		std::string var_id = TemplatePainter::resolve_exp(params[1], painter);¤		¤		AbstractDumperBase::ADList& list = (TemplatePainter::var_list_of_dumpers ())[var_id];¤¤		const AbstractDumperBase::Template& tpl = adb->get_template ();¤		if (tpl.user_properties_group.is_nil () == false) {¤			const AbstractDumperBase::UserPropertyMap& props = tpl.user_properties_group->get_properties ();¤			AbstractDumperBase::UserPropertyMap::const_iterator it = props.begin ();¤			AbstractDumperBase::UserPropertyMap::const_iterator it_end = props.end ();¤			for (; it != it_end; ++it) {¤				std::string up_name = local::quote_string (it->first);¤				std::string up_value = adb->get_user_property_str (it->first);¤				if (up_value.empty ()) {¤					up_value = "\"\"";¤				} else {¤					up_value = local::quote_string (up_value);¤				}¤				std::string str (up_name + " = " + up_value);¤				AbstractDumperBase* arg = new TemplatePainter::TextDumper (str.data());¤				TemplatePainter::dumpers_heap ().push_back (arg);¤				list.push_back (arg);¤¤			}			¤		}¤	}¤	return std::string ("");¤	//#UC END# *4A2DFD7B0291_4A2CED120031*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CED2C0317*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CED2C0317*¤	if (params.size () < 1) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤¤	std::string message = TemplatePainter::resolve_exp(params[0], painter);¤	const AbstractDumperBase* adb = painter.m_owner ? painter.get_owner () : painter.get_main_scope ();¤¤	if (adb) {¤		adb->write_template_warning_log(message.c_str ());¤	} else {¤		GDS_ASSERT_MSG(adb !=0,("Ïîïûòêà âûçûâàòü ôóíêöèè %f_warning ïðè 0-îì %S è %B"));¤		throw AbstractDumperBase::FatalError ("Ïîïûòêà âûçûâàòü ôóíêöèè %f_warning ïðè 0-îì %S è %B");¤	}¤¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4A2CED2C0317*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CED5602EA*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CED5602EA*¤	if (params.size () < 2) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	AbstractDumperBase::GenID tmp = AbstractDumperBase::s_current_map;¤	AbstractDumperBase::s_current_map = TemplatePainter::resolve_exp(params[0], painter);¤	std::string ret = TemplatePainter::resolve_exp(params[1], painter);¤	AbstractDumperBase::s_current_map = tmp;¤	return ret;¤	//#UC END# *4A2DFD7B0291_4A2CED5602EA*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CE2440012*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CE2440012*¤	if (params.size () < 2) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string res = TemplatePainter::resolve_exp (params[0], painter);¤	std::string prefix = TemplatePainter::resolve_exp (params[1], painter);¤	¤	if (prefix.empty () == false) {¤		std::string::size_type off = res.length () - prefix.length ();¤		if (off >= 0 && res.substr (off) == prefix) {¤			res.erase (off);¤		}¤	}¤	return res;¤	//#UC END# *4A2DFD7B0291_4A2CE2440012*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CE2CF0035*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CE2CF0035*¤	if (params.size () < 2) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string res = TemplatePainter::resolve_exp (params[0], painter);¤	std::string prefix = TemplatePainter::resolve_exp (params[1], painter);¤	¤	if (prefix.empty () == false) {¤		if (res.substr (0, prefix.length ()) == prefix) {¤			res.erase (0,  prefix.length ());¤		}¤	}¤	return res;¤	//#UC END# *4A2DFD7B0291_4A2CE2CF0035*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CE3B603C9*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CE3B603C9*¤	if (params.size () < 1) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string source_str = TemplatePainter::resolve_exp(params[0], painter);¤	std::string::size_type symbols_count = boost::lexical_cast<long> (TemplatePainter::resolve_exp(params[1], painter));¤	if (symbols_count > source_str.size ()) {//åñëè ïðîñÿò ñèìâîëîâ áîëüøå ÷åì åñòü - óäàëÿåì âñþ ñòðîêó¤		symbols_count = source_str.size ();¤	}	¤¤	return source_str.substr (symbols_count);¤	//#UC END# *4A2DFD7B0291_4A2CE3B603C9*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CE3E900D7*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CE3E900D7*¤	if (params.size () < 2) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string source_str = TemplatePainter::resolve_exp(params[0], painter);¤	long symbols_count = boost::lexical_cast<long> (TemplatePainter::resolve_exp(params[1], painter));		¤	long skip_symbols = source_str.size () - symbols_count;¤	if (skip_symbols < 0) {//åñëè ïðîñÿò ñèìâîëîâ áîëüøå ÷åì åñòü - óäàëÿåì âñþ ñòðîêó¤		skip_symbols = source_str.size ();¤	}		¤	return source_str.substr (0, skip_symbols);¤	//#UC END# *4A2DFD7B0291_4A2CE3E900D7*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CE43F03D6*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CE43F03D6*¤	if (params.size () < 2) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string source_str = TemplatePainter::resolve_exp (params[0], painter);¤	std::string prefix = TemplatePainter::resolve_exp (params[1], painter);¤¤	if (GCL::start_with (source_str.c_str (), prefix.c_str ())) {¤		return prefix;¤	}¤	return source_str;¤	//#UC END# *4A2DFD7B0291_4A2CE43F03D6*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CE46B00AF*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CE46B00AF*¤	if (params.size () < 3) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string list_id = TemplatePainter::resolve_exp(params[0], painter);¤	std::string str = TemplatePainter::resolve_exp(params[1], painter);¤	std::string separator = TemplatePainter::resolve_exp(params[2], painter);¤	¤	GCL::StrVector splited = GCL::split_string_by_sub_string (str.c_str (), separator.c_str ());¤	(TemplatePainter::var_list_of_dumpers ()[list_id]).clear ();¤	for (¤		GCL::StrVector::iterator it = splited.begin ()¤		; it != splited.end ()¤		; ++it¤	) {¤		AbstractDumperBase* arg = new TemplatePainter::TextDumper (it->data());¤		TemplatePainter::dumpers_heap ().push_back (arg);¤		(TemplatePainter::var_list_of_dumpers ()[list_id]).push_back (arg);¤	}¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4A2CE46B00AF*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CE49001EC*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CE49001EC*¤	if (params.size () < 1) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string str (params[0].begin()+1, params[0].end()-1);¤	str = TemplatePainter::resolve_exp(str, painter);¤	std::string in_format (params[1].begin()+1, params[1].end()-1);¤	std::string out_format (params[2].begin()+1, params[2].end()-1);¤¤	GCL::convert_to_scanf_format (in_format);¤	GCL::convert_to_scanf_format (out_format);¤¤	return GCL::string_converter(str, in_format, out_format);¤	//#UC END# *4A2DFD7B0291_4A2CE49001EC*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CE4C401E7*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CE4C401E7*¤	if (params.size () < 2) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤¤	std::string ret = TemplatePainter::resolve_exp(params[0], painter);¤	std::string source_substr = TemplatePainter::resolve_exp(params[1], painter);¤¤	std::string target_substr;¤	if (params.size() > 2) {¤		target_substr = TemplatePainter::resolve_exp(params[2], painter);¤	}¤			¤	GCL::str_replace (ret, source_substr.data(), target_substr.data());¤	return ret;¤	//#UC END# *4A2DFD7B0291_4A2CE4C401E7*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CE4E70116*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CE4E70116*¤	if (params.size () < 1) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string ret = TemplatePainter::resolve_exp(params[0], painter);¤	¤	size_t split_len = 100;¤	std::string prefix;¤¤	if (params.size() > 1) {¤		prefix = TemplatePainter::resolve_exp(params[1], painter);¤	}¤	¤	if (params.size() > 3) {¤		std::string param = TemplatePainter::resolve_exp(params[3], painter);¤		try {¤			split_len = boost::lexical_cast<size_t> (param);¤		} catch (boost::bad_lexical_cast&) {¤			LOG_E (("Wrong split size param: %s", param.c_str ()));¤		}¤	}¤	split_len -= prefix.size ();¤	GCL::StrVector strs = GCL::split_string_format (ret.c_str(), split_len);¤	¤	std::string sep;¤	if (params.size() > 2) {¤		sep = TemplatePainter::resolve_exp(params[2], painter);¤	} else {¤		sep = "\n";¤	}¤			¤	ret = "";¤	for (GCL::StrVector::iterator it = strs.begin(); it != strs.end(); it++) {¤		ret += prefix + GCL::trim_ws(it->c_str ());¤		if (std::distance (it, strs.end()) > 1) ret += sep;¤	}¤	return ret;¤	//#UC END# *4A2DFD7B0291_4A2CE4E70116*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CE50C0124*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CE50C0124*¤	class StringQuoter : public std::unary_function <std::string, std::string> {¤	public:¤		std::string operator () (const std::string& source) {¤			std::string ret ("\"");¤			ret += source;¤			ret += "\"";¤¤			return ret;¤		}¤	};¤¤	if (params.size () < 1) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string source_str = TemplatePainter::resolve_exp (params[0], painter);¤	¤	std::string result;¤	if (source_str.empty () == false) {¤		GCL::StrVector ws_items = GCL::split_string_by (source_str.c_str (), ' ');¤		GCL::StrVector res_ws_items;¤		std::string local_result;¤		for (¤			GCL::StrVector::iterator it = ws_items.begin ()¤			; it != ws_items.end ()¤			; ++it¤		) {¤			//ñïèñîê ýëåìåíòîâ, îáúåäèí¸ííûõ ïî ÈËÈ¤			GCL::StrVector or_items = GCL::split_string_by (it->c_str (), '|');¤			if (or_items.size () == 1) {¤				//ñïèñîê ýëåìåíòîâ, îáúåäèí¸ííûõ ïî ÍÅ¤				StringQuoter quoter;¤				local_result = quoter (*it);¤			} else {¤				StringQuoter quoter;¤				std::transform (or_items.begin (), or_items.end (), or_items.begin (), quoter);¤¤				std::string res ("(");¤				res += GCL::join (or_items, "|");¤				res += ")";¤				local_result = res;¤			}¤			res_ws_items.push_back (local_result);¤		}¤		result = GCL::join (res_ws_items, " ");¤	}¤	return result;¤	//#UC END# *4A2DFD7B0291_4A2CE50C0124*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CE590011F*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CE590011F*¤	if (params.size () < 3) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string first = TemplatePainter::resolve_exp(params[0], painter);¤	std::string second = TemplatePainter::resolve_exp(params[1], painter);¤	std::string op = TemplatePainter::resolve_exp(params[2], painter);¤¤	std::string ret;¤	if (op == "\"<\"") {¤		ret = boost::lexical_cast<std::string> (first < second);¤	} else if (op == "\"<=\"") {¤		ret = boost::lexical_cast<std::string> (first <= second);¤	} else if (op == "\">\"") {¤		ret = boost::lexical_cast<std::string> (first > second);¤	} else if (op == "\">=\"") {¤		ret = boost::lexical_cast<std::string> (first >= second);¤	} else if (op == "\"==\"") {¤		ret = boost::lexical_cast<std::string> (first == second);¤	} else if (op == "\"!=\"") {¤		ret = boost::lexical_cast<std::string> (first != second);¤	} else {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += ", unknown comapre operation: ";¤		mess += op;¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	return ret;¤	//#UC END# *4A2DFD7B0291_4A2CE590011F*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CE5AC037A*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CE5AC037A*¤	if (params.size () < 2) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string str = TemplatePainter::resolve_exp(params[0], painter);¤	std::string substr = TemplatePainter::resolve_exp(params[1], painter);¤	¤	std::string::size_type pos = str.find (substr);¤	std::string res ("-1");¤	if (pos != std::string::npos) {		¤		res = boost::lexical_cast<std::string> (pos);¤	}¤	return res;¤	//#UC END# *4A2DFD7B0291_4A2CE5AC037A*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CE6BB0290*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CE6BB0290*¤	if (params.size () < 1) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string source_str = TemplatePainter::resolve_exp(params[0], painter);¤	boost::hash<std::string> str_hash;		¤	std::string ret = boost::lexical_cast<std::string> (str_hash (source_str));¤	return ret;¤	//#UC END# *4A2DFD7B0291_4A2CE6BB0290*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CE6DB00A0*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CE6DB00A0*¤	if (params.size () < 1) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string source_str = TemplatePainter::resolve_exp(params[0], painter);		¤	std::string ret = boost::lexical_cast<std::string> (source_str.length ());¤	return ret;¤	//#UC END# *4A2DFD7B0291_4A2CE6DB00A0*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CE6FA00E6*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CE6FA00E6*¤	if (params.size () < 2) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string source_str = TemplatePainter::resolve_exp(params[0], painter);¤	std::string::size_type symbols_count = boost::lexical_cast<long> (TemplatePainter::resolve_exp(params[1], painter));¤	if (symbols_count > source_str.size ()) {//åñëè ïðîñÿò ñèìâîëîâ áîëüøå ÷åì åñòü - îòäàåì âñþ ñòðîêó¤		symbols_count = source_str.size ();¤	}¤	std::string ret (¤		source_str.begin () ¤		, source_str.begin () + symbols_count¤	);¤	return ret;	¤	//#UC END# *4A2DFD7B0291_4A2CE6FA00E6*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CE72302CC*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CE72302CC*¤	if (params.size () < 2) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}	¤	std::string source_str = TemplatePainter::resolve_exp(params[0], painter);¤	long symbols_count = boost::lexical_cast<long> (TemplatePainter::resolve_exp(params[1], painter));¤	long skip_symbols = source_str.size () - symbols_count;¤	if (skip_symbols < 0) {//åñëè ïðîñÿò ñèìâîëîâ áîëüøå ÷åì åñòü - îòäàåì âñþ ñòðîêó¤		skip_symbols = 0;¤	}¤	std::string ret (¤		source_str.begin () + skip_symbols¤		, source_str.end ()¤	);¤	return ret;¤	//#UC END# *4A2DFD7B0291_4A2CE72302CC*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CE74F00FF*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CE74F00FF*¤	if (params.size () < 2) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string source_str = TemplatePainter::resolve_exp (params[0], painter);¤	std::string suffix = TemplatePainter::resolve_exp (params[1], painter);¤¤	if (GCL::end_with (source_str.c_str (), suffix.c_str ())) {¤		return suffix;¤	}¤	return source_str;¤	//#UC END# *4A2DFD7B0291_4A2CE74F00FF*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CE768013F*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CE768013F*¤	if (params.size () < 1) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string ret = TemplatePainter::resolve_exp(params[0], painter);¤	GCL::to_lower(ret);¤	return ret;¤	//#UC END# *4A2DFD7B0291_4A2CE768013F*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CE7B40017*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CE7B40017*¤	if (params.size () < 1) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string ret = TemplatePainter::resolve_exp(params[0], painter);¤	GCL::to_upper(ret);¤	return ret;¤	//#UC END# *4A2DFD7B0291_4A2CE7B40017*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CE7DA02AD*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CE7DA02AD*¤	if (params.size () < 1) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string ret = TemplatePainter::resolve_exp(params[0], painter);¤	char prefix = 0;¤	char open = 0;¤	char close = 0;¤	bool keep_eng = false;¤	if (params.size() > 1) {¤		prefix = params[1][0];¤	}¤	if (params.size() > 2) {¤		open = params[2][0];¤		keep_eng = true;¤	}¤	if (params.size() > 3) close = params[3][0];		¤	return GCL::multibyte_to_str (ret, prefix, keep_eng, open, close);¤	//#UC END# *4A2DFD7B0291_4A2CE7DA02AD*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CDB090196*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CDB090196*¤	if (params.size () < 3) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string var_id = TemplatePainter::resolve_exp(params[0], painter);¤	std::string::const_iterator var_id_it = var_id.begin();¤	AbstractDumperBase* adb = const_cast<AbstractDumperBase*> (¤		painter.get_dumper_by_template(var_id_it)¤	);¤¤	if (adb) {¤		std::string list_id_or_metadata = TemplatePainter::resolve_exp(params[2], painter);¤		TemplatePainter::VarListOfDumpers::iterator map_it = TemplatePainter::var_list_of_dumpers ().find (list_id_or_metadata);¤		¤		std::string key = TemplatePainter::resolve_exp(params[1], painter);¤		if (map_it != TemplatePainter::var_list_of_dumpers ().end ()) {¤			if (!map_it->second.empty ()) {¤				for (¤					AbstractDumperBase::ADList::const_iterator it = map_it->second.begin ()¤					; it != map_it->second.end ()¤					; ++it¤				) {¤					adb->add_metadata (key, (*it)->get_name_str ());¤				}¤			} else {¤				std::string mess (GDS_CURRENT_FUNCTION);¤				mess += " - can't add empty metadata";¤				throw AbstractDumperBase::FatalError (mess);¤			}¤		} else {¤			adb->add_metadata (key, list_id_or_metadata);¤		}		¤	} else {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - can't find dumper: ";¤		mess += var_id;¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	return std::string ();¤¤	//#UC END# *4A2DFD7B0291_4A2CDB090196*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CF2F20307*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CF2F20307*¤		if (params.size () < 3) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string first_str = TemplatePainter::resolve_exp(params[0], painter);¤	std::string second_str = TemplatePainter::resolve_exp(params[1], painter);¤	std::string op = TemplatePainter::resolve_exp(params[2], painter);¤¤	first_str = first_str.substr (1, first_str.length () - 2);¤	second_str = second_str.substr (1, second_str.length () - 2);		¤¤	long first;¤	long second;¤¤	try {¤		first = boost::lexical_cast<long> (¤			first_str¤		);¤		second = boost::lexical_cast<long> (¤			second_str¤		);¤	} catch (boost::bad_lexical_cast&) {¤		char mess [128];¤		sprintf (¤			mess¤			, "Bad params in function: %s (%s, %s, %s)"¤			, GDS_CURRENT_FUNCTION¤			, first_str.c_str ()¤			, second_str.c_str ()¤			, op.c_str ()				¤		);¤		throw AbstractDumperBase::FatalError (mess);¤	}		¤¤	bool res;¤	if (op == "\"<\"") {¤		res = first < second;¤	} else if (op == "\"<=\"") {¤		res = first <= second;¤	} else if (op == "\">\"") {¤		res = first > second;¤	} else if (op == "\">=\"") {¤		res = first >= second;¤	} else if (op == "\"==\"") {¤		res = first == second;¤	} else if (op == "\"!=\"") {¤		res = first != second;¤	} else {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += ", unknown comapre operation: ";¤		mess == op;¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	return res ? "1" : "0";¤	//#UC END# *4A2DFD7B0291_4A2CF2F20307*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2CF65700DE*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2CF65700DE*¤	if (params.size () < 2) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string source_str = TemplatePainter::resolve_exp (params[0], painter);¤	std::string symbols_str = TemplatePainter::resolve_exp (params[1], painter);¤¤	std::string res ("true");¤	¤	std::string::const_iterator it = source_str.begin ();¤	std::string::const_iterator it_end = source_str.end ();¤¤	for (; it != it_end; ++it) {¤		if (symbols_str.find (*it) == std::string::npos) {¤			//íå íàøëè ñèìâîë - âûõîäèì¤			res = "false";¤			break;¤		}¤	}¤	return res;¤	//#UC END# *4A2DFD7B0291_4A2CF65700DE*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2DFDB80019*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2DFDB80019*¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤	¤	RoseAbstractDumper* rad = const_cast<RoseAbstractDumper*> (dynamic_cast<const RoseAbstractDumper*> (self));¤	if (rad) {¤		std::string target = TemplatePainter::resolve_exp (params[0], painter);		¤¤		IRoseItemPtr item = rad->rose_element ();¤		if (item) {¤			const RoseAbstractDumper* target_rad = RoseAbstractDumper::find_in_tree (target);¤¤			if (!target_rad) {¤				target_rad = rad->resolve (target);¤				if (!target_rad) {¤					throw Base::FatalError (¤						std::string ("Íå óäàëîñü íàéòè ýëåìåíò äëÿ ïðîñòàíîâêè ñâÿçè ðåàëèçàöèè: ")¤						+ target¤					);¤				}¤			}¤			¤¤			RoseInternal::RoseClass* virtual_cls = item.GetInterfacePtr () ¤				? dynamic_cast<RoseInternal::RoseClass*> (item.GetInterfacePtr ()) ¤				: 0;¤			if (virtual_cls) {¤				//åñëè ýëåìåíò âèðòóàëüíûé - íóæíî äîáàâèòü íîâóþ ñâÿçü:¤				ATL::CComObject<RoseInternal::RoseRealizeRelationImpl>* obj;¤				obj->CreateInstance (&obj);¤				IRoseRealizeRelationPtr rel;¤				obj->QueryInterface (&rel);¤¤				obj->set_context (item);¤¤				std::string rel_guid (virtual_cls->get_unique_id ());¤				short count = virtual_cls->get_realize_relations ()->Count;¤				¤				rel_guid += std::string ("VREALIZE_REL") + boost::lexical_cast<std::string> (count + 1);¤				obj->set_unique_id (rel_guid);¤				obj->set_target_class (target_rad->rose_element ());¤¤				virtual_cls->add_realize_relation (rel);¤			}¤			¤			if (!rad->is_supplier_with_stereotype (target_rad, ST_LINK_REL)) {¤				bool is_transparent = false;¤				if (params.size () > 1) {¤					std::string transparent_flag = TemplatePainter::resolve_exp (params[1], painter);¤					is_transparent = transparent_flag == "true";¤				}¤¤				rad->add_supplier_spec (¤					target_rad¤					, is_transparent ? ObjectTreeResolver::ST_IGNORED : ObjectTreeResolver::ST_NAVIGABLE¤					, ST_LINK_REL¤					, is_transparent ? false : true¤					, is_transparent ? false : true¤				);¤¤				painter->invalidate_dumpers_list (SX_3_REALIZATION, rad);¤				painter->invalidate_dumpers_list (SX_3_REQURSIVE_REALIZATION, rad);¤				painter->invalidate_dumpers_list (SX_3_DERIVED_OVER, rad);¤				painter->invalidate_dumpers_list (SX_3_DERIVED_IMPL, rad);¤				painter->invalidate_dumpers_list (SX_3_NOT_IMPLEMENTED_DERIVED_ABSTRACT, rad);¤¤				AbstractDumper::add_virtual_relation (¤					rad¤					, target_rad¤					, is_transparent ? ObjectTreeResolver::ST_IGNORED : ObjectTreeResolver::ST_NAVIGABLE¤					, ST_LINK_REL¤				);¤¤				VirtualFunctionsHelper::run_spell_with_suppliers (target_rad);¤			}¤		}¤	}¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4A2DFDB80019*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2DFDE80022*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2DFDE80022*¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤	¤	RoseAbstractDumper* rad = const_cast<RoseAbstractDumper*> (dynamic_cast<const RoseAbstractDumper*> (self));¤	if (rad) {¤		std::string target = TemplatePainter::resolve_exp (params[0], painter);¤¤		IRoseItemPtr item = rad->rose_element ();¤		if (item) {¤			const RoseAbstractDumper* target_rad = RoseAbstractDumper::find_in_tree (target);¤			¤			if (!target_rad) {¤				target_rad = rad->resolve (target);¤				if (!target_rad) {¤					throw Base::FatalError (¤						std::string ("Íå óäàëîñü íàéòè ýëåìåíò äëÿ ïðîñòàíîâêè ñâÿçè ðåàëèçàöèè: ")¤						+ target¤					);¤				}¤			}¤			RoseInternal::RoseClass* virtual_cls = item.GetInterfacePtr () ¤				? dynamic_cast<RoseInternal::RoseClass*> (item.GetInterfacePtr ()) ¤				: 0;¤			if (virtual_cls) {¤				¤				//åñëè ýëåìåíò âèðòóàëüíûé - íóæíî äîáàâèòü íîâóþ ñâÿçü:¤				ATL::CComObject<RoseInternal::RoseInheritRelationImpl>* obj;¤				obj->CreateInstance (&obj);¤				IRoseInheritRelationPtr rel;¤				obj->QueryInterface (&rel);¤¤				obj->set_context (item);¤				¤				std::string rel_guid (virtual_cls->get_unique_id ());¤				short count = virtual_cls->get_inherite_relations ()->Count;¤				¤				rel_guid += std::string ("VINHERITE_REL") + boost::lexical_cast<std::string> (count + 1);¤				obj->set_unique_id (rel_guid);¤				obj->set_target_class (target_rad->rose_element ());¤¤				virtual_cls->add_inherit_relation (rel);¤			}¤¤			if (!rad->is_supplier_with_stereotype (target_rad, ST_LINK_INH)) {¤				bool is_transparent = false;¤				if (params.size () > 1) {¤					std::string transparent_flag = TemplatePainter::resolve_exp (params[1], painter);¤					is_transparent = transparent_flag == "true";¤				}¤¤				rad->add_supplier_spec (¤					target_rad¤					, is_transparent ? ObjectTreeResolver::ST_IGNORED : ObjectTreeResolver::ST_NAVIGABLE¤					, ST_LINK_INH¤					, is_transparent ? false : true¤					, is_transparent ? false : true¤				);¤¤				painter->invalidate_dumpers_list (SX_3_GENERALIZATION, rad);¤				painter->invalidate_dumpers_list (SX_3_REQURSIVE_GENERALIZATION, rad);¤				painter->invalidate_dumpers_list (SX_3_DERIVED_OVER, rad);¤				painter->invalidate_dumpers_list (SX_3_DERIVED_IMPL, rad);¤				painter->invalidate_dumpers_list (SX_3_NOT_IMPLEMENTED_DERIVED_ABSTRACT, rad);¤¤				AbstractDumper::add_virtual_relation (¤					rad¤					, target_rad¤					, is_transparent ? ObjectTreeResolver::ST_IGNORED : ObjectTreeResolver::ST_NAVIGABLE¤					, ST_LINK_INH¤				);¤¤				VirtualFunctionsHelper::run_spell_with_suppliers (target_rad);¤			}¤		}¤	}¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4A2DFDE80022*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2DFE10037F*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2DFE10037F*¤	if (params.size () < 4) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 4, params.size ());¤	}¤	const RoseAbstractDumper* rad = dynamic_cast<const RoseAbstractDumper*> (self);¤	if (rad) {¤		std::string guid_suffix = TemplatePainter::resolve_exp (params[0], painter);¤		std::string guid (this->make_uid (rad, "", guid_suffix));¤¤		std::string stereotype = TemplatePainter::resolve_exp (params[1], painter);¤		std::string name = TemplatePainter::resolve_exp (params[2], painter);		¤		std::string var_id = TemplatePainter::resolve_exp (params[3], painter);¤		¤		ATL::CComObject<RoseInternal::RoseClassImpl>* obj;¤		ATL::CComObject<RoseInternal::RoseClassImpl>::CreateInstance (&obj);¤		IRoseClassPtr cls = obj;¤¤		IRoseItemPtr item = rad->rose_element ();¤		if (item) {			¤			obj->set_unique_id (guid);¤			obj->set_stereotype (stereotype);¤			obj->set_name (name);			¤			obj->set_context (item);¤			¤			Core::Aptr<RoseAbstractDumpFactory> df = new RoseAbstractDumpFactory;¤			RoseAbstractDumper::set_dumper_factory (df.in());¤¤			RoseAbstractDumper* new_cls = df->create_by_stereotype (rad, cls);¤			cls = 0;¤			if (new_cls) {¤				painter->invalidate_dumpers_list (SX_3_CONTENTS, rad);¤				painter->invalidate_dumpers_list (SX_3_ALL_CONTENTS, rad);¤¤				RoseAbstractDumper::add_virtual_dumper (new_cls, painter->get_main_scope ());¤				new_cls->link_all_suppliers ();¤				TemplatePainter::set_var_dumper (var_id, new_cls);¤				rad->set_var_dumper (guid_suffix, new_cls);¤			} else {¤				throw Base::FatalError ("Creation virtual Class failed");¤			}¤		}¤	}¤¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4A2DFE10037F*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2DFE4F0383*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2DFE4F0383*¤	if (params.size () < 4) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 4, params.size ());¤	}¤	¤	const RoseAbstractDumper* rad = dynamic_cast<const RoseAbstractDumper*> (self);¤	if (rad) {¤		std::string guid_suffix = TemplatePainter::resolve_exp (params[0], painter);¤¤		std::string stereotype = TemplatePainter::resolve_exp (params[1], painter);¤		std::string signature = TemplatePainter::resolve_exp (params[2], painter);¤		std::string param3 = TemplatePainter::resolve_exp (params[3], painter);		¤		if (params.size () == 5) {¤			std::string var_id = TemplatePainter::resolve_exp (params[3], painter);¤			return this->create_operation (rad, guid_suffix, signature, stereotype, param3, var_id, painter);¤		} else {¤			return this->create_operation (rad, guid_suffix, signature, stereotype, param3, painter);¤		}¤	}¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4A2DFE4F0383*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2DFF9E0013*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2DFF9E0013*¤	if (params.size () < 4) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 4, params.size ());¤	}¤	const RoseAbstractDumper* rad = dynamic_cast<const RoseAbstractDumper*> (self);¤	if (rad) {¤		std::string guid_suffix = TemplatePainter::resolve_exp (params[0], painter);¤		std::string guid (this->make_uid (rad, "", guid_suffix));¤¤		std::string stereotype = TemplatePainter::resolve_exp (params[1], painter);¤		std::string signature = TemplatePainter::resolve_exp (params[2], painter);		¤		std::string var_id = TemplatePainter::resolve_exp (params[3], painter);¤¤		ATL::CComObject<RoseInternal::RoseAttributeImpl>* obj;¤		obj->CreateInstance (&obj);¤		IRoseAttributePtr attr;¤		obj->QueryInterface (&attr);¤¤		IRoseItemPtr item = rad->rose_element ();¤		if (item) {¤			obj->set_unique_id (guid);¤			obj->set_context (item);¤			obj->set_stereotype (stereotype);¤¤			try {¤				Core::Aptr<Parsers::AttributeData> data = Parsers::AttributeParserFactory::get ().parse (signature);¤								¤				obj->set_name (data->name);¤				obj->set_init_value (data->init_value);¤				RoseAbstractDumper* target_rad = RoseAbstractDumper::find_in_tree (data->type);¤				if (target_rad) {¤					obj->set_target_class (target_rad->rose_element ());¤				} else {¤					obj->set_target (data->type);¤				}¤¤				IRoseClassPtr cls = obj->get_target_class ();¤				if (cls) {¤					TypeLinkHelperFactory::get ().link (attr, get_rose_element_uid (cls));¤				}¤			} catch (Parsers::ParseError& ex) {¤				throw Base::FatalError (ex.what ());¤			}			¤¤			RoseHelper::set_default_abstraction_type (attr);¤¤			Core::Aptr<RoseAbstractDumpFactory> df = new RoseAbstractDumpFactory;¤			RoseAbstractDumper::set_dumper_factory (df.in());¤¤			RoseAbstractDumper* new_attr = df->create_by_stereotype (rad, attr);¤			if (new_attr) {¤				painter->invalidate_dumpers_list (SX_3_CONTENTS, rad);¤				painter->invalidate_dumpers_list (SX_3_ALL_CONTENTS, rad);¤¤				RoseAbstractDumper::add_virtual_dumper (new_attr, painter->get_main_scope ());¤				new_attr->link_all_suppliers ();				¤¤				std::string link_type = new_attr->get_link_type_str ();¤				if (link_type == "agr" || link_type == "ref") {¤					const AbstractDumper* target = dynamic_cast<const AbstractDumper*> (new_attr->get_target ());¤					if (target) {¤						VirtualFunctionsHelper::run_spell_with_suppliers (target);¤					}¤				}¤¤				TemplatePainter::set_var_dumper (var_id, new_attr);¤				rad->set_var_dumper (guid_suffix, new_attr);¤			} else {¤				throw Base::FatalError ("Creation virtual Attribute failed");¤			}¤		}¤	}¤¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4A2DFF9E0013*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2DFFC20242*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2DFFC20242*¤	static unsigned long s_virtual_param_count = 0;¤	if (params.size () < 4) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 4, params.size ());¤	}¤	const RoseAbstractDumper* rad = dynamic_cast<const RoseAbstractDumper*> (self);¤	if (rad) {¤		std::string guid_suffix = TemplatePainter::resolve_exp (params[0], painter);¤		std::string guid (this->make_uid (rad, "", guid_suffix));¤¤		std::string stereotype = TemplatePainter::resolve_exp (params[1], painter);¤		std::string signature = TemplatePainter::resolve_exp (params[2], painter);¤		std::string var_id = TemplatePainter::resolve_exp (params[3], painter);¤¤		ATL::CComObject<RoseInternal::RoseParameterImpl>* obj;¤		obj->CreateInstance (&obj);¤		IRoseParameterPtr par;¤		obj->QueryInterface (&par);¤¤		IRoseItemPtr item = rad->rose_element ();¤		if (item) {			¤			obj->set_unique_id (guid);¤			obj->set_context (item);¤			¤			try {¤				Core::Aptr<Parsers::AttributeData> data = Parsers::AttributeParserFactory::get ().parse (signature);¤								¤				obj->set_name (data->name);¤				obj->set_initial_value (data->init_value);¤				RoseAbstractDumper* target_rad = RoseAbstractDumper::find_in_tree (data->type);¤				if (target_rad) {¤					obj->set_target_class (target_rad->rose_element ());¤				} else {¤					obj->set_target (data->type);¤				}¤				¤				IRoseClassPtr cls = obj->get_target_class ();¤				if (cls) {¤					TypeLinkHelperFactory::get ().link (par, get_rose_element_uid (cls));¤				}¤¤			} catch (Parsers::ParseError& ex) {¤				throw Base::FatalError (ex.what ());¤			}¤			¤			¤			Core::Aptr<RoseAbstractDumpFactory> df = new RoseAbstractDumpFactory;¤			RoseAbstractDumper::set_dumper_factory (df.in());¤¤			RoseAbstractDumper* new_par = df->create_by_stereotype (rad, par);¤			if (new_par) {¤				painter->invalidate_dumpers_list (SX_3_CONTENTS, rad);¤				painter->invalidate_dumpers_list (SX_3_ALL_CONTENTS, rad);¤¤				RoseAbstractDumper::add_virtual_dumper (new_par, painter->get_main_scope ());¤				new_par->link_all_suppliers ();¤				TemplatePainter::set_var_dumper (var_id, new_par);¤				rad->set_var_dumper (guid_suffix, new_par);¤			} else {¤				throw Base::FatalError ("Creation virtual Parameter failed");¤			}¤		}¤	}¤¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4A2DFFC20242*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2E004702C6*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2E004702C6*¤	if (params.size () < 1 || (params.size () > 1 && params.size () < 4)) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, 5, params.size ());¤	}¤¤	std::string target;¤	if (params.size () == 1) {¤		target = TemplatePainter::resolve_exp (params[0], painter);¤	} else {¤		target = TemplatePainter::resolve_exp (params[1], painter);¤	}¤¤	const RoseAbstractDumper* rad = dynamic_cast<const RoseAbstractDumper*> (self);¤	if (rad) {¤		IRoseItemPtr item = rad->rose_element ();¤		if (item) {			¤			const RoseAbstractDumper* target_rad = RoseAbstractDumper::find_in_tree (target);¤			¤			bool is_class_dependecy = !(params.size () == 1);¤			if (!target_rad) {¤				if (is_class_dependecy) {¤					target_rad = rad->resolve (target);¤				} else {¤					Core::Aptr<ObjectTreeResolver::OTRVector> elems = RoseAbstractDumper::find_by_name (target);¤					if (elems.ptr () && !elems->empty ()) {¤						if (elems->size () == 1) {¤							target_rad = dynamic_cast<const RoseAbstractDumper*>((*elems)[0]);¤						} else {¤							throw Base::FatalError (¤								std::string ("Íàéäåíî áîëåå îäíîãî ýëåìåíòà äëÿ ïðîñòàíîâêè ñâÿçè çàâèñèìîñòè: ")¤								+ target¤							);¤						}¤					}¤				}¤				if (!target_rad) {¤					throw Base::FatalError (¤						std::string ("Íå óäàëîñü íàéòè ýëåìåíò äëÿ ïðîñòàíîâêè ñâÿçè çàâèñèìîñòè: ")¤						+ target¤					);¤				}¤			}¤			¤			if (!is_class_dependecy) { //ñâÿçü ìåæäó ýëåìåíòàìè, íå êëàññàìè!!!¤				this->create_dep_for_others (rad, target_rad);¤				painter->invalidate_dumpers_list (SX_3_DEPENDENCES, rad);¤				painter->invalidate_dumpers_list (SX_3_REQURSIVE_DEPENDENCES, rad);¤			} else {¤				const RoseAbstractClassDumper* source = dynamic_cast<const RoseAbstractClassDumper*> (rad);¤				const RoseAbstractClassDumper* target = dynamic_cast<const RoseAbstractClassDumper*> (target_rad);¤				if (!source || !target) {¤					throw Base::FatalError ("Èñõîäíûé ýëåìåíò è öåëåâîé äîëæíû áûòü êëàññàìè!");¤				}¤				std::string guid_suffix = TemplatePainter::resolve_exp (params[0], painter);¤								¤				std::string stereotype = TemplatePainter::resolve_exp (params[2], painter);¤				std::string name = TemplatePainter::resolve_exp (params[3], painter);¤				std::string var_id = TemplatePainter::resolve_exp (params[4], painter);¤¤				this->create_dep_for_class (source, target, guid_suffix, name, stereotype, var_id, painter->get_main_scope ());¤¤				painter->invalidate_dumpers_list (SX_3_CONTENTS, source);¤				painter->invalidate_dumpers_list (SX_3_ALL_CONTENTS, source);¤			}¤		}¤	}¤¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4A2E004702C6*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2E007001FB*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2E007001FB*¤	if (params.size () < 2) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 2, params.size ());¤	}¤	const RoseAbstractDumper* rad = dynamic_cast<const RoseAbstractDumper*> (self);¤	if (rad) {¤		std::string name = TemplatePainter::resolve_exp (params[0], painter);¤		std::string value = TemplatePainter::resolve_exp (params[1], painter);¤		IRoseItemPtr item = rad->rose_element ();¤		if (item) {¤			_bstr_t tool_name (Base::USER_PROPERTY_TOOL);¤¤			rad->set_temporary_property (std::string (tool_name), name, value);			¤		} else {¤			throw Base::FatalError ("SetUp failed - can't get rose item");¤		}¤	}¤¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4A2E007001FB*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2E009F0381*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2E009F0381*¤	throw Core::Root::MDAGenNotImplemented(GDS_CURRENT_FUNCTION);¤	//#UC END# *4A2DFD7B0291_4A2E009F0381*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2E00E3031F*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2E00E3031F*¤	if (params.size () < 2) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 2, params.size ());¤	}¤	¤	const RoseAbstractDumper* rad = dynamic_cast<const RoseAbstractDumper*> (self);¤	if (rad) {¤		std::string gen_id = TemplatePainter::resolve_exp (params[0], painter);¤		std::string true_or_false = TemplatePainter::resolve_exp (params[1], painter);¤¤		static std::string tool_name (_bstr_t (TOOL_NAME));¤		static std::string prop_applgen (_bstr_t(PROP_APPLGEN));¤¤		std::string old_value = rad->get_property_value (tool_name, prop_applgen);¤		std::string applied_gens_str = old_value;¤¤		GCL::StrSet applied_gens;¤		GCL::split_string_by_sub_string (applied_gens, applied_gens_str.data(), "|");¤¤		if (true_or_false == "true" && applied_gens.find (gen_id) == applied_gens.end ()) {¤			applied_gens.insert (gen_id);¤		} else if (applied_gens.find (gen_id) != applied_gens.end ()) {¤			applied_gens.erase (gen_id);¤		}¤¤		applied_gens_str = GCL::join (applied_gens, "|");¤¤		bool prop_updated = old_value != applied_gens_str;¤¤		rad->set_temporary_property (¤			tool_name¤			, prop_applgen¤			, applied_gens_str¤		);			¤¤		if (prop_updated) {¤			AbstractDumperBase::reset_accepted_generator (rad);¤		}¤	}¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4A2E00E3031F*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2E01050245*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2E01050245*¤	if (params.size () < 1) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	¤	RoseAbstractDumper* rad = const_cast<RoseAbstractDumper*> (dynamic_cast<const RoseAbstractDumper*> (self));¤	if (rad) {¤		std::string operation_guid = TemplatePainter::resolve_exp (params[0], painter);		¤¤		IRoseItemPtr item = rad->rose_element ();¤		if (item) {¤			const RoseAbstractDumper* target_rad = DumperTreeHelper::find_in_tree (operation_guid);¤			¤			if (!target_rad) {¤				target_rad = rad->resolve (operation_guid);¤				if (!target_rad) {¤					throw AbstractDumperBase::FatalError (¤						std::string ("Íå óäàëîñü íàéòè îïåðàöèþ: ")¤						+ operation_guid¤					);¤				}¤			}¤¤			IRoseOperationPtr op = rad->rose_element ();¤			if (op) {¤				_bstr_t tool_name (TOOL_NAME);				¤				_bstr_t prop_overload (PROP_DERIVED_OVERLOAD);¤¤				std::string overload = op->GetPropertyValue (tool_name, prop_overload);¤				GCL::StrSet overloaded;¤				GCL::split_string_by(overloaded, overload.c_str (), ',');¤				¤				overloaded.insert (operation_guid);¤				overload = GCL::join (operation_guid, ",");				¤				¤				if (¤					!RoseHelper::write_property_with_lock (¤						item¤						, static_cast<const char*> (prop_overload)¤						, overload¤						, AbstractDumperBase::s_options.lock_strategy¤						, false¤						, "Derived overload"¤					)¤				) {¤					throw AbstractDumperBase::FatalError (¤						std::string ("Íå óäàëîñü äîáàâèòü îïåðàöèþ â ñïèñîê override: ")¤						+ operation_guid¤					);¤				}¤			} else {¤				throw AbstractDumperBase::FatalError (¤					std::string ("Ýëåìåíò íå ÿâëÿåòñÿ îïåðàöèåé: ")¤					+ operation_guid¤				);¤			}¤		}¤	}¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4A2E01050245*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A2E012803BF*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A2E012803BF*¤	throw Core::Root::MDAGenNotImplemented(GDS_CURRENT_FUNCTION);¤	//#UC END# *4A2DFD7B0291_4A2E012803BF*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A39D9F50195*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A39D9F50195*¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤	¤	RoseAbstractDumper* rad = const_cast<RoseAbstractDumper*> (dynamic_cast<const RoseAbstractDumper*> (self));¤	if (rad) {¤		std::string operation_guid = TemplatePainter::resolve_exp (params[0], painter);		¤¤		IRoseItemPtr item = rad->rose_element ();¤		if (item) {¤			const RoseAbstractDumper* target_rad = RoseAbstractDumper::find_in_tree (operation_guid);¤			¤			if (!target_rad) {¤				Core::Aptr<AbstractDumperBase::ADList> derived_impl = rad->get_derived_impl ();¤				Core::Aptr<AbstractDumperBase::ADList> derived_over = rad->get_derived_over ();¤				¤				typedef std::set<const AbstractDumperBase*> ADBSet;¤				typedef std::set<const RoseAbstractDumper*> RADSet;¤¤				ADBSet operations (derived_impl->begin (), derived_impl->end ());¤				operations.insert (derived_over->begin (), derived_over->end ());¤				¤				RADSet founded_operations;¤				size_t len = operation_guid.length ();¤				for (¤					ADBSet::iterator it = operations.begin ()¤					; it != operations.end ()¤					; ++it¤				) {¤					const RoseAbstractDumper* it_rad = dynamic_cast<const RoseAbstractDumper*> (*it);¤					if (it_rad) {¤						std::string name = (static_cast<const Base::NamedElement*> (it_rad))->get_full_name ();¤						std::string::size_type pos = name.rfind (operation_guid);¤						¤						//ïðîâåðÿåì, ÷òî ïîëíîå èìÿ ýëåìåíòà çàêàí÷èâàåòñÿ íà operation_guid¤						if (pos != std::string::npos && (pos + len) == name.length ()) {¤							founded_operations.insert (it_rad);¤						}¤					}¤				}¤				¤				if (founded_operations.empty ()) {¤					throw Base::FatalError (¤						std::string ("Íå óäàëîñü íàéòè îïåðàöèþ: ")¤						+ operation_guid¤					);¤				} else if (founded_operations.size () > 1) {¤					throw Base::FatalError (¤						std::string ("Íàéäåí áîëåå îäíîé îïåðàöèè ñ èìåíåì: ")¤						+ operation_guid¤					);¤				} else {¤					target_rad = *(founded_operations.begin ());¤				}¤			}¤			¤			std::string target_item_type = target_rad->get_model_class_str ();¤			if (target_item_type == OPERATION_TYPE || target_item_type == ATTRIBUTE_TYPE || target_item_type == CLASS_TYPE) {¤				//this->add_new_overriden_element (rad, target_rad)¤				Core::Aptr<InheritedItemSet> inherited_items (InheritedItemHelperFactory::get ().get_stored_inherited_items (rad, m_property_name));¤				if (!inherited_items.is_nil ()) {¤					if (m_property_name == std::string (_bstr_t (PROP_DERIVED_OVERLOAD))) {¤						inherited_items->insert (OverloadedItemFactory::make (operation_guid, false));¤					} else if (m_property_name == std::string (_bstr_t (PROP_DERIVED_IMPLEMENT))) {¤						inherited_items->insert (ImplementedItemFactory::make (operation_guid, false));¤					} else {¤						GDS_ASSERT_MSG(0, ("Unknown overriden property name: %s", m_property_name.c_str ()));¤					}¤¤					std::string overriden_list_value = InheritedItemHelperFactory::get ().stored_value (*inherited_items.ptr ());¤					rad->set_temporary_property (std::string (_bstr_t(TOOL_NAME)), m_property_name, overriden_list_value);				¤				}				¤				¤				painter->invalidate_dumpers_list (m_list_tpl_command, rad);¤			} else {¤				throw Base::FatalError (¤					std::string ("Ýëåìåíò íå ÿâëÿåòñÿ íè îïåðàöèåé, íè àòðèáóòîì: ")¤					+ operation_guid¤				);¤			}¤		}¤	}¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4A39D9F50195*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A39E27900AF*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A39E27900AF*¤	//#UC END# *4A2DFD7B0291_4A39E27900AF*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A3F53400188*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A3F53400188*¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤¤	RoseAbstractAttributeDumper* rad = const_cast<RoseAbstractAttributeDumper*> (dynamic_cast<const RoseAbstractAttributeDumper*> (self));¤	if (rad) {¤		std::string link_type = TemplatePainter::resolve_exp (params[0], painter);¤¤		static const std::string sAGR_LINK_TYPE = "agr";¤		static const std::string sLNK_LINK_TYPE = "lnk";¤		static const std::string sREF_LINK_TYPE = "ref";¤¤		if (¤			link_type != sAGR_LINK_TYPE ¤			&& link_type != sLNK_LINK_TYPE ¤			&& link_type != sREF_LINK_TYPE ¤		) {¤			throw Base::FatalError ("Íåâåðíûé àðãóìåíò ôóíêöèè, äîëæåí áûòü agr|lnk|ref");¤		}¤		const AbstractDumperBase::Template& tpl = rad->get_template ();¤		if (¤			(¤				link_type == sAGR_LINK_TYPE && !(tpl.link_type & LTF_AGR)¤			) || (¤				link_type == sLNK_LINK_TYPE && !(tpl.link_type & LTF_LNK)¤			) || (¤				link_type == sREF_LINK_TYPE && !(tpl.link_type & LTF_REF)¤			)¤		) {¤			throw Base::FatalError ("Òèï ñâÿçè íå ðàçðåøåí øàáëîíîì");¤		}¤		¤		std::string old_link_type = rad->get_link_type ();¤		if (old_link_type != link_type) {¤			rad->set_link_type (link_type);¤			¤			if (link_type == sAGR_LINK_TYPE || link_type == sREF_LINK_TYPE) {¤				const AbstractDumper* target = dynamic_cast<const AbstractDumper*> (rad->get_target ());¤				if (target) {¤					VirtualFunctionsHelper::run_spell_with_suppliers (target);¤				}¤			}¤		}¤	} else {¤		throw Base::FatalError ("Îïåðàöèÿ ïðèìåíèìà òîëüêî ê àòðèáóòàì");¤	}¤¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4A3F53400188*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A3F54370124*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A3F54370124*¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤¤	RoseAbstractDumper* rad = const_cast<RoseAbstractDumper*> (dynamic_cast<const RoseAbstractDumper*> (self));¤	if (rad) {¤		IRoseItemPtr item = rad->rose_element ();¤		if (item) {			¤			std::string target_st = TemplatePainter::resolve_exp (params[0], painter);¤¤			const AbstractDumperBase::Template& tpl = rad->get_template ();¤			GCL::StrSet avilable_target_st (tpl.available_target_stereotypes.begin (), tpl.available_target_stereotypes.end ());¤¤			if (¤				avilable_target_st.find (target_st) == avilable_target_st.end ()¤			) {¤				throw Base::FatalError ("Óêàçàííûé target stereotype íå ðàçðåøåí øàáëîíîì");¤			}¤			¤			RoseHelper::set_target_stereotype (rad, target_st, false);¤		}¤	}¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4A3F54370124*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A3F55F501A5*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A3F55F501A5*¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤¤	RoseAbstractDumper* rad = const_cast<RoseAbstractDumper*> (dynamic_cast<const RoseAbstractDumper*> (self));¤	if (rad) {¤		IRoseItemPtr item = rad->rose_element ();¤		if (item) {			¤			std::string abstraction_type = TemplatePainter::resolve_exp (params[0], painter);¤¤			static const std::string sABSTRACT_TYPE = "abstract";¤			static const std::string sREGUALR_TYPE = "regular";¤			static const std::string sFINAL_TYPE = "final";¤			static const std::string sOPTIONAL_TYPE = "optional";¤¤			if (¤				abstraction_type != sABSTRACT_TYPE ¤				&& abstraction_type != sREGUALR_TYPE ¤				&& abstraction_type != sFINAL_TYPE¤				&& abstraction_type != sOPTIONAL_TYPE  ¤			) {¤				throw Base::FatalError (¤					"Íåâåðíûé àðãóìåíò ôóíêöèè, äîëæåí áûòü abstract|regular|final"¤				);¤			}¤			const AbstractDumperBase::Template& tpl = rad->get_template ();¤¤			if (¤				(¤					abstraction_type == sABSTRACT_TYPE && !(tpl.abstraction_type & AbstractDumperBase::ATF_ABSTRACT)¤				) || (¤					abstraction_type == sREGUALR_TYPE && !(tpl.abstraction_type & AbstractDumperBase::ATF_REGULAR)¤				) || (¤					abstraction_type == sFINAL_TYPE && !(tpl.abstraction_type & AbstractDumperBase::ATF_FINAL)¤				) || (¤					abstraction_type == sOPTIONAL_TYPE && !(tpl.abstraction_type & AbstractDumperBase::ATF_OPTIONAL)¤				)¤			) {¤				throw Base::FatalError ("Òèï àáñòðàêòíîñòè íå ðàçðåøåí øàáëîíîì");¤			}¤			¤			static std::string tool_name (_bstr_t (TOOL_NAME));¤			static std::string prop_name (Base::ABSTRACTION_TYPE);¤			¤			rad->set_temporary_property (tool_name, prop_name, abstraction_type);¤			¤			RoseInternal::RoseClass* virtual_cls = item.GetInterfacePtr () ¤				? dynamic_cast<RoseInternal::RoseClass*> (item.GetInterfacePtr ()) ¤				: 0;¤			if (virtual_cls) {¤				virtual_cls->set_is_abstract ((abstraction_type == sABSTRACT_TYPE));¤			}¤		}¤	}¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4A3F55F501A5*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A3F56DD0379*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A3F56DD0379*¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤	¤	RoseAbstractDumper* rad = const_cast<RoseAbstractDumper*> (dynamic_cast<const RoseAbstractDumper*> (self));¤	if (rad) {¤		std::string target = TemplatePainter::resolve_exp (params[0], painter);		¤¤		const AbstractDumperBase::Template& tpl = rad->get_template ();¤		if (!tpl.has_derived_impl) {¤			throw Base::FatalError ("Øàáëîí íå ïîçâîëÿåò èçìåíÿòü IMPLEMENT_SELECT_TYPE");¤		}¤		std::string select_type = TemplatePainter::resolve_exp (params[0], painter);¤¤		if (¤			select_type != Base::ALL ¤			&& select_type != Base::INCLUDE¤			&& select_type != Base::EXCLUDE¤		) {¤			throw Base::FatalError ("Íåâåðíûé àðãóìåíò ôóíêöèè, äîëæåí áûòü all|include|exclude");¤		}¤		¤		std::string tool_name (_bstr_t (TOOL_NAME));¤		std::string prop_name (_bstr_t (PROP_IMPLEMENT_SELECT_TYPE));¤¤		rad->set_temporary_property (tool_name, prop_name, select_type);¤	}¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4A3F56DD0379*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A3F5746003D*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A3F5746003D*¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤	¤	RoseAbstractDumper* rad = const_cast<RoseAbstractDumper*> (dynamic_cast<const RoseAbstractDumper*> (self));¤	if (rad) {¤		std::string target = TemplatePainter::resolve_exp (params[0], painter);		¤¤		const AbstractDumperBase::Template& tpl = rad->get_template ();¤		if (!tpl.has_derived_impl) {¤			throw Base::FatalError ("Øàáëîí íå ïîçâîëÿåò èçìåíÿòü IMPLEMENT_SELECT_TYPE");¤		}¤		std::string select_type = TemplatePainter::resolve_exp (params[0], painter);¤¤		if (¤			select_type != Base::ALL ¤			&& select_type != Base::INCLUDE¤			&& select_type != Base::EXCLUDE¤		) {¤			throw Base::FatalError ("Íåâåðíûé àðãóìåíò ôóíêöèè, äîëæåí áûòü all|include|exclude");¤		}¤		¤		std::string tool_name (_bstr_t (TOOL_NAME));¤		std::string prop_name (_bstr_t (PROP_OVERLOAD_SELECT_TYPE));¤¤		rad->set_temporary_property (tool_name, prop_name, select_type);¤	}¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4A3F5746003D*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A3F550B00BA*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A3F550B00BA*¤	if (params.size () < 1) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw Base::FatalError (mess);¤	}¤¤	RoseAbstractDumper* rad = const_cast<RoseAbstractDumper*> (dynamic_cast<const RoseAbstractDumper*> (self));¤	if (rad) {¤		std::string visibility_type = TemplatePainter::resolve_exp (params[0], painter);¤¤		static const std::string sPUBLIC_TYPE = "PublicAccess";¤		static const std::string sPROTECTED_TYPE = "ProtectedAccess";¤		static const std::string sPRIVATE_TYPE = "PrivateAccess";¤		static const std::string sIMPLEMENTATION_TYPE = "ImplementationAccess";¤¤		if (¤			visibility_type != sPUBLIC_TYPE ¤			&& visibility_type != sPROTECTED_TYPE ¤			&& visibility_type != sPRIVATE_TYPE ¤			&& visibility_type != sIMPLEMENTATION_TYPE ¤		) {¤			throw Base::FatalError (¤				"Íåâåðíûé àðãóìåíò ôóíêöèè, äîëæåí áûòü PublicAccess|ProtectedAccess|PrivateAccess|ImplementationAccess"¤			);¤		}¤		const AbstractDumperBase::Template& tpl = rad->get_template ();¤¤		if (¤			(¤				visibility_type == sPUBLIC_TYPE && !(tpl.visability_type & VTF_PUBLIC)¤			) || (¤				visibility_type == sPROTECTED_TYPE && !(tpl.visability_type & VTF_PROTECTED)¤			) || (¤				visibility_type == sPRIVATE_TYPE && !(tpl.visability_type & VTF_PRIVATE)¤			) || (¤				visibility_type == sIMPLEMENTATION_TYPE && !(tpl.visability_type & VTF_IMPL)¤			)¤		) {¤			throw Base::FatalError ("Òèï âèäèìîñòè íå ðàçðåøåí øàáëîíîì");¤		}¤		¤		RoseHelper::set_visibility_type (rad, visibility_type);¤	}¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4A3F550B00BA*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A4D97BE02C8*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A4D97BE02C8*¤	//#UC END# *4A2DFD7B0291_4A4D97BE02C8*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A4D9884038B*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A4D9884038B*¤	//#UC END# *4A2DFD7B0291_4A4D9884038B*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A51F81701C8*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A51F81701C8*¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤¤	RoseAbstractDumper* rad = const_cast<RoseAbstractDumper*> (dynamic_cast<const RoseAbstractDumper*> (self));¤	if (rad) {¤		std::string documentation = TemplatePainter::resolve_exp (params[0], painter);¤		rad->set_documentation (documentation);¤	}¤¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4A51F81701C8*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A9367B90020*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A9367B90020*¤	if (params.size () < 2) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	¤	std::string uid = TemplatePainter::resolve_exp(params[0], painter);¤	std::string var_id = TemplatePainter::resolve_exp(params[1], painter);¤	¤	const AbstractDumperBase* result = RoseAbstractDumper::find_in_tree (uid);¤	if (!result) {¤		//èùåì ïî èìåíè¤		size_t count = 0;¤¤		ObjectTreeResolver::ObjectTree::iterator it = ObjectTreeResolver::s_tree->begin ();¤		ObjectTreeResolver::ObjectTree::iterator end = ObjectTreeResolver::s_tree->end ();¤¤		size_t len = uid.length ();¤		for (; it != end; it++) {¤			const ObjectTreeResolver* otr = *(*it);¤			std::string name = otr->get_full_name ();¤			std::string::size_type pos = name.rfind (uid);¤			¤			//ïðîâåðÿåì, ÷òî ïîëíîå èìÿ ýëåìåíòà çàêàí÷èâàåòñÿ íà uid¤			if (pos != std::string::npos && (pos + len) == name.length ()) {¤				result = dynamic_cast<const AbstractDumperBase*> (otr);¤				++count;¤			}¤		}¤¤		if (count > 1) {¤			throw AbstractDumperBase::FatalError (¤				std::string ("Íàéäåíî áîëåå îäíîãî ýëåìåíòà ñ èìåíåì: ")¤				+ uid¤			);¤		}¤	}¤	¤	if (!result) {¤		throw AbstractDumperBase::FatalError (¤			std::string ("Íå óäàëîñü íàéòè ýëåìåíò: ")¤			+ uid¤		);¤	}¤¤	TemplatePainter::set_var_dumper (var_id, result);¤¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4A9367B90020*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A9388FA0110*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A9388FA0110*¤	if (params.size () < 4) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 4, params.size ());¤	}¤	const RoseAbstractDumper* rad = dynamic_cast<const RoseAbstractDumper*> (self);¤	if (rad) {¤		if (rad->get_model_class_str () != CATEGORY_TYPE) {¤			throw Base::FatalError ("Ïàïêó ìîæíî ñîçäàâàòü òîëüêî âíóòðè äðóãîé ïàïêè");¤		}¤¤		std::string guid_suffix = TemplatePainter::resolve_exp (params[0], painter);¤		std::string guid (this->make_uid (rad, "", guid_suffix));¤¤		std::string stereotype = TemplatePainter::resolve_exp (params[1], painter);¤		std::string name = TemplatePainter::resolve_exp (params[2], painter);		¤		std::string var_id = TemplatePainter::resolve_exp (params[3], painter);¤		¤		ATL::CComObject<RoseInternal::RoseCategoryImpl>* obj;¤		ATL::CComObject<RoseInternal::RoseCategoryImpl>::CreateInstance (&obj);¤		IRoseCategoryPtr cat = obj;¤¤		IRoseItemPtr item = rad->rose_element ();¤		if (item) {			¤			obj->set_unique_id (guid);¤			obj->set_stereotype (stereotype);¤			obj->set_name (name);			¤			obj->set_context (item);¤			¤			Core::Aptr<RoseAbstractDumpFactory> df = new RoseAbstractDumpFactory;¤			RoseAbstractDumper::set_dumper_factory (df.in());¤¤			RoseAbstractDumper* new_cat = df->create_by_stereotype (rad, cat);¤			cat = 0;¤			if (new_cat) {¤				painter->invalidate_dumpers_list (SX_3_CONTENTS, rad);¤				painter->invalidate_dumpers_list (SX_3_ALL_CONTENTS, rad);¤¤				RoseAbstractDumper::add_virtual_dumper (new_cat, painter->get_main_scope ());¤				new_cat->link_all_suppliers ();¤				TemplatePainter::set_var_dumper (var_id, new_cat);¤				rad->set_var_dumper (guid_suffix, new_cat);¤			} else {¤				throw Base::FatalError ("Creation virtual Category failed");¤			}¤		}¤	}¤¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4A9388FA0110*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A976D9002D6*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A976D9002D6*¤	RoseAbstractDumper* rad = const_cast<RoseAbstractDumper*> (dynamic_cast<const RoseAbstractDumper*> (self));¤	if (rad) {¤		IRoseItemPtr item = rad->rose_element ();¤		if (item) {¤			RoseInternal::RoseItem* virtual_obj = 0;¤			if (¤				(item.GetInterfacePtr ()) ¤				&& (virtual_obj = dynamic_cast<RoseInternal::RoseObject*> (item.GetInterfacePtr ()))¤			) {¤				return std::string ("true");	¤			}¤		}¤	}¤¤	return std::string ("false");¤	//#UC END# *4A2DFD7B0291_4A976D9002D6*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A97B24B008A*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A97B24B008A*¤	throw Core::Root::MDAGenNotImplemented(GDS_CURRENT_FUNCTION);¤	//#UC END# *4A2DFD7B0291_4A97B24B008A*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A97B3BC005B*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A97B3BC005B*¤	TemplatePainter::DelayedFunctionParams_box func_params (¤		new TemplatePainter::DelayedFunctionParams (self, params, painter)¤	);¤¤	AbstractDumper::UCModificationfunction_var func (¤		new AbstractDumper::UCModificationFunction (¤			boost::bind (¤				&UCModificationBase::uc_function_impl_base¤				, func_params¤				, this->get_uc_function_impl ()¤			)¤		)¤	);¤¤	AbstractDumper::add_uc_modification_function (func);¤¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4A97B3BC005B*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A9BB27E0085*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A9BB27E0085*¤	if (params.size () < 6) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 6, params.size ());¤	}¤	¤	const RoseAbstractDumper* rad = dynamic_cast<const RoseAbstractDumper*> (self);¤	if (rad) {¤		std::string uid = TemplatePainter::resolve_exp (params[0], painter);¤		uid = this->make_uid (rad, "", uid);¤¤		std::string parent_uid_or_name = TemplatePainter::resolve_exp (params[1], painter);¤		std::string stereotype = TemplatePainter::resolve_exp (params[2], painter);¤		std::string name = TemplatePainter::resolve_exp (params[3], painter);¤		std::string need_full_copy = TemplatePainter::resolve_exp (params[4], painter);¤		std::string var_id = TemplatePainter::resolve_exp (params[5], painter);¤		¤		const RoseAbstractDumper* parent = 0;¤		if (!parent_uid_or_name.empty ()) {¤			parent = RoseAbstractDumper::find_in_tree (parent_uid_or_name);¤¤			if (!parent) {¤				Core::Aptr<ObjectTreeResolver::OTRVector> elements = ObjectTreeResolver::find_by_name (parent_uid_or_name);¤¤				if (elements->size () > 1) {¤					throw Base::FatalError (¤						std::string ("Íàéäåíî áîëåå îäíîãî ýëåìåíòà ñ èìåíåì: ")¤						+ parent_uid_or_name¤					);¤				}¤				¤				if (!elements->empty ()) {¤					parent = dynamic_cast<const RoseAbstractDumper*>((*elements)[0]);¤				}¤			}			¤		} else {¤			throw Base::FatalError (¤				std::string ("Íå çàäàí èäåíòèôèêàòîð (èëè èìÿ) ðîäèòåëÿ äëÿ êîïèðóåìîãî ýëåìåíòà")¤			);¤		}¤¤		if (!parent) {¤			throw Base::FatalError (¤				std::string ("Íå óäàëîñü íàéòè ðîäèòåëÿ äëÿ êîïèè ýëåìåíòà: ")¤				+ (static_cast<const Base::NamedElement*> (rad))->get_full_name ()¤			);¤		}		¤		¤		RoseAbstractDumper* new_elem = this->copy_element (¤			rad, parent, uid, stereotype, name, need_full_copy == "true" ? true : false, painter->get_main_scope ()¤		);¤¤		if (new_elem) {¤			painter->invalidate_dumpers_list (SX_3_CONTENTS, parent);¤			painter->invalidate_dumpers_list (SX_3_ALL_CONTENTS, parent);¤¤			TemplatePainter::set_var_dumper (var_id, new_elem);¤		}¤	}	¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4A9BB27E0085*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4A9F83470132*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4A9F83470132*¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤	¤	const RoseAbstractDumper* source = dynamic_cast<const RoseAbstractDumper*> (self);¤	if (source) {¤		std::string target_uid_or_name = TemplatePainter::resolve_exp (params[0], painter);¤¤		const RoseAbstractDumper* target = RoseAbstractDumper::find_in_tree (target_uid_or_name);¤¤		if (!target) {¤			Core::Aptr<ObjectTreeResolver::OTRVector> results = RoseAbstractDumper::find_by_name (target_uid_or_name);¤			if (results->size () > 1) {¤				throw Base::FatalError (¤					std::string ("Íàéäåíî áîëåå îäíîãî ýëåìåíòà ñ èìåíåì: ") ¤					+ target_uid_or_name¤				);¤			} else if (!results->empty ()) {¤				target = dynamic_cast<const RoseAbstractDumper*> ((*results)[0]);¤			}¤		}¤		¤		if (!target) {¤			throw Base::FatalError (¤				std::string ("Íå óäàëîñü íàéòè ýëåìåíò: ") ¤				+ target_uid_or_name¤			);¤		}¤¤		const AbstractDumperBase::Template& source_tpl = source->get_template ();¤		const AbstractDumperBase::Template& target_tpl = target->get_template ();¤		¤		if (¤			source_tpl.user_properties_group.is_nil () == false¤			&& target_tpl.user_properties_group.is_nil () == false¤		) {¤			const AbstractDumperBase::UserPropertyMap& source_props = source_tpl.user_properties_group->get_properties ();¤			const AbstractDumperBase::UserPropertyMap& target_props = target_tpl.user_properties_group->get_properties ();¤			¤			AbstractDumperBase::UserPropertyMap::const_iterator src_it = source_props.begin ();¤			AbstractDumperBase::UserPropertyMap::const_iterator src_it_end = source_props.end ();¤¤			IRoseElementPtr target_item = target->rose_element ();¤			RoseInternal::RoseElement* virtual_obj = target_item.GetInterfacePtr ()¤				? dynamic_cast<RoseInternal::RoseElement*> (target_item.GetInterfacePtr ())¤				: 0;¤¤			_bstr_t uc_tool_name (Base::USER_PROPERTY_TOOL);¤			for (; src_it != src_it_end; ++src_it) {¤				if (target_props.find (src_it->first) != target_props.end ()) {¤					//â öåëåâîì ýëåìåíòå åñòü ýòî ñâîéñòâî¤					std::string source_up = source->get_user_property_str (src_it->first);¤					if (virtual_obj) {¤						//åñëè ýëåìåíò âèðòóàëüíûé, òî íè÷åãî ëî÷èòü íå íàäî - ïðîñòî ïèøåì â ñâîéñòâà¤						virtual_obj->override_property (¤							std::string (uc_tool_name)¤							, src_it->first¤							, source_up¤						);¤					} else {¤						target->set_temporary_property (std::string (uc_tool_name), src_it->first, source_up);						¤					}					¤				}¤			}¤		}¤	}¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4A9F83470132*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4AC34CF20255*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4AC34CF20255*¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤¤	RoseAbstractDumper* rad = const_cast<RoseAbstractDumper*> (dynamic_cast<const RoseAbstractDumper*> (self));¤	if (rad) {¤		IRoseElementPtr item = rad->rose_element ();¤		if (item) {¤			if (IsVirtualFactory::get ().execute (item)) {¤				if (item->IsClass (ROSE_ITEM_TYPE)) {¤					std::string stereotype = TemplatePainter::resolve_exp (params[0], painter);¤¤					((IRoseItemPtr)item)->Stereotype = stereotype.c_str ();¤					rad->reset_model_stereotype ();¤¤					Core::Aptr<RoseAbstractDumpFactory> df = new RoseAbstractDumpFactory ();¤					if (!df->check_stereotype (item)) {¤						throw Base::FatalError (¤							std::string ("Èñïîëüçóåòñÿ íåèçâåñòíûé ñòåðåîòèï: <<")¤							+ stereotype¤							+ std::string (">>")¤						);¤					}¤¤					if (!rad->check_stereotype_use ()) {¤						throw Base::FatalError (¤							std::string ("Íåëüçÿ èñïîëüçîâàòü ñòåðåîòèï: <<")¤							+ stereotype¤							+ std::string (">>, ò.ê ýòî çàïðåùåíî ïðàâèëàìè ðîäèòåëüñêîãî ýëåìåíòà")¤						);¤					}¤				} else {¤					throw Base::FatalError (¤						std::string ("Äàííûé òèï ýëåìåíòîâ íå ïîääåðæèâàåò óñòàíîâêó ñòåðåîòèïà: ")¤						+ std::string (static_cast<const char*> (item->IdentifyClass ()))¤					);¤				}¤			} else {¤				throw Base::FatalError ("Ôóíêöèÿ ïðèìåíèìà òîëüêî äëÿ âèðòóàëüíûõ àòðèáóòîâ");¤			}¤		}¤	}¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4AC34CF20255*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ResolvedTypeGuid"
			    value      	"452257A0036F")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4AE6E99C03B2*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4AE6E99C03B2*¤	RoseAbstractDumper* rad = const_cast<RoseAbstractDumper*> (dynamic_cast<const RoseAbstractDumper*> (self));¤	if (rad) {¤		IRoseElementPtr item = rad->rose_element ();¤		if (item) {¤			std::string new_type_guid;¤			if (params.size () > 0) {¤				new_type_guid = TemplatePainter::resolve_exp (params[0], painter);¤			}¤			¤			const RoseAbstractDumper* target_rad = RoseAbstractDumper::find_in_tree (new_type_guid);¤			if (!target_rad) {¤				target_rad = rad->resolve (new_type_guid);¤			}¤¤			if (!target_rad) {¤				throw Base::FatalError (¤					std::string("Íå ìîãó íàéòè ñâÿçàííûé òèï \"") ¤					+ new_type_guid¤					+ std::string ("\" â îáëàñòè âèäèìîñòè")¤				);¤			}¤¤			AbstractDumperBase* old_target = rad->get_target ();¤			AbstractDumper* old_target_ad = old_target != 0 ? dynamic_cast<AbstractDumper*> (old_target) : 0;¤			¤			ObjectTreeResolver::SupplierType type = ObjectTreeResolver::ST_NOT_NAVIGABLE;¤			std::string link_type = rad->get_link_type_str ();¤			if (link_type == "agr" || link_type == "ref") {¤				type = ObjectTreeResolver::ST_NAVIGABLE;¤			}¤¤			if (old_target_ad) {¤				rad->remove_supplier (old_target_ad, type, ST_TARGET);¤¤				if (!IsVirtualFactory::get ().execute (rad->rose_element ())) {¤					//ÄËß ÍÅÂÈÐÒÓÀËÜÍÛÕ ÝËÅÌÅÍÒÎÂ ÍÓÆÍÎ ÏÅÐÅÄ ÍÀ×ÀËÎÌ ¤					//ÑËÅÄÓÞÙÅÃÎ ÇÀÏÓÑÊÀ SPELL'à ÂÎÑÑÒÀÍÀÂËÈÂÀÒÜ ÝÒÓ ÑÂßÇÜ!!!!¤¤					bool has_rel_for_restore = false;¤					const AbstractDumper::RelationsSet& rels = AbstractDumper::get_relations_for_restore();¤					for (¤						AbstractDumper::RelationsSet::const_iterator it = rels.begin ()¤						; it != rels.end () && !has_rel_for_restore¤						; ++it¤					) {¤						if (it->source == rad && it->stereotype == ST_TARGET) {¤							has_rel_for_restore = true;¤						}¤					}¤					¤					if (!has_rel_for_restore) {¤						//åñëè åùå íå áûëî èíôîðìàöèè äëÿ âîññòàíîâëåíèÿ ñâÿçè äëÿ òàðãåòà - äîáàâëÿåì¤						//ïðîâåðêà íóæíî, äëÿ ñëó÷àÿ, êîãäà íåñêîëüêî ðàç ïîçâàëè set_target - ¤						//â ýòîì ñëó÷àå íóæíî äîáàâèòü òîëüêî îäíó ñâÿçü äëÿ âîññòàíîâëåíèÿ¤						AbstractDumper::add_relation_for_restore (¤							rad¤							, old_target_ad¤							, type¤							, ST_TARGET¤						);¤					}¤				}¤			}¤¤			rad->add_supplier (¤				target_rad¤				, type¤				, ST_TARGET¤			);¤¤			AbstractDumper::add_virtual_relation (¤				rad¤				, target_rad¤				, type¤				, ST_TARGET¤			);¤		}¤	}¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4AE6E99C03B2*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4AEEAAE90100*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4AEEAAE90100*¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤	¤	RoseAbstractDumper* source = const_cast<RoseAbstractDumper*> (dynamic_cast<const RoseAbstractDumper*> (self));¤	IRoseClassPtr cls = source->rose_element ();¤	if (source && cls) {¤		std::string uid = TemplatePainter::resolve_exp(params[0], painter);¤		RoseAbstractDumper* target = RoseAbstractDumper::find_in_tree (uid);¤		if (target) {¤			//òóò íàìåðåííî èñïîëüçóåì ìîäåëü, à íå äåðåâî ãåíåðàöèè, ò.ê¤			//âèðòóàëüíûå ñâÿçè íàñëåäîâàíèÿ è ðåàëèçàöèè âñå ðàâíî äîëæíû áûëè áûòü äîáàâëåíû¤			//â ìîäåëü äëÿ êîððåêòíîé ðàáîòû¤			IRoseRealizeRelationCollectionPtr realizations = cls->GetRealizeRelations ();¤			short realizations_count = realizations->Count;¤¤			IRoseRealizeRelationPtr founded_rel;¤			for (short i = 0; i < realizations_count; ++i) {¤				IRoseRealizeRelationPtr rel = realizations->GetAt (i);¤				¤				IRoseItemPtr supplier = rel->GetSupplier ();¤				std::string supplier_guid (get_rose_element_uid(supplier));¤				if (supplier_guid == uid) {¤					founded_rel = rel;¤					break;¤				}¤			}¤			¤			if (founded_rel) {¤				if (IsVirtualFactory::get ().execute (cls)) {¤					cls->DeleteRealizeRel (founded_rel);¤				}¤¤				source->remove_supplier (target, ObjectTreeResolver::ST_NAVIGABLE, ST_LINK_REL);¤				painter->invalidate_dumpers_list (SX_3_REALIZATION, source);¤				painter->invalidate_dumpers_list (SX_3_REQURSIVE_REALIZATION, source);¤				painter->invalidate_dumpers_list (SX_3_DERIVED_OVER, source);¤				painter->invalidate_dumpers_list (SX_3_DERIVED_IMPL, source);¤				painter->invalidate_dumpers_list (SX_3_NOT_IMPLEMENTED_DERIVED_ABSTRACT, source);¤			} else {¤				throw Base::FatalError (¤					"Íå óäàëîñü íàéòè ñâÿçü íàñëåäîâàíèÿ ìåæäó ýëåìåíòîì \""¤					+ (static_cast<const Base::NamedElement*> (source))->get_full_name ()¤					+ "\" è \""¤					+ (static_cast<const Base::NamedElement*> (target))->get_full_name ()¤				);¤			}			¤		} else {¤			throw Base::FatalError ("Íå óäàëîñü íàéòè ýëåìåíò ñ èäåíòèôèêàòîðîì: " + uid);¤		}¤	}¤¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4AEEAAE90100*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4AEEAA540271*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4AEEAA540271*¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤	¤	RoseAbstractDumper* source = const_cast<RoseAbstractDumper*> (dynamic_cast<const RoseAbstractDumper*> (self));¤	IRoseClassPtr cls = source->rose_element ();¤	if (source && cls) {¤		std::string uid = TemplatePainter::resolve_exp(params[0], painter);¤		RoseAbstractDumper* target = RoseAbstractDumper::find_in_tree (uid);¤		if (target) {¤			//òóò íàìåðåííî èñïîëüçóåì ìîäåëü, à íå äåðåâî ãåíåðàöèè, ò.ê¤			//âèðòóàëüíûå ñâÿçè íàñëåäîâàíèÿ è ðåàëèçàöèè âñå ðàâíî äîëæíû áûëè áûòü äîáàâëåíû¤			//â ìîäåëü äëÿ êîððåêòíîé ðàáîòû¤			IRoseInheritRelationCollectionPtr generalizations = cls->GetInheritRelations ();¤			short generalizations_count = generalizations->Count;¤¤			IRoseInheritRelationPtr founded_rel;¤			for (short i = 0; i < generalizations_count; ++i) {¤				IRoseInheritRelationPtr rel = generalizations->GetAt (i);¤				¤				IRoseItemPtr supplier = rel->GetSupplier ();¤				std::string supplier_guid (get_rose_element_uid(supplier));¤				if (supplier_guid == uid) {¤					founded_rel = rel;¤					break;¤				}¤			}¤			¤			if (founded_rel) {¤				if (IsVirtualFactory::get ().execute (cls)) {¤					cls->DeleteInheritRel (founded_rel);¤				}¤				¤				source->remove_supplier (target, ObjectTreeResolver::ST_NAVIGABLE, ST_LINK_INH);¤¤				painter->invalidate_dumpers_list (SX_3_GENERALIZATION, source);¤				painter->invalidate_dumpers_list (SX_3_REQURSIVE_GENERALIZATION, source);¤				painter->invalidate_dumpers_list (SX_3_DERIVED_OVER, source);¤				painter->invalidate_dumpers_list (SX_3_DERIVED_IMPL, source);¤				painter->invalidate_dumpers_list (SX_3_NOT_IMPLEMENTED_DERIVED_ABSTRACT, source);¤			} else {¤				throw Base::FatalError (¤					"Íå óäàëîñü íàéòè ñâÿçü íàñëåäîâàíèÿ ìåæäó ýëåìåíòîì \""¤					+ (static_cast<const Base::NamedElement*> (source))->get_full_name ()¤					+ "\" è \""¤					+ (static_cast<const Base::NamedElement*> (target))->get_full_name ()¤				);¤			}			¤		} else {¤			throw Base::FatalError ("Íå óäàëîñü íàéòè ýëåìåíò ñ èäåíòèôèêàòîðîì: " + uid);¤		}¤	}¤¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4AEEAA540271*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4AEEA95E027A*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4AEEA95E027A*¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤	¤	const RoseAbstractDumper* parent = dynamic_cast<const RoseAbstractDumper*> (self);¤	if (parent) {¤		std::string uid = TemplatePainter::resolve_exp(params[0], painter);¤		RoseAbstractDumper* child = RoseAbstractDumper::find_in_tree (uid);¤		if (child) {¤			if (IsVirtualFactory::get ().execute (child->rose_element ())) {¤				if (child->is_child_of (parent)) {¤					AbstractDumper::delete_virtual_dumper (child);¤					painter->invalidate_dumpers_list (SX_3_CONTENTS, parent);¤					painter->invalidate_dumpers_list (SX_3_ALL_CONTENTS, parent);¤				} else {¤					throw Base::FatalError (¤						"Ýëåìåíò \""¤						+ (static_cast<const Base::NamedElement*> (child))->get_full_name ()¤						+ "\" íå ÿâëÿåòñÿ ðåáåíêîì \""¤						+ (static_cast<const Base::NamedElement*> (parent))->get_full_name ()¤					);¤				}¤			} else {¤				throw Base::FatalError ("Ôóíêöèÿ ïðèìåíèìà òîëüêî ê âèðòóàëüíûì ýëåìåíòàì");¤			}¤		} else {¤			throw Base::FatalError ("Íå óäàëîñü íàéòè ýëåìåíò ñ èäåíòèôèêàòîðîì: " + uid);¤		}¤	}¤¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4AEEA95E027A*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4B18EEF601AF*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4B18EEF601AF*¤	const RoseAbstractDumper* rad = dynamic_cast<const RoseAbstractDumper*> (self);¤¤	return ::IsVirtualFactory::get ().execute (rad->rose_element ()) ? std::string ("true") : std::string ("false");¤	//#UC END# *4A2DFD7B0291_4B18EEF601AF*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4B1E314C0373*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4B1E314C0373*	¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤¤	std::string uid = TemplatePainter::resolve_exp(params[0], painter);¤¤	EmptyDumper empty (uid);¤	ObjectTreeResolver::ObjectTree::Item_ptr it =  ObjectTreeResolver::s_tree->find (&empty);¤	const AbstractDumper* target = it ? dynamic_cast<const AbstractDumper*> (*it) : 0;¤¤	if (!target) {¤		throw Base::FatalError (std::string ("Íå óäàëîñü íàéòè ýëåìåíò: ") + uid);¤	}¤¤	const AbstractDumper* self_ad = dynamic_cast<const AbstractDumper*> (self);¤	if (!self_ad->check_access (target)) {¤¤		self_ad->set_dependencies (¤			target¤			, boost::lambda::bind (¤				&AddDependencyLocal::create_dep_for_others¤				, &AddDependencyLocalFactory::get ()¤				, boost::lambda::ll_dynamic_cast<const AbstractDumper*> (boost::lambda::_1)¤				, boost::lambda::ll_dynamic_cast<const AbstractDumper*> (boost::lambda::_2)¤			)¤		);¤¤		if (!self_ad->check_access (target)) {¤			throw Base::FatalError (¤				std::string ("Îøèáêà â ïðîñòàíîâêå çàâèñèìîñòè ìåæäó \"")¤				+ self_ad->get_full_name ()¤				+ std::string ("\" è \"")¤				+ target->get_full_name ()¤				+ std::string ("\"")¤			);¤		}¤	}¤¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4B1E314C0373*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4B2219A90037*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4B2219A90037*¤	if (params.size () < 2) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 2, params.size ());¤	}¤¤	std::string var_id = TemplatePainter::resolve_exp(params[0], painter);¤	std::string param (params[1]);¤	if (GCL::border_with (param.data(), "\"")) {¤		param = TemplatePainter::resolve_exp (param, painter);¤		std::string text (param.begin () + 1, param.end () - 1);¤		AbstractDumperBase_var arg = new TemplatePainter::TextDumper (text.data());¤		self->set_var_dumper (var_id, arg.ptr ());¤	} else {¤		std::string::const_iterator it = param.begin();¤		¤		const AbstractDumperBase* dumper = painter->get_dumper_by_template(it, param.end ());¤¤		////íóæíî ïðîâåðèòü, åñëè ýòî òåêñòîâûé äàìïåð - íóæíî óâåëè÷èòü íà íåì ñ÷åò÷èê ññûëîê,¤		////èíà÷å îí ìîæåò ïðîòóõíóòü¤		//const TemplatePainter::TextDumper* text_dumper = dynamic_cast<const TemplatePainter::TextDumper*> (dumper);¤		//if (text_dumper) {¤		//	text_dumper->addref ();¤		//	TemplatePainter::dumpers_heap ().push_back (const_cast<TemplatePainter::TextDumper*> (text_dumper));¤		//}¤¤		self->set_var_dumper (var_id, dumper);¤	}¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4B2219A90037*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4B4DEA4A01F2*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4B4DEA4A01F2*¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤¤	RoseAbstractCategoryDumper* rad = const_cast<RoseAbstractCategoryDumper*> (dynamic_cast<const RoseAbstractCategoryDumper*> (self));¤	if (rad) {¤		std::string value = TemplatePainter::resolve_exp (params[0], painter);¤					¤		bool bool_value;¤		if (value == "true") {¤			bool_value = true;¤		} else if (value == "false") {¤			bool_value = false;¤		} else {¤			throw Base::FatalError ("ïàðàìåòð ôóíêöèè äîëæåí áûòü true èëè false");¤		}¤¤		rad->set_is_global_locally (bool_value);¤	} else {¤		throw Base::FatalError ("ôóíöèÿ ïðèìåíèìà òîëüêî ê ïàêåòàì");¤	}¤¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4B4DEA4A01F2*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4B602CAE00F9*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4B602CAE00F9*¤	if (params.size () < 1) {¤		std::string mess (GDS_CURRENT_FUNCTION);¤		mess += " - wrong parametr count (1 expected)";¤		throw AbstractDumperBase::FatalError (mess);¤	}¤	std::string var_id = TemplatePainter::resolve_exp(params[0], painter);¤¤	std::string::const_iterator it = var_id.begin();¤	const AbstractDumperBase* adb = painter.get_dumper_by_template(it, var_id.end ());¤	¤	const TemplatePainter::ContainerDumper* arg = adb ? dynamic_cast<const TemplatePainter::ContainerDumper*> (adb): 0;¤	TemplatePainter::ContainerDumper* self_cont = dynamic_cast<TemplatePainter::ContainerDumper*> (¤		const_cast<AbstractDumperBase*> (self)¤	);¤	if (!self_cont) {¤		throw AbstractDumperBase::FatalError (std::string ("Îïåðàöèÿ ïðèìåíèìà òîëüêî ê êîíòýéíåðàì"));¤	}¤¤	if (arg) {¤		self_cont->substract (arg);¤	}¤¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4B602CAE00F9*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4B74E00202EF*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4B74E00202EF*¤	if (params.size () < 1) {¤		throw TemplateFunctions::BadParams (GDS_CURRENT_FUNCTION, 1, params.size ());¤	}¤¤	std::string var_id (TemplatePainter::resolve_exp(params[0], painter));¤	const AbstractDumperBase* var = self->get_var_dumper (var_id);¤	TemplatePainter::ContainerDumper* container = dynamic_cast<TemplatePainter::ContainerDumper*> (¤		const_cast<AbstractDumperBase*> (var)¤	);¤¤	if (!container) {¤		TemplatePainter::ContainerDumper_var newContainer = new TemplatePainter::ContainerDumper (var_id);¤		container = newContainer.ptr ();¤¤		self->set_var_dumper (var_id, container); //óâåëè÷èâàåò ñ÷åò÷èê ññûëîê íà container¤	} else {¤		container->clear ();¤	}¤	¤	return std::string ();¤	//#UC END# *4A2DFD7B0291_4B74E00202EF*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4A2DFD7B0291_4B753AC2007E*"
			    value      	(value Text 
|//#UC START# *4A2DFD7B0291_4B753AC2007E*¤	TemplatePainter::ContainerDumper* container = dynamic_cast<TemplatePainter::ContainerDumper*> (const_cast<AbstractDumperBase*> (self));¤	if (!container) {¤		throw Base::FatalError ("ôóíêöèÿ ïðèìåíèìà òîëüêî ê ïåðåìåííûì òèïà ""ñïèñîê""");¤	}¤¤	return this->execute_impl2 (container, params, painter);¤	//#UC END# *4A2DFD7B0291_4B753AC2007E*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"GetRaises"
			    value      	"4BE0F2D30271")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ElementCreationOrder"
			    value      	"19070337511"))
		    quid       	"4A2DFD7B0291"
		    documentation 	"Ñîáñòâåííî ðåàëèçàöèè âñòðîåííîé ôóíêöèè. Êàæäûé êîíêðåòíûé ñåðâàíò ðåàëèçóåò ýòî ìåòîä"
		    parameters 	(list Parameters
			(object Parameter "self"
			    attributes 	(list Attribute_Set
				(object Attribute
				    tool       	"MDA Generator"
				    name       	"ResolvedTypeGuid"
				    value      	"4571A2EF02CE")
				(object Attribute
				    tool       	"MDA Generator"
				    name       	"ElementCreationOrder"
				    value      	"19013851584"))
			    quid       	"4A2DFDA0019C"
			    type       	"AbstractDumperBase"
			    quidu      	"4571A2EF02CE")
			(object Parameter "params"
			    attributes 	(list Attribute_Set
				(object Attribute
				    tool       	"MDA Generator"
				    name       	"ResolvedTypeGuid"
				    value      	"494F2FE400B1")
				(object Attribute
				    tool       	"MDA Generator"
				    name       	"ElementCreationOrder"
				    value      	"19013851960"))
			    quid       	"4A2DFDA001C2"
			    type       	"FunctionParams"
			    quidu      	"494F2FE400B1")
			(object Parameter "inout painter"
			    attributes 	(list Attribute_Set
				(object Attribute
				    tool       	"MDA Generator"
				    name       	"ResolvedTypeGuid"
				    value      	"477606D700B4")
				(object Attribute
				    tool       	"MDA Generator"
				    name       	"ElementCreationOrder"
				    value      	"19013852322"))
			    quid       	"4A2DFDA001E8"
			    type       	"TemplatePainter"
			    quidu      	"477606D700B4"))
		    result     	"a-string"
		    concurrency 	"Sequential"
		    opExportControl 	"Public"
		    uid        	0
		    quidu      	"452257A0036F")
		(object Operation "pre_execute"
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"AbstarctOperation"
			    value      	"regular")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"IsNative"
			    value      	"false")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4AF7C219001D*"
			    value      	(value Text 
|//#UC START# *4AF7C219001D*¤	//#UC END# *4AF7C219001D*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4AF7C219001D_4AF7C2750184*"
			    value      	(value Text 
|//#UC START# *4AF7C219001D_4AF7C2750184*¤	//#UC END# *4AF7C219001D_4AF7C2750184*
			    ))
			(object Attribute
			    tool       	"MDA Generator User Properties"
			    name       	"calling conventions"
			    value      	"none")
			(object Attribute
			    tool       	"MDA Generator User Properties"
			    name       	"debug log"
			    value      	"false")
			(object Attribute
			    tool       	"MDA Generator User Properties"
			    name       	"finished"
			    value      	"true")
			(object Attribute
			    tool       	"MDA Generator User Properties"
			    name       	"force overload"
			    value      	"false")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ElementCreationOrder"
			    value      	"19066987529"))
		    quid       	"4AF7C219001D"
		    documentation 	"ìåòîä âûçûâàåìûé ïåðåä âûçîâîì ðåàëèçàöèè ôóíêöèè"
		    concurrency 	"Sequential"
		    opExportControl 	"Private"
		    uid        	0)
		(object Operation "post_execute"
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"AbstarctOperation"
			    value      	"regular")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"IsNative"
			    value      	"false")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4AF7C25002E4*"
			    value      	(value Text 
|//#UC START# *4AF7C25002E4*¤	//#UC END# *4AF7C25002E4*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4AF7C25002E4_4AF7C2750184*"
			    value      	(value Text 
|//#UC START# *4AF7C25002E4_4AF7C2750184*¤	//#UC END# *4AF7C25002E4_4AF7C2750184*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ElementCreationOrder"
			    value      	"19066987078"))
		    quid       	"4AF7C25002E4"
		    documentation 	"ìåòîä âûçûâàåìûé ïîñëå âûçîâû ðåàëèçàöèè ôóíêöèè"
		    concurrency 	"Sequential"
		    opExportControl 	"Private"
		    uid        	0))
	    language   	"MDA Generator"
	    abstract   	TRUE)
	(object Class "ListOperationBase"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"AbstarctOperation"
		    value      	"regular")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsNative"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ImplementSelectType"
		    value      	"include")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"OverloadSelectType"
		    value      	"include")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (cpp)"
		    value      	"w:/MDProcess/MDAModel/impl/BaseFunctionImpl/ListOperationBase.cpp")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (cpp)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (h)"
		    value      	"w:/MDProcess/MDAModel/impl/BaseFunctionImpl/ListOperationBase.h")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (h)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*4B581BCD0399_DESTR_BODY*"
		    value      	(value Text 
|//#UC START# *4B581BCD0399_DESTR_BODY*¤	//#UC END# *4B581BCD0399_DESTR_BODY*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"WikiPageID (wiki)"
		    value      	(value Text 
|MDProcess,key:MDP,guid:456C0DD70110/Home/Ìîäåëü ïðîåêòà "MDProcess"/MDAModel/BaseFunctionImpl/ListOperationBase|4B581BCD0399
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (wiki)"
		    value      	"wiki")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ElementCreationOrder"
		    value      	"19030234931"))
	    quid       	"4B581BCD0399"
	    documentation 	"áàçîâûé êëàññ äëÿ ðàáîòû ñ ïåðåìåííûìè - òèïà ñïèñîê"
	    stereotype 	"SimpleClass"
	    operations 	(list Operations
		(object Operation "get_container"
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"AbstarctOperation"
			    value      	"regular")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"TargetStereotype"
			    value      	"")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"IsNative"
			    value      	"false")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ResolvedTypeGuid"
			    value      	"4B57F92B0325")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4B581C00003B*"
			    value      	(value Text 
|//#UC START# *4B581C00003B*¤	const AbstractDumperBase* var = TemplatePainter::get_var_dumper (id);¤	TemplatePainter::ContainerDumper* container = dynamic_cast<TemplatePainter::ContainerDumper*> (¤		const_cast<AbstractDumperBase*> (var)¤	);¤¤	if (!container) {¤		TemplatePainter::ContainerDumper_var newContainer = new TemplatePainter::ContainerDumper (id);¤		container = newContainer.ptr ();¤¤		TemplatePainter::set_var_dumper (id, container); //óâåëè÷èâàåì ñ÷åò÷èê ññûëîê íà container¤	}¤¤	return container;¤	//#UC END# *4B581C00003B*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ElementCreationOrder"
			    value      	"19013854317"))
		    quid       	"4B581C00003B"
		    documentation 	"âîçâðàùàåò êîíòýéíåð (ÁÅÇ ÓÂÅËÈ×ÅÍÈß Ñ×ÅÒ×ÈÊÀ ÑÑÛËÎÊ) ïî åãî èäåíòèôèêàòîðó, åñëè ðàíåå êîíòýéíåð íå áûë ñîçäàí - ñîçäàåò åãî"
		    parameters 	(list Parameters
			(object Parameter "id"
			    attributes 	(list Attribute_Set
				(object Attribute
				    tool       	"MDA Generator"
				    name       	"ResolvedTypeGuid"
				    value      	"452257A0036F")
				(object Attribute
				    tool       	"MDA Generator"
				    name       	"ElementCreationOrder"
				    value      	"19013854625"))
			    quid       	"4B75101C0071"
			    type       	"a-string"
			    quidu      	"452257A0036F"))
		    result     	"ContainerDumper"
		    concurrency 	"Sequential"
		    opExportControl 	"Protected"
		    uid        	0
		    quidu      	"4B57F92B0325")
		(object Operation "get_container_if_exists"
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"AbstarctOperation"
			    value      	"regular")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"IsNative"
			    value      	"false")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ResolvedTypeGuid"
			    value      	"4B57F92B0325")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*4B59A5C0021A*"
			    value      	(value Text 
|//#UC START# *4B59A5C0021A*¤	const AbstractDumperBase* var = TemplatePainter::get_var_dumper (id);¤	TemplatePainter::ContainerDumper* container = dynamic_cast<TemplatePainter::ContainerDumper*> (¤		const_cast<AbstractDumperBase*> (var)¤	);¤¤	return container;¤	//#UC END# *4B59A5C0021A*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ElementCreationOrder"
			    value      	"19013855153"))
		    quid       	"4B59A5C0021A"
		    documentation 	"âîçâðàùàåò êîíòýéíåð ñ çàäàííûì id (åñëè òàêîãî êîíòýéíåðà íåò - âîçâðàùàåò 0)"
		    parameters 	(list Parameters
			(object Parameter "id"
			    attributes 	(list Attribute_Set
				(object Attribute
				    tool       	"MDA Generator"
				    name       	"ResolvedTypeGuid"
				    value      	"452257A0036F")
				(object Attribute
				    tool       	"MDA Generator"
				    name       	"ElementCreationOrder"
				    value      	"19013855458"))
			    quid       	"4B75101F006C"
			    type       	"a-string"
			    quidu      	"452257A0036F"))
		    result     	"ContainerDumper"
		    concurrency 	"Sequential"
		    opExportControl 	"Protected"
		    uid        	0
		    quidu      	"4B57F92B0325"))
	    language   	"MDA Generator"))
    logical_presentations 	(list unit_reference_list
	(object ClassDiagram "Main"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsChanged"
		    value      	""))
	    quid       	"4A2CE1510296"
	    title      	"Main"
	    zoom       	100
	    max_height 	28350
	    max_width  	21600
	    origin_x   	1431
	    origin_y   	234
	    items      	(list diagram_item_list
		(object ClassView "Class" "Logical View::MDProcess::MDAModel::TemplateFunctions::InternalFunction" @1
		    ShowCompartmentStereotypes 	TRUE
		    SuppressAttribute 	TRUE
		    SuppressOperation 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    location   	(1113, 339)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	16714250
			default_color 	FALSE)
		    label      	(object ItemLabel
			Parent_View 	@1
			location   	(923, 311)
			nlines     	1
			max_width  	380
			justify    	0
			label      	"InternalFunction")
		    stereotype 	(object ItemLabel
			Parent_View 	@1
			location   	(923, 261)
			anchor     	10
			nlines     	1
			max_width  	380
			justify    	0
			label      	"<<Interface>>")
		    icon       	"Interface"
		    icon_style 	"Label"
		    line_color 	16714250
		    fill_color 	16777215
		    quidu      	"4A2CBBEB0257"
		    width      	398
		    height     	180
		    annotation 	8
		    autoResize 	TRUE)
		(object ClassView "Class" "Logical View::MDProcess::MDAModel::BaseFunctionImpl::InternalFunctionBase" @2
		    ShowCompartmentStereotypes 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    location   	(1113, 804)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	TRUE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@2
			location   	(345, 745)
			fill_color 	13434879
			nlines     	1
			max_width  	1536
			justify    	0
			label      	" InternalFunctionBase")
		    stereotype 	(object ItemLabel
			Parent_View 	@2
			location   	(345, 695)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	1536
			justify    	0
			label      	"<<Servant>>")
		    icon_style 	"Label"
		    fill_color 	12842435
		    quidu      	"4A2CE15C003D"
		    width      	1554
		    height     	242
		    annotation 	8
		    autoResize 	TRUE)
		(object RealizeView "" @3
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    stereotype 	TRUE
		    line_color 	3947680
		    quidu      	"4A2CE1780323"
		    client     	@2
		    supplier   	@1
		    vertices   	(list Points
			(1113, 682)
			(1113, 429))
		    line_style 	0)
		(object ClassView "Class" "Logical View::MDProcess::MDAModel::TemplateFunctions::InternalStereotypeFunction" @4
		    ShowCompartmentStereotypes 	TRUE
		    SuppressAttribute 	TRUE
		    SuppressOperation 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    location   	(1095, 1146)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	16714250
			default_color 	FALSE)
		    label      	(object ItemLabel
			Parent_View 	@4
			location   	(838, 1118)
			nlines     	1
			max_width  	514
			justify    	0
			label      	"InternalStereotypeFunction")
		    stereotype 	(object ItemLabel
			Parent_View 	@4
			location   	(838, 1068)
			anchor     	10
			nlines     	1
			max_width  	514
			justify    	0
			label      	"<<Interface>>")
		    icon       	"Interface"
		    icon_style 	"Label"
		    line_color 	16714250
		    fill_color 	16777215
		    quidu      	"4A2CBBFC0343"
		    width      	532
		    height     	180
		    annotation 	8
		    autoResize 	TRUE)
		(object ClassView "Class" "Logical View::MDProcess::MDAModel::BaseFunctionImpl::InternalStereotypeFunctionBase" @5
		    ShowCompartmentStereotypes 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    location   	(1098, 1530)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	TRUE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@5
			location   	(73, 1421)
			fill_color 	13434879
			nlines     	1
			max_width  	2050
			justify    	0
			label      	" InternalStereotypeFunctionBase")
		    stereotype 	(object ItemLabel
			Parent_View 	@5
			location   	(73, 1371)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	2050
			justify    	0
			label      	"<<Servant>>")
		    icon_style 	"Label"
		    fill_color 	12842435
		    quidu      	"4A2DFD580067"
		    width      	2068
		    height     	342
		    annotation 	8
		    autoResize 	TRUE)
		(object RealizeView "" @6
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    stereotype 	TRUE
		    line_color 	3947680
		    quidu      	"4A2DFD750203"
		    client     	@5
		    supplier   	@4
		    vertices   	(list Points
			(1096, 1358)
			(1095, 1236))
		    line_style 	0)
		(object ClassView "Class" "Logical View::MDProcess::MDAModel::BaseFunctionImpl::ListOperationBase" @7
		    ShowCompartmentStereotypes 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    location   	(2871, 1044)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@7
			location   	(2348, 960)
			fill_color 	13434879
			nlines     	1
			max_width  	1046
			justify    	0
			label      	"ListOperationBase")
		    stereotype 	(object ItemLabel
			Parent_View 	@7
			location   	(2348, 910)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	1046
			justify    	0
			label      	"<<SimpleClass>>")
		    icon_style 	"Label"
		    fill_color 	12842465
		    quidu      	"4B581BCD0399"
		    width      	1064
		    height     	292
		    annotation 	8
		    autoResize 	TRUE)
		(object InheritView "" @8
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    stereotype 	TRUE
		    line_color 	3947680
		    quidu      	"4B602C3902A7"
		    client     	@5
		    supplier   	@7
		    vertices   	(list Points
			(1717, 1358)
			(2338, 1188))
		    line_style 	0)
		(object InheritView "" @9
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    stereotype 	TRUE
		    line_color 	3947680
		    quidu      	"4B602C3F010B"
		    client     	@2
		    supplier   	@7
		    vertices   	(list Points
			(1890, 909)
			(2338, 970))
		    line_style 	0)))))
