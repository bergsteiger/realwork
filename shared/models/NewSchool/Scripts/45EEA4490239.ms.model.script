// DynamicTree_i 45EEA4490239 Impl Category

INCLUDE 'ElementsRTTI.ms.dict'

%%Inner ME_45EEA4490239
%%Inner ME_45EEA4490239
%%Inner ME_45EEA4490239
%%Inner ME_45EEA4490239
%%Inner ME_45EEA4490239
%%Inner ME_45EEA4490239
%%Inner ME_45EEA4490239
%%Inner ME_45EEA4490239
%%Inner ME_45EEA4490239
%%Inner ME_45EEA4490239
%%Inner ME_45EEA4490239
%%Inner ME_45EEA4490239

FORWARD ME_45EEA4490239

ME ME_45F93D0D0290
 MEPROP UID '45F93D0D0290'
 MEPROP Name 'GCL::StaticNode_var'
 MEPROP Class class_Class
 MELINK Stereotype st_Typedef ;
 MEPROP Kind kind_NormalClass
 %SUMMARY 'Гнусный хак.  Нужен для того, чтобы можно было передавать в фунции симпл класс по ссылке на вар, что в свою очередь нужно, чтобы где-то в кишках дёрнуть на этом варе ремув-реф при определённых условиях.' ;
 MEPROP Visibility PublicAccess
 MEPROP Abstraction at_regular
 MELINK Parent HWL ME_45EEA4490239 // DynamicTree_i
 ;
 UP extprop:pas:TypeName 'TGCL::StaticNode_var'

ENDME // ME_45F93D0D0290 GCL::StaticNode_var

FORWARD ME_45FFA18202FD

ME ME_45FFA19202BF
 MEPROP UID '45FFA19202BF'
 MEPROP Class class_Attribute
 MEPROP Visibility PublicAccess
 MEPROP Abstraction at_regular
 MEPROP LinkType lt_agr
 MELINK Parent HWL ME_45FFA18202FD // CompactSelectorList
 ;

ENDME // ME_45FFA19202BF 

ME ME_45FFA18202FD
 MEPROP UID '45FFA18202FD'
 MEPROP Name 'CompactSelectorList'
 MEPROP Class class_Class
 MELINK Stereotype st_Vector ;
 MEPROP Kind kind_NormalClass
 MEPROP Visibility PublicAccess
 MEPROP Abstraction at_regular
 MELINK Parent HWL ME_45EEA4490239 // DynamicTree_i
 ;
 MELIST Attributes
   Seq: ( HWL ME_45FFA19202BF // 
 )
 ; // Attributes
 UP "array type" 'dynamic'
 UP extprop:pas:TypeName 'ICompactSelectorList'

ENDME // ME_45FFA18202FD CompactSelectorList

ME ME_45EEA4490239
 MEPROP UID '45EEA4490239'
 MEPROP Name 'DynamicTree_i'
 MEPROP IsSubRoot true
 MEPROP Class class_Category
 MELINK Stereotype st_Impl ;
 MEPROP Visibility ProtectedAccess
 MEPROP Abstraction at_regular
 MELINK Parent WL? 'ME_456EA3D2031C' // GblAdapterLib
 ;
 MELIST Children
   Seq: ( HWL ME_45F93D0D0290 // GCL::StaticNode_var
 HWL ME_45FFA18202FD // CompactSelectorList
 WL? 'ME_45F52C0602BF' // FlagNodeBase
 WL? 'ME_45F6CDFF01C5' // FlagNodeStub
 WL? 'ME_45F554750213' // TreeBase
 WL? 'ME_45F7ECA8034B' // DefaultNodeBase
 WL? 'ME_45F57B6C0128' // ViewBase
 WL? 'ME_45F7D8410157' // RealNodeBase
 WL? 'ME_45F6C139000F' // DelegateNodeBase
 WL? 'ME_45F6583E001F' // View
 WL? 'ME_45F585F802AF' // Tree
 WL? 'ME_45F7C10C005D' // NodeServerTree
 )
 ; // Children
 MELIST Depends
   Seq: ( WL? 'ME_3DBFDB23006E' // Primitives
 WL? 'ME_4423F94903C8' // IO
 WL? 'ME_456EA56002BF' // BaseTypes
 WL? 'ME_456F02A50196' // BaseTreeSupport
 WL? 'ME_457450470167' // DynamicTree
 WL? 'ME_45EEA48F011F' // Filters
 WL? 'ME_45EEA85502B4' // Notify
 WL? 'ME_45EEAA69036E' // Settings
 WL? 'ME_45EEAA8E034E' // Search
 WL? 'ME_45EEAA96039C' // Security
 WL? 'ME_45EEB07902AE' // DocTree
 WL? 'ME_45F66C67007D' // SearchDefines
 WL? 'ME_45F66E6A02BF' // DynamicTreeDefines
 WL? 'ME_460B8FB00186' // Convertors
 WL? 'ME_460BAAA30119' // ApplicationHelper
 WL? 'ME_4614E97E01C5' // TimeStampSync
 )
 ; // Depends
 MESTRINGLIST DiagramsNames
   Seq: ( 'uses' 'main' 'filters' 'frozennode' 'delegates' 'flags' 'local' 'tree&view' 'using by treebase' 'tree_servants' 'inpharm_tree_servants' 'filtered_trees' )
 ; // DiagramsNames
 UP cpp:PathOnly '\garant6x\implementation\Garant\GblAdapterLib\impl\DynamicTree_i'
 UP h:Path 'garant6x\implementation\Garant\GblAdapterLib\impl\DynamicTree_i\DynamicTree_i.h'
 UP h:PathOnly '\garant6x\implementation\Garant\GblAdapterLib\impl\DynamicTree_i'

ENDME // ME_45EEA4490239 DynamicTree_i
