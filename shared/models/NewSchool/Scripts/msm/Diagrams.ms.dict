UNIT Diagrams.ms.dict

USES
 core.ms.dict
;

USES
 ElemMemberPrim.ms.dict
;

USES
 ElementsRTTI.ms.dict
;

USES
 CutPrefix.ms.dict
;

USES
 CutSuffix.ms.dict
;

elem_iterator Diagrams
 Cached:
 (
  RULES
   (
    ( Self .IsSomeView )
    AND ( Self .Viewed Self ?!= )
   ) 
    ( Self .Viewed call.me )
   DEFAULT
    ( Self 'Diagrams' .ElemList ) 
  ; // RULES
 )
 >>> Result
; // Diagrams

USES
 SetElementVar.ms.dict
;

elem_iterator Views
 Cached:
 (
  VAR l_Views
  Self 'Views' .ElemList >>> l_Views
  //Self 'Views' l_Views .SetElementVar
  // - сохряняем ссылку себе, чтобы потом пережить перечитывание списка
  l_Views
 ) 
 >>> Result
; // Views

USES
 CountIt.ms.dict
;

USES
 DiagramExt.ms.dict
;

USES
 MEPrefix.ms.dict
;

USES
 IsNil.ms.dict
;

elem_iterator msm:Diagrams
 Cached:
 (
  RULES
   (
    ( Self .IsSomeView )
    AND ( Self .Viewed Self ?!= )
   ) 
    ( Self .Viewed call.me )
   (
    ( Self .IsSomeView ! )
    AND ( Self .Diagrams .NotEmpty ) 
   ) 
    ( Self .Diagrams )
   DEFAULT
    begin
     VAR l_Name
     Self .WordName '_view' .CutSuffix >>> l_Name
     VAR l_DictName
     l_Name MEPrefix .CutPrefix >>> l_DictName
     l_DictName DiagramExt Cat >>> l_DictName
     l_Name '_diagrams' Cat >>> l_Name
     VAR l_DigramsHolder 
     WL l_Name l_DictName >>> l_DigramsHolder
     RULES
      ( l_DigramsHolder .IsNil )
       nil
      DEFAULT
       begin
        l_DigramsHolder .Diagrams
        VAR l_Diagrams
        >>> l_Diagrams
        //l_DigramsHolder 'Diagrams' l_Diagrams .SetElementVar
        //Self 'Diagrams' l_Diagrams .SetElementVar
        // - сохряняем ссылку себе, чтобы потом пережить перечитывание списка
        l_Diagrams
       end // DEFAULT
     ; // RULES  
    end // DEFAULT 
  ; // RULES
 )
 >>> Result
; // msm:Diagrams

INTEGER elem_func X
 Self 'X' 0 .ElemMember >>> Result
; // X

INTEGER elem_func Y
 Self 'Y' 0 .ElemMember >>> Result
; // Y

INTEGER elem_func Width
 Self 'Width' 120 .ElemMember >>> Result
; // Width

INTEGER elem_func Height
 Self 'Height' 100 .ElemMember >>> Result
; // Height
