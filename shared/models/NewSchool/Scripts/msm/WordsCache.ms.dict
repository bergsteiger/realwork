UNIT WordsCache.ms.dict

USES
 axiom_push.ms.dict
;

USES
 axiom:msm
;

: WordFromCache
  STRING IN aWordName
 aWordName msm:WordFromCache
; // WordFromCache

USES 
 ElemMemberPrim.ms.dict 
;

USES
 IsNil.ms.dict
;

USES
 ref.ms.dict
;

USES
 RoseModel.ms.dict
;

//USES
// DictionaryByName.ms.dict
//;

PROCEDURE WordToCache
  STRING IN aWordName
  TtfwWord IN aWord
 aWordName aWord msm:WordToCache 
 
 if ( aWord .IsSomeView ! ) then
 begin
  if ( aWord pop:Word:Producer @ ME ?== ) then
  begin
   if ( aWord pop:Word:GetRefForCompare .NotIsNil ) then
   begin
    RULES
     ( aWord .xStereotype IsString )
      ()
     ( aWord .xMDAClass class_Unknown == )
      ()
     ( aWord .xMDAClass class_Parameter == )
      ()
     ( aWord .xMDAClass class_Dependency == )
      ()
     ( aWord .xMDAClass class_Attribute == )
      ()
     ( aWord .xMDAClass class_Operation == )
      ()
     ( aWord .xStereotype .xName 'method' ?== )
      ()
     ( aWord .xStereotype .xName 'virtualmethod' ?== )
      ()
     ( aWord .xStereotype .xName 'abstractmethod' ?== )
      ()
     ( aWord .xStereotype .xName 'facetmethod' ?== )
      ()
     ( aWord .xStereotype .xName 'Constructor' ?== )
      ()
     ( aWord .xStereotype .xName 'Factory' ?== )
      ()
     ( aWord .xStereotype .xName 'UseCase' ?== )
      ()
     ( aWord .xStereotype .xName 'UseCaseSetting' ?== )
      ()
     ( aWord .xStereotype .xName 'UseCaseTagRequirement' ?== )
      ()
     ( aWord .xStereotype .xName 'UseCaseSettingValue' ?== )
      ()
     ( aWord .xStereotype .xName 'MDAAttribute' ?== )
      ()
     ( aWord .xStereotype .xName 'MDAOperation' ?== )
      ()
     ( aWord .xStereotype .xName 'MDADependency' ?== )
      ()
     ( aWord .xStereotype .xName 'MDAParameter' ?== )
      ()
     DEFAULT
      ( aWord .xNameInModel aWord msm:AddWordToIndex )
    ; // RULES
   end // ( aWord pop:Word:GetRefForCompare .NotIsNil )
  end // ( aWord pop:Word:Producer @ ME ?== )
 end // ( aWord .IsSomeView ! )
 
  PROCEDURE .CheckChild
    IN aChild
   if ( aChild .xParent .IsNil ) then
   begin
    aChild -> Parent := aWord
   end // ( aChild .xParent .IsNil )
  ; // .CheckChild
  
 VAR l_Name
 aWord .xStereotype .xName >>> l_Name
 if (
     ( l_Name 'ModelRoot' == )
     OR ( l_Name 'ProjectGroup' == )
    ) then
 begin
  aWord .xChildren .for> .CheckChild
 end // ( l_Name 'ModelRoot' == )
 aWord .xParameters .for> .CheckChild
 if ( aWord .IsDiagram ) then
 begin
  aWord .xViews .for> .CheckChild
 end // ( aWord .IsDiagram )
 else
 begin
  //if ( aWord .xParent .IsNil ) then
  begin
   if (
       ( l_Name 'Project' == )
       OR ( l_Name 'VCMDomain' == )
       OR ( l_Name 'VCMProject' == )
       OR ( l_Name 'VCMTestProject' == )
       OR ( l_Name 'VCMUseCases' == )
      ) then
   begin   
    if ( aWord .xParent .IsNil ) then
    begin
     //aWord .xName Msg
     
     : DoFile
       STRING IN anItem
      if ( [ '%%Inner ' aWordName ] strings:Cat anItem FindInFile ) then 
      begin
       //anItem .DictionaryByName DROP
       //anItem Msg
       anItem msm:DictionaryByFile DROP
      end
     ; // DoFile
      
     @ DoFile '*.ms.model.script' msm:ModelRoot ProcessFilesWithMask
    end // ( aWord .xParent .IsNil )
   end 
  end // ( aWord .xParent .IsNil )
 end // ( aWord .IsDiagram )
; // WordToCache

//USES
// MDProcess_Templates.tpi.script
//;
