
(object Petal
    version    	50
    _written   	"Rose 2006.0.0.061205"
    charSet    	204)

(object Class_Category "OptionTreeControls"
    is_unit    	TRUE
    is_loaded  	TRUE
    attributes 	(list Attribute_Set
	(object Attribute
	    tool       	"MDA Generator"
	    name       	"AbstarctOperation"
	    value      	"regular")
	(object Attribute
	    tool       	"MDA Generator"
	    name       	"IsNative"
	    value      	"false")
	(object Attribute
	    tool       	"MDA Generator"
	    name       	"NESTED GENERATED FILES (h)"
	    value      	"w:/shared/WinGUI/OptionTreeControls/CEditMask.h::470AFDEC0203,w:/shared/WinGUI/OptionTreeControls/COptionTree.h::470AFBFE0213,w:/shared/WinGUI/OptionTreeControls/COptionTree3StateCheckBox.h::470CC30A002E,w:/shared/WinGUI/OptionTreeControls/COptionTreeCheckButton.h::470AFD4802FD,w:/shared/WinGUI/OptionTreeControls/COptionTreeColorPopUp.h::470AFD9300DA,w:/shared/WinGUI/OptionTreeControls/COptionTreeFileDlg.h::470AFE2C01E4,w:/shared/WinGUI/OptionTreeControls/COptionTreeFontSel.h::470AFEDC003E,w:/shared/WinGUI/OptionTreeControls/COptionTreeFontSelColorButton.h::470AFF120290,w:/shared/WinGUI/OptionTreeControls/COptionTreeFontSelFontCombo.h::470AFF50030D,w:/shared/WinGUI/OptionTreeControls/COptionTreeFontSelSizeCombo.h::470AFFC4001F,w:/shared/WinGUI/OptionTreeControls/COptionTreeIPAddressEdit.h::470B008500BB,w:/shared/WinGUI/OptionTreeControls/COptionTreeImagePopUp.h::470AFFF6030D,w:/shared/WinGUI/OptionTreeControls/COptionTreeInfo.h::470B002D00FA,w:/shared/WinGUI/OptionTreeControls/COptionTreeItem.h::470AFC61008C,w:/shared/WinGUI/OptionTreeControls/COptionTreeItemCheckBox.h::470B00C00138,w:/shared/WinGUI/OptionTreeControls/COptionTreeItemColor.h::470B00F7035B,w:/shared/WinGUI/OptionTreeControls/COptionTreeItemComboBox.h::470B01340261,w:/shared/WinGUI/OptionTreeControls/COptionTreeItemDate.h::470B01B302BF,w:/shared/WinGUI/OptionTreeControls/COptionTreeItemEdit.h::470B0202007D,w:/shared/WinGUI/OptionTreeControls/COptionTreeItemEditButton.h::470B029301E4,w:/shared/WinGUI/OptionTreeControls/COptionTreeItemFile.h::470B034A0232,w:/shared/WinGUI/OptionTreeControls/COptionTreeItemFont.h::470B03AC01A5,w:/shared/WinGUI/OptionTreeControls/COptionTreeItemHyperLink.h::470B04000119,w:/shared/WinGUI/OptionTreeControls/COptionTreeItemIPAddress.h::470B04DB003E,w:/shared/WinGUI/OptionTreeControls/COptionTreeItemImage.h::470B043B030D,w:/shared/WinGUI/OptionTreeControls/COptionTreeItemListBox.h::470B055702EE,w:/shared/WinGUI/OptionTreeControls/COptionTreeItemRadio.h::470B286E01F4,w:/shared/WinGUI/OptionTreeControls/COptionTreeItemSpinner.h::470B0CA60271,w:/shared/WinGUI/OptionTreeControls/COptionTreeItemStatic.h::470B0C3F0167,w:/shared/WinGUI/OptionTreeControls/COptionTreeList.h::470B05D5032C,w:/shared/WinGUI/OptionTreeControls/COptionTreeRadioButton.h::470B06DC0177,w:/shared/WinGUI/OptionTreeControls/COptionTreeSpinnerButton.h::470B06290251,w:/shared/WinGUI/OptionTreeControls/COptionTreeSpinnerEdit.h::470B066600FA,w:/shared/WinGUI/OptionTreeControls/CPreciseTimer.h::470B1253003E,w:/shared/WinGUI/OptionTreeControls/CRegExp.h::470B17AB001F,w:/shared/WinGUI/OptionTreeControls/OptionTreeDef.h::470AFC94034B,w:/shared/WinGUI/OptionTreeControls/OptionTreeFontSelGlobals.h::470AFF7B02DE,w:/shared/WinGUI/OptionTreeControls/OptionTreeRes.h::470B6E0A001F")
	(object Attribute
	    tool       	"MDA Generator"
	    name       	"NESTED GENERATED FILES (cpp)"
	    value      	"w:/shared/WinGUI/OptionTreeControls/CEditMask.cpp::470AFDEC0203,w:/shared/WinGUI/OptionTreeControls/COptionTree.cpp::470AFBFE0213,w:/shared/WinGUI/OptionTreeControls/COptionTree3StateCheckBox.cpp::470CC30A002E,w:/shared/WinGUI/OptionTreeControls/COptionTreeCheckButton.cpp::470AFD4802FD,w:/shared/WinGUI/OptionTreeControls/COptionTreeColorPopUp.cpp::470AFD9300DA,w:/shared/WinGUI/OptionTreeControls/COptionTreeFileDlg.cpp::470AFE2C01E4,w:/shared/WinGUI/OptionTreeControls/COptionTreeFontSel.cpp::470AFEDC003E,w:/shared/WinGUI/OptionTreeControls/COptionTreeFontSelColorButton.cpp::470AFF120290,w:/shared/WinGUI/OptionTreeControls/COptionTreeFontSelFontCombo.cpp::470AFF50030D,w:/shared/WinGUI/OptionTreeControls/COptionTreeFontSelSizeCombo.cpp::470AFFC4001F,w:/shared/WinGUI/OptionTreeControls/COptionTreeIPAddressEdit.cpp::470B008500BB,w:/shared/WinGUI/OptionTreeControls/COptionTreeImagePopUp.cpp::470AFFF6030D,w:/shared/WinGUI/OptionTreeControls/COptionTreeInfo.cpp::470B002D00FA,w:/shared/WinGUI/OptionTreeControls/COptionTreeItem.cpp::470AFC61008C,w:/shared/WinGUI/OptionTreeControls/COptionTreeItemCheckBox.cpp::470B00C00138,w:/shared/WinGUI/OptionTreeControls/COptionTreeItemColor.cpp::470B00F7035B,w:/shared/WinGUI/OptionTreeControls/COptionTreeItemComboBox.cpp::470B01340261,w:/shared/WinGUI/OptionTreeControls/COptionTreeItemDate.cpp::470B01B302BF,w:/shared/WinGUI/OptionTreeControls/COptionTreeItemEdit.cpp::470B0202007D,w:/shared/WinGUI/OptionTreeControls/COptionTreeItemEditButton.cpp::470B029301E4,w:/shared/WinGUI/OptionTreeControls/COptionTreeItemFile.cpp::470B034A0232,w:/shared/WinGUI/OptionTreeControls/COptionTreeItemFont.cpp::470B03AC01A5,w:/shared/WinGUI/OptionTreeControls/COptionTreeItemHyperLink.cpp::470B04000119,w:/shared/WinGUI/OptionTreeControls/COptionTreeItemIPAddress.cpp::470B04DB003E,w:/shared/WinGUI/OptionTreeControls/COptionTreeItemImage.cpp::470B043B030D,w:/shared/WinGUI/OptionTreeControls/COptionTreeItemListBox.cpp::470B055702EE,w:/shared/WinGUI/OptionTreeControls/COptionTreeItemRadio.cpp::470B286E01F4,w:/shared/WinGUI/OptionTreeControls/COptionTreeItemSpinner.cpp::470B0CA60271,w:/shared/WinGUI/OptionTreeControls/COptionTreeItemStatic.cpp::470B0C3F0167,w:/shared/WinGUI/OptionTreeControls/COptionTreeList.cpp::470B05D5032C,w:/shared/WinGUI/OptionTreeControls/COptionTreeRadioButton.cpp::470B06DC0177,w:/shared/WinGUI/OptionTreeControls/COptionTreeSpinnerButton.cpp::470B06290251,w:/shared/WinGUI/OptionTreeControls/COptionTreeSpinnerEdit.cpp::470B066600FA,w:/shared/WinGUI/OptionTreeControls/CPreciseTimer.cpp::470B1253003E,w:/shared/WinGUI/OptionTreeControls/CRegExp.cpp::470B17AB001F,w:/shared/WinGUI/OptionTreeControls/OptionTreeFontSelGlobals.cpp::470AFF7B02DE")
	(object Attribute
	    tool       	"MDA Generator"
	    name       	"NESTED GENERATED FILES (rc)"
	    value      	"w:/shared/WinGUI/OptionTreeControls/OptionTreeRes.rc::470B6E0A001F")
	(object Attribute
	    tool       	"MDA Generator"
	    name       	"NESTED GENERATED WikiPageID (wiki)"
	    value      	(value Text 
|Shared (c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/CEditMask|470AFDEC0203::470AFDEC0203;Shared (c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTree3StateCheckBox|470CC30A002E::470CC30A002E;Shared (c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeCheckButton|470AFD4802FD::470AFD4802FD;Shared (c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeColorPopUp|470AFD9300DA::470AFD9300DA;Shared (c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeFileDlg|470AFE2C01E4::470AFE2C01E4;Shared (c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeFontSelColorButton|470AFF120290::470AFF120290;Shared (c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeFontSelFontCombo|470AFF50030D::470AFF50030D;Shared (c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeFontSelSizeCombo|470AFFC4001F::470AFFC4001F;Shared (c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeFontSel|470AFEDC003E::470AFEDC003E;Shared (c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeIPAddressEdit|470B008500BB::470B008500BB;Shared (c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeImagePopUp|470AFFF6030D::470AFFF6030D;Shared (c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeInfo|470B002D00FA::470B002D00FA;Shared (c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemCheckBox|470B00C00138::470B00C00138;Shared (c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemColor|470B00F7035B::470B00F7035B;Shared (c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemComboBox|470B01340261::470B01340261;Shared (c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemDate|470B01B302BF::470B01B302BF;Shared (c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemEditButton|470B029301E4::470B029301E4;Shared (c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemEdit|470B0202007D::470B0202007D;Shared (c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemFile|470B034A0232::470B034A0232;Shared (c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemFont|470B03AC01A5::470B03AC01A5;Shared (c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemHyperLink|470B04000119::470B04000119;Shared (c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemIPAddress|470B04DB003E::470B04DB003E;Shared (c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemImage|470B043B030D::470B043B030D;Shared (c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemListBox|470B055702EE::470B055702EE;Shared (c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemRadio|470B286E01F4::470B286E01F4;Shared (c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemSpinner|470B0CA60271::470B0CA60271;Shared (c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemStatic|470B0C3F0167::470B0C3F0167;Shared (c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItem|470AFC61008C::470AFC61008C;Shared (c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeList|470B05D5032C::470B05D5032C;Shared (c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeRadioButton|470B06DC0177::470B06DC0177;Shared (c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeSpinnerButton|470B06290251::470B06290251;Shared (c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeSpinnerEdit|470B066600FA::470B066600FA;Shared (c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTree|470AFBFE0213::470AFBFE0213;Shared (c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/CPreciseTimer|470B1253003E::470B1253003E;Shared (c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/CRegExp|470B17AB001F::470B17AB001F;Shared (c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/OptionTreeDef|470AFC94034B::470AFC94034B;Shared (c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/OptionTreeFontSelGlobals|470AFF7B02DE::470AFF7B02DE;Shared (c++),key:SHR,guid:45ED9AFC026A/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItem|470AFC61008C::470AFC61008C;Shared (c++),key:SHR,guid:45ED9AFC026A/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTree|470AFBFE0213::470AFBFE0213;Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/CEditMask|470AFDEC0203::470AFDEC0203;Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTree3StateCheckBox|470CC30A002E::470CC30A002E;Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeCheckButton|470AFD4802FD::470AFD4802FD;Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeColorPopUp|470AFD9300DA::470AFD9300DA;Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeFileDlg|470AFE2C01E4::470AFE2C01E4;Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeFontSelColorButton|470AFF120290::470AFF120290;Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeFontSelFontCombo|470AFF50030D::470AFF50030D;Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeFontSelSizeCombo|470AFFC4001F::470AFFC4001F;Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeFontSel|470AFEDC003E::470AFEDC003E;Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeIPAddressEdit|470B008500BB::470B008500BB;Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeImagePopUp|470AFFF6030D::470AFFF6030D;Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeInfo|470B002D00FA::470B002D00FA;Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemCheckBox|470B00C00138::470B00C00138;Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemColor|470B00F7035B::470B00F7035B;Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemComboBox|470B01340261::470B01340261;Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemDate|470B01B302BF::470B01B302BF;Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemEditButton|470B029301E4::470B029301E4;Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemEdit|470B0202007D::470B0202007D;Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemFile|470B034A0232::470B034A0232;Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemFont|470B03AC01A5::470B03AC01A5;Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemHyperLink|470B04000119::470B04000119;Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemIPAddress|470B04DB003E::470B04DB003E;Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemImage|470B043B030D::470B043B030D;Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemListBox|470B055702EE::470B055702EE;Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemRadio|470B286E01F4::470B286E01F4;Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemSpinner|470B0CA60271::470B0CA60271;Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemStatic|470B0C3F0167::470B0C3F0167;Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItem|470AFC61008C::470AFC61008C;Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeList|470B05D5032C::470B05D5032C;Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeRadioButton|470B06DC0177::470B06DC0177;Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeSpinnerButton|470B06290251::470B06290251;Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeSpinnerEdit|470B066600FA::470B066600FA;Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTree|470AFBFE0213::470AFBFE0213;Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/CPreciseTimer|470B1253003E::470B1253003E;Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/CRegExp|470B17AB001F::470B17AB001F;Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/OptionTreeDef|470AFC94034B::470AFC94034B;Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/OptionTreeFontSelGlobals|470AFF7B02DE::470AFF7B02DE
	    ))
	(object Attribute
	    tool       	"MDA Generator"
	    name       	"WikiPageID (wiki)"
	    value      	(value Text 
|Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls|470AFB9A001F
	    ))
	(object Attribute
	    tool       	"MDA Generator"
	    name       	"SourceType (wiki)"
	    value      	"wiki")
	(object Attribute
	    tool       	"MDA Generator"
	    name       	"ElementCreationOrder"
	    value      	"16659795217"))
    quid       	"470AFB9A001F"
    documentation 	"набор классов для представления GUI-контролов в виде дерева"
    stereotype 	"Views"
    visible_categories 	(list visibility_relationship_list
	(object Visibility_Relationship
	    quid       	"470AFBCD007D"
	    supplier   	"Logical View::external::MFCTypes::Types"
	    quidu      	"4652B4FB036B")
	(object Visibility_Relationship
	    quid       	"4797214C031A"
	    supplier   	"Logical View::external::MFCTypes::Controls"
	    quidu      	"479720AF01C0")
	(object Visibility_Relationship
	    quid       	"4B4F61D60359"
	    supplier   	"Logical View::shared::GCL::str"
	    quidu      	"4503DF990167"))
    exportControl 	"Public"
    logical_models 	(list unit_reference_list
	(object Class "COptionTree"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"AbstarctOperation"
		    value      	"regular")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsNative"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need assign op"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need copy ctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need ref count"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need unsorted less"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"debug log"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"local supervisor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need UC"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need dctor"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need objcounter"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"no base class"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"non virtual base"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"singleton"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (cpp)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTree.cpp")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (h)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTree.h")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFBFE0213_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470AFBFE0213_CUSTOM_INCLUDES*¤#include "shared/Core/fix/win_afx.h"¤#include "shared/WinGUI/OptionTreeControls/CPreciseTimer.h"¤//#UC END# *470AFBFE0213_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFBFE0213*"
		    value      	(value Text 
|//#UC START# *470AFBFE0213*¤CFont* COptionTree::m_fNormalFont;¤CFont* COptionTree::m_fBoldFont;¤UINT COptionTree::m_uInstanceCount;¤COptionTreeItem *COptionTree::m_otiFound;¤CRect COptionTree::m_rcLargestLabel = CRect(0, 0, 0, 0);¤¤// Font callback¤static int CALLBACK _FontFamilyProcFonts(const LOGFONT FAR* lplf, const TEXTMETRIC FAR*, ULONG, LPARAM)¤{¤	ASSERT(lplf != NULL);¤¤	CString strFont = lplf->lfFaceName;¤¤	return strFont.CollateNoCase (_T("Tahoma")) == 0 ? 0 : 1;¤}¤COptionTree::COptionTree()¤{¤	// Initialize variables¤	m_dwTreeOptions = 0;¤	m_otiVisibleList = NULL;¤	m_otiFocus = NULL;¤	m_bDisableInput = FALSE;¤	m_uLastUID = 0;¤	m_ptOrigin = CPoint(150, 0);¤	m_pNotify = NULL;¤  m_dwFindFlag = OT_FI_LABEL;¤	// Initialize global resources for all COptionTree¤	// -- Initialize global resources¤	if (!m_uInstanceCount)¤	{¤		InitGlobalResources();¤	}¤	// -- Increase instance number¤	m_uInstanceCount++;¤  m_bLockUpdate = 0; // hb - allow normal updates¤  m_bLockNotification = 0;¤  // gdi objects¤  _PenShadow = NULL;¤  _iItemCount = 0;¤¤  _Message = 0;¤  _bsend   = false;¤¤  this->SetAttributeOffset();¤  this->SetFindOffset();¤  this->SetEnumOffset();¤}¤¤/////////////////////////////////////////////////////////////////////////////¤// COptionTree message handlers¤¤BOOL COptionTree::Create(DWORD dwStyle, RECT rcRect, CWnd* pParentWnd, DWORD dwTreeOptions, UINT nID)¤{¤	// Save tree options¤	m_dwTreeOptions = dwTreeOptions;¤¤	// Add style¤	dwStyle |= WS_CLIPSIBLINGS | WS_CLIPCHILDREN;¤¤	// Create the window¤	return CWnd::Create(AfxRegisterWndClass(CS_HREDRAW | CS_VREDRAW, ::LoadCursor(NULL, IDC_ARROW)), _T("OptionTree"), dwStyle, rcRect, pParentWnd, nID);¤}¤¤int COptionTree::OnCreate(LPCREATESTRUCT lpCreateStruct) ¤{¤	// Create window¤	if (CWnd::OnCreate(lpCreateStruct) == -1)¤	{¤		return -1;¤	}¤	¤	// Declare variables¤	DWORD dwStyle;¤	CRect rcClient;¤¤	// Get client rectangle¤	GetClientRect(rcClient);¤¤	// Setup the window style¤	dwStyle = WS_VISIBLE | WS_CHILD;¤¤	// Create the information window¤	m_otInfo.SetOptionsOwner(this);¤  m_otInfoInfo.SetOptionsOwner(this);¤  ¤  /*¤	if(m_otInfo.Create(_T("OptionTreeInfo"), dwStyle, rcClient, this) == FALSE)¤	{¤		return -1;¤	}¤  */¤	if(m_otInfo.Create(WS_VISIBLE | WS_CHILD | ES_READONLY,rcClient, this,777) == FALSE)¤	{¤		return -1;¤	}¤  m_otInfo.SetFont(this->GetBoldFont());¤	if(m_otInfoInfo.Create(WS_VISIBLE | WS_CHILD | WS_VSCROLL | ES_READONLY | ES_MULTILINE,rcClient, this,778) == FALSE)¤	{¤		return -1;¤	}¤  m_otInfoInfo.SetFont(this->GetNormalFont());¤  ¤  // gdi objects¤  _PenShadow = CreatePen(PS_SOLID, 1, GetSysColor(COLOR_BTNSHADOW));¤¤  // Modify style¤	dwStyle |= WS_VSCROLL;¤¤	// Create the list window¤	m_otlList.SetOptionsOwner(this);¤	if (m_otlList.Create(dwStyle, rcClient, this, OT_TREELIST_ID) == FALSE)¤	{¤		return -1;¤	}¤   m_otlList.SetWindowText(_T("OptionTreeList")); // hb¤	// Hide info window¤	if (GetShowInfoWindow() == FALSE)¤	{¤		if (::IsWindow(m_otInfo.GetSafeHwnd()))¤		{¤			m_otInfo.ShowWindow(SW_HIDE);¤		}¤		if (::IsWindow(m_otInfoInfo.GetSafeHwnd()))¤		{¤      m_otInfoInfo.ShowWindow(SW_HIDE);¤		}¤  }¤	else¤	{¤		if (::IsWindow(m_otInfo.GetSafeHwnd()))¤		{¤			m_otInfo.ShowWindow(SW_SHOW);¤		}¤		if (::IsWindow(m_otInfoInfo.GetSafeHwnd()))¤		{¤			m_otInfoInfo.ShowWindow(SW_SHOW);¤		}¤  }¤¤	// Resize all windows¤	ResizeAllWindows(rcClient.Width(), rcClient.Height());¤¤	// Show window¤	ShowWindow(SW_SHOW);¤¤	// Force redraw¤	Invalidate();¤¤	// Update window¤	UpdateWindow();¤¤	return 0;¤}¤// hb - added this function to create childs in a subclassed control e.g. in a DialogBox¤int COptionTree::CreateChilds() ¤{¤	// Declare variables¤	DWORD dwStyle;¤	CRect rcClient;¤¤	// Get client rectangle¤	GetClientRect(rcClient);¤¤	// Setup the window style¤	dwStyle = WS_VISIBLE | WS_CHILD;¤¤	// Create the information window¤	m_otInfo.SetOptionsOwner(this);¤  m_otInfoInfo.SetOptionsOwner(this);¤  /*¤	if(m_otInfo.Create(_T("OptionTreeInfo"), dwStyle, rcClient, this) == FALSE)¤	{¤		return -1;¤	}¤  */¤	if(m_otInfo.Create(WS_VISIBLE | WS_CHILD | ES_READONLY,rcClient, this,777) == FALSE)¤	{¤		return -1;¤	}¤  m_otInfo.SetFont(this->GetBoldFont());¤	if(m_otInfoInfo.Create(WS_VISIBLE | WS_CHILD | WS_VSCROLL | ES_READONLY | ES_MULTILINE,rcClient, this,778) == FALSE)¤	{¤		return -1;¤	}¤  m_otInfoInfo.SetFont(this->GetNormalFont());¤¤	// Modify style¤	dwStyle |= WS_VSCROLL;¤¤	// Create the list window¤	m_otlList.SetOptionsOwner(this);¤	if (m_otlList.Create(dwStyle, rcClient, this, OT_TREELIST_ID) == FALSE)¤	{¤		return -1;¤	}¤   m_otlList.SetWindowText(_T("OptionTreeList")); // hb¤	// Hide info window¤	if (GetShowInfoWindow() == FALSE)¤	{ ¤		if (::IsWindow(m_otInfo.GetSafeHwnd()))¤		{¤			m_otInfo.ShowWindow(SW_HIDE);¤		}¤		if (::IsWindow(m_otInfoInfo.GetSafeHwnd()))¤		{¤			m_otInfoInfo.ShowWindow(SW_HIDE);¤		}¤  }¤	else¤	{¤		if (::IsWindow(m_otInfo.GetSafeHwnd()))¤		{¤			m_otInfo.ShowWindow(SW_SHOW);¤		}¤		if (::IsWindow(m_otInfoInfo.GetSafeHwnd()))¤		{¤			m_otInfoInfo.ShowWindow(SW_SHOW);¤		}¤  }¤¤	// Resize all windows¤	ResizeAllWindows(rcClient.Width(), rcClient.Height());¤	return 0;¤}¤¤void COptionTree::ShowInfoWindow(BOOL bShow)¤{¤	// Declare variables¤	CRect rcClient;¤¤	// Get client rectangle¤	GetClientRect(rcClient);¤¤	// Set option¤	if (bShow == TRUE)¤	{¤		m_dwTreeOptions |= OT_OPTIONS_SHOWINFOWINDOW;¤	}¤	else¤	{¤		m_dwTreeOptions &= ~OT_OPTIONS_SHOWINFOWINDOW;¤	}¤¤	// Hide info window¤	if (GetShowInfoWindow() == FALSE)¤	{¤    ¤		if (::IsWindow(m_otInfo.GetSafeHwnd()))¤		{¤			m_otInfo.ShowWindow(SW_HIDE);¤		}¤		if (::IsWindow(m_otInfoInfo.GetSafeHwnd()))¤		{¤			m_otInfoInfo.ShowWindow(SW_HIDE);¤		}¤  }¤	else¤	{¤		if (::IsWindow(m_otInfo.GetSafeHwnd()))¤		{¤			m_otInfo.ShowWindow(SW_SHOW);¤		}¤		if (::IsWindow(m_otInfoInfo.GetSafeHwnd()))¤		{¤			m_otInfoInfo.ShowWindow(SW_SHOW);¤		}¤  }¤¤	// Resize all windows¤	ResizeAllWindows(rcClient.Width(), rcClient.Height());¤¤	// Force redraw¤	Invalidate();¤¤	// Update window¤	UpdateWindow();¤}	¤void  COptionTree::ClearInfoTitle(void)¤{¤  if(::IsWindow(m_otInfo.GetSafeHwnd()) == TRUE)¤    m_otInfo.SetWindowText("");¤}¤void  COptionTree::ClearInfoText(void)¤{¤  if(::IsWindow(m_otInfoInfo.GetSafeHwnd()) == TRUE)¤    m_otInfoInfo.SetWindowText("");¤}¤¤BOOL COptionTree::GetShowInfoWindow()¤{¤	// Return option¤	return (m_dwTreeOptions & OT_OPTIONS_SHOWINFOWINDOW) ? TRUE : FALSE;¤}¤¤void COptionTree::ResizeAllWindows(int cx, int cy)¤{¤	// Resize information window¤	if ((cx > 0) && (cy > 0))¤	{¤		// -- Information window¤		if (GetShowInfoWindow() == TRUE)¤		{¤			// -- -- Move information window¤			if (::IsWindow(m_otInfo.GetSafeHwnd()))¤			{¤				m_otInfo.MoveWindow(0, cy - OT_INFOWINDOWHEIGHT, cx, OT_INFOWINDOWLABELHEIGHT);¤			}¤			if (::IsWindow(m_otInfoInfo.GetSafeHwnd()))¤			{¤				m_otInfoInfo.MoveWindow(0, cy - OT_INFOWINDOWHEIGHT+OT_INFOWINDOWLABELHEIGHT, cx, OT_INFOWINDOWHEIGHT-OT_INFOWINDOWLABELHEIGHT);¤			}      ¤			// -- -- Move list window¤			if (::IsWindow(m_otlList.GetSafeHwnd()))¤			{¤				m_otlList.MoveWindow(0, 0, cx, cy - OT_INFOWINDOWHEIGHT);¤			}¤		}¤		// -- No information window¤		else¤		{¤			// -- -- Move list window¤			if (::IsWindow(m_otlList.GetSafeHwnd()))¤			{¤				m_otlList.MoveWindow(0, 0, cx, cy);¤			}¤		}¤¤		// Force redraw¤		Invalidate();¤¤		// Update window¤		UpdateWindow();¤		¤	}¤}¤¤void COptionTree::OnSize(UINT nType, int cx, int cy) ¤{	¤	// Resize windows¤	ResizeAllWindows(cx, cy);¤¤	CWnd::OnSize(nType, cx, cy);	¤}¤¤CFont* COptionTree::GetNormalFont()¤{¤	return m_fNormalFont;¤}¤¤¤CFont* COptionTree::GetBoldFont()¤{¤	return m_fBoldFont;¤}¤¤void COptionTree::InitGlobalResources()¤{¤	// Declare variables¤	CWindowDC dc(NULL);¤	NONCLIENTMETRICS cmInfo;¤	cmInfo.cbSize = sizeof(cmInfo);¤	LOGFONT lfFont;¤	BOOL bUseSystemFont;¤¤	// Delete global resources¤	DeleteGlobalResources();¤	¤	// Get system parameter information¤	::SystemParametersInfo(SPI_GETNONCLIENTMETRICS, sizeof(cmInfo), &cmInfo, 0);¤¤	// Initialize logfont¤	memset(&lfFont, 0, sizeof(LOGFONT));¤	lfFont.lfCharSet = (BYTE)GetTextCharsetInfo(dc.GetSafeHdc(), NULL, 0);¤	lfFont.lfHeight = cmInfo.lfMenuFont.lfHeight;¤	lfFont.lfWeight = cmInfo.lfMenuFont.lfWeight;¤	lfFont.lfItalic = cmInfo.lfMenuFont.lfItalic;¤¤	// Check if we should use system font¤	_tcscpy(lfFont.lfFaceName, cmInfo.lfMenuFont.lfFaceName);¤¤	// Use system font¤	bUseSystemFont = (cmInfo.lfMenuFont.lfCharSet > SYMBOL_CHARSET);¤	if (!bUseSystemFont)¤	{¤		// -- Check for "Tahoma" font existance:¤		if (::EnumFontFamilies(dc.GetSafeHdc(), NULL, _FontFamilyProcFonts, 0) == 0)¤		{¤			// -- -- Found! Use MS Office font¤			_tcscpy(lfFont.lfFaceName, _T("Tahoma"));¤		}¤		else¤		{¤			// -- -- Not found. Use default font¤			_tcscpy(lfFont.lfFaceName, _T("MS Sans Serif"));¤		}¤	}¤¤	// Normal font¤	m_fNormalFont = new CFont;¤	m_fNormalFont->CreateFontIndirect(&lfFont);¤¤	// Bold font¤	lfFont.lfWeight = FW_BOLD;¤	m_fBoldFont = new CFont;¤	m_fBoldFont->CreateFontIndirect(&lfFont);¤}¤¤void COptionTree::DeleteGlobalResources()¤{¤	// Delete normal font¤	if (m_fNormalFont && m_fNormalFont->GetSafeHandle() != NULL)¤	{¤		m_fNormalFont->DeleteObject();¤¤		delete m_fNormalFont;¤    m_fNormalFont = NULL;¤	}¤¤	// Delete bold font¤	if (m_fBoldFont && m_fBoldFont->GetSafeHandle() != NULL)¤	{¤		m_fBoldFont->DeleteObject();¤¤		delete m_fBoldFont;¤    m_fBoldFont = NULL;¤	}¤}¤¤COptionTreeItem * COptionTree::GetRootItem()¤{¤	// Return variable¤	return &m_otiRoot;¤}¤¤COptionTreeItem * COptionTree::GetFocusedItem()¤{¤	// Return variable¤	return m_otiFocus;¤}¤¤const POINT& COptionTree::GetOrigin()¤{¤	// Return variable¤	return m_ptOrigin;¤}¤¤CWnd* COptionTree::GetCtrlParent()¤{¤	// Return variable¤	return &m_otlList;¤}¤¤COptionTreeItem * COptionTree::GetVisibleList()¤{¤	// Return variable¤	return m_otiVisibleList;¤}¤¤void COptionTree::AddToVisibleList(COptionTreeItem *otiItem)¤{¤	// Declare variables¤	COptionTreeItem *otiNext;¤	¤	// Make sure item is not NULL¤	if (!otiItem)¤	{¤		return;¤	}¤¤	// Check for an empty visible list¤	if (!m_otiVisibleList)¤	{¤		m_otiVisibleList = otiItem;¤	}¤	else¤	{¤		// -- Add the new item to the end of the list¤		otiNext = m_otiVisibleList;¤		while (otiNext->GetNextVisible())¤		{¤			otiNext = otiNext->GetNextVisible();¤		}¤		otiNext->SetNextVisible(otiItem);¤	}¤¤	// Set next visible¤	otiItem->SetNextVisible(NULL);¤}¤¤long COptionTree::HitTest(const POINT &pt)¤{¤	// Declare variables¤	COptionTreeItem* otiItem;¤	POINT ptPoint = pt;¤	CRect rcLabel;¤¤	// Convert screen to tree coordinates¤	ptPoint.y += m_ptOrigin.y;¤¤	// Run the hit test¤	if ((otiItem = FindItem(pt)) != NULL)¤	{¤		// -- Column¤		if (!otiItem->IsRootLevel() && pt.x >= m_ptOrigin.x - OT_COLRNG && pt.x <= m_ptOrigin.x + OT_COLRNG)¤		{¤			return OT_HIT_COLUMN;¤		}¤¤		// -- Attribute¤		if (pt.x > m_ptOrigin.x + OT_COLRNG)¤		{¤			return OT_HIT_ATTRIBUTE;¤		}¤¤		// -- Expand¤		if (otiItem->HitExpand(ptPoint))¤		{¤			return OT_HIT_EXPAND;¤		}¤¤		// -- Label¤		return OT_HIT_LABEL;¤	}¤¤	// -- Client¤	return OT_HIT_CLIENT;¤}¤¤COptionTreeItem * COptionTree::FindItem(UINT uCtrlID)¤{¤	// Mark found as NULL¤	m_otiFound = NULL;¤¤	// Enumerate items¤	EnumItems(&m_otiRoot, EnumFindItem, uCtrlID);¤¤	return m_otiFound;¤}¤COptionTreeItem * COptionTree::FindItem(const CString& Text,const DWORD flag,COptionTreeItem * pOffset)¤{¤	// Mark found as NULL¤	m_otiFound = NULL;¤¤  m_dwFindFlag = flag;¤  // set start item for search¤  this->SetFindOffset(pOffset);¤  // set start item for enumeration¤  this->SetEnumOffset(pOffset);¤¤  // search is not case sens.¤  CString sSearch(Text);¤  sSearch.MakeUpper();¤	// Enumerate items¤	EnumItems(&m_otiRoot, EnumFindItemStr, (LPARAM) &sSearch);¤¤	return m_otiFound;¤}¤¤const CRect& COptionTree::GetLargestVisibleLabel(const bool bcalc)¤{¤  if(bcalc == true)¤{¤	// Set as negative¤	m_rcLargestLabel = CRect(0, 0, 0, 0);¤¤	// Enumerate items¤	EnumItems(&m_otiRoot, EnumGetLargestVisibleLabelRect, NULL);¤  }¤	return m_rcLargestLabel;¤}¤void COptionTree::UpdateLargestVisibleLabel(const int& newright)¤{¤  if(m_rcLargestLabel.right < newright)¤    m_rcLargestLabel.right = newright;¤}¤void COptionTree::ResetLargestVisibleLabel(void)¤{¤  m_rcLargestLabel.right = OT_EXPANDCOLUMN + OT_RESIZEBUFFER;¤}¤¤BOOL COptionTree::EnumItems(COptionTreeItem* otiItem, ENUM_OPTIONITEMPROC enumProc, LPARAM lParam)¤{¤	// Declare variables¤	COptionTreeItem* otiNext=NULL;¤	BOOL bRet = TRUE;¤¤	// Validate items¤	if (!otiItem || !enumProc)¤	{¤		return FALSE;¤	}¤¤  // Don't call enumProc if an offset item is given [1]¤  if(enumProc != EnumFindItemStr  || this->GetEnumOffset() == NULL)¤  {¤    // Don't count the root item in any enumerations¤	  if (otiItem != &m_otiRoot && !enumProc(this, otiItem, lParam))¤	  {¤		  return FALSE;¤	  }¤  }¤	// Recurse thru all child items¤	otiNext = otiItem->GetChild();¤	while (otiNext != NULL)¤	{¤    // enum start item found, so unlock call of enumProc ([1])¤    if(otiNext != NULL && this->GetEnumOffset() == otiNext)¤      this->SetEnumOffset(NULL);¤¤    if (!EnumItems(otiNext, enumProc, lParam))¤		{¤      bRet = FALSE;¤      // sorry, bad hack¤      if(enumProc == EnumFindItemStr)¤        return FALSE;¤		}¤¤		otiNext = otiNext->GetSibling();¤	}¤¤	return bRet;¤}¤¤BOOL CALLBACK COptionTree::EnumFindItem(COptionTree* otProp, COptionTreeItem* otiItem, LPARAM lParam)¤{¤	// Validate items¤	if (otiItem == NULL)¤	{¤		return FALSE;¤	}¤¤	// Find item¤	if (otiItem->GetCtrlID() == (UINT) lParam)¤	{¤		m_otiFound = otiItem;¤¤		return FALSE;¤	}¤¤	return TRUE;¤}¤BOOL CALLBACK COptionTree::EnumFindItemStr(COptionTree* otProp, COptionTreeItem* otiItem, LPARAM lParam)¤{¤	// Validate items¤	if (otiItem == NULL || otProp == NULL)¤	{¤		return FALSE;¤	}¤  if(otProp->GetFindOffset() != NULL && otProp->GetFindOffset() == otiItem)¤    return TRUE;¤¤  CString* pText = (CString*) lParam;¤  if(pText != NULL)¤  {¤    CString sItemText("");¤    if(otProp->HasFindFlag(OT_FI_LABEL) == true)¤    {¤      sItemText = otiItem->GetLabelText();¤      sItemText.MakeUpper();¤      if(sItemText.Find(*pText,0) >= 0)¤      {¤		    m_otiFound = otiItem;¤        otProp->SetFindOffset(m_otiFound);¤        return FALSE;¤      }¤		  ¤    }¤    if(otProp->HasFindFlag(OT_FI_ATTRIBUTE) == true)¤    {¤      sItemText = otiItem->GetAttributeText();¤      sItemText.MakeUpper();¤      if(sItemText.Find(*pText,0) >= 0)¤      {¤		    m_otiFound = otiItem;¤        otProp->SetFindOffset(m_otiFound);¤        return FALSE;¤      }¤		  ¤    }¤  }¤	return TRUE;¤}¤¤BOOL CALLBACK COptionTree::EnumGetLargestVisibleLabelRect(COptionTree* otProp, COptionTreeItem* otiItem, LPARAM lParam)¤{¤	// Declare variables¤	COptionTreeItem *otParent;¤¤	// Validate items¤	if (otiItem == NULL)¤	{¤		return FALSE;¤	}¤¤	// Make sure not root¤	if (otiItem->IsRootLevel())¤	{¤		return TRUE;¤	}¤¤	// Get parent¤	otParent = otiItem->GetParent();¤¤	// Validate parent¤	if (otParent == NULL)¤	{¤		return TRUE;¤	}¤¤	if (otParent->IsExpanded() == FALSE)¤	{¤		return TRUE;¤	}¤¤	// Declare variables¤	CRect rcRect;¤¤	// Get lable rect¤	rcRect = otiItem->GetLabelRect();¤¤	// See if label right is greater¤	if (rcRect.right > m_rcLargestLabel.right)¤	{¤		m_rcLargestLabel = rcRect;¤	}¤¤	return TRUE;¤}¤¤BOOL CALLBACK COptionTree::EnumClearAllLabelRect(COptionTree* otProp, COptionTreeItem* otiItem, LPARAM lParam)¤{¤	// Validate items¤	if (otiItem == NULL)¤	{¤		return FALSE;¤	}¤¤	// Clear rectangle¤	otiItem->SetLabelRect(CRect(0, 0, 0, 0));¤¤	return TRUE;¤}¤¤BOOL CALLBACK COptionTree::EnumMoveAll(COptionTree* otProp, COptionTreeItem* otiItem, LPARAM lParam)¤{¤	// Validate items¤  if (otiItem == NULL || ¤      otiItem->IsVisible() == FALSE)¤	{¤		return FALSE;¤	}¤	¤	// Move item¤	otiItem->OnMove();¤¤	return TRUE;¤}¤¤BOOL CALLBACK COptionTree::EnumNotifyExpand(COptionTree* otProp, COptionTreeItem* otiItem, LPARAM lParam)¤{¤	// Validate items¤	if (otiItem == NULL)¤	{¤		return FALSE;¤	}¤	¤	// Move item¤	otiItem->OnExpand((BOOL) lParam);¤¤	return TRUE;¤}¤¤BOOL CALLBACK COptionTree::EnumRefreshAll(COptionTree* otProp, COptionTreeItem* otiItem, LPARAM lParam)¤{¤	// Validate items¤	if (otiItem == NULL)¤	{¤		return FALSE;¤	}¤¤	// Refresh item¤	otiItem->OnRefresh();¤¤	return TRUE;¤}¤¤BOOL CALLBACK COptionTree::EnumExpandAll(COptionTree* otProp, COptionTreeItem* otiItem, LPARAM lParam)¤{¤	// Validate items¤	if (otiItem == NULL)¤	{¤		return FALSE;¤	}¤¤	// Expand item¤	otiItem->Expand();¤¤	return TRUE;¤}¤¤BOOL CALLBACK COptionTree::EnumSelectAll(COptionTree* otProp, COptionTreeItem* otiItem, LPARAM lParam)¤{¤	// Validate items¤	if (otiItem == NULL)¤	{¤		return FALSE;¤	}¤¤	// Select item¤	otiItem->Select((BOOL)lParam);¤¤	return TRUE;¤}¤¤COptionTreeItem* COptionTree::FindItem(const POINT& pt)¤{¤	// Delcare variables¤	COptionTreeItem* otiItem;¤	CPoint ptPoint = pt;¤	CPoint ptLoc;¤¤	// Convert screen to tree coordinates¤	ptPoint.y += m_ptOrigin.y;¤¤	// Search the visible list for the item¤	for (otiItem = m_otiVisibleList; otiItem; otiItem = otiItem->GetNextVisible())¤	{¤		// -- Get item location¤		ptLoc = otiItem->GetLocation();¤		if (ptPoint.y >= ptLoc.y && ptPoint.y < ptLoc.y + otiItem->GetHeight())¤		{¤			return otiItem;¤		}¤	}¤¤	return NULL;¤}¤¤void COptionTree::DisableInput(BOOL bDisable)¤{¤	// Declare variables¤	CWnd* pWnd;¤	¤	// Save variable¤	m_bDisableInput = bDisable;¤	¤	// Get parent window¤	pWnd = GetParent();¤¤	// Enable window¤	if (pWnd != NULL)¤	{¤		pWnd->EnableWindow(!bDisable);¤	}¤}¤¤void COptionTree::SelectItems(COptionTreeItem *otiItem, BOOL bSelect)¤{¤	// Declare variables¤	if (otiItem == NULL)¤	{¤		otiItem = &m_otiRoot;¤	}¤¤	// Enum items¤	EnumItems(otiItem, EnumSelectAll, (LPARAM) bSelect);¤¤  this->Invalidate();¤  this->UpdateWindow();¤}¤¤COptionTreeItem * COptionTree::FocusFirst()¤{¤	// Declare variable¤	COptionTreeItem *otiOld;¤¤	// Set old to focus¤	otiOld = m_otiFocus;¤¤	// Set focused item¤	SetFocusedItem(m_otiVisibleList);¤¤	// Select items¤	if (m_otiFocus != NULL)¤	{¤		SelectItems(NULL, FALSE);¤		m_otiFocus->Select();¤	}¤¤	// Notify of selection change¤	if (otiOld != m_otiFocus)¤	{¤		SendNotify(OT_NOTIFY_SELCHANGE, m_otiFocus);¤	}¤¤	return m_otiFocus;¤}¤¤void COptionTree::SetFocusedItem(COptionTreeItem *otiItem)¤{¤	// Save focused¤	m_otiFocus = otiItem;¤	¤  m_otInfo.SetText(m_otiFocus,true);¤  m_otInfoInfo.SetText(m_otiFocus,false);¤	// Ensure focus is visible¤	EnsureVisible(m_otiFocus);¤¤	// Make sure this is a valid window¤	if (!IsWindow(GetSafeHwnd()))¤	{¤		return;¤	}¤¤	// Force redraw¤	Invalidate();¤¤	// Update window¤	UpdateWindow();¤}¤¤void COptionTree::EnsureVisible(COptionTreeItem *otiItem)¤{¤	// Declare variables¤	COptionTreeItem* otiParent;¤	CRect rcClient;¤	CPoint ptPoint;¤	long lOY;¤	¤	// Make sure valid¤	if (otiItem == NULL)¤	{¤		return;¤	}¤¤	// Item is not scroll visible (expand all parents)¤	if (IsItemVisible(otiItem) == FALSE)¤	{¤		otiParent = otiItem->GetParent();¤		while (otiParent != NULL)¤		{¤			otiParent->Expand();¤			¤			otiParent = otiParent->GetParent();¤		}¤¤		UpdatedItems();¤		UpdateWindow();¤	}¤¤	/* Item should be visible¤  // ce: here, items visibility is checked by looking in visibility list;¤  //     but newly, items in this list are really visible (not just expanded and somewhere in nirvana)¤	if (IsItemVisible(otiItem) == FALSE)¤	{¤		return;¤	}¤  */¤¤	// Calculate list client rectangle¤	m_otlList.GetClientRect(rcClient);¤	rcClient.OffsetRect(0, m_ptOrigin.y);¤	rcClient.bottom -= otiItem->GetHeight();¤¤	// Get item location¤	ptPoint = otiItem->GetLocation();¤¤	if (!rcClient.PtInRect(ptPoint))¤	{¤		if (ptPoint.y < rcClient.top)¤		{¤			lOY = ptPoint.y;¤		}¤		else¤		{¤			lOY = ptPoint.y - rcClient.Height() + otiItem->GetHeight();¤		}¤¤    m_otlList.ScrollDirect(SB_VERT,lOY);¤		//m_otlList.OnVScroll(SB_THUMBTRACK, lOY, NULL);¤	}¤}¤¤LRESULT COptionTree::SendNotify(UINT uNotifyCode, COptionTreeItem* otiItem)¤{¤	// Make sure this is a valid window¤	if (!IsWindow(GetSafeHwnd()) || NotificationLocked() == TRUE)¤	{¤		return 0L;¤	}¤¤	// See if the user wants to be notified¤	if (GetNotify() == FALSE)¤	{¤		return 0L;¤	}¤¤	// Make sure we have a window¤	if (m_pNotify == NULL)¤	{¤		return 0L;¤	}¤	if (!IsWindow(m_pNotify->GetSafeHwnd()))¤	{¤		return 0L;¤	}¤¤	// Declare variables¤	NMOPTIONTREE nmmp;¤	LPNMHDR lpnm = NULL;¤	UINT uID;¤¤	switch (uNotifyCode)¤	{¤		case OT_NOTIFY_INSERTITEM:¤		case OT_NOTIFY_DELETEITEM:¤		case OT_NOTIFY_DELETEALLITEMS:¤		case OT_NOTIFY_ITEMCHANGED:¤		case OT_NOTIFY_ITEMBUTTONCLICK:¤		case OT_NOTIFY_SELCHANGE:¤		case OT_NOTIFY_ITEMEXPANDING:¤		case OT_NOTIFY_COLUMNCLICK:¤		case OT_NOTIFY_PROPCLICK:¤      case OT_NOTIFY_EDITBUTTONCLICK:¤			lpnm = (LPNMHDR)&nmmp;¤			nmmp.otiItem = otiItem;¤			break;¤	}¤¤	// Send notification¤	if (lpnm != NULL)¤	{¤		uID = (UINT)::GetMenu(GetSafeHwnd());¤		lpnm->code = uNotifyCode;¤		lpnm->hwndFrom = GetSafeHwnd();¤		lpnm->idFrom = uID;¤	¤		return m_pNotify->SendMessage(WM_NOTIFY, (WPARAM)uID, (LPARAM)lpnm);¤	}¤¤	return 0L;¤}¤¤void COptionTree::UpdateMoveAllItems()¤{¤	// Enum move all¤	EnumItems(&m_otiRoot, EnumMoveAll);¤}¤¤void COptionTree::RefreshItems(COptionTreeItem *otiItem)¤{¤	// If item is NULL, refresh from root¤	if (otiItem == NULL)¤	{¤		otiItem = &m_otiRoot;¤	}¤¤	// Enum refresh all¤	EnumItems(otiItem, EnumRefreshAll);¤¤	// Update items¤	UpdatedItems();¤}¤void COptionTree::RefreshItem(COptionTreeItem* otiItem,const int type)¤{¤  if(otiItem != NULL && ::IsWindow(m_otlList.GetSafeHwnd()) == TRUE)¤  {¤    CRect recTotal=CRect(0,0,0,0);¤    // bad hack: could be we havent yet a labelrect¤    if(type & _D_REFRESH_LABEL)¤    {¤      recTotal.right = otiItem->GetAttributeRect().left;¤      recTotal.bottom = otiItem->GetAttributeRect().bottom;¤    }¤    if(type & _D_REFRESH_ATTRIBUTE)¤      recTotal += otiItem->GetAttributeRect();¤    m_otlList.InvalidateRect(recTotal);¤    m_otlList.UpdateWindow();¤  }¤}¤¤void COptionTree::UpdatedItems()¤{¤	// Make sure window is valid¤	if (!IsWindow(GetSafeHwnd()))¤	{¤		return;¤	}¤¤	// Update list¤	m_otlList.UpdateResize();¤¤	// Force redraw¤	Invalidate();¤¤	// Update window¤	UpdateWindow();¤}¤¤BOOL COptionTree::IsItemVisible(COptionTreeItem *otiItem)¤{¤	// Declare varibles¤	COptionTreeItem *otiNext = NULL;¤	¤	// Make sure item is valid¤	if (otiItem == NULL)¤	{¤		return FALSE;¤	}¤¤	// Search fr visible¤	for (otiNext = m_otiVisibleList; otiNext; otiNext = otiNext->GetNextVisible())¤	{¤		if (otiNext == otiItem)¤		{¤			return TRUE;¤		}¤	}¤¤	return FALSE;¤}¤¤void COptionTree::SetOriginOffset(long lOffset)¤{¤	// Offset¤	m_ptOrigin.y = lOffset;¤}¤¤void COptionTree::DeleteAllItems()¤{¤	// Delete from root¤	Delete(NULL);¤¤	// Update items¤	UpdatedItems();¤¤	// Reset UID counter¤	m_uLastUID = 1;¤}¤void COptionTree::SaveClearItems()¤{¤  this->LockAll();¤¤  // Delete from root¤	Delete(NULL);¤¤	// Update items¤	UpdatedItems();¤¤	// Reset UID counter¤	m_uLastUID = 1;¤¤  this->UnLockAll();¤}¤void COptionTree::LockUpdate()¤{¤  ++m_bLockUpdate;¤}¤void COptionTree::UnlockUpdate()¤{¤  --m_bLockUpdate;¤  if(m_bLockUpdate < 0)¤  {¤#ifdef _DEBUG¤    afxDump<<"\nWARNING: COptionTree::UnlockUpdate asymmetric call of LockUpdate/UnLockUpdate";¤#endif¤    m_bLockUpdate = 0;¤  }¤	if (UpdateLocked() == FALSE && IsWindow(GetSafeHwnd()))¤	{¤    m_otlList.UpdateResize();¤	}¤}¤void COptionTree::LockNotification()¤{¤  ++m_bLockNotification;¤}¤void COptionTree::UnlocNotification()¤{¤  --m_bLockNotification;¤  if(m_bLockNotification < 0)¤  {¤#ifdef _DEBUG¤    afxDump<<"\nWARNING: COptionTree::UnlocNotification asymmetric call of LockNotification/UnlocNotification";¤#endif¤    m_bLockNotification = 0;¤  }¤}¤¤void COptionTree::Delete(COptionTreeItem *otiItem)¤{¤	// Declare variables¤	COptionTreeItem* otiIter;¤	COptionTreeItem* otiNext;¤¤	// Clear visible list¤	ClearVisibleList();¤¤	// Send notify to user¤	SendNotify(OT_NOTIFY_DELETEITEM, otiItem);¤¤	// Passing in a NULL deletes frm root¤	if (otiItem == NULL)¤	{¤		otiItem = &m_otiRoot;¤	}¤¤	// Delete children¤	otiIter = otiItem->GetChild();¤	while (otiIter != NULL)¤	{¤		// -- Get sibling¤		otiNext = otiIter->GetSibling();¤		¤		// -- Delete¤		DeleteItem(otiIter);¤¤		// -- Get next¤		otiIter = otiNext;¤	}¤¤	// Unlink from tree¤	if (otiItem->GetParent() != NULL)¤	{¤		if (otiItem->GetParent()->GetChild() == otiItem)¤		{¤			otiItem->GetParent()->SetChild(otiItem->GetSibling());¤		}¤		else¤		{¤			otiIter = otiItem->GetParent()->GetChild();¤¤			while (otiIter->GetSibling() && otiIter->GetSibling() != otiItem)¤			{¤				otiIter = otiIter->GetSibling();¤			}¤¤			if (otiIter->GetSibling())¤			{¤				otiIter->SetSibling(otiItem->GetSibling());¤			}¤		}¤	}¤¤	// Delete item¤	if (otiItem != &m_otiRoot)¤	{¤		if (otiItem == GetFocusedItem())¤		{¤			SetFocusedItem(NULL);¤		}¤¤		otiItem->CleanDestroyWindow();¤¤		delete otiItem;¤    --_iItemCount;¤	}¤}¤¤void COptionTree::DeleteItem(COptionTreeItem *otiItem)¤{¤	// Delete iutem¤	Delete(otiItem);¤¤	// Update items¤	UpdatedItems();¤}¤void COptionTree::MoveItem(COptionTreeItem* otiToMove,COptionTreeItem* otiTarget)¤{¤  if(otiToMove != NULL && otiTarget != NULL && otiToMove->GetSibling() != otiTarget)¤  {¤	  // change linking¤	  if (otiToMove->GetParent() != NULL)¤	  {¤      COptionTreeItem* pToMovesSibling=otiToMove->GetSibling();¤      COptionTreeItem* pParent=otiToMove->GetParent();¤      COptionTreeItem* otiIter=NULL;¤      COptionTreeItem* Prev=NULL;¤¤      /// --- unlink from otiToMove ---¤      // otiToMove is first child¤		  if (pParent && pParent->GetChild() == otiToMove)¤		  {¤			  otiToMove->GetParent()->SetChild(otiToMove->GetSibling());¤		  }¤      // otiToMove within group or at end¤		  else if(pParent)¤		  {¤			  otiIter = pParent->GetChild();¤¤			  while (otiIter->GetSibling() && otiIter->GetSibling() != otiToMove)¤			  {¤				  otiIter = otiIter->GetSibling();¤			  }¤        // relink siblings of ¤        if(otiIter)¤        {¤          otiIter->SetSibling(pToMovesSibling);¤        }¤		  }¤¤      // now otiToMove is free¤      /// --- relink otiToMove¤      otiIter = pParent->GetChild();¤      // target now is first item in group¤      if(otiIter == otiTarget)¤      {¤        pParent->SetChild(otiToMove);¤        otiToMove->SetSibling(otiTarget);¤      }¤      else¤      {¤        ¤        while(otiIter != NULL)¤        {¤          Prev = otiIter;¤          otiIter = otiIter->GetSibling();¤          if(otiIter == otiTarget)¤          {¤            Prev->SetSibling(otiToMove);¤            otiToMove->SetSibling(otiTarget);¤            break;¤          }¤        }¤      }¤      UpdatedItems();¤	  } // parent != NULL¤  }¤}¤long COptionTree::GetColumn()¤{¤	return m_ptOrigin.x;¤}¤¤void COptionTree::SetColumn(long lColumn,const bool bredraw)¤{¤	// Delclare variables¤	CRect rcClient;¤¤	// Get client rectnagle¤	GetClientRect(rcClient);¤	¤	// Make column¤	if (rcClient.IsRectEmpty())¤	{¤		lColumn = __max(OT_EXPANDCOLUMN, lColumn);¤	}¤	else¤	{¤		lColumn = __min(__max(OT_EXPANDCOLUMN, lColumn), rcClient.Width() - OT_EXPANDCOLUMN);¤	}¤¤	m_ptOrigin.x = lColumn;¤¤	// Force redraw¤	Invalidate();¤¤	// Update window¤	UpdateWindow();¤}¤¤void COptionTree::ClearVisibleList()¤{¤	// Clear pointer¤	m_otiVisibleList = NULL;¤}¤¤COptionTreeItem * COptionTree::InsertItem(COptionTreeItem *otiItem, COptionTreeItem *otiParent)¤{¤	// Declare variables¤	COptionTreeItem* otiNext;¤	¤	// Make sure item is not NULL¤	if (otiItem == NULL)¤	{¤		return NULL;¤	}¤¤	// If parent is NULL, becomes root¤	if (otiParent == NULL)¤	{¤		otiParent = &m_otiRoot;¤	}¤¤	// Set child¤	if (otiParent->GetChild() == NULL)¤	{¤		otiParent->SetChild(otiItem);¤	}¤	else¤	{¤		// -- Add to end of the sibling list	¤		otiNext = otiParent->GetChild();¤		while (otiNext->GetSibling() != NULL)¤		{¤			otiNext = otiNext->GetSibling();¤		}¤		otiNext->SetSibling(otiItem);¤	}¤¤	// Auto generate a default ID¤	m_uLastUID++;¤	otiItem->SetCtrlID(m_uLastUID);¤¤  ++_iItemCount;¤¤	// Set item information¤	otiItem->SetParent(otiParent);¤	otiItem->SetOptionsOwner(this);¤¤	// Send notification to user¤	SendNotify(OT_NOTIFY_INSERTITEM, otiItem);¤¤	// Updated items¤	UpdatedItems();¤¤	// Force redraw¤	// hb Invalidate();¤¤	// Update window¤	// hb UpdateWindow();¤¤	return otiItem;¤}¤¤BOOL COptionTree::IsDisableInput()¤{¤	// Return variable¤	return m_bDisableInput;¤}¤¤COptionTreeItem * COptionTree::FocusLast()¤{¤	// Declare variables¤	COptionTreeItem* otiNext;¤	COptionTreeItem* otiChange;¤¤	// Set pointers¤	otiChange = m_otiFocus;¤	otiNext = m_otiVisibleList;¤¤	// Set focu on last¤	if (otiNext != NULL)¤	{¤		while (otiNext->GetNextVisible())¤		{¤			otiNext = otiNext->GetNextVisible();¤		}¤		SetFocusedItem(otiNext);¤¤		if (m_otiFocus != NULL)¤		{¤			SelectItems(NULL, FALSE);¤			m_otiFocus->Select();¤		}¤	}¤¤	// Send notify to user¤	if (otiChange != m_otiFocus)¤	{¤		SendNotify(OT_NOTIFY_SELCHANGE, m_otiFocus);¤	}¤¤	return otiNext;¤}¤¤COptionTreeItem * COptionTree::FocusPrev()¤{¤	// Declare variables¤	COptionTreeItem* otiNext;¤	COptionTreeItem* otiChange;¤¤	// Set pointers¤	otiChange = m_otiFocus;¤¤	// Get the last visible item¤	if (m_otiFocus == NULL)¤	{¤		otiNext = m_otiVisibleList;¤		while (otiNext && otiNext->GetNextVisible())¤		{¤			otiNext = otiNext->GetNextVisible();¤		}¤	}¤	else¤	{¤		otiNext = m_otiVisibleList;¤		while (otiNext && otiNext->GetNextVisible() != m_otiFocus)¤		{¤			otiNext = otiNext->GetNextVisible();¤		}¤	}¤¤	// Set focus items¤	if (otiNext)¤	{¤		SetFocusedItem(otiNext);¤	}¤	¤	// Select items¤	if (m_otiFocus != NULL)¤	{¤		SelectItems(NULL, FALSE);¤		m_otiFocus->Select();¤	}¤¤	// Send notify to user¤	if (otiChange != m_otiFocus)¤	{¤		SendNotify(OT_NOTIFY_SELCHANGE, m_otiFocus);¤	}¤¤	return otiNext;¤}¤¤COptionTreeItem * COptionTree::FocusNext()¤{¤	// Declare variables¤	COptionTreeItem* otiNext;¤	COptionTreeItem* otiChange;¤¤	// Set pointers¤	otiChange = m_otiFocus;¤¤	// Get the next item¤	if (m_otiFocus == NULL)¤	{¤		otiNext = m_otiVisibleList;¤	}¤	else ¤	{¤		if (m_otiFocus->GetNextVisible())¤		{¤			otiNext = m_otiFocus->GetNextVisible();¤		}¤		else¤		{¤			otiNext = NULL;¤		}¤	}¤¤	// Set focus item¤	if (otiNext)¤	{¤		SetFocusedItem(otiNext);¤	}¤¤	// Select items¤	if (m_otiFocus != NULL)¤	{¤		SelectItems(NULL, FALSE);¤		m_otiFocus->Select();¤	}¤	¤	// Send notify to user¤	if (otiChange!=m_otiFocus)¤	{¤		SendNotify(OT_NOTIFY_SELCHANGE, m_otiFocus);¤	}¤¤	return otiNext;¤}¤¤void COptionTree::OnEnable(BOOL bEnable) ¤{	¤	// Force redraw¤	Invalidate();¤¤	// Update window¤	UpdateWindow();¤	¤	CWnd::OnEnable(bEnable);	¤}¤¤void COptionTree::OnSysColorChange() ¤{	¤	// Reload global resources¤	InitGlobalResources();¤¤	// Force redraw¤	Invalidate();¤¤	// Update window¤	UpdateWindow();¤	¤	CWnd::OnSysColorChange();	¤}¤¤BOOL COptionTree::IsSingleSelection()¤{¤	// Only single select¤	return TRUE;¤}¤¤DWORD COptionTree::GetTreeOptions()¤{¤	// Return options¤	return m_dwTreeOptions;¤}¤¤BOOL COptionTree::GetDefInfoTextNoSel()¤{¤	// Return option¤	return (m_dwTreeOptions & OT_OPTIONS_DEFINFOTEXTNOSEL) ? TRUE : FALSE;¤}¤¤void COptionTree::SetDefInfoTextNoSel(BOOL bNoSelect)¤{¤	// Declare variables¤	CRect rcClient;¤¤	// Get client rectangle¤	GetClientRect(rcClient);¤¤	// Set option¤	if (bNoSelect == TRUE)¤	{¤		m_dwTreeOptions |= OT_OPTIONS_DEFINFOTEXTNOSEL;¤	}¤	else¤	{¤		m_dwTreeOptions &= ~OT_OPTIONS_DEFINFOTEXTNOSEL;¤	}¤¤	// Resize all windows¤	ResizeAllWindows(rcClient.Width(), rcClient.Height());¤¤	// Force redraw¤	Invalidate();¤¤	// Update window¤	UpdateWindow();¤}¤¤BOOL COptionTree::GetNotify()¤{¤	// Return option¤	return (m_dwTreeOptions & OT_OPTIONS_NOTIFY) ? TRUE : FALSE;¤}¤¤void COptionTree::SetNotify(BOOL bNotify, CWnd *pWnd,¤                            const UINT btclickmessage,¤                            const bool bsend)¤{¤  _Message = btclickmessage;¤  _bsend   = bsend;¤¤	// Declare variables¤	CRect rcClient;¤¤	// Get client rectangle¤	GetClientRect(rcClient);¤¤	// Get window¤	m_pNotify = pWnd;¤¤	// Set option¤	if (bNotify == TRUE)¤	{¤		m_dwTreeOptions |= OT_OPTIONS_NOTIFY;¤	}¤	else¤	{¤		m_dwTreeOptions &= ~OT_OPTIONS_NOTIFY;¤	}¤¤	// Resize all windows¤	ResizeAllWindows(rcClient.Width(), rcClient.Height());¤¤	// Force redraw¤	Invalidate();¤¤	// Update window¤	UpdateWindow();¤}¤¤BOOL COptionTree::OnEraseBkgnd(CDC* pDC) ¤{¤	// Ha, Ha¤	return FALSE;¤}¤¤void COptionTree::OnPaint() ¤{¤	// Declare varaibles¤	PAINTSTRUCT ps;¤¤	// Begine paint¤	BeginPaint(&ps);¤¤	// Redraw list window¤	if (::IsWindow(m_otlList.GetSafeHwnd()))¤	{¤		m_otlList.Invalidate();¤		m_otlList.UpdateWindow();¤	}¤¤	// Redraw information window¤	if (::IsWindow(m_otInfo.GetSafeHwnd()))¤	{¤		m_otInfo.Invalidate();¤		m_otInfo.UpdateWindow();¤	}¤	if (::IsWindow(m_otInfoInfo.GetSafeHwnd()))¤	{¤		m_otInfoInfo.Invalidate();¤		m_otInfoInfo.UpdateWindow();¤	}¤¤	// End paint¤	EndPaint(&ps);¤}¤¤void COptionTree::ClearAllLabelRect()¤{¤	// Enumerate items¤	EnumItems(&m_otiRoot, EnumClearAllLabelRect, NULL);¤}¤¤¤BOOL COptionTree::GetShadeExpandColumn()¤{¤	// Return option¤	return (m_dwTreeOptions & OT_OPTIONS_SHADEEXPANDCOLUMN) ? TRUE : FALSE;¤}¤¤void COptionTree::ShadeExpandColumn(BOOL bShade)¤{¤	// Declare variables¤	CRect rcClient;¤¤	// Get client rectangle¤	GetClientRect(rcClient);¤¤	// Set option¤	if (bShade == TRUE)¤	{¤		m_dwTreeOptions |= OT_OPTIONS_SHADEEXPANDCOLUMN;¤	}¤	else¤	{¤		m_dwTreeOptions &= ~OT_OPTIONS_SHADEEXPANDCOLUMN;¤	}¤¤	// Resize all windows¤	ResizeAllWindows(rcClient.Width(), rcClient.Height());¤¤	// Force redraw¤	Invalidate();¤¤	// Update window¤	UpdateWindow();¤}¤¤BOOL COptionTree::GetShadeRootItems()¤{¤	// Return option¤	return (m_dwTreeOptions & OT_OPTIONS_SHADEROOTITEMS) ? TRUE : FALSE;¤}¤¤void COptionTree::ShadeRootItems(BOOL bShade)¤{¤	// Declare variables¤	CRect rcClient;¤¤	// Get client rectangle¤	GetClientRect(rcClient);¤¤	// Set option¤	if (bShade == TRUE)¤	{¤		m_dwTreeOptions |= OT_OPTIONS_SHADEROOTITEMS;¤	}¤	else¤	{¤		m_dwTreeOptions &= ~OT_OPTIONS_SHADEROOTITEMS;¤	}¤¤	// Resize all windows¤	ResizeAllWindows(rcClient.Width(), rcClient.Height());¤¤	// Force redraw¤	Invalidate();¤¤	// Update window¤	UpdateWindow();¤}¤¤void COptionTree::ExpandAllItems()¤{¤	// Declare variables¤	COptionTreeItem *otiItem;¤¤	// If item is NULL, refresh from root¤	otiItem = &m_otiRoot;¤¤	// Enum refresh all¤	EnumItems(otiItem, EnumExpandAll);¤¤	// Update items¤	UpdatedItems();¤}¤¤void COptionTree::OnSizing(UINT fwSide, LPRECT pRect) ¤{¤	// Resize windows¤	ResizeAllWindows(pRect->right, pRect->bottom);¤¤	CWnd::OnSizing(fwSide, pRect);¤}¤¤void COptionTree::Expand(COptionTreeItem *pItem, BOOL bExpand)¤{¤	// Enum move all¤	EnumItems(pItem, EnumNotifyExpand, (LPARAM) bExpand);¤}¤¤void COptionTree::OnSetFocus(CWnd* pOldWnd) ¤{¤	// Invalidate¤	Invalidate();¤¤	// Update Window¤	UpdateWindow();¤¤	CWnd::OnSetFocus(pOldWnd);	¤}¤¤void COptionTree::OnKillFocus(CWnd* pNewWnd) ¤{¤	CWnd::OnKillFocus(pNewWnd);	¤}¤/////////////////////////////////////¤// @mfunc override of the Invalidate function. ¤// If the Window is locked during lengthly insert/delete operations we don't invalidate.¤// If the Window is unlocked we redraw.¤// @rvalue void | not used¤//¤void COptionTree::Invalidate(BOOL bErase)¤{¤   if (UpdateLocked()==FALSE)¤   {¤      CWnd::Invalidate(bErase); //call super function¤   }¤   return;¤}¤/////////////////////////////////////¤// @mfunc override of the UpdateWindow function. ¤// If the Window is locked during lengthly insert/delete operations we don't update.¤// If the Window is unlocked we redraw.¤// @rvalue void | not used¤//¤void COptionTree::UpdateWindow()¤{¤   if (UpdateLocked()==FALSE)¤   {¤      CWnd::UpdateWindow(); //call super function¤   }¤   return;¤}¤// hb - added a function to register a class called "OptionTree"¤int COptionTree::Register (CWinApp *app, UINT id)¤{¤    WNDCLASS wndcls;¤¤    memset(&wndcls, 0, sizeof(WNDCLASS));   // start with NULL¤                                            // defaults¤¤    wndcls.style = CS_DBLCLKS | CS_HREDRAW | CS_VREDRAW;¤¤    //you can specify your own window procedure¤    wndcls.lpfnWndProc = ::DefWindowProc; ¤    wndcls.hInstance = AfxGetInstanceHandle();¤    wndcls.hIcon = app->LoadIcon(id); // or load a different icon¤    wndcls.hCursor = app->LoadCursor( IDC_ARROW );¤    wndcls.hbrBackground = (HBRUSH) (COLOR_WINDOW + 1);¤    wndcls.lpszMenuName = NULL;¤¤    // Specify your own class name for using FindWindow later¤    wndcls.lpszClassName = _T("OptionTree");¤¤    // Register the new class and exit if it fails¤    if(!AfxRegisterClass(&wndcls))¤    {¤       TRACE("Class Registration Failed\n");¤       return FALSE;¤    }¤    return TRUE;¤}¤bool COptionTree::ButtonClicked(COptionTreeItem *pItem,const DWORD code)¤{¤  if( code != _D_BT_NONE &&¤      m_pNotify && ¤      ::IsWindow(m_pNotify->GetSafeHwnd()) == TRUE &&¤      pItem != NULL)¤  {¤    if(_bsend == true)¤      m_pNotify->SendMessage(_Message,(WPARAM) code,(LPARAM) pItem);¤    else¤      m_pNotify->PostMessage(_Message,(WPARAM) code,(LPARAM) pItem);¤  }¤  return true;¤}¤void COptionTree::SetAutoSizeColumn(const bool x) ¤{¤  _bAutoSizeColumn = x;¤  if(::IsWindow(this->GetSafeHwnd()) == TRUE && _bAutoSizeColumn == true) ¤  {¤    this->PostMessage(OT_AUTSIZECOLUM,0,0);¤  }¤}¤BOOL COptionTree::PreTranslateMessage(MSG* pMsg)¤{¤  if(pMsg->message == OT_AUTSIZECOLUM)¤  {¤    return this->UpdateColumnWidth((int) pMsg->wParam,true);¤  }¤  return CWnd::PreTranslateMessage(pMsg);¤}¤BOOL COptionTree::UpdateColumnWidth(const int width,const bool block)¤{¤  if(UpdateLocked()==TRUE || _bAutoSizeColumn == false)¤    return TRUE;¤#ifdef _DEBUG¤  CPreciseTimer pt;¤#endif¤¤  int newwidth = 0;¤  if(width < 0)¤    newwidth = m_rcLargestLabel.right;¤  else¤    newwidth = width;¤  newwidth = (newwidth > (OT_EXPANDCOLUMN + OT_RESIZEBUFFER) ? newwidth : OT_EXPANDCOLUMN + OT_RESIZEBUFFER);¤  ¤  if(block == true)¤    this->LockAll();¤  this->SetColumn(newwidth);¤  this->UpdateMoveAllItems();¤  if(block == true)¤    this->UnLockAll();¤#ifdef _DEBUG¤  pt.StopTimer();¤  CString sInfoText("");¤  m_otInfoInfo.GetWindowText(sInfoText);¤  sInfoText += "\r\n";¤  sInfoText += "COptionTree::UpdateColumnWidth: ";¤  sInfoText += pt.GetDurationString();¤  m_otInfoInfo.SetWindowText(sInfoText);¤  m_otInfoInfo.SetSel(sInfoText.GetLength()-1,sInfoText.GetLength()-1,TRUE);¤#endif¤  return TRUE;¤}¤//#UC END# *470AFBFE0213*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFBFE0213_DESTR_BODY*"
		    value      	(value Text 
|//#UC START# *470AFBFE0213_DESTR_BODY*¤	DeleteObject(_PenShadow);¤	// Delete all items¤	DeleteAllItems();¤¤	// Delete global resources for all COptionTree¤	// -- Decrease instance number¤	m_uInstanceCount--;¤	// -- Delete global resources¤	if (!m_uInstanceCount)¤	{¤		DeleteGlobalResources();¤	}¤	//#UC END# *470AFBFE0213_DESTR_BODY*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470AFBFE0213_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470AFBFE0213_CUSTOM_INCLUDES*¤// Added Headers¤#include "shared/WinGUI/OptionTreeControls/OptionTreeDef.h"¤#include "shared/WinGUI/OptionTreeControls/OptionTreeRes.h"¤¤#include "shared/WinGUI/OptionTreeControls/COptionTreeInfo.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTreeItem.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTreeItemCheckBox.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTreeItemColor.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTreeItemComboBox.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTreeItemDate.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTreeItemEdit.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTreeItemEditButton.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTreeItemFile.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTreeItemFile.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTreeItemFont.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTreeItemHyperLink.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTreeItemImage.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTreeItemIPAddress.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTreeItemListBox.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTreeItemRadio.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTreeItemSpinner.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTreeItemStatic.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTreeList.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTree3StateCheckBox.h"¤¤#define _D_REFRESH_LABEL 1¤#define _D_REFRESH_ATTRIBUTE 2¤¤namespace WinGUI {¤	class COptionTree;¤	class COptionTreeItem;¤}¤typedef BOOL (CALLBACK* ENUM_OPTIONITEMPROC)(WinGUI::COptionTree* otProp, WinGUI::COptionTreeItem* otiItem, LPARAM lParam);¤// CPropTree WM_NOTIFY notification structure¤typedef struct _NMOPTIONTREE¤{¤    NMHDR hDR;¤	WinGUI::COptionTreeItem* otiItem;¤} NMOPTIONTREE, *PNMOPTIONTREE, FAR *LPNMOPTIONTREE;¤¤¤// Global Functions¤// -- Draw dark horizontal line¤static void _DrawDarkHLine(HDC hdc, long lX, long lY, long lWidth)¤{¤	CRect rcPaint(lX, lY, lX + lWidth, lY + 1);¤	int nOldBack = SetBkColor(hdc, GetSysColor(COLOR_BTNSHADOW));¤¤	// GDI calls driver directly¤	ExtTextOut(hdc, 0, 0, ETO_OPAQUE, rcPaint, 0, 0, 0); ¤¤	// Restore¤	SetBkColor(hdc, nOldBack);	¤}¤// -- Draw dark vertical line¤static void _DrawDarkVLine(HDC hdc, long lX, long lY, long lHeight)¤{¤	CRect rcPaint(lX, lY, lX + 1, lY + lHeight);¤	int nOldBack = SetBkColor(hdc, GetSysColor(COLOR_BTNSHADOW));¤¤	// GDI calls driver directly¤	ExtTextOut(hdc, 0, 0, ETO_OPAQUE, rcPaint, 0, 0, 0); ¤¤	// Restore¤	SetBkColor(hdc, nOldBack);	¤}¤// -- Draw lite horizontal line¤static void _DrawLiteHLine(HDC hdc, long lX, long lY, long lWidth)¤{¤	HBRUSH hbr = (HBRUSH )CDC::GetHalftoneBrush()->GetSafeHandle();¤	SetBrushOrgEx(hdc, 0, 0, NULL);¤	UnrealizeObject(hbr);¤	HBRUSH holdbr = (HBRUSH )SelectObject(hdc, hbr);¤	COLORREF rcOldColor = SetTextColor(hdc, GetSysColor(COLOR_BTNSHADOW));¤	int nOldBack = SetBkColor(hdc, GetSysColor(COLOR_WINDOW));¤	PatBlt(hdc, lX, lY, lWidth, 1, PATCOPY);¤	SelectObject(hdc, holdbr);¤	SetTextColor(hdc, rcOldColor);¤	SetBkColor(hdc, nOldBack);¤}¤// -- Draw lite vertical line¤static void _DrawLiteVLine(HDC hdc, long lX, long lY, long lHeight)¤{¤	HBRUSH hbr = (HBRUSH )CDC::GetHalftoneBrush()->GetSafeHandle();¤	SetBrushOrgEx(hdc, 0, 0, NULL);¤	UnrealizeObject(hbr);¤	HBRUSH holdbr = (HBRUSH )SelectObject(hdc, hbr);¤	COLORREF rcOldColor = SetTextColor(hdc, GetSysColor(COLOR_BTNSHADOW));¤	int nOldBack = SetBkColor(hdc, GetSysColor(COLOR_WINDOW));¤	PatBlt(hdc, lX, lY, 1, lHeight, PATCOPY);¤	SelectObject(hdc, holdbr);¤	SetTextColor(hdc, rcOldColor);¤	SetBkColor(hdc, nOldBack);¤}¤// -- Draw selection rectangle¤static void _DrawSelectRect(HDC hdc, long lX, long lY, long lWidth)¤{¤	HBRUSH hbr = (HBRUSH )CDC::GetHalftoneBrush()->GetSafeHandle();¤	SetBrushOrgEx(hdc, 0, 0, NULL);¤	UnrealizeObject(hbr);¤	HBRUSH holdbr = (HBRUSH )SelectObject(hdc, hbr);¤	COLORREF rcOldColor = SetTextColor(hdc, GetSysColor(COLOR_3DHILIGHT));¤	int nOldBack = SetBkColor(hdc, GetSysColor(COLOR_3DFACE));¤	PatBlt(hdc, lX, lY, lWidth, 1, PATCOPY);¤	SelectObject(hdc, holdbr);¤	SetTextColor(hdc, rcOldColor);¤	SetBkColor(hdc, nOldBack);¤}¤¤/* -- Draw splitter bar selected¤static void _DrawXorBar(HDC hdc, int x1, int y1, int nWidth, int nHeight)¤{¤	// Declare variables¤	static WORD _dotPatternBmp[8] = { 0x00aa, 0x0055, 0x00aa, 0x0055, 0x00aa, 0x0055, 0x00aa, 0x0055};¤	HBITMAP hbm;¤	HBRUSH  hbr, hbrushOld;¤¤	// Create a monochrome checkered pattern¤	hbm = CreateBitmap(8, 8, 1, 1, _dotPatternBmp);¤¤	hbr = CreatePatternBrush(hbm);¤    ¤	SetBrushOrgEx(hdc, x1, y1, 0);¤	hbrushOld = (HBRUSH)SelectObject(hdc, hbr);¤    ¤	// Draw the checkered rectangle to the screen¤	PatBlt(hdc, x1, y1, nWidth, nHeight, PATINVERT);¤    ¤	SelectObject(hdc, hbrushOld);¤    ¤	DeleteObject(hbr);¤	DeleteObject(hbm);¤}¤*/¤// -- Make short string¤static LPCTSTR _MakeShortString(CDC* pDC, LPCTSTR lpszLong, int nWidth, int nOffset)¤{¤	// Declare variables¤	const _TCHAR szThreeDots[]=_T("...");¤	int nStringLen = lstrlen(lpszLong);¤	static _TCHAR szShort[MAX_PATH];¤	int nAddLen;¤¤	// Validate length¤	if(nStringLen == 0 || pDC->GetTextExtent(lpszLong,nStringLen).cx + nOffset <= nWidth)¤	{¤		return lpszLong;¤	}¤¤	// Shorten¤	lstrcpy(szShort, lpszLong);¤	nAddLen = pDC->GetTextExtent(szThreeDots,sizeof(szThreeDots)).cx;¤	for(int i = nStringLen - 1; i > 0; i--)¤	{¤		szShort[i] = 0;¤		if(pDC->GetTextExtent(szShort, i).cx + nOffset + nAddLen <= nWidth)¤		{¤			break;¤		}¤	}¤	lstrcat(szShort, szThreeDots);¤¤	return szShort;¤}¤//#UC END# *470AFBFE0213_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470AFBFE0213*"
		    value      	(value Text 
|//#UC START# *470AFBFE0213*¤friend class COptionTreeItem;¤friend class COptionTreeList;¤¤public:¤	COptionTree();¤	BOOL Create(DWORD dwStyle, RECT rcRect, CWnd* pParentWnd, DWORD dwTreeOptions, UINT nID);¤	int CreateChilds(); //hb - added this function to better handle subclassing¤	static int Register(CWinApp *app, UINT id); //hb - added this function to register a window¤¤// Attributes¤public:¤¤// Operations¤public:¤¤// Overrides¤	// ClassWizard generated virtual function overrides¤	//{{AFX_VIRTUAL(COptionTree)¤	//}}AFX_VIRTUAL¤¤// Implementation¤public:¤	void Expand(COptionTreeItem *pItem, BOOL bExpand);¤	void ExpandAllItems();¤	void ShadeRootItems(BOOL bShade);¤	BOOL GetShadeRootItems();¤	void ShadeExpandColumn(BOOL bShade);¤	BOOL GetShadeExpandColumn();¤	void ClearAllLabelRect();¤	const CRect& GetLargestVisibleLabel(const bool bcalc=true);¤	// with is called from items draw routine.¤	void UpdateLargestVisibleLabel(const int& newright=OT_EXPANDCOLUMN + OT_RESIZEBUFFER);¤	void ResetLargestVisibleLabel(void); ¤	void SetNotify(BOOL bNotify, ¤                 CWnd *pWnd,¤                 const UINT btclickmessage=0, // message sent or post on button clicked (to catch in pretrans of pWnd)¤                 const bool besend=false);    // message to send or to post ¤	BOOL GetNotify();¤¤	void SetDefInfoTextNoSel(BOOL bNoSelect);¤	BOOL GetDefInfoTextNoSel();¤	DWORD GetTreeOptions();¤	BOOL IsSingleSelection();¤	COptionTreeItem * FocusNext();¤	COptionTreeItem * FocusPrev();¤	COptionTreeItem * FocusLast();¤	BOOL IsDisableInput();¤	COptionTreeItem * InsertItem(COptionTreeItem* otiItem, COptionTreeItem* otiParent = NULL);¤	void ClearVisibleList();¤	// ce for drag and drop¤	void MoveItem(COptionTreeItem* otiToMove,COptionTreeItem* otiTarget);¤	void SetColumn(long lColumn,const bool bredraw=true);¤	long GetColumn();¤	void DeleteItem(COptionTreeItem* otiItem);¤	void DeleteAllItems();¤	// delete of all update and updating tree on if window handle avaiable¤	void SaveClearItems();¤	void SetOriginOffset(long lOffset);¤	BOOL IsItemVisible(COptionTreeItem* otiItem);¤	void UpdatedItems();¤	///¤	/// This function enumerates OnRefresh of each item.¤	///¤	void RefreshItems(COptionTreeItem* otiItem = NULL);¤	///¤	/// This function invalidates itemrect in tree and performs an update.¤	///¤	void RefreshItem(COptionTreeItem* otiItem,const int type=_D_REFRESH_LABEL | _D_REFRESH_ATTRIBUTE);¤	void UpdateMoveAllItems();¤	void EnsureVisible(COptionTreeItem* otiItem);¤	void SetFocusedItem(COptionTreeItem* otiItem);¤	COptionTreeItem * FocusFirst();¤	void SelectItems(COptionTreeItem* otiItem, BOOL bSelect);¤	void DisableInput(BOOL bDisable = TRUE);¤	COptionTreeItem * FindItem(const POINT& pt);¤	COptionTreeItem * FindItem(UINT uCtrlID);¤	COptionTreeItem * FindItem(const CString& Text,const DWORD flag=OT_FI_LABEL,COptionTreeItem * pOffset=NULL);¤	long HitTest(const POINT& pt);¤	void AddToVisibleList(COptionTreeItem* otiItem);¤	COptionTreeItem * GetVisibleList();¤	COptionTreeItem * GetFocusedItem();¤	COptionTreeItem * GetRootItem();¤	BOOL GetShowInfoWindow();¤	void ShowInfoWindow(BOOL bShow);¤	static CFont* GetNormalFont();¤	static CFont* GetBoldFont();¤	const POINT& GetOrigin();¤	CWnd* GetCtrlParent();¤	LRESULT SendNotify(UINT uNotifyCode, COptionTreeItem* otiItem = NULL);¤	// hb - add functions to suppress multiple updates during insert/delete of many items at once¤	virtual void LockUpdate();¤	virtual void UnlockUpdate();¤	inline BOOL UpdateLocked(void) const {return (m_bLockUpdate > 0 ? TRUE : FALSE);}¤¤	virtual void LockNotification();¤	virtual void UnlocNotification();¤	inline BOOL NotificationLocked(void) const {return (m_bLockNotification > 0 ? TRUE : FALSE);}¤¤	inline void LockAll(void)¤	{¤	 this->LockUpdate();¤	 this->LockNotification();¤	}¤	inline void UnLockAll(void)¤	{¤	 this->UnlocNotification();¤	 this->UnlockUpdate();¤	}¤	void SetAutoSizeColumn(const bool x=false);¤	inline bool GetAutoSizeColumn(void) const {return _bAutoSizeColumn;}¤¤	virtual void Invalidate(BOOL bErase=TRUE);¤	virtual void UpdateWindow();¤¤	/// Process the button click.¤	/// Out: true: message post or sent.¤	bool ButtonClicked(COptionTreeItem *pItem,const DWORD code);¤¤	inline COptionTreeList& GetList(void) {return m_otlList;}¤¤	inline long GetItemCount(void) const {return _iItemCount;}¤¤	inline HPEN GetPenShadow(void) {return _PenShadow;}¤¤	void  ClearInfoTitle(void);¤	void  ClearInfoText(void);¤	///¤	/// Update position of column separator line.¤	/// In: width: new width of column;default: use largest labelrect.right¤	BOOL UpdateColumnWidth(const int width=-1,const bool block=true);¤¤	inline void SetAttributeOffset(const int offset=OT_SPACE)¤	{¤	_AttributeOffset = offset;¤	}¤	inline int GetAttributeOffset(void) const¤	{¤	return _AttributeOffset;¤	}¤¤	inline bool HasFindFlag(const DWORD flag) const¤	{¤	return ((m_dwFindFlag & flag) > 0 ? true : false);¤	}¤¤	inline void SetFindOffset(COptionTreeItem* pFindItemOffset = NULL)¤	{¤	m_pFindItemOffset = pFindItemOffset;¤	}¤	inline COptionTreeItem* GetFindOffset(void) const ¤	{¤	return m_pFindItemOffset;¤	}¤	inline COptionTreeItem* GetEnumOffset(void) const ¤	{¤	return m_pEnumOffset;¤	}¤¤public:¤	virtual BOOL PreTranslateMessage(MSG* pMsg);¤¤	// Generated message map functions¤protected:¤	BOOL EnumItems(COptionTreeItem* otiItem, ENUM_OPTIONITEMPROC enumProc, LPARAM lParam = 0L);¤	static BOOL CALLBACK EnumFindItemStr(COptionTree* otProp, COptionTreeItem* otiItem, LPARAM lParam);¤	static BOOL CALLBACK EnumFindItem(COptionTree* otProp, COptionTreeItem* otiItem, LPARAM lParam);¤	static BOOL CALLBACK EnumMoveAll(COptionTree* otProp, COptionTreeItem* otiItem, LPARAM lParam);¤	static BOOL CALLBACK EnumNotifyExpand(COptionTree* otProp, COptionTreeItem* otiItem, LPARAM lParam);	¤	static BOOL CALLBACK EnumRefreshAll(COptionTree* otProp, COptionTreeItem* otiItem, LPARAM lParam);¤	static BOOL CALLBACK EnumExpandAll(COptionTree* otProp, COptionTreeItem* otiItem, LPARAM lParam);¤	static BOOL CALLBACK EnumSelectAll(COptionTree* otProp, COptionTreeItem* otiItem, LPARAM lParam);¤	static BOOL CALLBACK EnumGetLargestVisibleLabelRect(COptionTree* otProp, COptionTreeItem* otiItem, LPARAM lParam);¤	static BOOL CALLBACK EnumClearAllLabelRect(COptionTree* otProp, COptionTreeItem* otiItem, LPARAM lParam);¤	void DeleteGlobalResources();¤	void InitGlobalResources();¤	void ResizeAllWindows(int cx, int cy);¤	void Delete(COptionTreeItem* otiItem);¤	//{{AFX_MSG(COptionTree)¤	afx_msg int OnCreate(LPCREATESTRUCT lpCreateStruct);¤	afx_msg void OnSize(UINT nType, int cx, int cy);¤	afx_msg void OnEnable(BOOL bEnable);¤	afx_msg void OnSysColorChange();¤	afx_msg BOOL OnEraseBkgnd(CDC* pDC);¤	afx_msg void OnPaint();¤	afx_msg void OnSizing(UINT fwSide, LPRECT pRect);¤	afx_msg void OnSetFocus(CWnd* pOldWnd);¤	afx_msg void OnKillFocus(CWnd* pNewWnd);¤	//}}AFX_MSG¤¤	inline void SetEnumOffset(COptionTreeItem* pFindItemOffset = NULL)¤	{¤	m_pEnumOffset = pFindItemOffset;¤	}¤¤  // Variables¤protected:¤	static CFont* m_fNormalFont;¤	static CFont* m_fBoldFont;¤	static UINT	m_uInstanceCount;¤	static COptionTreeItem *m_otiFound;¤	DWORD m_dwTreeOptions;¤	COptionTreeInfo m_otInfo;     // shows label¤	COptionTreeInfo m_otInfoInfo; // shows info text¤	COptionTreeItem	m_otiRoot;¤	COptionTreeItem* m_otiVisibleList;¤	COptionTreeItem* m_otiFocus;¤	COptionTreeItem* m_pFindItemOffset;¤	COptionTreeItem* m_pEnumOffset;¤	DWORD m_dwFindFlag;¤	CPoint m_ptOrigin;¤	COptionTreeList m_otlList;¤	BOOL m_bDisableInput;¤	UINT m_uLastUID;¤	static CRect m_rcLargestLabel;¤	CWnd *m_pNotify;¤	BOOL  m_bLockUpdate; // hb - prevent multiple window updates¤	BOOL  m_bLockNotification; // hb - prevent multiple window updates¤	long  _iItemCount;¤¤protected:¤	///¤	/// Frequently used gdi objects¤	///¤	HPEN    _PenShadow;    // COLOR_BTNSHADOW  ¤¤	UINT    _Message;¤	bool    _bsend;¤	// if an item has been expanded, autosize column to fit with larges vis. item¤	bool    _bAutoSizeColumn;¤	int     _AttributeOffset;¤¤//#UC END# *470AFBFE0213*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"WikiPageID (wiki)"
		    value      	(value Text 
|Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTree|470AFBFE0213
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFBFE0213_MESSAGE_MAP*"
		    value      	(value Text 
|//#UC START# *470AFBFE0213_MESSAGE_MAP*¤	ON_WM_CREATE()¤	ON_WM_SIZE()¤	ON_WM_ENABLE()¤	ON_WM_SYSCOLORCHANGE()¤	ON_WM_ERASEBKGND()¤	ON_WM_PAINT()¤	ON_WM_SIZING()¤	ON_WM_SETFOCUS()¤	ON_WM_KILLFOCUS()¤	//#UC END# *470AFBFE0213_MESSAGE_MAP*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (wiki)"
		    value      	"wiki")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (cpp)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (h)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ElementCreationOrder"
		    value      	"16659814057"))
	    quid       	"470AFBFE0213"
	    documentation 	"дерево-контролов"
	    stereotype 	"GuiControl"
	    language   	"MDA Generator")
	(object Class "COptionTreeItem"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"AbstarctOperation"
		    value      	"regular")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsNative"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need assign op"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need copy ctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need ref count"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need unsorted less"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"debug log"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"local supervisor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need UC"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need dctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need objcounter"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"no base class"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"non virtual base"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"singleton"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (cpp)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeItem.cpp")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (h)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeItem.h")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFC61008C_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470AFC61008C_CUSTOM_INCLUDES*¤#include "shared/Core/fix/win_afx.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTree.h"¤//#UC END# *470AFC61008C_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFC61008C*"
		    value      	(value Text 
|//#UC START# *470AFC61008C*¤//////////////////////////////////////////////////////////////////////¤// Construction/Destruction¤//////////////////////////////////////////////////////////////////////¤CBrush COptionTreeItem::__BrushBTAdd;¤CBrush COptionTreeItem::__BrushBTDelete;¤CBrush COptionTreeItem::__BrushBTDefault;¤CBrush COptionTreeItem::__BrushBTUser;¤CBrush COptionTreeItem::__BrushBTAddHL;¤CBrush COptionTreeItem::__BrushBTDeleteHL;¤CBrush COptionTreeItem::__BrushBTDefaultHL;¤CBrush COptionTreeItem::__BrushBTUserHL;¤CBrush COptionTreeItem::__BrushFrame;¤CBrush COptionTreeItem::__BrushFrameHL;¤unsigned long COptionTreeItem::__InstanceCount = 0;¤¤COptionTreeItem::COptionTreeItem()¤{¤  ++__InstanceCount;¤	// Initialize variables¤	m_strInfoText = _T("");¤	m_strLabel = _T("");¤	m_uControlID = 0;¤	m_otiParent = NULL;¤	m_otiSibling = NULL;¤	m_otiChild = NULL;¤	m_otiNextVisible = NULL;¤	m_rcExpand = CRect(0, 0, 0, 0);¤	m_rcAttribute = CRect(0, 0, 0, 0);¤	m_rcLabelRect = CRect(0, 0, 0, 0);¤  m_rcButtons = CRect(0, 0, 0, 0);¤	m_otOption = NULL;¤	m_bCommitOnce = FALSE;¤	m_lParam = NULL;¤	m_lItemHeight = OT_DEFHEIGHT;¤	m_bSelected = FALSE;¤	m_bExpanded = FALSE;¤	m_bActivated = FALSE;¤	m_bReadOnly = FALSE;¤	m_nItemType = OT_ITEM_STATIC;¤	m_bDrawMultiline = FALSE;¤	m_crBackground = GetSysColor(COLOR_WINDOW);¤	m_crLabelText = GetSysColor(COLOR_BTNTEXT);¤	m_crRootBackground = GetSysColor(COLOR_BTNFACE);¤	m_crLabelBackground = GetSysColor(COLOR_WINDOW);¤	m_crText = GetSysColor(COLOR_BTNTEXT);¤  _bAllowChildDrag=false;¤  _changed = -1;¤  m_dwOptions=0;¤  _bVisible = true;¤¤  _text = "";¤  _btqueue =_D_BT_NONE;¤}¤¤long  COptionTreeItem::CalcHeight(void)¤{¤  long defheight = this->GetHeight();¤¤  long newheight=defheight;¤  // this means 2 buttons rows¤  if(HasButton(_D_BT_USER) == TRUE && HasButton(_D_BT_PLUS | _D_BT_MINUS | _D_BT_DEFAULT) == TRUE)¤    newheight = 2 *_D_TREEBT_HEIGHT + 8;¤  if(defheight < newheight)¤    return newheight;¤  return defheight;¤}¤void COptionTreeItem::DeleteButton(const int code)¤{¤   _btqueue &= ~code;¤  int newheight=CalcHeight();¤  if(newheight != m_lItemHeight)¤  {¤    m_lItemHeight = newheight;¤    m_otOption->RefreshItems(this);¤  }¤  ¤}¤void COptionTreeItem::AddButton(const int code,const CString& text,const COLORREF bk,const COLORREF fg)¤{¤  _btqueue |= code;¤  _text = text;¤  int newheight=CalcHeight();¤  if(newheight != m_lItemHeight)¤  {¤    m_lItemHeight = newheight;¤    m_otOption->RefreshItems(this);¤  }¤}¤CRect COptionTreeItem::GetButtonRect(const CRect& totalrec,const int btcode) const¤{¤  int offset=0;¤¤¤  if(btcode & _D_BT_PLUS)¤  {¤    CRect rec(totalrec);¤    rec.top = rec.top + 3;¤    rec.bottom = rec.top + _D_TREEBT_HEIGHT;¤    rec.right -= 2;¤    rec.left = rec.right - _D_TREEBT_WIDTH;¤    return rec;¤  }¤  else if(btcode & _D_BT_MINUS)¤  {¤    if(_btqueue & _D_BT_PLUS)¤      offset += (2+_D_TREEBT_WIDTH);¤¤    CRect rec(totalrec);¤    rec.top = rec.top + 3;¤    rec.bottom = rec.top + _D_TREEBT_HEIGHT;¤    rec.right -= (2 + offset);¤    rec.left = rec.right - _D_TREEBT_WIDTH;¤    return rec;¤  }¤  else if(btcode & _D_BT_DEFAULT)¤  {¤    if(_btqueue & _D_BT_PLUS)¤      offset += (2+_D_TREEBT_WIDTH);¤    if(_btqueue & _D_BT_MINUS)¤      offset += (2+_D_TREEBT_WIDTH);¤¤    CRect rec(totalrec);¤    rec.top = rec.top + 3;¤    rec.bottom = rec.top + _D_TREEBT_HEIGHT;¤    rec.right -= (2 + offset);¤    rec.left = rec.right - _D_TREEBT_WIDTH;¤    return rec;¤  }¤  else if(btcode & _D_BT_USER)¤  {¤    CRect rec(totalrec);¤  ¤    int fac=0;¤    if(HasButton(_D_BT_PLUS|_D_BT_MINUS|_D_BT_DEFAULT) == TRUE)¤      rec.top = rec.top + 3 + _D_TREEBT_HEIGHT + 2;¤    else¤      rec.top = rec.top + 3;¤    rec.bottom = rec.top + _D_TREEBT_HEIGHT;¤¤    rec.right -= 2;¤    rec.left = rec.right - _D_TREEBT_WIDTH_USER;¤    return rec;¤  }¤  return CRect(0,0,0,0);¤}¤CBrush* COptionTreeItem::GetBrushBTAdd(const bool bhighlight)¤{¤  if(bhighlight == false)¤  {¤    if(__BrushBTAdd.GetSafeHandle() == NULL)¤    {¤      __BrushBTAdd.CreateSolidBrush(_CLR_CHECKED);¤    }¤    return &__BrushBTAdd;¤  }¤  else¤  {¤    if(__BrushBTAddHL.GetSafeHandle() == NULL)¤    {¤      __BrushBTAddHL.CreateSolidBrush(_CLR_CHECKEDHL);¤    }¤    return &__BrushBTAddHL;¤  }¤}¤CBrush* COptionTreeItem::GetBrushBTDelete(const bool bhighlight)¤{¤  if(bhighlight == false)¤  {¤    if(__BrushBTDelete.GetSafeHandle() == NULL)¤    {¤      __BrushBTDelete.CreateSolidBrush(_CLR_UNCHECKED);¤    }¤    return &__BrushBTDelete;¤  }¤  else¤  {¤    if(__BrushBTDeleteHL.GetSafeHandle() == NULL)¤    {¤      __BrushBTDeleteHL.CreateSolidBrush(_CLR_UNCHECKEDHL);¤    }¤    return &__BrushBTDeleteHL;¤  }¤}¤CBrush* COptionTreeItem::GetBrushBTDefault(const bool bhighlight)¤{¤  if(bhighlight == false)¤  {¤    if(__BrushBTDefault.GetSafeHandle() == NULL)¤    {¤      __BrushBTDefault.CreateSolidBrush(_CLR_DEFAULT);¤    }¤    return &__BrushBTDefault;¤  }¤  else¤  {¤    if(__BrushBTDefaultHL.GetSafeHandle() == NULL)¤    {¤      __BrushBTDefaultHL.CreateSolidBrush(_CLR_DEFAULTHL);¤    }¤    return &__BrushBTDefaultHL;¤  }¤  ¤}¤CBrush* COptionTreeItem::GetBrushBTBTUser(const bool bhighlight)¤{¤  if(bhighlight == false)¤  {¤    if(__BrushBTUser.GetSafeHandle() == NULL)¤    {¤      __BrushBTUser.CreateSolidBrush(_CLR_USER);¤    }¤    return &__BrushBTUser;¤  }¤  else¤  {¤    if(__BrushBTUserHL.GetSafeHandle() == NULL)¤    {¤      __BrushBTUserHL.CreateSolidBrush(_CLR_USERHL);¤    }¤    return &__BrushBTUserHL;¤  }¤}¤CBrush* COptionTreeItem::GetFrameBrush(const bool bhighlight)¤{¤  if(bhighlight == false)¤  {¤    if(__BrushFrame.GetSafeHandle() == NULL)¤    {¤      __BrushFrame.CreateSolidBrush(_CLR_BT_FRAME);¤    }¤    return &__BrushFrame;¤  }¤  else¤  {¤    if(__BrushFrameHL.GetSafeHandle() == NULL)¤    {¤      __BrushFrameHL.CreateSolidBrush(_CLR_BT_FRAME);¤    }¤    return &__BrushFrameHL;¤  }¤}¤¤CBrush* COptionTreeItem::GetBrushBkRoot(void)¤{¤  // brush not yet created¤  if(_BrushBkRoot.GetSafeHandle() == NULL)¤  {¤    _BrushBkRoot.CreateSolidBrush(m_crRootBackground);¤  }¤  return &_BrushBkRoot;¤}¤CBrush* COptionTreeItem::GetBrushBk(void)¤{¤  // brush not yet created¤  if(_BrushBk.GetSafeHandle() == NULL)¤  {¤    _BrushBk.CreateSolidBrush(m_crBackground);¤  }¤  return &_BrushBk;¤}¤CBrush* COptionTreeItem::GetBrushBkLabel(void)¤{¤  // brush not yet created¤  if(_BrushBkLabel.GetSafeHandle() == NULL)¤  {¤    _BrushBkLabel.CreateSolidBrush(m_crLabelBackground);¤  }¤  return &_BrushBkLabel;¤}¤void COptionTreeItem::SetInfoText(CString strText)¤{¤	// Set info text¤	m_strInfoText = strText;¤}¤¤CString COptionTreeItem::GetInfoText()¤{¤	// Return info text¤	return m_strInfoText;¤}¤¤void COptionTreeItem::SetLabelText(CString strLabel)¤{¤	// Set label¤	m_strLabel = strLabel;¤}¤¤CString COptionTreeItem::GetLabelText()¤{¤	// Return label¤	return m_strLabel;¤}¤¤void COptionTreeItem::SetCtrlID(UINT nID)¤{¤	// Set the ID¤	m_uControlID = nID;¤}¤¤UINT COptionTreeItem::GetCtrlID()¤{¤	// Return ID¤	return m_uControlID;¤}¤¤COptionTreeItem * COptionTreeItem::GetParent()¤{¤	// Return parent¤	return m_otiParent;¤}¤¤void COptionTreeItem::SetParent(COptionTreeItem *otiParent)¤{¤	// Set parent¤	m_otiParent = otiParent;¤}¤¤COptionTreeItem * COptionTreeItem::GetSibling()¤{¤	// Return sibling¤	return m_otiSibling;¤}¤¤void COptionTreeItem::SetSibling(COptionTreeItem *otiSibling)¤{¤	// Set sibling¤	m_otiSibling = otiSibling;¤}¤¤COptionTreeItem * COptionTreeItem::GetChild()¤{¤	// Return child¤	return m_otiChild;¤}¤¤void COptionTreeItem::SetChild(COptionTreeItem *otiChild)¤{¤	// Set child¤	m_otiChild = otiChild;¤}¤¤COptionTreeItem * COptionTreeItem::GetNextVisible()¤{¤	// Return next visible¤	return m_otiNextVisible;¤}¤¤void COptionTreeItem::SetNextVisible(COptionTreeItem *otiNetVisible)¤{¤	// Set child¤	m_otiNextVisible = otiNetVisible;¤}¤¤BOOL COptionTreeItem::IsExpanded()¤{¤	// Return value¤	return m_bExpanded;¤}¤¤BOOL COptionTreeItem::IsSelected()¤{¤	// Return value¤	return m_bSelected;¤}¤¤BOOL COptionTreeItem::IsReadOnly()¤{¤	// Return value¤	return m_bReadOnly;¤}¤¤BOOL COptionTreeItem::IsActivated()¤{¤	// Return value¤	return m_bActivated;¤}¤¤void COptionTreeItem::Select(BOOL bSelect)¤{¤	// Select¤	m_bSelected = bSelect;¤¤	// Send message¤	if (bSelect == FALSE)¤	{¤		OnDeSelect();¤	}¤	else¤	{¤		OnSelect();¤	}¤}¤¤void COptionTreeItem::Expand(BOOL bExpand)¤{¤	// Make sure not null¤	if (m_otOption == NULL)¤	{¤		return;¤	}¤¤	// Expand¤	m_bExpanded = bExpand;¤¤	// On expand¤	m_otOption->Expand(this, bExpand);¤}¤¤void COptionTreeItem::ReadOnly(BOOL bReadOnly)¤{¤	// Read Only¤	m_bReadOnly = bReadOnly;¤}¤¤BOOL COptionTreeItem::HitExpand(const POINT &pt)¤{¤	// Hit¤	return m_rcExpand.PtInRect(pt);¤}¤¤BOOL COptionTreeItem::IsRootLevel()¤{¤	// Make sure not null¤	if (m_otOption == NULL)¤	{¤		return FALSE;¤	}¤¤	// Return¤	return GetParent() == m_otOption->GetRootItem();¤}¤¤long COptionTreeItem::GetTotalHeight()¤{¤	// Declare variables¤	COptionTreeItem *otiItem=NULL;¤	long lHeight=GetHeight();¤¤	// Add up total height if expanded¤	if (IsExpanded() == TRUE)¤	{¤		// -- Go through all children¤		for (otiItem = GetChild(); otiItem != NULL; otiItem = otiItem->GetSibling())¤		{¤			lHeight += otiItem->GetTotalHeight();¤		}¤	}¤¤	return lHeight;¤}¤¤void COptionTreeItem::OnCommit()¤{¤	// Do nothing¤}¤¤void COptionTreeItem::OnRefresh()¤{¤// Do nothing¤}¤¤void COptionTreeItem::OnMove()¤{¤}¤¤void COptionTreeItem::SetOptionsOwner(COptionTree *otOption)¤{¤	// Save pointer¤	m_otOption = otOption;¤}¤¤long COptionTreeItem::DrawItem(CDC *pDC, const RECT &rcRect, long x, long y)¤{¤	// Make sure not null¤	if (m_otOption == NULL)¤	{¤		return FALSE;¤	}¤	// Declare variables¤	COptionTreeItem* otiNext;¤	CPoint ptPoint;¤	long lTotal, lCol, lHeight;¤	CRect rcDRC, rcIR, rcTemp, rcLabelRight, rcRegion;¤	HGDIOBJ hOld, hHighlight;¤	HRGN hRgn = NULL;¤	COLORREF crOld;¤	int nOldBack;¤	CString strShortLabel;¤	CRect rcBack;¤	CFont *pOldFont;¤¤	// Add TreeItem the list of visible items¤  // ce!¤	//m_otOption->AddToVisibleList(this);¤¤	// Store the item's location¤	m_ptLocation = CPoint(x, y);¤¤	// Store the items rectangle position¤	// -- Attribute¤	m_rcAttribute.SetRect(m_otOption->GetOrigin().x + ATTRIB_OFFSET, m_ptLocation.y, rcRect.right, m_ptLocation.y + GetHeight() - 1);¤	m_rcAttribute.OffsetRect(0, -m_otOption->GetOrigin().y);¤	// -- Background¤	rcBack.SetRect(m_otOption->GetOrigin().x, m_ptLocation.y, rcRect.right - 2, m_ptLocation.y + GetHeight() - 1);¤	rcBack.OffsetRect(0, -m_otOption->GetOrigin().y);¤¤	// Intialize temporary drawing variables¤	lTotal = GetHeight();¤  // draw only if visible¤  if(m_rcAttribute.bottom > 0 && m_rcAttribute.top < rcRect.bottom)¤  {¤    m_otOption->AddToVisibleList(this);¤    //this->OnShow(TRUE);¤	  // Convert item coordinates to screen coordinates¤	  ptPoint = m_ptLocation;¤	  ptPoint.y -= m_otOption->GetOrigin().y;¤	  lCol = m_otOption->GetOrigin().x;¤¤	  // See if root level¤	  if (IsRootLevel() == TRUE)¤	  {¤		  rcDRC.SetRect(ptPoint.x + OT_EXPANDCOLUMN, ptPoint.y, rcRect.right, ptPoint.y + lTotal);¤		  rcRegion.SetRect(ptPoint.x + OT_EXPANDCOLUMN, ptPoint.y, rcRect.right, ptPoint.y + lTotal);¤	  }¤	  else¤	  {¤		  rcDRC.SetRect(ptPoint.x + OT_EXPANDCOLUMN, ptPoint.y, lCol, ptPoint.y + lTotal);¤		  rcRegion.SetRect(OT_EXPANDCOLUMN, ptPoint.y, lCol, ptPoint.y + lTotal);¤	  }¤¤	  // Shade root levels¤	  if (IsRootLevel() == TRUE)¤	  {¤		  // -- Select brush¤		  if (m_otOption->GetShadeRootItems() == TRUE || m_otOption->IsWindowEnabled() == FALSE)¤		  {¤			  hOld = pDC->SelectObject(GetBrushBkRoot());¤		  }¤		  else¤		  {¤			  hOld = pDC->SelectObject(GetSysColorBrush(COLOR_WINDOW));¤		  }¤¤		  // -- Fill rectangle¤		  pDC->PatBlt(rcRect.left + OT_EXPANDCOLUMN, rcDRC.top, rcRect.right - rcRect.left + 1, rcDRC.Height(), PATCOPY);¤¤		  // -- Restore GDI objects¤		  pDC->SelectObject(hOld);¤  		¤	  }¤	  else¤	  {¤		  // -- Draw the item background¤		  pDC->FillRect(&rcBack, GetBrushBk());¤	  }¤	  // Calc and draw expanded box position¤	  if (GetChild())¤	  {¤		  // -- Calculate expand rectangle¤		  m_rcExpand.left = OT_EXPANDCOLUMN/2 - OT_EXPANDBOXHALF;¤		  m_rcExpand.top = m_ptLocation.y + ATTRIB_OFFSET;¤		  m_rcExpand.right = m_rcExpand.left + OT_EXPANDBOX - 1;¤		  m_rcExpand.bottom = m_rcExpand.top + OT_EXPANDBOX - 1;¤		  rcIR = m_rcExpand;¤		  rcIR.OffsetRect(0, -m_otOption->GetOrigin().y);¤¤		  // -- Draw expanded¤		  _DrawExpand(pDC->GetSafeHdc(), rcIR.left, rcIR.top, IsExpanded(), !IsRootLevel());¤	  }¤	  else¤	  {¤		  m_rcExpand.SetRectEmpty();¤	  }¤¤	  // Create a clipping region for the label¤	  if (IsRootLevel() == FALSE)¤	  {¤		  hRgn = CreateRectRgn(rcDRC.left, rcDRC.top, rcDRC.right, rcDRC.bottom);¤		  SelectClipRgn(pDC->GetSafeHdc(), hRgn);¤	  }¤¤	  // Calculate label position¤	  rcIR = rcDRC;¤	  rcIR.left += ATTRIB_OFFSET;¤¤	  // Draw the label background¤	  if (IsRootLevel() == FALSE)¤	  {¤		  rcBack = rcDRC;¤		  pDC->FillRect(&rcBack,GetBrushBkLabel());¤	  }¤¤	  // Draw the label¤    if (m_strLabel.IsEmpty() == FALSE)//IsStringEmpty(m_strLabel) == FALSE)¤	  {¤		  // -- Get the font¤		  if (IsRootLevel() == TRUE)¤		  {¤			  pOldFont = pDC->SelectObject(COptionTree::GetBoldFont());¤		  }¤		  else¤		  {¤			  pOldFont = pDC->SelectObject(COptionTree::GetNormalFont());¤		  }¤¤		  // -- Set text color and background mode¤		  crOld = pDC->SetTextColor(m_crLabelText);¤		  nOldBack = pDC->SetBkMode(TRANSPARENT);¤¤		  // -- Draw the text highlighted if selected¤		  if (IsSelected() == TRUE)¤		  {¤			  // -- -- Select th objects¤			  hOld = pDC->SelectObject(GetStockObject(NULL_PEN));¤			  hHighlight = pDC->SelectObject(GetSysColorBrush(COLOR_HIGHLIGHT));¤¤			  // -- -- Calculate highlighted rectangle¤			  rcTemp = rcDRC;¤			  rcTemp.left = OT_EXPANDCOLUMN;¤			  rcTemp.right += OT_COLRNG;¤¤			  // -- -- Draw rectangle¤			  pDC->Rectangle(&rcTemp);¤¤			  // -- -- Restore GDI objects¤			  pDC->SelectObject(hOld);¤			  pDC->SelectObject(hHighlight);¤¤			  // -- -- Set text color for highlighted¤			  pDC->SetTextColor(GetSysColor(COLOR_BTNHIGHLIGHT));¤		  }¤¤		  // -- Check if we need to draw the text as disabled¤		  if (m_otOption->IsWindowEnabled() == FALSE)¤		  {¤			  pDC->SetTextColor(GetSysColor(COLOR_GRAYTEXT));¤		  }¤¤		  // -- Draw text¤		  // -- -- Edit multiline¤		  if (GetDrawMultiline() == TRUE)¤		  {¤			  // -- -- -- Center rectangle¤			  rcLabelRight = rcIR;¤			  rcLabelRight.top += ATTRIB_OFFSET;¤¤			  // -- -- -- Shorten string¤        if(m_otOption->GetAutoSizeColumn() == false)¤			    strShortLabel = _MakeShortString(pDC, m_strLabel, rcLabelRight.Width(), 1);¤        else¤          strShortLabel = m_strLabel;¤¤			  // -- -- -- Draw text¤			  pDC->DrawText(strShortLabel, &rcLabelRight, DT_SINGLELINE | DT_TOP);¤			  pDC->DrawText(strShortLabel, &rcLabelRight, DT_SINGLELINE | DT_TOP | DT_CALCRECT);¤¤			  // -- -- -- Set label right¤			  SetLabelRect(rcLabelRight);¤		  }¤		  // -- Normal¤		  else¤		  {¤			  // -- -- -- Calculate rectangle¤			  rcLabelRight = rcIR;¤¤			  // -- -- -- Shorten string¤        if(m_otOption->GetAutoSizeColumn() == false)¤			    strShortLabel = _MakeShortString(pDC, m_strLabel, rcLabelRight.Width(), 1);¤        else¤          strShortLabel = m_strLabel;¤			  // -- -- -- Draw text¤			  pDC->DrawText(strShortLabel, &rcLabelRight, DT_SINGLELINE | DT_VCENTER);¤			  pDC->DrawText(strShortLabel, &rcLabelRight, DT_SINGLELINE | DT_VCENTER | DT_CALCRECT);¤¤			  // -- -- -- Set label right¤			  SetLabelRect(rcLabelRight);¤		  }¤      // calculate largest label based on non root-items only¤      if(this->IsRootLevel() == FALSE)¤        m_otOption->UpdateLargestVisibleLabel(rcLabelRight.right + this->GetTotalButtonWidth());¤		  // -- Restore GDI objects¤		  pDC->SetTextColor(crOld);¤		  pDC->SetBkMode(nOldBack);¤		  pDC->SelectObject(pOldFont);¤	  }¤¤	  // Remove clip region¤	  if (hRgn != NULL)¤	  {¤		  // -- Select clip region¤		  SelectClipRgn(pDC->GetSafeHdc(), NULL);¤¤		  // -- Delete region¤		  DeleteObject(hRgn);¤	  }¤¤	  // Draw horizontal sep¤	  if (IsRootLevel() == TRUE)¤	  {¤		  //  - OT_EXPANDCOLUMN + 1¤		  _DrawDarkHLine(pDC->GetSafeHdc(), OT_EXPANDCOLUMN, ptPoint.y + lTotal - 1, rcRect.right);¤		  _DrawDarkHLine(pDC->GetSafeHdc(), OT_EXPANDCOLUMN, ptPoint.y - 1, rcRect.right);¤	  }¤	  else¤	  {¤		  _DrawDarkHLine(pDC->GetSafeHdc(), OT_EXPANDCOLUMN, ptPoint.y + lTotal - 1, rcRect.right);¤	  }¤¤	  // Draw vertical sep¤	  _DrawDarkVLine(pDC->GetSafeHdc(), OT_EXPANDCOLUMN, rcRect.top, rcRect.bottom);¤¤	  // Draw separators¤	  if (IsRootLevel() == FALSE)¤	  {¤		  _DrawDarkVLine(pDC->GetSafeHdc(), lCol, rcDRC.top, rcDRC.Height()); ¤	  }¤¤	  // Draw attribute¤	  if (!IsRootLevel())¤	  {¤		  // -- Create clip region¤		  hRgn = CreateRectRgn(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.right, m_rcAttribute.bottom);¤		  SelectClipRgn(pDC->GetSafeHdc(), hRgn);¤  		¤		  // -- Draw attribute¤		  DrawAttribute(pDC, m_rcAttribute);¤¤		  // -- Select clip region¤		  SelectClipRgn(pDC->GetSafeHdc(), NULL);¤¤		  // -- Delete object¤		  DeleteObject(hRgn);¤	  }¤¤    // draw buttons¤    ¤    this->DrawButtons(pDC,rcBack);¤    this->OnShow(TRUE);¤    _bVisible = true;¤  }¤  // if item rect above origin, but last status was visible, hide it.¤  else if(m_rcAttribute.bottom <= 0)¤  {¤    if(_bVisible == true)¤    {¤      this->OnShow(FALSE);¤		  for (otiNext = GetChild(); otiNext != NULL; otiNext = otiNext->GetSibling())¤		  {¤			  // hide child¤			  otiNext->OnShow(FALSE);¤		  }¤      _bVisible = false;¤    }¤  }¤  // if below bottom, this and childs cannot be visible¤  else if(m_rcAttribute.top >= rcRect.bottom)¤  {¤    this->OnShow(FALSE);¤		for (otiNext = GetChild(); otiNext != NULL; otiNext = otiNext->GetSibling())¤		{¤			// hide child¤			otiNext->OnShow(FALSE);¤		}¤    _bVisible = false;¤    return lTotal;¤  }¤	// Draw children¤	if (GetChild() != NULL && IsExpanded() == TRUE)¤	{¤		// -- Add to Y¤		y += lTotal;¤¤		for (otiNext = GetChild(); otiNext != NULL; otiNext = otiNext->GetSibling())¤		{¤			// -- -- Draw child¤			lHeight = otiNext->DrawItem(pDC, rcRect, x + (IsRootLevel() ? 0 : OT_PNINDENT), y);¤			¤			// -- -- Add to total¤			lTotal += lHeight;¤¤			// -- -- Add to Y¤			y += lHeight;¤		}¤	}¤  //m_rcButtons = rcBack;¤  //this->MoveButtons(rcBack);¤¤	return lTotal;¤}¤void COptionTreeItem::DrawButtons(CDC *pDC, const CRect &rcRect,const int code,const bool bhighlight)¤{¤  COLORREF crOld = pDC->SetTextColor(_CLR_DEFAULT_FG);¤  int nOldBack = pDC->SetBkMode(TRANSPARENT);¤  m_rcButtons = rcRect;¤  CFont* pOldFont = pDC->SelectObject(COptionTree::GetNormalFont());¤  if(_btqueue & _D_BT_PLUS && (code == _D_BT_ALL || code == _D_BT_PLUS))¤  {¤    this->DrawButton("+",pDC,GetBrushBTAdd(bhighlight),GetButtonRect(m_rcButtons,_D_BT_PLUS),bhighlight);¤  }¤  if(_btqueue & _D_BT_MINUS && (code == _D_BT_ALL || code == _D_BT_MINUS))¤  {¤    this->DrawButton("-",pDC,GetBrushBTDelete(bhighlight),GetButtonRect(m_rcButtons,_D_BT_MINUS),bhighlight);¤  }¤  if(_btqueue & _D_BT_DEFAULT && (code == _D_BT_ALL || code == _D_BT_DEFAULT))¤  {¤    this->DrawButton("D",pDC,GetBrushBTDefault(bhighlight),GetButtonRect(m_rcButtons,_D_BT_DEFAULT),bhighlight);¤  }¤  if(_btqueue & _D_BT_USER && (code == _D_BT_ALL || code == _D_BT_USER))¤  {¤    this->DrawButton(_text,pDC,GetBrushBTBTUser(bhighlight),GetButtonRect(m_rcButtons,_D_BT_USER),bhighlight);¤  }¤  pDC->SetTextColor(crOld);¤  pDC->SetBkMode(nOldBack);¤  pDC->SelectObject(pOldFont);¤}¤void COptionTreeItem::DrawButton(const CString& text,CDC *pDC,CBrush* pBrush,CRect &btRect,const bool bhighlight)¤{¤  if(pDC && pBrush)¤  {¤    CBrush* BrushFame = this->GetFrameBrush(bhighlight);¤    pDC->FrameRect(&btRect,pBrush);¤    //btRect.DeflateRect(1,1);¤    pDC->FillRect(&btRect,pBrush);¤		pDC->DrawText(text, &btRect, DT_SINGLELINE | DT_VCENTER | DT_CENTER);¤		pDC->DrawText(text, &btRect, DT_SINGLELINE | DT_VCENTER | DT_CENTER | DT_CALCRECT);¤  }¤}¤¤const POINT& COptionTreeItem::GetLocation()¤{¤	return m_ptLocation;¤}¤DWORD COptionTreeItem::Point2ButtonCode(const CPoint& pt)¤{¤  if(m_otOption == NULL || _btqueue == _D_BT_NONE)¤    return _D_BT_NONE;¤  // transform the y-coordinate¤  CPoint transpt(pt.x,pt.y + m_otOption->GetOrigin().y);¤¤  CRect brec;¤  brec = GetButtonRect(m_rcButtons,_D_BT_PLUS);¤  brec.OffsetRect(0,m_otOption->GetOrigin().y);¤  // check for add bt clicked¤  if(brec.PtInRect(transpt) == TRUE)¤  {¤    if(HasButton(_D_BT_PLUS) == TRUE)¤      return _D_BT_PLUS;¤    if(HasButton(_D_BT_MINUS) == TRUE)¤      return _D_BT_MINUS;¤    if(HasButton(_D_BT_DEFAULT) == TRUE)¤      return _D_BT_DEFAULT;¤    if(HasButton(_D_BT_USER) == TRUE)¤    return _D_BT_USER;¤  }¤¤  // check for delete bt clicked¤  brec = GetButtonRect(m_rcButtons,_D_BT_MINUS);¤  brec.OffsetRect(0,m_otOption->GetOrigin().y);¤  if(brec.PtInRect(transpt) == TRUE)¤  {¤    if(HasButton(_D_BT_MINUS) == TRUE)¤      return _D_BT_MINUS;¤    if(HasButton(_D_BT_DEFAULT) == TRUE)¤      return _D_BT_DEFAULT;¤    if(HasButton(_D_BT_USER) == TRUE)¤    return _D_BT_USER;¤  }¤¤  // check for default bt clicked¤  brec = GetButtonRect(m_rcButtons,_D_BT_DEFAULT);¤  brec.OffsetRect(0,m_otOption->GetOrigin().y);¤  if(brec.PtInRect(transpt) == TRUE)¤  {¤    if(HasButton(_D_BT_DEFAULT) == TRUE)¤      return _D_BT_DEFAULT;¤    if(HasButton(_D_BT_USER) == TRUE)¤    return _D_BT_USER;¤  }¤¤  // check for user bt clicked¤  brec = GetButtonRect(m_rcButtons,_D_BT_USER);¤  brec.OffsetRect(0,m_otOption->GetOrigin().y);¤  if(brec.PtInRect(transpt) == TRUE)¤  {¤    if(HasButton(_D_BT_USER) == TRUE)¤    return _D_BT_USER;¤  }¤  return _D_BT_NONE;¤}¤BOOL COptionTreeItem::HighlightFromPoint(const CPoint& pt)¤{¤  int hitcount=0;¤  if(m_otOption == NULL || _btqueue == _D_BT_NONE)¤    return FALSE;¤¤  CDC *pDC = this->m_otOption->m_otlList.GetDC();¤  if(pDC == NULL)¤    return FALSE;¤¤  // transform the y-coordinate¤  CPoint transpt(pt.x,pt.y + m_otOption->GetOrigin().y);¤¤  CRect brec;¤  if(HasButton(_D_BT_PLUS) == TRUE)¤  {¤    brec = GetButtonRect(m_rcButtons,_D_BT_PLUS);¤    brec.OffsetRect(0,m_otOption->GetOrigin().y);¤    // check for add bt move over¤    if(brec.PtInRect(transpt) == TRUE)¤    {¤      DrawButtons(pDC,m_rcButtons,_D_BT_PLUS,true);¤      ++hitcount;¤    }¤    else¤      DrawButtons(pDC,m_rcButtons,_D_BT_PLUS,false);¤  }¤  // check for delete bt move over¤  if(HasButton(_D_BT_MINUS) == TRUE)¤  {¤    brec = GetButtonRect(m_rcButtons,_D_BT_MINUS);¤    brec.OffsetRect(0,m_otOption->GetOrigin().y);¤    if(hitcount == 0 && brec.PtInRect(transpt) == TRUE)¤    {¤      DrawButtons(pDC,m_rcButtons,_D_BT_MINUS,true);¤      ++hitcount;¤    }¤    else¤      DrawButtons(pDC,m_rcButtons,_D_BT_MINUS,false);¤  }¤  // check for default bt move over¤  if(HasButton(_D_BT_DEFAULT) == TRUE)¤  {¤    brec = GetButtonRect(m_rcButtons,_D_BT_DEFAULT);¤    brec.OffsetRect(0,m_otOption->GetOrigin().y);¤    if(hitcount == 0 && brec.PtInRect(transpt) == TRUE)¤    {¤      DrawButtons(pDC,m_rcButtons,_D_BT_DEFAULT,true);¤      ++hitcount;¤    }¤    else¤      DrawButtons(pDC,m_rcButtons,_D_BT_DEFAULT,false);¤  }¤  // check for user bt move over¤  if(HasButton(_D_BT_USER) == TRUE)¤  {¤    brec = GetButtonRect(m_rcButtons,_D_BT_USER);¤    brec.OffsetRect(0,m_otOption->GetOrigin().y);¤    if(hitcount == 0 && brec.PtInRect(transpt) == TRUE)¤    {¤      DrawButtons(pDC,m_rcButtons,_D_BT_USER,true);¤      ++hitcount;¤    }¤    else¤      DrawButtons(pDC,m_rcButtons,_D_BT_USER,false);¤  }¤  return (hitcount > 0 ? TRUE : FALSE);¤}¤long COptionTreeItem::GetHeight()¤{¤	// Return item height¤	return m_lItemHeight;¤}¤¤void COptionTreeItem::_DrawExpand(HDC hdc, long lX, long lY, BOOL bExpand, BOOL bFill)¤{¤	// Declare variables¤	HPEN oPen;¤	HBRUSH oBrush;¤¤	// Create pens¤  oPen = (HPEN)SelectObject(hdc, m_otOption->GetPenShadow());¤	if (bFill == TRUE)¤	{¤		oBrush = (HBRUSH)SelectObject(hdc, GetSysColorBrush(COLOR_WINDOW));¤	}¤	else¤	{¤		oBrush = (HBRUSH)SelectObject(hdc, GetStockObject(NULL_BRUSH));¤	}¤¤	// Draw rectangle¤	Rectangle(hdc, lX, lY, lX + OT_EXPANDBOX, lY + OT_EXPANDBOX);¤	SelectObject(hdc, GetStockObject(BLACK_PEN));¤¤	// If not expanded¤	if (bExpand == FALSE)¤	{¤		MoveToEx(hdc, lX + OT_EXPANDBOXHALF, lY + 2, NULL);¤		LineTo(hdc, lX + OT_EXPANDBOXHALF, lY + OT_EXPANDBOX - 2);¤	}¤¤	// Draw lower line¤	MoveToEx(hdc, lX + 2, lY + OT_EXPANDBOXHALF, NULL);¤	LineTo(hdc, lX + OT_EXPANDBOX - 2, lY + OT_EXPANDBOXHALF);¤¤	// Restore GDI objects¤	SelectObject(hdc, oPen);¤	SelectObject(hdc, oBrush);¤}¤¤BOOL COptionTreeItem::IsStringEmpty(CString strString)¤{¤	// Declare variables¤	BOOL bEmpty = TRUE;¤¤	// Go through each character¤	for (int i = 0; i < strString.GetLength(); i++)¤	{¤		if (strString.GetAt(i) != ' ')¤		{¤			bEmpty = FALSE;¤			break;¤		}¤	}¤¤	return bEmpty;¤}¤¤void COptionTreeItem::DrawAttribute(CDC *pDC, const RECT &rcRect)¤{¤	// Do nothing here¤}¤¤void COptionTreeItem::Activate()¤{¤	// Set variables¤	m_bActivated = TRUE;¤	m_bCommitOnce = FALSE;¤¤	// Activate¤	OnActivate();¤}¤void COptionTreeItem::CommitChanges(const bool bnotify)¤{¤	// Set variables¤	m_bActivated = FALSE;¤¤	// Make sure valid¤	if (m_otOption == NULL || bnotify == false)¤	{¤		return;¤	}¤¤	// Commit¤	OnCommit();¤¤	// Send notify to user¤	m_otOption->SendNotify(OT_NOTIFY_ITEMCHANGED, this);¤  _changed = 0;¤¤	// Refresh items¤	m_otOption->RefreshItems(this);¤}¤void COptionTreeItem::OnActivate()¤{¤	// No attributes, do nothing¤}¤¤void COptionTreeItem::SetItemHeight(long lHeight)¤{¤	// Save height¤	m_lItemHeight = lHeight;¤}¤¤void COptionTreeItem::CleanDestroyWindow()¤{¤	// Do nothing here¤}¤¤void COptionTreeItem::OnDeSelect()¤{¤	// Do nothing here¤}¤¤void COptionTreeItem::OnSelect()¤{¤	// Do nothing here¤}¤¤void COptionTreeItem::OnExpand(BOOL bExpand)¤{¤	// Do nothing here¤}¤¤void COptionTreeItem::SetLabelRect(CRect rcLabel)¤{¤	// Save variable¤	m_rcLabelRect = rcLabel;¤}¤¤void COptionTreeItem::SetItemType(int nType)¤{¤	// Save type¤	m_nItemType = nType;¤}¤¤int COptionTreeItem::GetItemType()¤{¤	// Return¤	return m_nItemType;¤}¤¤void COptionTreeItem::SetDrawMultiline(BOOL bMultiline)¤{¤	m_bDrawMultiline = bMultiline;¤}¤¤BOOL COptionTreeItem::GetDrawMultiline()¤{¤	return m_bDrawMultiline;¤}¤¤void COptionTreeItem::SetBackgroundColor(COLORREF crColor)¤{¤	m_crBackground = crColor;¤  if(_BrushBk.GetSafeHandle() != NULL)¤    _BrushBk.DeleteObject();¤}¤¤COLORREF COptionTreeItem::GetBackgroundColor()¤{¤	return m_crBackground;¤}¤¤void COptionTreeItem::SetLabelTextColor(COLORREF crColor)¤{¤	m_crLabelText = crColor;¤}¤¤COLORREF COptionTreeItem::GetLabelTextColor()¤{¤	return m_crLabelText;¤}¤¤void COptionTreeItem::SetRootBackgroundColor(COLORREF crColor)¤{¤	m_crRootBackground = crColor;¤  if(_BrushBkRoot.GetSafeHandle() != NULL)¤    _BrushBkRoot.DeleteObject();¤}¤¤COLORREF COptionTreeItem::GetRootBackgroundColor()¤{¤	return m_crRootBackground;¤}¤¤void COptionTreeItem::SetLabelBackgroundColor(COLORREF crColor)¤{¤	m_crLabelBackground = crColor;¤  if(_BrushBkLabel.GetSafeHandle() != NULL)¤    _BrushBkLabel.DeleteObject();¤}¤¤COLORREF COptionTreeItem::GetLabelBackgroundColor()¤{¤	return m_crLabelBackground;¤}¤¤void COptionTreeItem::SetTextColor(COLORREF crColor)¤{¤	m_crText = crColor;¤}¤¤COLORREF COptionTreeItem::GetTextColor()¤{¤	return m_crText;¤}¤void COptionTreeItem::SetChanged(const int changed)¤{¤ // _changed = (changed > 0 ? (_changed == -1 ? 0 : 1) : 0);¤ _changed = (changed > 0 ?  _changed+1 : 0);¤}¤BOOL COptionTreeItem::GetOption(DWORD dwOption)¤{¤	// Return option¤	return (m_dwOptions & dwOption) ? TRUE : FALSE;¤}¤BOOL COptionTreeItem::HasButton(const DWORD btcode) const¤{¤	// Return option¤	return (_btqueue & btcode) ? TRUE : FALSE;¤}¤int COptionTreeItem::GetTotalButtonWidth(void) const¤{¤  if(_btqueue != _D_BT_NONE)¤  {¤    if(_btqueue & _D_BT_USER)¤      return _D_TREEBT_WIDTH_USER;¤    int count=0;¤    if(_btqueue & _D_BT_PLUS)¤      ++count;¤    if(_btqueue & _D_BT_MINUS)¤      ++count;¤    if(_btqueue & _D_BT_DEFAULT)¤      ++count;¤    return (count*(_D_TREEBT_WIDTH+2));¤  }¤  return 0;¤}¤void COptionTreeItem::SetOption(DWORD dwOption, BOOL bSet)¤{¤	// Set option¤	if (bSet == TRUE)¤	{¤		m_dwOptions |= dwOption;¤	}¤	else¤	{¤		m_dwOptions &= ~dwOption;¤	}¤}¤BOOL COptionTreeItem::IsVisible(void) const¤{¤ // return (_bVisible == true) ? TRUE : FALSE;¤  if(this->m_rcAttribute.bottom < 0 ||¤     this->m_rcAttribute.top > this->m_otOption->GetList().GetCurrentClientRect().bottom)¤     return FALSE;¤  return TRUE;¤¤}¤¤¤//#UC END# *470AFC61008C*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFC61008C_DESTR_BODY*"
		    value      	(value Text 
|//#UC START# *470AFC61008C_DESTR_BODY*¤	this->DeleteButton(_D_BT_ALL);¤	if(_BrushBkRoot.GetSafeHandle() != NULL) {¤		_BrushBkRoot.DeleteObject();¤	}¤	if(_BrushBk.GetSafeHandle() != NULL) {¤		_BrushBk.DeleteObject();¤	}¤	if(_BrushBkLabel.GetSafeHandle() != NULL) {¤		_BrushBkLabel.DeleteObject();¤	}¤	--__InstanceCount;¤	// delete the static brushs¤	if(__InstanceCount == 0) {¤		if(__BrushBTAdd.GetSafeHandle() != NULL) {¤			__BrushBTAdd.DeleteObject();¤		}¤		if(__BrushBTDelete.GetSafeHandle() != NULL) {¤			__BrushBTDelete.DeleteObject();¤		}¤		if(__BrushBTDefault.GetSafeHandle() != NULL) {¤			__BrushBTDefault.DeleteObject();¤		}¤		if(__BrushBTUser.GetSafeHandle() != NULL) {¤			__BrushBTUser.DeleteObject();¤		}¤¤		if(__BrushBTAddHL.GetSafeHandle() != NULL) {¤			__BrushBTAddHL.DeleteObject();¤		}¤¤		if(__BrushBTDeleteHL.GetSafeHandle() != NULL) {¤			__BrushBTDeleteHL.DeleteObject();¤		}¤¤		if(__BrushBTDefaultHL.GetSafeHandle() != NULL) {¤			__BrushBTDefaultHL.DeleteObject();¤		}¤		¤		if(__BrushBTUserHL.GetSafeHandle() != NULL) {¤			__BrushBTUserHL.DeleteObject();¤		}¤¤		if(__BrushFrame.GetSafeHandle() != NULL) {¤			__BrushFrame.DeleteObject();¤		}¤	}¤	//#UC END# *470AFC61008C_DESTR_BODY*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470AFC61008C_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470AFC61008C_CUSTOM_INCLUDES*¤#include <hash_map>¤¤#include "shared/WinGUI/OptionTreeControls/OptionTreeDef.h"¤#include "shared/WinGUI/OptionTreeControls/OptionTreeRes.h"¤#include "shared/WinGUI/OptionTreeControls/CEditMask.h"¤¤#define _CLR_CHECKED RGB(0,160,0)¤#define _CLR_UNCHECKED RGB(160,0,0)¤#define _CLR_DEFAULT RGB(34,34,54)¤#define _CLR_USER RGB(10,10,120)¤¤#define _CLR_CHECKEDHL RGB(0,190,0)¤#define _CLR_UNCHECKEDHL RGB(190,0,0)¤#define _CLR_DEFAULTHL RGB(64,64,84)¤#define _CLR_USERHL RGB(40,40,150)¤¤#define _CLR_BT_FRAME RGB(205,205,205)¤#define _CLR_BT_FRAMEHL RGB(235,235,235)¤¤#define _CLR_DEFAULT_FG RGB(255,255,255)¤¤#define _CLR_DISABLED_BK RGB(100,100,100)¤#define _CLR_DISABLED_FG RGB(205,205,205)¤¤¤// button height/width¤#define _D_TREEBT_HEIGHT 14¤#define _D_TREEBT_WIDTH 14¤#define _D_TREEBT_WIDTH_USER (3*(_D_TREEBT_WIDTH+2)-1)¤¤// button codes¤#define _D_BT_NONE 0¤#define _D_BT_PLUS 1¤#define _D_BT_MINUS 2¤#define _D_BT_DEFAULT 4¤#define _D_BT_USER 8¤#define _D_BT_ALL (_D_BT_PLUS | _D_BT_MINUS | _D_BT_DEFAULT | _D_BT_USER)¤#define ATTRIB_OFFSET (m_otOption != NULL ? m_otOption->GetAttributeOffset() : OT_SPACE)¤¤namespace WinGUI {¤	// Classes¤	class COptionTree;¤}¤//#UC END# *470AFC61008C_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470AFC61008C*"
		    value      	(value Text 
|//#UC START# *470AFC61008C*	¤public:¤	COLORREF GetTextColor();¤	void SetTextColor(COLORREF crColor);¤	COLORREF GetLabelBackgroundColor();¤	void SetLabelBackgroundColor(COLORREF crColor);¤	COLORREF GetRootBackgroundColor();¤	void SetRootBackgroundColor(COLORREF crColor);¤	COLORREF GetLabelTextColor();¤	void SetLabelTextColor(COLORREF crColor);¤	COLORREF GetBackgroundColor();¤	void SetBackgroundColor(COLORREF crColor);¤	BOOL GetDrawMultiline();¤	void SetDrawMultiline(BOOL bMultiline);¤	int GetItemType();¤	void SetItemType(int nType);¤	void SetLabelRect(CRect rcLabel);¤	inline CRect GetLabelRect() const {return m_rcLabelRect;}¤	inline CRect GetAttributeRect() const {return m_rcAttribute;}¤¤			long DrawItem(CDC* pDC, const RECT &rcRect, long x, long y);¤	virtual void DrawAttribute(CDC *pDC, const RECT &rcRect);¤	virtual void DrawButtons( CDC *pDC, ¤							const CRect &rcRect,¤							const int code=_D_BT_ALL,¤							const bool bHighlight=false);¤¤	virtual void OnActivate();¤	virtual void OnMove();¤	virtual void OnRefresh();¤	virtual void OnCommit();¤	virtual void CleanDestroyWindow();¤	virtual void OnDeSelect();¤	virtual void OnSelect();¤	virtual void OnExpand(BOOL bExpand);¤	// overwrite this,if your derived class also derived from CWnd.¤	virtual void OnShow(BOOL bShow){;}¤¤	inline bool GetAllowChildDrag(void) const {return _bAllowChildDrag;}¤	inline void SetAllowChildDrag(const bool x=false) {_bAllowChildDrag=x;}¤	inline void SetItemParam(const LPARAM x=0) {m_lParam = x;}¤	inline LPARAM GetItemParam(void) const {return m_lParam;}¤¤	/// === button helper functions ===¤	// functions to be extended if a new button is defined¤	void DeleteButton(const int code=_D_BT_ALL);¤	/// text,bk and fg are only used for user button¤	void AddButton( const int code=_D_BT_NONE,¤				  const CString& text="",¤				  const COLORREF bk=_CLR_USER,¤				  const COLORREF fg=_CLR_DEFAULT_FG);¤	CRect GetButtonRect(const CRect& rec,const int btcode=_D_BT_PLUS) const;¤¤	///¤	/// Maps a point to a button.¤	/// Out: _D_BT_NONE: point not located within button.¤	///¤	DWORD Point2ButtonCode(const CPoint& pt);¤¤	///¤	/// Highlights a button if point is located in it.¤	/// Out: FALSE: point outside of ANY button¤	///¤	BOOL  HighlightFromPoint(const CPoint& pt);¤¤	virtual void SetChanged(const int changed=1);¤	virtual BOOL GetOption(DWORD dwOption);¤	virtual void SetOption(DWORD dwOption, BOOL bSet);¤	BOOL  HasButton(const DWORD btcode) const;¤	virtual long  CalcHeight(void);¤		  int   GetTotalButtonWidth(void) const;¤	// ¤¤	/// === gdi helper functions ===¤	CBrush* GetBrushBk(void);¤	CBrush* GetBrushBkRoot(void);¤	CBrush* GetBrushBkLabel(void);¤¤	static CBrush* GetBrushBTAdd(const bool bhighlight=false);¤	static CBrush* GetBrushBTDelete(const bool bhighlight=false);¤	static CBrush* GetBrushBTDefault(const bool bhighlight=false);¤	static CBrush* GetBrushBTBTUser(const bool bhighlight=false);¤	static CBrush* GetFrameBrush(const bool bhighlight=false);¤¤	void SetItemHeight(long lHeight);¤	void CommitChanges(const bool bnotify=true);¤	void Activate();¤	long GetHeight();¤	void SetOptionsOwner(COptionTree* otOption);¤	long GetTotalHeight();¤	BOOL IsRootLevel();¤	BOOL HitExpand(const POINT& pt);¤	void ReadOnly(BOOL bReadOnly = TRUE);¤	void Expand(BOOL bExpand = TRUE);¤	void Select(BOOL bSelect = TRUE);¤	BOOL IsActivated();¤	BOOL IsReadOnly();¤	BOOL IsSelected();¤	BOOL IsExpanded();¤	void SetNextVisible(COptionTreeItem *otiNextVisible);¤	COptionTreeItem * GetNextVisible();¤	void SetChild(COptionTreeItem *otiChild);¤	COptionTreeItem * GetChild();¤	void SetSibling(COptionTreeItem *otiSibling);¤	COptionTreeItem * GetSibling();¤	void SetParent(COptionTreeItem *otiParent);¤	COptionTreeItem * GetParent();¤¤	UINT GetCtrlID();¤	void SetCtrlID(UINT nID);¤	CString GetLabelText();¤	virtual CString GetAttributeText(void){return "";}¤	void SetLabelText(CString strLabel);¤	CString GetInfoText();¤	void SetInfoText(CString strText);¤	const POINT& GetLocation();¤	COptionTreeItem();¤	BOOL IsVisible(void) const;¤¤protected:¤	void _DrawExpand(HDC hdc, long lX, long lY, BOOL bExpand, BOOL bFill);¤	void DrawButton(const CString& text,CDC *pDC,CBrush* pBrush,CRect &btRect,const bool bhighlight=false);¤	BOOL IsStringEmpty(CString strString);¤¤protected:¤	CString m_strLabel;¤	CString m_strInfoText;¤	UINT m_uControlID;¤	COptionTreeItem *m_otiParent;¤	COptionTreeItem *m_otiSibling;¤	COptionTreeItem *m_otiChild;¤	COptionTreeItem *m_otiNextVisible;¤	CRect m_rcExpand;¤	COptionTree *m_otOption;¤	CPoint m_ptLocation;¤	CRect m_rcAttribute;¤  CRect m_rcButtons;¤	BOOL m_bCommitOnce;¤	LPARAM m_lParam;¤	long m_lItemHeight;¤	CRect m_rcLabelRect;¤	BOOL m_bSelected;¤	BOOL m_bExpanded;¤	BOOL m_bActivated;¤	BOOL m_bReadOnly;¤	int m_nItemType;¤	BOOL m_bDrawMultiline;¤	COLORREF m_crBackground;¤	COLORREF m_crText;¤	COLORREF m_crRootBackground;¤	COLORREF m_crLabelText;¤	COLORREF m_crLabelBackground;¤  // child can be dragged¤  bool     _bAllowChildDrag;¤¤  //CStandardButton* _btHelp;¤  // flag for changed¤  int _changed;¤  DWORD m_dwOptions;¤¤  DWORD           _btqueue;¤  CBrush          _BrushBk;¤  CBrush          _BrushBkRoot;¤  CBrush          _BrushBkLabel;¤  ///¤  /// normal brushes¤  ///¤  static CBrush          __BrushBTAdd;¤  static CBrush          __BrushBTDelete;¤  static CBrush          __BrushBTDefault;¤  static CBrush          __BrushBTUser;¤  ¤  ///¤  /// highlight brushes¤  ///¤  static CBrush          __BrushBTAddHL;¤  static CBrush          __BrushBTDeleteHL;¤  static CBrush          __BrushBTDefaultHL;¤  static CBrush          __BrushBTUserHL;¤  /// frame brush¤  static CBrush          __BrushFrame;¤  static CBrush          __BrushFrameHL;¤¤  // button click notify params¤¤  // text of user button¤  CString _text;¤  // visible state on last DrawItem call.¤  bool  _bVisible;¤¤ private:¤	 static unsigned long __InstanceCount;¤//#UC END# *470AFC61008C*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"WikiPageID (wiki)"
		    value      	(value Text 
|Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItem|470AFC61008C
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (cpp)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (h)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (wiki)"
		    value      	"wiki")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ElementCreationOrder"
		    value      	"16663752626"))
	    quid       	"470AFC61008C"
	    documentation 	"элемент дерева контролов"
	    stereotype 	"SimpleClass"
	    language   	"MDA Generator")
	(object Class "OptionTreeDef"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"AbstarctOperation"
		    value      	"final")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsNative"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"is namespace"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"local helper"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need UC"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need impl-file"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need inline-file"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (h)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/OptionTreeDef.h")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470AFC94034B_USER_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470AFC94034B_USER_INCLUDES*¤// Option Definitions¤// -- Settings¤#define OT_INFOWINDOWHEIGHT					50						// Information window height¤#define OT_INFOWINDOWLABELHEIGHT			14						// Information window height¤#define OT_DEFHEIGHT						21						// Default height of an item¤#define OT_SPACE							2						// Default horizontal spacing hb - chenged 5 to 2 pixels¤#define OT_EXPANDBOX						11						// Size of the expand box¤#define OT_CHECKBOX							14						// Size of the check box¤#define OT_EXPANDCOLUMN						16						// Width of the expand column¤#define OT_PNINDENT							16						// Child level indent¤#define OT_COLRNG							5						// Width of splitter¤#define OT_EXPANDBOXHALF					(OT_EXPANDBOX / 2)		// Half of expand box¤#define OT_DEFLABEL							_T("No Item Selected")	// Default label for no selected item in the info window¤#define OT_DEFINFO							_T("Select an item to see its description.") // Default info for no selected item in the info window¤#define OT_RESIZEBUFFER						25						// Resize limit for right and left of client so bar doesn't become invisible¤#define OT_TREELIST_ID						30000					// ID of the list tree¤#define OT_TIMER							1000					// The ID for a timer¤// -- Item Settings¤#define OT_ITEM_STATIC						1¤#define OT_ITEM_CHECKBOX					2¤#define OT_ITEM_COLOR						3¤#define OT_ITEM_COMBOBOX					4¤#define OT_ITEM_DATE						5¤#define OT_ITEM_EDIT						6¤#define OT_ITEM_IMAGE						7¤#define OT_ITEM_RADIO						8¤#define OT_ITEM_SPINNER						9¤#define OT_ITEM_FONT						10¤#define OT_ITEM_FILE						11¤#define OT_ITEM_IPADDRESS					12¤#define OT_ITEM_LISTBOX						13¤#define OT_ITEM_3STATECHECKBOX				14¤// -- Tree Items¤#define OT_OPTIONS_SHOWINFOWINDOW			0x0001					// Show information window¤#define OT_OPTIONS_NOTIFY					0x0002					// Send parent notifications		¤#define OT_OPTIONS_DEFINFOTEXTNOSEL			0x0004					// Show default info text for no selected item, otherwise blank		¤#define OT_OPTIONS_SHADEEXPANDCOLUMN		0x0008					// Shade the expand column¤#define OT_OPTIONS_SHADEROOTITEMS			0x0010					// Shade the root items¤// -- Edit Items¤#define OT_EDIT_MLHEIGHT					75						// Multiline height¤// -- Combo Box Items¤#define OT_COMBO_DROPDOWNHEIGHT				100						// Drop down default height¤// --- Listbox Items ---¤#define OT_LISTBOX_HEIGHT					105						// Drop down default height¤// -- Check Box Items¤#define OT_CHECKBOX_DEFCHECKTEXT			_T("Checked")			// Default checked text¤#define OT_CHECKBOX_DEFUNCHECKTEXT			_T("UnChecked")			// Default un checked text¤#define OT_CHECKBOX_SIZE					14.2					// Size of the check box¤// -- Radio Items¤#define OT_RADIO_VSPACE						2						// Vertical space between radios¤#define OT_RADIO_SIZE						14.2					// Size of radio¤// -- Spinner Items¤#define OT_SPINNER_WIDTH					15						// Width of the spinner button¤// -- Color Items¤#define OT_COLOR_MORECOLORS					_T("More Colors...")	// Text for more colors¤#define OT_COLOR_AUTOMATIC					_T("Automatic")			// Text for more automatic¤#define OT_COLOR_SIZE						14.2					// The size for the color square¤#define OT_COLOR_NO_SELECTION				-1						// Color for no selection selected¤// -- Image Items¤#define OT_IMAGE_MARGIN						10						// The margin for the popup window¤#define OT_IMAGE_IMAGESPACE					10						// The space between images in the popup window¤#define OT_IMAGE_NOSELECTION				_T("No selection made.")// Text for no selection selected¤#define OT_IMAGE_MAXIMAGES					100						// The maximum number of images¤// -- File Items¤#define OT_FILE_NOSELECTION					_T("")// Text for no selection selected¤¤// NOTE: The following are highly important and should not need to be changed¤// --------------------------------------------------------------------------¤¤¤// Definitions¤// -- Hit test¤#define OT_HIT_LABEL						(WM_USER + 1000)		// Label¤#define OT_HIT_COLUMN						(WM_USER + 1001)		// Column¤#define OT_HIT_EXPAND						(WM_USER + 1002)		// Expand¤#define OT_HIT_ATTRIBUTE					(WM_USER + 1003)		// Attribute¤#define OT_HIT_CLIENT						(WM_USER + 1004)		// Client¤// --- internal messages¤#define OT_AUTSIZECOLUM						(WM_USER + 1005)		// autosize column¤// -- Notification to user¤#define OT_NOTIFY_FIRST						(0U-1100U)¤#define OT_NOTIFY_INSERTITEM				(OT_NOTIFY_FIRST - 1)	// Insert item¤#define OT_NOTIFY_DELETEITEM				(OT_NOTIFY_FIRST - 2)	// Delete item¤#define OT_NOTIFY_DELETEALLITEMS			(OT_NOTIFY_FIRST - 3)	// Delete all items¤#define OT_NOTIFY_ITEMCHANGED				(OT_NOTIFY_FIRST - 5)	// Item changed¤#define OT_NOTIFY_ITEMBUTTONCLICK			(OT_NOTIFY_FIRST - 6)	// Item button click¤#define OT_NOTIFY_SELCHANGE					(OT_NOTIFY_FIRST - 7)	// Selection changed¤#define OT_NOTIFY_ITEMEXPANDING				(OT_NOTIFY_FIRST - 8)	// Item expanding¤#define OT_NOTIFY_COLUMNCLICK				(OT_NOTIFY_FIRST - 9)	// Column click¤#define OT_NOTIFY_PROPCLICK					(OT_NOTIFY_FIRST - 10)	// Property click¤#define OT_NOTIFY_EDITBUTTONCLICK			(OT_NOTIFY_FIRST - 11)	// hb - added edit button click¤// -- Notication to controls¤#define OT_NOTIFY_COMMITCHANGES				WM_USER + 0x0102		// Loosing focus¤#define OT_NOTIFY_FORCEREDRAW				WM_USER + 0x0103		// Force redraw¤#define OT_NOTIFY_UP						WM_USER + 0x0104		// Up key pressed¤#define OT_NOTIFY_DOWN						WM_USER + 0x0105		// Down key pressed¤#define OT_TEXTCHANGED						WM_USER + 0x0106		// text changed¤// -- Menu Definitions¤#define OT_MES_UNDO							_T("&Undo")				// Text for undo¤#define OT_MES_CUT							_T("Cu&t")				// Text for cut¤#define OT_MES_COPY							_T("&Copy")				// Text for copy¤#define OT_MES_PASTE						_T("&Paste")			// Text for paste¤#define OT_MES_DELETE						_T("&Delete")			// Text for delete¤#define OT_MES_SELECTALL					_T("Select &All")		// Text for select all¤#define OT_MES_NSELECTALL					WM_USER + 0x7000		// Command for select all¤// -- Color  Items¤#define OT_COLOR_SELCHANGE					WM_USER + 1001			// Color picker selection change¤#define OT_COLOR_DROPDOWN					WM_USER + 1002			// Color picker drop down¤#define OT_COLOR_CLOSEUP					WM_USER + 1003			// Color picker close up¤#define OT_COLOR_SELENDOK					WM_USER + 1004			// Color picker end OK¤#define OT_COLOR_SELENDCANCEL				WM_USER + 1005			// Color picker end (cancelled)¤#define OT_COLOR_DEFAULTBOXVALUE			-3						// Default box value¤#define OT_COLOR_CUSTOMBOXVALUE				-2						// Custom box value¤#define OT_COLOR_INVALIDCOLOR				-1						// Invalid color value¤#define OT_COLOR_MAXCOLORS					100						// Maximum number of colors¤// -- Image  Items¤#define OT_IMAGE_CLOSE						WM_USER + 1001			// Image picker window close¤// -- Font Selection Items¤#define OT_FS_NOTIFY_APPLY					WM_USER + 1000			// Apply notification¤// -- IP Address¤#define OT_IPADDRESS_KILLFOCUS				WM_USER + 1002			// Edit is loosing focus¤#define OT_IPADDRESS_NEXTEDIT				WM_USER + 1003			// Edit needs to change focus to next edit¤¤// Options¤// -- Edit Items¤#define OT_EDIT_MULTILINE					0x00040000L				// Multiline edit¤#define OT_EDIT_PASSWORD					0x00000400L				// Password edit¤#define OT_EDIT_NUMERICAL					0x00000200L				// Numerical edit unsigned (int)¤// -- Check Box Items¤#define OT_CHECKBOX_SHOWTEXT				0x00040000L				// Show check text	¤#define OT_CHECKBOX_SHOWCHECK				0x00000400L				// Show check box¤// -- Spinner Items¤#define OT_EDIT_WRAPAROUND					0x00040000L				// Wrap around¤#define OT_EDIT_USEREDIT					0x00000400L				// Allow user edit¤// -- Color Items¤#define OT_COLOR_SHOWHEX					0x00040000L				// Show hex instead of RGB¤#define OT_COLOR_LIVEUPDATE					0x00000400L				// Allow  smaple to show updates¤// -- Image Items¤#define OT_IMAGE_SHOWTEXT					0x00040000L				// Show text in item sample¤// -- Font Selection Items¤#define OT_FS_TTONLY						0x00040000L				// True type fonts only¤#define OT_FS_USEDEFAULT					0x00000400L				// Default button¤#define OT_FS_USEAPPLY						0x00000200L				// Apply button¤#define OT_FS_USECHARFORMAT					0x00000100L				// Char format¤#define OT_FS_CUSTOMSAMPLE					0x00000800L				// Custom sample¤#define OT_FS_FONTNAMESAMPLE				0x00001000L				// Use font name sample¤#define OT_FS_NOTEXTCOLOR					0x00020000L				// No text color¤#define OT_FS_NOEFFECTS						0x00008000L				// No effects¤#define OT_FS_NOSTYLES						0x00800000L				// No styles¤#define OT_FS_NOFACE						0x00080000L				// No face¤// -- File Items¤#define OT_FILE_SHOWFULLPATH				0x00040000L				// Show full paths in sample¤#define OT_FILE_SHOWFILENAME				0x00000400L				// Show file name in sample¤#define OT_FILE_SHOWFILETITLE				0x00000200L				// Show file title in sample¤#define OT_FILE_SHOWFILEEXT					0x00000100L				// Show file extention in sample¤#define OT_FILE_SHOWFILEDIR					0x00000800L				// Show file directory in sample¤#define OT_FILE_SHOWFILEDRIVE				0x00001000L				// Show file drive in sample¤#define OT_FILE_OPENDIALOG					0x00020000L				// Open file dialog¤#define OT_FILE_SELECTDIALOG				0x00008000L				// Select folder¤#define OT_FILE_NOFIND						0x0000001L				// Don't try find file on filesystem¤// -- Hyperlink¤#define OT_HL_HOVER							0x00040000L				// Use hover color¤#define OT_HL_VISITED						0x00000400L				// Use visited color¤#define OT_HL_UNDERLINEHOVER				0x00000200L				// Underline when mouse is hover¤#define OT_HL_UNDERLINE						0x00000100L				// Underline always¤// -- Find Item flags¤#define OT_FI_LABEL   1¤#define OT_FI_ATTRIBUTE 2¤#define OT_FI_CONTAINS 4¤#define OT_FI_BOTH (OT_FI_LABEL | OT_FI_ATTRIBUTE)¤//#UC END# *470AFC94034B_USER_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470AFC94034B_USER_DEFINITION*"
		    value      	"//#UC START# *470AFC94034B_USER_DEFINITION*¤//#UC END# *470AFC94034B_USER_DEFINITION*")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"WikiPageID (wiki)"
		    value      	(value Text 
|Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/OptionTreeDef|470AFC94034B
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (wiki)"
		    value      	"wiki")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (h)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ElementCreationOrder"
		    value      	"16659815795"))
	    quid       	"470AFC94034B"
	    documentation 	"набор констант"
	    stereotype 	"UtilityPack"
	    language   	"MDA Generator")
	(object Class "COptionTreeCheckButton"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"AbstarctOperation"
		    value      	"regular")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsNative"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need assign op"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need copy ctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need ref count"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need unsorted less"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"debug log"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"local supervisor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need UC"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need dctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need objcounter"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"no base class"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"non virtual base"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"singleton"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (h)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeCheckButton.h")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (cpp)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeCheckButton.cpp")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFD4802FD_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470AFD4802FD_CUSTOM_INCLUDES*¤#include "shared/Core/fix/win_afx.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTree.h"¤//#UC END# *470AFD4802FD_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFD4802FD*"
		    value      	(value Text 
|//#UC START# *470AFD4802FD*¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeCheckButton¤¤COptionTreeCheckButton::COptionTreeCheckButton()¤{¤	// Initialize variables¤	m_strUnChecked = OT_CHECKBOX_DEFUNCHECKTEXT;¤	m_strChecked = OT_CHECKBOX_DEFCHECKTEXT;¤	m_bShowText = FALSE;¤	m_bCheck = FALSE;¤	m_bShowCheck = FALSE;¤	m_rcCheck = CRect(0, 0, 0, 0);¤	m_otOption = NULL;¤  m_dwOptions = 0;¤}¤¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeCheckButton message handlers¤¤void COptionTreeCheckButton::SetCheckText(CString strChecked, CString strUnChecked)¤{¤	// Save variables¤	m_strChecked = strChecked;¤	m_strUnChecked = strUnChecked;¤}¤¤CString COptionTreeCheckButton::GetCheckedText() const¤{¤	// Return variables¤	return m_strChecked;¤}¤¤CString COptionTreeCheckButton::GetUnCheckedText() const¤{¤	// Return variables¤	return m_strUnChecked;¤}¤¤void COptionTreeCheckButton::OnPaint() ¤{¤	// Make sure options aren't NULL¤	if (m_otOption == NULL)¤	{¤		return;¤	}¤¤	// Declare variables¤	CPaintDC dc(this);¤	CDC* pDCMem = new CDC;¤	CBitmap bpMem;¤	CBitmap *bmOld;¤	COLORREF crOld;¤	HGDIOBJ hOldBrush;¤	int nOldBack;¤	CRect rcText, rcCheck, rcClient;¤	CString strText;¤	HGDIOBJ hOld;¤¤	// Get client rectangle¤	GetClientRect(rcClient);¤¤	// Create DC¤	pDCMem->CreateCompatibleDC(&dc);¤	¤	// Create bitmap¤	bpMem.CreateCompatibleBitmap(&dc, rcClient.Width(), rcClient.Height());¤¤	// Select bitmap¤	bmOld = pDCMem->SelectObject(&bpMem);¤¤	// Set background mode¤	nOldBack = pDCMem->SetBkMode(TRANSPARENT);¤¤	// Set text color¤	//crOld = pDCMem->SetTextColor(GetSysColor(COLOR_WINDOWTEXT));¤  // ce¤  if(m_bCheck == TRUE)¤    crOld = pDCMem->SetTextColor(_CLR_CHECKED);¤  else¤    crOld = pDCMem->SetTextColor(_CLR_UNCHECKED);¤¤	// Select font¤	hOld = pDCMem->SelectObject(m_otOption->GetNormalFont());¤¤	// Draw control background¤	if (m_otOption->IsWindowEnabled() == FALSE)¤	{¤		hOldBrush = pDCMem->SelectObject(GetSysColorBrush(COLOR_BTNFACE));¤	}¤	else¤	{¤		hOldBrush = pDCMem->SelectObject(GetSysColorBrush(COLOR_WINDOW));¤	}¤	pDCMem->PatBlt(rcClient.left, rcClient.top, rcClient.Width(), rcClient.Height(), PATCOPY);¤¤  if(GetOption(OT_CHECKBOX_SHOWCHECK) == TRUE)¤  {¤	  // Get rectangle¤	  rcCheck.left  = rcClient.left + 1;¤	  rcCheck.right = rcCheck.left + (long) OT_CHECKBOX_SIZE;¤	  rcCheck.top = rcClient.top + ATTRIB_OFFSET - 1;¤	  rcCheck.bottom = rcCheck.top + (long) OT_CHECKBOX_SIZE;¤  		¤	  // Draw check¤	  if (GetCheck() == TRUE)¤	  {¤		  pDCMem->DrawFrameControl(&rcCheck, DFC_BUTTON, DFCS_BUTTONCHECK | DFCS_CHECKED);¤	  }¤	  else¤	  {¤		  pDCMem->DrawFrameControl(&rcCheck, DFC_BUTTON, DFCS_BUTTONCHECK);¤	  }¤  }¤  else¤  {¤    rcCheck.left  = rcClient.left + 1;¤    rcCheck.right = rcCheck.left;¤    rcCheck.top = rcClient.top + ATTRIB_OFFSET - 1;¤    rcCheck.bottom = rcCheck.top + (long) OT_CHECKBOX_SIZE;¤  }¤	// Draw text¤	if (GetOption(OT_CHECKBOX_SHOWTEXT) == TRUE)¤	{¤		// -- Get text¤		if (GetCheck() == TRUE)¤		{¤			strText = GetCheckedText();¤		}¤		else¤		{¤			strText = GetUnCheckedText();¤		}¤¤		// -- Get rectangle¤		rcText.left  = rcCheck.right + ATTRIB_OFFSET;¤		rcText.right = rcClient.right;¤		rcText.top = rcClient.top;¤		rcText.bottom = rcClient.bottom;¤¤		// -- Draw text¤		pDCMem->DrawText(strText, rcText, DT_SINGLELINE | DT_VCENTER);¤	}¤¤	// Save check rectangle¤	m_rcCheck = rcCheck;¤	if (GetOption(OT_CHECKBOX_SHOWTEXT) == TRUE)¤	{¤		m_rcCheck.right = rcText.right;¤	}¤¤	// Copy to screen¤	dc.BitBlt(0, 0, rcClient.Width(), rcClient.Height(), pDCMem, 0, 0, SRCCOPY);¤¤	// Restore GDI ojects¤	pDCMem->SelectObject(bmOld);¤	pDCMem->SelectObject(hOldBrush);¤	pDCMem->SetBkMode(nOldBack);¤	pDCMem->SelectObject(hOld);¤	pDCMem->SetTextColor(crOld);	¤¤	// Delete objects¤	if (pDCMem->GetSafeHdc() != NULL)¤	{¤		pDCMem->DeleteDC();¤	}¤	delete pDCMem;¤	if (bpMem.GetSafeHandle() != NULL)¤	{¤		bpMem.DeleteObject();¤	}¤}¤¤BOOL COptionTreeCheckButton::OnEraseBkgnd(CDC* pDC) ¤{¤	// Naa, we like flicker free better¤	return FALSE;¤}¤¤void COptionTreeCheckButton::SetCheck(BOOL bCheck,const bool bcommit)¤{¤	// Set variable¤	m_bCheck = bCheck;¤}¤¤¤BOOL COptionTreeCheckButton::GetCheck()¤{¤	// Return check¤	return m_bCheck;¤}¤¤void COptionTreeCheckButton::OnLButtonUp(UINT nFlags, CPoint point) ¤{¤	// See if check was pressed¤	if (m_rcCheck.PtInRect(point) == TRUE)¤	{¤		// -- Reverse check¤		SetCheck(!GetCheck(),true);¤		// -- Force redraw¤		Invalidate();¤¤		// -- Update window¤		UpdateWindow();¤	}¤	¤	CWnd::OnLButtonUp(nFlags, point);¤}¤¤void COptionTreeCheckButton::SetCheckOptionsOwner(COptionTree *otOption)¤{¤	// Save pointer¤	m_otOption = otOption;¤}¤¤¤BOOL COptionTreeCheckButton::GetOption(DWORD dwOption)¤{¤	// Return option¤	return (m_dwOptions & dwOption) ? TRUE : FALSE;¤}¤¤void COptionTreeCheckButton::SetOption(DWORD dwOption, BOOL bSet)¤{¤	// Set option¤	if (bSet == TRUE)¤	{¤		m_dwOptions |= dwOption;¤	}¤	else¤	{¤		m_dwOptions &= ~dwOption;¤	}¤}¤//#UC END# *470AFD4802FD*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFD4802FD_DESTR_BODY*"
		    value      	(value Text 
|//#UC START# *470AFD4802FD_DESTR_BODY*¤	//#UC END# *470AFD4802FD_DESTR_BODY*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470AFD4802FD_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470AFD4802FD_CUSTOM_INCLUDES*¤#include "shared/WinGUI/OptionTreeControls/OptionTreeDef.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTreeItem.h"¤¤namespace WinGUI {¤	class COptionTree;¤}¤//#UC END# *470AFD4802FD_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470AFD4802FD*"
		    value      	(value Text 
|//#UC START# *470AFD4802FD*¤// Construction¤public:¤	COptionTreeCheckButton();¤¤// Attributes¤public:¤¤// Operations¤public:¤¤// Overrides¤	// ClassWizard generated virtual function overrides¤	//{{AFX_VIRTUAL(COptionTreeCheckButton)¤	//}}AFX_VIRTUAL¤¤// Implementation¤public:¤	BOOL GetOption(DWORD dwOption);¤	void SetOption(DWORD dwOption, BOOL bSet);¤	void SetCheckOptionsOwner(COptionTree *otOption);¤	BOOL GetCheck();¤	virtual void SetCheck(BOOL bCheck,const bool bcommit=false);¤	CString GetCheckedText() const;¤	CString GetUnCheckedText() const;¤	void SetCheckText(CString strChecked, CString strUnChecked);¤	inline CString GetStrCheck(void) const¤	{¤	return (m_bCheck == TRUE ? m_strChecked :m_strUnChecked);¤	}¤	// Generated message map functions¤protected:¤	CString m_strUnChecked;¤	CString m_strChecked;¤	BOOL m_bShowText;¤	BOOL m_bShowCheck;¤	BOOL m_bCheck;¤	CRect m_rcCheck;¤	//COptionTree *m_otOption;¤	//{{AFX_MSG(COptionTreeCheckButton)¤	afx_msg void OnPaint();¤	afx_msg BOOL OnEraseBkgnd(CDC* pDC);¤	afx_msg void OnLButtonUp(UINT nFlags, CPoint point);¤	//}}AFX_MSG¤¤protected:¤  DWORD m_dwOptions;¤//#UC END# *470AFD4802FD*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"WikiPageID (wiki)"
		    value      	(value Text 
|Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeCheckButton|470AFD4802FD
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFD4802FD_MESSAGE_MAP*"
		    value      	(value Text 
|//#UC START# *470AFD4802FD_MESSAGE_MAP*¤	ON_WM_PAINT()¤	ON_WM_ERASEBKGND()¤	ON_WM_LBUTTONUP()¤	//#UC END# *470AFD4802FD_MESSAGE_MAP*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (cpp)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (h)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (wiki)"
		    value      	"wiki")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ElementCreationOrder"
		    value      	"16663755088"))
	    quid       	"470AFD4802FD"
	    documentation 	"кнопка выбора"
	    stereotype 	"GuiControl"
	    superclasses 	(list inheritance_relationship_list
		(object Inheritance_Relationship
		    quid       	"470AFD5702EE"
		    supplier   	"Logical View::shared::WinGUI::OptionTreeControls::COptionTreeItem"
		    quidu      	"470AFC61008C"))
	    language   	"MDA Generator")
	(object Class "COptionTreeColorPopUp"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"AbstarctOperation"
		    value      	"regular")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsNative"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need assign op"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need copy ctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need ref count"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need unsorted less"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"debug log"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"local supervisor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need UC"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need dctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need objcounter"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"no base class"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"non virtual base"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"singleton"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (cpp)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeColorPopUp.cpp")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (h)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeColorPopUp.h")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFD9300DA_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470AFD9300DA_CUSTOM_INCLUDES*¤#include <math.h>¤#include "shared/WinGUI/OptionTreeControls/COptionTree.h"¤//#UC END# *470AFD9300DA_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFD9300DA*"
		    value      	(value Text 
|//#UC START# *470AFD9300DA*¤OT_COLOR_ITEM COptionTreeColorPopUp::m_crColors[] = ¤{¤    { RGB(0x00, 0x00, 0x00),    _T("Black")             },¤    { RGB(0xA5, 0x2A, 0x00),    _T("Brown")             },¤    { RGB(0x00, 0x40, 0x40),    _T("Dark Olive Green")  },¤    { RGB(0x00, 0x55, 0x00),    _T("Dark Green")        },¤    { RGB(0x00, 0x00, 0x5E),    _T("Dark Teal")         },¤    { RGB(0x00, 0x00, 0x8B),    _T("Dark Blue")         },¤    { RGB(0x4B, 0x00, 0x82),    _T("Indigo")            },¤    { RGB(0x28, 0x28, 0x28),    _T("Gray-80%")			},¤¤    { RGB(0x8B, 0x00, 0x00),    _T("Dark Red")          },¤    { RGB(0xFF, 0x68, 0x20),    _T("Orange")            },¤    { RGB(0x8B, 0x8B, 0x00),    _T("Dark Yellow")       },¤    { RGB(0x00, 0x93, 0x00),    _T("Green")             },¤    { RGB(0x38, 0x8E, 0x8E),    _T("Teal")              },¤    { RGB(0x00, 0x00, 0xFF),    _T("Blue")              },¤    { RGB(0x7B, 0x7B, 0xC0),    _T("Blue-Gray")         },¤    { RGB(0x66, 0x66, 0x66),    _T("Gray-50%")			},¤¤    { RGB(0xFF, 0x00, 0x00),    _T("Red")               },¤    { RGB(0xFF, 0xAD, 0x5B),    _T("Light Orange")      },¤    { RGB(0x32, 0xCD, 0x32),    _T("Lime")              }, ¤    { RGB(0x3C, 0xB3, 0x71),    _T("Sea Green")         },¤    { RGB(0x7F, 0xFF, 0xD4),    _T("Aqua")              },¤    { RGB(0x7D, 0x9E, 0xC0),    _T("Light Blue")        },¤    { RGB(0x80, 0x00, 0x80),    _T("Violet")            },¤    { RGB(0x7F, 0x7F, 0x7F),    _T("Gray-40%")			},¤¤    { RGB(0xFF, 0xC0, 0xCB),    _T("Pink")              },¤    { RGB(0xFF, 0xD7, 0x00),    _T("Gold")              },¤    { RGB(0xFF, 0xFF, 0x00),    _T("Yellow")            },    ¤    { RGB(0x00, 0xFF, 0x00),    _T("Bright Green")      },¤    { RGB(0x40, 0xE0, 0xD0),    _T("Turquoise")         },¤    { RGB(0xC0, 0xFF, 0xFF),    _T("Skyblue")           },¤    { RGB(0x48, 0x00, 0x48),    _T("Plum")              },¤    { RGB(0xC0, 0xC0, 0xC0),    _T("Gray-25%")			},¤¤    { RGB(0xFF, 0xE4, 0xE1),    _T("Rose")              },¤    { RGB(0xD2, 0xB4, 0x8C),    _T("Tan")               },¤    { RGB(0xFF, 0xFF, 0xE0),    _T("Light Yellow")      },¤    { RGB(0x98, 0xFB, 0x98),    _T("Pale Green ")       },¤    { RGB(0xAF, 0xEE, 0xEE),    _T("Pale Turquoise")    },¤    { RGB(0x68, 0x83, 0x8B),    _T("Pale Blue")         },¤    { RGB(0xE6, 0xE6, 0xFA),    _T("Lavender")          },¤    { RGB(0xFF, 0xFF, 0xFF),    _T("White")             }¤};¤¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeColorPopUp¤¤COptionTreeColorPopUp::COptionTreeColorPopUp()¤{¤    // Initialize¤	Initialize();¤}¤¤COptionTreeColorPopUp::COptionTreeColorPopUp(CPoint pPoint, COLORREF crColor, COLORREF crDefault, CWnd* pParentWnd, LPCTSTR szDefaultText, LPCTSTR szCustomText)¤{¤    // Initialize¤	Initialize();¤¤	// Set variables¤	m_crColor = m_crInitialColor = crColor;¤	m_crDefault = crDefault;¤    m_wndParent = pParentWnd;¤    m_strDefaultText = (szDefaultText)? szDefaultText : _T("");¤    m_strCustomText  = (szCustomText)?  szCustomText  : _T("");¤¤    // Create¤	COptionTreeColorPopUp::Create(pPoint, m_crColor, pParentWnd, szDefaultText, szCustomText);¤}¤¤void COptionTreeColorPopUp::Initialize()¤{¤	// Declare variables¤	NONCLIENTMETRICS ncm;¤	LOGPALETTE* pLogPalette;¤    struct ¤	{¤        LOGPALETTE    LogPalette;¤        PALETTEENTRY  PalEntry[OT_COLOR_MAXCOLORS];¤    } pal;¤¤    // Get number of colors¤	m_nNumColors = sizeof(m_crColors)/sizeof(OT_COLOR_ITEM);¤    ASSERT(m_nNumColors <= OT_COLOR_MAXCOLORS);¤    if (m_nNumColors > OT_COLOR_MAXCOLORS)¤	{¤        m_nNumColors = OT_COLOR_MAXCOLORS;¤	}¤¤	// Set variables¤    m_nNumColumns = 0;¤    m_nNumRows = 0;¤    m_nBoxSize = 18;¤    //m_nMargin = ::GetSystemMetrics(SM_CXEDGE);¤	m_nMargin = 2;¤    m_nCurrentSel = OT_COLOR_INVALIDCOLOR;¤    m_nChosenColorSel = OT_COLOR_INVALIDCOLOR;¤    m_wndParent = NULL;¤    m_crColor = m_crInitialColor = RGB(0, 0, 0);¤    m_bChildWindowVisible = FALSE;¤¤    // Make sure the color square is at least 5 x 5;¤    if (m_nBoxSize - 2 * m_nMargin - 2 < 5) ¤	{¤		m_nBoxSize = 5 + 2 * m_nMargin + 2;¤	}¤¤    // Create the font¤    ncm.cbSize = sizeof(NONCLIENTMETRICS);¤    VERIFY(SystemParametersInfo(SPI_GETNONCLIENTMETRICS, sizeof(NONCLIENTMETRICS), &ncm, 0));¤    m_fFont.CreateFontIndirect(&(ncm.lfMessageFont));¤¤    // Create the palette¤    pLogPalette = (LOGPALETTE*) &pal;¤    pLogPalette->palVersion = 0x300;¤    pLogPalette->palNumEntries = (WORD) m_nNumColors; ¤    for (int i = 0; i < m_nNumColors; i++)¤    {¤        pLogPalette->palPalEntry[i].peRed   = GetRValue(m_crColors[i].crColor);¤        pLogPalette->palPalEntry[i].peGreen = GetGValue(m_crColors[i].crColor);¤        pLogPalette->palPalEntry[i].peBlue  = GetBValue(m_crColors[i].crColor);¤        pLogPalette->palPalEntry[i].peFlags = 0;¤    }¤    m_plPalette.CreatePalette(pLogPalette);¤}¤¤BOOL COptionTreeColorPopUp::Create(CPoint pPoint, COLORREF crColor, CWnd* pParentWnd, LPCTSTR szDefaultText, LPCTSTR szCustomText)¤{¤    // Declare variables¤	CString strClassName;¤	¤	// Verify window¤	ASSERT(pParentWnd && ::IsWindow(pParentWnd->GetSafeHwnd()));¤  ¤    // Se variables¤	m_wndParent = pParentWnd;¤    m_crColor = m_crInitialColor = crColor;¤¤    // Get the class name and create the window¤    strClassName = AfxRegisterWndClass(CS_HREDRAW | CS_VREDRAW, 0, (HBRUSH) (COLOR_BTNFACE+1), 0);¤¤	// Create window¤    if (!CWnd::CreateEx(0, strClassName, _T(""), WS_POPUP | WS_VISIBLE, pPoint.x, pPoint.y, 100, 100, pParentWnd->GetSafeHwnd(), 0, NULL))¤	{¤        return FALSE;¤	}¤¤	// Show window¤	ShowWindow(SW_SHOWNA);¤¤    // Store the Custom text¤    if (szCustomText != NULL) ¤	{¤        m_strCustomText = szCustomText;¤	}¤¤    // Store the Default Area text¤    if (szDefaultText != NULL) ¤	{¤        m_strDefaultText = szDefaultText;¤	}¤        ¤    // Set the window size¤    SetWindowSize();¤¤    // Create the tooltips¤    CreateToolTips();¤¤    // Find which cell (if any) corresponds to the initial color¤    FindCellFromColor(crColor);¤¤    // Capture all mouse events for the life of this window¤    SetCapture();¤¤    return TRUE;¤}¤¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeColorPopUp message handlers¤¤// For tooltips¤BOOL COptionTreeColorPopUp::PreTranslateMessage(MSG* pMsg) ¤{¤	// Relay tooltip¤	if (IsWindow(m_ttToolTip.GetSafeHwnd()))¤	{¤		m_ttToolTip.RelayEvent(pMsg);¤	}¤¤    // Sometimes if the picker loses focus it is never destroyed¤    if (GetCapture()->GetSafeHwnd() != m_hWnd)¤	{¤        SetCapture(); ¤	}¤¤    return CWnd::PreTranslateMessage(pMsg);¤}¤¤¤void COptionTreeColorPopUp::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags) ¤{¤	// Declare variable¤	int nRow, nCol;¤    ¤	// Get row¤	nRow = GetRow(m_nCurrentSel);¤	¤	// Get column¤	nCol = GetColumn(m_nCurrentSel);¤¤    // Down¤	if (nChar == VK_DOWN) ¤    {¤        if (nRow == OT_COLOR_DEFAULTBOXVALUE) ¤		{¤            nRow = nCol = 0; ¤		}¤        else if (nRow == OT_COLOR_CUSTOMBOXVALUE)¤        {¤            if (m_strDefaultText.GetLength())¤			{¤                nRow = nCol = OT_COLOR_DEFAULTBOXVALUE;¤			}¤            else¤			{¤                nRow = nCol = 0;¤			}¤        }¤        else¤        {¤            nRow++;¤¤            if (GetIndex(nRow, nCol) < 0)¤            {¤                if (m_strCustomText.GetLength())¤				{¤                    nRow = nCol = OT_COLOR_CUSTOMBOXVALUE;¤				}¤                else if (m_strDefaultText.GetLength())¤				{¤                    nRow = nCol = OT_COLOR_DEFAULTBOXVALUE;¤				}¤                else¤				{¤                    nRow = nCol = 0;¤				}¤            }¤        }¤¤        ChangeSelection(GetIndex(nRow, nCol));¤    }¤¤	// Up¤    if (nChar == VK_UP) ¤    {¤        if (nRow == OT_COLOR_DEFAULTBOXVALUE)¤        {¤            if (m_strCustomText.GetLength())¤			{¤                nRow = nCol = OT_COLOR_CUSTOMBOXVALUE;¤			}¤            else¤			{ ¤                nRow = GetRow(m_nNumColors-1); ¤                nCol = GetColumn(m_nNumColors-1); ¤            }¤        }¤        else if (nRow == OT_COLOR_CUSTOMBOXVALUE)¤        { ¤            nRow = GetRow(m_nNumColors-1); ¤            nCol = GetColumn(m_nNumColors-1); ¤        }¤        else if (nRow > 0) ¤		{¤			nRow--;¤		}¤        else¤        {¤            if (m_strDefaultText.GetLength())¤			{¤                nRow = nCol = OT_COLOR_DEFAULTBOXVALUE;¤			}¤            else if (m_strCustomText.GetLength())¤			{¤                nRow = nCol = OT_COLOR_CUSTOMBOXVALUE;¤			}¤            else¤            { ¤                nRow = GetRow(m_nNumColors-1); ¤                nCol = GetColumn(m_nNumColors-1); ¤            }¤        }¤¤        ChangeSelection(GetIndex(nRow, nCol));¤    }¤¤	// Right¤    if (nChar == VK_RIGHT) ¤    {¤        if (nRow == OT_COLOR_DEFAULTBOXVALUE) ¤		{¤            nRow = nCol = 0; ¤		}¤        else if (nRow == OT_COLOR_CUSTOMBOXVALUE)¤        {¤            if (m_strDefaultText.GetLength())¤			{¤                nRow = nCol = OT_COLOR_DEFAULTBOXVALUE;¤			}¤            else¤			{¤                nRow = nCol = 0;¤			}¤        }¤        else if (nCol < m_nNumColumns - 1) ¤		{¤            nCol++;¤		}¤        else ¤        { ¤            nCol = 0; nRow++;¤        }¤¤        if (GetIndex(nRow,nCol) == OT_COLOR_INVALIDCOLOR)¤        {¤            if (m_strCustomText.GetLength())¤			{¤                nRow = nCol = OT_COLOR_CUSTOMBOXVALUE;¤			}¤            else if (m_strDefaultText.GetLength())¤			{¤                nRow = nCol = OT_COLOR_DEFAULTBOXVALUE;¤			}¤            else¤			{¤                nRow = nCol = 0;¤			}¤        }¤¤        ChangeSelection(GetIndex(nRow, nCol));¤    }¤¤	// Left¤    if (nChar == VK_LEFT) ¤    {¤        if (nRow == OT_COLOR_DEFAULTBOXVALUE)¤        {¤            if (m_strCustomText.GetLength())¤			{¤                nRow = nCol = OT_COLOR_CUSTOMBOXVALUE;¤			}¤            else¤			{ ¤                nRow = GetRow(m_nNumColors-1); ¤                nCol = GetColumn(m_nNumColors-1); ¤            }¤        }¤        else if (nRow == OT_COLOR_CUSTOMBOXVALUE)¤        { ¤            nRow = GetRow(m_nNumColors-1); ¤            nCol = GetColumn(m_nNumColors-1); ¤        }¤        else if (nCol > 0) ¤		{¤			nCol--;¤		}¤        else¤        {¤            if (nRow > 0) ¤			{ ¤				nRow--; ¤				nCol = m_nNumColumns - 1; ¤			}¤            else ¤            {¤                if (m_strDefaultText.GetLength())¤				{¤                    nRow = nCol = OT_COLOR_DEFAULTBOXVALUE;¤				}¤                else if (m_strCustomText.GetLength())¤				{¤                    nRow = nCol = OT_COLOR_CUSTOMBOXVALUE;¤				}¤                else¤                { ¤                    nRow = GetRow(m_nNumColors - 1); ¤                    nCol = GetColumn(m_nNumColors - 1); ¤                }¤            }¤        }¤¤        ChangeSelection(GetIndex(nRow, nCol));¤    }¤¤	// Escape¤    if (nChar == VK_ESCAPE) ¤    {¤        m_crColor = m_crInitialColor;¤¤        EndSelection(OT_COLOR_SELENDCANCEL);¤¤        return;¤    }¤¤	// Return or space¤    if (nChar == VK_RETURN || nChar == VK_SPACE)¤    {¤        EndSelection(OT_COLOR_SELENDOK);¤¤        return;¤    }¤¤    CWnd::OnKeyDown(nChar, nRepCnt, nFlags);¤}¤¤// auto-deletion¤void COptionTreeColorPopUp::OnNcDestroy() ¤{¤    CWnd::OnNcDestroy();¤¤    delete this;¤}¤¤void COptionTreeColorPopUp::OnPaint() ¤{¤    // Declare variables¤	CPaintDC dc(this);¤	CRect rcClient;¤¤	// Get client rect¤	GetClientRect(rcClient);¤¤    // Draw the Default Area text¤    if (m_strDefaultText.GetLength())¤	{¤        DrawCell(&dc, OT_COLOR_DEFAULTBOXVALUE);¤	}¤ ¤    // Draw color cells¤    for (int i = 0; i < m_nNumColors; i++)¤	{¤        DrawCell(&dc, i);¤	}¤    ¤    // Draw custom text¤    if (m_strCustomText.GetLength())¤	{¤        DrawCell(&dc, OT_COLOR_CUSTOMBOXVALUE);¤	}¤¤    // Draw raised window edge (ex-window style WS_EX_WINDOWEDGE is sposed to do this, but for some reason isn't¤    dc.DrawEdge(rcClient, EDGE_RAISED, BF_RECT);¤}¤¤void COptionTreeColorPopUp::OnMouseMove(UINT nFlags, CPoint point) ¤{¤	// Declare variables¤    int nNewSelection = OT_COLOR_INVALIDCOLOR;¤¤    // Translate points to be relative raised window edge¤    point.x -= m_nMargin;¤    point.y -= m_nMargin;¤¤    // First check we aren't in text box¤    if (m_strCustomText.GetLength() && m_rcCustomTextRect.PtInRect(point))¤	{¤        nNewSelection = OT_COLOR_CUSTOMBOXVALUE;¤	}¤    else if (m_strDefaultText.GetLength() && m_rcDefaultTextRect.PtInRect(point))¤	{¤        nNewSelection = OT_COLOR_DEFAULTBOXVALUE;¤	}¤    else¤    {¤        // -- Take into account text box¤        if (m_strDefaultText.GetLength()) ¤		{¤            point.y -= m_rcDefaultTextRect.Height();  ¤		}¤¤        // -- Get the row and column¤        nNewSelection = GetIndex(point.y / m_nBoxSize, point.x / m_nBoxSize);¤¤        // -- In range? If not, default and exit¤        if (nNewSelection < 0 || nNewSelection >= m_nNumColors)¤        {¤            CWnd::OnMouseMove(nFlags, point);¤¤            return;¤        }¤    }¤¤    // OK - we have the row and column of the current selection (may be OT_COLOR_CUSTOMBOXVALUE)¤    // Has the row/col selection changed? If yes, then redraw old and new cells.¤    if (nNewSelection != m_nCurrentSel)¤	{¤        ChangeSelection(nNewSelection);¤	}¤¤    CWnd::OnMouseMove(nFlags, point);¤}¤¤void COptionTreeColorPopUp::OnLButtonUp(UINT nFlags, CPoint point) ¤{¤	// Declare variables¤	DWORD dwPos;¤¤    // Get osition¤	dwPos = GetMessagePos();¤    point = CPoint(LOWORD(dwPos), HIWORD(dwPos));¤¤    if (m_rcWindowRect.PtInRect(point))¤	{¤        EndSelection(OT_COLOR_SELENDOK);¤	}¤    else¤	{¤        EndSelection(OT_COLOR_SELENDCANCEL);¤	}¤¤	// Handle left click¤	if (::IsWindow(GetSafeHwnd()))¤	{¤		CWnd::OnLButtonUp(nFlags, point);¤	}¤}¤¤int COptionTreeColorPopUp::GetIndex(int nRow, int nCol) const¤{ ¤	// Get index¤    if ((nRow == OT_COLOR_CUSTOMBOXVALUE || nCol == OT_COLOR_CUSTOMBOXVALUE) && m_strCustomText.GetLength())¤	{¤        return OT_COLOR_CUSTOMBOXVALUE;¤	}¤    else if ((nRow == OT_COLOR_DEFAULTBOXVALUE || nCol == OT_COLOR_DEFAULTBOXVALUE) && m_strDefaultText.GetLength())¤	{¤        return OT_COLOR_DEFAULTBOXVALUE;¤	}¤    else if (nRow < 0 || nCol < 0 || nRow >= m_nNumRows || nCol >= m_nNumColumns)¤	{¤        return OT_COLOR_INVALIDCOLOR;¤	}¤    else¤    {¤        if (nRow * m_nNumColumns + nCol >= m_nNumColors)¤		{¤            return OT_COLOR_INVALIDCOLOR;¤		}¤        else¤		{¤            return nRow * m_nNumColumns + nCol;¤		}¤    }¤}¤¤int COptionTreeColorPopUp::GetRow(int nIndex) const               ¤{ ¤	// Get row¤    if (nIndex == OT_COLOR_CUSTOMBOXVALUE && m_strCustomText.GetLength())¤	{¤        return OT_COLOR_CUSTOMBOXVALUE;¤	}¤    else if (nIndex == OT_COLOR_DEFAULTBOXVALUE && m_strDefaultText.GetLength())¤	{¤        return OT_COLOR_DEFAULTBOXVALUE;¤	}¤    else if (nIndex < 0 || nIndex >= m_nNumColors)¤	{¤        return OT_COLOR_INVALIDCOLOR;¤	}¤    else¤	{¤        return nIndex / m_nNumColumns; ¤	}¤}¤¤int COptionTreeColorPopUp::GetColumn(int nIndex) const            ¤{ ¤	// Get column¤    if (nIndex == OT_COLOR_CUSTOMBOXVALUE && m_strCustomText.GetLength())¤	{¤        return OT_COLOR_CUSTOMBOXVALUE;¤	}¤    else if (nIndex == OT_COLOR_DEFAULTBOXVALUE && m_strDefaultText.GetLength())¤	{¤        return OT_COLOR_DEFAULTBOXVALUE;¤	}¤    else if (nIndex < 0 || nIndex >= m_nNumColors)¤	{¤        return OT_COLOR_INVALIDCOLOR;¤	}¤    else¤	{¤        return nIndex % m_nNumColumns; ¤	}¤}¤¤void COptionTreeColorPopUp::FindCellFromColor(COLORREF crColor)¤{¤	// Find cell¤    if (crColor == m_crDefault && m_strDefaultText.GetLength())¤    {¤        m_nChosenColorSel = OT_COLOR_DEFAULTBOXVALUE;¤        return;¤    }¤¤    for (int i = 0; i < m_nNumColors; i++)¤    {¤        if (GetColor(i) == crColor)¤        {¤            m_nChosenColorSel = i;¤            return;¤        }¤    }¤¤    if (m_strCustomText.GetLength())¤	{¤        m_nChosenColorSel = OT_COLOR_CUSTOMBOXVALUE;¤	}¤    else¤	{¤        m_nChosenColorSel = OT_COLOR_INVALIDCOLOR;¤	}¤}¤¤¤BOOL COptionTreeColorPopUp::GetCellRect(int nIndex, const LPRECT& rect)¤{¤	// Get cell rect¤    if (nIndex == OT_COLOR_CUSTOMBOXVALUE)¤    {¤        ::SetRect(rect, m_rcCustomTextRect.left,  m_rcCustomTextRect.top, m_rcCustomTextRect.right, m_rcCustomTextRect.bottom);¤		¤		return TRUE;¤    }¤    else if (nIndex == OT_COLOR_DEFAULTBOXVALUE)¤    {¤        ::SetRect(rect, m_rcDefaultTextRect.left,  m_rcDefaultTextRect.top, m_rcDefaultTextRect.right, m_rcDefaultTextRect.bottom);¤¤        return TRUE;¤    }¤¤    if (nIndex < 0 || nIndex >= m_nNumColors)¤	{¤        return FALSE;¤	}¤¤    rect->left = GetColumn(nIndex) * m_nBoxSize + m_nMargin;¤    rect->top  = GetRow(nIndex) * m_nBoxSize + m_nMargin;¤¤    // Move everything down if we are displaying a default text area¤    if (m_strDefaultText.GetLength()) ¤	{¤        rect->top += (m_nMargin + m_rcDefaultTextRect.Height());¤	}¤¤    rect->right = rect->left + m_nBoxSize;¤    rect->bottom = rect->top + m_nBoxSize;¤¤    return TRUE;¤}¤¤void COptionTreeColorPopUp::SetWindowSize()¤{¤    // Declare variables¤	CSize TextSize;¤¤    // If we are showing a custom or default text area, get the font and text size.¤    if (m_strCustomText.GetLength() || m_strDefaultText.GetLength())¤    {¤        CClientDC dc(this);¤        CFont* pOldFont = (CFont*) dc.SelectObject(&m_fFont);¤¤        // -- Get the size of the custom text (if there IS custom text)¤        TextSize = CSize(0,0);¤        if (m_strCustomText.GetLength())¤            TextSize = dc.GetTextExtent(m_strCustomText);¤¤        // -- Get the size of the default text (if there IS default text)¤        if (m_strDefaultText.GetLength())¤        {¤            CSize DefaultSize = dc.GetTextExtent(m_strDefaultText);¤            if (DefaultSize.cx > TextSize.cx) TextSize.cx = DefaultSize.cx;¤            if (DefaultSize.cy > TextSize.cy) TextSize.cy = DefaultSize.cy;¤        }¤¤        dc.SelectObject(pOldFont);¤        TextSize += CSize(2*m_nMargin,2*m_nMargin);¤¤        // -- Add even more space to draw the horizontal line¤        TextSize.cy += 2*m_nMargin + 2;¤    }¤¤    // Get the number of columns and rows¤    m_nNumColumns = 8;¤    m_nNumRows = m_nNumColors / m_nNumColumns;¤    if (m_nNumColors % m_nNumColumns) ¤	{¤		m_nNumRows++;¤	}¤¤    // Get the current window position, and set the new size¤    CRect rect;¤    GetWindowRect(rect);¤¤    m_rcWindowRect.SetRect(rect.left, rect.top, rect.left + m_nNumColumns*m_nBoxSize + 2*m_nMargin, rect.top  + m_nNumRows*m_nBoxSize + 2*m_nMargin);¤¤    // If custom text, then expand window if necessary, and set text width as¤    // window width¤    if (m_strDefaultText.GetLength()) ¤    {¤        if (TextSize.cx > m_rcWindowRect.Width())¤		{¤            m_rcWindowRect.right = m_rcWindowRect.left + TextSize.cx;¤		}¤        TextSize.cx = m_rcWindowRect.Width()-2*m_nMargin;¤¤        // -- Work out the text area¤        m_rcDefaultTextRect.SetRect(m_nMargin, m_nMargin, m_nMargin+TextSize.cx, 2*m_nMargin+TextSize.cy);¤        m_rcWindowRect.bottom += m_rcDefaultTextRect.Height() + 2*m_nMargin;¤    }¤¤    // If custom text, then expand window if necessary, and set text width as¤    // window width¤    if (m_strCustomText.GetLength()) ¤    {¤        if (TextSize.cx > m_rcWindowRect.Width())¤		{¤            m_rcWindowRect.right = m_rcWindowRect.left + TextSize.cx;¤		}¤        TextSize.cx = m_rcWindowRect.Width()-2*m_nMargin;¤¤        // -- Work out the text area¤        m_rcCustomTextRect.SetRect(m_nMargin, m_rcWindowRect.Height(), m_nMargin+TextSize.cx, m_rcWindowRect.Height()+m_nMargin+TextSize.cy);¤		m_rcWindowRect.bottom += m_rcCustomTextRect.Height() + 2*m_nMargin;¤   }¤¤    // Need to check it'll fit on screen: Too far right?¤    CSize ScreenSize(::GetSystemMetrics(SM_CXMAXTRACK), ::GetSystemMetrics(SM_CYMAXTRACK));¤    if (m_rcWindowRect.right > ScreenSize.cx)¤	{¤        m_rcWindowRect.OffsetRect(-(m_rcWindowRect.right - ScreenSize.cx), 0);¤	}¤¤    // Too far left?¤    if (m_rcWindowRect.left < 0)¤	{¤        m_rcWindowRect.OffsetRect( -m_rcWindowRect.left, 0);¤	}¤¤    // Bottom falling out of screen?¤    if (m_rcWindowRect.bottom > ScreenSize.cy)¤    {¤        CRect rcParentRect;¤        m_wndParent->GetWindowRect(rcParentRect);¤        m_rcWindowRect.OffsetRect(0, -(rcParentRect.Height() + m_rcWindowRect.Height()));¤    }¤¤    // Set the window size and position¤    MoveWindow(m_rcWindowRect, TRUE);¤}¤¤void COptionTreeColorPopUp::CreateToolTips()¤{¤    // Create the tool tip¤    if (!m_ttToolTip.Create(this)) ¤	{¤		return;¤	}¤¤    // Add a tool for each cell¤    for (int i = 0; i < m_nNumColors; i++)¤    {¤        CRect rect;¤        if (!GetCellRect(i, rect)) ¤		{¤			continue;¤		}¤		m_ttToolTip.AddTool(this, GetColorName(i), rect, 1);¤    }¤¤	// Create inactive¤	m_ttToolTip.Activate(TRUE);¤}¤¤void COptionTreeColorPopUp::ChangeSelection(int nIndex)¤{¤    CClientDC dc(this);¤¤    if (nIndex > m_nNumColors)¤	{¤        nIndex = OT_COLOR_CUSTOMBOXVALUE; ¤	}¤¤    if ((m_nCurrentSel >= 0 && m_nCurrentSel < m_nNumColors) || m_nCurrentSel == OT_COLOR_CUSTOMBOXVALUE || m_nCurrentSel == OT_COLOR_DEFAULTBOXVALUE)¤    {¤        // -- Set Current selection as invalid and redraw old selection (this way¤        // the old selection will be drawn unselected)¤        int OldSel = m_nCurrentSel;¤        m_nCurrentSel = OT_COLOR_INVALIDCOLOR;¤        DrawCell(&dc, OldSel);¤    }¤¤    // Set the current selection as row/col and draw (it will be drawn selected)¤    m_nCurrentSel = nIndex;¤    DrawCell(&dc, m_nCurrentSel);¤¤    // Store the current color¤    if (m_nCurrentSel == OT_COLOR_CUSTOMBOXVALUE)¤	{¤        m_wndParent->SendMessage(OT_COLOR_SELCHANGE, (WPARAM) m_crInitialColor, 0);¤	}¤    else if (m_nCurrentSel == OT_COLOR_DEFAULTBOXVALUE)¤    {¤        m_crColor = m_crDefault;¤        m_wndParent->SendMessage(OT_COLOR_SELCHANGE, (WPARAM) m_crDefault, 0);¤    }¤    else¤    {¤        m_crColor = GetColor(m_nCurrentSel);¤        m_wndParent->SendMessage(OT_COLOR_SELCHANGE, (WPARAM) m_crColor, 0);¤    }¤}¤¤void COptionTreeColorPopUp::EndSelection(int nMessage)¤{¤	// Release capture¤    ReleaseCapture();¤¤    // If custom text selected, perform a custom color selection¤    if (nMessage != OT_COLOR_SELENDCANCEL && m_nCurrentSel == OT_COLOR_CUSTOMBOXVALUE)¤    {¤        m_bChildWindowVisible = TRUE;¤¤        CColorDialog dlg(¤			m_crInitialColor != OT_COLOR_NO_SELECTION ? m_crInitialColor : RGB(0, 0, 0)¤			, CC_FULLOPEN | CC_ANYCOLOR¤			, this¤		);¤¤        if (dlg.DoModal() == IDOK)¤		{¤            m_crColor = dlg.GetColor();¤		}¤        else¤		{¤            nMessage = OT_COLOR_SELENDCANCEL;¤		}¤¤        m_bChildWindowVisible = FALSE;¤    } ¤¤	// Get initial color¤    if (nMessage == OT_COLOR_SELENDCANCEL)¤	{¤        m_crColor = m_crInitialColor;¤	}¤¤	// Send message¤    m_wndParent->SendMessage(nMessage, (WPARAM) m_crColor, 0);¤    ¤    // Kill focus¤    if (!m_bChildWindowVisible)¤	{¤        DestroyWindow();¤	}¤}¤¤void COptionTreeColorPopUp::DrawCell(CDC* pDC, int nIndex)¤{¤    // For the Custom Text area¤    if (m_strCustomText.GetLength() && nIndex == OT_COLOR_CUSTOMBOXVALUE)¤    {¤        // -- The extent of the actual text button¤        CRect rcTextButton = m_rcCustomTextRect;¤        rcTextButton.top += 2 * m_nMargin;¤¤        // -- Fill background¤        pDC->FillSolidRect(rcTextButton, ::GetSysColor(COLOR_3DFACE));¤¤        // -- Draw horizontal line¤        pDC->FillSolidRect(m_rcCustomTextRect.left + 2 * m_nMargin, m_rcCustomTextRect.top, m_rcCustomTextRect.Width()-4*m_nMargin, 1, ::GetSysColor(COLOR_3DSHADOW));¤        pDC->FillSolidRect(m_rcCustomTextRect.left + 2 * m_nMargin, m_rcCustomTextRect.top + 1, m_rcCustomTextRect.Width()-4*m_nMargin, 1, ::GetSysColor(COLOR_3DHILIGHT));¤        rcTextButton.DeflateRect(1,1);¤¤        // -- Fill background¤        if (m_nChosenColorSel == nIndex && m_nCurrentSel != nIndex)¤		{¤            pDC->FillSolidRect(rcTextButton, ::GetSysColor(COLOR_3DLIGHT));¤		}¤        else¤		{¤            pDC->FillSolidRect(rcTextButton, ::GetSysColor(COLOR_3DFACE));¤		}¤¤        // -- Draw button¤        if (m_nCurrentSel == nIndex) ¤		{¤            pDC->DrawEdge(rcTextButton, BDR_RAISEDINNER, BF_RECT);¤		}¤¤        // -- Draw custom text¤        CFont *pOldFont = (CFont*) pDC->SelectObject(&m_fFont);¤        int nOldBack = pDC->SetBkMode(TRANSPARENT);¤        pDC->DrawText(m_strCustomText, rcTextButton, DT_CENTER | DT_VCENTER | DT_SINGLELINE);¤¤		// -- Restore¤        pDC->SelectObject(pOldFont);¤		pDC->SetBkMode(nOldBack);¤¤        return;¤    }        ¤¤    // For the Default Text area¤    if (m_strDefaultText.GetLength() && nIndex == OT_COLOR_DEFAULTBOXVALUE)¤    {¤        // -- Fill background¤        pDC->FillSolidRect(m_rcDefaultTextRect, ::GetSysColor(COLOR_3DFACE));¤¤        // -- The extent of the actual text button¤        CRect rcTextButton = m_rcDefaultTextRect;¤        rcTextButton.DeflateRect(1,1);¤¤        // -- Fill background¤        if (m_nChosenColorSel == nIndex && m_nCurrentSel != nIndex)¤		{¤			for (long i = rcTextButton.top; i < rcTextButton.bottom; i++)¤			{¤				_DrawSelectRect(pDC->GetSafeHdc(), rcTextButton.left, i, rcTextButton.Width());¤			}¤		}¤        else¤		{¤            pDC->FillSolidRect(rcTextButton, ::GetSysColor(COLOR_3DFACE));¤		}¤¤        // -- Draw thin line around text¤        CRect rcLineRect = rcTextButton;¤        CPen pen(PS_SOLID, 1, ::GetSysColor(COLOR_3DSHADOW));¤        CPen* pOldPen = pDC->SelectObject(&pen);¤		¤		// -- Calculate the rectangle¤		rcLineRect.left += 3;¤		rcLineRect.right -= 3;¤		rcLineRect.top += 2;¤		rcLineRect.bottom -= 3;¤¤		// -- Restore¤        pDC->SelectStockObject(NULL_BRUSH);¤        pDC->Rectangle(rcLineRect);¤        pDC->SelectObject(pOldPen);¤		if (pen.GetSafeHandle() != NULL)¤		{¤			pen.DeleteObject();¤		}¤¤        // -- Draw button¤        if (m_nCurrentSel == nIndex) ¤		{¤            pDC->DrawEdge(rcTextButton, BDR_RAISEDINNER, BF_RECT);¤		}¤        else if (m_nChosenColorSel == nIndex)¤		{¤            pDC->DrawEdge(rcTextButton, BDR_SUNKENOUTER, BF_RECT);¤		}¤¤        // -- Draw custom text¤        CFont *pOldFont = (CFont*) pDC->SelectObject(&m_fFont);¤        int nOldBack = pDC->SetBkMode(TRANSPARENT);¤        pDC->DrawText(m_strDefaultText, rcTextButton, DT_CENTER | DT_VCENTER | DT_SINGLELINE);¤¤		// -- Restore¤        pDC->SelectObject(pOldFont);¤		pDC->SetBkMode(nOldBack);¤¤		// -- Select and realize the palette¤		CPalette* pOldPalette = NULL;¤		if (pDC->GetDeviceCaps(RASTERCAPS) & RC_PALETTE)¤		{¤			pOldPalette = pDC->SelectPalette(&m_plPalette, FALSE);¤			pDC->RealizePalette();¤		}¤¤		// -- Draw sample cell of default color¤		CRect rcSample;¤		rcSample.left = rcLineRect.left;¤		rcSample.right = rcSample.left + m_nBoxSize;¤		rcSample.top = rcLineRect.top;¤		rcSample.bottom = rcLineRect.top + m_nBoxSize;¤		rcSample.DeflateRect(m_nMargin + 1, m_nMargin + 1);¤¤		// -- Create objects¤		CBrush brush(PALETTERGB(GetRValue(m_crDefault), GetGValue(m_crDefault), GetBValue(m_crDefault)));¤		CPen penSample;¤		penSample.CreatePen(PS_SOLID, 1, ::GetSysColor(COLOR_3DSHADOW));¤		CBrush* pOldBrush = (CBrush*) pDC->SelectObject(&brush);¤		CPen* pOldSamplePen = (CPen*) pDC->SelectObject(&penSample);¤¤		// Draw the cell color¤		pDC->Rectangle(rcSample);¤¤		// Restore¤		pDC->SelectObject(pOldBrush);¤		pDC->SelectObject(pOldSamplePen);¤		if (brush.GetSafeHandle() != NULL)¤		{¤			brush.DeleteObject();¤		}¤		if (penSample.GetSafeHandle() != NULL)¤		{¤			penSample.DeleteObject();¤		}¤		if (pOldPalette && pDC->GetDeviceCaps(RASTERCAPS) & RC_PALETTE)¤		{¤			pDC->SelectPalette(pOldPalette, FALSE);¤		}¤        return;¤    }        ¤¤	// Declare variables¤    CRect rcCell;¤    if (!GetCellRect(nIndex, rcCell)) ¤	{¤		return;¤	}¤¤    // -- Select and realize the palette¤    CPalette* pOldPalette = NULL;¤    if (pDC->GetDeviceCaps(RASTERCAPS) & RC_PALETTE)¤    {¤        pOldPalette = pDC->SelectPalette(&m_plPalette, FALSE);¤        pDC->RealizePalette();¤    }¤¤    // -- Fill background¤    if (m_nChosenColorSel == nIndex && m_nCurrentSel != nIndex)¤	{¤		for (long i = rcCell.top; i < rcCell.bottom; i++)¤		{¤			_DrawSelectRect(pDC->GetSafeHdc(), rcCell.left, i, rcCell.Width());¤		}¤	}¤    else¤	{¤        pDC->FillSolidRect(rcCell, ::GetSysColor(COLOR_3DFACE));¤	}¤¤    // Draw button¤    if (m_nCurrentSel == nIndex) ¤	{¤        pDC->DrawEdge(rcCell, BDR_RAISEDINNER, BF_RECT);¤	}¤    else if (m_nChosenColorSel == nIndex)¤	{¤        pDC->DrawEdge(rcCell, BDR_SUNKENOUTER, BF_RECT);¤	}¤¤	// Create objects¤    CBrush brush(PALETTERGB(GetRValue(GetColor(nIndex)), GetGValue(GetColor(nIndex)), GetBValue(GetColor(nIndex))));¤	CPen pen;¤    pen.CreatePen(PS_SOLID, 1, ::GetSysColor(COLOR_3DSHADOW));¤    CBrush* pOldBrush = (CBrush*) pDC->SelectObject(&brush);¤    CPen* pOldPen = (CPen*) pDC->SelectObject(&pen);¤¤    // Draw the cell color¤    rcCell.DeflateRect(m_nMargin + 1, m_nMargin + 1);¤    pDC->Rectangle(rcCell);¤¤    // Restore¤    pDC->SelectObject(pOldBrush);¤    pDC->SelectObject(pOldPen);¤	if (brush.GetSafeHandle() != NULL)¤	{¤		brush.DeleteObject();¤	}¤	if (pen.GetSafeHandle() != NULL)¤	{¤		pen.DeleteObject();¤	}¤    if (pOldPalette && pDC->GetDeviceCaps(RASTERCAPS) & RC_PALETTE)¤	{¤        pDC->SelectPalette(pOldPalette, FALSE);¤	}¤}¤¤BOOL COptionTreeColorPopUp::OnQueryNewPalette() ¤{¤    // Force redraw¤	Invalidate();  ¤¤	// Update window¤	UpdateWindow();¤¤    return CWnd::OnQueryNewPalette();¤}¤¤void COptionTreeColorPopUp::OnPaletteChanged(CWnd* pFocusWnd) ¤{¤    if (pFocusWnd->GetSafeHwnd() != GetSafeHwnd())¤	{¤		// -- Force redraw¤        Invalidate();¤¤		// -- Update window¤		UpdateWindow();¤	}¤¤	CWnd::OnPaletteChanged(pFocusWnd);¤}¤¤void COptionTreeColorPopUp::OnKillFocus(CWnd* pNewWnd) ¤{¤	// Release capture¤    ReleaseCapture();¤    ¤	CWnd::OnKillFocus(pNewWnd);¤}¤¤¤void COptionTreeColorPopUp::OnActivateApp(BOOL bActive, DWORD hTask) ¤{¤	// If Deactivating App, cancel this selection¤	if (!bActive)¤	{¤		 EndSelection(OT_COLOR_SELENDCANCEL);¤	}¤¤	CWnd::OnActivateApp(bActive, hTask);¤}¤¤//#UC END# *470AFD9300DA*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFD9300DA_DESTR_BODY*"
		    value      	(value Text 
|//#UC START# *470AFD9300DA_DESTR_BODY*¤	 // Delete variables¤	if (m_fFont.GetSafeHandle() != NULL)¤	{¤		m_fFont.DeleteObject();¤	}¤	if (m_plPalette.GetSafeHandle() != NULL)¤	{¤		m_plPalette.DeleteObject();¤	}¤	//#UC END# *470AFD9300DA_DESTR_BODY*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470AFD9300DA_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470AFD9300DA_CUSTOM_INCLUDES*¤#include "shared/Core/fix/win_afx.h"¤#include "shared/WinGUI/OptionTreeControls/OptionTreeDef.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTreeItem.h"¤¤namespace WinGUI {¤	class COptionTree;¤}¤¤// Structures¤typedef struct ¤{¤    COLORREF crColor;¤    TCHAR    *szName;¤} OT_COLOR_ITEM;¤//#UC END# *470AFD9300DA_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470AFD9300DA*"
		    value      	(value Text 
|//#UC START# *470AFD9300DA*¤public:¤    COptionTreeColorPopUp();¤    COptionTreeColorPopUp(CPoint pPoint, COLORREF crColor, COLORREF crDefault, CWnd* pParentWnd, LPCTSTR szDefaultText = NULL, LPCTSTR szCustomText = NULL);¤    void Initialize();¤¤// Attributes¤public:¤¤// Operations¤public:¤    BOOL Create(CPoint pPoint, COLORREF crColor, CWnd* pParentWnd, LPCTSTR szDefaultText = NULL, LPCTSTR szCustomText = NULL);¤¤// Overrides¤    // ClassWizard generated virtual function overrides¤    //{{AFX_VIRTUAL(COptionTreeColorPopUp)¤¤public:¤    virtual BOOL PreTranslateMessage(MSG* pMsg);¤    //}}AFX_VIRTUAL¤¤protected:¤    BOOL GetCellRect(int nIndex, const LPRECT& rect);¤    void FindCellFromColor(COLORREF crColor);¤    void SetWindowSize();¤    void CreateToolTips();¤    void ChangeSelection(int nIndex);¤    void EndSelection(int nMessage);¤    void DrawCell(CDC* pDC, int nIndex);¤¤    COLORREF GetColor(int nIndex)              { return m_crColors[nIndex].crColor; }¤    LPCTSTR GetColorName(int nIndex)           { return m_crColors[nIndex].szName; }¤    int  GetIndex(int nRow, int nCol) const;¤    int  GetRow(int nIndex) const;¤    int  GetColumn(int nIndex) const;¤¤// protected attributes¤protected:¤    static OT_COLOR_ITEM m_crColors[];¤    int m_nNumColors;¤    int m_nNumColumns, m_nNumRows;¤    int m_nBoxSize, m_nMargin;¤    int m_nCurrentSel;¤    int m_nChosenColorSel;¤    CString m_strDefaultText;¤    CString m_strCustomText;¤    CRect m_rcCustomTextRect, m_rcDefaultTextRect, m_rcWindowRect;¤    CFont m_fFont;¤    CPalette m_plPalette;¤    COLORREF m_crInitialColor, m_crColor, m_crDefault;¤    CToolTipCtrl m_ttToolTip;¤    CWnd* m_wndParent;¤¤    BOOL m_bChildWindowVisible;¤¤    // Generated message map functions¤protected:¤    //{{AFX_MSG(COptionTreeColorPopUp)¤    afx_msg void OnNcDestroy();¤    afx_msg void OnLButtonUp(UINT nFlags, CPoint point);¤    afx_msg void OnPaint();¤    afx_msg void OnMouseMove(UINT nFlags, CPoint point);¤    afx_msg void OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags);¤    afx_msg BOOL OnQueryNewPalette();¤    afx_msg void OnPaletteChanged(CWnd* pFocusWnd);¤	afx_msg void OnKillFocus(CWnd* pNewWnd);¤	afx_msg void OnActivateApp(BOOL bActive, DWORD hTask);¤	//}}AFX_MSG¤//#UC END# *470AFD9300DA*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"WikiPageID (wiki)"
		    value      	(value Text 
|Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeColorPopUp|470AFD9300DA
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFD9300DA_MESSAGE_MAP*"
		    value      	(value Text 
|//#UC START# *470AFD9300DA_MESSAGE_MAP*¤    ON_WM_NCDESTROY()¤    ON_WM_LBUTTONUP()¤    ON_WM_PAINT()¤    ON_WM_MOUSEMOVE()¤    ON_WM_KEYDOWN()¤    ON_WM_QUERYNEWPALETTE()¤    ON_WM_PALETTECHANGED()¤	ON_WM_KILLFOCUS()¤	ON_WM_ACTIVATEAPP()¤	//#UC END# *470AFD9300DA_MESSAGE_MAP*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (wiki)"
		    value      	"wiki")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (h)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (cpp)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ElementCreationOrder"
		    value      	"16659816860"))
	    quid       	"470AFD9300DA"
	    documentation 	"pop-up окно с выбором цветов"
	    stereotype 	"GuiControl"
	    language   	"MDA Generator")
	(object Class "CEditMask"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"AbstarctOperation"
		    value      	"regular")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsNative"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need assign op"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need copy ctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need ref count"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need unsorted less"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"debug log"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"local supervisor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need UC"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need dctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need objcounter"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"no base class"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"non virtual base"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"singleton"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (h)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/CEditMask.h")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (cpp)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/CEditMask.cpp")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFDEC0203_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470AFDEC0203_CUSTOM_INCLUDES*¤#include "shared/WinGUI/OptionTreeControls/CRegExp.h"¤//#UC END# *470AFDEC0203_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFDEC0203*"
		    value      	(value Text 
|//#UC START# *470AFDEC0203*¤CEditMask::CEditMask()¤{¤ // default input mask: allow any characters //¤  m_stInputMask = ".*" ;¤  pEditInputCallback = NULL ;¤¤  m_iMaxLength = -1 ;¤}¤¤/////////////////////////////////////////////////////////////////////////////¤// Behandlungsroutinen fьr Nachrichten CEditMask ¤¤BOOL CEditMask::PreTranslateMessage(MSG* pMsg) ¤{¤  CString stInputText ;¤¤  if (!pMsg)¤    return FALSE ;¤¤  if (pMsg->message == WM_KEYDOWN && pMsg->wParam == VK_RETURN)¤  {¤	  GetWindowText(stInputText) ;¤	  ¤    // the return has been processed¤    if(CallCallback(stInputText) > 0)¤      return TRUE;¤¤	  // should be unreachable //  ¤    //return TRUE ;¤  }¤¤  if (pMsg->message == WM_CHAR)¤	{¤		// check, if input is valid.						//¤		// get ald and new input text						//¤		CString stInputValue ;¤¤		GetWindowText(stInputText) ;¤		stInputValue.Format("%c", (char) pMsg->wParam) ;¤// GARANT {¤		unsigned char c = (unsigned char) pMsg->wParam ;¤// } GARANT¤¤    if (c == 'ь' || c == 'Я' || c == 'д' || c == 'ц' || ¤        c == 'Ь' || c == 'Д' || c == 'Ц' || ¤        isprint(c))¤		{¤			//stInputText += stInputValue ;¤¤      int iSelStart = 0 ;¤      int iSelEnd = 0 ;¤¤      GetSel(iSelStart, iSelEnd) ;¤¤      if (stInputText.Left(1) == ' ')¤      {¤        stInputText.TrimLeft() ;¤¤        if (iSelStart > 0)¤          iSelStart-- ;¤¤        if (iSelEnd > 0)¤          iSelEnd-- ;¤      }¤¤      if (iSelStart == iSelEnd)¤      {¤// GARANT {¤        // insert single character //¤        stInputText.Insert(iSelStart, (char) c) ;¤// } GARANT¤      }¤      else¤      {¤        // replace selection //¤        CString stTmp ;¤¤        stTmp  = stInputText.Left(iSelStart) ;¤        stTmp += stInputValue ;¤        stTmp += stInputText.Right(stInputText.GetLength() - iSelEnd) ;¤¤        stInputText = stTmp ;¤      }¤¤      if (m_iMaxLength != -1 && stInputText.GetLength() > m_iMaxLength)¤      {¤        MessageBeep(1) ;¤        return TRUE ;¤      }¤¤      // check, if input is a valid string  //¤      // check against regular expression   //¤      if (!ValidateInput(stInputText.GetBuffer(500)))¤			{¤				MessageBeep(1) ;¤				// ignore the last input character ! //¤        return TRUE ;								¤			}¤      else¤      {¤        SetWindowText(stInputText) ;¤        ¤        // restore cursor position //¤        SetSel(iSelStart+1, iSelStart+1) ;¤¤        return TRUE ;								¤      }¤		}¤	}¤	¤	return CEdit::PreTranslateMessage(pMsg);¤}¤¤int CEditMask::ValidateInput(char *pInputText)¤{¤	ASSERT(pInputText != NULL) ;¤¤	if (pInputText == NULL)¤		return 0 ;¤¤	//if (CString(pInputText) == "")¤	//	return 0 ;¤¤  CString stTmp = m_stInputMask ;¤  stTmp.MakeLower() ;¤¤  if (stTmp == "#date#")¤  {¤    #ifdef USESONDATE¤      CSonDateParse SonDateParse ;¤      ¤      if (SonDateParse.Parse(CString(pInputText)) == 0)¤      {¤        // error //¤        ¤      }¤      else¤      {¤        ¤      }¤    #endif  ¤  }¤  else¤  {¤    // match it with the InputMask regular expression	//¤	  CRegExp RegExp ;¤	  RegExp.RegComp(m_stInputMask) ;¤	  ¤	  int iRet = RegExp.RegFind(pInputText) ;¤	  ¤	  if (iRet == -1)¤		  return 0 ;								    // does not match //¤	  else¤		  return iRet + 1;							// matches ! //¤  }¤¤  // should be unreachable //¤  return 0 ;¤}¤¤int CEditMask::SetInputMask(const CString &stInputMask)¤{¤	m_stInputMask = stInputMask ;¤¤	return 1 ;¤}¤¤int CEditMask::SetCallback(EDITINPUTCALLBACK EditInputMask)¤{¤	pEditInputCallback = EditInputMask ;¤	return 1 ;¤}¤¤int CEditMask::CallCallback(CString& stText)¤{¤	if (pEditInputCallback)¤  {¤    ¤    return (pEditInputCallback) (stText) ;¤  }¤¤	return 0 ;¤}¤¤bool CEditMask::SetMaxLenght(int iMaxLength)¤{¤  m_iMaxLength = iMaxLength ;¤¤  return true ;¤}¤¤//#UC END# *470AFDEC0203*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFDEC0203_DESTR_BODY*"
		    value      	(value Text 
|//#UC START# *470AFDEC0203_DESTR_BODY*¤	//#UC END# *470AFDEC0203_DESTR_BODY*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470AFDEC0203_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470AFDEC0203_CUSTOM_INCLUDES*¤#define FLOAT_MASK					        "^(-?)([0-9]*)[.,]?([0-9]*)$"¤#define INT_MASK                    "^(-?)([0-9]*)([0-9]*)$"¤#define FLOAT_MASK_POSITIVE					"^([0-9]*)[.,]?([0-9]*)$"¤#define INT_MASK_POSITIVE           "^([0-9]*)([0-9]*)$"¤¤typedef int (*EDITINPUTCALLBACK)(CString&) ;¤//#UC END# *470AFDEC0203_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470AFDEC0203*"
		    value      	(value Text 
|//#UC START# *470AFDEC0203*¤// Konstruktion¤public:¤	CEditMask();¤// Attribute¤public:¤¤// Operationen¤public:¤¤// Ьberschreibungen¤	// Vom Klassen-Assistenten generierte virtuelle Funktionsьberschreibungen¤	//{{AFX_VIRTUAL(CEditMask)¤	public:¤	virtual BOOL PreTranslateMessage(MSG* pMsg);¤	//}}AFX_VIRTUAL¤¤// Implementierung¤public:¤	bool SetMaxLenght(int iMaxLength);¤	int ValidateInput(char *pInputText);¤	CString m_stInputMask;¤	int SetInputMask(const CString &stInputMask);¤	¤	int SetCallback(EDITINPUTCALLBACK EditInputMask) ;¤	int CallCallback(CString& stText) ;¤	¤	EDITINPUTCALLBACK pEditInputCallback ;¤¤	// Generierte Nachrichtenzuordnungsfunktionen¤protected:¤  int m_iMaxLength ;¤//#UC END# *470AFDEC0203*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"WikiPageID (wiki)"
		    value      	(value Text 
|Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/CEditMask|470AFDEC0203
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFDEC0203_MESSAGE_MAP*"
		    value      	(value Text 
|//#UC START# *470AFDEC0203_MESSAGE_MAP*¤	//#UC END# *470AFDEC0203_MESSAGE_MAP*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (cpp)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (h)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (wiki)"
		    value      	"wiki")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ElementCreationOrder"
		    value      	"16663733038"))
	    quid       	"470AFDEC0203"
	    documentation 	"контрол ввода с возможность фильтрации"
	    stereotype 	"GuiControl"
	    superclasses 	(list inheritance_relationship_list
		(object Inheritance_Relationship
		    quid       	"470AFE110128"
		    supplier   	"Logical View::external::MFCTypes::Controls::CEdit"
		    quidu      	"4655226B0177"))
	    language   	"MDA Generator")
	(object Class "COptionTreeFileDlg"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"AbstarctOperation"
		    value      	"regular")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsNative"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need assign op"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need copy ctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need ref count"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need unsorted less"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"debug log"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"local supervisor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need UC"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need dctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need objcounter"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"no base class"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"non virtual base"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"singleton"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (cpp)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeFileDlg.cpp")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (h)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeFileDlg.h")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFE2C01E4_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470AFE2C01E4_CUSTOM_INCLUDES*¤#include "shared/Core/fix/win_afx.h"¤//#UC END# *470AFE2C01E4_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFE2C01E4*"
		    value      	(value Text 
|//#UC START# *470AFE2C01E4*¤COptionTreeFileDlg::COptionTreeFileDlg()¤{¤	// Initialize variables¤	m_strFilter = _T("");¤	::ZeroMemory(&m_ofn, sizeof(m_ofn));¤	::ZeroMemory(&m_szFile, sizeof(m_szFile));¤	::ZeroMemory(&m_szFileTitle, sizeof(m_szFileTitle));¤	::ZeroMemory(&m_szSelectedFolder, sizeof(m_szSelectedFolder));¤}¤¤COptionTreeFileDlg::COptionTreeFileDlg(BOOL bOpenFileDialog, LPCTSTR lpszDefExt, LPCTSTR lpszFileName, DWORD dwFlags, LPCTSTR lpszFilter, CWnd* pParentWnd)¤{¤	// Set dialog¤	SetDialog(bOpenFileDialog, lpszDefExt, lpszFileName, dwFlags, lpszFilter, pParentWnd);¤}¤¤void COptionTreeFileDlg::SetDialog(BOOL bOpenFileDialog, LPCTSTR lpszDefExt, LPCTSTR lpszFileName, DWORD dwFlags, LPCTSTR lpszFilter, CWnd* pParentWnd)¤{¤	// Declare variables¤	CString strFilter;¤	int nIndex = 0;¤¤	// Store parameters into structure¤	m_bOpenFileDialog = bOpenFileDialog;¤	m_ofn.lpstrDefExt = lpszDefExt;¤	if (lpszFileName != NULL)¤	{¤		_tcscpy(m_szFile, lpszFileName);¤		m_ofn.lpstrFile = m_szFile;¤		m_ofn.nMaxFile = MAX_PATH;¤	}¤	else¤	{¤		m_ofn.lpstrFile = m_szFile;¤		m_ofn.nMaxFile = MAX_PATH;¤	}¤	m_ofn.lpstrFileTitle = m_szFileTitle;¤	m_ofn.nMaxFileTitle = MAX_PATH;¤	m_ofn.Flags = dwFlags | OFN_EXPLORER;¤	if (lpszFilter != NULL)¤	{¤		m_strFilter = lpszFilter;¤		LPTSTR pch = m_strFilter.GetBuffer(0);¤		while ((pch = _tcschr(pch, '|')) != NULL)¤		{¤			*pch++ = '\0';¤		}¤		m_ofn.lpstrFilter = m_strFilter;¤	}¤	if (pParentWnd != NULL)¤	{¤		m_ofn.hwndOwner = pParentWnd->GetSafeHwnd();¤	}¤}¤int COptionTreeFileDlg::DoModal()¤{¤	// Declare variables¤	BOOL bRetValue;¤	DWORD dwWinMajor;¤¤	// Get OS version¤	dwWinMajor = (DWORD)(LOBYTE(LOWORD(::GetVersion())));¤	if (dwWinMajor >= 5)¤	{¤    // ce¤		m_ofn.lStructSize = sizeof(OPENFILENAME);//m_ofn);¤	}¤	else¤	{¤		m_ofn.lStructSize = sizeof(OPENFILENAME);¤	}¤	// Execute dialog¤	if (m_bOpenFileDialog)¤	{¤		bRetValue = ::GetOpenFileName(&m_ofn);¤	}¤	else¤	{¤		bRetValue = ::GetSaveFileName(&m_ofn);¤	}¤¤	return (bRetValue ? IDOK : IDCANCEL);¤}¤¤CString COptionTreeFileDlg::GetPathName() const¤{¤	return m_ofn.lpstrFile;¤}¤¤CString COptionTreeFileDlg::GetFileName() const¤{¤	return m_ofn.lpstrFileTitle;¤}¤¤CString COptionTreeFileDlg::GetFileTitle() const¤{¤	TCHAR szTitle[MAX_PATH];¤¤	// Validate¤	if (m_ofn.lpstrFile == NULL)¤	{¤		return  _T("");¤	}¤¤	// Split path into components¤	_tsplitpath(m_ofn.lpstrFile, NULL, NULL, szTitle, NULL);¤¤	return szTitle;¤}¤¤CString COptionTreeFileDlg::GetFileExt() const¤{¤	// Declare variables¤	TCHAR szExt[MAX_PATH];¤¤	// Validate¤	if (m_ofn.lpstrFile == NULL)¤	{¤		return  _T("");¤	}¤¤	// Split path into components¤	_tsplitpath(m_ofn.lpstrFile, NULL, NULL, NULL, szExt);¤¤	memmove(szExt, szExt + 1,strlen(szExt) -1);¤	szExt[strlen(szExt) -1] = '\0';¤¤	return szExt;¤}¤¤CString COptionTreeFileDlg::GetFileDir() const¤{¤	// Declare variables¤	TCHAR szDrive[MAX_PATH];¤	TCHAR szDir[MAX_PATH];¤¤	// Validate¤	if (m_ofn.lpstrFile == NULL)¤	{¤		return  _T("");¤	}¤¤	// Split path into components¤	_tsplitpath(m_ofn.lpstrFile, szDrive, szDir, NULL, NULL);¤	::lstrcat(szDrive, szDir);¤¤	return szDrive;¤}¤¤CString COptionTreeFileDlg::GetFileDrive() const¤{¤	// Declare variables¤	TCHAR szDrive[MAX_PATH];¤¤	// Validate¤	if (m_ofn.lpstrFile == NULL)¤	{¤		return  _T("");¤	}¤¤	// Split path into components¤	_tsplitpath(m_ofn.lpstrFile, szDrive, NULL, NULL, NULL);¤¤	return szDrive;¤}¤¤POSITION COptionTreeFileDlg::GetStartPosition() const¤{¤	return (POSITION)m_ofn.lpstrFile;¤}¤¤CString COptionTreeFileDlg::GetNextPathName(POSITION& pos) const¤{¤	// Declare variables¤	BOOL bExplorer = m_ofn.Flags & OFN_EXPLORER;¤	TCHAR chDelimiter;¤	LPTSTR lpsz;¤	CString strPath;¤	LPTSTR lpszPath;¤	LPTSTR lpszFileName;¤	CString strFileName;¤¤	// Explorer?¤	if (bExplorer)¤	{¤		chDelimiter = _T('\0');¤	}¤	else¤	{¤		chDelimiter = _T(' ');¤	}¤¤	// Get it¤	lpsz = (LPTSTR)pos;¤	if (lpsz == m_ofn.lpstrFile) ¤	{¤		if ((m_ofn.Flags & OFN_ALLOWMULTISELECT) == FALSE)¤		{¤			pos = NULL;¤			return m_ofn.lpstrFile;¤		}¤¤		// -- find char pos after first Delimiter¤		while(*lpsz != chDelimiter && *lpsz != '\0')¤			lpsz = _tcsinc(lpsz);¤		lpsz = _tcsinc(lpsz);¤¤		// -- If single selection then return only selection¤		if (*lpsz == 0)¤		{¤			pos = NULL;¤			return m_ofn.lpstrFile;¤		}¤	}¤	strPath = m_ofn.lpstrFile;¤	if (!bExplorer)¤	{¤		lpszPath = m_ofn.lpstrFile;¤		while(*lpszPath != chDelimiter)¤		{¤			lpszPath = _tcsinc(lpszPath);¤		}¤		strPath = strPath.Left(lpszPath - m_ofn.lpstrFile);¤	}¤	lpszFileName = lpsz;¤	strFileName = lpsz;¤¤	// Find char pos at next Delimiter¤	while(*lpsz != chDelimiter && *lpsz != '\0')¤	{¤		lpsz = _tcsinc(lpsz);¤	}¤¤	if (!bExplorer && *lpsz == '\0')¤	{¤		pos = NULL;¤	}¤	else¤	{¤		if (!bExplorer)¤		{¤			strFileName = strFileName.Left(lpsz - lpszFileName);¤		}¤¤		// -- If double terminated then done¤		lpsz = _tcsinc(lpsz);¤		if (*lpsz == '\0') ¤		{¤			pos = NULL;¤		}¤		else¤		{¤			pos = (POSITION)lpsz;¤		}¤	}¤¤	// -- Only add '\\' if it is needed¤	if (!strPath.IsEmpty())¤	{¤		// -- check for last back-slash or forward slash (handles DBCS)¤		LPCTSTR lpsz = _tcsrchr(strPath, '\\');¤		if (lpsz == NULL)¤		{¤			lpsz = _tcsrchr(strPath, '/');¤		}¤		// -- if it is also the last character, then we don't need an extra¤		if (lpsz != NULL &&	(lpsz - (LPCTSTR)strPath) == strPath.GetLength()-1)¤		{¤			ASSERT(*lpsz == '\\' || *lpsz == '/');¤			return strPath + strFileName;¤		}¤	}¤¤	return strPath + '\\' + strFileName;¤}¤¤int COptionTreeFileDlg::SelectFolder(LPCTSTR lpszTitle, LPCTSTR lpszStartPath, UINT ulFlags, CWnd* pParentWnd)¤{¤	// Declare variables¤	LPMALLOC pMalloc;¤	BROWSEINFO bi;¤	LPITEMIDLIST pidl;¤	int	nRetValue = IDCANCEL;¤	::ZeroMemory(&bi, sizeof(bi));¤¤	// Gets the Shell's default allocator¤	if (::SHGetMalloc(&pMalloc) == NOERROR)¤	{¤		// -- Get help on BROWSEINFO struct - it's got all the bit settings.¤		if (pParentWnd != NULL)¤		{¤			bi.hwndOwner = pParentWnd->GetSafeHwnd();¤		}¤		bi.pidlRoot = NULL;¤		bi.pszDisplayName = m_szSelectedFolder;¤		bi.lpszTitle = lpszTitle;¤		bi.ulFlags = ulFlags;¤		bi.lpfn = BrowseCtrlCallback;¤		bi.lParam = (LPARAM)lpszStartPath;¤		¤		// -- This next call issues the dialog box.¤		if ((pidl = ::SHBrowseForFolder(&bi)) != NULL)¤		{¤			if (::SHGetPathFromIDList(pidl, m_szSelectedFolder))¤			{ ¤				// -- -- At this point pszBuffer contains the selected path¤				nRetValue = IDOK;¤			} ¤¤			// -- -- Free the PIDL allocated by SHBrowseForFolder.¤			pMalloc->Free(pidl);¤		}¤¤		// -- Release the shell's allocator.¤		pMalloc->Release();¤	}¤¤	return nRetValue;¤}¤¤int __stdcall COptionTreeFileDlg::BrowseCtrlCallback(HWND hwnd, UINT uMsg, LPARAM lParam, LPARAM lpData)¤{¤	if (uMsg == BFFM_INITIALIZED && lpData != NULL)¤	{¤		::SendMessage(hwnd, BFFM_SETSELECTION, TRUE, lpData);¤	}¤¤	return 0;¤}¤¤CString COptionTreeFileDlg::GetSelectedFolder() const¤{¤	return m_szSelectedFolder;¤}¤//#UC END# *470AFE2C01E4*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFE2C01E4_DESTR_BODY*"
		    value      	(value Text 
|//#UC START# *470AFE2C01E4_DESTR_BODY*¤	//#UC END# *470AFE2C01E4_DESTR_BODY*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470AFE2C01E4_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470AFE2C01E4_CUSTOM_INCLUDES*¤#include "shlobj.h"¤#include "shared/WinGUI/OptionTreeControls/OptionTreeDef.h"¤#include "shared/WinGUI/OptionTreeControls/OptionTreeRes.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTreeItem.h"¤¤// Structures¤struct OT_OPENFILENAMEEX : public OPENFILENAME ¤{ ¤	void*	m_pvReserved;¤	DWORD	m_dwReserved;¤	DWORD	m_dwFlagsEx;¤};¤//#UC END# *470AFE2C01E4_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470AFE2C01E4*"
		    value      	(value Text 
|//#UC START# *470AFE2C01E4*¤public:¤	int SelectFolder(LPCTSTR lpszTitle = NULL, LPCTSTR lpszStartPath = NULL, UINT ulFlags = BIF_RETURNFSANCESTORS | BIF_RETURNONLYFSDIRS, CWnd* pParentWnd = NULL);¤	POSITION GetStartPosition() const;¤	CString GetNextPathName(POSITION& pos) const;¤	CString GetPathName() const;¤	CString GetFileName() const;¤	CString GetFileTitle() const;¤	CString GetFileExt() const;¤	CString GetFileDir() const;¤	CString GetFileDrive() const;¤	CString GetSelectedFolder() const;¤	virtual int DoModal();¤	void SetDialog(BOOL bOpenFileDialog, LPCTSTR lpszDefExt = NULL, LPCTSTR lpszFileName = NULL, DWORD dwFlags = OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT, LPCTSTR lpszFilter = NULL, CWnd* pParentWnd = NULL);¤	COptionTreeFileDlg(BOOL bOpenFileDialog, LPCTSTR lpszDefExt = NULL, LPCTSTR lpszFileName = NULL, DWORD dwFlags = OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT, LPCTSTR lpszFilter = NULL, CWnd* pParentWnd = NULL);¤	COptionTreeFileDlg();¤¤protected:¤	static int __stdcall BrowseCtrlCallback(HWND hwnd, UINT uMsg, LPARAM lParam, LPARAM lpData);¤¤	OT_OPENFILENAMEEX	m_ofn;¤	BOOL m_bOpenFileDialog;¤	TCHAR m_szFile[MAX_PATH];¤	TCHAR m_szFileTitle[MAX_PATH];¤	TCHAR m_szSelectedFolder[MAX_PATH];¤	CString m_strFilter;¤//#UC END# *470AFE2C01E4*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"WikiPageID (wiki)"
		    value      	(value Text 
|Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeFileDlg|470AFE2C01E4
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (wiki)"
		    value      	"wiki")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (h)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (cpp)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ElementCreationOrder"
		    value      	"16659817900"))
	    quid       	"470AFE2C01E4"
	    documentation 	"диалог выбора файла/папки"
	    stereotype 	"SimpleClass"
	    language   	"MDA Generator")
	(object Class "COptionTreeFontSel"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"AbstarctOperation"
		    value      	"regular")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsNative"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need assign op"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need copy ctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need ref count"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need unsorted less"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"debug log"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"local supervisor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need UC"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need dctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need objcounter"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"no base class"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"non virtual base"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"resizeable"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"singleton"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (h)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeFontSel.h")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (cpp)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeFontSel.cpp")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFEDC003E_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470AFEDC003E_CUSTOM_INCLUDES*¤#include "afximpl2005.h"¤//#UC END# *470AFEDC003E_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFEDC003E*"
		    value      	(value Text 
|//#UC START# *470AFEDC003E*¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeFontSel dialog¤¤¤COptionTreeFontSel::COptionTreeFontSel(DWORD dwFlags, LOGFONT lfFont, LOGFONT lfDefault, CWnd* pParent /*=NULL*/): CDialog(COptionTreeFontSel::IDD, pParent)¤{¤	//{{AFX_DATA_INIT(COptionTreeFontSel)¤	//}}AFX_DATA_INIT¤	¤	// Initialize variables¤	m_strCustomSample = _T("");¤	m_bStrikeOut = FALSE;¤	m_bUnderline = FALSE;¤	m_lfFont = lfFont;¤	m_lfDefault = lfDefault;¤	m_dwDialogFlags = dwFlags;¤	m_uControlID = 0;¤}¤¤COptionTreeFontSel::COptionTreeFontSel(DWORD dwFlags, LOGFONT lfFont, CWnd* pParent /*=NULL*/): CDialog(COptionTreeFontSel::IDD, pParent)¤{¤	//{{AFX_DATA_INIT(COptionTreeFontSel)¤	//}}AFX_DATA_INIT¤	¤	// Initialize variables¤	m_strCustomSample = _T("");¤	m_bStrikeOut = FALSE;¤	m_bUnderline = FALSE;¤	m_lfFont = lfFont;¤	m_lfDefault = lfFont;¤	m_dwDialogFlags = dwFlags;¤	m_uControlID = 0;¤}¤¤COptionTreeFontSel::COptionTreeFontSel(DWORD dwFlags, CHARFORMAT cfFont, CHARFORMAT cfDefault, CWnd* pParent /*=NULL*/): CDialog(COptionTreeFontSel::IDD, pParent)¤{¤	//{{AFX_DATA_INIT(COptionTreeFontSel)¤	//}}AFX_DATA_INIT¤	¤	// Initialize variables¤	m_strCustomSample = _T("");¤	m_bStrikeOut = FALSE;¤	m_bUnderline = FALSE;¤	ConvertFont(m_lfFont, cfFont);¤	ConvertFont(m_lfDefault, cfDefault);¤	m_dwDialogFlags = dwFlags;¤	m_uControlID = 0;¤¤	// Set text color¤	SetTextColor(cfFont.crTextColor);¤	SetDefaultTextColor(cfDefault.crTextColor);¤}¤¤COptionTreeFontSel::COptionTreeFontSel(DWORD dwFlags, CHARFORMAT cfFont, CWnd* pParent /*=NULL*/): CDialog(COptionTreeFontSel::IDD, pParent)¤{¤	//{{AFX_DATA_INIT(COptionTreeFontSel)¤	//}}AFX_DATA_INIT¤	¤	// Initialize variables¤	m_strCustomSample = _T("");¤	m_bStrikeOut = FALSE;¤	m_bUnderline = FALSE;¤	ConvertFont(m_lfFont, cfFont);¤	ConvertFont(m_lfDefault, cfFont);¤	m_dwDialogFlags = dwFlags;¤	m_uControlID = 0;¤¤	// Set text color¤	SetTextColor(cfFont.crTextColor);¤	SetDefaultTextColor(cfFont.crTextColor);¤}¤¤void COptionTreeFontSel::FillFaceNameList()¤{¤	// Declare variables¤	CClientDC dc(NULL);¤¤	// Validate controls¤	if (ValidateControls() == FALSE)¤	{¤		return;¤	}¤	¤	// Clear the list¤	m_ctlFontNames.ResetContent();¤¤	// Create a DC to enumerate¤	EnumFontFamilies(dc.GetSafeHdc(), (LPCTSTR) NULL, (FONTENUMPROC)COptionTreeFontSel::EnumFontFamiliesCallBack, (LPARAM) this);¤¤	// Select the first one¤	if (m_ctlFontNames.SetCurSel(0) != CB_ERR)¤	{¤		// Fill the size list¤		FillSizeStyleList();¤	}¤	else¤	{¤		m_ctlFontNames.EnableWindow(FALSE);¤		m_ctlFontSizes.EnableWindow(FALSE);¤		m_ctlFontStyles.EnableWindow(FALSE);¤		m_ctlUnderline.EnableWindow(FALSE);¤		m_ctlStrikeout.EnableWindow(FALSE);¤	}¤}¤¤void COptionTreeFontSel::FillSizeStyleList()¤{¤	// Declare variables¤	CClientDC dc(NULL);¤	CString strFaceName;¤	int nSel;¤¤	// Validate controls¤	if (ValidateControls() == FALSE)¤	{¤		return;¤	}¤	¤	// Clear the size list¤	m_ctlFontSizes.ResetContent();¤	m_ctlFontStyles.ResetContent();¤	m_nStyles = 0L;¤¤	// Fill with "real" sizes¤	nSel = m_ctlFontNames.GetCurSel();¤	if (nSel == CB_ERR)¤	{¤		return;¤	}¤	m_ctlFontNames.GetLBText(nSel, strFaceName);¤¤	// Enumerate¤	EnumFontFamilies(dc.GetSafeHdc(), (LPCTSTR) strFaceName, (FONTENUMPROC) COptionTreeFontSel::EnumFontFamiliesCallBack2, (LPARAM) this);¤¤	// Check if we have a font that is either a vector or Truettype font¤	if (m_ctlFontNames.GetFontType() != RASTER_FONTTYPE)¤	{¤		// -- Fill with "common" sizes¤		for (int i = 0; i < _countof(_afxTTDefaults); i++)¤		{¤			m_ctlFontSizes.AddSize(_afxTTDefaults[i], 0);¤		}¤	}¤¤	// See what fonts are native¤	BOOL bRegular = (BOOL)(m_nStyles & NTM_REGULAR);¤	BOOL bBold = (BOOL)(m_nStyles & NTM_BOLD);¤	BOOL bItalic = (BOOL)(m_nStyles & NTM_ITALIC);¤	BOOL bBoldItalic = (BOOL)((m_nStyles & NTM_BOLD) && (m_nStyles & NTM_ITALIC));¤¤	// Allow for "synthesized" italic && bold variants¤	if (bRegular)¤	{¤		bBold = bItalic = TRUE;¤	}¤	if (bBold || bItalic)¤	{¤		bBoldItalic = TRUE;¤	}¤¤	// Fill the styles list box¤	CString strStyle;¤	int nEntry;¤	if (bRegular)¤	{¤		strStyle.LoadString(AFX_IDS_REGULAR);¤		nEntry = m_ctlFontStyles.AddString(strStyle);¤		m_ctlFontStyles.SetItemData(nEntry, (DWORD)NTM_REGULAR);¤	}¤	if (bBold)¤	{¤		strStyle.LoadString(AFX_IDS_BOLD);¤		nEntry = m_ctlFontStyles.AddString(strStyle);¤		m_ctlFontStyles.SetItemData(nEntry, (DWORD)NTM_BOLD);¤	}¤	if (bItalic)¤	{¤		strStyle.LoadString(AFX_IDS_ITALIC);¤		nEntry = m_ctlFontStyles.AddString(strStyle);¤		m_ctlFontStyles.SetItemData(nEntry, (DWORD)NTM_ITALIC);¤	}¤	if (bBoldItalic)¤	{¤		strStyle.LoadString(AFX_IDS_BOLDITALIC);¤		nEntry = m_ctlFontStyles.AddString(strStyle);¤		m_ctlFontStyles.SetItemData(nEntry, (DWORD)NTM_ITALIC | NTM_BOLD);¤	}¤¤	// Set the point size¤	if (m_ctlFontSizes.FindString(-1, m_strFontSize) != CB_ERR)¤	{¤		nEntry = m_ctlFontSizes.SelectString(-1, m_strFontSize);¤		if (nEntry == CB_ERR)¤		{¤			return;¤		}¤	}¤	else¤	{¤		// -- Point size is not in the list so just fill the edit box¤		// and don't select anything from the list¤		m_ctlFontSizes.SetCurSel(-1);¤		m_ctlFontSizes.SetWindowText(m_strFontSize);¤	}¤¤	// Set the styles combo box selection¤	BOOL bFound = FALSE;¤	int nMaxEntries = m_ctlFontStyles.GetCount();¤	for (int nEntry3 = 0; nEntry3 < nMaxEntries; nEntry3++)¤	{¤		if (m_ctlFontStyles.GetItemData(nEntry3) == m_nActualStyle)¤		{¤			m_ctlFontStyles.SetCurSel(nEntry3);¤			bFound = TRUE;¤		}¤	}¤¤	if (bFound == FALSE)¤	{¤		// -- Set style to regular¤		m_ctlFontStyles.SetCurSel(0);      ¤		m_nCurrentStyle = NTM_REGULAR;¤	}¤	else¤	{¤		m_nCurrentStyle = m_nActualStyle;¤	}¤¤	// Redraw the sample¤	UpdateSampleFont();¤}¤¤int CALLBACK COptionTreeFontSel::EnumFontFamiliesCallBack(ENUMLOGFONT *lpelf, NEWTEXTMETRIC *, int nFontType, LPARAM lParam)¤{¤	// Declare variables¤	COptionTreeFontSel *pDlg = (COptionTreeFontSel *)lParam;¤	¤	// Validate¤	ASSERT(pDlg);¤¤	// Setup styles¤	// -- True type¤	if (nFontType & TRUETYPE_FONTTYPE)¤	{¤		// -- Add font¤		pDlg->m_ctlFontNames.AddFont(&lpelf->elfLogFont, nFontType);¤	}¤	// -- Raster¤	else¤	{¤		// -- True type only¤		if (pDlg->GetDialogFlags() & OT_FS_TTONLY)¤		{¤			return 1;¤		}¤¤		// -- Add font¤		pDlg->m_ctlFontNames.AddFont(&lpelf->elfLogFont, nFontType);¤	}¤¤¤	return 1;¤}¤¤int CALLBACK COptionTreeFontSel::EnumFontFamiliesCallBack2(ENUMLOGFONT* lpelf, NEWTEXTMETRIC* lpntm, int nFontType, LPARAM lParam)¤{¤	// Declare variables¤	COptionTreeFontSel *pDlg = (COptionTreeFontSel *)lParam;¤	¤	// Validate¤	ASSERT(pDlg);¤	¤	// Setup styles¤	// -- True type¤	if (nFontType & TRUETYPE_FONTTYPE)¤	{¤		if (!(lpntm->ntmFlags & (NTM_BOLD | NTM_ITALIC)))¤		{¤			pDlg->m_nStyles |= NTM_REGULAR;¤		}¤¤		if (lpntm->ntmFlags & NTM_ITALIC)¤		{¤			pDlg->m_nStyles |= NTM_ITALIC;¤		}¤¤		if (lpntm->ntmFlags & NTM_BOLD)¤		{¤			pDlg->m_nStyles |= NTM_BOLD;¤		}¤	}¤	// -- Raster¤	else¤	{¤		// -- True type only¤		if (pDlg->GetDialogFlags() & OT_FS_TTONLY)¤		{¤			return 1;¤		}¤¤		if (nFontType & RASTER_FONTTYPE)¤		{¤			int nHeight = lpntm->tmHeight - lpntm->tmInternalLeading;¤			pDlg->m_ctlFontSizes.AddSize(MulDiv(nHeight, 72, afxData.cyPixelsPerInch), nHeight);¤		}¤¤		if (lpelf->elfLogFont.lfWeight >= FW_BOLD && lpelf->elfLogFont.lfItalic)¤		{¤			pDlg->m_nStyles |= NTM_BOLD | NTM_ITALIC;¤		}¤		else if (lpelf->elfLogFont.lfWeight >= FW_BOLD)¤		{¤			pDlg->m_nStyles |= NTM_BOLD;¤		}¤		else if (lpelf->elfLogFont.lfItalic)¤		{¤			pDlg->m_nStyles |= NTM_ITALIC;¤		}¤		else¤		{¤			pDlg->m_nStyles |= NTM_REGULAR;¤		}¤	}¤¤¤	return 1;¤}¤¤void COptionTreeFontSel::UpdateSampleFont()¤{¤	// Validate¤	ASSERT(m_ctlFontNames.GetFontItem());¤¤	// Declare variables¤	LOGFONT lf;¤	CRect rcSample;¤	CString strCharSet;¤    memset(&lf, 0, sizeof(LOGFONT));¤¤	// Validate controls¤	if (ValidateControls() == FALSE)¤	{¤		return;¤	}¤¤	// Get log font¤	lf = *m_ctlFontNames.GetLogFont();¤¤	// Get size¤	m_ctlFontSizes.UpdateLogFont(&lf);¤¤	// Handle styles¤	if (m_nCurrentStyle & NTM_BOLD)¤	{¤		lf.lfWeight = FW_BOLD;¤	}¤	else¤	{¤		lf.lfWeight = FW_REGULAR;¤	}¤	if (m_nCurrentStyle & NTM_ITALIC)¤	{¤		lf.lfItalic = TRUE;¤	}¤	else¤	{¤		lf.lfItalic = FALSE;¤	}¤	lf.lfStrikeOut = (unsigned char)m_bStrikeOut;¤	lf.lfUnderline = (unsigned char)m_bUnderline;¤¤	// Create font¤	if (m_fSampleFont.GetSafeHandle() != NULL)¤	{¤		m_fSampleFont.DeleteObject();¤	}¤	m_fSampleFont.CreateFontIndirect(&lf);¤¤	// Redraw window¤	m_ctlSample.GetWindowRect(&rcSample);¤	ScreenToClient(&rcSample);¤¤	InvalidateRect(rcSample);¤}¤¤void COptionTreeFontSel::OnPaint() ¤{¤	// Declare variables¤	CPaintDC dc(this);¤	CRect rcText;¤	CFont *oldFont;¤	CSize sTextExtent;¤	COLORREF crText;¤	TEXTMETRIC tm;¤	int nBkMode, nLen, x, y;¤	CString strSample;¤	//LOGFONT lf;¤¤  if(m_strCustomSample.GetLength() == 0)¤    strSample.LoadString(AFX_IDS_SAMPLETEXT);	¤  else¤    strSample=m_strCustomSample;¤  /*¤	// Load sample text¤	if (m_dwDialogFlags & OT_FS_CUSTOMSAMPLE)¤	{¤		strSample = m_strCustomSample;¤	}¤	else if (m_dwDialogFlags & OT_FS_FONTNAMESAMPLE)¤	{¤		m_fSampleFont.GetLogFont(&lf);¤		strSample.Format("%s", lf.lfFaceName);¤	}¤	else¤	{¤		strSample.LoadString(AFX_IDS_SAMPLETEXT);	¤	}¤  */¤	// If there is no sample font abort¤	if (!m_fSampleFont.GetSafeHandle())¤	{¤		return;¤	}¤¤	// Get the bounding box¤	m_ctlSample.GetWindowRect(&rcText);¤	ScreenToClient(&rcText);¤¤	// Select the new font and colors into the dc¤	oldFont = dc.SelectObject(&m_fSampleFont);¤	crText = dc.SetTextColor(m_ctlButtonColor.GetColor());¤	nBkMode = dc.SetBkMode(TRANSPARENT);¤¤	// Calculate the position of the text¤	dc.GetTextMetrics(&tm);¤¤	nLen = strSample.GetLength();¤	sTextExtent = dc.GetTextExtent(strSample, nLen);¤	sTextExtent.cy = tm.tmAscent - tm.tmInternalLeading;¤¤	if ((sTextExtent.cx >= (rcText.right - rcText.left)) || (sTextExtent.cx <= 0))¤	{¤		x = rcText.left;¤	}¤	else¤	{¤		x = rcText.left + ((rcText.right - rcText.left) - sTextExtent.cx) / 2;¤	}¤¤	y = std::min(rcText.bottom, rcText.bottom - ((rcText.bottom - rcText.top) - sTextExtent.cy) / 2);¤¤	// Draw it¤	dc.ExtTextOut(x, y - (tm.tmAscent), ETO_CLIPPED, &rcText, strSample, nLen, NULL);¤¤	// Put the DC back the way it was¤	dc.SetBkMode(nBkMode);¤	dc.SetTextColor(crText);¤	dc.SelectObject(oldFont);¤}¤¤void COptionTreeFontSel::OnButtonOK() ¤{¤	// Get current font¤	GetSelectedFont(m_lfFont);¤¤	// End dialog¤	EndDialog(ID_FONTSEL_OK);¤}¤¤void COptionTreeFontSel::OnButtonCancel() ¤{¤	// Get current font¤	m_lfFont = *m_ctlFontNames.GetLogFont();¤¤	// Update size¤	m_ctlFontSizes.UpdateLogFont(&m_lfFont);¤¤	// Close dialog¤	EndDialog(ID_FONTSEL_CANCEL);¤}¤¤¤void COptionTreeFontSel::OnButtonDefault() ¤{¤	// Select default font¤	SelectCurFont(m_lfDefault);¤¤	// Select color¤	m_ctlButtonColor.SetColor(m_ctlButtonColor.GetDefaultColor());¤	¤	// Update sample¤	UpdateSampleFont();¤}¤¤void COptionTreeFontSel::OnObjectsChanged()¤{¤	// Fill font names¤	FillFaceNameList();¤¤	// Update sample¤	UpdateSampleFont();¤}¤¤void COptionTreeFontSel::OnEditUpdateFontNames()¤{¤	// When the users entry matches an entry in the list, select it¤	CString str;¤	m_ctlFontNames.GetWindowText(str);¤	int nEntry = m_ctlFontNames.FindStringExact(-1, str);¤	if (nEntry != CB_ERR)¤	{¤		m_ctlFontNames.SetCurSel(nEntry);¤		m_ctlFontNames.SetEditSel(-1, -1);¤¤		// -- Re-fill the size list¤		FillSizeStyleList();¤	}¤}¤¤void COptionTreeFontSel::OnEditUpdateFontSizes()¤{¤	// When the users entry matches an entry in the list, select it¤	m_ctlFontSizes.GetWindowText(m_strFontSize);¤	int nEntry = m_ctlFontSizes.FindStringExact(-1, m_strFontSize);¤	if (nEntry != CB_ERR)¤	{¤		m_ctlFontSizes.SetCurSel(nEntry);¤		m_ctlFontSizes.SetEditSel(-1, -1);¤¤		// -- Update the sample text¤		UpdateSampleFont();¤	}¤}¤¤void COptionTreeFontSel::OnSelChangeFontNames()¤{¤	FillSizeStyleList();¤}¤¤void COptionTreeFontSel::OnSelChangeFontSizes()¤{¤	int nSel = m_ctlFontSizes.GetCurSel();¤	if (nSel != CB_ERR)¤	{¤		m_ctlFontSizes.GetLBText(nSel, m_strFontSize);¤		UpdateSampleFont();¤	}¤}¤¤void COptionTreeFontSel::OnSelChangeFontStyles()¤{¤	int nSel = m_ctlFontStyles.GetCurSel();¤	m_nCurrentStyle = m_ctlFontStyles.GetItemData(nSel);¤	m_nActualStyle = m_nCurrentStyle;¤¤	// Update the sample font¤	UpdateSampleFont();¤}¤¤void COptionTreeFontSel::OnEditChangeFontStyles()¤{¤	// when the users entry matches an entry in the list, select it¤	CString str;¤	m_ctlFontStyles.GetWindowText(str);¤	int nEntry = m_ctlFontStyles.FindStringExact(-1, str);¤	if (nEntry != CB_ERR)¤	{¤		m_ctlFontStyles.SetCurSel(nEntry);¤		m_ctlFontStyles.SetEditSel(-1, -1);¤¤		// Update the sample text¤		m_nCurrentStyle = m_ctlFontStyles.GetItemData(nEntry);¤		m_nActualStyle = m_nCurrentStyle;¤		UpdateSampleFont();¤	}¤}¤¤void COptionTreeFontSel::OnStrikeout()¤{¤	if (m_ctlStrikeout.GetCheck() == 1)¤		m_bStrikeOut = TRUE;¤	else¤		m_bStrikeOut = FALSE;¤¤	UpdateSampleFont();¤}¤¤void COptionTreeFontSel::OnUnderline()¤{¤	if (m_ctlUnderline.GetCheck() == 1)¤		m_bUnderline = TRUE;¤	else¤		m_bUnderline = FALSE;¤¤	UpdateSampleFont();¤}¤¤void COptionTreeFontSel::SetDefaultTextColor(COLORREF crColor)¤{¤	// Set default color¤	m_ctlButtonColor.SetDefaultColor(crColor);¤}¤¤void COptionTreeFontSel::SetTextColor(COLORREF crColor)¤{¤	// Set color¤	m_ctlButtonColor.SetColor(crColor);¤}¤¤COLORREF COptionTreeFontSel::GetDefaultTextColor()¤{¤	return m_ctlButtonColor.GetDefaultColor();¤}¤¤COLORREF COptionTreeFontSel::GetTextColor()¤{¤	return m_ctlButtonColor.GetColor();¤}¤¤long COptionTreeFontSel::OnSelChangeColor(UINT lParam, long wParam)¤{¤	// Update the sample font¤	UpdateSampleFont();¤¤	return TRUE;¤}¤¤void COptionTreeFontSel::SelectCurFont(LOGFONT lf)¤{¤	// Declare variables¤	CPaintDC dc(this);¤	int nEntry;¤	BOOL bFound = FALSE;¤	int nMaxEntries;¤	CString strFace;¤¤	// Validate controls¤	if (ValidateControls() == FALSE)¤	{¤		return;¤	}¤¤	// Select font name¤	strFace.Format("%s", lf.lfFaceName);¤	if (m_ctlFontNames.SelectFontName(strFace) == FALSE)¤	{¤		m_ctlFontNames.SetCurSel(0);¤	}¤¤	// Fill size list for this font name¤	FillSizeStyleList();¤	¤	// Size¤	m_strFontSize.Format("%d", abs(MulDiv(lf.lfHeight, 72, dc.GetDeviceCaps(LOGPIXELSY))));¤¤	// Underline¤	if (lf.lfUnderline == TRUE)¤	{¤		m_bUnderline = TRUE;¤	}¤	else¤	{¤		m_bUnderline = FALSE;¤	}¤	m_ctlUnderline.SetCheck(m_bUnderline);¤¤	// Strikeout¤	if (lf.lfStrikeOut == TRUE)¤	{¤		m_bStrikeOut = TRUE;¤	}¤	else¤	{¤		m_bStrikeOut = FALSE;¤	}¤	m_ctlStrikeout.SetCheck(m_bStrikeOut);¤¤	// Styles¤	if (lf.lfWeight >= FW_BOLD && lf.lfItalic)¤	{¤		m_nActualStyle = NTM_BOLD | NTM_ITALIC;¤	}¤	else if (lf.lfWeight >= FW_BOLD)¤	{¤		m_nActualStyle = NTM_BOLD;¤	}¤	else if (lf.lfItalic)¤	{¤		m_nActualStyle = NTM_ITALIC;¤	}¤	else¤	{¤		m_nActualStyle = NTM_REGULAR;¤	}¤¤	// Select the size¤	// -- Set the point size¤	if (m_ctlFontSizes.FindString(-1, m_strFontSize) != CB_ERR)¤	{¤		nEntry = m_ctlFontSizes.SelectString(-1, m_strFontSize);¤		if (nEntry == CB_ERR)¤		{¤			return;¤		}¤	}¤	else¤	{¤		// -- -- Point size is not in the list so just fill the edit box¤		// and don't select anything from the list¤		m_ctlFontSizes.SetCurSel(-1);¤		m_ctlFontSizes.SetWindowText(m_strFontSize);¤	}¤¤¤	// Set the styles combo box selection¤	bFound = FALSE;¤	nMaxEntries = m_ctlFontStyles.GetCount();¤	for (int nEntry3 = 0; nEntry3 < nMaxEntries; nEntry3++)¤	{¤		if (m_ctlFontStyles.GetItemData(nEntry3) == m_nActualStyle)¤		{¤			m_ctlFontStyles.SetCurSel(nEntry3);¤			bFound = TRUE;¤		}¤	}¤¤	if (!bFound)¤	{¤		// -- Set style to regular¤		m_ctlFontStyles.SetCurSel(0);      ¤		m_nCurrentStyle = NTM_REGULAR;¤	}¤	else¤	{¤		m_nCurrentStyle = m_nActualStyle;¤	}¤¤	// Update sample¤	UpdateSampleFont();¤}¤¤void COptionTreeFontSel::SetDefaultFont(LOGFONT lf)¤{¤	// Save font¤	m_lfDefault = lf;¤}¤¤void COptionTreeFontSel::SetCurFont(LOGFONT lf)¤{¤	// Save font¤	m_lfFont = lf;¤¤	// Objects changes¤	OnObjectsChanged();¤}¤¤void COptionTreeFontSel::SetDefaultFont(CHARFORMAT cfFont)¤{¤	// Declare variables¤	LOGFONT lf = {0};¤¤	// Copy font¤	ConvertFont(lf, cfFont);¤¤	// Save font¤	m_lfDefault = lf;¤}¤¤void COptionTreeFontSel::SetCurFont(CHARFORMAT cfFont)¤{¤	// Declare variables¤	LOGFONT lf = {0};¤¤	// Copy font¤	ConvertFont(lf, cfFont);¤¤	// Save font¤	m_lfFont = lf;¤¤	// Objects changes¤	OnObjectsChanged();¤}¤¤BOOL COptionTreeFontSel::ValidateControls()¤{¤	// Validate¤	if (!IsWindow(m_ctlFontStyles.GetSafeHwnd()))¤	{¤		return FALSE;¤	}¤	if (!IsWindow(m_ctlFontSizes.GetSafeHwnd()))¤	{¤		return FALSE;¤	}¤	if (!IsWindow(m_ctlFontNames.GetSafeHwnd()))¤	{¤		return FALSE;¤	}¤	if (!IsWindow(m_ctlUnderline.GetSafeHwnd()))¤	{¤		return FALSE;¤	}¤	if (!IsWindow(m_ctlStrikeout.GetSafeHwnd()))¤	{¤		return FALSE;¤	}¤	if (!IsWindow(m_ctlButtonDefault.GetSafeHwnd()))¤	{¤		return FALSE;¤	}¤	if (!IsWindow(m_ctlButtonColor.GetSafeHwnd()))¤	{¤		return FALSE;¤	}¤¤	return TRUE;¤}¤¤void COptionTreeFontSel::OnSelChangeFontScript()¤{¤	// Update sample¤	UpdateSampleFont();¤}¤¤void COptionTreeFontSel::OnButtonApply()¤{¤	// Declare variables¤	CHARFORMAT cfFont = {0};¤	LOGFONT lf;¤	CWnd *pParent = GetParent();¤¤	// Validate parent window¤	if (pParent == NULL)¤	{¤		return;¤	}¤	if (!::IsWindow(pParent->GetSafeHwnd()))¤	{¤		return;¤	}¤¤	// Get fonts¤	GetSelectedFont(lf);¤	ConvertFont(cfFont, lf);¤¤	// Notify parent¤	if (m_dwDialogFlags & OT_FS_USECHARFORMAT)¤	{¤		::SendMessage(pParent->GetSafeHwnd(), OT_FS_NOTIFY_APPLY, (WPARAM) m_uControlID, (LPARAM) &cfFont);¤	}¤	else¤	{¤		::SendMessage(pParent->GetSafeHwnd(), OT_FS_NOTIFY_APPLY, (WPARAM) m_uControlID, (LPARAM) &lf);¤	}¤¤}¤¤void COptionTreeFontSel::ConvertFont(CHARFORMAT &cfFont, LOGFONT &lf)¤{	¤	// Declare variables¤	CDC dc;¤	dc.CreateDC(_T("DISPLAY"), NULL, NULL, NULL);¤	long yPerInch = dc.GetDeviceCaps(LOGPIXELSY);¤¤	// Convert Font¤	cfFont.dwMask = CFM_COLOR | CFM_SIZE | CFM_FACE | CFM_UNDERLINE | CFM_BOLD | CFM_ITALIC | CFM_STRIKEOUT;¤	cfFont.dwEffects = 0;¤	// -- Face¤	strcpy(cfFont.szFaceName, lf.lfFaceName);¤	// -- Pitch and family¤	cfFont.bPitchAndFamily = lf.lfPitchAndFamily;¤	// -- Size¤	cfFont.yHeight = ((1440 / yPerInch) * abs(lf.lfHeight));¤	// -- Bold¤	if (lf.lfWeight >= FW_BOLD)¤	{¤		cfFont.dwEffects |= CFE_BOLD;¤	}¤	// -- Italic¤	if (lf.lfItalic == TRUE)¤	{¤		cfFont.dwEffects |= CFE_ITALIC;¤	}¤	// -- Underline¤	if (lf.lfUnderline == TRUE)¤	{¤		cfFont.dwEffects |= CFE_UNDERLINE;¤	}¤	// -- Strikeout¤	if (lf.lfStrikeOut == TRUE)¤	{¤		cfFont.dwEffects |= CFE_STRIKEOUT;¤	}¤	// -- Character set¤	cfFont.bCharSet = lf.lfCharSet;¤	cfFont.dwEffects |= CFM_CHARSET;¤	// -- Text color¤	cfFont.crTextColor = GetTextColor();	¤}¤¤void COptionTreeFontSel::ConvertFont(LOGFONT &lf, CHARFORMAT &cfFont)¤{¤	// Declare variables¤	CDC dc;¤	dc.CreateDC(_T("DISPLAY"), NULL, NULL, NULL);¤	long yPerInch = dc.GetDeviceCaps(LOGPIXELSY);¤¤¤	// Create log font¤	// -- Font name¤	lf.lfOutPrecision = OUT_DEFAULT_PRECIS;¤	lf.lfClipPrecision = CLIP_DEFAULT_PRECIS;¤	lf.lfQuality = DEFAULT_QUALITY;¤	lf.lfPitchAndFamily = cfFont.bPitchAndFamily;¤	strcpy(lf.lfFaceName, cfFont.szFaceName);¤	// -- Size¤	lf.lfHeight = abs(((cfFont.yHeight * yPerInch) / 1440));¤	lf.lfWidth = 0;¤	lf.lfEscapement = 0;¤	// -- Bold¤	if (cfFont.dwEffects & CFE_BOLD)¤	{¤		lf.lfWeight = FW_BOLD;¤	}¤	else¤	{¤		lf.lfWeight = FW_NORMAL;¤	}¤	// -- Strikeout¤	if (cfFont.dwEffects & CFE_STRIKEOUT)¤	{¤		lf.lfStrikeOut = TRUE;¤	}¤	else¤	{¤		lf.lfStrikeOut = FALSE;¤	}¤	// -- Underline¤	if (cfFont.dwEffects & CFE_UNDERLINE)¤	{¤		lf.lfUnderline = TRUE;¤	}¤	else¤	{¤		lf.lfUnderline = FALSE;¤	}¤	// -- Italic¤	if (cfFont.dwEffects & CFE_ITALIC)¤	{¤		lf.lfItalic = TRUE;¤	}¤	else¤	{¤		lf.lfItalic = FALSE;¤	}¤}¤¤¤void COptionTreeFontSel::GetSelectedFont(LOGFONT &lf)¤{¤	// Validate controls¤	if (ValidateControls() == FALSE)¤	{¤		return;¤	}¤¤	// Get log font¤	lf = *m_ctlFontNames.GetLogFont();¤¤	// Get size¤	m_ctlFontSizes.UpdateLogFont(&lf);¤¤	// Handle styles¤	if (m_nCurrentStyle & NTM_BOLD)¤	{¤		lf.lfWeight = FW_BOLD;¤	}¤	else¤	{¤		lf.lfWeight = FW_REGULAR;¤	}¤	if (m_nCurrentStyle & NTM_ITALIC)¤	{¤		lf.lfItalic = TRUE;¤	}¤	else¤	{¤		lf.lfItalic = FALSE;¤	}¤	lf.lfStrikeOut = (unsigned char)m_bStrikeOut;¤	lf.lfUnderline = (unsigned char)m_bUnderline;¤}¤¤DWORD COptionTreeFontSel::GetDialogFlags()¤{¤	return m_dwDialogFlags;¤}¤¤void COptionTreeFontSel::SetCustomSample(CString strSample)¤{¤	// Save variable¤	m_strCustomSample = strSample;¤}¤¤void COptionTreeFontSel::GetLogFont(LOGFONT &lf)¤{¤	// Get selected font¤	lf = m_lfFont;¤}¤¤void COptionTreeFontSel::GetCharFormat(CHARFORMAT &cf)¤{	¤	// Convert font¤	ConvertFont(cf, m_lfFont);¤}¤¤void COptionTreeFontSel::SetControlID(UINT uID)¤{¤	m_uControlID = uID;¤}¤¤//#UC END# *470AFEDC003E*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFEDC003E_CTOR_BASE_INIT*"
		    value      	"//#UC START# *470AFEDC003E_CTOR_BASE_INIT*¤//#UC END# *470AFEDC003E_CTOR_BASE_INIT*")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFEDC003E_CTOR*"
		    value      	(value Text 
|//#UC START# *470AFEDC003E_CTOR*¤	// Initialize variables¤	m_strCustomSample = _T("");¤	m_bStrikeOut = FALSE;¤	m_bUnderline = FALSE;¤	m_dwDialogFlags = NULL;¤	m_uControlID = 0;¤	//#UC END# *470AFEDC003E_CTOR*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFEDC003E_DESTR_BODY*"
		    value      	(value Text 
|//#UC START# *470AFEDC003E_DESTR_BODY*¤	// Reallocate¤	if (m_fSampleFont.GetSafeHandle() != NULL)¤	{¤		m_fSampleFont.DeleteObject();¤	}¤	//#UC END# *470AFEDC003E_DESTR_BODY*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFEDC003E_MESSAGE_MAP*"
		    value      	(value Text 
|//#UC START# *470AFEDC003E_MESSAGE_MAP*¤	ON_WM_PAINT()¤	ON_BN_CLICKED(ID_FONTSEL_OK, OnButtonOK)¤	ON_BN_CLICKED(ID_FONTSEL_CANCEL, OnButtonCancel)¤	ON_BN_CLICKED(ID_FONTSEL_DEFAULT, OnButtonDefault)¤	ON_BN_CLICKED(ID_FONTSEL_APPLY, OnButtonApply)¤	ON_CBN_EDITUPDATE(ID_COMBO_FONT, OnEditUpdateFontNames)¤	ON_CBN_EDITUPDATE(ID_COMBO_SIZE, OnEditUpdateFontSizes)¤	ON_CBN_SELCHANGE(ID_COMBO_FONT, OnSelChangeFontNames)¤	ON_CBN_SELCHANGE(ID_COMBO_SIZE, OnSelChangeFontSizes)¤	ON_CBN_SELCHANGE(ID_COMBO_STYLE, OnSelChangeFontStyles)¤	ON_CBN_EDITCHANGE(ID_COMBO_STYLE, OnEditChangeFontStyles)¤	ON_CBN_SELCHANGE(ID_COMBO_SCRIPT, OnSelChangeFontScript)	¤	ON_BN_CLICKED(ID_CHECK_STRIKEOUT, OnStrikeout)¤	ON_BN_CLICKED(ID_CHECK_UNDERLINE, OnUnderline)¤	ON_MESSAGE(OT_COLOR_SELENDOK, OnSelChangeColor)¤	//#UC END# *470AFEDC003E_MESSAGE_MAP*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFEDC003E_DO_DATA_EXCHANGE*"
		    value      	(value Text 
|//#UC START# *470AFEDC003E_DO_DATA_EXCHANGE*¤	DDX_Control(pDX, ID_STATIC_SAMPLE, m_ctlSample);¤	DDX_Control(pDX, ID_COMBO_STYLE, m_ctlFontStyles);¤	DDX_Control(pDX, ID_COMBO_SIZE, m_ctlFontSizes);¤	DDX_Control(pDX, ID_COMBO_FONT, m_ctlFontNames);¤	DDX_Control(pDX, ID_CHECK_UNDERLINE, m_ctlUnderline);¤	DDX_Control(pDX, ID_CHECK_STRIKEOUT, m_ctlStrikeout);¤	DDX_Control(pDX, ID_FONTSEL_DEFAULT, m_ctlButtonDefault);¤	DDX_Control(pDX, ID_FONTSEL_APPLY, m_ctlButtonApply);¤	DDX_Control(pDX, ID_FONTSEL_COLOR, m_ctlButtonColor);¤	//#UC END# *470AFEDC003E_DO_DATA_EXCHANGE*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFEDC003E_ON_INIT_DLG*"
		    value      	(value Text 
|//#UC START# *470AFEDC003E_ON_INIT_DLG*¤		// Microsoft makes it really hard to customize the Font dialog, so I created my own.¤¤		// Declare variables¤		CRect rcTemp;¤¤		// Enable buttons¤		// -- Default¤		if (m_dwDialogFlags & OT_FS_USEDEFAULT)¤		{¤			m_ctlButtonDefault.ModifyStyle(0, WS_VISIBLE);¤¤			// -- Move default button uo¤			if (!(m_dwDialogFlags & OT_FS_USEAPPLY))¤			{¤				m_ctlButtonApply.GetWindowRect(rcTemp);¤				ScreenToClient(rcTemp);¤				m_ctlButtonDefault.MoveWindow(rcTemp);¤			}¤		}¤		// -- Apply¤		if (m_dwDialogFlags & OT_FS_USEAPPLY)¤		{¤			m_ctlButtonApply.ModifyStyle(0, WS_VISIBLE);¤		}¤		// -- Text Color¤		if (m_dwDialogFlags & OT_FS_NOTEXTCOLOR)¤		{¤			m_ctlButtonColor.EnableWindow(FALSE);¤		}¤		// -- Effects¤		if (m_dwDialogFlags & OT_FS_NOEFFECTS)¤		{¤			m_ctlUnderline.EnableWindow(FALSE);¤			m_ctlStrikeout.EnableWindow(FALSE);¤		}¤		// -- Styles¤		if (m_dwDialogFlags & OT_FS_NOSTYLES)¤		{¤			m_ctlFontStyles.EnableWindow(FALSE);¤		}¤		// -- Face¤		if (m_dwDialogFlags & OT_FS_NOFACE)¤		{¤			m_ctlFontNames.EnableWindow(FALSE);¤		}¤¤		// Load everything¤		OnObjectsChanged();¤¤		// Select current font¤		SelectCurFont(m_lfFont);¤		//#UC END# *470AFEDC003E_ON_INIT_DLG*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470AFEDC003E_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470AFEDC003E_CUSTOM_INCLUDES*¤// Added Headers¤#include "shared/WinGUI/OptionTreeControls/OptionTreeDef.h"¤#include "shared/WinGUI/OptionTreeControls/OptionTreeRes.h"¤¤#include "shared/WinGUI/OptionTreeControls/COptionTreeFontSelColorButton.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTreeFontSelFontCombo.h"¤#include "shared/WinGUI/OptionTreeControls/OptionTreeFontSelGlobals.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTreeFontSelSizeCombo.h"¤//#UC END# *470AFEDC003E_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470AFEDC003E*"
		    value      	(value Text 
|//#UC START# *470AFEDC003E*¤// Construction¤public:¤	void SetControlID(UINT uID);¤	void GetCharFormat(CHARFORMAT &cf);¤	void GetLogFont(LOGFONT &lf);¤	void SetCustomSample(CString strSample);¤	DWORD GetDialogFlags();¤	void SetCurFont(LOGFONT lf);¤	void SetDefaultFont(LOGFONT lf);¤	void SetCurFont(CHARFORMAT cfFont);¤	void SetDefaultFont(CHARFORMAT cfFont);¤	COLORREF GetTextColor();¤	COLORREF GetDefaultTextColor();¤	void SetTextColor(COLORREF crColor);¤	void SetDefaultTextColor(COLORREF crColor);¤	COptionTreeFontSel(DWORD dwFlags, LOGFONT lfFont, LOGFONT lfDefault, CWnd* pParent = NULL);¤	COptionTreeFontSel(DWORD dwFlags, LOGFONT lfFont, CWnd* pParent = NULL);¤	COptionTreeFontSel(DWORD dwFlags, CHARFORMAT cfFont, CHARFORMAT cfDefault, CWnd* pParent = NULL);¤	COptionTreeFontSel(DWORD dwFlags, CHARFORMAT cfFont, CWnd* pParent = NULL);¤¤// Dialog Data¤	//{{AFX_DATA(COptionTreeFontSel)¤	CStatic	m_ctlSample;¤	CComboBox	m_ctlFontStyles;¤	COptionTreeFontSelSizeCombo	m_ctlFontSizes;¤	COptionTreeFontSelFontCombo	m_ctlFontNames;¤	CButton	m_ctlUnderline;¤	CButton	m_ctlStrikeout;¤	CButton	m_ctlButtonDefault;¤	CButton	m_ctlButtonApply;¤	COptionTreeFontSelColorButton	m_ctlButtonColor;¤	//}}AFX_DATA¤¤protected:¤	void GetSelectedFont(LOGFONT &lf);¤	void ConvertFont(CHARFORMAT &cfFont, LOGFONT &lf);¤	void ConvertFont(LOGFONT &lf, CHARFORMAT &cfFont);¤	void OnSelChangeFontScript();¤	BOOL ValidateControls();¤	void SelectCurFont(LOGFONT lf);¤	void FillSizeStyleList();¤	void FillFaceNameList();¤	static int CALLBACK EnumFontFamiliesCallBack(ENUMLOGFONT* lpelf, NEWTEXTMETRIC* lpntm, int nFontType, LPARAM lParam);¤	static int CALLBACK EnumFontFamiliesCallBack2(ENUMLOGFONT* lpelf, NEWTEXTMETRIC* lpntm, int nFontType, LPARAM lParam);¤	void OnObjectsChanged();¤	void UpdateSampleFont();¤	void OnEditUpdateFontNames();¤	void OnEditUpdateFontSizes();¤	void OnSelChangeFontNames();¤	void OnSelChangeFontSizes();¤	void OnSelChangeFontStyles();¤	void OnEditChangeFontStyles();¤	void OnStrikeout();¤	void OnUnderline();¤¤¤	CFont m_fSampleFont;¤	DWORD m_nCurrentStyle;¤	DWORD m_nActualStyle;¤	DWORD m_nStyles;¤	BOOL m_bStrikeOut;¤	BOOL m_bUnderline;¤	CString m_strFontSize;¤	LOGFONT m_lfFont;¤	LOGFONT m_lfDefault;¤	DWORD m_dwDialogFlags;¤	CString m_strCustomSample;¤	UINT m_uControlID;¤¤	// Generated message map functions¤	//{{AFX_MSG(COptionTreeFontSel)¤	afx_msg void OnPaint();¤	afx_msg void OnButtonOK();¤	afx_msg void OnButtonCancel();¤	afx_msg void OnButtonDefault();¤	afx_msg void OnButtonApply();¤	//}}AFX_MSG¤	afx_msg long OnSelChangeColor(UINT lParam, long wParam);¤//#UC END# *470AFEDC003E*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"WikiPageID (wiki)"
		    value      	(value Text 
|Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeFontSel|470AFEDC003E
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (h)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (cpp)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (wiki)"
		    value      	"wiki")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ElementCreationOrder"
		    value      	"16659818386"))
	    quid       	"470AFEDC003E"
	    documentation 	"диалог выбора шрифта"
	    stereotype 	"Dialog"
	    language   	"MDA Generator")
	(object Class "COptionTreeFontSelColorButton"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"AbstarctOperation"
		    value      	"regular")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsNative"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need assign op"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need copy ctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need ref count"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need unsorted less"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"debug log"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"local supervisor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need UC"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need dctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need objcounter"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"no base class"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"non virtual base"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"singleton"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (h)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeFontSelColorButton.h")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (cpp)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeFontSelColorButton.cpp")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFF120290_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470AFF120290_CUSTOM_INCLUDES*¤#include "shared/Core/fix/win_afx.h"¤// Static¤void AFXAPI DDX_ColorButton(CDataExchange *pDX, int nIDC, COLORREF& crColor)¤{¤	// Declare variables¤    HWND hWndCtrl = pDX->PrepareCtrl(nIDC);¤¤	// Validate¤    ASSERT (hWndCtrl != NULL);                ¤    ¤	WinGUI::COptionTreeFontSelColorButton* pColorButton = (WinGUI::COptionTreeFontSelColorButton*) CWnd::FromHandle(hWndCtrl);¤    if (pDX->m_bSaveAndValidate)¤    {¤		crColor = pColorButton->GetColor();¤    }¤    else¤    {¤		pColorButton->SetColor(crColor);¤    }¤}¤const int g_ciArrowSizeX = 4 ;¤const int g_ciArrowSizeY = 2 ;¤//#UC END# *470AFF120290_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFF120290*"
		    value      	(value Text 
|//#UC START# *470AFF120290*¤COptionTreeFontSelColorButton::COptionTreeFontSelColorButton(): _Inherited()¤{¤	// Initialize variables¤	m_crColor = CLR_DEFAULT;¤	m_crDefaultColor = ::GetSysColor(COLOR_APPWORKSPACE);¤	m_strDefaultText = _T("Automatic");¤	m_strCustomText = _T("More Colors...");¤	m_bPopupActive = FALSE;¤	m_bTrackSelection = FALSE;¤}¤¤COLORREF COptionTreeFontSelColorButton::GetColor() const¤{¤	return m_crColor;¤}¤¤¤void COptionTreeFontSelColorButton::SetColor(COLORREF crColor)¤{¤	// Save color¤	m_crColor = crColor;¤¤	// Force redraw¤	if (::IsWindow(m_hWnd)) ¤	{¤        RedrawWindow();¤	}¤}¤¤COLORREF COptionTreeFontSelColorButton::GetDefaultColor() const¤{¤	return m_crDefaultColor;¤}¤¤void COptionTreeFontSelColorButton::SetDefaultColor(COLORREF crColor)¤{¤	m_crDefaultColor = crColor;¤}¤¤void COptionTreeFontSelColorButton::SetCustomText(LPCTSTR tszText)¤{¤	m_strCustomText = tszText;¤}¤¤void COptionTreeFontSelColorButton::SetDefaultText(LPCTSTR tszText)¤{¤	m_strDefaultText = tszText;¤}¤¤void COptionTreeFontSelColorButton::SetTrackSelection(BOOL bTrack)¤{¤	m_bTrackSelection = bTrack;¤}¤¤BOOL COptionTreeFontSelColorButton::GetTrackSelection() const¤{¤	return m_bTrackSelection;¤}¤¤void COptionTreeFontSelColorButton::PreSubclassWindow() ¤{¤	// Owner drawn¤    ModifyStyle(0, BS_OWNERDRAW);      ¤¤	// Subclass¤    _Inherited::PreSubclassWindow();¤}¤¤¤long COptionTreeFontSelColorButton::OnSelEndOK(UINT lParam, long wParam)¤{¤	// Active popup¤	m_bPopupActive = FALSE;¤¤	// Declare variables¤    COLORREF crOldColor = m_crColor;¤	CWnd *pParent = GetParent();¤	¤	// Get new color¤	m_crColor = (COLORREF)lParam;¤¤	// Send messages to parent    ¤    if (pParent) ¤	{¤        pParent->SendMessage(OT_COLOR_CLOSEUP, lParam, (WPARAM) GetDlgCtrlID());¤        pParent->SendMessage(OT_COLOR_SELENDOK, lParam, (WPARAM) GetDlgCtrlID());¤    }¤    if (crOldColor != m_crColor)¤	{¤        if (pParent) pParent->SendMessage(OT_COLOR_SELCHANGE, m_crColor, (WPARAM) GetDlgCtrlID());¤	}¤¤    return TRUE;¤}¤¤long COptionTreeFontSelColorButton::OnSelEndCancel(UINT lParam, long wParam)¤{¤	// Active popup¤	m_bPopupActive = FALSE;¤	¤	// Get new color¤	m_crColor = (COLORREF)lParam;¤¤	// Declare variables¤    CWnd *pParent = GetParent();¤¤	// Send messages to parent  ¤    if (pParent) ¤	{¤        pParent->SendMessage(OT_COLOR_CLOSEUP, lParam, (WPARAM) GetDlgCtrlID());¤        pParent->SendMessage(OT_COLOR_SELENDCANCEL, lParam, (WPARAM) GetDlgCtrlID());¤    }¤¤    return TRUE;¤}¤¤long COptionTreeFontSelColorButton::OnSelChange(UINT lParam, long /*wParam*/)¤{¤    // Track selection¤	if (m_bTrackSelection) ¤	{¤		// Get new color¤		m_crColor = (COLORREF)lParam;¤	}¤¤	// Force redraw¤	if (::IsWindow(m_hWnd)) ¤	{¤        RedrawWindow();¤	}¤¤	// Declare variables¤    CWnd *pParent = GetParent();¤¤	// Send messages to parent  ¤    if (pParent) ¤	{¤		pParent->SendMessage(OT_COLOR_SELCHANGE, lParam, (WPARAM) GetDlgCtrlID());¤	}¤¤    return TRUE;¤}¤¤int COptionTreeFontSelColorButton::OnCreate(LPCREATESTRUCT lpCreateStruct) ¤{¤    // Create¤	if (CButton::OnCreate(lpCreateStruct) == -1)¤	{¤        return -1;¤	}¤¤    return 0;¤}¤¤BOOL COptionTreeFontSelColorButton::OnClicked()¤{¤	// Active popup¤	m_bPopupActive = TRUE;¤¤	// Declare variables¤    CRect rDraw;¤	CWnd *pParent = GetParent();¤¤	// Get window rectangle¤    GetWindowRect(rDraw);¤¤    new COptionTreeColorPopUp(CPoint(rDraw.left, rDraw.bottom), m_crColor, m_crDefaultColor, this, m_strDefaultText, m_strCustomText);¤¤	// Send messages to parent  ¤    if (pParent)¤	{¤        pParent->SendMessage(OT_COLOR_DROPDOWN, (LPARAM)m_crColor, (WPARAM) GetDlgCtrlID());¤	}¤¤    return TRUE;¤}¤¤void COptionTreeFontSelColorButton::DrawItem(LPDRAWITEMSTRUCT lpDrawItemStruct) ¤{¤	// Validate¤	ASSERT(lpDrawItemStruct);¤¤	// Declare variables¤	CDC* pDC  = CDC::FromHandle(lpDrawItemStruct->hDC);¤	UINT state = lpDrawItemStruct->itemState;¤    CRect rDraw = lpDrawItemStruct->rcItem;¤	CRect rArrow;¤	UINT uFrameState;¤¤	// Active popup¤	if (m_bPopupActive)¤	{¤		state |= ODS_SELECTED | ODS_FOCUS;¤	}¤¤	// Frame state¤	uFrameState = DFCS_BUTTONPUSH | DFCS_ADJUSTRECT;¤¤	// Selected¤	if (state & ODS_SELECTED)¤	{¤		uFrameState |= DFCS_PUSHED;¤	}¤¤	// Disabled¤	if (state & ODS_DISABLED)¤	{¤		uFrameState |= DFCS_INACTIVE;¤	}¤	¤	// Draw frame¤	pDC->DrawFrameControl(&rDraw, DFC_BUTTON, uFrameState);¤¤¤	// Offset rectangle if selected¤	if (state & ODS_SELECTED)¤	{¤		rDraw.OffsetRect(1,1);¤	}¤¤	// Draw focus¤	if (state & ODS_FOCUS) ¤    {¤		RECT rFocus = {rDraw.left, rDraw.top, rDraw.right - 1, rDraw.bottom};¤  ¤        pDC->DrawFocusRect(&rFocus);¤    }¤	rDraw.DeflateRect(::GetSystemMetrics(SM_CXEDGE), ::GetSystemMetrics(SM_CYEDGE));¤¤	// Draw arrow¤	rArrow.left = rDraw.right - g_ciArrowSizeX - ::GetSystemMetrics(SM_CXEDGE) /2;¤	rArrow.right = rArrow.left + g_ciArrowSizeX;¤	rArrow.top = (rDraw.bottom + rDraw.top)/2 - g_ciArrowSizeY / 2;¤	rArrow.bottom = (rDraw.bottom + rDraw.top)/2 + g_ciArrowSizeY / 2;¤	DrawArrow(pDC, &rArrow, 0,(state & ODS_DISABLED) ? ::GetSysColor(COLOR_GRAYTEXT) : RGB(0,0,0));¤	rDraw.right = rArrow.left - ::GetSystemMetrics(SM_CXEDGE)/2;¤¤	// Draw seperator¤	pDC->DrawEdge(&rDraw, EDGE_ETCHED, BF_RIGHT);¤	rDraw.right -= (::GetSystemMetrics(SM_CXEDGE) * 2) + 1 ;¤				  ¤	// Draw color¤	if ((state & ODS_DISABLED) == 0)¤	{¤		pDC->FillSolidRect(&rDraw, (m_crColor == CLR_DEFAULT) ? m_crDefaultColor : m_crColor);¤¤		::FrameRect(pDC->m_hDC, &rDraw, (HBRUSH)::GetStockObject(BLACK_BRUSH));¤	}¤}¤¤¤void COptionTreeFontSelColorButton::DrawArrow(CDC* pDC, RECT* pRect, int nDirection, COLORREF crArrow)¤{¤	POINT ptsArrow[3];¤¤	switch (nDirection)¤	{¤		// -- Down¤		case 0 :¤		{¤			ptsArrow[0].x = pRect->left;¤			ptsArrow[0].y = pRect->top;¤			ptsArrow[1].x = pRect->right;¤			ptsArrow[1].y = pRect->top;¤			ptsArrow[2].x = (pRect->left + pRect->right)/2;¤			ptsArrow[2].y = pRect->bottom;¤			break;¤		}¤¤		// -- Up¤		case 1 :¤		{¤			ptsArrow[0].x = pRect->left;¤			ptsArrow[0].y = pRect->bottom;¤			ptsArrow[1].x = pRect->right;¤			ptsArrow[1].y = pRect->bottom;¤			ptsArrow[2].x = (pRect->left + pRect->right)/2;¤			ptsArrow[2].y = pRect->top;¤			break;¤		}¤		¤		// -- Left¤		case 2 :¤		{¤			ptsArrow[0].x = pRect->right;¤			ptsArrow[0].y = pRect->top;¤			ptsArrow[1].x = pRect->right;¤			ptsArrow[1].y = pRect->bottom;¤			ptsArrow[2].x = pRect->left;¤			ptsArrow[2].y = (pRect->top + pRect->bottom)/2;¤			break;¤		}¤¤		// -- Right¤		case 3 :¤		{¤			ptsArrow[0].x = pRect->left;¤			ptsArrow[0].y = pRect->top;¤			ptsArrow[1].x = pRect->left;¤			ptsArrow[1].y = pRect->bottom;¤			ptsArrow[2].x = pRect->right;¤			ptsArrow[2].y = (pRect->top + pRect->bottom)/2;¤			break;¤		}¤	}¤	¤	// Draw¤	CBrush brsArrow(crArrow);¤	CPen penArrow(PS_SOLID, 1 , crArrow);¤	CBrush* pOldBrush = pDC->SelectObject(&brsArrow);¤	CPen*   pOldPen   = pDC->SelectObject(&penArrow);	¤	pDC->SetPolyFillMode(WINDING);¤	pDC->Polygon(ptsArrow, 3);¤	pDC->SelectObject(pOldBrush);¤	pDC->SelectObject(pOldPen);¤}¤¤//#UC END# *470AFF120290*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFF120290_DESTR_BODY*"
		    value      	(value Text 
|//#UC START# *470AFF120290_DESTR_BODY*¤	//#UC END# *470AFF120290_DESTR_BODY*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470AFF120290_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470AFF120290_CUSTOM_INCLUDES*¤#include "shared/WinGUI/OptionTreeControls/OptionTreeDef.h"¤#include "shared/WinGUI/OptionTreeControls/OptionTreeRes.h"¤¤#ifndef OT_COLORPOPUP¤	#include "shared/WinGUI/OptionTreeControls/COptionTreeColorPopUp.h"¤#endif¤¤void AFXAPI DDX_FontSelColorButton(CDataExchange *pDX, int nIDC, COLORREF& crColor);¤//#UC END# *470AFF120290_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470AFF120290*"
		    value      	(value Text 
|//#UC START# *470AFF120290*¤public:¤	COptionTreeFontSelColorButton();	¤	COLORREF GetColor() const;¤	void SetColor(COLORREF crColor);¤	COLORREF GetDefaultColor() const;¤	void SetDefaultColor(COLORREF crColor);¤	void SetCustomText(LPCTSTR tszText);¤	void SetDefaultText(LPCTSTR tszText);¤	void SetTrackSelection(BOOL bTrack);¤	BOOL GetTrackSelection() const;¤¤	//{{AFX_VIRTUAL(COptionTreeFontSelColorButton)¤    public:¤    virtual void DrawItem(LPDRAWITEMSTRUCT lpDrawItemStruct);¤    protected:¤    virtual void PreSubclassWindow();¤    //}}AFX_VIRTUAL¤¤protected:¤	//{{AFX_MSG(COptionTreeFontSelColorButton)¤    afx_msg BOOL OnClicked();¤    afx_msg int OnCreate(LPCREATESTRUCT lpCreateStruct);¤    //}}AFX_MSG¤	afx_msg long OnSelEndOK(UINT lParam, long wParam);¤    afx_msg long OnSelEndCancel(UINT lParam, long wParam);¤    afx_msg long OnSelChange(UINT lParam, long wParam);¤	static void DrawArrow(CDC* pDC, RECT* pRect, int nDirection = 0, COLORREF crArrow = RGB(0, 0, 0));¤¤¤	COLORREF m_crColor;¤	COLORREF m_crDefaultColor;¤	CString m_strDefaultText;¤	CString m_strCustomText;¤	BOOL m_bPopupActive;¤	BOOL m_bTrackSelection;¤¤private:¤¤	typedef CButton _Inherited;¤//#UC END# *470AFF120290*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"WikiPageID (wiki)"
		    value      	(value Text 
|Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeFontSelColorButton|470AFF120290
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFF120290_MESSAGE_MAP*"
		    value      	(value Text 
|//#UC START# *470AFF120290_MESSAGE_MAP*¤	ON_CONTROL_REFLECT_EX(BN_CLICKED, OnClicked)¤    ON_WM_CREATE()¤    ON_MESSAGE(OT_COLOR_SELENDOK, OnSelEndOK)¤    ON_MESSAGE(OT_COLOR_SELENDCANCEL, OnSelEndCancel)¤    ON_MESSAGE(OT_COLOR_SELCHANGE, OnSelChange)¤	//#UC END# *470AFF120290_MESSAGE_MAP*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (cpp)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (wiki)"
		    value      	"wiki")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (h)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ElementCreationOrder"
		    value      	"16659818891"))
	    quid       	"470AFF120290"
	    documentation 	"кнопка выбора шрифта"
	    stereotype 	"GuiControl"
	    superclasses 	(list inheritance_relationship_list
		(object Inheritance_Relationship
		    quid       	"470AFF29034B"
		    supplier   	"Logical View::external::MFCTypes::Controls::CButton"
		    quidu      	"46552090006D"))
	    language   	"MDA Generator")
	(object Class "COptionTreeFontSelFontCombo"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"AbstarctOperation"
		    value      	"regular")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsNative"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (h)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeFontSelFontCombo.h")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (cpp)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeFontSelFontCombo.cpp")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFF50030D_DESTR_BODY*"
		    value      	(value Text 
|//#UC START# *470AFF50030D_DESTR_BODY*¤	// Reallocate¤	if (m_bmpTrueType.GetSafeHandle() != NULL)¤	{¤		m_bmpTrueType.DeleteObject();¤	}¤	if (m_bmpMask.GetSafeHandle() != NULL)¤	{¤		m_bmpMask.DeleteObject();¤	}¤	//#UC END# *470AFF50030D_DESTR_BODY*
		    ))
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need assign op"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need copy ctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need ref count"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need unsorted less"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"debug log"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"local supervisor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need UC"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need dctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need objcounter"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"no base class"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"non virtual base"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"singleton"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFF50030D_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470AFF50030D_CUSTOM_INCLUDES*¤#include "shared/Core/fix/win_afx.h"¤#include "shared/WinGUI/OptionTreeControls/OptionTreeFontSelGlobals.h"¤//#UC END# *470AFF50030D_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFF50030D*"
		    value      	(value Text 
|//#UC START# *470AFF50030D*¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeFontSelFontCombo¤¤COptionTreeFontSelFontCombo::COptionTreeFontSelFontCombo()¤{¤	// Initialize variables¤	m_bmpTrueType.LoadBitmap(AFX_IDB_TRUETYPE);¤	_AfxInitMaskFromBitmap(&m_bmpTrueType, &m_bmpMask);¤}¤¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeFontSelFontCombo message handlers¤¤int COptionTreeFontSelFontCombo::AddFont(LOGFONT *pLF, DWORD FontType)¤{¤	int nEntry;¤	OT_FONTSEL_ITEM* pFontItem = NULL;¤¤	// Font already in the combobox¤	if (FindString(-1, (LPCTSTR) pLF->lfFaceName) != CB_ERR)¤		return CB_ERR;¤¤	// allocate some memory for the OT_FONTSEL_ITEM structure¤	TRY¤	{¤		pFontItem = new OT_FONTSEL_ITEM;¤	}¤	CATCH(CMemoryException, e)¤	{¤		return CB_ERR;¤	}¤	END_CATCH¤¤	ASSERT(pFontItem);¤	pFontItem->lf = *pLF;¤	pFontItem->dwFontType = FontType;¤¤	nEntry = AddString((LPCTSTR) pFontItem->lf.lfFaceName);¤¤	if (nEntry == CB_ERR)¤		delete pFontItem;¤	else¤		SetItemData(nEntry, (DWORD) pFontItem);¤¤	return nEntry;¤}¤¤OT_FONTSEL_ITEM* COptionTreeFontSelFontCombo::GetFontItem(int nSel)¤{¤	if (nSel == -1)¤		nSel = GetCurSel();¤¤	if (nSel == -1)¤	{¤		CString str;¤¤		GetWindowText(str);¤		nSel = FindString(-1, str);¤		if (nSel == CB_ERR)¤			nSel = 0;¤	}¤¤	ASSERT(GetItemData(nSel));¤	return (OT_FONTSEL_ITEM*) GetItemData(nSel);¤}¤¤LPLOGFONT COptionTreeFontSelFontCombo::GetLogFont(int nSel)¤{¤	return &GetFontItem(nSel)->lf;¤}¤¤DWORD COptionTreeFontSelFontCombo::GetFontType(int nSel)¤{¤	return GetFontItem(nSel)->dwFontType;¤}¤¤CString COptionTreeFontSelFontCombo::GetCurrentName()¤{¤	CString str;¤	GetWindowText(str);¤	return str;¤}¤¤void COptionTreeFontSelFontCombo::DrawItem(LPDRAWITEMSTRUCT lpDIS)¤{¤	ASSERT(lpDIS->CtlType == ODT_COMBOBOX);¤¤	// Make sure this is a *real* item¤	if (lpDIS->itemID == -1)¤		return;¤¤	// Get drawing device¤	CDC* pDC = CDC::FromHandle(lpDIS->hDC);¤¤	// Pointer to a FONTITEM storied in item data¤	OT_FONTSEL_ITEM* pFI = (OT_FONTSEL_ITEM*)lpDIS->itemData;    ¤	LOGFONT* pLF = &pFI->lf;¤	COLORREF crBk, crText;¤	TEXTMETRIC tm;¤	int x, y;¤¤	// Calculate the colors to use¤	crBk = pDC->SetBkColor(GetSysColor(lpDIS->itemState & ODS_SELECTED ? COLOR_HIGHLIGHT : COLOR_WINDOW));¤	crText = pDC->SetTextColor(GetSysColor(lpDIS->itemState & ODS_SELECTED ? COLOR_HIGHLIGHTTEXT : COLOR_WINDOWTEXT));¤¤	// Calculate the position of the text¤	pDC->GetTextMetrics(&tm);¤	x = LOWORD(GetDialogBaseUnits()) / 4;¤	y = (lpDIS->rcItem.bottom + lpDIS->rcItem.top - tm.tmHeight) / 2;¤¤	// Draw the text¤	pDC->ExtTextOut(lpDIS->rcItem.left + DX_BITMAP + 2 * x, y, ETO_CLIPPED | ETO_OPAQUE,¤		&lpDIS->rcItem,(LPCTSTR) pLF->lfFaceName,¤		lstrlen((LPCTSTR) pLF->lfFaceName), NULL);¤¤	// Put the colors back as they were¤	pDC->SetTextColor(crText);¤	pDC->SetBkColor(crBk);¤¤	// Draw the TrueType bitmap¤	if (pFI->dwFontType & TRUETYPE_FONTTYPE)¤	{¤		int dy;¤		dy = ((lpDIS->rcItem.bottom - lpDIS->rcItem.top) - DY_BITMAP) / 2;¤		_AfxDrawMaskedBitmap(pDC, &m_bmpTrueType, &m_bmpMask,¤			x, lpDIS->rcItem.top + dy, DX_BITMAP, DY_BITMAP);¤	}¤¤	// Draw the focus rect if needed¤	if (lpDIS->itemState & ODS_FOCUS)¤		pDC->DrawFocusRect(&lpDIS->rcItem);¤}¤¤void COptionTreeFontSelFontCombo::DeleteItem(LPDELETEITEMSTRUCT lpDIS)¤{¤	OT_FONTSEL_ITEM* pFI;¤¤	if (lpDIS->itemID == -1)¤		return;¤¤	ASSERT(lpDIS->CtlType == ODT_COMBOBOX);¤¤	pFI = GetFontItem(lpDIS->itemID);¤¤	// Free the OT_FONTSEL_ITEM created in COptionTreeFontSelFontCombo::AddFont()¤	ASSERT(pFI);¤	delete pFI;¤}¤¤BOOL COptionTreeFontSelFontCombo::SelectFontName(CString strName)¤{¤	// Validate¤	if (!::IsWindow(GetSafeHwnd()))¤	{¤		return FALSE;¤	}¤	¤	// Declare variables¤	int nSel;¤¤	// Find string¤	nSel = FindString(-1, strName);¤¤	// Set selection¤	if (nSel != CB_ERR)¤	{	¤		if (SetCurSel(nSel) != CB_ERR)¤		{¤			return TRUE;¤		}¤	}¤¤	return FALSE;¤}¤¤//#UC END# *470AFF50030D*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470AFF50030D_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470AFF50030D_CUSTOM_INCLUDES*¤#include "shared/WinGUI/OptionTreeControls/OptionTreeDef.h"¤#include "shared/WinGUI/OptionTreeControls/OptionTreeRes.h"¤¤// Structures¤struct OT_FONTSEL_ITEM¤{¤	DWORD dwFontType;¤	LOGFONT lf;¤};¤//#UC END# *470AFF50030D_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470AFF50030D*"
		    value      	(value Text 
|//#UC START# *470AFF50030D*¤// Construction¤public:¤	COptionTreeFontSelFontCombo();¤¤// Attributes¤public:¤¤// Operations¤public:¤¤// Overrides¤	// ClassWizard generated virtual function overrides¤	//{{AFX_VIRTUAL(COptionTreeFontSelFontCombo)¤	public:¤	virtual void DrawItem(LPDRAWITEMSTRUCT lpDIS);¤	virtual void DeleteItem(LPDELETEITEMSTRUCT lpDIS);¤	//}}AFX_VIRTUAL¤¤// Implementation¤public:¤	int AddFont(LOGFONT *pLF, DWORD FontType);¤	CString GetCurrentName();¤¤	OT_FONTSEL_ITEM* GetFontItem(int nSel = -1);¤	LPLOGFONT GetLogFont(int nSel = -1);¤	DWORD GetFontType(int nSel = -1);¤¤public:¤	BOOL SelectFontName(CString strName);¤¤¤protected:¤	CBitmap m_bmpTrueType;¤	CBitmap m_bmpMask;¤//#UC END# *470AFF50030D*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"WikiPageID (wiki)"
		    value      	(value Text 
|Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeFontSelFontCombo|470AFF50030D
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFF50030D_MESSAGE_MAP*"
		    value      	(value Text 
|//#UC START# *470AFF50030D_MESSAGE_MAP*¤	//#UC END# *470AFF50030D_MESSAGE_MAP*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (wiki)"
		    value      	"wiki")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (h)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (cpp)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ElementCreationOrder"
		    value      	"16659819371"))
	    quid       	"470AFF50030D"
	    documentation 	"комбо-бокс для выбора шрифта"
	    stereotype 	"GuiControl"
	    superclasses 	(list inheritance_relationship_list
		(object Inheritance_Relationship
		    quid       	"470AFF6102BF"
		    supplier   	"Logical View::external::MFCTypes::Controls::CComboBox"
		    quidu      	"465520BD0222"))
	    language   	"MDA Generator")
	(object Class "OptionTreeFontSelGlobals"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"AbstarctOperation"
		    value      	"final")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsNative"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"is namespace"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"local helper"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need UC"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need impl-file"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need inline-file"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (cpp)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/OptionTreeFontSelGlobals.cpp")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (h)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/OptionTreeFontSelGlobals.h")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFF7B02DE_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470AFF7B02DE_CUSTOM_INCLUDES*¤#include "afxdisp.h"¤¤BOOL _AfxStringFromCy(CString& str, CY& cy)¤{¤	VARIANTARG varCy;¤	VARIANTARG varBstr;¤	AfxVariantInit(&varCy);¤	AfxVariantInit(&varBstr);¤	V_VT(&varCy) = VT_CY;¤	V_CY(&varCy) = cy;¤	if (FAILED(VariantChangeType(&varBstr, &varCy, 0, VT_BSTR)))¤	{¤		VariantClear(&varCy);¤		VariantClear(&varBstr);¤		return FALSE;¤	}¤	str = V_BSTR(&varBstr);¤	VariantClear(&varCy);¤	VariantClear(&varBstr);¤	return TRUE;¤}¤¤BOOL _AfxCyFromString(CY& cy, LPCTSTR psz)¤{¤	USES_CONVERSION;¤¤	VARIANTARG varBstr;¤	VARIANTARG varCy;¤	AfxVariantInit(&varBstr);¤	AfxVariantInit(&varCy);¤	V_VT(&varBstr) = VT_BSTR;¤	V_BSTR(&varBstr) = SysAllocString(T2COLE(psz));¤	if (FAILED(VariantChangeType(&varCy, &varBstr, 0, VT_CY)))¤	{¤		VariantClear(&varBstr);¤		VariantClear(&varCy);¤		return FALSE;¤	}¤	cy = V_CY(&varCy);¤	VariantClear(&varBstr);¤	VariantClear(&varCy);¤	return TRUE;¤}¤¤void _AfxDrawMaskedBitmap(CDC* pDC, CBitmap* pbmp, CBitmap* pbmpMask, int x, int y, int cx, int cy)¤{¤	COLORREF oldBkColor = pDC->SetBkColor(RGB(255, 255, 255));¤	COLORREF oldTextColor = pDC->SetTextColor(RGB(0, 0, 0));¤¤	CDC dcCompat;¤	dcCompat.CreateCompatibleDC(pDC);¤	CBitmap* pbmpSave = dcCompat.SelectObject(pbmp);¤	pDC->BitBlt(x, y, cx, cy, &dcCompat, 0, 0, DSx);¤	dcCompat.SelectObject(pbmpMask);¤	pDC->BitBlt(x, y, cx, cy, &dcCompat, 0, 0, DSna);¤	dcCompat.SelectObject(pbmp);¤	pDC->BitBlt(x, y, cx, cy, &dcCompat, 0, 0, DSx);¤	dcCompat.SelectObject(pbmpSave);¤¤	pDC->SetBkColor(oldBkColor);¤	pDC->SetTextColor(oldTextColor);¤}¤¤void _AfxInitMaskFromBitmap(CBitmap* pbmp, CBitmap* pbmpMask)¤{¤	BITMAP bmp;¤	pbmp->GetObject(sizeof (BITMAP), &bmp);¤	pbmpMask->CreateBitmap(bmp.bmWidth, bmp.bmHeight, 1, 1, NULL);¤¤	CDC dcDst;¤	dcDst.CreateCompatibleDC(NULL);¤	CDC dcSrc;¤	dcSrc.CreateCompatibleDC(NULL);¤	CBitmap* pOldDst = dcDst.SelectObject(pbmpMask);¤	CBitmap* pOldSrc = dcSrc.SelectObject(pbmp);¤¤	COLORREF oldBkColor = dcSrc.SetBkColor(dcSrc.GetPixel(0, 0));¤	dcDst.BitBlt(0, 0, bmp.bmWidth, bmp.bmHeight, &dcSrc, 0, 0, NOTSRCCOPY);¤	dcSrc.SetBkColor(oldBkColor);¤¤	dcDst.SelectObject(pOldDst);¤	dcSrc.SelectObject(pOldSrc);¤}¤//#UC END# *470AFF7B02DE_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFF7B02DE*"
		    value      	"//#UC START# *470AFF7B02DE*¤//#UC END# *470AFF7B02DE*")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470AFF7B02DE_USER_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470AFF7B02DE_USER_INCLUDES*¤#include <atlconv.h>¤#include "shared/WinGUI/OptionTreeControls/OptionTreeDef.h"¤#include "shared/WinGUI/OptionTreeControls/OptionTreeRes.h"¤¤// Definitions¤#define DX_BITMAP        20¤#define DY_BITMAP        12¤#define DSx				0x00660046L¤#define DSna			0x00220326L¤#ifndef _countof¤	#define _countof(array) (sizeof(array)/sizeof(array[0]))¤#endif¤AFX_STATIC_DATA int _afxTTDefaults[] = { 8, 9, 10, 11, 12, 14, 16, 18, 20, 22, 24, 26, 28, 36, 48, 72};¤¤// Stores all the information about a font¤typedef struct OT_FONTSEL_OBJECT¤{¤	CString strName;¤	CY  cySize;¤	BOOL bBold;¤	BOOL bItalic;¤	BOOL bUnderline;¤	BOOL bStrikethrough;¤	short sWeight;¤} FONTOBJECT;¤¤// Merge objects are used when trying to consolidate multiple font properties.¤// If the characteristics of these multiple properties differ then this is¤// represented in the merge object.¤typedef struct OT_FONTSEL_MERGEOBJECT¤{¤	BOOL bNameOK;¤	BOOL bSizeOK;¤	BOOL bStyleOK;¤	BOOL bUnderlineOK;¤	BOOL bStrikethroughOK;¤} MERGEOBJECT;¤¤BOOL _AfxStringFromCy(CString& str, CY& cy);¤BOOL _AfxCyFromString(CY& cy, LPCTSTR psz);¤void _AfxDrawMaskedBitmap(CDC* pDC, CBitmap* pbmp, CBitmap* pbmpMask, int x, int y, int cx, int cy);¤void _AfxInitMaskFromBitmap(CBitmap* pbmp, CBitmap* pbmpMask);¤//#UC END# *470AFF7B02DE_USER_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470AFF7B02DE_USER_DEFINITION*"
		    value      	"//#UC START# *470AFF7B02DE_USER_DEFINITION*¤//#UC END# *470AFF7B02DE_USER_DEFINITION*")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"WikiPageID (wiki)"
		    value      	(value Text 
|Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/OptionTreeFontSelGlobals|470AFF7B02DE
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (wiki)"
		    value      	"wiki")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (h)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (cpp)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ElementCreationOrder"
		    value      	"16659819873"))
	    quid       	"470AFF7B02DE"
	    documentation 	"вспомогательные функции для выбора шрифта"
	    stereotype 	"UtilityPack"
	    language   	"MDA Generator")
	(object Class "COptionTreeFontSelSizeCombo"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"AbstarctOperation"
		    value      	"regular")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsNative"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need assign op"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need copy ctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need ref count"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need unsorted less"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"debug log"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"local supervisor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need UC"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need dctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need objcounter"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"no base class"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"non virtual base"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"singleton"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (cpp)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeFontSelSizeCombo.cpp")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (h)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeFontSelSizeCombo.h")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFFC4001F_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470AFFC4001F_CUSTOM_INCLUDES*¤#include "shared/Core/fix/win_afx.h"¤#include "shared/WinGUI/OptionTreeControls/OptionTreeFontSelGlobals.h"¤#include "afximpl2005.h"¤//#UC END# *470AFFC4001F_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFFC4001F*"
		    value      	(value Text 
|//#UC START# *470AFFC4001F*¤COptionTreeFontSelSizeCombo::COptionTreeFontSelSizeCombo()¤{¤}¤¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeFontSelSizeCombo message handlers¤¤int COptionTreeFontSelSizeCombo::AddSize(int nPointSize, long lfHeight)¤{¤	if (lfHeight == 0)¤	{¤		lfHeight = MulDiv(-afxData.cyPixelsPerInch, nPointSize, 72);¤	}¤¤	CString str;¤	wsprintf(str.GetBuffer(16), _T("%d"), nPointSize);¤	str.ReleaseBuffer();¤¤	int nMaxEntries = GetCount();¤	int nEntry;¤¤	// We use positive height values for non-truetype fonts, negitive for true type¤	if (lfHeight > 0)¤	{¤		for (nEntry = 0; nEntry < nMaxEntries; nEntry++)¤		{¤			int iComp = (int)(lfHeight - GetHeight(nEntry));¤			if (!iComp)¤				return CB_ERR;¤			if (iComp < 0)¤				break;¤		}¤	}¤	else¤	{¤		for (nEntry = 0; nEntry < nMaxEntries; nEntry++)¤		{¤			int iComp = (int)(lfHeight - GetHeight(nEntry));¤			if (!iComp)¤				return CB_ERR;¤			if (iComp > 0)¤				break;¤		}¤	}¤¤	if (nEntry == nMaxEntries)¤		nEntry = -1;¤	nEntry = InsertString(nEntry, str);¤	if (nEntry != CB_ERR)¤		SetItemData(nEntry, (DWORD)lfHeight);¤¤	return nEntry;¤}¤¤void COptionTreeFontSelSizeCombo::GetPointSize(CY& cy)¤{¤	TCHAR szText[20];¤	GetWindowText(szText, 20);¤	cy.Lo = 0;¤	cy.Hi = 0;¤	_AfxCyFromString(cy, szText);¤}¤¤long COptionTreeFontSelSizeCombo::GetHeight(int nSel)¤{¤	if (nSel == -1)¤		nSel = GetCurSel();¤¤	if (nSel == -1)¤	{¤		TCHAR szText[20];¤		GetWindowText(szText, 20);¤		nSel = FindString(-1, szText);¤		if (nSel == CB_ERR)¤		{¤			CY cyTmp;¤			cyTmp.Lo = 0;¤			cyTmp.Hi = 0;¤			_AfxCyFromString(cyTmp, szText);¤			int PointSize = (int)((cyTmp.Lo + 5000) / 10000);¤			if (PointSize != 0)¤				return MulDiv(-afxData.cyPixelsPerInch, PointSize, 72);¤			else¤				nSel = 0;¤		}¤	}¤¤	return (long) GetItemData(nSel);¤}¤¤void COptionTreeFontSelSizeCombo::UpdateLogFont(LPLOGFONT lpLF, int nSel)¤{¤	ASSERT(lpLF);¤¤	lpLF->lfHeight = (int)GetHeight(nSel);¤	lpLF->lfWidth = 0;¤}¤//#UC END# *470AFFC4001F*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFFC4001F_DESTR_BODY*"
		    value      	(value Text 
|//#UC START# *470AFFC4001F_DESTR_BODY*¤	//#UC END# *470AFFC4001F_DESTR_BODY*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470AFFC4001F_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470AFFC4001F_CUSTOM_INCLUDES*¤#include "shared/WinGUI/OptionTreeControls/OptionTreeDef.h"¤#include "shared/WinGUI/OptionTreeControls/OptionTreeRes.h"¤//#UC END# *470AFFC4001F_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470AFFC4001F*"
		    value      	(value Text 
|//#UC START# *470AFFC4001F*¤	// Construction¤public:¤	COptionTreeFontSelSizeCombo();¤	int AddSize(int nPointSize, long lfHeight);¤	void GetPointSize(CY& cy);¤	long GetHeight(int nSel = -1);¤	void UpdateLogFont(LPLOGFONT lpLF, int nSel = -1);¤//#UC END# *470AFFC4001F*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"WikiPageID (wiki)"
		    value      	(value Text 
|Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeFontSelSizeCombo|470AFFC4001F
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFFC4001F_MESSAGE_MAP*"
		    value      	(value Text 
|//#UC START# *470AFFC4001F_MESSAGE_MAP*¤	//#UC END# *470AFFC4001F_MESSAGE_MAP*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (wiki)"
		    value      	"wiki")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (h)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (cpp)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ElementCreationOrder"
		    value      	"16659820355"))
	    quid       	"470AFFC4001F"
	    documentation 	"комбо-бокс для выбора размера шрифта"
	    stereotype 	"GuiControl"
	    superclasses 	(list inheritance_relationship_list
		(object Inheritance_Relationship
		    quid       	"470AFFE2035B"
		    supplier   	"Logical View::external::MFCTypes::Controls::CComboBox"
		    quidu      	"465520BD0222"))
	    language   	"MDA Generator")
	(object Class "COptionTreeImagePopUp"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"AbstarctOperation"
		    value      	"regular")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsNative"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need assign op"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need copy ctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need ref count"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need unsorted less"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"debug log"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"local supervisor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need UC"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need dctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need objcounter"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"no base class"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"non virtual base"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"singleton"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (cpp)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeImagePopUp.cpp")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (h)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeImagePopUp.h")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFFF6030D_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470AFFF6030D_CUSTOM_INCLUDES*¤#include "shared/Core/fix/win_afx.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTree.h"¤//#UC END# *470AFFF6030D_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFFF6030D*"
		    value      	(value Text 
|//#UC START# *470AFFF6030D*¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeImagePopUp¤¤COptionTreeImagePopUp::COptionTreeImagePopUp(CPoint pPoint, CSize sImageSize, int nNumColumns, CImageList *imgImageList, COptionTree *otImageOption, CStringArray &strText, int nSelected, CWnd* pParentWnd)¤{¤	// Initialize variables¤	m_pHover = pPoint;¤	m_otImageOption = otImageOption;¤	m_pImageList = imgImageList;¤	m_pParent = pParentWnd;¤	m_sImageSizes = sImageSize;¤	m_nNumRows = 0;¤	m_nSelected = nSelected;¤¤	// Copy text¤	for (int i = 0; i < strText.GetSize(); i++)¤	{¤		m_strText.Add(strText.GetAt(i));¤	}¤¤	// Validate number of columns¤	if (nNumColumns >= 1)¤	{¤		m_nNumColumns = nNumColumns;¤	}¤	else¤	{¤		m_nNumColumns = 3;¤	}¤¤	// Create¤	COptionTreeImagePopUp::Create(pPoint);¤}¤¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeImagePopUp message handlers¤¤BOOL COptionTreeImagePopUp::Create(CPoint pPoint)¤{¤	// Declare variables¤	CString strClassName;¤¤    // Get the class name and create the window¤    strClassName = AfxRegisterWndClass(CS_HREDRAW | CS_VREDRAW, 0, (HBRUSH) (COLOR_BTNFACE+1), 0);¤¤	// Create window¤    if (!CWnd::CreateEx(0, strClassName, _T(""), WS_POPUP | WS_VISIBLE, pPoint.x, pPoint.y, 100, 100, m_pParent->GetSafeHwnd(), 0, NULL))¤	{¤        return FALSE;¤	}¤¤	// Show window¤	ShowWindow(SW_SHOWNA);¤¤    // Set the window size¤    SetWindowSize();¤	¤	// Setup images¤	SetUpImages();¤¤	// Setup tooltips¤	SetUpToolTips();¤¤    // Capture all mouse events for the life of this window¤    SetCapture();¤¤	return TRUE;¤}¤¤void COptionTreeImagePopUp::SetWindowSize()¤{¤	// Declare variables¤	int nNumImages;¤	CRect rcClient, rcMove;¤	int nRow, nCol;¤¤	// Get window rect¤	GetWindowRect(rcClient);¤	rcMove = rcClient;¤¤	// Get the number of images¤	nNumImages = m_pImageList->GetImageCount();¤¤    // Get the number of rows¤	// -- No images make square¤    if (nNumImages == 0)¤	{¤		m_nNumRows = m_nNumColumns;¤	}¤	// -- Find number of rows¤	else¤	{¤		m_nNumRows = nNumImages / m_nNumColumns;¤		if (nNumImages % m_nNumColumns) ¤		{¤			m_nNumRows++;¤		}¤	}¤	¤	// Go through all rows¤	rcMove.bottom = rcClient.top + OT_IMAGE_MARGIN;¤	for (nRow = 1; nRow <= m_nNumRows; nRow++)¤	{¤		// -- Add size of image¤		rcMove.bottom += m_sImageSizes.cy;¤¤		// -- Add the image space¤		if (nRow < m_nNumRows)¤		{¤			rcMove.bottom += OT_IMAGE_IMAGESPACE;¤		}¤	}¤	rcMove.bottom += OT_IMAGE_MARGIN;¤¤	// Go through all columns¤	rcMove.right = rcClient.left +  OT_IMAGE_MARGIN;¤	for (nCol = 1; nCol <= m_nNumColumns; nCol++)¤	{¤		// -- Add size of image¤		rcMove.right += m_sImageSizes.cx;¤¤		// -- Add the image space¤		if (nCol < m_nNumColumns)¤		{¤			rcMove.right += OT_IMAGE_IMAGESPACE;¤		}¤	}¤	rcMove.right += OT_IMAGE_MARGIN;¤¤    // Set the window size and position¤    MoveWindow(rcMove, TRUE);¤}¤¤void COptionTreeImagePopUp::SetUpToolTips()¤{¤	// Create toop tip¤	if (m_ttToolTip.Create(this) == FALSE)¤	{¤		return;¤	}¤¤	// Go through all images¤	for (int i = 0; i < m_pImageList->GetImageCount(); i++)¤	{¤		// -- Set tooltip¤		m_ttToolTip.AddTool(this, (LPCTSTR)m_strText.GetAt(i), m_rcRectangles.GetAt(i), 1);¤	}¤¤	// Create inactive¤	m_ttToolTip.Activate(TRUE);¤}¤¤void COptionTreeImagePopUp::OnDestroy() ¤{¤	// Destroy tooltips¤	if (IsWindow(m_ttToolTip.GetSafeHwnd()))¤	{¤		m_ttToolTip.DestroyWindow();¤	}¤¤	// ALWAYS send message to parent¤	if (IsWindow(m_pParent->GetSafeHwnd()))¤	{¤		m_pParent->SendMessage(OT_IMAGE_CLOSE, 0, m_nSelected);¤	}¤	¤	CWnd::OnDestroy();	¤}¤¤void COptionTreeImagePopUp::SetUpImages()¤{¤	// Declare variables¤	CRect rcClient, rcImage;¤	int nRow, nCol;¤	long lTop, lLeft;¤¤	// Get window rect¤	GetClientRect(rcClient);¤¤	// Setup top¤	lTop = rcClient.top +  OT_IMAGE_MARGIN;¤	¤	// Go through all rows¤	for (nRow = 1; nRow <= m_nNumRows; nRow++)¤	{¤		// -- Reset left¤		lLeft = rcClient.left + OT_IMAGE_MARGIN;¤¤		// -- Go through all columns¤		for (nCol = 1; nCol <= m_nNumColumns; nCol++)¤		{¤			// -- -- Set image rect¤			rcImage.SetRect(lLeft, lTop, lLeft + m_sImageSizes.cx, lTop + m_sImageSizes.cy);¤¤			// -- -- Add rect¤			m_rcRectangles.Add(rcImage);¤¤			// -- -- Add to left¤			lLeft += m_sImageSizes.cx;¤			if (nCol < m_nNumColumns)¤			{¤				lLeft += OT_IMAGE_IMAGESPACE;¤			}¤¤		}¤¤		// -- Add to top of total image rectangle¤		if (nRow < m_nNumRows)¤		{¤			lTop += m_sImageSizes.cy + OT_IMAGE_IMAGESPACE;¤		}¤	}¤}¤¤BOOL COptionTreeImagePopUp::OnEraseBkgnd(CDC* pDC) ¤{¤	return FALSE;¤}¤¤void COptionTreeImagePopUp::OnNcDestroy() ¤{¤	CWnd::OnNcDestroy();¤	¤	// Delete this¤	delete this;¤	¤}¤¤void COptionTreeImagePopUp::OnActivateApp(BOOL bActive, DWORD hTask) ¤{¤	CWnd::OnActivateApp(bActive, hTask);¤	¤	// Release capture¤	ReleaseCapture();¤	¤}¤¤BOOL COptionTreeImagePopUp::PreTranslateMessage(MSG* pMsg) ¤{¤	// Relay tooltip¤	if (IsWindow(m_ttToolTip.GetSafeHwnd()))¤	{¤		m_ttToolTip.RelayEvent(pMsg);¤	}¤¤    // Sometimes if the picker loses focus it is never destroyed¤    if (GetCapture()->GetSafeHwnd() != GetSafeHwnd())¤    {   ¤		SetCapture(); ¤	}¤	¤	return CWnd::PreTranslateMessage(pMsg);¤}¤¤void COptionTreeImagePopUp::OnPaint() ¤{¤	// Make sure options aren't NULL¤	if (m_otImageOption == NULL)¤	{¤		return;¤	}¤¤	// Declare variables¤	CPaintDC dc(this);¤	CDC* pDCMem = new CDC;¤	CBitmap bpMem;¤	CBitmap *bmOld;¤	CRect rcClient, rcButton, rcImage;¤	COLORREF crOld;¤	HGDIOBJ hOldBrush;¤	HGDIOBJ hOld;¤	int nOldBack;¤¤	// Get client rectangle¤	GetClientRect(rcClient);¤¤	// Create DC¤	pDCMem->CreateCompatibleDC(&dc);¤	¤	// Create bitmap¤	bpMem.CreateCompatibleBitmap(&dc, rcClient.Width(), rcClient.Height());¤¤	// Select bitmap¤	bmOld = pDCMem->SelectObject(&bpMem);¤¤	// Set background mode¤	nOldBack = pDCMem->SetBkMode(TRANSPARENT);¤¤	// Set text color¤	crOld = pDCMem->SetTextColor(GetSysColor(COLOR_WINDOWTEXT));¤¤	// Select font¤	hOld = pDCMem->SelectObject(m_otImageOption->GetNormalFont());¤¤	// Select brush¤	hOldBrush = pDCMem->SelectObject(GetSysColorBrush(COLOR_BTNFACE));¤¤	// Fill background¤	pDCMem->PatBlt(rcClient.left, rcClient.top, rcClient.right, rcClient.bottom, PATCOPY);¤¤	// Go through all images¤	for (int i = 0; i < m_pImageList->GetImageCount(); i++)¤	{¤		// -- Get rectangle¤		rcImage = m_rcRectangles.GetAt(i);¤¤		// -- Button¤		// -- -- Hover¤		if (rcImage.PtInRect(m_pHover) == TRUE)¤		{¤			rcButton = rcImage;¤			rcButton.InflateRect(3, 3, 3, 3);¤¤			pDCMem->DrawEdge(rcButton, BDR_RAISEDINNER, BF_RECT);¤		}¤		// -- -- Selected¤		else if (m_nSelected == i)¤		{¤			rcButton = rcImage;¤			rcButton.InflateRect(3, 3, 3, 3);¤¤			for (long i = rcButton.top; i < rcButton.bottom; i++)¤			{¤				_DrawSelectRect(pDCMem->GetSafeHdc(), rcButton.left, i, rcButton.Width());¤			}¤¤			pDCMem->DrawEdge(rcButton, BDR_SUNKENOUTER, BF_RECT);¤		}¤		¤		// -- Draw image¤		m_pImageList->Draw(pDCMem, i, CPoint(rcImage.left, rcImage.top), ILD_NORMAL);¤	}¤¤	// Draw text¤	if (m_pImageList->GetImageCount() == 0)¤	{¤		pDCMem->DrawText(_T("No Images."), rcClient, DT_SINGLELINE | DT_CENTER | DT_VCENTER);¤	}¤¤	// Draw edge¤	pDCMem->DrawEdge(rcClient, EDGE_RAISED, BF_RECT);¤¤	// Copy to screen¤	dc.BitBlt(0, 0, rcClient.Width(), rcClient.Height(), pDCMem, 0, 0, SRCCOPY);¤¤	// Restore GDI ojects¤	pDCMem->SelectObject(bmOld);¤	pDCMem->SelectObject(hOldBrush);¤	pDCMem->SetBkMode(nOldBack);¤	pDCMem->SelectObject(hOld);¤	pDCMem->SetTextColor(crOld);¤¤	// Delete objects¤	if (pDCMem->GetSafeHdc() != NULL)¤	{¤		pDCMem->DeleteDC();¤	}¤	delete pDCMem;¤	if (bpMem.GetSafeHandle() != NULL)¤	{¤		bpMem.DeleteObject();¤	}¤}¤¤void COptionTreeImagePopUp::OnMouseMove(UINT nFlags, CPoint point) ¤{¤	// Hit test¤	int i;¤	for (i = 0; i < m_pImageList->GetImageCount(); i++)¤	{¤		if (m_rcRectangles.GetAt(i).PtInRect(point))¤		{¤			break;¤		}¤	}¤¤	// Redraw¤	if (m_nSelected != i)¤	{¤		// -- Save point¤		m_pHover = point;¤¤		// -- Force redraw¤		Invalidate();¤¤		// -- Update window¤		UpdateWindow();¤	}¤¤	CWnd::OnMouseMove(nFlags, point);¤}¤¤void COptionTreeImagePopUp::OnLButtonUp(UINT nFlags, CPoint point) ¤{¤	// Declare variables¤	BOOL bFound = FALSE;¤	CRect rcImage;¤	CRect rcClient;¤¤	// Get client rect¤	GetClientRect(rcClient);¤¤	// See if user clicked outside window¤	if (rcClient.PtInRect(point) == FALSE)¤	{¤		// ALWAYS send message to parent¤		if (IsWindow(m_pParent->GetSafeHwnd()))¤		{¤			m_pParent->SendMessage(OT_IMAGE_CLOSE, 0, m_nSelected);¤		}¤¤		ReleaseCapture();¤		DestroyWindow();¤		return;¤	}¤¤	// Go through all images¤	for (int i = 0; i < m_pImageList->GetImageCount(); i++)¤	{¤		// -- Get rectangle¤		rcImage = m_rcRectangles.GetAt(i);¤¤		// -- See if selected¤		if (m_nSelected == i)¤		{¤			rcImage.InflateRect(3, 3, 3, 3);¤		}¤¤		// -- Hit test¤		if (rcImage.PtInRect(point) == TRUE)¤		{¤			// -- -- Select this image¤			m_nSelected = i;¤¤			// -- -- Found¤			bFound = TRUE;¤¤			break;¤		}¤	}¤¤	// Close¤	if (bFound == TRUE)¤	{¤		// ALWAYS send message to parent¤		if (IsWindow(m_pParent->GetSafeHwnd()))¤		{¤			m_pParent->SendMessage(OT_IMAGE_CLOSE, 0, m_nSelected);¤		}¤¤		ReleaseCapture();¤		DestroyWindow();¤		return;¤	}¤¤¤	// Handle left click¤	CWnd::OnLButtonUp(nFlags, point);¤}¤¤void COptionTreeImagePopUp::OnKillFocus(CWnd* pNewWnd) ¤{¤	// ALWAYS send message to parent¤	if (IsWindow(m_pParent->GetSafeHwnd()))¤	{¤		m_pParent->SendMessage(OT_IMAGE_CLOSE, 0, m_nSelected);¤	}¤¤	// Release capture¤	ReleaseCapture();¤¤	CWnd::OnKillFocus(pNewWnd);¤	¤}¤¤void COptionTreeImagePopUp::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags) ¤{¤	// Validate selected index¤	if (m_nSelected == -1)¤	{¤		CWnd::OnKeyDown(nChar, nRepCnt, nFlags);¤		return;¤	}¤¤	// Get key pressed¤	// -- Enter¤	if (nChar == VK_RETURN) ¤	{¤		// -- ALWAYS send message to parent¤		if (IsWindow(m_pParent->GetSafeHwnd()))¤		{¤			m_pParent->SendMessage(OT_IMAGE_CLOSE, 0, m_nSelected);¤		}¤¤		// -- Close¤		ReleaseCapture();¤		DestroyWindow();¤		return;¤	}¤	// -- Esc¤	else if (nChar == VK_ESCAPE) ¤	{¤		// -- Close¤		ReleaseCapture();¤		DestroyWindow();¤		return;¤	}¤	// -- Left¤	else if (nChar == VK_LEFT) ¤	{¤		// -- -- Move to the left¤		if (m_nSelected != 0)¤		{¤			m_nSelected--;¤		}¤¤		// -- -- Force redraw¤		Invalidate();¤¤		// -- -- Update window¤		UpdateWindow();¤	}¤	// -- Right¤	else if (nChar == VK_RIGHT) ¤	{¤		// -- -- Move to the right¤		if (m_nSelected + 1 < m_pImageList->GetImageCount())¤		{¤			m_nSelected++;¤		}¤¤		// -- -- Force redraw¤		Invalidate();¤¤		// -- -- Update window¤		UpdateWindow();¤	}	¤	// -- Up¤	else if (nChar == VK_UP) ¤	{¤		// -- -- Move up¤		if (m_nSelected > (m_nNumColumns - 1))¤		{¤			m_nSelected -= m_nNumColumns;¤		}¤¤		// -- -- Force redraw¤		Invalidate();¤¤		// -- -- Update window¤		UpdateWindow();¤	}¤	// -- Down¤	else if (nChar == VK_DOWN) ¤	{¤		// -- -- Move down¤		if (m_nSelected + m_nNumColumns < m_pImageList->GetImageCount())¤		{¤			m_nSelected += m_nNumColumns;¤		}¤¤		// -- -- Force redraw¤		Invalidate();¤¤		// -- -- Update window¤		UpdateWindow();¤	}¤¤	CWnd::OnKeyDown(nChar, nRepCnt, nFlags);¤}¤//#UC END# *470AFFF6030D*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFFF6030D_DESTR_BODY*"
		    value      	(value Text 
|//#UC START# *470AFFF6030D_DESTR_BODY*¤	m_strText.RemoveAll();¤	//#UC END# *470AFFF6030D_DESTR_BODY*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470AFFF6030D_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470AFFF6030D_CUSTOM_INCLUDES*¤#include "shared/Core/fix/win_afx.h"¤#include <afxtempl.h>¤#include "shared/WinGUI/OptionTreeControls/OptionTreeDef.h"¤#include "shared/WinGUI/OptionTreeControls/OptionTreeRes.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTreeItem.h"¤¤namespace WinGUI {¤	class COptionTree;¤}¤//#UC END# *470AFFF6030D_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470AFFF6030D*"
		    value      	(value Text 
|//#UC START# *470AFFF6030D*¤// Construction¤public:¤	COptionTreeImagePopUp(CPoint pPoint, CSize sImageSize, int nNumColumns, CImageList *imgImageList, COptionTree *otImageOption, CStringArray &strText, int nSelected, CWnd* pParentWnd);¤¤// Attributes¤public:¤¤// Operations¤public:¤¤// Overrides¤	// ClassWizard generated virtual function overrides¤	//{{AFX_VIRTUAL(COptionTreeImagePopUp)¤	public:¤	virtual BOOL PreTranslateMessage(MSG* pMsg);¤	//}}AFX_VIRTUAL¤¤	// Generated message map functions¤protected:¤	void SetUpImages();¤	void SetUpToolTips();¤	void SetWindowSize();¤	BOOL Create(CPoint pPoint);¤	CToolTipCtrl m_ttToolTip;¤	CPoint m_pHover;¤	COptionTree *m_otImageOption;¤	CImageList *m_pImageList;¤	CWnd *m_pParent;¤	CSize m_sImageSizes;¤	int m_nNumColumns;¤	int m_nNumRows;¤	CStringArray m_strText;¤	CArray<CRect, CRect&> m_rcRectangles;¤	int m_nSelected;¤	//{{AFX_MSG(COptionTreeImagePopUp)¤	afx_msg void OnDestroy();¤	afx_msg BOOL OnEraseBkgnd(CDC* pDC);¤	afx_msg void OnNcDestroy();¤	afx_msg void OnActivateApp(BOOL bActive, DWORD hTask);¤	afx_msg void OnPaint();¤	afx_msg void OnMouseMove(UINT nFlags, CPoint point);¤	afx_msg void OnLButtonUp(UINT nFlags, CPoint point);¤	afx_msg void OnKillFocus(CWnd* pNewWnd);¤	afx_msg void OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags);¤	//}}AFX_MSG¤//#UC END# *470AFFF6030D*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"WikiPageID (wiki)"
		    value      	(value Text 
|Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeImagePopUp|470AFFF6030D
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470AFFF6030D_MESSAGE_MAP*"
		    value      	(value Text 
|//#UC START# *470AFFF6030D_MESSAGE_MAP*¤	ON_WM_DESTROY()¤	ON_WM_ERASEBKGND()¤	ON_WM_NCDESTROY()¤	ON_WM_ACTIVATEAPP()¤	ON_WM_PAINT()¤	ON_WM_MOUSEMOVE()¤	ON_WM_LBUTTONUP()¤	ON_WM_KILLFOCUS()¤	ON_WM_KEYDOWN()¤	//#UC END# *470AFFF6030D_MESSAGE_MAP*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (wiki)"
		    value      	"wiki")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (h)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (cpp)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ElementCreationOrder"
		    value      	"16659820851"))
	    quid       	"470AFFF6030D"
	    documentation 	"pop-up окно для выбора изображений"
	    stereotype 	"GuiControl"
	    language   	"MDA Generator")
	(object Class "COptionTreeInfo"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"AbstarctOperation"
		    value      	"regular")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsNative"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need assign op"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need copy ctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need ref count"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need unsorted less"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"debug log"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"local supervisor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need UC"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need dctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need objcounter"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"no base class"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"non virtual base"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"singleton"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (cpp)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeInfo.cpp")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (h)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeInfo.h")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B002D00FA_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B002D00FA_CUSTOM_INCLUDES*¤#include "shared/Core/fix/win_afx.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTree.h"¤//#UC END# *470B002D00FA_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B002D00FA*"
		    value      	(value Text 
|//#UC START# *470B002D00FA*¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeInfo¤¤COptionTreeInfo::COptionTreeInfo()¤{¤	// Initialize variables¤	m_otOption = NULL;¤}¤¤void COptionTreeInfo::SetOptionsOwner(COptionTree *otOption)¤{¤	// Save pointer¤	m_otOption = otOption;¤}¤/*¤BOOL COptionTreeInfo::OnEraseBkgnd(CDC* pDC) ¤{¤	// Ha, Ha¤	return FALSE;¤}¤*/¤void  COptionTreeInfo::SetText(COptionTreeItem* pItem,const bool label)¤{¤  if(::IsWindow(this->GetSafeHwnd()) == TRUE && pItem != NULL)¤  {¤    CString sText("");¤    if(label == true)¤      this->SetWindowText(pItem->GetLabelText());¤    else¤      this->SetWindowText(pItem->GetInfoText());¤    /*¤    this->SetWindowText(sText);¤    this->Invalidate();¤    this->UpdateWindow();¤    */¤  }¤}¤//#UC END# *470B002D00FA*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B002D00FA_DESTR_BODY*"
		    value      	(value Text 
|//#UC START# *470B002D00FA_DESTR_BODY*¤	//#UC END# *470B002D00FA_DESTR_BODY*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B002D00FA_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B002D00FA_CUSTOM_INCLUDES*¤#include "shared/WinGUI/OptionTreeControls/OptionTreeDef.h"¤#include "shared/WinGUI/OptionTreeControls/OptionTreeRes.h"¤¤namespace WinGUI {¤	class COptionTree;¤	class COptionTreeItem;¤}¤//#UC END# *470B002D00FA_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B002D00FA*"
		    value      	(value Text 
|//#UC START# *470B002D00FA*¤// Construction¤public:¤	COptionTreeInfo();¤¤// Attributes¤public:¤¤// Operations¤public:¤¤  void  SetText(COptionTreeItem* pItem,const bool label);¤// Overrides¤	// ClassWizard generated virtual function overrides¤	//{{AFX_VIRTUAL(COptionTreeInfo)¤	//}}AFX_VIRTUAL¤¤// Implementation¤public:¤	void SetOptionsOwner(COptionTree *otOption);¤¤protected:¤	COptionTree *m_otOption;¤//#UC END# *470B002D00FA*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"WikiPageID (wiki)"
		    value      	(value Text 
|Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeInfo|470B002D00FA
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B002D00FA_MESSAGE_MAP*"
		    value      	(value Text 
|//#UC START# *470B002D00FA_MESSAGE_MAP*¤	//#UC END# *470B002D00FA_MESSAGE_MAP*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (cpp)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (h)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (wiki)"
		    value      	"wiki")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ElementCreationOrder"
		    value      	"16659822294"))
	    quid       	"470B002D00FA"
	    documentation 	"поле информации о дереве контролов"
	    stereotype 	"GuiControl"
	    superclasses 	(list inheritance_relationship_list
		(object Inheritance_Relationship
		    quid       	"470B004E03A9"
		    supplier   	"Logical View::external::MFCTypes::Controls::CEdit"
		    quidu      	"4655226B0177"))
	    language   	"MDA Generator")
	(object Class "COptionTreeIPAddressEdit"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"AbstarctOperation"
		    value      	"regular")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsNative"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need assign op"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need copy ctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need ref count"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need unsorted less"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"debug log"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"local supervisor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need UC"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need dctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need objcounter"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"no base class"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"non virtual base"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"singleton"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (h)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeIPAddressEdit.h")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (cpp)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeIPAddressEdit.cpp")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B008500BB_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B008500BB_CUSTOM_INCLUDES*¤#include "shared/Core/fix/win_afx.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTree.h"¤//#UC END# *470B008500BB_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B008500BB*"
		    value      	(value Text 
|//#UC START# *470B008500BB*¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeIPAddressEdit¤¤COptionTreeIPAddressEdit::COptionTreeIPAddressEdit()¤{¤	// Initialize variables¤	m_wndNotify = NULL;¤}¤¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeIPAddressEdit message handlers¤¤void COptionTreeIPAddressEdit::OnKillFocus(CWnd* pNewWnd) ¤{¤	// Notify user¤	if (IsWindow(m_wndNotify))¤	{¤		::SendMessage(m_wndNotify, OT_IPADDRESS_KILLFOCUS, (WPARAM) pNewWnd, NULL); ¤	}¤¤	CEdit::OnKillFocus(pNewWnd);	¤}¤¤void COptionTreeIPAddressEdit::SetNotifyWnd(HWND hWnd)¤{¤	// Save window¤	m_wndNotify = hWnd;¤}¤¤void COptionTreeIPAddressEdit::OnMaxText() ¤{¤	// Notify user¤	if (IsWindow(m_wndNotify))¤	{¤		::SendMessage(m_wndNotify, OT_IPADDRESS_NEXTEDIT, (WPARAM) this, NULL); ¤	}	¤}¤¤void COptionTreeIPAddressEdit::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags) ¤{¤	// If return is pressed and not multiline, commit¤	if (IsWindow(GetSafeHwnd()))¤	{¤		if (nChar == _T('.'))¤		{¤			// -- Notify user¤			if (IsWindow(m_wndNotify))¤			{¤				::SendMessage(m_wndNotify, OT_IPADDRESS_NEXTEDIT, (WPARAM) this, NULL); ¤			}¤		}¤	}¤	¤	CEdit::OnKeyDown(nChar, nRepCnt, nFlags);¤}¤BOOL COptionTreeIPAddressEdit::PreTranslateMessage(MSG* pMsg)¤{¤  if (pMsg->message == WM_KEYDOWN && (pMsg->wParam == VK_RETURN || pMsg->wParam == VK_ESCAPE))¤  {¤    ::SendMessage(m_wndNotify, OT_IPADDRESS_KILLFOCUS, (WPARAM) 1, NULL); ¤  }¤  return CEdit::PreTranslateMessage(pMsg);¤}¤¤void COptionTreeIPAddressEdit::OnEnChange()¤{¤  // TODO:  If this is a RICHEDIT control, the control will not¤  // send this notification unless you override the CEdit::OnInitDialog()¤  // function and call CRichEditCtrl().SetEventMask()¤  // with the ENM_CHANGE flag ORed into the mask.¤  ::SendMessage(m_wndNotify, OT_TEXTCHANGED, (WPARAM) 1, NULL); ¤}¤¤//#UC END# *470B008500BB*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B008500BB_DESTR_BODY*"
		    value      	(value Text 
|//#UC START# *470B008500BB_DESTR_BODY*¤	//#UC END# *470B008500BB_DESTR_BODY*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B008500BB_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B008500BB_CUSTOM_INCLUDES*¤#include "shared/WinGUI/OptionTreeControls/OptionTreeDef.h"¤#include "shared/WinGUI/OptionTreeControls/OptionTreeRes.h"¤//#UC END# *470B008500BB_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B008500BB*"
		    value      	(value Text 
|//#UC START# *470B008500BB*¤// Construction¤public:¤	COptionTreeIPAddressEdit();¤¤// Attributes¤public:¤¤// Operations¤public:¤¤// Overrides¤	// ClassWizard generated virtual function overrides¤	//{{AFX_VIRTUAL(COptionTreeIPAddressEdit)¤	//}}AFX_VIRTUAL¤¤// Implementation¤public:¤	void SetNotifyWnd(HWND hWnd);¤¤protected:¤  BOOL PreTranslateMessage(MSG* pMsg) ;¤	// Generated message map functions¤protected:¤	HWND m_wndNotify;¤	//{{AFX_MSG(COptionTreeIPAddressEdit)¤	afx_msg void OnKillFocus(CWnd* pNewWnd);¤	afx_msg void OnMaxText();¤	afx_msg void OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags);¤	//}}AFX_MSG¤¤public:¤  afx_msg void OnEnChange();¤//#UC END# *470B008500BB*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"WikiPageID (wiki)"
		    value      	(value Text 
|Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeIPAddressEdit|470B008500BB
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B008500BB_MESSAGE_MAP*"
		    value      	(value Text 
|//#UC START# *470B008500BB_MESSAGE_MAP*¤	ON_WM_KILLFOCUS()¤	ON_CONTROL_REFLECT(EN_MAXTEXT, OnMaxText)¤	ON_WM_KEYDOWN()¤	ON_CONTROL_REFLECT(EN_CHANGE, OnEnChange)¤	//#UC END# *470B008500BB_MESSAGE_MAP*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (cpp)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (h)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (wiki)"
		    value      	"wiki")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ElementCreationOrder"
		    value      	"16659822842"))
	    quid       	"470B008500BB"
	    documentation 	"ввод IP-адреса"
	    stereotype 	"GuiControl"
	    superclasses 	(list inheritance_relationship_list
		(object Inheritance_Relationship
		    quid       	"470B009D00DA"
		    supplier   	"Logical View::external::MFCTypes::Controls::CEdit"
		    quidu      	"4655226B0177"))
	    language   	"MDA Generator")
	(object Class "COptionTreeItemCheckBox"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"AbstarctOperation"
		    value      	"regular")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsNative"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need assign op"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need copy ctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need ref count"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need unsorted less"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"debug log"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"local supervisor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need UC"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need dctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need objcounter"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"no base class"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"non virtual base"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"singleton"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (cpp)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeItemCheckBox.cpp")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (h)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeItemCheckBox.h")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B00C00138_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B00C00138_CUSTOM_INCLUDES*¤#include "shared/Core/fix/win_afx.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTree.h"¤//#UC END# *470B00C00138_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B00C00138*"
		    value      	(value Text 
|//#UC START# *470B00C00138*¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeItemCheckBox¤¤COptionTreeItemCheckBox::COptionTreeItemCheckBox()¤{¤	// Initialize variables¤	m_bFocus = FALSE;¤	m_rcCheck = CRect(0, 0, 0, 0);¤¤	// Set item type¤	SetItemType(OT_ITEM_CHECKBOX);¤}¤¤¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeItemCheckBox message handlers¤¤void COptionTreeItemCheckBox::DrawAttribute(CDC *pDC, const RECT &rcRect)¤{¤	// If we don't have focus, text is drawn.¤	if (m_bFocus == TRUE)¤	{¤		return;¤	}¤¤	// Make sure options aren't NULL¤	if (m_otOption == NULL)¤	{¤		return;¤	}¤¤	// Make sure there is a window¤	if (!IsWindow(GetSafeHwnd()))¤	{¤		return;¤	}¤¤	// Set window position¤	if (IsWindow(GetSafeHwnd()))¤	{¤		MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height());¤	}¤¤	// Declare variables¤	HGDIOBJ hOld;¤	COLORREF crOld;¤	int nOldBack;¤	CRect rcText, rcCheck;¤	CString strText;¤	COLORREF crOldBack;¤¤	// Select font¤	hOld = pDC->SelectObject(m_otOption->GetNormalFont());¤	¤	// Set text color¤	if (IsReadOnly() == TRUE || m_otOption->IsWindowEnabled() == FALSE)¤	{¤		crOld = pDC->SetTextColor(GetSysColor(COLOR_GRAYTEXT));¤	}¤	else¤	{¤		crOld = pDC->SetTextColor(GetTextColor());¤	}¤¤	// Set background mode¤	nOldBack = pDC->SetBkMode(TRANSPARENT);¤¤	// Set background color¤	crOldBack = pDC->SetBkColor(GetBackgroundColor());	¤¤	// Draw check box¤  if (COptionTreeCheckButton::GetOption(OT_CHECKBOX_SHOWCHECK) == TRUE)¤	{¤		// -- Get rectangle¤		rcCheck.left  = rcRect.left;¤		rcCheck.right = rcCheck.left + (long) OT_CHECKBOX_SIZE;¤		rcCheck.top = rcRect.top + ATTRIB_OFFSET - 2;¤		rcCheck.bottom = rcCheck.top + (long) OT_CHECKBOX_SIZE;¤		¤		// -- Draw check¤		if (GetCheck() == TRUE)¤		{¤			pDC->DrawFrameControl(&rcCheck, DFC_BUTTON, DFCS_FLAT | DFCS_BUTTONCHECK | DFCS_CHECKED);¤		}¤		else¤		{¤			pDC->DrawFrameControl(&rcCheck, DFC_BUTTON, DFCS_FLAT | DFCS_BUTTONCHECK);¤		}¤	}¤¤	// Draw text¤	if (COptionTreeCheckButton::GetOption(OT_CHECKBOX_SHOWTEXT) == TRUE)¤	{¤		// -- Get text¤		if (GetCheck() == TRUE)¤		{¤			strText = GetCheckedText();¤		}¤		else¤		{¤			strText = GetUnCheckedText();¤		}¤¤		// -- Get rectangle¤    if (COptionTreeCheckButton::GetOption(OT_CHECKBOX_SHOWCHECK) == TRUE)¤		{¤			rcText.left  = rcCheck.right + ATTRIB_OFFSET;¤			rcText.right = rcRect.right;¤			rcText.top = rcRect.top;¤			rcText.bottom = rcRect.bottom;¤		}¤		else¤		{¤			rcText  = rcRect;¤		}¤¤		// -- Draw text¤		pDC->DrawText(strText, rcText, DT_SINGLELINE | DT_VCENTER);¤	}¤¤	// Restore GDI ojects¤	pDC->SelectObject(hOld);¤	pDC->SetTextColor(crOld);¤	pDC->SetBkMode(nOldBack);¤	pDC->SetBkColor(crOldBack);¤}¤¤void COptionTreeItemCheckBox::OnCommit()¤{¤	// Hide edit control¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		ShowWindow(SW_HIDE);¤	}¤}¤¤void COptionTreeItemCheckBox::OnRefresh()¤{¤	// Set the window positiion¤	if (IsWindow(GetSafeHwnd()))¤	{¤		MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height());¤	}¤}¤¤void COptionTreeItemCheckBox::OnMove()¤{¤	// Set window position¤	if (IsWindow(GetSafeHwnd()))¤	{¤		MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height());¤  }¤¤¤	// Hide window¤	if (m_bFocus == FALSE && IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		ShowWindow(SW_HIDE);¤	}¤}¤¤void COptionTreeItemCheckBox::OnActivate()¤{¤	// Make sure window is valid¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		ShowWindow(SW_SHOW);¤¤		// -- Set window position¤		MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height());¤¤		// -- Set focus¤		SetFocus();¤	}¤}¤¤void COptionTreeItemCheckBox::OnSetFocus(CWnd* pOldWnd) ¤{¤	// Mark focus¤	m_bFocus = TRUE;	¤	¤	COptionTreeCheckButton::OnSetFocus(pOldWnd);	¤}¤¤void COptionTreeItemCheckBox::OnKillFocus(CWnd* pNewWnd) ¤{	¤	// Validate¤	if (m_otOption == NULL)¤	{¤		COptionTreeCheckButton::OnKillFocus(pNewWnd);¤		return;¤	}¤¤	// See if new window is tree of list¤	if (m_otOption->IsChild(pNewWnd) == TRUE)¤	{¤		// -- Mark focus¤		m_bFocus = FALSE;¤¤		// -- Commit changes¤		//CommitChanges();¤	}¤¤	COptionTreeCheckButton::OnKillFocus(pNewWnd);	¤}¤¤¤void COptionTreeItemCheckBox::CleanDestroyWindow()¤{¤	// Destroy window¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Destroy window¤		DestroyWindow();¤	}¤}¤¤¤BOOL COptionTreeItemCheckBox::CreateCheckBoxItem(BOOL bChecked, DWORD dwOptions)¤{¤	// Declare variables¤	DWORD dwStyle = WS_CHILD | WS_VISIBLE | WS_CLIPSIBLINGS | WS_CLIPCHILDREN;¤	BOOL bRet = FALSE;¤¤	// Make sure options is not NULL¤	if (m_otOption == NULL)¤	{¤		return FALSE;¤	}¤¤	// Create edit control¤	if (!IsWindow(GetSafeHwnd()))¤	{¤		// -- Create the edit view¤		bRet = Create(AfxRegisterWndClass(CS_HREDRAW | CS_VREDRAW, ::LoadCursor(NULL, IDC_ARROW)), _T(""), dwStyle, m_rcAttribute, m_otOption->GetCtrlParent(), GetCtrlID());¤¤		// -- Setup window¤		if (bRet == TRUE)¤		{¤			// -- -- Set font¤			SetFont(m_otOption->GetNormalFont(), TRUE);¤¤			// -- -- Save options¤      COptionTreeCheckButton::m_dwOptions = dwOptions;¤¤			// -- -- Set check¤			SetCheck(bChecked);¤¤			// -- Set check options owner¤			SetCheckOptionsOwner(m_otOption);¤¤			// -- -- Set window position¤			MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height());¤¤			// -- -- Hide window¤			ShowWindow(SW_HIDE);¤		}¤	}¤¤	return bRet;¤}¤¤void COptionTreeItemCheckBox::OnDeSelect()¤{¤	// Commit changes¤  // ce!¤	//CommitChanges(false);¤}¤¤void COptionTreeItemCheckBox::OnSelect()¤{¤	// Commit changes¤  // ce!¤  //CommitChanges(false);¤}¤void COptionTreeItemCheckBox::SetCheck(BOOL bCheck,const bool bcommit)¤{¤  COptionTreeCheckButton::SetCheck(bCheck);¤  if(m_bCheck == TRUE)¤    m_crText = _CLR_CHECKED;¤  else¤    m_crText = _CLR_UNCHECKED;¤  if(bcommit == true)¤    CommitChanges();¤}¤¤//#UC END# *470B00C00138*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B00C00138_DESTR_BODY*"
		    value      	(value Text 
|//#UC START# *470B00C00138_DESTR_BODY*¤	//#UC END# *470B00C00138_DESTR_BODY*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B00C00138_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B00C00138_CUSTOM_INCLUDES*¤#include "shared/WinGUI/OptionTreeControls/OptionTreeDef.h"¤#include "shared/WinGUI/OptionTreeControls/OptionTreeRes.h"¤//#UC END# *470B00C00138_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B00C00138*"
		    value      	(value Text 
|//#UC START# *470B00C00138*¤// Construction¤public:¤	COptionTreeItemCheckBox();¤	virtual void OnMove();¤	virtual void OnRefresh();¤	virtual void OnCommit();¤	virtual void OnActivate();¤	virtual void CleanDestroyWindow();¤	virtual void DrawAttribute(CDC *pDC, const RECT &rcRect);¤	virtual void OnDeSelect();¤	virtual void OnSelect();¤	virtual void OnShow(BOOL bShow){;}¤¤	virtual void SetCheck(BOOL bCheck,const bool bcommit=false);¤	BOOL CreateCheckBoxItem(BOOL bChecked, DWORD dwOptions);¤¤// Attributes¤public:¤¤// Operations¤public:¤¤// Overrides¤	// ClassWizard generated virtual function overrides¤	//{{AFX_VIRTUAL(COptionTreeItemCheckBox)¤	//}}AFX_VIRTUAL¤¤// Generated message map functions¤protected:¤	BOOL m_bFocus;¤	CRect m_rcCheck;¤	//{{AFX_MSG(COptionTreeItemCheckBox)¤	afx_msg void OnKillFocus(CWnd* pNewWnd);¤	afx_msg void OnSetFocus(CWnd* pOldWnd);¤	//}}AFX_MSG¤//#UC END# *470B00C00138*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"WikiPageID (wiki)"
		    value      	(value Text 
|Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemCheckBox|470B00C00138
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B00C00138_MESSAGE_MAP*"
		    value      	(value Text 
|//#UC START# *470B00C00138_MESSAGE_MAP*¤	ON_WM_KILLFOCUS()¤	ON_WM_SETFOCUS()¤	//#UC END# *470B00C00138_MESSAGE_MAP*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (wiki)"
		    value      	"wiki")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (h)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (cpp)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ElementCreationOrder"
		    value      	"16659823325"))
	    quid       	"470B00C00138"
	    documentation 	"чек-бокс"
	    stereotype 	"GuiControl"
	    superclasses 	(list inheritance_relationship_list
		(object Inheritance_Relationship
		    quid       	"470B00C90213"
		    supplier   	"Logical View::shared::WinGUI::OptionTreeControls::COptionTreeCheckButton"
		    quidu      	"470AFD4802FD"))
	    language   	"MDA Generator")
	(object Class "COptionTreeItemColor"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"AbstarctOperation"
		    value      	"regular")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsNative"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need assign op"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need copy ctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need ref count"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need unsorted less"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"debug log"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"local supervisor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need UC"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need dctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need objcounter"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"no base class"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"non virtual base"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"singleton"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (cpp)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeItemColor.cpp")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (h)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeItemColor.h")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B00F7035B_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B00F7035B_CUSTOM_INCLUDES*¤#include "shared/Core/fix/win_afx.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTree.h"¤//#UC END# *470B00F7035B_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B00F7035B*"
		    value      	(value Text 
|//#UC START# *470B00F7035B*¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeItemColor¤¤COptionTreeItemColor::COptionTreeItemColor()¤{¤	// Initialize variables¤	m_bFocus = FALSE;¤	m_crColor = RGB(0, 0, 0);¤  m_crColorOrigin = RGB(0, 0, 0);¤	m_crAutomatic = RGB(0, 0, 0);¤	m_dwOptions = NULL;¤  _changed = 0;¤	// Set item type¤	SetItemType(OT_ITEM_COLOR);¤}¤¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeItemColor message handlers¤¤void COptionTreeItemColor::OnKillFocus(CWnd* pNewWnd) ¤{¤	// Mark focus¤	m_bFocus = FALSE;¤¤	// Commit changes¤	CommitChanges(_changed > 0 ? true : false);¤¤	CWnd::OnKillFocus(pNewWnd);	¤}¤¤void COptionTreeItemColor::OnSetFocus(CWnd* pOldWnd) ¤{¤	// Mark focus¤	m_bFocus = TRUE;		¤	¤	CWnd::OnSetFocus(pOldWnd);	¤}¤¤void COptionTreeItemColor::DrawAttribute(CDC *pDC, const RECT &rcRect)¤{¤	// If we don't have focus, text is drawn.¤	if (m_bFocus == TRUE)¤	{¤		return;¤	}¤¤	// Make sure options aren't NULL¤	if (m_otOption == NULL)¤	{¤		return;¤	}¤¤	// Make sure there is a window¤	if (!IsWindow(GetSafeHwnd()))¤	{¤		return;¤	}¤¤	// Set window position¤	if (IsWindow(GetSafeHwnd()))¤	{¤		MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height());¤	}¤¤	// Draw control¤	DrawControl(pDC, rcRect);¤}¤¤void COptionTreeItemColor::OnCommit()¤{¤	// Hide window¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		ShowWindow(SW_HIDE);¤	}¤}¤¤void COptionTreeItemColor::OnRefresh()¤{¤	// Set the window positiion¤	if (IsWindow(GetSafeHwnd()))¤	{¤		MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height());¤	}¤}¤¤void COptionTreeItemColor::OnMove()¤{¤	// Set window position¤	if (IsWindow(GetSafeHwnd()))¤	{¤		MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height());¤  }¤¤¤	// Hide window¤	if (m_bFocus == FALSE && IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		ShowWindow(SW_HIDE);¤	}¤}¤¤void COptionTreeItemColor::OnActivate()¤{¤	// Make sure window is valid¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		ShowWindow(SW_SHOW);¤¤		// -- Set window position¤		MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height());¤¤		// -- Set focus¤		SetFocus();¤	}¤}¤¤void COptionTreeItemColor::CleanDestroyWindow()¤{¤	// Destroy window¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Destroy window¤		DestroyWindow();¤	}¤}¤¤void COptionTreeItemColor::OnLButtonUp(UINT nFlags, CPoint point) ¤{¤	// Get cursor position¤  CURSORINFO ci;¤  ci.cbSize = sizeof(CURSORINFO) ;¤  BOOL bres = GetCursorInfo(&ci);¤¤¤	// Hide window¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		ShowWindow(SW_HIDE);¤	}¤	m_crColorOrigin=m_crColor;¤	// Show color popup¤¤	//беспокоится об удалении окна не нужно - оно само себя удалит¤	new COptionTreeColorPopUp(ci.ptScreenPos, m_crColor, m_crAutomatic, this, OT_COLOR_AUTOMATIC, OT_COLOR_MORECOLORS);¤¤	// Update items¤	if (m_otOption != NULL)¤	{¤		m_otOption->UpdatedItems();¤	}¤	¤	CWnd::OnLButtonUp(nFlags, point);¤}¤¤COLORREF COptionTreeItemColor::GetColor()¤{¤	// Return variable¤	return m_crColor;¤}¤¤void COptionTreeItemColor::SetColor(COLORREF crColor)¤{¤	// Save variable¤	m_crColor = crColor;¤}¤¤BOOL COptionTreeItemColor::CreateColorItem(DWORD dwOptions, COLORREF rcColor, COLORREF rcAutomatic)¤{¤	// Declare variables¤	DWORD dwStyle = WS_CHILD | WS_VISIBLE | WS_CLIPSIBLINGS | WS_CLIPCHILDREN;¤	BOOL bRet = FALSE;¤¤	// Make sure options is not NULL¤	if (m_otOption == NULL)¤	{¤		return FALSE;¤	}¤¤	// Create window¤	if (!IsWindow(GetSafeHwnd()))¤	{¤		// -- Create the edit view¤		bRet = Create(AfxRegisterWndClass(CS_HREDRAW | CS_VREDRAW, ::LoadCursor(NULL, IDC_ARROW)), _T(""), dwStyle, m_rcAttribute, m_otOption->GetCtrlParent(), GetCtrlID());¤¤		// -- Setup window¤		if (bRet == TRUE)¤		{¤			// -- -- Set font¤			SetFont(m_otOption->GetNormalFont(), TRUE);¤¤			// -- -- Set color¤			SetColor(rcColor);¤¤			// -- -- Set automatic color¤			SetAutomaticColor(rcAutomatic);¤¤			// -- -- Save options¤			m_dwOptions = dwOptions;¤¤			// -- -- Set window position¤			MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height());¤¤			// -- -- Hide window¤			ShowWindow(SW_HIDE);¤		}¤	}¤¤	return bRet;¤}¤¤long COptionTreeItemColor::OnSelEndOK(UINT lParam, long wParam)¤{¤	// Get color	¤	COLORREF clrnew = (COLORREF)lParam;¤¤  if(clrnew != m_crColorOrigin)¤  {¤    this->SetChanged(1);¤    m_crColorOrigin = clrnew;¤    // must set non liveupdates¤    m_crColor=m_crColorOrigin;¤  }¤¤	// Commit changes¤  CommitChanges(_changed > 0 ? true : false);¤¤	// Update items¤	if (m_otOption != NULL)¤	{¤		m_otOption->UpdatedItems();¤	}¤¤    return TRUE;¤}¤¤long COptionTreeItemColor::OnSelEndCancel(UINT lParam, long wParam)¤{¤	// Hide window¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		ShowWindow(SW_HIDE);¤	}¤¤	// Update items¤	if (m_otOption != NULL)¤	{¤		m_otOption->UpdatedItems();¤	}¤¤  // live updated colors are taken always;¤  // so we have to commit¤  if(GetOption(OT_COLOR_LIVEUPDATE) == TRUE )¤    CommitChanges(_changed > 0 ? true : false);¤  return TRUE;¤}¤¤long COptionTreeItemColor::OnCloseColorPopUp(UINT lParam, long wParam)¤{¤	// Get color	¤	m_crColor = (COLORREF)lParam;¤¤	// Hide window¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		ShowWindow(SW_HIDE);¤	}¤¤	// Update items¤	if (m_otOption != NULL)¤	{¤		m_otOption->UpdatedItems();¤	}¤¤    return TRUE;¤}¤¤long COptionTreeItemColor::OnSelChange(UINT lParam, long wParam)¤{¤	// Get color¤	if (GetOption(OT_COLOR_LIVEUPDATE) == TRUE)¤	{¤		m_crColor = (COLORREF)lParam;¤	}¤¤	// Hide window¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		ShowWindow(SW_HIDE);¤	}¤¤	// Update items¤	if (m_otOption != NULL)¤	{¤		m_otOption->UpdatedItems();¤	}¤¤    return TRUE;¤}¤¤void COptionTreeItemColor::OnDeSelect()¤{¤	// Hide window¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		ShowWindow(SW_HIDE);¤	}¤}¤¤void COptionTreeItemColor::OnSelect()¤{¤}¤¤BOOL COptionTreeItemColor::OnEraseBkgnd(CDC* pDC) ¤{¤	// Naa, we like flicker free better¤	return FALSE;¤}¤¤void COptionTreeItemColor::OnPaint() ¤{¤	// Check focus¤	if (m_bFocus == FALSE)¤	{¤		return;¤	}¤¤	// Declare variables¤	CPaintDC dc(this);¤	CRect rcClient;¤¤	// Get client rect¤	GetClientRect(rcClient);¤¤	// Draw control¤	DrawControl(&dc, rcClient);¤}¤¤void COptionTreeItemColor::SetAutomaticColor(COLORREF crAutomatic)¤{¤	// Save variable¤	m_crAutomatic = crAutomatic;¤}¤¤COLORREF COptionTreeItemColor::GetAutomaticColor()¤{¤	// Return variable¤	return m_crAutomatic;¤}¤¤void COptionTreeItemColor::DrawControl(CDC *pDC, const RECT &rcRect)¤{¤	if (m_crColor == OT_COLOR_NO_SELECTION) {¤		return;¤	}¤	// Declare variables¤	HGDIOBJ hOld;¤	HGDIOBJ hOldBrush;¤	COLORREF crOld;¤	int nOldBack;¤	CRect rcText, rcColor, rcClient;¤	CString strText;¤	CBrush bBrush;¤	COLORREF crOldBack;¤¤	// Get window rect¤	GetClientRect(rcClient);¤¤	// Select font¤	hOld = pDC->SelectObject(m_otOption->GetNormalFont());¤¤	// Create bush¤	bBrush.CreateSolidBrush(m_crColor);¤	¤	// Set text color¤	if (IsReadOnly() == TRUE || m_otOption->IsWindowEnabled() == FALSE)¤	{¤		crOld = pDC->SetTextColor(GetSysColor(COLOR_GRAYTEXT));¤	}¤	else¤	{¤		crOld = pDC->SetTextColor(GetTextColor());¤	}¤¤	// Set background color¤	crOldBack = pDC->SetBkColor(GetBackgroundColor());	¤¤	// Set background mode¤	nOldBack = pDC->SetBkMode(TRANSPARENT);¤¤	// Select brush¤	hOldBrush = pDC->SelectObject(GetSysColorBrush(COLOR_BTNSHADOW));¤¤	// Get color rectangle¤	rcColor.left  = rcRect.left + 1;¤	rcColor.right = rcColor.left + (long) OT_COLOR_SIZE;¤	rcColor.top = rcRect.top + ATTRIB_OFFSET - 2;¤	rcColor.bottom = rcColor.top + (long) OT_COLOR_SIZE;¤¤	// Draw color border¤	rcColor.InflateRect(1, 1, 1, 1);¤	pDC->PatBlt(rcColor.left, rcColor.top, rcColor.Width(), rcColor.Height(), PATCOPY);¤¤	// Draw color¤	rcColor.DeflateRect(1, 1, 1, 1);¤	pDC->FillRect(rcColor, &bBrush);¤¤	// Get text rectangle¤	rcText.left  = rcColor.right + ATTRIB_OFFSET;¤	rcText.right = rcRect.right;¤	rcText.top = rcRect.top;¤	rcText.bottom = rcRect.bottom;¤¤	// Get text¤	if (GetOption(OT_COLOR_SHOWHEX) == TRUE)¤	{¤		strText.Format("#%.6X", m_crColor);¤	}¤	else¤	{¤		strText.Format("RGB (%d, %d, %d)", GetRValue(m_crColor), GetGValue(m_crColor), GetBValue(m_crColor));¤	}¤¤	// Draw text¤	pDC->DrawText(strText, rcText, DT_SINGLELINE | DT_VCENTER);¤	pDC->DrawText(strText, rcText, DT_SINGLELINE | DT_VCENTER | DT_CALCRECT);¤	¤	// Delete brush¤	if (bBrush.GetSafeHandle() != NULL)¤	{¤		bBrush.DeleteObject();¤	}¤¤	// Restore GDI ojects¤	pDC->SelectObject(hOldBrush);¤	pDC->SelectObject(hOld);¤	pDC->SetTextColor(crOld);¤	pDC->SetBkMode(nOldBack);¤	pDC->SetBkColor(crOldBack);¤}¤//#UC END# *470B00F7035B*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B00F7035B_DESTR_BODY*"
		    value      	(value Text 
|//#UC START# *470B00F7035B_DESTR_BODY*¤	//#UC END# *470B00F7035B_DESTR_BODY*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B00F7035B_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B00F7035B_CUSTOM_INCLUDES*¤#include "shared/WinGUI/OptionTreeControls/OptionTreeDef.h"¤#include "shared/WinGUI/OptionTreeControls/OptionTreeRes.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTreeColorPopUp.h"¤//#UC END# *470B00F7035B_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B00F7035B*"
		    value      	(value Text 
|//#UC START# *470B00F7035B*¤// Construction¤public:¤	COptionTreeItemColor();¤	virtual void OnMove();¤	virtual void OnRefresh();¤	virtual void OnCommit();¤	virtual void OnActivate();¤	virtual void CleanDestroyWindow();¤	virtual void OnDeSelect();¤	virtual void OnSelect();¤	virtual void DrawAttribute(CDC *pDC, const RECT &rcRect);¤	virtual void OnShow(BOOL bShow){;}¤¤¤// Attributes¤public:				  ¤¤// Operations¤public:¤¤// Overrides¤	// ClassWizard generated virtual function overrides¤	//{{AFX_VIRTUAL(COptionTreeItemColor)¤	//}}AFX_VIRTUAL¤¤// Implementation¤public:¤	COLORREF GetAutomaticColor();¤	void SetAutomaticColor(COLORREF crAutomatic);¤	BOOL CreateColorItem(DWORD dwOptions, COLORREF rcColor, COLORREF rcAutomatic);¤	void SetColor(COLORREF rcColor);¤	COLORREF GetColor();¤¤	// Generated message map functions¤protected:¤	void DrawControl(CDC *pDC, const RECT &rcRect);¤	BOOL m_bFocus;¤	COLORREF m_crColor;¤	COLORREF m_crColorOrigin;¤	COLORREF m_crAutomatic;¤	//{{AFX_MSG(COptionTreeItemColor)¤	afx_msg void OnKillFocus(CWnd* pNewWnd);¤	afx_msg void OnSetFocus(CWnd* pOldWnd);¤	afx_msg void OnLButtonUp(UINT nFlags, CPoint point);¤	afx_msg BOOL OnEraseBkgnd(CDC* pDC);¤	afx_msg void OnPaint();¤	//}}AFX_MSG¤	afx_msg long OnSelEndOK(UINT lParam, long wParam);¤	afx_msg long OnSelEndCancel(UINT lParam, long wParam);¤	afx_msg long OnSelChange(UINT lParam, long wParam);¤	afx_msg long OnCloseColorPopUp(UINT lParam, long wParam);¤//#UC END# *470B00F7035B*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"WikiPageID (wiki)"
		    value      	(value Text 
|Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemColor|470B00F7035B
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B00F7035B_MESSAGE_MAP*"
		    value      	(value Text 
|//#UC START# *470B00F7035B_MESSAGE_MAP*¤	ON_WM_KILLFOCUS()¤	ON_WM_SETFOCUS()¤	ON_WM_LBUTTONUP()¤	ON_WM_ERASEBKGND()¤	ON_WM_PAINT()¤    ON_MESSAGE(OT_COLOR_SELENDOK, OnSelEndOK)¤    ON_MESSAGE(OT_COLOR_SELENDCANCEL, OnSelEndCancel)¤    ON_MESSAGE(OT_COLOR_SELCHANGE, OnSelChange)¤	ON_MESSAGE(OT_COLOR_CLOSEUP, OnCloseColorPopUp)¤	//#UC END# *470B00F7035B_MESSAGE_MAP*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (wiki)"
		    value      	"wiki")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (h)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (cpp)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ElementCreationOrder"
		    value      	"16659823828"))
	    quid       	"470B00F7035B"
	    documentation 	"элемент выбора цвета"
	    stereotype 	"GuiControl"
	    superclasses 	(list inheritance_relationship_list
		(object Inheritance_Relationship
		    quid       	"470B011C0232"
		    supplier   	"Logical View::shared::WinGUI::OptionTreeControls::COptionTreeItem"
		    quidu      	"470AFC61008C"))
	    language   	"MDA Generator")
	(object Class "COptionTreeItemComboBox"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"AbstarctOperation"
		    value      	"regular")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsNative"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need assign op"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need copy ctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need ref count"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need unsorted less"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"debug log"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"local supervisor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need UC"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need dctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need objcounter"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"no base class"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"non virtual base"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"singleton"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (cpp)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeItemComboBox.cpp")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (h)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeItemComboBox.h")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B01340261_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B01340261_CUSTOM_INCLUDES*¤#include "shared/Core/fix/win_afx.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTree.h"¤//#UC END# *470B01340261_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B01340261*"
		    value      	(value Text 
|//#UC START# *470B01340261*¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeItemComboBox¤¤COptionTreeItemComboBox::COptionTreeItemComboBox()¤{¤	// Initialize variables¤	m_bFocus = FALSE;¤	m_lDropDownHeight = OT_COMBO_DROPDOWNHEIGHT;¤¤  _dwExStyleBuffer = 0;¤  _InputMaskBuffer = "";¤  _WindowTextBuffer ="";¤¤  _changed = 0;¤¤	// Set item type¤	SetItemType(OT_ITEM_COMBOBOX);¤}¤¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeItemComboBox message handlers¤¤¤void COptionTreeItemComboBox::DrawAttribute(CDC *pDC, const RECT &rcRect)¤{¤	// If we don't have focus, text is drawn.¤	if (m_bFocus == TRUE)¤	{¤		return;¤	}¤¤	// Make sure options aren't NULL¤	if (m_otOption == NULL)¤	{¤		return;¤	}¤¤	// without edit window draw text only¤	if (!IsWindow(GetSafeHwnd()) )¤	{¤    CFont *pOldFont = pDC->SelectObject(COptionTree::GetNormalFont());¤    CRect arect(rcRect);¤		pDC->DrawText(_WindowTextBuffer, &arect, DT_SINGLELINE | DT_VCENTER);¤		pDC->DrawText(_WindowTextBuffer, &arect, DT_SINGLELINE | DT_VCENTER | DT_CALCRECT);¤    pDC->SelectObject(pOldFont);¤		return;¤	}¤  else¤	{¤		MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height());¤	}¤¤	// Declare variables¤	HGDIOBJ hOld;¤	COLORREF crOld;¤	int nOldBack;¤	CRect rcText;¤	CString strWindowText;¤	COLORREF crOldBack;¤¤	// Get window text¤	GetWindowText(strWindowText);¤  _WindowTextBuffer=strWindowText;¤¤	// Select font¤	hOld = pDC->SelectObject(m_otOption->GetNormalFont());¤	¤	// Set text color¤	if (IsReadOnly() == TRUE || m_otOption->IsWindowEnabled() == FALSE)¤	{¤		crOld = pDC->SetTextColor(GetSysColor(COLOR_GRAYTEXT));¤	}¤	else¤	{¤		crOld = pDC->SetTextColor(GetTextColor());¤	}¤¤	// Set background mode¤	nOldBack = pDC->SetBkMode(TRANSPARENT);¤¤	// Set background color¤	crOldBack = pDC->SetBkColor(GetBackgroundColor());	¤¤	// Get rectangle¤	rcText = rcRect;¤¤	// Draw text¤	pDC->DrawText(_WindowTextBuffer, rcText, DT_SINGLELINE | DT_VCENTER);¤¤	// Restore GDI ojects¤	pDC->SelectObject(hOld);¤	pDC->SetTextColor(crOld);¤	pDC->SetBkMode(nOldBack);¤	pDC->SetBkColor(crOldBack);¤¤}¤¤void COptionTreeItemComboBox::OnCommit()¤{¤	// Hide edit control¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		ShowWindow(SW_HIDE);¤    m_bActivated = FALSE;¤	}¤}¤¤void COptionTreeItemComboBox::OnRefresh()¤{¤	// Set the window text¤	if (IsWindow(GetSafeHwnd()))¤	{¤		MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height());¤	}¤}¤¤void COptionTreeItemComboBox::OnMove()¤{¤	// Set window position¤	if (IsWindow(GetSafeHwnd()))¤	{¤		MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height());¤  }¤¤	// Hide window¤	if (m_bFocus == FALSE && IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		ShowWindow(SW_HIDE);¤    m_bActivated = FALSE;¤	}¤}¤¤void COptionTreeItemComboBox::OnActivate()¤{¤  BOOL bres = TRUE;¤  if (IsWindow(GetSafeHwnd()) == FALSE)¤  {¤    bres = this->CreateComboItem(_dwExStyleBuffer);¤    this->SetWindowText(_WindowTextBuffer);¤  }¤¤	// Make sure window is valid¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		ShowWindow(SW_SHOW);¤    m_bActivated = TRUE;¤¤		// -- Set window position¤		MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height() + m_lDropDownHeight);¤¤		// -- Set focus¤		SetFocus();¤	}¤}¤¤void COptionTreeItemComboBox::OnSetFocus(CWnd* pOldWnd) ¤{¤	// Mark focus¤	m_bFocus = TRUE;¤¤	CComboBox::OnSetFocus(pOldWnd);	¤}¤¤void COptionTreeItemComboBox::OnKillFocus(CWnd* pNewWnd) ¤{¤	// Validate¤	if (m_otOption == NULL)¤	{¤		CComboBox::OnKillFocus(pNewWnd);¤    m_bActivated = FALSE;¤    this->OnShow(FALSE);¤		return;¤	}¤¤	// See if new window is tree of list¤	if (m_otOption->IsChild(pNewWnd) == TRUE)¤	{¤		// -- Mark focus¤		m_bFocus = FALSE;¤    m_bActivated = FALSE;¤    this->OnShow(FALSE);¤		// -- Commit changes¤		//CommitChanges();¤	}¤¤	CComboBox::OnKillFocus(pNewWnd);	¤}¤BOOL COptionTreeItemComboBox::PrepareComboItem(const CString& sWindowText,¤                                           DWORD dwAddStyle)¤{¤  _WindowTextBuffer = sWindowText;¤  // the edit already exists.so we assume, that it should be recreated with different¤  // properties¤  if (IsWindow(GetSafeHwnd()))¤	{¤    bool recreate=false;¤    if(_dwExStyleBuffer != dwAddStyle)¤    {¤      _dwExStyleBuffer=dwAddStyle;¤      recreate = true;¤    }¤    // destroy only.next click will make it¤    if(recreate == true)¤      this->DestroyWindow();¤  }¤  else¤  {¤    _dwExStyleBuffer=dwAddStyle;¤  }¤  return TRUE;¤}¤¤BOOL COptionTreeItemComboBox::CreateComboItem(DWORD dwAddStyle)¤{¤	// Declare variables¤	DWORD dwStyle = WS_CHILD | WS_VISIBLE | CBS_DROPDOWNLIST | WS_VSCROLL;¤	BOOL bRet = FALSE;¤¤	// Make sure options is not NULL¤	if (m_otOption == NULL)¤	{¤		return FALSE;¤	}¤¤	// Create edit control¤	if (!IsWindow(GetSafeHwnd()))¤	{¤		// -- Add style¤		if (dwAddStyle != 0)¤		{¤			dwStyle |= dwAddStyle;¤		}¤		¤		// -- Create the combo box¤		bRet = Create(dwStyle, m_rcAttribute, m_otOption->GetCtrlParent(), GetCtrlID());¤¤		// -- Setup combo¤		if (bRet == TRUE)¤		{¤			// -- -- Set font¤			SetFont(m_otOption->GetNormalFont(), TRUE);¤¤			// -- -- Set window position¤			MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height());		¤¤			// -- -- Hide window¤			ShowWindow(SW_HIDE);¤      m_bActivated = FALSE;¤		}¤	}¤¤¤	return bRet;¤}¤¤void COptionTreeItemComboBox::SetDropDownHeight(long lHeight)¤{¤	// Save variable¤	m_lDropDownHeight = lHeight;¤}¤¤long COptionTreeItemComboBox::GetDropDownHeight()¤{¤	// Return variable¤	return m_lDropDownHeight;¤}¤¤void COptionTreeItemComboBox::CleanDestroyWindow()¤{¤	// Destroy window¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Destroy window¤		DestroyWindow();¤	}¤}¤void COptionTreeItemComboBox::OnDeSelect()¤{¤	// Hide window¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		ShowWindow(SW_HIDE);¤    m_bActivated = FALSE;¤	}¤}¤¤void COptionTreeItemComboBox::OnSelect()¤{¤	// Do nothing here¤}¤¤void COptionTreeItemComboBox::OnCbnSelchange()¤{¤  CString sCurrent("");¤  this->GetWindowText(sCurrent);¤  if(sCurrent != _text)¤  {¤    SetChanged(1);¤    CommitChanges(_changed > 0 ? true : false);¤  }¤  _text = sCurrent;¤}¤LRESULT COptionTreeItemComboBox::DefWindowProc(UINT nMsg, WPARAM wParam, LPARAM lParam)¤{¤  if(nMsg == CB_SELECTSTRING)¤  {¤    LPCTSTR pString = (LPCTSTR) lParam;¤    if(pString)¤      _text = pString;¤  }¤  return CComboBox::DefWindowProc(nMsg,wParam,lParam);¤}¤¤void COptionTreeItemComboBox::OnShow(BOOL bShow)¤{¤  if(::IsWindow(this->GetSafeHwnd()) == TRUE)¤  {¤    if(bShow == TRUE && m_bActivated == TRUE)¤      this->ShowWindow(SW_SHOW);¤    else¤      this->ShowWindow(SW_HIDE);¤  }¤}¤CString COptionTreeItemComboBox::GetAttributeText(void) {¤	CString sText(_WindowTextBuffer);¤	if(::IsWindow(this->GetSafeHwnd()) == TRUE) {¤		if(this->GetCurSel() != CB_ERR) {¤			this->GetLBText(this->GetCurSel(),sText);¤		}¤	}¤  ¤	return sText;¤}¤¤//#UC END# *470B01340261*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B01340261_DESTR_BODY*"
		    value      	(value Text 
|//#UC START# *470B01340261_DESTR_BODY*¤	//#UC END# *470B01340261_DESTR_BODY*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B01340261_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B01340261_CUSTOM_INCLUDES*¤#include "shared/WinGUI/OptionTreeControls/OptionTreeDef.h"¤#include "shared/WinGUI/OptionTreeControls/OptionTreeRes.h"¤//#UC END# *470B01340261_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B01340261*"
		    value      	(value Text 
|//#UC START# *470B01340261*¤// Construction¤public:¤	COptionTreeItemComboBox();¤	virtual void OnMove();¤	virtual void OnRefresh();¤	virtual void OnCommit();¤	virtual void OnActivate();¤	virtual void CleanDestroyWindow();¤	virtual void OnDeSelect();¤	virtual void OnSelect();¤	virtual void DrawAttribute(CDC *pDC, const RECT &rcRect);¤  virtual void OnShow(BOOL bShow);¤  virtual CString GetAttributeText(void);¤// Attributes¤public:¤¤// Operations¤public:¤¤// Overrides¤	// ClassWizard generated virtual function overrides¤	//{{AFX_VIRTUAL(COptionTreeItemComboBox)¤	//}}AFX_VIRTUAL¤¤// Implementation¤public:¤	long GetDropDownHeight();¤	void SetDropDownHeight(long lHeight);¤	BOOL PrepareComboItem(const CString& sWindowText="",¤                              DWORD dwAddStyle = 0);¤¤	BOOL CreateComboItem(DWORD dwAddStyle = 0);¤¤	// Generated message map functions¤protected:¤	BOOL m_bFocus;¤	long m_lDropDownHeight;¤	//{{AFX_MSG(COptionTreeItemComboBox)¤	afx_msg void OnSetFocus(CWnd* pOldWnd);¤	afx_msg void OnKillFocus(CWnd* pNewWnd);¤	//}}AFX_MSG¤¤	virtual LRESULT DefWindowProc(UINT nMsg, WPARAM wParam, LPARAM lParam);¤¤public:¤  afx_msg void OnCbnSelchange();¤protected:¤  // these members store creation params¤  DWORD   _dwExStyleBuffer;¤  CString _InputMaskBuffer;¤  CString _WindowTextBuffer;¤//#UC END# *470B01340261*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"WikiPageID (wiki)"
		    value      	(value Text 
|Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemComboBox|470B01340261
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B01340261_MESSAGE_MAP*"
		    value      	(value Text 
|//#UC START# *470B01340261_MESSAGE_MAP*¤	ON_WM_SETFOCUS()¤	ON_WM_KILLFOCUS()¤	ON_CONTROL_REFLECT(CBN_SELCHANGE, OnCbnSelchange)¤	//#UC END# *470B01340261_MESSAGE_MAP*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (wiki)"
		    value      	"wiki")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (h)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (cpp)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ElementCreationOrder"
		    value      	"16659824314"))
	    quid       	"470B01340261"
	    documentation 	"комбо-бокс для отображения в дереве"
	    stereotype 	"GuiControl"
	    superclasses 	(list inheritance_relationship_list
		(object Inheritance_Relationship
		    quid       	"470B01480186"
		    supplier   	"Logical View::shared::WinGUI::OptionTreeControls::COptionTreeItem"
		    quidu      	"470AFC61008C")
		(object Inheritance_Relationship
		    quid       	"470B014A01E4"
		    supplier   	"Logical View::external::MFCTypes::Controls::CComboBox"
		    quidu      	"465520BD0222"))
	    language   	"MDA Generator")
	(object Class "COptionTreeItemDate"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"AbstarctOperation"
		    value      	"regular")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsNative"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need assign op"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need copy ctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need ref count"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need unsorted less"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"debug log"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"local supervisor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need UC"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need dctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need objcounter"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"no base class"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"non virtual base"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"singleton"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (cpp)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeItemDate.cpp")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (h)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeItemDate.h")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B01B302BF_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B01B302BF_CUSTOM_INCLUDES*¤#include "shared/Core/fix/win_afx.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTree.h"¤//#UC END# *470B01B302BF_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B01B302BF*"
		    value      	(value Text 
|//#UC START# *470B01B302BF*¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeItemDate¤¤COptionTreeItemDate::COptionTreeItemDate()¤{¤	// Initialize variables¤	m_bFocus = FALSE;¤¤	// Set item type¤	SetItemType(OT_ITEM_DATE);¤  _changed = 0;¤}¤¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeItemDate message handlers¤¤void COptionTreeItemDate::DrawAttribute(CDC *pDC, const RECT &rcRect)¤{¤	// If we don't have focus, text is drawn.¤	if (m_bFocus == TRUE)¤	{¤		return;¤	}¤¤	// Make sure options aren't NULL¤	if (m_otOption == NULL)¤	{¤		return;¤	}¤¤	// Make sure there is a window¤	if (!IsWindow(GetSafeHwnd()))¤	{¤		return;¤	}¤¤	// Set window position¤	if (IsWindow(GetSafeHwnd()))¤	{¤		MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height());¤	}¤¤	// Declare variables¤	HGDIOBJ hOld;¤	COLORREF crOld;¤	int nOldBack;¤	CRect rcText;¤	CString strText;¤	COLORREF crOldBack;¤¤	// Select font¤	hOld = pDC->SelectObject(m_otOption->GetNormalFont());¤	¤	// Set text color¤	if (IsReadOnly() == TRUE || m_otOption->IsWindowEnabled() == FALSE)¤	{¤		crOld = pDC->SetTextColor(GetSysColor(COLOR_GRAYTEXT));¤	}¤	else¤	{¤		crOld = pDC->SetTextColor(GetTextColor());¤	}¤¤	// Set background mode¤	nOldBack = pDC->SetBkMode(TRANSPARENT);¤¤	// Set background color¤	crOldBack = pDC->SetBkColor(GetBackgroundColor());	¤¤	// Get rectangle¤	rcText = rcRect;¤¤	// Get text¤	GetWindowText(strText);¤¤	// Draw text¤	pDC->DrawText(strText, rcText, DT_SINGLELINE | DT_VCENTER);¤¤	// Restore GDI ojects¤	pDC->SelectObject(hOld);¤	pDC->SetTextColor(crOld);¤	pDC->SetBkMode(nOldBack);¤	pDC->SetBkColor(crOldBack);¤¤}¤¤void COptionTreeItemDate::OnCommit()¤{¤	// Hide edit control¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		ShowWindow(SW_HIDE);¤    m_bActivated = FALSE;¤	}¤}¤¤void COptionTreeItemDate::OnRefresh()¤{¤	// Set the window positiion¤	if (IsWindow(GetSafeHwnd()))¤	{¤		MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height());¤	}¤}¤¤void COptionTreeItemDate::OnMove()¤{¤	// Set window position¤	if (IsWindow(GetSafeHwnd()))¤	{¤		MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height());¤  }¤¤	// Hide window¤	if (m_bFocus == FALSE && IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		ShowWindow(SW_HIDE);¤    m_bActivated = FALSE;¤	}¤}¤¤void COptionTreeItemDate::OnActivate()¤{¤	// Make sure window is valid¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		ShowWindow(SW_SHOW);¤    m_bActivated = TRUE;¤¤		// -- Set window position¤		MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height());¤¤		// -- Set focus¤		SetFocus();¤	}¤}¤¤void COptionTreeItemDate::CleanDestroyWindow()¤{¤	// Destroy window¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Destroy window¤		DestroyWindow();¤	}¤}¤¤void COptionTreeItemDate::OnSetFocus(CWnd* pOldWnd) ¤{¤	// Mark focus¤	m_bFocus = TRUE;	¤¤	CDateTimeCtrl::OnSetFocus(pOldWnd);	¤}¤¤void COptionTreeItemDate::OnKillFocus(CWnd* pNewWnd) ¤{¤	// Declare variables¤	CMonthCalCtrl *mCal;¤¤	// Validate¤	if (m_otOption == NULL)¤	{¤		CDateTimeCtrl::OnKillFocus(pNewWnd);¤		return;¤	}¤¤	// See if new window is tree of list¤	if (m_otOption->IsChild(pNewWnd) == FALSE)¤	{¤		CDateTimeCtrl::OnKillFocus(pNewWnd);¤		return;¤	}¤¤	// Get calendar¤	mCal = GetMonthCalCtrl();¤¤	// If new focus is a the calendar, we are not really loosing focucs¤	if (mCal != NULL)¤	{¤		if (pNewWnd->GetSafeHwnd() != mCal->GetSafeHwnd())¤		{¤			// -- Mark focus¤			m_bFocus = FALSE;¤¤			// -- Commit changes¤			CommitChanges(false);//_changed > 0 ? true : false);¤		}¤	}¤	else¤	{¤		// -- Mark focus¤		m_bFocus = FALSE;¤¤		// -- Commit changes¤		CommitChanges(false);//_changed > 0 ? true : false);¤	}¤¤	CDateTimeCtrl::OnKillFocus(pNewWnd);	¤}¤¤BOOL COptionTreeItemDate::CreateDateItem(CString strFormat, DWORD dwDateStyle)¤{¤	// Declare variables¤	DWORD dwStyle = WS_CHILD | WS_VISIBLE;¤	BOOL bRet = FALSE;¤¤	// Make sure options is not NULL¤	if (m_otOption == NULL)¤	{¤		return FALSE;¤	}¤¤	// Add styles¤	if (dwStyle != 0)¤	{¤		dwStyle |= dwDateStyle;¤	}¤  m_dwOptions = dwDateStyle;¤¤	// Create edit control¤	if (!IsWindow(GetSafeHwnd()))¤	{¤		// -- Create the edit view¤		bRet = Create(dwStyle, m_rcAttribute, m_otOption->GetCtrlParent(), GetCtrlID());¤¤		// -- Setup window¤		if (bRet == TRUE)¤		{¤			// -- -- Set font¤			SetFont(m_otOption->GetNormalFont(), TRUE);¤¤			// -- Set format¤      if(strFormat.GetLength() > 0)¤			  SetFormat(strFormat);¤      else¤        SetFormat(NULL);¤¤			// -- -- Set window position¤			MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height());¤¤			// -- -- Hide window¤			ShowWindow(SW_HIDE);¤      m_bActivated = FALSE;¤		}¤	}¤¤	return bRet;¤}¤¤void COptionTreeItemDate::OnDeSelect()¤{¤	// Hide window¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		ShowWindow(SW_HIDE);¤    m_bActivated = FALSE;¤	}¤}¤¤void COptionTreeItemDate::OnSelect()¤{¤	// Do nothing here¤}¤¤¤void COptionTreeItemDate::OnDtnDatetimechange(NMHDR *pNMHDR, LRESULT *pResult)¤{¤  LPNMDATETIMECHANGE pDTChange = reinterpret_cast<LPNMDATETIMECHANGE>(pNMHDR);¤  // TODO: Add your control notification handler code here¤  *pResult = 0;¤  SetChanged(1);¤¤  if(_changed > 0)¤  {¤	  m_otOption->SendNotify(OT_NOTIFY_ITEMCHANGED, this);¤    _changed = 0;¤  }¤}¤void COptionTreeItemDate::OnShow(BOOL bShow)¤{¤  if(::IsWindow(this->GetSafeHwnd()) == TRUE)¤  {¤    if(bShow == TRUE && m_bActivated == TRUE)¤      this->ShowWindow(SW_SHOW);¤    else¤      this->ShowWindow(SW_HIDE);¤  }¤}¤CString COptionTreeItemDate::GetAttributeText(void)¤{¤  CString sText("");¤  if(::IsWindow(this->GetSafeHwnd()) == TRUE)    ¤    this->GetWindowText(sText);¤  return sText;¤}¤¤//#UC END# *470B01B302BF*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B01B302BF_DESTR_BODY*"
		    value      	(value Text 
|//#UC START# *470B01B302BF_DESTR_BODY*¤	//#UC END# *470B01B302BF_DESTR_BODY*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B01B302BF_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B01B302BF_CUSTOM_INCLUDES*¤#include "shared/WinGUI/OptionTreeControls/OptionTreeDef.h"¤#include "shared/WinGUI/OptionTreeControls/OptionTreeRes.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTreeCheckButton.h"¤//#UC END# *470B01B302BF_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B01B302BF*"
		    value      	(value Text 
|//#UC START# *470B01B302BF*¤// Construction¤public:¤	COptionTreeItemDate();¤	virtual void OnMove();¤	virtual void OnRefresh();¤	virtual void OnCommit();¤	virtual void OnActivate();¤	virtual void CleanDestroyWindow();¤	virtual void OnDeSelect();¤	virtual void OnSelect();¤	virtual void DrawAttribute(CDC *pDC, const RECT &rcRect);¤	virtual void OnShow(BOOL bShow);¤	virtual CString GetAttributeText(void);¤// Attributes¤public:¤¤// Operations¤public:¤¤// Overrides¤	// ClassWizard generated virtual function overrides¤	//{{AFX_VIRTUAL(COptionTreeItemDate)¤	//}}AFX_VIRTUAL¤¤// Implementation¤public:¤	BOOL CreateDateItem(CString strFormat, DWORD dwDateStyle);¤¤	// Generated message map functions¤protected:¤	BOOL m_bFocus;¤	//{{AFX_MSG(COptionTreeItemDate)¤	afx_msg void OnSetFocus(CWnd* pOldWnd);¤	afx_msg void OnKillFocus(CWnd* pNewWnd);¤	//}}AFX_MSG¤public:¤  afx_msg void OnDtnDatetimechange(NMHDR *pNMHDR, LRESULT *pResult);¤//#UC END# *470B01B302BF*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"WikiPageID (wiki)"
		    value      	(value Text 
|Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemDate|470B01B302BF
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B01B302BF_MESSAGE_MAP*"
		    value      	(value Text 
|//#UC START# *470B01B302BF_MESSAGE_MAP*¤	ON_WM_SETFOCUS()¤	ON_WM_KILLFOCUS()¤	ON_NOTIFY_REFLECT(DTN_DATETIMECHANGE, OnDtnDatetimechange)¤	//#UC END# *470B01B302BF_MESSAGE_MAP*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (wiki)"
		    value      	"wiki")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (h)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (cpp)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ElementCreationOrder"
		    value      	"16659824818"))
	    quid       	"470B01B302BF"
	    documentation 	"элемент выбора даты для отображения в дереве контролов"
	    stereotype 	"GuiControl"
	    superclasses 	(list inheritance_relationship_list
		(object Inheritance_Relationship
		    quid       	"470B01C90157"
		    supplier   	"Logical View::external::MFCTypes::Controls::CDateTimeCtrl"
		    quidu      	"4655245E03D8")
		(object Inheritance_Relationship
		    quid       	"470B01CB00CB"
		    supplier   	"Logical View::shared::WinGUI::OptionTreeControls::COptionTreeItem"
		    quidu      	"470AFC61008C"))
	    language   	"MDA Generator")
	(object Class "COptionTreeItemEdit"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"AbstarctOperation"
		    value      	"regular")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsNative"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need assign op"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need copy ctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need ref count"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need unsorted less"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"debug log"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"local supervisor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need UC"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need dctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need objcounter"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"no base class"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"non virtual base"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"singleton"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (h)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeItemEdit.h")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (cpp)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeItemEdit.cpp")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B0202007D_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B0202007D_CUSTOM_INCLUDES*¤#include "shared/Core/fix/win_afx.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTree.h"¤¤//#UC END# *470B0202007D_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B0202007D*"
		    value      	(value Text 
|//#UC START# *470B0202007D*¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeItemEdit¤¤COptionTreeItemEdit::COptionTreeItemEdit()¤{¤	// Initialize variables¤	m_bFocus = FALSE;¤	m_dwOptions = 0;	¤  _dwExStyleBuffer = 0;¤  _InputMaskBuffer = "";¤  _WindowTextBuffer ="";¤  m_maximum_height = OT_EDIT_MLHEIGHT*4;¤	// Set item type¤	SetItemType(OT_ITEM_EDIT);¤}¤¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeItemEdit message handlers¤¤void COptionTreeItemEdit::OnActivate()¤{¤  BOOL bres = TRUE;¤  if (IsWindow(GetSafeHwnd()) == FALSE)¤  {¤    bres = this->CreateEditItem(m_dwOptions, _dwExStyleBuffer,_InputMaskBuffer);¤    this->SetWindowText(_WindowTextBuffer);¤    m_otOption->RefreshItem(this,_D_REFRESH_LABEL);¤  }¤  // Make sure window is valid¤	if (bres && IsWindow(GetSafeHwnd()))¤	{¤		Fit ();¤		// -- Show window¤		ShowWindow(SW_SHOW);¤    m_bActivated = TRUE;¤¤		// -- Set selection¤		SetSel(0, 0);¤¤		// -- Set window position¤		MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height());¤¤		// -- Set focus¤		SetFocus();¤	}¤}¤¤UINT COptionTreeItemEdit::OnGetDlgCode() ¤{¤	return CEdit::OnGetDlgCode() | DLGC_WANTALLKEYS;¤}¤¤void COptionTreeItemEdit::DrawAttribute(CDC *pDC, const RECT &rcRect)¤{¤	// If we don't have focus, text is drawn.¤	if (m_bFocus == TRUE)¤	{¤		return;¤	}¤¤	// Make sure options aren't NULL¤	if (m_otOption == NULL)¤	{¤		return;¤	}¤¤	// without edit window draw text only¤	if (!IsWindow(GetSafeHwnd()))¤	{¤    COLORREF crOld=0;¤	  if (IsReadOnly() == TRUE || m_otOption->IsWindowEnabled() == FALSE)¤	  {¤		  crOld = pDC->SetTextColor(GetSysColor(COLOR_GRAYTEXT));¤	  }¤	  else¤	  {¤		  crOld = pDC->SetTextColor(GetTextColor());¤	  }¤¤    CFont *pOldFont = pDC->SelectObject(COptionTree::GetNormalFont());¤    CRect arect(rcRect);¤	  if (GetOption(OT_EDIT_MULTILINE) == FALSE)¤	  {¤		  pDC->DrawText(_WindowTextBuffer, &arect, DT_SINGLELINE | DT_VCENTER);¤		  pDC->DrawText(_WindowTextBuffer, &arect, DT_SINGLELINE | DT_VCENTER | DT_CALCRECT);¤    }¤    else¤    {¤      pDC->DrawText(_WindowTextBuffer, &arect, DT_TOP);¤		  pDC->DrawText(_WindowTextBuffer, &arect, DT_TOP | DT_CALCRECT);¤    }¤    pDC->SelectObject(pOldFont);¤		return;¤	}¤	// Set window position¤  else¤	{¤		MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height());¤	}¤¤	// Declare variables¤	HGDIOBJ hOld;¤	COLORREF crOld;¤	int nOldBack;¤	CRect rcText;¤	CString strText, strWindowText;¤	COLORREF crOldBack;¤¤	// Get window text¤	GetWindowText(strWindowText);¤¤	// Make text¤	// -- Password¤	if (GetOption(OT_EDIT_PASSWORD) == TRUE)¤	{¤		strText = "";¤		for (int i = 0; i < strWindowText.GetLength(); i++)¤		{¤			strText += _T("*");¤		}¤	}¤	// -- No password¤	else¤	{¤		strText = strWindowText;¤	}¤¤	// Select font¤	hOld = pDC->SelectObject(m_otOption->GetNormalFont());¤	¤	// Set text color¤	if (IsReadOnly() == TRUE || m_otOption->IsWindowEnabled() == FALSE)¤	{¤		crOld = pDC->SetTextColor(GetSysColor(COLOR_GRAYTEXT));¤	}¤	else¤	{¤		crOld = pDC->SetTextColor(GetTextColor());¤	}¤¤	// Set background mode¤	nOldBack = pDC->SetBkMode(TRANSPARENT);¤¤	// Set background color¤	crOldBack = pDC->SetBkColor(GetBackgroundColor());	¤¤	// Get rectangle¤	rcText = rcRect;¤¤	// Draw text¤	// -- Single line¤	if (GetOption(OT_EDIT_MULTILINE) == FALSE)¤	{¤		pDC->DrawText(strText, rcText, DT_SINGLELINE | DT_VCENTER);¤	}¤	// -- Mutliline¤	else¤	{¤		pDC->DrawText(strText, rcText, DT_TOP);¤	}¤¤	// Restore GDI ojects¤	pDC->SelectObject(hOld);¤	pDC->SetTextColor(crOld);¤	pDC->SetBkMode(nOldBack);¤	pDC->SetBkColor(crOldBack);¤}¤¤void COptionTreeItemEdit::OnCommit()¤{¤	// Hide edit control¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		ShowWindow(SW_HIDE);¤    m_bActivated = FALSE;¤	}¤¤}¤¤void COptionTreeItemEdit::OnRefresh()¤{¤	// Set the window text¤	if (IsWindow(GetSafeHwnd()))¤	{¤		MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height());¤	}¤}¤¤void COptionTreeItemEdit::OnMove()¤{¤	// Set window position¤	if (IsWindow(GetSafeHwnd()))¤	{¤		MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height());¤	}¤¤	// Hide window¤	if (m_bFocus == FALSE && IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		ShowWindow(SW_HIDE);¤    m_bActivated = FALSE;¤	}¤}¤BOOL COptionTreeItemEdit::PreTranslateMessage(MSG* pMsg)¤{¤  if (pMsg->message == WM_KEYDOWN && pMsg->wParam == VK_RETURN)¤  {¤		// -- Commit changes¤    if((GetStyle() & ES_WANTRETURN) == FALSE)¤    {¤      OnCommit();¤      _changed=0;¤		  return TRUE;¤    }¤    else¤    {¤		this->ReplaceSel("\r\n");¤		Fit ();¤		OnRefresh ();¤	¤      return TRUE;//return CEdit::PreTranslateMessage(pMsg);¤    }¤  }¤  if (pMsg->message == WM_KEYDOWN && pMsg->wParam == VK_ESCAPE)¤  {¤		// -- Commit changes¤		CommitChanges(_changed > 0 ? true : false);¤		return TRUE;¤  }¤  return CEditMask::PreTranslateMessage(pMsg);¤}¤¤void COptionTreeItemEdit::set_maximum_height (int height) {¤	m_maximum_height = height;¤	this->Fit ();¤}¤¤void COptionTreeItemEdit::Fit() {¤	// Get text¤	if (m_otOption == NULL || GetOption(OT_EDIT_MULTILINE) == FALSE || this->GetLineCount() <= 0) {¤		return;¤	}¤	¤	CClientDC oDC(this);¤	CFont* pOldFont = oDC.SelectObject(GetFont());¤	//Determine the line Height¤	CSize sz = oDC.GetTextExtent(CString(_T(" ")));¤	oDC.SelectObject(pOldFont);¤¤	int logicHeight = this->GetLineCount()*sz.cy;¤	logicHeight += this->GetLineCount() > 1 ? (int)ceilf (OT_DEFHEIGHT/2.0): 0;¤¤	logicHeight = std::max(logicHeight, OT_DEFHEIGHT);¤¤	if (logicHeight > m_maximum_height) {¤		logicHeight = m_maximum_height;¤		ShowScrollBar(SB_VERT, TRUE);¤	} else {¤		ShowScrollBar(SB_VERT, FALSE);¤	}¤	¤	CRect rect;¤	GetRect(&rect);¤	if (rect.Height () != logicHeight) {¤		SetItemHeight (logicHeight);¤		m_otOption->RefreshItems(this);¤	}¤}¤¤void COptionTreeItemEdit::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags) ¤{¤  ¤	CEdit::OnKeyDown(nChar, nRepCnt, nFlags);¤	Fit ();¤	SetChanged(1);¤}¤¤void COptionTreeItemEdit::OnKillFocus(CWnd* pNewWnd) ¤{¤	// Validate¤	if (m_otOption == NULL)¤	{¤		CEdit::OnKillFocus(pNewWnd);¤		return;¤	}¤¤	// See if new window is tree of list¤	if (m_otOption->IsChild(pNewWnd) == TRUE)¤	{¤		// -- Mark focus¤		m_bFocus = FALSE;¤		¤		SetItemHeight (OT_DEFHEIGHT);¤		// -- Commit changes¤		CommitChanges(_changed > 0 ? true : false);¤	}¤	¤	CEdit::OnKillFocus(pNewWnd);	¤}¤¤BOOL COptionTreeItemEdit::IsStringNumeric(CString strString)¤{¤	// See if string is numeric or not¤	if (strString.FindOneOf("1234567890") == -1 || strString.FindOneOf("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ`~[]{}-_=+\\|'/?>,<") != -1)¤	{¤		return FALSE;¤	}¤¤	return TRUE;¤}¤¤BOOL COptionTreeItemEdit::GetEditFloat(float &fReturn)¤{¤	// Declare variables¤	CString strWindowText;¤¤	// Set blank¤	fReturn = 0;¤¤	// Get window text¤	if (IsWindow(GetSafeHwnd()))¤	{¤		GetWindowText(strWindowText);¤	}¤	else¤	{¤		return FALSE;¤	}¤¤	// First see if we are in numerical mode¤	if (GetOption(OT_EDIT_NUMERICAL) == FALSE)¤	{¤		return FALSE;¤	}¤¤	// See if string is numeric¤	if (IsStringNumeric(strWindowText) == FALSE)¤	{¤		return FALSE;¤	}¤¤	// Convert string¤	fReturn = (float) atof(strWindowText);¤¤	return TRUE;¤}¤¤BOOL COptionTreeItemEdit::GetEditDouble(double &dReturn)¤{¤	// Declare variables¤	CString strWindowText;¤¤	// Set blank¤	dReturn = 0;¤¤	// Get window text¤	if (IsWindow(GetSafeHwnd()))¤	{¤		GetWindowText(strWindowText);¤	}¤	else¤	{¤		return FALSE;¤	}¤¤	// First see if we are in numerical mode¤	if (GetOption(OT_EDIT_NUMERICAL) == FALSE)¤	{¤		return FALSE;¤	}¤¤	// See if string is numeric¤	if (IsStringNumeric(strWindowText) == FALSE)¤	{¤		return FALSE;¤	}¤¤	// Convert string¤	dReturn = atof(strWindowText);¤¤	return TRUE;¤}¤¤BOOL COptionTreeItemEdit::GetEditLong(long &lReturn)¤{¤	// Declare variables¤	CString strWindowText;¤¤	// Set blank¤	lReturn = 0;¤¤	// Get window text¤	if (IsWindow(GetSafeHwnd()))¤	{¤		GetWindowText(strWindowText);¤	}¤	else¤	{¤		return FALSE;¤	}¤¤	// First see if we are in numerical mode¤	if (GetOption(OT_EDIT_NUMERICAL) == FALSE)¤	{¤		return FALSE;¤	}¤¤	// See if string is numeric¤	if (IsStringNumeric(strWindowText) == FALSE)¤	{¤		return FALSE;¤	}¤¤	// Convert string¤	lReturn = atol(strWindowText);¤¤	return TRUE;¤}¤¤BOOL COptionTreeItemEdit::GetEditInt(int &nReturn)¤{¤	// Declare variables¤	CString strWindowText;¤¤	// Set blank¤	nReturn = 0;¤¤	// Get window text¤	if (IsWindow(GetSafeHwnd()))¤	{¤		GetWindowText(strWindowText);¤	}¤	else¤	{¤		return FALSE;¤	}¤¤	// First see if we are in numerical mode¤	if (GetOption(OT_EDIT_NUMERICAL) == FALSE)¤	{¤		return FALSE;¤	}¤¤	// See if string is numeric¤	if (IsStringNumeric(strWindowText) == FALSE)¤	{¤		return FALSE;¤	}¤¤	// Convert string¤	nReturn = atoi(strWindowText);¤¤	return TRUE;¤}¤¤BOOL COptionTreeItemEdit::GetEditDword(DWORD &dwReturn)¤{¤	// Declare variables¤	CString strWindowText;¤¤	// Set blank¤	dwReturn = 0;¤¤	// Get window text¤	if (IsWindow(GetSafeHwnd()))¤	{¤		GetWindowText(strWindowText);¤	}¤	else¤	{¤		return FALSE;¤	}¤¤	// First see if we are in numerical mode¤	if (GetOption(OT_EDIT_NUMERICAL) == FALSE)¤	{¤		return FALSE;¤	}¤¤	// See if string is numeric¤	if (IsStringNumeric(strWindowText) == FALSE)¤	{¤		return FALSE;¤	}¤¤	// Convert string¤	dwReturn = (DWORD) atoi(strWindowText);¤¤	return TRUE;¤}¤¤void COptionTreeItemEdit::CleanDestroyWindow()¤{¤	// Destroy window¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Destroy window¤		DestroyWindow();¤	}¤}¤¤void COptionTreeItemEdit::OnSetFocus(CWnd* pOldWnd) ¤{¤	// Mark focus¤	m_bFocus = TRUE;¤	CEdit::OnSetFocus(pOldWnd);¤}¤BOOL COptionTreeItemEdit::PrepareEditItem(const CString& sWindowText,¤                                          DWORD dwOptions, ¤                                          DWORD dwAddStyle,¤                                          const CString& inputmask)¤{¤  _WindowTextBuffer = sWindowText;¤  // the edit already exists.so we assume, that it should be recreated with different¤  // properties¤  if (IsWindow(GetSafeHwnd()))¤	{¤    bool recreate=false;¤    if(m_dwOptions != dwOptions)¤    {¤      m_dwOptions=dwOptions;¤      recreate = true;¤    }¤    if(_dwExStyleBuffer != dwAddStyle)¤    {¤      _dwExStyleBuffer=dwAddStyle;¤      recreate = true;¤    }¤    if(_InputMaskBuffer != inputmask)¤    {¤      _InputMaskBuffer=inputmask;¤      recreate = true;¤    }¤    // destroy only.next click will make it¤    if(recreate == true)¤      this->DestroyWindow();¤  }¤  else¤  {¤    m_dwOptions=dwOptions;¤    _dwExStyleBuffer=dwAddStyle;¤    _InputMaskBuffer=inputmask;¤  }¤  return TRUE;¤}¤¤BOOL COptionTreeItemEdit::CreateEditItem(DWORD dwOptions, ¤                                         DWORD dwAddStyle,¤                                         const CString& inputmask)¤{¤	// Declare variables¤	DWORD dwStyle = WS_CHILD | WS_VISIBLE | ES_AUTOHSCROLL;¤	BOOL bRet = FALSE;¤¤¤	// Make sure options is not NULL¤	if (m_otOption == NULL)¤	{¤		return FALSE;¤	}¤  if(inputmask.GetLength() > 0)¤    this->SetInputMask(inputmask);¤¤	// Create edit control¤	if (!IsWindow(GetSafeHwnd()))¤	{¤		// -- Create edit style¤		// -- -- Multiline¤		if (dwOptions & OT_EDIT_MULTILINE)¤		{¤			dwStyle &= ~ES_AUTOHSCROLL;¤			dwStyle |= ES_MULTILINE;¤			dwStyle |= ES_AUTOVSCROLL;¤			dwStyle |= WS_VSCROLL;¤			dwStyle |= ES_WANTRETURN;¤		}¤		// -- -- Password¤		if (dwOptions & OT_EDIT_PASSWORD)¤		{¤			dwStyle |= ES_PASSWORD;¤		}¤		// -- -- Numerical unsigned int¤		if (dwOptions & OT_EDIT_NUMERICAL)¤		{¤      if(inputmask.GetLength() == 0)¤        this->SetInputMask(INT_MASK);¤			  //dwStyle |= ES_NUMBER;¤		}¤		// -- -- Additional style¤		if (dwAddStyle != 0)¤		{¤			dwStyle |= dwAddStyle;¤		}¤¤		// -- Create the edit view¤		bRet = Create(dwStyle, m_rcAttribute, m_otOption->GetCtrlParent(), GetCtrlID());¤¤		// -- Setup edit¤		if (bRet == TRUE)¤		{¤			// -- -- Set font¤			SetFont(m_otOption->GetNormalFont(), TRUE);¤¤			// -- -- Modify style¤			ModifyStyleEx(0, WS_EX_CLIENTEDGE, SWP_FRAMECHANGED);¤¤			// -- -- Save options¤			m_dwOptions = dwOptions;¤¤			// -- -- Set selection¤			SetSel(0, 0);¤¤			// -- -- Set multiline¤			if (GetOption(OT_EDIT_MULTILINE) == TRUE)¤			{¤				//SetItemHeight(OT_EDIT_MLHEIGHT);¤				ShowScrollBar(SB_VERT, FALSE);¤			}¤¤			// -- -- Set window position¤			MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height());¤¤			// -- -- Hide window¤			ShowWindow(SW_HIDE);¤      m_bActivated = FALSE;¤		}¤	}¤¤	return bRet;¤}¤void    COptionTreeItemEdit::SetEditText(const CString& sText)¤{¤  _WindowTextBuffer = sText;¤	if (::IsWindow(GetSafeHwnd()))¤	{¤		SetWindowText(_WindowTextBuffer);¤	}¤  // force redraw of attribute¤  else if(m_otOption != NULL)¤  {¤		m_otOption->RefreshItem(this);¤    /*¤    if(this->CreateEditItem(m_dwOptions, _dwExStyleBuffer,_InputMaskBuffer) == TRUE)¤		  SetWindowText(_WindowTextBuffer);¤    */¤    //this->OnRefresh();¤  }¤}¤¤void COptionTreeItemEdit::SetEditDouble(double dValue)¤{¤	// Declare variables¤	CString strText;¤¤	// Convert string¤	strText.Format("%.0f", dValue);¤  this->SetEditText(strText);¤}¤¤void COptionTreeItemEdit::SetEditInt(int nValue)¤{¤	// Declare variables¤	CString strText;¤¤	// Convert string¤	strText.Format("%d", nValue);¤¤  this->SetEditText(strText);¤}¤¤void COptionTreeItemEdit::SetEditFloat(float fValue)¤{¤	// Declare variables¤	CString strText;¤¤	// Convert string¤	strText.Format("%.0f", fValue);¤  this->SetEditText(strText);¤}¤¤void COptionTreeItemEdit::SetEditDword(DWORD dwValue)¤{¤	// Declare variables¤	CString strText;¤¤	// Convert string¤	strText.Format("%d", dwValue);¤  this->SetEditText(strText);¤}¤¤void COptionTreeItemEdit::SetEditLong(long lValue)¤{¤	// Declare variables¤	CString strText;¤¤	// Convert string¤	strText.Format("%.0f", lValue);¤  this->SetEditText(strText);¤}¤¤void COptionTreeItemEdit::OnDeSelect()¤{¤	// Hide window¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		ShowWindow(SW_HIDE);¤    m_bActivated = FALSE;¤	}¤}¤¤void COptionTreeItemEdit::OnSelect()¤{¤	// Do nothing here¤}¤¤¤void COptionTreeItemEdit::SetOption(DWORD dwOption, BOOL bSet)¤{¤  COptionTreeItem::SetOption(dwOption,bSet);¤	// Options changed¤	OptionsChanges();¤}¤¤void COptionTreeItemEdit::OptionsChanges()¤{¤	// Multiline¤	SetDrawMultiline(GetOption(OT_EDIT_MULTILINE));¤	if (GetOption(OT_EDIT_MULTILINE) == TRUE)¤	{¤		SetItemHeight(OT_EDIT_MLHEIGHT);¤¤		if (IsWindow(GetSafeHwnd()))¤		{¤			ModifyStyle(0, ES_MULTILINE, 0);¤		}¤	}¤	else¤	{¤		SetItemHeight(OT_DEFHEIGHT);¤¤		if (IsWindow(GetSafeHwnd()))¤		{¤			ModifyStyle(ES_MULTILINE, 0, 0);¤		}¤	}¤¤	// Password¤	if (GetOption(OT_EDIT_PASSWORD) == TRUE)¤	{¤		if (IsWindow(GetSafeHwnd()))¤		{¤			ModifyStyle(0, ES_PASSWORD, 0);¤		}¤	}¤	else¤	{¤		if (IsWindow(GetSafeHwnd()))¤		{¤			ModifyStyle(ES_PASSWORD, 0, 0);¤		}¤	}¤¤	// Numerical¤	SetDrawMultiline(GetOption(OT_EDIT_NUMERICAL));¤	if (GetOption(OT_EDIT_NUMERICAL) == TRUE)¤	{¤		SetItemHeight(OT_EDIT_MLHEIGHT);¤¤		if (IsWindow(GetSafeHwnd()))¤		{¤			ModifyStyle(0, ES_MULTILINE, 0);¤		}¤	}¤	else¤	{¤		SetItemHeight(OT_DEFHEIGHT);¤¤		if (IsWindow(GetSafeHwnd()))¤		{¤			ModifyStyle(ES_MULTILINE, 0, 0);¤		}¤	}¤¤	Fit ();¤}¤¤void COptionTreeItemEdit::OnEnChange()¤{¤  // TODO:  If this is a RICHEDIT control, the control will not¤  // send this notification unless you override the __super::OnInitDialog()¤  // function and call CRichEditCtrl().SetEventMask()¤  // with the ENM_CHANGE flag ORed into the mask.¤	¤  SetChanged(1);¤}¤¤void COptionTreeItemEdit::OnShow(BOOL bShow)¤{¤  if(::IsWindow(this->GetSafeHwnd()) == TRUE)¤  {¤    if(bShow == TRUE && m_bActivated == TRUE)¤      this->ShowWindow(SW_SHOW);¤    else¤      this->ShowWindow(SW_HIDE);¤  }¤}¤CString COptionTreeItemEdit::GetAttributeText(void)¤{¤  CString sText("");¤  if(::IsWindow(this->GetSafeHwnd()) == TRUE)    ¤    this->GetWindowText(sText);¤  return sText;¤}¤¤//#UC END# *470B0202007D*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B0202007D_DESTR_BODY*"
		    value      	(value Text 
|//#UC START# *470B0202007D_DESTR_BODY*¤	//#UC END# *470B0202007D_DESTR_BODY*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B0202007D_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B0202007D_CUSTOM_INCLUDES*¤#include "shared/WinGUI/OptionTreeControls/OptionTreeDef.h"¤#include "shared/WinGUI/OptionTreeControls/OptionTreeRes.h"¤//#UC END# *470B0202007D_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B0202007D*"
		    value      	(value Text 
|//#UC START# *470B0202007D*¤// Construction¤public:¤	COptionTreeItemEdit();¤¤// Attributes¤public:¤¤// Operations¤public:¤¤// Overrides¤	// ClassWizard generated virtual function overrides¤	//{{AFX_VIRTUAL(COptionTreeItemEdit)¤	//}}AFX_VIRTUAL¤¤// Implementation¤public:¤	virtual void SetOption(DWORD dwOption, BOOL bSet);¤¤	virtual void SetEditLong(long lValue);¤	virtual void SetEditDword(DWORD dwValue);¤	virtual void SetEditFloat(float fValue);¤	virtual void SetEditInt(int nValue);¤	virtual void SetEditDouble(double dValue);¤	BOOL PrepareEditItem(const CString& sWindowText="",¤							  DWORD dwOptions=0, ¤							  DWORD dwAddStyle = 0,¤							  const CString& inputmask="");¤¤	BOOL CreateEditItem(DWORD dwOptions, ¤					  DWORD dwAddStyle = 0,¤					  const CString& inputmask="");¤¤	///¤	/// Attention: Use this instead of SetWindowText¤	///¤	virtual void    SetEditText(const CString& sText);¤¤	virtual void OnMove();¤	virtual void OnRefresh();¤	virtual void OnCommit();¤	virtual void OnActivate();¤	virtual void CleanDestroyWindow();¤	virtual void OnDeSelect();¤	virtual void OnSelect();¤	virtual void DrawAttribute(CDC *pDC, const RECT &rcRect);¤	virtual void OnShow(BOOL bShow);¤	virtual CString GetAttributeText(void);¤¤	BOOL GetEditDword(DWORD &dwReturn);¤	BOOL GetEditInt(int &nReturn);¤	BOOL GetEditLong(long &lReturn);¤	BOOL GetEditDouble(double &dReturn);¤	BOOL GetEditFloat(float &fReturn);¤¤	void set_maximum_height (int height);¤protected:¤  BOOL PreTranslateMessage(MSG* pMsg) ;¤¤	// Generated message map functions¤protected:¤	BOOL IsStringNumeric(CString strString);¤	//{{AFX_MSG(COptionTreeItemEdit)¤	afx_msg UINT OnGetDlgCode();¤	afx_msg void OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags);¤	afx_msg void OnKillFocus(CWnd* pNewWnd);¤	afx_msg void OnSetFocus(CWnd* pOldWnd);¤	//}}AFX_MSG¤¤protected:¤	void OptionsChanges();¤	BOOL m_bFocus;¤	int m_maximum_height;¤	// these members store creation params¤	DWORD   _dwExStyleBuffer;¤	CString _InputMaskBuffer;¤	CString _WindowTextBuffer;¤public:¤  afx_msg void OnEnChange();¤¤  void Fit ();¤//#UC END# *470B0202007D*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"WikiPageID (wiki)"
		    value      	(value Text 
|Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemEdit|470B0202007D
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B0202007D_MESSAGE_MAP*"
		    value      	(value Text 
|//#UC START# *470B0202007D_MESSAGE_MAP*¤	ON_WM_GETDLGCODE()¤	ON_WM_KEYDOWN()¤	ON_WM_KILLFOCUS()¤	ON_WM_SETFOCUS()¤	ON_CONTROL_REFLECT(EN_CHANGE, OnEnChange)¤	//#UC END# *470B0202007D_MESSAGE_MAP*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (wiki)"
		    value      	"wiki")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (h)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (cpp)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ElementCreationOrder"
		    value      	"16663735448"))
	    quid       	"470B0202007D"
	    documentation 	"поле ввода для отображения в дереве контролов"
	    stereotype 	"GuiControl"
	    superclasses 	(list inheritance_relationship_list
		(object Inheritance_Relationship
		    quid       	"470B021502CE"
		    supplier   	"Logical View::shared::WinGUI::OptionTreeControls::CEditMask"
		    quidu      	"470AFDEC0203")
		(object Inheritance_Relationship
		    quid       	"4785EB2202F3"
		    supplier   	"Logical View::shared::WinGUI::OptionTreeControls::COptionTreeItem"
		    quidu      	"470AFC61008C"))
	    language   	"MDA Generator")
	(object Class "COptionTreeItemEditButton"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"AbstarctOperation"
		    value      	"regular")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsNative"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need assign op"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need copy ctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need ref count"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need unsorted less"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"debug log"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"local supervisor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need UC"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need dctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need objcounter"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"no base class"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"non virtual base"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"singleton"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (h)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeItemEditButton.h")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (cpp)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeItemEditButton.cpp")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B029301E4_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B029301E4_CUSTOM_INCLUDES*¤#include "shared/Core/fix/win_afx.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTree.h"¤//#UC END# *470B029301E4_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B029301E4*"
		    value      	(value Text 
|//#UC START# *470B029301E4*¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeItemEditButton¤¤COptionTreeItemEditButton::COptionTreeItemEditButton()¤{¤	// Initialize variables¤	m_bFocus = FALSE;¤	m_dwOptions = 0;	¤¤	// Set item type¤	SetItemType(OT_ITEM_EDIT);¤}¤¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeItemEditButton message handlers¤¤void COptionTreeItemEditButton::OnActivate()¤{¤  BOOL bres = TRUE;¤  if (IsWindow(GetSafeHwnd()) == FALSE)¤  {¤    bres = this->CreateEditItem(m_dwOptions, _dwExStyleBuffer,_InputMaskBuffer);¤    this->SetWindowText(_WindowTextBuffer);¤    m_otOption->RefreshItem(this,_D_REFRESH_LABEL);¤  }¤	// Make sure window is valid¤	if (IsWindow(m_ctrlButton.GetSafeHwnd()))¤	{¤		// -- Show window¤		m_ctrlButton.ShowWindow(SW_SHOW);¤    m_bActivated = TRUE;¤¤		// -- Set window position of button¤		m_ctrlButton.MoveWindow(m_rcAttribute.right-20, m_rcAttribute.top, 20, m_rcAttribute.Height());¤¤   }¤	// Make sure window is valid¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		ShowWindow(SW_SHOW);¤    m_bActivated = TRUE;¤¤		// -- Set selection¤		SetSel(0, 0);¤¤		// -- Set window position¤		MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width() - 20, m_rcAttribute.Height());¤¤		// -- Set focus¤		SetFocus();¤	}¤}¤¤UINT COptionTreeItemEditButton::OnGetDlgCode() ¤{¤	return CEdit::OnGetDlgCode() | DLGC_WANTALLKEYS;¤}¤¤void COptionTreeItemEditButton::DrawAttribute(CDC *pDC, const RECT &rcRect)¤{¤	// If we don't have focus, text is drawn.¤	if (m_bFocus == TRUE)¤	{¤		return;¤	}¤¤	// Make sure options aren't NULL¤	if (m_otOption == NULL)¤	{¤		return;¤	}¤¤	// Make sure there is a window¤	if (!IsWindow(GetSafeHwnd()))¤	{¤    COLORREF crOld=0;¤	  if (IsReadOnly() == TRUE || m_otOption->IsWindowEnabled() == FALSE)¤	  {¤		  crOld = pDC->SetTextColor(GetSysColor(COLOR_GRAYTEXT));¤	  }¤	  else¤	  {¤		  crOld = pDC->SetTextColor(GetTextColor());¤	  }¤¤    CFont *pOldFont = pDC->SelectObject(COptionTree::GetNormalFont());¤    CRect arect(rcRect);¤	  if (GetOption(OT_EDIT_MULTILINE) == FALSE)¤	  {¤		  pDC->DrawText(_WindowTextBuffer, &arect, DT_SINGLELINE | DT_VCENTER);¤		  pDC->DrawText(_WindowTextBuffer, &arect, DT_SINGLELINE | DT_VCENTER | DT_CALCRECT);¤    }¤    else¤    {¤      pDC->DrawText(_WindowTextBuffer, &arect, DT_TOP);¤		  pDC->DrawText(_WindowTextBuffer, &arect, DT_TOP | DT_CALCRECT);¤    }¤    pDC->SelectObject(pOldFont);¤		return;¤	}¤¤	// Set window position¤	if (IsWindow(m_ctrlButton.GetSafeHwnd())) ¤	{¤		// -- Set window position of button¤		m_ctrlButton.MoveWindow(m_rcAttribute.right-20, m_rcAttribute.top, 20, m_rcAttribute.Height());¤   }¤	// Set window position¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Set window position¤		MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width() - 20, m_rcAttribute.Height());¤	}¤¤	// Declare variables¤	HGDIOBJ hOld;¤	COLORREF crOld;¤	int nOldBack;¤	CRect rcText;¤	CString strText, strWindowText;¤	COLORREF crOldBack;¤¤	// Get window text¤	GetWindowText(strWindowText);¤¤	// Make text¤	// -- Password¤	if (GetOption(OT_EDIT_PASSWORD) == TRUE)¤	{¤		strText = "";¤		for (int i = 0; i < strWindowText.GetLength(); i++)¤		{¤			strText += _T("*");¤		}¤	}¤	// -- No password¤	else¤	{¤		strText = strWindowText;¤	}¤¤	// Select font¤	hOld = pDC->SelectObject(m_otOption->GetNormalFont());¤	¤	// Set text color¤	if (IsReadOnly() == TRUE || m_otOption->IsWindowEnabled() == FALSE)¤	{¤		crOld = pDC->SetTextColor(GetSysColor(COLOR_GRAYTEXT));¤	}¤	else¤	{¤		crOld = pDC->SetTextColor(GetTextColor());¤	}¤¤	// Set background mode¤	nOldBack = pDC->SetBkMode(TRANSPARENT);¤¤	// Set background color¤	crOldBack = pDC->SetBkColor(GetBackgroundColor());	¤¤	// Get rectangle¤	rcText = rcRect;¤¤	// Draw text¤	// -- Single line¤	if (GetOption(OT_EDIT_MULTILINE) == FALSE)¤	{¤		pDC->DrawText(strText, rcText, DT_SINGLELINE | DT_VCENTER);¤	}¤	// -- Mutliline¤	else¤	{¤		pDC->DrawText(strText, rcText, DT_TOP);¤	}¤¤	// Restore GDI ojects¤	pDC->SelectObject(hOld);¤	pDC->SetTextColor(crOld);¤	pDC->SetBkMode(nOldBack);¤	pDC->SetBkColor(crOldBack);¤}¤¤void COptionTreeItemEditButton::OnCommit()¤{¤	// Hide button control¤	if (IsWindow(m_ctrlButton.GetSafeHwnd()))¤	{¤		// -- Show window¤		m_ctrlButton.ShowWindow(SW_HIDE);¤	}¤	// Hide edit control¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		ShowWindow(SW_HIDE);¤	}¤  m_bActivated = FALSE;¤}¤¤void COptionTreeItemEditButton::OnRefresh()¤{¤	// move button¤	if (IsWindow(m_ctrlButton.GetSafeHwnd()))¤	{¤		m_ctrlButton.MoveWindow(m_rcAttribute.right-20, m_rcAttribute.top, 20, m_rcAttribute.Height());¤	}¤	// Set the window text¤	if (IsWindow(GetSafeHwnd()))¤	{¤		MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width()-20, m_rcAttribute.Height());¤	}¤}¤¤void COptionTreeItemEditButton::OnMove()¤{¤	// move button¤	if (IsWindow(m_ctrlButton.GetSafeHwnd()))¤	{¤		m_ctrlButton.MoveWindow(m_rcAttribute.right-20, m_rcAttribute.top, 20, m_rcAttribute.Height());¤	}¤	// Set window position¤	if (IsWindow(GetSafeHwnd()))¤	{¤		MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width()-20, m_rcAttribute.Height());¤  }¤¤¤	// Hide window¤	if (m_bFocus == FALSE && IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤    m_bActivated = FALSE;¤    this->OnShow(FALSE);¤	}¤}¤¤BOOL COptionTreeItemEditButton::PreTranslateMessage(MSG* pMsg)¤{¤  return COptionTreeItemEdit::PreTranslateMessage(pMsg);¤}¤¤void COptionTreeItemEditButton::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags) ¤{¤¤	COptionTreeItemEdit::OnKeyDown(nChar, nRepCnt, nFlags);¤}¤¤void COptionTreeItemEditButton::OnKillFocus(CWnd* pNewWnd) ¤{¤   if (pNewWnd == &m_ctrlButton) // hb - if the focus switches to button dont commit changes¤   {¤		  CEdit::OnKillFocus(pNewWnd);¤      return;¤   }¤	// Validate¤	if (m_otOption == NULL)¤	{¤		CEdit::OnKillFocus(pNewWnd);¤		return;¤	}¤¤	// See if new window is tree of list¤	if (m_otOption->IsChild(pNewWnd) == TRUE)¤	{¤		// -- Mark focus¤		m_bFocus = FALSE;¤¤		// -- Commit changes¤		CommitChanges(_changed > 0 ? true : false);¤	}¤	¤	CEdit::OnKillFocus(pNewWnd);	¤}¤¤BOOL COptionTreeItemEditButton::IsStringNumeric(CString strString)¤{¤	// See if string is numeric or not¤	if (strString.FindOneOf("1234567890") == -1 || strString.FindOneOf("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ`~[]{}-_=+\\|'/?>,<") != -1)¤	{¤		return FALSE;¤	}¤¤	return TRUE;¤}¤¤BOOL COptionTreeItemEditButton::GetEditFloat(float &fReturn)¤{¤	// Declare variables¤	CString strWindowText;¤¤	// Set blank¤	fReturn = 0;¤¤	// Get window text¤	if (IsWindow(GetSafeHwnd()))¤	{¤		GetWindowText(strWindowText);¤	}¤	else¤	{¤		return FALSE;¤	}¤¤	// First see if we are in numerical mode¤	if (GetOption(OT_EDIT_NUMERICAL) == FALSE)¤	{¤		return FALSE;¤	}¤¤	// See if string is numeric¤	if (IsStringNumeric(strWindowText) == FALSE)¤	{¤		return FALSE;¤	}¤¤	// Convert string¤	fReturn = (float) atof(strWindowText);¤¤	return TRUE;¤}¤¤BOOL COptionTreeItemEditButton::GetEditDouble(double &dReturn)¤{¤	// Declare variables¤	CString strWindowText;¤¤	// Set blank¤	dReturn = 0;¤¤	// Get window text¤	if (IsWindow(GetSafeHwnd()))¤	{¤		GetWindowText(strWindowText);¤	}¤	else¤	{¤		return FALSE;¤	}¤¤	// First see if we are in numerical mode¤	if (GetOption(OT_EDIT_NUMERICAL) == FALSE)¤	{¤		return FALSE;¤	}¤¤	// See if string is numeric¤	if (IsStringNumeric(strWindowText) == FALSE)¤	{¤		return FALSE;¤	}¤¤	// Convert string¤	dReturn = atof(strWindowText);¤¤	return TRUE;¤}¤¤BOOL COptionTreeItemEditButton::GetEditLong(long &lReturn)¤{¤	// Declare variables¤	CString strWindowText;¤¤	// Set blank¤	lReturn = 0;¤¤	// Get window text¤	if (IsWindow(GetSafeHwnd()))¤	{¤		GetWindowText(strWindowText);¤	}¤	else¤	{¤		return FALSE;¤	}¤¤	// First see if we are in numerical mode¤	if (GetOption(OT_EDIT_NUMERICAL) == FALSE)¤	{¤		return FALSE;¤	}¤¤	// See if string is numeric¤	if (IsStringNumeric(strWindowText) == FALSE)¤	{¤		return FALSE;¤	}¤¤	// Convert string¤	lReturn = atol(strWindowText);¤¤	return TRUE;¤}¤¤BOOL COptionTreeItemEditButton::GetEditInt(int &nReturn)¤{¤	// Declare variables¤	CString strWindowText;¤¤	// Set blank¤	nReturn = 0;¤¤	// Get window text¤	if (IsWindow(GetSafeHwnd()))¤	{¤		GetWindowText(strWindowText);¤	}¤	else¤	{¤		return FALSE;¤	}¤¤	// First see if we are in numerical mode¤	if (GetOption(OT_EDIT_NUMERICAL) == FALSE)¤	{¤		return FALSE;¤	}¤¤	// See if string is numeric¤	if (IsStringNumeric(strWindowText) == FALSE)¤	{¤		return FALSE;¤	}¤¤	// Convert string¤	nReturn = atoi(strWindowText);¤¤	return TRUE;¤}¤¤BOOL COptionTreeItemEditButton::GetEditDword(DWORD &dwReturn)¤{¤	// Declare variables¤	CString strWindowText;¤¤	// Set blank¤	dwReturn = 0;¤¤	// Get window text¤	if (IsWindow(GetSafeHwnd()))¤	{¤		GetWindowText(strWindowText);¤	}¤	else¤	{¤		return FALSE;¤	}¤¤	// First see if we are in numerical mode¤	if (GetOption(OT_EDIT_NUMERICAL) == FALSE)¤	{¤		return FALSE;¤	}¤¤	// See if string is numeric¤	if (IsStringNumeric(strWindowText) == FALSE)¤	{¤		return FALSE;¤	}¤¤	// Convert string¤	dwReturn = (DWORD) atoi(strWindowText);¤¤	return TRUE;¤}¤¤void COptionTreeItemEditButton::CleanDestroyWindow()¤{¤	// Destroy button¤	if (IsWindow(m_ctrlButton.GetSafeHwnd()))¤	{¤		// -- Destroy window¤		m_ctrlButton.DestroyWindow();¤	}¤	// Destroy window¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Destroy window¤		DestroyWindow();¤	}¤}¤¤void COptionTreeItemEditButton::OnSetFocus(CWnd* pOldWnd) ¤{¤	// Mark focus¤	m_bFocus = TRUE;¤	¤	CEdit::OnSetFocus(pOldWnd);	¤}¤¤BOOL COptionTreeItemEditButton::CreateEditItem( DWORD dwOptions, ¤                                                DWORD dwAddStyle,¤                                                const CString& inputmask)¤{¤	// Declare variables¤	DWORD dwStyle = WS_CHILD | WS_VISIBLE | ES_AUTOHSCROLL;¤	BOOL bRet = FALSE;¤¤¤	// Make sure options is not NULL¤	if (m_otOption == NULL)¤	{¤		return FALSE;¤	}¤¤  if(inputmask.GetLength() > 0)¤    this->SetInputMask(inputmask);¤¤	// Create edit control¤	if (!IsWindow(GetSafeHwnd()))¤	{¤		// -- Create edit style¤		// -- -- Multiline¤		if (dwOptions & OT_EDIT_MULTILINE)¤		{¤			dwStyle |= ES_MULTILINE;¤		}¤		// -- -- Password¤		if (dwOptions & OT_EDIT_PASSWORD)¤		{¤			dwStyle |= ES_PASSWORD;¤		}¤		// -- -- Numeical¤		if (dwOptions & OT_EDIT_NUMERICAL)¤		{¤			dwStyle |= ES_NUMBER;¤		}¤		// -- -- Additional style¤		if (dwAddStyle != 0)¤		{¤			dwStyle |= dwAddStyle;¤		}¤¤		// -- Create the edit view¤		bRet = Create(dwStyle, m_rcAttribute, m_otOption->GetCtrlParent(), GetCtrlID());¤¤		// -- Setup edit¤		if (bRet == TRUE)¤		{¤			// -- -- Set font¤			SetFont(m_otOption->GetNormalFont(), TRUE);¤¤			// -- -- Modify style¤			ModifyStyleEx(0, WS_EX_CLIENTEDGE, SWP_FRAMECHANGED);¤¤			// -- -- Save options¤			m_dwOptions = dwOptions;¤¤			// -- -- Set selection¤			SetSel(0, 0);¤¤			// -- -- Set multiline¤			if (GetOption(OT_EDIT_MULTILINE) == TRUE)¤			{¤				SetItemHeight(OT_EDIT_MLHEIGHT);¤			}¤¤			// -- -- Set window position¤			MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height());¤¤			// -- -- Hide window¤			ShowWindow(SW_HIDE);¤      m_bActivated = FALSE;¤	      // Create button control¤	      if (!IsWindow(m_ctrlButton.GetSafeHwnd()))¤	      {¤            if (!m_ctrlButton.Create(_T("..."), WS_CHILD | BS_PUSHBUTTON, CRect(0,0,0,0),m_otOption->GetCtrlParent(), GetCtrlID()))¤               TRACE(_T("COptionTreeItemEditButton::CreateEditItem() - CreateButton failed\n"));¤         }¤		}¤	}¤¤	return bRet;¤}¤¤void COptionTreeItemEditButton::SetEditDouble(double dValue)¤{¤  COptionTreeItemEdit::SetEditDouble(dValue);¤}¤¤void COptionTreeItemEditButton::SetEditInt(int nValue)¤{¤  COptionTreeItemEdit::SetEditInt(nValue);¤}¤¤void COptionTreeItemEditButton::SetEditFloat(float fValue)¤{¤  COptionTreeItemEdit::SetEditFloat(fValue);¤}¤¤void COptionTreeItemEditButton::SetEditDword(DWORD dwValue)¤{¤  COptionTreeItemEdit::SetEditDword(dwValue);¤}¤¤void COptionTreeItemEditButton::SetEditLong(long lValue)¤{¤  COptionTreeItemEdit::SetEditLong(lValue);¤}¤¤void COptionTreeItemEditButton::OnDeSelect()¤{¤	// Hide button¤	if (IsWindow(m_ctrlButton.GetSafeHwnd()))¤	{¤		// -- Show window¤		m_ctrlButton.ShowWindow(SW_HIDE);¤	}¤	// Hide window¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		ShowWindow(SW_HIDE);¤	}¤  m_bActivated = FALSE;¤}¤¤void COptionTreeItemEditButton::OnSelect()¤{¤	// Do nothing here¤}¤¤void COptionTreeItemEditButton::SetOption(DWORD dwOption, BOOL bSet)¤{¤  COptionTreeItem::SetOption(dwOption,bSet);¤	// Options changed¤	OptionsChanges();¤}¤¤void COptionTreeItemEditButton::OptionsChanges()¤{¤	// Multiline¤	SetDrawMultiline(GetOption(OT_EDIT_MULTILINE));¤	if (GetOption(OT_EDIT_MULTILINE) == TRUE)¤	{¤		SetItemHeight(OT_EDIT_MLHEIGHT);¤¤		if (IsWindow(GetSafeHwnd()))¤		{¤			ModifyStyle(0, ES_MULTILINE, 0);¤		}¤	}¤	else¤	{¤		SetItemHeight(OT_DEFHEIGHT);¤¤		if (IsWindow(GetSafeHwnd()))¤		{¤			ModifyStyle(ES_MULTILINE, 0, 0);¤		}¤	}¤¤	// Password¤	if (GetOption(OT_EDIT_PASSWORD) == TRUE)¤	{¤		if (IsWindow(GetSafeHwnd()))¤		{¤			ModifyStyle(0, ES_PASSWORD, 0);¤		}¤	}¤	else¤	{¤		if (IsWindow(GetSafeHwnd()))¤		{¤			ModifyStyle(ES_PASSWORD, 0, 0);¤		}¤	}¤¤	// Numerical¤	SetDrawMultiline(GetOption(OT_EDIT_NUMERICAL));¤	if (GetOption(OT_EDIT_NUMERICAL) == TRUE)¤	{¤		SetItemHeight(OT_EDIT_MLHEIGHT);¤¤		if (IsWindow(GetSafeHwnd()))¤		{¤			ModifyStyle(0, ES_MULTILINE, 0);¤		}¤	}¤	else¤	{¤		SetItemHeight(OT_DEFHEIGHT);¤¤		if (IsWindow(GetSafeHwnd()))¤		{¤			ModifyStyle(ES_MULTILINE, 0, 0);¤		}¤	}¤}¤¤void COptionTreeItemEditButton::OnEnChange()¤{¤  // TODO:  If this is a RICHEDIT control, the control will not¤  // send this notification unless you override the COptionTreeItemEdit::OnInitDialog()¤  // function and call CRichEditCtrl().SetEventMask()¤  // with the ENM_CHANGE flag ORed into the mask.¤¤  SetChanged(1);¤}¤void COptionTreeItemEditButton::OnShow(BOOL bShow)¤{¤  if(::IsWindow(this->GetSafeHwnd()) == TRUE)¤  {¤    if(bShow == TRUE && m_bActivated == TRUE)¤    {¤      this->ShowWindow(SW_SHOW);¤      m_ctrlButton.ShowWindow(SW_SHOW);¤    }¤    else¤    {¤      this->ShowWindow(SW_HIDE);¤      m_ctrlButton.ShowWindow(SW_HIDE);¤    }¤  }¤}¤¤//#UC END# *470B029301E4*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B029301E4_DESTR_BODY*"
		    value      	(value Text 
|//#UC START# *470B029301E4_DESTR_BODY*¤	//#UC END# *470B029301E4_DESTR_BODY*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B029301E4_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B029301E4_CUSTOM_INCLUDES*¤#include "shared/WinGUI/OptionTreeControls/OptionTreeDef.h"¤#include "shared/WinGUI/OptionTreeControls/OptionTreeRes.h"¤//#UC END# *470B029301E4_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B029301E4*"
		    value      	(value Text 
|//#UC START# *470B029301E4*¤// Construction¤public:¤	COptionTreeItemEditButton();¤¤// Attributes¤public:¤¤// Operations¤public:¤¤// Overrides¤	// ClassWizard generated virtual function overrides¤	//{{AFX_VIRTUAL(COptionTreeItemEditButton)¤	//}}AFX_VIRTUAL¤¤// Implementation¤public:¤	void SetOption(DWORD dwOption, BOOL bSet);¤	void SetEditLong(long lValue);¤	void SetEditDword(DWORD dwValue);¤	void SetEditFloat(float fValue);¤	void SetEditInt(int nValue);¤	void SetEditDouble(double dValue);¤	virtual BOOL CreateEditItem(  DWORD dwOptions, ¤								DWORD dwAddStyle = 0,¤								const CString& inputmask="");¤	virtual void OnMove();¤	virtual void OnRefresh();¤	virtual void OnCommit();¤	virtual void OnActivate();¤	virtual void CleanDestroyWindow();¤	virtual void OnDeSelect();¤	virtual void OnSelect();¤	virtual void DrawAttribute(CDC *pDC, const RECT &rcRect);¤	virtual void OnShow(BOOL bShow);¤¤	BOOL GetEditDword(DWORD &dwReturn);¤	BOOL GetEditInt(int &nReturn);¤	BOOL GetEditLong(long &lReturn);¤	BOOL GetEditDouble(double &dReturn);¤	BOOL GetEditFloat(float &fReturn);¤¤protected:¤	BOOL PreTranslateMessage(MSG* pMsg) ;¤	// Generated message map functions¤protected:¤	BOOL IsStringNumeric(CString strString);¤	//{{AFX_MSG(COptionTreeItemEditButton)¤	afx_msg UINT OnGetDlgCode();¤	afx_msg void OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags);¤	afx_msg void OnKillFocus(CWnd* pNewWnd);¤	afx_msg void OnSetFocus(CWnd* pOldWnd);¤	//}}AFX_MSG¤¤protected:¤	void OptionsChanges();¤	BOOL m_bFocus;¤	CButton m_ctrlButton;¤public:¤	afx_msg void OnEnChange();¤//#UC END# *470B029301E4*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"WikiPageID (wiki)"
		    value      	(value Text 
|Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemEditButton|470B029301E4
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B029301E4_MESSAGE_MAP*"
		    value      	(value Text 
|//#UC START# *470B029301E4_MESSAGE_MAP*¤	ON_WM_GETDLGCODE()¤	ON_WM_KEYDOWN()¤	ON_WM_KILLFOCUS()¤	ON_WM_SETFOCUS()¤	ON_CONTROL_REFLECT(EN_CHANGE, OnEnChange)¤	//#UC END# *470B029301E4_MESSAGE_MAP*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (h)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (cpp)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (wiki)"
		    value      	"wiki")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ElementCreationOrder"
		    value      	"16659825901"))
	    quid       	"470B029301E4"
	    documentation 	"непонятный контрол..."
	    stereotype 	"GuiControl"
	    superclasses 	(list inheritance_relationship_list
		(object Inheritance_Relationship
		    quid       	"470B032101F4"
		    supplier   	"Logical View::shared::WinGUI::OptionTreeControls::COptionTreeItemEdit"
		    quidu      	"470B0202007D"))
	    language   	"MDA Generator")
	(object Class "COptionTreeItemFile"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"AbstarctOperation"
		    value      	"regular")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsNative"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need assign op"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need copy ctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need ref count"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need unsorted less"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"debug log"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"local supervisor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need UC"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need dctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need objcounter"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"no base class"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"non virtual base"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"singleton"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (cpp)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeItemFile.cpp")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (h)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeItemFile.h")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B034A0232_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B034A0232_CUSTOM_INCLUDES*¤#include "shared/Core/fix/win_afx.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTree.h"¤//#UC END# *470B034A0232_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B034A0232*"
		    value      	(value Text 
|//#UC START# *470B034A0232*¤//////////////////////////////////////////////////////////////////////¤// Construction/Destruction¤//////////////////////////////////////////////////////////////////////¤¤COptionTreeItemFile::COptionTreeItemFile()¤{¤	// Initialize variables¤	m_dwOptions = NULL;¤	m_lDefaultHeight = 0;¤	m_dwDlgFlags = NULL;¤	m_strDefExt = _T("");¤	m_strFilter = _T("");¤	m_lDefaultHeight = 0;¤	m_strDlgTitle = _T("Select Folder");¤	m_strBufferText = "";¤	// Set item type¤	SetItemType(OT_ITEM_FILE);¤}¤¤void COptionTreeItemFile::DrawAttribute(CDC *pDC, const RECT &rcRect)¤{¤	// Declare variables¤	COLORREF crOld;¤	int nOldBack;¤	CRect rcText, rcClient;¤	HGDIOBJ hOld;¤	COLORREF crOldBack;¤¤	// Make sure options aren't NULL¤	if (m_otOption == NULL)¤	{¤		return;¤	}¤¤	// Get window rect¤	rcClient = rcRect;¤¤	// Select font¤	hOld = pDC->SelectObject(m_otOption->GetNormalFont());¤	¤	// Set text color¤	if (IsReadOnly() == TRUE || m_otOption->IsWindowEnabled() == FALSE)¤	{¤		crOld = pDC->SetTextColor(GetSysColor(COLOR_GRAYTEXT));¤	}¤	else¤	{¤		crOld = pDC->SetTextColor(GetTextColor());¤	}¤¤	// Set background mode¤	nOldBack = pDC->SetBkMode(TRANSPARENT);¤¤	// Set background color¤	crOldBack = pDC->SetBkColor(GetBackgroundColor());	¤¤	// Draw text¤	// Get text rectangle¤	rcText.left  = rcRect.left + 1;¤	rcText.right = rcRect.right;¤	rcText.top = rcRect.top + 1;¤	rcText.bottom = rcRect.bottom;¤¤	update_buffer ();¤	// Draw text¤	pDC->DrawText(m_strBufferText, rcText, DT_VCENTER);¤	pDC->DrawText(m_strBufferText, rcText, DT_VCENTER | DT_CALCRECT);¤	¤	// Restore GDI ojects¤	pDC->SetTextColor(crOld);¤	pDC->SetBkMode(nOldBack);¤	pDC->SelectObject(hOld);¤	pDC->SetBkColor(crOldBack);¤}¤¤void COptionTreeItemFile::OnCommit()¤{¤}¤¤void COptionTreeItemFile::OnRefresh()¤{¤}¤¤void COptionTreeItemFile::OnMove()¤{¤}¤¤void COptionTreeItemFile::OnActivate()¤{¤	// Declare variables¤	CFont *pFont;¤	LOGFONT lf;¤	BOOL bMultiline = FALSE;¤	int m_nNumItems = 0;¤	POSITION psPos;¤	CString strFile;¤// GARANT {¤	bool commit = false;¤// } GARANT¤¤	// Get file¤	if (m_strFileNames.GetSize() == 0)¤	{¤		strFile = _T("");¤	}¤	else¤	{¤		strFile = m_strFileNames.GetAt(0);¤	}¤¤	// Select folder¤	if (GetOption(OT_FILE_SELECTDIALOG) == TRUE)¤	{¤		if (m_dlgFile.SelectFolder(m_strDlgTitle, strFile, m_dwDlgFlags, m_otOption) == IDOK)¤		{¤			bMultiline = TRUE;¤¤			// -- Get file names¤			m_strFileNames.RemoveAll();¤			m_strFileNames.Add(m_dlgFile.GetSelectedFolder());¤¤			// -- Number of items¤			m_nNumItems = 1;¤// GARANT {¤			commit = true;¤// } GARANT¤		}¤	}¤	// Normal¤	else¤	{¤		m_dlgFile.SetDialog(GetOption(OT_FILE_OPENDIALOG), m_strDefExt, strFile, m_dwDlgFlags, m_strFilter, m_otOption);¤		if (m_dlgFile.DoModal() == IDOK)¤		{¤			bMultiline = TRUE;¤¤			// -- Get file names¤			m_strFileNames.RemoveAll();¤			psPos = m_dlgFile.GetStartPosition();¤¤			while (psPos != NULL)¤			{¤				m_strFileNames.Add(m_dlgFile.GetNextPathName(psPos));¤¤				m_nNumItems++;¤			}¤// GARANT {¤			commit = true;¤// } GARANT¤		}¤    ¤	}¤¤	// Change height¤	if (bMultiline == TRUE)¤	{¤		// -- Get font¤		pFont = m_otOption->GetNormalFont();¤		pFont->GetLogFont(&lf);¤¤		if ((abs(lf.lfHeight) + 3) * m_nNumItems > m_lDefaultHeight)¤		{¤			SetItemHeight((abs(lf.lfHeight) + 3) * m_nNumItems + ATTRIB_OFFSET);¤			SetDrawMultiline(TRUE);¤		}¤		else¤		{¤			SetItemHeight(m_lDefaultHeight);¤			SetDrawMultiline(FALSE);¤		}¤	}¤¤	// Update items¤	if (m_otOption != NULL)¤	{¤		m_otOption->UpdatedItems();¤	}¤¤// GARANT {¤	if (commit) {¤		CommitChanges();¤	}¤// } GARANT¤}¤¤void COptionTreeItemFile::CleanDestroyWindow()¤{¤¤}¤¤void COptionTreeItemFile::OnDeSelect()¤{¤}¤¤void COptionTreeItemFile::OnSelect()¤{¤}¤¤¤¤BOOL COptionTreeItemFile::GetDialogFlag(DWORD dwOption)¤{¤	// Return option¤	return (m_dwDlgFlags & dwOption) ? TRUE : FALSE;¤}¤¤void COptionTreeItemFile::SetDialogFlag(DWORD dwOption, BOOL bSet)¤{¤	// Set option¤	if (bSet == TRUE)¤	{¤		m_dwDlgFlags |= dwOption;¤	}¤	else¤	{¤		m_dwDlgFlags &= ~dwOption;¤	}	¤}¤¤BOOL COptionTreeItemFile::CreateFileItem(CString strFile, CString strDefExt, CString strFilter, DWORD dwOptions, DWORD dwDlgFlags)¤{¤¤	// Make sure options is not NULL¤	if (m_otOption == NULL)¤	{¤		return FALSE;¤	}¤¤	// Save options¤	m_dwOptions = dwOptions;¤¤	// Save dialog flags¤	m_dwDlgFlags = dwDlgFlags;¤¤	// Save file¤	m_strFileNames.Add(strFile);¤¤	// Save default extention¤	m_strDefExt = strDefExt;¤¤	// Save filter¤	m_strFilter = strFilter;¤¤	// Get default height¤	m_lDefaultHeight = GetHeight();¤¤	return TRUE;¤}¤¤// GARANT {¤void COptionTreeItemFile::SetFileName (const CString& file) {¤	m_strFileNames.RemoveAll();¤	AddFileName (file);¤}¤// } GARANT¤¤void COptionTreeItemFile::AddFileName(CString strFile) {¤	std::string str_file (strFile);¤	GCL::str_replace (str_file, "/", "\\");¤	m_strFileNames.Add (str_file.c_str ());¤}¤¤void COptionTreeItemFile::SetDialogFlags(DWORD dwFlags)¤{¤	m_dwDlgFlags = dwFlags;¤}¤¤DWORD COptionTreeItemFile::GetDialogFlags()¤{¤	return m_dwDlgFlags;¤}¤¤void COptionTreeItemFile::SertDefaultExtention(CString strExt)¤{¤	m_strDefExt = strExt;¤}¤¤CString COptionTreeItemFile::GetDefaultExtention()¤{¤	return m_strDefExt;¤}¤¤void COptionTreeItemFile::SetFilter(CString strFilter)¤{¤	m_strFilter = strFilter;¤}¤¤CString COptionTreeItemFile::GetFilter()¤{¤	return m_strFilter;¤}¤¤void COptionTreeItemFile::SetDialogTitle(CString strTitle)¤{¤	m_strDlgTitle = strTitle;¤}¤¤CString COptionTreeItemFile::GetDialogTitle()¤{¤	return m_strDlgTitle;¤}¤¤CString COptionTreeItemFile::GetFileExtention(CString strFile)¤{¤	// Declare variables¤	TCHAR szExt[MAX_PATH];¤¤	// Split path into components¤	_tsplitpath(strFile, NULL, NULL, NULL, szExt);¤¤	//memmove(szExt, szExt + 1,strlen(szExt) - 1);¤	//szExt[strlen(szExt) - 1] = '\0';¤¤	return szExt;¤}¤¤CString COptionTreeItemFile::GetFileName (CString strFile) {¤	// Declare variables¤	TCHAR szName[MAX_PATH];¤¤	// Split path into components¤	_tsplitpath(strFile, NULL, NULL, szName, NULL);¤¤	//memmove(szName, szName + 1,strlen(szName) - 1);¤	//szName[strlen(szName) - 1] = '\0';¤¤	return szName;¤}¤¤CString COptionTreeItemFile::GetFileDirectory(CString strFile)¤{¤	// Declare variables¤	TCHAR szDrive[MAX_PATH];¤	TCHAR szDir[MAX_PATH];¤¤	// Split path into components¤	_tsplitpath(strFile, szDrive, szDir, NULL, NULL);¤	::lstrcat(szDrive, szDir);¤¤	return szDrive;¤}¤¤CString COptionTreeItemFile::GetFileDrive(CString strFile)¤{¤	// Declare variables¤	TCHAR szDrive[MAX_PATH];¤¤	// Split path into components¤	_tsplitpath(strFile, szDrive, NULL, NULL, NULL);¤¤	return szDrive;¤}¤¤POSITION COptionTreeItemFile::GetStartPosition()¤{¤	return m_dlgFile.GetStartPosition();¤}¤¤CString COptionTreeItemFile::GetNextPathName(POSITION &pos)¤{¤	return m_dlgFile.GetNextPathName(pos);¤}¤¤CString COptionTreeItemFile::GetPathName()¤{¤	return m_dlgFile.GetPathName();¤}¤¤CString COptionTreeItemFile::GetFileName()¤{¤	return m_dlgFile.GetFileName();¤}¤¤CString COptionTreeItemFile::GetFileTitle()¤{¤	return m_dlgFile.GetFileTitle();¤}¤¤CString COptionTreeItemFile::GetFileExt()¤{¤	return m_dlgFile.GetFileExt();¤}¤¤CString COptionTreeItemFile::GetFileDir()¤{¤	return m_dlgFile.GetFileDir();¤}¤¤CString COptionTreeItemFile::GetFileDrive()¤{¤	return m_dlgFile.GetFileDrive();¤}¤¤CString COptionTreeItemFile::GetSelectedFolder()¤{¤	return m_dlgFile.GetSelectedFolder();¤}¤¤CString COptionTreeItemFile::GetAttributeText() {¤	update_buffer ();¤¤	return m_strBufferText;¤}¤¤void COptionTreeItemFile::update_buffer () {¤	CString strText = _T("");¤	CString strTemp;¤¤	// -- Full path¤	if (GetOption(OT_FILE_SHOWFULLPATH) == TRUE)¤	{¤		for (int i = 0; i < m_strFileNames.GetSize(); i++)¤		{¤			// -- -- Get file¤			strTemp = m_strFileNames.GetAt(i);¤¤			// -- -- Add newline¤			if ((i+1) != m_strFileNames.GetSize())¤			{¤				strTemp += _T("\n");¤			}¤¤			// -- -- Add to text¤			strText += strTemp;¤		}¤	}¤	// -- Filename¤	else if (GetOption(OT_FILE_SHOWFILENAME) == TRUE)¤	{¤		CFileFind fFind;¤		for (int i = 0; i < m_strFileNames.GetSize(); i++)¤		{¤			if (GetOption(OT_FILE_NOFIND) == FALSE) {¤				// -- -- Find file information¤				if (fFind.FindFile(m_strFileNames.GetAt(i)) == FALSE)¤				{¤					continue;¤				}¤				fFind.FindNextFile();¤¤				// -- -- Get file¤				strTemp = fFind.GetFileName();¤			} else {¤				CString str = m_strFileNames.GetAt(i);¤				CString name = GetFileName (str);¤				CString ext = GetFileExtention (str);¤				TCHAR path_buffer[_MAX_PATH];¤				_tmakepath (path_buffer, NULL, NULL, name, ext); ¤¤				strTemp = path_buffer;¤			}¤¤			// -- -- Add newline¤			if ((i+1) != m_strFileNames.GetSize())¤			{¤				strTemp += _T("\n");¤			}¤¤			// -- -- Add to text¤			strText += strTemp;¤		}¤	}¤	// -- File title¤	else if (GetOption(OT_FILE_SHOWFILETITLE) == TRUE)¤	{¤		CFileFind fFind;¤		for (int i = 0; i < m_strFileNames.GetSize(); i++)¤		{¤			if (GetOption(OT_FILE_NOFIND) == FALSE) {¤				// -- -- Find file informaton¤				if (fFind.FindFile(m_strFileNames.GetAt(i)) == FALSE)¤				{¤					continue;¤				}¤				fFind.FindNextFile();¤¤				// -- -- Get file¤				strTemp = fFind.GetFileTitle();¤¤			} else {¤				strTemp = GetFileName (m_strFileNames.GetAt(i));¤			}¤			// -- -- Add newline¤			if ((i+1) != m_strFileNames.GetSize())¤			{¤				strTemp += _T("\n");¤			}¤¤			// -- -- Add to text¤			strText += strTemp;¤		}¤	}¤	// -- File extention¤	else if (GetOption(OT_FILE_SHOWFILEEXT) == TRUE)¤	{¤		CFileFind fFind;¤		for (int i = 0; i < m_strFileNames.GetSize(); i++)¤		{¤			if (GetOption(OT_FILE_NOFIND) == FALSE) {¤				// -- -- Find file informaton¤				if (fFind.FindFile(m_strFileNames.GetAt(i)) == FALSE)¤				{¤					continue;¤				}¤				fFind.FindNextFile();¤¤				// -- -- Get file¤				strTemp = GetFileExtention(fFind.GetFileName());¤			} else {¤				strTemp = GetFileExtention (m_strFileNames.GetAt(i));¤			}¤¤			// -- -- Add newline¤			if ((i+1) != m_strFileNames.GetSize())¤			{¤				strTemp += _T("\n");¤			}¤¤			// -- -- Add to text¤			strText += strTemp;¤		}¤	}¤	// -- File directory¤	else if (GetOption(OT_FILE_SHOWFILEDIR) == TRUE)¤	{¤		for (int i = 0; i < m_strFileNames.GetSize(); i++)¤		{¤			// -- -- Get file¤			strTemp = GetFileDirectory(m_strFileNames.GetAt(i));¤¤			// -- -- Add newline¤			if ((i+1) != m_strFileNames.GetSize())¤			{¤				strTemp += _T("\n");¤			}¤¤			// -- -- Add to text¤			strText += strTemp;¤		}¤	}¤	// -- File drive¤	else if (GetOption(OT_FILE_SHOWFILEDRIVE) == TRUE)¤	{¤		for (int i = 0; i < m_strFileNames.GetSize(); i++)¤		{¤			// -- -- Get file¤			strTemp = GetFileDrive(m_strFileNames.GetAt(i));¤¤			// -- -- Add newline¤			if ((i+1) != m_strFileNames.GetSize())¤			{¤				strTemp += _T("\n");¤			}¤¤			// -- -- Add to text¤			strText += strTemp;¤		}¤	}¤¤	// Makse sure we have a aselection¤	if (m_strFileNames.GetSize() == 0 || strText == _T(""))¤	{¤		strText = OT_FILE_NOSELECTION;¤	}¤¤	std::string tmp_text (strText);¤	strText = GCL::str_replace (tmp_text, "\\", "/").c_str ();¤¤	m_strBufferText = strText;¤}¤//#UC END# *470B034A0232*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B034A0232_DESTR_BODY*"
		    value      	(value Text 
|//#UC START# *470B034A0232_DESTR_BODY*¤	//#UC END# *470B034A0232_DESTR_BODY*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B034A0232_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B034A0232_CUSTOM_INCLUDES*¤#include "shared/WinGUI/OptionTreeControls/OptionTreeDef.h"¤#include "shared/WinGUI/OptionTreeControls/OptionTreeRes.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTreeFileDlg.h"¤//#UC END# *470B034A0232_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B034A0232*"
		    value      	(value Text 
|//#UC START# *470B034A0232*¤public:¤	COptionTreeItemFile();¤	virtual void OnMove();¤	virtual void OnRefresh();¤	virtual void OnCommit();¤	virtual void OnActivate();¤	virtual void CleanDestroyWindow();¤	virtual void OnDeSelect();¤	virtual void OnSelect();¤	virtual void DrawAttribute(CDC *pDC, const RECT &rcRect);¤	virtual void OnShow(BOOL bShow){;}¤	virtual CString GetAttributeText(void);¤¤	CString GetSelectedFolder();¤	CString GetFileDrive();¤	CString GetFileDir();¤	CString GetFileExt();¤	CString GetFileTitle();¤	CString GetFileName();¤	CString GetPathName();¤	CString GetNextPathName(POSITION& pos);¤	POSITION GetStartPosition();¤	CString GetDialogTitle();¤	void SetDialogTitle(CString strTitle);¤	CString GetFilter();¤	void SetFilter(CString strFilter);¤	CString GetDefaultExtention();¤	void SertDefaultExtention(CString strExt);¤	DWORD GetDialogFlags();¤	void SetDialogFlags(DWORD dwFlags);¤	void AddFileName(CString strFile);¤	BOOL CreateFileItem(CString strFile, CString strDefExt, CString strFilter, DWORD dwOptions, DWORD dwDlgFlags);¤¤	// GARANT {¤	void SetFileName (const CString& file);¤	// } GARANT¤¤protected:¤	//обновляет буфер m_strBufferText¤	void update_buffer ();¤	CString GetFileDrive(CString strFile);¤	CString GetFileDirectory(CString strFile);¤	CString GetFileName(CString strFile);¤	CString GetFileExtention(CString strFile);¤	BOOL GetDialogFlag(DWORD dwOption);¤	void SetDialogFlag(DWORD dwOption, BOOL bSet);	¤	DWORD m_dwDlgFlags;¤	long m_lDefaultHeight;¤	COptionTreeFileDlg m_dlgFile;¤	CStringArray m_strFileNames;¤	CString m_strDefExt;¤	CString m_strFilter;¤	CString m_strDlgTitle;¤	CString m_strBufferText;¤//#UC END# *470B034A0232*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"WikiPageID (wiki)"
		    value      	(value Text 
|Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemFile|470B034A0232
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B034A0232_MESSAGE_MAP*"
		    value      	(value Text 
|//#UC START# *470B034A0232_MESSAGE_MAP*¤	//#UC END# *470B034A0232_MESSAGE_MAP*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (cpp)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (wiki)"
		    value      	"wiki")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (h)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ElementCreationOrder"
		    value      	"16659826402"))
	    quid       	"470B034A0232"
	    documentation 	"контрол выбора файла, папки для отображения в дереве"
	    stereotype 	"GuiControl"
	    superclasses 	(list inheritance_relationship_list
		(object Inheritance_Relationship
		    quid       	"470B036E00AB"
		    supplier   	"Logical View::shared::WinGUI::OptionTreeControls::COptionTreeItem"
		    quidu      	"470AFC61008C"))
	    used_nodes 	(list uses_relationship_list
		(object Uses_Relationship
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"AbstarctOperation"
			    value      	"regular")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"IsNative"
			    value      	"false")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ElementCreationOrder"
			    value      	"16659826718"))
		    quid       	"4B4F62030265"
		    stereotype 	"uses"
		    supplier   	"Logical View::shared::GCL::str::str_op"
		    quidu      	"4503E01500CB"))
	    language   	"MDA Generator")
	(object Class "COptionTreeItemFont"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"AbstarctOperation"
		    value      	"regular")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsNative"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need assign op"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need copy ctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need ref count"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need unsorted less"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"debug log"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"local supervisor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need UC"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need dctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need objcounter"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"no base class"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"non virtual base"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"singleton"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (cpp)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeItemFont.cpp")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (h)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeItemFont.h")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B03AC01A5_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B03AC01A5_CUSTOM_INCLUDES*¤#include "shared/Core/fix/win_afx.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTreeFontSel.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTree.h"¤¤#define _D_DEFAULT_SAMPLE_TEXT "AaBbIiJjSsKkWwYyZz";¤static size_t szLogFont = sizeof(LOGFONT);¤¤//////////////////////////////////////////////////////////////////////¤// CDefFont¤//////////////////////////////////////////////////////////////////////¤CDefFont::CDefFont(const CString& sFaceName,const LONG height)¤{¤  memset((void*) (LOGFONT*)this,0,szLogFont);¤  lfHeight = -11;//height;¤  strcpy(lfFaceName,sFaceName);¤}¤//#UC END# *470B03AC01A5_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B03AC01A5*"
		    value      	(value Text 
|//#UC START# *470B03AC01A5*¤//////////////////////////////////////////////////////////////////////¤// Construction/Destruction¤//////////////////////////////////////////////////////////////////////¤CDefFont COptionTreeItemFont::__lfDefault;¤¤COptionTreeItemFont::COptionTreeItemFont()¤{¤	// Initialize variables¤	m_crDefTextColor = RGB(0, 0, 0);¤	m_crTextColor = RGB(0, 0, 0);¤	m_dwOptions = NULL;¤	m_strCustomSample = _T("");¤	m_pApplyWindow = NULL;¤	m_lDefaultHeight = 0;¤¤	// Set item type¤	SetItemType(OT_ITEM_FONT);¤}¤¤void COptionTreeItemFont::DrawAttribute(CDC *pDC, const RECT &rcRect)¤{¤	// Make sure options aren't NULL¤	if (m_otOption == NULL)¤	{¤		return;¤	}¤¤	// Declare variables¤	CFont *pOldFont=NULL;¤	COLORREF crOld;¤	int nOldBack;¤	CRect rcText, rcClient;¤	COLORREF crOldBack;¤¤	// Get window rect¤	rcClient = rcRect;¤¤	// Select font¤	pOldFont = pDC->SelectObject(&_Font);¤	¤	// Set text color¤	if (IsReadOnly() == TRUE || m_otOption->IsWindowEnabled() == FALSE)¤	{¤		crOld = pDC->SetTextColor(GetSysColor(COLOR_GRAYTEXT));¤	}¤	else¤	{¤		crOld = pDC->SetTextColor(m_crTextColor);¤	}¤¤	// Set background mode¤	nOldBack = pDC->SetBkMode(TRANSPARENT);¤¤	// Set background color¤	crOldBack = pDC->SetBkColor(GetBackgroundColor());	¤¤  // ce¤  if(m_strCustomSample.GetLength() == 0)¤    m_strCustomSample = _D_DEFAULT_SAMPLE_TEXT;¤  /*¤  if (GetOption(OT_FS_FONTNAMESAMPLE) == TRUE)¤	{¤		fFont.GetLogFont(&lf);¤	}¤  */¤	// Get text rectangle¤	rcText.left  = rcRect.left + 1;¤	rcText.right = rcRect.right;¤	rcText.top = rcRect.top;¤	rcText.bottom = rcRect.bottom;¤¤	// Draw text¤	pDC->DrawText(m_strCustomSample, rcText, DT_SINGLELINE | DT_VCENTER | DT_CALCRECT);¤  pDC->DrawText(m_strCustomSample, rcText, DT_SINGLELINE | DT_VCENTER);¤	¤	// Restore GDI ojects¤	pDC->SelectObject(pOldFont);¤	pDC->SetTextColor(crOld);¤	pDC->SetBkMode(nOldBack);¤	pDC->SetBkColor(crOldBack);¤}¤¤void COptionTreeItemFont::OnCommit()¤{¤}¤¤void COptionTreeItemFont::OnRefresh()¤{¤}¤¤void COptionTreeItemFont::OnMove()¤{¤}¤¤void COptionTreeItemFont::OnActivate()¤{¤	// Declare variables¤	CWnd *pWnd;¤¤	// Set apply window¤	if (m_pApplyWindow != NULL)¤	{¤		pWnd = m_pApplyWindow;¤	}¤	else¤	{¤		pWnd = m_otOption;¤	}¤¤	// Show dialog¤	COptionTreeFontSel fDialog(m_dwOptions, m_lfFont, m_lfFont, pWnd);¤  fDialog.SetCustomSample(m_strCustomSample);¤¤	// -- Default Font Color¤	fDialog.SetDefaultTextColor(m_crDefTextColor);¤	// -- Font Color¤	fDialog.SetTextColor(m_crTextColor);¤	// -- Control ID¤	fDialog.SetControlID(GetCtrlID());¤¤	// Show dialog¤	if (fDialog.DoModal() == ID_FONTSEL_OK)	¤	{¤		// -- Get font¤		fDialog.GetLogFont(m_lfFont);¤    this->SetCurFont(&m_lfFont);¤¤		// -- Get font color¤		m_crTextColor = fDialog.GetTextColor();¤¤		// -- Set item height¤		if ((abs(m_lfFont.lfHeight) + (ATTRIB_OFFSET * 2)) > m_lDefaultHeight)¤		{¤			SetItemHeight(abs(m_lfFont.lfHeight) + (ATTRIB_OFFSET * 2));¤			SetDrawMultiline(TRUE);¤		}¤		else¤		{¤			SetItemHeight(m_lDefaultHeight);¤			SetDrawMultiline(FALSE);¤		}¤    CommitChanges();¤	}¤¤	// Update items¤	if (m_otOption != NULL)¤	{¤		m_otOption->UpdatedItems();¤	}¤}¤¤void COptionTreeItemFont::CleanDestroyWindow()¤{¤}¤¤void COptionTreeItemFont::OnDeSelect()¤{¤}¤¤void COptionTreeItemFont::OnSelect()¤{¤}¤¤BOOL COptionTreeItemFont::CreateFontItem(LOGFONT* plfFont, COLORREF crFontColor, DWORD dwOptions)¤{¤	// Declare variables¤	CRect rcButton;¤¤	// Make sure options is not NULL¤	if (m_otOption == NULL)¤	{¤		return FALSE;¤	}¤¤	// Save options¤	m_dwOptions = dwOptions;¤¤	// Set font¤	SetCurFont(plfFont);¤¤	// Set color¤	SetTextColor(crFontColor);¤¤	// Get default height¤	m_lDefaultHeight = GetHeight();¤¤	return TRUE;¤}¤¤¤void COptionTreeItemFont::SetCurFont(LOGFONT* plf)¤{¤  LOGFONT* lplf = (plf != NULL) ? plf : &COptionTreeItemFont::__lfDefault;¤  memcpy((void*)&m_lfFont,(const void*)lplf,szLogFont);¤  if(_Font.GetSafeHandle() != NULL)¤    _Font.DeleteObject();¤  BOOL bres = _Font.CreateFontIndirect(lplf);¤}¤¤¤void COptionTreeItemFont::SetTextColor(COLORREF crColor)¤{¤	m_crTextColor = crColor;¤}¤¤COLORREF COptionTreeItemFont::GetTextColor()¤{¤	return m_crTextColor;¤}¤¤COLORREF COptionTreeItemFont::GetDefaultTextColor()¤{¤	return m_crDefTextColor;¤}¤¤void COptionTreeItemFont::SetCustomSample(const CString& strSample)¤{¤	m_strCustomSample = strSample;¤}¤¤void COptionTreeItemFont::SetApplyWindow(CWnd *pWnd)¤{¤	m_pApplyWindow = pWnd;¤}¤¤void  COptionTreeItemFont::GetCurFont(LOGFONT& lf)¤{¤  memcpy((void*)&lf,(const void*)&m_lfFont,szLogFont);¤}¤//#UC END# *470B03AC01A5*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B03AC01A5_DESTR_BODY*"
		    value      	(value Text 
|//#UC START# *470B03AC01A5_DESTR_BODY*¤	//#UC END# *470B03AC01A5_DESTR_BODY*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B03AC01A5_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B03AC01A5_CUSTOM_INCLUDES*¤#include "shared/WinGUI/OptionTreeControls/OptionTreeDef.h"¤#include "shared/WinGUI/OptionTreeControls/OptionTreeRes.h"¤¤class CDefFont : public LOGFONT¤{¤  public:¤    CDefFont(const CString& sFaceName="Arial",const LONG height=12);¤};¤//#UC END# *470B03AC01A5_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B03AC01A5*"
		    value      	(value Text 
|//#UC START# *470B03AC01A5*¤protected:¤	static CDefFont __lfDefault;¤¤public:¤	COptionTreeItemFont();¤	void SetApplyWindow(CWnd *pWnd);¤	void SetCustomSample(const CString& strSample);¤	COLORREF GetDefaultTextColor();¤	COLORREF GetTextColor();¤	void SetTextColor(COLORREF crColor);¤	void SetCurFont(LOGFONT* plf);¤	BOOL CreateFontItem(LOGFONT* plfFont, COLORREF crFontColor, DWORD dwOptions=OT_FS_USEDEFAULT);¤¤	virtual void OnMove();¤	virtual void OnRefresh();¤	virtual void OnCommit();¤	virtual void OnActivate();¤	virtual void CleanDestroyWindow();¤	virtual void OnDeSelect();¤	virtual void OnSelect();¤	virtual void DrawAttribute(CDC *pDC, const RECT &rcRect);¤	virtual void OnShow(BOOL bShow){;}¤¤	void  GetCurFont(LOGFONT& lf);¤¤protected:¤	COLORREF m_crDefTextColor;¤	COLORREF m_crTextColor;¤	LOGFONT m_lfFont;¤	CFont   _Font;¤	CString m_strCustomSample;¤	CWnd *m_pApplyWindow;¤	long m_lDefaultHeight;¤//#UC END# *470B03AC01A5*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"WikiPageID (wiki)"
		    value      	(value Text 
|Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemFont|470B03AC01A5
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B03AC01A5_MESSAGE_MAP*"
		    value      	(value Text 
|//#UC START# *470B03AC01A5_MESSAGE_MAP*¤	//#UC END# *470B03AC01A5_MESSAGE_MAP*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (wiki)"
		    value      	"wiki")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (h)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (cpp)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ElementCreationOrder"
		    value      	"16659827290"))
	    quid       	"470B03AC01A5"
	    documentation 	"контрол выбора шрифта для отображения в дереве"
	    stereotype 	"GuiControl"
	    superclasses 	(list inheritance_relationship_list
		(object Inheritance_Relationship
		    quid       	"470B03BF0203"
		    supplier   	"Logical View::shared::WinGUI::OptionTreeControls::COptionTreeItem"
		    quidu      	"470AFC61008C"))
	    language   	"MDA Generator")
	(object Class "COptionTreeItemHyperLink"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"AbstarctOperation"
		    value      	"regular")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsNative"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need assign op"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need copy ctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need ref count"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need unsorted less"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"debug log"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"local supervisor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need UC"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need dctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need objcounter"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"no base class"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"non virtual base"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"singleton"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (cpp)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeItemHyperLink.cpp")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (h)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeItemHyperLink.h")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B04000119_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B04000119_CUSTOM_INCLUDES*¤#include "shared/Core/fix/win_afx.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTreeFontSel.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTree.h"¤//#UC END# *470B04000119_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B04000119*"
		    value      	(value Text 
|//#UC START# *470B04000119*¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeItemHyperLink¤¤COptionTreeItemHyperLink::COptionTreeItemHyperLink()¤{¤	// Initialize variables¤	m_bFocus = FALSE;¤	m_crLink = RGB(0, 0, 255);¤	m_crHover = RGB(0, 0, 255);¤	m_crVisited = RGB(0, 0, 255);¤	m_bVisited = FALSE;¤	m_dwOptions = 0;¤	m_strLink = _T("");¤	m_hLinkCursor = NULL;¤	m_bHover = FALSE;¤	m_rcHover = CRect(0, 0, 0, 0);¤}¤¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeItemHyperLink message handlers¤¤BOOL COptionTreeItemHyperLink::CreateHyperlinkItem(DWORD dwOptions, CString strLink, COLORREF crLink, COLORREF crHover, COLORREF crVisited)¤{¤	// Declare variables¤	DWORD dwStyle = WS_CHILD | WS_VISIBLE | WS_CLIPSIBLINGS | WS_CLIPCHILDREN;¤	BOOL bRet = FALSE;¤	LOGFONT lf;¤	CFont *pFont;¤¤	// Make sure options is not NULL¤	if (m_otOption == NULL)¤	{¤		return FALSE;¤	}¤¤	// Create window¤	if (!IsWindow(GetSafeHwnd()))¤	{¤		// -- Create the edit view¤		bRet = Create(AfxRegisterWndClass(CS_HREDRAW | CS_VREDRAW, ::LoadCursor(NULL, IDC_ARROW)), _T(""), dwStyle, m_rcAttribute, m_otOption->GetCtrlParent(), GetCtrlID());¤¤		// -- Setup window¤		if (bRet == TRUE)¤		{¤			// -- -- Set font¤			SetFont(m_otOption->GetNormalFont(), TRUE);¤¤			// -- Get underline font¤			pFont = m_otOption->GetNormalFont();¤			pFont->GetLogFont(&lf);¤			lf.lfUnderline = TRUE;¤			m_fUnderlineFont.CreateFontIndirect(&lf);¤¤			// -- -- Set colors¤			SetLinkColor(crLink);¤			SetHoverColor(crHover);¤			SetVisitedColor(crVisited);¤¤			// -- -- Set link¤			SetLink(strLink);¤¤			// -- -- Set default cursor¤			SetDefaultCursor();¤¤			// -- -- Save options¤			m_dwOptions = dwOptions;¤¤			// -- -- Set window position¤			MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height());¤¤			// -- -- Show window¤			ShowWindow(SW_HIDE);¤		}¤	}¤¤	return bRet;¤}¤¤void COptionTreeItemHyperLink::SetLinkCursor(HCURSOR hCursor)¤{¤	// Validate¤	if (hCursor == NULL)¤	{¤		SetDefaultCursor();¤	}¤¤	// Destroy current cursor¤	if (m_hLinkCursor != NULL)¤	{¤		DestroyCursor(m_hLinkCursor);¤	}¤¤	// Save cursor¤	m_hLinkCursor = hCursor;¤}¤¤void COptionTreeItemHyperLink::SetDefaultCursor()¤{¤	// Set cursor¤    if (m_hLinkCursor == NULL)¤    {¤        // -- Get the windows directory¤        CString strWndDir;¤        GetWindowsDirectory(strWndDir.GetBuffer(MAX_PATH), MAX_PATH);¤        strWndDir.ReleaseBuffer();¤¤        strWndDir += _T("\\winhlp32.exe");¤¤        // -- This retrieves cursor #106 from winhlp32.exe, which is a hand pointer¤        HMODULE hModule = LoadLibrary(strWndDir);¤        if (hModule) ¤		    {¤          HCURSOR hHandCursor = ::LoadCursor(hModule, MAKEINTRESOURCE(106));¤          if (hHandCursor)¤			    {¤            m_hLinkCursor = CopyCursor(hHandCursor);¤				    DestroyCursor(hHandCursor);¤			    }¤        }¤¤        FreeLibrary(hModule);¤    }¤}¤¤HCURSOR COptionTreeItemHyperLink::GetLinkCursor()¤{¤	return m_hLinkCursor;¤}¤¤BOOL COptionTreeItemHyperLink::GetVisited()¤{¤	return m_bVisited;¤}¤¤BOOL COptionTreeItemHyperLink::OnEraseBkgnd(CDC* pDC) ¤{¤	return FALSE;¤}¤¤void COptionTreeItemHyperLink::SetLinkColor(COLORREF crColor)¤{¤	m_crLink = crColor;¤}¤¤void COptionTreeItemHyperLink::SetHoverColor(COLORREF crColor)¤{¤	m_crHover = crColor;¤}¤¤void COptionTreeItemHyperLink::SetVisitedColor(COLORREF crColor)¤{¤	m_crVisited = crColor;¤}¤¤COLORREF COptionTreeItemHyperLink::GetLinkColor()¤{¤	return m_crLink;¤}¤¤COLORREF COptionTreeItemHyperLink::GetHoverColor()¤{¤	return m_crHover;¤}¤¤COLORREF COptionTreeItemHyperLink::GetVisitedColor()¤{¤	return m_crVisited;¤}¤¤CString COptionTreeItemHyperLink::GetLink()¤{¤	return m_strLink;¤}¤¤void COptionTreeItemHyperLink::SetLink(CString strLink)¤{¤	m_strLink = strLink;¤}¤¤¤void COptionTreeItemHyperLink::DrawAttribute(CDC *pDC, const RECT &rcRect)¤{¤	// Make sure options aren't NULL¤	if (m_otOption == NULL)¤	{¤		return;¤	}¤¤	// Make sure there is a window¤	if (!IsWindow(GetSafeHwnd()))¤	{¤		return;¤	}¤¤	// Set window position¤	if (IsWindow(GetSafeHwnd()))¤	{¤		MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height());¤	}¤}¤¤void COptionTreeItemHyperLink::OnCommit()¤{¤}¤¤void COptionTreeItemHyperLink::OnExpand(BOOL bExpand)¤{¤	// Show window¤	if (bExpand == TRUE)¤	{¤		ShowWindow(SW_SHOW);¤	}¤	else¤	{¤		ShowWindow(SW_HIDE);¤	}¤}¤¤void COptionTreeItemHyperLink::OnRefresh()¤{¤	// Set the window positiion¤	if (IsWindow(GetSafeHwnd()))¤	{¤		MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height());¤	}¤}¤¤void COptionTreeItemHyperLink::OnMove()¤{¤	// Set window position¤	if (IsWindow(GetSafeHwnd()))¤	{¤		MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height());¤  }¤}¤¤void COptionTreeItemHyperLink::OnActivate()¤{¤	// Make sure window is valid¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Set window position¤		MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height());¤¤		// -- Set focus¤		SetFocus();¤¤		// -- Go to link¤		if (IsReadOnly() == FALSE)¤		{¤			ShellExecute(NULL, _T("open"), m_strLink, NULL, NULL, SW_SHOW);¤		}¤	}¤}¤¤void COptionTreeItemHyperLink::CleanDestroyWindow()¤{¤	// Destroy window¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Destroy window¤		DestroyWindow();¤	}¤}¤¤void COptionTreeItemHyperLink::OnDeSelect()¤{¤}¤¤void COptionTreeItemHyperLink::OnSelect()¤{¤}¤¤void COptionTreeItemHyperLink::OnPaint() ¤{¤	// Declare variables¤	HGDIOBJ hOldBrush;¤	CRect rcClient;¤	CPaintDC dc(this);¤	CDC* pDCMem = new CDC;¤	CFont *pOldFont;¤	CRect rcText;¤	CBitmap bpMem;¤	CBitmap *bmOld;¤	COLORREF rcOldColor;¤	int nOldBk;¤	COLORREF crOldBack;¤¤	// Get client rectangle¤	GetClientRect(rcClient);¤	rcText = rcClient;¤¤	// Create DC¤	pDCMem->CreateCompatibleDC(&dc);¤¤	// Create bitmap¤	bpMem.CreateCompatibleBitmap(&dc, rcClient.Width(), rcClient.Height());¤¤	// Select bitmap¤	bmOld = pDCMem->SelectObject(&bpMem);¤¤	// Select brush¤	hOldBrush = dc.SelectObject(GetSysColorBrush(COLOR_WINDOW));¤¤	// Fill background¤	pDCMem->PatBlt(rcClient.left, rcClient.top, rcClient.Width(), rcClient.Height(), PATCOPY);¤¤	// Select fonts¤	if ((GetOption(OT_HL_UNDERLINEHOVER) == TRUE && m_bHover == TRUE) || GetOption(OT_HL_UNDERLINE) == TRUE)¤	{¤		pOldFont = pDCMem->SelectObject(&m_fUnderlineFont);¤	}¤	else¤	{¤		pOldFont = pDCMem->SelectObject(m_otOption->GetNormalFont());¤	}¤¤    // Setbackground¤    nOldBk = pDCMem->SetBkMode(TRANSPARENT);¤¤	// Set background color¤	crOldBack = pDCMem->SetBkColor(GetBackgroundColor());	¤¤	// Set text color¤	// -- Read only¤	if (IsReadOnly() == TRUE)¤	{¤		rcOldColor = pDCMem->SetTextColor(GetSysColor(COLOR_GRAYTEXT));¤	}¤	// -- Hover¤	else if (m_bHover == TRUE && GetOption(OT_HL_HOVER) == TRUE)¤	{¤		rcOldColor = pDCMem->SetTextColor(m_crHover);¤	}¤	// -- Visited¤	else if (m_bVisited == TRUE && GetOption(OT_HL_VISITED) == TRUE)¤	{¤		rcOldColor = pDCMem->SetTextColor(m_crVisited);¤	}¤	else¤	{¤		rcOldColor = pDCMem->SetTextColor(m_crLink);¤	}¤¤	// Draw text¤	pDCMem->DrawText(m_strLink, rcText, DT_SINGLELINE | DT_VCENTER);¤	pDCMem->DrawText(m_strLink, rcText, DT_SINGLELINE | DT_VCENTER | DT_CALCRECT);¤	m_rcHover = rcText;¤¤	// Copy to screen¤	dc.BitBlt(0, 0, rcClient.Width(), rcClient.Height(), pDCMem, 0, 0, SRCCOPY);¤¤	// Restore GDI¤	pDCMem->SetBkMode(nOldBk);¤	pDCMem->SelectObject(hOldBrush);¤	pDCMem->SelectObject(pOldFont);¤	pDCMem->SelectObject(bmOld);¤	pDCMem->SetTextColor(rcOldColor);¤	pDCMem->SetBkColor(crOldBack);¤¤	// Delete objects¤	if (pDCMem->GetSafeHdc() != NULL)¤	{¤		pDCMem->DeleteDC();¤	}¤	delete pDCMem;¤	if (bpMem.GetSafeHandle() != NULL)¤	{¤		bpMem.DeleteObject();¤	}¤}¤¤void COptionTreeItemHyperLink::OnLButtonUp(UINT nFlags, CPoint point) ¤{¤	// Read only¤	if (IsReadOnly() == TRUE)¤	{¤		CWnd::OnLButtonUp(nFlags, point);¤		return;¤	}¤¤	// Kill timer¤	KillTimer(OT_TIMER);¤¤	// Mark visited¤	if (m_rcHover.PtInRect(point) == TRUE)¤	{¤		m_bVisited = TRUE;¤¤		// -- Go to link¤		ShellExecute(NULL, _T("open"), m_strLink, NULL, NULL, SW_SHOW);¤¤		// -- Set timer¤		SetTimer(OT_TIMER, 100, NULL);¤	}¤¤	// Force redraw¤	Invalidate();	¤¤	// Update window¤	UpdateWindow();¤¤	CWnd::OnLButtonUp(nFlags, point);¤}¤¤void COptionTreeItemHyperLink::OnMouseMove(UINT nFlags, CPoint point) ¤{	¤	// Read only¤	if (IsReadOnly() == TRUE)¤	{¤		CWnd::OnMouseMove(nFlags, point);¤		return;¤	}¤¤	// Clear hover¤	m_bHover = FALSE;¤¤	// Kill timer¤	KillTimer(OT_TIMER);¤¤	// Mark hover¤	if (m_rcHover.PtInRect(point) == TRUE)¤	{¤		m_bHover = TRUE;¤¤		SetCursor(m_hLinkCursor);¤¤		SetTimer(OT_TIMER, 100, NULL);¤	}¤¤	// Force redraw¤	Invalidate();	¤¤	// Update window¤	UpdateWindow();¤¤	CWnd::OnMouseMove(nFlags, point);¤}¤¤void COptionTreeItemHyperLink::OnTimer(UINT nIDEvent) ¤{¤	// Declare variables¤	CPoint ptPoint;¤	CRect rcHover = m_rcHover;¤¤	// Get cursor and rectangle¤	GetCursorPos(&ptPoint);¤	ClientToScreen(rcHover);¤¤	// Timer event¤	if (nIDEvent == OT_TIMER)¤	{¤		// -- Clear hover¤		if (rcHover.PtInRect(ptPoint) == FALSE)¤		{¤			KillTimer(OT_TIMER);¤			¤			m_bHover = FALSE;	¤			¤			Invalidate();¤¤			// -- Update window¤			UpdateWindow();¤		}¤	}¤¤	¤	CWnd::OnTimer(nIDEvent);¤}¤¤void COptionTreeItemHyperLink::SetVisited(BOOL bVisited)¤{¤	m_bVisited = bVisited;¤}¤¤void COptionTreeItemHyperLink::OnKillFocus(CWnd* pNewWnd) ¤{¤	// Validate¤	if (m_otOption == NULL)¤	{¤		CWnd::OnKillFocus(pNewWnd);¤		return;¤	}¤¤	// See if new window is tree of list¤	if (m_otOption->IsChild(pNewWnd) == TRUE)¤	{¤		// -- Mark focus¤		m_bFocus = FALSE;¤¤		// -- Commit changes¤		CommitChanges();¤	}¤¤	CWnd::OnKillFocus(pNewWnd);¤}¤¤void COptionTreeItemHyperLink::OnSetFocus(CWnd* pOldWnd) ¤{¤	// Mark focus¤	m_bFocus = TRUE;¤	¤	CWnd::OnSetFocus(pOldWnd);	¤}¤void COptionTreeItemHyperLink::OnShow(BOOL bShow)¤{¤  if(::IsWindow(this->GetSafeHwnd()) == TRUE)¤  {¤    if(bShow == TRUE)¤      this->ShowWindow(SW_SHOW);¤    else¤      this->ShowWindow(SW_HIDE);¤  }¤}¤CString COptionTreeItemHyperLink::GetAttributeText(void)¤{¤  CString sText("");¤  if(::IsWindow(this->GetSafeHwnd()) == TRUE)    ¤    this->GetWindowText(sText);¤  return sText;¤}¤¤//#UC END# *470B04000119*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B04000119_DESTR_BODY*"
		    value      	(value Text 
|//#UC START# *470B04000119_DESTR_BODY*¤	// Reallocate¤	if (m_fUnderlineFont.GetSafeHandle() != NULL)¤	{¤		m_fUnderlineFont.DeleteObject();¤	}¤	//#UC END# *470B04000119_DESTR_BODY*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B04000119_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B04000119_CUSTOM_INCLUDES*¤#include "shared/WinGUI/OptionTreeControls/OptionTreeDef.h"¤#include "shared/WinGUI/OptionTreeControls/OptionTreeRes.h"¤//#UC END# *470B04000119_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B04000119*"
		    value      	(value Text 
|//#UC START# *470B04000119*¤// Construction¤public:¤	COptionTreeItemHyperLink();¤	virtual void OnMove();¤	virtual void OnRefresh();¤	virtual void OnCommit();¤	virtual void OnActivate();¤	virtual void CleanDestroyWindow();¤	virtual void OnDeSelect();¤	virtual void OnSelect();¤	virtual void DrawAttribute(CDC *pDC, const RECT &rcRect);¤	virtual void OnExpand(BOOL bExpand);¤	virtual void OnShow(BOOL bShow);¤	virtual CString GetAttributeText(void);¤¤// Attributes¤public:¤¤// Operations¤public:¤¤// Overrides¤	// ClassWizard generated virtual function overrides¤	//{{AFX_VIRTUAL(COptionTreeItemHyperLink)¤	//}}AFX_VIRTUAL¤¤// Implementation¤public:¤	void SetVisited(BOOL bVisited);¤	void SetLink(CString strLink);¤	CString GetLink();¤	COLORREF GetVisitedColor();¤	COLORREF GetHoverColor();¤	COLORREF GetLinkColor();¤	void SetVisitedColor(COLORREF crColor);¤	void SetHoverColor(COLORREF crColor);¤	void SetLinkColor(COLORREF crColor);¤	BOOL GetVisited();¤	HCURSOR GetLinkCursor();¤	void SetLinkCursor(HCURSOR hCursor);¤	BOOL CreateHyperlinkItem(DWORD dwOptions, CString strLink, COLORREF crLink, COLORREF crHover = NULL, COLORREF crVisited = NULL);¤¤	// Generated message map functions¤protected:¤	BOOL m_bFocus;¤	void SetDefaultCursor();¤	COLORREF m_crLink;¤	COLORREF m_crHover;¤	COLORREF m_crVisited;¤	BOOL m_bVisited;¤	CString m_strLink;¤	HCURSOR  m_hLinkCursor;¤	CRect m_rcHover;¤	BOOL m_bHover;¤	CFont m_fUnderlineFont;¤	//{{AFX_MSG(COptionTreeItemHyperLink)¤	afx_msg BOOL OnEraseBkgnd(CDC* pDC);¤	afx_msg void OnPaint();¤	afx_msg void OnLButtonUp(UINT nFlags, CPoint point);¤	afx_msg void OnMouseMove(UINT nFlags, CPoint point);¤	afx_msg void OnTimer(UINT nIDEvent);¤	afx_msg void OnKillFocus(CWnd* pNewWnd);¤	afx_msg void OnSetFocus(CWnd* pOldWnd);¤	//}}AFX_MSG¤//#UC END# *470B04000119*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"WikiPageID (wiki)"
		    value      	(value Text 
|Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemHyperLink|470B04000119
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B04000119_MESSAGE_MAP*"
		    value      	(value Text 
|//#UC START# *470B04000119_MESSAGE_MAP*¤	ON_WM_ERASEBKGND()¤	ON_WM_PAINT()¤	ON_WM_LBUTTONUP()¤	ON_WM_MOUSEMOVE()¤	ON_WM_TIMER()¤	ON_WM_KILLFOCUS()¤	ON_WM_SETFOCUS()¤	//#UC END# *470B04000119_MESSAGE_MAP*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (wiki)"
		    value      	"wiki")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (h)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (cpp)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ElementCreationOrder"
		    value      	"16659827796"))
	    quid       	"470B04000119"
	    documentation 	"контрол киперссылка для отображения в дереве"
	    stereotype 	"GuiControl"
	    superclasses 	(list inheritance_relationship_list
		(object Inheritance_Relationship
		    quid       	"470B041A002E"
		    supplier   	"Logical View::shared::WinGUI::OptionTreeControls::COptionTreeItem"
		    quidu      	"470AFC61008C"))
	    language   	"MDA Generator")
	(object Class "COptionTreeItemImage"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"AbstarctOperation"
		    value      	"regular")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsNative"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need assign op"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need copy ctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need ref count"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need unsorted less"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"debug log"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"local supervisor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need UC"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need dctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need objcounter"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"no base class"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"non virtual base"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"singleton"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (cpp)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeItemImage.cpp")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (h)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeItemImage.h")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B043B030D_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B043B030D_CUSTOM_INCLUDES*¤#include "shared/Core/fix/win_afx.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTreeImagePopUp.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTree.h"¤//#UC END# *470B043B030D_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B043B030D*"
		    value      	(value Text 
|//#UC START# *470B043B030D*¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeItemImage¤¤COptionTreeItemImage::COptionTreeItemImage()¤{	¤	// Initalize variables¤	m_bFocus = FALSE;¤	m_sImageSizes.cx = 0;¤	m_sImageSizes.cy = 0;¤	m_nSelected = -1;¤	m_nNumColumns = 0;¤	m_dwOptions = NULL;¤¤	// Set item type¤	SetItemType(OT_ITEM_IMAGE);¤}¤¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeItemImage message handlers¤¤void COptionTreeItemImage::DrawAttribute(CDC *pDC, const RECT &rcRect)¤{¤	// If we don't have focus, text is drawn.¤	if (m_bFocus == TRUE)¤	{¤¤		return;¤	}¤¤	// Make sure options aren't NULL¤	if (m_otOption == NULL)¤	{¤		return;¤	}¤¤	// Make sure there is a window¤	if (!IsWindow(GetSafeHwnd()))¤	{¤		return;¤	}¤¤	// Set window position¤	if (IsWindow(GetSafeHwnd()))¤	{¤		SetWindowPos(NULL, m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height(), SWP_NOZORDER | SWP_NOACTIVATE | SWP_HIDEWINDOW);¤	}¤¤	// Draw control¤	DrawControl(pDC, rcRect);¤}¤¤void COptionTreeItemImage::OnCommit()¤{¤	// Hide window¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		ShowWindow(SW_HIDE);¤	}¤}¤¤void COptionTreeItemImage::OnRefresh()¤{¤	// Set the window positiion¤	if (IsWindow(GetSafeHwnd()))¤	{¤		SetWindowPos(NULL, m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height(), SWP_NOZORDER | SWP_NOACTIVATE);¤	}¤}¤¤void COptionTreeItemImage::OnMove()¤{¤	// Set window position¤	if (IsWindow(GetSafeHwnd()))¤	{¤		SetWindowPos(NULL, m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height(), SWP_NOZORDER | SWP_NOACTIVATE);¤	}¤¤	// Hide window¤	if (m_bFocus == FALSE && IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		ShowWindow(SW_HIDE);¤	}¤}¤¤void COptionTreeItemImage::OnActivate()¤{¤	// Make sure window is valid¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		ShowWindow(SW_SHOW);¤¤		// -- Set window position¤		SetWindowPos(NULL, m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height(), SWP_NOZORDER | SWP_SHOWWINDOW);¤¤		// -- Set focus¤		SetFocus();¤	}¤}¤¤void COptionTreeItemImage::CleanDestroyWindow()¤{¤	// Destroy window¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Destroy window¤		DestroyWindow();¤	}¤}¤¤void COptionTreeItemImage::OnDeSelect()¤{¤	// Hide window¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		ShowWindow(SW_HIDE);¤	}¤}¤¤void COptionTreeItemImage::OnSelect()¤{¤}¤¤void COptionTreeItemImage::OnLButtonUp(UINT nFlags, CPoint point) ¤{	¤	// Declare variables¤	CPoint ptPoint;¤¤	// Get cursor position¤	GetCursorPos(&ptPoint);¤¤	// Hide window¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		ShowWindow(SW_HIDE);¤	}¤¤	// Show icon popup¤	//беспокоится об удалении окна не нужно - оно само себя удалит¤	new COptionTreeImagePopUp(ptPoint, m_sImageSizes, m_nNumColumns, &m_imgImages, m_otOption, m_strText, m_nSelected, this);¤¤	// Update items¤	if (m_otOption != NULL)¤	{¤		m_otOption->UpdatedItems();¤	}¤¤	CWnd::OnLButtonUp(nFlags, point);¤}¤¤void COptionTreeItemImage::OnKillFocus(CWnd* pNewWnd) ¤{¤	// Mark focus¤	m_bFocus = FALSE;¤¤	// Commit changes¤	//CommitChanges();	¤	¤	CWnd::OnKillFocus(pNewWnd);	¤}¤¤void COptionTreeItemImage::OnSetFocus(CWnd* pOldWnd) ¤{¤	// Mark focus¤	m_bFocus = TRUE;¤	¤	CWnd::OnSetFocus(pOldWnd);¤}¤¤void COptionTreeItemImage::OnPaint() ¤{¤	// Check focus¤	if (m_bFocus == FALSE)¤	{¤		return;¤	}¤¤	// Declare variables¤	CPaintDC dc(this);¤	CRect rcClient;¤¤	// Get client rect¤	GetClientRect(rcClient);¤¤	// Draw control¤	DrawControl(&dc, rcClient);¤}¤¤BOOL COptionTreeItemImage::OnEraseBkgnd(CDC* pDC) ¤{¤	// Naa, we like flicker free better¤	return FALSE;¤}¤¤void COptionTreeItemImage::DrawControl(CDC *pDC, const RECT &rcRect)¤{¤	// Declare variables¤	HGDIOBJ hOld;¤	COLORREF crOld;¤	int nOldBack;¤	CRect rcText, rcImage, rcClient;¤	CString strText;¤	CBrush bBrush;¤	HICON hGreyScale = NULL, hSelected=NULL;¤	COLORREF crOldBack;¤¤	// Get window rect¤	GetClientRect(rcClient);¤¤	// Select font¤	hOld = pDC->SelectObject(m_otOption->GetNormalFont());¤	¤	// Set text color¤	if (IsReadOnly() == TRUE || m_otOption->IsWindowEnabled() == FALSE)¤	{¤		crOld = pDC->SetTextColor(GetSysColor(COLOR_GRAYTEXT));¤	}¤	else¤	{¤		crOld = pDC->SetTextColor(GetTextColor());¤	}¤¤	// Set background mode¤	nOldBack = pDC->SetBkMode(TRANSPARENT);¤¤	// Set background color¤	crOldBack = pDC->SetBkColor(GetBackgroundColor());	¤¤	// Make sure we have a selected item¤	if (m_nSelected != -1 && m_nSelected < m_imgImages.GetImageCount())¤	{¤		// -- Get icon rectangle¤		rcImage.left  = rcRect.left + 1;¤		rcImage.right = rcImage.left + m_sImageSizes.cx;¤		rcImage.top = rcRect.top + OT_IMAGE_IMAGESPACE;¤		rcImage.bottom = rcImage.top + + m_sImageSizes.cy;¤¤		// -- Draw image¤		if (IsReadOnly() == TRUE || m_otOption->IsWindowEnabled() == FALSE)¤		{¤			hSelected = m_imgImages.ExtractIcon(m_nSelected);¤			hGreyScale = CreateGreyScaleIcon(hSelected);¤			pDC->DrawState(CPoint(rcImage.left, rcImage.top), m_sImageSizes, (HICON)hGreyScale, DST_ICON | DSS_NORMAL, (CBrush*)NULL);¤		}¤		else¤		{¤			m_imgImages.Draw(pDC, m_nSelected, CPoint(rcImage.left, rcImage.top), ILD_NORMAL);¤		}¤¤¤		// -- Get text rectangle¤		rcText.left  = rcImage.right + ATTRIB_OFFSET;¤		rcText.right = rcRect.right;¤		rcText.top = rcRect.top;¤		rcText.bottom = rcRect.bottom;¤¤		// -- Get text¤		if (GetOption(OT_IMAGE_SHOWTEXT) == TRUE)¤		{¤			strText = m_strText.GetAt(m_nSelected);¤		}¤	}¤	else¤	{¤		// -- Get text rectangle¤		rcText.left  = rcRect.left + 1;¤		rcText.right = rcRect.right;¤		rcText.top = rcRect.top;¤		rcText.bottom = rcRect.bottom;¤¤		// -- No image selected¤		strText = OT_IMAGE_NOSELECTION;¤	}¤¤¤	// Draw text¤	pDC->DrawText(strText, rcText, DT_SINGLELINE | DT_VCENTER);¤	pDC->DrawText(strText, rcText, DT_SINGLELINE | DT_VCENTER | DT_CALCRECT);¤¤	// Restore GDI ojects¤	pDC->SelectObject(hOld);¤	pDC->SetTextColor(crOld);¤	pDC->SetBkMode(nOldBack);¤	pDC->SetBkColor(crOldBack);¤¤	// Delete grey icon¤	if (hSelected != NULL)¤	{¤		::DestroyIcon(hSelected);¤	}¤	if (hGreyScale != NULL)¤	{¤		::DestroyIcon(hGreyScale);¤	}¤}¤¤BOOL COptionTreeItemImage::CreateImageItem(DWORD dwOptions, CSize sImageSizes, int nNumberColumns)¤{¤	// Declare variables¤	DWORD dwStyle = WS_CHILD | WS_VISIBLE | WS_CLIPSIBLINGS | WS_CLIPCHILDREN;¤	BOOL bRet = FALSE;¤¤	// Make sure options is not NULL¤	if (m_otOption == NULL)¤	{¤		return FALSE;¤	}¤¤	// Create window¤	if (!IsWindow(GetSafeHwnd()))¤	{¤		// -- Create the edit view¤		bRet = Create(AfxRegisterWndClass(CS_HREDRAW | CS_VREDRAW, ::LoadCursor(NULL, IDC_ARROW)), _T(""), dwStyle, m_rcAttribute, m_otOption->GetCtrlParent(), GetCtrlID());¤¤		// -- Setup window¤		if (bRet == TRUE)¤		{¤			// -- -- Set font¤			SetFont(m_otOption->GetNormalFont(), TRUE);¤¤			// -- -- Save options¤			m_dwOptions = dwOptions;¤¤			// -- -- Create imagelist¤			if (m_imgImages.GetSafeHandle() != NULL)¤			{¤				m_imgImages.DeleteImageList();¤			}¤			if (!m_imgImages.Create(sImageSizes.cx, sImageSizes.cy, ILC_COLORDDB | ILC_MASK, 1, OT_IMAGE_MAXIMAGES))¤			{¤				bRet = FALSE;¤			}	¤¤			// -- -- Set item height¤			SetItemHeight((long) sImageSizes.cy + (OT_IMAGE_IMAGESPACE * 2));¤¤			// -- -- Set number of columns¤			SetNumberColumns(nNumberColumns);¤¤			// Set image height¤			SetImageSize(sImageSizes);¤¤			// -- -- Set window position¤			SetWindowPos(NULL, m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height(), SWP_NOZORDER | SWP_SHOWWINDOW);¤¤			// -- -- Hide window¤			ShowWindow(SW_HIDE);¤		}¤	}¤¤	return bRet;¤}¤¤void COptionTreeItemImage::SetImageSize(CSize sSize)¤{¤	m_sImageSizes = sSize;¤}¤¤CSize COptionTreeItemImage::GetImageSize()¤{¤	return m_sImageSizes;¤}¤¤void COptionTreeItemImage::SetNumberColumns(int nNum)¤{¤	m_nNumColumns = nNum;¤}¤¤¤void COptionTreeItemImage::AddIcon(HICON hIcon, CString strText)¤{¤	// Add image¤	m_imgImages.Add(hIcon);¤¤	// Add text¤	m_strText.Add(strText);¤}¤¤void COptionTreeItemImage::AddIcon(UINT uIcon, CString strText)¤{¤	// Add icon¤	AddIcon((HICON) LoadImage(AfxGetInstanceHandle(), MAKEINTRESOURCE(uIcon), IMAGE_ICON, m_sImageSizes.cx, m_sImageSizes.cy, LR_DEFAULTCOLOR), strText);¤}¤¤void COptionTreeItemImage::AddIcon(CString strIcon, CString strText)¤{¤	// Add icon¤	AddIcon((HICON) LoadImage(AfxGetInstanceHandle(), strIcon, IMAGE_ICON, m_sImageSizes.cx, m_sImageSizes.cy, LR_DEFAULTCOLOR), strText);¤}¤¤void COptionTreeItemImage::AddBitmap(CBitmap &bBitmap, COLORREF crMask, CString strText)¤{¤	// Add image¤	m_imgImages.Add(&bBitmap, crMask);¤¤	// Add text¤	m_strText.Add(strText);¤}¤¤void COptionTreeItemImage::AddBitmap(UINT uBitmap, COLORREF crMask, CString strText)¤{¤	// Declare variables¤	CBitmap bBitmap;¤¤	// Load bitmap¤	bBitmap.LoadBitmap(uBitmap);¤¤	// Add bitmap¤	AddBitmap(bBitmap, crMask, strText);¤}¤¤void COptionTreeItemImage::AddBitmap(CString strBitmap, COLORREF crMask, CString strText)¤{¤	// Declare variables¤	CBitmap bBitmap;¤¤	// Load bitmap¤	bBitmap.LoadBitmap(strBitmap);¤¤	// Add bitmap¤	AddBitmap(bBitmap, crMask, strText);¤}¤¤int COptionTreeItemImage::GetSelection()¤{¤	return m_nSelected;¤}¤¤void COptionTreeItemImage::SetSelection(int nSelection)¤{¤	m_nSelected = nSelection;¤}¤¤BOOL COptionTreeItemImage::GetBitmapFromImageList(CDC *pDC, HICON hIcon, CBitmap &bmp)¤{¤	// Declare varaibles¤	CDC dc;¤	CBrush brush;¤¤	dc.CreateCompatibleDC(pDC);¤	bmp.CreateCompatibleBitmap(pDC, m_sImageSizes.cx, m_sImageSizes.cy);¤	CBitmap* pOldBmp = dc.SelectObject(&bmp);¤	brush.CreateSolidBrush(GetSysColor(COLOR_MENU));¤	::DrawIconEx(dc.GetSafeHdc(), 0, 0, hIcon, m_sImageSizes.cx, m_sImageSizes.cy, 0, (HBRUSH)brush,DI_NORMAL);¤¤	// Restore¤	dc.SelectObject(pOldBmp);¤¤	// Delete¤	if (brush.GetSafeHandle() != NULL)¤	{¤		brush.DeleteObject();¤	}¤	if (dc.GetSafeHdc() != NULL)¤	{¤		dc.DeleteDC();¤	}¤¤	// The icon is not longer needed¤	DestroyIcon(hIcon);¤¤	return TRUE;¤}¤¤void COptionTreeItemImage::DitherBlt(CDC *drawdc, int nXDest, int nYDest, int nWidth, int nHeight, CBitmap &bmp, int nXSrc, int nYSrc)¤{¤	// Create a monochrome memory DC¤	CDC ddc;¤	ddc.CreateCompatibleDC(0);¤	CBitmap bwbmp;¤	bwbmp.CreateCompatibleBitmap(&ddc, nWidth, nHeight);¤	CBitmap * pddcOldBmp = ddc.SelectObject(&bwbmp);¤	CDC dc;¤	dc.CreateCompatibleDC(0);¤	CBitmap * pdcOldBmp = dc.SelectObject(&bmp);¤	COLORREF crOldback, crOldText;¤	¤	// Build a mask¤	ddc.PatBlt(0, 0, nWidth, nHeight, WHITENESS);¤	crOldback = dc.SetBkColor(GetSysColor(COLOR_BTNFACE));¤	ddc.BitBlt(0, 0, nWidth, nHeight, &dc, nXSrc,nYSrc, SRCCOPY);¤	dc.SetBkColor(GetSysColor(COLOR_BTNHILIGHT));¤	ddc.BitBlt(0, 0, nWidth, nHeight, &dc, nXSrc,nYSrc, SRCPAINT);¤¤	// Copy the image from the toolbar into the memory DC¤	// and draw it (grayed) back into the toolbar.¤	dc.FillSolidRect(0,0, nWidth, nHeight, GetSysColor((TRUE/*IsNewShell()*/)?COLOR_3DFACE:COLOR_MENU));¤	¤	// SK: Looks better on the old shell¤	dc.SetBkColor(RGB(0, 0, 0));¤	crOldText = dc.SetTextColor(RGB(255, 255, 255));¤	CBrush brShadow, brHilight;¤	brHilight.CreateSolidBrush(GetSysColor(COLOR_BTNHILIGHT));¤	brShadow.CreateSolidBrush(GetSysColor(COLOR_BTNSHADOW));¤	CBrush * pOldBrush = dc.SelectObject(&brHilight);¤	dc.BitBlt(0,0, nWidth, nHeight, &ddc, 0, 0, 0x00E20746L);¤	drawdc->BitBlt(nXDest+1,nYDest+1,nWidth, nHeight, &dc,0,0,SRCCOPY);¤	dc.BitBlt(1,1, nWidth, nHeight, &ddc, 0, 0, 0x00E20746L);¤	dc.SelectObject(&brShadow);¤	dc.BitBlt(0,0, nWidth, nHeight, &ddc, 0, 0, 0x00E20746L);¤	drawdc->BitBlt(nXDest,nYDest,nWidth, nHeight, &dc,0,0,SRCCOPY);¤	¤	// Restore DCs¤	ddc.SelectObject(pddcOldBmp);¤	dc.SelectObject(pOldBrush);¤	dc.SelectObject(pdcOldBmp);¤	dc.SetBkColor(crOldback);¤	dc.SetTextColor(crOldText);¤¤	// Delete¤	if (bwbmp.GetSafeHandle() != NULL)¤	{¤		bwbmp.DeleteObject();¤	}¤	if (brHilight.GetSafeHandle() != NULL)¤	{¤		brHilight.DeleteObject();¤	}¤	if (brShadow.GetSafeHandle() != NULL)¤	{¤		brShadow.DeleteObject();¤	}¤	if (ddc.GetSafeHdc() != NULL)¤	{¤		ddc.DeleteDC();¤	}¤	if (dc.GetSafeHdc() != NULL)¤	{¤		dc.DeleteDC();¤	}¤}¤¤long COptionTreeItemImage::OnPopUpClose(UINT lParam, long wParam)¤{¤  if((int) wParam != GetSelection())¤  {¤	  // Get selected¤	  SetSelection((int) wParam);¤¤	  // Hide window¤	  if (IsWindow(GetSafeHwnd()))¤	  {¤		  // -- Show window¤		  ShowWindow(SW_HIDE);¤	  }¤¤	  // Kill focus so we can draw attribute¤	  m_bFocus = FALSE;¤¤	  // Update items¤	  if (m_otOption != NULL)¤	  {¤		  m_otOption->UpdatedItems();¤	  }¤    CommitChanges();¤  }¤  return TRUE;¤}¤¤HICON COptionTreeItemImage::CreateGreyScaleIcon(HICON hIcon)¤{¤	// Declare variables¤    HICON hGrayIcon = NULL;¤    HDC hMainDC = NULL, hMemDC1 = NULL, hMemDC2 = NULL;¤    BITMAP bmp;¤    HBITMAP hOldBmp1 = NULL, hOldBmp2 = NULL;¤    ICONINFO csII, csGrayII;¤    BOOL bRetValue = FALSE;¤¤    bRetValue = ::GetIconInfo(hIcon, &csII);¤    if (bRetValue == FALSE) return NULL;¤¤	hMainDC = ::GetDC(::GetDesktopWindow());  ¤	if (hMainDC == NULL) ¤		return NULL;  ¤	hMemDC1 = ::CreateCompatibleDC(hMainDC);  ¤	hMemDC2 = ::CreateCompatibleDC(hMainDC);  ¤	if (hMemDC1 == NULL || hMemDC2 == NULL) ¤		return NULL; ¤  ¤    if (::GetObject(csII.hbmColor, sizeof(BITMAP), &bmp))¤    {¤        csGrayII.hbmColor = ::CreateBitmap(csII.xHotspot*2, csII.yHotspot*2, ¤                                           bmp.bmPlanes, bmp.bmBitsPixel, NULL);¤        if (csGrayII.hbmColor)¤        {¤            hOldBmp1 = (HBITMAP)::SelectObject(hMemDC1, csII.hbmColor);¤            hOldBmp2 = (HBITMAP)::SelectObject(hMemDC2, csGrayII.hbmColor);¤¤            ::BitBlt(hMemDC2, 0, 0, csII.xHotspot*2, csII.yHotspot*2, hMemDC1, ¤                     0, 0, SRCCOPY);¤¤            DWORD    dwLoopY = 0, dwLoopX = 0;¤            COLORREF crPixel = 0;¤            BYTE     byNewPixel = 0;¤¤            for (dwLoopY = 0; dwLoopY < csII.yHotspot*2; dwLoopY++)¤            {¤                for (dwLoopX = 0; dwLoopX < csII.xHotspot*2; dwLoopX++)¤                {¤                    crPixel = ::GetPixel(hMemDC2, dwLoopX, dwLoopY);¤¤                    byNewPixel = (BYTE)((GetRValue(crPixel) * 0.299) + ¤                                        (GetGValue(crPixel) * 0.587) + ¤                                        (GetBValue(crPixel) * 0.114));¤                    if (crPixel) ::SetPixel(hMemDC2, dwLoopX, dwLoopY, ¤                                            RGB(byNewPixel, byNewPixel, byNewPixel));¤                } // for¤            } // for¤¤            ::SelectObject(hMemDC1, hOldBmp1);¤            ::SelectObject(hMemDC2, hOldBmp2);¤¤            csGrayII.hbmMask = csII.hbmMask;¤¤            csGrayII.fIcon = TRUE;¤            hGrayIcon = ::CreateIconIndirect(&csGrayII);¤        } // if¤¤        ::DeleteObject(csGrayII.hbmColor);¤        //::DeleteObject(csGrayII.hbmMask);¤    } // if¤¤    ::DeleteObject(csII.hbmColor);¤    ::DeleteObject(csII.hbmMask);¤    ::DeleteDC(hMemDC1);¤    ::DeleteDC(hMemDC2);¤    //::ReleaseDC(m_hWnd, hMainDC);¤¤    return hGrayIcon;¤}¤¤//#UC END# *470B043B030D*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B043B030D_DESTR_BODY*"
		    value      	(value Text 
|//#UC START# *470B043B030D_DESTR_BODY*¤	// Reallocate¤	if (m_imgImages.GetSafeHandle() != NULL)¤	{¤		m_imgImages.DeleteImageList();¤	}¤	m_strText.RemoveAll();¤	//#UC END# *470B043B030D_DESTR_BODY*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B043B030D_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B043B030D_CUSTOM_INCLUDES*¤#include "shared/WinGUI/OptionTreeControls/OptionTreeDef.h"¤#include "shared/WinGUI/OptionTreeControls/OptionTreeRes.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTreeImagePopUp.h"¤//#UC END# *470B043B030D_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B043B030D*"
		    value      	(value Text 
|//#UC START# *470B043B030D*¤// Construction¤public:¤	COptionTreeItemImage();¤	virtual void OnMove();¤	virtual void OnRefresh();¤	virtual void OnCommit();¤	virtual void OnActivate();¤	virtual void CleanDestroyWindow();¤	virtual void OnDeSelect();¤	virtual void OnSelect();¤	virtual void DrawAttribute(CDC *pDC, const RECT &rcRect);¤	virtual void OnShow(BOOL bShow){;}¤¤// Attributes¤public:¤¤// Operations¤public:¤¤// Overrides¤	// ClassWizard generated virtual function overrides¤	//{{AFX_VIRTUAL(COptionTreeItemImage)¤	//}}AFX_VIRTUAL¤¤// Implementation¤public:¤	void SetSelection(int nSelection);¤	int GetSelection();¤	void AddIcon(CString strIcon, CString strText);¤	void AddBitmap(CString strBitmap, COLORREF crMask, CString strText);¤	void AddBitmap(UINT uBitmap, COLORREF crMask, CString strText);¤	void AddBitmap(CBitmap &bBitmap, COLORREF crMask, CString strText);¤	void AddIcon(UINT uIcon, CString strText);¤	void AddIcon(HICON hIcon, CString strText);¤	void SetNumberColumns(int nNum);¤	CSize GetImageSize();¤	void SetImageSize(CSize sSize);¤	BOOL CreateImageItem(DWORD dwOptions, CSize sImageSizes, int nNumberColumns);¤¤	// Generated message map functions¤protected:¤	HICON CreateGreyScaleIcon(HICON hIcon);¤	void DitherBlt(CDC *drawdc, int nXDest, int nYDest, int nWidth, int nHeight, CBitmap &bmp, int nXSrc, int nYSrc);¤	BOOL GetBitmapFromImageList(CDC *pDC, HICON hIcon, CBitmap &bmp);¤	void DrawControl(CDC *pDC, const RECT &rcRect);¤	BOOL m_bFocus;¤	int m_nNumColumns;¤	CSize m_sImageSizes;¤	int m_nSelected;¤	CImageList m_imgImages;¤	CStringArray m_strText;¤	//{{AFX_MSG(COptionTreeItemImage)¤	afx_msg void OnLButtonUp(UINT nFlags, CPoint point);¤	afx_msg void OnKillFocus(CWnd* pNewWnd);¤	afx_msg void OnSetFocus(CWnd* pOldWnd);¤	afx_msg void OnPaint();¤	afx_msg BOOL OnEraseBkgnd(CDC* pDC);¤	//}}AFX_MSG¤	afx_msg LONG OnPopUpClose(UINT lParam, long wParam);¤//#UC END# *470B043B030D*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"WikiPageID (wiki)"
		    value      	(value Text 
|Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemImage|470B043B030D
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B043B030D_MESSAGE_MAP*"
		    value      	(value Text 
|//#UC START# *470B043B030D_MESSAGE_MAP*¤	ON_WM_LBUTTONUP()¤	ON_WM_KILLFOCUS()¤	ON_WM_SETFOCUS()¤	ON_WM_PAINT()¤	ON_WM_ERASEBKGND()¤	ON_MESSAGE(OT_IMAGE_CLOSE, OnPopUpClose)¤	//#UC END# *470B043B030D_MESSAGE_MAP*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (wiki)"
		    value      	"wiki")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (h)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (cpp)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ElementCreationOrder"
		    value      	"16659828279"))
	    quid       	"470B043B030D"
	    documentation 	"контрол выбора изображения для отображения в дереве"
	    stereotype 	"GuiControl"
	    superclasses 	(list inheritance_relationship_list
		(object Inheritance_Relationship
		    quid       	"470B0458004E"
		    supplier   	"Logical View::shared::WinGUI::OptionTreeControls::COptionTreeItem"
		    quidu      	"470AFC61008C"))
	    language   	"MDA Generator")
	(object Class "COptionTreeItemIPAddress"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"AbstarctOperation"
		    value      	"regular")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsNative"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (cpp)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeItemIPAddress.cpp")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (h)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeItemIPAddress.h")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B04DB003E_DESTR_BODY*"
		    value      	(value Text 
|//#UC START# *470B04DB003E_DESTR_BODY*¤	//#UC END# *470B04DB003E_DESTR_BODY*
		    ))
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need assign op"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need copy ctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need ref count"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need unsorted less"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"debug log"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"local supervisor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need UC"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need dctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need objcounter"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"no base class"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"non virtual base"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"singleton"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B04DB003E_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B04DB003E_CUSTOM_INCLUDES*¤#include "shared/Core/fix/win_afx.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTree.h"¤//#UC END# *470B04DB003E_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B04DB003E*"
		    value      	(value Text 
|//#UC START# *470B04DB003E*¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeItemIPAddress¤¤COptionTreeItemIPAddress::COptionTreeItemIPAddress()¤{¤	// Initialize variables¤	m_bFocus = FALSE;¤¤	// Set item type¤	SetItemType(OT_ITEM_IPADDRESS);¤}¤¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeItemIPAddress message handlers¤¤void COptionTreeItemIPAddress::OnActivate()¤{¤	// Declare variables¤	int nSpace, nWidth, nLeft;¤¤	// Make sure window is valid¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤    ShowWindow(SW_SHOW);¤    m_bActivated = TRUE;¤¤		// -- Set window position¤		SetWindowPos(NULL, m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height(), SWP_NOZORDER | SWP_SHOWWINDOW);¤¤		// -- Calculate¤		nSpace = 5;¤		nWidth = ((m_rcAttribute.Width() - (nSpace * 5)) / 4);	¤		¤		// -- Move edits¤		// -- -- 1¤		nLeft = nSpace;¤		m_ctlEdit1.MoveWindow(nLeft, 0, nWidth, m_rcAttribute.Height());¤		// -- -- 2¤		nLeft += nWidth + nSpace;¤		m_ctlEdit2.MoveWindow(nLeft, 0, nWidth, m_rcAttribute.Height());¤		// -- -- 3¤		nLeft += nWidth + nSpace;¤		m_ctlEdit3.MoveWindow(nLeft, 0, nWidth, m_rcAttribute.Height());¤		// -- -- 4¤		nLeft += nWidth + nSpace;¤		m_ctlEdit4.MoveWindow(nLeft, 0, nWidth, m_rcAttribute.Height());	¤¤		// -- Set focus¤		SetFocus();¤	}¤}¤¤void COptionTreeItemIPAddress::DrawAttribute(CDC *pDC, const RECT &rcRect)¤{¤	// Declare variables¤	int nSpace, nWidth, nLeft;¤¤	// If we don't have focus, text is drawn.¤	if (m_bFocus == TRUE)¤	{¤		return;¤	}¤¤	// Make sure options aren't NULL¤	if (m_otOption == NULL)¤	{¤		return;¤	}¤¤	// Make sure there is a window¤	if (!IsWindow(GetSafeHwnd()))¤	{¤		return;¤	}¤¤	// Set window position¤	if (IsWindow(GetSafeHwnd()))¤	{¤		SetWindowPos(NULL, m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height(), SWP_NOZORDER | SWP_NOACTIVATE | SWP_HIDEWINDOW);¤¤		// -- Calculate¤		nSpace = 5;¤		nWidth = ((m_rcAttribute.Width() - (nSpace * 5)) / 4);	¤		¤		// -- Move edits¤		// -- -- 1¤		nLeft = nSpace;¤		m_ctlEdit1.MoveWindow(nLeft, 0, nWidth, m_rcAttribute.Height());¤		// -- -- 2¤		nLeft += nWidth + nSpace;¤		m_ctlEdit2.MoveWindow(nLeft, 0, nWidth, m_rcAttribute.Height());¤		// -- -- 3¤		nLeft += nWidth + nSpace;¤		m_ctlEdit3.MoveWindow(nLeft, 0, nWidth, m_rcAttribute.Height());¤		// -- -- 4¤		nLeft += nWidth + nSpace;¤		m_ctlEdit4.MoveWindow(nLeft, 0, nWidth, m_rcAttribute.Height());	¤	}¤¤	// Declare variables¤	HGDIOBJ hOld;¤	COLORREF crOld;¤	int nOldBack;¤	CRect rcText;¤	CString strText;¤	BYTE nField0, nField1, nField2, nField3;¤	COLORREF crOldBack;¤¤	// Make text¤	GetAddress(nField0, nField1, nField2, nField3);¤	strText.Format(_T("%d.%d.%d.%d"), nField0, nField1, nField2, nField3);¤¤	// Select font¤	hOld = pDC->SelectObject(m_otOption->GetNormalFont());¤	¤	// Set text color¤	if (IsReadOnly() == TRUE || m_otOption->IsWindowEnabled() == FALSE)¤	{¤		crOld = pDC->SetTextColor(GetSysColor(COLOR_GRAYTEXT));¤	}¤	else¤	{¤		crOld = pDC->SetTextColor(GetSysColor(COLOR_WINDOWTEXT));¤	}¤¤	// Set background mode¤	nOldBack = pDC->SetBkMode(TRANSPARENT);¤¤	// Set background color¤	crOldBack = pDC->SetBkColor(GetBackgroundColor());	¤¤	// Get rectangle¤	rcText = rcRect;¤¤	// Draw text¤	pDC->DrawText(strText, rcText, DT_SINGLELINE | DT_VCENTER);¤¤	// Restore GDI ojects¤	pDC->SelectObject(hOld);¤	pDC->SetTextColor(crOld);¤	pDC->SetBkMode(nOldBack);¤	pDC->SetBkColor(crOldBack);¤}¤¤void COptionTreeItemIPAddress::OnCommit()¤{¤	// Hide edit control¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		ShowWindow(SW_HIDE);¤    m_bActivated = FALSE;¤	}¤¤}¤¤void COptionTreeItemIPAddress::OnRefresh()¤{¤	// Declare variables¤	int nSpace, nWidth, nLeft;¤¤	// Set the window text¤	if (IsWindow(GetSafeHwnd()))¤	{¤		SetWindowPos(NULL, m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height(), SWP_NOZORDER | SWP_NOACTIVATE);¤¤		// -- Calculate¤		nSpace = 5;¤		nWidth = ((m_rcAttribute.Width() - (nSpace * 5)) / 4);	¤		¤		// -- Move edits¤		// -- -- 1¤		nLeft = nSpace;¤		m_ctlEdit1.MoveWindow(nLeft, 0, nWidth, m_rcAttribute.Height());¤		// -- -- 2¤		nLeft += nWidth + nSpace;¤		m_ctlEdit2.MoveWindow(nLeft, 0, nWidth, m_rcAttribute.Height());¤		// -- -- 3¤		nLeft += nWidth + nSpace;¤		m_ctlEdit3.MoveWindow(nLeft, 0, nWidth, m_rcAttribute.Height());¤		// -- -- 4¤		nLeft += nWidth + nSpace;¤		m_ctlEdit4.MoveWindow(nLeft, 0, nWidth, m_rcAttribute.Height());		¤	}¤}¤¤void COptionTreeItemIPAddress::OnMove()¤{¤	// Declare variables¤	int nSpace, nWidth, nLeft;¤¤	// Set window position¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Move window¤		SetWindowPos(NULL, m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height(), SWP_NOZORDER | SWP_NOACTIVATE);¤¤		// -- Calculate¤		nSpace = 5;¤		nWidth = ((m_rcAttribute.Width() - (nSpace * 5)) / 4);¤¤		// -- Move edits¤		// -- -- 1¤		nLeft = nSpace;¤		m_ctlEdit1.MoveWindow(nLeft, 0, nWidth, m_rcAttribute.Height());¤		// -- -- 2¤		nLeft += nWidth + nSpace;¤		m_ctlEdit2.MoveWindow(nLeft, 0, nWidth, m_rcAttribute.Height());¤		// -- -- 3¤		nLeft += nWidth + nSpace;¤		m_ctlEdit3.MoveWindow(nLeft, 0, nWidth, m_rcAttribute.Height());¤		// -- -- 4¤		nLeft += nWidth + nSpace;¤		m_ctlEdit4.MoveWindow(nLeft, 0, nWidth, m_rcAttribute.Height());¤¤¤	}¤¤	// Hide window¤	if (m_bFocus == FALSE && IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤    m_bActivated = FALSE;¤    this->OnShow(FALSE);¤	}¤}¤¤void COptionTreeItemIPAddress::CleanDestroyWindow()¤{¤	// Destroy window¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Destroy window¤		DestroyWindow();¤	}¤}¤¤void COptionTreeItemIPAddress::OnDeSelect()¤{¤	// Hide window¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤    m_bActivated = FALSE;¤    this->OnShow(FALSE);¤	}¤}¤¤void COptionTreeItemIPAddress::OnSelect()¤{¤	// Do nothing here¤}¤¤void COptionTreeItemIPAddress::OnSetFocus(CWnd* pOldWnd) ¤{¤	// Mark focus¤	m_bFocus = TRUE;¤	¤	CIPAddressCtrl::OnSetFocus(pOldWnd);	¤}¤¤void COptionTreeItemIPAddress::OnKillFocus(CWnd* pNewWnd) ¤{¤	// Validate¤	if (m_otOption == NULL)¤	{¤		CIPAddressCtrl::OnKillFocus(pNewWnd);¤		return;¤	}¤¤	// See if new window is an edit¤	if (m_ctlEdit1.GetSafeHwnd() == pNewWnd->GetSafeHwnd() || m_ctlEdit2.GetSafeHwnd() == pNewWnd->GetSafeHwnd() || m_ctlEdit3.GetSafeHwnd() == pNewWnd->GetSafeHwnd() || m_ctlEdit4.GetSafeHwnd() == pNewWnd->GetSafeHwnd())¤	{¤		CIPAddressCtrl::OnKillFocus(pNewWnd);¤		return;¤	}¤¤	// See if new window is tree of list¤	if (m_otOption->IsChild(pNewWnd) == TRUE)¤	{¤		// -- Mark focus¤		m_bFocus = FALSE;¤¤		// -- Commit changes¤		CommitChanges();¤	}¤	CIPAddressCtrl::OnKillFocus(pNewWnd);	¤}¤¤BOOL COptionTreeItemIPAddress::CreateIPAddressItem(DWORD dwAddStyle)¤{¤	// Declare variables¤	DWORD dwStyle = WS_CHILD | WS_VISIBLE;¤	BOOL bRet = FALSE;¤¤¤	// Make sure options is not NULL¤	if (m_otOption == NULL)¤	{¤		return FALSE;¤	}¤¤	// Add style¤	if (dwAddStyle != 0)¤	{¤		dwStyle |= dwAddStyle;¤	}¤¤	// Create edit control¤	if (!IsWindow(GetSafeHwnd()))¤	{¤		// -- Create the edit view¤		bRet = Create(dwStyle, m_rcAttribute, m_otOption->GetCtrlParent(), GetCtrlID());¤¤		// -- Setup IP address¤		if (bRet == TRUE)¤		{¤			// -- -- Set font¤			SetFont(m_otOption->GetNormalFont(), TRUE);¤¤			// -- -- Set window position¤			SetWindowPos(NULL, m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height(), SWP_NOZORDER | SWP_SHOWWINDOW);¤¤			// -- -- Hide window¤      m_bActivated = FALSE;¤      this->OnShow(FALSE);¤¤			// -- -- Get edit fields¤			m_ctlEdit4.SubclassWindow(GetNextWindow(GW_CHILD)->GetSafeHwnd());¤			m_ctlEdit3.SubclassWindow(m_ctlEdit4.GetNextWindow(GW_HWNDNEXT)->GetSafeHwnd());¤			m_ctlEdit2.SubclassWindow(m_ctlEdit3.GetNextWindow(GW_HWNDNEXT)->GetSafeHwnd());¤			m_ctlEdit1.SubclassWindow(m_ctlEdit2.GetNextWindow(GW_HWNDNEXT)->GetSafeHwnd());¤			m_ctlEdit4.SetNotifyWnd(GetSafeHwnd());¤			m_ctlEdit3.SetNotifyWnd(GetSafeHwnd());¤			m_ctlEdit2.SetNotifyWnd(GetSafeHwnd());¤			m_ctlEdit1.SetNotifyWnd(GetSafeHwnd());¤		}¤	}¤¤	return bRet;¤}¤¤BOOL COptionTreeItemIPAddress::OnEraseBkgnd(CDC* pDC) ¤{	¤	return FALSE;¤}¤¤void COptionTreeItemIPAddress::OnPaint() ¤{¤	// Declare variables¤	int nSpace, nWidth, nLeft;¤	HGDIOBJ hOldBrush;¤	CRect rcClient;¤	CPaintDC dc(this);¤	CDC* pDCMem = new CDC;¤	CFont *pOldFont;¤	CRect rcText;¤	CBitmap bpMem;¤	CBitmap *bmOld;¤	COLORREF rcOldColor;¤	int nOldBk;¤¤	// Get client rectangle¤	GetClientRect(rcClient);¤¤	// Create DC¤	pDCMem->CreateCompatibleDC(&dc);¤¤	// Create bitmap¤	bpMem.CreateCompatibleBitmap(&dc, rcClient.Width(), rcClient.Height());¤¤	// Select bitmap¤	bmOld = pDCMem->SelectObject(&bpMem);¤¤	// Select brush¤	hOldBrush = dc.SelectObject(GetSysColorBrush(COLOR_WINDOW));¤¤	// Fill background¤	pDCMem->PatBlt(rcClient.left, rcClient.top, rcClient.Width(), rcClient.Height(), PATCOPY);¤¤	// Select fonts¤	pOldFont = pDCMem->SelectObject(m_otOption->GetBoldFont());¤¤	// Set text color¤	rcOldColor = pDCMem->SetTextColor(GetTextColor());¤¤    // Setbackground¤    nOldBk = pDCMem->SetBkMode(TRANSPARENT);¤¤	// Calculate dots¤	nSpace = 5;¤	nWidth = ((m_rcAttribute.Width() - (nSpace * 5)) / 4);¤¤	// Draw dots¤	// -- 1¤	nLeft = nSpace + nWidth;¤	rcText.SetRect(nLeft, 0, 100, rcClient.Height());¤	pDCMem->DrawText(_T("."), rcText, DT_SINGLELINE | DT_CENTER | DT_CALCRECT);¤	pDCMem->DrawText(_T("."), rcText, DT_SINGLELINE | DT_CENTER);¤	// -- 2¤	nLeft += nSpace + nWidth;¤	rcText.SetRect(nLeft, 0, 100, rcClient.Height());¤	pDCMem->DrawText(_T("."), rcText, DT_SINGLELINE | DT_CENTER | DT_CALCRECT);¤	pDCMem->DrawText(_T("."), rcText, DT_SINGLELINE | DT_CENTER);¤	// -- 3¤	nLeft += nSpace + nWidth;¤	rcText.SetRect(nLeft, 0, 100, rcClient.Height());¤	pDCMem->DrawText(_T("."), rcText, DT_SINGLELINE | DT_CENTER | DT_CALCRECT);¤	pDCMem->DrawText(_T("."), rcText, DT_SINGLELINE | DT_CENTER);¤¤	// Copy to screen¤	dc.BitBlt(0, 0, rcClient.Width(), rcClient.Height(), pDCMem, 0, 0, SRCCOPY);¤¤	// Restore GDI¤	pDCMem->SetTextColor(nOldBk);¤	pDCMem->SelectObject(hOldBrush);¤	pDCMem->SelectObject(pOldFont);¤	pDCMem->SelectObject(bmOld);¤	pDCMem->SetTextColor(rcOldColor);¤¤	// Delete objects¤	if (pDCMem->GetSafeHdc() != NULL)¤	{¤		pDCMem->DeleteDC();¤	}¤	delete pDCMem;¤	if (bpMem.GetSafeHandle() != NULL)¤	{¤		bpMem.DeleteObject();¤	}¤}¤afx_msg long COptionTreeItemIPAddress::OnEditChanged(WPARAM wParam, LPARAM lParam)¤{¤  this->SetChanged(1);¤  return 0;¤}¤¤long COptionTreeItemIPAddress::OnEditNextEdit(WPARAM wParam,LPARAM lParam)¤{¤	// Declare variables¤	CEdit *pEdit = (CEdit*) wParam;¤¤	// Validate¤	if (m_otOption == NULL || pEdit == NULL)¤	{¤		return FALSE;¤	}¤¤	// See what edit it is¤	// -- 1¤	if (pEdit->GetSafeHwnd() == m_ctlEdit1.GetSafeHwnd())¤	{¤		m_ctlEdit2.SetFocus();¤	}¤	// -- 2¤	else if (pEdit->GetSafeHwnd() == m_ctlEdit2.GetSafeHwnd())¤	{¤		m_ctlEdit3.SetFocus();¤	}¤	// -- 3¤	else if (pEdit->GetSafeHwnd() == m_ctlEdit3.GetSafeHwnd())¤	{¤		m_ctlEdit4.SetFocus();¤	}¤¤	return TRUE;¤}¤¤long COptionTreeItemIPAddress::OnEditLooseFocus(WPARAM wParam,LPARAM lParam)¤{¤	// Declare variables¤	CWnd *pNewWnd = NULL;¤  // this param value assigns tree as new focus window¤  if(wParam == 1)¤    pNewWnd=&m_otOption->GetList();¤¤	// Validate¤	if (m_otOption == NULL)¤	{¤		return FALSE;¤	}¤¤	// See if new window is an edit¤	if (pNewWnd != NULL &&¤      (m_ctlEdit1.GetSafeHwnd() == pNewWnd->GetSafeHwnd() || ¤      m_ctlEdit2.GetSafeHwnd() == pNewWnd->GetSafeHwnd() || ¤      m_ctlEdit3.GetSafeHwnd() == pNewWnd->GetSafeHwnd() || ¤      m_ctlEdit4.GetSafeHwnd() == pNewWnd->GetSafeHwnd())  ¤    )¤	{¤		return FALSE;¤	}¤¤	// See if new window is tree of list¤	if (pNewWnd == NULL || m_otOption->IsChild(pNewWnd) == TRUE)¤	{¤		// -- Mark focus¤		m_bFocus = FALSE;¤¤		// -- Commit changes¤		CommitChanges(_changed > 0 ? true : false);¤	}¤¤	return TRUE;¤}¤¤void COptionTreeItemIPAddress::OnDestroy() ¤{¤	// Un subsclass¤	m_ctlEdit4.UnsubclassWindow();¤	m_ctlEdit3.UnsubclassWindow();¤	m_ctlEdit2.UnsubclassWindow();¤	m_ctlEdit1.UnsubclassWindow();	¤	¤	CIPAddressCtrl::OnDestroy();	¤}¤void COptionTreeItemIPAddress::OnShow(BOOL bShow)¤{¤  if(::IsWindow(this->GetSafeHwnd()) == TRUE)¤  {¤    if(bShow == TRUE && m_bActivated == TRUE)¤    {¤      ¤      if(::IsWindow(m_ctlEdit4.GetSafeHwnd()) == TRUE)¤        m_ctlEdit4.ShowWindow(SW_SHOW);¤      if(::IsWindow(m_ctlEdit3.GetSafeHwnd()) == TRUE)¤        m_ctlEdit3.ShowWindow(SW_SHOW);¤      if(::IsWindow(m_ctlEdit2.GetSafeHwnd()) == TRUE)¤        m_ctlEdit2.ShowWindow(SW_SHOW);¤      if(::IsWindow(m_ctlEdit1.GetSafeHwnd()) == TRUE)¤        m_ctlEdit1.ShowWindow(SW_SHOW);¤      ¤      this->ShowWindow(SW_SHOW);¤    }¤    else¤    {¤      int iShow = (bShow == TRUE ? SW_SHOW: SW_HIDE);¤      if(::IsWindow(m_ctlEdit4.GetSafeHwnd()) == TRUE)¤        m_ctlEdit4.ShowWindow(iShow);¤      if(::IsWindow(m_ctlEdit3.GetSafeHwnd()) == TRUE)¤        m_ctlEdit3.ShowWindow(iShow);¤      if(::IsWindow(m_ctlEdit2.GetSafeHwnd()) == TRUE)¤        m_ctlEdit2.ShowWindow(iShow);¤      if(::IsWindow(m_ctlEdit1.GetSafeHwnd()) == TRUE)¤        m_ctlEdit1.ShowWindow(iShow);¤     ¤      this->ShowWindow(SW_HIDE);¤    }¤  }¤}¤CString COptionTreeItemIPAddress::GetAttributeText(void)¤{¤  CString sText("");¤  if(::IsWindow(this->GetSafeHwnd()) == TRUE)    ¤    this->GetWindowText(sText);¤  return sText;¤}¤¤//#UC END# *470B04DB003E*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B04DB003E_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B04DB003E_CUSTOM_INCLUDES*¤#include "shared/Core/fix/win_afx.h"¤#include "shared/WinGUI/OptionTreeControls/OptionTreeDef.h"¤#include "shared/WinGUI/OptionTreeControls/OptionTreeRes.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTreeIPAddressEdit.h"¤//#UC END# *470B04DB003E_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B04DB003E*"
		    value      	(value Text 
|//#UC START# *470B04DB003E*¤// Construction¤public:¤	COptionTreeItemIPAddress();¤	virtual void OnMove();¤	virtual void OnRefresh();¤	virtual void OnCommit();¤	virtual void OnActivate();¤	virtual void CleanDestroyWindow();¤	virtual void OnDeSelect();¤	virtual void OnSelect();¤	virtual void DrawAttribute(CDC *pDC, const RECT &rcRect);¤	virtual void OnShow(BOOL bShow);¤	virtual CString GetAttributeText(void);¤¤// Attributes¤public:¤¤// Operations¤public:¤¤// Overrides¤	// ClassWizard generated virtual function overrides¤	//{{AFX_VIRTUAL(COptionTreeItemIPAddress)¤	//}}AFX_VIRTUAL¤¤// Implementation¤public:¤	BOOL CreateIPAddressItem(DWORD dwAddStyle);¤¤	// Generated message map functions¤protected:¤	afx_msg long OnEditLooseFocus(WPARAM wParam, LPARAM lParam);¤	afx_msg long OnEditNextEdit(WPARAM wParam, LPARAM lParam);	¤	afx_msg long OnEditChanged(WPARAM wParam, LPARAM lParam);	¤	BOOL m_bFocus;¤	COptionTreeIPAddressEdit m_ctlEdit4;¤	COptionTreeIPAddressEdit m_ctlEdit3;¤	COptionTreeIPAddressEdit m_ctlEdit2;¤	COptionTreeIPAddressEdit m_ctlEdit1;¤	//{{AFX_MSG(COptionTreeItemIPAddress)¤	afx_msg void OnKillFocus(CWnd* pNewWnd);¤	afx_msg void OnSetFocus(CWnd* pOldWnd);¤	afx_msg BOOL OnEraseBkgnd(CDC* pDC);¤	afx_msg void OnPaint();¤	afx_msg void OnDestroy();¤	//}}AFX_MSG¤¤//#UC END# *470B04DB003E*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"WikiPageID (wiki)"
		    value      	(value Text 
|Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemIPAddress|470B04DB003E
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B04DB003E_MESSAGE_MAP*"
		    value      	(value Text 
|//#UC START# *470B04DB003E_MESSAGE_MAP*¤	ON_WM_KILLFOCUS()¤	ON_WM_SETFOCUS()¤	ON_WM_ERASEBKGND()¤	ON_WM_PAINT()¤	ON_MESSAGE(OT_IPADDRESS_KILLFOCUS, OnEditLooseFocus)¤	ON_MESSAGE(OT_IPADDRESS_NEXTEDIT, OnEditNextEdit)¤	ON_MESSAGE(OT_TEXTCHANGED, OnEditChanged)¤	ON_WM_DESTROY()¤	//#UC END# *470B04DB003E_MESSAGE_MAP*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (wiki)"
		    value      	"wiki")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (h)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (cpp)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ElementCreationOrder"
		    value      	"16659828776"))
	    quid       	"470B04DB003E"
	    documentation 	"контрол отображения/ввода IP-адреса"
	    stereotype 	"GuiControl"
	    superclasses 	(list inheritance_relationship_list
		(object Inheritance_Relationship
		    quid       	"470B04F60242"
		    supplier   	"Logical View::external::MFCTypes::Controls::CIPAddressCtrl"
		    quidu      	"465527E3003E")
		(object Inheritance_Relationship
		    quid       	"470B04FF031C"
		    supplier   	"Logical View::shared::WinGUI::OptionTreeControls::COptionTreeItem"
		    quidu      	"470AFC61008C"))
	    language   	"MDA Generator")
	(object Class "COptionTreeItemListBox"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"AbstarctOperation"
		    value      	"regular")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsNative"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need assign op"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need copy ctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need ref count"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need unsorted less"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"debug log"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"local supervisor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need UC"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need dctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need objcounter"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"no base class"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"non virtual base"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"singleton"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (cpp)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeItemListBox.cpp")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (h)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeItemListBox.h")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B055702EE_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B055702EE_CUSTOM_INCLUDES*¤#include "shared/Core/fix/win_afx.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTree.h"¤//#UC END# *470B055702EE_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B055702EE*"
		    value      	(value Text 
|//#UC START# *470B055702EE*¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeItemListBox¤¤COptionTreeItemListBox::COptionTreeItemListBox()¤{¤	// Initialize variables¤	m_bFocus = FALSE;¤¤  _bRootExpanded = false;¤¤	// Set item type¤	SetItemType(OT_ITEM_LISTBOX);¤}¤¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeItemListBox message handlers¤¤¤void COptionTreeItemListBox::DrawAttribute(CDC *pDC, const RECT &rcRect)¤{¤	// If we don't have focus, text is drawn.¤	if (m_bFocus == TRUE)¤	{¤		return;¤	}¤¤	// Make sure options aren't NULL¤	if (m_otOption == NULL)¤	{¤		return;¤	}¤¤	// Make sure there is a window¤	if (!IsWindow(GetSafeHwnd()))¤	{¤		return;¤	}¤¤	// Set window position¤	if (IsWindow(GetSafeHwnd()))¤	{¤		MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height());¤	}¤  return;¤	// Declare variables¤	HGDIOBJ hOld;¤	COLORREF crOld;¤	int nOldBack;¤	CRect rcText;¤	CString strWindowText;¤	COLORREF crOldBack;¤¤	// Get window text¤	GetWindowText(strWindowText);¤¤	// Select font¤	hOld = pDC->SelectObject(m_otOption->GetNormalFont());¤	¤	// Set text color¤	if (IsReadOnly() == TRUE || m_otOption->IsWindowEnabled() == FALSE)¤	{¤		crOld = pDC->SetTextColor(GetSysColor(COLOR_GRAYTEXT));¤	}¤	else¤	{¤		crOld = pDC->SetTextColor(GetTextColor());¤	}¤¤	// Set background mode¤	nOldBack = pDC->SetBkMode(TRANSPARENT);¤¤	// Set background color¤	crOldBack = pDC->SetBkColor(GetBackgroundColor());	¤¤	// Get rectangle¤	rcText = rcRect;¤¤	// Draw text¤	pDC->DrawText(strWindowText, rcText, DT_SINGLELINE | DT_VCENTER);¤¤	// Restore GDI ojects¤	pDC->SelectObject(hOld);¤	pDC->SetTextColor(crOld);¤	pDC->SetBkMode(nOldBack);¤	pDC->SetBkColor(crOldBack);¤¤}¤¤void COptionTreeItemListBox::OnCommit()¤{¤	// Hide edit control¤	if (IsWindow(GetSafeHwnd()))¤	{¤	}¤}¤¤void COptionTreeItemListBox::OnRefresh()¤{¤	// Set the window text¤	if (IsWindow(GetSafeHwnd()))¤	{¤		MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height());¤	}¤}¤¤void COptionTreeItemListBox::OnMove()¤{¤	// Set window position¤	if (IsWindow(GetSafeHwnd()) == TRUE)¤	{¤		MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height());¤¤	  // Hide window¤	  //if (m_bFocus == FALSE && (m_otiParent == NULL || m_otiParent->IsExpanded() == FALSE) )¤    if (m_bFocus == FALSE && ¤        ( m_otiParent == NULL || ¤          m_bExpanded == FALSE ||¤          _bRootExpanded == FALSE ||  ¤          m_otiParent->IsExpanded() == FALSE) ¤       )¤		  ShowWindow(SW_HIDE);¤		// -- Show window¤    else¤		  ShowWindow(SW_SHOW);¤  }¤}¤void COptionTreeItemListBox::OnExpand(BOOL bExpand)¤{¤	// Show window¤	if (bExpand == TRUE && ¤      m_bExpanded == TRUE && ¤      m_otiParent->IsExpanded() == TRUE)¤	{¤		ShowWindow(SW_SHOW);¤	}¤	else¤	{¤		ShowWindow(SW_HIDE);¤	}¤  _bRootExpanded = (bExpand == TRUE ? true : false);¤}¤void COptionTreeItemListBox::OnActivate()¤{¤	// Make sure window is valid¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		ShowWindow(SW_SHOW);¤¤		// -- Set window position¤		MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height());¤¤		// -- Set focus¤		SetFocus();¤	}¤}¤¤void COptionTreeItemListBox::OnSetFocus(CWnd* pOldWnd) ¤{¤	// Mark focus¤	m_bFocus = TRUE;¤¤	CListBox::OnSetFocus(pOldWnd);	¤}¤¤void COptionTreeItemListBox::OnKillFocus(CWnd* pNewWnd) ¤{¤	// Validate¤	if (m_otOption == NULL)¤	{¤		CListBox::OnKillFocus(pNewWnd);¤		return;¤	}¤¤	// See if new window is tree of list¤	if (m_otOption->IsChild(pNewWnd) == TRUE)¤	{¤		// -- Mark focus¤		m_bFocus = FALSE;¤¤		// -- Commit changes¤		CommitChanges();¤	}¤¤	CListBox::OnKillFocus(pNewWnd);	¤}¤¤BOOL COptionTreeItemListBox::CreateListItem(DWORD dwAddStyle,const int Height)¤{¤	// Declare variables¤	//DWORD dwStyle = WS_CHILD | WS_VISIBLE | LBS_STANDARD | WS_VSCROLL|WS_HSCROLL;¤  // no sort but multiselect¤  DWORD dwStyle = WS_CHILD | WS_VISIBLE | LBS_NOTIFY | LBS_EXTENDEDSEL | WS_VSCROLL | WS_HSCROLL;¤¤     ¤	BOOL bRet = FALSE;¤¤	// Make sure options is not NULL¤	if (m_otOption == NULL)¤	{¤		return FALSE;¤	}¤¤	// Create edit control¤	if (!IsWindow(GetSafeHwnd()))¤	{¤		// -- Add style¤		if (dwAddStyle != 0)¤		{¤			dwStyle |= dwAddStyle;¤		}¤		¤		// -- Create the list box¤		bRet = Create(dwStyle, m_rcAttribute, m_otOption->GetCtrlParent(), GetCtrlID());¤¤		// -- Setup list¤		if (bRet == TRUE)¤		{¤			// -- -- Set font¤			SetFont(m_otOption->GetNormalFont(), TRUE);¤¤      COptionTreeItem::SetItemHeight(Height > OT_DEFHEIGHT ? Height : OT_LISTBOX_HEIGHT);¤¤			// -- -- Set window position¤			MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height());		¤¤      ShowWindow(SW_SHOW);¤		}¤	}¤¤¤	return bRet;¤}¤¤¤void COptionTreeItemListBox::CleanDestroyWindow()¤{¤	// Destroy window¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Destroy window¤		DestroyWindow();¤	}¤}¤void COptionTreeItemListBox::OnDeSelect()¤{¤	// Hide window¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		//ShowWindow(SW_HIDE);¤	}¤}¤¤void COptionTreeItemListBox::OnSelect()¤{¤	// Do nothing here¤}¤¤void COptionTreeItemListBox::OnShow(BOOL bShow)¤{¤  if(bShow == TRUE)¤    this->ShowWindow(SW_SHOW);¤  else¤    this->ShowWindow(SW_HIDE);¤}¤void COptionTreeItemListBox::OnLbnSelchange()¤{¤  CommitChanges();¤}¤¤//#UC END# *470B055702EE*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B055702EE_DESTR_BODY*"
		    value      	(value Text 
|//#UC START# *470B055702EE_DESTR_BODY*¤	//#UC END# *470B055702EE_DESTR_BODY*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B055702EE_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B055702EE_CUSTOM_INCLUDES*¤#include "shared/WinGUI/OptionTreeControls/OptionTreeDef.h"¤#include "shared/WinGUI/OptionTreeControls/OptionTreeRes.h"¤//#UC END# *470B055702EE_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B055702EE*"
		    value      	(value Text 
|//#UC START# *470B055702EE*¤// Construction¤public:¤	COptionTreeItemListBox();¤	virtual void OnMove();¤	virtual void OnRefresh();¤	virtual void OnCommit();¤	virtual void OnActivate();¤	virtual void CleanDestroyWindow();¤	virtual void OnDeSelect();¤	virtual void OnSelect();¤	virtual void DrawAttribute(CDC *pDC, const RECT &rcRect);¤	virtual void OnExpand(BOOL bExpand);¤	virtual void OnShow(BOOL bShow);¤// Attributes¤public:¤¤// Operations¤public:¤¤// Overrides¤	// ClassWizard generated virtual function overrides¤	//{{AFX_VIRTUAL(COptionTreeItemListBox)¤	//}}AFX_VIRTUAL¤¤// Implementation¤public:¤	BOOL CreateListItem(DWORD dwAddStyle = 0,const int Height=OT_LISTBOX_HEIGHT);¤¤	// Generated message map functions¤protected:¤	BOOL m_bFocus;¤	//{{AFX_MSG(COptionTreeItemListBox)¤	afx_msg void OnSetFocus(CWnd* pOldWnd);¤	afx_msg void OnKillFocus(CWnd* pNewWnd);¤	//}}AFX_MSG¤¤protected:¤	bool  _bRootExpanded;¤public:¤	afx_msg void OnLbnSelchange();¤//#UC END# *470B055702EE*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"WikiPageID (wiki)"
		    value      	(value Text 
|Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemListBox|470B055702EE
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B055702EE_MESSAGE_MAP*"
		    value      	(value Text 
|//#UC START# *470B055702EE_MESSAGE_MAP*¤	ON_WM_SETFOCUS()¤	ON_WM_KILLFOCUS()¤	ON_CONTROL_REFLECT(LBN_SELCHANGE, OnLbnSelchange)¤	//#UC END# *470B055702EE_MESSAGE_MAP*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (wiki)"
		    value      	"wiki")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (h)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (cpp)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ElementCreationOrder"
		    value      	"16659829262"))
	    quid       	"470B055702EE"
	    documentation 	"list-box"
	    stereotype 	"GuiControl"
	    superclasses 	(list inheritance_relationship_list
		(object Inheritance_Relationship
		    quid       	"470B057B001F"
		    supplier   	"Logical View::external::MFCTypes::Controls::CListBox"
		    quidu      	"46FA715B0271")
		(object Inheritance_Relationship
		    quid       	"470B05810109"
		    supplier   	"Logical View::shared::WinGUI::OptionTreeControls::COptionTreeItem"
		    quidu      	"470AFC61008C"))
	    language   	"MDA Generator")
	(object Class "COptionTreeList"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"AbstarctOperation"
		    value      	"regular")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsNative"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need assign op"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need copy ctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need ref count"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need unsorted less"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"debug log"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"local supervisor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need UC"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need dctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need objcounter"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"no base class"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"non virtual base"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"singleton"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (cpp)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeList.cpp")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (h)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeList.h")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B05D5032C_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B05D5032C_CUSTOM_INCLUDES*¤#include "shared/Core/fix/win_afx.h"¤// Added Headers¤#include "shared/WinGUI/OptionTreeControls/COptionTree.h"¤#include "shared/WinGUI/OptionTreeControls/OptionTreeRes.h"¤¤#include "shared/WinGUI/OptionTreeControls/CPreciseTimer.h"¤¤¤//#UC END# *470B05D5032C_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B05D5032C*"
		    value      	(value Text 
|//#UC START# *470B05D5032C*¤static HBITMAP __hbm=NULL;¤static HBRUSH  __hbr=NULL;¤// -- Draw splitter bar selected¤static void _DrawXorBar(HDC hdc, int x1, int y1, int nWidth, int nHeight)¤{¤	// Declare variables¤	static WORD _dotPatternBmp[8] = { 0x00aa, 0x0055, 0x00aa, 0x0055, 0x00aa, 0x0055, 0x00aa, 0x0055};¤¤	// Create a monochrome checkered pattern¤  if(__hbm == NULL)¤	  __hbm = CreateBitmap(8, 8, 1, 1, _dotPatternBmp);¤  if(__hbr == NULL)¤	  __hbr = CreatePatternBrush(__hbm);¤    ¤	SetBrushOrgEx(hdc, x1, y1, 0);¤	HBRUSH hbrushOld = (HBRUSH)SelectObject(hdc, __hbr);¤    ¤	// Draw the checkered rectangle to the screen¤	PatBlt(hdc, x1, y1, nWidth, nHeight, PATINVERT);¤    ¤	SelectObject(hdc, hbrushOld);¤    ¤	//DeleteObject(hbr);¤	//DeleteObject(hbm);¤}¤¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeList¤¤COptionTreeList::COptionTreeList()¤: _CurrentClientRect (0, 0, 0, 0)¤{¤	// Initialize variables¤	m_lPrevCol = 0;¤	m_bColDrag = FALSE;¤	m_hSplitter = NULL;¤	m_hHand = NULL;¤  _hDrag = NULL;¤	m_lColumn = -1;¤  _iDrag=0;¤  _pDragItem=NULL;¤}¤¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeList message handlers¤¤BOOL COptionTreeList::Create(DWORD dwStyle, RECT rcRect, CWnd* pParentWnd, UINT nID)¤{¤	¤	// Load cursors¤	// -- Splitter¤	if (m_hSplitter == NULL)¤	{¤		//m_hSplitter = ::LoadCursor(AfxGetInstanceHandle(), MAKEINTRESOURCE(IDC_SIZE));¤		m_hSplitter = ::LoadCursor(NULL, IDC_SIZEWE);¤	}¤  ¤	// -- Get Hand Cursor¤	GetHandCursor();¤  //_hDrag = m_hHand;¤¤	// -- Drag¤	if (_hDrag == NULL)¤	{¤		//_hDrag = ::LoadCursor(AfxGetInstanceHandle(), MAKEINTRESOURCE(IDC_HAND));¤		_hDrag = ::LoadCursor(NULL, IDC_HAND);¤	}¤ ¤	// Add style¤	dwStyle |= WS_CLIPSIBLINGS | WS_CLIPCHILDREN;¤¤	// Create the window¤	return CWnd::Create(AfxRegisterWndClass(CS_HREDRAW | CS_VREDRAW | CS_DBLCLKS, ::LoadCursor(NULL, IDC_ARROW)), _T(""), dwStyle, rcRect, pParentWnd, nID);¤}¤¤void COptionTreeList::OnSize(UINT nType, int cx, int cy) ¤{¤	CWnd::OnSize(nType, cx, cy);	¤  // Make sure we have an option tree¤	if (m_otOption != NULL)¤	{¤    m_otOption->LockAll();¤		// -- Update resize¤		UpdateResize();¤¤		// -- Inform all items that a resize has been made¤		m_otOption->UpdateMoveAllItems();¤¤    m_otOption->UnLockAll();¤    /*¤		// -- Redraw¤		Invalidate();¤¤		// -- Update window¤		UpdateWindow();¤    */¤	}¤}¤¤void COptionTreeList::UpdateResize()¤{¤	// Make sure not NULL¤	if (m_otOption == NULL || m_otOption->UpdateLocked() == TRUE)¤	{¤		return;¤	}¤¤  // Declare variables¤	SCROLLINFO si;¤	int nHeight;¤	long lHeight = 0;¤	CRect rcClient;¤	COptionTreeItem *otiRoot, *otiItem;¤¤	// Get client rectangle¤	GetClientRect(rcClient);¤// GARANT {¤	nHeight = rcClient.Height();¤// } GARANT¤¤	// Get root item¤	otiRoot = m_otOption->GetRootItem();¤	if (otiRoot == NULL)¤	{¤		return;¤	}¤¤	// Get total height¤	otiItem = otiRoot->GetChild();¤	while (otiItem != NULL)¤	{¤		// -- Get height¤// GARANT {¤		lHeight	+= otiItem->GetTotalHeight() + 1;¤// } GARANT¤¤		// -- Get next item¤		otiItem = otiItem->GetSibling();¤	}¤¤	// Setup scroll info¤	ZeroMemory(&si, sizeof(SCROLLINFO));¤	si.cbSize = sizeof(SCROLLINFO);¤	si.fMask = SIF_RANGE | SIF_PAGE;¤	si.nMin = 0;¤	si.nMax = (int) lHeight;¤	si.nPage = nHeight;¤¤	// Set scroll info¤	if ((int)si.nPage > si.nMax)¤	{¤		m_otOption->SetOriginOffset(0);¤	}¤	SetScrollInfo(SB_VERT, &si, TRUE);¤¤	// Set column¤	m_otOption->SetColumn(m_otOption->GetColumn());¤¤}¤¤void COptionTreeList::OnPaint() ¤{¤	// Make sure valid¤	if (m_otOption == NULL || m_otOption->UpdateLocked() == TRUE)¤	{¤		return;¤	}¤#ifdef _DEBUG¤  CPreciseTimer pt;¤#endif¤¤	// Declare variables¤	CPaintDC dc(this);¤	CDC* pDCMem = new CDC;¤	CBitmap bpMem;¤	CBitmap *bmOld;¤	COptionTreeItem* otiItem;¤	CRect rcClient;¤	HGDIOBJ hOldBrush;¤	long lTotal, lHeight;¤	HRGN hRgn;¤¤	// Get client rectangle¤	GetClientRect(rcClient);¤¤	// Clear visible list¤	m_otOption->ClearVisibleList();¤¤	// Clear all label rectangle¤	m_otOption->ClearAllLabelRect();¤¤	// Create DC¤	pDCMem->CreateCompatibleDC(&dc);¤¤	// Create bitmap¤	bpMem.CreateCompatibleBitmap(&dc, rcClient.Width(), rcClient.Height());¤¤	// Select bitmap¤	bmOld = pDCMem->SelectObject(&bpMem);¤¤	// Draw control background¤	hOldBrush = pDCMem->SelectObject(GetSysColorBrush(COLOR_BTNFACE));¤	pDCMem->PatBlt(rcClient.left, rcClient.top, rcClient.Width(), rcClient.Height(), PATCOPY);¤¤	// Draw control inside fill color¤	rcClient.DeflateRect(2, 2);¤	if (m_otOption->IsWindowEnabled() == TRUE)¤	{¤		pDCMem->SelectObject(GetSysColorBrush(COLOR_WINDOW));¤	}¤	else¤	{¤		pDCMem->SelectObject(GetSysColorBrush(COLOR_3DFACE));¤	}¤	pDCMem->PatBlt(rcClient.left, rcClient.top, rcClient.Width(), rcClient.Height(), PATCOPY);¤	rcClient.InflateRect(2, 2);¤¤	// Draw expand column	¤	if (m_otOption->GetShadeExpandColumn() == TRUE || m_otOption->IsWindowEnabled() == FALSE)¤	{¤		pDCMem->SelectObject(GetSysColorBrush(COLOR_BTNFACE));¤	}¤	else¤	{¤		pDCMem->SelectObject(GetSysColorBrush(COLOR_WINDOW));¤	}¤	pDCMem->PatBlt(0, 0, OT_EXPANDCOLUMN, rcClient.Height(), PATCOPY);¤¤	// Create clip region¤	hRgn = CreateRectRgn(rcClient.left, rcClient.top, rcClient.right, rcClient.bottom);¤	SelectClipRgn(pDCMem->m_hDC, hRgn);¤¤  CRect recLargest=m_otOption->GetLargestVisibleLabel(false);¤  m_otOption->ResetLargestVisibleLabel();¤	// Draw all items¤	lTotal = 0;¤	for (otiItem = m_otOption->GetRootItem()->GetChild(); otiItem != NULL; otiItem = otiItem->GetSibling())¤	{¤		lHeight = otiItem->DrawItem(pDCMem, rcClient, 0, lTotal);¤		lTotal += lHeight;¤	}¤	// Remove clip region¤	SelectClipRgn(pDCMem->GetSafeHdc(), NULL);¤	DeleteObject(hRgn);¤¤	// Draw vertical sep¤	_DrawDarkVLine(pDCMem->GetSafeHdc(), OT_EXPANDCOLUMN, 0, rcClient.bottom);¤¤	// Draw edge¤	pDCMem->DrawEdge(&rcClient, BDR_SUNKENOUTER, BF_RECT);¤¤	// Draw draw column¤	if (m_bColDrag == TRUE)¤	{¤		_DrawXorBar(pDCMem->GetSafeHdc(), m_lColumn - OT_COLRNG / 2, 0, 4, rcClient.bottom);¤	}¤¤	// Copy back buffer to the display¤	dc.BitBlt(0, 0, rcClient.Width(), rcClient.Height(), pDCMem, 0, 0, SRCCOPY);¤	¤	// Select old objects¤	pDCMem->SelectObject(hOldBrush);¤	pDCMem->SelectObject(bmOld);¤	¤	// Delete objects¤	if (pDCMem->GetSafeHdc() != NULL)¤	{¤		pDCMem->DeleteDC();¤	}¤	delete pDCMem;¤	if (bpMem.GetSafeHandle() != NULL)¤	{¤		bpMem.DeleteObject();¤	}¤¤#ifdef _DEBUG¤  pt.StopTimer();¤  CString sInfoText("");¤  m_otOption->m_otInfoInfo.GetWindowText(sInfoText);¤  sInfoText += "\r\n";¤  sInfoText += "TreeList::OnPaint: ";¤  sInfoText += pt.GetDurationString();¤  m_otOption->m_otInfoInfo.SetWindowText(sInfoText);¤  m_otOption->m_otInfoInfo.SetSel(sInfoText.GetLength()-1,sInfoText.GetLength()-1,TRUE);¤#endif¤¤  // the largest largest label changed -> so update column size¤  if(recLargest != m_otOption->GetLargestVisibleLabel(false) ||¤    recLargest.right != m_otOption->m_ptOrigin.x)¤  {¤    // not update after UpdateColumnWidth: we dont know how¤    // often COptionTreeList::OnPaint will be called.¤    m_otOption->UpdateColumnWidth(-1,false);¤  }¤  ¤}¤¤BOOL COptionTreeList::OnSetCursor(CWnd* pWnd, UINT nHitTest, UINT message) ¤{¤  /*¤	// Hit test¤	if (nHitTest == HTCLIENT)¤	{¤		// -- Declare variables¤		CPoint ptPoint;¤¤		// -- Validate option¤		if (m_otOption == NULL)¤		{¤			return CWnd::OnSetCursor(pWnd, nHitTest, message);¤		}¤¤		// Get cursor position¤		GetCursorPos(&ptPoint);¤		ScreenToClient(&ptPoint);¤¤		// -- Run hit test and set cursor¤    if(_iDrag == 0)¤    {¤      switch (m_otOption->HitTest(ptPoint))¤		  {¤			  case OT_HIT_COLUMN:¤				  SetCursor(m_hSplitter);¤#ifdef _DEBUG¤  afxDump<<"\nOnSetCursor Splitter";¤#endif¤          return TRUE;¤¤			  case OT_HIT_EXPAND:¤				  SetCursor(m_hHand);¤#ifdef _DEBUG¤  afxDump<<"\nOnSetCursor Hand";¤#endif¤				  return TRUE;¤		  }¤    }¤    else¤    {¤      //SetCursor(_hDrag);¤      //return TRUE;¤    }¤	}¤#ifdef _DEBUG¤  afxDump<<"\nOnSetCursor Default";¤#endif¤	*/¤	return CWnd::OnSetCursor(pWnd, nHitTest, message);¤}¤¤void COptionTreeList::OnLButtonDown(UINT nFlags, CPoint point) ¤{¤  _iDrag=0;¤  _pDragItem=NULL;¤	// Validate option¤	if (m_otOption == NULL)¤	{¤		CWnd::OnLButtonDown(nFlags, point);¤		return;¤	}¤¤	// See if disabled¤	if (m_otOption->IsDisableInput() || !m_otOption->IsWindowEnabled())¤	{¤		CWnd::OnLButtonDown(nFlags, point);¤		return;¤	}¤¤	// Send notify to user¤	m_otOption->SendNotify(NM_CLICK);¤¤	// Declare variables¤	long lHit;¤	COptionTreeItem *otiItem;¤	COptionTreeItem *oliOldFocus;¤	CRect rcClient;¤¤	// Get client rectangle¤	GetClientRect(rcClient);¤¤	// Set focus to window¤	SetFocus();¤¤	// Hit test¤	lHit = m_otOption->HitTest(point);¤	switch (lHit)¤	{¤		case OT_HIT_COLUMN:¤			¤			if (m_otOption->SendNotify(OT_NOTIFY_COLUMNCLICK) || m_otOption->GetAutoSizeColumn() == true)¤			{¤				break;¤			}¤¤			// -- Set capture¤			m_bColDrag = TRUE;¤			SetCapture();¤¤			m_lColumn = m_otOption->GetOrigin().x;¤¤			// -- Force redraw¤			Invalidate();¤¤			// -- Update window¤			UpdateWindow();¤¤			break;¤		case OT_HIT_EXPAND:¤¤			if ((otiItem = m_otOption->FindItem(point)) != NULL)¤			{¤				if (otiItem->GetChild() && !m_otOption->SendNotify(OT_NOTIFY_ITEMEXPANDING, otiItem))¤				{¤          m_otOption->LockAll();¤          // -- Expand¤					otiItem->Expand(!otiItem->IsExpanded());¤          // -- Update resize¤					UpdateResize();¤          m_otOption->UnLockAll();¤					// -- Check visible¤					CheckVisibleFocus();¤				}¤			}¤			break;¤    // ce¤    // item¤    case OT_HIT_LABEL:¤      ¤      _pDragItem = m_otOption->FindItem(point);¤      // begin dragging¤      if( _pDragItem != NULL && ¤          _pDragItem->GetParent() != NULL &&¤          _pDragItem->GetParent()->GetAllowChildDrag() == true &&¤          _pDragItem->Point2ButtonCode(point) == _D_BT_NONE)¤      {¤        _iDrag=1;¤      }¤      else¤        _pDragItem=NULL;        ¤      // let the default work being done also¤		default:¤¤			if ((otiItem = m_otOption->FindItem(point)) != NULL)¤			{¤				// -- Get old focus¤				oliOldFocus = m_otOption->GetFocusedItem();¤¤				// -- Select items¤				m_otOption->SelectItems(NULL, FALSE);¤¤				// -- Select¤				otiItem->Select();¤¤				// -- Make sure new item¤				if (otiItem != oliOldFocus)¤				{¤					m_otOption->SendNotify(OT_NOTIFY_SELCHANGE, otiItem);¤				}¤¤				// -- Send notify¤				if (lHit == OT_HIT_ATTRIBUTE && !otiItem->IsRootLevel())¤				{¤					if (!m_otOption->SendNotify(OT_NOTIFY_PROPCLICK, otiItem) && !otiItem->IsReadOnly())¤					{¤						otiItem->Activate();¤					}¤				}¤¤				// -- Set focus item¤				m_otOption->SetFocusedItem(otiItem);¤¤				// -- Force redraw¤				Invalidate();¤¤				// -- Update window¤				UpdateWindow();¤¤			}¤			else¤			{¤				// -- Select items¤				m_otOption->SelectItems(NULL, FALSE);¤¤				// -- Set focus item¤				m_otOption->SetFocusedItem(NULL);¤¤				// -- Send notify¤				m_otOption->SendNotify(OT_NOTIFY_SELCHANGE);¤¤				// -- Force redraw¤				Invalidate();¤¤				// -- Update window¤				UpdateWindow();¤			}¤			break;¤	}¤ ¤	CWnd::OnLButtonDown(nFlags, point);¤}¤¤void COptionTreeList::OnLButtonUp(UINT nFlags, CPoint point) ¤{¤	// See if disabled¤	if (m_otOption->IsDisableInput() || !m_otOption->IsWindowEnabled())¤	{¤		CWnd::OnLButtonUp(nFlags, point);¤		return;¤	}¤¤	// Draw column¤	if (m_bColDrag == TRUE)¤	{¤		// -- Declare variables¤		CRect rcClient;¤¤		// -- Get client rectangle¤		GetClientRect(rcClient);¤¤		// -- Release capture¤		m_bColDrag = FALSE;¤¤		// -- Release capture¤		ReleaseCapture();¤¤		// -- Resize limit¤		// -- -- Left¤		if (point.x < (OT_EXPANDCOLUMN + OT_RESIZEBUFFER))¤		{¤			// -- -- -- Set column¤			m_otOption->SetColumn(OT_EXPANDCOLUMN + OT_RESIZEBUFFER);¤		}¤		// -- -- Right¤		else if (point.x > (rcClient.BottomRight().x - OT_RESIZEBUFFER))¤		{¤			// -- -- -- Set column¤			m_otOption->SetColumn(rcClient.BottomRight().x - OT_RESIZEBUFFER);¤		}¤		else¤		{¤			// -- -- -- Set column¤			m_otOption->SetColumn(point.x);¤		}¤¤		// -- Update move items¤		m_otOption->UpdateMoveAllItems();¤¤		// -- Force redraw¤		Invalidate();¤¤		// -- Update window¤		UpdateWindow();¤	}¤  // ce¤  else¤  {¤	  long lHit = m_otOption->HitTest(point);¤	  switch (lHit)¤	  {¤      case OT_HIT_LABEL:¤        {¤          COptionTreeItem* pItemUnder = m_otOption->FindItem(point);¤          // terminate dragging¤          if(_pDragItem != NULL && pItemUnder != NULL)¤          {¤            if( pItemUnder != NULL && ¤                _pDragItem != pItemUnder &&¤                pItemUnder->GetParent() == _pDragItem->GetParent())¤            {¤              m_otOption->MoveItem(_pDragItem,pItemUnder);¤            }¤            else¤            {¤              ;¤            }¤            _iDrag=0;¤            _pDragItem = NULL;¤          } ¤          // check for button click¤          else if(pItemUnder != NULL && m_otOption != NULL)¤          {¤            m_otOption->ButtonClicked(pItemUnder,pItemUnder->Point2ButtonCode(point));¤          }¤        }¤        break;¤      case OT_HIT_ATTRIBUTE:¤        {¤          COptionTreeItem* pItemUnder = m_otOption->FindItem(point);¤          if(pItemUnder && pItemUnder->IsRootLevel() == TRUE)¤          {¤            m_otOption->ButtonClicked(pItemUnder,pItemUnder->Point2ButtonCode(point));¤          }¤        }¤        break;¤      default:¤        break;¤    }¤  }¤	CWnd::OnLButtonUp(nFlags, point);¤}¤¤void COptionTreeList::OnLButtonDblClk(UINT nFlags, CPoint point) ¤{¤	// Validate option¤	if (m_otOption == NULL)¤	{¤		CWnd::OnLButtonDblClk(nFlags, point);¤		return;¤	}¤¤	// See if disabled¤	if (m_otOption->IsDisableInput() || !m_otOption->IsWindowEnabled())¤	{¤		CWnd::OnLButtonDblClk(nFlags, point);¤		return;¤	}¤¤	// Declare variables¤	COptionTreeItem *otiItem;¤	COptionTreeItem *oliOldFocus;¤	CRect rcClient, rcLabel;¤¤	// Send notify to user¤	m_otOption->SendNotify(NM_DBLCLK);¤¤	// Get client rect¤	GetClientRect(rcClient);¤¤	// Hit test¤	if ((otiItem = m_otOption->FindItem(point)) != NULL && otiItem->GetChild())¤	{¤		switch (m_otOption->HitTest(point))¤		{¤			case OT_HIT_COLUMN:¤¤				// -- Get largest visible label¤				rcLabel = m_otOption->GetLargestVisibleLabel();¤¤				// -- Resize limit¤				// -- -- Right¤				if (rcLabel.right + ATTRIB_OFFSET > (rcClient.right - OT_RESIZEBUFFER))¤				{¤					// -- -- -- Set column¤					m_otOption->SetColumn(rcClient.right - OT_RESIZEBUFFER);¤				}¤				else¤				{¤					// -- -- -- Set column¤					m_otOption->SetColumn(rcLabel.right + ATTRIB_OFFSET);¤				}¤¤				// -- Update move items¤				m_otOption->UpdateMoveAllItems();¤¤				// -- Force redraw¤				Invalidate();¤¤				// -- Update window¤				UpdateWindow();¤¤				break;¤¤			case OT_HIT_ATTRIBUTE:¤¤				if (!otiItem->IsRootLevel())¤				{¤					break;¤				}¤¤			default:¤				// -- Get focus item¤				oliOldFocus = m_otOption->GetFocusedItem();¤¤				// -- Select items¤				m_otOption->SelectItems(NULL, FALSE);¤¤				// -- Set focus item¤				m_otOption->SetFocusedItem(otiItem);¤¤				// -- Select¤				otiItem->Select();¤			¤				// -- Send notify to user¤				if (otiItem != oliOldFocus)¤				{¤					m_otOption->SendNotify(OT_NOTIFY_SELCHANGE, otiItem);¤				}¤¤			case OT_HIT_EXPAND:¤¤				if (!m_otOption->SendNotify(OT_NOTIFY_ITEMEXPANDING, otiItem))¤				{¤					// -- Expand¤					otiItem->Expand(!otiItem->IsExpanded());¤¤					// -- Update resize¤					UpdateResize();¤¤					// -- Force redraw¤					Invalidate();¤¤					// -- Update window¤					UpdateWindow();¤¤					// -- Check visible¤					CheckVisibleFocus();¤				}¤				break;¤		}¤	}¤	else¤	{¤		switch (m_otOption->HitTest(point))¤		{¤			case OT_HIT_COLUMN:¤¤				// -- Get largest visible label¤				rcLabel = m_otOption->GetLargestVisibleLabel();¤¤				// -- Resize limit¤				// -- -- Right¤				if (rcLabel.right + ATTRIB_OFFSET > (rcClient.right - OT_RESIZEBUFFER))¤				{¤					// -- -- -- Set column¤					m_otOption->SetColumn(rcClient.right - OT_RESIZEBUFFER);¤				}¤				else¤				{¤					// -- -- -- Set column¤					m_otOption->SetColumn(rcLabel.right + ATTRIB_OFFSET);¤				}¤¤				// -- Update move items¤				m_otOption->UpdateMoveAllItems();¤¤				// -- Force redraw¤				Invalidate();¤¤				// -- Update window¤				UpdateWindow();¤¤				break;¤		}¤	}¤¤	CWnd::OnLButtonDblClk(nFlags, point);¤}¤¤void COptionTreeList::OnMouseMove(UINT nFlags, CPoint point) ¤{¤¤  // Make sure option is not NULL¤	if (m_otOption == NULL)¤	{¤		CWnd::OnMouseMove(nFlags, point);¤		return;¤	}¤¤  if(_iDrag == 1)¤    SetCursor(_hDrag);¤¤  // Drag mode¤	else if (m_bColDrag == TRUE)¤	{¤    SetCursor(m_hSplitter);¤¤		// -- Save point¤		m_lColumn = point.x;¤	¤		// -- Force redraw¤		Invalidate();¤¤		// -- Update window¤		UpdateWindow();¤	}¤  else¤  {¤    CPoint ptPoint;¤		// Get cursor position¤		GetCursorPos(&ptPoint);¤		ScreenToClient(&ptPoint);¤¤		// -- Run hit test and set cursor¤    switch (m_otOption->HitTest(ptPoint))¤		{¤			case OT_HIT_COLUMN:¤        if(m_otOption->GetAutoSizeColumn() == false)¤				SetCursor(m_hSplitter);¤        return;¤			case OT_HIT_EXPAND:¤				SetCursor(m_hHand);¤				return;¤      // mouse over a button¤      /* ce! disabled: performance drawdown due to device context¤      case OT_HIT_ATTRIBUTE:¤			case OT_HIT_LABEL:¤        {¤          COptionTreeItem* pItemUnder = m_otOption->FindItem(point);¤          if(pItemUnder != NULL && pItemUnder->HighlightFromPoint(point) == TRUE)¤          {¤				    SetCursor(m_hHand);¤            return;¤          }¤        }¤      */¤      case OT_HIT_ATTRIBUTE:¤			case OT_HIT_LABEL:¤        {¤          COptionTreeItem* pItemUnder = m_otOption->FindItem(point);¤          if(pItemUnder != NULL && pItemUnder->Point2ButtonCode(point) != _D_BT_NONE)¤          {¤				    SetCursor(m_hHand);¤            return;¤          }¤        }   ¤    }¤  }¤	CWnd::OnMouseMove(nFlags, point);¤}¤¤BOOL COptionTreeList::OnMouseWheel(UINT nFlags, short zDelta, CPoint pt) ¤{¤	// Declare variables¤	SCROLLINFO si;¤	CRect rcClient;¤¤	// Setup scrollbar info¤	ZeroMemory(&si, sizeof(SCROLLINFO));¤	si.cbSize = sizeof(SCROLLINFO);¤	si.fMask = SIF_RANGE;¤¤	// Get scrollbar info¤	GetScrollInfo(SB_VERT, &si);¤¤	// Get client rectnagle¤	GetClientRect(rcClient);¤¤	// Validate¤	if (si.nMax - si.nMin < rcClient.Height())¤	{¤		return TRUE;¤	}¤¤	// Set focus¤	SetFocus();¤¤	// Vertical scroll¤	OnVScroll(zDelta < 0 ? SB_LINEDOWN : SB_LINEUP, 0, NULL);¤	¤	return TRUE;¤	//return CWnd::OnMouseWheel(nFlags, zDelta, pt);¤}¤¤void COptionTreeList::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags) ¤{¤	// Declare variables¤	COptionTreeItem* otiItem;¤	CRect rcClient;¤¤	// Get client rectangle¤	GetClientRect(rcClient);¤¤	// Validate option¤	if (m_otOption == NULL)¤	{¤		CWnd::OnKeyDown(nChar, nRepCnt, nFlags);¤		return;¤	}¤¤	// See if disabled¤	if (m_otOption->IsDisableInput() || !m_otOption->IsWindowEnabled())¤	{¤		CWnd::OnKeyDown(nChar, nRepCnt, nFlags);¤		return;¤	}¤¤	switch (nChar)¤	{¤		case VK_TAB:¤¤			// -- Shift¤			if (GetKeyState(VK_SHIFT) < 0)¤			{¤				// -- -- Focus next¤				otiItem = m_otOption->GetFocusedItem();¤				if (otiItem != NULL && !otiItem->IsRootLevel())¤				{¤					m_otOption->FocusPrev();¤				}¤¤				// -- -- Activate¤				otiItem = m_otOption->GetFocusedItem();¤				if (otiItem != NULL && !otiItem->IsRootLevel() && !otiItem->IsReadOnly())¤				{¤					otiItem->Activate();¤				}¤¤				Invalidate();¤¤				UpdateWindow();¤			}¤			// -- No shift¤			else¤			{¤				// -- -- Focus next¤				otiItem = m_otOption->GetFocusedItem();¤				if (otiItem != NULL && !otiItem->IsRootLevel())¤				{¤					m_otOption->FocusNext();¤				}¤¤				// -- -- Activate¤				otiItem = m_otOption->GetFocusedItem();¤				if (otiItem != NULL && !otiItem->IsRootLevel() && !otiItem->IsReadOnly())¤				{¤					otiItem->Activate();¤				}¤¤				Invalidate();¤¤				UpdateWindow();¤			}¤¤			break;¤¤		case VK_RETURN:¤¤			// -- Activate¤			otiItem = m_otOption->GetFocusedItem();¤			if (otiItem != NULL && !otiItem->IsRootLevel() && !otiItem->IsReadOnly())¤			{¤				otiItem->Activate();¤			}¤			break;¤¤		case VK_HOME:¤¤			// -- Focus on first item¤			if (m_otOption->FocusFirst())¤			{¤				Invalidate();¤¤				UpdateWindow();¤			}¤			break;¤¤		case VK_END:¤¤			// -- Focus on last item¤			if (m_otOption->FocusLast())¤			{¤				Invalidate();¤				¤				UpdateWindow();¤			}¤			break;¤¤		case VK_LEFT:¤¤			// -- Get focused item¤			otiItem = m_otOption->GetFocusedItem();¤			if (otiItem != NULL)¤			{¤				// -- -- Send notify to user¤				if (!m_otOption->SendNotify(OT_NOTIFY_ITEMEXPANDING, otiItem))¤				{¤					// -- -- -- Validate¤					if (otiItem->GetChild() && otiItem->IsExpanded())¤					{¤						// -- Expand¤						otiItem->Expand(FALSE);¤¤						// -- Update resize¤						UpdateResize();¤¤						// -- Force redraw¤						Invalidate();¤¤						// -- Update window¤						UpdateWindow();¤¤						// -- Check visible¤						CheckVisibleFocus();¤¤						break;¤					}¤				}¤			}¤			else¤				break;¤			¤		case VK_UP:¤			¤			// -- Move focus up¤			if (m_otOption->FocusPrev())¤			{¤				Invalidate();¤¤				UpdateWindow();¤			}¤			break;¤¤		case VK_RIGHT:¤¤			// -- Get focused item¤			otiItem = m_otOption->GetFocusedItem();¤			if (otiItem != NULL)¤			{¤				// -- -- Send notify to user¤				if (!m_otOption->SendNotify(OT_NOTIFY_ITEMEXPANDING, otiItem))¤				{¤					// -- -- -- Validate¤					if (otiItem->GetChild() && !otiItem->IsExpanded())¤					{¤						// -- -- -- -- Expand¤						otiItem->Expand(TRUE);¤¤						// -- -- -- -- Update resize¤						UpdateResize();¤¤						// -- -- -- -- Force redraw¤						Invalidate();¤¤						// -- -- -- -- Update window¤						UpdateWindow();¤¤						// -- -- -- -- Check visible¤						CheckVisibleFocus();¤¤						break;¤					}¤				}¤			}¤			else¤				break;¤			¤		case VK_DOWN:¤¤			// -- Move focus down¤			if (m_otOption->FocusNext())¤			{¤				Invalidate();¤¤				UpdateWindow();¤			}¤			break;¤	}¤	¤	CWnd::OnKeyDown(nChar, nRepCnt, nFlags);¤}¤¤UINT COptionTreeList::OnGetDlgCode() ¤{¤	return DLGC_WANTARROWS | DLGC_WANTCHARS | DLGC_WANTALLKEYS;¤}¤void COptionTreeList::OnVScroll(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar) ¤{¤	// Declare variables¤	SCROLLINFO si;¤	CRect rcClient;¤	long lHeight, lNY;¤¤	// Setup scrollbar information¤	ZeroMemory(&si, sizeof(SCROLLINFO));¤	si.cbSize = sizeof(SCROLLINFO);¤	si.fMask = SIF_RANGE;¤¤	// Get client rectangle¤	GetClientRect(rcClient);¤	¤	// Set focus¤	SetFocus();¤¤	// Get height¤	lHeight = rcClient.Height() + 1;¤¤	// Get scrollbar information¤	GetScrollInfo(SB_VERT, &si);¤¤	// Get origin¤	lNY = m_otOption->GetOrigin().y;¤¤	// Switch scrollbar code¤	switch (nSBCode)¤	{¤		case SB_LINEDOWN:¤			lNY += OT_DEFHEIGHT;¤			break;¤¤		case SB_LINEUP:¤			lNY -= OT_DEFHEIGHT;¤			break;¤¤		case SB_PAGEDOWN:¤			lNY += lHeight;¤			break;¤¤		case SB_PAGEUP:¤			lNY -= lHeight;¤			break;¤¤		case SB_THUMBPOSITION:¤		case SB_THUMBTRACK:¤      {¤        SCROLLINFO vert;¤        GetScrollInfo(SB_VERT, &vert, SIF_TRACKPOS);¤        lNY = vert.nTrackPos;¤      }¤			break;¤¤		case SB_ENDSCROLL:¤			return;¤	}¤¤// GARANT {¤	// Calculate¤	lNY = __min(__max(lNY, si.nMin), si.nMax - lHeight) + 5;¤// } GARANT¤¤	// Set origin¤	m_otOption->SetOriginOffset(lNY);¤¤	// Set scrollbar info¤	si.fMask = SIF_POS;¤	si.nPos = lNY;¤	SetScrollInfo(SB_VERT, &si, TRUE);¤¤	// Force to redraw¤	Invalidate();¤¤	// Update window¤	UpdateWindow();¤}¤void COptionTreeList::ScrollDirect(UINT nSBCode, UINT nPos) ¤{¤	// Declare variables¤	SCROLLINFO si;¤	ZeroMemory(&si, sizeof(SCROLLINFO));¤	// Setup scrollbar information¤	si.cbSize = sizeof(SCROLLINFO);¤¤¤  CRect rcClient;¤	// Get client rectangle¤	GetClientRect(rcClient);¤	// Set focus¤	SetFocus();¤¤	// Get scrollbar information¤	GetScrollInfo(nSBCode, &si);¤¤  // Get height,Pos¤  long lHeight = rcClient.Height() + 1, lNY=nPos;¤¤	// Calculate¤	lNY = __min(__max(lNY, si.nMin), si.nMax - lHeight);¤¤	// Set origin¤	m_otOption->SetOriginOffset(lNY);¤¤	// Set scrollbar info¤	si.fMask = SIF_POS;¤	si.nPos = lNY;¤	SetScrollInfo(nSBCode, &si, TRUE);¤¤	// Force to redraw¤	Invalidate();¤¤	// Update window¤	UpdateWindow();¤}¤¤void COptionTreeList::CheckVisibleFocus()¤{¤	// Declare variables¤	COptionTreeItem *otiItem;	¤¤	// Validate option¤	if (m_otOption == NULL)¤	{¤		return;¤	}¤	¤	// Get focused item¤	otiItem = m_otOption->GetFocusedItem();¤	if (otiItem == NULL)¤	{¤		return;¤	}¤¤	// See if item is visible¤	if (!m_otOption->IsItemVisible(otiItem))¤	{¤		// -- Single select¤		if (m_otOption->IsSingleSelection())¤		{¤			otiItem->Select(FALSE);¤		}¤¤		// -- Set focus¤		m_otOption->SetFocusedItem(NULL);¤¤		// -- Send notify to user¤		m_otOption->SendNotify(OT_NOTIFY_SELCHANGE, NULL);¤¤		// -- Force redraw¤		Invalidate();¤¤		// -- Update window¤		UpdateWindow();¤	}¤}¤¤void COptionTreeList::SetOptionsOwner(COptionTree *otOption)¤{¤	// Save pointer¤	m_otOption = otOption;¤}¤¤BOOL COptionTreeList::OnEraseBkgnd(CDC* pDC) ¤{¤	// Ha, Ha¤	return FALSE;¤}¤¤void COptionTreeList::OnKillFocus(CWnd* pNewWnd) ¤{¤	CWnd::OnKillFocus(pNewWnd);	¤}¤¤void COptionTreeList::GetHandCursor()¤{¤// GARANT {¤    m_hHand = ::LoadCursor(NULL, IDC_HAND);¤// } GARANT¤}¤¤void COptionTreeList::OnSizing(UINT fwSide, LPRECT pRect) ¤{¤	// Make sure we have an option tree¤	if (m_otOption != NULL)¤	{¤		// -- Update resize¤		UpdateResize();¤¤		// -- Inform all items that a resize has been made¤		m_otOption->UpdateMoveAllItems();¤¤		// -- Redraw¤		Invalidate();¤¤		// -- Update window¤		UpdateWindow();¤	}¤¤	CWnd::OnSizing(fwSide, pRect);	¤}¤¤void COptionTreeList::OnSetFocus(CWnd* pOldWnd) ¤{¤	// Invalidate¤	Invalidate();¤¤	// Update Window¤	UpdateWindow();¤¤	CWnd::OnSetFocus(pOldWnd);¤}¤// hb - added onButton to handle the button in COptionTreeItemEditButton¤BOOL COptionTreeList::OnWndMsg( UINT message, WPARAM wParam, LPARAM lParam, LRESULT *pResult )¤{¤   CWnd::OnWndMsg(message, wParam, lParam, pResult); // call default¤   if (message == WM_COMMAND && HIWORD(wParam) == BN_CLICKED)¤   {¤	   // Send notify to user¤      COptionTreeItem *pItem = m_otOption->FindItem(LOWORD(wParam));¤	   m_otOption->SendNotify(OT_NOTIFY_EDITBUTTONCLICK, pItem);¤      return FALSE;¤   }¤   return FALSE;¤}¤BOOL COptionTreeList::PreTranslateMessage(MSG* pMsg) ¤{¤  return CWnd::PreTranslateMessage(pMsg);¤}¤//#UC END# *470B05D5032C*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B05D5032C_DESTR_BODY*"
		    value      	(value Text 
|//#UC START# *470B05D5032C_DESTR_BODY*¤		// Delete objects¤	// -- Splitter cursor¤	if (m_hSplitter != NULL)¤	{¤		::DestroyCursor(m_hSplitter);¤	}¤	// -- Hand cursor¤	if (m_hHand != NULL)¤	{¤		::DestroyCursor(m_hHand);¤	}¤  // --- Drag cursor ¤	if (_hDrag != NULL)¤	{¤		::DestroyCursor(_hDrag);¤	}¤	//#UC END# *470B05D5032C_DESTR_BODY*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B05D5032C_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B05D5032C_CUSTOM_INCLUDES*¤#include "shared/WinGUI/OptionTreeControls/OptionTreeDef.h"¤¤namespace WinGUI {¤	class COptionTree;¤	class COptionTreeItem;¤}¤//#UC END# *470B05D5032C_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B05D5032C*"
		    value      	(value Text 
|//#UC START# *470B05D5032C*¤// Construction¤public:¤	COptionTreeList();¤	BOOL Create(DWORD dwStyle, RECT rcRect, CWnd* pParentWnd, UINT nID);¤¤  const CRect& GetCurrentClientRect(void) const {return _CurrentClientRect;}¤¤// Attributes¤public:¤¤// Operations¤public:¤¤// Overrides¤	// ClassWizard generated virtual function overrides¤	//{{AFX_VIRTUAL(COptionTreeList)¤	//}}AFX_VIRTUAL¤¤// Implementation¤public:¤  // this function calculates the total visible virtual height¤  // and sets the scrollragne¤	void UpdateResize();¤¤protected:¤  BOOL PreTranslateMessage(MSG* pMsg) ;¤¤	// Generated message map functions¤protected:¤	// CPropTree class that this class belongs¤	COptionTree *m_otOption;¤	long m_lPrevCol;¤	BOOL m_bColDrag;¤	HCURSOR m_hSplitter;¤	HCURSOR m_hHand;¤	HCURSOR _hDrag;¤	long m_lColumn;¤	//{{AFX_MSG(COptionTreeList)¤	afx_msg void OnSize(UINT nType, int cx, int cy);¤	afx_msg void OnPaint();¤	afx_msg BOOL OnSetCursor(CWnd* pWnd, UINT nHitTest, UINT message);¤	afx_msg void OnLButtonDown(UINT nFlags, CPoint point);¤	afx_msg void OnLButtonUp(UINT nFlags, CPoint point);¤	afx_msg void OnLButtonDblClk(UINT nFlags, CPoint point);¤	afx_msg void OnMouseMove(UINT nFlags, CPoint point);¤	afx_msg BOOL OnMouseWheel(UINT nFlags, short zDelta, CPoint pt);¤	afx_msg void OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags);¤	afx_msg UINT OnGetDlgCode();¤	afx_msg BOOL OnEraseBkgnd(CDC* pDC);¤	afx_msg void OnKillFocus(CWnd* pNewWnd);¤	afx_msg void OnSizing(UINT fwSide, LPRECT pRect);¤	afx_msg void OnSetFocus(CWnd* pOldWnd);¤	afx_msg BOOL OnWndMsg( UINT message, WPARAM wParam, LPARAM lParam, LRESULT *pResult );¤	//}}AFX_MSG¤¤public:¤	void GetHandCursor();¤	void SetOptionsOwner(COptionTree *otOption);¤	void CheckVisibleFocus();¤	afx_msg void OnVScroll(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar);¤¤	void ScrollDirect(UINT nSBCode=SB_VERT,UINT nPos=0) ;¤¤protected:¤	int               _iDrag;¤	COptionTreeItem * _pDragItem;¤	CRect             _CurrentClientRect;¤//#UC END# *470B05D5032C*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"WikiPageID (wiki)"
		    value      	(value Text 
|Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeList|470B05D5032C
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B05D5032C_MESSAGE_MAP*"
		    value      	(value Text 
|//#UC START# *470B05D5032C_MESSAGE_MAP*¤	ON_WM_SIZE()¤	ON_WM_PAINT()¤	ON_WM_SETCURSOR()¤	ON_WM_LBUTTONDOWN()¤	ON_WM_LBUTTONUP()¤	ON_WM_LBUTTONDBLCLK()¤	ON_WM_MOUSEMOVE()¤	ON_WM_MOUSEWHEEL()¤	ON_WM_KEYDOWN()¤	ON_WM_GETDLGCODE()¤	ON_WM_ERASEBKGND()¤	ON_WM_KILLFOCUS()¤	ON_WM_SIZING()¤	ON_WM_VSCROLL()¤	ON_WM_SETFOCUS()¤	//#UC END# *470B05D5032C_MESSAGE_MAP*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (h)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (wiki)"
		    value      	"wiki")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (cpp)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ElementCreationOrder"
		    value      	"16659830752"))
	    quid       	"470B05D5032C"
	    documentation 	"list"
	    stereotype 	"GuiControl"
	    language   	"MDA Generator")
	(object Class "COptionTreeSpinnerButton"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"AbstarctOperation"
		    value      	"regular")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsNative"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need assign op"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need copy ctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need ref count"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need unsorted less"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"debug log"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"local supervisor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need UC"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need dctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need objcounter"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"no base class"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"non virtual base"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"singleton"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (cpp)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeSpinnerButton.cpp")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (h)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeSpinnerButton.h")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B06290251_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B06290251_CUSTOM_INCLUDES*¤#include "shared/Core/fix/win_afx.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTree.h"¤//#UC END# *470B06290251_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B06290251*"
		    value      	(value Text 
|//#UC START# *470B06290251*¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeSpinnerButton¤¤COptionTreeSpinnerButton::COptionTreeSpinnerButton()¤{¤	// Intialize variables¤	m_otSpinnerOption = NULL;¤	m_dRangeTop = 100;¤	m_dRangeBottom = 0;¤	m_rcButtonTop = CRect(0, 0, 0, 0);¤	m_rcButtonBottom = CRect(0, 0, 0, 0);¤	m_bBottomPressed = FALSE;¤	m_bTopPressed = FALSE;¤	m_bFirstRepeat = FALSE;¤	m_nRepeatDelay = 0;¤	m_nRepeatRate = 0;¤	m_dwOptions = NULL;¤}¤¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeSpinnerButton message handlers¤¤void COptionTreeSpinnerButton::SetSpinnerOptionsOwner(COptionTree *otOption)¤{¤	// Save pointer¤	m_otSpinnerOption = otOption;¤}¤¤BOOL COptionTreeSpinnerButton::OnEraseBkgnd(CDC* pDC) ¤{¤	// Naa, we like flicker free better¤	return FALSE;¤}¤¤void COptionTreeSpinnerButton::SetRange(double dBottom, double dTop)¤{¤	// Save variables¤	m_dRangeBottom = dBottom;¤	m_dRangeTop = dTop;¤}¤¤void COptionTreeSpinnerButton::OnPaint() ¤{¤	// Make sure options aren't NULL¤	if (m_otSpinnerOption == NULL)¤	{¤		return;¤	}¤¤	// Declare variables¤	CPaintDC dc(this);¤	CDC* pDCMem = new CDC;¤	CBitmap bpMem;¤	CBitmap *bmOld;¤	COLORREF crOld;¤	HGDIOBJ hOldBrush;¤	int nOldBack;¤	CRect rcButtonTop, rcButtonBottom, rcClient;¤	CString strText;¤	HGDIOBJ hOld;¤¤	// Get client rectangle¤	GetClientRect(rcClient);¤¤	// Calculate rectangle¤	// -- Top¤	rcButtonTop.top = rcClient.top;¤	rcButtonTop.left = (rcClient.right - 2) - OT_SPINNER_WIDTH;¤	rcButtonTop.right = rcClient.right - 2;¤	rcButtonTop.bottom = rcClient.Height() / 2;¤	m_rcButtonTop = rcButtonTop;¤	// -- Bottom¤	rcButtonBottom.top = rcButtonTop.bottom;¤	rcButtonBottom.left = (rcClient.right - 2) - OT_SPINNER_WIDTH;¤	rcButtonBottom.right = rcClient.right - 2;¤	rcButtonBottom.bottom = rcClient.bottom;¤	m_rcButtonBottom = rcButtonBottom;¤¤	// Create DC¤	pDCMem->CreateCompatibleDC(&dc);¤	¤	// Create bitmap¤	bpMem.CreateCompatibleBitmap(&dc, rcClient.Width(), rcClient.Height());¤¤	// Select bitmap¤	bmOld = pDCMem->SelectObject(&bpMem);¤¤	// Set background mode¤	nOldBack = pDCMem->SetBkMode(TRANSPARENT);¤¤	// Set text color¤	crOld = pDCMem->SetTextColor(GetSysColor(COLOR_WINDOWTEXT));¤¤	// Select font¤	hOld = pDCMem->SelectObject(m_otSpinnerOption->GetNormalFont());¤¤	// Draw control background¤	hOldBrush = pDCMem->SelectObject(GetSysColorBrush(COLOR_BTNFACE));¤	pDCMem->PatBlt(rcClient.left, rcClient.top, rcClient.Width(), rcClient.Height(), PATCOPY);¤¤	// Wrap around¤	if (GetOption(OT_EDIT_WRAPAROUND) == TRUE)¤	{¤		// -- Draw top button¤		// -- -- Pressed¤		if (m_bTopPressed == TRUE)¤		{¤			pDCMem->DrawFrameControl(&rcButtonTop, DFC_SCROLL, DFCS_PUSHED | DFCS_SCROLLUP); ¤		}¤		// -- -- UnPressed¤		else¤		{¤			pDCMem->DrawFrameControl(&rcButtonTop, DFC_SCROLL, DFCS_SCROLLUP); ¤		}¤¤		// -- Draw bottom button¤		// -- -- Pressed¤		if (m_bBottomPressed == TRUE)¤		{¤			pDCMem->DrawFrameControl(&rcButtonBottom, DFC_SCROLL, DFCS_PUSHED | DFCS_SCROLLDOWN); ¤		}¤		// -- -- UnPressed¤		else¤		{¤			pDCMem->DrawFrameControl(&rcButtonBottom, DFC_SCROLL, DFCS_SCROLLDOWN); ¤		}¤	}¤	// No Wrap around¤	else¤	{¤		// -- Draw top button¤		if (_GetValue() >= m_dRangeTop)¤		{¤			pDCMem->DrawFrameControl(&rcButtonTop, DFC_SCROLL, DFCS_INACTIVE | DFCS_SCROLLUP); ¤		}¤		else¤		{¤			// -- -- Pressed¤			if (m_bTopPressed == TRUE)¤			{¤				pDCMem->DrawFrameControl(&rcButtonTop, DFC_SCROLL, DFCS_PUSHED | DFCS_SCROLLUP); ¤			}¤			// -- -- UnPressed¤			else¤			{¤				pDCMem->DrawFrameControl(&rcButtonTop, DFC_SCROLL, DFCS_SCROLLUP); ¤			}¤		}¤¤		// -- Draw bottom button¤		if (_GetValue() <= m_dRangeBottom)¤		{¤			pDCMem->DrawFrameControl(&rcButtonBottom, DFC_SCROLL, DFCS_INACTIVE | DFCS_SCROLLDOWN); ¤		}¤		else¤		{¤			// -- -- Pressed¤			if (m_bBottomPressed == TRUE)¤			{¤				pDCMem->DrawFrameControl(&rcButtonBottom, DFC_SCROLL, DFCS_PUSHED | DFCS_SCROLLDOWN); ¤			}¤			// -- -- UnPressed¤			else¤			{¤				pDCMem->DrawFrameControl(&rcButtonBottom, DFC_SCROLL, DFCS_SCROLLDOWN); ¤			}¤		}¤	}¤¤	// Copy to screen¤	dc.BitBlt(0, 0, rcClient.Width(), rcClient.Height(), pDCMem, 0, 0, SRCCOPY);¤¤	// Restore GDI ojects¤	pDCMem->SelectObject(bmOld);¤	pDCMem->SelectObject(hOldBrush);¤	pDCMem->SetBkMode(nOldBack);¤	pDCMem->SelectObject(hOld);¤	pDCMem->SetTextColor(crOld);	¤¤	// Delete objects¤	if (pDCMem->GetSafeHdc() != NULL)¤	{¤		pDCMem->DeleteDC();¤	}¤	delete pDCMem;¤	if (bpMem.GetSafeHandle() != NULL)¤	{¤		bpMem.DeleteObject();¤	}¤}¤¤void COptionTreeSpinnerButton::GetRange(double &dBottom, double &dTop)¤{¤	// Save variables¤	dBottom = m_dRangeBottom;¤	dTop = m_dRangeTop;¤}¤¤void COptionTreeSpinnerButton::OnLButtonUp(UINT nFlags, CPoint point) ¤{¤	// Kill timer¤	KillTimer(OT_TIMER);¤¤	// Clear pressed¤	m_bBottomPressed = FALSE;¤	m_bTopPressed = FALSE;¤¤	// Force redraw¤	Invalidate();¤¤	// Update window¤	UpdateWindow();¤	¤	CWnd::OnLButtonUp(nFlags, point);¤}¤¤void COptionTreeSpinnerButton::OnLButtonDown(UINT nFlags, CPoint point) ¤{¤	// Clear pressed¤	m_bBottomPressed = FALSE;¤	m_bTopPressed = FALSE;¤¤	// Save point¤	m_ptSavePoint = point;¤¤	// See if we have pressed a button¤	if (m_rcButtonTop.PtInRect(point) == TRUE)¤	{¤		// -- Mark bool¤		m_bTopPressed = TRUE;¤¤		// -- Update value¤		// -- -- Wrap around¤		if (GetOption(OT_EDIT_WRAPAROUND) == TRUE)¤		{¤			if ((_GetValue() + 1) > m_dRangeTop)¤			{¤				SetEditDouble(m_dRangeBottom);¤			}¤			else¤			{¤				SetEditDouble(_GetValue() + 1);¤			}¤¤		}¤		// -- -- No wrap around¤		else¤		{¤			if ((_GetValue() + 1) <= m_dRangeTop)¤			{¤				SetEditDouble(_GetValue() + 1);¤			}¤		}¤	}¤	else if (m_rcButtonBottom.PtInRect(point) == TRUE)¤	{¤		// -- Mark bool¤		m_bBottomPressed = TRUE;¤¤		// -- Update value¤		// -- -- Wrap around¤		if (GetOption(OT_EDIT_WRAPAROUND) == TRUE)¤		{¤			if ((_GetValue() - 1) < m_dRangeBottom)¤			{¤				SetEditDouble(m_dRangeTop);¤			}¤			else¤			{¤				SetEditDouble(_GetValue() - 1);¤			}¤		}¤		// -- -- No wrap around¤		else¤		{¤			if ((_GetValue() - 1) >= m_dRangeBottom)¤			{¤				SetEditDouble(_GetValue() - 1);¤			}¤		}¤	}¤¤	// Force redraw¤	Invalidate();¤¤	// Update window¤	UpdateWindow();¤¤	// Set repeat timer¤	KillTimer(OT_TIMER);¤	m_bFirstRepeat = TRUE;¤	SetTimer(OT_TIMER, m_nRepeatDelay, NULL);¤	¤	CWnd::OnLButtonDown(nFlags, point);¤}¤¤int COptionTreeSpinnerButton::OnCreate(LPCREATESTRUCT lpCreateStruct) ¤{¤	// Declare variables¤	CRect rcEdit;¤	DWORD dwStyle = WS_CHILD | WS_VISIBLE | ES_AUTOHSCROLL | ES_NUMBER;¤	int nSetting;¤	DWORD dwSetting;¤	¤	// Create window¤	if (CWnd::OnCreate(lpCreateStruct) == -1)¤	{¤		return -1;¤	}¤¤	// Calculate edit rectangle¤	GetClientRect(rcEdit);¤	rcEdit.right = (rcEdit.right - 2) - OT_SPINNER_WIDTH;¤	¤	// Create edit¤	if(m_ctlEdit.Create(dwStyle, rcEdit, this, 1000) == FALSE)¤	{¤		return -1;¤	}¤¤	// Set selection¤	m_ctlEdit.SetSel(0, 0);¤¤	// Set font¤	m_ctlEdit.SetFont(m_otSpinnerOption->GetNormalFont(), TRUE);¤¤	//  Modify style¤	m_ctlEdit.ModifyStyleEx(0, WS_EX_CLIENTEDGE, SWP_FRAMECHANGED);¤¤	// Set Owner spinner¤	m_ctlEdit.SetOwnerSpinner(this);¤¤	// Get keyboard repeat info¤	if (SystemParametersInfo(SPI_GETKEYBOARDDELAY, 0, &nSetting, 0) == FALSE)¤	{¤		m_nRepeatDelay = 500;¤	}¤	m_nRepeatDelay = (nSetting + 1) * 250;¤	if (SystemParametersInfo(SPI_GETKEYBOARDSPEED, 0, &dwSetting, 0) == FALSE)¤	{¤		m_nRepeatRate = 200;¤	}¤	m_nRepeatRate = 400 - (dwSetting * 12);¤	¤	return 0;¤}¤¤void COptionTreeSpinnerButton::SetEditDouble(double dValue)¤{¤	// Declare variables¤	CString strText;¤¤	// Convert string¤	strText.Format("%.0f", dValue);¤¤	// Modify style¤	if (IsWindow(m_ctlEdit.GetSafeHwnd()))¤	{¤		m_ctlEdit.SetWindowText(strText);¤	}¤}¤¤void COptionTreeSpinnerButton::SetEditInt(int nValue)¤{¤	// Declare variables¤	CString strText;¤¤	// Convert string¤	strText.Format("%d", nValue);¤¤	// Modify style¤	if (IsWindow(m_ctlEdit.GetSafeHwnd()))¤	{¤		m_ctlEdit.SetWindowText(strText);¤	}¤}¤¤void COptionTreeSpinnerButton::SetEditFloat(float fValue)¤{¤	// Declare variables¤	CString strText;¤¤	// Convert string¤	strText.Format("%.0f", fValue);¤¤	// Modify style¤	if (IsWindow(m_ctlEdit.GetSafeHwnd()))¤	{¤		m_ctlEdit.SetWindowText(strText);¤	}¤}¤¤void COptionTreeSpinnerButton::SetEditDword(DWORD dwValue)¤{¤	// Declare variables¤	CString strText;¤¤	// Convert string¤	strText.Format("%d", dwValue);¤¤	// Modify style¤	if (IsWindow(m_ctlEdit.GetSafeHwnd()))¤	{¤		m_ctlEdit.SetWindowText(strText);¤	}¤}¤¤void COptionTreeSpinnerButton::SetEditLong(long lValue)¤{¤	// Declare variables¤	CString strText;¤¤	// Convert string¤	strText.Format("%.0f", lValue);¤¤	// Modify style¤	if (IsWindow(m_ctlEdit.GetSafeHwnd()))¤	{¤		m_ctlEdit.SetWindowText(strText);¤	}¤}¤¤BOOL COptionTreeSpinnerButton::GetEditFloat(float &fReturn)¤{¤	// Declare variables¤	CString strWindowText;¤¤	// Set blank¤	fReturn = 0;¤¤	// Get window text¤	if (IsWindow(m_ctlEdit.GetSafeHwnd()) == TRUE)¤	{¤		m_ctlEdit.GetWindowText(strWindowText);¤	}¤	else¤	{¤		return FALSE;¤	}¤¤	// See if string is numeric¤	if (!IsWindow(m_ctlEdit.GetSafeHwnd()))¤	{¤		return FALSE;¤	}¤¤	// Convert string¤	fReturn = (float) atof(strWindowText);¤¤	return TRUE;¤}¤¤BOOL COptionTreeSpinnerButton::GetEditDouble(double &dReturn)¤{¤	// Declare variables¤	CString strWindowText;¤¤	// Set blank¤	dReturn = 0;¤¤	// Get window text¤	if (IsWindow(m_ctlEdit.GetSafeHwnd()))¤	{¤		m_ctlEdit.GetWindowText(strWindowText);¤	}¤	else¤	{¤		return FALSE;¤	}¤¤	// See if string is numeric¤	if (!IsWindow(m_ctlEdit.GetSafeHwnd()))¤	{¤		return FALSE;¤	}¤¤	// Convert string¤	dReturn = atof(strWindowText);¤¤	return TRUE;¤}¤¤BOOL COptionTreeSpinnerButton::GetEditLong(long &lReturn)¤{¤	// Declare variables¤	CString strWindowText;¤¤	// Set blank¤	lReturn = 0;¤¤	// Get window text¤	if (IsWindow(m_ctlEdit.GetSafeHwnd()))¤	{¤		m_ctlEdit.GetWindowText(strWindowText);¤	}¤	else¤	{¤		return FALSE;¤	}¤¤	// See if string is numeric¤	if (!IsWindow(m_ctlEdit.GetSafeHwnd()))¤	{¤		return FALSE;¤	}¤¤	// Convert string¤	lReturn = atol(strWindowText);¤¤	return TRUE;¤}¤¤BOOL COptionTreeSpinnerButton::GetEditInt(int &nReturn)¤{¤	// Declare variables¤	CString strWindowText;¤¤	// Set blank¤	nReturn = 0;¤¤	// Get window text¤	if (IsWindow(m_ctlEdit.GetSafeHwnd()))¤	{¤		m_ctlEdit.GetWindowText(strWindowText);¤	}¤	else¤	{¤		return FALSE;¤	}¤¤	// See if string is numeric¤	if (!IsWindow(m_ctlEdit.GetSafeHwnd()))¤	{¤		return FALSE;¤	}¤¤	// Convert string¤	nReturn = atoi(strWindowText);¤¤	return TRUE;¤}¤¤BOOL COptionTreeSpinnerButton::GetEditDword(DWORD &dwReturn)¤{¤	// Declare variables¤	CString strWindowText;¤¤	// Set blank¤	dwReturn = 0;¤¤	// Get window text¤	if (IsWindow(m_ctlEdit.GetSafeHwnd()))¤	{¤		m_ctlEdit.GetWindowText(strWindowText);¤	}¤	else¤	{¤		return FALSE;¤	}¤¤	// See if string is numeric¤	if (!IsWindow(m_ctlEdit.GetSafeHwnd()))¤	{¤		return FALSE;¤	}¤¤	// Convert string¤	dwReturn = (DWORD) atoi(strWindowText);¤¤	return TRUE;¤}¤¤void COptionTreeSpinnerButton::OnDestroy() ¤{¤	// Destroy edit window¤	if (IsWindow(m_ctlEdit.GetSafeHwnd()))¤	{¤		m_ctlEdit.DestroyWindow();¤	}	¤	¤	CWnd::OnDestroy();	¤}¤¤void COptionTreeSpinnerButton::ResizeEdit()¤{¤	// Declare variables¤	CRect rcEdit;¤¤	// Calculate edit rectangle¤	GetClientRect(rcEdit);¤	rcEdit.right = (rcEdit.right - 2) - OT_SPINNER_WIDTH;¤¤	// Set window position¤	if (IsWindow(m_ctlEdit.GetSafeHwnd()))¤	{¤		m_ctlEdit.SetWindowPos(NULL, rcEdit.left, rcEdit.top, rcEdit.Width(), rcEdit.Height(), SWP_NOZORDER | SWP_SHOWWINDOW);¤	}¤}¤¤void COptionTreeSpinnerButton::OnMove(int x, int y) ¤{¤	// Resize edit¤	ResizeEdit();¤¤	CWnd::OnMove(x, y);	¤  // move buttons¤}¤¤void COptionTreeSpinnerButton::OnSize(UINT nType, int cx, int cy) ¤{	¤	// Resize edit¤	ResizeEdit();¤¤	CWnd::OnSize(nType, cx, cy);¤	¤}¤¤CEdit* COptionTreeSpinnerButton::GetEdit()¤{¤	// Return pointer¤	return &m_ctlEdit;¤}¤¤BOOL COptionTreeSpinnerButton::IsStringNumeric(CString strString)¤{¤	// See if string is numeric or not¤	if (strString.FindOneOf("1234567890") == -1 || strString.FindOneOf("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ`~[]{}-_=+\\|'/?>,<") != -1)¤	{¤		return FALSE;¤	}¤¤	return TRUE;¤}¤¤double COptionTreeSpinnerButton::_GetValue()¤{¤	// Declare variables¤	double dValue;¤¤	// Get double value¤	GetEditDouble(dValue);¤¤	return dValue;¤}¤¤LRESULT COptionTreeSpinnerButton::WM_ForceRedraw(WPARAM wParam, LPARAM lParam)¤{¤	// Force redraw¤	Invalidate();¤¤	// Update window¤	UpdateWindow();¤¤	return 0;¤}¤¤LRESULT COptionTreeSpinnerButton::WM_EditUp(WPARAM wParam, LPARAM lParam)¤{¤	// Update value¤	// -- Wrap around¤	if (GetOption(OT_EDIT_WRAPAROUND) == TRUE)¤	{¤		if ((_GetValue() + 1) > m_dRangeTop)¤		{¤			SetEditDouble(m_dRangeBottom);¤		}¤		else¤		{¤			SetEditDouble(_GetValue() + 1);¤		}¤¤	}¤	// -- No wrap around¤	else¤	{¤		if ((_GetValue() + 1) <= m_dRangeTop)¤		{¤			SetEditDouble(_GetValue() + 1);¤		}¤	}¤¤	// Force redraw¤	Invalidate();¤¤	// Update window¤	UpdateWindow();¤¤	return 0;¤}¤¤LRESULT COptionTreeSpinnerButton::WM_EditDown(WPARAM wParam, LPARAM lParam)¤{¤	// Update value¤	// -- Wrap around¤	if (GetOption(OT_EDIT_WRAPAROUND) == TRUE)¤	{¤		if ((_GetValue() - 1) < m_dRangeBottom)¤		{¤			SetEditDouble(m_dRangeTop);¤		}¤		else¤		{¤			SetEditDouble(_GetValue() - 1);¤		}¤	}¤	// -- No wrap around¤	else¤	{¤		if ((_GetValue() - 1) >= m_dRangeBottom)¤		{¤			SetEditDouble(_GetValue() - 1);¤		}¤	}¤¤	// Force redraw¤	Invalidate();¤¤	// Update window¤	UpdateWindow();¤¤	return 0;¤}¤¤CString COptionTreeSpinnerButton::GetEditText()¤{¤	// Declare variables¤	CString strText = _T("");¤¤	// Get edit text¤	if (IsWindow(m_ctlEdit.GetSafeHwnd()))¤	{¤		m_ctlEdit.GetWindowText(strText);¤	}¤¤	return strText;¤}¤¤void COptionTreeSpinnerButton::OnTimer(UINT nIDEvent) ¤{¤	// See what timer event¤	if (nIDEvent == OT_TIMER)¤	{¤		// -- See if first time¤		if (m_bFirstRepeat == TRUE)¤		{¤			KillTimer(OT_TIMER);¤			m_bFirstRepeat = FALSE;¤			SetTimer(OT_TIMER, m_nRepeatRate, NULL);¤		}¤¤		RepeatButton();¤	}¤	¤	CWnd::OnTimer(nIDEvent);¤}¤¤void COptionTreeSpinnerButton::RepeatButton()¤{¤	// Clear pressed¤	m_bBottomPressed = FALSE;¤	m_bTopPressed = FALSE;¤¤	// See if we have pressed a button¤	if (m_rcButtonTop.PtInRect(m_ptSavePoint) == TRUE)¤	{¤		// -- Mark bool¤		m_bTopPressed = TRUE;¤¤		// -- Update value¤		// -- -- Wrap around¤		if (GetOption(OT_EDIT_WRAPAROUND) == TRUE)¤		{¤			if ((_GetValue() + 1) > m_dRangeTop)¤			{¤				SetEditDouble(m_dRangeBottom);¤			}¤			else¤			{¤				SetEditDouble(_GetValue() + 1);¤			}¤¤		}¤		// -- -- No wrap around¤		else¤		{¤			if ((_GetValue() + 1) <= m_dRangeTop)¤			{¤				SetEditDouble(_GetValue() + 1);¤			}¤		}¤	}¤	else if (m_rcButtonBottom.PtInRect(m_ptSavePoint) == TRUE)¤	{¤		// -- Mark bool¤		m_bBottomPressed = TRUE;¤¤		// -- Update value¤		// -- -- Wrap around¤		if (GetOption(OT_EDIT_WRAPAROUND) == TRUE)¤		{¤			if ((_GetValue() - 1) < m_dRangeBottom)¤			{¤				SetEditDouble(m_dRangeTop);¤			}¤			else¤			{¤				SetEditDouble(_GetValue() - 1);¤			}¤		}¤		// -- -- No wrap around¤		else¤		{¤			if ((_GetValue() - 1) >= m_dRangeBottom)¤			{¤				SetEditDouble(_GetValue() - 1);¤			}¤		}¤	}¤¤	// Force redraw¤	Invalidate();¤¤	// Update window¤	UpdateWindow();¤}¤¤BOOL COptionTreeSpinnerButton::GetOption(DWORD dwOption)¤{¤	// Return option¤	return (m_dwOptions & dwOption) ? TRUE : FALSE;¤}¤¤void COptionTreeSpinnerButton::SetOption(DWORD dwOption, BOOL bSet)¤{¤	// Set option¤	if (bSet == TRUE)¤	{¤		m_dwOptions |= dwOption;¤	}¤	else¤	{¤		m_dwOptions &= ~dwOption;¤	}¤}¤//#UC END# *470B06290251*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B06290251_DESTR_BODY*"
		    value      	(value Text 
|//#UC START# *470B06290251_DESTR_BODY*¤	//#UC END# *470B06290251_DESTR_BODY*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B06290251_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B06290251_CUSTOM_INCLUDES*¤#include "shared/WinGUI/OptionTreeControls/OptionTreeDef.h"¤#include "shared/WinGUI/OptionTreeControls/OptionTreeRes.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTreeSpinnerEdit.h"¤¤namespace WinGUI {¤	class COptionTree;¤}¤//#UC END# *470B06290251_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B06290251*"
		    value      	(value Text 
|//#UC START# *470B06290251*¤// Construction¤public:¤	COptionTreeSpinnerButton();¤¤// Attributes¤public:¤¤// Operations¤public:¤¤// Overrides¤	// ClassWizard generated virtual function overrides¤	//{{AFX_VIRTUAL(COptionTreeSpinnerButton)¤	//}}AFX_VIRTUAL¤¤// Implementation¤public:¤	CString GetEditText();¤	BOOL IsStringNumeric(CString strString);¤	CEdit* GetEdit();¤	void ResizeEdit();¤	BOOL GetEditDword(DWORD &dwReturn);¤	BOOL GetEditInt(int &nReturn);¤	BOOL GetEditLong(long &lReturn);¤	BOOL GetEditDouble(double &dReturn);¤	BOOL GetEditFloat(float &fReturn);¤	void SetEditLong(long lValue);¤	void SetEditDword(DWORD dwValue);¤	void SetEditFloat(float fValue);¤	void SetEditInt(int nValue);¤	void SetEditDouble(double dValue);¤	void GetRange(double &dBottom, double &dTop);¤	void SetRange(double dBottom, double dTop);¤	void SetSpinnerOptionsOwner(COptionTree *otOption);¤¤	virtual BOOL GetOption(DWORD dwOption);¤	virtual void SetOption(DWORD dwOption, BOOL bSet);¤¤protected:¤	LRESULT WM_ForceRedraw(WPARAM wParam, LPARAM lParam);¤	LRESULT WM_EditUp(WPARAM wParam, LPARAM lParam);¤	LRESULT WM_EditDown(WPARAM wParam, LPARAM lParam);	¤	double _GetValue();¤	¤	// Generated message map functions¤protected:¤	void RepeatButton();¤	COptionTree *m_otSpinnerOption;¤	double m_dRangeTop;¤	double m_dRangeBottom;¤	CRect m_rcButtonTop;¤	CRect m_rcButtonBottom;¤	BOOL m_bBottomPressed;¤	BOOL m_bTopPressed;¤	CPoint m_ptSavePoint;¤	BOOL m_bFirstRepeat;¤	COptionTreeSpinnerEdit m_ctlEdit;¤	int m_nRepeatDelay;¤	int m_nRepeatRate;¤	DWORD m_dwOptions;¤	//{{AFX_MSG(COptionTreeSpinnerButton)¤	afx_msg BOOL OnEraseBkgnd(CDC* pDC);¤	afx_msg void OnPaint();¤	afx_msg void OnLButtonUp(UINT nFlags, CPoint point);¤	afx_msg void OnLButtonDown(UINT nFlags, CPoint point);¤	afx_msg int OnCreate(LPCREATESTRUCT lpCreateStruct);¤	afx_msg void OnDestroy();¤	afx_msg void OnMove(int x, int y);¤	afx_msg void OnSize(UINT nType, int cx, int cy);¤	afx_msg void OnTimer(UINT nIDEvent);¤	//}}AFX_MSG¤¤//#UC END# *470B06290251*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"WikiPageID (wiki)"
		    value      	(value Text 
|Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeSpinnerButton|470B06290251
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B06290251_MESSAGE_MAP*"
		    value      	(value Text 
|//#UC START# *470B06290251_MESSAGE_MAP*¤	ON_WM_ERASEBKGND()¤	ON_WM_PAINT()¤	ON_WM_LBUTTONUP()¤	ON_WM_LBUTTONDOWN()¤	ON_WM_CREATE()¤	ON_WM_DESTROY()¤	ON_WM_MOVE()¤	ON_WM_SIZE()¤	ON_MESSAGE(OT_NOTIFY_FORCEREDRAW, WM_ForceRedraw)¤	ON_MESSAGE(OT_NOTIFY_UP, WM_EditUp)¤	ON_MESSAGE(OT_NOTIFY_DOWN, WM_EditDown)	¤	ON_WM_TIMER()¤	//#UC END# *470B06290251_MESSAGE_MAP*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (h)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (wiki)"
		    value      	"wiki")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (cpp)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ElementCreationOrder"
		    value      	"16663751698"))
	    quid       	"470B06290251"
	    documentation 	"spinner button"
	    stereotype 	"GuiControl"
	    language   	"MDA Generator")
	(object Class "COptionTreeSpinnerEdit"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"AbstarctOperation"
		    value      	"regular")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsNative"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need assign op"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need copy ctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need ref count"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need unsorted less"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"debug log"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"local supervisor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need UC"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need dctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need objcounter"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"no base class"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"non virtual base"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"singleton"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (h)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeSpinnerEdit.h")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (cpp)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeSpinnerEdit.cpp")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B066600FA_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B066600FA_CUSTOM_INCLUDES*¤#include "shared/Core/fix/win_afx.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTreeSpinnerButton.h"¤//#UC END# *470B066600FA_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B066600FA*"
		    value      	(value Text 
|//#UC START# *470B066600FA*¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeSpinnerEdit¤¤COptionTreeSpinnerEdit::COptionTreeSpinnerEdit()¤{¤	// Initialize variables¤	m_otSpinnerButton = NULL;¤}¤¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeSpinnerEdit message handlers¤¤void COptionTreeSpinnerEdit::SetOwnerSpinner(COptionTreeSpinnerButton *otSpinnerButton)¤{¤	// Save pointer¤	m_otSpinnerButton = otSpinnerButton;¤}¤¤void COptionTreeSpinnerEdit::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags) ¤{¤	// Find what key was presed¤	if (nChar == VK_UP)¤	{¤		m_otSpinnerButton->SendMessage(OT_NOTIFY_UP, 0, 0);¤	}¤	else if (nChar == VK_DOWN)¤	{¤		m_otSpinnerButton->SendMessage(OT_NOTIFY_DOWN, 0, 0);¤	}¤  else if(nChar == VK_RETURN || nChar == VK_ESCAPE)¤  {¤   // ::PostMessage(m_otSpinnerButton->GetSafeHwnd(), OT_NOTIFY_COMMITCHANGES, 1, NULL);¤  }¤	CEdit::OnKeyDown(nChar, nRepCnt, nFlags);¤}¤¤BOOL COptionTreeSpinnerEdit::OnCommand(WPARAM wParam, LPARAM lParam) ¤{¤	// User edit¤	if(m_otSpinnerButton != NULL)¤	{¤		// -- No user edit¤		if (m_otSpinnerButton->GetOption(OT_EDIT_USEREDIT) == FALSE)¤		{¤			// -- -- No paste or cut¤			if (LOWORD(wParam) == WM_PASTE || LOWORD(wParam) == WM_CUT)¤			{¤				return FALSE;¤			}¤		}¤		// -- User edit¤		else¤		{¤			switch (LOWORD(wParam))¤			{¤				case EM_UNDO:¤				case WM_CUT:¤				case WM_COPY:¤				case WM_CLEAR:¤				case WM_PASTE:¤					return (BOOL) SendMessage(LOWORD(wParam));¤¤				case OT_MES_NSELECTALL:¤					return (BOOL) SendMessage(EM_SETSEL, 0, -1);¤¤				default:¤					return CEdit::OnCommand(wParam, lParam);¤			}¤		}¤	}¤¤	return FALSE;¤}¤¤int COptionTreeSpinnerEdit::OnCreate(LPCREATESTRUCT lpCreateStruct) ¤{¤	// Create edit¤	if (CEdit::OnCreate(lpCreateStruct) == -1)¤	{¤		return -1;¤	}¤	¤	¤	return 0;¤}¤¤void COptionTreeSpinnerEdit::OnContextMenu(CWnd* pWnd, CPoint point) ¤{¤    // Declare variables¤	CMenu mMenu;¤	BOOL bReadOnly;¤	DWORD dwFlags;¤	int nSelStart, nSelEnd;¤	int nLen;¤¤	// Make sure we have options¤	if (m_otSpinnerButton == NULL)¤	{¤		return;¤	}¤¤    // Crete menu¤	mMenu.CreatePopupMenu();¤¤    // Get read only¤	bReadOnly = GetStyle() & ES_READONLY;¤	¤	// Get selection¤	GetSel(nSelStart, nSelEnd);¤¤	// Get window length¤	nLen = GetWindowTextLength();¤¤	// Insert Undo¤	if (m_otSpinnerButton->GetOption(OT_EDIT_USEREDIT) == TRUE)¤	{¤		dwFlags = CanUndo() && !bReadOnly ? 0 : MF_GRAYED | MF_DISABLED;¤	}¤	else¤	{¤		dwFlags = MF_GRAYED | MF_DISABLED;¤	}¤    mMenu.InsertMenu(0, MF_BYPOSITION | dwFlags, EM_UNDO, OT_MES_UNDO);¤	¤	// Insert seperator¤    mMenu.InsertMenu(1, MF_BYPOSITION | MF_SEPARATOR);¤¤    // Insert copy¤	if (nSelStart == nSelEnd)¤	{¤		dwFlags = MF_GRAYED | MF_DISABLED;¤	}¤	else¤	{¤		dwFlags = 0;¤	}¤    mMenu.InsertMenu(2, MF_BYPOSITION | dwFlags, WM_COPY, OT_MES_COPY);¤¤	// Insert cut and clear¤	if (m_otSpinnerButton->GetOption(OT_EDIT_USEREDIT) == TRUE)¤	{¤		if (nSelStart == nSelEnd || bReadOnly == TRUE)¤		{¤			dwFlags = MF_GRAYED | MF_DISABLED;¤		}¤		else¤		{¤			dwFlags = 0;¤		}¤	}¤	else¤	{¤		dwFlags = MF_GRAYED | MF_DISABLED;¤	}¤    mMenu.InsertMenu(2, MF_BYPOSITION | dwFlags, WM_CUT, OT_MES_CUT);¤    mMenu.InsertMenu(4, MF_BYPOSITION | dwFlags, WM_CLEAR, OT_MES_DELETE);¤¤    // Insert paste¤	if (m_otSpinnerButton->GetOption(OT_EDIT_USEREDIT) == TRUE)¤	{¤		if (IsClipboardFormatAvailable(CF_TEXT) == FALSE || bReadOnly == TRUE)¤		{¤			dwFlags = MF_GRAYED | MF_DISABLED;¤		}¤		else¤		{¤			dwFlags = 0;¤		}¤	}¤	else¤	{¤		dwFlags = MF_GRAYED | MF_DISABLED;¤	}¤    mMenu.InsertMenu(4, MF_BYPOSITION | dwFlags, WM_PASTE, OT_MES_PASTE);¤¤	// Insert seperator¤    mMenu.InsertMenu(6, MF_BYPOSITION | MF_SEPARATOR);¤¤    // Insert select all¤    mMenu.InsertMenu(7, MF_BYPOSITION | dwFlags, OT_MES_NSELECTALL, OT_MES_SELECTALL);¤¤    // Show menu¤	mMenu.TrackPopupMenu(TPM_LEFTALIGN | TPM_LEFTBUTTON | TPM_RIGHTBUTTON, point.x, point.y, this);	¤}¤¤void COptionTreeSpinnerEdit::OnKillFocus(CWnd* pNewWnd) ¤{¤	// Make sure we have options¤	if (m_otSpinnerButton != NULL)¤	{¤		// -- If new focus is not parent then sent message to item to commit¤		if (pNewWnd->GetSafeHwnd() != m_otSpinnerButton->GetSafeHwnd())¤		{¤			::PostMessage(m_otSpinnerButton->GetSafeHwnd(), OT_NOTIFY_COMMITCHANGES, NULL, NULL);¤		}			¤	}¤	¤	CEdit::OnKillFocus(pNewWnd);	¤}¤¤void COptionTreeSpinnerEdit::OnSetFocus(CWnd* pOldWnd) ¤{¤	CEdit::OnSetFocus(pOldWnd);	¤}¤¤void COptionTreeSpinnerEdit::OnTextChange() ¤{¤	// Force spinner button redraw¤	::PostMessage(m_otSpinnerButton->GetSafeHwnd(), OT_NOTIFY_FORCEREDRAW, NULL, NULL);	¤  ::PostMessage(m_otSpinnerButton->GetSafeHwnd(), OT_TEXTCHANGED, 1, NULL);	 ¤}¤¤BOOL COptionTreeSpinnerEdit::PreTranslateMessage(MSG* pMsg) ¤{¤  if (pMsg->message == WM_KEYDOWN && (pMsg->wParam == VK_RETURN || pMsg->wParam == VK_ESCAPE))¤  {¤		::PostMessage(m_otSpinnerButton->GetSafeHwnd(), OT_NOTIFY_COMMITCHANGES, NULL, NULL);	¤    return TRUE;¤  }¤	return CEdit::PreTranslateMessage(pMsg);¤}¤¤void COptionTreeSpinnerEdit::OnChar(UINT nChar, UINT nRepCnt, UINT nFlags) ¤{¤	// Disallow user edit¤	if(m_otSpinnerButton != NULL)¤	{¤		// -- No user edit¤		if (m_otSpinnerButton->GetOption(OT_EDIT_USEREDIT) == FALSE)¤		{¤			return;¤		}¤	}¤¤	CEdit::OnChar(nChar, nRepCnt, nFlags);¤}¤¤//#UC END# *470B066600FA*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B066600FA_DESTR_BODY*"
		    value      	(value Text 
|//#UC START# *470B066600FA_DESTR_BODY*¤	//#UC END# *470B066600FA_DESTR_BODY*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B066600FA_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B066600FA_CUSTOM_INCLUDES*¤#include "shared/WinGUI/OptionTreeControls/OptionTreeDef.h"¤#include "shared/WinGUI/OptionTreeControls/OptionTreeRes.h"¤¤namespace WinGUI {¤	class COptionTreeSpinnerButton;¤}¤//#UC END# *470B066600FA_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B066600FA*"
		    value      	(value Text 
|//#UC START# *470B066600FA*¤// Construction¤public:¤	COptionTreeSpinnerEdit();¤¤// Attributes¤public:¤¤// Operations¤public:¤¤// Overrides¤	// ClassWizard generated virtual function overrides¤	//{{AFX_VIRTUAL(COptionTreeSpinnerEdit)¤	public:¤	virtual BOOL PreTranslateMessage(MSG* pMsg);¤	protected:¤	virtual BOOL OnCommand(WPARAM wParam, LPARAM lParam);¤	//}}AFX_VIRTUAL¤¤// Implementation¤public:¤	void UpdateMenu();¤	void SetOwnerSpinner(COptionTreeSpinnerButton *otSpinnerButton);¤¤	// Generated message map functions¤protected:¤	COptionTreeSpinnerButton *m_otSpinnerButton;¤	//{{AFX_MSG(COptionTreeSpinnerEdit)¤	afx_msg void OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags);¤	afx_msg int OnCreate(LPCREATESTRUCT lpCreateStruct);¤	afx_msg void OnContextMenu(CWnd* pWnd, CPoint point);¤	afx_msg void OnKillFocus(CWnd* pNewWnd);¤	afx_msg void OnSetFocus(CWnd* pOldWnd);¤	afx_msg void OnTextChange();¤	afx_msg void OnChar(UINT nChar, UINT nRepCnt, UINT nFlags);¤	//}}AFX_MSG¤¤//#UC END# *470B066600FA*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"WikiPageID (wiki)"
		    value      	(value Text 
|Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeSpinnerEdit|470B066600FA
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B066600FA_MESSAGE_MAP*"
		    value      	(value Text 
|//#UC START# *470B066600FA_MESSAGE_MAP*¤	ON_WM_KEYDOWN()¤	ON_WM_CREATE()¤	ON_WM_CONTEXTMENU()¤	ON_WM_KILLFOCUS()¤	ON_WM_SETFOCUS()¤	ON_CONTROL_REFLECT(EN_CHANGE, OnTextChange)¤	ON_WM_CHAR()¤	//#UC END# *470B066600FA_MESSAGE_MAP*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (wiki)"
		    value      	"wiki")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (h)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (cpp)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ElementCreationOrder"
		    value      	"16659831885"))
	    quid       	"470B066600FA"
	    documentation 	"вполе ввода с spinner"
	    stereotype 	"GuiControl"
	    superclasses 	(list inheritance_relationship_list
		(object Inheritance_Relationship
		    quid       	"470B06880177"
		    supplier   	"Logical View::external::MFCTypes::Controls::CEdit"
		    quidu      	"4655226B0177"))
	    language   	"MDA Generator")
	(object Class "COptionTreeRadioButton"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"AbstarctOperation"
		    value      	"regular")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsNative"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (cpp)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeRadioButton.cpp")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (h)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeRadioButton.h")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B06DC0177_DESTR_BODY*"
		    value      	(value Text 
|//#UC START# *470B06DC0177_DESTR_BODY*¤	// Delete all nodes¤	Node_DeleteAll();¤	//#UC END# *470B06DC0177_DESTR_BODY*
		    ))
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need assign op"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need copy ctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need ref count"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need unsorted less"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"debug log"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"local supervisor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need UC"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need dctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need objcounter"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"no base class"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"non virtual base"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"singleton"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B06DC0177_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B06DC0177_CUSTOM_INCLUDES*¤#include "shared/Core/fix/win_afx.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTree.h"¤//#UC END# *470B06DC0177_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B06DC0177*"
		    value      	(value Text 
|//#UC START# *470B06DC0177*¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeRadioButton¤¤COptionTreeRadioButton::COptionTreeRadioButton()¤{¤	// Initialize variables¤	m_nAllNodes = NULL;¤	m_otOption = NULL;¤}¤¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeRadioButton message handlers¤¤void COptionTreeRadioButton::Node_Insert(CString strText, BOOL bChecked)¤{¤	// Declare variables¤	OT_RADIO_NODE *NewNode = new OT_RADIO_NODE;¤¤	// Set up the New Node structure¤	NewNode->m_bChecked = bChecked;¤	NewNode->m_strText = strText;¤	NewNode->m_rcHitRect = CRect(0, 0, 0, 0);¤	NewNode->m_nNextNode = NULL;¤¤	// Add new node to list¤	// -- Do have any other node?¤	if (m_nAllNodes == NULL)¤	{¤		m_nAllNodes = NewNode;¤		return;¤	}¤¤	// -- Find the end of the list to add the new node to¤	OT_RADIO_NODE *curr = m_nAllNodes;¤	OT_RADIO_NODE *last = NULL;¤	while (curr != NULL)¤	{¤		// -- -- Save this node¤		last = curr;¤¤		// -- -- Follow the link to the next node¤		curr = curr->m_nNextNode;¤	}¤¤	// -- Link the new nod to the place we found¤	last->m_nNextNode = NewNode;¤}¤¤void COptionTreeRadioButton::Node_DeleteAll()¤{¤	// Do have any other results¤	if (m_nAllNodes == NULL)¤	{¤		return;¤	}¤¤	¤	// Declare variables¤	OT_RADIO_NODE *curr = m_nAllNodes;¤	OT_RADIO_NODE *last = NULL;¤	¤	// Check to see if we have only 1¤	if (m_nAllNodes->m_nNextNode == NULL)¤	{¤		// -- Delete m_AllResults (head)¤		curr = m_nAllNodes;¤		delete curr;¤		m_nAllNodes = NULL;¤¤		return;¤	}¤	¤¤	// Find the end of the list to add the new result to¤	while (curr->m_nNextNode != NULL)¤	{¤		// -- Save this node¤		last = curr;¤¤		// -- Follow the link to the next node¤		curr = curr->m_nNextNode;¤	}¤¤	// Delete this node and set last->m_nNextNode to NULL¤	delete curr;¤	last->m_nNextNode = NULL;¤¤	// Check to see if we are at second to beginning¤	if (m_nAllNodes->m_nNextNode == last)¤	{¤		// -- Delete last (which is second to head)¤		delete last;¤¤		// -- Delete m_AllResults (head)¤		curr = m_nAllNodes;¤		delete curr;¤		m_nAllNodes = NULL;¤¤	}¤¤	// Call this again¤	Node_DeleteAll();¤}¤¤OT_RADIO_NODE * COptionTreeRadioButton::Node_FindNode(int nIndex)¤{¤	// Declare variables¤	int i = 0;¤¤	// Cycle through all of the nodes¤	OT_RADIO_NODE *curr = m_nAllNodes;¤	while (curr != NULL)¤	{		¤		// -- See if this is us¤		if (i == nIndex)¤		{			¤			return curr;¤		}¤¤		// -- Follow the link to the next node¤		curr = curr->m_nNextNode;¤¤		// -- Increase i¤		i++;¤	}¤¤	return NULL;¤}¤¤OT_RADIO_NODE *COptionTreeRadioButton::Node_FindNode(CString strText)¤{¤	// Cycle through all of the nodes¤	OT_RADIO_NODE *curr = m_nAllNodes;¤	while (curr != NULL)¤	{		¤		// -- See if this is us¤		if (curr->m_strText == strText)¤		{			¤			return curr;¤		}¤¤		// -- Follow the link to the next node¤		curr = curr->m_nNextNode;¤	}¤¤	return NULL;¤}¤¤BOOL COptionTreeRadioButton::OnEraseBkgnd(CDC* pDC) ¤{¤	// Naa, we like flicker free better¤	return FALSE;¤}¤¤void COptionTreeRadioButton::OnPaint() ¤{¤	// Make sure options aren't NULL¤	if (m_otOption == NULL)¤	{¤		return;¤	}¤¤	// Declare variables¤	CPaintDC dc(this);¤	CDC* pDCMem = new CDC;¤	CBitmap bpMem;¤	CBitmap *bmOld;¤	HGDIOBJ hOldBrush;¤	int nOldBack;¤	CRect rcText, rcRadio, rcClient;¤	HGDIOBJ hOld;¤	OT_RADIO_NODE *nNode = NULL;¤	int nIndex = 0;¤	long lLastRadio = 0;¤	COLORREF crOld;¤¤	// Get client rectangle¤	GetClientRect(rcClient);¤¤	// Create DC¤	pDCMem->CreateCompatibleDC(&dc);¤	¤	// Create bitmap¤	bpMem.CreateCompatibleBitmap(&dc, rcClient.Width(), rcClient.Height());¤¤	// Select bitmap¤	bmOld = pDCMem->SelectObject(&bpMem);¤¤	// Set background mode¤	nOldBack = pDCMem->SetBkMode(TRANSPARENT);¤¤	// Set text color¤	crOld = pDCMem->SetTextColor(GetSysColor(COLOR_WINDOWTEXT));¤¤	// Select font¤	hOld = pDCMem->SelectObject(m_otOption->GetNormalFont());¤¤	// Draw control background¤	if (m_otOption->IsWindowEnabled() == FALSE)¤	{¤		hOldBrush = pDCMem->SelectObject(GetSysColorBrush(COLOR_BTNFACE));¤	}¤	else¤	{¤		hOldBrush = pDCMem->SelectObject(GetSysColorBrush(COLOR_WINDOW));¤	}¤	pDCMem->PatBlt(rcClient.left, rcClient.top, rcClient.Width(), rcClient.Height(), PATCOPY);¤¤	// Calculate radio rect¤	rcRadio.left = rcClient.left;¤	rcRadio.right = rcClient.left + (long) OT_RADIO_SIZE;¤¤	// Go through and draw all nodes¤	nNode = Node_FindNode(nIndex);¤	while (nNode != NULL)¤	{¤		// -- Calculate radio rect¤		rcRadio.top = lLastRadio + OT_RADIO_VSPACE;¤		rcRadio.bottom = rcRadio.top + (long) OT_RADIO_SIZE;¤¤		// -- Calculate text rect¤		rcText.top = lLastRadio + OT_RADIO_VSPACE;¤		rcText.bottom = rcRadio.top + (long) OT_RADIO_SIZE;¤		rcText.left = rcRadio.right + ATTRIB_OFFSET;¤		rcText.right = rcClient.right;¤¤		// -- Save last radio¤		lLastRadio = rcRadio.bottom;¤¤		// -- Draw the radio¤		if (nNode->m_bChecked == TRUE)¤		{¤			pDCMem->DrawFrameControl(&rcRadio, DFC_BUTTON, DFCS_BUTTONRADIO | DFCS_CHECKED);¤		}¤		else¤		{¤			pDCMem->DrawFrameControl(&rcRadio, DFC_BUTTON, DFCS_BUTTONRADIO);¤		}¤¤		// -- Draw text¤		pDCMem->DrawText(nNode->m_strText, rcText, DT_SINGLELINE | DT_VCENTER);¤		pDCMem->DrawText(nNode->m_strText, rcText, DT_SINGLELINE | DT_VCENTER | DT_CALCRECT);¤¤		// -- Set hit test rect¤		nNode->m_rcHitRect.left = rcRadio.left;¤		nNode->m_rcHitRect.top = rcRadio.top;¤		nNode->m_rcHitRect.bottom = rcRadio.bottom;¤		nNode->m_rcHitRect.right = rcText.right;¤¤		// -- Increase index¤		nIndex++;¤¤		// -- Get next node¤		nNode = Node_FindNode(nIndex);¤	}¤¤	// Copy to screen¤	dc.BitBlt(0, 0, rcClient.Width(), rcClient.Height(), pDCMem, 0, 0, SRCCOPY);¤¤	// Restore GDI ojects¤	pDCMem->SelectObject(bmOld);¤	pDCMem->SelectObject(hOldBrush);¤	pDCMem->SetBkMode(nOldBack);¤	pDCMem->SelectObject(hOld);¤	pDCMem->SetTextColor(crOld);¤¤	// Delete objects¤	if (pDCMem->GetSafeHdc() != NULL)¤	{¤		pDCMem->DeleteDC();¤	}¤	delete pDCMem;¤	if (bpMem.GetSafeHandle() != NULL)¤	{¤		bpMem.DeleteObject();¤	}¤¤}¤¤void COptionTreeRadioButton::SetRadioOptionsOwner(COptionTree *otOption)¤{¤	// Save pointer¤	m_otOption = otOption;¤}¤¤void COptionTreeRadioButton::Node_UnCheckAll()¤{¤	// Cycle through all of the nodes¤	OT_RADIO_NODE *curr = m_nAllNodes;¤	while (curr != NULL)¤	{¤		// -- Un Check¤		curr->m_bChecked = FALSE;¤¤		// -- Follow the link to the next node¤		curr = curr->m_nNextNode;¤	}¤}¤¤void COptionTreeRadioButton::OnLButtonUp(UINT nFlags, CPoint point) ¤{¤	// Run a hit test on all radios¤	OT_RADIO_NODE *curr = m_nAllNodes;¤	while (curr != NULL)¤	{¤		// -- See if checked¤		if (curr->m_rcHitRect.PtInRect(point) == TRUE)¤		{¤			// -- -- Uncheck all¤			Node_UnCheckAll();¤¤			// -- -- Check this radio¤			curr->m_bChecked = TRUE;¤¤			// -- -- Force redaw¤			Invalidate();¤¤			// -- -- Update window¤			UpdateWindow();¤      ¤      // give dependents chance sending notification¤      HasChanged();¤			break;¤		}¤¤		// -- Follow the link to the next node¤		curr = curr->m_nNextNode;¤	}¤	¤	CWnd::OnLButtonUp(nFlags, point);¤}¤¤void COptionTreeRadioButton::OnMove(int x, int y) ¤{¤	CWnd::OnMove(x, y);¤  // move buttons¤}¤¤void COptionTreeRadioButton::OnSize(UINT nType, int cx, int cy) ¤{¤	CWnd::OnSize(nType, cx, cy);¤}¤¤int COptionTreeRadioButton::Node_GetChecked()¤{¤	// Declare variables¤	int i = 0;¤¤	// Cycle through all of the nodes¤	OT_RADIO_NODE *curr = m_nAllNodes;¤	while (curr != NULL)¤	{		¤		// -- See if this is us¤		if (curr->m_bChecked == TRUE)¤		{			¤			return i;¤		}¤¤		// -- Follow the link to the next node¤		curr = curr->m_nNextNode;¤¤		// -- Increase i¤		i++;¤	}¤¤	return -1;¤}¤¤//#UC END# *470B06DC0177*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B06DC0177_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B06DC0177_CUSTOM_INCLUDES*¤#include "shared/WinGUI/OptionTreeControls/OptionTreeDef.h"¤#include "shared/WinGUI/OptionTreeControls/OptionTreeRes.h"¤¤// Radio Button Node¤struct OT_RADIO_NODE¤{¤	CString m_strText;¤¤	BOOL m_bChecked;¤¤	CRect m_rcHitRect;¤¤	OT_RADIO_NODE *m_nNextNode;¤};¤//#UC END# *470B06DC0177_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B06DC0177*"
		    value      	(value Text 
|//#UC START# *470B06DC0177*¤// Construction¤public:¤	COptionTreeRadioButton();¤¤// Attributes¤public:¤¤// Operations¤public:¤¤// Overrides¤	// ClassWizard generated virtual function overrides¤	//{{AFX_VIRTUAL(COptionTreeRadioButton)¤	//}}AFX_VIRTUAL¤¤// Implementation¤public:¤	int Node_GetChecked();¤	void Node_UnCheckAll();¤	void SetRadioOptionsOwner(COptionTree *otOption);¤	OT_RADIO_NODE *Node_FindNode(CString strText);¤	OT_RADIO_NODE *Node_FindNode(int nIndex);¤	void Node_DeleteAll();¤	void Node_Insert(CString strText, BOOL bChecked);¤	inline virtual void HasChanged(void){;}¤protected:¤	¤¤	// Generated message map functions¤protected:¤	OT_RADIO_NODE *m_nAllNodes;¤//	COptionTree *m_otOption;¤	//{{AFX_MSG(COptionTreeRadioButton)¤	afx_msg BOOL OnEraseBkgnd(CDC* pDC);¤	afx_msg void OnPaint();¤	afx_msg void OnLButtonUp(UINT nFlags, CPoint point);¤	afx_msg void OnMove(int x, int y);¤	afx_msg void OnSize(UINT nType, int cx, int cy);¤	//}}AFX_MSG¤¤//#UC END# *470B06DC0177*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"WikiPageID (wiki)"
		    value      	(value Text 
|Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeRadioButton|470B06DC0177
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B06DC0177_MESSAGE_MAP*"
		    value      	(value Text 
|//#UC START# *470B06DC0177_MESSAGE_MAP*¤	ON_WM_ERASEBKGND()¤	ON_WM_PAINT()¤	ON_WM_LBUTTONUP()¤	ON_WM_MOVE()¤	ON_WM_SIZE()¤	//#UC END# *470B06DC0177_MESSAGE_MAP*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (wiki)"
		    value      	"wiki")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (h)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (cpp)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ElementCreationOrder"
		    value      	"16663754146"))
	    quid       	"470B06DC0177"
	    documentation 	"кнопка-переключатель"
	    stereotype 	"GuiControl"
	    superclasses 	(list inheritance_relationship_list
		(object Inheritance_Relationship
		    quid       	"470B070B0148"
		    supplier   	"Logical View::shared::WinGUI::OptionTreeControls::COptionTreeItem"
		    quidu      	"470AFC61008C"))
	    language   	"MDA Generator")
	(object Class "COptionTreeItemStatic"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"AbstarctOperation"
		    value      	"regular")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsNative"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need assign op"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need copy ctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need ref count"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need unsorted less"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"debug log"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"local supervisor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need UC"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need dctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need objcounter"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"no base class"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"non virtual base"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"singleton"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (cpp)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeItemStatic.cpp")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (h)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeItemStatic.h")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B0C3F0167_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B0C3F0167_CUSTOM_INCLUDES*¤#include "shared/Core/fix/win_afx.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTree.h"¤//#UC END# *470B0C3F0167_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B0C3F0167*"
		    value      	(value Text 
|//#UC START# *470B0C3F0167*¤//////////////////////////////////////////////////////////////////////¤// Construction/Destruction¤//////////////////////////////////////////////////////////////////////¤¤COptionTreeItemStatic::COptionTreeItemStatic()¤{¤	// Initialize variables¤	m_strStaticText = _T("");¤	m_dwOptions = NULL;¤¤	// Set item type¤	SetItemType(OT_ITEM_STATIC);¤   m_hIcon = NULL; // hb¤   m_pBitmap = NULL;¤}¤¤void COptionTreeItemStatic::DrawAttribute(CDC *pDC, const RECT &rcRect)¤{¤	// Make sure option is not NULL¤	if (m_otOption == NULL)¤	{¤		return;¤	}¤¤	// Declare variables¤	HGDIOBJ hOld;¤	COLORREF crOld;¤	int nOldBack;¤	CRect rcText;¤	COLORREF crOldBack;¤¤	// Select font¤	hOld = pDC->SelectObject(m_otOption->GetNormalFont());¤	¤	// Set text color¤	if (IsReadOnly() == TRUE || m_otOption->IsWindowEnabled() == FALSE)¤	{¤		crOld = pDC->SetTextColor(GetSysColor(COLOR_GRAYTEXT));¤	}¤	else¤	{¤		crOld = pDC->SetTextColor(GetTextColor());¤	}¤¤	// Set background mode¤	nOldBack = pDC->SetBkMode(TRANSPARENT);¤¤	// Set background color¤	crOldBack = pDC->SetBkColor(GetBackgroundColor());	¤¤	// Get rectangle¤	rcText = rcRect;¤   // hb - if we have a valid icon handle - draw the icon¤   if (m_hIcon != NULL)¤   {¤      ICONINFO info;¤      if (::GetIconInfo (m_hIcon, &info))¤      {¤         pDC->DrawIcon(rcText.left, rcText.top, m_hIcon);¤         rcText.left += info.xHotspot * 5;¤      }¤   }¤   // hb - if we have a bitmap - draw it¤   if (m_pBitmap != NULL)¤   {¤	   CDC dcImage;¤	   if (dcImage.CreateCompatibleDC(pDC))¤      {¤	      BITMAP bm;¤	      m_pBitmap->GetBitmap(&bm);¤	      // draw bitmap¤         int dy = (rcText.Height() - bm.bmHeight) / 2;¤         if (dy < 0) ¤            dy = 0;¤	      CBitmap* pOldBitmap = dcImage.SelectObject(m_pBitmap);¤	      pDC->BitBlt(rcText.left + ATTRIB_OFFSET, rcText.top+dy, bm.bmWidth, bm.bmHeight, &dcImage, 0, 0, SRCCOPY);¤	      dcImage.SelectObject(pOldBitmap);¤         rcText.left += ATTRIB_OFFSET + bm.bmWidth + ATTRIB_OFFSET;¤      }¤   }¤	// Draw text¤	pDC->DrawText(m_strStaticText, rcText, DT_SINGLELINE | DT_VCENTER);¤¤	// Restore GDI ojects¤	pDC->SelectObject(hOld);¤	pDC->SetTextColor(crOld);¤	pDC->SetBkMode(nOldBack);¤	pDC->SetBkColor(crOldBack);¤}	¤¤CString COptionTreeItemStatic::GetStaticText()¤{¤	// Return text¤	return m_strStaticText;¤}¤¤void COptionTreeItemStatic::SetStaticText(CString strStaticText)¤{¤	// Set variables¤	m_strStaticText = strStaticText;¤}¤¤void COptionTreeItemStatic::CleanDestroyWindow()¤{¤	// Do nothing here¤}¤¤void COptionTreeItemStatic::OnCommit()¤{¤	// Do nothing here¤}¤¤void COptionTreeItemStatic::OnRefresh()¤{¤	// Do nothing here¤}¤¤void COptionTreeItemStatic::OnMove()¤{¤}¤¤void COptionTreeItemStatic::OnActivate()¤{¤	// Do nothing here¤}¤¤void COptionTreeItemStatic::OnDeSelect()¤{¤	// Do nothing here¤}¤¤void COptionTreeItemStatic::OnSelect()¤{¤	// Do nothing here¤}¤¤¤BOOL COptionTreeItemStatic::CreateStaticItem(DWORD dwOptions)¤{¤	// Make sure options is not NULL¤	if (m_otOption == NULL)¤	{¤		return FALSE;¤	}¤¤	// Save options¤	m_dwOptions = dwOptions;¤¤	// Always return TRUE¤	return TRUE;¤}¤¤CString COptionTreeItemStatic::GetAttributeText(void)¤{¤  return this->GetStaticText();¤}¤¤//#UC END# *470B0C3F0167*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B0C3F0167_DESTR_BODY*"
		    value      	(value Text 
|//#UC START# *470B0C3F0167_DESTR_BODY*¤	if (m_pBitmap != NULL)¤      delete m_pBitmap;¤	m_pBitmap = NULL;¤	//#UC END# *470B0C3F0167_DESTR_BODY*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B0C3F0167_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B0C3F0167_CUSTOM_INCLUDES*¤#include "shared/WinGUI/OptionTreeControls/OptionTreeDef.h"¤#include "shared/WinGUI/OptionTreeControls/OptionTreeRes.h"¤//#UC END# *470B0C3F0167_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B0C3F0167*"
		    value      	(value Text 
|//#UC START# *470B0C3F0167*¤public:¤	BOOL CreateStaticItem(DWORD dwOptions);¤	virtual void OnMove();¤	virtual void OnRefresh();¤	virtual void OnCommit();¤	virtual void OnActivate();¤	virtual void CleanDestroyWindow();¤	virtual void OnDeSelect();¤	virtual void OnSelect();¤	virtual void DrawAttribute(CDC *pDC, const RECT &rcRect);¤	virtual void OnShow(BOOL bShow){;}¤	virtual CString GetAttributeText(void);¤¤	void SetStaticText(CString strStaticText);¤	CString GetStaticText();¤	COptionTreeItemStatic();¤	virtual void AddIcon (HICON hIcon){m_hIcon = hIcon;}; // hb - macro to add icon¤	virtual void AddBitmap (CBitmap *pBitmap){m_pBitmap = pBitmap;}; // hb - macro to add icon¤¤protected:¤	CString m_strStaticText;¤	HICON m_hIcon; // hb - added an icon ¤	CBitmap *m_pBitmap; // hb - added a bitmap¤//#UC END# *470B0C3F0167*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"WikiPageID (wiki)"
		    value      	(value Text 
|Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemStatic|470B0C3F0167
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (wiki)"
		    value      	"wiki")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (h)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (cpp)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ElementCreationOrder"
		    value      	"16659832937"))
	    quid       	"470B0C3F0167"
	    documentation 	"static"
	    stereotype 	"SimpleClass"
	    superclasses 	(list inheritance_relationship_list
		(object Inheritance_Relationship
		    quid       	"470B0C6A0261"
		    supplier   	"Logical View::shared::WinGUI::OptionTreeControls::COptionTreeItem"
		    quidu      	"470AFC61008C"))
	    language   	"MDA Generator")
	(object Class "COptionTreeItemSpinner"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"AbstarctOperation"
		    value      	"regular")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsNative"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need assign op"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need copy ctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need ref count"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need unsorted less"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"debug log"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"local supervisor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need UC"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need dctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need objcounter"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"no base class"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"non virtual base"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"singleton"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (cpp)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeItemSpinner.cpp")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (h)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeItemSpinner.h")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B0CA60271_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B0CA60271_CUSTOM_INCLUDES*¤#include "shared/Core/fix/win_afx.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTree.h"¤//#UC END# *470B0CA60271_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B0CA60271*"
		    value      	(value Text 
|//#UC START# *470B0CA60271*¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeItemSpinner¤¤COptionTreeItemSpinner::COptionTreeItemSpinner()¤{¤	// Initialize variables¤	m_bFocus = FALSE;¤¤	// Set item type¤	SetItemType(OT_ITEM_SPINNER);¤¤}¤¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeItemSpinner message handlers¤¤void COptionTreeItemSpinner::OnKillFocus(CWnd* pNewWnd) ¤{¤	// Validate¤	if (m_otOption == NULL)¤	{¤		COptionTreeSpinnerButton::OnKillFocus(pNewWnd);¤		return;¤	}¤¤	// See if new window is tree of list¤	if (m_otOption->IsChild(pNewWnd) == FALSE)¤	{¤		COptionTreeSpinnerButton::OnKillFocus(pNewWnd);¤		return;¤	}¤¤	// If new focus is edit, we really aren't loosing focus¤	if (pNewWnd->GetSafeHwnd() != GetEdit()->GetSafeHwnd())¤	{¤		// Mark focus¤		m_bFocus = FALSE;¤¤		// Commit changes¤    CommitChanges(_changed > 0 ? true : false);¤	}¤	¤	COptionTreeSpinnerButton::OnKillFocus(pNewWnd);	¤}¤¤void COptionTreeItemSpinner::OnSetFocus(CWnd* pOldWnd) ¤{¤	// Mark focus¤	m_bFocus = TRUE;¤¤	COptionTreeSpinnerButton::OnSetFocus(pOldWnd);	¤}¤¤void COptionTreeItemSpinner::OnActivate()¤{¤	// Make sure window is valid¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		ShowWindow(SW_SHOW);¤¤		// -- Set window position¤		SetWindowPos(NULL, m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height(), SWP_NOZORDER | SWP_SHOWWINDOW);¤¤		// -- Set focus¤		SetFocus();¤	}¤}¤¤void COptionTreeItemSpinner::DrawAttribute(CDC *pDC, const RECT &rcRect)¤{¤	// If we don't have focus, text is drawn.¤	if (m_bFocus == TRUE)¤	{¤		return;¤	}¤¤	// Make sure options aren't NULL¤	if (m_otOption == NULL)¤	{¤		return;¤	}¤¤	// Make sure there is a window¤	if (!IsWindow(GetSafeHwnd()))¤	{¤		return;¤	}¤¤	// Set window position¤	if (IsWindow(GetSafeHwnd()))¤	{¤		SetWindowPos(NULL, m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height(), SWP_NOZORDER | SWP_NOACTIVATE | SWP_HIDEWINDOW);¤	}¤¤	// Declare variables¤	HGDIOBJ hOld;¤	COLORREF crOld;¤	int nOldBack;¤	CRect rcText;¤	CString strText;¤	COLORREF crOldBack;¤¤	// Get window text¤	strText = GetEditText();¤¤	// Select font¤	hOld = pDC->SelectObject(m_otOption->GetNormalFont());¤	¤	// Set text color¤	if (IsReadOnly() == TRUE || m_otOption->IsWindowEnabled() == FALSE)¤	{¤		crOld = pDC->SetTextColor(GetSysColor(COLOR_GRAYTEXT));¤	}¤	else¤	{¤		crOld = pDC->SetTextColor(GetTextColor());¤	}¤¤	// Set background mode¤	nOldBack = pDC->SetBkMode(TRANSPARENT);¤¤	// Set background color¤	crOldBack = pDC->SetBkColor(GetBackgroundColor());¤¤	// Get rectangle¤	rcText = rcRect;¤¤	// Draw text¤	pDC->DrawText(strText, rcText, DT_SINGLELINE | DT_VCENTER);¤¤	// Restore GDI ojects¤	pDC->SelectObject(hOld);¤	pDC->SetTextColor(crOld);¤	pDC->SetBkMode(nOldBack);¤	pDC->SetBkColor(crOldBack);¤}¤¤void COptionTreeItemSpinner::OnCommit()¤{¤	// Hide edit control¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		ShowWindow(SW_HIDE);¤	}¤}¤¤void COptionTreeItemSpinner::OnRefresh()¤{¤	// Set the window positiion¤	if (IsWindow(GetSafeHwnd()))¤	{¤		SetWindowPos(NULL, m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height(), SWP_NOZORDER | SWP_NOACTIVATE);¤	}¤}¤¤void COptionTreeItemSpinner::OnMove()¤{¤	// Set window position¤	if (IsWindow(GetSafeHwnd()))¤	{¤		SetWindowPos(NULL, m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height(), SWP_NOZORDER | SWP_NOACTIVATE);¤	}¤¤	// Hide window¤	if (m_bFocus == FALSE && IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		ShowWindow(SW_HIDE);¤	}¤}¤¤void COptionTreeItemSpinner::CleanDestroyWindow()¤{¤	// Destroy window¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Destroy window¤		DestroyWindow();¤	}¤}¤¤¤BOOL COptionTreeItemSpinner::CreateSpinnerItem(DWORD dwOptions, double dValue, double dRangeBottom, double dRangeTop)¤{¤	// Declare variables¤	DWORD dwStyle = WS_CHILD | WS_VISIBLE | WS_CLIPSIBLINGS | WS_CLIPCHILDREN;¤	BOOL bRet = FALSE;¤	CString strText;¤¤	// Make sure options is not NULL¤	if (m_otOption == NULL)¤	{¤		return FALSE;¤	}¤¤	// Create edit control¤	if (IsWindow(GetSafeHwnd()) == FALSE)¤	{¤		// -- Create the edit view¤		bRet = Create(AfxRegisterWndClass(CS_HREDRAW | CS_VREDRAW, ::LoadCursor(NULL, IDC_ARROW)), _T(""), dwStyle, m_rcAttribute, m_otOption->GetCtrlParent(), GetCtrlID());¤¤		// -- Setup window¤		if (bRet == TRUE)¤		{¤			// -- -- Save options¤      COptionTreeSpinnerButton::m_dwOptions = dwOptions;¤¤			// -- -- Set range¤			SetRange(dRangeBottom, dRangeTop);¤¤			// -- -- Set value¤			SetEditDouble(dValue);¤¤			// -- -- Set options owner¤			SetSpinnerOptionsOwner(m_otOption);¤¤			// -- -- Set font¤			SetFont(m_otOption->GetNormalFont(), TRUE);¤			¤			// -- -- Set window position¤			SetWindowPos(NULL, m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height(), SWP_NOZORDER | SWP_SHOWWINDOW);¤¤			// -- -- Hide window¤			ShowWindow(SW_HIDE);¤¤		}¤	}¤¤	return bRet;¤}¤¤LRESULT COptionTreeItemSpinner::WM_CommitChanges(WPARAM wParam, LPARAM lParam)¤{¤	// Mark focus¤	m_bFocus = FALSE;¤¤	// Commit changes¤  CommitChanges(_changed > 0 ? true : false);¤	return 0;¤}¤LRESULT COptionTreeItemSpinner::WM_TextChanged(WPARAM wParam, LPARAM lParam)¤{¤  SetChanged((int) wParam);¤¤	return 0;¤}¤¤¤void COptionTreeItemSpinner::OnDeSelect()¤{¤	// Hide window¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		ShowWindow(SW_HIDE);¤	}¤}¤¤void COptionTreeItemSpinner::OnSelect()¤{¤	// Do nothing here¤}¤¤//#UC END# *470B0CA60271*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B0CA60271_DESTR_BODY*"
		    value      	(value Text 
|//#UC START# *470B0CA60271_DESTR_BODY*¤	//#UC END# *470B0CA60271_DESTR_BODY*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B0CA60271_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B0CA60271_CUSTOM_INCLUDES*¤#include "shared/WinGUI/OptionTreeControls/OptionTreeDef.h"¤#include "shared/WinGUI/OptionTreeControls/OptionTreeRes.h"¤//#UC END# *470B0CA60271_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B0CA60271*"
		    value      	(value Text 
|//#UC START# *470B0CA60271*¤// Construction¤public:¤	COptionTreeItemSpinner();¤	virtual void OnMove();¤	virtual void OnRefresh();¤	virtual void OnCommit();¤	virtual void OnActivate();¤	virtual void CleanDestroyWindow();¤	virtual void OnDeSelect();¤	virtual void OnSelect();¤	virtual void DrawAttribute(CDC *pDC, const RECT &rcRect);¤  virtual void OnShow(BOOL bShow){;}¤¤¤¤// Attributes¤public:¤¤// Operations¤public:¤¤// Overrides¤	// ClassWizard generated virtual function overrides¤	//{{AFX_VIRTUAL(COptionTreeItemSpinner)¤	//}}AFX_VIRTUAL¤¤// Implementation¤public:¤	BOOL CreateSpinnerItem(DWORD dwOptions, double dValue, double dRangeBottom, double dRangeTop);¤¤protected:¤	LRESULT WM_CommitChanges(WPARAM wParam, LPARAM lParam);¤	LRESULT WM_TextChanged(WPARAM wParam, LPARAM lParam);¤¤	// Generated message map functions¤protected:¤	BOOL m_bFocus;¤¤	//{{AFX_MSG(COptionTreeItemSpinner)¤	afx_msg void OnKillFocus(CWnd* pNewWnd);¤	afx_msg void OnSetFocus(CWnd* pOldWnd);¤	//}}AFX_MSG¤¤//#UC END# *470B0CA60271*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"WikiPageID (wiki)"
		    value      	(value Text 
|Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemSpinner|470B0CA60271
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B0CA60271_MESSAGE_MAP*"
		    value      	(value Text 
|//#UC START# *470B0CA60271_MESSAGE_MAP*¤	ON_WM_KILLFOCUS()¤	ON_WM_SETFOCUS()¤	ON_MESSAGE(OT_NOTIFY_COMMITCHANGES, WM_CommitChanges)¤	ON_MESSAGE(OT_TEXTCHANGED, WM_TextChanged)¤	//#UC END# *470B0CA60271_MESSAGE_MAP*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (wiki)"
		    value      	"wiki")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (h)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (cpp)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ElementCreationOrder"
		    value      	"16659833439"))
	    quid       	"470B0CA60271"
	    documentation 	"spinner"
	    stereotype 	"GuiControl"
	    superclasses 	(list inheritance_relationship_list
		(object Inheritance_Relationship
		    quid       	"470B0CE9001F"
		    supplier   	"Logical View::shared::WinGUI::OptionTreeControls::COptionTreeSpinnerButton"
		    quidu      	"470B06290251")
		(object Inheritance_Relationship
		    quid       	"4785EBE80002"
		    supplier   	"Logical View::shared::WinGUI::OptionTreeControls::COptionTreeItem"
		    quidu      	"470AFC61008C"))
	    language   	"MDA Generator")
	(object Class "CPreciseTimer"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"AbstarctOperation"
		    value      	"regular")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsNative"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need assign op"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need copy ctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need ref count"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need unsorted less"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"debug log"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"local supervisor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need UC"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need dctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need objcounter"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"no base class"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"non virtual base"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"singleton"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (cpp)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/CPreciseTimer.cpp")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (h)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/CPreciseTimer.h")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B1253003E_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B1253003E_CUSTOM_INCLUDES*¤std::string Int64ToString(__int64 const& ri64, __int64 const& iRadix)¤{¤    bool bNeg = (ri64 < 0);¤    __int64 i64 = ri64;¤	std::string ostrRes;¤    bool bSpecial = false;¤    if(true == bNeg)¤    {¤        i64 = -i64;¤        if(i64 < 0)¤        // Special case number -9223372036854775808 or ¤        // 0x8000000000000000¤        bSpecial = true;¤        ostrRes.append(1, '-');¤    }¤    int iR;¤    do¤    {¤        iR = (int) (i64 % iRadix);¤        if(true == bSpecial)¤            iR = -iR;¤        if(iR < 10)¤            ostrRes.append(1, '0' + iR);¤        else¤            ostrRes.append(1, 'A' + iR - 10);¤        i64 /= iRadix;¤    }¤    while(i64 != 0);¤    //Reverse the string¤	std::string::iterator it = ostrRes.begin();¤    if(bNeg)¤        it++;¤	std::reverse(it, ostrRes.end());¤    return ostrRes;¤}¤¤CString Int64ToDurationString(__int64 const& ri64){¤  // duration in microseconds¤¤  const __int64 mcsDay  = 24 * 60 * 60 * (__int64) 1000000;¤  const __int64 mcsHour = 60 * 60 * (__int64) 1000000;¤  const __int64 mcsMinute = 60 * 1000000;¤  const __int64 mcsSecond = 1000000;¤  const __int64 mcsMilliSecond = 1000;¤¤  __int64 days=0;¤  __int64 Hours=0;¤  __int64 Minutes=0;¤  __int64 Seconds=0;¤  __int64 MilliSeconds=0;¤  __int64 MicroSeconds=0;¤¤  days          = ri64 / mcsDay;¤  Hours         = (ri64 - (days * mcsDay)) / mcsHour;¤  Minutes       = (ri64 - (days * mcsDay) - (Hours * mcsHour)) / mcsMinute;¤  Seconds       = (ri64 - (days * mcsDay) - (Hours * mcsHour) -  Minutes * mcsMinute) / mcsSecond;¤  MilliSeconds  = (ri64 - (days * mcsDay) - (Hours * mcsHour) -  Minutes * mcsMinute - Seconds * mcsSecond) / mcsMilliSecond;¤  MicroSeconds  = ri64 - (days * mcsDay) - (Hours * mcsHour) -  Minutes * mcsMinute - Seconds * mcsSecond - MilliSeconds * mcsMilliSecond;¤¤¤  CString mcsString("");¤  mcsString.Format("%2d:%2d:%2d:%2d:%3d:%3d",(long) days,(long) Hours,(long) Minutes,(long) Seconds,(long) MilliSeconds,(long) MicroSeconds);    ¤  return mcsString;¤}¤¤//#UC END# *470B1253003E_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B1253003E*"
		    value      	(value Text 
|//#UC START# *470B1253003E*¤bool CPreciseTimer::sm_bInit = false;¤bool CPreciseTimer::sm_bPerformanceCounter;¤__int64 CPreciseTimer::sm_i64Freq;¤¤//CONSTRUCTOR¤CPreciseTimer::CPreciseTimer(const bool& bstart) : m_i64Start(0), m_i64Elapsed(0), m_bRunning(false)¤{¤	//Only if not already initialized¤	if(false == sm_bInit)¤	{¤		//Initializing some static variables dependent on the system just once¤		LARGE_INTEGER liFreq;¤		if(TRUE == QueryPerformanceFrequency(&liFreq))¤		{¤			//Only if the system is supporting High Performance¤			sm_i64Freq = ((__int64)liFreq.HighPart << 32) + (__int64)liFreq.LowPart;¤			sm_bPerformanceCounter = true;¤		}¤		else¤			sm_bPerformanceCounter = false;¤		sm_bInit = true;¤	}¤  if(bstart == true)¤    this->StartTimer();¤}¤¤void CPreciseTimer::StartTimer()¤{¤	if(true == sm_bPerformanceCounter)¤	{¤		QueryPerformanceCounter(&m_liCount);¤		m_i64Start = ((__int64)m_liCount.HighPart << 32) + (__int64)m_liCount.LowPart;¤		//Transform in microseconds¤		(m_i64Start *= 1000000) /= sm_i64Freq;¤	}¤	else¤		//Transform milliseconds to microseconds¤		m_i64Start = (__int64)GetTickCount() * 1000;¤	m_bRunning = true;¤}¤¤CPreciseTimer& CPreciseTimer::StopTimer()¤{¤	UpdateElapsed();¤	m_bRunning = false;¤  return *this;¤}¤¤__int64 CPreciseTimer::GetTime()¤{¤	if(true == m_bRunning)¤		UpdateElapsed();¤	return m_i64Elapsed;¤}¤¤CString CPreciseTimer::GetDurationString(void) const{¤  return Int64ToDurationString(m_i64Elapsed);¤}¤#ifdef _DEBUG¤void CPreciseTimer::DumpDuration(const CString& stitel) const¤{¤  afxDump<<"\n "<<stitel<<"  "<<this->GetDurationString();¤}¤#endif¤//#UC END# *470B1253003E*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B1253003E_DESTR_BODY*"
		    value      	(value Text 
|//#UC START# *470B1253003E_DESTR_BODY*¤	//#UC END# *470B1253003E_DESTR_BODY*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B1253003E_CUSTOM_INCLUDES*"
		    value      	"//#UC START# *470B1253003E_CUSTOM_INCLUDES*¤#include <algorithm>¤#include <string>¤¤std::string  Int64ToString(__int64 const& ri64, __int64 const& iRadix=10);¤CString Int64ToDurationString(__int64 const& ri64);¤//#UC END# *470B1253003E_CUSTOM_INCLUDES*")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B1253003E*"
		    value      	(value Text 
|//#UC START# *470B1253003E*¤public:¤	//CONSTRUCTOR¤	CPreciseTimer(const bool& bstart=true);¤¤	inline bool CPreciseTimer::SupportsHighResCounter()¤	{¤		return sm_bPerformanceCounter;¤	}¤¤	void StartTimer();¤	CPreciseTimer& StopTimer();¤	__int64 GetTime();¤¤  CString GetDurationString(void) const;¤#ifdef _DEBUG¤  void DumpDuration(const CString& stitel) const;¤#endif¤private:¤	//Auxiliary Function¤	inline void CPreciseTimer::UpdateElapsed()¤	{¤		if(true == sm_bPerformanceCounter)¤		{¤			QueryPerformanceCounter(&m_liCount);¤			m_i64Counts = ((__int64)m_liCount.HighPart << 32) + (__int64)m_liCount.LowPart;¤			//Transform in microseconds¤			(m_i64Counts *= 1000000) /= sm_i64Freq;¤		}¤		else¤			//Transform milliseconds to microseconds¤			m_i64Counts = (__int64)GetTickCount() * 1000;¤		if(m_i64Counts > m_i64Start)¤			m_i64Elapsed = m_i64Counts - m_i64Start;¤		else¤			//Eliminate possible number overflow (0x7fffffffffffffff is the maximal __int64 positive number)¤			m_i64Elapsed = (0x7fffffffffffffff - m_i64Start) + m_i64Counts;¤	}¤¤	//Member variables¤	bool m_bRunning;	¤	__int64 m_i64Start;¤	__int64 m_i64Elapsed;¤¤	//Some auxiliary variables¤	__int64 m_i64Counts;¤	LARGE_INTEGER m_liCount;¤¤	//Static Variables¤	static bool sm_bInit;¤	static bool sm_bPerformanceCounter;¤	static __int64 sm_i64Freq;¤//#UC END# *470B1253003E*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"WikiPageID (wiki)"
		    value      	(value Text 
|Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/CPreciseTimer|470B1253003E
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (h)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (wiki)"
		    value      	"wiki")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (cpp)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ElementCreationOrder"
		    value      	"16659833927"))
	    quid       	"470B1253003E"
	    documentation 	"таймер"
	    stereotype 	"SimpleClass"
	    language   	"MDA Generator")
	(object Class "CRegExp"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"AbstarctOperation"
		    value      	"regular")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsNative"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need assign op"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need copy ctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need ref count"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need unsorted less"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"debug log"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"local supervisor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need UC"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need dctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need objcounter"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"no base class"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"non virtual base"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"singleton"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (h)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/CRegExp.h")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (cpp)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/CRegExp.cpp")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B17AB001F_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B17AB001F_CUSTOM_INCLUDES*¤#ifdef STRINGEX¤	// Here's a function that will do global search and replace using regular  //¤	// expressions. Note that the CStringEx class described in the earlier     //¤	// section is being used here. The main reason for using CStringEx is that // ¤	// it provides the Replace() function which makes our task easier.		   //¤	int RegSearchReplace( CStringEx& string, LPCTSTR sSearchExp, ¤						 LPCTSTR sReplaceExp )¤	{¤		int nPos = 0;¤		int nReplaced = 0;¤		CRegExp r;¤		LPTSTR str = (LPTSTR)(LPCTSTR)string;¤¤		r.RegComp( sSearchExp );¤		while( (nPos = r.RegFind((LPTSTR)str)) != -1 )¤		{¤			nReplaced++;¤			TCHAR *pReplaceStr = r.GetReplaceString( sReplaceExp );¤¤			int offset = str-(LPCTSTR)string+nPos;¤			string.Replace( offset, r.GetFindLen(), ¤					pReplaceStr );¤¤			// Replace might have caused a reallocation¤			str = (LPTSTR)(LPCTSTR)string + offset + _tcslen(pReplaceStr);¤			delete pReplaceStr;¤		}¤		return nReplaced;¤	}¤#endif¤¤// definition	number	opnd?	meaning ¤#define	END		0		  // no	End of program. ¤#define	BOL		1		  // no	Match beginning of line. ¤#define	EOL		2		  // no	Match end of line. ¤#define	ANY		3		  // no	Match any character. ¤#define	ANYOF	4		  // str	Match any of these. ¤#define	ANYBUT	5		// str	Match any but one of these. ¤#define	BRANCH	6		// node	Match this, or the next..\&. ¤#define	BACK	7		  // no	"next" ptr points backward. ¤#define	EXACTLY	8		// str	Match this string. ¤#define	NOTHING	9		// no	Match empty string. ¤#define	STAR	10		// node	Match this 0 or more times. ¤#define	PLUS	11		// node	Match this 1 or more times. ¤#define	OPEN	20		// no	Sub-RE starts here. ¤				            // OPEN+1 is number 1, etc. ¤#define	CLOSE	30		// no	Analogous to OPEN. ¤¤// Utility definitions.¤ ¤#define	FAIL(m)		{ regerror(m); return(NULL); }¤#define	ISREPN(c)	((c) == _T('*') || (c) == _T('+') || (c) == _T('?'))¤#define	META		"^$.[()|?+*\\"¤¤// Flags to be passed up and down.¤ ¤#define	HASWIDTH	01	// Known never to match null string. ¤#define	SIMPLE		02	// Simple enough to be STAR/PLUS operand. ¤#define	SPSTART		04	// Starts with * or +. ¤#define	WORST		0	    // Worst case. ¤//#UC END# *470B17AB001F_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B17AB001F*"
		    value      	(value Text 
|//#UC START# *470B17AB001F*¤CRegExp::CRegExp()¤{¤	bCompiled = FALSE;¤	program = NULL;¤	sFoundText = NULL;¤¤	for( int i = 0; i < NSUBEXP; i++ )¤	{¤		startp[i] = NULL;¤		endp[i] = NULL;¤	}¤}¤¤CRegExp* CRegExp::RegComp(const TCHAR *exp)¤{¤	TCHAR *scan;¤	int flags;¤¤	if (exp == NULL)¤		return NULL;¤	¤	bCompiled = TRUE;¤¤	// First pass: determine size, legality. ¤	bEmitCode = FALSE;¤	regparse = (TCHAR *)exp;¤	regnpar = 1;¤	regsize = 0L;¤	regdummy[0] = NOTHING;¤	regdummy[1] = regdummy[2] = 0;¤	regcode = regdummy;¤	if (reg(0, &flags) == NULL)¤		return(NULL);¤¤	// Allocate space. ¤	delete program;¤	program = new TCHAR[regsize];¤	memset( program, 0, regsize * sizeof(TCHAR) );¤¤	if (program == NULL)¤		return NULL;¤¤	// Second pass: emit code. ¤	bEmitCode = TRUE;¤	regparse = (TCHAR *)exp;¤	regnpar = 1;¤	regcode = program;¤	if (reg(0, &flags) == NULL)¤		return NULL;¤¤	// Dig out information for optimizations. ¤	regstart = _T('\0');		// Worst-case defaults. ¤	reganch = 0;¤	regmust = NULL;¤	regmlen = 0;¤	scan = program;		// First BRANCH. ¤	if (OP(regnext(scan)) == END) ¤	{	¤		// Only one top-level choice. ¤		scan = OPERAND(scan);¤¤		// Starting-point info. ¤		if (OP(scan) == EXACTLY)¤			regstart = *OPERAND(scan);¤		else if (OP(scan) == BOL)¤			reganch = 1;¤¤		// If there's something expensive in the r.e., find the¤		// longest literal string that must appear and make it the¤		// regmust.  Resolve ties in favor of later strings, since¤		// the regstart check works with the beginning of the r.e.¤		// and avoiding duplication strengthens checking.  Not a¤		// strong reason, but sufficient in the absence of others.¤		 ¤		if (flags&SPSTART) ¤		{¤			char *longest = NULL;¤			size_t len = 0;¤¤			for (; scan != NULL; scan = regnext(scan))¤				if (OP(scan) == EXACTLY && _tcslen(OPERAND(scan)) >= len) ¤				{¤					longest = OPERAND(scan);¤					len = _tcslen(OPERAND(scan));¤				}¤			regmust = longest;¤			regmlen = (int)len;¤		}¤	}¤¤	return this;¤}¤¤// reg - regular expression, i.e. main body or parenthesized thing¤//¤// Caller must absorb opening parenthesis.¤//¤// Combining parenthesis handling with the base level of regular expression¤// is a trifle forced, but the need to tie the tails of the branches to what¤// follows makes it hard to avoid.¤TCHAR *CRegExp::reg(int paren, int *flagp)¤{¤	char *ret;¤	char *br;¤	char *ender;¤	int parno;¤	int flags;¤¤	*flagp = HASWIDTH;	// Tentatively. ¤¤	if (paren) ¤	{¤		// Make an OPEN node. ¤		if (regnpar >= NSUBEXP)¤		{¤			TRACE1("Too many (). NSUBEXP is set to %d\n", NSUBEXP );¤			return NULL;¤		}¤		parno = regnpar;¤		regnpar++;¤		ret = regnode(OPEN+parno);¤	}¤¤	// Pick up the branches, linking them together. ¤	br = regbranch(&flags);¤	if (br == NULL)¤		return(NULL);¤	if (paren)¤		regtail(ret, br);	// OPEN -> first. ¤	else¤		ret = br;¤	*flagp &= ~(~flags&HASWIDTH);	// Clear bit if bit 0. ¤	*flagp |= flags&SPSTART;¤	while (*regparse == _T('|')) {¤		regparse++;¤		br = regbranch(&flags);¤		if (br == NULL)¤			return(NULL);¤		regtail(ret, br);	// BRANCH -> BRANCH. ¤		*flagp &= ~(~flags&HASWIDTH);¤		*flagp |= flags&SPSTART;¤	}¤¤	// Make a closing node, and hook it on the end. ¤	ender = regnode((paren) ? CLOSE+parno : END);¤	regtail(ret, ender);¤¤	// Hook the tails of the branches to the closing node. ¤	for (br = ret; br != NULL; br = regnext(br))¤		regoptail(br, ender);¤¤	// Check for proper termination. ¤	if (paren && *regparse++ != _T(')')) ¤	{¤		TRACE0("unterminated ()\n");¤		return NULL;¤	} ¤	else if (!paren && *regparse != _T('\0')) ¤	{¤		if (*regparse == _T(')')) ¤		{¤			TRACE0("unmatched ()\n");¤			return NULL;¤		} ¤		else¤		{¤			TRACE0("internal error: junk on end\n");¤			return NULL;¤		}¤		// NOTREACHED ¤	}¤¤	return(ret);¤}¤¤¤¤¤//¤// regbranch - one alternative of an | operator¤//¤// Implements the concatenation operator.¤ ¤TCHAR *CRegExp::regbranch(int *flagp)¤{¤	TCHAR *ret;¤	TCHAR *chain;¤	TCHAR *latest;¤	int flags;¤	int c;¤¤	*flagp = WORST;				// Tentatively. ¤¤	ret = regnode(BRANCH);¤	chain = NULL;¤	while ((c = *regparse) != _T('\0') && c != _T('|') && c != _T(')')) {¤		latest = regpiece(&flags);¤		if (latest == NULL)¤			return(NULL);¤		*flagp |= flags&HASWIDTH;¤		if (chain == NULL)		// First piece. ¤			*flagp |= flags&SPSTART;¤		else¤			regtail(chain, latest);¤		chain = latest;¤	}¤	if (chain == NULL)			// Loop ran zero times. ¤		(void) regnode(NOTHING);¤¤	return(ret);¤}¤¤//¤// regpiece - something followed by possible [*+?]¤//¤// Note that the branching code sequences used for ? and the general cases¤// of * and + are somewhat optimized:  they use the same NOTHING node as¤// both the endmarker for their branch list and the body of the last branch.¤// It might seem that this node could be dispensed with entirely, but the¤// endmarker role is not redundant.¤ ¤TCHAR *CRegExp::regpiece(int *flagp)¤{¤	TCHAR *ret;¤	TCHAR op;¤	TCHAR *next;¤	int flags;¤¤	ret = regatom(&flags);¤	if (ret == NULL)¤		return(NULL);¤¤	op = *regparse;¤	if (!ISREPN(op)) {¤		*flagp = flags;¤		return(ret);¤	}¤¤	if (!(flags&HASWIDTH) && op != _T('?'))¤	{¤		TRACE0("*+ operand could be empty\n");¤		return NULL;¤	}¤¤	switch (op) {¤	case _T('*'):	*flagp = WORST|SPSTART;			break;¤	case _T('+'):	*flagp = WORST|SPSTART|HASWIDTH;	break;¤	case _T('?'):	*flagp = WORST;				break;¤	}¤¤	if (op == _T('*') && (flags&SIMPLE))¤		reginsert(STAR, ret);¤	else if (op == _T('*')) {¤		// Emit x* as (x&|), where & means "self". ¤		reginsert(BRANCH, ret);		// Either x ¤		regoptail(ret, regnode(BACK));	// and loop ¤		regoptail(ret, ret);		// back ¤		regtail(ret, regnode(BRANCH));	// or ¤		regtail(ret, regnode(NOTHING));	// null. ¤	} else if (op == _T('+') && (flags&SIMPLE))¤		reginsert(PLUS, ret);¤	else if (op == _T('+')) {¤		// Emit x+ as x(&|), where & means "self". ¤		next = regnode(BRANCH);		// Either ¤		regtail(ret, next);¤		regtail(regnode(BACK), ret);	// loop back ¤		regtail(next, regnode(BRANCH));	// or ¤		regtail(ret, regnode(NOTHING));	// null. ¤	} else if (op == _T('?')) {¤		// Emit x? as (x|) ¤		reginsert(BRANCH, ret);		// Either x ¤		regtail(ret, regnode(BRANCH));	// or ¤		next = regnode(NOTHING);		// null. ¤		regtail(ret, next);¤		regoptail(ret, next);¤	}¤	regparse++;¤	if (ISREPN(*regparse))¤	{¤		TRACE0("nested *?+\n");¤		return NULL;¤	}¤¤	return(ret);¤}¤¤//¤// regatom - the lowest level¤//¤// Optimization:  gobbles an entire sequence of ordinary characters so that¤// it can turn them into a single node, which is smaller to store and¤// faster to run.  Backslashed characters are exceptions, each becoming a¤// separate node; the code is simpler that way and it's not worth fixing.¤ ¤TCHAR *CRegExp::regatom(int *flagp)¤{¤	TCHAR *ret;¤	int flags;¤¤	*flagp = WORST;		// Tentatively. ¤¤	switch (*regparse++) {¤	case _T('^'):¤		ret = regnode(BOL);¤		break;¤	case _T('$'):¤		ret = regnode(EOL);¤		break;¤	case _T('.'):¤		ret = regnode(ANY);¤		*flagp |= HASWIDTH|SIMPLE;¤		break;¤	case _T('['): {¤		int range;¤		int rangeend;¤		int c;¤¤		if (*regparse == _T('^')) {	// Complement of range. ¤			ret = regnode(ANYBUT);¤			regparse++;¤		} else¤			ret = regnode(ANYOF);¤		if ((c = *regparse) == _T(']') || c == _T('-')) {¤			regc(c);¤			regparse++;¤		}¤		while ((c = *regparse++) != _T('\0') && c != _T(']')) {¤			if (c != _T('-'))¤				regc(c);¤			else if ((c = *regparse) == _T(']') || c == _T('\0'))¤				regc(_T('-'));¤			else ¤			{¤				range = (unsigned) (TCHAR)*(regparse-2);¤				rangeend = (unsigned) (TCHAR)c;¤				if (range > rangeend)¤				{¤					TRACE0("invalid [] range\n");¤					return NULL;¤				}¤				for (range++; range <= rangeend; range++)¤					regc(range);¤				regparse++;¤			}¤		}¤		regc(_T('\0'));¤		if (c != _T(']'))¤		{¤			TRACE0("unmatched []\n");¤			return NULL;¤		}¤		*flagp |= HASWIDTH|SIMPLE;¤		break;¤		}¤	case _T('('):¤		ret = reg(1, &flags);¤		if (ret == NULL)¤			return(NULL);¤		*flagp |= flags&(HASWIDTH|SPSTART);¤		break;¤	case _T('\0'):¤	case _T('|'):¤	case _T(')'):¤		// supposed to be caught earlier ¤		TRACE0("internal error: \\0|) unexpected\n");¤		return NULL;¤		break;¤	case _T('?'):¤	case _T('+'):¤	case _T('*'):¤		TRACE0("?+* follows nothing\n");¤		return NULL;¤		break;¤	case _T('\\'):¤		if (*regparse == _T('\0'))¤		{¤			TRACE0("trailing \\\n");¤			return NULL;¤		}¤		ret = regnode(EXACTLY);¤		regc(*regparse++);¤		regc(_T('\0'));¤		*flagp |= HASWIDTH|SIMPLE;¤		break;¤	default: {¤		size_t len;¤		TCHAR ender;¤¤		regparse--;¤		len = _tcscspn(regparse, META);¤		if (len == 0)¤		{¤			TRACE0("internal error: strcspn 0\n");¤			return NULL;¤		}¤		ender = *(regparse+len);¤		if (len > 1 && ISREPN(ender))¤			len--;		// Back off clear of ?+* operand. ¤		*flagp |= HASWIDTH;¤		if (len == 1)¤			*flagp |= SIMPLE;¤		ret = regnode(EXACTLY);¤		for (; len > 0; len--)¤			regc(*regparse++);¤		regc(_T('\0'));¤		break;¤		}¤	}¤¤	return(ret);¤}¤¤¤¤// reginsert - insert an operator in front of already-emitted operand¤//¤// Means relocating the operand.¤ ¤void CRegExp::reginsert(TCHAR op, TCHAR *opnd)¤{¤	TCHAR *place;¤¤	if (!bEmitCode) {¤		regsize += 3;¤		return;¤	}¤¤	(void) memmove(opnd+3, opnd, (size_t)((regcode - opnd)*sizeof(TCHAR)));¤	regcode += 3;¤¤	place = opnd;		// Op node, where operand used to be. ¤	*place++ = op;¤	*place++ = _T('\0');¤	*place++ = _T('\0');¤}¤¤//¤// regtail - set the next-pointer at the end of a node chain¤ ¤void CRegExp::regtail(TCHAR *p, TCHAR *val)¤{¤	TCHAR *scan;¤	TCHAR *temp;¤//	int offset;¤¤	if (!bEmitCode)¤		return;¤¤	// Find last node. ¤	for (scan = p; (temp = regnext(scan)) != NULL; scan = temp)¤		continue;¤¤	*((short *)(scan+1)) = (OP(scan) == BACK) ? scan - val : val - scan;¤}¤¤¤// regoptail - regtail on operand of first argument; nop if operandless¤ ¤void CRegExp::regoptail(TCHAR *p, TCHAR *val)¤{¤	// "Operandless" and "op != BRANCH" are synonymous in practice. ¤	if (!bEmitCode || OP(p) != BRANCH)¤		return;¤	regtail(OPERAND(p), val);¤}¤¤¤// RegFind	- match a regexp against a string¤// Returns	- Returns position of regexp or -1¤//			  if regular expression not found¤// Note		- The regular expression should have been¤//			  previously compiled using RegComp¤int CRegExp::RegFind(const TCHAR *str)¤{¤	TCHAR *string = (TCHAR *)str;	// avert const poisoning ¤	TCHAR *s;¤¤	// Delete any previously stored found string¤	delete sFoundText;¤	sFoundText = NULL;¤¤	// Be paranoid. ¤	if(string == NULL) ¤	{¤		TRACE0("NULL argument to regexec\n");¤		return(-1);¤	}¤¤	// Check validity of regex¤	if (!bCompiled) ¤	{¤		TRACE0("No regular expression provided yet.\n");¤		return(-1);¤	}¤¤	// If there is a "must appear" string, look for it. ¤	if (regmust != NULL && _tcsstr(string, regmust) == NULL)¤		return(-1);¤¤	// Mark beginning of line for ^¤	regbol = string;¤¤	// Simplest case:  anchored match need be tried only once. ¤	if (reganch)¤	{¤		if( regtry(string) )¤		{¤			// Save the found substring in case we need it¤			sFoundText = new TCHAR[GetFindLen()+1];¤			sFoundText[GetFindLen()] = _T('\0');¤			_tcsncpy(sFoundText, string, GetFindLen() );¤¤			return 0;¤		}¤		//String not found¤		return -1;¤	}¤¤	// Messy cases:  unanchored match. ¤	if (regstart != _T('\0')) ¤	{¤		// We know what TCHAR it must start with. ¤		for (s = string; s != NULL; s = _tcschr(s+1, regstart))¤			if (regtry(s))¤			{¤				int nPos = s-str;¤¤				// Save the found substring in case we need it later¤				sFoundText = new TCHAR[GetFindLen()+1];¤				sFoundText[GetFindLen()] = _T('\0');¤				_tcsncpy(sFoundText, s, GetFindLen() );¤¤				return nPos;¤			}¤		return -1;¤	} ¤	else ¤	{¤		// We don't -- general case¤		for (s = string; !regtry(s); s++)¤			if (*s == _T('\0'))¤				return(-1);¤¤		int nPos = s-str;¤¤		// Save the found substring in case we need it later¤		sFoundText = new TCHAR[GetFindLen()+1];¤		sFoundText[GetFindLen()] = _T('\0');¤		_tcsncpy(sFoundText, s, GetFindLen() );¤¤		return nPos;¤	}¤	// NOTREACHED ¤}¤¤¤// regtry - try match at specific point¤ ¤int	CRegExp::regtry(TCHAR *string)¤{¤	int i;¤	TCHAR **stp;¤	TCHAR **enp;¤¤	reginput = string;¤¤	stp = startp;¤	enp = endp;¤	for (i = NSUBEXP; i > 0; i--) ¤	{¤		*stp++ = NULL;¤		*enp++ = NULL;¤	}¤	if (regmatch(program)) ¤	{¤		startp[0] = string;¤		endp[0] = reginput;¤		return(1);¤	} ¤	else¤		return(0);¤}¤¤// regmatch - main matching routine¤//¤// Conceptually the strategy is simple:  check to see whether the current¤// node matches, call self recursively to see whether the rest matches,¤// and then act accordingly.  In practice we make some effort to avoid¤// recursion, in particular by going through "ordinary" nodes (that don't¤// need to know whether the rest of the match failed) by a loop instead of¤// by recursion.¤ ¤int	CRegExp::regmatch(TCHAR *prog)¤{¤	TCHAR *scan;	// Current node. ¤	TCHAR *next;		// Next node. ¤¤	for (scan = prog; scan != NULL; scan = next) {¤		next = regnext(scan);¤¤		switch (OP(scan)) {¤		case BOL:¤			if (reginput != regbol)¤				return(0);¤			break;¤		case EOL:¤			if (*reginput != _T('\0'))¤				return(0);¤			break;¤		case ANY:¤			if (*reginput == _T('\0'))¤				return(0);¤			reginput++;¤			break;¤		case EXACTLY: {¤			size_t len;¤			TCHAR *const opnd = OPERAND(scan);¤¤			// Inline the first character, for speed. ¤			if (*opnd != *reginput)¤				return(0);¤			len = _tcslen(opnd);¤			if (len > 1 && _tcsncmp(opnd, reginput, len) != 0)¤				return(0);¤			reginput += len;¤			break;¤			}¤		case ANYOF:¤			if (*reginput == _T('\0') ||¤					_tcschr(OPERAND(scan), *reginput) == NULL)¤				return(0);¤			reginput++;¤			break;¤		case ANYBUT:¤			if (*reginput == _T('\0') ||¤					_tcschr(OPERAND(scan), *reginput) != NULL)¤				return(0);¤			reginput++;¤			break;¤		case NOTHING:¤			break;¤		case BACK:¤			break;¤		case OPEN+1: case OPEN+2: case OPEN+3:¤		case OPEN+4: case OPEN+5: case OPEN+6:¤		case OPEN+7: case OPEN+8: case OPEN+9: {¤			const int no = OP(scan) - OPEN;¤			TCHAR *const input = reginput;¤¤			if (regmatch(next)) {¤				// Don't set startp if some later¤				// invocation of the same parentheses¤				// already has.¤				 ¤				if (startp[no] == NULL)¤					startp[no] = input;¤				return(1);¤			} else¤				return(0);¤			break;¤			}¤		case CLOSE+1: case CLOSE+2: case CLOSE+3:¤		case CLOSE+4: case CLOSE+5: case CLOSE+6:¤		case CLOSE+7: case CLOSE+8: case CLOSE+9: {¤			const int no = OP(scan) - CLOSE;¤			TCHAR *const input = reginput;¤¤			if (regmatch(next)) {¤				// Don't set endp if some later¤				// invocation of the same parentheses¤				// already has.¤				 ¤				if (endp[no] == NULL)¤					endp[no] = input;¤				return(1);¤			} else¤				return(0);¤			break;¤			}¤		case BRANCH: {¤			TCHAR *const save = reginput;¤¤			if (OP(next) != BRANCH)		// No choice. ¤				next = OPERAND(scan);	// Avoid recursion. ¤			else {¤				while (OP(scan) == BRANCH) {¤					if (regmatch(OPERAND(scan)))¤						return(1);¤					reginput = save;¤					scan = regnext(scan);¤				}¤				return(0);¤				// NOTREACHED ¤			}¤			break;¤			}¤		case STAR: ¤		case PLUS: {¤			const TCHAR nextch =¤				(OP(next) == EXACTLY) ? *OPERAND(next) : _T('\0');¤			size_t no;¤			TCHAR *const save = reginput;¤			const size_t min = (OP(scan) == STAR) ? 0 : 1;¤¤			for (no = regrepeat(OPERAND(scan)) + 1; no > min; no--) {¤				reginput = save + no - 1;¤				// If it could work, try it. ¤				if (nextch == _T('\0') || *reginput == nextch)¤					if (regmatch(next))¤						return(1);¤			}¤			return(0);¤			break;¤			}¤		case END:¤			return(1);	// Success! ¤			break;¤		default:¤			TRACE0("regexp corruption\n");¤			return(0);¤			break;¤		}¤	}¤¤	// We get here only if there's trouble -- normally "case END" is¤	// the terminating point.¤	 ¤	TRACE0("corrupted pointers\n");¤	return(0);¤}¤¤¤// regrepeat - report how many times something simple would match¤ ¤size_t CRegExp::regrepeat(TCHAR *node)¤{¤	size_t count;¤	TCHAR *scan;¤	TCHAR ch;¤¤	switch (OP(node)) ¤	{¤	case ANY:¤		return(_tcslen(reginput));¤		break;¤	case EXACTLY:¤		ch = *OPERAND(node);¤		count = 0;¤		for (scan = reginput; *scan == ch; scan++)¤			count++;¤		return(count);¤		break;¤	case ANYOF:¤		return(_tcsspn(reginput, OPERAND(node)));¤		break;¤	case ANYBUT:¤		return(_tcscspn(reginput, OPERAND(node)));¤		break;¤	default:		// Oh dear.  Called inappropriately. ¤		TRACE0("internal error: bad call of regrepeat\n");¤		return(0);	// Best compromise. ¤		break;¤	}¤	// NOTREACHED ¤}¤¤// regnext - dig the "next" pointer out of a node¤ ¤TCHAR *CRegExp::regnext(TCHAR *p)¤{¤	const short &offset = *((short*)(p+1));¤¤	if (offset == 0)¤		return(NULL);¤¤	return((OP(p) == BACK) ? p-offset : p+offset);¤}¤¤// GetReplaceString	- Converts a replace expression to a string¤// Returns			- Pointer to newly allocated string¤//					  Caller is responsible for deleting it¤TCHAR* CRegExp::GetReplaceString( const TCHAR* sReplaceExp )¤{¤	TCHAR *src = (TCHAR *)sReplaceExp;¤	TCHAR *buf;¤	TCHAR c;¤	int no;¤	size_t len;¤¤	// k.f. added //¤	m_iVarCount = 0 ;¤¤	if( sReplaceExp == NULL || sFoundText == NULL )¤		return NULL;¤¤¤	// First compute the length of the string¤	int replacelen = 0;¤	while ((c = *src++) != _T('\0')) ¤	{¤		if (c == _T('&'))¤			no = 0;¤		else if (c == _T('\\') && isdigit(*src))¤			no = *src++ - _T('0');¤		else¤			no = -1;¤¤		if (no < 0) ¤		{	¤			// Ordinary character. ¤			if (c == _T('\\') && (*src == _T('\\') || *src == _T('&')))¤				c = *src++;¤			replacelen++;¤		} ¤		else if (startp[no] != NULL && endp[no] != NULL &&¤					endp[no] > startp[no]) ¤		{¤			// Get tagged expression¤			len = endp[no] - startp[no];¤			replacelen += len;¤		}¤	}¤¤	// Now allocate buf¤	buf = new TCHAR[replacelen+1];¤	if( buf == NULL )¤		return NULL;¤¤	TCHAR* sReplaceStr = buf;¤¤	// Add null termination¤	buf[replacelen] = _T('\0');¤	¤	// Now we can create the string¤	src = (TCHAR *)sReplaceExp;¤	while ((c = *src++) != _T('\0')) ¤	{¤		if (c == _T('&'))¤			no = 0;¤		else if (c == _T('\\') && isdigit(*src))¤			no = *src++ - _T('0');¤		else¤			no = -1;¤¤		if (no < 0) ¤		{	¤			// Ordinary character. ¤			if (c == _T('\\') && (*src == _T('\\') || *src == _T('&')))¤				c = *src++;¤			*buf++ = c;¤		} ¤		else if (startp[no] != NULL && endp[no] != NULL &&¤					endp[no] > startp[no]) ¤		{¤			// Get tagged expression¤			len = endp[no] - startp[no];¤			int tagpos = startp[no] - startp[0];¤¤			_tcsncpy(buf, sFoundText + tagpos, len);¤			¤			// k.f. added start //¤			m_pVars[no] = sFoundText  + tagpos;¤			m_VarLen[no] = len ;¤			m_iVarCount++ ;					// ?? or max(m_iVarCount, no) ?? //¤			// k.f. added end //¤			¤			buf += len;¤		}¤	}¤¤	return sReplaceStr;¤}¤¤// k.f. added //¤int CRegExp::GetVar(int iVarNr, CString &RetString)¤{¤	if (iVarNr < 1)¤		return -2 ;¤¤	if (m_iVarCount < 1)¤		return -3 ;¤¤	RetString = CString(m_pVars[iVarNr]) ;¤	RetString = RetString.Left(m_VarLen[iVarNr]) ;¤¤	return 1 ;¤}¤¤// k.f. added //¤int CRegExp::GetVarCount()¤{¤	return m_iVarCount ;¤}¤//#UC END# *470B17AB001F*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B17AB001F_DESTR_BODY*"
		    value      	(value Text 
|//#UC START# *470B17AB001F_DESTR_BODY*¤	delete program;¤	delete sFoundText;¤	//#UC END# *470B17AB001F_DESTR_BODY*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B17AB001F_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B17AB001F_CUSTOM_INCLUDES*¤#ifdef STRINGEX¤	#include <StringEx.h>¤	int RegSearchReplace(CStringEx& string, LPCTSTR sSearchExp, LPCTSTR sReplaceExp);¤#endif¤¤#define NSUBEXP  10¤//#UC END# *470B17AB001F_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B17AB001F*"
		    value      	(value Text 
|//#UC START# *470B17AB001F*¤public:¤	CRegExp();¤¤	CRegExp *RegComp( const TCHAR *re );¤	int RegFind(const TCHAR *str);¤	TCHAR* GetReplaceString( const TCHAR* sReplaceExp );¤	int GetFindLen()¤	{¤		if( startp[0] == NULL || endp[0] == NULL )¤			return 0;¤¤		return endp[0] - startp[0];¤	}¤¤	int GetVar(/*CString stSearchString,*/ int iVarNr, CString &RetString) ;¤¤	int GetVarCount() ;¤¤private:¤	TCHAR *regnext(TCHAR *node);¤	void reginsert(TCHAR op, TCHAR *opnd);¤¤	int regtry(TCHAR *string);¤	int regmatch(TCHAR *prog);¤	size_t regrepeat(TCHAR *node);¤	TCHAR *reg(int paren, int *flagp);¤	TCHAR *regbranch(int *flagp);¤	void regtail(TCHAR *p, TCHAR *val);¤	void regoptail(TCHAR *p, TCHAR *val);¤	TCHAR *regpiece(int *flagp);¤	TCHAR *regatom(int *flagp);¤¤	// Inline functions¤private:¤	TCHAR OP(TCHAR *p) {return *p;};¤	TCHAR *OPERAND( TCHAR *p) {return (TCHAR*)((short *)(p+1)+1); };¤¤	// regc - emit (if appropriate) a byte of code¤	void regc(TCHAR b)¤	{¤		if (bEmitCode)¤			*regcode++ = b;¤		else¤			regsize++;¤	};¤¤	// regnode - emit a node¤	TCHAR *	regnode(TCHAR op)¤	{¤		if (!bEmitCode) {¤			regsize += 3;¤			return regcode;¤		}¤¤		*regcode++ = op;¤		*regcode++ = _T('\0');		/* Null next pointer. */¤		*regcode++ = _T('\0');¤¤		return regcode-3;¤	};¤¤¤private:¤	BOOL bEmitCode;¤	BOOL bCompiled;¤	TCHAR *sFoundText;¤¤	TCHAR *startp[NSUBEXP];¤	TCHAR *endp[NSUBEXP];¤	TCHAR regstart;		// Internal use only. ¤	TCHAR reganch;		// Internal use only. ¤	TCHAR *regmust;		// Internal use only. ¤	int regmlen;		// Internal use only. ¤	TCHAR *program;		// Unwarranted chumminess with compiler. ¤¤	TCHAR *regparse;	// Input-scan pointer. ¤	int regnpar;		// () count. ¤	TCHAR *regcode;		// Code-emit pointer; ®dummy = don't. ¤	TCHAR regdummy[3];	// NOTHING, 0 next ptr ¤	long regsize;		// Code size. ¤¤	TCHAR *reginput;	// String-input pointer. ¤	TCHAR *regbol;		// Beginning of input, for ^ check. ¤¤	char*	m_pVars[10] ;¤	int		m_VarLen[10] ;¤	¤	int		m_iVarCount ;¤//#UC END# *470B17AB001F*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"WikiPageID (wiki)"
		    value      	(value Text 
|Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/CRegExp|470B17AB001F
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (h)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (wiki)"
		    value      	"wiki")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (cpp)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ElementCreationOrder"
		    value      	"16659834431"))
	    quid       	"470B17AB001F"
	    documentation 	"regexp"
	    stereotype 	"SimpleClass"
	    language   	"MDA Generator")
	(object Class "COptionTreeItemRadio"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"AbstarctOperation"
		    value      	"regular")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsNative"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need assign op"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need copy ctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need ref count"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need unsorted less"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"debug log"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"local supervisor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need UC"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need dctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need objcounter"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"no base class"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"non virtual base"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"singleton"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (cpp)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeItemRadio.cpp")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (h)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTreeItemRadio.h")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B286E01F4_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B286E01F4_CUSTOM_INCLUDES*¤#include "shared/Core/fix/win_afx.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTree.h"¤//#UC END# *470B286E01F4_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B286E01F4*"
		    value      	(value Text 
|//#UC START# *470B286E01F4*¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeItemRadio¤¤COptionTreeItemRadio::COptionTreeItemRadio()¤{¤	// Initialize variables¤	m_bFocus = FALSE;¤¤	// Set item type¤	SetItemType(OT_ITEM_RADIO);¤}¤¤/////////////////////////////////////////////////////////////////////////////¤// COptionTreeItemRadio message handlers¤¤void COptionTreeItemRadio::DrawAttribute(CDC *pDC, const RECT &rcRect)¤{¤	// If we don't have focus, text is drawn.¤	if (m_bFocus == TRUE)¤	{¤		return;¤	}¤¤	// Make sure options aren't NULL¤	if (m_otOption == NULL)¤	{¤		return;¤	}¤¤	// Make sure there is a window¤	if (!IsWindow(GetSafeHwnd()))¤	{¤		return;¤	}¤¤	// Set window position¤	if (IsWindow(GetSafeHwnd()))¤	{¤		SetWindowPos(NULL, m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height(), SWP_NOZORDER | SWP_NOACTIVATE | SWP_HIDEWINDOW);¤	}¤¤	// Declare variables¤	int nOldBack;¤	CRect rcText, rcRadio;¤	HGDIOBJ hOld;¤	OT_RADIO_NODE *nNode = NULL;¤	int nIndex = 0;¤	long lLastRadio = 0;¤	COLORREF crOld;¤	COLORREF crOldBack;¤¤	// Select font¤	hOld = pDC->SelectObject(m_otOption->GetNormalFont());¤	¤	// Set text color¤	if (IsReadOnly() == TRUE || m_otOption->IsWindowEnabled() == FALSE)¤	{¤		crOld = pDC->SetTextColor(GetSysColor(COLOR_GRAYTEXT));¤	}¤	else¤	{¤		crOld = pDC->SetTextColor(GetTextColor());¤	}¤¤	// Set background mode¤	nOldBack = pDC->SetBkMode(TRANSPARENT);¤¤	// Set background color¤	crOldBack = pDC->SetBkColor(GetBackgroundColor());	¤¤	// Calculate radio rect¤	lLastRadio = rcRect.top; ¤	rcRadio.left = rcRect.left;¤	rcRadio.right = rcRect.left + (long) OT_RADIO_SIZE;¤¤	// Go through and draw all nodes¤	nNode = Node_FindNode(nIndex);¤	while (nNode != NULL)¤	{¤		// -- Calculate radio rect¤		rcRadio.top = lLastRadio + OT_RADIO_VSPACE;¤		rcRadio.bottom = rcRadio.top + (long) OT_RADIO_SIZE;¤¤		// -- Calculate text rect¤		rcText.top = lLastRadio + OT_RADIO_VSPACE;¤		rcText.bottom = rcRadio.top + (long) OT_RADIO_SIZE;¤		rcText.left = rcRadio.right + ATTRIB_OFFSET;¤		rcText.right = rcRect.right;¤¤		// -- Save last radio¤		lLastRadio = rcRadio.bottom;¤¤		// -- Draw the radio¤		if (nNode->m_bChecked == TRUE)¤		{¤			pDC->DrawFrameControl(&rcRadio, DFC_BUTTON, DFCS_FLAT | DFCS_BUTTONRADIO | DFCS_CHECKED);¤		}¤		else¤		{¤			pDC->DrawFrameControl(&rcRadio, DFC_BUTTON, DFCS_FLAT | DFCS_BUTTONRADIO);¤		}¤¤		// -- Draw text¤		pDC->DrawText(nNode->m_strText, rcText, DT_SINGLELINE | DT_VCENTER);¤		pDC->DrawText(nNode->m_strText, rcText, DT_SINGLELINE | DT_VCENTER | DT_CALCRECT);¤¤		// -- Increase index¤		nIndex++;¤¤		// -- Get next node¤		nNode = Node_FindNode(nIndex);¤	}¤¤	// Restore GDI ojects¤	pDC->SetBkMode(nOldBack);¤	pDC->SelectObject(hOld);¤	pDC->SetTextColor(crOld);¤	pDC->SetBkColor(crOldBack);¤¤}¤¤void COptionTreeItemRadio::OnCommit()¤{¤	// Hide edit control¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		ShowWindow(SW_HIDE);¤	}¤}¤¤void COptionTreeItemRadio::OnRefresh()¤{¤	// Set the window positiion¤	if (IsWindow(GetSafeHwnd()))¤	{¤		SetWindowPos(NULL, m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height(), SWP_NOZORDER | SWP_NOACTIVATE);¤	}¤}¤¤void COptionTreeItemRadio::OnMove()¤{¤	// Set window position¤	if (IsWindow(GetSafeHwnd()))¤	{¤		SetWindowPos(NULL, m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height(), SWP_NOZORDER | SWP_NOACTIVATE);¤	}¤¤	// Hide window¤	if (m_bFocus == FALSE && IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		ShowWindow(SW_HIDE);¤	}¤¤	// Recalculate height¤	ReCalculateHeight();¤}¤¤void COptionTreeItemRadio::OnActivate()¤{¤	// Make sure window is valid¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		ShowWindow(SW_SHOW);¤¤		// -- Set window position¤		SetWindowPos(NULL, m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height(), SWP_NOZORDER | SWP_SHOWWINDOW);¤¤		// -- Set focus¤		SetFocus();¤	}¤}¤¤void COptionTreeItemRadio::OnSetFocus(CWnd* pOldWnd) ¤{¤	// Mark focus¤	m_bFocus = TRUE;		¤	¤	COptionTreeRadioButton::OnSetFocus(pOldWnd);	¤}¤¤void COptionTreeItemRadio::OnKillFocus(CWnd* pNewWnd) ¤{¤	// Validate¤	if (m_otOption == NULL)¤	{¤		COptionTreeRadioButton::OnKillFocus(pNewWnd);¤		return;¤	}¤¤	// See if new window is tree of list¤	if (m_otOption->IsChild(pNewWnd) == TRUE)¤	{¤		// -- Mark focus¤		m_bFocus = FALSE;¤¤		// -- Commit changes¤		CommitChanges(false);¤	}	¤	¤	COptionTreeRadioButton::OnKillFocus(pNewWnd);	¤}¤¤void COptionTreeItemRadio::CleanDestroyWindow()¤{¤	// Destroy window¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Destroy window¤		DestroyWindow();¤	}¤}¤¤BOOL COptionTreeItemRadio::CreateRadioItem()¤{¤	// Declare variables¤	DWORD dwStyle = WS_CHILD | WS_VISIBLE | WS_CLIPSIBLINGS | WS_CLIPCHILDREN;¤	BOOL bRet = FALSE;¤¤	// Make sure options is not NULL¤	if (m_otOption == NULL)¤	{¤		return FALSE;¤	}¤¤	// Create edit control¤	if (!IsWindow(GetSafeHwnd()))¤	{¤		// -- Create the edit view¤		bRet = Create(AfxRegisterWndClass(CS_HREDRAW | CS_VREDRAW, ::LoadCursor(NULL, IDC_ARROW)), _T(""), dwStyle, m_rcAttribute, m_otOption->GetCtrlParent(), GetCtrlID());¤¤		// -- Setup window¤		if (bRet == TRUE)¤		{¤¤			// -- -- Set draw multiline¤			SetDrawMultiline(TRUE);		¤¤			// -- -- Set font¤			SetFont(m_otOption->GetNormalFont(), TRUE);¤¤			// -- -- Set check options owner¤			SetRadioOptionsOwner(m_otOption);¤¤			// -- -- Set window position¤			SetWindowPos(NULL, m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height(), SWP_NOZORDER | SWP_SHOWWINDOW);¤¤			// -- -- Hide window¤			ShowWindow(SW_HIDE);¤		}¤	}¤¤	return bRet;¤}¤¤void COptionTreeItemRadio::ReCalculateHeight()¤{¤	// Declare variables¤	OT_RADIO_NODE *nNode = NULL;¤	int nIndex = 0;¤	long lHeight = 0;¤¤	// Go through all nodes¤	nNode = Node_FindNode(nIndex);¤	while (nNode != NULL)¤	{¤		// -- Add to height¤		lHeight += (OT_RADIO_VSPACE + (long) OT_RADIO_SIZE);¤		¤		// -- Increase index¤		nIndex++;¤¤		// -- Get next node¤		nNode = Node_FindNode(nIndex);¤	}¤¤	// Add last space to height¤	lHeight += OT_RADIO_VSPACE;¤¤	// Set item height¤	SetItemHeight(lHeight);¤¤	// Force redraw¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Force redraw¤		Invalidate();	¤¤		// -- Update window¤		UpdateWindow();¤	}¤}¤¤void COptionTreeItemRadio::InsertNewRadio(CString strText, BOOL bChecked)¤{¤	// Uncheck all¤	if (bChecked == TRUE)¤	{¤		Node_UnCheckAll();¤	}¤¤	// Insert new node¤	Node_Insert(strText, bChecked);¤¤	// Recalculate height¤	ReCalculateHeight();¤}¤¤BOOL COptionTreeItemRadio::GetMultiline()¤{¤	// Return true always¤	return TRUE;¤}¤¤void COptionTreeItemRadio::OnDeSelect()¤{¤	// Commit changes¤	CommitChanges(false);¤}¤¤void COptionTreeItemRadio::OnSelect()¤{¤	// Commit changes¤	CommitChanges(false);¤}¤¤int COptionTreeItemRadio::GetCheckedRadio()¤{¤	return Node_GetChecked();¤}¤¤void COptionTreeItemRadio::HasChanged(void)¤{¤  CommitChanges();¤}¤//#UC END# *470B286E01F4*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B286E01F4_DESTR_BODY*"
		    value      	(value Text 
|//#UC START# *470B286E01F4_DESTR_BODY*¤	//#UC END# *470B286E01F4_DESTR_BODY*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B286E01F4_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470B286E01F4_CUSTOM_INCLUDES*¤#include "shared/WinGUI/OptionTreeControls/OptionTreeDef.h"¤#include "shared/WinGUI/OptionTreeControls/OptionTreeRes.h"¤//#UC END# *470B286E01F4_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B286E01F4*"
		    value      	(value Text 
|//#UC START# *470B286E01F4*¤// Construction¤public:¤	COptionTreeItemRadio();¤	virtual void OnMove();¤	virtual void OnRefresh();¤	virtual void OnCommit();¤	virtual void OnActivate();¤	virtual void CleanDestroyWindow();¤	virtual void OnDeSelect();¤	virtual void OnSelect();¤	virtual void DrawAttribute(CDC *pDC, const RECT &rcRect);¤	virtual void HasChanged(void);¤	virtual void OnShow(BOOL bShow){;}¤¤// Attributes¤public:¤¤// Operations¤public:¤¤// Overrides¤	// ClassWizard generated virtual function overrides¤	//{{AFX_VIRTUAL(COptionTreeItemRadio)¤	//}}AFX_VIRTUAL¤¤// Implementation¤public:¤	int GetCheckedRadio();¤	BOOL GetMultiline();¤	void InsertNewRadio(CString strText, BOOL bChecked);¤	BOOL CreateRadioItem();¤¤protected:¤	void ReCalculateHeight();¤¤	// Generated message map functions¤protected:¤	BOOL m_bFocus;¤	//{{AFX_MSG(COptionTreeItemRadio)¤	afx_msg void OnSetFocus(CWnd* pOldWnd);¤	afx_msg void OnKillFocus(CWnd* pNewWnd);¤	//}}AFX_MSG¤¤//#UC END# *470B286E01F4*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"WikiPageID (wiki)"
		    value      	(value Text 
|Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTreeItemRadio|470B286E01F4
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470B286E01F4_MESSAGE_MAP*"
		    value      	(value Text 
|//#UC START# *470B286E01F4_MESSAGE_MAP*¤	ON_WM_SETFOCUS()¤	ON_WM_KILLFOCUS()¤	//#UC END# *470B286E01F4_MESSAGE_MAP*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (wiki)"
		    value      	"wiki")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (h)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (cpp)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ElementCreationOrder"
		    value      	"16659834919"))
	    quid       	"470B286E01F4"
	    documentation 	"radio item"
	    stereotype 	"GuiControl"
	    superclasses 	(list inheritance_relationship_list
		(object Inheritance_Relationship
		    quid       	"470B287D00DA"
		    supplier   	"Logical View::shared::WinGUI::OptionTreeControls::COptionTreeRadioButton"
		    quidu      	"470B06DC0177"))
	    language   	"MDA Generator")
	(object Class "OptionTreeRes"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"AbstarctOperation"
		    value      	"regular")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsNative"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need UC"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (h)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/OptionTreeRes.h")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (rc)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/OptionTreeRes.rc")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470B6E0A001F*"
		    value      	(value Text 
|//#UC START# *470B6E0A001F*¤#define IDC_CHANGEFONT                  102¤#define IDC_SPLITTER                    130¤#define IDC_DRAG                        131¤#define IDC_MOVE                        132¤#define ID_FONTSEL_OK                   139¤#define ID_FONTSEL_CANCEL               140¤#define ID_FONTSEL_APPLY                141¤#define ID_FONTSEL_DEFAULT              142¤#define ID_FONTSEL_COLOR                143¤#define ID_FONT                         144¤#define ID_CHECK_STRIKEOUT              145¤#define ID_CHECK_UNDERLINE              146¤#define ID_GROUP_EFFECTS                147¤#define ID_SAMPLE                       148¤#define ID_STYLE                        149¤#define ID_SIZE                         150¤#define ID_GROUP_COLOR                  151¤#define ID_STATIC_SAMPLE                152¤#define ID_SCRIPT                       153¤#define ID_COMBO_FONT                   154¤#define ID_COMBO_STYLE                  155¤#define ID_COMBO_SIZE                   156¤#define ID_COMBO_SCRIPT                 157¤#define IDD_C_OPTION_TREE_FONT_SEL		32000¤//#UC END# *470B6E0A001F*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"rc:*470B6E0A001F*"
		    value      	(value Text 
|//#UC START# *470B6E0A001F*¤#include "winuser.h"¤////////////////////////////////////////////////////////////////////////////¤//¤// Dialog¤//¤¤IDD_C_OPTION_TREE_FONT_SEL DIALOG 13, 54, 263, 196¤STYLE DS_SETFONT | DS_MODALFRAME | DS_3DLOOK | WS_POPUP | WS_CAPTION | ¤    WS_SYSMENU¤CAPTION "Font"¤FONT 8, "MS Shell Dlg"¤BEGIN¤    COMBOBOX        ID_COMBO_FONT,7,16,98,76,CBS_SIMPLE | CBS_OWNERDRAWFIXED | ¤                    CBS_AUTOHSCROLL | CBS_SORT | CBS_HASSTRINGS | ¤                    CBS_DISABLENOSCROLL | WS_VSCROLL | WS_TABSTOP¤    COMBOBOX        ID_COMBO_STYLE,110,16,62,76,CBS_SIMPLE | ¤                    CBS_DISABLENOSCROLL | WS_VSCROLL | WS_TABSTOP¤    COMBOBOX        ID_COMBO_SIZE,177,16,27,76,CBS_SIMPLE | CBS_SORT | ¤                    CBS_DISABLENOSCROLL | WS_VSCROLL | WS_TABSTOP¤    CONTROL         "Stri&keout",ID_CHECK_STRIKEOUT,"Button",BS_AUTOCHECKBOX | ¤                    WS_TABSTOP,13,110,49,10¤    CONTROL         "&Underline",ID_CHECK_UNDERLINE,"Button",BS_AUTOCHECKBOX | ¤                    WS_TABSTOP,13,123,51,10¤    PUSHBUTTON      "",ID_FONTSEL_COLOR,115,115,82,12,WS_GROUP¤    DEFPUSHBUTTON   "&OK",ID_FONTSEL_OK,210,16,45,14,WS_GROUP¤    PUSHBUTTON      "&Cancel",ID_FONTSEL_CANCEL,210,32,45,14,WS_GROUP¤    PUSHBUTTON      "&Apply",ID_FONTSEL_APPLY,210,48,45,14,NOT WS_VISIBLE | ¤                    WS_GROUP¤    PUSHBUTTON      "&Default",ID_FONTSEL_DEFAULT,210,64,45,14,NOT ¤                    WS_VISIBLE | WS_GROUP¤    LTEXT           "&Font:",ID_FONT,7,7,40,9¤    LTEXT           "Font st&yle:",ID_STYLE,110,7,44,9¤    LTEXT           "&Size:",ID_SIZE,172,7,30,9¤    GROUPBOX        "Effects",ID_GROUP_EFFECTS,7,97,98,43,WS_GROUP¤    GROUPBOX        "Color",ID_GROUP_COLOR,110,97,94,43,WS_GROUP¤    GROUPBOX        "Sample",ID_SAMPLE,7,145,197,43,WS_GROUP¤    CTEXT           "AaBbYyZz",ID_STATIC_SAMPLE,13,155,186,29,SS_NOPREFIX | ¤                    NOT WS_VISIBLE¤END¤//#UC END# *470B6E0A001F*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (h)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (rc)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ElementCreationOrder"
		    value      	"16659835411"))
	    quid       	"470B6E0A001F"
	    documentation 	"ресурсы"
	    stereotype 	"Resource"
	    language   	"MDA Generator")
	(object Class "COptionTree3StateCheckBox"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"AbstarctOperation"
		    value      	"regular")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsNative"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need assign op"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need copy ctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need ref count"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"Need unsorted less"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"debug log"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"local supervisor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need UC"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need dctor"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"need objcounter"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"no base class"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"non virtual base"
		    value      	"true")
		(object Attribute
		    tool       	"MDA Generator User Properties"
		    name       	"singleton"
		    value      	"false")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (h)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTree3StateCheckBox.h")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SELF GENERATED FILE (cpp)"
		    value      	"w:/shared/WinGUI/OptionTreeControls/COptionTree3StateCheckBox.cpp")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470CC30A002E_CUSTOM_INCLUDES*"
		    value      	(value Text 
|//#UC START# *470CC30A002E_CUSTOM_INCLUDES*¤#include "shared/Core/fix/win_afx.h"¤#include "shared/WinGUI/OptionTreeControls/COptionTree.h"¤//#UC END# *470CC30A002E_CUSTOM_INCLUDES*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470CC30A002E*"
		    value      	(value Text 
|//#UC START# *470CC30A002E*¤void COptionTree3StateCheckBox::OnSetFocus(CWnd* pOldWnd) ¤{¤	// Mark focus¤	m_focus = true;	¤	¤	COptionTreeCheckButton::OnSetFocus(pOldWnd);	¤}¤¤void COptionTree3StateCheckBox::OnKillFocus(CWnd* pNewWnd) ¤{	¤	// Validate¤	if (m_otOption == NULL)¤	{¤		COptionTreeCheckButton::OnKillFocus(pNewWnd);¤		return;¤	}¤¤	// See if new window is tree of list¤	if (m_otOption->IsChild (pNewWnd) == TRUE)¤	{¤		// -- Mark focus¤		m_focus = true;¤¤		// -- Commit changes¤		//CommitChanges();¤	}¤¤	COptionTreeCheckButton::OnKillFocus(pNewWnd);	¤}¤¤void COptionTree3StateCheckBox::OnPaint() ¤{¤	// Make sure options aren't NULL¤	if (m_otOption == NULL)¤	{¤		return;¤	}¤¤	// Declare variables¤	CPaintDC dc(this);¤	CDC* pDCMem = new CDC;¤	CBitmap bpMem;¤	CBitmap *bmOld;¤	COLORREF crOld;¤	HGDIOBJ hOldBrush;¤	int nOldBack;¤	CRect rcText, rcCheck, rcClient;¤	CString strText;¤	HGDIOBJ hOld;¤¤	// Get client rectangle¤	GetClientRect(rcClient);¤¤	// Create DC¤	pDCMem->CreateCompatibleDC(&dc);¤	¤	// Create bitmap¤	bpMem.CreateCompatibleBitmap(&dc, rcClient.Width(), rcClient.Height());¤¤	// Select bitmap¤	bmOld = pDCMem->SelectObject(&bpMem);¤	¤	// Set background mode¤	nOldBack = pDCMem->SetBkMode(TRANSPARENT);¤¤	// Set text color¤	//crOld = pDCMem->SetTextColor(GetSysColor(COLOR_WINDOWTEXT));¤  // ce¤	if (get_state () == true) {¤		crOld = pDCMem->SetTextColor(_CLR_CHECKED);¤	} else if (get_state () == false) {¤		crOld = pDCMem->SetTextColor(_CLR_UNCHECKED);¤	} else {¤		crOld = pDCMem->SetTextColor(RGB (100,100,100));¤	}¤¤	// Select font¤	hOld = pDCMem->SelectObject(m_otOption->GetNormalFont());¤¤	// Draw control background¤	if (m_otOption->IsWindowEnabled() == FALSE) {¤		hOldBrush = pDCMem->SelectObject(GetSysColorBrush(COLOR_BTNFACE));¤	} else {¤		hOldBrush = pDCMem->SelectObject(GetSysColorBrush(COLOR_WINDOW));¤	}¤	pDCMem->PatBlt(rcClient.left, rcClient.top, rcClient.Width(), rcClient.Height(), PATCOPY);¤¤	if(GetOption(OT_CHECKBOX_SHOWCHECK) == TRUE) {¤		// Get rectangle¤		rcCheck.left  = rcClient.left + 1;¤		rcCheck.right = rcCheck.left + (long) OT_CHECKBOX_SIZE;¤		rcCheck.top = rcClient.top + ATTRIB_OFFSET - 1;¤		rcCheck.bottom = rcCheck.top + (long) OT_CHECKBOX_SIZE;¤  		¤		// Draw check¤		if (get_state () == true) {¤			pDCMem->DrawFrameControl(&rcCheck, DFC_BUTTON, DFCS_FLAT | DFCS_BUTTONCHECK | DFCS_CHECKED);¤		} else if (get_state () == false) {¤			pDCMem->DrawFrameControl(&rcCheck, DFC_BUTTON, DFCS_FLAT | DFCS_BUTTONCHECK);¤		} else {¤			//undefined¤			pDCMem->DrawFrameControl(&rcCheck, DFC_BUTTON, DFCS_FLAT | DFCS_BUTTON3STATE | DFCS_INACTIVE);¤		}¤	} else {¤		rcCheck.left  = rcClient.left + 1;¤		rcCheck.right = rcCheck.left;¤		rcCheck.top = rcClient.top + ATTRIB_OFFSET - 1;¤		rcCheck.bottom = rcCheck.top + (long) OT_CHECKBOX_SIZE;¤	}¤	// Draw text¤	if (GetOption(OT_CHECKBOX_SHOWTEXT) == TRUE) {¤		// -- Get text¤		CString strText = get_state_str ().c_str ();¤¤		// -- Get rectangle¤		rcText.left  = rcCheck.right + ATTRIB_OFFSET;¤		rcText.right = rcClient.right;¤		rcText.top = rcClient.top;¤		rcText.bottom = rcClient.bottom;¤¤		// -- Draw text¤		pDCMem->DrawText(strText, rcText, DT_SINGLELINE | DT_VCENTER);¤	}¤¤	// Save check rectangle¤	m_rcCheck = rcCheck;¤	if (GetOption(OT_CHECKBOX_SHOWTEXT) == TRUE) {¤		m_rcCheck.right = rcText.right;¤	}¤¤	// Copy to screen¤	dc.BitBlt(0, 0, rcClient.Width(), rcClient.Height(), pDCMem, 0, 0, SRCCOPY);¤¤	// Restore GDI ojects¤	pDCMem->SelectObject(bmOld);¤	pDCMem->SelectObject(hOldBrush);¤	pDCMem->SetBkMode(nOldBack);¤	pDCMem->SelectObject(hOld);¤	pDCMem->SetTextColor(crOld);	¤	¤	// Delete objects¤	if (pDCMem->GetSafeHdc() != NULL) {¤		pDCMem->DeleteDC();¤	}¤	delete pDCMem;¤	if (bpMem.GetSafeHandle() != NULL) {¤		bpMem.DeleteObject();¤	}¤}¤¤BOOL COptionTree3StateCheckBox::OnEraseBkgnd(CDC* pDC) {¤	// Naa, we like flicker free better¤	return FALSE;¤}¤¤void COptionTree3StateCheckBox::OnLButtonUp(UINT nFlags, CPoint point) {¤	// See if check was pressed¤	if (m_rcCheck.PtInRect(point) == TRUE)¤	{¤		// -- Reverse check¤		if (get_state () == true) {¤			set_state (false);¤		} else if (get_state () == false) {¤			set_state (boost::indeterminate);¤		} else {¤			set_state (true);¤		}¤		// -- Force redraw¤		Invalidate();¤¤		// -- Update window¤		UpdateWindow();¤	}¤	¤	CWnd::OnLButtonUp(nFlags, point);¤}¤//#UC END# *470CC30A002E*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470CC30A002E_DESTR_BODY*"
		    value      	(value Text 
|//#UC START# *470CC30A002E_DESTR_BODY*¤	//#UC END# *470CC30A002E_DESTR_BODY*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470CC30A002E_CUSTOM_INCLUDES*"
		    value      	"//#UC START# *470CC30A002E_CUSTOM_INCLUDES*¤//#UC END# *470CC30A002E_CUSTOM_INCLUDES*")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"h:*470CC30A002E*"
		    value      	(value Text 
|//#UC START# *470CC30A002E*¤protected:¤	//{{AFX_MSG(COptionTree3StateCheckBox)¤	afx_msg void OnKillFocus(CWnd* pNewWnd);¤	afx_msg void OnSetFocus(CWnd* pOldWnd);¤	afx_msg void OnPaint();¤	afx_msg BOOL OnEraseBkgnd(CDC* pDC);¤	afx_msg void OnLButtonUp(UINT nFlags, CPoint point);¤	//}}AFX_MSG¤private:¤	CRect m_rcCheck;¤//#UC END# *470CC30A002E*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"WikiPageID (wiki)"
		    value      	(value Text 
|Shared (java and c++),key:SHR,guid:44FEAD4A0272/Home/Модель проекта "shared"/WinGUI/OptionTreeControls/COptionTree3StateCheckBox|470CC30A002E
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"cpp:*470CC30A002E_MESSAGE_MAP*"
		    value      	(value Text 
|//#UC START# *470CC30A002E_MESSAGE_MAP*¤	ON_WM_KILLFOCUS()¤	ON_WM_SETFOCUS()¤	ON_WM_PAINT()¤	ON_WM_ERASEBKGND()¤	ON_WM_LBUTTONUP()¤	//#UC END# *470CC30A002E_MESSAGE_MAP*
		    ))
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (wiki)"
		    value      	"wiki")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (h)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"SourceType (cpp)"
		    value      	"file")
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"ElementCreationOrder"
		    value      	"16659835885"))
	    quid       	"470CC30A002E"
	    documentation 	"чек-бокс с тремя состояниями"
	    stereotype 	"GuiControl"
	    superclasses 	(list inheritance_relationship_list
		(object Inheritance_Relationship
		    quid       	"470CC50102BF"
		    supplier   	"Logical View::shared::WinGUI::OptionTreeControls::COptionTreeCheckButton"
		    quidu      	"470AFD4802FD"))
	    operations 	(list Operations
		(object Operation "new_ctor_op"
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"AbstarctOperation"
			    value      	"regular")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"IsNative"
			    value      	"false")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*470CC3420167_BASE_INIT*"
			    value      	"//#UC START# *470CC3420167_BASE_INIT*¤: m_state (boost::indeterminate), m_focus (false), m_rcCheck (0, 0, 0, 0)¤//#UC END# *470CC3420167_BASE_INIT*")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*470CC3420167_BODY*"
			    value      	(value Text 
|//#UC START# *470CC3420167_BODY*¤	// Set item type¤	SetItemType(OT_ITEM_3STATECHECKBOX);¤	//#UC END# *470CC3420167_BODY*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ElementCreationOrder"
			    value      	"16659837273"))
		    quid       	"470CC3420167"
		    documentation 	
|конструктор
|
		    
		    stereotype 	"ctor"
		    concurrency 	"Sequential"
		    opExportControl 	"Public"
		    uid        	0)
		(object Operation "OnMove"
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"AbstarctOperation"
			    value      	"regular")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"IsNative"
			    value      	"false")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*470CC3BD02FD*"
			    value      	(value Text 
|//#UC START# *470CC3BD02FD*¤	if (IsWindow(GetSafeHwnd())) {¤		MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height());¤	}¤¤¤	// Hide window¤	if (m_focus == false && IsWindow(GetSafeHwnd())) {¤		// -- Show window¤		ShowWindow(SW_HIDE);¤	}¤	//#UC END# *470CC3BD02FD*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ElementCreationOrder"
			    value      	"16659838601"))
		    quid       	"470CC3BD02FD"
		    documentation 	"реакция контрола на движение мыши"
		    stereotype 	"chg"
		    concurrency 	"Sequential"
		    opExportControl 	"Public"
		    uid        	0)
		(object Operation "OnRefresh"
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"AbstarctOperation"
			    value      	"regular")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"IsNative"
			    value      	"false")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*470CC3D602CE*"
			    value      	(value Text 
|//#UC START# *470CC3D602CE*¤	if (IsWindow(GetSafeHwnd()))¤	{¤		MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height());¤	}¤	//#UC END# *470CC3D602CE*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ElementCreationOrder"
			    value      	"16659838987"))
		    quid       	"470CC3D602CE"
		    documentation 	"реакция контрола на обновление"
		    stereotype 	"chg"
		    concurrency 	"Sequential"
		    opExportControl 	"Public"
		    uid        	0)
		(object Operation "OnCommit"
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"AbstarctOperation"
			    value      	"regular")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"IsNative"
			    value      	"false")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*470CC3DF000F*"
			    value      	(value Text 
|//#UC START# *470CC3DF000F*¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		ShowWindow(SW_HIDE);¤	}¤	//#UC END# *470CC3DF000F*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ElementCreationOrder"
			    value      	"16659839343"))
		    quid       	"470CC3DF000F"
		    documentation 	"реакция контрола на изменение"
		    stereotype 	"chg"
		    concurrency 	"Sequential"
		    opExportControl 	"Public"
		    uid        	0)
		(object Operation "OnActivate"
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"AbstarctOperation"
			    value      	"regular")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"IsNative"
			    value      	"false")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*470CC3EB0119*"
			    value      	(value Text 
|//#UC START# *470CC3EB0119*¤	// Make sure window is valid¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Show window¤		ShowWindow(SW_SHOW);¤¤		// -- Set window position¤		MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height());¤¤		// -- Set focus¤		SetFocus();¤	}¤	//#UC END# *470CC3EB0119*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ElementCreationOrder"
			    value      	"16659839686"))
		    quid       	"470CC3EB0119"
		    documentation 	"реакция контрола на активацию"
		    stereotype 	"chg"
		    concurrency 	"Sequential"
		    opExportControl 	"Public"
		    uid        	0)
		(object Operation "CleanDestroyWindow"
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"AbstarctOperation"
			    value      	"regular")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"IsNative"
			    value      	"false")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*470CC3F8038A*"
			    value      	(value Text 
|//#UC START# *470CC3F8038A*¤	// Destroy window¤	if (IsWindow(GetSafeHwnd()))¤	{¤		// -- Destroy window¤		DestroyWindow();¤	}¤	//#UC END# *470CC3F8038A*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ElementCreationOrder"
			    value      	"16659840031"))
		    quid       	"470CC3F8038A"
		    documentation 	"уничтожение контрола"
		    stereotype 	"chg"
		    concurrency 	"Sequential"
		    opExportControl 	"Public"
		    uid        	0)
		(object Operation "DrawAttribute"
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"AbstarctOperation"
			    value      	"regular")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"IsNative"
			    value      	"false")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*470CC401036B*"
			    value      	(value Text 
|//#UC START# *470CC401036B*¤	// If we don't have focus, text is drawn.¤	if (m_focus == true)¤	{¤		return;¤	}¤¤	// Make sure options aren't NULL¤	if (m_otOption == NULL)¤	{¤		return;¤	}¤¤	// Make sure there is a window¤	if (!IsWindow(GetSafeHwnd()))¤	{¤		return;¤	}¤¤	// Set window position¤	if (IsWindow(GetSafeHwnd()))¤	{¤		MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height());¤	}¤¤	// Declare variables¤	HGDIOBJ hOld;¤	COLORREF crOld;¤	int nOldBack;¤	CRect rcText, rcCheck;¤	CString strText;¤	COLORREF crOldBack;¤¤	// Select font¤	hOld = dc->SelectObject(m_otOption->GetNormalFont());¤	¤	// Set text color¤	if (IsReadOnly() == TRUE || m_otOption->IsWindowEnabled() == FALSE)¤	{¤		crOld = dc->SetTextColor(GetSysColor(COLOR_GRAYTEXT));¤	}¤	else¤	{¤		crOld = dc->SetTextColor(GetTextColor());¤	}¤¤	// Set background mode¤	nOldBack = dc->SetBkMode(TRANSPARENT);¤¤	// Set background color¤	crOldBack = dc->SetBkColor(GetBackgroundColor());	¤¤	// Draw check box¤  if (COptionTreeCheckButton::GetOption(OT_CHECKBOX_SHOWCHECK) == TRUE)¤	{¤		// -- Get rectangle¤		/*rcCheck.left  = rc.left;¤		rcCheck.right = rc.left + (long) OT_CHECKBOX_SIZE;¤		rcCheck.top = rc.top + ATTRIB_OFFSET - 2;¤		rcCheck.bottom = rc.top + (long) OT_CHECKBOX_SIZE;*/¤		rcCheck.left  = rc.left + 1;¤		rcCheck.right = rc.left + (long) OT_CHECKBOX_SIZE;¤		rcCheck.top = rc.top + ATTRIB_OFFSET - 1;¤		rcCheck.bottom = rcCheck.top + (long) OT_CHECKBOX_SIZE;¤		¤		// -- Draw check¤		if (get_state () == true) {¤			dc->DrawFrameControl(&rcCheck, DFC_BUTTON, DFCS_FLAT | DFCS_BUTTONCHECK | DFCS_CHECKED);¤		} else if (get_state () == false) {¤			dc->DrawFrameControl(&rcCheck, DFC_BUTTON, DFCS_FLAT | DFCS_BUTTONCHECK);¤		} else {¤			//undefined¤			dc->DrawFrameControl(&rcCheck, DFC_BUTTON, DFCS_FLAT | DFCS_BUTTON3STATE | DFCS_INACTIVE);¤		}¤	}¤¤	// Draw text¤	if (COptionTreeCheckButton::GetOption(OT_CHECKBOX_SHOWTEXT) == TRUE)¤	{¤		// -- Get text¤		strText = get_state_str ().c_str ();¤		/*if (GetCheck() == TRUE)¤		{¤			strText = GetCheckedText();¤		}¤		else¤		{¤			strText = GetUnCheckedText();¤		}*/¤¤		// -- Get rectangle¤    if (COptionTreeCheckButton::GetOption(OT_CHECKBOX_SHOWCHECK) == TRUE)¤		{¤			rcText.left  = rcCheck.right + ATTRIB_OFFSET;¤			rcText.right = rc.right;¤			rcText.top = rc.top;¤			rcText.bottom = rc.bottom;¤		}¤		else¤		{¤			rcText  = rc;¤		}¤¤		// -- Draw text¤		dc->DrawText(strText, rcText, DT_SINGLELINE | DT_VCENTER);¤	}¤¤	// Restore GDI ojects¤	dc->SelectObject(hOld);¤	dc->SetTextColor(crOld);¤	dc->SetBkMode(nOldBack);¤	dc->SetBkColor(crOldBack);¤	//#UC END# *470CC401036B*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ElementCreationOrder"
			    value      	"16659840431"))
		    quid       	"470CC401036B"
		    documentation 	"отрисовка данных контрола"
		    stereotype 	"chg"
		    parameters 	(list Parameters
			(object Parameter "inout dc"
			    attributes 	(list Attribute_Set
				(object Attribute
				    tool       	"MDA Generator"
				    name       	"ResolvedTypeGuid"
				    value      	"470CC36A009C")
				(object Attribute
				    tool       	"MDA Generator"
				    name       	"ElementCreationOrder"
				    value      	"16659840733"))
			    quid       	"470CC41A01E4"
			    type       	"CDC"
			    quidu      	"470CC36A009C")
			(object Parameter "rc"
			    attributes 	(list Attribute_Set
				(object Attribute
				    tool       	"MDA Generator"
				    name       	"ResolvedTypeGuid"
				    value      	"470CC39A01F4")
				(object Attribute
				    tool       	"MDA Generator"
				    name       	"ElementCreationOrder"
				    value      	"16659841089"))
			    quid       	"470CC41A0232"
			    type       	"RECT"
			    quidu      	"470CC39A01F4"))
		    concurrency 	"Sequential"
		    opExportControl 	"Public"
		    uid        	0)
		(object Operation "OnDeSelect"
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"AbstarctOperation"
			    value      	"regular")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"IsNative"
			    value      	"false")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*470CC42303C8*"
			    value      	(value Text 
|//#UC START# *470CC42303C8*¤	//#UC END# *470CC42303C8*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ElementCreationOrder"
			    value      	"16659841493"))
		    quid       	"470CC42303C8"
		    documentation 	"реакция контрола на снятие выделения"
		    stereotype 	"chg"
		    concurrency 	"Sequential"
		    opExportControl 	"Public"
		    uid        	0)
		(object Operation "OnSelect"
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"AbstarctOperation"
			    value      	"regular")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"IsNative"
			    value      	"false")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*470CC42B00BB*"
			    value      	(value Text 
|//#UC START# *470CC42B00BB*¤	//#UC END# *470CC42B00BB*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ElementCreationOrder"
			    value      	"16659841835"))
		    quid       	"470CC42B00BB"
		    documentation 	"реакция контрола на выделение"
		    stereotype 	"chg"
		    concurrency 	"Sequential"
		    opExportControl 	"Public"
		    uid        	0)
		(object Operation "OnShow"
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"AbstarctOperation"
			    value      	"regular")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"IsNative"
			    value      	"false")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*470CC43301D4*"
			    value      	(value Text 
|//#UC START# *470CC43301D4*¤	//#UC END# *470CC43301D4*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ElementCreationOrder"
			    value      	"16659842190"))
		    quid       	"470CC43301D4"
		    documentation 	"реакция контрола на отображение/скрытие"
		    stereotype 	"chg"
		    parameters 	(list Parameters
			(object Parameter "bShow"
			    attributes 	(list Attribute_Set
				(object Attribute
				    tool       	"MDA Generator"
				    name       	"ResolvedTypeGuid"
				    value      	"45CC30D8003E")
				(object Attribute
				    tool       	"MDA Generator"
				    name       	"ElementCreationOrder"
				    value      	"16659842487"))
			    quid       	"470CC44E01B5"
			    type       	"BOOL"
			    quidu      	"45CC30D8003E"))
		    concurrency 	"Sequential"
		    opExportControl 	"Public"
		    uid        	0)
		(object Operation "set_state"
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"AbstarctOperation"
			    value      	"regular")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"IsNative"
			    value      	"false")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*470CC45E002E*"
			    value      	(value Text 
|//#UC START# *470CC45E002E*¤	m_state = state;¤	if (state == true) {¤		m_crText = _CLR_CHECKED;¤	} else if (state == false) {¤		m_crText = _CLR_UNCHECKED;¤	} else {¤		m_crText = RGB (100, 100, 100);¤	}¤	//#UC END# *470CC45E002E*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ElementCreationOrder"
			    value      	"16659842893"))
		    quid       	"470CC45E002E"
		    documentation 	
|установка состояния
|\state - состояние (true, false, undefined)
|\commit - нужео ли коммитеть изменения
		    
		    stereotype 	"chg"
		    parameters 	(list Parameters
			(object Parameter "state"
			    attributes 	(list Attribute_Set
				(object Attribute
				    tool       	"MDA Generator"
				    name       	"ResolvedTypeGuid"
				    value      	"460ABDFA0377")
				(object Attribute
				    tool       	"MDA Generator"
				    name       	"ElementCreationOrder"
				    value      	"16659843202"))
			    quid       	"470CC4B9029F"
			    type       	"tribool"
			    quidu      	"460ABDFA0377"))
		    concurrency 	"Sequential"
		    opExportControl 	"Public"
		    uid        	0)
		(object Operation "CreateCheckBoxItem"
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"AbstarctOperation"
			    value      	"regular")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"IsNative"
			    value      	"false")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*470CC552002E*"
			    value      	(value Text 
|//#UC START# *470CC552002E*¤	DWORD dwStyle = WS_CHILD | WS_VISIBLE | WS_CLIPSIBLINGS | WS_CLIPCHILDREN;¤	BOOL bRet = FALSE;¤¤	// Make sure options is not NULL¤	if (m_otOption == NULL)¤	{¤		return false;¤	}¤¤	// Create edit control¤	if (!IsWindow(GetSafeHwnd())) {¤		// -- Create the edit view¤		bRet = Create(AfxRegisterWndClass(CS_HREDRAW | CS_VREDRAW, ::LoadCursor(NULL, IDC_ARROW)), _T(""), dwStyle, m_rcAttribute, m_otOption->GetCtrlParent(), GetCtrlID());¤		// -- Setup window¤		if (bRet == TRUE) {¤			// -- -- Set font¤			SetFont(m_otOption->GetNormalFont(), TRUE);¤¤			// -- -- Save options¤			COptionTreeCheckButton::m_dwOptions = options;¤¤			// -- -- Set check¤			set_state(state);¤¤			// -- Set check options owner¤			SetCheckOptionsOwner(m_otOption);¤¤			// -- -- Set window position¤			MoveWindow(m_rcAttribute.left, m_rcAttribute.top, m_rcAttribute.Width(), m_rcAttribute.Height());¤¤			// -- -- Hide window¤			ShowWindow(SW_HIDE);¤		}¤	}¤¤	return bRet == TRUE;¤	//#UC END# *470CC552002E*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ResolvedTypeGuid"
			    value      	"3DBFFE100240")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ElementCreationOrder"
			    value      	"16659843602"))
		    quid       	"470CC552002E"
		    documentation 	"создаёт элемент"
		    stereotype 	"chg"
		    parameters 	(list Parameters
			(object Parameter "state"
			    attributes 	(list Attribute_Set
				(object Attribute
				    tool       	"MDA Generator"
				    name       	"ResolvedTypeGuid"
				    value      	"460ABDFA0377")
				(object Attribute
				    tool       	"MDA Generator"
				    name       	"ElementCreationOrder"
				    value      	"16659844719"))
			    quid       	"470CC574004E"
			    type       	"tribool"
			    quidu      	"460ABDFA0377")
			(object Parameter "options"
			    attributes 	(list Attribute_Set
				(object Attribute
				    tool       	"MDA Generator"
				    name       	"ResolvedTypeGuid"
				    value      	"3DBFFDE101CA")
				(object Attribute
				    tool       	"MDA Generator"
				    name       	"ElementCreationOrder"
				    value      	"16659845105"))
			    quid       	"470CC57400AB"
			    type       	"unsigned long"
			    quidu      	"3DBFFDE101CA"))
		    result     	"boolean"
		    concurrency 	"Sequential"
		    opExportControl 	"Public"
		    uid        	0
		    quidu      	"3DBFFE100240")
		(object Operation "get_state"
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"AbstarctOperation"
			    value      	"regular")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"IsNative"
			    value      	"false")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*470CC90C02BF*"
			    value      	(value Text 
|//#UC START# *470CC90C02BF*¤	return m_state;¤	//#UC END# *470CC90C02BF*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ResolvedTypeGuid"
			    value      	"460ABDFA0377")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ElementCreationOrder"
			    value      	"16659845511"))
		    quid       	"470CC90C02BF"
		    documentation 	"возвращает состояние"
		    result     	"tribool"
		    concurrency 	"Sequential"
		    opExportControl 	"Public"
		    uid        	0
		    quidu      	"460ABDFA0377")
		(object Operation "get_state_str"
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"AbstarctOperation"
			    value      	"regular")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"TargetStereotype"
			    value      	"const")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"IsNative"
			    value      	"false")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*470CC9440167*"
			    value      	(value Text 
|//#UC START# *470CC9440167*¤	std::string text;¤	if (get_state() == true)	{¤		text = GetCheckedText();¤	} else if (get_state() == false) {¤		text = GetUnCheckedText();¤	} else {¤		text = m_undefined_str;¤	}¤	return text;¤	//#UC END# *470CC9440167*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ResolvedTypeGuid"
			    value      	"452257A0036F")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ElementCreationOrder"
			    value      	"16659845866"))
		    quid       	"470CC9440167"
		    documentation 	"возвращает стостояние в виде строки"
		    result     	"a-string"
		    concurrency 	"Sequential"
		    opExportControl 	"Public"
		    uid        	0
		    quidu      	"452257A0036F")
		(object Operation "set_undefined_str"
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"AbstarctOperation"
			    value      	"regular")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"IsNative"
			    value      	"false")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"cpp:*470CC9A70280*"
			    value      	(value Text 
|//#UC START# *470CC9A70280*¤	m_undefined_str = str;¤	//#UC END# *470CC9A70280*
			    ))
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ElementCreationOrder"
			    value      	"16659846235"))
		    quid       	"470CC9A70280"
		    documentation 	"устанавливает текст для неопределённого значения"
		    stereotype 	"chg"
		    parameters 	(list Parameters
			(object Parameter "str"
			    attributes 	(list Attribute_Set
				(object Attribute
				    tool       	"MDA Generator"
				    name       	"ResolvedTypeGuid"
				    value      	"452257A0036F")
				(object Attribute
				    tool       	"MDA Generator"
				    name       	"ElementCreationOrder"
				    value      	"16659846530"))
			    quid       	"470CC9C5007D"
			    type       	"a-string"
			    quidu      	"452257A0036F"))
		    concurrency 	"Sequential"
		    opExportControl 	"Public"
		    uid        	0))
	    class_attributes 	(list class_attribute_list
		(object ClassAttribute "state"
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"AbstarctOperation"
			    value      	"regular")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ValueInitialized"
			    value      	"true")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"IsNative"
			    value      	"false")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ResolvedTypeGuid"
			    value      	"460ABDFA0377")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ElementCreationOrder"
			    value      	"16659836174"))
		    quid       	"470CC532002E"
		    documentation 	"состояние"
		    type       	"tribool"
		    quidu      	"460ABDFA0377"
		    Containment 	"By Value")
		(object ClassAttribute "focus"
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"AbstarctOperation"
			    value      	"regular")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ValueInitialized"
			    value      	"true")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"IsNative"
			    value      	"false")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ResolvedTypeGuid"
			    value      	"3DBFFE100240")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ElementCreationOrder"
			    value      	"16659836531"))
		    quid       	"470CC5B30148"
		    documentation 	"фокус в контроле или нет"
		    type       	"boolean"
		    quidu      	"3DBFFE100240"
		    Containment 	"By Value")
		(object ClassAttribute "undefined_str"
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"AbstarctOperation"
			    value      	"regular")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ValueInitialized"
			    value      	"true")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"IsNative"
			    value      	"false")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ResolvedTypeGuid"
			    value      	"452257A0036F")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ElementCreationOrder"
			    value      	"16659836885"))
		    quid       	"470CC9710203"
		    documentation 	"текст для неопределённого состояние чек-бокса"
		    type       	"a-string"
		    quidu      	"452257A0036F"
		    Containment 	"By Value"))
	    language   	"MDA Generator"))
    logical_presentations 	(list unit_reference_list
	(object ClassDiagram "Main"
	    attributes 	(list Attribute_Set
		(object Attribute
		    tool       	"MDA Generator"
		    name       	"IsChanged"
		    value      	"true"))
	    quid       	"470AFBCF02DE"
	    title      	"Main"
	    zoom       	100
	    max_height 	28350
	    max_width  	21600
	    origin_x   	0
	    origin_y   	1768
	    items      	(list diagram_item_list
		(object ClassView "Class" "Logical View::shared::WinGUI::OptionTreeControls::COptionTree" @1
		    ShowCompartmentStereotypes 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"1227")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"117")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"374")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"180"))
		    location   	(906, 141)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@1
			location   	(742, 106)
			fill_color 	13434879
			nlines     	1
			max_width  	328
			justify    	0
			label      	"• COptionTree")
		    stereotype 	(object ItemLabel
			Parent_View 	@1
			location   	(742, 61)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	328
			justify    	0
			label      	"<<GuiControl>>")
		    icon_style 	"Label"
		    fill_color 	15448575
		    quidu      	"470AFBFE0213"
		    width      	346
		    height     	182
		    annotation 	8
		    autoResize 	TRUE)
		(object ClassView "Class" "Logical View::shared::WinGUI::OptionTreeControls::COptionTreeItem" @2
		    ShowCompartmentStereotypes 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"1026")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"1197")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"454")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"180"))
		    location   	(1026, 1197)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@2
			location   	(830, 1162)
			fill_color 	13434879
			nlines     	1
			max_width  	392
			justify    	0
			label      	"• COptionTreeItem")
		    stereotype 	(object ItemLabel
			Parent_View 	@2
			location   	(830, 1117)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	392
			justify    	0
			label      	"<<SimpleClass>>")
		    icon_style 	"Label"
		    fill_color 	12842465
		    quidu      	"470AFC61008C"
		    width      	410
		    height     	182
		    annotation 	8
		    autoResize 	TRUE)
		(object ClassView "Class" "Logical View::shared::WinGUI::OptionTreeControls::OptionTreeDef" @3
		    ShowCompartmentStereotypes 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"2535")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"3195")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"400")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"180"))
		    location   	(2535, 3195)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@3
			location   	(2355, 3160)
			fill_color 	13434879
			nlines     	1
			max_width  	360
			justify    	0
			label      	"• OptionTreeDef")
		    stereotype 	(object ItemLabel
			Parent_View 	@3
			location   	(2355, 3115)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	360
			justify    	0
			label      	"<<UtilityPack>>")
		    icon_style 	"Label"
		    fill_color 	14145535
		    quidu      	"470AFC94034B"
		    width      	378
		    height     	182
		    annotation 	8
		    autoResize 	TRUE)
		(object ClassView "Class" "Logical View::shared::WinGUI::OptionTreeControls::COptionTreeCheckButton" @4
		    ShowCompartmentStereotypes 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"372")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"1050")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"524")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"180"))
		    location   	(372, 1050)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@4
			location   	(111, 1015)
			fill_color 	13434879
			nlines     	1
			max_width  	522
			justify    	0
			label      	"• COptionTreeCheckButton")
		    stereotype 	(object ItemLabel
			Parent_View 	@4
			location   	(111, 970)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	522
			justify    	0
			label      	"<<GuiControl>>")
		    icon_style 	"Label"
		    fill_color 	15448575
		    quidu      	"470AFD4802FD"
		    width      	540
		    height     	182
		    annotation 	8
		    autoResize 	TRUE)
		(object ClassView "Class" "Logical View::shared::WinGUI::OptionTreeControls::COptionTreeColorPopUp" @5
		    ShowCompartmentStereotypes 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"1734")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"117")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"610")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"180"))
		    location   	(1482, 135)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@5
			location   	(1221, 100)
			fill_color 	13434879
			nlines     	1
			max_width  	522
			justify    	0
			label      	"• COptionTreeColorPopUp")
		    stereotype 	(object ItemLabel
			Parent_View 	@5
			location   	(1221, 55)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	522
			justify    	0
			label      	"<<GuiControl>>")
		    icon_style 	"Label"
		    fill_color 	15448575
		    quidu      	"470AFD9300DA"
		    width      	540
		    height     	182
		    annotation 	8
		    autoResize 	TRUE)
		(object ClassView "Class" "Logical View::external::MFCTypes::Controls::CEdit" @6
		    ShowCompartmentStereotypes 	TRUE
		    SuppressAttribute 	TRUE
		    SuppressOperation 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"771")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"2862")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"348")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"180"))
		    location   	(771, 2862)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	658120
			default_color 	FALSE)
		    label      	(object ItemLabel
			Parent_View 	@6
			location   	(626, 2828)
			fill_color 	13434879
			nlines     	1
			max_width  	290
			justify    	0
			label      	"• CEdit")
		    stereotype 	(object ItemLabel
			Parent_View 	@6
			location   	(626, 2783)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	287
			justify    	0
			label      	"<<GuiControl>>")
		    icon_style 	"Label"
		    line_color 	14803425
		    fill_color 	14803425
		    quidu      	"4655226B0177"
		    width      	308
		    height     	180
		    annotation 	8
		    autoResize 	TRUE)
		(object ClassView "Class" "Logical View::shared::WinGUI::OptionTreeControls::CEditMask" @7
		    ShowCompartmentStereotypes 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"825")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"2544")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"374")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"180"))
		    location   	(825, 2544)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@7
			location   	(677, 2509)
			fill_color 	13434879
			nlines     	1
			max_width  	296
			justify    	0
			label      	"• CEditMask")
		    stereotype 	(object ItemLabel
			Parent_View 	@7
			location   	(677, 2464)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	296
			justify    	0
			label      	"<<GuiControl>>")
		    icon_style 	"Label"
		    fill_color 	15448575
		    quidu      	"470AFDEC0203"
		    width      	314
		    height     	182
		    annotation 	8
		    autoResize 	TRUE)
		(object InheritView "" @8
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"LineVertices"
			    value      	"808,2634;785,2771"))
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    stereotype 	TRUE
		    line_color 	3947680
		    quidu      	"470AFE110128"
		    client     	@7
		    supplier   	@6
		    vertices   	(list Points
			(808, 2635)
			(785, 2771))
		    line_style 	0)
		(object ClassView "Class" "Logical View::shared::WinGUI::OptionTreeControls::COptionTreeFileDlg" @9
		    ShowCompartmentStereotypes 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"1326")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"2874")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"462")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"180"))
		    location   	(1326, 2874)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@9
			location   	(1105, 2839)
			fill_color 	13434879
			nlines     	1
			max_width  	442
			justify    	0
			label      	"• COptionTreeFileDlg")
		    stereotype 	(object ItemLabel
			Parent_View 	@9
			location   	(1105, 2794)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	442
			justify    	0
			label      	"<<SimpleClass>>")
		    icon_style 	"Label"
		    fill_color 	12842465
		    quidu      	"470AFE2C01E4"
		    width      	460
		    height     	182
		    annotation 	8
		    autoResize 	TRUE)
		(object ClassView "Class" "Logical View::shared::WinGUI::OptionTreeControls::COptionTreeFontSel" @10
		    ShowCompartmentStereotypes 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"2421")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"2451")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"462")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"180"))
		    location   	(2421, 2451)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@10
			location   	(2199, 2416)
			fill_color 	13434879
			nlines     	1
			max_width  	444
			justify    	0
			label      	"• COptionTreeFontSel")
		    stereotype 	(object ItemLabel
			Parent_View 	@10
			location   	(2199, 2371)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	444
			justify    	0
			label      	"<<Dialog>>")
		    icon_style 	"Label"
		    fill_color 	15448575
		    quidu      	"470AFEDC003E"
		    width      	462
		    height     	182
		    annotation 	8
		    autoResize 	TRUE)
		(object ClassView "Class" "Logical View::external::MFCTypes::Controls::CButton" @11
		    ShowCompartmentStereotypes 	TRUE
		    SuppressAttribute 	TRUE
		    SuppressOperation 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"1863")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"2865")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"348")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"180"))
		    location   	(1863, 2865)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	658120
			default_color 	FALSE)
		    label      	(object ItemLabel
			Parent_View 	@11
			location   	(1718, 2831)
			fill_color 	13434879
			nlines     	1
			max_width  	290
			justify    	0
			label      	"• CButton")
		    stereotype 	(object ItemLabel
			Parent_View 	@11
			location   	(1718, 2786)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	287
			justify    	0
			label      	"<<GuiControl>>")
		    icon_style 	"Label"
		    line_color 	14803425
		    fill_color 	14803425
		    quidu      	"46552090006D"
		    width      	308
		    height     	180
		    annotation 	8
		    autoResize 	TRUE)
		(object ClassView "Class" "Logical View::shared::WinGUI::OptionTreeControls::COptionTreeFontSelColorButton" @12
		    ShowCompartmentStereotypes 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"1905")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"3405")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"830")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"180"))
		    location   	(1905, 3405)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@12
			location   	(1481, 3370)
			fill_color 	13434879
			nlines     	1
			max_width  	848
			justify    	0
			label      	"• COptionTreeFontSelColorButton")
		    stereotype 	(object ItemLabel
			Parent_View 	@12
			location   	(1481, 3325)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	848
			justify    	0
			label      	"<<GuiControl>>")
		    icon_style 	"Label"
		    fill_color 	15448575
		    quidu      	"470AFF120290"
		    width      	866
		    height     	182
		    annotation 	8
		    autoResize 	TRUE)
		(object InheritView "" @13
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"LineVertices"
			    value      	"1896,3314;1869,2955"))
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    stereotype 	TRUE
		    line_color 	3947680
		    quidu      	"470AFF29034B"
		    client     	@12
		    supplier   	@11
		    vertices   	(list Points
			(1896, 3313)
			(1869, 2955))
		    line_style 	0)
		(object ClassView "Class" "Logical View::external::MFCTypes::Controls::CComboBox" @14
		    ShowCompartmentStereotypes 	TRUE
		    SuppressAttribute 	TRUE
		    SuppressOperation 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"2265")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"1455")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"348")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"180"))
		    location   	(2265, 1455)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	658120
			default_color 	FALSE)
		    label      	(object ItemLabel
			Parent_View 	@14
			location   	(2113, 1421)
			fill_color 	13434879
			nlines     	1
			max_width  	304
			justify    	0
			label      	"• CComboBox")
		    stereotype 	(object ItemLabel
			Parent_View 	@14
			location   	(2113, 1376)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	304
			justify    	0
			label      	"<<GuiControl>>")
		    icon_style 	"Label"
		    line_color 	14803425
		    fill_color 	14803425
		    quidu      	"465520BD0222"
		    width      	322
		    height     	180
		    annotation 	8
		    autoResize 	TRUE)
		(object ClassView "Class" "Logical View::shared::WinGUI::OptionTreeControls::COptionTreeFontSelFontCombo" @15
		    ShowCompartmentStereotypes 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"1755")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"1902")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"636")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"180"))
		    location   	(1806, 1893)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@15
			location   	(1490, 1858)
			fill_color 	13434879
			nlines     	1
			max_width  	632
			justify    	0
			label      	"• COptionTreeFontSelFontCombo")
		    stereotype 	(object ItemLabel
			Parent_View 	@15
			location   	(1490, 1813)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	632
			justify    	0
			label      	"<<GuiControl>>")
		    icon_style 	"Label"
		    fill_color 	15448575
		    quidu      	"470AFF50030D"
		    width      	650
		    height     	182
		    annotation 	8
		    autoResize 	TRUE)
		(object InheritView "" @16
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"LineVertices"
			    value      	"1857,1811;2161,1545"))
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    stereotype 	TRUE
		    line_color 	3947680
		    quidu      	"470AFF6102BF"
		    client     	@15
		    supplier   	@14
		    vertices   	(list Points
			(1899, 1801)
			(2168, 1545))
		    line_style 	0)
		(object ClassView "Class" "Logical View::shared::WinGUI::OptionTreeControls::OptionTreeFontSelGlobals" @17
		    ShowCompartmentStereotypes 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"2472")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"2706")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"712")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"180"))
		    location   	(2472, 2706)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@17
			location   	(2196, 2671)
			fill_color 	13434879
			nlines     	1
			max_width  	552
			justify    	0
			label      	"• OptionTreeFontSelGlobals")
		    stereotype 	(object ItemLabel
			Parent_View 	@17
			location   	(2196, 2626)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	552
			justify    	0
			label      	"<<UtilityPack>>")
		    icon_style 	"Label"
		    fill_color 	14145535
		    quidu      	"470AFF7B02DE"
		    width      	570
		    height     	182
		    annotation 	8
		    autoResize 	TRUE)
		(object ClassView "Class" "Logical View::shared::WinGUI::OptionTreeControls::COptionTreeFontSelSizeCombo" @18
		    ShowCompartmentStereotypes 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"2511")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"1905")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"824")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"180"))
		    location   	(2493, 1881)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@18
			location   	(2178, 1846)
			fill_color 	13434879
			nlines     	1
			max_width  	630
			justify    	0
			label      	"• COptionTreeFontSelSizeCombo")
		    stereotype 	(object ItemLabel
			Parent_View 	@18
			location   	(2178, 1801)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	630
			justify    	0
			label      	"<<GuiControl>>")
		    icon_style 	"Label"
		    fill_color 	15448575
		    quidu      	"470AFFC4001F"
		    width      	648
		    height     	182
		    annotation 	8
		    autoResize 	TRUE)
		(object ClassView "Class" "Logical View::shared::WinGUI::OptionTreeControls::COptionTreeImagePopUp" @19
		    ShowCompartmentStereotypes 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"2373")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"123")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"620")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"180"))
		    location   	(2139, 132)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@19
			location   	(1879, 97)
			fill_color 	13434879
			nlines     	1
			max_width  	520
			justify    	0
			label      	"• COptionTreeImagePopUp")
		    stereotype 	(object ItemLabel
			Parent_View 	@19
			location   	(1879, 52)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	520
			justify    	0
			label      	"<<GuiControl>>")
		    icon_style 	"Label"
		    fill_color 	15448575
		    quidu      	"470AFFF6030D"
		    width      	538
		    height     	182
		    annotation 	8
		    autoResize 	TRUE)
		(object ClassView "Class" "Logical View::shared::WinGUI::OptionTreeControls::COptionTreeInfo" @20
		    ShowCompartmentStereotypes 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"243")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"3171")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"462")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"180"))
		    location   	(243, 3171)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@20
			location   	(47, 3136)
			fill_color 	13434879
			nlines     	1
			max_width  	392
			justify    	0
			label      	"• COptionTreeInfo")
		    stereotype 	(object ItemLabel
			Parent_View 	@20
			location   	(47, 3091)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	392
			justify    	0
			label      	"<<GuiControl>>")
		    icon_style 	"Label"
		    fill_color 	15448575
		    quidu      	"470B002D00FA"
		    width      	410
		    height     	182
		    annotation 	8
		    autoResize 	TRUE)
		(object InheritView "" @21
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"LineVertices"
			    value      	"394,3080;615,2952"))
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    stereotype 	TRUE
		    line_color 	3947680
		    quidu      	"470B004E03A9"
		    client     	@20
		    supplier   	@6
		    vertices   	(list Points
			(396, 3079)
			(616, 2951))
		    line_style 	0)
		(object ClassView "Class" "Logical View::shared::WinGUI::OptionTreeControls::COptionTreeIPAddressEdit" @22
		    ShowCompartmentStereotypes 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"822")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"3174")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"618")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"180"))
		    location   	(822, 3174)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@22
			location   	(548, 3139)
			fill_color 	13434879
			nlines     	1
			max_width  	548
			justify    	0
			label      	"• COptionTreeIPAddressEdit")
		    stereotype 	(object ItemLabel
			Parent_View 	@22
			location   	(548, 3094)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	548
			justify    	0
			label      	"<<GuiControl>>")
		    icon_style 	"Label"
		    fill_color 	15448575
		    quidu      	"470B008500BB"
		    width      	566
		    height     	182
		    annotation 	8
		    autoResize 	TRUE)
		(object InheritView "" @23
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"LineVertices"
			    value      	"806,3083;784,2952"))
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    stereotype 	TRUE
		    line_color 	3947680
		    quidu      	"470B009D00DA"
		    client     	@22
		    supplier   	@6
		    vertices   	(list Points
			(806, 3082)
			(784, 2952))
		    line_style 	0)
		(object ClassView "Class" "Logical View::shared::WinGUI::OptionTreeControls::COptionTreeItemCheckBox" @24
		    ShowCompartmentStereotypes 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"348")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"1365")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"606")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"180"))
		    location   	(348, 1365)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@24
			location   	(70, 1330)
			fill_color 	13434879
			nlines     	1
			max_width  	556
			justify    	0
			label      	"• COptionTreeItemCheckBox")
		    stereotype 	(object ItemLabel
			Parent_View 	@24
			location   	(70, 1285)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	556
			justify    	0
			label      	"<<GuiControl>>")
		    icon_style 	"Label"
		    fill_color 	15448575
		    quidu      	"470B00C00138"
		    width      	574
		    height     	182
		    annotation 	8
		    autoResize 	TRUE)
		(object InheritView "" @25
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"LineVertices"
			    value      	"354,1274;364,1140"))
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    stereotype 	TRUE
		    line_color 	3947680
		    quidu      	"470B00C90213"
		    client     	@24
		    supplier   	@4
		    vertices   	(list Points
			(354, 1273)
			(364, 1141))
		    line_style 	0)
		(object ClassView "Class" "Logical View::shared::WinGUI::OptionTreeControls::COptionTreeItemColor" @26
		    ShowCompartmentStereotypes 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"1794")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"963")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"608")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"180"))
		    location   	(1794, 963)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@26
			location   	(1559, 928)
			fill_color 	13434879
			nlines     	1
			max_width  	470
			justify    	0
			label      	"• COptionTreeItemColor")
		    stereotype 	(object ItemLabel
			Parent_View 	@26
			location   	(1559, 883)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	470
			justify    	0
			label      	"<<GuiControl>>")
		    icon_style 	"Label"
		    fill_color 	15448575
		    quidu      	"470B00F7035B"
		    width      	488
		    height     	182
		    annotation 	8
		    autoResize 	TRUE)
		(object ClassView "Class" "Logical View::shared::WinGUI::OptionTreeControls::COptionTreeItemComboBox" @27
		    ShowCompartmentStereotypes 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"1593")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"1455")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"612")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"180"))
		    location   	(1593, 1455)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@27
			location   	(1306, 1420)
			fill_color 	13434879
			nlines     	1
			max_width  	574
			justify    	0
			label      	"• COptionTreeItemComboBox")
		    stereotype 	(object ItemLabel
			Parent_View 	@27
			location   	(1306, 1375)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	574
			justify    	0
			label      	"<<GuiControl>>")
		    icon_style 	"Label"
		    fill_color 	15448575
		    quidu      	"470B01340261"
		    width      	592
		    height     	182
		    annotation 	8
		    autoResize 	TRUE)
		(object InheritView "" @28
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"LineVertices"
			    value      	"1393,1364;1224,1287"))
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    stereotype 	TRUE
		    line_color 	3947680
		    quidu      	"470B01480186"
		    client     	@27
		    supplier   	@2
		    vertices   	(list Points
			(1391, 1363)
			(1226, 1288))
		    line_style 	0)
		(object InheritView "" @29
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"LineVertices"
			    value      	"1899,1455;2090,1455"))
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    stereotype 	TRUE
		    line_color 	3947680
		    quidu      	"470B014A01E4"
		    client     	@27
		    supplier   	@14
		    vertices   	(list Points
			(1889, 1455)
			(2103, 1455))
		    line_style 	0)
		(object ClassView "Class" "Logical View::external::MFCTypes::Controls::CDateTimeCtrl" @30
		    ShowCompartmentStereotypes 	TRUE
		    SuppressAttribute 	TRUE
		    SuppressOperation 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"243")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"1647")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"370")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"180"))
		    location   	(243, 1647)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	658120
			default_color 	FALSE)
		    label      	(object ItemLabel
			Parent_View 	@30
			location   	(67, 1613)
			fill_color 	13434879
			nlines     	1
			max_width  	352
			justify    	0
			label      	"• CDateTimeCtrl")
		    stereotype 	(object ItemLabel
			Parent_View 	@30
			location   	(67, 1568)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	352
			justify    	0
			label      	"<<GuiControl>>")
		    icon_style 	"Label"
		    line_color 	14803425
		    fill_color 	14803425
		    quidu      	"4655245E03D8"
		    width      	370
		    height     	180
		    annotation 	8
		    autoResize 	TRUE)
		(object ClassView "Class" "Logical View::shared::WinGUI::OptionTreeControls::COptionTreeItemDate" @31
		    ShowCompartmentStereotypes 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"303")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"1932")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"604")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"180"))
		    location   	(303, 1932)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@31
			location   	(70, 1897)
			fill_color 	13434879
			nlines     	1
			max_width  	466
			justify    	0
			label      	"• COptionTreeItemDate")
		    stereotype 	(object ItemLabel
			Parent_View 	@31
			location   	(70, 1852)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	466
			justify    	0
			label      	"<<GuiControl>>")
		    icon_style 	"Label"
		    fill_color 	15448575
		    quidu      	"470B01B302BF"
		    width      	484
		    height     	182
		    annotation 	8
		    autoResize 	TRUE)
		(object ClassView "Class" "Logical View::shared::WinGUI::OptionTreeControls::COptionTreeItemEdit" @32
		    ShowCompartmentStereotypes 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"336")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"2196")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"454")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"180"))
		    location   	(336, 2196)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@32
			location   	(110, 2161)
			fill_color 	13434879
			nlines     	1
			max_width  	452
			justify    	0
			label      	"• COptionTreeItemEdit")
		    stereotype 	(object ItemLabel
			Parent_View 	@32
			location   	(110, 2116)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	452
			justify    	0
			label      	"<<GuiControl>>")
		    icon_style 	"Label"
		    fill_color 	15448575
		    quidu      	"470B0202007D"
		    width      	470
		    height     	182
		    annotation 	8
		    autoResize 	TRUE)
		(object ClassView "Class" "Logical View::shared::WinGUI::OptionTreeControls::COptionTreeItemEditButton" @33
		    ShowCompartmentStereotypes 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"306")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"2541")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"610")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"180"))
		    location   	(306, 2541)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@33
			location   	(27, 2506)
			fill_color 	13434879
			nlines     	1
			max_width  	558
			justify    	0
			label      	"• COptionTreeItemEditButton")
		    stereotype 	(object ItemLabel
			Parent_View 	@33
			location   	(27, 2461)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	558
			justify    	0
			label      	"<<GuiControl>>")
		    icon_style 	"Label"
		    fill_color 	15448575
		    quidu      	"470B029301E4"
		    width      	576
		    height     	182
		    annotation 	8
		    autoResize 	TRUE)
		(object InheritView "" @34
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"LineVertices"
			    value      	"313,2450;327,2286"))
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    stereotype 	TRUE
		    line_color 	3947680
		    quidu      	"470B032101F4"
		    client     	@33
		    supplier   	@32
		    vertices   	(list Points
			(313, 2449)
			(327, 2287))
		    line_style 	0)
		(object ClassView "Class" "Logical View::shared::WinGUI::OptionTreeControls::COptionTreeItemFile" @35
		    ShowCompartmentStereotypes 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"1194")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"1890")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"454")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"180"))
		    location   	(1290, 1689)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@35
			location   	(1064, 1654)
			fill_color 	13434879
			nlines     	1
			max_width  	452
			justify    	0
			label      	"• COptionTreeItemFile")
		    stereotype 	(object ItemLabel
			Parent_View 	@35
			location   	(1064, 1609)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	452
			justify    	0
			label      	"<<GuiControl>>")
		    icon_style 	"Label"
		    fill_color 	15448575
		    quidu      	"470B034A0232"
		    width      	470
		    height     	182
		    annotation 	8
		    autoResize 	TRUE)
		(object ClassView "Class" "Logical View::shared::WinGUI::OptionTreeControls::COptionTreeItemFont" @36
		    ShowCompartmentStereotypes 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"1329")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"1659")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"602")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"180"))
		    location   	(1221, 1902)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@36
			location   	(989, 1867)
			fill_color 	13434879
			nlines     	1
			max_width  	464
			justify    	0
			label      	"• COptionTreeItemFont")
		    stereotype 	(object ItemLabel
			Parent_View 	@36
			location   	(989, 1822)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	464
			justify    	0
			label      	"<<GuiControl>>")
		    icon_style 	"Label"
		    fill_color 	15448575
		    quidu      	"470B03AC01A5"
		    width      	482
		    height     	182
		    annotation 	8
		    autoResize 	TRUE)
		(object ClassView "Class" "Logical View::shared::WinGUI::OptionTreeControls::COptionTreeItemHyperLink" @37
		    ShowCompartmentStereotypes 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"432")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"768")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"614")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"180"))
		    location   	(432, 768)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@37
			location   	(153, 733)
			fill_color 	13434879
			nlines     	1
			max_width  	558
			justify    	0
			label      	"• COptionTreeItemHyperLink")
		    stereotype 	(object ItemLabel
			Parent_View 	@37
			location   	(153, 688)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	558
			justify    	0
			label      	"<<GuiControl>>")
		    icon_style 	"Label"
		    fill_color 	15448575
		    quidu      	"470B04000119"
		    width      	576
		    height     	182
		    annotation 	8
		    autoResize 	TRUE)
		(object InheritView "" @38
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"LineVertices"
			    value      	"557,858;900,1106"))
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    stereotype 	TRUE
		    line_color 	3947680
		    quidu      	"470B041A002E"
		    client     	@37
		    supplier   	@2
		    vertices   	(list Points
			(558, 859)
			(899, 1105))
		    line_style 	0)
		(object ClassView "Class" "Logical View::shared::WinGUI::OptionTreeControls::COptionTreeItemImage" @39
		    ShowCompartmentStereotypes 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"1611")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"747")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"606")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"180"))
		    location   	(1611, 747)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@39
			location   	(1365, 712)
			fill_color 	13434879
			nlines     	1
			max_width  	492
			justify    	0
			label      	"• COptionTreeItemImage")
		    stereotype 	(object ItemLabel
			Parent_View 	@39
			location   	(1365, 667)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	492
			justify    	0
			label      	"<<GuiControl>>")
		    icon_style 	"Label"
		    fill_color 	15448575
		    quidu      	"470B043B030D"
		    width      	510
		    height     	182
		    annotation 	8
		    autoResize 	TRUE)
		(object InheritView "" @40
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"LineVertices"
			    value      	"1492,837;1141,1106"))
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    stereotype 	TRUE
		    line_color 	3947680
		    quidu      	"470B0458004E"
		    client     	@39
		    supplier   	@2
		    vertices   	(list Points
			(1491, 838)
			(1142, 1105))
		    line_style 	0)
		(object ClassView "Class" "Logical View::external::MFCTypes::Controls::CIPAddressCtrl" @41
		    ShowCompartmentStereotypes 	TRUE
		    SuppressAttribute 	TRUE
		    SuppressOperation 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"2109")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"2184")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"384")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"180"))
		    location   	(2109, 2184)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	658120
			default_color 	FALSE)
		    label      	(object ItemLabel
			Parent_View 	@41
			location   	(1925, 2150)
			fill_color 	13434879
			nlines     	1
			max_width  	368
			justify    	0
			label      	"• CIPAddressCtrl")
		    stereotype 	(object ItemLabel
			Parent_View 	@41
			location   	(1925, 2105)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	368
			justify    	0
			label      	"<<GuiControl>>")
		    icon_style 	"Label"
		    line_color 	14803425
		    fill_color 	14803425
		    quidu      	"465527E3003E"
		    width      	386
		    height     	180
		    annotation 	8
		    autoResize 	TRUE)
		(object ClassView "Class" "Logical View::shared::WinGUI::OptionTreeControls::COptionTreeItemIPAddress" @42
		    ShowCompartmentStereotypes 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"1533")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"2196")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"550")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"180"))
		    location   	(1533, 2196)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@42
			location   	(1257, 2161)
			fill_color 	13434879
			nlines     	1
			max_width  	552
			justify    	0
			label      	"• COptionTreeItemIPAddress")
		    stereotype 	(object ItemLabel
			Parent_View 	@42
			location   	(1257, 2116)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	552
			justify    	0
			label      	"<<GuiControl>>")
		    icon_style 	"Label"
		    fill_color 	15448575
		    quidu      	"470B04DB003E"
		    width      	570
		    height     	182
		    annotation 	8
		    autoResize 	TRUE)
		(object ClassView "Class" "Logical View::external::MFCTypes::Controls::CListBox" @43
		    ShowCompartmentStereotypes 	TRUE
		    SuppressAttribute 	TRUE
		    SuppressOperation 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"1911")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"2544")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"348")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"180"))
		    location   	(1911, 2544)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	658120
			default_color 	FALSE)
		    label      	(object ItemLabel
			Parent_View 	@43
			location   	(1764, 2510)
			fill_color 	13434879
			nlines     	1
			max_width  	294
			justify    	0
			label      	"• CListBox")
		    stereotype 	(object ItemLabel
			Parent_View 	@43
			location   	(1764, 2465)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	291
			justify    	0
			label      	"<<GuiControl>>")
		    icon_style 	"Label"
		    line_color 	14803425
		    fill_color 	14803425
		    quidu      	"46FA715B0271"
		    width      	312
		    height     	180
		    annotation 	8
		    autoResize 	TRUE)
		(object ClassView "Class" "Logical View::shared::WinGUI::OptionTreeControls::COptionTreeItemListBox" @44
		    ShowCompartmentStereotypes 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"1335")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"2544")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"608")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"180"))
		    location   	(1335, 2544)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@44
			location   	(1071, 2509)
			fill_color 	13434879
			nlines     	1
			max_width  	528
			justify    	0
			label      	"• COptionTreeItemListBox")
		    stereotype 	(object ItemLabel
			Parent_View 	@44
			location   	(1071, 2464)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	528
			justify    	0
			label      	"<<GuiControl>>")
		    icon_style 	"Label"
		    fill_color 	15448575
		    quidu      	"470B055702EE"
		    width      	546
		    height     	182
		    annotation 	8
		    autoResize 	TRUE)
		(object ClassView "Class" "Logical View::shared::WinGUI::OptionTreeControls::COptionTreeList" @45
		    ShowCompartmentStereotypes 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"2403")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"609")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"462")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"180"))
		    location   	(2403, 609)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@45
			location   	(2207, 574)
			fill_color 	13434879
			nlines     	1
			max_width  	392
			justify    	0
			label      	"• COptionTreeList")
		    stereotype 	(object ItemLabel
			Parent_View 	@45
			location   	(2207, 529)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	392
			justify    	0
			label      	"<<GuiControl>>")
		    icon_style 	"Label"
		    fill_color 	15448575
		    quidu      	"470B05D5032C"
		    width      	410
		    height     	182
		    annotation 	8
		    autoResize 	TRUE)
		(object ClassView "Class" "Logical View::shared::WinGUI::OptionTreeControls::COptionTreeSpinnerButton" @46
		    ShowCompartmentStereotypes 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"1506")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"465")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"528")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"180"))
		    location   	(1506, 465)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@46
			location   	(1234, 430)
			fill_color 	13434879
			nlines     	1
			max_width  	544
			justify    	0
			label      	"• COptionTreeSpinnerButton")
		    stereotype 	(object ItemLabel
			Parent_View 	@46
			location   	(1234, 385)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	544
			justify    	0
			label      	"<<GuiControl>>")
		    icon_style 	"Label"
		    fill_color 	15448575
		    quidu      	"470B06290251"
		    width      	562
		    height     	182
		    annotation 	8
		    autoResize 	TRUE)
		(object ClassView "Class" "Logical View::shared::WinGUI::OptionTreeControls::COptionTreeSpinnerEdit" @47
		    ShowCompartmentStereotypes 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"1470")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"3171")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"618")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"180"))
		    location   	(1470, 3171)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@47
			location   	(1220, 3136)
			fill_color 	13434879
			nlines     	1
			max_width  	500
			justify    	0
			label      	"• COptionTreeSpinnerEdit")
		    stereotype 	(object ItemLabel
			Parent_View 	@47
			location   	(1220, 3091)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	500
			justify    	0
			label      	"<<GuiControl>>")
		    icon_style 	"Label"
		    fill_color 	15448575
		    quidu      	"470B066600FA"
		    width      	518
		    height     	182
		    annotation 	8
		    autoResize 	TRUE)
		(object InheritView "" @48
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"LineVertices"
			    value      	"1269,3080;945,2939"))
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    stereotype 	TRUE
		    line_color 	3947680
		    quidu      	"470B06880177"
		    client     	@47
		    supplier   	@6
		    vertices   	(list Points
			(1266, 3079)
			(925, 2930))
		    line_style 	0)
		(object ClassView "Class" "Logical View::shared::WinGUI::OptionTreeControls::COptionTreeRadioButton" @49
		    ShowCompartmentStereotypes 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"354")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"417")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"494")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"180"))
		    location   	(375, 291)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@49
			location   	(109, 256)
			fill_color 	13434879
			nlines     	1
			max_width  	532
			justify    	0
			label      	"• COptionTreeRadioButton")
		    stereotype 	(object ItemLabel
			Parent_View 	@49
			location   	(109, 211)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	532
			justify    	0
			label      	"<<GuiControl>>")
		    icon_style 	"Label"
		    fill_color 	15448575
		    quidu      	"470B06DC0177"
		    width      	550
		    height     	182
		    annotation 	8
		    autoResize 	TRUE)
		(object ClassView "Class" "Logical View::shared::WinGUI::OptionTreeControls::COptionTreeItemStatic" @50
		    ShowCompartmentStereotypes 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"903")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"2184")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"610")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"180"))
		    location   	(903, 2184)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@50
			location   	(656, 2149)
			fill_color 	13434879
			nlines     	1
			max_width  	494
			justify    	0
			label      	"• COptionTreeItemStatic")
		    stereotype 	(object ItemLabel
			Parent_View 	@50
			location   	(656, 2104)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	494
			justify    	0
			label      	"<<SimpleClass>>")
		    icon_style 	"Label"
		    fill_color 	12842465
		    quidu      	"470B0C3F0167"
		    width      	512
		    height     	182
		    annotation 	8
		    autoResize 	TRUE)
		(object ClassView "Class" "Logical View::shared::WinGUI::OptionTreeControls::COptionTreeItemSpinner" @51
		    ShowCompartmentStereotypes 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"2001")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"1209")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"612")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"180"))
		    location   	(2001, 1209)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@51
			location   	(1739, 1174)
			fill_color 	13434879
			nlines     	1
			max_width  	524
			justify    	0
			label      	"• COptionTreeItemSpinner")
		    stereotype 	(object ItemLabel
			Parent_View 	@51
			location   	(1739, 1129)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	524
			justify    	0
			label      	"<<GuiControl>>")
		    icon_style 	"Label"
		    fill_color 	15448575
		    quidu      	"470B0CA60271"
		    width      	542
		    height     	182
		    annotation 	8
		    autoResize 	TRUE)
		(object InheritView "" @52
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"LineVertices"
			    value      	"2118,1119;2118,452;1770,452"))
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    stereotype 	TRUE
		    line_color 	3947680
		    quidu      	"470B0CE9001F"
		    client     	@51
		    supplier   	@46
		    vertices   	(list Points
			(2117, 1118)
			(2117, 452)
			(1787, 452))
		    line_style 	3
		    origin_attachment 	(2117, 1118)
		    terminal_attachment 	(1787, 452))
		(object InheritView "" @53
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"LineVertices"
			    value      	"2461,1814;2313,1545"))
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    stereotype 	TRUE
		    line_color 	3947680
		    quidu      	"470AFFE2035B"
		    client     	@18
		    supplier   	@14
		    vertices   	(list Points
			(2443, 1789)
			(2313, 1545))
		    line_style 	0)
		(object InheritView "" @54
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"LineVertices"
			    value      	"1012,1799;1012,1287"))
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    stereotype 	TRUE
		    line_color 	3947680
		    quidu      	"470B036E00AB"
		    client     	@35
		    supplier   	@2
		    vertices   	(list Points
			(1106, 1597)
			(1106, 1288))
		    line_style 	3
		    origin_attachment 	(1106, 1597)
		    terminal_attachment 	(1106, 1288))
		(object InheritView "" @55
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"LineVertices"
			    value      	"682,1118;798,1144"))
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    stereotype 	TRUE
		    line_color 	3947680
		    quidu      	"470AFD5702EE"
		    client     	@4
		    supplier   	@2
		    vertices   	(list Points
			(642, 1109)
			(820, 1149))
		    line_style 	0)
		(object InheritView "" @56
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"LineVertices"
			    value      	"1494,1053;1253,1126"))
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    stereotype 	TRUE
		    line_color 	3947680
		    quidu      	"470B011C0232"
		    client     	@26
		    supplier   	@2
		    vertices   	(list Points
			(1549, 1035)
			(1231, 1133))
		    line_style 	0)
		(object ClassView "Class" "Logical View::shared::WinGUI::OptionTreeControls::CPreciseTimer" @57
		    ShowCompartmentStereotypes 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"216")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"3444")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"348")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"184"))
		    location   	(216, 3444)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@57
			location   	(35, 3408)
			fill_color 	13434879
			nlines     	1
			max_width  	362
			justify    	0
			label      	"• CPreciseTimer")
		    stereotype 	(object ItemLabel
			Parent_View 	@57
			location   	(35, 3363)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	362
			justify    	0
			label      	"<<SimpleClass>>")
		    icon_style 	"Label"
		    fill_color 	12842465
		    quidu      	"470B1253003E"
		    width      	380
		    height     	184
		    annotation 	8
		    autoResize 	TRUE)
		(object InheritView "" @58
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"LineVertices"
			    value      	"463,2286;697,2453"))
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    stereotype 	TRUE
		    line_color 	3947680
		    quidu      	"470B021502CE"
		    client     	@32
		    supplier   	@7
		    vertices   	(list Points
			(464, 2287)
			(696, 2452))
		    line_style 	0)
		(object InheritView "" @59
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"LineVertices"
			    value      	"283,1841;261,1737"))
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    stereotype 	TRUE
		    line_color 	3947680
		    quidu      	"470B01C90157"
		    client     	@31
		    supplier   	@30
		    vertices   	(list Points
			(283, 1840)
			(261, 1737))
		    line_style 	0)
		(object InheritView "" @60
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"LineVertices"
			    value      	"605,1912;678,1912;678,1199;799,1199"))
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    stereotype 	TRUE
		    line_color 	3947680
		    quidu      	"470B01CB00CB"
		    client     	@31
		    supplier   	@2
		    vertices   	(list Points
			(545, 1912)
			(678, 1912)
			(678, 1199)
			(821, 1199))
		    line_style 	3
		    origin_attachment 	(545, 1912)
		    terminal_attachment 	(821, 1199))
		(object InheritView "" @61
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"LineVertices"
			    value      	"834,2094;834,1287"))
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    stereotype 	TRUE
		    line_color 	3947680
		    quidu      	"470B0C6A0261"
		    client     	@50
		    supplier   	@2
		    vertices   	(list Points
			(834, 2092)
			(834, 1287))
		    line_style 	3
		    origin_attachment 	(834, 2092)
		    terminal_attachment 	(834, 1287))
		(object InheritView "" @62
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"LineVertices"
			    value      	"1639,2544;1736,2544"))
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    stereotype 	TRUE
		    line_color 	3947680
		    quidu      	"470B057B001F"
		    client     	@44
		    supplier   	@43
		    vertices   	(list Points
			(1608, 2544)
			(1754, 2544))
		    line_style 	0)
		(object InheritView "" @63
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"LineVertices"
			    value      	"1234,2454;1234,2043;884,2043;884,1287"))
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    stereotype 	TRUE
		    line_color 	3947680
		    quidu      	"470B05810109"
		    client     	@44
		    supplier   	@2
		    vertices   	(list Points
			(1234, 2453)
			(1234, 2043)
			(884, 2043)
			(884, 1288))
		    line_style 	3
		    origin_attachment 	(1234, 2453)
		    terminal_attachment 	(884, 1288))
		(object InheritView "" @64
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"LineVertices"
			    value      	"1808,2190;1916,2187"))
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    stereotype 	TRUE
		    line_color 	3947680
		    quidu      	"470B04F60242"
		    client     	@42
		    supplier   	@41
		    vertices   	(list Points
			(1818, 2190)
			(1915, 2187))
		    line_style 	0)
		(object InheritView "" @65
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"LineVertices"
			    value      	"1384,2106;1384,2009;924,2009;924,1287"))
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    stereotype 	TRUE
		    line_color 	3947680
		    quidu      	"470B04FF031C"
		    client     	@42
		    supplier   	@2
		    vertices   	(list Points
			(1383, 2105)
			(1383, 2009)
			(924, 2009)
			(924, 1288))
		    line_style 	3
		    origin_attachment 	(1383, 2105)
		    terminal_attachment 	(924, 1288))
		(object ClassView "Class" "Logical View::shared::WinGUI::OptionTreeControls::CRegExp" @66
		    ShowCompartmentStereotypes 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"621")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"3444")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"348")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"184"))
		    location   	(621, 3444)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@66
			location   	(456, 3408)
			fill_color 	13434879
			nlines     	1
			max_width  	330
			justify    	0
			label      	"• CRegExp")
		    stereotype 	(object ItemLabel
			Parent_View 	@66
			location   	(456, 3363)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	328
			justify    	0
			label      	"<<SimpleClass>>")
		    icon_style 	"Label"
		    fill_color 	12842465
		    quidu      	"470B17AB001F"
		    width      	348
		    height     	184
		    annotation 	8
		    autoResize 	TRUE)
		(object ClassView "Class" "Logical View::shared::WinGUI::OptionTreeControls::COptionTreeItemRadio" @67
		    ShowCompartmentStereotypes 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"357")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"138")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"454")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"184"))
		    location   	(378, 564)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@67
			location   	(130, 528)
			fill_color 	13434879
			nlines     	1
			max_width  	496
			justify    	0
			label      	"• COptionTreeItemRadio")
		    stereotype 	(object ItemLabel
			Parent_View 	@67
			location   	(130, 483)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	496
			justify    	0
			label      	"<<GuiControl>>")
		    icon_style 	"Label"
		    fill_color 	15448575
		    quidu      	"470B286E01F4"
		    width      	514
		    height     	184
		    annotation 	8
		    autoResize 	TRUE)
		(object InheritView "" @68
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"LineVertices"
			    value      	"355,230;354,326"))
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    stereotype 	TRUE
		    line_color 	3947680
		    quidu      	"470B287D00DA"
		    client     	@67
		    supplier   	@49
		    vertices   	(list Points
			(376, 471)
			(375, 382))
		    line_style 	0)
		(object ClassView "Class" "Logical View::shared::WinGUI::OptionTreeControls::OptionTreeRes" @69
		    ShowCompartmentStereotypes 	TRUE
		    SuppressOperation 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"1002")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"3456")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"318")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"184"))
		    location   	(1002, 3456)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@69
			location   	(852, 3420)
			fill_color 	13434879
			nlines     	1
			max_width  	300
			justify    	0
			label      	"OptionTreeRes")
		    stereotype 	(object ItemLabel
			Parent_View 	@69
			location   	(852, 3375)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	300
			justify    	0
			label      	"<<Resource>>")
		    icon_style 	"Label"
		    fill_color 	13434879
		    quidu      	"470B6E0A001F"
		    width      	318
		    height     	184
		    annotation 	8
		    autoResize 	TRUE)
		(object ClassView "Class" "Logical View::shared::WinGUI::OptionTreeControls::COptionTree3StateCheckBox" @70
		    ShowCompartmentStereotypes 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"918")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"4572")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"1516")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"1092"))
		    location   	(918, 4572)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@70
			location   	(173, 4082)
			fill_color 	13434879
			nlines     	1
			max_width  	1490
			justify    	0
			label      	"• COptionTree3StateCheckBox")
		    stereotype 	(object ItemLabel
			Parent_View 	@70
			location   	(173, 4037)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	1490
			justify    	0
			label      	"<<GuiControl>>")
		    icon_style 	"Label"
		    fill_color 	15448575
		    quidu      	"470CC30A002E"
		    width      	1508
		    height     	1092
		    annotation 	8
		    autoResize 	TRUE)
		(object ClassView "Class" "Logical View::shared::WinGUI::OptionTreeControls::COptionTreeCheckButton" @71
		    ShowCompartmentStereotypes 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    ShowOperationSignature 	TRUE
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewXPosition"
			    value      	"873")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewYPosition"
			    value      	"3714")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewWidth"
			    value      	"540")
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"ItemViewHeight"
			    value      	"180"))
		    location   	(873, 3714)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    label      	(object ItemLabel
			Parent_View 	@71
			location   	(612, 3679)
			fill_color 	13434879
			nlines     	1
			max_width  	522
			justify    	0
			label      	"• COptionTreeCheckButton")
		    stereotype 	(object ItemLabel
			Parent_View 	@71
			location   	(612, 3634)
			fill_color 	13434879
			anchor     	10
			nlines     	1
			max_width  	522
			justify    	0
			label      	"<<GuiControl>>")
		    icon_style 	"Label"
		    fill_color 	15448575
		    quidu      	"470AFD4802FD"
		    width      	540
		    height     	182
		    annotation 	8
		    autoResize 	TRUE)
		(object InheritView "" @72
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"LineVertices"
			    value      	"888,4025;876,3805"))
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    stereotype 	TRUE
		    line_color 	3947680
		    quidu      	"470CC50102BF"
		    client     	@70
		    supplier   	@71
		    vertices   	(list Points
			(888, 4025)
			(876, 3805))
		    line_style 	0)
		(object InheritView "" @73
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    stereotype 	TRUE
		    line_color 	3947680
		    quidu      	"4785EB2202F3"
		    client     	@32
		    supplier   	@2
		    vertices   	(list Points
			(443, 2105)
			(443, 2043)
			(731, 2043)
			(731, 1235)
			(821, 1235))
		    line_style 	3
		    origin_attachment 	(443, 2105)
		    terminal_attachment 	(821, 1235))
		(object InheritView "" @74
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    stereotype 	TRUE
		    line_color 	3947680
		    quidu      	"4785EBE80002"
		    client     	@51
		    supplier   	@2
		    vertices   	(list Points
			(1729, 1205)
			(1231, 1199))
		    line_style 	0)
		(object InheritView "" @75
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"LineVertices"
			    value      	"107,415;31,415;31,1516;656,1516;656,1171;799,1171"))
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    stereotype 	TRUE
		    line_color 	3947680
		    quidu      	"470B070B0148"
		    client     	@49
		    supplier   	@2
		    vertices   	(list Points
			(100, 319)
			(41, 319)
			(41, 1515)
			(656, 1515)
			(656, 1162)
			(821, 1162))
		    line_style 	3
		    origin_attachment 	(100, 319)
		    terminal_attachment 	(821, 1162))
		(object InheritView "" @76
		    attributes 	(list Attribute_Set
			(object Attribute
			    tool       	"MDA Generator"
			    name       	"LineVertices"
			    value      	"1269,1568;1084,1287"))
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    stereotype 	TRUE
		    line_color 	3947680
		    quidu      	"470B03BF0203"
		    client     	@36
		    supplier   	@2
		    vertices   	(list Points
			(1019, 1810)
			(1019, 1288))
		    line_style 	3
		    origin_attachment 	(1019, 1810)
		    terminal_attachment 	(1019, 1288))
		(object ClassView "Class" "Logical View::shared::GCL::str::str_op" @77
		    ShowCompartmentStereotypes 	TRUE
		    SuppressAttribute 	TRUE
		    SuppressOperation 	TRUE
		    IncludeAttribute 	TRUE
		    IncludeOperation 	TRUE
		    location   	(1779, 1689)
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	658175
			default_color 	FALSE)
		    label      	(object ItemLabel
			Parent_View 	@77
			location   	(1631, 1655)
			nlines     	1
			max_width  	296
			justify    	0
			label      	"• str_op")
		    stereotype 	(object ItemLabel
			Parent_View 	@77
			location   	(1631, 1610)
			anchor     	10
			nlines     	1
			max_width  	294
			justify    	0
			label      	"<<UtilityPack>>")
		    icon_style 	"Label"
		    line_color 	658175
		    fill_color 	16777215
		    quidu      	"4503E01500CB"
		    width      	314
		    height     	180
		    annotation 	8
		    autoResize 	TRUE)
		(object UsesView "" @78
		    font       	(object Font
			size       	10
			face       	"Arial"
			charSet    	204
			bold       	FALSE
			italics    	FALSE
			underline  	FALSE
			strike     	FALSE
			color      	0
			default_color 	TRUE)
		    stereotype 	(object SegLabel @79
			Parent_View 	@78
			location   	(1573, 1570)
			font       	(object Font
			    size       	10
			    face       	"Arial"
			    charSet    	204
			    bold       	FALSE
			    italics    	FALSE
			    underline  	FALSE
			    strike     	FALSE
			    color      	0
			    default_color 	TRUE)
			anchor     	10
			anchor_loc 	1
			nlines     	1
			max_width  	450
			justify    	0
			label      	"<<uses>>"
			pctDist    	0.500000
			height     	120
			orientation 	0)
		    line_color 	3342489
		    quidu      	"4B4F62030265"
		    client     	@35
		    supplier   	@77
		    vertices   	(list Points
			(1525, 1689)
			(1621, 1689))
		    line_style 	0)))))
