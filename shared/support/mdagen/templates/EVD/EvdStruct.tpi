//////////////////////////////////////////////////////////////////////////////////
// EvdStruct
//////////////////////////////////////////////////////////////////////////////////

: EvdStruct::Class
? EVD-Структура
? Определяет структурный элемент данных формата EVD
< *::Class,*::Category
$ S
$ C 5,230,180
$ l 5,190,100
$ f 5,190,100

v +
a ra

%t _constraint
c                              {}
r {<{}{%GS!=EvdStruct}{C}>!=0}: {%SS должен наследоваться от Структуры}
/r {<{}{%GS!=UMLPrimitive&%GS!=EvdStruct&%GS!=Enum}{C}>!=0}: {%SS должен наследоваться от Тэга, Перечисления или от примитивного типа}
r {%Sa=abstract&%Zx=false}: {абстрактный Тэг должен быть специализирован}
/r {%ax=false}: {%SS ни кем не используется}

L code_evd_tag

%f _wiki_up_print

%f _wiki_up_add_gen

+ wiki
= Servant::Class;wiki

+ evd.pas
R  
	#%f_evd_TagVar(%S) := Result%t_evd_DefineStruct(%S);\
	%f_evd_OutAttrs(%S)

: EvdStruct::Class::Attribute
v +
l al
? Атрибут Тэга

p Stored:b=true ? определяет персистентность связи
p Default ? определяет значение атрибута по умолчанию
p NeedMarkModified:b=false ? Определяет - меняется ли модифицированность документа при изменении этого атрибута.
p EmptyMapping=-2 ? Определяет идентификатор вложенного тега от которого берется значение атрибута, если такового нет у родителя.

%t _constraint
c                              {}
r {%TS!=UMLPrimitive&%TS!=EvdTag&%TS!=EvdStruct&%TS!=EvdAtom&%TS!=Enum}: {Структура может содержать только другие Тэги, Структуры, Перечисления или примитивные типы}

L code_attr

%f _wiki_child_kind
	attr

+ evd.pas
	%t_evd_DefineAttr(%S);
