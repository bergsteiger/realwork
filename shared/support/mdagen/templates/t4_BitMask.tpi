//////////////////////////////////////////////////////////////////////////////////
// BitMask
//////////////////////////////////////////////////////////////////////////////////

: BitMask::Class
? Битовая маска
? определяет битовую маску указанной разрядности (связь наследования от примитивного целочисленного типа).
? дополнительно может определять группы битов, и расширять имеющиеся битовые маски
? различные BitMask имеют разный тип с т.з. компилятора
> BitGroup::Class
$ S
$ C 240,205,240
$ l 120,40,120
$ f 120,40,120

v +#-
Y t4_bitmask.gif

%t _constraint
c                              {}
r {<{}{}{%GC}>!=1}: {%SS должен наследоваться от одного типа}
r {%GS!=UMLPrimitive&%GS!=Enum}: {%SS должен наследоваться от Перечисления или примитивного целочисленного типа}
r {<{}{%PS=ServerLibrary}{C}>!=0&%f_to_lower(%PN)=%f_to_lower(%SN)}: {имя %SS, используемого в качестве серверного типа, не должно совпадать с именем родителя}
r {%ax=false}: {%SS ни кем не используется}

+ idl
	%f_docs(%S)\
	????

+ h
	[{%GS=Enum}%f_error("Генерация БитМаски на основе Перечисления - не реализована, сообщите разработчикам")
	]%f_docs(%S)\
	#class %SN : public Core::BitMaskType\<%f_type(%G), %SN\> {
	#	friend class Core::BitMaskType\<%f_type(%G), %SN\>;
	#	%SN (%t_arg(%G,"in") val) : Core::BitMaskType\<%f_type(%G), %SN\> (val) {
	#	}
	#public:
	#	%SN () : Core::BitMaskType\<%f_type(%G), %SN\> (0) {
	#	}
	<{}{}{%C}
	#	static const %SN %CN () {
	#		return 1 \<\< %Cn;
	#	}>
	#};

+ pas
	%f_docs(%S)\
	????

+ wiki
G %PU

: BitMask::Class::Attribute
v +
l a
T
Y t5_attr.gif
