//////////////////////////////////////////////////////////////////////////////////
// Exception
//////////////////////////////////////////////////////////////////////////////////

: Exception::Class
? Исключение
? Тип исключения, может содержать атрибуты. Однако не все генераторы их поддерживают. Например для метамодели ДЛЛ-Адаптера исключение не могут содержать данных.
< *::Category,*::Class
$ C 255,150,150
$ l 255, 10,10
$ f 255, 10,10

E
a ra
p stored message:b=false ? текст исключения определяеться переменной класса, и может быть модифициррован в конструкторе
p force usage:b=false ? явно определяет, что элемент будет кем-то использован (нужно для проверки)

%f _wiki_up_print
	[{%S{stored message}=true}* текст исключения определяеться переменной класса, и может быть модифициррован в конструкторе
	]

%f _wiki_up_add_gen

L code_exception
Y t4_exeption.gif

%t _constraint
c                              {}
r {<{}{%PS=ServerLibrary}{C}>!=0&%f_to_lower(%PN)=%f_to_lower(%SN)}: {имя %SS, используемого в качестве серверного типа, не должно совпадать с именем родителя}
r {%S{force usage}=false&<{}{%aC!=Class}{C}>=0&%Gx=false}: {%SS ни кем не используется}

//////////////////////////////////////////////////////////////////////////////////////////////////
+ wiki
= Servant::Class;wiki

+ idl
	%f_docs(%S)\
	#exception %SN {<
	%CX>
	#};

+ h
	%f_docs(%S)\
	#class %SN : [{}{public ::Core::Exception}<{, }public %f_type(%G)>] {
	public:[{%Cx=true|%S{stored message}=true}%f_set_var(SERV,S)
	[{%S{stored message}=true&%Sa!=abstract}	%SN () : m_message ("%SN (%f_str_replace(%SD,%f_dump_q(%S),%f_dump_escq(%S)))") {
			%U[
			]
		}
	]<{}{%CS=ctor}%CX
	>
		virtual ~%SN () throw () {
		}
	][{%Sa!=abstract|%S{stored message}=true}[{<{}{%g{stored message}=true}{C}>=0}
	#	const char* what () const throw () {
	#		return [{%S{stored message}=false}{m_message.data()}"%SN (%f_str_replace(%SD,%f_dump_q(%S),%f_dump_escq(%S)))"];
	#	}
	]][{%Sa!=abstract}
	#private:
	#	const char* uid () const /*throw ()*/ {
	#		return "%SG";
	#	}]<{}{%CS!=ctor}
	%CX>
	[{%S{stored message}=true}
	protected:
		std::string m_message;
	]#};

+ pas
	%f_docs(%S)\
	%f_type(%S) = class (Exception);

+ java
S class %SN;
O [{%f_is_server_type(%S)=false}%SN.java]
	%f_output_constraint(%S)\
	[{%f_is_server_type(%S)=false}\
# t0_header
	%f_set_var(SERVANT,S)package %f_dump_java_package(%S);
	
	%t_visibility(%S,"%XU")%t_abstract_type(%S)class %SN [{}{extends java.lang.Exception} extends %f_type(%G)] {
	[{%Cx=true|%S{stored message}=true}%f_set_var(SERV,S)
	[{%S{stored message}=true&%Sa!=abstract}	%t_visibility(%S,"%XU")%SN () {
			%U[
			]
		}
	]<{}{%CS=ctor}%CX
	>][{%Sa!=abstract|%S{stored message}=true}[{<{}{%g{stored message}=true}{C}>=0}
		%t_visibility(%S,"%XU")String what () {
			return [{%S{stored message}=false}{message}new String ("%SN (%f_str_replace(%SD,%f_dump_q(%S),%f_dump_escq(%S)))")];
		}
	]][{%Sa!=abstract}	
		private String uid () {
			return new String ("%SG");
		}]<{}{%CS!=ctor}
		%CX>
	[{%S{stored message}=true}	
		protected String message = new String ("%SN (%f_str_replace(%SD,%f_dump_q(%S),%f_dump_escq(%S)))");
	
	]} // %SN
# t0_footer
	]
//////////////////////////////////////////////////////////////////////////////////
: Exception::Class::ctor::Operation
? Конструктор 
? Конструктор объектов класса-исключения
a r
v +#
m t
T
p debug log:b=false ? включает генерацию вывода в лог обращений данному методу
L code_factory
Y t5_factory.gif

%f _wiki_child_kind
	mng

+ h
	%f_docs(%S)\
	#%{SERV}N (<{, }%f_arg_full_decl(%C)>)[ : %{SERV}<{, }{"%CI"!=""}m_%CN (%CI)>]
	#%U[{_BASE_INIT[{"%{SERV}U"!="%PU"}_%{SERV}U]}
	#]
	#{%f_start_func_cpp(%S,"%PN::%PN")
	#	%U[{_BODY[{"%{SERV}U"!="%PU"}_%{SERV}U]}
	#	]
	#%f_end_func_cpp(%S)}

+ java
	%f_docs(%S)\
	#%t_visibility(%S,"%XU")%{SERV}N (<{, }%f_arg_full_decl(%C)>) {%f_start_func_cpp(%S,"%PN")
	#	%U[{_BODY[{"%{SERV}U"!="%PU"}_%{SERV}U]}
	#	]
	#%f_end_func_cpp(%S)}
//////////////////////////////////////////////////////////////////////////////////
: Exception::Class::Attribute
v +#-
l arl
Y t5_attr.gif

%t _constraint
c                              {}
r {<{}{%PS=ServerLibrary}{C}>!=0&%f_to_lower(%PN)=%f_to_lower(%SN)}: {имя %SS не должно совпадать с именем %P%SS}

%f _wiki_child_kind
	attr

+ idl
	#[{"%SS"="sequence"}{%T<%NN::>%TN}sequence \<%T<%NN::>%TN\>] %SN;[ // %SD]

+ h
	#%f_docs(%S)\
	#%f_attr(%S) [{}{%f_to_omg(%TN)}%SN];

+ java
	%f_docs(%S)\
	#[%t_visibility(%S,"%XU")]%f_attr(%S) [{}{%f_to_borland(%TN)}%SN][ = %f_init(%S)];

//////////////////////////////////////////////////////////////////////////////////
: Exception::Class::sequence::Attribute
? Атрибут-массив
? Определяет атрибут как неограниченный массив элементов заданного типа
= Exception::Class::Attribute

//////////////////////////////////////////////////////////////////////////////////
f _dump_q
	"

f _dump_escq
	\\"
