
// Copyright (c) 2010-2014 niXman (i dot nixman dog gmail dot com). All
// rights reserved.
//
// This file is part of YAS(https://github.com/niXman/yas) project.
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef _yas_test__buffer_hpp__included_
#define _yas_test__buffer_hpp__included_

/***************************************************************************/

#ifdef YAS_DECORATE_HEADER_BYTES
#define XOR(b) (b ^ YAS_PP_STRINGIZE(YAS_DECORATE_HEADER_BYTES)[0])
#else // !YAS_DECORATE_HEADER_BYTES
#define XOR(b) b
#endif // YAS_DECORATE_HEADER_BYTES

template<typename archive_traits>
bool buffer_test(const char* archive_type, const char* io_type) {
	// binary: 4(header) + 4(string length) +21(string)= 29
	// text  : 5(header) +1(space) + 2(string length) + 1(space) +21(string) = 30
	static const char str1[] = "intrusive buffer test";

	yas::intrusive_buffer buf1(str1, sizeof(str1)-1);
	typename archive_traits::oarchive oa1;
	archive_traits::ocreate(oa1, archive_type, io_type);
	oa1 & buf1;
	// binary
	if ( yas::is_binary_archive<typename archive_traits::oarchive_type>::value ){
		static const unsigned char _res64_le[] = {
			 XOR(0x79),XOR(0x61),XOR(0x73),0x42,0x15,0x00,0x00,0x00,0x69,0x6e,0x74,0x72,0x75,0x73
			,0x69,0x76,0x65,0x20,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x74,0x65,0x73,0x74
		};
		static const unsigned char _res32_le[] = {
			 XOR(0x79),XOR(0x61),XOR(0x73),0x02,0x15,0x00,0x00,0x00,0x69,0x6e,0x74,0x72,0x75,0x73
			,0x69,0x76,0x65,0x20,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x74,0x65,0x73,0x74
		};
		static const unsigned char _res64_be[] = {
			 XOR(0x79),XOR(0x61),XOR(0x73),0x42,0x00,0x00,0x00,0x15,0x69,0x6e,0x74,0x72,0x75,0x73
			,0x69,0x76,0x65,0x20,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x74,0x65,0x73,0x74
		};
		static const unsigned char _res32_be[] = {
			 XOR(0x79),XOR(0x61),XOR(0x73),0x02,0x00,0x00,0x00,0x15,0x69,0x6e,0x74,0x72,0x75,0x73
			,0x69,0x76,0x65,0x20,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x74,0x65,0x73,0x74
		};

		const unsigned char *res_ptr = (
			YAS_PLATFORM_BITS_IS_64()
				? oa1.is_little_endian() ? _res64_le : _res64_be
				: oa1.is_little_endian() ? _res32_le : _res32_be
		);
		const unsigned int   res_size= (
			YAS_PLATFORM_BITS_IS_64()
				? oa1.is_little_endian() ? sizeof(_res64_le) : sizeof(_res64_be)
				: oa1.is_little_endian() ? sizeof(_res32_le) : sizeof(_res32_be)
		);

		if ( oa1.size() != res_size ) {
			std::cout << "BUFFER intrusive serialization error! [1]" << std::endl;
			return false;
		}
		if ( !oa1.compare(res_ptr, res_size) ) {
			std::cout << "BUFFER intrusive serialization error! [2]" << std::endl;
			return false;
		}
	// text
	} else if ( yas::is_text_archive<typename archive_traits::oarchive_type>::value ) {
		static const unsigned char res64[] = { // "yas4A 21 intrusive buffer test"
			 XOR(0x79),XOR(0x61),XOR(0x73),0x34,0x41,0x20,0x32,0x31,0x20,0x69,0x6e,0x74,0x72,0x75,0x73
			,0x69,0x76,0x65,0x20,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x74,0x65,0x73,0x74
		};
		static const unsigned char res32[] = { // "yas0A 21 intrusive buffer test"
			 XOR(0x79),XOR(0x61),XOR(0x73),0x30,0x41,0x20,0x32,0x31,0x20,0x69,0x6e,0x74,0x72,0x75,0x73
			,0x69,0x76,0x65,0x20,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x74,0x65,0x73,0x74
		};
		const unsigned char* res = (YAS_PLATFORM_BITS_IS_64()) ? res64 : res32;
		if ( oa1.size() != strlen((const char*)res) ) {
			std::cout << "BUFFER intrusive serialization error! [3]" << std::endl;
			return false;
		}
		if ( !oa1.compare(res, strlen((const char*)res)) ) {
			std::cout << "BUFFER intrusive serialization error! [4]" << std::endl;
			return false;
		}
	// json
	} else if ( yas::is_json_archive<typename archive_traits::oarchive_type>::value ) {
		std::cout << "BUFFER intrusive serialization error! json is not implemented!" << std::endl;
		return false;
	}

	static const char str2[] = "shared buffer test"; // 18 + 4(header) + 4(size of array) = 26
	yas::shared_buffer buf2(str2, sizeof(str2)-1);
	typename archive_traits::oarchive oa2;
	archive_traits::ocreate(oa2, archive_type, io_type);
	oa2 & buf2;
	if ( yas::is_binary_archive<typename archive_traits::oarchive_type>::value ){
		static const unsigned char _res64_le[] = {
			 XOR(0x79),XOR(0x61),XOR(0x73),0x42,0x12,0x00,0x00,0x00,0x73,0x68,0x61
			,0x72,0x65,0x64,0x20,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x74,0x65,0x73,0x74
		};
		static const unsigned char _res32_le[] = {
			 XOR(0x79),XOR(0x61),XOR(0x73),0x02,0x12,0x00,0x00,0x00,0x73,0x68,0x61
			,0x72,0x65,0x64,0x20,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x74,0x65,0x73,0x74
		};
		static const unsigned char _res64_be[] = {
			 XOR(0x79),XOR(0x61),XOR(0x73),0x42,0x00,0x00,0x00,0x12,0x73,0x68,0x61
			,0x72,0x65,0x64,0x20,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x74,0x65,0x73,0x74
		};
		static const unsigned char _res32_be[] = {
			 XOR(0x79),XOR(0x61),XOR(0x73),0x02,0x00,0x00,0x00,0x12,0x73,0x68,0x61
			,0x72,0x65,0x64,0x20,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x74,0x65,0x73,0x74
		};

		const unsigned char *res_ptr = (
			YAS_PLATFORM_BITS_IS_64()
				? oa2.is_little_endian() ? _res64_le : _res64_be
				: oa2.is_little_endian() ? _res32_le : _res32_be
		);
		const unsigned int   res_size= (
			YAS_PLATFORM_BITS_IS_64()
				? oa2.is_little_endian() ? sizeof(_res64_le) : sizeof(_res64_be)
				: oa2.is_little_endian() ? sizeof(_res32_le) : sizeof(_res32_be)
		);

		if ( oa2.size() != res_size ) {
			std::cout << "BUFFER shared serialization error! [5]" << std::endl;
			return false;
		}
		if ( !oa2.compare(res_ptr, res_size) ) {
			std::cout << "BUFFER shared serialization error! [6]" << std::endl;
			return false;
		}
	} else if ( yas::is_text_archive<typename archive_traits::oarchive_type>::value ) {
		static const unsigned char res64[] = { // "yas4A 18 shared buffer test"
			 XOR(0x79),XOR(0x61),XOR(0x73),0x34,0x41,0x20,0x31,0x38,0x20,0x73,0x68
			,0x61,0x72,0x65,0x64,0x20,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x74,0x65,0x73,0x74
		};
		static const unsigned char res32[] = { // "yas0A 18 shared buffer test"
			 XOR(0x79),XOR(0x61),XOR(0x73),0x30,0x41,0x20,0x32,0x32,0x20,0x73,0x68
			,0x61,0x72,0x65,0x64,0x20,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x74,0x65,0x73,0x74
		};

		const unsigned char* res_ptr = (YAS_PLATFORM_BITS_IS_64() ? res64 : res32);
		const unsigned int   res_size= (YAS_PLATFORM_BITS_IS_64() ? sizeof(res64) : sizeof(res32));

		if ( oa2.size() != res_size ) {
			std::cout << "BUFFER shared serialization error! [7]" << std::endl;
			return false;
		}
		if ( !oa2.compare(res_ptr, res_size) ) {
			std::cout << "BUFFER shared serialization error! [8]" << std::endl;
			return false;
		}
		typename archive_traits::iarchive ia1;
		archive_traits::icreate(ia1, oa2, archive_type, io_type);
		yas::shared_buffer buf4;
		ia1 & buf4;
		if ( buf4.size != sizeof(str2)-1 || memcmp(str2, buf4.data.get(), buf4.size) ) {
			std::cout << "BUFFER shared deserialization error! [9]" << std::endl;
			return false;
		}
	}

	return true;
}

#undef XOR

/***************************************************************************/

#endif // _yas_test__buffer_hpp__included_
